def LPS(needle):
    lps = range(0, len(needle))
    lps[0] = 0
    
    i = 1
    
    temp = 0
    while i < len(needle):
        if needle[i] == needle[temp]:
            temp += 1
            lps[i] = temp;
            i += 1;
        else:
            if temp == 0:
                lps[i] = 0
                i += 1
            else:
                temp = lps[temp - 1]
                
    return lps
    
    
def KMP(needle, haystack):
    lps = LPS(needle)
    
    i = 0
    j = 0
    
    max = 0
    max_index = 0
    while i < len(haystack):
        if needle[j] == haystack[i]:
            i += 1
            j += 1
        
        if j == len(needle):
            return i - j
        elif i < len(haystack) and needle[j] != haystack[i]:
            if j != 0:
                if j > max:
                    max = j
                    max_index = i - j
                j = lps[j - 1]
            else:
                i += 1
                
    return max_index
    
def main():
    n = int(raw_input())
    a = raw_input()
    b = raw_input()
    b += b
    
    print KMP(a, b)

main()            
    
    