def KMPSearch(pat, txt):
    M = len(pat)
    N = len(txt)


    lps = [0]*M
    j = 0


    computeLPSArray(pat, M, lps)
    res = 0
    best = 0
    i = 0
    ans = 0
    while i < N:
        if pat[j] == txt[i]:
            i+=1
            j+=1
            best += 1
        if best > res :
            res = best
            ans = i-j
        if j==M:
            return 0



        elif i < N and pat[j] != txt[i]:
            best = 0
            if j != 0:
                j = lps[j-1]
            else:
                i+=1
    return ans
def computeLPSArray(pat, M, lps):
    len = 0
    lps[0]
    i = 1


    while i < M:
        if pat[i]==pat[len]:
            len+=1
            lps[i] = len
            i+=1
        else:
            if len!=0:

                len = lps[len-1]


            else:
                lps[i] = 0
                i+=1



n = int(raw_input())
A = raw_input()
B = raw_input()
B += B
print KMPSearch(A,B)