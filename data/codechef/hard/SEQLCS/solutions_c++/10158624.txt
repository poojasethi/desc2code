#include <bits/stdc++.h>

using namespace std;

#define max(a,b) ((a)>(b)?a:b)
#define   MOD 1000000007

int nextmask(int v, int mask, vector<int>& vi) {
	int L[2][18];
	memset(L,0,sizeof(L));
	int LCS = 0;
	for (int i = 0; i < vi.size(); i++) {
		if(mask & (1<<i))	LCS++;
		L[0][i+1] = LCS;
	}
	int ret = 0;
	for (int i = 1; i <= vi.size(); i++) {
		L[1][i] = (v==vi[i-1])?1+L[0][i-1]:max(L[0][i],L[1][i-1]);
		if(L[1][i]>L[1][i-1])	ret|=(1 << (i-1));
	}
	return ret;
}

int memo[18][1<<16];
int newmask[18][1<<16];
int N,K,L;

int solve(int b, int mask, int K, int L) {
	if (b > N) {
		int LCS = 0;
		for (int i = 0; i < N; i++) {
			if (mask & (1<<i))	LCS++;
		}
		return LCS==L;
	}
	if(memo[b][mask]!=-1)	return memo[b][mask];
	int ways = 0;
	for (int i = 1; i <= K; i++) {
		ways += solve(b+1,newmask[i][mask],K,L);
		if(ways >= MOD)
			ways %= MOD;
	}
	return memo[b][mask] = ways;
}

int main() {
	vector<int> vi;
	int test;
	cin >> test;
	int num;
	while (test--) {
		memset(memo,-1,sizeof(memo));
		vi.clear();
		cin >>N>>K>>L;
		for (int i = 0; i < N; i++) {
			cin >> num;
			vi.push_back(num);
		}

		for (int i = 1; i <= K; i++) {
			for(int j = 0 ; j < (1<<N) ; j++)
				newmask[i][j] = nextmask(i,j,vi);
		}
		int ans = solve(1,0,K,L);
		cout << ans << endl;
	}
}