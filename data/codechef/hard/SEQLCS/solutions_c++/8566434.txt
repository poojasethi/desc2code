#include<bits/stdc++.h>

using namespace std;

#define vi vector < int >
#define pii pair < int , int >
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define foreach(it,v) for( __typeof((v).begin())it = (v).begin() ; it != (v).end() ; it++ )
#define ll long long
#define llu unsigned long long
#define MOD 1000000007
#define INF 0x3f3f3f3f
#define dbg(x) { cout<< #x << ": " << (x) << endl; }
#define dbg2(x,y) { cout<< #x << ": " << (x) << " , " << #y << ": " << (y) << endl; }
#define all(x) x.begin(),x.end()
#define mset(x,v) memset(x, v, sizeof(x))
#define sz(x) (int)x.size()

int n,k,l;
int a[20];
int trans[20][1<<16];
int dp[20][1<<16];

int eval(int x,int msk)
{
    int i;
    int clcs[20] = {0};
    int nlcs[20] = {0};
    for(i=0;i<n;i++)
    {
        if(msk&(1<<i))
        {
            clcs[i+1] = clcs[i] + 1;
        }
        else
        {
            clcs[i+1] = clcs[i];
        }
    }
    int nmsk = 0;
    for(i=0;i<n;i++)
    {
        if(x == a[i])
        {
            nlcs[i+1] = clcs[i] + 1;
        }
        else
        {
            nlcs[i+1] = max(clcs[i+1],nlcs[i]);
        }
        if(nlcs[i+1] > nlcs[i])
            nmsk |= (1<<i);
    }
    return nmsk;
}


void prec()
{
    int i,j;
    for(i=1;i<=k;i++)
    {
        for(j=0;j<(1<<n);j++)
        {
            trans[i][j] = eval(i,j);
        }
    }
}

int solve(int tot,int msk)
{
    if(tot == 0)
    {
        return __builtin_popcount(msk) == l;
    }

    if(dp[tot][msk] != -1)
        return dp[tot][msk];

    int ret = 0,i;

    for(i=1;i<=k;i++)
    {
        ret += solve(tot-1,trans[i][msk]);
        ret %= MOD;
    }

    return dp[tot][msk] = ret;
}

int main()
{
    int t,i;
    scanf("%d",&t);
    while(t--)
    {
        mset(dp,-1);
        scanf("%d%d%d",&n,&k,&l);
        for(i=0;i<n;i++)
        {
            scanf("%d",&a[i]);
        }
        prec();
        int ans = solve(n,0);
        printf("%d\n",ans);
    }
    return 0;
}
