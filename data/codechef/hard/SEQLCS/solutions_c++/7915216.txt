//amazing takes time, legendary requires patience
#include "bits/stdc++.h"
#define sd(n) scanf("%d", &(n))
#define rep(i, x, n) for (int i = x, _n = (n); i < _n; ++i)
#define repi(i, a) for(typeof((a).begin()) i = (a).begin(), _##i = (a).end(); i != _##i; ++i)
#define pra(v) repi(it, v) cout << *it << " "; cout << endl;
#define SZ(c) (int)(c).size()
#define lcm(a,b) (a*(b/__gcd(a,b)))
#define VI vector<int>
#define all(c) (c).begin(), (c).end()
#define allr(c) (c).rbegin(), (c).rend()
#define pb push_back
#define mii map<int, int>
#define pii pair<int, int>
#define pip pair<int, pii>
#define F first
#define S second
#define mp make_pair
#define lli long long int
#define llu unsigned long long
#define CLR(p) memset(p, 0, sizeof(p))
#define SET(p) memset(p, -1, sizeof(p))
#define INF 0x3f3f3f3f
#define pi 3.14159265358979
#define debug 0
using namespace std;

const int MOD = 1e9+7;
const int MAX = 100010;

int n;

int nextmask(int v, int mask, VI &a)
{
	int n = SZ(a), ret = 0;
	int lcs[2][20], len = 0;
	CLR(lcs);
	rep(i, 0, n)
	{
		if(mask&(1<<i)) len++;
		lcs[0][i+1] = len;
	}
	
	
	rep(i, 1, n+1)
	{
		lcs[1][i] = v == a[i-1] ? 1 + lcs[0][i-1] : max(lcs[0][i], lcs[1][i-1]);
		if(lcs[1][i] > lcs[1][i-1]) ret |= (1<<(i-1));		//set i-1'th bit in mask
	}
	return ret;
}

int memo[18][1<<16];
int newmask[18][1<<16];

int solve(int b, int mask, int K, int L)
{
	int ret = 0;
	if(b > n)
	{
		int lcs = 0;
		rep(i, 0, n) if((1<<i)&mask) lcs++;
		return lcs == L;
	}
	if(memo[b][mask] != -1) return memo[b][mask];
	rep(i, 1, K+1)
	{
		ret += solve(b+1, newmask[i][mask], K, L);
		if(ret >= MOD) ret %= MOD;
	}
	return memo[b][mask] = ret;
}

int main()
{
	ios_base::sync_with_stdio(0);
	int t, k, K, L;
	VI a;
	cin >> t;
	while(t--)
	{
		cin >> n >> K >> L;
		a.clear();
		rep(i, 0, n)
		{
			cin >> k;
			a.pb(k);
		}
		
		rep(i, 1, K+1)	//adding number i at the end of array b
			rep(j, 0, 1<<n)
				newmask[i][j] = nextmask(i, j, a);
				
		if(debug)
		rep(i, 1, K+1)
		{
			rep(j, 0, 1<<n)
				cout << newmask[i][j] << " ";		
			cout << endl;
		}
		SET(memo);
		int ans = solve(1, 0, K, L);
		cout << ans << endl;
	}
    return 0;
}    	