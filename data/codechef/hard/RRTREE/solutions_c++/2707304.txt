#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>

using namespace std;

#define MAXN 200002
#define MAXL 19

int n;
vector <int> g[MAXN];
int d[MAXN];
int p[MAXL][MAXN];
int in[MAXN];
int out[MAXN];
int tt;

inline void dfs(int v, int pr, int depth)
{
	in[v] = tt++;
	p[0][v] = pr;
	d[v] = depth;
	for (int i = g[v].size() - 1; i >= 0; --i)
	{
		int v2 = g[v][i];
		if (v2 != pr)
			dfs(v2, v, depth + 1);
	}
	out[v] = tt++;
}

inline bool isChild(int v, int v2)
{
	return in[v] <= in[v2] && out[v2] <= out[v];
}

inline int lca(int v1, int v2)
{
	if (d[v1] < d[v2]) swap(v1, v2);
	for (int i = MAXL - 1; i >= 0; --i)
		if (p[i][v1] != -1 && d[p[i][v1]] >= d[v2])
			v1 = p[i][v1];
	if (v1 == v2) return v1;
	for (int i = MAXL - 1; i >= 0; --i)
		if (p[i][v1] != -1 && p[i][v2] != -1 && p[i][v1] != p[i][v2])
		{
			v1 = p[i][v1];
			v2 = p[i][v2];
		}
	return p[0][v1];
}

inline void solve()
{
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		g[i].clear();

	for (int i = 1; i < n; ++i)
	{
		int t;
		scanf("%d", &t);
		--t;
		g[i].push_back(t);
		g[t].push_back(i);
	}

	if (n == 1) return;

	int cc = 0;
	dfs(cc, -1, 0);

	for (int i = 1; i < MAXL; ++i)
		for (int j = 0; j < n; ++j)
			p[i][j] = p[i - 1][j] == -1 ? -1 : p[i - 1][p[i - 1][j]];

	int v1 = 0, v2 = 1, ans = 1;
	printf("%d\n", ans);
	for (int i = 2; i < n; ++i)
	{
		int dist1 = d[v1] + d[i] - 2 * d[lca(v1, i)];
		int dist2 = d[v2] + d[i] - 2 * d[lca(v2, i)];
		if (dist1 > ans)
		{
			v2 = i;
			ans = dist1;
		}
		else if (dist2 > ans)
		{
			v1 = i;
			ans = dist2;
		}
		printf("%d\n", ans);
	}
}

int main()
{
	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
		solve();
	return 0;
}
