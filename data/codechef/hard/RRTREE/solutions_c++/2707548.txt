#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <cmath>
#include <stack>
#include <list>
#include <set>
#include <string.h>
 
using namespace std;
 
typedef long long ll;
 
#define pii pair<int,int>
#define mp make_pair 
#define f first
#define s second
#define MAXN 100009
#define LOGMAX 18

int T[MAXN],P[MAXN][LOGMAX+1],dep[MAXN],N;

void  Build() {
	memset(P,-1,sizeof P);
	
	for (int i=1;i<=N;i++) {
		P[i][0]=T[i];
	}
	for (int j=1;j<=LOGMAX;j++) {
		for (int i=1;i<=N;i++) {
			if (P[i][j-1]!=-1) 
			P[i][j]=P[ P[i][j-1] ] [j-1];
		}
	}
}

int Lca(int v,int u) {
	if (dep[v]>dep[u])
		swap(v,u);
	
	
	int up=dep[u]-dep[v];
	for (int i=LOGMAX;i>=0;i--) {
		if ((1<<i)<=up) {
			up-=(1<<i);
			u=P[u][i];
		}
	}
	
	if (v==u)
		return u;
	
	for (int i=LOGMAX;i>=0;i--) {
		if (P[u][i]!=P[v][i])
			u=P[u][i],v=P[v][i];
	}
	
	return T[u];
}

void Read () {
	scanf("%d",&N);
	dep[1]=0;
	T[1]=-1;
	for (int i=2;i<=N;i++) {
		scanf("%d",&T[i]);
		dep[i]=dep[T[i]]+1;
	}
}

void Solve() {
	int low=1,low_dep=0,cur_ans=0;
	
	for (int i=2;i<=N;i++) {
		if (dep[i]>low_dep) {
			cur_ans++;
			printf("%d\n",cur_ans);
			low=i;
			low_dep++;
		}
		else {
			int lc=Lca(low,i);
			int apant=low_dep+dep[i]-2*dep[lc];
			if (apant>cur_ans)
				cur_ans=apant;
			printf("%d\n",cur_ans);
		}
	}
}

void Init() {
	memset(T,0,sizeof T);
	memset(dep,0,sizeof dep);
}

int main () {
	//freopen("in.in","r",stdin);

	int t;
	scanf("%d",&t);
	
	while (t--) {
		Read();
		Build();
		Solve();
		Init();
	}
	
	return 0;
}
