#include<iostream>
#include<vector>
#include<string.h>
using namespace std;
int f[100010][20],l[100010];bool vis[100001];
vector<int>adj[100001];
 
int dfs(int v,int le)
{
    vis[v]=1;
    l[v]=le;
    for(int i=0;i<adj[v].size();i++)
    {
            if(!vis[adj[v][i]])dfs(adj[v][i],le+1);
    }
} 
int lca(int p, int q)
  {
      int tmp, log, i;
   
  //if p is situated on a higher level than q then we swap them
      if (l[p] < l[q])swap(p,q);
  
  //we compute the value of [log(L[p)]
      for (log = 1; 1 << log <= l[p]; log++);
      log--;
   
  //we find the ancestor of node p situated on the same level
  //with q using the values in P
      for (i = log; i >= 0; i--)
          if (l[p] - (1 << i) >= l[q])
              p = f[p][i];
   
      if (p == q)
          return p;
 // cout<<p<<" p  "<<q<<" "<<f[p][0]<<endl;
  //we compute LCA(p, q) using the values in P
      for (i = log; i >= 0; i--)
         { if (f[p][i] != -1 && f[p][i]!=f[q][i])
              p = f[p][i], q = f[q][i];
             // cout<<"yes"<<p<<" "<<q<<endl;
         }
  // cout<<"lca="<<f[p][0]<<endl;
      return f[p][0];
}                
int dis(int a,int b)
{
   // cout<<a<<" "<<b<<endl;
   //cout<<l[a]<<" "<<l[b]<<" "<<l[lca(a,b)]<<endl;
    return l[a]+l[b]-2*l[lca(a,b)];
}  
       
int main()
{
    int t,n,i,j,p;
   // cout<<(1<<0)<<endl;
    cin>>t;
    while(t--)
    {
              cin>>n;
              if(n==1)continue;
              memset(f,-1,sizeof(f));
              memset(vis,0,sizeof(vis));
              for(i=0;i<=n;i++)adj[i].clear();
              for(i=2;i<=n;i++)
              {
                              cin>>p;
                              f[i][0]=p;
                              adj[p].push_back(i);
              }
              dfs(1,0);
              for(j=1;1<<j<=n;j++)
              {
                               for(i=0;i<=n;i++)
                               {
                                               if(f[i][j-1]>0)
                                               {
                                                               f[i][j]=f[f[i][j-1]][j-1];
                                               }
                               }
              }
              int p1=1;
              int p2=2;
              int l=1;
              cout<<l<<endl;
              for(i=3;i<=n;i++)
              {
                   int l1=dis(i,p1);
                   int l2=dis(i,p2);
                   //cout<<l1<<" "<<l2<<endl;
                   if(l1>=l2 && l1>l)p2=i,l=l1;
                   if(l2>=l1 && l2>l)p1=i,l=l2;
                   cout<<l<<endl;
              } 
    }
    return 0;
}                                         