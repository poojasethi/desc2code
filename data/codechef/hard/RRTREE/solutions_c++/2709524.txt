#include <iostream>
#include <vector>

#define M 100100
#define A 20

using namespace std;

int n,p[A][M],d[M],dm,ans,t[M],l[M],r[M],m,ex;
vector<int> g[M];

void upd(int v){
	for (int i=1; i<A; ++i)
		p[i][v]=p[i-1][p[i-1][v]];
}

bool anc(int x, int y){
	return l[x]<=l[y] && r[y]<=r[x];
}

int lca(int x, int y){
	if (anc(x,y))
		return x;
	int k=1;
	while (!anc(p[k][x],y))
		k++;
	return lca(p[k-1][x],y);
}

int dist(int x, int y){
	return d[x]+d[y]-2*d[lca(x,y)];
}

void resolve(int v){
	int pr=p[0][v];
	if (d[pr]==dm){
		dm++;
		ex=v;
		cout<<++ans<<"\n";
		return;
	}

	int to=dist(ex,v);
	if (ans<to)
		ans=to;
	
	cout<<ans<<"\n";
}

void read(void){
	cin>>n;
	t[1]=1;
	m=0;
	for (int i=1; i<=n; ++i)
		g[i].clear();
	for (int i=2; i<=n; ++i){
		cin>>t[i];
		g[t[i]].push_back(i);
	}
}

void dfs(int v){
	l[v]=m++;
	for (int i=0; i<g[v].size(); ++i)
		dfs(g[v][i]);
	r[v]=m++;
}

void kill(void){
	ans=0;
	dm=0;
	ex=1;
	d[1]=0;
	p[0][1]=1;
	upd(1);
	for (int i=2; i<=n; ++i){
		p[0][i]=t[i];
		d[i]=d[t[i]]+1;
		upd(i);
		resolve(i);
	}
}


int main(){
	ios_base::sync_with_stdio(0);
	int t;
	cin>>t;
	while (t--){
		read();
		dfs(1);
		kill();
	}
	return 0;
}