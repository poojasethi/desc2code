//Program: tree
//Author: gary
//Date: 22/09/2013
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <limits>
#include <string>
#include <iostream>
#include <sstream>
#include <functional>
#include <algorithm>
#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
using namespace std;

#define ALL(c) (c).begin(), (c).end()
#define CNT(c,x) ((c).find(x) != (c).end())
#define FOR(i, a, n) for(int i=(a);i<=(n);i++)
#define REP(i, n) for(int i=0;i<(n);i++)
#define REP1(i, n) for(int i=0;i<=(n);i++)
#define DBG(VAR) cerr<<#VAR<<" = "<<(VAR)<<endl;
#define CLR(x, v) memset(x, v, sizeof(x))
#define SZ(x) ( (int) (x).size() )
#define MP(x, y) make_pair( (x), (y) )
#define MP3(x, y, z) MP( (x), MP( (y), (z) ) )
#define MP4(x1, y1, x2, y2) MP( MP(x1, y1), MP(x2, y2) )
#define foreach(it, C) for(typeof((C).begin())it=(C).begin();it!=(C).end();++it)
#define pb push_back
typedef long long LL;
typedef pair<int, int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//int dx[]={-1,0,1,0},  dy[]={0,1,0,-1};
//int dx[]={-1,-1,0,1,1,1,0,-1},dy[]={0,1,1,1,0,-1,-1,-1};
const int INF = 1e9;
const int N = 1e5 +10;
const int ROOT = 1;
int d[N];
int p[N][17];
int v1, v2;
int n;
int dia;

int lca(int a, int b){
  if(d[a] < d[b])
    swap(a, b);
  int dif = d[a] - d[b];
  for(int i = 0; (1 << i) <= dif; i++)
    if( (dif >> i) & 1 )
      a = p[a][i];
  // now same height
  if(a == b)
    return a;
  for(int i = 16; i >= 0; i--)
    if( p[a][i] != p[b][i] && p[a][i] != -1)
      a = p[a][i], b = p[b][i];
  return p[a][0];
}

int dist(int a, int b){
  return d[a] + d[b] - 2 * d[lca(a,b)];
}

int main(){
  int T;
  scanf("%d",&T);
  while(T--){
    CLR(p, -1);
    CLR(d, 0);
    v1 = v2 = ROOT;
    dia = 0;
    scanf("%d", &n);
    for(int i = 2; i <= n; i++){
      scanf("%d", &p[i][0]);
      d[i] = d[p[i][0]] + 1;
      for(int j = 1; (1 << j) < i; j++)
	if(p[i][j-1] != -1)
	  p[i][j] = p[p[i][j-1]][j-1];
      //      printf("%d %d %d\n", d[1], d[2], lca(1,2));
      if(checkMax(dia, dist(v1, i)))
	v2 = i;
      else if(checkMax(dia, dist(i, v2)))
	v1 = i;
      printf("%d\n", dia);
    }
  }
  return 0;
}
