// CodeChef - RRTREE
// Advanced DS
// Online LCA queries.

#include <iostream>
#include <stdio.h>

#define MAX 100005

using namespace std;

int parent[MAX], depth[MAX], f[MAX][20];

void process(int u)
{
  int p = parent[u];
  depth[u] = depth[p] + 1;
  f[u][0] = p;
  for(int i = 1; i <= 17; ++i)
   f[u][i] = f[f[u][i - 1]][i - 1];
}

// Get the SP length between two nodes.
int LCA(int u, int v)
{
  int length = depth[u] + depth[v];

  if(depth[u] < depth[v]) swap(u, v);
  for(int i = 17; i >= 0; --i)
   if(depth[f[u][i]] >= depth[v])
    u = f[u][i];

  for(int i = 17; i >= 0; --i)
   if(f[u][i] != f[v][i]) 
   { 
     u = f[u][i]; 
     v = f[v][i];
   }

  if(u != v)
  { 
    u = f[u][0]; 
    v = f[v][0]; 
  }

  length = length - 2 * depth[u]; // Tarjan's result.
  return length;
}

int main()
{
  int t, n;
  int length1, length2;
  int start, end;
  int p, diameter;
  
  scanf("%d", &t);
  while(t--)
  {
    start = end = 1; diameter = 0;
    scanf("%d", &n);
    for(int i = 2; i <= n; ++i)
    {
      scanf("%d", &p);
      parent[i] = p;
      process(i);

      length1 = LCA(i, start);
      length2 = LCA(i, end);

      // Update the ends & diameter.
      if(length1 > diameter) { diameter = length1; end = i; }
      else if(length2 > diameter) { diameter = length2; start = i; }

      printf("%d\n", diameter);
    }
  }

  return 0;
}