#include <bits/stdc++.h>

using namespace std;

const int N = 100005, LOG = 20;

int n;
int L[N], P[N][LOG];

int cur_dia, v1, v2;

int findParent (int p, int x) {
	for (int i = LOG - 1; i >= 0; i--) {
		if (x >= (1 << i) && p != -1) {
			p = P[p][i];
			x -= (1 << i);
		}
	}
	
	return p;
}

int getLCA (int p, int q) {
	if (L[p] < L[q])
		swap (p, q);
	
	int log = 1;
	for (log = 1; (1 << log) <= L[p]; log++);
	log --;
	
	for (int i = log; i >= 0; i--) {
		if (L[p] - L[q] >= (1 << i)) {
			p = P[p][i];
		}
	}
	
	assert (L[p] == L[q]);
	
	if (p == q)
		return p;
	
	for (int i = log; i >= 0; i--) {
		if (P[p][i] != -1 && P[p][i] != P[q][i]) {
			assert (L[p] == L[q]);
			p = P[p][i];
			q = P[q][i];
		}
	}
	
	return P[p][0];
}

int getDist (int u, int v) {
	int lca = getLCA (u, v);
	if (lca <= 0)
		lca = 0;
	
	//printf ("lca %d\n", lca);
		
	return L[u] + L[v] - 2 * L[lca];	
}

void add (int u, int par) {
	L[u] = L[par] + 1;
	P[u][0] = par;
	
	for (int len = 1; len < LOG; len++) {
		P[u][len] = findParent (par, (1 << len) - 1);
	}
	
	int d1 = getDist (v1, u);
	int d2 = getDist (v2, u);
	
	//printf ("Dist %d, %d %d , %d %d\n", u, v1, v2, d1, d2);
	
	if (max (d1, d2) > cur_dia) {
		if (d1 > d2) {
			cur_dia = d1;
			v2 = u;	
		} else {
			cur_dia = d2;
			v1 = u;
		}
	}
}

int main() {
	int T;
	scanf ("%d", &T);
	while (T--) {
		scanf ("%d", &n);
		
		cur_dia = 0;
		v1 = 0, v2 = 0;
		memset (P, -1, sizeof (P));
		memset (L, 0, sizeof (L));
		
		for (int i = 0; i + 1 < n; i++) {
			int t;
			scanf ("%d", &t);
			t --;
			
			if (i == 0) {
				L[i + 1] = 1;
				P[i + 1][0] = 0;
				cur_dia = 1;
				v1 = 0;
				v2 = 1;
			} else {
				add (i + 1, t);				
			}
			
			printf ("%d\n", cur_dia);
		}	
	}
	
	return 0;
}