#include <stdio.h>
#include <iostream>
#include <string.h>
#define M 100005

using  namespace std;

int dp[M][20],level[M],n,m;

int LCA(int p,int q)
{
    int i,j,k,tmp,log;

    if(level[q]>level[p])
    {
        tmp=p;
        p=q;
        q=tmp;
    }

    for(log=1;(1<<log)<=level[p];log++) ;

    log--;

    for(i=log;i>=0;i--)
    {
        if(level[p]-(1<<i)>=level[q]) p=dp[p][i];

        if(level[p]==level[q]) break;
    }

    if(p==q) return p;

    for(i=log;i>=0;i--)
    {
        if(dp[p][i]!=-1 && dp[p][i]!=dp[q][i])
        {
            p=dp[p][i];
            q=dp[q][i];
        }
    }


    return dp[p][0];
}

int dist(int p,int q)
{
    return level[p]+level[q]-2*level[LCA(p,q)];
}

int main()
{
    int i,j,k,t,T,a,b,d;

    //freopen("rrtree.txt","r",stdin);

    scanf("%d",&T);

    while(T--)
    {
        memset(dp,-1,sizeof(dp));

        scanf("%d",&m);

        if(m==1) continue;

        level[1]=0;

        scanf("%d",&k);

        n=2;
        level[2]=1;
        dp[2][0]=1;
        d=1;

        printf("1\n");


        for(a=1,b=2,i=3;i<=m;i++)
        {
            scanf("%d",&k);

            n++;
            level[n]=level[k]+1;
            dp[n][0]=k;

            for(j=1;dp[n][j-1]!=-1;j++)  dp[n][j]=dp[dp[n][j-1]][j-1];

            if(dist(a,n)>dist(b,n))
            {
                if(dist(a,n)>d)
                {
                    d=dist(a,n);
                    b=n;

                }
            }

            else if(dist(b,n)>d)
            {
                d=dist(b,n);
                a=n;
            }


            printf("%d\n",d);

        }
    }

    return 0;
}
