#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <queue>
#include <set>
#include <algorithm>
#include <bitset>
#include <cmath>

using namespace std;

int nextInt() {
    char c;
    int x = 0, p = 1;
    do {
        c = getchar();
    } while (c <= 32);
    if (c == '-') {
        p = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9') {
        x = x * 10 + c - '0';
        c = getchar();
    }
    return x * p;
}

const int maxn = 100500;

int n, p[maxn];
vector<int> g[maxn];
int f[maxn][20], depth[maxn], tin[maxn], tout[maxn], timer;

void dfs(int v, int p, int d) {
    depth[v] = d;
    tin[v] = ++timer;
    f[v][0] = p;
    for (int i = 1; i < 20; i++)
        f[v][i] = f[f[v][i - 1]][i - 1];
    for (size_t i = 0; i < g[v].size(); i++) {
        int to = g[v][i];
        dfs(to, v, d + 1);
    }
    tout[v] = ++timer;
}

bool isAncestor(int x, int y) {
    return tin[x] <= tin[y] && tout[x] >= tout[y];
}

int LCA(int x, int y) {
    if (isAncestor(x, y)) return x;
    if (isAncestor(y, x)) return y;
    for (int i = 19; i >= 0; i--)
        if (!isAncestor(f[x][i], y)) x = f[x][i];
    return f[x][0];
}

int dist(int x, int y) {
    int lca = LCA(x, y);
    return depth[x] + depth[y] - 2 * depth[lca];
}

void relax(int v, int & x, int & y, int & maDist) {
    int xx = x, yy = y;
    int t = dist(xx, v);
    if (t > maDist) {
        maDist = t;
        x = xx;
        y = v;
    }
    t = dist(yy, v);
    if (t > maDist) {
        maDist = t;
        x = yy;
        y = v;
    }
}

void solve() {
    n = nextInt();
    for (int i = 1; i <= n; i++) g[i].resize(0);
    for (int i = 2; i <= n; i++) {
        p[i] = nextInt();
        g[p[i]].push_back(i);
    }
    dfs(1, 1, 0);
    int x = 1, y = 1, maDist = 0;
    for (int i = 2; i <= n; i++) {
        relax(i, x, y, maDist);
        printf("%d\n", maDist);
    }
}

int main() {
    //freopen("input.txt", "r", stdin);
    //ios_base::sync_with_stdio(0);

    int T = nextInt();

    while (T--) {
        solve();
    }

    return 0;
}
