#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <memory.h>

using namespace std;

int n;
int pr[20][100000];
int h[100000];
int v1, v2, d;

void add(int v, int ppr)
{
	h[v] = h[ppr] + 1;
	pr[0][v] = ppr;
	for (int i = 1; i < 20; ++i)
		pr[i][v] = pr[i-1][pr[i-1][v]];
}


int lift(int v, int dh)
{
	for (int i = 0; i < 20; ++i)
		if (dh&(1<<i))
			v = pr[i][v];
	return v;
}

int findDist(int v1, int v2)
{
	if (h[v1] < h[v2])
		swap(v1, v2);
	int ans = h[v1] - h[v2];
	v1 = lift(v1, h[v1] - h[v2]);
	
	if (v1 == v2)
		return ans;
	for (int i = 19; i >= 0; --i)
		if (pr[i][v1] != pr[i][v2])
		{
			ans += 2*(1<<i);
			v1 = pr[i][v1];
			v2 = pr[i][v2];
		}
	ans += 2;
	return ans;
}

void solve()
{
	scanf("%d", &n);
	v1 = v2 = 0;
	d = 0;
	add(0, 0);
	h[0] = 0;

	for (int v = 1; v < n; ++v)
	{
		int prv;
		scanf("%d", &prv);
		prv--;
		add(v, prv);
		int d1 = findDist(v, v1);
		int d2 = findDist(v, v2);
		if (d1 > d2)
		{
			swap(v1, v2);
			swap(d1, d2);
		}

		if (d1 > d)
		{
			if (v1 != v2)
			{
				++d;
				v2 = v1;
			}
			else
			{
				int vv1 = lift(v, d);
				if (pr[0][vv1] == v1)
					v1 = vv1;
				else
					v1 = pr[0][v1];
			}

		}

		printf("%d\n", 2*d + (v1 != v2));
		//cerr << "INF: " << v1+1 << ' ' << v2+1 << " " << d << "\n";
	}
}


int main()
{
	ios_base::sync_with_stdio(0);
	int test;
	scanf("%d", &test);
	while (test--)
		solve();
	return 0;
}
