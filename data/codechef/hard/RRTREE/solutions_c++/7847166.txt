#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxn=100000+10;

int n;
int p[maxn];
int d[maxn];
int f[maxn][20];

int getf(int key,int length)
{
	for (int i=0;two(i)<=length;i++) if (contain(length,i)) key=f[key][i];
	return key;
}
int get_lca(int a,int b)
{
	int o=d[a]+d[b];
	if (d[a]>d[b]) swap(a,b);
	b=getf(b,d[b]-d[a]);
	int H=-1,T=d[a];
	for (;H+1<T;)
	{
		int M=(H+T)/2;
		if (getf(a,M)==getf(b,M)) T=M;
		else H=M;
	}
	return getf(a,T);
}
int get_dist(int a,int b)
{
	return d[a]+d[b]-d[get_lca(a,b)]*2;
}
void process()
{
	scanf("%d",&n);
	for (int i=1;i<n;i++) { scanf("%d",&p[i]); p[i]--; }
	if (n<=1) return;
	d[0]=0;
	for (int i=1;i<n;i++) d[i]=d[p[i]]+1;
	for (int i=0;i<n;i++)
	{
		f[i][0]=p[i];
		for (int k=1;two(k)<=d[i];k++) f[i][k]=f[f[i][k-1]][k-1];
	}
	int p1=0;
	int p2=1;
	int length=1;
	printf("%d\n",1);
	for (int i=2;i<n;i++)
	{
		int l1=get_dist(i,p1);
		int l2=get_dist(i,p2);
		if (l1>=l2 && l1>length) length=l1,p2=i;
		else if (l2>=l1 && l2>length) length=l2,p1=i;
		printf("%d\n",length);
	}
}

int main()
{
#ifdef _MSC_VER
	freopen("input.txt","r",stdin);
#endif
	int testcase;
	for (scanf("%d",&testcase);testcase>0;testcase--) process();
	return 0;
}