#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<vector>
#include<set>
#include<map>
#include<cstring>
#include<string>
#include<cstdlib>
#include<ctime>
#include<cassert>

using namespace std;

#define FNAME ""
#define FILE 0

#define pb push_back
#define mp make_pair
#define LL long long
#define ULL unsigned long long
#define LD long double

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

int T, N, v, x, y, jump[25][100005], h[100005], m1, m2, d;

int lca (int v, int u)
{
	if (h[v] < h[u])
		swap(v, u);
	int s = h[v] - h[u];
	for (int i = 20; i >= 0; i--)
		if (s >= (1 << i))
		{
			v = jump[i][v];
			s -= (1 << i);
		}
	if (u == v)
		return v;
	for (int i = 20; i >= 0; i--)
		if (jump[i][v] != jump[i][u])
		{
			v = jump[i][v];
			u = jump[i][u];
		}
	return jump[0][u];
}

int main()
{
	#if (FILE == 1)
	freopen(FNAME".in", "r", stdin);
	freopen(FNAME".out", "w", stdout);
	#endif
	scanf("%d", &T);
	for (int g = 0; g < T; g++)
	{
		scanf("%d", &N);
		x = 1;
        y = 1;
		d = 0;
		for (int i = 0; i < 20; i++)
			jump[i][1] = 1;
		for (int l = 2; l <= N; l++)
		{
			scanf("%d", &v);
			h[l] = h[v] + 1;
			jump[0][l] = v;
			for (int i = 1; i < 20; i++)
				jump[i][l] = jump[i - 1][jump[i - 1][l]];
			m1 = h[l] + h[x] - 2 * h[lca(x, l)];
			m2 = h[l] + h[y] - 2 * h[lca(y, l)];
			if (m1 > d && m1 >= m2)
			{
				d = m1;
				y = l;
		   	}
			if (m2 > d && m2 > m1)
			{
				d = m2;
				x = l;
		   	}
		   	printf("%d\n", d);
		}

	}
	return 0;
}