#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;

#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define MAX_N 110000

int f[MAX_N][17], d[MAX_N];
int test, n, lc, p2[20];

inline void swap(int &x, int &y) { x ^= y, y ^= x, x ^= y; }

int LCA(int x, int y)
{
    if (d[x] < d[y]) swap(x, y);
    int t = d[x] - d[y];
    for(int i = 0; i <= lc && t > 0; i++) if (t & p2[i]) t ^= p2[i], x = f[x][i];
    if (x == y) return d[x];
    RP(i, lc, 0) if (f[x][i] != f[y][i]) x = f[x][i], y = f[y][i];
    return d[f[x][0]];
}

int dis(int x, int y) { return d[x] + d[y] - (LCA(x, y) << 1); }

int main(void)
{
    scanf("%d", &test), p2[0] = 1;
    REP1(i, 16) p2[i] = p2[i - 1] << 1;
    while (test-- > 0)
    {
          scanf("%d", &n), lc = (int) (log(n) / log(2)), d[1] = 0;
          REP1(i, n) fill(f[i], f[i] + lc + 1, 0);
          int s1 = 1, s2 = 2, ans = 0;
          REP(i, 2, n)
          {
              scanf("%d", &f[i][0]), d[i] = d[f[i][0]] + 1;
              for (int j = 1; f[i][j - 1]; j++) f[i][j] = f[f[i][j - 1]][j - 1];
              int l1 = dis(s1, i), l2 = dis(s2, i);
              if (l1 >= l2 && l1 > ans) ans = l1, s2 = i;
              else if (l1 <= l2 && l2 > ans) ans = l2, s1 = i;
              printf("%d\n", ans);
          }
    }
    return 0;
}
