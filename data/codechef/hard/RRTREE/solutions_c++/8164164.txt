#include <bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
const int N = 100005;
const int LN = 17;   
static int dp[LN][N];        
static int depth[N];        
int node1,node2;
int n;
int t;
int ans;
inline int LCA (int a , int b){
    if(depth[a] < depth[b]){
        swap(a,b);
    }
    int dif = depth[a] - depth[b];
    for(int i = 0 ; i < LN ; ++i ){
        if(dif&1){
            a = dp[i][a];
        }
        dif>>=1;
    }
    if(a != b){
        for(int i = LN - 1 ; i >= 0 ; --i ){
            if(dp[i][a] ^ dp[i][b]){
                a = dp[i][a];
                b = dp[i][b];
            }
        }
        a = dp[0][a];
    }
    return a;
}
inline int dist(int a , int b){
    return depth[a] + depth[b] - (depth[LCA(a,b)]<<1);
}
int main(){
    depth[1] = 0;
    t = scan();
    while(t--){
        node1    = 1;
        node2    = 1;
        ans      = 0;
        n        = scan();
        for(int i = 2 ; i <= n ; ++i ){
            dp[0][i] = scan();
            for(int j = 1 ; j < LN ; ++j ){
                dp[j][i] = dp[j-1][dp[j-1][i]];
            }
            depth[i] = depth[dp[0][i]] + 1;
            int d1 = dist(i,node1);
            int d2 = dist(i,node2);
            if(d1>ans){
                node2 = i;
                ans = d1;
            }
            if(d2>ans){
                node1 = i;
                ans = d2;
            }
            printf("%d\n",ans);
        }
    }
} 