#include<cstdio>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<queue>
#include<stack>
#include<sstream>
#include<bitset>
#define sz(x) (int)(x).size()
#define LL long long
#define pb push_back
#define ppb pop_back
#define bit __builtin_popcountll
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)1e5 + 10;
int p[maxn][20],dist[maxn];
bool upper(int a, int b) {
	if (dist[a] > dist[b]) return false;
	int len = dist[b] - dist[a];
	for (int i = 0; i < 20; i++) if (len & (1 << i)) {
		b = p[b][i];
	}
	return a == b;
}
int lca(int a, int b) {
	if (upper(a,b)) return a;
	if (upper(b,a)) return b;
	for (int i = 19; i >= 0; i--) {
		if (!upper(p[a][i],b)) {
			a = p[a][i];
		}
	}
	return p[a][0];
}
int main() {
	//freopen("input.txt","r",stdin);
	int T; cin >> T;
	while(T--) {
		int n; cin >> n;
		int v1 = 0;
		int v2 = 0;
		int len = 0;
		for (int i = 1; i < n; i++) {
			int e; scanf("%d",&e); --e;
			dist[i] = dist[e] + 1;
			p[i][0] = e;
			for (int j = 1; j < 20; j++) {
				p[i][j] = p[p[i][j - 1]][j - 1];
			}
			if (e == v1) {
				v1 = i;
				len++;
			} else if (e == v2) {
				v2 = i;
				len++;
			} else {
				int l1 = lca(v1,i);
				if (dist[v1] + dist[i] - 2 * dist[l1] > len) {
					len = dist[v1] + dist[i] - 2 * dist[l1];
					v2 = i;
				}
				int l2 = lca(v2,i);
				if (dist[v2] + dist[i] - 2 * dist[l2] > len) {
					len = dist[v2] + dist[i] - 2 * dist[l2];
					v1 = i;
				}
			}
			printf("%d\n",len);
		}
	}
	return 0;
}
