#include <cstdio>
#include <algorithm>

using namespace std;

typedef long long int LLD;
const int MAX_DIGITS=19;
unsigned int 
dp[MAX_DIGITS][MAX_DIGITS][MAX_DIGITS][2*(MAX_DIGITS)][3*(MAX_DIGITS)];
unsigned int 
sol[39][24][30][40][60];
const unsigned int MOD = 0xffffffff;

void pre_calculate()
{
    dp[0][0][0][0][0] = 1; // 1
    sol[0][0][0][0][0] = 0;
    // n 7 5 3 2
    dp[1][0][0][0][0] = 1; // 1
    dp[1][0][0][0][1] = 1; // 2
    dp[1][0][0][1][0] = 1; // 3
    dp[1][0][0][0][2] = 1; // 4
    dp[1][0][1][0][0] = 1; // 5
    dp[1][0][0][1][1] = 1; // 6
    dp[1][1][0][0][0] = 1; // 7
    dp[1][0][0][0][3] = 1; // 8
    dp[1][0][0][2][0] = 1; // 9

    for(int nd=2; nd<=MAX_DIGITS-1; nd++)
     for(int n7=0; n7<=nd; n7++)
      for(int n5=0; n5<=nd; n5++)
       for(int n3=0; n3<=2*(nd); n3++)
        for(int n2=0; n2<=3*(nd); n2++)
        {
         // 1
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5][n3][n2];
         // 2
         if (n2-1>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5][n3][n2-1];
         // 3
         if (n3-1>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5][n3-1][n2];
         // 4
         if (n2-2>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5][n3][n2-2];
         // 5
         if (n5-1>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5-1][n3][n2];
         // 6
         if (n2-1>=0 && n3-1>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5][n3-1][n2-1];
         // 7
         if (n7-1>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7-1][n5][n3][n2];
         // 8
         if (n2-3>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5][n3][n2-3];
         // 9
         if (n3-2>=0)
          dp[nd][n7][n5][n3][n2] += dp[nd-1][n7][n5][n3-2][n2];
         //dp[nd][n7][n5][n3][n2] &= MOD;
        }

    for(int l=2; l<=36; l++)
    {
     int nd = (l%2)? l/2+1 : l/2;
     int nn = l/2;
     for(int f7=0; f7<=nd; f7++)
      for(int f5=0; f5<=nd-f7; f5++)
       for(int f3=0; f3<=2*(nd-f7-f5); f3++)
        for(int f2=0; f2<=3*(nd-f7-f5); f2++)
        {
         unsigned long long s = 0;
               //printf("n7=%d n5=%d n3=%d n2=%d\n", f7, f5, f3, f2);
         for(int d7=0; f7+d7<=nd; d7++)
         {
                //printf("f7+d5=%d nd-(f7+d7)=%d\n", f7+0, nd-(f7+d7));
          for(int d5=0; f5+d5<=nd-(f7+d7); d5++)
          {
           for(int d3=0; f3+d3<=2*(nd-(f7+d7)-(f5+d5)); d3++)
            for(int d2=0; f2+d2<=3*(nd-(f7+d7)-(f5+d5)) ; d2++)
            {
                   //printf(" n7=%d n5=%d n3=%d n2=%d\n", f7+d7, f5+d5, f3+d3, f2+d2);
             s += dp[nd][f7+d7][f5+d5][f3+d3][f2+d2]
                 * dp[nn][d7][d5][d3][d2];
            }
          }
         }
          sol[l][f7][f5][f3][f2] = s;
               // printf("===========\n");
        }
    }


        /*
   for(int L=1; L<=18; L++)
   {
    for(int m2=0;m2<=L*3; m2++)
     for(int m3=0;m3<=2*L && (m2/3+m3/2)<=L ;m3++)
      for(int m5=0;m5<=L; m5++)
       for(int m7=0;m7<=L;m7++)
       {
        LLD cnt = dp[L][m7][m5][m3][m2];
        if(cnt==0) continue;
        for(int L2=L-1;L2<=L;L2++)
         for(int n2=0; n2<= m2; n2++)
          for(int n3=0; n3 <= m3; n3++)
           for(int n5=0; n5 <= m5; n5++)
            for(int n7=0; n7 <= m7;n7++)
             sol[L+L2][m7-n7][m5-n5][m3-n3][m2-n2] += 
                cnt*dp[L2][n7][n5][n3][n2];
       }
   }*/
   sol[1][0][0][0][0]=1;
   sol[1][0][0][0][1]=1;
   sol[1][0][0][1][0]=1;
   sol[1][0][0][0][2]=1;
   sol[1][0][1][0][0]=1;
   sol[1][0][0][1][1]=1;
   sol[1][1][0][0][0]=1;
   sol[1][0][0][0][3]=1;
   sol[1][0][0][2][0]=1;
}

inline bool factorize(unsigned long long v,
        int &f7, int &f5, int &f3, int &f2)
{
    f7 = f5 = f3 = f2 = 0;
    for(f7=0; v%7==0; f7++)
        v /= 7;

    for(f5=0; v%5==0; f5++)
        v /= 5;

    for(f3=0; v%3==0; f3++)
        v /= 3;

    for(f2=0; v%2==0; f2++)
        v /= 2;
    return v==1;
}

unsigned long long tens[] = {
    1LL, 10LL, 100LL, 1000LL, 10000LL, 100000LL, 1000000LL, 10000000LL,
    100000000LL, 1000000000LL, 1410065408LL, 1215752192LL, 3567587328LL,
    1316134912LL, 276447232LL, 2764472320LL, 1874919424LL, 1569325056LL,
    2808348672LL
};

unsigned long long nines[] = {
    1LL, 9LL, 81LL, 729LL, 6561LL, 59049LL, 531441LL, 4782969LL,
    43046721LL, 387420489LL, 3486784401LL, 1316288537LL, 3256662241LL,
    3540156393LL, 1796636465LL, 3284826297LL, 3793632897LL,
    4077925001LL, 2341586641LL,
};


inline unsigned long long solve(int L, unsigned long long V)
{
    if (L==1)
        return (1<=V && V<10)? 1 :0;

    int nd, nn;
    nd = nn = L/2;
    if (L%2)
        nd += 1;

    if (V == 0)
    {
        if (nd > 1)
        {
            unsigned long long r = (tens[nd-1]-nines[nd-1]+(MOD+1))&MOD;
            r = (9 *r)&MOD;
            r = (nines[nn]*r)&MOD;
            return r;
        }
        else
            return 0;
    }

    int f7, f5, f3, f2;
    if (!factorize(V, f7, f5, f3, f2))
        return 0;

    if (nn == 0)
        return 1;

        return sol[L][f7][f5][f3][f2];
}


int main()
{
   pre_calculate();
   long long  p9[37],p10[37],ans0[37];
   p9[0]=p10[0]=1;

   for(int n=1;n<=36;n++)
   {
          p9[n]=(9*p9[n-1])&MOD;
          p10[n]=(10*p10[n-1])&MOD;           // Handling case when V = 0;
          int n1=(n-1)/2;
          ans0[n] = (p10[n1]-p9[n1])*p9[n-n1];
          ans0[n]&MOD;
   }

    int T;
    scanf("%d", &T);
    for(; T>0; T--)
    {
        int L; unsigned long long V;
        scanf("%d %lld", &L, &V);
        if (V==0)
        {
                long long temp = ans0[L];
                temp &= MOD;
                if (temp < 0) temp += MOD;
                printf("%lld\n", temp);
        }
        else
        {
                int f7, f5, f3, f2;
                if(!factorize(V, f7, f5, f3, f2))
                    printf("0\n");
                else
                    printf("%u\n", sol[L][f7][f5][f3][f2]);
        }
    }
    return 0;
}
