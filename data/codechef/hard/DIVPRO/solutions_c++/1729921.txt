#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

const int maxl = 36;
const int two = 54;
const int three = 36;
const int five = 18;
const int seven = 18;

unsigned dp[2][1+two<<1][1+three<<1][1+five<<1][1+seven<<1];

int main()
{
    vector< pair< long long, unsigned > > ans[maxl+1];

    long long pw2[two+1] = {1};
    for ( int i = 1; i <= two; i++ ) pw2[i] = 2*pw2[i-1];

    long long pw3[three+1] = {1};
    for ( int i = 1; i <= three; i++ ) pw3[i] = 3*pw3[i-1];

    long long pw5[five+1] = {1};
    for ( int i = 1; i <= five; i++ ) pw5[i] = 5*pw5[i-1];

    long long pw7[seven+1] = {1};
    for ( int i = 1; i <= seven; i++ ) pw7[i] = 7*pw7[i-1];

    unsigned pw9[maxl+1] = {1};
    unsigned pw10[maxl+1] = {1};
    for ( int i = 1; i <= maxl; i++ ) pw9[i] = 9*pw9[i-1], pw10[i] = 10*pw10[i-1];

    dp[0][two][three][five][seven] = 1;

    for ( int l = 1; l <= maxl; l++ ) {
        int state = (l&1);

        memset( dp[state], 0, sizeof dp[state] );

        int l1 = (l>>1);
        int l2 = (l-1)-l1;
        for ( int n2 = -3*l2; n2 <= 3*l1; n2++ ) {
            for ( int n3 = -2*l2; n3 <= 2*l1; n3++ ) {
                for ( int n5 = -l2; n5 <= l1; n5++ ) {
                    for ( int n7 = -l2; n7 <= l1; n7++ ) {
                        unsigned val = dp[1-state][two+n2][three+n3][five+n5][seven+n7];
                        if ( val > 0 ) {
                            dp[state][two+0-n2][three+0-n3][five+0-n5][seven+0-n7] += val;
                            dp[state][two+1-n2][three+0-n3][five+0-n5][seven+0-n7] += val;
                            dp[state][two+0-n2][three+1-n3][five+0-n5][seven+0-n7] += val;
                            dp[state][two+2-n2][three+0-n3][five+0-n5][seven+0-n7] += val;
                            dp[state][two+0-n2][three+0-n3][five+1-n5][seven+0-n7] += val;
                            dp[state][two+1-n2][three+1-n3][five+0-n5][seven+0-n7] += val;
                            dp[state][two+0-n2][three+0-n3][five+0-n5][seven+1-n7] += val;
                            dp[state][two+3-n2][three+0-n3][five+0-n5][seven+0-n7] += val;
                            dp[state][two+0-n2][three+2-n3][five+0-n5][seven+0-n7] += val;
                        }
                    }
                }
            }
        }

        l1 += (l&1);
        for ( int n2 = 0; n2 <= 3*l1; n2++ ) {
            for ( int n3 = 0; n3 <= 2*l1; n3++ ) {
                for ( int n5 = 0; n5 <= l1; n5++ ) {
                    for ( int n7 = 0; n7 <= l1; n7++ ) {
                        unsigned val = dp[state][two+n2][three+n3][five+n5][seven+n7];
                        if ( val > 0 ) {
                            long long v = pw2[n2] * pw3[n3] * pw5[n5] * pw7[n7];
                            ans[l].push_back( make_pair( v, val ) );
                        }
                    }
                }
            }
        }
    }

    for ( int i = 1; i <= maxl; i++ ) {
        sort( ans[i].begin(), ans[i].end() );
    }

    int testcases;
    scanf( "%d", &testcases );

    for ( int t = 1; t <= testcases; t++ ) {
        int l;
        long long v;

        scanf( "%d%lld", &l, &v );

        unsigned res = 0;
        if ( v == 0 ) {
            int x = (l-1)>>1;

            res = pw9[l-x] * (pw10[x]-pw9[x]);
        }
        else {
            int low = 0;
            int high = ans[l].size() - 1;
            int pos = -1;
            while ( low <= high ) {
                int mid = (low + high) >> 1;
                long long val = ans[l][mid].first;

                if ( val == v ) {
                    pos = mid;
                    break;
                }

                if ( val > v ) high = mid - 1;
                else           low  = mid + 1;
            }

            if ( pos != -1 ) {
                res = ans[l][pos].second;
            }
        }

        printf( "%u\n", res );

    }

    return 0;
}
