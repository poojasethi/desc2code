//#undef _GLIBCXX_DEBUG

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <valarray>
#include <vector>

using namespace std;

#define foreach(iter,cont) for(typeof((cont).begin()) iter = (cont).begin(); iter != (cont).end(); ++iter)
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define inf 1000000008
#define eps 1.0e-10L
#define divisible(a, b) (((a) / (b)) * (b) == (a))
static const long long p = 1000000007;
__attribute__((unused)) static bool eq(long double a, long double b)  { return (a == b ? true : (a * b == 0 ? abs(a - b) < eps : abs(a - b) / (abs(a) + abs(b)) < eps));  }
__attribute__((unused)) static long long modp(long long n, long long m) { long long r = n % m; return r >= 0 ? r : r + m; }
__attribute__((unused)) static long long gcd(long long a, long long b) { return (a < 0 ? gcd(-a, b) : (b < 0 ? gcd(a, -b) : (!a && !b ? 1 : (b ? gcd(b, a % b) : a)))); }
template<class T> static int len(const T& cont) { return (int) cont.size(); }

// BEGIN CUT HERE
template<class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) { return os << "(" << p.first << ", " << p.second << ")"; }
template<class T> ostream &operator<<(ostream& os, const vector<T> &vec) { os << "[ "; for(size_t i = 0; i < vec.size(); i++) { os << vec[i]; if(i != vec.size() - 1) { os << ", "; } } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const list<T> &l) { os << "[ "; bool first = true; for(typename list<T>::const_iterator lstIt = l.begin(); lstIt != l.end(); ++lstIt) { if(!first) { os << ", "; } first = false; os << *lstIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const deque<T> &d) { os << "[ "; bool first = true; for(typename deque<T>::const_iterator dIt = d.begin(); dIt != d.end(); ++dIt) { if(!first) { os << ", "; } first = false; os << *dIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const vector<vector<T> > &mat) { for(size_t i = 0; i < mat.size(); i++) { if(i) os << endl; os << mat[i]; } return os; }
template<class T> ostream &operator<<(ostream &os, const set<T> &s) { os << "{ "; bool first = true; for(typename set<T>::const_iterator setIt = s.begin(); setIt != s.end(); ++setIt) { if(!first) { os << ", "; } first = false; os << *setIt; } return os << " }"; }
template<class T, class U> ostream &operator<<(ostream &os, const map<T, U> &m) { os << "{ "; bool first = true; for(typename map<T, U>::const_iterator mapIt = m.begin(); mapIt != m.end(); ++mapIt) { if(!first) { os << ", "; } first = false; os << mapIt->first << " = " << mapIt->second; } return os << " }"; }
// END CUT HERE

unsigned int powNine[55];
long long powTwo[55], powThree[55], powFive[55], powSeven[55];
unsigned int cnt[2][109][73][37][37];
long long vals[37][36100];
unsigned int cnts[37][36100];
int numCnts[37];

unsigned int bincoeff(int n, int k) {
	static vector<vector<long long> > cache;
	
	if(k == 0) return 1;
	if(n == 0) return 0;
	if(n == k) return 1;
	if(n < k) return 0;
	
	if(n < len(cache) && k < len(cache[n]) && 
	   cache[n][k] != numeric_limits<long long>::max()) {
		return cache[n][k];
	}

	unsigned int val = bincoeff(n - 1, k - 1) + bincoeff(n - 1, k);
	
	if(n >= len(cache)) cache.resize(n + 1, vector<long long>());
	if(k >= len(cache[n])) cache[n].resize(k + 1, numeric_limits<long long>::max());
	
	cache[n][k] = val;
	return val;
}

int main(__attribute__((unused)) int argc, __attribute__((unused)) char **argv) {
	powTwo[0] = 1;
	powThree[0] = 1;
	powFive[0] = 1;
	powSeven[0] = 1;
	powNine[0] = 1;
	for(int i = 1; i <= 54; i++) {
		powTwo[i] = 2ll * powTwo[i - 1];
		powThree[i] = 3ll * powThree[i - 1];
		powFive[i] = 5ll * powFive[i - 1];
		powSeven[i] = 7ll * powSeven[i - 1];
		powNine[i] = (unsigned int) 9 * powNine[i - 1];
	}

	memset(cnt[0], 0, 109 * 73 * 37 * 37 * sizeof(unsigned int));

	cnt[0][54][36][18][18] = 1;

	int digitFactors[][4] = { { 0, 0, 0, 0 }, // 0
	                          { 0, 0, 0, 0 }, // 1
	                          { 1, 0, 0, 0 }, // 2
	                          { 0, 1, 0, 0 }, // 3
	                          { 2, 0, 0, 0 }, // 4
	                          { 0, 0, 1, 0 }, // 5
	                          { 1, 1, 0, 0 }, // 6
	                          { 0, 0, 0, 1 }, // 7
	                          { 3, 0, 0, 0 }, // 8
	                          { 0, 2, 0, 0 } }; // 9

	for(int len = 1; len <= 36; len++) {
		int cur = len & 1;
		int prev = 1 - cur;
		int sign = len & 1 ? 1 : -1;

		int prevNumerLen = (len - 1) / 2 + ((len - 1) & 1);
		int prevDenomLen = (len - 1) / 2;

		memset(cnt[cur], 0, 109 * 73 * 37 * 37 * sizeof(unsigned int));


		vector<pair<long long, pair<int, unsigned int> > > curCnt;

		int order = 0;
		for(int i = -3 * prevDenomLen; i <= 3 * prevNumerLen; i++) {
			for(int j = -2 * prevDenomLen; j <= 2 * prevNumerLen; j++) {
				for(int k = -prevDenomLen; k <= prevNumerLen; k++) {
					for(int l = -prevDenomLen; l <= prevNumerLen; l++) {
						if(cnt[prev][i + 54][j + 36][k + 18][l + 18] != 0) { 
							for(int digit = 1; digit <= 9; digit++) {
								int numTwos = i + sign * digitFactors[digit][0];
								int numThrees = j + sign * digitFactors[digit][1];
								int numFives = k + sign * digitFactors[digit][2];
								int numSevens = l + sign * digitFactors[digit][3];

								cnt[cur][numTwos + 54][numThrees + 36][numFives + 18][numSevens + 18] +=
									cnt[prev][i + 54][j + 36][k + 18][l + 18];

								if(numTwos >= 0 && numThrees >= 0 && numFives >= 0 && numSevens >= 0) {
									long long val = powTwo[numTwos] * powThree[numThrees] * powFive[numFives] * powSeven[numSevens];
									curCnt.push_back(make_pair(val, make_pair(order++, cnt[cur][numTwos + 54][numThrees + 36][numFives + 18][numSevens + 18])));
								}
							}
						}
					}
				}
			}
		}

		sort(curCnt.begin(), curCnt.end());

		numCnts[len] = 0;
		for(int i = 0; i < (int) curCnt.size(); i++) {
			if(i == (int) curCnt.size() - 1 || curCnt[i].first != curCnt[i + 1].first) {
				vals[len][numCnts[len]] = curCnt[i].first;
				cnts[len][numCnts[len]] = curCnt[i].second.second;
				/*
				if(len == 36) {
					cout << vals[len][numCnts[len]] << ": " << cnts[len][numCnts[len]] << endl;
				}
				*/
				numCnts[len]++;

			}
		}
	}

	int numTc;
	scanf("%d", &numTc);
	for(int tcNum = 1; tcNum <= numTc; tcNum++) {
		int l;
		long long v;
		scanf("%d %lld", &l, &v);
		unsigned int total = 0;

		if(v) {
			long long *it = lower_bound(vals[l], vals[l] + numCnts[l], v);
			if(it - vals[l] < numCnts[l] && *it == v) {
				total = cnts[l][it - vals[l]];
			} else {
				total = 0;
			}
		} else {
			int numerLen = l / 2 + (l & 1);
			int denomLen = l / 2;
			// Denominator can be any non-zero, any numerator but first can be zero
			for(int numZeroes = 1; numZeroes <= numerLen - 1; numZeroes++) {
				total += bincoeff(numerLen - 1, numZeroes) * 
					powNine[numerLen - numZeroes] *
					powNine[denomLen];
			}
		}

		printf("%u\n", total);
	}

	return 0;
}
