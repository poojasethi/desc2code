//nathanajah's template
//28-11-2012
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <set>
#include <deque>
#include <map>
#include <ctime>
#define ii pair<int,int>
#define vi vector<int>
#define vii vector<ii>
#define fi first
#define se second
#define pb push_back
#define LL long long
#define ULL unsigned long long
#define INF 0x3FFFFFFF
#define INFLL 0x3FFFFFFFFFFFFFFF
#ifdef DEBUG
	#define debug(...) \
	fprintf(stderr,__VA_ARGS__)
#else
	#define debug(...) 
#endif
using namespace std;

ULL dp[110][75][19][19];
bool sudah[110][75][19][19];
ULL MOD=1LL<<32LL;
ULL comb[40][40];
ULL l,v;
ULL	precomev[40][40][19][19];
ULL precomod[40][40][19][19];
int t;
int i,j;
int posi,nega;
int dua,tiga,lima,tujuh;
ULL hasil;
ULL hasiltmp;
ULL dpnol[40][2];
bool sudahnol[40][2];

ULL hitung(int dua, int tiga, int posit, int nega)
{
	if (dua<0 || tiga<0 || posit<0 || nega<0 || dua>=110 || tiga>=75 || posit>=19 || nega>=19)
		return 0;
	ULL &ret=dp[dua][tiga][posit][nega];
	if (sudah[dua][tiga][posit][nega])
		return ret;
	sudah[dua][tiga][posit][nega]=true;
	if (posit==0 && nega==0)
	{
		if (dua==54 && tiga==36)
			ret=1;
		else
			ret=0;
	}
	else if (nega==0)
	{
		ret=0;
		//1:
		ret=(ret+hitung(dua,tiga,posit-1,nega))%MOD;
		//2:
		ret=(ret+hitung(dua-1,tiga,posit-1,nega))%MOD;
		//3:
		ret=(ret+hitung(dua,tiga-1,posit-1,nega))%MOD;
		//4:
		ret=(ret+hitung(dua-2,tiga,posit-1,nega))%MOD;
		//6:
		ret=(ret+hitung(dua-1,tiga-1,posit-1,nega))%MOD;
		//8:
		ret=(ret+hitung(dua-3,tiga,posit-1,nega))%MOD;
		//9:
		ret=(ret+hitung(dua,tiga-2,posit-1,nega))%MOD;
	}
	else
	{
		ret=0;
		//1:
		ret=(ret+hitung(dua,tiga,posit,nega-1))%MOD;
		//2:
		ret=(ret+hitung(dua+1,tiga,posit,nega-1))%MOD;
		//3:
		ret=(ret+hitung(dua,tiga+1,posit,nega-1))%MOD;
		//4:
		ret=(ret+hitung(dua+2,tiga,posit,nega-1))%MOD;
		//6:
		ret=(ret+hitung(dua+1,tiga+1,posit,nega-1))%MOD;
		//8:
		ret=(ret+hitung(dua+3,tiga,posit,nega-1))%MOD;
		//9:
		ret=(ret+hitung(dua,tiga+2,posit,nega-1))%MOD;
	}
//	printf("%d %d %d %d %I64d\n",dua,tiga,posit,nega,ret);
	return ret;
}

ULL hitungnol(int n, int tip)
{
	ULL &ret=dpnol[n][tip];
	if (sudahnol[n][tip])
		return ret;
	if (n==1)
	{
		if (tip==1)
			ret= 9;
		else
			ret= 0;
	}
	else if (n%2==0)
	{
		if (tip==0)
			ret=(hitungnol(n-1,0)*9)%MOD;
		else
			ret=(hitungnol(n-1,1)*9)%MOD;
	}
	else
	{
		if (tip==0)
			ret=(hitungnol(n-1,0)*10 + hitungnol(n-1,1))%MOD;
		else
			ret=(hitungnol(n-1,1)*9)%MOD;
	}
	return ret;
}
int main()
{
	//precompute combination
	comb[0][0]=1;
	for (i=1;i<40;++i)
	{
		comb[i][0]=1;
		comb[i][i]=1;
		for (j=1;j<i;++j)
			comb[i][j]=(comb[i-1][j-1]+comb[i-1][j])%MOD;
	}
	for (posi=0;posi<=18;++posi)
	{
		nega=posi;
		//even
		for (lima=0;lima<=posi;++lima)
		{
			for (tujuh=0;lima+tujuh<=posi;++tujuh)
			{
				for (i=lima;i+tujuh<=posi && i-lima<=nega;++i)
				{
					for (j=tujuh;i+j<=posi && i-lima+j-tujuh<=nega;++j)
					{
						hasiltmp=(comb[posi][i]*comb[posi-i][j])%MOD;
						hasiltmp=(hasiltmp*((comb[nega][i-lima]*comb[nega-i+lima][j-tujuh])%MOD))%MOD;
						precomev[posi][lima][tujuh][i+j]=(precomev[posi][lima][tujuh][i+j]+hasiltmp)%MOD;
					}
				}
			}
		}
		//odd
		nega=posi-1;
		for (lima=0;lima<=posi;++lima)
		{
			for (tujuh=0;lima+tujuh<=posi;++tujuh)
			{
				for (i=lima;i+tujuh<=posi && i-lima<=nega;++i)
				{
					for (j=tujuh;i+j<=posi && i-lima+j-tujuh<=nega;++j)
					{
						hasiltmp=(comb[posi][i]*comb[posi-i][j])%MOD;
						hasiltmp=(hasiltmp*((comb[nega][i-lima]*comb[nega-i+lima][j-tujuh])%MOD))%MOD;
						precomod[posi][lima][tujuh][i+j]=(precomod[posi][lima][tujuh][i+j]+hasiltmp)%MOD;
					}
				}
			}
		}
	}
	scanf("%d",&t);
	while (t--)
	{
		hasil=0;
		scanf("%llu %llu",&l,&v);
		if (v==0)
		{
			printf("%llu\n",hitungnol(l,0));
			continue;
		}
		posi=(l+1)/2;
		nega=l/2;
		dua=0;tiga=0;lima=0;tujuh=0;
		while (v%2==0)
		{
			v/=2;
			++dua;
		}
		while (v%3==0)
		{
			v/=3;
			++tiga;
		}
		while (v%5==0)
		{
			v/=5;
			++lima;
		}
		while (v%7==0)
		{
			v/=7;
			++tujuh;
		}
		if (v!=1)
		{
			printf("0\n");
			continue;
		}
//		printf("%d %d %d %d\n",dua,tiga,lima,tujuh);
		for (i=lima+tujuh;i<=posi && i-lima-tujuh<=nega;++i)
		{
			if (posi!=nega)
				hasiltmp=(precomod[posi][lima][tujuh][i]*hitung(dua+54,tiga+36,posi-i,nega+lima+tujuh-i))%MOD;
			else
				hasiltmp=(precomev[posi][lima][tujuh][i]*hitung(dua+54,tiga+36,posi-i,nega+lima+tujuh-i))%MOD;
			hasil=(hasil+hasiltmp)%MOD;
		}
/*		for (i=lima;i+tujuh<=posi && i-lima<=nega;++i)
		{
			for (j=tujuh;i+j<=posi && i-lima+j-tujuh<=nega;++j)
			{
				printf("%d %d\n",i,j);
				hasiltmp=(comb[posi][i]*comb[posi-i][j])%MOD;
				hasiltmp=(hasiltmp*((comb[nega][i-lima]*comb[nega-i+lima][j-tujuh])%MOD))%MOD;
				hasiltmp=(hasiltmp*hitung(dua+54,tiga+36,posi-i-j,nega-i+lima-j+tujuh))%MOD;
//				printf("%d %d %llu\n",i,j,hasiltmp);
//				printf("QUERYNYA: %d %d %d %d\n",dua+54,tiga+36,posi-i-j,nega-i+lima-j+tujuh);
				hasil=(hasil+hasiltmp)%MOD;
			}
		}*/
		printf("%llu\n",hasil);
	}
}