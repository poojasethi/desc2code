//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

string a, b;
long long val = 100001;
long long pw[100005];

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> a;
    int k;
    cin >> k;
    pw[0] = 1;
    for (int i = 1; i < 100005; ++i) {
        pw[i] = pw[i - 1] * val % mod;
    }
    for (int i = 0; i < k; ++i) {
        cin >> b;
        long long ones = 0, zeroes = 0;
        int diff = a.size() - b.size();
        for (int j = 0; j <= diff; ++j) {
            if (a[j] == '1') {
                ones = (ones + pw[diff - j]) % mod;
            } else {
                zeroes = (zeroes + pw[diff - j]) % mod;
            }
        }
        long long res = 0;
        int last = diff + 1;
        for (int j = 0; j < b.size(); ++j) {
            if (b[j] == '1') {
                res = (res + zeroes) % mod;
            } else {
                res = (res + ones) % mod;
            }
            if (a[j] == '0') {
                zeroes = (zeroes + mod - pw[diff]) % mod;
            } else {
                ones = (ones + mod - pw[diff]) % mod;
            }
            zeroes = (zeroes * val) % mod;
            ones = (ones * val) % mod;
            if (last < a.size() && a[last] == '0') {
                zeroes = (zeroes + 1) % mod;
            } else {
                ones = (ones + 1) % mod;
            }
            ++last;
        }
        printf("%d\n", res);
    }
    return 0;
}
