#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <deque>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <string>
#include <stack>
#include <sstream>
#include <vector>
#include <numeric>

#define FOR(i, a, b) for(int i = a; i <= b; ++i)
#define FRD(i, a, b) for(int i = a; i >= b; --i)
#define FR(i, a) for(int i = 0; i < a; ++i)
#define REP(i, a) for(int i = 0; i <= a; ++i)
#define pb push_back
#define sz(x) (int)x.size()
#define reset(a, b) memset(a, b, sizeof a)
#define bug(x) cout << #x << " = " << x << endl
#define bg(a, m, n) FOR(i, m, n) cout << a[i] << " "; cout << endl
using namespace std;

typedef long long ll;
typedef unsigned long long qword;

const int maxN = 4e5 + 5;

int n, L;
char a[maxN], b[maxN], ch[maxN];
int SA[maxN], RA[maxN], tempSA[maxN], tempRA[maxN];
int lc[maxN], c[maxN], cnt1[maxN], cnt2[maxN], l[maxN], r[maxN];
vector <int> p[maxN];
ll res[maxN];

inline void Sort(int k) {
    int i, sum, maxi = max(300, n);
    reset(c, 0);
    for(i = 0; i < n; ++i)
        ++c[i + k < n ? RA[i + k] : 0];
    for(i = sum = 0; i < maxi; ++i) {
        int tmp = c[i]; c[i] = sum; sum += tmp;
    }
    for(i = 0; i < n; ++i)
        tempSA[c[SA[i] + k < n ? RA[SA[i] + k] : 0]++] = SA[i];
    for(i = 0; i < n; ++i)
        SA[i] = tempSA[i];
}

void Build() {
    int i, k, r;
    //reset(SA, 0); reset(RA, 0); reset(tempSA, 0); reset(tempRA, 0);
    for(i = 0; i < n; ++i) SA[i] = i;
    for(i = 0; i < n; ++i) RA[i] = ch[i];
    for(k = 1; k < n; k <<= 1) {
        Sort(k); Sort(0);
        tempRA[SA[0]] = r = 0;
        for(i = 1; i < n; ++i)
            tempRA[SA[i]] = (RA[SA[i]] == RA[SA[i-1]] && RA[SA[i] + k] == RA[SA[i-1] + k] ? r : ++r);
        for(i = 0; i < n; ++i)
            RA[i] = tempRA[i];
        if (RA[SA[n-1]] == n - 1) break;
    }

    reset(lc, 0);
    int q = 0;
    for(i = 0; i < n - 1; ++i) {
        int j = SA[RA[i] - 1];
        while (ch[i + q] == ch[j + q]) ++q;
        lc[RA[i]] = q;
        q = max(0, q - 1);
    }
}

int main() {
    int nTests = 0;
    scanf("%d\n", &nTests);
    while (nTests--) {
        gets(a); gets(b); scanf("%d\n", &L);
        int m = (int)strlen(a);
        strcpy(ch, a); strcat(ch, "$"); strcat(ch, b); strcat(ch, "#");
        n = (int)strlen(ch);
        Build();
        FOR(i, 0, n) p[i].clear();
        FOR(i, 1, n)
            if (lc[i]) p[lc[i]].pb(i);
        FOR(i, 1, n) {
            cnt1[i] = (SA[i] < m);
            cnt2[i] = (SA[i] > m);
            l[i] = i - 1; r[i] = i + 1;
        }
        ll sum = 0;
        FRD(i, n, 1) {
            FR(j, sz(p[i])) {
                int u = p[i][j];
                sum += (ll)cnt1[l[u]] * cnt2[u] + (ll)cnt2[l[u]] * cnt1[u];
                cnt1[l[u]] += cnt1[u]; cnt2[l[u]] += cnt2[u];
                l[r[u]] = l[u]; r[l[u]] = r[u];
            }
            res[i] = sum;
        }
        FOR(i, 1, L)
            printf("%lld ", res[i]);
        printf("\n");
    }
    return 0;
}

