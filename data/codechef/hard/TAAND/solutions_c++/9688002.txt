#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#define MAX 64
#define MAXA 400000
#define ll long long int

using namespace std;
vector < int > A[MAX];

// pas the number and the position
void accumulate(ll a,int i){
	int pos = 0;
	while(a != 0){
		if(a&1) A[pos].push_back(i);
		a >>= 1;
		pos++;
	}
}

vector < int > intersect(vector < int > &a, vector < int > &b){
	int i = 0;
	int j = 0;
	vector < int > res;
	while(i < a.size() && j < b.size()){
		if(a[i] == b[j]){
			res.push_back(a[i]);
			i++;
			j++;
		}
		else if(a[i] > b[j]) j++;
		else i++;
	}
	
	return res;
}

vector < int > maximum(){
	vector < int > res;
	int pos = MAX;
	for(int i = MAX - 1;i >= 0;i--){
		if(A[i].size() >= 2){
			res = A[i];
			pos = i - 1;
			break;
		}
	}
	
	if(res.size() == 2) return res;
	
	while(pos != 0 && res.size() != 0){
		if(A[pos].size() >= 2){
			vector < int > aux = intersect(res,A[pos]);
			if(aux.size() >= 2){
				res = aux;
			}
		}
		pos--;
	}
	
	return res;
	
}

int E[MAXA];

int main(){
	int n; ll a;
	scanf("%d",&n);
	for(int i = 0;i < MAX;i++) A[i] = vector < int > ();
	
	for(int  i = 0;i < n;i++){
		scanf("%lld",&a);
		E[i] = a;
		accumulate(a,i);
	}
	
	vector < int > res = maximum();
	
	printf("%d\n",E[res[0]]&E[res[1]]);
	
	return 0;
}
