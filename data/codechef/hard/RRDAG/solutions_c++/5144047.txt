#include <cstdio>
#include <cstring>
#include <vector>
#include <bitset>
#include <algorithm>
using namespace std;
typedef long long ll;
const int MOD = (int)1e9+7;
const int N = 1500+5;
bitset<1500>    father[N];

struct Edge {
    int v, next;
}edge[N*N];

int head[N], E, n;
bool vis[N];
char s[N][N];

void newedge(int u, int v) {
    edge[E].v = v;edge[E].next = head[u];
    head[u] = E++;
}

void init() {
    memset(head, -1, sizeof(head));
}

void dfs(int u) {
    vis[u] = 1;
    father[u].reset();
    father[u].set(u);
    for(int i = head[u];i != -1;i = edge[i].next) {
        int v = edge[i].v;
        if(!vis[v]) {
            dfs(v);
        }
        father[u] |= father[v];
    }
}

int main() {
    while(scanf("%d", &n) == 1) {
        for(int i = 0;i < n; i++)
            scanf("%s", s[i]);
        for(int i = 0;i < n; i++)   father[i].reset();
        int sum = 0;
        init();
        for(int i = 0;i < n; i++) {
            for(int j = 0;j < n; j++) if(s[i][j] == '1') {
                newedge(j, i);
                sum++;
            }
        }
        memset(vis, 0, sizeof(vis));
        for(int i = 0;i < n; i++) if(!vis[i]) {
            dfs(i);
        }
        printf("%d\n", n*(n-1)/2 - sum);
        for(int i = 0;i < n; i++) {
            for(int j = 0;j < n; j++) if(father[i].test(j))
                father[i] |= father[j];
            memset(vis, 0, sizeof(vis));
            for(int j = 0;j < n; j++) if(father[i].test(j))
                vis[j] = 1;
            for(int j = 0;j < n; j++) if(!vis[j] && (s[i][j] == '0')) {
                father[j].set(i);
                printf("%d %d\n", i+1, j+1);
            }
        }
    }
    return 0;
}

