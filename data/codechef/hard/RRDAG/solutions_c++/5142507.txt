#include <stdio.h>
#include <string.h>
#include <bitset>
#include <algorithm>
#include <vector>

const int N = 1500 + 5;
int n,deg[N];
bool G[N][N];
int que[N];
std::bitset<1500> ancestors[N];

int main() {
	scanf("%d",&n);
	for (int i = 0; i < n; ++ i) {
		char str[N];
		scanf("%s",str);
		for (int j = 0; j < n; ++ j) {
			if (str[j] == '1') {
				G[i][j] = true;
				deg[j] ++;
			}
		}
	}
	int qf = 0,qe = 0;
	for (int i = 0; i < n; ++ i) {
		if (deg[i] == 0) 
			que[qe++] = i;
	}
	while (qf != qe) {
		int u = que[qf++];
		for (int i = 0; i < n; ++ i) {
			if (G[u][i] && --deg[i] == 0) {
				que[qe++] = i;
			}
		}
	}
	for (int i = 0; i < n; ++ i) {
		int u = que[i];
		ancestors[u].set(u);
		for (int j = 0; j < n; ++ j) {
			if (G[u][j] == true) {
				ancestors[j] |= ancestors[u];
			}
		}
	}
	std::vector<std::pair<int,int> > answer;
	for (int i = 0; i < n; ++ i) {
		for (int j = 0; j < i; ++ j) {
			if (ancestors[i].test(j))
				ancestors[i] |= ancestors[j];
		}
		for (int j = 0; j < n; ++ j) {
			if (ancestors[i].test(j)==false && G[i][j]==false) {
				answer.push_back(std::make_pair(i,j));
				ancestors[j].set(i);
			} 
		}
	}
	std::sort(answer.begin(),answer.end());
	printf("%d\n",(int)answer.size());
	for (int i = 0; i < (int)answer.size(); ++ i) {
		printf("%d %d\n",answer[i].first+1,answer[i].second+1);
	}
	return 0;
}

