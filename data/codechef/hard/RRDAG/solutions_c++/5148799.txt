#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;
typedef pair<int, int> PII;
const int MAXN = 1505;
vector<PII> out;
int tot = 0;
char mp[MAXN][MAXN];
int cnt[MAXN] = {0};
int n;
int ord[MAXN];
vector<int> G[MAXN];

int main() {
    while (scanf("%d", &n) == 1) {
    memset(cnt, 0, sizeof(cnt));
    for (int i = 1; i <= n; i++) G[i].clear();
    for (int i = 1; i <= n; i++) {
        scanf("%s", mp[i] + 1);
        for (int j = 1; j <= n; j++) {
            if (mp[i][j] == '1') {
                G[j].push_back(i); cnt[i] ++;
            }
        }
    }
    priority_queue<int> Q;
    for (int i = 1; i <= n; i++) {
        if (cnt[i] == 0) Q.push(i);
    }
    tot = 0;
    while (!Q.empty()) {
        int u = Q.top(); Q.pop();
        ord[++ tot] = u;
        for (int i = 0; i < G[u].size(); i++) {
            int v = G[u][i];
            if (-- cnt[v] == 0) {
                Q.push(v);
            }
        }
    }
    for (int i = 1; i <= n / 2; i++) swap(ord[i], ord[n - i + 1]);
    //for (int i = 1; i <= n; i++) printf("%d ", ord[i]); puts("");
    out.clear();
    for (int i = 1; i <= n; i++) {
        int u = ord[i];
        for (int j = i + 1; j <= n; j++) {
            int v = ord[j];
            if (mp[u][v] == '0') {
                out.push_back(make_pair(u, v));
            }
        }
    }
    sort(out.begin(), out.end());
    printf("%d\n", (int)out.size());
    for (int i = 0; i < out.size(); i++) printf("%d %d\n", out[i].first, out[i].second);
    }
    return 0;
}

