#include<iostream>
#include<cstdio>
#include<set>
#include<algorithm>
#include<utility>
#include<vector>
using namespace std;
char graph[1506][1506];
int out[1506]={0};
vector<int> indegre_adj[1506];
vector< pair <int,int> > edge;
set<int> zero_out;
set<int>::iterator it,it2;
set<int> rem_vertex;
int n,v;
int main()
{
    cin>>n;
    for(int i=0;i<n;i++)
    cin>>graph[i];
    for(int i=0;i<n;i++)
    {
            rem_vertex.insert(i);
    for(int j=0;j<n;j++)
    {
       if(i==j)
         continue;
       if(graph[i][j]=='1')
         {
                           out[i]++;
                           indegre_adj[j].push_back(i);
         }
    }
    }
    /*for(int i=0;i<n;i++)
      cout<<out[i]<<endl;
    for(int j=0;j<n;j++,printf("\n"))
    for(int i=0;i<indegre_adj[j].size();i++)
     cout<<indegre_adj[j][i]<<" ";*/
      int x;
     //cin>>x; 
    for(int i=0;i<n;i++)
    if(out[i]==0)
      zero_out.insert(i);
   
    while(zero_out.size())
    {
      
         it=zero_out.end();
         --it;
         v=*it;
         rem_vertex.erase(v);
         zero_out.erase(v);
         
          
            
             //cin>>x;
         for(it2=rem_vertex.begin();it2!=rem_vertex.end();++it2)
           {
              if(graph[*it2][v]=='0')
                edge.push_back(make_pair(*it2,v));
           }
         
         
           for(int i=0;i<indegre_adj[v].size();i++)
           {
                   out[indegre_adj[v][i]]--;
                   if(out[indegre_adj[v][i]]==0)
                     zero_out.insert(indegre_adj[v][i]);
           }
                             
                          //   cin>>x;   
    }
     
    sort(edge.begin(),edge.end());
    printf("%d\n",edge.size());
    for(int i=0;i<edge.size();i++)
    printf("%d %d\n",edge[i].first+1,edge[i].second+1);   
    
   //   cin>>x;
      
    return 0;
}
