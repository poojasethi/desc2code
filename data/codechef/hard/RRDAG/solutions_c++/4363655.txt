#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:128777216")

#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <functional>
#include <numeric>
#include <sstream>
#include <exception>
#include <cassert>

typedef long long i64;
typedef unsigned int u32;
const int null = 0;
using namespace std;

typedef vector<int> VI;
typedef vector<int>::iterator VII;

#define all(a) a.begin(),a.end()

template<class T> int size(const T &a) {
	return int(a.size());
}
template<class T> T abs(const T &a) {
	return (a < 0 ? -a : a);
}
template<class T> T sqr(const T &a) {
	return a * a;
}
const double pi = acos(-1.0);

const int mod = int(1e9 + 7.1);

inline int msum(int a, int b) {
	return (a + b < mod ? a + b : a + b - mod);
}
inline int mdiff(int a, int b) {
	return (a < b ? a - b + mod : a - b);
}
inline void madd(int &a, int b) {
	a = msum(a, b);
}

struct Set {
	u32 a[47];

	void add(int i) {
		a[i >> 5] |= (1UL << (i & 31));
	}

	bool has(int j) {
		return a[j >> 5] & (1UL << (j & 31));
	}
	void operator |= (const Set &b) {
		for (int i = 0; i < 47; i++) {
			a[i] |= b.a[i];
		}
	}

} a[2000];

char s[2000][2000];
bool was[2000];

void dfs(int i) {
	was[i] = true;
	for (int j = 0; s[i][j]; j++) {
		if (s[i][j] == '1') {
			if (!was[j]) {
				dfs(j);
			}
			a[i] |= a[j];
		}
	}
}

int main() {
#ifdef pperm
	freopen("input.txt", "r", stdin);
	//freopen("input.txt", "w", stdout);
	//freopen("output.txt", "w", stdout);
#endif
	int T = 1;
	//scanf("%d", &T);
	for (int iTest = 1; iTest <= T; iTest++) {
		int n;
		scanf("%d", &n);
		int m = 0;
		for (int i = 0; i < n; i++) {
			a[i].add(i);
			scanf("%s", s[i]);
			for (int j = 0; j < n; j++) {
				if (s[i][j] == '1') {
					m++;
				}
			}
		}
		for (int i = 0; i < n; i++) {
			if (!was[i]) {
				dfs(i);
			}
		}
		int res = n * (n - 1) / 2 - m;
		printf("%d\n", res);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i != j && !a[j].has(i) && s[i][j] != '1') {
					printf("%d %d\n", i + 1, j + 1);
					a[i] |= a[j];
				}
			}
			for (int j = 0; j < n; j++) {
				if (a[j].has(i)) {
					a[j] |= a[i];
				}
			}
		}
	}
#ifdef pperm
	fprintf(stderr, "\n%.3lf\n", clock() / double(CLOCKS_PER_SEC));
#endif
	return 0;
}