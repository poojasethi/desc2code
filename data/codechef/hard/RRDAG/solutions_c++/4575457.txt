#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <bitset>

using namespace std;


#define INF 1000000000

typedef vector<int> vi;
typedef vector<vi> vii;
typedef pair<int,int> ii;


int n;
vector<ii> ans;
vii adj,from;
vi outdegree;

char str[1600];

bool compare(ii a,ii b)
 {
   if(a.first!=b.first) return a.first<b.first;
   return a.second<b.second;    
 }

int main() 
{

   scanf("%d",&n);
   adj.assign(n+1,vi());
   from.assign(n+1,vi());
   outdegree.assign(n+1,0);  
   bitset<1505> taken,toadd;
   taken.reset();  
   for(int i=1;i<=n;i++)
    {
      scanf("%s",str+1);
      for(int j=1;j<=n;j++)
       {
         if(str[j]-'0')
          {
            adj[i].push_back(j);
            from[j].push_back(i);
            outdegree[i]++;             
          }       
       }       
    }
 
   int g = n-1;
    int edgeadded = 0;
    while(g--)
     {
       for(int i=n;i>=1;i--)
        {
         
          if(!taken[i] && !outdegree[i])
           {
          
              taken[i] = 1;
              toadd.set();
              for(int j=0;j<from[i].size();j++)
               {
                  int v = from[i][j];
                  toadd[v] = 0;
                  outdegree[v]--;     
               }//for
              
              for(int j=1;j<=n;j++)
               {
                 
                 if(!toadd[j])
                   continue;
                 if(taken[j])
                   continue;  
                 else
                  {
                    edgeadded++;
                    ans.push_back(ii(j,i));          
                  }         
               }//for
              break;              
           }//if       
        }//for         
     }//while  	
 
     sort(ans.begin(),ans.end(),compare);	
     printf("%d\n",edgeadded);
     for(int i=0;i<ans.size();i++)
      {
        printf("%d %d\n",ans[i].first,ans[i].second);       
      }
    
	return 0;
} 

