#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <cassert>
#include <vector>

using namespace std;
const int MAXN = 1505;

char mp[MAXN][MAXN];
int n, m = 0;
int ord[MAXN];
int deg[MAXN] = {0};
vector<int> G[MAXN];

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        scanf("%s", mp[i] + 1);
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i != j && mp[i][j] == '1') deg[i] ++, G[j].push_back(i);
        }
    }
    priority_queue<int> heap;
    for (int i = 1; i <= n; i++) if (deg[i] == 0) {
        heap.push(i);
    }
    while (!heap.empty()) {
        int u = heap.top(); heap.pop(); ord[++ m] = u;
        for (int i = 0; i < G[u].size(); i++) {
            int v = G[u][i];
            if (-- deg[v] == 0) {
                heap.push(v);
            }
        }
    }
    reverse(ord + 1, ord + 1 + m);
    vector<pair<int, int> > ans;
    for (int i = 1; i <= m; i++) {
        int u = ord[i];
        for (int j = i + 1; j <= m; j++) {
            int v = ord[j];
            if (mp[u][v] == '0')ans.push_back(make_pair(u, v));
        }
    }
    sort(ans.begin(), ans.end());
    printf("%d\n", ans.size());
    for (int i = 0; i < ans.size(); i++) printf("%d %d\n", ans[i].first, ans[i].second);
    return 0;
}
/*

5
00000
10000
10000
00100
00010

6
2 3
2 4
2 5
4 1
5 1
5 3

6
2 3
2 4
2 5
4 1
5 1
5 3

*/

