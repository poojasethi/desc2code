//graph,topological sort
#include<bits/stdc++.h>
using namespace std;
#define MAXN 1501
string G[MAXN];						//graph->adjacency matrix
bool marked[MAXN];
int outdegree[MAXN];				//maintains outdegree of vertices
vector<pair<int,int> > Exedges;		//to store the extra edges that can be added
int main()
{
	memset(marked,false,sizeof(marked));
	memset(outdegree,0,sizeof(outdegree));
        ios_base::sync_with_stdio(0);
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	cin>>G[i];
	for(int i=0;i<n;i++)				//init the outdegrees
	{
		for(int j=0;j<n;j++)
		{
			if(G[i][j]=='1')
			outdegree[i]++;
		}
	}
	for(int i=0;i<n;i++)				
	{
		int v;							//vertex v is the last vertex to come in topological order with outdeg=0
		for(int j=n-1;j>=0;j--)
		{
			if(!marked[j] && outdegree[j]==0)
			{
				v=j;
				break;
			}
		}
		marked[v]=true;
		for(int j=0;j<n;j++)
		{
			if(G[j][v]=='1')
			{
				outdegree[j]--;
				continue;
			}
			if(j!=v && G[j][v]=='0' && !marked[j])
			Exedges.push_back(make_pair(j+1,v+1));		//form edges with all vertices below it in topological order
		}
	}
	sort(Exedges.begin(),Exedges.end());
	cout<<Exedges.size()<<"\n";
	for(int i=0;i<Exedges.size();i++)
	cout<<Exedges[i].first<<" "<<Exedges[i].second<<"\n";
}