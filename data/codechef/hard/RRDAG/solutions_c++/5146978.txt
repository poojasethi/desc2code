#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<ctime>
#include<map>
#include<string>
#include<vector>
#include<set>

using namespace std;
#define For(i,l,r) for (int i = l; i <= r; ++i)
#define Cor(i,l,r) for (int i = l; i >= r; --i)
#define Fill(a,b) memset(a,b,sizeof(a))
#define FI first
#define SE second
#define MP make_pair
#define PII pair<int,int>
#define flt double
#define INF (0x3f3f3f3f)
#define MaxN 1020304
#define MaxNode 1020304
#define MD 1000000007

long long getLL() {
	long long ret = 0;
	char c;
	while (1) {
		c = getchar();
		if (c >= '0' && c <= '9') break ;
	}
	while (1) {
		ret = ret * 10 + c - '0';
		c = getchar();
		if (c < '0' || c > '9') break ;
	}
	return ret;
}

int getInt() {
	int ret = 0;
	char c;
	while (1) {
		c = getchar();
		if (c >= '0' && c <= '9') break ;
	}
	while (1) {
		ret = ret * 10 + c - '0';
		c = getchar();
		if (c < '0' || c > '9') break ;
	}
	return ret;
}

char A[1501][1501];
int n;
int in[1501], list[1501], order[1501], tmp[1501];
vector<int> Edges[1501];

bool cmp(int x, int y) {
	return list[x] < list[y];
}

int main() {
	//freopen("input.txt","r",stdin); //freopen("output.txt","w",stdout);
	int n = getInt();
	For(i,1,n) scanf("%s", A[i] + 1);
	For(i,1,n) Edges[i].clear();
	int num_Edges = 0;
	For(i,1,n) For(j,1,n) if (A[i][j] == '1') {
		Edges[j].push_back(i);
		++in[i];
		++num_Edges;
	}
	For(i,1,n) {
		int p = 0;
		Cor(j,n,1) if (in[j] == 0) {
			p = j; break ;
		}
		in[p] = -1;
		list[i] = p;
		for (vector<int> :: iterator it = Edges[p].begin(); it != Edges[p].end(); ++it) {
			--in[*it];
		}
	}

	reverse(list + 1, list + n + 1);

	For(i,1,n) order[i] = i;
	sort(order + 1, order + n + 1, cmp);
	int total = n * (n - 1) / 2 - num_Edges;
	cout << total << endl;
	For(i,1,n) For(j,1,n) if (A[list[order[i]]][list[order[j]]] == '0' && order[i] < order[j]) {
		printf("%d %d\n", list[order[i]], list[order[j]]);
	}
	return 0;
}

