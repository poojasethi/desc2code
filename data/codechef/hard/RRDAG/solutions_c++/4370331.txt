#include <bits/stdc++.h>
 
using namespace std;
 
#define      pii               std::pair<int,int>
#define      vi                std::vector<int>
#define      mp(a,b)           std::make_pair(a,b)
#define      X                 first
#define      Y                 second
 
int N, deg1[1600], deg2[1600];	// deg1 : outgoing edges, deg2 : incoming edges
char adj[1600][1600],	// '0' and '1' based
	tmp[1600][1600];	// 0 and 1 based :P 
bool vis[1600];
pii Ar[2250001];
 
void dfs(int idx){
	assert(vis[idx] == false);
	for(int i=0;i<N;++i)
	{
		if(adj[i][idx] == '1')
		{
			deg1[i] -= 1;
		}
		if(vis[i] == false and i != idx) tmp[i][idx] = true;
	}
	vis[idx] = true;
}
 
int main()
{
	scanf("%d",&N);
	for(int i=0;i<N;++i)
		scanf("%s",adj[i]);
	memset(vis, false, sizeof vis);
	memset(deg2, 0, sizeof deg2);
	memset(deg1, 0, sizeof deg1);
	memset(tmp, 0, sizeof tmp);
 
	for(int i=0;i<N;++i)
		for(int j=0;j<N;++j)
			deg1[i] += adj[i][j] - '0',
			deg2[i] += adj[j][i] - '0';
	int ct = 0;
	for(int i=0;i<N;++i)
		ct += deg1[i];
 
	int ans = N * (N-1) / 2 - ct;
	assert(ans >=0);
 
	cout << ans << endl;
 
	for(int i=0, found = 0;i<N; ++i, found = 0)
		for(int j=N-1;j>=0 and !found;--j)
		{
			if(vis[j] == false and deg1[j] == 0)
			{
				dfs(j);
				found = true;
			}
		}
	ct = 0;
	for(int i=0;i<N;++i)
		for(int j=0;j<N;++j)
		{
			if(adj[i][j] == '0' and tmp[i][j] == 1) Ar[ct++] = mp(i,j);
		}
	assert(ct == ans);
	// sort(Ar, Ar + ans);
	for(int i=0;i<ans;++i)
	{
		printf("%d %d\n",Ar[i].X + 1, Ar[i].Y + 1);
	}
	return 0;
}