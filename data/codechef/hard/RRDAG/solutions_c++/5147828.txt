#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
#include <queue>
#include <vector>
using namespace std;

int grid[1505][1505];
int degree[1505];

priority_queue<int> que;
int top[1505];

vector<pair<int, int> > ans;

int main() {
    int n;
    scanf("%d", &n);
    memset(degree, 0, sizeof(degree));
    for (int i = 1; i <= n; ++i) 
	for (int j = 1; j <= n; ++j) {
	    int &ch = grid[i][j];
	    while (ch = getchar(), !isdigit(ch));
	    ch -= '0';
	    if (ch) ++ degree[i];
	} 
    for (int i = 1; i <= n; ++i)
	if (!degree[i]) que.push(i);
    int m = n;
    while (!que.empty()) {
	int x = que.top(); que.pop();
	top[m--] = x;
	for (int i = 1; i <= n; ++i)
	    if (grid[i][x])
		if (--degree[i] == 0)
		    que.push(i);
    }
    for (int i = 1; i <= n; ++i)
	for (int j = i + 1; j <= n; ++j)
	    if (!grid[top[i]][top[j]])
		ans.push_back(make_pair(top[i], top[j]));
    sort(ans.begin(), ans.end());
    cout << ans.size() << endl;
    for (int i = 0; i < ans.size(); ++i)
	printf("%d %d\n", ans[i].first, ans[i].second);
    return 0;
}

