#include <queue>
#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

const int N = 1505;

int n;

vector<int> edge[N];

int dgr[N];

char buf[N];

bool g[N][N];

int main() {
    while (scanf("%d", &n) == 1) {
        for (int i = 0; i < n; ++i) {
            edge[i].clear();
            dgr[i] = 0;
        }
        for (int i = 0; i < n; ++i) {
            scanf("%s", buf);
            for (int j = 0; j < n; ++j) {
                if (buf[j] == '1') {
                    edge[j].push_back(i);
                    ++dgr[i];
                    g[j][i] = true;
                } else {
                    g[j][i] = false;
                }
            }
        }
        priority_queue<int> heap;
        for (int i = 0; i < n; ++i) {
            if (dgr[i] == 0) {
                heap.push(i);
            }
        }
        vector<int> ord;
        while (heap.size()) {
            int u = heap.top();
            heap.pop();
            for (int j = 0; j < (int)edge[u].size(); ++j) {
                int v = edge[u][j];
                if (--dgr[v] == 0) {
                    heap.push(v);
                }
            }
            ord.push_back(u);
        }
        vector<pair<int, int> > ans;
        reverse(ord.begin(), ord.end());
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int u = ord[i], v = ord[j];
                if (!g[v][u]) {
                    ans.push_back(make_pair(u + 1, v + 1));
                }
            }
        } 
        sort(ans.begin(), ans.end());
        printf("%d\n", (int)ans.size());
        for (int i = 0; i < (int)ans.size(); ++i) {
            printf("%d %d\n", ans[i].first, ans[i].second);
        }
    }
    return 0;
}

