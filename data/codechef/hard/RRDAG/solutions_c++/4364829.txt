/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define MAX(a,b) ((a)>(b)?(a):(b))
int ABS(int a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

set<int> out[2005];
set<int> in[2005];
int indegree[2005];
int outdegree[2005];
int n;
char adj[2005][2005];

void topologicalSort() {
    set<int> freeset;
    vector<pii> ans;
    F(i,0,n) if ( outdegree[i] == 0 ) freeset.insert(i);
    
    while ( !freeset.empty() ) {
        set<int>::iterator it = freeset.end();
        it--;
        int where = *it;
        freeset.erase(it);
        set<int>::iterator it2;
        FE(it2,in[where]) {
            int x = *it2;
            outdegree[x]--;
            if ( !outdegree[x] ) {
                freeset.insert(x);
            }
        }
        F(i,0,n) {
            if ( adj[i][where] == '0' && i != where && adj[where][i] != '1' ) {
                adj[i][where] = '1';
                ans.pb(pii(i+1,where+1));
            }
        }
    }

    sort(ans.begin(),ans.end());
    printf("%d\n", ans.size());
    F(i,0,ans.size()) {
        printf("%d %d\n", ans[i].fr, ans[i].se);
    }

}

int main() {
    input();
    S(n);
    M(indegree,0);
    M(outdegree,0);
    F(i,0,n) scanf("%s",adj[i]);
    F(i,0,n) {
        F(j,0,n) {
            if ( adj[i][j] == '1' ) {
                int x = i, y = j;
                out[x].insert(y);
                in[y].insert(x);
                indegree[y]++;
                outdegree[x]++;
            }
        }
    }
    topologicalSort();
    return 0;
}