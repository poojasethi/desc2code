#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<queue>
#include<map>
#include<math.h>
#include<algorithm>
#define LL long long int
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define SL(N) scanf("%lld",&N);
#define pb push_back
#define mp make_pair
#define pnl printf("\n");
#define FOR(i,a,b) for (i=a;i<=b;i++)
#define mem(a,val) memset(a,val,sizeof(a))
using namespace std;
vector<int>que;
int gcd(int a, int b){ int temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
int adj[1510][1510];
int ans[1510][1510];
bool del[1510];
int outdegree[1510];
int main()
{
	int V,E,x,k;
	int i,j;
	mem(del,false);
	mem(ans,false);
	mem(adj,0);
	mem(outdegree,0);
	bool flag;
	S(V) 
	int edges=0;
	string str;
	for(i=1;i<=V;i++)
	{
		cin>>str;
		for(j=1;j<=V;j++)
		{
			 adj[i][j]=str[j-1]-'0';
			
			if(str[j-1]=='1'){
				edges++;
				 outdegree[i]++;
			}
		}
	}
    int v=V;
    int ans1=( (v*(v-1))/2)-edges;
	printf("%d\n",ans1);
	int node=0;
		for(i=1;i<=V;i++)
		{
			
			for(j=V;j>=1;j--)
			{
				
				if(del[j]==false && outdegree[j]==0)// j is present in graph and its out degree is zero.
				{
					node= j; break;
				}
			}
			del[node]=true;// delete node
			for(j=1;j<=V;j++)
			{
				if(del[j]==false && j!=node && adj[j][node]==0)
				{
					ans[j][node]=true;// add node
				}
				if(adj[j][node])
					outdegree[j]--;
			}
		}
	
		for(i=1;i<=V;i++)
		{
			for(j=1;j<=V;j++)
			{
				if(ans[i][j])
					printf("%d %d\n",i,j);
			}
		}
		
return 0;
}