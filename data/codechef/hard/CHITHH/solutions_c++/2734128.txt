/*	Template by
	Ashwin Kumar
	IIT Delhi */
#include<algorithm>		//min(), max(), reverse(), sort(), next_permutation(), prev_permutation(), swap()
						//make_heap(), pop_heap(), push_heap(), sort_heap()
#include<iostream>
#include<cassert>		//assert()
#include<cmath>			//cos(in radians), sin(), tan(), acos(), asin(), atan(), modf(break into frac and inte parts)
						//log(), log10(), log2(), pow(), sqrt(), cbrt(), ceil(), floor(), fmod(), abs()  
#include<cstdio>		//fclose(), fopen(), fprintf(), fscanf(), printf(), scanf(), gets(), puts()
#include<cstdlib>		//srand(time(NULL)), rand(), itoa(), malloc(), free()
#include<cstring>		//memcpy(), strcpy(), strcat(), strcmp(), memset(), strlen(), strtok(), strrchr()
#include<sstream>
#include<string>		//to_string(any numerical value), stoi(), stoll()
#include<ctime>   
#include<deque>			//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back() 
						//modifiers: push_back(), push_front(), pop_back(), pop_front(), erase(), clear()
#include<list>			//begin(), end(), push_back(), pop_back()
#include<map>			//begin(), end(), rbegin(), rend(), operator[], at(), clear(), find()
						//priority_queue:  top(), push(), pop()
#include<queue>			//front(), back(), push(), pop()
#include<set>			//begin(), end(), rbegin(), rend(), insert(), erase(), clear(), find()
#include<stack>			//top(), push(), pop()
#include<vector>		//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back()
						//modifiers: push_back(), pop_back(), erase(), clear() 
using namespace std;
 
typedef long long LL;
typedef pair<int, int> pii;
#define MAX 100000
#define INF 1000000000000LL
#define MOD 1000000007

string arr[MAX];
int size[MAX];
int pre[100][MAX];

int main()
{
	int N, num;
	scanf("%d", &N);
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &num);
		stringstream ss;
		ss << num;
		arr[i] = ss.str();
		size[i] = arr[i].size();
	}
	for (int v = 1; v < 100; v++)
		for (int i = 0; i < N; i++)
			pre[v][i] = size[i]+((i-v >= 0) ? pre[v][i-v] : 0);
	int M;
	scanf("%d", &M);
	for (int i = 0; i < M; i++)
	{
		int l, v, k;
		scanf("%d %d %d", &l, &v, &k);
		if (v < 100)
		{
			//bsearch
			l--;
			int maxL;
			if ((N-l)%v == 0)
				maxL = ((N-l)/v)-1;
			else
				maxL = (N-l)/v;
			maxL = l+maxL*v;
			assert(maxL >= l);
			int maxPos = pre[v][maxL];
			int sub = ((l-v >= 0) ? pre[v][l-v] : 0);
			maxPos -= sub;
			if (k > maxPos)
				printf("So sad\n");
			else
			{
				if (size[l] >= k)
				{
					printf("%c\n", arr[l][k-1]);
					continue;
				}
				int lo = l, hi = maxL;
				while (lo < hi)
				{
					int mid = (lo+hi)/2;
					int realMid = l+((mid-l)/v)*v;
					if (pre[v][realMid]-sub < k)
						lo = realMid+v;
					else
						hi = realMid;
				}
				int rem = k-pre[v][lo-v]+sub;
				printf("%c\n", arr[lo][rem-1]);
			}
		}
		else
		{
			int cur = l-1;
			int ans = 0;
			bool done = 0;
			while (cur < N)
			{
				if (ans+size[cur] < k)
				{
					ans += size[cur];
					cur = cur+v;
				}
				else
				{
					int rem = k-ans;
					printf("%c\n", arr[cur][rem-1]);
					done = 1;
					break;
				}
			}
			if (!done)
				printf("So sad\n");
		}
	}
	return 0;
}
