
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;

#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define REPX(i, l, r, step) for (int i = l; i <= r; i += step)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define MAX_N 110000

int **f;
int a[MAX_N], b[MAX_N];
bool sign;
int n, m, len, mn, p[20];

void Prepare(void)
{
     len = min((int)sqrt(n) + 10, n), p[0] = 1, f = new int*[len + 1];
     //printf ("%d %d\n", len, n), fflush(stdout);
     REP1(i, 10) p[i] = p[i - 1] * 10;
     REP1(i, len)
     {
        f[i] = new int[n + 1];
        REP(j, 0, i - 1) f[i][j] = b[j];
        REP(j, i, n) f[i][j] = f[i][j - i] + b[j];
     }
}

inline void init(int &x, int &t)
{
       static int c[20];
       while (x > 0) c[++t] = x % 10, x /= 10;
       REP(i, 1, t) x = x * 10 + c[i];
       if (!t) t = 1;
}

void mysearch(int x, int y, int z)
{
     int l = 0, r = (n - x) / y, mid;
     if (l > r) return ;
     if (x > y) z += f[y][x - y];
     while (l <= r)
     {
           mid = l + r >> 1;
           if (f[y][mid * y + x] >= z) r = mid - 1;
           else l = mid + 1;
     }
     //printf ("%d %d %d %d\n", l, r, x, y);
     r = (++r) * y + x;
     //printf ("-> %d %d %d %d\n", r, y, z, f[y][r - y]), fflush(stdout);
     if (r > n) return ;
     sign = true;
     if (r > y) z -= f[y][r - y];
     printf ("%d\n", a[r] / p[z - 1] % 10);
}

int main(void)
{
    #define ONLINE_JUDGE 
    #ifndef ONLINE_JUDGE
    freopen ("input.txt", "r", stdin);
    freopen ("output.txt", "w", stdout);
    #endif
    scanf("%d", &n); REP1(i, n) scanf("%d", a + i), init(a[i], b[i]);
    //REP1(i, n) printf ("%d %d\n", a[i], b[i]);
    Prepare(), scanf("%d", &m);
    REP1(i, m)
    {
        int x, y, z; scanf("%d%d%d", &x, &y, &z), sign = false;
        //printf ("%d %d %d\n", x, y, z), fflush(stdout);
        if (y <= len) mysearch(x, y, z);
        else REPX(j, x, n, y) if (z <= b[j])
             { printf ("%d\n", a[j] / p[z - 1] % 10), sign = true; break; }
             else z -= b[j];
        if (!sign) puts("So sad");
    }
    return 0;
}
