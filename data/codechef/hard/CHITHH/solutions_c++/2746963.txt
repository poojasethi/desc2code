#include <cstdio>
#include <cstring>
#include <cmath>

const int N = 100000 + 1;
const int B = 320;

int element[N], a[N], digits[N][11];
int sum[B][N];
int n, m;

int trans(int x, int id) {
	if (x == 0) {
		digits[id][1] = 0;
		return 1;
	}
	int result = 0;
	while (x) {
		digits[id][++ result] = x % 10;
		x /= 10;
	}
	return result;
}

int main() {
	scanf("%d", &n);
	for (int i = 1; i <= n; ++ i) {
		scanf("%d", element + i);
		a[i] = trans(element[i], i);
	}
	int base = sqrt(n * 1.0);
	for (int step = 1; step <= base; ++ step) {
		for (int i = n; i >= 1; -- i) {
			sum[step][i] = a[i];
			if (i + step <= n) {
				sum[step][i] += sum[step][i + step];
			}
		}
	}
	int m, t = 0;
	scanf("%d", &m);
	while (m --) {
		int start, step, k;
		scanf("%d%d%d", &start, &step, &k);
		if (step <= base) {
			k = sum[step][start] - k + 1;
			if (k <= 0) {
				puts("So sad");
				continue;
			}

			int lower = 0, upper = (n - start) / step;
			while (lower < upper) {
				int middle = lower + upper + 1 >> 1;
				int now = start + step * middle;
				if (sum[step][now] >= k) {
					lower = middle;
				} else {
					upper = middle - 1;
				}
			}
			int found = start + step * lower;
			int count = k;
			if (found + step <= n) {
				count -= sum[step][found + step];
			}
			// if (t == 17202) printf("%d %d %d %d", lower, found, element[found], count);
			printf("%d\n", digits[found][count]);
		} else {
			int now = start;
			int count = a[start];
			while (now + step <= n && count < k) {
				now += step;
				count += a[now];
			}
			if (count < k) {
				puts("So sad");
				continue;
			}
			count = count - k + 1;
			printf("%d\n", digits[now][count]);
		}
	}
	return 0;
}
