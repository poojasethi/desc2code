#include <iostream>
#include <algorithm>
#include <string>
#include <memory.h>
#include <time.h>
#include <map>
#include <set>
#include <climits>
#include <queue>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <stdio.h>

using namespace std;

string s[100010];
vector<int> dp[110][110];

int main()
{
    ios::sync_with_stdio(0);
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n;
    cin >> n;
    for(int i = 0 ; i < n ; ++i)
        cin >> s[i];

    for(int i = 1 ; i <= 100 && i < n ; ++i)
    {
        for(int start = 0 ; start < i ; ++start)
        {
            dp[i][start].push_back(s[start].length());
            for(int j = start + i ; j < n ; j += i)
                dp[i][start].push_back(dp[i][start].back() + s[j].length());
        }
    }

    int m;
    cin >> m;
    for(int i = 0 ; i < m ; ++i)
    {
        int l, v, k;
        cin >> l >> v >> k;
        --l;
        if(v > 100 || v >= n)
        {
            char res;
            for(int j = 0 ; l + j*v < n ; ++j)
            {
                if(s[l+j*v].length() < k)
                {
                    k -= s[l+j*v].length();
                }
                else
                {
                    int ll = 0;
                    while(k > 0)
                    {
                        if(k == 1)
                            res = s[l+j*v][ll];
                        ++ll;
                        --k;
                    }
                }
            }
            if(k > 0)
                cout << "So sad" << "\n";
            else
                cout << res << "\n";
        }
        else
        {
            int start = l % v;
            int x = (l-start) / v;

            int xx = 0;
            if(x != 0)
                xx = dp[v][start][x-1];

            if(dp[v][start].back() - xx < k)
                cout << "So sad" << "\n";
            else
            {
                if(k <= s[l].length())
                {
                    cout << s[l][k-1] << "\n";
                    continue;
                }

                int xx;
                int x0 = x;
                if(x == 0)
                    xx = 0;
                else
                    xx = dp[v][start][x-1];

                for(int pp = 30 ; pp >= 0 ; --pp)
                {
                    int d = (1 << pp);
                    if(x + d >= dp[v][start].size())
                        continue;

                    if(dp[v][start][x+d] - xx < k)
                        x += d;

                }
                if(dp[v][start][x] - xx >= k)
                {
                    cout << s[l+v*(x-x0)][k-1] << "\n";
                    continue;
                }

                //while(k > dp[v][start][x]-xx)
                //    ++x;

                k -= dp[v][start][x]-xx;

                //cout << l+v*(x+1) << " * \n";
                //cout << k << " ** \n";

                cout << s[l+v*(x+1-x0)][k-1] << "\n";
            }
        }
    }

    return 0;
}
