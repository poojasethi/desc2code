/*
	PROB: CHITHH
	LANG: C++
*/

#include <cstdio>
#include <algorithm>

#ifdef ONLINE_JUDGE
	#define PRINT(x)
	#define D if(0)
#else
	#include <iostream>
	#define PRINT(x) \
		cout<<"[DEBUG] "<<#x<<":\t"<<x<<endl
	#define D if(1)
#endif

using namespace std;

const char InFile[]="CHITHH.in";
const char OutFile[]="CHITHH.out";
const int MaxN=100111;
const int MaxV=325;
const int INF=1<<30;

int N,M,L,V,K,A[MaxN],X[MaxN],dig[MaxN][10],CNT[MaxV][MaxN];

inline int cnt(int A,int index)
{
	if(A==0)
	{
		return 1;
	}
	int sol=0;
	while(A)
	{
		++sol;
		dig[index][sol]=A%10;
		A/=10;
	}
	for(register int i=1;i<=sol/2;++i)
	{
		swap(dig[index][i],dig[index][sol-i+1]);
	}
	for(register int i=1;i<=sol;++i)
	{
		PRINT(index<<" "<<i<<" "<<dig[index][i]);
	}
	return sol;
}

inline int query(int l, int v, int q)
{
	int r=l+v*q;
	if(r>N)
	{
		return INF;
	}
	if(l>=v)
	{
		return CNT[v][r]-CNT[v][l-v];	
	}
	return CNT[v][r];
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen(InFile,"r",stdin);
	freopen(OutFile,"w",stdout);
#endif
	
	scanf("%d",&N);
	for(register int i=1;i<=N;++i)
	{
		scanf("%d",A+i);
		X[i]=cnt(A[i],i);
	}

	for(register int i=1;i<MaxV;++i)
	{
		for(register int j=1;j<MaxN;++j)
		{
			CNT[i][j]=X[j];
			if(j-i>=1)
			{
				CNT[i][j]+=CNT[i][j-i];
			}
		}
	}

	scanf("%d",&M);
	for(register int i=1;i<=M;++i)
	{
		scanf("%d %d %d",&L,&V,&K);
		bool ok=false;
		if(V>=MaxV)
		{
		for(register int q=L;q<=N;q+=V)
		{
			if(K<=X[q])
			{
				ok=true;
				printf("%d\n",dig[q][K]);
				break;
			}
			else
			{
				K-=X[q];
			}
		}
		}
		else
		{
			int sol=-1;
			int l=0;
			int r=N;
			int step=1<<18;
			for(;step;step>>=1)
			{
				int index=l+step;
				if(index<=r)
				{
					PRINT(index<<" "<<query(L,V,index)<<" "<<K);
					if(query(L,V,index)<K)
					{
						l=index;
					}
				}
			}
			sol=l;
			//PRINT(sol);
			if(sol==0 && K<=query(L,V,sol))
			{
				if(K<=X[L])
				{
					ok=true;
					printf("%d\n",dig[L][K]);
				}
			}
			else
			{
				if(query(L,V,sol)<K && query(L,V,sol+1)!=INF)
				{
				//	PRINT("OK");
				//	PRINT(qu);
					K-=query(L,V,sol);
					ok=true;
					PRINT(sol*V+L<<" "<<K);
					printf("%d\n",dig[(sol+1)*V+L][K]);
				}
			}
		}
		if(!ok)
		{
			printf("So sad\n");
		}
	}
	
	return 0;
}

