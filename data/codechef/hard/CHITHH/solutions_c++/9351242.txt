/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

typedef unsigned int ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ll> vll;
typedef pair<int,int> ii;
typedef vector<pair<int,int> > vii;

const int MAX = 100005;
const int MAXR = 405;

int n, rt;
int sum[MAX][MAXR];
string a[MAX];
int dig[MAX];

void process() {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= rt; j++) {
            sum[i][j] = dig[i];
            if (j<=i) {
                sum[i][j] += sum[i-j][j];
            }
        }
    }
}

int getSum(int l, int r, int v) {
    r = l + ((r-l)/v)*v;
    //cerr << l << " " << r << endl;
    return sum[r][v]-sum[l][v]+dig[l];
}

int main() {
    ios::sync_with_stdio(false);

    cin >> n;
    rt = sqrt(n);
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        dig[i]=a[i].size();
    }

    //trackarr(a, n+1);
    //trackarr(dig, n+1);

    process();

    /*for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= rt; j++) {
            cerr << sum[i][j] << " ";
        }
        cerr << endl;
    }*/

    int q;
    cin >> q;
    while (q--) {
        int l, v, k;
        cin >> l >> v >> k;

        if (v < rt ) {
            //cerr << "< RT" << endl;
            int sum = 0;
            int low = l, high = n, answer = 0;
            while (low <= high) {
                int mid = (high+low)/2;
                int s = getSum(l, mid, v);
                //trace2(mid, s);
                if (s >= k) {
                    high = mid-1;
                    answer = mid;
                    sum = s;
                } else {
                    low = mid+1;
                }
            }
            //trace(answer);
            //trace(k); trace(sum);

            if (answer == 0) {
                cout << "So sad" << endl;
            } else {
                k = k - (sum - dig[answer]);
                k--;
                cout << a[answer][k]<< endl;
                //trace(k);
            }

        } else {
            //cerr << "> RT" << endl;
            int sum = 0;
            int idx = l;
            int m = k;
            bool flag = false;
            for (int i = l; i <= n; i+=v){
                sum += dig[i];
                if (sum >= k) {
                    idx = i;
                    flag = true;
                    break;
                } else {
                    m -= dig[i];
                }
            }
            //trace(idx);
            //trace(m);
            m--;
            if (flag) {
                cout << a[idx][m] << endl;
            } else {
                cout << "So sad" << endl;
            }
        }
    }

}
