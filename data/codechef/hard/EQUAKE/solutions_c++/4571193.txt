#include <cstdio>
#include <algorithm>
#include <vector>
#include <iostream>
#include <string>
#include <cmath>

using namespace std;

short int tree[4000100][12], add[4000100], qtr[4000100];
short int a[1000100], tmp[20];
int n, m;
int q[6];

int d(int x, int rt) {
  int xx = x, l = 0;
  while (xx > 0) xx /= 10, l++;
  xx = x;
  for (int i = l - 1; i >= 0; i--) q[i] = xx % 10, xx /= 10;
  int res = 0;
  for (int i = rt; i < rt + l; i++) res = res * 10 + q[i % l];
  return res;
}
void calc(int v) {
  for (int i = 0; i < 12; i++)
    tree[v][(i + qtr[v]) % 12] =
        max(tree[2 * v + 1][(i + qtr[2 * v + 1]) % 12],
            tree[2 * v + 2][(i + qtr[2 * v + 2]) % 12]);
}
void upd(int v, int rt) {
  qtr[v] += rt;
  qtr[v] %= 12;
}
void build(int v, int l, int r) {
  if (l == r) {
    for (int i = 0; i < 12; i++) tree[v][i] = d(a[l], i);
    return;
  }
  int med = (l + r) / 2;
  build(2 * v + 1, l, med);
  build(2 * v + 2, med + 1, r);
  calc(v);
}
void push(int v) {
  add[2 * v + 1] += add[v];
  add[2 * v + 1] %= 12;
  add[2 * v + 2] += add[v];
  add[2 * v + 2] %= 12;
  upd(2 * v + 1, add[v]);
  upd(2 * v + 2, add[v]);
  add[v] = 0;
}
void modify(int v, int l, int r, int st, int fin, int rt) {
  if (l == st && r == fin) {
    add[v] += rt;
    upd(v, rt);
    return;
  }
  int med = (l + r) / 2;
  push(v);
  if (fin <= med) modify(2 * v + 1, l, med, st, fin, rt);
  if (st > med) modify(2 * v + 2, med + 1, r, st, fin, rt);
  if (st <= med && fin > med)
    modify(2 * v + 1, l, med, st, med, rt),
        modify(2 * v + 2, med + 1, r, med + 1, fin, rt);
  calc(v);
}
int query(int v, int l, int r, int st, int fin) {
  if (l == st && r == fin) {
    return tree[v][qtr[v]];
  }
  int med = (l + r) / 2, ansl = 0, ansr = 0;
  push(v);
  if (fin <= med) ansl = query(2 * v + 1, l, med, st, fin);
  if (st > med) ansr = query(2 * v + 2, med + 1, r, st, fin);
  if (st <= med && fin > med)
    ansl = query(2 * v + 1, l, med, st, med),
    ansr = query(2 * v + 2, med + 1, r, med + 1, fin);
  return max(ansl, ansr);
}
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) scanf("%d", &a[i]);
  build(0, 0, n - 1);
  scanf("%d", &m);
  for (int i = 0; i < m; i++) {
    int type;
    scanf("%d", &type);
    if (type == 0) {
      int l, r, rt;
      scanf("%d%d%d", &l, &r, &rt);
      modify(0, 0, n - 1, l, r, rt);
    } else {
      int l, r;
      scanf("%d%d", &l, &r);
      printf("%d\n", query(0, 0, n - 1, l, r));
    }
  }
  return 0;
}