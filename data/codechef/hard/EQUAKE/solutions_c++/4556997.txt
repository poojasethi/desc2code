/*******************
  	Ashish Kumar
	IIIT HYDERABAD
	***********************/


#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<climits>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<bitset>
#include<stack>
#include<queue>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<functional>
#include<numeric>
using namespace std;
#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i)
#define rep(i,n) FOR(i,0,n)
#define INF INT_MAX
#define ALL(x) x.begin(),x.end()
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#define pb push_back
#define sz(x) int(x.size())
#define mp make_pair
#define fill(x,v) memset(x,v,sizeof(x))
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d ",n)
#define pd(n) printf("%lf ",n);
#define pdl(n) printf("%lf\n",n);
#define pil(n) printf("%d\n",n)
#define pll(n) printf("%lld\n",n)
#define pl(n) printf("%lld ",n)
#define sl(n) scanf("%lld",&n)
#define sd(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define F(x) x.first
#define S(x) x.second
#define scan(v,n) vector<int> v;rep(i,n){ int j;si(j);v.pb(j);}
#define mod (int)(1e9 + 7)
#define lld long long int
lld modpow(lld a,lld n,lld temp){lld res=1,y=a;while(n>0){if(n&1)res=(res*y)%temp;y=(y*y)%temp;n/=2;}return res%temp;} 
long long int gcd(long long int a,long long int b)
{
	long long int c;
	while(a!=0)
	{
		c = a;
		a = b%a;
		b = c;
	}
	return b;
}

void seive()
{
	int i,j;
	int MAX=1000006;
	int isprime[1000006]; 
	isprime[0] = isprime[1] = 1; 
	for (i = 4; i < MAX; i += 2)
		isprime[i] = 1; 
	for (i = 3; i * i < MAX; i += 2) 
	{
		if (!isprime[i]) 
		{
			for (j = i * i; j < MAX; j += 2 * i)
				{
					isprime[j] = 1; 
				}
		}
	}
}
typedef struct node{
	int l;
	int p;
	int a[13];
}node;
int value[800001];
int period[800001];
int arr[800001][13];
node segment[3000005];
//int lazy[3000005]={0};

void per(int val,int idx)
{
	int a[5];
	if(val==0)
	{
		for(int cnt=0;cnt<12;cnt++)
		{
			arr[idx][cnt]=0;
		}
		//arr[idx][0][3]=0;
		return ;
	}
	int cval=val,k=3,i;
	while(cval!=0)
	{
		a[k]=(cval%10);
		cval/=10;
		k--;
	}
	int b[5];
	for(i=k+1;i<=3;i++)
	{
		b[i]=a[i];
	}
	int cnt=0;
	while(cnt<13)
	{
		int va=0,cur=1;
		for(i=3;i>=k+1;i--)
		{
			if(b[i]==-1)
				break;
			va+=(b[i]*cur);
			cur*=10;
		}
		arr[idx][cnt]=va;
		cnt++;
		int strt=b[k+1];
		for(i=k+1;i<3;i++)
		{
			b[i]=b[i+1];
		}
		b[3]=strt;
	}
}

void build_tree(int node,int a,int b)
{
	int i,j;
	if(a==b)
	{
		for(i=0;i<13;i++)
		{
			segment[node].a[i]=arr[a][i];
		}
		segment[node].p=period[a];
		segment[node].l=0;
		return;
	}
	build_tree(2*node,a,(a+b)/2);
	build_tree(2*node+1,(a+b)/2+1,b);
	//segment[node]=max(segment[2*node],segment[node]=segment[2*node+1]);
	for(i=0;i<13;i++)
	{
		segment[node].a[i]=max(segment[2*node].a[i],segment[2*node+1].a[i]);
	}

}

void update_tree(int node,int a,int b,int f,int e,int force)
{
	int i,j;
	if(segment[node].l!=0)
	{
		//segment[node]
		int tmp[13];
		for(i=0;i<12;i++)
		{
			tmp[i]=segment[node].a[i];
		}
		for(i=0;i<12;i++)
		{
			segment[node].a[i]=tmp[(i+segment[node].l)%12];
		}
		if(a!=b)
		{
			segment[2*node].l+=segment[node].l;
			segment[2*node+1].l+=segment[node].l;
		}
		segment[node].l=0;
	}
	if(a>b || a>e || b<f)
		return;
	if(a>=f && b<=e)
	{
		int rot=force%12;
		int tmp[13];
		for(i=0;i<12;i++)
		{
			tmp[i]=segment[node].a[i];
		}
		for(i=0;i<12;i++)
		{
			segment[node].a[i]=tmp[(i+rot)%12];
		}
		if(a!=b)
		{
			segment[2*node].l+=rot;
			segment[2*node+1].l+=rot;
		}
		segment[node].l=0;	
		return;
	}
	update_tree(2*node,a,(a+b)/2,f,e,force);
	update_tree(2*node+1,(a+b)/2+1,b,f,e,force);
	for(i=0;i<12;i++)
	{
		segment[node].a[i]=max(segment[2*node].a[i],segment[2*node+1].a[i]);
	}
}

int query(int node,int a,int b,int f,int e)
{
	int i,j;
	if(a>b || a>e || b<f)
	{
		return -1;
	}
	if(segment[node].l!=0)
	{
		int tmp[13];
		for(i=0;i<12;i++)
		{
			tmp[i]=segment[node].a[i];
		}
		for(i=0;i<12;i++)
		{
			segment[node].a[i]=tmp[(i+segment[node].l)%12];
		}
		if(a!=b)
		{
			segment[2*node].l+=segment[node].l;
			segment[2*node+1].l+=segment[node].l;
		}
		segment[node].l=0;	
	}
	if(a>=f && b<=e)
	{	
		return segment[node].a[segment[node].l];
	}
	int p1=query(2*node,a,(a+b)/2,f,e);
	int p2=query(2*node+1,(a+b)/2+1,b,f,e);
	return max(p1,p2);
}


int main()
{
	fill(arr,-1);
	int n;
	si(n);
	int i,j,k;
	rep(i,n)
	{
		si(value[i]);
		per(value[i],i);
		//int p=per(value[i],i);
		//period[i]=p;
	}
	/*rep(i,n)
	{
		FOR(j,0,13)
		{
			cout<<arr[i][j]<<" ";
		}
		cout<<endl;
	}*/
	build_tree(1,0,n-1);
	int q;
	si(q);
	while(q--)
	{
		int chk;
		si(chk);
		if(chk==0)
		{
			int a,b,c;
			si(a);
			si(b);
			si(c);
			update_tree(1,0,n-1,a,b,c);
		}
		else
		{
			int a,b;
			si(a);
			si(b);
			printf("%d\n",query(1,0,n-1,a,b));
		}
	}
	return 0;
}
