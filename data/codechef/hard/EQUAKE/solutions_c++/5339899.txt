// Author: thecodekaiser
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>

using namespace std;
#define INF 1000000007

// Function : To rotate the number by the rotation_factor
int rotate(int i,int v)
{
	int n[4], c = 0, num = 0;
	while(i != 0)
	{
		n[c] = i % 10;
		i /= 10;
		c++;
	}
	for(int i = c-v-1; i >= 0; i--) num = num * 10 + n[i];
	for(int i = c-1; i > c-v-1; i--)num = num * 10 + n[i];
	return num;
} 
	

struct node
{
	int arr[12];
	int lazy;
};

#define MAXN 800010

node tree[4*MAXN];
int arr[MAXN];

void build(int Node, int l, int r)
{
	if(l > r)
		return;

	if(l == r)
	{
		if(arr[l] != 0)
		{
			int d = 0, n = arr[l];

			while (n != 0){ n /= 10; d++; }
			for (int j = 0; j < d; j++)  tree[Node].arr[j] =  rotate(arr[l],j);
			for (int j = d; j < 12; j++) tree[Node].arr[j] = tree[Node].arr[j%d];
		}
		else
			for(int j = 0; j < 12; j++)  tree[Node].arr[j] = 0;
		
		tree[Node].lazy = 0;
		return;
	}

	int left = 2 * Node, right = 2 * Node + 1, mid = (l+r)/2;

	build(left, l, mid);
	build(right, mid+1, r);

	for(int i = 0; i < 12; i++)
		tree[Node].arr[i] = max(tree[left].arr[i], tree[right].arr[i]);
}

void update(int Node, int value)
{
	value %= 12;
	int temp[12];
	for(int i = 0; i < 12; i++)
		temp[i] = tree[Node].arr[(i+value)%12];

	for(int i = 0; i < 12; i++)
		tree[Node].arr[i] = temp[i];

	return;
}

void update(int Node, int l, int r, int i, int j, int value)
{
	// This nodes needs to be updated
	if(tree[Node].lazy != 0)
	{
		update(Node, tree[Node].lazy);	// Node updated

		if(l != r)			// Not a leaf node
		{
			tree[2 * Node].lazy	+= tree[Node].lazy;
			tree[2 * Node + 1].lazy	+= tree[Node].lazy;
		}

		// Reset the flag of this node
		tree[Node].lazy = 0;	
	}

	if(l > r or r < i or j < l)
		return;

	// Segment fully in range
	if(i <= l and r <= j)
	{
		update(Node, value);
		
		if(l != r)
		{
			// Not a leaf node
			tree[2 * Node].lazy 	+= value;
			tree[2 * Node + 1].lazy	+= value;
		}
		return;
	}

	int left = 2 * Node, right = 2 * Node + 1, mid = (l+r)/2;

	update(left, l, mid, i, j, value);
	update(right, mid+1, r, i, j, value);

	for(int i = 0; i < 12; i++)
		tree[Node].arr[i] = max(tree[left].arr[i], tree[right].arr[i]);
}

int query(int Node, int l, int r, int i, int j)
{
	if(l > r or r < i or j < l)
		return -INF;

	if(tree[Node].lazy != 0)
	{
		update(Node, tree[Node].lazy);
	
		// If not a leaf
		if(l != r)
		{
			tree[2 * Node].lazy 		+= tree[Node].lazy;
			tree[2 * Node + 1].lazy 	+= tree[Node].lazy;
		}
		
		// reset it
		tree[Node].lazy = 0;
	}

	if(i <= l and r <= j)
		return tree[Node].arr[0];

	int left = 2 * Node, right = 2 * Node + 1, mid = (l+r)/2;

	int q1 = query(left, l, mid, i, j);
	int q2 = query(right, mid+1, r, i, j);

	int res = max(q1, q2);
	return res;
}


void solve()
{
	int N, M, cmd, L, R, val;

	scanf("%d",&N);
	for(int i = 0; i < N; i++)
		scanf("%d",&arr[i]);


	scanf("%d",&M);
	build(1, 0, N-1);
	
	for(int i = 0; i < M; i++)
	{
		scanf("%d %d %d",&cmd, &L, &R);
		if(cmd == 0)
		{
			scanf("%d",&val);
			update(1, 0, N-1, L, R, val);
		}
		else
		{
			int res = query(1, 0, N-1, L, R);
			printf("%d\n",res);
		}
	}

	return;
}

int main()
{
	solve();
	return 0;
}