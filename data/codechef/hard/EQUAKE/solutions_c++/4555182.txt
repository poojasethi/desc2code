#include <iostream>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#define maxn 800010
#define mid ((t[p].l+t[p].r)>>1)
#define ls (p<<1)
#define rs (ls|1)
using namespace std;
int A[maxn];
struct tree
{
int l,r;
int lazy;
int a[12];
}t[maxn<<2];
int getlen(int x)
{
int sum=0;
while(x)
{
sum++;
x/=10;
}
return sum;
}
int getnext(int x,int len)
{
int y=1;
for(int i=0;i<len;i++)
y*=10;
int tmp=x*10/y;
x=x*10+tmp-tmp*y;
return x;
}
void pushup(int p)
{
for(int i=0;i<12;i++)
t[p].a[i]=max(t[ls].a[i],t[rs].a[i]);
}
void change(int p,int val)
{
val%=12;
t[p].lazy+=val;
int b[12];
int num=0;
for(int i=val;i<12;i++)
b[num++]=t[p].a[i];
for(int i=0;i<val;i++)
b[num++]=t[p].a[i];
for(int i=0;i<12;i++)
t[p].a[i]=b[i];
}
void pushdown(int p)
{
if(t[p].lazy)
{
change(ls,t[p].lazy);
change(rs,t[p].lazy);
t[p].lazy=0;
}
}
void build(int p,int l,int r)
{
t[p].l=l,t[p].r=r,t[p].lazy=0;
if(l==r)
{
int len=getlen(A[l]);
t[p].a[0]=A[l];
for(int i=1;i<12;i++)
t[p].a[i]=getnext(t[p].a[i-1],len);
//for(int i=0;i<12;i++)
// printf("%d ",t[p].a[i]);
// printf("\n");
return;
}
build(ls,l,mid);
build(rs,mid+1,r);
pushup(p);
}
void modify(int p,int l,int r,int val)
{
if(t[p].l==l&&t[p].r==r)
{
change(p,val);
return;
}
pushdown(p);
if(l>mid)
modify(rs,l,r,val);
else if(r<=mid)
modify(ls,l,r,val);
else
{
modify(ls,l,mid,val);
modify(rs,mid+1,r,val);
}
pushup(p);
}
int query(int p,int l,int r)
{
if(t[p].l==l&&t[p].r==r)
{
return t[p].a[0];
}
pushdown(p);
if(l>mid)
return query(rs,l,r);
else if(r<=mid)
return query(ls,l,r);
else
return max(query(ls,l,mid),query(rs,mid+1,r));
}

int main()
{
//freopen("dd.txt","r",stdin);
int n,m;
scanf("%d",&n);
for(int i=0;i<n;i++)
scanf("%d",&A[i]);
build(1,0,n-1);
scanf("%d",&m);
for(int i=1;i<=m;i++)
{
int typ,l,r,f;
scanf("%d",&typ);
if(typ==0)
{
scanf("%d%d%d",&l,&r,&f);
modify(1,l,r,f);
}
else
{
scanf("%d%d",&l,&r);
printf("%d\n",query(1,l,r));
}
}
return 0;
}