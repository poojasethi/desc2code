#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

#define all(a) (a).begin(),(a).end()
#define pb push_back
#define sz(a) ((int)(a).size())
#define mp make_pair
#define fi first
#define se second

typedef pair<int,int> pint;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;


#define MAX_N 800005
#define left(i) ((i)<<1)
#define right(i) (left(i)+1)

int n,a[MAX_N],best[4*MAX_N][12],lazy[4*MAX_N];

int rotate(int a, int l) 
{
	if (l<10)
		return a;
	if (l<100)
		return (a/10)+10*(a%10);
	else if (l<1000)
		return (a/100)+10*(a%100);
	return (a/1000)+10*(a%1000);
}

void build(int i, int l, int r)
{
	lazy[i]=0;
	if (l==r)
	{
		best[i][0]=a[l];
		for (int j=1; j<12; j++)
			best[i][j]=rotate(best[i][j-1],a[l]);
		return;
	}
	build(left(i),l,(l+r)/2);
	build(right(i),(l+r)/2+1,r);
	for (int j=0; j<12; j++)
		best[i][j]=max(best[left(i)][j],best[right(i)][j]);
}

int t[12];

void move(int i, int f)
{
	for (int j=0; j<12; j++)
		t[j]=best[i][j];
	for (int j=0; j<12; j++)
		best[i][j]=t[(j+f)%12];
}

void lazyupd(int i, int l, int r)
{
	if (lazy[i])
	{
		move(i,lazy[i]);
		if (l!=r)
		{
			lazy[left(i)]=(lazy[left(i)]+lazy[i])%12;
			lazy[right(i)]=(lazy[right(i)]+lazy[i])%12;
		}
		lazy[i]=0;
	}
}

void update(int i, int l, int r, int sl, int sr, int f)
{
	lazyupd(i,l,r);
	if (l>sr||r<sl)
		return;
	if (l>=sl&&r<=sr)
	{
		lazy[i]=f;
		lazyupd(i,l,r);
		return;
	}
	update(left(i),l,(l+r)/2,sl,sr,f);
	update(right(i),(l+r)/2+1,r,sl,sr,f);
	for (int j=0; j<12; j++)
		best[i][j]=max(best[left(i)][j],best[right(i)][j]);
}

int get(int i, int l, int r, int sl, int sr)
{
	if (l>sr||r<sl)
		return 0;
	lazyupd(i,l,r);
	if (l>=sl&&r<=sr)
		return best[i][0];
	return max(get(left(i),l,(l+r)/2,sl,sr),get(right(i),(l+r)/2+1,r,sl,sr));
}

int main()
{
	scanf("%d",&n);
	for (int i=0; i<n; i++)
		scanf("%d",a+i);
	build(1,0,n-1);
	int q,t,a,b,c;
	scanf("%d",&q);
	while (q--)
	{
		scanf("%d",&t);
		if (!t)
		{
			scanf("%d %d %d",&a,&b,&c);
			update(1,0,n-1,a,b,c%12);
		}
		else
		{
			scanf("%d %d",&a,&b);
			printf("%d\n",get(1,0,n-1,a,b));
		}
	}
	return 0;
}
