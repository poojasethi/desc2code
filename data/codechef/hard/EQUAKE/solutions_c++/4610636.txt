#include <cstdio>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <stack>
#include <cmath>
#include <queue>
#include <string>
#include<climits>
#include<set>
#include<list>
#include<sstream>
#include <stdlib.h> 
using namespace std;

#define MOD 1000000007

inline void gi(int &x) {
	register int c = getchar();
	x = 0;
	int neg = 0;

	for (; ((c<48 || c>57) && c != '-'); c = getchar());

	if (c == '-') {
		neg = 1;
		c = getchar();
	}

	for (; c>47 && c<58; c = getchar()) {
		x = (x << 1) + (x << 3) + c - 48;
	}

	if (neg)
		x = -x;
}
inline void print(int a){ char s[20]; int i = 0; do{ s[i++] = a % 10 + '0'; a /= 10; } while (a); i--; while (i >= 0)putchar(s[i--]); putchar('\n'); }

struct node
{
	short int arr[12];
	int p;
};
int n, m, l, r, f, tp;
short int heights[8000001];
node ST[16000002];

//short int heights[40];
//node ST[900];

int q[10];
short int rotat(short int x, int rt)
{
	int xx = x, l = 0;
	while (xx>0) xx /= 10, l++;
	xx = x;
	for (int i = l - 1; i >= 0; i--) q[i] = xx % 10, xx /= 10;
	int res = 0;
	for (int i = rt; i<rt + l; i++)
		res = res * 10 + q[i%l];
	return res;

}

void buildST(int nd, int lft, int rgt)
{
	if (lft == rgt)
	{
		for (int i = 0; i < 12; i++)
		{
			ST[nd].arr[i] = rotat(heights[lft], i);
		}
		ST[nd].p = 0;
		return;
	}
	buildST(2 * nd + 1, lft, (lft + rgt) / 2);
	buildST(2 * nd + 2, (lft + rgt) / 2 + 1, rgt);
	for (int i = 0; i < 12; i++)
	{
		ST[nd].arr[i] = max(ST[2 * nd + 1].arr[i], ST[2 * nd + 2].arr[i]);
	}
	ST[nd].p = 0;

}
void updateST(int nd, int a, int b, int i, int j, int value)
{
	if (ST[nd].p != 0)
	{
		short int tmp[12];
		for (int k = 0; k < 12; k++)
		{
			tmp[k] = ST[nd].arr[k];
		}
		for (int k = 0; k < 12; k++)
		{
			ST[nd].arr[k] = tmp[(k + ST[nd].p) % 12];
		}
		if (a != b)
		{
			ST[2 * nd + 1].p = (ST[2 * nd + 1].p + ST[nd].p) % 12;
			ST[2 * nd + 2].p = (ST[2 * nd + 2].p + ST[nd].p) % 12;
		}
		ST[nd].p = 0;

	}
	if (b<i || a>j)
		return;
	if (a >= i&&b <= j)
	{
		ST[nd].p = value % 12;

		short int tmp[12];
		for (int k = 0; k < 12; k++)
		{
			tmp[k] = ST[nd].arr[k];
		}
		for (int k = 0; k < 12; k++)
		{
			ST[nd].arr[k] = tmp[(k + ST[nd].p) % 12];
		}

		if (a != b)
		{
			ST[2 * nd + 1].p = (ST[2 * nd + 1].p + ST[nd].p) % 12;
			ST[2 * nd + 2].p = (ST[2 * nd + 2].p + ST[nd].p) % 12;
		}
		ST[nd].p = 0;
		return;
	}
	updateST(2 * nd + 1, a, (a + b) / 2, i, j, value);
	updateST(2 * nd + 2, (a + b) / 2 + 1, b, i, j, value);
	for (int i = 0; i < 12; i++)
	{
		ST[nd].arr[i] = max(ST[2 * nd + 1].arr[i], ST[2 * nd + 2].arr[i]);
	}
}
short int queryST(int nd, int a, int b, int i, int j)
{
	if (ST[nd].p != 0)
	{
		short int tmp[12];
		for (int k = 0; k < 12; k++)
		{
			tmp[k] = ST[nd].arr[k];
		}
		for (int k = 0; k < 12; k++)
		{
			ST[nd].arr[k] = tmp[(k + ST[nd].p) % 12];
		}
		if (a != b)
		{
			ST[2 * nd + 1].p = (ST[2 * nd + 1].p + ST[nd].p) % 12;
			ST[2 * nd + 2].p = (ST[2 * nd + 2].p + ST[nd].p) % 12;
		}
		ST[nd].p = 0;
	}
	if (b<i || a>j)
		return -1;
	if (a >= i&&b <= j)
	{
		return ST[nd].arr[ST[nd].p];
	}
	return
		max(
		queryST(2 * nd + 1, a, (a + b) / 2, i, j), queryST(2 * nd + 2, (a + b) / 2 + 1, b, i, j));
}
int main()
{
	gi(n);
	for (int i = 0; i < n; i++)
	{
		cin >> heights[i];
	}
	buildST(0, 0, n - 1);
	gi(m);
	for (int i = 0; i < m; i++)
	{
		gi(tp); gi(l); gi(r);
		if (!tp)
		{
			gi(f);
			updateST(0, 0, n - 1, l, r, f);
		}
		else
		{
			cout << queryST(0, 0, n - 1, l, r) << "\n";
		}
	}
	//cin >> n;

}
