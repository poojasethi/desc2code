def minCost(n,c,m, p):
	if n == 1:
		return '0.000000000'
	
	if c.find('.') != -1:
		arr = c.split('.')
		ic = int(arr[0])
		while len(arr[1]) != 9:
			arr[1] = arr[1] + '0'
		fc = '0'+ '.' + arr[1]
		ccoeff = n-m-1
		tp = n*(n-1)
	else:
		ic = int(c)
		fc = '0.000000000'

	#print "ic : ", ic, "fc : ", fc
	
	mintpSpTree = 2*(n-1)* (n-1)
	mintp = n*(n-1)
	#minFlyCost = c*(n-m-1)
	twoDistinctEdges = False;

	if m == 0:
		tp = mintpSpTree
		minedges = n-1
		if ic <2: #fully connected graph
			tp = mintp
			ccoeff = (n*(n-1))/2
		elif ic >=2:
			tp = mintpSpTree
			ccoeff = n-1
	elif m == 1:
		tp = mintpSpTree
		minedges = n-2
		if ic < 2: #fully connected graph
			tp = mintp
			ccoeff = (n*(n-1))/2 - 1
		elif ic >=2:
			tp = mintpSpTree
			ccoeff = n-2
	else:
		#only one edge points are same
		if((p[0][0] == p[1][0] or p[0][0] == p[1][1]) and( p[0][1] == p[1][0] or p[0][1] == p[1][1])): 
			tp = mintpSpTree
			minedges = n-2
			if ic < 2: #fully connected graph
				tp = mintp
				ccoeff = (n*(n-1))/2 - 1
			elif ic >=2:
				tp = mintpSpTree
				ccoeff = n-2
		#two edges sharing one node 
		elif(p[0][0] == p[1][0] or p[0][0] == p[1][1] or p[0][1] == p[1][0] or p[0][1] == p[1][1]): 
			tp = mintpSpTree
			minedges = n-3
			if ic < 2: 
				tp = mintp
				ccoeff = (n*(n-1))/2 - 2
			elif ic >=2:
				tp = mintpSpTree
				ccoeff = n-3
		#two distinct edges
		else:
			minedges = n-3
			tp1 = 2*(n+1)*(n-2)
			ccoeff1 = n-3

			tp2 = mintpSpTree-2
			ccoeff2 = n-2
			
			if ic>=2*(n-2):
				tp = tp1
				ccoeff = ccoeff1
			else:
				tp = tp2
				ccoeff = ccoeff2
				if ic < 2:
					tp = mintp
					ccoeff = (n*(n-1))/2 -2
				elif ic >=2:
					tp = tp2
					ccoeff = ccoeff2
		
	#print "--------ic : ", ic, "fc : ", fc
	#print "--------tp : ", tp, "ccoeff : ", ccoeff
	
	itotal = ic* ccoeff + tp
	#print "itotal is ", itotal
	ftotal = int(fc[2:])
	#print "ftotal is ", ftotal
	
	ftotal = ftotal*ccoeff
	#print "ftotal 1 is ", ftotal
	fitotal = ftotal/1000000000
	itotal = itotal + fitotal
	#print "fitotap is ", fitotal
	ftotal = ftotal - fitotal*1000000000
	#print "11ftotap is ", fitotal
	#print "22ftotal is ", ftotal
	sf = "%s"%ftotal
	while len(sf)!=9:
		sf = '0' + sf
	si = "%s"%itotal
	return si + '.' + sf


		#itotal = itotal + fitotal
		
		#ftotal = fc*ccoeff
		#if ftotal >1:
		#	iftotal = int(ftotal)
		#	ftotal = ftotal - iftotal
		#	itotal = itotal + iftotal
		#a = "%d"%itotal
		#b = "%.9f"%ftotal
		#return a+b
		#return mintc1
if __name__ == "__main__":
	t = int(raw_input())
	for i in range(0,t):
		n = 0
		c = 0
		m = 0;
		s = raw_input()
		s = s.split(' ')
		n = int(s[0])
		c = s[1]
		m = int(s[2])
		l = []
		for k in range(0,m):
			s1 = raw_input()
			s1 = s1.split(' ')
			p1 = int(s1[0])
			p2 = int(s1[1])
			l.append((p1,p2))
			
		print minCost(n,c,m,l)
