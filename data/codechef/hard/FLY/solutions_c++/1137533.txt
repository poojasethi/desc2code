#include <iostream>
#include <cstdio>
#include <cstring>
#define LL long long int
using namespace std;
int M;
char strC[32];
LL n,P,F;

int Cint,Cdouble;
const int d = 9;
const int d10 = 1000000000;

void solve0()
{
    
    if(Cint>=2)
    {
        F = n-1;
        P = n-1 + (n-1)*(2*(n-2)+1);
        
    }
    else
    {
        F = (n*(n-1))/2;
        P = n*(n-1);
    }
}


void solve1()
{
    
    solve0();
    F--;
}

void solve2_CommonVertex()
{
    
    solve0();
    F-=2;
}


void solve2_DistinctVertices()
{
    

    if(Cint>=2*(n-2))
    {
        F = n-3;
        LL d1,d3,d4,rest;
        

        d1 = (n-2) + 2;
        
        d4 = 1 + 1 + 2*(n-3);
       
        d3 = 1 + 2 + (n-3)*3;
        
        rest = (n-3)*(1 + 3 + (n-3)*2);
        P = d1 + d3 + d4 + rest;
    }
    else if(Cint>=2)
    {
        F = n-2;
        LL d1,d34,rest;
        
        d1 = n-1;
        d34 = 2*(2*(n-3)+2);

        rest = (n-3)*(1+(n-2)*2);
        P = d1 + d34 + rest;
    }
    else
    {  
        F = (n*(n-1))/2 - 2;
        P = n*(n-1);
    }
}


void calcAns()
{
    
    LL C1;
    int C2;
    C1 = Cint;
    C2 = Cdouble;

    //Write F as F1*10^d + F2
    //Recall that F is long long
    LL F1;
    int F2;
    F1 = F/d10;
    F2 = F%d10;

    

    LL D1;
    int D2;
    D1 = (C2*(LL)F2)/d10;
    D2 = (C2*(LL)F2)%d10;
    LL ansIntPart = P + C1*F1*d10 + C2*F1 + C1*F2 + D1;
    LL ansDoublePart = D2;
    printf("%lld.%09d\n",ansIntPart,ansDoublePart);
}

void processC()
{
    Cint=0;//integral part of C
    Cdouble=0;//fractional part of C
    //It is ensured that Cdouble always has 9 digits
    int len=strlen(strC),i,d;
    for(i=0;i<len;i++)
    {
        if(strC[i]=='.')
            break;
        Cint*=10;
        Cint+=strC[i]-'0';
    }
    i++;
    for(d=0;i<len;i++,d++)
    {
        Cdouble*=10;
        Cdouble+=strC[i]-'0';
    }
    for(;d<9;d++)
    {
        Cdouble*=10;//Ensuring that Cdouble always has 9 digits
    }
    //Effectively C = Cint + Cdouble/(10^9)
   // printf("Check %d.%d\n",Cint,Cdouble);
}

int main()
{
    int t;
    scanf("%d",&t);
    int u1,v1,u2,v2;
    while(t>0)
    {
        scanf("%lld",&n);
        scanf("%s",strC);
        scanf("%d",&M);
       
        processC();

        

        switch(M)
        {
            case 0: solve0();//no free flyovers
                    break;
            case 1: scanf("%d%d",&u1,&v1);
                    solve1();//one free fly-over
                    break;
            case 2: scanf("%d%d",&u1,&v1);
                    scanf("%d%d",&u2,&v2);
                    if(u1>v1)
                        swap(u1,v1);//ensuring u1<v1
                    if(u2>v2)
                        swap(u2,v2);//ensuring u2<v2
                    if(u1==u2||v1==v2||u1==v2||v1==u2)//Common vertex?
                    {
                        solve2_CommonVertex();//2 edges with a common vertex
                    }
                    else
                    {
                        solve2_DistinctVertices();//2 disjoint edges
                    }
                    break;
        }
        calcAns();//Displaying in Correct format
        t--;
    }

    return 0;
}
