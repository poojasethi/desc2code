    #include <stdio.h>
    #include <iostream>
    #include <vector>
    #include <string>
    #include <algorithm>
    #include <cmath>
    #include <set>
    #include <map>
    #include <memory.h>
    #include <map>
    using namespace std;
    #define all(a) a.begin(), a.end()
    #define mp make_pair
    #define pb push_back
    typedef long long li;
    typedef double ld;
    #define FILE "change me!"
    void solve();
    bool f=true;
    //int timer=0;
    int main ()
    {
    #ifdef _DEBUG
    freopen ("in.txt", "r", stdin);
    freopen ("out.txt", "w", stdout);
    #else
    //freopen ("in.txt", "r", stdin);
    //freopen ("out.txt", "w", stdout);
    //freopen (FILE ".in", "r", stdin);
    //freopen (FILE ".out", "w", stdout);
    #endif
    int z=1;
    //ios_base::sync_with_stdio(false);
    cin>>z;
    while (z--)
    solve();
    return 0;
    }
     
    void do_exception()
    {
    int hhh=1, aaa=0;
    cout<<(hhh/aaa);
    }
     
    #define int li
     
    int n;
    int m;
    pair <int, int> cur[2];
     
    typedef vector <int> vi;
     
    vector <int> sum (vi q, vi w)
    {
    if (q.size()>w.size())
    swap (q, w);
    vi res(w.size()+1);
    for (int i=0; i<q.size(); i++)
    {
    res[i]+=q[i]+w[i];
    res[i+1]+=res[i]/10;
    res[i]%=10;
    }
    for (int i=q.size(); i<w.size(); i++)
    {
    res[i]+=w[i];
    res[i+1]+=res[i]/10;
    res[i]%=10;
    }
    if (res.size()==0)
    return res;
    if ( res[res.size()-1]==0 )
    res.pop_back();
    return res;
    }
     
    vi mul (vi q, int w)
    {
    vi res;
    if (!w)
    return res;
    int s=0;
    for (int i=0; i<q.size(); i++)
    {
    s+=q[i]*w;
    res.push_back(s%10);
    s/=10;
    }
    while (s)
    {
    res.push_back(s%10);
    s/=10;
    }
    return res;
    }
     
    int dom=0;
    int step=1;
     
    void print (vector <int> ans)
    {
    reverse (all(ans));
    for (int i=0; i<(int)ans.size()-dom; i++)
    cout<<ans[i];
    cout<<'.';
    for (int i=(int)ans.size()-dom; i<ans.size(); i++)
    cout<<ans[i];
    for (int i=dom; i<9; i++)
    cout<<"0";
    cout<<endl;
    }
     
    bool cmp (vi q, vi w)
    {
    if (q.size()<w.size())
    return true;
    if (q.size()>w.size())
    return false;
    for (int i=(int)q.size()-1; i>=0; i--)
    {
    if (q[i]<w[i])
    return true;
    if (q[i]>w[i])
    return false;
    }
    return false;
    }
     
    void solve()
    {
    cin>>n;
    string q;
    cin>>q;
    step=1;
    vector <int> now;
    dom=0;
    for (int i=0; i<q.size(); i++)
    {
    if (q[i]=='.')
    dom=q.size()-1-i;
    else
    now.push_back(q[i]-'0');
    }
    for (int i=0; i<dom; i++)
    step*=10;
    int ww=0;
    for (int i=0; i<now.size(); i++)
    ww=ww*10+now[i];
    ww--;
    ww/=step;
     
    reverse (all(now));
    //cout<<dom<<' '<<step<<endl;
     
    cin>>m;
    for (int i=0; i<m; i++)
    cin>>cur[i].first>>cur[i].second;
    bool flag=false;
    if (m==2 && (cur[0].first==cur[1].first || cur[0].first==cur[1].second || cur[0].second==cur[1].first || cur[0].second==cur[1].second))
    flag=true;
    if (n==1)
    {
    printf("0.000000000\n");
    return;
    }
     
     
    if ( ww<=1 )
    {
    int F=n; F*=(n-1); F/=2; F-=m;
    vector <int> ans=now;
    ans=mul(ans, F);
    int M=n; M*=n-1;
    vi res;
    while (M)
    res.push_back(M%10), M/=10;
    res=mul(res, step);
    ans=sum( ans, res );
    print (ans);
    return;
    }
    if (m<2 || flag)
    {
    int F=n-1; F-=m;
    vector <int> ans=now;
    ans=mul(ans, F);
    int M=n-1; M*=n-1; M*=2;
    vi res;
    while (M)
    res.push_back(M%10), M/=10;
    res=mul(res, step);
    ans=sum(ans, res);
    print(ans);
    return;
    }
     
    int F=n-2;
    vector <int> ans=now;
    ans=mul(ans, F);
    int M=2*n; M*=n-2;
    vi res;
    while (M)
    res.push_back(M%10), M/=10;
    res=mul(res, step);
    ans=sum(ans, res);
     
    //print(ans);
     
    F=n-3;
    vector <int> ans1=now;
    ans1=mul(ans1, F);
    M=2*n+2; M*=n-2;
    vi res1;
    while (M)
    res1.push_back(M%10), M/=10;
    res1=mul(res1, step);
    ans1=sum(ans1, res1);
     
    if ( cmp (ans1, ans) )
    ans=ans1;
     
    print(ans);
    } 