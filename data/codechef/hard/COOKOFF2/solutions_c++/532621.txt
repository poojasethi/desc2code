#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <iostream>
#include <cmath>
#include <algorithm>

#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>

using namespace std;

typedef long long ll;

int main(){
  int T;
  scanf("%d", &T);

  /*
  double comb2[101];
  for(int i = 2; i <= 100; i++)comb2[i] = i * (i-1) / 2.0;
  */


  double pr[110][110];

  pr[2][1] = 1;
  for (int i = 3; i < 110; ++i)
    for (int j = 1; j < i; ++j)
      pr[i][j] = (j*(j-1)*pr[i-1][j-1] + (i-j)*(i-j-1)*pr[i-1][j])/(i*(i-1));



  for(;T;T--){
    int n;
    int sum = 0;
    scanf("%d", &n);
    vector<int> prize(n);
    for(int i = 0; i < n; i++){
      scanf("%d", &prize[i]);
      sum += prize[i];
    }
    //sort(prize.begin(), prize.end());
    vector< vector<double> > dp(sum+1, vector<double>(n+1, 0));
    //dp[0][0] = 1;
    dp[prize[0]][1] = 1;
    for(int i = 1; i < n; i++){
      for(int j = sum; j >= 0; j--){
        for(int k = n; k >= 0; k--){
          if(dp[j][k] > 0){
            dp[j+prize[i]][k+1] += dp[j][k];
          }
        }
      }
    }
    double ans = 0;
    for(int i = 1; i < sum; i++){
      for(int j = 1; j < n; j++){
        if(dp[i][j] == 0)continue;
        /*
        double d = dp[i][j];
        int left = j;
        int right = n-j;
        int all = n;
        while(all > 1){
          while(d < 1 && left > 1)d *= left--;
          while(d < 1 && right > 1)d *= right--;
          d /= all--;
        }
        ans += d * abs(sum - i);
        */
        ans += abs(sum - 2*i) * dp[i][j] * pr[n][j];
      }
    }
    printf("%.6f\n", ans);
  }

  return 0;
}
