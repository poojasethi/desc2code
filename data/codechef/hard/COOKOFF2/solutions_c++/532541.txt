#pragma comment(linker, "/STACK:256000000")
#include <queue>
#include <stack>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <string>
#include <cmath>
#include <iomanip>
#include <ctime>
#include <vector>
#include <set>
#include <map>
#include <cassert>
using namespace std;

#ifdef shindo
const bool DEBUG = 1;
#else
const bool DEBUG = 0;
#endif

#define MAXN 111

double dp[2][MAXN][MAXN];
double c[MAXN][MAXN];
int a[MAXN];
int sum;

int main() {
#ifdef shindo
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  c[0][0] = 0;
  for(int i = 1; i < MAXN; i++) {
    for(int j = i; j < MAXN; j++) {
      if(i == 1) c[i][j] = j;
      else if(i == j) c[i][j] = 1;
      else c[i][j] = c[i][j - 1] + c[i - 1][j - 1];
    }
  }
  int t; 
  for(scanf("%d", &t); t--;) {
    int n; scanf("%d", &n);
    sum = 0;
    for(int i = 0; i < n; i++) {
      scanf("%d", &a[i]);
      sum += a[i];
    }
    sort(a, a + n);
    memset(dp, 0, sizeof dp);
    int turn = 0;
    double ret = 0;
    dp[0][0][0] = 1;
    for(int cnt = 0; cnt < n; cnt++) {
      double add = 0;
      for(int s = 0; s < sum; s++) {
	for(int last = 0; last < n; last++) {
	  dp[turn ^ 1][s + a[last]][last + 1] += dp[turn][s][last];
	  dp[turn][s][last + 1] += dp[turn][s][last];
	}
	if(cnt && s && dp[turn][s][n]) {
	  add += dp[turn][s][n] * fabs(2 * s - sum) / (double)(n - 1);
	}
      }
      if(cnt) {
	add /= c[cnt][n];
	ret += add;
      }
      memset(dp[turn], 0, sizeof dp[turn]);
      turn ^= 1;
    }
    printf("%.6lf\n", ret);
  }
}


