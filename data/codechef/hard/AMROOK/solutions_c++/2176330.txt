#include <cstdio>
#include <cassert>

const int MOD = 10007;
int cn;
int pr[MOD];

int z[MOD];
int factr[MOD];

int modpow(int a, int b, int mod) {
  int ret = 1;
  while (b > 0) {
    if (b & 1) ret = ret * a % mod;
    a = a * a % mod;
    b >>= 1;
  }
  return ret;
}

int fact(long long n, int p, long long & zeros) {
  zeros = 0;
  int ret = 1;
  while (n > 0) {
    int z = factr[n % p];
    long long bl = n / p;
    if (bl & 1) z = (z - p) % p;
    ret = ret * z % p;
    n = bl;
    zeros += n;
  }
  return ret;
}

int cc(long long n, long long k) {
  if (k < 0 || k > n) return 0;
  long long z1 = 0;
  long long z2 = 0;
  long long z3 = 0;
  int m1 = fact(n, MOD, z1);
  int m2 = fact(n - k, MOD, z2);
  int m3 = fact(k, MOD, z3);
  if (z1 - z2 - z3 > 0) return 0;
  assert(z1 - z2 - z3 == 0);
  return m1 * modpow(m2, MOD - 2, MOD) % MOD * modpow(m3, MOD - 2, MOD) % MOD;
}

int cat(long long n, long long k) {
  if (k > n) {
    return 0;
  }
  long long z1 = 0;
  long long z2 = 0;
  long long z3 = 0;
  int m1 = fact(n + k, MOD, z1);
  int m2 = fact(n, MOD, z2);
  int m3 = fact(k, MOD, z3);
  int m4 = (n - k + 1) % MOD;
  long long mm = n - k + 1;
  int z4 = 0;
  while (mm % MOD == 0) {
    mm /= MOD;
    z4++;
  }
  int m5 = (n + 1) % MOD;
  int z5 = 0;
  mm = n + 1;
  while (mm % MOD == 0) {
    mm /= MOD;
    z5++;
  }
  if (z1 - z2 - z3 + z4 - z5 > 0) return 0;
  assert(z1 - z2 - z3 + z4 - z5 == 0);
  return m1 * modpow(m2, MOD - 2, MOD) % MOD * modpow(m3, MOD - 2, MOD) % MOD * m4 % MOD * modpow(m5, MOD - 2, MOD) % MOD;
}

void solve() {
  long long r, c, n;
  scanf("%lld %lld %lld", &r, &c, &n);
  int ans = cc(n + r - 1, r - 1) * cc(n + c - 1, c - 1) % MOD;
  ans = (ans + MOD - cat(r, n) * cat(c, n) % MOD) % MOD;
  printf("%d\n", ans);
}

int main() {
  factr[0] = 1;
  for (int i = 1; i < MOD; i++) factr[i] = factr[i - 1] * i % MOD;
  int t;
  scanf("%d", &t);
  for (int i = 0; i < t; i++) solve();
}
