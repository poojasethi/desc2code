#include <iostream>
#include <cassert>
using namespace std;

typedef long long ll;

ll mod = 10007;

ll mpow(ll a, ll r) {
	if (r == 0)
		return 1;
	ll res = mpow(a, r >> 1);
	res *= res;
	res %= mod;
	if (r & 1ll) {
		res *= a;
		res %= mod;
	}
	return res;
}

ll inv(ll a) {
	return mpow(a, mod - 2);
}

ll fact[10007], ifact[10007];
void pre() {
	fact[0] = fact[1] = ifact[0] = ifact[1] = 1;
	for (ll i = 2; i <= 10006; i++) {
		fact[i] = fact[i - 1] * i;
		fact[i] %= mod;
		ifact[i] = ifact[i - 1] * inv(i);
		ifact[i] %= mod;
	}
}

ll _choose(ll n, ll r) {
	if (n < r)
		return 0;
	if (r < 0)
		return 0;
	ll res = fact[n];
	res *= ifact[r];
	res %= mod;
	res *= ifact[n - r];
	res %= mod;
	return res;
}

ll choose(ll n, ll r) {
	if (n < mod && r < mod)
		return _choose(n, r);
	ll res = choose(n / mod, r / mod);
	res *= _choose(n % mod, r % mod);
	res %= mod;
	return res;
}

ll ballot(ll p, ll q) {
	if (q > p)
		return 0;
	ll res = choose(p + q, q);
	res -= choose(p + q, q - 1);
	res += mod;
	res %= mod;
	return res;
}

int main() {
	pre();
	int T;
	cin >> T;
	assert(1 <= T && 1000 >= T);
	while (T--) {
		ll N, R, C;
		cin >> R >> C >> N;
		assert(1 <= R && 1000000000000000ll >= R);
		assert(1 <= C && 1000000000000000ll >= C);
		assert(1 <= N && 1000000000000000ll >= N);
		ll res = choose(N + R - 1, N);
		res *= choose(N + C - 1, N);
		res %= mod;
		ll loss = ballot(R, N) * ballot(C, N);
		loss %= mod;
		res -= loss;
		res += mod;
		res %= mod;
		cout << res << endl;
	}
	return 0;
}
