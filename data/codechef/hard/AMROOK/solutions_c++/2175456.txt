#include <algorithm>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

template<int MOD = 10007> struct ModInteger {
	int x;
	ModInteger(int x = 0) : x(x) {}
	int getValue() { return x; }
	void operator = (const int v) { x = v; }
	ModInteger operator + (const int v) { return ModInteger(x >= MOD - v ? x - MOD + v : x + v); }
	ModInteger operator + (const ModInteger &rhs) { return ModInteger(x >= MOD - rhs.x ? x - MOD + rhs.x : x + rhs.x); }
	void operator += (const int v) { x = x >= MOD - v ? x - MOD + v : x + v; }
	void operator += (const ModInteger &rhs) { x = x >= MOD - rhs.x ? x - MOD + rhs.x : x + rhs.x; }
	ModInteger operator - (const int v) { return ModInteger(x < v ? x - v + MOD : x - v); }
	ModInteger operator - (const ModInteger &rhs) { return ModInteger(x < rhs.x ? x - rhs.x + MOD : x - rhs.x); }
	void operator -= (const int v) { x = x < v ? x - v + MOD : x - v; }
	void operator -= (const ModInteger &rhs) { x = x < rhs.x ? x - rhs.x + MOD : x - rhs.x; }
	ModInteger operator * (const int v) { return ModInteger(x * v % MOD); }
	ModInteger operator * (const ModInteger &rhs) { return ModInteger(x * rhs.x % MOD); }
	void operator *= (const int v) { x = x * v % MOD; }
	void operator *= (const ModInteger &rhs) { x = x * rhs.x % MOD; }
	ModInteger operator ^ (int e) { ModInteger res = 1, a = *this; for ( ; e; e >>= 1, a *= a) if (e & 1) res *= a; return res; }
	void operator ^= (int e) { ModInteger res = 1, a = *this; for ( ; e; e >>= 1, a *= a) if (e & 1) res *= a; x = res.x; }
	ModInteger operator / (const int v) { return ModInteger(x * (ModInteger(v) ^ (MOD - 2)).getValue() % MOD); }
	ModInteger operator / (const ModInteger &rhs) { ModInteger a = rhs; return ModInteger(x * (a ^ (MOD - 2)).getValue() % MOD); }
	void operator /= (const int v) { x = x * (ModInteger(v) ^ (MOD - 2)).getValue() % MOD; }
	void operator /= (const ModInteger &rhs) { ModInteger a = rhs; x = x * (a ^ (MOD - 2)).getValue() % MOD; }
};

const int MOD = 10007;

ModInteger<> fact[MOD];
long long R, C, N;

void init() {
	fact[0] = 1;
	FOR(i, 1, MOD) fact[i] = fact[i - 1] * i;
}

ModInteger<> comb(long long n, long long r) {
	ModInteger<> res = 1;
	while (n && r) {
		int x = n % MOD, y = r % MOD;
		if (x < y) return ModInteger<>(0);
		res = res * fact[x] / fact[y] / fact[x - y];
		n /= MOD;
		r /= MOD;
	}
	return res;
}

int main() {
	init();
	int taskNumber;
	scanf("%d", &taskNumber);
	for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
		scanf("%lld%lld%lld", &R, &C, &N);
		ModInteger<> res = comb(N + R - 1, N) * comb(N + C - 1, N);
		if (N <= min(R, C)) {
			res -= (comb(N + R, N) - comb(N + R, N - 1)) * (comb(N + C, N) - comb(N + C, N - 1));
		}
		printf("%d\n", res.getValue());
	}
	return 0;
}