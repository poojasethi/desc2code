#include<cmath>
#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
#define MODULO 10007
void printvector(const char *s,vector<int> &vec,int n)
{
	printf("%s %d:\n",s,n);
	for(int i=0;i<vec.size();i++)
		printf("%d ",vec[i]);
	printf("\n");
	return ;
}
template<class T=int,class T1=long long>
class Big_nCr
{
	private:
	vector< T > fact;
	vector< T > inv_fact;
	T prime;
	public:
	Big_nCr(T _prime)
	{
		prime=_prime;
		fact.resize(prime+2);
		inv_fact.resize(prime+2);
		fact[0]=1;
		for(int i=1;i<prime;i++)
		{
			fact[i]=fact[i-1]*i;
			if(fact[i]>=prime)
				fact[i]%=prime;
		}
		cal_inv_fact();


	}
	 T _pwr(T a,T p)
	{
		if(p==0)
			return 1;
		T x=_pwr(a,p/2);
		x=(x*x)%prime;
		if(p&1)
			return (a*x)%prime;
		else
			return x;
	}
	 void print(int l)
	 {
		 printf("inverse fact:\n");
		 for(int i=1;i<=l;i++)
			 printf("%d ",inv_fact[i]);
		 printf("\n factorial :\n");
		 for(int i=1;i<=l;i++)
			 printf("%d ",fact[i]);
		 printf("\n");
		 return ;

	 }
	void cal_inv_fact()
	{
		inv_fact[0]=1;
		inv_fact[1]=1;
		for(int i=2;i<prime;i++)
		{
			inv_fact[i]=inv_fact[i-1]*_pwr(i,prime-2);
			if(inv_fact[i]>=prime)
				inv_fact[i]%=prime;
		}
		return ;
	}
	T NchooseR(T1 n,T1 r)
	{
		vector<T> N_inbasep;
		vector<T> R_inbasep;
		T1 x1=n,x2=r;
		while(x1)
		{
			N_inbasep.push_back(x1%prime);
			x1=x1/prime;

		}
		while(x2)
		{
			R_inbasep.push_back(x2%prime);
			x2=x2/prime;
		}
		int size_diff=N_inbasep.size()-R_inbasep.size();
		while(size_diff)
		{
			if(size_diff<0)
			{
				size_diff++;
				N_inbasep.push_back(0);
			}
			else
			{
				size_diff--;
				R_inbasep.push_back(0);
			}

		}
	//	printvector("N_inbasep",N_inbasep,n);
	//	printvector("R_inbasep",R_inbasep,r);
		int s_ize=N_inbasep.size();
		T ans;
		T N,R,N_R;
		N=N_inbasep[0];
		R=R_inbasep[0];
		N_R=N-R;
	
//		printf("hi");
		if(R>N)
		{
//			printf("hi");
			N_inbasep.clear();
			R_inbasep.clear();
			return 0;
		}
		ans=(((fact[N]*inv_fact[R])%prime)*inv_fact[N_R])%prime;
//		printf("ans : %d ",ans);
		for(int i=1;i<s_ize;i++)
		{
			N=N_inbasep[i];
			R=R_inbasep[i];
			N_R=N-R;
			if(R>N)
			{
				N_inbasep.clear();
				R_inbasep.clear();
				return 0;
			}
			ans=ans*fact[N];
			if(ans>=prime)
				ans%=prime;
			ans=ans*inv_fact[R];
			if(ans>=prime)
				ans%=prime;
			ans=ans*inv_fact[N_R];
			if(ans>=prime)
				ans%=prime;
			if(!ans)
			{
				N_inbasep.clear();
				R_inbasep.clear();
				return 0;
			}

		}
		N_inbasep.clear();
		R_inbasep.clear();
		return ans;

}


};
int main()
{
 
	Big_nCr <int,long long> object(10007);
//	object.print(10);
	int testCases,res0,res1,res2,res_2,res3,res_3,res4,res_4;
	scanf("%d",&testCases);
	long long R,C,N;
	while(testCases--)
	{
		scanf("%lld%lld%lld",&R,&C,&N);
		res1=object.NchooseR(R+N-1,N),res0=object.NchooseR(C+N-1,N);
	//	printf("res1 = %d ,res0=%d \n",res1,res0);
		res1=res1*res0;
		if(res1>=10007)
			res1%=10007;
		if(N<=min(C,R))
		{
		res2=object.NchooseR(R+N,N),res_2=object.NchooseR(R+N,N-1);
//		res2=res2-res_2;
	//	printf("res2=%d res_2=%d\n",res2,res_2);
		res2=res2-res_2;
		if(res2<0)
			res2+=10007;
		res3=object.NchooseR(C+N,N),res_3=object.NchooseR(C+N,N-1);
	//	printf("res3=%d ,res_3=%d\n",res3,res_3);
		res3=res3-res_3;
		if(res3<0)
			res3+=10007;
		res2=res2*res3;
		if(res2>=10007)
			res2%=10007;
		res1=res1-res2;
		if(res1<0)
			res1+=10007;
		}
		printf("%d\n",res1);


	}
return 0;
}
