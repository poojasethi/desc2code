#include<string>
#include<iostream>
#include<sstream>
#include<assert.h>
#include<cstdio>
#include<map>
#include<algorithm>
#include<bitset>
#include<cmath>
#include<queue>
#include<functional>
#include<set>
#include<stack>
#include<cstdlib>
#include<cstring>


using namespace std;

//=========================================================
// program:
//
long long fact[100001];

const int MOD = 1000000007;
int solve(int N, int M)
{
    long long F[N+1];
    long long acum[N+1];
    for (int i=0; i<=M; i++) {
        F[i] = 1;
    }
    F[M+1] = M;
    acum[0] = 0;
    for (int i=1; i<=M+2; i++) {
        acum[i] = (acum[i-1] + F[i-1]) % MOD;
    }
    
    //F[X] gives the number of ways to solve AFTER the first M colors have
    //been picked.
    
    for (int m=M+2; m<=N; m++) {/*
        F[m] = 0;
        //the M first color have been picked. What can we do for
        // the (M+1)-th color?
        // a) we can pick the first color of the M picked, this means that the
        //    M colors starting after color 1 are completely different.
        //    
        F[m] += F[m - 1];
        // else we can pick a different color than the first.
        // we will then be forced to pick the first in the following position.
        F[m] += ( (m - 1) * F[m - 2] ) % MOD;
        
        F[m] %= MOD;*/
        //F[m] = sum (F[m - 1], ... F[m - M] );
        F[m] = (acum[m] - acum[m - M] + MOD) % MOD;
        acum[m+1] = (F[m] + acum[m]) % MOD; 
    }
    
    long long res = 0;
    for (int i=1; i<=M; i++) {
        /*if (N == 6) {
            cout<<i<<" = "<<( fact[M] * (M - i +1) ) <<endl;
        }*/
        res += (F[N-i] *  ( (fact[M] * (M - i + 1) )%MOD ) ) % MOD;
    }
    
    return res % MOD;
}

void init()
{
    fact[0] = 1;
    for (int i=1; i<=100000; i++) {
        fact[i] = (fact[i-1]*i) % MOD;
    }
}
//=========================================================
// I/O:
//
int main()
{
    init();
    int NumCases; cin>>NumCases;
    for (int _i=1;_i<=NumCases;_i++)
    {
        int N, M;
        cin >> N >> M;
        cout << solve(N, M) <<endl;
        
    }
    return 0;
}
