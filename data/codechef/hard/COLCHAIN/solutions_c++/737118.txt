#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define for1(i, n) for(int i = 1; i <= int(n); ++i)
#define ford(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define X first
#define Y second
#define mp make_pair
#define debug(x) {cerr << #x << " = " << x << endl;}
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)1E9 + 7;
const ld EPS = 1E-9;
const ld PI = 3.1415926535897932384626433832795;

const int mod = 1000000000+7;
const int NMAX = 210000;

int res[NMAX], sum[NMAX], f[NMAX];

void init(){
    f[0] = 1;
    fore(i, 1, NMAX)
        f[i] = (f[i-1] * 1LL * i) % mod;
}

int main() {
    #ifdef myproject
    freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);
    #endif

    init();

    int t;
    cin >> t;
    forn(ti, t){    
        int n, m;
        cin >> n >> m;

        memset(res, 0, sizeof res);
        memset(sum, 0, sizeof sum);

        res[m] = f[m];
        for1(add, m-1)
            res[m+add] = ((m-add) * 1LL * f[m]) % mod;

        sum[m] = res[m];
        fore(i, m+1, n+m){
            res[i] = ((res[i] + li(sum[i-1]) - sum[i-1-m]) % mod + mod) % mod;
            sum[i] = (sum[i-1] + res[i]) % mod;
        }

        int ans = res[n];
        for1(i, m-1){
            if(n-i >= m)
                ans = (ans + res[n-i] * 1LL * (m-i)) % mod;
            else
                ans = (ans + f[m] * 1LL * (m-i)) % mod;
        }

        cout << ans << endl;
    }

    return 0;
}

