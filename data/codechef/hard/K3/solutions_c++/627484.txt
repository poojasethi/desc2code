// Prepend this entire file to main when ready to submit.

#ifndef PROGRAMMING_CONTESTS_H
#define PROGRAMMING_CONTESTS_H

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <typeinfo>
#include <utility>
using namespace std;

typedef long long LL;

#define RI(x) scanf("%i", &(x))
#define RLL(x) scanf("%lli", &(x))
#define RS(x) char _buf[2000]; scanf("%s", _buf); x = string(_buf)
#define RL(x) getline(cin, x) //Consumes and discards line break at end. scanf does not do this.
#define FIN(path) freopen(path, "r", stdin)
#define FOUT(path) freopen(path, "w", stdout)

#define FOR(i, a, b) for(int i=(a), _b=(b); i<_b; ++i)
#define FORR(i, a, b) for(int i=(b-1), _a=(a); i>=_a; --i)
#define IT(c) typeof(c.begin())
#define FORE(it, c) for(IT(c) it=c.begin(); it!=c.end(); ++it)
#define ALL(x) x.begin(), x.end()

#define PB push_back
#define MP make_pair
#define SZ(c) ((int)c.size())
#define LEN(a) (sizeof(a)/sizeof(a[0]))
#define END(a) (a+LEN(a))

#define TWO(e) (1<<e)
#define TWOL(e) (1LL<<e)


static const double PI = acos(-1.0);
static const double GOLD = (1+sqrt(5.0))/2;














template<typename T> inline T sqr(const T& x){return x*x;}
inline double dist(const double& x0, const double& y0, const double& x1, const double& y1){return sqrt(sqr(x0-x1)+sqr(y0-y1));}


// Requires that type of v is the type that a contains.
template <typename A, typename V>
static void fillArray(A &a, const V &v) {
  fill((V*)a, (V*)a+sizeof(a)/sizeof(V), v);
}

template<typename T, size_t N>
static bool aLessThan(T (&a)[N], T (&b)[N]) {
  for(int i=0;i<N;++i) {
    if(a[i]<b[i]) return true;
    if(a[i]>b[i]) return false;
  }
  return false;
}

// Pieces which are the empty string are dropped.
static void split(const string &s, vector<string> &pieces, const string &delim = " ") {
  unsigned int nextI = 0;
    for(unsigned int cutAt = s.find(delim,nextI); cutAt != s.npos; cutAt = s.find(delim,nextI)) {
         if(cutAt > nextI) pieces.push_back(s.substr(nextI,cutAt-nextI));
         nextI = cutAt+delim.length();
    }
    if(nextI < s.length()) {
         pieces.push_back(s.substr(nextI));
  }
}

static string toLower(const string& s) {
  string t = s;
  transform(s.begin(), s.end(), t.begin(), (int (*)(int))tolower);
  return t;
}
static string toUpper(const string& s) {
  string t = s;
  transform(s.begin(), s.end(), t.begin(), (int (*)(int))toupper);  
  return t;
}



static bool isLetter(const char& c) {
  char d = tolower(c);
  return d >= 'a' && d <= 'z';
}
static bool isVowel(const char& c) {
  char d = tolower(c);
  return d=='a'||d=='e'||d=='i'||d=='o'||d=='u'||d=='y';
}
static bool isConsonant(const char& c) {
  return isLetter(c) && !isVowel(c);
}






























// Stuff for debugging.

static void sleep(const int ms) {
    clock_t goal = ms + clock();
    while (goal > clock());
}

template<typename T>
static void print(T x) {
  cout << x << endl;
}

template<typename T>
static void print(T first, const T &last) {
  while(first != last) cout << *(first++) << " ";
  cout << endl;
}

template<typename T, size_t LENGTH>
static void print(const T (&a)[LENGTH]) {
  print(a,a+LENGTH);
}

template<typename T, size_t LENGTH0, size_t LENGTH1>
static void print(const T (&a)[LENGTH0][LENGTH1]) {
  for(int i = 0; i < LENGTH0; ++i) {
    print(a[i]);
  }
}

static double timer() {
  return 1.0*clock()/CLOCKS_PER_SEC;
}

#endif // PROGRAMMING_CONTESTS_H



// Efficient representation of an array in which index i
// can be assigned values 0,...,2^baB[i]-1. Thus baB[i]
// is the number of bits to represent index i.
//MODIFY///////////////////////////////////////////////////////
typedef int baT; static const size_t baLen = 8*sizeof(baT);
static const baT baB[baLen] = {7,7,7};
///////////////////////////////////////////////////////////////
static baT baP[baLen] = {0}; // index i is 2^baB[i]-1
static int baS[baLen] = {0}; // index i is starting bit of ith value
static baT baMax = 0;

// Sets value of index i to v.
static inline void baSet(baT& s, const int& i, const baT& v) {
  assert(v >= 0 && v <= baP[i]);
  s &= (~(baP[i] << baS[i])); // Set bits for ith value to 0.
  s |= (v << baS[i]); // Set bits for ith value to v.
}

// RETURNS: Value of index i.
static inline baT baGet(const baT& s, const int& i) {
    return (s >> baS[i]) & baP[i];
}

static baT baMake(const baT& a = 0, const baT& b = 0, const baT& c = 0, const baT& d = 0) {
  baT res = 0;
  baSet(res,0,a); baSet(res,1,b); baSet(res,2,c); baSet(res,3,d);
  return res;
}

// Swap values of indices i and j.
static void baSwap(baT& s, const int& i, const int& j) {
  baT temp = baGet(s,i);
  baSet(s,i,baGet(s,j));
  baSet(s,j,temp);
}

static void baPrint(const baT& s) {
  cout << "(";
  int i = 0;
  while(true) {
    cout << baGet(s,i++);
    if(i == baLen || baB[i] == 0) break;
    cout << ",";
  }
  cout << ")" << endl;
}

static int _baInit() {
  int bits = 0;
  for(int i = 0; i < baLen; ++i) {
    bits += baB[i];
    baP[i] = (((baT)1)<<baB[i])-1;
    if(i+1<baLen) baS[i+1] = baS[i]+baB[i];
    baSet(baMax,i,baP[i]);
  }
  assert(bits <= baLen);
  return 0;
} static int __baInit = _baInit();














int M,N,X;
string mapp[105];




typedef baT State;
typedef int Cost;
const Cost INF = 1000000000;
const State NONE = numeric_limits<State>::min();
const int MAX_SUCCS = 10;

bool isGoal(const State &s) {
  return baGet(s,2) == X;
}

static int dr[] = {0,1,0,-1};
static int dc[] = {-1,0,1,0};
State succs[MAX_SUCCS+1] = {NONE};
Cost costs[MAX_SUCCS+1];
void getSuccs(const State& curr) {
  int i = 0;
  int r = baGet(curr,0);
  int c = baGet(curr,1);
  int x = baGet(curr,2);
  if(x < X) {
    FOR(j,0,4) {
      int rr = r+dr[j];
      int cc = c+dc[j];
      if(rr>=0&&rr<=M&&cc>=0&&cc<=N&&mapp[rr][cc]!='#') {
        char tile = mapp[rr][cc];
        State succ = baMake(rr,cc,x);
        if(tile>='0' && tile<='9') baSet(succ,2,x+tile-'0');
        succs[i++]=succ;
      }
    }
  }
  succs[i] = NONE;
}








//RETURNS: Cost of path from start to a goal state or INF if no such path exists.
bool* enqueued = new bool[baMax+1];
Cost* costsFromStart = new Cost[baMax+1]; //map<State,Cost> costsFromStart;
State* prev = new State[baMax+1]; //map<State,State> prev;
Cost maxCost = -1;
vector<State> path;

Cost bfs(State start) {
  memset(enqueued,0,sizeof(bool)*(baMax+1));
  queue<State> q;
  q.push(start);
  enqueued[start] = true;
  costsFromStart[start] = 0;
  prev[start] = NONE;
  while(!q.empty()) {
    const State& curr = q.front();
    const Cost& currCost = costsFromStart[curr];
    if(isGoal(curr)) {
      //path = makePath(curr,prev,path);
      return currCost;
    }

    getSuccs(curr);
    for(int i = 0; succs[i] != NONE; ++i) {
      const State& succ = succs[i];
      if(!enqueued[succ]) { //if(costsFromStart.count(succ) == 0) {
        q.push(succ);
        enqueued[succ] = true;
        costsFromStart[succ] = currCost+1;
        prev[succ] = curr;
      }
    }

    q.pop();
    if(q.empty()) maxCost = currCost;
  }
  return INF;
}








int main() {
  //FIN("input.txt");
  //double start = timer();
  int t; RI(t);
  FOR(test,0,t) {
    int sr = -1, sc = -1;
    RI(M); RI(N);
    FOR(i,0,M+1) {
      RS(mapp[i]);
      int temp = mapp[i].find("*");
      if(temp != string::npos) {
        sr = i;
        sc = temp;
      }
    }
    RI(X);
    int res = bfs(baMake(sr,sc));
    printf("%i\n",res==INF?-1:res);
  }
  //cout << timer()-start << endl;
  return 0;
}
