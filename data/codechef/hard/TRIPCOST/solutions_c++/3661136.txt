#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <cmath>
#include <sstream>
#include <set>
#include <utility>
#include <queue>
#include <cassert>
#include <ctime>
using namespace std;

#define PB push_back
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long

#define MAX 100005
int n, D, di[MAX], ci[MAX], cost, L;

bool check()
{
  queue <Long> que;
  Long dist = 0;
  ITR(i, 1, n+1) {
    dist += di[i];
    if(dist > D)
      return false;
    if(ci[i] <= cost || i == n) {
      que.push(dist);
      dist = 0;
    }
  }

  dist = que.front();
  que.pop();
  int l = L;
  while(!que.empty()) {
    Long tmp = que.front();
    que.pop();
    if(dist + tmp > D) {
      l--;
      dist = tmp;
    }
    else
      dist += tmp;
  }
  l--;

  return (l >= 0);
}

int MAIN()
{
  int dist = di[1];
  L = 0;
  ITR(i, 1, n) {
    if(dist + di[i+1] > D) {
      dist = di[i+1];
      L++;
    }
    else
      dist += di[i+1];
  }
  L++;

  int lo = 1, hi = MAX;
  while(lo <= hi) {
    if(lo == hi)
      return lo;
    if(lo+1 == hi) {
      cost = lo;
      if(check())
        return lo;
      else
        return hi;
    }

    int mid = (hi+lo) / 2;
    cost = mid;
    if(check())
      hi = mid;
    else
      lo = mid;
  }
}

int main()
{
  int t;
  scanf("%d", &t);

  while(t--) {
    scanf("%d%d", &n, &D);
    ITR(i, 1, n+1)
      scanf("%d%d", &di[i], &ci[i]);

    printf("%d %d\n", L, MAIN());
  }
  return 0;
}
