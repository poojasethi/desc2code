/*	Template by
	Ashwin Kumar
	IIT Delhi */
#include<algorithm>		//min(), max(), reverse(), sort(), next_permutation(), prev_permutation(), swap()
						//make_heap(), pop_heap(), push_heap(), sort_heap()
#include<iostream>
#include<cassert>		//assert()
#include<cmath>			//cos(in radians), sin(), tan(), acos(), asin(), atan(), modf(break into frac and inte parts)
						//log(), log10(), log2(), pow(), sqrt(), cbrt(), ceil(), floor(), fmod(), abs()  
#include<cstdio>		//fclose(), fopen(), fprintf(), fscanf(), printf(), scanf(), gets(), puts()
#include<cstdlib>		//srand(time(NULL)), rand(), itoa(), malloc(), free()
#include<cstring>		//memcpy(), strcpy(), strcat(), strcmp(), memset(), strlen(), strtok(), strrchr()
#include<sstream>
#include<string>		//to_string(any numerical value), stoi(), stoll()
#include<ctime>   
#include<deque>			//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back() 
						//modifiers: push_back(), push_front(), pop_back(), pop_front(), erase(), clear()
#include<list>			//begin(), end(), push_back(), pop_back()
#include<map>			//begin(), end(), rbegin(), rend(), operator[], at(), clear(), find()
						//priority_queue:  top(), push(), pop()
#include<queue>			//front(), back(), push(), pop()
#include<set>			//begin(), end(), rbegin(), rend(), insert(), erase(), clear(), find()
#include<stack>			//top(), push(), pop()
#include<vector>		//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back()
						//modifiers: push_back(), pop_back(), erase(), clear() 
using namespace std;
 
typedef long long LL;
typedef pair<int, int> pii;
#define MAX 100000
#define INF 1000000
#define MOD 1000000007

int DI[MAX+1];
int CI[MAX+1];
LL combinedC[MAX+1];
LL combinedD[MAX+1];

int compute(int C, int D, int N)
{
	int j = 0;
	LL sumCI = 0, sumDI = 0;
	for (int i = 0; i < N; i++)
	{
		sumCI += (LL)CI[i+1];
		sumDI += (LL)DI[i+1];
		if (CI[i+1] <= C)
		{
			combinedC[j+1] = sumCI;
			combinedD[j+1] = sumDI;
			j++;
			sumCI = 0;
			sumDI = 0;
		}
	}
	if (sumDI > 0)
	{
		combinedC[j+1] = sumCI;
		combinedD[j+1] = sumDI;
		j++;
	}
	LL sum = 0;
	int L = 1;
	for (int i = 0; i < j; i++)
		if (combinedD[i+1] > D)
			return INF;
	for (int i = 0; i < j; i++)
	{
		if (sum+combinedD[i+1] <= D)
			sum += combinedD[i+1];
		else
		{
			L++;
			sum = combinedD[i+1];
		}
	}
	return L;
}

int main()
{
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		int N, D, maxC = 0;
		scanf("%d %d", &N, &D);
		for (int i = 0; i < N; i++)
		{
			scanf("%d %d", &DI[i+1], &CI[i+1]);
			maxC = max(maxC, CI[i+1]);
		}
		//Compute L
		LL sum = 0;
		int L = 1;
		for (int i = 0; i < N; i++)
		{
			if (sum+DI[i+1] <= D)
				sum += (LL)DI[i+1];
			else
			{
				L++;
				sum = (LL)DI[i+1];
			}
		}
		//Bsearch
		int b = 0, e = maxC;
		while (b < e)
		{
			int mid = (b+e)/2;
			if (compute(mid, D, N) == L)
				e = mid;
			else
				b = mid+1;
		}
		printf("%d %d\n", L, b);
	}
	return 0;
}
