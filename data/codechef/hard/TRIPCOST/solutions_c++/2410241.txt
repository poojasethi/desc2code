#include <cstdio>
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;
vector<long> d,c;
long N,D;

bool check(int C,int L) // check if F(C)=L
{
	//cout<<"..."<<C<<endl;
	vector<long> dd,cc;
	dd.push_back(0);cc.push_back(0);
	c[N]=0;
	int ct=0;
	int csd=0;
	for (int i=1;i<=N;i++)
	{
		csd+=d[i];
		if (c[i]<=C) 
		{
			dd.push_back(csd);
			//cout<<csd<<endl;
			if (csd>D) return false;
			csd=0;
			
			ct++;
		}
	}
	// is trip possible in dd? If so find cL.
	int cur=0,cL=0,pcur;
	//cout<<ct<<endl;
	while (cur<ct)
	{
		//cout<<cur<<endl;
		pcur=cur;
		long dist=0;
		for (int k=(cur+1);k<=ct;k++)
		{
			dist+=dd[k];
			//cout<<"...."<<dist<<endl;
			if (dist>D)
		        {
		        	cur=k-1;
		        	break;
		        }
		        if (dist==D)
		        {
		        	cur=k;
		        	break;
		        }
		        if (k==ct)
		        {
		        	cur=ct;
		        	break;
		        }
		        
		}
		cL++;
	}
	return (cL==L);
}
		
		        	
int main()
{
	int T;
	cin>>T;
	for (int qq=1;qq<=T;qq++)
	{
		cin>>N>>D;
		d.resize(1+N);
		c.resize(1+N);
		for (int i=1;i<=N;i++)
		{
			cin>>d[i]>>c[i];
		}
		//compute L
		int cur=0,L=0;
		while (cur<N) 
		{
			long dist=0;
			for (int k=(cur+1);k<=N;k++)
			{
				dist+=d[k];
				if (dist>D)
				{
					cur=k-1;
					break;
				}
				if (dist==D) 
				{
					cur=k;
					break;
				}
				if (k==N)
				{
					cur=N;
					break;
				}
			}
			L++;
		}
		// find best C.
		//cout<<check(3,L)<<endl;
		int l=1,r=N,mid;
		while ((r-l)>2)
		{
			mid=(r+l)/2;
			if (check(mid,L)==true)
			{
				r=mid;
			}
			else
			{
				l=mid;
			}
		}
		int c;
		if (check(l,L)==false)
		{
			if (check(l+1,L)==false)
			{
				c=r;
			}
			else
			{
				c=l+1;
			}
		}
		else
		{
			c=l;
		}
		cout<<L<<" "<<c<<endl;
			
		
		
	}
}
