#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const long long val = (1LL<<50);
 
bool GetParity(int n)
{
     if (n&1) return false;
return true;
}
 
 
long long score (vector<int> pile)
{
//calculate the score of one individual pile!
     sort (pile.begin(), pile.end());
     unique (pile.begin(), pile.end());
     bool initialParity = GetParity(pile[0]); // even - true , odd - false
     long long value = val;
     long long currentScore = initialParity? val:-val;     
     bool parityChanged = false;
    
     for (int i=1; i<pile.size(); ++i)
     {
         if (GetParity(pile[i]) != initialParity) parityChanged = true;
         if (parityChanged)
         {
            value >>= 1;
         }
         if (GetParity(pile[i]))        
              currentScore += value;
                //odd, negative
         else 
              currentScore -= value;                  
     }     
return currentScore;
}
 
void solve (vector<vector<int> > piles)
{
     long long totalScore = 0;
     
     for (int i=0; i<piles.size(); ++i)
         totalScore += score(piles[i]);
     
     if (totalScore > 0) 
     printf ("EVEN\n");
     
     else if (totalScore < 0) 
     printf ("ODD\n");
     
     else 
     printf ("DON'T PLAY\n");    
}
 
int main()
{
    int t;
    cin >> t;
    while (t--) 
    {
          int n, k, num;
          scanf ("%d", &n);
          vector <vector<int> > piles;
          for (int i=0; i<n; ++i)
          {
              scanf ("%d", &k);
              vector <int> pile;
              for ( int j=0; j<k; ++j)
              {
                  scanf ("%d", &num);
                  pile.push_back(num);
              }
              piles.push_back(pile);
          }
          
          solve(piles);
    }
    return 0;
}
 
