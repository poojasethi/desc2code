#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<stack>
#include<assert.h>
using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define S(X) ( (X) * (X) )
#define SZ(V) (int )V.size()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define ALL(V) V.begin(), V.end()
#define IN(A, B, C)  (B) <= (A) && (A) <= (C)

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;

#define AIN(A, B, C) assert(IN(A, B, C))

//typedef int LL;
typedef long long int LL;
//typedef __int64 LL;

int n, num[100];

LL calc()
{
	int sign, i, j;
	LL ret;

	sign = 0;
	if(!num[0]) 
	{
		sign = 1;
		FORN(i, n) num[i] ^= 1;
	}

	FORN(i, n)
		if(i + 1 < n && num[i] && !num[i + 1])
			break;

	if(i == n) 
	{
		ret = n;
		for(j = 0; j < 46; j++) ret *= 2;
		if(sign) ret *= -1;
		return ret;
	}
	
	ret = i;
	for(j = 0, i = i + 2; i < n; i++, j++)
	{
		ret *= 2;
		if(num[i]) ret += 1;
	}

	ret *= 2, ret++;
	j++;

	for(; j < 46; j++) ret *= 2;
	if(sign) ret *= -1;

	return ret;
}

int main()
{
	int T, k, i;
	LL sum;

	scanf("%d", &T);
	AIN(T, 1, 1000);

	while(T--)
	{
		scanf("%d", &k);
		AIN(k, 1, 100);
		
		sum = 0;
		while(k--)
		{
			scanf("%d", &n); AIN(n, 1, 45);
			FORN(i, n) scanf("%d", &num[i]); assert(num[i] >= 0);
			sort(num, num + n);
			n = unique(num, num + n) - num;
			FORN(i, n) num[i] &= 1;
			sum += calc();
		}

		if(sum > 0) printf("ODD\n");
		else if(sum < 0) printf("EVEN\n");
		else printf("DON'T PLAY\n");
	}

	return 0;
}
