#include<iostream>
#include<cstdio>
#include<algorithm>

using namespace std;

#define getcx getchar_unlocked

inline void inp(int &n)
{
   n=0;
   int ch=getcx();
			int sign=1;
   while(ch<'0'||ch>'9')
			{
			  if(ch=='-')  
					   sign=-1; 
					ch=getcx();
			}
   while(ch>='0'&& ch<='9')
   {
   	  n = (n<<3)+(n<<1) + ch-'0';
						ch=getcx();
   }
   n=n*sign;
}

inline void inp(unsigned long &n)
{
   n=0;
   int ch=getcx();
			int sign=1;
   while(ch<'0'||ch>'9')
			{
			  if(ch=='-')  
					   sign=-1; 
					ch=getcx();
			}
   while(ch>='0'&& ch<='9')
   {
   	  n = (n<<3)+(n<<1) + ch-'0';
						ch=getcx();
   }
   n=n*sign;
}

unsigned long long fastexp1(int base, int power)
{
	  if(power==0) return 1;
	  unsigned long long result=fastexp1(base,power/2);
	  result=result*result;
	  if(power%2==1) result=result*base;
	  return result;
}

int main()
{
	  int t,k,ni;
	  inp(t);
	  while(t--)
	  {
	  	  inp(k);
	  	  double value[k];
	  	  double total;
	  	  for(int j=0; j<k; j++)
	  	  {
									inp(ni);
									unsigned long v[ni];
									int pile[ni];
	  	  	  for(int i=0; i<ni; ++i)
	  	  	  {
												inp(v[i]);
	  	  	  }
	  	  	  sort(v,v+ni);
	  	  	  int i1=0;
	  	  	  for(int i=0; i<ni; ++i)
	  	  	  {
												//if(v[i]==v[i-1]) continue;
												if(v[i]%2==1) pile[i1]=1;
												else pile[i1]=2;
												i1++;
	  	  	  }
	  	  	  int flag=0, ctr=1;
	  	  	  for(int i=0; i<i1; ++i)
	  	  	  {
	  	  	  	  if(flag==0 && pile[i]==pile[i+1]) continue;
	  	  	  	  if(flag==0)
	  	  	  	  {
	  	  	  	    if(pile[i]==2) value[j]=i+1;
	  	  	  	    else value[j]=-(i+1);
	  	  	  	    flag=1;
														continue;	
	  	  	  	  }
	  	  	  	  if(pile[i]==2) value[j]+=(double)1/fastexp1(2,ctr);
	  	  	  	  else value[j]-=(double)1/fastexp1(2,ctr);
	  	  	  	  ctr++;
	  	  	  }
	  	  	  ctr=1;
	  	  	  flag=0;
	  	  	  total+=value[j];
	  	  }
	  	  if(total<0) printf("ODD\n");
	  	  else if(total>0) printf("EVEN\n");
	  	  else printf("DON'T PLAY\n");
	  	  total=0;
	  }
	  return 0;
}