#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <algorithm>
using namespace std;

const int base = 1000000007;

inline int powmod(int x, int t, int base)
{
	if (!t) {
		return 1 % base;
	}
	int y = powmod(x, t / 2, base);
	y = (long long)y * y % base;
	if (t & 1) {
		y = (long long)y * x %base;
	}
	return y;
}

inline int inverse(int x) // Since base is a prime, x ^ base - 2 * x = 1 (mod base)
{
	return powmod(x, base-2, base);
}

int main()
{
	int n, k;
	scanf("%d%d", &n, &k);
	
	// ensure the input valid
	assert(1 <= n && n <= 100000);
	assert(1 <= k && k <= 3);
	
	//formula:
	// n ^ {n - 2} * (n - 1) ^ {(k - 1) * n} * k ^ {k * n - 2}
	int target = (long long)powmod(n, n - 2, base) * powmod(n - 1, (k - 1) * n, base) % base * powmod(k, k * n - 2, base) %base;
	printf("%d\n",target);
	return 0;
}

