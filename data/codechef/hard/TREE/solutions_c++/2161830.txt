#include <cstdio>

using std::scanf;
using std::printf;

const int M = 1000000007;

static int modpow(const long long n, int e) {
	long long b = n;
	long long r = 1;
	while(e) {
		if(e & 1) {
			r *= b;
			r %= M;
		}
		e /= 2;
		b *= b;
		b %= M;
	}
	return r;
}

static int testcase1(const int n) {
	return n < 2 ? 1 // apparently a one node graph is a tree, if k==1
		: modpow(n, n - 2);
}

template <typename N>
static N sqr(const N n) {
	return n * n;
}

static int testcase2(const int n) {
	if(n < 2) // apparently a one node graph is not a tree, if k==2
		return 0;
	const int v = (n - 1) * 2; // diagonal element of modified matrix
	long long w = sqr<long long>(v + 1) - 1; // 2x2 block matrix determinant
	w %= M;
	long long r = modpow(w, n - 2);
	long long t1 = v + 1;
	t1 %= M;
	t1 *= w;
	t1 %= M;
	long long t2 = w;
	long long t3 = n - 1;
	t3 *= v * 2;
	t3 %= M;
	t3 *= v + 1;
	t3 %= M;
	long long s = t1;
	s += M - t2;
	s %= M;
	s += M - t3;
	s %= M;
	r *= s;
	r %= M;
	return r;
}

template <typename N>
static N cub(const N n) {
	return n * n * n;
}

static int testcase3(const int n) {
	if(n < 2) // apparently a one node graph is not a tree, if k==3
		return 0;
	const int u = (n - 1) * 3; // diagonal element of modified matrix
	long long v = sqr<long long>(u + 1) - 1; // 2x2 block matrix determinant
	v %= M;
	long long w = cub<long long>(u + 1) - 3 * u - 1; // 3x3 block matrix determinant
	w %= M;
	long long r = modpow(w, n - 2);
	long long t1 = v;
	t1 *= w;
	t1 %= M;
	long long t2 = w;
	t2 *= u * 2;
	t2 %= M;
	long long t3 = v;
	t3 %= M;
	t3 *= n - 1;
	t3 %= M;
	t3 *= 3;
	t3 %= M;
	t3 *= u;
	t3 %= M;
	t3 *= u;
	t3 %= M;
	long long s = t1;
	s += M - t2;
	s %= M;
	s += M - t3;
	s %= M;
	r *= s;
	r %= M;
	return r;
}

static int testcase(const int n, const int k) {
	// kirchof's matrix-tree theorem: number of trees=abs(cofactor(laplacian=degree matrix-adjacency matrix))
	// sylvester'd determinant theorem: det(X+A*B)=det(X)*det(I+B*inv(X)*A)
	// block diagonal determinant
	// block diagonal inverse
	switch(k) {
	case 1:
		return testcase1(n);
	case 2:
		return testcase2(n);
	default:
		return testcase3(n);
	}
}

int main() {
	int n;
	scanf("%i", &n);
	int k;
	scanf("%i", &k);
	printf("%d\n", testcase(n, k));
	return 0;
}
