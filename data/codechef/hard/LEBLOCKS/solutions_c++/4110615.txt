/*	Template by
	Ashwin Kumar
	IIT Delhi */
#include<algorithm>
#include<iostream>
#include<cassert>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<sstream>
#include<string>
#include<ctime>
#include<deque>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<vector>	
using namespace std;

#define MOD 1000000007
#define MAX 1000000000000000000LL
typedef long long LL;
typedef pair<int, int> pii;

int A[20];
int C[20];
LL dp[20][20][200];
LL fact[21];
int n;
int id, jd;

void precompute(void) {
	fact[0] = fact[1] = 1;
	for (int i = 2; i <= 20; i++)
		fact[i] = fact[i-1]*i;
}

LL runDP(int i, int pick, int L) {
	if (i == n)
		return (pick == 0 && L == 0);
	if (pick < 0 || L < 0)
		return 0;
	if (dp[i][pick][L] != -1)
		return dp[i][pick][L];
	LL ans = 0;
	if (i == id || i == jd)
		ans = runDP(i+1, pick, L);
	else {
		ans = runDP(i+1, pick, L);
		ans += runDP(i+1, pick-1, L-A[i]);
	}
	dp[i][pick][L] = ans;
	return ans;
}

int main() {
	precompute();
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++) {
		int k;
		scanf("%d %d", &n, &k);
		double ans = 0.0;
		for (int i = 0; i < n; i++) {
			scanf("%d %d", &A[i], &C[i]);
			ans += (double)fact[n]*max(0, A[i]-k);
		}
		vector<pii> same;
		for (int i = 0; i < n; i++)
			for (int j = i+1; j < n; j++)
				if (C[i] == C[j])
					same.push_back(pii(i, j));
		for (int s = 0; s < same.size(); s++) {
			id = same[s].first;
			jd = same[s].second;
			memset(dp, -1, sizeof dp);
			for (int g = 0; g <= n-2; g++) {
				for (int L = 0; L <= min(k-1, g*10); L++) {
					double ways = runDP(0, g, L);
					if (ways == 0.0)
						continue;
					ways *= fact[n-g-1]*fact[g];
					int kk = k-L;
					int count = 0;
					for (int i = 1; i <= A[id]; i++)
						if (kk+i > A[id] && kk+i <= A[id]+A[jd])
							count++;
					for (int i = 1; i <= A[jd]; i++)
						if (kk+i > A[jd] && kk+i <= A[id]+A[jd])
							count++;
					ans += ways*count;
				}
			}			
		}
		printf("%.7lf\n", ans/fact[n]);
	}
	return 0;
}
