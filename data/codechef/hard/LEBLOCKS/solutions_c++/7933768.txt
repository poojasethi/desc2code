#include <bits/stdc++.h>
using namespace std;

int n, k;
vector<pair<int, int> > arr;
double dp[22][22][209];
double fac[30];

void init() {
	fac[0] = 1;
	for(int i=1;i<30;i++) {
		fac[i] = fac[i-1]*i;
	}
}

void fillDp(vector<int> a) {
	memset(dp, 0, sizeof dp);
	dp[0][0][0] = 1;
	for(int i=0; i<a.size(); i++) {
		for(int cnt=0; cnt <= a.size(); cnt++) {
			for(int ht=0; ht <= 200; ht++) {
				int cht = a[i];
				if(ht+cht <= 200) {
					dp[i+1][cnt+1][ht+cht] += dp[i][cnt][ht];
				}
				dp[i+1][cnt][ht] += dp[i][cnt][ht];
			}
		}
	}
}

double solve() {
	double ret = 0;
	for(int i=1;i<=n;i++) {
		vector<int> tarr;
		vector<int> sarr;
		for(int j=0;j<n;j++) {
			if(arr[j].second != i) tarr.push_back(arr[j].first);
			else sarr.push_back(arr[j].first);
		}
		for(int i=0;i<sarr.size();i++) {
			int rem = sarr[i] - k;
			if(rem > 0) {
				ret += ((double)rem*fac[n-1]*n)/fac[n];
			}
		}
		if(sarr.size() == 2) {
			fillDp(tarr);
			for(int ht=0;ht<=200;ht++) {
				for(int cnt=0;cnt<=n;cnt++) {
					double noways = dp[tarr.size()][cnt][ht];
					if(noways) {
						double temp = ((noways*fac[cnt]*fac[tarr.size()-cnt])/fac[n])*(tarr.size()-cnt+1)*2;
						int ct = 0;
						for(int i=0; i < sarr[0]; i++) {
							if((i+k+1 > sarr[0]+ht) && (i+k+1 <= sarr[0]+ht+sarr[1])) {
								ct++;
							}
						}
						temp *= (double)ct;
						ret += temp;
					}
				}
			}
		}
	}
	return ret;
}

int main() {
	init();
	int t;
	cin>>t;
	while(t--) {
		scanf("%d%d", &n, &k);
		arr.clear();
		for(int i=0;i<n;i++) {
			int a, b;
			scanf("%d%d", &a, &b);
			arr.push_back(make_pair(a, b));
		}
		printf("%.8lf\n", solve());
	}
	return 0;
}