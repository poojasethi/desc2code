/*
   Team - icpc2014dhaka-36 , AUST_toothless
*/

#include <bits/stdc++.h>

#define pb push_back
#define all(x) x.begin(),x.end()
#define ms(a,v) memset(a,v,sizeof a)
#define II ( { int a ; read(a) ; a; } )
#define LL ( { Long a ; read(a) ; a; } )
#define DD ({double a; scanf("%lf", &a); a;})
#define ff first
#define ss second
#define mp make_pair

#define pi 3.1415926535897932384626433832795
using namespace std;

typedef long long Long;
typedef long long int64;
typedef unsigned long long ull;

typedef pair<int,int>pii;
typedef pair<string,int>psi;
typedef pair<Long,Long>pll;
typedef pair<double,double>pdd;

typedef vector<int>    vi;
typedef vector<Long>   vl;
typedef vector<string> vs;
typedef vector<pii>  vpii;
typedef set<int> si;

#define forab(i, a, b)	for (__typeof (b) i = (a) ; i <= b ; ++i)
#define rep(i, n)		forab (i, 0, (n) - 1)
#define For(i, n)		forab (i, 1, n)
#define rofba(i, a, b)	for (__typeof (b)i = (b) ; i >= a ; --i)
#define per(i, n)		rofba (i, 0, (n) - 1)
#define rof(i, n)		rofba (i, 1, n)
#define forstl(i, s)	for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)


#define __( args... ) { dbg , args ; cerr << endl; }

struct debugger {
    template< typename T > debugger & operator , ( const T &v ) {
        cerr << v << "\t" ;
        return *this;
    }
}dbg;
// Pair Print
template< class A , class B > ostream &operator << ( ostream &o, const pair<A,B> &p ) {
    return o<<"(" << p.ff << ", " << p.ss << ")" ;
}
//Vector Print
template<class T> ostream& operator<<(ostream& o, const vector<T>& v) {
    o << "[";
    forstl(it,v) o << *it << ", " ;
    return o << "]";
}
//Set Print
template<class T> ostream& operator<<(ostream& o, const set<T>& v) {
    o << "[";
    forstl(it,v) o << *it << ", " ;
    return o << "]";
}
template<class T> inline void MAX( T &a , T b) { if (a < b ) a = b; }
template<class T> inline void MIN( T &a , T b) { if (a > b ) a = b; }

//Fast Reader
template< class T > inline bool read( T &x ) {
    int c = getchar() ;
    int sgn = 1;
    while( ~c && c < '0' || c > '9' ) {
        if( c == '-' )sgn = -1 ;
        c = getchar() ;
    }
    for( x = 0 ; ~c && '0' <= c && c <= '9' ; c = getchar() ) x = x * 10 + c - '0' ;
    x *= sgn ;
    return ~c ;
}

//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={2,1,-1,-2,-1,1};int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction

#define MX 1009
int grid[MX][MX], ans[MX][MX];

void findBestRect(int hs[], int n, vi & hwt) {
    stack<pii>Stk;
    rep(i,n+1) {
        int start = i;
        while (!Stk.empty() && (hs[i] < Stk.top().second)) {
            int ht = Stk.top().second , st = Stk.top().first;
            Stk.pop();
            hwt[ht] = max(hwt[ht], (i - st));
            start = st;
        }
        Stk.push( mp(start, hs[i]) );
    }
    int best = hwt[hwt.size()-1];
    for (int i = hwt.size()-2; i >= 0; i--) {
        hwt[i] = max(hwt[i], best);
        best = max(best, hwt[i]);
    }
}
int main() {
    int n = II ,m = II ,k = II ;
    rep(i,n) rep(j,m) grid[i][j] = 1;
    rep(i,k) {
        int x = II , y = II ;
        grid[x-1][y-1] = 0;
    }
    rep(i,n) {
        rep(j,m) {
            if ( grid[i][j] && i) grid[i][j] += grid[i-1][j];
        }
    }
    rep(i,n) {
        int h = i;
        vi ht;
        ht.resize(h+2);
        findBestRect(grid[h], m, ht);
        int best = 0;
        for (int l = h; l >= 0; l--) {
            ans[l][h] = max(ans[l][h], (h-l+1)*ht[h-l+1]);
            ans[l][h] = max(ans[l][h], best);
            best = max(best, ans[l][h]);
            if (l < h) {
                ans[l][h] = max(ans[l][h], ans[l][h-1]);
            }
        }
    }
    int q = II ;
    rep(i,q) {
        int l = II , h = II ;
        printf("%d\n", ans[l-1][h-1]);
    }
}
