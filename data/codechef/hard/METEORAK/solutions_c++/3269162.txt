#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
 
using namespace std;
 
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 
typedef long long ll;
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
#define mp make_pair                    
#define go(i,n) for(int i=1;i<=n;i++)
#define go3(i,j,n) for(int i=j;i<=n;i++)

int n,m,k, Q , x, y, l, r;
bool a[1005][1005];
int up[1005][1005];
int L[1005][1005];
int R[1005][1005];
int C[1005][1005];
int D[1005][1005];


void oku(){

  scanf("%d%d%d",&n,&m,&k);
  memset(a,0,sizeof a);
  memset(C,0,sizeof C);
  memset(L,0,sizeof L);
  memset(R,0,sizeof R);
  
  go(i,k)
   scanf("%d%d",&x,&y) , a[x][y] = 1;

  go(i,n) 
   go(j,m) 
    if(a[i][j]) 
      up[i][j] = 0;
    else
      up[i][j] = up[i-1][j] + 1;

  /*go(i,n) {
    go(j,m)
     cout<<up[i][j]<<" ";
   cout<<endl;
  }*/
  
  vector<int> q;

  go(i,n){
   q.clear(); 
    go(j,m) 
      {
        while( q.size() && up[i][q.back()] >= up[i][j]) q.pop_back();
        L[i][j] = q.size()?q.back():0;
        q.pb(j);
      }
  }

  go(i,n){
   q.clear();
    for(int j = m; j>=1; j--)
     {
       while( q.size() && up[i][q.back()] >= up[i][j] )  q.pop_back();
       R[i][j] = q.size() ? q.back():m+1;
       q.pb(j);
     }
  }

  /*go(i,n){
    go(j,m)
     cout<<up[i][j]<<" ";
  cout<<endl;
  }

  cout<<"--------\n";*/

  go(i,n) 
   go(j,m)
    C[ i - up[i][j] + 1][i] = max(C[i-up[i][j] + 1][i] , R[i][j] - L[i][j]  - 1);

  for(int len = n; len>=2; len --)
   for(int l = 1; l<= n-len + 1; l++)
    {
      r = l+len - 1;
      C[l+1][r] = max(C[l+1][r], C[l][r]);
      C[l][r-1] = max(C[l][r-1], C[l][r]);
    }



  for(int len = 1; len<=n; len++)
   for(int l = 1; l<=n-len+1;l++)
    {
      r= l+len-1;
      //cout<<l<<" "<<r<<endl;
      D[l][r] = max(D[l+1][r], D[l][r-1]);
      D[l][r] = max( D[l][r], (r-l+1)* C[l][r]);
    }

  /*go(i,n){
    go(j,m)
     cout<<C[i][j]<<" ";
  cout<<endl;
  }*/
                 
  scanf("%d", &Q);

  go(i,Q) 
   {
    scanf("%d%d",&x,&y);
    printf("%d\n",D[x][y]);
   }


}

int main(){
#ifndef ONLINE_JUDGE
//freopen("in","r",stdin);
#endif

oku();

return 0;}