#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>

using namespace std;
#define read(x) scanf("%d", &x)

const int maxn = 1003;

int n,m,k;
int campo[maxn][maxn];
int l[maxn][maxn],r[maxn][maxn],u[maxn][maxn];
int c[maxn][maxn];
int d[maxn][maxn];

void rellena()
{
	for(int i = 1; i <= n; i++)//up
	{
		for(int j = 1; j <= m; j++)
		{
			if(campo[i][j])u[i][j] = 0;
			else
				u[i][j] = 1 + u[max(i - 1,0)][j];
		}
	}


	//left
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			if(u[i][j] == 0)continue;
			int &aux = l[i][j];
			aux = j - 1;
			while(u[i][j] <= u[i][aux])aux = l[i][aux];
		}
	}

	//right
	for(int i = n; i >= 1; i--)
	{
		for(int j = m; j >= 1; j--)
		{
			if(u[i][j] == 0)continue;
			int &aux = r[i][j];
			aux = j + 1;
			while(u[i][j] <= u[i][aux])aux = r[i][aux];
		}
	}
}

void solve()
{
	for(int i = 1 ; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			if(campo[i][j])continue;
			int &aux = c[i - u[i][j] + 1][i];
			aux = max(aux,r[i][j] - l[i][j] - 1);
		}
	}

	for(int dist = n; dist >= 1; dist--)
	{
		for(int i = 1, j = i + dist; i <= n && j >= 1 ; i++,j++)
		{
			if(j > n)continue;
			c[i][j - 1] = max(c[i][j - 1],c[i][j]);
			c[i + 1][j] = max(c[i + 1][j],c[i][j]);
		}
	}


	/*cout << r[3][3] << " " << l[3][3] << endl;
	for(int i = 1 ; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			cout << c[i][j] << " ";
		}
		cout << endl;
	}
	system("pause");
	 */

	for(int dist = 0; dist <= n; dist++)
	{
		for(int i = 1,j = i + dist; i <= n && j <= n; i++,j++)
		{
			int &aux = d[i][j];
			aux = max(aux, (j - i + 1)*c[i][j]);

			if(i != j)
			{
				//aux = max(aux, (j - i)*c[i + 1][j]);
				//aux = max(aux, (j - i)*c[i][j - 1]);
				aux = max(aux, d[i + 1][j]);
				aux = max(aux, d[i][j - 1]);
			}
		}
	}
}

int main()
{
	read(n),read(m),read(k);

	int a = 0,b = 0;
	for(int i = 0; i < k; i++)
	{
		read(a),read(b);
		campo[a][b] = 1;
	}
	rellena();
	solve();

	int q = 0;
	cin >> q;
	for(int i = 0; i < q; i++)
	{
		read(a),read(b);
		//cout << a << " " << b <<" ";
		printf("%d\n",d[a][b]);
	}
	return 0;
}

