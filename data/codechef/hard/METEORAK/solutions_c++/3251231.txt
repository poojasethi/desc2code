#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<limits.h>
#include<functional>
#include<string>
#include<cstring>
#include<stack>
using namespace std;
#define GETCHAR getchar_unlocked
int maxRECT_WITH_HEIGHT[1001][1001];
int data_matrix[1001][1001];
int histogram[1001][1001];
int answer[1001][1001];
int check[1001][1001];
int n,m,k;
inline int input()
{
int flag=1;
int n = 0;
char c;
while (1)
{
c=GETCHAR();
if(c>='0'&&c<='9') {n = n * 10 + c - '0';flag=0;}
else if(flag!=1) break;
}
return n;
}
void maxRect(int hist[], int nn,int rw)
{
    stack<int> s;
    int TOPPER;
    int maximum=0;
    int area_topper;
    int i = 1;
    while (i <= nn)
    {
        if(maximum<hist[i])maximum=hist[i];
        if (s.empty()|| hist[s.top()] <= hist[i])
            s.push(i++);
        else
        {
            TOPPER = s.top();
            s.pop();
            area_topper = hist[TOPPER] * (s.empty() ? i-1 : i - s.top() - 1);
            if (maxRECT_WITH_HEIGHT[rw][hist[TOPPER]] < area_topper)
                maxRECT_WITH_HEIGHT[rw][hist[TOPPER]]= area_topper;
        }
    }
    while (s.empty() == false)
    {
        TOPPER = s.top();
        s.pop();
        area_topper = hist[TOPPER] * (s.empty() ? i -1: i - s.top() - 1);
            if (maxRECT_WITH_HEIGHT[rw][hist[TOPPER]] < area_topper)
                maxRECT_WITH_HEIGHT[rw][hist[TOPPER]]= area_topper;
    }
    //still many heights are nt filled
    for(int i=maximum-1;i>=1;--i)if(maxRECT_WITH_HEIGHT[rw][i+1]/(i+1) > maxRECT_WITH_HEIGHT[rw][i]/(i))maxRECT_WITH_HEIGHT[rw][i]=i*(maxRECT_WITH_HEIGHT[rw][i+1]/(i+1));
    //for(int i=maximum-1;i>=1;--i)if(maxRECT_WITH_HEIGHT[rw][i]==0)maxRECT_WITH_HEIGHT[rw][i]=i*(maxRECT_WITH_HEIGHT[rw][i+1]/(i+1));
}
void initilize()
{
    for(int i=0;i<1000;++i)
    {
        for(int j=0;j<1000;++j)
        {
            answer[i][j]=check[i][j]=histogram[i][j]=maxRECT_WITH_HEIGHT[i][j]=0;
            data_matrix[i][j]=1;
    	   }
    }
}

int dynamic(int i,int j)
{
   if(check[i][j]==1)return answer[i][j];
    answer[i][j]=max(max(dynamic(i-1,j),dynamic(i,j+1)),maxRECT_WITH_HEIGHT[i][i-j+1]);
    check[i][j]=1;
    return answer[i][j];
}
int main()
{   //freopen("input.txt","r",stdin);
    int a,b;
         scanf("%d%d%d",&n,&m,&k);
    for(int i=0;i<=n;i++)
        for(int j=0;j<=m;j++)
        data_matrix[i][j] = 1;

    for(int i=1;i<=k;++i)
    {
        scanf("%d%d",&a,&b);
        data_matrix[a][b]=0;
    }
    //printf("hha\n");
    for(int i=1;i<=n;++i)
        for(int j=1;j<=m;++j)
        if(data_matrix[i][j]==1)
        histogram[i][j]=histogram[i-1][j]+1;



    for(int i=1;i<=n;++i)
    {
        maxRect(histogram[i],m,i);
    }
    for(int i=1;i<=n;++i)
    {
    	check[i][i]=1;
    	answer[i][i]=maxRECT_WITH_HEIGHT[i][1];
    }

    dynamic(n,1);

    int qno;qno = input();
    while(qno--)
    {
      scanf("%d%d",&a,&b);
        printf("%d\n",answer[b][a]);
    }
    return 0;
}
