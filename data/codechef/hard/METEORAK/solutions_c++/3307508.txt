#include <iostream>
#include <stdio.h>
using namespace std;
int n, m, k;
char grid[ 1002 ][ 1002 ];
int up[ 1002 ][ 1002 ];
int lt[ 1002 ][ 1002 ], rt[ 1002 ][ 1002 ], c[ 1002 ][ 1002 ], d[ 1002 ][ 1002 ];
int main()
{
    int x, y;
    scanf( "%d %d %d", &n, &m, &k );
    for ( int i = 0; i < k; i++ )
    {
        scanf( "%d %d", &x, &y );
        grid[ x ][ y ] = 1;
    }
    for ( int i = 1; i <= m; i++ )
     for ( int j = 1; j <= n; j++ )
     {
         if ( grid[ j ][ i ] )
         up[ j ][ i ] = 0;
         else
         up[ j ][ i ] = up[ j - 1 ][ i ] + 1;
     }
     for ( int i = 1; i <= n; i++ )
     {
         int l, r;
         for ( int j = 1; j <= m; j++ )
         {
             l = j - 1;
             while ( l > 0 && up[ i ][ l ] >= up[ i ][ j ] ) l = lt[ i ][ l ] - 1;
             lt[ i ][ j ] = l + 1;
         }
         for ( int j = m; j >= 1; j-- )
         {
             r = j + 1;
             while ( r <= m && up[ i ][ r ] >= up[ i ][ j ] ) r = rt[ i ][ r ] + 1;
             rt[ i ][ j ] = r - 1;
         }
     }
     for ( int i = 1; i <= n; i++ )
      for ( int j = 1; j <= m; j++ )
      {
          if ( !grid[ i ][ j ] )
          {
              c[ i - up[ i ][ j ] + 1 ][ i ] = max( c[ i - up[ i ][ j ] + 1 ][ i ], rt[ i ][ j ] - lt[ i ][ j ] + 1 );
          }
      }
      for ( int len = n; len >= 1; len-- )
      {
          for ( int l = 1; l <= n - len + 1; l++ )
          {
              int r = l + len - 1;
              c[ l ][ r ] = max( max( c[ l ][ r ], c[ l - 1 ][ r ] ), c[ l ][ r + 1 ] );
          }
      }
      for ( int len = 1; len <= n; len++ )
      {
          for ( int l = 1; l <= n - len + 1; l++ )
          {
              int r = l + len - 1;
              d[ l ][ r ] = max( max( d[ l + 1 ][ r ], d[ l ][ r - 1 ] ), ( r - l + 1 ) * c[ l ][ r ] );
          }
      }
      int qnum;
      scanf( "%d", &qnum );
      while ( qnum-- )
      {
          int x, y;
          scanf( "%d %d", &x, &y );
          printf( "%d\n", d[ x ][ y ] );
      }
    return 0;
}
