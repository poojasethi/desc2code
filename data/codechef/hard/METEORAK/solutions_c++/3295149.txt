#include <bits/stdc++.h>

#define ALL(c)  c.begin(), c.end()
#define TR(c, it)   for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define REP(i, j)  for(int (i) = (j); i >= 0; i--)
#define MAX(a, b)   ((a) > (b) ? (a) : (b))
#define gc  getchar_unlocked
#define pu  putchar_unlocked
#define ll long long int
#define ull unsigned long long int
#define inf INT_MAX
#define mininf INT_MIN
#define pb push_back
#define mp  make_pair
#define time   QueryPerformanceCounter
#define qp  QuadPart
#define LI LARGE_INTEGER
#define PI  3.14159265358979323846264338327950288
#define endl    '\n'
inline void MAXR(int &a, int b){ if(a < b)   a = b; }

using namespace std;

int dp[1001][1001] = {{0}}, inp[1001][1001], n, m, k;

inline void ofast(int x)
{
    int i = 10;
    char buf[11];
    buf[10] = '\n';
    do
    {
        buf[--i] = x % 10 + '0';
        x/= 10;
    }while(x);
    do
    {
        pu(buf[i]);
    }while (buf[i++] != '\n');
}

inline void ifast(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(; ((c<48 || c>57) && c != '-'); c = gc());
    if(c=='-')
    {
        neg = 1;
        c = gc();
    }
    for(; c>47 && c<58 ; c = gc())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
    if(neg)
        x = -x;
}

int maxArea(int arr[], int len, int idx)
{
    int area[len], t;
    memset(area, 0, sizeof area);
    vector<int> st;
    //Calculating Li
    FOR(i, 0, len)
    {
        while(!st.empty() && arr[i] <= arr[st.back()])
            st.pop_back();
        if(st.empty())
            t = -1;
        else
            t = st.back();
        area[i] = i-t-1;
        st.pb(i);
    }
    st.clear();
    //Calculating Li+Ri
    REP(i, len-1)
    {
        while(!st.empty() && arr[i] <= arr[st.back()])
            st.pop_back();
        if(st.empty())
            t = len;
        else
            t = st.back();
        area[i] += t-i-1;
        st.pb(i);
    }
    FOR(i, 0, len)
    {
        area[i] = arr[i]*(area[i]+1);
        MAXR(dp[idx][idx+arr[i]-1], area[i]);
    }
    int maxi = 0;
    for(int i = n-1; i >= idx; --i)
    {
        if(dp[idx][i] < (i - idx + 1)*maxi)
            dp[idx][i] = (i - idx + 1)*maxi;
        else
            maxi = dp[idx][i] / (i - idx + 1);
    }
}

void solve()
{
    REP(i, n-2)
        FOR(j, 0, m)
            if(inp[i][j])
                inp[i][j] = inp[i+1][j] + 1;
    FOR(i, 0, n)
        maxArea(inp[i], m, i);
}

int main()
{
    int x, y;
    scanf("%d %d %d", &n, &m, &k);
    FOR(i, 0, n)
        FOR(j, 0, m)
            inp[i][j] = 1;
    FOR(i, 0, k)
    {
        ifast(x);
        ifast(y);
//        scanf("%d %d", &x, &y);
        x--, y--;
        inp[x][y] = 0;
    }
    solve();
    int temp;
    REP(i, n-1)
        FOR(j, i, n)
        {
            temp = dp[i][j];
            if(j)
                MAXR(temp, dp[i][j-1]);
            if(j)
                MAXR(temp, dp[i+1][j-1]);
            MAXR(temp, dp[i+1][j]);
            dp[i][j] = temp;
        }
    int q;
    scanf("%d", &q);
    FOR(i, 0, q)
    {
        ifast(x);
        ifast(y);
//        scanf("%d %d", &x, &y);
        --x, --y;
//        printf("%d\n", dp[x][y]);
		ofast(dp[x][y]);
    }
    return 0;
}
