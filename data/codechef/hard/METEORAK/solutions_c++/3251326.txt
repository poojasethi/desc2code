#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define S1(x) scanf("%lld",&x)```````
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define i64 unsigned long long

int n,m,nn;
int a[1009][1009];
int s[1009][1009];
int dp[10009][1009];
int ss[1009];
int aa[1009];
int bb[1009];



void f1 (int index, int x)
{
    int xx = bb[index]+1;
    if (bb[index] == nn-1) {
        bb[x] = nn-1;
        return;
    }

    if (ss[xx] >= ss[x]) {
        f1 (xx, x);
        return;
    }
    bb[x] = bb[index];
}

void f2 (int index, int x)
{
    if (index == 0) {
        aa[x] = 0;
        return;
    }

    int xx = aa[index]-1;
    if (aa[index] == 0) {
        aa[x] = 0;
        return;
    }
    if (ss[xx] >= ss[x]) {
        f2 (xx, x);
        return;
    }
    aa[x] = aa[index];
}

struct node
{
    int a,b;
    int index;
};
typedef struct node node;
vector <struct node> ob;

struct node get (int a, int b, int index)
{
    struct node s;
    s.a = a;
    s.b = b;
    s.index = index;
    return s;
}

bool operator<(struct node aa, struct node bb)
{
    return ((aa.a)*(aa.b))>((bb.a)*(bb.b));
}

vector < vector <int> > height,width,iindex;

void calculate(int index)
{
    int i;
    nn = m;
    F (i, 0, nn) {
        ss[i] = s[index][i];
        aa[i] = i;
        bb[i] = i;
    }

    bb[nn-1] = nn-1;
    for (i = nn-2; i >= 0; i--) {
        f1 (i, i);
    }

    aa[0] = 0;
    F (i, 1, nn) {
        f2 (i, i);
    }

    int sum=0;
    ob.clear();
    F (i, 0, nn) {
        dp[index][i] = (bb[i]-aa[i]+1);
        ob.pb(get(ss[i], dp[index][i], i));
        sum = max (sum, ss[i]*dp[index][i]);
    }
    sort (ob.begin(), ob.end());

    int la,lb,lc;
    la = ob[0].a;
    lb = ob[0].b;
  //  cout << la << " " << lb << endl;
    F (i, 1, nn) {
        if (ob[i].a == 0 || ob[i].b == 0) {
            continue;
        }
        if (ob[i].a*ob[i].b >= (ob[i].a*lb)) {
            if (ob[i].a == la && ob[i].b == lb) {
                continue;
            }
            int xx = (ob[i].a*ob[i].b)/lb;
            if ((ob[i].a*ob[i].b)%lb != 0) {
                xx++;
            }
//            cout << la << " " << lb << " " <<xx << endl;

            height[index].pb (la);
            width[index].pb (lb);
            iindex[index].pb (index-(xx-1));

            la = ob[i].a;
            lb = ob[i].b;
            continue;
        }
    }

    height[index].pb (la);
    width[index].pb (lb);
    iindex[index].pb(index);

}

int get (int x, int y)
{
    int aa=0;
    int bb = height[x].size() -1;

    while (aa<bb) {
        if (bb-aa == 1) {
            if (iindex[x][aa] >= y) {
                break;
            }
            aa =bb;
            break;
        }

        int mid = (aa+bb)/2;
        if (iindex[x][mid] >= y) {
            bb = mid;
        } else {
            aa = mid;
        }
    }//cout << aa << endl;
    int value = width[x][aa]*min(height[x][aa], abs(y-x)+1);
    return value;
}

int main()
{

    //freopen ("input.txt", "r", stdin);

    int i,j,k;
    S (n);
    S (m);
    S (k);
    height.resize (n);
    width.resize (n);
    iindex.resize(n);

    F (i, 0, n) {
        F (j, 0, m) {
            a[i][j] = 1;
            dp[i][j] = 0;
        }
    }
    while (k--) {
        int x,y;
        S (x);
        S (y);
        x--;
        y--;
        a[x][y] = 0;
    }

    F (i, 0, n) {
        F (j, 0, m) {
            if (i == 0) {
                s[i][j] = a[i][j];
                continue;
            }
            if (a[i][j] == 0) {
                s[i][j] = 0;
                continue;
            }
            s[i][j] = 1+s[i-1][j];
        }
    }

    F (i, 0, n) {
        calculate (i);
    }

    F (i, 0, n) {
        F (j, 0, i+1) {
            dp[i][j] = get(i, j);
         //   cout << i <<  " " << j << " --> " << dp[i][j] << endl;
        }
    }

    F (i, 0, n) {
        for (j = 0; j <= i; j++) {
            if (i == j) {
                continue;
            }
            dp[i][j] = max (dp[i][j], dp[i-1][j]);
        }
    }

    int tt;
    S (tt);
    while (tt--) {
        int x,y;
        S (x);
        S (y);
        x--;
        y--;
        printf ("%d\n", dp[y][x]);
    }


    return 0;
}