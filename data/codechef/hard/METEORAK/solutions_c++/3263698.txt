#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

int A[1002][1002];
int dp[1002][1002];
int dir_left[1002];
int dir_right[1002];
int width[1002];

int main()
{
    int n,m,k,x,y,i,j,val,q;
    scanf("%d%d%d", &n, &m, &k);
    while ( k-- ) {    
          scanf("%d%d", &x, &y);
          A[x][y] = -1;
    }
    for ( i = 1; i <= n; i++ ) {
        for ( j = 1; j <= m; j++ ) {
            if ( A[i][j] == -1 ) A[i][j] = 0;
            else A[i][j] = A[i-1][j] + 1;
        }
    }
    
    for ( i = 1; i <= n; i++ ) {
        
        for ( j = 1; j <= m; j++ ) {
            dir_left[j] = j-1;
            while ( dir_left[j] >= 1 && A[i][dir_left[j]] >= A[i][j] ) dir_left[j] = dir_left[dir_left[j]];

        }
        
        
        for ( j = m; j >= 1; j-- ) {
            dir_right[j] = j+1;
            while ( dir_right[j] <= m && A[i][dir_right[j]] >= A[i][j] ) dir_right[j] = dir_right[dir_right[j]];
        }

       
        memset(width, 0, sizeof(width));
    
        
        for ( j = 1; j <= m; j++ ) width[A[i][j]] = max(width[A[i][j]], dir_right[j] - dir_left[j]  - 1);
        
       
        val = 0;
        
        for ( j = 1; j <= i; j++ ) {
            val = max(val, width[i-j+1]);
            dp[i][j] = max(dp[i][j], val*(i-j+1));    
        }
        
        for ( j = i; j >= 1; j-- ) dp[i][j] = max(dp[i][j], max(dp[i-1][j],dp[i][j+1]));
        
    }
    
    scanf("%d", &q);
    
    while ( q-- ) {
          scanf("%d%d", &x, &y);
          printf("%d\n", dp[y][x]);
    }
    
    return 0;
    
}   
