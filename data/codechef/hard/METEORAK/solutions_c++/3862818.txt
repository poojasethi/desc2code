#include<bits/stdc++.h>
#define gc getchar_unlocked
#define mp make_pair

using namespace std;

const int M = 1005;

int n,m,k;
int table[M][M];
int dp[M][M];

void ss(int &x)
{
	register int c = gc();
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

void solve()
{
	int dpLeft[M];
	int dpRight[M];
	int row[M];
	pair<int,int> st[M];
	int sz,sum=0;
	for(int i=1;i<=n;i++)
	{
		memset(dpLeft,0,sizeof(dpLeft));
		memset(dpRight,0,sizeof(dpRight));
		sz=-1;
		for(int j=1;j<=m;j++)
		{
			sum=0;
			while(sz>=0)
				if(st[sz].first>=table[i][j])
				{
					sum+=st[sz].second;
					sz--;
				}
				else
					break;
			st[++sz]=mp(table[i][j],sum+1);
			dpLeft[j]=sum+1;
		}
		sz=-1;
		for(int j=m;j>0;j--)
		{
			sum=0;
			while(sz>=0)
				if(st[sz].first>=table[i][j])
				{
					sum+=st[sz].second;
					sz--;
				}
				else
					break;
			st[++sz]=mp(table[i][j],sum+1);
			dpRight[j]=sum+1;
		}
		memset(row,0,sizeof(row));
		//cout<<i<<endl;
		for( int j=1;j<=m;j++)
			row[table[i][j]]=max(row[table[i][j]],dpRight[j]+dpLeft[j]-1);
		int len=0;
		for(int k=i;k>=1;k--)
		{	len=max(len,row[k]);
			dp[i][k]=k*len;
		}
		for(int k=2;k<=i;k++)
			dp[i][k]=max(dp[i][k], dp[i][k-1]);
		for(int j=i;j>0;j--)
			dp[i][j]=max(dp[i][j],dp[i-1][j-1]);
	}
}

int main()
{
	int u,v,t;
	ss(n);
	ss(m);
	ss(k);
	memset(table,0,sizeof(table));
	for(int i=0;i<k;i++)
	{
		ss(u);
		ss(v);
		table[u][v]=1;
	}
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
		{
			if(table[i][j]==0)
				table[i][j]=table[i-1][j]+1;
			else
				table[i][j]=0;
		}
	solve();
	ss(t);
	while(t--)
	{
		ss(u);
		ss(v);
		printf("%d\n",dp[v][v-u+1]);
	}
	return 0;
}
