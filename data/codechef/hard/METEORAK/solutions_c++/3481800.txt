//#pragma comment (linker, "/STACK:64000000") 
#include <iostream>   
#include <sstream>   
#include <cstdio>   
#include <cstdlib>   
#include <cmath>   
#include <memory>   
#include <cctype>   
#include <string>   
#include <vector>   
#include <list>   
#include <queue>   
#include <deque>   
#include <stack>   
#include <map>   
#include <set>   
#include <algorithm> 
#include <utility>

using namespace std;   

typedef pair<int,int> PII;

#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define CLEAR(a) memset((a),0,sizeof(a))  
#define INF 1000000000  
#define PB push_back  
#define ALL(c) (c).begin(), (c).end()  
#define pi 2*acos(0.0)  
#define SQR(a) (a)*(a)  
#define MP make_pair  
#define MAX 100007;
#define MOD 1000000007
#define eps 1e-6

int n,m;
int sol[1<<10][1<<10];
int a[1<<10][1<<10];
int up[1<<10][1<<10];
int l[1<<10][1<<10];
int r[1<<10][1<<10];

void read_data()
{
	int k;
	scanf("%d %d %d",&n,&m,&k);
	int x,y;

	while (k>0)
	{
		scanf("%d %d",&x,&y);
		a[x-1][y-1]=1;
		k--;
	}
}

void calc_up()
{
	FOR(j,0,m)
		up[0][j]=1-a[0][j];

	FOR(i,1,n)
	{
		FOR(j,0,m)
		{
			up[i][j]=up[i-1][j]+1;

			if (a[i][j]==1)
				up[i][j]=0;
		}
	}
}

void write_matrix(int x[1<<10][1<<10])
{
	FOR(i,0,n)
	{

		FOR(j,0,m)
			cout << x[i][j] << " ";

		cout << endl;
	}
	cout << endl;
}

void write_sol()
{
	int q;
	scanf("%d",&q);
	int l,h;

	while (q>0)
	{
		q--;
		scanf("%d %d",&l,&h);
		printf("%d\n",sol[h-1][l-1]);
	}
}

void calc_left()
{
	stack<int> st;

	FOR(i,0,n)
	{
		while (!st.empty())
			st.pop();

		FOR(j,0,m)
		{
			while (!st.empty() && up[i][st.top()]>=up[i][j])
				st.pop();

			if (st.empty())
				l[i][j]=-1;
			else
				l[i][j]=st.top();

			st.push(j);
		}
	}
}

void calc_right()
{
	stack<int> st;

	FOR(i,0,n)
	{
		while (!st.empty())
			st.pop();

		RFOR(j,m,0)
		{
			while (!st.empty() && up[i][st.top()]>=up[i][j])
				st.pop();

			if (st.empty())
				r[i][j]=m;
			else
				r[i][j]=st.top();

			st.push(j);
		}
	}
}

void calc_sol()
{
	vector< PII > v;
	int M[1<<10];

	FOR(i,0,n)  // rows
	{
		FOR(j,0,i)
			sol[i][j]=sol[i-1][j];

		v.clear();

		FOR(j,0,m)
		{
			v.PB(MP(up[i][j],r[i][j]-l[i][j]-1));
			M[j]=0;
		}

		M[m]=0;

		sort(v.begin(),v.end());
		reverse(v.begin(),v.end());
		// max H at begin of array

		RFOR(j,m,0)
			M[j]=max(M[j+1],v[j].first*v[j].second);

		int W=0;
		int iter=0;

		FOR(j,0,i+1)
		{
			int d=i-j+1;

			while (iter<m && v[iter].first>=d)
			{
				W=max(W,v[iter].second);
				iter++;
			}

			int val_M=0;
			if (iter<m)
				val_M=M[iter];

			int val=max(W*d,val_M);

			sol[i][j]=max(sol[i][j],val);
		}
	}
}

int main ()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(0);

	read_data();

	//write_matrix(a);

	calc_up();

	//write_matrix(up);

	calc_left();
	calc_right();

	//write_matrix(l);
	//write_matrix(r);

	calc_sol();


	write_sol();

	return 0;
}
