#include <cstdio>
#include <vector>
#include <algorithm>
#pragma comment(linker, "/STACK:16777216")
using namespace std;

typedef pair <int, int> ii;

const int Inf = 2000000000;
const int Maxn = 100005;
const int Maxm = 20;

int n;
vector <ii> neigh[Maxn];
int L[Maxn], P[Maxn][Maxm], dist[Maxn][Maxm], mn[Maxn][Maxm];
int q;
int k, f[Maxn];
int Q[Maxn], len;

void Build(int v)
{
	for (int i = 0; i < neigh[v].size(); i++) {
		ii u = neigh[v][i];
		if (u.first == P[v][0]) continue;
		L[u.first] = L[v] + 1; P[u.first][0] = v; dist[u.first][0] = mn[u.first][0] = u.second;
		Build(u.first);
	}
}

int getDist(int a, int b)
{
	if (L[a] < L[b]) swap(a, b);
	int sum = 0;
	for (int i = Maxm - 1; i >= 0; i--)
		if (L[a] - (1 << i) >= L[b]) { sum += dist[a][i]; a = P[a][i]; }
	if (a == b) return sum;
	for (int i = Maxm - 1; i >= 0; i--)
		if (P[a][i] != P[b][i]) {
			sum += dist[a][i] + dist[b][i]; a = P[a][i]; b = P[b][i];
		}
	sum += dist[a][0] + dist[b][0];
	return sum;
}

int LCA(int a, int b)
{
	if (L[a] < L[b]) swap(a, b);
	for (int i = Maxm - 1; i >= 0; i--)
		if (L[a] - (1 << i) >= L[b]) a = P[a][i];
	if (a == b) return a;
	for (int i = Maxm - 1; i >= 0; i--)
		if (P[a][i] != P[b][i])
			a = P[a][i], b = P[b][i];
	return P[a][0];
}

int getMin(int a, int b)
{
	if (L[a] < L[b]) swap(a, b);
	int res = Inf;
	for (int i = Maxm - 1; i >= 0; i--)
		if (L[a] - (1 << i) >= L[b]) { res = min(res, mn[a][i]); a = P[a][i]; }
	if (a == b) return res;
	for (int i = Maxm - 1; i >= 0; i--)
		if (P[a][i] != P[b][i]) {
			res = min(res, min(mn[a][i], mn[b][i])); a = P[a][i]; b = P[b][i];
		}
	res = min(res, min(mn[a][0], mn[b][0]));
	return res;
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n - 1; i++) {
		int u, v, c; scanf("%d %d %d", &u, &v, &c);
		neigh[u].push_back(ii(v, c)); neigh[v].push_back(ii(u, c));
	}
	L[0] = -1; Build(1);
	for (int j = 1; j < Maxm; j++)
		for (int i = 1; i <= n; i++) {
			P[i][j] = P[P[i][j - 1]][j - 1]; 
			dist[i][j] = dist[i][j - 1] + dist[P[i][j - 1]][j - 1];
			mn[i][j] = min(mn[i][j - 1], mn[P[i][j - 1]][j - 1]);
		}
	scanf("%d", &q);
	while (q--) {
		scanf("%d", &k);
		int li = 0;
		for (int i = 0; i < k; i++) {
			scanf("%d", &f[i]);
			if (dist[f[i]][Maxm - 1] > dist[f[li]][Maxm - 1]) li = i;
		}
		int best = -1; len = 0;
		for (int i = 0; i < k; i++) if (i != li) {
			int cur = getDist(f[li], f[i]);
			if (cur > best) { best = cur; len = 0; }
			if (cur == best) Q[len++] = f[i];
		}
		printf("%d ", best);
		int lw = 0;
		for (int i = 0; i < len; i++) {
			int lc = LCA(f[li], Q[i]);
			if (L[lc] > L[lw]) lw = lc;
		}
		int com = Q[0];
		int i;
		for (i = 0; i < len; i++)
			if (L[Q[i]] < L[lw]) break;
			else com = LCA(com, Q[i]);
		if (i < len) com = lw;
		if (2 * getDist(f[li], com) == best && len > 1) { printf("-1\n"); continue; }
		int lli = f[li];
		for (int i = 0; i < k; i++) if (i != li && dist[f[i]][Maxm - 1] == dist[f[li]][Maxm - 1]) {
			int lc = LCA(f[li], f[i]);
			if (getDist(f[i], lc) == getDist(f[li], lc) && L[lc] > L[lw] && L[lc] < L[lli]) lli = lc;
		} 
		best = getMin(lli, com);
		printf("%d\n", best == Inf? -1: best);
	}
	return 0;
}