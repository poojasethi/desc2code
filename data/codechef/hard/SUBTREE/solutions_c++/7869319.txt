using namespace std;
#include<iostream>
#include<cassert>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<ctime>
#include<sstream>
//#include<conio.h>
 
#define sz(x) (int)x.size()
#define bg begin()
#define ed end()
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define tr(c, it) for(typeof(c.BG) it = c.BG; it != c.ED; ++it)
#define sll(c) a.begin(), a.end()
#define For(i, a, b) for(int i=(a), _b=(b); i<_b; ++i)
#define Ford(i, a, b) for(int i=(a), _b=(b); i>=_b; --i)
#define Fore(i, a, b) for(int i=(a), _b=(b); i<=_b; ++i)
#define exist(c, x) (c.find(x) != c.ED)
#define end putchar('\n')
#define ENDL(a) ((a)?'\n':' ')
#define ri ({int n; scanf("%d", &n); n;})
 
typedef pair<int, int> pii;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<pii> VII;
typedef vector<VII> VVII;
typedef long long LL;
 
const int maxn = (int)1e5 + 10;
const int maxlog = 17;
 
int n, k, t;
int f[maxn], d[maxn], p[maxn][maxlog], m[maxn][maxlog], l[maxn], r[maxn], mlog, res;
vector<pii> ds[maxn];
 
void input() {
	cin >> n;
	For(i, 1, n) {
		int u, v, c;
		scanf("%d%d%d", &u, &v, &c);
		u--; v--;
		ds[u].pb( mp(v, c));
		ds[v].pb( mp(u, c));
	}	
}
 
void dfs(int u) {	
	l[u] = ++t;	
	For (i, 1, 17) {
		m[u][i] = min(m[p[u][i-1]][i-1], m[u][i-1]);
		p[u][i] = p[p[u][i-1]][i-1];
	}		
	For(i, 0, sz(ds[u])) {
		int v = ds[u][i].fi;
		int c = ds[u][i].se;	
			
		if (l[v]>0) continue;
		m[v][0] = c;
		p[v][0] = u;
		d[v] = d[u] + c;
		dfs(v);
	}
	r[u] = t;	
}
 
   bool parent(int u, int v) {
   	  return (l[u] <= l[v] && r[u] >= r[v]);
   }   
   
int lca(int u, int v) {
	if (parent(u, v)) return u;
	if (parent(v, u)) return v;
	
	Ford (i, 16, 0) 
	 if (!parent(p[u][i], v)) u = p[u][i];
    
    return p[u][0];
}
	int getdis(int u, int v) {
		return d[u] + d[v] - 2*d[lca(u, v)];
	}
	
void cal() {
	int id1, id2, best=0;
	For(i, 1, k)	{
		int tg = getdis(f[0], f[i]);
		if (tg>best) {
			id1 = f[i];
			best = tg;
		}
	}		
	
	best = 0;
	For(i, 0, k){
		int tg = getdis(id1, f[i]);
		if (tg>best) {
			id2 = f[i];
			best = tg;
		}
	}	
	
	VI a, b;	
	For(i, 0, k){
		int t1 = getdis(id1, f[i]);
		int t2 = getdis(id2, f[i]);
		if (t1==best && t2==best) {
			printf("%d -1\n", best);
			return;
		}
		else if (t1==best) {
			b.pb(f[i]);
		}
		else if (t2==best) {
			a.pb(f[i]);
		}
	}
	
	For(i, 0, sz(a)) id1 = lca(id1, a[i]);
	For(i, 0, sz(b)) id2 = lca(id2, b[i]);
//	cout << id1 << ' ' << id2 << endl;
	
	res = maxn;
	
	bool ok;
	if (parent(id1, id2)) {
		Ford(i, 16, 0)	{
			ok = true;
			For (j, 0, sz(a)) 
			  if (parent(p[id2][i], a[j])) {
  				ok = false;
  				break;
  			}
  			if (!ok) continue;
  			res = min(res, m[id2][i]);
  			id2 = p[id2][i];
		}
		res = min(res, m[id2][0]);
	}
	else if (parent(id2, id1)) {
		Ford(i, 16, 0)	{
			ok = true;
			For (j, 0, sz(b)) 
			  if (parent(p[id1][i], b[j])) {
  				ok = false;
  				break;
  			}
  			if (!ok) continue;
  			res = min(res, m[id1][i]);
  			id1 = p[id1][i];
		}
		res = min(res, m[id1][0]);
	}
	else {
		int P = lca(id1, id2);
//		cout << P << endl;
		Ford(i, 16, 0){
			if (parent(P, p[id1][i])){
				res = min(res, m[id1][i]);
				id1 = p[id1][i];
			}
			if (parent(P, p[id2][i])) {
				res = min(res, m[id2][i]);
				id2 = p[id2][i];
			}
		}
	}
	
	printf("%d %d\n", best, res);
}
 
void process() {
	memset(m, 61, sizeof(m));
	dfs(0);
//	For(i, 0, n) printf("%d ", d[i]); end; 
	int q;
	cin >> q;
	For(i, 0, q){
		cin >> k;
		For(j, 0, k) {
			scanf("%d", &f[j]);
			f[j]--;
		}
		cal();
	}
}
 
main(){
//    freopen(".inp", "r", stdin);
//    freopen(".out", "w", stdout);	
	input();
	process();
//    getch();    
}