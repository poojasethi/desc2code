//In the name of Allah
 
#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <algorithm>
#include <bitset>
#include <math.h>
#include <queue>
#include <map>
#include <set>
#include <limits.h>
#include <limits>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
using namespace std;

int T, N, M, xi, yi;
bool g[1005][1005], row[1005], col[1005], diag1[2005], diag2[2005];

int di[] = {1, 1, -1, -1, 2, 2, -2, -2};
int dj[] = {2, -2, 2, -2, 1, -1, 1, -1};

int main(){
    scanf("%d", &T);
    while(T--){
        scanf("%d %d", &N, &M);
        
        memset(g, false, sizeof g);
        memset(row, false, sizeof row);
        memset(col, false, sizeof col);
        memset(diag1, false, sizeof diag1);
        memset(diag2, false, sizeof diag2);
        
        for(int i = 0; i < M; i++){
            scanf("%d %d", &xi, &yi);
            xi--, yi--;
            
            g[xi][yi] = true;
            row[xi] = true;
            col[yi] = true;
            diag1[xi + yi] = true;
            diag2[(N - 1) - xi + yi] = true;
        }
        
        int res = 0;
        for(int i = 0; i < N; i++)
        for(int j = 0; j < N; j++){
            if(!g[i][j] && !row[i] && !col[j] && !diag1[i + j] && !diag2[(N - 1) - i + j]){
                int cnt = 0;
                for(int d = 0; d < 8; d++){
                    int ni = i + di[d], nj = j + dj[d];
                    if(0 <= ni && ni < N && 0 <= nj && nj < N){
                        if(g[ni][nj])cnt++;
                    }
                }
                if(cnt >= 2)res++;
            }
        }
        printf("%d\n", res);
    }
    
    return 0;
}