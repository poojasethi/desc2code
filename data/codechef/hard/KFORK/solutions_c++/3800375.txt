#include <iostream>
#include <string>
#include <string.h>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <sstream>
#include <memory.h>
#include <stdio.h>
#include <ctime>
#include <cmath>
#include <cassert>

using namespace std;
 
#define LL long long
#define U unsigned
#define pnt pair<int,int>
#define FOR(i,a,b) for (int i=(a); i<(b); ++i)
#define MEMS(a,b) memset((a),(b),sizeof(a))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define ABS(a) (((a)>=(0))?(a):(-(a)))
#define mp make_pair
#define pb push_back
#define ALL(a) a.begin(),a.end()
#define FI(i,b) FOR(i,0,b)
#define V(t) vector < t >
#define sz size()
#define MaxN 1005

const int offset = MaxN;
int T, N, M, S;
int row[MaxN], col[MaxN];
int mat[MaxN][MaxN];
int diagonal1[4*MaxN], diagonal2[4*MaxN];

int check(int x, int y)
{
    if (x<1 || x>N || y<1 || y>N)
        return 0;
    if (mat[x][y] == 1)
        return 1;
    
    return 0;    
}

int main()
{
    scanf("%d", &T);
    while (T--)
    {
        memset(row, 0, sizeof row);
        memset(col, 0, sizeof col);
        memset(diagonal1, 0, sizeof diagonal1);
        memset(diagonal2, 0, sizeof diagonal2);
        
        scanf("%d %d", &N, &M);
        
        for (int i=1 ; i<=N ; i++)
            for (int j=1 ; j<=N ; j++)
                mat[i][j] = 0;
                
        vector< pair<int, int> > coord;
        for (int i=1 ; i<=M ; i++)
        {
            int x, y;
            scanf("%d %d", &x, &y);
            mat[x][y] = 1;
            coord.pb(mp(x, y));
            row[x] = 1;
            col[y] = 1;
            diagonal1[offset + x + y] = 1;     
            diagonal2[offset + x - y] = 1;
        }
        
        int count = 0;
        for (int i=1 ; i<=N ; i++)
        {
            for (int j=1 ; j<=N ; j++)
            {
                int c = 0;
                if (!mat[i][j] && !row[i] && !col[j] && !diagonal1[offset + i + j] && !diagonal2[offset + i - j])
                {
                    c += check(i+1,j+2);     
                    c += check(i+1,j-2);
                    c += check(i-1,j+2);
                    c += check(i-1,j-2);
                    c += check(i+2,j+1);
                    c += check(i+2,j-1);
                    c += check(i-2,j+1);
                    c += check(i-2,j-1);
                }    
                
                if (c >= 2)
                {
                    // printf("The forking position is : (%d, %d)\n", i, j);  
                    count++;
                }
            }  
        }
        
        printf("%d\n", count);
    }    
    return 0;    
}
