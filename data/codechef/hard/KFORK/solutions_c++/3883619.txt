#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define ull unsigned long long int
#define uint unsigned int

typedef pair<int,int> pii;
#define x first
#define y second

#define read(n) scanf("%d",&n)
#define readll(n) scanf("%lld",&n)
#define read2(n,m) scanf("%d%d",&n,&m)
#define read3(n,m,l) scanf("%d%d%d",&n,&m,&l)

#define fr(i,n)     for(int i=0;i<n;i++)
#define frr(i,a,b)   for(int i=a;i<b;i++)
#define rf(i,n)     for(int i=n-1;i>=0;i--)

#define init(mem,v) memset(mem,v,sizeof(mem))

#define DB(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DB2(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DB3(x, y, z)       cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl;
#define DB4(a, b, c, d)    cout<<__LINE__<<" :: "<<#a<< ": "<<a<<" | "<<#b<< ": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl;

const int mx=1001;
int X[mx*mx],Y[mx*mx];

int dx[]={+1,+1,+2,+2,-1,-1,-2,-2};
int dy[]={+2,-2,+1,-1,+2,-2,+1,-1};

bool rows[2*mx],cols[2*mx],sums[2*mx],diffs[2*mx];
bool queens[mx][mx];

int offset=mx; // because difference can go negative
int main(){
    int t;
    read(t);
    while(t--){
        init(rows,0);
        init(cols,0);
        init(sums,0);
        init(diffs,0);
        init(queens,0);

        int n,m;
        read2(n,m);

        fr(i,m) read2(X[i],Y[i]);

        set<pii> ans;
        fr(i,m){
            rows[X[i]]=true;
            cols[Y[i]]=true;
            sums[X[i]+Y[i]]=true;
            diffs[X[i]-Y[i]+offset]=true;
            queens[X[i]][Y[i]]=true;
        }

        fr(ii,n){
            fr(move,8){
                int x=X[ii]+dx[move];
                int y=Y[ii]+dy[move];
                if(x<1 or y<1 or x>n or y>n) continue;

                int kills=0;
                fr(kmove,8){
                    int x1=x+dx[kmove];
                    int y1=y+dy[kmove];
                    if(x1 >=1 and x1<=n and y1>=1 and y1<=n and queens[x1][y1])  kills++;
                }
                if(kills > 1 and
                        !rows[x] and !cols[y] and
                        !sums[x+y] and !diffs[x-y+offset]
                  ){
                    ans.insert(pii(x,y));
                }
            }
        }
        printf("%d\n",(int)ans.size());
    }
}