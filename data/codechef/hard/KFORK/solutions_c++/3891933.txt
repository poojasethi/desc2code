#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

#define scn(i) scanf("%d",&i)
#define scnlld(i)	scanf("%lld",&i)
#define REP(i,N)	for(int i = 1; i <= N; i++)
#define GC getchar_unlocked()
typedef pair<int,int> PII;

int read(int & n){
	int ch=GC; int sign=1;
	n=0;
	while(ch<'0'||ch>'9'){if(ch=='-')sign=-1;ch=GC;}
	while(ch>='0'&&ch<='9'){
		n=n*10+ch-'0';
		ch=GC;
	}
	n*=sign;
	return n;
}

void solve()
{
	int N, M, x, y;
	read(N), read(M);
	int ** mat = (int **)malloc((N+1)*sizeof(int *));
	for(int i = 0; i < N+1; i++)
		mat[i] = (int *)calloc(N+1,sizeof(int));
	int * rowB = (int *)calloc(N+1,sizeof(int));
	int * colB = (int *)calloc(N+1,sizeof(int));
	int * D1 = (int *)calloc(N*2,sizeof(int));
	int * D2 = (int *)calloc(N*2,sizeof(int));

	REP(i,M)
	{
		read(x), read(y);
		mat[x][y] = 1;
		rowB[x] = 1;
		colB[y] = 1;
		if(x-y < 0)
			D1[-1*(x-y)] = 1;
		else
			D1[N+(x-y)]  = 1;
		D2[x+y] = 1;
	}

	long cnt, fork = 0;
	for(int i = 1; i <= N; i++)
	{
		for(int j = 1; j <= N; j++)
		{
			
			if(i-j < 0)
			{
				cnt = 0;
				if(rowB[i] != 1 && colB[j] != 1 && D1[-1*(i-j)] != 1 && D2[i+j] != 1)
				{
					//(i+1,j+2), (i+1,j-2), (i-1,j+2), (i-1,j-2), (i+2,j+1), (i+2,j-1), (i-2,j+1), (i-2,j-1)
					
					if(i+1 <= N && j+2 <= N)
						if(mat[i+1][j+2] == 1)
							cnt += 1;
					if(i+1 <= N && j-2 >= 1)
						if(mat[i+1][j-2] == 1)
							cnt += 1;
					if(i-1 >= 1 && j+2 <= N)
						if(mat[i-1][j+2] == 1)
							cnt += 1;
					if(i-1 >= 1 && j-2 >= 1)
						if(mat[i-1][j-2] == 1)
							cnt += 1;
					if(i+2 <= N && j+1 <= N)
						if(mat[i+2][j+1] == 1)
							cnt += 1;
					if(i+2 <= N && j-1 >= 1)
						if(mat[i+2][j-1] == 1)
							cnt += 1;
					if(i-2 >= 1 && j+1 <= N)
						if(mat[i-2][j+1] == 1)
							cnt += 1;
					if(i-2 >= 1 && j-1 >= 1)
						if(mat[i-2][j-1] == 1)
							cnt += 1;

					if(cnt >= 2)
					{
						fork += 1;
					}
				}
			}
			else
			{
				cnt = 0;
				if(rowB[i] != 1 && colB[j] != 1 && D1[N+(i-j)] != 1 && D2[i+j] != 1)
				{
					//(i+1,j+2), (i+1,j-2), (i-1,j+2), (i-1,j-2), (i+2,j+1), (i+2,j-1), (i-2,j+1), (i-2,j-1)
					
					if(i+1 <= N && j+2 <= N)
						if(mat[i+1][j+2] == 1)
							cnt += 1;
					if(i+1 <= N && j-2 >= 1)
						if(mat[i+1][j-2] == 1)
							cnt += 1;
					if(i-1 >= 1 && j+2 <= N)
						if(mat[i-1][j+2] == 1)
							cnt += 1;
					if(i-1 >= 1 && j-2 >= 1)
						if(mat[i-1][j-2] == 1)
							cnt += 1;
					if(i+2 <= N && j+1 <= N)
						if(mat[i+2][j+1] == 1)
							cnt += 1;
					if(i+2 <= N && j-1 >= 1)
						if(mat[i+2][j-1] == 1)
							cnt += 1;
					if(i-2 >= 1 && j+1 <= N)
						if(mat[i-2][j+1] == 1)
							cnt += 1;
					if(i-2 >= 1 && j-1 >= 1)
						if(mat[i-2][j-1] == 1)
							cnt += 1; //cout<<"This point ("<<i<<","<<j<<")"<<endl;;
					
					//cout<<"COUNT: "<<cnt<<endl;
					if(cnt >= 2)
					{
						fork += 1;
					//	cout<<"This point ("<<i<<","<<j<<")"<<endl;
					}
				}
			}
		}
	}
	printf("%ld\n",fork);
	free(rowB),free(colB),free(D1),free(D2);
	for(int i = 0; i < N+1; i++)	free(mat[i]);
	free(mat);
}
	
int main()
{
	int t;
	read(t);
	while(t--)
	{
		solve();
	}
	return 0;
}