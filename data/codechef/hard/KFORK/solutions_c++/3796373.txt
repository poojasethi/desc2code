//Author: Siddharth Saluja
//Quote: "DIE FOR YOUR AIM"
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<deque>
#include<algorithm>
#include<cmath>

using namespace std;


#define mod 1000000007
//#define DEBUG
#define inf 2147483647
#define ninf -2147483648
#define FOR(i,a,b) for(i=a;i<b;i++)
#define s(a) scanf("%d",&a)
#define lls(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define p(a) printf("%d",a)
#define llp(a) printf("%lld",a)
#define sp(a) printf("%s",a)
#define cp(a) printf("%c",a)
#define nline printf("\n")
#define space printf(" ")
#define fs(a) fscanf(fp,"%d",&a)
#define flls(a) fscanf(fp,"%lld",&a)
#define fss(a) fscanf(fp,"%s",a)
#define fp(a) fprintf(fo,"%d",a)
#define fllp(a) fprintf(fo,"%lld",a)
#define fsp(a) fprintf(fo,"%s",a)
#define fcp(a) fprintf(fo,"%c",a)
#define fnline fprintf(fo,"\n")
#define fspace fprintf(fo," ")
#define ll long long
 int n;
map<int,int> mapr,mapc,mapd,mapf;

bool valid( int x,int y)
{
	if(x>0 && x<=n && y>0 && y<=n && mapr.find(x)==mapr.end() && mapc.find(y)==mapc.end() && mapd.find(x+y)==mapd.end() && mapf.find(x-y)==mapf.end())
	return true;
	return false;
}
 int xx[1000002],yy[1000002],mat[1002][1002]={0};
int main()
{
#ifdef DEBUG
    cout<<"Debugging\n";
#endif
FILE *fp,*fo;
fp=fopen("input.txt","r");
fo=fopen("output.txt","w");

 int t,m,i=0,x,y,j;
cin>>t;
while(t--)
{
	memset(xx,0,sizeof(xx));
	memset(yy,0,sizeof(yy));
	memset(mat,0,sizeof(mat));
	cin>>n>>m;
	mapr.clear();
	mapc.clear();
	mapd.clear();
	mapf.clear();
	int dx[8]={1,-1,2,-2,1,-1,2,-2};
	 int dy[8]={2,-2,1,-1,-2,2,-1,1};
	i=0;
	while(i<m)
	{
		cin>>x>>y;
		xx[i]=x;
		yy[i]=y;
		i++;
		mapr[x]++;
		mapc[y]++;
		mapd[x+y]++;
		mapf[x-y]++;
	}
	for(i=0;i<m;i++)
	{
		for(j=0;j<8;j++)
		{
			x=xx[i]+dx[j];
			y=yy[i]+dy[j];
			if(valid(x,y))
			{
				mat[x][y]++;
			}
		}
	}
	  int ans=0;
	for(i=1;i<=n;i++)
	for(j=1;j<=n;j++)
	if(mat[i][j]>=2)ans++;
	cout<<ans<<endl;
}

return 0;
}