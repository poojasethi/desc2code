#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>

using namespace std;

int board[2000][2000];
int r[2000]; // attacked_row
int c[2000]; // attacked_col
int d1[5000]; // attacked_diagonal1(top left corner
int d2[5000]; // attacked diagonal 2(bottom left corner)
int xi[] = {1, 1, -1, -1, 2, 2, -2, -2};
int yi[] = {2, -2, 2, -2, 1, -1, 1, -1};
int n;

bool valid(int x, int y)
{
    return (x >= 0 && x <= n && y >= 0 && y <= n);
}

int main()
{
    int t;
    cin >> t;
    while (t--) {
        memset(board, 0, sizeof(board));
        memset(r, 0, sizeof(r));
        memset(c, 0, sizeof(c));
        memset(d1, 0, sizeof(d1));
        memset(d2, 0, sizeof(d2));
        int m, i, j, k;
        cin >> n >> m;
        int x, y;
        for (i = 0; i < m; i++) {
            cin >> x >> y;
            board[x][y]++;
            r[x] = 1;
            c[y] = 1;
            d1[x + y] = d2[x - y + n] = 1;
        }
        int ans = 0;
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (r[i] == 1 || c[j] == 1 || d1[i + j] == 1 || d2[i - j + n] == 1) continue;
                int ctr = 0;
                for (k = 0; k < 8; k++) {
                    int xx = i + xi[k];
                    int yy = j + yi[k];
                    if (valid(xx, yy)) {
                        ctr += board[xx][yy];
                    }
                }
                if (ctr >= 2) ans++;
            }
        }
        cout << ans << endl;
    }
    return 0;
}
