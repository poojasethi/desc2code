#include <cmath>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <stack>
#include <map>
#include <set>
#include <queue>
using namespace std;

int d1[100005];
int d2[100005];
char s[100005];

struct item{
	int l, x;
	bool open;
	bool operator<(const item &sec) const {
		return l != sec.l ? l < sec.l : x != sec.x ? x < sec.x : open > sec.open;
	}
} arr[100005];



int v[100005];

int main(){
	int T;
	scanf("%d", &T);
	for (int I=0; I<T; I++){
		scanf("%s", s);
		int l = 0, r = -1, n = strlen(s);
		for (int i=0; i<n; i++){
			int k = (i > r ? 0 : min(d1[l+r-i], r-i))+1;
			while (i+k < n && i-k >=0 && s[i+k] == s[i-k]) {
				++k;
			}
			d1[i] = --k;
			if (i+k > r) {
				l = i-k;
				r = i+k;
			}
		}
		l = 0;
		r = -1;
		for (int i=0; i<n; i++){
			int k = (i > r ? 0 : min(d2[l+r-i+1], r-i+1))+1;
			while (i+k-1 < n && i-k >=0 && s[i+k-1] == s[i-k]) {
				++k;
			}
			d2[i] = --k;
			if (i+k-1 > r) {
				l = i-k;
				r = i+k-1;
			}
		}

		{
			int bg = -1, en = n+1;
			priority_queue<int> SS;
			for (int i=0; i<n; i++){
				arr[i].l = 2*d1[i] + 3;
				arr[i].x = i;
				arr[i].open = true;
			}
			sort(arr, arr+n);
			l = 0;

			for (int i=1; i<=n; i += 2) {
				while (l < n && arr[l].l <= i){
					SS.push(-arr[l].x);
					l++;
				}
				while (!SS.empty()){
					int v = -SS.top();
					if (2*min(v+1, n-v) + 1 <= i){
						SS.pop();
					} else {
						break;
					}
				}
				if (SS.empty()){
					v[i] = 0;
				} else {
					v[i] = -SS.top() - (i >> 1) + 1;
				}
			}
		}
		// Odd are ready.
		{
			priority_queue<int> SS;
			for (int i=0; i<n; i++){
				arr[i].l = d2[i]+1;
				arr[i].x = i;
				arr[i].open = true;
			}
			sort(arr, arr+n);
			l = 0;
			for (int i=2; i<=n; i += 2) {
				while (l < n && arr[l].l <= (i >> 1)){
					SS.push(-arr[l].x);
					l++;
				}
				while (!SS.empty()){
					int v = -SS.top();
					if (min(v+1, n-v+1) <= i/2){
						SS.pop();
					} else {
						break;
					}
				}
				if (SS.empty()){
					v[i] = 0;
				} else {
					v[i] = -SS.top() - (i >> 1) + 1;
				}
			}
		}

		unsigned long long ret = 0;
		for (int i=1; i<=n; i++){
			ret = ret * 100007 + v[i];
		}
		cout << ret << "\n";
	}
	return 0;
}
