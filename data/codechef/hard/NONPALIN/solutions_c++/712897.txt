#pragma hdrstop
#define _CRT_SECURE_NO_WARNINGS
//#pragma comment(linker, "/STACK:32000000")
#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<utility>
#include<cstdlib>
#include<queue>
#include<deque>
#include<set>
#include<map>
#include<vector>
#include<algorithm>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<ctime>
#include<cctype>
 
using namespace std;
 
typedef long long li;
typedef pair <int, int> pi;
typedef pair<li, li> pli;
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
 
const long double PI = 3.141592653589793238462643l;
void solve ();
 
int main()
{
        #ifdef _DEBUG
                freopen ("in.txt", "r", stdin);
        #endif
	int t;
	cin>>t;
	while (t--)
    solve();
    return 0;
}
//#define int li
int k[200000];
string s;
int n;
void clear ()
{
	memset (k, 0, sizeof k);
	s.resize(0);
	n=0;
}
unsigned long long count ()
{
	unsigned long long sum=1;
	unsigned long long ans=0;
	for ( int i=n; i>0; i-- )
	{
		ans+=(unsigned long long)sum*k[i];
		sum*=100007;
	}
	return ans;
}
long long prefhashes[200500], suffhashes[200500];
long long p=2011;
long long step[200500];
long long suff (int l, int r)
{
	if (r==n-1)
		return suffhashes[l];
	return suffhashes[l]-suffhashes[r+1]*step[r-l+1];
}
bool is_palindrome ( int r )
{
	if ( r%2 )
	{
		int z=r/2;
		if ( prefhashes[z]==suff (z+1, r) )
			return true;
		return false;
	}
	else 
	{
		int z=(r-1)/2;
		if ( prefhashes[z]==suff (z+2, r) )
			return true;
		return false;
	}
}
void solve()
{
	clear();
    cin>>s;
	n=s.length();
	step[0]=1;
	for (int i=1; i<=n; i++)
		step[i]=step[i-1]*p;
    int u=n;
	k[1]=0;
	if ( n==1 )
	{
		cout<<"0\n";
		return;
	}
	for ( int i=1; i<n; i++ )
		if ( s[i]!=s[i-1] )
		{
			u=i;
			break;
		}
	if (u==n)
	{
		cout<<"0\n";
		return;
	}
	//cout<<u<<endl;
	for ( int i=2; i<=u; i++ )
		k[i]=u-i+2;
	int t=-1;
	for ( int i=0; i<n; i++ )
		if ( s[i]!=s[i%2] )
		{
			t=i;
			break;
		}
	t++;
	prefhashes[0]=s[0];
	for (int i=1; i<n; i++)
		prefhashes[i]=prefhashes[i-1]*p+s[i];
	suffhashes[n-1]=s[n-1];
	for (int i=n-2; i>=0; i--)
		suffhashes[i]=suffhashes[i+1]*p+s[i];
	if (is_palindrome(n-1))
		k[n]=0;
	else 
		k[n]=1;
	for ( int i=u; i<n-1; i++ )
		if ( is_palindrome(i) )
		{
			if (u>1 || i%2)
			{
				k[i+1]=2;
				continue;
			}
			else 
			{
				if (t==0)
					k[i+1]=0;
				else
					if ( t<=i )
						k[i+1]=2;
					else 
					k[i+1]=t-i;
			}
		}
		else 
			k[i+1]=1;
	
	//for (int i=1; i<=n; i++)
	//	cout<<k[i]<<' ';
	//cout<<endl;
	
	cout<<count()<<endl;
}