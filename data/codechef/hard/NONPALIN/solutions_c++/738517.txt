// vin_74
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <string>
#include <bitset>
#include <cmath>
#include <list>
#include <cstdlib>
#include <map>
#include <cstring>
#include <set>
#include <stack>
#include <sstream>
#include <queue>
#include <ctime>

using namespace std;

#define debug(x) cout<<#x<<" = "<<x<<"\n"
#define   REP(i,n) for((i)=0;(i)<(n);(i)++)
#define  INF (1<<29)
#define         pb push_back
#define 	     sz size()
#define         mp make_pair
#define 	all(a) a.begin(),a.end()
#define fill(ar,val) memset(ar,val,sizeof ar)
#define       min(a,b) ((a)<(b)?(a):(b))
#define         max(a,b) ((a)>(b)?(a):(b))
#define FORE(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;

int z[200002];

int main()
{
	int T, i;
	scanf("%d",&T);
	while(T--) {
		string s;
		cin >> s;
		int n = s.length();
		int e = n, o = n;
		REP(i,n-1) {
			if(s[i] != s[i+1]) { e = i+1; break;}
		}
		REP(i,n-2) {
			if(s[i] != s[i+2]) { o = i+2; break;}
		}

		string t = s;
		reverse(all(t));
		s += t;

		// ----------------  z-algorithm ---------------------
	/*	int r = 0,l = 0;
		
		for(i = 1; i < 2*n; i++) {
			if(i > r) {
				l = r = i;
				while(r < 2*n && s[r-l]==s[r]) r++;
				z[i] = r-l; r--;
			}
			else {
				if(z[i-l] < r-l+1) z[i] = z[i-l];
				else {
					l = i;
					while(r < 2*n && s[r-l]==s[r]) r++;
					z[i] = r-l; r--;
				}
			}
		}
		*/
		// -------------- z - algo for calculating length of prafix 
		int k,l=0,r=0;
		for(k=1;k<2*n;k++)
		{
			z[k]=0;
			if(z[k-l]<r-k) z[k]=z[k-l]; else
			{
				i=r<k?0:r-k;
				for(;i+k<2*n && s[i+k]==s[i];i++);
				if(i) z[k]=i,l=k,r=k+i-1;
			}
		}
		// so that we can chek for prafix - palindrom in O(1)

		int kl, temp;
		unsigned long long ans = 0;
		for (int l = 1; l <= n; l++) {
			temp = l%2==0 ? e : o;
			if(temp >= l) {
				kl = temp-l+1;
			}
			else {
				kl = z[2*n-l]>=l ? 1 : 0;
			}
			if(kl==n-l+1 || l==1) kl = 0; else kl++;
			ans = 100007*ans + kl;
		}
		printf("%llu\n",ans);
	}
	return 0;
}
					

