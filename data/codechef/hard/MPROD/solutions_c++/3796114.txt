#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MAXPRIME = 10000;
const int MOD = 1000000007;

vector<int> prime;
bool primeTag[MAXPRIME];

void initPrime() {
  FOR(i, 2, MAXPRIME) if (!primeTag[i]) {
    prime.push_back(i);
    for (int j = i * i; j < MAXPRIME; j += i) primeTag[j] = true;
  }
}

const int MAXN = 20000;

int n, a[MAXN], cnt[32];
map<int, int> primeMap, remMap;

int calc() {
  while (!remMap.empty()) {
    int size1 = remMap.rbegin()->first, cnt1 = remMap.rbegin()->second; remMap.erase(size1);
    if (cnt1 > 1) {
      if (size1 > 1) remMap[size1 - 1] += cnt1 / 2 * 2;
      if (cnt1 & 1) remMap[size1]++;
    } else if (!remMap.empty()) {
      int size2 = remMap.rbegin()->first, cnt2 = remMap.rbegin()->second; remMap.erase(size2);
      if (size1 > 1) remMap[size1 - 1]++;
      if (size2 > 1) remMap[size2 - 1]++;
      if (cnt2 > 1) remMap[size2] += cnt2 - 1;
    } else {
      remMap[size1] = cnt1;
      break;
    }
  }
  return remMap.empty() ? 0 : remMap.begin()->first;
}

int main() {
  initPrime();
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    scanf("%d", &n);
    FOR(i, 0, n) scanf("%d", &a[i]);
    int res = 1;
    FOREACH(it, prime) {
      memset(cnt, 0, sizeof(cnt));
      FOR(i, 0, n) if (!(a[i] % *it)) {
        int subCnt = 1;
        a[i] /= *it;
        while (!(a[i] % *it)) {
          subCnt++;
          a[i] /= *it;
        }
        cnt[subCnt]++;
      }
      remMap.clear();
      FOR(i, 1, 30) if (cnt[i]) remMap[i] = cnt[i];
      int minRes = calc();
      FOR(i, 0, minRes) {
        res = (long long)res * *it % MOD;
      }
    }
    primeMap.clear();
    FOR(i, 0, n) if (a[i] > 1) {
      primeMap[a[i]]++;
    }
    FOREACH(it, primeMap) if (it->second & 1) {
      res = (long long)res * it->first % MOD;
    }
    printf("%d\n", res);
  }
  return 0;
}