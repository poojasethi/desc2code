#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<cmath>
#include<vector>
#include<assert.h>
#include<set>
#include<queue>
#define mp make_pair
#define pb push_back
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define F first
#define S second
#define ll long long
#define pp pair<int,int>
#define INF 2000000000
#define P 1000000007ll
using namespace std;
const int N=20005;
int n,i,j,T,a[N],x,lp[10005],k,y;
vector<int> pr;
ll ans;
priority_queue<int> Q;


ll xar(ll a,int k){
   ll ans=1;
   while(k){
      if(k&1)ans=(ans*a)%P;
      a=(a*a)%P;
      k>>=1;
   }
   return ans;
}

void solve(int pr){
        int A=0,B=0,t,ele,op;
        while(Q.size())Q.pop();
        for(i=1;i<=n;i++){
            x=0;
            while(a[i]%pr==0)a[i]/=pr,x++;
            A+=x;
            B=MAX(B,x);
            if(x>0)Q.push(x);
        }


        ele=MAX((A&1),B*2-A);
        while(Q.size()>1){
              x=Q.top(); Q.pop();
              y=Q.top(); Q.pop();
              x--;
              y--;

              if(x>0)Q.push(x);
              if(y>0)Q.push(y);
       }
       if(!Q.empty())op=Q.top();else op=0;
       //if(op!=ele)cout<<op<<' '<<ele<<endl,assert(0);

        ans=(ans*xar(pr,op))%P;
}

main()
{for(i=2;i<10001;i++){
     if(!lp[i])lp[i]=i,pr.pb(i);
     for(j=0;j<pr.size() && pr[j]<=lp[i] && i*pr[j]<10001;j++)
        lp[i*pr[j]]=pr[j];
   }
 scanf("%d",&T);
 while(T--){
    scanf("%d",&n);
    for(i=1;i<=n;i++)scanf("%d",&a[i]);

    ans=1;
    for(j=0;j<pr.size();j++){
        solve(pr[j]);
    }

    sort(a+1,a+n+1);
    for(i=2;i<=n;i++)
        if(a[i]==a[i-1])a[i]=a[i-1]=1;
    for(i=1;i<=n;i++)ans=(ans*a[i])%P;
    cout<<ans<<endl;
 }

}
