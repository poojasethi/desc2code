#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>
#include <stdlib.h>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}


int prime[10000];
bitset<40010> visited;
typedef priority_queue<int> pr;
typedef pair<int,int> ii;
vector<pr> vec;
map<int,int> largefact;
map<int,int>::iterator it;

int buildseive(int n)
{
int i,j,x,y;
  visited.reset();
    j = 0;
    for(i = 2;i<=n;i++)
    {
      if(visited[i] == 0)
      {
       prime[j] = i;
       j++;
      }
      x = 2;
      y = x*i;
      while(y<=n)
      {
        visited[y] = 1;
        x++;
        y = x*i;
      }
    }
    return j-1;

}


void factorize(int x)
 {
    int idx = 0 , pf = prime[idx];
    while(x != 1 && (pf*pf<=x))
     {
        if(x % pf == 0)
         {
           int c = 0; 
           while(x % pf == 0)
            {
              x /= pf;
              c++;       
            }
           vec[pf].push(c);       
         }
         pf = prime[++idx];      
     }
     if(x != 1)
      {
         if(x<40005) vec[x].push(1);
         else //
          {
            if(largefact.count(x) == 0)
              largefact[x] = 1;
            else
              {
               it = largefact.find(x);
               it->second += 1;             
              }      
          }   
      } 
     
 }
 
 
 ll po(ll a, ll b)
 {
  ll r;
  if(b==0) return 1;
  r = po(a,b/2);
  r = (r*r)%mod;
  if(b%2) r = (r*a)%mod;
  return r;
 }

int main() {

    int test,n;
    inp(test);
    buildseive(40004);
    while(test--)
     {
      inp(n);
      vec.assign(40010,pr());
      FOR(i,1,n)
       {
         int x;inp(x);
         factorize(x);           
       }
      
      ll ans = 1; 
      FOR(i,1,40005)
       {
        if(vec[i].size() > 0)
         {
            while(vec[i].size()>1)
             {
               int a = vec[i].top();vec[i].pop();
               int b = vec[i].top();vec[i].pop();
               a--;b--;
               if(a>0) vec[i].push(a);
               if(b>0) vec[i].push(b);                        
             }
            if(vec[i].size())
             {
               ans = (ans*po((ll)i,(ll)vec[i].top()))%mod;
               vec[i].pop();
               
             }              
         }             
       }
       
       for(it=largefact.begin();it!=largefact.end();it++)
        {
           int num = it->first;
           int c = it->second;
           if(c%2) 
            {
              ans = (ans*(ll)num)%mod;       
            }                                                
        }
        printf("%lld\n",ans);
        vec.clear();largefact.clear();           
     }
    
    
    
    //getchar();
    //getchar();
	return 0;
} 
