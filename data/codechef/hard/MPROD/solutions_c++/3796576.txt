#include <algorithm>
#include <string>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <cassert>
#include <queue>
#include <cstdlib>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define lli long long int
#define all( gg )	gg.begin(),gg.end()
#define foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define FP( ii,aa,bb ) for( int ii=aa;ii<=bb;ii++ )
#define FM( ii,aa,bb ) for( int ii=aa;ii>=bb;ii-- )

using namespace std;

int n,x,ind,a[1000000];
map<int,int>	yer;
priority_queue<int>	v[1000000];

int main(){
//	freopen("schul.in","r",stdin);
//	freopen("schul.out","w",stdout);
	int t,cnt;
	lli r,x,y;
	cin >> t;
	while( t-- ){
		cin >> n;
		ind = 0;
		yer.clear();
		while( n-- ){
			scanf("%lld",&x);
			if( x==0 )	break;
			for(int i=2;i*i<=x;i++){
				if( x%i )	continue;
				cnt = 0;
				while( x%i==0 ){
					cnt++;
					x /= i;
				}
				if( yer[i]==0 )	{	yer[i] = ++ind;a[ind]=i; assert(v[yer[i]].size()==0);	}
				v[yer[i]].push(cnt);
			}
			if( x!=1 ){
				if( yer[x]==0 ){	yer[x] = ++ind;a[ind]=x; assert(v[yer[x]].size()==0);	}
				v[yer[x]].push(1);
			}
		}
		r = 1;
		FP( i,1,ind ){
			while( v[i].size()>1 ){
				x = v[i].top();
				v[i].pop();
				y = v[i].top();
				v[i].pop();
				x--;
				y--;
				if( x )	v[i].push( x );
				if( y )	v[i].push( y );
			}
			if( v[i].size() ){
				x = v[i].top();
				FP( c,1,x )	r = r*a[i]%1000000007LL;
				v[i].pop();
				assert( v[i].size()==0 );
			}
		}
		assert( ind<1000000 );
		cout << r << endl;
	}
}

