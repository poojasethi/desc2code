#include <cassert>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <climits>
#include <cstddef>
#include <cctype>
#include <cmath>
#include <cstring>
#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <numeric>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
#include <list>
#include <string>
#include <functional>
#include <utility>
using namespace std;
typedef long long llint;
int const N = 100000;
int const SQ = 317;
int const MAX_H = 1000000000;
int n;
int health[N + 1];
vector <int> g[N + 1];
int cnt;
int pre_order[N + 1];
int bd[N + 1][2];
struct Bucket
{
    vector <pair <int, int> > vals;
    int dec;
    void apply(int l, int r, int x)
    {
        for (vector <pair <int, int> >::iterator it = vals.begin(); it != vals.end(); ++it)
        {
            if (it->second >= l && it->second <= r)
            {
                it->first -= x;
            }
        }
        sort(vals.begin(), vals.end());
    }
    int get(int l, int r)
    {
        int ret = 0;
        for (vector <pair <int, int> >::const_iterator it = vals.begin(); it != vals.end(); ++it)
        {
            if (it->second >= l && it->second <= r && it->first > dec)
            {
                ++ret;
            }
        }
        return ret;
    }
    int getall()
    {
        return vals.end() - upper_bound(vals.begin(), vals.end(), make_pair(dec, N + 1));
    }
};
Bucket buckets[SQ];
void traverse(int u)
{
    pre_order[cnt++] = u;
    bd[u][0] = cnt;
    for (vector <int>::const_iterator it = g[u].begin(); it != g[u].end(); ++it)
    {
        traverse(*it);
    }
    bd[u][1] = cnt;
}
void update(int l, int r, int x)
{
    int b = (l - 1) / SQ, e = (r - 1) / SQ;
    if (b == e)
    {
        buckets[b].apply(l, r, x);
        return;
    }
    buckets[b].apply(l, r, x);
    buckets[e].apply(l, r, x);
    for (int i = b + 1; i < e; ++i)
    {
        buckets[i].dec += x;
    }
}
int query(int l, int r)
{
    int b = (l - 1) / SQ, e = (r - 1) / SQ;
    if (b == e)
    {
        return buckets[b].get(l, r);
    }
    int ret = 0;
    ret += buckets[b].get(l, r);
    ret += buckets[e].get(l, r);
    for (int i = b + 1; i < e; ++i)
    {
        ret += buckets[i].getall();
    }
    return ret;
}
int main()
{
    // tree
    scanf("%d", &n);
    for (int i = 1, j, k; i <= n; ++i)
    {
        scanf("%d%d", &j, &k);
        health[i] = j;
        g[k].push_back(i);
    }
    cnt = 0;
    traverse(0);
    // init
    vector <pair <int, int> > *p_vals = NULL;
    for (int i = 1; i <= n; ++i)
    {
        if ((i - 1) % SQ == 0)
        {
            if (p_vals != NULL)
            {
                sort(p_vals->begin(), p_vals->end());
            }
            p_vals = &(buckets[(i - 1) / SQ].vals);
        }
        p_vals->push_back(make_pair(health[pre_order[i]], i));
    }
    sort(p_vals->begin(), p_vals->end());
    // update & query
    int q;
    int op, a, x;
    scanf("%d", &q);
    while (q--)
    {
        scanf("%d", &op);
        if (op == 1)
        {
            scanf("%d%d", &a, &x);
            if (bd[a][0] < bd[a][1])
            {
                update(bd[a][0], bd[a][1] - 1, x);
            }
        }
        else
        {
            scanf("%d", &a);
            printf("%d\n", bd[a][0] < bd[a][1] ? query(bd[a][0], bd[a][1] - 1) : 0);
        }
    }
    return 0;
}
