#include<iostream>
#include<vector>
#include<stdio.h>
using namespace std;
typedef pair < int, int >pii;
typedef long long ll;
vector < vector < int > >edgeList;
vector < ll > value;
vector < pair < int, int > >se;
vector < ll > pre;
int t = 0;
/*
Tree Code
*/
struct NODE {
    ll min;
    int numOfZero;
} tree[2000000];
ll lazy[2000000];
ll MIN(ll a, ll b)
{
    return a < b ? a : b;
}

void printTree(int node, int a, int b, int spaces)
{
    for (int i = 0; i < spaces; i++) {
	printf(" ");
    }
    printf("%d %d %lld %d %d\n", a, b, tree[node].min,
	   tree[node].numOfZero, lazy[node]);
    if (a != b) {
	int mid = (a + b) / 2;
	printTree(2 * node + 1, a, mid, spaces + 1);
	printTree(2 * node + 2, mid + 1, b, spaces + 1);
    }
}

void buildTree(int node, int a, int b)
{
    tree[node].numOfZero = 0;
    lazy[node] = 0;
    if (a == b) {
	tree[node].min = pre[a];
    } else {
	int mid = (a + b) / 2;
	buildTree(2 * node + 1, a, mid);
	buildTree(2 * node + 2, mid + 1, b);
	tree[node].min =
	    MIN(tree[2 * node + 1].min, tree[2 * node + 2].min);
    }
}

ll count(int node, int a, int b, int l, int r)
{
    if (a > b) {
	return 0;
    }
    if (lazy[node] != 0) {
	tree[node].min = tree[node].min - lazy[node];
	if (a != b) {
	    lazy[2 * node + 1] += lazy[node];
	    lazy[2 * node + 2] += lazy[node];
	}
	lazy[node] = 0;
    }
    if (a > r || b < l) {
	return 0;
    }
    if (a >= l && b <= r) {
	return tree[node].numOfZero;
    } else {
	int mid = (a + b) / 2;
	return count(2 * node + 1, a, mid, l, r) + count(2 * node + 2,
							 mid + 1, b, l, r);
    }
}

void update(int node, int a, int b, int l, int r, int value)
{
    if (a > b || l > r) {
	return;
    }
    if (lazy[node] != 0) {
	tree[node].min = tree[node].min - lazy[node];
	if (a != b) {
	    lazy[2 * node + 1] += lazy[node];
	    lazy[2 * node + 2] += lazy[node];
	}
	lazy[node] = 0;
    }
    if (a > r || b < l) {
	return;
    }
    if (a == b) {
	if (tree[node].min > value) {
	    tree[node].min = tree[node].min - value;
	} else {
	    tree[node].min = 200000000;
	    tree[node].numOfZero = 1;
	}
	return;
    }

    if (a >= l && b <= r) {
	if (tree[node].min > value) {
	    tree[node].min = tree[node].min - value;
	    if (a != b) {
		lazy[2 * node + 1] += value;
		lazy[2 * node + 2] += value;
	    }
	} else {
	    if (a != b) {
		int mid = (a + b) / 2;
		update(2 * node + 1, a, mid, l, r, value);
		update(2 * node + 2, mid + 1, b, l, r, value);
		tree[node].min =
		    MIN(tree[2 * node + 1].min, tree[2 * node + 2].min);
		tree[node].numOfZero =
		    tree[2 * node + 1].numOfZero + tree[2 * node +
							2].numOfZero;
	    } else {
		tree[node].numOfZero = 1;
		tree[node].min = 200000000;
	    }
	}
	return;
    }
    int mid = (a + b) / 2;
    update(2 * node + 1, a, mid, l, r, value);
    update(2 * node + 2, mid + 1, b, l, r, value);
    tree[node].min = MIN(tree[2 * node + 1].min, tree[2 * node + 2].min);
    tree[node].numOfZero =
	tree[2 * node + 1].numOfZero + tree[2 * node + 2].numOfZero;
}

void visit(int node)
{
    se[node].first = t;
    pre.push_back(value[node]);
//cout<<node<<" "<<pre[pre.size()-1]<<endl;
    int len = edgeList[node].size();
    for (int i = 0; i < len; i++) {
	int next = edgeList[node][i];
	t++;
	visit(next);
    }
    se[node].second = t;
}

int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i <= n; i++) {
	edgeList.push_back(vector < int >());
	value.push_back(0);
	se.push_back(pii(0, 0));
    }
    value[0] = 0;
    for (int i = 1; i <= n; i++) {
	int a, b;
	scanf("%d%d", &a, &b);
	edgeList[b].push_back(i);
	value[i] = a;
    }
    visit(0);
////cout<<endl;
    buildTree(0, 0, n);
    int q;
    scanf("%d", &q);
// printTree(0,0,n,0);
    while (q--) {
	int opt;
	scanf("%d", &opt);
	if (opt == 1) {
	    int a, x;
	    scanf("%d%d", &a, &x);
//cout<<se[a].first<<" "<<se[a].second<<endl;
	    update(0, 0, n, se[a].first + 1, se[a].second, x);
	} else {
	    int a;
	    scanf("%d", &a);
	    int ans = count(0, 0, n, se[a].first + 1, se[a].second);
	    ans = se[a].second - se[a].first - ans;
	    printf("%d\n", ans);
	}
// printTree(0,0,n,0);
// printf("\n");
    }
}
