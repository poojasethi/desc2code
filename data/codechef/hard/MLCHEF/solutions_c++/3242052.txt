#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#define Max 100005
#define inf 2000000000

using namespace std;

int n,alive[4*Max],mn[4*Max],lazy[4*Max],h[Max],hh[Max],ll[Max],rr[Max],tme;
vector <int> myvec[Max];

void dfs(int x)
{
    //cout<<x<<endl;
    int i,j,k;

    ll[x]=tme;

    for(i=0;i<myvec[x].size();i++)
    {
        j=myvec[x][i];

        dfs(j);

    }
    rr[x]=tme-1;

    hh[tme]=h[x];
    tme++;

}

void build(int node,int l,int r)
{
    if(l==r)
    {
        alive[node]=1;
        mn[node]=hh[l];
        lazy[node]=0;
        return;
    }

    build(2*node,l,(l+r)/2);
    build(2*node+1,(l+r)/2+1,r);

    alive[node]=alive[2*node]+alive[2*node+1];
    mn[node]=min(mn[2*node],mn[2*node+1]);
}

void update(int node,int l,int r,int ql,int qr,int val)
{
    //cout<<
    if(ql>r || qr<l) return;

    if(l>=ql && r<=qr)
    {
        mn[node]-=val;
        //printf("( %d , %d  ) : %d\n",l,r,mn[node]);
        lazy[node]+=val;
        return;
    }

    mn[2*node]-=lazy[node];
    lazy[2*node]+=lazy[node];
    update(2*node,l,(l+r)/2,ql,qr,val);

    mn[2*node+1]-=lazy[node];
    lazy[2*node+1]+=lazy[node];
    update(2*node+1,(l+r)/2+1,r,ql,qr,val);

    lazy[node]=0;

    alive[node]=alive[2*node]+alive[2*node+1];
    mn[node]=min(mn[2*node],mn[2*node+1]);

}

void reform(int node,int l,int r)
{
    if(l==r)
    {
        if(mn[node]<=0)
        {
            //cout<<node<<endl;
            alive[node]=0;
            mn[node]=inf;
        }

        return;
    }

    mn[2*node]-=lazy[node];
    lazy[2*node]+=lazy[node];

    mn[2*node+1]-=lazy[node];
    lazy[2*node+1]+=lazy[node];

    lazy[node]=0;

    if(mn[node]>0) return;

    reform(2*node,l,(l+r)/2);
    reform(2*node+1,(l+r)/2+1,r);

    alive[node]=alive[2*node]+alive[2*node+1];
    mn[node]=min(mn[2*node],mn[2*node+1]);


}

int query(int node,int l,int r,int ql,int qr)
{
    if(ql>r || qr<l) return 0;

    if(l>=ql && r<=qr)  return alive[node];


    mn[2*node]-=lazy[node];
    lazy[2*node]+=lazy[node];

    mn[2*node+1]-=lazy[node];
    lazy[2*node+1]+=lazy[node];

    lazy[node]=0;

    int q1=query(2*node,l,(l+r)/2,ql,qr);
    int q2=query(2*node+1,(l+r)/2+1,r,ql,qr);

    alive[node]=alive[2*node]+alive[2*node+1];
    mn[node]=min(mn[2*node],mn[2*node+1]);

    return q1+q2;
}

int main()
{
    int i,j,k,q,x,v;

    //freopen("in.txt","r",stdin);

    scanf("%d",&n);

    for(i=1;i<=n;i++)
    {
        scanf("%d %d",&h[i],&j);

        myvec[j].push_back(i);
    }

    tme=1;

    dfs(0);


    //for(i=0;i<=n;i++) printf("%d: %d , %d\n",i,ll[i],rr[i]);

    build(1,1,n);

    scanf("%d",&q);

    for(i=0;i<q;i++)
    {
        scanf("%d %d",&k,&x);

        if(k==1)
        {
            scanf("%d",&v);

            update(1,1,n,ll[x],rr[x],v);

            reform(1,1,n);
        }

        else
        {
            printf("%d\n",query(1,1,n,ll[x],rr[x]));
        }
    }

    return 0;
}
