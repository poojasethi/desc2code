#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#define printinput for(int i=0; i<k; i++)  { cout<<xi[i]<<" "<<yi[i]<<" "<<ti[i]<<endl; }

using namespace std;

const int maxK = 1005;

struct event;
int k;//number of events
int xi[maxK], yi[maxK], ti[maxK];//to store event data
vector<event>v;
vector<event>p;//for preprocessing

int abs(int a){return a>=0?a:-a;}
int dist(int x1, int y1, int x2, int y2){return abs(x1-x2)+ abs(y1 - y2);}
struct event
{
    int t;
    int x;
    int y;
    int dist;
    vector<int>next;

};
 event set(int x, int y, int t)
 {
     event e;

     e.x = x;
     e.y = y;
     e.t = t;
     e.dist = 0;
     return e;
 }
bool order(event e1, event e2)
{
    if(e1.t<e2.t)return 1;
    if(e1.t == e2.t && dist(e1.x, e1.y, 0, 0)< dist(e2.x, e2.y, 0, 0)) return 1;
    return 0;
}
bool sorder(event e1, event e2)
{
    int diff1 = e1.t - dist(e1.x, e1.y, 0, 0);
    int diff2 = e2.t - dist(e2.x, e2.y, 0, 0);
    if(diff1>diff2)return 1;
    return 0;
}

int maxi(int a, int b)
{
    return a>b?a:b;
}



int main()
{
    int t;
    scanf("%d", &t);

    while(t--)
    {
     v.clear();
     p.clear();
     event e;
     int x, y, t;
     scanf("%d", &k);
     e = set(0,0,0);
     p.push_back(e);
     for(int i=0; i<k; i++)
     {
         scanf("%d%d%d", &x, &y, &t);
         e = set(x,y,t);
         p.push_back(e);
     }

     sort(p.begin() + 1, p.end(), sorder);
     /*for(int i=0; i<p.size(); i++)
     {
         cout<<p[i].x<<" "<<p[i].y<<" "<<p[i].t<<endl;
     }*/
     v.push_back(p[0]);

      for(int i=1; i<p.size(); i++)
      {
          if(dist(0,0,p[i].x, p[i].y)<= p[i].t )
          {
              v[0].next.push_back(i);
              v.push_back(p[i]);
          }
          else break;

      }
      sort(v.begin(), v.end(), order);
      for(int i=1; i<v.size(); i++)
      {
            for(int j=i+1; j<v.size(); j++)
              {
                  if(dist(v[i].x, v[i].y, v[j].x, v[j].y)<= v[j].t - v[i].t)
                  {
                      v[i].next.push_back(j);
                  }
              }
      }
     /*  for(int i=0; i<v.size(); i++)
     {
         cout<<v[i].x<<" "<<v[i].y<<" "<<v[i].t<<" "<<v[i].dist<<endl;
         for(int j=0; j<v[i].next.size(); j++)
         cout<<v[i].next[j]<<" ";
         cout<<endl;
     }*/

     //finding longest path
     for(int i=0; i<v.size(); i++)
     {
         for(int j=0; j<v[i].next.size(); j++)
         {
             v[v[i].next[j]].dist = maxi(v[v[i].next[j]].dist, v[i].dist + 1);
         }
     }
     /* for(int i=0; i<v.size(); i++)
     {
         cout<<v[i].x<<" "<<v[i].y<<" "<<v[i].t<<" "<<v[i].dist<<endl;

     }*/
     //finding the maximum
     int m = 0, mt;
     for(int i=1; i<v.size(); i++)
     {
         if(v[i].dist>m)
         {
             m = v[i].dist;
             mt = v[i].t;
         }
     }
    if(m == 0)printf("%s\n", "No Photos");
    else printf("%d %d\n", m, mt);

    }
}
