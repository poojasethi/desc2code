// Artur Kraska, II UWr
 
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <cmath>
#include <list>
#include <set>
#include <map>
 
#define forr(i, n)                  for(int i=0; i<n; i++)
#define FOREACH(iter, coll)         for(typeof(coll.begin()) iter = coll.begin(); iter != coll.end(); ++iter)
#define FOREACHR(iter, coll)        for(typeof(coll.rbegin()) iter = coll.rbegin(); iter != coll.rend(); ++iter)
#define lbound(P,R,PRED)            ({typeof(P) X=P,RRR=(R), PPP = P; while(PPP<RRR) {X = (PPP+(RRR-PPP)/2); if(PRED) RRR = X; else PPP = X+1;} PPP;})
#define testy()                     int _tests; scanf("%d", &_tests); forr(_test, _tests)
#define CLEAR(tab)                  memset(tab, 0, sizeof(tab))
#define CONTAIN(el, coll)           (coll.find(el) != coll.end())
#define FOR(i, a, b)                for(int i=a; i<=b; i++)
#define FORD(i, a, b)               for(int i=a; i>=b; i--)
#define MP                          make_pair
#define PB                          push_back
 
#define M 1000000007
#define INF 1000000007
 
using namespace std;
 
int n, m;
int tab[1000007];
long long wynik;
 
int main()
{
    testy()
    {
        scanf("%d %d", &n, &m);
        CLEAR(tab);
        wynik = (long long)n*m;
        FOR(i, 1, n)
            tab[(i-1)^(n-i)]++;
        FOR(i, 1, m)
            wynik -= tab[(i-1)^(m-i)];
        printf("%lld\n", wynik);
    }
 
	return 0;
}
 