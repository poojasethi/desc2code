#include<iostream>
#include<cmath>
#include<algorithm>
#include<limits>
#include<vector>
#include<bitset>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<map>
#include<set>

using namespace std;

#define REP(i,n) for(int i=0;i<n;i++)
#define FOR(i,FROM,n) for(int i=FROM;i<n;i++)
#define FORR(i,n) for(int i=n;i>=0;i--)
#define ll long long int
#define llu long long unsigned int
#define MAX 100000001

int t,n;

int ni()
{
    int temp;
    scanf("%d",&temp);
    return temp;
}

ll nl()
{
    ll temp;
    scanf("%lld",&temp);
    return temp;
}

llu nlu()
{
    llu temp;
    scanf("%llu",&temp);
    return temp;
}

float nf()
{
    float temp;
    scanf("%f",&temp);
    return temp;
}

class squares
{
    public:
    int x,y,a,nim,indo,indn;
    vector<int> adj;
    bool operator < (const squares& s) const
	 {
		  return make_pair(x,y) < make_pair( s.x , s.y);
	 }
};

bool myfunction( squares i, squares j )    //use it to sort vectors
{
    if( i.x < j.x ) return true;
    if( j.x < i.x ) return false;
    return j.y > i.y;
}



squares s[50001];
int ans;

void tree()
{
    set<squares> ts;
    set<squares>::iterator iter,iter1;
    ts.clear();

    FORR(i,n)
    {
        squares at=s[i];
        int tx=at.x+at.a,ty=at.y+at.a;

        int till = ts.size();
        int j;
        //cout<<"for life "<<till<<endl;
        for(iter=ts.begin(),j=0;j<till;j++)
        {
            //cout<<"here "<<at.x<<" "<<at.y<<" "<<at.a<<" "<<tx<<" "<<ty<<endl;
            squares see=*iter;
            //cout<<"here "<<see.x<<" "<<see.y<<" "<<see.a<<endl;
            if(see.x>tx)
            break;
            if(see.x>at.x && see.y>at.y && see.x+see.a<tx && see.y+see.a<ty)
            {
                //cout<<"here2 "<<i<<endl;
                s[i].adj.push_back(see.indn);
                iter1=iter++;
                ts.erase(iter1);
                //cout<<"came2 "<<i<<endl;
            }
            else
            iter++;
        }
        //iter=ts.begin();
        //cout<<"here3 "<<i<<endl;
        ts.insert(iter,at);
        //cout<<"here3 "<<i<<endl;
    }
}

int setnims(int at)
{
    int tempnim=0;
    REP(i,s[at].adj.size())
    tempnim^=setnims(s[at].adj[i]);

    s[at].nim=1+tempnim;
    return 1+tempnim;
}

void findlow(int at,int nim)
{
    int nimat=s[at].nim-1;
    REP(i,s[at].adj.size())
    {
        int ind=s[at].adj[i];
        int newnim=(nim-1)^nimat^(s[ind].nim);
        findlow(ind,newnim);
        if(newnim==0 && s[ind].indo<ans && s[ind].indo!=0)
        ans=s[ind].indo;
    }
}

int main()
{
   //freopen("input.txt","r",stdin);
   //freopen("output.txt","w",stdout);

   scanf("%d",&t);
   for(int prob=0;prob<t;prob++)
   {
       n=ni();
       s[0].x=-MAX;
       s[0].y=-MAX;
       s[0].a=2*(MAX+1);
       s[0].nim=1;
       s[0].indo=0;
       s[0].adj.clear();
       FOR(i,1,n+1)
       {
           s[i].x=ni();
           s[i].y=ni();
           s[i].a=ni();
           s[i].nim=1;
           s[i].indo=i;
           s[i].adj.clear();
       }
       sort(s,s+n+1,myfunction);

       REP(i,n+1)
       s[i].indn=i;




       tree();



       setnims(0);
       /*

       REP(i,n+1)
       {
           cout<<s[i].x<<" "<<s[i].y<<" "<<s[i].indo<<" "<<s[i].indn<<" "<<s[i].adj.size()<<" "<<s[i].nim<<endl;
       }
       */


       if(s[0].nim==1)
       printf("Fit\n");
       else
       {
           ans=n+2;
           findlow(0,1);
           printf("Fat %d\n",ans);
       }
   }


   //system("pause");
   return 0;

}
