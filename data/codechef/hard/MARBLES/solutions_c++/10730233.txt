#include <iostream>
#include <map>

using namespace std;

typedef long long int Int;

class Factorization
{
public:
    Int toInt()
    {
        Int res = 1;
        map<int, int>::const_iterator it = primeToCount.begin();
        for (; it != primeToCount.end(); ++it)
        {
            int count = it->second;
            while(count--)
                res *= it->first;
        }
        return res;
    }
    
    void add(int n)
    {
        add(n, 1);
    }
    
    void subtract(int n)
    {
        add(n, -1);
    }
    
private:
    void add(int n, int sign)
    {
        for (int d = 2; d*d <= n; d = (d == 2 ? 3 : d+2))
        {
            while (n % d == 0)
            {
                primeToCount[d] = primeToCount[d] + sign;
                n /= d;
            }
        }
        if (n > 1)
            primeToCount[n] = primeToCount[n] + sign;
    }
    
    map<int, int> primeToCount;
};

int main()
{
    int T; cin >> T;
    while(T--)
    {
        int n, k; cin >> n >> k;
        n - k < k ? k = n - k + 1 : 0;
        Factorization f;
        for (int i = 1; i < k; ++i)
        {
            f.add(n-i);
            f.subtract(i);
        }
        cout << f.toInt() << endl;
    }
    return 0;
}
