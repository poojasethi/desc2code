#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
using namespace std;
#define Rep(i,n) for (int n__=(n),i=0;i<n__;i++)
#define For(i,l,r) for (int r__=(r),i=(l);i<=r__;i++)
#define PB push_back
#define MP make_pair
struct Point
{
    int x,y,d,id,s;
    Point(){}
    Point(int x,int y,int d,int id):x(x),y(y),d(d),id(id){s=0;}
};

const int size=300005;
Point vec[size*3],cur;
int n,Q,xx,yy,dd,N,tot,S;
int f[size],c[2][size];

bool cp1(Point u,Point v)
{
    if (u.x==v.x&&u.y==v.y) return u.id==0;
    return (1LL*u.x*N+u.y<1LL*v.x*N+v.y);
}

bool cp2(Point u,Point v)
{
    if (u.x+u.y+u.d==v.x+v.y+v.d) return abs(u.id)<abs(v.id);
    return u.x+u.y+u.d<v.x+v.y+v.d;
}

inline void change(int p,int u)
{
    while (u<=N)
    {
        c[p][u]++;
        u+=u&(-u);
    }
}

inline int sum(int p,int u)
{
    int tp=0;
    while (u)
    {
        tp+=c[p][u];
        u-=u&(-u);
    }
    return tp;
}

int getint()
{
    char c=getchar();
    while (!isdigit(c)) c=getchar();
    int tp=0;
    while (isdigit(c))
    {
        tp=tp*10+c-'0';
        c=getchar();
    }
    return tp;
}

int main()
{
   // freopen("1.in","r",stdin);
  //  freopen("1.out","w",stdout);
    n=getint(); Q=getint();
    N=size-1; S=0;
    Rep(i,n)
    {
        xx=getint(); yy=getint();
        vec[S++]=Point(xx,yy,0,0);
    }
    For(i,1,Q)
    {
        xx=getint(); yy=getint(); dd=getint();
        vec[S++]=Point(xx,yy,0,-i);
        vec[S++]=Point(xx,yy,dd,i);
    }

    sort(vec,vec+S,cp1);
    cur=Point(-1,-1,0,0);
    Rep(i,S)
    {
        if (vec[i].x!=cur.x||vec[i].y!=cur.y)
        {
            cur.x=vec[i].x; cur.y=vec[i].y;
            cur.s=(vec[i].id==0);
        } else
        {
            if (vec[i].id==0) cur.s++;
            else if (vec[i].id<0) vec[i].s=cur.s;
        }
    }

    sort(vec,vec+S,cp2);
    tot=0;
    Rep(i,S)
    {
     //   cout<<vec[i].x<<" "<<vec[i].y<<" "<<vec[i].id<<" "<<vec[i].d<<endl;
        if (vec[i].id==0)
        {
            tot++;
            change(0,vec[i].x);
            change(1,vec[i].y);
        } else
        if (vec[i].id<0)
        {
            f[-vec[i].id]=sum(0,vec[i].x-1)+sum(1,vec[i].y-1)-tot;
            f[-vec[i].id]+=vec[i].s;

        } else
        f[vec[i].id]=tot-sum(0,vec[i].x-1)-sum(1,vec[i].y-1)+f[vec[i].id];
    }
    For(i,1,Q) printf("%d\n",f[i]);

    return 0;
}

