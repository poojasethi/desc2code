#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int MAXN=300005;
int x[MAXN],y[MAXN],n;
inline int lowbit(int x) {
    return x&-x;
}
void add(int bit[],int x,int val) {
    for(int i=x; i<MAXN; i+=lowbit(i))
        bit[i]+=val;
}
int sum(int bit[],int x) {
    int ret=0;
    for(int i=x; i>0; i-=lowbit(i))
        ret+=bit[i];
    return ret;
}
struct point {
    int x,y;
    bool operator<(const point &oth) const {
        return x+y<oth.x+oth.y;
    }
} p[MAXN];
struct query {
    int x,y,d,idx;
    bool operator<(const query &oth) const {
        return x+y+d<oth.x+oth.y+oth.d;
    }
} q[MAXN];
template<typename T>
bool cmp(const T &a,const T &b) {
    return a.x==b.x?a.y<b.y:a.x<b.x;
}
int ans[MAXN],m;
int main() {
    while(~scanf("%d%d",&n,&m)) {
        for(int i=0; i<n; ++i)
            scanf("%d%d",&p[i].x,&p[i].y);
        for(int i=0; i<m; ++i) {
            scanf("%d%d%d",&q[i].x,&q[i].y,&q[i].d);
            q[i].idx=i;
        }
        memset(x,0,sizeof(x));
        memset(y,0,sizeof(y));
        sort(p,p+n);
        sort(q,q+m);
        for(int i=0,j=0; i<m; ++i) {
            for(; j<n; ++j) {
                if(p[j].x+p[j].y>q[i].x+q[i].y+q[i].d)
                    break;
                add(x,p[j].x,1);
                add(y,p[j].y,1);
            }
            ans[q[i].idx]=j-sum(x,q[i].x-1)-sum(y,q[i].y-1);
        }
        memset(y,0,sizeof(y));
        sort(p,p+n,cmp<point>);
        sort(q,q+m,cmp<query>);
        for(int i=0,j=0; i<m; ++i) {
            for(; j<n; ++j) {
                if(p[j].x>=q[i].x)
                    break;
                add(y,p[j].y,1);
            }
            ans[q[i].idx]+=sum(y,q[i].y-1);
        }
        for(int i=0; i<m; ++i)
            printf("%d\n",ans[i]);
    }
}
