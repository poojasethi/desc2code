#include<stdio.h>
#include<algorithm>
#include<stdlib.h>
#include<string.h>
using namespace std;
struct p
{
	int x,y;
}a[300010];
struct q
{
	int x,y,d,in;
}b[200010];
int tr[2][300010],ans[200010];
bool cpx(struct p a,struct p b)
{
	if(a.x==b.x) return a.y<b.y;
	return a.x<b.x;
}
bool cqax(struct q a,struct q b)
{
	if(a.x==b.x) return a.y<b.y;
	return a.x<b.x;
}
bool cpy(struct p a,struct p b)
{
	return a.y<b.y;
}
bool cpxy(struct p a,struct p b)
{
	return a.y+a.x<b.y+b.x;
}
bool cq(struct q a,struct q b)
{
	return a.x+a.y+a.d<b.x+b.y+b.d;
}
bool cqx(struct q a,struct q b)
{
	return a.x+a.y<b.x+b.y;
}
int read(int idx,int x)
{
	int sum=0;
	while(idx>0)
	{
		sum=sum+tr[x][idx];
		idx=idx-(idx&-idx);
	}
	return sum;
}
int update(int idx,int val,int x)
{
	while(idx<=300000)
	{
		tr[x][idx]=tr[x][idx]+val;
		idx=idx+(idx&-idx);
	}
}	
int main()
{
	int n,q,i,j,k;
	scanf("%d %d",&n,&q);
	for(i=0;i<n;i++)
	{	//printf("points\n");
		scanf("%d %d",&a[i].x,&a[i].y);
	}
	for(i=0;i<q;i++)
	{
		//printf("queries\n");
		scanf("%d %d %d",&b[i].x,&b[i].y,&b[i].d);
		b[i].in=i;
	}
	sort(b,b+q,cq);
	memset(tr,0,sizeof(tr));
	sort(a,a+n,cpxy);
	i=0;k=0;
	while(i<q)
	{
		for(j=k;j<n;j++)
		{
			if(a[j].x+a[j].y>b[i].x+b[i].y+b[i].d)
			{
				k=j;
				break;
			}
			update(a[j].x,1,0);
			update(a[j].y,1,1);
			if(j==n-1)
			{
				k=n;
			}
		}
		ans[b[i].in]=k-read(b[i].x-1,0)-read(b[i].y-1,1);
		//printf("x=%d\n",ans[b[i].in]);
		i++;	
	}
	sort(a,a+n,cpx);
	sort(b,b+q,cqax);
	memset(tr,0,sizeof(tr));
	i=0;k=0;
	while(i<q)
	{
		for(j=k;j<n;j++)
		{
			if(a[j].x>=b[i].x)
			{
				k=j;
				break;
			}
			//printf("yes %d\n",a[j].y);
			update(a[j].y,1,1);
			if(j==n-1)
			{
				k=n;
			}
		}
		ans[b[i].in]+=read(b[i].y-1,1);
		//printf("x=%d %d %d\n",ans[b[i].in],read(b[i].y-1,1),b[i].y-1);
		i++;	
	}
	for(i=0;i<q;i++)
	{
		printf("%d\n",ans[i]);
	}
}
	
	
	
	
	
	
	
	
	
	
	
	