#include <stdio.h>
#include <algorithm>
#include <math.h>

using namespace std;
const int maxn = 5e5;

struct point
{
	int x;
	int y;
	int d;
	int pos;

	point(int x, int y)
	{
		x = x;
		y = y;
	}
	point()
	{}

}puntos[maxn];

int n,q;

int abix[maxn];
int abiy[maxn];

int below[maxn];
int ans[maxn];

int compare_x(const point& a, const point& b)
{
	if(a.x != b.x)return a.x < b.x;
	else
	{
		if(a.d != b.d)return a.d > b.d;
		else
			return a.y < b.y;
	}
}

int compare_m(const point& a, const point& b)
{
	int r1 = a.x + a.y + a.d;
	int r2 = b.x + b.y + b.d;
	if(r1 != r2)return r1 < r2;
	return a.d < b.d;
}

void update(int pos, int v, int* bit, int l)
{
	while(pos <= l)
	{
		bit[pos] += v;
		pos += (pos&-pos);
	}
}

int query(int pos, int* bit, int l)
{
	int res = 0;
	while(pos)
	{
		res += bit[pos];
		pos -= (pos&-pos);
	}
	return res;
}

void solveless()
{
	sort(puntos,puntos + n + q,compare_m);


	int cant = 0;
	for(int i = 0; i < n + q; i++)
	{
		if(puntos[i].d != 0)
		{
			ans[puntos[i].pos] = cant - query(puntos[i].x - 1,abix,maxn) - query(puntos[i].y - 1,abiy, maxn);
		}
		else
		{
			cant++;
			update(puntos[i].x,1,abix,maxn);
			update(puntos[i].y,1,abiy,maxn);
		}
	}
}

void solve()
{
	fill(abix,abix + maxn,0);
	fill(abiy,abiy + maxn,0);

	sort(puntos,puntos + n + q,compare_x);


	int cant = 0;
	for(int i = 0; i < n + q; i++)
	{
		if(puntos[i].d != 0)
		{
			ans[puntos[i].pos] += query(puntos[i].y - 1,abiy, maxn);
		}
		else
		{
			cant++;
			update(puntos[i].y,1,abiy,maxn);
			//update(puntos[i].x,1,abix,maxn);
		}
	}
}

int main()
{
	scanf("%d %d", &n, &q);

	for(int i = 0; i < n; i++)
		scanf("%d %d", &puntos[i].x,&puntos[i].y);

	int p = n;
	for(int i = 0; i < q; i++)
	{
		scanf("%d %d %d", &puntos[p].x,&puntos[p].y, &puntos[p].d);
		puntos[p].pos = p++;
	}

	solveless();
	solve();
	for(int i = n; i < n + q; i++)
		printf("%d\n",ans[i]);

	return 0;
}