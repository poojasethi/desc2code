/*
 * Author:  Eyelids
 * Created Time:  2014/10/20 20:14:59
 * File Name: D.cpp
 */
#include<iostream>
#include<sstream>
#include<fstream>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cctype>
#include<cmath>
#include<ctime>
using namespace std;
const double eps(1e-8);
typedef long long lint;
#define clr(x) memset( x , 0 , sizeof(x) )
#define sz(v) ((int)(v).size())
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define repf(i, a, b) for (int i = (a); i <= (b); ++i)
#define repd(i, a, b) for (int i = (a); i >= (b); --i)
#define clrs( x , y ) memset( x , y , sizeof(x) )
const int N = 300010;
const int M = 900010;
struct Point {
    int x, y;
}   p[M];
int n, q;
vector <int> q1[M];
vector <int> q2[M];
vector <int> vec[M];
int ans[M], d[M], sumX[M], sumY[M], x[M], y[M];
int Lowbit( int x ) {
    return x & ( -x );
}
void Update( int pos, int S[] ) {
    while ( pos <= M ) {
        S[pos] ++;
        pos += Lowbit( pos );
    }
}
int Query( int pos, int S[] ) {
    int ret = 0;
    while ( pos > 0 ) {
        ret += S[pos];
        pos -= Lowbit( pos );
    }
    return ret;
}

int main(){
    //freopen( "D.out", "w", stdout );
    
    scanf( "%d%d", &n, &q );
    for ( int i = 1; i <= n; i ++ ) {
        scanf( "%d%d", &p[i].x, &p[i].y );
        vec[p[i].x + p[i].y].push_back( i );
    }
    for ( int i = 1; i <= q; i ++ ) {
        scanf( "%d%d%d", &x[i], &y[i], &d[i] );
        q1[x[i] + y[i] - 1].push_back( i );
        q2[x[i] + y[i] + d[i]].push_back( i );
    }
   
    memset( ans, 0, sizeof(ans) );
    int sum = 0;
    for ( int i = 0; i <= M; i ++ ) {
        for ( int j = 0; j < (int)vec[i].size(); j ++ ) {
            int X = p[vec[i][j]].x, Y = p[vec[i][j]].y;
            Update( X, sumX );
            Update( Y, sumY );
            sum ++;
        }
        for ( int j = 0; j < (int)q2[i].size(); j ++ ) {
            int id = q2[i][j];
            ans[id] += sum - Query( x[id] - 1, sumX ) - Query( y[id] - 1, sumY );
            //cout <<sum<<" "<<Query( x[id] - 1, sumX )<<" "<<Query( y[id] - 1, sumY )<<endl;
        }
        for ( int j = 0; j < (int)q1[i].size(); j ++ ) {
            int id = q1[i][j];
            ans[id] -= sum - Query( x[id] - 1, sumX ) - Query( y[id] - 1, sumY );
            //cout <<sum<<" "<<Query( x[id] - 1, sumX )<<" "<<Query( y[id] - 1, sumY )<<endl;
        }
    }
    
    for ( int i = 1; i <= q; i ++ ) {
        printf( "%d\n", ans[i] );
    }
    
    return 0;
}







