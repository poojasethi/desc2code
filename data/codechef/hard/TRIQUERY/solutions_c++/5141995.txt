#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

int n, q;

const int N = 300005, Q = 200005;

int ans[Q], x[Q], y[Q], d[Q];

bool byXY(const pair<int, int> &a, const pair<int, int> &b) {
    return a.first + a.second < b.first + b.second;
}

bool byXYD(const int &a, const int &b) {
    return x[a] + y[a] + d[a] < x[b] + y[b] + d[b];
}

bool byX(const int &a, const int &b) {
    return x[a] < x[b];
}

const int X = 300005;

int tr[3][X];

void add(int tr[], int pos, int delta) {
    while (pos < X) {
        tr[pos] += delta;
        pos += pos & -pos;
    } 
}

int getSum(int tr[], int pos) {
    int ret = 0;
    while (pos) {
        ret += tr[pos];
        pos -= pos & -pos;
    }
    return ret;
}

const int INF = 1000000000;

int main() {
    while (scanf("%d%d", &n, &q) == 2) {
        vector<pair<int, int> > p(n);
        for (int i = 0; i < n; ++i) {
            scanf("%d%d", &p[i].first, &p[i].second);
        }
        p.push_back(make_pair(INF, INF));
        vector<int> qe(q);
        for (int i = 0; i < q; ++i) {
            ans[i] = 0;
            qe[i] = i;
            scanf("%d%d%d", x + i, y + i, d + i);
        }
        sort(p.begin(), p.end(), byXY);
        sort(qe.begin(), qe.end(), byXYD);
        memset(tr[0], 0, sizeof(int) * X);
        memset(tr[1], 0, sizeof(int) * X);
        int t = 0;
        for (int i = 0; i <= n; ++i) {
            while (t < (int)qe.size() && x[qe[t]] + y[qe[t]] + d[qe[t]] < p[i].first + p[i].second) {
                int id = qe[t];
                ans[id] -= getSum(tr[0], x[id] - 1);
                ans[id] -= getSum(tr[1], y[id] - 1);
                ans[id] += i;
                ++t;
            }
            if (i < n) {
                add(tr[0], p[i].first, 1);
                add(tr[1], p[i].second, 1);
            }
        }
        sort(p.begin(), p.end());
        sort(qe.begin(), qe.end(), byX);
        memset(tr[1], 0, sizeof(int) * X);
        t = 0;
        for (int i = 0; i <= n; ++i) {
            while (t < (int)qe.size() && x[qe[t]] - 1 < p[i].first) {
                int id = qe[t];
                ans[id] += getSum(tr[1], y[id] - 1);
                ++t;
            }
            if (i < n) {
                add(tr[1], p[i].second, 1);
            }
        }
        for (int i = 0; i < q; ++i) {
            printf("%d\n", ans[i]);
        }
    }
    return 0;
}

