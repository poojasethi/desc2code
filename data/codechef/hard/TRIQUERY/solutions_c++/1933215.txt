#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define CH getchar()
#define n 300005
int N,M,i,j,D,Cnt;
int f[n],res[n];
void read(int &x)
{
	char ch;x=0;
	for(ch=CH;ch<'0'||ch>'9';ch=CH);
	for(;ch>='0'&&ch<='9';x=x*10+ch-48,ch=CH);
}
struct node
{
	int X,Y,C,P;
}C[n],Q[n];
int CmpX(const node &i,const node &j)
{
	return i.X<j.X;
}
int CmpC(const node &i,const node &j)
{
	return i.C<j.C;
}
void Add(int x)
{
	for(;x<=n;x+=x&-x) ++f[x];
}
int Sum(int x)
{
	int res=0;
	for(;x;x-=x&-x) res+=f[x];
	return res;
}
int main()
{
	read(N),read(M);
	for(i=1;i<=N;++i)
	{
		read(C[i].X),read(C[i].Y);
		++C[i].X,++C[i].Y,C[i].C=C[i].X+C[i].Y;
	}
	for(i=1;i<=M;++i)
	{
		read(Q[i].X),read(Q[i].Y),read(D);
		Q[i].C=Q[i].X+Q[i].Y+D+2,Q[i].P=i;
	}
	sort(C+1,C+N+1,CmpX);
	sort(Q+1,Q+M+1,CmpX);
	memset(f,0,sizeof(f));
	for(i=j=1;j<=M;)
	{
		if(i<=N&&C[i].X<=Q[j].X||j>M) Add(C[i].Y),++i;
		else res[Q[j].P]+=Sum(Q[j].Y),++j;
	}
	sort(C+1,C+N+1,CmpC);
	sort(Q+1,Q+M+1,CmpC);
	for(i=j=1;j<=M;)
	{
		if(i<=N&&C[i].C<=Q[j].C||j>M) ++Cnt,++i;
		else res[Q[j].P]+=Cnt,++j;
	}
	memset(f,0,sizeof(f));
	for(i=j=1;j<=M;)
	{
		if(i<=N&&C[i].C<=Q[j].C||j>M) Add(C[i].X),++i;
		else res[Q[j].P]-=Sum(Q[j].X),++j;
	}
	memset(f,0,sizeof(f));
	for(i=j=1;j<=M;)
	{
		if(i<=N&&C[i].C<=Q[j].C||j>M) Add(C[i].Y),++i;
		else res[Q[j].P]-=Sum(Q[j].Y),++j;
	}
	for(i=1;i<=M;++i) printf("%d\n",res[i]);
	return 0;
}
