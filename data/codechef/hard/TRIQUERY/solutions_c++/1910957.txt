#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<algorithm>
#include<sstream>
#include<string>
#include<string.h>
#include<deque>
#include<vector>
#include<stack>
#include<queue>
#include<math.h>
#include<map>
#include<set>

using namespace std;

typedef long long LL;
typedef pair<int,int> pii;

double PI = acos(-1);
double EPS = 1e-7;
int INF = 1000000000;
int MAXINT = 2147483647;
LL INFLL = 1000000000000000000LL;
LL MAXLL = 9223372036854775807LL;

#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define SIZE(a) (int)a.size()
#define ALL(a) a.begin(),a.end()
#define RESET(a,b) memset(a,b,sizeof(a))
#define FOR(a,b,c) for (int (a)=(b); (a)<=(c); (a)++)
#define FORD(a,b,c) for (int (a)=(b); (a)>=(c); (a)--)
#define FORIT(a,b) for (__typeof((b).begin()) a=(b).begin(); a!=(b).end(); (a)++)
#define MIN(a, b) (a) = min((a), (b))
#define MAX(a, b) (a) = max((a), (b))
#define PAUSE system("pause")

#define input(in) freopen(in,"r",stdin)
#define output(out) freopen(out,"w",stdout)

pii M[8] = {mp(0,1),mp(1,0),mp(-1,0),mp(0,-1),mp(-1,1),mp(-1,-1),mp(1,-1),mp(1,1)};

/*\   \
\   \*/

#define getcx getchar_unlocked

 inline void inp( int &n ) 
 {
    n=0;
    int ch=getcx();int sign=1;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

    while(  ch >= '0' && ch <= '9' )
            n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    n=n*sign;
  }   

struct qt
{
	int x,y,d,id;
};

struct pt
{
	int x,y;
};

qt q[200005];
qt q2[200005];
pt p[300005];

bool p_sort(pt a,pt b)
{
	return a.x+a.y < b.x+b.y;
}

bool q_sort1(qt a,qt b)
{
	return a.x+a.y+a.d < b.x+b.y+b.d;
}

bool q_sort2(qt a,qt b)
{
	return a.x+a.y < b.x+b.y;
}


int bitx[300005]; // count below x
int bity[300005]; // count below y

int ans[200005];

int qx(int n)
{
	int res = 0;
	for(int i = n; i > 0; i -= i&-i)
	{
		res += bitx[i];
	}
	return res;	
}

int qy(int n)
{
	int res = 0;
	for(int i = n; i > 0; i -= i&-i)
	{
		res += bity[i];
	}
	return res;	
}

void ux(int n)
{
	for(int i = n; i <= 300001; i += i&-i)
	{
		bitx[i]++;
	}
}

void uy(int n)
{
	for(int i = n; i <= 300001; i += i&-i)
	{
		bity[i]++;
	}
}

int main()
{
	int N,Q;
	inp(N);
	inp(Q);
	
	FOR(a,1,N)
	{
		inp(p[a].x);
		inp(p[a].y);
	}
	
	sort(p+1,p+N+1,p_sort);
	
	FOR(a,1,Q)
	{
		inp(q[a].x);
		inp(q[a].y);
		inp(q[a].d);
		q[a].id = a;
		q2[a].x = q[a].x;
		q2[a].y = q[a].y;
		q2[a].d = q[a].d;
		q2[a].id = q[a].id;
			
	}

	sort(q+1,q+Q+1,q_sort1);
	sort(q2+1,q2+Q+1,q_sort2);
	/*
	FOR(a,1,N)
	{
		cout << p[a].x << " " << p[a].y << endl;
	}*/
	int co = 1;
	int co2 = 1;
	FOR(a,1,N)
	{
		if (co <= Q)
		{
			while (q[co].x+q[co].y+q[co].d < p[a].x+p[a].y)
			{
				//cout << "YEa " << co << " " << a << endl;
				ans[q[co].id] += a-1;
				ans[q[co].id] -= qx(q[co].y-1);
				ans[q[co].id] -= qy(q[co].x-1);
				//cout << "ans " << ans[q[co].id] << endl;
				co++;
				if (co > Q) break;
			}
		}
		if (co2 <= Q)
		{
			while (q2[co2].x+q2[co2].y-1 < p[a].x+p[a].y)
			{
				//cout << a << " " << qx(q[co].y-1) << " " << qy(q[co].x-1) << " " << ans[q[co].id] <<  endl;
				ans[q2[co2].id] += qx(q2[co2].y-1)+qy(q2[co2].x-1)-a+1;
				co2++;
				if (co2 > Q) break;
			}
		}
		ux(p[a].y);
		uy(p[a].x);
	}

	while(co <= Q)
	{
		//cout << "YEa " << co << " " << N << endl;
		ans[q[co].id] += N;
		//cout << "ans " << ans[q[co].id] << endl;
		ans[q[co].id] -= qx(q[co].y-1);
		ans[q[co].id] -= qy(q[co].x-1);
		//cout << "ans " << ans[q[co].id] << endl;
		co++;
	}

	while(co2 <= Q)
	{
		ans[q2[co2].id] += qx(q2[co2].y-1)+qy(q2[co2].x-1)-N;
		co2++;
	}

	FOR(a,1,Q)
	{
		printf("%d\n",ans[a]);
	}
}
