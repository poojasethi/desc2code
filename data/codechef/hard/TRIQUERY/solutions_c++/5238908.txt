#include <bits/stdc++.h>
using namespace std;

#define lowbit(i) (i&-i)
typedef pair<int, int> pii;
typedef pair<pii, int> piii;



int C[3][1111111];
void add(int *C, int x, int v) {
	for (; x <= 300000; x += lowbit(x)) C[x] += v;
}
int ask(int *C, int x) {
	int res = 0;
	for (; x; x -= lowbit(x)) res += C[x];
	return res;
}

struct Point {
	int x, y, d, idx;
	Point(){}
	Point(int x, int y, int d = 0, int idx = -1) : x(x), y(y), d(d), idx(idx) {}
};

bool cmp1(const Point &a, const Point &b) {
	return a.x + a.y + a.d < b.x + b.y + b.d;
}
bool cmp2(const Point &a, const Point &b) {
	return pii(a.x, a.y) < pii(b.x, b.y);
}

Point point[333333];
Point query[333333];
int ans[333333];
int main() {

	//freopen("in","r",stdin);

	int n, Q;
	scanf("%d %d", &n, &Q);
	
	for (int i = 0; i < n; ++i) {
		scanf("%d %d", &point[i].x, &point[i].y);
		point[i].d = 0;
	}
	for (int i = 0; i < Q; ++i) {
		int x, y, d;
		scanf("%d %d %d", &x, &y, &d);
		query[i] = Point(x, y, d, i);
	}

	sort(point, point + n, cmp1);
	sort(query, query + Q, cmp1);
	
	int j = 0;
	for (int i = 0; i < Q; ++i) {
		while (j < n && !cmp1(query[i], point[j])) {
			add(C[0], point[j].x, 1);
			add(C[1], point[j].y, 1);
			++j;
		}
		ans[query[i].idx] += j - ask(C[0], query[i].x-1) - ask(C[1], query[i].y-1);
	}
	
	sort(point, point + n, cmp2);
	sort(query, query + Q, cmp2);
	
	j = 0;
	for (int i = 0; i < Q; ++i) {
		while (j < n && point[j].x < query[i].x) {
			add(C[2], point[j].y, 1);
			++j;
		}
		ans[query[i].idx] += ask(C[2], query[i].y-1);
	}

	for (int i = 0; i < Q; ++i) printf("%d\n", ans[i]);

	return 0;
}

