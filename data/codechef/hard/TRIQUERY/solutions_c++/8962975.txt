/*-----Line Sweeping(O(max))-----*/
//off-line query processing
#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=1000005,ln=17;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
//#define getcx getchar_unlocked
#define getcx getchar
/*inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}*/
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define modulo(x,y,z) (x+y)<0?x+y+z:((x+y>=z)?x+y-z:x+y)
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(i,0,n) cout<<i<<". "<<x[i]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(i,0,m) {F(j,0,n) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define pii pair<int,int>
#define Fi first
#define Se second
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int shift=30,etf=mod-1;

const int inf=(int)1e9;

int sum[maxn],ans[maxn];
int n,q;

/*struct point
{
    int x,y;
}xy[maxn];*/

int bit[2][maxn];

struct query
{
   int x,y,d,idx;
}qr[maxn];

bool func(query a,query b)
{
    if((a.x+a.y+a.d)==(b.x+b.y+b.d))
        return a.idx<b.idx;
    return (a.x+a.y+a.d)<(b.x+b.y+b.d);
}

int query(int idx,int i)
{
    int s=0;
    while(idx)
    {
        s+=bit[i][idx];
        idx-=(idx & -idx);
    }
    return s;
}

void update(int idx,int maxval,int i)
{
    int p=idx;
    while(p<=maxval)
    {
        bit[i][p]++;
        p+=(p & -p);
    }
}

void _debug()
{
    printf("query array:\n\n");
    F(i,0,2*q+n)
    {
        printf("%d %d %d %d\n",qr[i].x,qr[i].y,qr[i].d,qr[i].idx);
    }
    printf("\n");
    Debugarr(bit[0],10);
    Debugarr(bit[1],10);
    Debugarr(sum,15);
}

int main()
{

    cin>>n>>q;
    F(i,0,n)
    {
        int x,y;
        S(qr[i].x);
        S(qr[i].y);
        sum[qr[i].x+qr[i].y]++;
        qr[i].idx=-1;
    }
    F(i,n,q+n)
    {
        S(qr[i].x);
        S(qr[i].y);
        S(qr[i].d);
        qr[i].idx=i-n+1;
        qr[i+q].x=qr[i].x-1;
        qr[i+q].y=qr[i].y-1;
        qr[i+q].idx=qr[i].idx;
    }

    sort(qr,qr+n+2*q,func);

    F(i,1,maxn)
    sum[i]+=sum[i-1];

    F(i,0,2*q+n)
    {
        if(qr[i].idx==-1)
        {
            update(qr[i].x,maxn-1,0);
            update(qr[i].y,maxn-1,1);
        }
        else
        {

            //Debug(res);
            if(qr[i].d)
            {
                int res=query(qr[i].x-1,0)+query(qr[i].y-1,1);
                ans[qr[i].idx]+=sum[qr[i].x+qr[i].y+qr[i].d]-res;
            }
            else
            {
                int res=query(qr[i].x,0)+query(qr[i].y,1);
                ans[qr[i].idx]+=res-sum[qr[i].x+qr[i].y];
            }
        }
    }

    //_debug();

    F(i,1,q+1)
    {
        P(ans[i]);
    }
    return 0;
}
