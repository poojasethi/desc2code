using namespace std;
#include<stdio.h>
#include<algorithm>
#include<iostream>

#define maxn 300001
#define maxq 200001
#define sx 0
#define sy 1

typedef struct {
	int x, y, d, ok, cs;
} point;

int n, q, p;
int t[2][maxn], ans[maxq];
point a[maxn + 2*maxq];
	
void input(){
	int i, x, y, d;
	scanf("%d %d", &n, &q);
	for(i=0; i<n; i++) {
	    scanf("%d %d", &a[i].x, &a[i].y);
	    a[i].d= a[i].x+ a[i].y; a[i].ok= 0;
	}
	p= n;
	for(i=0; i<q; i++){
		scanf("%d %d %d", &x, &y, &d);
		a[p].x= x; a[p].y= y; a[p].d= x+y; a[p].ok= -1; a[p].cs= i;
		p++;
		a[p].x= x; a[p].y= y; a[p].d= x+y+d; a[p].ok= 1; a[p].cs= i;
		p++;
	}
}

	bool cmp(point a, point b){
		return(a.d==b.d?a.ok<b.ok:a.d<b.d);
	}
	
  void up(int k, int x){
  	for (int i=x; i<=maxn; i+= i & -i) t[k][i]++;
  }
  
  int get(int k, int x){
  	int res=0;
  	for (int i=x; i>0; i-= i & -i) res+= t[k][i];
  	return res;
  }

void process(){
	sort(a, a+p, cmp);		
	int res=0;
	for(int i=0; i<p; i++){  
		if (a[i].ok==0){
			up(sx, a[i].x);
			up(sy, a[i].y);
			res++;	
		}else {
		  if (a[i].ok==-1) 
		       ans[a[i].cs]= get(sx, a[i].x-1) + get(sy, a[i].y-1) - res;
	      else 
		       ans[a[i].cs]+= res - get(sx, a[i].x-1) - get(sy, a[i].y-1); 
		     }
         
	}
}

void print(){
	for (int i=0; i<q; i++) printf("%d\n", ans[i]);	
}

main(){
//	freopen("triquery.inp", "r", stdin);
//	freopen("triquery.out", "w", stdout);
	input();
	process();
	print();
	//getch();
}

