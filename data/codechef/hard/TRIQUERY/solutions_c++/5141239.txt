#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <cctype>
using namespace std;
typedef long long LL;

const int N = 300005;
struct Point {
    int x , y;
}p[N];
struct Query {
    int x , y , d , id;
}q[N];
bool cmp1(const Point& A , const Point& B) {
    return A.x + A.y < B.x + B.y;
}
bool cmp2(const Query& A , const Query& B) {
    return A.x + A.y + A.d < B.x + B.y + B.d;
}
bool cmp3(const Point& A , const Point& B) {
    return make_pair(A.x , A.y) < make_pair(B.x , B.y);
}
bool cmp4(const Query& A , const Query& B) {
    return make_pair(A.x , A.y) < make_pair(B.x , B.y);
}

int n , m , ans[N];
int c[3][N];

void add(int p , int x , int w) {
    while (x < N) {
        c[p][x] += w;
        x += x & -x;
    }
}
int get(int p , int x) {
    int sum = 0;
    while (x > 0) {
        sum += c[p][x];
        x -= x & -x;
    }
    return sum;
}

void work() {
    int i , j;
    scanf("%d%d",&n,&m);
    for (i = 0 ; i < n ; ++ i)
        scanf("%d%d",&p[i].x,&p[i].y);
    for (i = 0 ; i < m ; ++ i) {
        scanf("%d%d%d",&q[i].x,&q[i].y,&q[i].d);
        q[i].id = i;
    }
    sort(p , p + n , cmp1);
    sort(q , q + m , cmp2);
    for (i = j = 0 ; i < m ; ++ i) {
        while (j < n && p[j].x + p[j].y <= q[i].x + q[i].y + q[i].d) {
            add(0 , p[j].x , 1);
            add(1 , p[j].y , 1);
            ++ j;
        }
        ans[q[i].id] += j - get(0 , q[i].x - 1) - get(1 , q[i].y - 1);
    }
    sort(p , p + n , cmp3);
    sort(q , q + m , cmp4);
    for (i = j = 0 ; i < m ; ++ i) {
        while (j < n && p[j].x < q[i].x) {
            add(2 , p[j].y , 1);
            ++ j;
        }
        ans[q[i].id] += get(2 , q[i].y - 1);
    }
	for (i = 0 ; i < m ; ++ i)
		printf("%d\n" , ans[i]);
}

int main() {
    work();
    return 0;
}

