#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)3e5 + 10;
const int maxq = (int)2e5 + 10;
struct point {
	int x,y;
} P[maxn];
struct query {
	int x,y,d,id;	
} Q[maxq];
int p[maxq],f[2][maxn],res[maxq];
bool cmpp(point i, point j) {
	return i.x + i.y < j.x + j.y;
}
bool cmpa(query i, query j) {
	return i.x + i.y + i.d < j.x + j.y + j.d;
}
bool cmpb(query i, query j) {
	return i.x + i.y < j.x + j.y;
}
void add(int x, int id) {
	while(x < maxn) {
		f[id][x]++;
		x = x | (x + 1);
	}
}
int get(int x, int id) {
	int res = 0;
	while(x >= 0) {
		res += f[id][x];
		x = (x & (x + 1)) - 1;
	}
	return res;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int n,q; cin >> n >> q;
	for (int i = 0; i < n; i++) {
		scanf("%d%d",&P[i].x,&P[i].y);
	}
	sort(P,P + n,cmpp);
	for (int i = 0; i < q; i++) {
		scanf("%d%d%d",&Q[i].x,&Q[i].y,&Q[i].d);
		Q[i].id = i;
	}
	sort(Q,Q + q,cmpa);
	int j = 0;
	for (int i = 0; i < q; i++) {
		while(j < n && P[j].x + P[j].y <= Q[i].x + Q[i].y + Q[i].d) {
			add(P[j].x,0);
			add(P[j].y,1);
			j++;
		}
		res[Q[i].id] = j - get(Q[i].x - 1,0) - get(Q[i].y - 1,1);
	}
	sort(Q,Q + q,cmpb);
	memset(f,0,sizeof(f));
	j = 0;
	for (int i = 0; i < q; i++) {
		while(j < n && P[j].x + P[j].y <= Q[i].x + Q[i].y - 1) {
			add(P[j].x,0);
			add(P[j].y,1);
			j++;
		}
		int sub = get(Q[i].x - 1,0) + get(Q[i].y - 1,1) - j;
		res[Q[i].id] += sub;
	}
	for (int i = 0; i < q; i++) {
		printf("%d\n",res[i]);
	}
	return 0;
}
