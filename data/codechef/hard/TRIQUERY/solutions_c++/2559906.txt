/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define MAX(a,b) ((a)>(b)?(a):(b))
int ABS(int a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

struct event {
    int what;
    int x,y,d;
    int idx;
    event(int _w,int _x,int _y,int _d,int _i) {
        what = _w;
        x = _x;
        y = _y;
        idx = _i;
        d = _d;
    }
};

bool operator<(event a,event b) {
    int l = a.x+a.y+a.d;
    int m = b.x+b.y+b.d;
    if ( l == m ) return a.what<b.what;
    return l<m;
}

int ans[300005];

#define MAXN 1000000
int a[2][MAXN];
// value[n] += x
void add(int n, int x,int which) { for (; n < MAXN; n |= n + 1) a[which][n] += x; }
// Returns value[0] + value[1] + ... + value[n]
int sum(int n,int which) { int s=0; while (n>=0) { s+=a[which][n]; n=(n&(n+1))-1; } return s; }

int main() {
    input();
    int n,q;
    S(n); S(q);
    // cout << n << " " << q << endl;
    V(event) e;
    F(i,0,n) {
        int x,y;
        S(x); S(y);
        e.pb(event(1,x,y,0,-1));
    }
    F(i,0,q) {
        int x,y,d;
        S(x); S(y); S(d);
        e.pb(event(0,x,y,0,i));
        e.pb(event(2,x,y,d,i));
    }
    sort(e.begin(),e.end());
    int seen_count = 0;
    F(i,0,e.size()) {
        if ( e[i].what == 0 ) {
            // cout << "enter0";
            ans[e[i].idx] = seen_count - (sum(MAXN-10,0)-sum(e[i].x-1,0)) - (sum(MAXN-10,1)-sum(e[i].y-1,1));
        } else if ( e[i].what == 1 ) {
            // cout << "enter1";
            add(e[i].x,1,0);
            add(e[i].y,1,1);
            seen_count++;
        } else {
            // cout << "enter2";
            ans[e[i].idx] = seen_count - sum(e[i].x-1,0) - sum(e[i].y-1,1) + ans[e[i].idx];
        }
    }
    // cout << seen_count << endl;
    F(i,0,q) {
        printf("%d\n", ans[i]);
    }
    return 0;
}