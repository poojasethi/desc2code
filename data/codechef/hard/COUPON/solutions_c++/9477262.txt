#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
using namespace std;
typedef long long int LL;
LL max(LL a , LL b){
	if(a>b)
		return a;
	return b;
}
LL min(LL a , LL b){
	if(a<b)
		return a;
	return b;
}

int main()
{
int N , M , test;

scanf("%d",&test);

while(test--)
{
scanf("%d %d",&N,&M);
LL dp[N+4][M+4] , cost[N+4][M+4] , disc[N+4][M+4];
//min_cost for dp[purchased_item_index][purchased_store]
//cost[i][j] is the cost of ith item in the jth shop.
//M shops , N items to buy
for(int i=1;i<=N;i++)
	for(int j=1;j<=M;j++)
		scanf("%lld",&cost[i][j]);
for(int i=1;i<=N;i++)
	for(int j=1;j<=M;j++)
		scanf("%lld",&disc[i][j]);
for(int i=0;i<N+2;i++)
	for(int j=0;j<M+2;j++)
		dp[i][j] = INF_LL;

LL min_prev = INF_LL , temp2 = INF_LL;
for(int i=1;i<=M;i++){
	dp[1][i] = cost[1][i];
	min_prev = min(min_prev , cost[1][i]);
}
LL curr;


for(int i=2;i<=N;i++)
{
	temp2 = INF_LL;
	for(int j=1;j<=M;j++)		//iterator for ith item
	{

/*
		for(int k=1;k<=M;k++)		//iterator for i-1th item
		{
			if(k==j)
				curr = dp[i-1][k] + max( 0 , cost[i][j] - disc[i-1][k]);
			else
				curr = dp[i-1][k] + cost[i][j];			
			dp[i][j] = min(dp[i][j] , curr);
		}
*/

		dp[i][j] = min( min_prev + cost[i][j] , dp[i-1][j] + max(0 , cost[i][j] - disc[i-1][j] ) );
		temp2 = min(temp2 , dp[i][j]);
		
	}
	min_prev = temp2;
}



LL ans = INF_LL;
for(int i=1;i<=M;i++)
	ans = min(ans , dp[N][i]);
printf("%lld\n", ans);
}
return 0;
}

