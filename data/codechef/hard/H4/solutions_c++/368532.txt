/*
Dariusz Bukowski
*/
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <stdio.h>
#include <string.h>
#include <cmath>
using namespace std;

#define DEBUG true
#define DPRINTF if(DEBUG) printf
#define ALL(c) (c).begin(), (c).end()
#define PB push_back
#define FOR(x, b, e) for(int x = b; x <= (e); x++)
#define FORD(x, b, e) for(int x = b; x >= (e); x--)
#define REP(x, n) for(int x = 0; x < (n); x++)
#define TESTS(testName) int __tests; scanf("%d", &__tests); REP(testName, __tests)
#define VAR(v, n) __typeof(n) v = (n)
#define SIZE(x) ((int)(x).size())
#define FOREACH(i, c) for(VAR(i, (c).begin()); i != (c).end(); i++)
#define ST first
#define ND second
#define MP make_pair

typedef vector <int> VI;
typedef vector <VI> VVI;
typedef long long LL;
typedef vector <LL> VLL;
typedef pair <int, int> PII;
typedef vector <PII> VPII;
typedef queue <int> QI;

const int INF = 1000000001;
const double EPS = 10e-9;
int MOD;
int m, sq;
int sum, naw, in;
int pop;
LL n;

inline int mult(int a, int b) 
{
  return (int) (((LL) a * (LL) b) % MOD);
}

inline int add(int a, int b) 
{
  return (a + b) % MOD;
}

int GCD(int a, int b)
{
  return b == 0 ? a : GCD(b, a % b);
}

int pow_mod(int p, LL w)
{
  if(w == 0) return 1;
  if(w % 2 == 0) return pow_mod(mult(p, p), w >> 1);
  else return mult(pow_mod(p, w - 1), p);
}

int sum_mod(int p, LL w)
{
  if(w == 0)
  {
    pop = 1;
    return 0;
  }
  if(w % 2 == 0) return mult(sum_mod(mult(p,p), w / 2), p + 1);
  else 
  {
    int pom = sum_mod(p, w - 1);
    pom = add(pom, pop);
    pop = mult(pop, p);
    return pom;
  }
}

int solve(LL x, int mod)
{
  int ret = 0;
  sq = sqrt(mod);
  FOR(i, 2, sq) if(mod % i == 0 && GCD(i, mod / i) == 1)
  {
    int j = mod / i;
    int ret_i = solve(x, i);
    int ret_j = solve(x, j);
    REP(r, m) if(r % i == ret_i && r % j == ret_j) return r;
  }
  MOD = mod;
  FOR(i, 1, mod - 1)
  {
    pop = 0;
    LL hm = (LL) (x + mod - i) / (LL) mod;
    naw = pow_mod(i, i);
    in = pow_mod(i, mod);
    sum = sum_mod(in, hm);
    ret = add(ret, mult(sum, naw));
  }
  return ret;
}

int main()
{
  TESTS(t)
  {
    scanf("%lld %d", &n, &m);
    printf("%d\n", solve(n, m));
  }
  return 0;
}