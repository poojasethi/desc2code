#include <iostream>
#include <vector>
#include<cstdio>
#include<cstring>
using namespace std;
long long n;
int m;
int cc;

int getpow(int a, long long b, int mod)
{
        int ret = 1;
        while (b) {
        if (b%2==1) ret = ((long long)ret*a)%mod;
        a = ((long long)a*a)%mod;
        b/=2;
}
return ret;
}

int getinverse(int x, int mod)
{
        int x1 = x, x2 = 1;
        int y1 = mod, y2 = 0;
        while (y1!=1)
        {
            int fact = x1/y1;
            int t1 = x1, t2 = x2;
            x1 = y1; x2 = y2;
            y1 = t1 - fact*x1;
            y2 = ((t2 - (long long)fact*x2)%mod+mod)%mod;
        }
    return y2;
}

int inverses[200000];
int cur, curmod;

void solve(int p, int pp)
 {
       memset(inverses,0,200000*sizeof(int));
    int ret = 0;
    for (int i=1; i<pp && i<=n; i++)
    {
        long long k = (n+pp-i)/pp;
        int extrafact = getpow(i%pp,i,pp);
        int r = getpow(i%pp,pp,pp);
        int sum;
        if (r==1)
         {
            sum = (int)(k%pp);
            }
        else
         {
            int shared = 1;
            int tmp = r-1;
        while (tmp%p==0)
         {
            tmp/=p;
            shared*=p;
            }

        int wantmod = pp*shared;
        int num = (getpow(i%wantmod,pp*k,wantmod) + (wantmod-1))%wantmod;
        int den = (r+pp-1)%pp;
        num/=shared;
        den/=shared;
        if (inverses[den]==0)
        {
            inverses[den]=getinverse(den,pp);
            inverses[inverses[den]]=den;
            }
        sum = ((long long)num*inverses[den])%pp;
        }
        sum = ((long long)sum * extrafact)%pp;

        ret = (ret+sum)%pp;
    }
while (cur%pp!=ret) cur+=curmod;
curmod*=pp;
}

int mosttime = 0;

int main()
 {


    int T;
    scanf("%d",&T);
    while (T--)
    {

        curmod=1;
        cur=0;
        scanf("%lld %d",&n,&m);
        int tm = m;
        for (int i=2; i*i<=tm; i++)
        {
        if (tm%i==0)
            {
                int primepow = i;
                tm/=i;
                while (tm%i==0)
                    {
                        primepow*=i;
                        tm/=i;
                        }
            solve(i,primepow);
            }
    }
        if (tm>1)
        solve(tm,tm);

printf("%d\n",cur);

}
return 0;
}
