#include <cstdio>
#include <algorithm>
using namespace std;
typedef long long ll;

int mod;
ll big;

void gcd(ll a, ll b, ll &x, ll &y)
{
    if (!b) x = 1, y = 0;
    else gcd(b, a%b, y, x), y -= a/b*x;
}

ll powmod(ll x, ll y)
{
    ll ret = 1;
    for (; y; y >>= 1, x = x*x%mod)
        if (y & 1)
            ret = ret*x%mod;
    return ret;
}

ll summod(ll x, ll n)
{
    if (!n) {
        big = 1;
        return 0;
    }
    if (n % 2 == 0)
        return summod(x*x%mod, n/2) * (1+x) % mod;
    ll sum = summod(x, n-1) + big;
    big = big*x%mod;
    return sum;
}

int calc(ll n, int m)
{
    int ret = 0;
    for (int i = 1; i < m; i++) {
        ll cnt = (n-i+m)/m;
        ll a = powmod(i, i), b = summod(powmod(i, m), cnt);
        ret = (ret+a*b)%m;
    }
    return ret;
}

ll rec(ll n, int m)
{
    ll mm = m, A[100], B[100];
    int z = 0;
    for (ll i = 2; ; i++) {
        ll j = m/i;
        if (i > j) break;
        if (mm%i) continue;
        mod = i;
        while ((mm /= i) % i == 0) mod *= i;
        A[z] = calc(n, mod);
        B[z++] = mod;
    }
    if (mm > 1) A[z] = calc(n, mod = mm), B[z++] = mm;

    int ret = 0;
    for (int i = 0; i < z; i++) {
        ll x, y;
        gcd(m/B[i], B[i], x, y);
        ret = (ret+m/B[i]*x*A[i])%m;
    }
    if (ret < 0) ret += m;
    return ret;
}

int main()
{
    ll n;
    int m, cases;
    for (scanf("%d", &cases); cases--; ) {
        scanf("%lld%d", &n, &m);
        printf("%lld\n", rec(n, m));
    }
}
