#pragma comment(linker,"/STACK:64000000")
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <map>
#include <set>
#include <sstream>
#include <cmath>
#include <ctime>
#include <memory.h>

#define WR printf
#define RE scanf
#define PB push_back
#define SE second
#define FI first
#define MP make_pair

#define FOR(i,Be,En) for(int (i)=(Be);(i)<=(En);++(i))
#define DFOR(i,Be,En) for(int (i)=(Be);(i)>=(En);--(i))
#define SZ(a) (int)((a).size())
#define FA(i,v) FOR(i,0,SZ(v)-1)
#define RFA(i,v) DFOR(i,SZ(v)-1,0)
#define CLR(a) memset(a,0,sizeof(a))

#define LL  long long
#define VI  vector<int>
#define PAR pair<int ,int> 

using namespace std;
void __never(int a){printf("\nOPS %d", a);}
void __die(int a){printf("%d",(a*a)/(a+a));}
#define ass(s) {if (!(s)) {__never(__LINE__);cout.flush();cerr.flush();__die(0);}}


void init()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
}

int pow(LL a, LL b, int MOD) {
	if (b == 0) return 1 % MOD;
	LL temp = pow(a,b/2,MOD);
	temp = (temp * temp) % MOD;
	if (b & 1) temp = (temp * a) % MOD;
	return temp;
}
LL sum_geom(LL n, LL q, int MOD, LL & po) {// 0 .. n
	if (n < 0) return 0;
	if (n == 0) {
		po = 1 % MOD;
		return 1 % MOD;
	}
	LL temp = sum_geom((n-1)/2,q,MOD,po);
	LL next = (po * po * q) % MOD;
	if ((n & 1) == 0) next = (next * q) % MOD;
	
	LL h = (n - 1) / 2;
	while (h < (n+1) / 2) {
		po = (po * q) % MOD;
		h++;
	}
	LL add = po;//pow(q,(n+1)/2,MOD);
	ass(add == po);
	temp = (temp + add*temp) % MOD;
	if ((n & 1) == 0) temp = (temp + add*add) % MOD;
	po = next;
	return temp;
}
LL sum_geom2(LL n, LL q, int MOD, LL & po){
	LL cur = 1;
	LL ans = 0;
	FOR(i,0,n) {
		ans = (ans + cur) % MOD;
		cur = (cur * q) % MOD;
	}
	return ans;
}
LL f1(LL n, int m, int r){
	LL res = n / m;
	if (res * m + r <= n) res++;
	return res;
}
int sol2(LL n, int m){	
	LL res = 0;
	LL temp = 0;
	FOR(r,0,m-1) {
		if (r > n) break;
		LL co = f1(n,m,r);
		LL rm = pow(r,m,m), rr = pow(r,r,m);
		res += (rr * sum_geom(co - 1, rm , m, temp)) % m;
	}
	return (res + m - 1) % m;
}
PAR f2(PAR a, PAR b){
	ass(a.SE < a.FI && b.SE < b.FI);
	int res = a.SE;
	while (res % b.FI != b.SE) res += a.FI;
	ass(res % a.FI == a.SE && res % b.FI == b.SE && res < a.FI * b.FI);
	return MP(a.FI*b.FI, res);
}
int sol(LL n, int m){
	if (m == 1) return 0;
	int hm = m;
	vector<PAR> v;
	for (int i = 2;i*i<=m;i++) if (m % i == 0){
		int h = 1;
		while (m % i == 0) {
			m /= i;
			h *= i;
		}
		int temp = sol2(n, h);
		v.PB(MP(h, temp));
	}
	if (m > 1) v.PB(MP(m, sol2(n, m)));
	PAR ans = v[0];
	FOR(i,1,SZ(v) - 1) ans = f2(ans, v[i]);
	ass(ans.FI == hm);
	return ans.SE;
}
int stupid(int n, int m){
	int ans = 0;
	FOR(i,1,n) ans = (ans + pow(i,i,m)) % m;
	return ans;
}
void stress(){
	srand(234235);
	FOR(I,1,3000) {
		int n = rand() % 1000 + 1;
		int m = rand() % 200000 + 1;
		int ans1 = sol2(n,m);
		int ans2 = stupid(n,m);
		if (ans1 != ans2) {
			WR("%d %d: %d %d\n",n,m,ans1,ans2);
			return ;
		}
	}
	WR("ok");
}
int main()
{
	//init();
	//stress();
	//return 0;
	int T;
	LL n;
	int m;
	cin >> T;
	FOR(t,1,T) {
		cin >> n >> m;
		cout << sol(n,m) << endl;
	}
	//cerr << clock() << endl;
	return 0;
}