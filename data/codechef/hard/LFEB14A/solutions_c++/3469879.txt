#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <iomanip>
#include <vector>
#include <cstring>
#include <utility>
#include <stack>
#include <cstdio>
#include <string>
#include <numeric>
#include <functional>
#include <cfloat>


#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define ll long long
#define ull unsigned long long

ll mod = (ll)1e9+7;
using namespace std;

const int MAXN=100400;
int tree[MAXN];

int N,M;
int a[MAXN];
int b[MAXN];
void update(int idx, int val)
{
	while(idx< MAXN)
	{
		tree[idx]+=val;
		idx+=(idx & -idx);
	}
	
}
int read (int idx)
{
	
	int ans =0 ;
	while(idx>0)
	{
		ans +=tree[idx];
		idx-=idx&-idx;
	}
	return ans;
}
int main()
{
   ios_base::sync_with_stdio(0);
   
  // freopen("in1.in","r",stdin);
  
   int t;
   cin>>t;
   while(t--)
   {
	  memset(tree,0,sizeof(tree)); 
	  cin >> N >> M;
	  for(int i = 0; i < N ;i++)
	  {
		  cin >> a[i];
	  }
	  for(int i =0;i<M;i++)
	  {
		  cin >> b[i];
	  }
	  double ans = 0;
	  double ans1 =0,ans2=0,ans3=0;
	  for(int i=0;i<N;i++)
	  {
		  ans1 +=(double)(i-read(a[i]));
		  update(a[i],1);
	  }
	  
	  memset(tree,0,sizeof(tree));
	  for(int i=0;i<M;i++)
	  {
		  update(b[i],1);
	  }
	  for(int i=1;i<MAXN;i++)
	  {
		  double f=read(i)-read(i-1);
		  ans2+=f*(M-f);
	  }
	  ans2/=4.0;
	  
	  for(int i=0;i<N;i++)
	  {
		  double great= M-read(a[i]);
		  double less = (double)read(a[i]-1);
		  ans3 += (i+1.0)/(N+1.0)* great;
		  ans3 += (N-i)/(N+1.0)* less;  
	  }
	
	
	  ans=ans1+ans2+ans3;
	  cout<<setprecision(20);
	  cout<<ans<<endl;
   }  
   return 0;
}
