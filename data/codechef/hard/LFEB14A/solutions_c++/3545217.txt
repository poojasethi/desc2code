#include<algorithm>
#include<iostream>
#include<cassert>
#include<cstdio>
#include<vector>
using namespace std;

struct FenwickTree {
	vector<int> data;
	int n;

	FenwickTree(int n): data (n), n (n) {}

	int get(int x) const {
		int res = 0;
		for(; x >= 0; x -= ~x & (x + 1)) res += data[x];
		return res;
	}

	void update(int x, int v) {
		for(; x < n; x |= x + 1) data[x] += v;
	}
};

const int N = 100000;
int a[N], b[N], n, m;

long long aa() {
	FenwickTree tree (*max_element(a, a + n) + 1);
	long long res = 0;
	for(int i = n - 1; i >= 0; --i) {
		res += tree.get(a[i] - 1);
		tree.update(a[i], 1);
	}
	return res;
}

double ab() {
	long long res = 0;
	for(int i = 0; i < n; ++i) {
		int x = lower_bound(b, b + m, a[i]) - b;
		int y = upper_bound(b, b + m, a[i]) - b;
		res += 1LL * (n - i) * x;
		res += 1LL * (i + 1) * (m - y);
	}
	return res / (n + 1.);
}

double bb() {
	long long res = 0;
	for(int i = 0; i < m; ) {
		int j = i;
		while(j < m && b[i] == b[j]) ++j;
		res += 1LL * (j - i) * i;
		i = j;
	}
	return .5 * res;
}

int main() {
	ios::sync_with_stdio(false);
	int numTest; cin >> numTest;
	while(numTest-- > 0) {
		cin >> n >> m;
		for(int i = 0; i < n; ++i) cin >> a[i], --a[i];
		for(int i = 0; i < m; ++i) cin >> b[i], --b[i];
		sort(b, b + m);
		printf("%.9lf\n", aa() + ab() + bb());
	}
	return 0;
}