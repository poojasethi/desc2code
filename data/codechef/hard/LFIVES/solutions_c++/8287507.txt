// Author: thecodekaiser
#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
#define MXN 3010
 
ll BIT1[3*MXN], BIT2[3*MXN], BIT3[3*MXN];
ll ans[2010][2010];
 
void SET(int idx, ll val, ll BIT[])
{
	while(idx > 0 and idx < MXN)
	{
		BIT[idx] += val; idx += (idx & -idx);
	}
}
 
ll GET(int idx, ll BIT[])
{
	ll ret = 0;
	while(idx > 0)
	{
		ret += BIT[idx]; idx -= (idx & -idx);
	}
	return ret;
}
 
void solve()
{
	int N, Q, val, L, R;
 
	cin >> N >> Q;
 
	map<int, int> mp;
	int cur = 1;
	vector<int> vct(N+1), copy;
 
	for(int i = 1; i <= N; i++)
	{
		cin >> val;
		vct[i] = val;
		copy.push_back(val);
	}
 
	sort(copy.begin(), copy.end());
 
	for(int i = 0; i < N; i++)
	{
		if(mp.find(copy[i]) == mp.end())
			mp[copy[i]] = cur++;
	}
 
	for(int i = 1; i <= N; i++)
	{
		vct[i] = mp[vct[i]];
	}
 
 
	for(int i = 1; i <= N; i++)
	{
		memset(BIT1, 0, sizeof(BIT1));
		memset(BIT2, 0, sizeof(BIT2));
		memset(BIT3, 0, sizeof(BIT3));
 
		for(int j = i+1; j <= N; j++)
		{
			ans[i][j] = GET(vct[j]-1, BIT1);						// a[L] > a[i] < a[j] > a[k] < a[R]
			SET(vct[j], GET(MXN, BIT2) - GET(vct[j], BIT2), BIT1);											// a[L] > a[i] < a[j] > a[k]			
			SET(vct[j], GET(vct[j]-1, BIT3), BIT2);					// a[L] > a[i] < a[j]
			if(vct[j] < vct[i])				
				SET(vct[j], 1, BIT3);		// a[L] > a[i]
		}
	}
 
	for(int i = 1; i <= Q; i++)
	{
		scanf("%d %d", &L, &R);
		printf("%lld\n", ans[L][R]);
	}
 
 
 
	return;
}
 
int main()
{
	solve();
	return 0;
}