#include<bits/stdc++.h>
using namespace std;
#define sl(a) scanf("%d",&a);
#define pl(a) printf("%d ",a);
#define rep(i,n) for(i=1;i<=n;i++)
#define pln  printf("\n");
#define MEM(a,val) memset(a,val,sizeof(a))
typedef  int ll;
ll ar[2002],arr[2002],ar1[2002][2002],ar2[2002][2002],temp1[2002],temp2[2002];
  vector < pair<ll,ll> > temp;
ll Tree[2002];

void Update(int id,int n)
{
    while(id<=n) {Tree[id]++; id+=id&-id;
    }
     }
int Query(int id)
{
     int ans=0; while(id>0)
     {
         ans+=Tree[id];
     id-=id&-id;
      } return ans;
       }


void prepare(ll n,ll q)
{
    ll i,j;


    rep(i,n)
    {
             MEM(Tree,0);

            for(j=i-1;j>=1;j--)
            {
                if(min(ar[j],ar[i])-1>=1)
                ar1[i][j]= Query(min(ar[i],ar[j])-1);

                if(ar[j]<ar[i])
                 {
                  Update(ar[j],n);
                  }



            }


    }
/*
rep(i,n)
{
    rep(j,n)
    {
        pl(ar1[i][j]);
    }
    pln;
}*/

    rep(i,n)
    {

                         MEM(Tree,0);

       for(j=i+1;j<=n;j++)
            {
                if(min(ar[j],ar[i])-1>=1)
                ar2[i][j]=Query(min(ar[j],ar[i])-1);

                if(ar[j]<ar[i])
                {

                 Update(ar[j],n);     }


            }


    }
    while(q--)
    {
        ll l,r;
        sl(l);
        sl(r);

        ll ans=0;

        for(i=l+2;i<r-1;i++)
        {
            ans+=ar1[r][i]*ar2[l][i];

        }


        printf("%d\n",ans);

    }


}
bool cmp(pair <ll,ll> a,pair <ll,ll> b)
{

    if(a.second<b.second)
    return true;

    return false;
}
int main()
{
    ll n,q,i;
    sl(n);



    sl(q);


for(i=0;i<n;i++)
    {
        sl(ar[i]);
temp.push_back(make_pair(i,ar[i]));
    }
    sort(temp.begin(),temp.end(),cmp);

    ll j;
for(i=0;i<n;i++)
    {
        if(i==0)
        temp1[i]=0;
        else
        {
            if(temp[i].second==temp[i-1].second)
            temp1[i]=temp1[i-1];
            else
            temp1[i]=temp1[i-1]+1;

        }

    }

for(i=0;i<n;i++)
{

    ar[temp[i].first]=temp1[i]+1;

}
for(i=n-1;i>=0;i--)
ar[i+1]=ar[i];
ar[0]=0;
    prepare(n,q);



    return 0;
}
