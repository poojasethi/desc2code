#include <bits/stdc++.h>
using namespace std;

#define N 2005
#define ll long long

ll BIT[4][N], ans[N][N];
int A[N];

struct data{
	int initial, compressed, id;
} temp[N];

bool cmp(data const &a, data const &b){
	return a.initial < b.initial;
}

bool cmp2(data const&a, data const &b){
	return a.id < b.id;
}

void update(int type, int x, ll val){
	while(x <= N){
		BIT[type][x] += val;
		x += (x&(~(x - 1)));
	}
}

ll query(int type, int x){
	ll tot = 0;
	while(x){
		tot += BIT[type][x];
		x -= (x&(~(x - 1)));
	}
	return tot;
}

int main(){

	int n, q, l, r;
	ll tmp;
	cin>>n>>q;

	//input and compression
	for(int i = 0; i < n; i++){
		cin>>temp[i].initial;
		temp[i].id = i;
	}
	sort(temp, temp + n, cmp);
	int cnt = 1;
	for(int i = 0; i < n; i++){
		if(temp[i].initial == temp[i - 1 + (i==0?1:0)].initial)	temp[i].compressed = cnt;
		else temp[i].compressed = ++cnt;
	}
	sort(temp, temp + n, cmp2);
	for(int i = 0; i < n; i++)	A[i] = temp[i].compressed;

	//actual thingy
	for(int i = 0; i < n; i++){	//for L
		memset(BIT, 0, sizeof(BIT));
		for(int j = i + 1; j < n; j++){
			if(j > i + 3){	//for R
				tmp = query(2, A[j] - 1);
				ans[i][j] = tmp;
				//cout<<i<<" "<<j<<" "<<ans[i][j]<<endl;
			}
			if(j > i + 2){	//for k
				tmp = query(1, N) - query(1, A[j]);
				//cout<<i<<" "<<j<<" "<<tmp<<endl;
				update(2, A[j], tmp);
			}
			if(j > i + 1){	//for j
				tmp = query(0, A[j] - 1);
				//cout<<i<<" "<<j<<" "<<tmp<<endl;
				update(1, A[j], tmp);
			}
			if(A[i] > A[j])	update(0, A[j], 1);	//for i.
		}
	}

	while(q--){
		cin>>l>>r;
		cout<<ans[l - 1][r - 1]<<endl;
	}

	//system("pause");

	return 0;
}