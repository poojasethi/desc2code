#include<bits/stdc++.h>
using namespace std;
#define sl(a) scanf("%d",&a);
#define pl(a) printf("%d ",a);
#define rep(i,n) for(i=1;i<=n;i++)
#define pln  printf("\n");
#define MEM(a,val) memset(a,val,sizeof(a))
typedef  int ll;
ll ar[2002],arr[2002],ar1[2002][2002],ar2[2002][2002],temp1[2002];
ll Tree[2002];

void Update(int id,int n)
{
    while(id<=n) {Tree[id]++; id+=id&-id;
    }
     }
int Query(int id)
{
     int ans=0; while(id>0)
     {
         ans+=Tree[id];
     id-=id&-id;
      } return ans;
       }


int prepare(ll n,ll q)
{
    ll i,j;


    for(i=n;i>=1;i--)
    {
             MEM(Tree,0);

            for(j=i-1;j>=1;j--)
            {
                if(min(ar[j],ar[i])-1>=1)
                ar1[i][j]= Query(min(ar[i],ar[j])-1);


                  Update(ar[j],n);
            }

    }


  rep(i,n)
    {

                         MEM(Tree,0);

       for(j=i+1;j<n;j++)
            {
                ar2[i][j]=Query(min(ar[j],ar[i])-1);

                 Update(ar[j],n);


            }


    }


    while(q--)
    {
        ll l,r;
        sl(l);
        sl(r);

        ll ans=0;
            for(i=l+2;i<r-1;i++)
        {
            ans+=ar1[r][i]*ar2[l][i];

        }


        printf("%d\n",ans);

    }

return 0;
}

int main()
{
    ll n,q,i;
    sl(n);



    sl(q);


for(i=1;i<=n;i++)
    {
        sl(ar[i]);
   temp1[i]=ar[i];
    }

 sort(temp1+1,temp1+n+1);

rep(i,n)
{
ar[i]=lower_bound(temp1+1,temp1+n+1,ar[i])-temp1;

}


    prepare(n,q);



    return 0;
}
