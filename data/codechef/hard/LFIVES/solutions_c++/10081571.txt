//aL > ai < aj > ak < aR.
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
// #define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);
using namespace std;
typedef long long int LL;

void update(int *bit , int index , int val){
	while(index < 10000){
		bit[index]+=val;
		index+=(index)&(-index);
	}
}

int query(int *bit , int index){
	int ret = 0;
	while(index>0){
		ret = ret + bit[index];
		index-=(index)&(-index);
	}
	return ret;
}

int A[10000];
int tree[4][20000];
int ans[2010][2010];

std::vector<int > allvalues;
std::map<int , int > mp;

int main()
{
int N , Q , len , counter = 1;
si(N);si(Q);
for(int i=1;i<=N;i++)
{
	si(A[i]);
	allvalues.pb(A[i]);
}
sort(allvalues.begin() , allvalues.end());
len = allvalues.size();
mp[allvalues[0]] = counter++;
for(int i=1;i<len;i++){
	if(allvalues[i]!=allvalues[i-1])
		mp[allvalues[i]] = counter++;
}

for(int i=1;i<=N;i++)
	A[i] = mp[A[i]];



memset(tree , 0 , sizeof(tree));

for(int i=1;i<=N;i++)
{
	memset(tree , 0 , sizeof(tree));
	for(int j=i+1;j<=N;j++)
	{
	
	if(A[j] < A[i])
		update(tree[0] , A[j] , 1);
	update(tree[1] , A[j] , query(tree[0] , A[j]-1));
	
		//aL > ai < aj > ak 
	update(tree[2] , A[j] , query(tree[1] , 10000) - query(tree[1] , A[j]));
	//aL > ai < aj 
	//aL > ai 	
	//updating A[i]
	// update(tree[0] , A[i] , 1);
	// cout << i << "#$#" << query(tree[3] , A[i]-1) << endl;
	ans[i][j] =  query(tree[2] , A[j]-1);
	//aL > ai < aj > ak < aR.
	// ans = ans + query(tree[3] , A[i]-1);
	}
}

int L , R;

while(Q--)
{
	si(L);si(R);
	printf("%d\n", ans[L][R]);
}


// printf("%d\n", ans);

return 0;
}






