#include<bits/stdc++.h>
using namespace std;
#define sl(a) scanf("%d",&a);
#define pl(a) printf("%d ",a);
#define rep(i,n) for(i=0;i<n;i++)
#define pln  printf("\n");
#define MEM(a,val) memset(a,val,sizeof(a))
typedef  int ll;
ll ar[2002],arr[2002],ar1[2002][2002],ar2[2002][2002],temp1[2002],temp2[2002],st[20000];
  vector < pair<ll,ll> > temp;
ll getMid(ll s, ll e) {  return s + (e -s)/2;  }


ll getSumUtil(ll st[], ll ss, ll se, ll qs, ll qe, ll index)
{
    if (qs <= ss && qe >= se)
        return st[index];

    if (se < qs || ss > qe)
        return 0;

    ll mid = getMid(ss, se);
    return getSumUtil(st, ss, mid, qs, qe, 2*index+1) +
           getSumUtil(st, mid+1, se, qs, qe, 2*index+2);
}

void updateValueUtil(ll st[], ll ss, ll se, ll i, ll diff, ll index)
{
    if (i < ss || i > se)
        return;

    st[index] = st[index] + diff;
    if (se != ss)
    {
        ll mid = getMid(ss, se);
        updateValueUtil(st, ss, mid, i, diff, 2*index + 1);
        updateValueUtil(st, mid+1, se, i, diff, 2*index + 2);
    }
}

void updateValue(ll arr[], ll st[], ll n, ll i, ll new_val)
{
    if (i < 0 || i > n-1)
    {
        printf("Invalid Input");
        return;
    }
    ll diff = new_val - arr[i];
    arr[i] = new_val;

    updateValueUtil(st, 0, n-1, i, diff, 0);
}

ll getSum(ll st[], ll n, ll qs, ll qe)
{
    if (qs < 0 || qe > n-1 || qs > qe)
    {
        printf("Invalid Input");
        return -1;
    }

    return getSumUtil(st, 0, n-1, qs, qe, 0);
}

ll constructSTUtil(ll arr[], ll ss, ll se, ll st[], ll si)
{
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }
    ll mid = getMid(ss, se);
    st[si] =  constructSTUtil(arr, ss, mid, st, si*2+1) +
              constructSTUtil(arr, mid+1, se, st, si*2+2);
    return st[si];
}

void constructST(ll arr[], ll n)
{
    ll x = (ll)(ceil(log2(n)));
    ll max_size = 2*(ll)pow(2, x) - 1;
      // ll *st = new ll[max_size];

    constructSTUtil(arr, 0, n-1, st, 0);

}

void prepare(ll n,ll q)
{
    ll i,j;

     constructST(arr, n);

    rep(i,n)
    {
             MEM(st,0);
             MEM(arr,0);


            for(j=i-1;j>=0;j--)
            {
                if(min(ar[j],ar[i])-1>=0)
                ar1[i][j]=getSum(st, n, 0, min(ar[j],ar[i])-1);
                if(ar[j]<ar[i])
                 {

                   updateValue(arr, st, n, ar[j],arr[ar[j]]+1);
                 }


            }


    }



    rep(i,n)
    {


          MEM(arr,0);
          MEM(st,0);

            for(j=i+1;j<n;j++)
            {
                if(min(ar[j],ar[i])-1>=0)
                ar2[i][j]=getSum(st, n, 0, min(ar[j],ar[i])-1);

                if(ar[j]<ar[i])
                {

                 updateValue(arr, st, n, ar[j], arr[ar[j]]+1);
                }

            }


    }
    while(q--)
    {
        ll l,r;
        sl(l);
        sl(r);
        l--;
        r--;

        ll ans=0;

        for(i=l+2;i<r-1;i++)
        {
            ans+=ar1[r][i]*ar2[l][i];

        }


        printf("%d\n",ans);

    }


}
bool cmp(pair <ll,ll> a,pair <ll,ll> b)
{

    if(a.second<b.second)
    return true;

    return false;
}
int main()
{
    ll n,q,i;
    sl(n);



    sl(q);


    rep(i,n)
    {
        sl(ar[i]);
temp.push_back(make_pair(i,ar[i]));
    }
    sort(temp.begin(),temp.end(),cmp);

    ll j;
    rep(i,n)
    {
        if(i==0)
        temp1[i]=0;
        else
        {
            if(temp[i].second==temp[i-1].second)
            temp1[i]=temp1[i-1];
            else
            temp1[i]=temp1[i-1]+1;

        }

    }

rep(i,n)
{

    ar[temp[i].first]=temp1[i];

}

    prepare(n,q);



    return 0;
}
