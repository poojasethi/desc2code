#include <stdio.h>
#include <map>
#include <algorithm>
using namespace std;

typedef long long LL;
const int N=2001;
const int MaxVal=N;
LL BIT[4][N+1];
LL dp[N][N];
int a[N];
int b[N];
map<int, int> mp;

void update(int idx, LL val, LL* tree){
	while (idx <= MaxVal){
		tree[idx] += val;
		idx += (idx & -idx);
	}
}

LL read(int idx, LL* tree){
	LL sum = 0;
	while (idx > 0){
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}

int main(int argc, char* argv[])
{
    int i, j, k, n, q, l, r;
    scanf("%d %d", &n, &q);
    for(i=0;i<n;i++)
    {
        scanf("%d", &a[i]);
        b[i]=a[i];
    }
    sort(b,b+n);
    int cnt=1;
    mp[b[0]]=cnt;
    for(i=1;i<n;i++)
    {
        if(b[i]!=b[i-1])
        {
            cnt++;
            mp[b[i]]=cnt;
        }
    }
    for(i=0;i<n;i++)
    {
        a[i]=mp[a[i]];
    }
    for(i=0;i<n;i++)
    {
        for(j=0;j<4;j++)
        {
            for(k=1;k<=n;k++)
            {
                BIT[j][k]=0;
            }
        }
        int t=a[i];
        for(j=i+1;j<n;j++)
        {
            int p=a[j];
            LL x=read(p-1,BIT[1]);
            update(p,x,BIT[0]);
            dp[i][j]=x;
            x=read(n,BIT[2])-read(p,BIT[2]);
            update(p,x, BIT[1]);
            x=read(p-1,BIT[3]);
            update(p,x,BIT[2]);
            if(p<t)
            {
                update(p,1,BIT[3]);
            }
        }
    }
    for(i=0;i<q;i++)
    {
        scanf("%d %d", &l, &r);
        printf("%lld\n", dp[l-1][r-1]);
    }
    return 0;
}

