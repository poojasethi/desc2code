#include <iostream>
#include <vector>
#include <algorithm>
//fenwick tree taken from http://e-maxx-eng.github.io/data_structures/fenwick.html
using namespace std;

int dp[2009][2009]={0};
int a[2009];
int b[2009];

struct FenwickTree 
{
    vector<int> bit; // binary indexed tree
    int n;

    void init(int n) {
        this->n = n;
        bit.assign(n, 0);
    }
    int sum(int r) {
        int ret = 0;
        for (; r >= 0; r = (r & (r+1)) - 1)
            ret += bit[r];
        return ret;
    }
    void add(int idx, int delta) {
        for (; idx < n; idx = idx | (idx+1))
            bit[idx] += delta;
    }
    
};

void compress(int n)
{
for(int i=0;i<n;i++)
b[i]=a[i];
sort(b,b+n);
for(int i=0;i<n;i++) 
{
int ind = int(lower_bound(b,b+n,a[i])-b);
a[i]=ind+1;
}
}

int main() {
	int n,q;
	cin>>n>>q;
	for(int i=0;i<n;i++)
	cin>>a[i];
	compress(n);
	for(int i=0;i<n;i++)
	{
	FenwickTree t;
	t.init(n);
	t.add(a[i],1);
	int mini=a[i];
	for(int j=i+1;j<n;j++)
	{
	mini=min(a[i],a[j]);
	t.add(a[j],1);
	dp[i][j]=t.sum(mini-1);
	dp[j][i]=dp[i][j];
	}
	}
	while(q--)
	{
	int l,r;
	scanf("%d%d",&l,&r);
	l--;r--;
	int ans=0;
	for(int i=l;i<=r;i++)
	ans=ans+(dp[l][i]*dp[r][i]);
	printf("%d\n",ans);
	}
	return 0;
}