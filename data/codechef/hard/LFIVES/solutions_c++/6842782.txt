#include<bits/stdc++.h>

#define s(a) scanf("%d",&a)
#define ss(a) scanf("%s",a)

#define MP           make_pair
#define PB           push_back
#define REP(i, n)    for(int i = 0; i < n; i++)
#define INC(i, a, b) for(int i = a; i <= b; i++)
#define DEC(i, a, b) for(int i = a; i >= b; i--)
#define CLEAR(a)     memset(a, 0, sizeof a)

using namespace std;

typedef long long          LL;
typedef unsigned long long ULL;
typedef vector<int>        VI;
typedef pair<int, int>     II;
typedef vector<II>         VII;

LL dp[2005][2005];
int inp[2005];
LL b1[2005],b2[2005],b3[2005],b4[2005];
LL s1,s2,s3,s4;
LL read(LL *tree,LL idx)
{
      LL sum = 0;
      while(idx > 0)
      {
            sum += tree[idx];
            idx = idx - (idx&(-idx));
      }
      return sum;
}
LL update(LL *tree,LL idx,LL val,LL size)
{
      while(idx<=size)
      {
            tree[idx] += val;
            idx = idx + (idx&(-idx));
      }
}
int main()
{
      set<int> st;
      set<int>::iterator it;
      map<int,int> mp;
      int cnt = 0;
      int n,Q;
      s(n);s(Q);
      REP(i,n)
      {
            s(inp[i]);
            st.insert(inp[i]);
      }
      for(it = st.begin();it!=st.end();++it)
            mp[*it] = ++cnt;
      REP(i,n)
            inp[i] = mp[inp[i]];

      CLEAR(b1);CLEAR(b2);CLEAR(b3);CLEAR(b4);
      int size = cnt;
      s1=s2=s3=s4 = 0LL;
      REP(l,n)
      {
            INC(x,l,n-1)
            {
                  dp[l][x] = read(b1,inp[x]-1);
                  //printf("dp[%d][%d] = %lld\n",l,x,dp[l][x]);

                  LL t1 = s2-read(b2,inp[x]);
                  //if(t1<0){printf("At %d,%d, t1 = %lld\n",l,x,t1);return 0;}
                  s1 += t1;
                  update(b1,inp[x],t1,size);

                  t1 = read(b3,inp[x]-1);
                  //if(t1<0){printf("At %d,%d, t1 = %lld\n",l,x,t1);return 0;}
                  s2 += t1;
                  update(b2,inp[x],t1,size);

                  t1 = s4-read(b4,inp[x]);
                  //if(t1<0){printf("At %d,%d, t1 = %lld\n",l,x,t1);return 0;}
                  s3 += t1;
                  update(b3,inp[x],t1,size);

                  if(x==l)
                  {
                        update(b4,inp[x],1,size);
                        s4++;
                  }
            }
            CLEAR(b1);CLEAR(b2);CLEAR(b3);CLEAR(b4);
            s1=s2=s3=s4 = 0;
      }
      int l,r;
      LL ans;
      while(Q--)
      {
            s(l);s(r);
            l--;r--;
            printf("%lld\n",dp[l][r]);
      }
      return 0;
}
