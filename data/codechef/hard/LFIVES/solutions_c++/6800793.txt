#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

map < int , int > mymap;
int l[2009][2009],r[2009][2009];
int tree[2009],n,b[2009],c[2009];

void update(int idx,int val)
{
    while( idx <= n )
    {
        tree[idx] += val;
        idx += ( idx & -idx );
    }
}

int sum(int idx)
{
    int val = 0;
    while( idx > 0 )
    {
        val += tree[idx];
        idx -= (idx & -idx);
    }
    return val;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    s(n);
    int q;s(q);
    set <int > se;
    REP(i,1,n)
    {
        s(c[i]);
        se.insert(c[i]);
    }
    int counter = 1;
    si::iterator it = se.begin();
    while( it != se.end() )
    {
        mymap[*it] = counter++;
        it++;
    }
    REP(i,1,n )
        b[i] = mymap[c[i]] ;
    memset(l,0,sizeof(l));
    memset(r,0,sizeof(r));
    REP(i,1,n)
    {
        memset(tree,0,sizeof(tree));
        REP(j,i + 1,n)
        {
            if( c[j] < c[i] )
                update(b[j],1);
            l[i][j] = sum(b[j] - 1);
        }
    }
    int R = n ;
    while( R > 0 )
    {
        int k = R - 1;
        memset(tree,0,sizeof(tree));
        while( k > 0 )
        {
            if( c[k] < c[R] )
                update(b[k],1);
            r[R][k] = sum(b[k] - 1);
            k--;
        }
        R--;
    }
    REP(i,0,q - 1)
    {
        int P,Q;s(P);s(Q);
        ll ans = 0;
        REP(s,P + 1,Q - 1)
            ans += l[P][s] * 1ll * r[Q][s];
        printf("%lld\n",ans);
    }
    return 0;
}
