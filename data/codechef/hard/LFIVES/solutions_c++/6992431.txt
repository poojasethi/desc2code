#include <bits/stdc++.h>
using namespace std;
const int  MAXN = 2e3 + 9, MAXVAL = MAXN - 3;
 
int N;
int ans[MAXN][MAXN];
int bit[MAXN][5];
int A[MAXN],B[MAXN];
int Q,l,r;
 
inline void update(int idx,int type,int val){
	for(;idx <= MAXVAL;idx += (idx & (-idx))) bit[idx][type] += val;
}
 
inline int query(int idx,int type){
	int ret = 0;
	for(;idx > 0;idx -= (idx & (-idx))) ret += bit[idx][type];
	return ret;
}
 
inline int rquery(int L,int R,int type){
	return query(R,type) - query(L - 1,type);
}
 
int main (){
	scanf("%d %d",&N,&Q);
	
	for(int i = 0;i < N;++i){
		scanf("%d",A + i);
		B[i] = A[i];
	}
	map<int,int>m;
	sort(B,B + N);
	int count=1;
	for(int i=0;i<N;i++)
	{
		m[B[i]]=count;
		++count;
	}
	
	for(int i = 0;i < N;++i){
		A[i] = m[A[i]];
		//cout<<"b is " <<B<<endl;
	}

 
	for(int i = 0;i < N;++i){
		memset(bit,0,sizeof(bit));
		update(A[i],1,1);
 
		for(int j = i;j < N;++j){
			int more = rquery(A[j] + 1,MAXVAL,1);
			update(A[j],2,more);
 
			int less = query(A[j] - 1,2);
			update(A[j],3,less);
 
			more = rquery(A[j] + 1,MAXVAL,3);
			update(A[j],4,more);
 
			less = query(A[j] - 1,4);
			ans[i][j] = less;
		}
	}
	
	while(Q--){
		scanf("%d %d",&l,&r);
		printf("%d\n",ans[l - 1][r - 1]);
	}
 
	return 0;
}
