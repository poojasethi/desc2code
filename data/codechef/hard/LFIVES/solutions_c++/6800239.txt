#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <map>
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <cassert>
#include <cmath>
#include <bitset>
#include <ctime>
#include <queue>
#include <fstream>
using namespace std;
 
#define pb push_back
#define mp make_pair
#define pii pair< int, int >
#define GC getchar( )
#define PC putchar
#define x first
#define y second
 
typedef long long llint;
 
FILE *fin = fopen( "input.txt", "r" );
FILE *fout = fopen( "output.txt", "w" );
 
const int N = 2005;
int n;
int q;
int P[ N ];
vector< int > V;
int dp[ N ][ N ];
int sazmi[ N ];
 
struct fenwick {
	int tree[ N * 100 ];
	int n;
	fenwick( ) {
		memset( tree, 0, sizeof( tree ) );
		n = 100005;
	}
	void add( int x, int val ) { for( ++x; x < n; x += x & -x ) tree[ x ] += val; }
	int get( int x ) { int ans = 0; for( ++x; x > 0; x -= x & -x ) ans += tree[ x ]; return ans; }
}F;
 
void load( ) {
	scanf( "%d%d", &n, &q );
	for( int i = 0; i < n; i++ ) scanf( "%d", &P[ i ] ), V.pb( P[ i ] );
}

int dp2[ N ][ N ];
 
void solve( ) {
	sort( V.begin( ), V.end( ) );
	V.erase( unique( V.begin( ), V.end( ) ), V.end( ) );
	for( int i = 0; i < n; i++ ) P[ i ] = lower_bound( V.begin( ), V.end( ), P[ i ] ) - V.begin( );
	for( int i = 0; i < n; i++ ) {
		for( int j = i + 1; j < n; j++ ) {
			dp[ i ][ j ] = F.get( min( P[ i ], P[ j ] ) - 1 );
			dp2[ j ][ i ] = dp[ i ][ j ];
			F.add( P[ j ], 1 );
		}
		for( int j = i + 1; j < n; j++ ) F.add( P[ j ], -1 );
	}
	for( ; q; q-- ) {
		int x, y;
		scanf( "%d%d", &x, &y );
		--x, --y;
		int sol = 0;
		for( int i = x + 1; i < y; i++ ) {
			sol += dp[ x ][ i ] * dp2[ y ][ i ];
		}
		printf( "%d\n", sol );
	}
}
 
int main( void ) {
	load( );
	solve( );
	return 0;
}