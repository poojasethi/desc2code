
// AUTHOR: AMAN JAIN
#include <bits/stdc++.h>
using namespace std;

#define LL long long
#define LLU unsigned long long
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define INF 1000000007
#define EPS 1e-9
#define asd(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define asdf(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;

typedef struct  fenwick
{
	int n;int* v;
	fenwick(int n=0){
		this->n=n;
		v = (int*)malloc(sizeof(int)*n);
	}	
	~fenwick(){
		free(v);
	}
	int get(int in){
		int sum=0;
		for(;in>=0;in=(in&(in+1))-1){
			sum += v[in];
		}
		return sum;
	}
	void add(int in,int val){
		for(;in<n;in=in|(in+1)){
			v[in]+=val;
		}
	}

}fenwick;
int ans[2020][2020];
int a[2020];
map<int,int> m;

int main(){
	int n,q;cin >> n >> q;
	for(int i=0;i < n; ++i){
		cin >> a[i];m[a[i]]=0;
	}
	int co=0;
	for(map<int,int>::iterator it = m.begin();it != m.end(); ++it){
		m[it->first]=++co;
	}
	for(int i=0;i < n; ++i)a[i]	= m[a[i]];

	for(int i=0;i<n;++i){
		fenwick* tree[4];
		for(int j=0;j<4;++j){tree[j]=new fenwick(2020);}		
		tree[0]->add(a[i],1);
		for(int j = i+1; j < n; ++j){
			ans[i][j] = tree[3]->get(a[j]-1);
			tree[3]->add(a[j],tree[2]->get(co)-tree[2]->get(a[j]));
			tree[2]->add(a[j],tree[1]->get(a[j]-1));
			tree[1]->add(a[j],tree[0]->get(co)-tree[0]->get(a[j]));
		}
	}
	// for(int i =0 ;i < n; ++i){
	// 	for(int j = i; j < n; ++j){
	// 		cout << ans[i][j] << " ";
	// 	}
	// 	cout << endl;
	// }
	while(q--){
		int l,r;cin >> l >> r;
		--l;--r;
		printf("%d\n", ans[l][r]);
	}
	return 0;
}