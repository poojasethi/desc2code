#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long

const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}
int n,m;
int N,base;
int dfsLow[100004];
int dfsHigh[100004];
int cnt=-1;
ll tree[500005];
bool visited[100005];
vector<vector<int> > nbrs;
void dfs(int u)
{
  dfsLow[u]=++cnt;
  visited[u]=true;
    for(int i=0;i<nbrs[u].size();++i)
    {

        int v=nbrs[u][i];
        if(!visited[v])
          dfs(v);
    }

  dfsHigh[u]=cnt;
}

void mergeUp(int index)
{
  int parent;
  while(index)
  {
    parent=(index-1)/2;

    if(index%2==0)
      tree[parent]=tree[index-1]+tree[index];
    else
      tree[parent]=tree[index]+tree[index+1];

    index=parent;
  }
}

ll query(int index,int l,int r,int x,int y)
{
  if(x>r || y<l)
    return 0;
  if(x<=l && r<=y)
    return tree[index];

  int mid=(l+r)/2;
  return query(2*index+1,l,mid,x,y)+query(2*index+2,mid+1,r,x,y);
}
int s[100005];
int main()
{
  std::ios::sync_with_stdio(false);
  

  cin>>n>>m;
  
  N=ceil(log2(n));
  
  base=(1<<N)-1;
  nbrs.resize(n);
  
  for (int i = 0; i < n; ++i)
    cin>>s[i];

  for (int i = 0; i < n-1; ++i)
  {
    int u,v;
    cin>>u>>v;
    --u;
    --v;
    nbrs[u].push_back(v);
    nbrs[v].push_back(u);

  }
  
  dfs(0);
  
  assert(cnt==n-1);
  // cout<<cnt<<endl;
  for(int i=0;i<n;++i)
  {
    tree[base+dfsLow[i]]=s[i];
    // cout<<base+dfsLow[i]<<endl;
    mergeUp(base+dfsLow[i]);
  }
    
  // cout<<query(0,0,base,0,n-1)<<endl;

  for (int i = 0; i < m; ++i)
  {
    char a;
    int S,x;
    cin>>a;
    int start,end;
    switch(a)
    {
      case 'U':
      /* update soldier S to x*/
      cin>>S>>x;
      --S;
      tree[base+dfsLow[S]]=x;
      mergeUp(base+dfsLow[S]);
      break;

      case 'Q':
      cin>>S;
      --S;
      /* subtree rooted at S */
      start=dfsLow[S];
      end=dfsHigh[S];
      cout<<query(0,0,base,start,end)<<endl;
      break;
      default:
      assert(false);
    }
  }


  
}