#include <bits/stdc++.h>
using namespace std;

#define F(i,n) for(int i=0;i<n;i++)
#define FE(i,n) for(int i=0;i<=n;i++)
#define FR(i,n) for(int i=n;i>0;i--)
#define FRE(i,n) for(int i=n;i>=0;i--)
#define mp(a,b) make_pair(a,b)
#define pii pair <int, int>
#define pb push_back
#define ft first
#define sd second
#define LL long long
#define gc getchar_unlocked
#define pc putchar_unlocked

inline void get(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

inline void getll(LL &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

LL skill[100005];
vector < LL > adj[100005];
LL bit[200005];
LL in[100005], out[100005];
LL dfn[200005];
bool visited[100005];
int idx;

void dfs(int n)
{
	visited[n] = true;
	in[n] = idx++;
	dfn[in[n]] = skill[n];
	int s = adj[n].size();
	F(i,s)
		if (!visited[adj[n][i]])
			dfs(adj[n][i]);
	out[n] = idx++;
	dfn[out[n]] = skill[n];
}

void update(int a, int val, int n)
{
	for (int i=a; i<n; i+=(i&(-i)))
	{
		bit[i] += val;
		if (i==0)
			break;
	}
	return;
}

LL query(int a)
{
	LL sum = 0;
	for (int i=a; i>=0; i-=(i&(-i)))
	{
		sum += bit[i];
		if (i==0)
			break;
	}
	return sum;
}

void inl(int n, int u, int v)
{
	F(i,n)
		getll(skill[i]);
	
	F(i,n-1)
	{
		get(u);
		get(v);
		u--;
		v--;
		adj[u].pb(v);
		adj[v].pb(u);
	}

	idx = 0;
	dfs(0);

	F(i,2*n)
		update(i,dfn[i],2*n);
}

int main()
{
	int n,m,u,v,q;
	LL sk, upd, st, en;
	get(n);
	get(m);

	inl(n,u,v);

	F(i,m)
	{
		char c = gc();
		while (c!='Q' && c!='U') c=gc();
		if (c=='Q')
		{
			get(q);
			q--;
			st = query(in[q]-1);
			en = query(out[q]);
			printf("%lld\n", (en-st)>>1);
		}
		else if (c=='U')
		{
			get(q);
			getll(sk);
			q--;
			upd = sk - dfn[in[q]];
			update(in[q],upd,2*n);
			update(out[q],upd,2*n);
			dfn[in[q]] = sk;
			dfn[out[q]] = sk;
		}
	}

	return 0;
}