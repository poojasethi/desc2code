#include<bits/stdc++.h>

using namespace std;

#define s(n) scanf("%lld",&n);

vector<long long int> edges[100009];

long long int N;

long long  int in[100009];
long long  int arr[100009];
long long  int visited[100009];
long long  int out[100009];
long long  int BIT[100009];

void update(long long  int x,long long  int val)
{
	while(x<= N)
	{
		BIT[x] += val;
		x += (x & -x);
	}
}

long long int query(long long int x)
{
	if(x==0)
		return 0;
	long long int val = 0;
	while(x>0)
	{
		val += BIT[x];
		x -= (x& -x);
	}
	return val;
}

long long  int dfs(long long  int vertex,long long  int val)
{
		if(visited[vertex] == 1)
			return val;
		visited[vertex] = 1;
		in[vertex] = val;
		long long int temp = val;
		for(long long int i =0 ; i< edges[vertex].size() ; i++)
		{
			if( visited[edges[vertex][i] ] == 0)
				temp = dfs(edges[vertex][i],temp+1);
		}
		out[vertex] = temp;
		return temp;
}

int main()
{
	long long int M,i,a,b;
	char c;
	s(N)
	s(M)
	for(i=0 ; i<=N ; i++)
		visited[i] = 0;

	for(i=1 ; i<=N ; i++)
	{
		s(arr[i]);
	}

	for(i=0 ; i< N-1 ; i++)
	{
		s(a);
		s(b);
		edges[a].push_back(b);
		edges[b].push_back(a);
	}
	dfs(1,1);
	for(i=1 ; i<=N ; i++)
	{
		s(arr[i]);
		update(in[i],arr[i]);
	}

	while(M--)
	{
		cin>>c;
		if(c == 'U')
		{
			s(a)
			s(b)
			update(in[a],b-arr[a]);
			arr[a] = b;
		}
		if(c == 'Q')
		{
			s(a)
			printf("%lld\n",query(out[a]) - query(in[a] - 1) );
		}
	}
   	return 0;	
}