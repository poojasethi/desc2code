#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_v) (int)(_v).size()
#define all(_v) (_v).begin(),(_v).end()
#define pii pair<int,int>
typedef long long ll;
const int INF = 1000000000;
const ll MOD = 1e9 + 7;

const int maxn = 100010;
int val[maxn],start[maxn],end[maxn];
int ttime = -1;
bool track[maxn];
int tree_node[maxn << 2];
vector < int > g[maxn],v;

void dfs(int node) {
	track[node] = true;
	ttime ++;
	start[node] = ttime;
	v.pb(node);
	
	for (int i = 0; i < sz(g[node]); i ++) {
		int nn = g[node][i];
		if(!track[nn]) dfs(nn);
	}
	end[node] = ttime;
}

void build_tree(int idx,int lo,int hi) {
	if(lo == hi) tree_node[idx] = val[v[lo]];
	else {
		int mid = (lo + hi) / 2;
		build_tree(idx + idx,lo,mid);
		build_tree(idx + idx + 1,mid + 1,hi);

		tree_node[idx] = tree_node[idx + idx] + tree_node[idx + idx + 1];
	}
}

int query_tree(int idx,int lo,int hi,int l,int r) {
	if(lo == l and hi == r) return tree_node[idx];
	int mid = (lo + hi) / 2;
	if(r <= mid) return query_tree(idx + idx,lo,mid,l,r);
	if(l > mid) return query_tree(idx + idx + 1,mid + 1,hi,l,r);

	int aa = query_tree(idx + idx,lo,mid,l,mid);
	int bb = query_tree(idx + idx + 1,mid + 1,hi,mid + 1,r);

	return aa + bb;
}

void update_tree(int idx,int lo,int hi,int index) {
	if(lo == hi) tree_node[idx] = val[v[lo]];
	else {
		int mid = (lo + hi) / 2;
		if(index <= mid) update_tree(idx + idx,lo,mid,index);
		else update_tree(idx + idx + 1,mid + 1,hi,index);

		tree_node[idx] = tree_node[idx + idx] + tree_node[idx + idx + 1];
	}
}

int main() {
	ios_base::sync_with_stdio(false);

	int n,m; cin >> n >> m;
	for (int i = 1; i <= n; i ++) cin >> val[i];

	for (int i = 0; i < n - 1; i ++) {
		int x,y; cin >> x >> y;
		g[x].pb(y);
		g[y].pb(x);
	}

	dfs(1);
	
	build_tree(1,0,n - 1);
	while (m --) {
		char c; cin >> c;
		if(c == 'Q') {
			int x; cin >> x;
			cout << query_tree(1,0,n - 1,start[x],end[x]) << "\n";
		}
		else {
			int x,y; cin >> x >> y;
			val[x] = y;
			update_tree(1,0,n - 1,start[x]);
		}
	}
	
	return 0;
}
