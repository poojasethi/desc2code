#include<iostream>
#include<cstdio>
#include <vector>
#include <string.h>
#include <set>
#include <algorithm>
#include <string.h>
#include <math.h>
#include <ctype.h>
#define ll long long int
#define MSET(a,i) memset(a,i,sizeof(a))
#define pb push_back
#define res resize
#define MOD 1000000007
#define Mx 200005
using namespace std;
ll tree[100005],MaxVal,map[100005],a[100005],range[100005],cnt=1,visited[100005];
char c[2];
vector<ll> v[100005];
ll read(ll idx){
	ll sum = 0;
	while (idx > 0){
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}
void update(ll idx ,ll val){
	while (idx <=MaxVal){
		tree[idx] += val;
		idx += (idx & -idx);
	}
}
void dfs(ll ver)
{
    map[ver]=cnt;
    visited[ver]=1;
    for(ll i=0;i<v[ver].size();i++)
         if(!visited[v[ver][i]])
         {
            cnt++;
            dfs(v[ver][i]);
         }
    range[map[ver]]=cnt-map[ver];
}
ll scan()
{
ll t=0;
char c;
c=getchar_unlocked();
while(c<'0' || c>'9')
c=getchar_unlocked();
while(c>='0' && c<='9')
{
t=(t<<3)+(t<<1)+c-'0';
c=getchar_unlocked();
}
return(t);
}
int main()
{
   //freopen("input.txt","r",stdin);
    MSET(tree,0);
    MSET(visited,0);
    ll n,m,i,x,y;
    n=scan();
    m=scan();
    MaxVal=n;
    for(i=1;i<=n;i++)a[i]=scan();
    for(i=1;i<=n-1;i++)
    {
        x=scan();
        y=scan();
        v[x].pb(y);
        v[y].pb(x);
    }
    dfs(1);
    for(i=1;i<=n;i++)update(map[i],a[i]);
    while(m--)
    {
        scanf("%s",c);
        if(c[0]=='U')
        {
            x=scan();
            y=scan();
            ll d= read(map[x])- read(map[x]-1);
            update(map[x],-d);
            update(map[x],y);
        }
        else
        {
            x=scan();
            ll d=map[x];
            printf("%lld\n",read(d+range[d])-read(d-1));
        }
    }
}