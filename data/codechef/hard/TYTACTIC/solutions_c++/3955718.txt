//MD SHAKIM-MNNIT ALLAHABAD
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>
#include <map>
#include <string>
#include <climits>
#include <set>
#include <string>
#include <sstream>
#include <ctime>
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
#define iterator IT
#define getcx getchar
#define SIZE(A) ((int)A.size())
#define pb push_back
#define ALL(c) c.begin(), c.end()
#define INF (int(1e9))
#define INFL (LL(1e18))
#define F(i, a, n) for(int i = a; i <= n; i++)
#define R(i, a, n) for(int i = a; i >= n; i--)
#define loop(n) F(i, 0, n-1)
#define loop1(n) F(i, 1, n)
#define TR(c,i) for(VI::iterator i = (c).begin(); i != (c).end(); i++)
#define pii pair< int,int >
#define piii pair< pii , int >
#define temp 0
#define wait 1
#define perm 2
struct comp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.second>b.second;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first<b.first;
  }
} myobject;
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
LL memo[800005];
int t,d[200005],f[200005],tme[200005],a[200005],state[200005];
vector<int> v[200005];
void init(int node,int s,int e)
{
    if(s==e)
    {
        memo[node]=a[tme[s]];
        return ;
    }
    int mid=(s+e)/2;
    init(2*node,s,mid);
    init(2*node+1,mid+1,e);

    memo[node]=memo[2*node]+memo[2*node+1];
    return ;
}
void update(int node,int s,int e,int n,int val)
{
    if(s==e && e==n)
    {
        memo[node]=val;
        return ;
    }
    if(n>e || n<s)
        return ;
    int mid=(s+e)/2;
    update(2*node,s,mid,n,val);
    update(2*node+1,mid+1,e,n,val);

    memo[node]=memo[2*node]+memo[2*node+1];
    return ;
}
LL query(int node,int s,int e,int l,int r)
{
    if(s>=l && e<=r)
    {
        return memo[node];
    }
    if(e<l || s>r)
    {
        return 0;
    }

    int mid=(s+e)/2;
    LL p1=query(2*node,s,mid,l,r);
    LL p2=query(2*node+1,mid+1,e,l,r);

    return p1+p2;
}
void dfs(int s)
{
    state[s]=perm;
    t++;
    d[s]=t;
    tme[t]=s;
    for(int i=0; i<v[s].size(); i++)
    {
        if(state[v[s][i]]==temp)
        {
            dfs(v[s][i]);
        }
    }
    t++;
    f[s]=t;
    tme[t]=s;
}
int main()
{
    int n,m,i,p,q;
    char s[10];

    in(n);
    in(m);

    for(i=1; i<=n; i++)
    {
        in(a[i]);
    }
    for(i=1; i<n; i++)
    {
        in(p);
        in(q);
        v[p].push_back(q);
        v[q].push_back(p);
    }
    dfs(1);
    init(1,1,t);
    LL ans;
    while(m--)
    {
        scanf("%s",s);
        if(s[0]=='Q')
        {
            in(p);
            ans=query(1,1,t,d[p],f[p]);
            printf("%lld\n",ans/2);
        }
        else
        {
            in(p);
            in(q);
            update(1,1,t,d[p],q);
            update(1,1,t,f[p],q);
        }
    }
    return 0;
}
