#include<bits/stdc++.h>
using namespace std;

vector <int> g[100001];
long long tree[500001];

int tin[100001],tout[100001],timer;
bool visited[100001];
void dfs(int u) {
	tin[u]=++timer;
	visited[u]=true;
	int i,v;
	for (i=0;i<g[u].size();i++) {
		v=g[u][i];
		if (visited[v]==false) {
			dfs(v);
		}
	}
	tout[u]=++timer;
}
int n,q;
int read(int x) {
	int sum=0;
	while (x>0) {
		sum+=tree[x];
		x-=(x&(-x));
	}
	return sum;
}

void update(int x,int val) {
	while (x<=n*2) {
		tree[x]+=val;
		x+=(x&(-x));
	}
}
char z[1001];
int va[100001];
int main() {
	int i,j,k,u,v,x,y;
	scanf("%d %d",&n,&q);
	for (i=0;i<n;i++) {
		scanf("%d",&va[i+1]);
	}
	for (i=0;i<n-1;i++) {
		scanf("%d %d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	memset(visited,false,sizeof(visited));
	timer=0;
	dfs(1);
	for (i=1;i<=n;i++) {
		update(tin[i],va[i]);
	}
	while (q--) {
		scanf("%s",z);
		if (z[0]=='Q') {
			scanf("%d",&x);
			//printf("%d %d\n",tout[x],tin[x]);
			printf("%d\n",read(tout[x])-read(tin[x]-1));
		}
		else {
			scanf("%d %d",&x,&y);
			update(tin[x],y-va[x]);
			va[x]=y;
		}
	}
	return 0;
}


