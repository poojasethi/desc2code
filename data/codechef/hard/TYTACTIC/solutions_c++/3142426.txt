#include <stdio.h>
#include <iostream>
#include <list>
#include <string.h>
#define pd(n) printf("%d",n);	
#define sd(n) scanf("%d",&n);
#define forI(a,n) for(int i=a;i<=(n);i++)
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int N,M;
int begin[100002];
int end[100002];
int map[100002];
int BIT[100002];
int skill[100002];
bool discovered[100002];
list<int>ls[100002];

int query(int index){
	int ret = 0;
	while(index>0){
		ret+=BIT[index];
		index -= ( index & -index );
	}
	return ret;
}

void update(int val,int index){
	while(index <= N){
		BIT[index]+=val;
		index += (index & -index );		
	}
}

int dfs_time(int x,int time)
{
     list<int>::iterator it;
     map[x]=time;
     
     int ret = time;
    
     discovered[x]=true;
     
     for(it=ls[x].begin();it!=ls[x].end();++it)
     {
            if(!discovered[*it])
                ret = dfs_time(*it,ret+1);
     }
     
     begin[x]=time;
     end[x]=ret;
     return ret;
} 

int main(int argc, char *argv[]) {
	
	sd(N);
	sd(M);
 	int u,v;
	
	for(int i=1;i<=N;i++) {
		sd(skill[i]);
	}
	
	for(int i=1;i<=N-1;i++)
	{
        sd(u);sd(v);
        ls[u].push_back(v);
        ls[v].push_back(u);
	}
 
	memset(discovered,false,sizeof(discovered));
 	memset(BIT,0,sizeof(BIT));
 
	dfs_time(1,1);
	
	for(int i=1;i<=N;i++){
		update(skill[i],map[i]);
	}
	
	while(M--)
	{
        char cmd;
        getchar();
        scanf("%c",&cmd);

		if(cmd=='U')
        {
            sd(u);sd(v);
            int diff=v-skill[u];
            update(diff,map[u]);
            skill[u]=v;
        }
          
          
        else
        {
        	int ans;
            sd(u);
            ans=(query(end[u])-query(begin[u]-1));
        	printf("%d\n",ans);
        }
 
	}
	return 0;
}
