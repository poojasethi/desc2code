#include <bits/stdc++.h>
#define mod 1000000007
using namespace std;

long long int skil[100005];
vector<int>v[100005];
int vis[100005],nodes[100005];
map<int,int>ma,rev;
int cnt;
long long int t[4*100005];

int dfs(int x)
{
    int j,y,sz;
    vis[x]=1;
    ma[x]=cnt;
    rev[cnt]=x;
    cnt++;
    sz=0;
    for(j=0;j<v[x].size();j++)
    {
        y=v[x][j];
        if(vis[y]==0)
        {
            sz=sz+dfs(y);
        }
    }
    sz++;
    nodes[ma[x]]=sz;
    return sz;
}

void build(int node,int i,int j)
{
    if(i==j)
    {
        t[node]=skil[rev[i]];
        return;
    }
    int mid;
    mid=(i+j)/2;
    build(2*node,i,mid);
    build(2*node+1,mid+1,j);
    t[node]=t[2*node]+t[2*node+1];
    return;
}

void update(int node,int i,int j,int s,long long int x)
{
    if(i==s&&j==s)
    {
        t[node]=x;
        return;
    }
    int mid;
    mid=(i+j)/2;
    if(s<=mid)
        update(2*node,i,mid,s,x);
    else
        update(2*node+1,mid+1,j,s,x);
    t[node]=t[2*node]+t[2*node+1];
    return;
}

long long int query(int node,int i,int j,int a,int b)
{
    if(i>=a&&j<=b)
        return t[node];
    int mid;
    mid=(i+j)/2;
    if(b<=mid)
        return query(2*node,i,mid,a,b);
    else if(a>mid)
        return query(2*node+1,mid+1,j,a,b);
    else
    {
        long long int p1,p2;
        p1=query(2*node,i,mid,a,mid);
        p2=query(2*node+1,mid+1,j,mid+1,b);
        return (p1+p2);
    }
}

int main()
{
    string ch;
    int n,m,i,x,y,s,act;
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++)
        scanf("%lld",&skil[i]);
    for(i=1;i<=n-1;i++)
    {
        scanf("%d%d",&x,&y);
        x--;y--;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    cnt=0;
    dfs(0);
    long long int xy;
    build(1,0,n-1);
    while(m--)
    {
        cin>>ch;
        if(ch[0]=='Q')
        {
            scanf("%d",&s);
            s--;
            act=ma[s];
            printf("%lld\n",query(1,0,n-1,act,act+nodes[act]-1));
        }
        else if(ch[0]=='U')
        {
            scanf("%d%lld",&s,&xy);
            s--;
            act=ma[s];
            update(1,0,n-1,act,xy);
        }
    }
    return 0;
}
