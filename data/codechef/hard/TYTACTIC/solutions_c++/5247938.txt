#include <iostream>
#include<cmath>
#include<climits>
#include<algorithm>
#include<cstdlib>
#include<stdio.h>
#include<vector>
#include<set>
#include<map>
#include<cstring>
#define mod 1000000009LL
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)

#define pb push_back
#define ll long long
using namespace std;
ll maxval;
ll bit[1<<17];
void update(ll idx,ll val)
{
 while(idx<=maxval)
 {
  bit[idx]+=val;
  idx+=(idx & -idx);
 }
}
ll query(ll idx)
{
 ll sum=0;
 while(idx>0)
 {
   sum+=bit[idx];
   idx-=(idx & -idx);
 }
 return sum;
}
ll power(ll a,ll b)
{
ll res=1LL;
while(b>0)
{
 if(b&1)
 res=res*a;
 a=a*a;
 b/=2;
}
return res;
}
/*struct T
{
 int id,att,val,idx,pri;
}node[100005];
bool compare(const struct T &a,const struct T &b)
{
 if(a.id==b.id)
 {
   if(a.att==b.att)
   {
     if(a.pri==b.pri)
     {
      return a.idx<b.idx;
     }
     else
     return a.pri<b.pri;
   }
   else
   return a.att<b.att;
 }
 else
 return a.id<b.id;
}
int bsearch(int l,int r,int i,int a)
{
 int ans;
 while(l<=r)
 {
  int mid=(l+r)/2;
  if(node[mid].id<i)
  l=mid+1;
  else if(node[mid].id>i)
  r=mid-1;
  else
  {
   if(node[mid].att<a)
   l=mid+1;
   else if(node[mid].att>a)
   r=mid-1;
   else
   {
    ans=node[mid].val;
    l=mid+1;
   }
  }
 }
 return ans;
}*/
int ar[100005];
vector<int>v[100005];
int end1[100005],beg[100005];
int dfsid[100005];
int tim;
ll dfs(int idx,int prev)
{
 int i;
 dfsid[idx]=++tim;
 for(i=0;i<v[idx].size();++i)
 {
  if(v[idx][i]!=prev)
  dfs(v[idx][i],idx);
 }
 beg[idx]=dfsid[idx];
 end1[idx]=tim;
}
int main()
{
 int n,q,i,n1,n2;
 s(n);s(q);
 for(i=1;i<=n;++i)
 s(ar[i]);
 maxval=n;
 memset(bit,0,sizeof(bit));
 for(i=1;i<=n-1;++i)
 {
  s(n1);s(n2);
  v[n1].pb(n2);
  v[n2].pb(n1);
 }
 tim=0;
 dfs(1,1);
 for(i=1;i<=n;++i)
 update(dfsid[i],ar[i]);
 char ch;
 while(q--)
 {
  scanf(" %c",&ch);
  {
   if(ch=='U')
   {
   scanf("%d%d",&n1,&n2);
   update(dfsid[n1],n2-ar[n1]);
   ar[n1]=n2;
   }
   else
   {
   scanf("%d",&n1);
   printf("%d\n",query(end1[n1])-query(beg[n1]-1));
   }
  }
 }
 return 0;
}
