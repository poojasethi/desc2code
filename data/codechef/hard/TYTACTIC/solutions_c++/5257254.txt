#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

#define MAXN 100001
int n,m,u,v,dfn;
int skill[MAXN],tree[MAXN],dtime[MAXN],fin[MAXN];
vector<int> adj[MAXN];

void dfs(int u){
    for(int i=0;i<adj[u].size();i++){
        int v = adj[u][i];
        if(dtime[v]==0){
            dtime[v]=++dfn;
            dfs(v);
        }
    }
    fin[u]=dfn;
}

void update(int idx,int val){
    for(;idx<=n;idx+=(idx&-idx)){
        tree[idx]+=val;
    }
}

int read(int idx){
    int ret = 0;
    for(;idx>0;idx-=(idx&-idx)){
        ret+=tree[idx];
    }
    return ret;
}

int main(){
    cin>>n>>m;
    for(int i=1;i<=n;i++){cin>>skill[i];}
    for(int i=1;i<n;i++){
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dtime[1]=dfn=1;
    dfs(1);
    for(int i=1;i<=n;i++)update(dtime[i],skill[i]);
    int s,x;char q;
    for(;m;m--){
        cin>>q;
        if(q == 'U'){
            cin>>s>>x;
            int r = read(dtime[s])-read(dtime[s]-1);
            update(dtime[s],x-r);
        }
        else{
            cin>>s;
            cout<<read(fin[s])-read(dtime[s]-1)<<endl;
        }
    }
    return 0;
}

