//venk13
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
 
using namespace std;
 
#define sz(a) (int)(a.size())
#define len(a) (int)(a.length())
#define pb push_back
#define mp make_pair
#define fi first
#define se second
static struct IO {
    char tmp[1 << 10];
 
    // fast input routines
    char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
    inline char nextChar() { return cur = getc(stdin); }
    inline char peekChar() { return cur; }
 
    inline operator bool() { return peekChar(); }
    inline static bool isBlank(char c) { return (c < '-' && c); }
    inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
    inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
    inline IO& operator >> (char * buf) {
        if (skipBlanks()) {
            if (peekChar()) {
                *(buf++) = peekChar();
                while (!isBlank(nextChar())) *(buf++) = peekChar();
            } *(buf++) = 0; } return *this; }
 
    inline IO& operator >> (string & s) {
        if (skipBlanks()) { s.clear(); s += peekChar();
            while (!isBlank(nextChar())) s += peekChar(); }
        return *this; }
 
    inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }
 
#define defineInFor(intType) \
    inline IO& operator >>(intType & n) { \
        if (skipBlanks()) { \
            int sign = +1; \
            if (peekChar() == '-') { \
                sign = -1; \
                n = nextChar() - '0'; \
            } else \
                n = peekChar() - '0'; \
            while (!isBlank(nextChar())) { \
                n += n + (n << 3) + peekChar() - 48; \
            } \
            n *= sign; \
        } \
        return *this; \
    }
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
    // fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
    inline void putChar(char c) { putc(c, stdout); }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
    inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
    inline char * toString(intType n) { \
        char * p = (tmp + 30); \
        if (n) { \
            bool isNeg = 0; \
            if (n < 0) isNeg = 1, n = -n; \
            while (n) \
                *--p = (n % 10) + '0', n /= 10; \
            if (isNeg) *--p = '-'; \
        } else *--p = '0'; \
        return p; \
    } \
    inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
 
const int MAXN = 1e5 + 5;
 
int s[MAXN];
int seg[3 * MAXN];
int smp[MAXN];
int dfs_lo[MAXN], dfs_hi[MAXN];
int cnt;
vector <int> edges[MAXN];
 
void dfs(int x) {
    dfs_lo[x] = ++cnt;
    for(int j = 0; j < sz(edges[x]); j++) {
        int v = edges[x][j];
        if(dfs_lo[v] == -1) {
            dfs(v);
        }
    }
    dfs_hi[x] = cnt;
}
 
void shi(int l, int r, int i) {
    if(l == r) {
        smp[l] = i;
        seg[i] = s[l];
        return;
    }
    int mid = (l + r) >> 1;
    shi(l, mid, 2 * i + 1);
    shi(mid + 1, r, 2 * i + 2);
    seg[i] = seg[2 * i + 1] + seg[2 * i + 2];
}
 
void put(int x, int v) {
    int i = smp[dfs_lo[x]];
    seg[i] = v;
    while(i > 0) {
        i = (i - 1) / 2;
        seg[i] = seg[2 * i + 1] + seg[2 * i + 2];
    }
}
 
int qst(int l, int r, int a, int b, int i) {
    if(a > b || l > b || r < a) return 0;
    if(l >= a && r <= b) return seg[i];
    int mid = (l + r) >> 1;
    return qst(l, mid, a, b, 2 * i + 1) + qst(mid + 1, r, a, b, 2 * i + 2);
}
 
int main() {
    memset(dfs_lo, -1, sizeof dfs_lo);
    int n, m; cin >> n >> m;
    for(int i = 0; i < n; i++) {
        cin >> s[i];
    }
    for(int i = 0; i < n - 1; i++) {
        int u, v; cin >> u >> v; --u, --v;
        edges[u].pb(v);
        edges[v].pb(u);
    }
    cnt = -1;
    dfs(0);
    assert(cnt==n-1);
    shi(0, cnt, 0);
    for(int i = 0; i < n; i++) {
        put(i, s[i]);
    }
    for(int qq = 0; qq < m; qq++) {
        char ch; cin >> ch;
        if(ch == 'Q') {
            int x; cin >> x; --x;
            cout << qst(0, cnt, dfs_lo[x], dfs_hi[x], 0) << '\n';
        } else {
            int x, v; cin >> x >> v; --x;
            put(x, v);
        }
    }
    return 0;
} 