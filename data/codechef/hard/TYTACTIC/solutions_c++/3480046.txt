#include <iostream>
#include <cstdio>
#include <vector>

using namespace std;

vector <int> graph[100001];
int skill[100001],mapping[100001],startr[100001],endr[100001],Btree[100001];
int maxVal;

int dfs(int idx, int time)
{
    int ret = time;
    mapping[idx] = time;
    for(int i = 0; i < (int)graph[idx].size(); i++)
    {
        if(mapping[graph[idx][i]] == 0)
        ret = dfs(graph[idx][i],ret+1);
    }

    startr[idx] = time;
    endr[idx] = ret;
    return ret;
}


//BIT implementation

int read(int idx)
{
    int sum = 0;
    while(idx > 0)
    {
        sum += Btree[idx];
        idx -= (idx &  -idx);
    }
    return sum;
}

void update(int idx,int value)
{
    while(idx <= maxVal)
    {
        Btree[idx] += value;
        idx += (idx & -idx);
    }
}

int main()
{
    int n,m,u,v,val,i;
    scanf("%d%d", &n, &m);
    maxVal = n;
    for(i = 1;i <= n; i++)
        scanf("%d",&skill[i]);

    for(i = 1; i < n; i++)
    {
        scanf("%d%d", &u, &v);
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    dfs(1,1);

    for(i = 1; i <= n; i++)
        update(mapping[i],skill[i]);

    while(m--)
    {
        char query[10];
        scanf("%s", query);
        if(query[0] == 'U')
        {
            scanf("%d%d", &u, &val);
            update(mapping[u], val - skill[u]);
            skill[u] = val;
        }
        else if(query[0] == 'Q')
        {
            scanf("%d", &u);
            val = read(endr[u]) - read(startr[u]-1);
            printf("%d\n",val);
        }

    }

    return 0;
}
