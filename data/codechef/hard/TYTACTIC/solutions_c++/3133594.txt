#include<iostream>
#include<vector>
#include<cstring>
#include<cstdio>
using namespace std;
long long int M[1000000];
long long int a[100003],mapping[100003],start[100003],end[100003],TIME;
vector <vector <int> > adj(100005);
void dfs(long long int node)
{
	long long int i;
	start[node] = TIME;
	TIME=TIME+1;
	mapping[start[node]] = a[node];
	for(i=0;i<adj[node].size();i++)
	{
		if(start[adj[node][i]]==-1)
		{
			dfs(adj[node][i]);
		}
	}
	end[node] = TIME-1;
	return;
}

void initialize(long long int node,long long int b,long long int e)
{
	if(b==e)
	{
		M[node]=mapping[b];
    }
	else
	{
		initialize(2*node,b,(b+e)/2);
		initialize(2*node+1,(b+e)/2+1,e);
		M[node]=M[2*node]+M[2*node+1];
	}
}
 
int query(long long int node,long long int b,long long int e,long long int i,long long int j)
{
	if(i>e||j<b)
	return 0;
	else if(i<=b&&e<=j)
	return M[node];
	else
	{
	return query(2*node,b,(b+e)/2,i,j)+query(2*node+1,(b+e)/2+1,e,i,j);	
	}
}
int update(long long int node,long long int b,long long int e,long long int i,long long int value)
{
	
	if(b==e&&b==i)
	{
		M[node]=value;
		return M[node];
	}
	else if(i>e||i<b)
	return M[node];
	else
	{
		M[node]=update(2*node,b,(b+e)/2,i,value)+update(2*node+1,(b+e)/2+1,e,i,value);
		return M[node];
	}
}
int main()
{
	long long int n,m,i,x,y,p,q;
	scanf("%lld %lld",&n,&m);
	memset(start,-1,sizeof(start));
	for(i=1;i<=n;i++)
	{
		scanf("%lld",&a[i]);
	}
	for(i=1;i<=n-1;i++)
	{
		scanf("%lld %lld",&x,&y);
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	TIME=0;
	dfs(1);
    initialize(1,0,n-1);
    char c[10];
	while(m--)
	{
		scanf("%s",c);
        if(c[0]=='Q')
		{
            scanf("%lld",&p);
            int ans=query(1,0,n-1,start[p],end[p]);
			printf("%lld\n",ans);
			
		}
		else
		{
			scanf("%lld%lld",&p,&q);
			update(1,0,n-1,start[p],q);
		}
	}
	return 0;
}
 
