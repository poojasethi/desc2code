#include<bits/stdc++.h>
#define ll long long
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define irr acos(-1.0)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define N 100000+5
int a[N];
vector<int> G[N];
int beg[N];
int ed[N];
bool vis[N];
int timer;
int id;
ll tree[4*N];
ll wt[N];
void dfs(int u)
{
    vis[u]=1;
    beg[u]=timer;
    a[id++]=wt[u];
    for(int i=0;i<G[u].size();i++)
    {
        int to=G[u][i];
        if(!vis[to])
        {
            timer++;
            dfs(to);
        }
    }
    ed[u]=timer;
}
void build(int i,int l,int r)
{
    if(l==r)
    {
        tree[i]=a[l];
        return;
    }
    int mid=(l+r)>>1;
    build(2*i,l,mid);
    build(2*i+1,mid+1,r);
    tree[i]=tree[2*i]+tree[2*i+1];
}
void update(long int  idx,long int  s,long int  e,long int  s1,long int  e1,long int  val)
{
    if(s>e || e<s1 || s>e1)
        return ;

    if(s==s1 && e==e1)
    {
        tree[idx]=val;
        return;
    }
    long int  m=(s+e)/2;
    update(2*idx,s,m,s1,e1,val);
    update(2*idx+1,m+1,e,s1,e1,val);
    tree[idx]=tree[2*idx]+tree[idx*2+1];
    return;
}

long int  query(long int idx,long int  s,long int  e,long int  s1,long int  e1)
{
          if(s>e || e<s1 || s>e1)
        return 0;

    if(s1<=s && e1>=e)
    {
   //   cout<<"hiaha "<<tree[idx]<<endl;;
        return tree[idx];

    }
    long int m=(s+e)/2;
    return query(2*idx,s,m,s1,e1)+query(2*idx+1,m+1,e,s1,e1);
}
int main()
{
    int n,m,i,j;
    cin>>n>>m;
    for(j=0;j<n;j++)
        cin>>wt[j];
    for(j=0;j<n-1;j++)
    {
        int x,y;
        cin>>x>>y;
        x--;
        y--;
        G[x].pb(y);
        G[y].pb(x);
    }
    dfs(0);
    build(1,0,id-1);
    for(j=0;j<m;j++)
    {
        char ch;
        cin>>ch;
        if(ch=='Q')
        {
            int x;
            cin>>x;
            x--;
            cout<<query(1,0,id-1,beg[x],ed[x])<<endl;
        }
        else
        {
            ll x,y;
            cin>>x>>y;
            x--;
            update(1,0,id-1,beg[x],beg[x],y);
        }
    }
    return 0;
}

