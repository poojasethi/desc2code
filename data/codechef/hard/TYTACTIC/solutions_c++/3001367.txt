#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

/*typedef long long int64;
typedef unsigned long long uint64;*/
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
/*template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}*/
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
#define ll long long int

map<int,int>mp1;
int a[100005],lft[100005],ryt[100005],mark[100005];
vector<int> aj[100005];
int t=0,k=0;
ll st[300000],hh[100005];

void dfss(int x)
{
	lft[x]=t;
	mp1[x]=k;
	a[k++]=x;
	for(int i=0;i<aj[x].size();i++)
	{
		if(mark[aj[x][i]]==0)
		{
			mark[aj[x][i]]=1;
			t++;
			dfss(aj[x][i]);
		}
	}
	ryt[x]=t;
}

ll make_tree(int s,int e,int idx)
{
    if(s==e)
    {
        st[idx]=hh[a[s]];
        return st[idx];
    }
    else
    {
        int mid = (s+e)/2;
        ll r1 = make_tree(s,mid,(2*idx+1));
        ll r2 = make_tree(mid+1,e,(2*idx+2));
        st[idx] = r1+r2;
        return st[idx];
    }
}

int getMid(int s,int e){
	return (s+(e-s)/2);
}
void update(int ss,int se,int i,int index,int ex)
{
	if(i<ss||i>se)return;
	st[index]+=ex;
	if(se!=ss)
	{
		int mid=getMid(ss,se);
		update(ss,mid,i,2*index+1,ex);
		update(mid+1,se,i,2*index+2,ex);
	}
}

ll getSum(int ss,int se,int qs,int qe,int index)
{
	if(qs<=ss&&qe>=se) return st[index];
	if(se<qs||ss>qe) return 0;
	int mid=getMid(ss,se);
	return getSum(ss,mid,qs,qe,2*index+1)+getSum(mid+1,se,qs,qe,2*index+2);
}
int main()
{
	int n,m,x,y;
	cin>>n>>m;
	for(int i=1;i<=n;i++)scanf("%lld",&hh[i]);
	for(int i=0;i<n-1;i++)
	{
		scanf("%d %d",&x,&y);
		aj[x].PB(y);
		aj[y].PB(x);
	}
	mark[1]=1;
	dfss(1);
	ll r=make_tree(0,k-1,0);
	int l;char c;
	while(m--)
	{
		cin>>c>>l;
		if(c=='U')
		{
			scanf("%d",&x);
			int p=x-hh[l];
			hh[l]=x;
			r=mp1[l];
			update(0,k-1,r,0,p);
		}
		else
		{
			int DJ=lft[l];
			r=ryt[l];
			printf("%lld\n",getSum(0,k-1,DJ,r,0));
		}
	}
}