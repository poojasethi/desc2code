#include<bits/stdc++.h>
#define ll long long
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define irr acos(-1.0)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define N 100000+5
int a[N];
vector<int> G[N];
int beg[N];
int ed[N];
bool vis[N];
int timer;
int id;
ll tree[4*N];
ll wt[N];
void dfs(int u)
{
    vis[u]=1;
    beg[u]=timer;
    a[id++]=wt[u];
    for(int i=0;i<G[u].size();i++)
    {
        int to=G[u][i];
        if(!vis[to])
        {
            timer++;
            dfs(to);
        }
    }
    ed[u]=timer;
}
void build(int i,int l,int r)
{
    if(l==r)
    {
        tree[i]=a[l];
        return;
    }
    int mid=(l+r)>>1;
    build(2*i,l,mid);
    build(2*i+1,mid+1,r);
    tree[i]=tree[2*i]+tree[2*i+1];
}
void update (int v, int tl, int tr, int pos, ll new_val) {
	if (tl == tr)
		tree[v] = new_val;
	else {
		int tm = (tl + tr) / 2;
		if (pos <= tm)
			update (v*2, tl, tm, pos, new_val);
		else
			update (v*2+1, tm+1, tr, pos, new_val);
		tree[v] = tree[v*2] + tree[v*2+1];
	}
}
ll query(int i,int l,int r,int ql,int qr)
{
    if(l>r)
    return 0;
    if(r<ql)
        return 0;
    if(l>qr)
        return 0;
    if(l>=ql&&r<=qr)
    {
        return tree[i];
    }
    int mid=(l+r)>>1;
        return query(2*i,l,mid,ql,qr)+query(2*i+1,mid+1,r,ql,qr);
}
int main()
{
    int n,m,i,j;
    cin>>n>>m;
    for(j=0;j<n;j++)
        cin>>wt[j];
    for(j=0;j<n-1;j++)
    {
        int x,y;
        cin>>x>>y;
        x--;
        y--;
        G[x].pb(y);
        G[y].pb(x);
    }
    dfs(0);
    build(1,0,id-1);
    for(j=0;j<m;j++)
    {
        char ch;
        cin>>ch;
        if(ch=='Q')
        {
            int x;
            cin>>x;
            x--;
            cout<<query(1,0,id-1,beg[x],ed[x])<<endl;
        }
        else
        {
            ll x,y;
            cin>>x>>y;
            x--;
            update(1,0,id-1,beg[x],y);
        }
    }
    return 0;
}

