#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>

using namespace std;

#define all(c) (c).begin(),(c).end() 
#define sz(c) int((c).size())
#define pb push_back
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define rep(i,x,y) for(int i = x; i < y; i++)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

const int MAX = 100001;
const int LIM = 2 * MAX;
int arr[MAX],tm,tin[MAX],tout[MAX],visit[MAX];
LL BIT[LIM];
vi g[MAX];

void update(int idx, LL val)
{
	while(idx < LIM){
		BIT[idx] += val;
		idx += idx & -idx;
	}
}

LL query(int idx)
{
	LL res = 0;
	while(idx > 0){
		res += BIT[idx];
		idx -= idx & -idx;
	}
	return res;
}

void dfs(int c)
{
	visit[c] = 1;
	tm++;
	tin[c] = tm;
	rep(i,0,sz(g[c])){
		int u = g[c][i];
		if(!visit[u]) dfs(u);
	}
	tm++;
	tout[c] = tm;
}


int main()
{
	int n, m, x, y;
	scanf("%d%d",&n,&m);
	rep(i,0,n) scanf("%d",&arr[i]);
	rep(i,0,n-1){
		scanf("%d%d",&x,&y);
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(1);
	// rep(i,0,n) printf("%d ", tin[i+1]);
	// printf("\n");
	// rep(i,0,n) printf("%d ", tout[i+1]);
	// printf("\n");
	rep(i,0,n) update(tin[i+1],arr[i]);
	//printf("%lld\n", query(8));
	while(m--){
		int node, val;
		char ch;
		getchar();
		scanf("%c",&ch);
		//printf("%c\n", ch);
		if(ch == 'Q'){
			scanf("%d",&node);
			printf("%lld\n", query(tout[node]) - query(tin[node]-1));
		}
		else if(ch == 'U'){
			scanf("%d%d",&node,&val);
			update(tin[node],val-arr[node-1]);
			arr[node-1] = val;
		}
	}
	return 0;
}