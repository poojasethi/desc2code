#include<iostream>
using namespace std;
typedef long long int lli;
#include<bits/stdc++.h>
list<lli> li[1000000];
lli gen[1000000];
vector<pair<lli,lli> > v;
lli end=0;
	 lli arr[1000000+10];
	 lli visited[10000000];
	 lli start=0;
	 lli indx=0;
	 lli t[10000000];
	 
	 
	 void build(lli node, lli a, lli b)
     {
	   if(a>b) return;
	if (a==b)
	{
		t[node]=gen[a];
		return;
	}
	
	build(node*2, a, (a+b)/2);
	build(node*2+1,(a+b)/2+1,b);
	
 	t[node]=t[node*2]+t[node*2+1];
   }

lli  query(lli node, lli a, lli b, lli i, lli j)
{
	if(a>b||a>j||b<i) return 0;
	
	if (a>=i && b<=j) return t[node];
	
	lli q1=query(node*2, a, (a+b)/2, i, j);
	lli q2=query(node*2+1, (a+b)/2+1, b, i, j);
	
	return q1+q2;
}

void update(lli node, lli a, lli b, lli i, lli j,  lli inc)
{
	if(a>b) return;
	
	if(a>b||a>j||b<i) return;
	
	if (a>=i && b<=j)
	{
		t[node]=inc;
		
		return;
	}
	
	update(node*2, a, (a+b)/2, i, j, inc);
	update(node*2+1, (a+b)/2+1, b,i, j, inc);
	t[node] = t[node*2] + t[node*2+1];
}
void dfs(lli node)
{
	  end++;
	  start++;
	   
	      gen[indx]=arr[node];
	      
		 //   cout<<" seting gen[indx] "<< gen[indx]<<endl;
	      indx++;
	      v[node].first=start;
	
		 	list<lli>:: iterator it;
		 	for(it=li[node].begin();it!=li[node].end();it++)
		 	 {
		 	 	 // cout<<" trying "<<*it<<endl;
		 	 	
		 	 	if(!visited[*it])
		 	 	 {
		 	 	 	 //cout<<" get "<<*it<<endl;
		 	 	 	visited[*it]=1;
		 	 	 	dfs(*it);
				   }
			  }
		//	   cout<<"finalizing "<<node<<" with start  and end time "<<start<<" "<<end<<endl;
			 // v[node].first=start;
			  v[node].second=end;
			  
}
int main()
 {
 	 
 	 
 	 lli n,m;
 	 cin>>n>>m;
 
 	 for(lli i=1;i<=n;i++)
 	  {
 	  	 cin>>arr[i];
	   }
	   
	   v.push_back(make_pair(0,0));
	   for(lli i=1;i<n;i++)
	    {
	    	v.push_back(make_pair(0,0));
	    	 lli a,b;
	    	  cin>>a>>b;
	    	  li[a].push_back(b);
	    	  li[b].push_back(a);
		}
		v.push_back(make_pair(0,0));
		 //cout<<" dfs call "<<endl;
		 visited[1]=1;
		dfs(1);
		build(1,0,n-1);
		
		
	//	for(lli i=0;i<n;i++)cout<<gen[i]<<endl;
	
	for(lli i=1;i<=m;i++)
	 {
	 
	 char c;
	  cin>>c;
	  if(c=='Q')
	   {
	   	lli node ;
	   	 cin>>node;
	   	// cout<<" query for  node "<<node<<" range "<<v[node].first<<" "<<v[node].second<<endl;
	   	 lli ans=query(1,0,n-1,v[node].first-1,v[node].second-1);
	   	  cout<<ans<<endl;
	   }
	   else
	   {
	   	 lli a,b;
	   	  cin>>a>>b;
	   	  update(1,0,n-1,v[a].first-1,v[a].first-1,b);
	   }
	 	  
	 }
		
	   return 0;
 }