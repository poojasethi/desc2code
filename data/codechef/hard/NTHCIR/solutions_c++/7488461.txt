#include<bits/stdc++.h>

using namespace std;

int main(){
    int t;
    double dn, r1, r2, r3, r4, pr3, qr3, rr3;
    long long  P, M, B, N;
    double ans = 0;
    cin>>t;
    cin>>N>>P>>M>>B;
    cin>>r1>>r2>>r3>>r4;
    /*
        Let (xn, yn) be the coordinates of the center of Cn in the inverse plane.
        We have,
        Rn = radius of nth circle in the original plane
        r = radius of all circles from c3, c4, .... in the inverse plane
        r = (1/r2 - 1/r1)/4  --> Please read editorial
        xn = x3 + 2*r*(n-3)  --> Please read editorial
        yn = y3              --> Please read editorial
        y3 = (1/R1 + 1/R2)/2 --> Please read editorial
        Let distance from origin to (xn, yn) be zn
        Then we have,
        1/(zn-r) - 1/(zn+r) = 2*Rn
        => r / (zn^2 - r^2) = Rn     Equation.1
        => (z4^2 - r^2) / r = 1 / R4 Equation.2
        => (z3^2 - r^2) / r = 1 / R3 Equation.3
        x4 = x3 + 2*r
        y4 = y3
        z4^2 = x4^2 + y4^2 = x3^2 + 4*x3*r + 4*r^2 + y3^2 = z3^2 + 4*r*(x3 + r)

        Subtracting Equation 3 from 2 we have
        (z4^2 - z3^2) / r = 1/R4 - 1/R3
        => 4*r*(x3+r) / r = 1/R4 - 1/R3
        => x3 + r = (1/R4 - 1/R3) / 4
        => x3 = (1/R4 - 1/R3 - 1/R2 + 1/R1) / 4
        From equation.1 we have
        Rn = r / (xn^2 + yn^2 - r^2)
    */
    double x3 = (1 / r4 + 1 / r1 - 1 / r3 - 1 / r2) / 4;
    double y3 = (1 / r2 + 1 / r1) / 4;
    double r = (1 / r2 - 1 / r1) / 4;
    double xn, yn;
    while(t--){
        N = (N * P) % M + B;
        dn = N - 3;
        xn = x3 + dn * r * 2;
        yn = y3;
        ans += 1 / (xn * xn / r + yn * yn / r - r);
    }
    printf("%0.6f\n", ans);
    return 0;
}
