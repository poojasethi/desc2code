#include<bits/stdc++.h>

using namespace std;

typedef long long int64;

const int maxn = 1e5 + 10;
struct node {
  node *p, *ch[2];
  bool rev;
  int sum, val, size;
  node(int x);
  inline bool dir();
  inline bool isroot();
  inline void update();
  inline void relax();
} *tree[maxn*4],*nil =new node(0);

node::node(int x) {
  p = ch[0] = ch[1] = nil;
  rev = 0;
  size=1;
  sum = val =x;
} 

inline bool node::dir() {
  return this == p->ch[1];
}

inline bool node::isroot() {
  return !(this == p->ch[0] || this == p->ch[1]);
}

inline void node::update() {
  sum = val+ch[0]->sum +ch[1]->sum;
  size = ch[0]->size + ch[1]->size + 1;
}

inline void node::relax() {
  if (rev) {
    rev = false;
    swap(ch[0], ch[1]);
    ch[0]->rev ^= 1, ch[1]->rev ^= 1;
  }
  
}

inline void rotate(node *u) {
  node *v = u->p;
  v->relax(), u->relax();
  bool d = u->dir();
  u->p = v->p;
  if (!v->isroot()) v->p->ch[v->dir()] = u;
  if (u->ch[d^1] != nil) u->ch[d^1]->p = v;
  v->ch[d] = u->ch[d^1];
  u->ch[d^1] = v;
  v->p = u;
  v->update(), u->update();
}

inline void splay(node *u) {
  u->relax();
  while (!u->isroot()) {
    if (u->p->isroot())
      rotate(u);
    else
      u->dir() == u->p->dir() ? (rotate(u->p), rotate(u)) : (rotate(u), rotate(u));
  }
  u->update();
}

inline node* expose(node *u) {
  node *v;
  for (v = nil; u != nil; u = u->p) {
    splay(u);
    u->ch[1] = v;
    (v = u)->update();
  }
  return v;
}

inline void evert(node *u) {// make u as root
  expose(u)->rev ^= 1;
  splay(u);
}

inline void link(node *u, node *v) {
  evert(u);
  u->p = v;
}
inline int query(node *u, node *v) {
  evert(u);
  return expose(v)->sum;
}
inline void Change(node* u,int v)  
{  
    splay(u);  
    u->val=v;  
    u->update();  
}
int n;
int solve(){
	int m;
    scanf("%d",&m);
    int op,x,y;
    while(m--){
    	scanf("%d%d%d",&op,&x,&y);
    	if(op==1){
    		Change(tree[n+x],y);
		}else
			printf("%d\n",query(tree[x],tree[y]));
	}
}
char cmd[20];
int main(){
	int x,y;
    scanf("%d",&n);
    int val[maxn];
    for(int i=1;i<=n;i++)
    tree[i]=new node(0);
    for(int i=1;i<n;i++){
    	scanf("%d%d%d",&x,&y,&val[i]);
    	tree[n+i]=new node(val[i]);
    	link(tree[x],tree[n+i]);
    	link(tree[n+i],tree[y]);
	}
    solve();
    return 0;
} 