#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#define MAXN 200010
using namespace std;
int n,m; int val[MAXN];
 
char buf[10000000],*pt = buf,*o = buf;
int getint(){
    int f = 1,x = 0;
    while((*pt != '-') && (*pt < '0' || *pt > '9'))   pt ++;
    if(*pt == '-')  f = -1,pt ++;   else    x = *pt++ - 48;
    while(*pt >= '0' && *pt <= '9')   x = x * 10 + *pt ++ - 48;
    return x * f;
}
 
struct LinkCutTree{
    int ch[MAXN][2],key[MAXN],f[MAXN],rev[MAXN],sum[MAXN];//Max[MAXN];//Maxnode[MAXN];
    int tot;
    int newnode(int x){
        int p=++tot;key[p]=sum[p]=x;//Maxnode[p]=key[p]?p:0;
        return p;
    }
    bool isroot(int x){
        return (!f[x]||ch[f[x]][0]!=x&&ch[f[x]][1]!=x);
    }
    void push_up(int x){
        if(!x) return;
        int lc=ch[x][0],rc=ch[x][1];
        sum[x]=key[x];//Maxnode[x]=key[x]?x:0;
        if(lc) sum[x]+=sum[lc];//if(Max[lc]>Max[x]) Max[x]=Max[lc];//Maxnode[x]=Maxnode[lc];
        if(rc) sum[x]+=sum[rc];//if(Max[rc]>Max[x]) Max[x]=Max[rc];//Maxnode[x]=Maxnode[rc];
    }
    void push_down(int x){
        if(!x) return;
        int lc=ch[x][0],rc=ch[x][1];
        if(rev[x]){
            swap(ch[x][0],ch[x][1]);
            rev[lc]^=1;rev[rc]^=1;
            rev[x]=0;
        }
    }
    void rotate(int x,int t){
        if(isroot(x)) return;
        int y=f[x];
        ch[y][t]=ch[x][!t];if(ch[x][!t]) f[ch[x][!t]]=y;
        f[x]=f[y];if(f[y]){
            if(ch[f[y]][0]==y) ch[f[y]][0]=x;
            if(ch[f[y]][1]==y) ch[f[y]][1]=x;
        }
        f[ch[x][!t]=y]=x;push_up(y);
    }
    void splay(int x){
        push_down(x);
        while(!isroot(x)){
            int y=f[x];push_down(y);push_down(x);
            rotate(x,ch[y][1]==x);
        }
        push_up(x);
    }
    void init(){
        tot=0;for(int i=1;i<=n;i++) newnode(0);
    }
    void access(int v){
        for(int u=v,v=0;u;v=u,u=f[u]) splay(u),ch[u][1]=v;
    }
    void evert(int v){
        access(v);splay(v);rev[v]^=1;
    }
    int find_root(int v){
        access(v);splay(v);for(;ch[v][0];v=ch[v][0]);splay(v);return v;
    }
    void link(int u,int v){
        evert(u);f[u]=v;
    }
    void cut(int u,int v){
        evert(u);access(v);splay(v);f[u]=ch[v][0]=0;
    }
    void change(int u,int v){
    	evert(u);sum[u]-=val[u-n];key[u]=val[u-n]=v;sum[u]+=v;
	}
    int query(int u,int v){
        evert(u);access(v);splay(v);//return Max[v];
        return sum[v];
    }
}LCT;
 
 
int solve(){
    /*int ret=0x7f7f7f7f;
    for(int i=1;i<=m;i++){
        if(LCT.find_root(e[i].u)!=LCT.find_root(e[i].v)){
            LCT.link(e[i].u,n+i);
            LCT.link(e[i].v,n+i);
        }
        else{
            int mx=0,id=0;LCT.findmax(e[i].u,e[i].v,mx,id);
            if(e[i].b<mx){
                LCT.cut(e[id].u,n+id);
                LCT.cut(e[id].v,n+id);
                LCT.link(e[i].u,n+i);
                LCT.link(e[i].v,n+i);
            }
        }
        if(LCT.find_root(1)==LCT.find_root(n))
            ret=min(e[i].a+LCT.query(1,n),ret);
    }       
    return (ret<0x7f7f7f7f)?ret:-1;*/
    m=getint(); int op,x,y;
    while(m--){
    	op=getint(),x=getint(),y=getint();
    	if(op==1){
    		LCT.change(n+x,y);
		}else
			printf("%d\n",LCT.query(x,y));
	}
}
 
int main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
    fread(buf,1,10000000,stdin);
    n=getint();
    LCT.init();
    for(int i=1;i<n;i++){
    	int x=getint(),y=getint();val[i]=getint();
    	int p=LCT.newnode(val[i]);
    	LCT.link(x,p);
    	LCT.link(p,y);
	}
    solve();
    return 0;
} 