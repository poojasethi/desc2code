#include<bits/stdc++.h>
using namespace std;

#define maxn 100001
#define logN 17

vector <int> adj[maxn];
int f[maxn][logN], depth[maxn],n,start[maxn],fin[maxn];
int BIT[maxn],timer=0;

int get_int(){
int x=0;char c;int t=0;
for (c=getchar();(c<'0'||c>'9')&&c!='-';c=getchar());
if (c=='-'){t=1;c=getchar();}
for (;c>='0'&&c<='9';c=getchar()){x*=10;x+=c-48;}
if (t) x=-x;return x;
}

struct Edge
{
    int u,v,w;
};

Edge E[maxn];

void update(int BIT[],int idx,int val,int maxval)
{
while(idx<=maxval)
{
BIT[idx]+=val;
idx+=(idx&-idx);
}

}

 int read( int BIT[],int idx)   // gives value at pos A[idx]
{
int sum=0;
while(idx>0)
{
 sum+=BIT[idx];
idx-=(idx&-idx);
}
return sum;
}




void dfs(int u)
{
  for(int i=1;i<logN;i++)
    f[u][i]=f[f[u][i-1]][i-1];

  start[u]=++timer;

  for(int i=0;i<(int) adj[u].size();i++)
  {
      int v=adj[u][i];

      if(!depth[v])
      {
          f[v][0]=u;
          depth[v]=depth[u]+1;
          dfs(v);

      }
  }

  fin[u]=timer;
}

int lca(int u,int v)
{
    if(depth[u]<depth[v])  swap(u,v);

    for(int i=logN-1;i>=0;i-- )
        if(depth[f[u][i]]>=depth[v])
    {
        u=f[u][i];
    }

    if(u==v)     return u;

    for(int i=logN-1;i>=0;i--)
        if(f[u][i]!=f[v][i])
    {
        u=f[u][i];
        v=f[v][i];
    }
    return f[u][0];
}


int dist(int u,int v)
{
    int x=lca(u,v);
    return depth[u]+depth[v]-2*depth[x];
}

int main()
{



   n=get_int();// scanf("%d",&n);

    for(int j=1;j<n;j++)
    {
   int u,v,w;

      u=get_int(); v=get_int(); w=get_int();//  scanf("%d%d%d",&u,&v,&w);
        adj[v].push_back(u);
        adj[u].push_back(v);
        E[j].u=u; E[j].v=v; E[j].w=w;

    }

    depth[1]=1;
  //  f[1][0]=-1;
    dfs(1);
/*
    for(int i=1;i<=n;i++)
    {
        cout<<start[i]<<" "<<fin[i]<<endl;
    }  */

   for(int i=1;i<n;i++)
   {
       int fi,se,x;
       fi=E[i].u; se=E[i].v;

       if(f[fi][0]==se)  x=fi; //se is above fi
       else x=se;  // fi is above se;

       update(BIT,start[x],E[i].w,n);
       update(BIT,fin[x]+1,-E[i].w,n);
   }



    int q; q=get_int();
//scanf("%d",&q);

    while(q--)
    {  int id,a,b;

    id=get_int();  a=get_int();  b=get_int(); //  scanf("%d %d %d",&id,&a,&b);

      if(id==1)
      {
          int fi,se,x;
          fi=E[a].u;
          se=E[a].v;
          if(f[fi][0]==se  )  x=fi;
          else x=se;

          update(BIT,start[x],b-E[a].w,n);
          update(BIT,fin[x]+1,-(b-E[a].w),n);
               E[a].w=b;
      }
      else printf("%d\n",read(BIT,start[a])+read(BIT,start[b])-2*read(BIT,start[lca(a,b)]));

    }




    //memset(depth,0,sizeof depth);



}
