#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <fstream>
#include <set>
#include <map>
#include <cmath>
#pragma comment(linker,"/STACK:16777216")
//#define inf 1000000000
#define MP make_pair
#define PI acos(-1.0)
#define eps 1e-9
using namespace std;
typedef long long i64;
typedef unsigned long long u64;
int A[2030][2030],R,C,I;
int inf;
int rsum[2030],lsum[2030];
int mrsum[2030],mlsum[2030];
int dr[2030],dl[2030];
int dp[2030],ndp[2030];

int main()
{
    int T,X,P,Q,M,cur;
    inf=(1<<31)-1;
    //cout<<inf<<" "<<-inf<<endl;
    scanf("%d",&T);

    while(T--){
        scanf("%d%d%d",&R,&C,&I);

        if(I==1){
            for(int i=1;i<=R;i++)
                for(int j=1;j<=C;j++)scanf("%d",&A[i][j]);
        }
        else{
            scanf("%d%d%d%d",&X,&P,&Q,&M);
            cur=X;
            for(int i=1;i<=R;i++)
                for(int j=1;j<=C;j++){
                    cur=((i64)cur*P+(i64)Q)%M;
                    A[i][j]=X-cur;
                }
        }

        memset(ndp,0,sizeof(ndp));

        for(int i=R;i>=1;i--){

            rsum[C+1]=0;
            for(int j=C;j>=1;j--)rsum[j]=rsum[j+1]+A[i][j];
            mrsum[0]=-inf; for(int j=1;j<=C;j++)mrsum[j]=max(mrsum[j-1],rsum[j]);

            for(int j=1;j<=C;j++)lsum[j]=lsum[j-1]+A[i][j];
            mlsum[C+1]=-inf; for(int j=C;j>=1;j--)mlsum[j]=max(lsum[j],mlsum[j+1]);

            dr[C]=mlsum[C]-lsum[C-1]+ndp[C];
            for(int j=C-1;j>=1;j--)dr[j]=max(mlsum[j]-lsum[j-1]+ndp[j],A[i][j]+dr[j+1]);

            dl[1]=mrsum[1]-rsum[2]+ndp[1];
            for(int j=2;j<=C;j++)dl[j]=max(mrsum[j]-rsum[j+1]+ndp[j],A[i][j]+dl[j-1]);

            dp[1]=dr[1]; dp[C]=dl[C];

            for(int j=2;j<C;j++)
                dp[j]=max(max(mlsum[j+1]-lsum[j],0)+dl[j],max(mrsum[j-1]-rsum[j],0)+dr[j]);


            copy(dp,dp+(C+1),ndp);
        }
        int res=-inf;
        for(int i=1;i<=C;i++)res=max(res,ndp[i]);

        printf("%d\n",res);
    }

    return 0;
}
