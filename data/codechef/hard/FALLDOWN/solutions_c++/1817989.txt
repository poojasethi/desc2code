#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int INF = (int)1e9;
int a[2012][2012],dp[2][2012],lf[2012],rg[2012],leftDown[2012],rightDown[2012];
void solve() {
	int r,c,l; cin >> r >> c >> l;
	if (l == 1) {
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				scanf("%d",&a[i][j]);
			}
		}
	} else {
		int x,p,q,m;
		cin >> x >> p >> q >> m;
		int cur = x;
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				cur = ((LL)cur * p + q) % m;
				a[i][j] = x - cur;
			}
		}
	}
	memset(dp,0,sizeof(dp));
	int cur = 0;
	int pre = 1;
	for (int i = r - 1; i >= 0; i--) {
		for (int j = 0,sum = 0; j < c; j++) {
			lf[j] = sum;
			sum = max(0,sum + a[i][j]);
		}
		for (int j = c - 1,sum = 0; j >= 0; j--) {
			rg[j] = sum;
			sum = max(0,sum + a[i][j]);
		}
		for (int j = 0; j < c; j++) {
			leftDown[j] = a[i][j] + max(lf[j] + dp[pre][j],j > 0 ? leftDown[j - 1] : -INF);
		}
		for (int j = c - 1; j >= 0; j--) {
			rightDown[j] = a[i][j] + max(rg[j] + dp[pre][j],j + 1 < c ? rightDown[j + 1] : -INF);
		}
		for (int j = 0; j < c; j++) {
			dp[cur][j] = max(leftDown[j] + rg[j],lf[j] + rightDown[j]);
		}
		cur ^= 1;
		pre ^= 1;
	}
	int res = -INF;
	for (int i = 0; i < c; i++) {
		res = max(res,dp[pre][i]);
	}
	cout << res << endl;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int T; cin >> T;
	while(T--) {
		solve();
	}
	return 0;
}
