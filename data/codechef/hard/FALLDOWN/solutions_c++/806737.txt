#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <cstring>
using namespace std ;
 
#define FOREACH(it,c) for( __typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define FOR(i,a,b) for( int i=(a),_b=(b);i<=_b;i++) 
#define DOW(i,b,a) for( int i=(b),_a=(a);i>=_a;i--)
#define REP(i,n) FOR(i,0,(n)-1)
#define DEP(i,n) DOW(i,(n)-1,0)
#define all(a) (a).begin() , (a).end()
#define push(a,b) (a).push_back((b))
#define For(i,a,b) for(int i = a; i < b; i++)
 
typedef vector<int> VI ;
typedef vector<string> VS ;
typedef long long ll;
template<class T> inline int size(const T&c) { return c.size(); }  

const int maxN = 2015, inf = 2100000000;

int m, n, test, kind, x, p, q, mod, cur, curr, pre;
int a[maxN], dp[2][maxN], goleft[maxN], goright[maxN], sleft[maxN], sright[maxN];

void Process(){
	curr ^= 1; pre ^= 1;
	sright[n+1] = 0;
	goleft[0] = goright[n+1] = -inf;
	for(int j = 1; j <= n; j++) sleft[j] = max(0, sleft[j-1] + a[j]);
	for(int j = n; j >= 1; j--) sright[j] = max(0, sright[j+1] + a[j]);
	for(int j = 1; j <= n; j++)
		goleft[j] = a[j] + max(goleft[j-1], sleft[j-1] + dp[pre][j]);
	for(int j = n; j >= 1; j--)
		goright[j] = a[j] + max(goright[j+1], sright[j+1] + dp[pre][j]);
	for(int j = 1; j <= n; j++)
		dp[curr][j] = max(goleft[j] + sright[j+1], goright[j] + sleft[j-1]);
}

int main(){
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	scanf("%d", &test);
	while (test--){
		memset(dp[1], 0, sizeof(dp[1]));
		scanf("%d %d %d", &m, &n, &kind);
		if (kind == 2){
			scanf("%d %d %d %d", &x, &p, &q, &mod);
			cur = x;
		}
		curr = 1; pre = 0;
		for(int i = 1; i <= m; i++){
			for(int j = 1; j <= n; j++){
				if (kind == 1) scanf("%d", &a[j]);
				else{
					cur = (cur * p + q) % mod; 
					a[j] = x - cur;
				}
			}
			Process();
		}
		int res = -inf;
		for(int i = 1; i <= n; i++) res = max(res, dp[curr][i]);
		printf("%d\n", res);
	}

	return 0;
}