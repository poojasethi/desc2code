    //Template
     
    
    //Includes
    #include <vector>
    #include <queue>
    #include <map>
    #include <set>
    #include <utility> //Pair
    #include <algorithm>
    #include <sstream> // istringstream>> ostring stream<<
    #include <iostream>
    #include <iomanip>
    #include <cstdio>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #include <cstring>
    #include <limits>
    using namespace std;
  
    typedef long long ll;
    typedef vector <int> vi;
    typedef pair< int ,int > pii;
    typedef istringstream iss;
    typedef ostringstream oss;
    #define pb push_back
    #define mp make_pair
    #define ff first
    #define ss second
    #define sz size()
    #define ln length()
    #define rep(i,n) for(int i=0;i<n;i++)
    #define fu(i,a,n) for(int i=a;i<=n;i++)
    #define fd(i,n,a) for(int i=n;i>=a;i--)
    #define all(a) a.begin(),a.end()
    #define ESP (1e-9)
     
    #define gi(n) scanf("%d",&n)
    #define gl(n) cin >> n
    #define pi(n) printf("%d",n)
    #define pl(n) cout << n
    #define ps printf(" ")
    #define pn printf("\n")
    #define dg(n,s); printf("%s %d",s,n)
    #define imax numeric_limits<int>::max()
    #define imin numeric_limits<int>::min()
    #define lmax numeric_limits<ll>::max()
    #define lmin numeric_limits<ll>::min()
     
    #define N 111111
    #define BLOCK 333
     
    ll a[N];
    ll b[N];
    int l[N], r[N], x[N], y[N], ans[N];
    ll snap[N];
    ll sum[N];
     
    int main() {
    int n;
    gi(n);
     
    rep(i, n) {
    scanf("%lld", &a[i]);
    }
     
    rep(i, n) {
    scanf("%lld", &b[i]);
    }
     
    int m;
    gi(m);
     
    rep(i, m) {
    scanf("%d%d%d%d", &l[i], &r[i], &x[i], &y[i]);
    l[i]--;
    r[i]--;
    }
     
    memset(ans, -1, sizeof ans);
    rep(i, n) if(a[i] >= b[i]) ans[i] = 0;
    rep(i, n) snap[i] = a[i];
     
    int checkFrom = 0;
    rep(i, m+1) {
    if((i == m) || ((i % BLOCK == 0) && i)) {
    long long cur = 0;
     
    rep(j, n) {
    cur += sum[j];
    sum[j] = cur;
    }
     
    cur = 0;
    rep(j, n) {
    cur += sum[j];
    sum[j] = 0;
    // printf("%d %lld\n", j, cur);
    if(ans[j] == -1 && (cur + snap[j]) >= b[j]) {
    long long temp = snap[j];
    int upper = checkFrom + BLOCK;
    if(upper > m) upper = m;
    for(int k = checkFrom; k < upper; k++) {
    // perform kth on temp and check.
    if(l[k] <= j && j <= r[k]) {
    // if(j == 3) printf("IN %d", k);
    temp += x[k];
    temp += (j - l[k]) * 1LL * y[k];
    }
    // if(j == 3) printf("33 %d %lld\n",k, temp);
    if(temp >= b[j]) {
    ans[j] = k + 1;
    break;
    }
    }
    }
    snap[j] += cur;
    }
    checkFrom += BLOCK;
    }
    if(i == m) break;
     
    sum[l[i]] += x[i];
    sum[l[i]+1] -= x[i];
    sum[r[i]+1] -= x[i];
    sum[r[i]+2] += x[i];
    sum[l[i]+1] += y[i];
    sum[r[i]+1] -= y[i];
    sum[r[i]+1] -= (r[i]-l[i]) * 1LL * y[i];
    sum[r[i]+2] += (r[i]-l[i]) * 1LL * y[i];
    }
     
    rep(i, n)
    { printf("%d ", ans[i]);
     pn;}
     
    } 