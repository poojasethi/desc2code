#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
#include <string>
#include <cmath>
#include <set>
#include <ctime>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <map>

using namespace std;

const int MAXN = 100005;
long long tr[MAXN * 50][2];
int vl[MAXN * 50];
int vr[MAXN * 50];
int sz = 1;

int add(int vold, int l, int r, int a, int b, int x, int y) {
	int v = sz ++;
	tr[v][0] = tr[vold][0], tr[v][1] = tr[vold][1];
	vl[v] = vl[vold], vr[v] = vr[vold];

	if (l == a && r == b) {
		tr[v][0] += x;
		tr[v][1] += y;
		return v;
	}
	int m = (l + r) / 2;
	if (b <= m)
		vl[v] = add(vl[v], l, m, a, b, x, y);
	else if(a > m)
		vr[v] = add(vr[v], m + 1, r, a, b, x, y);
	else {
		vl[v] = add(vl[v], l, m, a, m, x, y);
		vr[v] = add(vr[v], m + 1, r, m + 1, b, x + y * 1ll * (m - a + 1), y);
	}
	return v;
}

long long getVal(int v, int l, int r, int a) {
	if (l == r)
		return tr[v][0];
	int m = (l + r) / 2;
	if (a <= m)
		return getVal(vl[v], l, m, a) + tr[v][0] + tr[v][1] * (a - l);
	else
		return getVal(vr[v], m + 1, r, a) + tr[v][0] + tr[v][1] * (a - l);
}

int a[MAXN];
int b[MAXN];
int rt[MAXN];

int main()
{
	int n;
	scanf("%d", &n);
	for (int i =0 ; i < n; i++)
		scanf("%d", &a[i]);
	for (int i =0 ; i < n; i++)
		scanf("%d", &b[i]);

	int q;
	scanf("%d", &q);
	for (int i = 1; i <= q; i++) {
		int l, r, x, y;
		scanf("%d%d%d%d", &l, &r, &x, &y);
		rt[i] = add(rt[i - 1], 0, n - 1, l - 1, r - 1, x, y);
	}
	for (int i = 0; i < n; i++) {
		int l = 0, r = q;
		while(l + 1 < r) {
			int m = (l + r) / 2;
			if (getVal(rt[m], 0, n - 1, i) + a[i] < b[i])
				l = m + 1;
			else
				r = m;
		}
		int m = l;
		while(m <= q && getVal(rt[m], 0, n - 1, i) + a[i] < b[i])
			m ++;
		if (m > q)
			printf("-1 ");
		else
			printf("%d ", m);
	}
	printf("\n");


    return 0;
}
/*

*/
