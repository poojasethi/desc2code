#include <bits/stdc++.h>
using namespace std;
#define REP(a, b, c) for(int a = b; a < c; a++)
#define asd(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define asdf(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
typedef pair<int,int> ii;
typedef long long LL;
const int MAX = 1e5 + 5, LIM = 333;

struct query{
    int l, r, x, y, id;
    void scan(int id){
        scanf("%d %d %d %d", &l, &r, &x, &y);
        this->id = id;
    }
} q;

LL org[MAX], wanabe[MAX], ans[MAX], arr[MAX], arr1[MAX], arr2[MAX];
vector<query> store;

void calc(int id){
    LL cur = org[id];
    REP(i, 0, store.size()){
        if(store[i].l <= id and store[i].r >= id){
            cur += (LL)store[i].x + ((LL)id - store[i].l) * store[i].y ;
        }
        if(cur >= wanabe[id]) { ans[id] = store[i].id; return; }
    }
}

int main(){

    int n, m;
    cin >> n;
    memset(ans, -1, sizeof ans);
    REP(i, 1, n+1) scanf("%lld", org + i);
    REP(i, 1, n+1) scanf("%lld", wanabe + i);
    REP(i, 1, n+1) if(org[i] >= wanabe[i]) ans[i] = 0; 
    cin >> m;
    REP(lol, 0, m){
        q.scan(lol+1);
        store.push_back(q);
        if(store.size() == LIM or lol == m-1){
            
            REP(i, 0, store.size()){
                LL x = store[i].x, y = store[i].y;
                arr[store[i].l] += x;
                arr[store[i].r + 1] -= x;
                arr1[store[i].l + 1] += y;
                arr1[store[i].r + 1] -= y;
                arr2[store[i].r + 1] -= y * (store[i].r - store[i].l);
            }

            REP(i, 1, n+1) {
                
                arr1[i] += arr1[i-1];
                arr2[i] += arr2[i-1] + arr1[i];
                arr[i] += arr[i-1];

                if(ans[i] == -1 and org[i] + arr[i] + arr2[i] >= wanabe[i]) {
                    calc(i);
                }
                org[i] += arr[i] + arr2[i];
            }

            store.clear();
            memset(arr, 0, sizeof arr);  memset(arr1, 0, sizeof arr1); memset(arr2, 0, sizeof arr2);
        }
    }
    
    REP(i, 1, n+1) printf("%lld ", ans[i]); puts("");
    return 0;
}
