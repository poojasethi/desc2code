#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
#include <string>
#include <cmath>
#include <set>
#include <ctime>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <map>

using namespace std;

struct zap {
	int l, r, x, y;
};

vector<int> zaid[100005];
zap za[100005];
long long pre[100005];
long long val[100005];
long long b[100005];
int ans[100005];

int main()
{
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%lld", &val[i]), pre[i] = val[i];
	for (int i = 0; i < n; i++)
		scanf("%lld", &b[i]);

	memset(ans, -1, sizeof(ans));
	for (int i = 0; i < n; i++) {
		if (val[i] >= b[i])
			ans[i] = 0;
	}
	int m;
	scanf("%d", &m);
	int sz = sqrt(m + 0.0) + 1;

	for (int i =0 ; i < m; i++) {
		scanf("%d%d%d%d", &za[i].l, &za[i].r, &za[i].x, &za[i].y);
		za[i].l--, za[i].r--;
		zaid[za[i].l].push_back(i);
		zaid[za[i].r + 1].push_back(i);
		int add = 0;
		if (i % sz == sz - 1 || i == m - 1) {
			long long add = 0, y = 0;
			for (int j =0 ; j < n; j++) {
				for (int k = 0; k < zaid[j].size(); k++) {
					int id = zaid[j][k];
					if (za[id].l == j) {
						add += za[id].x;
						y += za[id].y;
					}
					else {
						add -= za[id].x + (za[id].r - za[id].l + 1) * 1ll * za[id].y;
						y -= za[id].y;
					}
				}
				zaid[j].clear();
				pre[j] = val[j];
				val[j] += add;
				add += y;
			}
			for (int j = 0; j < n; j++) {
				if (ans[j] < 0 && val[j] >= b[j]) {
					int cur = pre[j], id = sz * (i / sz);
					while(cur < b[j]) {
						if (j >= za[id].l && j <= za[id].r)
							cur += za[id].x  + za[id].y * 1ll * (j - za[id].l);
						id ++;
					}
					ans[j] = id;
				}
			}
		}
	}
	for (int i = 0; i < n; i++)
		printf("%d ", ans[i] );
	printf("\n");


    return 0;
}
/*

*/
