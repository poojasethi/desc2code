/*----------------Subham Mishra---------------------------------------*/
#include<iostream>
#include<stdio.h>
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pl(n) printf("%lld\n",n)
#define p(n) printf("%d\n",n)
#define pb push_back
#define mp make_pair
#define mod 10000007LL
#define N 100014
#define ll  long long
using namespace std;
/// persistent Segment Trees
int a[N],b[N],n,m,nodes,root[N],ql,qr,nnodes;
ll x1,y1;
void readinput()
{
 int i;
 s(n);
 for(i=0;i<n;++i)
 s(a[i]);
 for(i=0;i<n;++i)
 s(b[i]);
}
struct segtree
{
 int lson;
 int rson;
 int l,r;
 ll x;
 ll y;
}node[5000000];
int copynode(int id)
{
 nnodes++;
 node[nnodes]=node[id];
 return nnodes;
}
void initsegtree()
{
 int i;
 nodes=1;
 root[0]=1;
 while(nodes<n)
 nodes*=2;
 nnodes=2*nodes-1;
 for(i=nnodes;i>=nodes;--i)
 {
  node[i].lson=node[i].rson=0;
  if(i-nodes<n)
  node[i].x=a[i-nodes];
  else
  node[i].x=0;
  node[i].y=0;
  node[i].l=node[i].r=i-nodes;
 }
 for(i=nodes-1;i>=1;--i)
 {
  node[i].lson=2*i;
  node[i].rson=2*i+1;
  node[i].l=node[node[i].lson].l;
  node[i].r=node[node[i].rson].r;
  node[i].x=node[i].y=0;
 }
}
void update(int id)
{
if(qr<node[id].l||ql>node[id].r)
return;
 if(ql<=node[id].l && qr>=node[id].r)
 {
   node[id].x+=(x1+y1*(node[id].l-ql));
   node[id].y+=y1;
   return;
 }
 int lson=node[id].lson;
 int rson=node[id].rson;
 if(ql<=node[lson].r)
 {
  lson=copynode(lson);
  node[id].lson=lson;
  update(lson);
 }
 if(qr>=node[rson].l)
 {
  rson=copynode(rson);
  node[id].rson=rson;
  update(rson);
 }
}
void updates()
{
 int i,j;
 s(m);
 for(i=1;i<=m;++i)
 {
  s(ql);s(qr);sl(x1);sl(y1);
  ql--;qr--;
  root[i]=copynode(root[i-1]);
  //cout<<root[i]<<endl;
  update(root[i]);
  /*for(j=1;j<=nnodes;++j)
 cout<<j<<" "<<node[j].lson<<" "<<node[j].rson<<" "<<node[j].x<<" "<<node[j].y<<" "<<node[j].l<<" "<<node[j].r<<endl;*/
 }
}
ll lmt,pos;
ll sum;
int query(int id)
{
 sum+=node[id].x+node[id].y*(pos-node[id].l);
 if(sum>=lmt)
 return 1;
 else if(node[id].lson==0)
 return 0;
 if(pos<=node[node[id].lson].r)
 return query(node[id].lson);
 else
 return query(node[id].rson);
}
void queries()
{
int i;
for(i=0;i<n;++i)
{
 pos=i;
 lmt=b[i];
 int ans=-1;
 int lo=0,hi=m;
 while(lo<=hi)
 {
  int mid=(lo+hi)/2;
  sum=0;
  if(query(root[mid]))
  {
  ans=mid;
  hi=mid-1;
  }
  else
  lo=mid+1;
 }
 printf("%d ",ans);
}
}
 int main()
 {
 readinput();
 initsegtree();
 updates();
 queries();
 return 0;
 }
