#include <iostream>
#include <fstream>
#include <map>
#include <set>
#include <stack>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <queue>

#define mod 10000007
#define maxn 100010
#define inf 2000000010
#define ll long long

using namespace std;

ifstream fin ("A.in");
ofstream fout ("A.out");

struct
{
    int x,y,l,r;
}q[maxn];

vector<int> B[20][maxn];
long long aib1[maxn],aib2[maxn];
int n,m,a[maxn],b[maxn],answer[maxn],ok;

int LSB (int x)
{
    return x&-x;
}

ll query (ll aib[], int i)
{
    ll s = 0;

    for (; i > 0; i -= LSB(i))
    {
        s += aib[i];
    }

    return s;
}

void update (ll aib[], int i, ll val)
{
    for (; i<= n; i += LSB(i))
       aib[i] += val;
}

int main ()
{
  //freopen ("A.in","r",stdin);
     scanf ("%d",&n);

    for (int i=1; i<=n; ++i)
    {
        scanf ("%d",&a[i]);
    }

    for (int i=1; i<=n; ++i)
    {
        scanf ("%d",&b[i]);
    }

    scanf ("%d",&m);

    for (int i=1; i<=m; ++i)
    {
        scanf ("%d %d %d %d",&q[i].l,&q[i].r,&q[i].x,&q[i].y);
    }

    int mm = 1;
    while (mm <= m)
      mm <<= 1;

    for (int i=1; i<=n; ++i)
    {
        B[0][mm>>1].push_back (i);
    }

    for (int p = (mm>>1), ok = 0; p >= 1; p >>= 1, ++ok)
    {
        memset (aib1,0,sizeof(aib1));
        memset (aib2,0,sizeof(aib2));

        int j = 1;

        for (int i=1; i<=m; ++i)
        {
            int l = q[i].l;
            int r = q[i].r;
            if (l == 0)
              l = 1;
            if (r != 0)
            {
            ll val = q[i].x - 1LL*l*q[i].y;
            update (aib1,l,val);
            update (aib1,r+1,-val);
            val = q[i].y;
            update (aib2,l,val);
            update (aib2,r+1,-val);
            }

            for (int j=0; j<B[ok][i].size(); ++j)
            {
                int x = B[ok][i][j];

                ll ans = query (aib1,x) + query(aib2,x)*x;

                int newi = i;
                if (ans + a[x] >= b[x])
                  newi -= p;
                int c = (p>>1),pl=1;
                while (newi + c > m)
                  c = (c>>1), ++pl;

                if (c != 0)
                {
                    B[ok+pl][newi+c].push_back (x);
                }
                else
                {
                    answer[x] = newi+1;
                }
            }
        }
    }

    for (int i=1; i<=n; ++i)
    {
        if (a[i] >= b[i])
          answer[i] = 0;
        else if (answer[i] > m)
          answer[i] = -1;
    }


    for (int i=1; i<=n; ++i)
    {
        cout<<answer[i]<<" ";
    }
}
