#include <bits/stdc++.h>

using namespace std;

#define PB push_back
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define LL long long
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%lld", &x)
#define MOD 10000007
#define SQ 1000
#define N 100010

LL sq;

vector<pair<pair<LL, LL>, LL > > vec[SQ];
LL add[N], mul[N];
LL a[N], b[N], ans[N];
LL st[SQ], en[SQ];
LL gr[N];

LL searc(LL x, LL node, LL sta){
    LL l = 0, mid;
    LL r = vec[x].size() - 1;
    while(l <= r){
        if(l == r) return l;
        if(l == r - 1){
            if( (a[node] + add[l] + (node - sta) * mul[l]) >= b[node]) return l;
            return r;
        }
        mid = (l + r) / 2;
        if( (a[node] + add[mid] + (node - sta) * mul[mid]) >= b[node] ){
            r = mid;
        }
        else{
            l = mid + 1;
        }
    }

}

LL make(LL x){
    if(vec[x].size() == 0) return 0;
    LL o = 0, d = 0, i;
    for(i = 0; i < vec[x].size(); i++){
        add[i] = vec[x][i].F.F;
        mul[i] = vec[x][i].F.S;
        if(i != 0){
            add[i] += add[i - 1];
            mul[i] += mul[i - 1];
        }
    }
    LL si = vec[x].size() - 1;
    for(i = st[x]; i <= en[x]; i++){
        if(ans[i] == -1){
            a[i] += (add[si] + ((i - st[x]) * mul[si]) );
            if(a[i] >= b[i]){
                a[i] -= (add[si] + ((i - st[x]) * mul[si]) );
                LL l = searc(x, i, st[x]);
                ans[i] = vec[x][l].S;
                a[i] += (add[si] + ((i - st[x]) * mul[si]) );
            }
        }
    }
    vec[x].clear();
}

LL ad(LL l, LL r, LL x, LL y, LL ind){
    make(gr[l]);
    LL i;
    for(i = l; i <= r; i++){
        if(gr[l] != gr[i]) {
            break;
        }
        if(ans[i] == -1) a[i] += (x);
        x += y;
        if(ans[i] == -1){
            if(a[i] >= b[i]){
                ans[i] = ind;
            }
        }
    }

    for(; i <= r; i++){
        if(gr[r] == gr[i]){
            break;
        }
        vec[ gr[i] ].PB(MP(MP(x, y), ind) );
        x += (sq * y);
        i = en[ gr[i] ];
    }
    make(gr[r]);

    for(; i <= r; i++){
        if(ans[i] == -1) a[i] += (x);
        x += y;
        if(ans[i] == -1){
            if(a[i] >= b[i]){
                ans[i] = ind;
            }
        }
    }
    return 0;
}

LL solve(){
    LL n, m, l, r, i;
    LL x, y;
    cin>>n;
    for(i = 1; i <= n; i++){
        sld(a[i]);
        ans[i] = -1;
    }
    for(i = 1; i <= n; i++){
        sld(b[i]);
    }
    sq = sqrt(n);
    LL g = 1;
    st[1] = 1;
    en[1] = min(sq, n);
    for(i = 1; i <= n; i++){
        gr[i] = g;
        if(i % sq == 0){
            g++;
            st[g] = i + 1;
            en[g] = min(i + sq, n);
        }
    }
    for(i = 1; i <= n; i++){
        if(a[i] >= b[i]) ans[i] = 0;
    }
    cin>>m;
    for(i = 1; i <= m; i++){
        cin>>l>>r>>x>>y;
        if(l == 0 && r == 0) continue;
        //if(x == 0 && y == 0) continue;
        if(l == 0){
            x += y;
            l = 1;
        }
        ad(l, r, x, y, i);
    }
    for(i = 1; i <= g; i++) make(i);
    for(i = 1; i < n; i++) printf("%lld ", ans[i]);
    cout<<ans[n];
}

int main(){
    //freopen("in.txt", "r", stdin);
    solve();
    return 0;
}
