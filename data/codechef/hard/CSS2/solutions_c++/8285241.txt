#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define sz(c) c.size()
#define rep(i,n) for(typeof(n) i = 0;i<n;i++)
#define range(i,a,b) for(typeof(b) i = a;i<=b;i++)
#define tr(it,c) for(typeof(c.begin()) it = c.begin();it!= c.end();++it)
#define x first
#define y second
#define author dipjal
#define gc() getchar_unlocked()
#define pc(x) putchar_unlocked(x)
using namespace std;
typedef long long int ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef map<int,int> mii;
const int SIZE = 1e2+5;
const ll mod = 1e9+7;
const ll epf = -1e5+9;
int N,Q;
int attr,id,val,priority;

inline void scan(int &n )//fast input function
{
   n=0;
   int ch=gc();int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=gc();}

   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=gc();
   n=n*sign;
}

static inline void Write(int ans){
    string res = "";
    do{
            res.pb((char)(ans%10+'0'));
            ans/=10;
    }while(ans);
    string::reverse_iterator it;
    for(it = res.rbegin();it!=res.rend();++it){
            pc((*it));
    }
    pc('\n');
}



class Statement{
public :
    int val;
    int priority;
    int executionLine;
public :
    Statement():val(0),priority(0),executionLine(0){}
    Statement(int x,int y,int z):val(x),priority(y),executionLine(z){}
    void display();
};

inline void Statement:: display(){
    cout<<val<<" "<<priority<<" "<<executionLine<<endl;
}
bool comp(const Statement& s1,const Statement& s2){
    if(s1.priority!=s2.priority)
        return(s1.priority<s2.priority);
    return(s1.executionLine<s2.executionLine);
}
map<pair<int,int>,vector<Statement> > mtp;
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int tt;
    cin>>N>>Q;
    mtp.clear();
    rep(i,N){
        cin>>id>>attr>>val>>priority;
        mtp[mp(id,attr)].pb(Statement(val,priority,i+1));
    }
    map<pair<int,int>,vector<Statement> >::iterator it;
    for(it = mtp.begin();it!=mtp.end();++it){
            vector<Statement> mteP = it->second;
            sort(all(mteP),comp);
            it->second = mteP;
    }
    rep(i,Q){
        cin>>id>>attr;
        pair<int,int> Query = mp(id,attr);
        int ans = mtp[Query][mtp[Query].size()-1].val;
        Write(ans);
    }
    mtp.clear();
    return 0;
}
