#include<bits/stdc++.h>
using namespace std;
typedef struct 
{
	int id;
	int attr;
	int value;
	int pr;
}CSS;
bool cmp(CSS a,CSS b)
{
	if(a.id!=b.id) return a.id<b.id;
	if(a.attr!=b.attr) return a.attr<b.attr;
	if(a.pr!=b.pr) return a.pr<b.pr;
	else return false;
}
CSS css[111111];
int bin_s(int id,int attr,int n)
{
	int low=0,high=n-1;
	int mid=(low+high)/2;
	while(low+1<high)
	{
		if(css[mid].id<id)
			low=mid+1;
		else if(css[mid].id==id&&css[mid].attr<attr)
			low=mid+1;
		else if(css[mid].id==id&&css[mid].attr==attr)
			low=mid;
		else high=mid-1;
		mid=(low+high)/2;
		//cout<<low<<" "<<mid<<" "<<high<<"\n";
	}
	if(css[high].id==id&&css[high].attr==attr)
		return css[high].value;
	else if(css[low+1].id==id&&css[low+1].attr==attr)
		return css[low+1].value;
	else return css[low].value;

}
int main()
{
	int n,m,id,attr;
	cin>>n>>m;
	for(int i=0;i<n;++i)
		scanf("%d%d%d%d",&css[i].id,&css[i].attr,&css[i].value,&css[i].pr);
	stable_sort(css,css+n,cmp);
	//for(int i=0;i<n;++i)
	//	cout<<css[i].id<<" "<<css[i].attr<<" "<<css[i].pr<<" "<<css[i].value<<"\n";
	for(int i=0;i<m;++i)
	{
		cin>>id>>attr;
		cout<<(bin_s(id,attr,n))<<"\n";
	}
	return 0;
}