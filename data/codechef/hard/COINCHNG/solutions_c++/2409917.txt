
//(C) Jarek Czekalski 2012-13

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <algorithm>
#include <bitset>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <sstream>
#include <vector>

using namespace std;

// debugging stuff {{{
#ifdef DEBUG
  #define bDebug 1
  #define bDebug2 1
#else
  #define bDebug 0
  #define bDebug2 0
#endif
#define deb(a) #a << "=" << (a) << " "
#ifndef HOME
  #define assert(a) {}
#endif

template<class T> ostream& operator<<(ostream& os, vector<T> v) //{{{
{
  for(int i=0; i<v.size(); i++)
    os << v[i] << " ";
  os << endl;
  return os;
}  //}}}
// }}} end of debugging stuff

#define array(a, type, count) type *a = (type*)calloc(sizeof(type), count)
#define eps 1e-9
#define eq(a, b) ( (a) > (b) - eps && (a) < (b) + eps )
#define eraseAll(v) v.erase(v.begin(), v.end())
#define fi first
#define rep(i,n) for(long i=0; i<(n); i++)
#define rep2(i,a,b) for(long i=(a); i<=(b); i++)
#define rep2d(i,a,b) for(long i=(a); i>=(b); i--)
#define zeroMem(a) memset(a, 0, sizeof(a))
#define zeroMem2(a, n) memset(a, 0, sizeof(*a) * n)
#define fore(it,L) for(typeof(L.begin()) it=L.begin(); it!=L.end(); it++)
#define eraseAll(v) v.erase(v.begin(), v.end())
#define se second
#define setMin(a,b) { typeof(b) rv = (b); if (rv < a) a = rv; }
#define setMinP(a,b) { typeof(b) rv = (b); \
                       if (rv >= 0 && (a < 0 || rv < a)) a = rv; }
#define setMax(a,b) { typeof(b) rv = (b); if (rv > a) a = rv; } 
#define swap(a,b) { typeof(a) swapVar = a; a = b; b = swapVar; }
#define Int long long

//*********************** SOLUTION    ******************************
#define N 100
#define M 1000
Int ac[N];
Int acw[N+1][M]; // ways of placing m coins using n smallest types
int c;

int init(int s, int c0) {
  int x = 0;
  int ic = 0;
  // cerr << deb(s) << deb(c0) << endl;
  rep(j, c0) ac[j] = 0;
  assert(c0 * c >= s);
  while (x < s) {
    if (ac[ic] + 1 == c) ic++;
    ac[ic]++;
    x += 1;
  }
  // rep2d(j, 5, 0) cerr << ac[j]; cerr << endl;
}

main ()
{
  ios::sync_with_stdio(false);
  //ifstream cin("0.in");
  
  int ct; cin >> ct;
  rep(it, ct) {
    int s; Int k; cin >> c >> s >> k;
    if (s == 0) { cout << 0 << endl; continue; }
    zeroMem(ac); zeroMem(acw);
    
    rep(i, c) acw[1][i] = 1;
    int cp = 1;
    while (acw[cp][s] < k) {
      cp++;
      rep(j, c) {
        rep(i, M)
          if (i - j >= 0) acw[cp][i] += acw[cp-1][i-j];
      }
    }
    // now cp show us the number of digits that must be used
    // cerr << deb(cp) << endl;
    
    Int z = k;
    int s2 = s;

    int ic = cp-1;
    while (ic > 0) {
      int a = 0;
      while (acw[ic][s2-a] < z) {
        z -= acw[ic][s2-a];
        a++;
      }
      ac[ic] = a;
      s2 -= a;
      ic--;
    }
    ac[0] = s2;
    // rep2d(j, 5, 0) cerr << ac[j] << "-"; cerr << endl;
    
    Int y = 0;
    ic = 0;
    Int a = 1;
    while (ic < N) {
      y += ac[ic] * a;
      a *= c, ic++;
    }
    cout << y << endl;
  }
}

// :collapseFolds=1:folding=explicit:
