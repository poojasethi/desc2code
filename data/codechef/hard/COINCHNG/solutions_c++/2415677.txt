//program COINCHNG

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>

using namespace std;

struct BigNumber
{
  long long X;
  long double Real;
};

BigNumber operator +(BigNumber A,BigNumber B)
{
  return (BigNumber){A.X+B.X,A.Real+B.Real};
}

BigNumber operator -(BigNumber A,BigNumber B)
{
  return (BigNumber){A.X-B.X,A.Real-B.Real};
}

bool OK(BigNumber A)
{
  if(fabs(A.Real)>1e9)
    return A.Real>0;
  return A.X>0;
}

long long Get()
{
  char c;
  while(c=getchar(),(c<'0'||c>'9')&&(c!='-'));
  bool Flag=(c=='-');
  if(Flag)
    c=getchar();
  long long X=0;
  while(c>='0'&&c<='9')
    {
      X=X*10+c-48;
      c=getchar();
    }
  return Flag?-X:X;
}

void Output(long long X)
{
  if(X<0)
    {
      putchar('-');
      X=-X;
    }
  int Len=0,Data[20];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  if(!Len)
    Data[Len++]=0;
  while(Len--)
    putchar(Data[Len]+48);
  putchar('\n');
}

int main()
{
  int Test=Get();
  while(Test--)
    {
      int Base=Get(),Sum=Get();
      BigNumber K;
      K.X=Get();
      K.Real=K.X;
      if(!Sum)
        {
          Output(0);
          continue;
        }
      static BigNumber DP[1000][501];
      memset(DP,0,sizeof(DP));
      DP[0][0]=(BigNumber){1,1};
      int Len=0;
      while(OK(K-DP[Len][Sum]))
        {
          Len++;
          for(int i=0;i<=Sum;i++)
            for(int j=0;j<Base&&j<=i;j++)
              DP[Len][i]=DP[Len][i]+DP[Len-1][i-j];
        }
      static int Digit[1000];
      for(int i=Len-1;i>=0;i--)
        {
          int j=0;
          while(j<=Sum&&OK(K-DP[i][Sum-j]))
            {
              K=K-DP[i][Sum-j];
              j++;
            }
          Digit[i]=j;
          Sum-=j;
        }
      long long Ans=0;
      for(int i=Len-1;i>=0;i--)
        Ans=Ans*Base+Digit[i];
      Output(Ans);
    }
  return 0;
}
