#include <cstdio>
#include <vector>
#include <cstring>
#define pb push_back
using namespace std;
const int M=710,N=M*M/2;

char s[M][M];
char ii[]={-1,-1,1,1},jj[]={-1,1,-1,1};

int used[N],match[N],d[N],vis[N],map[M][M],ver[2],n,m,adj[N][4],siz[N];

void bfs()
{
	int i,j,k,ed=0,u;
	for(i=0;i<ver[0];i++)
	if(!used[i])
	{
		vis[ed++]=i;
		d[i]=0;
	}
	else
	d[i]=-1;
	
	for(i=0;i<ed;i++)
	{
		j=vis[i];
		for(k=0;k<siz[j];k++)
		{
			u=match[adj[j][k]];
			if(u>=0 && d[u]==-1)
			{
				d[u]=d[j]+1;
				vis[ed++]=u;
			}
		}
	}
}
	
bool dfs(int i)
{
	for(int k=0;k<siz[i];k++)
	{
		int u=match[adj[i][k]];
		if(u<0 || ((d[u]==(d[i]+1)) && dfs(u)))
		{
			used[i]=1;
			match[adj[i][k]]=i;
			return true;
		}
	}
	d[i]=-1;
	return false;
}
	
int hopcart()
{
	int ans=0,temp;
	for(int i=0;i<ver[0];i++) used[i]=0,match[i]=-1;
	for(int i=ver[0];i<ver[1];i++) match[i]=-1;
	while(1)
	{
		temp=0;
		bfs();
		//memset(vis,0,sizeof(vis));
		for(int i=0;i<ver[0];i++)
		if(!used[i] && dfs(i))
			temp++;
		if(!temp) return ans;
		ans+=temp;
	}
}
	
int main()
{
	int i,j,k,flag,ci,cj,all,pc,pi,mi,mc;
	while(scanf("%d%d",&m,&n) && m!=0)
	{
		
		ver[0]=ver[1]=all=0;
		for(i=0;i<m;i++)
		scanf("%s",s[i]);
		
		for(i=0;i<m;i++)
			for(j=0;j<n;j++)
			{
			map[i][j]=-1;
			if(s[i][j]=='F')
			{
				for(flag=1,k=0;k<4 && flag;k++)
				{
					ci=i+ii[k]*2; cj=j+jj[k]*2;
					if(ci>=0 && ci<m && cj>=0 && cj<n && s[ci][cj]=='G' && s[i+ii[k]][j+jj[k]]!='P')
						flag=0;
				}
				if(flag)
				{
					all++;
					for(k=0;k<2;k++)
					{
						ci=i+ii[k]*2; cj=j+jj[k]*2;
						if(ci>=0 && ci<m && cj>=0 && cj<n && s[ci][cj]=='F' && s[i+ii[k]][j+jj[k]]!='P')
						{
							pc=(ci/2)%2;
							pi=(i/2)%2;
							int &mi=map[i][j];
							int &mc=map[ci][cj];
							if(mc==-1)
							{
								mc=ver[pc]++;
								if(pc==0) siz[mc]=0;
							}
							if(mi==-1)
							{
								mi=ver[pi]++;
								if(pi==0) siz[mi]=0;
							}
							
							if(pi==0)
								adj[mi][siz[mi]++]=mc;
							else
								adj[mc][siz[mc]++]=mi;
						}
					}
				}
				else
					s[i][j]='f';
			}
			}
			// printf("Ver1=%d Ver2=%d %d %d\n",ver[0],ver[1],all,hopcart());
			printf("%d\n",all-hopcart());
	}
	return 0;
}