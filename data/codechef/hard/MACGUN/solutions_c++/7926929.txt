#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <memory.h>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <set>
 
using namespace std;
 
#define Forn(i, n) for (int i = 0; i < (n); i++)
#define Fornr(i, n) for (int i = (n) - 1; i > -1; i--)
#define For(i, a, b) for (int i = (a); i < (b); i++)
#define Forr(i, a, b) for (int i = (b) - 1; i >= (a); i--)
#define fill(a, b) memset((a), (b), sizeof((a)))
#define pb push_back
#define inf 2147483647
#define F first
#define S second
#define N 705
#define M N * N
 
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vii;
 
const int st[4][2] = {{-1, -1}, {-1, 1}, {1, 1}, {1, -1}};
 
int n, m, kg[M], g[M][4], d[M], q[M], w[M], b[N][N], queue[M];
char a[N][N];
 
char bfs(int n, int m)
{
    int h = 0, t = 0;
    Forn(i, n)
        if (q[i] == -1)
        {
            d[i] = 0;
            queue[t++] = i;
        }
        else d[i] = -1;
 
    char res = 0;
    while (h < t)
    {
        int u = queue[h++];
        Forn(i, kg[u])
        {
            int v = w[g[u][i]];
            if (v == -1)
                res = 1;
            else if (d[v] == -1)
            {
                d[v] = d[u] + 1;
                queue[t++] = v;
            }
        }
    }
    return res;
}
 
char dfs(int u)
{
    Forn(i, kg[u])
    {
        int v = w[g[u][i]];
        if (v == -1 || (d[v] == d[u] + 1 && dfs(v)))
        {
            q[u] = g[u][i];
            w[g[u][i]] = u;
            return 1;
        }
    }
    d[u] = -1;
    return 0;
}
 
int matching(int n, int m)
{
    Forn(i, n) q[i] = -1;
    Forn(i, m) w[i] = -1;
    int res = 0;
    while (bfs(n, m))
    {
        Forn(i, n)
            if (q[i] == -1 && dfs(i))
                res++;
    }
    return res;
}
 
int inside(int x, int y)
{
    return x > -1 && y > - 1 && x < n && y < m;
}
 
int main()
{
#ifdef LocalHost
    freopen("in", "r", stdin);
//    freopen("out", "w", stdout);
#endif
    while (scanf("%d%d\n", &n, &m), n)
    {
        Forn(i, n) gets(a[i]);
 
        Forn(i, n) Forn(j, m)
            if (a[i][j] == 'G')
            {
                Forn(e, 4)
                {
                    int x = i + st[e][0], y = j + st[e][1], u = x + st[e][0], v = y + st[e][1];
                    if (inside(u, v) && a[x][y] != 'P' && a[u][v] == 'F')
                        a[u][v] = '.';
                }
            }
 
        int res = 0;
        Forn(di, 2) Forn(dj, 2)
        {
            int k = 0, k2 = 0;
            for (int i = di + 2; i < n; i += 4)
                for (int j = dj; j < m; j += 2)
                    if (a[i][j] == 'F')
                        b[i][j] = k2++;
 
            for (int i = di; i < n; i += 4)
                for (int j = dj; j < m; j += 2)
                    if (a[i][j] == 'F')
                    {
                        kg[k] = 0;
                        Forn(e, 4)
                        {
                            int x = i + st[e][0], y = j + st[e][1], u = x + st[e][0], v = y + st[e][1];
                            if (inside(u, v) && a[x][y] != 'P' && a[u][v] == 'F')
                                g[k][kg[k]++] = b[u][v];
                        }
                        k++;
                    }
            res += k + k2 - matching(k, k2);
        }
        printf("%d\n", res);
    }
}
 
