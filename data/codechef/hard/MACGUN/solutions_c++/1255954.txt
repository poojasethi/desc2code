#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
int match[500005],top,stack[500005],last[500005],son[2000005],pre[2000005],color[500005],bili,num[705][705],tot,moe[705][705];
char map[705][705],src[705][705];
bool flag[500005];
void add(int a,int b){son[++tot]=b;pre[tot]=last[a];last[a]=tot;}
bool find(int k)
{
	for(int x=last[k];x!=0;x=pre[x])
	{
		if(match[son[x]]==0)
		{
			match[son[x]]=k;
			return 1;	
		}	
	}
	for(int x=last[k];x!=0;x=pre[x])
	{
		if(!flag[son[x]]) 
		{ 	
			flag[son[x]]=1;stack[++top]=son[x];
			if(match[son[x]]==0 || find(match[son[x]]))
			{
				match[son[x]]=k;
				return 1;	
			}	
		}	
	}	
	return 0;
}
int main()
{
//freopen("a.in","r",stdin); freopen("a1.out","w",stdout);
	for(int i=1;i<=700;i++)
		for(int j=1;j<=700;j++)
			if(i<=2 || moe[i-2][j]==2) moe[i][j]=1;
			else moe[i][j]=2;
	int n,m;while(scanf("%d %d",&n,&m))
	{
		if(n==0 && m==0) break; 
		for(int i=1;i<=bili;i++)
			last[i]=0;
		tot=bili=0;
		for(int i=1;i<=n;i++)
			scanf("%s",map[i]+1);
		for(int i=1;i<=n;i++)
			for(int j=1;j<=m;j++)
				src[i][j]=map[i][j];
		for(int i=1;i<=n;i++)
			for(int j=1;j<=m;j++)
				if(src[i][j]=='G')
				{
					int dx,dy;
					dx=i+2,dy=j+2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx-1][dy-1]!='P')
							map[dx][dy]='G';
					dx=i-2,dy=j+2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx+1][dy-1]!='P')
							map[dx][dy]='G';
					dx=i-2,dy=j-2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx+1][dy+1]!='P')
							map[dx][dy]='G';
					dx=i+2,dy=j-2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx-1][dy+1]!='P')
							map[dx][dy]='G';
				}	
		for(int i=1;i<=n;i++)
			for(int j=1;j<=m;j++)
				if(map[i][j]=='F')	
					num[i][j]=++bili;
		for(int i=1;i<=n;i++)
			for(int j=1;j<=m;j++)
				if(map[i][j]=='F')
				{
					int dx,dy;
					dx=i+2,dy=j+2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx-1][dy-1]!='P')
							add(num[i][j],num[dx][dy]);
					dx=i-2,dy=j+2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx+1][dy-1]!='P')
							add(num[i][j],num[dx][dy]);
					dx=i-2,dy=j-2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx+1][dy+1]!='P')
							add(num[i][j],num[dx][dy]);
					dx=i+2,dy=j-2;
					if(dx<=n && dx>=1 && dy<=m && dy>=1)	
						if(map[dx][dy]=='F' && map[dx-1][dy+1]!='P')
							add(num[i][j],num[dx][dy]);
				} 
		for(int i=1;i<=n;i++)
			for(int j=1;j<=m;j++)
				if(map[i][j]=='F')
					color[num[i][j]]=moe[i][j];
		int ans=0,num1=0,num2=0;
		for(int i=1;i<=bili;i++)
			if(color[i]==1) num1++;
			else num2++;
		int tag=num1<num2?1:2;
		for(int i=1;i<=bili;i++)
			match[i]=0;
		for(int k=1;k<=top;k++)
			flag[stack[k]]=0;
		top=0;
		for(int i=1;i<=bili;i++)
			if(color[i]==tag)
			{
				for(int k=1;k<=top;k++)
					flag[stack[k]]=0;
				top=0;	
				if(find(i))
					ans++;
			}
		printf("%d\n",bili-ans);
	}
//	system("pause");
	return 0;	
}
