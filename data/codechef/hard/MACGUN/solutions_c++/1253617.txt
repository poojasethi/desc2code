#include <cstdio>
#include <algorithm>
#pragma comment(linker,"/STACK:16777216")
#define inf 1000000000
using namespace std;
const int sz=500000;
char A[702][702];
int dp[702][702];
int V[sz][5];
int nm[sz],nmi;
int matchedL[sz],matchedR[sz];
int dist[sz],N1,N2;
int visited[sz],visit[sz],vs;
int Q[sz<<1];

/*inline bool canaugment(){
    int v,nv,s=0,e=0;
    nmi=0;

    fill(dist,dist+(N1+1),inf);

    for(int i=1;i<=N1;i++)
        if(!matchedL[i]){dist[i]=0;Q[e++]=i;nm[nmi++]=i;}

    dist[0]=inf;

    while(s-e){
        v=Q[s++];
        for(int* ptr=V[v];nv=(*ptr);ptr++){
            if(dist[matchedR[nv]]==inf){
                dist[matchedR[nv]]=dist[v]+1;
                Q[e++]=matchedR[nv];
            }
        }
    }
    return dist[0]!=inf;
}*/

bool dfs(int v){
    visited[v]=1;
    visit[vs++]=v;
    if(v){
        int nv;

        for(int* ptr=V[v];nv=(*ptr);ptr++){
            if((!visited[matchedR[nv]])&&dfs(matchedR[nv])){
                matchedL[v]=nv;
                matchedR[nv]=v;
                return true;
            }
        }
        return false;
    }
    return true;
}

int main()
{

    int Dx[]={-2,-2,2,2};
    int Dy[]={-2,2,-2,2};
    int M,N;

    scanf("%d%d",&M,&N);

    int i,j,k;

    while(M&&N){
        for(i=0;i<M;i++)scanf("%s",A[i]);

        for(i=0;i<M;i++){
            fill(dp[i],dp[i]+N,0);
            for(j=0;j<N;j++){
                if(A[i][j]=='F'){
                    int pr=0,r,c;

                    for(k=0;k<4;k++){
                        r=i+Dx[k],c=j+Dy[k];
                        if(r>=0&&r<M&&c>=0&&c<N&&A[r][c]=='G'&&A[i+Dx[k]/2][j+Dy[k]/2]!='P'){pr=1;break;}
                    }
                    dp[i][j]=1-pr;
                }
            }
        }

        int ans=0;
        for(int dx=0;dx<2;dx++)
            for(int dy=0;dy<2;dy++){

                N1=N2=0;

                for(i=dx;i<M;i+=4)for(j=dy;j<N;j+=2)if(dp[i][j]){dp[i][j]=++N1;}
                for(i=dx+2;i<M;i+=4)for(j=dy;j<N;j+=2)if(dp[i][j]){dp[i][j]=++N2;}

                fill(matchedL,matchedL+(N1+1),0);
                fill(matchedR,matchedR+(N2+1),0);

                for(i=dx;i<M;i+=4){

                    for(j=dy;j<N;j+=2){
                        if(dp[i][j]){
                            int ci=0,idx=dp[i][j];
                            for(k=0;k<4;k++){
                                int r=i+Dx[k],c=j+Dy[k];


                                if(r>=0&&r<M&&c>=0&&c<N&&dp[r][c]&&A[i+Dx[k]/2][j+Dy[k]/2]!='P'){
                                    V[idx][ci++]=dp[r][c];
                                }

                            }
                            V[idx][ci]=0;
                        }
                    }
                }

                int cur=0;

                for(i=1;i<=N1;i++){
                    for(j=0;V[i][j];j++)
                        if(!matchedR[V[i][j]]){
                            matchedL[i]=V[i][j];
                            matchedR[V[i][j]]=i;
                            cur++;
                            break;
                        }
                }

                for(i=1;i<=N1;i++)
                    if(!matchedL[i]){
                        vs=0;
                        if(dfs(i))cur++;
                        for(int j=0;j<vs;j++)visited[visit[j]]=0;
                    }

                cur=N1+N2-cur;
                ans+=cur;
            }
        printf("%d\n",ans);

        scanf("%d%d",&M,&N);
    }

    return 0;
}
