#include <iostream>
#include <string>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <algorithm>
using namespace std;

int slope1[1000] = {0};
int slope2[1000] = {0};
long long power[17];
int x1,x2,i,j;
long long tot, l1, l2, l3, l4, l5, times;
char ZERO[17][18];
char NINE[17][18];

// 193838 -> 19(383)8
// 19(384 to 999) 10 times
// (20 to xx)(000 to 999) 10 times

int main ()
{

	//clock_t c0,c1; c0 = clock();
		
	// preprocessing of power of 10 of given exponent
	long long c = 1;
	for (i = 0; i < 17; i++)
	{
		power[i] = c;
		c *= 10;
	}
	
	// preprocessing of slope till 999
	int sl1 = 0 , sl2 = 0;
	
	for (i = 0; i <= 999; i++)
	{
		string s; stringstream ss;
		ss << i; ss >> s;
		if (s.size() == 2) s = "0" + s;
		if (s.size() == 1) s = "00" + s;
		if (i < 100)
		{
			if (s[1] < s[0] && s[1] < s[2]) sl1++;
			if (s[1] > s[0] && s[1] > s[2]) sl1++;
		} else {
			if (s[1] < s[0] && s[1] < s[2]) { sl1++; sl2++; }
			if (s[1] > s[0] && s[1] > s[2]) { sl1++; sl2++; }
			slope2[i] = sl2;
		}
		slope1[i] = sl1;
	}

	

	// preprocessing for gaps
	long long A[17] = {0};
	for (i = 3; i <= 16; i++)
		A[i] = A[i-1] + 525*(long long)pow(10.0,(double)(i-3)) + 513*(long long)pow(10.0,(double)(i-3))*(i-3);
	
	// preprocessing for starting and ending strings of given size
	for (i = 1; i <= 16; i++)
	{
		ZERO[i][0] = '1';
		for (j = 1; j < i; j++) ZERO[i][j] = '0';
		ZERO[i][i] = '\0'; 
	}

	for (i = 1; i <= 16; i++) 
		for (j = 0; j < i; j++) NINE[i][j] = '9';

	// Input starts here
	int t;
	scanf ("%d",&t);	
 
	int sz1,sz2,d1,d2;
	char b1[18],b2[18],s[18],r[18];
	while (t--)
	{
		
		// read A and B
		scanf ("%s%s",b1,b2);
			
		
		sz1 = strlen(b1);
		sz2 = strlen(b2);
			
		tot = 0;
	
		
		if (sz1 == sz2)	// A and B of same size
		{
			for (i = sz1-3; i >= 0; i--)
			{
				x1 = (b1[i+2]-'0')+(b1[i+1]-'0')*10+(b1[i]-'0')*100;
				x2 = (b2[i+2]-'0')+(b2[i+1]-'0')*10+(b2[i]-'0')*100;
				
				l1 = 0; l3 = 1;
				for (j = i-1; j >= 0; j--, l3 *= 10) l1 += (b1[j]-'0')*l3;
				l2 = 0;	l3 = 1;
				for (j = i-1; j >= 0; j--,l3 *= 10) l2 += (b2[j]-'0')*l3;
				
				if (l1 != l2) {
					l3 = 0;	l4 = 1;
					for (j = sz1-1; j >= i+3; j--,l4 *= 10) l3 += (b1[j]-'0')*l4;
			
					if (b1[i+1] < b1[i] && b1[i+1] < b1[i+2]) tot += (l4-l3);
					else if (b1[i+1] > b1[i] && b1[i+1] > b1[i+2]) tot += (l4-l3);
				
					times = power[sz1-i-3];
					tot += (slope1[999]-slope1[x1])*times;
					tot += (slope1[999]-slope1[0])*(l2-l1-1)*times;
					if (x2 != 0) tot += (slope1[x2-1]-slope1[0])*times;
					l3 = 0;	l4 = 1;
					for (j = sz1-1; j >= i+3; j--,l4 *= 10) l3 += (b2[j]-'0')*l4;
					l3++;
					if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l3;
					else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l3;
					
				} else {
					l4 = power[sz1-i-3];
					l3 = 0;	l5 = 1;
					for (j = sz1-1; j >= i+3; j--,l5 *= 10) l3 += (b1[j]-'0')*l5;
			
					if (b1[i+1] < b1[i] && b1[i+1] < b1[i+2]) tot += (l5-l3);
					else if (b1[i+1] > b1[i] && b1[i+1] > b1[i+2]) tot += (l5-l3);
					if (l1 != 0)
					{
						if (x1 != 0)
						{
							tot += (slope1[x2-1] - slope1[x1])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++; 
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						} else {
							tot += (slope1[x2-1] - slope1[0])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3; 
							l5++;						
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						}
					} else {

						if (x1 > 100)
						{
							tot += (slope2[x2-1] - slope2[x1])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++; 
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						} else {
							tot += (slope2[x2-1] - slope2[100])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++;
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						}
					}
				}
			}
		} else // go from A to NINE of length of A and from ZERO of length of B to B
		{
			strcpy(s,b2);
			strcpy(b2,NINE[sz1]);
		
			for (i = sz1-3; i >= 0; i--)
			{
				x1 = (b1[i+2]-'0')+(b1[i+1]-'0')*10+(b1[i]-'0')*100;
				x2 = (b2[i+2]-'0')+(b2[i+1]-'0')*10+(b2[i]-'0')*100;
				l1 = 0; l3 = 1;
				for (j = i-1; j >= 0; j--, l3 *= 10) l1 += (b1[j]-'0')*l3;
				l2 = 0;	l3 = 1;
				for (j = i-1; j >= 0; j--,l3 *= 10) l2 += (b2[j]-'0')*l3;
				
				if (l1 != l2) {
						
					l3 = 0;	l4 = 1;
					for (j = sz1-1; j >= i+3; j--,l4 *= 10) l3 += (b1[j]-'0')*l4;
			
					if (b1[i+1] < b1[i] && b1[i+1] < b1[i+2]) tot += (l4-l3);
					else if (b1[i+1] > b1[i] && b1[i+1] > b1[i+2]) tot += (l4-l3);
				
					times = power[sz1-i-3];
					tot += (slope1[999]-slope1[x1])*times;
					tot += (slope1[999]-slope1[0])*(l2-l1-1)*times;
					if (x2 != 0) tot += (slope1[x2-1]-slope1[0])*times;
					l3 = 0;	l4 = 1;
					for (j = sz1-1; j >= i+3; j--,l4 *= 10) l3 += (b2[j]-'0')*l4;
					l3++;
					if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l3;
					else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l3;
					
				} else {
					l4 = power[sz1-i-3];
					l3 = 0;	l5 = 1;
					for (j = sz1-1; j >= i+3; j--,l5 *= 10) l3 += (b1[j]-'0')*l5;
			
					if (b1[i+1] < b1[i] && b1[i+1] < b1[i+2]) tot += (l5-l3);
					else if (b1[i+1] > b1[i] && b1[i+1] > b1[i+2]) tot += (l5-l3);
					if (l1 != 0)
					{
						if (x1 != 0)
						{
							tot += (slope1[x2-1] - slope1[x1])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++; 
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						} else {
							tot += (slope1[x2-1] - slope1[0])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3; 
							l5++;						
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						}
					} else {

						if (x1 > 100)
						{
							tot += (slope2[x2-1] - slope2[x1])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++; 
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						} else {
							tot += (slope2[x2-1] - slope2[100])*l4;
							l5 = 0; l3 = 1;
							for (j = sz1-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++;
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						}
					}
				}
			}

			strcpy(b2,s);
		
			strcpy(b1,ZERO[sz2]);		

			for (i = sz2-3; i >= 0; i--)
			{
				x1 = (b1[i+2]-'0')+(b1[i+1]-'0')*10+(b1[i]-'0')*100;
				x2 = (b2[i+2]-'0')+(b2[i+1]-'0')*10+(b2[i]-'0')*100;
				
				l1 = 0; l3 = 1;
				for (j = i-1; j >= 0; j--, l3 *= 10) l1 += (b1[j]-'0')*l3;
				l2 = 0;	l3 = 1;
				for (j = i-1; j >= 0; j--,l3 *= 10) l2 += (b2[j]-'0')*l3;
			
				if (l1 != l2) {
						
					l3 = 0;	l4 = 1;
					for (j = sz2-1; j >= i+3; j--,l4 *= 10) l3 += (b1[j]-'0')*l4;
			
					if (b1[i+1] < b1[i] && b1[i+1] < b1[i+2]) tot += (l4-l3);
					else if (b1[i+1] > b1[i] && b1[i+1] > b1[i+2]) tot += (l4-l3);
				
					times = power[sz2-i-3];
					tot += (slope1[999]-slope1[x1])*times;
					tot += (slope1[999]-slope1[0])*(l2-l1-1)*times;
					if (x2 != 0) tot += (slope1[x2-1]-slope1[0])*times;
					l3 = 0;	l4 = 1;
					for (j = sz2-1; j >= i+3; j--,l4 *= 10) l3 += (b2[j]-'0')*l4;
					l3++;
					if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l3;
					else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l3;
					
				} else {
					l4 = power[sz2-i-3];
					l3 = 0;	l5 = 1;
					for (j = sz2-1; j >= i+3; j--,l5 *= 10) l3 += (b1[j]-'0')*l5;
			
					if (b1[i+1] < b1[i] && b1[i+1] < b1[i+2]) tot += (l5-l3);
					else if (b1[i+1] > b1[i] && b1[i+1] > b1[i+2]) tot += (l5-l3);
					if (l1 != 0)
					{
						if (x1 != 0)
						{
							tot += (slope1[x2-1] - slope1[x1])*l4;
							l5 = 0; l3 = 1;
							for (j = sz2-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++; 
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						} else {
							tot += (slope1[x2-1] - slope1[0])*l4;
							l5 = 0; l3 = 1;
							for (j = sz2-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3; 
							l5++;						
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						}
					} else {

						if (x1 > 100)
						{
							tot += (slope2[x2-1] - slope2[x1])*l4;
							l5 = 0; l3 = 1;
							for (j = sz2-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++; 
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						} else {
							tot += (slope2[x2-1] - slope2[100])*l4;
							l5 = 0; l3 = 1;
							for (j = sz2-1; j >= i+3; j--,l3 *= 10) l5 += (b2[j]-'0')*l3;
							l5++;
							if (b2[i+1] < b2[i] && b2[i+1] < b2[i+2]) tot += l5;
							else if (b2[i+1] > b2[i] && b2[i+1] > b2[i+2]) tot += l5;
						}
					}
				}
			}	
			tot += (A[sz2-1] - A[sz1]);
		}
		printf("%lld\n",tot);
	}
	//c1 = clock();
	//cout << (c1-c0) << "\n";
	return 0;
}		
