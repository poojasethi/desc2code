#include <stdio.h>
 
typedef unsigned long long LL;
 
#define MAXD 10
#define MAXL 16
 
int d[MAXL];
LL ten[MAXL];
LL isum[MAXD][MAXL];
LL psum[MAXD][MAXL];
LL sum[MAXD][MAXD][MAXL];
LL csum[MAXD][MAXD][MAXL];
 
#define ok(i,j,l) (j>i&&j>l)||(j<i&&j<l)
 
 
inline int min(int a, int b){
return a < b ? a : b;
}
 
inline void pre_compute(){
// O(N^3 * L)
ten[0] = 1;
int i, j, k, l;
for(i = 0; i < MAXL; i++) ten[i + 1] = (ten[i] << 3) + (ten[i] << 1);
for(k = 1; k < MAXL; k++){
for(i = 0; i < MAXD; i++){
for(j = 0; j < MAXD; j++){
for(l = 0; l < MAXD; l++) {sum[i][j][k] += sum[j][l][k - 1]; if(ok(i, j, l)) sum[i][j][k] += ten[k - 1];}
csum[i][j][k] = (j ? csum[i][j - 1][k] : 0) + sum[i][j][k];
}
isum[i][k] = i ? (csum[i][9][k] + isum[i - 1][k]) : 0;
psum[i][k] = psum[9][k - 1] + isum[i][k - 1];
}
}
}
 
inline LL calc(LL A){
// O(L)
LL B;int n = 0;
while( A ) B = A / 10, d[n++] = A - ((B << 3) + (B << 1)), A = B;
if(n < 3) return 0;
LL ret = 0, s = 0;
int i = n, j = n - 1, k = n - 2, lo, hi;
ret += psum[d[j] - 1][n - 1];
while(j > 0){
if(d[k]) ret += csum[d[j]][d[k] - 1][k];
if(i >= n) {i--, j--, k--; continue;}
if(d[j] < d[i]){
lo = d[j] + 1, hi = d[k] - 1;
if(lo <= hi){
ret += (hi - lo + 1) * ten[k] * (s + 1);
ret += (d[k] - 1 - hi + lo) * ten[k] * s;
}
else ret += d[k] * ten[k] * s;
}
else if(d[j] > d[i]){
lo = 0, hi = min(d[j] - 1, d[k] - 1);
if(lo <= hi){
ret += (hi - lo + 1) * ten[k] * (s + 1);
ret += (d[k] - 1 - hi + lo) * ten[k] * s;
}
else ret += d[k] * ten[k] * s;
}
else ret += d[k] * ten[k] * s;
s += ok(d[i], d[j], d[k]);
i--, j--, k--;
}
ret += s;
return ret;
}
 

#define MAXX 1500000
char *ipos, *opos, InpFile[MAXX], OutFile[MAXX], DIP[30];
inline int input_int(int flag){
while(*ipos <= 32) ++ipos;
if ( flag ) return (*ipos++ - '0');
int x = 0, neg = 0; char c;
while( 1 ) {
c = *ipos++; if(c == '-') neg = 1;
else{
if(c <= 32) return neg ? -x : x;
x = (x << 1) + (x << 3) + c - '0';
}
}
}
inline LL input_LL(int flag){
while(*ipos <= 32) ++ipos;
if ( flag ) return (*ipos++ - '0');
LL x = 0, neg = 0; char c;
while( 1 ) {
c = *ipos++; if(c == '-') neg = 1;
else{
if(c <= 32) return neg ? -x : x;
x = (x << 1) + (x << 3) + c - '0';
}
}
}
inline void input_st(char *s){
while(*ipos <= 32) ++ipos;
int pos = 0;char c;
while( 1 ) {
c = *ipos++;
if(c <= 32) {s[pos] = '\0'; break;}
else s[pos++] = c;
}
}
inline void output(LL x, int flag){
LL y;
int dig = 0;
while(x || !dig) {y = x / 10; DIP[dig++] = x - ((y << 3) + (y << 1)) + '0'; x = y;}
while(dig--) *opos++ = DIP[dig];
*opos++ = flag ? '\n' : ' ';
}
inline void InitFASTIO(){
ipos = InpFile; opos = OutFile;
fread_unlocked(InpFile, MAXX, 1, stdin);
}
inline void FlushFASTIO(){
fwrite_unlocked(OutFile, opos - OutFile, 1, stdout);
}

 
int main(){
pre_compute();
InitFASTIO();
unsigned int _ = input_int( 0 );
LL a, b;
while(_--){
a = input_LL( 0 ), b = input_LL( 0 );
output(calc( b ) - calc( a - 1 ), 1);
}
FlushFASTIO();

return 0;
} 
