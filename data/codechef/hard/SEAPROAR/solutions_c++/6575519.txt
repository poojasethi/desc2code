#include<iostream>
#include<stdio.h>
#include<math.h>
using namespace std;
 
unsigned X; // we assume that unsigned is a 32bit integer type
 
void srand1(unsigned S) {
	X = S;
}
 
unsigned nextInteger1(void) {
	X = X * 1103515245 + 12345;
	return (X / 65536) % 32768;
}
 
int generator1(int N, unsigned S, char* m) {
	srand1(S);
	bool flag = true;
	for (int i = 0; i < 50; i++) {
		if (nextInteger1() % 2 == (m[i] - 48)) {
			flag = false;
			return 0;
			break;
		}
 
	}
	return 1;
	if (flag) {
		return 1;
	} else
		return 0;
}
unsigned x, y, z, w; // we assume that unsigned is a 32bit integer type
 
void srand2(unsigned S) {
	x = S;
	y = x * S;
	z = y * S;
	w = z * S;
}
 
unsigned nextInteger2(void) {
	unsigned t = x ^ (x << 11);
	x = y;
	y = z;
	z = w;
	return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
}
 
void generator2(int N, unsigned S, int A[]) {
	srand2(S);
	for (int i = 1; i <= N; i++) {
		A[i] = nextInteger2() % 2;
	}
}
int main() {
	int tt;
	scanf("%d", &tt);
	while (tt--) {
		char ss[200005];
		scanf("%s",ss);
		bool flag =false;
		int mm = 131072;
		for (int i = 0; i < mm; i++) {
			if (generator1(50,i, ss) == 1) {
				flag = true;
				break;
			}
		}
		if(flag)printf("LCG\n");
		else printf("Xorshift\n");
	}
 
	return 0;
}