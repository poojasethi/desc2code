#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<cstring>
#include<string>
#include<cstdlib>
#include<math.h>
#include<cctype>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<cassert>
#include<sstream>
 
using namespace std;
 
#define L long
#define LL long long
#define ULL unsigned long long
//#define D double 
#define LD long double
#define MOD 1000000007
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ULL unsigned long long
#define pll pair <L,L>
#define INF ((1<<30)+(1<<29))
 
#define U unsigned



 
LL gcd(LL a,LL b){return (b)?gcd(b,a%b):a;}
LL lcm(LL a,LL b){return a*b/gcd(a,b);}
LL modpow(LL n ,LL k,LL mod)
{LL ans=1;while(k>0){if(k&1)ans=(ans*n)%mod;k>>=1;n=(n*n)%mod;}return ans%mod;}
LL max(LL a,LL b){return (a>b)?a:b;}
LL min(LL a,LL b){return (a<b)?a:b;}
LL ab(LL a){return (a>0)?a:-a;}
LL poww(LL n,LL k){LL ans=1;while(k>0){if(k&1)ans*=n;k>>=1;n*=n;}return ans;}


L max(L a,L b){return (a>b)?a:b;}
L min(L a,L b){return (a<b)?a:b;}
L ab(L a){return (a>0)?a:-a;}

int A[200005]={};

unsigned X; // we assume that unsigned is a 32bit integer type

void srand1(unsigned S){
  X = S;
}

unsigned nextInteger1(void){
  X = X * 1103515245 + 12345;
  return (X / 65536) % 32768;
}

int generator1(int N, unsigned S){
  srand1(S);int k=0;
  for(int i=1;i<=N;i++){
    k^= (nextInteger1() % 2); 
	if(k!=A[i-1])
	 return 0;
  }return 1;
}




int main()
{
 ios::sync_with_stdio(false);
 LL T,i,ans;string S;
 cin>>T;
 while(T--)
 {ans=0;
  cin>>S;
  i=0;
  A[i]=S[i]-48;
  for(i=1;i<S.size();i++)
   A[i]=A[i-1]^(S[i]-48);
  for(i=0;i<(1<<17);i++)
  {
   if(generator1(S.size(),i))
    ans=1,i=(1<<17);
  }
  if(ans)
   cout<<"LCG"<<endl;
  else
   cout<<"Xorshift"<<endl;
 }
 return 0;
}
	