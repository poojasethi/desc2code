#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <utility>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <string>
 
#define LL long long
#define vi vector<int>
#define pb push_back
#define sz size
#define all(x) (x).begin(),(x).end()
#define it iterator
#define REP(i,a,b) for(int i=(a);i<(b);i++)
#define REPX(i,a,b,c) for(int i=(a);i<(b);i+=(c))
#define DEP(i,a,b) for(int i=(a)-1;i>=(b);i--)
#define REX(i,x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end();i++)
#define pii pair<int,int>
#define mp make_pair
#define fi first
#define se second
#define st string
#define ffo find_first_of
#define su substr
#define vs vector<st>
#define ub upper_bound
#define lb lower_bound
#define ni next_int
#define gu getchar_unlocked
#define bs binary_search
#define ord(c) (c-'a')
#define mems(x) memset(x,0,sizeof(x))
#define memc(x,y) memcpy(x,y,sizeof(y))
#define MAX 100010
#define MOD 1000000009
using namespace std;
char x[MAX<<1],y[MAX];
int s[MAX<<1],a[MAX<<1],l[MAX<<1],b[MAX<<1],t[MAX<<1],f[MAX<<1],p[MAX<<1],q[MAX<<1],h=0;
inline int ni()
{
	int n=0,s=1; char c=gu();
	while(!(c>='0' && c<='9')) 
	{
		if(c=='-') s=-1;
		c=gu();
	}
	while(c>='0' && c<='9')
	{
		n=(n<<3)+(n<<1)+c-'0';
		c=gu();
	}
	return n*s;
}
struct comp
{
	bool operator()(const int &i,const int &j)
	{
		if(!h) return x[i]<x[j];
		return b[i]<b[j] || (b[i]==b[j] && b[i+h]<b[j+h]);
	}
};
int bucket(int n)
{
	int k=0; t[s[0]]=0;
	comp c;
	REP(i,1,n)
	{
		if(c(s[i-1],s[i])) k++;
		t[s[i]]=k;
	}
	memc(b,t);
	return k==(n-1);
}
void suffix(int n)
{
	REP(i,0,n) s[i]=i;
	comp c;
	sort(s,s+n,c);
	int fl=bucket(n);
	h=1;
	while(!fl)
	{
		sort(s,s+n,c);
		fl=bucket(n);
		h<<=1;
	}
}
void lcp(int n)
{
	l[0]=0; int k=0;
	REP(i,0,n)
	{
		int j=s[a[i]-1];
		while(x[i+k] && x[i+k]==x[j+k]) k++;
		l[a[i]]=k;
		if(k>0) k--;
	}
}
int len(int i,int n,int m)
{
	if(i<n-m-1) return n-m-1-i;
	return n-i;
}
int main()
{
	scanf("%s %s",x,y);
	int n=(int)strlen(x),m=(int)strlen(y);
	strcat(x,"$");
	strcat(x,y);
	n+=m+1;
	suffix(n+1);
	REP(i,0,n+1) a[s[i]]=i;
	REP(i,0,n+1)
	{
		if(s[i]>=n-m && s[i]<n) f[i]=2;
		else if(s[i]<n-m-1) f[i]=1;
	}
	//REP(i,0,n+1) printf("%d %d\n",s[i],f[i]);
	lcp(n);
	LL v=0;
	REP(i,2,n+1) v+=len(s[i],n,m)-l[i];
	p[n]=-1;
	DEP(i,n,2) 
	{
		if(f[i+1]==f[i]) p[i]=p[i+1];
		else p[i]=l[i+1];
	}
	q[n]=-1;
	DEP(i,n,2)
	{
		if(f[i+1]==f[i])
		{
			if(q[i+1]==-1) q[i]=l[i+1];
			else q[i]=min(l[i+1],q[i+1]);
		}
		else q[i]=-1;
	}
	REP(i,2,n+1) if(p[i]>=0)
	{
		if(q[i]==-1) v-=max(0,p[i]-l[i]);
		else
		{
			int j=max(0,p[i]-l[i]),k=max(0,q[i]-l[i]);
			v-=min(j,k);
		}
	}
	printf("%lld\n",v);
	return 0;
}