#include <cstdio>
#include <algorithm>
#include <cstring>
#include<bits/stdc++.h>
using namespace std;

#define REP(i, n) for (long long i = 0; i < (long long)(n); ++i)

  const long long MAXN = 200010;
    char S[200010];
    long long N, gap;
    long long sa[MAXN], pos[MAXN], tmp[MAXN], lcp[MAXN];

    bool sufCmp(long long i, long long j)
    {
        if (pos[i] != pos[j])
            return pos[i] < pos[j];
        i += gap;
        j += gap;
        return (i < N && j < N) ? pos[i] < pos[j] : i > j;
    }

    void buildSA(char S[])
    {
        N = strlen(S);
        REP(i, N) sa[i] = i, pos[i] = S[i]-'_';
        for (gap = 1;; gap *= 2)
        {
            sort(sa, sa + N, sufCmp);
            tmp[0]=0;
            REP(i, N - 1) tmp[i + 1] = tmp[i] + sufCmp(sa[i], sa[i + 1]);
            REP(i, N) pos[sa[i]] = tmp[i];
            if (tmp[N - 1] == N - 1) break;
        }
    }

    void buildLCP(char S[])
    {
        for (long long i = 0, k = 0; i < N; ++i) if (pos[i] != N - 1)
        {
            for (long long j = sa[pos[i] + 1]; S[i + k] == S[j + k];)
            ++k;
            lcp[pos[i]] = k;
            if (k)--k;
        }
    }
  
char str[100005];
char str2[100005];
int main()
{
	
	ios::sync_with_stdio(false);
        
        scanf("%s",str);
        scanf("%s",str2);
        long long i=0;
        long long len1=strlen(str);
        long long len2=strlen(str2);
        for(i=0;i<len1;i++)
        S[i]=str[i];
        S[i]='_';
        i++;
        for(long long j=0;j<len2;j++)
        {
        	S[i]=str2[j];
        	i++;
        }
        S[i]='\0';
        
        //cout<<S<<endl;
        
        
        buildSA(str);
        
        buildLCP(str);
        long long dis1=0;
        for(long long i=0;i<len1;i++)
        {
        	dis1+= len1-sa[i]-lcp[i];
        }
        memset(sa,0,sizeof(sa));
        memset(tmp,0,sizeof(tmp));
        memset(pos,0,sizeof(pos));
        memset(lcp,0,sizeof(lcp));
        buildSA(str2);
        
        buildLCP(str2);
        long long dis2=0;
        for(long long i=0;i<len2;i++)
        {
        	dis2+= len2-sa[i]-lcp[i];
        }
        memset(sa,0,sizeof(sa));
        memset(tmp,0,sizeof(tmp));
        memset(pos,0,sizeof(pos));
        memset(lcp,0,sizeof(lcp));
         buildSA(S);
        
        buildLCP(S);
        long long mx=0;
        for(long long i=0;i<N;i++)
        {
        	mx+= N-sa[i]-lcp[i];
        }
        mx=mx-(len1+1)*(len2+1);
        
        printf("%lld\n",dis1+dis2-2*(dis1+dis2-mx));
   
    return 0;
}
