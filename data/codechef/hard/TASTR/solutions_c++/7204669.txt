#include<bits/stdc++.h>
using namespace std;
typedef long long          ll;
typedef long double        ld;
typedef pair<int,int>      pii;
typedef pair<ll,ll>        pll;
typedef vector<int>        vi;
typedef vector<long long>  vll;
#define mp                 make_pair
#define pb                 push_back
#define all(a)             a.begin(),a.end()
#define sor(a)             sort(all(a));
#define rsor(a)            sor(a) reverse(all(a));
#define pr(n)              printf("%d ",n)
#define s(n)               scanf("%d",&n)
#define debug(a)           std::cerr<<#a<<"="<<(a)<<"\n"
#define ss                 second
#define ff                 first
const int mod=1e9+7;
const long double PI = (long double)(3.1415926535897932384626433832795);

inline bool ispow2(int x){return (x!=0 && (x&(x-1))==0);} //0 or 1

template<class T>
inline void cinarr(T a, int n){ for (int i=0;i<n;++i) cin >> a[i];}

inline ll powmod(ll a,ll b) {ll res = 1; while(b){if(b&1) res = (res*a)%mod;a = (a*a)%mod;b >>= 1;}return res;}

inline ll gcd(ll a,ll b){ll t;while(b){a=a%b;t=a;a=b;b=t;}return a;}
inline ll lcm(ll a,ll b){return a/gcd(a,b)*b;}
#define MAXN 200005
int lcp[MAXN], cnt[256], cls[2][MAXN], sa[2][MAXN], st[MAXN], rnk[MAXN];

void suffixArray(string s) {
    int i, j;
    memset(cnt, 0, sizeof(cnt));
    int n = s.size();
    for (i = 0; i < n; i++) { cnt[s[i]] ++; cls[0][i] = s[i];}
    for (i = 1; i <= 255; i++) cnt[i] += cnt[i - 1];
    for (i = 0; i < n; i++) sa[0][--cnt[cls[0][i]]] = i;
    int cur = 0;
    for (i = 0; (1 << i) < n; i++) {
        int clen = (1 << i);
        for (j = 0; j < n; j++) {
            if (j > 0 && sa[cur][j - 1] + clen < n && cls[cur][sa[cur][j]] == cls[cur][sa[cur][j - 1]] &&
                    cls[cur][sa[cur][j] + clen / 2] == cls[cur][sa[cur][j - 1] + clen / 2]
               )
                cls[1 - cur][sa[cur][j]] = cls[1 - cur][sa[cur][j - 1]];
            else cls[1 - cur][sa[cur][j]] = j;
        }
        for (j = 0; j < n; j++) { st[j] = j; sa[1 - cur][j] = sa[cur][j]; }
        for (j = 0; j < n; j++) {
            int cele = sa[cur][j] - clen;
            if (cele >= 0) sa[1 - cur][st[cls[1 - cur][cele]]++] = cele;
        }
        cur = 1 - cur;
    }
    for (i = 0; i < n; i++) { sa[0][i] = sa[cur][i]; rnk[sa[cur][i]] = i;}
    int x = 0;
    for (i = 0; i < n; i++) {
        if (rnk[i] < n - 1) {
            for (j = sa[cur][rnk[i] + 1]; max(i, j) + x < n && s[i + x] == s[j + x]; x++);
            lcp[rnk[i] + 1] = x; if (x > 0) x--;
        }
    }
}
int main() {
    string s,t; cin >> s>>t;
    suffixArray(s);
    int n = s.size();
    ll us=0;
    for(int i=0;i<n;i++) us+=(n-sa[1][i])-lcp[i];
    //   debug(us);
    memset(st,0,sizeof(st));
    memset(lcp,0,sizeof(lcp));
    memset(sa,0,sizeof(sa));
    memset(rnk,0,sizeof(rnk));
    memset(cls,0,sizeof(cls));
    suffixArray(t);
    n = t.size();
    ll ut=0;
    for(int i=0;i<n;i++) ut+=(n-sa[1][i])-lcp[i];
    //debug(ut);
    memset(st,0,sizeof(st));
    memset(lcp,0,sizeof(lcp));
    memset(sa,0,sizeof(sa));
    memset(rnk,0,sizeof(rnk));
    memset(cls,0,sizeof(cls));
    string c=s+string("$")+t;
    // debug(c);
    suffixArray(c);
    n = c.size();
    ll uc=0;
    for(int i=0;i<n;i++) uc+=(n-sa[1][i])-lcp[i];
    //debug(uc);
    ll ans=0;
    ans=2*(uc-(ll)(s.length()+1)*(t.length()+1)) - us - ut;
    cout<<ans<<"\n";
    return 0;
}
























