/*
Suffix array O(n lg^2 n)
LCP table O(n)
*/

#include <bits/stdc++.h>

using namespace std;

const int MAXN = 200010;

int N,gap;
int sa[MAXN], pos[MAXN], tmp[MAXN], lcp[MAXN];

bool sufCmp(int i, int j)
{
	if (pos[i] != pos[j])
		return pos[i] < pos[j];
	i += gap;
	j += gap;
	return (i < N && j < N) ? pos[i] < pos[j] : i > j;
}

void buildSA(string S , int N)
{

	for (int i = 0; i < N; ++i) sa[i] = i, pos[i] = S[i];
	for (gap = 1;; gap *= 2)
	{
		sort(sa, sa + N, sufCmp);

		for (int i = 0; i < N-1; ++i)
			tmp[i + 1] = tmp[i] + sufCmp(sa[i], sa[i + 1]);

		for (int i = 0; i <N; ++i)
			pos[sa[i]] = tmp[i];

		if (tmp[N - 1] == N - 1) break;
	}
}

void buildLCP(string S, int N)
{
	for (int i = 0, k = 0; i < N; ++i) if (pos[i] != N - 1)
	{
		for (int j = sa[pos[i] + 1]; S[i + k] == S[j + k];)
			++k;
		lcp[pos[i]] = k;
		if (k)--k;
	}
}

long long countDistinctSubstring(string s,int len) {


	memset(sa,0,sizeof(sa));
	memset(pos,0,sizeof(pos));
	memset(lcp,0,sizeof(lcp));
	memset(tmp,0,sizeof(tmp));

	//cout<<" s = "<<s<<" len = "<<len<<endl;

	long long distinctSubstring=0;

	N=len;

	buildSA(s,len);
	buildLCP(s,len);

	distinctSubstring = (long long)len*(long long)(len+1);
	distinctSubstring /= 2;

	for(int i=0;i<=len;++i) 
		distinctSubstring -= lcp[i];

	return distinctSubstring;

	
}


int main() {

	int test=1; 
	
	while(test--) {

		string a,b;
		getline(cin,a,'\n');
		getline(cin,b,'\n');
		int alen = a.length();
		int blen = b.length();
		int clen = alen + blen + 1;
		long long c1 = countDistinctSubstring(a,alen);
		long long c2 = countDistinctSubstring(b,blen);
		long long c3 = countDistinctSubstring(a+"$"+b,clen);

	
		//cout<<" c1 = "<<c1<<" c2 = "<<c2<<" c3 = "<<c3<<endl;

		c3 -= (long long)(alen+1)*(long long)(blen+1);

		//cout<<" c3 = "<<c3<<endl;

		long long ans = 2*c3-c1-c2;

		cout<<ans<<endl;

		
	}

return 0;
}