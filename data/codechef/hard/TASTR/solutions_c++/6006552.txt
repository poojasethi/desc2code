//Bismillahir Rahmanir Rahim
#include <bits/stdc++.h>
using namespace std;
#define MAXN 300009
#define MAXLG 25

char A[MAXN];
char B[MAXN],K[MAXN],J[MAXN];
struct entry {
    int  nr[2], p;
} L[MAXN];

int  P[MAXLG][MAXN], N, i, stp, cnt, nthsuffix[MAXN], suffixnumber[MAXN];

int  cmp(struct entry a, struct entry b)
{
    return a.nr[0] == b.nr[0] ? (a.nr[1] < b.nr[1] ? 1 : 0) : (a.nr[0] < b.nr[0] ? 1 : 0);
}
int  lcp(int  x, int  y)
{
    int  k, ret = 0;
    if (x == y) return N - x;
    for (k = stp - 1; k >= 0 && x < N && y < N; k --)
    {
        if (P[k][x] == P[k][y])
        {
            x += 1 << k, y += 1 << k, ret += 1 << k;
        }
    }
    return ret;
}
void buildsuffix()
{
    N=0;
    for ( i = 0; *(A+i) ; i ++)
    {
        P[0][i] = *(A+i);
        N++;
    }
    for (stp = 1, cnt = 1; cnt >> 1 < N; stp ++, cnt <<= 1)
    {
        for (i = 0; i < N; i ++)
        {
            L[i].nr[0] = P[stp - 1][i];
            L[i].nr[1] = i + cnt < N ? P[stp - 1][i + cnt] : -1;
            L[i].p = i;
        }
        sort(L, L + N, cmp);
        for (i = 0; i < N; i ++)
        {
            P[stp][L[i].p] = i > 0 && L[i].nr[0] == L[i - 1].nr[0] && L[i].nr[1] == L[i - 1].nr[1] ? P[stp][L[i - 1].p] : i;
        }
    }
    for (i = 0; i < N; i ++)
    {
        nthsuffix[P[stp-1][i]]=i;
        suffixnumber[i]=P[stp-1][i];
    }
}
long long  no_distinct_substr()
{
    long long ans=0;
    ans = N - L[0].p;
    for(i = 1; i < N; i++)
    {
        ans += N - L[i].p - lcp(nthsuffix[i-1], nthsuffix[i]);
    }
    return ans;
}
int  main()
{

    long long N1,N2,N3,N4,N5,N6,N7;


    scanf("%s",A);
    strcpy(K,A);
    buildsuffix();
    N1=no_distinct_substr();
    //cout<<K<<endl;
    strcpy(B,A);
    scanf("%s",A);
    strcpy(J,A);
    buildsuffix();
    N2=no_distinct_substr();
    //cout<<J<<endl;

    strcat(B,"#");
    strcat(B,A);
    strcpy(A,B);
    buildsuffix();
    N3=no_distinct_substr();
    N6=strlen(J)+1;
    N7=strlen(K)+1;
    //cout<<A<<endl;

    N4=N3-N6*N7;

    N5=N1+N2-N4;
    N5*=2;

   // cout<<N1<<" "<<N2<<" "<<N3<<" "<<N4<<" "<<N5<<endl;

    cout<<N1+N2-N5<<endl;

    return 0;
}
