#include<bits/stdc++.h>
using namespace std;
#define max 300001
string s;
int h=0,pos[max],nbucket[max],bucket[max],l,lcp[max];

bool cmp(int a,int b)
{
	if(h==0)
		return s[a]<s[b];
	else
	{
		if(bucket[a]==bucket[b])
			return bucket[a+h]<bucket[b+h];
		else
			return bucket[a]<bucket[b];
	}
}

bool cmp1(int a,int b)
{
	if(h==0)
	{
		if(s[a]==s[b])
			return false;
		else
			return true;
	}
	else
	{
		if(bucket[a]==bucket[b] && bucket[a+h]==bucket[b+h])
			return false;
		else
			return true;
	}
}

int assign_rank()
{
	int id=0,temp=0,c=0;
	for(int i=0;i<l;i++)
	{
		if(i>0 && cmp1(pos[i],pos[i-1]))
		{
			++id;
			temp=i;
		}
		if(temp!=i)
			c=1;
		nbucket[pos[i]]=id;
	}
	memcpy(bucket,nbucket,4*l);
	return c;
}

void build_suffix_array()
{
	for(int i=0;i<l;i++)
		pos[i]=i;
	sort(pos,pos+l,cmp);
	int c=assign_rank();
	for(h=1;c;h*=2)
	{
		sort(pos,pos+l,cmp);
		c=assign_rank();
	}
}

void build_lcp_array()
{
	int ipos[l];
	for(int i=0;i<l;i++)
		ipos[pos[i]]=i;
	lcp[0]=0;
	int h=0;
	for(int i=0;i<l;i++)
	{
		if(ipos[i]>0)
		{
			int j=pos[ipos[i]-1];
			while(i+h<l && j+h<l && s[i+h]==s[j+h])
				h++;
			lcp[ipos[i]]=h;
			if(h>0)
				h--;
		}
	}
}

void solve()
{
	string p;
	long long ans[3];
	long long fin=1;
	memset(ans,0,3*sizeof(long long));
	for(int i=0;i<3;i++)
	{
		if(i==1)
			p+='$';
		if(i!=2)
		{
			cin>>s;
			fin*=(s.length()+1);
			p+=s;
		}
		else
			s=p;		
		l=s.length()+1;
		build_suffix_array();
		build_lcp_array();
		h=0;
		for(int k=0;k<l;k++)
			ans[i]+=(l-1)-pos[k]-lcp[k];
		memset(pos,0,4*l);memset(nbucket,0,4*l);memset(bucket,0,4*l);
	}
	fin*=-2;
	fin+=2*ans[2]-ans[0]-ans[1];
	cout<<fin;
}

int main()
{
	ios_base::sync_with_stdio(false);
	solve();
	return 0;
}