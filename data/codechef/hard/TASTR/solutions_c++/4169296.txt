#include <bits/stdc++.h>

using namespace std;
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
typedef unsigned long long ull;
typedef long long int lli;
typedef unsigned int ui;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long double ld;
#define var(a,b)  __typeof(b) a = b
#define rep(i,n)  for(int i = 0; (i) < (n); ++i)
#define rept(i,a,b) for(var(i,a); i < (b); ++i)
#define tr(v,it)  for(var(it,v.begin());it!=v.end();++it)
#define fill(a,val) memset(a,val,sizeof(a))
#define all(v) v.begin(),v.end()

#define get getchar_unlocked

//fast input
template<class T>
inline T scan_int() {int ip=get(),flag=1;T ret=0;for(;ip<'0'||ip>'9';ip=get())if(ip=='-'){flag=-1;ip=get();break;}for(;ip>='0'&&ip<='9';ip=get())ret=(ret<<3)+(ret<<1)+ip-'0';return flag*ret;}
#define scan_d() scan_int<int>()
#define scan_ld() scan_int<long int>()
#define scan_lld() scan_int<long long int>()
template <class T>
inline T scan_decimal(){char c;c = get();T flag=1.0;long long int t = 0;for(;c<'0'||c>'9';c=get())if(c=='-'){flag=-1.0;c=get();break;}while(c<='9' && c>='0'){t=(t<<3)+(t<<1)+c-'0';c = get();}long long int d=0,i=1;if(c=='.'){c = get();while(c<='9' && c>='0'){i=(i<<3)+(i<<1);d=(d<<3)+(d<<1)+c-'0';c = get();}}return ((T)t + ((T)d)/i)*flag;}
#define scan_f() scan_decimal<float>()
#define scan_lf() scan_decimal<double>()
inline void scan_str(char *str){register char c = 0;register int i = 0;while (c < 33)c = get();while (c != '\n' && c != EOF){str[i] = c;c = get();i = i + 1;}str[i] = '\0';}
//end of fast input

//fast output
#define put putchar_unlocked
char output_buffer[21];
template <class T>
inline void print_int(T n) {if(n<0){n=-n;put('-');}int i=21;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{put(output_buffer[i]);}while(++i<21);}
#define print_d print_int<int>
#define print_ld print_int<long int>
#define print_lld print_int<long long int>
template <class T>
inline void println_int(T n) {print_int(n);put('\n');}
#define println_d println_int<int>
#define println_ld println_int<long int>
#define println_lld println_int<long long int>
template <class T>
inline void printsp_int(T n,char ch) {print_int(n);put(ch);}
#define printsp_d printsp_int<int>
#define printsp_ld printsp_int<long int>
#define printsp_lld printsp_int<long long int>
inline void print_str(char *str){char* temp=str;while((*temp)!='\0'){put(*temp);temp++;}}
inline void println_str(char *str){print_str(str); put('\n');}
//end of fast output

#define N 200009

char str[N]; //input
lli rank1[N], sa[N]; //output
lli cnt[N], next1[N]; //internal
bool bh[N], b2h[N];

// Compares two suffixes according to their first characters
bool smaller_first_char(lli a, lli b){
	return str[a] < str[b];
}

void suffixSort(lli n){
  //sort suffixes according to their first characters
	for (lli i=0; i<n; ++i){
		sa[i] = i;
	}
	sort(sa, sa + n, smaller_first_char);
  //{sa contains the list of suffixes sorted by their first character}

	for (lli i=0; i<n; ++i){
		bh[i] = i == 0 || str[sa[i]] != str[sa[i-1]];
		b2h[i] = false;
	}

	for (lli h = 1; h < n; h <<= 1){
    //{bh[i] == false if the first h characters of sa[i-1] == the first h characters of sa[i]}
		lli buckets = 0;
		for (lli i=0, j; i < n; i = j){
			j = i + 1;
			while (j < n && !bh[j]) j++;
			next1[i] = j;
			buckets++;
		}
    	if (buckets == n) break; // We are done! Lucky bastards!
    //{suffixes are separted in buckets containing strings starting with the same h characters}

	    for (lli i = 0; i < n; i = next1[i]){
	    	cnt[i] = 0;
	    	for (lli j = i; j < next1[i]; ++j){
	    		rank1[sa[j]] = i;
	    	}
	    }

	    cnt[rank1[n - h]]++;
	    b2h[rank1[n - h]] = true;
	    for (lli i = 0; i < n; i = next1[i]){
	    	for (lli j = i; j < next1[i]; ++j){
	    		lli s = sa[j] - h;
	    		if (s >= 0){
	    			lli head = rank1[s];
	    			rank1[s] = head + cnt[head]++;
	    			b2h[rank1[s]] = true;
	    		}
	    	}
	    	for (lli j = i; j < next1[i]; ++j){
	    		lli s = sa[j] - h;
	    		if (s >= 0 && b2h[rank1[s]]){
	    			for (lli k = rank1[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
	    		}
	    	}
		}
		for (lli i=0; i<n; ++i){
			sa[rank1[i]] = i;
			bh[i] |= b2h[i];
		}
	}
	for (lli i=0; i<n; ++i){
		rank1[sa[i]] = i;
	}
}
// End of suffix array algorithm


// Begin of the O(n) longest common prefix algorithm
// Refer to "Linear-Time Longest-Common-Prefix Computation in Suffix
// Arrays and Its Applications" by Toru Kasai, Gunho Lee, Hiroki
// Arimura, Setsuo Arikawa, and Kunsoo Park.
lli lcp[N];
// lcp[i] = length of the longest common prefix of suffix sa[i] and suffix sa[i-1]
// lcp[0] = 0
void getHeight(lli n){
	for (lli i=0; i<n; ++i) rank1[sa[i]] = i;
		lcp[0] = 0;
	for (lli i=0, h=0; i<n; ++i){
		if (rank1[i] > 0){
			lli j = sa[rank1[i]-1];
			while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
			lcp[rank1[i]] = h;
			if (h > 0) h--;
		}
	}
}
// End of longest common prefixes algorithm
// char s1[N], s2[N];

// int main() {
// #ifdef LOCAL
// 	freopen("/home/pramesh/Desktop/codes/in", "r", stdin);
// #endif

// 	// scan_str(s1);
// 	// scan_str(s2);

// 	lli n1, n2, n3;
// 	lli val1 = 0, val2 = 0, valunion = 0;

// 	scanf("%s%s", s1, s2);

// 	n1 = strlen(s1);
// 	n2 = strlen(s2);

// 	rep(i, n2) str[i] = s2[i];

// 	suffixSort(n2);
// 	getHeight(n2);

// 	rep(i, n2) val2 += (n2 - sa[i] - lcp[i]);

// 	rep(i, n1) str[i] = s1[i];

// 	suffixSort(n1);
// 	getHeight(n1);

// 	rep(i, n1) val1 += (n1 - sa[i] - lcp[i]);

// 	str[n1] = '$';
// 	rep(i, n2) str[n1 + 1 + i] = s2[i];

// 	n3 = n1 + n2 + 1;

// 	suffixSort(n3);
// 	getHeight(n3);

// 	rep(i, n3) valunion += (n3 - sa[i] - lcp[i]);

// 	valunion -= ((n1 + 1) * (n2 + 1));
	
// 	lli ans = (valunion<<1) - (val1 + val2);

// 	println_d(ans);

// 	return 0;
// }

char c[N], s[N];

long long substr_count(int n,char S[])
{
	 int i;
	 rep(i, n) str[i] = S[i];
	 suffixSort(n);
	 getHeight(n);
	 long long res;
	 res=1LL*n*(n+1)/2;
	 for(i=0;i<n;i++) res-=lcp[i];
	 return res;
}
 
int main() 
{
#ifdef LOCAL
	freopen("/home/pramesh/Desktop/codes/in", "r", stdin);
#endif
    scanf("%s",s);
    long long ans1 = substr_count(strlen(s),s);
    //cout << ans1 << endl;
    int n = strlen(s)+1;
	scanf("%s",c);
	long long ans2 = substr_count(strlen(c),c);
	//cout << ans2 << endl;
	int m = strlen(c)+1;
	char temp[]={'a'-1,'\0'};
	strcat(s,temp);
	strcat(s,c);
	long long ans3 = substr_count(strlen(s),s)-(long long)n*(long long)m;
	long long ans = 2*ans3-ans1-ans2;
	printf("%lld\n",ans);
	return 0;
} 