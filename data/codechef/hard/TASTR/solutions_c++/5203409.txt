#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
#define S(x) scanf("%d",&x)
#define P(x) printf("%d\n",x)

typedef long long LL;

const int MAXN = 200005;
char S1[MAXN], S2[MAXN], S3[MAXN];
int N, gap;
int sa[MAXN], pos[MAXN], tmp[MAXN], lcp[MAXN];

bool sufCmp(int i, int j)
{
    if (pos[i] != pos[j])
        return pos[i] < pos[j];
    i += gap;
    j += gap;
    return (i < N && j < N) ? pos[i] < pos[j] : i > j;
}

void buildSA(char *S)
{
    //N = strlen(S);
    REP(i, N) sa[i] = i, pos[i] = S[i];
    for (gap = 1;; gap *= 2)
    {
        sort(sa, sa + N, sufCmp);
        REP(i, N - 1) tmp[i + 1] = tmp[i] + sufCmp(sa[i], sa[i + 1]);
        REP(i, N) pos[sa[i]] = tmp[i];
        if (tmp[N - 1] == N - 1) break;
    }
}

void buildLCP(char *S)
{
    for (int i = 0, k = 0; i < N; ++i) if (pos[i] != N - 1)
    {
        for (int j = sa[pos[i] + 1]; S[i + k] == S[j + k];)
        ++k;
        lcp[pos[i]] = k;
        if (k)--k;
    }
}

LL solve(char *S, int L)
{
    N = L;
    buildSA(S);
    buildLCP(S);
    LL ans = 0;
    //cout<<S<<"\n";
    lcp[N-1] = 0; // because of global
    rep(i,0,N) {
        //cout<<sa[i]<<" "<<lcp[i]<<"\n";
        ans += N-sa[i]-lcp[i];
    }
    //cout<<"ans = "<<ans<<"\n";
    return ans;
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
    #endif
    scanf("%s",S1);
    scanf("%s",S2);
    strcat(S3,S1);
    strcat(S3,"$");
    strcat(S3,S2);
    //cout<<S1<<"\n"<<S2<<"\n"<<S3;

    int n=strlen(S1);
    int m=strlen(S2);
    LL U1 = solve(S1, n);
    LL U2 = solve(S2, m);
    LL U3 = solve(S3, n+m+1) - ((LL)n+1)*(m+1);

    //cout<<U1<<" "<<U2;

    //LL ans = 2*U1 + 2*U2 - U3 + (n+1)*(m+1);
    LL ans = 2*U3 - U1 - U2;
    printf("%lld",ans);
    return 0;
}
