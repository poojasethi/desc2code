//OM
#include <cmath>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <list>
#include <stack>
#include <queue>
#include <utility>
#include <sstream>
#include <algorithm>
using  namespace  std;

#define  x first
#define  y second
#define  pb push_back
#define  mp make_pair
#define  PI (acos(-1.0))
#define  mem(a,b) memset(a,b,sizeof(a))
#define  Sort(x) sort(x.begin(),x.end())
#define  FOR(i, b, e) for(int i = b; i <= e; i++)
#define  FORR(i, b, e) for(int i = b; i >= e; i--)
#define  FORI(i, s) for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)
#define  pr(x) cout<<x<<"\n"
#define  prs(x) cout<<x<<" "
#define  pr2(x,y) cout<<x<<" "<<y<<"\n"
#define  pr3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n"
#define  ppr(a) cout<<a.x<<" "<<a.y<<"\n"

typedef  long long ll;
typedef  pair <int, int> pii;
typedef  pair <double , double> pdd;
typedef  vector <int> vi;
typedef  vector <pii> vpii;

//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};
//int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction

#define  EPS 1e-9
#define  MAX 200007

// Suffix Array O(n log n) from CP3
pair<pii , int > arr[MAX];
string text;
int Rank[21][MAX],step,lcp[MAX];
void buildSA(int n)
{
    int k;
    FOR(i,0,n-1)Rank[0][i]=text[i];
    for(step=k=1;k<=n;step++,k<<=1)
    {
        FOR(i,0,n-1)
        {
            arr[i].y=i;
            arr[i].x.x=Rank[step-1][i];
            arr[i].x.y=(i+k)<n?Rank[step-1][i+k]:-1;
        }
        sort(arr,arr+n);
        int cnt=0;
        FOR(i,0,n-1)
            Rank[step][arr[i].y]=(i>0)&&arr[i].x==arr[i-1].x?Rank[step][arr[i-1].y]:cnt++;
        if(cnt==n)break;
    }
}
void kasai(int n)
{
    lcp[0]=0;
    FOR(i,1,n-1)
    {
        int x=arr[i-1].y;
        int y=arr[i].y;
        lcp[i]=0;
        for(int k=step-1;k>=0&&x<n&&y<n; k--)
            if(Rank[k][x]==Rank[k][y])
            {
                lcp[i]+=(1<<k);
                x+=(1<<k);
                y+=(1<<k);
            }
    }
}

int owner(int pos,int m)
{
    return pos<m?1:2;
}
ll uniquestr(int n)
{
    buildSA(n);
    kasai(n);
    ll ans=0;
    //printSA();
    FOR(i,1,n-1)
    {
        ans+=(n-1-arr[i].y-lcp[i]);
    }
    return ans;
}
int main()
{
    int T,n,m,k;
    char s[MAX];
    ll ans=0;
        scanf("%s",s);
        string ttt=s;
        m=ttt.size();
        text=ttt+"$";
        ans-=uniquestr(m+1);
        ttt+=".";
        scanf("%s",s);
        k=strlen(s);
        text=s;
        text+="$";
        ans-=uniquestr(k+1);
        ttt+=s;
        ttt+="$";
        n=ttt.size();
        text=ttt;
        ans+=2*(uniquestr(n)-1LL*(k+1)*(m+1));
        printf("%lld\n",ans);

    return 0;
}

