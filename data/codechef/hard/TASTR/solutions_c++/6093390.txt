#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <deque>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <string>
#include <stack>
#include <sstream>
#include <vector>
#include <numeric>

#define FOR(i, a, b) for(int i = a; i <= b; ++i)
#define FRD(i, a, b) for(int i = a; i >= b; --i)
#define FR(i, a) for(int i = 0; i < a; ++i)
#define REP(i, a) for(int i = 0; i <= a; ++i)
#define pb push_back
#define sz(x) (int)x.size()
#define reset(a, b) memset(a, b, sizeof a)
#define bug(x) cout << #x << " = " << x << endl
#define bg(a, m, n) FOR(i, m, n) cout << a[i] << " "; cout << endl
using namespace std;

typedef long long ll;
typedef unsigned long long qword;

const int maxN = 2e5 + 5;

int n;
char a[maxN], b[maxN], ch[maxN];
ll s;
int SA[maxN], RA[maxN], tempSA[maxN], tempRA[maxN];
int l[maxN], c[maxN];

void Sort(int k) {
    int i, sum, maxi = max(300, n);
    reset(c, 0);
    for(i = 0; i < n; ++i)
        ++c[i + k < n ? RA[i + k] : 0];
    for(i = sum = 0; i < maxi; ++i) {
        int tmp = c[i]; c[i] = sum; sum += tmp;
    }
    for(i = 0; i < n; ++i)
        tempSA[c[SA[i] + k < n ? RA[SA[i] + k] : 0]++] = SA[i];
    for(i = 0; i < n; ++i)
        SA[i] = tempSA[i];
}

void Build() {
    int i, k, r;
    reset(SA, 0); reset(RA, 0); reset(tempSA, 0); reset(tempRA, 0);
    for(i = 0; i < n; ++i) SA[i] = i;
    for(i = 0; i < n; ++i) RA[i] = ch[i];
    for(k = 1; k < n; k <<= 1) {
        Sort(k); Sort(0);
        tempRA[SA[0]] = r = 0;
        for(i = 1; i < n; ++i)
            tempRA[SA[i]] = (RA[SA[i]] == RA[SA[i-1]] && RA[SA[i] + k] == RA[SA[i-1] + k] ? r : ++r);
        for(i = 0; i < n; ++i)
            RA[i] = tempRA[i];
        if (RA[SA[n-1]] == n - 1) break;
    }

    reset(l, 0);
    int q = 0;
    for(i = 0; i < n - 1; ++i) {
        int j = SA[RA[i] - 1];
        while (ch[i + q] == ch[j + q]) ++q;
        l[RA[i]] = q;
        q = max(0, q - 1);
    }
}

ll Cal() {
    ll res = 0;
    Build();
    FOR(i, 0, n - 1)
        res += (ll)(n - 1 - SA[i] - l[i]);
    return res;
}

int main() {
    gets(a);
    strcpy(ch, strcat(a, "$"));
    s = n = (int)strlen(ch);
    ll x = Cal();

    gets(b);
    strcpy(ch, strcat(b, "#"));
    n = strlen(ch);
    s = s * n;
    ll y = Cal();

    strcat(strcpy(ch, a), b);
    n = strlen(ch);
    ll z = Cal();

    z -= s;
    cout << z * 2 - x - y;
    return 0;
}

