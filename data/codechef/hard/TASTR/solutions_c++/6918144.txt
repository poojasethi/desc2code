#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef vector<VI> VVI;

// s should contains dummy character in the end
// n = (the length of original s) + 1
LL substr_count(int n,char *s)
{
	// constructing of suffix array
	// refer to e-maxx.ru :)
	VI cnt(128);
	for(int i=0;i<n;i++)
		cnt[s[i]]++;
	for(int i=1;i<128;i++)
		cnt[i]+=cnt[i-1];
	VI p(n);
	for(int i=0;i<n;i++)
		p[--cnt[s[i]]]=i;
	VVI c(1,VI(n));
	int w=0;
	for(int i=0;i<n;i++)
	{
		if(i==0 || s[p[i]]!=s[p[i-1]]) w++;
		c[0][p[i]] = w-1;
	}

	for(int k=0,h=1;h<n;k++,h*=2)
	{
		VI pn(n);
		for(int i=0;i<n;i++) {
			pn[i] = p[i] - h;
			if(pn[i]<0) pn[i] += n;
		}
		VI cnt(w,0);
		for(int i=0;i<n;i++)
			cnt[c[k][pn[i]]]++;
		for(int i=1;i<w;i++)
			cnt[i]+=cnt[i-1];
		for(int i=n;i--;)
			p[--cnt[c[k][pn[i]]]]=pn[i];
		w=0;
		c.push_back(VI(n));
		for(int i=0;i<n;i++)
		{
			if(i==0 || c[k][p[i]] != c[k][p[i-1]]) {
				w++; 
			} else {
				int i1 = p[i]   + h; if(i1>=n) i1-=n;
				int i2 = p[i-1] + h; if(i2>=n) i2-=n;
				if(c[k][i1]!=c[k][i2]) w++;
			}
			c[k+1][p[i]] = w-1;
		}
	}

	// the answer is all substrings minus sum lcp of neighboring suffixes
	LL ans = LL(n)*(n-1)/2;
	for(int k=1;k<n;k++)
	{
		// calculating lcp of neighboring suffixes
		// again refer to e-maxx.ru :D
		int i=p[k];
		int j=p[k-1];
		int cur = 0;
		for (int h=c.size(); h--;)
			if (c[h][i] == c[h][j]) {
				cur += 1<<h;
				i += 1<<h;
				j += 1<<h;
			}
		ans-=cur;
	}
	return ans;
}

char s[200003];

int main()
{
	scanf("%s",s);
	int n = strlen(s)+1;
	s[n-1] = 'a'-1; // adding dummy character

	scanf("%s",s+n);
	int m = strlen(s+n)+1;
	s[n+m-1] = 'a'-2; // adding dummy character that less than previous dummy character
	s[n+m]=0;

	LL ans1 = substr_count(n,s);
	LL ans2 = substr_count(m,s+n);
	LL ans3 = substr_count(n+m,s)-LL(n)*m; // see editorial for details
	LL ans = 2*ans3-ans1-ans2;
	printf("%lld\n",ans);
	return 0;
}