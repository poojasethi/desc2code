#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <utility>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <string>
 
#define LL long long
#define vi vector<int>
#define pb push_back
#define sz size
#define all(x) (x).begin(),(x).end()
#define it iterator
#define REP(i,a,b) for(int i=(a);i<(b);i++)
#define REPX(i,a,b,c) for(int i=(a);i<(b);i+=(c))
#define DEP(i,a,b) for(int i=(a)-1;i>=(b);i--)
#define REX(i,x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end();i++)
#define pii pair<int,int>
#define mp make_pair
#define fi first
#define se second
#define st string
#define ffo find_first_of
#define su substr
#define vs vector<st>
#define ub upper_bound
#define lb lower_bound
#define ni next_int
#define gu getchar_unlocked
#define bs binary_search
#define ord(c) (c-'0')
#define MAX 100010
#define MOD 1000000007
using namespace std;
char x[MAX<<1],y[MAX];
int s[MAX<<1],a[MAX<<1],b[MAX<<1],t[MAX<<1],l[MAX<<1],c[MAX<<1],h=0;
inline int ni()
{
	int n=0,s=1; char c=gu();
	while(!(c>='0' && c<='9')) 
	{
		if(c=='-') s=-1;
		c=gu();
	}
	while(c>='0' && c<='9')
	{
		n=(n<<3)+(n<<1)+c-'0';
		c=gu();
	}
	return n*s;
}
struct comp
{
	bool operator()(const int &i,const int &j)
	{
		if(!h) return x[i]<x[j];
		return b[i]<b[j] || (b[i]==b[j] && b[i+h]<b[j+h]); 
	}
};
int bucketise(int n)
{
	int k=0; t[s[0]]=0;
	comp c;
	REP(i,1,n)
	{
		k+=c(s[i-1],s[i]);
		t[s[i]]=k;
	}
	memcpy(b,t,sizeof(b));
	return (k==n-1);
}
void suffix(int n)
{
	REP(i,0,n) s[i]=i;
	comp c;
	sort(s,s+n,c);
	int f=bucketise(n);
	h=1;
	while(!f)
	{
		sort(s,s+n,c);
		f=bucketise(n);
		h<<=1;
	}
}
void lcp(int n)
{
	l[0]=0; int k=0;
	REP(i,0,n)
	{
		int j=s[a[i]-1];
		while(x[i+k] && x[i+k]==x[j+k]) k++;
		l[a[i]]=k;
		if(k>0) k--;
	}
}
int len(int i,int m,int n)
{
	if(s[i]>=n+1) return n+m-s[i]+1;
	return n-s[i];
}
int diff(int i,int j,int m,int n)
{
	i=s[i]; j=s[j];
	return (i<n && j>=n+1) || (i>=n+1 && j<n);
}
int main()
{
	scanf("%s %s",x,y);
	int n=(int)strlen(x),m=(int)strlen(y);
	strcat(x,"$");
	strcat(x,y);
	suffix(n+m+2);
	REP(i,0,n+m+2) a[s[i]]=i;
	lcp(n+m+1);
	c[n+m+1]=-1;
	DEP(i,n+m+1,2)
	{
		if(diff(i,i+1,m,n)) c[i]=l[i+1];
		else 
		{
			if(c[i+1]==-1) c[i]=-1;
			else c[i]=min(l[i+1],c[i+1]);
		}
	}
	LL v=0;
	REP(i,2,n+m+2)
	{
		v+=len(i,m,n)-max(c[i],l[i]);
		//printf("%s %lld\n",x+s[i],v);
	}
	printf("%lld\n",v);
	return 0;
}
