#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define inf 1000000000
#define maxn 1000000
#define lg2 20

#define ll long long
#define pii pair<int, int>
#define pb push_back
#define sin scanint
#define sll scanll
#define fill(s, p) memset(s, p, sizeof(s));

#ifdef ONLINE_JUDGE
#define gc getchar_unlocked
#endif

#ifndef ONLINE_JUDGE
#define gc getchar
//freopen("input.txt", "r", stdin)
//freopen("output.txt", "w", stdout)
#endif

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

void scanll(ll &x)
{
    register ll c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

ll modpow(ll a, ll b)
{
	ll x=1ll, y=a;
	while(b){
		if(b%2)
			x=(x*y);
		y=(y*y);
		b/=2;
	}
	return x;
}

ll gcd(ll a, ll b)
{
	if(a%b==0)
		return b;
	else
		return gcd(b, a%b);
}

char s1[maxn], s2[maxn], s3[maxn];

struct suffix{
	int index;
	int rank[2];
};

int comp(suffix a, suffix b)
{
	if(a.rank[0]==b.rank[0])
		return (a.rank[1]<b.rank[1]);
	return (a.rank[0]<b.rank[0]);
}

int sortIndex[lg2][maxn];
suffix sucker[maxn];

ll solve(ll len, char *s)
{
	int i, j, step, cnt, donetill, x, y;
	double lgf = log2(len);
	int z = ceil(lgf);
	for(i=0; i<len; i++)
		sortIndex[0][i] = s[i]-'a';
	for(step=1, cnt=1; cnt<len; cnt*=2, step++){
		for(i=0; i<len; i++){
			sucker[i].rank[0] = sortIndex[step-1][i];
			sucker[i].rank[1] = (i+cnt)<len?sortIndex[step-1][i+cnt]:-1;
			sucker[i].index = i;
		}
		sort(sucker, sucker+len, comp);
		for(i=0; i<len; i++){
			if(i>0 && sucker[i].rank[0]==sucker[i-1].rank[0] && sucker[i].rank[1]==sucker[i-1].rank[1])
				sortIndex[step][sucker[i].index] = sortIndex[step][sucker[i-1].index];
			else
				sortIndex[step][sucker[i].index] = i;
		}
	}
	step--;
	int arr[len];
	for(i=0; i<len; i++)
		arr[sortIndex[step][i]] = i;
	ll lcpsum = 0, noname;
	for(i=1; i<len; i++){
		for(cnt=z, x=arr[i], y=arr[i-1]; cnt>=0; cnt--){
			noname = modpow(2, cnt);
			if((x+noname)<=len && (y+noname)<=len && sortIndex[cnt][x]==sortIndex[cnt][y]){
				lcpsum += noname;
				x += noname;
				y += noname;
			}
		}
	}
	ll ans = (len*(len+1))/2;
	ans -= lcpsum;
	return ans;
}

int main()
{
	ll n, m;
	int i, j;
	scanf("%s%s", s1, s2);
	n = strlen(s1);
	m = strlen(s2);
	strcat(s3, s1);
	strcat(s3, "$");
	strcat(s3, s2);
	ll ans, p1, p2, p3;
	p1 = solve(n, s1);
	p2 = solve(m, s2);
	p3 = solve(n+m+1, s3) - (n+m+1) - (n*m);
	//cout << p1 << " " << p2 << " " << p3 << endl;
	ans = 2*p3 - p1 - p2;
	printf("%lld\n", ans);
	return 0;	
}