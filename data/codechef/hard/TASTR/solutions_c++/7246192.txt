//suffix array
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define	MAXLEN 200010
int SA[MAXLEN] , pos[MAXLEN] , temp[MAXLEN] , LCP[MAXLEN];
string A,B,S;
int n,gap;
ll cnta,cntb,cntc;
bool suffcomp(int i,int j)
{
	if(pos[i]!=pos[j])
	return pos[i]<pos[j];
		i+=gap;
		j+=gap;
	return (i<n && j<n)? (pos[i]<pos[j]) : i>j;
}
void build_SA()
{
	n=S.size();
	for(int i=0;i<n;i++)
	{
		SA[i]=i;
		pos[i]=S[i];
	}
	temp[0]=0;
	for(gap=1; ;gap=(gap<<1))
	{
		sort(SA,SA+n,suffcomp);
		for(int i=0;i<n-1;i++)	temp[i+1]= temp[i] + suffcomp(SA[i],SA[i+1]);
		for(int i=0;i<n;i++)	pos[SA[i]]=temp[i];
		if(temp[n-1]==n-1)	break;
	}
} 
void build_LCP()
{
	n=S.size();
	LCP[n-1]=0;
	for(int i=0,h=0;i<n;i++)
	{
		if(pos[i]!=n-1)
		{
			
			for(int j=SA[pos[i]+1]; S[i+h]==S[j+h];)	h++;
			LCP[pos[i]]=h;
			if(h)	h--;
		}
	}
}
ll unique_substrings()
{
	n=S.size();
	ll cnt=0;
	for(int i=0;i<n;i++)
	{
		cnt=cnt+n-SA[i]-LCP[i];
	}
	return cnt;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin>>A>>B;
	S=A;
	build_SA();
	build_LCP();
	cnta=unique_substrings();
	S=B;
	build_SA();
	build_LCP();
	cntb=unique_substrings();
//	cout<<cntb<<"\n";
	S=A+'$'+B;
	build_SA();
	build_LCP();
	cntc=unique_substrings();
//	cout<<cntc<<"\n";
	cntc=cntc-(A.size()+1)*1LL*(B.size()+1);
	ll res=2*cntc-cnta-cntb;
	cout<<res<<"\n";
}