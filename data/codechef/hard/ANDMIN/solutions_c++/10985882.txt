#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcountll(x)
#define print(A,j,k) for(int ii=j;ii<k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int MOD = 1e9 + 7;
const int N = 3e6 + 5;

int A[N];

struct node {
	int bit;
	int ans;
	node () {
		bit = 0;
		ans = inf;
	}
};

struct node tree[N];

void build(int node , int l , int r) {
	if (l > r)
		return;

	if (l == r) {
		tree[node].ans = A[l];
		tree[node].bit = A[l];
		return;
	}
	int mid = (l + r) / 2;
	build(2 * node , l , mid);
	build(2 * node + 1 , mid + 1 , r);
	tree[node].ans = min(tree[2 * node].ans , tree[2 * node + 1].ans);
	tree[node].bit = ( tree[2 * node].bit | tree[2 * node + 1].bit );
}

//AND range with 0
void update(int b , int node , int l , int r , int ql , int qr) {
	
	if (l > r || ql > qr || l > qr || r < ql)
		return;

	if ( ( tree[node].bit & (1 << b) ) == 0)		//range has no element with bit b
		return;

	if (l == r) {
		tree[node].ans ^= (1 << b);
		tree[node].bit = tree[node].ans;
		return;
	}
	int mid = (l + r) / 2;
	update(b , 2 * node , l , mid , ql , qr);
	update(b , 2 * node + 1 , mid + 1 , r , ql , qr);
	tree[node].ans = min(tree[2 * node].ans , tree[2 * node + 1].ans);
	tree[node].bit = ( tree[2 * node].bit | tree[2 * node + 1].bit );
}

int query(int node , int l , int r , int ql , int qr) {
	
	if (l > r || ql > qr || l > qr || r < ql)
		return inf;

	if (l >= ql && r <= qr)
		return tree[node].ans;
	int mid = (l + r) / 2;
	int a = query(2 * node , l , mid , ql , qr);
	int b = query(2 * node + 1 , mid + 1 , r , ql , qr);
	return min(a , b);
}

int main(int argc, char const *argv[])
{
	fast;

	int n , q;
	cin >> n >> q;

	rep(i , n)
		cin >> A[i];

	build(1 , 0 , n - 1);

	while (q--) {
		int type , l , r , x;
		cin >> type;
		if (type == 1) {
			cin >> l >> r >> x;
			l--;r--;
			rep(i , 32) {
				if ( ((1 << i) & x) == 0)
					update(i , 1 , 0 , n - 1 , l , r);
			}
		}
		else {
			cin >> l >> r;
			l--;
			r--;
			cout << query(1 , 0 , n - 1 , l , r) << '\n';
		}
	}

	return 0;
}