#include <stdio.h>
#include <algorithm>
using namespace std;

typedef pair <int, int> pii;
const int MAX = 1e5 + 1;
int n, q, a[MAX], type, u, v, x;
pii it[6 * MAX];

void init(const int& lef, const int& rig, const int& k){
    if (lef == rig){
        it[k] = pii(a[lef], a[lef]);
        return;
    }
    int mid = (lef + rig) >> 1;
    init(lef, mid, k << 1);
    init(mid + 1, rig, (k << 1) + 1);
    it[k] = pii(min(it[k << 1].first, it[(k << 1) + 1].first), it[k << 1].second | it[(k << 1) + 1].second);
}

int get(const int& lef, const int& rig, const int& u, const int& v, const int& k){
    if (lef == u && rig == v)
        return it[k].first;
    int mid = (lef + rig) >> 1;
    if (v <= mid)
        return get(lef, mid, u, v, k << 1);
    else
    if (u > mid)
        return get(mid + 1, rig, u, v, (k << 1) + 1);
    else
        return min(get(lef, mid, u, mid, k << 1), get(mid + 1, rig, mid + 1, v, (k << 1) + 1));
}

void down(const int& lef, const int& rig, const int& k){
    if (lef == rig){
        a[lef] &= x;
        it[k] = pii(a[lef], a[lef]);
        return;
    }
    int mid = (lef + rig) >> 1;
    if (it[k << 1].second & (~x))
        down(lef, mid, k << 1);
    if (it[(k << 1) + 1].second & (~x))
        down(mid + 1, rig, (k << 1) + 1);
    it[k] = pii(min(it[k << 1].first, it[(k << 1) + 1].first), it[k << 1].second | it[(k << 1) + 1].second);
}

void up(const int& lef, const int& rig, const int& u, const int& v, const int& k){
    if (lef == u && rig == v){
        down(lef, rig, k);
        return;
    }
    int mid = (lef + rig) >> 1;
    if (v <= mid)
        up(lef, mid, u, v, k << 1);
    else
    if (u > mid)
        up(mid + 1, rig, u, v, (k << 1) + 1);
    else{
        up(lef, mid, u, mid, k << 1);
        up(mid + 1, rig, mid + 1, v, (k << 1) + 1);
    }
    it[k] = pii(min(it[k << 1].first, it[(k << 1) + 1].first), it[k << 1].second | it[(k << 1) + 1].second);
}

int main(){
    //freopen("in.txt", "r", stdin);
    scanf("%d %d", &n, &q);
    for (int i = 1; i <= n; ++i)
        scanf("%d", a + i);
    init(1, n, 1);

    while (q--){
        scanf("%d %d %d", &type, &u, &v);
        if (type){
            scanf("%d", &x);
            up(1, n, u, v, 1);
        }
        else
            printf("%d\n", get(1, n, u, v, 1));
    }

    return 0;
}
