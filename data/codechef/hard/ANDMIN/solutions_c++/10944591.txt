#include<bits/stdc++.h>
#define ll long long int
#define mp make_pair
#define pb push_back
#define si(x) scanf("%d",&x)
#define pi(x) printf("%d\n",x)
#define s(x) scanf("%I64d",&x)
#define p(x) printf("%I64d\n",x)

using namespace std;

int A[100002];int M[400002], M1[400002];

void build_tree(int node,int b,int e){
      if (b == e) M[node]=A[b],M1[node]=A[e];
      else{
          build_tree(2*node,b,(b+e)/2);
          build_tree(2*node+1,(b+e)/2+1,e);

          M[node]=min(M[2*node],M[2*node+1]);
          M1[node]=M1[2*node] | M1[2*node+1];
    }
}

void update(int node, int b,int e,int i,int j,int x,int val){
	if(!(M1[node] & val)){
		return;
	}
	if(b>j || e<i){
		return;
	}
	if(b==e){
		M[node]&=x;
		M1[node]&=x;
	}
	else{
		update(2*node,b,(b+e)/2,i,j,x,val);
		update(2*node+1,(b+e)/2+1,e,i,j,x,val);
		M[node] = min(M[2*node],M[2*node+1]);
		M1[node]= M1[2*node] | M1[2*node+1];
	}
}


 int query(int node,int b,int e,int i,int j){
      int p1, p2;

      if (i>e || j<b) return 1e9+9;

      if (b>=i && e<=j) return M[node];

      p1 = query(2*node,b,(b+e)/2,i,j);
      p2 = query(2*node+1,(b+e)/2+1,e,i,j);

      return min(p1,p2);
}


int main(){
   int n,q;
   si(n);si(q);
   for(int k=0;k<n;k++) si(A[k]);
   build_tree(1,0,n-1);

   while(q--){
    int tc,l,r;
    si(tc);
    if(tc==0){
        si(l);si(r);
        int ans=query(1,0,n-1,l-1,r-1);
        pi(ans);
    }
    else{
        int x;
        si(l);si(r);si(x);
        int val=x;
			for(int i=0;i<30;i++){
				val^= 1<<i;
			}
        update(1,0,n-1,l-1,r-1,x,val);
    }
   }

return 0;
}
