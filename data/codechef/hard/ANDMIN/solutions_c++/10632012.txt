#include<bits/stdc++.h>
using namespace std;
const int N=1e5+2;
int a[N];
int l,r,ql,qr,n,q;
struct node
{
     int mini;
     int bits[33];
}tree[4*N];
void build(int idx,int l,int r)
{
     if(l==r)
     {
          tree[idx].mini=a[l];
          int num=a[l];
          int xx=0;
          while(num)
          {
               tree[idx].bits[xx]=(num&1);
               num>>=1;
               xx++;
          }
          return;
     }
     int lc=idx*2;
     int rc=lc|1;
     int mid=(l+r)>>1;
     build(lc,l,mid);
     build(rc,mid+1,r);
     tree[idx].mini=min(tree[lc].mini,tree[rc].mini);
     for(int i=0;i<32;i++)
     {
          tree[idx].bits[i]=tree[lc].bits[i] | tree[rc].bits[i];
     }
}
int query(int idx,int l,int r,int ql,int qr)
{
     if(l>r or l>qr or r<ql)return INT_MAX;
     if(l>=ql and r<=qr)return tree[idx].mini;
     int lc=idx*2;
     int rc=lc|1;
     int mid=(l+r)>>1;
     int x=query(lc,l,mid,ql,qr);
     int y=query(rc,mid+1,r,ql,qr);
     return min(x,y);
}
void update(int idx,int l,int r,int ql,int qr,int val)
{
     if(l>r or l>qr or r<ql)return;
     int flag=0;
     for(int i=0;i<32;i++)
     {
          if(tree[idx].bits[i]==1 and !((val)&(1<<i)))
          {
               flag=1;
               break;
          }
     }
     if(!flag)return;
     if(l==r)
     {
          for(int i=0;i<32;i++)
          {
               tree[idx].bits[i]&=((val>>i)&(1));
          }
          tree[idx].mini&=val;
          return;
     }
     int lc=idx*2;
     int rc=lc|1;
     int mid=(l+r)>>1;
     update(lc,l,mid,ql,qr,val);
     update(rc,mid+1,r,ql,qr,val);
     tree[idx].mini=min(tree[lc].mini,tree[rc].mini);
     for(int i=0;i<32;i++)
     {
          tree[idx].bits[i]=tree[lc].bits[i] | tree[rc].bits[i];
     }
}
int main()
{
     scanf("%d%d",&n,&q);
     for(int i=1;i<=n;i++)
          scanf("%d",&a[i]);
     build(1,1,n);
     while(q--)
     {
          int type,l,r;
          scanf("%d%d%d",&type,&l,&r);
          if(type)
          {
               int x;
               scanf("%d",&x);
               update(1,1,n,l,r,x);
          }
          else
          {
               printf("%d\n",query(1,1,n,l,r));
          }
     }
}
 
