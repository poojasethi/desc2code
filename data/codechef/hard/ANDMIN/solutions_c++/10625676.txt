#include<iostream>
#include<stdio.h>
#include<set>
using namespace std;
#define M 200000

struct node {
    int a;
}temp;
typedef struct node node;
node seg[4*M];

int inf=1e9+2;
int combine(node a,node b)
{
    int tr=min(a.a, b.a);
    return tr;
}

void create_seg(node* a,int idx,int s,int e)
{
    if(s==e)
    {
        seg[idx]=a[e];
        return;
    }
    int m=(s+e)/2;
    create_seg(a,2*idx,s,m);
    create_seg(a,2*idx+1,m+1,e);
    seg[idx].a=combine(seg[idx*2],seg[idx*2+1]);
}

int seg_query(int idx,int s,int e,int l,int r)
{
    if(s>r || l>e)
    {
      return inf;
    }
    if(s>=l && e<=r)
      {
        return seg[idx].a;
      }
     int m=(s+e)/2,an;
     an=seg_query(idx*2,s,m,l,r);
     an=min(an,seg_query(idx*2+1,m+1,e,l,r));
     //cout<<an<<endl;
     return an;
}

void seg_point(int idx,int s,int e,int l,int k)
{
    //cout<<idx<<endl;
    if(s>l || l>e)
    {
      return;
    }
    if(s==e )
      {
        seg[idx].a-=k;
        return;
      }

     int m=(s+e)/2;
     seg_point(idx*2,s,m,l,k);
     seg_point(idx*2+1,m+1,e,l,k);
     seg[idx].a=min(seg[idx*2].a,seg[idx*2+1].a);
}

set<int> bits[32];

void inse(int i,int id)
{
    int j=0;
    while(i)
    {
        if(i&1)
            bits[j].insert(id);
        i=i>>1;
        j++;
    }
}

void update(int l,int r,int k,int n)
{
    int i,j=0,m;
    i=k;
    m=1;
    set<int>::iterator tem,tem1;
    while(j<31)
    {
       // cout<<i<<" "<<j<<" "<<l<<" "<<r<<endl;
        if(!(i&1))
        {
            //cout<<j<<" "<<m<<"df\n";
            tem=bits[j].lower_bound(l);
            tem1=tem;
            while(tem!=bits[j].end() && *tem<=r)
            {
                //cout<<*tem<<endl;
                seg_point(1,1,n,*tem,m);
                //cout<<*tem<<" "<<m<<endl;
                tem++;
            }
            bits[j].erase(tem1,tem);
        }
        i=i>>1;
        m=m<<1;
        j++;
    }
}

int main()
{
    int t,i,j,l,r,x,k,m;
    int n,q,te;
    node a[M];
    scanf("%d %d",&n,&q);
    for(i=1;i<=n;i++)
    {
        scanf("%d",&(a[i].a));
        inse(a[i].a,i);
    }
    create_seg(a,1,1,n);
    while(q--)
    {
        cin>>x>>l>>r;
        if(x)
        {
            cin>>k;
            update(l,r,k,n);
        }
        else
        {
            te=seg_query(1,1,n,l,r);
            cout<<te<<endl;
        }
    }
    return 0;
}

