#include<bits/stdc++.h>
using namespace std;


#define MEM(a,N,b) fill(a,(a+N),b)
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define FORR(i,n) for(i=n-1;i>=0;--i)
#define elif else if
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define sd(x) scanf("%lf",&x);
#define sll(x) scanf("%lld",&x)
#define sl(x)  scanf("%ld",&x)
#define si(x)  scanf("%d",&x)
#define pi(x)  printf("%d",x)
#define pl(x)  printf("%ld",x)
#define pd(x)  printf("%lf",x)
#define pll(x) printf("%lld",x)
#define ps(x)  printf("%s",x)
#define nl     printf("\n")
#define sp     printf(" ")

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef pair<int,long> PIL;
typedef pair<long,int> PLI;
typedef pair<int,long long> PILL;
typedef pair<long long,int> PLLI;
typedef pair<long,long> PLL;
typedef pair<long long,long long> PLLLL;
typedef pair<double,PIL> PDPIL;
typedef vector<int> VI;
typedef vector<long> VL;
typedef vector<double> VD;
typedef vector<long double> VLD;
typedef vector<long long> VLL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VLL> VVLL;
typedef vector<PII > VPII;
typedef vector<PLL > VPLL;
typedef vector<PIL> VPIL;
typedef vector<PLI > VPLI;
typedef vector<PILL> VPILL;
typedef vector<PLLI> VPLLI;
typedef vector<PLLLL> VPLLLL;
typedef vector<VPLL> VVPLL;
typedef vector<PDPIL> VPDPIL;

#define ll long long
#define l long
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define ABS(x)   ((x) < 0 ? (-1)*(x) : (x))
#define Pi 3.1415926535897
#define MOD 1000000007
#define coolreshab ios::sync_with_stdio(false);//cin.tie(NULL)


/*freopen("test.txt","r",stdin);
  freopen("out.txt","w",stdout);
  cout << clock() / (double) CLOCKS_PER_SEC << "\n";*/
struct fire
{
    bool bit[32];
    l Min;
};
vector<fire>tree(400005);
VL arr;
void build(l index,l low,l high)  //O(N)
{
    if(low==high)
    {
        tree[index].Min=arr[low];
        for(int i=0;i<32;++i)
            {
                bool g=(arr[low]) & (1<<i);
                if(g)
                    tree[index].bit[i]=1;
                else
                    tree[index].bit[i]=0;
            }
        return;
    }
    if(low>high)
        return;

    l mid=low+(high-low)/2;

    build((2*index)+1,low,mid);
    build((2*index)+2,mid+1,high);
    tree[index].Min=MIN(tree[(2*index)+1].Min,tree[(2*index)+2].Min);
    for(int i=0;i<32;++i)
        if((tree[(2*index)+1].bit[i]) || (tree[(2*index)+2].bit[i]))
            tree[index].bit[i]=1;
        else
            tree[index].bit[i]=0;
}


void update(l index,l low,l high,l L,l H,l val) // O(log N)
{

    if(low>high or L>high or H<low)//Out of range
        return;


    int flag=0;
    for(int i=0;i<32;++i)
    {
        bool g=(val) & (1<<i);
        if(!g and tree[index].bit[i])
        {
            flag=1;
            break;
        }
    }
    if(!flag)
        return;

    if(low==high)
        {
            (tree[index].Min)&=val;
            for(int i=0;i<32;++i)
               {
                    bool g=(tree[index].Min) & (1<<i);
                    if(g)
                        tree[index].bit[i]=1;
                    else
                        tree[index].bit[i]=0;
               }
            return;
        }


    l mid=low+(high-low)/2;
    update((2*index)+1,low,mid,L,H,val);
    update((2*index)+2,mid+1,high,L,H,val);
    tree[index].Min=MIN(tree[(2*index)+1].Min,tree[(2*index)+2].Min);
    for(int i=0;i<32;++i)
        if((tree[(2*index)+1].bit[i]) || (tree[(2*index)+2].bit[i]))
            tree[index].bit[i]=1;
        else
            tree[index].bit[i]=0;
}


l get(l index,l low,l high,l L,l H) //O(log N)
{

    if(low>high or L>high or H<low)//Out of range
        return LONG_MAX;

    if(low>=L and high<=H)
    {
       return tree[index].Min;
    }

    l mid=low+(high-low)/2;
    l p1=get((2*index)+1,low,mid,L,H);
    l p2=get((2*index)+2,mid+1,high,L,H);

    return MIN(p1,p2);

}


main()
 { l N,Q,i,A,B,ans,X;
   int x;
   //coolreshab;
   sl(N);
   sl(Q);
   arr.resize(N);
   FORN(i,N)
    sl(arr[i]);
   build(0,0,N-1);

   while(Q--)

      {
          si(x);
          sl(A);
          sl(B);
          switch(x)
          {
              case 0:ans=get(0,0,N-1,A-1,B-1);
                     pl(ans);
                     nl;
                     break;

              case 1:sl(X);
                     update(0,0,N-1,A-1,B-1,X);
          }
      }
 }
