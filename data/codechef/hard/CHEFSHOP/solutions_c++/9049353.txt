#include <cstring>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <ctime>
#include <vector>
#include <map>
#include <set>

using namespace std;

#define pb push_back
#define sz(a) (int)a.size()
#define fs first
#define sc second

typedef long long ll;
typedef pair<int,int> ii;

int n, a[20], m, st[20], top, G[32770], b[20], res;
bool F[32770];

void dq(int now, int bbb, int i) {
    if (now==-1) {
        if (F[bbb] && G[i^bbb] != -1) G[i] = max(G[i],G[i^bbb] + a[n-top]);
        return;
    }
    dq(now-1,bbb + (1<<st[now]),i);
    dq(now-1,bbb,i);
}

int main() {
	//freopen("input.txt","r",stdin);
	int t; scanf("%d",&t);
	while (t--) {
        scanf("%d",&n);
        memset(F, false, sizeof F);
        int sum = 0;
        for (int i = 0; i < n; ++i)
            scanf("%d",&a[i]), sum += a[i];
        sort(a,a+n);
        scanf("%d",&m);
        while (m--) {
            int k;
            scanf("%d",&k);
            for (int i = 0; i < k; ++i)
                scanf("%d",&b[i]), b[i]--;
            sort(b,b+k);
            int bbb = 0, x = k-1;
            for (int i = n-1; i >= 0; --i)
                if (x >= 0 && i==b[x]) bbb = bbb*2 + 1, x--;
                else bbb = bbb*2;
            F[bbb] = true;
        }
        int p = 1<<n;
        memset(G, -1, sizeof G);
        G[0] = res = 0;
        for (int i = 1; i < p; ++i) {
            top = 0;
            for (int j = 0; j < n; ++j)
                if ((1<<j)&i) st[top++] = j;
            dq(top-1,0,i);
            res = max(res,G[i]);
        }
        printf("%d\n",sum-res);
	}
	return 0;
}
