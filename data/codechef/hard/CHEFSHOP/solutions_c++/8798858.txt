#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=16,ln=18;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
#define S(x) scanf("%d",&x)
//#define getcx getchar_unlocked
#define getcx getchar
/*inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}*/
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(i,0,n) cout<<i<<". "<<x[i]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(i,0,m) {F(j,0,n) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define pii pair<long long int,long long int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int inf= int(1e9),shift=30,etf=mod-1;

int a[20];
int m,n;
int dp[1<<maxn],comp[1<<maxn];

vector<pii> submask;

int temp[1<<maxn],cnt;

void _clear()
{
    F(i,0,1<<maxn)
    {
        dp[i]=-1;
    }
    dp[0]=0;
    submask.clear();
}

void disjoint(int num)
{
    cnt=0;
    int mask=1<<(n-1);
    temp[cnt++]=0;
    if(!(mask&num))
    {
        temp[cnt++]=1;
    }

    mask>>=1;

    int ab[1<<maxn];

    while(mask)
    {
        int pcnt=0;
        F(i,0,cnt)
        {
            ab[pcnt++]=temp[i]<<1;
        }

        if(!(mask&num))
        {
            F(i,0,cnt)
            {
                ab[pcnt++]=(temp[i]<<1)+1;
            }
        }

        F(i,0,pcnt)
        temp[i]=ab[i];

        cnt=pcnt;

        mask>>=1;
    }

    //Debugarr(temp,cnt);
}

void _solve()
{

    //int prev=0,cur=1;

    //Debugarr(dp,1<<n);

    F(i,0,m)
    {
        int num=submask[i].second;
        //dp[cur][num]=max(dp[cur][num],a[comp[num]]);
        disjoint(num);
        F(j,0,cnt)
        {
            if(dp[temp[j]]!=-1)
                dp[temp[j]|num]=max(dp[temp[j]|num],dp[temp[j]]+a[comp[temp[j]]+comp[num]]);
        }
        //Debugarr(dp,1<<n);
    }

    int tot=0,mx=0;
    F(i,1,n+1)
    tot+=a[i];

    F(i,0,1<<n)
    {
        mx=max(dp[i],mx);
    }

    P(tot-mx);
}

void pre()
{
    F(i,0,1<<maxn)
    {
        int sz=0,num=i;
        while(num)
        {
            if(num&1)
                sz++;
            num>>=1;
        }
        comp[i]=sz;
    }
}

int main()
{
    pre();
    int t;
    S(t);
    while(t--)
    {
        _clear();
        S(n);
        F(i,1,n+1)
        {
            S(a[i]);
            a[i]*=-1;
        }

        sort(a+1,a+n+1);

        F(i,1,n+1)
            a[i]*=-1;



        S(m);

        F(i,0,m)
        {
            int sz,sub=0;
            S(sz);
            F(j,0,sz)
            {
                int item;
                S(item);
                item--;
                sub|=(1<<item);
            }
            submask.push_back(pii (sz,sub));
        }

        sort(submask.begin(),submask.end());

        /*Debugarr(a,n+1);

        F(i,0,m)
        {
            Ps(submask[i].first),P(submask[i].second);
        }*/

        _solve();


    }
    return 0;
}
