#include <bits/stdc++.h>
using namespace std;
vector<int> input;
int hashVal[1 << 16];
int main() {
	int t;
	scanf("%d", &t);
	while(t--) {
		int n;
		scanf("%d", &n);
		int i;
		input.clear();
		int dp[1 << 16];
		memset(hashVal, 0, sizeof(hashVal));
		for(i = 0; i < (1 << n); i++) {
			dp[i] = 0;
		}
		int sum = 0;
		for(i = 0; i < n; i++) {
			int x;
			scanf("%d", &x);
			input.push_back(x);
			sum += x;
		}
		sort(input.begin(), input.end());
		reverse(input.begin(), input.end());
		int m;
		vector<pair<int, int> > subsets;
		scanf("%d", &m);
		for(i = 0; i < m; i++) {
			int x;
			scanf("%d", &x);
			int j;
			int bitmask = 0;
			for(j = 0; j < x; j++) {
				int y;
				scanf("%d", &y);
				bitmask |= (1 << (y - 1));
			}
			subsets.push_back(make_pair(x, bitmask));
			hashVal[bitmask] = 1;
		}
		sort(subsets.begin(), subsets.end());
		/*for(i = 0; i < (1 << n); i++) {
			if(hashVal[i] == 1) {
				int j;
				for(j = 0; j < n; j++) {
					if(!((1 << j) & i)) {
						hashVal[(1 << j)|i] = 2;
					}
				}	
			}
		}
		for(i = 0; i < subsets.size(); i++) {
			if(hashVal[subsets[i].second] == 2) {
				swap(subsets[i], subsets.back());
				subsets.pop_back();
				i--;
			}
		}
		sort(subsets.begin(), subsets.end());*/
		/*for(i = 0; i < subsets.size(); i++) {
			cout << subsets[i].first << " " << subsets[i].second << endl;
		}*/
		int maxMask = (1 << n) - 1;
		for(i = 0; i < subsets.size(); i++) {
			int tempSubset = subsets[i].second;
			int disjSubset2 = maxMask - tempSubset;
			int disjSubset = disjSubset2;
			while(disjSubset >= 0) {
				dp[disjSubset + tempSubset] = max(dp[disjSubset + tempSubset], dp[disjSubset] + input[__builtin_popcount(disjSubset + tempSubset) - 1]);
				if(disjSubset - 1 >= 0)
					disjSubset = (disjSubset - 1) & disjSubset2;
				else
					break;
			}
		}
		int ans = 0;
		for(i = 0; i < (1 << n); i++) {
			//cout << dp[i] << " ";
			ans = max(ans, dp[i]);
		}
		printf("%d\n", sum - ans);
	}
	return 0;
}