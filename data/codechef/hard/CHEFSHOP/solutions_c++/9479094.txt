#include <bits/stdc++.h>
#define Nmax 17
using namespace std;

int arr[Nmax];
int dp[1<<Nmax];
int pp[1<<Nmax];

int n, m;
vector<pair<int, int> > vm;
      
int main() {
   int t;
   scanf("%d", &t);
   
   while(t--) {
      
      int sum = 0;
      scanf("%d", &n);
      
      for(int i = 0; i < n; i++ ) {
         scanf("%d", &arr[i]);
         sum += arr[i];
      }
      
      
      scanf("%d" , &m);
      
      vm.clear();
      vm.resize(m);
      
      memset(pp, 0, sizeof(pp));
      memset(dp, 0, sizeof(dp));
      
      for(int i = 0; i < m; i++)  {
         int a;
         scanf("%d ", &a);
         
         vm[i].first = a;
         
         int val = 0 ;
         
         for(int j = 0; j < a;  j++) {
            int x;
            scanf("%d", &x);
            
            val |= (1<<(x-1));
         }
         
         vm[i].second = val;
         
      }
      
      sort(arr, arr+n, greater<int>() );
      sort(vm.begin(), vm.end() );
      
      for (int i = 0;i  < vm.size();i++) {
         pp[vm[i].second] = 1;
      }
      
    
      
      for(int i =0; i < (1<<n) ; i++) {
         if(pp[i]) {
            for(int j = 0 ; j < n; j++) {
               if ( !(i&(1<<j))  ) {
                  pp[i|(1<<j)] = 2;
               }
            }
         }
      }
      
      for( int i =0; i < vm.size() ;) {
         if(pp[vm[i].second] > 1) {
            swap(vm[i], vm.back());
            vm.pop_back();
         } else {
            i++;
         }
      }
      
      sort(vm.begin(), vm.end());
      
      int MaxSet = (1<<n)-1;
      for ( int i = 0; i < vm.size() ; i++) {
         int t1 = vm[i].second;
         int t2 = MaxSet - t1;
         
         int curSet =  t2;
         while(1) {
            dp[t1+curSet] = max(dp[t1+curSet], dp[curSet]+arr[__builtin_popcount(curSet+t1)-1 ]);
            curSet--;
            if ( curSet < 0 ) {
               break;
            }
            curSet = curSet & t2;
         }
         
      }
      
      int mx = 0;
      for (int i =0; i < (1<<n) ; i++) {
         mx = max(mx, dp[i]);
      }
      printf("%d\n", sum - mx);
   }
	return 0;
}




