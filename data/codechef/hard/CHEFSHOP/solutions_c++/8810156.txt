#include <bits/stdc++.h>

using namespace std;

typedef pair <int, int> ii;

int p[16], dp[1 << 16];
ii dis[1 << 16];
int n, m, sump;

void rset() {
    sump = 0;
    for (int i = 0; i < m; i++) dis[i].second = 0;
}

bool mycmp(const ii & a, const ii & b) {
    return a.first < b.first;
}

void solve() {
    sort(dis, dis + m, mycmp);
    sort(p, p + n);
    for (int i = 0; i < (1 << n); i++) {
        dp[i] = -1;
    }
    dp[0] = 0;
    for (int i = 0; i < m; i++) {
        int full = ((1 << n) - 1) & (~dis[i].second);
        for (int state = full; state >= 0; state = (state - 1) & full) {
            if (dp[state] == -1) continue;
            dp[state | dis[i].second] = max(dp[state | dis[i].second], dp[state] 
                + p[n - __builtin_popcount(state | dis[i].second)]);
            if (state == 0) break;
        }
    }
    int res = 0;
    for (int i = 0; i < (1 << n); i++) res = max(res, dp[i]);
    cout << sump - res << '\n';
}

int main() {
//    freopen("input.txt", "r", stdin);
    
    ios::sync_with_stdio(0);
    int nT; cin >> nT;
    while (nT--) {
        rset();
        cin >> n;
        for (int i = 0; i < n; i++) cin >> p[i], sump += p[i];
        cin >> m;
        for (int i = 0; i < m; i++) {
            cin >> dis[i].first;
            for (int j = 0; j < dis[i].first; j++) {
                int x; cin >> x; x--;
                dis[i].second |= (1 << x);
            }
        }
        solve();
    }
    
    return 0;
}
