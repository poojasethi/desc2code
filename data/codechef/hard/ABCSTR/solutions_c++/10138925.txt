#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);
using namespace std;
typedef long long int LL;
int A[1000010] , B[1000010] , C[1000010];
std::map< pair<int , int> , LL > mpp;
int main()
{
string ip;
cin >> ip;
// memset(A , 0 , sizeof(A));
// memset(B , 0 , sizeof(B));
// memset(C , 0 , sizeof(C));
A[0] = 0;
B[0] = 0;
C[0] = 0;
int len = ip.length();
ip = "*" + ip;
for(int i=1;i<=len;i++){
	A[i] = A[i-1];
	B[i] = B[i-1];
	C[i] = C[i-1];
	if(ip[i]=='A')
		A[i]++;
	if(ip[i]=='B')
		B[i]++;
	if(ip[i]=='C')
		C[i]++;
}
LL ans = 0;
mpp[mp(0 , 0)] = 1;
for(int i=1;i<=len;i++)
{
	if(mpp.find(mp(A[i] - B[i] , A[i] - C[i]))!=mpp.end())
	{
			ans = ans  + mpp[mp(A[i] - B[i] , A[i] - C[i])] ;
			mpp[mp(A[i] - B[i] , A[i] - C[i])]++;
	}
		else
			mpp[mp(A[i] - B[i] , A[i] - C[i])] = 1;
}
printf("%lld\n", ans);

return 0;
}

//A[i] - A[j] = B[i] - B[j] = C[i] - C[j]
//A[i] - B[i] = A[j] - B[j]
//A[i] - C[i] = A[j] - C[j]




