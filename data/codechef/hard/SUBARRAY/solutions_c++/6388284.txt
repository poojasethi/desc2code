#include<bits/stdc++.h>
 
using namespace std;
 
// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<ll> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
 
string str;
vector < vector <ll> > adj_lis;
ll a[100009];
ll sum[100009];
 
bool check(int i,int j)
{
    if( (str[i] == '(' && str[j] == ')') || ( str[i] == '[' && str[j] == ']' ) || (str[i] == '<' && str[j] == '>') || (str[i] == '{' && str[j] == '}') )
        return true;
    return false;
}
 
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    int t;s(t);
    while(t--)
    {
        int n;s(n);
        REP(i,0,n + 2)
        	sum[i] = 0;
        cin >> str;
        REP(i,0,n-1)
            sll(a[i]);
        adj_lis.clear();
        adj_lis.resize( n + 2);
        stack <int> mystack;
        int i = 0;
        while(i < n)
        {
            if(!mystack.empty())
            {
                int u = mystack.top();
                if(check(u,i) == true)
                {
                    mystack.pop();
                    int v = -1;
                    if(mystack.empty() == false)
                        v = mystack.top();
                    sum[v + 1] += sum[u + 1] + a[u] + a[i];
                    adj_lis[v + 1].push_back(sum[u + 1] + a[u] + a[i]);
                }
                else
                    mystack.push(i);
 
            }
            else
                mystack.push(i);
            i++;
        }
        ll maxi = 0;
        REP(i,0,n)
        {
           // cout << i << " " << sum[i] << endl;
            maxi = max(maxi,sum[i]);
        }
        REP(i,0,n)
        {
            ll sum1 = 0;
            ll maxi1 = 0;
            //cout << i << "-->";
            TRvi(adj_lis[i],it)
            {
     //           cout << *it << " ";
                sum1 += *it;
                if( sum1 < 0 )
                    sum1 = 0;
                maxi1 = max(maxi1,sum1);
            }
            //cout << endl;
            maxi = max(maxi , maxi1);
        }
        printf("%lld\n",maxi);
   //     return 0;
    }
    return 0;
}