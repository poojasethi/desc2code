/* Template V1.0 | Author: warlock_ankur */
#include <bits/stdc++.h>
using namespace std;
 
typedef	long long ll;
#define PUT(ST, x) (ST |= 1 << x)		// Put x into Set ST
#define DEL(ST, x) (ST &= ~(1 << x))	// Remove x from Set ST
#define rep(i,n) for(int i = 0; i < n; i++)
#define Rep(i,a,b) for(int i = a; i < b; i++)
#define all(a) a.begin(),a.end()
#define MAXN 100005
 
char str[MAXN];
int v[MAXN], hbp[MAXN];
ll dp[MAXN], sum[MAXN];
 
inline void inp(int &n) {
	n = 0;
	int ch = getchar_unlocked();
	int sign = 1;
	while (ch < '0' || ch > '9') {
		if (ch == '-') sign = -1;
		ch = getchar_unlocked();
	}
	while (ch >= '0' && ch <= '9')
		n = (n << 3) + (n << 1) + ch - '0', ch = getchar_unlocked();
	n = n*sign;
}
 
inline void outp(ll a) {
	char c;
	char snum[20];
	int i = 0;
	do {
		snum[i++] = a % 10 + 48;
		a = a / 10;
	} while (a != 0);
	i = i - 1;
	while (i >= 0)
		putchar_unlocked(snum[i--]);
	putchar_unlocked('\n');
}
 
int main()
{
	int t;
	//scanf("%d", &t);
	inp(t);
 
	while (t--) {
		int n;
		//scanf("%d", &n);
		inp(n);
 
		scanf("%s", str);
 
		rep(i, n) {
			//scanf("%d", &v[i]);
			inp(v[i]);
			sum[i] = v[i] + ((i == 0) ? 0 : sum[i - 1]);
		}
 
		stack<int> st;
		st.push(0);
 
		Rep(i, 1, n) {
			if (str[i] == ')') {
				if (!st.empty() && str[st.top()] == '(') {
					hbp[i] = st.top();
					st.pop();
					dp[i] = max(0LL, dp[hbp[i] - 1] + (sum[i] - sum[hbp[i] - 1]));
				} else
					st.push(i), dp[i] = 0;
			} else if (str[i] == '}') {
				if (!st.empty() && str[st.top()] == '{') {
					hbp[i] = st.top();
					st.pop();
					dp[i] = max(0LL, dp[hbp[i] - 1] + (sum[i] - sum[hbp[i] - 1]));
				} else
					st.push(i), dp[i] = 0;
			} else if (str[i] == '>') {
				if (!st.empty() && str[st.top()] == '<') {
					hbp[i] = st.top();
					st.pop();
					dp[i] = max(0LL, dp[hbp[i] - 1] + (sum[i] - sum[hbp[i] - 1]));
				} else
					st.push(i), dp[i] = 0;
			} else if (str[i] == ']') {
				if (!st.empty() && str[st.top()] == '[') {
					hbp[i] = st.top();
					st.pop();
					dp[i] = max(0LL, dp[hbp[i] - 1] + (sum[i] - sum[hbp[i] - 1]));
				} else
					st.push(i), dp[i] = 0;;
			} else
				st.push(i), dp[i] = 0;
		}
 
		ll ans = 0;
		rep(i, n)
			ans = max(ans, dp[i]);
 
		//printf("%lld\n", ans);
		outp(ans);
	}
 
	return 0;
}
 