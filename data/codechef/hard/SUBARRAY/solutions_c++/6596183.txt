#include <iostream>
#include <fstream>
#include <cstdio>
#include <climits>
#include <vector>
#include <map>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <string>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <cmath>

using namespace std;

#define ll long long
#define vt vector
#define mx 100010

char arr[mx];
ll dp[mx], sumdp[mx],prevdp[mx];

bool check(char x, char y)
{
	if (x == '{' && y == '}')
		return true;
	if (x == '[' && y == ']')
		return true;
	if (x == '<' && y == '>')
		return true;
	if (x == '(' && y == ')')
		return true;
	return false;
}

int main()
{
	int t, n;
	scanf("%d", &t);
	while (t--)
	{
		scanf("%d", &n);
		for (int i = 0; i <= n; i++)
			arr[i] = dp[i] = sumdp[i] = prevdp[i] = 0;
		scanf("%s", arr + 1);
		for (int i = 1; i <= n; i++)
			scanf("%lld", &sumdp[i]), sumdp[i] += sumdp[i - 1];
		stack<int> s;
		for (int i = 1; i <= n; i++)
		{
			if (arr[i] == '[' || arr[i] == '{' || arr[i] == '<' || arr[i] == '(')
				s.push(i);
			else if (!s.empty() && check(arr[s.top()], arr[i]))
			{
				int tp = s.top(); s.pop();
				prevdp[i] = tp;
			}
			else
				s.push(i);
		}
		ll ans = 0;
		for (int i = 1; i <= n; i++)
		{
			if (prevdp[i])
				dp[i] = max(dp[i], dp[prevdp[i] - 1] + sumdp[i] - sumdp[prevdp[i] - 1]);
			ans = max(dp[i], ans);
		}
		printf("%lld\n", ans);
	}
	return 0;
}