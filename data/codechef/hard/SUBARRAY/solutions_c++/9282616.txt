#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>
#include <map>
#include <vector>
#include <stack>
 
inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }
 
  return false;
}
inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}
inline void fastreadll(long long* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}
inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
 
  if(neg)
	  *a = -*a;
}
inline void readString(char *s)
{
  *s = getchar();
  while(*s == '\r' || *s == '\n' || *s == -1)
    *s = getchar();
 
  while(*s != '\r' && *s != '\n' && *s != -1)
  {
    ++s;
    *s = getchar();
  }
  *s = '\0';
}

using namespace std;
char str[100010];
long long ans,start[100010],dp[100010],sum[100010];
int a[100010];
char open[257];
stack<int> s;
 
inline long long max1(long long a, long long b)
{
    return a>b?a:b;
}

int main()
{
#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start111 = std::chrono::high_resolution_clock::now();
#endif

    int t,n;
    open['{']=open['(']=open['<']=open['[']='o';//opening brackets
    open['}']='{';
    open[')']='(';
    open['>']='<';
    open[']']='[';
 
    fastread(&t);
    while(t--)
    {
        while(!s.empty())s.pop();
 
        fastread(&n);
        scanf(" %s",&str[0]);
        sum[0]=0;
        for(int i=1;i<=n;++i)
        {
            fastreadNeg(a + i);
            sum[i]=a[i]+sum[i-1];
        }
        start[0]=-1;
        for(int i=0;str[i]!='\0';++i)
        {
            start[i+1]=-1;
            if(open[str[i]]=='o')
            {
                s.push(i);
            }
            else
            {
                if(!s.empty()&&open[str[i]]==str[s.top()])
                {
                    start[i+1]=s.top()+1;//as numbers are 1-indexed
                    s.pop();
                }
                else
                {
                    while(!s.empty())s.pop();
                }
            }
        }
        dp[0]=0;
        for(int i=1;i<=n;++i)
        {
            dp[i]=max1(0LL,start[i]==-1?0:(dp[start[i]-1]+sum[i]-sum[start[i]-1]));
        }
        ans=0;
        for(int i=1;i<=n;++i)ans=max1(ans,dp[i]);
        printf("%lld\n",ans);
    }

 
#ifdef PRINT_PERF
  PrintResultPerf(start111);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif
 
  return 0;
}