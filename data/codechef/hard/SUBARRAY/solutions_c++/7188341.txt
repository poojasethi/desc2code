# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef long long int lli;
typedef pair<long long int,long long int> pll;
typedef vector<int> vi;
#define rep(i,a,b) for(int i=a;i<b;i++)
#define rof(i,a,b) for(int i=a;i>b;i--)
#define pb push_back
#define mp make_pair
#define inf 1000000000
#define mod 1000000007
#define mst(a,b) memset(a,b,sizeof(a))
#define pi (double)(3.141592653589793)
char c[100010];
lli a[100010];
int h[100010];
lli b[100010];
lli sum[100010];
char opp(char x)
{
    if(x=='[') return ']';
    if(x=='{') return '}';
    if(x=='<') return '>';
    if(x=='(') return ')';
    return '@';
}
int main(){
int t,n;
scanf("%d",&t);
while(t--)
{
//mst(h,0);
    scanf("%d",&n);
    c[0]='*';
    h[0]=0;
   // rep(i,1,n+1)
    scanf("%s",c+1);
    sum[0]=0;
    rep(i,1,n+1)
    {
        scanf("%lld",&a[i]);
        sum[i]=a[i]+sum[i-1];
        h[i]=0;
    }

    stack<int> s;
    s.push(0);
    int i=1;
   
  // printf("%c sds %c",c[4],c[3]);
    while( i<=n)
    {
    if(!s.empty())
{        if(c[i]==opp(c[s.top()]))
        {
            h[i]=s.top();
            s.pop();
            //cout<<h[i]<<" "<<i<<endl;
        }
        else
        {
       // cout<<i<<"d"<<endl;
            s.push(i);
          
        }
        }
        else
        {
       // cout<<i<<"d"<<endl;
            s.push(i);
            
        }
        i++;

    }
    b[0]=0;
    lli ans=0;
    rep(i,1,n+1)
    {
        b[i]=0;
        if(h[i]!=0)
        {
            b[i]=max(b[i],b[h[i]-1]+sum[i]-sum[h[i]-1]);
        }
         ans=max(ans,b[i]);
    }
    //rep(i,1,n+1)
  //  ans=max(ans,b[i]);
    printf("%lld\n",ans);
}

  return 0;
    }
