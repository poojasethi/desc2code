#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>
#include <map>
#include <vector>
 
inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }
 
  return false;
}
inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}
inline void fastreadll(long long* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}
inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
 
  if(neg)
	  *a = -*a;
}
inline void readString(char *s)
{
  *s = getchar();
  while(*s == '\r' || *s == '\n' || *s == -1)
    *s = getchar();
 
  while(*s != '\r' && *s != '\n' && *s != -1)
  {
    ++s;
    *s = getchar();
  }
  *s = '\0';
}
int N, K, M;
int T = 1;

char C[100001]; // character array
int A[100001]; // integer array
long long SUMRAW[100002];
long long *SUM = SUMRAW + 1;
long long MAXSUMRAW[100002];
long long *MAXSUM = MAXSUMRAW + 1;

struct Info
{
  int       i;
  char      bracket;
};

std::vector<Info> stack;
Info tmpInfo;

static const char bracketArr[] = { '{', '(', '[', '<', '>', ']', ')', '}' };
void solve(bool printStr)
{
  long long res = 0;

  stack.clear();
  *SUMRAW = 0;
  *MAXSUMRAW = 0;

  for(int k = 0; k < N; ++k) // k is the current symbol we are looking at
  {
    tmpInfo.bracket = C[k];
    tmpInfo.i = k;
    SUM[k] = SUM[k - 1] + A[k];
    MAXSUM[k] = 0;

    // Opening bracket - stack it up with the sum so far (including the current char)
    if(tmpInfo.bracket == '{' || tmpInfo.bracket == '(' || tmpInfo.bracket == '[' || tmpInfo.bracket == '<')
    {
      stack.push_back(tmpInfo);
    }
    else // Closing bracket, see if we have the corresponding opening bracket on the top of the stack
    {
      if(!stack.empty())
      {
        Info top = stack.back();

        if((tmpInfo.bracket == '}' && top.bracket == '{') ||  // found the matching brackets
          (tmpInfo.bracket == ')' && top.bracket == '(') ||
          (tmpInfo.bracket == ']' && top.bracket == '[') ||
          (tmpInfo.bracket == '>' && top.bracket == '<'))
        {
          stack.pop_back(); // remove the opening bracket and don't insert the closing one
          long long fullBracketBlockSum = SUM[k] - SUM[top.i - 1];

          if(MAXSUM[top.i - 1] > 0)
            fullBracketBlockSum += MAXSUM[top.i - 1];

          if(res < fullBracketBlockSum)
            res = fullBracketBlockSum;

          MAXSUM[k] = fullBracketBlockSum;
        }
        else // The mismatch - means the current stack is useless - clean it up, reset the curSum, since we break the sequence here
        {
          stack.clear();
        }
      }

    } // Closing bracket case

  } // Loop over the chars/values


  if(printStr)
    printf("%.2lld  %s\n",res, C);
  else
    printf("%lld\n",res);
}

int main()
{
#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  fastread(&T);

  while(T--)
  {
    fastread(&N);
    scanf(" %s", C);

    for(int i = 0; i < N; ++i)
      fastreadNeg(A + i);

    solve(false);
  }
 
#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif
 
  return 0;
}
