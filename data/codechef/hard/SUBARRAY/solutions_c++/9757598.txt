#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef map<ll,ll> mll;
typedef vector<ll,ll> vll;
typedef set<ll> sll;
typedef stack<ll> stll;
typedef stack< pair<ll,ll> > stpll;
typedef map<ll,pair<ll,ll> > mllpll;
typedef vector< pair<ll,ll> > vpll;
#define mk make_pair 
#define pb push_back
#define X first 
#define Y second 
#define tr(c,it) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define rep(x,n)   for((x)=0;(x)<(n);(x)++)
#define mod 1000000007
const double eps=1e-15;
const double Max=1e+18;

inline void normal(ll& a) {
    a %= mod;
    (a < 0) && (a += mod);
}

inline ll mul(ll a, ll b) {
    a %= mod, b %= mod;
    normal(a), normal(b);
    return (a * b) % mod;
}
 
inline ll add(ll a, ll b) {
    a %= mod, b %= mod;
    normal(a), normal(b);
    return (a + b) % mod;
}
 
inline ll sub(ll a, ll b) {
    a %= mod, b %= mod;
    normal(a), normal(b);
    a -= b;
    normal(a);
    return a;
}

#define MAX 10e15

int dp[2010][2010];

bool is(char a,char b)
{
	if(a=='[' && b==']') return true;
	if(a=='(' && b==')') return true;
	if(a=='{' && b=='}') return true;
	if(a=='<' && b=='>') return true;
	return false;
}

bool f(char c)
{
	if(c=='[' || c=='(' || c=='{' || c=='<') return true;
	return false;
}

int main()
{
	ios::sync_with_stdio(false);
	// freopen("input.txt","r",stdin);
 //    freopen("output.txt","w",stdout);
	ll n,m,i,j;
	ll T;
	cin>>T;

	while(T--)
	{
		cin>>n;
		string str;
		cin>>str;
		ll A[n+1];
		A[0]=0;
		for(i=1;i<=n;i++) cin>>A[i];
		for(i=1;i<=n;i++) A[i]+=A[i-1];
		stack< pair<char,int> > S;
		ll check[n];
		i=0;
		while(i<n)
		{
			if(f(str[i])) S.push(mk(str[i],i)),check[i]=-1;
			else
			{
				if(!S.empty())
				{
					pair<char,int> P=S.top();
					// cout<<i<<" "<<P.X<<endl;
					if(is(P.X,str[i]))
					{
						check[i]=P.Y;	
						S.pop();
					}
					else S.push(mk(str[i],i)),check[i]=-1;
				}
				else check[i]=-1;
			}
			// cout<<i<<" "<<ans<<endl;
			i++;
		}
		ll dp[n],ans=0;
		dp[0]=0;
		for(i=1;i<n;i++)
		{
			if(check[i]==-1) dp[i]=0;
			else dp[i]=max(A[i+1]-A[check[i]],A[i+1]-A[check[i]]+(check[i]!=0?dp[check[i]-1]:0));
			ans=max(dp[i],ans);
		} 
		cout<<ans<<endl;
	}
	
	return 0;
}