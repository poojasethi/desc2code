#include <stdio.h>
#include <iostream>
#include <vector>
#include <string.h>
#include <stack>
#include <map>
#include <stdlib.h>

using namespace std;

#define ll long long int

char a[100010];
ll val[100010],sum[100010],ansarr[100010];
map<char,char> com;
typedef pair<char,ll> ci;

#define inchar getchar_unlocked
#define mx 100010
 
inline void inp( ll &n )
{
n=0;
ll ch=inchar();ll sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}

int main() {
	// your code goes here
	
	ll n,t;
	cin>>t;
  while(t--)
  {
	inp(n);
	ansarr[0] = 0;sum[0] = 0;
	scanf("%s",a+1);
	for(ll i=1;i<=n;i++)
	 inp(val[i]);
	
	com[')'] = '(';
	com[']'] = '[';
	com['}'] = '{';
	com['>'] = '<';
	if(n == 1)
	 cout<<0<<endl;
	else
	 {
	     
	      stack<ci> s;
	      ll ans = 0,maxfar = 0;
	      for(ll i=1;i<=n;i++)
	       {
	         sum[i] = sum[i-1]+val[i];
	       }
	      
	      for(ll i=1;i<=n;i++)
	       {
	           
	                if(com.find(a[i]) != com.end() && !s.empty() && s.top().first == com[a[i]])
	                 {
	                     ci top = s.top();
	                     ll rmax = sum[i]-sum[top.second-1];
	                     ansarr[i] = max((ll)0,rmax+ansarr[top.second-1]);
	                     ans = max(ans,ansarr[i]);
	                     s.pop();
	                 }
	                 else
	                 {
	                     s.push(ci(a[i],i));
	                     ansarr[i] = 0;
	                 }
	            
	           
	       }
	      printf("%lld\n",ans);
	 }
  }	
	
	return 0;
}
