#include<algorithm>
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<stack>
#include<vector>
#include<climits>
#include<set>
#include<queue>
#include<map>
#define ss(x) scanf("%d",&x)
typedef long long ll;
#define pp pair<ll,ll>
#define lim 100007
using namespace std;
char s[lim];
ll a[lim],sum[lim],dp[lim];
int bp[lim];
bool cmp(const pp& l,const pp& r)
{
   return l.first<r.first;
}
bool closed(char st)
{
    if(st==')' || st==']' || st=='}' || st=='>')
    return true;
    else
    return false;
}
bool match(char a,char b)
{
    if(a==')' && b=='(')
    return true;
    else if(a=='}' && b=='{')
    return true;
    else if(a==']' && b=='[')
    return true;
    else if(a=='>' && b=='<')
    return true;
    else 
    return false;
}
int main()
{
    int t;
    ss(t);
    while(t--)
    {
        stack<int> v;
        ll ans=0;
        int n;
        ss(n);
        scanf("%s",&s);
        for(int i=0;i<n;i++){
        dp[i]=0;
        bp[i]=0;
        scanf("%lld",&a[i]);
        sum[i+1]=sum[i]+a[i];}
        dp[n]=0;
        bp[n]=0;
        for(int i=1;i<=n;i++)
        {
                if(!v.empty())
                {
                if(closed(s[i-1]) && !closed(s[v.top()-1]) && match(s[i-1],s[v.top()-1]) )
                {
                bp[i]=v.top();
                v.pop();
                }
                else
                v.push(i);
                }
                else
                v.push(i);
        }
        for(int i=1;i<=n;i++)
        {
                if(bp[i])
                dp[i]=sum[i]-sum[bp[i]-1]+dp[bp[i]-1];
                if(dp[i]<0)
                dp[i]=0;
                ans=max(ans,dp[i]);
        }
        printf("%lld\n",ans);
    }
}
