#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
#include <stack>
using namespace std;

#define mp make_pair
#define pb push_back
#define mod 1000000007
char a[100001] = { NULL };
long long sum[100001];
long long dp[100003];
int rev[100001];
int main(){
	int t;
	scanf("%d", &t);
	while (t--){
		int n;
		scanf("%d", &n);
		scanf("%s", a);
		stack<int> st;
		while (!st.empty()) st.pop();
		for (int i = 0; i < n; i++){
			rev[i] = -1;
			if (a[i] == '[' || a[i] == '{' || a[i] == '<' || a[i] == '(') {
				st.push(i);
			}
			else {
				if (!st.empty()) {
					if (a[i] == ']'){
						if (a[st.top()] == '['){
							rev[i] = st.top();
							st.pop();
							continue;
						}
					}
					if (a[i] == '}'){
						if (a[st.top()] == '{'){
							rev[i] = st.top();
							st.pop();
							continue;
						}
					}
					if (a[i] == ')'){
						if (a[st.top()] == '('){
							rev[i] = st.top();
							st.pop();
							continue;
						}
					}
					if (a[i] == '>'){
						if (a[st.top()] == '<'){
							rev[i] = st.top();
							st.pop();
							continue;
						}
					}
					st.push(i);
				}
				else{
					st.push(i);
				}
			}
		}
		dp[0] = 0;
		sum[0] = 0;
		long long ans = 0;
		for (int i = 1; i <= n; i++){
			int temp;
			scanf("%d", &temp);
			sum[i] = sum[i - 1] + temp;
			dp[i] = 0;
			if (rev[i - 1] != -1){
				dp[i] = max(dp[i], dp[rev[i - 1]] + sum[i] - sum[rev[i - 1]]);
			}
			ans = max(ans, dp[i]);
		}
		printf("%lld\n", ans);
	}
	return 0;
}