#include<iostream>
#include<algorithm>
#include<cstdio>
#include<string.h>
#include<climits>
#include<stack>
using namespace std;
#define FOR(i,n) for(i=0;i<n;i++)
#define sint(i) scanf("%d",&i)
#define ss(s) scanf("%s",s)
#define pii pair<int,int>
#define pic pair<int,char>
#define mp(i,j) make_pair(i,j)
#define ll long long
#define MAX 1000000000
#define MOD 1000000007
ll maxi;

void recur(ll *ans,int start,int end,char *s,ll presum,int *arr)
{
    if(start<end)
    {
    if(arr[start]!=-1)
    {
       if(s[start]=='{' || s[start]=='<' || s[start]=='[' || s[start]=='(')
       {
            presum=presum+ans[start];
           maxi=max(maxi,presum);
           recur(ans,start+1,arr[start]-1,s,0,arr);
           if(presum>0)
           recur(ans,arr[start]+1,end,s,presum,arr);
           else
           recur(ans,arr[start]+1,end,s,0,arr);
       }
    }
    else
    {
        recur(ans,start+1,end,s,0,arr);
    }
    }
}


long long makest(long long* a,long long start,long long end,long long* st,long long putst)
{
    if(start==end)
    {
        st[putst]=a[start];
    }
    else
st[putst]=makest(a,start,(start+end)/2,st,2*putst)+makest(a,(start+end)/2+1,end,st,2*putst+1);
return st[putst];
}

long long query(long long*st,long long start,long long end,long long istart,long long iend,long long pickst)
{
    if(istart<=start && iend>=end)
    return st[pickst];

    if(end<istart || start>iend)
    return 0;

    return query(st,start,(start+end)/2,istart,iend,2*pickst)+
        query(st,(start+end)/2+1,end,istart,iend,2*pickst+1);
}
int main()
{
    int t,i;
    int n;
    sint(t);
    char s[100010];
    while(t--)
    {
        maxi=0;
        sint(n);
        ss(s+1);
        ll a[n+1];
        int arr[n+1];
        ll ans[n+1];
        FOR(i,n)
        scanf("%lld",&a[i+1]);
        pic use,save;
        stack<pic> mystack;
        for(i=1;i<=n;i++)
        {
            if(mystack.empty() && s[i]!='{' && s[i]!='<' && s[i]!='[' && s[i]!='(')
            {
                arr[i]=-1;
                continue;
            }
            else if(mystack.empty())
            {
                use=mp(i,s[i]);
                mystack.push(use);
                continue;
            }
            save=mystack.top();
            use=mp(i,s[i]);
            mystack.push(use);
            if(s[i]=='}')
            {
               // cout<<"hey"<<i<<"\n";
                if(save.second=='{')
                {
                    use=mystack.top();
                    arr[use.first]=save.first;
                    mystack.pop();
                    use=mystack.top();
                    mystack.pop();
                    arr[use.first]=i;
                }
                else
                {
                    while(!mystack.empty())
                    {
                        use=mystack.top();
                        mystack.pop();
                        arr[use.first]=-1;
                    }
                }
            }
            if(s[i]=='>')
            {
                if(save.second=='<')
                {
                    use=mystack.top();
                    arr[use.first]=save.first;
                    mystack.pop();
                    use=mystack.top();
                    mystack.pop();
                    arr[use.first]=i;
                }
                else
                {
                    while(!mystack.empty())
                    {
                        use=mystack.top();
                        mystack.pop();
                        arr[use.first]=-1;
                    }
                }
            }
            if(s[i]==')')
            {
                if(save.second=='(')
                {
                    use=mystack.top();
                    arr[use.first]=save.first;
                    mystack.pop();
                    use=mystack.top();
                    mystack.pop();
                    arr[use.first]=i;
                }
                else
                {
                    while(!mystack.empty())
                    {
                        use=mystack.top();
                        mystack.pop();
                        arr[use.first]=-1;
                    }
                }
            }
            if(s[i]==']')
            {
                if(save.second=='[')
                {
                    use=mystack.top();
                    arr[use.first]=save.first;
                    mystack.pop();
                    use=mystack.top();
                    mystack.pop();
                    arr[use.first]=i;
                }
                else
                {
                    while(!mystack.empty())
                    {
                        use=mystack.top();
                        mystack.pop();
                        arr[use.first]=-1;
                    }
                }
            }
        }
        while(!mystack.empty())
                    {
                        use=mystack.top();
                        mystack.pop();
                        arr[use.first]=-1;
                    }
         long long*st=(long long*)malloc(sizeof(long long)*4*n);//
        makest(a,1,n,st,1);
        for(i=1;i<=n;i++)
        {
            ans[i]=0;
        }
        for(i=1;i<=n;i++)
        {
           // cout<<arr[i]<<" ";
            if(arr[i]!=-1 && (s[i]=='{' || s[i]=='<' || s[i]=='[' || s[i]=='('))
               {
                 //  cout<<i<<" "<<arr[i]<<" ";
                   ans[i]=query(st,1,n,i,arr[i],1);
                   ans[arr[i]]=ans[i];
                //   cout<<ans[i]<<"";
               }
             //  cout<<"\n";
        }
        recur(ans,1,n,s,0,arr);
        cout<<maxi<<"\n";
    }
    return 0;
}
