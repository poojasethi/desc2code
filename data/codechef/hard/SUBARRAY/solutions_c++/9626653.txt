#include<bits/stdc++.h>
using namespace std;
#define PF(x)	printf("%d", x)
#define psp     printf(" ")
#define pnl     printf("\n")
#define charint(c) ((c)-'0')
#define pii pair< int, int >
#define pb(x) push_back(x)
#define test ll t; SF(t);while(t--)
#define forall(a,b) for(long long i=a;i<=b;i++)
#define abs(a) ((a)>(0)?(a):(-a))
#define bit(x,i)          (x&(1<<i))  //select the bit of position i of x
#define lowbit(x)         ((x)&((x)^((x)-1))) 
#define higbit(x)         (1 << ( int) log2(x) )
#define countleadzero(x)  __builtin_ctz(x) //in its binary representation ex. when x=8 answer is 3
#define countsetbits(x)   ____builtin_popcount(x) //count no of setbits
#define gcd(a,b)   __gcd(a,b)
#define bss binary_search
#define esort(x)        (sort((x).begin(), (x).end()))
#define ersort(x)       (sort((x).rbegin(), (x).rend()))
#define MAX		100050
#define INF		1e9
#define MOD     1000000009
#define fi first
#define se second
#define gc getchar
#define pc putchar
#define clear() while(!ch.empty()) ch.pop()
typedef long long int		ll;
typedef unsigned long long	ull;
inline void SF(ll &x) {
    register int c = gc();
    int d=0;
    x = 0;
    for(; (c<48 || c>57); c = gc())if(c=='-')d=1;
    for(; c>47 && c<58 ; c = gc()) {
        x = (x<<1) + (x<<3) + c - 48;
    }
    if(d)x=-x;
}
int main(){
	test{
		ll n;
		SF(n);
		char s[100010];
		ll a[n];
		ll sum[n],dp[n],sta[n];
		memset(sum,0,sizeof(sum));
		scanf(" %s",&s[0]);
        SF(sum[0]);
		forall(1,n-1){
			SF(a[i]);
			sum[i]=a[i]+sum[i-1];
		}
		stack <int> ch;
		for(int i=0;i<=n-1;i++){
			sta[i]=-1;
			if(s[i]=='['||s[i]=='('||s[i]=='{'||s[i]=='<')
				ch.push(i);
			else{
				if(ch.empty());
				else if(s[i]==']'){
					if(s[ch.top()]!='['){
						clear();
					}
					else{
						sta[i]=ch.top();
						ch.pop();}
				}
				else if(s[i]==')'){
					if(s[ch.top()]!='('){
						clear();
					}
					else{
						sta[i]=ch.top();
						ch.pop();}
				}
				else if(s[i]=='}'){
					if(s[ch.top()]!='{'){
						clear();
					}
					else{
						sta[i]=ch.top();
						ch.pop();}
				}
				else {
					if(s[ch.top()]!='<'){
						clear();
					}
					else{
						sta[i]=ch.top();
					ch.pop();}
				}
			}
		}
		dp[0]=0;
		for(int i=0;i<n;i++){
			if(sta[i]!=0)
			dp[i]=max(0ll,sta[i]==-1?0:(dp[sta[i]-1]+sum[i]-sum[sta[i]-1]));
			else
			dp[i]=max(0ll,sta[i]==-1?0:(sum[i]));
		}
		ll ans=0;
        for(int i=0;i<n;i++)
		ans=max(ans,dp[i]);
		printf("%lld\n",ans);
	}
}