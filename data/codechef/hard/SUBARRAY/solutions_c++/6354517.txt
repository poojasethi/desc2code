/*
	SUBARRAY
	By Anudeep Nekkanti
*/
 
#include <cstdio>
#include <algorithm>
#include <cassert>
using namespace std;
 
#define TLIMIT 200000
#define NLIMIT 100000
#define NSLIMIT 1000000
#define VLIMIT 1000000000
 
#define N (NLIMIT + 100)
#define VALID 1000
 
int nsum = 0;
 
char s[N];
int v[N];
long long sum[N], stk[N*4];
 
int opposite(int x) {
	if( x == ')' ) return (int) '(';
	if( x == '}' ) return (int) '{';
	if( x == ']' ) return (int) '[';
	if( x == '>' ) return (int) '<';
	assert(false);
}
 
bool checkChar(char x) {
	return x == '(' || x == '{' || x == '[' || x == '<'
		|| x == ')' || x == '}' || x == ']' || x == '>';
}
 
void solveTestCase() {
	int n;
	scanf("%d", &n);
	assert(1 <= n && n <= NLIMIT);
	scanf("%s", s);
	for(int i=0; i<n; i++) {
		scanf("%d", &v[i]);
		assert(-VLIMIT <= v[i] && v[i] <= VLIMIT);
		assert(checkChar(s[i]));
		sum[i] = v[i] + (i == 0 ? 0 : sum[i-1]);
	}
	int top = -1;
	long long answer = 0;
	for(int i=0; i<n; i++) {
		if(s[i] == '(' || s[i] == '{' || s[i] == '[' || s[i] == '<') {
			stk[++top] = i;
			stk[++top] = s[i];
		} else {
			while(top >= 0 && stk[top] == VALID) top -= 2;
			if(top < 0 || stk[top] != opposite(s[i])) {
				top = -1;
			} else {
				--top;
				int j = stk[top--];
				long long cs = sum[i] - (j == 0 ? 0 : sum[j-1]);
				answer = max(answer, cs);
				long long v = 0;
				if(top >= 0 && stk[top] == VALID) {
					--top;
					v = stk[top--];
				}
				cs += v;
				answer = max(answer, cs);
				cs = max(cs, 0LL);
				stk[++top] = cs;
				stk[++top] = VALID;
			}
		}
	}
	printf("%lld\n", answer);
}
int main() {
	int t;
	scanf("%d", &t);
	assert(1 <= t && t <= TLIMIT);
	while(t--) {
		solveTestCase();
	}
	assert(nsum <= NSLIMIT);
} 