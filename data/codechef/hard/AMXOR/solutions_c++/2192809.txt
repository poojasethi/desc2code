#include <cstdio>
#include <map>
#include <vector>
#include <iostream>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pll;

const ll MOD = 1000000000+9;
int T, N;

vector<ll> mi(30);

pll ext_gcd(ll a, ll b)
{
    if (b == 0)
        return make_pair(1, 0);
    pll r = ext_gcd(b, a%b);
    ll x = r.first, y = r.second;
    return make_pair(y, x-(a/b)*y);
}

ll mod_inv(ll a)
{
    pll t = ext_gcd(a, MOD);
    ll ans = (t.first)%MOD;
    return (ans<0)? ans+MOD : ans;
}

void solve(vector<ll> &a)
{
    ll ans = 0;
    for(int k=29; k>=0; k--)
    {
        ll dp[2][2];
        dp[0][0] = 1, dp[0][1] = 0;
        ll ones = 1, zeros = 1;
        int p = 0, M = 0;
        for(int i=0; i<N; i++)
        {
            if (a[i] & (1<<k))
            {
                a[i] -= (1<<k);
                dp[1-p][1] = (dp[p][0]*(a[i]+1)+dp[p][1]*(1<<k))%MOD;
                dp[1-p][0] = (dp[p][1]*(a[i]+1)+dp[p][0]*(1<<k))%MOD;
                ones *= (a[i]+1), ones %= MOD;
                M+=1;
            }
            else
            {
                dp[1-p][1] = (dp[p][1]*(a[i]+1))%MOD;
                dp[1-p][0] = (dp[p][0]*(a[i]+1))%MOD;
                zeros *= (a[i]+1), zeros %= MOD;
            }
            p = 1-p;
        }
        ans += (dp[p][M%2]+MOD-(ones*zeros)%MOD)*mi[k];
        ans %= MOD;
    }
    cout << (ans+1)%MOD << endl;
} 

int main()
{
    ios_base::sync_with_stdio(false);
    for(int k=0; k<=29; k++)
        mi[k] = mod_inv(1<<k);
    
    cin >> T;
    for(;T--;)
    {
        cin >> N;
        vector<ll> numbers(N+1);
        for(int i=0; i<N; i++)
        {
            ll t;
            cin >> t;
            numbers[i] = t;
        }
        solve(numbers);
    }
    return 0;
}
