#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <cassert>
#include <ctime>

#define iter(c) __typeof((c).begin())
#define Tr(a,b) for(iter(b) a = (b).begin(); a != (b).end(); ++a)
#define Fr(a,b,c) for(int a = b; a < c; ++a)
#define Rp(a,c) Fr(a,0,c)
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define oo 0x3F3F3F3F

using namespace std;

typedef pair<int,int> pii;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned long long rash;

#define dbg if(0)

#define MAXN 100005

const int MOD = 1000000009;

int n, m;
int inp[MAXN];
int pd[MAXN][2];

int main() {
	int t; scanf("%d", &t);
	while(t--) {
		scanf("%d", &n);
		
		Rp(i,n) scanf("%d", &inp[i]);
		int ans = 1;
		
		m = 0;
		Rp(i,n) m ^= inp[i];
		
		for(int b = 30; ~b; --b) {
			pd[n][0] = 1, pd[n][1] = 0;
			for(int i = n - 1; ~i; --i) {
				if(inp[i] & (1 << b)) {
					ll resto = (inp[i] & ((1 << b) - 1)) + 1LL;
					pd[i][0] = ((1LL << b) * pd[i + 1][0]) % MOD;
					pd[i][0] = (pd[i][0] + resto * pd[i + 1][1]) % MOD;
					
					pd[i][1] = ((1LL << b) * pd[i + 1][1]) % MOD;
					pd[i][1] = (pd[i][1] + resto * pd[i + 1][0]) % MOD;
				} else {
					pd[i][0] = ((inp[i] + 1LL) * pd[i + 1][0]) % MOD;
					pd[i][1] = ((inp[i] + 1LL) * pd[i + 1][1]) % MOD;
				}
			}

			int bit = 0, target = (m & (1 << b)) > 0;
			ll up = 1LL;
			Rp(i,n) {
				if(inp[i] & (1 << b)) {
					ans = (ans + up * pd[i + 1][target ^ bit]) % MOD;
					
					bit ^= 1;
					up = (up * ((inp[i] & ((1 << b) - 1)) + 1)) % MOD;
					inp[i] &= ~ (1 << b);
				} else up = (up * (inp[i] + 1)) % MOD;
			}
			
			if(bit != target) break;
		}
		
		printf("%d\n", ans);
	}
	
	return 0;
}
