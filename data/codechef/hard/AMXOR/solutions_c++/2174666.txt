#include <algorithm>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

template<int MOD = 1000000009> struct ModInteger {
	int x;
	ModInteger(int x = 0) : x(x) {}
	int getValue() { return x; }
	ModInteger operator = (const int v) { return ModInteger(v); }
	ModInteger operator + (const int v) { return ModInteger(x >= MOD - v ? x - MOD + v : x + v); }
	ModInteger operator + (const ModInteger &rhs) { return ModInteger(x >= MOD - rhs.x ? x - MOD + rhs.x : x + rhs.x); }
	void operator += (const int v) { x = x >= MOD - v ? x - MOD + v : x + v; }
	void operator += (const ModInteger &rhs) { x = x >= MOD - rhs.x ? x - MOD + rhs.x : x + rhs.x; }
	ModInteger operator - (const int v) { return ModInteger(x < v ? x - v + MOD : x - v); }
	ModInteger operator - (const ModInteger &rhs) { return ModInteger(x < rhs.x ? x - rhs.x + MOD : x - rhs.x); }
	void operator -= (const int v) { x = x < v ? x - v + MOD : x - v; }
	void operator -= (const ModInteger &rhs) { x = x < rhs.x ? x - rhs.x + MOD : x - rhs.x; }
	ModInteger operator * (const int v) { return ModInteger((long long)x * v % MOD); }
	ModInteger operator * (const ModInteger &rhs) { return ModInteger((long long)x * rhs.x % MOD); }
	void operator *= (const int v) { x = (long long)x * v % MOD; }
	void operator *= (const ModInteger &rhs) { x = (long long)x * rhs.x % MOD; }
	ModInteger operator ^ (int e) { ModInteger res = ModInteger(1), a = *this; for ( ; e; e >>= 1, a *= a) if (e & 1) res *= a; return res; }
	void operator ^= (int e) { ModInteger res = ModInteger(1), a = *this; for ( ; e; e >>= 1, a *= a) if (e & 1) res *= a; x = res.x; }
	ModInteger operator / (const int v) { return ModInteger((long long)x * (ModInteger(v) ^ (MOD - 2)).getValue() % MOD); }
	ModInteger operator / (const ModInteger &rhs) { ModInteger a = rhs; return ModInteger((long long)x * (a ^ (MOD - 2)).getValue() % MOD); }
	void operator /= (const int v) { x = (long long)x * (ModInteger(v) ^ (MOD - 2)).getValue() % MOD; }
	void operator /= (const ModInteger &rhs) { ModInteger a = rhs; x = (long long)x * (a ^ (MOD - 2)).getValue() % MOD; }
};

const int MAXN = 100000;

int n, a[MAXN];

int main() {
	int taskNumber;
	scanf("%d", &taskNumber);
	for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
		scanf("%d", &n);
		FOR(i, 0, n) scanf("%d", &a[i]);
		ModInteger<> res = 0;
		for (int bit = 29; bit >= 0; bit--) {
			ModInteger<> dup = 1, even = 1, odd = 0;
			FOR(i, 0, n) {
				ModInteger<> v = (a[i] & ((1 << bit) - 1)) + 1;
				dup *= v;
				if (a[i] & (1 << bit)) {
					ModInteger<> newEven, newOdd;
					newEven = even * v + odd * (1 << bit);
					newOdd = even * (1 << bit) + odd * v;
					even = newEven;
					odd = newOdd;
				} else {
					even *= v;
					odd *= v;
				}
			}
			res += (even - dup) / (1 << bit);
		}
		printf("%d\n", (res + 1).getValue());
	}
	return 0;
}