#include <cstdio>

using namespace std;

const int MAX_N = 100100;
const int MOD =  1000000009;


int a[MAX_N];
int c[MAX_N];
long long best[MAX_N][2];

void euclid(int a,int &x,int b,int &y)
{
    if(b == 0){
        x = 1;
        y = 0;
    }else{
        int x0,y0;
        euclid(b,x0,a%b,y0);
        x = y0;
        y = x0 - (a/b) * y0;
    }
}

int inv_mod(int val)
{
    int rubbish,ret;
    euclid(MOD,rubbish,val,ret);
    if(ret < 0)
        ret += MOD;
    return ret;
}

void solve()
{
    int n,i,j,k,type;
    long long ans = 1,rm = 1;
    scanf("%d",&n);

    for(i = 1 ; i <= n ; ++ i)
        scanf("%d",a+i);
    best[0][0] = 1;
    for(j = 29 ; j >= 0 ; -- j){
        rm = 1;
        type = 0;
        for(i = 1 ; i <= n ; ++ i){
            if(a[i] & (1 << j)){
                a[i] ^= (1 << j);
                type ^= 1;
                ++a[i];
                best[i][1] = 1LL * best[i-1][1] * (1 << j) % MOD + best[i-1][0] * a[i] % MOD;
                best[i][1] %= MOD;
                best[i][0] = 1LL * best[i-1][0] * (1 << j) % MOD + best[i-1][1] * a[i] % MOD;
                best[i][0] %= MOD;
            }else{
                ++a[i];
                best[i][1] = best[i-1][1] * a[i];
                best[i][1] %= MOD;
                best[i][0] = best[i-1][0] * a[i];
                best[i][0] %= MOD;
            }
            rm = (rm * (a[i]--)) % MOD;
        }

        ans += ((best[n][type] - rm + 2*MOD) % MOD) * inv_mod(1 << j);

        ans %= MOD;
    }
    printf("%d\n",ans);

}

int main()
{
    int T;
    scanf("%d",&T);
    while(T--)
        solve();

    return 0;
}
