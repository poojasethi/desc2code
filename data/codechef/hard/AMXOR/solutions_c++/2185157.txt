#include <cstdio>
#include <cassert>
using namespace std;

#define mod 1000000009

typedef long long ll;

ll mpow(ll a, ll r) {
	if (!r)
		return 1;
	ll res = mpow(a, r >> 1);
	res *= res;
	res %= mod;
	if (r % 2) {
		res *= a;
		res %= mod;
	}
	return res;
}

ll inv(ll n) {
	return mpow(n, mod - 2);
}

int A[100100];

int main() {
	int T;
	scanf("%d", &T);
	assert(1 <= T && 10 >= T);
	while (T--) {
		int N;
		scanf("%d", &N);
		assert(1 <= N && 100000 >= N);
		for (int i = 0; i < N; i++) {
			scanf("%d", &A[i]);
			assert(1 <= A[i] && 1000000000 >= A[i]);
		}
		int res = 1; // counting the original sequence.
		for (int it = 29; it >= 0; it--) {
			ll z = 1;
			for (int i = 0; i < N; i++)
				if (!(A[i] & (1 << it))) {
					z *= A[i] + 1;
					z %= mod;
				}
			ll dp[2][2];
			int p = 0, q = 1;
			dp[p][0] = 1;
			dp[p][1] = 0;
			int t = 0;
			ll o = 1;
			for (int i = 0; i < N; i++)
				if (A[i] & (1 << it)) {
					int r = (A[i] ^ (1 << it)) + 1;
					dp[q][0] = dp[p][0] * (1 << it) + dp[p][1] * r;
					dp[q][0] %= mod;
					dp[q][1] = dp[p][1] * (1 << it) + dp[p][0] * r;
					dp[q][1] %= mod;
					o *= r;
					o %= mod;
					t ^= 1;
					p = 1 - p;
					q = 1 - q;
					A[i] = r - 1;
				}
			z *= (dp[p][t] - o + mod) % mod;
			z %= mod;
			z *= inv(1 << it);
			z %= mod;
			res += z;
			res %= mod;
		}
		printf("%d\n", res);
	}
	return 0;
}
