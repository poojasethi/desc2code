#include<iostream>
using namespace std;

unsigned long long ncr[71][71];
unsigned long long choose(unsigned long long n,unsigned long long k) {
    if(ncr[n][k] != -1)
    	return ncr[n][k];
	if(k==0 || n==k)
	 ncr[n][k] = 1;
    else 
		ncr[n][k] = choose(n-1, k-1)+choose(n-1, k);//(n * choose(n - 1, k - 1)) / k;(this is going out of bounds)
    return ncr[n][k];
}

int minCities(unsigned long long N, unsigned long long lower, unsigned long long upper) {
	//cout << "Upper = " << upper << " Lower = " << lower << endl;
	if(upper-lower == 1) {
		unsigned long long valLo = choose(lower, lower/2);
		if(valLo >= N) {
			return lower;
		}
		else return upper;
	} 
	int middle = (lower+upper)/2;
	unsigned long long value =  choose(middle, middle/2);
	//cout << "Middle = " << middle << " Val = " << value << endl;
	if( value == N)
		return middle;
	else if(value > N) {
		return minCities(N, lower, middle);
	}
	return minCities(N, middle, upper); 
}

int main() {
	int T;
	cin >> T;
	unsigned long long N;
	unsigned long long lower = 2, upper = 65;
	for(int i=0;i<71;i++) {
		for(int j=0;j<71;j++) {
			ncr[i][j] = -1;
		}
	}
	
	for(int t=0;t<T;t++) {
		cin >> N;
		/*
		unsigned long long ncrVal = 2;
		unsigned long long n = 2;
		while (ncrVal < N) {
			n++;
			ncrVal = choose(n, n/2);
			cout << "N= " << n << " Val = " << ncrVal << endl; 
		}
		cout << n << endl;
		*/
		cout << minCities(N, lower, upper) << endl;
	}
	return 0;
}