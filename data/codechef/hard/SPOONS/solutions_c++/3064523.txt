#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>
 
using namespace std;
 
typedef long long int64;
 
int64 c[128][128];
 
int main()
{
	memset(c,0,sizeof(c));
	/*
	Create 2d array for nCr
	Use formula that nCr = n-1Cr-1 + n-1Cr
	*/
	for (int i=0;i<128;i++) 
		for (int j=0;j<=i;j++) 
			c[i][j]=(j==0)?1:c[i-1][j-1]+c[i-1][j]; //nCr = n-1Cr-1 + n-1Cr
			
			
	// for (int i=0;i<128;i++)
		// for (int j=0;j<=i;j++) 		
			// cout<<c[i][j]<<" ";
		// cout<<endl;
		
	int t; //test cases
	scanf("%d",&t);
	for (;t>0;t--)
	{
		//input number of spoons in 'n'
		int64 n=0;
		scanf("%lld\n",&n);
		//input-end
		
		int m=2;
		
		
		/*
		We need to find an index 'm' such that mCm/2 is >=n
		Any value mCr represents the number of 'r' sized subsets of a set with m distinct values such that no subset contains the other. 
		The maximum value of mCr occurs for r=(floor)m/2 
		
		For e.g in this question for n=5 ans is 4.
		In our code we need to find value of 'm' (size of the set of cities) such that mCm/2 is >=5 so that each spoon can be assigned to one of these subsets.
		for m=4, mC2 = 6. So we can pick any 5 of these subsets and assign to the spoons.
		We arrive at m=4 as for m=1,2 or 3 the mCm/2 value will be < 5
		*/
		
		for (;c[m][m/2]<n;m++);
		printf("%d\n",m);
	}
	return 0;
}