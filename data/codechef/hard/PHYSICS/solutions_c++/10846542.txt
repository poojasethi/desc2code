
#include <bits/stdc++.h>
#define ll long long int
#define MAX 100001
#define EPS 1e-9
#define MOD 1000000007
#define INF 1e9
#define pn() printf("\n")
#define vint vector <int>
#define vpint vector <pair<int,int> >
#define pb push_back
#define mp make_pair
#define ft first
#define sd second
#define gc() getchar_unlocked()
#define ms(x,v) memset(x,v,sizeof x)
#define pr_arr(i,x,size) for(i=0;i<size;i++) cout<<x[i]<<" "
#define ff(i,a,b) for(i=a;i<=b;i++)
#define fb(i,a,b) for(i=a;i>=b;i--)
#define gprint(i) cout<<"Case #"<<i<<": "
using namespace std;

template<class T>
void scanint(T &x)
{
    register T c = gc();
    x = 0;
    T neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 & c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

template<class T>
T modulus(T x,int m=MOD)
{
    return (((x%m)+m)%m);
}

inline bool lt(double a, double b)
{
    return a + EPS < b;
}
inline bool gt(double a, double b)
{
    return a > b + EPS;
}
inline bool eq(double a, double b)
{
    return fabs(a - b) < EPS;
}

ll power(ll base,ll p)
{
    if(p==0)
        return 1;
    ll temp=1;
    while(p>1)
    {
        if(p%2!=0)
            temp=(1LL*(base*temp)%MOD);
        base=(1LL*(base*base)%MOD);
        p/=2;
    }
    ll ans=(1LL*(base*temp)%MOD);
    return ans;
}

int main()
{
    ios::sync_with_stdio(false);
    int t;
    cin>>t;
    while(t--)
    {
    	int n,k,i,j;
    	cin>>n>>k;
    	int arr[n];
    	//set <int> s;
    	int maxi=0,temp;
    	map <int,int> m;
    	ff(i,0,n-1)
    	{
    		cin>>arr[i];
    		//s.insert(temp);
    		m[arr[i]]++;
    		maxi=max(maxi,arr[i]);
    	}
    	// int sz=s.size();
    	// int hash[sz];
    	// ms(hash,0);
    	// set <int> :: iterator it;
    	int c=0;
    	ll ans=0;
    	sort(arr,arr+n);
    	for(i=0;i<n;i++)
    	{
    		if(m[arr[i]]!=0)
    		{
    			c=0;
    			for(j=0;(1LL*(arr[i])*pow(k,j))<=maxi;j++)
    			{
    				ll num=(arr[i])*pow(k,j);
    				if(m[num]!=0)
    				{
    					c+=m[num];
    					m[num]=0;
    					//hash[distance(s.begin(),s.find(num))]=1;
    				}
    			}
    			ans+=(1LL*c*(c-1)/2);
    		}
    	}
    	cout<<ans<<endl;
    }
    return 0;
}