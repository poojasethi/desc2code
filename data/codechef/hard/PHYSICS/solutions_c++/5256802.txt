#include <iostream>
#include <math.h>
#include <algorithm>

using namespace std;

int64_t first(int64_t arr[], int64_t low, int64_t high, int64_t x, int64_t n)
{
  if(high >= low)
  {
    int64_t mid = (low + high)/2;  /*low + (high - low)/2;*/
    if( ( mid == 0 || x > arr[mid-1]) && arr[mid] == x)
      return mid;
    else if(x > arr[mid])
      return first(arr, (mid + 1), high, x, n);
    else
      return first(arr, low, (mid -1), x, n);
  }
  return -1;
}
 
 
/* if x is present in arr[] then returns the index of LAST occurrence 
   of x in arr[0..n-1], otherwise returns -1 */
int64_t last(int64_t arr[], int64_t low, int64_t high, int64_t x, int64_t n)
{
  if(high >= low)
  {
    int64_t mid = (low + high)/2;  /*low + (high - low)/2;*/
    if( ( mid == n-1 || x < arr[mid+1]) && arr[mid] == x )
      return mid;
    else if(x < arr[mid])
      return last(arr, low, (mid -1), x, n);
    else
      return last(arr, (mid + 1), high, x, n);      
  }
  return -1;
}

int64_t bins(int64_t a[],int64_t l,int64_t r,int64_t x,int64_t n)
{
	int64_t idx1=first(a,l,r,x,n);
	if(idx1==-1)	return 0;
	int64_t idx2=last(a,idx1,r,x,n);
	 // cout<<idx2<<","<<idx1<<endl;
	if(idx1==-1 && idx2==-1)	return 0;
	return(idx2-idx1+1);
}


int main()
{
	int64_t T;
	cin>>T;
	while(T--)
	{
		int64_t n,f;
		scanf("%lld %lld",&n,&f);
		int64_t a[n];
		for(int64_t i=0;i<n;i++)	scanf("%lld",&a[i]);
		sort(a,a+n);
		double p=log(a[n-1]/a[0])/log(f);
		int64_t temp=p;
		double tmp=temp;
		if(p!=tmp)	temp++;
		// cout<<temp<<endl;
		int64_t res=0;
		for(int64_t i=0;i<n-1;i++)
		{
			for(int64_t prod=1,cnt=0;cnt<=temp;cnt++,prod*=f)
			{
				int64_t c=bins(a+i+1,0,n-i-2,a[i]*prod,n-i-1);
				// cout<<"******"<<c<<"#####"<<a[i]*prod<<endl;
				res+=c;
			}
		}
		printf("%lld\n",res);

	}

	return 0;
}