#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }

  if(neg)
	  *a = -*a;
}

int N, K, F;
int T = 1;

int H[10000 + 2];

#include <map>

int main()
{
#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  fastread(&T); // [1, 100000]

  while(T--)
  {
    fastread(&N);
    fastread(&F);

    for(int i = 0; i < N; ++i)
    {
		fastread(H + i);
    }

	std::sort(H, H + N); // might not be necessary

	std::map<int, int> mapDiv;
	int result = 0;
	for(int i = N - 1; i >= 0; --i)
	{
		int h = H[i];
		std::map<int, int>::iterator it = mapDiv.find(h);
		if(it != mapDiv.end())
		{
			result += it->second; // We have it->second pairs
			it->second++; // Increase by one, the next find will have +1 pair
		}
		else
		{
			mapDiv[h] = 1; // Only 1 for now
		}

		// Make bounces
		while(h != 0)
		{
			const int bounceH = h / F;
			const int reminder = h - bounceH * F;
			if(reminder != 0)
				break;

			h = bounceH;
			it = mapDiv.find(h);
			if(it != mapDiv.end())
			{
				it->second++; // Increase by one, the next find will have +1 pair
			}
			else
			{
				mapDiv[h] = 1; // Only 1 for now
			}
		}
	}

	printf("%d\n", result);
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
