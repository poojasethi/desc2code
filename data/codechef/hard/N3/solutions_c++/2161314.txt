#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int INF = (int)1e9;
const int maxn = 150;
const int maxl = 303;
const int maxk = 505;
char s[maxn][maxl],res[maxl * maxk];
int n,l,k,dp[maxk][maxn],p[maxk][maxn],pos[maxk],who[maxk],after[maxn][maxn];
int calc(int x, int y) {
	for (int i = 1; i < l; i++) {
		bool ok = true;
		for (int j = 0; j < l - i; j++) {
			if (s[x][i + j] != s[y][j]) {
				ok = false;
				break;
			}
		}
		if (ok) return i;
	}
	return l;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int T; cin >> T;
	while(T--) {
		cin >> n >> l >> k;
		for (int i = 0; i < n; i++) {
			scanf("%s",&s[i]);
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				after[i][j] = calc(i,j);
			}
		}
		for (int i = 0; i < n; i++) {
			dp[1][i] = l;
		}
		for (int i = 2; i <= k; i++) {
			for (int j = 0; j < n; j++) {
				dp[i][j] = INF;
				for (int r = 0; r < n; r++) {
					if (dp[i][j] > dp[i - 1][r] + after[r][j]) {
						dp[i][j] = dp[i - 1][r] + after[r][j];
						p[i][j] = r;
					}
				}
			}
		}
		int mi = 0;		
		for (int i = 1; i < n; i++) {
			if (dp[k][i] < dp[k][mi]) {
				mi = i;
			}
		}
		int len = dp[k][mi];
		printf("%d\n",len);
		int it = 0;
		for (int i = k; i > 1; i--) {
			int r = p[i][mi];
			who[i] = mi;
			pos[i] = len - l;
			len -= after[r][mi];
			for (int j = 0; j < after[r][mi]; j++) {
				res[it++] = s[mi][l - 1 - j];
			}
			mi = r;
		}
		who[1] = mi;
		pos[1] = 0;
		for (int i = 0; i < l; i++) {
			res[it++] = s[mi][l - 1 - i];
		}		
		for (int i = it - 1; i >= 0; i--) {
			putchar(res[i]);
		}
		puts("");
		for (int i = 1; i <= k; i++) {
			printf("%d %d\n",who[i],pos[i]);
		}
		puts("");
	}
	return 0;
}
