#include <iostream>
#include <cstring>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <queue>
using namespace std;
#define N 505
#define ll unsigned long long

int t;
int n,l,k;
string S[N];
int cost[N][N];
int fail[N];
void overlap(int a,int b){
	string A = S[a];
	string B = S[b];
	string pat = B + "#" + A;
	fail[0] = -1;
	int i = 0,j = -1;
	int m = pat.length();
	while(i < m){
		while(j >= 0 && pat[i] != pat[j])
			j = fail[j];
		i++;j++;
		fail[i] = j;
	}
	if(j == l)
		j = fail[j];
	cost[a][b] = l - j;
}
int D[N][N];
int nex[N][N];

int main(){
	scanf("%d",&t);
	while(t--){
		vector<int> RA,RB;
		scanf("%d%d%d",&n,&l,&k);
		for(int i = 0;i<n;i++)
			cin>>S[i];
		S[n] = "";
		for(int i = 0;i<n;i++){
			cost[n][i] = S[i].length();
			for(int j = 0;j<n;j++){
				overlap(i,j);
				//printf("%d ",cost[i][j]);
			}
			//printf("\n");
		}

		for(int rem = 0 ;rem < k;rem++)
			for(int last = 0;last<n;last++){
				if(rem == 0){
					D[last][rem] = 0;
					continue;
				}
				int mi = 1<<29;
				for(int i = 0 ;i<n;i++){
					int part = cost[last][i] + D[i][rem - 1];
					if( part < mi){
						mi = part;
						nex[last][rem] = i;
					}
				}
				D[last][rem] = mi;
			}

		int mi = 1<<29;
		for(int i = 0 ;i<n;i++){
			int part = cost[n][i] + D[i][k - 1];
			if( part < mi){
				mi = part;
				nex[n][k] = i;
				D[n][k] = mi;
			}
		}
		int res = D[n][k];
		printf("%d\n",res);
		int last = n;
		int pos = 0;
		string st  = "";
		for(int i = k;i>=1;i--){
			int ne = nex[last][i];
			int rr = cost[last][ne];
			RA.push_back(ne);
			pos += rr;
			RB.push_back(pos - l);
			string imp = S[ne].substr(l - rr);
			st += imp;
			last = ne;
		}
		cout<<st<<endl;
		for(int i = 0;i<k;i++)
			printf("%d %d\n",RA[i],RB[i]);
		printf("\n");
	}
	return 0;
}
/*
123
1 3 4
aba
 */
