            #include <bits/stdc++.h>
            using namespace std;
            const int N = 105;
            const int RN = 335 + 5;
            const int CN = 112225 + 5;
            const int RNG = (112225 / 4) * 50;
            int tt;
            int n , m , q;
            long long int u , v , x , y;
            const int inf = 1e7 + 5;
            long long snd = 0;
            long long birds[(int)8e7 + 1];
 
            inline void make(long long times[] , long long to){
                for(long long i = 0; i < snd; ++i){
                    ++times[birds[i]];
                }
                snd = 0;
                long long sm = 0;
                for(long long i = 1; i <= to; ++i){
                    if(times[i]){
                    for(long long j = 1; j <= times[i]; ++j){
                        sm += i;
                        birds[snd++] = sm;
                    }
                }
               }
            }
            inline long long solve(long long val , long long arr[] , long long n){
                long long pos = upper_bound(arr , arr + n , val) - arr;
                return pos;
            }
            int main(){
                int tt , w ;
                scanf("%d %d %d", &n, &m, &q);
                long long grid[n + 1][m + 1];
                long long int dprow[n + 1][m + 1];
                long long int dpcol[m + 1][n + 1];
                for(int i = 1; i <= n; ++i){
                    for(int j = 1; j <= m; ++j){
                        scanf("%lld", &grid[i][j]);
                        dprow[i][j] = dprow[i][j - 1] + grid[i][j];
                        dpcol[j][i] = dpcol[j][i - 1] + grid[i][j];
                    }
                }
 
                int row , col , left , right , up , down;
                long long sm , mm = 0;
                for(int i = 1; i <= n; ++i){
                    for(int j = 1; j <= m; ++j){
                        row = i , col = j;
                        sm = dprow[row][col] - dprow[row][col - 1];
                        left = col , right = col + 1 , down = row + 1 , up;
                        while(down <= n && right <= m){
                        sm += dprow[down][right] - dprow[down][left - 1];
 
                        if(sm)
                        birds[snd++] = sm;
                        mm = max(mm , sm);
                        down += 1;
                        right += 1;
                     }
                     row = i , col = j;
                     sm = dprow[row][col] - dprow[row][col - 1];
                right = col , left = col - 1 , down = row + 1;
                while(down <= n && left >= 1){
                    sm += dprow[down][right] - dprow[down][left - 1];
                    if(sm)
                    birds[snd++] = sm;
                    mm = max(mm , sm);
                    down += 1;
                    left -= 1;
                }
 
                     row = i , col = j;
                     sm = dprow[row][col] - dprow[row][col - 1];
                 left = col , right = col + 1 , up = row - 1;
                while(up >= 1 && right <= m){
                    sm += dprow[up][right] - dprow[up][left - 1];
                    if(sm)
                    birds[snd++] = sm;
                    mm = max(mm , sm);
                     up -= 1;
                    right += 1;
                }
 
                     row = i , col = j;
                     sm = dprow[row][col] - dprow[row][col - 1];
                right = col , left = col - 1 , up = row - 1;
                while(up >= 1 && left >= 1){
                    sm += dprow[up][right] - dprow[up][left - 1];
                    if(sm)
                    birds[snd++] = sm;
                    mm = max(mm , sm);
                     up -= 1;
                    left -= 1;
                }
 
                     row = i , col = j;
                     sm = dprow[row][col] - dprow[row][col - 1];
                left = col - 1 , right = col + 1 , down = row + 1;
                while(down <= n && left >= 1 && right <= m){
                    sm += dprow[down][right] - dprow[down][left - 1];
 
                    if(sm)
                    birds[snd++] = sm;
                    mm = max(mm , sm);
                     down += 1;
                    left -= 1;
                    right += 1;
                }
 
                     row = i , col = j;
                     sm = dprow[row][col] - dprow[row][col - 1];
                left = col - 1 , right = col + 1 , up = row - 1;
                while(up >= 1 && left >= 1 && right <= m){
                    sm += dprow[up][right] - dprow[up][left - 1];
 
                    if(sm)
                    birds[snd++] = sm;
                    mm = max(mm , sm);
                     up -= 1;
                    left -= 1;
                    right += 1;
                }
 
                     row = i , col = j;
                     sm = dpcol[col][row] - dpcol[col][row - 1];
                left = row - 1 , right = row + 1 , down = col + 1;
                while(down <= m && left >= 1 && right <= n){
                    sm += dpcol[down][right] - dpcol[down][left - 1];
                    if(sm)
                    birds[snd++] = sm;
                    down += 1;
                    left -= 1;
                    right += 1;
                }
 
 
 
                     row = i , col = j;
                     sm = dpcol[col][row] - dpcol[col][row - 1];
                    left = row - 1 , right = row + 1 , up = col - 1;
                    while(up >= 1 && left >= 1 && right <= n){
                    sm += dpcol[up][right] - dpcol[up][left - 1];
                    if(sm)
                    birds[snd++] = sm;
                    mm = max(mm , sm);
                     up -= 1;
                    left -= 1;
                    right += 1;
              }
            }
          }
                long long *times = (long long *) malloc((mm + 1) * sizeof (long long));
                for(int i = 1; i <= mm; ++i) times[i] = 0;
                make(times , mm);
 
                long long int go = snd;
 
                long long int to = q;
                for(long long int i = 0; i < to; ++i){
                    scanf("%lld",&x);
                    printf("%lld\n" , solve(x , birds , snd) * 1LL);
                }
                return 0;
            }