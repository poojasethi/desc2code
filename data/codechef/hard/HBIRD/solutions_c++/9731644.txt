#include <stdio.h>
#include <algorithm>
#include <vector>
#include<bits/stdc++.h>
using namespace std;
typedef long long i64;
#define ll long long
#define INF 1111111111
#define CT 6001111

int **H = new int*[411];
int **DR = new int*[411];
int **D = new int*[411];
int **R = new int*[411];
int **DL = new int*[411];
int ct[CT];
int n, m;

int main() {
    int q;
    scanf("%d%d%d", &n, &m, &q);

    // initialize stuff
    for (int i = 0; i <= n; i++) {
        D[i] = new int[m+1];
        R[i] = new int[m+1];
        for (int j = 0; j <= m; j++) {
            D[i][j] = R[i][j] = 0;
        }
    }

    // compute all row / column cumulative sums
    for (int i = 0; i < n; i++) {
        H[i] = new int[m];
        for (int j = 0; j < m; j++) {
            scanf("%d", &H[i][j]);
            D[i+1][j] = H[i][j] + D[i][j];
            R[i][j+1] = H[i][j] + R[i][j];
        }
    }

    // compute all triangle sums
    int j,k;
    i64 s;
   for(int i=0;i<n;i++)
   for(int j=0;j<m;j++){
        for (k = 1, s = H[i][j]; i-k >= 0 and j+k <  m; k++)
            ct[s += (R[i-k][j+k+1] - R[i-k][j])]++;

        for (k = 1, s = H[i][j]; i+k <  n and j+k <  m; k++)
            ct[s += (R[i+k][j+k+1] - R[i+k][j])]++;

        for (k = 1, s = H[i][j]; i-k >= 0 and j-k >= 0; k++)
             ct[s += (R[i-k][j+1] - R[i-k][j-k])]++;

        for (k = 1, s = H[i][j]; i+k <  n and j-k >= 0; k++)
             ct[s += (R[i+k][j+1] - R[i+k][j-k])]++;

        for (k = 1, s = H[i][j]; i-k >= 0 and j-k >= 0 and j+k < m; k++)
            ct[s += (R[i-k][j+k+1] - R[i-k][j-k])]++;

        for (k = 1, s = H[i][j]; i+k <  n and j-k >= 0 and j+k < m; k++)
           ct[s += (R[i+k][j+k+1] - R[i+k][j-k])]++;

        for (k = 1, s = H[i][j]; j-k >= 0 and i-k >= 0 and i+k < n; k++)
            ct[s += (D[i+k+1][j-k] - D[i-k][j-k])]++;

        for (k = 1, s = H[i][j]; j+k <  m and i-k >= 0 and i+k < n; k++)
            ct[s += (D[i+k+1][j+k] - D[i-k][j+k])]++;

        }

    // compute all prefix sums of triangle sums
    vector<int> ans;
    ans.push_back(0);
    for (int i = 1; i < CT; i++) {
        while (ct[i]--) {
            int v = ans.back() + i;
            ans.push_back(v);
            if (v >= INF) break;
        }
        if (ans.back() >= INF) break;
    }

    // answer queries
    while (q--) {
        int g;
        scanf("%d", &g);
        int L = 0, R = ans.size();
        // binary search
        while (R - L > 1) {
            int M = L + R >> 1;
            (ans[M] <= g ? L : R) = M;
        }
        printf("%d\n", L);
    }
}
