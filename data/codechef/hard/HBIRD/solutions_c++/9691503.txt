#include <bits/stdc++.h>
using namespace std;
#define f first
#define s second
#define mp make_pair
#define ll long long
#define mod 1000000007LL
#define pb push_back
vector<int> a[500],r[500],c[500];
int v[50001111];
vector< pair<int,int> >qu;
int ans[100011];
int main()
{
    int n,m,k,i,j,q,s;
    scanf("%d %d %d",&n,&m,&q);

    a[0].resize(m+5);
    r[0].resize(m+5);
    c[0].resize(m+5);
    for(i=1; i<=n; i++)
    {
        a[i].resize(m+5);
        r[i].resize(m+5);
        c[i].resize(m+5);
        for(j=1; j<=m; j++)
            scanf("%d",&a[i][j]);
    }

    a[n+1].resize(m+5);
    r[n+1].resize(m+5);
    c[n+1].resize(m+5);
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
            r[i][j]=r[i][j-1]+a[i][j];
    }
    for(j=1; j<=m; j++)
    {
        for(i=1; i<=n; i++)
            c[i][j]=c[i-1][j]+a[i][j];
    }
    ///1st triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(i,j); k++)
            {
                s=s+c[i][j-k]-c[i-k-1][j-k];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    ///2nd triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(i,j); k++)
            {
                s=s+r[i-k][j]-r[i-k][j-k-1];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    ///3rd triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(i,m-j+1); k++)
            {
                s=s+r[i-k][j+k]-r[i-k][j-1];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    ///4th triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(i,m-j+1); k++)
            {
                s=s+c[i][j+k]-c[i-k-1][j+k];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    ///5th triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(min(i,n-i+1),j); k++)
            {
                s=s+c[i+k][j-k]-c[i-k-1][j-k];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    ///6th triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(i,min(j,m-j+1)); k++)
            {
                s=s+r[i-k][j+k]-r[i-k][j-k-1];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    ///7th triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(min(i,n-i+1),m-j+1); k++)
            {
                s=s+c[i+k][j+k]-c[i-k-1][j+k];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    ///8th triangle
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
            s=a[i][j];
            for(k=1; k<min(n-i+1,min(j,m-j+1)); k++)
            {
                s=s+r[i+k][j+k]-r[i+k][j-k-1];
                v[s]++;
            }
        }
    }
//    cout<<v.size()<<endl;
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
//    sort(v.begin(),v.end());
//    for(i=0;i<v.size();i++)
//        printf("%d ",v[i]);
//    cout<<endl;
    s=0;
    //assert(0);
    for(i=0; i<q; i++)
    {
        scanf("%d",&k);
        qu.pb(mp(k,i));
    }
    sort(qu.begin(),qu.end());
    j=0;
    i=1;
    for(int i1=0; i1<q; i1++)
    {
        k=qu[i1].f;
        k-=s;
        for(; i<50000000; i++)
        {
            while(v[i]>0)
            {
                k-=i;
                if(k>=0)
                    s+=i,j++,v[i]--;
                else
                    break;
            }
            if(k<0)
                break;
        }
        ans[qu[i1].s]=j;
    }
    for(i=0; i<q; i++)
        printf("%d\n",ans[i]);
    return 0;
}
