#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=(int)1e9+7,maxn=350,ln=17;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
//#define getcx getchar_unlocked
#define getcx getchar
/*inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}*/
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define modulo(x,y,z) (x+y)<0?x+y+z:((x+y>=z)?x+y-z:x+y)
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(ij,0,n) cout<<ij<<". "<<x[ij]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(ij,0,m) {F(jk,0,n) cout<<x[ij][jk]<<" "; cout<<endl;} cout<<endl
#define pii pair<LL,int>
#define Fi first
#define Se second
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int shift=30,etf=mod-1;

const LL inf=(LL)1e18+1;

const double PI=(double)3.141592653589793238,EPSILON=1e-10;

int mat[maxn][maxn],dplr[maxn][maxn],dprl[maxn][maxn],dpud[maxn][maxn],dpdu[maxn][maxn];

int cnt[3000005];
LL grain[3000005];

int n,m,mx;

void calculate()
{
    int sum;
    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            dplr[i][j]=mat[i][j]+dplr[i-1][j];
        }
    }
    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            sum=dplr[i][j]-dplr[i-1][j];
            F(k,2,min(i+1,m-j+2))
            {
                sum+=dplr[i][j+k-1]-dplr[i-k][j+k-1];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
            sum=dplr[i][j]-dplr[i-1][j];
            F(k,1,min(m-j+1,min(i,n-i+1)))
            {
                sum+=dplr[i+k][j+k]-dplr[i-k-1][j+k];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
        }
    }

    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            dprl[i][j]=mat[i][j]+dprl[i-1][j];
        }
    }
    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            sum=dprl[i][j]-dprl[i-1][j];
            F(k,2,min(n-i+2,j+1))
            {
                sum+=dprl[i+k-1][j-k+1]-dprl[i-1][j-k+1];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
            sum=dprl[i][j]-dprl[i-1][j];
            F(k,1,min(j,min(i,n-i+1)))
            {
                sum+=dprl[i+k][j-k]-dprl[i-k-1][j-k];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
        }
    }

    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            dpud[i][j]=mat[i][j]+dpud[i][j-1];
        }
    }
    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            sum=dpud[i][j]-dpud[i][j-1];
            F(k,2,min(n-i+2,m-j+2))
            {
                sum+=dpud[i+k-1][j+k-1]-dpud[i+k-1][j-1];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
            sum=dpud[i][j]-dpud[i][j-1];
            F(k,1,min(n-i+1,min(j,m-j+1)))
            {
                sum+=dpud[i+k][j+k]-dpud[i+k][j-k-1];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
        }
    }

    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            dpdu[i][j]=mat[i][j]+dpdu[i][j-1];
        }
    }
    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            //printf("i=%d j=%d:\n",i,j);

            //printf("normal down to up:\n");
            sum=dpdu[i][j]-dpdu[i][j-1];
            F(k,2,min(i+1,j+1))
            {
                sum+=dpdu[i-k+1][j]-dpdu[i-k+1][j-k];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
            //printf("down to up:\n");
            sum=dpdu[i][j]-dpdu[i][j-1];
            F(k,1,min(i,min(j,m-j+1)))
            {
                sum+=dpdu[i-k][j+k]-dpdu[i-k][j-k-1];
                cnt[sum]++;
                //mx=max(mx,sum);
                //printf("sum=%d\n",sum);
            }
        }
    }
}

int bs(LL g)
{
    int p=0,q=mx,ans;
    while(p!=q)
    {
        int mid=(p+q)/2;
        if(grain[mid]<=g)
        {
            p=mid+1;
        }
        else
        {
            q=mid;
        }
    }
    g-=grain[p-1];
    ans=cnt[p-1]+g/p;
    return ans;
}

int main()
{
    int q;
    cin>>n>>m>>q;
    //m=n=335;
    F(i,1,n+1)
    {
        F(j,1,m+1)
        {
            S(mat[i][j]);
            mx+=mat[i][j];
            //mat[i][j]=50;
        }
    }

    calculate();

    //Debugarr(cnt,7);
    cnt[0]=0;

    F(i,1,mx+1)
    {
        grain[i]=grain[i-1]+(LL)cnt[i]*i;
        cnt[i]+=cnt[i-1];
    }

    while(q--)
    {
        LL g;
        Sl(g);
        if(g>=grain[mx])
        {
            P(cnt[mx]);
        }
        else
        {
            P(bs(g));
        }
    }

    return 0;
}
