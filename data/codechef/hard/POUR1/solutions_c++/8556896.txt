#include <cstdio>
#include <algorithm>
#include <cstdlib>
#define max(a,b) a>b?a:b
#define min(a,b) a<b?a:b

bool isPossible(long long a, long long b, long long c){
	if(c > (max(a,b)))
		return false;
	long long gcd;
	for(;;){
		if(b==0){
			gcd=a;
			break;
		}
		a=a%b;
		if(a==0){
			gcd=b;
			break;
		}
		b=b%a;
	}
	if(c%gcd==0)
		return true;
	return false;
}

/*
 * using the extended-euclidean, euclidean and diophantine eqns.
 *
 * this function uses the first one as the starting mug and then finds the no. of steps to measure the steps to get c
 */
long long answer(long long a, long long b,long long c){
	if(c==a|| c==b)
		return 1;
	long long move=1,n1=a,n2=0,transfer;
	while(n1!=c && n2!=c){
		transfer=min(n1,b-n2);
		n1-=transfer;
		n2+=transfer;
		move++;
		if(n1==c || n2==c)
			return move;
		if(n1==0){
			n1=a;move++;
		}
		if(n2==b){
			n2=0; move++;
		}
	}
	return move;
}


int main(){
	int t;
	long long a, b, c;
	scanf("%d",&t);
	while(t--){
		scanf("%lld %lld %lld",&a, &b, &c);
		if(isPossible(a,b,c))
			printf("%lld\n",min(answer(a,b,c),answer(b,a,c)));
		else
			printf("%d\n",-1);
	}
	return 0;
}
