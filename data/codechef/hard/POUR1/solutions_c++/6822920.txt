# include <iostream>
# include<algorithm>
using namespace std;

int gcd ( int a, int b )
{
    int c;
    while ( a != 0 )
    {
        c = a;
        a = b%a;
        b = c;
    }
    return b;
}

bool check_possible(int a,int b,int c)
{
    if(c>a && c>b)
        return false;
    if(c % gcd(a,b) == 0)
        return true;

    return false;
}

int calc_steps(int a,int b,int c)
{
    bool possible = check_possible(a,b,c);
    int steps=0;
    if(possible == false)
            return -1;

    else
    {
        int capacityA = a;
        int capacityB = b;
        a=0,b=0;
        while((a != c) && (b != c))
        {
            if(a == 0)
            {
                a=capacityA;
                steps++;
            }
            else if(b == capacityB)
            {
                b=0;
                steps++;
            }
            else
            {
                int temp = min(capacityB-b,a);
                b+=temp;
                a-=temp;
                steps++;
            }
        }
        return steps;
    }
}

int main()
{
    int t,a,b,c;
    cin>>t;

    while(t--)
    {
        cin>>a;
        cin>>b;
        cin>>c;

        int min_steps =min( calc_steps(a,b,c),calc_steps(b,a,c));
        cout<<min_steps<<endl;
    }
    return 0;
}
