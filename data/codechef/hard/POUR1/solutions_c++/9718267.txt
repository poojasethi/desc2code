#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const int MAXN = 4e5 + 10;
const LL INF = 1e17;
bool visStatusA[MAXN][2];
bool visStatusB[MAXN][2];
int A, B, C;
LL bfs(){
	queue<pair<int, pair<int, int> > > qu;
	qu.push(make_pair(0, make_pair(0, 0)));
	visStatusA[0][0] = true;
	visStatusB[0][0] = true;
	while(!qu.empty()){
		int x = qu.front().second.first;
		int y = qu.front().second.second;
		int z = qu.front().first;
		qu.pop();
		if(x == C || y == C){
			return z;
		}
		int newx, newy;
		//fill1
		newx = A;
		newy = y;
		if(!visStatusA[y][1]){
			visStatusA[y][1] = true;
			qu.push(make_pair(z + 1, make_pair(newx, newy)));
		}
		//fill2
		newx = x;
		newy = B;
		if(!visStatusB[x][1]){
			visStatusB[x][1] = true;
			qu.push(make_pair(z + 1, make_pair(newx, newy)));
		}
		//empty1
		newx = 0;
		newy = y;
		if(!visStatusA[y][0]){
			visStatusA[y][0] = true;
			qu.push(make_pair(z + 1, make_pair(newx, newy)));
		}
		//empty2
		newx = x;
		newy = 0;
		if(!visStatusB[x][0]){
			visStatusB[x][0] = true;
			qu.push(make_pair(z + 1, make_pair(newx, newy)));
		}
		//pour1
		newx = x - min(x, (B - y));
		newy = y + min(x, (B - y));
		if(newx == 0){
			if(!visStatusA[newy][0]){
				visStatusA[newy][0] = true;
				qu.push(make_pair(z + 1, make_pair(newx, newy)));
			}
		} else{
			if(!visStatusB[newx][1]){
				visStatusB[newx][1] = true;
				qu.push(make_pair(z + 1, make_pair(newx, newy)));
			}
		}

		//pour2
		newx = x + min(y, (A - x));
		newy = y - min(y, (A - x));
		if(newy == 0){
			if(!visStatusB[newx][0]){
				visStatusB[newx][0] = true;
				qu.push(make_pair(z + 1, make_pair(newx, newy)));
			}
		} else{
			if(!visStatusA[newy][1]){
				visStatusA[newy][1] = true;
				qu.push(make_pair(z + 1, make_pair(newx, newy)));
			}
		}
	}
	return INF;
}
int main(){
	int t;
	cin >> t;
	while(t--){
		memset(visStatusA, 0, sizeof visStatusA);
		memset(visStatusB, 0, sizeof visStatusB);
		cin >> A >> B >> C;
		int d = __gcd(A, B);
		if(C > max(A, B) || C % d != 0){
			cout << "-1\n";
			continue;
		}
		cout << bfs() << "\n";
	}
	return 0;
}