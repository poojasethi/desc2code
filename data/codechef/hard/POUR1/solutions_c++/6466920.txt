#include<iostream>

#define MAX_SETS 100                 /* max number of test cases */
#define MAX_TARGET 40000             /* max final amount of liters of water */
#define swap(x, y) {x^=y;y^=x;x^=y;} /* exchange x and y */

using namespace std;

int gcd(int a, int b);               /* return greatest common divisor of a and b */
int getSteps(int a, int b, int c);   /* get steps beginning with filling vessel a */

int main() {
	int setCnt;                      /* number of test cases */
	
    while (cin>>setCnt && setCnt > MAX_SETS)
        cout<< "Too many test cases, try another one less than "<<MAX_SETS<<"."<<endl;

	while (setCnt-- > 0) {
        int a, b, c;                 /* a and b are volume of two vessels, c is final amount of liters of water */
        
		cin>>a>>b;
        while (cin>>c && c>MAX_TARGET)
            cout<< "Final amount of water is too large, try another one less than "<<MAX_TARGET<<"."<<endl;
        
		if (a < b)
			swap(a,b);               /* make sure that a is larger than b */
        
        /* It's impossible either 1) c is larger than the maximum volume or 2) c isn't muiltiple of gcd(a,b) */
        if (c > a || c % gcd(a, b) != 0) {
			cout<<"-1"<<endl;
			continue;
		}
        
        int steps = 0;
        int p = getSteps(a,b,c);     /* begin with filling vessel a */
        int q = getSteps(b,a,c);     /* begin with filling vessel b */
        steps =p<q?p:q;              /* choose the smaller number of steps */
		cout<<steps<<endl;

	}
    
    return 0;
}

int gcd(int a, int b) {
    while (b != 0) {
        int c = a % b;
        a = b;
        b = c;
    }
    return a;
}

int getSteps(int a, int b, int c){
    
    int steps = 0;
    int vesselOne = 0, vesselTwo = 0;
    
    /* Job is done until one of vessel contains c liters of water */
    while (vesselOne!=c && vesselTwo!=c) {  /* suppose water in a only comes from outside, water in b only comes from a */
        
        if (vesselOne == 0) {
            vesselOne = a;
        }
        else if (vesselTwo == b) {
            vesselTwo = 0;
        }
        else {
            int vacancy = b - vesselTwo;
            vesselOne -=vacancy;
            vesselTwo = b;
            
            if(vesselOne < 0){
                vesselTwo += vesselOne;
                vesselOne = 0;
            }
            
        }
        steps++;
    }
    
    return steps;

}
