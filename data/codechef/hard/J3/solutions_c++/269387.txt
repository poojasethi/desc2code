#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <queue> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <climits> 
#include <cstring> 
#include <cstdlib> 
#include <ctime> 
#include <fstream>
#include <stdio.h>
using namespace std;
#define FF(i,m,n) for(int (i)=(m);((i)<(n));(i++)) 
#define F(i,n) FF(i,0,n) 
#define CLR(s,v) memset(s,v,sizeof(s)) 
typedef pair<int,int> PI; 
// For Pair -> First & Second
#define f first 
#define s second 
#define S(t) scanf("%d",&t)
//For Hash

//Declaration -> hash_map<key,value>
int N,K,arr[501][501],x,y,graph[501][501];
//
void disp( )
{
	
	for ( int i = 1 ; i <=N ; i++)
	{
		cout<<"\n";
		//Graph
		for ( int j = 1 ; j <=N ; j++)
		{
			if(graph[i][j]==-1)
				cout << "#";
			else if(graph[i][j] == 0)
				cout << " ";
			else
				cout<< graph[i][j];
		}
		cout<<"   ";
		for ( int j = 1 ; j <=N ; j++)
		{
			if(arr[i][j]==2)
				cout << "#";
			else if(arr[i][j]==1)
				cout << "Q";
			else 
				cout << "-";
		}

	}
	cin.get();

}

void place_queen( int i , int j  )
{
	
	int ii = i , jj = j,x,y;
	//For that row and column
	if(graph[i][j]==0)
		graph[i][j]=j;
	for(x=i-1;x>=1;x--)
	{
		if(graph[x][j]==-1)
			break;
		if(graph[x][j]==0)
			graph[x][j]=j;
	}
	for(x=i+1;x<=N;x++)
	{
		if(graph[x][j]==-1)
			break;
		if(graph[x][j]==0)
			graph[x][j]=j;
	}
	for(y=j-1;y>=1;y--)
	{
		if(graph[i][y]==-1)
			break;
		if(graph[i][y]==0)
			graph[i][y]=j;
	}
	for(y=j+1;y<=N;y++)
	{
		if(graph[i][y]==-1)
			break;
		if(graph[i][y]==0)
			graph[i][y]=j;
	}
	x=i+1;
	y=j+1;
	while(x<=N && y<=N)
	{
		if(graph[x][y]==-1)
			break;
		if(graph[x][y]==0)
			graph[x][y]=j;
		x++;
		y++;
	}
	x=i-1;
	y=j-1;
	while(x>=0&& y>=0)
	{
		if(graph[x][y]==-1)
			break;
		if(graph[x][y]==0)
			graph[x][y]=j;
		x--;
		y--;
	}
	x=i-1;
	y=j+1;
	while(x>=0&& y<=N)
	{
		if(graph[x][y]==-1)
			break;
		if(graph[x][y]==0)
			graph[x][y]=j;
		x--;
		y++;
	}
	x=i+1;
	y=j-1;
	while(x<=N&& y>=0)
	{
		if(graph[x][y]== -1)
			break;
		if(graph[x][y]==0)
			graph[x][y]=j;
		x++;
		y--;
	}

}
void remove_queen(int jj)
{

	for ( int i = 1 ; i <= N ; i++ )
		 for ( int j = 1 ; j <= N ; j++)
		 {
			if(graph[i][j]==jj)
				graph[i][j]=0;
		 }
}
int recurse(int j )
{
	if ( j > N )
		return 1;
	/*cout << endl ;
	disp();
	cout << endl;*/
	for ( int i =1 ; i <=N ; i ++)
	{
		
		if ( graph[i][j] == 0 )
		{
			place_queen(i,j);
			arr[i][j] = 1 ;
			
			if(recurse(j+1))
			{
				
				return 1;
			}
			arr[i][j] = 0;
		
			remove_queen(j);
		}
	}
	return 0;
}
void main2()
{
	cin >> N >> K;
	CLR(arr,0);
	CLR(graph,0);
	

	F(i,K)
	{
		cin>>x>>y;
		
		arr[x][y]  =2;
		graph[x][y]=-1 ;
	}
	if(recurse(1))
	{
	//	disp();
		for(int j=1;j<=N;j++)
		{
			for(int i=1 ;i<=N ;i++)
			{
				if(arr[i][j]==1)
				{
					cout << i << " ";
					break;
				}
			}
		}

	}
	cout<<endl;
	//Arr | graph i,j -> 2 -> Blocked
	//  Graph                    0 -> CANT plance
	//	Graph 				1 -> Can place
	// Arr                  1 -> Queen placed

}
int main()
{
	
	int NoOfTestCases;
	cin >> NoOfTestCases;
	F(Case,NoOfTestCases)
		main2();
	return 0;
}