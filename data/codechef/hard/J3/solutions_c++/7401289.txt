#include<iostream>
#include<cstdio>
#define blocked -1
#define present 1
#define absent 0
using namespace std;
int graph[501][501]={0};
int ans[501]={0};
int size,block;
int safe(int row,int col)
{
    //row search//leftward
    for(int i=col;i>0;i--)
    {
        if(graph[row][i]==present)
        return 0;
        if(graph[row][i]==blocked)
        break;
    }
    //column search//upward
    for(int i=row;i>0;i--)
    {
        if(graph[i][col]==present)
        return 0;
        if(graph[i][col]==blocked)
        break;
    }
    //column search//downward
     for(int i=row;i<=size;i++)
    {
        if(graph[i][col]==present)
        return 0;
        if(graph[i][col]==blocked)
        break;
    }
    //diagonal search
    int i,j;
    for(i=row,j=col;i>0&&j>0;i--,j--)
    {
        if(graph[i][j]==present)
        return 0;
        if(graph[i][j]==blocked)
        break;
    }
    for(i=row,j=col;i<=size&&j>0;i++,j--)
    {
        if(graph[i][j]==present)
        return 0;
        if(graph[i][j]==blocked)
        break;
    }
    return 1;
}

int NQUEEN(int col,int size)
{
    for(int row=1;row<=size;row++)
    {
        if(safe(row,col)&&graph[row][col]!=blocked)
        {
            graph[row][col]=present;
            ans[col]=row;
           //return
             if(col==size)
             return 1;
            //return end
            if(NQUEEN(col+1,size))
            return 1;
            graph[row][col]=absent;
            ans[col]=0;
        }
    }
    return 0;
}
int main()
{
    int test;
    cin>>test;
    while(test--)
    {
        cin>>size>>block;
        for(int i=0;i<block;i++)
        {
            int first,second;
            cin>>first>>second;
            graph[first][second]=blocked;
        }
        NQUEEN(1,size);
        for(int i=1;i<=size;i++)
        printf("%d ",ans[i]);
        printf("\n");
        for(int i=0;i<=size;i++)
        ans[i]=absent;
        for(int i=0;i<=size;i++)
        for(int j=0;j<=size;j++)
        graph[i][j]=absent;
    }
    return 0;
}
