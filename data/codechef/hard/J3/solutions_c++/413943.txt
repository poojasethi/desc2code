#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

template<class A, class B> A cvt(B x) {stringstream s;s<<x;A r;s>>r;return r;}

#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i) 
#define FOREQ(i,a,b) for(int i= (int )a ; i <= (int )b ; ++i) 
#define REV(i,a,b) for(int i= (int )a ; i > (int )b ; --i) 
#define LIM(x, n, m)	(x>=n && x<m ? 1 : 0)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define PP pop()
#define EM empty()
#define INF 1000000000
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a) 	    __typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define PRESENT(c,x) 	((c).find(x) != (c).end())
#define SZ(x) 		x.size();
#define CPRESENT(c,x) 	(find(c.begin(),c.end(),x) != (c).end())
#define D(N) 		int N
#define S(N)		scanf("%d",&N)

#define CREATE_CLOCK() clock_t ____start, ____diff = 0 ;
#define START_CLOCK() ____start = clock() ;
#define REPORT_CLOCK() ({float f = (((float)clock()) - ____start)/((float)CLOCKS_PER_SEC);printf ("Time = %.6f\n" , f);})

typedef pair<int,int>  PI;
typedef pair<int,PI>   TRI;
typedef V( int )       VI;
typedef V( PI  )       VII;
typedef V( string )    VS;
typedef long long      LL;

int attack (int i, int j, int n, int num);
int board [501][501];
int pos [501];

int solve (int n, int curr) {
	FOREQ (i, 1, n) {
		if (board [i][curr] == 0) {
			board [i][curr] = 1;
			attack (i, curr, n, 1);
			if (curr == n) return 1;
			if (solve (n, curr+1)) return 1;
//			unattack (i, curr, n, curr);
			FOREQ (j, 1, n)
				FOREQ (k, 1, n)
					if (board [j][k] == 1) board [j][k] = 0;
			FOR (j, 1, curr)	attack (pos [j], j, n, 1);
		}
	}
	return 0;
}

int attack (int i, int j, int n, int num) {
    pos[j] = i;
	int x, y;
    for(x=i;x<=n;x++) {		// DOWN
        if(board[x][j]==2)
            break;
        board[x][j] = num;
    }
    for(x=i;x>=1;x--)   	// UP
    {
        if(board[x][j]==2)
           break;
        board[x][j] = num;
    } 
    for(x=j;x<=n;x++)		// RIGHT
    {
        if(board[i][x]==2)
          break;
        board[i][x] = num;
    }
    for(x=j;x>=1;x--)		// LEFT
    {
        if(board[i][x]==2)
          break;
        board[i][x] = num;
    }
    for(x=i,y=j;x<=n && y <=n;x++,y++)	// SE
    {
        if(board[x][y]==2)
           break;
        board[x][y] = num;
    }  
    for(x=i,y=j;x<=n && y>=1;x++,y--)	// SW
    {
        if(board[x][y]==2)
           break;
        board[x][y] = num;
    }
    for(x=i,y=j;x>=1 && y <=n;x--,y++)	// NE
    {
        if(board[x][y]==2)
           break;
        board[x][y] = num;
    }
    for(x=i,y=j;x>=1 && y>=1;x--,y--)	// NW
    {
        if(board[x][y]==2)
           break;
        board[x][y] = num;
    }                 
}

int main () {
	int test; cin >> test;
	while (test-- >0) {
		int x, y, n, k;	cin >>n >>k;
		FOREQ (i, 1, k) {
			cin	>> x >> y;
			board [x][y] = 2;
		}
		solve (n, 1);
		FOREQ (i, 1, n)	cout << pos [i] << " ";
		cout << endl;
		FOREQ (i, 1, n) FOREQ (j, 1, n)	board [i][j] = 0;
	}
	return 0;
}