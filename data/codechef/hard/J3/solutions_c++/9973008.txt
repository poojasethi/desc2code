#include <iostream>

using namespace std;

int **block;
int **board;

void init_block(int n){
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			block[i][j] = 0;
}

void init_board(int n){
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			board[i][j] = 0;
}

bool n_queens(int col, int n){
	int temp_row;
	int temp_col;
	if (col == n)
		return true;
	for (int row = 0; row < n; row++){
		bool flag = false;
		//Check for block at present location
		if (block[row][col] == 1)
			continue;
		//Checking for horizontal clash
		for (temp_col = col - 1; temp_col >= 0; temp_col--){
			if (block[row][temp_col] == 1)
				break;
			if (board[row][temp_col] == 1){
				flag = true;
				break;
			}
		}
		if (flag){
			continue;
		}
		//Checking for diagonal clash
		//upper diagonal
		for (temp_row = row - 1; temp_row >= row - col && temp_row >= 0; temp_row--){
			temp_col = col + temp_row - row;
			if (block[temp_row][temp_col] == 1)
				break;
			if (board[temp_row][temp_col] == 1){
				flag = true;
				break;
			}
		}
		if (flag){
			continue;
		}
		//lower diagonal
		for (temp_row = row + 1; temp_row < n && col + row - temp_row >= 0; temp_row++){
			temp_col = col + row - temp_row;
			if (block[temp_row][temp_col] == 1)
				break;
			if (board[temp_row][temp_col] == 1){
				flag = true;
				break;
			}
		}
		if (flag){
			continue;
		}
		board[row][col] = 1;
		if (n_queens(col + 1, n) == true)
			return true;
		else
			board[row][col] = 0;
	}
	return false;
}


int main(){
	int no_cases;
	cin >> no_cases;
	for (int test_case = 1; test_case <= no_cases; test_case++){
		int N, K;
		cin >> N >> K;
		block = new int*[N];
		board = new int*[N];
		for (int i = 0; i < N; i++){
			block[i] = new int[N];
			board[i] = new int[N];
		}
		init_block(N);
		init_board(N);
		for (int i = 0; i < K; i++){
			int a, b;
			cin >> a >> b;
			block[a-1][b-1] = 1;
		}
		bool result = n_queens(0, N);
		for (int i = 0; i < N; i++){
			for (int j = 0; j < N; j++){
				if (board[j][i] == 1){
					cout << j+1 << " ";
					break;
				}
			}
		}
		cout << endl;
	}
	return 0;
}