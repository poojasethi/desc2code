#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
#define foreach(it,v) for(__typeof(v.begin()) it=v.begin(); it!=v.end(); it++)

bool muro[500][500]; //por obstaculo o por reina
int amenazado[500][500];
int bloqueados[500];  

int res[500];
int N;

void esp(int x) { for(int i=0; i<x; i++) printf(" "); }

const int di[] = { 0, 0,-1,+1,-1,+1};
const int dj[] = {-1,+1,-1,+1,+1,-1};
#define VALID(i,j) i>=0 && j>=0 && i<N && j<N

void poner_reina(int ii, int jj)
{
    res[jj]= ii;
    
    for(int k=0; k<6; k++)
        for(int i=ii+di[k], j=jj+dj[k]; VALID(i,j) && !muro[i][j] ; i+=di[k], j+=dj[k])
            if(++amenazado[i][j]==1)
                bloqueados[j]++;
}

void quitar_reina(int ii, int jj)
{
    res[jj]= -1;
    
    for(int k=0; k<6; k++)
        for(int i=ii+di[k], j=jj+dj[k]; VALID(i,j) && !muro[i][j] ; i+=di[k], j+=dj[k])
            if(--amenazado[i][j]==0)
                bloqueados[j]--;
}


//1. buscar la columna con menos disponibles
//2. en esa columna, ensayar con las celdas de la menos a la mas amenazante
bool solve(int _deep) 
{

    if(_deep==N) return true;
    
    int col=-1, bloqs=-1;

    for(int j=0; j<N; j++) {
        if(res[j]==-1 && bloqueados[j]>bloqs) {
            col=j;
            bloqs=bloqueados[j];
        }
    }
    //esp(_deep); printf("N=%d deep: %d  col: %d\n",N,_deep,col);
    if(col==-1) {
        //    esp(_deep); printf("N=%d deep: %d  col: %d\n",N,_deep,col);
        printf("adfadf");
        return false;
        
    }
    
    for(int row=0; row<N; row++)
    {
        if(!muro[row][col] && !amenazado[row][col]) {
            //esp(col); printf("row: %d\n", row);
            poner_reina(row, col);
            if(solve(_deep+1)) return true;
            quitar_reina(row, col);
        }
    }
    
    return false;
}


int main()
{
    int T;
    scanf("%d",&T);
    for(int tt=0; tt<T; tt++)
    {
        int numObstaculos;
        scanf("%d %d",&N,&numObstaculos);
        
        memset(muro,0,sizeof(muro));
        memset(amenazado,0,sizeof(amenazado));
        memset(res, -1, N*sizeof(int));
        memset(bloqueados, 0, N*sizeof(int));

        int ii, jj;
        for(int i=0; i<numObstaculos; i++) 
        {
            scanf("%d %d",&ii, &jj);
            ii--; jj--;
            muro[ii][jj]=true;
            bloqueados[jj]++;
        }
        
        if(!solve(0)) {
            printf("solucion no encontrada");
            exit(1);
        }
        
        for(int i=0; i<N; i++)
        {
            if(i>0) printf(" ");
            printf("%d",res[i]+1);
        }
        printf("\n");
    }
}
