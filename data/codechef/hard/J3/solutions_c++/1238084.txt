#include<stdio.h>
#define getcx getchar_unlocked
int t,n,k;
int x,y;
int b[500][500];
//int c[500];
int d[500];    
//int e[500];
int ro,co;
int x1;

inline void inp( int &u ) 
 {
    /*u=0;
    int ch=getcx();//int sign=1;
   // while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

    while(  ch >= '0' && ch <= '9' )
            u = (u<<3)+(u<<1) + ch-'0', ch=getcx();
   // n=n*sign;*/
   
   scanf("%d",&u);
  }

bool can_attack(int r,int c)
{

      for(int i=c-1;i>=0;i--)
      {
          if(b[r][i]==-1)
          break;
          if(b[r][i]==1)
          return true;
      }
      
      ro=r-1;
      co=c-1;
      while(ro>=0 && co>=0)
      {
           if(b[ro][co]==-1)
           break;
           if(b[ro][co]==1)
           return true;
           ro--;
           co--;
      }
   //   printf("%d\n",att);
      ro=r+1;
      co=c-1;
      while(ro<n && co>=0)
      {
           if(b[ro][co]==-1)
           break;
           if(b[ro][co]==1)
           return true;
           ro++;
           co--;
      }
      return false;
}

bool f(int c)
{
     //printf("%d\n",r);
     for(int i=0;i<n;i++)
     {
            
             if(b[i][c]==-1)
             continue;
            // printf("%d %d\n",r,i);
             if(!can_attack(i,c))
             {
          //   printf("in %d %d\n",r,i);
                  b[i][c]=1;
                  d[c]=i;
                  //c[i]=1;
                  if(c==n-1)
                  return true;
                  if(f(c+1))
                  return true;
                  b[i][c]=0;
                  d[c]=0;
                 //c[i]=0;
             }
     }
     return false;
}

int main()
{
    inp(t);
    for(int i=0;i<t;i++)
    {
            inp(n);
            inp(k);
            for(int i=0;i<n;i++)
            {
                   // c[i]=0;     
                    for(int j=0;j<n;j++)
                    {
                            b[i][j]=0;
                    }
            }
            for(int i=0;i<k;i++)
            {
                   // scanf("%d%d",&x,&y);
                   inp(x);
                   inp(y);
                    b[x-1][y-1]=-1;
                   // e[y-1]=1;
            }
           // if(!f(0))
           // printf("-1\n");
           f(0);
            for(int i=0;i<n-1;i++)
            {
                    printf("%d ",1+d[i]);
            }
            printf("%d\n",1+d[n-1]);
                    
    }
    //scanf("%d",&n);
    return 0;
}
