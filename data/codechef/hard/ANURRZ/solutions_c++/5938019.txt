/*
    Author - Shubham Shukla (shuklas664)
*/
#include <bits/stdc++.h>
#include <iostream>
#include<iomanip>
#include<stdio.h>
#include<math.h>
#include<cstdlib>
#include<algorithm>
#include<vector>
#include<string>
#include<string.h>
#include<cstdio>
#include<vector>
#include<utility>
#include<map>

#define scl(t) scanf("%ld",&t)
#define scll(t) scanf("%lld",&t)
#define sc(t) scanf("%d",&t)
#define scf(t) scanf("%f",&t)

#define max(a,b) (a>=b?a:b)
#define min(a,b) (a<b?a:b)
#define ll long long
#define M 1000000007
#define gc getchar_unlocked
#define printAr(a,n) for(i=0;i<n;i++){cout<<a[i]<<" ";}
#define printMat(a,n,m) for(i=0;i<n;i++){for(j=0;j<m;j++){cout<<a[i][j]<<" ";}lc;}
#define mp make_pair
#define pb push_back
#define lc printf("\n")


using namespace std;

map<ll,ll>::iterator it;
map<ll,ll> v;
pair<ll,ll> p;

/*
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

*/
int scan_d() {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
int dp[1009][1009];
int b[1009];

int main()
{

    ll ans;
	int t,n,i,j;
	t=scan_d();
	while(t--)
    {
		ans=0;
		memset(dp,0,sizeof(dp));
		n=scan_d();
		for(i=1;i<=n;i++)
         {
             b[i]=scan_d();
              b[i]=min(b[i],i);
         }
        dp[0][0]=1;
        for(i=1;i<=n;i++)
        {
            for(j=n;j>=1;j--)
            {
                dp[i][j]=(dp[i][j+1]+dp[i-1][j-1])%M;

            }

            for(j=b[i]+1;j<=n;j++)
                dp[i][j]=0;
        }
        for(i=1;i<=b[n];i++)
            ans=(ans+dp[n][i])%M;
    cout<<ans<<endl;
    }

}
