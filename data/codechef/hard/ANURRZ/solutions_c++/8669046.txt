#include<vector>
#include<cstring>
#include<algorithm>
#include<stdio.h>
#include<climits>
#include<set>
#include<fstream>
#include<cmath>
#include<bitset>
#include<map>
#include<stack>
#include<fstream>
#include<iostream>
#include<queue>
#include<assert.h>
#define test(t) while(t--)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)

#define p(n) printf("%lld\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>

#define pb push_back
#define inf 1000000000LL
#define mp make_pair

#define N 100004
#define LN 20
#define ll long long
//#define inf 100000000
ll mod = 1e9 + 7;
using namespace std;
ll modExp(ll a,ll b,ll md){
    ll ans = 1;
    while(b){
       if(b&1)
            ans = (ans*a)%md;
        a = (a*a)%md;
        b/=2;
    }
    return ans;
}

ll inverse(ll num){
    if(num==0)
        return 1LL;
   return modExp(num,mod-2,mod);
}


/*int bit[1000002];
int maxval = 1000001;

void update(ll idx,int val){

   while(idx<=maxval){
       bit[idx]+=val;

       idx +=(idx & -idx);
   }
}

ll query(ll idx){

   ll ans = 0;

   while(idx>0){
      ans+=bit[idx];
      idx-=(idx & -idx);
   }

   return ans;
}*/

int b[1001];
ll dp[1001][1001];
int main(){

int t,n,i,j,k;

s(t);
while(t--){
  s(n);
  for(i=1;i<=n;++i)
    s(b[i]);
  for(i=1;i<=n;++i)
    dp[i][0] = 0;
  dp[1][1] = 1;
  for(i=2;i<=n;++i){
    for(j=1;j<=i;++j){

       if(j==1)
        dp[i][j] = dp[i-1][i-1];
       else if(j<=b[i]){
         dp[i][j] = dp[i-1][i-1]-dp[i-1][j-2] +mod;
       }else
            dp[i][j] = 0;
       dp[i][j] = (dp[i][j]+dp[i][j-1]);
            if(dp[i][j]>=mod)
                dp[i][j]%=mod;
    }
  }
  printf("%lld\n",dp[n][n]);
}

}
