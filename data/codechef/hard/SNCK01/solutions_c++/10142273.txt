#include <bits/stdc++.h>

using namespace std;

const int MAX = 55;

int cases = 1;
int dp[MAX][MAX];
int vis[MAX][MAX], N, M, a[MAX][MAX];

//#include <conio.h>


void read(){
    scanf("%d %d", &N, &M);
    for(int i=0; i<N; i++){
        for(int j=0; j<M; j++) scanf("%d", &a[i][j]);
        // omit leading ones
    }
    return ;
}

int rec(int n, int pos, int rem){
    if(pos == M)
        return 0;
    if(rem == 0)
        return rec(n, pos + 1, a[n][pos+1]);
    int& ret = dp[pos][rem];
    int& vc = vis[pos][rem];
    if(vc == cases) return ret;
    vc = cases;
    bool flag[100];
    memset(flag, 0, 100);
    for(int i=1; i<=rem; i++){
//        assert(rec(n, pos, rem-i) < 100);
        flag[ rec(n, pos, rem-i) ] = true;
    }
    for(int i=0; ; i++){
        if(flag[i] == false)
            return ret = i;
    }
    return ret = 0;
}

int giveFinalGrundy(int n){
    int i = 1, p = 1;
    for(; i<M; i++){
        if(a[n][i] != a[n][0])
            break;
        p++;
    }
    if(i == M){
        if(M%2 == 1)
            return a[n][0];
        return a[n][0] - 1;
    }
    if(p == 1){ // general case
        if(a[n][0] > a[n][1])
            return a[n][0];
        else return a[n][0] - 1;
    } else{
        if(p%2 == 1){ // odd times are there first number
            if(a[n][0] > a[n][i])
                return a[n][0];
            else
                return a[n][0] - 1;
        }
        else{ // even times are there first number
            if(a[n][0] > a[n][i])
                return a[n][0] - 1;
            else
                return a[n][0];
        }
    }
    return 0;
}

int giveGrundy(int n){
    // if the first number is the greater than  the second number than grundy value of that row is the first number
    // else grundy is first number - 1
    int numb = a[n][0];
    bool flag = true;
    for(int i=1; i<M; i++) if(a[n][i] != a[n][0]) flag = false;
    if(flag == true){
        if(M%2 == 1)
            return a[n][0];
        else
            return a[n][0] - 1;
    }
    if(a[n][0] > a[n][1]) return a[n][0];
    return a[n][0] - 1;

//    bool flag = true;
//    for(int i=1; i<M; i++){
//        if(a[n][i] > a[n][0]) flag = false;
//    }
//    if(flag == true) return a[n][0];
//    return a[n][0]-1;
}

int main(){
//    assert(1>2);
//    freopen("in.txt", "r", stdin);
    int test, c=1;
    scanf("%d", &test);
    while(test--){
        read();
        int res = 0;
        for(int i=0; i<N; i++){
            cases++;


//            int sum = 0;
//            for(int j=0; j<M; j++) sum += a[i][j];
////            printf("row number: %d\tgrundy = %d\tsum = %d\n", i, rec(i, 0, a[i][0]), sum);//getch();
//            if(rec(i,0, a[i][0]) == 0){
//                for(int j=0; j<M; j++) printf("%d ", a[i][j]); puts("");//getch();
//            }
//            res ^= rec(i, 0, a[i][0]);
//            printf("res: %d\n", res);//getch();


            res ^= giveFinalGrundy(i);
        }
//        printf("res: %d\t", res);
        printf("%s\n", res ? "FIRST" : "SECOND");
    }
    return 0;
}


/**

Got pattern from the cases:

100
1 3
1 1 1
row number: 0   grundy = 1      sum = 3
res: 1
FIRST
1 3
1 1 2
row number: 0   grundy = 1      sum = 4
res: 1
FIRST


1 3
3 3 4
res: 3
res: 3  FIRST

1 3
17 17 14
res: 16
res: 16 FIRST

1 3
17 17 18
res: 17
res: 17 FIRST

1 3
17 16 14
res: 17
res: 17 FIRST

1 3
17 16 18
res: 17
res: 17 FIRST

1 4
17 17 17 14
res: 17
res: 17 FIRST

1 4
17 17 17 18
res: 16
res: 16 FIRST





1 5
12 12 13 14 15
res: 12
res: 12 FIRST

1 5
12 12 12 13 14
res: 11
res: 11 FIRST
1 7
12 12 12 12 12 13 14
res: 11
res: 11 FIRST

1 7
12 12 12 12 12 9 14
res: 12
res: 12 FIRST

1 6
12 12 12 12 9 14
res: 11
res: 11 FIRST

1 4
12 12 12 12
res: 11
res: 11 FIRST

1 2
12 12
res: 11
res: 11 FIRST

1 3
12 12 12
res: 12
res: 12 FIRST

1 3
12 15 18
res: 11
res: 11 FIRST

1 3
12 15 15
res: 11
res: 11 FIRST

1 3
12 9 6
res: 12
res: 12 FIRST

1 3
12 9 9
res: 12
res: 12 FIRST
1 5
12 12 12 12 12
res: 12
res: 12 FIRST

1 7
12 12 12 12 9 4 13
res: 11
res: 11 FIRST
1 7
12 12 12 12 17 4 13
res: 12
res: 12 FIRST


































1 3
2 2 3 ?





































1 3
17 42 40
row number: 0   grundy = 16     sum = 99
res: 16
FIRST

1 3
17 16 42
row number: 0   grundy = 17     sum = 75
res: 17
FIRST

1 4
1 17 16 42
row number: 0   grundy = 0      sum = 76
1 17 16 42
res: 0
SECOND


1 3
17 17 17
row number: 0   grundy = 17     sum = 51
res: 17
FIRST
1 4
17 17 17 17
row number: 0   grundy = 16     sum = 68
res: 16
FIRST

1 5
17 17 17 17 17
row number: 0   grundy = 17     sum = 85
res: 17
FIRST

1 5
17 17 15 14 13
row number: 0   grundy = 16     sum = 76
res: 16
FIRST


1 5
17 16 15 14 13
row number: 0   grundy = 17     sum = 75
res: 17
FIRST


1 5
17 16 17 17 17
row number: 0   grundy = 17     sum = 84
res: 17
FIRST

1 6
17 16 17 17 17 17
row number: 0   grundy = 17     sum = 101






*/
