//#include "programming_contests.h"
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <typeinfo>
using namespace std;

typedef long long LL;

#define RI(x) int x = 0; scanf("%i", &x)
#define RLL(x) long long x = 0; scanf("%lli", &x)
#define RS(x) char _buf[2000]; scanf("%s", _buf); string x(_buf)
#define RL(x) string x; getline(cin, x)
#define FIN(path) freopen(path, "r", stdin)
#define FOUT(path) freopen(path, "w", stdout)

#define ALL(x) x.begin(), x.end()
#define FOR(i, a, b) for(int i=(a), _b=(b); i<_b; ++i)
#define FORR(i, a, b) for(int i=(b-1), _a=(a); i>=_a; --i)
#define FORE(it, c) for(typeof(c.begin()) it=c.begin(); it!=c.end(); ++it)

#define PB push_back
#define SZ(c) ((int)c.size())
#define LEN(a) (sizeof(a)/sizeof(a[0]))

#define TWO(e) (1<<e)



static const long double PI = acosl(1.0L);
static const long double GOLD = (1+sqrt(5))/2;




// Requires that type of v is the type that a contains.
template <typename A, typename V>
static void fillArray(A &a, const V &v) {
  fill((V*)a, (V*)a+sizeof(a)/sizeof(V), v);
}

template<typename T>
static void print(T x) {
  cout << x << endl;
}

template<typename T>
static void print(T first, const T &last) {
  while(first != last) cout << *(first++) << " ";
  cout << endl;
}

template<typename T, size_t LENGTH>
static void print(const T (&a)[LENGTH]) {
  print(a,a+LENGTH);
}

template<typename T, size_t LENGTH0, size_t LENGTH1>
static void print(const T (&a)[LENGTH0][LENGTH1]) {
  for(int i = 0; i < LENGTH0; ++i) {
    print(a[i]);
  }
}
















int mat[55][55];

int main(int argc, char** argv) { 
  //FIN("input.txt");
  RI(T);
  FOR(test,0,T) {
    RI(N); RI(M);
    FOR(r,0,N) FOR(c,0,M) {
      RI(x);
      mat[r][c] = x;
    }
    
    int res = 0;
    FOR(r,0,N) {
      int nimber = mat[r][M-1];
      FORR(c,0,M-1) {
        if(mat[r][c] <= nimber) nimber = mat[r][c]-1;
        else nimber = mat[r][c];
      }
      res ^= nimber;
    }
    
    printf(res ? "FIRST\n" : "SECOND\n");
  }
  return 0;
}
