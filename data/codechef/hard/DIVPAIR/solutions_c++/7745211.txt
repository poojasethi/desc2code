#include <stdio.h>
#include <string.h>
#include <iostream>
#include <math.h>
#include <cctype>
#include <stdlib.h>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <iterator>
#include <climits>

#define rep(i,n) for(i=1;i<=n;i++)
#define Rep(i,n) for(i=0;i<n;i++)
#define For(i,a,b) for(i=a;i<=b;i++)

#define pb(x) push_back(x)
#define sz(x) x.size()

#define mem(ara,val) memset(ara,val,sizeof(ara))
#define eps 1e-9

#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define sl(x) scanf("%lld",&x)
#define sll(x,y) scanf("%lld %lld",&x,&y)
#define slll(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define ss(ch) scanf("%s",ch)
#define pi(x) printf("%d",x)
#define pii(x,y) printf("%d %d",x,y)
#define piii(x,y,z) printf("%d %d %d",x,y,z)
#define pl(x) printf("%lld",x)
#define pll(x,y) printf("%lld %lld",x,y)
#define plll(x,y,z) printf("%lld %lld %lld",x,y,z)
#define ps(ch) printf("%s",ch)
#define Afridi 0
#define NL printf("\n")
#define debug(str,x) cout << str << " " << x << endl
#define Max 1000000
#define INF INT_MAX

typedef long long LL;
typedef unsigned long long ULL;

using namespace std;

LL n,m,mid;

LL term(LL x)
{
    LL ans;
    if(x > mid)
    {
        ans = x - mid;
    }
    else
    {
        ans = x - 2;
    }
    return ans;
}

LL xth(LL x)
{
    return (x+1)/2;
}

LL getans(LL a,LL d,LL x)
{
    return x*a + (x*(x-1)/2)*d;
}

LL fun()
{
    LL a,b,c,s1,s2,s3,d,ans = 0,koyta,last;
    ///1st half
    s1 = m;
    s2 = s1+m;
    s3 = s2+m;
    d = xth(term(s3)) - xth(term(s1));
   // printf("dis %lld\n",d);

    koyta = (mid - s1)/(2*m);
    if(s1 <= mid)koyta++;
    //debug("koyta1",koyta);
    ans+=getans(xth(term(s1)),d,koyta);
   // printf("bal %lld\n",ans);

    koyta = (mid - s2)/(2*m);
    if(s2 <= mid)koyta++;
    //debug("koyta2",koyta);
    ans+=getans(xth(term(s2)),d,koyta);

    //printf("1st half %lld\n",ans);

    ///2nd half
    last = (2*n-1)/m;
    last*=m;
    s1 = (2*(n+1) - last);
   // printf("new %lld\n",s1);
    s2 = s1+m;
    s3 = s2+m;
    d = xth(term(s3)) - xth(term(s1));
    //printf("dis %lld\n",d);

    koyta = (mid-1 - s1)/(2*m);
    if(s1 <= mid-1)koyta++;
    ans+=getans(xth(term(s1)),d,koyta);

    koyta = (mid-1 - s2)/(2*m);
    if(s2 <= mid-1)koyta++;
    ans+=getans(xth(term(s2)),d,koyta);

    return ans;
}

int main()
{
    LL t,T;
    sl(T);
    rep(t,T)
    {
        sll(n,m);
        mid = (n+1);
        LL ans = fun();
        pl(ans);NL;
    }
    return 0;
}
