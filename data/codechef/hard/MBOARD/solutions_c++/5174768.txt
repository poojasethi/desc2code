#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <vector>
#include <bitset>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>

#define LL long long
#define FI first
#define SE second
#define PB push_back
#define MP make_pair
#define VI vector<int>
#define VP vector<PII>
#define VS vector<string>
#define PII pair<int, int>
#define SZ(a) ((int) a.size())
#define ALL(a) a.begin(), a.end()
#define mem(a) memset(a, 0, sizeof(a))
#define memm(a) memset(a, -1, sizeof(a))

#define SL(a) strlen(a)
#define RS(s) scanf("%s", (s))
#define PI(r) printf("%d\n", (r))
#define RI(a) scanf("%d", &(a))
#define RII(a, b) scanf("%d%d", &(a), &(b))
#define RIII(a, b, c) scanf("%d%d%d", &(a), &(b), &(c))

#define DBG(x, s) cout << (x) << ' ' << (s) << endl
#define REP(i, n) for (int i = 0; i < (int) (n); ++i)
#define REPP(i, a, b) for (int i = (int) (a); i <= (int) (b); ++i)
#define RED(i, n) for (int i = (int) (n - 1); i >= 0; --i)
#define REDD(i, a, b) for (int i = (int) (a); i >= (int) (b); --i)

#define L (x << 1)
#define R ((x << 1) | 1)
#define MID ((l + r) >> 1)
#define LC L, l, MID
#define RC R, MID + 1, r
#define LB(x) ((x) & (-(x)))
#define B(x) __builtin_popcount(x)

#define EPS 1e-7
#define INF 0x3f3f3f3f
#define LIM (1ll << 60)

using namespace std;

int n, m;

const int N = 500005;
int row[2][N], col[2][N];
PII lastrow[N], lastcol[N];

void add(int *a, int x, int y) {
	while (x < N) {
		a[x] += y;
		x += LB(x);
	}
}

int query(int *a, int x) {
	if (x <= 0) return 0;
	int re = 0;
	while (x) {
		re += a[x];
		x -= LB(x);
	}
	return re;
}

 int get() {
	char c;
	while (c = getchar(), (c < '0' || c > '9') && (c != '-'));
	bool flag = (c == '-');
	if (flag) c = getchar();
	int x = 0;
	while (c >= '0' && c <= '9') {
		x = x * 10 + c - 48;
		c = getchar();
	}
	return flag ? -x : x;
}

void output(int x) { //int
	if (x < 0) putchar('-'), x = -x;
	int len = 0, bit[10]; // LL  -> bit[20]
	while (x) {
		bit[len++] = x % 10;
		x /= 10;
	}
	if (!len) bit[len++] = 0;
	while (len--) putchar(bit[len] + 48);
	putchar('\n');
}

char s[20];

int main(){
	//freopen("tmp.in", "r", stdin);
	//freopen("1.ans", "w", stdout);
	//ios :: sync_with_stdio(0);

	int t, x, y, z, ca = 1;

	RII(n, m);
	REPP(i, 1, m) {
		RS(s);
		if (s[0] == 'R' && s[3] == 'Q') {
			// RI(x);
			x = get();
			int tmp = lastrow[x].SE;
			if (tmp == 0) printf("%d\n", n - (query(col[tmp ^ 1], i) - query(col[tmp ^ 1], lastrow[x].FI)));
			else printf("%d\n", (query(col[tmp ^ 1], i) - query(col[tmp ^ 1], lastrow[x].FI - 1)));
		}
		else if (s[0] == 'C' && s[3] == 'Q') {
			//RI(x);
			x = get();
			int tmp = lastcol[x].SE;
			if (tmp == 0) printf("%d\n", n - (query(row[tmp ^ 1], i) - query(row[tmp ^ 1], lastcol[x].FI)));
			else printf("%d\n", (query(row[tmp ^ 1], i) - query(row[tmp ^ 1], lastcol[x].FI - 1)));
		}
		else if (s[0] == 'R' && s[3] == 'S') {
			//RII(x, y);
			x = get(), y = get();
			if (lastrow[x].FI > 0) add(row[lastrow[x].SE], lastrow[x].FI, -1);
			lastrow[x] = MP(i, y);
			add(row[y], i, 1);
		}
		else {
			// RII(x, y);
			x = get(), y = get();
			if (lastcol[x].FI > 0) add(col[lastcol[x].SE], lastcol[x].FI, -1);
			lastcol[x] = MP(i, y);
			add(col[y], i, 1);
		}
	}

	return 0;
}

