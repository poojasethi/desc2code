#include<stdio.h>
#include<iostream>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<stack>
#include<algorithm>

#define MOD 1000000007
#define INF 2000000000

using namespace std;

int row_one_bit[600000],col_one_bit[600000];
int row_zero_bit[600000],col_zero_bit[600000];

void update(int bit[],int k,int u,int n)
{
     while(u<=n)
     {
                bit[u]+=k;
                u+=(u&-u);
     }
     
     return;
}

int query(int bit[],int u,int n)
{
    int ret=0;
    
    while(u>0)
    {
              ret+=bit[u];
              u-=(u&-u);
    }
    
    return ret;
}


int prev_row_one[600000],prev_row_zero[600000];
int prev_col_one[600000],prev_col_zero[600000];

int main()
{
    int n,q,i,idx,v;
    char s[20];
    
    scanf("%d %d",&n,&q);
    
    
    for(i=1;i<=q;i++)
    {
                    scanf("%s",s);
                    
                    if(s[3]=='S')
                    {
                                 scanf("%d %d",&idx,&v);
                                 
                                 if(s[0]=='R')
                                 {
                                              if(v==0)
                                              {
                                                      
                                                      if(prev_row_one[idx]>prev_row_zero[idx])
                                                      {
                                                                                              update(row_zero_bit,1,1,q);
                                                                                              update(row_zero_bit,-1,i+1,q);
                                                                                              update(row_one_bit,-1,1,q);
                                                                                              update(row_one_bit,1,prev_row_one[idx]+1,q);
                                                      }
                                                      else
                                                      {
                                                          update(row_zero_bit,1,prev_row_zero[idx]+1,q);
                                                          update(row_zero_bit,-1,i+1,q);
                                                      }
                                                      
                                                      prev_row_zero[idx]=i;
                                              }
                                              else
                                              {
                                                  
                                                  if(prev_row_one[idx]<prev_row_zero[idx])
                                                  {
                                                                                          update(row_one_bit,1,1,q);
                                                                                          update(row_one_bit,-1,i+1,q);
                                                                                          update(row_zero_bit,-1,1,q);
                                                                                          update(row_zero_bit,1,prev_row_zero[idx]+1,q);
                                                  }
                                                  else
                                                  {
                                                      update(row_one_bit,1,prev_row_one[idx]+1,q);
                                                      update(row_one_bit,-1,i+1,q);
                                                  }
                                                  
                                                  prev_row_one[idx]=i;
                                              }
                                              
                                                      
                                 }
                                 else
                                 {
                                     if(v==0)
                                     {
                                                      
                                                      if(prev_col_one[idx]>prev_col_zero[idx])
                                                      {
                                                                                              update(col_zero_bit,1,1,q);
                                                                                              update(col_zero_bit,-1,i+1,q);
                                                                                              update(col_one_bit,-1,1,q);
                                                                                              update(col_one_bit,1,prev_col_one[idx]+1,q);
                                                      }
                                                      else
                                                      {
                                                          update(col_zero_bit,1,prev_col_zero[idx]+1,q);
                                                          update(col_zero_bit,-1,i+1,q);
                                                      }
                                                      
                                                      prev_col_zero[idx]=i;
                                     }
                                     else
                                     {
                                                  
                                                  if(prev_col_one[idx]<prev_col_zero[idx])
                                                  {
                                                                                          update(col_one_bit,1,1,q);
                                                                                          update(col_one_bit,-1,i+1,q);
                                                                                          update(col_zero_bit,-1,1,q);
                                                                                          update(col_zero_bit,1,prev_col_zero[idx]+1,q);
                                                  }
                                                  else
                                                  {
                                                      update(col_one_bit,1,prev_col_one[idx]+1,q);
                                                      update(col_one_bit,-1,i+1,q);
                                                  }
                                                  
                                                  prev_col_one[idx]=i;
                                     }
                                 }
                    }
                    else
                    {
                        scanf("%d",&idx);
                        
                        if(s[0]=='R')
                        {
                                     if(prev_row_one[idx]>prev_row_zero[idx])
                                     {
                                                                             int val=query(col_zero_bit,prev_row_one[idx]+1,q);
                                                                             printf("%d\n",val);
                                     }
                                     else
                                     {
                                         int val=query(col_one_bit,prev_row_zero[idx]+1,q);
                                         printf("%d\n",n-val);
                                     }
                        }
                        else
                        {
                            if(prev_col_one[idx]>prev_col_zero[idx])
                            {
                                                                    int val=query(row_zero_bit,prev_col_one[idx]+1,q);
                                                                    printf("%d\n",val);
                            }
                            else
                            {
                                int val=query(row_one_bit,prev_col_zero[idx]+1,q);
                                printf("%d\n",n-val);
                            }
                        }
                    }
    }
                                                                             
                                 
    
    return 0;
}
