#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <string>
#define PQ priority_queue
#define OO 2147483647
#define Max(a, b) ((FASTBUFFER = ((a) - (b)) >> 31), ((b) & FASTBUFFER | (a) & ~FASTBUFFER))
#define Min(a, b) ((FASTBUFFER = ((a) - (b)) >> 31), ((a) & FASTBUFFER | (b) & ~FASTBUFFER))
#define Swap(a, b) (a ^= b, b ^= a, a ^= b)
#define left LEFT
#define right RIGHT

int FASTBUFFER;

using namespace std;

const int N = 500005;

struct SegMentTree {
	
	int left[N << 2], right[N << 2], s[2][N << 2];
		
	void make(int l, int r, int i) {
		int mid = (l + r) >> 1;
		left[i] = l, right[i] = r;
		s[0][i] = s[1][i] = 0;
		if (l == r) {
			return;
		}
		
		make(l, mid, (i << 1));
		make(mid + 1, r, ((i << 1) | 1));
	}

	void work(int l, int r, int i, int x, int type, int &v) {
		if (l > right[i] || r < left[i]) {
			return;
		}
		
		if (l <= left[i] && r >= right[i]) {
			if (type == 1) {
				s[x][i] += v;
			} else {
				v += s[x][i];
			}
			
			return;
		}
		
		int lc = (i << 1), rc = (lc | 1);
		work(l, r, lc, x, type, v);
		work(l, r, rc, x, type, v);
		s[0][i] = s[0][lc] + s[0][rc];
		s[1][i] = s[1][lc] + s[1][rc];
	}
} row, col;

int n, q;
char type[16];
int ii[N], xx[N], lastRow[N], lastCol[N];

int main() {
	scanf("%d %d", &n, &q);
	row.make(1, q, 1);
	col.make(1, q, 1);
	for (int tt = 1; tt <= q; tt++) {
		int i, x;
		scanf("%s", type);
		scanf("%d %d", &i, &x);
		ii[tt] = i, xx[tt] = x;
		if (type[0] == 'R') {
			if (type[3] == 'S') {
				int l = lastRow[i];
				if (l != 0) {
					int v = -1;
					row.work(l, l, 1, xx[l], 1, v);
				}
				
				lastRow[i] = tt;
				int v = 1;
				row.work(tt, tt, 1, x, 1, v);
			} else {
				int ans = 0, l = lastRow[i];
				if (l == 0 || xx[l] == 0) {
					col.work(l + 1, tt, 1, 1, 2, ans);
					ans = n - ans;
				} else {
					col.work(l + 1, tt, 1, 0, 2, ans);
				}
				
				printf("%d\n", ans);
			}
		} else {
			if (type[3] == 'S') {
				int l = lastCol[i];
				if (l != 0) {
					int v = -1;
					col.work(l, l, 1, xx[l], 1, v);
				}
				
				lastCol[i] = tt;
				int v = 1;
				col.work(tt, tt, 1, x, 1, v);
			} else {
				int ans = 0, l = lastCol[i];
				if (l == 0 || xx[l] == 0) {
					row.work(l + 1, tt, 1, 1, 2, ans);
					ans = n - ans;
				} else {
					row.work(l + 1, tt, 1, 0, 2, ans);
				}
				
				printf("%d\n", ans);
			}
		}
	}
	
	return 0;
}

