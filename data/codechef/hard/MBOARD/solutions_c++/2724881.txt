#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<queue>
#include<deque>
#include<map>
#include<cstdlib>
#include<cmath>
#include<utility>
#include<cstring>
using namespace std;

#define ff first
#define ss second
#define ll long long
#define PI pair<int,int>
#define mp make_pair
int bit_row0[1<<20],bit_row1[1<<20],bit_col0[1<<20],bit_col1[1<<20],n,MAX;
PI rowStatus[500005],colStatus[500005];
/**First - Query Number
    Second - What is it set to
**/
void init()
{
    memset(rowStatus,0,sizeof(rowStatus));
    memset(colStatus,0,sizeof(colStatus));
}

int query(int *bit,int ind)
{
    int sum=0;
    while(ind>0)
    {
        sum+=bit[ind];
        ind-=(ind&-ind);
    }
    return sum;
}

void update(int *bit,int ind,int val)
{
    /**Put this condition else infinite loop**/
    if(ind==0)
        return;
    while(ind<=MAX)
    {
        bit[ind]+=val;
        ind+=(ind&-ind);
    }
}

int rowquery(int row)
{
    if(rowStatus[row].ss)
        return (query(bit_col0,MAX)-query(bit_col0,rowStatus[row].ff));
    else
        return (n-query(bit_col1,MAX)+query(bit_col1,rowStatus[row].ff));
}

int colquery(int col)
{
    if(colStatus[col].ss)
        return (query(bit_row0,MAX)-query(bit_row0,colStatus[col].ff));
    else
        return (n-query(bit_row1,MAX)+query(bit_row1,colStatus[col].ff));

}

void rowset(int qno,int row,int type)
{
    if(rowStatus[row].ss)
        update(bit_row1,rowStatus[row].ff,-1);
    else
        update(bit_row0,rowStatus[row].ff,-1);

    if(type)
        update(bit_row1,qno,1);
    else
        update(bit_row0,qno,1);
    rowStatus[row]=mp(qno,type);
}

void colset(int qno,int col,int type)
{
    ///cout<<"colset"<<endl;
    if(colStatus[col].ss)
        update(bit_col1,colStatus[col].ff,-1);
    else
        update(bit_col0,colStatus[col].ff,-1);

    if(type)
        update(bit_col1,qno,1);
    else
        update(bit_col0,qno,1);
    colStatus[col]=mp(qno,type);
}

int main()
{
    int q,col,type,row,i;
    char str[20];
    init();
    scanf("%d %d",&n,&q);

    MAX=( 1 << (int)(log(q)/log(2)) );
    if(q>MAX)
        MAX*=2;
    for(i=1;i<=q;i++)
    {
        scanf("%s",str);
        if(str[0]=='R')
        {
            if(str[3]=='Q')
            {
                scanf("%d",&row);
                printf("%d\n",rowquery(row));
            }
            else
            {
                scanf("%d %d",&row,&type);
                rowset(i,row,type);
            }
        }
        else
        {
            if(str[3]=='Q')
            {
                scanf("%d",&col);
                printf("%d\n",colquery(col));
            }
            else
            {
                scanf("%d %d",&col,&type);
                colset(i,col,type);
            }
        }
        scanf("\n");
    }
    return 0;
}
