// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vs;
typedef pair< int ,int > pii;
typedef vector <ll> vll;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define S 1024*1024*4
char IN[S],OUT[S],*iptr,*optr,stk[20];

struct fastIO
{
	fastIO()
	{
		fread(IN,1,S,stdin);
		iptr=IN;
		optr=OUT;
	}
	void check()
	{
		int size=IN+S-iptr;
		if(size<200)
		{
			memcpy(IN,iptr,size);
			fread(IN+size,1,S-size,stdin);
			iptr=IN;
		}
	}
	void check2()
	{
		int size=OUT+S-optr;
		if(size<200)
		{
			fwrite(OUT,optr-OUT,1,stdout);
			optr=OUT;
		}
	}
	
	int sc()
	{
		check();
		while(*iptr<=32) iptr++;
		int x=0;
		while(*iptr>32) x= x*10 + *iptr++ -'0';
		return x;
	}
	
	void ssc(char *s) {
		check();
		while(*iptr<=32) iptr++;
		int i=0;
		while(*iptr>32) *(s+i) = *iptr++, i++;
		*(s+i) = '\0';
	}
	
	void pr(int x)
	{
		check2();
		if(x==0)
			*optr++='0';
		else
		{
			int y;
			int top=-1;
			while(x>0)
			{
				y=x/10;
				stk[++top]=x-y*10+'0';
				x=y;
			}
			while(top>=0) *optr++=stk[top--];
		}
		*optr++='\n';
	}
};

#define N 5*100010

int q;
int bit_r_0[N],bit_r_1[N],bit_c_0[N],bit_c_1[N];
int seen_r_0[N],seen_r_1[N],seen_c_0[N],seen_c_1[N];
int lastr[N],lastc[N];

void update(int *BIT,int i,int v) {
	while( i <= q ) {
		BIT[i] += v;
		i += (i & -i);
	}
}

int query(int *BIT,int i) {
	int ret = 0;
	while(i>0) {
		ret += BIT[i];
		i -= (i & -i);
	}
	return ret;
}

int main() {
	fastIO io;
	
	int n,no,i,j,k;
	char *ss = new char(30); string s;
	// scanf("%d%d",&n,&q);
	n = io.sc(); q = io.sc();
	
	for(int k=1; k<=q; k++) {
		io.ssc(ss);
		// scanf("%s",S);
		s = string(ss);
		if(s == "RowSet") {
			// scanf("%d%d",&no,&i);
			no = io.sc(); i = io.sc();
			
			lastr[no] = i;
			
			if(i == 0) {
				//contribute to 0
				if(seen_r_0[no]) update(bit_r_0,seen_r_0[no],-1);
				update(bit_r_0,k,1);
				seen_r_0[no] = k;
				//lower 1
				if(seen_r_1[no]) update(bit_r_1,seen_r_1[no],-1);
				seen_r_1[no] = 0;
				
			}
			else {
				//contribute to 1
				if(seen_r_1[no]) update(bit_r_1,seen_r_1[no],-1);
				update(bit_r_1,k,1);
				seen_r_1[no] = k;
				//lower 0
				if(seen_r_0[no]) update(bit_r_0,seen_r_0[no],-1);
				seen_r_0[no] = 0;
			}
		}
		if(s == "ColSet") {
			// scanf("%d%d",&no,&i);
			no = io.sc(); i = io.sc();
			
			lastc[no] = i;
			
			if(i == 0) {
				//contribute to 0
				if(seen_c_0[no]) update(bit_c_0,seen_c_0[no],-1);
				update(bit_c_0,k,1);
				seen_c_0[no] = k;
				//lower 1
				if(seen_c_1[no]) update(bit_c_1,seen_c_1[no],-1);
				seen_c_1[no] = 0;
			}
			else {
				//contribute to 1
				if(seen_c_1[no]) update(bit_c_1,seen_c_1[no],-1);
				update(bit_c_1,k,1);
				seen_c_1[no] = k;
				//lower 0
				if(seen_c_0[no]) update(bit_c_0,seen_c_0[no],-1);
				seen_c_0[no] = 0;
			}
		}
		if(s == "RowQuery") {
			// scanf("%d",&no);
			no = io.sc();
			
			if(lastr[no]==0) {
				//it was reset
				j = seen_r_0[no];
				j = query(bit_c_1,k) - query(bit_c_1,j);
				// printf("%d\n",n-j);
				io.pr(n-j);
			}
			else {
				//it was set
				j = seen_r_1[no];
				j = query(bit_c_0,k) - query(bit_c_0,j);
				// printf("%d\n",j);
				io.pr(j);
			}
		}
		if(s == "ColQuery") {
			// scanf("%d",&no);
			no = io.sc();
			
			if(lastc[no]== 0) {
				//it was reset
				j = seen_c_0[no];
				j = query(bit_r_1,k) - query(bit_r_1,j);
				// printf("%d\n",n-j);
				io.pr(n-j);
			}
			else {
				//it was set
				j = seen_c_1[no];
				j = query(bit_r_0,k) - query(bit_r_0,j);
				// printf("%d\n",j);
				io.pr(j);
			}
		}
	}
	fwrite(OUT,optr-OUT,1,stdout);
	return 0;
}