#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <string>
#include <cctype>
#include <vector>
#include <cstdio>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
const int N = 500005, MAXM = 1048576;
char str[100];
int n, m;
struct BIT{
	int M, t[MAXM];
    void init(){
		for(M=1;M<=m;M<<=1);
		memset(t, 0, sizeof t);
    }
    void set(int x, int v){
		t[x+=M] = v;
		for(x>>=1;x;x>>=1)
			t[x] = t[x<<1] + t[x<<1|1];
    }
    int query(int l, int r){
		int ans = 0;
		for(l+=M-1, r+=M+1;l^r^1;l>>=1, r>>=1){
			if(~l&1) ans += t[l^1];
			if( r&1) ans += t[r^1];
		}
		return ans;
    }
};
int op[N];
struct RC{
    int p[N];
    BIT s[2];
	void init(){
		s[0].init();
		s[1].init();
		memset(p, 0, sizeof p);
	}
	void query(int x, int ed){
		int ans, pre = p[x];
		if(op[pre]) ans = s[0].query(pre, ed);
		else ans = n - s[1].query(pre, ed);
		printf("%d\n", ans);
	}
	void update(int pre, int ed){
		if(pre) s[op[pre]].set(pre, 0);
		s[op[ed]].set(ed, 1);
	}
}R, C;

void query(int ed){
	int x;
	scanf("%d", &x);
	if(str[0] == 'R') R.query(x, ed);
	else C.query(x, ed);
}
void chg(int ed){
	int x, y;
	scanf("%d%d", &x, &y);
	op[ed] = y;

	if(str[0] == 'R'){
		int pre = R.p[x];
        C.update(pre, ed);
        R.p[x] = ed;
	}
	else{
		int pre = C.p[x];
		R.update(pre, ed);
		C.p[x] = ed;
	}
}
int main(){
	while(~scanf("%d%d", &n, &m)){
		R.init();
		C.init();

        for(int i=1;i<=m;i++){
			scanf("%s", str);
			if(str[3] == 'Q') query(i);
			else chg(i);
        }
	}
	return 0;
}

