#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <bitset>

typedef long long LL;
#define pb push_back
#define MPII make_pair<int, int>
#define PII pair<int, int>
#define sz(x) (int)x.size()

using namespace std;

template<class T> T abs(T x){if (x < 0) return -x; else return x;}

const int maxn = 555555;
int preCol[maxn], preRow[maxn];
int col0[maxn], col1[maxn], row0[maxn], row1[maxn];
int c[maxn];
char buf[20];
int n, Q, N;

int lowbit(int u){return u & -u;}

int query(int bit[], int now){
	int sum = 0;
	while (now){
		sum += bit[now];
		now -= lowbit(now);
	}
	return sum;
}

void insert(int bit[], int now, int key){
	while (now <= N){
		bit[now] += key;
		now += lowbit(now);
	}
}

int main(){
	scanf("%d%d", &n, &Q);
	N = Q;
	for (int i = 1; i <= Q; ++i){
		scanf("%s", buf);
		if (buf[0] == 'R'){
			if (buf[3] == 'Q'){
				int x;
				scanf("%d", &x);
				int sum = 0;
				if (preRow[x] == 0 || c[preRow[x]] == 0){
					sum = n - (query(col1, i) - query(col1, max(preRow[x] - 1, 0)));
				} else {
					sum = query(col0, i) - query(col0, preRow[x] - 1);
				}
				printf("%d\n", sum);
			} else {
				int x, y;
				scanf("%d%d", &x, &y);
				c[i] = y;
				if (preRow[x] != 0){
					if (c[preRow[x]] == 0){
						insert(row0, preRow[x], -1);
					} else {
						insert(row1, preRow[x], -1);
					}
				}
				preRow[x] = i;
				if (y == 0) insert(row0, i, 1); else insert(row1, i, 1);
			}
		} else {
			if (buf[3] == 'Q'){
				int x;
				scanf("%d", &x);
				int sum = 0;
				if (preCol[x] == 0 || c[preCol[x]] == 0){
					sum = n - (query(row1, i) - query(row1, max(preCol[x] - 1, 0)));
				} else {
					sum = query(row0, i) - query(row0, preCol[x] - 1);
				}
				printf("%d\n", sum);
			} else {
				int x, y;
				scanf("%d%d", &x, &y);
				c[i] = y;
				if (preCol[x] != 0){
					if (c[preCol[x]] == 0){
						insert(col0, preCol[x], -1);
					} else {
						insert(col1, preCol[x], -1);
					}
				}
				preCol[x] = i;
				if (y == 0) insert(col0, i, 1); else insert(col1, i, 1);
			}
		}
	}
	return 0;
}

