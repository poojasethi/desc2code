#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<deque>
#include<map>
#include<set>
#include<utility>
using namespace std;

#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define pob pop_back
#define ll long long
#define MAX_SIZE 200005
#define MOD 1000000007
#define S(x) scanf("%d",&x)
#define SL(x) cin>>x
#define SC(x) scanf("%c",&x)
#define SS(x) scanf("%s",x)
#define SZ(x) x.size()
#define IT iterator
#define PI pair<int,int>
#define PL pair<ll,ll>
#define VI vector<int>
#define VL vector<ll>
#define VVI vector< VI >
#define VVL vector< VL >
#define VVP vector< PI >
#define READ() freopen("/Users/home/Desktop/input.txt","r",stdin)
#define WRITE() freopen("/Users/home/Desktop/output.txt","w",stdout)
#define dump() SC(dump_char)
int dump_char;

int r1[1<<20],r0[1<<20];
int c1[1<<20],c0[1<<20];
int MAX;

void update(int *bit,int idx,int val)
{
    if(idx==0)
    {
        //printf("hello\n");
        return;
    }
    while(idx<=MAX)
    {
        bit[idx]+=val;
        idx+=idx & -idx;
    }
}

int query(int *bit,int idx)
{
    int sum=0;
    while(idx>0)
    {
        sum+=bit[idx];
        idx-=idx & -idx;
    }
    return sum;
}

PI rstatus[500005],clstatus[500005];

void init()
{
    memset(r0,0,sizeof(r0));
    memset(r1,0,sizeof(r1));
    memset(c0,0,sizeof(c0));
    memset(c1,0,sizeof(c1));
    memset(rstatus,0,sizeof(rstatus));
    memset(clstatus,0,sizeof(clstatus));
}

int main()
{
    int n,q,i,idx,val;
    char str[30];
    
    init();
    //READ();
    scanf("%d %d\n",&n,&q);
    
    MAX=( 1 << (int)(log(q)/log(2)) );
    if(q>MAX)
        MAX*=2;
    
    //printf("%d %d\n",n,q);
    for(i=1;i<=q;i++)
    {
        scanf("%s",str);
        //printf("(%s)\n",str);
        if(strcmp(str,"RowQuery")==0)
        {
            scanf(" %d\n",&idx);
            //printf("1 %d\n",idx);
            if(rstatus[idx].ff==1)
            {
                printf("%d\n",query(c0,MAX)-query(c0,rstatus[idx].ss));
            }
            else
            {
                printf("%d\n",n-(query(c1,MAX)-query(c1,rstatus[idx].ss)));
            }
        }
        else if(strcmp(str,"ColQuery")==0)
        {
            scanf(" %d\n",&idx);
            //printf("->2 %d\n",idx);
            //printf("%d,%d ",clstatus[idx].ff,clstatus[idx].ss);
            if(clstatus[idx].ff==1)
            {
                printf("%d\n",query(r0,MAX)-query(r0,clstatus[idx].ss));
            }
            else
            {
                printf("%d\n",n-(query(r1,MAX)-query(r1,clstatus[idx].ss)));
            }
        }
        else if(strcmp(str,"RowSet")==0)
        {
            scanf(" %d %d\n",&idx,&val);
            //printf("->3 %d %d\n",idx,val);
            if(rstatus[idx].ff)
            {
                update(r1,rstatus[idx].ss,-1);
            }
            else
            {
                //printf("row unset\n");
                update(r0,rstatus[idx].ss,-1);
            }
            
            if(val)
            {
                update(r1,i,1);
            }
            else
            {
                //printf("row set ");
                update(r0,i,1);
                //printf("%d\n",query(r0,MAX));
            }
            rstatus[idx]=mp(val,i);
        }
        else
        {
            scanf(" %d %d\n",&idx,&val);
            //printf("4 %d %d\n",idx,val);
            if(clstatus[idx].ff)
            {
                update(c1,clstatus[idx].ss,-1);
            }
            else
            {
                update(c0,clstatus[idx].ss,-1);
            }
            
            if(val)
            {
                update(c1,i,1);
            }
            else
            {
                update(c0,i,1);
            }
            clstatus[idx]=mp(val,i);
        }
    }
    return 0;
}