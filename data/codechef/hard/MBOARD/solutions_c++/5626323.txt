#include<iostream>
#include<stdio.h>
#include<string.h>
using namespace std;


int colts[2][500010],rowts[2][500009],treec[2][500009],treer[2][500009];
//initialize to zero

int Maxval; //Storing number of queries

void updaterowt(int x,int idx,int val)
{
    while(idx>0&&idx<=Maxval)
    {
        treer[x][idx]+=val;
        idx+=(idx&(-idx));
    }
}
void updatecolt(int x,int idx,int val)
{
    while(idx>0&&idx<=Maxval)
    {
        treec[x][idx]+=val;
        idx+=(idx&(-idx));
    }
}

long int readr(int x,int idx)
{
    long  int sum=0;
    while(idx>0)
    {
        sum+=treer[x][idx];
        idx-=(idx&(-idx));
    }
    return sum;
}
long int readc(int x,int idx)
{
    long  int sum=0;
    while(idx>0)
    {
        sum+=treec[x][idx];
        idx-=(idx&(-idx));
    }
    return sum;
}


int main()
{
    int n,q,count;
    scanf("%d",&n);
    scanf("%d",&q);
    Maxval=q;
    int r,x,c;
    char s[10];
    /*for(int time=1;time<=q;time++)
    {
        scanf("%s",qu);

        if(!strcmp(qu,"RowQuery"))
        {
            scanf("%d",&r);
            if(rowts[0][r]>=rowts[1][r])
            {
                cnt=readc(1,time)-readc(1,rowts[0][r]);
                printf("%ld\n",(n-cnt));
            }
            else
            {
                cnt=readc(0,time)-readc(0,rowts[1][r]);
                printf("%ld\n",cnt);
            }
        }
        else if(!strcmp(qu,"ColQuery"))
        {
            scanf("%d",&c);
            if(colts[0][c]>=colts[1][c])
            {
                cnt=readr(1,time)-readr(1,colts[0][c]);
                printf("%ld\n",(n-cnt));
            }
            else
            {
                cnt=readr(0,time)-readr(0,colts[1][c]);
                printf("%ld\n",cnt);
            }


        }
        else if(!strcmp(qu,"RowSet"))
        {
            scanf("%d",&r);
            scanf("%d",&x);
            if(rowts[0][r]||rowts[1][r])
            {
                if(rowts[0][r]>rowts[1][r])
                    updaterowt(0,rowts[0][r],-1);
                else
                    updaterowt(1,rowts[1][r],-1);
            }

            rowts[x][r]=time;
            updaterowt(x,time,1);
        }
        else if(!strcmp(qu,"ColSet"))
        {
            scanf("%d",&c);
            scanf("%d",&x);
            if(colts[0][c]||colts[1][c])
            {
                if(colts[0][c]>colts[1][c])
                    updatecolt(0,colts[0][c],-1);
                else
                    updatecolt(1,colts[1][c],-1);
            }

            colts[x][r]=time;
            updatecolt(x,time,1);
        }
    }*/
     for(int tim=1;tim<=q;tim++)
     {
        scanf("%s",s);
        if(!strcmp(s,"RowSet"))
        {
            scanf("%d%d",&r,&x);
            if(rowts[0][r]||rowts[1][r])
            if(rowts[0][r]>rowts[1][r]) updaterowt(0,rowts[0][r],-1);
            else updaterowt(1,rowts[1][r],-1);
            rowts[x][r]=tim;
            updaterowt(x,tim,1);
        }
        else if(!strcmp(s,"ColSet"))
        {
            scanf("%d%d",&c,&x);
            if(colts[0][c]||colts[1][c])
                if(colts[0][c]>colts[1][c])
                    updatecolt(0,colts[0][c],-1);
                else
                    updatecolt(1,colts[1][c],-1);
            colts[x][c]=tim;
            updatecolt(x,tim,1);
        }
        else if(!strcmp(s,"RowQuery"))
        {
            scanf("%d",&r);
            if(rowts[0][r]>=rowts[1][r])
            {
                count=readc(1,tim)-readc(1,rowts[0][r]);
                printf("%d\n",(n-count));
            }
            else
            {
                count=readc(0,tim)-readc(0,rowts[1][r]);
                printf("%d\n",count);
            }
        }
        else
        {
            scanf("%d",&c);
            if(colts[0][c]>=colts[1][c])
            {
                count=readr(1,tim)-readr(1,colts[0][c]);
                printf("%d\n",(n-count));
            }
            else
            {
                count=readr(0,tim)-readr(0,colts[1][c]);
                printf("%d\n",count);
            }
        }
    }
}
