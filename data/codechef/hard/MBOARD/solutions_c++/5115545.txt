#include<cstdio>
#include<cstring>
using namespace std;
const int MAXN=500005;
inline int lowbit(int x) {
    return x&-x;
}
int cntr[2][MAXN],cntc[2][MAXN],q;
void add(int bit[],int x,int val) {
    ++x;
    for(int i=x; i<=q+1; i+=lowbit(i))
        bit[i]+=val;
}
int sum(int bit[],int x) {
    ++x;
    int ret=0;
    for(int i=x; i>0; i-=lowbit(i))
        ret+=bit[i];
    return ret;
}
struct data {
    int sta,tim;
    data(int _sta=0,int _tim=0):sta(_sta),tim(_tim) {}
} row[MAXN],col[MAXN];
int main() {
    int n,k,x;
    char op[10];
    while(~scanf("%d%d",&n,&q)) {
        memset(cntr,0,sizeof(cntr));
        memset(cntc,0,sizeof(cntc));
        for(int i=1; i<=q; ++i) {
            scanf("%s%d",op,&k);
            switch(op[3]) {
            case 'S':
                scanf("%d",&x);
                switch(op[0]) {
                case 'R':
                    add(cntr[row[k].sta],row[k].tim,-1);
                    add(cntr[x],i,1);
                    row[k]=data(x,i);
                    break;
                case 'C':
                    add(cntc[col[k].sta],col[k].tim,-1);
                    add(cntc[x],i,1);
                    col[k]=data(x,i);
                    break;
                }
                break;
            case 'Q':
                switch(op[0]) {
                case 'R':
                    printf("%d\n",row[k].sta?sum(cntc[0],q)-sum(cntc[0],row[k].tim):n-sum(cntc[1],q)+sum(cntc[1],row[k].tim));
                    break;
                case 'C':
                    printf("%d\n",col[k].sta?sum(cntr[0],q)-sum(cntr[0],col[k].tim):n-sum(cntr[1],q)+sum(cntr[1],col[k].tim));
                    break;
                }
                break;
            }
        }
    }
}
