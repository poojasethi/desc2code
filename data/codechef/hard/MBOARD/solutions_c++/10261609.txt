#include<bits/stdc++.h>
using namespace std;
#include<stdio.h>
#ifndef ONLINE_JUDGE
#define get getchar
#else
#define get getchar_unlocked
#endif
inline int f()
{
	int n=0,s=1;
	char p=get();
	if(p=='-')
		s=-1;
	while((p<'0' || p>'9') && p!=EOF && p!='-')
		p=get();
	if(p=='-')
		s=-1,p=get();
	while(p>='0' && p<='9' )
	{
		n=(n<<3)+(n<<1)+(p-'0');
		p=get();
	}
	return (n*s);
}
#define INF 500000
const int xx=500005;
int rs0[xx],rs1[xx],cs0[xx],cs1[xx],rs0ts[xx],rs1ts[xx],cs0ts[xx],cs1ts[xx];
inline void update(int bit[xx],int idx,int val){
	while(idx <= INF){
		bit[idx]+=val;
		idx += idx & -idx;
	}
//	cout<<"in\n";
	return;
}
inline int query(int bit[xx],int idx){
	int res = 0;
	while(idx){
		res += bit[idx];
		idx -= idx & -idx;
	}
	return res;
}
int main()
{
 
	int i,j,k,n,m,q,T0,ones,zeros;
	n=f();
	q=f();
	j=0;

	for (int times=1;times<=q;++times){
		char op[10];
		scanf("%s",op);
		int x,y,res=0;
		if (!strcmp(op,"RowQuery"))
			{
			//scanf("%d",&x);
			x=f();
				if (rs0ts[x] >= rs1ts[x])
				 {
				    T0 = rs0ts[x];
				    ones = query(cs1,INF) - query(cs1,T0);
				    //cout<<n-ones<<endl;
				    printf("%d\n",n-ones);
				 }
				else 
				 {
				    T0 = rs1ts[x];
				    zeros = query(cs0,INF) - query(cs0,T0);
				    //cout<<zeros<<endl;
				     printf("%d\n",zeros);
				 }
	    	}
		else if (!strcmp(op,"ColQuery"))
		   {
			//scanf("%d",&x);
				x=f();
				if (cs0ts[x] >= cs1ts[x])
				 {
				    T0 = cs0ts[x];
				    
				    //if(T0<= 2*n)
				    //ones = query(rs1,INF) - query(rs1,2*n);
				    //else
				    ones = query(rs1,INF) - query(rs1,T0);
				    //cout<<n-ones<<endl;
				    printf("%d\n",n-ones);
				 }
				else 
				 {
				    T0 = cs1ts[x];
				    zeros = query(rs0,INF) - query(rs0,T0);
				    //cout<<zeros<<endl;
				    printf("%d\n",zeros);
				 }
	    	}
	    	
		else if (!strcmp(op,"RowSet"))
			{
		//scanf("%d%d",&x,&y);
			x=f();
			y=f();
			if(y==0)
			{   
			    if(rs0ts[x]!=0 || rs1ts[x]!=0)
				if(rs0ts[x]>rs1ts[x])
				update(rs0,rs0ts[x],-1);
				else
				update(rs1,rs1ts[x],-1);
				
				update(rs0,times,1);
				rs0ts[x]=times;
			}
			else
			{
			   if(rs0ts[x]!=0 || rs1ts[x]!=0)
			   if(rs1ts[x]>rs0ts[x])
				update(rs1,rs1ts[x],-1);
				else
				update(rs0,rs0ts[x],-1);
				
				update(rs1,times,1);
				rs1ts[x]=times;
			}
	
	}
		else if (!strcmp(op,"ColSet"))
		{
		//scanf("%d%d",&x,&y);
		x=f();
		y=f();
		//cout<<x<<" "<<y<<endl;
			if(y==0)
			{
				if(cs0ts[x]!=0 || cs1ts[x]!=0)
				if(cs0ts[x]>cs1ts[x])
				update(cs0,cs0ts[x],-1);
				else
				update(cs1,cs1ts[x],-1);
				
				update(cs0,times,1);
				cs0ts[x]=times;
			}
			else
			{
			   if(cs0ts[x]!=0 || cs1ts[x]!=0)
			   if(cs1ts[x]>cs0ts[x])
				  update(cs1,cs1ts[x],-1);
			   else
				  update(cs0,cs0ts[x],-1);
			
			 
				update(cs1,times,1);
				cs1ts[x]=times;
			}
	}
	}
	return 0;
}