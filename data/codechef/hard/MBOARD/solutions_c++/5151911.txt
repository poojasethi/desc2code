#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
#define lson a, rt<<1, l, mid
#define rson a, rt<<1|1, mid+1, r
const int MAXN = 500005;
int O[2][MAXN<<2] = {0}, I[2][MAXN<<2] = {0};
int ord[2][MAXN];
int pre[2][MAXN];
int n, m;

void Up(int a[], int rt) {
    a[rt] = a[rt<<1] + a[rt<<1|1];
}
int query(int a[], int rt, int l, int r, int L, int R) {
    if (l >= L && r <= R) {
        return a[rt];
    }
    int mid = r + l >> 1, ret = 0;
    if (mid >= L) ret += query(lson, L, R);
    if (R > mid) ret += query(rson, L, R);
    return ret;
}
void update(int a[], int rt, int l, int r, int p, int c) {
    if (l == r) {
        a[rt] = c;
        return ;
    }
    int mid = r + l >> 1;
    if (mid >= p) update(lson, p, c);
    else update(rson, p, c);
    Up(a, rt);
    return ;
}
void init() {
    for (int i = 1; i <= n; i++) pre[0][i] = pre[1][i] = 0;
    for (int i = 1; i <= n; i++) ord[0][i] = ord[1][i] = 0;
}

int main() {
    scanf("%d%d", &n, &m);
    init();
    for (int q = 1; q <= m; q ++) {
        char op[11];
        int d, x, y, ret;
        scanf("%s", op);
        d = (op[0] == 'R');
        if (op[3] == 'Q') {
            scanf("%d", &x);
            if (ord[d][x] == 1) {
                ret = query(O[d^1], 1, 1, m, pre[d][x]+1, q);
            }else {
                ret = n - query(I[d^1], 1, 1, m, pre[d][x]+1, q);
            }
            printf("%d\n", ret);
        }else {
            scanf("%d%d", &x, &y);
            update(y == 1 ? I[d] : O[d], 1, 1, m, q, 1);
            if (ord[d][x] == 0) {
                if (pre[d][x] >= 1)update(O[d], 1, 1, m, pre[d][x], 0);
            }else {
                if (pre[d][x] >= 1)update(I[d], 1, 1, m, pre[d][x], 0);
            }
            ord[d][x] = y; pre[d][x] = q;
        }
    }
    return 0;
}

