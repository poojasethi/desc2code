#include<stdio.h>
#include<string>
using namespace std;

int rowset0[500005],rowset1[500005];
int colset0[500005],colset1[500005];
inline void deleteValue(int tree[],int size,int val,int idx)
{
	if(idx==0)
	return;
	while(idx<=size)
	{
		tree[idx]-=val;
		idx +=(idx&-idx); 
	}
}
inline void addvalue(int tree[],int size,int val,int idx)
{
	while(idx<=size)
	{
		tree[idx]+=val;
		idx +=(idx&-idx); 
	}
}
inline int query(int tree[],int size,int idx)
{
	int sum=0;
	while(idx>0)
	{
		sum+=tree[idx];
		idx-=(idx&-idx);
	}
	return sum;
}
int main()
{
	int n,test;
	scanf("%d %d",&n,&test);
	
	int row[n][2],col[n][2];
	for(int i=0;i<=n;i++)
	{
		row[i][0]=0;
		row[i][1]=0;
		col[i][0]=0;
		col[i][1]=0;
	}
	char ask[10];
	for(int i=1;i<=test;i++)
	{
		scanf("%s",ask);
		if(ask[0]=='R')
		{
			if(ask[3]=='S')
			{
				int r,set;
				scanf("%d%d",&r,&set);
				int oldtime = row[r][1];
				int oldset = row[r][0];
				row[r][0] = set;
				row[r][1] = i;
				if(oldset==1)
				{
					deleteValue(rowset1,test,1,oldtime);
				}
				else
				{
					deleteValue(rowset0,test,1,oldtime);
				}
				if(set==1)
				{
					addvalue(rowset1,test,1,i);
				}
				else
				{
					addvalue(rowset0,test,1,i);
				}
			}
			else
			{
				int r;
				scanf("%d",&r);
				int time = row[r][1];
				int set = row[r][0];
				if(set==1)
				{
					int right = query(colset0,test,test);
					int left = query(colset0,test,time);
					printf("%d\n",(right-left));
				}
				else
				{
					int right = query(colset1,test,test);
					int left = query(colset1,test,time);
					printf("%d\n",n-(right-left));
				}
			}
		}
		else
		{
			if(ask[3]=='S')
			{
				int c,set;
				scanf("%d%d",&c,&set);
				int oldtime = col[c][1];
				int oldset = col[c][0];
				col[c][0] = set;
				col[c][1] = i;
				if(oldset==1)
				{
					deleteValue(colset1,test,1,oldtime);
				}
				else
				{
					deleteValue(colset0,test,1,oldtime);
				}
				if(set==1)
				{
					addvalue(colset1,test,1,i);
				}
				else
				{
					addvalue(colset0,test,1,i);
				}
			}
			else
			{
				int c;
				scanf("%d",&c);
				int time = col[c][1];
				int set = col[c][0];
				if(set==1)
				{
					int right = query(rowset0,test,test);
					int left = query(rowset0,test,time);
					printf("%d\n",(right-left));
				}
				else
				{
					int right = query(rowset1,test,test);
					int left = query(rowset1,test,time);
					printf("%d\n",n-(right-left));
				}
			}
		}
	}
}