#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#define lowbit(x) ((x)&(-(x)))
typedef long long LL;
using namespace std;
const int INF = 1000000000;
const int N = 500005;
int n, m;
int f[2][2][N];
int last[2][N][2];
int get(int a[], int x) {
	int ans = 0;
	while (x) {
		ans += a[x];
		x -= lowbit(x);
	}
	return ans;
}
void add(int a[], int x, int v) {
	while (x <= m + 1) {
		a[x] += v;
		x += lowbit(x);
	}
}
int ask(int row, int x) {
	//printf("row %d %d %d\n", !row, !last[row][x][1], last[row][x][0]);
	int ans = get(f[!row][!last[row][x][1]], m - last[row][x][0]);
	if (last[row][x][1]) {
		return ans;
	}
	return n - ans;
}
void paint(int row, int x, int c, int t) {
	if (last[row][x][0] != -1) {
		add(f[row][last[row][x][1]], m - last[row][x][0], -1);
	}
	//printf("%d %d %d %d\n", row, x, c, t);
	last[row][x][0] = t, last[row][x][1] = c;
	add(f[row][c], m - t, 1);
}
int main() {
	int x, y;
	scanf("%d%d", &n, &m);
	char s[20];
	for (int i = 0; i < n; i++) {
		last[0][i][0] = last[1][i][0] = -1;
	}
	for (int i = 1; i <= m; i++) {
		scanf("%s", s);
		int row, sett;
		row = (s[0] == 'R'), sett = (s[3] == 'S');
		//printf("row %d set %d\n", row, sett);
		if (sett) {
			scanf("%d%d", &x, &y);
			x--;
			paint(row, x, y, i);
		} else {
			scanf("%d", &x);
			x--;
			printf("%d\n", ask(row, x));
		}
	}
	return 0;
}
/*
3 15
RowQuery 1
ColSet 1 1
RowQuery 1
RowQuery 2
RowQuery 3
ColQuery 1
ColQuery 2
ColQuery 3
RowSet 1 0
ColQuery 1
ColQuery 2
ColQuery 3
RowQuery 1
RowQuery 2
RowQuery 3
*/
