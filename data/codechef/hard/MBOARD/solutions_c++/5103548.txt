#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

int n, q;

const int N = 500005;
pair<int, int> last[2][N];

int tr[2][2][N];

int getSum(int tr[N], int pos) {
    int ret = 0;
    while (pos) {
        ret += tr[pos];
        pos -= pos & -pos;
    }
    return ret;
}

int query(int tag, int id, int t) {
    int pos = last[tag][id].first, col = last[tag][id].second,
        cnt = getSum(tr[tag ^ 1][col ^ 1], q - pos);
    if (col == 0) {
        return n - cnt;
    } else {
        return cnt;
    }
}

void add(int tr[N], int pos, int delta) {
    while (pos <= q + 1) {
        tr[pos] += delta;
        pos += pos & -pos;
    }
}

void cover(int tag, int id, int col, int t) {
    if (last[tag][id].first != -1) {
        add(tr[tag][last[tag][id].second], q - last[tag][id].first, -1);
    }
    last[tag][id] = make_pair(t, col);
    add(tr[tag][last[tag][id].second], q - last[tag][id].first, 1);
}

int main() {
    while (scanf("%d%d", &n, &q) == 2) {
        for (int i = 0; i < n; ++i) {
            last[0][i] = last[1][i] = make_pair(-1, 0);
        }
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 2; ++j) {
                memset(tr[i][j], 0, sizeof(int) * (q + 2));
            }
        }
        char buf[10];
        for (int i = 0; i < q; ++i) {
            scanf("%s", buf);
            int tag = buf[0] == 'R', que = buf[3] == 'Q';
            if (que) {
                int id;
                scanf("%d", &id);
                --id;
                printf("%d\n", query(tag, id, i));
            } else {
                int id, col;
                scanf("%d%d", &id, &col);
                --id;
                cover(tag, id, col, i);
            }
        }
    }
    return 0;
}

