#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int MaxVal=500004;
int i,j,N,Q;
int row[500004],col[500004],row0[500004],col0[500004],row1[500004],col1[500004];
 int read(int bitree[],int idx)
{
int sum = 0;
while (idx > 0)
{
sum += bitree[idx];
idx -= (idx & -idx);
}
return sum;
 
}
 
void update(int bitree[],int idx ,int val)
{
while (idx <=MaxVal)
{
bitree[idx] += val;
idx += (idx & -idx);
}
 
}
 
int main()
{
scanf("%d%d",&N,&Q);
char ch[20];
int i,n,x,time=1;
for(i=0;i<Q;++i)
{
scanf("%s",&ch);
scanf("%d",&n);
if(ch[3]=='S')
{
scanf("%d",&x);
if(ch[0]=='R')
{
int u=row[n];
if(u>0){
update(row0,u,-1);
 }
else if(u<0){
update(row1,abs(u),-1);
}
 row[n]=(x==0)?time:(-1*time);
 if(x==0)
{
 update(row0,time,1);
}
else {
 update(row1,time,1);
}
}
else
{
int u=col[n];
if(u>0){
update(col0,u,-1);
 }
else if(u<0){
update(col1,abs(u),-1);
}
 col[n]=(x==0)?time:(-1*time);
 if(x==0)
{
 update(col0,time,1);
}
else {
update(col1,time,1);
}
}
time++;
 
}
else
{
int ans;
if(ch[0]=='R')
{
int u=row[n];
if(u>=0) {ans=N-(read(col1,time)-read(col1,u));}
else {ans=read(col0,time)-read(col0,abs(u));}
}
else
{
int u=col[n];
if(u>=0) {ans=N-(read(row1,time)-read(row1,u));}
else {ans=read(row0,time)-read(row0,abs(u));}
}
printf("%d\n",ans);
}
 
}
 
 
 
 
return 0;
}

