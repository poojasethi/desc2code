#include <stdio.h>
#include <string>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <limits.h>
#include <math.h>
#include <bitset>
#include <iomanip>
using namespace std;

#pragma comment(linker, "/STACK:102400000,102400000")

typedef long long LL;
typedef pair<int ,int > pii;

#define CLR(x,y) memset(x,y,sizeof(x));
#define PB push_back
#define MP make_pair
#define FOR(i,x,y) for(int i = (x) ; i < (y) ; ++i)
#define ROF(i,x,y) for(int i = (y)-1 ; i >= (x); --i)
#define FORG(i,x,g) for(int i = g.head[(x)] ; ~i ; i = g.next[i])
#define INF 0x3f3f3f3f

inline LL getint() {
    int c;
    while(c=getchar(),(c<'0'||c>'9')&&(c!='-')&&(c!=EOF));
    if(c==EOF)return -1;
    bool flag=(c=='-');
    if(flag)
        c=getchar();
    LL x=0;
    while(c>='0'&&c<='9') {
        x = (x<<3)+x+x+c-'0';
        c=getchar();
    }
    return flag?-x:x;
}

inline void writeln(LL x) {
    if(x<0) {
        putchar('-');
        x=-x;
    }
    int len=0,buf[20];
    while(x) {
        buf[len++]=x%10;
        x/=10;
    }
    if(!len)
        buf[len++]=0;
    while(len--)
        putchar(buf[len]+'0');
    putchar('\n');
}

inline void write(LL x) {
    if(x<0) {
        putchar('-');
        x=-x;
    }
    int len=0,buf[20];
    while(x) {
        buf[len++]=x%10;
        x/=10;
    }
    if(!len)
        buf[len++]=0;
    while(len--)
        putchar(buf[len]+'0');
}
const int N = 5e5+10;
struct bit {
    int data[N];
    void init() {
        CLR(data,0);
    }
    inline int get(int x) {
        return -x&x;
    }
    void add(int x,int y) {
        while(x < N) {
            data[x] += y;
            x += get(x);
        }
    }
    int sum(int x) {
        int res = 0;
        while(x>0) {
            res += data[x];
            x -= get(x);
        }
        return res;
    }
}R[2],C[2];
int lastR[N],lastC[N];
int staR[N],staC[N];
char word[100];
int n,m,answer;
int main() {
    scanf("%d%d",&n,&m);
    FOR(i,1,m+1) {
        scanf("%s",word);
        if(strlen(word) == 8) {
            int x;
            scanf("%d",&x);
            if(*word == 'R') {
                if(staR[x]) {
                    answer = C[0].sum(i)-C[0].sum(lastR[x]);
                }
                else {
                    answer = n-(C[1].sum(i)-C[1].sum(lastR[x]));
                }
            }
            else {
                if(staC[x]) {
                    answer = R[0].sum(i)-R[0].sum(lastC[x]);
                }
                else {
                    answer = n-(R[1].sum(i)-R[1].sum(lastC[x]));
                }
            }
            printf("%d\n",answer);
        }
        else {
            int x,y;
            scanf("%d%d",&x,&y);
            if(*word == 'R') {
                if(lastR[x]) {
                    R[staR[x]].add(lastR[x],-1);
                }
                staR[x] = y;
                lastR[x] = i;
                R[y].add(i,1);
            }
            else {
                if(lastC[x]) {
                    C[staC[x]].add(lastC[x],-1);
                }
                staC[x] = y;
                lastC[x] = i;
                C[y].add(i,1);
            }
        }
    }
}

