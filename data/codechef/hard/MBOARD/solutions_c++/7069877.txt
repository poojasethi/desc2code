#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>

using namespace std;

struct MySet
{
  int N,Total;
  int Sum[500001];
  void Init(int Size)
    {
      N=Size;
      Total=0;
      memset(Sum,0,sizeof(Sum));
    }
  void Add(int X,int Delta)
    {
      Total+=Delta;
      while(X<=N)
        {
          Sum[X]+=Delta;
          X+=X&-X;
        }
    }
  int Larger(int T)
    {
      int Ans=Total;
      while(T>0)
        {
          Ans-=Sum[T];
          T^=T&-T;
        }
      return Ans;
    }
};

int Get()
{
  char c;
  while(c=getchar(),c<'0'||c>'9');
  int X=0;
  while(c>='0'&&c<='9')
    {
      X=X*10+c-48;
      c=getchar();
    }
  return X;
}

int GetType()
{
  char c;
  while(c=getchar(),c!='R'&&c!='C');
  char d;
  while(d=getchar(),d!='S'&&d!='Q');
  while(getchar()!=' ');
  if(c=='R'&&d=='S')
    return 0;
  if(c=='R'&&d=='Q')
    return 2;
  if(c=='C'&&d=='S')
    return 1;
  if(c=='C'&&d=='Q')
    return 3;
}

void Output(int X)
{
  int Len=0,Data[10];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  if(!Len)
    Data[Len++]=0;
  while(Len--)
    putchar(Data[Len]+48);
  putchar('\n');
}

int N,Query;
int RecentRow[500000],RecentColumn[500000];
bool RowColor[500000],ColumnColor[500000];
MySet BlackRow,WhiteRow,BlackColumn,WhiteColumn;

void Init()
{
  for(int i=0;i<N;i++)
    RecentRow[i]=-1;
  for(int i=0;i<N;i++)
    RecentColumn[i]=-1;
  memset(RowColor,0,sizeof(RowColor));
  memset(ColumnColor,0,sizeof(ColumnColor));
  BlackRow.Init(Query);
  WhiteRow.Init(Query);
  BlackColumn.Init(Query);
  WhiteColumn.Init(Query);
}

void ChangeRow(int Time)
{
  int X=Get()-1,Color=Get();
  if(RecentRow[X]!=-1)
    if(RowColor[X])
      BlackRow.Add(RecentRow[X],-1);
    else
      WhiteRow.Add(RecentRow[X],-1);
  if(Color)
    BlackRow.Add(Time,1);
  else
    WhiteRow.Add(Time,1);
  RecentRow[X]=Time;
  RowColor[X]=Color;
}

void ChangeColumn(int Time)
{
  int X=Get()-1,Color=Get();
  if(RecentColumn[X]!=-1)
    if(ColumnColor[X])
      BlackColumn.Add(RecentColumn[X],-1);
    else
      WhiteColumn.Add(RecentColumn[X],-1);
  if(Color)
    BlackColumn.Add(Time,1);
  else
    WhiteColumn.Add(Time,1);
  RecentColumn[X]=Time;
  ColumnColor[X]=Color;
}

int QueryRow()
{
  int X=Get()-1,Last=RecentRow[X];
  if(RowColor[X])
    return WhiteColumn.Larger(Last);
  else
    return N-BlackColumn.Larger(Last);
}

int QueryColumn()
{
  int X=Get()-1,Last=RecentColumn[X];
  if(ColumnColor[X])
    return WhiteRow.Larger(Last);
  else
    return N-BlackRow.Larger(Last);
}

int main()
{
  N=Get();
  Query=Get();
  Init();
  int Time=0;
  while(Query--)
    {
      int Type=GetType();
      if(Type==0)
        ChangeRow(++Time);
      if(Type==1)
        ChangeColumn(++Time);
      if(Type==2)
        Output(QueryRow());
      if(Type==3)
        Output(QueryColumn());
    }
  return 0;
}
