#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<cctype>
#include<algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
#define cin(n) scanf("%d",&n)
#define gc getchar_unlocked
typedef vector<long long> VI;
long long fcin(){register long long c = gc();long long x = 0;for(;(c<48 || c>57);c = gc());for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}return x;}
 
#define P (long long)531169
// return a % b (positive value)
long long mod(long long a, long long b) {
  return ((a%b)+b)%b;
}
 
// computes gcd(a,b)
long long gcd(long long a, long long b) {
  long long tmp;
  while(b){a%=b; tmp=a; a=b; b=tmp;}
  return a;
}
 
// computes lcm(a,b)
long long lcm(long long a, long long b) {
  return a/gcd(a,b)*b;
}
 
// returns d = gcd(a,b); finds x,y such that d = ax + by
long long extended_euclid(long long a, long long b, long long &x, long long &y) {  
  long long xx = y = 0;
  long long yy = x = 1;
  while (b) {
    long long q = a/b;
    long long t = b; b = a%b; a = t;
    t = xx; xx = x-q*xx; x = t;
    t = yy; yy = y-q*yy; y = t;
  }
  return a;
}
 
// finds all solutions to ax = b (mod n)
VI modular_linear_equation_solver(long long a, long long b, long long n) {
  long long x, y;
  VI solutions;
  long long d = extended_euclid(a, n, x, y);
  if (!(b%d)) {
    x = mod (x*(b/d), n);
    for (long long i = 0; i < d; i++)
      solutions.push_back(mod(x + i*(n/d), n));
  }
  return solutions;
}
 
// computes b such that ab = 1 (mod n), returns -1 on failure
long long mod_inverse(long long a, long long n) {
  long long x, y;
  long long d = extended_euclid(a, n, x, y);
  if (d > 1) return -1;
  return mod(x,n);
}
 
long long inv(long long n){
	return mod_inverse(n,P); 
}
 
long long fact[P]={1}; 
 
long long func(long long a,long long b){
	long long x = (a+b) / P ;
	long long y = a /P ; 
	long long z = b /P ; 
	if(x>y+z)return 0 ;
	long long ans = 1 ; 
	ans *= fact[a+b-P*x];
	ans = mod(ans,P);
	ans *= inv(fact[a-P*y]);
	ans = mod(ans,P);
	ans *= inv(fact[b-P*z]);
	ans = mod(ans,P);
	ans *= fact[x];
	ans = mod(ans,P);
	
	/*if(x<0)
	ans*=(P-1);
	ans = mod(ans,P);
  	*/ans *= inv(fact[y]);
	ans = mod(ans,P);
	ans *= inv(fact[z]);
	ans = mod(ans,P);
	return ans; 
}
typedef pair<long long,long long> PI; 
map<PI,long long> MAP; 
long long f(long long a,long long b){
	if(MAP.find(mp(a,b)) != MAP.end())return MAP[mp(a,b)]; 
	long long ans = 0; 
	ans += func(a,b); 
	long long d = gcd(a,b); 
	if(d==1)return MAP[mp(a,b)] = ans;
	for(long long i=1 ; i*i <= d; i++){
		if(d%i)continue; 
		ans -= i==1?0:f(a/i,b/i);
		ans -= i*i==d?0:f(a*i/d,b*i/d); 
	}
	ans = mod(ans,P); 
	return MAP[mp(a,b)] = ans; 
}
int main(){
	long long temp = 1;
	for(long long i=1;i<P;i++){
		temp = (temp * i) %P; 
		fact[i] = temp; 
	}
	long long tests=fcin();
	long long a,b;
	while(tests--){
		a=fcin();
		b=fcin(); 
		cout<<f(a,b)<<endl;
	}
	return 0;
} 
