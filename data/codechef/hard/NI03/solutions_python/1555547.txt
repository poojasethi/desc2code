#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;
typedef struct
{
    double x, y;
}point;
double speed;
int n;
point initial;
point vel[20], start[20];
point getvec(point a, point b)
{
    point c;
    c.x = b.x - a.x;
    c.y = b.y - a.y;
    return c;
}
double dot(point v1, point v2)
{
    return (v1.x*v2.x + v1.y*v2.y);
}

point add(point v1, point v2)
{
    point v;
    v.x = v1.x + v2.x;
    v.y = v1.y + v2.y;
    return v;			// !!!
}
/*
point minus(point v1, point v2)
{
    point v;
    v.x = v1.x - v2.x;
    v.y = v1.y - v2.y;
    return v;
}*/
point scale(point v, double s)
{
    point ans;
    ans.x = s*v.x;
    ans.y = s*v.y;
    return ans;
}

double gettime(int idx[10])
{
    point pos = initial;
    double tim = 0;
    for(int i = 0; i < n; i ++)
    {
	int cur = idx[i];
	point v = vel[cur];
	point st = add(start[cur], scale(v, tim));
	point r = getvec(pos, st);
	double lambda = 0;
	double a, b, c;
	c = dot(r, r);
	b = 2 * dot(v, r);
	a = dot(v, v) - speed*speed;
	lambda = (-1*b - sqrt(b*b - 4*a*c)) / (2*a);			// seriously ?!
	//printf("at %.1lf,%.1lf : abc = %.1lf %.1lf %.1lf ;", st.x, st.y, a, b, c);
	tim += lambda;
	tim += 3600;
	pos = add(st, scale(v, lambda + 3600));
    }
    point diff = getvec(initial, pos);
    tim += sqrt(dot(diff, diff))/speed;
   /* 
    cout << "\nfor order : \n";
    for(int i = 0; i < n; i ++)
    {
	cout << start[idx[i]].x << "," << start[idx[i]].y << " ";
    }
    cout << "\n time taken " << tim << " hours\n";
 */  
    return tim;
}

int main()
{
    int idx[10];
    int t;
    for(int kase = 1; ; kase ++)
    {
	scanf("%d", &n);
	if(n == 0)
	    break;
	for(int i = 0; i < n; i ++)
	{
	    scanf("%lf %lf %lf %lf", &start[i].x, &start[i].y, &vel[i].x, &vel[i].y);
	    start[i].x *= 1000;
	    start[i].y *= 1000;
	    vel[i].x *= (5.0/18);
	    vel[i].y *= (5.0/18);
	    idx[i] = i;
	}
	double tim = 1e15;
	scanf("%lf %lf %lf", &initial.x, &initial.y, &speed);
	initial.x *= 1000;
	initial.y *= 1000;
	speed *= (5.0/18);
	do
	{
	    tim = min(tim, gettime(idx));
//	    for(int l = 0; l < n; l ++)
//		cout << idx[l] << " ";
//	    cout << endl;
	}while(next_permutation(idx, idx+n));
	tim = ceil(tim);
	long long int tt = (long long)tim;
	printf("%d %lld %lld %lld\n", kase, tt / 3600, (tt % 3600) / 60, tt % 60);
    }
    return 0;
}
