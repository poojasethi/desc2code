#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<utility>
#include<cassert>
using namespace std;

void getinput();
void preprocess();
void process();
void solve();
void print();

pair<int, int>p;
vector<pair<int,int> >protect;
vector<pair<int, int> >move;
vector<int> bomb;
vector<int>movind;

int n, m;
int treesize;

struct BIT
{
    int size;
    int memory;
    int *tree;
};

BIT bt;

BIT BITNew(int mem)
{
    BIT res;
    res.memory = mem;
    res.tree = new int[mem];
    return res;

}
void BITInit(BIT* t, int size)
{
    t->size = size;
   for(int i=1; i<=size; i++)
   t->tree[i] = 0;
}

void BITDelete(BIT *t)
{
    free(t->tree);
}

int BITGet(BIT* t, int idx)
{
    int sum = 0;
	while (idx > 0){
		sum += t->tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}
void BITAdd(BIT* t, int idx, int val)
{

    while (idx <= t->size){
		t->tree[idx] += val;
		idx += (idx & -idx);
	}
}

//to help preprocess
struct event
{
    int val;
    int ind;
    int newval;
};
vector<event>house;
vector<char>op;


event setevent(int , int);

inline bool vorder(event e1, event e2)
{
   return (e1.val < e2.val);
}
inline bool iorder(event e1, event e2)
{
   return (e1.ind< e2.ind);
}


int main()
{

solve();
//print();
}





event setevent(int a, int b)
{
    event e;
    e.val = a;
    e.ind = b;
    e.newval = 0;
    return e;
}
void getinput()
{
house.clear();
protect.clear();
move.clear();
bomb.clear();
movind.clear();
int x, y;
int k =0;
char c[2];
event e;
scanf("%d%d", &n, &m);

for(int i=0; i<m; i++)
{
  scanf("%s", c);
  if(c[0]== 'P')
  {
      scanf("%d%d", &x, &y);
      op.push_back(c[0]);
      e = setevent(x, k++);
      house.push_back(e);
      e = setevent(y, k++);
      house.push_back(e);
      p = make_pair(x,y);
      protect.push_back(p);
  }
  if(c[0] == 'M')
{
    scanf("%d%d", &x, &y);
     op.push_back(c[0]);
     protect[x-1].first+= y;
     protect[x-1].second+= y;
     e = setevent(protect[x-1].first, k++);
      house.push_back(e);
      e = setevent(protect[x-1].second, k++);
      house.push_back(e);
      p = make_pair(protect[x-1].first,protect[x-1].second);
      move.push_back(p);
      movind.push_back(x-1);
}
  if(c[0] == 'B')
  {
      scanf("%d", &x);
      op.push_back(c[0]);
      e = setevent(x, k++);
      house.push_back(e);
  }
}
}
void preprocess()
{
sort(house.begin(), house.end(), vorder);
int  k = 1;
if(house.size())
{
house[0].newval = 1;

for(int i= 1; i<house.size(); i++)
{
    if(house[i].val!=house[i-1].val)house[i].newval = ++k;
    else house[i].newval = k;
}
}
 treesize = k;

sort(house.begin(), house.end(), iorder);

 k =0;
int pro = 0;
int mov = 0;

for(int i=0; i<op.size(); i++)
{
    if(op[i] == 'P')
    {
    protect[pro].first = house[k++].newval;
    protect[pro++].second = house[k++].newval;
    }
    if(op[i] == 'M')
    {
    move[mov].first = house[k++].newval;
    move[mov++].second = house[k++].newval;
    }
    if(op[i] == 'B')
    {
      bomb.push_back(house[k++].newval);
    }

}
house.clear();

//print();
}
void solve()
{
    getinput();
    preprocess();
    process();
}

void process()
{


    bt = BITNew(treesize + 15);
    BITInit(&bt, treesize+5);//try removing + 1
    int pro = 0, mov =0, b= 0;

    for(int i=0; i<op.size(); i++)
    {

        if(op[i] == 'P')
        {
           BITAdd(&bt, protect[pro].first, 1) ;
           BITAdd(&bt, protect[pro++].second + 1, -1);
        }
        if(op[i] == 'M')
        {


            BITAdd(&bt, protect[movind[mov]].first, -1);
            BITAdd(&bt, protect[movind[mov]].second + 1, 1);

            protect[movind[mov]].first = move[mov].first;
            protect[movind[mov]].second = move[mov].second;

            BITAdd(&bt, move[mov].first, 1);
            BITAdd(&bt, move[mov++].second + 1, -1);


        }
        if(op[i] == 'B')
        {
            printf("%d\n", BITGet(&bt, bomb[b++]));

        }
    }
}


void print()
{
cout<<"op"<<endl;
for(int i=0; i<op.size(); i++)
cout<<op[i]<<endl;

cout<<"Protect"<<endl;
for(int j=0; j<protect.size(); j++)
cout<<protect[j].first<<" "<<protect[j].second<<endl;

cout<<"move"<<endl;
for(int j=0; j<move.size(); j++)
cout<<move[j].first<<" "<<move[j].second<<endl;

cout<<"bomb"<<endl;
for(int i=0; i<bomb.size(); i++)
cout<<bomb[i]<<endl;

cout<<"movindex"<<endl;
for(int i=0; i<movind.size(); i++)
cout<<movind[i]<<endl;

cout<<"tree size "<<treesize<<endl;
}
