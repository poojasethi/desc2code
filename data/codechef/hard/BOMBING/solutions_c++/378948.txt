#include <cstdio>
#include <algorithm>

using namespace std;

//FASTIO
char *ipos, *opos, InpFile[20000000], OutFile[20000000], DIP[20];
inline int input(int flag=0) {

	while(*ipos <= 32) ++ipos;
	if ( flag  ) return (*ipos++ - '0'); /* For getting Boolean Characters */
	int x=0, neg = 0;char c;
	while( true ) {
		c=*ipos++; if(c == '-') neg = 1;
		else {
			if (c<=32) return neg?-x:x;
			x=(x<<1)+(x<<3)+c-'0';
		}
	}
}
inline void output(int x,int flag = 1) {
        if(x<0)
        {
          *opos++='-';
          x *= -1;
        }
	int y,dig=0;
	while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
	while (dig--) *opos++=DIP[dig];
	*opos++= flag ? '\n' : ' ';
}
inline void InitFASTIO() {
	ipos = InpFile; opos = OutFile;
	fread_unlocked(InpFile,20000000,1,stdin);
}
inline void FlushFASTIO() {
	fwrite_unlocked(OutFile,opos-OutFile,1,stdout);	
}
//FASTIO FINISHED

const int MAX = 2500000;
int lo[MAX];
int hi[MAX];
int mid[MAX];
int data[MAX];
int process[MAX][3];
int a[MAX];
int p[MAX];
int pcount = 1;
void init(int i, int j, int x)
{
  if(j < i)
    return;
  if(i == j)
  {
    data[x] = 0;
    hi[x] = lo[x] = mid[x] = a[i];
    return;
  }
  lo[x] = a[i];
  hi[x] = a[j];
  mid[x] = a[(i+j)/2];
  init(i, (i+j)/2, x*2+1);
  init((i+j)/2+1, j, x*2+2);
}

void upd(int start, int end, int x, int value = 1)
{
   if(start > hi[x] || end < lo[x]) return;
   if(lo[x] >= start && hi[x] <= end)
     data[x]+=value;
   else
   {
     upd(start, end, x*2+1, value);
     upd(start, end, x*2+2, value);
   }
}

int que(int k)
{
  int x = 0;
  int ans = 0;
  while(lo[x]!=hi[x])
  {
    ans += data[x];
    if(k <= mid[x])
      x = x*2+1;
    else
      x = x*2+2;
  }
  ans += data[x];
  return ans;
}

int main()
{
  InitFASTIO();
  int n, m;
  n=input(); m=input();
  int maxb = 0;
  for(int i = 0; i < m; i++)
  {
    while(*ipos == '\n' || *ipos == ' ')ipos++;
    char c = *ipos++;
    switch(c)
    {
      case 'P':
        process[i][0] = 0;
        process[i][1]=input(); process[i][2]=input();
        p[pcount++]=i;
        break;
      case 'M':
        process[i][0] = 1;
        process[i][1]=input(); process[i][2]=input();
        break;
      case 'B':
        process[i][0] = 2;
        process[i][1]=input();
        a[maxb++] = process[i][1];
        break;
    }
  }
  sort(a, a+maxb);
  int del = 0;
  int last = -1;
  for(int i = 0; i < maxb; i++)
  {
    a[i-del] = a[i];
    if(last == a[i])
      del++;
    last = a[i];
  }
  maxb -= del;
  init(0, maxb-1, 0);
  for(int i = 0; i < m; i++)
  {
    switch(process[i][0])
    {
      case 0:
 
        upd(process[i][1], process[i][2], 0, 1);
        break;
      case 1:
      {
        int x = process[p[process[i][1]]][1];
        int y = process[p[process[i][1]]][2];
        upd(x, y, 0, -1);
        x += process[i][2];
        y += process[i][2];
        process[p[process[i][1]]][1] = x;
        process[p[process[i][1]]][2] = y;
        upd(x, y, 0, 1);
        break;
      }
      case 2:
        output(que(process[i][1]),1);
        break;
    }
  }
  FlushFASTIO();
}
