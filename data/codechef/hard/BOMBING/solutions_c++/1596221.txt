/* CPP Tempelate
 * @author Devashish Tyagi
 */

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#include <list>
#include <bitset>

#define sf(a) scanf("%d",&a)
#define ssf(a,b) scanf("%d %d",&a,&b)
#define pf(a) printf("%d\n",a)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pi pair<int,int>
#define vi vector<int>
#define all(v) v.begin(),v.end()

#define PB push_back
#define MP make_pair
#define sz(a) (int)(a).size()

#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define CLEAR(a) memset((a),0,sizeof(a))

#define INF 1000000000
#define PI 2*acos(0.0)
#define LOGSZ 18
#define MAXN 250005

using namespace std;
typedef long long ll;

int tree[(1<<LOGSZ)+1];
int N = (1<<LOGSZ);
vector< pair<int,int> > querypts;
char opt[MAXN];
int a[MAXN], b[MAXN], mapvalue[MAXN], defence[MAXN];

// add v to value at x
void update(int x, int v) {
  while(x <= N) {
    tree[x] += v;
    x += (x & -x);
  }
}

// get cumulative sum up to and including x
int get(int x) {
  int res = 0;
  while(x) {
    res += tree[x];
    x -= (x & -x);
  }
  return res;
}

int getleft(int x){
    int id = (int)(lower_bound(querypts.begin(),querypts.end(),make_pair(x,0)) - querypts.begin());
    return mapvalue[querypts[id].second];
}

int getright(int x){
    int id = (int)(upper_bound(querypts.begin(),querypts.end(),make_pair(x,999999)) - querypts.begin())-1;
    return mapvalue[querypts[id].second];
}

int main(void){
    int n,m;
    scanf("%d %d",&n,&m);
    
    CLEAR(tree);
    
    // Get queries
    int q = 0;
    int p = 0;
    querypts.push_back(make_pair(-1,q++));
    querypts.push_back(make_pair(2000000000,q++));
    for(int i=0; i<m; i++){
	char cmd[4];
	scanf("%s",cmd);
	opt[i] = cmd[0];
	if (opt[i] == 'B'){
	    sf(a[i]);
	    querypts.push_back(make_pair(a[i],q));
	    b[i] = q++;
	}
	else{
	    sf(a[i]); sf(b[i]);
	    if (opt[i] == 'P')
		defence[p++] = i;
	}
    }
    
    // Discretize the space
    sort(querypts.begin(), querypts.end());
    int id = 0;
    for(int i=0; i<q; i++){
	if (i != 0 && querypts[i-1].first != querypts[i].first)
	    id++;
	mapvalue[querypts[i].second] = id;
    }
    
    // Process the queries and answer them
    for(int i=0; i<m; i++){
	if (opt[i] == 'B'){
	    printf("%d\n",get(mapvalue[b[i]]));
	}
	else if (opt[i] == 'P'){
	    int left = getleft(a[i]);
	    int right = getright(b[i]);
	    update(left, 1);
	    update(right+1, -1);
	}
	else{
	    int index = defence[a[i]-1];
	    int l1 = getleft(a[index]);
	    int r1 = getright(b[index]);
	    int l2 = getleft(a[index]+b[i]);
	    int r2 = getright(b[index]+b[i]);
	    update(l1,-1);
	    update(l2,1);
	    update(r1+1,1);
	    update(r2+1,-1);
	    a[index] += b[i];
	    b[index] += b[i];
	}
    }
    
    return 0;
}

