#include <assert.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

#define f(i, a, b) for(int i = a; i < b; i++)
#define rep(i, n) f(i, 0, n)

using namespace std;

typedef long long ll;

/*
  Code for left-leaning red-black tree from
  http://www.codechef.com/download/Solutions/November/Tester/BOMBING.cpp
*/

// a left-leaning red-black tree implementation
struct LLRB{
    int val;
    int cnt;
    bool red;
    int children;
    struct LLRB *left, *right;
    LLRB(int v, int c): val(v), cnt(c), red(true), children(0ll), left(NULL), right(NULL){}
};
 
// various helper functions
int size(const LLRB *node){
    return node==NULL ? 0 : node->cnt+node->children;
}
 
bool is_red(const LLRB *node){
    return node==NULL ? false : node->red;
}
 
void rot_l(LLRB **node){
    LLRB *tmp=*node;
    *node=(*node)->right;
    tmp->right=(*node)->left;
    (*node)->left=tmp;
    tmp->children=size(tmp->left)+size(tmp->right);
    (*node)->children=size(tmp)+size((*node)->right);
    swap((*node)->red, (*node)->left->red);
}
 
void rot_r(LLRB **node){
    LLRB *tmp=*node;
    *node=(*node)->left;
    tmp->left=(*node)->right;
    (*node)->right=tmp;
    tmp->children=size(tmp->left)+size(tmp->right);
    (*node)->children=size((*node)->left)+size(tmp);
    swap((*node)->red, (*node)->right->red);
}
 
void balance(LLRB **node){
    if(is_red((*node)->left)){
        if(is_red((*node)->left->left))
            rot_r(node);
        if(is_red((*node)->right)){
            (*node)->red=true;
            (*node)->left->red=false;
            (*node)->right->red=false;
        }
    }else if(is_red((*node)->right)){
        rot_l(node);
    }
}
// the important functions
void insert(LLRB **node, int val, ll cnt){
    while(*node){
        balance(node);
        if((*node)->val==val){
            (*node)->cnt+=cnt;
            return;
        }
        (*node)->children+=cnt;
        node=val<(*node)->val ? &(*node)->left : &(*node)->right;
    }
    *node=new LLRB(val, cnt);
}
 
int rank(const LLRB *node, int val){
    int result=0;
    while(node){
        if(val<node->val){
            node=node->left;
        }else{
            result+=size(node->left)+node->cnt;
            node=node->right;
        }
    }
    return result;
}

///////////////////////////////////////////////

#define gc getchar_unlocked

inline void fs(int &x) {
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

const int M = 10000000;
char buf[M];
int a[250000], b[250000];

int main(){

    int n, m;
    fs(n); fs(m);

    LLRB *tree = NULL;

    n = 0;
    while(m--) {

        char ch = gc();

        if(ch == 'P') {
            int u, v;
            fs(u); fs(v);

            a[n] = u;
            b[n] = v + 1;

            insert(&tree, a[n], 1);
            insert(&tree, b[n], -1);

            n++;
        }
        else if(ch == 'M') {
            int u, v;
            fs(u); fs(v);

            u--;
   
            insert(&tree, a[u], -1);
            insert(&tree, b[u], 1);

            a[u] += v;
            b[u] += v;

            insert(&tree, a[u], 1);
            insert(&tree, b[u], -1);

        }
        else {
            int u;
            fs(u);

            printf("%d\n", rank(tree, u));
        }
    }
}

