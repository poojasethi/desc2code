#include <iostream>
#include<algorithm>
#include<set>


#define MAX 250007

using namespace std;


struct Syst
{
    int st;
    int end;

};


// for tree .....
int tree[MAX];
int tree_size;
void update(int* tree,int idx,int val);
int read( int* tree,int idx);


set<int> house;
set<int> :: iterator it;

Syst syst[MAX];
int query[MAX][3] , data_house[MAX],dp ,sp;


int n,m;




int main()
{

char f;
int r1,r2,i;
int a,b;

scanf("%d %d",&n,&m);



for( i=1;i<=m;i++)
{
    getchar();
  scanf("%c",&f);

  if( f=='P' )
  {
    query[i][0]=1;

scanf("%d %d",&query[i][1],&query[i][2]);


syst[++sp].st =query[i][1];
syst[sp].end= query[i][2];


  }
  else
  if( f=='M' )
  {
    query[i][0]=2;

scanf("%d %d",&query[i][1],&query[i][2]);

  }
  else
  {
    query[i][0]=3;

scanf("%d",&query[i][1]);

    house.insert(query[i][1]);

  }

}

// input over ........


// process input ...
dp=0;
for( it= house.begin() ; it!=house.end()  ;it++ )
{
data_house[++dp]= *it ;
}

data_house[++dp]=1000000007;
tree_size=dp+1;

for( i=1;i<=m;i++  )
{
  if(  query[i][0]==1 )
  {
      // to map to the indexes in the array..........
      a= int(lower_bound( &data_house[1], &data_house[dp] , query[i][1] ) - data_house)  ;

      b= int(upper_bound( &data_house[1], &data_house[dp] , query[i][2]  )  -data_house )  ;


      update( tree,a, 1 );
      update( tree,b,-1);


  }
  else
  if(  query[i][0]==2)
  {
      a= int(  lower_bound( &data_house[1], &data_house[dp] , syst[  query[i][1] ].st   ) -data_house);

      b= int ( upper_bound( &data_house[1], &data_house[dp] , syst[  query[i][1] ].end  )-data_house ) ;

update(tree,a,-1);
update(tree,b,1);

syst[ query[i][1] ].st+=query[i][2];
syst[ query[i][1] ] .end+=query[i][2];


 a= int(  lower_bound( &data_house[1], &data_house[dp] , syst[ query[i][1] ].st )  -data_house);
 b= int(  upper_bound( &data_house[1], &data_house[dp] , syst[ query[i][1] ].end  ) -data_house );



update( tree,a ,1);
update(tree,b,-1);
  }
  else
  if(  query[i][0]==3)
  {
      a=int( lower_bound( data_house+1 , &data_house[dp] , query[i][1] ) - data_house) ;

      b= read ( tree, a );

      printf("%d\n",b);



  }



}


    return 0;
}



void update(int *tree,int idx,int val)
{


  while( idx<= tree_size  )
  {
      tree[idx]+=val;
    idx+=(  idx  &  -idx);
  }

}



int read(int *tree,int idx)
{
  int sum=0;

  while(  idx>0)
  {
sum+=tree[ idx ];
    idx-=( idx & -idx );
  }

return sum;
}
