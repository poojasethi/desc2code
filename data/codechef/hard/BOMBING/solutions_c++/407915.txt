/* Author :: Kaushik */
#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

template<class A, class B> A cvt(B x) {stringstream s;s<<x;A r;s>>r;return r;}

#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i) 
#define REV(i,a,b) for(int i= (int )a ; i >= (int)b ; --i)
#define REP(i,n) FOR(i,0,n)
#define DEP(i,n) REV(i,n,0)
#define PB push_back
#define PP pop()
#define EM empty()
#define oo 	0xBADC0DE
#define INF 1000000000
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a) 	    __typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define PRESENT(c,x) 	((c).find(x) != (c).end())
#define SZ(x) 		x.size()
#define CPRESENT(c,x) 	(find(c.begin(),c.end(),x) != (c).end())
#define D(N) 		int N
#define S(N)		scanf("%d",&N)
#define fill(a,v) 	memset(a, v, sizeof(a))
#define gc getchar_unlocked

typedef pair<int,int>   PI;
typedef pair<int,PI>    TRI;
typedef V( int )        VI;
typedef V( PI  )        VII;
typedef V( string )     VS;
typedef long long       LL;
typedef long double     LD;

#define maxn 250000+10000

inline void fs(int &x)
{
		register int c = gc();
		x = 0;
		int neg = 0;
		for(;((c<48 || c>57) && c != '-');c = gc());
		if(c=='-') {neg=1;c=gc();}
		for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
		if(neg) x=-x;
}


int query[maxn][3],P[maxn][2],pc,MB[maxn],bc;
set<int> B;
int tree[maxn*4],n;

void update(int idx ,int val)
{
		while (idx <= (bc))
		{
				tree[idx] += val;
				idx += (idx & -idx);
		}
}

int read(int idx)
{
		int sum = 0;
		while (idx > 0)
		{
				sum += tree[idx];
				idx -= (idx & -idx);
		}
		return sum;
}

int main()
{
		int m;
		fs(n);
		fs(m);
		char temp[1];
		for(int i=0;i<m;i++)
		{
				temp[0]=gc();
				if(temp[0]=='P')
				{
						query[i][0]=1;
						fs(query[i][1]);
						fs(query[i][2]);
						P[pc][0]=query[i][1];
						P[pc++][1]=query[i][2];
				}
				else if(temp[0]=='B')
				{
						query[i][0]=2;
						fs(query[i][1]);
						B.insert(query[i][1]);
				}
				else
				{
						query[i][0]=3;
						fs(query[i][1]);
						fs(query[i][2]);
				}
		}
		set<int>::iterator it;
		bc=1;
		for(it=B.begin();it!=B.end();++it)
			MB[bc++]=*it;
		for(int i=0;i<m;i++)
		{
			int& r0=query[i][0];
			int& r1=query[i][1];
			int& r2=query[i][2];
			if(r0==1)
			{
				int l=int(lower_bound(MB+1,MB+bc,r1)-MB);
				int r=int(upper_bound(MB+1,MB+bc,r2)-MB);
				assert(l<=r);
				update(l,1);
				update(r,-1);
			}
			else if(r0==2)
			{
				printf("%d\n",read(int(lower_bound(MB+1,MB+bc,r1)-MB)));
			}
			else if(r0==3)
			{
				int sysno,shift;
				sysno=r1-1;
				shift=r2;
//				PRINT(P[sysno][0]);
//				PRINT(P[sysno][1]);
				int l=int(lower_bound(MB+1,MB+bc,P[sysno][0])-MB);
				int r=int(upper_bound(MB+1,MB+bc,P[sysno][1])-MB);
				assert(l<=r);
				update(l,-1);
				update(r,+1);
				P[sysno][0]+=shift;
				P[sysno][1]+=shift;
//				PRINT(P[sysno][0]);
//				PRINT(P[sysno][1]);
				l=int(lower_bound(MB+1,MB+bc,P[sysno][0])-MB);
				r=int(upper_bound(MB+1,MB+bc,P[sysno][1])-MB);
				assert(l<=r);
				update(l,+1);
				update(r,-1);
			}
		}
		return EXIT_SUCCESS;
}
