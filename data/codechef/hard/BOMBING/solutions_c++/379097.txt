#include <cstdio>
#include <cassert>
#include <cctype>
#include <algorithm>
using namespace std;
 
// a left-leaning red-black tree implementation
struct LLRB{
	int val, cnt;
	bool red;
	int children;
	struct LLRB *left, *right;
	LLRB(int v, int c): val(v), cnt(c), red(true), children(0), left(NULL), right(NULL){}
};
 
// various helper functions
int size(const LLRB *node){
	return node==NULL ? 0 : node->cnt+node->children;
}
 
bool is_red(const LLRB *node){
	return node==NULL ? false : node->red;
}
 
void rot_l(LLRB **node){
	LLRB *tmp=*node;
	*node=(*node)->right;
	tmp->right=(*node)->left;
	(*node)->left=tmp;
	tmp->children=size(tmp->left)+size(tmp->right);
	(*node)->children=size(tmp)+size((*node)->right);
	swap((*node)->red, (*node)->left->red);
}
 
void rot_r(LLRB **node){
	LLRB *tmp=*node;
	*node=(*node)->left;
	tmp->left=(*node)->right;
	(*node)->right=tmp;
	tmp->children=size(tmp->left)+size(tmp->right);
	(*node)->children=size((*node)->left)+size(tmp);
	swap((*node)->red, (*node)->right->red);
}
 
void balance(LLRB **node){
	if(is_red((*node)->left)){
		if(is_red((*node)->left->left))
			rot_r(node);
		if(is_red((*node)->right)){
			(*node)->red=true;
			(*node)->left->red=false;
			(*node)->right->red=false;
		}
	}else if(is_red((*node)->right)){
		rot_l(node);
	}
}
// the important functions
void insert(LLRB **node, int val, int cnt=1){
	while(*node){
		balance(node);
		if((*node)->val==val){
			(*node)->cnt+=cnt;
			return;
		}
		(*node)->children+=cnt;
		node=val<(*node)->val ? &(*node)->left : &(*node)->right;
	}
	*node=new LLRB(val, cnt);
}
 
int rank(const LLRB *node, int val){
	int result=0;
	while(node){
		if(val<node->val){
			node=node->left;
		}else{
			result+=size(node->left)+node->cnt;
			node=node->right;
		}
	}
	return result;
}
 
int defence[250000][2], cnt=0;
 
int main(){
	int n, m;
	LLRB *tree=NULL;
	scanf("%d%d", &n, &m);
	assert(0<n && n<=1e9);
	while(m--){
		char command;
		int op1, op2;
		scanf(" %c", &command);
		assert(command=='P' || command=='M' || command=='B');
		if(command=='P'){
			scanf("%d%d", &op1, &op2);
			assert(0<=op1 && op1<=op2 && op2<=n);
			op2++;
			insert(&tree, op1, 1);
			insert(&tree, op2, -1);
			defence[cnt][0]=op1;
			defence[cnt][1]=op2;
			cnt++;
		}else if(command=='M'){
			scanf("%d%d", &op1, &op2);
			assert(0<op1 && op1<=cnt);
			op1--;
			insert(&tree, defence[op1][0], -1);
			insert(&tree, defence[op1][1], 1);
			defence[op1][0]+=op2;
			defence[op1][1]+=op2;
			assert(0<=defence[op1][0] && defence[op1][1]<=n+1);
			insert(&tree, defence[op1][0], 1);
			insert(&tree, defence[op1][1], -1);
		}else if(command=='B'){
			scanf("%d", &op1);
			assert(0<=op1 && op1<=n);
			printf("%d\n", rank(tree, op1));
		}
	}
	return 0;
}