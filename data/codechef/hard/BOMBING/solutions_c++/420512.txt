#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int Maxn = 250001;

struct oper {
       char typ;
       int a, b;
};

int n, m, h[Maxn], hl, BIT[Maxn], sec[Maxn][2], sl;
oper op[Maxn];

void Add(int where, int what)
{
     for (int i = where; i > 0; i -= i & -i) BIT[i] += what;
}

int Get(int st, int lim)
{
    int i, res = 0;
    for (i = st; i <= lim; i += i & -i) res += BIT[i];
    return res;
}

int main()
{
    int i, a, b;
    scanf("%d %d", &n, &m);
    for (i = 0; i < m; i++) {
        scanf(" %c %d", &op[i].typ, &op[i].a);
        if (op[i].typ != 'B') scanf("%d", &op[i].b);
        else h[++hl] = op[i].a;
    }
    sort(h+1, h+hl+1);
    hl = unique(h+1, h+hl+1) - (h+1);
    memset(BIT, 0, sizeof(BIT));
    for (i = 0; i < m ; i++)
       if (op[i].typ == 'P') {
                      sl++;
                      sec[sl][0] = op[i].a;
                      sec[sl][1] = op[i].b;
                      a = lower_bound(h+1, h+hl+1, sec[sl][0]) - h;
                      b = upper_bound(h+1, h+hl+1, sec[sl][1]) - h - 1;
                      if (a <= b) { Add(b, +1); Add(a-1, -1); }
       } else if (op[i].typ == 'M') {
              a = lower_bound(h+1, h+hl+1, sec[op[i].a][0]) - h;
              b = upper_bound(h+1, h+hl+1, sec[op[i].a][1]) - h - 1;
              if (a <= b) { Add(b, -1); Add(a-1, +1); }
              sec[op[i].a][0] += op[i].b;
              sec[op[i].a][1] += op[i].b;
              a = lower_bound(h+1, h+hl+1, sec[op[i].a][0]) - h;
              b = upper_bound(h+1, h+hl+1, sec[op[i].a][1]) - h - 1;
              if (a <= b) { Add(b, +1); Add(a-1, -1); }
       } else {
              a = lower_bound(h+1, h+hl+1, op[i].a) - h;
              printf("%d\n", Get(a, hl));
       }
    return 0;
}

