#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define ll int
struct point{
  ll x , y;
  int kv;
  point(ll _x = 0 , ll _y = 0){
   x = _x , y = _y;
   if(y>0 || y==0&&x>=0)kv = 0;
   else kv = 1;
                              }
  ll vp(const point& w)const{
   return x*w.y - w.x*y;
                            }
  ll sp(const point& w)const{
   return x*w.x + y*w.y;
                            }
  point operator+(point w){
   return point(x+w.x , y+w.y);
                          }
  point operator-(point w){
   return point(x-w.x , y-w.y);
                          }
  bool operator<(const point& w)const{
   if(kv != w.kv)return kv < w.kv;
   return this->vp(w) > 0;
                                     }
  bool operator!=(const point& w)const{
   return x != w.x || y != w.y;
                                      }
};
point perp(point to){
  return point(-to.y , to.x);
}
point flip(point w){
  return point(-w.x , -w.y);
}
int N;
vector<point> in;
ll bad_tri = 0;
void load(int beg , deque<point> pts,
          deque<point>& upper , deque<point>& lower){
  int M = sz(pts);
  deque<point> buf;
  for(int i=0;i<beg;++i)
   pts.pb(pts[0]),
   pts.pop_front();
  upper.clear() , lower.clear();
  int pos = 0;
  for(;pos<M;++pos)
   if(pts[pos].sp(pts[0]) <= 0 || pts[0].vp(pts[pos])<0)break;
   else upper.pb(pts[pos]);
  for(;pos<M;++pos)
   if(pts[pos].sp(pts[0]) > 0)break;
   else lower.pb(pts[pos]);
  for(;pos<M;++pos)
   if(pts[pos].sp(pts[0]) <= 0)break;
   else buf.pb(pts[pos]);
  while(!buf.empty())
   upper.push_front(buf.back()),
   buf.pop_back();
}
void eval_center(int c){
  vector<point> pts;
  for(int i=0;i<N;++i)
   if(i != c)pts.pb(in[i] - in[c]);
  int M = sz(pts);
  sort(all(pts));
  deque<point> upper , lower;
  ll all_tri = 0;
  int br = 0;
  for(int i=0;i<M;++i){
   if(i == 0 || (pts[i-1] != pts[i] && pts[i-1].vp(pts[i])<0)){
    load(i , deque<point>(all(pts)) , upper , lower);
    ++br;
    if(br > 6)assert(false);
                                                              }
   while(!upper.empty() && upper[0].sp(pts[i]) <= 0)
    lower.pb(upper[0]) , upper.pop_front();
   while(!lower.empty() && lower[0].sp(pts[i]) > 0)
    upper.pb(lower[0]) , lower.pop_front();
   all_tri += sz(lower);
                      }
  //cout<<all_tri<<endl;
  bad_tri += all_tri/2;
}
int main(){
  scanf("%d" , &N);
  //N = 1000;
  in.resize(N);
  for(int x,y,i=0;i<N;++i){
   scanf("%d%d" , &x , &y);
   //x = rand()%10000 , y = rand()%10000;
   //x = sin(i)*1000 , y = cos(i)*1000;
   in[i] = point(x,y);
                          }
  for(int i=0;i<N;++i)
   eval_center(i);
  ll ALL = N*(N-1LL)*(N-2LL) / 6;
  ALL -= bad_tri;
  cout<<ALL<<'\n';
  return 0;
}
