#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
 
ll c3(ll n) {
    return n*(n-1)*(n-2)/6;
}
 
int f(const pii &a) {
    if (a.first > 0 && a.second >= 0)
        return 0;
    if (a.first <= 0 && a.second > 0)
        return 1;
    if (a.first < 0 && a.second <= 0)
        return 2;
    if (a.first >= 0 && a.second < 0)
        return 3;
}
 
int vect(const pii &a, const pii &b) {
    return a.first*b.second - a.second*b.first;
}
 
int scal(const pii &a, const pii &b) {
    return a.first*b.first + a.second*b.second;
}
 
bool cmp(const pii &a, const pii &b) {
    if (f(a) < f(b))
        return true;
    if (f(a) > f(b))
        return false;
    return vect(a, b) > 0;
}
 
int main() {
    int n;
    cin >> n;
    vii x(n);
    for (int i = 0; i < n; ++i)
        scanf("%d%d",&x[i].first,&x[i].second);
    ll res = c3(n), cnt2 = 0;
    vii y(n-1), v(2*n-2);
    for (int ii = 0; ii < n; ++ii) {
        int it = 0;
        for (int j = 0; j < n; ++j) if (j!=ii) {
            y[it].first = x[j].first-x[ii].first;
            y[it].second = x[j].second-x[ii].second;
            ++it;
        }
        sort(y.begin(), y.end(), cmp);
        for (int i = 0; i < y.size(); ++i)
            v[i] = v[i+n-1] = y[i];
        int l = 0, r = 0, t = 0;
        for (int i = 0; i < y.size(); ++i) {
            l = max(l, i);
            while (l < v.size() && scal(v[l], v[i]) > 0 && vect(v[i], v[l]) >= 0)
                ++l;
            r = max(r, l);
            while (r < v.size() && vect(v[i], v[r]) > 0)
                ++r;
            res -= r-l;
            t = max(i, t);
            while (t < y.size() && vect(v[t],v[i]) == 0 && scal(v[t], v[i]) > 0) {
                ++t;
            }
            cnt2 += t-i-1;
//            cerr << i << ' ' << t << ' ' << y[i].first << ':' << y[i].second << endl;
//            cerr << l << ' ' << r << endl;
        }
    }
//    cerr << cnt2 << endl;
    cout << res - cnt2/2 << endl;
    return 0;
}