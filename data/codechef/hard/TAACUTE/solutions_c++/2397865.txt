#include <cstdio>
#include <iostream>
#include <cstring>
#include <cassert>
#include <cmath>
#include <algorithm>
#include <vector>
#define ll long long 
#define ldb long double
#define sqr(a) ((a) * (a))
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define nextLine() {int c = 0; while((c = getchar()) != 10 && c != EOF);}
const ldb eps = 1e-9;
const ldb pi = fabsl(atan2l(0.0, -1.0));
const int inf = 1 << 28;
using namespace std;
#define PROBLEM "acute"

vector <pair <ldb, int> > ev, b;
int n;
class Point {
public:
	int x, y;
};
Point p[2000];

void load() {
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		scanf("%d%d", &p[i].x, &p[i].y);
	}
}

inline ldb adj(ldb a)
{
	if (a > pi - eps) a -= 2 * pi;
	while (a < -pi - eps) a += 2 * pi;
	assert(a > -pi - eps && a < pi - eps); 
	return a;
}

inline bool cmp(const pair <ldb, int> &a, const pair <ldb, int> &b)
{
	return a.ff < b.ff - eps || fabsl(a.ff - b.ff) < eps && a.ss < b.ss;
}

void solve() 
{
	ll result = (n * 1ll * (n - 1) * 1ll * (n - 2)) / 6ll;
	ll lin = 0;
	for (int i = 0; i < n; i++)
	{
		ev.clear();
		b.clear();
		int fst = 0, sec = 0, thd = 0;
		for (int j = 0; j < n; j++)
		{
			if (i == j) continue;
			int a = p[j].x - p[i].x;
			int b = p[j].y - p[i].y;
			ldb angle = adj(atan2l(b, a));
			::b.push_back(mp(angle, 0));
			::b.push_back(mp(adj(angle - pi), 1));
			if (angle > -pi - eps && angle < -pi / 2 - eps)
				fst++;
			else if (angle > -pi / 2 - eps && angle < -eps)
				sec++;
			else
				thd++;
			ev.push_back(mp(angle, 0));
			ev.push_back(mp(adj(angle - pi / 2), 1));
			ev.push_back(mp(adj(angle - pi), 2));
		}
		sort(ev.begin(), ev.end(), cmp);
		sort(b.begin(), b.end(), cmp);
		//cerr << "For " << p[i].x << " " << p[i].y << "\n";
		for (int j = 0; j < ev.size(); j++)
		{
		//	cerr << "angle " << ev[j].ff * 180 / pi << " type " << ev[j].ss << "\n";
		//	cerr << "fst " << fst << " sec " << sec << " thd " << thd << "\n";
			if (ev[j].ss == 0)
			{
		//		if (sec)
		//			cerr << "minused " << sec << "\n";
				result -= sec;
				fst--;
				thd++;
			}
			else if (ev[j].ss == 1)
			{
				sec--;
				fst++;
			}
			else if (ev[j].ss == 2)
			{
				thd--;
				sec++;
			}
		}
		for (int j = 0; j < b.size(); )
		{
			int k = j;
			int lf = 0, rg = 0;
			while (k < b.size() && fabsl(b[k].ff - b[j].ff) < eps)
			{
				if (b[k].ss == 0) lf++;
				else rg++;
				k++;
			}
			lin += lf * 1ll * rg;
		//	cerr << "Found linear lf " << lf << " rg " << rg << "\n";
			j = k;
		}
	}
	assert(lin % 2 == 0);
	cout << result - lin / 2ll << "\n";
}

int main() {

	load();
	solve();
	return 0;
}