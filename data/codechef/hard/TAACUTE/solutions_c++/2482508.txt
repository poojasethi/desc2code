#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<list>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iomanip>
#include<cmath>
#include<cctype>
#include<cstring>
#include<string>
#include<ctime>
#include<cassert>
using namespace std;
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;
#define FOR(i,a,b) for(int i=(a);i< (b);i++)
#define input(a) scanf("%d",&a)
#define CLEAR(a) memset((a),0,sizeof(a))
#define INF 1000000000
#define LL long long
#define PI 2*acos(0.0)
#define sq(a) (a)*(a)
#define dist(i,j) sq(p[i].x-p[j].x)+sq(p[i].y-p[j].y)
#define MAXN 2010
#define MAXD 10000
int n;
pair<int,int> point[MAXN];
pair<int,int> cur[2*MAXN];
bool in_first_half(pair<int,int> &i)
{
    if(i.second <0) return false;
    if(i.second==0 && i.first <0) return false;
    return true; 
}
bool compare(pair<int,int> i,pair<int,int> j)
{
   if(in_first_half(i)&&!in_first_half(j))
     return true;
   if(!in_first_half(i)&&in_first_half(j))
     return false;
   if(i.first*j.second -j.first*i.second >0)
     return true;
   else if(i.first*j.second-j.first*i.second==0)
     return abs(i.first+i.second)<abs(j.first+j.second);
   else
     return false;    
}
bool is_acute_angle(pair<int,int> &i,pair<int,int> &j)
{
    if(i.first*j.second - j.first*i.second <0)
      return false;
    if(i.first*j.second-j.first*i.second==0)
    {
       if(i.first*j.first<0)
         return false;
       if(i.second*j.second<0)
         return false;
       return abs(i.first+i.second) <= abs(j.first+j.second);                                      
    }
    if(i.first*j.first+i.second*j.second >0)
      return true;
    return false; 
}
LL compute(int index)
{
    int cur_acute_angle=0;
    int temp;
    for(int i=0;i<n;i++)
    {
      if(i!=index)
      {
        if(i<index)
          temp=i;
        else
          temp=i-1;
        cur[temp]=make_pair(point[i].first-point[index].first,point[i].second-point[index].second);          
      }      
    }  
    sort(cur,cur+(n-1),compare);
    for(int i=0;i<n-1;i++)
      cur[n-1+i]=cur[i];
    int index1=0,index2=0;
    while(index1!=n-1)
    {
      if(index2+1 < index1+(n-1) && is_acute_angle(cur[index1],cur[index2+1]))
         index2++;
      else
      {
        cur_acute_angle +=(index2-index1);
        index1++;  
      }                
    }
    return cur_acute_angle; 
}
LL choose(int k)
{
   return (k*(k-1LL)*(k-2LL))/6LL ;          
}
int main()
{
    input(n);
    int x,y;
    for(int i=0;i<n;i++)
    {
       input(x);input(y);
       point[i]=make_pair(x,y);       
    }
    sort(point,point+n);
    LL acute_angle=0;
    for(int i=0;i<n;i++)
      acute_angle += compute(i);
    LL tot_trig=choose(n);
    LL acute_trig=acute_angle-2*tot_trig;
    cout<<acute_trig;
    return 0;
}
