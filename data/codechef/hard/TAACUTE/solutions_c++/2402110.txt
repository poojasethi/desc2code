#include <iostream>
#include <algorithm>
#include <cstdio>
#include <complex>
using namespace std;

#define inc(i,a,b)              for(int i=a;i<b;++i)
#define dec(i,a,b)              for(int i=a;i>b;--i)

typedef complex<int> point;

int scalar(const point &a, const point &b) { return (real(conj(a)*b)); }
int vector(const point &a, const point &b) { return (imag(conj(a)*b)); }

int getQ(const point &a) {
    if(real(a)>0 && imag(a)>=0) return 1;
    if(real(a)<=0 && imag(a)>0) return 2;
    if(real(a)<0 && imag(a)<=0) return 3;
    if(real(a)>=0 && imag(a)<0) return 4;
    return 5;
}
bool byAngle(const point &a, const point &b) {
    int qa = getQ(a), qb = getQ(b);
    
    if(qa==qb) {
        if ( (imag(a)*real(b)) == (imag(b)*real(a)) ) return (scalar(a,a) < scalar(b,b));
        return ( (imag(a)*real(b)) < (imag(b)*real(a)) );
    }
    else return (qa<qb);
}
bool equalAngle(const point &a, const point &b) {
    if(byAngle(a,b) || byAngle(b,a)) return false;
    return true;
}
bool betterEqualAngle(const point &a, const point &b) {
    if(getQ(a)==getQ(b)) {
        if((imag(a)*real(b)) == (imag(b)*real(a))) return true;
    }
    return false;
}
bool liesBetween(const point &s, const point &f, const point &x) {
    if(getQ(x)==getQ(s)) {
        return (byAngle(s,x) || equalAngle(s,x));
    }
    if(getQ(x)==getQ(f)) {
        return (byAngle(x,f) && (!betterEqualAngle(x,f)));
    }
    return false;
}

const int maxN = 2007;

int n, c;
point p[maxN];

int main() {
    scanf("%d",&n);
    inc(i,0,n) {
        scanf("%d", &p[i].real());
        scanf("%d", &p[i].imag());
    }
    
    long long acute = 0;
    inc(i,0,n) {
        point pos[n];
        inc(j,0,n) {
            pos[j] = p[j]-p[i];
        }
        
        sort(pos,pos+n,byAngle);
        
        int last = 0;
        inc(j,0,n-1) {
            point end(pos[j]*point(0,1));
            
            if((last%(n-1))==j) last++;
            while(liesBetween(pos[j],end,pos[(last%(n-1))])) {
                if(last%(n-1) == j) break;
                last++;
            }
            
//             cerr << last << " " << j << "\n";
            acute += last - j - 1;
        }
//         cerr << acute << "\n";
    }
    
    long long sub = n;
    sub = sub*(sub-1)*(sub-2);
    sub /= 3;
    
//     cerr << acute << " " << sub << "\n";
    acute = acute - sub;
    printf("%lld\n",acute);
    
    return 0;
}