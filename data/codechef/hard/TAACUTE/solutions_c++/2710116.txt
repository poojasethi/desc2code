#include <stdio.h>
#include <math.h>
#include <time.h>
#include <algorithm>
#ifndef ONLINE_JUDGE
#define getchar_unlocked getchar
#endif

#define TOL 1e-9

double pi2;

int getInt()
{
	int N = 0;
	char ch = getchar_unlocked();
	while( ch == ' ' || ch == '\n' )
		ch = getchar_unlocked();
	while( ch >= '0' && ch <= '9' )
	{
		N = (N*10) + ch - '0';
		ch = getchar_unlocked();
	}
	return N;
}

double getAng( int x, int y )
{
	double ang = atan2( y, x );
	if( ang < 0 )
		ang += pi2;
	return ang;
}

int X[2001];
int Y[2001];
double angles[10000];
int main()
{
	int n, i, j, k;
	int acute,notAcute;
	long long ans = 0, st = 1;
	int inc;
	int tx, ty;
	double pi_2 = M_PI_2 - TOL;
	double tp2 = 3 * M_PI_2  + TOL;
	double ang;
	pi2 = 2*M_PI;
#ifndef ONLINE_JUDGE
	freopen("taacute.txt", "r", stdin );
#endif
	n = getInt();
	for( i = 0 ; i< n;++i )
	{
		X[i] = getInt();
		Y[i] = getInt();
	}
	
	for( i = 0 ; i< n;++i )
	{
		inc = 0;
		tx = X[i];
		ty = Y[i];
		for( j = 0; j < n ; ++j )
		{
			X[j] -= tx;
			Y[j] -= ty;
			if( i!=j)
				angles[inc++] = getAng( X[j], Y[j]);
		}
		std::sort( angles, angles + n -1 );
		for( j = 0; j < n -1 ; ++j )
		{
			angles[inc++] = ( angles[j] + (pi2) );
		}
		acute = 0;
		notAcute = 0;
		for( j = 0; j < n -1 ; ++j )
		{
			ang = angles[j];
			for(; angles[acute] - ang < pi_2; ++acute);
			for(; angles[notAcute] - ang < tp2; ++notAcute);
			ans+=(notAcute-acute);
		}
	}
	printf("%ld\n", (st*n*(n-1)*(n-2)/6)-(ans/2));
#ifndef ONLINE_JUDGE
	printf("%d\n", clock());
#endif
	return 0;
}
