#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#define f first
#define s second
#define ll long long
using namespace std;
#define mp make_pair

const double eps = 1e-9;
const double PI = M_PI;
double getAngle(int a, int b) {
    double x = atan2(a + 0.0, b);
    if(x < 0)
        x += 2 * PI;
    return x;
}

int main() {

    int n; cin >> n;
    ll bad = 0;

    vector<pair<int, int> > p(n);

    for(int i = 0; i < n; ++i) {
        cin >> p[i].f >> p[i].s;
        //cerr << atan2(p[i].s, p[i].f) << "\n";
    }
    
    for(int i = 0; i < n; ++i) {
    
        int tx = p[i].f, ty = p[i].s;

        for(int j = 0; j < n; ++j) {
            p[j].f -= tx;
            p[j].s -= ty;
        }
        
        vector<pair<double, int> > angles;
        for(int j = 0; j < n; ++j)
            if(i != j) 
                angles.push_back(mp(getAngle(p[j].s, p[j].f), j));
                
        sort(angles.begin(), angles.end());
        for(int j = 0; j < n - 1; ++j)
            angles.push_back(mp(angles[j].first + 2 * PI, j));
        
        int ind = 0, ind2 = 0;
    
        for(int j = 0; j < n - 1; ++j) {
            for(;angles[ind].first - angles[j].first < PI / 2 - eps;++ind);
            for(;angles[ind2].first - angles[j].first < 3 * PI / 2 + eps; ++ind2);
            bad += (ind2 - ind);
        }
    }
    
    cout << 1LL * n * (n - 1) * (n - 2) / 6 - bad / 2;

    return 0;
}