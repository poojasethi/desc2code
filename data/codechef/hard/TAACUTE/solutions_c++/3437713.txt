#include <bits/stdc++.h>
#define msg(x) cout << #x << " = " << x << endl
using namespace std;

const double eps = 1e-9; //10^-3 * 10^-3 ...

int n;
vector<pair<double, double> > pts, ori;

bool cmp(pair<double, double> a, pair<double, double> b) {
  if (a.second <= 0 && b.second > 0) return 1;
  if (a.second > 0 && b.second <= 0) return 0;
  if (a.second == 0 && b.second == 0) return (a.first < b.first);
  if (a.first * b.second - b.first * a.second > 0) return 1;
  return 0;
}

bool isacute(pair<double, double> a, pair<double, double> b) {
    if (a.first * b.second - a.second * b.first >= 0 && a.first * b.first + a.second * b.second > 0) {
        return 1;
    }
    return 0;
}

bool isacute2(pair<double, double> a, pair<double, double> b) {
    if(a.first * b.second - a.second * b.first > 0 && a.first * b.first + a.second * b.second > 0) {
        return 1;
    }
    return 0;
}

long long obtuse() {
    long long ans = 0;
    int j = 0, a = 1, b = 1, m = n - 1;
    sort(pts.begin(), pts.end(), cmp);
    while (j < m) {
        while(isacute(pts[j], pts[a]) && a < m) {
            a++;
        }
        while(!isacute2(pts[b], pts[j]) && b < m) {
           b++;
        }
        ans += 1LL * (b - a);
        j++;
    }
    return ans;
}

long long nC3(int a) {
    long long ans = (1LL * a * (a - 1) * (a - 2)) / 6;
    return ans;
}

int main()
{
    cin.sync_with_stdio(0); cin.tie(0);
    ori.clear();
    double x, y;
    long long res = 0, ans;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> x >> y;
        ori.push_back(make_pair(x, y));
    }
    for (int i = 0; i < n; i++) {
        pts.clear();
        for (int j = 0; j < n; j++) {
            if (j != i) {
                pts.push_back(make_pair(ori[j].first - ori[i].first, ori[j].second - ori[i].second));
            }
        }
        res += obtuse();
    }
    ans = nC3(n);
    cout << ans - res << "\n";
}
