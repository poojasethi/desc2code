from fractions import gcd

a = []
n = 0

dp1 = [[-1 for i in range(101)] for i in range(101)]
dp2 = [[-1.0 for i in range(101)] for i in range(101)]

def iswinning(g,taken):
	global n, a, dp1
	
	if dp1[g][taken]!= -1:
		return dp1[g][taken]
	
	if g==1:
		dp1[g][taken] = 1
	
	elif taken==n:
		dp1[g][taken] = 0
	
	else:
		tot = len([i for i in a if gcd(g,i) == g])
	
		if tot>taken and not iswinning(g,taken+1):
			dp1[g][taken] = 1
	
		for i in [j for j in a if gcd(j,g)!=g]:
			if not iswinning(gcd(g,i), taken+1):
				dp1[g][taken] = 1
		
		if dp1[g][taken] != 1:
			dp1[g][taken] = 0

	return dp1[g][taken]



def probwinning(g, taken):
	global a, n, dp2

	if dp2[g][taken] > -0.01:
		return dp2[g][taken]

	if g == 1:
		dp2[g][taken] = 1.0

	elif taken == n:
		dp2[g][taken] = 0.0

	else:
		tot, ans = len([i for i in a if gcd(g,i) == g]) , 0.0
		
		if tot>taken:
			ans += (1 - probwinning(g,taken+1))*(tot-taken)

		for i in [j for j in a if gcd(j,g)!=g]:
			ans += 1 - probwinning(gcd(g,i), taken+1)
		
		ans /= (n-taken)

		dp2[g][taken] = ans

	return dp2[g][taken]

def fn():
	global a,n,dp1,dp2
	dp1 = [[-1 for i in range(101)] for i in range(101)]
	dp2 = [[-1.0 for i in range(101)] for i in range(101)]

	n = int(raw_input())
	a = map(int, raw_input().strip().split())

	gg = 0
	for i in a:
		gg = gcd(gg,i)

	if gg>1:
		print n%2, str(n%2)+".0000"
		return

	print iswinning(0,0), '{0:.4f}'.format(probwinning(0,0))

t = int(raw_input())
for i in range(t):
	fn()



