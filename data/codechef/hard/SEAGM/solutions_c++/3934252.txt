#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <bits/stdc++.h>
#define mem(x,y) memset(x,y,sizeof(x));
using namespace std;

const int maxn = 200;

int T,n,a[maxn];
int ans1,me[maxn][maxn];
double ans2,met[maxn][maxn];

int solve1(int x,int y) {
    int &t = me[x][y],res = 0;
    if (t == -1) {
        int w = 0;
        if (y == n) return t = 0;
        for (int i = 1;i <= n; i++)
            if (__gcd(x,a[i]) == x) w++;
        if (y < w) res = res | (!solve1(x,y+1));
        if (!res)
        for (int i = 1;i <= n; i++) {
            if (__gcd(x,a[i]) != x && __gcd(x,a[i]) > 1)
                res = res | (!solve1(__gcd(x,a[i]),y+1));
                if (res) break;
        }
        return t = res;
    }
    return t;
}

double solve2(int x,int y) {
    double &t = met[x][y];
    if (t <= -0.5) {
        if (x == 1) return t = 1;
        if (y == n) return t = 0;
        int w = 0; double res = 0;
        for (int i = 1;i <= n; i++)
            if (__gcd(x,a[i]) == x) w++;
        if (y < w) res += (1-solve2(x,y+1))*1.0*(w-y)/(n-y);
        for (int i = 1;i <= n; i++) {
            if (__gcd(x,a[i]) != x){
                res += (1-solve2(__gcd(x,a[i]),y+1))*1.0/(n-y);
            }
        }
        if (res < 1e-8) res = 0;
        return t = res;
    }
    return t;
}

int main() {
    scanf("%d",&T);
    for (int kase = 1;kase <= T; kase++) {
        scanf("%d",&n); bool flag = false;
        int t;
        mem(me,-1);
        for (int i = 1;i <= n; i++) {
                scanf("%d",&a[i]);
            t = i==1?a[i]:__gcd(t,a[i]);
        }
        if (t != 1) ans1 = n%2;
        else ans1 = solve1(0,0);
        for (int i = 0;i < maxn; i++)
            for (int j = 0;j < maxn; j++) met[i][j] = -1;
        ans2 = solve2(0,0);
        printf("%d %.4lf\n",ans1,ans2);
    }
    return 0;
}
