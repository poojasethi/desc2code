#include <bits/stdc++.h>
using namespace std;
#define LL long long
#define LD long double
int dp[210][210];
int N;
int A[110];
LD Dp[210][210];
int calc(int currentgcd,int moves)
{
	int &Res = dp[currentgcd][moves];
	if(Res==-1)
	{
		if(currentgcd==1)
			return Res = 1;
		if(moves==N)
			return Res = 0;
		Res = 0;
		int total = 0;
		for(int i = 0;i<N;i++)
		{
			if(__gcd(A[i],currentgcd)==currentgcd)
				total+=1;
		}
		if(total>moves)
		{
			if(calc(currentgcd,moves+1)==0){
				Res = 1;
			}
		}
		for(int i = 0;i<N;i++)
		{
			int val = __gcd(A[i],currentgcd);
			if(val!=currentgcd){
				if(calc(val,moves+1)==0)
					Res = 1;
			}
		}
	}
	return Res;
}
LD Calc(int gcd,int taken)
{
	LD &Res = Dp[gcd][taken];
	if(Res==-1.0)
	{
		if(gcd==1)
			return Res = 1.0;
		if(taken==N)
			return Res = 0.0;
		int tot = 0;
		Res = 0.0;
		for(int i = 0;i<N;i++)
		{
			if(__gcd(A[i],gcd)==gcd)
				tot+=1;
		}
		Res+=(1.0 - Calc(gcd,taken+1))*(max(0,tot - taken));
		for(int i = 0;i<N;i++)
		{
			int val = __gcd(gcd,A[i]);
			if(val!=gcd){
				Res+=(1.0 - Calc(val,taken+1));
			}
		}
		Res/=(N-taken);
	}
	return Res;	
}
int main()
{
	ios_base::sync_with_stdio(false);
	int Testcases;
	cin>>Testcases;
	while(Testcases--)
	{
		cin>>N;
		for(int i = 0;i<N;i++)
			cin>>A[i];
		cout.precision(4);
		memset(dp,-1,sizeof(dp));
		for(int i =0;i<=100;i++)
		{
			for(int j = 0;j<=100;j++)
			{
				Dp[i][j] = -1.0;
			}
		}
		printf("%d %.4Lf\n",calc(0,0),Calc(0,0));
	}
	return 0;
}