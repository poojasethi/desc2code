#include<iostream>
#include<cstring>
#include<stdlib.h>
#include<stdio.h>
#include<cmath>
#include<stack>
#include<queue>
#include<map>
#include<utility>
#include<algorithm>

using namespace std;

#define ll long long
#define INF 2000000000
#define pb push_back
#define pob pop_back
#define f first
#define s second
#define mp make_pair

bool dp[101][101];
bool seen[101][101]={0};
double dpp[101][101];
bool seen1[101][101]={0};
int a[100];

int gcd (int a, int b)
{
  int c;
  while ( a != 0 ) {
    c = a; a = b%a;  b = c;
  }
  return b;
}

bool win(int g,int t,int n){
  if(t==n)
    return 0;
  if(seen[g][t])
    return dp[g][t];
  seen[g][t]=1;
  int temp=0;
  for(int i=0;i<n;i++){
    if(gcd(a[i],g)==g && temp<t)
      temp++;
    else if(!win(gcd(g,a[i]),t+1,n) && gcd(g,a[i])!=1){
      dp[g][t]=1;
      return 1;
    }
  }
  dp[g][t]=0;
  return 0;
}

double prob(int g,int t,int n){
  if(t==n)
    return 0;
  if(seen1[g][t])
    return dpp[g][t];
  seen1[g][t]=1;
  int temp=0;
  dpp[g][t]=0;
  for(int i=0;i<n;i++){
    if(gcd(a[i],g)==g && temp<t)
      temp++;
    else if(gcd(g,a[i])!=1){
      dpp[g][t]+=(1-prob(gcd(g,a[i]),t+1,n));
    }
  }
  dpp[g][t]/=(n-t);
  return dpp[g][t];
}

int main(){
  int t=1;
  scanf("%d",&t);
  while(t--){
    memset(seen,0,sizeof(bool)*101*101);
    memset(seen1,0,sizeof(bool)*101*101);
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
      cin>>a[i];
    }
    if(win(0,0,n))
      cout<<1<<" ";
    else
      cout<<0<<" ";
    printf("%.4f\n",prob(0,0,n));
  }
  return 0;
}
