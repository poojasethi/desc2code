#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <sstream>

typedef long long int li;
typedef long long int lli;

#define F(i, n) for(i = 0;i < n; ++i)
#define FI(i, st, ft) for(i = st;i <= ft; ++i)
#define pb(a, b) a.push_back(b)
#define M 1000000

using namespace std;

li a[124];

struct node
{
	int f;
	double val;
	int v;
}dp[124][124];

li gcd ( li a, li b )
{
  if ( a==0 ) return b;
  return gcd ( b%a, a );
}

struct node rec(int v[124], li g, li turns, li n)
{
	
	if(g == 1 && turns % 2 == 1) { struct node temp; temp.val = 0.00; temp.f = 0;return temp; }
	else if(g == 1) { struct node temp; temp.val = 1.00; temp.f = 1;return temp; }
	
	if(turns >= n && turns % 2 == 1) { struct node temp; temp.val = 1.00; temp.f = 1;return temp; }
	else if(turns >= n) { struct node temp; temp.val = 0.00; temp.f = 0;return temp; }
	
	li j, f;
	double ans = 0.00;
	
	if(turns % 2 == 0) f = 0;
	else f = 1;
	
	if(dp[turns][g].v != 0) return dp[turns][g];
	
	F(j, n){
		if(v[j] == 0){
			v[j] = 1;
			struct node temp = rec(v, gcd(g, a[j]), turns + 1, n);
			ans = ans + ((double)1.00 / ((double)n - turns)) * temp.val; 
			v[j] = 0;
			if(turns % 2 == 0) f = (f | temp.f);
			else f = (f & temp.f);	
		}	
	}
	
	dp[turns][g].f = f;
	dp[turns][g].v = 1;
	dp[turns][g].val = ans;
	return dp[turns][g];
}

int main()
{
//	freopen("input.txt", "r", stdin);
	
	li t, n, i;
	cin >> t;
	while(t--){
		cin >> n;
		F(i, n){
			cin >> a[i];
		}
		int v[124];
		
		memset(v, 0, sizeof(v));
		memset(dp, 0, sizeof(dp));
		struct node ans;
		ans =  rec(v, 0, 0, n);
		printf("%d %0.4lf\n", ans.f, ans.val);
	}	
	return 0;
}