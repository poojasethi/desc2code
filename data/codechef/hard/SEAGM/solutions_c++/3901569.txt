#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#define N 100
using namespace std;

int dp1[N+5 ][ N+5 ] ,A[ N+5 ];
double dp2[ N+5 ][ N+5 ];
bool done[ N+5 ][ N+5 ];
int n;

int f1( int g , int ct ){
	if( g==1 ) return 1;
	if( ct==n ) return 0;
	int &ret = dp1[ g ][ ct ];
	if( ret!=-1 ) return ret;
	ret = 0;
	if( g==0 ){
		for( int i=0 ; i<n ; ++i){
		 	if( !f1( A[ i ] , ct+1 ) ) ret=1;
		 }
		 return ret;
	}
	// < 
	int ac =0;
	for( int i=0 ; i<n ; ++i){
		 if( (A[ i ] % g) !=0 ){
		 	if( !f1( __gcd( A[ i ] , g) , ct+1 ) ) ret=1;
		 	ac++;
		 }
	}
	// =
	int rem = ( n - ct  - ac );
	for( int i=0 ; i<rem ; ++i){
		if( !f1( g , ct+1 ) ) ret=1;
		break;
	}
	return ret;
}

double f2( int g , int ct ){
	if( g==1 ) return 1.0;
	if( ct==n ) return 0.0;
	if( done[ g ] [ ct ] ) return dp2[ g ][ ct ];
	done[ g ][ ct ] =1;
	double &ret =  dp2[ g ][ ct ];
	ret = 0.0;
	if( g==0 ){
		for( int i=0 ; i<n ; ++i){
		 	ret += ( 1 - f2( A[ i ] , ct+1 ) ) ;
		}
		ret /= n;
		return ret;
	}
	// < 
	int ac =0 ;
	for( int i=0 ; i<n ; ++i){
		 if( (A[ i ] % g) !=0 ){
		 	ret += ( 1 - f2 ( __gcd( A[ i ] , g) , ct+1 ) );
		 	ac++;
		 }
	}
	// =
	int rem = ( n - ct  - ac );
	for( int i=0 ; i<rem ; ++i){
		ret += ( 1 - f2( g , ct+1 ) ); 
	}
	ret /= ( n - ct );
	return ret;
}

void doit(){
	scanf( "%d" , &n );
	for( int i=0 ; i<n ; ++i){
		scanf( "%d" , &A[ i ] );
	}
	memset( dp1 , -1 , sizeof( dp1) );
	memset( done , 0 , sizeof( done ) );
	printf("%d %.4lf\n" , f1( 0 , 0 ) , f2( 0 , 0 ) );
}

int main(){
	int t;
	scanf( "%d" , &t );
	while( t-- ) doit();
}