#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-7;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
//#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, a[105];
bool owas[105][105], rwas[105][105];
int of[105][105];
double rf[105][105];

int gcd(int a, int b){
  while(a && b){
    if(a > b) a %= b; else
    b %= a;
  }
  return a + b;
}

double rgo(int v, int g){
  double &res = rf[v][g];
  if(rwas[v][g]){
    return res;
  }
  rwas[v][g] = true;
  res = 0;
  if(g == 1) return res = 1.0;
  if(v == n) return res;
  int all = 0;
  forn(i, n){
    if(gcd(a[i], g) == g){
      ++all;
    }
  }
  if(v < all){
    res += (all - v + .0) * (1.0 - rgo(v + 1, g));
  }
  forn(i, n){
    int cur = gcd(a[i], g);
    if(cur != g)
      res += 1.0 - rgo(v + 1, cur);
  }
  res /= (n - v + .0);
  return res;
}

int ogo(int v, int g){
  int &res = of[v][g];
  if(owas[v][g]){
    return res;
  }
  owas[v][g] = true;
  res = 0;
  if(g == 1) return res ^= 1;
  if(v == n) return res;
  int all = 0;
  forn(i, n){
    if(gcd(a[i], g) == g){
      ++all;
    }
  }
  if(v < all){
    res |= ogo(v + 1, g) ^ 1;
    if(res) return res;
  }
  forn(i, n){
    int cur = gcd(a[i], g);
    if(cur != g)
      res |= ogo(v + 1, cur) ^ 1;
    if(res) return res;
  }
  return res;
}

void Solve(){
  scanf("%d", &n);
  forn(i, n){
    scanf("%d", a + i);
  }
  for(int i = 0; i <= 100; ++i){
    for(int j = 0; j <= 100; ++j){
      owas[i][j] = rwas[i][j] = false;
    }
  }
  printf("%d %.4lf\n", ogo(0, 0), rgo(0, 0));
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  int t; scanf("%d", &t);
  forn(i, t) Solve();
  return 0;
}
