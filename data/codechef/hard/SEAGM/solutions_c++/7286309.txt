#include<bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define ull unsigned long long int
#define maxN 1000006
#define maxW 1005
#define pb push_back
#define mp make_pair
#define INF (((ll)1000000000) * ((ll)1000000000))
#define e 2.7182818284590452353602874
#define maxT 1000000
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define rep(i,N) for(int i=0;i<N;i++)

int A[104],dp[104][104];
long double dp2[104][104];

int N,M;


int optimal(int taken,int g) {

	if(dp[taken][g]!=-1)
		return dp[taken][g];
	//cout<<taken<<" "<<gcd<<"\n";

	if(g==1)		//current state is a win
		return dp[taken][g]=1;

	if(taken==N)	//current state is losing
		return dp[taken][g]=0;

	//All numbers taken out till now are multiples of g
	int total=0;
	for(int i=0;i<N;i++)
		if(__gcd(A[i],g)==g)
			total++;		//all multiples of g

	if(taken<total)
		if(optimal(taken+1,g)==0)
			return dp[taken][g]=1;

	for(int i=0;i<N;i++)
		if(__gcd(A[i],g)!=g)
			if(optimal(taken+1,__gcd(A[i],g))==0)
				return dp[taken][g]=1;
	return dp[taken][g]=0;
}



long double random(int taken,int g) {

	if(dp2[taken][g]>=-0.5)	//dp2[taken][mask]!=-1
		return dp2[taken][g];
	//cout<<taken<<" "<<gcd<<"\n";

	if(g==1)		//current state is a win
		return dp2[taken][g]=1.0;

	if(taken==N)	//current state is losing
		return dp2[taken][g]=0.0;

	//All numbers taken out till now are multiples of g
	int total=0;
	for(int i=0;i<N;i++)
		if(__gcd(A[i],g)==g)
			total++;		//all multiples of g

	long double ans=0;
	if(taken<total) {
		ans+=(1-random(taken+1,g))*1.0*(total-taken);
		ans/=(N-taken)*1.0;
	}

	for(int i=0;i<N;i++)
		if(__gcd(A[i],g)!=g) {
			long double val=(1-random(taken+1,__gcd(A[i],g)))*1.0 ;
			val/=(N-taken)*1.0;
			ans+=val;
		}
	if(ans<1e-8)
		ans=0;
	return dp2[taken][g]=ans;
}


int main() {

//cin.sync_with_stdio(0);
//cin.tie(0);

int T;
cin>>T;

//2^N subsets possible
while(T--) {
	cin>>N;
	for(int i=0;i<N;i++)
		cin>>A[i];
	memset(dp,-1,sizeof dp);
	memset(dp2,-1.0,sizeof dp2);
	cout<<optimal(0,0)<<" ";
	printf("%0.4Lf\n",random(0,0));
}

return 0;
}
