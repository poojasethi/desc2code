#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>

using namespace std;

int n;
int p[101];
int dp[101][101];
double mem[101][101];

int gcd(int a, int b)
{
        if(!a || !b) return max(a, b);
        return __gcd(a, b);
}

int solve1(int pos, int g)
{
    if(dp[pos][g] != -1) return dp[pos][g];
    int res = 0;

    for(int i = pos; i < n; i++) {
        int x = gcd(p[i], g);
        if(x == 1) continue;
        swap(p[pos], p[i]);
        if(!solve1(pos+1, x)) res = 1;
        swap(p[pos], p[i]);
    }
    return dp[pos][g] = res;
}

double solve2(int pos, int g)
{
    if(mem[pos][g] > -0.5) return mem[pos][g];
    double res = 0;

    for(int i = pos; i < n; i++) {
        int x = gcd(p[i], g);
        if(x == 1) continue;
        swap(p[pos], p[i]);
        res += (1.0 - solve2(pos+1, x))/(n-pos);
        swap(p[pos], p[i]);
    }
    return mem[pos][g] = res;
}

int main()
{
    int t;

    cin >> t;

    while(t--) {
        cin >> n;
        memset(dp, -1, sizeof(dp));
        memset(mem, -1, sizeof(mem));
        for(int i = 0; i < n; i++) {
            cin >> p[i];
        }

        printf("%d %.4f\n", solve1(0,0), solve2(0,0));
    }
}
