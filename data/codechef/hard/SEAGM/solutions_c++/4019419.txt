#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<sstream>

#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef vector<string> vs; 
typedef pair<int,int> pii;
typedef long long int lld;
typedef long double Lf;
typedef unsigned long long int llu;

#define sz(a)                        int((a).size()) 
#define pb                           push_back 
#define mp                           make_pair
#define F                            first
#define S                            second
#define present(c,x)                 ((c).find(x) != (c).end()) 
#define cpresent(c,x)                (find(all(c),x) != (c).end())
#define tr(c,i)                      for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define rtr(c,i)                      for(typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); i++)
#define all(c)                       (c).begin(),(c).end()
#define si(n)                        inp(n)
#define sl(n)                        scanf("%lld",&n)
#define sf(n)                        scanf("%f",&n)
#define sd(n)                        scanf("%lf",&n)
#define ss(n)                        scanf("%s",n)
#define sii(n,m)		     inp(n);inp(m)
#define siii(n,m,r)		     inp(n);inp(m);inp(r)

#define abs(x)                       ((x)<0?-(x):(x))
#define fill(a,v)                    memset((a),(v),sizeof (a))
#define INF                          INT_MAX
#define LINF                         (long long)1e18
#define EPS                          1e-9
#define MODBY 1000000007
#define MAX     

#define getcx getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=getcx();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
n=n*sign;
}

inline int gcd(int a,int b)
{
	if(b==0)
		return a;
	if(a==0)
		return b;
	return gcd(b,a%b);
}

int n,a[110];
int memo[110][110];
double memo1[110][110];
int winning(int g,int taken)
{
	int win = 0;
	if(memo[g][taken]!=-1)
		win = memo[g][taken];
	else
	{
		if(g==1)
			win = 1;
		else if(taken == n)
			win = 0;
		else
		{
			int tot = 0;
			for(int i=0;i<n;i++)
				if(gcd(g,a[i])==g)
					tot++;
			if(tot>taken)
			{
				if(tot>taken && !winning(g,taken+1))
					win = 1;
			}
			for(int i=0;i<n;i++)
				if(gcd(a[i],g)!=g)
					if(!winning(gcd(a[i],g),taken+1))
						win = 1;
		}
	}
	memo[g][taken] = win;
	return win;
}

double probWinning(int g, int taken)
{
	double prob = 0;
	if(memo1[g][taken] != -1)
		prob = memo1[g][taken];
	else
	{
		if(g == 1)
			prob = 1;
		else if(taken == n)
			prob = 0;
		else
		{
			int tot = 0;
			for(int i=0;i<n;i++)
				if(gcd(g,a[i])==g)
					tot++;
			if(tot>taken)
				prob+=(1 - probWinning(g,taken+1))*(tot-taken)/(n-taken);
			for(int i=0;i<n;i++)
			{
				if(gcd(a[i],g) != g)
					prob+= (1 - probWinning(gcd(g,a[i]),taken+1))*1.0/(n-taken);
			}
			if(prob < 1e-8)
				prob = 0;
		}
		
	}
	memo1[g][taken]=prob;
	return prob;
}

int main()
{
	int t;
	inp(t);
	while(t--)
	{
		inp(n);
		memset(memo,-1,sizeof(memo));
		for(int i=0;i<110;i++)
			for(int j=0;j<110;j++)
				memo1[i][j] = -1;
		for(int i=0;i<n;i++)
			inp(a[i]);
		printf("%d %.4f\n",winning(0,0),probWinning(0,0));
	}
	return 0;
}
