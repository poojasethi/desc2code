#include <iostream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <math.h>
#include <cstdio>
#include <assert.h>
 
#define FOR(i,x,y) for(int i=(x);i<(y);i++)
#define RFOR(i,x,y) for(int i=(x);i>=(y);i--)
#define ABS(x) ((x)>0?(x):-(x))
#define SQ(x) ((x)*(x))
#define mset(x,y) memset(x,y,sizeof(x))
#define INF 1000000000
#define MOD 1000000007
#define pb(X) push_back(X) 
 
using namespace std;
 
typedef long long int lli;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;
typedef vector<double> vd;
 
int arr[110];
int n;
 
lli ways1[110][110],ways2[110][110];
lli gcnt[110];
ld fact[110];
 
int gcd(int a, int b)
{
	if(a==0) return b;
	if(b==0) return a;
	return gcd(b,a%b);
}
 
void init()
{
	fact[0]=1.0;
	for(int i=1;i<110;i++) fact[i]=fact[i-1]*(ld)i;
}
 
 
bool winning(int k)
{
	if(arr[k]==1) return 0;
	vector<int> primes;
	int num=arr[k];
	for(int i=2;i<=num;i++) if(num%i==0)
	{
		primes.pb(i);
		while(num%i==0) num/=i;
	}
	if(primes.size()==1)
	{
		int cnt=0;
		for(int i=0;i<n;i++) if(arr[i]%primes[0]==0) cnt++;
		if(cnt%2==0) return 0;
		return 1;
	}
	if(primes.size()==2)
	{
		int a=0,b=0,ab=0;
		for(int i=0;i<n;i++)
		{
			if(arr[i]%primes[0]==0) a++;
			if(arr[i]%primes[1]==0) b++;
			if(arr[i]%(primes[0]*primes[1])==0) ab++;
		}
		if(a-ab==0&&b-ab==0)
		{
			if(ab%2==0) return 0;
		}
		if(a-ab!=0&&a%2==0) return 0;
		if(b-ab!=0&&b%2==0) return 0;
		return 1;
	}
	if(primes.size()==3)
	{
		int a=0,b=0,c=0,ab=0,bc=0,ca=0,abc=0;
		for(int i=0;i<n;i++)
		{
			if(arr[i]%primes[0]==0) a++;
			if(arr[i]%primes[1]==0) b++;
			if(arr[i]%primes[2]==0) c++;
			if(arr[i]%(primes[0]*primes[1])==0) ab++;
			if(arr[i]%(primes[1]*primes[2])==0) bc++;
			if(arr[i]%(primes[2]*primes[0])==0) ca++;
			if(arr[i]%(primes[0]*primes[1]*primes[2])==0) abc++;
		}
 
		if(ab-abc==0&&bc-abc==0&&ca-abc==0&&a-abc==0&&b-abc==0&&c-abc==0)
		{
			if(abc%2==0) return 0;
		}
		if(ab-abc!=0)
		{
			if(a-ab==0&&b-ab==0)
			{
				if(ab%2==0) return 0;
			}
		}
		if(bc-abc!=0)
		{
			if(b-bc==0&&c-bc==0)
			{
				if(bc%2==0) return 0;
			}
		}
		if(ca-abc!=0)
		{
			if(c-ca==0&&a-ca==0)
			{
				if(ca%2==0) return 0;
			}
		}
		if(a-ab-ca+abc!=0)
		{
			if(a%2==0) return 0;
		}
		if(b-bc-ab+abc!=0)
		{
			if(b%2==0) return 0;
		}
		if(c-bc-ca+abc!=0)
		{
			if(c%2==0) return 0;
		}
		return 1;
	}
}
void solve1()
{
	for(int i=0;i<n;i++) if(winning(i))
	{
		printf("1 ");
		return;
	}
	printf("0 ");
}
 
void solve2()
{
	mset(ways1,0);
	mset(ways2,0);
 
	ways1[0][0]=ways2[0][0]=1;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<=100;j++)
			for(int k=0;k<=100;k++)
				ways2[gcd(j,arr[i])][k+1]+=ways1[j][k];
 
		for(int j=0;j<=100;j++)
			for(int k=0;k<=100;k++)
				ways1[j][k]=ways2[j][k];
	}
 
	for(int i=0;i<110;i++)
	{
		gcnt[i]=0;
		for(int j=0;j<n;j++) if(gcd(arr[j],i)==1) gcnt[i]++;
	}
 
	ld prob=0.0;
	lli wins;
	for(int i=1;i<n;i+=2)
	{
		wins=0;
		for(int j=2;j<110;j++) wins+=ways1[j][i]*gcnt[j];
		prob+=(ld)wins*fact[i]*fact[n-i-1]/fact[n];
	}
	wins=0;
	if(n%2==1)
	{
		for(int j=2;j<110;j++) wins+=ways1[j][n];
		prob+=(ld)wins;
	}
 
	printf("%.4Lf\n",prob);
}
 
int main()
{
	#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    #endif
 
    init();
    int t;
    scanf("%d",&t);
    while(t--)
    {
    	scanf("%d",&n);
    	for(int i=0;i<n;i++) scanf("%d",&arr[i]);
    	solve1();
    	solve2();
    	winning(1);
    }
 
    return 0;
}