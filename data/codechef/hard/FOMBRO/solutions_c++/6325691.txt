// LUCIFER <3 SLS <3

#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long int
#define mp make_pair
#define get getchar_unlocked

ll scan()
{
    ll n = 0, ch = get(), sign = 1;
    while (ch < '0' || ch > '9')
        ch = get();
    while (ch >= '0' && ch <= '9') {
        n = (n << 3) + (n << 1) + ch - '0';
        ch = get();
    }
    return (n*sign);
}

ll dpl[1000011];
ll dpm[1000011];
ll dpr[1000011];

ll power(ll a, ll b, ll m)
{
    if (b == 0)
        return 1;
    ll x = power(a, b/2, m);
    if (b % 2)
        return (((x*x)%m)*a)%m;
    else
        return (x*x)%m;
}

int main()
{
    ll k, t, n, m, q, i, l, r, ans, tmp;
    t = scan();
    while (t--) {
        n = scan();
        m = scan();
        q = scan();
        dpl[0] = 1;
        k = n/2;
        for (i = 1; i <= k; i++)
            dpl[i] = (dpl[i-1]*power(i, i-1, m))%m;
        dpr[n+1] = 1;
        for (i = n; i >= k; i--)
            dpr[i] = (dpr[i+1]*power(i,n-i+1,m))%m;
        dpm[0] = 1;
        if (n % 2)
            dpm[0] = k+1;
        l = k;
        r = l+1;
        if (n % 2)
            r++;
        for (i = 1; l > 0; r++, l--, i++)
            dpm[i] = (dpm[i-1]*((l*r)%m))%m;
        while (q--) {
            r = scan();
            r = min(r,n-r);
            ans = (dpl[r]*dpr[n-r+1])%m;
            tmp = max(0LL,n/2-r);
            ans = (ans*power(dpm[tmp],r,m))%m;
            printf("%lld\n", ans);
        }
    }
    return 0;
}
