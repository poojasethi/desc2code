#include<bits/stdc++.h>

#define s(a) scanf("%d",&a)
#define ss(a) scanf("%s",a)

#define MP           make_pair
#define PB           push_back
#define REP(i, n)    for(int i = 0; i < n; i++)
#define INC(i, a, b) for(int i = a; i <= b; i++)
#define DEC(i, a, b) for(int i = a; i >= b; i--)
#define CLEAR(a)     memset(a, 0, sizeof a)

using namespace std;

typedef long long          LL;
typedef unsigned long long ULL;
typedef vector<int>        VI;
typedef pair<int, int>     II;
typedef vector<II>         VII;

int m;
int size;
int tree[3000006];
void build(int n)
{
      size = 1;
      while(size<n)
            size = size<<1;
      REP(i,n)
            tree[i+size] = i+1;
      DEC(i,size-1,1)
            tree[i] = (tree[2*i]*1LL*tree[2*i+1])%m;

}
int query(int l,int r)
{
    int ans = 1;  
    for(l=l+size,r=r+size;l<r;l>>=1,r>>=1)
    {
            if(l&1) ans = (ans*1LL*tree[l++])%m;
            if(r&1) ans = (ans*1LL*tree[--r])%m;
    }
    return ans;
}
int modexp(int a,int b,int m)
{
      if(b==0)return 1%m;
      if(b==1)return a%m;
      int temp = modexp(a,b/2,m);
      temp = (temp*1LL*temp)%m;
      if(b&1)temp = (temp*1LL*a)%m;
      return temp;
}
int dp1[1000006];
int dp2[1000006];
int main()
{
      int t;
      s(t);
      while(t--)
      {
            int n,q,Q;
            s(n);s(m);s(q);
            dp1[1] = 1;
            INC(i,2,n)
            {
                  int temp = modexp(i,i-1,m);
                  dp1[i] = (dp1[i-1]*1LL*temp)%m;
            }
            dp2[n] = n;
            DEC(i,n-1,1)
            {
                  int temp = modexp(i,n-i+1,m);
                  dp2[i] = (dp2[i+1]*1LL*temp)%m;
            }
            build(n);
            while(q--)
            {
                  s(Q);
                  Q = min(Q,n-Q);
                  int t1 = dp1[Q];
                  int t2 = dp2[n-Q+1];
                  int t3;
                  if(Q!=n-Q)
                        t3 = query(Q+1-1,n-Q);
                  else t3 = 1;
                  t3 = modexp(t3,Q,m);
                  //printf("t1 = %d, t2 = %d, t3 = %d\n",t1,t2,t3);
                  t3 = (t3*1LL*t2)%m;
                  t3 = (t3*1LL*t1)%m;
                  printf("%d\n",t3);
            }
      }
      return 0;
}
