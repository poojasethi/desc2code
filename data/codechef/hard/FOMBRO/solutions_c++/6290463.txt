//Bismillahir Rahmanir Rahmeem

#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string.h>
#include <stdlib.h>
#include<map>
#include<queue>
#include<stack>
#include<utility>
#include<stdlib.h>
#include<string>
#include<set>
#include<iomanip>
#define INF 1e9
#define lld long long int
#define CLR(a) memset(a,0,sizeof(a))
#define RESET(a) memset(a,-1,sizeof(a))
#define act(a) memset(a,1,sizeof(a))
#define setinf(a) memset(a,0b01111111,sizeof(a));
#define FRO freopen("input.txt","r",stdin);
#define FROut freopen("output.txt","w",stdout);
#define ui unsigned int
#define came "came"
#define pii pair<int,int>
#define plii pair<long long int, int>
#define pll pair<long long,long long>
#define pic pair<int,char>
#define ninf (-1e9)-2
#define inf (1e9)+2
#include<fstream>
#include <assert.h>
#include <bitset>

#define foreach(x) for(__typeof(x.begin()) it=x.begin(); it!=x.end();it++)

using namespace std;
#define pid pair<int,double>
#define pdi pair<double,int>

#define PB push_back
#define MP make_pair
#define pri(x) printf("%d\n",x)
#define pi 3.14159265359
#define X first
#define Y second
#define vit vector<int>::iterator

lld memo1[1000005];
lld memo2[1000005];

int n,m,q;

lld pow(lld b,lld p, lld mod)
{
   lld ret=1;
   while(p)
   {
       if(p%2!=0)
       {
           ret=(ret*b)%mod;
       }
       p/=2;
       b=(b*b)%mod;
   }
   return ret;
}

lld seg[4000005];

void build(int node, int l, int r)
{
    if(l==r)
    {
        seg[node]=l%m;
    }
    else
    {
        build(2*node,l,(l+r)/2);
        build(2*node+1,(l+r)/2+1,r);
        seg[node]=(seg[2*node]*seg[2*node+1])%m;
    }
}

lld query(int node, int l, int r, int ql, int qr)
{
    if(ql<=l && r<=qr)
    {
        return seg[node];
    }
    else if(qr<l || r<ql)
    {
        return 1;
    }
    else
    {
        lld x=query(2*node,l,(l+r)/2,ql,qr);
        x=(x*query(2*node+1,(l+r)/2+1,r,ql,qr))%m;
        return x;
    }
}

void solve()
{
    scanf("%d %d %d",&n,&m,&q);
    int i,j;
    memo1[0]=1;
    for(i=1;i<=n/2;i++)
    {
        memo1[i]=(pow(i,i-1,m)*memo1[i-1])%m;
    }
    memo2[n+1]=1;
    for(i=n;i>=n/2;i--)
    {
        memo2[i]=(pow(i,n-i+1,m)*memo2[i+1])%m;
    }
    //0 1 2 3 3 3 3 [3 2 1]
    build(1,1,n);

    while(q--)
    {
        int r;
        scanf("%d",&r);
        r=min(r,n-r);
        lld res=memo1[r];
        res=(res*memo2[n-r+1])%m;
        //cout<<memo2[n-r+1]<<endl;
        res=(res*pow(query(1,1,n,r+1,n-r),r,m))%m;
        printf("%lld\n",res);
    }
}

int main()
{
    //FRO
    int t;
    scanf("%d",&t);
    while(t--)
    {
        solve();
    }
    return 0;
}
