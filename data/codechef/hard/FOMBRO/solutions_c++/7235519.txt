#include<bits/stdc++.h>

using namespace std;

#define ll long long int
#define ull unsigned long long int
#define maxN 1000006
#define maxW 1005
#define MOD 1000000007
#define pb push_back
#define mp make_pair
#define INF (((ll)1000000000) * ((ll)1000000000))
#define e 2.7182818284590452353602874
#define maxT 1000000
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define rep(i,N) for(int i=0;i<N;i++)

ll G[maxN],C[maxN],A[maxN],B[maxN];
ll dp[10][maxN];
int N,M;

ll fpow(ll a,ll n) {
ll result = 1;
ll m=M;
while(n) {
if((n&1))
result = (result*a)%m;
a = (a*a)%m;
n >>= 1;
}
return result%m;
}

int fm[100];
int sz;
void factorise(int x) {
sz=0;
for(int i=2;i<=N;i++) {
 if(x%i==0) 
  fm[sz++]=i;
 while(x%i==0)
  x/=i;
 }
if(x>1)
 fm[sz++]=x;
}

int extendedEuclid(int a,int b) {
//ax + by = gcd(a,b)
//r(i) = r(i-2) - q(i)*r(i-1)
int xLast = 1,yLast = 0,q,r,m,n;
int x = 0,y = 1;
while(b!=0){
 q = a/b;
 r = a%b;
 m = xLast - q*x;
 n = yLast - q*y;
 xLast = x ; yLast = y;
 x = m ; y = n;
 a = b; b = r;
 }
return xLast;
}
ll inv(int a,int m) {
return (extendedEuclid(a,m) + m)%m; // taking care of -ve
}

ll divide(ll a,ll b) {
ll newM=M*b;
a=a%newM;
return a/b;
}

int main() {

cin.sync_with_stdio(0);
cin.tie(0);

int T;
cin>>T;

while(T--) {

int Q;
cin>>N>>M>>Q;

A[1]=1;
for(int i=2;i<=N;i++)
 A[i]=(A[i-1]*fpow(i,i-1))%M;

C[N+1]=1;
for(int i=N;i>=1;i--)
 C[i]=(C[i+1]*fpow(i,N-i+1))%M;

//B[i] be the product of r+1..N-r
if(N%2==0)
 B[N/2]=1;
else
 B[N/2]=1+N/2;

for(ll i=N/2-1;i>=1;i--) 
 B[i]=(B[i+1]*((i+1)*(N-i)%M))%M;

while(Q--) {
ll r;
cin>>r;
r=min(r,N-r);
ll v1=A[r];
v1=(v1*C[N-r+1])%M;
ll ans=B[r];
ans=(v1*fpow(ans,r))%M;
cout<<ans<<"\n";
}

}

    return 0;
}


