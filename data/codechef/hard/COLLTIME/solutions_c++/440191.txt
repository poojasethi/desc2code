#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
typedef unsigned long long ull;
typedef long long ll;
using namespace std;

class Line {
public:
    int v;
    int x;

    Line(int v = 0, int x = 0) : v(v), x(x) {
 
    }
};

ull gcd(ull a, ull b) {
    while (b > 0) {
        long long t = a % b;
        a = b;
        b = t;
    }
    return a;
}

ull lcm(ull a, ull b) {
    return a / gcd(a, b) * b;
}

class Rational {
public:
    ull w;
    ull num;
    ull den;
    
    Rational(ull num, ull den) : w(0), num(num), den(den) {

    }

    Rational& add(ull cnum, ull cden) {
        w += cnum / cden;
        cnum %= cden;
        ull d = lcm(den, cden);
        ull sum = num * (d / den) + cnum * (d / cden);
        ull g = gcd(sum, d);
        if (g > 1) {
            sum /= g;
            d /= g;
        }
        w += sum / d;
        sum %= d;
//        long long d = cden * den;
//        long long sum = cnum * den + cden * num;
        num = sum;
        den = d;
        return (*this);
    }
};

bool comp1(const Line & a, const Line & b) {
    return a.v > b.v || (a.v == b.v && a.x < b.x);
}

bool comp2(const Line & a, const Line & b) {
    return a.x < b.x;
}

void solve() {
    int n;
    scanf("%d", &n);
    vector<Line> lines(n);
    vector<Line> lines2(n);
    for (int i = 0; i < n; i++) {
        int v;
        int x;
        scanf("%d%d", &x, &v);
        lines[i] = Line(v, x);
        lines2[i] = lines[i];
    }
    sort(lines.begin(), lines.end(), comp1);
    sort(lines2.begin(), lines2.end(), comp2);
    Rational ans(0, 1);
    vector<long long> dens(51);
    for (int i = 0; i < n; ) {
        int j = i;
        while (j < n && lines[i].v == lines[j].v) {
            j++;
        }
        int k = i;
        long long sum = 0;
        for (int t = 0; t < n; t++) {            
            while (k < j && lines[k].x < lines2[t].x) {
                sum += lines[k].x;
                k++;
            }
            if (lines2[t].v < lines[i].v) {
                dens[lines[i].v - lines2[t].v] += (k - i) * (ull) lines2[t].x - sum;
//                ans.add((k - i) * (long long)lines2[t].x - sum, lines[i].v - lines2[t].v);
            }
        }
        i = j;
    }
    for (int i = 1; i < (int) dens.size(); i++) {
        ans.add(dens[i], i);
    }    
    ull whole = ans.w + ans.num / ans.den;
    ull mod = ans.num % ans.den;
    if (whole > 0) {
//        printf("%lld", whole);
           cout << whole;
        if (mod != 0) {
//            printf(" ");
//            printf("%lld", mod);
//            printf("/");
//            printf("%lld", ans.den);
            cout << " " << mod << "/" << ans.den;
        }
    } else {
        if (mod == 0) {
//            printf("0");
            cout << "0";
        } else {
//            printf("%lld", mod);
//            printf("/");
//            printf("%lld", ans.den);            
            cout << mod << "/" << ans.den;
        }
    }
    printf("\n");
}

int main() {
    int t;
    scanf("%d", &t);
    for (int i = 0; i < t; i++) {
        solve();
    }
}
