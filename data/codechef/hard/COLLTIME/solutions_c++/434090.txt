#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>

using namespace std; 

#define rep(i,n) for(int i=0;i<(n);++i)
#define clr(a,b) memset(a,b,sizeof(a)); 
#define all(c) (c).begin(), (c).end() 
#define inf 1000000000 

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<int> vi;

template<class T> inline T gcd(T a,T b)//NOTES:gcd(
{if(a<0)return gcd(-a,b);if(b<0)return gcd(a,-b);return (b==0)?a:gcd(b,a%b);}
template<class T> struct Fraction{T a,b;Fraction(T a=0,T b=1);string toString();};//NOTES:Fraction
template<class T> Fraction<T>::Fraction(T a,T b){T d=gcd(a,b);a/=d;b/=d;if (b<0) a=-a,b=-b;this->a=a;this->b=b;}
template<class T> Fraction<T> operator+(Fraction<T> p,Fraction<T> q)
{
	T g = gcd(p.b, q.b);
	return Fraction<T>(p.a*(q.b/g)+q.a*(p.b/g),(p.b/g)*q.b);
}

int main(int argc, char* argv[])
{

	int T;
	scanf("%d", &T);

	for (int nTest = 1; nTest <= T; nTest++)
	{		
		int N;
		scanf("%d", &N);
		vector<vector<int> > ball(41);

		for (int i = 0; i < N; i++)
		{
			int x, dx;
//			x = rand()*rand() % 2000001 - 1000000;
//			dx = rand() % 41 - 20;
			scanf("%d %d", &x, &dx);
//
			ball[dx + 20].push_back(x);
		}

		for (int i = 0; i < ball.size(); i++)
			sort(ball[i].begin(), ball[i].end());

		long long Sa = 0;
		Fraction<long long> ans(0, 1);	

		for (int dx1 = -20; dx1 <= 20; dx1++)
		{
			for (int dx2 = -20; dx2 < dx1; dx2++)
			{
				vector<int>& xi = ball[dx1 + 20];
				vector<int>& xj = ball[dx2 + 20];

				if (xi.size() == 0 || xj.size() == 0)
					continue;

				vector<long long> s (xj.size() + 1);				
				for (int i = 0; i < xj.size(); i++)
					s[i + 1] = s[i] + xj[i];

				int dx = (dx1 - dx2);
				long long cur = 0;

				if (dx > 0)
				{			
					int j = 0;

					for (int i = 0; i < xi.size(); i++)
					{
						while (j < xj.size() && xj[j] < xi[i])
							j++;

						if (j == xj.size())
							break;

						long long total = xj.size() - j;
						cur -= xi[i] * total;
						cur += s.back() - s[j];
					}
				}
				Sa += cur / dx;
				cur %= dx;

				ans = ans + Fraction<long long>(cur, dx);				

				Sa += ans.a / ans.b;
				ans.a %= ans.b;
			}
		}

		long long p = ans.a;
		long long q = ans.b;

		if (p == 0)
		{
			cout << Sa;
		}
		else
		{
			if (Sa)
			{
				cout << Sa << " ";
			}
			if (p != 0)
			{
				cout << p << '/' << q;
			}
		}
		cout << endl;


	} 


	return 0;
}
