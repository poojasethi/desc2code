#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>

using namespace std;

typedef long long LL;
const int MaxN = 50010;
const LL LCM40 = 5342931457063200LL;

LL gcd(LL a, LL b)
{
	return b ? gcd(b, a%b) : a;	
}

struct Node
{
	int x, v;	
}nod[MaxN];

bool operator < (const Node &a, const Node &b)
{
	return a.x < b.x;	
}

LL sum[50], cnt[50];
LL ans[50];
int N;

void solve()
{
	memset(cnt, 0, sizeof(cnt));
	memset(sum, 0, sizeof(sum));
	memset(ans, 0, sizeof(ans));
	
	for(int i=0; i<N; i++)
	{
		int x = nod[i].x, v = nod[i].v+20;
		for(int j=v+1; j<=40; j++)
		{
			ans[j-v] += x*cnt[j]-sum[j];
		}	
		sum[v] += x;	cnt[v] ++;
	}
	
	LL k = 0, a = 0;
	for(int i=1; i<=40; i++)
	{
		k += ans[i] / i;
		ans[i] %= i;
		a += ans[i]*LCM40/i;
		k += a / LCM40;
		a %= LCM40;	
	}
	
	if(a == 0)
	{
		cout << k << endl;	
	}
	else
	{
		if(k)	cout << k << " ";
		LL g = gcd(a, LCM40);
		cout << a/g << "/" << LCM40/g << endl;	
	}
}

int main()
{
	int T;	cin >> T;
	
	while(T --)
	{
		cin >> N;
		for(int i=0; i<N; i++)
		{
//			nod[i].x = rand()*rand() % 2000001 - 1000000;
//			nod[i].v = rand() % 41 - 20;
			scanf("%d %d", &nod[i].x, &nod[i].v);	
		}	
		sort(nod, nod+N);
		
		solve();
	}
	
	
	return 0;	
}
