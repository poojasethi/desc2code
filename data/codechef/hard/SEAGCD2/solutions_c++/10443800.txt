#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int MAX = 100;
const int MOD = 1e9 + 7;
int test, n, m, ind[MAX + 1], bits[MAX + 1], cnt, f[MAX + 1][1 << 15][MAX + 1];
bool fr[MAX + 1][1 << 15];
ll gt[(int)1e5 + 1], res;
bool notPrime[MAX + 1];

ll lt(ll a, int b){
    ll res = 1;
    while (b){
        if (b & 1)
            res = (res * a) % MOD;
        b >>= 1;
        a = (a * a) % MOD;
    }
    return res;
}

void visit(const int& m, const int& bitPrevent){
    if (fr[m][bitPrevent])
        return;

    if (m == 1)
        f[m][bitPrevent][0] = 1;
    else{
        visit(m - 1, bitPrevent);
        for (int i = 0; i < m; ++i)
            f[m][bitPrevent][i] = f[m - 1][bitPrevent][i];

        if (!(bits[m] & bitPrevent)){
            int newBits = bitPrevent | (m < 50 || notPrime[m] ? bits[m] : 0);
            visit(m - 1, newBits);
            for (int i = 0; i < m; ++i)
                f[m][bitPrevent][i + 1] = (f[m][bitPrevent][i + 1] + f[m - 1][newBits][i]) % MOD;
        }
    }

    fr[m][bitPrevent] = true;
}

int main(){
    //freopen("in.txt", "r", stdin);
    ios_base::sync_with_stdio(0);

    gt[0] = 1;
    for (int i = 1; i <= (int)1e5; ++i)
        gt[i] = (gt[i - 1] * i) % MOD;

    notPrime[1] = true;
    cnt = 0;
    for (int i = 2; i <= MAX; ++i)
    if (!notPrime[i]){
        ind[i] = cnt++;
        bits[i] |= (1 << ind[i]);
        for (int j = 2; j <= MAX / i; ++j){
            notPrime[i * j] = true;
            bits[i * j] |= (1 << ind[i]);
        }
    }

    cin >> test;
    while (test--){
        cin >> n >> m;
        for (int i = 0; i <= m; ++i)
            memset(f[i], sizeof(f[i]), 0);
        memset(fr, false, sizeof(fr));
        visit(m, 0);
        res = 1;
        for (int i = 1; i <= min(n, m - 1); ++i)
            res = (res + ((gt[n] * lt(gt[n - i], MOD - 2)) % MOD) * f[m][0][i]) % MOD;
        printf("%lld\n", res);
    }
    return 0;
}
