#include <bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long
#define si(a) scanf("%d", &a)
#define sl(a) scanf("%I64d", &a)
#define sd(a) scanf("%lf", &a)
#define sii(a, b) scanf("%d%d", &a, &b)
#define sll(a, b) scanf("%I64d%I64d", &a, &b)
#define sdd(a, b) scanf("%lf%lf", &a, &b)
#define Fast_IO ios_base::sync_with_stdio(0);cin.tie(0)

#define MAX 5005
Long dp[MAX][MAX];
int A[MAX], N, K, D, M;

void go(int s, int e, int ls, int le, int k)
{
   if(s > e) return;
   Long mx = -10, pos = -1, sum = 0;
   int mid = (s + e) >> 1, x = min(le, mid);

   ITR(i, x+1, mid+1) sum += ((x+D >= i) ? M * A[i] : A[i]);
   for(int i = x; i >= ls; i--) {
      if(sum + dp[k-1][i-1] > mx) {
         mx = sum + dp[k-1][i-1];
         pos = i;
      }
      sum += M * A[i];
      if(i + D <= mid) sum -= (M-1) * A[i+D];
   }
   dp[k][mid] = mx;
   //printf("dp[%d][%d]: %lld and break at: %d\n", id, mid, mx, pos);
   go(s, mid-1, ls, pos, k);
   go(mid+1, e, pos, le, k);
}

int main()
{
   int t;
   si(t);
   while(t--) {
      sii(N, K);
      sii(D, M);
      REP(i, N) si(A[i+1]);
      //REP(i, K+1) REP(j, N+1) dp[i][j] = 0;
      ITR(i, 1, N+1) dp[0][i] = dp[0][i-1] + A[i];
      ITR(k, 1, K+1) go(k, N, k, N, k);
      //solve();
      printf("%lld\n", dp[K][N]);
   }

   return 0;
}
