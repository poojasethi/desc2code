#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>
 
using namespace std;
 
#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second
 
typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;
 
const LL INF = 1000000000000LL;
const int N = 5005;
 
LL dp[N][N];
int A[N];
LL sum1[N];
int Q[N];
 
 
int main() {
  int t;
  S(t);
  while(t--) {
    int n,k,d,m;
    scanf("%d%d%d%d",&n,&k,&d,&m);
    rep(i,1,n+1) {
      S(A[i]);
      sum1[i] = sum1[i-1] + A[i];
    }
 
    rep(i,1,n+1) dp[0][i] = dp[0][i-1] + A[i];
    // dp[0][0] = -INF;
 
    rep(i,1,k+1) {
      LL c1 = 0, c2 = 0;
      int l = 0, r = 0;
      dp[i][0] = -INF;
      rep(j,1,n+1) {
        while(r && r >= l && dp[i-1][Q[r]-1] + (sum1[j] - sum1[Q[r]]) * m <= dp[i-1][j-1]) {
          r--;
        }
        Q[++r] = j;
        if(!l) l = r;
        if(Q[l] == j-d) {
          l++;
        }
        if(j < i) {
          dp[i][j] = -INF;
        } else if(j == i) {
          dp[i][j] = 0;
        } else {
          if(j-d >= 1) {
            c1 = max(c1 + A[j], dp[i-1][j-d-1] + (sum1[j] - sum1[j-d]) * m);
          }
          c2 = dp[i-1][Q[l]-1] + (sum1[j] - sum1[Q[l]]) * m;
          dp[i][j] = max(c1, c2);
          dp[i][j] = max(dp[i][j], dp[i][j-1]);
        }
        // printf("%d %d %lld\n",i,j,dp[i][j]);
      }
    }
 
    printf("%lld\n",dp[k][n]);
  }
  return 0;
} 