#include <bits/stdc++.h>

using namespace std;

#define ll long long

const int maxn = 10010;

ll dp[maxn][maxn], p[maxn];

int main()
{
	//freopen("i.txt", "r", stdin);
	int t, n, k, d, i, j, gind, ind;
	ll m, gval;
	scanf("%d", &t);
	while(t--){
		scanf("%d%d%d%lld", &n, &k, &d, &m);
		p[0] = 0;
		for(i=1; i<=n+d; i++){
			if(i<=n)
				scanf("%lld", &p[i]);
			else
				p[i] = 0;
			p[i]+=p[i-1];
		} 
		for(i=1; i<=n; i++)
			dp[i][0] = p[n]-p[i-1];
		dp[n+1][0] = 0;
		deque<int> dq;
		for(i=1; i<=k; i++){
			//cout << i << "\n";
			dq.clear();
			dp[n+1][i] = -1ll<<50;
			dq.push_front(n+1);
			gind = n+1;
			for(j=n; j>=1; j--){
				//cout << i << " " << j << " " << dq.back() << "\n";
				dp[j][i] = -1ll<<50;
				if(gind>(j+d))
					dp[j][i] = max(dp[j][i], dp[gind][i-1]+(p[j+d]-p[j])*m+p[gind-1]-p[j+d]);
				if(!dq.empty()){
					ind = dq.back();
					dp[j][i] = max(dp[j][i], dp[ind][i-1]+(p[ind-1]-p[j])*m);
				}
				while(!dq.empty()){
					ind = dq.back();
					if(ind>(j+d-1)){
						gval = dp[ind][i-1]+p[ind-1];
						if(gval>(dp[gind][i-1]+p[gind-1]))
							gind = ind;
						dq.pop_back();
					}
					else
						break;
				}
				while(!dq.empty()){
					ind = dq.front();
					gval = dp[ind][i-1] + m*p[ind-1];
					if(gval<=(dp[j][i-1]+(p[j-1]*m)))
						dq.pop_front();
					else
						break;
				}
				dq.push_front(j);
				/*gval = dp[j][i-1]+p[j-1];
				if(gval>(dp[gind][i-1]+p[gind-1]))
					gind = j;*/
			}
		}
		/*for(i=0; i<=2; i++){
			for(j=1; j<=n+1; j++)
				cout << dp[j][i] << " ";
			cout << "\n";
		}*/
		ll ans = 0;
		for(i=1; i<=n; i++)
			ans = max(ans, dp[i][k]+(p[i-1]));
		printf("%lld\n", ans);
	}
	return 0;
}