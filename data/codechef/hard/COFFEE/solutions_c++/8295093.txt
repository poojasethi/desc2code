#include <cstdio>
#include <algorithm>
#include <iostream>

using namespace std;

const int INF = 1000000000;
const int MAXN = 5000 + 5;

int tn, n, k, d, a[MAXN * 2], qt, qh, q[MAXN * 2];
long long pref[MAXN * 2], dp[MAXN][2 * MAXN], pref_max[MAXN * 2], m;

int main () {
    ios_base::sync_with_stdio(false);
    cin >> tn;
    while (tn--) {
        cin >> n >> k >> d >> m;
        for(int i = 1; i <= n; i++)
            cin >> a[i];
        for(int i = n + 1; i <= n + d; i++)
            a[i] = 0;
        for(int i = 1; i <= n + d; i++)
            pref[i] = pref[i - 1] + a[i];
        for(int i = 1; i <= n + d; i++)
            dp[0][i] = pref[i];
        for(int i = 1; i <= k; i++) {
            qt = 1, qh = 0;
            pref_max[0] = dp[i - 1][0];
            for(int j = 1; j <= n + d; j++)
                pref_max[j] = max(pref_max[j - 1], dp[i - 1][j] - pref[j]);
            for(int j = 0; j <= n + d; j++)
                dp[i][j] = -1000000000;
            for(int j = 1; j <= n + d; j++) {
                // get max
                long long candidate1 = -INF;
                if (j >= d + 1)
                    candidate1 = pref_max[j - d - 1] + (pref[j] - pref[j - d]) * (m - 1) + pref[j] - a[j - d];
                long long candidate2 = -INF;
                while (qt <= qh && j - d > q[qt])
                    ++qt;
                if (qt <= qh)
                    candidate2 = dp[i - 1][q[qt]] - pref[q[qt]] * m + pref[j] * m - (a[j - d] * m);
                dp[i][j] = max(candidate1, candidate2);
                // now add prev dp
                if (j > d) {
                    q[++qh] = j;
                    while (qt < qh && dp[i - 1][q[qh - 1]] - pref[q[qh - 1]] * m <= dp[i - 1][j] - pref[j] * m) {
                        swap(q[qh], q[qh - 1]);
                        --qh;
                    }
                }
            }
        }
        long long ret = 0;
        for(int i = 1; i <= n + d; i++)
            ret = max(ret, dp[k][i] + pref[n + d] - pref[i]);
        cout << ret << endl;
    }
    return 0;}