#include <cstdio>
#include <algorithm>
#include <vector>
 
using namespace std;
 
#define all(a) (a).begin(),(a).end()
#define pb push_back
#define sz(a) ((int)(a).size())
#define mp make_pair
#define fi first
#define se second
 
typedef pair<int,int> pint;
typedef long long ll;
typedef vector<int> vi;
 
 
#define MAX_N 5005
#define LOG_N 20
#define INF 12345678987654LL
 
int n,K,d,m,a[MAX_N],sum[MAX_N];
ll dp[MAX_N][MAX_N],qme[LOG_N][MAX_N],qme2[LOG_N][MAX_N];
 
void buildrmq()
{
	for (int d=1; (1<<d)<=n; d++)
		for (int i=0; i+(1<<d)-1<n; i++)
			qme[d][i]=max(qme[d-1][i],qme[d-1][i+(1<<d>>1)]);
}
 
void buildrmq2()
{
	for (int d=1; (1<<d)<=n; d++)
		for (int i=0; i+(1<<d)-1<n; i++)
			qme2[d][i]=max(qme2[d-1][i],qme2[d-1][i+(1<<d>>1)]);
}
 
ll query(int l, int r)
{
	if (l>r)
		return -INF;
	l--,r--;
	int lg=31-__builtin_clz(r-l+1);
	return max(qme[lg][l],qme[lg][r-(1<<lg)+1]);
}
 
ll query2(int l, int r)
{
	if (l>r)
		return -INF;
	l--,r--;
	int lg=31-__builtin_clz(r-l+1);
	return max(qme2[lg][l],qme2[lg][r-(1<<lg)+1]);
}
 
ll g(int a, int b, int k)
{
	ll ans2=-INF;
//	for (int j=a+1; j<=b /*j<=d+i&&j<=n*/; j++)
//		ans2=max(ans2,qme2[0][j]);//dp[j+1][k-1]+sum[j]*1LL*m);
	ans2=query2(a+1,b);
	ans2-=sum[a]*1LL*m;
	return ans2;
}
 
ll h(int i, int k)
{
	ll ans3=-INF;
//	for (int j=i+d+1; j<=n; j++)
//		ans3=max(ans3,qme[0][j]);//dp[j+1][k-1]+sum[j]);
	ans3=query(i+d+1,n);
	ans3+=(sum[min(n,i+d)]-sum[i])*1LL*m-sum[min(n,i+d)];
	return ans3;
}
 
/*ll f(int i, int k)
{
	if (i==n+1)
		return k==0?0:-INF;
	if (k==0)
		return -INF;
	if (got[i][k])
		return dp[i][k];
	got[i][k]=true;
 
	ll ans=f(i+1,k-1);
	ll ans2=g(i,k);
	ll ans3=h(i,k);
	ans=max(ans,max(ans2,ans3));
 
	return dp[i][k]=ans;
}*/
 
int main()
{
	int tc;
	scanf("%d",&tc);
	while (tc--)
	{
		scanf("%d %d %d %d",&n,&K,&d,&m);
		for (int i=1; i<=n; i++)
		{
			scanf("%d",a+i);
			sum[i]=a[i]+sum[i-1];
		}
		for (int k=0; k<=K; k++)
		{
			for (int i=n+1; i>0; i--)
			{
				if (i==n+1)
				{
					dp[i][k]=k==0?0:-INF;
					continue;
				}
				if (k==0)
				{
					dp[i][k]=-INF;
					continue;
				}
				ll ans=dp[i+1][k-1];
				ll ans2=g(i,min(d+i,n),k);
				ll ans3=h(i,k);
				ans=max(ans,max(ans2,ans3));
				dp[i][k]=ans;
			}
			for (int i=1; i<=n; i++)
			{
				qme[0][i-1]=dp[i+1][k]+sum[i];
				qme2[0][i-1]=dp[i+1][k]+sum[i]*1LL*m;
			}
			buildrmq();
			buildrmq2();
		}
		ll ans=0;
		for (int i=0; i<=n; i++)
			ans=max(ans,dp[i+1][K]+sum[i]);
		printf("%lld\n",ans);
	}
	return 0;
}