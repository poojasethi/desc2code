#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <memory.h>
#include <cctype>
#include <string.h>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define MAX 17

char buf[1 << MAX];
int Z[1 << MAX];
int RMQ[2 << MAX];
PII A[2 << MAX];
int I[MAX];

void Add(int a, int b)
{
	int i;
	FOR(i, 0, MAX)
		RMQ[ I[i] + (a >> i) ] += b;
}

int Sum(int a)
{
	int res = 0;
	int i;
	FOR(i, 0, MAX)
	{
		if(a & 1)
			res += RMQ[ I[i] + a - 1 ];

		a >>= 1;
	}

	return res;
}

int main()
{
	int T, t;
	scanf("%d", &T);
	FOR(t, 0, T)
	{
		int i, j;

		scanf("%s", buf);
		int N = strlen(buf);

/*		int N;
		scanf("%d", &N);
		FOR(i, 0, N)
			buf[i] = 'a';

		buf[N] = 0;
*/
		int r = 0;
		int l = 0;
		FOR(i, 0, N)
		{
			if(r > i)
			{
				j = l + (r - i - 1) + 1;
				Z[i] = min(r, Z[j] + (i - j));
			}
			else
			{
				l = r = i;
				Z[i] = r;
			}

			if(Z[i] == r)
			{
				l = i - (r - i);
				while(l > 0 && r < N && buf[l - 1] == buf[r])
				{
					--l;
					++r;
				}

				Z[i] = r;
			}
		}

		FOR(i, 0, N)
		{
			A[i + i] = PII(i, -1 - i);
			A[i + i + 1] = PII(Z[i], i);
		}

		sort(A, A + N + N);
		I[0] = 0;
		FOR(i, 1, MAX)
			I[i] = I[i - 1] + (1 << (MAX + 1 - i));

		CLEAR(RMQ, 0);
		Int res = 0; 
		FOR(i, 0, N + N)
			if(A[i].second < 0)
			{
				int pos = -1 - A[i].second;
				res += Sum(pos) - Sum(pos - ((Z[pos] - pos) >> 1));
				Add(pos, 1);
			}
			else
			{
				int pos = A[i].second;
				Add(pos, -1);
			}

		printf("%lld\n", res);
	}

	return 0;
};
