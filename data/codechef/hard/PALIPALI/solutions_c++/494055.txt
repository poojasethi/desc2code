#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <iostream>
#include <sstream>

using namespace std;

typedef long long i64;
template<class T> int size(const T &a) {
	return int(a.size());
}
template<class T> T sqr(const T &a) {
	return a * a;
}

const int max_n = 100010, max_t = 1 << 18;
char s[max_n];
int b[max_n];
struct SegTree {
private:
	int a[max_t];
	int n;
	void init(int i, int l, int r) {
		a[i] = 0;
		if (r - l == 1) return;
		int mid = (r + l) >> 1;
		init(i + i + 1, l, mid);
		init(i + i + 2, mid, r);
	}
	void add(int i, int l, int r, int x, int d) {
		a[i] += d;
		if (r - l == 1) {
			return;
		}
		int mid = (r + l) >> 1;
		if (x < mid) {
			add(i + i + 1, l, mid, x, d);
		} else {
			add(i + i + 2, mid, r, x, d);
		}
	}
	int cnt(int i, int l, int r, int l2, int r2) {
		if (r <= l2 || r2 <= l) return 0;
		if (l2 <= l && r <= r2) return a[i];
		int mid = (l + r) >> 1;
		return cnt(i + i + 1, l, mid, l2, r2) + cnt(i + i + 2, mid, r, l2, r2);
	}
public:
	void init(int n) {
		this-> n = n;
		init(0, 0, n);
	}
	void add(int i, int d) {
		add(0, 0, n, i, d);
	}
	int cnt(int l, int r) {
		if (l >= r) return 0;
		return cnt(0, 0, n, l, r);
	}
} th;
struct Del {
	int t;
	int p;
	bool operator < (const Del &d) const {
		return t < d.t;
	}
} dl[max_n];
int main() {
#ifdef pperm
	freopen("input.txt", "r", stdin);
#endif
	int T;
	scanf("%d", &T);
	while (T--) {
		scanf("%s", s);
		int n = int(strlen(s));
		int w = -1, mw = 0;
		for (int i = 1; i < n; i++) {
			int d = 0;
			if (i < w) {
				d = b[mw + mw - i];
			}
			if (i + d >= w) {
				d = max(w, i) - i;
				int l = i - 1 - d, r = i + d;
				while (l >= 0 && r < n && s[l] == s[r]) {
					d++;
					l--;
					r++;
				}
				w = i + d;
				mw = i;
			}
			b[i] = d;
			dl[i].p = i;
			dl[i].t = i + d;
		}
		sort(dl + 1, dl + n);
		th.init(n);
		i64 res = 0;
		for (int i = 1, j = 1; i < n; i++) {
			res += th.cnt(i - b[i] / 2, i);
			th.add(i, 1);
			while (j < n && dl[j].t == i) {
				th.add(dl[j].p, -1);
				j++;
			}
		}
		cout << res << endl;
	}
#ifdef pperm
	printf("%.3lf\n", clock() / double(CLOCKS_PER_SEC));
	return 0;
#else
	return 0;
#endif
}
