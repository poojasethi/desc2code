#pragma comment(linker, "/stack:64000000")
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <ctime>
#include <cmath>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define X first
#define Y second

using namespace std;

typedef unsigned int uint;
typedef unsigned char byte;
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
typedef pair<ld, ld> ptd;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 100 * 1000 + 13;

int n;
int len[N], z[N];
char s[N];

inline void inc(int i, int val)
{
    for ( ; i < n; i = (i | (i + 1)))
        z[i] += val;
}

inline int sum(int i)
{
    int ans = 0;
    
    for ( ; i >= 0; i = (i & (i + 1)) - 1)
        ans += z[i];
        
    return ans;
}

inline int sum(int l, int r)
{
    if (l > r)
        return 0;
        
    return sum(r) - (l == 0? 0: sum(l - 1));
}

vector<int> w[N];

int main()
{
    //freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);
    
    int testCount;
    scanf("%d\n", &testCount);
    
    forn(test, testCount)
    {
        memset(len, 0, sizeof(len));
        memset(z, 0, sizeof(z));
    
        gets(s);
        n = int(strlen(s));
        
        forn(i, n)
            w[i].clear();
        
        int l = 0, r = -1;
        
        forn(i, n)
        {
            len[i] = i < r? min(len[l + (r - i) - 1], r - i): 0;
            
            while (i - len[i] >= 0 && i + len[i] + 1 < n && s[i - len[i]] == s[i + len[i] + 1])
                len[i]++;
                
            if (i + len[i] > r)
                l = i - len[i] + 1, r = i + len[i];
        }
        
        forn(i, n)
            if (len[i] > 0)
            {
                inc(i, 1);
                w[i + len[i]].pb(i);
            }
            
        li ans = 0;
        
        forn(i, n)
        {
            if (len[i] > 1)
                ans += sum(i - len[i] / 2, i - 1);
                
            forn(j, sz(w[i]))
                inc(w[i][j], -1);
        }
            
        cout << ans << endl;
    }
    
    return 0;
}
