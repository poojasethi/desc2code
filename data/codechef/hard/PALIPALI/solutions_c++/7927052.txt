#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
 
using namespace std;
 
const int MAXN = 111111;
 
int a[MAXN];
char s[MAXN];
int n;
priority_queue < pair <int, int>, vector < pair <int, int> >, greater < pair <int, int> > > H;
int k[MAXN];
 
int modify(int x, int d)
{
    while (x)
    {
        k[x] += d;
        x = x & (x - 1);
    }
    return 0;
}
 
int findsum(int x)
{
    int ans = 0;
    while (x <= n)
    {
        ans += k[x];
        x = (x | (x - 1)) + 1;
    }
    return ans;
}
 
int main()
{
/*
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
//*/
    int test;
    scanf("%d\n", &test);
    while (test--)
    {
        gets(s + 1);
        n = strlen(s + 1);
 
//        puts(s + 1);
 
        int l = 0, r = 0;
        for (int i = 2; i <= n; i++)
        {
            int k = r < i? 0 : min(a[l + r - i + 1], r - i + 1);
            while (1 <= i - k - 1 && i + k <= n && s[i - k - 1] == s[i + k]) k++;
            a[i] = k;
            if (i + k - 1 > r)
            {
                l = i - k;
                r = i + k - 1;
            }
        }
 
        memset(k, 0, sizeof(k));
        while (H.size()) H.pop();
        long long ans = 0;
        for (int i = 2; i <= n; i++)
        {
            ans += findsum(i - a[i] / 2);
            modify(i, 1);
 
            H.push(make_pair(i + a[i], i));
 
            while (H.size() && H.top().first == i)
            {
                modify(H.top().second, -1);
                H.pop();
            }
        }
 
        cout << ans << endl;
    }
    
    return 0;
}