#pragma comment(linker, "/STACK:10000000")

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>

#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define for1(i, n) for(int i = 1; i <= int(n); ++i)
#define ford(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define X first
#define Y second
#define mp make_pair
#define debug(x) {cerr << #x << " = " << x << endl;}
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)1E9 + 7;
const ld EPS = 1E-9;
const ld PI = 3.1415926535897932384626433832795;

const int NMAX = 200*1000;

string s;
int d[NMAX], t[NMAX];

void inc(int i, int d){
    for(; i < sz(s); i = (i | (i+1)))
        t[i] += d;
}

int sum(int rg){
    int ans = 0;
    for(; rg >= 0; rg = (rg & (rg+1))-1)
        ans += t[rg];
    return ans;
}

inline int sum(int lf, int rg){
    if(lf > rg) return 0;
    return sum(rg)-sum(lf-1);
}

char buf[NMAX];
vector<int> E[NMAX];

int main() {
    //freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);

    int test;
    cin >> test;
    gets(buf);
    forn(T, test){
        s = gets(buf);

        memset(t, 0, sizeof(int)*sz(s));
        memset(d, 0, sizeof(int)*sz(s));
        forn(i, sz(s))
            E[i].clear();
            

        int L = 0, R = -1;
        forn(i, sz(s)){
            d[i] = (i+1 > R ? 0 : min(d[R-i+L-1], R-i)) + 1;
            while(i-d[i]+1 >= 0 && i+d[i] < sz(s) && s[i-d[i]+1] == s[i+d[i]])
                d[i]++;
            d[i]--;
            if(R < i+d[i])
                L = i-d[i]+1, R = i+d[i];
            if(d[i] > 0){
                inc(i, 1); 
                E[i+d[i]].pb(i);
            }
        }

        li ans = 0;
        forn(i, sz(s)){
            if(i > 0){
                forn(j, sz(E[i-1]))
                    inc(E[i-1][j], -1);
            }

            if(d[i] >= 2){
                int L = d[i]/2;
                ans += sum(i-L, i-1);
            }
        }

        cout << ans << endl;
    }     

    return 0;
}


