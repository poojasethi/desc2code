//#define deb

#include <iostream>
#ifdef deb
    #include <fstream>
#endif
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
using namespace std;

typedef pair<int,int> pii;

#ifdef deb
    ifstream inf("Input.txt");
    ofstream outf("Output.txt");
#else
    #define inf cin
    #define outf cout
#endif

string s;
vector<int> d;
vector<pii> help;
vector<int> fenwick;
int res;

void add_fenwick(int, int);
int  sum_fenwick(int);

int main()
{
    int T;
    inf >> T;
    for (int t = 0; t < T; t++)
    {
        inf >> s;
        d.assign(s.length(), 0);
        int L = 0, R = -1;
        int k;
        for (int i = 1; i < s.length(); i++)
        {
            k = (i > R ? 0 : min(d[L+R-i+1], R-i+1))+1;
            while (i+k-1 < s.length() && i-k >= 0 && s[i+k-1] == s[i-k]) k++;
            d[i] = --k;
            if (i+k-1 > R)
                L = i-k, R = i+k-1;
        }
        #ifdef deb
            cout << s << endl;
            for (int i = 0; i < s.length(); i++) cout << d[i] << " ";
            cout << endl;
        #endif
        help.resize(s.length());
        fenwick.assign(4*s.length()+10, 0);
        res = 0;
        for (int i = 0; i < s.length(); i++)
            help[i].first = 2*i-d[i], help[i].second = i;
        sort(help.begin(), help.end());
        int pos = 0;
        for (int i = 0; i < s.length(); i++)
        {
            for ( ; pos < s.length() && help[pos].first <= 2*i; pos++)
                add_fenwick(help[pos].second, 1);
            add_fenwick(i, -1);
            int j = i+d[i];
            if(3*j>s.length()+2*i) j=(s.length()+2*i)/3;
            res += sum_fenwick(j);
        }
        cout << res << endl;
    }
}


void add_fenwick(int i, int delta)
{
    for ( ; i < s.length(); i = i|(i+1))
        fenwick[i] += delta;
}

int sum_fenwick(int pos)
{
    int res = 0;
    for ( ; pos >= 0; pos = (pos&(pos+1))-1)
        res += fenwick[pos];
    return res;
}
