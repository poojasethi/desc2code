#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <algorithm>
#include <sstream>
#include <utility>
#include <list>
using namespace std;

#define rep(i, n) for (int i = 0; i < n; i++)
#define sz(v) (int) ((v).size())
#define mp(x, y) make_pair(x, y)

void solve();
int main()
{
//    freopen("../QtConsoleApp/1.txt", "r", stdin);
//    freopen("../QtConsoleApp/1.out", "w", stdout);
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    solve();
    return 0;
}

const int KMax = 100000;

char s[KMax + 1];
int ls;
int f[KMax], d[KMax];

int F[KMax];

inline
void update(int i)
{
    for (; i < ls; i = (i | (i + 1)))
        F[i]++;
}

inline
int sum(int r)
{
    int result = 0;
    for (; r >= 0; r = (r & (r + 1)) - 1)
        result += F[r];
    return result;
}

void solve()
{
    int T;
    scanf("%d", &T);
    rep(tc, T)
    {
        scanf("%s", s);
        ls = strlen(s);
        if (ls < 4)
        {
            puts("0");
            continue;
        }

        memset(d, 0, sizeof(d));

        int l=0, r=-1;
        for (int i=0; i<ls; ++i) {
                int k = (i>r ? 0 : min (d[l+r-i+1], r-i+1)) + 1;
                while (i+k-1 < ls && i-k >= 0 && s[i+k-1] == s[i-k])  ++k;
                d[i] = --k;
                if (i+k-1 > r)
                        l = i-k,  r = i+k-1;
        }
        rep(i, ls)
        {
            f[i] = i - d[i];
        }

        memset(F, 0, sizeof(F[0]) * ls);
        static pair<int, int> m[KMax];
        int mc = 0;

        rep(i, ls)
        {
            m[mc].first = f[i];
            m[mc].second = i;
            mc++;
        }
        pair<int, int>* me = m + mc;
        sort(m, me);

        int ans = 0;
        for (int i = 0, p = 0; i < ls; i++)
        {
            for (; p < mc && m[p].first == i; p++)
            {
                update(m[p].second);
            }
            int lim = min((2 * i + d[i]) / 2, ls - 1);

            if (i + 1 <= lim)
            {
                ans += sum(lim) - sum(i);
            }
        }
        printf("%d\n", ans);
    }
}
