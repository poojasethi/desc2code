// Palindrome, Palindrome

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

const int MAX=200000;
char input[MAX];
int rad[2*MAX];
int d[MAX];
pair<int,int> v[MAX];

void compute_palindrome_radius(char *text, int n) {
	int i, j, k;
	for (i = 0, j = 0; i < 2*n; i += k, j = max(j-k, 0)) {
		while (i-j >= 0 && i+j+1 < 2*n && text[(i-j)/2] == text[(i+j+1)/2]) ++j;
		rad[i] = j;
		for (k = 1; i-k >= 0 && rad[i]-k >= 0 && rad[i-k] != rad[i]-k; ++k)
			rad[i+k] = min(rad[i-k], rad[i]-k);
	}

	int cnt = 0;
	for (int i=1;i<2*n;i+=2) {
		d[cnt++] = rad[i]/2;
	}
}

int T[MAX];
int n;

void inc(int x, int k) {
	for ( ; x < n; x |= x+1) T[x] += k;
}

int query(int a, int b) {
	if (a == 0) {
		int sum = 0;
		for (; b >= 0; b = (b&(b+1))-1) sum += T[b];
		return sum;
	}
	return query(0,b) - query(0,a-1);
}


int main() {
	int ncases;
	scanf("%d", &ncases);
	while (ncases-- > 0) {
		scanf("%s", input);

		n = strlen(input);
		compute_palindrome_radius(input, n);

		for (int i=0;i<n;++i) {
			T[i] = 0;
			v[i] = make_pair(d[i] - 2*i, i);
		}

		int at = 0;
		sort(v, v+n, greater<pair<int,int> >() );

		long long sum = 0;

		for (int i=0;i<n;++i) {
			while (at < n && v[at].first >= -2*i) {
				inc(v[at].second, 1);
				++at;
			}

			if (i + 1 <= i + d[i]) {
				int add = query(i+1, i + d[i]);
				sum += add;
			}
		}

		printf("%lld\n", sum);
	}
}
