#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <ctime>
#include <queue>

using namespace std;

void fill_periods(const string &s, vector <int> &a)
{
	int i = 1, j = 0;
	while (i < s.size() - 2)
	{
		while (s[i - j] == s[i + j + 1]) ++j;
		a[i] = j;
		int k = 1;
		while (k <= j && a[i - k] != a[i] - k)
			a[i + k] = min(a[i - k], a[i] - k), ++k;
		j = max(j - k, 0), i = i + k;
	}
}

vector <int> sum;

long long get_sum(int r)
{
	long long rt = 0;
	while (r >= 0)
	{
		rt += sum[r];
		r = (r & (r + 1)) - 1;
	}
	return rt;
}

int add_to_sum(int x, int y)
{
	while (x < sum.size())
		sum[x] += y, x = x | (x + 1);
}

int main()
{
	int T;
	scanf("%d\n", &T);
	for (; T--;)
	{
		string s;
		getline(cin, s);
		s = "*" + s + "+";
		vector <int> a(s.size() - 1);
		fill_periods(s, a);
		vector <pair <int, int> > b(a.size() - 1);
		for (int i = 1; i < a.size(); ++i)
			b[i - 1] = make_pair(2 * i - a[i], i);
		sort(b.begin(), b.end());
		sum = vector <int> (a.size());
		/*
			d[j] >= 2 * (j - i)
			d[j] - 2 * j >= - 2 * j
			2 * j - d[j] <= 2 * i
			j <= i + d[i]
		*/
		long long rt = 0;
		int x = 0;
		for (int i = 1; i < a.size(); ++i)
		{
			while (x < b.size() && b[x].first <= 2 * i)
				add_to_sum(b[x].second, 1), ++x;
			add_to_sum(i, -1);
			rt += get_sum(i + a[i]);
		}
		cout << rt << endl;
	}
    return 0;
}
