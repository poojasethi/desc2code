#include <bits/stdc++.h>
using namespace std;

#define PN (1 << 20)

int n, sz[25], dp[PN], neighbour[25], bitcount[PN];

int calc(int mask){
	if(dp[mask] != -1)	return dp[mask];
	dp[mask] = INT_MAX;

	int index = bitcount[mask];

	for(int i = 0; i < n; i++){
		if((mask&(1 << i)) == 0){
			int already = bitcount[mask&(neighbour[i])];
			int add = already * (index + 1);
			int subtract = (sz[i] - already)*(index + 1);
			dp[mask] = min(dp[mask], calc(mask|(1 << i)) + add - subtract);
		}
	}
	return dp[mask];
}

int main(){

	memset(dp, -1, sizeof(dp));

	int m, u, v;
	cin>>n>>m;

	dp[(1 << n) - 1] = 0;

	bitcount[0] = 0;

	for(int i = 1; i < PN; i++){
		bitcount[i] = bitcount[i/2];
		if(i&1)	bitcount[i]++;
	}

	while(m--){
		cin>>u>>v;
		u--, v--;
		neighbour[u] += (1 << v);
		neighbour[v] += (1 << u);
		sz[u]++, sz[v]++;
	}

	cout<<calc(0)<<endl;

	//system("pause");
	
	return 0;
}