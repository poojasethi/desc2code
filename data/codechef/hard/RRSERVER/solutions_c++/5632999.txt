#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

pii dp[1 << 20];
bool e[20][20];

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  ios_base::sync_with_stdio(false);

  int n, m;
  cin >> n >> m;

  rep(i, m) {
    int a, b;
    cin >> a >> b;
    --a;
    --b;
    e[a][b] = e[b][a] = true;
  }

  for (int m = 1; m < (1 << n); ++m) {
    int mm, ii;
    rep(i, n) {
      if (m & (1 << i)) {
        mm = m ^ (1 << i);
        ii = i;
        break;
      }
    }
    int c = dp[mm].X;
    rep(i, n) {
      if (e[ii][i] && i != ii) c += (mm & (1 << i)) ? -1 : +1;
    }
    dp[m].X = c;

    int r = INF;
    rep(i, n) {
      if (!(m & (1 << i))) continue;
      r = min(r, dp[m ^ (1 << i)].Y);
    }
    r += c;
    dp[m].Y = r;
  }

  cout << dp[(1 << n) - 1].Y << endl;

#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
