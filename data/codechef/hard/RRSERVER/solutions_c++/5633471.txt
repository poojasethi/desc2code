#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;

vvi gr;
vi was;

void dfs(int v) {
    if (was[v]) return;
    was[v] = 1;
    for (int i = 0; i < gr[v].size(); ++i)
        dfs(gr[v][i]);
}

int main() {
    int n,m;    
    cin >> n >> m;
    gr.resize(n);
    vvi w(n, vi(n));
    for (int i = 0; i < m; ++i) {
        int a,b;
        cin >> a >> b;
        --a; --b;
        if (a == b) continue;
        w[a][b] = w[b][a] = 1;
        gr[a].push_back(b);
        gr[b].push_back(a);
    }
    vi d(1 << n, 1e9);
    vi c(1 << n);
    d[0] = 0;
    for (int mask = 1; mask < (1 << n); ++mask) {
        int b;
        for (b = 0; b < n; ++b) if (mask & (1 << b)) {
            break;
        }
        c[mask] = c[mask ^ (1 << b)];
        for (int i = 0; i < n; ++i) {
            if (mask & (1 << i)) {
                c[mask] -= w[b][i];
            } else {
                c[mask] += w[b][i];
            }
        }
    }
    for (int mask = 1; mask < (1 << n); ++mask) {
        vi v;
        for (int b = 0; b < n; ++b) if (mask & (1 << b)) {
            v.push_back(b);
        }
        for (int b = 0; b < n; ++b) if (mask & (1 << b)) {
//            v[b] = 1;
            int rem = (mask ^ (1 << b));
            int cur = d[rem];
            cur += c[mask];
            if (cur < d[mask]) {
                d[mask] = cur;
            }
        }
    }
//    cerr << c[1] << ' ' << d[1] << endl;
//    cerr << c[3] << ' ' << d[3] << endl;
    cout << d.back() << endl;
    return 0;
}
