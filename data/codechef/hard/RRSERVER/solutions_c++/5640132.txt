#include<bits/stdc++.h>

#define s(a) scanf("%d",&a)
#define ss(a) scanf("%s",a)

#define MP           make_pair
#define PB           push_back
#define REP(i, n)    for(int i = 0; i < n; i++)
#define INC(i, a, b) for(int i = a; i <= b; i++)
#define DEC(i, a, b) for(int i = a; i >= b; i--)
#define CLEAR(a)     memset(a, 0, sizeof a)

using namespace std;

typedef long long          LL;
typedef unsigned long long ULL;
typedef vector<int>        VI;
typedef pair<int, int>     II;
typedef vector<II>         VII;

vector<int> links[25];
int nghbrs[25];
int dp[1500000][2];      // 0 for cum cost, 1 for neighbors outside
int main()
{
      int n,m,a,b;
      int c = 0;
      s(n);s(m);
      CLEAR(nghbrs);
      while(m--)
      {
            s(a);s(b);
            a--;
            b--;
            nghbrs[a] = nghbrs[a]|(1<<b);
            nghbrs[b] = nghbrs[b]|(1<<a);
      }
      CLEAR(dp);
      int UPPER = (1<<n);
      const int INF = 2e9;
      REP(i,UPPER)
            dp[i][0] = dp[i][1] = INF;
      dp[0][0] = dp[0][1] = 0;
      REP(i,UPPER)
      {
            if(i==UPPER-1)
                  break;
            REP(j,n)
            {
                  if((i|(1<<j))==i)
                        continue;
                  int next = i|(1<<j);
                  int cost1 = dp[i][0] + dp[i][1] + __builtin_popcount(nghbrs[j]) - 2*__builtin_popcount(nghbrs[j]&i);
                  int cost2 = dp[i][1] + __builtin_popcount(nghbrs[j]) - 2*__builtin_popcount(nghbrs[j]&i);
                  if(dp[next][0]>cost1)
                        dp[next][0] = cost1, dp[next][1] = cost2;
            }
      }
      //REP(i,UPPER)
      //      printf("mask = %d, v1 = %d, v2 = %d\n",i,dp[i][0],dp[i][1]);
      assert(dp[UPPER-1][1] == 0);
      printf("%d\n",dp[UPPER-1][0]);
      return 0;
}
