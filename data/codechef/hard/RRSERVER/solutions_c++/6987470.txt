#include <bits/stdc++.h>
#define inf 1e9
 
using namespace std;
 
vector< vector<int> > connections(25);
bool connect[25][25];
int n,m;
 
int dp[1<<20],halfPairs[1<<20];
 
int minRope(int machineMask){
	int& res=dp[machineMask];
	if(res!=-1) return res;
	if(machineMask==((1<<n)-1)){
		res=0;
		return 0;
	}
	int newMask,toAdd,sz;
	res=inf;
	//going over each possible candidate for the right-most available position
	for(int i=0;i<n;i++){
		if(machineMask&(1<<i)) continue;
		newMask=machineMask; toAdd=0;
		newMask|=(1<<i);
		res=min(res,halfPairs[machineMask]+minRope(newMask));
	}
	return res;
}
 
int main(int argc, char const *argv[]){
	int a,b,temp;
	scanf("%d%d",&n,&m);
	for(int i=0;i<(1<<n);i++) dp[i]=-1;
	for(int i=0;i<m;i++){
		scanf("%d%d",&a,&b);
		a--; b--;
		connect[a][b]=connect[b][a]=true;
		connections[a].push_back(b);
		connections[b].push_back(a);
	}
	for(int mask=0;mask<(1<<n);mask++){
		temp=0;
		for(int j=0;j<n;j++){
			if(!(mask&(1<<j))) continue;
			for(int k=0;k<connections[j].size();k++){
				if(!(mask&(1<<connections[j][k]))){
					temp++;
				}
			}
		}
		halfPairs[mask]=temp;	
	}
	printf("%d\n",minRope(0));
	return 0;
} 