#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>

using namespace std;

const int inf = 1e9;

int edges[1 << 20];
int bits[1 << 20];
int add[1 << 20];
int f[1 << 20];

int main() {
  // freopen("in", "r", stdin); freopen("out", "w", stdout);
  int n, m;
  scanf("%d %d", &n, &m);
  memset(edges, 0, sizeof edges);
  for (int i = 0; i < m; ++i) {
    int x, y;
    scanf("%d %d", &x, &y);
    --x;
    --y;
    edges[x] |= (1 << y);
    edges[y] |= (1 << x);
  }
  bits[0] = 0;
  for (int i = 1; i < (1 << n); ++i) {
    bits[i] = bits[i & (i - 1)] + 1;
  }
  for (int mask = 0; mask < (1 << n); ++mask) {
    add[mask] = 0;
    for (int i = 0; i < n; ++i) {
      if ((mask >> i) & 1) {
        add[mask] += bits[edges[i]];
        add[mask] -= bits[edges[i] & mask];
      }
    }
  }
  f[0] = 0;
  for (int mask = 1; mask < (1 << n); ++mask) {
    f[mask] = inf;
    for (int i = 0; i < n; ++i) {
      if ((mask >> i) & 1) {
        if (f[mask ^ (1 << i)] < f[mask]) {
          f[mask] = f[mask ^ (1 << i)];
        }
      }
    }
    f[mask] += add[mask];
  }
  printf("%d\n", f[(1 << n) - 1]);
  return 0;
}