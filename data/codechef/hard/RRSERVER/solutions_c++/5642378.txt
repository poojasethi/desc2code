// adijimmy
#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
const int mod = 1e9+7;
const int INF = 1e9+9;

#define pb push_back
#define mp make_pair

#define CLR(a,x) memset(a,x,sizeof (a));
#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,n) for(int i=n-1;i>=0;i--)
#define fr(i,a,b) for(int i=a;i<=b;i++)
#define bk(i,a,b) for(int i=b;i>=a;i--)

#define gi(n) scanf("%d",&n);
#define gl(n) scanf("%lld",&n);
#define ps printf(" ");
#define pn printf("\n");
#define pi(n) printf("%d",n);
#define pl(n) printf("%lld",n);

const int N = 21;
int dp[1<<N];
int needed[N];
int bits[1<<N];
int n,m,u,v;

int get_bits(int mask){
  return bits[mask];
}

int solve(int mask,int len){
   if(mask == ((1<<n)-1)) return 0;
   int &res = dp[mask];
   if(res != -1) return res;
   res = INF;
   rep(i,n){
     if(mask & (1<<i)) continue;
     len -= get_bits(mask & needed[i]);
     len += get_bits(~mask & needed[i]);
     res = min(res,len+solve(mask|(1<<i),len));
     len += get_bits(mask & needed[i]);
     len -= get_bits(~mask & needed[i]);
   }
   return res;
}

int main(){
    gi(n);gi(m);
    rep(i,m){
     gi(u);gi(v);
     u--;v--;
     needed[u] |= (1<<v);
     needed[v] |= (1<<u);
    }
    CLR(dp,-1);
    bits[0] = 0;
    fr(i,1,1<<N-1){
      bits[i] = __builtin_popcount(i);
    }
    pi(solve(0,0));
    pn;
    return 0;
}
