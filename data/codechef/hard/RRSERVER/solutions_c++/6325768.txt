#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>

using namespace std;


#define rofeach(i,x) for(type(x)i=x.rbegin();i!=x.rend();i++)
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define type(x) __typeof(x.begin())
#define pii pair< int,int >
#define mod 1000000007
#define ll long long
#define pb push_back
#define inf 1000000000
#define nd second
#define st first
#define endl '\n'

const int N = 2e6+5;
const int MAX = 1e9+5;

int mask2[31],dp[N],dp2[N],n,m,k,x,y;

int f(int mask){
	
	if(mask == (1<<n)-1) return 0;
	
	int &r = dp[mask];

	if(r != -1) return r;

	r = inf;

	int t1,t2,size = __builtin_popcount(mask) + 1;

	FOR(i,1,n){
		if(mask & (1<<i-1)) continue;
		t1 = __builtin_popcount(mask2[i]&mask);
		t2 = __builtin_popcount(mask2[i])-t1;
		r = min(r,f(mask|1<<i-1) + size * t1 - t2 * size);
	}

	return r;
}

int main(){

	memset(dp,-1,sizeof dp);

	scanf("%d %d",&n,&m);

	FOR(i,1,m){ 
		scanf("%d %d",&x,&y);
		mask2[x] |= 1 << y - 1;
		mask2[y] |= 1 << x - 1;
	}
	
	cout << f(0) << endl;

   return 0;
}
