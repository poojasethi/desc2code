#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define eps 1e-9
#define FOR(x, s, e) for(int x = (s); x < (e); ++x)
#define FORc(x, s, e, c) for(int x = (s); x < (e) && (c); ++x)
#define STEP(x, s, e, d) for(int x = (s); x < (e); x+=(d))
#define ROF(x, s, e) for(int x = (s); x >= (e); --x)
#define ROFc(x, s, e, c) for(int x = (s); x >= (e) && (c); --x)
#define vb vector<bool>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define ALL(X) X.begin(), X.end()
#define LL long long
#define pii pair<int, int>
#define x first
#define y second
#define gcd(x, y) __gcd((x), (y))
#define countbit(x) __builtin_popcount(x)

using namespace std;

map<string, int> D;

vs P[51];

void clear(string s){
    int L = s.length();
    string t;
    ROF(i, L-1, 0){
        t += s[i];
        int q = --D[t];
        if (!q) D.erase(t);
    }
}

void add(string s){
    int L = s.length();
    string t;
    ROF(i, L-1, 0){
        t += s[i];
        D[t]++;
    }
}

void precal(string s){
    int L = s.length();
    string t[2] = {"4", "7"};
    FOR(i, 0, 2){
        string q = s + t[i];
        add(q);
        if (D.size() <= 50){
            P[(int)D.size()].pb(q);
            precal(q);
        }
        clear(q);
    }
}

struct cmp{
    bool operator()(const string &A, const string &B)const{
        return A.length() < B.length();
    }
};

int main(int argc, char **argv){
    precal("");
    FOR(i, 1, 51) sort(ALL(P[i]), cmp());
    int T;
    scanf("%d", &T);
    FOR(ca, 0, T){
        int N, K;
        scanf("%d%d", &N, &K);
        char line[100];
        scanf("%s", line);
        int res = 0;
        FOR(k, 1, K+1)
            FORc(i, 0, P[k].size(), P[k][i].length() <= N)
                if (P[k][i].length() == N){
                    bool ok = 1;
                    FORc(j, 0, N, ok)
                        ok = (line[j] == '?') || (line[j] == P[k][i][j]);
                    res += ok;
                }
        printf("%d\n", res);
    }
    return 0;
}
