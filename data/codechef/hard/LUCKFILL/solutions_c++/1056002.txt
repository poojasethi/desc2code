#include<iostream>
#include<sstream>
#include<cstdio>
#include<memory.h>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<string>
#include<map>
#include<cstring>
#include<vector>
#include<queue>
#include<stack>
#include<assert.h>
#include<set>
#include<deque>
#include<climits>
#include<utility>

using namespace std;

#define SI ({int _x; scanf("%d",&_x); _x;})
#define SLL ({long long _x; scanf("%lld",&_x); _x;})
#define SLF ({double _x; scanf("%lld",&_x); _x;})
#define SC ({char _x; scanf("%c",&_x); _x;})
#define sscan(n) scanf("%s",n)
#define lc(i) (i<<1)
#define rc(i) ((i<<1)+1)
#define MP make_pair
#define PB push_back
#define LL long long
#define FILL(a,x) memset(a,x,sizeof a)
#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REPD(i,b) for(int i=(b)-1;i>=0;--i)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)>(b)?(b):(a))
#define ABS(a) ((a)<0?-(a):(a))

typedef vector<int> VI; 
typedef pair<int,int> PI; 
#define SZ(a) int((a).size()) 
#define ALL(c) (c).begin(),(c).end() 
#define SORT(a) sort(ALL(a))
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define dbg(x) cout<<#x<<" = "<<x<<endl
#define RAND(x) ((int)(((rand()*1.0)/RAND_MAX)*(x)))

map <LL,int> m[55];
int countNewSubs(LL msk, int len)
{
	int ret = 0;
	for(int i = 1; i<len; ++i)
	{
		bool exists = false;
		LL pnew = ((1ll<<i)-1)&msk;
		for(int j = 1; j+i-1 < len; ++j)
		{
			LL t = ((((1ll<<i)-1)<<j)&msk)>>j;
			if(t == pnew) { exists = true; break; }
		}
		if(!exists) ++ret;
	}
	return ret;
}


void solve(LL msk, int len, int nsubs)
{
	if(len >= 50) return;
	if(nsubs >= 50) return;
	++len;
	msk <<= 1;
	int newsubs = 1 + countNewSubs(msk,len); // the new msk is a new substring ..
	if(nsubs + newsubs <= 50) 
	{
		m[len][msk] = nsubs + newsubs;
	//	dbg(len); dbg(msk); dbg(m[len][msk]);
		solve(msk,len,nsubs+newsubs);
	}
	++msk;
	newsubs = 1 + countNewSubs(msk,len);
	if(nsubs + newsubs <= 50) 
	{
		m[len][msk] = nsubs + newsubs;
	//	dbg(len); dbg(msk); dbg(m[len][msk]);
		solve(msk,len,nsubs+newsubs);
	}
	return;
}

char in[55];

LL convert(int len, char ch)
{
	LL ret = 0;
	for(int i = 0; i<len; ++i)
	{
		ret <<= 1;
		if(in[i] == ch) ret += 1;
	}
	return ret;
}

int main()
{
	solve(0,0,0);
	int t = SI;
	while(t--)
	{
		int n = SI, k = SI;
		sscan(in);
		LL x = convert(n,'7');
		LL any = convert(n,'?');
		any = ((1ll<<n)-1)^any;
		int ans=0;
		TR(m[n],it)
		{
			if(it->second > k) continue;
			LL t = it->first & any;
			if(t == x) ++ans;
		}
		printf("%d\n",ans);
	}
	return 0;
}
