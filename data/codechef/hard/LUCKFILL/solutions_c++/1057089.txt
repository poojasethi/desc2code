#include <iostream>
#include <string>
#include <cstdio>
#include <algorithm>
#include <vector>
#define pb push_back
#define mp make_pair
#define ss second
#define ff first
using namespace std;
int n, K;
string s;
vector <string> have;
vector <int> cnt;
int p[123];

bool check(const string &s, int from, int to)
{
	p[1] = 0;
	int k = 0;
	for (int i = 2; i <= to - from; i++)
	{
		while (k && s[from + k] != s[from + i - 1]) k = p[k];
		if (s[from + k] == s[from + i - 1]) k++;
		p[i] = k;
	}
	k = 0;
	for (int i = 0; i < to - 1; i++)
	{
		while (k && s[from + k] != s[i]) k = p[k];
		if (s[from + k] == s[i]) k++;
		if (k == to - from) return false;
	}
	return true;
}

vector <pair <string, int> > patterns[52];

void go(int i)
{
	int sz = have.size();
	for (int j = 0; j < sz; j++)
	{
		have.pb(have[j] + '7');
		cnt.pb(cnt[j]);
		have[j] += '4';
	}
	for (int j = 0; j < have.size(); j++)
	{
		for (int k = 0; cnt[j] <= 50 && k < i; k++)
		{
			if (check(have[j], k, i))
				cnt[j]++;
		}
		if (cnt[j] > 50)
		{
			swap(cnt[j], cnt.back());
			swap(have[j], have.back());
			cnt.pop_back();
			have.pop_back();
			j--;
		}
		else
			patterns[i].pb(mp(have[j], cnt[j]));
	}
	if (i < 50)
		go(i + 1);
}

void init()
{	
	have.pb("");
	cnt.pb(0);
	go(1);
}


bool match(string &s, string &t)
{
	for (int i = 0; i < t.size(); i++)
		if (s[i] != '?' && t[i] != '?' && s[i] != t[i]) return false;
	return true;
}

void solve()
{
	int result = 0;
	for (int i = 0; i < patterns[n].size(); i++)
	{
		if (patterns[n][i].ss <= K && match(patterns[n][i].ff, s))
			result++;
	}
	printf("%d\n", result);
}

int main()
{
//	freopen("a.in", "rt", stdin);
//	freopen("a.out", "wt", stdout);
	int T;
	init();
	cin >> T;
	for (int i = 0; i < T; i++)
	{
		scanf("%d%d", &n, &K);
		cin >> s;
		solve();
	}
	return 0;
}