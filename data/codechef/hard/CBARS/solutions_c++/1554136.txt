#include<iostream>
#include<cstring>
#include<cstdio>
using namespace std;

#define MOD 1000000007

int a;
long long b;
long long ar[65][65],br[65][65],cr[65][65];

void reset()
{
    memset(ar,0LL,sizeof(ar));
    memset(br,0LL,sizeof(br));
    memset(cr,0LL,sizeof(cr));
    for(int i=0;i<1<<a;i++)
    {
        ar[i][i]=1LL;
    }
}

bool check(int i,int j)
{
    for(int k=0;k<a-1;k++)
    {
        bool q=(i&(1<<k)),w=(i&(1<<(k+1)));
        bool e=(j&(1<<k)),r=(j&(1<<(k+1)));
        if(q==w && w==e && e==r) return false;
    }
    return true;
}

void matrixMul(long long ap[65][65], long long bp[65][65], long long c[65][65]) {
	for (int i=0;i<1<<a;i++) {
		for (int j=0;j<1<<a;j++) {
			c[i][j] = 0LL;
			for (int k=0;k<1<<a;k++) {
				c[i][j] = (c[i][j] + ap[i][k] * bp[k][j]) % MOD;
			}
			c[i][j]%=MOD;
		}
	}
}

void matrixCopy(long long ap[65][65], long long bp[65][65])
{
    for (int i=0;i<1<<a;i++) {
		for (int j=0;j<1<<a;j++) {
				ap[i][j] = bp[i][j];
        }
    }
}

void matrixPow(long long n)
{
    while(n)
    {
        if(n%2LL)
        {
            matrixMul(ar,br,cr);
            matrixCopy(ar,cr);
        }
        n=n/2LL;
        matrixMul(br,br,cr);
        matrixCopy(br,cr);
    }
}

long long compute()
{
    for(int i=0;i<1<<a;i++)
    {
        for(int j=0;j<1<<a;j++)
        {
            br[i][j]=check(i,j);
        }
    }

    matrixPow(b-1LL);

    long long res = 0LL;
	for (int i=0;i<1<<a;i++)
	{
		for (int j=0;j<1<<a;j++)
		{
			res = (res + ar[i][j])%MOD;
		}
	}
	return res;
}
int main()
{
    scanf("%d%lld",&a,&b);
    reset();
    printf("%lld\n",compute());
    return 0;
}
