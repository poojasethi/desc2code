#include <cstdio>
#include <vector>
#include <iostream>
#include <string.h>
#include <string>
#include <memory.h>
#include <time.h>
#include <cmath>
#include <queue>
#include <set>
#include <algorithm>
#include <cstdlib>
#include <map>


#define INF 1000000000
#define LLINF 1000000000000000000
#define ll long long
#define ld long double
#define F first
#define EPS 1e-5
#define S second
#define pb push_back
#define mp make_pair
#define y1 olololo
#define y0 olo


using namespace std;

template <class T> T sqr(T x){return x*x;}


typedef vector<vector<ll> > vii;

ll n,m;
const int base=(int)1e9+7;
vii f;
int lim;

vii mul(vii x, vii y){
    vii res;
    res.resize(lim+1);
    for(int i=0;i<lim;++i)res[i].resize(lim+1);
    for(int i=0;i<lim;++i)
        for(int j=0;j<lim;++j)
            for(int k=0;k<lim;++k)
                res[i][j]=(res[i][j]+x[i][k]*y[k][j])%base;
    return res;
}

vii binpow(vii x, ll p){
    if (p==0){
        vii res;
        res.resize(lim+1);
        for(int i=0;i<lim;++i)res[i].resize(lim+1);
        for(int i=0;i<lim;++i)
            for(int j=0;j<lim;++j)
                if (i==j)res[i][j]=1;
                else res[i][j]=0;
        return res;
    }
    if (p==1) return x;
    if (p%2==0){
        vii cur=binpow(x, p/2);
        return mul(cur, cur);
    }
    else return mul(binpow(x, p-1),x);
}

bool solve(int msk1, int msk2){
    vector<int>bit1, bit2;
    for(int i=0;i<=n;++i){
        bit1.pb(msk1%2);
        bit2.pb(msk2%2);
        msk1/=2; msk2/=2;
    }
    for(int i=0;i<n-1;++i){
        int s=bit1[i]+bit1[i+1]+bit2[i]+bit2[i+1];
        if (s%4==0)return 0;
    }
    return 1;
}

int main(){
    //freopen("input.txt","r",stdin);
    ios_base::sync_with_stdio(0);
    cin>>n>>m;
    lim=(1<<n);
    f.resize(lim+1);
    for(int i=0;i<lim;++i)f[i].resize(lim+1);
    for(int msk1=0;msk1<lim;++msk1){
        for(int msk2=0;msk2<lim;++msk2){
            f[msk1][msk2]=solve(msk1,msk2);
        }
    }
    f=binpow(f, m-1);
    ll res=0;
    for(int i=0;i<lim;++i)
        for(int j=0;j<lim;++j)
            res=(f[i][j]+res)%base;
    cout<<res;
    return 0;
}