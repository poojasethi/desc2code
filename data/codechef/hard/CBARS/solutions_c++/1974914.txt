#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <climits>
#include <numeric>
#include <vector>
#include <cmath>
using namespace std;
#define ll long long
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)
#define BUFSIZE (10000)
char inputbuffer[BUFSIZE];
char *ioptr=inputbuffer+BUFSIZE,*ioend=inputbuffer+BUFSIZE;
int input_eof=0;
#define getchar() ({if (ioptr >= ioend) init_input(); *ioptr++;})
#define eof() (ioptr>=ioend && input_eof)
#define eoln() ({if(ioptr >= ioend) init_input(); *ioptr == '\n';})
void init_input(){
	if (input_eof) return;
	int existing = BUFSIZE - (ioend - inputbuffer);
	memcpy(inputbuffer, ioend, existing);
	int wanted = ioend - inputbuffer;
	int count=fread(inputbuffer + existing, 1, wanted, stdin);
	if (count < wanted)input_eof = 1;
	ioend = inputbuffer + BUFSIZE - (wanted - count);
	while (*--ioend > ' ');
	ioend++;
	ioptr=inputbuffer;
}
inline void non_whitespace(){
	for(;;){
		if(ioptr>=ioend)init_input();
		if(*ioptr>' ')return;
		ioptr++;
	}
}
inline int getint(){
	non_whitespace();
	int neg=0;
	if(*ioptr=='-'){
		ioptr++;
		neg=1;
	}
	int n=0;
	while(*ioptr>' ')
		n=(n<<3)+(n<<1)+*ioptr++-'0';
	ioptr++;
	if(neg)
		n=-n;
	return n;
}
#define N 70
#define M 1000000007
class TMatr
{
 public:
 int n;
 ll a[N][N];
 TMatr operator *(TMatr b);
};
TMatr res;
TMatr TMatr::operator *(TMatr b)
{
 res.n=n;
 for(int i=0;i<n;i++)
 for(int j=0;j<n;j++)
 {
  res.a[i][j]=0;
  for(int k=0;k<n;k++)
  res.a[i][j]=(res.a[i][j]+this->a[i][k]*b.a[k][j])%M;
 }
 return res;
}
int n;
bool can(int mask1,int mask2,int len)
{
 int i;bool b[4];
 for(i=0;i<len-1;i++)
 {
  b[0]=(mask1>>i)&1;
  b[1]=(mask1>>(i+1))&1;
  b[2]=(mask2>>i)&1;
  b[3]=(mask2>>(i+1))&1;
  if(b[0]&&b[1]&&b[2]&&b[3])return 0;
  if(!b[0]&&!b[1]&&!b[2]&&!b[3])return 0;
 }
 return 1;
}
int main()
{
	//freopen("in.txt","r",stdin);
	int T,i,j,l,k,x,y;ll m;
	while(~scanf("%d%lld",&n,&m))
	{
	 k=1<<n;
     TMatr a,b;a.n=k;
	 for(i=0;i<k;i++)
	 for(j=0;j<k;j++)
	 a.a[i][j]=can(i,j,n);
	 b.n=k;
	 memset(b.a,0,sizeof(b.a));
	 for(i=0;i<k;i++)b.a[i][i]=1;
	 m--;
	 while(m)
	 {
	  if(m&1)b=b*a;
	  a=a*a;m>>=1;
	 }
	 int ans=0;
	 for(i=0;i<k;i++)
	 for(j=0;j<k;j++)
	 ans=(ans+b.a[i][j])%M;
	 printf("%d\n",ans);
	}
	return 0;
}
