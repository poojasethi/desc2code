#include<stdio.h>
#include<vector>
#include<algorithm>
#include<map>
#define MAX(x,y) x>y?x:y
#define MIN(x,y) x<y?x:y
#define N 70
#define MOD 1000000007
using namespace std;
class Matrix
{
	public :
	long long A[N][N],n;
	Matrix(int x)
	{
		n=x;
		for (int i = 0; i < n; i ++)
		for (int j = 0; j < n; j ++)
		{
			A[i][j]=0;
		}
	}
	Matrix mul(Matrix a)
	{
		Matrix m(n);
		for (int i = 0; i < n; i ++)
		{
			for (int j = 0; j < n; j ++)
			{
				for (int k = 0; k < n; k ++)
				{
					m.A[i][j]=( m.A[i][j] + ( this->A[i][k]*a.A[k][j] ) )%MOD;
				}
			}
		}
		return m;
	}
};
bool canFollow(int m1,int m2,int a)
{
	bool b[4];
	for(int i=0;i<a-1;i++)
	{
		b[0]=(m1>>i) & 1;
		b[1]=(m1>>(i+1)) & 1;
		b[2]=(m2>>i) & 1;
		b[3]=(m2>>(i+1)) & 1;
		if(b[0] && b[1] && b[2] && b[3])return false;
		if(!b[0] && !b[1] && !b[2] && !b[3])return false;
	}
	return true;
}
int main()
{
	int a;
	long long b;
	scanf("%d%lld",&a,&b);
	int max=1<<a;
	Matrix x(max),y(max);
	
	for(int i=0;i<max;i++)
	for(int j=0;j<max;j++)
	x.A[i][j]=canFollow(i,j,a);
	
	for(int i=0;i<max;i++)
	y.A[i][i]=1;//identity matrix
	
	b--;
	while(b)
	{
		if(b & 1)
			y=y.mul(x);
		x=x.mul(x);
		b>>=1;
	}
//	for(int i=0;i<max;i++)
//	for(int j=0;j<max;j++)
//	printf("%d%c",x.A[i][j],j<max-1?' ':'\n');
	long long sum=0;
	for(int i=0;i<max;i++)
	for(int j=0;j<max;j++)
	sum=(sum+y.A[i][j])%MOD;
	
	printf("%lld\n",sum);
}
