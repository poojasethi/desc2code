#include <cstdio>
using namespace std;

#define MOD 1000000007

struct matrix {
    int a[70][70];
}a;

int M, s;
long long N;

bool check(int x, int y) {
    for (int i=1; i<M; ++i) {
        bool b1 = x&(1<<(i-1));
        bool b2 = x&(1<<i);
        bool b3 = y&(1<<(i-1));
        bool b4 = y&(1<<i);
        if (b1 == b2 && b2 == b3 && b3 == b4) return false;
    }
    return true;
}

matrix matrix_mul(const matrix &a, const matrix &b, int m) {
    matrix c;
    for (int i=0; i<s; ++i) 
        for (int j=0; j<s; ++j) 
            c.a[i][j] = 0;
    for (int i=0; i<s; ++i)
        for (int k=0; k<s; ++k)
            if (a.a[i][k]) 
                for (int j=0; j<s; ++j)
                    if (b.a[k][j])
                        c.a[i][j] = (int)((c.a[i][j] + a.a[i][k] * (long long) b.a[k][j]) % m);
    return c;
}

matrix matrix_pow(matrix a, long long b, int m) {
    matrix c;
    for (int i=0; i<s; ++i)
        for (int j=0; j<s; ++j) 
            c.a[i][j] = (i==j);
    for (; b; b>>=1, a=matrix_mul(a, a, m))
        if (b&1)
            c = matrix_mul(c, a, m);
    return c;
}

int main() {
    scanf("%d%lld", &M, &N);
    s = 1<<M;
    for (int i=0; i<s; ++i) {
        for (int j=0; j<s; ++j) {
            a.a[i][j] = check(i, j);
        }
    }
    a = matrix_pow(a, N-1, MOD);
    int ans = 0;
    for (int i=0; i<s; ++i) {
        for (int j=0; j<s; ++j) {
            ans = (int)((ans + (long long)a.a[i][j]) % MOD);
        }
    }
    printf("%d\n", ans);
    return 0;
}
