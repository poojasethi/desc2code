#include <iostream>
#include <algorithm>
#include <string>
#include <set>
#include <vector>
#include <queue>
#include <fstream>
#include <sstream>
#include <map>
#include <list>
#include <cmath>
#include <bitset>
#include <stack>
#include <stdio.h>
#include <cstring>
#include <ctime>
#include <ctype.h>
#include <utility>
#include <stdlib.h>
using namespace std;

#define ll long long
#define mod 1000000007

class TMatrix
{
    public:
    ll n;
    ll el[64][64];
    
    TMatrix operator * (TMatrix m);
};

TMatrix result;

TMatrix TMatrix::operator * (TMatrix m)
{
    
    result.n = n;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            ll p = 0;
            for (int k = 0; k < n; k++)
            {
                p = (p + el[i][k] * m.el[k][j]) % mod;
            }
            result.el[i][j] = p;
        }
    }
    
    return result;
}

bool con (int s1, int s2, int b)
{
    for (int i = 0; i < b - 1; i++)
    {
		int sk = s1 & s2;
		int b1 = (1 << i) & sk;
		int j = i + 1;
		int b2 = (1 << j) & sk;
        if (b1 > 0 && b2 > 0)
            return true;
		sk = s1 | s2;
		b1 = (1 << i) & sk;
		b2 = (1 << j) & sk;
        if (b1 == 0 && b2 == 0)
            return true;
    }
    return false;
}

TMatrix A, B;    

int main (void)
{
    ll a, b;
    cin >> a >> b;

    A.n = 1 << a;
    B.n = 1 << a;  
    
    for (int i = 0; i < (1 << a); i++)
        B.el[i][i] = 1;
    
    for (int i = 0; i < (1 << a); i++)
    {
        for (int j = 0; j < (1 << a); j++)
        {
            if (con(i, j, (int)a))
                A.el[i][j] = 0;
            else
                A.el[i][j] = 1;
        }
    }
    
    b--;
    while (b)
    {
        if (b & 1)
            B = B * A;
        A = A * A;
        b >>= 1;
    }
    
    ll result = 0;
    for (int i = 0; i < (1 << a); i++)
        for (int j = 0; j < (1 << a); j++)
            result = (result + B.el[i][j]) % mod;
    
    cout << result << endl;
}