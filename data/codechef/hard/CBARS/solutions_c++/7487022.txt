#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int MASK = (1<<6)+10, MOD = 1000000007;

long long n, m;
long long dp[MASK][MASK], base[MASK][MASK], res[MASK][MASK];

int pod(int a,int b){
    //printf("pod %d, %d?\n", a, b);
    int ant=-1;
    int atu=-1;
    for(int d=n-1;d>=0;d--){
        int c=(1<<d);
        ant = atu;
        //printf("ve %d %d %d\n", a, b, c);
        if(a>=c && b>=c){
            a-=c;
            b-=c;
            atu=1;
        }
        else if(a<c && b<c){
            atu=0;
        }
        else if(a>=c && b<c){
            a-=c;
            atu=-1;
        }
        else{
            b-=c;
            atu=-1;
        }

        if(atu==ant && atu!=-1){
            //printf("n pod %d = %d\n", atu, ant);
            return 0;
        }
    }
    //printf("pod :D\n");
    return 1;
}

void pot(long long exp){
    //printf("pot(%lld)\n", exp);
    if(exp==1 || exp==0) return;
    pot(exp/2);
    for(int a=0;a<(1<<n);a++){
        for(int b=0;b<(1<<n);b++){
            res[a][b]=0;
            for(int c=0;c<(1<<n);c++){
                res[a][b]=(res[a][b]+dp[a][c]*dp[c][b])%MOD;
            }
        }
    }
    for(int a=0;a<(1<<n);a++){
        for(int b=0;b<(1<<n);b++){
            dp[a][b]=res[a][b];
        }
    }
    if(exp%2==1){
        for(int a=0;a<(1<<n);a++){
            for(int b=0;b<(1<<n);b++){
                res[a][b]=0;
                for(int c=0;c<(1<<n);c++){
                    res[a][b]=(res[a][b]+base[a][c]*dp[c][b])%MOD;
                }
            }
        }
        for(int a=0;a<(1<<n);a++){
            for(int b=0;b<(1<<n);b++){
                dp[a][b]=res[a][b];
            }
        }
    }
}

int main(){
    scanf("%lld%lld", &n, &m);
    for(int a=0;a<(1<<n);a++){
        for(int b=0;b<(1<<n);b++){
            base[a][b]=dp[a][b]=pod(a,b);
        }
    }
    pot(m-1);
    if(m==1){
        printf("%d\n", (1<<n));
        return 0;
    }
    long long resu=0;
    for(int a=0;a<(1<<n);a++){
        for(int b=0;b<(1<<n);b++){
            resu=(resu+dp[a][b])%MOD;
        }
    }
    printf("%lld\n", (resu+MOD)%MOD);
    return 0;
}


