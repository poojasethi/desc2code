
//                          AUTHOR     ------------------>>> SAKHINETI VENKAT <<<-----------------

#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<bitset>
#include<math.h>
#include<iostream>
#define ll long long int
#define MAX 64
#define MOD 1000000007
using namespace std;

ll Mat[MAX][MAX]={0};

// Mat denotes the input matrix
// R denotes the rows
// L denotes the columns
void print_matrix( ll Mat[][MAX], ll R, ll C){
     ll i,j;
     for(i=0;i<R;i++){
	    for(j=0;j<C;j++){
	            cout << Mat[i][j] << " "; 
	    }  
            cout << endl;
     }
     return ;
}

// Mat is the input matrix; MAX can be changed to the dimension we wanted :)
// R  denote the rows
// N denots the POWER of the matrix we need to determine; 
// MOD 1000000007 defined above
void power_matrix( ll Mat[][MAX] ,ll R, ll N ){

     // intailization	
     ll temp1[MAX][MAX],temp2[MAX][MAX],temp4[MAX][MAX]={0},i,j,k;

     if(N==1) return ;
      
     // Doublicating the Matrix
     for(i=0;i<R;i++) 
	for(j=0;j<R;j++) 
            temp1[i][j]=temp2[i][j]=Mat[i][j];  

     // Matrix multiplication 
     // ---- Order n^3 -----
     for(i=0;i<R;i++)
	for(j=0;j<R;j++)
	   for(k=0;k<R;k++){
	          temp4[i][j]=(temp4[i][j]+(temp2[i][k]*temp2[k][j]))%MOD;  
	   }

     for(i=0;i<R;i++)
	 for(j=0;j<R;j++)
		 Mat[i][j] = temp4[i][j]; 

     power_matrix(Mat,R,N/2);       

     if(N%2==1){
         ll temp5[MAX][MAX]={0};

	 for(i=0;i<R;i++)
	    for(j=0;j<R;j++)
	       for(k=0;k<R;k++){
	              temp5[i][j]= (temp5[i][j]+Mat[i][k]*temp1[k][j])%MOD; 
	       }
         
         for(i=0;i<R;i++)
	       for(j=0;j<R;j++)
		  Mat[i][j]=temp5[i][j];      
     }

     return ;  
}

int main(){
    ll i,j,k;
    ll m,n,sum=0;
    cin >> m>>n;
    for(i=0;i<pow(2,m);i++){
           for(j=0;j<pow(2,m);j++){
		   bitset<6>  x(i&j),y( i|j);
		   ll flag=0,count=0;
                   // for the continues Ones for the AND
		   for(k=0;k<m;k++){
			  if(x.test(k)){
			      count++;
			  }else{
			     count=0;   
			  } 
		          if(count==2){
		              flag=1;		  
			      break;
			  }
		   }
		   //cout << "first flag " << flag << endl;
		   count = 0;
		   if(flag==0){
			  // for the contnues Zeros foe the OR 
		          for(k=0;k<m;k++){
			         if(y.test(k)){
				      count=0;
				 }else{
				      count++;
				 }
				 if(count==2){
				      flag=1;
				      break;
				 }
			  }  
		   }
                   if(flag) Mat[i][j] =0;
		   else Mat[i][j]=1;
		   //cout << i << " "<< j << " "<< x <<"  " << y <<" " << Mat[i][j] << endl;

	   }
	   //cout << endl;
    }
    //print_matrix(Mat,pow(2,m),pow(2,m));
    if(n>1){
        power_matrix(Mat,pow(2,m),n-1);
        for(i=0;i<pow(2,m);i++)
	    for(j=0;j<pow(2,m);j++){
	            sum=(sum+Mat[i][j])%MOD; 
	    }
        cout << sum <<  endl;
    }else{
        cout << pow(2,m) << endl;  
   }

    return 0; 
}
