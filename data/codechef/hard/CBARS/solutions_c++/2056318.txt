/*
 * A Wonderful Chocolate
 * File:   CBARS.cpp
 * Author: Andy Y.F. Huang
 * Created on April 16, 2013, 4:56 PM
 */

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

namespace CBARS {

template <int MOD> struct Integer {
  int val;

  Integer() : val(0) { }

  Integer(long long x) : val(x % MOD) {
    if (val < 0) val += MOD;
  }

  Integer& operator+=(const Integer & x) {
    val += x.val;
    if (val >= MOD) val -= MOD;
    return *this;
  }

  Integer operator+(const Integer & x) const {
    Integer res(*this);
    return res += x;
  }

  Integer& operator-=(const Integer & x) {
    val -= x.val;
    if (val < 0) val += MOD;
    return *this;
  }

  Integer operator-(const Integer & x) const {
    Integer res(*this);
    return res -= x;
  }

  Integer& operator*=(const Integer & x) {
    val = (long long) (val) * x.val % MOD;
    return *this;
  }

  Integer operator*(const Integer & x) const {
    Integer res(*this);
    return res *= x;
  }

  Integer& operator/=(const Integer & x) {
    return *this *= x.inv();
  }

  Integer operator/(const Integer & x)  const {
    Integer res(*this);
    return res /= x;
  }

  Integer power(long long expon) const {
    Integer ans, temp(*this);
    ans.val = 1;
    for (; expon > 0; expon >>= 1) {
      if (expon & 1) ans *= temp;
      temp *= temp;
    }
    return ans;
  }

  Integer inv() const {
    return power(MOD - 2);
  }

  friend ostream& operator<<(ostream& out, Integer & x) {
    return out << x.val;
  }

} ;

template <class T, size_t MAXSIZE> struct Matrix {
  int size;
  T data[MAXSIZE][MAXSIZE];

  Matrix(int size = MAXSIZE) : size(size) {
    memset(data, 0, sizeof (data));
  }

  T* operator[](int row) {
    return data[row];
  }

  const T* operator[](int row) const {
    return data[row];
  }

  Matrix operator*(const Matrix & other) const {
    Matrix ans = *this;
    ans *= other;
    return ans;
  }

  Matrix& operator*=(const Matrix & other) {
    static T temp[MAXSIZE][MAXSIZE];
    memset(temp, 0, sizeof (temp));
    for (int i = 0; i < size; i++)
      for (int j = 0; j < size; j++)
        for (int k = 0; k < size; k++)
          temp[i][j] += data[i][k] * other[k][j];
    memcpy(data, temp, sizeof (temp));
    return *this;
  }

  Matrix operator^(long long exponent) const {
    Matrix ans = *this;
    ans ^= exponent;
    return ans;
  }

  Matrix& operator^=(long long expon) {
    Matrix temp = *this;
    memset(data, 0, sizeof (data));
    for (int i = 0; i < size; i++)
      data[i][i] = 1;
    for ( ; expon > 0; expon >>= 1) {
      if (expon & 1) * this *= temp;
      temp *= temp;
    }
    return *this;
  }
} ;

#define MOD 1000000007

void solve(int test_num) {
  int rows;
  long long cols;
  scanf("%d %lld", &rows, &cols);
  int size = 1 << rows;
  Matrix<Integer<MOD>, 64 > mat(size);
  for (int i = 0; i < size; i++) {
    for (int j = 0; j < size; j++) {
      mat[i][j] = 1;
      for (int bit = 0; bit < rows - 1; bit++)
        if ((i >> bit & 1) == (j >> bit & 1) && (i >> (bit + 1) & 1) == (j >> (bit + 1) & 1)
                && (i >> bit & 1) == (i >> (bit + 1) & 1))
          mat[i][j] = 0;
    }
  }
  mat ^= cols - 1;
  Integer<MOD> ans = 0;
  for (int i = 0; i < size; i++)
    for (int j = 0; j < size; j++)
      ans += mat[i][j];
  printf("%d\n", ans.val);
}

void solve() {
  #ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
  #endif
  solve(1);
}
}

int main() {
  CBARS::solve();
  return 0;
}

