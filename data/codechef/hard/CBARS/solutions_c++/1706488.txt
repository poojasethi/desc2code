#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cstdlib>
using namespace std;
#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
const int MOD = 1000000007;
const int N = 1 << 6;
long long M[N][N], R[N][N], T[N][N]; 
int n; 
void matrix_mult(long long A[N][N], long long B[N][N], long long C[N][N]) {
	REP(i, n) REP(j, n) C[i][j] = 0;
	REP(i, n) REP(j, n) REP(k, n) {
		C[i][j] += A[i][k] * B[k][j];
		C[i][j] %= MOD;
	}
}
void matrix_pow(long long p) {
	if (p == 0) {
		REP(i, n) REP(j, n) {
			if (i == j) {
				R[i][j] = 1;
			} else {
				R[i][j] = 0;
			}
		}
	} else if (p % 2 == 0) {
		matrix_pow(p / 2);
		matrix_mult(R, R, T);
		REP(i, n) REP(j, n) R[i][j] = T[i][j];
	} else {
		matrix_pow(p - 1);
		matrix_mult(M, R, T);
		REP(i, n) REP(j, n) R[i][j] = T[i][j];
	}
}

int XnY(int X,int Y,int a)
{
	int C,D,prev_o,prev_x;
	C=X&Y;
	D=X|Y;
	prev_o=C&(1<<0);
	prev_x=D&(1<<0);
	for(int i=1;i<a;i++)
		{
			if((C&(1<<i))&&prev_o)
				return 0;		
			if((!(D&(1<<i))&&!prev_x))	
				return 0;	
			prev_o=C&(1<<i);
			prev_x=(D&(1<<i));	
		}
	return 1;		
}
int main()
{
		int a;
		long long b;
		scanf("%d %lld",&a,&b);
		for(int i=0;i< 1<<a;i++)
				for(int j=i;j< 1<<a;j++)
				{
								M[i][j]=XnY(i,j,a);
								M[j][i]=M[i][j];
				} 
	//Now Compute Expo and sum up the result to get the answer...
	/*for(int i=0;i< 1<<a;i++){
		for(int j=0;j< 1<<a;j++)
				cout<<M[i][j]<<" ";
				cout<<endl;}
	*/
	::n = 1 << a;
	matrix_pow(b - 1);
	long long sum=0;
	a=(1<<a);
	for(int i=0;i<a;i++)
		for(int j=0;j<a;j++){
				sum+=R[i][j]%MOD;
				sum%=MOD;
				}
	cout<<sum<<endl;
return 0;	
}
