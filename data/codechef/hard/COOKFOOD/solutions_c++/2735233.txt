/*	Template by
	Ashwin Kumar
	IIT Delhi */
#include<algorithm>		//min(), max(), reverse(), sort(), next_permutation(), prev_permutation(), swap()
						//make_heap(), pop_heap(), push_heap(), sort_heap()
#include<iostream>
#include<cassert>		//assert()
#include<cmath>			//cos(in radians), sin(), tan(), acos(), asin(), atan(), modf(break into frac and inte parts)
						//log(), log10(), log2(), pow(), sqrt(), cbrt(), ceil(), floor(), fmod(), abs()  
#include<cstdio>		//fclose(), fopen(), fprintf(), fscanf(), printf(), scanf(), gets(), puts()
#include<cstdlib>		//srand(time(NULL)), rand(), itoa(), malloc(), free()
#include<cstring>		//memcpy(), strcpy(), strcat(), strcmp(), memset(), strlen(), strtok(), strrchr()
#include<sstream>
#include<string>		//to_string(any numerical value), stoi(), stoll()
#include<ctime>   
#include<deque>			//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back() 
						//modifiers: push_back(), push_front(), pop_back(), pop_front(), erase(), clear()
#include<list>			//begin(), end(), push_back(), pop_back()
#include<map>			//begin(), end(), rbegin(), rend(), operator[], at(), clear(), find()
						//priority_queue:  top(), push(), pop()
#include<queue>			//front(), back(), push(), pop()
#include<set>			//begin(), end(), rbegin(), rend(), insert(), erase(), clear(), find()
#include<stack>			//top(), push(), pop()
#include<vector>		//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back()
						//modifiers: push_back(), pop_back(), erase(), clear() 
using namespace std;
 
typedef long long LL;
typedef pair<int, int> pii;
#define MAX 100
#define INF 1000000000000LL
#define MOD 1000000007

LL fpow(LL A, LL B)
{
	LL ans = 1, C = A;
	while (B > 0)
	{
		if (B&1 == 1)
			ans = (ans*C)%MOD;
		C = (C*C)%MOD;
		B >>= 1;
	}
	return ans;
}

int main()
{
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		LL N, K;
		scanf("%lld %lld", &N, &K);
		if (K == 1)
			printf("0\n");
		else if (K == 2)
			printf("2\n");
		else
		{
			LL A = (K*K)%MOD;
			LL B = (A+MOD-K)%MOD;
			LL C = (A+3+MOD-(3*K)%MOD)%MOD;
			printf("%d\n", (fpow(C, N-1)*B)%MOD);
		}
	}
	return 0;
}
