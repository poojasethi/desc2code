def solution():
    dp = {}
    dp[0] = 0
    dp[1] = 1
    for i in xrange(10):
        try:
            N = int(raw_input().strip())
        except ValueError:
            break
        val = recurse(N, dp)
        print "%d"%(val)

def recurse(N, dp):
    if N == 0:
        return 0
    if N == 1:
        return 1
    n_2 = N//2
    n_3 = N//3
    n_5 = N//4
    #print "%%%",n_2, n_5, n_3
    val = 0
    try:
        val += dp[n_2]
    except KeyError:
        ret_value_2 = recurse(n_2, dp)
        if ret_value_2 <= n_2:
            dp[n_2] = n_2
        else:
            dp[n_2] = ret_value_2
        val += dp[n_2]

    try:
        val += dp[n_3]
    except:
        ret_value_3 = recurse(n_3, dp)
        if ret_value_3 <= n_3:
            dp[n_3] = n_3
        else:
            dp[n_3] = ret_value_3
        val += dp[n_3]

    try:
        val += dp[n_5]
    except:
        ret_value_5 = recurse(n_5, dp)
        if ret_value_5 <= n_5:
            dp[n_5] = n_5
        else:
            dp[n_5] = ret_value_5
        val += dp[n_5]

    if val >= N:
        dp[N] = val
    else:
        dp[N] = N

    return dp[N]

solution()
