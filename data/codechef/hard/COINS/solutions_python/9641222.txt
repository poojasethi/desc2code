
class memoize(dict):
    def __init__(self, func):
        self.func = func

    def __call__(self, *args):
        return self[args]

    def __missing__(self, key):
        result = self[key] = self.func(*key)
        return result

@memoize
def solve(n):
    if n == 0:
        return 0
    new_sum = sum([max(n/4, solve(n/4)),
                   max(n/3, solve(n/3)),
                   max(n/2, solve(n/2))])
    return max(new_sum, n)


if __name__ == '__main__':
    while True:
        try:
            n = input()
            print solve(n)
        except (EOFError):
            break
