# Solution to "Bytelandian Gold Coins" for CodeChef
# by Peter Mattsson (quantum.caffeine@gmail.com)

import sys, heapq

def read(inFile):
    for line in inFile.readlines():
        yield int(line)

def write(outFile, answer):
    outFile.write(str(answer)+'\n')

def solve(n):
    coins = {}
    coins[n] = 1
    coinList = [-n]
    while coinList[0] <= -12:
        coin = -heapq.heappop(coinList)
        numCoins = coins[coin]
        del coins[coin]
        for split in (coin/2, coin/3, coin/4):
            if split in coins:
                coins[split] += numCoins
            else:
                heapq.heappush(coinList, -split)
                coins[split] = numCoins
    return sum(coin*num for coin, num in coins.iteritems())

for case in read(sys.stdin):
    write(sys.stdout, solve(case))
