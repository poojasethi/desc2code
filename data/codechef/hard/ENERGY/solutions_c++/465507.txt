#include <cstdio>
#include <algorithm>
using namespace std;
struct event {
  int t,i;
  bool b,l;
} a[22222];
int t,b,g,l,m,k,i,j,e,it,cur,r[2222],u[2222],v[222][222],bs[2222],gs[2222];
bool B[2222],G[2222],q;
bool cmp(event x, event y) {
  if (x.t!=y.t) return x.t<y.t;
  if (x.b!=y.b) return x.b;
  return x.i<y.i;
}
void dfs(int i) {
  if (i==-1) { q=true; return; }
  if (!B[i]) return;
  int j,p,z;
  u[i]=it;
  for (j=0; j<g; j++) if (v[i][j]==2 && G[j]) {
    p=gs[j]; z=bs[i];
    gs[j]=i; bs[i]=j;
    if (p==-1 || u[p]!=it) dfs(p);
    if (q) break;
    gs[j]=p; bs[i]=z;
  }
}
void odfs(int i) {
  if (i==-1) { q=true; return; }
  if (!G[i]) return;
  int j,p,z;
  u[i]=it;
  for (j=0; j<b; j++) if (v[j][i]==2 && B[j]) {
    p=bs[j]; z=gs[i];
    bs[j]=i; gs[i]=j;
    if (p==-1 || u[p]!=it) odfs(p);
    if (q) break;
    bs[j]=p; gs[i]=z;
  }
}
int main() {
  scanf("%d",&t);
  while (t--) {
    scanf("%d%d%d",&b,&g,&l);
    for (m=i=0; i<=b; i++) r[i]=0;
    for (i=0; i<b; i++) for (j=0; j<g; j++) v[i][j]=0;
    for (i=0; i<b; i++) {
      scanf("%d%d%d",&a[m].t,&a[m+1].t,&k);
      if (a[m].t>=a[m+1].t) for(;;);
      a[m].i=a[m+1].i=i;
      a[m].b=a[m+1].b=a[m+1].l=true;
      a[m].l=false;
      for (j=0; j<k; j++) { scanf("%d",&e); v[i][e]++; }
      bs[i]=-1; B[i]=false; m+=2;
    }
    for (i=0; i<b; i++) for (j=0; j<g; j++) if (v[i][j]>1) for(;;);
    for (i=0; i<g; i++) {
      scanf("%d%d%d",&a[m+1].t,&a[m].t,&k);
      a[m].i=a[m+1].i=i;
      a[m].b=a[m+1].b=a[m+1].l=false;
      a[m].l=true;
      for (j=0; j<k; j++) { scanf("%d",&e); v[e][i]++; }
      gs[i]=-1; G[i]=false; m+=2;
    }
    for (i=0; i<b; i++) for (j=0; j<g; j++) if (v[i][j]>2) for(;;);
    sort(a,a+m,cmp);
    for (i=cur=0; i<m; i++) {
      if (i) r[cur]+=a[i].t-a[i-1].t;
      q=false; ++it;
      if (a[i].b) {
        if (a[i].l) {
          B[a[i].i]=false;
          j=bs[a[i].i];
          if (j!=-1) {
            bs[a[i].i]=-1;
            gs[j]=-1;
            cur--;
            odfs(j);
          }
        } else {
          B[a[i].i]=true;
          dfs(a[i].i);
        }
      } else {
        if (a[i].l) {
          G[a[i].i]=false;
          j=gs[a[i].i];
          if (j!=-1) {
            gs[a[i].i]=-1;
            bs[j]=-1;
            cur--;
            dfs(j);
          }
        } else {
          G[a[i].i]=true;
          odfs(a[i].i);
        }
      }
      if (q) cur++;
    }
    r[0]=l;
    for (i=1; i<=b; i++) r[0]-=r[i];
    if (g<b) b=g;
    for (i=0; i<=b; i++) {
      printf("%d",r[i]);
      if (i==b) putchar('\n'); else putchar(' ');
    }
  }
  return 0;
}
