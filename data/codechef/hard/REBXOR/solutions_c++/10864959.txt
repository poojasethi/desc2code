 
// AUTHOR : Dipjal Chhetri
// Institution : Jaypee Institute of Information Technology
 
 
 
#include <bits/stdc++.h>
using namespace std;
const int SIZE = 4e5+5;
typedef long long int ll;
 
 
 
 
ll scan(){
    ll x=0LL;
    register char c = getchar_unlocked();
    while(c<'0'||c>'9')
        c=getchar_unlocked();
 
    while(c>='0'&&c<='9'){
            x=(x<<1)+(x<<3)+c-'0';
            c=getchar_unlocked();
    }
    return x;
}
 
void Output(ll x){
    char digits[21];
    int varlen=0;
    do{
            digits[varlen++]=x%10+'0';
            x/=10;
    }while(x);
    --varlen;
    while(varlen>=0) putchar_unlocked(digits[varlen--]);
    putchar_unlocked('\n');
}
 
 
 
 
 
 
 
 
 
 
 
 
struct trie
{
    ll val;
    struct trie *left;
    struct trie *right;
};
struct trie *root;
int maxsize = 20;
struct trie *initialise(){
    struct trie *node;
    node = new trie();
    node->val = -1;
    node->left = NULL;
    node->right = NULL;
    return node;
};
void insert(ll n){
    struct trie *node;
    node = root;
    int i;
 
    for(i = maxsize - 1; i >= 0; i--) {
        if(n&(1 << i)) {
            if(node->right == NULL) {
                node->right = initialise();
            }
            node = node->right;
        }
        else {
            if(node->left == NULL) {
                node->left = initialise();
            }
            node = node->left;
        }
    }
    node->val = n;
}
long long int query(long long int n)
{
    int i;
    struct trie *node;
    node = root;
 
    for(i = maxsize - 1; i >= 0; i--) {
        if(n & (1 << i)) {
            if(node->left != NULL) {
                node = node->left;
            }
            else {
                node = node->right;
            }
        }
        else {
            if(node->right != NULL) {
                node = node->right;
            }
            else {
                node = node->left;
            }
        }
    }
 
    return node->val;
}
 
 
ll n,x,ans,arr[SIZE],dp[SIZE],dp2[SIZE];
 
 
void deltree(struct trie *root){
 
    if(root){
            deltree(root->left);
            deltree(root->right);
}
free(root);
}
 
 
 
 
   void solve1(){
 
    int i;
    root = initialise();
 
    n = scan();
    for(i = 0; i < n; i++)
      arr[i] = scan();
 
 
 
 
 
    insert(0);
 
 
    x = 0;
 
    for(i = 0; i < n; i++) {
 
        x=x^arr[i];
        if(i>0)
        dp[i]=max(dp[i-1],x);
        else
            dp[i]=x;
        insert(x);
        dp[i]=max(dp[i-1],max(dp[i],query(x)^x));
 
    }
    deltree(root);
    root = initialise();
    insert(0);
    x=0;
    for(i=n-1;i>=0;i--){
        x=x^arr[i];
        if(i<n-1)
        dp2[i]=max(dp2[i+1],x);
        else
            dp2[i]=x;
        insert(x);
        dp2[i]=max(dp2[i+1],max(dp2[i],query(x)^x));
    }
    ans=0LL;
    for(int i=0;i<n-1;i++)
    {
        ans=max(ans,dp[i]+dp2[i+1]);
    }
 
 
   Output(ans);
 
return ;
 
}
 
 
 
 
int main(){
solve1();
return 0;
}  