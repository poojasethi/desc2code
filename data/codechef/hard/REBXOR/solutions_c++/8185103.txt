#include<stdio.h>
#include<stdlib.h>      //malloc
#include<string.h>      //memset
#include<stdbool.h>
#include<math.h>
#include<iostream>
#include<cstdio>
using namespace std;
#define MOD 1000000007
#define SIZE 400001
#define dump(x) printf(#x" = %d\n",x);
#define INF 200005
typedef long long int ll;
#define max(x,y) ((x) > (y) ? (x) : (y))
#define min(x,y) ((x) < (y) ? (x) : (y))
#define abs(x) ((x) < 0 ? (-(x)) : (x))
#define CONTEST 1
#define EPSILON 10e-3
int scan(void){
    int n = 0;
    char ch = getchar_unlocked();
    while(ch<'0' || ch>'9')
        ch = getchar_unlocked();
    while(ch>='0'&& ch<='9'){
        n = (n<<3)+(n<<1) + ch-'0';
        ch = getchar_unlocked();
    }
    return n;
}
void print(int n){
    int i=0;
    char ch[20];
    do{
        ch[i++] = n%10 + '0';
        n/=10;
    }while(n);
    i--;
    while(i>=0)
        putchar_unlocked(ch[i--]);
    putchar_unlocked('\n');
}
typedef struct trie_node{
    trie_node * children[2];
}trie_node;
class Trie{
    public:
    Trie(int bitwidth):bw(bitwidth){    //initialise the instance variable bw with parameter bitwidth
        root = new trie_node;
        root->children[0] = root->children[1] = (trie_node *)0;
    }
    int insert(int n){
        trie_node *curr = root;
        trie_node *curr_find = root;
        int bit = bw-1;
        int ans = 0;
        int power = 1<<bit;
        for(;bit>=0;bit--){
            int x = (n>>bit)&1;
            if(curr->children[x])
                curr = curr->children[x];
            else{
                trie_node * newnode = new trie_node;
                newnode->children[0] = newnode->children[1] = (trie_node *)0;
                curr->children[x] = newnode;
                curr = newnode;
            }
            if(curr_find->children[x^1]){        //if the bit is 0
                curr_find = curr_find->children[x^1];
                ans += power;
            }else
                curr_find = curr_find->children[x];
            power>>=1;
        }
        return ans;
    }
    int query(int n){
        trie_node *curr = root;
        int bit = bw-1;
        int ans = 0;
        int power = 1<<bit;
        for(;bit>=0;bit--){
            int x = (n>>bit)&1;
            if(curr->children[x^1]){        //if the bit is 0
                curr = curr->children[x^1];
                ans += power;
            }else
                curr = curr->children[x];
            power>>=1;
        }
        //dump(ans);
        return ans;
    }
    private:
        int bw;
        trie_node *root;
};
int main(void){
    
    int n,i;
    n = scan();
    int arr[n];
    Trie suffix_trie(30);
    Trie prefix_trie(30);
    int suffix_max[SIZE];
    int prev=0,ans = 0,suff=0;
    suffix_trie.insert(0);
    for(i=0;i<n;i++)
        arr[i] = scan();
    for(i=n-1;i>=0;i--){
        suff = suff ^arr[i];
        //suffix_trie.insert(suff);
        ans = max(ans, suffix_trie.insert(suff));
        suffix_max[i] = ans;
    }
    prefix_trie.insert(0);
    ans=0;
    int max_left = 0;
    for(i=0;i<n-1;i++){
        prev = prev^arr[i];
        //prefix_trie.insert(prev);
        max_left = max(max_left, prefix_trie.insert(prev));
        ans = max(ans, max_left+suffix_max[i+1]);
    }
    print(ans);
    return 0;
}