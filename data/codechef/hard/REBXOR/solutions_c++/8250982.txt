#include<stdio.h>
#include<iostream>
#include<math.h>
 
using namespace std;
 
#define ll int
 
ll dp1[400007], dp2[400007], max1,queryAns;
struct trie_node
{
	trie_node *left;
	trie_node *right;
};
 
ll max(ll a, ll b)
{
	if(a>b)
		return a;
	else 
		return b;
}
	
ll getBit(ll d, ll N)
{
	ll c = (1 << N);
	if(d&c)
		return 1;
	else
		return 0;
}
 
 
void query(trie_node *root, ll p, ll level)
{
	if(level==-1)
		return;
	ll x = getBit(p,level);
	if(x==1)
	{
		if(root->left==NULL)
			query(root->right,p,level-1);
		else
		{
			queryAns+=pow(2,level);
			query(root->left,p,level-1);
		}
	}
	else
	{
		if(root->right==NULL)
			query(root->left,p,level-1);
		else
		{	
			queryAns+=pow(2,level);
			query(root->right,p,level-1);
		}
	}
}
 
trie_node* create()
{
	trie_node *n = new trie_node();
	n->left=NULL;
	n->right=NULL;
	return n;
}
 
void insert(trie_node *root, ll n, ll level)
{
	if(level==-1)
		return;
	ll x = getBit(n,level);
	if(x==1)
	{
		if(root->right==NULL)
			root->right=create();
		insert(root->right, n, level-1);
	}
	else
	{
		if(root->left == NULL)
			root->left = create();
		insert(root->left,n,level-1);
	}
}
	
ll maxXor(ll a)
{
	ll count=0;
	while(a)
	{
		a/=2;
		count++;
	}
	return (pow(2,count)-1);
}
 
int main()
{
	ll n, ans, p, i, m, M;
	max1=0;
	scanf("%d",&n);
	trie_node *trie = create();
	p=ans=0;
	m=0;
	ll a[n];
	int k=n;
	for(i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
		if(a[i]>max1)
			max1=a[i];
	}
	i=0;
	ll mpXor=maxXor(max1);
	for(i=0;i<n;i++)
	{
		queryAns=0;
		p^=a[i];		
		insert(trie,p,31);
		query(trie,p,31);
		ans=max(ans,queryAns);
		dp1[i]=ans;
		if(ans==mpXor)
		{
			for(i;i<n;i++)
				dp1[i]=mpXor;
			break;
		}
	}
	trie = new trie_node();
	trie->left=NULL;
	trie->right=NULL;
	p=ans=0;
	for(i=n+1;i>0;i--)
	{
		queryAns=0;
		p^=a[i];	
		insert(trie,p,31);
		query(trie,p,31);
		ans=max(ans,queryAns);
		if(ans==mpXor)
		{
			for(i;i>0;i--)
				dp2[i-1]=mpXor;
			break;
		}
		dp2[i-1]=ans;
	}
	ans=0;
	for(i=1;i<n;i++,k--)
	{
	//	cout<<dp1[i]<<" "<<dp2[i]<<endl;
		if((dp1[i]+dp2[i])>ans)
			ans=(dp1[i]+dp2[i]);
	}
	printf("%d\n",ans);
}