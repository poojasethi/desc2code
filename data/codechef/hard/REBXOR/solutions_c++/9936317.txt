#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=int(1e9)+7,maxn=400005;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define forall(itr,x)	for( __typeof((x).begin()) itr=(x).begin(); itr!=(x).end(); itr++)
#define Ss(x) scanf("%s",x)
//#define S(x) scanf("%d",&x)
//#define getcx getchar_unlocked
#define getcx getchar
inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(i,0,n) cout<<i<<". "<<x[i]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(i,0,m) {F(j,0,n) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define pii pair<int,int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
#define nil -1
const int inf= int(1e9),ln=20,shift=30;

int a[maxn];
int fwd[maxn],bkd[maxn],ptr;

struct node
{
    int b[2];
    node() {b[0]=b[1]=nil;}
};

node tree[maxn*30];

void _clear()
{
    F(i,0,maxn*30)
    {
        tree[i].b[0]=tree[i].b[1]=nil;
    }
}

void _debug()
{
    F(i,0,ptr)
    {
        cout<<tree[i].b[0]<<" "<<tree[i].b[1]<<endl;
    }
}


void _insert(int num)
{
    //Debug(num);
    int mask=1<<shift;
    int next=0;
    while(mask)
    {
        int bit=0;
        if(num&mask)
        {
            bit=1;
        }
        //Debug(bit);
        //Debug(next);
        if(tree[next].b[bit]!=nil)
        {
            next=tree[next].b[bit];
        }
        else
        {
            tree[next].b[bit]=ptr;
            next=ptr;
            ptr++;
        }
        mask>>=1;
    }
    //_debug();
}

int _query(int num)
{
    int mask=1<<shift;
    int next=0;
    int ret=0;
    while(mask)
    {
        int bit=0;
        if(num&mask)
        {
            bit=1;
        }
        int target=1-bit;
        if(tree[next].b[target]!=nil)
        {
            ret<<=1;
            ret++;
            next=tree[next].b[target];
        }
        else
        {
            ret<<=1;
            next=tree[next].b[bit];
        }
        mask>>=1;
    }
    return ret;
}


int main()
{
    int n,num,ans;
    S(n);

    F(i,1,n+1)
    {
        S(a[i]);
    }
    ptr=1;
    num=0;
    _insert(num);
    F(i,1,n+1)
    {
        num^=a[i];
        ans=_query(num);
        fwd[i]=max(fwd[i-1],ans);
        _insert(num);
    }
    //_debug();
    _clear();
    ptr=1;
    num=0;
    _insert(num);
    I(i,n,1)
    {
        num^=a[i];
        ans=_query(num);
        bkd[i]=max(bkd[i+1],ans);
        _insert(num);
    }
    int mx=0;
    F(i,1,n)
    {
        mx=max(mx,fwd[i]+bkd[i+1]);
    }
    //Debugarr(fwd,n+1);
    //Debugarr(bkd,n+1);
    cout<<mx<<endl;
    return 0;
}
