#include <bits/stdc++.h>
#define maxn 400003
typedef long long ll;
using namespace std;

struct node {
    int left, right;
};
int n;
int A[maxn];
int ans1[maxn], ans2[maxn];
node trie1[30 * maxn], trie2[30 * maxn];

int cur_pos1 = 1, cur_pos2 = 1;

void insert1(node s[], int val, int idx, int pos) {
    if(pos == -1) {
        return;
    }

    if((1<<pos) & val ) {
        if(s[idx].right == 0) {
            s[idx].right = (++cur_pos1);
        }

        idx = s[idx].right;
        insert1(s, val,idx, pos-1);

    } else {
        if(s[idx].left == 0 ) {
            s[idx].left = (++cur_pos1);
        }

        idx = s[idx].left;
        insert1(s, val, idx, pos-1);
    }
}

void insert2(node s[], int val, int idx, int pos) {
    if(pos == -1) {
        return;
    }

    if((1<<pos) & val ) {
        if(s[idx].right == 0) {
            s[idx].right = (++cur_pos2);
        }

        idx = s[idx].right;
        insert2(s, val,idx, pos-1);

    } else {
        if(s[idx].left == 0 ) {
            s[idx].left = (++cur_pos2);
        }

        idx = s[idx].left;
        insert2(s, val, idx, pos-1);
    }
}

void query(node s[], int idx, int val, int pos, int &an) {
    if(pos == -1) {
        return;
    }


    if((1<<pos) & val) {
        if(s[idx].left == 0 ) {
            idx = s[idx].right;
            query(s, idx, val, pos-1, an);
        } else {
            an += (1<<pos);

            idx = s[idx].left;
            query(s, idx, val, pos-1, an);
        }
    } else {
        if(s[idx].right == 0) {
            idx = s[idx].left;
            query(s, idx, val, pos-1, an);
        } else {
            an +=(1<<pos);

            idx = s[idx].right;
            query(s, idx, val, pos-1, an);
        }
    }
}
int main() {
    scanf("%d",&n);
    for(int i = 1; i <= n; i++) {
        scanf("%d",&A[i]);
    }

    insert1(trie1, 0, 1, 30);
    int xr1 = 0;

    int an1 = 0;



    int xr2 = 0;
    int an2 = 0;

    for(int i = 1; i<= n; i++) {
        xr1 ^= A[i];
        insert1(trie1, xr1, 1, 30);
        an1 = 0;
        query(trie1, 1, xr1, 30, an1);

        ans1[i] = max(ans1[i-1], an1);
    }

    insert2(trie2, 0, 1, 30);

    for(int i = n;i >= 1; i--) {
        xr2 ^= A[i];
        insert2(trie2, xr2, 1, 30);
        an2 = 0;
        query(trie2, 1, xr2, 30, an2);

        ans2[i] = max(ans2[i+1], an2);
    }

    int answer = 0;
    for(int i = 1; i< n; i++) {
        if(answer < (ans1[i] + ans2[i+1])) {
            answer = (ans1[i] + ans2[i+1]);
        }
    }

    printf("%d\n", answer);

}
