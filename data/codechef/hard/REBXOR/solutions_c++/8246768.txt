#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define pb push_back
#define ft first
#define se second
#define mp make_pair

const int maxn=400000;
int node_counter;
int next[30*maxn][2];

void init(){
  next[0][0]=-1;
  next[0][1]=-1;
	node_counter=0;
}

void insTrie(int node, int d, int v){
  if(d==30) return;
  int p=29-d;
  int c = (v&(1<<p)) ? 1 : 0;
  if(next[node][c] == -1){
    next[node][c] = ++node_counter;
    next[node_counter][0]=-1;
    next[node_counter][1]=-1;
  }
  insTrie(next[node][c], d+1, v);
}

int searchTrie(int node, int d, int v){
   if(d==30) return 0;
   int p=29-d;
   int c = (v&(1<<p)) ? 0 : 1;
   if(next[node][c] != -1) return (1<<p)+searchTrie(next[node][c], d+1, v);
   return searchTrie(next[node][!c], d+1, v);
}

// int node_counter;
// vector<int *> next;
// void init(){
// 	next.clear();
// 	int *tmp;
// 	tmp=new int[2];
// 	tmp[0]=-1;
// 	tmp[1]=-1;
// 	next.pb(tmp);
// 	node_counter=0;
// }

// void insTrie(int node, int d, int v){
// 	if(d==30) return;
// 	int p=29-d;
// 	int c = (v&(1<<p)) ? 1 : 0;
// 	if(next[node][c] == -1){
// 		int *tmp;
// 		tmp=new int[2];
// 		tmp[0]=-1;
// 		tmp[1]=-1;
// 		next.pb(tmp);
// 		next[node][c] = ++node_counter;
// 	}
// 	insTrie(next[node][c], d+1, v);
// }

// int searchTrie(int node, int d, int v){
//    if(d==30) return 0;
//    int p=29-d;
//    int c = (v&(1<<p)) ? 0 : 1;
//    if(next[node][c] != -1) return (1<<p)+searchTrie(next[node][c], d+1, v);
//    return searchTrie(next[node][!c], d+1, v);
// }

int main(int argc, char const *argv[]){
    int n;
    scanf("%d", &n);
    int a[n];
    for(int j = 0; j < n; ++j){     
        scanf("%d", &a[j]);
    }//for j
    int f[n], b[n], curr;
    init();
    insTrie(0, 0, 0);
    insTrie(0, 0, a[0]);
    f[0]=a[0];
    curr=a[0];
    for(int i = 1; i <n; ++i){
        curr=(curr^a[i]);
        f[i]=searchTrie(0, 0, curr);
        insTrie(0, 0, curr);
    }//for i
    
    init();
    insTrie(0, 0, 0);
    insTrie(0, 0, a[n-1]);
    b[n-1]=a[n-1];
    curr=a[n-1];
    for(int k = n-2; k >= 0; --k){
        curr=(curr^a[k]);
        b[k]=searchTrie(0, 0, curr);
        insTrie(0, 0, curr);
    }//for k --
    
    // DP from here
    int maf[n], mab[n];
    maf[0]=f[0];
    mab[n-1]=b[n-1];
    for(int i = 1; i < n; ++i){
        maf[i]=max(maf[i-1], f[i]);
    }//for i
    for(int k = n-2; k>= 0; --k){
        mab[k]=max(mab[k+1], b[k]);
    }//for k --
    int ans=0;
    for(int i = 1; i < n; ++i){
        ans=max(ans, maf[i-1]+mab[i]);
    }//for i
    printf("%d\n", ans);
    return 0;
}