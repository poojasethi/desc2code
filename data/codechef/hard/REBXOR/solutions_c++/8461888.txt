#include <bits/stdc++.h>
#define NMAX  500005
#define LN    31
using namespace std;

int res = 0 , ans = 0 , pre , suf;
int N , A[NMAX] , P[NMAX];

struct trie
{

    int left [NMAX * LN];
    int right[NMAX * LN];
    int cur;

    void clear()
    {
        cur = 1;
        for(int i = 0 ; i < NMAX * LN ; i++) left[i] = right[i] = -1;
    }

    void insert(int val , int node , int i)
    {
        if(i==-1)return;
        if(val & (1 << i))
        {
            if (right[node] == -1) right[node] = cur++;
            insert(val,right[node],i-1);
        }
        else
        {
            if(left[node] == -1)  left[node] = cur++;
            insert(val,left[node],i-1);
        }
    }

    void query(int val , int node , int i)
    {
        if(i==-1)return;
        if(val & (1 << i))
        {
            if(left[node] == -1) node = right[node];
            else node = left[node] , res |= 1 << i;
            query(val,node,i-1);
        }
        else
        {
            if(right[node] == -1) node = left[node];
            else node = right[node] , res |= 1 << i;
            query(val,node,i-1);
        }
    }
} T[2];


int main()
{

    scanf("%d",&N);

    for(int i = 1 ; i <= N ; ++i) scanf("%d",&A[i]);

    ans = pre = suf = P[0] = 0 ;
    T[0].clear() , T[1].clear() ;

    T[0].insert(0,0,LN);

    for(int i = 1; i <= N ; i++)
    {
        pre = pre ^ A[i];
        T[0].insert(pre,0,LN);
        res = 0 ;
        T[0].query(pre,0,LN);
        P[i] = max(P[i-1] , res);
    }

    T[1].insert(0,0,LN);

    for(int i = N ; i >= 1 ; i--)
    {
        suf = suf ^ A[i];
        T[1].insert(suf,0,LN);
        res = 0;
        T[1].query(suf,0,LN);
        ans = max(ans , P[i-1] + res);
    }

    printf("%d\n",ans);
    return 0;
}
