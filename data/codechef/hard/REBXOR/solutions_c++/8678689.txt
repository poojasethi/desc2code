#include<cstdio>
#include<cstdlib>
#include<cstring>
using namespace std;
int f1[400010],f2[400010],a[400010];
struct node
{
	int son[2],k;
}tr[14000010];
int p[40],len;
int _Max(int x,int y){return x>y?x:y;}
void add(int x,int y)
{
	tr[++len].k=y;
	tr[len].son[0]=tr[len].son[1]=0;
}
void build(int x,int y)
{
    if(tr[x].k==-1)return;
    int o=(p[tr[x].k]&y)?1:0;
	if(!tr[x].son[o]){add(1,tr[x].k-1);tr[x].son[o]=len;}
	build(tr[x].son[o],y);
}
int query(int x,int y)
{
	if(tr[x].k==-1)return 0;
	int o=(p[tr[x].k]&y)?0:1;
	if(tr[x].son[o])return query(tr[x].son[o],y)+p[tr[x].k];
	return query(tr[x].son[o^1],y);
}
int main()
{
	int n,i,y,ans,x;
	scanf("%d",&n);
	p[0]=1;
	for(i=1;i<=32;i++)p[i]=p[i-1]<<1;
	for(i=1;i<=n;i++)
	  scanf("%d",&a[i]);
    //memset(tr,0,sizeof(tr));
	len=0;
	add(1,32);
    build(1,0);
	x=0;
    for(i=1;i<=n;i++)
	{
	  x^=a[i];
	  f1[i]=query(1,x);
	  build(1,x);
	}
    //memset(tr,0,sizeof(tr));
    len=0;
	add(1,32);
    build(1,0);
	x=0;
    for(i=n;i>=1;i--)
	{
	  x^=a[i];
	  f2[i]=query(1,x);
	  build(1,x);
	}
	for(i=2;i<=n;i++)
	  f1[i]=_Max(f1[i-1],f1[i]);
    for(i=n-1;i>=1;i--)
	  f2[i]=_Max(f2[i+1],f2[i]);
    ans=0;
    for(i=1;i<n;i++)
	  ans=_Max(ans,f1[i]+f2[i+1]);
    printf("%d\n",ans);
	return 0;
}