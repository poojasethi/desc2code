#include<stdio.h>
#include<stdlib.h>
#include<bits/stdc++.h>
#define M 29
#define inf (int)1e9
#define Max 400000+5
using namespace std;
int a[Max];
int L[Max];
int R[Max];
int n;
int id=0;

struct node{
int link[2];
node()
{
    link[0]=link[1]=-1;
}
};
node trie[30*Max];

void insert(int root,int cul)
{int mask=(1<<M),i=0;
for(i=0;i<=M;i++)//??
{
    int next=(cul&mask)!=0;
    if(trie[root].link[next]==-1) trie[root].link[next]=id++;//root
    root=trie[root].link[next];
    mask >>=1;
}
}

int query(int root,int cul)
{
    int culj=0,i=0;
    int mask=(1<<M);
    for(i=0;i<=M;i++)
    {
        int next=(cul&mask)!=0;
        if(trie[root].link[1-next]!=-1)
        {
            culj^=mask;
            root=trie[root].link[1-next];
        }
        else
            root=trie[root].link[next];
    mask >>=1;
    }
    return culj;
}


void clear_trie() {
	int i=0;
	for (i = 0; i <= id; i++) {
		trie[i].link[0] = -1;
		trie[i].link[1] = -1;
	}
	id = 0;
}

int main()
{
    int i,sum=0;
    scanf("%d",&n);
    int cul=0,rootL=id++;
    insert(rootL,0);
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
        cul^=a[i];
        L[i]=max((i==0)?0:L[i-1],query(rootL,cul));
        insert(rootL,cul);
    }

    clear_trie();
    int rootR=id++;cul=0;
    insert(rootR,0);
    for(i=n-1;i>0;i--)
    {
        cul^=a[i];
        R[i]=max((i==n-1)?0:R[i+1],query(rootR,cul));//printf("%d ",R[i]);
        insert(rootR,cul);
        int cad=(i==0 ? -inf:L[i-1])+R[i];
        if(cad>sum) sum=cad;
    }
    printf("%d\n",sum);

    return 0;
}
