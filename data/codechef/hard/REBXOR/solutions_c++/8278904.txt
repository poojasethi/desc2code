#include<stdio.h>
#include<algorithm>
#define N NULL
using namespace std;
int a[400005],fa[400005],power[32];
typedef struct trie
{
    struct trie *l,*r;
}tr;
tr* cn()
{
    tr *t;
    t=(tr*)malloc(sizeof(tr));
    t->l=t->r=N;
    return t;
}
void insrt(tr* root,int val)
{
    for(int i=30;i>=0;i--)
    {
        if(val&power[i])
        {
            if(root->r==N)
                root->r=cn();
            root=root->r;
        }
        else
        {
            if(root->l==N)
                root->l=cn();
            root=root->l;
        }
    }
}
int query(tr *root,int val)
{
    tr *temp=root;
    int ans=0;
    for(int i=30;i>=0;i--)
    {
        if(val&power[i])
        {
            if(root->r==N)
                root->r=cn();
            root=root->r;
            if(temp->l!=N)
            {
                temp=temp->l;
                ans+=power[i];
            }
            else
                temp=temp->r;
        }
        else
        {
            //printf("%d ",val);
            if(root->l==N)
                root->l=cn();
            root=root->l;
            if(temp->r!=N)
            {
                temp=temp->r;
                ans+=power[i];
            }
            else
                temp=temp->l;
        }
    }
    return ans;
}
int main()
{
    int n,i,pre,temp,maxt,maxf;
    scanf("%d",&n);
    tr *r1=cn(),*r2=cn();
    power[0]=1;
    for(i=1;i<=30;i++)
        power[i]=2*power[i-1];
    insrt(r1,0);
    pre=maxt=0;
    for(i=0;i<n-1;i++)
    {
        scanf("%d",&a[i]);
        pre^=a[i];
        temp=query(r1,pre);
        if(maxt<temp)
            maxt=temp;
        fa[i]=maxt;
    }
    scanf("%d",&a[n-1]);
    pre=maxt=maxf=0;
    insrt(r2,0);
    for(i=n-1;i>0;i--)
    {
        pre^=a[i];
        temp=query(r2,pre);
        maxt=max(maxt,temp);
        if(i>0)
            maxf=max(maxf,maxt+fa[i-1]);
    }
    printf("%d",maxf);
    return 0;
}
//Sourabh Sarkar
