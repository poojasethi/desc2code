//      go_on
#include <bits/stdc++.h>
using namespace std;


//      LOOPS AND MEM
#define mz(a) memset(a,0,sizeof(a))
#define md(a,m,n) memset(a,0,sizeof(a[0][0])*m*n);
#define mmin1(a) memset(a,-1,sizeof(a))
#define minf(a) memset(a,MEMSET_INF,sizeof(a));
#define f(i,a,n) for(int i=a;i<=n;++i)
#define fs(i,a,n) for(int i=a;i<n;++i)
#define fl(i,n,a) for(int i=n;i>=a;--i)


//       I/O
#define i(n) cin>>n
#define is(n) scanf("%s",n)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define o(n) cout<<n
#define p(n) printf("%d",n)
#define pl(n) printf("%lld",n)
#define os cout<<" "
#define on cout<<"\n"


//       CONTAINERS
typedef vector <int> vi;
typedef pair<int, int> pii;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(a)  a.begin(),a.end()
//#define fv(i,v) for(auto i = v.begin();i !=v.end(); ++i)


//        DEF AND INIT
#define ll long long int
#define M 1000000007
#define eps 1e-15
#define N 400002
#define M 20000000
//vector<pair<int, pii> >v;
//map<string,int> MP;
//map<string,int>::iterator it;
int trie[M][2];
int num;

void init_trie()
{
    num=1;
    trie[1][0]=trie[1][1]=0;
}

void insert_trie(int x)
{
    for(int bit=30,ind=1;bit>=0;--bit)
    {
        int dir=0;
        if((x&(1<<bit)))   dir=1;
        if(!trie[ind][dir])
        {
            ++num;
            trie[ind][dir]=num;
            trie[num][0]=trie[num][1]=0;
        }
        ind=trie[ind][dir];
    }
}

int get_max(int x)
{
    int ans=0;
    for(int bit=30,ind=1;bit>=0;--bit)
    {
        int dir=0;
        if((x&(1<<bit)))   dir=1;
        if(trie[ind][1-dir])
        {
            ans|=(1<<bit);
            dir=1-dir;
        }
        ind=trie[ind][dir];
    }
    return ans;
}

int frnt[N],end[N];
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    int a,t,n,ans,i,b,maxi;
    cin>>n;
    init_trie();
    maxi=a=0;
    insert_trie(0);
    for(i=0;i<n;++i)
    {
        cin>>frnt[i];
        a^=frnt[i];
        insert_trie(a);
        b=get_max(a);
   //     b^=a;
        maxi=max(b,maxi);
        end[i]=maxi;
    }/*
    for(i=0;i<n;++i)
    {
        o(end[i]);os;
    }on;*/
    a=ans=maxi=0;
   // md(trie,20000000,2);
    init_trie();
    insert_trie(0);
    for(i=0;i<n-1;++i)
    {
        a^=frnt[n-i-1];
        insert_trie(a);
        b=get_max(a);
   //     b^=a;
        maxi=max(maxi,b);
        ans=max(ans,maxi+end[n-i-2]);
        if(end[n-1]==maxi)	 break;
    }
    cout<<ans<<"\n";
}
