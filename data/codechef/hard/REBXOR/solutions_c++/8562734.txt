#include <iostream>
#include <stdio.h>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define ull unsigned long long
 
inline unsigned long long uscan()
{
    unsigned long long n=0,c=gc();
while(c<'0'||c>'9')
c=gc();
while(c<='9'&&c>='0'){
n=n*10+c-'0';
c=gc();}
return n;
}
 
ull xormax(ull *p)
{
    int i=32;
    ull ans=0;
    while(i--)
    {
        if((ans^p[i])>=ans)
            ans=ans^p[i];
    }
    return ans;
}
using namespace std;
ull a=1073741824/2;
ull llist[33]={0};
ull rlist[33]={0};
ull x[400000];
ull lans[400000];
ull rans[400000];
 
inline ull mx(ull a,ull b)
{
    if (a>b)
        return a;
    return b;
}
 
class trie;
class node{
public:
    node *l,*r;
    friend class trie;
    node(void)
    {
        l=r=0;
    }
};
 
class trie{
public:
    node *root;
    trie(void)
    {
        root=new node;
    }
    void insert(ull x)
    {
        ull i=a;
        node *p=root;
        while(i)
        {
            if(x&i)
            {
                if(p->r)
                    p=p->r;
                else
                    p=p->r=new node;
            }
            else
            {
                if(p->l)
                    p=p->l;
                else
                    p=p->l=new node;
            }
            i>>=1;
        }
    }
    ull query(ull x)
    {
        ull i=a,res=0;
        node *p=root;
        while(i)
        {
            if(x&i)
            {
                if(p->l)
                {
                    p=p->l;
                    res=res^i;
                }
                else
                    p=p->r;
            }
            else
            {
                if(p->r)
                {
                    p=p->r;
                    res=res^i;
                }
                else
                    p=p->l;
            }
            i>>=1;
        }
        return res;
    }
};
 
int main()
{
    int n,i,cnt;
    ull max=0,y=0,lm=0,rm=0,t,s,m=0;
    scanf("%d",&n);
    for(i=0;i<n;i++)
        x[i]=uscan();
    if(n<100000)
    {trie t1;
    t1.insert((unsigned)0);
    for(i=0;i<n-1;i++)
    {
        y=y^x[i];
        lm=mx(lm,t1.query(y));
        lans[i]=lm;
        t1.insert(y);
    }
    trie t2;
    t2.insert((unsigned)0);
    y=0;
    for(i=n-1;i>0;i--)
    {
        y=y^x[i];
        rm=mx(rm,t2.query(y));
        rans[i-1]=rm;
        t2.insert(y);
    }
    for(i=0;i<n-1;i++)
    {
        if(rans[i]+lans[i]>max)
            max=rans[i]+lans[i];
    }
        cout << max << endl;
    }
    else
    {
         for(i=0;i<n;i++)
    {
        s=1,cnt=0,t=x[i];
        while(s<=x[i])
        {
            s*=2;
            cnt++;
        }
        s/=2;
        while(t)
        {
            while(s>t)
            {
                s/=2;
                cnt--;
            }
            if(llist[cnt])
                t^=llist[cnt];
            else
            {
                llist[cnt]=t;
                t=0;
            }
        }
        lm=mx(lm,xormax(llist));
        lans[i]=lm;
    }
    for(i=n-1;i>0;i--)
    {
        s=1,cnt=0,t=x[i];
        while(s<=x[i])
        {
            s*=2;
            cnt++;
        }
        s/=2;
        while(t)
        {
            while(s>t)
            {
                s/=2;
                cnt--;
            }
            if(rlist[cnt])
                t^=rlist[cnt];
            else
            {
                rlist[cnt]=t;
                t=0;
            }
        }
        rm=mx(rm,xormax(rlist));
        rans[i]=rm;
    }
    for(i=0;i<n-1;i++)
    {
        int t=lans[i]+rans[i+1];
        if(m<t)
            m=t;
    }
    printf("%llu\n",m);
    }
 
    return 0;
} 