#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#define maxn 200050
#define gc getchar_unlocked

typedef long long ll;
using namespace std;

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}
void scanint(ll &x)
{
    register ll c = gc();
    x = 0;
    ll neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

ll ans[maxn];

int main(){
	ll n,max_weight = 0;
	vector<ll> one,two;
	int weight;
	ll cost,i;
	
	scanint(n);
	for(i = 0;i<n;++i){
		scanint(weight);
		scanint(cost);
		
		if(weight==1) one.push_back(cost);
		else two.push_back(cost);
		
		max_weight+=weight;
	}
	sort(one.begin(),one.end());
	sort(two.begin(),two.end());
	vector<ll> one_cpy = one,two_cpy = two;
	
	ll cur = 0,cost1 = 0,cost2 = 0;
	int flag = 0;
	for(i = 2;i<=max_weight;i+=2){
		cost1 = 0; cost2 = 0; flag = 0;
		
		if(two.size()>=1) cost1 = two.back();
		if(one.size()>=2){
			flag = 1;
			cost2 = one.back();
			cost2+= one[one.size()-2];
		}else if(one.size()>=1){
			cost2 = one.back();
		}
		
		if(cost1>cost2){
			cur+= cost1;
			two.pop_back();
		}else{
			cur+= cost2;
			if(flag==1){one.pop_back(); one.pop_back();}
			else one.pop_back();
		}
	ans[i] = cur;
	}
	
	one = one_cpy; two = two_cpy;
	cur = 0;
	if(one.size()>=1){cur = one.back();one.pop_back();}
	ans[1] = cur;
	
	for(i = 3;i<=max_weight;i+=2){
		flag = 0, cost1 = 0, cost2 = 0;
	
		if(two.size()>=1) cost1 = two.back();
		if(one.size()>=2){
			flag = 1;
			cost2 = one.back();
			cost2+= one[one.size()-2];
		}else if(one.size()>=1){
			cost2 = one.back();
		}
		
		if(cost1>cost2){
			cur+= cost1;
			two.pop_back();
		}else{
			cur+= cost2;
			if(flag==1){one.pop_back(); one.pop_back();}
			else one.pop_back();
		}
	ans[i] = cur;
	}
	
	for(i = 1;i<=max_weight;++i) printf("%lld ",ans[i]);
return 0;
}