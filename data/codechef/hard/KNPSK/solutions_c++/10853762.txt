#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <vector>
using namespace std;
const int N = 200050;
long long ans[N];
#define getcx getchar_unlocked
inline int fi ( ){//fast input function
    int n=0;
    int ch=getcx();
    while( ch < '0' || ch > '9' ){
    	ch=getcx();
    }
    while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    return n;
}
inline void fo(int a) {
	char snum[20];
	int i=0;
	do{
		snum[i++]=a%10+48;
		a=a/10;
	}
	while(a!=0);
	i=i-1;
	while(i>=0)
	putchar_unlocked(snum[i--]);
	putchar_unlocked('\n');
} 
int main(){
	int n, W,i, flag, temp, cost, cost1, cost2;
	W=0;
	n = fi();
	vector<int> one, two ;
	for(i=0; i<n;i++){
		temp = fi();
		cost = fi();
		if( temp == 1)
			one.push_back(cost);
		else
			two.push_back(cost);
		W+=temp;
	}
	long long int current =0;
	sort(one.begin(), one.end());
	sort(two.begin(), two.end());
	vector <int> o = one, t = two;
	for(i=2;i<=W;i+=2){
		cost1 =0 ;cost2 =0;
		if(t.size()>=1)
			cost1 = t.back();
		if(o.size()>=2){
			cost2 = o.back();
			flag =1;
			cost2 += o[o.size()-2];
		} else if(o.size() >=1){
			cost2 = o.back();
			flag=2;
		}
		if(cost1>cost2){
			current+=cost1;
			t.pop_back();
		} else{
			current+=cost2;
			o.pop_back();
			if(flag == 1)
				o.pop_back();
		}
		ans[i] = current;
 
	}
	current = 0;
	if (one.size() >= 1) {
		current = one.back();
		one.pop_back();
	}
	ans[1] = current;
	for(i=3;i<=W;i+=2){
			cost1 =0 ;cost2 =0;
			if(two.size()>=1)
				cost1 = two.back();
			if(one.size()>=2){
				cost2 = one.back();
				cost2 += one[one.size()-2];
				flag = 1;
			} else if(one.size() >= 1){
				cost2 = one.back();
				flag = 2;
			}
			if(cost1>cost2){
				current+=cost1;
				two.pop_back();
			} else{
				current+=cost2;
				one.pop_back();
				if( flag == 1)
					one.pop_back();
			}
			ans[i] = current;
	}
	printf("%lld", ans[1]);
	for(i = 2; i<=W;i++)
		printf(" %lld", ans[i]);
	printf("\n");
}