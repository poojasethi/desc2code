#include <iostream>
#include <queue>
#define DEBUG 0

int main() {
    int N, W;
    int C = 0l;
    std::cin >> N;
    std::priority_queue<long long> ones, twos, duplicate_ones, duplicate_twos;

    // Get all inputs and arrange according to cost.
    for (int i = 0; i < N; ++i){
        int w;
        long long c;
        std::cin >> w >> c;

        if( w == 1 ) {
            ones.push(c);
            duplicate_ones.push(c);
        }
        else if ( w == 2 ) {
            twos.push(c);
            duplicate_twos.push(c);
        }
        C += w;
    }

    if (DEBUG == 1)
        std::cout << "C = " << C << std::endl;

    long long * costArray = new long long[C];

    // If capacity is even, choose either one 2 weight, or two 1 weight; whichever is better
    long long cumulatedCost = 0l;
    for(int i = 2; i <= C; i += 2) {
        long long cost1 = 0l, cost2 = 0l;

        if (twos.size() >= 1) {
            cost2 = twos.top();
        }
        if (ones.size() >= 1) {
            long long temp = cost1 = ones.top();
            ones.pop();
            if (ones.size() >= 1)
                cost1 += ones.top();
            ones.push(temp);
        }

        if (cost2 >= cost1) {
            costArray[i-1] = cumulatedCost + cost2;
            twos.pop();
        }
        else {
            costArray[i-1] = cumulatedCost + cost1;
            ones.pop();
            if (ones.size() >= 1)
                ones.pop();
        }
        cumulatedCost = costArray[i-1];
        if (DEBUG == 1)
            std::cout << "Cost for capacity " << i << " = " << cumulatedCost << std::endl;
    }

    cumulatedCost = 0l;
    if (duplicate_ones.size() >= 1) {
        costArray[0] = duplicate_ones.top();
        duplicate_ones.pop();
        cumulatedCost = costArray[0];
    }

    for(int i = 3; i<= C; i += 2) {
        long long cost1 = 0l, cost2 = 0l;

        if (duplicate_twos.size() >= 1) {
            cost2 = duplicate_twos.top();
        }
        if (duplicate_ones.size() >= 1) {
            long long temp = cost1 = duplicate_ones.top();
            duplicate_ones.pop();
            if (duplicate_ones.size() >= 1)
                cost1 += duplicate_ones.top();
            duplicate_ones.push(temp);
        }

        if (cost2 >= cost1) {
            costArray[i-1] = cumulatedCost + cost2;
            duplicate_twos.pop();
        }
        else {
            costArray[i-1] = cumulatedCost + cost1;
            duplicate_ones.pop();
            if (duplicate_ones.size() >= 1)
                duplicate_ones.pop();
        }
        cumulatedCost = costArray[i-1];
        if (DEBUG == 1)
            std::cout << "Cost for capacity " << i << " = " << cumulatedCost << std::endl;

    }

    for(int i = 0; i < C; ++i) {
        std::cout << costArray[i] << " ";
    }
    std::cout << std::endl;

    delete[] costArray;

    return 0;
}

