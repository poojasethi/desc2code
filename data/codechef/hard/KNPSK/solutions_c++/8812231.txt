#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <functional>
using namespace std;
const int len=100005;
typedef long long ll;

ll dp[2*len];
int indx[2*len][2];
int M,N;
vector<int> weight[2];

int main() {
	scanf("%d",&N); M=0;
	for (int i=0; i<N; ++i) {
		int a,b;
		scanf("%d%d",&a,&b);
		weight[a-1].push_back(b);
		M+=a;
	}
	sort(weight[0].begin(),weight[0].end(),greater<int>());
	sort(weight[1].begin(),weight[1].end(),greater<int>());
	memset(indx,0,sizeof(indx));
	dp[1]=0,dp[2]=0;
	if (weight[0].size()) {
		dp[1]=weight[0][0]; indx[1][0]=1;
	}
	if (weight[1].size()) {
		dp[2]=weight[1][0]; indx[2][1]=1;
	}
	if (weight[0].size()>1&&dp[2]<weight[0][1]+dp[1]) {
		dp[2]=weight[0][1]+dp[1]; indx[2][1]=0; indx[2][0]=2;
	}
	for (int i=3; i<=M; ++i) {
		ll l=dp[i-1],r=dp[i-2]; indx[i][0]=indx[i-1][0]; indx[i][1]=indx[i-2][1];
		if (weight[0].size()>indx[i-1][0]) l+=weight[0][indx[i-1][0]];
		if (weight[1].size()>indx[i-2][1]) r+=weight[1][indx[i-2][1]];
		dp[i]=max(l,r);
		if (dp[i]==l) {
			++indx[i][0]; indx[i][1]=indx[i-1][1];
		}
		else {
			++indx[i][1]; indx[i][0]=indx[i-2][0];
		}
	}
	printf("%lld",dp[1]);
	for (int i=2; i<=M; ++i) printf(" %lld",dp[i]);
	return 0;
}















