#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <math.h>

using namespace std;

struct data_t
{
    long long cost;
    int p1,p2;

    void set(long long cost, int p1, int p2)
    {
        this->cost = cost;
        this->p1 = p1;
        this->p2 = p2;
    }
};

void knapsack_problem()
{
    int n,k,w,i,j,s(0);
    long long c;
    vector<long long> items_1,items_2;
    vector<data_t> D;

    cin >> n;
    for(k = 0; k < n; ++k) 
    {
        scanf("%d %lld", &w, &c);
        if(w == 1)
            items_1.push_back(c);
        else
            items_2.push_back(c);
        s += w;
    }
    D.resize(s+1);
    sort(items_1.begin(), items_1.end(), greater<long long>());
    sort(items_2.begin(), items_2.end(), greater<long long>());
    D[0].set(0, 0, 0);
    for(k = 1; k <= s; ++k)
    {
        if((i = D[k-1].p1) < (int)items_1.size())
            D[k].set(D[k-1].cost + items_1[i], i+1, D[k-1].p2);
        if(k >= 2)
        {
            if((j = D[k-2].p2) < (int)items_2.size())
            {
                c = D[k-2].cost + items_2[j];
                if(c > D[k].cost)
                    D[k].set(c, D[k-2].p1, j+1);
            }
        }
    }
    c = D[1].cost;
    printf("%lld", c);
    for(k = 2; k <= s; ++k)
    {
        c = max(c, D[k].cost);
        printf(" %lld", c);
    }
    printf("\n");
}

int main()
{
    knapsack_problem();
    return 0;
} 
