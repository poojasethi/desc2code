#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
#include<fstream>
#include<iomanip>
#include<bitset>
#include<deque>
#include<string>
#include<map>
#include<cstring>
#include<sstream>
#include<cmath>
using namespace std;

vector<int> poss;

int count(int n)
{
	int ans = 1;
	for (int i = 2; i*i <= n; i++)
	{
		if (n%i == 0)
		{
			ans *= 2;
			while (n%i == 0)
				n /= i;
		}
	}
	if (n > 1)
		ans *= 2;
	return ans;
}

void findPoss(int g, int a, int b, int c)
{
	if (g > b)
	{
		int num = a/g+c;
		int den = g-b;
		if (num%den == 0)
			poss.push_back(num/den);
	}
}

int main()
{
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		poss.clear();
		int a, b, c;
		scanf("%d %d %d", &a, &b, &c);
		if (a == 0 && b == 0 && c == 0)
			printf("0\n");
		else if (a == 0 && c == 0)
			printf("-1\n");
		else
		{ 
			if (a > 0)
			{	
				int sq = (int)sqrt(a);
				for (int g = 1; g < sq; g++)
				{
					if (a%g == 0)
					{
						findPoss(g, a, b, c);
						findPoss(a/g, a, b, c);
					}
				}
				if (sq*sq == a)
					findPoss(sq, a, b, c);
				else if (a%sq == 0)
				{
					findPoss(sq, a, b, c);
					findPoss(a/sq, a, b, c);
				}
			}
			else
			{
				int sq = (int)sqrt(c);
				for (int i = 1; i < sq; i++)
				{
					if (c%i == 0)
					{
						poss.push_back(i);
						poss.push_back(c/i);
					}			
				}
				if (sq*sq == c)
					poss.push_back(sq);
				else if (c%sq == 0)
				{
					poss.push_back(sq);
					poss.push_back(c/sq);
				}
			}
			int ans = 0;
			for (int i = 0; i < poss.size(); i++)
				ans += count(poss[i]);
			printf("%d\n", ans);
		}
	}
	return 0;
}
