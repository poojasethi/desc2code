#include <algorithm>
#include <bitset>
#include <cctype>
#include <cfloat>
#include <climits>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;
typedef long long ll;

#define gc getchar
int getint() { unsigned int c; int x = 0; while (((c = gc()) - '0') >= 10) { if (c == '-') return -getint(); if (!~c) exit(0); } do { x = (x << 3) + (x << 1) + (c - '0'); } while (((c = gc()) - '0') < 10); return x; }

template<class T> T get_divisor(T n, T ds[]) {
    T i, k, p = 0;
    for (i = 1; i * i <= n; i++) if (n % i == 0) {
        ds[p++] = i, k = n / i;
        if (i != k) ds[p++] = k;
    }
    return p;
}

template<class T> int get_prime_factor(T n, T ps[], T pc[]) {
    T i, pn = 0;
    for (i = 2; i * i <= n; i++) if (n % i == 0) {
        for (ps[pn] = i, pc[pn] = 0; !(n % i); n /= i) pc[pn]++;
        pn++;
    }
    if (n and n != 1) ps[pn] = n, pc[pn++] = 1;
    return pn;
}

int main () {
    int i, j, tcc, tc = getint();
    for (tcc = 0; tcc < tc; tcc++) {
        int a = getint(), b = getint(), c = getint();
        int ns, ds[2000], nss, ps[200], pc[200];
        if (a == 0) {
            if (c == 0) {
                if (b == 0) { puts("0"); continue; }
                puts("-1"); continue;
            }
            ll res = 0;
            ns = get_divisor(c, ds);
            for (i = 0; i < ns; i++) {
                nss = get_prime_factor(ds[i], ps, pc);
                res += 1LL << nss;
            }
            printf("%lld\n", res);
            continue;
        }
        ns = get_divisor(a, ds);
        ll res = 0;
        for (i = 0; i < ns; i++) {
            int p = a / ds[i] + c;
            int q = ds[i] - b;
            if (q <= 0) continue;
            if (p % q) continue;
            int t = p / q;
            nss = get_prime_factor(t, ps, pc);
            res += 1LL << nss;
        }
        printf("%lld\n", res);
    }
    return 0;
}
