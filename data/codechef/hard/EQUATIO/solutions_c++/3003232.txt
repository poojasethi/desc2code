#include <cstdio>
#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <set>
#include <map>
#include <list>
#include <string>
#include <cstring>


using namespace std;

#define DEBUG 0
#define all(C) (C).begin() , (C).end()
#define tr(C , it) for(typeof((C).begin()) it = (C).begin() ; it != (C).end() ; it++)

#define present(C , key) ((C).find(key) != (C).end())
#define cpresent(C , key) (find(all(C) , key) != (C).end()

#define sz(a) int((a).size())
#define pb push_back
#define MOD 100000007

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int , int> PI;

int isComp[1000001] = {0};
VI primes;

void gen_primes()
{
	int i, j;
	memset(isComp , 0 , sizeof(isComp));
	isComp[1] = 1;
	for(i=2;i<1001;i++)
	{
		if(isComp[i])
			continue;
		for(j = i*i ; j<1000001 ; j = j+i)
		{
			isComp[j] = 1;
		}
	}
	for(i=2 ; i<1000001 ; i++)
	{
		if(!isComp[i])
			primes.pb(i);
	}


}

int main()
{

	int T;
	int a, b, c;
	long long int  i, j, fac, l, g, ans=0, count_prime;

	gen_primes();

	scanf("%d", &T);


	while(T--)
	{
		scanf("%d %d %d", &a, &b, &c);

		ans=0;
		if(a==0 && c==0)	
		{
			if(b != 0)
				printf("%d\n", -1);
			else
				printf("0\n");
			continue;
		}
		else if(a==0)
		{
			for(i=1;i*i<=c;i++)
			{
				if(c%i==0)
				{	
					g=b+i;
					l= (c*g) / (g-b);
			
					if(l%g==0)
					{
						fac=l/g;
						count_prime=0;
						for(j=0;j<primes.size()&&primes[j]<=fac;j++)
						{
							if(fac%primes[j] == 0)	
								count_prime++;
						}
				
						ans+= (1<<count_prime);
					
					}
					
					g= c/i + b;
					if(c/i == i)	
						continue;
					
					l= (c *g) /(g-b);
		
					if(l%g==0)
					{
						fac=l/g;
						count_prime=0;
						for(j=0;j<primes.size()&&primes[j]<=fac;j++)
						{
							if(fac%primes[j] == 0)	
								count_prime++;
						}
				
						ans+= (1<<count_prime);
					
					}
					
					
				}
		
			}
			printf("%lld\n", ans);
			continue;
		}

		for(i=1;i*i<=a;i++)
		{
			if(a%i==0)
			{	
				g=i;
				if((g>b) && ( (c*g+a) % (g-b) == 0) )
				{
					l= (c*g + a) / (g-b);
			
					if(l%g==0)
					{
						fac=l/g;
						count_prime=0;
						for(j=0;j<primes.size()&&primes[j]<=fac;j++)
						{
							if(fac%primes[j] == 0)	count_prime++;
						}
					
						ans+= (1<<count_prime);
						
					}
					
				}
				
				g= a/i;
				if( a/i == i)	
					continue;
				if((g>b) && ((c *g+a)%(g-b) == 0))
				{
					l= ((c *g)+a)/(g-b);
			
					if(l%g==0)
					{
						fac=l/g;
						count_prime=0;
						for(j=0;j<primes.size()&&primes[j]<=fac;j++)
						{
							if(fac%primes[j] == 0)	count_prime++;
						}
					
						ans+= (1<<count_prime);
						
					}
					
				}
			}
		
		}
		printf("%lld\n", ans);

	}
	
	return 0;
}
