/*
 * 2012-02-20  Martin  <Martin@Martin-desktop>

 * 
 */
#include <cstdio>
#include <cstring>
#include <cctype>
#include <climits>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstdarg>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <exception>
#include <stdexcept>
#include <memory>
#include <locale>
#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#include <iterator>
#include <functional>
#include <string>
#include <complex>
#include <valarray>

using namespace std;

template <class T> inline T checkmin(T &a, T b)
{
	return (a < b) ? a : a = b;
}

template <class T> inline T checkmax(T &a, T b)
{
	return (a > b) ? a : a = b;
}

template <class T> T GCD(T a, T b)
{
	if (a < 0)
		return GCD(- a, b);
	if (b < 0)
		return GCD(a, - b);
	return (a == 0) ? b : GCD(b % a, a);
}

template <class T> T LCM(T a, T b)
{
	if (a < 0)
		return LCM(- a, b);
	if (b < 0)
		return LCM(a, - b);
	return (a == 0 || b == 0) ? 0 : a / GCD(a, b) * b;
}

template <class T> T ExtGCD(T a, T b, T &x, T &y)
{
	if (a < 0)
	{
		T c = ExtGCD(- a, b, x, y);
		x = - x;
		return c;
	}
	if (b < 0)
	{
		T c = ExtGCD(a, - b, x, y);
		y = - y;
		return c;
	}
	if (a == 0)
	{
		x = 0, y = 1;
		return b;
	}
	else
	{
		T c = ExtGCD(b % a, a, y, x);
		x -= b / a * y;
		return c;
	}
}

template <class T> inline T sqr(T X)
{
	return X * X;
}

#define tr(i, x) for (typeof(x.begin()) i = x.begin(); i != x.end(); ++ i)
#define rep(i, n) for (int i = 0; i < n; ++ i)
#define pii pair <int, int>
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define ll long long
#define cmplxd complex <long double>
#define pi 3.14159265358979323846264338327950288

namespace Poor
{
	ll a, b, c;
	ll Ans;
	map <ll, ll> Memo;
	
	ll Ask(ll X)
	{
		if (Memo.count(X))
			return Memo[X];
		ll res = 0;
		for (ll i = 1; i * i <= X; ++ i)
			if (X % i == 0 && GCD(i, X / i) == 1)
			{
				++ res;
				if (i * i != X)
					++ res;
			}
		Memo[X] = res;
		return res;
	}
	
	void Do(ll p, ll q)
	{
		p += c;
		q += b;
		if (p <= 0 || q <= 0)
			return;
		if (p % q != 0)
			return;
		p /= q;
		Ans += Ask(p);
	}
	
	void Solve()
	{
		cin >> a >> b >> c;
		ll right = a + b * c;
		Ans = 0;
		if (right == 0)
		{
			if (b == 0)
			{
				for (ll i = 1; i * i <= c; ++ i)
					if (c % i == 0)
					{
						Ans += Ask(c / i);
						if (i * i != c)
							Ans += Ask(i);
					}
				cout << Ans << endl;
			}
			else
				cout << - 1 << endl;
			return;
		}
		for (ll i = 1; i * i <= right; ++ i)
			if (right % i == 0)
			{
				Do(i, right / i);
				Do(- i, - right / i);
				if (i * i != right)
				{
					Do(right / i, i);
					Do(- right / i, - i);
				}
			}
		cout << Ans << endl;
	}
	
	void Run()
	{
		int TestCase;
		scanf("%d", &TestCase);
		for (int i = 1; i <= TestCase; ++ i)
			Solve();
	}
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("EQUATIO.in", "r", stdin);
	freopen("EQUATIO.out", "w", stdout);
	#endif
	Poor::Run();
	return 0;
}
