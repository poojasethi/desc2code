#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#define N 2000010
#define M 10000

int fac[N];
void precompute()
{
    memset(fac, 0, sizeof(fac));
    fac[1] = 1;
    for(int i = 2; i < N; i++) {
        if(fac[i]) continue;
        fac[i] = i;
        if(i < 32768)
            for(int j = i*i; j < N; j+=i)
                if(!fac[j]) fac[j] = i;
    }
}

int pf[M][2], divs[M];

int factor(int n, int pf[N][2])
{
  assert(n<N);
    int nfac = 0;
    while(n > 1) {
        int f = fac[n];
        int c = 0;
        while(fac[n] == f) {
            n /= f; ++c;
        }
        pf[nfac][0] = f; pf[nfac++][1] = c;
    }
    return nfac;
}

int divisors(int n, int divs[N])
{
    int ndiv = 0;
    int nfac = factor(n, pf);
    divs[ndiv++] = 1;
    for(int i = 0; i < nfac; i++) {
        int ndiv0 = ndiv;
        while(ndiv < (pf[i][1]+1)*ndiv0) {
            divs[ndiv] = divs[ndiv-ndiv0] * pf[i][0];
            ++ndiv;
        }
    }
    return ndiv;
}

// (xd, yd), (x,y)=1,
// d2xy=a+bdxy+cd
// (d-b)xy = a/d+c
long long count(int a, int b, int c)
{
    long long cnt = 0;
    if(a == 0 && c == 0)
        return (b>0 ? -1 : 0);
    else if(a == 0) {
        // (d-b)xy = c
        int ndiv = divisors(c, divs);
        for(int i = 0; i < ndiv; i++) {
            int d = divs[i];
            int nfac = factor(d, pf);
            cnt += (1<<nfac);
        }
    } else {
        // (d-b)xy = a/d + c
        int ndiv = divisors(a, divs);
        for(int i = 0; i < ndiv; i++) {
            int d = divs[i];
            if(d <= b || (a/d+c)%(d-b))
                continue;
            int nfac = factor((a/d+c)/(d-b), pf);
            cnt += (1<<nfac);
        }
    }
    return cnt;
}

int main()
{
    int t, a, b, c;
    //freopen("EQUATIO.in", "r", stdin);
    precompute();
    scanf("%d", &t);
    while(t--) {
        scanf("%d%d%d", &a, &b, &c);
        printf("%lld\n", count(a,b,c));
    }
    //system("pause");
    return 0;
}

