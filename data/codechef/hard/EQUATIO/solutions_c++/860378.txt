#pragma warning( disable : 4786 )
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <queue>
#include <cstring>
#include <ctime>
using namespace std;

typedef long long i64; 
typedef unsigned long long u64;

#define min(a,b) ((a)>(b)?(b):(a))
#define max(a,b) ((a)<(b)?(b):(a))
#define sq(x) ((x)*(x))

#define EPS 1e-7

#define eq(a,b) (a - b < EPS && b - a < EPS) 
#define les(a, b) (b - a > EPS) 

typedef vector<int> VI; 

#define rep(i,n) for((i)=0;(i)<(n);++(i))

#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),c) != (c).end()) 

#define FOR(v, it) for(it = v.begin(); it!=v.end(); ++it)
#define foreach(vtype, v, it) for(vtype::iterator it = v.begin(); it!=v.end(); ++it)

// tostring
string itos (int i){ stringstream s; s << i; return s.str(); }


#define dbg(x) if(DEBUG) cerr << __LINE__ << ": " << #x << " -> " << (x) << "\t";
#define dbge(x) if(DEBUG) cerr << __LINE__ << ": "<<#x << " -> " << (x) << endl;

#define CLR(c, v) memset(c, v, sizeof(c))

vector<string> Tokenize(string s, string ch) {
  vector<string> ret;
  for (int p = 0, p2; p < s.size(); p = p2+1) {
    p2 = (int)s.find_first_of(ch, p);
    if (p2 == -1) p2 = (int)s.size();
    if (p2-p > 0) ret.push_back(s.substr(p, p2-p));
  }
  return ret;
}

vector<int> TokenizeInt(string s, string ch) {
  vector<int> ret;
  vector<string> p = Tokenize(s, ch);
  for( int i = 0; i < p.size(); i++ )
    ret.push_back(atoi(p[i].c_str()));
  return ret;
}

vector<vector<int> > TokenizeMatrix(vector<string> s, string ch) {
  vector<vector<int> > ret;
  for( int i = 0; i < s.size(); i++ )
    ret.push_back( TokenizeInt(s[i], ch) );
  return ret;
}

int parseInts(char buff[], int a[]){
	int n = 0;
    char *p = strtok(buff," ");
    while(p!=NULL){
        sscanf(p,"%d",&a[n++]);
        p = strtok(NULL," ");
    }
	return n;
}

int getInt(void){
	int d;
	scanf("%d",&d);
	return d;
}
#define INT getInt()

double getDouble(void){
    double d;
    scanf("%lf", &d);
    return d;
}
#define DOUB getDouble()


bool DBG = true;

int count(int u) {
    int ret = 1;
    for (int i = 2; i * i <= u; ++i) {
        if (u % i == 0) {
            ret *= 2;
            while (u % i == 0) u /= i;
        }
    }
    if (u > 1) ret *= 2;
    return ret;
}

int main (void){
	//freopen("a.in", "r", stdin);
    int T; scanf("%d", &T);
    int a, b, c;
    while (T--) {
        scanf("%d%d%d", &a, &b, &c);
        
        // x * y = a + b * lcm(x, y) + c * gcd(x, y) .. 1
        // d = gcd(x, y)
        // p = x / d, q = y / d
        // from 1
        // d^2*p*q = a + b*d*p*q + c*d          ....... 2
        // p*q = (a/d + c) / (d-b)               ...... 3
        
        if (a == 0 && c == 0) {
            if (b == 0) {
                printf("0\n");
            } else {
                printf("-1\n");
            }
            continue;
        }
        int res = 0;
        for (int d = b + 1; // so that p * q will be positive
             a / d + c >= (d - b); // so that p*q will be full number
             ++d) {
            if (a % d == 0 && // from 1
                (a / d + c) % (d - b) == 0) {
                res += count((a / d + c) / (d - b));
            }
        }
        printf("%d\n", res);
    }
	return 0;
}
