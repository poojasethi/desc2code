#include<iostream>
#include<cstdio>
#include<algorithm>
#include<set>
#define ll long long
using namespace std;
struct node
{
	ll x,y;
	ll t;
};
bool operator < (node n1,node n2)
{
	if(n1.t!=n2.t)return n1.t > n2.t;
	if(n1.x !=n2.x)return n1.x > n2.x;
	return n1.y > n2.y;
}
ll arr[500003][2];
multiset<node> s1,s2,s3,s4;
int main()
{
	int q;
	scanf("%d",&q);
	ll ans=0;
	int cnt=1;
	while(q--)
	{
		char s[10];
		scanf("%s",s);
		ll x,y,n;
		if(s[0]=='+')
		{
			scanf("%lld%lld",&x,&y);
			x=x^ans;
			y=y^ans;
			arr[cnt][0]=x;
			arr[cnt][1]=y;
			cnt++;
			node now={x,y,0};
			now.t=-x-y;
			s1.insert(now);
			now.t=x-y;
			s2.insert(now);
			now.t=y-x;
			s3.insert(now);
			now.t=x+y;
			s4.insert(now);
		}
		else if(s[0]=='-')
		{
			scanf("%lld",&n);
			n=n^ans;
			x=arr[n][0];
			y=arr[n][1];
			node now={x,y,0};
			now.t=-x-y;
			s1.erase(s1.find(now));
			now.t=x-y;
			s2.erase(s2.find(now));
			now.t=y-x;
			s3.erase(s3.find(now));
			now.t=x+y;
			s4.erase(s4.find(now));
		}
		else
		{
			ll nans=0;
			scanf("%lld%lld",&x,&y);
			x=x^ans;
			y=y^ans;

			nans=max(nans,x+y + s1.begin()->t);
			nans=max(nans,-x+y + s2.begin()->t);
			nans=max(nans,x-y + s3.begin()->t);
			nans=max(nans,-x-y + s4.begin()->t);

			ans=nans;
			printf("%lld\n",ans);
		}
	}
}
