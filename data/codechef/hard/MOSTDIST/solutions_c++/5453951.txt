// Author : Muhammad Rifayat Samee
// Problem : Most Distant Points
// Algorithm:
#pragma warning (disable : 4786)
#pragma comment(linker, "/STACK:16777216")

#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<cstring>
#include<algorithm>
#include<string>
#include<set>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#define MAX(a,b) (a>b)?a:b
#define MIN(a,b) (a<b)?a:b
#define INF 987654321
#define pi (2*acos(0.0))
#define eps 1e-7

#ifdef ONLINE_JUDGE
#define i64 long long
#else
#define i64 __int64
#endif

using namespace std;
struct Node{
    int id;
    int val;
    bool operator<(const Node &a)const{
        return val<a.val;
    }
};
int F[500005],tot;


int main(){

	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
    int q,i,j,k,x,y,n,res;
    char str[5];
    while(scanf("%d",&q)!=EOF){
        priority_queue<Node>Q1;
        priority_queue<Node>Q2;
        priority_queue<Node>Q3;
        priority_queue<Node>Q4;
        res = 0;
        memset(F,0,sizeof(F));
        tot = 0;
        Node t;
        while(q--){
              scanf("%s",str);
              if(str[0] == '+'){
                    scanf("%d %d",&x,&y);
                    x = x^res;
                    y = y^res;
                    //printf("+ %d %d\n",x,y);
                    F[tot] = 1;
                    t.id = tot;
                    t.val = x + y;
                    Q1.push(t);
                    t.val = x - y;
                    Q2.push(t);
                    t.val = -x + y;
                    Q3.push(t);
                    t.val = -x - y;
                    Q4.push(t);
                    tot++;
              }
              else if(str[0] == '-'){
                    scanf("%d",&n);
                    n = n^res;
                    n--;
                   //printf("- %d\n",n);
                    F[n] = 0;
              }
              else if(str[0] == '?'){
                    scanf("%d %d",&x,&y);
                    x = x^res;
                    y = y^res;
                    //printf("? %d %d\n",x,y);
                    int r = 0;
                    Node t;
                    while(!Q1.empty()){
                        t = Q1.top();
                        if(F[t.id]==1){
                            //printf("%d %d\n",t.val,x+y);
                            r = max(r,t.val - (x+y));
                            break;
                        }
                        else{
                            Q1.pop();
                        }
                    }
                    while(!Q2.empty()){
                        t = Q2.top();
                        if(F[t.id]==1){
                           // printf("%d %d\n",t.val,x-y);
                            r = max(r,t.val - (x-y));
                            break;
                        }
                        else{
                            Q2.pop();
                        }
                    }
                    while(!Q3.empty()){
                        t = Q3.top();
                        if(F[t.id]==1){
                           // printf("%d %d\n",t.val,-x+y);
                            r = max(r,t.val - (-x+y));
                            break;
                        }
                        else{
                            Q3.pop();
                        }
                    }
                    while(!Q4.empty()){
                        t = Q4.top();
                        if(F[t.id]==1){
                           // printf("%d %d\n",t.val,-x-y);
                            r = max(r,t.val - (-x-y));
                            break;
                        }
                        else{
                            Q4.pop();
                        }
                    }
                    res = r;
                    printf("%d\n",res);
              }
        }

    }

	return 0;
}
