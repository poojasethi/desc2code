#include <iostream>
#include <stdio.h>
#include <set>
#include <assert.h>
#define maxn 500007

using namespace std;

int abs(int n)
{
	return n>0?n:-n;
}
struct node
{
	int x,y;
	int val;
	node(int _x,int _y,int _val)
	{
		x=_x,y=_y,val=_val;
	}
	bool operator < (const struct node &Z) const 
	{
		if(val==Z.val)
		{
			if(y==Z.y) return x<Z.x;
			return y<Z.y;
		}
		return val<Z.val;
	}
};

int ax[maxn],ay[maxn];
set<node> ad,sb;
set<node>::iterator fit;
set<node>::reverse_iterator rit;
int q,ANSWER,foo,bar,ADD,REM;
char ch;

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("I.in","r",stdin);
	#endif
		
	scanf("%d",&q);
	for(int i=0;i<q;i++)
	{
		cin>>ch;
		if(ch=='+')
		{
			scanf("%d%d",&ax[ADD],&ay[ADD]);
			ax[ADD]^=ANSWER,ay[ADD]^=ANSWER;
			ad.insert(node(ax[ADD],ay[ADD],ax[ADD]+ay[ADD]));
			sb.insert(node(ax[ADD],ay[ADD],ax[ADD]-ay[ADD]));
			ADD++;
		}
		else if(ch=='-')
		{
			scanf("%d",&foo);
			foo^=ANSWER;
			foo--;
			// printf(">%d %d %d\n", foo,ax[foo],ay[foo]);
			ad.erase(node(ax[foo],ay[foo],ax[foo]+ay[foo]));
			sb.erase(node(ax[foo],ay[foo],ax[foo]-ay[foo]));
		}
		else
		{
			scanf("%d%d",&foo,&bar);
			foo^=ANSWER,bar^=ANSWER;
			fit = ad.begin();
			ANSWER = abs(foo+bar-(*fit).val);
			fit = sb.begin();
			ANSWER = max(ANSWER,abs(foo-bar-(*fit).val));
			rit = ad.rbegin();
			ANSWER = max(ANSWER,abs(foo+bar-(*rit).val));
			rit = sb.rbegin();
			ANSWER = max(ANSWER,abs(foo-bar-(*rit).val));
			printf("%d\n", ANSWER);
		}
	}
	return 0;
}