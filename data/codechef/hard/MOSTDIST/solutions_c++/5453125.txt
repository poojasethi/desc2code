#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
#define mp make_pair
 
set < pair<int, pair<int,int> > , greater< pair<int, pair<int,int> > > >  quad[4];
vector< pair <int,int> > v;
 
int main()
{
	ios::sync_with_stdio(false);
 
	int T;
	cin >> T;
	
	char sign[2];
	int ans = 0;
 
	for(int t = 1; t <= T; t++)
	{ 
		cin >> sign;
		if(sign[0] == '?')
		{	
			int xx, yy;
			cin >> xx >> yy; 
			
			int x = xx ^ ans;
			int y = yy ^ ans;
			
			pair <int, int> p;
			
			ans = 0;
			
			p = (*quad[0].begin()).second;
			if(x <= p.first && y <= p.second) ans = max(ans, (*quad[0].begin()).first - x - y); 
 
			p = (*quad[1].begin()).second;
			if(x >= p.first && y <= p.second) ans = max(ans, (*quad[1].begin()).first + x - y);
 
			p = (*quad[2].begin()).second;
			if(x >= p.first && y >= p.second) ans = max(ans, (*quad[2].begin()).first + x + y);
 
			p = (*quad[3].begin()).second;
			if(x <= p.first && y >= p.second) ans = max(ans, (*quad[3].begin()).first - x + y);
 
			cout << ans << "\n";
		}
 
		if(sign[0] == '+')
		{	
			int xx, yy;
			cin >> xx >> yy; 
			
			int x = xx ^ ans;
			int y = yy ^ ans;
			
			v.push_back( mp(x,y) );	
			quad[0].insert(mp( ( x + y), mp(x, y)));
			quad[1].insert(mp( (-x + y), mp(x, y)));
			quad[2].insert(mp( (-x - y), mp(x, y)));
			quad[3].insert(mp( ( x - y), mp(x, y)));
		}
 
		if(sign[0] == '-')
		{	
			int nn;
			cin >> nn; 
			
			int n = nn ^ ans;
			
			int x = v[n-1].first, y = v[n-1].second; 
 
			quad[0].erase(quad[0].find(mp( ( x + y), mp(x, y))) );
			quad[1].erase(quad[1].find(mp( (-x + y), mp(x, y))) );
			quad[2].erase(quad[2].find(mp( (-x - y), mp(x, y))) );
			quad[3].erase(quad[3].find(mp( ( x - y), mp(x, y))) );
		}
	}
 
 
	return 0;
}