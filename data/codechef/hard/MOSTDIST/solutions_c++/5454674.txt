#include <iostream>
#include <cstring>
using namespace std;

const int MAXN=500000;
bool mark[MAXN+9]={false};

class max_heap
{

private:
pair<int,int> max_binary_heap[MAXN+9];
int size;

void max_heapify_bottom_up(int i)
{
if(i==0)
return;
int largest=i,left=2*i,right=2*i+1;
if(left<=size && max_binary_heap[largest].first<max_binary_heap[left].first)
largest=left;
if(right<=size && max_binary_heap[largest].first<max_binary_heap[right].first)
largest=right;
if(largest!=i)
{
swap(max_binary_heap[i],max_binary_heap[largest]);
max_heapify_bottom_up(i/2);
}
}

void max_heapify_top_down(int i)
{
int largest=i,left=2*i,right=2*i+1;
if(left<=size && max_binary_heap[left].first>max_binary_heap[largest].first)
largest=left;
if(right<=size && max_binary_heap[right].first>max_binary_heap[largest].first)
largest=right;
if(largest!=i)
{
swap(max_binary_heap[i],max_binary_heap[largest]);
max_heapify_top_down(largest);
}
}

public:

max_heap()
{
size=0;
memset(max_binary_heap,NULL,MAXN);
}

int get_size()
{
return size;
}

void delete_top()
{
max_binary_heap[1]=max_binary_heap[size];
size--;
max_heapify_top_down(1);
}

pair<int,int> get_max()
{
return max_binary_heap[1];
}

void insert(int x,int y)
{
max_binary_heap[size+1]=make_pair(x,y);
size++;
max_heapify_bottom_up(size/2);
} 

}p1,p2,p3,p4;

int actual_max(max_heap &p)
{
while(mark[p.get_max().second])
p.delete_top();
return p.get_max().first;
}

int main() 
{
	int q;
	scanf("%d",&q);
	int i=1;
	int ans=0;
	while(q--)
	{
	char s;
	int x,y,n;
	cin>>s;
	if(s=='+')
	{
	scanf("%d%d",&x,&y);
	x=ans^x;y=ans^y;
	p1.insert(x+y,i);
	p2.insert(x-y,i);
	p3.insert(-x+y,i);
	p4.insert(-x-y,i);
	i++;
	}
	else if(s=='-')
	{
	scanf("%d",&n);
	n=ans^n;
	mark[n]=true;
	}
	else
	{
	scanf("%d%d",&x,&y);
	x=ans^x;y=ans^y;
	int a1=actual_max(p1)-x-y;
	int a2=actual_max(p2)-x+y;
	int a3=actual_max(p3)+x-y;
	int a4=actual_max(p4)+x+y;
	ans=max(a1,max(a2,max(a3,a4)));
	printf("%d\n",ans);
	}
	}
	return 0;
}