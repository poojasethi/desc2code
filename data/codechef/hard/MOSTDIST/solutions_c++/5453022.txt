#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<cmath>
#include<climits>
#include<cstdlib>
#include<map>
#include<queue>
#include<stack>
#include<vector>
#include<set>
using namespace std;
const long long nine=1000000000LL;
int TC;
class cmp
{
public:
bool operator()(pair<long long,pair<int,int> >A,pair<long long,pair<int,int> >B)
{
return A.first>B.first;
}
};
 
int main()
{
int Q;
long long ans=0;
scanf("%d",&Q);
map<int,pair<int,int> >mp;
map<pair<int,int>,int >del;
int it=1;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que1;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que2;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que3;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que4;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que5;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que6;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que7;
priority_queue< pair<long long,pair<int,int> >,vector<pair<long long,pair<int,int> > >,cmp>que8;
 
while(Q--)
{
char c;
long long a,b,n;
scanf("%c",&c);
scanf("%c",&c);
if(c=='+')
{
scanf("%lld %lld",&a,&b);
a=a^ans;
b=b^ans;
mp[it++]=make_pair(a,b);
que1.push(make_pair(llabs(nine-a)+b,make_pair(a,b)));
que2.push(make_pair(a+llabs(nine-b),make_pair(a,b)));
que3.push(make_pair(a+b,make_pair(a,b)));
que4.push(make_pair((llabs(nine-1)+llabs(nine-b)),make_pair(a,b)));
que5.push(make_pair(-1*(llabs(nine-a)+b),make_pair(a,b)));
que6.push(make_pair(-1*(a+llabs(nine-b)),make_pair(a,b)));
que7.push(make_pair(-1*(a+b),make_pair(a,b)));
que8.push(make_pair(-1*(llabs(nine-1)+llabs(nine-b)),make_pair(a,b)));
 
 
}
else if(c=='-')
{
scanf("%lld",&n);
n=ans^n;
del[mp[n]]+=8;
 
}
else
{
scanf("%lld %lld",&a,&b);
a=a^ans;
b=b^ans;
pair<long long,pair<int,int> >pp=make_pair(1,make_pair(a,b));
while(1)
{
pp=que1.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que1.pop();
 
 
}
else
break;
 
}
long long tans=llabs((pp.second).first-a)+llabs((pp.second.second)-b);
 
while(1)
{
pp=que2.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que2.pop();
 
 
}
else
break;
 
}
tans=max(tans,llabs((pp.second).first-a)+llabs((pp.second.second)-b));
while(1)
{
pp=que3.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que3.pop();
 
 
}
else
break;
 
}
tans=max(tans,llabs((pp.second).first-a)+llabs((pp.second.second)-b));
while(1)
{
pp=que4.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que4.pop();
 
 
}
else
break;
 
}
tans=max(tans,llabs((pp.second).first-a)+llabs((pp.second).second-b));
while(1)
{
pp=que5.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que5.pop();
 
 
}
else
break;
 
}
tans=max(tans,llabs((pp.second).first-a)+llabs((pp.second).second-b));
while(1)
{
pp=que6.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que6.pop();
 
 
}
else
break;
 
}
tans=max(tans,llabs((pp.second).first-a)+llabs((pp.second).second-b));
while(1)
{
pp=que7.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que7.pop();
 
 
}
else
break;
 
}
tans=max(tans,llabs((pp.second).first-a)+llabs((pp.second).second-b));
while(1)
{
pp=que8.top();
if(del[pp.second]>0)
{
 
del[pp.second]--;
que8.pop();
 
 
}
else
break;
 
}
tans=max(tans,llabs((pp.second).first-a)+llabs((pp.second).second-b));
 
ans=tans;
printf("%lld\n",ans);
}
 
}
return 0;
}