#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <memory.h>
#include <complex>
#include <numeric>
using namespace std;
#pragma comment(linker, "/STACK:256000000")
#define mp make_pair
#define pb push_back
#define all(C) (C).begin(), (C).end()
#define sz(C) (int)(C).size()
#define PRIME 1103
#define PRIME1 31415
#define INF ((1ll << 30) - 1)
#define MOD 1000000009
#define FAIL ++*(int*)0
#define EPS 1e-8
#define IT 10000
template<class T> T sqr(T a) {return a * a;}
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pi64;
typedef pair<int, pii> piii;
typedef vector<int> vi;
typedef vector<int64> vi64;
typedef vector<vi64> vvi64;
typedef vector<pi64> vpi64;
typedef vector<vpi64 > vvpi64;
typedef vector<pii> vpii;
typedef vector<vector<int> > vvi;
typedef vector<vvi> vvvi;
typedef vector<vector<pair<int, int > > > vvpii;
typedef vector<vector<vector<pair<int, int > > > > vvvpii;
typedef complex<double> cd;
//------------------------------------------------------------

struct Point
{
    int64 x, y;
    Point() {}
    Point(int64 x, int64 y)
        : x(x), y(y) {}

    bool operator == (const Point &t) const
    {
        return x == t.x && y == t.y;
    }

    int64 dist(const Point &p) const
    {
        return abs(x - p.x) + abs(y - p.y);
    }

    bool operator < (const Point &t) const
    {
        return x == t.x ? y < t.y : x < t.x;
    }
};

bool comp1(const Point &l, const Point &r)
{
    Point t(0, 0);
    return l.dist(t) < r.dist(t);
}

bool comp2(const Point &l, const Point &r)
{
    Point t(1ll << 31, 0);
    return l.dist(t) < r.dist(t);
}

bool comp3(const Point &l, const Point &r)
{
    Point t(0, 1ll << 31);
    return l.dist(t) < r.dist(t);
}

bool comp4(const Point &l, const Point &r)
{
    Point t(1ll << 31, 1ll << 31);
    return l.dist(t) < r.dist(t);
}

set<Point, bool(*)(const Point&l, const Point&r)> s1(comp1);
set<Point, bool(*)(const Point&l, const Point&r)> s2(comp2);
set<Point, bool(*)(const Point&l, const Point&r)> s3(comp3);
set<Point, bool(*)(const Point&l, const Point&r)> s4(comp4);

void add(Point p)
{
    s1.insert(p);
    s2.insert(p);
    s3.insert(p);
    s4.insert(p);
}

void remove(Point p)
{
    s1.erase(p);
    s2.erase(p);
    s3.erase(p);
    s4.erase(p);
}

int64 getAns(Point p)
{
    int64 res = 0;

    if(!s1.empty())
    {
        Point t = *s1.begin();
        res = max(res, t.dist(p));
    }

    if(!s2.empty())
    {
        Point t = *s2.begin();
        res = max(res, t.dist(p));
    }
    if(!s3.empty())
    {
        Point t = *s3.begin();
        res = max(res, t.dist(p));
    }
    if(!s4.empty())
    {
        Point t = *s4.begin();
        res = max(res, t.dist(p));
    }
    return res;
}

int main()
{
#ifdef __APPLE__
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int q;
    scanf("%d\n", &q);

    int64 ans = 0;
    vector<Point> points;

    for(int i = 0; i < q; ++i)
    {
        char cmd;
        scanf("%c ", &cmd);

        if(cmd == '+')
        {
            Point p;
            scanf("%lld %lld\n", &p.x, &p.y);
            p.x ^= ans;
            p.y ^= ans;
            points.pb(p);
            add(p);
        }
        else if(cmd == '-')
        {
            int n;
            scanf("%d\n", &n);
            n ^= ans;
            --n;
            remove(points[n]);
        }
        else
        {
            Point p;
            scanf("%lld %lld\n", &p.x, &p.y);
            p.x ^= ans;
            p.y ^= ans;

            ans = getAns(p);
            printf("%lld\n", ans);
        }
    }
    return 0;
}










