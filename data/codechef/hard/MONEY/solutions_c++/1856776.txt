#include <iostream>
#include <map>

using namespace std;

int calculateNumUniqueSets(int remaining, int step);
map<int, int> foldSets;

int main(int argc, char **argv)
{
    int numTestCases, curTotal;

    cin >> numTestCases;
    while (cin >> curTotal)
    {
        cout << calculateNumUniqueSets(curTotal, 1) << endl;
    }

    return 0;
}

int calculateNumUniqueSets(int remaining, int step)
{
    if (foldSets.find(remaining / step) != foldSets.end())
    {
        return foldSets[remaining / step];
    }

    int iter = 1;
    int curMarkPos = remaining / step / ++iter;
    int retVal = 1;
    bool bLogarithmicReduction = true;
    while (curMarkPos > 0)
    {
        int curValueLeftOfMark = curMarkPos * step;
        int curRemaining = remaining - curValueLeftOfMark;

        if (curRemaining % (curValueLeftOfMark + step) == 0)
        {
            int numRightOfMark = (curRemaining / (curValueLeftOfMark + step));
            if (numRightOfMark == 0) break;
            retVal += calculateNumUniqueSets(curRemaining, curValueLeftOfMark + step); //foldSets[numRightOfMark];
        }

        if (bLogarithmicReduction && curMarkPos != remaining / step / ++iter)
        {
            curMarkPos = remaining / step / iter;
        }
        else
        {
            curMarkPos--;
            bLogarithmicReduction = false;
        }
    }

    foldSets[remaining / step] = retVal;

    return retVal;
}
