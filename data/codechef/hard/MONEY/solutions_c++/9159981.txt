#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>
#include <map>
 
inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}
int N, K, M, A, B;
int T = 1;
 
static const int MAX_FACTORS = 100000; //1022 + 1; // 32000 + 1
static const int MAX_FACTORS_MAX = MAX_FACTORS - 1;
int f[MAX_FACTORS]; // should be enough
unsigned int ff[MAX_FACTORS]; // should be enough

unsigned int Func2(int n)
{
  if(n == 0)
    return 0;

  // Find all the factors of the number
  unsigned int NN = n + 1;
  unsigned int max = sqrt(NN);
  unsigned int fNum = 0;
  for(unsigned int i = 2; i <= max; ++i)
  {
    if(NN % i == 0)
    {
      f[fNum] = i;
      f[MAX_FACTORS_MAX - fNum] = NN / i;
      ++fNum;
    }
  }

  // Prime number!
  if(fNum == 0)
    return 1;

  // Be careful about squares (15: 16 = 4x4!) Don't count 4 twice!
  if(f[fNum - 1] == f[MAX_FACTORS - fNum])
  {
    memcpy(f + fNum, f + MAX_FACTORS - fNum + 1, sizeof(unsigned int) * (fNum - 1));
    fNum *= 2;
    --fNum;
  }
  else
  {
    memcpy(f + fNum, f + MAX_FACTORS - fNum, sizeof(unsigned int) * fNum);
    fNum *= 2;
  }

  unsigned int result = 1; // all ones case is always there
  int opposeIndex = 0;
  for(int curfIndex = fNum - 1; curfIndex >= 0; --curfIndex, ++opposeIndex)
  {
    unsigned int resultThis = 1; // Just by replacing a number of ones with the times of f[curfoIndex]

    int times = f[opposeIndex] - 1;
    int remainder = times * f[curfIndex];

    for(int curfOtherIndex = fNum - 1; curfOtherIndex > curfIndex; --curfOtherIndex)
    {
      if(f[curfOtherIndex] % f[curfIndex] == 0) // Of the bigger factors is divisible by this one, so we can replace a number of this factors by a number of the bigger factors and get a new set!
      {
        resultThis += ff[curfOtherIndex]; // The other should already be calculated, so use this number
      }
    }

    ff[curfIndex] = resultThis; // Save this for DP

    result += resultThis; // Sum it up
  }

  return result;
}


int main()
{
#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  fastread(&T);

  while(T--)
  {
    fastread(&N);
    printf("%u\n", Func2(N));
  }
 
#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif
 
  return 0;
}