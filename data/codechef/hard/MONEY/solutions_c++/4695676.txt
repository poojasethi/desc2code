#include<iostream>
#include<vector>

using namespace std;

vector<int> primes;

int arr[40000];

void find_primes()
{
	int n;
	arr[1] = 1; 
	for(int i=2; i<40000; ++i)
	{
		if(arr[i] == 0)
			primes.push_back(i);
		for(int j = 2 * i; j<40000; j += i)
			arr[j] = 1;
	}
	return ;
}

vector <int> factors;
vector <int> temp;
vector<int> ans;

void push(int pri, int pow)
{
	temp.clear();
	temp = factors;
	factors.clear();
	int size = temp.size();
	for(int i=0; i<=pow; ++i)
	{
		//temp = oldfactors * (pri ^ i)
		for(int j=0; j<size; ++j)
		{
			factors.push_back(temp[j]);
			temp[j] *= pri;
		}
		//factors containing pri ^ i as factor are inside factors
	}
	return ;
}
		
int isfactor(int i, int j)
{
	return (factors[j] % factors[i] == 0);
}

//n > 1
int val(long long int n)
{
	factors.clear();
	factors.push_back(1);
	int i = 0;
	while(i < primes.size() && n > 1)
	{
		if(n % primes[i] != 0)
		{
			i++;
			continue;
		}
		int count = 0;
		while(n % primes[i] == 0)
		{
			n /= primes[i];
			count++;
		}
		push(primes[i], count);
	}
	if(n > 1)
		push(n, 1);

	int numfactors = factors.size();

	ans.clear();
	for(int i=0; i<numfactors; ++i)
		ans.push_back(0);
	ans[0] = 1;
	for(int i=0; i<numfactors; ++i)
	{
		for(int j=i+1; j<numfactors; ++j)
		{
			if(isfactor(i, j))
				ans[j] += ans[i];
		}
	}
	return ans[numfactors - 1];	
}




int main()
{
	find_primes();
	int t;
	cin>>t;
	while(t--)
	{
		long long int n;
		cin>>n;
		cout<<val(n+1)<<endl;
	}
	return 0;
}
