#include<iostream>
#include<cmath>
using namespace std;
 
unsigned int factors[31],k=0;
 
struct node
{
    unsigned int divisor;
    unsigned int number;
    node *link;
    node()
    {
        divisor=0;
        number=0;
        link=NULL;
    }    
}   ;
 
void final_answer()
{
    node **pointers;
    pointers=new node *[k];
    
    node * initial=new node;
    initial->divisor=1;
    initial->number=1;
    node *track=initial;
    node *track2=initial;
    
    int i,j=0;
    for(i=0;i<k;i++)
    {
        node *more=new node;
        
        if(i==0)
        { 
            more->divisor=factors[i];
            more->number=1;
            initial->link=more;
            pointers[j++]=more;
            continue;
        }
        else if(factors[i] != factors[i-1])
        { 
            track=initial;
        }
        else
        {
            track=pointers[j-1];
        }
           
            pointers[j++]=more;
            while(track!=pointers[j-1])
            {
                more->divisor=factors[i] * (track->divisor);    
                track2=initial;
              
                                
                while(track2->link!=NULL)
                {
                     if(more->divisor % track2->divisor == 0)
                         more->number += track2->number;
                      track2=track2->link;              
                }  
                if(more->divisor % track2->divisor ==0)
                               more->number += track2->number;
                track2->link=more;
                
                more=new node;
                track=track->link;
            }    
        }
        
    track=initial;
    while(track->link!=NULL)
      track=track->link;
    printf("%d\n",track->number);
 
}     
 
void generate_prime_factors( unsigned int x)
{
     unsigned int i;
     k=0;
     for(i=2;x!=1 && i<=(int)sqrt((double)x);)
     {
           if(x%i==0)
           {//cout<<"hi";
                      factors[k++]=i;
                      x=x/i;
           }    
           else
                         i++;
     }      
     factors[k++]=x;
   final_answer(); 
}    
 
main()
{
    int test;
    unsigned int n;
    scanf("%d",&test);
    while((test--)>0)
    {
        scanf("%d",&n);
        generate_prime_factors(n+1);
    }    
    return 0;
}     