#include<iostream>
#include<cstdio>
#include<math.h>
using namespace std;

int greatest_integer_function(float n) {
	if((n-(int)n)>0) {
		return (int)(n+1);
	} else {
		return n;
	}
}

int ParallelComputing(int count) {
	float log2=0.301030;//log10(2);
	//printf("%f\n", log2);
	int iterations=greatest_integer_function(log10(count)/log2);
	int downward_iterations=greatest_integer_function(log10(greatest_integer_function(count*1.0/3))/log2);
	printf("%d\n", iterations+downward_iterations);
	int cur_iteration=0;
	int remaining=count;
	int increment=1;
	for(; remaining>1; cur_iteration++) {
		//increment*=2;//=pow(2, cur_iteration);
		printf("%d ", remaining/2);
		remaining=(remaining+1)/2;
		int index;
		for(index=increment; index+increment<=count; index+=2*increment) {
			printf("%d+%d=%d ", index, index+increment, index+increment);
			//for(int index1=index+1; index1<=index+increment; index1++) {
			//	printf("%d+%d=%d ", index, index1, index1);
			//}
			//printf("%d+%d=%d ", index, index+increment, index+increment);
		}
		if(index<count && index+increment>count) {
			//for(int index1=index+1; index1<=count; index1++) {
			//	printf("%d+%d=%d ", index, index1, index1);
			//}			
			printf("%d+%d=%d ", index, count, count);
		}
		printf("\n");
		increment*=2;
	}
	increment/=2;
	for(cur_iteration-=2; cur_iteration>=0; cur_iteration--) {
		increment/=2;//=pow(2, cur_iteration);
		//float log_increment=log10(increment);
		//printf("%f\n", log_increment);
		int elements=greatest_integer_function(count*1.0/increment);
		//printf("elements=%d, cur_iteration=%d\n", elements, cur_iteration);
		if((elements-2)/2) {
			printf("%d ", (elements-2)/2);
		}
		//printf("%d ", remaining/2);
		//remaining=(remaining+1)/2;
		//int index;
		for(int index=3*increment; index<count; index+=2*increment) {
			printf("%d+%d=%d ", index, index-increment, index);
			//for(int index1=index+1; index1<=index+increment; index1++) {
			//	printf("%d+%d=%d ", index, index1, index1);
			//}
			//printf("%d+%d=%d ", index, index+increment, index+increment);
		}
		if((elements-2)/2) {
			printf("\n");
		}
	}
}

int main() {
	int count;
	scanf("%d", &count);
	ParallelComputing(count);
	return 0;
}
