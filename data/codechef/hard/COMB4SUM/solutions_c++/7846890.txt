#include <bits/stdc++.h>

#define F first
#define S second
#define mp make_pair
#define ll long long

using namespace std;

const int N = 1e3 + 5;

const int M = 2e5 + 5;

const int R = 3e5;

const int base = 1e5;

int t, n, a[N];

pair < ll, int > f[3][2 * M];

ll result;

inline void add (int id, int val)
{
	for (int i = val + base;i <= R;i = (i | (i + 1)))
		f[id][i].F += val, f[id][i].S++;
}

inline pair < ll, int > get (int id, int x)
{
	pair < ll, int > result = mp (0, 0);
	for (int i = x;i >= 0;i = (i & (i + 1)) - 1)
		result.F += f[id][i].F, 
		result.S += f[id][i].S;
	return result;
}

inline ll calc (int id, int val)
{
	int pos = val + base;
	pair < ll, int > lower = get (id, pos);
	pair < ll, int > upper = get (id, R);
	upper.F -= lower.F, upper.S -= lower.S;
	ll result = 1ll * lower.S * val - lower.F + upper.F - 1ll * upper.S * val;
	return 1ll * lower.S * val - lower.F + upper.F - 1ll * upper.S * val;
}

int main ()
{
	scanf ("%d", &t);
	while (t--)
	{
		scanf ("%d", &n);
		for (int i = 1;i <= n;i++)
			scanf ("%d", &a[i]);
		memset (f, 0, sizeof f);
		result = 0;
		for (int i = n - 2;i >= 2;i--)
		{
			for (int j = i + 2;j <= n;j++)
				add (0, a[i + 1] + a[j]), 
				add (1, a[j] - a[i + 1]),
				add (2, a[i + 1] - a[j]);
			for (int j = 1;j < i;j++)
				result += 2ll * calc (0, a[j] + a[i]), 
				result += 2ll * calc (1, a[j] - a[i]),
				result += 2ll * calc (2, a[j] - a[i]);
		}
		printf ("%lld\n", result);
	}
	return 0;                  
}
