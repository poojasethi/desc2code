#include<bits/stdc++.h>

using namespace std;

// The codes which I use are taken from the book Competitive Programming 3 written by Steven Halim
// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

int a[2009] , freq[2009];

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int t;s(t);
    while( t-- )
    {
        vector < pair < int , ii > >  pairs;
        int n;s(n);
        REP( i , 0 , n - 1 )
            s(a[i]);
        REP( i , 0 , n - 1 )
            REP( j , i + 1 , n - 1 )
                pairs.push_back( make_pair( a[i] + a[j] , ii( i , j ) ) ) ;
        sort( pairs.begin() , pairs.end() );
        ll ans = 0;
        int sz = pairs.size();
        REP( i , 0 , sz - 1 )
        {
            ii u = pairs[i].second;
            ans += ( i ) * 1ll * pairs[i].first;
            ans -= ( sz - 1 - i) * 1ll * pairs[i].first;
            ans -= ( freq[u.first] * 1ll * pairs[i].first );
            ans -= ( freq[u.second] * 1ll * pairs[i].first );
            ans += ( n - 2 - freq[u.first] ) * 1ll * ( pairs[i].first );
            ans += ( n - 2 - freq[u.second] ) * 1ll * ( pairs[i].first );
            freq[u.first]++;
            freq[u.second]++;
        }
        printf("%lld\n",ans *1ll* 2);
        REP( i , 0 , n + 2 )
            freq[i] = 0;
    }
    return 0;
}
