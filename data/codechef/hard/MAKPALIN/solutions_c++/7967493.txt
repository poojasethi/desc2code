#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define pb push_back
#define gc getchar_unlocked
#define iosbase ios_base::sync_with_stdio(false)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ppi pair<pair<int,int>,int>
#define vi vector<int>
#define sc scanf
#define lld I64d
#define F first
#define S second
#define mkpr make_pair
#define N 1000000007
#define maxs 100005
#define mins 5005
#define eps 0.000000000001
#define imax 5000000200
#define lmax 100000000000000ll
inline int getint(){
    char c;
    while((c=getchar())<'0'||c>'9'); return c-'0';
}
ll a[maxs],pw[maxs];
ll b[mins];
ll n,hsh[maxs],rhsh[maxs];
ll getHash(ll i,ll j)
{
    i++;
    j++;
    if(i>j) return 0;
    ll ans=hsh[j]-hsh[i-1];
    ans*=pw[n-i];
    return ans;
}
ll getRevHash(ll i,ll j)
{
    i++;
    j++;
    if(i>j) return 0;
    i=n-i+1;
    j=n-j+1;
    swap(i,j);
    ll ans=rhsh[j]-rhsh[i-1];
    ans*=pw[n-i];
    return ans;
}
int main()
{
    ll i,j,k,x,y,p,p1,h1,h,l,m,t,cnt,ans=0;
    iosbase;
    cin>>t;
    string s;
    pw[0]=1;
    for(i=0;i<maxs-1;i++)
        pw[i+1]=pw[i]*31;
    while(t--)
    {
        cin>>s;
        n=s.size();
        hsh[0]=0;
        for(i=1;i<=n;i++)
        {
            hsh[i]=hsh[i-1];
            hsh[i]+=pw[i-1]*(s[i-1]-'a'+1);
        }
        reverse(s.begin(),s.end());
        rhsh[0]=1;
        for(i=1;i<=n;i++)
        {
            rhsh[i]=rhsh[i-1];
            rhsh[i]+=pw[i-1]*(s[i-1]-'a'+1);
        }
        ll kup=0;
        if(n%2==0)
        {
            p=getHash(0,n-1);
            h=getRevHash(0,n-1);
            if(p==h){
                kup++;
            }
            p=getHash(1,n-1);
            h=getRevHash(1,n-1);
            if(p==h){
                kup++;
            }
            p=getHash(0,n-2);
            h=getRevHash(0,n-2);
            if(p==h){
                kup++;
            }
            for(i=1;i<n-1;i++){
                p=getHash(0,i-1);
                p1=getHash(i+1,n-1);
                h=getRevHash(0,i-1);
                h1=getRevHash(i+1,n-1);
                p=p+p1*pw[i];
                h1=h1+h*pw[n-i-1];
                if(p==h1){
                    kup++;
                }
            }
        }
            else
            {
            p=getHash(1,n-1);
            h=getRevHash(1,n-1);
            if(p==h){
                kup++;
            }
            p=getHash(0,n-2);
            h=getRevHash(0,n-2);
            if(p==h){
                kup++;
            }
            for(i=1;i<n-1;i++)
            {
                p=getHash(0,i-1);
                p1=getHash(i+1,n-1);
                h=getRevHash(0,i-1);
                h1=getRevHash(i+1,n-1);
                p=p+p1*pw[i];
                h1=h1+h*pw[n-i-1];
                if(p==h1){
                    kup++;
                }
                if(p==h1 && i==(n/2)){
                    kup++;
                }
            }
            }
            cout<<kup<<endl;
        }
    
    return 0;
}