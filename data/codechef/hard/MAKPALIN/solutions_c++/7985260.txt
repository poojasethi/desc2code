//Pranet Verma
#include <bits/stdc++.h>
using namespace std;
const int X[]={31,37};
const int MOD[]={999999937,999999929};
int h1[100011][2],h2[100011][2];
int P[100011][2];
void precompute()
{
    P[0][0]=1;
    P[0][1]=1;
    for(int i=1;i<=100010;++i)
        for(int j=0;j<2;++j)
            P[i][j]=((long long)P[i-1][j]*X[j])%MOD[j];
}
void generate(const string &s,int h[][2])
{
    for(int i=0;i<(int)s.size();++i)
        for(int j=0;j<2;++j)
            h[i+1][j]=(h[i][j]+(long long)s[i]*P[i+1][j])%MOD[j];
}
/*k is string index */
inline int getHash(int h[][2],int k,char c,int j,int n)
{
    int part1=h[k][j];
    int part2=((long long)c*P[k+1][j])%MOD[j];
    int part3=(((long long)h[n][j]-h[k][j]+MOD[j])*X[j])%MOD[j];
    int ans=(part1+part2)%MOD[j];
    ans=(ans+part3)%MOD[j];
    return ans;
}
char str[100011];
int main()
{
    int t;
    scanf("%d",&t);
    precompute();
    while(t--)
    {
        scanf("%s",str);
        string s(str);
        string r(str);
        reverse(r.begin(),r.end());
        generate(s,h1);
        generate(r,h2);
        int ans=0;
        for(int k=0;k<=(int)s.size();++k)
        {
            for(char a='a';a<='z';++a)
            {
                int s0=getHash(h1,k,a,0,(int)s.size());
                int s1=getHash(h1,k,a,1,(int)s.size());
                int r0=getHash(h2,(int)s.size()-k,a,0,(int)s.size());
                int r1=getHash(h2,(int)s.size()-k,a,1,(int)s.size());
                if(r0==s0 && r1==s1)
                {
                    ++ans;
                    break;
                }
            }
        }
        printf("%d\n",ans);
    }
}