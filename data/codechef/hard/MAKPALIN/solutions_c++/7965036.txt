/*
Don't underestimate me!
I don't quit and I don't run!
You can act tough all you want!
You're not gonna scare me off! No way!
I don't care if I Do get stuck as a Genin for the rest of my life!
I'll still be Hokage someday!
Believe it!!!
------------------------------------------------------------------
*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
using namespace std;

#define trace(x) cerr << #x << "=" << x <<endl;
#define trace2(x, y) cerr << #x << "=" << x << " " << #y << "=" << y <<endl;
#define track(x, n) {cerr << #x << ":" << endl; for (int i = 0; i < n; i++) {cerr << x[i] << " ";} cerr << endl;}

#define MAX 100005
#define INF 1e9

long long B = 100000007;
long long M = 1000000009;

long long power(long long n, long long m)
{
    if (m == 0) return 1;
    long long x = power(n, m / 2);
    if (!(m & 1)) return (x * x) % M;
    else return (((x * x) % M) * n) % M;
}

int n;
string s;

long long h[MAX], rh[MAX];
long long pB[MAX], invB[MAX];

void pInit() {
    pB[0] = 1;
    for (int i = 1; i < MAX; i++) {
        pB[i] = (pB[i-1] * B) % M;
    }

    invB[MAX-1] = power(pB[MAX-1], M-2);
    for (int i = MAX-2; i >= 0; i--) {
        invB[i] = (invB[i+1] * B) % M;
    }
}

void init()
{
        h[0] = s[0];
        for (int i = 1; i < n; i++) {
            h[i] = ((s[i] * pB[i]) % M + h[i-1]) % M;
        }

        rh[n-1] = s[n-1];
        for (int i = n-2; i >= 0; i--) {
            rh[i] = ((s[i] * pB[n-1-i]) % M + rh[i+1]) % M;
        }
}

long long getsubH( int i, int j){
    long long jh = h[j];
    long long ih = (i > 0)? h[i-1]: 0;
    long long subhash = ((jh + M - ih) * invB[i]) % M;
    return subhash;
}

long long getsubrH(int i, int j){
    long long ih = rh[i];
    long long jh = (j < n-1)? rh[j+1]: 0;
    long long subhash = ((ih + M - jh) * invB[n-1-j]) % M;
    return subhash;
}

int main()
{
    ios::sync_with_stdio(false);

    pInit();
    int t;
    cin >> t;
    while (t--) {
        cin >> s;
        n = s.size();
        init();
        int count = 0;
        for (int i = 0; i <= n; i++) {
            bool flag = false;

            long long prefixH = (i > 0)? getsubH(0, i-1): 0;
            long long suffixH = (i < n)? getsubH(i, n-1): 0;

            long long prefixrH = (i > 0)? getsubrH(0, i-1): 0;
            long long suffixrH = (i < n)? getsubrH(i, n-1): 0;

            for (int j = 'a'; j <= 'z'; j++) {

                long long totalh = (prefixH + (j * pB[i]) + (suffixH * pB[i+1]) % M) % M;
                long long totalrh = ((prefixrH * pB[n-i+1]) % M + (j * pB[n-i]) + suffixrH) % M;

                if (totalh == totalrh) {
                    flag = true;
                    break;
                }
            }
            if (flag) {
                count++;
            }
        }
        cout << count << endl;
    }
}
