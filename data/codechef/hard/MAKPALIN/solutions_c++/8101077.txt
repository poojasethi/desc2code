#include<bits/stdc++.h>
using namespace std;
#define ll long long int
char ch[100010];
ll P[100010],R[100010],L[100010];
int pol_hash(char A[])
{
	ll n=strlen(A);
	for(ll i=0;i<n;i++)
	{
		if(i==0)
			L[i]=A[i]-'a'+1;
		else
		L[i]=(L[i-1]+((A[i]-'a'+1)*P[i]));
	}
}
int reversehash(char A[])
{
    ll j=0;
	ll n=strlen(A);
	for(ll i=n-1;i>=0;i--,j++)
	{
		if(j==0)
			R[j]=A[i]-'a'+1;
		else
		R[j]=(R[j-1]+((A[i]-'a'+1)*P[j]));
	}
}
int main()
{
	ll t,count=0,i,n,j;
	ll HA,RE;
	scanf("%lld",&t);
	P[0]=1;
	for(i=1;i<100005;i++)
	{
		P[i]=(P[i-1]*37);
	}
	while(t>0)
	{
	t--;
		scanf("%s",&ch);
		pol_hash(ch);
		reversehash(ch);
		n=strlen(ch);
		count=0;
		for(i=0;i<=n;i++)
		{
			for(j=1;j<=26;j++)
			{
				if(i==0||i==n)
				{	if(i==0){
					HA=(L[n-1]*37+j);
					RE=(R[n-1]+j*P[n]);
					}
					else{
						HA=(L[n-1]+j*(P[n]));
						RE=(R[n-1]*37+j*P[0]);
					}
					if(HA==RE){
						count++;
						break;
					}
				}
				else
				{
					HA=(((L[n-1]-L[i-1])*37+L[i-1])+((j)*P[i]));
					RE=((((R[n-1]-R[n-i-1])*37)+R[n-i-1])+(j*P[n-i]));
					if(HA==RE){
						count++;
						break;
					}
				}
			}
		}
		printf("%lld\n",count);
	}
}
