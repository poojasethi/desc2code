#include<bits/stdc++.h>
using namespace std;
#define LL long long
#define FOR(i, a, b) for(int i=a;i<b;i++)
const int MX = 1e5 + 5;
LL base = 29;
LL M1 = 1e9 + 23;
LL M2 = 1e9 + 9;

char s[MX];
int n;
LL p1[MX], p2[MX];
LL f1[MX], b1[MX], f2[MX], b2[MX];

void poly_powers()
{
	p1[0] = p2[0] = 1;
	FOR(i, 1, MX) 
	{
		p1[i] = (p1[i-1] * base)%M1;
		p2[i] = (p2[i-1] * base)%M2;
	}
}

void all_hash()
{
	f1[0] = f2[0] = s[0]-'a'+1;
	FOR(i, 1, n)
	{
		f1[i] = ((f1[i-1]*base)%M1 + (s[i]-'a'+1))%M1;
		f2[i] = ((f2[i-1]*base)%M2 + (s[i]-'a'+1))%M2;
	}

	b1[n-1] = b2[n-1] = s[n-1]-'a'+1;
	for(int i=n-2;i>=0;i--)
	{
		b1[i] = ((b1[i+1]*base)%M1 + (s[i]-'a'+1))%M1;
		b2[i] = ((b2[i+1]*base)%M2 + (s[i]-'a'+1))%M2;
	}
}

LL sub_hash(int st, int en)
{
	if(st > en) return 0;
	LL ret;
	if(st == 0) ret = f1[en];
	else ret = (f1[en] - (f1[st-1]*p1[en-st+1])%M1 + M1)%M1;
	return ret;
}

LL sub_rhash(int st, int en)
{
	if(st > en) return 0;
	LL ret;
	if(en == n-1) ret = b1[st];
	else ret = (b1[st] - (b1[en+1]*p1[en-st+1])%M1 + M1)%M1;
	return ret;
}

int main()
{
	poly_powers();

	int t;
	scanf("%d",&t);
	while(t--) 
	{
		scanf("%s",s);
		n = strlen(s);

		all_hash();


		int ans = 0;
		LL st1, st2, en1, en2;
		FOR(i, 0, n+1)
		{
			FOR(j, 0, 26)
			{
				//if(i == 0)
					//st1 = (((j+1)*p1[n-i])%M1 + f1[n-1])%M1;
				//else
					st1 = ((sub_hash(0, i-1)*p1[n-i+1])%M1 + (j+1)*p1[n-i] + sub_hash(i, n-1))%M1;
					//st1 = (((f1[i-1]*p1[n-i])%M1*(base-1))%M1 + (j+1)*p1[n-i] + f1[n-1])%M1;
					//st1 = ((f1[i-1]*p1[n-i+1])%M1 + (j+1)*p1[n-i] + f1[n-1] - f1[i-1]*p1[n-i])%M1;
				//if(i == n)
					//en1 = (((j+1)*p1[i])%M1 + b1[0])%M1;
				//else 
					en1 = ((sub_rhash(i, n-1)*p1[i+1])%M1 + (j+1)*p1[i] + sub_rhash(0, i-1))%M1;
					//en1 = ((b1[i]*p1[i+1])%M1 + (j+1)*p1[i] + b1[0] - b1[i]*p1[i])%M1;
					//en1 = (((b1[i]*p1[i])%M1*(base-1))%M1 + (j+1)*p1[i] + b1[0])%M1;
				//cout << st1 << ' ' << en1 << endl;
				if(st1 == en1)
				{
					ans++;
					break;
				}	
			}
		}
		printf("%d\n",ans);

	}
	return 0;
}
