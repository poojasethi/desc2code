#include <stdio.h>
#include <string.h>
#include <iostream>
using namespace std;
#define MAXN 100005
char S[MAXN];
#define MOD 1000000009
typedef long long ll;
ll prefix[MAXN], suffix[MAXN], pwr[MAXN];
const ll P = 31;
void solve() {
    scanf("%s", S);
    int N = strlen(S);
    prefix[0] = S[0] - '0';
    suffix[0] = S[N - 1] - '0';
    ll temp = P;
    pwr[1] = P; pwr[0] = 1;
    for(int i = 1; i < N; i++) {
        prefix[i] = (prefix[i - 1] +  (S[i] - '0') * temp) % MOD;
        suffix[i] = (suffix[i - 1] + (S[N - i - 1] - '0') * temp) % MOD;
        temp = temp * P % MOD;
        pwr[i + 1] = temp;
    }
    int cnt = 0;
    for(int i = 0; i < N; i++) {
        ll left = 0;
        if(i > 0) left = prefix[i - 1];
        ll right = (prefix[N - 1] - left + MOD) % MOD;
        right = right * P % MOD;
        char c = S[N - 1 - i];
        if(i > (N / 2)) c = S[N - i];
        ll start = left + right + (c - '0') * pwr[i]; start = start % MOD;
        left = suffix[N - i - 1];
        right = (suffix[N - 1] - left + MOD) % MOD;
        ll upto = (right * P) + left + (c - '0') * pwr[N - i]; upto = upto % MOD;
        if(start == upto) cnt++;
    }
    char c = S[0];
    ll start = prefix[N - 1] + (c - '0') * pwr[N]; start = start % MOD;
    ll upto = suffix[N - 1] * P + (c - '0'); upto = upto % MOD;
    if(start == upto) cnt++;
    printf("%d\n", cnt);
}
int main() {
    int t;
    scanf("%d", &t);
    while(t--) solve();
}
