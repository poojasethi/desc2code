#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
int qp(int a,ll b,int mo){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}
const int mo=1000000007;
int n,m;

/*struct edge{
	int v,next,w;
}e[255*255*255];int g[2*255*255];int etot=0;*/

int g[255*255*2][255],dw[255*255*2][255];int deg[255*255*2];
void ae(int u,int v,int w){
	//e[etot].v=v;e[etot].w=w;e[etot].next=g[u];g[u]=etot++;
	g[u][++deg[u]]=v;
	dw[u][deg[u]]=w;
}
struct point{
	int x,y;
}p[255];
struct disk{
	int r,c;
}d[255];
int cmp(const disk&a,const disk&b){return a.r<b.r;}

#define id(i,j,k) (((i)-1)*2*(m)+(j)*2-(k))
#define dis(a,b) (1ll*((a).x-(b).x)*((a).x-(b).x)+1ll*((a).y-(b).y)*((a).y-(b).y))
int s,t;
#define inf 1000000000

int di[255*255*2];
struct node{
	int v,d;
	int operator<(const node&b)const{
		return d>b.d;
	}
};
priority_queue<node> qu;
int dij(){
	for (int i=1;i<=t;i++)di[i]=inf;
	di[s]=0;
	qu = *(new priority_queue<node>);
	qu.push((node){s,0});
	while(!qu.empty()){
		node cur=qu.top();qu.pop();
		int u=cur.v;
		if(di[u]!=cur.d)continue;
		if(u==t)return di[u];
		/*for (int i=g[u];~i;i=e[i].next)if(di[e[i].v]>di[u]+e[i].w){
			di[e[i].v]=di[u]+e[i].w;
			qu.push((node){e[i].v,di[e[i].v]});
		}*/
		for (int i=1;i<=deg[u];i++){
			int v=g[u][i],w=dw[u][i];
			if(di[v]>di[u]+w){
				di[v]=di[u]+w;
				qu.push((node){v,di[v]});
			}
		}
	}
	return inf;
}	

int w;
int main()
{
	int tes;scanf("%d",&tes);
	while(tes--){
		//memset(g,-1,sizeof(g));etot=0;
		gn(n);gn(m);gn(w);
		//for (int i=1;i<=2*n*m+2;i++)g[i]=-1;etot=0;
		for (int i=1;i<=2*n*m+2;i++)deg[i]=0;
		for (int i=1;i<=n;i++)gn(p[i].x),gn(p[i].y);
		for (int i=1;i<=m;i++)gn(d[i].r),gn(d[i].c);
		sort(d+1,d+1+m,cmp);
		s=n*2*m+1,t=s+1;
		for (int i=1;i<=n;i++)
			for (int j=1;j<=m;j++){
				if(j<m)ae(id(i,j,0),id(i,j+1,0),0);
				ae(id(i,j,0),id(i,j,1),d[j].c);
			}
		for (int fr=1;fr<=n;fr++)
			for (int to=1;to<=n;to++)if(fr!=to){
				ll di=dis(p[fr],p[to]);
				int cur=m;
				for (int i=1;i<=m;i++){
					if(1ll*(d[i].r+d[m].r)*(d[i].r+d[m].r)<di)continue;
					while(cur>1 && 1ll*(d[i].r+d[cur-1].r)*(d[i].r+d[cur-1].r)>=di)cur--;
					ae(id(fr,i,1),id(to,cur,0),0);
				}
			}
		for (int u=1;u<=n;u++){
			for (int i=1;i<=m;i++)if(d[i].r>=p[u].y){
				ae(s,id(u,i,0),0);
				break;
			}
			for (int i=1;i<=m;i++)if(d[i].r>=w-p[u].y){
				ae(id(u,i,1),t,0);
			}
		}
		int an=dij();
		if(an==inf){
			printf("impossible\n");
		}else{
			printf("%d\n",an);
		}
	}
	return 0;
}
