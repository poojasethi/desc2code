#include<cstdio>
#include<iostream>
#include<algorithm>
#include<set>
#include<vector>
#include<cstdlib>
#include<cstring>
#include<cmath>

using namespace std;
int n,m,w;
long long x[250],y[250];
long long mdis[250][250];
vector<pair<long long,int> > disk;
vector<long long> r;
//int fin[250][250][250];
long long dist(int i,int j){
  long long dx=x[i]-x[j];
  long long dy=y[i]-y[j];
  return (dx*dx+dy*dy);
}
int dijkstra(){
  int dis[250][250];
  for(int i=0;i<250;i++)
    for(int j=0;j<250;j++)
      dis[i][j]=2000000000;
  set<pair<int,pair<int,int> > > Q;
  int smallest[250];
  for(int i=0;i<n;i++)
    smallest[i]=m;
  int mn=-1;
  for(int i=0;i<n;i++){
    //    int ind=(int)(lower_bound(r.begin(),r.end(),y[i])-r.begin());
    for(int j=smallest[i]-1;j>=0;j--){
      if(y[i]<=r[j]){
        dis[i][j]=disk[j].second;
        Q.insert(make_pair(dis[i][j],make_pair(i,j)));
        smallest[i]=j;
      }
    }
  }
  while(!Q.empty()){
    pair<int,pair<int,int> > top = *Q.begin();
    Q.erase(Q.begin());
    int i=top.second.first, j=top.second.second;
    int d=top.first;
    if(y[i]+r[j]>=w){
      if(mn==-1)
        mn=d;
      mn=min(d,mn);
      break;
    }
    for(int k=0;k<n;k++){
      if(k!=i){
        for(int l=smallest[k]-1;l>=0;l--){
          if(mdis[i][k] <= r[j]*r[j]+2*r[j]*r[l]+r[l]*r[l]){
            int cost=disk[l].second;
            if(dis[k][l]>dis[i][j]+cost){
              if(dis[k][l]!=2000000000)
                Q.erase(Q.find(make_pair(dis[k][l],make_pair(k,l))));
              dis[k][l]=dis[i][j]+cost;
              Q.insert(make_pair(dis[k][l],make_pair(k,l)));
		smallest[k]=l;
            }
            
          }
		else
			break;
        }
      }
    }
  }
  return mn;
}
int main(){
  int t;
  scanf("%d",&t);
  while(t--){
    disk.clear();
    r.clear();
    //memset(fin,-1,sizeof fin);
    scanf("%d%d%d",&n,&m,&w);
    for(int i=0;i<n;i++) scanf("%lld%lld",&x[i],&y[i]);
    for(int i=0;i<n;i++)
      for(int j=0;j<n;j++)
        mdis[i][j]=dist(i,j);
    vector<pair<long long, int> >disk1;
    for(int i=0;i<m;i++){
      long long a;
      int b;
      scanf("%lld%d",&a,&b);
//      r.push_back(a);
      disk1.push_back(make_pair(a,b));
    }
    sort(disk1.begin(),disk1.end());
    
    disk.push_back(disk1[0]);
    for(int i=1;i<m;i++){
        while(!disk.empty() && disk1[i].second <= disk.back().second){
            disk.pop_back();
        }
        disk.push_back(disk1[i]);
    }
m=disk.size();
    for(int i=0;i<disk.size();i++)
        r.push_back(disk[i].first);
    sort(r.begin(),r.end());
    /*      for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                for(int  k=0;k<n;k++){
                fin[i][j][k]=(int)(lower_bound(r.begin(),r.end(),dist(i,k)-r[j])-r.begin());
                }
                }
                }*/
    int ans=dijkstra();
    if(ans==-1)
      cout<<"impossible\n";
    else
      cout<<ans<<endl;
  }
  //f954ccafcb
  return 0;
}