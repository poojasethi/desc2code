#include <iostream>
#include <cstdio>
#include <vector>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <map>
#include <cstdlib>
#include <algorithm>
#include <list>
#include <deque>
#include <bitset>
#include <cmath>
#include <set>
#include <sstream>
#include <time.h>

using namespace std;

#define oo 0x7F7F7F7F
#define LET(x,a)     __typeof(a) x(a)
#define EACH(it,v)   for(LET(it,v.begin());it!=v.end();++it)
#define REP(i,n)     for(__typeof(n) i(0); i<n; i++)
#define ALL(x)       (x).begin(), (x).end()
#define gint(t)      scanf("%d", &t)
#define gll(t)       cin>>t 
#define pint(t)      printf("%d\n", t);
#define pb           push_back
#define mp           make_pair
//#define JAI_ARENA
#ifdef JAI_ARENA
#define debug(args...) {cerr<<"> "; dbg,args;cerr<<endl;}
#define debugv(v, n)      {cerr<<"> "; REP(ni, n) dbg,v[ni]; cerr<<endl;}
#else
#define debug(...) ;
#define debugv(...) ;
#endif
typedef long long int   ll;
typedef unsigned long long int ull;
typedef unsigned int    uint;
typedef pair<int, int>  pii;
typedef vector<int>     vi;
typedef vector<vi>      vii;
typedef vector<pii>     vpii;

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {
        cerr<<v<<" ";
        return *this;
    }
} dbg;


#define BUF 4096
char ibuf[BUF];
int ipt = BUF;

int readUInt() {
    while (ipt < BUF && ibuf[ipt] < '0') ipt++;
    if (ipt == BUF) {
    fread(ibuf, 1, BUF, stdin);
    ipt = 0;
    while (ipt < BUF && ibuf[ipt] < '0') ipt++;
    }
    int n = 0; char neg = 0;
    if(ipt !=0 && ibuf[ipt-1] == '-') neg = 1;
    while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
    if (ipt == BUF) {
    fread(ibuf, 1, BUF, stdin);
    ipt = 0;
    while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
    }
    return neg?-n:n;
}
int testcase;
#define MAXN 260
#define MAXM 260
int n, m, w;
int x[MAXN], y[MAXN], r[MAXN], c[MAXN];
double minr=1e25;
ll maxr = 0;
ll disn[MAXN][MAXN];
ll dism[MAXN][MAXN];
#define MODN 1000000007
void solve() {
	int mincost[n][m];
	REP(i, n) REP(j, m) mincost[i][j] = oo;
	for(int i = 0; i<n; i++)
	{
		for(int j = i+1; j < n; j++)
		{
			disn[i][j] = disn[j][i] = ((x[i]-x[j])*(ll)(x[i]-x[j]) +
					(y[i]-y[j])*(ll)(y[i]-y[j])); 
		}
	}
	char done[n]; memset(done, 0, sizeof done);
	stack<int> st;
	bool flag = false;
	for(int i = 0; i < n; i++) {
		if(y[i]<=maxr) {
			st.push(i); done[i] = 1;
			if(y[i] + maxr >= w) {
				flag = true; break;
			}
		}
	}
	ll dislim = 4*maxr*maxr;
	while((!flag) && (!st.empty())) {
		int v= st.top(); st.pop();
		for(int i = 0; i < n; i++) {
			if(done[i]) continue;
			if(disn[v][i]<=dislim) {
				if(y[i]+maxr >= w) {
					flag = true; break;
				}
				st.push(i); done[i] =1;
			}
		}
	}
	if(!flag) {
		cout<<"impossible"<<endl;
		return;
	}
	for(int i = 0; i<m; i++)
	{
		for(int j = i; j < m; j++)
		{
			dism[i][j] = dism[j][i] = (r[i]+r[j])*(ll)(r[i]+r[j]); 
		}
	}
	priority_queue<pair<int, int> > mq;
	REP(ni, n) {
		REP(mi, m) {
			if(y[ni] <= r[mi]) {
				mincost[ni][mi] = c[mi];
//				double expected_cost = mincost[ni][mi];
//				if(y[ni]+r[mi] < w) expected_cost += (w-r[mi]-y[ni])*minr;
				mq.push(make_pair(-mincost[ni][mi], ni*m+mi));
				break;
			}
		}
	}
	int minans = -1;
	while(!mq.empty()) {
		int v1 = mq.top().second;
		mq.pop(); 
		int n1 = v1/m;
		int m1 = v1%m;
		if(y[n1] + r[m1] >= w) {minans = mincost[n1][m1]; break;}
		REP(ni, n) {
			int mi, cst;
			if(ni == n1) {
				mi = m1+1;
				if(mi>=m) continue;
				cst = c[mi] - c[m1];
			} else {
				mi = lower_bound(dism[m1], dism[m1]+m, disn[n1][ni]) - dism[m1];
				if(mi >= m) continue;
				cst = c[mi];
			}
			if(mincost[ni][mi] > mincost[n1][m1] + cst) {
				mincost[ni][mi] = mincost[n1][m1] + cst;
//				if(y[ni]+r[mi]<w) expected_cost += (w-y[ni]-r[mi])*minr;
				mq.push(make_pair(-mincost[ni][mi], ni*m+mi));
			}
		}
	}
	if(minans!=-1)
		cout<<minans<<endl;
	else
		cout<<"impossible"<<endl;
}
void intIntSort(int d[],int m1[],int s){int i=-1,j=s,k,t;if(s<=1)return;k=(d[0]+d[s-1])/2;for(;;){while(d[++i]<k);while(d[--j]>k);if(i>=j)break;t=d[i];d[i]=d[j];d[j]=t;t=m1[i];m1[i]=m1[j];m1[j]=t;}intIntSort(d,m1,i);intIntSort(d+j+1,m1+j+1,s-j-1);}

bool input() {
	gint(n); gint(m); gint(w);
	REP(i, n) {gint(x[i]); gint(y[i]);}
	REP(j, m) {gint(r[j]); gint(c[j]); 
		double rt = c[j]/(2.0*r[j]);
		if(rt < minr){
			minr = rt;
		}
		if(r[j] > maxr) maxr = r[j];
	}
	intIntSort(c, r, m);
	char considered[m];
	memset(considered, 0, sizeof considered);
	int p1 = 0, p2=1;
	while(p2<m)
	{
		if(r[p1] >= r[p2]) p2++;
		else {
			p1++;
			if(p1!=p2) {
				r[p1] = r[p2];
				c[p1] = c[p2];
			}
			p2++;
		}
	}
	m = p1+1;
//	REP(mi, m) {
//		cout<<c[mi]<<" "<<r[mi]<<endl;
//	}
    return true;
}
void preprocess() {

}
int main()
{
#ifdef JAI_ARENA
	freopen("1.in","r", stdin);
	time_t start = time(NULL);
#endif
	preprocess();
    gint(testcase);
    while(testcase--)
	    if(input())
	       solve();
#ifdef JAI_ARENA
    time_t end = time(NULL);
    cerr<<"Time Taken: "<<end-start<<endl;
#endif
    return 0;
}
