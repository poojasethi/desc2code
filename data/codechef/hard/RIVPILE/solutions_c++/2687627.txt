/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <bitset>
#include <iomanip>
#include <utility>

#define P2(x) ((LL)(x) * (x))

using namespace std;

typedef long long LL;
typedef complex<double> point;
typedef long double ldb;
typedef pair<int,int> pii;

const int MAXN= 250+5;
const int inf = 1000000000;

int n,m,W;
int x[MAXN],y[MAXN];
int r[MAXN],c[MAXN];
int dis [MAXN][MAXN];
int func[MAXN][MAXN][MAXN];

struct cmp{
	inline bool operator () (const pii &A, const pii &B){
		int da = dis[A.first][A.second] + c[A.second];
		int db = dis[B.first][B.second] + c[B.second];
		return da!=db ? da<db : A<B;
	}
};

inline int dij (){
	set <pii, cmp> SET;
	for (int i=0; i<n; i++)
		for (int j=0; j<m; j++){
			if (r[j] >= y[i]){
				dis[i][j] = 0;
				SET.insert(pii(i,j));
			}else
				dis[i][j] = inf;
		}
	while (!SET.empty()){
		pii begin = *SET.begin(); SET.erase(SET.begin());
		for (int i=0; i<n; i++) if (begin.first != i && func[begin.first][begin.second][i] != m){
			int DIS = dis[begin.first][begin.second] + c[begin.second];
			if (DIS < dis[i][func[begin.first][begin.second][i]]){
				SET.erase (pii(i, func[begin.first][begin.second][i]));
				dis[i][func[begin.first][begin.second][i]] = DIS;
				SET.insert(pii(i, func[begin.first][begin.second][i]));
			}
		}
		if (begin.second != m-1 && dis[begin.first][begin.second] < dis[begin.first][begin.second+1]){
			SET.erase (pii(begin.first, begin.second+1));
			dis[begin.first][begin.second+1] = dis[begin.first][begin.second];
			SET.insert(pii(begin.first, begin.second+1));
		}
	}
	int ret = inf;
	for (int i=0; i<n; i++)
		for (int j=0; j<m; j++) if (y[i] + r[j] >= W)
			ret = min(ret, dis[i][j] + c[j]);
	return ret;
}

inline void main2(){
	scanf("%d%d%d", &n, &m, &W);
	for (int i=0; i<n; i++)
		scanf("%d%d", &x[i], &y[i]);
	for (int i=0; i<m; i++)
		scanf("%d%d", &r[i], &c[i]);
	for (int i=0; i<m; i++)
		for (int j=i-1; j>=0; j--) if (r[j] > r[j+1])
			swap(r[j], r[j+1]), swap(c[j], c[j+1]);
	for (int i=0; i<n; i++){
		for (int j=0; j<n; j++) if (i!=j){
			LL dist = P2(x[i]-x[j]) + P2(y[i]-y[j]);
			int poi = 0;
			for (int k=m-1; k>=0; k--){
				while (poi<m && P2(r[poi]+r[k]) < dist)
					poi++;
				func[i][k][j] = poi;
			}
		}
	}
	int ret = dij();
	if (ret != inf)
		printf("%d\n", ret);
	else
		printf("impossible\n");
}

int main(){
	int testCase;
	scanf("%d", &testCase);
	for (int o=0; o<testCase; o++)
		main2();
	return 0;
}
