#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<string>
#include<cstdio>
#include<vector>
#include<cassert>
#include<cstring>
#include<cstdlib>
#include<utility>
#include<iostream>
#include<algorithm>
#include<functional>
#define REP(x,y,z) for(int x=y;x<=z;x++)
#define FORD(x,y,z) for(int x=y;x>=z;x--)
#define MSET(x,y) memset(x,y,sizeof(x))
#define FOR(x,y) for(__typeof(y.begin()) x=y.begin();x!=y.end();x++)
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define SZ size()
#define M 200005
using namespace std;
typedef long long LL;
typedef pair<int,int> Pii;
struct P{int id,x,st;}in[M*2];
int t,n,k,ans,cur,curch,ed[M];
bool ch[M];
set<Pii> s;
set<Pii>::iterator it;
bool comp(P x,P y)
{
	if(x.x != y.x)return x.x<y.x;
	if(x.st != y.st)return x.st==1;
	return false;
}
int main()
{
	int x,y;
	scanf("%d",&t);
	while(t--)
	{
		MSET(ch,false);
		cur=ans=0;
		s = set<Pii> ();
		
		scanf("%d %d",&n,&k);
		REP(i,1,n)
		{
			scanf("%d %d",&x,&y);
			ed[i]=y;

			in[i*2-2].id = in[i*2-1].id = i;
			in[i*2-2].x = x;
			in[i*2-2].st = 1;
			in[i*2-1].x = y;
			in[i*2-1].st = 0;
		}

		sort(in,in+2*n,comp);

		REP(i,0,2*n-1)
		{
			if(in[i].st == 1)
			{
				cur++;
				s.insert( MP(ed[in[i].id], in[i].id) );
			}
			else
			{
				s.erase( MP(ed[in[i].id], in[i].id) );
				cur--;
				if(ch[in[i].id])curch--;
			}

			while(cur-curch>=k)
			{
				it = s.end();it--;
				ch[it->S] = true;
				s.erase(it);
				curch++;
				ans++;
			}
		}

		printf("%d\n",ans);
	}
	return 0;
}
