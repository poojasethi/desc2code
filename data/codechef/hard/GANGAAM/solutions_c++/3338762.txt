#include <stdio.h>
#include <algorithm>
#include <vector>
#include <string.h>
#include <time.h>
#include <set>
using namespace std;
#define pii pair<int,int>
#define ff first
#define ss second
int fre[400];
vector<pii> range;
vector<pii> event;
bool my (int a, int b)
{
	return fre[a] > fre[b];
}
struct myset{
	bool operator () (pii a, pii b)
	{
		return a.ff > b.ff;
	}
};
bool sevent( pii a, pii b)
{
	int aa;
	int bb;
	if (a.ss) {
		aa = range[a.ff].ff;
	}
	else {
		aa = range[a.ff].ss;
	}
	if (b.ss) {
		bb = range[b.ff].ff;
	}
	else {
		bb = range[b.ff].ss;
	}
	if (aa < bb) return true;
	if (aa == bb && a.ss > b.ss) return true;
	return false;
}
bool gsort(int a, int b)
{
	return range[a].ss > range[b].ss;
}
int main()
{
	float tym = clock();
	int t;
	int n,x;

	scanf("%d",&t);
	vector<pii> v;
	vector<int> group;
	bool ans[400];
	while (t--) {
		set<pii> present;
		scanf("%d%d",&n,&x);
		event.clear();
		range.clear();
		for (int i = 0; i < n; i++) {
			int s,e;
			scanf("%d%d",&s,&e);
			range.push_back(pii(s,e));
			event.push_back(pii(i,1));
			event.push_back(pii(i,0));
			ans[i] = false;
		}
		sort(event.begin(),event.end(),sevent);
		int total = 0;
		for (int i = 0; i < event.size(); i++) {
			//printf("(%d %d) ",event[i].ff,event[i].second);
			int ind = event[i].ff;
			if (event[i].ss) { // entry of thief
				present.insert(pii(-range[ind].ss,ind));
			}
			else {
				present.erase(pii(-range[ind].ss,ind));
			}
			if (present.size() >= x) {
				set<pii> :: iterator it;
				int rem = present.size()-x+1;
				it = present.begin();
				while (rem--) {
					ans[present.begin()->ss] = true;
					present.erase(present.begin());
				}
			}
		}
		int val = 0;
		for (int i = 0; i < n; i++) {
			if (ans[i]) val++;
		}
		printf("%d\n",val);
	}
	while ((clock()-tym)/CLOCKS_PER_SEC < 1.8);
	return 0;
}

