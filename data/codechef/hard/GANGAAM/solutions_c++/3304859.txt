#include<bits/stdc++.h>
using namespace std;
struct interv{
	int beg,end;
};
bool operator< (const interv &lhs,const interv &rhs)
{
	return lhs.beg<=rhs.beg;
}
int t,n,K;
interv in[500];
int main()
{
	int i,j;
	cin>>t;
	while(t--)
	{
		vector<int> endc;
		cin>>n>>K;
		for(i=0;i<n;i++)
		{
			int start,end;
			cin>>start>>end;
			in[i].beg = start;
			in[i].end = end;
			endc.push_back(end);
		}
		sort(in,in+n);
		sort(endc.begin(),endc.end());
		int size=0,res=0,k=0,p=-1;
		priority_queue<int> q;
		priority_queue<int, vector<int> , greater<int> > removed;
		for(i=0;i<n;i++)
		{
			// Remove smallers
			while(k<n && endc[k]<in[i].beg)
			{
				if(removed.size()>0 && endc[k]==removed.top())
					removed.pop();
				else
					size--;
				k++;
			}
			// push all start
			for(j=i;(j<n &&in[j].beg==in[i].beg);j++)
			{
				q.push(in[j].end);
				//cout<<"Pushed "<<in[j].end<<endl;
				size++;
			}
			// interrogate
			while(size>=K)
			{
				//cout<<"Interrogate "<<q.top()<<endl;
				removed.push(q.top());
				q.pop();
				res++;
				size--;
			}
			// remove endings
			while(k<n && endc[k]==in[i].beg)
			{
				if(removed.size()>0 && endc[k]==removed.top())
					removed.pop();
				else
					size--;
				k++;
			}
			i=j-1;
		}
		cout<<res<<endl;
	}
	return 0;
}
