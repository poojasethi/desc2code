#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!=13 and s[n]!=0; ++n);s[n]=0

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

const int max_bn=410;

// BIT struct

int bA[max_bn+1];
struct BIT
{
	int bn; //bn>0
	
	BIT(){ bn=0; }
	BIT(int bn_){ bn=bn_; fill(bA,bA+bn+1,0); }
	
	int prefix(int bposn)
	{
		if(bposn<=0) return 0;
		if(bposn>bn) bposn=bn;
		
		int ret=0;
		for(int i=bposn; i>0; i-=((i)&(-i)))
			ret+=bA[i];
		return ret;
	}
	
	void update(int bposn, int bincr)
	{
		if(bposn<=0) return;
		if(bposn>bn) return;
		
		for(int i=bposn; i<=bn; i+=((i)&(-i)))
			bA[i]+=bincr;
	}
	
	int query(int bl, int br)
	{
		if(bl>br) return 0;
		return (prefix(br)-prefix(bl-1));
	}
};

// End of BIT struct

const int max_n=210;

int T;
int n,x;
pii A[max_n];
int hp[max_n],hpsz;
BIT bit;

int allc[2*max_n];
map<int,int> M;
int nc;

int main()
{
	gi(T);

	rep(z,T)
	{
		gi(n); gi(x);

		rep(i,n)
		{
			gi(A[i].fs); allc[2*i]=A[i].fs;
			gi(A[i].sc); allc[2*i+1]=A[i].sc;
		}

		M.clear();
		nc=0;
		sort(allc,allc+2*n);
		M[allc[0]]=(++nc);
		forup(i,1,2*n)
			if(allc[i-1]!=allc[i])
				M[allc[i]]=(++nc);

		rep(i,n)
		{
			A[i].fs=M[A[i].fs];
			A[i].sc=M[A[i].sc];
		}
		sort(A,A+n);

		if(x==1)
		{
			pin(n);
			continue;
		}

		int res=0;
		hpsz=0;
		bit=BIT(nc);
		rep(i,n)
		{
			bit.update(A[i].sc,1);
			hp[hpsz++]=A[i].sc; push_heap(hp,hp+hpsz);

			if(bit.query(A[i].fs,nc)>=x)
			{
				++res;
				bit.update(hp[0],-1);
				pop_heap(hp,hp+(hpsz--));
			}
		}

		pin(res);
	}
	
	return 0;
}