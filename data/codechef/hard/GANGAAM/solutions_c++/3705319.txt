// ROH.cpp : Defines the entry point for the console application.
//


#include<iostream>
#include<vector>
#include<stdio.h>
#include<cstdio>
#include<stdlib.h>
#include<algorithm>
#include<queue>
#include<bitset>
#include<fstream>
#include<stack>
#include<set>
#include<utility>
#include<string>
#include<cstring>
#include<math.h>
using namespace std;

#define scan scanf
#define sscan sscanf_s
#define get gets_s
#define print printf 
#define mod 1000000007
#define ll long long
#define init int i,j,k,l,m,n,test
#define pause system("pause")
#define inf 1000000000

struct node
{
	int event, no;
	int value;
	int valuex;

};
bool operator<(const struct node &x,const struct node &y)
{
	if(x.value!=y.value)
	{
		return(x.value<y.value);

	}
	else
	{
		return(x.event<y.event);

	}

}
struct f
{
	int val;
	int no;


};

bool operator<(const struct f &x,const struct f &y)
{
	return(x.val>y.val);

}
int main()
{
	struct node a[405];
	init;
	scan("%d",&test);
	while(test--)
	{
		int x;
		scan("%d %d",&n,&x);
		for(i=0;i<2*n;i++)
		{
			int start,end;
			scan("%d %d",&start,&end);
			a[i].event=0; //0 means start event
			a[i].no=i/2;
			a[i].value=start;
			a[i].valuex=end;
			i++;
			a[i].event=1; //1 means end event
			a[i].no=i/2;
			a[i].value=end;

		}
		sort(a,a+2*n);
		bool status[450]={0};
		int count_gang=0;
		int ans=0;
		int count_interrogated=0;
		multiset<struct f> s;
		s.clear();
		for(i=0;i<2*n;i++)
		{
			struct node p;
			p=a[i];
			if(p.event==0)
			{
				//new gangster
				count_gang++;
				struct f temp;
				temp.no=p.no;
				temp.val=p.valuex;
				s.insert(temp);
				if(count_gang>=x)
				{
					//new member found
					if((count_gang-x+1)>count_interrogated)
					{
						//new interrogation required
						//choose the first one from set s
						temp=*s.begin();
						status[temp.no]=1;// interrogated
						s.erase(s.begin());
						count_interrogated++;
						ans++;

					}
				}
			}
			else
			{
				count_gang--;
				if(status[p.no])
					count_interrogated--;
				else
				{
					struct f temp;
					temp.no=p.no;
					temp.val=p.value;
					s.erase(temp);


				}


			}

		}

		
		cout<<ans<<endl;
		
		


	}
	
}

