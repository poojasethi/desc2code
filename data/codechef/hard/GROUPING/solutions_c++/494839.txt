#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <algorithm>
#include <sstream>
#include <utility>
#include <list>
using namespace std;

#define rep(i, n) for (int i = 0; i < n; i++)
#define sz(v) (int) ((v).size())
#define mp(x, y) make_pair(x, y)

void solve();
int main()
{
//    freopen("../QtConsoleApp/1.txt", "r", stdin);
//    freopen("../QtConsoleApp/1.out", "w", stdout);
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    solve();
    return 0;
}

int N, M, K;
int c[10000];
pair<int, int> cc[10000];
vector<pair<int, int> > gr[10000];

int ac;
set<pair<int, int> > ans[100];

void go(const pair<int, int>& v, set<pair<int, int> >& s)
{
    if (ac >= K)
        return;
    s.insert(v);

    for (int i = sz(gr[v.second]) - 1; i >= 0; i--)
    {
        if (ac >= K)
            break;

        pair<int, int> u = gr[v.second][i];
        if (s.count(u))
            continue;
        if (u.first > v.first)
            continue;

        bool ok = true;
        for (set<pair<int, int> >::iterator it = s.begin(); it != s.end(); it++)
        {
            if (!binary_search(gr[u.second].begin(), gr[u.second].end(), *it))
            {
                ok = false;
                break;
            }
        }
        if (ok)
            go(u, s);

    }

    if (ac < K)
        ans[ac++] = s;

    s.erase(v);
}

int tmp[10000];

void solve()
{
    int T;
    scanf("%d", &T);
    rep(tc, T)
    {
        scanf("%d%d%d", &N, &M, &K);
        rep(i, N)
        {
            scanf("%d", &c[i]);
            cc[i].first = c[i];
            cc[i].second = i;
            gr[i].resize(0);
        }
        rep(i, M)
        {
            int a, b;
            scanf("%d%d", &a, &b);
            gr[a].push_back(mp(c[b], b));
            gr[b].push_back(mp(c[a], a));
        }
        rep(i, N)
        {
            sort(gr[i].begin(), gr[i].end());
        }

        sort(cc, cc + N);
        set<pair<int, int> > s;

        int last = K;

        for (int i = N - 1; last > 0 && i >= 0; i--)
        {
            ac = 0;
            go(cc[i], s);

            int num = min(ac, last);
            rep(j, num)
            {
                int l = 0;
                for (set<pair<int, int> >::iterator it = ans[j].begin(); it != ans[j].end(); it++)
                {
                    tmp[l++] = it->second;
                }
                sort(tmp, tmp + l);
                rep(k, l)
                {
                    printf("%d ", tmp[k]);
                }
                puts("");
            }

            last -= num;
        }
        puts("");
    }
}
