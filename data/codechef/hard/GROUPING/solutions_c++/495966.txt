#include<iostream>
#include<cmath>
#include<algorithm>
#include<limits>
#include<vector>
#include<bitset>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<map>

using namespace std;

#define REP(i,n) for(int i=0;i<n;i++)
#define FOR(i,FROM,n) for(int i=FROM;i<n;i++)
#define FORR(i,n) for(int i=n;i>=0;i--)
#define ll long long int
#define llu long long unsigned int


int t,n,m,k;

int ni()
{
    int temp;
    scanf("%d",&temp);
    return temp;
}

ll nl()
{
    ll temp;
    scanf("%lld",&temp);
    return temp;
}

llu nlu()
{
    llu temp;
    scanf("%llu",&temp);
    return temp;
}

float nf()
{
    float temp;
    scanf("%f",&temp);
    return temp;
}

struct store
{
    ll c;
    int ind;
};

struct edge
{
    int x,y;
};

edge e[40000];
store a[10000];
int pos[10000],v[10000],queue[10000],tq[10000],start[10000];

bool myfunction( store i, store j )    //use it to sort vectors
{
    if( i.c < j.c ) return false;
    if( j.c < i.c ) return true;
    return true;
}

bool myfunction2( edge i, edge j )    //use it to sort vectors
{
    if( i.x < j.x ) return true;
    if( j.x < i.x ) return false;
    return i.y<j.y;
}


void dfs(int at,int ind)
{
    //cout<<"here "<<at<<endl;
    v[at]=1;
    queue[ind]=at;

    FOR(i,at+1,n)
    {
        int till=2*m;
        if(i!=n-1)
        till=start[i+1];
        int cnt=0;
        FOR(j,start[i],till)
        if(v[e[j].y]==1)
        cnt++;
        if(cnt==ind+1 && k)
        {
            //cout<<"hello "<<i<<endl;
            dfs(i,ind+1);
        }
        if(k==0)
        break;
    }

    if(k)
    {
        REP(i,ind+1)
        tq[i]=a[queue[i]].ind;
        sort(tq,tq+ind+1);
        REP(i,ind+1)
        printf("%d ",tq[i]);
        printf("\n");
        k--;
    }

    v[at]=0;
}


int main()
{
   //freopen("input.txt","r",stdin);
   //freopen("output.txt","w",stdout);

   scanf("%d",&t);
   for(int prob=0;prob<t;prob++)
   {
       n=ni();
       m=ni();
       k=ni();
       REP(i,n)
       {
           a[i].c=nl();
           a[i].ind=i;
           //cout<<a[i].c<<endl;
       }

       sort(a,a+n,myfunction);

       REP(i,n)
       pos[a[i].ind]=i;

       REP(i,m)
       {
           int x=ni();
           int y=ni();
           e[2*i].x=pos[x];
           e[2*i].y=pos[y];
           e[2*i+1].x=e[2*i].y;
           e[2*i+1].y=e[2*i].x;
       }
       sort(e,e+2*m,myfunction2);
       //REP(i,m*2)
       //cout<<e[i].x<<" "<<e[i].y<<endl;

       int at=0;
       FOR(i,0,e[0].x+1)
       start[i]=0;
       at=e[0].x+1;
       FOR(i,1,2*m)
       if(e[i].x!=e[i-1].x)
       {
           FOR(j,at,e[i].x+1)
           start[j]=i;
           at=e[i].x+1;
       }
       FOR(j,at,n)
       start[j]=2*m;

       //REP(i,n)
       //cout<<start[i]<<" ";
       //cout<<endl;

       REP(i,n)
       v[i]=0;
       at=0;
       while(k)
       {
           //v[at]=1;
           //queue[0]=at;
           dfs(at,0);
           //v[at]=0;
           at++;
       }
       printf("\n");
   }


   //system("pause");
   return 0;

}
