#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cassert>
#include <cmath>

#include <string>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <vector>
#include <list>
#include <set>
#include <map>

using namespace std;

#define Eo(x) { cerr << #x << " = " << (x) << endl; }
#define sz(x) (int((x).size()))
#define foreach(i, x) for(__typeof((x).begin()) i = (x).begin(); i != (x).end(); i ++)

template<typename A, typename B> ostream& operator<<(ostream& os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }
template<typename C> ostream& operator<<(ostream& os, const vector<C>& v) { foreach(__it, v) os << *(__it) << ' '; return os; }

typedef double real;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pip;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const real pi = acos(-1.0);
const real eps = 1e-5;

const int maxn = 10010;
int profit[maxn];
int order[maxn];
int posInOrder[maxn];
//set<int> g[maxn];
bool g[maxn][maxn];
vector<int> gv[maxn];
int gcount[maxn];

bool mycmp(int a, int b) {
	return profit[a] > profit[b];
}

int n, m, k;

int curres;
int curv[maxn];
int curp;
int res[maxn];
int counter[maxn];

clock_t tmr;

int in;
void dfs(int ppp) {
	in++;
	for(;ppp<n && counter[ppp] < curp; ppp++);

	if(ppp == n) {
		curres++;
		if(curp == 0) return ;
		for(int i=0; i<curp; i++) res[i] = curv[i];
		sort(res, res+curp);
		for(int i=0; i<curp; i++) printf("%d ", res[i]);
		puts("");
		return ;
	}
	int p = order[ppp];

	for(int i=0;i<sz(gv[p]); i++) {
		int& t = counter[posInOrder[gv[p][i]]];
		t++;
	}
	curv[curp++] = p;
	dfs(ppp+1);
	curp--;
	for(int i=0;i<sz(gv[p]); i++) {
		int& t = counter[posInOrder[gv[p][i]]];
		t--;
	}
	if(curres == k) return ;

	dfs(ppp+1);
}

int main() {
//	srand(time(NULL));
	int T; scanf("%d", &T);
//	T=20;
	for(;T--;) {
		scanf("%d %d %d", &n, &m, &k);
		for(int i=0; i<n; i++) gv[i].clear();
//		n = 10000; m=  20000; k = 50;

		for(int i=0; i<n; i++) {
			scanf("%d", &profit[i]);
//			profit[i] = i;
			order[i] = i;
		}
		sort(order, order+n, mycmp);
		for(int i=0; i<n; i++) posInOrder[order[i]] = i;
		for(int i=0; i<m; i++) {
			int a, b;
			scanf("%d %d", &a, &b);
//			a = rand()%n; b = rand()%n;
			gv[a].push_back(b);
			gv[b].push_back(a);
		}

		curres = 0;
		curp = 0;
		dfs(0);
		puts("");
		assert(curres == k);
//		Eo(in);
	}
//	Eo(tmr);
//	Eo(double(tmr)/CLOCKS_PER_SEC);

	return 0;
}
