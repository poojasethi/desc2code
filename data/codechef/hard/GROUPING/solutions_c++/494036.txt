#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>

#include <iostream>
#include <algorithm>
#include <string>

#include <vector>
#include <set>
#include <map>
#include <queue>

using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PI;
typedef vector<PI>::iterator VPIT;
typedef VI::iterator VIT;

#define PB(x) push_back(x)
#define MP(x,y) make_pair(x,y)
#define F first
#define S second
#define SET(v,x) memset(v,x,sizeof v)
#define FOR(i,a,b) for(int _n(b),i(a);i<_n;i++) 
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define SORT(v) sort(ALL(v))
#define SZ(v) int(v.size())
#define SI ({int x;scanf("%d",&x);x;})

#define MX 10005
vector<PI> chefs;
set<int> S[MX];
int n,m,k;
int c[MX];
int cur[MX],curs;

void haha(int ci)
{
	if(k<=0) return;
	
	if(ci==n)
	{
		VI pr;
		for(int i=curs-1;i>=0;i--) pr.PB(cur[i]);
		SORT(pr);
		for(VIT i=pr.begin();i!=pr.end();i++) printf("%d ",*i);
		puts("");
		k--;
		return;
	}
	
	int v = chefs[ci].S;
		
	bool ok = true;
		
	REP(i,curs)
	{
		int w = cur[i];
		if(S[w].count(v)==0){ ok=false; break; }
	}
		
	if(ok)
	{
		cur[curs++]=v;
		haha(ci+1);
		curs--;
		if(k<=0) return;
	}
	
	haha(ci+1);
}

void solve()
{	
	for(int i=0;i<n;i++)
	{
		if(k<=0) break;
		int u = chefs[i].S;
		curs=0; cur[curs++]=u;
		haha(i+1);
	}	
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("in1.in","r",stdin);
	#endif
	
	int t=SI;
	
	while(t--)
	{
		n=SI; m=SI; k=SI;
		REP(i,n) c[i]=SI;
		REP(i,n) S[i].clear();
		REP(i,m)
		{
			int u = SI, v = SI;
			S[u].insert(v);
			S[v].insert(u);
		}
		chefs.clear();
		REP(i,n) chefs.PB(MP(c[i],i));
		sort(chefs.rbegin(),chefs.rend());
		solve();
		puts("");
	}
			
	return 0;
}

