/*
 TASK: GROUPING
 LANG: C++
 by pasin30055
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

#define MAX_N 10005
#define MAX_M 50005

using namespace std;

int t,iii;
int n,m,k;
int i,j;
int u,v;
int deg[MAX_N];
int rev[MAX_N];
int answer[MAX_N],enans;
int cntans;
bool is[MAX_N];
pair<int,int> c[MAX_N];
vector<int> V[MAX_N];
vector<int> tmp;

void findans(vector<int> W)
{
	if(cntans>=k)
		return ;
	if(W.empty())
	{
		cntans++;
		for(i=0;i<n;i++)
		{
			if(is[i])
				printf("%d ",i);
		}
		printf("\n");
	}
	else
	{
		vector<int> fW;
		vector<int>::iterator it1,it2,it3;
		for(it1=W.begin();it1!=W.end();it1++)
		{
			it2=it1;
			it2++;
			it3=V[(*it1)].begin();
			fW.clear();
			while(it2!=W.end()&&it3!=V[(*it1)].end())
			{
				if((*it2)==(*it3))
				{
					if((*it2)>(*it1))
					fW.push_back((*it2));
					it2++;
					it3++;
				}
				else if((*it2)<(*it3))
				{
					it2++;
				}
				else
				{
					it3++;
				}
			}
			answer[enans]=(*it1);
			/*printf("XX %d %d\nDD",(*it1),enans);
			for(it2=fW.begin();it2!=fW.end();it2++)
			{
				printf("%d ",(*it2));
			}
			printf("\n");*/
			is[c[answer[enans]].second]=1;
			enans++;
			findans(fW);
			enans--;
			is[c[answer[enans]].second]=0;
			//printf("YY %d\n",enans);
			if(cntans>=k)
				return ;
		}
		cntans++;
		/*
		for(i=0;i<enans;i++)
		{
			printf("%d ",answer[i]);
		}
		 */
		for(i=0;i<n;i++)
		{
			if(is[i])
				printf("%d ",i);
		}
		printf("\n");
		if(cntans>=k)
			return ;
	}
	return ;
}

int main()
{
	scanf("%d",&t);
	for(iii=0;iii<t;iii++)
	{
		scanf("%d %d %d",&n,&m,&k);
		for(i=0;i<n;i++)
		{
			scanf("%d",&c[i].first);
			c[i].first=-c[i].first;
			c[i].second=i;
		}
		for(i=0;i<n;i++)
		{
			deg[i]=0;
			V[i].clear();
		}
		sort(c,c+n);
		for(i=0;i<n;i++)
		{
			rev[c[i].second]=i;
		}
		for(i=0;i<m;i++)
		{
			scanf("%d %d",&u,&v);
			u=rev[u];
			v=rev[v];
			deg[u]++;
			V[u].push_back(v);
			deg[v]++;
			V[v].push_back(u);
		}
		for(i=0;i<n;i++)
		{
			sort(V[i].begin(),V[i].end());
		}
		enans=0;
		cntans=0;
		tmp.clear();
		for(i=0;i<n;i++)
		{
			tmp.push_back(i);
		}
		findans(tmp);
	}
	return 0;
}