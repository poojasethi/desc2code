//Author: Aman Choudhary
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <map>
#include <cassert>
#define mod  1000000007
#define PHI 1000000006
#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define S1(x) scanf("%llu",&x)
#define dholu -9999999999999LL
#define MAX 2200
using namespace std;
int n,m,k;
struct node
{
    int value;
    int index;
};
typedef struct node node;
vector <struct node> cost;
vector < vector <int> > s;
int ind[10009];
int position[10009];
int ax[10009];
vector < set <int> > ss;
vector <int> answer;

void print (vector <int> &s)
{
    int i,n=s.size();
    F (i, 0, n) {
        ax[i] = s[i];
        //printf ("%d ", s[i]);
    }
    sort (ax, ax+n);
    F (i, 0, n) {
        printf ("%d ", ax[i]);
    }
    printf ("\n");
}
bool operator<(struct node a, struct node b)
{
    if (a.value != b.value) {
        return a.value>b.value;
    }
    return a.index<b.index;
}

void dfs (int index, int flag)
{
    if (k == 0) {
        return;
    }
    if (index == n) {
        return;
    }
    if (flag == -1) {
        answer.push_back (ind[index]);
        dfs (index+1, 0);
        if (k != 0) {
            print (answer);
            k--;
        } else {
            return;
        }
        answer.pop_back();
        dfs (index+1, -1);
        return;
    }

    int i;
    bool ok = true;
    F (i, 0, answer.size()) {
        int xx = ind[index];
        if (ss[xx].find (answer[i]) == ss[xx].end()) {
            ok = false;
            break;
        }
    }

    if (ok) {
        answer.push_back (ind[index]);
        dfs (index+1, 0);
        if (k != 0) {
            print (answer);
            k--;
        } else {
            return;
        }
        answer.pop_back ();
    }
    dfs (index+1, 0);
}

int main()
{
   // freopen ("input.txt", "r", stdin);
    int tt;
    S (tt);

    while (tt--) {
        S (n);  S (m);  S (k);
        int i;
        cost.clear();       cost.resize (n);
        F (i, 0, n) {
            S (cost[i].value);
            cost[i].index = i;
        }

        s.clear();          s.resize (n);
        ss.clear();         ss.resize (n);

        sort (cost.begin(), cost.end());

        F (i, 0, cost.size()) {
            position[cost[i].index] = i;
            ind[i] = cost[i].index;
        }

        while (m--) {
            int x,y;
            S (x);  S (y);
            if (position[x] > position[y]) {
                swap (x, y);
            }
            s[x].pb (y);
            ss[y].insert (x);
        }

        F (i, 0, s.size()) {
            sort (s[i].begin(), s[i].end());
        }

        answer.clear();
        dfs (0, -1);
        printf ("\n");
    }


    return 0;
}
