//In the name of Allah
//
//
//////////////////////
// Program: 
// Written By Alireza Farhadi (LGM)
//////////////////////
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cctype>
#include <climits>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <utility>
#include <vector>
#include <bitset>
#include <deque>
#include <iomanip>
#include <complex>
#include <fstream>
#include <sstream>
//#include <map>
//#include <list>


using namespace std;

#if ( _WIN32 || __WIN32__ )
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

#define show(x) cerr<<((#x))<<" = "<<((x))<<" "<<endl
#define bit(a,b) (((a)>>(b))&1)
#define gcd __gcd
//#define endl '\n'
#define bcnt(x) ((__builtin_popcount(x)))
#define sz(x) ((int((x).size())))
#define sqr(x) ((((x))*((x))))

template<class T> inline void smn(T &a,const T &b){if(b<a) a=b;}
template<class T> inline void smx(T &a,const T &b){if(b>a) a=b;}
template<class T> inline T rev(const T & a){T _=a; reverse(_.begin(),_.end()); return _;}

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pie;

const double eps=1e-9;
const ld leps=1e-14;
const int MN=10000+100;
int cnt[MN];
int now[MN];
int value[MN];
int temp[MN];
vector <int> list[MN];
struct cmp
{
	bool operator () (const int & a,const int & b)
	{
		return value[a]>value[b];
	}
};
set <int,cmp> av;
int t=-1,n,m,k,p;
void shw()
{
	for (set<int,cmp>::iterator it=av.begin();it!=av.end();it++)
		cerr<<*it<<" ";
	cerr<<endl;
	int _;
	cin>>_;
}
void fn()
{
	//shw();
	if (av.empty())
	{
	//	show("H1");
	//	show(p);
		int t=now[p-1];
		p--;
		if (p==0)
		{
			for (int i=0;i<list[t].size();i++) cnt[list[t][i]]--;
			for (int i=0;i<n;i++) if (value[i]<value[t]) av.insert(i);
		}
		else
		{
			for (int i=0;i<list[t].size();i++) cnt[list[t][i]]--;
			int t2=now[p-1];
			//show(t2);
			for (int i=0;i<list[t2].size();i++)
			{
				int u=list[t2][i];
			//	cerr<<"u = "<<u<<" "<<cnt[u]<<endl;
				if (cnt[list[t2][i]]==p && value[list[t2][i]]<value[t])
					av.insert(list[t2][i]);
			}
		}
	//	shw();
	}
	while (!av.empty())
	{
		int t=*av.begin();
		now[p++]=t;
		av.clear();
		for (int i=0;i<list[t].size();i++)
		{
			cnt[list[t][i]]++;
			if (cnt[list[t][i]]==p && value[list[t][i]]<value[t])
				av.insert(list[t][i]);
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	if (t==-1) cin>>t;
	t--;
	cin>>n>>m>>k;
	p=0;
	av.clear();
	memset(cnt,0,sizeof(cnt));
	for (int i=0;i<n;i++) list[i].clear();
	for (int i=0;i<n;i++) cin>>value[i];
	for (int i=0;i<n;i++) av.insert(i);
	for (int i=0;i<m;i++)
	{
		int a,b; cin>>a>>b;
		list[a].push_back(b);
		list[b].push_back(a);
	}
	for (int i=0;i<k;i++)
	{
		fn();
		for (int j=0;j<p;j++) temp[j]=now[j];
		sort(temp,temp+p);
		for (int j=0;j<p;j++) cout<<temp[j]<<" ";
		cout<<endl;
	}
	if (t)
		cout<<endl;
	return t?main():0;
}
