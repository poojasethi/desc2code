
#include <algorithm>
#include <cstdio>
#include <vector>
#define MAXN 10000

using namespace std;

int N, M, K;
int c[MAXN];

vector <int> adj[MAXN];

int numFound;
vector <int> curGraph;

void dfs(int u) {
    curGraph.push_back(u);

    for(int i = 0; i < adj[u].size(); i++) {
        int v = adj[u][i];
        if(c[v] > c[u])
            continue;

        int j1 = 0, j2 = 0;
        while(j1 < curGraph.size() && j2 < adj[v].size()) {
            if(adj[v][j2] == curGraph[j1]) {
                j1++;
                j2++;
                continue;
            }
            if(c[adj[v][j2]] < c[curGraph[j1]])
                break;
            j2++;
        }
        if(j1 < curGraph.size())
            continue;

        dfs(v);
    }

    if(numFound >= K)
        return;
    numFound++;

    vector <int> res = curGraph;
    sort(res.begin(), res.end());
    printf("%d", res[0]);
    for(int i = 1; i < res.size(); i++)
        printf(" %d", res[i]);
    printf("\n");

    curGraph.pop_back();
}

int perm[MAXN];

bool cmp(int i, int j) {
    return c[i] > c[j];
}

int main() {
    int T;
    scanf("%d", &T);
    while(T--) {
        for(int i = 0; i < N; i++) {
            adj[i].clear();
        }

        scanf("%d%d%d", &N, &M, &K);
        for(int i = 0; i < N; i++)
            scanf("%d", &c[i]);
        for(int i = 0; i < M; i++) {
            int u, v;
            scanf("%d%d", &u, &v);
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        for(int i = 0; i < N; i++) {
            sort(adj[i].begin(), adj[i].end(), cmp);
            perm[i] = i;
        }
        sort(perm, perm + N, cmp);

        numFound = 0;
        curGraph.clear();
        for(int i = 0; i < N; i++) {
            dfs(perm[i]);
            if(numFound >= K)
                break;
        }
        printf("\n");
    }
}
