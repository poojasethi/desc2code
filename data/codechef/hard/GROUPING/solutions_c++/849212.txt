/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <complex>
#include <ctime>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <utility>

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef complex<double> point;

const int maxN = 10 * 1000 + 10;

int test,n,e,k;
int mark[maxN],cost[maxN];
vector <int> store;
vector <pii> Q;
vector <int> adj[maxN];

void go (int pos){
	
	if (pos==n){

		k--;
		
		vector <int> p = store; sort(p.begin(),p.end());

		for (int i=0; i<(int)p.size(); i++)
			cout << p[i]-1 << ' ';
		cout << endl;

		return;
	}

	if (k==0)
		return;

	int v = Q[pos].second;
	
	if (mark[v]<(int)store.size()){
		go(pos+1); 
		return;
	}

	store.push_back (v);

	for (int i=0; i<(int)adj[v].size(); i++){
		int tmp = adj[v][i];
		mark[tmp]++;
	}

	go (pos+1);

	store.pop_back();
	
	for (int i=0; i<(int)adj[v].size(); i++){
		int tmp = adj[v][i];
		mark[tmp] --;
	}

	if (k==0) return;

	go(pos+1);
}

int main(){
	
	ios_base::sync_with_stdio(false);

	cin >> test;

	for (int o=1; o<=test; o++){
		cin >> n >> e >> k;
		for (int i=1; i<=n; i++)
			adj[i].clear();
		for (int i=1; i<=n; i++)
			cin >> cost[i];
		for (int i=1; i<=e; i++){
			int x,y; cin >> x >> y;
			x++; y++;
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		Q.clear();
		for (int i=1; i<=n; i++) Q.push_back (pii(cost[i],i));
		sort (Q.begin(),Q.end());
		reverse(Q.begin(),Q.end());
		memset (mark,false,sizeof mark);
		go(0);
		cout << endl;
	}

	return 0;
}
