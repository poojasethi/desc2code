#pragma warning(disable:4786)
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<stack>
#include<cstdio>
#include <ctime>


using namespace std;

#define MEM(a,b) memset(a,(b),sizeof(a))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define MIN(a,b)  ((a) < (b) ? (a) : (b))
#define istr(S) istringstream sin(S)
#define MP make_pair
#define pb push_back
#define inf 1000000000
#define maxh 200003
//typedef long long  LL;
//typedef __int64 LL;

typedef pair<int,int> pi;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<double> vd;
typedef vector<pi> vpi;

pi all[10005];
int flag[10005];
int now[10005],n,m,K;
 
vi allh[maxh];

void solve(int pos,int sz)
{
	int i,j,k;

	if(!K) return ;

	if(pos==n)
	{
		vi ans;
		for(i=0;i<sz;i++)
			ans.pb(all[now[i]].second);
		sort(ans.begin(),ans.end());
		for(i=0;i<ans.size();i++)
		{
			if(i) printf(" ");
			printf("%d",ans[i]);
		}
		puts("");
		--K;
		return ;
	}

	int maxe=sz*(sz+1)/2;

	for(i=pos;maxe<=m && i<n && K;i++)
	{
		int ok=1;
		for(j=0;j<sz && ok;j++)
		{
			int x=now[j];
			int a=all[x].second,b=all[i].second;
			if(a>b) swap(a,b);
			int v=a*20001+b;
			int hash=(a*20001+b)%maxh;

			for(k=0;k<allh[hash].size();k++)
			{
				if(allh[hash][k]==v) break;
			}

			if(k==allh[hash].size()) ok=0;
			//if(S.find(MP(a,b))==S.end()) ok=0;
		}

		if(!ok) continue;
		
		now[sz]=i;
		solve(i+1,sz+1);
	}

	solve(n,sz);
}

int main()
{
	int i,j,k,tests,cs=0;

	scanf("%d",&tests);
	while(tests--)
	{
		scanf("%d%d%d",&n,&m,&K);

		for(i=0;i<maxh;i++)
		allh[i].clear();

		//S.clear();

		for(i=0;i<n;i++)
		{
			scanf("%d",&k);
			all[i]=MP(k,i);
		}

		//puts("h");

		sort(all,all+n);
		reverse(all,all+n);

		for(i=0;i<m;i++)
		{
			int a,b;
			scanf("%d%d",&a,&b);
			if(a>b) swap(a,b);
			//printf("=%d %d\n",a,b);
			int hash=(a*20001+b)%maxh;
			//printf("%d\n",hash);
			allh[hash].pb(a*20001+b);
		//	S[MP(a,b)]=S[MP(b,a)]=1;
		}

		solve(0,0);
		puts("");
	}

	return 0;
} 


