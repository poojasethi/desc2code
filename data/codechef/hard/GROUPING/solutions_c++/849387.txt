/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <complex>
#include <ctime>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <utility>

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef complex<double> point;

const int maxN = 10 * 1000 + 10;

bool vis[maxN];
int test,n,e,k,tedad;
int mark[maxN],cost[maxN];
vector <pii> Q;
vector <int> adj[maxN];

inline void go (int pos){

	while (pos<n && mark[Q[pos].second]<tedad) pos++;

	if (pos==n){
		k--;
		for (int i=1; i<=n; i++) if (vis[i])
			printf ("%d " , i-1); 
		printf ("\n");
		return;
	}

	if (k==0)
		return;

	int v = Q[pos].second;

	vis[v] = true; tedad++;

	for (int i=0; i<(int)adj[v].size(); i++)
		mark[adj[v][i]]++;

	go (pos+1);

	vis[v] = false; tedad--;
	
	for (int i=0; i<(int)adj[v].size(); i++)
		mark[adj[v][i]]--;

	if (k==0) return;

	go(pos+1);
}

int main(){
	
	ios_base::sync_with_stdio(false);

	scanf ("%d" , &test);

	for (int o=1; o<=test; o++){
		scanf ("%d%d%d" , &n, &e, &k);
		for (int i=1; i<=n; i++)
			adj[i].clear();
		for (int i=1; i<=n; i++)
			scanf ("%d " , &cost[i]);
		for (int i=1; i<=e; i++){
			int x,y;
			scanf ("%d%d" , &x, &y);
			x++; y++;
			if (cost[x]<cost[y]) swap(x,y);
			adj[x].push_back(y);
		}
		Q.clear();
		for (int i=1; i<=n; i++)
			Q.push_back (pii(cost[i],i));
		sort (Q.begin(),Q.end());
		reverse(Q.begin(),Q.end());
		go(0);
		printf ("\n");
	}

	return 0;
}
