#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
using namespace std;
#define MAXN 200005

long long tree[MAXN],A[MAXN],B[MAXN],ans[MAXN];

struct val{
    int idx;
    int sign;
    int value;
};

vector <val> pos[MAXN];

long long read(int idx)
{  long long sum=0;
   while(idx>0)
   {
    sum+=tree[idx];
    idx-=(idx&-idx);
   }
   return sum;
}

void update(int idx,int val,int n)
{
   while(idx<=n)
   {
     tree[idx]+=val;
     idx+=(idx&-idx);
   }
}

int main()
{
    int n,q,m,i,j,id;
    long long inv_count=0;
    memset(tree,0,sizeof(tree));
    cin>>n>>q;
    for(i=0;i<n;i++)
    {
        scanf("%lld",&A[i]);
        B[i]=A[i];
    }
    sort(B,B+n);
    m=unique(B,B+n)-B;
    for(i=0;i<n;i++)
    {
        id=lower_bound(B,B+m,A[i])-B;
        A[i]=id+1;
    }
    inv_count=0;
    for(i=0;i<n;i++)
    {
        inv_count+=(i-read(A[i]));
        update(A[i],1,n);
    }
    int idx1,idx2;
    for(i=0;i<q;i++)
    {
        cin>>idx1>>idx2;
        idx1--;idx2--;
        if(A[idx1]==A[idx2]) continue;
        int x= A[idx1],y=A[idx2];
        val Q;
        Q.sign=1;
        Q.idx=i;
        Q.value=y;
        pos[idx1].push_back(Q);
        Q.sign=-1;
        pos[idx2].push_back(Q);
        Q.sign=1;
        Q.value=x;
        pos[idx2].push_back(Q);
        Q.sign=-1;
        pos[idx1].push_back(Q);
        ans[i]=1;           //1 because during updation
    }
    //update answer due to prefix
    memset(tree,0,sizeof(tree));
    for(i=0;i<n;i++)
    {
        for(j=0;j<pos[i].size();j++)
        {
            ans[pos[i][j].idx] += (i - read(pos[i][j].value)) * pos[i][j].sign;
        }
        update(A[i],1,n);
    }
    //update answer due to suffix
    memset(tree,0,sizeof(tree));
    for(i=n-1;i>=0;i--)
    {
        for(j=0;j<pos[i].size();j++)
        {
            ans[pos[i][j].idx]+=((read(pos[i][j].value-1))*pos[i][j].sign);
        }
        update(A[i],1,n);
    }
    for(i=0;i<q;i++)
    {
        printf("%lld\n",inv_count+ans[i]);
    }
    return 0;
}
