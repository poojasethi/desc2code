#include <iostream>
#include <cstdio>
#include <cstring>
#include <utility>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define sz 200009

int n,m;
int arr[sz+1], brr[sz+1], fwt[sz+1], ans[sz+1];
long long add;
vector<pair<int, int> > prefix[sz+1], suffix[sz+1];

void solve_prefix() {
	for(int i=1;i<=n;i++) {
		for(int j=arr[i];j>0;j=(j&(j-1))) ++fwt[j];
		for(int q=0;q<prefix[i].size();q++) {
			for(int j=prefix[i][q].first; j<=sz;j=(j|(j-1))+1) {
				ans[abs(prefix[i][q].second)] += (prefix[i][q].second/abs(prefix[i][q].second)) * fwt[j];
			}
		}
	}
}

void solve_suffix() {
	for(int i=0;i<=sz;i++) fwt[i] = 0;
	for(int i=n;i>0;i--) {
		for(int j=arr[i];j<=sz;j=(j|(j-1))+1) ++fwt[j];
		for(int q=0;q<suffix[i].size();q++) {
			for(int j=suffix[i][q].first;j>0;j=(j&(j-1))) {
				ans[abs(suffix[i][q].second)] += (suffix[i][q].second / abs(suffix[i][q].second)) * fwt[j];
			}
		}
	}
}

int main() {
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) { scanf("%d",&arr[i]); brr[i] = arr[i]; };
	sort(brr+1, brr+n+1);
	for(int i=1;i<=n;i++) arr[i] = lower_bound(brr+1, brr+n+1, arr[i]) - brr;
	for(int i=1;i<=m;i++) {
		int l,r; scanf("%d%d",&l,&r); 
		if(l>r) swap(l,r);
		if(arr[l]>arr[r] || arr[l]<arr[r]) ans[i]++;
		prefix[l-1].push_back(make_pair(arr[l]+1, -i));
		prefix[r-1].push_back(make_pair(arr[r]+1, -i));
		suffix[l+1].push_back(make_pair(arr[l]-1, -i));
		suffix[r+1].push_back(make_pair(arr[r]-1, -i));
		
		prefix[l-1].push_back(make_pair(arr[r]+1, i));
		prefix[r-1].push_back(make_pair(arr[l]+1, i));
		suffix[l+1].push_back(make_pair(arr[r]-1, i));
		suffix[r+1].push_back(make_pair(arr[l]-1, i));
	}
	for(int i=1;i<=n;i++) {
		add += i-1;
		for(int j=arr[i]; j>0; j=(j&(j-1))) add -= fwt[j];
		for(int j=arr[i]; j<=sz;j=(j|(j-1)) +1 ) ++fwt[j];
	}
	for(int i=0;i<=sz;i++) fwt[i] = 0;
	solve_prefix(); solve_suffix();
	for(int i=1;i<=m;i++) printf("%lld\n",add+ans[i]);
	return 0;
}