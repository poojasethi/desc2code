#include <vector>
#include <string>
#include <cstring>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <ctime>
using namespace std;
#define FOR(i,a,b) for(int i=a; i<=b; i++)
#define REP(i,a,b) for(int i=a; i>=b; i--)
#define FORAD(i,u) for(int i=0; i < (int)u.size(),i++)
#define BUG(x) cout << x << endl
#define ll long long
#define fi first
#define sd second
#define pb push_back
#define two(i) 1 << i
#define sz(x) (int)x.size()
#define e 1e-12
#define bit(s,i) ((s >> (i-1)) & 1)
#define Nmax 200100
const double pi = acos(-1);
typedef vector<int> vi ;
typedef pair<int,int> pii ;


pii p[2*Nmax], aa[Nmax];

ll sum = 0;

int a[Nmax], x[Nmax], n, dem, m, t[Nmax], Count, d[Nmax], c[Nmax], f1[Nmax], f2[Nmax], g1[Nmax], g2[Nmax];


void update(int i, int j) {
    while (i <= n) {
        t[i] += j;
        i += i & (- i);
    }
}

int get_1_i(int i){
    int res = 0;
    while (i) {
        res += t[i];
        i -= i & (-i);
    }
    return res;
}

int get(int i, int j) {
    return get_1_i(j) - get_1_i(i - 1);
}

int Find(int u){
    int l = 1, r = dem;
    while (l <= r) {
        int mid = (l + r)/2;
        if (x[mid] == u) return mid;
        if (x[mid] < u) l = mid + 1; else r = mid - 1;
    }
}

void init() {
    FOR(i, 1, n) x[i] = a[i];
    sort(x + 1, x + n + 1);
    dem = 0;
    FOR(i, 1, n) if (i == 1 || x[i] != x[i - 1]) x[++dem] = x[i];
    FOR(i, 1, n) a[i] = Find(a[i]);

    sum = 0;
    FOR(i, 1, n) t[i] = 0;
    REP(i, n, 1) {
        sum += get_1_i(a[i] - 1);
        update(a[i], 1);
    }

}

void init_2() {
    Count = 0;
    FOR(i, 1, m) {
        if (d[i] > c[i]) swap(d[i], c[i]);
        if (c[i] == d[i] || a[d[i]] == a[c[i]]) continue;
        p[++Count].fi = a[d[i]]; p[Count].sd = i;
        p[++Count].fi = a[c[i]]; p[Count].sd = i;
    }
    sort(p + 1, p + Count + 1);

    FOR(i, 1, n) {
        aa[i].fi = a[i];
        aa[i].sd = i;
    }
    sort(aa + 1, aa + n + 1);

    FOR(i, 1, n) t[i] = 0;
}

void solve() {


    int v = 1;
    FOR(i, 1, Count) {
        while (v <= n && aa[v].fi < p[i].fi) {
            update(aa[v].sd, 1);
            v++;
        }
        int u = p[i].sd;
        if (p[i].fi == a[d[u]]) f1[u] = get(d[u] + 1, c[u] - 1); else g1[u] = get(d[u] + 1, c[u] - 1);
    }
    v = 1;
    FOR(i, 1, n) t[i] = 0;
    FOR(i, 1, Count) {
        while (v <= n && aa[v].fi <= p[i].fi) {
            update(aa[v].sd, 1);
            v++;
        }
        int u = p[i].sd;
        if (p[i].fi == a[d[u]]) f2[u] = get(d[u] + 1, c[u] - 1) - f1[u]; else g2[u] = get(d[u] + 1, c[u] - 1) - g1[u];
    }

    //FOR(i, 1, m) cout << f1[i] << ' ' << f2[i] << ' ' << g1[i] << ' ' << g2[i] << endl;
    FOR(i, 1, m) if (c[i] == d[i] || a[d[i]] == a[c[i]]) printf("%lld\n", sum); else {
        f2[i] = c[i] - d[i] - 1 - f2[i] - f1[i];
        g2[i] = c[i] - d[i] - 1 - g2[i] - g1[i];
        ll x = sum - f1[i] + f2[i] - g2[i] + g1[i];
        if (a[d[i]] < a[c[i]]) x += 1; else x -= 1;
        printf("%lld\n", x);
    }

}

int Ran(int x) {
    return (ll)rand() * rand() % x + 1;
}

void make(){
    freopen("in.inp","w",stdout);
    n = Ran(100000) + 100000;
    m = Ran(100000) + 100000;
    cout << n << ' ' << m << endl;
    FOR(i, 1, n) cout << Ran(1000000000) << ' '; cout << endl;
    FOR(i, 1, m) {
        int u = Ran(n), v= Ran(n);
        if (u > v) swap(u, v);
        cout << u << ' ' << v << endl;
    }
}

int main() {
    //make();
   //  freopen("in.inp","r",stdin);
    // freopen("1.out","w",stdout);
    cin >> n >> m;
    FOR(i, 1, n) scanf("%d", &a[i]);
    FOR(i, 1, m) scanf("%d%d", &d[i], &c[i]);

    init();

    init_2();
    solve();
     return 0;
}
