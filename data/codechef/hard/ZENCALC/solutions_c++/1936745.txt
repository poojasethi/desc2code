#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
#include <map>
#include <set>
 
using namespace std;
 
const int MAXN = 2005;
string op = "!^/*+-";
int prior[] = {-6, -5, -4, -3, -2, -1};
 
int n;
int type[MAXN];
int v[MAXN];
int fact[MAXN];
char s[200];
 
void gcd(long long a, long long b, int &x0, int &y0)
{
 	if (!a)
 	{
 	 	y0 = 1; x0 = 0;
 	 	return;
 	}
 	int x1, y1;
 	gcd(b%a, a, x1, y1);
 	x0 = y1 - (b/a)*x1;
 	y0 = x1;
}
 
long long divide(int A, int B)
{
	if (!A && !B) return (1<<31);
	if (!B) return 1LL<<50;
 
 	long long b = 1LL<<32;
	while (!(B%2))
	{
		B/=2;
		if (A%2) return 1LL<<50;
		A/=2;
		b/=2;
	}
 
	int x0, y0;
	gcd(abs(1LL*B), b, x0, y0);
	if (B<0) x0=-x0;
 
	x0 *= A;
	x0 -= ((x0+(1LL<<31))/b)*b;
 
	return x0;
}
 
long long modpow(int A, int B)
{
	if (B == 0) return 1;
	if (A == 0) return B>0?0:(1LL<<50);
 
	long long n = abs(1LL*B);
	int res = 1;
 
	while (n > 0)
		if (n & 1)
			res *= A,
			n--;
		else
			A *= A,
			n/=2;
 
	if (B > 0) return res;
	return divide(1, res);
}
 
void main2()
{
 	scanf("%d", &n);
 	for (int i = 0; i < n; i++)
 	{
 		scanf("%s", s);
 		if (strlen(s)>1 || isdigit(s[0]))
 			type[i] = 1,
 			v[i] = atoi(s);
 		else
 		{
 			type[i] = 0;
 			v[i] = prior[op.find(s[0])];
 		}
   }
 
	while (true)
	{
	 	int p = -1, t = 0;
 
		for (int i = 0; i < n-1; i++)
			if (!type[i] && v[i] == -6 && type[i+1])
			{
				long long x = v[i+1];
				int res;
 
				if (abs(x) >= 36) res = 0;
				else
				{
					res = fact[abs(x)];
					if (x < 0 && (x%2))
						res = -res;
				}
 
				printf("%d ! %lld -1 %d\n", i+1, x, res);
 
				for (int j = 0; j < i; j++)
					v[t] = v[j],
					type[t++] = type[j];
				v[t] = res;
				type[t++] = 1;
				for (int j = i+2; j < n; j++)
					v[t] = v[j],
					type[t++] = type[j];
				n = t;
				p=0;
				break;
			}
 
		if (p!=-1) continue;
 
		for (int i = 0; i < n-3; i++)
			if (!type[i] && type[i+1] && type[i+2] && type[i+3])
				if (p==-1 || v[p]>v[i])
					p = i;
 
		if (p == -1)
			for (int i = 0; i < n-2; i++)
				if (!type[i] && type[i+1] && type[i+2])
					if (p==-1 || v[p]>v[i])
						p = i;
 
		if (p == -1) break;
 
		for (int j = 0; j < p; j++)
			v[t] = v[j],
			type[t++] = type[j];
 
		int A = v[p+1], B = v[p+2];
 
		if (v[p] == -5)
		{
			long long powres = modpow(A, B);
 
			if (powres == 1LL<<50)
			{
			 	puts("NOT OK"); n = 0;
			 	break;
			}
 
 
			v[t] = powres;
			printf("%d ^ %d %d %d\n", p+1, A, B, v[t]);
			type[t++] = 1;
		}
		else
		if (v[p] == -4)
		{
			long long divres = divide(A, B);
 
			if (divres == 1LL<<50)
			{
			 	puts("NOT OK"); n = 0;
			 	break;
			}
 
			v[t] = divres;
			printf("%d / %d %d %d\n", p+1, A, B, v[t]);
			type[t++] = 1;
		}
		else
		if (v[p] == -3)
		{
			v[t] = A*B;
			printf("%d * %d %d %d\n", p+1, A, B, v[t]);
			type[t++] = 1;
		}
		else
		if (v[p] == -2)
		{
			v[t] = A+B;
			printf("%d + %d %d %d\n", p+1, A, B, v[t]);
			type[t++] = 1;
		}
		else
		if (v[p] == -1)
		{
			v[t] = A-B;
			printf("%d - %d %d %d\n", p+1, A, B, v[t]);
			type[t++] = 1;
		}
 
		for (int j = p+3; j < n; j++)
			v[t] = v[j],
			type[t++] = type[j];
 
		n = t;
	}
 
	if (n > 1||(n==1&&!type[0])) puts("NOT OK");
	else if (n == 1) puts("OK");
}
 
int main()
{
	fact[0] = 1;
	for (int i = 1; i <= 36; i++)
		fact[i] = fact[i-1]*i;
 
	int test;
	scanf("%d", &test);
	for (; test--;)
		main2();
 
	return 0;
}