#include<iostream>
#include<algorithm>
#include<math.h>
#include<vector>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define mod 19101995
using namespace std;
vector<int>edge[100005],child[100005];
int dp[100005][21],vis[100005];
int n,logq;
void dfs(int a)
{
int i;
vis[a]=1;
for(i=0;i<edge[a].size();i++)
  if(vis[edge[a][i]]==0)
    {
dfs(edge[a][i]);
child[a].push_back(edge[a][i]);
}


}
long long solve(int x,int cnt)
{
if(cnt>logq)return 0;
if(dp[x][cnt]!=-1)
  return dp[x][cnt];
int no=child[x].size();
if(child[x].size()==0)
  {
dp[x][cnt]=1;
return 1;
}
int left[no],right[no];
dp[x][cnt]=0;
long long g=1;int i;
for(i=0;i<no;i++)
  {
g=g*solve(child[x][i],cnt+1);
g=g%mod;
left[i]=g;
}
g=1;
for(i=no-1;i>=0;i--)
  {
g=g*solve(child[x][i],cnt+1);
g=g%mod;
right[i]=g;
}
for(i=0;i<no;i++)
  {
g=1;
if(i)
  g*=left[i-1],g%=mod;
if(i<(no-1))
  g*=right[i+1],g%=mod;
g=g*solve(child[x][i],cnt),g%=mod;
dp[x][cnt]+=g,dp[x][cnt]%=mod;
}
return dp[x][cnt];
}
int main()
{
  int x,y;
  scanf("%d",&n);
  for(x=0;x<n;x++)
    vis[x]=0;
  memset(dp,-1,sizeof(dp));
  logq=log(n)/log(2);
  n--;
  while(n--)
    {
      scanf("%d%d",&x,&y);
      x--;y--;
      edge[x].push_back(y);
      edge[y].push_back(x);
    }
  dfs(0);
  printf("%lld\n",solve(0,0));
  return 0;
}




