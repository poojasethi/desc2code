// waMachine
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
const int mod = 19101995;
const int MAX = 100002;
vector<int> G[MAX];
int dp[MAX][18];
vector<int> child[MAX];
int n,h;
void dfs(int u,int par){
  for(int i=0;i<G[u].size();i++){
    int v = G[u][i];
    if(v != par){
      dfs(v,u);
      child[u].push_back(v);
    }
  }
}
int solve(int u,int c){
  if(c > h) return 0;
  int cnt = child[u].size();
  if(dp[u][c] != -1) return dp[u][c];
  if(cnt==0) return 1;
  vector<int> lft(cnt),rgt(cnt);
  ll res = 0;
  ll pr = 1;
  for(int i=0;i<cnt;i++){
   pr = (pr*solve(child[u][i],c+1))%mod;
   lft[i] = pr;
  } // assumign current edge as a light edge from left
  pr = 1;
  for(int i=cnt-1;i>=0;i--){
   pr = (pr*solve(child[u][i],c+1))%mod;
   rgt[i] = pr;
  } // assumign current edge as a light edge from right
  for(int i=0;i<cnt;i++){
    pr = 1;
    if(i!=0) pr = (pr*lft[i-1])%mod;
    if(i<cnt-1) pr = (pr*rgt[i+1])%mod;
    pr = (pr*solve(child[u][i],c))%mod;
    res = (res+pr)%mod;
  } // now assuming current edge as heavy edge
  dp[u][c] = res;
  return res;
}
int main(){
  int a,b;
  scanf("%d",&n);
  h = (int)log2(n);
  for(int i=0;i<n-1;i++){
    scanf("%d %d",&a,&b);
    a-- ; b--;
    G[a].push_back(b);
    G[b].push_back(a);
  }
  dfs(0,-1);
  memset(dp,-1,sizeof dp);
  int res = solve(0,0);
  printf("%d\n",res);
  return 0;
}
