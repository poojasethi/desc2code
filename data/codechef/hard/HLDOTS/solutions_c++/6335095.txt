/*
	Algorithm:
	Date:
*/
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
using namespace std;

typedef long long LL;
typedef double DB;

#define PII pair<int,int>
#define FI first
#define SE second
#define PB push_back
#define MP make_pair

#define INF 0x7f7f7f7f
#define MAXN 100005
#define mo 19101995

inline char _getchar()
{
    char ch;
    for (ch = getchar(); ch <= 32; ch = getchar());
    return ch;
}

template <class T> inline void read(T&x)
{
    bool f = false; char ch;
    for (ch = getchar(); ch <= 32; ch = getchar());
    if (ch == '-') f = true, ch = getchar();
    for (x = 0; ch > 32; ch = getchar()) x = x * 10 + ch - '0';
    if (f) x = -x;
}

template <class T> inline void read(T&x, T&y)
{
    read(x);
    read(y);
}

template <class T> inline void read(T&x, T&y, T&z)
{
    read(x);
    read(y);
    read(z);
}

template <class T> inline void write(T x)
{
    if (x < 0) putchar('-'), x = -x;
    if (x < 10)
        putchar(x + '0');
    else
        write(x / 10), putchar(x % 10 + '0');
}

template <class T> inline void write_(T x)
{
    write(x);
    putchar(' ');
}

template <class T> inline void writeln(T x)
{
    write(x);
    puts("");
}

template <class T> inline void writeln(T x, T y)
{
    write_(x);
    writeln(y);
}

template <class T> inline void writeln(T x, T y, T z)
{
	write_(x);
    write_(y);
    writeln(z);
}

//----------------I/O Template-------------------


int n, m;
struct edge{
	int loc, next;
}e[MAXN << 1];
int h[MAXN], tot;
void addedge(int x, int y)
{
	e[tot].loc = y; e[tot].next = h[x]; h[x] = tot ++;
	e[tot].loc = x; e[tot].next = h[y]; h[y] = tot ++;
}

LL dp[MAXN][30];//s[MAXN][30];
LL sl[MAXN], sr[MAXN];
vector <int> child; int chsize;


void dfs(int u, int fa)
{
	for (int i = h[u]; ~i; i = e[i].next)
		if (e[i].loc != fa)
			dfs(e[i].loc, u);
	child.clear();
	for (int i = h[u]; ~i; i = e[i].next)
		if (e[i].loc != fa)
			child.push_back(e[i].loc);
	chsize = child.size();
	if (chsize == 0)
	{
		for (int i = 0; i <= m; i ++) dp[u][i] = 1;
	}
	else {
		for (int j = 0; j <= m; j ++)
		{
			sl[0] = 1;
			for (int i = 1; i <= chsize; i ++) sl[i] = sl[i - 1] * dp[child[i - 1]][j - 1] % mo;
			sr[chsize + 1] = 1;
			for (int i = chsize; i >= 1; i --) sr[i] = sr[i + 1] * dp[child[i - 1]][j - 1] % mo;
			for (int i = 1; i <= chsize; i ++)
				dp[u][j] = (dp[u][j] + sl[i - 1] * sr[i + 1] % mo * dp[child[i - 1]][j]) % mo; 
		}
	}
	//s[u][0] = dp[u][0];
	//for (int i = 1; i <= m; i ++) s[u][i] = s[u][i - 1] + dp[u][i];
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
	read(n); m = log2(n);
	memset(h, 255, sizeof(h));
	for (int i = 1; i < n; i ++)
	{
		int x, y;read(x, y);
		addedge(x, y);
	}
	dfs(1, 0);
	writeln(dp[1][m]);
	return 0;
}
