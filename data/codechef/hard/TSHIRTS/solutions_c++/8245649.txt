#include <bits/stdc++.h>

#define LLI long long  int
#define LLU long long unsigned int
#define LI  long int
#define LU  long unsigned

#define MIN(a,b) ((b)^(((a)^(b))&-((a)<(b))))
#define BUG printf("BUGGEeee");
#define PRINT(n) printf("%d\n",n);
#define MOD 1000000007
#define POWER2(v) (v && !(v & (v - 1)))
#define PA pair<int,int>
#define PB pair<PA,int>
#define MP(a,b) make_pair(a,b)
#define PUS(x) push_back(x)


#define MAX_VAL 1000005
#define MAX_INT 999999999
#define MIN_INT -999999999


using namespace std;




bool compare(PA lhs,PA rhs)
{
	if(lhs.first<rhs.first)
	{
		return true;
	}
	return false;
}

LLI MAX(LLI a,LLI b)
{
	if(a>b)return a;
	return b;
}

LLI GCD(LLI a,LLI b)
{
	LLI x=MAX(a,b);
	LLI y=MIN(a,b);
	if(x%y==0)
	{
		return y;
	}
	else
	{
		return GCD(x%y,y);
	}

}


long long fast_pow(int a,int n)
{
    long long result = 1;
    long long power = n;
    long long value = a;
    while(power>0)
    {
        if(power&1)
            {result = result*value;
            result = result;}
        value = value*value;
        value = value;
        power /= 2;
        //power >>= 1;
    }
    return result;
}


int pow_k(LLI N,LLI K)
{
	int count=0;
	while(N>1)
	{
		N/=K;
		count++;
	}
	return count;
}


int count_bit(int N)
{
	int count=0;
	for(int i=0;i<32;i++)
	{
		if(N&(1<<i))
		{
			count++;
		}
	}
	return count;
}


const int max_val=1<<10;
LLI dp[max_val][101]={0};
vector<int> tshirt[101];

int allmask;

LLI solve(int mask,int num)
{
	if(mask==allmask)return 1;

	if(num>100)return 0;

	if(dp[mask][num]!=-1)return dp[mask][num];

	//if not included
	LLI ways=solve(mask,num+1);

	//if included
	//cout<<tshirt[num].size()<<" "<<num<<endl;
	for(int i=0;i<tshirt[num].size();i++)
	{
		if(mask&(1<<tshirt[num][i]))continue;
		else 
			{ways+=solve(mask|(1<<tshirt[num][i]),num+1);
		//cout<<ways<<endl;
		ways%=MOD;}
	}
	dp[mask][num]=ways%MOD;
	return dp[mask][num];
}

void init()
{

	for(int i=0;i<max_val;i++)
	{
		for(int j=0;j<101;j++)
		{
			
			dp[i][j]=-1;
			//TSHIRT[i]=-1;
		}
	}
	for(int i=0;i<101;i++)
	{
		tshirt[i].clear();
	}
	
}




int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		init();

		int N;
		cin>>N;
		string s;
		getline(cin,s);
		for(int i=0;i<N;i++)
		{
			getline(cin,s);
			//cout<<s<<endl;
			string w;
			int num;
			for(int j=0;s[j];j++)
			{
				if(s[j]==' ')
				{
					istringstream ss(w);
					ss>>num;
					w="";
					tshirt[num].push_back(i);
					//cout<<num<<endl;
				}
				else
				{
					w+=s[j];
				}

			}
			istringstream ss(w);
			ss>>num;
			w="";
			tshirt[num].push_back(i);
			//cout<<num<<endl;
		}
		allmask=(1<<N)-1;
		//cout<<allmask;
		LLI ways=solve(0,1);
		cout<<ways<<endl;
	}
	return 0;
}