#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

int N, K;
int T = 1;

// This is input data - each shirt is here
struct Shirt
{
  int   persons[10];  // ids [1, 10] of persons, sorted
  int   count;        // number of persons having the tshirt
};
Shirt shirts[100 + 2];

int allMask = 0; // The mask representing all persons having a shirt
static const int maxPersonCombinations = (1 << 10) + 1;

long long table[maxPersonCombinations][100 + 2];

//long long debugIterations = 0;

long long solve(int mask, int shirt)
{
  long long &tableVal = table[mask][shirt];

  if(shirt > 100)
  {
    return tableVal = (mask == allMask) ? 1 : 0; // Note that we don't really need to save it into the table, right?
  }

  if(tableVal != -1)
    return tableVal;

  //++debugIterations;

  // tackle the case when this shirt is not selected
  long long result = solve(mask, shirt + 1);

  const Shirt &sh = shirts[shirt];
  for(int i = 0; i < sh.count; ++i)
  {
    const int personMask = 1 << (sh.persons[i] - 1);
    if((mask & personMask) != 0)
      continue; // person has a shirt allocated

    result += solve(mask | personMask, shirt + 1);

    // Protect against overflow
    if(result >= 1000000007)
      result -= 1000000007;
  }


  return tableVal = result;
}

int main()
{
#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  fastread(&T); // [1, 10]

  int shirt;
  while(T--)
  {
    memset(table, 0xFF, sizeof(table));
    memset(shirts, 0x00, sizeof(shirts));

    fastread(&N);
    allMask = (1 << N) - 1;
    //debugIterations = 0;

    for(int person = 1; person <= N; ++person)
    {
      while(true)
      {
        const bool isEndOfLine = fastreadIsEndOfLine(&shirt);
        shirts[shirt].persons[shirts[shirt].count] = person;
        ++shirts[shirt].count;
        if(isEndOfLine)
          break;
      }
      //std::sort(shirts[shirt].persons, shirts[shirt].persons + shirts[shirt].count); // This might not be necessary
    }

    printf("%lld\n", solve(0, 1));
    //printf("%lld %lld\n", answer % 1000000007, debugIterations);
    //printf("%d (N:%d Complexity:%d)\n", result, N, complexity);
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
