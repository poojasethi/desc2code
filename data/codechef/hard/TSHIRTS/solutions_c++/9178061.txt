#include <iostream>
#include <bits/stdc++.h>
#define MOD 1000000007
using namespace std;


vector<int> cap[101];
int dp[1025][101];
int allmask,n;


long long int countWaysUtil(int mask,int i)
{
    if (mask == allmask)
        return 1;

    if (i>100)
        return 0;

    if (dp[mask][i] != -1)
        return dp[mask][i];
    long long int ways = countWaysUtil(mask,i+1);
    int sizeVec=cap[i].size();

    for (int j=0;j<sizeVec;j++)
    {
        //note person convention is 0 to n-1
        if (mask & (1 << cap[i][j]))
            continue;

        else
        {
            ways+=countWaysUtil(mask|(1<<cap[i][j]),i+1);
            ways%=MOD;
        }

    }

    return (dp[mask][i]=ways);
}

int main()
{
    int t;

    cin >> t;
    int x;


    while (t--)
    {
        //initialize vector
        //fill(cap.begin(),cap.end(),0);
        for (int i=0;i<101;i++)
        cap[i].clear();



        cin >> n;
    string temp, str;
    int x;
    getline(cin, str);  // to get rid of newline character
    for (int i=0; i<n; i++)
    {
        getline(cin, str);
        stringstream ss(str);

        // while there are words in the streamobject ss
        while (ss >> temp)
        {
            stringstream s;
            s << temp;
            s >> x;

            // add the ith person in the list of cap if with id x
            cap[x].push_back(i);
        }
        //printf("check\n");
    }

    memset(dp, -1, sizeof dp);

        allmask=(1<<n)-1;
        cout << countWaysUtil(0,1) << endl;

       /* for (int i=0;i<1023;i++)
        {
            for (int j=0;j<101;j++)
            {
                if (dp[i][j] != -1)
                {
                    printf("%d %d : %d\n",i,j,dp[i][j]);
                }
            }
        }
*/


    }
    return 0;
}
