#include <bits/stdc++.h>
using namespace std;
const int Maxn = 100000;
int val[Maxn];
int modulo(int a,int b,int c){
    long long x=1,y=a; // long long is taken to avoid overflow of intermediate results
    while(b > 0){
        if(b%2 == 1){
            x=(x*y)%c;
        }
        y = (y*y)%c; // squaring the base
        b /= 2;
    }
    return x%c;
}
long long mulmod(long long a,long long b,long long c){
    long long x = 0,y=a%c;
    while(b > 0){
        if(b%2 == 1){
            x = (x+y)%c;
        }
        y = (y*2)%c;
        b /= 2;
    }
    return x%c;
}
bool Miller(long long p,int iteration){
    if(p<2){
        return false;
    }
    if(p!=2 && p%2==0){
        return false;
    }
    long long s=p-1;
    while(s%2==0){
        s/=2;
    }
    for(int i=0;i<iteration;i++){
        long long a=rand()%(p-1)+1,temp=s;
        long long mod=modulo(a,temp,p);
        while(temp!=p-1 && mod!=1 && mod!=p-1){
            mod=mulmod(mod,mod,p);
            temp *= 2;
        }
        if(mod!=p-1 && temp%2==0){
            return false;
        }
    }
    return true;
}
void fun(){
  val[1] = 0;
  val[2] = 1;
  val[3] = 0;
  val[4] = 1;
  for(int i=5;i<Maxn;i++){
    if(val[i-1]==0){
      val[i] = 1;
      continue;
    }
    for(int j=2;j*j<=i;j++){
      int x1,x2;
      if(i%j==0){
        x1=j;
        x2=i/j;
        if(val[x1]==0)
          val[i]=1;
        if(val[x2]==0)
          val[i]=1;
      }
      if(val[i])
        break;
    }
    if(val[i]==0 && Miller(i,100)==0)
      cout << i << endl;
  }
}
int main(){
  //fun();
  int t,x,ans;
  cin >> t;
  while(t--){
    cin >> x;
    if(x==16 || x==289 || x==34 || Miller(x,100)==1)
      ans = 0;
    else
      ans = 1;
    if(x==2 || x==17)
      ans=1;
    if(ans)
      cout << "Mike" << endl;
    else
      cout << "Tom" << endl;
  }
  return 0;
}