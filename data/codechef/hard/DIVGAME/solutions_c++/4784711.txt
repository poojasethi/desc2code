//It actually works!!!
#include<iostream>
#include<cmath>
#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<string>
#include<algorithm>

using namespace std;

inline void readint(int &x)
{
	register int c = getchar_unlocked();
	x = 0;
	for(;(c<48 || c>57);c = getchar_unlocked());
	for(;c>47 && c<58;c = getchar_unlocked()) {x = (x<<1) + (x<<3) + c - 48;}
}

inline void writeint(int x, char endchar)
{
	if(x == 0)
		putchar_unlocked('0');
	else
	{
		int cnt = 0;
		char ch[20];
		while(x != 0)
		{
			ch[cnt++] = x%10 + '0';
			x /= 10;
		}
		for(int i=cnt - 1; i>=0; --i)
			putchar_unlocked(ch[i]);
	}
	putchar_unlocked(endchar);
}

inline void writestring(const char* ch)
{
	while(*ch != '\0')
		putchar_unlocked(*(ch++));
	putchar_unlocked('\n');
}

vector<int> primes;

int arr[10000];

inline void find_primes()
{
	int n;
	arr[1] = 1; 
	for(int i=2; i<10000; ++i)
	{
		if(arr[i] == 0)
			primes.push_back(i);
		for(int j = 2 * i; j<10000; j += i)
			arr[j] = 1;
	}
	return ;
}

inline int first_player(int n)
{
	if(n == 1 || n == 3 || n == 34 || n == 289 || n == 16)
		return 0;
	else if(n == 2 || n == 17)
		return 1;
	if(binary_search(primes.begin(), primes.end(), n))
		return 0;
	else if(n < primes[primes.size() - 1])
		return 1;
	int sqr = sqrt(n) + 1;
	int size = primes.size();
	for(int i=0; i<size && primes[i] <= sqr; ++i)
	{
		if(n%primes[i] == 0)
			return 1;
	}
	return 0;
}

int main()
{
	find_primes();
	int t;
	readint(t);
	while(t--)
	{
		int n;
		readint(n);
		if(first_player(n))
			writestring("Mike");
		else
			writestring("Tom");
	}
	return 0;
}
