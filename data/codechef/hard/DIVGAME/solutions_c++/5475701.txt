#include <bits/stdc++.h>

using namespace std;

#define MAX 100000
#define ll long long

bool isprime[MAX+2];

ll mulmod(ll a, ll b, ll mod)
{
    ll x = 0,y = a % mod;
    while (b > 0)
    {
        if (b % 2 == 1)
        {
            x = (x + y) % mod;
        }
        y = (y * 2) % mod;
        b /= 2;
    }
    return x % mod;
}
/*
 * modular exponentiation
 */
ll modulo(ll base, ll exponent, ll mod)
{
    ll x = 1;
    ll y = base;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            x = (x * y) % mod;
        y = (y * y) % mod;
        exponent = exponent / 2;
    }
    return x % mod;
}

/*
 * Miller-Rabin primality test, iteration signifies the accuracy
 */
bool Miller(ll p,int iteration)
{
    if (p < 2)
    {
        return false;
    }
    if (p != 2 && p % 2==0)
    {
        return false;
    }
    ll s = p - 1;
    while (s % 2 == 0)
    {
        s /= 2;
    }
    for (int i = 0; i < iteration; i++)
    {
        ll a = rand() % (p - 1) + 1, temp = s;
        ll mod = modulo(a, temp, p);
        while (temp != p - 1 && mod != 1 && mod != p - 1)
        {
            mod = mulmod(mod, mod, p);
            temp *= 2;
        }
        if (mod != p - 1 && temp % 2 == 0)
        {
            return false;
        }
    }
    return true;
}

int main()
{
    int i, j, t, n;
    memset(isprime, true, sizeof(isprime));
    //cout << isprime[5] << " " << isprime[7] << "\n";
    for(i=4; i<=MAX; i+=2)
        isprime[i] = false;
    for(i=3; i<=sqrt(MAX); i+=2){
        if(isprime[i]){
            for(j=i*i; j<=MAX; j+=i)
                isprime[j] = false;
        }
    }
    //cout << isprime[5] << " " << isprime[7] << "\n";
    scanf("%d", &t);
    while(t--){
        scanf("%d", &n);
        if(n==2 || n==17){
            printf("Mike\n");
            continue;
        }
        if(n==16 || n==34 || n==289){
            printf("Tom\n");
            continue;
        }
        if(n<=MAX){
            if(isprime[n])
                printf("Tom\n");
            else
                printf("Mike\n");
        }
        else{
            if(Miller(n, 5))
                printf("Tom\n");
            else
                printf("Mike\n");
        }
    }
    return 0;
}
