#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }

  if(neg)
	  *a = -*a;
}

int N, K, M;
int T = 1;
//bool R[100000000 + 1];
//
//
//void Precalc()
//{
//	memset(R, 0, sizeof(R));
//
//	R[2] = true;
//	for(int i = 3; i <= 100000000; ++i)
//	{
//		if(R[i] == true)
//			continue;
//
//		if(R[i - 1] == false)
//		{
//			R[i] = true;
//			continue;
//		}
//
//		// This one is a loss, so any multiplier of it is a win!
//		for(int j = i + i; j <= 100000000; j += i)
//			R[j] = true;
//	}
//}

bool IsMike()
{
	if ( N == 2 ) return true;
	if ( N == 16 ) return false;
	if ( N == 17 ) return true;
	if ( N == 34 ) return false;
	if ( N == 289 ) return false;
	for ( int i = 2; i * i <= N; i++ )
		if ( N % i == 0 )
			return true;
	return false;
}



int main()
{
#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  //Precalc();
  fastread(&T);

  while(T--)
  {
    fastread(&N);

    printf("%s\n", IsMike() ? "Mike" : "Tom");
	//printf("%s %s\n", IsMike() ? "Mike" : "Tom", R[N] ? "Mike" : "Tom");
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
