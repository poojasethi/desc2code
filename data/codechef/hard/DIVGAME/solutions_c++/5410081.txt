#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <math.h>
#include <cstring>
#include <fstream>

using namespace std;

inline long long multiply(long long a, long long b, long long c)
{
    return (a * b) % c;
}

long long power(long long a, long long b,long long c)
{
    long long x(1),y(a);

    while(b > 0)
    {
        if(b % 2 == 1)
            x=multiply(x, y, c);
        y = multiply(y, y, c);
        b /= 2;
    }
    return x % c;
}

int fermat(long long n)
{
    int i;
    long long a;

    for(i = 0; i < 2; ++i)
    {
        a = rand() % (n-1) + 1;
        if(power(a, n-1, n) % n != 1)
            return 0;
    }
    return 1;
}

void game_of_divisors_2()
{
    int T,i,j,k,n;
    static int primes[100001];

    for(i = 2; i <= 100000; ++i)
        primes[i] = 1;
    for(i = 2; i*i <= 100000; ++i)
    {
        if(primes[i])
        {
            for(j = i*i; j <= 100000; j += i)
                primes[j] = 0;
        }
    }

    scanf("%d", &T);
    for(k = 0; k < T; ++k)
    {
        scanf("%d", &n);
        if(n == 2 || n == 17)
            printf("Mike\n");
        else
            if(n == 1 || n == 16 || n == 34 || n == 289)
                printf("Tom\n");
            else 
                if(n <= 100000)
                    printf(primes[n] == 1 ? "Tom\n" : "Mike\n");
                else
                    printf(fermat(n) == 1 ? "Tom\n" : "Mike\n");
    }
}  

int main()
{
    game_of_divisors_2();
    return 0;
} 
