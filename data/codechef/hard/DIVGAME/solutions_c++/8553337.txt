//arp95(aimwf) machake rahega ek din
#include<bits/stdc++.h>
using namespace std;
#define Lim 1000000
vector<bool> secarray((Lim>>1)+100);
#define MOD 1000000007ll
#define E 1e-9
#define ll long long
#define pb push_back
#define mp make_pair
#define set0(a) memset(a,0,sizeof(a));
#define setminus1(a) memset(a,-1,sizeof(a));
#define loop(i,n) for(int i=0; i<(int)n;i++)
#define sd(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sortv(a) sort(a.begin(),a.end())
#define vecint vector<int>
#define vecll vector<long long>
#define vecpairint vector<pair<int,int> >
#define vecpairll vector<pair<long long int,long long int> >
#define setint set<int>
#define setll set<long long>
#define setpairint set<pair<int,int> >
#define setpairll set<pair<long long int,long long int> >
#define pairint pair<int,int>
#define pairll pair<long long int,long long int>
#define mapint map<int,int>
#define mapll map<long long ,long long>
#define mappairint map<pair<int,int> , int>
#define mappairll map<pair<long long int,long long int> >
ll primelength=0,hprime[10000005];
map<ll,ll>mymap;
vector<ll>primes;
//fastexpo
ll fastexpo(ll a, ll n) 
{
	ll ret=1;
	ll b=a;
	while(n) 
	{
		if(n&1) 
		ret=(ret*b)%MOD;
		b=(b*b)%MOD;
		n>>=1;
	}
	return ret%MOD;
}
//to find gcd of two numbers (Eulers Theoram)
ll gcd(ll a ,ll b)
{
	if(b==0)
		return a;
	else
		return gcd(b,a%b);
}
//to find lcm of two numbers
ll lcm(ll num1,ll num2)
{
	return (num1*num2)/gcd(num1,num2);
}
//to check existence of element in a sorted array
ll b1(ll arr[],ll low,ll high,ll item)
{
	ll mid;
	while((high-low)>1)
	{
		mid=low+(high-low)/2;
		if(arr[mid]>item)
			high=mid;
		else
			low=mid;
	}
	if(arr[low]==item)
		return low;
	else if(arr[high]==item)
		return high;
	return -1;
}
// to find an element strictly less than the item
ll b2(ll arr[],ll low,ll high,ll item)
{
	ll mid;
	while((high-low)>1)
	{
		mid=low+(high-low)/2;
		if(arr[mid]>=item)
			high=mid;
		else
			low=mid;
	}
	if(arr[high]<item)
		return high;
	else if(arr[low]<item)
		return low;
	return -1;
}
// to find the element strictly greater than the item
ll b3(ll arr[],ll low,ll high,ll item)
{
	ll mid;
	while((high-low)>1)
	{
		mid=low+(high-low)/2;
		if(arr[mid]>item)
			high=mid;
		else
			low=mid;
	}
	if(arr[low]>item)
		return low;
	else if(arr[high]>item)
		return high;
	return -1;
}
//sieve
void sieve()
{
	primes.push_back(2);
    for(ll i=3;i<=1000;i+=2)
    {
    	if(secarray[(i-3)>>1]==0)
    	{
    		for(ll j=i*i;j<Lim;j+=i)
    		{
    			if(j&1)
    				secarray[(j-3)>>1]=1;
    		}
    	}
    }
    for(ll i=0;2*i<Lim;i++)
    {
    	if(!secarray[i])
			primes.push_back(2*i+3);
    }
}
//prime factorization using sieve
void primesieve()
{
	for(ll i=2;i<=10000000;i+=2)
		hprime[i]=2;
    for(ll i=3;i<=10000000;i+=2)
    {
    	if(hprime[i]==0)
    	{
    		hprime[i]=i;
    		for(ll j=i*i;j<=10000000;j=j+(i<<1))
    		{
    			if(hprime[j]==0)
    				hprime[j]=i;
    		}
    	}
    }
}
//to check whether a number is expressible as sum of two squares then prime factorize using sieve and check there should be no prime of 4k+1
//prime factorize using sieve will give all factors of a number (p1+1)*(p2+1) and so on..
//perfect square
ll issquare(ll num)
{
	ll sp=sqrt(num);
	if((sp*sp)==num)
		return 1;
	else
		return 0;
}
int main() 
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	sieve();
	ll t,n;
	//primesieve();
	//gcd(num1,num2);
	//lcm(num1,num2);
	//b(array,low,high,item)
	//fastexpo(base,power)
	//issquare(num)
	scanf("%lld",&t);
	while(t--)
	{
		scanf("%lld",&n);
		ll yo=n,j=2,f=0;
		for(ll yu=0;primes[yu]*primes[yu]<=n;yu++)
		{
			if(n%primes[yu]==0)
			{
				f=1;
				break;
			}
		}
		if(n==16 || n==34 || n==289)
			printf("Tom\n");
		else if(n==2 || n==17)
			printf("Mike\n");
		else if(f==1)
			printf("Mike\n");
		else
			printf("Tom\n");
	}
	return 0;
} 