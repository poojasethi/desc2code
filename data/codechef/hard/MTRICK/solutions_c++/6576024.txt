// LUCIFER <3 SLS <3

#include <bits/stdc++.h>

using namespace std;

#define ll long long int
#define get getchar_unlocked
#define mp make_pair
#define pb push_back

ll scan()
{
    ll n = 0, ch = get();
    while (ch < '0' || ch > '9')
        ch = get();
    while (ch >= '0' && ch <= '9') {
        n = (n << 3) + (n << 1) + ch - '0';
        ch = get();
    }
    return n;
}

void read(string &x)
{
    char ch = get();
    while (ch < 'A' || ch > 'Z')
        ch = get();
    while (ch >= 'A' && ch <= 'Z') {
        x.pb(ch);
        ch = get();
    }
}

inline ll mul(ll a, ll  b, ll MOD)
{
	ll q = (ll)(((long double)a * (long double)b)/(long double)MOD);
	ll r = a * b - q * MOD;
	r %= MOD;
	if(r < 0) r += MOD;
	return r;
}

int main()
{
    ll t, n, A, B, C, i, tmp, st, ed, rvrs, tmp2, ans;
    t = scan();
    while (t--) {
        n = scan();
        ll a[n+1];
        a[0] = 0;
        for (i = 1; i <= n; i++)
            a[i] = scan();
        A = scan();
        B = scan();
        C = scan();
        A %= C;
        B %= C;
        string x;
        x.pb('\0');
        read(x);
        tmp = 1;
        st = 1;
        ed = n;
        rvrs = 0;
        pair <ll, ll> p;
        vector <ll> an;
        p = mp(0, 0);
        for (i = 1; i <= n; i++) {
            if (x[i] == 'R') {
                swap(st, ed);
                rvrs++;
            }
            a[st] %= C;
            tmp2 = (a[st] - p.first + C) % C;
            tmp2 = mul(tmp2, tmp, C);
            ans = (p.second + tmp2)%C;
            if (x[i] == 'A')
                ans = (ans + A) % C;
            else if (x[i] == 'M') {
                ans = mul(ans, B, C);
                tmp = mul(tmp, B, C);
            }
            an.pb(ans);
            p = mp(a[st], ans);
            if (rvrs % 2)
                st--;
            else
                st++;
        }
        for (i = 0; i < (an.size()-1); i++)
            printf("%lld ", an[i]);
        printf("%lld\n", an[i]);
    }
    return 0;
}
