/*(Sm19)...SUST-CSE-19*/

#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
#include<iostream>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<sstream>
using namespace std;
typedef long long ll;
typedef unsigned long long ull; //scanf("%llu",&N);
#define FOR(i,a,b)  for(int i=(a);i<b;i++)
#define REV(i,a,b)  for(int i=a;i>=b;i--)
#define mem(a,b) memset(a,b,sizeof(a))
#define clr(a) a.clear()
#define mp make_pair
#define pb push_back
#define SZ(a) (int)a.size()
#define all(a) (a).begin(),(a).end()
#define reall(a) (a).rbegin(),(a).rend()
#define fs first
#define sc second
#define PI (2*acos(0.0))
#define ERR (1e-7)
#define EQ(a,b) (fabs(a-b)<ERR)
#define FOREACH(it,x) for(__typeof((x.begin())) it=x.begin();it!=x.end();it++)

////int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1};                      //4 Direction
////int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};  //8 direction
////int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
typedef vector<int>     VI;
typedef vector<string>  VS;
typedef pair<int,int>   PII;
typedef pair<int,PII >  DPII;
typedef vector<pair<int,int> >VPII;
typedef vector<pair<int,pair<int,int> > > VDPII;

const int INF=(1<<29);
const int MAX=20000009;

ll FastMultiplication(ll a,ll b,ll m)
{
    if(b==0) return 0;
    ll ret=FastMultiplication(a,b/2,m);
    ret=(ret+ret)%m;
    if(b&1) ret=(ret+a)%m;
    return ret;
}

int main()
{
    int t,N;
    ll A,B,C,arr[1009];
    string str;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&N);
        FOR(i,0,N)
        {
            scanf("%lld",arr+i);
        }
        scanf("%lld %lld %lld",&A,&B,&C);
        cin>>str;

        int beg=0,end=N-1;
        bool direction=1;
        ll add=0;
        ll mul=1;
        A=A%C;
        B=B%C;

        FOR(i,0,SZ(str))
        {
            if(str[i]=='R')
            {
                direction=!direction;
            }
            else if(str[i]=='A')
            {
                add=(add+A)%C;
            }
            else
            {
                add=FastMultiplication(add,B,C);
                mul=FastMultiplication(mul,B,C);
            }
            if(i) printf(" ");

            ll res;
            if(direction) res=arr[beg],beg++;
            else res=arr[end],end--;

            res=FastMultiplication(res,mul,C);
            res=(res+add)%C;

            printf("%lld",res);
        }
        puts("");
    }

    return 0;
}


/*

2
3
1 1 1
2 3 1000
ARM
4
1 2 3 4
0 1 1000
AMAM

*/
