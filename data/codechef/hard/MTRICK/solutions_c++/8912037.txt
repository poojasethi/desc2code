#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadll(long long* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }

  if(neg)
	  *a = -*a;
}

inline void readString(char *s)
{
  *s = getchar();
  while(*s == '\r' || *s == '\n' || *s == -1)
    *s = getchar();

  while(*s != '\r' && *s != '\n' && *s != -1)
  {
    ++s;
    *s = getchar();
  }
  *s = '\0';
}

int N, K, M;
int T = 1;
long long A, B, C;
long long L[1000 + 1];
long long LF[1000 + 1];
char S[1000 + 2];

long long multiple(long long a, long long b, long long c) // a * b % c
{
  if(b == 0)
    return 0;

  long long ret = multiple(a, b >> 1, c);
  ret = (ret + ret) % c;
  if(b & 1)
    ret = (ret + a) % c;

  return ret;
}

long long dmul(long long a, long long b, long long M)
{
	long long ans = 0;
	for(int i = 1; i <= b; i++)
		ans = (ans + a) % M;
	return ans;
}

long long mul(long long a, long long b, long long M)
{
	if(b < 10) return dmul(a, b, M);
	long long x = dmul(a, b % 10, M);
	long long y =  mul(a, b / 10, M);
	y = dmul(y, 10, M);
	y = (y + x) % M;
	return y;
}

int main()
{

#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  fastread(&T);

  while(T--)
  {
    fastread(&N);

    for(int i = 0; i < N; ++i)
    {
      fastreadll(L + i);
      LF[i] = L[i];
    }


    fastreadll(&A);
    fastreadll(&B);
    fastreadll(&C);
    readString(S);

    //printf("%s\n", S);
    //for(int i = 0; i < N; ++i)
    //{
    //  if(S[i] == 'A')
    //  {
    //    for(int j = i; j < N; ++j)
    //      L[j] = (L[j] + A) % C;
    //  }
    //  else if(S[i] == 'M')
    //  {
    //    for(int j = i; j < N; ++j)
    //      L[j] = mul(L[j], B, C) % C;
    //  }
    //  else // 'R'
    //  {
    //    for(int j = i, k = N - 1; j < k; ++j, --k)
    //    {
    //      const long long temp = L[j];
    //      L[j] = L[k];
    //      L[k] = temp;
    //    }
    //  }
    //}
    //printf("%lld", L[0]);
    //for(int i = 1; i < N; ++i)
    //  printf(" %lld", L[i]);
    //printf("\n");


    // Faster method?
    long long accumSum = 0;
    long long accumMul = 1;
    int Last = N;
    int inc = 1;
    int j = 0;
    int g = 0;

    //if(S[j] == 'A')
    //{
    //  accumSum += A;
    //}
    //else if(S[j] == 'M')
    //{
    //  accumMul *= B;
    //  accumSum *= B;
    //}
    //else // 'R'
    //{
    //  const int temp = i;
    //  i = Last - inc;
    //  Last = temp - inc;
    //  inc = -inc;
    //}
    //LF[i] = (LF[i] * accumMul + accumSum) % C;
    //printf("%lld", LF[i]);
    //i += inc, ++j;


    for(; g != Last; g += inc, ++j)
    {
      if(S[j] == 'A')
      {
        accumSum = (accumSum + A) % C;
      }
      else if(S[j] == 'M')
      {
        accumMul = mul(accumMul, B, C);
        accumSum = mul(B, accumSum, C);
      }
      else // 'R'
      {
        const int temp = g;
        g = Last - inc;
        Last = temp - inc;
        inc = -inc;
      }
      LF[g] = (mul(LF[g], accumMul, C) + accumSum) % C;
      printf("%lld ", LF[g]);
      //printf(" %lld", LF[g]);
    }

    printf("\n");
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
