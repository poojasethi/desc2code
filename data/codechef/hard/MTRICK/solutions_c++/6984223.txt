#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<map>
#include<algorithm>
#include<climits>
#include<set>
#include<vector>
#include<stack>
#include<queue>
#include<list>
#include<utility>

typedef long long int ll;
using namespace std;

const ll modd=1e9+7;

long long int fast_modulo_mul(long long int a, long long int b, long long int mod) {

     long long int result;

     if(b==0)
        return 0;

     result = fast_modulo_mul(a,b/2,mod);
     result=(result+result) % mod;

     if(b & 1) {   // for odd b
         result=( result + a ) % mod ;
     }

     return result;
}

int main()
{
    ll t;
    scanf("%lld",&t);

    while(t--) {
        ll n;
        scanf("%lld",&n);

        ll L[1002],a,b,c,i,j,K=1,D=0,head=0,tail=n-1;
        char s[1003];

        for(i=0;i<n;i++) {
            scanf("%lld",&L[i]);
        }

        scanf("%lld %lld %lld",&a,&b,&c);

        cin>>s;

        ll direction=1;  // 1-> forward , 2-> reverse
        for(i=0;i<n;i++) {
            if(s[i]=='A') {
                K=K;
                D=(D+a)%c;
            } else if(s[i]=='M') {
                K=fast_modulo_mul(K,b,c);
                D=fast_modulo_mul(D,b,c);
            } else {
                direction^=1;
            }

            if(direction==1) {
                L[head]=(fast_modulo_mul(K,L[head],c) + D%c)%c;
                printf("%lld ",L[head++]);

            } else {
                L[tail]=(fast_modulo_mul(K,L[tail],c) + D%c)%c;
                printf("%lld ",L[tail--]);
            }
        }

        printf("\n");
    }

    return 0;
}
