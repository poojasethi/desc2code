#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cmath>
#include <vector>

using namespace std;
typedef long long ll;
#define MAXN 1005

ll multiply(ll a, ll b , ll MOD)
{
	ll q = (ll)(((long double)a * (long double)b) / (long double) MOD);
	ll r = a*b - q*MOD;
	r %= MOD;
	if(r < 0)
		r += MOD;
	return r;
}

void solve()
{
	int N;
	scanf("%d",&N);
	ll * ptr = (ll *) malloc (N * sizeof(ll));
	for(int i = 0; i < N; i++)
	{
		scanf("%lld",&ptr[i]);
	}
		
	ll A, B, C;
	scanf("%lld %lld %lld\n",&A, &B, &C);	// Taking in A, B, C

	ll D = 1, E = 0;		// D --> Multiplicative factor, E --> Additive Factor
	char str[MAXN];
	int forward = 0, backward = N-1, flag = 0;	// Begin --> Starting Index, End --> End index, dir --> Current Direction
	scanf("%s",str);
//	cout << str << endl;
	for(int i = 0; i < N; i++)
	{
		// Update D, E as needed
		if(str[i] == 'A')
		{
			E = ((E % C)  + (A % C)) % C;
			
		}
		else if(str[i] == 'M')
		{
			D = multiply(D, B, C);
			E = multiply(E, B, C);
		}
		else
		{
			flag = !(flag);
		}
		
		if(flag == 0)
		{
			// Going in the forward direction
			ptr[forward] = multiply(ptr[forward], D, C);
			ptr[forward] = ((ptr[forward] % C) + (E % C)) % C;
			printf("%lld ",ptr[forward]);
			forward++;
		}
		else
		{
			// Going in the backward direction
			ptr[backward] = multiply(ptr[backward], D, C);
			ptr[backward] = ((ptr[backward] % C) + (E % C)) % C;
			printf("%lld ",ptr[backward]);
			backward--;
		}
	}
	printf("\n");
	return;
}

int main() {
	// your code goes here
	int t;
	scanf("%d",&t);
	while(t--)
		solve();

	return 0;
}