#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cmath>
#include <vector>

using namespace std;
typedef long long ll;
#define MAXN 1005

#define GC getchar_unlocked()

void read(ll & n)
{
	n = 0;
	char ch = GC;
	int sign = 1;
	while(ch < '0' || ch > '9'){if(ch == '-')sign = -1; ch = GC;}
	while(ch >= '0' && ch <= '9')
	{
		n = n * 10 + ch - '0';
		ch = GC;
	}
	n *= sign;
}


ll multiply(ll a, ll b , ll MOD)
{
	ll q = (ll)(((long double)a * (long double)b) / (long double) MOD);
	ll r = a*b - q*MOD;
	r %= MOD;
	if(r < 0)
		r += MOD;
	return r;
}

/*
ll multiply(ll a, ll b, ll c)
{
	ll res = 0, y = a % c;
	while(b)
	{
		if(b&1)
			res = (res + y) % c;
		y = y * 2;
		y = y % c;
		b >>= 1;
	}
	return res;
}
*/
/*
const ll MASK = (1<<20)-1;
ll multiply(ll a , ll b , ll c)
{
        ll z= (a * (b & MASK)) % c  +  (((a << 20) % c) * (b >> 20)) % c;
        while (z >= c)
                z -= c;
        return z; 
}
*/

ll ptr[MAXN];
void solve()
{
	ll N;
	read(N);
	
	for(int i = 0; i < N; i++)
	{
		scanf("%lld",&ptr[i]);
	}
		
	ll A, B, C;
	read(A), read(B), read(C);	// Taking in A, B, C

	ll D = 1, E = 0;		// D --> Multiplicative factor, E --> Additive Factor
	char str[MAXN];
	int forward = 0, backward = N-1, flag = 0;	// Begin --> Starting Index, End --> End index, dir --> Current Direction
	gets(str);
//	cout << str << endl;
	for(int i = 0; i < N; i++)
	{
		// Update D, E as needed
		if(str[i] == 'A')
		{
			E = ((E % C)  + (A % C)) % C;
			
		}
		else if(str[i] == 'M')
		{
			D = multiply(D, B, C);
			E = multiply(E, B, C);
		}
		else
		{
			flag = !(flag);
		}
		
		if(flag == 0)
		{
			// Going in the forward direction
			ptr[forward] = multiply(ptr[forward], D, C);
			ptr[forward] = ((ptr[forward] % C) + (E % C)) % C;
			printf("%lld ",ptr[forward]);
			forward++;
		}
		else
		{
			// Going in the backward direction
			ptr[backward] = multiply(ptr[backward], D, C);
			ptr[backward] = ((ptr[backward] % C) + (E % C)) % C;
			printf("%lld ",ptr[backward]);
			backward--;
		}
	}
	printf("\n");
	return;
}

int main() {
	// your code goes here
	int t;
	scanf("%d",&t);
	while(t--)
		solve();

	return 0;
}