/**
 	My standard template
 	Name: Shivam Mishra
 	handle: shivam217
 **/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 1000;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

LL power(LL b,LL e)
{
	if(b==0 && e==0) return 1;
	if(b==0 && e>1)  return 0;	
	if(b>0 && e==0) return 1;
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  r %= MOD; }
		e >>= 1; b = b*b; b %= MOD;
		
	}
return r;
}

LL gcd(LL a, LL b) {  if(b==0) return a;  else return gcd(b,a%b);  }


LL mod;
/**
LL multiply(LL a,LL b) {

  if(a>mod) a = a%mod;
  if(b>mod) b = b%mod;
  
  long double res = a;
  res *= a;
  LL c = (LL)(res/mod);
  a *= b;
  a -= c*mod;
  
  if(a>mod) a%=mod;
  while(a<0)
  	a += mod;
  return a;
}
**/


LL multiply(LL a, LL b)
{

  if (b == 0) {  //Base case a * 0 =0

      return 0;

  }

  long long ret = multiply(a, b >> 1);  //Multiply a by (b>>1).

  ret = (ret + ret) % mod;  //we double the value of ret i. 2 * (a * (b>>1)). Take MOD in this step

  if (b & 1) {  //implies b is ODD

      ret = (ret + a) % mod; //if b is odd then we express it as a * b = a+ a * (b>>1). We have computed a*(b>>1) in the previous step by recursion i.e the value ret. We now add the extra a to it.

  }

  return ret;

}

LL add(LL a,LL b){

if(a>=mod) a%=mod;
if(b>=mod) b%=mod;
LL sum = a+b;
if(sum>=mod) sum %= mod;
return sum;
}

LL arr[MAX+5];
char s[MAX+5];
LL k[MAX+5] , d[MAX+5];

int main() {

	int test; INT(test);
	while(test--) {

		int n; INT(n);
		
		FOR(i,0,n)
			LLD(arr[i]);
		
		LL a,b,c;
		LLD(a); LLD(b); LLD(c);
		
		mod  = c;
		
		STR(s);
	
		int begin=0 , direction=1 , end=n-1;		

		FOR(i,0,n) {

			if(s[i]=='R') {
			
				swap(begin,end);
				direction=-direction;
				d[i] = (i-1>=0)?d[i-1]:0;
				k[i] = (i-1>=0)?k[i-1]:1;

			}
			else if(s[i]=='A') {
				d[i] = add((i-1>=0)?d[i-1]:0 ,a);
				k[i] = (i-1>=0)?k[i-1]:1;
			}
			else if(s[i]=='M') {
				d[i] = multiply(b,(i-1>=0)?d[i-1]:0);
				k[i] = multiply(b,(i-1>=0)?k[i-1]:1);
			}

			LL temp = add(multiply(k[i],arr[begin]),d[i]);
			printf("%lld ",temp);
			begin += direction;

		}
		printf("\n");

	}



return 0;
}