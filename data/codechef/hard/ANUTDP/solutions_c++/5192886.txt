#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int MAX = 1e8 + 100;

int par[MAX];

queue<int> q;
vector<int> starts;

inline int get_cnt(int l,int r){
    return upper_bound(all(starts), r) - lower_bound(all(starts), l);
}

int calc(string s){
    vector<int> f(s.size(), 0);
    f[0] = 1;
    f[1] = 1;
    for(int i = 2; i < s.size(); i++){
        if(s[i] == '.') f[i] = f[i - 1] + f[i - 2]; else f[i] = 0;
    }
    return f[s.size() - 1];
}

void out(int x){
    eprintf("x = %d\n",x);
    int startx = x;
    printf("%d ",x);
    if(x == 0){
        printf("..####..\n");
        return;
    }
    static set<int> bad;
    bad.clear();
    for(;;){
        if(x > 1) bad.insert(x); else break;
        eprintf("x : %d\n",x);
        if(x == par[x])
            break;
        x = par[x];
    }
    int a = 1;
    int b = 1;
    string sout;
    sout += ".";
    printf(".");
    int len = 0;
    for(;;){
        ++len;
        if(len > 300){
            fprintf(stderr, "st : %d\n",startx);
        }
        if(b == 0){ sout += "#"; printf("#"); }else{ sout += "."; printf(".");}
        if(b == startx)
            break;
        int na, nb;
        if(bad.count(b)){
            na = b;
            nb = 0;
            bad.erase(b);
        }else{
            na = b;
            nb = a + b;
        }
        a = na;
        b = nb;
    }
    if(calc(sout) != startx){
        fprintf(stderr, "PFF startx : %d\n",startx);
        exit(123);
    }
    puts("");
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    //freopen("error","w",stderr);
#endif

    srand(time(0));

    par[1] = 1;
    q.push(1);
    while(!q.empty()){
        int x = q.front();q.pop();
        starts.push_back(x);
        int a = x;
        int b = x;
        for(;;){
            int na = b;
            int nb = a + b;
            a = na;
            b = nb;
            if(b >= MAX)
                break;
            if(!par[b]){
                par[b] = x;
                q.push(b);
            }
        }
    }

    starts.push_back(0);
    sort(all(starts));

    int q;
    #ifdef KONT
        q = 1e5;
    #else
        q = read();
    #endif
    while(q--){
        int x1;
        int x2;
        int kth;
        #ifdef KONT
            x1 = rand() % MAX;
            x2 = rand() % MAX;
            if(x1 > x2) swap(x1, x2);
            kth = rand() % 1000 + 1;
        #else
            x1 = read();
            x2 = read();
            kth = read();
        #endif
        if(get_cnt(x1, x2) < kth){
            puts("-1");
            continue;
        }
        int l = x1 - 1, r = x2;
        while(l + 1 < r){
            int m = (l + r) >> 1;
            if(get_cnt(x1, m) >= kth)
                r = m;
            else
                l = m;
        }
        out(r);
    }

    return 0;
}
