//Shakim :D
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <utility>
#include <map>
#include <set>
#include <string>
using namespace std;
typedef long long LL;
#define IT iterator
#define getcx getchar
#define INF (int(1e9))
#define INFL (LL(1e18))
#define pii pair< int,int >
#define piii pair< int , pii >
#define temp 0
#define wait 1
#define perm 2
struct cmp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.first>b.first;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first>b.first;
  }
} myobject;
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define in4(p,q,r,s) scanf("%d %d %d %d",&p,&q,&r,&s);
#define mod 1000000007
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
int main()
{
    int i,j;
    int a,b,c,d,cnt,lim;
    vector<int> v,P;
    set<int> S;
    set<int>::iterator it,it2;
    map< int , int > C;
    map< int , pii > M;
    bool fnd;

    lim=100000000;

    S.insert(1);

    a=1;
    b=1;
    c=2;

    cnt=3;

    while(c<=lim)
    {
        S.insert(c);
        C[c]=cnt;
        M.insert(piii(c,pii(-1,-1)));

        a=b;
        b=c;

        c=a+b;
        cnt++;
    }

    for(it=S.begin(); it!=S.end(); it++)
    {
        for(it2=it; it2!=S.end(); it2++)
        {
            a=(*it);
            b=(*it2);
            c=a*b;

            if(b>lim/a)
            {
                break;
            }
            if(S.find(c)==S.end())
            {
                S.insert(c);
                M.insert(piii(c,pii(a,b)));
            }
        }
    }

    v.push_back(0);
    for(it=S.begin(); it!=S.end(); it++)
    {
        v.push_back(*it);
    }
    int t,l,r,n,low,high,num;
    in(t);
    while(t--)
    {
        in3(l,r,n);

        low=lower_bound(v.begin(),v.end(),l)-v.begin();
        high=upper_bound(v.begin(),v.end(),r)-v.begin();

        //printf("low and high are %d %d\n",low,high);

        if(low==v.size())//there is no good numbers in the range [l,r]
        {
            printf("-1\n");
            continue;
        }

        num=high-low;

        if(n>num)
        {
            printf("-1\n");
            continue;
        }

        printf("%d ",v[low+n-1]);

        num=v[low+n-1];

        if(num==1)
        {
            printf(".\n");
            continue;
        }
        if(num==0)
        {
            printf("#\n");
            continue;
        }

        queue<int> Q;
        Q.push(num);
        while(!(Q.empty()))
        {
            c=Q.front();
            Q.pop();
            a=M[c].first;
            b=M[c].second;


            if(a==-1)
            {
                d=C[c];
                for(i=1; i<=d; i++)
                {
                    printf(".");
                }
                printf("#");
            }
            else
            {
                Q.push(a);
                Q.push(b);
            }
        }
        printf(".\n");

    }

    return 0;
}
