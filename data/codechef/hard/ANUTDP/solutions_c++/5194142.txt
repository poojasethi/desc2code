#include<cstdio>
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<algorithm>

using namespace std;
typedef long long ll;
typedef pair<ll,ll> ii;
#define mp make_pair
#define fr first
#define se second

vector<ll> v1;
map<pair<ll,ll>,ll > parent;
char ans[1000];

ll find_num(ll left , ll right,ll n)
{
	vector<ll> :: iterator start,end;
	start = lower_bound(v1.begin(),v1.end(),left);
  end = upper_bound(v1.begin(),v1.end(),right);
  int L = start - v1.begin();
  int R = end -   v1.begin(); R--;
  if ( L+n-1 > R ) 
	return -1;
	else
	return v1[L+n-1];
	
}

void good_num()
{
	ll maxn = 100000000; 
	queue<ll> q1;
	parent[mp(0,1)] = -1;
	q1.push(0LL);q1.push(1LL);
	pair<ll,ll> p1;
	while(!q1.empty())
	{
		ll a = q1.front();q1.pop();
		ll b = q1.front();q1.pop();

		if(b==0)
		v1.push_back(a);

		ll c = b , d =a+b;
		for(int i=0;i<2;i++)
		{
			if(d<=maxn && parent.find(mp(c,d))==parent.end())
			{
				parent[mp(c,d)]=a;
				q1.push(c);q1.push(d);
			}
			c = b;d=0;
		}
	}
	sort(v1.begin(),v1.end());
	
}

int main()
{
	int tc;
	scanf("%d",&tc);
	good_num();
	int c1=0;
	//cout<<v1.size();
	while(tc--)
	{
		ll l ,r ,n;
		scanf("%lld %lld %lld",&l,&r,&n);
		ll num = find_num(l,r,n);
		if(num!=-1)
		{
			ll a=num , b=0;
			int ptr=0;
			while(a!=-1)
			{
				if(b==0)
				ans[ptr++]='#';
				else
				ans[ptr++] ='.';

				int c = parent[mp(a,b)];
				b=a;
				a=c;
			}
			for(int i=0;i<ptr/2;i++)
			{
				swap(ans[i],ans[ptr-1-i]);
			}
			ans[ptr-1]='\0';
			printf("%lld %s\n",num,ans);
		}
		else
		printf("-1\n");
	}
	return 0;
}