#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> pii;

const int inf = 1000000000;

vector<int> pos;
set<pii> ss;
map<int,int> Map;
string ans;

void dfs(pii x){
    if (x.second > inf)
        return;
    if (ss.find(x) != ss.end())
        return;
    ss.insert(x);

    if (Map.count(x.second+x.first) <= 0){
        pos.push_back(x.second+x.first);
        Map[x.second+x.first] = x.first;
    }

    dfs(make_pair(x.second+x.first,x.first));
    dfs(make_pair(x.first,x.first));
}

void add(pii x){
    if (x.first == 0 and x.second == 0)
        return;
    if (x.first == 1 and x.second == 0){
        ans.push_back('.');
        return;
    }

    if (x.first == 0){
        add(make_pair(x.second,Map[x.second]));
        ans.push_back('#');
        return;
    }

    add(make_pair(x.second,x.first-x.second));
    ans.push_back('.');
    return;
}

void compute(int x){
    ans = "";
    add(make_pair(x,Map[x]));
}

void solve(){
    int N,L,R;
    cin >> L >> R >> N;

    int id = lower_bound(pos.begin(),pos.end(),L) - pos.begin();
    id += N-1;
    if (id >= pos.size() or pos[id] > R){
        cout << "-1\n";
        return;
    }

    int num = pos[id];
    compute(num);
    cout << num << " " << ans << "\n";
}

int main()
{
    dfs(make_pair(1,0));
    Map[1] = 0;
    Map[0] = 1;
    pos.push_back(0);
    sort(pos.begin(),pos.end());

    ios_base::sync_with_stdio(0);
    int t; cin >> t;
    while(t--) solve();
    return 0;
}
