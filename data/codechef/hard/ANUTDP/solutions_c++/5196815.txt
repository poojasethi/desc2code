#include <bits/stdc++.h>
using namespace std;
#define N 100000000
int fib[50];
vector <int> Good;
map<int,int> step;// OR declare a Map
map<int,int> mark;

//map<int,int> ReFib;
int Head,INF;
int GoodNumbers(int nu)
{
    vector <int> :: iterator it = upper_bound(Good.begin(),Good.end(),nu);
    int res = (int)(it - Good.begin());
    //cout<<res<<endl;
    return res;
}
void ConstructAns(int nu)
{
    if(nu == 0)
    {
        printf("#\n");
        return ;
    }
    if(nu == 1)
    {
        printf(".\n");
        return ;
    }
    while(1)
    {
        int u = step[nu];
        nu = nu/fib[u];
        for(int i = 1 ; i<=u ; i++) printf(".");
        if(nu == 1) break;
        printf("#");
    }
    printf("\n");
    return ;
}
int bin_search(int f,int r)
{
    int l = 0,h = r;
    int ans = -1;
    while(l <= h)
    {

        int mid = (l + h)/2;
        int x = GoodNumbers(mid);
        //cout<<l<<" "<<h<<" "<<x<<endl;
        if(x >= f)
        {
            ans = mid;
            h = mid - 1;
        }
        else
        {
            l = mid + 1;
        }
    }
    return ans;
}
void Dfs(int u)
{
    for(int j = 3 ; j<Head ; j++)
    {
        int x = fib[j];
        int temp = INF/x;
        if(temp >= u)
        {
            int v = u*x;
            if(mark[v] == 0)
            {
                step[v] = j;
                mark[v] = 1;
                Dfs(v);
            }
        }

    }
}
void PreCompute()
{
    INF = pow(10,8);
    int i;
    fib[0] = 0;
    fib[1] = 1;
    fib[2] = 1;
    step[1] = 1;
    //ReFib[0] = 0;
    //ReFib[1] = 1;
    for(i = 3; ;i++)
    {
        fib[i] = fib[i-1] + fib[i-2];
        if(fib[i] > INF)
        {
            break;
        }
        //cout<<i<<" "<<fib[i]<<endl;
        //mark[fib[i]] = 1;
        step[fib[i]] = i;
        //ReFib[fib[i]] = i;
    }
    Head = i;
    mark[0] = 1;
    mark[1] = 1;
    Dfs(1);
    //cout<<mark.size();
    map<int,int> :: iterator it;
    for(it = mark.begin() ; it != mark.end() ; it++)
    {
        Good.push_back((*it).first);
    }
    //cout<<Good.size()<<endl;
}
int main()
{
    PreCompute();
    //for(int i = 0 ; i<10 ; i++)
    //cout<<i<<" "<<Good[i]<<endl;
    //cout<<Good[0];
    //cout<<Good.size();
    int tc,t;
    scanf("%d",&tc);
    for(t = 1 ; t<=tc ; t++)
    {
        int l,r,n;
        scanf("%d %d %d",&l,&r,&n);
        int x = GoodNumbers(l-1);
        //cout<<x<<endl;
        n = n + x;
        int val = bin_search(n,r);
        if(val == -1)
        {
            printf("-1\n");
        }
        else
        {
            printf("%d ",val);
            ConstructAns(val);
        }
    }
    return 0;
}
