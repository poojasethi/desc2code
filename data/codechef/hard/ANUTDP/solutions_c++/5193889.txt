#include <bits/stdc++.h>
typedef long long int llint;

using namespace std;
#define P pair<int,int>
llint pow8=100000000;


int bs(int k,vector<llint>& fibs){
	int high = fibs.size();
	int low = 0;
	int mid = (low+high)/2;
	while (mid!=low){
		if (fibs[mid]>k)
			high = mid;
		else 
			low= mid;
		mid =(high+low)/2;
	}
	return mid;
} 

void recurse(int n,map<int,P >& maping,map<int,P >& PowerMaping,vector<int> &factors){
	if (n==1) {factors.push_back(1);return;}
	if (PowerMaping.find(n)!=PowerMaping.end()){
		P temp = PowerMaping[n];
		for(int i=0;i<temp.second;i++){
			factors.push_back(temp.first);
		}
	}
	else {
		if (maping.find(n)==maping.end()) return;
		P temp = maping[n];
		recurse(temp.first,maping,PowerMaping,factors);
		recurse(temp.second,maping,PowerMaping,factors);

	}
	return;

}

int main(){

	vector<llint> fib;
	fib.push_back(1);
	fib.push_back(2);

	llint i=2;
	while(fib[i-1]+fib[i-2]<=100000000){
		fib.push_back(fib[i-1]+fib[i-2]);
		i++;
	}
	map<int,P > PowerMaping;
	map<int,P > maping;
	vector<vector<llint> > powers(38);
	powers[1].push_back(1);
	for(llint i=1;i<38;i++){
		llint curr=fib[i];
		int j=1;
		while(curr<=pow8){
			powers[i].push_back(curr);
			PowerMaping[curr] = P(fib[i],j);
			curr=curr*fib[i];
			j++;
		}
	}

	vector<llint> elements=powers[1];



	for(llint i=2;i<38;i++){
		vector<llint> new_elements=elements;
		for(llint j=0;j<powers[i].size();j++){
			for(llint e=0;e<elements.size();e++){
				if(elements[e]*powers[i][j]<=pow8){
					if (maping.find(elements[e]*powers[i][j])==maping.end()){
						new_elements.push_back(elements[e]*powers[i][j]);
						maping[elements[e]*powers[i][j]] = P(elements[e],powers[i][j]);
					}	
				}
				else
					break;
			}
		}
		sort(new_elements.begin(),new_elements.end());
		elements=new_elements;
	}
	//cout<<"Size is "<<elements.size()<<endl;
	// for(llint i=0;i<elements.size();i++){
	// 	cout<<elements[i]<<" ";
	// }
	vector<llint> proxy;
	proxy.push_back(0);
	proxy.push_back(elements[0]);
	for (int i=1;i<elements.size();i++){
		if (elements[i]!=elements[i-1])
			proxy.push_back(elements[i]);
	}
	// for(llint i=0;i<10;i++){
	// 	cout<<proxy[i]<<" ";
	// }
	int t;cin>>t;
	int tt=t;
	//cout<<endl;
	
	// cout<<proxy.size()<<endl;
	// // for (int i=0;i<10;i++){
	// // 	//cout<<i<<endl;
	// // 	vector<int> factors;
	// // 	recurse(proxy[i],maping,PowerMaping,factors);
	// // 	cout<<proxy[i]<<" "<<factors.size()<<endl;
	// // }
	// vector<int> factors;
	// //recurse(8,maping,PowerMaping,factors);
	// //cout<<8<<" "<<factors.size()<<endl;
	// cout<<PowerMaping[8].first << " "<<PowerMaping[8].second<<endl;

	while(t--){
		int l,r,n; cin>>l>>r>>n;
		int left = bs(l,proxy);
		int right = bs(r,proxy);
		if (proxy[left]!=l) left++;
		if (n==0) continue;
		if (l==0 && n==1) {cout<<"0 .##."<<endl;continue;}
		//if (l==0 && n!=0) {left=1;n--;}
		left = left + n-1;
		if (left <=right && n>0) {
			cout<<proxy[left]<<" ";
			vector<int> factors;
		//	if (left==0) {cout<<-1<<endl;continue;}
			recurse(proxy[left],maping,PowerMaping,factors);
			for (int i=0;i<factors.size();i++){
			//	cout<<factors[i]<<" "<<bs(factors[i],fib)+1<<endl;
				for (int j=0;j<=bs(factors[i],fib)+1;j++){
					cout<<".";
				}
				cout<<"#";
			}
			cout<<"."<<endl;
		}
		else cout<<-1<<endl;
	}

	return 0;
}