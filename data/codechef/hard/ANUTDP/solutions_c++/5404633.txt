#include<iostream>
#include<map>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<queue>
using namespace std;
int TC,L,R,N=100000000;
map< pair<int,int>,int>parent;
int goodNum[100000],goodNumPtr=0;
int arrL[100000],arrR[100000],arrN[100000],arrOrder[100000];
int ans[100000];
bool cmp(int i,int j)
{
    return arrL[i]<arrL[j];
}
void pre(){

    queue<int>q;
    q.push(0);
    q.push(1);
    parent[make_pair(0,1)]=-1;
    while(!q.empty()){

        int a=q.front(); q.pop();
        int b=q.front();q.pop();
        if(b==0)
            goodNum[goodNumPtr++]=a;
        int c=b;
        int d=a+b;
        for(int i=0;i<2;i++)
        {
            if(d<=N&&parent.find(make_pair(c,d))==parent.end())
            {
                parent[make_pair(c,d)]=a;
                q.push(c);
                q.push(d);
            }
            c=b;
            d=0;
        }
    }
    sort(goodNum,goodNum+goodNumPtr);

}
void print(int n)
{
    if(n==-1)
    {
        printf("\n");
        return;
    }
    int a=n,b=0;
    char out[1000];
    int ptr=0;
    while(a!=-1)
    {
        if(b==0)
            out[ptr++]='#';
        else
            out[ptr++]='.';
        int c=parent[make_pair(a,b)];
        b=a;
        a=c;

    }
    reverse(out,out+ptr);
    out[ptr-1]='\0';
    printf("%s\n",out);
}
void solve()
{
    int ptr=0;
    for(int i=0;i<TC;i++)
    {
        int jj=arrOrder[i];
        while(ptr<goodNumPtr&&goodNum[ptr]<arrL[jj])
            ptr++;
        int n=ptr+arrN[jj]-1;
        if(n<goodNumPtr)n=goodNum[n];
        else
            n=N+100;
        if(n>arrR[jj])
            n=-1;
        ans[jj]=n;
    }
    for(int i=0;i<TC;i++)
    {
        printf("%d ",ans[i]);
        print(ans[i]);
    }
}
int main(){
    pre();
    scanf("%d",&TC);
    for(int i=0;i<TC;i++)
    {
        scanf("%d %d %d",&arrL[i],&arrR[i],&arrN[i]);
        arrOrder[i]=i;
    }
    sort(arrOrder,arrOrder+TC,cmp);
    solve();

}
