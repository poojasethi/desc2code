#include<iostream>
#include<vector>
#include<cstdio>
#include<algorithm>
#include<map>
#include<stack>
#include<string>
#include<set>
#include<queue>
using namespace std;

typedef long long int llint;
#define PRIME 1000000007

#define N 100000001

int bs(int x,vector<int>& v)
{
	int l=0;
	int h = v.size();
	int m = (l+h)/2;
	while(l!=m)
	{
		if(v[m]<x)
			l = m;
		else
			h = m;
		m = (l+h)/2;
	}
	return l+1;
}

void print(int n,map<int,int>& fib,vector<int>& v)
{
	if(n==0)
	{
		cout<<".##."<<endl;
		return;
	}

	for(map<int,int> :: iterator itr = fib.begin();itr!=fib.end();itr++)
	{
		int num = (*itr).first;

		int count = (*itr).second;

		while(n%num==0)
		{
			if(!binary_search(v.begin(),v.end(),n/num))
				break;
			n/=num;
			for(int i=0;i<count;i++)
				cout<<".";
			cout<<"#";
		}
	}
	cout<<".\n";
}
int main()
{
	
	
	map<int,int> fib;
	set<int> good;
	int prev = 1;
	int cur = 2;
	int count = 3;
	// vector<int> good(N,0);
	while(cur <N)
	{
		// good[cur] = 1;
		fib[cur] = count;
		cur+=prev;
		prev = cur - prev;
		count++;
		//cout<<cur<<" "<<cur<<" "<<1<<endl;

	}
	good.insert(1);
	for(map<int,int> :: iterator itr = fib.begin();itr!=fib.end();itr++)
	{
		int f = (*itr).first;
		//cout<<f<<endl;
		set<int> new_good;
		for(set<int> :: iterator itr2 = good.begin();itr2!=good.end();itr2++)
		{
			long long int p = f;
			int cur = (*itr2);
			while(p*cur < N)
			{
				new_good.insert(p*cur);
				//cout<<"inserting "<<p*cur<<endl;
				p*=f;
			}
		}
		good.insert(new_good.begin(),new_good.end());
	}
	//cout<<good.size()<<endl;
	vector<int> sorted_good;
	sorted_good.push_back(-1);
	sorted_good.push_back(0);

	for(set<int> :: iterator itr = good.begin();itr!=good.end();itr++)
		sorted_good.push_back(*itr);
	//cout<<sorted_good.size()<<endl;
	int t;
	cin>>t;
	int size = sorted_good.size();


	while(t>0)
	{
		t--;
		int l,r,n;
		cin>>l>>r>>n;
		//int i = bs(l,sorted_good);
		int i = lower_bound(sorted_good.begin(),sorted_good.end(), l) - sorted_good.begin();
		//cout<<i<<" "<<sorted_good[i]<<endl;
		if(i+n-1 <size && sorted_good[i+n-1]<=r)
		{
			cout<<sorted_good[i+n-1]<<" ";
			print(sorted_good[i+n-1],fib,sorted_good);
		}
		else
			cout<<-1<<endl;
	}
	
	return 0;
}

// vector< int > factors(N,1);

	// for(int i=2;i<N;i++)
	// {
	// 	if(factors[i] == 1)
	// 	{
	// 		for(int j=i;j<N;j+=i)
	// 			factors[j] = i;
	// 	}
	// }

// count = 0;
	// for(int i=4;i<N;i++)
	// {
	// 	if(good[factors[i]] && good[i/factors[i]])
	// 	{
	// 		good[i]=1;
	// 		count++;
	// 	}
	// }
	// cout<<count<<endl;

	