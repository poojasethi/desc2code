    #include<stdio.h>		/*	 ry_7	*/
    #include<stdlib.h>
    #include<string.h>
    #include<queue>
     
     #define gc getchar_unlocked
void scanint(long long &x)
{
register long long c = gc();
x = 0;
long long neg = 0;
for(;((c<48 || c>57) && c != '-');c = gc());
if(c=='-') {neg=1;c=gc();}
for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
if(neg) x=-x;
}
#define pc putchar_unlocked
void printlong(long long n)
{
char op[41];
int size = 40;
while(n)
{
op[size--] = n%10+'0';
n/=10;
}
for(int i=size+1;i<41;i++)
pc(op[i]);

}
    using namespace std;
     
    typedef struct T_{
    char str[110];
    long long v;
    char p;
    }T;
     
    long long max_size = 100000000;
     
    long long size = 0;
    T *arr;
     
    int compare(const void *a,const void * b)
    {
    return ((T *)a)->v - ((T *)b)->v;
    }
     
    long long smallest(long long key,long long l,long long h)
    {	
    if(l > h)
    return -1;
    long long mid = l + (h-l)/2;
    if(arr[mid].v < key)
    return smallest(key,mid+1,h);
    long long ind = smallest(key,l,mid-1);
    if(ind == -1)
    return mid;
    if(ind < mid)
    return ind;
    else return mid;
    }
     
    long long largest(long long key,long long l,long long h)
    {
    if(l > h)
    return -1;
    long long mid = l + (h-l)/2;
    if(arr[mid].v > key)
    return largest(key,l,mid-1);
    long long ind = largest(key,mid+1,h);
    if(ind == -1)
    return mid;
    if(ind > mid)
    return ind;
    else return mid;
    }
     
    int main()
    {
    long long i,j,k;
    arr = (T *)malloc(sizeof(T) * 35000);
    strcpy(arr[0].str,"#");
    strcpy(arr[1].str,".");
    arr[0].v = 1;
    arr[1].v = 1;
    arr[0].p = arr[1].p = 0;
    size = 2;
    for(i=2;i<39;i++)
    {
    arr[i].v = arr[i-1].v + arr[i-2].v;
    for(j=0;j<i+1;j++)
    arr[i].str[j] = '.';
    arr[i].str[j] = '\0';
    size++;
    }
    arr[0].v = 0;
    arr[5].v = arr[size-1].v;
    strcpy(arr[5].str,arr[size-1].str);
    size--;
    arr[11].v = arr[size-1].v;
    strcpy(arr[11].str,arr[size-1].str);
    size--;
    qsort(arr,size,sizeof(T),compare);
    for(j=2;j<size;j++)
    arr[j].p = j;
    queue<T> q;
    for(i=2;i<37;i++)
    {
    T temp;
    temp.v = arr[i].v;
    strcpy(temp.str,arr[i].str);
    temp.p = arr[i].p;
    q.push(temp);
    }
    while(!q.empty())
    {
    T t = q.front();
    for(j=t.p;j<37;j++)
    {	
    arr[size].v = t.v * (arr[j].v);
    arr[size].p = j;
    if(arr[size].v <= max_size)
    {
    strcpy(arr[size].str,t.str);
    strcat(arr[size].str,"#");
    strcat(arr[size].str,arr[j].str);
    T temp;
    temp.v = arr[size].v;
    strcpy(temp.str,arr[size].str);
    temp.p = arr[size].p;
    q.push(temp);
    size++;
    }
    else break;
    }
    q.pop();
    }
    qsort(arr,size,sizeof(T),compare);
    long long ti,test;
    long long L,R,N,il,ir;
    scanint(test);
    for(ti=0;ti<test;ti++)
    {
    scanint(L);scanint(R);scanint(N);
  
    il = smallest(L,0,size-1);
    if(il != -1)
    {	
    ir = largest(R,il,size-1);
    if(ir != -1 && ir - il +1 >= N && il -1 + N < size)
    //{printlong(arr[il-1+N].v);
    //printf("%s\n",arr[il-1+N].str);} 
    printf("%lld %s\n",arr[il-1+N].v,arr[il-1+N].str);
    else
    printf("-1\n");
    }
    else
    printf("-1\n");
    }
    return 0;
    } 