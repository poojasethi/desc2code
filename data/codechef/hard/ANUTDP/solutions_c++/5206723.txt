#include <string.h>
#include <string>
#include <stdio.h>
#include <iostream>
#include <map>
#include <set>
#include <bitset>
#include <vector>
#include <algorithm>
#include <math.h>

#define N 100000003
#define NN 40000
#define M 1000000007

#define min(a,b) ((a) <= (b) ? (a) : (b))
#define max(a,b) ((a) >= (b) ? (a) : (b))

using namespace std;

int s[100], v[NN];

map<int,int> mymap, mp2;
//set<int> myset, ms2;
//set<int>::iterator it, it1,it2;
map<int, int>::iterator mit, mit1,mit2,it, it1,it2;

int main () {
	
	int i, j, k, t, tst, l, fs, dim, ok, fr, nk;
	int y, m, n, x, d, mw;
	int c1, r1, c2, r2;
	int mi, ma, z, sn;
	long long rez;
	
	s[0] = 1;
	s[1] = 1;
	i = 1;
	//v[0] = v[1] = 1;
	while (s[i] < N) {
		s[i+1] = s[i] + s[i-1];
		//v[s[i]] = i;
		i++;
	}
	nk = i+1;
	
	//printf("nk %d \n",nk);
	k = 0;
	x = 1;
	long long p, q;
	k = 0;
	mymap.insert(make_pair(1,1));
	for (j = 2; j< nk; j++) {
		p = s[j];
		while (p < N) {
			//ms2.clear();
			for (it=mymap.begin(); it!=mymap.end(); ++it) {
				//k++;
				x = it->first;
				q = p * x;
				if (q < N) {
					mymap.insert(make_pair(q,j));
				}
				else
					break;
			}
		/*	for (it=ms2.begin(); it!=ms2.end(); ++it) {
				x = *it;
				myset.insert(x);
			}
		*/
			p = p * s[j];
		}
	}
	
	mymap.insert(make_pair(0, 1));
	
	k = 0;
	for (it=mymap.begin(); it!=mymap.end(); ++it) {
		x = it->first;
		v[k] = x;
		mp2.insert(make_pair(x, k));
		k++;
	}
	
	
	
	//printf("multime %d %d\n", k, mymap.size());
	
	scanf("%d", &tst);
	
	for (t = 0; t < tst; t++) {
		scanf("%d %d %d", &x, &y, &n);
		
		j = -1;
		
		it1 = mymap.lower_bound(x);
		
		if (it1 != mymap.end()) {
			it = mp2.find(it1->first);
			i = it->second;
			
			if (i+n-1 < k && v[i+n-1] <= y)
				j = v[i+n-1];
			
		}
			
		//it2 = mymap.upper_bound(y);
		
	/*	for (it=it1; it!=it2; ++it) {
				n--;
				if(!n) {
					j = it->first;
					//printf("gasit %d \n",i);
					break;
				}
		}
	*/
		printf("%d ",j);
			
		if (!j){
			printf("##");
		}
		else if (j == 1)	{
			printf(".");
		}	
		else if (j > 1) {
		
			//printf("j %d j\n",j);
			
			mit = mymap.find(j);
			y = mit->second;
			j = j / s[y];
			
			for(i = 0; i<=y; i++)
					printf(".");
			while (j > 1) {
				mit = mymap.find(j);
				y = mit->second;
				j = j / s[y];
				printf("#");
				for(i = 0; i<=y; i++)
					printf(".");
			}
		
			
		}
		
		printf("\n");	
		
	}    	
	return 0;
}