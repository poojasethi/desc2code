#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <memory.h>
#include <complex>
#include <numeric>
using namespace std;
#pragma comment(linker, "/STACK:256000000")
#define mp make_pair
#define pb push_back
#define all(C) (C).begin(), (C).end()
#define sz(C) (int)(C).size()
#define PRIME 1103
#define PRIME1 31415
#define INF ((1ll << 30) - 1)
#define MOD 1000000007
#define FAIL ++*(int*)0
#define EPS 1e-6
template<class T> T sqr(T a) {return a * a;}
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pi64;
typedef pair<int, pii> piii;
typedef vector<int> vi;
typedef vector<int64> vi64;
typedef vector<vi64> vvi64;
typedef vector<pi64> vpi64;
typedef vector<vpi64 > vvpi64;
typedef vector<pii> vpii;
typedef vector<vector<int> > vvi;
typedef vector<vvi> vvvi;
typedef vector<vector<pair<int, int > > > vvpii;
typedef vector<vector<vector<pair<int, int > > > > vvvpii;
typedef complex<long double> cd;
//------------------------------------------------------------
int n, l, r;
void init()
{
	scanf("%d%d%d", &l, &r, &n);
}
map <int, int> is;
map <int, int> :: iterator it;
pii fib[40000];
int lev;
int find(int x)
{
	int l = 0, r = lev - 1, mid, ot = lev;
	while(l <= r)
	{
		mid = (l + r) >> 1;
		if (fib[mid].first < x)
			l = mid + 1;
		else
		{
			ot = mid;
			r = mid - 1;
		}
	}
	return ot;
}
void precal()
{
	is[1] = 1;
	it = is.begin();
	while(it != is.end())
	{
		int i = (*it).first;
		int p1 = i;
		int p = 2 * i;
		while(p <= 100000000)
		{
			//cerr << p << endl;
			is[p] = p1;
			int t = p;
			p = p1 + p;
			p1 = t;
		}
		it++;
	}
	for(it = is.begin(); it != is.end(); ++it)
		fib[lev++] = *it;
	for(int i = 0; i < lev; ++i)
	{
		fib[i].second = find(fib[i].second);
	}
}
void solve()
{
	if (l == 0)
		n--;
	if (!n)
	{
		cout << "0 #" << endl;
		return;
	}
	int ind = find(l);
	n--;
	if (ind + n >= lev || fib[ind + n].first > r)
	{
		cout << -1 << endl;
		return;
	}
	cout << fib[ind + n].first << ' ';
	string ot;
	ind += n;
	if (ind + n == 0)
	{
		cout << '.' << endl;
		return;
	}
	int cur = fib[ind].first;
	int next = fib[fib[ind].second].first;
	while(cur != 1)
	{
		int q = 0;
		if (cur == 2 * next && next != 1)
		{
			q = 1;
			ot += "...#";
		}
		else
			ot += '.';
		int t = cur;
		if (q)
		{
			cur = next;
			next = is[next];
		}
		else
		{
			cur = next;
			next = t - next;
		}
	}
	ot += "..";
	reverse(ot.begin(), ot.end());
	cout << ot << endl;
	
}
int main()
{
#ifdef WIN32
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	precal();
	int t;
	scanf("%d", &t);
	for(int i = 0; i < t; ++i)
	{
		init();
		solve();
	}
	return 0;
}
