
#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <memory.h>
#include <complex>
#include <numeric>
using namespace std;
#pragma comment(linker, "/STACK:256000000")
#define mp make_pair
#define pb push_back
#define all(C) (C).begin(), (C).end()
#define sz(C) (int)(C).size()
#define PRIME 1103
#define PRIME1 31415
#define INF ((1ll << 30) - 1)
#define MOD 1000000007
#define FAIL ++*(int*)0
#define EPS 1e-8
template<class T> T sqr(T a) {return a * a;}
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pi64;
typedef pair<int, pii> piii;
typedef vector<int> vi;
typedef vector<int64> vi64;
typedef vector<vi64> vvi64;
typedef vector<pi64> vpi64;
typedef vector<vpi64 > vvpi64;
typedef vector<pii> vpii;
typedef vector<vector<int> > vvi;
typedef vector<vvi> vvvi;
typedef vector<vector<pair<int, int > > > vvpii;
typedef vector<vector<vector<pair<int, int > > > > vvvpii;
typedef complex<long double> cd;
//------------------------------------------------------------

struct Node
{
    vi mult;
    int val;

    bool operator < (const Node &t) const
    {
        return val < t.val;
    }

    Node() {}

    Node(int val) : val(val) {}
};

const int MAX = 100000001;
vector<Node> goodVal;
vi fib;

set<int> was;

void gen(Node t)
{
    if(was.find(t.val) != was.end())
        return;

    goodVal.pb(t);
    was.insert(t.val);

    for(int i = 0; i < sz(fib); ++i)
    {
        if(t.val * 1ll * fib[i] < MAX)
        {
            t.mult.pb(i);
            t.val *= fib[i];
            gen(t);
            t.mult.pop_back();
            t.val /= fib[i];
        }
    }
}

void precalc()
{
    int a = 1, b = 2;
    while(b < MAX)
    {
        fib.pb(b);
        int c = a + b;
        a = b;
        b = c;
    }
    Node t;
    t.val = 1;
    t.mult.pb(-2);
    gen(t);

    Node zero(0);
    goodVal.pb(zero);
    sort(all(goodVal));
}

int main()
{
#ifdef __APPLE__
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    precalc();

    int t;
    scanf("%d", &t);
    while(t--)
    {
        int l, r, n;
        scanf("%d%d%d", &l, &r, &n);
        int ind1 = lower_bound(all(goodVal), Node(l)) - goodVal.begin();
        int ind2 = upper_bound(all(goodVal), Node(r)) - goodVal.begin();

        if(ind2 - ind1 < n)
        {
            puts("-1");
            continue;
        }

        Node res = goodVal[ind1 + n - 1];
        printf("%d ", res.val);
        for(int i = 0; i < sz(res.mult); ++i)
        {
            for(int j = 0; j < res.mult[i] + 3; ++j)
                printf(".");
            if(i != sz(res.mult) - 1)
                printf("#");
        }

        if(!res.val)
            printf(".##.");
        printf("\n");
    }
    return 0;
}
