#include <bits/stdc++.h>

#define MAX 40010
#define MAXF 40

using namespace std;

typedef long long int ll;

int T;
int N;
int L,R;
vector<int> v;
set<int> num;
int f[MAXF];
map<int,int> pai;
vector<int> resp;

void bckt(int tot,int ult,int acum){
    if(!tot) return;
    num.insert(acum);
    for(int i=ult;i<=tot && i<MAXF;i++){
        if(acum > 100000000 / f[i]) break;
        pai[acum*f[i]]=i+1;
        bckt(tot-i,i,acum*f[i]);
    }
}

/*bool bckt2(int tot,int ult){
    if(tot == 1){
        for(int i=0;i<resp.size();i++){
            if(i){
                printf("#");
            }
            for(int j=0;j<=resp[i];j++){
                printf(".");
            }
        }
        printf("\n");
        return true;
    }

    for(int i=ult;i<MAXF;i++){
        if(f[i]>tot) break;
        if(tot%f[i] == 0){
            resp.push_back(i);
            if(bckt2(tot/f[i],i)) return true;
            resp.pop_back();
        }
    }

    return false;
}*/

int main(){

    f[0]=f[1]=1;
    for(int i=2;i<MAXF;i++)
        f[i]=f[i-1]+f[i-2];

    num.insert(0);

    bckt(10000,2,1);

    //printf("num.size:%d\n",num.size());

    for(set<int >::iterator it= num.begin();it!=num.end();it++){
        v.push_back( *it );
    }

    scanf("%d",&T);

    while(T--){
        scanf("%d %d %d",&L,&R,&N);

        int pos=lower_bound(v.begin(),v.end(),L)-v.begin();
        if(pos+N-1 >= v.size()){
            printf("-1\n");
            continue;
        }

        if(v[pos+N-1] > R){
            printf("-1\n");
            continue;
        }

        printf("%d ",v[pos+N-1]);

        if(v[pos+N-1] == 0){
            printf(".##\n");
            continue;
        }

        resp.clear();
        resp.push_back(1);
        //bckt2(v[pos+N-1],2);
        int aux=v[pos+N-1];

        while(aux>1){
            resp.push_back(pai[aux]);
            aux/=f[pai[aux]-1];
        }

        for(int i=0;i<resp.size();i++){
            if(i){
                printf("#");
            }
            for(int j=0;j<resp[i];j++){
                printf(".");
            }
        }
        printf("\n");
    }

}
