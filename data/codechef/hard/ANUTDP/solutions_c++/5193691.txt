#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

int cnt;
int a[40333];
map<int, bool> used;

long long f[100];
void rec(long long xx, int y) {
  if (xx > 100000000) return;
  int x = (int)xx;
  if (!used[x]) {
    cnt++;
    a[cnt] = x;
    used[x] = true;
  }
  if (f[y] * x > 100000000) return;
  rec(x, y + 1);
  while (f[y] * x <= 100000000) {
    x *= f[y];
    if (!used[x]) rec(x, y + 1);
  }
}

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  f[0] = f[1] = 1;
  for (int i = 2; i <= 50; i++) {
    f[i] = f[i - 1] + f[i - 2];
  }
  cnt = 1;
  a[cnt] = 0;
  rec(1, 2);
  sort(a + 1, a + cnt + 1);
  int tc;
  scanf("%d", &tc);
  while (tc--) {
    int lb, rb, n;
    scanf("%d%d%d", &lb, &rb, &n);
    int l = 0, r = cnt + 1;
    while (l + 1 < r) {
      int c = (l + r) / 2;
      if (a[c] < lb)
        l = c;
      else
        r = c;
    }
    if (lb == 0 && n == 1) {
      printf("0 .##.\n");
      continue;
    }
    if (l + n > cnt) {
      printf("-1\n");
      continue;
    }
    if (a[l + n] > rb) {
      printf("-1\n");
      continue;
    }
    int x = a[l + n];
    printf("%d ", x);
    if (x == 1) {
      printf(".\n");
      continue;
    }
    int was = false;
    while (x > 1) {
      if (was) printf("#");
      was = true;
      for (int j = 2; j <= 50; j++) {
        if (x % f[j] == 0 && used[x / f[j]]) {
          for (int u = 1; u <= j + 1; u++) {
            printf(".");
          }
          x /= f[j];
          break;
        }
      }
    }
    printf("\n");
  }

#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
