#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

int dp[1003][1003][3][3];
string s[1003];
int n;

/*
6
ba a bb a ba ba 
*/

//minimum strings to delete from s[l]..s[r] given first x letters of s[l] have matched last y letters of s[r]
//such that remaining strings form a palindrome
int f(int l , int r , int x , int y) {
	
	if (l > r) {
		if (x == 0 && y == 0)
			return 0;
		return n + 1;
	}

	//single string
	if (l == r) {

		int len = s[l].size();
		int left = x;
		int right = len - 1 - y;

		if (left > right)
			return n + 1;

		if (dp[l][r][x][y] != -1)
			return dp[l][r][x][y];
		
		int ans = n + 1;	
		
		if (x == 0 && y == 0)
			ans = 1;

		for(int i = left , j = right;j > i;i++,j--)		//s is a palindrome
			if (s[l][i] != s[l][j])
				return dp[l][r][x][y] = ans;

		return dp[l][r][x][y] = 0;
	}

	if (x > s[l].size() || y > s[r].size())
		return n + 1;

	int &ans = dp[l][r][x][y];
	
	if (ans != -1)
		return ans;

	ans = n + 1;
	if (x == 0)
		ans = min(ans , 1 + f(l + 1 , r , x , y));
	if (y == 0)
		ans = min(ans , 1 + f(l , r - 1 , x , y));

	// cout << "pre " << ans << '\n';

	/*
	a b a ba
	*/

	int left = x;
	int right = s[r].size() - 1 - y;

	if (x == s[l].size() && y == s[r].size()) {
		// cout << "both done\n";
		ans = min(ans , f(l + 1 , r - 1 , 0 , 0));
	}
	else if (x == s[l].size()) {	
		//string l has been completely matched with string r
		//therefore now string l + 1 matches with y - s[l].size()
		ans = min(ans , f(l + 1 , r , 0 , y ));
	}
	else if (y == s[r].size()) {
		ans = min(ans , f(l , r - 1 , x , 0));
	}
	//there are letters left to be matched in s[l] and s[r]
	else if (s[l][left] == s[r][right]) {
		ans = min(ans , f(l , r , x + 1 , y + 1));
	}

	// cout << "left right x y " << l << ' ' << r << ' ' << x << ' ' << y << '\n';
	// cout << ans << '\n';

	return ans;
}

int main(int argc, char const *argv[])
{
	fast;

	// FILE;

	CASES {
		cin >> n;
		rep(i , n)
			cin >> s[i];
		
		rep(i , n + 1)
			rep(j , n + 1)
				rep(k , 3)
					rep(l , 3)
						dp[i][j][k][l] = -1;
		
		cout << f(0 , n - 1 , 0 , 0) << '\n';
	}

	return 0;
}

/*

1
13
b a b ba bb a b ba a bb a ba ba 


5
20
b aa ba a b ba bb a b ba b b b a aa bb a ba ba ab 
20
bb ba a aa ba a bb bb ba aa a b a a b a ab b ba aa 
20
ba b ab a aa aa ab a a b bb a a bb b a aa b ba ba 
20
bb a bb b ab a b a aa ab b ab a b bb aa bb b a ba 
20
a aa ba b bb aa a b a a ab ab b a aa bb b ba ba bb
*/