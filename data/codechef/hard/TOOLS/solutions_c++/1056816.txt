#include <cstdio>
#include <algorithm>
#define N 8
#define fi(a, b, c) for(int a = (b); a < (c); a++)
using namespace std;

inline int pow(int x){
	int rt = 1;
	while(x--) rt *= 3;
	return rt;
}

int t, n, m, y[N + N], x[N + N], d[N + N][6561], A;

int main(){
	scanf("%d", &t);
	while(t--){
		scanf("%d", &n);
		fi(i, 0, n) scanf("%d %d %d %d", &y[i], &x[i], &y[i + n], &x[i + n]);
		
		m = pow(n);
		fi(i, 0, n) fi(j, 0, m) d[i][j] = 1 << 30;
		
		fi(i, 1, m){
			int o[N], t[N], O = 0, T = 0, r = i;
			fi(j, 0, n){
				int q = r % 3;
				if(q == 1) o[O++] = j;
				if(q == 2) t[T++] = j;
				r /= 3;
			}
			
			if(O > 2) continue;
			if(O == 1 && !T){
				d[o[0]][i] = y[o[0] + n] + x[o[0] + n];
				continue;
			}
			
			fi(j, 0, O){
				fi(k, 0, O) if(j != k) d[o[j]][i] = min(d[o[j]][i],
				d[o[k]][i - pow(o[j])] + abs(y[o[j] + n] - y[o[k] + n]) +
				abs(x[o[j] + n] - x[o[k] + n]));
				
				fi(k, 0, T) d[o[j]][i] = min(d[o[j]][i],
				d[t[k]][i - pow(o[j])] + abs(y[o[j] + n] - y[t[k]]) +
				abs(x[o[j] + n] - x[t[k]]));
			}
			
			fi(j, 0, T){
				fi(k, 0, O) d[t[j]][i] = min(d[t[j]][i],
				d[o[k]][i - pow(t[j])] + abs(y[t[j]] - y[o[k] + n]) +
				abs(x[t[j]] - x[o[k] + n]));
				
				fi(k, 0, T) if(j != k) d[t[j]][i] = min(d[t[j]][i],
				d[t[k]][i - pow(t[j])] + abs(y[t[j]] - y[t[k]]) +
				abs(x[t[j]] - x[t[k]]));
				
				d[t[j]][i] = min(d[t[j]][i], d[t[j]][i - pow(t[j])] + abs(y[t[j] + n] - y[t[j]]) + abs(x[t[j] + n] - x[t[j]]));
			}
		}
		
		A = 1 << 30;
		fi(i, 0, n) A = min(A, d[i][m - 1] + y[i] + x[i]);
		
		printf("%d\n", A);
	}
}
