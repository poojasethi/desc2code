#include <iostream>
#include <algorithm>
using namespace std;

const int Maxn = 17;
const int MaxN = 1 << Maxn-1;

int t, n, N, best[MaxN][Maxn];
pair <int, int> pl[Maxn];

int Dist(int a, int b)
{
    return abs(pl[a].first - pl[b].first) + abs(pl[a].second - pl[b].second);
}

int Best(int mask, int st)
{
     if (mask == N-1) return Dist(st, 0);
     if (best[mask][st] == -1) {
                        int b = -1;
                        for (int i = 1; i <= n; i += 2)
                           if ((mask & (1 << i)) && !(mask & (1 << i-1))) {
                                    int tmp = Best(mask | (1 << i-1), i) + Dist(st, i);
                                    if (b == -1 || tmp < b) b = tmp;
                           }
                        int hold = 0;
                        for (int i = 1; i <= n; i += 2)
                           if ((mask & (1 << i)) && !(mask & (1 << i-1))) hold++;
                        if (hold < 2)
                           for (int i = 1; i <= n; i += 2) 
                              if (!(mask & (1 << i))) {
                                         int tmp = Best(mask | (1 << i), i+1) + Dist(st, i+1);
                                         if (b == -1 || tmp < b) b = tmp;
                              }
                        best[mask][st] = b;
     }
     return best[mask][st];
}

int main()
{
    cin >> t;
    while (t--) {
          cin >> n; n *= 2; N = 1 << n;
          for (int i = 1; i <= n; i++) cin >> pl[i].first >> pl[i].second;
          pl[0].first = pl[0].second = 0;
          for (int i = 0; i < N; i++)
             for (int j = 0; j <= n; j++) best[i][j] = -1;
          cout << Best(0, 0) << endl;
    }
    return 0;
}
