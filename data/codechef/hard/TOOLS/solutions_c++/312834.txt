#include <iostream>
#include <cstdio>
#include <cctype>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cassert>
#include <string.h>

using namespace std;

#define GI ({int t;scanf("%d",&t);t;})
#define GL ({LL t;scanf("%lld",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define ROF(i,a,b) for(int i=a;i>b;i--)
#define SET(x,a) memset(x,a,sizeof(x));
#define all(a) a.begin(),a.end()
#define rall(a) a.rbegin(),a.rend()
#define tr(i,a) for( __typeof__(a.begin()) i=a.begin();i!=a.end();i++)
#define pb push_back
#define sz(a) (int)(a.size())
#define INF (int)1e9
#define EPS (double)1e-9

#define is istringstream
#define os ostringstream
#define lb lower_bound
#define ub upper_bound
#define bs binary_search

typedef unsigned long long ULL;
typedef long long LL;
typedef set <int> si;
typedef pair< int,int > ii;
typedef pair< int, ii > pi;
typedef vector< ii > vii;
typedef vector < vii > vvii;
typedef vector< int > vi;
typedef vector< vi > vvi;

//char ch;

int mem[9][9][9][(1<<8)+1][3];

int chefx[9], chefy[9];
int toolx[9], tooly[9];
int n;

int go(int i, int t1, int t2, int mask, int flag){
    if(mask == (1 << n) - 1)    return chefx[i] + chefy[i];
    int &ret = mem[i][t1][t2][mask][flag];
    if(ret >= 0)    return ret;
    ret = INF;
    int curx, cury;
    if(flag == 2)    curx = cury = 0;
    else if(flag == 0)    curx = chefx[i], cury = chefy[i];
    else curx = toolx[i], cury = tooly[i];
    if(t1 == n){
	    REP(j, n){
		    if((1 << j) & mask)    continue;
			ret = min(ret, abs(toolx[j] - curx) + abs(tooly[j] - cury) + go(j, j, t2, mask, 1));
		}
	}
    if(t2 == n){
	    REP(j, n){
		    if((1 << j) & mask)    continue;
			ret = min(ret, abs(toolx[j] - curx) + abs(tooly[j] - cury) + go(j, t1, j, mask, 1));
		}
	}
	if(t1 != n)    ret = min(ret, abs(chefx[t1] - curx) + abs(chefy[t1] - cury) + go(t1, n, t2, mask | (1 << t1), 0));
	if(t2 != n)    ret = min(ret, abs(chefx[t2] - curx) + abs(chefy[t2] - cury) + go(t2, t1, n, mask | (1 << t2), 0));
	return ret;
}

int main(){
	int _ = GI;
	while(_--){
		n = GI;
		REP(i, n)    chefx[i] = GI, chefy[i] = GI, toolx[i] = GI, tooly[i] = GI;
		//memset(mem, -1, sizeof( mem ));
		REP(i, n + 1)    REP(j, n + 1)    REP(k, n + 1)    REP(l, (1 << n) + 1)    REP(m, 3)    mem[i][j][k][l][m] = -1;
		printf("%d\n", go(n, n, n, 0, 2));
	}
	// GI;
	return 0;
}
