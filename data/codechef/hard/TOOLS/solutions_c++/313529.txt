#pragma comment(linker,"/STACK:64000000")
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <cmath>
#include <map>
#include <set>
#include <ctime>
#include <algorithm>
#include <memory.h>

using namespace std;

#define WR printf
#define RE scanf
#define PB push_back
#define SE second
#define FI first

#define FOR(i,k,n) for(int i=(k); i<=(n); i++)
#define DFOR(i,k,n) for(int i=(k); i>=(n); i--)
#define SZ(a) (int)((a).size())
#define FA(i,v) FOR(i,0,SZ(v)-1)
#define RFA(i,v) DFOR(i,SZ(v)-1,0)
#define CLR(a) memset(a, 0, sizeof(a))

#define LL long long
#define VI  vector<int>
#define PAR pair<int ,int>
#define o_O 1000000000 
void __never(int a){printf("\nOPS %d", a);}
#define ass(s) {if (!(s)) {__never(__LINE__);cout.flush();cerr.flush();abort();}}

int dp[70000][20];
bool good[70000];
int n;
int px[20], py[20];

void sol()
{
	FOR(a,0,(1<<(n+n))-1) FOR(b,0,n+n-1)
		dp[a][b] = o_O;

	FOR(a,0,n-1) dp[0][a] = abs(px[a])+abs(py[a]);

	FOR(a,0,(1<<(n+n))-1)
	{
		good[a] = false;
		int tools = (a&((1<<n)-1));
		int cooks = (a>>n);
		if ((tools&cooks)==cooks)
		{
			int tmp = (tools^cooks);
			int sum = 0;
			FOR(b,0,n-1) if ((tmp>>b)&1)
			{
				sum++;
				if (sum==3) break;
			}
			if (sum<=2) good[a] = true;
		}
	}

	FOR(a,0,(1<<(n+n))-1) FOR(c,0,n+n-1)
		if (!((a>>c)&1)) if (good[a^(1<<c)])
			FOR(b,0,n+n-1) if (dp[a][b] < o_O)
				dp[a^(1<<c)][c] = min(dp[a^(1<<c)][c],
					dp[a][b] + abs(px[b]-px[c]) + abs(py[b]-py[c]));
	int ans=o_O;
	FOR(a,n,n+n-1) ans = min(ans, dp[(1<<(n+n))-1][a] + abs(px[a]) + abs(py[a]));
	WR("%d\n", ans);
}

int main()
{
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	int t;
	RE("%d", &t);
	FOR(a,1,t)
	{
		RE("%d", &n);
		FOR(b,0,n-1) RE("%d%d%d%d", &px[b+n], &py[b+n], &px[b], &py[b]);
		sol();
	}
	return 0;
}