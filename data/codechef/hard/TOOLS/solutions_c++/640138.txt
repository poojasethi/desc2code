#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cassert>
#define FOR(i,a,b) for(int i=a; i<=b; i++)
#define REP(i,N) FOR(i,0,N-1)

using namespace std;

int N;
int X[2][9], Y[2][9];

int memo[2][9][9][9][1<<9];

int dist(int loc1, int cur1, int loc2, int cur2)
{
    return abs(X[loc1][cur1]-X[loc2][cur2])+
        abs(Y[loc1][cur1]-Y[loc2][cur2]);
}
const int INF = 1000000000;



int solve(const int loc, const int cur, const int hand1, const int hand2, const int entregado) {
    if(entregado==(1<<(N+1))-1) {
        return dist(loc,cur, 1, 0); //distancia a casa
    }
   
    int res=memo[loc][cur][hand1][hand2][entregado];
    if(res!=-1) return res;

    res=INF;
   
    if(loc==1 || hand1==0 || hand2==0) { //ir por una herramienta
        assert(hand1==0 || hand2==0);
        FOR(i,1,N) if(i!=hand1 && i!=hand2 &&  0==(entregado&(1<<i))) {
            int newh1=hand1, newh2=hand2;
            if(newh1==0) newh1=i; else newh2=i;
            res = min(res,
                dist(loc,cur, 0, i) +
                solve(0, i, newh1, newh2, entregado) );
        }
    }
   
    if(hand1!=0) { //entregar herramienta 1
    	assert( (entregado&(1<<hand1)) == 0 );
        res = min(res,
            dist(loc, cur, 1, hand1) +
            solve(1, hand1, 0, hand2, entregado|(1<<hand1)) );
    }
    if(hand2!=0) {
    	assert( (entregado&(1<<hand2)) == 0 );    
    	res = min(res,
    		dist(loc, cur, 1, hand2) +
    		solve(1, hand2, hand1, 0, entregado|(1<<hand2)) );
    }
    
    memo[loc][cur][hand1][hand2][entregado]=res;
    return res;
}

int main()
{
    int T;
    scanf("%d",&T);
    X[1][0]=Y[1][0]=0;
    X[0][0]=Y[0][0]=0;
    while(T--) {
        memset(memo,-1,sizeof(memo));
        scanf("%d",&N);
        REP(i,N)
            scanf("%d %d %d %d", &X[1][i+1], &Y[1][i+1], &X[0][i+1], &Y[0][i+1]);
        
        printf("%d\n",solve(1, 0, 0, 0, 1));
    }
}
