#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <map>
#include <queue>
#include <sstream>
#include <numeric>
#include <functional>
#include <set>
#include <cmath>
#include <stack>
#include <fstream>
#ifdef HOME_PC
#include <ctime>
#endif
using namespace std;

#pragma comment(linker,"/stack:16000000")
#pragma warning (disable : 4996)

#define ALL(v) v.begin(),v.end()
#define SZ(v) (int)v.size()
#define mset(A,x) memset((A),(x),sizeof(A))
#define FOR(i,start,N) for(int i=(start);i<(N);++i)
#define FORSZ(i,start,v) FOR(i,start,SZ(v))
#define REPSZ(i,v) FORSZ(i,0,v)
#define FORE(i,start,N) FOR(i,start,N+1)
#define make_unique(v) v.resize(unique(ALL(v))-v.begin())
#define debug(x) cout<<#x<<" = "<<x<<endl;
#define adebug(A,N) FOR(i,0,N) cout<<#A<<"["<<i<<"] = "<<A[i]<<endl;
#define adebug2d(a,n,m) FOR(i,0,n) { FOR(j,0,m) { cout<<a[i][j]<<" ";} cout<<endl;}
#define vdebug(v) REPSZ(i,v) cout<<#v<<"["<<i<<"] = "<<v[i]<<endl;
#define selfx(x,f,a) x = f(x,a)
#define sqr(x) ((x)*(x))


typedef pair<int,int> pii;
typedef long long i64;
typedef vector<int> VI; typedef vector< vector<int> > VVI;
typedef vector<string> VS;

const int inf = 1<<25;
const double eps = 1e-9;

const int MAXN = 15;
int cx[MAXN];
int cy[MAXN];
int tx[MAXN];
int ty[MAXN];

pii C[MAXN],T[MAXN];

int dist(const pii& A,const pii& B)
{
	return abs(A.first - B.first) + abs(A.second - B.second);
}

int n;

const pii O(0,0);
//
//int dist(int x0,int y0,int x1,int y1)
//{
//	return abs(x0-x1) + abs(y0-y1);
//}
//

int take1(int c1,int c2,int t1)
{
	return dist(C[c1],T[t1]) + dist(C[c2],T[t1]);
}
int take2(int c1,int c2,int t1,int t2)
{
	int ret = min(dist(C[c1],T[t1])+dist(C[c2],T[t2]), dist(C[c1],T[t2])+dist(C[c2],T[t1]));
	return ret + dist(T[t1],T[t2]);
}

int memo[1<<8][10][10];

int f(int served,int last,int hand)
{
	int& ret = memo[served][last][hand];
	if(ret!=-1) return ret;
	ret = inf;
	if( last == hand) return inf;
	if(served == (1<<last))
	{
		if(hand == n)
		{
			ret = take1(last,n,last);
		}
		else
		{
			ret = take2(n,last,last,hand);
		}
		return ret;
	}
	int nserved = served^(1<<last);
	for(int u = 0; u < n; ++u)
		if(nserved & (1<<u))
		{
			ret = min(ret, f(nserved,u,hand) + take1(u,last,last));

			if(n == hand) // nothing has
			{
				ret = min(ret, min(f(nserved,u,last) + dist(C[u],C[last]), f(nserved,u,0) + take1(last,u,last)));
			}
			else
			{
				ret = min(ret, f(nserved,u,last) + take1(u,last,hand));
				ret = min(ret, f(nserved,u,hand) + take1(u,last,last));
				ret = min(ret, f(nserved,u,n) + take2(u,last,hand,last));
			}

		}
	return ret;
}


int main()
{
#ifdef HOME_PC
	//freopen ("input.txt","r",stdin);
	freopen ("tools_in3.txt","r",stdin);
	//	freopen ("tools_in3.txt","w",stdout);
#endif

	//{
	//	int tests = 30;
	//	srand(117);
	//	printf("%d\n",tests);
	//	FOR(i,0,tests)
	//	{
	//		printf("%d\n",3);
	//		FOR(j,0,3)
	//		{
	//			printf("%d %d %d %d\n",rand()%6, rand()%6,rand()%6,rand()%6);
	//		}
	//	}
	//	return 0;
	//}



	int tt;
	scanf("%d",&tt);
	for(int cas = 1;cas<=tt;++cas)
	{	
		scanf("%d",&n);

		FOR(i,0,n)
			scanf("%d %d %d %d",&C[i].first,&C[i].second,&T[i].first,&T[i].second);

		C[n] = T[n] = O;

		mset(memo,-1);

		int ans = inf;
		int all = (1<<n)-1;
		FOR(i,0,n)
			ans = min(ans,f(all,i,n) + dist(O,C[i]));

		printf("%d\n",ans);
	}
#ifdef HOME_PC
	cerr<<endl<<"Execution time = "<<clock()<<" ms"<<endl;
#endif
	return 0;
}

