#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>

using namespace std;

int bit_count[256];
int sx[10], sy[10], tx[10], ty[10];
int n;
int dp[256][256][17];

int dis(int a, int b){
    int x1, y1, x2, y2;
    if(a == 0){
        x1 = 0; y1 = 0;
    }else if(a >= 1 && a <= n){
        x1 = sx[a - 1]; y1 = sy[a - 1];
    }else{
        x1 = tx[a - 1 - n]; y1 = ty[a - 1 - n];
    }

    if(b == 0){
        x2 = 0; y2 = 0;
    }else if(b >= 1 && b <= n){
        x2 = sx[b - 1]; y2 = sy[b - 1];
    }else{
        x2 = tx[b - 1 - n]; y2 = ty[b - 1 - n];
    }
    return abs(x1 - x2) + abs(y1 - y2);
}

int solve(int mask1, int mask2, int pos){
    if(mask2 == (1<<n) - 1) return dis(pos, 0);
    int &ret = dp[mask1][mask2][pos];
    if(ret != -1) return ret;
    ret = 1000000;
    if(bit_count[mask1] < 2){
        for(int i = 0; i < n; i++){
            if(((mask1 & (1<<i)) == 0) && ((mask2 & (1<<i)) == 0)){
                ret = min(ret, solve(mask1 + (1<<i), mask2, n + i + 1) + dis(pos, n + i + 1));
            }
        }
    }
    if(bit_count[mask1]){
        for(int i = 0; i < n; i++){
            if((mask1 & (1<<i)) && ((mask2 & (1<<i)) == 0)){
                ret = min(ret, solve(mask1 - (1<<i), mask2 + (1<<i), i + 1) + dis(pos, i + 1));
            }
        }
    }
    return ret;
}

int main(){
    //freopen("test.txt", "r", stdin);
    bit_count[0] = 0;
    for(int i = 0; i < 256; i++) bit_count[i] = bit_count[i >> 1] + (i & 1);
    int t;
    cin >> t;
    for(int i = 0; i < t; i++){
        memset(dp, -1, sizeof(dp));
        cin >> n;
        for(int j = 0; j < n; j++){
            cin >> sx[j] >> sy[j] >> tx[j] >> ty[j];
        }
        cout << solve(0, 0, 0) << endl;
    }
    return 0;
}
