#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <climits>
#include <numeric>
#include <vector>
#include <cmath>
#include <map>
using namespace std;
#define ll long long
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)
#define BUFSIZE (10000)
char inputbuffer[BUFSIZE];
char *ioptr=inputbuffer+BUFSIZE,*ioend=inputbuffer+BUFSIZE;
int input_eof=0;
#define getchar() ({if (ioptr >= ioend) init_input(); *ioptr++;})
#define eof() (ioptr>=ioend && input_eof)
#define eoln() ({if(ioptr >= ioend) init_input(); *ioptr == '\n';})
void init_input(){
	if (input_eof) return;
	int existing = BUFSIZE - (ioend - inputbuffer);
	memcpy(inputbuffer, ioend, existing);
	int wanted = ioend - inputbuffer;
	int count=fread(inputbuffer + existing, 1, wanted, stdin);
	if (count < wanted)input_eof = 1;
	ioend = inputbuffer + BUFSIZE - (wanted - count);
	while (*--ioend > ' ');
	ioend++;
	ioptr=inputbuffer;
}
inline void non_whitespace(){
	for(;;){
		if(ioptr>=ioend)init_input();
		if(*ioptr>' ')return;
		ioptr++;
	}
}
inline int getint(){
	non_whitespace();
	int neg=0;
	if(*ioptr=='-'){
		ioptr++;
		neg=1;
	}
	int n=0;
	while(*ioptr>' ')
		n=(n<<3)+(n<<1)+*ioptr++-'0';
	ioptr++;
	if(neg)
		n=-n;
	return n;
}
#define N 200005
#define oo 1000000000
#define sz(a) int(a.size())
#define pii pair<int,int>
pii cook[9],tool[9];
int dp0[9][9][1<<8],dp1[9][9][1<<8];
int dist(pii a,pii b)
{return abs(a.fi-b.fi)+abs(a.se-b.se);}
int main()
{
	//freopen("in.txt","r",stdin);
	int T,i,j,k,n,m,s,p,h,f;
	T=getint();
	//scanf("%d",&T);
	while(T--)
	{
	 n=getint();
	 //scanf("%d",&n);
	 for(i=1;i<=n;i++)
	 {
	  cook[i].fi=getint();
	  cook[i].se=getint();
	  tool[i].fi=getint();
	  tool[i].se=getint();
	  //scanf("%d%d%d%d",&cook[i].fi,&cook[i].se,&tool[i].fi,&tool[i].se);
	 }
	 pii start=mp(0,0);
	 memset(dp0,62,sizeof(dp0));
	 memset(dp1,62,sizeof(dp1));
	 for(p=1;p<=n;p++)
	 dp0[p][0][0]=dist(cook[p],start);
	 #define minto(a,b)  a=min(a,b)
	 for(s=0;s<(1<<n);s++)
	 {
	  for(p=1;p<=n;p++)
	  if(dp1[p][0][s]<oo)
	  for(f=1;f<=n;f++)
	  minto(dp0[f][0][s],dp1[p][0][s]+dist(tool[p],cook[f]));
	  for(p=1;p<=n;p++)
	  for(h=1;h<=n;h++)
	  if(dp1[p][h][s]<oo)
	  {
	   minto(dp1[h][0][s^(1<<(h-1))],dp1[p][h][s]+dist(tool[p],tool[h]));
	   for(f=1;f<=n;f++)
	   minto(dp0[f][h][s],dp1[p][h][s]+dist(tool[p],cook[f]));
	  }
	  for(p=1;p<=n;p++)
	  if(dp0[p][0][s]<oo)
	  {
	   for(f=1;f<=n;f++)
	   minto(dp0[f][p][s],dp0[p][0][s]+dist(cook[p],cook[f]));
	   minto(dp1[p][0][s^(1<<(p-1))],dp0[p][0][s]+dist(cook[p],tool[p]));
	  }
	  for(p=1;p<=n;p++)
	  for(h=1;h<=n;h++)
	  if(dp0[p][h][s]<oo)
	  {
	   	minto(dp1[h][p][s^(1<<(h-1))],dp0[p][h][s]+dist(cook[p],tool[h]));
	   	minto(dp1[p][h][s^(1<<(p-1))],dp0[p][h][s]+dist(cook[p],tool[p]));
	  }

	 }
	 int ans=oo;
	 for(p=1;p<=n;p++)
	 ans=min(ans,dp1[p][0][(1<<n)-1]+dist(tool[p],start));
	 printf("%d\n",ans);
	}
	return 0;
}
