// Author: Mahesh
#include <vector>
#include <string>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <ctype.h>
#include <bitset>

using namespace std;

#define REP(i, n) for(int i=0; i<(n); i++)
#define FOR(i, a, b) for(int i=(a); i<(b); i++)
#define IFOR(i, a, b) for(int i=(a); i>=(b); i--)
#define FORD(i, a, b, c) for(int i=(a); i<(b); i+=(c))

#define MAX(a, b) ((a)>(b)?(a):(b))
#define MIN(a, b) ((a)<(b)?(a):(b))
#define SI(x) ((int)x.size())
#define PB(x) push_back(x)
#define MP(a,b) make_pair(a, b)
#define SORT(a) sort(a.begin(),a.end())
#define ITER(it,a) for(typeof(a.begin()) it=a.begin();it!=a.end();it++)
#define ALL(a) a.begin(),a.end()
#define INF 1000000000
#define V vector
#define S string
#define FST first
#define SEC second
typedef V<int> VI;
typedef V<S> VS;
typedef long long LL;
typedef pair<int, int> PII;
PII arr[20];
int dis[20][20];
int dp[1<<8][1<<8][16];
bool valid(int i,int j, int n){
	if(!((1<<j) & i)) return false;
	int c=0;
	REP(i, n){
		if((i&(1<<(n+i))) && !(i&(1<<i))) return false;
		else if(!(i&(1<<(n+i))) && (i&(1<<i))) c++;
	}
	if(c>2) return false;
	return true;
}

int main()
{
	int t;
	cin>>t;
	while(t--){
		int n;
		scanf("%d",&n);
		REP(i,n){
			int a,b,c,d;
			scanf("%d %d %d %d", &a, &b, &c, &d);
			arr[i]=MP(c,d);
			arr[n+i]=MP(a,b);
		}
		REP(i, 2*n){
			REP(j, 2*n){
				dis[i][j] = abs(arr[i].FST-arr[j].FST)+abs(arr[i].SEC-arr[j].SEC);
			}
		}
		REP(i, 2*n){
			dp[(1<<n)-1][0][i]=abs(arr[i].FST)+abs(arr[i].SEC);
		}
		for(int i=(1<<n) - 2; i>=0; i--){
			for(int j1=0;j1<n;j1++){
				for(int j2 = j1+1;j2<n;j2++){
					if(!(i&(1<<j1)) && !(i&(1<<j1))){
						for(int k=0;k<2*n;k++){
							if(k<n && (k==j1 ||k==j2 || ((1<<k)&i)) || k>=n && (i&(1<<(k-n)))){
								int a=dis[k][j1+n] + dp[i|(1<<j1)][(1<<j2)][j1+n];
								int b=dis[k][j2+n] + dp[i|(1<<j2)][(1<<j1)][j2+n];
								dp[i][(1<<j1)+(1<<j2)][k]=min(a,b);
							}
						}
					}
				}
			}
			for(int j1=0;j1<n;j1++){
				if(!(i&(1<<j1))){
					for(int k=0;k<2*n;k++){
						if(k<n && (k==j1 || ((1<<k)&i)) || k>=n && (i&(1<<(k-n)))){
							dp[i][1<<j1][k] = dis[k][j1+n] + dp[i|(1<<j1)][0][j1+n];
							for(int p=0;p<n;p++){
								if(!(i&(1<<p)) && p!=j1){
								    int a=dis[k][p] + dp[i][(1<<j1)+(1<<p)][p];
								    dp[i][1<<j1][k]= min(dp[i][1<<j1][k], a);
								}
							}
						}
					}
				}
			}
			for(int k=0;k<2*n;k++){
				if(k<n && ((1<<k)&i) || k>=n && (i&(1<<(k-n)))){
					dp[i][0][k]= INF;
					for(int p=0;p<n;p++){
						if(!(i&(1<<p))){
							int a=dis[k][p]+dp[i][1<<p][p];
							dp[i][0][k] = min(dp[i][0][k], a);
						}
					}
				}
			}
		}
		int ans = INF;
		REP(i, n){
			int kk = abs(arr[i].FST)+abs(arr[i].SEC)+dp[0][1<<i][i];
		///	cout<<dp[1<<i][i]<<endl;
			ans = min(ans , kk);
		}
		cout<<ans<<endl;
	}
	return 0;
}
