#include <cstdio>
#include <algorithm>
#define N 8
#define M 3071
#define abs(a) ((a) < 0 ? -(a) : (a))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define fi(a, b, c) for(int a = (b); a < (c); a++)
using namespace std;

int t, n, m, c[6561], y[N + N], x[N + N], d[N][M], A;

inline int pow(int x){
	int rt = 1;
	while(x--) rt *= 3;
	return rt;
}

void odp(int g, int i, int z){
	if(g < 0){
		if(i){
			c[i] = ++m;
			
			int o[N], t[N], O = 0, T = 0, q = i;
			
			fi(j, 0, n){
				int r = q % 3;
				if(r == 1) o[O++] = j;
				if(r == 2) t[T++] = j;
				q /= 3;
			}
			
			fi(j, 0, n) d[j][m] = 1 << 30;
			
			if(O == 1 && !T){
				d[o[0]][m] = y[o[0] + n] + x[o[0] + n];
				return;
			}
			
			fi(j, 0, O){
				int a = o[j], I = c[i - pow(a)];
				
				fi(k, 0, O) if(j != k)
					d[a][m] = min(d[a][m], d[o[k]][I] + abs(y[a + n] - y[o[k] + n]) + abs(x[a + n] - x[o[k] + n]));
				
				fi(k, 0, T)
					d[a][m] = min(d[a][m], d[t[k]][I] + abs(y[a + n] - y[t[k]]) + abs(x[a + n] - x[t[k]]));
			}
			
			if(O < 2) fi(j, 0, T){
				int a = t[j], I = c[i - pow(a)];
				
				fi(k, 0, O)
					d[a][m] = min(d[a][m], d[o[k]][I] + abs(y[a] - y[o[k] + n]) + abs(x[a] - x[o[k] + n]));
				
				fi(k, 0, T) if(j != k)
					d[a][m] = min(d[a][m], d[t[k]][I] + abs(y[a] - y[t[k]]) + abs(x[a] - x[t[k]]));
					
				d[a][m] = min(d[a][m], d[a][I] + abs(y[a] - y[a + n]) + abs(x[a] - x[a + n]));
			}
		}
		return;
	}
	
	odp(g - 1, i, z);
	if(z < 2) odp(g - 1, i + pow(g), z + 1);
	odp(g - 1, i + pow(g) * 2, z);
}

int main(){
	scanf("%d", &t);
	while(t--){
		scanf("%d", &n);
		fi(i, 0, n) scanf("%d %d %d %d", &y[i], &x[i], &y[i + n], &x[i + n]);
		
		m = -1;
		odp(n - 1, 0, 0);
		
		A = 1 << 30;
		fi(i, 0, n) A = min(A, d[i][m] + y[i] + x[i]);
		printf("%d\n", A);
	}
	scanf("\n");
}
