#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef pair<int,int> PII;
inline int dist(const PII &p1,const PII &p2) {
	return abs(p1.first-p2.first)+abs(p1.second-p2.second);
}

const int maxN=8,oo=1000000000;
PII cook[maxN+1],tool[maxN+1];
int dp0[maxN+1][maxN+1][1<<maxN],dp1[maxN+1][maxN+1][1<<maxN];
#define minTo(a,b) a=min(a,b)
int main() {
	int T;
	for(scanf("%d",&T);T;T--){
		int n;
		scanf("%d",&n);
		for(int i=1;i<=n;i++)
		    scanf("%d%d%d%d",&cook[i].first,&cook[i].second,&tool[i].first,&tool[i].second);

		PII start=make_pair(0,0);
		memset(dp0,62,sizeof(dp0));
		memset(dp1,62,sizeof(dp1));
	    for(int pos=1;pos<=n;pos++)
	        dp0[pos][0][0]=dist(start,cook[pos]);

		for(int set=0;set<(1<<n);set++) {
			int ret;
			for(int pos=1;pos<=n;pos++)
				if((ret=dp1[pos][0][set])<oo)
					for(int fetch=1;fetch<=n;fetch++)
		        		minTo(dp0[fetch][0][set],ret+dist(tool[pos],cook[fetch]));

	        for(int pos=1;pos<=n;pos++)
			for(int hand=1;hand<=n;hand++)
			    if((ret=dp1[pos][hand][set])<oo) {
	            	minTo(dp1[hand][0][set^(1<<(hand-1))],ret+dist(tool[pos],tool[hand]));
	            	for(int fetch=1;fetch<=n;fetch++)
	                	minTo(dp0[fetch][hand][set],ret+dist(tool[pos],cook[fetch]));
				}

	        for(int pos=1;pos<=n;pos++)
		        if((ret=dp0[pos][0][set])<oo) {
					for(int fetch=1;fetch<=n;fetch++)
		        		minTo(dp0[fetch][pos][set],ret+dist(cook[pos],cook[fetch]));
		        	minTo(dp1[pos][0][set^(1<<(pos-1))],ret+dist(cook[pos],tool[pos]));
				}

			for(int pos=1;pos<=n;pos++)
			for(int hand=1;hand<=n;hand++)
			    if((ret=dp0[pos][hand][set])<oo) {
	            	minTo(dp1[pos][hand][set^(1<<(pos-1))],ret+dist(cook[pos],tool[pos]));
	            	minTo(dp1[hand][pos][set^(1<<(hand-1))],ret+dist(cook[pos],tool[hand]));
				}
		}

		//printf("[%d]\n",dp1[3][2][4]);
		//printf("[%d]\n",dp0[1][2][4]);
		int ans=oo;
		for(int pos=1;pos<=n;pos++)
		    ans=min(ans,dp1[pos][0][(1<<n)-1]+dist(tool[pos],start));
		printf("%d\n",ans);
	}
	scanf("%*s");
/*
	dp_type[where][hand][finish]
	dp0[pos][0][set]
	+dist(cook[pos],cook[fetch]) => dp0[fetch][pos][set]
	+dist(cook[pos],tool[pos]) => dp1[pos][0][set^(1<<(pos-1))]
	
	dp0[pos][hand][set]
	+dist(cook[pos],tool[pos]) => dp1[pos][hand][set^(1<<(pos-1))]
	+dist(cook[pos],tool[hand]) => dp1[hand][pos][set^(1<<(hand-1))]
	
	dp1[pos][0][set]
	+dist(tool[pos],cook[fetch]) => dp0[fetch][0][set]
	
	dp1[pos][hand][set]
	+dist(tool[pos],tool[hand]) => dp1[hand][0][set^(1<<(hand-1))]
	+dist(tool[pos],cook[fetch]) => dp0[fetch][0][set]
*/
}
