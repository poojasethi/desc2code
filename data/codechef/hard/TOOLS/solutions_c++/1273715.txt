#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
int x[9],y[9],a[9],b[9],dp[1<<8][17][9],xx[17],yy[17];
inline int go(int i, int j)
{
	return abs(xx[i] - xx[j]) + abs(yy[i] - yy[j]);
}
int main()
{
	#ifndef ONLINE_JUDGE
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	#endif
	int T,n;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d",&n);
		for(int i = 0; i < n; i++)
		{
			scanf("%d%d%d%d",&a[i],&b[i],&x[i],&y[i]);
			xx[2 * i] = a[i];
			yy[2 * i] = b[i];
			xx[2 * i + 1] = x[i];
			yy[2 * i + 1] = y[i];
		}
		xx[2 * n] = 0;
		yy[2 * n] = 0;
		memset(dp,61,sizeof(dp));
		dp[0][2 * n][n] = 0;
		int ans = (int)1e9;
		for(int mask = 0; mask < (1<<n); mask++)
			for(int p = 0; p <= 2 * n; p++)
				for(int w = 0; w <= n; w++)
				{
					if (w == n)
					{
						for(int i = 0; i < n; i++)
						{
							if (mask & (1<<i)) continue;
							dp[mask | (1<<i)][2 * i][n] = min(dp[mask | (1<<i)][2 * i][n],dp[mask][p][w] + go(p,2 * i + 1) + go(2 * i + 1,2 * i));
							for(int j = 0; j < n; j++)
							{
								if (mask & (1<<j)) continue;
								dp[mask | (1<<i)][2 * i][j] = min(dp[mask | (1<<i)][2 * i][j],dp[mask][p][w] + go(p,2 * i + 1) + go(2 * i + 1,2 * j + 1) + go(2 * j + 1,2 * i));
								dp[mask | (1<<j)][2 * j][i] = min(dp[mask | (1<<j)][2 * j][i],dp[mask][p][w] + go(p,2 * i + 1) + go(2 * i + 1,2 * j + 1) + go(2 * j + 1,2 * j));
							}
						}
					} else
					{
						dp[mask | (1<<w)][2 * w][n] = min(dp[mask | (1<<w)][2 * w][n],dp[mask][p][w] + go(p,2 * w));
						for(int i = 0; i < n; i++)
						{
							if (mask & (1<<i)) continue;
							dp[mask | (1<<w)][2 * w][i] = min(dp[mask | (1<<w)][2 * w][i],dp[mask][p][w] + go(p,2 * i + 1) + go(2 * i + 1,2 * w));
							dp[mask | (1<<i)][2 * i][w] = min(dp[mask | (1<<i)][2 * i][w],dp[mask][p][w] + go(p,2 * i + 1) + go(2 * i + 1,2 * i));
						}
					}
				}
		for(int p = 0; p <= 2 * n; p += 2)
			ans = min(ans,dp[(1<<n) - 1][p][n] + go(p,2 * n));
		printf("%d\n",ans);
	}
	return 0;
}
