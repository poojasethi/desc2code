#include <vector>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;
 
bool allnines(string s){
    int n = s.size();
    int mid = n/2;
    bool ans = true;
    for(int i=0;i<=mid;i++){
        if(s[i]!='9') {
            ans = false;
            break;
        }
    }
    return ans;
} 

string palindrome(string s){
    int n = s.size();
    int mid = n/2;
    bool higher = false;
    mid = mid-1;
    for(int i=mid;i>=0;i--){
        if(higher) {
            s[n-1-i] = s[i]; 
        } else {
            if(s[i]>s[n-1-i]) {
                s[n-1-i] = s[i];
                higher = true;
            } else if(s[i]<s[n-1-i]){
                int mid2 = mid;
                if(n%2==1) mid2++;
                int j;
                for(j=mid2;j>=i;j--){
                    if(s[j]=='9'){
                        s[j] = '0';
                        s[n-1-j] = '0';
                    } else {
                        // int k = (int)(s[j]-'0');
                        s[j] = (char)((int)(s[j]-'0')+1+(int)'0');
                        s[n-1-j] = s[j];
                        // cout<<j<<" "<<n-1-j<<" "<<s[j]<<endl;
                        higher = true;
                        break;
                    }
                }
                if(j>i){
                    s[n-1-i] = s[i];
                }
            }
        }
    }

    

    if(!higher) {
        if(allnines(s)) {
            string ans = "1";
            for(int i=0;i<s.size()-1;i++) {
                ans = ans + "0";
            }
            ans = ans + "1";
            return ans;
        }
        int mid3 = n/2;
        if(n%2==0) mid3--;
        for(int j=mid3;j>=0;j--){
            if(s[j]=='9'){
                s[j] = '0';
                s[n-1-j] = '0';
            } else {
                s[j] = (char)((int)(s[j]-'0')+1+(int)'0');
                s[n-1-j] = s[j];
                break;
            }
        }
        return s;
    }

    return s;
}


int main(){
    int t;
    cin>>t;
    while(t--){
        string s;
        cin>>s;
        printf("%s\n",palindrome(s).c_str());     
    }
    return 0;
}