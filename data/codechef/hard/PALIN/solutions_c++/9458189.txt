#include<bits/stdc++.h>
using namespace std;

typedef unsigned long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define test()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair
#define SSTR( x ) static_cast< std::ostringstream & >( \
        ( std::ostringstream() << std::dec << x ) ).str()


#define GI(x)     scanf("%d",&x)

#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)

inline int chartoint(char c)
{
    return c-'0';
}
string addone(string s,bool even)
{
    int middle = sz(s)/2;
    int i,j;
    if(even)
    {
        i = middle-1;
        j=middle;
    }
    else
        i=j=middle;
    string answer=s;
    int carry = 1;
    while(i != -1 and carry != 0)
    {
        if( chartoint(answer[i])+carry >= 10 )
        {
            string temp = SSTR ( chartoint(answer[i])+carry );
            carry += atoi((temp.substr(0,sz(temp)-1)).c_str());
            answer[i] = temp[sz(temp)-1];
        }
        else
        {
            string temp = SSTR ( chartoint(answer[i])+carry );
            answer[i] = temp[sz(temp)-1];
        }
        carry--;
        answer[j++]=answer[i--];
    }
    return answer;
}

int main()
{
    inp_s;
    test()
    {
        string number,nextpalindrome="";
        cin>>number;
        bool allnine = true,ispalindrome = true,iseven,allzero=true;
        int firstnumber;
        FOR(i,0,sz(number))
        {
            if(number[i] != '0')
            {
                firstnumber = i;
                allzero = false;
                break;
            }
        }
        if(allzero == false)
            number = number.substr(firstnumber);
        nextpalindrome = number;
        int i,j,middle=sz(number)/2;


        iseven=(sz(number)%2==0)?true:false;
        if(iseven)
        {
            i = middle-1;
            j=middle;
        }
        else
            i=j=middle;

        bool flag = false;
        bool firsttime=true;
        while(i != -1 )
        {
            if(number[i] != '9' or number[j] != '9')
                allnine = false;
            //cout<<"i = "<<number[i]<<"j = "<<number[j];
            if(number[i] != number[j])
            {
                ispalindrome = false;
                if(firsttime)
                {
                    if(nextpalindrome[i] < nextpalindrome[j])
                        flag = true;
                    firsttime = false;
                }
                //cout<<"flag = "<<flag;
                nextpalindrome[j]=nextpalindrome[i];
            }
            i--;
            j++;
        }
        if(allnine == true)
        {
            nextpalindrome = '1';
            FOR(i,1,sz(number))
                nextpalindrome+='0';
            nextpalindrome+='1';
            cout<<nextpalindrome<<endl;
            continue;
        }
        if(allzero)
        {
            cout<<'1'<<endl;
            continue;
        }
        if(ispalindrome == true)
        {
            nextpalindrome = addone(number,iseven);
        }
        if(flag)
        {
            nextpalindrome = addone(nextpalindrome,iseven);
        }
        cout<<nextpalindrome<<endl;
    }
}
