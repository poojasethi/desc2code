#include <iostream>
#include <string>
bool gen = false;
using namespace std;
void doTheThing (string &number, int size, int start, int last)
{
		if (start < 0)
		{
			// cout << "I was here" << endl;
			number.insert(0, "1");
			number[1] = '0';
			number [last ] = '1';
			gen = true;
			return;
		}
	if (number[start] < '9')
	{
		number[start] ++;
		number[last] = number[start];
	}
	else {
	
			number[start] = '0';
			number[last] = '0';
			// cout << "i made zero" << endl;
			doTheThing(number, size, start-1, last + 1);

	}
}
void nextPallindrome(string &number, int size)
{
	bool canDecrease = false;
	int diff;
	int i ;
	int last ;
	bool odd = false;
	int temp;
	int firstSame = -1;
	//prestuff
	
	if (size & 1 == 1)//odd number
	{
		odd = true;
	}
	i = (size - 1) / 2;
	if (odd)
		i--;
	// last = size - i - 2;
	for (; i >= 0; i--)
	{
		if (gen == true)
			return;
		// last ++;
		last = size - i - 1;
		if (number[i] == number[last])
		{
			if (firstSame == -1)
				firstSame = i;

			continue;
		}
		else
		{
			diff = number[i] - number[last];
			if (diff > 0)
			{
				number[last] += diff;
				canDecrease = true;
			}
			else if(diff < 0)
			{
				if (canDecrease)
					number[last] = number [i];
				else
				{
					if (odd)
					{
						temp = (size - 1)/2;
						doTheThing(number, size, temp, temp);
						canDecrease = true;
					}
					else 
					{
						if (firstSame == -1) //no duplicates
						{
						doTheThing(number, size, i, last);
						canDecrease = true;
						}

						else
						{
							doTheThing(number, size, firstSame, size - firstSame - 1);
							canDecrease = true;
						}
						
					}
						number[last] = number[i];
				}
			}		
		}
	}
	if (!canDecrease)
	{
		
		temp = (size - 1)/2;
		
		if (odd)
			{
				doTheThing(number, size, temp, temp);
					}
		else
		{
			doTheThing(number, size, temp, temp + 1);
		}
	}
	
}
int main ()
{
	std::ios::sync_with_stdio(false);
	int t;
	string no;
	char in;
	bool firstNonZero = false;
	cin >> t;
		string number;
	int size = 0;
	while (t--)
	{
		gen = false;
		cin >> number;
		while (number.at(0) == '0')
			number.erase(0,1);
		size = number.length();
		// cout << number << " " << size << endl;
		nextPallindrome(number, size) ;
		cout << number << endl;
	}
}