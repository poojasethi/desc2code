#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Number
{
public:
    Number(string str)
        : size(str.length())
        , digits(0, str.length())
    {
        for (int i = str.length()-1; i >= 0; --i)
            digits.push_back(str[i]-'0');
    }
    
    void toNextPalindrom()
    {
        //increment(0);
        if (!canReflect())
            incrementMiddle();
        reflect();
    }
    
    void print()
    {
        for (int i = size-1; i >= 0; --i)
            cout << digits[i];
        cout << endl;
    }
private:

    int getTwin(int twin) {
        return size - 1 - twin;
    }
    
    bool canReflect()
    {
        for (int left = size/2; left < size; ++left)
        {
            if (digits[getTwin(left)] < digits[left])
                return true;
            else if (digits[getTwin(left)] > digits[left])
                return false;
        }
        return false;
    }
    
    void incrementMiddle()
    {
        int left = size/2;
        int right = (size-1)/2;
        if (digits[left] > digits[right])
            digits[right] = digits[left];
        else
            increment(left);
    }
    
    void reflect()
    {
        for (int left = size-1; left > (size-1)/2; --left)
            digits[getTwin(left)] = digits[left];
    }
    
    // increment starting from given index
    // return last affected index.
    int increment(int index)
    {
        digits[index]++;
        while (digits[index] > 9)
        {
            digits[index] = 0;
            index++;
            if (index == size)
            {
                 digits.push_back(1);
                 size++;
            }   
            else
            {
                digits[index]++;
            }
        }
        return index;
    }
    
    int size;
    vector<int> digits;
};

int main()
{
    ios_base::sync_with_stdio(0);
    int T; cin >> T;
    while (T--)
    {
        string line;
        cin >> line;
        Number n(line);
       //cout << "Before: "; n.print();
        n.toNextPalindrom();
        n.print();
    }
    return 0;
}
