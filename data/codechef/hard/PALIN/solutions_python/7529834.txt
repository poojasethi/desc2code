def tempPalindrome(inputString):
    inputList = inputString
    length = len(inputList)
    halfL = inputList[:length / 2][::-1]
    inputList = inputList[:(length + 1) >> 1] + halfL

    if inputList > inputString.zfill(length):
        return inputList

    position = (length - 1) >> 1
    i = len(inputList[:position + 1].rstrip('9')) - 1
    num9s = position - i
    if i >= 0:
        inputList = inputList[
            :i] + chr(ord(inputList[i]) + 1) + '0' * num9s + inputList[position + 1:]
    else:
        inputList = '1' + '0' * num9s + inputList[position + 1:]
        length += 1

    halfL = inputList[:length / 2][::-1]
    return inputList[:(length + 1) >> 1] + halfL


def nextPalindrome():
    noOfCases = int(raw_input())
    for i in xrange(noOfCases):
        print tempPalindrome(raw_input())

nextPalindrome()
