def palin(strnum1):
    strnum = addone(list(strnum1))
    if len(strnum)==1:
        return "".join(strnum)
    length = len(strnum)
    lengthh = length/2
    firsth = strnum[:lengthh]
    scndh = strnum[-lengthh:]
    lenun = length%2
    mid="".join(strnum[lengthh:lengthh+lenun])
    if firsth[::-1] == scndh:
        return "".join(firsth)+mid+"".join(scndh)
    elif numchecker(firsth[::-1],scndh)== True:  #if revfirsthalf > scndhalf: scndhalf == revfirsthalf
        newscnd = firsth[::-1]
        return "".join(firsth)+mid+"".join(newscnd)
    elif numchecker(firsth[::-1],scndh)== False: #if revfirsthalf < scndhalf: add one to middle(if any), then add one to firsthalf
        if lenun == 1:  #If middle number
            if mid == "9":
                newfrst = addone(firsth)
                newscnd = newfrst[::-1]
                mid = "0"
                return "".join(newfrst)+mid+"".join(newscnd)
            else:
                mid = str(int(mid)+1)
                newscnd = firsth[::-1]
                return "".join(firsth)+mid+"".join(newscnd)
        elif lenun == 0: #No middle number
            newfrst = addone(firsth)
            newscnd = newfrst[::-1]
            return "".join(newfrst)+"".join(newscnd)

def numchecker(numstr1,numstr2):
    if len(numstr1)==len(numstr2):
        for idx,n in enumerate(numstr1):
            if int(numstr1[idx]) > int(numstr2[idx]):
                return True
            elif int(numstr1[idx]) < int(numstr2[idx]):
                return False
            else:
                pass
        return 2
    else:
        return None

def addone(numberstr):
    for i,n in reversed(list(enumerate(numberstr))):
        if n == "9":
            numberstr[i]="0"
        else:
            newnum = int(n)+1
            numberstr[i]=str(newnum)
            return numberstr
    numberstr.insert(0,"1")
    return numberstr

x = int(input())
for i in range(0,x):
    test= palin(raw_input())
    print test
