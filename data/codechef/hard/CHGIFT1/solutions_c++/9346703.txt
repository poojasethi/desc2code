/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ll> vll;
typedef pair<int,int> ii;
typedef vector<pair<int,int> > vii;

const int MAX = 100005;
const int MOD = 1000000007;
const ll INF = 1e18;

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);
        vector<ll> a(n);
        for (int i = 0; i < n; i++) {
            scanf("%lld", &a[i]);
        }
        ll dp[n][2];
        dp[0][0]=dp[0][1]=a[0];
        for (int i = 1; i < n; i++) {
            ll maxv = -INF, minv = INF;
            for (int k = 0; k <= 1; k++) {
                maxv = max(maxv, dp[i-1][k]+a[i]);
                maxv = max(maxv, dp[i-1][k]-a[i]);
                maxv = max(maxv, dp[i-1][k]*a[i]);
            //    maxv = max(maxv, dp[i-1][k]/a[i]);
            }

            for (int k = 0; k <= 1; k++) {
                minv = min(minv, dp[i-1][k]+a[i]);
                minv = min(minv, dp[i-1][k]-a[i]);
                minv = min(minv, dp[i-1][k]*a[i]);
            //    minv = min(minv, dp[i-1][k]/a[i]);
            }

            dp[i][0] = maxv;
            dp[i][1] = minv;

            //cerr << dp[i][0] << " " << dp[i][1] << endl;
        }

        cout << dp[n-1][1] << endl;
    }
}
