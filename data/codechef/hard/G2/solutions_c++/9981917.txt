#include <iostream>
#include<stdio.h>
using namespace std;

const int nMaxSize = 504;
long nADJMatrix[nMaxSize][nMaxSize];
int nMaxJumps;
int nROWs,nCOLS;
long nMinCost[nMaxSize][nMaxSize];

void Solve()
{
	for(int i = nROWs; i >= 1; i--)
 	{
		for(int j = nCOLS; j >= 1; j--)
		{
			nMinCost[i][j] = 1;

			int nMinNo = 1000001;
			int nMaxNo = 0;

			for(int m = j + 1; m <= nCOLS; m++)
			{
				if(nADJMatrix[i][m] >= nADJMatrix[i][j] && nADJMatrix[i][m] < nMinNo)
				{
					nMinNo = nADJMatrix[i][m];
					if(nMinCost[i][m] + 1 > nMinCost[i][j])
						nMinCost[i][j] = nMinCost[i][m] + 1;

					if(nADJMatrix[i][j] == nMinNo)
					    break;
				}
			}

			for(int n = i + 1; n <= nROWs; n++)
			{
				if(nADJMatrix[n][j] <= nADJMatrix[i][j] && nADJMatrix[n][j] > nMaxNo)
				{
					nMaxNo = nADJMatrix[n][j];
					if(nMinCost[n][j] + 1 > nMinCost[i][j])
					  nMinCost[i][j] = nMinCost[n][j] + 1;

					if(nADJMatrix[i][j] == nMaxNo)
					  break;
				}
			}

			
	      if(nMinCost[i][j] > nMaxJumps)
		     nMaxJumps = nMinCost[i][j];
		}
	}

}

void readMatrix(unsigned m,unsigned n)
{
    register unsigned i,j,temp;
	char c;
 
	for(i = 1; i <= m; i++)
	{
		for(j = 1; j <= n; j++)
		{
 
			do c = getchar_unlocked(); while( c < '0' || c > '9' );
 
			temp = 0;
			while( c >= '0' && c <= '9' )
			{
				temp = ( temp << 3 ) + ( temp << 1 ) + c - '0';
				c = getchar_unlocked();
			}
 
			nADJMatrix[i][j] = temp;
		}
	}
}

int main()
{
	//freopen("SmartFrog.txt","r",stdin);
	int nNoofTestCases = 0;
	scanf("%u", &nNoofTestCases);

	for(int ntest = 1; ntest <= nNoofTestCases; ntest++)
	{
		scanf("%u", &nROWs);
        scanf("%u", &nCOLS);
		readMatrix(nROWs,nCOLS);

		Solve();

		cout << nMaxJumps << endl;
		nMaxJumps = 0;
	}
	return 0;
}
