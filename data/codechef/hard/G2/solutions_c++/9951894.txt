#include <iostream>
#include <stdio.h>

#ifndef INT_MAX
#define INT_MAX 1000001
#endif
int matrix[502][502] = {0};
int jump_matrix[502][502] = {0};

int M, N;
int Answer = 0;

void find_max_jumps()
{
    //
    for (int ii = M-1; ii >= 0; --ii)
    {
        for (int jj = N-1; jj >= 0; --jj)
        {
            jump_matrix[ii][jj] = 1;
            int Min = INT_MAX;
            int Max = 0;
            for (int l = jj+1; l < N; ++l)
            {
                if (matrix[ii][jj] <= matrix[ii][l] && matrix[ii][l] < Min)
                {
                    Min = matrix[ii][l];
                    if (jump_matrix[ii][jj] < (jump_matrix[ii][l]+1) )
                    {
                        jump_matrix[ii][jj] = jump_matrix[ii][l]+1;
                    }
                    if (Min == matrix[ii][jj])
                        break;

                }
            }
            for (int t = ii+1; t < M; ++t)
            {
                if (matrix[ii][jj] >= matrix[t][jj] && matrix[t][jj] > Max)
                {
                    Max = matrix[t][jj];
                    if (jump_matrix[ii][jj] < (jump_matrix[t][jj]+1) )
                    {
                        jump_matrix[ii][jj] = jump_matrix[t][jj]+1;
                    }
                    if (matrix[ii][jj] == Max)
                        break;
                }
            }
            //jump_matrix[ii][jj] += max_jumps(left, top);
            if (jump_matrix[ii][jj] > Answer)
            {
                Answer = jump_matrix[ii][jj];
            }
        }
    }
}

int main()
{
//    FILE* fp = freopen("smart_frog.txt", "r", stdin);
    int T = 0;
    //cin >> T;
    scanf("%u", &T);
    for (int test = 1; test <= T; ++test)
    {
        //cin >> M; cin >> N;
        scanf("%u", &M);
        scanf("%u", &N);

        for (int ii = 0; ii < M; ++ii)
        {
            for (int jj = 0; jj < N; ++jj)
            {
                int temp;
                scanf("%u", &temp);
                matrix[ii][jj] = temp;
                jump_matrix[ii][jj] = 0;
            }
        }
        Answer = 0;
        find_max_jumps();
        std::cout << Answer << std::endl;
    }
    return 0;
}
