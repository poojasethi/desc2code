//#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#include<vector>
#define MOD 1000000007

/* This function calculates (a^b)%MOD */
long long pow(int a, int b)
{
    long long x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(int n)
{
    return pow(n,MOD-2);
}

long long C(int n, int r)
{
    vector<long long> f(n + 1,1);
    for (int i=2; i<=n;i++)
        f[i]= (f[i-1]*i) % MOD;
    return (f[n]*((InverseEuler(f[r]) * InverseEuler(f[n-r])) % MOD)) % MOD;
}

int main()
{
    int n,r,p;
//    while (~scanf("%d%d%d",&n,&r))
//    {
//        printf("%lld\n",C(n,r));
//    }
    //int n;
    cin>>n;
    int temp=C(2*n,n)%MOD;
    //cout<<temp<<endl;
    temp=(temp*pow(n+1,MOD-2)%MOD)%MOD;
    cout<<temp<<endl;
}
