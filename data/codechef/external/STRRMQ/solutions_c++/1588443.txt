#include<iostream>
#include<string.h>
using namespace std;
struct node
{
       string s;
       int in;
      
};
node a[10000];
string arr[10000];
void initialize(int ind,int start,int end)
{
     if(start==end)
     {          
              a[ind].s=arr[start];    
              a[ind].in=start;
     }
     else
     {
         int mid=(start+end)/2;
         initialize(2*ind,start,mid);     
         initialize(2*ind+1,mid+1,end);
         if(a[2*ind+1].s < a[2*ind].s)
         {
                         a[ind].s=a[2*ind+1].s;
                         a[ind].in=a[2*ind+1].in;
         }
         else
         {
                         a[ind].s=a[2*ind].s;
                         a[ind].in=a[2*ind].in;
         }
     }
     //cout<<ind<<" "<<a[ind].max_no<<" "<<a[ind].max_sum<<endl;
}  
node query(int ind,int i,int j,int start,int end)  
{
     int mid=(start+end)/2;
     if(i<=start && j>=end)
                 return a[ind];
     else if(j<=mid)
          return query(2*ind,i,j,start,mid);
     else if(i>mid)
          return query(2*ind+1,i,j,mid+1,end);
     else
     {
         node p1,p2,p3;
         p1=query(2*ind,i,j,start,mid);
         p2=query(2*ind+1,i,j,mid+1,end);
         if(p2.s < p1.s)
         {
                         p3.s=p2.s;
                        p3.in=p2.in;
         }
         else
         {
                         p3.s=p1.s;
                         p3.in=p1.in;
         }
         return p3;
     }
}
void update(int ind,int i,string info,int start,int end)
{
     
     if(i==start && i==end)
     {
              a[ind].s=info;
              
     }
     else
     {
         int mid=(start+end)/2;
         if(i<=mid)
                   update(2*ind,i,info,start,mid);
         else 
                   update(2*ind+1,i,info,mid+1,end);
        
         if(a[2*ind+1].s < a[2*ind].s)
         {
                         a[ind].s=a[2*ind+1].s;
                         a[ind].in=a[2*ind+1].in;
         }
         else
         {
                         a[ind].s=a[2*ind].s;
                         a[ind].in=a[2*ind].in;
         }
         }
         //cout<<a[ind].left_sum<<" "<<a[ind].right_sum;
}          
int main()
{
  int t;
  scanf("%d",&t);
  while(t--)
  {
    int n,l;
    scanf("%d",&n);
    scanf("%d",&l);
    for(int i=0;i<n;i++)
            cin>>arr[i];
    initialize(1,0,n-1);
    int m,i,j,ch;
    scanf("%d",&m);
    for(int p=0;p<m;p++)
    {
           scanf("%d",&ch);
           if(ch==0)
           {
                    scanf("%d%d",&i,&j);
                    printf("%d\n",query(1,i,j,0,n-1).in);
           }
           else
           {
               scanf("%d",&i);
                 int l=arr[i].length();
                 if(l>0)
                 arr[i]=arr[i].substr(1);
                   
                   update(1,i,arr[i],0,n-1);
           }
           /*else
                    update(1,i-1,j,0,n-1); */
    }
  }
    return 0;
}
    

