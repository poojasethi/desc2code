#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>

using namespace std;

#define MAXIND 500000
#define MAXN 500000

void init_mn(int node, int b, int e, string A[MAXIND], int M[MAXN])
{
	if (b == e)
		M[node] = b;
	else
	{
		init_mn(2 * node, b, (b + e) / 2, A, M);
		init_mn(2 * node + 1, (b + e) / 2 + 1, e, A, M);
		if (A[M[2 * node]] <= A[M[2 * node + 1]])
			M[node] = M[2 * node];
		else
			M[node] = M[2 * node + 1]; 
	}
}
void update(int node, int b, int e, string A[MAXIND], int M[MAXN], int ui)
{

	if(b > ui || e < ui){
		return;
	}
	if (b == e && b == ui){
		if(A[b].size() > 0){
			A[b] = A[b].substr(1);
		}
		M[node] = b;
	}
	else
	{
		update(2 * node, b, (b + e) / 2, A, M, ui);
		update(2 * node + 1, (b + e) / 2 + 1, e, A, M,ui);
		if (A[M[2 * node]] <= A[M[2 * node + 1]])
			M[node] = M[2 * node];
		else
			M[node] = M[2 * node + 1];
	}
}



int query_mn(int node, int b, int e, string A[MAXIND], int M[MAXN], int i, int j)
{
	int p1, p2;
	if (i > e || j < b)
		return -1;

	if (b >= i && e <= j)
		return M[node];

	p1 = query_mn(2 * node, b, (b + e) / 2, A, M, i, j);
	p2 = query_mn(2 * node + 1, (b + e) / 2 + 1, e, A, M, i, j);

	if (p1 == -1)
		return p2;
	if (p2 == -1)
		return p1;
	if (A[p1] <= A[p2])
		return p1;
	return p2;
}

int main()
{
	int n,m,a1,b1,cnt=0;

	int t;
	cin >> t;
	while(t--){
		scanf("%d %d",&n,&m);
		string a[500000];
		for ( int i = 0; i < n; i++ ) {
			//scanf("%d",&a[i]);
			cin >> a[i];
		}
//		for ( int i = 0; i < n; i++ ) {
//			cout << a[i] << " ";
//		}
//		cout << endl;
//		cout << "Init\n";
		int b_mn[500000];
		//	int b_mx[500000];

		init_mn(1,0,n-1,a,b_mn);
		//	init_mx(1,0,n-1,a,b_mx);
		//	for ( int i = 0; i < n; i++ ) {
		//		cout << a[i] << " ";
		//	}
		//	cout << endl;

//		cout << "Init Done\n";
		int q;
		cin >> q;
		for ( int i = 0; i < q; i++ ) {
			//scanf("%d %d",&a1,&b1);
			int cas;
			cin >> cas;
			if(cas == 0){
				cin >> a1 >> b1;
				//cout << a1 << " " << b1 << endl;
				int mn = query_mn( 1, 0, n-1, a, b_mn, a1, b1 );
				//		int mx = query_mx( 1, 0, n-1, a, b_mx, a1-1, b1-1 );

				cout << mn << endl;
			}
			else{
				cin >> a1;
				update(1,0,n-1,a,b_mn, a1);
			}
			//		cout << mx << " " << a[mx] << endl;
		}
	}
	return 0;
}

