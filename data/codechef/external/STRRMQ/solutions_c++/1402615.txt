#include <bits/stdc++.h>
#define f(i,x,y) for (int i = x; i < y; i++)
#define fd(i,x,y) for(int i = x; i>= y; i--)
#define FOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define vint vector<int>
#define ll long long
#define clr(A,x) memset(A, x, sizeof A)
#define pb push_back
#define pii pair<int,int>
#define fst first
#define snd second
#define ones(x) __builtin_popcount(x)
#define cua(x) (x)*(x)
#define eps (1e-9)
#define oo (1<<30)
#define debug(x) cout <<#x << " = " << x << endl
#define adebug(x,n) cout <<#x<<endl; f(_i,0,n)cout<<x[_i]<<char(_i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; f(i,0,m)f(j,0,n)cout<<x[i][j]<<char(j+1==n?10:32)
#define N 1005
using namespace std;
template<class T> inline void mini(T &a,T b){if(b<a) a=b;}
template<class T> inline void maxi(T &a,T b){if(b>a) a=b;}

bool comp (int i, int j);
struct suff_arr {
	int n, t;
	int *r, *p, *h;
	suff_arr() {}

	inline int val(int i){ return p[i+t]; }

	void solve(char *s) {
		n = strlen(s);
		r = new int[n+1];
		p = new int[n+1];
		h = new int[n+1];
		int bc[256];
		f(i,0,256) bc[i] = 0;
		f(i,0,n) ++bc[s[i]];
		f(i,1,256) bc[i] += bc[i-1];
		f(i,0,n) r[--bc[s[i]]] = i;
		f(i,0,n) p[i] = bc[s[i]];
		int pals = 0;
		f(i,0,n) if (p[i] == 0) pals++;
		reverse(r, r + pals);
		f(i,0,pals) p[r[i]] = i;
		p[n] = -1;
		for(t = 1; t<n; t*=2){
			for(int i = 0, j = 1; j < n; i = j++){
				while (j<n && p[r[i]] == p[r[j]]) j++;
				if (j-i==1) continue;
				int *ini = r+i, *fin = r+j;
				sort (ini, fin, comp);
				int pri = val(*ini), num = i, pk;
				for(; ini < fin; p[*ini++] = num){
					if ( (pk=val(*ini)) == pri || (i<=pri && pk<j)){}
					else pri = pk, num = ini-r;
				}
			}
		}
	}
	void lcp(char *s){
		int tam = 0, i,j;
		for(i = 0; i<n; i++)if (p[i]){
			j = r[p[i]-1];
			while (s[i+tam]==s[j+tam]) tam++;
			h[p[i]] = tam;
			if (tam) tam--;
		}
	}
} sa;

bool comp(int i, int j) { 
	return sa.val(i) < sa.val(j);
}

struct stripe {
	int n;
	vector<int> s;
	stripe() {}
	stripe(int n): n(n) {
		int off = 1;
		for (; off < n; off<<=1);
		s = vector<int>(off*2, oo);
	}
	inline int fun(int a, int b) {
		return min(a, b);
	}
	inline void funing(int &a, int b) { a = b; }

	inline int get(int a, int b) { return get(a, b, 0, 0, n); }
	inline int get(int a, int b, int x, int le, int ri) {
		if (b <= le || ri <= a) return oo;
		if (a <= le && ri <= b) return s[x];
		int me = (le + ri) / 2, L = x + x + 1, R = L + 1;
		return fun(get(a, b, L, le, me), get(a, b, R, me, ri));
	}
	inline void update(int a, int val) { update(a, val, 0, 0, n); }
	inline void update(int a, int val, int x, int le, int ri) {
		if (le + 1 == ri) funing(s[x], val);
		else {
			int me = (le + ri) / 2, L = x + x + 1, R = L + 1;
			if (a < me) update(a, val, L, le, me);
			else update(a, val, R, me, ri);
			s[x] = fun(s[L], s[R]);
		}
	}

	void impr() {
		f(i,0,n) cout << get(i,i+1) << char(i+1 == n? 10 : 32);
		f(i,0,s.size()) cout << s[i] << char(i+1 == s.size()? 10 : 32);
	}
} st;


char word[N][N];
char s[N*N];
int n,m, tc;
int tabla[N];
int where[N*N];

int main(){
	cin >> tc;
	while (tc--) {
		cin >> n >> m;
		f(i,0,n) scanf("%s", word[i]);
		s[0] = 0;
		f(i,0,n) {
			strcat(s, word[i]);
			strcat(s, "$");
		}
		sa.solve(s);

		stripe st(n);
		int ind = 0;
		f(i,0,n) {
			st.update(i, sa.p[ind]);
			tabla[i] = sa.p[ind];
			int from = ind;
			ind += strlen(word[i]) + 1;
			f(ii, from, ind) where[ii] = i;
		}

		int q; cin >> q;
		while (q--) {
			int x, u, v;
			scanf("%d", &x);
			if (x) {
				scanf("%d", &u);
				ind = sa.r[tabla[u]];
				if (s[ind] != '$') {
					st.update(u, sa.p[ind+1]);
					tabla[u] = sa.p[ind+1];
				}
			} else {
				scanf("%d%d", &u, &v); 
				int minp = st.get(u,v+1);
				printf("%d\n", minp < 0 ? n + minp : where[sa.r[minp]]);
			}
		}
	}
}

