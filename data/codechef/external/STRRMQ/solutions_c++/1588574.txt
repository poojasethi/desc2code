#include <vector>
#include <string>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <ctype.h>
#include <bitset>
#include <assert.h>

using namespace std;

#define REP(i, n) for(int i=0; i<(n); i++)
#define FOR(i, a, b) for(int i=(a); i<(b); i++)
#define IFOR(i, a, b) for(int i=(a); i>=(b); i--)
#define FORD(i, a, b, c) for(int i=(a); i<(b); i+=(c))

#define SS ({int x;scanf("%d", &x);x;})
#define SI(x) ((int)x.size())
#define PB(x) push_back(x)
#define MP(a,b) make_pair(a, b)
#define SORT(a) sort(a.begin(),a.end())
#define ITER(it,a) for(typeof(a.begin()) it = a.begin(); it!=a.end(); it++)
#define ALL(a) a.begin(),a.end()
#define INF 1000000000
#define V vector
#define S string
#define FST first
#define SEC second
typedef V<int> VI;
typedef V<S> VS;
typedef long long LL;
typedef pair<int, int> PII;
/// pre code ends:

struct T{
	string s;
	int in;
} tree[100000];

string p[5001];

void build(int node, int a, int b){
	if(a==b){
		tree[node].s=p[a];
		tree[node].in=a;
		return;
	}
	int mid = (a+b)/2;
	build(2*node, a, mid);
	build(2*node+1, mid+1, b);

	if(tree[node*2+1].s<tree[node*2].s)
	{
		tree[node].s=tree[node*2+1].s;
		tree[node].in=tree[node*2+1].in;
	}
	else
	{
		tree[node].s=tree[node*2].s;
		tree[node].in=tree[node*2].in;
	}

	}
void update(int ind,int i,string info,int start,int end)
{

     if(i==start && i==end)
     {
              tree[ind].s=info;

     }
     else
     {
         int mid=(start+end)/2;
         if(i<=mid)
                   update(2*ind,i,info,start,mid);
         else
                   update(2*ind+1,i,info,mid+1,end);

         if(tree[2*ind+1].s < tree[2*ind].s)
         {
                         tree[ind].s=tree[2*ind+1].s;
                         tree[ind].in=tree[2*ind+1].in;
         }
         else
         {
                         tree[ind].s=tree[2*ind].s;
                         tree[ind].in=tree[2*ind].in;
         }
         }
         //cout<<a[ind].left_sum<<" "<<a[ind].right_sum;
}

T  query(int node, int a, int b, int i,int j){

	if(i<=a && j>=b){
		return tree[node];
	}
	int mid = (a+b)/2;

	if(j<=mid){
		return query(2*node, a, mid, i, j);
	}
	else if(i>mid){
		return query(2*node+1, mid+1, b, i, j);
	}
	else{
		T p1, p2, p3;

		p1 = query(2*node, a, mid, i, j);
		p2 = query(2*node+1, mid+1, b, i, j);


		if(p2.s<p1.s)
	{
		p3.s=p2.s;
		p3.in=p2.in;
	}
	else
	{
		p3.s=p1.s;
		p3.in=p1.in;
	}


		return p3;
	}

}

int main(){
	int t;
	cin>>t;
	while(t--)
	{
	int n=SS,m=SS;
	for(int i=0;i<n;i++)
	cin>>p[i];
	build(1, 0, n-1);
	int q=SS;
	while(q--){
		int a=SS, b=SS;
		if(a==0)
		{
            int c=SS;
		printf("%d\n", query(1, 0, n-1, b, c).in);
	    }
		else
		{
			
			if(p[b].length()>0)
			p[b]=p[b].substr(1);
			update(1,b,p[b],0,n-1);
		}




	}
    }
	return 0;
}
