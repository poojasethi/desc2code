#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

int n , m;
char s[1005][1005];

typedef struct Tree {
	int index;
} Tree;

Tree T[3005];

void buildTree (int node , int lo , int hi) {
	if (lo == hi) {
		T[node].index = lo;	
	}
	else {
		int mid = (lo + hi) / 2;
		buildTree(2 * node , lo , mid);
		buildTree(2 * node + 1 , mid + 1 , hi);
		
		int index = 0;
		int comp = strcmp (s[T[2 * node].index] , s[T[2 * node + 1].index]);
		if (comp == 0) {
			index = T[2 * node].index;
		} else if (comp > 0) {
			index = T[2 * node + 1].index;
		} else {
			index = T[2 * node].index;
		}
		T[node].index = index;
	}
}


int query (int node , int lo , int hi , int qlo , int qhi) {
	//cout << "node" << node << endl;
	if (qlo > hi || qhi < lo) {
		return -1;
	}
	if (qlo <= lo && qhi >= hi)
		return T[node].index;
	else {
		int mid = (lo + hi) / 2;
		int res1 = query (2 * node , lo , mid , qlo , qhi);
		int res2 = query (2 * node + 1 , mid + 1 , hi , qlo , qhi);
		
		//cout << res1 << " " << res2 << endl;
		
		if (res1 < 0)
			return res2;
		else if (res2 < 0)
			return  res1;
		
		int index = 0;
		int comp = strcmp (s[res1] , s[res2]);
		if (comp == 0) {
			index = res1;
		} else if (comp > 0) {
			index = res2;
		} else {
			index = res1;
		}
		
		return index;
	}		
}

void update (int node , int lo , int hi , int index) {
	if (index >= lo && index <= hi) {
		if (lo == hi) {
			int len = strlen (s[index]);
			for (int i = 0; i < len; i++) {
				s[index][i] = s[index][i + 1];
			}
		} else {
			int mid = (lo + hi) / 2;
			update (2 * node , lo , mid , index);
			update (2 * node + 1, mid + 1 , hi , index);
			
			int res1 = T[2 * node].index;
			int res2 = T[2 * node + 1].index;
			
			int ret = 0;
			
			int comp = strcmp (s[res1] , s[res2]);
			if (comp == 0) {
				ret = res1;
			} else if (comp > 0) {
				ret = res2;
			} else {
				ret = res1;
			}
			
			T[node].index = ret;
		}
	}
}

int main() {
	//freopen("input.txt" ,"r" , stdin);
	int testCase;
	scanf("%d" , &testCase);
	while (testCase--) {
		scanf("%d %d" , &n , &m);
		for (int i = 1; i <= n; i++)
			scanf("%s" , s[i]);
//		for (int i = 1; i <= n; i++)
//			cout << s[i] << endl;
		//cout << "done" << endl;
		buildTree (1 , 1, n);
		//update(1 , 1, n , 4);
//		for (int i = 1; i <= n; i++)
//			cout << s[i] << endl;
		
//		for (int i = 1; i <= 2 * n; i++)
//			cout << T[i].index << " ";
//		cout << endl << endl;
		/*
		int res = query(1 , 1, n , 1 , 3);
		cout << res << endl;
		
		*/

		int Q;
		scanf("%d" , &Q);
		while (Q--) {
			int type;
			scanf("%d" , &type);
			if (type == 0) {
				int x , y;
				scanf("%d %d" , &x , &y);
//				cout << x << " " << y << endl;
				int res = query(1 , 1 , n , x + 1 , y + 1);
				printf("%d\n" , res - 1);
			} else {
				int x;
				scanf("%d" , &x);
				update (1 , 1 , n , x + 1);
			}
		}		
	
	}
	
	return 0;
}