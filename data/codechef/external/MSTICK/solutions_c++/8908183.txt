#include <bits/stdc++.h>

using namespace std;
#define MOD 1000000007
#define ll long long
#define INF 0x3f3f3f3f
using namespace std;
pair<int,int> st[500005];
int a[100005];
int get_mid(int u,int v)
{
    return u+(v-u)/2;
}
void build_tree(int ss,int se,int ci)
{
    if(ss==se)
    {
        st[ci].first=a[ss];
        st[ci].second=a[ss];
        return;
    }
    int mid=get_mid(ss,se);
    build_tree(ss,mid,2*ci+1);
    build_tree(mid+1,se,2*ci+2);
    st[ci].first=min(st[2*ci+1].first,st[2*ci+2].first);
    st[ci].second=max(st[2*ci+1].second,st[2*ci+2].second);
}
pair<int,int> query(int ss,int se,int qs,int qe,int ci)
{
    if(qs>qe)
        return make_pair(INF,0);
    if(ss>qe||se<qs)
        return make_pair(INF,0);
    if(ss>=qs&&se<=qe)
    {
        return st[ci];
    }
    int mid=get_mid(ss,se);
    pair<int,int> ret;
    pair<int,int> l=query(ss,mid,qs,qe,2*ci+1);
    pair<int,int> r=query(mid+1,se,qs,qe,2*ci+2);
    ret.first=min(l.first,r.first);
    ret.second=max(l.second,r.second);
    return ret;
}

int main()
{
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        scanf("%d",&a[i]);
    build_tree(0,n-1,0);
    int q;
    scanf("%d",&q);
    while(q--)
    {
        int l,r;
        scanf("%d%d",&l,&r);
        pair<int,int> v=query(0,n-1,l,r,0);
        int base=v.first;
        int in=v.second;
        int outl=query(0,n-1,0,l-1,0).second;
        int outr=query(0,n-1,r+1,n-1,0).second;
        double mxout;
        mxout=max(outl+base,outr+base);
        //cout<<base<<endl;
        //cout<<outl<<" "<<outr<<endl;
        //cout<<in<<endl;
        printf("%.1f\n",max(mxout,(in+base)/2.0));
    }
    return 0;
}
