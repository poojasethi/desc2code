#include <bits/stdc++.h>
using namespace std;
#define pp pair<int,int>
void build(int node,int a,int b,vector<int>& v,vector<pp >& tree)
{
	if(a==b)
	{
		tree[node].first=tree[node].second=v[a];
		return;
	}
	int mid=(a+b)/2;
	build(node*2,a,mid,v,tree);
	build(node*2+1,mid+1,b,v,tree);
	tree[node].first=max(tree[node*2].first,tree[node*2+1].first);
	tree[node].second=min(tree[node*2].second,tree[node*2+1].second);
}
int query(int node,int a,int b,int l,int r,vector<pp >& tree,int type)
{
	if((a>b)||(a>r)||(l>b))
	{
		if(type==1)
			return 0;
		else
			return INT_MAX;
	}
	if((a>=l)&&(b<=r))
	{
		if(type==1)
			return tree[node].first;
		else
			return tree[node].second;
	}
	int mid=(a+b)/2;
		int q1=query(node*2,a,mid,l,r,tree,type);
	int q2=query(node*2+1,mid+1,b,l,r,tree,type);
	if(type==1)
		return max(q1,q2);
	else
		return min(q1,q2);
}
int main() {
	int n,i,q,a,b;
	double ans,val1,val2;
	scanf("%d",&n);
	vector<pp > tree(4*n);
	vector<int> v(n);
	for(i=0;i<n;i++)
		scanf("%d",&(v[i]));
	build(1,0,n-1,v,tree);
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d%d",&a,&b);
		val1=query(1,0,n-1,a,b,tree,2);
		val2=query(1,0,n-1,a,b,tree,1);
		ans=val1+(val2-val1)/2;
		if(a>0)
		{
			val2=query(1,0,n-1,0,a-1,tree,1);
			ans=max(ans,val1+val2);
		}
		if(b<n-1)
		{
			val2=query(1,0,n-1,b+1,n-1,tree,1);
			ans=max(ans,val1+val2);
		}
		printf("%.1lf\n",ans);
	}
	return 0;
}