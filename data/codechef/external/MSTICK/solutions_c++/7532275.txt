// In the name of GOD

// Segment tree for max implementation
#include<iostream>
#include<queue>

#define MX 1000000
#define inf 100000008

using namespace std;
int tree[MX], tree_min[MX];
int ARR[MX];

void print_bfs()
{
	queue<int> Q;
	Q.push(1);

	while(!(Q.empty()))
	{
		int x = Q.front();
		if(tree[x] != inf)
		{
			Q.push(2*x);
			Q.push(2*x+1);

			cout<< tree[x]<<' ';
		}
		Q.pop();
		
	}

	cout<<endl;
}

int build_tree(int i, int j, int in)
{
	if(i>j)
		return -inf;  // considered as no op

	if(i==j)
	{
		tree[in] = ARR[i];
		return tree[in];
	}

	int mx1 = build_tree(i, (i+j)/2, 2*in);
	int mx2 = build_tree((i+j)/2+1, j, 2*in+1);

	tree[in] = max(mx1, mx2);
	return tree[in];
}

int build_tree_min(int i, int j, int in)
{
	if(i>j)
		return inf;  // considered as no op

	if(i==j)
	{
		tree_min[in] = ARR[i];
		return tree_min[in];
	}

	int mn1 = build_tree_min(i, (i+j)/2, 2*in);
	int mn2 = build_tree_min((i+j)/2+1, j, 2*in+1);

	tree_min[in] = min(mn1, mn2);
	return tree_min[in];
}

int query_max(int a, int b, int i, int j, int in)
{
	if( i > j || j<a || i>b) return -inf;

	if( a<=i && b>=j) return tree[in];

	int mx1 = query_max(a, b, i, (i+j)/2, 2*in);
	int mx2 = query_max(a, b, (i+j)/2 +1, j, 2*in+1);

	return max(mx1, mx2);
}

int query_min(int a, int b, int i, int j, int in)
{
	if( i > j || j<a || i>b) return inf;

	if( a<=i && b>=j) return tree_min[in];

	int mn1 = query_min(a, b, i, (i+j)/2, 2*in);
	int mn2 = query_min(a, b, (i+j)/2 +1, j, 2*in+1);

	return min(mn1, mn2);
}

int main()
{
	int i, N, Q, a, b;
	cin>>N;
	for(i =0; i<MX; i++)
	{
		tree[i] = -inf;
		tree_min[i] = inf;
	}
	for(i=0; i<N; i++)
		cin>>ARR[i];

	build_tree(0, N-1, 1);
	build_tree_min(0, N-1, 1);

	cin>>Q;
	for(i=0; i<Q; i++)
	{
		cin>>a>>b;
		int v1 = query_min(a, b, 0, N-1, 1);
		int v2 = query_max(a, b, 0, N-1, 1);

		int v3 = query_max(b+1, N-1, 0, N-1, 1);
		int v4 = max(v3, query_max( 0, a-1, 0, N-1, 1));

		if( v2-v1 >= 2*v4) 
		{
			cout<<v1 + (v2-v1)/2;
			if( (v2-v1)%2 )
				cout<< ".5";
			else
				cout<<".0";
			cout<<endl;
		}
		else
		{
			cout<< v1 + v4<<".0"<<endl;
		}
	}

	return 0;
}