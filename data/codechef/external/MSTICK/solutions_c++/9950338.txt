#include<bits/stdc++.h>
using namespace std;
int a[100001];
typedef struct tr
{
	int x,y;	
}tr;

tr tree[400004];
void buildTree(int ss,int se,int si)
{
	if(ss==se)
	{
		tree[si].x = a[se];
		tree[si].y = a[se];
		return;
	}	
	int mid = (ss+se)/2;
	buildTree(ss,mid,2*si);
	buildTree(mid+1,se,2*si+1);
	tree[si].x = min(tree[2*si].x,tree[2*si+1].x);
	tree[si].y = max(tree[2*si].y,tree[2*si+1].y);
}

int queryMin(int ss,int se,int si,int l,int r)
{
	if(l>r || l>se || r<ss)
		return INT_MAX;
	if(l<=ss && r>=se)
		return tree[si].x;
	int mid=(ss+se)/2;
	int left=queryMin(ss,mid,2*si,l,r);
	int right=queryMin(mid+1,se,2*si+1,l,r);
	return min(left,right);
}

int queryMax(int ss,int se,int si,int l,int r)
{
	if(l>r || l>se || r<ss)
		return INT_MIN;
	if(l<=ss && r>=se)
		return tree[si].y;
	int mid=(ss+se)/2;
	int left=queryMax(ss,mid,2*si,l,r);
	int right=queryMax(mid+1,se,2*si+1,l,r);
	return max(left,right);
}

int main()
{
	int n,i,q,l,r;
	double max1,max2,max3,max4,min1,ans;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
		scanf("%d",&a[i]);
	buildTree(1,n,1);
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d%d",&l,&r);
		l+=1;
		r+=1;
		min1 = queryMin(1,n,1,l,r);
		max1 = queryMax(1,n,1,1,l-1);
		max2 = queryMax(1,n,1,r+1,n);
		max3 = queryMax(1,n,1,l,r);
		
		max4 = max(max1,max2);
		max3 = (max3-min1)/2.0; 
		
		ans = min1 + max(max4,max3);
		printf("%.1f\n",ans);
	}
	return 0;
}