#include<bits/stdc++.h>
using namespace std;
long treeMax[400005];
long treeMin[400005];
long arr[100005];
void build_tree1(int node,int a,int b)
{
	
	if(a==b)
	{
	treeMax[node]=arr[a];
	return;
}
	build_tree1(node*2,a,(a+b)/2);
	build_tree1(node*2+1,(a+b)/2+1,b);
	treeMax[node]=max(treeMax[node*2],treeMax[node*2+1]);
}
void build_tree2(int node,int a,int b)
{
   
	if(a==b)
{
	treeMin[node]=arr[a];
	return;
	}
	build_tree2(node*2,a,(a+b)/2);
	build_tree2(node*2+1,(a+b)/2+1,b);
	treeMin[node]=min(treeMin[node*2],treeMin[node*2+1]);
}
long query_tree1(int node,int a,int b,int i,int j)
{
    if(a>j||b<i)
   	return INT_MIN;
	   	if(a>=i&&b<=j)
	   	return treeMax[node];
	   	return max(query_tree1(node*2,a,(a+b)/2,i,j)
	   	,query_tree1(node*2+1,(a+b)/2+1,b,i,j));
}
long query_tree2(int node,int a,int b,int i,int j)
{
    if(a>j||b<i)
   	return INT_MAX;
	   	if(a>=i&&b<=j)
	   	return treeMin[node];
	   	return min(query_tree2(node*2,a,(a+b)/2,i,j)
	   	,query_tree2(node*2+1,(a+b)/2+1,b,i,j));
}
int main()
{
	int n,q,l,r;
	scanf("%d",&n);
	for(int i=0;i<n;i++)
	scanf("%d",&arr[i]);
	build_tree1(1,0,n-1);
	build_tree2(1,0,n-1);
/*	for(int i=1;i<=6;i++)
	cout<<treeMax[i]<<" ";
	cout<<endl;*/
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d%d",&l,&r);
		long m=query_tree2(1,0,n-1,l,r);
		//cout<<m<<endl;
		double ma=(float)(query_tree1(1,0,n-1,l,r)+m)/2;
		//cout<<ma<<endl;
		double m1=max(query_tree1(1,0,n-1,0,l-1),query_tree1(1,0,n-1,r+1,n-1))+m;
		printf("%.1f\n",max(ma,m1));
	}
}