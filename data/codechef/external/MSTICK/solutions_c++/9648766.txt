#include<iostream>
#include<limits.h>
#include<bits/stdc++.h>
using namespace std;
struct node 
{
	long long int m,r;
}t[400001];
long int max(long int a,long int b)
{
	if(a>b)
	return a;
	return b;
}
long int min(long int a,long int b)
{
	if(a>b)
	return b;
	return a;
}
long int find(int l,int h,int s,int e,int idx)
{
	if(l>e||h<s||s>e)
	{
		return INT_MAX;
	}
	else if(l<=s&&h>=e)
	return t[idx].m;
	else
	{
		int mid=(s+e)/2;
		return min(find(l,h,s,mid,2*idx+1),find(l,h,mid+1,e,2*idx+2));
	}
}
long int find2(int l,int h,int s,int e,int idx)
{
	if(l>e||h<s||s>e)
	{
		return INT_MIN;
	}
	else if(l<=s&&h>=e)
	return t[idx].r;
	else
	{
		int mid=(s+e)/2;
		return max(find2(l,h,s,mid,2*idx+1),find2(l,h,mid+1,e,2*idx+2));
	}
}
void built(long int a[],int s,int e,int idx)
{
	if(s==e)
	{
		t[idx].m=a[s];
		t[idx].r=a[s];
	}
	else
	{
		long int mid=(s+e)/2;
		built(a,s,mid,2*idx+1);
		built(a,mid+1,e,2*idx+2);
		t[idx].m=t[idx+idx+1].m>t[2*idx+2].m?t[2*idx+2].m:t[2*idx+1].m;
		t[idx].r=t[idx+idx+1].r<t[2*idx+2].r?t[2*idx+2].r:t[2*idx+1].r
		;
	}
}
int main()
{
	int n,i;
	cin>>n;
	long int a[n];
	for(i=0;i<n;i++)
	{
		cin>>a[i];
	}
	built(a,0,n-1,0);
	/*for(i=0;i<2*n-1;i++)
	{
		cout<<"Max is  "<<t[i].r<<"Min is  "<<t[i].m<<"\n";
	}*/
	int q;
	cin>>q;
	long int p,r;
	double m1,m2,m3;
	for(i=0;i<q;i++)
	{
		cin>>p>>r;
		m1=(double)find(p,r,0,n-1,0);
		m2=(double)find2(p,r,0,n-1,0);
		if(p!=0&&r!=n-1)
		{
			m3=(double)max(find2(0,p-1,0,n-1,0),find2(r+1,n-1,0,n-1,0));
		}
		else if(p==0)
		{
			m3=(double)find2(r+1,n-1,0,n-1,0);
		}
		else
		m3=(double)find2(0,p-1,0,n-1,0);
		double res=(double)m1;
		if((m2-m1)/2.0>m3)
		{
			res+=(m2-m1)/2.0;
		}
		else
		{
			res+=m3;
		}
		printf("%0.1lf\n",res);
	}
	return 0;
}