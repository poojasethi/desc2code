    #include<cstdio>
    #include<cmath>
    #include<algorithm>
    using namespace std;
     
    int power[21],A[100001],M[100001][21],M1[100001][21];
     
    int MinTime(int i, int j)
    {
            int k = log2(j-i+1);
            return (A[M[i][k]] <= A[M[j-power[k]+1][k]]) ? A[M[i][k]] : A[M[j-power[k]+1][k]];
    }
     
    int MaxTime(int i, int j)
    {
            int k = log2(j-i+1);
            return (A[M1[i][k]] >= A[M1[j-power[k]+1][k]]) ? A[M1[i][k]] : A[M1[j-power[k]+1][k]];
    }
     
    void RMQ_MIN(int n)
    {
        int i, j;
        for (i = 0; i < n; i++) M[i][0] = i;
        
        for (j = 1; power[j] <= n; j++)
            {
                    for (i = 0; i + power[j] - 1 < n; i++)
                    {
                            M[i][j] = (A[M[i][j - 1]] < A[M[i + power[j-1]][j - 1]]) ? M[i][j - 1] : M[i + power[j-1]][j - 1];
                    }
            }
    }
     
    void RMQ_MAX(int n)
    {
            int i,j;
            for(i = 0; i < n; i++) M1[i][0] = i;
        
            for(j = 1; power[j] <= n; j++)
            {
                    for (i = 0; i + power[j] - 1 < n; i++)
                    {
                        M1[i][j] = (A[M1[i][j - 1]] > A[M1[i + power[j-1]][j - 1]]) ? M1[i][j - 1] : M1[i + power[j-1]][j - 1];
                    }
            }
    }
     
    int main()
    {
        double Ans,FastTime;
        int i,N,Q,L,R,Min1,Max1,Max2,Max3,Max4;
        
        power[0] = 1;
        for(i=1; i<=20; i++) power[i] = 2*power[i-1];
        
        scanf("%d",&N);
        for(i=0; i<N; i++) scanf("%d",&A[i]);
     
        RMQ_MIN(N);
        RMQ_MAX(N);
        
        scanf("%d",&Q);
        while(Q--)
        {
            scanf("%d%d",&L,&R);
            Min1 = MinTime(L,R);
            //printf("%d ",Min1);
            Max1 = MaxTime(L,R);
            //printf("%d ",Max1);
            FastTime = (Max1-Min1)/2.0;
            //printf("%d ",FastTime);
            Max2 = (L > 0) ? MaxTime (0,L-1) : 0;
            Max3 = (R < N-1) ? MaxTime(R+1, N-1) : 0;
            Max4 = max(Max2 + 0.0, Max3 + 0.0);
            Ans  = Min1 + max( FastTime ,  Max4 + 0.0 );
            printf("%.1lf\n",Ans);
        }
      return 0;
    } 