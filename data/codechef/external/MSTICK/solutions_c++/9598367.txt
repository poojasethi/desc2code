#include<iostream>
#include<cstdio>
#include<algorithm>
#include<map>
#include<set>
#include<vector>
#include<cstring>
#include<queue>
#include<stack>
#include<list>
#include<cstdlib>
#include<cmath>
#include<string>
#include<climits>
using namespace std;
#define ll long long
#define inf INT_MAX
const ll mix=100001;
const ll mod=1000000007;
struct ss
{
  int mn,mx;
};
ss tree[4*mix];
int ar[mix+1];
void create(int in,int s,int e)
{
  if(s==e)
  {
    tree[in].mn=tree[in].mx=ar[s];
    return ;
  }
  int mid=(s+e)/2;
  create(2*in,s,mid);
  create(2*in+1,mid+1,e);
  tree[in].mx=max(tree[2*in].mx,tree[2*in+1].mx);
  tree[in].mn=min(tree[2*in].mn,tree[2*in+1].mn);
}
ss query(int in,int s,int e,int l,int r)
{
  ss p,q,rs;
   if(l>e||r<s)
   {
     rs.mx=-inf; rs.mn=inf;
     return rs;
   }
   if(l<=s&&e<=r) return tree[in];
   int mid=(s+e)/2;
   p=query(2*in,s,mid,l,r);
   q=query(2*in+1,mid+1,e,l,r);
   rs.mx=max(p.mx,q.mx);
   rs.mn=min(p.mn,q.mn);
   return rs;

}
int main()
{
  ss x,y,z;
  double p,q,r1;
  int n,i,Q,l,r,t,k;
  cin>>n;
  for(i=0;i<n;i++)
    cin>>ar[i];
  create(1,0,n-1);
  cin>>Q;
  while(Q--)
  {
     cin>>l>>r;
     if(l>r)
      swap(l,r);
     x=query(1,0,n-1,0,l-1);
     y=query(1,0,n-1,r+1,n-1);
     z=query(1,0,n-1,l,r);
     p=x.mx;q=y.mx;
     r1=(z.mx-z.mn)/2.0;
     printf("%0.1lf\n",z.mn+max(p,max(q,r1))); 
  }
  return 0;
}