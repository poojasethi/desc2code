#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MAXN 100001
#define SIZE 1<<18
#define inf 1000000000
ll mintree[SIZE];
ll maxtree[SIZE];
ll B[MAXN];
void build_min_tree(ll a,ll b,ll node)
{
	if(a>b) return;
	if(a==b)
	{
		mintree[node]=B[a];
		return;
	}
	build_min_tree(a,(a+b)/2,2*node);
	build_min_tree((a+b)/2+1,b,2*node+1);
	
	mintree[node]=min(mintree[2*node],mintree[2*node+1]);
}
ll query_min_tree(ll a,ll b,ll i,ll j,ll node)
{
	if(a>b || a>j || b<i)
	return inf;
	if(a>=i && b<=j)
	return mintree[node];
	
	ll q1=query_min_tree(a,(a+b)/2,i,j,2*node);
	ll q2=query_min_tree((a+b)/2+1,b,i,j,2*node+1);
	
	return min(q1,q2);
}
void build_max_tree(ll a,ll b,ll node)
{
	if(a>b) return;
	if(a==b)
	{
		maxtree[node]=B[a];
		return;
	}
	build_max_tree(a,(a+b)/2,2*node);
	build_max_tree((a+b)/2+1,b,2*node+1);
	
	maxtree[node]=max(maxtree[2*node],maxtree[2*node+1]);
}
ll query_max_tree(ll a,ll b,ll i,ll j,ll node)
{
	if(a>b || a>j || b<i)
	return -inf;
	if(a>=i && b<=j)
	return maxtree[node];
	
	ll q1=query_max_tree(a,(a+b)/2,i,j,2*node);
	ll q2=query_max_tree((a+b)/2+1,b,i,j,2*node+1);
	
	return max(q1,q2);
}
int main()
{
	ios_base::sync_with_stdio(0);
	int n,l,r,q;
	cin>>n;
	for(int i=0;i<n;i++)
	cin>>B[i];
	build_min_tree(0,n-1,1);
	build_max_tree(0,n-1,1);
	cin>>q;
	while(q--)
	{
		cin>>l>>r;
		ll m=query_min_tree(0,n-1,l,r,1);
		double v1,v2,v3;
		v1=v2=v3=0;
		v1=(m+query_max_tree(0,n-1,l,r,1))/2.0;
		if(r<n-1)
		v2=(m+query_max_tree(0,n-1,r+1,n-1,1))/1.0;
		if(l>0)
		v3=(m+query_max_tree(0,n-1,0,l-1,1))/1.0;
		double ans=max(v1,max(v2,v3));
		printf("%.1lf\n",ans);
	}
}