#include<bits/stdc++.h>
using namespace std;

#define Max 1e9+7

const int maxn = 1e5 + 10;
int A[maxn],st[4 * maxn][2];
int query(int idx,int ss,int se,int l,int r,int *resMax,int *resMin);
void buildst(int idx,int ss,int se);
void merge(int *p,int *q, int l, int r,int s, int t) ;

int main()
{
	//freopen("in.in","r",stdin);
	int n,nq,l,r,max1,max2,max3,min1,min2,min3;
	float time;
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		cin>>A[i];
	}
	cin>>nq;
	buildst(1,1,n);
	
//	for(int i=1;i<=2*n-1;i++)
//	{
//		cout<<st[i][0]<<" "<<st[i][1];
//		cout<<endl;		
//	}
	
	while(nq-->0)
	{
		max1=max2=max3=0;
		min1=min2=min3=Max;
		cin>>l>>r;
		l = l+1;
		r = r+1;
		query(1,1,n,l,r,&max1,&min1);
		//cout<<max1<<" "<<min1<<endl;		
		if(l!=1)
			query(1,1,n,1,l-1,&max2,&min2);
		if(r!=n)
			query(1,1,n,r+1,n,&max3,&min3);
		max2 = max(max3,max2);
		
		time = ((float)max1-(float)min1)/2;
		//printf("%0.1f\n",time);
		time = (time>float(max2)?time:(float)max2) + (float)min1;
		printf("%0.1f\n",time);
		
	}
	return 0;
}

void buildst(int idx,int ss,int se)
{
    if( ss == se )
	{
        st[idx][0] = A[ss];
        st[idx][1] = A[ss];
        return;
    }
    int mid = (ss+se) >> 1;
    buildst(2*idx, ss, mid);
	buildst(2*idx+1, mid+1, se);
    merge(&st[idx][0],&st[idx][1], st[2*idx][0], st[2*idx+1][0],st[2*idx][1], st[2*idx+1][1]);
}

void merge(int *p,int *q, int l, int r,int s, int t) 
{
    *p = max(l,r);
    *q = min(s,t);
}

int query(int idx,int ss,int se,int l,int r,int *resMax,int *resMin)
{
    if( l > se || r < ss )
	{
		*resMax = 0;
		*resMin = Max;
		return 0;
	}	
    if( l <= ss && se <= r )
	{
		*resMax = st[idx][0];
		*resMin = st[idx][1];
		return 0;
	}

    int mid = ( ss + se ) >> 1;
    query(2*idx, ss, mid, l, r,resMax,resMin);
    int L0 = *resMax;
    int L1 = *resMin;
    query(2*idx+1, mid+1, se, l, r,resMax,resMin);
    int R0 = *resMax;
    int R1 = *resMin;
    merge(resMax,resMin, L0, R0,L1,R1);
}
