#include<iostream>
#include<stack>
#include<map>
#include<vector>
#include<queue>
#include<set>
#include<algorithm>
#include<string>
#include<iomanip>
#include<stdio.h>
#include<math.h>
#include<ctype.h>
#include<string.h>
#include<cstring>
#include<time.h>
using namespace std;
#define ull unsigned long long
#define ll long long
#define pll pair<ll,ll>
#define ppll pair<ll, pair<ll,ll> >
#define inf 1000000000
#define m 95542721

ll power(ll a, ll b)
{
    if(!b)
        return 1;
    if(b==1)
        return a;
    ll temp;
    temp=power(a,b/2);
    temp*=temp;
    temp%=m;
    if(b%2)
    {
        temp*=a;
        temp%=m;
    }
    return temp;
}

pll constructST(vector<ll> &a, vector<pll> &st, ll s, ll e, ll i)
{
    if(s==e)
    {
        st[i].first=st[i].second=a[s];
        return st[i];
    }
    ll mid=s+((e-s)/2);
    pll temp1,temp2;
    temp1=constructST(a,st,s,mid,2*i+1);
    temp2=constructST(a,st,mid+1,e,2*i+2);
    st[i].first=max(temp1.first,temp2.first);
    st[i].second=min(temp1.second,temp2.second);
    return st[i];
}

pll query_tree(vector<pll> &st, ll ss, ll se, ll qs, ll qe, ll i)
{
    if(qs>se || qe<ss || ss>se)
        return pll(-inf,inf);
    
    if(ss>=qs && se<=qe)
        return st[i];
    
    ll mid=ss+((se-ss)/2);
    pll temp1,temp2,res;
    temp1=query_tree(st,ss,mid,qs,qe,2*i+1);
    temp2=query_tree(st,mid+1,se,qs,qe,2*i+2);
    res.first=max(temp1.first,temp2.first);
    res.second=min(temp1.second,temp2.second);
    return res;
}

int main()
{
    ll n,i,q,l,r,x,max_size;
    double res1,res2,res3;
    vector<ll> a;
    vector<pll> st;
    cin>>n;
    a.resize(n);
    for(i=0;i<n;i++)
    {
        cin>>a[i];
    }
    x=(ll)(ceil(log2(n)));
    max_size=power(2,x+1)-1;
    st.resize(max_size);
    constructST(a,st,0,n-1,0);
    
    /*for(i=0;i<max_size;i++)
        cout<<st[i].first<<" ";
    cout<<endl;
    for(i=0;i<max_size;i++)
        cout<<st[i].second<<" ";
    cout<<endl;*/
    
    cin>>q;
    while(q--)
    {
        cin>>l>>r;
        pll temp=query_tree(st,0,n-1,l,r,0);
        res1=(double)((temp.first-temp.second)/2.0);
        res2=max(query_tree(st,0,n-1,0,l-1,0).first,query_tree(st,0,n-1,r+1,n-1,0).first);
        res3=max(res1,res2)+temp.second;
        //cout<<temp.second<<" "<<res1<<" "<<res2<<endl;
        printf("%.1lf\n",res3);
    }
}






