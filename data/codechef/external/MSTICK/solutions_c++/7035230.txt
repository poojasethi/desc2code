#include<iostream>
using namespace std;
#define infinite 100000001
class node
{
   int L;
   int R;
   node *left;
   node *right;
   int maximum;
   int minimum;
public:
   int findmax(int,int);
   int findmin(int,int);
   void makeTree(int*,int,int);
};
int node::findmax(int L,int R)
{
   if(L<=this->L&&this->R<=R)
      return this->maximum;
   if(this->L>R||L>this->R)
      return 0;
   int max1=this->left->findmax(L,R);
   int max2=this->right->findmax(L,R);
   if(max1>max2)
      return max1;
      return max2;
}
int node::findmin(int L,int R)
{
   if(this->L>=L&&this->R<=R)
      return this->minimum;
   if(this->L>R||L>this->R)
      return infinite;
   int min1=this->left->findmin(L,R);
   int min2=this->right->findmin(L,R);
   if(min1>min2)
      return min2;
      return min1;
}
void node::makeTree(int *p,int L,int R)
{
   this->L=L;
   this->R=R;
   if(L==R)
   {
      this->left=this->right=NULL;
      this->maximum=this->minimum=p[L];
   }
   else
   {
      int mid=(L+R)/2;
      this->left=new node;
      this->right=new node;
      this->left->makeTree(p,L,mid);
      this->right->makeTree(p,mid+1,R);
      if(this->left->maximum>this->right->maximum)
         this->maximum=this->left->maximum;
      else
         this->maximum=this->right->maximum;
      if(this->left->minimum<this->right->minimum)
         this->minimum=this->left->minimum;
      else
         this->minimum=this->right->minimum;
   }
}
int main()
{
	int N,Q,i,j,temp,L,R;
	node *start;
	start=new node;
	cin>>N;
    int *arr=new int[N];
	for(i=0;i<N;i++)
	cin>>arr[i];
	start->makeTree(arr,0,N-1);
	cin>>Q;
	while(Q--)
	{   int f1=0;
	    int f2=0;
	    int f3=0;
	    int mn=0;
	    float d=0.0;
	  cin>>L>>R;
	  mn=start->findmin(L,R);
	  if(L>0)
	  {
	  	f1=start->findmax(0,L-1);
	  }
	  if(R<N-1)
	  {
	  	f2=start->findmax(R+1,N-1);
	  }
	  
	  f1=f1>f2?f1:f2;
	  f1*=2;
	  f3=start->findmax(L,R);
	  f3=f3-mn;
	  if(f1<f3)
	  f1=f3;
	  cout<<f1/2+mn;
	  cout<<".";
	  if(f1%2!=0)
	  cout<<"5";
	  else
	  cout<<"0";
	  	cout<<endl;
	}
	return 0;
}