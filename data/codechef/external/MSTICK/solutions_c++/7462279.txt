#include<iostream>
using namespace std;
#define ren -1111111111
#define rep 1111111111
#include<bits/stdc++.h>
typedef long long int lli;
int qs,qe;
  lli maxi[1000000],mini[1000000],arr[1000000];
 void build(int index,int start,int end)
  {
  	 // cout<<" building "<<start<<" "<<end<<endl;
  	 if(start>end) return ;
  	   if(start==end)
  	    {
  	    	mini[index]=arr[start];
  	    	maxi[index]=arr[start];
  	    	return ;
  	    }
  	    build(2*index,start,(start+end)/2);
  	     build(2*index+1,(start+end)/2+1,end);
  	     mini[index]=min(mini[2*index+1],mini[2*index]);
  	     maxi[index]=max(maxi[2*index+1],maxi[2*index]);
  	//return ;
  }
  
   
    lli query(int index ,int start,int end,int type )
     {
     	  //cout<<"finding start "<<start<<" end "<<end<<" index "<<index<<endl;
     	    //cout<<" qs "<<qs<<" qe "<<qe<<endl;
     	  //if(index==0) exit(0);
     	   if((start>end|| start>qe|| end<qs) && type==1) return ren;
     	    if((start>end || start>qe || end<qs) && type==0)  return rep;
     	   else if(start>=qs && end<=qe )
     	    {
     	    	if(type==1)
     	    	 {
     	    	 	return maxi[index];
     	    	 }
     	    	 else return mini[index];
     	    }
     	    
     	   lli a=query(2*index,start,(start+end)/2,type);
     	   lli b=query(2*index+1,(start+end)/2+1,end,type);
     	   if(type==1) return max(a,b);
     	   else return min(a,b);
     }
int main()
 {
 	 int n;
 	  cin>>n;
 	   for(int i=0;i<n;i++)
 	    {
 	    	 cin>>arr[i];
 	    }
 	     build(1,0,n-1);
 	      /* cout<<" max tree "<<endl;
 	        for(int i=1;i<=3;i++) cout<<maxi[i]<<" ";
 	         cout<<endl;
 	         cout<<" min tree "<<endl;
 	        for(int i=0;i<5;i++) cout<<mini[i]<<" ";
 	         cout<<endl;*/
 	       
 	     int q;
 	      cin>>q;
 	      while(q--)
 	       {
 	       	
 	       	  cin>>qs>>qe;
 	       	   //qs-=1;
 	       	   //qe-=1;
 	       	   lli vs=qs;
 	       	   lli ve=qe;
 	       	   
 	       	    lli rmin=query(1,0,n-1,0);
 	       	    lli rmax=query(1,0,n-1,1);
 	       	    
 	       	//      cout<<" range max is "<<rmax<<" r min is "<<rmin<<endl;
 	       	     qs=0;
 	       	     qe=vs-1;
 	       	      
 	       	     lli lmax=0,lmin=0;
 	       	     
 	       	     if(qe<0 || qs>qe) lmax=0;
 	       	     
 	       	     else
 	       	     lmax=query(1,0,n-1,1);
 	       	     
 	       	     qs=ve+1;
 	       	     qe=n-1;
 	       	     
 	       	      if(qs<=n-1 && qe>=0 && qs<=qe)
 	       	      lmin=query(1,0,n-1,1);
 	       	      else lmin=0;
 	       	      
 	       	      
 	       	      
 	       	      double ans=(double)rmin+max(max((double)(rmax-rmin)/2.0,(double)lmax),(double)lmin);
 	       	       printf("%.1lf\n",ans);
 	       }
 }