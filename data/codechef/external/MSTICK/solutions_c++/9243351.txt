#include<bits/stdc++.h>
typedef long long int ll;
using namespace std;

void build(int node, int beg, int end, vector<ll>& M, vector<ll>& m, const vector<ll>& n)
{
	if (beg == end)
	    M[node] = m[node] = n[beg];
	else
    {
	    build(node * 2, beg, (beg + end) / 2, M, m, n);
	    build(node * 2 + 1,(beg + end) / 2 + 1, end, M, m, n);
	    M[node] = max(M[2 * node], M[2 * node + 1]);
	    m[node] = min(m[2 * node], m[2 * node + 1]);
	}
}

pair<ll,ll> query(int node, int beg, int end, vector<ll>& M, vector<ll>& m, vector<ll>& n, int i, int j)
{
    pair<int,int> p1, p2;

    if (end < i || beg > j)
	return make_pair(-1, -1);

    if (beg >= i && end <= j)
	return make_pair(M[node], m[node]);

    p1 = query(2 * node, beg, (beg + end) / 2, M, m, n, i, j);
    p2 = query(2 * node + 1, (beg + end) / 2 + 1, end, M, m, n, i, j);

    if (p1 == make_pair(-1, -1))
	return p2;

    if (p2 == make_pair(-1, -1))
	return p1;

    pair<ll,ll> res = make_pair(max(max(0, p1.first), max(0, p2.first)), min(max(0, p1.second), max(0, p2.second)));
    return res;
}


int main(){

    int N, Q, i, j;
    cin >> N;
    vector<ll> n(N), m(4 * N), M(4 * N);
    for (int i = 0; i < N; i++)
        cin >> n[i];
    cin >> Q;

    build(1, 0, N - 1, M, m, n);
    for (int k = 0; k < Q; k++)
    {
        cin >> i >> j;
        pair<ll,ll> res1 = query(1, 0, N - 1, M, m, n, i, j);
        pair<ll,ll> res2 = query(1, 0, N - 1, M, m, n, 0, i-1);
        pair<ll,ll> res3 = query(1, 0, N - 1, M, m, n, j+1, N-1);
        double max1, max2;
        if(res2.first>res3.first)
            max1=(double)res2.first;
        else
            max1=(double)res3.first;
        max1=max1+(double)res1.second;
        max2=(double)((double)res1.first+(double)res1.second)/2;
        if(max2>max1)
            max1=max2;
       cout<<std::fixed<<setprecision(1)<<max1<<endl;

    }
    return 0;
}
