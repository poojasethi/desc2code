#include<iostream>
#include<cstdio>
#include<climits>
using namespace std;
int arr[100001],min_tree[400001],max_tree[400001];
void create_min_tree(int lo, int hi, int idx)
{
    if(lo == hi)
       min_tree[idx] = arr[lo];
    else
    {
        int mid = (lo + hi)/2;
        create_min_tree(lo, mid, 2*idx+1);
        create_min_tree(mid+1, hi, 2*idx+2);
        min_tree[idx] = min(min_tree[2*idx+1], min_tree[2*idx+2]);
    }
}
void create_max_tree(int lo, int hi, int idx)
{
    if(lo == hi)
       max_tree[idx] = arr[lo];
    else
    {
        int mid = (lo + hi)/2;
        create_max_tree(lo, mid, 2*idx+1);
        create_max_tree(mid+1, hi, 2*idx+2);
        max_tree[idx] = max(max_tree[2*idx+1], max_tree[2*idx+2]);
    }
}
int query_min_tree(int lo, int hi, int left, int right, int idx)
{
    if( (right < lo) || (left > hi))
        return INT_MAX;
    if( (left <= lo) && (hi <= right))
        return min_tree[idx];
    int mid = (lo+hi)/2;
    int p1 = query_min_tree(lo, mid, left, right, 2*idx+1);
    int p2 = query_min_tree(mid+1, hi, left, right, 2*idx+2);
    return min(p1, p2);
}
int query_max_tree(int lo, int hi, int left, int right, int idx)
{
    if( (right < lo) || (left > hi))
        return INT_MIN;
    if( (left <= lo) && (hi <= right))
        return max_tree[idx];
    int mid = (lo+hi)/2;
    int p1 = query_max_tree(lo, mid, left, right, 2*idx+1);
    int p2 = query_max_tree(mid+1, hi, left, right, 2*idx+2);
    return max(p1, p2);
}
int main()
{
   int n,q,left,right;
   scanf("%d",&n);
   for(int i=0; i<n; i++)
    scanf("%d",&arr[i]);
   create_min_tree(0,n-1,0);
   create_max_tree(0,n-1,0);
//   for(int i=0; i<4*n; i++)
//    printf("%d ",min_tree[i]);
//   printf("\n");
//   for(int i=0; i<4*n; i++)
//    printf("%d ",max_tree[i]);
   scanf("%d",&q);
   while(q--)
   {
       scanf("%d%d",&left,&right);
       int min_time = query_min_tree(0,n-1,left,right,0);
       int max_time1 = query_max_tree(0,n-1,left,right,0);
       double ans = 1.0 * min_time;
       max_time1 = max_time1 - min_time;
       int max_time2 = 0, max_time3 = 0;
       if(left != 0)
        max_time2 = query_max_tree(0,n-1,0,left-1,0);
       if(right != n-1)
        max_time3 = query_max_tree(0,n-1,right+1,n-1,0);

       max_time2 *=2;
       max_time3 *=2;
       int max_time4 = max(max_time1, max(max_time2, max_time3));
       ans += max_time4/2.0;
       printf("%.1lf\n",ans);
   }

   return 0;
}
