#include<cstdio>
#include<algorithm>
using namespace std;
//const double pi=acos(-1.0);
const double eps=1e-11;
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end())
#define ll long long int
////#define scl(x) scanf("%lld",&x)
#define scs(x) scanf("%s",x)
#define printl(x) printf("%lld\n",x)
#define print(x) printf("%d\n",x)
#define printd(x) printf("%lf\n",x)
#define prints(x) printf("%s\n",x)
#define DEBUG(x) cout<<"Value of "<<#x<<" is "<<x<<endl
#define pc putchar
#define mp(A,B) make_pair(A,B)
#define pb(X) push_back(X)
#define INF 1000000000
#define MOD 1000000007
#define SET(x,y) memset(x,y,sizeof(x));
#define endl "\n"
#define f first
#define s second
//#define sc(x) scanf("%d",&x)
#define gc getchar_unlocked
//#define gc getchar
inline void sc(int &x)
{
	register int c = gc();
	x = 0;
	int neg = 0;
    for(; ((c<48 || c>57) && c != '-');c=gc())
		;
	if(c=='-')
	{
		neg = 1;
		c = gc();
	}
	for(; c>47 && c<58 ; c = gc()) {
		x = (x<<1) + (x<<3) + c - 48;
	}
	if(neg)
    	x = -x;
}
inline long long scl()
{
    int c;
    do
        c = fgetc(stdin);
    while ( (c < '0' || c > '9') && c != EOF );
    long long a = 0;
    while ( c >= '0' && c <= '9' )
    {
        a = a*10 + (c - '0');
        c = fgetc(stdin);
    }
    return a;
}
//#define MAXN 100002
struct node
{
	int maxi,mini;
};
int ar[100002];
struct node ST[265000];
void buildTree(int node, int start, int end)
{
	if(start==end)
	{
		ST[node].maxi=ST[node].mini=ar[start];
		return;
	}
	int mid=(start+end)>>1;
	buildTree(2*node, start, mid);
	buildTree(2*node+1,mid+1,end);
	ST[node].maxi=max(ST[2*node].maxi,ST[2*node+1].maxi);
	ST[node].mini=min(ST[2*node].mini,ST[2*node+1].mini);
}
int minQuery(int node, int start, int end, int qs, int qe)
{
	if(start>qe||end<qs||start>end)
		return INF;
	if(start>=qs&&end<=qe)
		return ST[node].mini;
	int mid=(start+end)>>1;
	return (min(minQuery(2*node,start,mid,qs,qe),minQuery(2*node+1,mid+1,end,qs,qe)));
}
int maxQuery(int node, int start, int end, int qs, int qe)
{
	if(start>qe||end<qs||start>end)
		return -1;
	if(start>=qs&&end<=qe)
		return ST[node].maxi;
	int mid=(start+end)>>1;
	return (max(maxQuery(2*node,start,mid,qs,qe),maxQuery(2*node+1,mid+1,end,qs,qe)));
}
int main()
{
	int i,n,q,x,y;
	int maximum,minimum;
	double ans,secMax;
	sc(n);
	for(i=0;i<n;i++)
		ar[i]=scl();
	buildTree(1,0,n-1);
	sc(q);
	while(q--)
	{
		secMax=0.0;
		sc(x);sc(y);
		minimum=minQuery(1,0,n-1,x,y);
		maximum=maxQuery(1,0,n-1,x,y);
		ans=minimum+(maximum-minimum)/2.0;
		secMax=max(maxQuery(1,0,n-1,0,x-1),maxQuery(1,0,n-1,y+1,n-1));
		secMax+=minimum;
		ans=max(secMax,ans);
		printf("%.1lf\n",ans);
	}
	return 0;
}