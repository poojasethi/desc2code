#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
int n, q, A[maxn];// array of elements
int stmin[4 * maxn];//segment tree array
int stmax[4 * maxn];
void mergemin(int &p, int &l, int &r) {
  		p = min(l , r);
  	}
  	void mergemax(int &p, int &l, int &r) {
  		p = max(l,r);
  	}
void buildstmin(int idx,int ss,int se){
		if( ss == se ){
 			stmin[idx] = A[ss];
 			return;
		}
		int mid = (ss+se) >> 1;
      	buildstmin(2*idx, ss, mid);
		buildstmin(2*idx+1, mid+1, se);
		mergemin(stmin[idx], stmin[2*idx], stmin[2*idx+1]);
	}
	void buildstmax(int idx,int ss,int se){
		if( ss == se ){
 			stmax[idx] = A[ss];
 			return;
		}
		int mid = (ss+se) >> 1;
      	buildstmax(2*idx, ss, mid);
		buildstmax(2*idx+1, mid+1, se);
		mergemax(stmax[idx], stmax[2*idx], stmax[2*idx+1]);
	}
	int querymin(int idx,int ss,int se,int l,int r){
		if( l > se || r < ss ) return INT_MAX;
		if( l <= ss && se <= r ) return stmin[idx];
		int mid = ( ss + se ) >> 1;
		int L = querymin(2*idx, ss, mid, l, r);
		int R = querymin(2*idx+1, mid+1, se, l, r);
		int res;
      	mergemin(res, L, R);
      	return res;
	}
	int querymax(int idx,int ss,int se,int l,int r){
		if( l > se || r < ss ) return INT_MIN;
		if( l <= ss && se <= r ) return stmax[idx];
		int mid = ( ss + se ) >> 1;
		int L = querymax(2*idx, ss, mid, l, r);
		int R = querymax(2*idx+1, mid+1, se, l, r);
		int res;
      	mergemax(res, L, R);
      	return res;
	}
	
int main()
{
	int l,r,i;
	cin>>n;
	double small,large,large1,large2,ans;
	for(i=1;i<=n;i++)
	{
		cin>>A[i];
	}
	buildstmin(1,1,n);// segment tree start,array start,array end
	buildstmax(1,1,n);
	cin>>q;
	while(q--)
	{
		cin>>l>>r;
		l=l+1;
		r=r+1;
		small=querymin(1,1,n,l,r);
		large=querymax(1,1,n,l,r);
		//cout<<small<<" "<<large<<" ";
		large1=querymax(1,1,n,1,l-1);
		large2=querymax(1,1,n,r+1,n);
		large1=max(large1,large2);
		ans=small+max(((large-small)/2.0),large1);
		//cout<<ans<<"\n";
		printf("%.1lf\n", ans +0.01);	
	}
	return 0;
}