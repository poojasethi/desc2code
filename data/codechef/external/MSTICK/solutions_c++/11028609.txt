#include<bits/stdc++.h>
using namespace std;
typedef long long int ll ;
struct node
{
    ll mi,ma;
};
void build(struct node B[],ll i,ll low,ll high,ll A[])
{
    if(low==high)
    {
        B[i].mi=A[low];
        B[i].ma=A[low];

        return;
    }
    int mid=(low+high)/2;
    build(B,2*i,low,mid,A);
    build(B,2*i+1,mid+1,high,A);
    B[i].ma=max(B[2*i].ma,B[2*i+1].ma);
    B[i].mi=min(B[2*i].mi,B[2*i+1].mi);
    return;
}

int  queryh(struct node B[],ll i,ll low,ll high,ll l,ll r)
{
    if(low==l&&high==r)
    {
        return B[i].ma;
    }
    int mid=(low+high)/2;
    if(l>=low&&r<=mid)
    {
        return queryh(B,2*i,low,mid,l,r);
    }
    if(l>mid&&r<=high)
    {
        return queryh(B,2*i+1,mid+1,high,l,r);
    }

    int h= max(queryh(B,2*i,low,mid,l,mid),queryh(B,2*i+1,mid+1,high,mid+1,r));
   // cout<<h<<" "<<i<<endl;
    return h;
}
int  queryl(struct node B[],ll i,ll low,ll high,ll l,ll r)
{
    if(low==l&&high==r)
    {
        return B[i].mi;
    }
    int mid=(low+high)/2;
    if(l>=low&&r<=mid)
    {
        return queryl(B,2*i,low,mid,l,r);
    }
    if(l>mid&&r<=high)
    {
        return queryl(B,2*i+1,mid+1,high,l,r);
    }
    return min(queryl(B,2*i,low,mid,l,mid),queryl(B,2*i+1,mid+1,high,mid+1,r));
}
int main()
{
    ll n;
    scanf("%lld",&n);
    ll i,A[n];
    for(i=0;i<n;i++)
    {
        scanf("%lld",&A[i]);
    }
    int x= int(ceil(log2(n)));
    int siz=2*int(pow(2,x));
    struct node B[siz];
    //cout<<siz<<"--\n";
    build(B,1,0,n-1,A);
    ll q;
    scanf("%lld",&q);
    while(q--)
    {
        ll l,r;
        scanf("%lld %lld",&l,&r);
        int lo,hi,ls=0,rs=0;
        if(l-0-1>=0)
        {
            ls=queryh(B,1,0,n-1,0,l-1);
        }
        if(n-1-r-1>=0)
        {
            rs=queryh(B,1,0,n-1,r+1,n-1);
        }
        lo=queryl(B,1,0,n-1,l,r);
        hi=queryh(B,1,0,n-1,l,r);
        //cout<<lo<<" "<<hi<<endl;
        float ans=ls+lo;
        ans=max(ans,float(rs+lo));
        ans=max(ans,lo+float(hi-lo)/2);
        printf("%.1f\n",ans);
        //printf("%.1f\n",lo+float(hi-lo)/2);
        //printf("%lld.0\n",query(B,1,0,n-1,l,r));
    }
return 0;
}
