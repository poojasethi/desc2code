#include<bits/stdc++.h>
using namespace std;
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
//Works for forward as well as backward iteration
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define F first
#define S second
#define MOD 1000000007
#define newl cout<<"\n"
#define newli "\n"
#define itn int
#define reutrn return
typedef long double lld;
//-----------------------------------------------------
/*lld gcd(lld m, lld n)
{
    if(n == 0)
        return m;
    return gcd(n, m % n);
}
//---------------------------------------------------------
lld powmod(lld a,lld b)
{
    if(b==0)return 1;
    lld x=powmod(a,b/2);
    lld y=(x*x)%MOD;
    if(b%2)
        return (a*y)%MOD;
    return y%MOD;
}*/
//-------------------------------------------------------
lld a[100010],tr[400040][2];
void build(int node,int start,int end)
{
    if(start==end)
    {
        tr[node][0]=a[start];
        tr[node][1]=a[start];

    }
    else if(start>end)
        return;
    else
    {
        int mid=(start+end)/2;
        build(2*node,start,mid);
        build(2*node+1,mid+1,end);
        tr[node][0]=min(tr[node*2][0],tr[node*2+1][0]);
        tr[node][1]=max(tr[node*2][1],tr[node*2+1][1]);
    }
}
int querymin(int node,int start,int end,int l,int r)
{
    if(r<start || end<l)
        return MOD;
    if(l<=start&&end<=r)
        return tr[node][0];
    int mid=(start+end)/2;
    int num1=querymin(2*node,start,mid,l,r);
    int num2=querymin(2*node+1,mid+1,end,l,r);
    return min(num1,num2);
}
int querymax(int node,int start,int end,int l,int r)
{
    if(r<start || end<l)
        return 0;
    if(l>r)
        return 0;
    if(l<=start&&end<=r)
        return tr[node][1];
    int mid=(start+end)/2;
    int num1=querymax(2*node,start,mid,l,r);
    int num2=querymax(2*node+1,mid+1,end,l,r);
    return max(num1,num2);
}
int main()
{
    int n,q;
  //  cin>>n;
    scanf("%d",&n);
    rep(i,1,n+1)
        scanf("%Lf",&a[i]);
    lld cu[n+1];
    memset(cu,0,sizeof(cu));
    rep(i,1,n+1)
        cu[i]=cu[i-1]+a[i];
   /* rep(i,0,n+1)
        cout<<cu[i]<<" ";
    cout<<endl;*/
    build(1,1,n);
    cin>>q;    
    while(q--)
    {
        lld num,num1=0,num2=0,num3;
        int l,r;
        scanf("%d%d",&l,&r);
       // cin>>l>>r;
        l++;r++;
         num=querymin(1,1,n,l,r);
         num3=querymax(1,1,n,l,r);
         
         num1=querymax(1,1,n,1,l-1);
         if(num1!=0)
             num1+=num;

         num2=querymax(1,1,n,r+1,n);
         if(num2!=0)
             num2+=num;
      //  cout<<num<<" "<<num1<<" "<<num2<<" "<<num3<<"\n";
        lld max1=max(num1,num2);
        lld ans;
        if(max1==0)
            ans=num+(num3-num)/2;
        else
            ans=max(max1,(num3-num)/2+num);

      //  lld ans=max(max1,(num3-max1)/2);
    //    cout<<ans<<"\n";
  printf("%.1Lf\n",ans);
    }
    return 0;
}
