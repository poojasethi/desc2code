#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define INF 1000000001
ll a[100003];
ll tree[2000006];
ll tree2[2000006];
void build(int node,int l,int r)
{
   if(l==r)
     {tree[node]=a[l];
      return;
     }
   if(l>r)
     return;
   else
     {  int mid=(l+r)/2;
        build(node*2,l,mid);
        build(node*2+1,mid+1,r);
        tree[node]=max(tree[node*2],tree[node*2+1]);
     }
}
ll query(int node,int s,int e,int l,int r)
{
   if(l>r or r<s or e<l)
     return 0;
   if(s<=l && e>=r)
      return tree[node];

    int   mid=(l+r)/2;
    ll p1=query(node*2,s,e,l,mid);
    ll p2=query(node*2+1,s,e,mid+1,r);

    return max(p1,p2);
}
void build2(int node,int l,int r)
{
   if(l==r)
     {tree2[node]=a[l];
      return;
     }
   if(l>r)
     return;
   else
     {  int mid=(l+r)/2;
        build2(node*2,l,mid);
        build2(node*2+1,mid+1,r);
        tree2[node]=min(tree2[node*2],tree2[node*2+1]);
     }
}
ll query2(int node,int s,int e,int l,int r)
{
   if(l>r or r<s or e<l)
     return INF;
   if(s<=l && e>=r)
      return tree2[node];

    int   mid=(l+r)/2;
    ll p1=query2(node*2,s,e,l,mid);
    ll p2=query2(node*2+1,s,e,mid+1,r);

    return min(p1,p2);
}
int main()
{
     int n,i,q,l,r;

     cin>>n;
     for(i=0;i<n;i++)
       cin>>a[i];
     build(1,0,n-1);
     build2(1,0,n-1);

     cin>>q;
     while(q--)
     {cin>>l>>r;
      double x=double(query2(1,l,r,0,n-1));

      double ans=double((query(1,l,r,0,n-1)-x)/2);

      if(l-1<0 and r+1<=n-1)
        {ans=max(double(query(1,r+1,n-1,0,n-1)),ans);}
      else if(l-1>=0 && r+1>n-1)
        {ans=max(double(query(1,0,l-1,0,n-1)),ans);}
      else if(l-1>=0 && r+1<=n-1)
        {ans=max(double(query(1,0,l-1,0,n-1)),ans);
        ans=max(ans,double(query(1,r+1,n-1,0,n-1)));

        }
      printf("%0.1f\n",ans+x);
     }
}
