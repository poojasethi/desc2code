#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif
int max(int p,int q)
{
    return (p>q)?p:q;
}
int min(int p,int q)
{
    return (p<q)?p:q;
}

int b[400005],c[400005],a[100005];
void buildmaxtree(int i,int l,int r)
{
    if(l==r)
    {
        b[i]=a[l];
    }
    else
    {
        int m=(l+r)/2;
        buildmaxtree(2*i,l,m);
        buildmaxtree(2*i+1,m+1,r);
        b[i]=max(b[2*i],b[2*i+1]);
    }
}

void buildmintree(int i,int l,int r)
{
    if(l==r)
    {
        c[i]=a[l];
    }
    else
    {
        int m=(l+r)/2;
        buildmintree(2*i,l,m);
        buildmintree(2*i+1,m+1,r);
        c[i]=min(c[2*i],c[2*i+1]);
    }
    //printf("%d %d\n",i,c[i]);
}

int givemin(int i,int l,int r,int reql,int reqr)
{
    if(reql>reqr)
    {
        return INT_MAX;
    }
    else if(l==reql && r==reqr)
    {
        return c[i];
    }
    else
    {
        int m=(l+r)/2;
        return min( givemin(2*i,l,m,reql,min(m,reqr)) , givemin(2*i+1,m+1,r,max(reql,m+1),reqr));
    }
}

int givemax(int i,int l,int r,int reql,int reqr)
{
    if(reql>reqr)
    {
        return INT_MIN;
    }
    else if(l==reql && r==reqr)
    {
        return b[i];
    }
    else
    {
        int m=(l+r)/2;
        return max( givemax(2*i,l,m,reql,min(m,reqr)) , givemax(2*i+1,m+1,r,max(reql,m+1),reqr));
    }
}

int main()
{
    int n,i,q,min1,max1,max2,l,r;
    double ans;
    si(n);
    for(i=0;i<n;i++)
    {
        si(a[i]);
    }
    buildmaxtree(1,0,n-1);
    buildmintree(1,0,n-1);
    si(q);
    while(q--)
    {
        si(l);
        si(r);
       /* if(l==0 && r==n-1)
        for(i=0;i<4*n;i++)
        {
            cout << b[i] << " ";
        }*/
    //    cout << endl;
        min1=givemin(1,0,n-1,l,r);
        max1 = max( givemax(1,0,n-1,0,l-1) , givemax(1,0,n-1,r+1,n-1));
        max2 = givemax(1,0,n-1,l,r);
        //cout << max1 << " " << max2 << " " << min1 << endl;
        if(max2-min1>2*max1 || max1==INT_MIN)
        {
            ans=(double )min1+((double )max2-(double )min1)/2;
        }
        else
        {
            ans=(double )min1+(double )max1;
        }
        cout << fixed << showpoint;
        cout << setprecision(1);
        cout <<  ans << endl;
    }
    return 0;
}
