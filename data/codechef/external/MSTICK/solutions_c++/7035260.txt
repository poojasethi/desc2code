#include<iostream>
#define M 100000004
using namespace std;
int *arr,*st,*st2;
int min(int a,int b)
{
	return a>b?b:a;
}
int max(int a,int b)
{
	return a<b?b:a;
}
void createTree(int root,int l,int h)
{
	if(l>h)
	return;
	if(l==h)
	{	
	st2[root]=st[root]=arr[l];
	return;
	}
	createTree(2*root,l,(l+h)/2);
	createTree(2*root+1,(l+h)/2+1,h);
	st[root]=min(st[2*root],st[2*root+1]);
	st2[root]=max(st2[2*root],st2[2*root+1]);
}
int find_min(int root,int L,int R,int l,int r)
{
	if(R<l||L>r||l>r)
	return M;
	if(L<=l&&R>=r)
	return st[root];
	return min(find_min(2*root,L,R,l,(l+r)/2),find_min(2*root+1,L,R,1+(l+r)/2,r));
}
int find_max(int root,int L,int R,int l,int r)
{
	if(R<l||L>r||l>r)
	return 0;
	if(L<=l&&R>=r)
	return st2[root];
	return max(find_max(2*root,L,R,l,(l+r)/2),find_max(2*root+1,L,R,1+(l+r)/2,r));
}
int main()
{
	int N,Q,L,R,i,in_min;
	int temp;
	float temp2;
	float max;
    cin>>N;
	st=new int[4*N];
	st2=new int[4*N];
	arr=new int[N];
	
	for(i=0;i<N;i++)
		cin>>arr[i];
	createTree(1,0,N-1);
	cin>>Q;
	while(Q--)
	{   
		int f1=0;
	    int f2=0;
	    int f3=0;
	    int mn=0;
	    float d=0.0;
	  cin>>L>>R;
	  mn=find_min(1,L,R,0,N-1);
	  if(L>0)
	  {
	  	f1=find_max(1,0,L-1,0,N-1);
	  }
	  if(R<N-1)
	  {
	  	f2=find_max(1,R+1,N-1,0,N-1);
	  }
	  
	  f1=f1>f2?f1:f2;
	  f1*=2;
	  f3=find_max(1,L,R,0,N-1);
	  f3=f3-mn;
	  if(f1<f3)
	  f1=f3;
	  cout<<f1/2+mn;
	  cout<<".";
	  if(f1%2!=0)
	  cout<<"5";
	  else
	  cout<<"0";
	  	cout<<endl;
	}
	return 0;
} 