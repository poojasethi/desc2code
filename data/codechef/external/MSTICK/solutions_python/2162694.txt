intMax = 10**8+1
def treeQuery(tree1, tree2, start, end, rangeStart, rangeEnd, index):
    if rangeStart<=start and rangeEnd>=end:
        return tree1[index], tree2[index]
    if end<rangeStart or start>rangeEnd:
        return intMax, -1
    middleIndex = (start + end) / 2
    a,c = treeQuery(tree1, tree2, start, middleIndex, rangeStart, rangeEnd, (2*index)+1)
    b,d = treeQuery(tree1, tree2, middleIndex+1, end, rangeStart, rangeEnd, (2*index)+2)
    return min(a,b), max(c,d)
 
def treeMaxQuery(tree, start, end, rangeStart, rangeEnd, index):
    if rangeStart<=start and rangeEnd>=end:
        return -1
    if end<rangeStart or start>rangeEnd:
        return tree[index]
    middleIndex = (start + end) / 2
    return max(treeMaxQuery(tree, start, middleIndex, rangeStart, rangeEnd, (2*index)+1),
               treeMaxQuery(tree, middleIndex+1, end, rangeStart, rangeEnd, (2*index)+2))
 
def makeTree(nums, start, end, tree1, tree2, index):
    if start==end:
        tree1[index] = nums[start]
        tree2[index] = nums[start]
        return nums[start], nums[start]
    middleindex = (start + end) / 2
    a,c = makeTree(nums, start, middleindex, tree1, tree2, (index*2)+1)
    b,d = makeTree(nums, middleindex+1, end, tree1, tree2, (index*2)+2)
    tree1[index] = min(a,b)
    tree2[index] = max(c,d)
    return tree1[index], tree2[index]
 
def getSegmentationTree(nums,n):
    import math
    val = (2*(2**int(math.ceil(math.log(n,2))))) - 1
    tree1 = [0] * val
    tree2 = [0] * val
    start = 0
    end = n-1
    startindex = 0
    makeTree(nums, start, end, tree1, tree2, startindex)
    return tree1, tree2
 
def main():
    import sys
    tokenizedInput = map(int, sys.stdin.read().split())    # Read at once, tokenize
    n = tokenizedInput[0]
    nums = tokenizedInput[1:n+1]
    tree1, tree2 = getSegmentationTree(nums,n)
    q = tokenizedInput[n+1]
    readAt = n+2
    s = ""
    for i in xrange(q):
        num1,num2 = tokenizedInput[readAt:readAt+2]
        minR, maxR = treeQuery(tree1, tree2, 0, n-1, num1, num2,0)
        ans = float(maxR-minR)/2
        if maxR!=tree2[0]:
            max1 = tree2[0]
        else:
            max1 = treeMaxQuery(tree2,0,n-1, num1, num2,0)
        maax = max(max1, ans)
        maax += minR
        s += "%.1f\n" % maax
        readAt+=2
    print s[:-1]
 
main()
