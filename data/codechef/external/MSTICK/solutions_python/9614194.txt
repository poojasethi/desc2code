def buildSegtree(idx,ss,se):
    if (ss==se):
        st[idx]=a[ss]
        return None
    mid =(ss+se)/2
    buildSegtree(2*idx,ss,mid)
    buildSegtree(2*idx+1,mid+1,se)
    st[idx]=max(st[2*idx],st[2*idx+1])

def buildSegtreem(idx,ss,se):
    if (ss==se):
        st1[idx]=a[ss]
        return None
    mid =(ss+se)/2
    buildSegtreem(2*idx,ss,mid)
    buildSegtreem(2*idx+1,mid+1,se)
    st1[idx]=min(st1[2*idx],st1[2*idx+1])

def query(idx,ss,se,l,r):
    if (l>se or r<ss) or (l>r):
        return 0
    if (l<=ss and r>=se):
        return st[idx]
    mid=(ss+se)/2
    left =query(2*idx,ss,mid,l,r)
    right =query(2*idx+1,mid+1,se,l,r)
    return max(left,right)

def querym(idx,ss,se,l,r):
    if (l>se or r<ss) or (l>r):
        return 100000001
    if (l<=ss and r>=se):
        return st1[idx]
    mid=(ss+se)/2
    left =querym(2*idx,ss,mid,l,r)
    right =querym(2*idx+1,mid+1,se,l,r)
    return min(left,right)

a=[0]
n=input()
p=map(int,raw_input().split())
a+=p
st=[0]*(4*n+1)
st1=[0]*(4*n+1)
q=input()
buildSegtree(1,1,n)
buildSegtreem(1,1,n)
for x in xrange(q):
    l,r=map(int,raw_input().split())
    l+=1
    r+=1
    mini=querym(1,1,n,l,r)
    maxi1=query(1,1,n,l,r)
    maxi2=query(1,1,n,1,l-1)
    maxi3=query(1,1,n,r+1,n)
    newmaxi=max(maxi2,maxi3)
    result=mini+(maxi1-mini)/2.0
    if(result>mini+newmaxi):
        print result
    else:
        print float(mini+newmaxi)
