INF=10**20
ZERO=0

def buildMaxTree(pos,start,end):
    if (start==end):
        min_tree_arr[pos]=a[start]
        return None
    mid =(start+end)/2
    buildMaxTree(2*pos,start,mid)
    buildMaxTree(2*pos+1,mid+1,end)
    min_tree_arr[pos]=max(min_tree_arr[2*pos],min_tree_arr[2*pos+1])

def buildMinTree(pos,start,end):
    if (start==end):
        max_tree_arr[pos]=a[start]
        return None
    mid =(start+end)/2
    buildMinTree(2*pos,start,mid)
    buildMinTree(2*pos+1,mid+1,end)
    max_tree_arr[pos]=min(max_tree_arr[2*pos],max_tree_arr[2*pos+1])

def queryMaxTree(pos,start,end,l,r):
    if (l>end or r<start) or (l>r):
        return ZERO                         #No-Overlap
    if (l<=start and r>=end):
        return min_tree_arr[pos]            #Total-Overlap
    mid=(start+end)/2 
    left=queryMaxTree(2*pos,start,mid,l,r)
    right=queryMaxTree(2*pos+1,mid+1,end,l,r)
    return max(left,right)

def queryMinTree(pos,start,end,l,r):
    if (l>end or r<start) or (l>r):
        return INF                          #No-Overlap
    if (l<=start and r>=end):
        return max_tree_arr[pos]            #Total-Overlap
    mid=(start+end)/2
    left=queryMinTree(2*pos,start,mid,l,r)
    right=queryMinTree(2*pos+1,mid+1,end,l,r)
    return min(left,right)

a=[0]
n=input()
arr=map(int,raw_input().split())
a.extend(arr)                               #To_make_1-based-indexing

min_tree_arr=[0]*(4*n+1)                    #max_segment_tree_size
max_tree_arr=[0]*(4*n+1)

buildMaxTree(1,1,n)                         #Tree_building_process
buildMinTree(1,1,n)

for query in xrange(input()):
    l,r=map(int,raw_input().split())
    l+=1                                    #To_make_1-based-indexing               
    r+=1                                    #To_make_1-based-indexing
    minn=queryMinTree(1,1,n,l,r)
    maxx=queryMaxTree(1,1,n,l,r)            #Tree_querying_process
    
    max_left=queryMaxTree(1,1,n,1,l-1)
    max_right=queryMaxTree(1,1,n,r+1,n)
    
    max_outer=max(max_left,max_right)+minn
    max_inner=minn+(maxx-minn)/2.0
    
    if(max_inner>max_outer):
        print max_inner
    else:
        print float(max_outer)
