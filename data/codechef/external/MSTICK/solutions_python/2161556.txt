a = {}
b = {}
c = {}
d = {}
 
def RMQBuild(n):
    for i in range(n):
        c[i] = i
        d[i] = i
    for k in range(1, 1000000):
        hf = (1 << (k - 1))
        if hf >= n:
            break
        for i in range(n):
            c[n * k + i] = c[n * (k - 1) + i]
            d[n * k + i] = d[n * (k - 1) + i]
            if i + hf < n and a[c[n * k + i]] > a[c[n * (k - 1) + i + hf]]:
                c[n * k + i] = c[n * (k - 1) + i + hf]
            if i + hf < n and b[d[n * k + i]] > b[d[n * (k - 1) + i + hf]]:
                d[n * k + i] = d[n * (k - 1) + i + hf]
 
def RMQQuery(f, x, y, n):
    dep = 0
    wid = y - x + 1
    while (1 << (dep + 1)) <= wid:
        dep += 1
    if f == True:
        A = c[n * dep + x]
        B = c[n * dep + y - (1 << dep) + 1]
        if a[A] > a[B]:
            A = B
        return A
    else:
        A = d[n * dep + x]
        B = d[n * dep + y - (1 << dep) + 1]
        if b[A] > b[B]:
            A = B
        return A
 
def main():
    n = int(raw_input())
    global a
    a = map(int, raw_input().split())
    for i in range(len(a)):
        b[i] = a[i] * -1
    RMQBuild(n)
    q = int(raw_input())
    for i in range(q):
        res = -1
        rem = ".0"
        l, r = map(int, raw_input().split())
        val = a[RMQQuery(True, l, r, n)]
        if l - 1 >= 0:
            num = b[RMQQuery(False, 0, l - 1, n)] * -1
            if num + val > res:
                res = num + val
        if r + 1 <= n - 1:
            num = b[RMQQuery(False, r + 1, n - 1, n)] * -1
            if num + val > res:
                res = num + val
        if l <= r:
            num = b[RMQQuery(False, l, r, n)] * -1
            add = ((num - val) & 1)
            num = val + ((num - val) / 2)
            if num >= res:
                res = num
                if add == 1:
                    rem = ".5"
        print str(res) + rem
 
main()