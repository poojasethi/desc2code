#include<bits/stdc++.h>
#define ull unsigned long long
#define ll long long
#define mp make_pair
#define A first
#define B second
#define MIN (1<<31)
#define MAX (1<<31) - 1
#define MOD 1000000007
#define scanint(n) scanf("%d",&n)
using namespace std;
#define N 1001
int A[N][N];	//matrix
int dp[N][N];
int n,m;
int calc(int x,int y){	//recursively calculates the sum of the sub-rectangle {(1,1) to (x,y)}
	if(x<1 || y<1)	dp[x][y]=0;
	if(dp[x][y]!=-1)	return dp[x][y];
	dp[x][y] = calc(x-1,y) + calc(x,y-1) - calc(x-1,y-1) + A[x][y];
	return dp[x][y];
}
int main(){
	//for(int i=0;i<N;i++){
	//	for(int j=0;j<N;j++)	dp[i][j]=-1;
	//}
	memset(dp,-1,sizeof(dp));
	scanint(n);
	scanint(m);//input the dimensions
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
				scanint(A[i][j]);	//take input
		}
	}
	dp[1][1]=A[1][1];	//base case
	for(int i=0;i<max(n,m);i++)	dp[i][0]=0;
	for(int i=0;i<max(n,m);i++)	dp[0][i]=0;
	int c,x1,y1,x2,y2;
	int ans=0;
	calc(n,m);
	scanint(c);	//no of queries
	for(int i=0;i<c;i++){
		scanint(x1);
		scanint(y1);
		scanint(x2);
		scanint(y2);//input of coordinates
		ans = dp[x2][y2] - dp[x1-1][y2] - dp[x2][y1-1] + dp[x1-1][y1-1];
		printf("%d\n",ans);	//output of the answer
	}
	return 0;
}