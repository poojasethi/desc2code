import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Comparator;
import java.util.InputMismatchException;

public class Main {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static class Horse
	{
		public long d;
		public int s, ind;
	}
	
	static void solve()
	{
		for(int T = ni();T >= 1;T--){
			int n = ni(), Q = ni();
			Horse[] hs = new Horse[n];
			for(int i = 0;i < n;i++){
				hs[i] = new Horse();
				hs[i].ind = i;
				hs[i].d = nl();
				hs[i].s = ni();
			}
			Arrays.sort(hs, new Comparator<Horse>() {
				public int compare(Horse a, Horse b) {
					if(a.s != b.s)return a.s - b.s;
					return -Long.signum(a.d - b.d);
				}
			});
//			for(Horse h : hs){
//				tr(h.d, h.s, h.ind);
//			}
			long[][] frag = new long[n][];
			int p = 0;
			// {ind, p, q} x=p/q
			outer:
			for(int i = 0;i < n;i++){
				long tnum = 0, tden = 1;
				while(p > 0){
					Horse h = hs[(int)frag[p-1][0]];
					long num = frag[p-1][1], den = frag[p-1][2];
					if(hs[i].s == h.s)continue outer;
					// d1+s1*t=d2+s2*t s1>s2
					// t=(d2-d1)/(s1-s2)
//					tr(num, den, hs[i].d, hs[i].s);
					if(h.d-hs[i].d <= 0){
					}else{
						tnum = h.d-hs[i].d;
						tden = hs[i].s-h.s;
						long g = gcd(tnum, tden);
						tnum /= g; tden /= g;
						// tnum/tden < num/den
						if(tnum*den < tden*num){
						}else{
							break;
						}
					}
					p--;
				}
				frag[p++] = new long[]{i, tnum, tden};
			}
			frag = Arrays.copyOf(frag, p);
			
			for(int r = 0;r < Q;r++){
				int t = ni();
				int low = -1, high = p;
				while(high - low > 1){
					int x = (high+low)/2;
					if(t*frag[x][2] >= frag[x][1]){
						low = x;
					}else{
						high = x;
					}
				}
				out.println(hs[(int)frag[low][0]].ind);
			}
		}
	}
	
	public static long gcd(long a, long b) {
		while (b > 0){
			long c = a;
			a = b;
			b = c % b;
		}
		return a;
	}
	
	public static void main(String[] args) throws Exception
	{
//		int t = 5;
//		int n = 100000, q = 500000;
//		Random gen = new Random();
//		StringBuilder sb = new StringBuilder();
//		sb.append(1 + " ");
//		sb.append(n + " ");
//		sb.append(q + " ");
//		for(int i = 0;i < n;i++){
//			sb.append(Math.abs(gen.nextLong()%1000000000000L) + " ");
//			sb.append(gen.nextInt(100000) + " ");
//		}
//		for(int i = 0;i < q;i++){
//			sb.append(gen.nextInt(500000) + " ");
//		}
//		INPUT = sb.toString();
		
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	private static boolean eof()
	{
		if(lenbuf == -1)return true;
		int lptr = ptrbuf;
		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
		
		try {
			is.mark(1000);
			while(true){
				int b = is.read();
				if(b == -1){
					is.reset();
					return true;
				}else if(!isSpaceChar(b)){
					is.reset();
					return false;
				}
			}
		} catch (IOException e) {
			return true;
		}
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private static double nd() { return Double.parseDouble(ns()); }
	private static char nc() { return (char)skip(); }
	
	private static String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private static char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private static char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private static int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}
