#include <cstdio>
#include <utility>
#include <vector>

using namespace std;

vector<int> visited, q;
vector<vector<int> > el;
int p;

void dfs(int v) {
	visited[v]=1;
	p++;
	for(int i=0; i<el[v].size(); i++) {
		int u=el[v][i];
		if(!visited[u])
			dfs(u);
	}
}

int main() {
	int n, u, v;
	long long int ans, gans=0;
	vector<pair<int, int> > edges, list;
	char arr[200009];
	scanf("%d\n", &n);
	visited.resize(n, 0);
	el.resize(n);
	ans=n; ans*=n+1; ans/=2;
	for(int i=0; i<n-1; i++) {
		scanf("%d %d\n", &u, &v);
		u--; v--;
		edges.push_back(make_pair(u, v));
	}
	scanf("%[^\n]s", arr);
	for(int i=0; i<n-1; i++) {
		if(arr[edges[i].first*2]!=arr[edges[i].second*2])
			list.push_back(edges[i]);
	}
	for(int i=0; i<list.size(); i++) {
		pair<int, int> tmp=list[i];
		el[tmp.first].push_back(tmp.second);
		el[tmp.second].push_back(tmp.first);
	}
	for(int i=0; i<n; i++) {
		if(visited[i])
			continue;
		p=0;
		dfs(i);
		q.push_back(p);
	}
	for(int i=0; i<q.size(); i++) {
		long long int y=q[i];
		y*=(n-q[i]);
		gans+=y;
	}
	printf("%lld\n", ans-gans/2);

	return 0;
}