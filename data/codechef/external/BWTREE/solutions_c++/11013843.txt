#include<iostream>
#include<cstdio>
#include<iomanip>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
#include<sstream>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define vb vector<bool>
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}


int conn=0;

class graph
{
	vi * adj;
	int time;
	public:
		graph( int v)
		{
			adj = new vi[v];
			time = 0;
		}
		void add_edge(int u, int v)
		{
			adj[u].pb( v);
			adj[v].pb( u);
		}
		void dfs(int v,vb& visited)
		{
			conn++;
			visited[v]=true;
			vi::iterator it;
			for( it=adj[v].begin();it!=adj[v].end();it++ )
			{
				if( !visited[*it] )
				{
					dfs(*it,visited);
				}
			}
		}
		
};
int main()
{
	ios_base::sync_with_stdio(false);
	int i, n, a, b, t;
	ll ans=0;
	char ch;
	t=1;
	while ( t-- )
	{
		cin >> n;
		graph g(n);
		vector < pp > v(n-1);
		for( i=0;i<n-1;i++ )
		{
			cin >> a >> b;
			a--;
			b--;
			v[i].first=a;
			v[i].second=b;
		}
		vi color(n);
		for( i=0;i<n;i++ )
		{
			cin >> ch;
			if(ch=='B')
				color[i]=1;
		}
		for( i=0;i<n-1;i++ )
		{
			if((color[v[i].first] ^ color[v[i].second] ))
			{
				g.add_edge(v[i].first,v[i].second);
			}
			
		}
		vector<bool> visited(n);
		for( i=0;i<n;i++ )
		{
			if(!visited[i] )
			{
				conn=0;
				g.dfs(i,visited);
				ans =(ans+((ll)(conn)*(ll)(conn+1))/2)%mod;
			}
		}
		cout << ans;
	}
    return 0;
}
