# include <iostream>
# include <stdio.h>
# include <math.h>
# include <list>
# include <algorithm>
# include <limits>
#include <vector>
using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 
#define sz(v) int((v).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 

/*
 * Here, 'present()' returns whether the element presents
 *  in the container with member function 'find()'
 *  (i.e. set/map, etc.)
 *  while 'cpresent' is for vector. 
 */
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 

typedef unsigned long long ULL;

int main(){
	//std::ios::sync_with_stdio(false);  
	// uncomment it or use scanf and printf
	//cout << "Minimum value for long long int(or other datatype): " << std::numeric_limits<long long int>::min() << '\n';
	// instead of min() use max() to get the maximum value in the previous case
	ULL t;
	scanf("%llu",&t);
	
	ULL fact[21] ;
	fact[0]=1;
	fact[1]=1;
	for(int i=2; i<=20; i++){
		fact[i]=i*fact[i-1];
	}
	ULL arr [21];
	for(int i=1; i<=20; i++){
		ULL temp=0;
		for(int j=0; j<=i; j++){
			if(j%2==0)
			temp+= fact[i]/fact[j];
			else temp-= fact[i]/fact[j];
		}
		arr[i]=temp;
	}
	for(ULL i=0; i<t; i++){
		ULL n;
		scanf("%llu",&n);
		cout<<arr[n]<<endl;
		
	}
}

// int(1e6) is equivalent to 10^6
