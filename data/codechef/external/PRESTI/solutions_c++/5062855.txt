#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<string>
#include<cstring>
#include<sstream>
#include<cmath>
#include<climits>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<iterator>
#include<numeric>
#include<assert.h>
using namespace std;
 
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})
#define clear(c,v) memset(c,v,sizeof(c))
#define SET(c) memset(c,-1,sizeof(c))
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%ld",&n)
#define sll(n) scanf("%lld",&n)
 
#define sstr(str) scanf ("%s", str); 
 
#define p(n) printf("%d ",n)
#define pl(n) printf("%ld ",n)
#define pll(n) printf("%lld ",n)
 
#define pf(n) printf("%f\n",n)
#define pd(n) printf("%lf\n",n)
 
#define pnl(n) printf("%d\n",n)
#define plnl(n) printf("%ld\n",n)
#define pllnl(n) printf("%lld\n",n)
 
#define ll long long
#define MAX(a,b) a>b?a:b
#define all(c) c.begin(), c.end()
#define rall(c) c.rbegin(), c.rend()    // reverse all 
#define pb push_back
#define loop(i,a,n) for(int i=a;i<n;++i)
#define REP(i,n) for(int i=0;i<n;++i)
#define MALLOC(n,T) (T*)malloc(n*sizeof(T))
 
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<long long> vll;
typedef vector< vector<int> > vvi;
typedef vector< vector<char> > vvc;
typedef vector<string> vstr;
typedef map<int,int> mapii;
typedef pair<int,int> pii;
typedef std::vector<pii> vpii;
 
#define sz(a) int((a).size()) 
#define szar(ar) int(sizeof(ar)/sizeof(ar[0]))
#define osit ostream_iterator 
 
#define mod 1000000007LL
 
void print1Dvec(const vi & v, char* msg)
{
  printf("%s\n",msg );
  for (int i = 0; i < sz(v); ++i)
  {
    printf("%d ",v[i] );
  }
  printf("\n");
}
 

vll f(21,0);
 
void preprocess()
{
  
  f[1] = 0;
  f[2] = 1;
  loop(i,3,21)
  {
    f[i] = (i-1)*(f[i-1] + f[i-2]);
  }
}
 
 
 
int main()
{  
  preprocess();
  int t = GI;
 
  while(t--)
  {
    int n = GI;
    pllnl(f[n]);
 
  }
 
 
 
  
  return 0;
  
  
}  