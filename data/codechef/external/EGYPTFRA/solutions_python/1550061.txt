import java.io.OutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Vaibhav Mittal
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		EgyptionFractions solver = new EgyptionFractions();
		try {
			int testNumber = 1;
			while (true)
				solver.solve(testNumber++, in, out);
		} catch (UnknownError e) {
			out.close();
		}
	}
}

class EgyptionFractions {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
        BigInteger a = new BigInteger(in.readString());
        BigInteger b = new BigInteger(in.readString());
        if (a.compareTo(BigInteger.ONE) == 0 && b.compareTo(BigInteger.ONE) == 0) throw new UnknownError();
        BigInteger c;
        while (a.compareTo(BigInteger.ONE) != 0) {
            c = (b.add(a).subtract(BigInteger.ONE)).divide(a);
            out.print(c + " ");
            BigInteger x = a.multiply(c).subtract(b);
            BigInteger y = b.multiply(c);
            BigInteger g = x.gcd(y);
            a = x.divide(g);
            b = y.divide(g);
        }
        out.println(b);
	}
}

class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public static boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
}

