	

    import java.io.OutputStream;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.util.InputMismatchException;
    import java.math.BigInteger;
    import java.io.InputStream;
     
    /**
     * Built using CHelper plug-in
     * Actual solution is at the top
     * @author karan173
     */
    public class Main {
            public static void main(String[] args) {
                    InputStream inputStream = System.in;
                    OutputStream outputStream = System.out;
                    FastReader in = new FastReader(inputStream);
                    PrintWriter out = new PrintWriter(outputStream);
                    EGYPTFRA solver = new EGYPTFRA();
                    solver.solve(1, in, out);
                    out.close();
            }
    }
     
    class EGYPTFRA {
        public void solve(int testNumber, FastReader in, PrintWriter out)
        {
            while (true)
            {
                BigInteger a = in.nbigi ();
                BigInteger b = in.nbigi ();
                if (a.equals (BigInteger.ONE) && b.equals (BigInteger.ONE))
                {
                    return;
                }
                if (a.equals (BigInteger.ONE))
                {
                    out.println (b);
                    continue;
                }
                while (!a.equals (BigInteger.ZERO))
                {
                    BigInteger max = a.add (b).subtract (BigInteger.ONE);
                    max = max.divide (a);
                    a = a.multiply (max).subtract (b);
                    b = b.multiply (max);
                    BigInteger g = a.gcd (b);
                    a = a.divide (g);
                    b = b.divide (g);
                    out.print (max + " ");
                }
                out.println ();
            }
        }
    }
     
    class FastReader
    {
     
        public InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;
     
        public FastReader(InputStream stream)
        {
            this.stream = stream;
        }
     
        public int read()
        {
            if (numChars == -1)
            {
                throw new InputMismatchException ();
            }
            if (curChar >= numChars)
            {
                curChar = 0;
                try
                {
                    numChars = stream.read (buf);
                } catch (IOException e)
                {
                    throw new InputMismatchException ();
                }
                if (numChars <= 0)
                {
                    return -1;
                }
            }
            return buf[curChar++];
        }
     
        public String ns()
        {
            int c = read ();
            while (isSpaceChar (c))
                c = read ();
            StringBuilder res = new StringBuilder ();
            do
            {
                res.appendCodePoint (c);
                c = read ();
            } while (!isSpaceChar (c));
            return res.toString ();
        }
     
        public boolean isSpaceChar(int c)
        {
            if (filter != null)
            {
                return filter.isSpaceChar (c);
            }
            return isWhitespace (c);
        }
     
        public static boolean isWhitespace(int c)
        {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
     
        public BigInteger nbigi()
        {
            try
            {
                return new BigInteger (ns ());
            } catch (NumberFormatException e)
            {
                throw new InputMismatchException ();
            }
        }
     
        public interface SpaceCharFilter
        {
            public boolean isSpaceChar(int ch);
        }
    }
