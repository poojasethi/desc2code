#include<bits/stdc++.h>
using namespace std;
typedef long long lld;

lld k;
bool visited[100005];
vector <lld > adj[100005];                        



lld dfs(lld s)            //------>   dfs iterative version using STACKS <--------// 
{   stack<lld > st;
    st.push(s);
    visited[s] = true;
    lld sum=1;
    while(st.empty()==false)
   {    lld t=st.top();
        st.pop();
      for(lld i=0;i<adj[t].size();i++)
        {  
           if(visited[adj[t][i]]==false)
            {sum++;
            visited[adj[t][i]]=true;
             st.push(adj[t][i]);
            
           }

        }  
    }
   return sum;
    

}
void intial(lld n)
{
    for(lld i = 1;i <=n;++i)
        {  visited[i] = false;
           //adj[i].clear();
        }  
      
}

int main()
{
    lld t=1;  
    while(t--)
    {
        lld n,m,i;
        cin>>n>>m>>k;
        
        
       while(m--)
        {
            lld a,b;
            cin>>a>>b;
            
            adj[a].push_back(b);   //---directed graph    
        }
         
      lld ans=INT_MAX;    
     
     for(i = 1;i <= n;++i) 
     {  
         intial(n);
         ans=min(ans,dfs(i));
          
    }
        
        
    cout<<ans*k<<"\n";

        
    }
    
    
    
    
    
}