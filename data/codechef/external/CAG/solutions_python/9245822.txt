#include<iostream>
#include<cstdio>
using namespace std;
struct edge
{
	int v;
	edge *link;
};
struct vertex
{
	bool visited;
	edge *head;
};
class Graph
{
	vertex *V;
	int v_count;
	public:
		Graph(int n)
		{
			V= new vertex[n+1];
			v_count=n;
			clearAll();
			for(int i=1;i<=v_count;i++)
			{
				V[i].head=NULL;
			}
		}
		void clearAll()
		{
			for(int i=1;i<=v_count;i++)
			{
				V[i].visited=false;
			}
		}
		void visit(int i)
		{
			V[i].visited=true;
		}
		void addEdge(int i,int j)
		{
			edge *newEdge= new edge;
			newEdge->v=j;
			newEdge->link=V[i].head;
			V[i].head=newEdge;
		}
		int dfs(int s)
		{
			int count=1;
			visit(s);
			edge *temp=V[s].head;
			while(temp)
			{
				if(!V[temp->v].visited)
				{
					count+=dfs(temp->v);
				}
				temp=temp->link;
			}
			return count;
		}
};
int main()
{
	int n,m,k,i,j;
	cin>>n>>m>>k;
	Graph G(n);
	while(m--)
	{
		scanf("%d%d",&i,&j);
		G.addEdge(i,j);
	}
	int count,min=10000000;
	for(i=1;i<=n;i++)
	{
		G.clearAll();
		count=G.dfs(i);
		if(count<min)
			min=count;
	}
	cout<<min*k<<endl;
	return 0;
}
