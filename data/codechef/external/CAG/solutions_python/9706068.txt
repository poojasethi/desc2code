//Last four sumbissions gave WA verdict because of two reasons-
  //a)I thought in terms of strongly conected components..hence appleid kosaraju algorithm
  //b)Was dong DFS only once instead of doing it on very vertex
  //c)I have a poor accuracy


//This program will print all the vertices even if the graph is disconnected
//Program for directed graph
//C++ Program to implement DFS(and hence printing all the vertices)

#include<bits/stdc++.h>
using namespace std;

vector<list<int>> adjlist(1009);
bool visited[100009];
int mini=10000000; 		
int counti;

void DFSUtil(int v)
{
    // Mark the current node as visited and print it
    visited[v] = true;
   	counti++;
   //printf("%d ",v);
   
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for (i = adjlist[v].begin(); i != adjlist[v].end(); ++i)
        if (!visited[*i])
            DFSUtil(*i);
}
 
// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()
void DFS(int vertices)
{
    // Mark all the vertices as not visited
    //bool visited[vertices+1];
    
    // Call the recursive helper function to print DFS traversal
     for (int i = 1; i <= vertices; i++)
    	{
    		counti=0;
	    for (int j = 1; j <= vertices; j++)
        visited[j] = false;
        
	//	if (visited[i] == false)
            DFSUtil(i);
            if(counti<mini)
            	mini=counti;
		}

}
 

int main()
{

	int i,vertices,edges,v1,v2;
	unsigned long long int K;
	   	
	//printf("Enter the number of vertices\n");
	scanf("%d %d %llu",&vertices,&edges,&K);
     
 	//printf("Enter the number of edges\n");//Enter the number of distinct edges....i.e-don't include (3,1) if (1,3) already included(for undirected only)..Refer to Fig-10-1 of 
	//scanf("%d",&edges);					  //Yashavant Kanetkar's "Data Structures thorugh C" 
	    
		
    list< int >::iterator itr;
     
    for (i = 0; i <= edges-1; i++)
	 {
	 //	printf("Enter v1 and v2\n");
        scanf("%d %d", &v1, &v2);
         
        // Adding Edge to the Directed Graph
        adjlist[v1].push_back(v2);
    }			 
   

	
	DFS(vertices); //No need of starting vertex as we are going to traverse the whole graph(even the disconnected ones also)

	printf("%llu",K*mini);
	
//	while(1);

return(0);

}