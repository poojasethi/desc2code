//Author : Sharath Chandran
//Handle : sharad07
 
#include<bits/stdc++.h>
#define lld long long int
#define llu unsigned long long int
#define pb(x) push_back(x)
#define sz size()
#define inp1(x) scanf("%d",&x)
#define inp2(x,y) scanf("%d%d",&x,&y)
#define inp3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define print(x) printf("%d",x)
#define println(x) printf("%d\n",x)
#define _for(i,x,y) for(int i=x;i<y;i++)
#define pii pair<int,int>
#define mp(x,y) make_pair(x,y)
#define pq priority_queue<int> 
using namespace std;
const int maxx=5e3+5;
lld mod=1e9+7;
 
int N,M,a,b,vertex;
bool vis[maxx];
stack<int> not_vis;
 
struct graph
{
    vector<int> neigh;
    void add_edge(int node)
    {
        neigh.pb(node);
    }
    void clr()
    {
        neigh.clear();
    }
};
 
int dfs(int node,vector<graph> &G)
{
	int count=1;
	vis[node]=1;
	_for(j,0,G[node].neigh.sz)
    {
        if(!vis[G[node].neigh[j]])
        {
            count+=dfs(G[node].neigh[j],G);
        }
    }
	return count;
}
 
inline void Reset(vector<graph> &G)
{
    _for(i,1,N+1) 
    {
        G[i].clr();
        vis[i]=0;
    }
}
 
int main()
{
    int K,minn=1e9;
    cin>>N>>M>>K;
    vector<graph> G(N+1);
    _for(i,0,M)
    {
        cin>>a>>b;
        G[a].add_edge(b);
    }
    
    _for(i,1,N+1) 
    {
        memset(vis,0,sizeof(vis));
        minn=min(minn,dfs(i,G));
    }
    cout<<minn*K<<endl;
    return 0;
} 