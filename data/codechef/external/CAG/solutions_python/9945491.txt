#include <iostream>


using namespace std;


class MyList {
public:
	int* arr;
	int curr;
	int size;
	MyList(int N){
		arr = new int[N];
		curr = 0;
		size = N;
	}
	void add(int e){
		if(curr<size)
			arr[curr++] = e;
		else
			cout << "error:unable add elements";
	}
	int get(int ind){
		return arr[ind];
	}
	int MySize(){
		return curr;
	}
};

void reset(int* arr, int size){
	for(int i=0;i<size;i++)
		arr[i]=0;
}
int dfs(MyList** graph,int node,int* vis){
	int count = 1;
	vis[node] = 1;
	for(int i =0; i< graph[node]->MySize(); i++){
		if(vis[graph[node]->get(i)] == 0)
			count += dfs(graph,graph[node]->get(i),vis);
	}
	return count;
}
int main(int argc, char** argv){
	int N,M,K;
	cin >> N >> M >> K;
	MyList** graph = new MyList*[N];
	for(int i=0;i<N;i++){
		graph[i] = new MyList(N);
	}
	for(int i=0;i<M;i++){
		int t1,t2;
		cin >> t1>>t2;
		graph[t1-1]->add(t2-1);
	}

	int* vis = new int[N];
	reset(vis,N);

	int min = 100000;
	for(int i=0;i<N;i++){
		reset(vis,N);
		int temp = dfs(graph,i,vis);
		if(min > temp)
			min = temp;
	}
	cout << min*K << endl;
	return 0;
}