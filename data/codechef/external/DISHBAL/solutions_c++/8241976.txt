#include<iostream>
#include<stdio.h>
#include<string>
#include<list>
using namespace std;
long long MOD = 1000000007;
class Graph
{
    int v;
    list<int> *adj;
    long long ans;
    bool *visited;
    string chars;
    public:
    Graph(int v,string charArray)
    {
        this->v = v;
        adj = new list<int>[v];
        visited = new bool[v];
        chars = charArray;
        ans = 1;
        for(int i=0; i<v; i++)
            visited[i] = false;
    }
    void addEdge(int a,int b)
    {
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    long long findSolutionUtil(int src,long long m)
    {
        visited[src] = true;
        list<int> q;
        q.push_back(src);

        bool charSet = false;
        char c;
        bool possible = true;

        while(!q.empty())
        {
            int k = q.front();
            q.pop_front();

            if(!charSet)
            {
                if(chars[k-1] != '?')
                {
                    charSet = true;
                    c = chars[k-1];
                }
            }
            else
            {
                if(chars[k-1] != '?')
                {
                    if(chars[k-1] != c)
                        possible = false;
                }
            }


            for(list<int>::iterator it = adj[k].begin(); it != adj[k].end(); it++)
            {
                if(!visited[*it])
                {
                    visited[*it] = true;
                    q.push_back(*it);
                }
            }
        }
        if(charSet && possible)
            return 1;
        else if(!charSet)
            return m;
        else return -1;
    }


    void findSolution(int src,long long m)
    {
        bool possible = true;
        for(int i=1; i<v; i++)
            if(!visited[i])
        {
            long long temp = findSolutionUtil(i,m);
            if(temp == -1)
                possible = false;
            else ans = (ans * temp)%MOD;
        }
        if(!possible)
            cout<<-1;
        else cout<<ans;
    }

};

int main()
{
    int n;
    long long m;
    scanf("%d %lld",&n,&m);

    string s;
    //scanf("%s",&s);
    cin>>s;
    //char *chars = s.c_str();
    Graph graph(n+1,s);

    int q;
    scanf("%d",&q);

    int a,b;
    for(int i=0; i<q; i++)
    {
        scanf("%d %d",&a,&b);
        graph.addEdge(a,b);
    }

    graph.findSolution(1,m);


    return 0;
}
