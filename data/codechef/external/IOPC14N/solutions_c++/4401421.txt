#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <complex>
#include <queue>

#ifdef ONLINE_JUDGE
#include <sys/resource.h>
#else
#pragma comment(linker, "/STACK:266777216")
#endif

using std::min;
using std::max;
using std::swap;
using std::make_pair;
using std::sort;
using std::cin;
using std::cout;
using std::endl;
using std::lower_bound;
using std::upper_bound;
using std::queue;
using std::next_permutation;
using std::pair;
using std::string;
using std::vector;
using std::set;
using std::map;
//using namespace std;

#define assert(f) { if(!(f)) { fprintf(stderr,"Assertion failed: "); fprintf(stderr,#f); fprintf(stderr,"\n"); exit(1); } }

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<double> VD;
typedef pair<double,double> PDD;

const int inf=1000000000;
const LL INF=LL(inf)*inf;
const double eps=1e-9;
const double PI=2*acos(0.0);
#define bit(n) (1<<(n))
#define bit64(n) ((LL(1))<<(n))
#define pb push_back
#define sz size()
#define mp make_pair
#define cl clear()
#define all(a) (a).begin(),(a).end()
#define fill(ar,val) memset((ar),(val),sizeof (ar))
#define MIN(a,b) {if((a)>(b)) (a)=(b);}
#define MAX(a,b) {if((a)<(b)) (a)=(b);}
#define sqr(x) ((x)*(x))
#define X first
#define Y second

//clock_t start=clock();
//fprintf(stderr,"time=%.3lfsec\n",0.001*(clock()-start));

char s[101010];
int cnt[101010];

int main()
{
#ifndef ONLINE_JUDGE
  freopen("n.in","r",stdin);
#else
  struct rlimit rl;
  rl.rlim_cur = 64 * 1024 * 1024;
  setrlimit(RLIMIT_STACK, &rl);
#endif
  int T;
  for(scanf("%d",&T);T--;) {
    int m;
    scanf("%s%d",s,&m);
    int n = strlen(s);
    for(int i=0;i<n;i++)
      cnt[i+1] = cnt[i] + (s[i]=='A');
    int res=0;
    for(int k=0;k+m<=n;k++)
      MAX(res, cnt[k+m]-cnt[k]);
    res = m-res;
    printf("%d\n",res);
  }
  return 0;
}
