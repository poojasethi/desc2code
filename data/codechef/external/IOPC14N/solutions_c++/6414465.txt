#include <vector>
#include <iostream>
#include <string>
#include <string.h>
#include <stdio.h>

using namespace std;

typedef pair<int,char> ii;

char str[100010];

int main() {
	// your code goes here
	
	int test;
	cin>>test;
	while(test--)
	 {
	     int m;
	     scanf("%s",str+1);
	     scanf("%d",&m);
	     
	     int len = strlen(str+1);
	     
	     vector<ii> vec;
	     char c = str[1];
	     int num = 1;
	     
	     for(int i=2;i<=len;i++)
	      {
	          if(str[i] == c)
	           {
	               num++;
	           }
	           else
	           {
	               vec.push_back(ii(num,c));
	               num = 1;
	               c = str[i];
	           }
	      }
	     vec.push_back(ii(num,c));
	    
	    int ans = 1000010; 
	    int times = 2; 

	 while(times--)
     {
	    int lp = 0,rp = 0;
	    int bnum = 0,sum = 0;
	    
	    // find the start a
	    if(vec[0].second == 'B')
	      {
	          lp++;rp++;
	      }
	    
	    sum = vec[lp].first;
	    
	    if(sum>=m && bnum == 0)
	     {
	         ans = 0;break;
	     }
	    
	  while(lp<vec.size())
	  {
	    while(sum<m)
	     {
	         rp++;
	         if(rp == vec.size()) break;
	         if(vec[rp].second == 'B')
	          {
	              bnum += vec[rp].first;
	          }
	          sum += vec[rp].first;
	         
	     }
	    
	    if(rp <vec.size()) // sum >= m
	     {
              if(vec[rp].second == 'B')
               {
                   ans = min(ans,  bnum - (sum-m));
               }
              else 
                   ans = min(bnum,ans); 
	     }
	    else
	     break;
	    
	    // invariant lp is always at A
	    
	    sum -= vec[lp].first;
	    lp++;
	    if(lp<vec.size())
	     {
	         sum -= vec[lp].first;
	         bnum -= vec[lp].first;
	         lp++;  // now lp is at new A
	     }
	     
	     
	  }  
	  
	  lp = 0;rp = vec.size()-1;
	  while(lp<rp)
	   {
	       swap(vec[lp],vec[rp]);
	       lp++;rp--;
	   }
	  
	}// times
	     
	  printf("%d\n",ans);   
	 } // test
	
	return 0;
}
