/*programmed by dipjal */
 
#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<string.h>
#define pb push_back
#define sz(c) c.size()
using namespace std;
 
typedef long long int ll;
typedef vector<int> vi;
typedef vector<string> vs;
#define mod 1000000007
 
/*static inline ll scan2()
{
    ll x=0;
    char c=getchar_unlocked();
    while(c<'0'||c>'9')
        c=getchar_unlocked();
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
 
    return(x);
}
*/
 
static inline int scan1()
{
    int x=0;
 
    char c=getchar_unlocked();
    while(c<'0'||c>'9')
        c=getchar_unlocked();
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
 
    return(x);
}
 
 
static inline void WriteInt(int x)
{
    char s[15];
    int l=0;
    do
    {
        s[l++]=(x%10+'0');
        x/=10;
    }while(x);
    l--;
    while(l>=0)
    {
        putchar_unlocked(s[l]);
        l--;
    }
    putchar_unlocked('\n');
}
 
 
bool comp(string s1,string s2)
{
    string t1=s1+s2;
    string t2=s2+s1;
    return(t1>t2);
}
 
 
 
int main()
{
 int T;
 int N;
 //scanf("%d",&T);
 T=scan1();
 while(T--)
 {
     //scanf("%d",&N);
     N=scan1();
     vi V;
     V.reserve(N+1);
     int x;
     for(int i=1;i<=N;i++)
     {
         //scanf("%d",&x);
         x=scan1();
         V.pb(x);
     }
     sort(V.begin(),V.end());
     int seconds=0;
     int killed=0;
     int reload=0;
     int sZ=V.size();
     for(int i=0;i<sZ;i++)
     {
         if(V[i]-seconds<=0)
             break;
 
         if(V[i]-seconds>0)
         {
             seconds++;
             reload++;
             killed++;
         }
         if(reload==6)
         {
             seconds++;
             reload=0;
         }
 
     }
 
     if(killed==N)
     {
         char s1[]={'B','h','a','i',' ','H','o','!'};
         for(int yui=0;yui<8;yui++)
            putchar_unlocked(s1[yui]);
         putchar_unlocked('\n');
     }
     else
     {
 
         char s2[]={'K','i','l','l','e','d',' '};
         for(int pi=0;pi<7;pi++)
            putchar_unlocked(s2[pi]);
         WriteInt(killed);
     }
 
 }
 return 0;
}