/*Djikstra algorithm using stl*/
#include <iostream>
#include<queue>
#include<vector>
#include<algorithm>
#define pii pair<int ,int >
#define MAX INT_MAX
#define pb push_back
#define mp make_pair
#include<limits.h>

using namespace std;

struct comp
{
bool operator()(const pii &a,const pii &b) 	
	{
		return a.second>b.second; 
	}
};

int main() {
	// your code goes here
	priority_queue<pii,vector<pii>,comp> Q;
	long long t;
	cin>>t;
	while(t--)
	{
	int u,v,w;	
	int n,m,q;
	cin>>n>>m>>q;
	vector<pii> G[2002];
	for(int i=1;i<=m;i++)
	{
		cin>>u>>v>>w;
		G[u].pb(mp(v,w));
		G[v].pb(mp(u,w));
	}
	int D[2002];
	int F[2002];
	for(int i=1;i<=n;i++) D[i]=INT_MAX;
	for(int i=1;i<=n;i++) F[i]=false;
	
	Q.push(mp(1,0));
	D[1]=0;

	
	while(!Q.empty())
	{	
	 int u=Q.top().first;
	 Q.pop();	
	 if(F[u]) continue;
	 
	 int sz=G[u].size();
	 
	 for(int i=0;i<sz;i++)
	 {
	 	int v=G[u][i].first;
	 	int w=G[u][i].second;
	 	
	 	if(!F[v] && D[v]>D[u]+w)
	 	{
	 		D[v]=D[u]+w;
	 		Q.push(mp(v,D[v]));
	 	}
	 }
		F[u]=true;
	}
	int x;
    for(int k=1;k<=q;k++)
    {
    	cin>>x;
    	cout<<D[x]<<endl;
    }
	}	
	return 0;
}