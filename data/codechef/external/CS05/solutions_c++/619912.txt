#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef set <int> si;
typedef pair< int,int > pii;
typedef pair< int, pii > pip;
typedef vector< pii > vii;
typedef vector < vii > vvii;
typedef vector< int > vi;
typedef vector< vi > vvi;
typedef vector<string> vs;
typedef vector<double> vd;

#define REP(i,n)       FOR(i,0,n)
#define FOR(i,a,b)     for(int i = a; i < b; i++)
#define ROF(i,a,b)     for(int i=a;i>b;i--)
#define GI 	          ({int t;scanf("%d",&t);t;})
#define GL 	          ({LL t;scanf("%lld",&t);t;})
#define GD 	          ({double t;scanf("%lf",&t);t;})
#define pb 	          push_back
#define mp 	          make_pair
#define MOD 	      1000000007
#define INF	          (int)1e9
#define EPS	          1e-9
#define ALL(a)	      (a).begin(),(a).end()
#define rALL(a)       (a).rbegin(),(a).rend()

#include<iostream>
#include<map>
#include<string>
using namespace std;

string int2RomanNum(int n)
{
   //build hash table of unique values 
   map<int, string> valueMap;

   valueMap[1] = "I";
   valueMap[4] = "IV";
   valueMap[5] = "V";
   valueMap[9] = "IX";
   valueMap[10] = "X";
   valueMap[40] = "XL";
   valueMap[50] = "L";
   valueMap[90] = "XC";
   valueMap[100] = "C";
   valueMap[400] = "CD";
   valueMap[500] = "D";
   valueMap[900] = "CM";
   valueMap[1000] = "M";

   //the roman value
   string romanResult = "";

   //traverse the list in reverse order 
   map<int, string>::reverse_iterator it;
   
   for(int i=1; i<=n; i++)
   {
           int temp = i;
   for (it = valueMap.rbegin(); it != valueMap.rend(); it++)
   {
      //if current number is greater than current key in list
      //add the value corresponded with key to result
      //then subtract the equivalent int value from current number
      while (temp >= it->first)
      {
         romanResult = romanResult + it->second;
         temp = temp - it->first;
      }
   }
   }

   return romanResult;
}

int count(string str, char key)
{
    int len = str.size(), countKey = 0;
    for(int i=0; i<len; i++)
    {
        if(str[i] == key)
            countKey++;
    }
    return countKey;
}

int main()
{
    int n;
    while(1)
    {
        cin >> n;
        if(!n)
          break;
        string str = int2RomanNum(n);
        //cout << str << endl;
        cout << count(str, 'I') << " ";
        cout << count(str, 'V') << " ";
        cout << count(str, 'X') << " ";
        cout << count(str, 'L') << " ";
        cout << count(str, 'C') << endl;
    }
    return 0;
}


