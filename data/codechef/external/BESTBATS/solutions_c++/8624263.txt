#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

long long fact(int n) {
    long long res = 1;
    if( n <= 1)
        return 1;
    while( n > 1 )
    {
        res *= n;
        n--;
    }
    return res;
}

int main() {
    cin.sync_with_stdio(false);
    int t;
    cin >> t;
    while( t-- ) {
        int i;
        vector<int> scores(11);
        vector<int> counts(101);
        for(i = 0; i < 11; i++) {
            cin >> scores[i];
            counts[scores[i]]++;
        }
        int k;
        cin >> k;
        sort(scores.begin(),scores.end());
        vector<int> topScores(scores.begin()+11-k, scores.end());
        map<int, int> scount;
        for( i = 0; i < k; i++ )
        {
            if( scount.find(topScores[i]) == scount.end() )
                scount[topScores[i]] = 1;
            else
                scount[topScores[i]]++;
        }
        long long result = 1;
        map<int,int>::iterator it;
        for( it = scount.begin(); it != scount.end(); ++it ) {
            int avail = counts[it->first];
            int need = it->second;
            //cout << it->first << " " << "Available: " << avail << " Need: " << need << endl;
            result *= fact(avail)/ (fact(need)*fact(avail-need));
        }
        cout << result << endl;
        
    }
    return 0;
}