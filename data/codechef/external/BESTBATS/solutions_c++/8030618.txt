#include <iostream>

using namespace std;

void partition(int array[], int low, int high);
void merge(int array[], int low, int mid, int high);
int nChoosek( int, int );

int main()
{
    int t;
    cin>> t;
    while(t--)
    {
        int arr[11], k, num, counta = 0, countm = 0;
        for(int i = 0; i < 11; i++)
        {
            cin>> arr[i];
        }
        partition(arr, 0, 10);

        cin>> k;
        int max[k];
        for(int i = 0; i < k; i++)
        {
            max[i] = arr[10 - i];
            //this will copy max k numbers from arr to max array
        }
        num = max[k-1];

        for(int i = 0; i < 11; i++)
        {
            if(arr[i] == num)
            {
                counta++;
            }
        }
        for(int i = 0; i < k; i++)
        {
            if(max[i] == num)
            {
                countm++;
            }
        }

        int ans = nChoosek(counta, countm);
        cout<< ans<< endl;
    }
    return 0;
}

void partition(int array[], int low, int high)
{
    if(low < high)
    {
        int mid = (low + high)/2;
        partition(array, low, mid);
        partition(array, mid + 1, high);
        merge(array, low, mid, high);
    }
}

void merge(int array[], int low, int mid, int high)
{
    int l1, m1, i, temp[11], k;
    i = low;
    l1 = low;
    m1 = mid + 1;

    while( l1 <= mid && m1 <= high)
    {
        if(array[l1] <= array[m1])
        {
            temp[i] = array[l1];
            l1++;
        }
        else// if(array[l1] > array[m1])
        {
            temp[i] = array[m1];
            m1++;
        }
        i++;
    }

    if( l1 > mid)
    {
        for(k = m1; k <= high; k++)
        {
            temp[i] = array[k];
            i++;
        }
    }
    else //if( m1 > high)
    {
        for(k = l1; k <= mid; k++)
        {
            temp[i] = array[k];
            i++;
        }
    }

    for(k = low; k <= high; k++)
    {
        array[k] = temp[k];
    }
}

int nChoosek(int n, int r)
{
    if (r > n) return 0;
    if (r * 2 > n) r = n-r;
    if (r == 0) return 1;

    int result = n;
    for( int i = 2; i <= r; ++i )
    {
        result *= (n-i+1);
        result /= i;
    }
    return result;
}
