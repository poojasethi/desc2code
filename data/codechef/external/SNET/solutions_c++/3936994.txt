#include<iostream>
#include<map>
#include<string>
#include<algorithm>
#include<vector>
#define pb push_back
using namespace std;

vector<int> graph[100100];
map<string,int> forward_hash;
map<string,int> ::iterator it;
map<int,string> backward_hash;
map<int,string> :: iterator it1;
int visited[100100]={0},sz[100100]={0},cnt=0,fir[100100];

int dfs(int start,int first)
{
    int i;
    visited[start]=1;
    for(i=0;i<graph[start].size();i++)
    {
        if(!visited[graph[start][i]])
        {
            dfs(graph[start][i],first);
            fir[graph[start][i]]=first;
            cnt++;
        }
    }
}

int dfsVisit(int src)
{
    int i,k,j,l,ma=0;
    visited[1]=1;
    for(i=0;i<graph[src].size();i++)
    {
        if(!visited[graph[src][i]])
        {
            cnt=1;
            fir[graph[src][i]]=graph[src][i];
            dfs(graph[src][i],graph[src][i]);
            sz[graph[src][i]]=cnt;
        }
    }
    string s,p;
    for(i=0;i<graph[src].size();i++)
    {
        if(ma<sz[graph[src][i]]||ma<sz[fir[graph[src][i]]])
        {
            ma=sz[graph[src][i]];
            it1=backward_hash.find(graph[src][i]);
            s=it1->second;
        }
        else if(ma==sz[graph[src][i]]||ma==sz[fir[graph[src][i]]])
        {
            it1=backward_hash.find(graph[src][i]);
            p=it1->second;
            if(s>p)
                s=p;
        }
    }

    cout<<s<<"\n";
    cout<<ma<<"\n";
}

int main()
{
    int i,j,k,l,m,n,v1,v2;
    string s,p;
    cin>>s;
    forward_hash[s]=1;
    backward_hash[1]=s;
    cnt=1;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        cin>>s>>p;
        it=forward_hash.find(s);
        if(it!=forward_hash.end())
        {
            v1=it->second;
        }
        else
        {
            cnt++;
            v1=cnt;
            forward_hash[s]=cnt;
            backward_hash[cnt]=s;
        }
        it=forward_hash.find(p);
        if(it!=forward_hash.end())
        {
            v2=it->second;
        }
        else
        {
            cnt++;
            v2=cnt;
            forward_hash[p]=cnt;
            backward_hash[cnt]=p;
        }
        graph[v1].pb(v2);
        graph[v2].pb(v1);
    }
    /*for(i=1;i<=5;i++)
    {
        for(j=0;j<graph[i].size();j++)
            cout<<i<<"---->"<<graph[i][j]<<"\n";
    }*/
    dfsVisit(1);
    return 0;
}
