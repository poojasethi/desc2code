#include<iostream>
#include<algorithm>
#include<map>
#include<set>
#include<vector>
using namespace std;

long long int dp[3005][3005];
bool a[3005][3005];
long long int n,c;
map<long long int,long long int>m1,m2;
set<long long int>s1,s2;
vector<long long int>v1,v2;
void gen(pair<long long int,long long int>*pos)
{
set<long long int>::iterator t;
for(t=s1.begin();t!=s1.end();t++)
{
m1[*t]=++c;
v1.push_back(*t);
}
c=0;
for(t=s2.begin();t!=s2.end();t++)
{
m2[*t]=++c;
v2.push_back(*t);
}
for(int i=0;i<n;i++)
a[m1[pos[i].first]][m2[pos[i].second]]=true;
for(int i=0;i<=n;i++)
for(int j=0;j<=n;j++)
if(i==0||j==0)
dp[i][j]=0;
else
dp[i][j]=(a[i][j]==true)+dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1];
}

bool check(int mid,int x,int y,int k)
{
long long int x1=x-mid-1,y1=y-mid-1;
long long int x2=x+mid,y2=y+mid;
x1=upper_bound(v1.begin(),v1.end(),x1)-v1.begin();
y1=upper_bound(v2.begin(),v2.end(),y1)-v2.begin();
x2=upper_bound(v1.begin(),v1.end(),x2)-v1.begin();
y2=upper_bound(v2.begin(),v2.end(),y2)-v2.begin();
long long int temp=dp[x2][y2]+dp[x1][y1];
temp-=dp[x2][y1];
temp-=dp[x1][y2];
return (temp>=k);
}

long long int func(long long int x,long long int y,long long int k)
{
if(k>n)
return -1;
long long int c=100,beg=0,last=1000000000,mid;
while(c--)
{
mid=beg+(last-beg)/2;
if(check(mid,x,y,k))
last=mid;
else
beg=mid+1;
}
return last;
}

int main()
{
ios_base::sync_with_stdio(false);
cin>>n;
pair<long long int,long long int>pos[n];
for(int i=0;i<n;i++)
{
cin>>pos[i].first>>pos[i].second;
s1.insert(pos[i].first);
s2.insert(pos[i].second);
}
gen(pos);
int q;
cin>>q;
while(q--)
{
long long int x,y,k;
cin>>x>>y>>k;
cout<<func(x,y,k)<<endl;
}
return 0;
}
