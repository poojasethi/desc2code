/* [theMighty] Deathsurgeon (Rupesh Maity)
* 3rd year, B.Tech in IT
* IIIT Allahabad
*/

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>
#include <math.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <climits>
#include <ctime>

#define LL long long
#define pii pair<int, int>

#define MOD 1000000007
#define MAX 100001
#define sd(x) scanf("%d", &x)

using namespace std;

pii point[3000];
int bit[3001][3001];
int hx, hy;

int fun(int top, int down, int left, int right) {
	int tot = 0;
	for (int i = right; i > 0; i -= i & -i) {
		for (int j = top; j > 0; j -= j & -j) {
			tot += bit[i][j];
		}
	}

	for (int i = left; i > 0; i -= i & -i) {
		for (int j = down; j > 0; j -= j & -j) {
			tot += bit[i][j];
		}
	}
	
	for (int i = right; i > 0; i -= i & -i) {
		for (int j = down; j > 0; j -= j & -j) {
			tot -= bit[i][j];
		}
	}

	for (int i = left; i > 0; i -= i & -i) {
		for (int j = top; j > 0; j -= j & -j) {
			tot -= bit[i][j];
		}
	}
	
	return tot;
}

int main()
{
#ifdef _MSC_VER
	freopen("input.txt", "r", stdin);
	//	freopen("output.txt", "w", stdout);
#endif
	int n;
	cin >> n;
	int x[3000];
	int y[3000];

	for (int i = 0; i < n; i++) {
		cin >> x[i] >> y[i];
		point[i] = { x[i], y[i] };
	}

	// precompute
	sort(x, x + n);
	sort(y, y + n);
	hx = unique(x, x + n) - x;
	hy = unique(y, y + n) - y;

	// compress
	for (int i = 0; i < n; i++) {
		point[i].first = upper_bound(x, x + hx, point[i].first) - x;
		point[i].second = upper_bound(y, y + hy, point[i].second) - y;
	}

	for (int i = 0; i < n; i++) {
		int x = point[i].first;
		int y = point[i].second;

		for (int j = x; j <= hx; j += j & -j) {
			for (int k = y; k <= hy; k += k & -k) {
				++bit[j][k];
			}
		}
	}
	/*
	for (int i = 1; i <= hx; i++) {
		for (int j = 1; j <= hy; j++) {
			int c = 0;
			for (int p = i; p > 0; p -= p&-p) {
				for (int q = j; q > 0; q -= q & -q) {
					c += bit[p][q];
				}
			}
			cout << i << j << c << endl;
		}
	}
	*/
	int q;
	cin >> q;

	while (q--) {
		int a, b, k;
		cin >> a >> b >> k;

		if (k > n) {
			puts("-1");
			continue;
		}

		int l = 0, h = 1000000000;

		while (l < h) {
			int mid = (h - l) / 2 + l;
			int top = b + mid;
			int down = b - mid;
			int left = a - mid;
			int right = a + mid;

			top = upper_bound(y, y + hy, top) - y;
			down = lower_bound(y, y + hy, down) - y;
			right = upper_bound(x, x + hx, right) - x;
			left = lower_bound(x, x + hx, left) - x;

			int cnt = fun(top, down, left, right);

			if (cnt < k) {
				l = mid + 1;
			}
			else {
				h = mid;
			}
		}

		cout << l << endl;
	}

	return 0;
}