#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <list>
#include <algorithm>
#include <iostream>
#include <assert.h>

using namespace std;

#define SET(v,i) memset(v,i,sizeof(v));
#define FOR(i,n,k) for(int i=n;i<k;++i)
#define WHILE(i,n) while(i<n)
#define RI(i) scanf("%d",&i);
#define RS(i) scanf("%s",i);
#define RF(i) scanf("%lf",&i);
#define RL(i) scanf("%lld",&i);
#define OPEN(s) freopen(s,"r",stdin);
#define CLOSE(s) freopen(s,"w",stdout);

const int INF=0x3F3F3F3F;
const int MAXN=100001;
typedef long long int i64;
typedef pair<int,int> pii;
typedef pair<string,int> psi;

vector<int> graph[MAXN];
int x,y;
int P[MAXN];
bool visit[MAXN];

void build_parent(int idx,int parent){
	if(visit[idx]) return;
	//fprintf(stderr,"%d\n",idx);
	P[idx] = parent;
	visit[idx]=true;
	FOR(i,0,(int)graph[idx].size()){
		build_parent(graph[idx][i],idx);
	}
}

int cnt = 0;

void rev_(int idx){
	while(idx!=-1){
		//fprintf(stderr,"-> %d\n",idx);
		if(!visit[idx]) cnt++;
		else break;
		visit[idx]=true;
		idx = P[idx];
	}
	return;
}

int main(){
	#ifdef DM1_MACHINE
		OPEN("FILE.in");
		//CLOSE("FILE.out");
	#endif
	int t; RI(t);
	while(t--){
		int n; RI(n);
		FOR(i,0,n+1) graph[i].clear();
		cnt=0;
		SET(visit,0);
		SET(P,0);
		FOR(i,0,n-1){
			RI(x); RI(y);
			graph[x].push_back(y);
			graph[y].push_back(x);
		}
		build_parent(1,-1);
		SET(visit,0);
		int q; RI(q);
		FOR(i,0,q){
			int num; RI(num);
			rev_(num);
			printf("%d\n",n-cnt);
		}
	}
	return 0;
}


////////////////////////////////////////////
/////////////Code by David Moran////////////
/////////////////////////////P=NP///////////
