import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void main(String[] args) throws Exception {
        Thread t = new Thread(null, new Runnable() {
            @Override
            public void run() {
                try {
        PrintWriter output = new PrintWriter(System.out);
        InputReader reader = new InputReader(System.in);
        int T = reader.readInt();
        for (int t=0; t<T; t++) {
            int N = reader.readInt();
            Node[] nodes = new Node[N];
            for (int n=0; n<N; n++) {
                nodes[n] = new Node();
            }
            for (int n=1; n<N; n++) {
                int u = reader.readInt()-1;
                int v = reader.readInt()-1;
                Node nodeu = nodes[u];
                Node nodev = nodes[v];
                nodeu.next.add(nodev);
                nodev.next.add(nodeu);
            }
            dfs(nodes[0], null);
            int answer = N;
            int M = reader.readInt();
            for (int m=0; m<M; m++) {
                int id = reader.readInt()-1;
                Node node = nodes[id];
                while (node != null && !node.keep) {
                    node.keep = true;
                    node = node.parent;
                    answer--;
                }
                output.println(answer);
            }
        }
        output.close();
                } catch (IOException ex) {}
            }
        }, "", 10000000);
        t.start();
        t.join();
    }

    static void dfs(Node node, Node parent) {
        node.parent = parent;
        for (Node subNode : node.next) {
            if (subNode != parent) {
                dfs(subNode, node);
            }
        }
    }

    static class Node {
        Node parent;
        List<Node> next = new ArrayList<Node>();
        boolean keep;
    }

    static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public final int readInt() throws IOException {
            return (int)readLong();
        }

        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
                if (c == -1) throw new IOException();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return negative ? -res : res;
        }

        public final int[] readIntArray(int size) throws IOException {
            int[] array = new int[size];
            for (int i=0; i<size; i++) {
                array[i] = readInt();
            }
            return array;
        }

        public final long[] readLongArray(int size) throws IOException {
            long[] array = new long[size];
            for (int i=0; i<size; i++) {
                array[i] = readLong();
            }
            return array;
        }

        public final String readString() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            StringBuilder res = new StringBuilder();
            do {
                res.append((char)c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }

        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }

}
