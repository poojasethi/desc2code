#include <stdio.h>
#include <string.h>

#include <vector>
#include <algorithm>

using namespace std;

vector<int> graph[50010];
int n, parent[50010], cnt;
bool mark[50010];

void make_tree(int node, int p) {
	parent[node] = p;
	for(int i = 0; i < (int)graph[node].size(); ++i) {
		if(graph[node][i] == p) continue;
		make_tree(graph[node][i], node);
	}
}

void way_out(int node) {
	while(!mark[node] && parent[node] != -1) {
		mark[node] = true; cnt++;
		node = parent[node];
	}
}

int main() {
	int t; scanf("%d", &t);
	while(t--) {
		scanf("%d", &n);
		for(int i = 0; i <= n; ++i) graph[i].clear();
		for(int i = 0; i < n - 1; ++i) {
			int a, b; scanf("%d %d", &a, &b);
			graph[a].push_back(b);
			graph[b].push_back(a);
		}
		make_tree(1, -1); cnt = 0;
		memset(mark, false, sizeof(mark));
		int m; scanf("%d", &m);
		while(m--) {
			int kid; scanf("%d", &kid);
			way_out(kid);
			printf("%d\n", n - cnt - 1); 
		}
	}
	return 0;
}
