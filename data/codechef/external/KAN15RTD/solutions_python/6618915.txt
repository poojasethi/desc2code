#include <iostream>
#include <utility>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#define sz 50009

using namespace std;

typedef long long ll;

vector<int> graph[sz];
int vis[sz];
int done[sz];
int parent[sz];
int degree[sz];
int rem;
int n,m;

void dfs(int node) {
	vis[node] = 1;
	for(int i=0; i<graph[node].size(); i++) {
		int &res = graph[node][i];
		if(!vis[res]) {
			parent[res] = node;
			dfs(res);
		}
	}
}

void solve(int node) {
	if(!done[node]) {
		rem--;
		done[node] = 1;
		for(int i=0;i<graph[node].size();i++) {
			int &res = graph[node][i];
			if(res != parent[node]) solve(res);
		}
	}
}

void remv(int node) {
	if(done[node]) return;
	rem--;
	done[node] = 1;
	int par = parent[node];
	while(par != 1) {
		if(done[par]) return;
		if(!done[par]) {
			rem--;
			done[par] = 1;
		}
		par = parent[par];
		if(par == 1) {
			if(!done[par]) {
				rem--;
				done[par] = 1;
			}
			return;
		}
	}
}

int main() {
	int t;
	cin>>t;
	while(t--) {
		scanf("%d", &n);
		for(int i=0;i<sz;i++) {
			graph[i].clear();
		}
		for(int i=0;i<n-1;i++) {
			int a,b;
			scanf("%d%d", &a, &b);
			graph[a].push_back(b);
			graph[b].push_back(a);
		}
		for(int i=1;i<=n;i++) {
			degree[i] = graph[i].size();
		}
		rem = n;
		parent[1] = 0;
		memset(vis, 0, sizeof vis);
		dfs(1);
		memset(done, 0, sizeof done);
		scanf("%d", &m);
		for(int i=0;i<m;i++) {
			int temp;
			scanf("%d", &temp);
			remv(temp);
			printf("%d\n", rem);
		}
	}
	return 0;
}