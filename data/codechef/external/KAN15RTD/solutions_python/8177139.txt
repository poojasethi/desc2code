#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <set>
#include <cstdio>
#include <cstdlib>
#include <stack>
#include <cstring>
#include <iomanip>

using namespace std;

vector<vector<int> > Tree;

const int N = 100005;
int p[N];
int s[N];

void dfs(int u,int p) {
    ::p[u] = p;
    for(int i = 0;i < Tree[u].size();i++) {
        int v = Tree[u][i];
        if(v != p) dfs(v,u);
    }
}

void solve() {
    Tree.clear();
    int n; cin>>n;
    Tree.resize(n + 1);
    for(int i = 1;i < n;i++) {
        int x,y;
        scanf("%d %d",&x,&y);
        Tree[x].push_back(y);
        Tree[y].push_back(x);
    }
    for(int i = 1;i <= n;i++) s[i] = 0;
    dfs(1,0);
    int m; cin>>m;
    int ans = n;
    while(m--) {
        int c; scanf("%d",&c);
        while(c && !s[c]) {
            ans--;
            s[c] = 1;
            c = p[c];
        }
        printf("%d\n",ans);
    }
}

int main() {
    int t; cin>>t;
    while(t--) {
        solve();
    }
   
}