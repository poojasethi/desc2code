#include<iostream>
using namespace::std;

struct node{
	int v;
	node* next;


	node()
	{
		next = NULL;
	}
};


struct LinkedList{
	node* head;
	node* tail;

	LinkedList()
	{
		head= NULL;
		tail = NULL;
	}

	void add(int v)
	{
		node* temp = new node;
		temp->v = v;
		//temp->length = l;

		if(head==NULL)
			{
				head=temp;
				tail = head;
				return ; 
			}

		tail->next = temp;
		tail = temp;	

	}

};


class Graph{

	public:
	LinkedList* al;
	int* marked;
	int n,m,l;
	int count;
	
	public:
	void input()
	{
		cin>>n;
		m=n-1;
		al = new LinkedList[n+1];
		marked = new int[n+1];
		count=0;
		int i,j,k,temp;
		for(i=0;i<m;i++)
		{
			cin>>j>>k;
			temp=j;
		//	j=max(j,k);
		//	k=min(temp,k);
			al[k].add(j);
			al[j].add(k);
		}

		for(i=1;i<=n;i++)
		marked[i]=0;
		
		cin>>l;
		for(i=0;i<l;i++)
		{
			cin>>j;
			solution(j);
			cout<<n-count<<"\n";
		}
	}

	void solution(int s)
	{
	 	int i,j,k;

	 	i=s;

	 	//marked[i]=0;

	 	while(i!=1 && marked[i]==0)
	 	{
	 		marked[i]=1;
	 		count++;
	 		i=al[i].head->v;
	 		//i=1;
	 	}

	 	if(i==1 && marked[i]==0)
	 	{
	 		marked[i]=1;
	 		count++;
	 	}
	}
	void clear()
	{
		delete[] al;		
	}

};


int main()
{
	int t;
	cin>>t;
	
	Graph g;	
	
	while(t--)
	{
		
		g.input();
		g.clear();
	}
}