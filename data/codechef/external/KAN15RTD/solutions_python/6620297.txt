#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;

#define tr(c,i) for(auto i=(c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define rep(i,n) for(int i=0;i<(n);i++)
#define clr(x) memset(x, 0, sizeof x);
int tcs, tc;

vvi al;
int parent  [50005];
bool seen   [50005];
bool blocked[50005];
bool kid    [50005];
ll n, m, a, b;

// DFS
void cal_parents(int i=0) {
	parent[i] = -1;
	seen[i] = true;
	rep (j, al[i].size()) {
		int child = al[i][j];
		if (!seen[child]) {
			cal_parents(child);
			parent[child] = i;
		}
	}
}

void solve() {
	al.clear();
	clr(kid);

	cin >> n;
	al.resize(n+1);
	rep (i, n-1) {
		cin >> a >> b;
		a--; b--;
		al[a].push_back(b);
		al[b].push_back(a);
	}
	clr(seen);
	clr(parent);
	cal_parents();

	clr(blocked);
	int ans = n;
	cin >> m;
	rep (i, m) {
		cin >> a;
		a--;
		kid[a] = true;
		while (a != -1 && !blocked[a]) {
			blocked[a] = true;
			a = parent[a];
			ans--;
		}
		cout << ans << endl;
	}
}

int main () {
	std::ios::sync_with_stdio(false);
	cin >> tcs; for (tc=1; tc<=tcs; ++tc) solve();
	return 0;
}
