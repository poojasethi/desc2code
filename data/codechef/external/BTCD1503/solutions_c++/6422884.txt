//Bismillahir Rahmanir Rahmeem

#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string.h>
#include <stdlib.h>
#include<map>
#include<queue>
#include<stack>
#include<utility>
#include<stdlib.h>
#include<string>
#include<set>
#include<iomanip>
#define INF 1e9
#define lld long long int
#define CLR(a) memset(a,0,sizeof(a))
#define RESET(a) memset(a,-1,sizeof(a))
#define act(a) memset(a,1,sizeof(a))
#define setinf(a) memset(a,0b01111111,sizeof(a));
#define FRO freopen("input.txt","r",stdin);
#define FROut freopen("output.txt","w",stdout);
#define ui unsigned int
#define came "came"
#define pii pair<int,int>
#define plii pair<long long int, int>
#define pll pair<long long,long long>
#define pic pair<int,char>
#define ninf (-1e9)-2
#define inf (1e9)+2
#include<fstream>
#include <assert.h>
#include <bitset>

#define foreach(x) for(__typeof(x.begin()) it=x.begin(); it!=x.end();it++)

using namespace std;
#define pid pair<int,double>
#define pdi pair<double,int>

#define PB push_back
#define MP make_pair
#define pri(x) printf("%d\n",x)
#define pi 3.14159265359
#define F first
#define S second
#define vit vector<int>::iterator

int mod=1000000007;

//sieve code start
#define N 1000000
bool prime[N];
vector<int> v;
int sz;

void sieve()
{
    int i,j;
    int sq=sqrt(N);
    memset(prime,1,sizeof(prime));
    v.push_back(2);
    prime[0]=prime[1]=0;
    for(i=4;i<N;i+=2) prime[i]=false;
    for(i=3;i<=sq;i+=2)
    {
        if(prime[i])
        {
            for(j=i*i;j<N;j+=2*i)
            {
                prime[j]=false;
            }
            v.push_back(i);
        }
    }
    for(;i<N;i+=2)
    {
        if(prime[i])
        {
            v.push_back(i);
        }
    }
    sz=v.size();
}

vector<int> factor;

lld pow(lld b,lld p, lld mod)
{
   lld ret=1;
   while(p)
   {
       if(p%2!=0)
       {
           ret=(ret*b)%mod;
       }
       p/=2;
       b=(b*b)%mod;
   }
   return ret;
}

int main()
{
    //FRO
    sieve();
    int t;
    scanf("%d",&t);
    while(t--)
    {
        lld n;
        scanf("%lld",&n);
        lld x=n;
        factor.clear();
        int i,j;
        for(i=0;i<v.size() && v[i]*v[i]<=n;i++)
        {
            if(x%v[i]==0)
            {
                factor.PB(v[i]);
                while(x%v[i]==0) x/=v[i];
            }
        }

        if(x-1)
        {
            factor.PB(x);
        }

        int sz=factor.size();
        int mx=1<<sz;

        mx=mx-1;
        lld ans,res;
        n--;
        ans=(((n*(n+1))%mod)*(2*n+1))%mod;
        ans=(ans*pow(6,mod-2,mod))%mod;
        res=0;
        for(i=1;i<=mx;i++)
        {
            lld val=1;
            for(j=0;j<factor.size();j++)
            {
                if((i & 1<<j))
                {
                    val*=factor[j];
                }
            }
            lld cnt=(n-1)/val;
            lld x=cnt;
            cnt=(x*(x+1))%mod;
            cnt=(cnt*(2*x+1))%mod;
            cnt=(cnt*pow(6,mod-2,mod))%mod;
            cnt=(cnt*val)%mod;
            cnt=(cnt*val)%mod;
            if(__builtin_popcount(i)%2)
            {
                res=res+cnt;
                res%=mod;
            }
            else
            {
                res=res-cnt;
                res%=mod;
                res=(res+mod)%mod;
            }
        }
        ans-=res;
        ans%=mod;
        ans=(ans+mod)%mod;
        printf("%lld\n",ans);
    }
    return 0;
}
