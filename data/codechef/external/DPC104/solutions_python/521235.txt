#include <iostream>

using namespace std;

int pruf(int f[10][9][9], int xp[10], int yp[10], int t);

main()
{
int fall, x, y, a[10][9][9], t, xp[10], yp[10], stat;

cin >> fall;

while(fall--)
	{
	for(y=0; y<6; y++)	// ersten Array einlesen
		for(x=0; x<6; x++)
			cin >> a[0][x][y];

	for(y=0; y<6; y++)	// andere Arrays erstellen
		for(x=0; x<6; x++)
			{
			a[1][x][y]=a[0][5-x][y];
			a[2][x][y]=a[0][y][x];
			a[3][x][y]=a[0][y][5-x];
			}
	for(y=0; y<6; y++)
		for(x=0; x<6; x++)
			{
			a[4][x][y]=a[0][x][5-y];
			a[5][x][y]=a[1][x][5-y];
			a[6][x][y]=a[2][x][5-y];
			a[7][x][y]=a[3][x][5-y];
			}

	for(t=0; t<=7; t++)	// oberen Rand suchen
		{
		yp[t]=-1;
		for(y=0; y<6; y++)
			for(x=0; x<6; x++)
				if(yp[t]==-1 && a[t][x][y]==1)
					yp[t]=y;
		}

	for(t=0; t<=7; t++)	// linken Rand suchen
		{
		xp[t]=-1;
		for(x=0; x<6; x++)
			for(y=0; y<6; y++)
				if(xp[t]==-1 && a[t][x][y]==1)
					xp[t]=x;
		}

	stat=0;
	for(t=0; t<=7 && !stat; t++)
		stat=pruf(a, xp, yp, t);

	if(stat)
		cout << "correct" << endl;
	else
		cout << "incorrect" << endl;

	}

return 0;
}

int pruf(int f[10][9][9], int xp[10], int yp[10], int t)
{
int x, y, a[9][9];

for(y=0; y<5; y++)
	for(x=0; x<4; x++)
		if(f[t][xp[t]+x][yp[t]+y]==1)
			a[x][y]=1;
		else
			a[x][y]=0;

// Variante 1
if(a[0][0]==1 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==0 && a[3][1]==0)
if(a[0][2]==0 && a[1][2]==1 && a[2][2]==1 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==1 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 2
if(a[0][0]==1 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==1 && a[3][1]==0)
if(a[0][2]==0 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==1 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 3
if(a[0][0]==1 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==0 && a[3][1]==0)
if(a[0][2]==0 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==1 && a[2][3]==1 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 4
if(a[0][0]==1 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==0 && a[3][1]==0)
if(a[0][2]==0 && a[1][2]==1 && a[2][2]==1 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==0 && a[2][3]==1 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 5
if(a[0][0]==1 && a[1][0]==1 && a[2][0]==1 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==0 && a[3][1]==0)
if(a[0][2]==0 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==1 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 6
if(a[0][0]==0 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==1 && a[3][1]==0)
if(a[0][2]==1 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==1 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 7
if(a[0][0]==0 && a[1][0]==0 && a[2][0]==1 && a[3][0]==1)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==1 && a[3][1]==0)
if(a[0][2]==1 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==0 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 8
if(a[0][0]==0 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==1 && a[1][1]==1 && a[2][1]==1 && a[3][1]==0)
if(a[0][2]==0 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==1 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 9
if(a[0][0]==0 && a[1][0]==0 && a[2][0]==1 && a[3][0]==0)
if(a[0][1]==1 && a[1][1]==1 && a[2][1]==1 && a[3][1]==0)
if(a[0][2]==0 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==0 && a[1][3]==1 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 10
if(a[0][0]==0 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==1 && a[3][1]==0)
if(a[0][2]==1 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==1 && a[1][3]==0 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==0 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

// Variante 11
if(a[0][0]==0 && a[1][0]==1 && a[2][0]==0 && a[3][0]==0)
if(a[0][1]==0 && a[1][1]==1 && a[2][1]==0 && a[3][1]==0)
if(a[0][2]==1 && a[1][2]==1 && a[2][2]==0 && a[3][2]==0)
if(a[0][3]==1 && a[1][3]==0 && a[2][3]==0 && a[3][3]==0)
if(a[0][4]==1 && a[1][4]==0 && a[2][4]==0 && a[3][4]==0)
return 1;

return 0;
}
