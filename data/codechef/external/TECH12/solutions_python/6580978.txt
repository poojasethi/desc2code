/**/
#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define For(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define all(v) v.begin(),v.end()
#define V vector
typedef long long ll;
/***********************************************/
/* Dear GCC compiler:
 * I've wasted time reading the problem and trying to figure out the solution
 * If there's any syntax error and you've any suggestion, please fix it yourself.
 * I hope my code compile and get accepted. KEE O.o
 *      ____________
 *     /         __ \
 *    /   __    |  | \
 *   /   |__|   |  |  \
 *  (           |__|   )
 *   \                /
 *    \      ___     /
 *     \____________/
 */
/**/
const ll mod = 1000000007;
V<bool> prime;
V<int> primes;
void seive(int n){
	prime = V<bool>(n+1,true);
	prime[1] = prime[0] = false;
	for(int i = 2;i*i <= n;i++){
		if(!prime[i])
			continue;
		for(int j = i;i * j <= n;j++){
			prime[i*j] = false;
		}
	}
	primes.pb(2);
	For(i,3,prime.size()){
		if(prime[i])
			primes.pb(i);
		i++;
	}
}
int main(){
	//ios_base::sync_with_stdio(false);
	//cin.tie(nullptr);
	seive(100000);
	int t;
	scanf("%d",&t);
	while(t--){
		int n , k;
		scanf("%d%d",&n,&k);
		if(k == 0){
			printf("%lld\n",((ll)(n-1)*(ll)n)/2LL);
		}else{
			k--;
			if(k >= (int)primes.size()){
				printf("0\n");
				continue;
			}
			ll res = 0;
			int start = 0;
			while(n >= primes[k]){
				res+= (ll)(n - primes[k] + 1LL) * (ll)(primes[start] - (start == 0? 2LL : primes[start - 1] + 1LL) + 1LL);
				//printf("%d %d %I64d\n",primes[k],primes[start],res);
				k++;
				start++;
				if(k >= (int)primes.size())
					break;
			}
			printf("%lld\n",res);
		}
	}
	return 0;
}
/**/
