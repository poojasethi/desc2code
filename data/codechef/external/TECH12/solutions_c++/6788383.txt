#include <bits/stdc++.h>
using namespace std;
#define ull unsigned long long
#define ll long long int
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FF(i,a,n) for(i=(a);i<(n);++i)
#define REP(i,a,n) for(i=(a);i<=(n);++i)
#define V(x) vector<x>
#define Sd(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define all(c) c.begin(), c.end()
#define present_mapset(c,x) ((c).find(x) != (c).end())
#define present_vector(c,x) (find(all(c),x) != (c).end())
#define repstl(v)  for( typeof(v.begin()) it = v.begin(); it != v.end(); it++ )
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define matrix vector< vector<ll> >
#define PI acos(-1.0)
#define EPS 1e-9
#define F1 first
#define S2 second
#define Lf 2*r
#define Rg 2*r+1
//vector< vector<int> >Matrix(N, vector<int>(M,0));
#define gc getchar_unlocked
#define MAXNN 100010
#define mod 1e9+7

inline void inputfile() {
#ifndef ONLINE_JUDGE
    freopen("input.in","r",stdin);
#endif
}
inline void cpp_input()
{ios_base::sync_with_stdio(false);
    cin.tie(NULL);}
template <typename T>
void scanint(T &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}


bool prime[MAXNN]={0};//prime
vector<int> parr;
void sieve()
{

    for(int i=2;i*i<=MAXNN;i++)
    {
        for(int j=i*i;j<MAXNN;j=j+i)
        {
            prime[j]=true;//composite
        }
    }


}

int high,low,mid;

void binsearch(int x,int len)
{
    low=0;
    high=len-1;

    F(i,0,14)
    {
        mid = (low+high)/2;
        if(parr[mid] > x)
            high=mid;
        else
            low=mid;
    }
}


int main(int argc, char const *argv[])
{
    inputfile();
    sieve();
    int t;
    scanint(t);
    while(t--)
    {
        ll n,k,ans;
        scanint(n);
        scanint(k);
        if(!k)
        {
            printf("%lld\n",(n*(n-1))/2 );
            continue;
        }
        else
        {
            ans=0;
            parr.clear();
            F(i,2,n+1)
                if(!prime[i])
                    parr.push_back(i);
            int len = parr.size();

            F(j,2,n+1)
            {
                binsearch(j,len);

                int ind = len;
                if(parr[low] >= j) 
                ind =low;
                else if(parr[high] >= j) 
                ind = high;

                if(ind + k <=len)
                {
                    ans = ans + n + 1 - parr[ind + k - 1];
                }

            }

            printf("%lld\n",ans);

        }
    }

    return 0;
}
