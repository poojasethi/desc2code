#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS 
#endif 
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<array>
#include<cstdlib>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<string>
#include<unordered_map>
#include<climits>
#include<unordered_set>
#include<bitset>
#include<cfloat>
#include<sstream>
#include<iomanip>
using namespace std;
template <typename T>
inline T in(){
	char c, m = 0; T t = 0;
	c = getchar();
	while ((c<'0' || c>'9') && c != '-')
		c = getchar();
	if (c == '-')
		m = 1,
		c = getchar();

	while (c >= '0' && c <= '9'){
		t = (t << 3) + (t << 1) + c - '0';
		c = getchar();
	}
	if (m)
		t = -t;
	return t;

}

typedef vector< vector <int> > matrix;
const int mod = 1e9 + 7;

matrix multiply(matrix a, matrix b, int mod)
{
	matrix c;
	size_t n = a.size();
	c.resize(n, vector<int>(n));
	for (size_t i = 0; i < n; i++)
	{
		for (size_t j = 0; j < n; j++)
		{
			for (size_t k = 0; k < n; k++)
			{
				c[i][j] = (c[i][j] + (long long)a[i][k] * b[k][j]) % mod;
			}
		}
	}
	return c;
}

matrix calc(matrix a, long long n)
{
	if (n==1)
	{
		return a;
	}
	matrix b = calc(a, n / 2);
	matrix c = multiply(b, b,mod);
	if (n&1)
	{
		c=multiply(c, a, mod);
	}
	return c;
}

int cal(long long n)
{
	matrix a(2, vector<int>(2));
	a[0][0] = 1;
	a[0][1] = 1;
	a[1][0] = 1;
	if ((n==1)||(n==0))
	{
		return 1;
	}
	matrix b = calc(a, n - 1);
	int ans = ((long long)b[0][0] + b[0][1])%mod;
	return ans;

}

int main(){
	int t;
	long long n;
	t = in<int>();
	while (t--)
	{
		n = in<long long>();
		printf("%d\n", cal(n - 1));
	}

	return 0;
}