#include <stdio.h>
#include <math.h>

#define SQRTMAXN 1000
#define MAXN     1000000
#define MAXK     1000000000
#define MOD      1000000007

int primes[MAXN + 1], invprimes[MAXN + 1], nprimes ;

int fastpow(long long int a, int p)
{
	long long int i = 1 ;
	
	while (p)
	{
		if (p & 1)
		{
			i = (i * a) % MOD ;
		}
		
		p /= 2 ;
		a *= a ;
		a %= MOD ;
	}
	
	return i ;
}

int main()
{
	long long int R, S ;
	int           i, j, k, n, t ;
	
	for (i = 2 ; i <= SQRTMAXN ; i++)
	{
		if (!primes[i])
		{
			for (j = i * i ; j <= MAXN ; j += i)
			{
				primes[j] = 1 ;
			}
		}
	}
	
	for (i = 2, nprimes = 0 ; i <= MAXN ; i++)
	{
		if (!primes[i])
		{
			invprimes[nprimes] = fastpow(i - 1, MOD - 2) ;
			primes[nprimes++]  = i ;
		}
	}
	
	primes[nprimes] = MAXN + 1 ;
	
	scanf("%d", &t) ;
		
	while (t--)
	{
		scanf("%d%d", &n, &k) ;
		
		R = 1LL ;
				
		for (i = 0 ; primes[i] <= n; i++)
		{
			S  = 0LL ;
			S += fastpow(primes[i], k + 1) - 1 ;
			S *= invprimes[i] ;
			S %= MOD ;
			S += MOD - k - 1 ;
			S %= MOD ;
			S *= invprimes[i] ;
			S %= MOD ;
			R *= S ;
			R %= MOD ;
		}
		
		printf("%lld\n", R) ;
	}	
	
	return 0 ;
}
