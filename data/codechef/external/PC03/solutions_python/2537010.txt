#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <functional>
#include <string>
#include <cstring>
#include <cstdlib>
#include <queue>
#include <utility>
#include <fstream>
#include <sstream>
#include <cmath>
#include <stack>
#include <assert.h>

using namespace std;
#define CLR(a) memset(a, 0, sizeof(a))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define SZ(V) (int )V.size()
#define ALL(V) V.begin(), V.end()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define PB push_back  
#define MP make_pair

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;
typedef long long LL;

struct rec{
	int arrival_time,wait_time;
	int prod[5];
};
struct rec node[100005];
int main()
{
	int i,j,k,test,n,mak_time[5],s,ind;
	int elased_time;
	cin >> test;
	FORN(i,5)
		mak_time[i]=0;
	while(test--)
	{
		cin >> n;
		FORN(i,n)
		{
			scanf("%d%d%d%d%d%d",&node[i].arrival_time,&node[i].prod[0],&node[i].prod[1],&node[i].prod[2],&node[i].prod[3],&node[i].prod[4]);
			node[i].wait_time=0;
		}
		FORN(i,5)
			mak_time[i]=0;
		queue<int> q;
		q.push(0);
		elased_time=node[0].arrival_time;
		s=1;
		while(!q.empty())
		{
			ind=q.front();
			q.pop();
			for(i=0;i<5;i++)
			{
				if(node[ind].prod[i])
				{
					if(mak_time[i]>elased_time)
					{
						node[ind].wait_time+=mak_time[i]-elased_time;
						elased_time=mak_time[i];
					}
					node[ind].prod[i]-=2;
					mak_time[i]=elased_time+5;
					break;
				}
			}
			elased_time++;
			while(s<n && node[s].arrival_time<=elased_time)
			{
				q.push(s);
				s++;
			}
			for(i=0;i<5;i++)
			{
				if(node[ind].prod[i])
				{
					q.push(ind);
					break;
				}
			}
		}
		int sum=0;
		FORN(i,n)
			sum+=node[i].wait_time;
		cout << sum << endl;
	}
	return 0;
}