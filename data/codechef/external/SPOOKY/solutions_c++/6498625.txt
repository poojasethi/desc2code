#include<bits/stdc++.h>
using namespace std;

bool subsetsum(vector<long long>arr,long long sum,long long size)
{
	bool set[sum+1][size+1];
	sort(arr.begin(),arr.end());
	
	for(int i=0;i<=size;i++)
	set[0][i]=true;
	
	for(int i=1;i<=sum;i++)
	set[i][0]=false;
	
	for(int i=1;i<=sum;i++)
	{
		for(int j=1;j<=size;j++)
		{
			set[i][j]=set[i][j-1];
			if(i>=arr[j-1])
			set[i][j] = set[i][j] || set[i - arr[j-1]][j-1];
		}
	}
	return set[sum][size];
}
int main()
{
	int test;
	std::ios::sync_with_stdio(false);
	cin>>test;
	while(test--)
	{
		long long n,i,sum=1;
		cin>>n;
		vector<long long>myvect;
		myvect.push_back(1);
		for(int i=2;i<=sqrt(n);i++)
		{
			if(n %i ==0)
			{
					if(i!=(n/i))
					{
						myvect.push_back(i);
						myvect.push_back(n/i);
						sum+=i;
						sum+=(n/i);
					}
					else
					{
						myvect.push_back(i);
						sum+=i;
					}
			}
		}
		//cout<<sum<<endl;
		if(sum >n)
		{
			long long temp=sum-n;
			if(subsetsum(myvect,temp,myvect.size()))
			cout<<"OK"<<endl;
			else
			cout<<"SPOOKY"<<endl;
		}
		else
		{
			cout<<"OK"<<endl;
		}
	}
}