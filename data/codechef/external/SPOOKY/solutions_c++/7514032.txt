#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<string.h>
#include<stack>
#include<queue>
#include<algorithm>
#include<cmath>
#define MAX 100001
#define pb push_back
#define mp make_pair
#define sz(c) c.size()
#define all(c) c.begin(),c.end()
#define inf 0x7fffffff
#define gc() getchar_unlocked()
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vii;
typedef pair<int,int> pii;
typedef vector<pii> vpii;


static inline int fastio()
{
    int x=0;
    char c=getchar_unlocked();
    while(c<'0'||c>'9')
        c=getchar_unlocked();
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }

    return (x);
}

/*static inline void fastWrite(long long int x)
{
char str[21]={' '};
int l=0;
do
{
 str[l++]=x%10+'0';
 x/=10;
}while(x!=0);
    l--;
    while(l>=0)
    {
       // putchar_unlocked(str[l--]);
    }
   // putchar_unlocked('\n');
} */


/*vector<vector<int> > V;

void preCalc()
{
for(int i=1;i<100001;i++)
{
    vector<int> v;
    int to=(i%2)?(i/3):(i/2);
    for(int j=1;j<=to;j++)
    {
        if(to%j==0)
        {
        v.push_back(j);
        }
    }
    V.push_back(v);
}

}
*/


int gcd(int x,int y)
{
    return(y?gcd(y,x%y):x);
}

bool solve(int N)
{

    int factors[N];
    int len=0;
    int to=N%2?N/3:N/2;
    int sum=0;
    for(int z=1;z<=to;z++)
    {
        if(!(N%z))
        {
            sum+=z;
            factors[len++]=z;
        }
    }
    if(sum<=N)
    {
        return false;
    }
    /*int dp[N];
    for(int i=0;i<N;i++)
        dp[i]=inf;
    dp[0]=0;
    for(int i=1;i<N;i++)
    {
        for(int j=0;j<len;j++)
        {


                if(factors[j]<=i)
                {


                    dp[i]=min(dp[i],1+dp[i-factors[j]]);
                }
            }
        } */
        sort(factors,factors+len);
        bool found=false;
        for(int x=len-1;x>=0&&!found;x--)
        {
            int sum=factors[x];
            if(sum==N)
            {
                found=true;
                break;
            }
            for(int y=x-1;y>=0&&!found;y--)
            {
                if(sum+factors[y]==N)
                {
                    found=true;
                    break;
                }
                if(sum+factors[y]<N)
                {
                    sum=sum+factors[y];
                }
                if(sum==N)
                {
                    found=true;
                    break;
                }
            }

        }



    return(!found);
}


int main()
{
    int t,n;
    t=fastio();
    //scanf("%d",&t);
    while(t--)
    {
        n=fastio();
        //scanf("%d",&n);
        printf(solve(n)?"SPOOKY\n":"OK\n");
    }
    return 0;
}








