// mahatha

#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef std::pair<int,int> pii;

#define pb(x) push_back(x)
#define mp(a,b) make_pair(a,b)
#define X first
#define Y second

int N;
pii A[100001];
std::vector<pii> hull;

bool comp(pii a, pii b){
   return (ll)(a.Y-A[0].Y)*(ll)(b.X-A[0].X) < (ll)(b.Y-A[0].Y)*(ll)(a.X - A[0].X);
}
ll cross(pii a, pii b){
    return (ll)a.X*(ll)b.Y - (ll)b.X*(ll)a.Y;
}

/*
counterclockwise -> return true;
else return false
*/
bool signedArea(pii a, pii b, pii c){
    ll area = cross(a,b)+cross(b,c)+cross(c,a);
    if(area < 0) return false;  // need a check, now I am sure
    return true;
}

void ConvexHull(){
    if(N<3) return ;
    int idx = min_element(A,A+N) - A;
    swap(A[0],A[idx]);

    sort(A+1,A+N,comp);
    hull.pb(A[0]),hull.pb(A[1]),hull.pb(A[2]);
    for(int i=3;i<N;++i)
    {      
      int sz = hull.size()-1;
      assert(sz>=0);
      while(!signedArea(hull[sz-1],hull[sz],A[i])){        
        hull.pop_back();
        sz = hull.size()-1;
        assert(sz>=0);
      }

      hull.pb(A[i]);      
    }
    return ;
}

void solve(){
  scanf("%d",&N);
  for(int i=0;i<N;++i)
    scanf("%d%d",&A[i].X, &A[i].Y);
  if(N==1){
    puts("0");
    return ;
  }
  if(N==2){
    puts("1");
    return ;
  }
  hull.clear();
  ConvexHull();
  int sz = hull.size();
  printf("%d\n",3*(N-1)-sz);
  return ;
}

int main (){
  int TC;
  scanf("%d",&TC);
  while(TC--)
    solve();

  return 0;
}