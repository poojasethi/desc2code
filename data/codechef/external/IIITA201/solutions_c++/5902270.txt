#include <bits/stdc++.h>

#define ll long long int

ll tree[400000], a[100000], ind, val;

using namespace std;

void make (ll l, ll r, ll index) 
{
	if (l > r) {
		return;
	} else if (l == r) {
		(tree[index] = a[l]);
	} else {
		ll mid = (l + r) / 2;
		 make(l, mid, index * 2);  make(mid + 1, r, index * 2 + 1);
		 tree[index] = tree[index * 2] + tree[index * 2 + 1];
	}
}

/*void update(ll l, ll r, ll index, ll ind, ll val) 
{
	if (l == r) {
		tree[index] = val;
	} else {
		ll mid = (l + r) / 2;
		if (ind > mid) {
			update(mid + 1, r, index * 2 + 1, ind, val);
		} else {
			update(l, mid, index * 2, ind, val);
		}
		tree[index] = tree[index * 2] + tree[index * 2 + 1];
		printf("%lld ", index);
		printf("%lld\n", tree[index]);
	}
}*/

ll query(ll l, ll r, ll index, ll s, ll d)
{
	if (l > s || d > r) {
		return 0;
	} else if (l >= s && r <= d) {
		return(tree[index]);
	} else {
		ll mid = (l + r) / 2;
		if(mid >= d) {
			return query(l, mid, index * 2, s, d);
			} else if (mid < s) {
					return query( mid+1, r, index * 2 + 1, s, d);
			}
			return query(l, mid, index * 2, s, mid) + query(mid + 1, r, index * 2 + 1, mid+1, d);
		}
}
int main() 
{
	ll t, n, q, l, r, i, x, s, d;
	
	scanf("%lld", &t);
	
	while (t--) {
		scanf("%lld", &n);
		scanf("%lld", &q);
	
		for (i = 1; i <= n; i++) {
			scanf("%lld", &a[i]);
		}
		
		 make(1, n, 1);
	 
	 	/*for (i = 1; i < 4 * n; i++) {
	 		printf("%lld ", tree[i]);
		 }*/
	 
	 	//printf("\n");
	 
	 	//update(1, n, 1, ind, val);
	 
	 	/*for (i = 1; i < 4 * n; i++) {
	 		printf("%lld ", tree[i]);
	 	}*/
	 
	 	//printf("\n");
	 
		for (i = 0; i < q; i++) {
			scanf("%lld", &s);
			scanf("%lld", &d);
		
		x = query(1 , n, 1, s, d);
		
		printf("%lld\n", x);
		}
	}
	
	return 0;
}