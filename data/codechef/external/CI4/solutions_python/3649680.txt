/* Here we are just required to find the four basic points
   on the coordinate axes and do some math.
*/
#include<iostream>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<stack>
#include <iomanip>
#include<algorithm>
#include<math.h>
#include<cstdio>
#include<cstring>
 
using namespace std;
 
struct Point
{
	double x;
	double y;
};
 
 
 
double dist(Point A,Point B)
{
	double p1,p2,s;
	p1 = pow((B.x-A.x),2);
	p2 = pow((B.y-A.y),2);
	s = p1+p2;
	s = sqrt(s);
	//cout<<s<<endl;
	return s;
}
void round_double(double & num, int to)
{
	long places = 1, whole = *(&num);
	for(int i = 0; i < to; i++) places *= 10;
	num -= whole;              // Subtracts the integer part
	num *= places;			   // .1234  -> 123.4
	num = (long)floor(num);
	num /= places;			   // 123 -> .123
	num += whole;			   // Again add integer part to it
}
 
inline void print(long double n){
    n *= 1000;
    n = round(n);
    n /= 1000;
    cout<<n<<endl;
}
int main()
{
	double per;				// To store the perimeter
	Point A,B,C,D,P1,P2,P3,P4;
	// To store various contributions in each quadrant
	double C1,C2,C3,C4;
 
	scanf("%lf %lf",&A.x,&A.y);
	scanf("%lf %lf",&B.x,&B.y);
	scanf("%lf %lf",&C.x,&C.y);
	scanf("%lf %lf",&D.x,&D.y);
 
	/*
	printf("%lf %lf",A.x,A.y);
	printf("%lf %lf",B.x,B.y);
	printf("%lf %lf",C.x,C.y);
	printf("%lf %lf",D.x,D.y);
	*/
 
	P1.x = 0;
	P1.y = (((B.y - A.y)/(B.x - A.x))*(A.x)*(-1) + A.y) ;
	P2.y = 0;	
	P2.x = ((C.x - B.x)/(C.y- B.y))*(B.y)*(-1) + B.x ;
	P3.x = 0;	
	P3.y = ((D.y - C.y)/(D.x - C.x))*(C.x)*(-1) + C.y ;
	P4.y = 0;	
	P4.x = ((A.x - D.x)/(A.y - D.y))*(D.y)*(-1) + D.x ;
 
	per = dist(A,B) + dist(B,C) + dist(C,D) + dist(D,A);
 
	//cout<<P1.x<<" "<<P1.y<<endl;
	//cout<<P2.x<<" "<<P2.y<<endl;
	//cout<<P3.x<<" "<<P3.y<<endl;
	//cout<<P4.x<<" "<<P4.y<<endl;
 
	C1 = dist(A,P1) + dist(A,P4);
	C2 = dist(B,P1) + dist(B,P2);
	C3 = dist(C,P2) + dist(C,P3);
	C4 = dist(D,P3) + dist(D,P4);
 
	C1 = (C1/per) * 100;   //round_double(C1,3);
	C2 = (C2/per) * 100;   //round_double(C2,3);
	C3 = (C3/per) * 100;   //round_double(C3,3);
	C4 = (C4/per) * 100;   //round_double(C4,3);
 
	print(C1);
	print(C2);
	print(C3);
	print(C4);
 
	return 0;
}