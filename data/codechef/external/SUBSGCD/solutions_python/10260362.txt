#include <bits/stdc++.h>
#define ll long long
#define mod 1000000007
#define upperlimit 1000100
#define INF 1000000000
#define INFL 1000000000000000000
#define eps 1e-8
#define endl '\n'
#define sd(n) scanf("%d",&n)
#define slld(n) scanf("%lld",&n)
#define pd(n) printf("%d",n)
#define plld(n) printf("%lld",n)
#define pds(n) printf("%d ",n)
#define pllds(n) printf("%lld ",n)
#define pdn(n) printf("%d\n",n)
#define plldn(n) printf("%lld\n",n)
#define REP(i,a,b) for(i=a;i<=b;i++)
#define mp make_pair
#define pb push_back
#define pcc pair<char,char>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tr(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define F first
#define S second

using namespace std;

ll gcd(ll n1,ll n2){
	if(n1%n2==0)return n2;
	return gcd(n2,n1%n2);
}
ll powmod(ll base,ll exponent)
{
	ll ans=1;
	while(exponent){
		if(exponent&1)ans=(ans*base)%mod;
		base=(base*base)%mod;
		exponent/=2;
	}
	return ans;
}
int arr[upperlimit+1];
vector <int> factors[upperlimit+1];
bool prime[upperlimit+1];
int mobius[upperlimit+1];
int f[upperlimit+1];
int g[upperlimit+1];
int cnt[upperlimit+1];
int dp[upperlimit+1];
ll fn(ll n){
	return (powmod(2,n)-1+mod)%mod;
}
int main()
{
	int n,q,x,y,i,j,k,t;
	for(i=2;i*i<=upperlimit;i++)if(!prime[i])for(j=i*i;j<=upperlimit;j+=i)prime[j]=true;
	for(i=1;i<=upperlimit;i++){
		mobius[i]=1;
		for(j=i;j<=upperlimit;j+=i)factors[j].pb(i);
	}
	for(i=2;i*i<=upperlimit;i++)if(!prime[i])for(j=i*i;j<=upperlimit;j+=i*i)mobius[j]=0;
	for(i=2;i<=upperlimit;i++)if(!prime[i])for(j=i;j<=upperlimit;j+=i)mobius[j]*=-1;
	for(i=2;i<=upperlimit;i++)if(!prime[i])for(ll j1=i;j1<=upperlimit;j1*=i)f[j1]=1;
	for(i=1;i<=upperlimit;i++)if(mobius[i]!=0)for(j=i;j<=upperlimit;j+=i)g[j]=(mod+g[j]+mobius[i]*f[j/i])%mod;
	sd(t);
	while(t--){
		ll answer=0,temp;
		for(i=0;i<=upperlimit;i++){
			arr[i]=0;
			cnt[i]=0;
			dp[i]=0;
		}
		sd(n);
		sd(q);
		for(i=1;i<=n;i++){
			sd(arr[i]);
			cnt[arr[i]]++;
		}
		for(i=1;i<=upperlimit;i++)for(j=i;j<=upperlimit;j+=i)dp[i]+=cnt[j];
		for(i=1;i<=upperlimit;i++){
			temp=(fn(dp[i])*g[i])%mod;
			answer+=temp;
			if(answer>=mod)answer-=mod;
		}
		while(q--){
			sd(x);
			sd(y);
			for(i=0;i<factors[arr[x]].size();i++){
				j=factors[arr[x]][i];
				dp[j]--;
				temp=(mod-powmod(2,dp[j]))%mod;
				temp=(temp*g[j])%mod;
				answer+=temp;
				if(answer>=mod)answer-=mod;
			}
			arr[x]=y;
			for(i=0;i<factors[arr[x]].size();i++){
				j=factors[arr[x]][i];
				temp=(mod+powmod(2,dp[j]))%mod;
				temp=(temp*g[j])%mod;
				dp[j]++;
				answer+=temp;
				if(answer>=mod)answer-=mod;
			}
			plldn(answer);
		}
	}
	return 0;
}
