#include <bits/stdc++.h>

#define bug(x) cerr << #x << " = " << x << endl;

using namespace std;

typedef long long int ll;
typedef vector<int> vi;
typedef vector<bool> vb;

const ll mod = 1e9 + 7;
const int N = 1e6 + 10;

vi erat, cont, facs;
vb valid;

ll ans;

int aux[20];

ll pot(ll x) {
  if (x == 0) return 1;
  ll y = pot(x / 2);
  y = (y * y) % mod;
  return x % 2ll ? (y * 2ll) % mod : y;
}

void bt(int p, int k, int cur) {
  if (p == k) {
    ++cont[cur];
    return;
  }
  bt(p + 1, k, cur);
  bt(p + 1, k, cur * aux[p]);
}

void bt_treu(int p, int k, int cur) {
  if (p == k) {
    if (cur == 1) return;
    if (facs[cur] % 2 != 1) {
      ans = (ans + ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod;
    }
    else {
      ans = (ans + mod - (ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod) % mod;
    }
    --cont[cur];
    if (facs[cur] % 2 == 1) {
      ans = (ans + ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod;
    }
    else {
      ans = (ans + mod - (ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod) % mod;
    }
    return;
  }
  bt_treu(p + 1, k, cur);
  bt_treu(p + 1, k, cur * aux[p]);
}

void bt_posa(int p, int k, int cur) {
  if (p == k) {
    if (cur == 1) return;
    if (facs[cur] % 2 != 1) {
      ans = (ans + ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod;
    }
    else {
      ans = (ans + mod - (ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod) % mod;
    }
    ++cont[cur];
    if (facs[cur] % 2 == 1) {
      ans = (ans + ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod;
    }
    else {
      ans = (ans + mod - (ll(facs[cur]) * ll(pot(cont[cur]) + mod - 1)) % mod) % mod;
    }
    return;
  }
  bt_posa(p + 1, k, cur);
  bt_posa(p + 1, k, cur * aux[p]);
}

void cas() {
  int n, q;
  cin >> n >> q;
  vi v(n);
  cont = vi(N, 0);
  for (int i = 0; i < n; ++i) {
    cin >> v[i];
    int x = v[i];
    int k = 0;
    while (x > 1) {
      int f = erat[x];
      while (x % f == 0) x /= f;
      aux[k++] = f;
    }
    bt(0, k, 1); 
  }
  ans = 0;
  for (int i = 2; i < N; ++i) if (valid[i]) {
    if (facs[i] % 2 == 1) {
      ans = (ans + ll(facs[i]) * ll(pot(cont[i]) + mod - 1)) % mod;
    }
    else {
      ans = (ans + mod - (ll(facs[i]) * ll(pot(cont[i]) + mod - 1)) % mod) % mod;
    }
  }
  while (q--) {
    int p, x, y;
    cin >> p >> y;
    --p;
    int k = 0;
    x = v[p];
    v[p] = y;
    while (x > 1) {
      int f = erat[x];
      while (x % f == 0) x /= f;
      aux[k++] = f;
    }
    bt_treu(0, k, 1); 
    k = 0;
    while (y > 1) {
      int f = erat[y];
      while (y % f == 0) y /= f;
      aux[k++] = f;
    }
    bt_posa(0, k, 1);
    cout << ans << endl;
  }
}

int main() {
  cin.tie(NULL);
  ios::sync_with_stdio(false);
  int t;
  cin >> t;
  erat = vi(N, -1);
  facs = vi(N, 0);
  valid = vb(N, true);
  for (int i = 2; i < N; ++i) if (erat[i] == -1) {
    for (int j = i; j < N; j += i) {
      erat[j] = i;
      ++facs[j];
      if ((j / i) % i == 0) valid[j] = false;
    }
  }
  while (t--) cas();
}