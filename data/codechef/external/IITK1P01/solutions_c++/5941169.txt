#include <queue>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <algorithm>
#include <bitset>
#include <cstdlib>
#include <list>
#include <stack>
#include <deque>
#include <cmath>
#include <string>
#include <string.h>
#include <iomanip>
#include <sstream> 
#include <set> 
#include <cassert>
#include <ctype.h> 
using namespace std; 
#define rep(i,n)        for(int i = 0;  i < n ; ++i)
#define REP(i,a,b)      for(int i = a ; i <= b; ++i)
#define s(n)            scanf("%d",&n)
#define rev(i,n)        for(int i = n ; i >= 0 ; --i)
#define REV(i,a,b)      for(int i = a ; i >= b ; --i)
#define INF             1000000000 
#define pii             pair<int,int> 
#define pb(a)           push_back(a)
#define ll              long long
#define VI              vector<int> 
#define MII             map<int,int> 
#define MSI             map<string,int> 
#define VII             vector<vector<int> > 
#define VPP             vector<pair<int,int> > 
#define MOD             1000000007
#define PDD             pair<double,double>
#define VL              vector<long long>
#define pil             pair<int,long long>
#define pll             pair<long long,long long>
#define mp              make_pair
int dist[201][201] , V , w , u ,v , E , K ; 
vector<int> good(12) ; 
map<vector<int> , int> memo ; 
int dp(vector<int> mask , int turn)
{
    if(memo.find(mask) != memo.end())
    {
        return memo[mask] ; 
    }
    int taken = 0 , ans = 0 ; 
    for(int i = 0 ; i < mask.size() ; ++i)
    {
        if(mask[i] != 0)
        {
            taken++ ; 
        }
    }
    if(taken == mask.size())
    {
        vector<int> SKING , FKING ; 
        for(int i = 0 ; i < mask.size() ; ++i)
        {
            if(mask[i] == 1)
            {
                FKING.push_back(good[i]) ; 
            }
            else
            {
                SKING.push_back(good[i]) ;
            }
        }
        for(int i = 0 ; i < FKING.size() ; ++i)
        {
            for(int j = 0 ; j < SKING.size() ; ++j)
            {
                ans += dist[FKING[i]][SKING[j]] ; 
            }
        }
        if(ans >= INF)
        {
            return -1 ; 
        }
       // cout << ans << " " ;  
        return memo[mask] = ans ; 
    }
    if(turn&1)
    {
        //Second Kings turn 
        ans = INF ; 
        for(int i = 0 ; i < mask.size() ; ++i)
        {
            if(mask[i] == 0)
            {
                vector<int> send = mask ; 
                send[i] = 2 ; 
                int DP = dp(send,turn^1) ; 
                if(DP == -1)
                {
                    continue ; 
                }
                ans = min(ans,DP) ; 
            }
        }
      //  cout << ans << " " ; 
        return memo[mask] = ans ; 
    }
    else
    {
        //First king's turn ; 
        ans = 0 ; 
        for(int i = 0 ; i < mask.size() ; ++i)
        {
            if(mask[i] == 0)
            {
                vector<int> send = mask ; 
                send[i] = 1; 
                int DP = dp(send,turn^1) ; 
                if(DP == -1)
                {
                    continue ; 
                }
                ans = max(ans,DP) ; 
            }
        }
     //   cout << ans << " " ; 
        return memo[mask] = ans ; 
    }
}
int main()
{
  //  freopen("input.txt","r",stdin) ; 
    ios_base::sync_with_stdio(0) ; 
    cin >> V >> E >> K ; 
    for(int i = 0 ; i <= V ; ++i)
    {
        for(int j = 0 ; j <= V ; ++j)
        {
            dist[i][j] = INF ; 
        }
    }
    for(int i = 0 ; i < E ; ++i)
    {
        cin >> u >> v >> w ; 
        dist[u][v] = min(dist[u][v],w) ; 
        dist[v][u] = min(dist[v][u],w) ; 
    }
    for(int k = 1 ; k <= V ; ++k)
    {
        for(int i = 1 ; i <= V ; ++i)
        {
            for(int j = 1 ; j <= V ; ++j)
            {
                dist[i][j] = min(dist[i][j],dist[i][k] + dist[k][j]) ; 
            }
        }
    }
    for(int i = 0; i < K ; ++i)
    {
        cin >> good[i] ; 
    }
    vector<int> arr(K,0) ; 
    cout << dp(arr,0) << "\n" ; 
    return 0 ; 
}