#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <cstring>
#include <cassert>
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define pii pair<int,int>
using namespace std;
int vertex_count,edge_count,good_count,A[201][201];
vector <int> good_cities;
int max_dp(int);
int min_dp(int);
int MAX_DP[(1<<24)],MIN_DP[(1<<24)];
int dist(int mask)
{
  int ans=1;
  vector <int> king1,king2;
  for (int i = good_count; i < 2*good_count; i++)
  {
    if(mask & (1<<i))
    {
      king1.push_back(good_cities[i- good_count]);
    }
    else
    {
      king2.push_back(good_cities[i- good_count ]);
    }
  }
  for (int i = 0; i < king1.size(); ++i)
  {
    for (int j = 0; j < king2.size(); ++j)
    {
      ans+=A[king1[i]][king2[j]];
    }
  }
  return ans;
}
int max_dp(int mask)
{
  if(MAX_DP[mask]!=0)
    return MAX_DP[mask];
  int cities_left=0;
  int ans=-1,temp;
  for (int i = 0; i < good_count; i++)
  {
    if(mask&(1<<i))
      continue;
    cities_left++;
      //assign to king 1
    int nmask= mask|(1<<(i+ good_count));
    nmask|=(1<<i);
    // int nmask=(mask ^ (1<<i));
      temp=min_dp(nmask);
      if(temp>ans)
        ans=temp;
    
  }
  if(cities_left==0)
    ans=dist(mask);
  MAX_DP[mask]=ans;
  return ans;
}
int min_dp(int mask)
{
  if(MIN_DP[mask]!=0)
    return MIN_DP[mask];
  int cities_left=0;
  int ans=100000000,temp;
  for (int i = 0; i < good_count; i++)
  {
    if(mask&(1<<i))
      continue;
    cities_left++;
      //assign to king 2
    int nmask=(mask & ~(1<<(i+good_count)));
    nmask|=(1<<i);
    temp=max_dp(nmask);
      if(temp<ans)
        ans=temp;
    
  }
  if(cities_left==0)
    ans=dist(mask);
  MIN_DP[mask]=ans;
  return ans;
}
int main()
{
  scanf("%d %d %d",&vertex_count,&edge_count,&good_count);
  for (int i = 1; i <= vertex_count; ++i)
  {
    for (int j = 1; j <= vertex_count; ++j)
    {
      A[i][j]=100000000;
    }
  }
  int u,v,w;
  for (int i = 1; i <= edge_count; ++i)
  {
    scanf("%d %d %d",&u,&v,&w);
    A[u][v]=w;
    A[v][u]=w;
  }
  for (int k = 1; k <= vertex_count; ++k)
  {
    for (int i = 1; i <= vertex_count; ++i)
    {
      for (int j = 1; j <= vertex_count; ++j)
      {
        A[i][j]=min(A[i][j],A[i][k] + A[k][j]);
      }
    }
  }
  for (int i = 0; i < good_count; ++i)
  {
    scanf("%d",&u);
    good_cities.push_back(u);
  }
  printf("%d\n", max_dp(0)-1);
  return 0;
} 