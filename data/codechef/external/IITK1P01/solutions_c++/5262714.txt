#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define MAXV 222
#define MAXK 13
#define INFINITY 100000000

FILE *in = stdin;//fopen("f.in", "r");

int V, E, K;
int dist[MAXV][MAXV];
int p3[MAXK], goodCities[MAXK];
int dp[555555];

int getBit(int mask, int i){
	return (mask / p3[i]) % 3;
}

int setBit(int mask, int i, int v){
	return mask + v * p3[i];
}

int f(int i, int mask, bool turn){
	if(i == K){
		int result = 0;
		for(int q = 0; q < K; q++){
			for(int w = q + 1; w < K; w++){
				if(getBit(mask, q) != getBit(mask, w)){
					result += dist[goodCities[q]][goodCities[w]];
				}
			}
		}
		return result;
	}
	int &ret = dp[mask];
	if(ret != -1){
		return ret;
	}

	ret = turn ? INFINITY : 0;

	for(int q = 0; q < K; q++){
		if(!getBit(mask, q)){
			int tmp = f(i + 1, setBit(mask, q, turn + 1), !turn);
			ret = turn ? min(ret, tmp) : max(ret, tmp);
		}
	}

	return ret;
}

int main(){

	p3[0] = 1;
	for(int q = 1; q < MAXK; q++){
		p3[q] = 3 * p3[q - 1];
	}

	fscanf(in, "%d%d%d", &V, &E, &K);

	for(int q = 0; q < V; q++){
		for(int w = 0; w < V; w++){
			dist[q][w] = INFINITY;
		}
	}

	for(int q = 0; q < E; q++){
		int u, v, w;
		fscanf(in, "%d%d%d", &u, &v, &w);
		u --;
		v --;
		dist[u][v] = w;
		dist[v][u] = w;
	}

	for(int q = 0; q < K; q++){
		fscanf(in, "%d", &goodCities[q]);
		goodCities[q] --;
	}

	for(int q = 0; q < V; q++){
		for(int w = 0; w < V; w++){
			for(int e = 0; e < V; e++){
				dist[w][e] = min(dist[w][e], dist[w][q] + dist[q][e]);
			}
		}
	}

	memset(dp, -1, sizeof dp);
	int result = f(0, 0, 0);
	printf("%d\n", result);

	return 0;
}