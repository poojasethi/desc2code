//Rohit Agarwal

#include <bits/stdc++.h>

typedef long long li;

using namespace std;

#define F(i, n) for(i = 0;i < n; ++i)
#define FI(i, st, ft) for(i = st;i <= ft; ++i)
#define pb(a, b) a.push_back(b)
//#define s second
//#define f first
#define MAXN 205
#define mk make_pair
#define mod 1000000007
#define inf 1000000000000ll

#define getcx getchar_unlocked
inline void inp( li &n )//fast input function
{
n=0;
li ch=getcx();li sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
n=n*sign;
}

li dist[MAXN][MAXN];
li graph[MAXN][MAXN];
li V, e, k;
vector <li> good;

map <pair<li, li>, li> mp;

//code starts 
void floydWarshell ()
{
    li i, j, k;
 
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
            
    for (k = 0; k < V; k++)
    {
        for (i = 0; i < V; i++)
        {
            for (j = 0; j < V; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
}

void print()
{
	li i, j;
	F(i, V){
		F(j, V){
			cout << dist[i][j] << " ";
		}
		cout << "\n";
	}
}

li calc(li m1)
{
	vector <li> p1, p2;
	
	li i, j, tt = 0;
	li n = good.size();
	F(i, n){
		if((1 << i) & m1){
			pb(p1, good[i]);
		}
		else{
			pb(p2, good[i]);
		}
	}
	
	F(i, p1.size()){
		F(j, p2.size()){
			tt += dist[p1[i]][p2[j]];
		}
	}
	
//	cout << tt << " ";
	
	return tt;
}
li rec(li i, li turn, li mask, li m1, li m2)
{
	if(i == good.size()){
		return calc(m1);
	}
	li j;
	
	pair<li, li> p = make_pair(m1, m2);
	
	if(mp[p]) return mp[p];
	
	li ans;
	
	if(turn % 2 == 0){
		li n = good.size();
		ans = 0;
		F(j, n){
			if(!((1 << j) & mask)){
				ans = max(ans, rec(i + 1, turn + 1, mask | (1 << j), m1 | (1 << j), m2));
			}
		}
	}
	else{
		li n = good.size();
		ans = inf;
		F(j, n){
			if(!((1 << j) & mask)){
				ans = min(ans, rec(i + 1, turn + 1, mask | (1 << j), m1, m2 | (1 << j)));
			}
		}
	}
	
	mp[p] = ans;

	return ans;
	
}

int main()
{
	
//	freopen("input.txt", "r", stdin);
	
	li i, j, t1, t2, w;
	cin >> V >> e >> k;
	F(i, V) F(j, V) {
		graph[i][j] = inf;
	}
	F(i, e){
		cin >> t1 >> t2 >> w;
		--t1; --t2;
		graph[t1][t2] = w;
		graph[t2][t1] = w;
	}
	
	F(i, k){
		li temp;
		cin >> temp;
		--temp;
		pb(good, temp);
	}
	
	floydWarshell();
	
//	print();
		
	cout << rec(0, 0, 0, 0, 0);
	
	return 0;
}

