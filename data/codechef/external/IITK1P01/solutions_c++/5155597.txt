
//~        Author : Sarvesh Mahajan                             
//               IIIT,Hyderabad                                   
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define For(i,a,b) for(i=a;i<b;i++)
#define loop(i,b) for(i=0;i<b;i++)
#define Loop(i,b) for(i=1;i<=b;i++)
#define pi(n) printf("%d ",n)
#define si(n) scanf("%d",&n)
const int MOD=1e9+7;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;
#define F first
#define S second
#define sz size
#define pLL(x) cout<<x<<' '
#define fill(x,c) memset(x,c,sizeof(x))
#define DB(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DB2(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DB3(x, y, z)       cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl
const int inf=1e9;
int n,m,k;
VI g[300];
int good[20];
int we[300][300];
int dist[300][300];
int dp[(1<<12)+5][(1<<12)+5][2];
void input()
{
	int i,x,y,w,j;

	si(n);
	si(m);
	si(k);
	Loop(i,n)
		Loop(j,n)
		we[i][j]=inf;
	loop(i,m)
	{
		si(x);
		si(y);
		g[x].pb(y);
		g[y].pb(x);
		si(w);
		we[x][y]=we[y][x]=w;
	}

	loop(i,k)
		si(good[i]);
}


int calc(int set1,int set2)
{
	int res=0;

	int i,j;
//	loop(i,k)
//	pi(set1&(1<<i));
	loop(i,k)
	{
		if((set1&(1<<i)))
		{
			loop(j,k)
			{
				if((set2&(1<<j)))
				{res+=dist[good[i]][good[j]];
	//			DB(res)
	//			DB2(good[i],good[j])
				}
			}
		}
	}
	return res;
}

void floyd()
{
	int i,j,be;
	Loop(i,n)
		Loop(j,n)
		{
		dist[i][j]=we[i][j];
		if(i == j)
			dist[i][j]=0;
		}

	Loop(be,n)
	{
		Loop(i,n)
		{
			Loop(j,n)
			{
				if(dist[i][be]+dist[be][j]<dist[i][j])
					dist[i][j]=dist[i][be]+dist[be][j];
			}
		}
	}
	/*Loop(i,n)
	{
		Loop(j,n)
			pi(dist[i][j]);
		puts("");
	}
	Loop(i,n)
	{
		loop(j,n)
			pi(we[i][j]);
		puts("");
	}*/
}


int solve(int set1,int set2,bool p)
{
	int res,i;
	int val1=__builtin_popcount(set1);
	int val2=__builtin_popcount(set2);
	
	if(val1+val2 == k)
	{
		res=calc(set1,set2);
		return (dp[set1][set2][p]=res);
	}

	if(dp[set1][set2][p]!=-1)
		return dp[set1][set2][p];


	if(p == 0)
	{
		res=0;
/*		loop(i,k)
			pi(set1&(1<<i));
		loop(i,k)
			pi(set2&(1<<i));*/
		loop(i,k)
			if((set1&(1<<i)) == 0)		
			if((set2&(1<<i)) == 0)
			{

				res=max(res,solve(set1|(1<<i),set2,1));
			}
			
			
		
	}
	else
	{
		res=inf;
		loop(i,k)
		{
			if(((set1&(1<<i)) == 0) && ((set2&(1<<i))==0))
				res=min(res,solve(set1,set2|(1<<i),0));
		}
	}

	return (dp[set1][set2][p]=res);
}




int main()
{
//ios_base::sync_with_stdio(false);
int t,l,k,ans,i,j,res=0,fl;
t=1;
//si(t);
while(t--)
{
	input();
	floyd();
	memset(dp,-1,sizeof(dp));
	int res=solve(0,0,0);
	pi(res);
	puts("");


}
return 0;
}
