#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
typedef long double ld;

int toInt(const vector<int> & v) {
	int res = 0;
	for (int i = v.size()-1; i >= 0; --i) {
		res *= 3;
		res += v[i];
	}
	return res;
}

void toVec(int bm, vector<int>* v) {
	for (int i = 0; i < v->size(); ++i) {
		(*v)[i] = bm%3;
		bm/=3;
	}
}


int v, e, k;
int MX_BM;
int mat[210][210];
int good[20];
#define MX 540000

int dp[MX];
bool vis[MX];

int getD(int bm, const vector<int> &vec) {
	int v = 0;
	vector<int> left, right;
	for (int i = 0; i < vec.size(); ++i) {
		if (vec[i] == 1)
			left.push_back(i);
		else
			right.push_back(i);
	}
	for (int i = 0; i < left.size(); ++i) {
		for (int j = 0; j < right.size(); ++j) {
			v += mat[good[left[i]]][good[right[j]]];
		}
	}
	return v;
}

int getBest(int bm, int p) {
//	cout << bm << " " << p << endl;
	if (vis[bm])
		return dp[bm];
	vector<int> type(k);
	toVec(bm, &type);
	bool hasZero = false;
	for (int i = 0; i < k; ++i) {
		if (type[i] == 0) {
			hasZero = true;
			break;
		}
	}
	if (!hasZero) {
		vis[bm] = true;
		 dp[bm] = getD(bm, type);
//		 cout << "res = " << dp[bm] << endl;
		 return dp[bm];
	}
	int best = (p == 1)? -1e9 : 1e9;
	for (int i = 0; i < k; ++i) {
		if (type[i] == 0) {
			type[i] = p;
			if(p == 1) {
				best = max(best, getBest(toInt(type), 3-p));
			} else {
				best = min(best, getBest(toInt(type), 3-p));
			}
			type[i] = 0;
		}
	}
	vis[bm] = true;
	return dp[bm] = best;
}


int main() {
#ifndef ONLINE_JUDGE
    freopen("1.in", "rt", stdin);
    //freopen("1.out","wt",stdout);
#endif
    cin >> v >> e >> k;
    for (int i = 0; i < v; ++i) {
		for (int j = 0; j < v; ++j) {
			if (i == j)
				mat[i][j] = 0;
			else
				mat[i][j] = 1e9;
		}
	}
    for (int i = 0; i < e; ++i) {
		int a, b, c;
		cin >> a >> b >> c;
		--a;--b;
		mat[a][b] = mat[b][a] = c;
	}
    for (int i = 0; i < k; ++i) {
		cin >> good[i];
		good[i]--;
	}
    for (int k = 0; k < v; ++k) {
		for (int i = 0; i < v; ++i) {
			for (int j = 0; j < v; ++j) {
				if( mat[i][k] + mat[k][j] < mat[i][j])
					mat[i][j] =mat[i][k] + mat[k][j];
			}
		}
	}
    memset(vis, 0, sizeof vis);
    cout << getBest(0, 1) << endl;
    return 0;
}
