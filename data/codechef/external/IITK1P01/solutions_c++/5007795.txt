#include <bits/stdc++.h>
typedef long long int ll;
using namespace std;
#define N 200
int dis[N + 10][N + 10];
int good[20],K,ar[20];
int dp[531441];
int Memo(int);
int calc(int temp)
{
    int i,j;
    for(i = 1 ; i<=K ; i++)
    {
        ar[i] = temp%3;
        temp = temp/3;
    }
    int sum = 0;
    for(i = 1 ; i<=K ; i++)
    {
        for(j = i+1 ; j<=K ; j++)
        {
            if(ar[i] != ar[j])
            {
                sum = sum + dis[good[i]][good[j]];
            }
        }
    }
    return sum;
}
void PerformTest(int);
int main()
{
    int tc,t;
    tc = 1;
    for(t = 1 ; t<=tc ; t++)
    {
        PerformTest(t);
    }
    return 0;
}
void PerformTest(int TestCase)
{
    int i,n,e,j,k;
    cin>>n>>e>>K;
    memset(dp,-1,sizeof(dp));
    for(i = 1 ; i<=n ; i++)
    for(j = 1 ; j<=n ; j++)
    dis[i][j] = pow(10,5);
    for(i = 1 ; i<=e ; i++)
    {
        int u,v,w;
        scanf("%d %d %d",&u,&v,&w);
        dis[u][v] = min(dis[u][v],w);
        dis[v][u] = dis[u][v];
    }
    for(i = 1 ; i<=n ; i++)
    for(j = 1 ; j<=n ; j++)
    for(k = 1 ; k<=n ; k++)
    {
        dis[j][k] = min(dis[j][k],dis[j][i] + dis[i][k]);
    }
    for(k = 1 ; k<=K ; k++)
    {
        cin>>good[k];
    }
    int ans = Memo(0);
    cout<<ans<<endl;
}
int Memo(int st)
{
    int f = 0;
    int temp = st;
    while(temp > 0)
    {
        if(temp%3 != 0) f++;
        temp = temp/3;
    }
    if(f == K)
    {
        dp[st] = calc(st);
        return dp[st];
    }
    if(dp[st] != -1) return dp[st];
    if(f%2 == 1)
    {
        int mn = pow(10,9);
        temp = st;
        for(int i = 0 ; i<K ; i++)
        {
            if(temp%3 == 0)
            {
                mn = min(mn,Memo(st+2*pow(3,i)));
            }
            temp = temp/3;
        }
        dp[st] = mn;
    }
    else
    {
        int mx = 0;
        temp = st;
        for(int i = 0 ; i<K ; i++)
        {
            if(temp%3 == 0)
            {
                mx = max(mx,Memo(st + pow(3,i)));
            }
            temp = temp/3;
        }
        dp[st] = mx;
    }
    return dp[st];
}
