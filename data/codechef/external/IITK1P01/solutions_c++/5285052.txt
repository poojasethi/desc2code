#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<vector>
using namespace std ;

const int oops = 2e8;
const int MAXN = 200;
const int MAXK = 12;

#define STILL 0
#define FIRST 1
#define SECOND 2


int best[532000];
int cost[MAXN+5][MAXN+5];
vector<int> good;
int n,m,K;


void fillColors(int mask, int* color) {
    for (int i=0;i<K;i++) {
        color[i] = mask % 3;
        mask /= 3;
    }
}

int extractMask(int* color) {
    int ret = 0;
    for (int i=0;i<K;i++) {
        ret = ret * 3 + color[i];
    }
    return ret;
}


int evaluate(int mask) {
    int color[K];
    fillColors(mask, color);
    int ret = 0;
    for (int i=0;i<K;i++)
        for (int j=i+1;j<K;j++)
            if (color[i] != color[j])
                ret += cost[good[i]][good[j]];
    return ret;
}

int solve(int mask, bool maximize, int taken) {
    if (taken == K) {
        return evaluate(mask);
    }
    int& ret = best[mask];
    if (~ret) return ret;
    int color[K];
    fillColors(mask, color);
    ret = 0;
    if (!maximize)
        ret = oops;
    for (int c=0;c<K;c++)
        if (color[c] == STILL) {
            color[c] = 2 - maximize;
            if (maximize)
                ret = max(ret, solve(extractMask(color), !maximize, taken + 1));
            else ret = min(ret, solve(extractMask(color), !maximize, taken + 1));
            color[c] = STILL;
        }
    return ret;
}

void warshall() {
    for (int k=0;k<n;k++)
        for (int i=0;i<n;i++)
            for (int j=0;j<n;j++)
                cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j]);
}

int main() {
    //freopen("kings.in","r",stdin);
    int c,c2;
    memset(cost,1,sizeof(cost));
    scanf("%d%d%d",&n,&m,&K);
    for (c=0;c<m;c++) {
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        u--;v--;
        cost[u][v] = min(cost[u][v], w);
        cost[v][u] = min(cost[v][u], w);
    }
    for (c=0;c<n;c++)
        cost[c][c] = 0;
    good.resize(K);
    for (c=0;c<K;c++) {
        scanf("%d",&good[c]);
        good[c]--;
    }
    warshall();
    memset(best, -1, sizeof(best));
    int ret = solve(0, true, 0);
    printf("%d\n",ret);
    return 0;
}
