#include<bits/stdc++.h>

using namespace std;

int v , e , k;
int graph[210][210];
//int dp[(1<<12)][(1<<12)];
map <pair<int,int> , int > dp;
vector <int> good;



void print(int x)
{
	for(int i = 0 ;i < 12 ; i++)
		if((1<<i) & x)
		{
			cout <<"1" ;
		}else
			cout << "0";
		
}

int solve(int mask1 , int mask2)
{

	if(dp.count(make_pair(mask1,mask2)))
    {
        return dp[make_pair(mask1,mask2)];
    }
    if(__builtin_popcount(mask1) + __builtin_popcount(mask2) == k)
    {
        int cnt = 0;
        for(int i = 0 ; i < k ; i++)
        {
        
            if((1<<i) & mask1)
            {
                for(int j = 0 ; j < k ; j++)
                {                	 
                    if((1<<j)&mask2)
                    {
                      cnt += graph[good[i]][good[j]];
                    }
                }
            }
        }
        
        return dp[make_pair(mask1,mask2)]= cnt;
    }


    int bits = __builtin_popcount(mask1) + __builtin_popcount(mask2);
    int out = 0;
    if(bits%2 == 0)
    {
        for(int i = 0 ; i < k ; i++)
        {
            if(!(((1<<i)&mask1)) &&(!((1<<i)&mask2)))
            {
  				
                    out = max(out,solve(mask1|(1<<i),mask2));             
            }
        }
    }else
    {
    	out = 2e9;
        for(int i = 0 ; i < k ; i++)
        {
            if(!(((1<<i)&mask1)) &&(!((1<<i)&mask2)))
            {
                out = min(out,solve(mask1,mask2|(1<<i)));
            }
        }
    }
   
    return dp[make_pair(mask1,mask2)] = out;
}

int main()
{

	
    cin >> v >> e >> k;
  //  memset(dp,-1,sizeof dp);
    for(int i = 0 ; i < v ;i++)
        for(int j = 0 ; j < v ; j++)
            graph[i][j] = (int)1e7;
    for (int i = 0 ; i <  e ; i++)
    {
        int one , two , w;
        cin >> one >> two >> w;
        one--;two--;
        graph[one][two] = graph[two][one] = w;
    }
    for(int i = 0 ; i < v ; i++)
    {
        int node;
        cin >> node;
        node--;
        good.push_back(node);
    }

    for(int k = 0 ; k < v ; k++)
        for(int i = 0 ; i < v ; i++)
            for(int j = 0 ; j < v ; j++)
                graph[i][j] = min(graph[i][j] , graph[i][k] + graph[k][j]);

     cout << solve(0,0)<< endl;
    return 0;
}