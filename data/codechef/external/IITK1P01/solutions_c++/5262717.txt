#include<bits/stdc++.h>

using namespace std;

int v , e , k;
int graph[210][210];
int dp[555555];
//map <pair<int,int> , int > dp;
vector <int> good;
int p3[12];
void calculatePower()
{
	int val = 1;
	for(int i = 0 ; i < 12 ; i++)
	{
		p3[i] = val;
		val *= 3;
	}
}

int getbit(int x , int i)
{
	x /= p3[i];
	return (x%3);
}

int setbit(int i , int mask , int val)
{
	mask -= getbit(mask,i);
	mask += val*p3[i];
	return mask;
}

int solve(int mask , int play)
{

	if(dp[mask] != -1)
    {
        return dp[mask];
    }
    if(play == k)
    {
        int cnt = 0;
        for(int i = 0 ; i < k ; i++)
        {
        
            if(getbit(mask,i) == 1)
            {
                for(int j = 0 ; j < k ; j++)
                {                	 
                    if(getbit(mask,j) == 2)
                    {
                      cnt += graph[good[i]][good[j]];
                    }
                }
            }
        }
        
        return dp[mask]= cnt;
    }


    int out = 0;
    if(play%2 == 0)
    {
        for(int i = 0 ; i < k ; i++)
        {
            if(getbit(mask,i) == 0)
            {
  				out = max(out,solve(setbit(i,mask,1),play + 1));             
            }
        }
    }else
    {
    	out = 2e9;
        for(int i = 0 ; i < k ; i++)
        {
           if(getbit(mask,i) == 0)
            {
  				out = min(out,solve(setbit(i,mask,2),play + 1));             
            }
        }
    }
   
    return dp[mask] = out;
}

int main()
{

	
    cin >> v >> e >> k;
    calculatePower();
  //  memset(dp,-1,sizeof dp);
    for(int i = 0 ; i < v ;i++)
        for(int j = 0 ; j < v ; j++)
            graph[i][j] = (int)1e7;
    memset(dp,-1,sizeof dp);
    for (int i = 0 ; i <  e ; i++)
    {
        int one , two , w;
        cin >> one >> two >> w;
        one--;two--;
        graph[one][two] = graph[two][one] = w;
    }
    for(int i = 0 ; i < v ; i++)
    {
        int node;
        cin >> node;
        node--;
        good.push_back(node);
    }

    for(int k = 0 ; k < v ; k++)
        for(int i = 0 ; i < v ; i++)
            for(int j = 0 ; j < v ; j++)
                graph[i][j] = min(graph[i][j] , graph[i][k] + graph[k][j]);

     cout << solve(0,0)<< endl;
    return 0;
}