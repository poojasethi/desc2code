
/**Big Penis is willing to climb up a hill. The hill is divided into several checkpoints where the travelers can buy water,food etc for their trip.
At each checkpoint there are several roads that go up to other checkpoints (Not necessarily the next checkpoint).
Now Big P is standing at the base of the hill i.e at checkpoint 1 and wants to know the total number of ways he could climb to the top of the hill i.e the last checkpoint N..
Input

First line contains an integer N,the total number of checkpoints on the hill. Next lines contain a pair of integers (x,y) denoting a directed path from checkpoint x to checkpoint y until a - (0 0) is in the input.
Note: Base of Hill , where Big P is standing is Checkpoint #1 and the top of the hill is Checkpoint #N.
Output

A single integer X , denoting the total number of paths from the base of the hill to it's top.
Constraints

1 ≤ N ≤ 10000
1 ≤ x, y ≤ N

Example

Input:
4
1 2
1 4
2 3
2 4
3 4
0 0

Output:
3
 */
import java.util.*;
class BIGP
{
    static Map<Integer,ArrayList<Integer>>map=new HashMap<Integer,ArrayList<Integer>>();
    static int[]visited=new int[10001];
    static int N;
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        N=sc.nextInt();
        Arrays.fill(visited,-1);
        int x=1,y=1;
        boolean flag=false;
        int counter=0;
        while(x!=0&&y!=0)
        {
            x=sc.nextInt();y=sc.nextInt();
            counter++;
            if(x==0&&y==0)
            {
                break;
            }
            if(map.containsKey(x))
            {
                map.get(x).add(y);
            }
            else
            {
                map.put(x,new ArrayList<Integer>());
                map.get(x).add(y);
            } 
        }
        if(counter>1)
        System.out.println(ways(1));
        else
        System.out.println("0");
    }
    static int ways(int x)
    {
        if(x==N)
            return 1;
        if(visited[x]==-1)
        {
            int f=0;
            int t=map.get(x).size();
            for(int i=0; i<t; i++)
            {
                f+=ways(map.get(x).get(i));
            }
            visited[x]=f;
        }
        return visited[x];
    }
    // Visit a node : Visit the node it is connected to : Keep on doing this till you reach a leaf node or a node which you have visited earlier . Than backtrack // yeah i get this 
    // what is f? 
    // Thats whats confusing me
    // f is number of ways to reach DESTINATION N from a Node X
}