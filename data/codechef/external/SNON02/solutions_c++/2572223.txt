#include<cstdio>

#define gc  getchar_unlocked
#define MAX 1000000

using namespace std;

long long int phi[MAX + 9];
long long int sum[MAX + 9];

inline void scanint(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(; ((c<48 || c>57) && c != '-'); c = gc());
    if(c=='-')
    {
        neg = 1;
        c = gc();
    }
    for(; c>47 && c<58 ; c = gc())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
    if(neg)
        x = -x;
}


int main()
{
    int i, j, n, t;
    //Sieve of Eratosthenes like procedure to find phi(i)
    for(i = 1; i <= MAX; i++)
        phi[i] = i;
    //here for i not prime
    for(i = 2; i <= MAX; i++)
        if(phi[i] == i)
            for(j = i*2; j <= MAX; j += i)
                phi[j] = phi[j] - phi[j]/i;

    //for prime i
    for(i = 2; i <= MAX; i++)
        if(phi[i] == i)
            phi[i] = i - 1;

    //finding sum over k(k|n) k*phi(k)
    for(i = 1; i <= MAX; i++)
        for(j = i; j <= MAX; j += i)
            sum[j] += i * phi[i];

    scanf("%d", &t);
    while(t--)
    {
//        scanf("%d", &n);
        scanint(n);
        //final formula used summation i = 1 to n LCM(i, n) = n*(summation k = 1 to n and k|n {k * phi(k)})/2
        printf("%lld\n", n*(sum[n] + 1)/2);
    }
    return 0;
}
