#include <cassert>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
 
 
size_t N;
char s[20][32];
size_t ss[20];
// best string
size_t bs;
char b[20*20+1];
 
 
#include <sys/time.h>
class time_limit
{
public:
	time_limit(double dt_limit): _tv0(), _dt_limit(dt_limit)
	{
		gettimeofday(&_tv0, 0);
	}
	bool operator() ()
	{
		timeval tv1;
		gettimeofday(&tv1, 0);
		double dt=tv1.tv_sec-_tv0.tv_sec+ 1e-6*(tv1.tv_usec-_tv0.tv_usec);
		return dt<_dt_limit;
	}
 
private:
	timeval _tv0;
	double _dt_limit;
};
 
 
void rec(size_t n=0, size_t cs=0)
{
	// current string
	static char c[20*20+1];
	static bool used[20]={};
 
	if(n==0)
	{
		for(size_t k=0; k<N; ++k)
		{
			std::copy(s[k], s[k]+ss[k], c);
			used[k]=1;
			rec(1, ss[k]);
			used[k]=0;
		}
	}
	else if(n<N)
	{
		for(size_t k=0; k<N; ++k)
			if(!used[k])
			{
				used[k]=1;
				// s[k] is a substring of c
				if(std::search(c, c+cs, s[k], s[k]+ss[k])!=c+cs)
					rec(n+1, cs);
				for(size_t j= cs<ss[k]?0:cs+1-ss[k]; j<cs; ++j)
					if(std::equal(c+j, c+cs, s[k]))
					{
						std::copy(s[k]+cs-j, s[k]+ss[k], c+cs);
						rec(n+1, j+ss[k]);
					}
				used[k]=0;
			}
	}
	else
	{
		if(bs==0 || cs<bs)
		{
			std::copy(c, c+cs, b);
			bs=cs;
			b[bs]=0;
			//std::cout << bs << " " << b << std::endl;
		}
	}
}
 
 
int main()
{
	size_t T=1;
	//scanf("%zu", &T);
	//assert(1<=T && T<=20);
	/*char c;
	for(size_t i=0; i<2; ++i)
		scanf("%c", &c);
	scanf("%c", &c);
	time_limit go(0.3*(int(c)/10));
	while(go());
	std::cout << int(c) << std::endl;
	return 0;*/
 
	for(size_t t=0;; ++t)
	{
		N=0;
		scanf("%zu", &N);
		if(N==0)
			break;
		assert(1<=N && N<=20);
		for(size_t n=0; n<N; ++n)
		{
			scanf("%s", s[n]);
			ss[n]=strlen(s[n]);
			assert(2<=ss[n] && ss[n]<=20);
		}
		bs=0;
		rec();
		b[bs]=0;
		printf("%s\n", b);
	}
	return 0;
}
 
 
/*
 
3\nATGC
 
*/
 