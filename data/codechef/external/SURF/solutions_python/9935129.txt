/*******************************************************************************
IF YOU ARE LOOKING THIS YOU ARE RIGHT WAY
*******************************************************************************/
#include<stdio.h>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<map>
#include<string>
#include<cmath>
#include<cstring>
#include<stdlib.h>
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
#define MAX 800005
typedef pair<int,int> p;
typedef pair<int,p> pii;
#define fi first
#define se second
#define pb push_back
#define s(a) scanf("%d",&a);
#define mem(a) memset(a,0,sizeof(0))
#define MOD 1000000007
vector<int> v;

int fact[MAX+1];
int ifact[MAX+1];

long long mymod(long long a)
{
	if(a < MOD)
		return a;
	return a % MOD;
}

long long pow1(long long a,long long t)
{
//	printf("t : %d\n",t);
	if(t==0)
		return 1;
	if(t == 1)
		return a;
	long long ti = pow1(a,t/2);
	ti *= ti;
	ti = mymod(ti);
	if(t%2)
	{
		ti *= a;
		return mymod(ti);
	}
	return ti;
}

long long fastmod(long long a,long long m)
{
	if(a < m)
		return a;
	return (a+m) % m;
}


long long powmod(long long a, long long b, long long m)
{
	if(b == 0)
		return 1 % m;
	long long prod = 1;
	long long s = a;
	while(b)
	{
		if(b & 1)
			prod = fastmod(prod * s, m);
		b>>=1;
		s = fastmod(s * s, m);
	}
	return prod;
}


long long inv(long long a)
{
	return powmod(a,MOD-2,MOD);
//	return pow1(a,MOD-2);
}

void init()
{
	fact[0] = 1;
	ifact[0] = 1;
	
	for(int i = 1 ; i <= MAX ; i++)
	{
//		printf("i %d\n",i);
		fact[i] = mymod(((long long)i)*fact[i-1]);
		
	}
	for(int i = 1 ; i <= MAX ; i++)
		ifact[i] = mymod(inv(i) * ifact[i-1]);
	
//	printf("done\n");
}

int choose(int n,int k)
{
	int t = fact[n];
	t = mymod(1LL * t * ifact[k]);
//	t = mymod(t);
	t = mymod(1LL * t * ifact[n-k]);
	return t;
}

int main()
{
	int T;
	scanf("%d",&T);
//	T = 1;
	init();
//	printf("%lld\n",fact[5]);
	while(T--)
	{
		int P,Q,R,S;
		scanf("%d%d%d%d",&P,&Q,&R,&S);
		int L = P - R;
		int B = Q - S;
		long long ans = 0;
		int n1 = R + L + B - 1;
		int d1 = R + L;
		int n2 = S;
		int d2 = S;
		
		for(int i = 1 ; i <= L ; i++)
		{
			long long temp = 1;
			temp = choose(n1,d1);
			temp *= choose(n2,d2);
			temp %= MOD;
			n1--;
			d1--;
			n2++;
			ans += temp;
			ans = mymod(ans);
		}
		n1 = R + B;
		d1 = R;
		n2 = L+S;
		d2 = S;
		long long temp = choose(n1,d1);
		temp *= choose(n2,d2);
		temp %= MOD;
//		printf("%lld",temp);
		ans += temp;
		ans = mymod(ans);
		printf("%d\n",ans);
	}
	return 0;
}