//O(ElogV)
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
const ll MAX = 2000000;
ll id[MAX],indeg[MAX],res[MAX],subtree[MAX];
vector < pair < ll, pair<ll,ll> > > v;
vector <pair<ll,ll> > vec;
vector <ll> adj[MAX];

ll Func(ll node, ll par)
{
    res[node]=0; //res stores the no. of paths through node for which the starting and ending nodes are a part of the subtree of node
    subtree[node]=0; // size of subtree of node
    
    ll i,new_cnt;
    for(i=0;i<adj[node].size();i++)
    {
        if(adj[node][i]==par)
            continue;
        new_cnt=Func(adj[node][i],node); //new_cnt stores the size of the subtree of adj[node][i]  including adj[node][i] itself
        res[node]+=subtree[node]*new_cnt;//new paths which include node as intermediate node = no. of nodes in subtree of node found till now 
        //multiplied by new no. of nodes of it subtree found(stored in new cnt)
        subtree[node]+=new_cnt;
    }
    return subtree[node]+1;
}


void initialize()
{
    for(ll i = 0;i < MAX;++i)
        id[i] = i;
    v.clear();
    vec.clear();
}

ll root(ll x)
{
    while(id[x] != x)
    {
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
}

void union1(ll x, ll y)
{
    ll p = root(x);
    ll q = root(y);
    id[p] = id[q];
}

long long kruskal()
{
    ll x, y;
    long long cost, minCost = 0;
    for(ll i = 0;i <v.size();++i)
    {
        // Selecting edges one by one in increasing order from the beginning
        x = v[i].second.first;
        y = v[i].second.second;
        cost = v[i].first;
        // Check if the selected edge is creating a cycle or not
        if(root(x) != root(y))
        {
            minCost += cost;
            union1(x, y);
            adj[x].push_back(y);
            adj[y].push_back(x);
        }    
    }
    return minCost;
}

bool comp(const pair< ll, pair < ll,ll > > &a, const pair< ll, pair < ll,ll > > &b)
{
    return a.first<b.first;
}

bool comp1(const pair<ll,ll> &a, const pair<ll,ll> &b)
{
    if(a.second!=b.second)
    
        return(a.second>b.second);
            
    
    
    return(a.first<b.first);
}

int main()
{
    ll x, y,t,i,weight, cost, minCost,n,r;
    //cin>>n>>r;
    scanf("%lld %lld",&n,&r);
    initialize();
    
    for(i = 0;i <r;++i)
    {
        //cin >> x >> y >> weight;
        scanf("%lld %lld %lld",&x,&y,&weight);
        v.push_back(make_pair(weight,make_pair(x,y)));
    }
    sort(v.begin(),v.end(),comp);
    minCost = kruskal();
    
    Func(1,-1); //Returns the no. of nodes in the subtree of 1
    
    for(i=1;i<=n;i++)
    {
      res[i]+=subtree[i]*(n-1-subtree[i]); //paths in which i is the intermediate node and the starting node lies in upper tree of i and ending in the subtree of i
      vec.push_back(make_pair(i,res[i]));
    }
    
    
    sort(vec.begin(),vec.end(),comp1);
    
    for(i=0;i<vec.size();i++)
        //cout<<vec[i].first<<"\n";
    printf("%lld\n",vec[i].first);
    
    return 0;
}