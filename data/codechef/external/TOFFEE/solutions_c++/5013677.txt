    #include <iostream>
    #include <math.h>
    #include <algorithm>
    #include <vector>
    #define rep(i,s,n) for (long int i = s;i < n;i++)
    #define ll long long
    #define size 1000005
    using namespace std;
    vector<ll>inp;
    vector<ll>tree;
    ll build(ll start,ll end,ll index){
    if(start == end){
    tree[index] = inp[start];
    return tree[index];
    }
    else
    {tree[index] = min(build(start, (start+end)/2, index*2+1),build((start+end)/2 + 1, end, 2*index + 2));
    return tree[index];
    }
    }
    ll query(ll start,ll end,ll index,ll s, ll e){
    if(start > e || end < s)
    return 1e9 + 7;
    else if(start>=s && end <=e)
    return tree[index];
    else
    return min(query(start, (start+end)/2, 2*index + 1, s, e),query((start+end)/2+1, end, 2*index+2, s, e));
    }
    int main()
    {
    ll n,q,range1,range2;
    cin >> n >> q;
    inp.resize(n+2);
    tree.resize(size*4);
    rep(i,1,n+1)
    cin >> inp[i];
    build(1,n,0);
    rep(i,0,q){
    cin >> range1 >> range2;
    cout << query(1, n, 0, range1,range2) << endl;
    }
    return 0;
    } 