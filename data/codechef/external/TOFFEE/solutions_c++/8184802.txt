#include <iostream>
using namespace std;
void merge(int z[], int startIndex, int endIndex, int x[])
{
 
int size = (endIndex - startIndex) + 1;
int d[size];
int m[size];
 
int i = startIndex;
int mid = (startIndex + endIndex)/2;
int k = 0;
int j = mid + 1;
 
while (k < size)
{   
    if(((i<=mid) && (z[i] < z[j]))||j==endIndex+1)
    {
        d[k] = z[i];
        m[k++] = x[i++];
    }
    else
    {
        d[k] = z[j];
        m[k++] = x[j++];
    }
 
}
 
for(k=0; k < size; k++)
{
    z[startIndex+k] = d[k];
    x[startIndex+k] = m[k];
}
 
 
}
void merge_sort(int iArray[], int startIndex, int endIndex, int x[])
{
int midIndex;
 
//Check for base case
if (startIndex >= endIndex)
{
    return;
}   
 
//First, divide in half
midIndex = (startIndex + endIndex)/2;
 
//First recursive call 
merge_sort(iArray, startIndex, midIndex, x);
 
//Second recursive call 
merge_sort(iArray, midIndex+1, endIndex, x);
 
//The merge function
merge(iArray, startIndex, endIndex, x);
 
}
int a[1000000],b[1000000],c[1000000];
int main() {
   ios::sync_with_stdio(0);
	int i,j,N,Q,x,y;
	cin>>N>>Q;
	for(i=0;i<N;i++){
      cin>>a[i];
      c[i]=a[i];
      b[i]=i;
	}
	merge_sort(a,0,N-1,b);
	for(i=1;i<=Q;i++){
      cin>>x>>y;
      if(x==y)
        cout<<c[x-1]<<endl;
      else{
      for(j=0;j<N;j++){
         if(b[j]>=x-1 && b[j]<=y-1){
            cout<<a[j]<<endl;
            break;
         }
      }
      }
	}
	return 0;
}
