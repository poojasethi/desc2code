// Segment Tree
// Pheonix

#include <stdio.h>
#include <math.h>
#define L int
#define LL long long int
#define Size 1000005
LL a[Size] = {0} , M[4*Size] = {0} ;
LL Segment(L node , L start , L end , L n ) // Segment tree
{
	if(start == end)
	M[node] = start ;
	else 
	{
		Segment(2 * node + 1 , start , ( start + end )/2 , n ) ;
		Segment(2 * node + 2 , (start + end)/2 + 1 , end , n ) ;
		if(a[M[2 * node + 1]] < a[M[2 * node + 2]])
				M[node] = M[2 * node + 1] ;
		else
				M[node] = M[2 * node + 2] ;
	}
}
int RMQ( L node , L start , L end , L s , L e ) // Range Minimum Query
{
		if(s<=start && e>=end)
			return M[node] ;
		else if(s>end || e<start)
        	return -1;
		int q1 = RMQ( 2 * node + 1 , start , ( start + end )/2 , s , e );
		int q2 = RMQ( 2 * node + 2 , ( start + end )/2 +1 , end , s , e );

		if(q1 == -1) return q2 ;
		else if(q2 == -1 ) return q1 ;
		if(a[q1] < a[q2]) return q1 ;
		 return q2 ;
}
int main()
{
	LL n , q , i ;
	scanf("%lld %lld",&n,&q);
	for( i = 0 ; i<=n-1 ;++i)
	scanf("%lld",&a[i]) ;
	
	Segment(0,0,n-1,n) ; 
	// Queries 
	while(q--)
	{
	   LL x , y ;
	   scanf("%lld %lld",&x,&y) ;
	   printf("%lld\n",a[RMQ(0,0,n-1,x-1,y-1)]);
	}
	return 0 ;
}