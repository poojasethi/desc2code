/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.*;
import java.util.*;
/**
 *
 * @author Rohan
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    static double[] ans=new double[10010];
    static double[] ans1=new double[10010];
    static magnet[] arr=new magnet[10010];
    public static void main(String[] args) {
        // TODO code application logic here
        input();
    }
    
    public static void input(){
        for(int i=0;i<10010;i++) arr[i]=new magnet(0,0);
        InputReader in=new InputReader(System.in);
        PrintWriter out=new PrintWriter(System.out);
        int t=in.readInt();
        while(t-->0){
            int n=in.readInt(); double a=in.readInt(),d=in.readInt();
            for(int i=0;i<n;i++) arr[i].init(in.readInt(),in.readInt());
            ans1[0]=ans[0]=solve(a,d,arr[0].v)+arr[0].t;
            for(int i=1;i<n;i++){
                ans1[i]=solve(a,d,arr[i].v)+arr[i].t;
                if(ans1[i]<=ans[i-1] || Math.abs(ans1[i]-ans[i-1])<(double)1e-6) ans[i]=ans[i-1];
                else ans[i]=ans1[i];
            }
            for(int i=0;i<n;i++) out.println(ans[i]);
        } out.flush(); out.close();
    }
    
    public static double solve(double a, double d, double v){
        double d1=v*v/(2*a);
        if(d1>=d){
            return Math.sqrt(2*d/a);
        }
        else {
            return v/a+(d-d1)/v;
        }
    }
    
    public static class magnet{
        double t,v;
        public magnet(int a, int b){
            t=a; v=b;
        }
        public void init(int a, int b){
            t=a; v=b;
        }
    }
}
class InputReader {

		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}
                
                public long readLong() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			long sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public String next() {
			return readString();
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		} 
}

