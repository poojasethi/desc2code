//2SAT
#include<stdio.h>
#include<string.h>
#include<vector>
#include<stack>
#include<utility>
#include<algorithm>
using namespace std;
#define MAXN 506
vector < vector < int > > V(2*MAXN+6);
vector < vector < int > > VR(2*MAXN+6);
int fin[2*MAXN+6];
bool vis[2*MAXN+6];
stack <int> finish;
int scc[2*MAXN+6];
int truth[2*MAXN+6];
bool cmp(int x, int y)
{
    return scc[x] > scc[y];
}
void dfs(int node)
{
    vis[node] = true;
    int i;
    for (i=0; i<V[node].size(); ++i)
    {
        if (!vis[V[node][i]]) dfs(V[node][i]);
    }
    finish.push(node);
}
void dfs2(int node, int c)
{
    vis[node] = true;
    scc[node] = c;
    int i;
    for (i=0; i<VR[node].size(); ++i)
    {
        if (!vis[VR[node][i]]) dfs2(VR[node][i],c);
    }
}
int mat[MAXN][MAXN];
int main()
{
    //freopen("data.in", "r", stdin);
    //freopen("data.txt", "w", stdout);
    int t,T;
    int M,N;
    int i,c,x,y;
    bool f;
    scanf("%d", &T);
    for (t=1; t<=T; ++t)
    {
        scanf("%d %d", &N, &M);
        for (i=2; i<=2*N+1; ++i) V[i].clear(), VR[i].clear();
        memset(mat, 0, sizeof(mat));
        while(M--)
        {
            scanf("%d %d", &x, &y);
            V[2*x].push_back(2*y+1);
            VR[2*y+1].push_back(2*x);
            V[2*y].push_back(2*x+1);
            VR[2*x+1].push_back(2*y);
            mat[x][y] = mat[y][x] = 1;
        }
        for (x=1; x<=N; ++x)
        {
            for (y=x+1; y<=N; ++y)
            {
                if (mat[x][y]) continue;
                V[2*x+1].push_back(2*y);
                VR[2*y].push_back(2*x+1);
                V[2*y+1].push_back(2*x);
                VR[2*x].push_back(2*y+1);
            }
        }
        memset(vis, false, sizeof(vis));
        while(!finish.empty()) finish.pop();
        for (i=2; i<=2*N+1; ++i)
        {
            if (!vis[i]) dfs(i);
        }
        c = 1;
        memset(vis, false, sizeof(vis));
        while(!finish.empty())
        {
            i = finish.top();
            finish.pop();
            if (!vis[i])
            {
                dfs2(i,c);
                ++c;
            }
        }
        f = true;
        for (i=1; f && i<=N; ++i)
        {
            if (scc[2*i]==scc[2*i+1]) f = false;
        }
        printf(f ? "YES":"NO");
        puts("");
    }
    return 0;
}
