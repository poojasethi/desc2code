#include<cstdio>
#include<stack>
#include<algorithm>
#include<cstring>
#include<bits/stdc++.h>
using namespace std;

const int mx = 502;
int edge[mx][mx], marker;
int g[2 * mx][2 * mx];
int instack[2 * mx], low_ind[2 * mx], ind[2 * mx];
int compcount;
int scc[2 * mx], new_index;
stack<int> st;
int n, m;

void dfs(int x) {
    assert(ind[x] == -1);
    if(ind[x] != -1) return;
    low_ind[x] = ind[x] = new_index++;
    st.push(x); instack[x] = 1;

    for(int i = 0; i < 2 * n; ++i) if(g[x][i] == marker) {
	int y = i;
	if(ind[y] == -1) {
	    dfs(y);
	    low_ind[x] = min(low_ind[x], low_ind[y]);
	} else if(instack[y]) {
	    low_ind[x] = min(low_ind[x], ind[y]);
	}
    }

    if(ind[x] == low_ind[x]) {
	++compcount;
	int  cur;
	do {
	    cur = st.top(); st.pop();
	    scc[cur] = compcount;
	    instack[cur] = 0;
	} while(cur != x);
    }
}

void getscc() {
   memset(ind, -1, sizeof(ind));
   compcount = new_index = 0;
   for(int i = 0; i < 2 * n; ++i) if(ind[i] == -1) {
	dfs(i);
    }
}

int main() {
    int t,a,b;
    scanf("%d", &t);
    while(t--) {
	++marker;
	scanf("%d %d", &n, &m);
	while(m--) {
	    scanf("%d %d", &a, &b);
	    --a; --b;
	    edge[a][b] = edge[b][a] = marker;
	}
	for(int i = 0; i < n; ++i) for(int j = i + 1; j < n; ++j) if(i != j) {
	    if(edge[i][j] != marker) {
		g[n + i][j] = marker;
		g[n + j][i] = marker;
	    } else {
		g[i][n + j] = marker;
		g[j][n + i] = marker;
	    }
	}

	getscc();
	bool ok = true;
	for(int i = 0; i < n; ++i) if(scc[i] == scc[n + i]) ok = false;
	printf("%s\n", ok? "YES": "NO");
    }


    return 0;
}
