#include<stdio.h>
#include<string.h>
#include<assert.h>
#include<vector>
#include<stack>
#include<set>
#include<algorithm>
using namespace std;

#define MAX 1005
#define pb push_back

int n,m;
vector<int> Edge[MAX+7];
bool Visit[MAX+7];
bool InStk[MAX+7];
int Low[MAX+7],I;
int Ind[MAX+7];
stack<int> Stk;
int edge[MAX][MAX];

int nG;
int Grp[MAX+7];

inline int NOT( int v )
{
    return (v-1+n)%(2*n)+1;
}

void SCC( int u )
{
    Visit[u] = true;
    InStk[u] = true;
    Ind[u] = ++I;
    Low[u] = I;
    Stk.push( u );
    int i;
    for( i=0;i<Edge[u].size();i++){
        int v = Edge[u][i];
        if( !Visit[v] ){
            SCC( v );
            Low[u] = min( Low[u],Low[v] );
        }
        else if( InStk[v] ){
            Low[u] = min( Low[u],Ind[v] );
        }
    }
    if( Low[u]!=Ind[u] ) return;
    // found new component
    nG++;
    while( Stk.top()!=u ){
        int v = Stk.top();
        Stk.pop();
        InStk[v] = false;
        Grp[v] = nG;
    }
    Stk.pop();
    InStk[u] = false;
    Grp[u] = nG;
}



void Reset( void )
{
    int i;
    for( i=1;i<=2*n;i++ ){
        Edge[i].clear();
    }

    memset(edge,0,sizeof(edge));


}


int main( void)
{
    int i,j,u,v,Icase,k = 0;

    //freopen("division.in","r",stdin );
    //freopen("div.ans","w",stdout );

    scanf("%d",&Icase );
    while( Icase-- ){
       //printf("%d\n",Icase);
       //printf("%d %d\n",n,m);
        scanf("%d%d",&n,&m );

        for( i=1;i<=m;i++ ){
            scanf(" %d %d",&u,&v );
            edge[u][v]=edge[v][u]=1;
        }



        for(i=1;i<=n;i++)
        {
            //if(Icase==18) printf("%d\n",i);
            for(j=1;j<=n;j++)
            {
                if(i==j) continue;

                if(edge[i][j]) Edge[i+n].push_back(j);

                else Edge[i].push_back(j+n);

            }
        }



        memset( Visit,0,sizeof(Visit));
        memset( InStk,0,sizeof(InStk));
        nG = 0;
        I = 0;

        //if(Icase==18) printf("HERE\n");

        for( i=1;i<=2*n;i++){
            if( Visit[i] ) continue;
            SCC( i );
        }

        for( i=1;i<=n;i++ ){
            if( Grp[i]==Grp[n+i] ) break;
        }

        if( i<=n )  printf("NO\n");

        else printf("YES\n");

        Reset();
    }

    return 0;
}
