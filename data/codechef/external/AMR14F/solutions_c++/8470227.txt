#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<set>
#include<string>
#include<map>
using namespace std;
#define ll long long
vector<ll> cnt(1<<16);
vector<ll> sum(1<<16);
map<char, int> m;
ll mod=1000000007;
struct node
{
	int x;
	ll num;
};
bool operator < (node n1,node n2)
{
	if(n1.num!=n2.num)return n1.num< n2.num;
	return n1.x<n2.x;
}
void recurse(int mask=0,int val=15)
{
	//cerr<<mask<<endl;
	if(val==0)
	{
		sum[mask]=cnt[mask];
		sum[mask|1]=cnt[mask]+cnt[mask|1];
		sum[mask|1]%=mod;
		return;
	}
	recurse(mask,val-1);
	recurse(mask|(1<<val),val-1);
	for(int i=0;i<(1<<val);++i)
	{
		sum[(mask|(1<<val))+i]+=sum[mask+i];
		sum[(mask|(1<<val))+i]%=mod;
	}
}
ll mpow(ll x,ll p)
{
	if(p==0)return 1;
	ll ans=mpow((x*x)%mod,p/2);
	if(p%2==1)ans*=x;
	return ans%mod;
}
void doit()
{
	string s;
	cin>>s;
	int n=s.length();
	for(int i=0;i<(1<<16);++i)sum[i]=cnt[i]=0;
	vector<vector<node> > first(n,vector<node> (16));
	for(int i=0;i<n;++i)
	{
		for(int j=0;j<16;++j)
		{
			first[i][j].x=j;
			first[i][j].num=n;
		}
	}
	first[n-1][m[s[n-1]]].num=n-1;
	for(int i=n-2;i>=0;i--)
	{
		for(int j=0;j<16;++j)first[i][j]=first[i+1][j];
		first[i][m[s[i]]].num=i;
	}
	for(int i=0;i<n;++i)
	{
		sort(first[i].begin(),first[i].end());	
		int mask=0;
		for(int j=0;j<16;++j)
		{
			mask|=(1<<first[i][j].x);
			if(j==16)cnt[mask]+=n-first[i][j].num;
			else cnt[mask]+=first[i][j+1].num-first[i][j].num;
			cnt[mask]%=mod;
		}
	}
	ll ans=n;
	ans*=(n+1);
	ans%=mod;
	ans*=mpow(2,mod-2);
	ans%=mod;
	ans*=ans;
	ans%=mod;
	recurse();
	ll tminus=0;
	for(int i=0;i<(1<<16);++i)
	{
		ll comp=(1<<16)-1-i;
		tminus+=(cnt[i]*sum[comp])%mod;
		tminus%=mod;
	}
	//tminus*=mpow(2,mod-2);
	//tminus%=mod;
	cout<<(ans+mod-tminus)%mod<<endl;
}
int main()
{
	int t;
	cin>>t;
	for(int i=0;i<=9;++i)m['0'+i]=i;
	for(char i='A';i<='F';i++)m[i]=i-'A'+10;
	while(t--)
	{
		doit();
	}
	return 0;
}
