#include <bits/stdc++.h>
using namespace std;
const int MAXN = 3000 + 10;

vector<int> G[MAXN];
int sz[MAXN], dp[MAXN][MAXN];
int deg[MAXN], n, m;

void dfs(int u, int f = -1) {
  sz[u] = deg[u] == 1;
  for (auto &v: G[u]) if (v != f) {
    dfs(v, u); sz[u] += sz[v];
  }
  int *x = dp[u], s = 0;
  for (int i = 0; i <= sz[u] && i <= m; ++i) x[i] = 1e9;
  x[0] = 0; if (sz[u] <= m) x[sz[u]] = 1;
  for (auto &v: G[u]) if (v != f) {
    for (int i = min(s, m); i >= 0; --i) {
      for (int j = 1; j <= sz[v] && i + j <= m; ++j) {
        x[i + j] = min(x[i + j], x[i] + dp[v][j]);
      }
    }
    s += sz[v];
  }
}

int main() {
  scanf("%d", &n);
  for (int i = 1, u, v; i < n; ++i) {
    scanf("%d%d", &u, &v); --u, --v;
    G[u].push_back(v); ++deg[u];
    G[v].push_back(u); ++deg[v];
  }
  for (int i = 0; i < n; ++i) m += deg[i] == 1;
  m /= 2;
  if (m <= 1) {printf("%d\n", m); return 0;}
  int rt = 0, ret = m;
  static int p[MAXN];
  for (int i = 0; i < n; ++i) p[i] = i;
  random_shuffle(p, p + n);
  double delta = 0;
  for (int i = 0; i < n; ++i) {
    double st = clock();
    dfs(rt = p[i]);
    double ed = clock();
    if (i == 0) delta = ed - st;
    ret = min(ret, dp[rt][m]);
    if (ed + delta > 1.9 * CLOCKS_PER_SEC ) break;
  }
  cout << ret << endl;
  return 0;
}
