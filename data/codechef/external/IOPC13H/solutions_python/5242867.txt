//Utkarsh Saxena
#include<iostream>
#include<limits.h>
#include<map>
#include<vector>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<cstdio>
#include<queue>
using namespace std;//miller rabin primality 7 set for 64 bit int {2, 325, 9375, 28178, 450775, 9780504, 1795265022}
#define abs(x) ((x)>0?(x):-(x))
#define M 1000000007
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define tkint(n) scanf("%d",&n)
#define tkchar(ch) scanf("%c",&ch)
#define tklong(n) scanf("%llu",&n)
#define  ms0(s) memset(s,0,sizeof s)
//vector<int> graph[2*100000+5];int visited[2*100000+5];
int p[100000+5];
lld ans[100000+5];
lld modular_pow(lld base, lld exponent,lld modulus)
{
    lld result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}
int main()
{
	int t;
	for(int i=1;i<=100001;++i)ans[i]=1;
	for(int i=2;i<=100001;++i)
	{
		if(p[i]==0)
		{
			for(int j=i;j<=100001;j+=i)
			{
				p[j]=1;
			}
			lld x=i;
			while(x<=100001)
			{
				ans[x]*=i;
				x*=i;
			}
		}
	}
	for(int i=2;i<=100001;++i)ans[i]=(ans[i]*ans[i-1])%M;//,cout<<i<<' '<<ans[i]<<endl;
	cin>>t;
	int n;
	while(t--)
	{
		cin>>n;
		cout<<(ans[n+1]*modular_pow(n+1,M-2,M))%M<<endl;
	}
}
