#include <cstdio>
#include <iostream>
using namespace std;
typedef long long LL;

const LL mod = 1000000007;
#define maxn 100005

LL gcd(LL a,LL b)
{
    if(b==0) return a;
    return gcd(b,a%b);
}

LL modpow (LL a, LL b , LL mod)
{
    LL res = 1;
    while (b)
    {
        if (b & 1)
        {
            res = (res * a) % mod;
        }
        a = (a * a) % mod;
        b >>= 1;
    }
    return res;
}

int myp[maxn + 5];
int prime[maxn + 5];

LL findPower (LL n , LL k)
{
    LL ans = 1;
    LL res = 1;
    while (ans <= n)
    {
        ans *= k;
        if (ans > n) break;
        res *= k;
    }
    return res;
}

LL result[maxn];
LL prod[maxn];

int main()
{
    for (int i = 2; i <= maxn; i++)
        prime[i] = true;
    for (int i = 2; i * i <= maxn; i++)
        if (prime[i])
            for (int j = i * i; j <= maxn; j += i)
                prime[j] = false;
    int sz = 0;
    for (int i = 2; i <= maxn; i++)
        if (prime[i])
            myp[sz ++] = i;

    prod[0] = myp[0];
    for (int i = 1; i < sz; i++)
    {
        prod[i] = (prod[i - 1] * myp[i]) % mod;
    }
    //for (int i = 0; i < 10; i++)
    //    cout << myp[i] << endl;

    for (int n = 1; n <= 100000; n++)
    {
        //printf ("------------- %d \n" , n);
        LL ans = 1;
        int last = -1;
        for (int i = 0; myp[i] * myp[i] <= n + 1 && i < sz ; i++)
        {
            last = i;
            LL p = findPower (n + 1 , myp[i]);
            ans = (ans * p) % mod;
            //ans = (ans * modpow (myp[i] , p , mod)) % mod;
        }

        int lo = 0 , hi = sz;
        while (lo < hi)
        {
            int mid = (lo + hi) / 2;
            if (myp[mid] >= n + 1)
                hi = mid;
            else
                lo = mid + 1;
        }

        while (myp[hi] > n + 1)
            hi --;

        //printf ("%d %d\n" , last , hi);

        LL res1 = 0;
        if (last == -1)
        {
            res1 = prod[hi] % mod;
        }
        else res1 = (prod[hi] * modpow (prod[last] , mod - 2 , mod)) % mod;
        //cout << ans << endl;
        //cout << res1 << endl;
        ans = (ans * res1) % mod;
        //cout << "ans is " << ans << endl;
        LL temp = modpow (n + 1 , mod - 2 , mod) % mod;
        ans = (ans * temp) % mod;
        ans %= mod;
        //cout << "temp " << temp << endl;
        //cout << ans << endl;
        result[n] = ans;
    }

    //for (int i = 1; i <= 10; i++)
    //    cout << result[i] << endl;

    //printf("done\n");
    int T;
    scanf ("%d" , &T);

    while (T--)
    {
        LL n;
        scanf ("%lld" , &n);
        LL ans = result[n];
        printf("%lld\n" , ans);
    }

    return 0;
}