#include <iostream>
#include <algorithm>
#include <cmath>

#define MOD 1000000007
#define ll long long

using namespace std;

ll p[100005];
bool primes[100005];
long long mark[1000005];

ll fast(ll n, ll p)
{
        if(p == 1) return n;
        if(!(p&1)) {
            ll temp = fast(n, p/2);
            return (temp*temp)%MOD;
        }
        return (n*fast(n, p-1))%MOD;
}

void sieve()
{

	for(long long i = 0; i <= 100005; i++) {
            primes[i] = true;
	}
	primes[0] = false;
	primes[1] = false;

	long long root = sqrt(100005);
	long long cnt = 0;

	for (long long i = 2; i <= root; i++) {
		if (primes[i]) {
			for (long long j = i*i; j <= 100005; j = j + i) {
				primes[j] = false;
			}
		}
	}
	mark[0] = mark[1] = 1;
	for(int i = 0; i < 100005; i++) mark[i] = 1;
	for(long long i = 2; i < 100005; i++) {
        if(primes[i]) {
            long long val = i;
            while(val <= 100001) {
                mark[val] = i;
                val = val*i;
            }
        }
	}

}

void pre()
{
    p[0] = 1;
    for(int i = 1; i <= 1000005; i++) {
        p[i] = (p[i-1]*mark[i])%MOD;
    }
}

int main()
{
    int t;
    ios_base::sync_with_stdio(false);
    cin >> t;
    sieve();
    pre();
    while(t--) {
        int n;

        cin >> n;

        ll ans = p[n+1];
        ans = (ans * fast(n+1,MOD-2))%MOD;

        cout << ans << endl;

    }
}
