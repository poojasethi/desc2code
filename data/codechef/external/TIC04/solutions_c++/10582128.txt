#include<bits/stdc++.h>
using namespace std ;

int board[11][11];
char ans[11][11];
int ctr=1,flag=0;

void printBoard(int n){
    if(flag==1)
        cout<<endl;
    flag=1;
    //cout<<ctr++<<endl;
    //cout<<endl;
    for(int i=0;i<n;i++){
	 	for(int j=0;j<n;j++){
            if(board[i][j]==0)
                printf("-\t");
                //cout<<"*";
	 		//else cout<<"Q";
	 		else printf("Q\t");
	 	}
	 	cout<<endl;
	 }
	 //cout<<endl;

}

bool isSafe(int row,int column,int n){
     int i,j ;
	//check the upper column ;
	for(int i=0;i<=row;i++)
		if(board[i][column]!=0)
			return false;
	//check the top left diagonal ;
	for(i=row,j=column;i>=0&&j>=0;i--,j--)
		if(board[i][j]!=0)
			return false;
	//check top right diagonal
	for(i=row,j=column;i>=0&&j<n;i--,j++)
		if(board[i][j]!=0)
			return false;
	//else we have to return true that queen can be safely placed ;
	return true ;
}

//now we have to construct a recursion which takes into account of all
//the possibilites for the same
void NQueens(int row,int n){

	if(row>=n)
		return;
	//we have to place the queen in the given board ;
	//iterate through all the possible columns
	for(int i=0 ;i<n;i++){
		//check if it is safe to place the queen ;
		if(isSafe(row,i,n)){
			//place the queen in the given position
			board[row][i]=true;
			if(row==n-1){
                //cout<<endl;
				printBoard(n);
			}
			//recurse through the further positions
			NQueens(row+1,n);
            //if we return after completing the funciton we have to remove the
            //position from the given board;
            board[row][i]=false;
		}
	}
}


int main(){
    int n;
	while(cin>>n){
    flag=0;
	if(n>8)
        cout<<"No Solution"<<endl;
    else{
        if(n==1)
            cout<<"Q"<<endl;
        else{
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                board[i][j]=0;
        NQueens(0,n);

        if(flag==0)
            cout<<"Not Possible"<<endl;
    }
    }
	}
}
