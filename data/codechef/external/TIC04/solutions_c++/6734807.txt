#include<bits/stdc++.h>
#define intMAX 1123456789LL
#define MAX intMAX * intMAX
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pv(v,b,a) v.insert(v.begin()+b,a)
#define all(c) c.begin(),c.end()
#define sf(a) scanf("%d",&a);
#define sl(a) scanf("%lld",&a);
#define MAXCR 1000000000
#define mem(arr,a) memset(arr, a, sizeof arr)
#define er(vec,a,b) vec.erase(vec.begin() + a, vec.begin() + b+1)
#define traverse(a) for()
#define pii pair<int ,int>
#define mod 1000000007
#define LIM 100
using namespace std;
/*
list as pop_front();push_front(ELEMENT);
list as pop_front();push_back(ELEMENT);
to see first element stack=q.front()
to see last element queue=q.back()
*/
//str.insert(6,str3,3,4); to insert 4 words from str3 starting from 3rd position(0 based indexing) to str from 6th position (0 based indexing)
//str.find("live");//finds first occurance of string and returns its 0 based indes
//string str1=str.substr (a,n);//a=0 based start index,n=length of words//if length not given substring till end is formed
//auto bound_=upper_bound (v.begin(), v.end(), 20); //Returns an iterator pointing to the first element in the range [first,last) which compares greater than val.
//auto bound_=lower_bound (v.begin(), v.end(), 20);//Returns an iterator pointing to the first element in the range [first,last) which does not compare less than val.
//for(???<???>:iterator itr;itr!=???.end();itr++) or for(auto &tt : t.edges)
//getline(cin,s,'\n');  to get input terminating at'\n';excluding '\n'
//(a/b)%m = ((a%m)(b^(m-2)%m))%m. if m is prime
//(a^b)%m=
int arr[10][10]={{0}},cnt=0;
int visited[10][10]={{0}},n,flag=0;
void markvisited(int r,int c)
{
	int i,j;
	visited[r][c]++;
	for(i=1;i<=n;i++)
	{
		if(i==c)
		{
		}
		else
			visited[r][i]++;
		if(i==r)
		{
		}
		else
			visited[i][c]++;				
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else
		visited[i][j]++;
		i--;
		j--;
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else		
		visited[i][j]++;
		i++;
		j++;
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else		
		visited[i][j]++;
		i--;
		j++;
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else		
		visited[i][j]++;
		i++;
		j--;
	}		
}
void unmarkvisited(int r,int c)
{
	int i,j;
	visited[r][c]--;
	for(i=1;i<=n;i++)
	{
		if(i==c)
		{
		}
		else
			visited[r][i]--;
		if(i==r)
		{
		}
		else
			visited[i][c]--;
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else		
		visited[i][j]--;
		i--;
		j--;
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else		
		visited[i][j]--;
		i++;
		j++;
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else		
		visited[i][j]--;
		i--;
		j++;
	}
	i=r;
	j=c;
	while(i>=1&&j>=1&&i<=n&&j<=n)
	{
		if(i==r&&j==c)
		{
		}
		else		
		visited[i][j]--;
		i++;
		j--;
	}			
}
void printarray()
{
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(arr[i][j]==0)
				printf("-\t");
			else
				printf("Q\t");
		}
		printf("\n");
	}
}
void dfs(int r,int c)
{
	arr[r][c]=1;
	if(r==n)
	{
		flag=1;
		printarray();
		printf("\n");
		cnt++;
		return;
	}
	markvisited(r,c);
	for(int i=1;i<=n;i++)
	{
		if(visited[r+1][i]==0)
		{
			dfs(r+1,i);
			arr[r+1][i]=0;
			if(r+1!=n)
				unmarkvisited(r+1,i);
		}
	}
}
void set_()
{
	int i,j;
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			arr[i][j]=0;
			visited[i][j]=0;
		}
	}
}
int main()
{
	int i;
	while(scanf("%d", &n)!=EOF)
	{
		for(i=1;i<=n;i++)
		{
			set_();
			dfs(1,i);
		}
	//	printf("((%d))",cnt);
		if(flag==0)
			printf("Not Possible\n");
	}
	return 0;
}