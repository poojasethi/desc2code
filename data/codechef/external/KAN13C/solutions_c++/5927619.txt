#include <bits/stdc++.h>

using namespace std;

char pat[4000001];
int lps[40000001];

void computeLPSArray(int M)
{
    int len = 0;  // lenght of the previous longest prefix suffix
    int i;

    lps[0] = 0; // lps[0] is always 0
    i = 1;

    // the loop calculates lps[i] for i = 1 to M-1
    while (i < M)
    {
       if (pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if (len != 0)
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];

           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}

// Driver program to test above function
int main()
{
   while(1) {

	   cin>>(pat);
	   //KMPSearch(pat, txt);
	   if(strcmp(pat,"End")==0) {
            break;
	   }else{
        long long int M = strlen(pat);
		   //int *lps = (int *)malloc(sizeof(int)*M);
		   computeLPSArray(M);
		   for(int i=0;i<M;i++) {
		   	cout<<lps[i]<<" ";
		   }
		   cout<<endl;
	   }
   }
   return 0;
}
