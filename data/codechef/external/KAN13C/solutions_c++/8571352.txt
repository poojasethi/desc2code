#include<cstdio>
#include<iostream>
#include<list>
#include<vector>
#include<queue>
#include<stdarg.h>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<string>
#include<cstring>
#include<set>
#include<map>

using namespace std;

#define lli long long int
//#define DEBUG 1

#define SPACE(a) #a << " " << a << " " <<
#define print1(a) cout << SPACE(a) endl;
#define print2(a, b) cout << SPACE(a) SPACE(b) endl;
#define print3(a, b, c) cout << SPACE(a) SPACE(b) SPACE(c) endl;
#define print4(a, b, c, d) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) endl;
#define print5(a, b, c, d, e) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) endl;
#define print6(a, b, c, d, e, f) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) endl;
#define print7(a, b, c, d, e, f, g) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) SPACE(g) endl;
#define print8(a, b, c, d, e, f, g, h) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) SPACE(g) SPACE(h) endl;
#define print9(a, b, c, d, e, f, g, h, i) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) SPACE(g) SPACE(h) SPACE(i) endl;

#define GET_MACRO(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, NAME, ...) NAME
#if defined DEBUG
#define print(...) GET_MACRO(_0, ##__VA_ARGS__, print9, print8, print7, print6, print5, print4, print3, print2, print1, print0)(__VA_ARGS__)
#else
#define print(...) ;
#endif

#define gc getchar_unlocked
inline void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

char text[10485760];
vector<int> F;

int main()
{
    int j=0, i=0, sz;
    F.reserve(10485760); // 10MB
    F[0] = F[1] = 0;
    while (true) {
        scanf("%s", text);
        if (text[0] == 'E') break;
        printf("0 ");
        sz = strlen(text);
        for (i=2;; i++) {
            F[i] = 0;
            j = i - 1;
            while (true) {
                if (text[i-1] == text[F[j]]) {
                    F[i] = F[j] + 1; 
                    break;
                }
                j = F[j];
                if (j == 0) break;
            }

            if (i == sz) {
                printf("%d\n", F[i]);
                break;
            } else {
                printf("%d ", F[i]);
            }
        }
    }
}
