#include<stdio.h>
#include<string.h>
#include<stdlib.h>
 
void computeLPSArray(char *pat, long int M,long int *lps);

 

 
void computeLPSArray(char *pat, long int M, long int *lps)
{
    long int len = 0;  // lenght of the previous longest prefix suffix
    long int i;
 
    lps[0] = 0; // lps[0] is always 0
    i = 1;
 
    // the loop calculates lps[i] for i = 1 to M-1
    while(i < M)
    {
       if(pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if( len != 0 )
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];
 
           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
    for(i=0;i<M;i++)
    printf("%ld ",lps[i]);
    printf("\n");
}
 
// Driver program to test above function
int main()
{
   char str[4000001];
   scanf("%s",&str);
   while(strcmp(str,"End")!=0)
   {
   	long len=strlen(str);
   	long lps[len];
   	computeLPSArray(str,len,lps);
   	scanf("%s",&str);
   }
   
   return 0;
}