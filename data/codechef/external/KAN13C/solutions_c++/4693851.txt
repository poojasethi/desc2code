#include <bits/stdc++.h>
using namespace std;
 
typedef long long int lli;
typedef long int li;
 
	
 
#define F(i, n) for(i = 0;i < n; ++i)
#define FI(i, st, ft) for(i = st;i <= ft; ++i)
#define FD(i,n) for(i=n-1; i>=0; i--)
#define pb(a, b) a.push_back(b)

#define inf -1000000000
 void computeLPSArray(string pat, lli M, lli *lps)
{
    lli len = 0;  // lenght of the previous longest prefix suffix
    lli i;
 
    lps[0] = 0; // lps[0] is always 0
    i = 1;
 
    // the loop calculates lps[i] for i = 1 to M-1
    while(i < M)
    {
       if(pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if( len != 0 )
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];
 
           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}
 lli arr[4000007];
int main()
{string s;
while(1)
{
	cin>>s;
	if(s!="End")
	{lli M=s.length();
	lli i;
	
	computeLPSArray(s,M,arr);
	F(i,M)
	cout<<arr[i]<<" ";
	cout<<"\n";
		}
		
		else break;
		
}return 0;
	}