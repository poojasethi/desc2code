//Utkarsh Saxena
#include<iostream>
#include<limits.h>
#include<map>
#include<vector>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<cstdio>
#include<queue>
using namespace std;//miller rabin primality 7 set for 64 bit int {2, 325, 9375, 28178, 450775, 9780504, 1795265022}
#define abs(x) ((x)>0?(x):-(x))
#define M 1000000007
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define tkint(n) scanf("%d",&n)
#define tkchar(ch) scanf("%c",&ch)
#define tklong(n) scanf("%llu",&n)
#define  ms0(s) memset(s,0,sizeof s)
//vector<int> graph[2*100000+5];int visited[2*100000+5];
int lazy[80000*4];
struct t
{
	int one,zero;
	lld inv,anti;
}tree[80000*4];
int d[80000+5];
void build(int si,int sj,int i)
{
	if(si==sj)
	{
		if(d[si]==0)tree[i].zero=1;
		else tree[i].one=1;
		tree[i].anti=tree[i].inv=0;
	}
	else
	{
		int m=(si+sj)/2;
		build(si,m,2*i);
		build(m+1,sj,2*i+1);
		tree[i].zero=tree[2*i].zero+tree[2*i+1].zero;
		tree[i].one=tree[2*i].one+tree[2*i+1].one;
		tree[i].inv=tree[2*i].inv+tree[2*i+1].inv+tree[2*i].zero*tree[2*i+1].one;
		tree[i].anti=tree[2*i].anti+tree[2*i+1].anti+tree[2*i].one*tree[2*i+1].zero;
	}
}
void swap(int i)
{
	swap(tree[i].one,tree[i].zero);
	swap(tree[i].anti,tree[i].inv);
}
void update(int si,int sj,int i,int l,int r)
{
	if(si==l and sj==r)
	{
		lazy[i]^=1;
		swap(i);
	}
	else
	{
		int m=(si+sj)/2;
		if(r<=m)update(si,m,2*i,l,r);
		else if(m+1<=l)update(m+1,sj,2*i+1,l,r);
		else update(si,m,2*i,l,m),update(m+1,sj,2*i+1,m+1,r);
		tree[i].zero=tree[2*i].zero+tree[2*i+1].zero;
		tree[i].one=tree[2*i].one+tree[2*i+1].one;
		tree[i].inv=tree[2*i].inv+tree[2*i+1].inv+tree[2*i].zero*tree[2*i+1].one;
		tree[i].anti=tree[2*i].anti+tree[2*i+1].anti+tree[2*i].one*tree[2*i+1].zero;
		if(lazy[i])swap(i);
	}
}
int main()
{
	ios_base::sync_with_stdio(0);//awesome :D
	int n,q,l,r;
	char x;
	cin>>n;
	for(int i=1;i<=n;++i)
	{
		cin>>x;
		if(x=='L')d[i]=1;
		else d[i]=0;
	}
	build(1,n,1);
	//cout<<tree[1].inv<<endl;
	cin>>q;
	while(q--)
	{
		cin>>l>>r;
		l++;
		r++;
		update(1,n,1,l,r);
		cout<<tree[1].inv<<endl;
	}
}