//Lizards.c
#include <stdio.h>
#include <vector>
#include <iostream>
#include <queue>
#include <set>
#include <algorithm>
#include <math.h>
#include <string>
#include <cstring>
using namespace std;
//Input macros
#define si(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n);
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define mem(a,b) memset(a,b,sizeof(a))
#define f(i,a,b) for(ll i=a;i<=b;i++)
#define frev(i,a,b) for(ll i=a;i>=b;i--)
#define maX(a,b) ((a)>(b)?a:b)
#define miN(a,b) ((a)<(b)?a:b)
#define ll long long
#define pb push_back
#define ls (node<<1)
#define rs (node<<1)|1
#define inf 80006
struct seg{
	ll lt,rt,sum;
};
char arr[2*inf];
ll lazy[4*inf];
struct seg tree[4*inf];
void change(ll node)
{
	tree[node].lt=tree[ls].lt+tree[rs].lt;
	tree[node].rt=tree[ls].rt+tree[rs].rt;
	tree[node].sum=tree[ls].sum+tree[rs].sum;
	tree[node].sum+=(tree[ls].rt*tree[rs].lt);
}
ll nc2(ll n)
{
	return (n*(n-1))/2;
}
void build(ll node,ll a,ll b)
{
	if(a==b){
		if(arr[a]=='L') {tree[node].lt=1;tree[node].rt=0;}
		else {tree[node].rt=1;tree[node].lt=0;}
		tree[node].sum=0;return; 
	}
	ll mid=(a+b)>>1;
	build(ls,a,mid);
	build(rs,mid+1,b);
	change(node);
	//printf("node=%lld v=%lld\n",node,tree[node].sum);
}
void makelazy(ll node,ll a,ll b)
{
	swap(tree[node].lt,tree[node].rt);
	tree[node].sum=nc2(b-a+1)-nc2(tree[node].lt)-nc2(tree[node].rt)-tree[node].sum;
	if(a!=b)
	{
		lazy[ls]=(lazy[ls]+lazy[node])%2;
		lazy[rs]=(lazy[rs]+lazy[node])%2;
	}
	lazy[node]=0;		
}
void update(ll node,ll a,ll b,ll i,ll j)
{
	if(lazy[node]) makelazy(node,a,b);
	//printf("node=%lld sum=%lld\n",node,tree[node].sum);
	if(a>b || i>b || j<a) return ;
	if(i<=a && j>=b){
		
		swap(tree[node].lt,tree[node].rt);
		tree[node].sum=nc2(b-a+1)-nc2(tree[node].lt)-nc2(tree[node].rt)-tree[node].sum;
		if(a!=b)
		{
			lazy[ls]=(lazy[ls]+1)%2;
			lazy[rs]=(lazy[rs]+1)%2;
		}
		//printf("in range node=%lld sum=%lld lt=%lld rt=%lld\n",node,tree[node].sum,tree[node].lt,tree[node].rt);
		return ;
	}
	ll mid=(a+b)>>1;
	//if(j<=mid) update(ls,a,mid,i,j);
	//else if(i>mid) update(rs,mid+1,b,i,j)
		update(ls,a,mid,i,j);update(rs,mid+1,b,i,j);
	change(node);
	//printf("node=%lld sum=%lld lt=%lld rt=%lld\n",node,tree[node].sum,tree[node].lt,tree[node].rt);
}
int main()
{
	ll n,q,x,y;
	sl(n);
	ss(arr);
	build(1,0,n-1);
	//printf("%lld\n",tree[1].sum);
	sl(q);
	while(q--)
	{
		sl(x);sl(y);
		update(1,0,n-1,x,y);
		printf("%lld\n",tree[1].sum);
	}
	return 0;
}