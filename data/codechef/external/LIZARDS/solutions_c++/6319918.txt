#include<iostream>
#include<cstdio>
//#include<conio.h>
using namespace std;
long long nor[300005],nol[300005], afraid[300005], flip_afraid[300005], flag[300005];
string rab;
void segment(long long node, long long b, long long e)
{

    //cout<<"check"<<node<<" "<<b<<" "<<e<<endl;
    if(b>e)
        return;
    if(b==e)
    {

        if(rab[b]=='L')
        {

            nol[node]=1;
            nor[node]=0;

        }
        else
        {

           nol[node]=0;
           nor[node]=1;
        }
        afraid[node]=0;
        flip_afraid[node]=0;
        flag[node]=0;
        //cout<<"haha"<<endl;
        return;
    }
    else
    {
        long long mid=(b+e)/2;
        segment(2*node+1, b, mid);
        segment(2*node+2, mid+1,e);
        nol[node]=nol[2*node+1]+nol[2*node+2];
        nor[node]=nor[2*node+1]+nor[2*node+2];
        afraid[node]=nor[2*node+1]*nol[2*node+2]+afraid[2*node+1]+afraid[2*node+2];
        flip_afraid[node]=nol[2*node+1]*nor[2*node+2]+flip_afraid[2*node+1]+flip_afraid[2*node+2];
        flag[node]=0;
    }
    //cout<<"returning"<<node<<endl;

}
void flip(long long node)
{
          long long temp=nol[node];
          nol[node]=nor[node];
          nor[node]=temp;
          temp=afraid[node];
          afraid[node]=flip_afraid[node];
          flip_afraid[node]=temp;
          //cout<<"check"<<node<<endl;
          //cout<<afraid[node]<<flip_afraid[node]<<endl;
}
void update(long long node, long long l, long long r, long long b, long long e, long long carry)
{
    //cout<<"check"<<node<<" "<<b<<" "<<e<<endl;
    if(b>e)
        return;
    flag[node]^=carry;
    if(carry==1)
    {
        flip(node);
    }
    if(b>r || l>e)
        return;
    if(b>=l && e<=r)
    {
        flag[node]^=1;
        flip(node);
        return;
    }
    else
    {
        long long mid=(b+e)/2;
            update(2*node+1, l, r, b, mid, flag[node]);

            update(2*node+2, l, r, mid+1, e, flag[node]);
        flag[node]=0;
        nol[node]=nol[2*node+1]+nol[2*node+2];
        nor[node]=nor[2*node+1]+nor[2*node+2];
        afraid[node]=nor[2*node+1]*nol[2*node+2]+afraid[2*node+1]+afraid[2*node+2];
        flip_afraid[node]=nol[2*node+1]*nor[2*node+2]+flip_afraid[2*node+1]+flip_afraid[2*node+2];

    }
}
long long query()
{
    return afraid[0];
}
int main()
{
    //freopen("C:\\Users\\Appu\\Desktop\\input.txt","r",stdin);
    //freopen("C:\\Users\\Appu\\Desktop\\output.txt","w",stdout);
    long long n,q,l,r,i;

    cin>>n;
    cin>>rab;
    //cout<<rab<<endl;


    segment(0,0,n-1);
    //cout<<afraid[0]<<endl;

    cin>>q;
    while(q--)
    {
        cin>>l>>r;
        //cout<<l<<" "<<r<<endl;
        update(0, l, r, 0, n-1, 0);
        cout<<query()<<endl;
    }
}
