using namespace std;
#include <iostream>
#include <assert.h>
#define FORab(i,a,b) for(__typeof(b) i=(a);i<=(b);i++)
#define FOR1(i,n) FORab(i,1,n)
#define MAX 1010
#define ll long long
ll mem[MAX][MAX]={0},cum[MAX][MAX]={0};
bool isMemed[MAX][MAX]={0};
ll solve(ll i, ll j) {
    //cout<<i<<' '<<j<<endl;
    if(isMemed[i][j]) {return mem[i][j];}
    if(isMemed[j][i]) {return mem[i][j]=mem[j][i];}
    //if(i == 0) return 0;
    //if(j == 0) return 0;
    isMemed[i][j] = true;
    ll &ans = mem[i][j];
    if(i < j) { swap(i,j); }
    if(i%j == 0) return ans=i/j;
    return ans=i/j+solve(j, i%j);
}
 
int main() {
 
    FOR1(i, MAX-1) FOR1(j, MAX-1) { solve(i, j); }
    FOR1(i, MAX-1) FOR1(j, MAX-1)
    {
        cum[i][j]=cum[i-1][j]+mem[i][j];
    }
    //cout<<solve(4,4)<<" "<<solve(4,5)<<" "<<solve(5,4)<<" "<<solve(5,5)<<" "<<endl;
    //cout<<mem[2][5]<<" "<<cum[2][5]<<endl;
    ll x=0;
    FORab(i,1,2)
        FORab(j,5,10)x+=mem[i][j];
        //cout<<x<<endl;
    ll t; cin>>t;
    FOR1(cno, t) {
        ll m, n, p, q;
        cin>>m>>n>>p>>q;
        ll ans=0;
        FORab(j, p, q) {
            ll mdiv = (m-1)/j;
            ll ndiv = n/j;
            ll mmod = (m-1)%j;
            ll nmod = n%j;
            /*
            if(mdiv == ndiv) {
                ans = getAns(j, mmod, nmod);
            } else if(mmod < nmod) {
                getAns(j, mmod, nmod)+getAns(j, 1, mmod-1);*/
                ll msum=j*(mdiv*(mdiv-1))/2 + (mmod+1)*mdiv;
                ll nsum=j*(ndiv*(ndiv-1))/2 + (nmod+1)*ndiv;
               // cout<<nsum<<" .. "<<msum<<endl;
                msum+=cum[j-1][j]*mdiv+cum[mmod][j];
                nsum+=cum[j-1][j]*ndiv+cum[nmod][j];
                ans+=nsum-msum;
    //            cout<<nsum<<" "<<msum<<endl;
                //assert(nsum>=msum);
                //assert(ans>=0);
            }
            cout<<ans<<endl;
    }
 
    return 0;
}
 