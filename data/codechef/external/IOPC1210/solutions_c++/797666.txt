#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
using namespace std;

const int MAX = 505;

int n, p[MAX];
bool d[MAX], s[MAX][MAX];

vector<vector<int> > mm;

bool dfs(int i)
{
	//for(int j = 0; j < n; j++)
	for(int t = 0; t < mm[i].size(); t++)
	{
		int j = mm[i][t];
		//if(s[i][j] && !d[j])
		if(!d[j])
		{
			d[j] = true;
			if(p[j] == -1 || dfs(p[j]))
			{
				p[j] = i;
				return true;
			}
		}
	}
	return false;
}

int DoSomething()
{
	memset(p, -1, sizeof(p));

	int res = 0;

	for(int i = 0; i < n; i++)
	{
		memset(d, 0, sizeof(d));
		if(dfs(i))
			res++;
	}

	return res;
}

int main()
{
	int T;
	//cin >> T;
	scanf("%d", &T);

	while(T--)
	{
		//cin >> n;
		scanf("%d", &n);
		memset(s, 0, sizeof(s));
		mm.clear();
		mm.resize(n);
		for(int i = 0; i < n; i++)
		{
			int t;
			//cin >> t;
			scanf("%d", &t);

			for(int j = 0; j < t; j++)
			{
				int m;
				//cin >> m;
				scanf("%d", &m);
				//s[i][m] = 1;

				mm[i].push_back(m);
			}
		}

		string out = DoSomething() < n ? "not safe" : "safe";

		//cout << out << endl;
		printf("%s\n", out.c_str());
	}
}
