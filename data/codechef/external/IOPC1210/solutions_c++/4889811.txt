#include<bits/stdc++.h>
#define N 1501
#define E 250001
#define ll long long
using namespace std;
const int INF = 100000;

int to[E],next[E],cap[E],last[N],Q[N],dist[N],work[N];
int n,m,nedge;

void init() {
	memset(last,-1,sizeof(last));
	nedge=0;
}

void add_edge(int u,int v,int c) {
	to[nedge]=v; next[nedge]=last[u]; cap[nedge]=c; last[u]=nedge++;
	to[nedge]=u; next[nedge]=last[v]; cap[nedge]=0; last[v]=nedge++;
}

bool bfs(int s,int t) {
	memset(dist,-1,sizeof(dist));
	int i,v,u;
	int st=0,en=0;
	Q[en++]=s;
	dist[s]=0;
	while (st<en) {
		u=Q[st++];
		for (i=last[u]; i>=0; i=next[i]) {
			v=to[i];
			if (dist[v]==-1 && cap[i]>0) {
				dist[v]=dist[u]+1;
				Q[en++]=v;
			}
		}
	}
	return dist[t]!=-1;
}

int dfs(int u,int fl,int t) {
	if (u==t) return fl;
	int i,v;
	for (int &e=work[u]; e>=0; e=next[e]) {
		v=to[e];
		if (cap[e]>0 && dist[v]==dist[u]+1) {
			int diff=dfs(v,min(fl,cap[e]),t);
			if (diff>0) {
				cap[e]-=diff;
				cap[e^1]+=diff;
				return diff;
			}
		}
	}
	return 0;
}

int maxflow(int s,int t) {
	int totflow=0;
	int i;
	while (bfs(s,t)==true) {
		for (i=0;i<=n;i++) work[i]=last[i];
		while (true) {
			int diff=dfs(s,INF,t);
			//printf("%d\n",diff);
			if (diff>0) {
				totflow+=diff;
			}
			else break;
		}
	}
	return totflow;
}


int main() {
	int t,i,j,k,u,v,x,y;
	scanf("%d",&t);
	while (t--) {
		init();
		scanf("%d",&x);
		n=2*x+2;
		for (i=0;i<x;i++) {
			scanf("%d",&k);
			while (k--) {
				scanf("%d",&j);
				add_edge(i,x+j,INF);
			}
		}
		for (i=0;i<x;i++) {
			add_edge(2*x,i,1);
			add_edge(x+i,2*x+1,1);
		}
		//printf("Calculating...\n");
		int a=maxflow(2*x,2*x+1);
		//printf("Done\n");
		if (a>=x) printf("safe\n");
		else printf("not safe\n");
	}
	return 0;
}





