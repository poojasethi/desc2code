/*
 	C++ Template
	Gaurav Babbar
*/

#include<bits/stdc++.h>
#define MOD 1000000007
#define MAX 100005
#define mp make_pair
#define pb push_back
#define gc getchar
#define pc putchar
#define ll long long
#define llu unsigned long long
#define fill(a, val) memset(a, val, sizeof(a))

ll ABS(ll a){if(a>0) return a; else return (-1*a);}
int gcd(int a,int b){if (b==0) return a;else return gcd(b,a%b);}
llu power(llu b,llu exp,llu m) {llu ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }
using namespace std;

#define DisplayDebuggingInfo 0
#define debug(args...) {dbg,args; if(DisplayDebuggingInfo) cerr<<endl;}
struct debugger
{
      template<typename T> debugger& operator,(const T& v)
      {
          if(DisplayDebuggingInfo)
          {
              cerr<< v <<" ";
              return *this;
          }
      }
}dbg;

inline void inp(llu &n)
{
  n = 0;
  int ch = gc();
  int sign = 1;
  while(ch < '0' || ch > '9') {
    if (ch == '-') sign = -1;
    ch = gc();
  }
  while(ch >= '0' && ch <= '9')
    n = (n<<3) + (n<<1) + ch - '0', ch = gc();
  n = n*sign;
}

inline void outp(llu a)
{
  char snum[25];
  int i=0;
  do
  {
    snum[i++]=a%10+48;
    a=a/10;
  } while(a!=0);
  i=i-1;
  while(i>=0)
    pc(snum[i--]);
  pc('\n');
}

/* Main Code sarts here */

void reset()
{
}

llu n,p;

void input()
{
    inp(n);inp(p);
}

void preprocess()
{
}

llu mulmod(llu a,llu b,llu c)
{
    llu x = 0,y=a%c;
    while(b > 0)
    {
        if(b&1) x = (x+y)%c;
        y = (y<<1)%c;
        b=b>>1;
    }
    return x;
}

llu mod_inv(llu a)
{
    return power(a,p-2,p);
}

void solve()
{
    if(n>=p)
    {
        cout<<"0\n";
        return;
    }
    else
    {
        llu temp = p-1,prod=1;
        while(temp!=n)
        {
            prod = mulmod(prod,temp,p);
            temp--;
        }
        llu ans = mulmod(p-1,mod_inv(prod),p);
        cout<<(ans%p)<<endl;
    }
}

int main()
{
   llu t;
   inp(t);
   while(t--)
   {
	   reset();
	   input();
	   preprocess();
	   solve();
   }
   return 0;
}
