// ANT COLONY
// laflare
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<string>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<cstdio>
#include<cmath>
#include<limits.h>
#include<cstring>
#include<cstdlib>
#include<cfloat>
#include<cassert>
#define maxm(a,b) a>b?a:b;
#define minm(a,b) a<b?a:b;
using namespace std;
//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
typedef map<int,int> mp;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)
#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
#define traverse_map(a,b) for(mp::iterator it=a;it!=b;++it)
#define MOD 1000000007
#define MAX 1000001
#define cases() int t; cin>>t; while(t--)
// fast input function
#define getcx getchar_unlocked
// fast input function
#ifdef ONLINE_JUDGE
 inline void inp( int &n )
 {
    n=0;
    int ch=getcx();int sign=1;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

    while(  ch >= '0' && ch <= '9' )
            n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    n=n*sign;
  }
#else
inline void inp(int &n){
 cin>>n;
}
#endif
/*
inline long long inp(){
	char c = getchar_unlocked();
	long long n = 0;
	while(c < '0' || c > '9') c = getchar_unlocked();
	while(c >= '0' && c <= '9')
		n = (n<<3) + (n<<1) + c - '0', c = getchar_unlocked();
	return n;
}

#define pc putchar_unlocked
inline void oup(int n){
	if(!n) pc('0');
	char pb[2];
	int pi = 0;
	while(n) pb[pi++] = (n%10) + '0', n /= 10;
	while(pi) pc(pb[--pi]);
}*/
int gcd(int x,int y)
{
	if(!y)
	return x;
	
	return gcd(y,x%y);
}
int main(){
  int t;
  inp(t);
  for(int i=1;i<=t;i++)
  {
		int x1,x2,x3,x4,y1,y2,y3,y4;
		 inp(x1);
             inp(y1);
		 inp(x2);
             inp(y2);
		 inp(x3);
             inp(y3);
             inp(x4);
             inp(y4);
		 int B;
		 int A;
		 B=gcd(abs(x2-x1),abs(y2-y1))+gcd(abs(x3-x2),abs(y3-y2))+gcd(abs(x4-x3),abs(y4-y3))+gcd(abs(x1-x4),abs(y1-y4));
		  // point on boudries
		  
		 A=abs((x1*y2 - x2*y1) + (x2*y3 - x3*y2) + (x3*y4 - x4*y3) + (x4*y1 - x1*y4));
		 A=(A+B)/2+1;
		  printf("Case %d: %d\n",i,A);
		 
  }
 return 0;
}
