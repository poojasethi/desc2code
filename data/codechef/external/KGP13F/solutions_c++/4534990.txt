#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int offset = 10000;
const int N = 100100;
int x[4], y[4];
int minY[N], maxY[N];

vector < pair <pii, pii> > lines;

int main() {
    int n; gi(n);
    rep(z, n) {
        lines.clear();
        rep(i, 4) {
            gi(x[i]), gi(y[i]);
            x[i] += offset;
            y[i] += offset;
        }
        rep(i, 4) {
            int j = (i + 1) % 4;
            if(x[i] <= x[j]) lines.pb(mp(mp(x[i], y[i]), mp(x[j], y[j])));
            else lines.pb(mp(mp(x[j], y[j]), mp(x[i], y[i])));
        }

        rep(i, N) {
            minY[i] = N, maxY[i] = -N;
            rep(j, 4) {
                int x1 = lines[j].ff.ff, y1 = lines[j].ff.ss;
                int x2 = lines[j].ss.ff, y2 = lines[j].ss.ss;

                if(i >= x1 and i <= x2) {
                    if(x1 == x2) {
                        minY[i] = min(minY[i], min(y1, y2));
                        maxY[i] = max(maxY[i], max(y1, y2));
                    } else {
                        int num = i * (y2 - y1) + x2 * y1 - x1 * y2;
                        int den = (x2 - x1);

                        int curY = num / den;

                        maxY[i] = max(maxY[i], curY);
                        minY[i] = min(minY[i], curY);
                    }
                }
            }
        }

        ll ans = 0;
        rep(i, N) {
            if(maxY[i] >= minY[i]) {
                ans += maxY[i] - minY[i];
                rep(j, 4) {
                    int x1 = lines[j].ff.ff, y1 = lines[j].ff.ss;
                    int x2 = lines[j].ss.ff, y2 = lines[j].ss.ss;

                    if(i >= x1 and i <= x2) {
                        int num = i * (y2 - y1) + x2 * y1 - x1 * y2;
                        int den = (x2 - x1);
                        if((ll)minY[i] * den == num) {
                            ++ans;
                            break;
                        }
                    }
                }
            }
        }

        printf("Case %d: %lld\n", z + 1, ans);
    }

    return 0;
}