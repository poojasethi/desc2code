#include <list>
#include <set>
#include <map>
#include <ctime>
#include <stack>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <queue>
#include <deque>
#include <bitset>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <iterator>
#include <cassert>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <complex>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
using namespace std;
 
#define For(i,n) for( int i=0; i < n; i++)
#define FOR(i,a,b) for( __typeof(b) i=(a); i<=(b); i++)
#define ALL(c)  c.begin() , c.end()
#define LL long long
#define int64 LL
#define Set(t,v) memset((t), (v), sizeof(t))

typedef vector < int > VI;
typedef pair< int , int > PII;
typedef pair < LL , LL > PLL;
#define fr first
#define se second
#define pi M_PI
#define rad(x) (x)*acos(-1)/180.0
#define EPS 1e-6
stringstream ss;
#define two(x) ( 1LL<<x )
#define sq(x) ( (x)*(x) )
LL mod = 1000000007LL;

/**************************Code****************************/


const LL INF = 100000LL * 100000LL * 100000LL;
long long dp[512][512];
int a[512][512];
#define gc getchar_unlocked
int read2()
{
	char c = getchar_unlocked();
	int sgn = 1, ans = 0;
	while( ( c < '0' || c > '9' ) && c != '-' )
		c = getchar_unlocked();
	if( c == '-' )
		sgn = -1, c = getchar_unlocked();
	while( '0' <= c && c <= '9' )
		ans = ans * 10 + c - 48, c = getchar_unlocked();
	return ans * sgn;
}
int read() {
  char c = gc();
  int ret = 0, sign = 1;
  while((c<'0' || c>'9') && c!='-') c = gc();
  if(c=='-') {
    sign = -1;
    c = gc();
  }
  while(c>='0' && c<='9') {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  if(sign<0) ret = -ret;
  return ret;
}

int main()
{
	int n, m, q, x, y, i, j, k, l;
	n = read(), m = read(), q = read();
	for( i = 0 ; i < n ; i ++ )
		for( j = 0 ; j < m ; j ++ )
			a[i][j] = read();
	for( i = 0 ; i < n ; i ++ )
		for( j = 0 ; j < m ; j ++ )
			dp[i][j] = -INF;
	dp[0][0] = a[0][0];
	for( i = 0 ; i < n ; i ++ )
		for( j = 0 ; j < m ; j ++ )
		{
			if( !i && !j )
				continue;
			l = max( i , j );
			for( k = 1 ; k <= l ; k ++ )
				if( i % k == 0 && j % k == 0 )
				{
					if( i-k >= 0 )
						dp[i][j] = max( dp[i][j] , a[i][j] + dp[i-k][j] );
					if( j-k >= 0 )
						dp[i][j] = max( dp[i][j] , a[i][j] + dp[i][j-k] );
					if( i-k >= 0 && j-k >= 0 )
						dp[i][j] = max( dp[i][j] , a[i][j] + dp[i-k][j-k] );
				}
		}
	while( q -- )
	{
		x = read(), y = read();
		printf( "%lld\n" , dp[x][y] );
	}
	return 0;
}
