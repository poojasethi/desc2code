#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
#define ll long long
#define gc getchar_unlocked

int read_int() {
  char c = gc();
  int ret = 0, sign = 1;
  while((c<'0' || c>'9') && c!='-') c = gc();
  if(c=='-') {
    sign = -1;
    c = gc();
  }
  while(c>='0' && c<='9') {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  if(sign<0) ret = -ret;
  return ret;
}

ll dp[500][500];
ll grid[500][500];

int main() {
  int m=read_int(), n = read_int(), q = read_int();
  for(int i=0; i<m; i++) {
    for(int j=0; j<n; j++) {
      grid[i][j] = read_int();
    }
  }
  for(int i=0; i<m; i++) {
    for(int j=0; j<n; j++) {
      dp[i][j] = -1e15;
    }
  }
  dp[0][0] = grid[0][0];
  for(int i=0; i<m; i++) {
    for(int j=0; j<n; j++) {
      int upto = min(i,j) ? min(i,j) : max(i,j);
      for(int d=1; d<=upto; d++) {
	if((i%d==0 || i==0) && (j%d==0 || j==0)) {
	  if(i>0) dp[i][j] = max(dp[i][j],dp[i-d][j]+grid[i][j]);
	  if(j>0) dp[i][j] = max(dp[i][j],dp[i][j-d]+grid[i][j]);
	  if(i>0 && j>0) dp[i][j] = max(dp[i][j],dp[i-d][j-d]+grid[i][j]);
	}
      }
    }
  }
  while(q-->0) {
    int r = read_int(), c= read_int();
    printf("%lld\n",dp[r][c]);
  }
  return 0;
}