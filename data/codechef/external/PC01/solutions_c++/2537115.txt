#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<map>
#include<vector>
#include<deque>
using namespace std;
bool solved=false;
bool placed[5]={false};
int pos[5];
map<int,vector<string> > rules;
bool isAl(char c){
  if(c>='A' && c<='E')return true;
  return false;
}
bool isNu(char c){
  if(c>='1'&&c<='5')return true;
  return false;
}
bool verify(){
  bool ok=true;
  for(int i=0;i<=4;i++){
    //cout<<"checking "<<i<<endl;
    vector<string>::iterator rit,ren;
    rit=rules[i].begin(); ren=rules[i].end();
    string rule;
    for(;rit!=ren;rit++){
      rule=*rit;
      //cout<<"rule: "<<rule<<" "<<rule.length()<<endl;
      if(rule[0]=='N'){
        if(isNu(rule[1])){
          if(pos[i]+1==rule[1]-'0'){
            ok=false;
            return ok;
          }
        }else{
          int tmp=rule[1]-'A';
          if(pos[i]+1==pos[tmp]||pos[i]-1==pos[tmp]){
            ok=false;
            return ok;
          }
        }
      }else if(rule[0]=='+'){
        int tmp=rule[1]-'A';
        if(pos[i]<=pos[tmp]){
          ok=false;
          return ok;
        }
      }else if(rule[0]=='-'){
        int tmp=rule[1]-'A';
        if(pos[i]>=pos[tmp]){
          ok=false;
          return ok;
        }
      }else if(isNu(rule[0])){
        if(pos[i]+1!=rule[0]-'0'){
          ok=false;
          return ok;
        }
      }else{
        int tmp=rule[0]-'A';
        if(!(pos[i]==pos[tmp]+1||pos[i]==pos[tmp]-1)){
          ok=false;
          return ok;
        }
      }
      //cout<<"passed\n";
    }
  }
  return ok;
}
void solve(int cur){
  //pos={2,1,0,3,4};
  //pos[0]=2; pos[1]=1; pos[2]=0; pos[3]=3; pos[4]=4;
  //cout<<"ans-- "<<verify()<<endl;
  //cout<<cur<<"--\n";
  //cout<<"hh\n";
  if(solved)return;
  if(cur==5){
    //cout<<"verifying :"<<pos[0]<<pos[1]<<pos[2]<<pos[3]<<pos[4]<<endl;
    if(verify()){
      for(int i=0;i<=4;i++){
        for(int j=0;j<=4;j++){
          if(pos[j]==i)printf("%c",'A'+j);
        }
      }
      putchar('\n');
      solved=true;
      return;
    }
  }else{
    for(int i=0;i<5;i++){
      if(!placed[i]){
        pos[cur]=i;
        placed[i]=true;
        solve(cur+1);
        placed[i]=false;
      }
    }
  }
  
}
int main(){
  int t;
  char temp;
  cin>>t; getchar();
  string cur="";
  int prof=0;
  while(t--){
    while(prof<=4){
      while(temp=getchar()){
        if(temp=='\n'){
          //cout<<"cur : "<<cur<<endl;
          rules[prof].push_back(cur);
          cur="";
          break;
        }else if(temp==' '){
          //cout<<"cur: "<<cur<<endl;
          rules[prof].push_back(cur);
          cur="";
        }
        else cur+=temp;
      }
      prof++;
      //cout<<prof<<endl;
    }
    //cout<<"done inp\n";
    solve(0);
    //cout<<"back from solve\n";
    solved=false;
    for(int i=0;i<=4;i++)placed[i]=false;
    prof=0;
    rules.clear();
  }
  return 0;
}
