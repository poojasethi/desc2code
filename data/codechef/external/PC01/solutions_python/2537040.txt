#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <iostream>

using namespace std;

struct CON
{
       int con, num;
       CON (int con = 0, int num = 0):con(con), num(num) {}
};

vector<CON> mes[6];

vector<int> now;

bool vis[6];

bool flag;

void check()
{
     //for (int i = 0; i < 5; ++i) printf("%d ", now[i]);
     //printf("\n");
     
/*mes
0: 1/2/3/4/5 : Professor's room is on that specific floor.
1: NA/NB/NC/ND/NE : Professor's room is not on an adjacent floor to that of A/B/C/D/E.
2: N1/N2/N3/N4/N5 : Professor's room is NOT on that specific floor.
3: +A/+B/+C/+D/+E : Professor's room is on a floor higher than of A/B/C/D/E.
4: -A/-B/-C/-D/-E : Professor's room is on a floor lower than of A/B/C/D/E.
5: A/B/C/D/E : Professor's room is on an ADJACENT floor to that of A/B/C/D/E
*/
     for (int i = 0; i < 5; ++i)
         for (int j = 0; j < (int) mes[i].size(); ++j)
         {
             int con = mes[i][j].con;
             int num = mes[i][j].num;
             switch (con)
             {
                    case 0:
                         if (now[i] != num) return;
                         break;
                    case 1:
                         if (abs(now[num] - now[i]) == 1) return;
                         break;
                    case 2:
                         if (now[i] == num) return;
                         break;
                    case 3:
                         if (now[i] <= now[num]) return;
                         break;
                    case 4:
                         if (now[i] >= now[num]) return;
                         break;
                    case 5:
                         if (abs(now[i] - now[num]) != 1) return;
                         break;
             }
         }
         
     for (int i = 0; i < 5 && flag; ++i)
         for (int j = 0; j < 5; ++j)
             if (now[j] == i) printf("%c", j+'A');
     flag = 0;
     printf("\n");
}

void search(int i)
{
     if (!flag) return;
     
     if (i == 5) 
     {
           check();
           return;
     }
     
     for (int j = 0; j < 5; ++j)
         if (!vis[j])
         {
                     vis[j] = 1;
                     now.push_back(j);
                     search(i+1);
                     now.pop_back();
                     vis[j] = 0;
         }
}

int main()
{
    int _;
    for (scanf("%d\n", &_); _; --_)
    {
        string st;
        
        for (int i = 0; i < 5; ++i)
        {
            mes[i].clear();
            getline(cin, st);
            
            for (string::iterator it = st.begin(); it != st.end(); ++it)
            {
/*
mes
0: 1/2/3/4/5 : Professor's room is on that specific floor.
1: NA/NB/NC/ND/NE : Professor's room is not on an adjacent floor to that of A/B/C/D/E.
2: N1/N2/N3/N4/N5 : Professor's room is NOT on that specific floor.
3: +A/+B/+C/+D/+E : Professor's room is on a floor higher than of A/B/C/D/E.
4: -A/-B/-C/-D/-E : Professor's room is on a floor lower than of A/B/C/D/E.
5: A/B/C/D/E : Professor's room is on an ADJACENT floor to that of A/B/C/D/E
*/

                if (*it == ' ') continue;
                if (*it >= '0' && *it <= '9')
                {
                        mes[i].push_back(CON(0, *it - '1'));
                        continue;
                }
                
                if (*it == 'N')
                {
                        ++it;
                        if (*(it) >= 'A' && *(it) <= 'E')
                           mes[i].push_back(CON(1, *it - 'A'));
                        else
                            mes[i].push_back(CON(2, *it - '1'));
                        continue;
                }
                
                if (*it == '+')
                {
                        mes[i].push_back(CON(3, *(++it) - 'A'));
                        continue;
                }
                
                if (*it == '-')
                {
                        mes[i].push_back(CON(4, *(++it) - 'A'));
                        continue;
                }
                
                if (*it >= 'A' && *it <= 'E')
                {
                        mes[i].push_back(CON(5, *it - 'A'));
                        continue;
                }
            }
        }
        
        /*for (int i = 0; i < 5; ++i)
        {
            printf("i : %d      ", i);
            
            for (vector<int>::size_type j = 0; j < mes[i].size(); ++j)
            {
                int con = mes[i][j].con;
             int num = mes[i][j].num;
                printf("(%d %d)   ", con, num);
            }
            printf("\n");
        }*/
        
        now.clear();
        memset(vis, 0, sizeof(vis));
        flag = 1;
        search(0);
    }
    
    //system("pause");
    return 0;
}
