#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>

using namespace std;

struct rule
{
    int command;
    int id;
};

vector<rule> v[6];

char str[100100];

void solve()
{
    for(int i = 1; i <= 5; i++) v[i].clear();
    for(int i = 1; i <= 5; i++)
    {
        gets(str);
        int l = strlen(str);
        for(int j = 0; j < l; j++)
        {
            if(str[j] >= 'A' and str[j] <= 'E')
            {
                struct rule novo;
                novo.command = 1;
                novo.id = str[j]-'A'+1;
                v[i].push_back(novo);
                j++;
            }
            else if(str[j] == 'N')
            {
                struct rule novo;
                if(str[j+1] >= 'A' and str[j+1] <= 'E')
                {
                    novo.command = 2;
                    novo.id = str[j+1]-'A'+1;
                }
                else
                {
                    novo.command = 6;
                    novo.id = str[j+1]-'0';
                }
                v[i].push_back(novo);
                j+=2;
            }
            else if(str[j] == '+')
            {
                struct rule novo;
                novo.command = 3;
                novo.id = str[j+1]-'A'+1;
                v[i].push_back(novo);
                j+=2;
            }
            else if(str[j] == '-')
            {
                struct rule novo;
                novo.command = 4;
                novo.id = str[j+1]-'A'+1;
                v[i].push_back(novo);
                j+=2;
            }
            else if(str[j] >= '1' and str[j] <= '5')
            {
                struct rule novo;
                novo.command = 5;
                novo.id = str[j]-'0';
                v[i].push_back(novo);
                j++;
            }
        }
    }

    vector<int> perm;
    for(int i = 1; i <= 5; i++) perm.push_back(i);
    //////////////////////
    /*for(int i = 1; i <= 5; i++)
    {
        printf("Prof %d\n", i);
        for(int j = 0; j < v[i].size(); j++)
        {
            printf("%d %d\n", v[i][j].command, v[i][j].id);
        }
    }*/
    //////////////////////8

    do
    {
        bool found=true;
        for(int i = 0; i < 5; i++)
        {
            int temp=perm[i];
            int floor=i+1;

            for(int j = 0; j < v[temp].size(); j++)
            {
                int com=v[temp][j].command;
                int id=v[temp][j].id;
                if(com == 1)
                {
                    bool ok=false;
                    if(floor-1 >= 1)
                        if(perm[i-1] == id) ok = true;
                    if(floor+1 <= 5)
                        if(perm[i+1] == id) ok = true;

                    if(!ok)
                    {
                        found = false;
                        break;
                    }
                }

                if(com == 2)
                {
                    bool ok = true;
                    if(floor-1 >= 1)
                        if(perm[i-1] == id) ok = false;
                    if(floor+1 <= 5)
                        if(perm[i+1] == id) ok = false;

                    if(!ok)
                    {
                        found = false;
                        break;
                    }
                }

                if(com == 3)
                {
                    bool ok = false;
                    for(int k = 0; k < i; k++)
                    {
                        if(perm[k] == id) ok = true;
                    }
                    if(!ok)
                    {
                        found = false;
                        break;
                    }
                }

                if(com == 4)
                {
                    bool ok = false;
                    for(int k = i+1; k < 5; k++)
                    {
                        if(perm[k] == id) ok = true;
                    }
                    if(!ok)
                    {
                        found = false;
                        break;
                    }
                }

                if(com == 5)
                {
                    if(id != i+1)
                    {
                        found = false;
                        break;
                    }
                }

                if(com == 6)
                {
                    if(id == i+1)
                    {
                        found = false;
                        break;
                    }
                }
            }
            if(!found) break;
        }
        if(found)
        {
            //RESENJE
            for(int i = 0; i < 5; i++)
            {
                printf("%c", perm[i]+'A'-1);
            }
            printf("\n");
            break;
        }
    } while(next_permutation(perm.begin(), perm.end()));
}

int main()
{
    char s[10];
    int t; cin >> t; gets(s);
    while(t--)
    {
        solve();
    }

    return 0;
}
