// AC
#include <cstdio>
#include <cctype>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <climits>
using namespace std;
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

const double pi = acos(-1.0);
typedef long long LL;
typedef unsigned long long ULL;

typedef pair<int,int> pii;
typedef pair<double,double> pdd;
typedef vector<int> vi;
typedef vector<double>vd;
typedef vector<string> vs;
typedef vector<vi>vvi;
typedef map<string,int> msi;
typedef map<int,int>mii;
typedef map<pii,int>mpi;

#define INi(x) scanf("%d", &x)
#define INi2(x,y) scanf("%d %d", &x, &y)
#define INi3(x,y,z) scanf("%d %d %d", &x, &y, &z)
#define INl(x) scanf("%lld", &x)
#define INl2(x,y) scanf("%lld %lld", &x, &y)
#define INl3(x,y,z) scanf("%lld %lld %lld", &x, &y, &z)
#define INd(x) scanf("%lf", &x)
#define INd2(x,y) scanf("%lf %lf", &x, &y)
#define INd3(x,y,z) scanf("%lf %lf %lf", &x, &y, &z)
#define INs(x) scanf("%s", x)
#define INs2(x,y) scanf("%s %s", x, y)
#define INs3(x,y,z) scanf("%s %s %s", x, y, z)

#define OUTi(x) printf("%d\n", x)
#define OUTi2(x,y) printf("%d %d\n", x, y)
#define OUTi3(x,y,z) printf("%d %d %d\n", x, y, z)
#define OUTl(x) printf("%lld\n", x)
#define OUTl2(x,y) printf("%lld %lld\n", x, y)
#define OUTl3(x,y,z) printf("%lld %lld %lld\n", x, y, z)
#define OUTd(x) printf("%lf\n", x)
#define OUTd2(x,y) printf("%lf %lf\n", x, y)
#define OUTd3(x,y,z) printf("%lf %lf %lf\n", x, y, z)
#define OUTs(x) printf("%s\n", x)
#define OUTs2(x,y) printf("%s %s\n", x, y)
#define OUTs3(x,y,z) printf("%s %s %s\n", x, y, z)

#define NL printf("\n")

#define pb push_back
#define MP make_pair
#define popb pop_back
#define all(a) a.begin(), a.end()
#define Sort(x) sort(x.begin(),x.end())
#define Reverse(x) reverse(x.begin(),x.end())
#define SZ(a) ( (int)a.size() )

#define REP(i,n) for (i=0;i<n;i++)
#define REV(i,n) for (i=n;i>=0;i--)
#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)
#define FOR(i,p,k) for (i=p; i<k;i++)

#define MEM(x,y) memset(x,y,sizeof(x))
#define COPY(c,r) memcpy(c,r,sizeof(r))
#define popcount(i) __builtin_popcount(i)
#define fs first
#define sc second

/// move
//int dr[]={-1,-1,-1,0,0,1,1,1}; int dc[]={-1,0,1,-1,1,-1,0,1}; // 8 direction
//int dr[]={-1,1,0,0}; int dc[]={0,0,-1,1}; // 4 direction
//int dr[] = {-1,-1,0,0,1,1}; int dc[] = {-1,0,-1,1,0,1}; // hexagonal direction
//int dr[]={2,1,-1,-2,-2,-1,1,2};int dc[]={1,2,2,1,-1,-2,-2,-1}; // Knight Direction

#define MAX 1000005
#define EPS 1e-9
#define INF INT_MAX

template<class T> T POW(T x, T y) {T ret = 1; while(y--) {ret *= x;} return ret; }
template<class T> inline bool EQUAL(T x, T y) { if(fabs(x-y) < EPS) return true; return false; }
#define GCD(x,y) __gcd(x,y)
#define LCM(x,y) abs(x*y)/__gcd(x,y)

/// Template ends



int main()
{
//    freopen("in.txt", "r", stdin);
//    freopen("out.txt", "w", stdout);

    int i, j, t, n, m, x, y;
    vi defeatedBy; /// index of this vector can be defeated by content (number of attacks) of that index

    INi(t);

    while(t--)
    {
        INi2(n, m);
        defeatedBy.pb(0);

        for(i=1; i<=n; i++)
        {
            defeatedBy.pb(n-i);
        }

        for(i=0; i<m; i++)
        {
            INi2(x, y);
            defeatedBy[max(x,y)]++;
            defeatedBy[min(x,y)]--;
        }

        for(i=SZ(defeatedBy)-1; i>0; i--)
        {
            if(defeatedBy[i] == 0) break;
        }

        if(i) printf("2 %d\n", i);
        else printf("1\n");

        defeatedBy.clear();
    }

    return 0;
}


