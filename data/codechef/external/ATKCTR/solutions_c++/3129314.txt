/*
*Sourav Sen Tonmoy
*University of Dhaka
*/

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define rep(i,n) for(int i=0; i<(int)n; i++)
#define repv(i,n) for(int i=n-1; i>=0; i--)
#define repl(i,n) for(int i=1; i<=(int)n; i++)
#define replv(i,n) for(int i=n; i>=1; i--)
#define FOR(i,a,b) for(int i=(int)a;i<=(int)b;i++)

#define foreach(i,n) for(__typeof((n).begin())i =(n).begin();i!=(n).end();i++)
#define sz(x) (int)x.size()
#define pb(x) push_back(x)
#define ppb pop_back()
#define all(x) x.begin(),x.end()
#define uu first
#define vv second

#define mem(x,y) memset(x,y,sizeof(x));
#define eps 1e-9
#define INF INT_MAX

#define sdi(x) scanf("%d",&x)
#define sdii(x,y) scanf("%d%d",&x,&y)
#define sdl(x) scanf("%lld", &x)
#define sdll(x,y) scanf("%lld %lld", &x, &y)
#define sds(x) scanf("%s",x)
#define pfi(x) printf("%d\n",x)
#define pfl(x) printf("%lld\n", x)
#define NL printf("\n")


using namespace std;


typedef long long int LL;
typedef unsigned long long int ULL;
typedef vector<int> vi;
typedef set<int> si;
typedef map<int, int> mii;
typedef map<string, int> msi;
typedef priority_queue<int> pq;
typedef queue<int> qi;
typedef stack<int> sti;


//int kx[] = {+2, +1, -1, -2, -2, -1, +1, +2};
//int ky[] = {+1, +2, +2, +1, -1, -2, -2, -1}; //Knight Direction
//int fx[] = {+0, +0, +1, -1, -1, +1, -1, +1};
//int fy[] = {-1, +1, +0, +0, +1, +1, -1, -1}; //Four & Eight Direction


int outdegree[1000100];

int main()
{

//    freopen("in.txt","r",stdin);
//    freopen("out.txt","w",stdout);

    int test, n, m, a, b, i;
    bool found;

    sdi(test);
    while(test--) {
        sdii(n, m);

        if(!m) {
            printf("2 %d\n", n);
            continue;
        }

        replv(i, n) {
            outdegree[i] = i-1;
        }

        while(m--) {
            sdii(a, b);

            outdegree[a]++;
            outdegree[b]--;
        }

        found = false;
        replv(i, n) {
            if(outdegree[i] == (n-1)) {
                found = true;
                printf("2 %d\n", i);
                break;
            }
        }

        if(!found) pfi(1);
    }

	return 0;
}
