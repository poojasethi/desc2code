#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

int par1[123456];
vector<int> adj[123456];
int dist1[123456];
int inf = 1<<30;

#define getcx getchar
inline void inp(int &n)
{
   n=0;
   int ch=getcx();
   int sign=1;
   while(ch < '0' || ch > '9'){
        if(ch=='-')
            sign=-1;
        ch=getcx();
   }
   while(ch >= '0' && ch <= '9')
        n = (n<<3) + (n<<1) + ch - '0', ch = getcx();
   n=n*sign;
}

void getdist1(int n, int s){
	for(int i = 0; i <= n+10; i++){
		par1[i] = -1;
		dist1[i] = inf;
	}
	dist1[s] = 0;
	queue<int> q;
	q.push(s);
	while(!q.empty()){
		int u = q.front();
		q.pop();
		for(int i = 0; i < adj[u].size(); i++){
			int v = adj[u][i];
			if((dist1[u] + 1) < dist1[v]){
				dist1[v] = dist1[u]+1;
				par1[v] = u;
				q.push(v);
			}
		}
	}
}

bool taken1[123456];
bool taken2[123456];
bool dfs(int x, int par, int cur, int dst){
	if((adj[x].size() == 1) && (adj[x][0] == par)){
		if(cur == dst)
			return true;
		return false;
	}
	bool flag = false;
	for(int i = 0; i < adj[x].size(); i++){
		int y = adj[x][i];
		if(y != par){
			flag |= dfs(y, x, cur + 1, dst);
		}
	}
	return flag;
}

int solve(int st, int en, int dia){
	int ans = 0, x = en, last = -1;
	vector<int> path;
	while(x != -1){
		path.push_back(x);
		x = par1[x];
	}
	for(int i = 1; i < (path.size()-1); i++){
		int u = path[i];
		for(int j = 0; j < adj[u].size(); j++){
			int v = adj[u][j];
			if((v != path[i - 1]) && (v != path[i + 1])){
				bool f = dfs(v, u, 1, i);
				taken1[path[i - 1]] &= (!f);
			}
		}
	}
	for(int i = path.size() - 2; i >= 0; i--)
		taken1[path[i]] &= taken1[path[i + 1]];
	for(int i = path.size() - 2; i > 0; i--){
		int u = path[i];
		for(int j = 0; j < adj[u].size(); j++){
			int v = adj[u][j];
			if((v != path[i - 1]) && (v != path[i + 1])){
				bool f = dfs(v, u, 1, path.size() - 1 - i);
				taken2[path[i + 1]] &= (!f); 
			}
		}
	}
	for(int i = 1; i < path.size(); i++)
		taken2[path[i]] &= taken2[path[i - 1]];
	for(int i = 0; i < path.size(); i++){
		bool flag = taken1[path[i]]&taken2[path[i]];
		if(flag){
			ans++;
		}
	}
	return ans;
}

int main(){
	int t;
	inp(t);
	while(t--){
		int n;
		inp(n);
		for(int i = 0; i <= n+10; i++){
			adj[i].clear();
			taken1[i] = taken2[i] = true;
		}
		for(int i = 1; i < n; i++){
			int x;
			inp(x);
			adj[i].push_back(x);
			adj[x].push_back(i);
		}
		getdist1(n, 0);
		int nd = -1, mx = 0;
		for(int i = 0; i < n; i++){
			if(dist1[i] > mx){
				mx = dist1[i];
				nd = i;
			}
		}
		getdist1(n,nd);
		int nd1 = -1, mx1 = 0;
		for(int i = 0; i < n; i++){
			if(dist1[i] > mx1){
				mx1 = dist1[i];
				nd1 = i;
			}
		}
		int ans = solve(nd, nd1, mx1);
		printf("%d\n",ans);
	}
	return 0;
}