#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100000 + 10;
vector<int> G[MAXN];
int fa[MAXN], dis[MAXN];
int path[MAXN], vs[MAXN];

void dfs0(int u, int f = -1, int d = 0) {
  fa[u] = f; dis[u] = d;
  for (auto &v: G[u]) {
    if (v != f) dfs0(v, u, d + 1);
  }
}

void dfs1(int u) {
  dis[u] = 0;
  for (auto &v: G[u]) if (!vs[v]) {
    vs[v] = 1; dfs1(v);
    dis[u] = max(dis[u], dis[v] + 1);
  }
}

void run() {
  int n; scanf("%d", &n);
  for (int i = 0; i < n; ++i) G[i].clear();
  for (int i = 1; i < n; ++i) {
    int x; scanf("%d", &x);
    G[x].push_back(i);
    G[i].push_back(x);
  }
  int rt = 0, m = 0;
  dfs0(rt);
  for (int i = 0; i < n; ++i) {
    if (dis[i] > dis[rt]) rt = i;
  }
  dfs0(rt);
  for (int i = 0; i < n; ++i) {
    if (dis[i] > dis[rt]) rt = i;
  }
  memset(vs, 0, sizeof(vs[0]) * n);
  for (; rt != -1; rt = fa[rt]) path[m++] = rt;
  for (int i = 0; i < m; ++i) vs[path[i]] = 1;
  int ret = 0;
  if (m & 1) {
    dfs1(path[m / 2]); ++ret;
    if (dis[path[m / 2]] != m / 2) {
      for (int i = m / 2 - 1; i >= 0; --i) {
        dfs1(path[i]); ++ret;
        if (dis[path[i]] == i) break;
      }
      for (int i = m / 2 + 1; i < m; ++i) {
        dfs1(path[i]); ++ret;
        if (dis[path[i]] == m - i - 1) break;
      }
    }
  } else {
    for (int i = (m - 1) / 2; i >= 0; --i) {
      dfs1(path[i]); ++ret;
      if (dis[path[i]] == i) break;
    }
    for (int i = (m - 1) / 2 + 1; i < m; ++i) {
      dfs1(path[i]); ++ret;
      if (dis[path[i]] == m - i - 1) break;
    }
  }
  printf("%d\n", ret);
}

int main() {
  int T; scanf("%d", &T);
  for (int cas = 1; cas <= T; ++cas) run();
  return 0;
}
