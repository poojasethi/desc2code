#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pil pair<int,ll>
#define pli pair<ll,int>
#define pll pair<ll,ll>
#define mod 95676260903887607LL
vector<int>adj[100011];
int mn,loc,mark[100011];
vector<int>v;
void dfs(int u,int p,int h)
{
    if(h>mn)
    {
        mn=h;
        loc=u;
    }
    for(int i=0;i<adj[u].size();i++)
        if(adj[u][i]!=p)
            dfs(adj[u][i],u,h+1);
}
int dfs1(int u,int p,int h)
{
    if(u==loc)
    {
        v.pb(loc);
        return 1;
    }
    for(int i=0;i<adj[u].size();i++)
        if(adj[u][i]!=p)
            if(dfs1(adj[u][i],u,h+1)==1)
            {
                v.pb(u);
                return 1;
            }
    return 0;
}
int dfs2(int u,int p)
{
    mark[u]=1;
    int mx=0;
    for(int i=0;i<adj[u].size();i++)
    {
        if(adj[u][i]!=p&&mark[adj[u][i]]==0)
            mx=max(mx,dfs2(adj[u][i],u)+1);
    }
    return mx;
}
int main()
{
    int i,j,n,k,t;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        for(i=0;i<=n;i++)
            adj[i].clear();
        for(i=0;i<=n;i++)
            mark[i]=0;
        for(i=1;i<n;i++)
        {
            int p;
            scanf("%d",&p);
            adj[p].pb(i);
            adj[i].pb(p);
        }
        mn=-1;
        dfs(0,-1,0);
        mn=-1;
        int loc1=loc;
        v.clear();
        dfs(loc,-1,0);
        dfs1(loc1,-1,0);
        assert(v[0]==loc);
        assert(v.back()==loc1);
        assert(v.size()==mn+1);
//        printf("%d\n",mn+1);
//        for(i=0;i<v.size();i++)
//            printf("%d ",v[i]);
//        printf("\n");
        int y,mx=1000111,mn1=1000000;
        for(i=0;i<v.size();i++)
        {
            if(i==v.size()-1)
                y=dfs2(v[i],-1);
            else
                y=dfs2(v[i],v[i+1]);
           // cout<<v[i]<<" "<<y<<endl;
            if(y==i)
                mn1=i;
            if(y==mn-i)
                mx=min(mx,i);
        }
        printf("%d\n",mx-mn1+1);
    }
    return 0;
}
