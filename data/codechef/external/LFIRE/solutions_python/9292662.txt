#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define ft first
#define sd second
#define mem(a, v) memset(a, v, sizeof(a))
typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;
typedef vector<VI> matrix;
const ll MOD = 1000000007LL;

#define getcx getchar
inline void inp(int &n)
{
   n=0;
   int ch=getcx();
   int sign=1;
   while(ch < '0' || ch > '9'){
        if(ch=='-')
            sign=-1;
        ch=getcx();
   }
   while(ch >= '0' && ch <= '9')
        n = (n<<3) + (n<<1) + ch - '0', ch = getcx();
   n=n*sign;
}

matrix adj(100100);
int dist[100100];
int par[100100];
int ans;

void go(int u, int d, int p)
{
    dist[u] = d;
    par[u] = p;
    for(int i=0; i<adj[u].size(); i++){
        if(adj[u][i] != p)
            go(adj[u][i], d+1, u);
    }
}

bool flag;

int dfs(int u, int len, int curl, int p)
{
    //cout<<"u : "<<u<<" p : "<<p<<" l : "<<len<<" curl :"<<curl<<"\n";
    if(len == curl){
        ans++;
        flag = true;
        return 1;
    }
    int ret = 0;
    for(int i=0; i<adj[u].size(); i++){
        if((adj[u][i] != p)){
            ret |= dfs(adj[u][i], len, curl+1, u);
        }
    }
    ans += ret;
    return ret;
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int t;
    inp(t);
    while(t--){
        int n;
        inp(n);
        for(int i=0; i<n; i++){
            adj[i].clear();
        }
        for(int i=1; i<n; i++){
            int x;
            inp(x);
            adj[i].pb(x);
            adj[x].pb(i);
        }
        go(0, 0, -1);
        int mx = -1, nd = -1;
        for(int i=0; i<n; i++){
            if(dist[i] > mx){
                mx = dist[i], nd = i;
            }
        }
        assert(mx != -1 && nd != -1);
        go(nd, 0, -1);
        mx = -1, nd = -1;
        for(int i=0; i<n; i++){
            if(dist[i] >= mx){
                mx = dist[i], nd = i;
            }
        }
        assert(mx != -1 && nd != -1);
        VI v;
        ans = 0;
        while(nd != -1){
            v.pb(nd);
            ans++;
            nd = par[nd];
        }
        int len = v.size();
        int left = 0, right = len - 1;
        for(int i=1; i<v.size()-1; i++){
            int cur = v[i];
            for(int j=0; j<adj[cur].size(); j++){
                int nxt = adj[cur][j];
                if(nxt != v[i-1] && nxt != v[i+1]){
                    flag = false;
                    dfs(nxt, min(len - i - 1, i), 1, cur);
                    if(flag){
                        if(i <= len - i - 1){
                            left = i;
                        }
                        else{
                            right = i;
                        }
                        if(i == len - i - 1){
                            right = i;
                        }
                    }
                }
            }
            if(right != len - 1)    break;
        }
        // cout<<left<<" "<<right<<"\n";
        printf("%d\n", right - left + 1);
    }
    return 0;
}