#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
vector<int> adj[100001];
int vis[100001];
int tvis[100001];
int tpre[100001];
int hc[100001];
int hc1[100001];
int hc2[100001];
void dfs0(int pos, int par, int dis){
	vis[pos]=dis;
	
	for(int child: adj[pos]){
		if(child==par)	continue;
		dfs0(child,pos,dis+1);
	}	
}

void dfs1(int pos, int par, int dis){
	tvis[pos]=dis;
	tpre[pos]=par;
	for(int child: adj[pos]){
		if(child==par)	continue;
		dfs1(child,pos,dis+1);
	}	
}

void dfs2(int pos, int par, int dis){
	int maxh = 0;
	for(int child: adj[pos]){
		if(child==par)	continue;
		dfs2(child,pos,dis+1);
		maxh = max(maxh,hc[child]);
	}
	hc[pos] = maxh+1;
}

int dfs3(int pos, int par, int dis, int height){
	int ret = 0;
	if(hc[pos]!=height)	return 0;
	int maxh = 0;
	for(int child: adj[pos]){
		if(child==par)	continue;
		maxh = max(maxh,hc[child]);
	}
	int cnt = 0;
	for(int child: adj[pos]){
		if(child==par)	continue;
		if(hc[child]==maxh)	cnt++;
	}
	if (cnt >1 && (par!=pos)) return 1;
	else if(par==pos && cnt>2) return 1;
	else ret = 1;
	for(int child: adj[pos]){
		if(child==par)	continue;
		ret += dfs3(child,pos,dis+1, height-1);
	}
	return ret;
}


void dfs4(int pos, int par, int dis, int noo){
	int maxh = 0;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		dfs4(child,pos,dis+1,noo);
		maxh = max(maxh,hc1[child]);
	}
	hc1[pos] = maxh+1;
}

int dfs5(int pos, int par, int dis, int height, int noo){
	int ret = 0;
	int maxh = 0;
	if(hc1[pos]!=height)	return 0;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		maxh = max(maxh,hc1[child]);
	}
	int cnt = 0;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		if(hc1[child]==maxh)	cnt++;
	}
	if (cnt >1 && (par!=pos)) return 1;
	else if(par==pos && cnt>2) return 1;
	else ret = 1;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		ret += dfs5(child,pos,dis+1, height-1,noo);
	}
	return ret;
}


void dfs6(int pos, int par, int dis, int noo){
	int maxh = 0;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		dfs6(child,pos,dis+1,noo);
		maxh = max(maxh,hc2[child]);
	}
	hc2[pos] = maxh+1;
}

int dfs7(int pos, int par, int dis, int height, int noo){
	int ret = 0;
	int maxh = 0;
	if(hc2[pos]!=height)	return 0;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		maxh = max(maxh,hc2[child]);
	}
	int cnt = 0;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		if(hc2[child]==maxh)	cnt++;
	}
	if (cnt >1 && (par!=pos)) return 1;
	else if(par==pos && cnt>2) return 1;
	else ret = 1;
	for(int child: adj[pos]){
		if(child==par || child == noo)	continue;
		ret += dfs7(child,pos,dis+1, height-1,noo);
	}
	return ret;
}
int main() {
	int t;
	scanf("%d",&t);
	while(t--){
		int n;
		scanf("%d",&n);
		for(int i = 0; i< n ; i++)	adj[i].clear();
		vector<int> arr(n-1);
		for(int i = 0 ; i< n-1 ; i++){
			int temp;
			scanf("%d",&temp);
			adj[temp].push_back(i+1);
			adj[i+1].push_back(temp);
			arr[i]==temp;
		}
		if(n==2){
			printf("2\n");
			continue;
		}
		dfs0(0,0,0);
		int maxi = 0;
		for(int i = 0 ; i< n ; i++)	maxi = max(maxi,vis[i]);
		for(int i = 0 ; i< n ; i++){
			if(vis[i]==maxi){
				dfs1(i,i,0);
				int maxi2 = 0;
				for(int j = 0; j< n ; j++)	maxi2 = max(maxi2, tvis[j]);
				for(int j = 0 ; j<n ; j++){
					if(tvis[j]==maxi2){
						//len = tvis[j], diameter is i.....j
						if(maxi2%2==0){
							//1 center
							int cen = j;
							for(int k = 0 ; k< maxi2/2; k++)	cen = tpre[cen];
							dfs2(cen, cen, 0);
							//hc has the heights now
							//for(int k = 0 ; k< n ; k++)	cout<<hc[k]<<" ";
							int ans = dfs3(cen,cen,0,(maxi2/2)+1);
							printf("%d\n",ans);
						}
						else{
							//2 centers
							int cen1 = j;
							for(int k = 0 ; k<maxi2/2; k++) cen1 = tpre[cen1];
							int cen2 = tpre[cen1];
							
							dfs4(cen1,cen1,0,cen2);
							dfs6(cen2,cen2,0,cen1);
							int ans = dfs5(cen1,cen1, 0, (maxi2/2)+1,cen2);
							ans+=dfs7(cen2,cen2, 0, (maxi2/2)+1,cen1);
							printf("%d\n",ans);
						}
						break;
					}
				}
				break;
			}
		}
	}
	return 0;
}