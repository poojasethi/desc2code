#include <bits/stdc++.h>

#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)

#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define LET(x, a)  __typeof(a) x(a)
#define foreach(it, v) for(LET(it, v.begin()); it != v.end(); it++)

#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define func __FUNCTION__
#define line __LINE__

using namespace std;

template<typename S, typename T> 
ostream& operator<<(ostream& out, pair<S, T> const& p){out<<'('<<p.fi<<", "<<p.se<<')'; return out;}

template<typename T>
ostream& operator<<(ostream& out, vector<T> const & v){
int l = v.size(); for(int i = 0; i < l-1; i++) out<<v[i]<<' '; if(l>0) out<<v[l-1]; return out;}

void tr(){cout << endl;}
template<typename S, typename ... Strings>
void tr(S x, const Strings&... rest){cout<<x<<' ';tr(rest...);}

const int N = 100100;

int t, n;
vector<int> g[N];

int mx[N], p[N], nxt[N];

int d, last;

int dfs(int cur, int prev, int l){
	if(l >= d){
		d = l;
		last = cur;
	}

	p[cur] = prev;
	
	int mxx = 0;
	
	foreach(it, g[cur]){
		if(*it == prev) continue;
		int nd = dfs(*it, cur, l+1) + 1;
		if(nd > mxx){
			mxx = nd;
			nxt[cur] = *it;
		}
	}
	return mx[cur] = mxx;
}

int dfs2(int cur, int prev){
	int cnt = 0;
	int ret = 1;
	foreach(it, g[cur]){
		if(*it == prev) continue;
		
		if(mx[*it]+1 == mx[cur]){
			cnt++;
		}
	}
	
	if(cnt > 1) return ret;
	
	foreach(it, g[cur]){
		if(*it == prev) continue;
		if(mx[*it]+1 == mx[cur])
			ret += dfs2(*it, cur);
	}
	
	return ret;
	
}

int main(){
	sd(t);
	while(t--){
		sd(n);
		for(int i = 0; i < n; i++) g[i].clear();
		
		memset(p, 0, sizeof p);
		memset(mx, 0, sizeof mx);
		memset(nxt, 0, sizeof nxt);
		
		for(int i = 1; i < n; i++){
			int x; sd(x);
			g[x].pb(i);
			g[i].pb(x);
		}
		
		d = 0, last = 0;
		int x = last;
		dfs(last, last, 0);
		if(last != x)
			x = last;
		dfs(last, last, 0);
		int y = last;
		
//		tr(d,x,y);
		
		int ans = 0;
		if(d%2 == 0){
			while(y != x){
				y = p[y];
				x = nxt[x];
			}
			
			int mid = x;
			
			dfs(mid,mid,0);
			
			int ccnt = 0;
			foreach(it, g[mid]){
				if(mx[*it]+1 == mx[mid]) ccnt++;				
			}
		
			
			
			if(ccnt > 2){
				ans = 1;
			}
			else{
				ans = 1;
				foreach(it, g[mid]){
					if(mx[*it]+1 == mx[mid])
						ans += dfs2(*it, mid);
				}
			}
		}
		else{
			for(int i = 0; i < d/2; i++){
				y = p[y];
				x = nxt[x];
			}
			
			dfs(y,x,0);
			ans += dfs2(y,x);
			dfs(x,y,0);
			ans += dfs2(x,y);
		}
		
		printf("%d\n", ans);
		
	}		
	return 0;
}