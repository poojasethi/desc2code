#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
using namespace std;
inline int scan(){
    int x=0;
    char c = getchar_unlocked();
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x = (x<<3) + (x<<1) + c - '0';
        c=getchar_unlocked();
    }
    return x;
}
class bit2d{
    int n;
    int m;
    long long  **bit1;
    long long **bit2;
    long long **bit3;
    long long **bit4;
    void update(long long **bit,int x,int y,long long val){
        for(int i=x;i<=n;i+=i&-i){
            for(int j=y;j<=m;j+=j&-j){
                bit[i][j]+=val;
            }
        }
    }
    
    long long query(long long **bit,int x,int y){
        long long res=0;
        for(int i=x;i;i&=i-1){
            for(int j=y;j;j&=j-1){
                res+=bit[i][j];
            }
        }
        return res;
    }
    long long query(int x,int y){
        return query(bit1,x,y)*x*y + query(bit2,x,y)*x + query(bit3,x,y)*y + query(bit4,x,y);
    }
    public:
    void init(int sz,int zs){
        n=sz;
        m=zs;
        bit1 = new long long* [n+1];
        bit2 = new long long* [n+1];
        bit3 = new long long* [n+1];
        bit4 = new long long* [n+1];
        for(int i=0;i<=n;++i){
            bit1[i] = new long long [m+1];
            bit2[i] = new long long [m+1];
            bit3[i] = new long long [m+1];
            bit4[i] = new long long [m+1];
        }
    }
    void update(int x1,int y1,int x2,int y2,long long val){
        update(bit1,x1,y1,val);
        update(bit1,x1,y2+1,-val);
        update(bit1,x2+1,y1,-val);
        update(bit1,x2+1,y2+1,val);
        update(bit2,x1,y1,-val*(y1-1));
        update(bit2,x1,y2+1,val*y2);
        update(bit2,x2+1,y1,val*(y1-1));
        update(bit2,x2+1,y2+1,-y2*val);
        update(bit3,x1,y1,-val*(x1-1));
        update(bit3,x1,y2+1,val*(x1-1));
        update(bit3,x2+1,y1,val*x2);
        update(bit3,x2+1,y2+1,-x2*val);
        update(bit4,x1,y1,(x1-1)*(y1-1)*val);
        update(bit4,x1,y2+1,-y2*(x1-1)*val);
        update(bit4,x2+1,y1,-x2*(y1-1)*val);
        update(bit4,x2+1,y2+1,x2*y2*val);
    }
    long long query(int x1,int y1,int x2,int y2){
        return query(x2,y2) - query(x1-1,y2) - query(x2,y1-1) + query(x1-1,y1-1);
    }
};
bit2d mybit;
int main(){
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n=scan(),m=scan();
    mybit.init(n,m);
    for(int i=1;i<=n;++i){
        for(int j=1;j<=m;++j){
            mybit.update(i,j,i,j,scan());
        }
    }
    int q=scan();
    while(q--){
        int type=scan(),x1=scan(),y1=scan(),x2=scan(),y2=scan();
        if(type&1){
            int val=scan();
            mybit.update(x1,y1,x2,y2,val*1LL);
        }
        else{
            printf("%lld\n",mybit.query(x1,y1,x2,y2));
        }
    }
}