import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Queue;

public class Main {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static void solve()
	{
		outer:
		for(int T = ni();T >= 1;T--){
			int n1 = ni(), n2 = ni(), m = ni();
			int[] from = new int[m];
			int[] to = new int[m];
			for(int i = 0;i < m;i++){
				from[i] = ni()-1;
				to[i] = ni()-1;
			}
			int[][] g = packD(n1, from, to);
			for(int[] row : g){
				Arrays.sort(row);
			}
			if(n1 != n2){
				out.println(m);
				for(int i = 0;i < n1;i++){
					for(int e : g[i]){
						out.println((i+1) + " " + (e+1));
					}
				}
				continue outer;
			}
			int[] mat = doBipartiteMatchingHKNoRec(g, n2);
			for(int v : mat){
				if(v == -1){
					out.println(m);
					for(int i = 0;i < n1;i++){
						for(int e : g[i]){
							out.println((i+1) + " " + (e+1));
						}
					}
					continue outer;
				}
			}
			int[] xfrom = new int[m-n1];
			int[] xto = new int[m-n1];
			int[] w = new int[m-n1];
			int p = 0;
			for(int i = 0;i < n1;i++){
				for(int e : g[i]){
					if(mat[i] != e){
						xfrom[p] = mat[i]; xto[p] = e; w[p] = i; p++;
					}
				}
			}
			int[][] xg = packD(n2, xfrom, xto);
			int[][] xig = packD(n2, xto, xfrom);
			int[] clus = decomposeToSCCNoRec(xg, xig);
			int ct = 0;
			for(int i = 0;i < p;i++){
				if(clus[xfrom[i]] != clus[xto[i]]){
					ct++;
				}
			}
			out.println(ct);
			for(int i = 0;i < p;i++){
				if(clus[xfrom[i]] != clus[xto[i]]){
					out.println((w[i]+1) + " " + (xto[i]+1));
				}
			}
		}
	}
	
	public static int[] decomposeToSCCNoRec(int[][] g, int[][] ig)
	{
		int n = g.length;
		boolean[] visited = new boolean[n];
		int[] po = new int[n];
		int pop = 0;
		
		int[] stack = new int[n];
		int[] sinds = new int[n];
		int sp = 0;
		for(int i = 0;i < n;i++){
			if(!visited[i]){
				sinds[sp] = 0;
				stack[sp++] = i;
				while(sp > 0){
					int cur = stack[sp-1];
					visited[cur] = true;
					while(sinds[sp-1] < g[cur].length && visited[g[cur][sinds[sp-1]]])sinds[sp-1]++;
					if(sinds[sp-1] == g[cur].length){
						po[pop++] = cur;
						sp--;
					}else{
						stack[sp] = g[cur][sinds[sp-1]];
						sinds[sp] = 0;
						sp++;
					}
				}
			}
		}
		
		int[] ret = new int[n];
		Arrays.fill(visited, false);
		int clus = 0;
		Queue<Integer> q = new ArrayDeque<Integer>();
		for(int i = n - 1;i >= 0;i--){
			if(!visited[po[i]]){
				q.add(po[i]);
				visited[po[i]] = true;
				while(!q.isEmpty()){
					int cur = q.poll();
					ret[cur] = clus;
					for(int k : ig[cur]){
						if(!visited[k]){
							q.add(k);
							visited[k] = true;
						}
					}
				}
				clus++;
			}
		}
		
		return ret;
	}
	
	static int[][] packD(int n, int[] from, int[] to) {
		int[][] g = new int[n][];
		int[] p = new int[n];
		for(int f : from)
			p[f]++;
		for(int i = 0;i < n;i++)
			g[i] = new int[p[i]];
		for(int i = 0;i < from.length;i++){
			g[from[i]][--p[from[i]]] = to[i];
		}
		return g;
	}
	
	public static int[] doBipartiteMatchingHKNoRec(int[][] g, int m)
	{
		int n = g.length;
		if(n == 0)return new int[0];
		int[] from = new int[m];
		int[] to = new int[n];
		Arrays.fill(to, -1);
		Arrays.fill(from, n);
		
		int[] d = new int[n+1];
		int[] stack = new int[n+1];
		int[] adjind = new int[n+1];
		while(true){
			Arrays.fill(d, -1);
			int[] q = new int[n];
			int r = 0;
			for(int i = 0;i < n;i++){
				if(to[i] == -1){
					d[i] = 0;
					q[r++] = i;
				}
			}
			
			for(int p = 0;p < r;p++) {
				int cur = q[p];
				for(int adj : g[cur]){
					int nex = from[adj];
					if(d[nex] == -1) {
						if(nex != n)q[r++] = nex;
						d[nex] = d[cur] + 1;
					}
				}
			}
			if(d[n] == -1)break;
			
			for(int i = 0;i < n;i++){
				if(to[i] == -1){
					int sp = 1;
					stack[0] = i;
					adjind[0] = 0;
					boolean prevB = false;
					outer:
					while(sp >= 1){
						int cur = stack[sp-1];
						if(cur == n){
							prevB = true;
							sp--;
							continue;
						}
						for(;adjind[sp-1] < 2*g[cur].length;){
							int adj = g[cur][adjind[sp-1]/2];
							if(adjind[sp-1] % 2 == 0){
								int nex = from[adj];
								if(d[nex] == d[cur] + 1){
									stack[sp] = nex;
									adjind[sp] = 0;
									adjind[sp-1]++;
									sp++;
									continue outer;
								}else{
									adjind[sp-1]+=2;
								}
							}else{
								if(prevB){
									to[cur] = adj;
									from[adj] = cur;
									prevB = true;
									sp--;
									continue outer;
								}
								adjind[sp-1]++;
							}
						}
						d[cur] = -1;
						prevB = false;
						sp--;
					}
					if(prevB){
					}
				}
			}
		}
		
		return to;
	}
	
	public static int[][][] packWD(int n, int[] from, int[] to, int[] w) {
		int[][][] g = new int[n][][];
		int[] p = new int[n];
		for(int f : from)
			p[f]++;
		for(int i = 0;i < n;i++)
			g[i] = new int[p[i]][2];
		for(int i = 0;i < from.length;i++){
			--p[from[i]];
			g[from[i]][p[from[i]]][0] = to[i];
			g[from[i]][p[from[i]]][1] = w[i];
		}
		return g;
	}
	
	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}
