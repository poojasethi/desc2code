#include<stdio.h>
#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<sstream>
#include<set>
#include<map>
#include<stack>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<string>

using namespace std;

#define DEBUG //on-off switch for printing statements

// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%ll",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

#define p(n)                        printf("%d",n)
#define pc(n)                      	printf("%c",n)
#define pl(n)                       printf("%ll ",n)
#define pf(n)                      	printf("%lf",n)
#define ps(n)                       printf("%s",n)
// Useful constants
#define INF                         (int)1e9
#define EPS                         1e-9

// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd

// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define mp                          make_pair
#define ll 													long long int
// Some common useful functions
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
#define DREP(a)                      sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())
#define llu long long unsigned
#define ld long
int sd()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ll scan_ll()    {int ip=getchar_unlocked(),flag=1;ll ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scan_llu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
 
//end of fast input
 
//fast output
 
//no line break
void print_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void print_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void print_ll(ll n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void print_llu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}


int mod;

unsigned mul(unsigned long long a, unsigned long long k) {
    
a %= mod;
unsigned long long r = mod == 1 ? 0 : 1;
while(k) {
if(k & 1)
(r *= a) %= mod;
(a *= a) %= mod;
k >>= 1;
}
return (unsigned)r;
}

long p1[301][301];
long p2[301][301];
int row1[301];
int row2[301];
int col1[301];
int col2[301];
int t,a1,a2,b1,b2,n,m,ret;
inline int cala(int i,int j)
{
    int num = a1*i + a2*j;
    num = mul(num,mod-2);
    return (num);

}

inline int calb(int i,int j)
{
    int num = b2*i + b1*j;
    num = mul(num,mod-2);
    return (num);

}

int main()
{

    int ansa,ansb,maxa=0,maxb=0;
    t = sd();
    while(t--)
    {
        maxa=0,maxb=0;
        n = sd();
        m = sd();
        a1 = sd();
        a2 = sd();
        b1 = sd();
        b2 = sd();
        mod = sd();

        p1[0][0]=0;
        p2[0][0]=0;
        
        for(int i=1;i<=n;i++)
        {
            maxa=0;
            maxb=0;
            for(int j=1;j<=m;j++)
            {
                ansa = cala(i,j);
                ansb = calb(i,j);
                p1[i][j] = ansa;
                p2[i][j] = ansb;          
                if(p1[i][j] > maxa )
                {
                    maxa = p1[i][j];
                }
                if(p2[i][j] > maxb)
                {
                    maxb = p2[i][j] ;
                }
                
            }
            row1[i] = maxa;
            row2[i] = maxb;
        }
        maxa = 0;
        maxb = 0;
        for(int j=1;j<=m;j++)
        {
            maxa=0;
            maxb=0;
            for(int i=1;i<=n;i++)
            {               
                if(p1[i][j] > maxa )
                {
                    maxa = p1[i][j];
                }
                if(p2[i][j] > maxb)
                {
                    maxb = p2[i][j] ;
                }
            }
            col1[j] = maxa;
            col2[j] = maxb;   
        }

        int flag = 0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(p1[i][j] == col1[j] && p2[i][j] == row2[i] )
                {
                    printf("%d %d\n",i,j);
                    flag = 1;
                    break;
                }
            }
            if(flag== 1) break;
        }
        if(flag == 0)
        {
            printf("-1\n");
        }
    }

    return 0;
}
