#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

using namespace std;


unsigned long long power(int a, int n)
{
	if (n == 1)
		return a;
	unsigned long long temp = power(a, n / 2);
	if (n % 2 == 0)
		return temp * temp;
	else
		return a*temp* temp;
}

void generatePrimes(int*& arr,int N)
{
	int n = 0;
	bool *exists = new bool[N + 1];
	memset(exists, 0, (N + 1) * sizeof(bool));
	int c = 0;
	for (int i = 2; i <= N; i++)
	{
		if (!exists[i-1])
		{
			arr[c++] = i;
			for (int j = 2; j*i <= N; j++)
			{
				exists[i * j - 1] = true;
			}
		}
	}
}

unsigned long long sumDivisorsFast(int* arr,unsigned long long N)
{
	if (N == 1)
		return 0;
	unsigned long long NCopy = N, product = 1;
	int pow = 0,i = 0;
	for (i = 0; arr[i] * arr[i] <= N; i++)
	{
		pow = 0;
		while(N%arr[i] == 0)
		{
			pow++;
			N = N / arr[i];
		}
		product *= (unsigned long long)(power(arr[i], pow + 1) - 1) / (arr[i] - 1);
	}
	if (N > 1)
		product *= (unsigned long long)(power(N, 1 + 1) - 1) / (N - 1);
	return product - NCopy;
}

unsigned long long sumDivisorsSlow(unsigned long long N)
{
	unsigned long long sum = 1ULL;
	unsigned long long i;

	for (i = 2ULL; i*i <= N; i++)
	{
		if (N%i == 0)
		{
			sum += i;
			sum += N / i;
		}
		if (i*i == N)
			sum -= i;
	}
	
	return sum;
}

int main()
{
	int T;
	unsigned long long N;
	int maxPrimeNum = 709;
	//int arr[5761455];
	int *arr = new int[5761455];
	generatePrimes(arr, maxPrimeNum);
	scanf("%d", &T);
	while (T-- > 0)
	{
		scanf("%lld", &N);
		printf("%lld\n", sumDivisorsFast(arr,N));
	}
	
	return 0;
}