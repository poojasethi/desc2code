#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <utility>
#include <vector>
#include <stdexcept>
#include <limits.h>
#include <ctype.h>
#include <math.h>
#include <sstream>
#include <algorithm>
 
static const uint32_t primes[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701};
 
static const size_t primesLength=sizeof(primes)/sizeof(primes[0]);
 
uint32_t calc(uint32_t input){
  uint32_t in=input;
    uint32_t pr;
    size_t i=0;
    uint32_t ret=1;
    uint32_t count=0;
    for(;;){
      pr=primes[i];
 
      if(input% pr==0){
	input/=pr;
	count++;
      } else{
	if(count!=0){
	  uint32_t m=pow(pr,count+1)-1;
	  ret*=m/(pr-1);
	  count=0;      
	} 
	if(pr>input) break;
	++i;
	if(i==primesLength) {
	  pr=input;
	  uint64_t m=(uint64_t)pr*pr-1;
	  ret*=m/(pr-1);
	  break;
	}
      }
    }
    return ret-in;
}
    
 
 
int main() {
  FILE* in = stdin;
#ifdef LOCAL_TEST
  in = fopen("input.txt", "r");
  if (!in) return -1;
#endif
  char buf[16];
  int ncount=-1;
  while (fgets(buf, sizeof(buf), in)) {
    if (ncount == -1) {
      long num = strtol(buf, NULL, 10);
      ncount = num;
    } else{
      long num = strtol(buf, NULL, 10);
      printf("%d\n",(int)calc(num));
      ncount--;
      if (ncount <= 0) break;      
    }
  }
#ifndef LOCAL_TEST
  fclose(in);
#endif
  return 0;
}