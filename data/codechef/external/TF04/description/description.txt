A pipeline consists of m distinct tasks numbered from 1 to m. Each cycle of the pipeline completes in time equal to the time taken by maximum duration task in that cycle of the pipeline. Given that total number of cycles are n (numbered from 1 to n), find the total time for the completion of all the cycles.
For (i+1)^th cycle, time taken to complete the first task is the cycle completion time of the previous cycle and the time taken to complete k^th task is wi more than the duration of (k-1)^th task of previous cycle (2<=k<=m).

Also, in first cycle, duration of all tasks = 5 sec except the first task which takes time 0 sec to complete.

Input
First line of input contains two space separated integers, n and m.
Second line contains n-1 space separated integers w1, .. , wn-1. 
1 <= n <= 100000 
1 <= m <= 100000 
1 <= wi <= 10

Output
A single integer which is the total completion time. (This value might not fit in a 32 bit integer but will fit in 64 bit integer).

Example

Input:
2 2
2

Output:
10

Explanation: First cycle takes 5 seconds to complete. For the next cycle, first task takes 5 seconds to complete (cycle completion time of previous cycle) while next task takes 2 seconds to complete. So overall, second cycle takes 5 seconds to complete. Total time = 10 seconds.
