#include <bits/stdc++.h>

using namespace std;

const int N = 305;
const long long INF = (long long)1e12;

long long dis[N][N];
int n, m, p, c;
bool recharge[N];

void FloydWarshall ()
{
	for (int i = 0; i < N; i++)
		dis[i][i] = 0;
	
	for (int k = 0; k < n; k++)
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				dis[i][j] = min (dis[i][j], dis[i][k] + dis[k][j]);
}

long long Solve ()
{
	if (!recharge[0])
		return -1;
	recharge[n - 1] = true;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			if (dis[i][j] > c || !recharge[i] || !recharge[j])
				dis[i][j] = INF;

	FloydWarshall ();
	return (dis[0][n - 1] < INF) ? dis[0][n - 1] : -1;
}

int main ()
{
	cin >> n >> m >> p >> c;
	int x, y;
	long long cost;
	
	memset (recharge, false, sizeof (recharge));
	memset (dis, 1, sizeof (dis));

	for (int i = 0; i < p; i++)
	{
		cin >> x;
		recharge[x] = true;
	}

	for (int i = 0; i < m; i++)
	{
		cin >> x >> y >> cost;
		dis[x][y] = dis[y][x] = min (dis[x][y], cost);
	}

	FloydWarshall ();
	cout << Solve () << endl;

	return 0;
}
