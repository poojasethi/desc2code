#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <queue>
using namespace std ;
struct node{
    int key ;
    struct node* link ;
    int parent ;
};
class graph{
private:
    struct node *head ;
    int siz ;
public:
    graph(int);
    bool add_edge(int,int);
    bool srch(int,int);
    bool bfs(int);
    bool print_graph();
    bool print_parents(int);
};
graph::graph(int n){
    siz = n ;
    head = new node[n];
    for(int i=0;i<n;i++){
        head[i].key=i;
        head[i].link = NULL ;
        head[i].parent=-1;
    }
}
bool graph::add_edge(int u,int v){
    struct node *p  = new node ;
    p->key = u  ;
    node *temp = head[v].link ;
    head[v].link = p ;
    p->link  = temp ;
    p->parent = -1 ;
    p = new  node ;
    p->key = v ;
    temp = head[u].link ;
    head[u].link  = p  ;
    p->link =  temp ;
    p->parent = -1;
    return true ;
}
bool graph::bfs(int root){
    queue <int> q ;
    q.push(root) ;
    bool stat[siz];
    for(int i=0;i<siz;i++){
        stat[i]=false;
    }
    stat[root]=true;
    while(!q.empty()){
          //  cout << "vikram" << endl;
            int x = q.front();
        node *temp = head[x].link ;
        q.pop() ;
        stat[x]=true;
        while(temp!=NULL){
            if(stat[temp->key]==0){
                    head[temp->key].parent = x ;
                    stat[temp->key]==1;
                    q.push(temp->key) ;
            }
            temp=temp->link ;
        }
    }
    return true;
}
bool graph::print_parents(int root){
    for(int i=0;i<siz;i++){
        if(i!=root){
            cout <<( head[i].parent + 1)<< " " ;
        }
    }
    cout << endl ;
}
int main(){
    int t;cin>>t;
    while(t--){
            int N,hq1,hq2;cin>>N>>hq1>>hq2;
            graph g(N);
            for(int i=0;i<N;i++){
                if(i!=hq1-1){
                    int j;cin>>j;
                    g.add_edge(j-1,i) ;
                }
            }
            g.bfs(hq2-1);
            g.print_parents(hq2-1) ;
    }
    return 0;
}
