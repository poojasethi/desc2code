#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int maxn = 1010;
char mp[maxn][maxn];
bool vis[maxn][maxn];
int n,m;
struct node{
    int x,y,t;
    bool isFire;
    node(int a = 0,int b = 0,int c = 0,bool isfire = true){
        x = a;
        y = b;
        t = c;
        isFire = isfire;
    }
};
queue<node>q;
bool isIn(int x,int y){
    return x < n && x >= 0 && y < m && y >= 0;
}
int bfs(){
    static const int dir[4][2] = {-1,0,1,0,0,-1,0,1};
    while(!q.empty()){
        node now = q.front();
        q.pop();
        for(int i = 0; i < 4; ++i){
            int tx = now.x + dir[i][0];
            int ty = now.y + dir[i][1];
            if(isIn(tx,ty)){
                if(!vis[tx][ty]){
                    vis[tx][ty] = true;
                    q.push(node(tx,ty,now.t+1,now.isFire));
                }
            }else if(!now.isFire) return now.t+1;
        }
    }
    return -1;
}
int main(){
    int kase,px,py;
    //scanf("%d",&kase);
    //while(kase--){
        scanf("%d %d",&n,&m);
        memset(vis,false,sizeof(vis));
        while(!q.empty()) q.pop();
        for(int i = 0; i < n; ++i){
            scanf("%s",mp[i]);
            for(int j = 0; j < m; ++j){
                if(mp[i][j] == 'F'){
                    vis[i][j] = true;
                    q.push(node(i,j,0,true));
                }else if(mp[i][j] == '#') vis[i][j] = true;
                else if(mp[i][j] == 'J') vis[px = i][py = j] = true;
            }
        }
        q.push(node(px,py,0,false));
        int ans = bfs();
        if(ans == -1) puts("IMPOSSIBLE");
        else printf("%d\n",ans);
    //}
    return 0;
}
/*
2
4 4
####
#JF#
#..#
#..#
3 3
###
#J.
#.F

*/

