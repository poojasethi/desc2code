#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>

#define INF 100000

using namespace std;

struct Point { int x, y; };

int dir[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
int bfs(int r, int c, int maze[][1001], queue<Point>& q) {
    int ans = INF;
    while(!q.empty()) {
        Point p = q.front();
        q.pop();
        int x = p.x, y = p.y, t = maze[p.x][p.y];
        for(int i = 0; i < 4; i ++) {
            int nx = x+dir[i][0], ny = y+dir[i][1];
            if (nx >= 0 && nx < r && ny >= 0 && ny < c) {
                if (maze[nx][ny] > t+1) {
                    q.push((Point){nx, ny});
                    maze[nx][ny] = t+1;
                }
            } else {
                ans = min(ans, t+1);
            }
        }
    }
    return ans;
}

void printm(int r, int c, int maze[][1001]) {
    for(int i = 0; i < r; i ++) {
        for(int j = 0; j < c; j ++) {
            printf("%2d ", maze[i][j]);
        }
        puts("");
    }
}

void solve() {
    int r, c, i, j, maze[1001][1001], jx, jy;
    char line[1005];
    queue<Point> joe;
    queue<Point> fire;
    
    scanf("%d%d", &r, &c);
    for(i = 0; i < r; i ++) {
        scanf("%s", line);
        for(j = 0; j < c; j ++) {
            switch(line[j]) {
            case 'F':
                maze[i][j] = 0;
                fire.push((Point){i, j});
                break;
            case '#':
                maze[i][j] = -1;
                break;
            case '.':
                maze[i][j] = INF;
                break;
            case 'J':
                joe.push((Point){i, j});
                jx = i, jy = j;
                break;
            }
        }
    }

    bfs(r, c, maze, fire);
    //printm(r, c, maze);
    maze[jx][jy] = 0;
    int ans = bfs(r, c, maze, joe);
    if (ans < INF) {
        printf("%d\n", ans);
    } else {
        puts("IMPOSSIBLE");
    }
}

int main() {
    solve();
    return 0;
}
