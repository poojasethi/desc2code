/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name : parking.cpp
* Creation Date : 18-10-2013
* Last Modified : Fri 18 Oct 2013 11:17:55 AM IST
* Created By :  Vishal Gupta IIIT-H
_._._._._._._._._._._._._._._._._._._._._.*/
                                   
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstdio>
#include <stack>
#include <vector>
#include <cstring>
#include <set>
#include <map>
#include <bitset>
#include <string>
#include <queue>
using namespace std;

#define sz(a) int((a).size())
#define all(c) c.begin(),c.end() //all elements of a container
#define rall(c) c.rbegin(),c.rend() 
#define tr(container,it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) //traversing a container..works for any type of container
#define present(container, element) (container.find(element) != container.end())    //used for set...return 1 if el is ps 0 otherwise
#define cpresent(container, element) (find(all(container),element) != container.end())  //same as present...but is for vectors
#define INF		INT_MAX
#define FOR(i,a,b) 	for( i= (int )a ; i < (int )b ; ++i)
#define rep(i,n) 	FOR(i,0,n)
#define FORD(i,a,b) for( i = (a); i>= (int) b; i--)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d ",n)
#define pil(n) printf("%d\n",n)
#define piL(n) printf("%lld ",n)
#define piLL(n) printf("%lld\n",n)
#define sl(n) scanf("%lld",&n)
#define sd(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define PB push_back
#define MP make_pair
#define scan(v,n)	vector<int> v;rep(i,n){ int j;si(j);v.PB(j);}
#define fill(a,b) memset(a,b,sizeof(a))
#define mod (int) 2147483647
#define pn printf("\n")
typedef long long int LL;
typedef vector <int> VI;
typedef pair < int ,int > PII;
typedef vector < PII > VPII;
template<class T>inline T gcd(T a,T b){return b?gcd(b,a%b):a;}
template<class T> inline T LCM(T a,T b){if(a<0)return LCM(-a,b);if(b<0)return LCM(a,-b);return a*(b/gcd(a,b));}
int g[110][110];
int n,m;
int dfs(int x, int y ,int time1)
{
      if(g[x+1][y]==mod && g[x][y+1]==mod) return time1;    
    //  int temp1, temp2;
      if(g[x+1][y]< g[x][y+1]) return dfs(x+1,y,time1+1);
      else return dfs(x,y+1,time1+1);
}
int main()
{
      int i,j,ans,T,t;
       si(t);
       rep(T,t)
       {
             si(m); si(n);
             rep(i,m) rep(j,n) si(g[i][j]);
             rep(i,m) g[i][n]=mod;
             rep(i,n) g[m][i]=mod;
             ans=dfs(0,0,0); 
             pil(ans);
       }
      return 0;
}
