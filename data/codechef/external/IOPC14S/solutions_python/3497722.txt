import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;

public class Main {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static void solve()
	{
		// E_cur = sum_pre E_pre * p(pre->cur) + P_cur * t_cur
		// E_cur = (sum_pre E_pre+(sum P_pre)*t_cur) * p(pre->cur)
		// P_cur = sum_pre P_pre * p(pre->cur)
		int cas = 1;
		while(true){
			int n = ni(), m = ni(), Q = ni();
			if(n == 0 && m == 0 && Q == 0)break;
			int[][] rates = new int[n][n];
			int[] ratesum = new int[n];
			int[][] dats = new int[m][];
			DJSet ds = new DJSet(n);
			for(int i = 0;i < m;i++){
				int f = ni()-1, t = ni()-1;
				ds.union(f, t);
				rates[f][t] = rates[t][f] = ni();
				ratesum[f] += rates[f][t];
				ratesum[t] += rates[t][f];
				dats[i] = new int[]{f, t, ni(), ni()};
			}
			out.println("Case #" + (cas++) + ":");
			double[][] M = new double[2*n][2*n];
			for(int i = 0;i < m;i++){
				int f = dats[i][0];
				int t = dats[i][1];
				double p1 = (double)rates[f][t]/ratesum[f];
				double p2 = (double)rates[t][f]/ratesum[t];
				M[t+n][f+n] += p1;
				M[t][f] += p1;
				M[f+n][t+n] += p2;
				M[f][t] += p2;
				M[t+n][f] += p1 * dats[i][2];
				M[f+n][t] += p2 * dats[i][3];
//				M[t+n][f+n] = M[t][f] = 
//				M[f+n][t+n] = M[f][t] = 
//				M[t+n][f] += M[t][f] * dats[i][2];
//				M[f+n][t] += M[f][t] * dats[i][3];
			}
			int[] map = new int[n];
			int z = 0;
			for(int i = 0;i < n;i++){
				if(ds.equiv(i, 0)){
					map[i] = z++;
				}else{
					map[i] = -1;
				}
			}
			double[][] T = new double[2*z][2*z];
			for(int i = 0;i < n;i++){
				for(int j = 0;j < n;j++){
					if(map[i] != -1 && map[j] != -1){
						T[map[i]][map[j]] = M[i][j];
						T[map[i]+z][map[j]] = M[i+n][j];
						T[map[i]][map[j]+z] = M[i][j+n];
						T[map[i]+z][map[j]+z] = M[i+n][j+n];
					}
				}
			}
			
			for(int q = 0;q < Q;q++){
				int al = ni()-1;
				if(!ds.equiv(0, al)){
					out.println("INFINITE");
					continue;
				}
				al = map[al];
				double e = 0;
				{
					double[][] MM = new double[2*z][];
					for(int i = 0;i < 2*z;i++){
						MM[i] = Arrays.copyOf(T[i], 2*z);
					}
					for(int i = 0;i < z;i++){
						MM[i][al] = 0;
						MM[i+z][al] = 0;
						MM[i+z][al+z] = 0;
					}
					
					double[] v = new double[2*z];
					v[0] = 1;
					double[] st = steady(MM, v);
					if(st == null){
						e = Double.POSITIVE_INFINITY;
					}else{
						e += st[al+z];
					}
				}
				{
					double[][] MM = new double[2*z][];
					for(int i = 0;i < 2*z;i++){
						MM[i] = Arrays.copyOf(T[i], 2*z);
					}
					for(int i = 0;i < z;i++){
						MM[i][0] = 0;
						MM[i+z][0] = 0;
						MM[i+z][0+z] = 0;
					}
					
					double[] v = new double[2*z];
					v[al] = 1;
					double[] st = steady(MM, v);
					if(st == null){
						e = Double.POSITIVE_INFINITY;
					}else{
						e += st[0+z];
					}
				}
				if(e == Double.POSITIVE_INFINITY){
					out.println("INFINITE");
				}else{
					out.printf("%.4f\n", e);
				}
			}
		}
	}
	
	public static class DJSet {
		public int[] upper;

		public DJSet(int n) {
			upper = new int[n];
			Arrays.fill(upper, -1);
		}

		public int root(int x) {
			return upper[x] < 0 ? x : (upper[x] = root(upper[x]));
		}

		public boolean equiv(int x, int y) {
			return root(x) == root(y);
		}

		public boolean union(int x, int y) {
			x = root(x);
			y = root(y);
			if (x != y) {
				if (upper[y] < upper[x]) {
					int d = x;
					x = y;
					y = d;
				}
				upper[x] += upper[y];
				upper[y] = x;
			}
			return x == y;
		}

		public int count() {
			int ct = 0;
			for (int u : upper)
				if (u < 0)
					ct++;
			return ct;
		}
	}
	
	public static double[] mul(double[][] A, double[] v)
	{
		int m = A.length;
		int n = v.length;
		double[] w = new double[m];
		for(int i = 0;i < m;i++){
			double sum = 0;
			for(int k = 0;k < n;k++){
				sum += A[i][k] * v[k];
			}
			w[i] = sum;
		}
		return w;
	}
	
	// double行列の2乗
	public static double[][] p2(double[][] A)
	{
		int n = A.length;
		double[][] C = new double[n][n];
		for(int i = 0;i < n;i++){
			for(int k = 0;k < n;k++){
				for(int j = 0;j < n;j++){
					C[i][j] += A[i][k] * A[k][j];
				}
			}
		}
		return C;
	}
	
	// A^e*v
	public static double[] pow(double[][] A, double[] v, int m)
	{
		double[][] mu = A;
		double[] r = v;
		for(;m > 0;m>>>=1){
			if((m&1)==1)r = mul(mu, r);
			mu = p2(mu);
		}
		return r;
	}
	
	public static double[] steady(double[][] T, double[] v)
	{
		int n = T.length;
		double[][] U = new double[n][n];
		for(int i = 0;i < n;i++){
			for(int j = 0;j < n;j++){
				U[i][j] = (i == j ? 1 : 0) - T[i][j];
			}
		}
		return solve(U, v);
	}
	
	public static double[] solve(double[][] a, double[] c)
	{
		int n = a.length;
		int[] ps = new int[n];
		for(int i = 0;i < n;i++)ps[i] = i;
		
		// Forward Elimination
		for(int i = 0;i < n;i++){
			int pivot = -1;
			int from = -1;
			double amax = 0;
			for(int j = i;j < n;j++){
				if(Math.abs(a[ps[j]][i]) > amax){
					amax = Math.abs(a[ps[j]][i]);
					pivot = ps[j];
					from = j;
				}
			}
			if(pivot == -1)return null;
			int d = ps[i]; ps[i] = ps[from]; ps[from] = d;
			
			for(int j = i+1;j < n;j++){
				a[ps[i]][j] /= a[ps[i]][i];
			}
			c[ps[i]] /= a[ps[i]][i];
			a[ps[i]][i] = 1.0;
			for(int j = i+1;j < n;j++){
				for(int k = i+1;k < n;k++){
					a[ps[j]][k] -= a[ps[j]][i] * a[ps[i]][k];
				}
				c[ps[j]] -= a[ps[j]][i] * c[ps[i]];
				a[ps[j]][i] = 0.0;
			}
			
		}
		
		// Back Substitution
		for(int i = n-1;i >= 0;i--){
			for(int j = i-1;j >= 0;j--){
				c[ps[j]] -= a[ps[j]][i] * c[ps[i]];
			}
		}
		
		double[] ret = new double[n];
		for(int i = 0;i < n;i++){
			ret[i] = c[ps[i]];
		}
		
		return ret;
	}
	
	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	private static boolean eof()
	{
		if(lenbuf == -1)return true;
		int lptr = ptrbuf;
		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
		
		try {
			is.mark(1000);
			while(true){
				int b = is.read();
				if(b == -1){
					is.reset();
					return true;
				}else if(!isSpaceChar(b)){
					is.reset();
					return false;
				}
			}
		} catch (IOException e) {
			return true;
		}
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private static double nd() { return Double.parseDouble(ns()); }
	private static char nc() { return (char)skip(); }
	
	private static String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private static char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private static char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private static int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}
