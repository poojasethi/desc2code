#include<iostream>
#include<vector>
#include<stack>

using namespace std;

#define pb push_back

int ans[100005];

struct Graph
{
  int n;
  int m;
  vector<int> nei[100005];
  bool vis[100005];
  stack<int> st;

  void dfs(int u)
  {
    //cout<<u<<" "<<nei[u].size()<<endl;
    int i;
    for(i=0;i<nei[u].size();++i)
    {
      int v = nei[u][i];
      //cout<<"V:"<<u<<i<<v<<endl;
      if(vis[v]==false)
      {
        vis[v] = true;
        dfs(v);
      }
      //cout<<"hello"<<endl;
    }
    st.push(u);
    //cout<<"thevi"<<endl;
  }

  void topologicalSort()
  {
    int i;
    for(i=0;i<n;++i)
      vis[i] = false;
    while(!st.empty())
      st.pop();

//std:://cout << "!!" << std::endl;

    for(i=n-1;i>=0;--i)
    {
      //cout<<"i: "<<i<<endl;
      if(vis[i]==false)
      {
        //cout<<"going to do dfs for i: "<<i<<endl;
        vis[i] = true;
        dfs(i);
        //cout<<"dfs of i:"<<i<<"over"<<endl;
      }
    }
      //cout<<"@@"<<endl;
    i = n;
    //cout<<"ASD"<<endl;
    while(i>0)
    {
      int t = st.top();
      st.pop();
      ans[t] = i--;
    }
  }
};

int main()
{
  string s;
  cin>>s;
  Graph g;
  g.n = s.size() + 1;
  g.m = s.size();
  int i;
  for(i=0;i<s.size();++i)
    if(s[i]=='C')
      g.nei[i+1].pb(i);
    else if(s[i]=='T')
      g.nei[i].pb(i+1);

  g.topologicalSort();
  for(i=0;i<g.n;++i)
    cout<<ans[i]<<" ";
}
