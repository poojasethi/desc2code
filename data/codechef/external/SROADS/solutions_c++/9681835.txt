#include<bits/stdc++.h>
#define ll long long
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
using namespace std;
#define N (int)(1e5+4)
int par[N],depth[N],mind[N];
bool vis[N];
ll sz[N];
vector<int> G[N];
int parent(int pos)
{
	if(par[pos] != pos)
		par[pos] = parent(par[pos]);
	return par[pos];
}
void dfs(int pos, int prev)
{
	depth[pos] = 1+depth[prev];
	mind[pos] = depth[pos];
	vis[pos] = true;
	for (int i = 0; i < G[pos].size(); ++i)
	{
		int v = G[pos][i];
		if(v == prev)
			continue;
		if(vis[v])
			mind[pos] = min(mind[pos],depth[v]);
		else
		{
			dfs(v,pos);
			if(mind[v] <= depth[pos]) // not bridge
			{
				int pu = parent(pos), pv = parent(v);
				par[pv] = pu;
			}
			mind[pos] = min(mind[pos],mind[v]);
		}
	}
}
void solve(){
    int n,m;
    scanf("%d %d",&n,&m);
    for(int i=1;i<=n;i++){
        par[i]=i;
    }
    for(int i=1;i<=m;i++){
        int x,y;
        scanf("%d %d",&x,&y);
        G[x].pb(y);
        G[y].pb(x);
    }
    for(int i=1;i<=n;i++){
        if(!vis[i])
            dfs(i,0);
    }
    for(int i=1;i<=n;i++){
        sz[parent(i)]++;
    }
    ll ans=0;
    for(int i=1;i<=n;i++){
        ans+=((sz[i]*(sz[i]-1))/2ll);
    }
    printf("%lld",ans);
}
int main(){
   //ios_base::sync_with_stdio(false);
   int t=1;
   for(int i=1;i<=t;i++){
       //printf("Case #%d: ",i);
       solve();
   }
   return 0;
}
