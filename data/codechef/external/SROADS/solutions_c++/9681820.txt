#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100005;
vector <int> G[MAXN];
int depth[MAXN],mind[MAXN],par[MAXN];
long long int sz[MAXN];
bool vis[MAXN];
int parent(int pos)
{
	if(par[pos] != pos)
		par[pos] = parent(par[pos]);
	return par[pos];
}
void dfs(int pos, int prev)
{
	depth[pos] = 1+depth[prev];
	mind[pos] = depth[pos];
	vis[pos] = true;
	for (int i = 0; i < G[pos].size(); ++i)
	{
		int v = G[pos][i];
		if(v == prev)
			continue;
		if(vis[v])
			mind[pos] = min(mind[pos],depth[v]);
		else
		{
			dfs(v,pos);
			if(mind[v] <= depth[pos]) // not bridge
			{
				int pu = parent(pos), pv = parent(v);
				par[pv] = pu;
			}
			mind[pos] = min(mind[pos],mind[v]);
		}
	}
}
int main()
{
	int n,m;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; ++i)
	{
		int u,v;
		scanf("%d %d", &u, &v);
		G[u].push_back(v);
		G[v].push_back(u);
	}
	for (int i = 1; i <= n; ++i)
		par[i] = i;
	for (int i = 1; i <= n; ++i)
		if(!vis[i])
			dfs(i,0);
	for (int i = 1; i <= n; ++i)
		sz[parent(i)]++;
	long long int ans = 0;
	for (int i = 1; i <= n; ++i)
		ans+=(sz[i]*(sz[i]-1))/2ll;
	printf("%lld", ans);
	return 0;
} 