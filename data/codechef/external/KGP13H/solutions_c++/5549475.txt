#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long
#define pb push_back
const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}

struct Edge
{
  int u,v,flow,cap;

  Edge(int u,int v,int flow,int cap)
  {
    this->u=u;
    this->v=v;
    this->flow=flow;
    this->cap=cap;
  }
};
vector<Edge> e;
vector<vector<int> > G;
int source,sink; 
int ptr[1000];
int dist[1000];
void addEdge(int u,int v,int cap)
{
  G[u].push_back(e.size());
  e.push_back(Edge(u,v,0,cap));
  G[v].push_back(e.size());
  e.push_back(Edge(v,u,0,0));

}

bool findPath()
{
  memset(dist,-1,sizeof dist);
  queue<int> Q;
  dist[source]=0;
  Q.push(source);
  while(!Q.empty())
  {
    int u=Q.front();
    Q.pop();

    for(int i=0;i<G[u].size();++i)
    {
      int id=G[u][i];
      int v=e[id].v;
      if(dist[v]==-1 && e[id].flow<e[id].cap)
      {
        dist[v]=dist[u]+1;
        Q.push(v);
        if(v==sink)
          return true;
      }
    }
  }
  return false;

}

int sendFlow(int u,int flow)
{
  if(u==sink || flow==0)
    return flow;

  for(;ptr[u]<G[u].size();++ptr[u])
  {
    int id=G[u][ptr[u]];
    int v=e[id].v;

    if(dist[v]!=dist[u]+1)
      continue;
    int pushed=sendFlow( v,min(flow, e[id].cap-e[id].flow  )  );
    if(pushed)
    {
      e[id].flow+=pushed;
      e[id^1].flow-=pushed;
      return pushed;
    }
  }
  return 0;
}
int dinics()
{ 
  int flow=0;
  while(findPath())
  {
    memset(ptr,0,sizeof ptr);
    while(int pushed=sendFlow(source,infinity))
        flow+=pushed;
  }
  return flow;
}
int main()
{
  std::ios::sync_with_stdio(false);
  
  
  int t;
  cin>>t;
  int tt=0;
  while(t--)
  {
    cout<<"Case "<<++tt<<": ";
    int n,m;
    cin>>n>>m;
    source=0;
    sink=n+m+1;
    G.clear();
    e.clear();
    G.resize(sink+1);
    
    for(int i=1;i<=n;++i)
    {
      addEdge(i,sink,1);
      int x;
      cin>>x;
      addEdge(source,i,x);
    }

    for(int i=1;i<=m;++i)
    {
      for(int j=1;j<=n;++j)
      {
        int x;
        cin>>x;

        /* willing to give */
        if(x>=2)
          addEdge(n+i,j,x-1);

        /* willing to take */
        if(x==0)
          addEdge(j,n+i,1);
      }
    }

    cout<<dinics()<<"\n";
  }




  
}