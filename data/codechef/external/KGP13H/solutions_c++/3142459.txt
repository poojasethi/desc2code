#include <iostream>
#include <cstring>
#include <queue>
#include <vector>

using namespace std;

int cap[501][501];
int n, k;
int val;

int maxflow()
{
    bool flow = true;
    int ans = 0;
    while(flow) {
        flow = false;
        queue<int> pq;
        vector<int> vis(n+k+2);
        pq.push(0);
        int from[n+k+2];
        memset(from, -1, sizeof(from));
        while(!pq.empty())
        {
            int pos = pq.front();
            pq.pop();
            vis[pos] = 1;
            if(pos == n+k+1) break;
            for(int i = 0; i < n+k+2; i++) {
                if(cap[pos][i] && !vis[i]) {
                    pq.push(i);
                    from[i] = pos;
                }
            }
        }

        if(vis[n+k+1]) flow = true;
        else break;
        int pos = n+k+1;
        while(pos != 0) {
            cap[from[pos]][pos]--;
            cap[pos][from[pos]]++;
            pos = from[pos];
        }
        ans++;
    }
    return ans;
}

int main()
{
    int t;

    cin >> t;
    int cs = 0;
    while(t--) {
        cin >> n >> k;
        memset(cap, 0, sizeof(cap));
        for(int i = 0; i < n; i++) {
            cin >> val;
            cap[0][i+1] = val;
            cap[i+1][0] = 0;
            cap[i+1][n+k+1] = 1;
            cap[n+k+1][i+1] = 0;
        }
        cs++;
        for(int i = 0; i < k; i++) {
            for(int j = 0; j < n; j++) {
                cin >> val;
                if(!val) {
                    cap[j+1][n+i+1] = 1;
                }
                else cap[i+n+1][j+1] = val-1;
            }
        }

        cout << "Case " << cs << ": " << maxflow() << endl;
    }
}
