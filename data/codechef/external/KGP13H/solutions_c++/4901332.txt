/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%d",&n);
#define MAXN 2222
struct debugger{template<typename T> debugger& operator,(const T& v){cerr<<v<<" ";return *this;}}dbg;
#define db(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)
const int INF = INT_MAX;
#define INF INT_MAX 
int cap[MAXN][MAXN];
int visit[MAXN];
int n;
int s,t;
int limit=INT_MAX;
int dfs(int u,int t,int c)
{
    if(visit[u])
        return false;
    visit[u]=1;
    if(u==t) return true;
    for(int i=0;i<n;i++)
    {
        if(cap[u][i]>=c&&dfs(i,t,c))
        {
            cap[u][i]-=c;
            cap[i][u]+=c;
            return true;
        }
    }
    return false;
}
int maxflow()
{
    int flow=0;
    int c=limit;
    while(c)
    {
        for(int i=0;i<n;i++) visit[i]=0;
        int f=dfs(s,t,c);
        if(!f)
            c/=2;
        else
            flow+=c;
        //db(flow);
        if(flow>=limit)
            return flow=limit;
    }
    return flow;
}

int main()
{
    //freopen("in","r",stdin);

    int kase=1;
    int test;s(test);
    while(test--)
    {
        int m,k;cin>>k>>m;
        vector<int> v(k);
        for(int i=0;i<k;i++)
            s(v[i]);
        vector< vector<int> > have=vector< vector<int> >(m,vector<int>(k,0));
        for(int i=0;i<m;i++)
            for(int j=0;j<k;j++)
                s(have[i][j]);
        s=0;
        t=m+k+1;
        n=m+k+2;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                cap[i][j]=0;

        for(int i=1;i<=k;i++)
            cap[s][i]=v[i-1];
        for(int i=1;i<=k;i++)
            cap[i][t]=1;
        for(int i=k+1;i<=k+m;i++)
        {
            for(int j=1;j<=k;j++)
            {
                if(have[i-k-1][j-1])
                {
                    cap[i][j]=have[i-k-1][j-1]-1;
                }
                else
                {
                    cap[j][i]=1;
                }

            }
        }
        printf("Case %d: %d\n",kase++,maxflow());
    }

    return 0;
}

