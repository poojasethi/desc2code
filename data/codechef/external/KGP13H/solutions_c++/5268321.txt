#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <bitset>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <map>
#include <cassert>

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define mod 1000000007
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define S1(x) scanf("%lld",&x)
#define epsilon 0.000000000000001
#define pie acos (-1.0)
#define MAXNODES 100001
#define sz size()
#define MAX 100009
#define gc getchar
using namespace std;

//Author: Aman Choudhary
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <map>
#include <cassert>
#define mod  1000000007
#define PHI 1000000006
#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define S1(x) scanf("%lld",&x)
const int INF = 1000 * 1000 * 1000;
using namespace std;

int source,sink,n;
vector< vector <int> > s,g;
vector <bool> used;

bool is_path(int s, int t, int c)
{
    if(s == t) return true;
    if(used[s]) return false;
    used[s] = true;
    for(int i = 0; i < n; i++)
        if(g[s][i] >= c && is_path(i, t, c)) {
            g[s][i]-=c;
            g[i][s]+=c;
            return true;
        }
    return false;
}

int max_flow(int s, int t, vector<vector<int> > &_g)//& is used for changing _g in up-level min_cut function
{
    g = _g;
    n = g.size();
    used = vector<bool> (n, false);

    int flow = 0, c = INF;
    while(c > 0) {
        if(is_path(s, t, c))
            flow += c;
        else
            c /= 2;
        fill(used.begin(), used.end(), false);
    }
    return flow;
}

int type[109];
int ss[109][109];

int main()
{
   // freopen ("input.txt", "r", stdin);

    int ii = 1;
    int t;
    S (t);
    while (t--) {
        printf ("Case %d: ", ii++);
        int n,m;
        S (n);
        S (m);
        int i,j;
        F (i, 0, n) S (type[i]);
        F (i, 0, m) F (j, 0, n) S (ss[i][j]);

        s.clear();
        s.resize (n+m+2);
        F (i, 0, n+m+2) {
            s[i].resize (n+m+2);
            fill (s[i].begin(), s[i].end(), 0);
        }

        int total=n+m+2;
        source = 0;
        sink = n+m+1;

        F (i, 1, n+1) s[source][i] = type[i-1];
        F (i, 1, n+1) s[i][sink] = 1;


        F (i, 0, m) {
            F (j, 0, n) {
                if (ss[i][j] == 0) {
                    s[j+1][n+1+i] = 1;
                    continue;
                }
                if (ss[i][j] > 1) {
                    s[n+1+i][j+1] = ss[i][j]-1;
                    continue;
                }
            }
        }
        ::n = total;
        int ans = max_flow(source, sink, s);
        printf ("%d\n", ans);
    }

    return 0;
}
