#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int N = 333;
const int M = 30100;
const int inf = (int)1e9;

struct edge {
    int x, y, cap, flow;
};

edge e[M];
int cur[M], d[M];
vector <int> adj[M];

struct DinicFlow {
    int esize, n, source, sink;

    DinicFlow() {}

    DinicFlow(int v) {
        n = v;
        esize = 0;
        rep(i, n + 1) adj[i].clear();
    }

    void addEdge(int from, int to, int cap) {
        edge e1 = {from, to, cap, 0};
        edge e2 = {to, from, 0, 0};
        adj[from].push_back(esize); e[esize++] = e1;
        adj[to].push_back(esize); e[esize++] = e2;
    }

    int bfs() {
        queue <int> q;
        for(int i = 0; i <= n; ++i) d[i] = -1;
        q.push(source); d[source] = 0;
        while(!q.empty() and d[sink] < 0) {
            int x = q.front(); q.pop();
            for(int i = 0; i < (int)adj[x].size(); ++i) {
                int id = adj[x][i], y = e[id].y;
                if(d[y] < 0 and e[id].flow < e[id].cap) {
                    q.push(y); d[y] = d[x] + 1;
                }
            }
        }
        return d[sink] >= 0;
    }

    int dfs(int x, int flow) {
        if(!flow) return 0;
        if(x == sink) return flow;
        for(;cur[x] < (int)adj[x].size(); ++cur[x]) {
            int id = adj[x][cur[x]], y = e[id].y;
            if(d[y] != d[x] + 1) continue;
            int pushed = dfs(y, min(flow, e[id].cap - e[id].flow));
            if(pushed) {
                e[id].flow += pushed;
                e[id ^ 1].flow -= pushed;
                return pushed;
            }
        }
        return 0;
    }

    int maxFlow(int src, int snk) {
        this->source = src; this->sink = snk;
        int flow = 0;
        while(bfs()) {
            for(int i = 0; i <= n; ++i) cur[i] = 0;
            while(int pushed = dfs(source, inf)) {
                flow += pushed;
            }
        }
        return flow;
    }
};

int a[N], g[N][N];

int main() {
    int T; gi(T);
    rep(z, T) {
        int k, m;
        gi(k), gi(m);
        rep(i, k) gi(a[i]);
        rep(i, m) rep(j, k) gi(g[i][j]);
        DinicFlow df(N);
        int src = 0, snk = k + m + 1;
        rep(i, k) {
            df.addEdge(src, i + 1, a[i]);
            df.addEdge(i + 1, snk, 1);
        }

        rep(i, k) {
            rep(j, m) if(!g[j][i]) {
                df.addEdge(i + 1, k + 1 + j, 1);
            } 
        }

        rep(i, m) {
            rep(j, k) if(g[i][j] > 1) {
                df.addEdge(k + 1 + i, j + 1, g[i][j] - 1);
            }
        }
        printf("Case %d: %d\n", z + 1, df.maxFlow(src, snk));
    }
    return 0;
}