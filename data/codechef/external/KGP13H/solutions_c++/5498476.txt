#include <iostream>
#include <limits.h>
#include <string.h>
#include <queue>
#include<cstdio>
using namespace std;
int V;
int graph[500][500];
int rGraph[500][500];
bool bfs(int s, int t, int parent[])
{
    bool visited[V];
    memset(visited, 0, sizeof(visited));

    queue <int> q;
    q.push(s);
    visited[s] = true;
    parent[s] = -1;

    // Standard BFS Loop
    while (!q.empty())
    {
        int u = q.front();
        q.pop();

        for (int v=0; v<V; v++)
        {
            if (visited[v]==false && rGraph[u][v] > 0)
            {
                q.push(v);
                parent[v] = u;
                visited[v] = true;
            }
        }
    }

    // If we reached sink in BFS starting from source, then return
    // true, else false
    return (visited[t] == true);
}

// Returns tne maximum flow from s to t in the given graph
int fordFulkerson(int s, int t)
{
    int u, v;

    // Create a residual graph and fill the residual graph with
    // given capacities in the original graph as residual capacities
    // in residual graph
    //int rGraph[V][V]; // Residual graph where rGraph[i][j] indicates
                     // residual capacity of edge from i to j (if there
                     // is an edge. If rGraph[i][j] is 0, then there is not)
    for (u = 0; u < V; u++)
        for (v = 0; v < V; v++)
             rGraph[u][v] = graph[u][v];

    int parent[V];  // This array is filled by BFS and to store path

    int max_flow = 0;  // There is no flow initially

    // Augment the flow while tere is path from source to sink
    while (bfs(s, t, parent))
    {
        // Find minimum residual capacity of the edhes along the
        // path filled by BFS. Or we can say find the maximum flow
        // through the path found.
        int path_flow = INT_MAX;
        for (v=t; v!=s; v=parent[v])
        {
            u = parent[v];
            path_flow = min(path_flow, rGraph[u][v]);
        }

        // update residual capacities of the edges and reverse edges
        // along the path
        for (v=t; v != s; v=parent[v])
        {
            u = parent[v];
            rGraph[u][v] -= path_flow;
            rGraph[v][u] += path_flow;
        }

        // Add path flow to overall flow
        max_flow += path_flow;
    }

    // Return the overall flow
    return max_flow;
}
int main()
{
    int t,k,m;
    scanf("%d",&t);
    for(int te=1;te<=t;te++){
        scanf("%d%d",&k,&m);

        V = k+m+2;
        for(int i=0;i<500;i++)
            for(int j=0;j<500;j++)
                graph[i][j] = 0;
        for(int i=0;i<k;i++){
            scanf("%d",&graph[0][i+1]);
            graph[i+1][k+m+1] = 1;
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<k;j++){
                int x;
                scanf("%d",&x);
                if(x==0){
                    graph[j+1][k+1+i] = 1;
                }
                else if(x>1){
                    graph[k+1+i][j+1] = x-1;
                }
            }
        }

        cout << "Case " <<te<<": "<<fordFulkerson(0, V-1)<<endl;
    }
}
