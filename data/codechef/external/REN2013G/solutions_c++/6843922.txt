#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<vector>
#include<algorithm>
#include<numeric>
#include<stack>
#include<queue>
#include<deque>
#include<bitset>
#include<list>
#include<set>
#include<map>
#define vi vector<int>
#define vvi vector< vi >
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end() 
#define sz(c) c.size()
#define tr(c,it)  for(typeof(c.begin()) it=c.begin();it!=c.end();it++)  
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define abs(a)  (a>=0?a:-a)
#define present(c,x) find(all(c),x)!=c.end()
#define cpresent(c,x) c.find(x)!=c.end()  
#define permute(c) next_permutation(all(c))
#define piii pair< pii,int>
#define INF (1<<9)
using namespace std;
int coord[1005][2];
int dist[1005];
bool mark[1005];
priority_queue<pii > q;
int calc(int i,int b)
{
    return (coord[i][0]-coord[b][0])*(coord[i][0]-coord[b][0])+(coord[i][1]-coord[b][1])*(coord[i][1]-coord[b][1]);
}
int main(){
     int N,i;
     scanf("%d",&N);
     memset(dist,1111111,sizeof(dist));
     memset(mark,false,sizeof(mark));
     coord[0][0]=coord[0][1]=0;
     for(i=1;i<=N+1;i++)
     	scanf("%d%d",&coord[i][0],&coord[i][1]);
	 q.push(pii(0,0));
	 dist[0]=0;
	 while(!q.empty()){
	 	    int d=-q.top().first;
	 	    int u=q.top().second;
	 	    q.pop();
	 	    for(i=1;i<=N+1;i++){
	 	    	int w=calc(i,u);
	 	    	if(!mark[i]&&d+w<dist[i]){
	 	    		dist[i]=d+w;
	 	    		q.push(pii(-dist[i],i));
	 	    		
	 	    	}	
	 	    }
	 	    mark[u]=true;
	 	    
	 }
	 printf("%d",dist[N+1]);
	return 0;
}