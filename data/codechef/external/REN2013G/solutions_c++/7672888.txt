#include <iostream>
#include <vector>
#include <queue>
#include <math.h>
#include <float.h>
 
using namespace std;
 
class Coordinates
{
	public:
	int x, y, idx;
 	double dist;
};
 
class Compare
{
	public:
	bool operator() (Coordinates obj1, Coordinates obj2)
	{
		return (obj1.dist > obj2.dist);
	}
};
 
double calc_dist(int x1, int y1, int x2, int y2)
{
	return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
}
 
double dijkstra(vector<Coordinates> &vec, bool * visited, int n)
{
	priority_queue<Coordinates, vector<Coordinates>, Compare> pq;
	Coordinates tmpc = vec[0];
	pq.push(tmpc);
	
	int x, y, idx;
	double dist;
	
	while(!pq.empty())
	{
		tmpc = pq.top();
		pq.pop();
		
		x = tmpc.x;
		y = tmpc.y;
		dist = tmpc.dist;
		idx = tmpc.idx;
 
		if(idx == (n-1))
			return dist;
			
		if(visited[idx])
			continue;
		visited[idx] = true;
			
		for(int i = 0; i < n; i++)
		{
			if(visited[i])
				continue;
				
			tmpc = vec[i];
			tmpc.dist = dist + calc_dist(x, y, tmpc.x, tmpc.y);
			pq.push(tmpc);
		}
	}
	return -1;
}
 
int main()
{
	int n;
	cin >> n;
	n += 2;
	
	Coordinates tmpc;
	tmpc.x = 0;
	tmpc.y = 0;
	tmpc.idx = 0;
	tmpc.dist = 0;
	
	vector<Coordinates> vec; 
	vec.push_back(tmpc);
	
	tmpc.dist = DBL_MAX;
	for(int i = 1; i < n; i++)
	{
		tmpc.idx = i;
		cin >> tmpc.x >> tmpc.y;
		vec.push_back(tmpc);
	}
 
	bool *visited = new bool[n+1];
	for(int i = 0; i < n; i++)
		visited[i] = false;
	
	cout << dijkstra(vec, visited, n) << endl;
	
	return 0;
}	
	
