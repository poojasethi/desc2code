#include<bits/stdc++.h>
using namespace std;
#define pp pair<int,double>
class mycomp{
	public:
	bool operator() (pair<int,double> s, pair<int,double> t){
		if(s.second!=t.second) return (s.second>t.second);
		return (s.first>t.first);
	}
};
int main() {
	int n;
	cin>>n;
	int x,y;
	vector<pair<int,int> > coods;
	coods.push_back(make_pair(0,0));
	while(n--){
	  cin>>x>>y;
	  coods.push_back(make_pair(x,y));
	  }
	cin>>x>>y;
	coods.push_back(make_pair(x,y));
	int noofnodes = coods.size();
	vector<bool> visited(noofnodes,false);
	vector<int> dist(noofnodes,INT_MAX);
	//cout<<noofnodes;
	dist[0]=0;
	vector<vector<pair<int,double> > > adjlist(noofnodes);
	for(int i=0;i<noofnodes;i++){
		for(int j=0;j<noofnodes;j++){
			if(i!=j){
				double distance = pow((coods[j].first-coods[i].first),2) + pow((coods[j].second-coods[i].second),2);
				adjlist[i].push_back(make_pair(j,distance));
			}
		}
	}
	priority_queue<pair<int,double> , vector<pair<int,double> >, mycomp> pq;
	pq.push(make_pair(0,0));
	while(!pq.empty()){
		pair<int,double> tp = pq.top();
		int topnode = tp.first;
		double disttopnode = tp.second;
		if(topnode==noofnodes-1){
				cout<<disttopnode;
				break;
			}
	    pq.pop();
		if(!visited[topnode]){
			//cout<<topnode<<endl;
			visited[topnode]=true;
			dist[topnode]=disttopnode;
			int sz = adjlist[topnode].size();
			//cout<<sz<<endl;
			for(int i=0;i<sz;i++){
				int nextnode = adjlist[topnode][i].first;
				int nextdistance = adjlist[topnode][i].second;
				if(!visited[nextnode]){
					int dis = dist[topnode]+nextdistance;
					if(dist[nextnode]>dis){
						pq.push(make_pair(nextnode,dis));
					}
				}
			}
		}
	}
	return 0;
} 