#include<iostream>
#include<stdio.h>
#include<string.h>
#include<string>
#include<map>
#include<vector>
#include<limits.h>
#include<math.h>
#include<stdlib.h>
using namespace std;

#define MAX_SIZE  1002
bool bVisited[MAX_SIZE];
int nDistanceARR[MAX_SIZE];

struct Point
{
	int nXPOS;
	int nYPOS;
};
struct Point stVert[MAX_SIZE];
int nWatchHoles;

int GetMin(bool bVisited[], int nDistanceARR[])
{
	int nMinIndex = -1;
	int nMinNO = INT_MAX;

	for(int i = 0; i <= nWatchHoles+1; i++)
	{
		if(!bVisited[i] && nMinNO > nDistanceARR[i])
		{
			nMinNO = nDistanceARR[i];
			nMinIndex = i;
		}
	}

	return nMinIndex;
}

int GetDistance(int i, int j)
{
	int nDist = (((stVert[i].nXPOS - stVert[j].nXPOS) * (stVert[i].nXPOS - stVert[j].nXPOS)) +
		((stVert[i].nYPOS - stVert[j].nYPOS )*( stVert[i].nYPOS - stVert[j].nYPOS)));

	return nDist;
}

void DijikstraUtil()
{
	for(int i = 0; i <= nWatchHoles+1; i++)
	{
		nDistanceARR[0] = 0;
		int U = GetMin(bVisited,nDistanceARR);
		bVisited[U] = true;

		for(int j = 0; j <= nWatchHoles+1; j++)
		{
			if(!bVisited[j] && nDistanceARR[U] != INT_MAX && nDistanceARR[j] > nDistanceARR[U] + GetDistance(j,U))
			 {
				 nDistanceARR[j] = nDistanceARR[U] + GetDistance(j,U);
			 }
		}
	}

	std::cout << nDistanceARR[nWatchHoles+1];
	std::cout << endl;
}

 void ResetMatrix()
 {
	 for(int i = 0; i <= nWatchHoles+1; i++)
	 {
		 bVisited[i] = false;
		 nDistanceARR[i] = INT_MAX;
		 stVert[i].nXPOS = 0;
		 stVert[i].nYPOS = 0;
	 }
 }

int main()
{
	cin >> nWatchHoles;

	ResetMatrix();

	for(int i = 1; i <= nWatchHoles; i++)
	{
		cin >> stVert[i].nXPOS;
		cin >> stVert[i].nYPOS;	
	}

	cin >> stVert[nWatchHoles+1].nXPOS;
	cin >> stVert[nWatchHoles+1].nYPOS;

	DijikstraUtil();
	return 0;
}