#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
#include<limits.h>
using namespace std;

int coords[1005][2],d[1005];
bool visited[1005];

int cal_dist(int i,int b)
{
    return ((coords[i][0]-coords[b][0])*(coords[i][0]-coords[b][0]) + (coords[i][1]-coords[b][1])*(coords[i][1]-coords[b][1]));
}

int main()
{
    int n,i;
    
    cin>>n;
    
    for(i=1;i<=n+1;i++)
    {
        cin>>coords[i][0]>>coords[i][1];
    }
    
    for(i=1;i<=n+1;i++)
    {
        d[i]=INT_MAX;
        visited[i]=0;
    }
    
    priority_queue< pair<int,int> > pq;
    pq.push(pair<int,int>(0,0));
    
    visited[0]=1; d[0]=0;
    while(!visited[n+1])
    {
        pair<int,int> a=pq.top();
        pq.pop();
        int dst=-a.first;
        int node=a.second;
        
        if(d[node]<dst)
            continue;
        
        visited[node]=1;
        for(i=1;i<=n+1;i++)
        {
            if(dst+cal_dist(i,node)<d[i])
            {
                d[i]=dst+cal_dist(i,node);
                pq.push(pair<int,int>(-d[i],i));
            }
        }
    }
    cout<<d[n+1];
    return 0;
}