#include<bits/stdc++.h>
using namespace std;
#define MAX 1000005
#define INF 1e15
#define pii pair<int,long long int>
#define pb push_back
struct comp {
    bool operator() (const pii &a, const pii &b) {
        return a.second > b.second;
    }
};
vector< pii > G[MAX];
//pair < int, pair < int,int > > e[10005]; 
long long int D[MAX];
bool F[MAX];
int main()
{
	int n;
	scanf("%d",&n);
	int i;
	int x[n+5];int y[n+5];
	n+=1;
	int h,j;
	h=0;
	for(i=1;i<=n;i++)
	{
		scanf("%d %d",&x[i],&y[i]);
		//z[h++]=i+1;
		//e[h++]=make_pair(i+1,make_pair(x[i],y[i]));
	}
	x[0]=0;y[0]=0;
	//n+=1;
	for(i=0;i<=n;i++)
	{
		for(j=0;j<=n;j++)
		{
			if(i!=j)
			{
				long long dis=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);
				G[i].push_back(pii(j,dis));
			}
		}
	}
	for(i=0;i<=n;i++)
	{
		D[i]=INF;
		F[i]=false;
	}
	priority_queue< pii, vector< pii >, comp > Q;
	int starting = 0;
	int ending= n;
	D[starting]=0;
	Q.push(pii(starting,0));
	int u,v;
	long long w;
	while(!Q.empty())
	{
		u=Q.top().first;
		Q.pop();
		if(F[u]) continue;
		int sz=G[u].size();
		for(i=0;i<sz;i++)
		{
			v=G[u][i].first;
			w=G[u][i].second;
			if(!F[v]&&D[u]+w<D[v])
			{
				D[v]=D[u]+w;
				Q.push(pii(v,D[v]));
			}
		}
		F[u]=1;
		if(ending==u)
		break;
	}
	printf("%lld\n",D[ending]);
	return 0;
}