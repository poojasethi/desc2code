#include <iostream>
#include <cmath>

using namespace std;

const long long MAX_N = 1000 + 10, BIG = 2147483647;
long long x[MAX_N], y[MAX_N], n;
long long firstD[MAX_N][MAX_N], dist[MAX_N];
bool gpOne[MAX_N];

long long dijkstra(long long source, long long target)
{
	for (int i = 0; i < n; i++)
		dist[i] = firstD[source][i];
	gpOne[source] = true;
	while (true)
	{
		long long mini = BIG, minI = -1;
		for (int i = 0; i < n; i++)
			if (dist[i] < mini && !gpOne[i])
			{
				mini = dist[i];
				minI = i;
			}
		if (minI == -1)
			break;
		gpOne[minI] = true;
		for (int i = 0; i < n; i++)
			dist[i] = min(dist[i], dist[minI] + firstD[minI][i]);
	}
	return dist[target];
}

int main()
{
	cin >> n;
	n += 2;
	for (int i = 1; i < n; i++)
		cin >> x[i] >> y[i];
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			long long s = (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]);
			firstD[i][j] = s;
		}
	}
	cout << dijkstra(0, n - 1) << endl;
	return 0;
}