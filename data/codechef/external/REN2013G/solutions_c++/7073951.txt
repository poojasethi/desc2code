#include<bits/stdc++.h>
using namespace std;
#define TEMP 0
#define NIL -1
#define PERM 1
#define MAX 1005

int pathLength[MAX];
int status[MAX];
int n,adj[MAX][MAX];
int minDistance()
{
int min=INT_MAX;
int k=NIL;
for(int i=0;i<=n+1;i++)
{
if(status[i]==TEMP&&pathLength[i]<=min)
{
min=pathLength[i];
k=i;
}

}
return k;
}
void dijkstra(int s)
{
int i,current;
for(i=0;i<=n+1;i++)
{pathLength[i]=INT_MAX;
status[i]=TEMP;
}
pathLength[s]=0;
while(1)
{
current=minDistance();
if(current==NIL)
return;
status[current]=PERM;
for(i=0;i<=n+1;i++)
{
if(adj[current][i]!=0&&status[i]==TEMP&&pathLength[current]!=INT_MAX)
{if(pathLength[current]+adj[current][i]<pathLength[i])
{
pathLength[i]=pathLength[current]+adj[current][i];
}
}
}
}
}
int main()
{
int i,j;
scanf("%d",&n);
int x[n+5],y[n+5];
x[0]=0;y[0]=0;
for(i=1;i<=n+1;i++)
scanf("%d %d",&x[i],&y[i]);
for(i=0;i<=n+1;i++)
{for(j=0;j<=n+1l;j++)
adj[i][j]=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);
//printf("%d ",adj[i][j]);}
//printf("\n");
}
dijkstra(0);
printf("%d\n",pathLength[n+1]);
return 0;
}

