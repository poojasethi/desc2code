#include<bits/stdc++.h>
using namespace std;

#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
struct node{
    long long int no;
    long long int co;
};

struct compare  
 {  
   bool operator()(const struct node& l, const struct node& r)  
   {  
       return l.co > r.co;  
   }  
 };  



long long int  arr[1003][2]={{0}},vis[1003]={0},n;


long long int res(struct node start){
    priority_queue<struct node,vector<struct node>, compare > pq;
    int i;
    pq.push(start);
    while(!pq.empty()){
        struct node tp = pq.top();
        pq.pop();
        if(vis[tp.no]) continue;
        vis[tp.no]=1;
        if(tp.no == 1002)
          return tp.co;
        for(i=1;i<=n;i++){
            struct node bhej;
            bhej.no=i;
            bhej.co=(arr[tp.no][0]-arr[i][0])*(arr[tp.no][0]-arr[i][0]) + (arr[tp.no][1]-arr[i][1])*(arr[tp.no][1]-arr[i][1])+tp.co;
            pq.push(bhej);
        }  
        struct node bhej;
        bhej.no=1002;
        bhej.co=(arr[tp.no][0]-arr[1002][0])*(arr[tp.no][0]-arr[1002][0]) + (arr[tp.no][1]-arr[1002][1])*(arr[tp.no][1]-arr[1002][1])+tp.co;
            pq.push(bhej);
    }
    return -1;
}

int main()
{
    fastScan;
    cin>>n;
    int i;
    for(i=1;i<=n;i++){
        cin>>arr[i][0]>>arr[i][1];
    }
    cin>>arr[1002][0]>>arr[1002][1];
    struct node start;
    start.no=0;
    start.co=0;
    cout<<res(start);
    return 0;
}