#include <bits/stdc++.h>

#define For(i, be, en) for(i = be; i <= en; i++)
#define Forr(i, be, en) for(int i = be; i >= en; i--)

using namespace std;

struct node {
    int v;
    int c;
};



struct cmp {
    bool operator()(const node& l, const node& r) {
        return l.c > r.c;
    }
};

/*bool operator <(const node& l, const node& r)
{
    return l.c > r.c;
}*/

int dij(vector <node> g[], int sr, int di)
{
    //priority_queue<int, vector<int>, cmp> pq;
    priority_queue<node, vector<node>, cmp> pq;
    struct node t;

    int dis[1005];
    bool vis[1005];

    memset(vis, false, sizeof(vis));

    //memset(dis, 100000000, sizeof(dis));
    for (int i = 0; i <= di+1; i++) {
        dis[i] = 1000000000;
    }

    dis[sr] = 0;
    t.c = 0;
    t.v = sr;
    pq.push(t);

    while (!pq.empty()) {
        //int u = pq.top();
        node u = pq.top();
        pq.pop();

        if (vis[u.v]) {
            continue;
        }
        vis[u.v] = 1;

        if (u.v == di) {
            break;
        }

        for (int i = 0; i < g[u.v].size(); i++) {
            struct node nd = g[u.v][i];
            if (dis[nd.v] > dis[u.v] + nd.c) {
                dis[nd.v] = nd.c + dis[u.v];
                t.c = nd.c + dis[u.v];
                t.v = nd.v;
                pq.push(t);
            }
        }

    }

    return dis[di];
}

int main()
{
    struct node nd;
    string nm, s1, s2;
    int x, y, n;

    vector<pair <int, int> > ve;

    cin >> n;
    vector <node> g[n + 2];

    ve.push_back(make_pair(0,0));
    for (int i = 0; i <= n; i++) {
        cin >> x >> y;
        ve.push_back(make_pair(x, y));
    }

    for (int i = 0; i < n + 2; i++) {
        for (int j = 0; j < n + 2; j++) {
            node nd;
            nd.v = j;
            nd.c = (ve[i].first - ve[j].first) * (ve[i].first - ve[j].first) + (ve[i].second - ve[j].second) * (ve[i].second - ve[j].second);
            //cout << nd.c << endl;
            g[i].push_back(nd);
        }
    }


    cout << dij(g, 0, n + 1) << endl;

	return 0;
}
