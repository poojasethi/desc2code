#include <iostream>
#include <cmath>
#include <set>

using namespace std;

const long long MAX_N = 1000 + 10;
long long x[MAX_N], y[MAX_N], n;
long long firstD[MAX_N][MAX_N], dist[MAX_N];
set <pair <long long, long long> > gpOne;
bool mark[MAX_N];

long long dijkstra(long long source, long long target)
{
	for (int i = 0; i < n; i++)
	{
		dist[i] = firstD[source][i];
		gpOne.insert(make_pair(dist[i], i));
	}
	while (!gpOne.empty())
	{
		int minI = gpOne.begin()->second;
		mark[minI] = true;
		gpOne.erase(gpOne.begin());
		for (int i = 0; i < n; i++)
		{
			if (mark[i] || dist[i] <= dist[minI] + firstD[minI][i])
				continue;
			gpOne.erase(make_pair(dist[i], i));
			dist[i] = min(dist[i], dist[minI] + firstD[minI][i]);
			gpOne.insert(make_pair(dist[i], i));
		}
	}
	return dist[target];
}

int main()
{
	cin >> n;
	n += 2;
	for (int i = 1; i < n; i++)
		cin >> x[i] >> y[i];
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			long long s = (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]);
			firstD[i][j] = s;
		}
	cout << dijkstra(0, n - 1) << endl;
	return 0;
}