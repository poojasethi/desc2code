#include<iostream>
#include<utility>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
vector< pair< int , int>  > graph[1005];
long long int caldist(int x1,int y1,int x2,int y2)
{
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);

}
struct compare  
{  
	bool operator()(const pair<long long int,int >& l, const  pair<long long int,int  >& r)  
	{  
		return l.first > r.first;  
	}  
};  
long long int dist[1005]={0};
int visited[1005]={0};
int main()
{
	int n;
	cin >> n;
	int x[1005],y[1005];
	x[0]=0;
	y[0]=0;
	for(int i=1;i<=n;i++)
	{
		cin >> x[i] >> y[i];
		dist[i]=100000000;
	}
	int xv,yv;
	cin >> xv >> yv;
	x[n+1]=xv;
	y[n+1]=yv;
	dist[n+1]=100000000;
	/*for(int i=0;i<=n+1;i++)
	  {
	  for(int j=i+1;j<=n+1;j++)
	  {
	  long long int dist1 = caldist(x[i],y[i],x[j],y[j]);		
	  graph[i].push_back(make_pair(dist1,j));
	  graph[j].push_back(make_pair(dist1,i));
	  }
	  }*/
	priority_queue< pair< long long int , int > ,vector< pair< long long int , int > > ,compare > pq;
	pq.push(make_pair(0,0));
	dist[0]=0;
	while(!pq.empty())
	{
		int x1=pq.top().second;
		visited[x1]=1;
		pq.pop(); 
		for(int i=0;i<=n+1;i++)
		{
			if(i != x1)
			{
				int ver=i;
				if(visited[ver] == 0)
				{
					if(dist[ver] > dist[x1]+caldist(x[i],y[i],x[x1],y[x1]))
					{
						dist[ver] = dist[x1]+caldist(x[i],y[i],x[x1],y[x1]);
						long long int val = dist[ver];
						pq.push(make_pair(val,ver));
					}
				}
			}
		}
	}
	cout << dist[n+1] << endl;
	return 0;
}
