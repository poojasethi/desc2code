#include <queue>
#include <stdio.h>
#include <algorithm>
#include  <iostream>
using namespace std;
typedef pair<int, int> PII;
int dis[1010];
int INF = 1 << 30;
int main()
{ 
	int n,a,b;
	cin >> n;
	vector < pair <int, int> > v;
	v.push_back(make_pair(0,0));
	for (int i = 1; i <= n+1; i++)
	{
		cin >> a >> b;
		v.push_back(make_pair(a,b));
		dis[i] = INF;
	}
	
	priority_queue < pair < int,int > > pq;
 	pq.push(make_pair(0,0));
	while (!pq.empty())
	{
		int p = -pq.top().first;
		int q = pq.top().second;
		if (q == n+1) break;
		 pq.pop();
		 for (int i = 1; i <= n+1; i++)
		 {
			 if (dis[i] > p + ((v[i].first - v[q].first)*(v[i].first - v[q].first) + (v[i].second - v[q].second)*(v[i].second - v[q].second)))
			 {
				 dis[i] = p + ((v[i].first - v[q].first)*(v[i].first - v[q].first) + (v[i].second - v[q].second)*(v[i].second - v[q].second));
				 pq.push(make_pair(-dis[i], i));
			 }
		 }
	}
	cout << dis[n+1];
}