
#include<bits/stdc++.h>
#define mod 1000000007
#define len(a) strlen(a)
#define ll long long
#define nl printf("\n")

//#define ip(a) scanf("%I64d",&a)

#define db printf("debug")
#define yes printf("YES\n")
#define no printf("NO\n")
#define pb(a) push_back(a)
#define po(a) pop_back()
#define mp(a,b) make_pair(a,b)
#define set(a,v) memset(a,v,sizeof(a))

#define sz(v) v.size()
#define maxx 2000005
#define pcase(i) printf("Case #%d:\n",i)
#define gc getchar//_unlocked

using namespace std;

inline void ip( ll &x) {
	    register  ll c = gc();
	    x = 0;
	    for(; ((c<48 || c>57) ); c = gc());
	    for(; c>47 && c<58 ; c = gc()) {
	        x = (x<<1) + (x<<3) + c - 48;
	    }

	}
/*--------------------------------------------------------------------------------------------------------------------------------*/
bool vis[11]={false};
vector<vector<int> >tree(105);
vector<int>depth(11);
void pnt(vector<vector<int> >tree,int n)
{
    int i;
    for(i=0;i<=n;i++)
    {
        printf("%d->",i);
        for(int j=0;j<tree[i].size();j++)
            printf("%d ",tree[i][j]);
        nl;
    }
}
void dfs(int node, int cnt)
{
    vis[node]=true;
    depth[node]= cnt;
    int x= tree[node].size();
    for(int i=0;i<x;i++)
    {
        if(!vis[tree[node][i]])
        {
            dfs(tree[node][i], cnt+1);
        }
    }
}
void init()
{
    int i;
    for(i=0;i<11;i++)
        {
            tree[i].clear();
            vis[i]=false;
            depth[i]=0;
        }



}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int i,j;
        char mat[11][11];
        int n,f;
        cin>>n>>f;
        init();

        for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
                cin>>mat[i][j];
        }
        for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
                if(mat[i][j]=='1')
                    tree[i].pb(j);
            }
        }
        //pnt(tree,n);
        dfs(0,0);
        cout<<depth[f]<<"\n";
    }
}
