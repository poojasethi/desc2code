/*
* @problem: HFCQ3
*/

#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <limits.h>
#include <vector>
#include <map>
#include <bitset>
#include <string>
#include <iterator>
#include <set>
#include <utility>
#include <queue>
#include <numeric>
#include <functional>
#include <ctype.h>
#include <stack>
#include <algorithm>
#include <cstdlib>
#define MAX 100100
#define mod 1000000007LL
#define bitcnt(x) __builtin_popcount(x)
#define MS0(x) memset(x, 0, sizeof(x))
#define MS1(x) memset(x, -1, sizeof(x))
#define ll long long int
#define pii pair<int, int>
#define pll pair<long long int,long long int>
#define in(x) scanf("%lld", &x)
#define ind(x) scanf("%d", &x)
#define ins(x) scanf("%s", x)
#define pi acos(-1.0)

using namespace std;
ll dp[205][105][110][10];
int b, n;

ll solve(int i, int j, int k, int c)
{
	if (i < 0 || j < 0 || c == 3)
		return 0;
	if (i == 0)
	{
		if (k >= 100)
			return 1;
		return 0;
	}
	if (k >= 100)
		return 1;
	if (dp[i][j][k][c] != -1)
		return dp[i][j][k][c];
	ll ans = 0;
	ans += solve(i - 1, j, k, c + 1);
	ans += solve(i - 1, j, k + 1, 0);
	ans += solve(i - 1, j, k + 2, 0);
	ans += solve(i - 1, j, k + 4, 0);
	ans += solve(i - 1, j, k + 6, 0);

	ans += solve(i, j - 1, k, c);
	ans += solve(i, j - 1, k + 1, c);
	ans += solve(i, j - 1, k + 2, c);
	ans += solve(i, j - 1, k + 4, c);
	ans += solve(i, j - 1, k + 6, c);
	ans = ans %  mod;
	dp[i][j][k][c] = ans;
	return ans;
}

int main()
{
	//freopen("input_c.txt", "r", stdin);
	int t;
	MS1(dp);
	ind(t);
	ll ans;
	while (t--)
	{
		ind(b);
		ind(n);
		printf("%lld\n", solve(b, n, 0, 0));
	}
	return 0;
}