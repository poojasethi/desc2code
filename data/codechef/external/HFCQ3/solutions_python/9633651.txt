//#include<bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <set>
using namespace std;
#define w(t) while(t--)
#define S(x) scanf("%d",&x)
#define SLL(x) scanf("%lld",&x)
#define P(x) printf("%d\n",x)
#define fl(i , a, b) for(i = (int)a; i<(int)b; i++)
#define mem(a , value) memset(a , value , sizeof(a))
#define tr(c, itr) for(itr = (c).begin(); itr != (c).end(); itr++)
#define MOD 1000000007
#define MAX 1000000010
#define ll long long
#define all(v) v.begin(),v.end()
#define mp make_pair
#define pb push_back
#define f first
#define s second
typedef pair<int,int> pp;
int dp[201][101][3][102]; 
int n , b ; 
int solve(int b , int n , int k , int runs)
{
	if(n < 0)
		return 0 ; 
	if(runs >= 100 ) return 1;
	if( b<=0 ) return 0;
	ll ans=0;
	if(dp[b][n][k][runs]!=-1) return dp[b][n][k][runs]; 
	if(k < 2)
		ans = (ans + solve(b-1 , n , k+1 , runs))%MOD ; // dot ball from reg ball only two times

	ans = (ans + solve(b , n-1 , k ,runs))%MOD; 

	ans = (ans + solve(b-1 , n , 0 , runs + 1))%MOD; 
	ans = (ans + solve(b-1 , n , 0 ,runs + 2))%MOD; 
	ans = (ans + solve(b-1, n , 0 , runs + 4))%MOD; 
	ans = (ans + solve(b-1, n , 0 , runs + 6))%MOD; 

	ans = (ans + solve(b , n-1 , k , runs + 1))%MOD;
	ans = (ans + solve(b, n-1, k , runs + 2))%MOD;
	ans = (ans + solve(b , n-1 , k , runs + 4))%MOD;
	ans = (ans + solve(b , n-1 , k , runs + 6))%MOD;

	return dp[b][n][k][runs] = (int)ans; 
}
int main()
{
	//std::ios_base::sync_with_stdio(false);
	int t;
	mem(dp,-1);
	S(t);
	w(t)
	{
		S(b); S(n);
		printf("%d\n", solve(b , n , 0 , 0 ));
	}
	return 0;
}