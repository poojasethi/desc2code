/**
* It is foolish to fear what we've yet to see and know
*/
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <climits>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (map<ll, int>::iterator i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

typedef long long ll;
typedef pair<int,int> ii;

const int MAX = 100005;
const int MOD = 1000000000+7;
const int INF = 1000000000;

int runScored[5] = {0, 1, 2, 4, 6};


bool exist[205][105][150][2][2];
int dp[205][105][150][2][2];

long long solve(int b, int n, int k, bool sl, bool l) {
    if (k >= 100) {
        return 1;
    } else if (b == 0) {
        return 0;
    } else {
        if (!exist[b][n][k][sl][l]) {
            long long ways = 0;

            if (n > 0) {
                for (int i = 0; i < 5; i++) {
                    ways += solve(b, n-1, k+runScored[i], sl, l);
                    if (ways >= MOD) ways -= MOD;
                }
            }

            int start = 0;
            if (!sl && !l) start = 1;
            for (int i = start; i < 5; i++) {
                ways += solve(b-1, n, k+runScored[i], l, (runScored[i]>0));
                if (ways >= MOD) ways -= MOD;
            }

            dp[b][n][k][sl][l] = ways;
            exist[b][n][k][sl][l] = true;
        }

        return dp[b][n][k][sl][l];
    }
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int b, n;
        scanf("%d%d", &b, &n);
        long long answer = solve(b, n, 0, true, true);
        printf("%lld\n", answer);
    }
}










