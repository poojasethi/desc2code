 

Problem description.
 Consider the following sorting algorithm to sort an array having distinct elements from 1 to N: 

calls = 0; 
sort (array A) 
     if A is sorted
          return A
     Randomly pick i: among all i, such that i comes after i+1 in A
     Swap the positions of i and i+1
     calls++
     return sort(A)

Given the array A, which is a permutation of 1 to N, what is the expected value of the variable "calls" (which counts the number of calls to the function sort()) after the function has sorted the array A?

Input

The first line consists of the number of test-cases T. 
Each test case begins with a single line N. 
This is followed by a single line consisting of N integers, the array A. 


Output
For each test-case, output the expected value of "calls", rounded to 2 decimal places.

Constraints

T ≤ 4
N ≤ 10^5
The Elements of A form a permutation of 1 to N.

 

Example
Input:
3
3
1 3 2
3
2 1 3
3
3 2 1

Output:
1.00
1.00
3.00

 

Explanation
From 3-2-1, we can either choose i = 1 or i = 2 (since 1 comes after 2, or since 2 comes after 3. 
After making the shift, we are left with either
3-1-2 , or 2-3-1 
From 3-1-2, we would necessarily follow the swaps as follows:
3-1-2 -> 1-3-2 -> 1-2-3 
From 2-3-1, we would necessarily follow the swaps as follows:
2-3-1 -> 2-1-3 -> 1-2-3
