#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
#include<queue>
#include<climits>
#include<stack>
using namespace std;
typedef long long int ll;
#define MAX 100005
ll BIT[MAX];
vector<ll> dum;
struct in
{
    ll s,e;
};
typedef struct in in;
in arr[MAX];
bool cmp(in a,in b)
{
    if(a.s<b.s)
        return true;
    else if(a.s==b.s)
    {
        if(a.e<b.e)
            return true;
        else
            return false;
    }
    else
        return false;
}
ll query(ll idx)
{
    ll ans=0;
    while(idx>0)
    {
        ans+=BIT[idx];
        idx-=(idx&-(idx));
    }
    return ans;
}
void update(ll idx)
{
    while(idx<=MAX)
    {
        BIT[idx]++;
        idx+=(idx&-(idx));
    }
    return ;
}
int main()
{
    ll tc,i,ans,T,n,x,v;
    cin>>tc;
    while(tc--)
    {
        ans=0;
        memset(BIT,0,sizeof(BIT));
        dum.clear();
        cin>>n>>T;
        for(i=0;i<n;i++)
        {
            cin>>x>>v;
            arr[i].s=x;
            arr[i].e=x+(v*T);
            dum.push_back(arr[i].e);
        }
        sort(arr,arr+n,cmp);
        sort(dum.begin(),dum.end());

        for(i=0;i<n;i++)
        {
            arr[i].e=1+lower_bound(dum.begin(),dum.end(),arr[i].e)-dum.begin();
        }

        for(i=n-1;i>=0;i--)
        {
            ans+=query((arr[i].e)-1);
            update(arr[i].e);
        }
        cout<<ans<<endl;
    }
    return 0;
}
