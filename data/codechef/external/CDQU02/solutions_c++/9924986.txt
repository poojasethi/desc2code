#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<stack>
#include<vector>
#include<cmath>
using namespace std;
struct Point
{
    int x,y;
};
Point p;
vector<Point> convex;
inline int dist(Point a,Point b)
{
    return((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
inline int cross(Point a,Point b)//axb
{
    return(a.x*b.y-a.y*b.x);
}
double area(Point a,Point b,Point c)
{
    double ar=cross(a,b)+cross(b,c)+cross(c,a);
    return(ar/2.0);
}
inline int orientation(Point a,Point b,Point c)
{
    int o=(b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);
    return(o>0?1:(o<0?2:0));
}
bool compare(Point a,Point b)
{
    int o=orientation(p,a,b);
    if(o==0)
        return((dist(p,a)<dist(p,b))?true:false);
    return(o==1?true:false);//counter-clock | clock
}
void convexHull(Point points[],int n)
{
    p.x=1<<30;
    p.y=1<<30;
    int m;
    for(int i=0; i<n; i++)
    {
        if(points[i].y<p.y || (points[i].y==p.y && points[i].x<p.x))
        {
            p=points[i];
            m=i;
        }
    }
    points[m]=points[0];
    points[0]=p;
    sort(points+1,points+n,compare);
    /*
    cout<<"P0: "<<p.x<<" "<<p.y<<"\n";
    for(int i=0; i<n; i++)
        cout<<points[i].x<<" "<<points[i].y<<"\n";
    */
    vector<Point> v;
    v.push_back(points[0]);
    v.push_back(points[1]);
    v.push_back(points[2]);
    for(int i=3; i<n; i++)
    {
        while(orientation(v[v.size()-2],v[v.size()-1],points[i])!=1)
        {
            v.pop_back();
        }
        v.push_back(points[i]);
    }
    convex=v;
}
int main()
{
    int t,n,m,a,b;
    double ar=0,pr=0;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        Point points[n];
        for(int i=0; i<n; i++)
        {
            scanf("%d%d",&a,&b);
            points[i].x=a;
            points[i].y=b;
        }
        if(n==1){
            cout<<"0 0\n";continue;
        }
        if(n==2){
            cout<<floor(sqrt(dist(points[0],points[1])))<<" 0\n";continue;
        }
        convexHull(points,n);
        /*
        cout<<"Convex Hull:\n";
        for(int i=0; i<convex.size(); i++)
            cout<<convex[i].x<<" "<<convex[i].y<<"\n";
        */
        ar=0.0,pr=0.0;
        for(int i=1; i<convex.size()-1; i++)
        {
            ar+=area(p,convex[i],convex[i+1]);
        }
        for(int i=0; i<convex.size(); i++)
        {
            pr+=sqrt(dist(convex[i],convex[(i+1)%convex.size()]));
        }
        cout<<floor(pr)<<" "<<floor(ar)<<"\n";
    }
}
/*

6
3 0
0 0
3 3
0 3
1 1
2 2
9
0 3
1 1
2 2
4 4
0 0
1 2
3 1
3 3
3 0
*/
