#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;

struct Point {
    long long x, y;
    bool operator <(const Point &p) const {
        return x < p.x || (x == p.x && y < p.y);
    }
};

long long cross(const Point &O, const Point &A, const Point &B) {
    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}

vector <Point> convex_hull(vector <Point> P) {

    int n = P.size(), k = 0;
    vector<Point> H(2*n);

    sort(P.begin(), P.end());

    for(int i = 0; i<n; i++) {
        while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
        H[k++] = P[i];
    }

    for(int i=n-2, t=k+1; i>=0; i--) {
        while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
        H[k++] = P[i];
    }

    H.resize(k-1);
    return H;
}

long double dist(Point p1, Point p2) {
	return sqrt(1.0*(p1.x - p2.x)*(p1.x - p2.x)+1.0*(p1.y - p2.y)*(p1.y - p2.y));
}

long long abs_(long long a) {
	if(a < 0) return -a;
	return a;
}

int main() {
	int T;
	cin >> T;
	while(T--) {
		int n;
		cin >> n;
		long long t1, t2;
		if(n == 1) {
			cin >> t1 >> t2;
			cout << 0 << " " << 0 << endl;
			continue;
		}
		vector <Point> p(n);
		for(int i=0; i<n; i++) {
			cin >> t1 >> t2;
			p[i].x = t1;
			p[i].y = t2;
		}
		vector <Point> convex = convex_hull(p);
		long long A = 0;
		long double P = 0;
		for(int i=0; i<convex.size()-1; i++) {
			P += dist(convex[i], convex[i+1]);
		}
		P += dist(convex[0], convex[convex.size()-1]);
		for(int i=1; i<convex.size()-1; i++) A += abs_(cross(convex[0], convex[i], convex[i+1]));
		A /= 2;
		cout << floor(P) << " " << A << endl;
	}
	return 0;
}