#include <bits/stdc++.h>
using namespace std;
long long int MOD=1000000007;
struct node
{
	int count;
	long long int sum;
	node *left,*right;
	node()
	{
		this->count=0;
		this->sum=0;
		this->left=NULL;
		this->right=NULL;
	}
	node(int c,long long int s,node *l, node *r)
	{
		this->count=c;
		this->sum=s;
		this->left=l;
		this->right=r;
	}
	node *insert(int l, int r, int val);
};

node *null=new node(0,0,NULL,NULL);

node * node::insert(int l, int r, int val)
{
	if(l<=val && val<r)
	{
		if(l+1==r)
		{
			return new node(this->count+1, (this->sum + val)%MOD, null, null);
		}
		int m=((l+r)>>1);
		return new node(this->count+1, (this->sum + val)%MOD, this->left->insert(l,m,val), this->right->insert(m,r,val));
	}
	return this;
}
long long int query(node *a, node *b, int l, int r, int k)
{
	if(l+1==r)
		return (((long long int)l)*((long long int)k))%MOD;
	int m=((l+r)>>1);
	int ctr=a->left->count - b->left->count;
	if(ctr >= k)
		return query(a->left, b->left, l, m, k);
	else
		return ((a->left->sum + MOD - b->left->sum) + query(a->right, b->right, m, r, k-ctr))%MOD;
}
int main()
{
	// freopen("input.txt","r",stdin);
	null->left=null->right=null;
	int n;
	scanf("%d", &n);
	node *root[n];
	for (int i = 0; i < n; ++i)
	{
		int temp;
		scanf("%d", &temp);
		root[i]=(i==0?null:root[i-1])->insert(0,1000000001,temp);
	}
	int q;
	scanf("%d", &q);
	while(q--)
	{
		int l,r,k;
		scanf("%d %d %d", &l, &r, &k);
		l--;
		r--;
		long long int ans=query(root[r], (l-1>=0?root[l-1]:null), 0, 1000000001, k);
		printf("%lld\n", ans);
	}
	return 0;
}