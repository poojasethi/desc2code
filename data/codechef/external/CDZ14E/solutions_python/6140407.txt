//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (1000000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-6 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
 
 
// #define matrix vector< vector<ll> >
 
// matrix mul(matrix &a, matrix &b){
//     int i, j, k, n = a.size();
//     matrix ans (n, vector<ll>(n));
//     for(i=0;i<n;i++)
//         for(j=0;j<n;j++){
//             ll temp = 0;
//             for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
//             ans[i][j] = temp;
//         }
 
//     return ans;
// }
 
// matrix pwr(matrix &a, ll p){
//     int n = a.size();
//     matrix ans(n, vector<ll> (n));
//     for(int i=0;i<n;i++)    ans[i][i] = 1;
 
//     while(p){
//         if(p&1) ans = mul(ans, a);
 
//         a = mul(a, a);
//         p >>= 1;
//     }
//     return ans;
// }
 
 
ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}
 
 
ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}
 
 
ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}
 
 
// void in(int &x)
// {
//     register int c = gc();
//     x = 0;
//     int neg = 0;
//     for(;((c<48 || c>57) && c != '-');c = gc());
//     if(c=='-') {neg=1;c=gc();}
//     for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
//     if(neg) x=-x;
// }


struct node{
    node *left, *right;
    int cnt;
    ll sum;
    node(){}
    node(int cnt, ll sum, node* left, node* right){
        this->cnt = cnt;
        this->sum = sum;
        this->left = left;
        this->right = right;
    }
    node* insert(int, int, int);
};

node *null = new node(0, 0, NULL, NULL);
node* root[20005];


int n, c = 0;
int arr[20005];
map<int, int> compress;
int reverse_map[20005];


node* node::insert(int s, int e, int pos){
    
    if(pos < s || pos > e) return this;

    if(s == e)  return new node(this->cnt+1, (this->sum+reverse_map[pos])%MOD, null, null);

    int mid = (s+e)/2;
    return new node(this->cnt+1, (this->sum+reverse_map[pos])%MOD, this->left->insert(s, mid, pos), this->right->insert(mid+1, e, pos));
}


ll query(node *a, node *b, int s, int e, int k){

    if(s == e){
        //this node is entered only because leftCount >= k for parent node
        //so this node may have more than k entries but we need only k
        //and value of each entry is reverse_map[s]
        return ((ll)reverse_map[s] * k) % MOD;
    }

    int mid = (s+e)/2;
    int leftCount = a->left->cnt - b->left->cnt;
    if(leftCount >= k)  return query(a->left, b->left, s, mid, k);

    return ((a->left->sum - b->left->sum)%MOD + query(a->right, b->right, mid+1, e, k-leftCount) + MOD)%MOD;
}


int main()
{
    // ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    scanf("%d", &n);
    for(int i=1;i<=n;i++){
        scanf("%d", &arr[i]);
        compress[arr[i]] = 1;
    }

    for(map<int,int>::iterator it=compress.begin();it!=compress.end();it++){
        ++c;
        it->second = c;
        reverse_map[c] = it->first;
    }

    null->left = null->right = null;
    for(int i=1;i<=n;i++)
        root[i] = (i == 1 ? null : root[i-1])->insert(1, c, compress[arr[i]]);

    int q;
    scanf("%d", &q);
    while(q--){
        int a, b, k;
        scanf("%d%d%d", &a, &b, &k);

        ll ans = query(root[b], (a == 1 ? null : root[a-1]), 1, c, k);
        ans %= MOD;
        if(ans < 0) ans += MOD;
        printf("%lld\n", ans);
    }

    return 0;
}
 












