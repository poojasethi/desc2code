 /*  Dreams come true if you chase them very hard    */
#include <cmath>
#include <climits>
#include <queue>
#include <vector>
#include <map>
#include <cstdlib>
#include <fstream>
#include <iomanip>   
#include <iostream>  
#include <sstream>  // istringstream buffer(myString);
#include <stack>
#include <algorithm>
#include <cstring>
#include <cassert>

using namespace std;
		 // // Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

 // //Useful constants
#define INF                         (int)1e9
#define EPS                         1e-9

 // //Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd

// //Useful container manipulation / traversal macros
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define mp                          make_pair

 ////Some common useful functions
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
#define DREP(a)                      sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())


long long ans = 0;

int stree[400051],arr[100051];
void create(int node,int ss,int se)
{
	if (ss == se)
	{
		stree[node] = ss;
		return;
	}
	int mid = (ss + se);
	mid = mid >> 1;
	create(2 * node, ss, mid);
	create(2 * node + 1, mid + 1, se);
	if (arr[stree[2 * node]] < arr[stree[2 * node + 1]])
		stree[node] = stree[2 * node];
	else
		stree[node] = stree[2 * node + 1];
}

int query(int node,int x, int y, int ss, int se)
{
	if (ss >= x && se <= y)
		return stree[node];
	int mid = (ss + se);
	mid = mid >> 1;
	
	if (se<x || mid+1>y)
	{
		return query(2 * node, x, y, ss, mid);
	}
	if (ss>y || mid<x)
	{
		return query(2 * node + 1, x, y, mid + 1, se);
	}
 	
	int p = query(2 * node, x, y, ss, mid);
	int q = query(2 * node + 1, x, y, mid + 1, se);
	
    if (arr[p] < arr[q])
		return p;
	else
		return q;

}

long long solve(int x, int y, int ss, int se)
{

	
	if (x > y)
		return 0;
	int index = query(1,x, y, 1, se);
	solve(x, index - 1, ss, se);
	solve(index + 1, y, ss, se);
	long long a, b,c;
	a = (index - x + 1);
	b = (y - index + 1);
	c = arr[index];
	ans += c * a*b;
     
}

int main()
{
	ios_base::sync_with_stdio(false);
	int t, n;
	
	s(t);
	 
	while (t--)
	{
		ans = 0;
		s(n);
		forall(i, 0, n)
			sl(arr[i+1]);
		create(1, 1, n);
		solve(1, n, 1, n);
		// it will not run if proper amount of memory is not allocated
		printf("%lld\n",ans);
		
		//delete[] stree;
		
	}
  return 0;
}
