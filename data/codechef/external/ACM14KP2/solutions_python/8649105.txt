#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>

using namespace std;

long long _mergeSort(int arr[], int temp[], int left, int right);
long long merge(int arr[], int temp[], int left, int mid, int right);

long long mergeSort(int arr[], int array_size)
{
	int *temp = (int *)malloc(sizeof(int)*array_size);
	return _mergeSort(arr, temp, 0, array_size - 1);
}

long long _mergeSort(int arr[], int temp[], int left, int right)
{
    int mid;
    long long inv_count = 0;
    if (right > left)
    {
        mid = (right + left)/2;

        inv_count = _mergeSort(arr, temp, left, mid);
        inv_count += _mergeSort(arr, temp, mid+1, right);

        inv_count += merge(arr, temp, left, mid+1, right);
    }
    return inv_count;
}

long long merge(int arr[], int temp[], int left, int mid, int right)
{
    int i, j, k;
    long long inv_count = 0;

    i = left; /* i is index for left subarray*/
    j = mid; /* i is index for right subarray*/
    k = left; /* i is index for resultant merged subarray*/
    while ((i <= mid - 1) && (j <= right))
    {
        if (arr[i] <= arr[j])
        {
            temp[k++] = arr[i++];
        }
        else
        {
            temp[k++] = arr[j++];
            /*this is tricky -- see above explanation/diagram for merge()*/
            inv_count = inv_count + (mid - i);
        }
    }

    /* Copy the remaining elements of left subarray
    (if there are any) to temp*/
    while (i <= mid - 1)
        temp[k++] = arr[i++];

    /* Copy the remaining elements of right subarray
    (if there are any) to temp*/
    while (j <= right)
        temp[k++] = arr[j++];

    /*Copy back the merged elements to original array*/
    for (i=left; i <= right; i++)
        arr[i] = temp[i];

    return inv_count;
}

int inp[100001];

int main() {
    long long t, n, k, inv;
    cin >> t;
    for(int xx=1; xx<=t; xx++){
        vector<int> arr;
        cin >> n >> k;
        for(int i=0; i<n; i++){
            cin >> inp[i];
        }
        inv = mergeSort(inp, n);
        bool d = false;
        for(int i=0; i<n-1; i++){
            if(inp[i] == inp[i+1]){
                d = true;
                break;
            }
        }
        if(k <= inv){
            cout << "Case " << xx << ": " << inv-k << endl;    
        }
        else{
            inv = k-inv;
            if(d){
                cout << "Case " << xx << ": " << 0 << endl;
            }
            else{
                cout << "Case " << xx << ": " << int(inv&1) << endl;                
            }
        }
    }
    return 0;
}