import java.io.IOException;
import java.io.InputStream;
import java.util.*;

class Test 
{
	public static void main(String[] args)
	{
		InputReader sc = new InputReader(System.in);
		int t = sc.readInt();
		int ca = 0;
		while(t-->0)
		{
			ca++;
			int dou=0;
			int n = sc.readInt();
			int k = sc.readInt();
			int arr[] = new int[n];
			int flag=0;
			for(int i=0;i<n;i++)
				arr[i]= sc.readInt();
			
			for(int i=0;i<n-1;i++)
			{
				if(arr[i]==arr[i+1])
					dou=1;
				if(arr[i]>arr[i+1])
				{
					swap(arr,i,i+1);
					k--;
					i=i-2;
					if(i<-1)
						i++;
					if(k==0)
						break;
				}
			}
			if(k%2==1 && dou==0)
				flag=1;
			//for(int i=0;i<n;i++)
			//	System.out.print(arr[i]+" ");
			System.out.println("Case "+ca+": "+(mergeSort(arr,n)+flag));
			
		}
			
		
	}
	public static void swap(int a[],int i,int j)
    {
        int temp=a[i];
        a[i]=a[j];
        a[j]=temp;
    }
    public static long mergeSort(int arr[], int array_size)
    {
        int temp[] = new int[array_size];
        return _mergeSort(arr, temp, 0, array_size - 1);
    }
     
    /* An auxiliary recursive function that sorts the input array and
      returns the number of inversions in the array. */
    public static long _mergeSort(int arr[], int temp[], int left, int right)
    {
      int mid;
      long inv_count = 0;
      if (right > left)
      {
        /* Divide the array into two parts and call _mergeSortAndCountInv()
           for each of the parts */
        mid = (right + left)/2;
     
        /* Inversion count will be sum of inversions in left-part, right-part
          and number of inversions in merging */
        inv_count  = _mergeSort(arr, temp, left, mid);
        inv_count += _mergeSort(arr, temp, mid+1, right);
     
        /*Merge the two parts*/
        inv_count += merge(arr, temp, left, mid+1, right);
      }
      return inv_count;
    }
     
    /* This funt merges two sorted arrays and returns inversion count in
       the arrays.*/
    public static long merge(int arr[], int temp[], int left, int mid, int right)
    {
      int i, j, k;
      long inv_count = 0;
     
      i = left; /* i is index for left subarray*/
      j = mid;  /* i is index for right subarray*/
      k = left; /* i is index for resultant merged subarray*/
      while ((i <= mid - 1) && (j <= right))
      {
        if (arr[i] <= arr[j])
        {
          temp[k++] = arr[i++];
        }
        else
        {
          temp[k++] = arr[j++];
     
         /*this is tricky -- see above explanation/diagram for merge()*/
          inv_count = inv_count + (mid - i);
        }
      }
     
      /* Copy the remaining elements of left subarray
       (if there are any) to temp*/
      while (i <= mid - 1)
        temp[k++] = arr[i++];
     
      /* Copy the remaining elements of right subarray
       (if there are any) to temp*/
      while (j <= right)
        temp[k++] = arr[j++];
     
      /*Copy back the merged elements to original array*/
      for (i=left; i <= right; i++)
        arr[i] = temp[i];
     
      return inv_count;
    }
}

class InputReader {


	private InputStream stream;

	private byte[] buf = new byte[1024];

	private int curChar;

	private int numChars;

	private SpaceCharFilter filter;


	public InputReader(InputStream stream) {

		this.stream = stream;

	}


	public int read() {

		if (numChars == -1)

			throw new InputMismatchException();

		if (curChar >= numChars) {

			curChar = 0;

			try {

				numChars = stream.read(buf);

			} catch (IOException e) {

				throw new InputMismatchException();

			}

			if (numChars <= 0)

				return -1;

		}

		return buf[curChar++];

	}


	public int readInt() {

		int c = read();

		while (isSpaceChar(c))

			c = read();

		int sgn = 1;

		if (c == '-') {

			sgn = -1;

			c = read();

		}

		int res = 0;

		do {

			if (c < '0' || c > '9')

				throw new InputMismatchException();

			res *= 10;

			res += c - '0';

			c = read();

		} while (!isSpaceChar(c));

		return res * sgn;

	}


	public String readString() {

		int c = read();

		while (isSpaceChar(c))

			c = read();

		StringBuilder res = new StringBuilder();

		do {

			res.appendCodePoint(c);

			c = read();

		} while (!isSpaceChar(c));

		return res.toString();

	}


	public boolean isSpaceChar(int c) {

		if (filter != null)

			return filter.isSpaceChar(c);

		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;

	}


	public String next() {

		return readString();

	}


	public interface SpaceCharFilter {

		public boolean isSpaceChar(int ch);

	}

}