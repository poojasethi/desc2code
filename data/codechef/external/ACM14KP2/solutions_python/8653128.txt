import java.io.*;
import java.util.*;
import java.math.*;
import java.text.*;
public class Main
{


    static int st[]; // The array that stores segment tree nodes
 
    /* Constructor to construct segment tree from given array. This
       constructor  allocates memory for segment tree and calls
       constructSTUtil() to  fill the allocated memory */
    static void init(int arr[], int n)
    {
        // Allocate memory for segment tree
        //Height of segment tree
        int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));
 
        //Maximum size of segment tree
        int max_size = 2 * (int) Math.pow(2, x) - 1;
 
        st = new int[max_size]; // Memory allocation
 
        constructSTUtil(arr, 0, n - 1, 0);
    }
 
    // A utility function to get the middle index from corner indexes.
    static int getMid(int s, int e) {
        return s + (e - s) / 2;
    }
 
    /*  A recursive function to get the sum of values in given range
        of the array.  The following are parameters for this function.
 
      st    --> Pointer to segment tree
      si    --> Index of current node in the segment tree. Initially
                0 is passed as root is always at index 0
      ss & se  --> Starting and ending indexes of the segment represented
                    by current node, i.e., st[si]
      qs & qe  --> Starting and ending indexes of query range */
    static int getSumUtil(int ss, int se, int qs, int qe, int si)
    {
        // If segment of this node is a part of given range, then return
        // the sum of the segment
        if (qs <= ss && qe >= se)
            return st[si];
 
        // If segment of this node is outside the given range
        if (se < qs || ss > qe)
            return 0;
 
        // If a part of this segment overlaps with the given range
        int mid = getMid(ss, se);
        return getSumUtil(ss, mid, qs, qe, 2 * si + 1) +
                getSumUtil(mid + 1, se, qs, qe, 2 * si + 2);
    }
 
    /* A recursive function to update the nodes which have the given 
       index in their range. The following are parameters
        st, si, ss and se are same as getSumUtil()
        i    --> index of the element to be updated. This index is in
                 input array.
       diff --> Value to be added to all nodes which have i in range */
    static void updateValueUtil(int ss, int se, int i, int diff, int si)
    {
        // Base Case: If the input index lies outside the range of 
        // this segment
        if (i < ss || i > se)
            return;
 
        // If the input index is in range of this node, then update the
        // value of the node and its children
        st[si] = st[si] + diff;
        if (se != ss) {
            int mid = getMid(ss, se);
            updateValueUtil(ss, mid, i, diff, 2 * si + 1);
            updateValueUtil(mid + 1, se, i, diff, 2 * si + 2);
        }
    }
 
    // The function to update a value in input array and segment tree.
   // It uses updateValueUtil() to update the value in segment tree
    static void updateValue(int arr[], int n, int i, int new_val)
    {
        // Check for erroneous input index
        if (i < 0 || i > n - 1) {
            System.out.println("Invalid Input");
            return;
        }
 
        // Get the difference between new value and old value
        int diff = new_val - arr[i];
 
        // Update the value in array
        arr[i] = new_val;
 
        // Update the values of nodes in segment tree
        updateValueUtil(0, n - 1, i, diff, 0);
    }
 
    // Return sum of elements in range from index qs (quey start) to
   // qe (query end).  It mainly uses getSumUtil()
    static int getSum(int n, int qs, int qe)
    {
        // Check for erroneous input values
        if (qs < 0 || qe > n - 1 || qs > qe) {
            System.out.println("Invalid Input");
            return -1;
        }
        return getSumUtil(0, n - 1, qs, qe, 0);
    }
 
    // A recursive function that constructs Segment Tree for array[ss..se].
    // si is index of current node in segment tree st
    static int constructSTUtil(int arr[], int ss, int se, int si)
    {
        // If there is one element in array, store it in current node of
        // segment tree and return
        if (ss == se) {
            st[si] = arr[ss];
            return arr[ss];
        }
 
        // If there are more than one elements, then recur for left and
        // right subtrees and store the sum of values in this node
        int mid = getMid(ss, se);
        st[si] = constructSTUtil(arr, ss, mid, si * 2 + 1) +
                 constructSTUtil(arr, mid + 1, se, si * 2 + 2);
        return st[si];
    }
 







public static void main(String[] args)throws java.lang.Exception
{
BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
PrintWriter out=new PrintWriter(System.out);

int x1,t,n,i,pos,val,cnt,cur;
long tot,k,rem;
boolean repeated;


t=Integer.parseInt(in.readLine());
 
for(x1=0;x1<t;x1++)
{
StringTokenizer st1=new StringTokenizer(in.readLine());

n=Integer.parseInt(st1.nextToken());
k=Integer.parseInt(st1.nextToken());

int[] a=new int[n];
int[] arr=new int[n];
int[][] desc=new int[n][2];
int[] till=new int[100001];
boolean[] found=new boolean[n+1];
int[] cntrshifted=new int[n];
//int[] desc1=new int[n];

StringTokenizer st2=new StringTokenizer(in.readLine());

repeated=false;

for(i=0;i<n;i++)	
	{
	a[i]=Integer.parseInt(st2.nextToken());
	desc[i][0]=a[i];
	desc[i][1]=i;

	if(!found[a[i]])
		found[a[i]]=true;
	else
		repeated=true;
	}


Arrays.sort(desc,new Comparator<int[]>(){
public int compare(int[] c1,int[] c2)
{
int t1=c2[0]-c1[0];
if(t1!=0)
	return t1;
int t2=c2[1]-c1[1];
	return t2;
}
});



/*
for(i=0;i<n;i++)
	desc1[i]=desc[i][1];
*/


init(arr,n);




tot=0L;


for(i=0;i<n;i++)
{
pos=desc[i][1];

cnt=getSum(n, pos, n-1);

//out.println("  "+cnt);

cur=( (n-1-cnt)-pos );

tot+=cur;

val=getSum(n, pos, pos);

updateValue(arr, n, pos, val+1);
}


//out.println(tot);

if(tot>=k)
	{
	out.println("Case "+(x1+1)+": "+(tot-k));
	}
else
	{
	rem=(k-tot)%2;

	if(rem==1)
		{
		if(!repeated)
			out.println("Case "+(x1+1)+": "+1);
		else
			out.println("Case "+(x1+1)+": "+0);
		}
	else
		out.println("Case "+(x1+1)+": "+0);	
	}

}


out.flush();
out.close();
}
} 