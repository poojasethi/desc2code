#include<iostream>
using namespace std;
int a[100000+5];
void merge1(int l,int m,int r);
long long inv_count=0;
int merge_sort(int l,int r)
{
    if(l<r){
    int m=(l+r)/2;
    //cout<<l<<" "<<r<<" "<<m<<endl;
    merge_sort(l,m);
    merge_sort(m+1,r);
    merge1(l,m,r);
    }

}
void merge1(int l,int m,int r)
{
    //cout<<"here here ";
    int l1=m-l+1;
    int l2=r-m;
    int temp1[l1],temp2[l2];
    for(int i=l;i<=m;i++) temp1[i-l]=a[i];
    for(int j=m+1;j<=r;j++)temp2[j-m-1]=a[j];
    int i=0,j=0,k=l;
    while(i<l1 && j<l2)
    {
        if(temp1[i]<=temp2[j]) a[k++]=temp1[i++];
        else {
        a[k++]=temp2[j++];inv_count+=(l1-i);}
    }
    while(i<l1) a[k++]=temp1[i++];
    while(j<l2) a[k++]=temp2[j++];
    return ;

}
int main()
{
    int t;
    cin>>t;int z=1;
    while(t--)
    {   inv_count=0;
        int n,k;
        cin>>n>>k;
        for(int i=0;i<n;i++) cin>>a[i];
        merge_sort(0,n-1);
        int i=1;
        for(;i<n;i++) if(a[i]==a[i-1]) break;
        //cout<<inv_count<<" ";
    cout<<"Case "<<(z++)<<": ";
        if(k<=inv_count ) cout<<inv_count-k<<endl;
        else if(i==n)
            cout<<((k-inv_count)&1)<<endl;
        else cout<<0<<endl;
    }

}
