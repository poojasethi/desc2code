#include <iostream>
#include<cstdio>
#include<map>
#include<set>
#include<queue>
#include<algorithm>
using namespace std;
long long merge(vector<int> &a,int p, int q, int r){
  int n1 = q-p+1;
  int n2 = r-q;
  vector<int> l1, r1;
  for(int i=0;i<n1;i++){
    l1.push_back(a[p+i]);
  }
  for(int i=0;i<n2;i++){
    r1.push_back(a[q+1+i]);
  }
  l1.push_back(numeric_limits<int>::max());
  r1.push_back(numeric_limits<int>::max());

  int i=0,j=0;
  long long count=0;
  for(int k=p;k<=r;k++){
    if(l1[i]<=r1[j]){
      a[k]=l1[i];
      i++;
    }
    else{
      a[k]=r1[j];
      j++;
      count+=n1-i;
    }
  }
  return count;
}
long long merge_sort(vector<int> &a, int p, int r){
  if(p<r){
    int q= floor((p+r)/2);
    long long x = merge_sort(a,p,q);
    long long y=merge_sort(a,q+1,r);
    long long z=merge(a,p,q,r);
    return x+y+z;
  }
  else
    return 0;
}
int main() {
#ifdef PBHAYANA
  freopen("in", "r",stdin);
#endif
  int t;
  cin>>t;
  int c=1;
  while(t--){
    vector<int> a;
    int n; long long k;
    cin>>n>>k;
    for(int i=0;i<n;i++){
      int temp;
      cin>>temp;
      a.push_back(temp);
    }
    long long count= merge_sort(a,0,n-1);
    int f=0;
    if(count>=k)
      cout<<"Case " <<c<<": "<<count-k<<"\n";

    else{
      if((k-count)%2==0)
        cout<<"Case " <<c<<": 0"<<"\n";
      else{
        for(int i=0;i<n-1;i++){
          if(a[i]==a[i+1]){
            f=1;
            break;
          }
        }
        if(f==1)
          cout<<"Case " <<c<<": 0"<<"\n";
        else
          cout<<"Case " <<c<<": 1"<<"\n";
      }
    }
    c++;
  }
  return 0;
}
