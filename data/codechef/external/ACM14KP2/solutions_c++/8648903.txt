#include <bits/stdc++.h>
using namespace std ;

#define ft first
#define sd second
#define pb push_back
#define all(x) x.begin(),x.end()

#define ll long long int
#define vi vector<int>
#define vii vector<pair<int,int> >
#define pii pair<int,int>
#define vl vector<ll>
#define vll vector<pair<ll,ll> >
#define pll pair<ll,ll>
#define mp make_pair

#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)

#define scll1(x) scanf("%lld",&x)
#define scll2(x,y) scanf("%lld%lld",&x,&y)
#define scll3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)

#define pr1(x) printf("%d\n",x)
#define pr2(x,y) printf("%d %d\n",x,y)
#define pr3(x,y,z) printf("%d %d %d\n",x,y,z)

#define prll1(x) printf("%lld\n",x)
#define prll2(x,y) printf("%lld %lld\n",x,y)
#define prll3(x,y,z) printf("%lld %lld %lld\n",x,y,z)

#define pr_vec(v) for(int i=0;i<v.size();i++) cout << v[i] << " " ;

#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)

#define fr(i, a, b) for(i=a; i<=b; i++)
#define fb(i, a, b) for(i=a; i>=b; i--)

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

class BIT_PointUpdateRangeQuery {

	public:
		BIT_PointUpdateRangeQuery( int n ) {
			sz = n;
			BIT.resize( sz+1 );
			fill( BIT.begin(), BIT.end(), 0 );
		}

		void Update( int idx, long long int val ) {
			while( idx <= sz ) {
				BIT[idx] += val;
				idx += idx & -idx;
			}
		}

		long long int Query( int idx ) {
			long long int sum = 0;
			while( idx ) {
				sum += BIT[idx];
				idx -= idx & -idx;
			}
			return sum;
		}

		long long int RangeQuery( int l, int r ) {
			if( l > r ) return 0;
			return (Query(r) - Query(l-1));
		}

	private:

		vector<long long int> BIT;
		int sz;
};



int main() {

    int t, test;
    sc1( t );
    fr(test, 1, t) {
        int n, k;
        sc2( n, k );
        vector<int> A(n+1, 0);
        BIT_PointUpdateRangeQuery *bit = new BIT_PointUpdateRangeQuery(n);
        int i; ll inv = 0;
        bool f = 0;
        fr(i, 1, n) {
            int x; sc1(x);
            inv += bit->RangeQuery(x+1, n);
            bit->Update(x, 1);
            A[x] ++;
            if( A[x] > 1 ) f = 1;
        }
        printf("Case %d: ", test);
        if( inv >= k ) {
            prll1( inv - k );
        } else {
            if( f ) pr1( 0 );
            else {
                k -= inv;
                puts( k % 2 ? "1" : "0");
            }
        }
    }
    return 0;
}
