//package year2015.icpc.hindustan.practice;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;
 
class ByeInversions {

        boolean submit = !false;
        
        public ByeInversions() throws IOException {
                InputReader in;
                if(submit == false) {
                        in = new InputReader(new FileInputStream("D:\\input.txt"));
                } else {
                        in = new InputReader(System.in);
                }
                PrintWriter out = new PrintWriter(System.out);
                
                int T = in.nextInt();
                for(int caseNo = 1; caseNo <= T; caseNo++) {
                        solve(caseNo, in, out);
                }
                
                out.close();
        }
        
        private void solve(int caseNo, InputReader in, PrintWriter out) throws IOException {
                out.print("Case " + caseNo + ": ");
                int N = in.nextInt(), K = in.nextInt();
                int A[] = new int[N];
                for(int i = 0; i < N; i++) {
                        A[i] = in.nextInt();
                }
                long inversions = countInversions(A);
                if(K <= inversions) {
                        out.println(inversions - K);
                } else {
                        if(inversions != 0)
                                K = (int) (K % inversions);
                        if(K % 2 == 0) {
                                out.println(0);
                        } else {
                                if(hasDuplicate(A)) {
                                        out.println(0);
                                } else {
                                        out.println(1);
                                }
                        }
                }
        }
        
        private static long countInversions(int[] A) {
                int size = 0;
                for(int i = 0; i < A.length; i++) {
                        size = Math.max(size, A[i]);
                }
                
                long inversions = 0;
                FenwickTree ft = new FenwickTree(size + 1); // note
                for(int i = 0; i < A.length; i++) {
                        inversions += (i - ft.sum(A[i] + 1));
                        ft.update(A[i] + 1, 1);
                }
                
                return inversions;
        }

        private boolean hasDuplicate(int[] A) {
                Arrays.sort(A);
                for(int i = 0; i < A.length - 1; i++) {
                        if(A[i] == A[i + 1]) {
                                return true;
                        }
                }
                return false;
        }
        
        // 1 indexed FenwickTree
        static class FenwickTree {

                long[] tree;
                int size;

                public FenwickTree(int size) {
                        this.size = size;
                        tree = new long[size + 1];
                }
                
                public void update(int idx, long value) {
                        for (int i = idx; i <= size; i += (i & -i)) {
                                tree[i] += value;
                        }
                }
                
                public long sum(int n) {
                        long result = 0;
                        for (int i = n; i > 0; i -= (i & -i)) {
                                result += tree[i];
                        }
                        return result;
                }
        }
        
        static class InputReader {
                
                private InputStream stream;
                private byte[] buf = new byte[1024];
                private int curChar;
                private int numChars;
                private SpaceCharFilter filter;
                
                public InputReader(InputStream stream) {
                        this.stream = stream;
                }
                
                public static boolean isWhitespace(int c) {
                        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
                }
                
                public int read() {
                        if (numChars == -1) {
                                throw new InputMismatchException();
                        }
                        if (curChar >= numChars) {
                                curChar = 0;
                                try {
                                        numChars = stream.read(buf);
                                } catch (IOException e) {
                                        throw new InputMismatchException();
                                }
                                if (numChars <= 0) {
                                        return -1;
                                }
                        }
                        return buf[curChar++];
                }
                
                

                public boolean isSpaceChar(int c) {
                        if (filter != null) {
                                return filter.isSpaceChar(c);
                        }
                        return isWhitespace(c);
                }
                
                public interface SpaceCharFilter {

                        public boolean isSpaceChar(int ch);
                }
                
                public String next() {
                        return nextString();
                }

                public String nextString() {
                        int c = read();
                        while (isSpaceChar(c)) {
                                c = read();
                        }
                        StringBuilder res = new StringBuilder();
                        do {
                                res.appendCodePoint(c);
                                c = read();
                        } while (!isSpaceChar(c));
                        return res.toString();
                }
                
                public int nextInt() {
                        int c = read();
                        while (isSpaceChar(c)) {
                                c = read();
                        }
                        int sgn = 1;
                        if (c == '-') {
                                sgn = -1;
                                c = read();
                        }
                        int res = 0;
                        do {
                                if (c < '0' || c > '9') {
                                        throw new InputMismatchException();
                                }
                                res *= 10;
                                res += c - '0';
                                c = read();
                        } while (!isSpaceChar(c));
                        return res * sgn;
                }
                
                public Long nextLong() {
                        return Long.parseLong(nextString());
                }

                public Double nextDouble() {
                        return Double.parseDouble(nextString());
                }
        }
        
        private void debug(Object... o) {
                if(!submit) {
                        System.out.println(Arrays.deepToString(o));
                }
        }
 
        public static void main(String args[]) throws IOException {
                new ByeInversions();
        }
}
