#include<stdio.h>
using namespace std;
typedef long long int lli;
lli mergeSORT(lli a[],lli l,lli r,lli IV );
lli merge(lli a[],lli l,lli mid,lli r, lli IV);
int main()
{
int t;
	scanf("%d",&t);
	
	int T=1;
	while(t--)
	{
		lli init=0;
		lli s,k,ans=0;
		scanf("%lld %lld",&s,&k);
		lli *a=new lli[s];
		
		for(lli i=0;i<s;i++) scanf("%lld",a+i);
		
		 lli IV = mergeSORT(a,0,s-1,init);
		 if(k<=IV) ans=IV-k;
		 if(k>IV)
		 {
		 	lli dif=k-IV;
		 	if(dif%2==0) ans=0;
		 	else 
		 	{ 
		 	  bool flag=0;
		 	  for(lli i=0;i<s-1;i++)
		 	  {
		 	  	if(a[i]==a[i+1])
		 	  	{
		 	  		flag=1;
		 	  		break;
		 	  	}
		 	  }
		 	  if(flag==1) ans=0;
		 	  else ans=1;
		 	}
		 }
		 
		printf("Case %d: %lld\n",T,ans);
		T++;
   }
}

lli mergeSORT(lli a[],lli l,lli r, lli IV )
{ 
lli iv1,iv2,iv3;

if(l<r)
{   lli mid=(l+r)/2;
    iv1=mergeSORT(a,l,mid,IV);
    iv2=mergeSORT(a,mid+1,r,IV);
    iv3=merge(a,l,mid,r,IV);
    IV=iv1+iv2+iv3;
  return IV;
}
 return IV;
}
lli merge(lli a[],lli l,lli mid,lli r,lli IV)
{
	
	lli *dupAr = new lli[r-l+1];
	lli i=0;
	lli ct1=l;
	lli ct2=mid+1;
	
	 for(ct1=l,ct2=mid+1;ct1<=mid && ct2<=r;)
	 {
	 	 if(a[ct1]<=a[ct2]) 
		  { dupAr[i]=a[ct1];
		    i++; ct1++;
	      }
	 	 if(a[ct2]<a[ct1]) 
		  {    dupAr[i]=a[ct2];
		       i++; ct2++;
		       IV+=mid-ct1+1; //calculate the number of inversions
	      }
	 }
	

	 	 while(ct1<=mid)
	 	 {
	 	 	dupAr[i]=a[ct1];
	 	 	i++; ct1++;
	 	 }
	 

	 	while(ct2<=r)
	 	{
	 		dupAr[i]=a[ct2];
	 		i++; ct2++;
	 	}
	 
	 
	 for(lli i=0,j=l;j<=r;i++,j++)
	   a[j]=dupAr[i];
	 
	 delete[] dupAr;
	 return IV;
}