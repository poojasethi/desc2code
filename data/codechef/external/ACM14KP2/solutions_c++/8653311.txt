#include <bits/stdc++.h>
#define ll long long
#define mod 1000000007
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define pi 3.14159265
#define si(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define MEM(x, y) memset(x, y, sizeof(x))
#define round(x) x + 0.5
using namespace std ;

int inp[100010], temp[100010];
pii ind[100010];
ll merge(int arr[], int temp[], int left, int mid, int right)
{
  int i, j, k;
  ll inv_count = 0;
  
  i = left;
  j = mid;
  k = left;
  while ((i <= mid - 1) && (j <= right))
  {
    if (arr[i] <= arr[j])
    {
      temp[k++] = arr[i++];
    }
    else
    {
      temp[k++] = arr[j++];
  
      inv_count = inv_count + (mid - i);
    }
  }
  
  while (i <= mid - 1)
    temp[k++] = arr[i++];
  
  while (j <= right)
    temp[k++] = arr[j++];
  
  for (i=left; i <= right; i++)
    arr[i] = temp[i];
  
  return inv_count;
}

ll _mergeSort(int arr[], int temp[], int left, int right)
{
  ll mid, inv_count = 0;
  if (right > left)
  {
    mid = (right + left)/2;
  
    inv_count  = _mergeSort(arr, temp, left, mid);
    inv_count += _mergeSort(arr, temp, mid+1, right);
  
    inv_count += merge(arr, temp, left, mid+1, right);
  }
  return inv_count;
}

ll mergeSort(int arr[], int array_size)
{
    return _mergeSort(arr, temp, 0, array_size - 1);
}

int main() {
	
	int tc, n, k;
	ll ans = 0;
	scanf("%d", &tc);
	for (int t = 1; t <= tc; t++) {
		scanf("%d%d", &n, &k);
		for (int i = 0; i < n; i++) 
			scanf("%d", &inp[i]);
		
		ans = mergeSort(inp, n);
		sort(inp, inp + n);
		
		if (ans >= k)
			ans = ans - k;
		else {
			bool same = false;
			for (int i = 1; i < n; i++) 
				if (inp[i] == inp[i - 1]) {
					same = true;
					break;
				}
			k = k - ans;
			if (k % 2 == 0 || same)
				ans = 0;
			else 
				ans = 1;
		}		
		printf("Case %d: %lld\n", t, ans);
	}
	
	return 0;
}
