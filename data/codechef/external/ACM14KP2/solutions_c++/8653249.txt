#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
#define get getchar
#define put(c) printf("%c",c)
#define pn printf("\n")
#define pb push_back
#define mp make_pair
#define ref(i,a,n) for(int i=a;i<=n;i++)
#define reb(i,n,a) for(int i=n;i>=a;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FO freopen ("out.txt", "w", stdout)
#define FI freopen ("in.txt", "r", stdin)
inline void gi(int &x) {
    register int c = get(); x = 0;
    int sn=1;
    for(;(c<48 || c>57);c = get()) 
    if(c=='-') sn=-1;
    for(;c>47 && c<58;c = get()) {
        x = (x<<1) + (x<<3) + c - 48;
    }
    x*=sn;
}
 
inline void gii(LL &x) {
    register LL c = get(); x = 0;
    LL sn=1;
    for(;(c<48 || c>57);c = get()) 
    if(c=='-') sn=-1;
    for(;c>47 && c<58;c = get()) {
        x = (x<<1) + (x<<3) + c - 48;
    }
    x*=sn;
}
void wi(int n) {
    int sign = n >= 0 ? 1 : -1;
    n = n>0 ? n : -n;
    char buf[10];
    int i = 9;
    if(!n) buf[i--] = 48;
    while(n) {
        buf[i--] = n % 10 + 48;
        n /= 10;
    }
    
    if(sign < 0) put('-');
    while(++i < 10) put(buf[i]);
}
void wii(LL n)
{
    LL sign = n >= 0 ? 1 : -1;
    n = n>0 ? n : -n;
    char buf[25];
    LL i = 18;
    if(!n) buf[i--] = 48;
    while(n) {
        buf[i--] = n % 10 + 48;
        n /= 10;
    }
    if(sign < 0) put('-');
    while(++i < 19) put(buf[i]);
}
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={2,1,-1,-2,-1,1};int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction
#define N 100005
int a[N],tree[N];
 
void update(int ind) { while(ind<N) tree[ind]++,ind+=(ind&-ind); }
int read(int ind) { int sum=0; while(ind>0) sum+=tree[ind],ind-=(ind&-ind); return sum; }
 main(){
 	int t,n,k;
 	LL inv;
 	gi(t);
 	ref(tc,1,t)
 	{	
	 inv=0;	
 	gi(n);gi(k);
 	rep(i,n)gi(a[i]);
 	rep(i,N) tree[i]=0;
	 rep(i,n)
	 {
	 	inv+=i-read(a[i]);
	 	update(a[i]);
	 }
	 cout << "Case " << tc << ": ";
	 if(k<=inv) wii(inv-k);
	 else{
	 	int flag=0;
	 	sort(a,a+n);
	 	ref(i,1,n-1)if(a[i]==a[i-1]) {
	 	flag=1;break;}
	 	if(flag)wii(0);
	 	else wii((k-inv)&1);
	 }
	 pn;
	 }
 	return 0;
 }