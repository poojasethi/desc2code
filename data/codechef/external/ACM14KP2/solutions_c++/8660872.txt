#include<stdio.h>
static long long int count = 0;
void merge(int arr1[], int l, int m, int r);
void split(int arr[], int l, int r);
int main()
{
    int n, a[110000], i, c;
    int t;
    long long int  k, ans, flag;
    scanf("%d", &t);
    c=1;
    while(t--)
    {
        scanf("%d %lld", &n, &k);
        for(i=0; i<n; i++)
            scanf("%d", &a[i]);
        count = 0;
        flag=0;
        split(a, 0, n-1);
        if((count-k)>=0)
            printf("Case %d: %lld", c, count-k);
        else
        {
            for(i=0; i<n-1; i++)
            {
                if(a[i]==a[i+1])
                    flag=1;
            }

            if((k-count)%2==0)
                ans=0;
            else
                ans=1;
            if(flag==1)
                ans=0;
            printf("Case %d: %lld", c, ans);
        }
        if(t!=0)
            printf("\n");
        c++;
    }
    return 0;
}

void split(int arr[], int l, int r)
{
    int m;
    if(l<r)
    {
        m=(l+r-1)/2;
        split(arr, l, m);
        split(arr, m+1, r);
        merge(arr, l, m, r);
    }
}


void merge(int arr1[], int l, int m, int r)
{
    int ctr1=0, ctr2=0, firsthalf[100005], secondhalf[100005], k;
    int size1 = (m-l) +1;
    int size2 = (r-(m+1)) +1;

    for(ctr1=0; ctr1<size1; ctr1++)
        firsthalf[ctr1] = arr1[l+ctr1];

    for(ctr2=0; ctr2<size2; ctr2++)
        secondhalf[ctr2] = arr1[m+1+ctr2];

    ctr1 = 0;
    ctr2 = 0;
    k = l;

    while(ctr1<size1&&ctr2<size2)
    {
        if(firsthalf[ctr1]<=secondhalf[ctr2])
            arr1[k++] = firsthalf[ctr1++];

        else
        {
            arr1[k++] = secondhalf[ctr2++];
            count=count+(size1-ctr1);
        }
    }
    while(ctr1<size1)
        arr1[k++] = firsthalf[ctr1++];

    while(ctr2<size2)
        arr1[k++] = secondhalf[ctr2++];
}
