/* The idea is to first convert the no to its ternary form
   and then replace each digit with some character, divide the 
   ternary form by 10 and add some carry value and again compute:
   1 -> 1   Carry = 0
   0 -> 0	Carry = 0
   2 -> -	Carry = 1
   3 -> 0	Carry = 1
*  Author: thecodekaiser
*/
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<map>
#include<string>

using namespace std;

typedef long long ll;


ll rev_num(ll num)
{
	ll n = num;
	ll res = 0;
	while(n>0)
	{
		int dig = n % 10;
		n /= 10;
		res = res*10 + dig;
	}
	return res;
}
ll convS(string num)
{
	ll res = 0;
	for(int i = 0; i < num.length(); i++)
	{
		res = res*10 + num[i] - '0';
		if(num[i] == 0)
			res = res*10;
	}
	return res;
}

ll conv(long num)
{
	long n = num;
	ll div,rem;
	char ch;
	string res = "";
	ll send;
	while(true)
	{
		div = (long)(n/3);
		rem = n % 3;
		ch = rem + '0';
		res = ch + res;
		if(div < 3)
			break;
		n = div;
	}
	if(div >= 1)
		ch = div + '0',  res = ch + res;

	send = convS(res);
	return send;
}

int main()
{
	ll p,con;
	bool flag = 0;
	string res = "";
	scanf("%lld",&p);
	if(p < 0)
	{
		flag = 1;
		p *= -1;
	}
	con = conv(p);
	//cout<<con<<endl;
	if(con == 0)
		res = "0";
	while(con > 0)
	{
		int dig = con % 10;
		if(dig == 0)
		{
			res = '0' + res;
			con = con/10 + 0;
		}
		else if(dig == 1)
		{
			res = '|' + res;
			con = con/10 + 0;
		}
		else if(dig == 2)
		{
			res = '-' + res;
			con = con/10 + 1;
		}
		else if(dig == 3)
		{
			res = '0' + res;
			con = con/10 + 1;
		}
	}
	if(flag == 1)
	{
		for(int i = 0; i < res.length(); i++)
			if(res[i] == '|')
				res[i] = '-';
			else if(res[i] == '-')
				res[i] = '|';
	}
	cout<<res<<endl;
	return 0;
}
	
