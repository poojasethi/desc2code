#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> pii;
typedef pair<pii,pii> ppp;
int depth = (1<<15), seg[(1<<16)], upd[(1<<16)];
void seg_split(int pos)
{
	int c1 = 2*pos;
	int c2 = c1+1;
	seg[c1]+=upd[pos];
	seg[c2]+=upd[pos];
	upd[c1]+=upd[pos];
	upd[c2]+=upd[pos];
	upd[pos] = 0;
}
void seg_merge(int pos)
{
	int c1 = 2*pos;
	int c2 = c1+1;
	seg[pos] = max(seg[c1], seg[c2]);
}
void seg_update(int root, int lmost, int rmost, int u, int v, int val)
{
	if(u <= lmost && rmost <= v)
	{
		seg[root]+=val;
		upd[root]+=val;
		return;
	}
	seg_split(root);
	int mid = (lmost+rmost)/2;
	if(u <= mid)
		seg_update(2*root, lmost, mid, u, v, val);
	if(mid < v)
		seg_update(2*root + 1, mid+1, rmost, u, v, val);
	seg_merge(root);
}
vector <int> ys;
vector <ppp> A;
int main()
{
	// freopen("input.txt", "r", stdin);
	ios_base::sync_with_stdio(0);
	int t;
	cin>>t;
	while(t--)
	{
		int n,x1,y1,x2,y2;
		cin>>n;
		for (int i = 0; i < n; ++i)
		{
			cin>>x1>>y1>>x2>>y2;
			ys.push_back(y1);
			ys.push_back(y2);
			A.push_back(ppp(pii(x1,-1),pii(y1,y2)));
			A.push_back(ppp(pii(x2,1),pii(y1,y2)));
		}
		sort(ys.begin(), ys.end());
		ys.resize(unique(ys.begin(), ys.end()) - ys.begin());
		int ans = 0;
		sort(A.begin(), A.end());
		for (int i = 0; i < A.size(); ++i)
		{
			vector <int>::iterator it1 = lower_bound(ys.begin(), ys.end(), A[i].second.first);
			int idx1 = it1-ys.begin();
			vector <int>::iterator it2 = lower_bound(ys.begin(), ys.end(), A[i].second.second);
			int idx2 = it2-ys.begin();
			seg_update(1, depth, 2*depth - 1, depth+idx1, depth+idx2, -A[i].first.second);
			ans = max(ans, seg[1]);
		}
		cout<<ans<<"\n";
		// cleanup
		A.clear();
		ys.clear();
		memset(seg, 0, sizeof seg);
		memset(upd, 0, sizeof upd);
	}
	return 0;
}