#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <set>
#include <cstdio>
#include <cstdlib>
#include <stack>
#include <cstring>
#include <iomanip>
#include <cctype>
#include <map>
#include <cassert>

using namespace std;

#define START 0
#define END 1

struct info {
    int x;
    int y1,y2;
    int type;
    bool operator<(const info& other) const {
        if(x == other.x) return type < other.type;
        return x < other.x;
    }
};

const int N = 10005;
info a[2 * N];

struct {
    int ans;
    int pend;
} ST[8 * N];

void init(int x,int y,int n) {
    ST[n].ans = 0;
    ST[n].pend = 0;
    if(x != y) {
        init(x,(x + y)/2,2 * n);
        init((x + y)/2 + 1,y,2 * n + 1);
    }
}

int qs,qe,val;

void Set(int x,int y,int n,int val) {
    ST[n].ans+=val;
    ST[n].pend+=val;
}

void Down(int x,int y,int n) {
    int m = (x + y)/2;
    if(ST[n].pend) {
        Set(x,m,2 * n,ST[n].pend);
        Set(m + 1,y,2 * n + 1,ST[n].pend);
    }
    ST[n].pend = 0;
}

void Up(int x,int y,int n) {
    ST[n].ans = max(ST[2 * n].ans,ST[2 * n + 1].ans);
}

void update(int x,int y,int n) {
    if(qs > y || qe < x) return;
    else if(x >= qs && y <= qe) {
        ST[n].ans+=val;
        ST[n].pend+=val;
    }
    else {
        Down(x,y,n);
        update(x,(x + y)/2,2 * n);
        update((x + y)/2 + 1,y,2 * n + 1);
        Up(x,y,n);
    }
}


void solve() {
    int n; cin>>n;
    vector<int> all;
    for(int i = 1;i <= n;i++) {
        int x1,x2,y1,y2; scanf("%d %d %d %d",&x1,&y1,&x2,&y2);
        a[2 * i - 1].type = START;
        a[2 * i - 1].x = x1;
        a[2 * i - 1].y1 = y1;
        a[2 * i - 1].y2 = y2;
        a[2 * i].type = END;
        a[2 * i].x = x2;
        a[2 * i].y1 = y1;
        a[2 * i].y2 = y2;
        all.push_back(y1);
        all.push_back(y2);
    }
    sort(all.begin(),all.end());
    map<int,int> mp;
    mp[all[0]] = 1;
    for(int i = 1;i < all.size();i++) {
        if(all[i] != all[i - 1]) mp[all[i]] = mp[all[i - 1]] + 1;
    }
    for(int i = 1;i <= 2 * n;i++) {
        a[i].y1 = mp[a[i].y1];
        a[i].y2 = mp[a[i].y2];
    }
    sort(a+1,a+1+(2*n));
    int ans = 0;
    init(1,2 * N,1);
    for(int i = 1;i <= 2 * n;i++) {
        if(a[i].type == START) {
            qs = a[i].y1;
            qe = a[i].y2;
            val = 1;
            update(1,2 * N,1);
            ans = max(ans,ST[1].ans);
        }
        else {
            qs = a[i].y1;
            qe = a[i].y2;
            val = -1;
            update(1,2 * N,1);
        }
    }
    cout<<ans<<endl;
    
}

int main() {
    int t; cin>>t;
    while(t--) {
        solve();
    }
}