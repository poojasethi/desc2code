#include<bits/stdc++.h>
using namespace std ;
int k , m , u , v , s , f , t ;
const int maxn = 600 ;

int dist[maxn][7] , vis[maxn][7];
int INF = 1000000009 ;


struct node
{
    int v , s , f , t ;

};

typedef struct node node ;

struct node2
{
    int r , e  , t ;
//    bool operator <( node2 x ) const
//    {
//        return t < x.t ;
//    }
};

bool operator < (const node2 &a,const node2 &b)
{
    return a.t > b.t;
}

typedef struct node2 node2 ;


vector< node >g[maxn] ;

int main()
{
      int n ;
      cin >> n  ;
      for ( int cas = 1 ; cas <= n ; cas++)
      {
          cin >> k >> m ;

          for ( int j = 1 ; j <= k ; j++)
            g[j].clear() ;


          for ( int i = 1 ; i <= k ; i++)
          {
            for ( int j = 0 ; j <= 6 ; j++)

                {
                    vis[i][j] = 0 ;
                    dist[i][j] = INF ;
                }
          }

          for ( int j = 1 ; j <= m ; j++)
          {
              cin >> u >> v >> s >> f >> t ;
              node a ;
              a.v = v ;
              a.s = s;
              a.f = f ;
              a.t = t ;
              g[u].push_back(a) ;
          }

          dist[1][6] = 0 ;

          priority_queue < node2 > q ;
          node2 start ;
          start.r = 1 ;
          start.e = 6 ;
          start.t = 0 ;

          q.push(start) ;

          while( !q.empty())
          {
            node2 x = q.top();
            q.pop() ;
            if ( vis[x.r][x.e] == 1 )
                continue ;

            for( int j = 0 ; j < ( g[x.r]).size() ; j++)
            {
                int v1 = g[x.r][j].v ;

                for ( int i = 0 ; i <= 24 ; i++)
                {
                    int nt =  x.t + i  ;

                    int nh = ( ( x.t ) + i  ) % 24 ;

                    int ne = min ( x.e + i , 6 );

                      if ( ( g[x.r][j].s <= nh ) && (   g[x.r][j].f >= nh ) &&  ( g[x.r][j].t <=  ne  ) )
                      {
                          if ( ( nt + g[x.r][j].t ) < ( dist[v1][ ne - g[x.r][j].t ]) )
                           {
                              dist[v1][ne - g[x.r][j].t] =  g[x.r][j].t + nt  ;
                              node2 y;
                               y.r = v1 ;
                               y.e = ne - g[x.r][j].t ;
                               y.t = dist[v1][ne - g[x.r][j].t];

                               q.push(y) ;
                           }
                      }

                }

            }

            vis[x.r][x.e] = 1 ;

          }

 int ans = INF ;
  int fi , fj , fh ;

 for ( int i = 0 ; i < 7 ; i++)
 {
     //for ( int h = 0 ; h < 24 ; h++)
     //{
         if( ans > dist[k][i])
         {
             ans = dist[k][i];
             fi = k ;
             fj =  i ;

         }
     //}
 }

cout << "Case " << cas << ": " << ans  << endl ;
//cout << " fj " <<  fj << endl ;
}

      return 0 ;
}
