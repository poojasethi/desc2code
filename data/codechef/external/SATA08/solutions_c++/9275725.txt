#include <bits/stdc++.h>
using namespace std;
 
typedef long long LL;
 
#define PII       pair<LL,LL>
#define all(c)    c.begin(),c.end()
#define sz(c)     (int)c.size()
#define clr(c)    c.clear()
#define pb        push_back
#define mp        make_pair
#define cin(x)	scanf("%d" , &x)
#define MOD		1000000007
#define EPS       1E-10

int d , k;
vector<int> given;
LL dp[1 << 15][1010];

LL lft[1 << 15][10]; // all digits poss.

LL solve(int mask , int curr)
{
	if((1 + mask) == (1 << sz(given)))
		return (curr == k);
	else if(dp[mask][curr] != -1) return dp[mask][curr];
	LL ret = 0;
	for(int i = 0; i < 10; i++)
	{
		if(lft[mask][i] >= 0)
		{
			ret += solve(mask|1<<lft[mask][i] , (curr * 10 + i) % d);
		}
	}
	return (dp[mask][curr] = ret);
}

int main()
{
	LL n;
	cin >> n;
	while(n)
	{
		given.pb(n%10);
		n /= 10;
	}
	cin >> d >> k;
	reverse(all(given));
	for(int i = 0; i < (1 << sz(given)); i++)
		for(int j = 0; j < d; j++)
			dp[i][j] = -1;
	for(int i = 0; i < (1 << sz(given)); i++)
	{
		for(int j = 0; j < 10; j++)
		{
			int pos = -1;
			for(int k = 0; k < sz(given); k++)
			{
				if(i&(1 << k)) continue;
				if(given[k] == j)
				{
					pos = k;
					break;
				}
			}
			lft[i][j] = pos;
		}
	}
	cout << solve(0 , 0) << endl;
	return 0;
}