#include <assert.h>
#include <memory.h>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

ll F[22];
int a[22], D, K;
ll dp[33000][1111];
int N;
int full_mask;

ll solve(int mask, int target, int pw) {
  ll &res = dp[mask][target];
  if (res != -1) return res;
  if (mask == full_mask) {
    return target % D == K ? 1 : 0;
  }
  res = 0;
  rep(i, N) {
    if (((mask >> i) & 1) == 0) {
      res +=
          solve(mask | (1 << i), (target + (a[i] * pw) % D) % D, (pw * 10) % D);
    }
  }
  return res;
}

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  ios_base::sync_with_stdio(false);

  F[0] = 1;
  FOR(i, 1, 22) F[i] = F[i - 1] * i;

  string s;

  cin >> s >> D >> K;
  int cnt[11] = {0};
  rep(i, (int)s.size()) {
    int x = s[i] - '0';
    cnt[x]++;
    a[i] = x;
  }

  CL(dp, -1);
  N = (int)s.size();
  full_mask = (1 << N) - 1;
  ll ans = solve(0, 0, 1 % D);
  rep(i, 10) ans /= F[cnt[i]];
  cout << ans << endl;

#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
