/*****************************************************************************************/
/*																		     			 */
/*  					Adarsh Pugalia 										 			 */
/*																			 			 */
/*****************************************************************************************/
 
#include <bits/stdc++.h>

/* Data types and structures. */
#define ll long long int
#define llu long long int unsigned
#define vi vector <int>
#define vl vector <ll> 
#define pii pair<int, int>
#define pll pair<ll, ll>
#define vpii vector <pii >
#define vpll vector <pll >
 
/* Data structure helpers. */ 
#define f first
#define s second
#define pb push_back
#define pob pop_back
#define mp make_pair
#define sz(n) (int)n.size()-1
#define all(n) n.begin(), n.end()
#define has(it,s) if(it!=s.end())
 
/* Input output defines. */
#define sd(n) scanf("%d", &n)
#define sl(n) scanf("%lld", &n)
#define slf(n) scanf("%lf", &n) 
#define pd(n) printf("%d", n);
#define pl(n) printf("%lld", n);
#define plf(n) printf("%0.9lf", n);
#define ps printf(" ")
#define pe printf("\n")

/* loops */
#define rep(i,j,k) for(int i=j; i<=k; i++)
#define repd(i,j,k) for(int i=j; i>=k; i--)
#define iter(it, s) for(auto it=s.begin(); it!=s.end(); it++)

/* constraints. */ 
#define max_size 100005
#define max_sieve_size 1000005
#define max_matrix_size 100
#define max_log 17
#define INF 1000000000000000000
#define MOD 1000000007
#define EPS 0.00000001
#define mod(a) ((a)%MOD)

#define bcnt __builtin_popcount
 
using namespace std;

ll dp[1<<15][1005];
string w;
ll n, k, d;

void solve(int test_case) {

	cin>>w;
	sl(d); sl(k);

	n = w.length();
	for(int i=0; i<n; i++) {
		dp[1<<i][(w[i]-'0')%d]++;
	}

	for(int i=0; i<(1<<n)-1; i++) {
		for(int j=0; j<n; j++) {
			if(((1<<j)&i)==0) {
				int flag = 1;

				rep(m,0,j-1) {
					if((i&(1<<m)) && w[m]==w[j]) {
						flag = 0;
						break;
					}
				}

				if(flag) {
				//cout<<"here: "<<i<<" "<<j<<endl;
					rep(m,0,d-1) {
						dp[i|(1<<j)][(m*10 + w[j]-'0')%d] += dp[i][m];
					}
				}
			}
		}
	}

	cout<<dp[(1<<n)-1][k]<<endl;
}

int main() {
	int t = 1;
	//sd(t);
 
	rep(i,1,t) {
		solve(i);
	}
	return 0;
}
