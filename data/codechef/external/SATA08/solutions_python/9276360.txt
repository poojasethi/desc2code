#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
#define pb push_back
#define mp make_pair
#define f first
#define sc second
#define pii pair<int,int>
#define M 1000000007
#define inf (int)(2e+9)
#define all(o) (o).begin(), (o).end()
/*#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;*/
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * (b / gcd(a, b))); }
LL max(LL a,LL b,LL c){return max(a,max(b,c));}
inline LL power(LL x,LL y)
{
    LL ans=1;
    while(y>0){
        if(y&1)
            ans=(ans*x)%M;
        x=(x*x)%M;
        y/=2;
    }
    return ans;
}
inline int read()
{
	int ret = 0,temp=1;
	int c = getchar_unlocked();
	while(c<'0' || c>'9'){
		c = getchar_unlocked();
	}
	while(c>='0' && c<='9')
	{
		ret = (ret<<3) + (ret<<1) + c - '0';
		c = getchar_unlocked();
	}
        return ret;
}
LL mulmod(LL a,LL b) {
   long double res = a;
   res *= b;
   LL c = (LL)(res / M);
   a *= b;
   a -= c * M;
   a %= M;
   if (a < 0) a += M;
   return a;
}
LL dp[(1<<15)][1000];
int a[15];
int id;
LL n,d,k;
map<LL,int> vis;
LL p[20],fact[20];
LL solve(int mask,LL mod)
{
    if(mask==(1<<id)-1){
      if(mod==k) return 1;
      return 0;
    }
    LL &ret=dp[mask][mod];
    if(ret!=-1) return ret;
    ret=0;
    int r=__builtin_popcount(mask);
    for(int i=0;i<id;i++){
      if((mask&(1<<i))) continue;
      else ret+=solve(mask|(1<<i),(mod+a[i]*p[r])%d);
    }
    return ret;
}
int main()
{
  memset(dp,-1,sizeof(dp)); 
  scanf("%lld %lld %lld",&n,&d,&k);
  p[0]=1;
  for(int i=1;i<20;i++) p[i]=(p[i-1]*10)%d;
    fact[0]=1;
  for(int i=1;i<20;i++) fact[i]=i*fact[i-1];
  k%=d;
  int i=0;
  while(n!=0){
    a[i]=n%10;
    n/=10;
    i++;
  }
  id=i;
 // printf("%d\n",id);
  LL ans=solve(0,0);
  int f[10]={0};
  for(int i=0;i<id;i++){
    int x=a[i];
    f[x]++;
  }
  for(int j=0;j<10;j++) ans/=fact[f[j]];
  printf("%lld\n",ans);
  return 0;
}
