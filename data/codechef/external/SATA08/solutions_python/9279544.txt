#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;

#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define mp make_pair

#define trace1(x)							cerr << #x << ": " << x << endl;
#define trace2(x, y)						cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)						cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       			cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    			cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) 			cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define MAX_MASK	32768

int d;
long long dp[MAX_MASK][1000];
string n;
int powers[16];

long long myPow(long long a, long long b){
	if(b == 0) return 1;
	if(b == 1) return a;
	long long half = myPow(a, b/2);
	return half * half * myPow(a, b % 2);
}

long long recurse(long long mask, int rem){
	assert(mask < MAX_MASK);
	if(dp[mask][rem] != -1) return dp[mask][rem];
	if(mask == 0 && rem == 0) return 1;
	else if(mask == 0 && rem != 0) return 0; 
	int numDigits = 0, validBits = 0;
	long long nMask = mask;
	vector<bool> set;
	while(nMask){
		numDigits++;
		if(nMask % 2){
			validBits++;
			set.push_back(true);
		}
		else set.push_back(false);
		nMask /= 2;
	}
	long long ans = 0;
	bool allowed[10];
	memset(allowed, true, sizeof(allowed));
	for(int i = 0; i < numDigits; i++){
		if(set[i] && allowed[n[n.size()-i-1] - '0']){
			nMask = mask - myPow(2, i);
			int aRem = ((n[n.size()-i-1] - '0') * powers[validBits-1]) % d;
			allowed[n[n.size()-i-1] - '0'] = false;
			ans += recurse(nMask, (d + rem - aRem) % d);
		}
	}
	dp[mask][rem] = ans;
	return ans;
}

int main(){
	cin >> n;
	int k;
	cin >> d >> k;
	memset(dp, -1, sizeof(dp));
	powers[0] = 1;
	for(int i = 1; i < 16; i++){
		powers[i] = (powers[i-1] * 10) % d;
	}
	long long mask = 0;
	for(int i = 0; i < (int)n.size(); i++){
		mask += myPow(2, n.size()-i-1);
	}
	cout << recurse(mask, k) << endl;
}
