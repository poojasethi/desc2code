#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>

using namespace std;

int n,m,ms;
int set[1001][1001];

struct st{
	int p,sz;
}s[1001000];


int findSet(int x){
	if( x!=s[x].p ) return s[x].p=findSet(s[x].p);
	return s[x].p;
}
void Union(int x,int y){  ///cout<<x<<" link "<<y<<endl;
	x=findSet(x); y=findSet(y);
	if( x==y ) return ;
	s[x].p=y;
	s[y].sz+=s[x].sz;
	ms=max(ms,s[y].sz);
}

int main (){
	scanf("%d %d",&n,&m);
	int q; scanf("%d",&q);
	for(int i=0;i<=n;i++) {
		 s[i].p=-1; s[i].sz=1;
	}
	for(int i=0;i<q;i++){
		int c,a,b;
		scanf("%d",&a);
		if( a==0 ) printf("%d\n",ms);
		else {
			scanf("%d %d",&a,&b); // cout<<a<<" "<<b<<endl;
			if( set[a][b] ) continue;
			set[a][b]=1; ms=max(ms,1);
			
			c=(a-1)*m+b;  //cout<<"c"<<c<<endl;
			s[c].p=c; s[c].sz=1;
			
			if( a-1   && set[a-1][b])  Union(c, (a-2)*m+b);
			if( b-1   && set[a][b-1])  Union(c, (a-1)*m+b-1);
			if(a+1<=n && set[a+1][b])  Union(c, (a  )*m+b);
			if(b+1<=m && set[a][b+1])  Union(c, (a-1)*m+b+1);
			
		}
	}
	
	
	return 0;
}