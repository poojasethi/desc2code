#include<cstdio>
#include<iostream>
using namespace std;
#define MAX 1050
int canvas[MAX][MAX];
int ans;
struct set{
	int p;
	int size;
}sets[MAX*MAX];
int dir_x[]={0,0,1,-1};
int dir_y[]={-1,1,0,0};
int findset(int p)
{
	while(p!=sets[p].p)
	p=sets[p].p;
	return p;
}
void setUnion(int p1,int p2)
{
	p1=findset(p1);
	p2=findset(p2);
	if(p1==p2)
	return;
	//printf("father of %d %d is %d %d %d\n",x1,y1,set1.x,set1.y,set1.size);
	//printf("father of %d %d is %d %d %d\n",x2,y2,set2.x,set2.y,set2.size);

	int size=sets[p1].size+sets[p2].size;
	sets[p1].p=p2;
	sets[p2].size=size;
	ans=max(ans,size);
}
int main()
{
	int M,N,Q,B;
	int i,j,k;
	scanf("%d%d",&M,&N);
	scanf("%d",&Q);
	while(Q--)
	{
		scanf("%d",&B);
		if(B==0)
		printf("%d\n",ans);
		else if(B==1)
		{
			scanf("%d%d",&i,&j);
			if(canvas[i][j]==0)
			{
				canvas[i][j]=1;
				int p=i*M+j;
				sets[p].p=p;sets[p].size=1;
				ans=max(ans,sets[p].size);
				for(k=0;k<4;k++)
				if(canvas[i+dir_x[k]][j+dir_y[k]])
				{
					int p1=(i+dir_x[k])*M+(j+dir_y[k]);
					setUnion(p,p1);
				}
			}
		}
	}
	return 0;
}
