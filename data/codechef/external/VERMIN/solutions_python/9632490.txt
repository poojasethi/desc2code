#include "bits/stdc++.h"
using namespace std;
const int N = 1e5 + 5;
int n , m , k;
int a , b;
vector < int > v[N];
vector < int > g[N];
bool visited[N];
int tin[N];
int anc[N];
int timer = 0;
int dp[N];
int dp2[N];
long long score = 0;
int sz;
void dfs(int node , int parent){
    visited[node] = 1;
    tin[node] = anc[node] = ++timer;
    for(int next : v[node]){
        if(!visited[next]){
            dfs(next , node);
            anc[node] = min(anc[node] , anc[next]);
        }
        else if(next != parent){
            anc[node] = min(anc[node] , tin[next]);
        }
    }
    if(tin[node] == anc[node] && parent){
        g[node].emplace_back(parent);
        g[parent].emplace_back(node);
    }
}
void dfs2(int node){
    ++sz;
    for(int next : g[node]){
        if(!visited[next]){
            visited[next] = 1;
            dfs2(next);
        }
    }
}
int main(){
    scanf("%d %d %d" , &n , &m , &k);
    for(int i = 1 ; i <= m ; ++i){
        scanf("%d %d" , &a , &b);
        v[a].emplace_back(b);
        v[b].emplace_back(a);
    }
    for(int i = 1 ; i <= n ; ++i){
        if(!visited[i]){
            dfs(i , 0);
        }
    }
    memset(visited , 0 , sizeof(visited));
    for(int i = 1 ; i <= n ; ++i){
        if(!visited[i]){
            sz = 0;
            visited[i] = 1;
            dfs2(i);
            score += 1LL * sz * (sz - 1LL) / 2LL;
        }
    }
    if(score >= k){
        printf("-1\n");
        return 0;
    }
    ++score;
    dp[0] = 0;
    dp2[0] = 0;
    dp[1] = 2;
    dp2[1] = 1;
    for(int i = 2 ; i <= score ; ++i){
        dp[i] = 1e9;
        int j = 1;
        int jj = 0;
        while(jj <= i){
            if(dp[i - jj] + j < dp[i]){
                dp[i] = dp[i - jj] + j;
                dp2[i] = dp2[i - jj] + 1;
            }
            jj += j;
            ++j;
        }
    }
    printf("%d\n" , dp[score] + (dp2[score] == 2));
}