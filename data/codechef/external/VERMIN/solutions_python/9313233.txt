#include<iostream>
#include<fstream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<map>
#define in cin
#define out cout
using namespace std;
const int Nmax = 100001;
vector<int> G[Nmax],Tr[Nmax];
int Ans[Nmax],dv[3][Nmax];
int T[Nmax],m[Nmax];
int N,M,K,R;
int dfs(int x,int d){
    int mn=d;
    m[x]=d;
    for(vector<int>::iterator it=G[x].begin();it!=G[x].end();++it) if(*it!=T[x]){
        if(m[*it]) mn=min(mn,m[*it]);
        else T[*it]=x,mn=min(mn,dfs(*it,d+1));
    }
    if(mn>=d && m[x]!=1){
        Tr[T[x]].push_back(x);
        Tr[x].push_back(T[x]);
    }
    return mn;
}
int dfs2(int x){
    m[x]=1,R++;
    for(vector<int>::iterator it=Tr[x].begin();it!=Tr[x].end();++it) if(!m[*it]) dfs2(*it);
}
long long cnt(int x){
    R=0,dfs2(x);
    return (1LL*R*(R-1))/2;
}
int main(){
    #ifndef ONLINE_JUDGE
    ifstream in("test.in");
    ofstream out("test.out");
    #endif
    for(int i=1;i<Nmax;i++){
        Ans[i]=dv[0][i]=dv[1][i]=dv[2][i]=Nmax+1;
        for(int j=2;(1LL*j*(j-1))/2<=i;j++){
            int w=(1LL*j*(j-1))/2;
            if(i-w==0) dv[0][i]=min(dv[0][i],j);
            else{
                dv[1][i]=min(dv[1][i],dv[0][i-w]+j+1);
                dv[2][i]=min(dv[2][i],dv[1][i-w]+j-1);
                dv[2][i]=min(dv[2][i],dv[2][i-w]+j);
            }
        }
        Ans[i]=min(Ans[i],dv[0][i]);
        Ans[i]=min(Ans[i],dv[1][i]);
        Ans[i]=min(Ans[i],dv[2][i]);
    }
    in>>N>>M>>K;
    int x,y;
    for(int i=1;i<=M;i++){
        in>>x>>y;
        G[x].push_back(y);
        G[y].push_back(x);
    }
    for(int i=1;i<=N;i++) if(!m[i]) dfs(i,1);
    for(int i=1;i<=N;i++) m[i]=0;
    long long ans=0;
    for(int i=1;i<=N;i++) if(!m[i]) ans+=cnt(i);
    if(ans>=K) out<<"-1\n";
    else out<<Ans[ans+1]<<'\n';
    return 0;
}
