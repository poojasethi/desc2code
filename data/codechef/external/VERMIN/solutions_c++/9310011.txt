#include <bits/stdc++.h>

#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)

#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define LET(x, a)  __typeof(a) x(a)
#define foreach(it, v) for(LET(it, v.begin()); it != v.end(); it++)

#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define func __FUNCTION__
#define line __LINE__

using namespace std;

template<typename S, typename T> 
ostream& operator<<(ostream& out, pair<S, T> const& p){out<<'('<<p.fi<<", "<<p.se<<')'; return out;}

template<typename T>
ostream& operator<<(ostream& out, vector<T> const & v){
int l = v.size(); for(int i = 0; i < l-1; i++) out<<v[i]<<' '; if(l>0) out<<v[l-1]; return out;}

void tr(){cout << endl;}
template<typename S, typename ... Strings>
void tr(S x, const Strings&... rest){cout<<x<<' ';tr(rest...);}

const int N = 100002;
const int P = 600;

int n, m, M;
vector<int> g[N];
vector<int> comp[N];
int cnt;

vector<int> bridgeTree[N];

int dp[N], cntt[N], tmp[N], uni[N], inf = 1e9;
long long score;

int disc[N], low[N], v[N];

void dfs(int cur){
	if(v[cur]) return;
	v[cur] = 1;
	
	comp[cnt].pb(cur);
	foreach(it, g[cur]) dfs(*it);
	
}

int t;
int dfs2(int cur, int prev){
	low[cur] = disc[cur] = ++t;
	v[cur] = 1;
	
	foreach(it, g[cur]){
		if(*it == prev) continue;
		
		if(!v[*it]){
			dfs2(*it, cur);
			low[cur] = min(low[cur], low[*it]);
			
			if(low[*it] > disc[cur]){
				bridgeTree[cur].pb(*it);
				bridgeTree[*it].pb(cur);
			}
		}
		else{
			low[cur] = min(low[cur], disc[*it]);
		}
	}
}

int dfs3(int cur, int prev){
	v[cur] = 1;
	int ret = 1;
	foreach(it, bridgeTree[cur]){
		if(*it == prev or v[*it]) continue;
		
		ret += dfs3(*it, cur);
	}
	
	return ret;
}

int main(){
	sd3(n,m,M);
	
	for(int i = 1; i < N; i++){
		dp[i] = inf;
	}
	
	uni[2] = 1;
	for(int i = 3; i <= 500; i++){
		uni[i] = uni[i-1] + i-1;
	}
	
	for(int i = 2; i <= 500 and uni[i] < N; i++){
		dp[uni[i]] = i;
		cntt[uni[i]] = 1;
	}


	for(int i = 1; i < N; i++){
		for(int j = 2; j <= 500 and i+uni[j] < N; j++){
			int nxt = i+uni[j];
			if((dp[i] + j + ((cntt[i] == 1)? 1 : ((cntt[i] == 2)? -1 : 0))) <  dp[nxt]){
				dp[nxt] = min(dp[nxt], dp[i] + j + ((cntt[i] == 1)? 1 : ((cntt[i] == 2)? -1 : 0)));
				cntt[nxt] = cntt[i] + 1;
			}
		}
	}
	
	for(int i = 0; i < m; i++){
		int u, vv;
		sd2(u,vv);
		g[u].pb(vv);
		g[vv].pb(u);
	}
	
	for(int i = 1; i <= n; i++){
		if(!v[i]){
			dfs(i);
			cnt++;
		}
	}
	
	memset(v, 0, sizeof v);
	for(int i = 0; i < cnt; i++){
		dfs2(comp[i][0], -1);
	}
	
	memset(v, 0, sizeof v);
	for(int i = 1; i <= n; i++){
		if(!v[i]){
			long long tot = dfs3(i, -1);
			score += (tot*(tot-1))/2;
		}
	}
	
	if(score < M){
		printf("%d\n", dp[score+1]);
	}
	else{
		puts("-1");
	}
	
	return 0;
}