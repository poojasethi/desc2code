#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#define MAX 100005
#define MOD 1000000007
#define min(a,b) ((a)>(b)?(b):(a))
struct NODE
{
	int x;
	struct NODE *link;
};
typedef struct NODE node;
node *arr[MAX]={NULL};
int count=0,vis[MAX]={0},captain=0;
int cost[MAX];
int dfs(int u,int mincost)
{
	int A;
	vis[u]=1;
	node *p=arr[u];
	mincost=min(mincost,cost[u]);
	while(p!=NULL)
	{
		A=p->x;
		if (vis[A]==0)
		{
		    int c=dfs(A,mincost);
		    mincost=min(mincost,c);
		}
		p=p->link;
	}
	return mincost;
}
void add(int u,int v)
{
	node *t;
	t=(node *)malloc(sizeof(node));
	t->x=v;
	t->link=arr[u];
	arr[u]=t;
}
int input()
{
    int t=0;
    char c;
    c=getchar();
    while(c<'0' || c>'9')
        c=getchar();
    while(c>='0' && c<='9')
    {
        t=(t<<3)+(t<<1)+c-'0';
        c=getchar();
    }
    return t;
}
int main()
{
	int t,n,m,i,j,k,u,v;
	node *p;
	t=input();
	while(t--)
	{
		n=input();
		m=input();
		count=0;
		memset(vis,0,MAX*4);
		memset(arr,NULL,MAX*4);
		for(i=1;i<=n;i++)
            cost[i]=input();
		while(m--)
		{
			u=input();
			v=input();
			add(u,v);
			add(v,u);
		}
		/*for(i=1;i<=n;i++)
		{
			printf("%d- ",i);
			p=arr[i];
			while(p!=NULL)
			{
				printf("%d ",p->x);
				p=p->link;
			}
			printf("\n");
		}*/
		int ans=0;
		for(i=1;i<=n;i++)
		{
			if (vis[i]==0)
			{
			    int mincost=cost[i];
				ans+=dfs(i,mincost);
  		    }
		}
		printf("%d\n",ans);
	}
    return 0;
}

