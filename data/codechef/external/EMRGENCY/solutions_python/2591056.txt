// To find the answer, take the minimum value of all the valid values in a connected component.
// Now to make the graph connected, Take the minimum value of all the values we got from the above step and make edge from that node
// To all the remaining nodes, i.e add all other values and multiply that with the minimum value.
// If graph is already connected than answer is 0.
// if there exists a connected component where all nodes are not valid to be chosen, than answer is not possible (-1).

/* Author :  Jay Pandya */

// Standard includes
#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<limits.h>
#include<string.h>

//Data Structures
#include<algorithm>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>

//Macros
#define all(c) c.begin(),c.end() //all element in container c

#define tr(container, it) \
   for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) //to iterate in container

#define print(x) cout<<#x<<" is "<<x<<endl;//for printing
#define sz(a) int((a).size())
#define pb push_back
#define vi vector<int>;
#define vvi  vector<vi>; //2D string
#define ii pair<int,int>;
#define mp(typeA,typeB)  make_pair<typeA,typeB> //maing pair


#define MAX 1000010
#define LLI long long int
#define ULLI unsigned long long int

using namespace std;
int vert[MAX];
int cost[MAX];


int getpar(int u){
   if(vert[u]==u) vert[u]=u;
   else vert[u]=getpar(vert[u]);
   return vert[u];
}

void same(int u, int v){
   vert[getpar(u)]=vert[getpar(v)];
}
int main()
{
   int test,n,m,k,c;
   cin>>test;
   while(test-- > 0)
   {
   scanf("%d %d",&n,&m);
   for(int i=0;i<=n;i++)
   {
      vert[i]=i;
   }
   for(int i=0;i<n;i++)
   {
       scanf("%d",&cost[i]);
   }
   int x,y;
   for(int i=0;i<m;i++)
   {
      scanf("%d %d",&x,&y);
      int k=getpar(x);
      int l=getpar(y);
      if(k==l)
	 continue;
      same(k,l);//merge forests
   }
   map<int,int> MaxV_Component;

   for(int i=1;i<=n;i++)
      MaxV_Component[getpar(i)]=INT_MAX;
      int in;
      vector<int> V;
      for(int i=1;i<=n;i++)
      {
	    in=cost[i-1];
	 MaxV_Component[getpar(i)] = min(MaxV_Component[getpar(i)],in);
      }
      tr(MaxV_Component,it)
      {
        V.pb(it->second);
      }
      int sum=0;
      for(int i=0;i<V.size();i++)
      {
	 sum+=V[i];
	  }
      printf("%d\n",sum);
   }
   return 0;
}
