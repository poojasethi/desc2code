#include <cstdio>
#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <set>
#include <map>
#include <list>
#include <string>
#include <cstring>


using namespace std;

#define DEBUG 0
#define all(C) (C).begin() , (C).end()
#define tr(C , it) for(typeof((C).begin()) it = (C).begin() ; it != (C).end() ; it++)

#define present(C , key) ((C).find(key) != (C).end())
#define cpresent(C , key) (find(all(C) , key) != (C).end()

#define sz(a) int((a).size())
#define pb push_back
#define MOD 100000007

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int , int> PI;

int T,N,M,cost[100001] ,i , source , target , ans;
VI graph[100001];
int minimum , visited[100001];
void dfs(int u)
{
	int i;
	if(cost[u] < minimum)
		minimum = cost[u];
	for(i=0;i<graph[u].size();i++)
	{
		if(visited[graph[u][i]] == 0)
		{
			visited[graph[u][i]] = 1;
			
			dfs(graph[u][i]);
		}
	}
	visited[u] = 2;
	
	
}

void DFSMain()
{
	int i,j ;
	ans = 0;
	for(i=0;i<N;i++)
	{
		visited[i] = 0;
	}
	for(i=0;i<N;i++)
	{
		if(visited[i] == 0)
		{
			minimum = 10001;
			dfs(i);
			//printf("Min : %d Ans : %d i : %d\n",minimum,ans,i);
			ans += minimum;
		}
	}
}

int main()
{

	
	scanf("%d" , &T);
	while(T--)
	{
		scanf("%d %d" , &N , &M);
		for(i=0 ; i<N ; i++)
		{
			scanf("%d" , &cost[i]);
			graph[i].clear();
		
		}
		while(M--)
		{
			scanf("%d %d" , &source , &target);
			graph[source-1].pb(target-1);
			graph[target-1].pb(source-1);
		}
		DFSMain();
		printf("%d\n" , ans);
	}
	
	return 0;
}
