//CodeChef--Emergency
#include<bits/stdc++.h>
#define MAX 100005

using namespace std;

inline void fast_read(int *number){
	
	*number=0;
	
	 register char currentChar=getchar_unlocked();
	 
	 while(currentChar<'0'||currentChar>'9')
	      currentChar=getchar_unlocked();
	      
	 while(currentChar>='0'&&currentChar<='9'){
	 	
	 	*number=*number*10+currentChar-'0';
	 	currentChar=getchar_unlocked();
	 	 	
	 }  
	 
}

int Cost[MAX];
class Graph{
	
	private :
		
		std::vector<int> adjList[MAX];
		int Vertices;
	
	public :
	  
	   Graph(int Vertices){ this->Vertices=Vertices;  } 
	    
	   void addEdge(int src,int dest){
	   	
	   	adjList[src].push_back(dest);
	   	adjList[dest].push_back(src);	   	
	   	
	   }	
	   
	   void DFS(int u,int *Visited,int *min){
	   	
	   	Visited[u]=1;
	   	*min=(*min>Cost[u]?Cost[u]:*min);
	   	
	   	for(int i=0;i<adjList[u].size();i++)
	   	    if(!Visited[adjList[u][i]])
	   	        DFS(adjList[u][i],Visited,min); 
	   	
	   }
	   
	   int minCost(){
	   	
	   	int Visited[Vertices+1],totalCost=0,min;
	   	
	   	memset(Visited,0,sizeof(Visited));
	   	
		 for(int i=1;i<=Vertices;i++)
		    if(!Visited[i]){
	   			
	   			min=INT_MAX;
	   			DFS(i,Visited,&min);
	   			totalCost+=min;
	   			
	   		}   	 
	   	
	   	 return totalCost;   	
	   	
	   } 
	
	   void destroy(){
	   	
	   	for(int i=1;i<=Vertices;i++)
	   	     adjList[i].clear();
					   	
	   } 	
	
};

int main(void){
	
	int testCases,i,vertices,edges,src,dest;
	
	scanf("%d",&testCases);
	
	while(testCases--){
		
		scanf("%d%d",&vertices,&edges);
		
        for(i=1;i<=vertices;i++)		
		    scanf("%d",&Cost[i]);
		
		Graph G(vertices);
		
		for(i=0;i<edges;i++){
			
			//scanf("%d%d",&src,&dest);
			
			fast_read(&src);
			fast_read(&dest);
			
			G.addEdge(src,dest);
			
		}
		
		printf("%d\n",G.minCost());
		
		if(testCases)
		   G.destroy();	
		
	}
	
    return 0;
		
}