#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

char a[102][102];
int dp[102][102][26],n;

int no_distinct(int p,int q,int r,int s)
{
    if( s < q )
        return 0;
    int no = 0;
    REP(i,0,25)
    {
        if( dp[r][s][i] - dp[p - 1][s][i] - dp[r][q - 1][i] + dp[p - 1][q - 1][i] > 0 )
            no++;
    }
    return no;
}

int idx(int p,int q,int r,int k)
{
    int low = q;
    int high = n + 1;
    int mid = ( low + high ) / 2;
    while( low < high )
    {
        int mid = ( low + high ) / 2;
    //    cout << low << " " << mid << " " << high << endl;
        int no = no_distinct(p,q,r,mid);
        if( no >= k )
            high = mid;
        else
            low = mid + 1;
    }
    return (low + high) / 2;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    int k;s(n);s(k);
    getchar();
    REP(i,1,n)
    {
        REP(j,1,n)
            a[i][j] = getchar();
        getchar();
    }
    memset(dp,0,sizeof(dp));
    REP(i,1,n)
    {
        REP(j,1,n)
        {
            REP(k,0,25)
                dp[i][j][k] = dp[i - 1][j][k] + dp[i][j - 1][k] - dp[i - 1][j - 1][k];
            dp[i][j][a[i][j] - 'A']++;
        }
    }
    int ans = 0;
    REP(i,1,n)
    {
        REP(j,1,n)
        {
            REP(p,i,n)
            {
     //           cout << i << " " << j << " " << p << endl;
                int r = idx(i,j,p,k);
                if( no_distinct(i,j,p,r) == k )
                {
                    int s = idx(i,j,p,k + 1);
                    s--;
                    if( no_distinct(i,j,p,s) == k )
                    {
                        //cout << i << " " << j << " " << p << " " << r << endl;
                        //cout << i << " " << j << " " << p << " " << s << endl;
                        ans += s - r + 1;
                    }
                }
            }
        }
    }
    printf("%d\n",ans);
    return 0;
}
