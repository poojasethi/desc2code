#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <iomanip>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 100;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

char grid[MAX][MAX];

int main() {
	
	int n,distinctCount;
	INT(n); INT(distinctCount);

	FOR(i,0,n)
		STR(grid[i]);

	 int count[n][n][26];  // denotes the count of alphabets in the matrix (0,0) to (i,j).
	// denotes prefix count.

	CLR(count);	
	
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			for (int k = 0; k < 26; k++) {
				count[i][j][k] =  (i - 1 >= 0 ? count[i - 1][j][k] : 0) 	
						+ (j - 1 >= 0 ? count[i][j - 1][k] : 0) 
						- (i >= 1 && j >= 1 ? count[i - 1][j - 1][k] : 0);

				if (grid[i][j] == 'A' + k)
					count[i][j][k]++;
			}
		}
	}

	/**
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			for (int k = 0; k < 3; k++) {

				cout<<" i = "<<i+1<<"  j = "<<j+1<<" k = "<<k<<" count = "<<count[i][j][k]<<endl;
				
			}
		}

		cout<<endl;
	}

	**/


	int answer = 0;
	for (int height = 0; height < n; height++) {
		for (int i = 0; i < n; i++) {
			for (int j = i; j < n; j++) {
	
				int lo = height, hi = n;
				bool ok = false;
			
				//doing binary search
				while (lo < hi) {
					int mid = (lo + hi) / 2;
					// [height, i], [mid, j]

					int totalLetters = 0;
					for (int t = 0; t < 26; t++) {
						int cur = count[mid][j][t]
						- (i - 1 >= 0 ? count[mid][i - 1][t] : 0)
						- (height - 1 >= 0 ? count[height - 1][j][t] : 0)
						+ (i - 1 >= 0 && height - 1 >= 0 ? count[height - 1][i - 1][t] : 0);

						if (cur > 0) {
							totalLetters++;
						}

					}

					if (totalLetters >= distinctCount) {
						hi = mid;
						ok = true;
					}
					 else {
						lo = mid + 1;
					}
				}
		
			
				if (!ok) {
					continue;
				}



				int lowerBound = hi;
				lo = hi;
				hi = n;
				bool ok2 = false;
	
				
				while (lo < hi) {

					int mid = (lo + hi) / 2;
					// [height, i], [mid, j]
					int totalLetters = 0;

					for (int t = 0; t < 26; t++) {

						int cur = count[mid][j][t]
						- (i - 1 >= 0 ? count[mid][i - 1][t] : 0)
						- (height - 1 >= 0 ? count[height - 1][j][t] : 0)
						+ (i - 1 >= 0 && height - 1 >= 0 ? count[height - 1][i - 1][t] : 0);

						if (cur > 0) {
						totalLetters++;
						}
					}

					if (totalLetters > distinctCount) {
						hi = mid;
						ok2 = true;
					} else {
						lo = mid + 1;
					}
				}


				if (!ok2) {
					hi = n;
				}

				//cout<<" height = "<<height+1<<" i = "<<i+1<<" j = "<<j+1<<" lb = "<<lowerBound<<" ub = "<<hi<<endl;

				int upperBound = hi;
				answer += upperBound - lowerBound;

			}
		}
	}

	
	PINT(answer);


	return 0;
}
