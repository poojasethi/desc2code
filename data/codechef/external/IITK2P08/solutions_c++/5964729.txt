// An AVL tree node
/*------------------------Subham Mishra--------------------------------------------------------*/
#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pl(n) printf("%lld\n",n)
#define p(n) printf("%d\n",n)
#define pb push_back
#define mp make_pair
#define mod 1000000007LL
#define N 200005
#define LN 25
#define SQN 5000
#define SQN1 500100000000000
#define ll  long long
#define gc getchar_unlocked
using namespace std;

int dp[101][101][26];
int matrow(int ix,int iy,int fx,int fy)
{
 int ct=0;
 int i;
 for(i=0;i<26;++i)
 {
  int va=dp[fx][fy][i];
  if(ix>0)
  va-=dp[ix-1][fy][i];
  if(iy>0)
  va-=dp[fx][iy-1][i];
  if(ix>0 && iy>0)
  va+=dp[ix-1][iy-1][i];
  if(va>0)
  ct++;
 }
 return ct;
}
int main()
{
int n,k,i,j,p,va,l;
s(n);s(k);
char mat[n][n];
for(i=0;i<n;++i)
for(j=0;j<n;++j)
{
 scanf(" %c",&mat[i][j]);
}
for(i=0;i<26;++i)
{
  va=(int)mat[0][0];
  va-=65;
  if(va==i)
  dp[0][0][i]=1;
  else
  dp[0][0][i]=0;
  for(j=1;j<n;++j)
  {
    va=(int)mat[0][j]-65;
    if(va==i)
    dp[0][j][i]=dp[0][j-1][i]+1;
    else
    dp[0][j][i]=dp[0][j-1][i];
  }
  for(j=1;j<n;++j)
  {
    va=(int)mat[j][0]-65;
    if(va==i)
    dp[j][0][i]=dp[j-1][0][i]+1;
    else
    dp[j][0][i]=dp[j-1][0][i];
  }
  for(j=1;j<n;++j)
  for(p=1;p<n;++p)
  {
    va=(int)mat[j][p]-65;
    if(va==i)
    dp[j][p][i]=dp[j-1][p][i]+dp[j][p-1][i]-dp[j-1][p-1][i]+1;
    else
    dp[j][p][i]=dp[j-1][p][i]+dp[j][p-1][i]-dp[j-1][p-1][i];
  }
}
int ans=0;
for(i=0;i<n;++i)
for(j=0;j<n;++j)
{
 for(p=0;p<=i;++p)
 {
  int ans1=-1,ans2=-1;
  int lo=0,hi=j;
  while(lo<=hi)
  {
     int mid=(lo+hi)/2;
    int ct=matrow(p,mid,i,j);
    if(ct==k)
    {
     ans1=mid;
     lo=mid+1;
    }
    else if(ct<k)
    hi=mid-1;
    else
    lo=mid+1;
  }
  lo=0;hi=j;
  while(lo<=hi)
  {
     int mid=(lo+hi)/2;
    int ct=matrow(p,mid,i,j);
    if(ct==k)
    {
     ans2=mid;
     hi=mid-1;
    }
    else if(ct<k)
    hi=mid-1;
    else
    lo=mid+1;
  }
  if(ans1!=-1)
  ans+=(ans1-ans2+1);
 }
}
printf("%d\n",ans);
 return 0;
}
