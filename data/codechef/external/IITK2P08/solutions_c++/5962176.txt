#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<utility>
#include<cstring>
#include<cmath>
#define LL long long int
#define mod 1000000007
#define vi vector<int>
#define vvi vector < vi >
#define pii pair<int,int>
#define all(c) c.begin(),c.end()
#define sf(x) scanf("%d",&x);
#define sf2(x,y) scanf("%d%d",&x,&y);
#define sl(n) scanf("%lld",&n);
#define mem(a,val) memset(a,val,sizeof(a))
//#define for<(i,a,b) for(i=a;i<b;i++)
//#define for=(i,a,b) for(i=a;i<=b;i++)
#define nl printf("\n");
#define pb push_back
#define mp make_pair
#define f first
#define s second
using namespace std;
int main()
{	int t,x,y,n,res,r,size,c,k,i,j,sum,tot,lenx,leny,mat[105][105],dp[105][105][28]={{{0}}};
	int sum1;	
	char ch;
	sf2(n,res);
	for(i=1;i<=n;i++)
	{	for(j=1;j<=n;j++)
		{	scanf(" %c",&ch);
			mat[i][j]=ch-'A'+1;
		}
	}
	dp[1][1][mat[1][1]]=1;
	// build 1-d mat
	for(c=1;c<=26;c++)
	{	for(j=2;j<=n;j++)
		{	dp[1][j][c]=dp[1][j-1][c];
			if(mat[1][j]==c)
				dp[1][j][c]+=1;
		}
		for(i=2;i<=n;i++)
		{	dp[i][1][c]=dp[i-1][1][c];
			if(mat[i][1]==c)
				dp[i][1][c]+=1;
		}
	}
	//build 2-d mat AUB=A+B-AB
	for(c=1;c<=26;c++)
	{	for(i=2;i<=n;i++)
		{	for(j=2;j<=n;j++)
			{	dp[i][j][c]=dp[i-1][j][c]+dp[i][j-1][c]-dp[i-1][j-1][c];
				if(mat[i][j]==c)
					dp[i][j][c]+=1;
			}
		}
	}
	//debug
	c=2;
	/*for(c=1;c<=26;c++)
	{	for(i=1;i<=n;i++)
		{	for(j=1;j<=n;j++)
				cout<<dp[i][j][c]<<" ";
			nl;
		}
	}*/
	sum=0;sum1=0;
	//To find all rect nd cal
	for(i=1;i<=n;i++)
	{	for(j=1;j<=n;j++)
		{	for(x=1;x<=i;x++)
			{	for(y=1;y<=j;y++)
				{	tot=0;
					for(c=1;c<=26;c++)
					{	if(dp[i][j][c]-dp[x-1][j][c]-dp[i][y-1][c]+dp[x-1][y-1][c])
							tot++;
					}
					if(tot<=res)
					{	sum+=j-y+1;
						break;
					}
				}//break from y loop
			}
		}
	}
	//printf("%d\n",sum);
	res--;
	for(i=1;i<=n;i++)
	{	for(j=1;j<=n;j++)
		{	for(x=1;x<=i;x++)
			{	for(y=1;y<=j;y++)
				{	tot=0;
					for(c=1;c<=26;c++)
					{	if(dp[i][j][c]-dp[x-1][j][c]-dp[i][y-1][c]+dp[x-1][y-1][c])
							tot++;
					}
					if(tot<=res)
					{	sum1+=j-y+1;
						break;
					}
				}//break from y loop
			}
		}
	}
	//printf("%d\n",sum1);
	printf("%d\n",sum-sum1);
	return 0;
}
