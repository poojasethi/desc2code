///============================================================================///                                                                            ///
///                            IT'S ME                                         ///
///                         BISHAL GAUTAM                                      ///
///                  CSE,JAHANGIRNAGAR UNIVERSITY,DHAKA                        ///
///               "Follow Excellence..Success will chase U"                    ///
///                                                                            ///                                                                          ///
///============================================================================///
#include<bits/stdc++.h>
#define PI acos(-1.0)
#define X first
#define Y second
#define nl printf("\n")
#define SZ(x) (int)(x.size())
#define pb(x) push_back(x)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define mpp make_pair

///==Scanning====///
#define S(a) scanf("%d",&a)
#define P(a) printf("%d",a)
#define SL(a) scanf("%I64d",&a)
#define S2(a,b) scanf("%d%d",&a,&b)
#define S3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define SL2(a,b) scanf("%I64d%I64d",&a,&b)
#define SL3(a,b,c) scanf("%I64d%I64d%I64d",&a,&b,&c)

///==Arr,Vec Functions==///
#define all(v) v.begin(),v.end()
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define CPY(a,b) memcpy(a,b,sizeof(a))
#define MAX(a) (*max_element(all(a)))
#define MIN(a) (*min_element(all(a)))
#define fv(i,v)  for(int i=0;i<(int)v.size();i++)
#define fr(i,a,n) for(int i=a;i<=n;i++)
#define rf(i,n,a) for(int i=n;i>=a;i--)

///===Some Useful====///
#define OnBit(a) __builtin_popcountll(a)
#define LB(v,k) lower_bound(v.begin(),v.end(),k)
#define _cin ios_base::sync_with_stdio(0),cin.tie(0)
#define dbg(x) cerr<<__LINE__<< ":: "<<#x<<"= "<<x<<endl
#define fi(n) for(__typeof(n.begin()) it=n.begin();it!=n.end();it++)
#define IO freopen("A.in","r",stdin),freopen("Out.out","w",stdout)
using namespace std;

///===TypeDefs=====///
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<pii> vii;

///===Number Theory===///
//template< class T > inline T SQR(T a) { return a*a; }
//template< class T > inline T gcd(T a,T b) {a=abs(a);b=abs(b); if(!b) return a; return gcd(b,a%b);}
//template< class T > inline T lcm(T a,T b) {a=abs(a);b=abs(b); return (a/_gcd(a,b))*b;}
//template<typename T> T POW(T b,T p) {T r=1; while(p){if(p&1)r=(r*b);b=(b*b);p>>=1;}return r;}
//template<typename T> T BigMod(T b,T p,T m) {T r=1; while(p){if(p&1)r=(r*b)%m;b=(b*b)%m;p>>=1;}return r;}
//template<typename T> T ModInverse(T n,T m) { return BigMod(n,m-2,m); }
//
/////==GeoMetry=========///
//double DEG(double x) { return (180.0*x)/(PI);}
//double RAD(double x) { return (x*(double)PI)/(180.0);}
//template<typename T> double DIS(T a,T b){ return sqrt((double)( SQR(a.X-b.X)+ SQR(a.Y-b.Y))); }
//template<typename T> T ANGLE(T a,T b){ return atan( double(a.Y-b.Y) / double(a.X-b.X));}
//template<typename T> int isLeft(T a,T b,T c) { return (c.X-a.X)*(b.Y-a.Y)-(b.X-a.X)*(c.Y-a.Y); }
//
/////===IO-Related===///
//template< class T > void prnt(T v) { fv(i,v) {if(!i)cout<<v[i];else cout<<" "<<v[i];} cout<<endl; }
//template< class T > void BIN(T n) { if(!n){nl;return;}BIN(n/2);cout<<(n%2); }
//template<typename T> T in(){ char ch; T n = 0; bool ng = false; while (1) { ch = getchar(); if (ch == '-') { ng = true; ch = getchar(); break;} if (ch>='0' && ch<='9') break; }    while (1) { n = n*10 + (ch - '0'); ch = getchar(); if (ch<'0' || ch>'9')   break;    }  return (ng?-n:n);  }

///====Some-Stuff===///
/// atoi( str.c_str() ); // char string to int
/// sprintf(str,"%d",num);// num to char string
///int month[]={-1,31,28,31,30,31,30,31,31,30,31,30,31}; //Not Leap Year
///int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
///int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 Direction
///int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction

/**************************************************************************************
 * ///////////////////////////////////////////////////////////////////////////////////*
 *************************************************************************************/

///==========CONSTANTS==============///
///  Digit      0123456789*#@%&^$"- ///
#define  MX     524289 // (2^19+1) for fft
#define  inf    2000000000000000LL
#define  MD     1000000007LL
#define  eps    1e-9
///================================///

struct cpx {
    long double real, imag;
    cpx() {
        real=0.0;
        imag=0.0;
    }
    void clr() {
        real=0.0;
        imag=0.0;
    }
} a[MX+2], b[MX+2];

void fft(cpx* a, int n, bool inv) {
    for (int i=1, j=0; i<n; ++i) {
        int bit = (n >> 1);
        for (; j>=bit; bit>>=1)
            j -= bit;
        j += bit;
        if (i < j)
            swap (a[i], a[j]);
    }
    for (int len=2; len<=n; len<<=1) {
        double ang = 2*PI/len * (inv ? -1 : 1);
        double cs = cos(ang);
        double sn = sin(ang);
        for (int i=0; i<n; i+=len) {
            ll hlen = (len >> 1);
            double wreal = 1;
            double wimag = 0;
            cpx u;
            cpx* pa1 = a + i;
            cpx* pa2 = a + i + hlen;
            for (int j=0; j<hlen; ++j) {
                cpx& a1 = *pa1++;
                cpx& a2 = *pa2++;
                u = a1;
                double vreal = a2.real * wreal - a2.imag * wimag;
                double vimag = a2.real * wimag + a2.imag * wreal;
                a1.real += vreal;
                a1.imag += vimag;
                a2.real = u.real - vreal;
                a2.imag = u.imag - vimag;
                double wreal2 = wreal;
                wreal = wreal * cs - wimag * sn;
                wimag = wreal2 * sn + wimag * cs;
            }
        }
    }
    if (inv)
        for (int i= n; i >= 0; --i)
            a[i].real /= n;
}

inline cpx multiply(const cpx& Lf, const cpx& Rg) {
    cpx res;
    res.real = Lf.real * Rg.real - Lf.imag * Rg.imag;
    res.imag = Lf.real * Rg.imag + Lf.imag * Rg.real;
    return res;
}

ll res[MX+5];
void Mul(int sa,int sb) {
    int n = 1 , mx=max(sa,sb);
    while (n <  mx )  n <<= 1;
    n<<=1;
    fft(a, n, false);
    fft(b, n, false);
    for(int i=0; i<n; i++) {
        a[i] = multiply(a[i], b[i]);
    }
    fft(a, n, true);
    for(int i = 0 ; i < n ; ++ i ) {
        res[i] = (ll) (round( a[i].real ) );
       // res[i] = (ll) (( a[i].real )+.5 );
    }
//    int carry = 0;
//    for (int i = 0; i < n; ++i) {
//        res[i] += carry;
//        carry = res[i] / 10;
//        res[i] %= 10;
//    }
    return ;
}

ll ar[MX+2],br[MX+2],mat[5][5];
int n,k;
ll dp[MX+5];

void Solve(int x,int y) {
    for(int i=0;i<=MX;i++)a[i].clr(),b[i].clr();
    for(int i = n - 1; i >= 0; i--) {
        if( ar[i]==x ) a[(n-1)-i].real=1.0;
        else a[(n-1)-i].real=0.0;
    }
    for(int i = 0; i < k; i++) {
        if( br[i] == y ) b[i].real=1.0;
        else b[i].real=0.0;
    }
    Mul(n,k);
    int sz=n+n;
    for(int i = 0; i<sz; i++) {
        dp[i] += ( mat[x][y]*res[i]);
    }
}

int main() {
    int tc, cs = 1, i, j;
    S(tc);
    while(tc--) {
        CLR(dp);
        S2(n,k);
        fr(i,0,n-1)SL(ar[i]);
        fr(i,0,k-1)SL(br[i]);
        fr(i,1,3)fr(j,1,3)SL(mat[i][j]);
        fr(i, 1, 3)fr(j,1,3)Solve(i,j);
        ll mn=inf;
        for(int i = n-1; i>=k-1; i--) {
            mn=min(mn,dp[i]);
        }
        printf("%lld\n",mn);
    }
    return 0;
}
