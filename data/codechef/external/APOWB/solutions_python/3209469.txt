#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <fstream>
#include <list>
#include <set>
#include <climits>
#include <map>
#include <stack>
#include <queue>
#include <complex>
#include <cmath>
#include <sstream>
#include <deque>
#include <utility>
#include <bitset>
#include <numeric>
#include <ext/hash_set>
#include <ext/hash_map>

using namespace std;
using namespace __gnu_cxx;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,b,a) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define iter(it,s) for(__typeof(s.begin())it = s.begin();it!=s.end();it++)

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

inline ll fpow(ll b, int p) {
  ll ret = 1, prv = -1;
  for (; p; p >>= 1) {
    if (b / prv != prv && prv != -1)
      return -1;
    if (p & 1) {
      prv = ret;
      ret *= b;
      if (ret / b != prv)
        return -1;
    }
    prv = b;
    b *= b;
  }
  return ret;
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("test.in", "rt", stdin);
  //	freopen("o.txt", "wt", stdout);
#endif
  int t;
  scanf("%d", &t);
  while (t--) {
    ll n;
    scanf("%lld", &n);
    for (int p = 55; p >= 2; p--) {
      //    FOR (p , 2 , 3) {
      int st = 2, end = (int) sqrt(n) + 2, mid;
      while (st <= end) {
        mid = st + (end - st) / 2;
        ll x = fpow(mid, p);
        //        cout << mid << " ^ " << p << " = " << x << endl;
        if (x == n)
          goto yes;
        else if (x > n || x == -1)
          end = mid - 1;
        else
          st = mid + 1;
      }
    }
    goto no;
    yes: printf("YES\n");
    continue;
    no: printf("NO\n");
  }
  return 0;
}
