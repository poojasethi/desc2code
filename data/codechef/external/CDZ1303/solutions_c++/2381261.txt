#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <complex>
#include<cmath>
 
using namespace std;
 
#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl

typedef complex<double> cd;

const double PI = 4*atan(1);
int N;

vector< cd > omega;

void createomega(int n)
{
    N=n;
    double temp=(2.0*PI)/n;
    int i;
    omega.resize(n);
    for(i=0;i<n;i++)
    {
        omega[i]=cd(cos(temp*i),sin(temp*i));
    }
}

vector<cd > fft(vector< cd > a)
{
     int n = (int) a.size();
     if (n == 1)  return a;
      int half = n>>1;
     
     vector< cd > even (half),  odd (half);
     for ( int i=0, j=0; i<n; i+=2, ++j)
     {
          even[j] = a[i];
          odd[j] = a[i+1];
     }
     even=fft (even), odd=fft (odd);
     
     for ( int i=0, fact = N/n; i < half; ++i)
     {
          cd twiddle =  odd[i] * omega[i * fact] ;
          a[i] =  even[i] + twiddle;
          a[i+half] = even[i] - twiddle;
     }
     return a;
}

vector<long long> multiply( vector< long long> a,vector< long long> b)
{
    vector< cd > fa(a.begin(),a.end()), fb(b.begin(),b.end());
    vector<long long> res;
    
     int n=1;
     int i;
    
    while(n<(2*max(a.size(),b.size())))
    {
        n=n<<1;
    }
    
    fa.resize(n);
    fb.resize(n);
    
    createomega(n);
    
    fa=fft(fa);
    fb=fft(fb);
    
    for(i=0;i<n;i++)
    {
        fa[i]=conj(fa[i]*fb[i]);
    }
    fa=fft(fa);
    res.resize(n);
    for(i=0;i<n;i++)
     res[i]=(long long)(fa[i].real()/n + 0.5);
    //printf("%lld ",res[i]);
   return res;
}

int main()
{
     int t,n1,n2,i,temp;
    S(t);
    while(t--)
    {
        vector< long long> a,b,res;
        omega.clear();
        S(n1);
        S(n2);
        F(i,0,n1+1)
        {
            S(temp);
            a.pb(temp);
        }
        F(i,0,n2+1)
        {
            S(temp);
            b.pb(temp);
        }
        res=multiply(a,b);
        while(!res.empty() && *(res.end()-1)==0)
        res.pop_back();
        int n=res.size();
        printf("%d\n",n-1);
        for(i=0;i<n;i++)
        printf("%d ",res[i]);
        printf("\n");
    }
    return 0;
}