#include <algorithm>
#include<iostream>
#include <cstdio>
#include <ctime>
#include <vector>
#include <complex>
#include <cmath>

#define cd complex<double>
#define vcd vector<cd>
#define eps 1e-2

using namespace std;

double a[300000],b[300000];
int t;
vcd fft(const vcd &as) {
  int n = t;
  int k = 0; 
  while ((1 << k) < n) k++;
  vector<long long> rev(n);
  rev[0] = 0;
  long long high1 = -1;
  for (int i = 1; i < n; i++) {
    if ((i & (i - 1)) == 0) 
      high1++;
    rev[i] = rev[i ^ (1 << high1)]; 
    rev[i] |= (1 << (k - high1 - 1));
  }

  vcd roots(n);
  for (int i = 0; i < n; i++) {
    double alpha = 2 * M_PI * i / n;
    roots[i] = cd(cos(alpha), sin(alpha));
  }

  vcd cur(n);
  for (int i = 0; i < n; i++)
    cur[i] = as[rev[i]];

  for (int len = 1; len < n; len <<= 1) {
    vcd ncur(n);
    long long rstep = roots.size() / (len * 2);
    for (int pdest = 0; pdest < n;) {
      long long p1 = pdest;
      for (int i = 0; i < len; i++) {
        cd val = roots[i * rstep] * cur[p1 + len];
        ncur[pdest] = cur[p1] + val;
        ncur[pdest + len] = cur[p1] - val;
        pdest++, p1++;
      }
      pdest += len;
    }
    cur.swap(ncur);
  }
  return cur;
}

vcd fft_rev(const vcd &as) {
  vcd res = fft(as);
  for (int i = 0; i < (int)res.size(); i++) res[i] /= as.size();
  reverse(res.begin() + 1, res.end());
  return res;
}

int main()
{
  int test;
  scanf("%d",&test);
  while(test--){
    vcd A,B;
    int n,m;
    scanf("%d%d",&n,&m);

    int i;
    int N = max(n,m)+1;
    t=N*2+1;
    int p=ceil(log2(t));
    t=(1<<p);

    A.resize(t);
    B.resize(t);

    for(i=0;i<=n;i++)
      scanf("%lf",&a[i]);

    for(i=0;i<=m;i++)
      scanf("%lf",&b[i]);

    for(i=0;i<=n;i++)
      A[i] = cd(a[i],0);

    for(i=0;i<=m;i++)
      B[i] = cd(b[i],0);


    for(i=n+1;i<t;i++)
      A[i] = cd(0,0);
    for(i=m+1;i<t;i++)
      B[i] = cd(0,0);

    vcd Af = fft(A);
    vcd Bf = fft(B);
    vcd C(Af.size());

    for(i=0;i<t;i++)
      C[i] = Af[i] * Bf[i]; 

    vcd ans = fft_rev(C);
    int count = 0;
    cout<<m+n<<endl;

    for(i=0;i<m+n+1;i++)
    {
      long long coeff = ans[i].real()+eps;
      if(i!=m+n)
        cout<<(int)coeff<<" ";
      else
        cout<<(int)coeff<<endl;
    } 
  }
}

