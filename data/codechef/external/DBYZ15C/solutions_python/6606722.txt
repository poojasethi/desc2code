#include <bits/stdc++.h>

using namespace std;

const long long q = (long long)(1e9) + 7;

int N, M, Q, a[40][40];
long long K;

typedef vector < vector <long long> > MaTrix;

MaTrix T[40];

MaTrix operator *(MaTrix a, MaTrix b)
{
    int m = a.size(), n = b[0].size();
    MaTrix c (m, vector <long long> (n, 0));
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < b.size(); k++) c[i][j] = (c[i][j] + a[i][k]*b[k][j]) % q;
    return c;
}

MaTrix Pow(MaTrix a, long long n)
{
    MaTrix ans (a.size(), vector <long long> (a.size(), 0));
    for (int i = 0; i < ans.size(); i++) ans[i][i] = 1;
    while (n > 0)
    {
        if (n & 1) ans = ans * a;
        a = a * a;
        n >>= 1;
    }
    return ans;
}

long long CalC(int u, int v)
{
    MaTrix ans (N + 1, vector <long long> (1, 0));
    ans[u][0] = 1;
    ans = T[v] * ans;
    return ans[N][0] - (u == v);
}

MaTrix Process(int v)
{
    MaTrix T (N + 1, vector <long long> (N + 1, 0));
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++) T[i][j] = a[i][j];
    T[N][N] = T[N][v] = 1;
    return Pow(T, K + 1);
}

int main()
{
    //freopen("in.inp", "r", stdin);
    scanf("%d %d %lld", &N, &M, &K);
    for (int i = 0; i < M; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);
        u--; v--;
        a[v][u]++;
    }

    for (int i = 0; i < N; i++) T[i] = Process(i);

    scanf("%d", &Q);
    for (int i = 0; i < Q; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);
        u--; v--;
        printf("%lld\n", CalC(u, v));
    }
}
