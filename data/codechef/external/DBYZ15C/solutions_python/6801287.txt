//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, int> ii;
typedef pair<ii, int> iii;
 
 
#define matrix vector<vector<ll> >
matrix identity;
matrix matmul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<ll> (n, 0) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j] += (a[i][k]*b[k][j])%MOD;
        ans[i][j] %= MOD;
      }
    }
  }
  return ans;
}
 
 
matrix matpwr(const matrix &a,long long n)
{
    if(n==0)
    {
      return identity;
    }
    if(n==1)
     return a;
    matrix tmp=matpwr(a,n/2);
    tmp=matmul(tmp,tmp);
    if(n&1)
      tmp=matmul(a,tmp);
    return tmp;
}
 
 
matrix matsum(const matrix &a, const matrix &b){
 
	int n = a.size();
	matrix c(n, vector<ll> (n, 0));
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			c[i][j] = (a[i][j] + b[i][j]) % MOD;
	return c;
}
 
 
matrix matrixGPsum(const matrix &arr, ll p){
 
	if(p == 0)	return identity;
	if(p == 1)	return arr;
 
	matrix temp = matrixGPsum(arr, p/2);
	matrix temp2 = matsum(identity, matpwr(arr, p/2));
	temp = matmul(temp, temp2);
 
	if(p & 1)	temp = matsum(temp, matpwr(arr, p));
	return temp;
}
 
 
 
int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);
 
    int n, m;
    ll p;
    cin>>n>>m>>p;
 
    identity = matrix (n, vector<ll> (n, 0));
    for(int i=0;i<n;i++)
    	identity[i][i] = 1;
 
    matrix adj(n, vector<ll> (n, 0));
    while(m--){
 
    	int a, b;
    	cin>>a>>b;
 
    	a--;	b--;
    	adj[a][b]++;
    }
 
    adj = matrixGPsum(adj, p);
 
    int q;
    cin>>q;
    while(q--){
 
    	int a, b;
    	cin>>a>>b;
 
    	if(p == 0){
    		cout<<"0\n";
    		continue;
    	}
 
    	a--;	b--;
 
    	cout<<adj[a][b]<<endl;
    }
    return 0;
}
 
 
 
 
 
 
 
 