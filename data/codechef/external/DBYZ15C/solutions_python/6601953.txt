#include <bits/stdc++.h>
using namespace std;
#define long int64_t
#define mp make_pair
#define mt make_tuple

const int module = 1000000007;

struct matrix
{
	static int n;
	int T[64][64];

	matrix () {fill(T[0], T[n], 0);}
	inline int* operator[] (int x) {return T[x];}

	static matrix mul (matrix x,matrix y)
	{
		matrix t;
		int i, j, k;

		for (i = 0; i < n; ++i)
		for (j = 0; j < n; ++j)
		for (k = 0; k < n; ++k)
			t[i][j] = (1LL * x[i][k] * y[k][j] + t[i][j]) % module;

		return t;
	}

	matrix power (long x)
	{
		if (x == 1) return *this;

		matrix *s = new matrix(power(x >> 1));
		*s = mul(*s, *s);
		if (x & 1) *s = mul(*s, *this);
		return *s;

		return *this;
	}
} G;

int C[32][32];
int matrix::n;
int n;

void enter ()
{
	long k;
	int m, x, y;
	scanf("%d%d%lld", &n, &m, &k);
	matrix::n = n << 1;

	while (m--)
	{
		scanf("%d%d", &x, &y);
		++G[x - 1][y - 1];
		++G[x - 1][y - 1 + n];
	}

	for (x = n; x < 2 * n; ++x) G[x][x] = 1;
	G = G.power(k);
}

void solve ()
{
	int q, x, y;

	for (x = 1; x <= n; ++x)
	{
		matrix t;
		t[0][x - 1] = 1;
		t = matrix::mul(t, G);

		for (y = 1; y <= n; ++y) C[x][y] = t[0][y - 1 + n];
	}

	scanf("%d", &q);
	while (q--)
	{
		scanf("%d%d", &x, &y);
		printf("%d\n", C[x][y]);
	}
}

int main ()
{
	#ifdef isMyPC
		freopen("test.inp", "r", stdin);
	#endif

	enter ();
	solve ();

	return 0;
}