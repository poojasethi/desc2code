#include<iostream>
#include<cstdio>
#include<vector>
#include<cstring>
#include<queue>
#include<map>
#include<set>
#include<algorithm>
#include<stack>
#include<cmath>
#include<iomanip>
#include<cstdlib>
#include<sstream>
#include<climits>
using namespace std;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define pb push_back
#define ss second
#define ff first
#define vi vector<int>
#define vl vector<ll>
#define s(n) scanf("%d",&n)
#define ll long long
#define mp make_pair
#define PII pair <int ,int >
#define PLL pair<ll,ll>
#define inf 1000*1000*1000+5
#define v(a,size,value) vi a(size,value)
#define sz(a) a.size()
#define all(a) a.begin(),a.end()
#define tri pair < int , PII >
#define TRI(a,b,c) mp(a,mp(b,c))
#define xx ff
#define yy ss.ff
#define zz ss.ss
#define in(n) n = inp()
#define vii vector < PII >
#define vll vector< PLL >
#define viii vector < tri >
#define vs vector<string>
#define DREP(a) sort(all(a)); a.erase(unique(all(a)),a.end());
#define INDEX(arr,ind) (lower_bound(all(arr),ind)-arr.begin())
#define ok if(debug)
#define trace1(x) ok cerr << #x << ": " << x << endl;
#define trace2(x, y) ok cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)    ok      cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)  ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
								<< #d << ": " << d << endl;
#define trace5(a, b, c, d, e) ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									 << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									<< #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;
ll MOD = int(1e9) + 7;
#define gc getchar()
inline int inp(){register int n=0,s=1,c=gc;if(c=='-')s=-1;while(c<48)c=gc;while(c>47)n=(n<<3)+(n<<1)+c-'0',c = gc;return n*s;}
#define pc(x) putchar(x) //_unlocked(x);
inline void writeInt (ll n)
{ll N = n, rev, count = 0;rev = N; if (N == 0) { pc('0'); pc('\n'); return ;}
while ((rev % 10) == 0) { count++; rev /= 10;}rev = 0; while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}
while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}while (count--) pc('0'); }
const int N = 100 + 5;
int debug = 0;
#define ld long double
ld x[N] , y[N] , r[N];
ld eps = 1e-14;
int n;
ld dist(ld x1 , ld y1 , ld x2 , ld y2)
{
	return sqrtl( (x1-x2)*(x1-x2) + (y1-y2)*(y1 - y2 ) );
}
bool intersect( ld x1 , ld y1 , ld r1 , ld x2 , ld y2 , ld r2 )
{
	trace1(dist(x1,y1,x2,y2));
	return dist(x1,y1,x2,y2) < r1 + r2 - eps && dist(x1,y1,x2,y2) > abs(r1 - r2) + eps ;
}
ld convert(ld theta)
{
		while ( theta < 0 - eps)
		{
			theta += 2 * M_PI;
		}
		while ( theta > 2* M_PI + eps)
		{
			theta -= 2*M_PI;
		}
//		assert(theta >= 0 - eps && theta <= 2*M_PI + eps);
		return theta;
}
ld g(ld a)
{
	return a*180/M_PI;
}
ld getAngle(ld x2, ld y2 , ld r2 , ld x1 , ld y1 , ld r1 , ld & theta1 , ld & theta2 )
{
	trace4(x1,y1,x2,y2);
	ld theta = atan2l(y2 - y1 , x2 - x1);
	ld r1sq = r1*r1  , r2sq = r2*r2 , d = dist(x1,y1,x2,y2);
	ld dsq = d * d;
	trace4(r1sq,r2sq,d,dsq);
	ld temp = (r1sq + dsq - r2sq)/2/r1/d; 
	trace1(temp);
	ld alpha = acosl(temp);
	trace2(g(theta) , g(alpha));
	theta1 = convert(theta + alpha);
	theta2 = convert(theta - alpha);
}
bool present(ld x1,ld y1, ld x , ld y , ld r)
{
	return (x-x1)*(x-x1) + (y-y1)*(y-y1) < r*r - eps;
}
bool completely( ld x1,ld y1 , ld r1 , ld x2 , ld y2 , ld r2)
{
		return dist(x1,y1,x2,y2)  + r1  < r2 + eps;
}
ld solve(int idx)
{
		vector < ld > arcs;
		ld ret = 0;
		int i;
		for(i = idx + 1; i < n; i++ )
		{
			trace1(i);
			if(completely(x[idx] , y[idx] ,  r[idx] , x[i] , y[i] , r[i] ) )
				return 0;
				
			if( ! intersect( x[i] , y[i] , r[i] , x[idx] , y[idx] , r[idx] ) )
				continue;
			ld theta1  = 0 , theta2 = 0;
			trace1('a');
			getAngle(x[i] , y[i] , r[i] , x[idx] , y[idx] , r[idx] , theta1 , theta2);
			trace3(i,theta1*180/M_PI,theta2*180/M_PI);
			arcs.pb(theta1); arcs.pb(theta2);
		}
		if(sz(arcs) == 0)
			return M_PI * 2 * r[idx];
		sort(all(arcs));
		arcs.pb(arcs[0] + 2*M_PI);
		rep(i,sz(arcs) - 1)
		{
			ld theta1 = arcs[i] , theta2 = arcs[i+1];
			ld theta = (theta1 + theta2)/2;
			ld x1 = x[idx] + r[idx] * cosl(theta);
			ld y1 = y[idx] + r[idx] * sinl(theta) ;
			int flag = 0,j;
			f(j,idx+1,n)
			{
				if(present(x1,y1,x[j],y[j],r[j]))
					flag = 1;
			}
			if(flag == 0)
				ret += r[idx] * (theta2 - theta1);
		}
		return ret;
}	 
int main()
{
      ios::sync_with_stdio(false);
      int i,j,t;
      cin>>t;
      while(t--)
      {
			cin>>n;
			rep(i,n)
			{
				cin>>x[i]>>y[i]>>r[i];
			}
			ld ans = 0;
			rep(i,n)
			{
				ans += solve(i);
			}		
			cout<<fixed<<setprecision(8)<<ans<<endl;
	  }
	  cin>>i;			
}
