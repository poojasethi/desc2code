#include<iostream>
#include<cstdio>
#include<vector>
#include<cstring>
#include<queue>
#include<map>
#include<set>
#include<algorithm>
#include<stack>
#include<cmath>
#include<iomanip>
#include<cstdlib>
#include<sstream>
#include<climits>
#include<cassert>
#include<time.h>
#define f(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define pb push_back
#define ss second
#define ff first
#define vi vector<int>
#define vl vector<ll>
#define s(n) scanf("%d",&n)
#define ll long long
#define mp make_pair
#define pii pair <int ,int >
#define pll pair<ll,ll>
#define inf 1000*1000*1000+5
#define v(a,size,value) vi a(size,value)
#define sz(a) a.size()
#define all(a) a.begin(),a.end()
#define tri pair < int , PII >
#define TRI(a,b,c) mp(a,mp(b,c))
#define xx ff
#define yy ss.ff
#define zz ss.ss
#define in(n) n = inp()
#define vii vector < PII >
#define vll vector< PLL >
#define viii vector < tri >
#define vs vector<string>
#define DREP(a) sort(all(a)); a.erase(unique(all(a)),a.end());
#define INDEX(arr,ind) (lower_bound(all(arr),ind)-arr.begin())
#define ok if(debug)
#define trace1(x) ok cerr << #x << ": " << x << endl;
#define trace2(x, y) ok cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)    ok      cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)  ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
								<< #d << ": " << d << endl;
#define trace5(a, b, c, d, e) ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									 << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									<< #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;
ll MOD = int(1e9) + 7;

int debug = 1;
using namespace std;

vector< vector<pii > > graph;

int n;int parent[100100],visited[100100],nodes[100100];ll sums[100100],ans[100100];
map<pii,int> dict;

void dfs(int i){
	ll sum = 0LL;
	ll nds = 1LL;
	rep(j,graph[i].size()){
		if(visited[graph[i][j].ff]==0){
			visited[graph[i][j].ff]=1;
			dfs(graph[i][j].ff);
			parent[graph[i][j].ff]=i;
		//	trace3(i,graph[i][j].ff,parent[graph[i][j].ff]);
			nds+=(1LL*nodes[graph[i][j].ff]);
			ll as = (nodes[graph[i][j].ff]*1LL);
			as*= (1LL*graph[i][j].ss);
			sum += as + sums[graph[i][j].ff];
		}
	}
//	trace3(i,nds,sum);
	nodes[i] = nds;
	sums[i] = sum;
	return ;
}

void dfs2(int i){
	rep(j,graph[i].size()){
	//	trace1(j);
		if(visited[graph[i][j].ff]==0){
			visited[graph[i][j].ff] = 1;
			int u = graph[i][j].ff;
			int par = parent[u];
		//	int x  = ans[par] - sums[u] - (graph[par][u].ss)*(nodes[u]);
			ll as = dict[mp(par,u)]*1LL;
			as*= (n*1LL-2LL*nodes[u])*1LL;
			ans[u] = ans[par] + as;
		//	trace3(i,u,ans[u]);
		//	trace4(u,(graph[par][u].ss),n-2*nodes[u],ans[par]);
		//	trace3(u,ans[u],graph[par][u].ss);
			dfs2(graph[i][j].ff);
		}
	}
	return ;
}





int main(){
//	freopen("test.in.cpp","r",stdin);
	int t;s(t);
	while(t--){
		int a,b,w;s(n);
		graph.clear();
		dict.clear();
		graph.resize(n);
		memset(parent,0,sizeof parent);
		memset(sums, 0, sizeof sums);
		memset(nodes, 0 ,sizeof nodes);
		memset(visited, 0, sizeof visited);
		rep(i,n-1){
			s(a);s(b);s(w);
			a--;b--;
			graph[a].pb(mp(b,w));
			graph[b].pb(mp(a,w));

			dict[mp(a,b)]=w;
			dict[mp(b,a)]=w;
		}
		visited[0] = 1;
		parent[0] = -1;
		dfs(0);

		memset(visited, 0, sizeof visited);
		memset(ans, 0, sizeof ans);
		visited[0] = 1;
		ans[0] = sums[0];
		dfs2(0);

		rep(i,n){
			printf("%llu\n",ans[i]);
		}
		//printf("\n");

	}
	return 0;
}
