#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<utility>
#include<cstring>
#include<cmath>
#define LL long long int
#define mod 1000000007
#define vi vector<int>
#define vvi vector < vi >
#define pii pair<int,int>
#define all(c) c.begin(),c.end()
#define sf(x) scanf("%d",&x);
#define sf2(x,y) scanf("%d%d",&x,&y);
#define mem(a,val) memset(a,val,sizeof(a))
#define nl printf("\n");
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define cf I64
using namespace std;
LL W,down[100005],up[100005],child[100005];
vector<pair<LL,LL> > v[100005];
void dfs(LL src,LL par)
{	pair<LL,LL> p;
	LL i,y,cost;
	for(i=0;i<v[src].size();i++)
	{	p=v[src][i];
		y=p.f;
		cost=p.s;	
		if(y!=par)
		{	dfs(y,src);
			child[src]+=child[y]+1;
			down[src]+=(child[y]+1)*cost+down[y];
		}
	}
}
void dfs1(LL src,LL par)
{	pair<LL,LL> p;
	LL i,y,cost;
	for(i=0;i<v[src].size();i++)
	{	p=v[src][i];
		y=p.f;
		cost=p.s;	
		if(y!=par)
		{	up[y]=down[src]+up[src];
			up[y]=up[y]-child[y]*cost+(W-child[y]-2)*cost-down[y];
			dfs1(y,src);
		}
	
	}
}
int main()
{	LL t,i,j,n,m,ans,sum,x,y,cost;
	cin>>t;
	while(t--)
	{	scanf("%lld",&W);
		for(i=1;i<=W;i++) v[i].clear();
		for(i=0;i<W-1;i++)
		{	scanf("%lld%lld%lld",&x,&y,&cost);
			v[x].pb(mp(y,cost));
			v[y].pb(mp(x,cost));
		}
		mem(down,0);
		mem(up,0);
		mem(child,0);
		
		dfs(1,-1);
		dfs1(1,-1);
		
		/*
		for(i=1;i<=W;i++)
			cout<<down[i]<<" ";
		nl;
		for(i=1;i<=W;i++)
			cout<<up[i]<<" ";
		nl;*/	
		for(i=1;i<=W;i++)
			cout<<down[i]+up[i]<<endl;
	}
	return 0;
}



