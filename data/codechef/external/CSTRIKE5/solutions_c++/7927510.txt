#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
 
#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
 
#define eps 1e-9
//#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 256
#define right adsgasgadsg
#define free adsgasdg
#define MAG 10000
 
using namespace std;
 
long long n,tests,a,b,c;
vector<pair<long long, long long> > g[1<<20];
long long used[1<<20],subsize[1<<20];
long long ansdown[1<<20],ansup[1<<20];
 
void dfs(long v)
{
 used[v]=1;
 subsize[v]=1;
 for (int i=0;i<g[v].size();i++)
 {
  long id=g[v][i].first;
  long long tc=g[v][i].second;
  if (used[id])continue;
  dfs(id);
  subsize[v]+=subsize[id];
  ansdown[v]+=ansdown[id]+tc*subsize[id];
 }
}
 
void dfs1(long v,long par,long long tc)
{
 used[v]=1;
 if (par!=0)
 {
  ansup[v]+=(subsize[par]-subsize[v])*tc+(ansdown[par]-ansdown[v]-subsize[v]*tc)+ansup[par]+(n-subsize[par])*tc;
 }
 
 for (int i=0;i<g[v].size();i++)
 {
  long id=g[v][i].first;
  long long tcc=g[v][i].second;
  if (used[id])continue;
  dfs1(id,v,tcc);
 }
}
 
int main(){
//freopen("C:/output.txt","w",stdout);
ios_base::sync_with_stdio(0);
 
cin>>tests;
for (;tests;--tests)
{
 cin>>n;
 for (int i=1;i<=n;i++)
 {
  g[i].clear();
 }
 for (int i=1;i<n;i++)
 {
  cin>>a>>b>>c;
  g[a].push_back(make_pair(b,c));
  g[b].push_back(make_pair(a,c));
 }
 
 for (int i=1;i<=n;i++)
  used[i]=subsize[i]=ansdown[i]=ansup[i]=0;
 
 dfs(1);
 for (int i=1;i<=n;i++)
  used[i]=0;
 dfs1(1,0,0);

  for (int i=1;i<=n;i++)
   cout<<ansup[i]+ansdown[i]<<endl;
}
 
cin.get();cin.get();
return 0;}