#include <bits/stdc++.h>
using namespace std;

vector<pair<int,int> > edges[100001];
vector<int> v[100001];
long long ans[100001];
int dfs(int i,int p)
{
    int ret=1;
    for(int j=0;j<edges[i].size();++j)
    {
        if(edges[i][j].first==p){ v[i].push_back(0); continue;}
        int num=dfs(edges[i][j].first,i);
        v[i].push_back(num);
        ans[i]+=ans[edges[i][j].first]+(long long)num*edges[i][j].second;
        ret+=num;
    }
    return ret;
}
void dfs1(int i,int p,int w,int n,int tot)
{
    if(p!=-1) 
        ans[i]+=(ans[p]-ans[i]-(long long)n*w+(long long)(tot-n)*w);
    for(int j=0;j<edges[i].size();++j)
    {
        if(edges[i][j].first==p) continue;
        dfs1(edges[i][j].first,i,edges[i][j].second,v[i][j],tot);
    }
}
int main() {
	int t,n,x,y,z;
	scanf("%d",&t);
	while(t--)
	{
	    scanf("%d",&n);
	    for(int i=1;i<=n;++i){
	        ans[i]=0;
	        v[i].clear();
	        edges[i].clear();
	    }
	    for(int i=1;i<n;++i)
	    {
	        scanf("%d %d %d",&x,&y,&z);
	        edges[x].push_back(make_pair(y,z));
	        edges[y].push_back(make_pair(x,z));
	    }
	    dfs(1,-1);
	    dfs1(1,-1,0,n,n);
	    for(int i=1;i<=n;++i) printf("%lld\n",ans[i]);
	}
	return 0;
}
