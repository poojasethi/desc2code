#include<iostream>
#include<vector>
#include<utility>

#define ll long long
#define pb push_back

using namespace std;

struct Graph
{
  ll n;
  ll m;
  vector< pair<ll,ll> > nei[100005];
  ll cnt[100005];
  ll subCost[100005];
  ll cost[100005];
  bool vis[100005];

  void dfs1(ll u)
  {
    int i;
    cnt[u] = 1;
    subCost[u] = 0;
    for(i=0;i<nei[u].size();++i)
    {
      int v = nei[u][i].first, w = nei[u][i].second;
      if(vis[v]==false)
      {
        vis[v] = true;
        dfs1(v);
        cnt[u] += cnt[v];
        //cout<<u<<" "<<v<<" "<<w<<endl;
        subCost[u] += w*cnt[v];
        subCost[u] += subCost[v];
      }
    }
  }

  void dfs2(ll u)
  {
    ll i;
    for(i=0;i<nei[u].size();++i)
    {
      int v = nei[u][i].first, w = nei[u][i].second;
      if(vis[v]==false)
      {
        vis[v] = true;
        cost[v] = subCost[v] + (cost[u]-cnt[v]*w-subCost[v]) + (n-cnt[v])*w;
        dfs2(v);
      }
    }
  }

  void cntAndSubCost()
  {
    ll i;
    for(i=1;i<=n;++i)
      vis[i] = false;

    vis[1] = true;
    dfs1(1);

  //  for(i=1;i<=n;++i)
    //  cout<<cnt[i]<<" "<<subCost[i]<<endl;
  }
  void calCost()
  {
    ll i;
    for(i=1;i<=n;++i)
      vis[i] = false;
    for(i=1;i<=n;++i)
      cost[i] = 0;

    vis[1] = true;
    cost[1] = subCost[1];
    dfs2(1);

    for(i=1;i<=n;++i)
      cout<<cost[i]<<endl;
  }
};

int main()
{
  ll t;
  cin>>t;
  while(t--)
  {
    Graph g;
    cin>>g.n;
    g.m = g.n - 1;
    ll i;
    for(i=0;i<g.m;++i)
    {
      ll a,b,c;
      cin>>a>>b>>c;
      g.nei[a].pb(make_pair(b,c));
      g.nei[b].pb(make_pair(a,c));
    }
    g.cntAndSubCost();
    g.calCost();
  }
}
