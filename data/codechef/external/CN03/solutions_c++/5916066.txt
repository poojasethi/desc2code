/* Basic includes*/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <cctype>
#include <climits>
#include <map>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <set>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

typedef vector<int> vi;
typedef pair<int,int> pi;
typedef vector<string> vs;
typedef vector<pi> vpi;

/*Basic Macros*/
#define fi				first
#define se				second
#define all(x)			(x).begin(), (x).end()
#define ini(a, v)		memset(a, v, sizeof(a))
#define re(i,s,n)		for(int i=s;i<(n);++i)
#define rep(i,s,n)	for(int i=s;i<=(n);++i)
#define fo(i,n)		re(i,0,n)
#define rev(i,n,s)	for(int i=(n)-1;i>=s;--i)
#define repv(i,n,s)	for(int i=(n);i>=s;--i)
#define fov(i,n)		rev(i,n,0)
#define pu				push_back
#define mp				make_pair
#define si(x)			(int)(x.size())
#define miN(a,b)		( (a) > (b) ? (b) : (a) )
#define maX(a,b)		( (a) > (b) ? (a) : (b) )
#define ABS(a)			( (a) >= 0 ? (a) : (-(a)))
#define Swap(a,b)		{ int t = a; a = b; b = t; }
#define Get 			getchar_unlocked()

/*Some functions*/
int GCD(int a,int b) { return b == 0 ? a : GCD(b,a%b); }

int getInt() { int a=0,s=1; char c=0; while(c<33) c=Get; if(c=='-') {s=-1; c=Get;} while(c>33) {a=(a<<3)+(a<<1)+c-'0'; c=Get;} return a*s; }

ll getInt64() { ll a=0,s=1; char c=0; while(c<33) c=Get; if(c=='-') {s=-1; c=Get;} while(c>33) {a=(a<<3)+(a<<1)+c-'0'; c=Get;} return a*s; }

int compare(const void *x,const void *y) { int a=*(int*)x,b=*(int*)y; return a<b?-1:1; }

int power(int a,int e) { if(e==0) return 1; int s=power(a,e>>1); s=(ll)(s)*s; return e&1?(ll)(s)*a:s; }

int powerM(int a,int e,int m) { if(e==0) return 1%m; int s=powerM(a,e>>1,m); s=((ll)(s)*s)%m; return e&1?((ll)(s)*a)%m:s; }

bool isFeasible(ll a[],ll dist, ll n, ll k) {
	ll taken = 1;
	ll last = a[0];
	for(ll i=0;i<n;i++) {
		if(a[i]-last >= dist) {
			taken++;
			last = a[i];
		}
	}
	return (taken>=k);
}

ll solve(ll a[],ll n,ll k) {
	ll low = 0;
	ll high = a[n-1] - a[0] + 1;
	while(high - low > 1) {
		ll mid = low + (high - low)/2;
		if(isFeasible(a,mid,n,k))
			low = mid;
		else
			high = mid;
	}
	return low;
}

int main() {
	ll n,c,i;
	n = getInt64();
	c = getInt64();
	ll a[n];
	for(i=0;i<n;i++) {
		a[i] = getInt64();
	}
	sort(a,a+n);
	ll ans = solve(a,n,c);
	printf("%lld\n",ans);
	return 0;
}
