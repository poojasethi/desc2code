// idea: binary search
#include <bits/stdc++.h>
#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cstring>
#include <cassert>
#include <utility>
#include <iomanip>

using namespace std;
#define ll long long int
const double inf = 1e100;
const int MAX = 40035;
const int MAX1 = 10005;
#define MOD 1000000007
 
 #define gc getchar_unlocked
inline ll scan()
{
	ll t=0,neg=0;
	char c;
	c=gc();
	while((c<'0' || c>'9')&& c!='-')
		c=gc();
	if(c=='-') {neg=1;c=gc();}
	while(c>='0' && c<='9')
	{
		t=(t<<3)+(t<<1)+c-'0';
		c=gc();
	}
	if(neg) t=-t;
	return(t);
} 
ll a[1000001],n,c;
ll ans=1000000001;
 
int check(ll cans)
{
	ll h=1,i,cdis=0;
	for(i=0;i<n;i++)
	{
		if(cdis==0)
			cdis=a[i+1]-a[i];
		else if(cdis>=cans)
		{
			h++;
			cdis=0;
		}
	}
	if(h>=c)
		return 1;
}
void solve()
{
	ll low=1;
	ll high=(a[n-1]-a[0])/2;
	while(low<high)
	{
		ll mid=(high+low)/2;
		if(check(mid))
		{
			ans=mid;
			low=mid+1;
		}
		else
			high=mid-1;
	}
}
int main() 
{
	n=scan();c=scan();
	for(ll i=0;i<n;i++)
		a[i]=scan();
	sort(a,a+n);
	solve();
	printf("%lld\n",ans);
	return 0;
} 