#include<stdio.h>
#include<vector>
#include<algorithm>
#define ulli long long int

using namespace std;

ulli cmpfunc (const void * a, const void * b) {
   return ( *(ulli *)a - *(ulli *)b );
}

typedef struct bound {
    int low, high;
}bound;

ulli min(ulli a, ulli b) {
    return a > b ? b : a;
}

ulli abss(ulli a) {
    return a < 0 ? -a : a;
}
 
int main()
{
    int t;
    t = 1;
 //   scanf("%d", &t);
    while(t--) {
	int n, c, i;
    ulli x[100020], max=0;
	scanf("%d%d", &n, &c);
	for(i = 0; i < n; i++)
		scanf("%lld", &x[i]);
    sort(x, x+n);
	vector<bound> v(1);
    v.clear();
    v.resize(1);
    c-=2;
    v[0].low = 0;
    v[0].high = n-1;
    max = x[n-1] - x[0];
    while((c--) != 0) {
        ulli actualmax=-1, indt, maxd=-1, ind;
        ulli p = 0, mm, m;
        for(vector<bound>::iterator i = v.begin(); i != v.end(); i++, p++) {
            int low = i->low+1, high = i->high;
            maxd = -1;
            while(low < high) {
                int mid = low + (high - low) / 2;
                ulli d1, d2;
                d1 = abss(x[mid] - x[i->low]);
                d2 = abss(x[mid] - x[i->high]);
                if(maxd < min(d1,d2)) {
                    maxd = min(d1,d2);
                    ind = mid;
                    m = p;
                }
                if(d1 > d2) {
                    high = mid;
                }
                else if(d1 < d2) {
                    low = mid + 1;
                }
                else {
                    break;
                }
            }
            if(actualmax <= maxd) {
                actualmax = maxd;
                indt = ind;
                mm = m;
            }
        }
        if(actualmax <= max) {
            max = actualmax;
        }
        bound b;
        b.low = v[mm].low;
        b.high = indt;
        if(b.high - b.low > 1)
          v.push_back(b);
        bound bb;
        bb.low = indt;
        bb.high = v[mm].high;
        if(bb.high - bb.low > 1)
            v.push_back(bb);
        v.erase(v.begin() + mm);   
    }
    printf("%lld\n", max); }
	return 0;
}
