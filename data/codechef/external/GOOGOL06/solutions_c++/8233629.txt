#include <bits/stdc++.h>
using namespace std;
#define ull unsigned long long
struct node
{
	unsigned long long data;
	bool lazy , query1 , query2;
	node *left , *right;
};
node *build(ull a[] , int strt , int end)
{
	node *temp = (node *)malloc(sizeof(node));
	if(strt == end)
	{
		temp->data = a[strt];
		temp->left = temp->right = NULL;
		temp->lazy = 0;
		temp->query1 = temp->query2 = 0;
		return temp;
	}
	int mid = (strt + end)/2;
 
	temp->left = build(a , strt,  mid);
	temp->right = build(a , mid + 1 , end);
	temp->data = temp->left->data ^ temp->right->data;
	temp->lazy = 0;
	temp->query1 = temp->query2 = 0;
	return temp;
}
void rangeupdate(node *root , int strt , int end , int x , int y , bool flag)
{
	if(strt >= x && end <= y)
	{
		if(!root->lazy)
		{
			if(!((end - strt + 1) & 1))
			{
				if(((end - strt + 1)/2) & 1)
					root->data = ~root->data;
			}
			else
			{
				if((flag && (((end - strt + 1)/2) & 1))||(!flag && !(((end - strt + 1)/2) & 1)))
					root->data = ~root->data;
 
			}
			if(!flag)
			{
				root->query1 = 1;
				root->query2 = 0;
			}
			else
			{
				root->query1 = 0;
				root->query2 = 1;
			}
			root->lazy = 1;
		}
		else
		{
			if(flag)
			{
				root->query2 = !root->query2;
				if(!root->query1 && !root->query2)
					root->lazy = 0;
				if(!((end - strt + 1) & 1))
				{
					if(((end - strt + 1)/2) & 1)
						root->data = ~root->data;
				}
				else
				{
					if((((end - strt + 1)/2) & 1))
						root->data = ~root->data;
				}
			}
			else
			{
				root->query1 = !root->query1;
				if(!root->query1 && !root->query2)
					root->lazy = 0;
				if(!((end - strt + 1) & 1))
				{
					if(((end - strt + 1)/2) & 1)
						root->data = ~root->data;
				}
				else
				{
					if(!(((end - strt + 1)/2) & 1))
						root->data = ~root->data;
				}
			}
		}
		return;
	}
 
	int mid = (strt + end)/2;
 
	if(root->lazy)
	{
		if(root->query1)
			rangeupdate(root->left , strt , mid , strt , mid , 0);
		if(root->query2)
			rangeupdate(root->left , strt , mid , strt,  mid , 1);
		if(!((mid - strt + 1) & 1))
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
		}
		else
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
		}
		root->lazy = root->query1 = root->query2 = 0;
	}
 
	if(y <= mid)
		rangeupdate(root->left , strt , mid , x , y , flag);
	else if(x > mid)
		rangeupdate(root->right , mid + 1 , end , x , y , flag);
	else
	{
		rangeupdate(root->left , strt , mid , x , mid , flag);
		if(!((mid - x + 1) & 1))
		{
			if(flag == 0)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , y , 0);
			else
				rangeupdate(root->right , mid + 1 , end , mid + 1 , y , 1);
		}
		else
		{
			if(flag == 0)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , y , 1);
			else
				rangeupdate(root->right , mid + 1 , end , mid + 1 , y , 0);
		}
	}
	root->data = root->left->data ^ root->right->data;
}
void pointupdate(node *root , int strt , int end , int x , ull y)
{
	if(strt == end)
	{
		root->data = y;
		return;
	}
	int mid = (strt + end)/2;
 
	if(root->lazy)
	{
		if(root->query1)
			rangeupdate(root->left , strt , mid , strt , mid , 0);
		if(root->query2)
			rangeupdate(root->left , strt , mid , strt,  mid , 1);
		if(!((mid - strt + 1) & 1))
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
		}
		else
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
		}
		root->lazy = root->query1 = root->query2 = 0;
	}
 
	if(x <= mid)
		pointupdate(root->left , strt,  mid , x , y);
	else
		pointupdate(root->right , mid + 1 , end , x , y);
 
	root->data = root->left->data ^ root->right->data;
}
ull pointquery(node *root , int strt , int end , int x)
{
	if(strt == end)
		return root->data;
 
	int mid = (strt + end)/2;
	if(root->lazy)
	{
		if(root->query1)
			rangeupdate(root->left , strt , mid , strt , mid , 0);
		if(root->query2)
			rangeupdate(root->left , strt , mid , strt,  mid , 1);
		if(!((mid - strt + 1) & 1))
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
		}
		else
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
		}
		root->lazy = root->query1 = root->query2 = 0;
	}
 
	if(x <= mid)
		return pointquery(root->left , strt , mid , x);
	else
		return pointquery(root->right , mid + 1 , end , x);
}
ull rangequery(node *root , int strt , int end , int x , int y)
{
	if(strt >= x && end <= y)
		return root->data;
 
	int mid = (strt + end)/2;
	if(root->lazy)
	{
		if(root->query1)
			rangeupdate(root->left , strt , mid , strt , mid , 0);
		if(root->query2)
			rangeupdate(root->left , strt , mid , strt,  mid , 1);
		if(!((mid - strt + 1) & 1))
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
		}
		else
		{
			if(root->query1)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 1);
			if(root->query2)
				rangeupdate(root->right , mid + 1 , end , mid + 1 , end , 0);
		}
		root->lazy = root->query1 = root->query2 = 0;
	}
 
	if(y <= mid)
		return rangequery(root->left , strt , mid , x , y);
	else if(x > mid)
		return rangequery(root->right , mid + 1 , end , x , y);
	else
		return rangequery(root->left , strt , mid , x , mid)^rangequery(root->right , mid + 1 , end , mid + 1 , y);
}
int main()
{
	int n ,i;
	cin >> n;
	ull a[n];
	for(i = 0;i < n;i++)
		cin >> a[i];
 
	node *root = NULL;
	root = build(a , 0 , n-1);
	ull x , y , q;
	cin >> q;
	char t;
	while(q--)
	{
		cin >> t;
		if(t == 'A')
		{
			cin >> x >> y;
			pointupdate(root , 0 , n-1 , x-1 , y);
		}
		else if(t == 'B')
		{
			cin >> x >> y;
			rangeupdate(root , 0 , n-1 , x-1 , y-1 , 0);
		}
		else if(t == 'C')
		{
			cin >> x;
			cout << pointquery(root , 0 , n-1 , x-1) << endl;
		}
		else
		{
			cin >> x >> y;
			cout << rangequery(root , 0 , n-1 , x-1 , y-1) << endl;
		}
	}
	return 0;
}
 