#include <bits/stdc++.h>

using namespace std;

//#define DEBUG

//Hardware Costants

#define bitcount                    __builtin_popcount  //returns the number of set bits in a number.
#define gcd                         __gcd //returns gcd of two numbers

//Custom defines
//
#define fr(i,a,b,x) for(int i=a;i<b;i+=x)
#define tr(c,itr) for(typeof((c).begin() )itr = (c).begin(); itr != (c).end(); itr++)

#define pb push_back
#define MP(a,b) make_pair(a, b)
#define checkbit(n,b)  ( (n >> b) & 1)

#define ULL unsigned long long

#define RESET(val) memset(val, 0, sizeof(val))

#define input(in)    freopen(in,"r",stdin)
#define output(out)  freopen(out,"w",stdout)

const int fx[4][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}};
const int fxx[8][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}, {1,1}, {1,-1}, {-1,1}, {-1,-1}};

#ifdef DEBUG
     #define debug(args...)            {dbg,args; cerr<<endl;}
#else
    #define debug(args...)              // Just strip off all debug tokens
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }
} dbg;

inline void print_f(int n)
{    
    printf("Case #%d: ",n);
}

inline int Bounds(int i,int j,int S)
{
    return ((i>=0) && (i<S) && (j>=0) && (j<S));
}

vector<string> split(const string &s, char delim)
{
    stringstream ss(s);
    string item;
    vector<string> tokens;
    while (getline(ss, item, delim))
        tokens.push_back(item);
    
    return tokens;
}

int main()
{
	int T;
	cin >> T;
	for(int t=0;t<T;t++)
	{
		vector<int> v;
		v.clear();
		int n, flag = 0;
		cin >> n;
		for(int i=0;i<n;i++)
		{
			int x;
			cin >> x;
			v.push_back(x);
		}

		sort(v.begin(), v.end());
		for(int i=1;i<n;i++)
		{
			if(v[i] == v[i - 1])
			{
				flag = 1;
				break;
			}
		}

		if(flag)
			cout << "NO" << endl;
		else
			cout << "YES" << endl;

	}
}