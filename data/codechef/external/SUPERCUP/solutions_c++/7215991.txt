/*
Finding the subset with sum s, because the raneg of n is 2^40, we can divide tthe subsets in two halves
of 2^20 subsets which approximates to 10^5( which wil pass in 1 sec easily)

Then using binary search we can find the total number of possible subsets
*/

#include <iostream>
#include<algorithm>
#include<stdio.h>
using namespace std;

long long sums[1050000];
long long a[42];

int main() {
	// your code goes here
	
	long long n,s;
	
	scanf("%lld %lld",&n,&s);
	
	int i,j;
	
	for(i=0;i<n;i++)
		scanf("%lld",&a[i]);
		
	int n1=n/2;
	int n2= n-n1;
	
	long long tot = (1<<n1), cs=0,ans=0;
//	cout<<tot<<endl;
	
	for(i=0;i<tot;i++){
		cs=0;
		for(j=0;j<n1;j++){
			if( (i&(1<<j)))
				cs+=a[j];
		}
		
		sums[i] = cs;
	}
	
	sort(sums,sums+tot);
	
//	for(i=0;i<tot;i++)
//		cout<<sums[i]<<" ";
		
		
//	cout<<endl;

	cs=0;

	for(i=0;i<(1<<n2);i++){
		cs=0;
		for(j=0;j<n2;j++){
			if( (i&(1<<j))){
				cs+= a[n1+j];
				//cout<<a[n1+j]<<" ";
			}
		}
	//	cout<<endl;
		
		if(cs<=s){
		//	cout<<"here";
			ans+= upper_bound(sums,sums+tot,s-cs) - lower_bound(sums,sums+tot,s-cs);
		}
	}
	
	
	printf("%lld",ans);
	
	
	return 0;
}