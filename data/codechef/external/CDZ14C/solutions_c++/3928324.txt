#include<iostream>
#include<cstdio>
#include<queue>
using namespace std;
class node{

    public :
        int x;
    int y;
    int dist;
        void setParams(int x1,int y1)
        {
            x = x1;
            y =y1;
        }
};
int dp[1003][10003];
char rows[10003][1003];
class ques
{
    public :
        int n,m;
         void makeArrays()
        {

            for(int i=0;i<n+1;i++)
                rows[i][0] = rows[i][m+1] = '2';
            for(int j=0;j<m+2;j++)
                rows[0][j] = rows[n+1][j] = '2';

        }

        void printRows()
        {
            for(int i=0;i<n+2;i++)
            {
                for(int j=0;j<m+2;j++)
                    printf("%c",rows[i][j]);
                cout<<endl;
            }
        }
        void printDp()
        {
            for(int i=0;i<n+2;i++)
            {
                for(int j=0;j<m+2;j++)
                    printf("%d",dp[i][j]);
                cout<<endl;
            }
        }
        void bfs()
        {
            queue<node> path;
            node start;
            node l,d,u,r;

            start.setParams(1,1);
            path.push(start);

            while(!path.empty())
            {

                node top = path.front();
                path.pop();

                if(top.x < 0 || top.x > n+1)
                    continue;
                if(top.y < 0 || top.y > m+1)
                    continue;

                if(rows[top.x][top.y] == '0')
                {

                    if(rows[top.x][top.y-1] == '1' && dp[top.x][top.y-1] == -1)
                    {
                        dp[top.x][top.y-1] = dp[top.x][top.y] + 1;
                        u.setParams(top.x,top.y-1);
                        path.push(u);
                    }
                    if(rows[top.x][top.y+1] == '1' && dp[top.x][top.y+1] == -1)
                    {
                        dp[top.x][top.y+1] = dp[top.x][top.y] + 1;
                        d.setParams(top.x,top.y+1);
                        path.push(d);
                    }
                    if(rows[top.x-1][top.y] == '1' && dp[top.x-1][top.y] == -1)
                    {
                        dp[top.x-1][top.y] = dp[top.x][top.y] + 1;
                        l.setParams(top.x-1,top.y);
                        path.push(l);
                    }
                    if(rows[top.x+1][top.y] == '1' && dp[top.x+1][top.y] == -1)
                    {

                        dp[top.x+1][top.y] = dp[top.x][top.y] + 1;
                        r.setParams(top.x+1,top.y);
                        path.push(r);
                    }
                }
                else if(rows[top.x][top.y] == '1')
                {

                    if(rows[top.x][top.y-1] == '0' && dp[top.x][top.y-1] == -1)
                    {
                        dp[top.x][top.y-1] = dp[top.x][top.y] + 1;
                        u.setParams(top.x,top.y-1);
                        path.push(u);
                    }
                    if(rows[top.x][top.y+1] == '0' && dp[top.x][top.y+1] == -1)
                    {
                        dp[top.x][top.y+1] = dp[top.x][top.y] + 1;
                        d.setParams(top.x,top.y+1);
                        path.push(d);
                    }
                    if(rows[top.x-1][top.y] == '0' && dp[top.x-1][top.y] == -1)
                    {
                        dp[top.x-1][top.y] = dp[top.x][top.y] + 1;
                        l.setParams(top.x-1,top.y);
                        path.push(l);
                    }
                    if(rows[top.x+1][top.y] == '0' && dp[top.x+1][top.y] == -1)
                    {
                        dp[top.x+1][top.y] = dp[top.x][top.y] + 1;
                        r.setParams(top.x+1,top.y);
                        path.push(r);
                    }
                }
                else
                    continue;
//                cout<<"x : "<<top.x<<" y : "<<top.y<<endl;
                //printDp();
            }

    }
};
int main()
{
    int t,n,m;
    ques q;
    scanf("%d",&t);
    while(t--){

        scanf("%d%d",&n,&m);
        q.n = n;
        q.m = m;
        q.makeArrays();
        for(int i=0;i<n+2;i++)
            for(int j=0;j<m+2;j++)
                dp[i][j] = -1;

        string inp;
                for(int i=0;i<n;i++)
        {
            fflush(stdin);
            cin>>inp;
            for(int j=1;j<=m;j++)
                rows[i+1][j] = inp[j-1];
        }

        dp[1][1] = 1;
//        q.printRows();
//        q.printDp();
        q.bfs();
//        if(dp[n][m] != -1)
        printf("%d\n",dp[n][m]);
//        else
//        printf("-1\n");

    }
}
