#include <bits/stdc++.h>

#define ALL(c)        c.begin(), c.end()
#define TR(c, it)     for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define REP(i, j, lo) for(int (i) = (j); i >= (lo); i--)
#define MAX(a, b)     ((a) > (b) ? (a) : (b))
#define gc            getchar_unlocked
#define pu            putchar_unlocked
#define ll            long long int
#define ull           unsigned long long int
#define inf           INT_MAX
#define mininf        INT_MIN
#define pb            push_back
#define pob           pop_back
#define pf            push_front
#define pof           pop_front
#define mp            make_pair
#define PI            3.14159265358979323846264338327950288
#define endl          '\n'
#define SET(arr, val) memset(arr, val, sizeof arr)
#define SI            ( { int x; scanf("%d", &x); x; } )
#define IOSFAST       ( ios::sync_with_stdio(false); )
inline void MAXR(int &a, int b){ if(a < b)   a = b; }

using namespace std;

char maze[1010][1010];
int dist[1010][1010], n, m;
bool visited[1010][1010];
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

void bfs()
{
    queue< pair<int, int> > q;
    q.push(mp(0, 0));
    visited[0][0] = true;
    dist[0][0] = 0;
    while(!q.empty())
    {
        pair<int, int> temp = q.front();
        int r = temp.first, c = temp.second;
        q.pop();
        visited[r][c] = true;
        FOR(i, 0, 4)
        {
            int x = r + dx[i], y = c + dy[i];
            if(x >= 0 && x < n && y >= 0 && y < m && !visited[x][y] && maze[x][y] != maze[r][c])
            {
                visited[x][y] = true;
                dist[x][y] = dist[r][c] + 1;
                q.push(mp(x, y));
            }
        }
    }
}

int main()
{
    int t = SI;
    while(t--)
    {
        scanf("%d %d", &n, &m);
        FOR(i, 0, n)
            FOR(j, 0, m)
            {
                visited[i][j] = false;
                dist[i][j] = -10;
            }
        FOR(i, 0, n)
            scanf("%s", maze[i]);
        bfs();
        if(visited[n-1][m-1])
            printf("%d\n", dist[n-1][m-1] + 1);
        else
            printf("-1\n");
    }
    return 0;
}
