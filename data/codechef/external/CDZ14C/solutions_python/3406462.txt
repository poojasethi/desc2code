#include<stdio.h>
#include<iostream>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<vector>
#include<queue>
#include<stack>
#include<algorithm>
#include<map>
#include<limits>

#define si(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sll(n) scanf("%lld",&n)
#define sull(n) scanf("%llu",&n)
#define ss(str) scanf("%s",str)
#define sf(n) scanf("%f",&n)
#define sd(n) scanf("%lf",&n)
#define I int
#define ll long long int
#define ull unsigned long long int
#define as_0 48
#define as_A 65
#define as_a 97
#define mem(a) memset(a,0,sizeof a)
#define INF (1<<30)
#define M 1000000009

using namespace std;
char str[1009][1009];
int visited[1009][1009];

int valid(int a,int b,int n,int m)
{
    if(a<0 || a>=n || b<0 || b>=m)
        return 0;
    return 1;
}

int main()
{
   //freopen("input.txt","r",stdin);
   //freopen("output.txt","w",stdout);
   int t; cin>>t;
   while(t--)
   {
       mem(visited);
       int n,m; cin>>n>>m;
       int i;
       for(i=0;i<n;i++) ss(str[i]);

       queue<pair<int,int> >q;
       visited[0][0]=1;
       q.push(pair<int,int>(0,0));

       while(!q.empty())
       {
           pair<int,int> p=q.front(),r;
           q.pop();

           int a,b;
           a=p.first-1,b=p.second;
           if(valid(a,b,n,m) && !visited[a][b] && ((str[a][b]=='1' && str[p.first][p.second]=='0')||(str[a][b]=='0' && str[p.first][p.second]=='1')) )
           {
               r.first=a; r.second=b; visited[a][b]=visited[p.first][p.second]+1;
               q.push(r);
           }
           a=p.first,b=p.second-1;
           if(valid(a,b,n,m) && !visited[a][b] && ((str[a][b]=='1' && str[p.first][p.second]=='0')||(str[a][b]=='0' && str[p.first][p.second]=='1')) )
           {
               r.first=a; r.second=b; visited[a][b]=visited[p.first][p.second]+1;
               q.push(r);
            }
           a=p.first+1,b=p.second;
           if(valid(a,b,n,m) && !visited[a][b] && ((str[a][b]=='1' && str[p.first][p.second]=='0')||(str[a][b]=='0' && str[p.first][p.second]=='1')) )
           {
               r.first=a; r.second=b; visited[a][b]=visited[p.first][p.second]+1;
               q.push(r);
           }
           a=p.first,b=p.second+1;
           if(valid(a,b,n,m) && !visited[a][b] && ((str[a][b]=='1' && str[p.first][p.second]=='0')||(str[a][b]=='0' && str[p.first][p.second]=='1')) )
           {
               r.first=a; r.second=b; visited[a][b]=visited[p.first][p.second]+1;
               q.push(r);
           }
       }
       if(visited[n-1][m-1]==0)
        cout<<"-1\n";
       else
        cout<<visited[n-1][m-1]<<"\n";
   }


 return 0;
}
