#include<stdio.h>
#include<cstring>
#include<iostream>
#include<queue>
using namespace std;
char s[1002][1002];
bool visited[1002][1002];
int depth[1002][1002];
struct node
{
  int x,y;
};
int main()
{
    int test_cases,n,m;
    queue<struct node> q;
    struct node p,f;
    scanf("%d",&test_cases);
    for(int i=0;i<test_cases;i++)
    {
        memset(visited,0,sizeof(visited));
        memset(depth,-1,sizeof(depth));
        scanf("%d%d",&n,&m);
        for(int j=0;j<n;j++)
        {
            scanf("%s",s[j]);
        }
        p.x=0;
        p.y=0;
        q.push(p);
        visited[0][0]=true;
        depth[0][0]=0;
        while(!q.empty())
        {
            f=q.front();
            q.pop();
            if(f.x-1>=0 && !visited[f.x-1][f.y] && s[f.x][f.y]-'0'==1-s[f.x-1][f.y]+'0')
            {
                p.x=f.x-1;
                p.y=f.y;
                visited[f.x-1][f.y]=true;
                depth[p.x][p.y]=depth[f.x][f.y]+1;
                q.push(p);
            }
            if(f.y-1>=0 && !visited[f.x][f.y-1] && s[f.x][f.y]-'0'==1-s[f.x][f.y-1]+'0')
            {
                p.x=f.x;
                p.y=f.y-1;
                visited[f.x][f.y-1]=true;
                depth[p.x][p.y]=depth[f.x][f.y]+1;
                q.push(p);
            }
            if(f.x+1<n && !visited[f.x+1][f.y] && (s[f.x][f.y]-'0')==1-(s[f.x+1][f.y]-'0'))
            {
                p.x=f.x+1;
                p.y=f.y;
                visited[p.x][p.y]=true;
                depth[p.x][p.y]=depth[f.x][f.y]+1;
                q.push(p);
            }
            if(f.y+1<m && !visited[f.x][f.y+1] && (s[f.x][f.y]-'0')==1-(s[f.x][f.y+1]-'0'))
            {
                p.x=f.x;
                p.y=f.y+1;
                visited[p.x][p.y]=true;
                depth[p.x][p.y]=depth[f.x][f.y]+1;
                q.push(p);
            }
        }
        if(depth[n-1][m-1]==-1)
            printf("-1\n");
        else
            printf("%d\n",depth[n-1][m-1]+1);
    }
}
