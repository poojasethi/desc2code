#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<list>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<cmath>
#include<cctype>
#include<cstring>
#include<string>
#include<ctime>
#include<cassert>
using namespace std;
#ifdef _WIN32
#include<conio.h>
#endif
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;
#define FOR(i,a,b) for(int i=(a);i< (b);i++)
#define input(a) scanf("%d",&a)
#define CLEAR(a) memset((a),0,sizeof(a))
#define INF 1000000000
#define LL long long
#define PI 2*acos(0.0)
#define sqr(a) (a)*(a)
#ifdef ONLINE_JUDGE
inline int read()
{
    char temp;
    int x=0;
    temp=getchar_unlocked();
    while(temp<48)temp=getchar_unlocked();
    x+=(temp-'0');
    temp=getchar_unlocked();
    while(temp>=48)
    {
        x=x*10;
        x+=(temp-'0');
        temp=getchar_unlocked();
    }
    return x;
}
inline void write(int a)
{
  char snum[20];
  int i=0;
  do
  {
    snum[i++]=a%10+48;
    a=a/10;
  }while(a!=0);
  i--;
  while(i>=0)
  putchar_unlocked(snum[i--]);
  putchar_unlocked('\n');
}
inline void readstr(char *s)
{
   char ch=0;
   int i=0;
   while(ch<33)
      ch=getchar_unlocked();
   while(ch!='\n')
   {
      s[i]=ch;
      ch=getchar_unlocked();
      i++;
   }
   s[i]='\0';
}
#endif
#define MAX 1005
#define mp make_pair
char maze[MAX][MAX];
bool visited[MAX][MAX];
int dist[MAX][MAX];
//using bfs;
int row[]={1,0,-1,0};
int col[]={0,1,0,-1};
bool check(int r,int c,int n,int m)
{
    return r>=1&&r<=n&&c>=1&&c<=m;	
}
void bfs(int r,int c,int n,int m)
{
	queue<pair<int,int> > q;
	q.push(mp(r,c));
	while(!q.empty())
	{
	   r=q.front().first;
	   c=q.front().second;
	   visited[r][c]=1;
	   q.pop();
	   for(int i=0;i<4;i++)
	   {
		int u=r+row[i];
		int v=c+col[i];
		if(!check(u,v,n,m)||(maze[u][v]==maze[r][c])||visited[u][v]||(dist[u][v]<=dist[r][c]+1))
		   continue;
		dist[u][v]=dist[r][c]+1;
	    q.push(mp(u,v));
	   }	
	}
}
int main()
{
	int tc,n,m;
	input(tc);
	while(tc--)
	{
		input(n);//row
		input(m);//col
		for(int i=1;i<=n;i++)
		{
		for(int j=1;j<=m;j++)
		{
		  dist[i][j]=INF;
		  visited[i][j]=0;	
		}
	    }
	    for(int i=1;i<=n;i++)
	    {
	    	scanf("%s",maze[i]+1);
	    }
	    //base case;
	    if(n==1&&m==1)
	    {
	    	printf("1\n");
	    	continue;
	    }
	    dist[1][1]=0;
	    bfs(1,1,n,m);
	    if(dist[n][m]!=INF)
	       printf("%d\n",dist[n][m]+1);
	    else
	       printf("-1\n");
	}
	return 0;
}