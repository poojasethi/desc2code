#include<bits/stdc++.h>
#include<cstdio>
#include<iostream>
#include<cmath>
#include<string.h>
#include<vector>
#include<map>
#include<stack>
#include<queue>
#define sz 100001
#define pb push_back
#define gc() getchar_unlocked()
#define pc(x) putchar_unlocked(x)
#define ll long long int
using namespace std;
static inline ll inp()
{
    ll x=0;
    char c=gc();
    while(c<'0'||c>'9')
    {
        c=gc();
    }
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=gc();
    }

         return x;
}


static inline int fastio()
{
    int x=0;
     char c=gc();
    while(c<'0'||c>'9')
    {
        c=gc();
    }
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=gc();
    }
    return x;
}

ll tree[sz<<2];
ll arr[sz];



void build_tree(int a,int b,int node)
{
    if(a>b)
    {
        return;
    }
    if(a==b)
    {
        tree[node]=arr[a];
        return;
    }
    int mid=(a+b)>>1;
    build_tree(a,mid,node*2);
    build_tree(mid+1,b,node*2+1);
    tree[node]=tree[node*2]+tree[node*2+1];

}

ll query_tree(int a,int b,int i,int j,int node)
{
    if(a>b||a>j||b<i)
    {
        return 0;
    }

    if(a>=i&&b<=j)
    {
        return(tree[node]);
    }
    int mid=(a+b)>>1;
    ll q1=query_tree(a,mid,i,j,node*2);
    ll q2=query_tree(mid+1,b,i,j,node*2+1);
    return(q1+q2);

}


int main()
{
    int N,Q,l,r;
    N=fastio();
    for(int i=0;i<N;i++)
        arr[i]=inp();
        build_tree(0,N-1,1);
    Q=fastio();
    while(Q--)
    {
        l=fastio();r=fastio();
        l--;r--;
        printf("%lld\n",query_tree(0,N-1,l,r,1));
    }
    return 0;
}
