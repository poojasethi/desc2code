// love sucks :(
#include<iostream>
#include<algorithm>
#include<utility>
#include<cstring>
#include<string.h>
#include<set>
#include<map>
#include<math.h>
#include<stdio.h>
#include<vector>
#include<functional>
#include<bitset>
#include<iomanip>
#define ll long long
#define gr greater<ll>()
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define s second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
using namespace std;
const int MAX =10003;
int n, m, f[MAX], block = 100, bit[MAX],rk[MAX];
string x[MAX];
ll bit1[MAX], total, res[MAX], ans, y[MAX];
struct node
{
	int l;
	int r;
	int i;
} q[MAX];
map<string, int> mp;

bool comp(node a, node b)
{
	if (a.l / block != b.l / block)
		return (a.l / block < b.l / block);
	return a.r <= b.r;
}
int query(int x)
{
	ll sum = 0;
	for (int i = x; i > 0; i -= i & (-i))
		sum += bit[i];
	return sum;
}
ll query_1(int x)
{
	ll sum = 0;
	for (int i = x; i > 0; i -= i & (-i))
		sum += bit1[i];
	return sum;
}
void update(int x, int val)
{
	ll tmp = val * y[x];
	for (int i = x; i <= n; i += (i & -i))
	{
		bit[i] += val;
		bit1[i] += tmp;
	}
	return;
}
inline void add(int i)
{
	int val = rk[i], small;
	ll tmp;
	f[val]++;
	if (f[val] == 1)
	{
		update(val, 1);
		total += y[val];
		small = query(val - 1);
		tmp = total - query_1(val);
		ans += (tmp + (y[val]) * (small + 1));
	}
	return;
}
inline void remove(int i)
{
	int val = rk[i], small;
	ll tmp;
	f[val]--;
	if (f[val] == 0)
	{
		update(val, -1);
		total -= y[val];
		small = query(val - 1);
		tmp = total - query_1(val);
		ans -= (tmp + (y[val]) * (small + 1));
	}
	return;
}
int main()
{
	
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	int t, tmp, c, l, r;
	cin >> t;
	while (t--)
	{
		cin >> n >> m;
		for (int i = 1; i <= n; i++)
		{
			cin >> x[i];
			mp[x[i]] = 1;
		}
		c = 1;
		for (map<string, int>::iterator it = mp.begin(); it != mp.end(); it++)
		{
			it->second = c;
			y[c] = (it->first).length();
			c++;
		}

		for(int i=1;i<=n;i++)
			rk[i]=mp[x[i]];
		//block = sqrt(n);
		for (int i = 0; i < m; i++)
		{
			cin >> l >> r;
			q[i].l = l;
			q[i].r = r;
			q[i].i = i;
		}

		sort(q, q + m, comp);
		ans = 0;
		total = 0;
		MS0(f);
		MS0(bit);
		MS0(bit1);
		int curL = 0, curR = 0, l, r;

		for (int i = 0; i < m; i++)
		{
			l = q[i].l;
			r = q[i].r;
			while (curL < l)
			{
				remove(curL);
				curL++;
			}
			while (curL > l)
			{
				curL--;
				add(curL);
			}

			while (curR <= r)
			{
				add(curR);
				curR++;
			}
			while (curR > r + 1)
			{
				curR--;
				remove(curR);
			}

			res[q[i].i] = ans;
		}

		for (int i = 0; i < m; i++)
			printf("%lld\n", res[i]);
		mp.clear();
	}
	return 0;
}