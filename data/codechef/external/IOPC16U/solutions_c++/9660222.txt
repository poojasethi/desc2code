#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <map>
using namespace std;

long long answer=0,con,n;

string str[10010];
long long arr[10010];
long long len[10010];
long long ans[10010];
long long bit1[10010];
long long bit2[10010];
long long cnt[10010];
map<string,long long> mp;

struct node{
    long long num,l,r;
}query[10010];

bool cmp(node a,node b){
    if((a.l/con)==(b.l/con))
        return a.r<b.r;
    return a.l<b.l;
}

void update1(long long in,long long val){
    while(in<=n){
        bit1[in]+=val;
        in+=(in&(-in));
    }
}

void update2(long long in,long long val){
    while(in<=n){
        bit2[in]+=val;
        in+=(in&(-in));
    }
}

long long query1(long long in){
    long long an=0;
    while(in>0){
        an+=bit1[in];
        in-=(in&(-in));
    }
    return an;
}

long long query2(long long in){
    long long an=0;
    while(in>0){
        an+=bit2[in];
        in-=(in&(-in));
    }
    return an;
}

void add(long long in){
    cnt[arr[in]]++;
    if(cnt[arr[in]]>1)
        return;
    answer+=query2(n)-query2(arr[in]);
    answer+=(query1(arr[in]-1)+1)*len[in];
    update1(arr[in],1);
    update2(arr[in],len[in]);
}

void remove(long long in){
    cnt[arr[in]]--;
    if(cnt[arr[in]]!=0)
        return;
    answer-=query2(n)-query2(arr[in]);
    answer-=(query1(arr[in]-1)+1)*len[in];
    update1(arr[in],-1);
    update2(arr[in],-len[in]);
}

int main(){
    long long t;
    scanf("%lld",&t);
    while(t--){
        long long m;
        scanf("%lld%lld",&n,&m);
        mp.clear();
        for(long long i=0;i<=n;i++)
            bit1[i]=bit2[i]=cnt[i]=0;
        for(long long i=1;i<=n;i++){
            cin>>str[i];
            mp[str[i]];
        }
        for(long long i=1;i<=m;i++){
            query[i].num=i;
            scanf("%lld%lld",&query[i].l,&query[i].r);
        }
        long long cnti=1;
        con=(long long)sqrt(n);
        for(map<string,long long>::iterator it=mp.begin(); it!=mp.end(); ++it)
            mp[it->first]=cnti++;
        for(long long i=1;i<=n;i++){
            arr[i]=mp[str[i]];
            len[i]=str[i].length();
        }
        sort(query+1,query+m+1,cmp);
        long long lt=1,rt=1;
        answer=len[1];
        update1(arr[1],1);
        update2(arr[1],len[1]);
        cnt[arr[1]]++;
        for(long long i=1;i<=m;i++){
            if(rt!=query[i].r){
                if(rt<query[i].r){
                    rt++;
                    while(rt<=query[i].r){
                        add(rt);
                        rt++;
                    }
                    rt--;
                }else{
                    while(rt>query[i].r){
                        remove(rt);
                        rt--;
                    }
                }
            }
            if(lt!=query[i].l){
                if(lt<query[i].l){
                    while(lt<query[i].l){
                        remove(lt);
                        lt++;
                    }
                }else{
                    lt--;
                    while(lt>=query[i].l){
                        add(lt);
                        lt--;
                    }
                    lt++;
                }
            }
            ans[query[i].num]=answer;
        }
        for(long long i=1;i<=m;i++)
            printf("%lld\n",ans[i]);
    }
}
