#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;

typedef long long int64;
typedef unsigned long long uint64;

#define FOI(i, A, B) for(i=A; i<=B; i++)
#define FOD(i, A, B) for(i=A; i>=B; i--)

#define INF    (int)1e9
#define EPS        1e-9
#define sqr(x)  (x)*(x)
#define PI	 acos(-1.0)

struct Point {
	int X;
	int Y;
};
 
double gradients[1000000];
 
int main(){
	int T;
	scanf( "%d", &T );
	while( T-- ){
		int N, ans = 1;
		int i, j;
		scanf( "%d", &N );
		Point point[N];
		FOI(i, 0, N-1)
			scanf( "%d%d", &point[i].X, &point[i].Y );
 		
 		FOI(i, 0, N-1){
 			int gi = 0;
 			FOI(j, i+1, N-1)
 				if( point[i].X == point[j].Y )
 					gradients[gi++] = INF;
 				else
 					gradients[gi++] = double( point[i].Y - point[j].Y ) / double( point[i].X - point[j].X );
 				
 				sort(gradients,gradients+gi);
 				
 				int v;
 			
 			FOI(j, 0, gi-1){
 				if( j && gradients[j] >= gradients[j-1] - EPS && gradients[j] <= gradients[j-1] + EPS ) 
 					++v;
 				else
 					v = 2;
 				ans = max(ans,v);
 			}
 		}
 		printf("%d\n",ans);
 	}
 	return 0;
}