/* Come on Code on!!!!
re_hash
dev_cpp
*/
 
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <ctime>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;
 
#define S(a) scanf("%d",&(a))
#define P(a) printf("%d",(a))
#define NL printf("\n") 
#define SL(a) scanf("%lld",&(a))
#define PL(a) printf("%lld",(a))
#define ll long long int
#define FOR(I,A,B) for(int I= (A); I<(B); ++I)
#define all(c) c.begin(), c.end()
#define stop system("pause")
#define pb push_back
#define mp make_pair
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)


struct point{
    int x;
    int y;
};
int calc( point* points, int n){
    int max, temp;
    max=1;
    if(n==1)
        return 0;
    FOR(i,0,n){
        float slopes[n-i-1];
        int k=0;
        FOR(j,i+1,n){
            slopes[k]=double(points[j].y-points[i].y)/(points[j].x-points[i].x);
            k++;
        }
        sort(slopes,slopes+n-i-1);
        int temp=1;
        FOR(j,0,n-i-1){ //one less to incorpate the j++ thing
            if(slopes[j]==slopes[j+1])
                temp++;
            else{
                if(temp>max)
                    max=temp;
                temp=1;
            }
        }
    }
    return max+1;
}
int main(){
    int t;
    S(t);
    while(t--){
        int n;
        S(n);
        point points[n];
        FOR(i,0,n){
            S(points[i].x);
            S(points[i].y);
        }
        int result = calc(points,n);
        P(result);
        NL;
    }
    //stop;
    return 0;
}
                
            
