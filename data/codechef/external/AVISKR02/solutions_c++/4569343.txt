/*Matrix Exponentiation
 Fibonacci Series 
 F(1)^2 +F(2)^2+...+F(n)^2 = F(2n)*F2n+1)
 F(2n-1) = F(n-1)^2+F(n)^2
*/ 
#include<iostream>
#include<cstdio>
#define MOD 1000000007
#define ULL unsigned long long
using namespace std;

//Repeated squaring method Calc mtrx power
ULL mat_power(ULL num)
{
    ULL temp[2][2]={{1,1},{1,0}};
    ULL mat[2][2]={{1,0},{0,1}};
    ULL a,b,c,d;
    while(num>0)
    {
    	if(num&1==1)
    	{
    		a=(mat[0][0]*temp[0][0])%MOD+(mat[0][1]*temp[1][0])%MOD;
    		b=(mat[0][0]*temp[0][1])%MOD+(mat[0][1]*temp[1][1])%MOD;
    		c=(mat[1][0]*temp[0][0])%MOD+(mat[1][1]*temp[1][0])%MOD;
    		d=(mat[1][0]*temp[0][1])%MOD+(mat[1][1]*temp[1][1])%MOD;
    		
			mat[0][0]=a%MOD;
    		mat[0][1]=b%MOD;
    		mat[1][0]=c%MOD;
    		mat[1][1]=d%MOD;
    	}
    	
		a=(temp[0][0]*temp[0][0])%MOD+(temp[0][1]*temp[1][0])%MOD;
    	b=(temp[0][0]*temp[0][1])%MOD+(temp[0][1]*temp[1][1])%MOD;
    	c=(temp[1][0]*temp[0][0])%MOD+(temp[1][1]*temp[1][0])%MOD;
    	d=(temp[1][0]*temp[0][1])%MOD+(temp[1][1]*temp[1][1])%MOD;
    	
		temp[0][0]=a%MOD;
    	temp[0][1]=b%MOD;
    	temp[1][0]=c%MOD;
    	temp[1][1]=d%MOD;
    	
		num>>=1;
    }
    return ((mat[0][0]%MOD)*(mat[0][1]%MOD))%MOD;
    }
int main()
{
    int t;
    ULL n;
    scanf("%d",&t);
    while(t--)
    {
    	scanf("%llu",&n);
    	printf("%llu\n",mat_power(n<<1));
    }
    return 0;
} 