
Problem description.
A war ensues between the forces of Superman's regime and Batman's insurgency. In order to take down Batman, Superman chooses exactly K number of Justice League members among N fellow regime. He can't choose less than K since it will be not enough to defeat a formidable enemy like Batman that easily. On the other hand if he chooses more than K , he cannot control them during the operation.  
Help Superman to find the number of ways he can choose the team to complete this very important mission. 

Input

The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow.
Each test case contains contains two integers N and K.



Rules

Bugs will be mainly logical errors, including overflow issues. It will not be syntax-oriented or language-specific.
Since, it is an debugging contest, you will be provided a bugged solution below the Constraints section.Please, see that you must adhere to the problem code provided, make changes only where necessary.

Online participants can copy the code and compile it using an online compiler (Eg. codechef.com/ide).

Onsite participants will be provided Codeblocks with gcc compiler, since NO internet access other than CodeChef website will be provided.

Once the bugs are eliminated from the code, the clean code should be submitted by using the "Submit" button on the top-right corner.

Participants will be penalised for changing the entire problem solution or writing their own solution,completely different from the buggy code as provided in the problem statement as our main intention is to test the debugging abilities of the participants.


 

Output
 For each test case, output a single line containing the number of ways to choose the required team.
It is guaranteed that the answer will be less than 2^64.


Constraints

   1<= T <= 100  
0 <= N, K < 1000

 

Example
Input:
3
2 1
3 3
10 5

Output:
2
1
252
 

Buggy code in C:

#include < stdio.h >
#include < stdlib.h >

typedef unsigned long long ULL;

ULL gcd(ULL a,ULL b){
  ULL c;
  while(b>0) c=a%b, a=b, b=c;
  return a;
}

ULL bin(ULL n,ULL k){
  if(n
