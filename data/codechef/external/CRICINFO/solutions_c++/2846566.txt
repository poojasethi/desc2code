						/*////////////////////////////////////////////////*/
						/* 				 code by d@rk$(@!e   			  */
						/*////////////////////////////////////////////////*/
#include <algorithm>
#include <assert.h>
#include <fstream>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <cctype>
#include <climits>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <cstring>

using namespace std;
#define CLR(a) memset(a, 0, sizeof(a))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define SZ(V) (int )V.size()
#define ALL(V) V.begin(), V.end()
#define RALL(V) V.rbegin(), V.rend()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define si(n) scanf("%d",&n)
#define ss(s) scanf("%s",s)
#define prin(n) printf("%d\n",n)
#define pll pair < long long int, long long int >
#define pii pair < int, int >
#define psi pair < string, int >
#define PB push_back  
#define MP make_pair
#define F first
#define S second
#define MOD 1000000007LL

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef long long LL;
LL dp[10005][10];

LL getval(LL n,LL b){
	if(b<0)
		return 0;
	if(n<=0 || b==0)
		return 1;
	if(dp[n][b]!=-1)
		return dp[n][b];
	dp[n][b]=0;
	dp[n][b]+=1+2*getval(n,b-1);
	dp[n][b]+=getval(n-1,b-1);
	dp[n][b]+=getval(n-2,b-1);
	dp[n][b]+=getval(n-3,b-1);
	dp[n][b]+=getval(n-4,b-1);
	dp[n][b]+=getval(n-6,b-1);
	dp[n][b]+=2*getval(n-1,b);
	dp[n][b]+=2*getval(n-2,b);
	dp[n][b]+=getval(n-3,b);
	dp[n][b]+=2*getval(n-5,b);
	dp[n][b]+=getval(n-7,b);
	dp[n][b]%=10000007;
	return dp[n][b];
}


int main()
{
	LL i,j,k,test,t;
	FORN(i,10001)
		FORN(j,10)
			dp[i][j]=-1;
	cin >> test;
	FORAB(t,1,test){
		LL n;
		cin >> n;
		cout << "Case " << t << ": ";
		cout << getval(n,6) << endl;
	}
	return 0;
}