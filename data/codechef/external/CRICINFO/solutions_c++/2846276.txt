#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <deque>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <climits>

using namespace std;

#define FOR(i,a,b)                              for (i=a;i<b;i++)
#define FORL(i,size)                            for (i=0;i<size;i++)
#define FORR(i,size)                            for (i=size-1;i>=0;i--)
#define s(n)                                    scanf("%d",&n)
#define p(n)                                    printf("%d\n",n)
#define ps(n)                                   printf("%s\n",n)
#define sd(n)                                   int n;scanf("%d",&n)
#define pb(n)                                   push_back(n)
#define clr(a)                                  memset(a,0,sizeof(a))
#define all(c)                                  (c).begin(),(c).end()
#define mp(a,b)                                 make_pair(a,b)
#define PI 3.14159265
#define MODI 10000007

typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vst;
typedef vector <bool> vb;
typedef long long ll;
typedef pair <int, int> pii;
int i, j, k;
int DP[7][10001];

int main() {

    int T = 1;
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    //T = g_fi.ReadNext();
    int runs[]={0,1,2,3,4,6,1,2,3,5,1,2,5,7,0};
    int v[]={1,1,1,1,1,1,0,0,0,0,0,0,0,0,1};
    cin>>T;
    FOR(j,0,10001)
    {
        DP[0][j]=1;
    }
    FOR(i,1,7)
    DP[i][0]=1;
    FOR(i,1,7)
    {
        FOR(j,1,10001)
        {
            int ans=0;
            FOR(k,0,14)
            {
                if(runs[k]>=j)
                {
                    ans+=1;
                }
                else
                {
                    ans+=DP[i-v[k]][j-runs[k]];
                }
            }
            ans+=1;
            //if(i>1)
            ans+=DP[i-1][j];
            DP[i][j]=ans%MODI;
        }
    }
    FOR(k, 0, T) {
        sd(n);
        cout<<"Case "<<k+1<<": "<<DP[6][n]<<endl;;
    }
    return 0;
}