/*
Ashutosh Singla <ashu1461@gmail.com>
Algorithm:
#tags:
date: Fri Oct 18 16:52:59 IST 2013
*/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<algorithm>

using namespace std;
typedef vector<int> vi; 
typedef pair<int,int> ii;
typedef long long LL;
#define FL(a) memset(a, 0, sizeof a);
#define fill(a,v,N) memset(a, v, sizeof(a[0])*N)
#define sz(a) int((a).size()) 
#define pb push_back 
#define si(n) scanf("%d",&n)
#define sin(n) scanf("%d\n",&n) // for scanning strings ..
#define sill(n) scanf("%lld",&n)
#define pi(n) printf("%d\n",n);
#define pill(n) printf("%lld\n",n);
#define pis(n) printf("%d ",n);

#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())  // map and set find .. 
#define cpresent(c,x) (find(all(c),x) != (c).end())  // stl find ..
#define FREP(b) for(int i=0;i<b;i++)
#define FREPr(b) for(int i=b-1;i>=0;i--)
#define REP(a,b,c) for(int a=b;a<c;a++)
#define REPr(a,b,c) for(int a=b;a>b;a--)
#define mp(a,b) make_pair(a,b);
#define MAX_S 100007

#define MOD 10000007
/*
struct data{
};
bool operator < (const data &a1, const data &a2){
}
*/
int out[15] = {0,1,2,3,4,6,1,2,3,5,1,2,5,7,0};
int bal[15] = {1,1,1,1,1,1,0,0,0,0,0,0,0,0,1};
int dp[10002][8]; // run * wicket * balls
int N;
int counter;
LL temp;
int compute(int run, int balls){
   // given  dp[N][x]  calculate other possibilites.
    if(run < 0) run = 0;
    if(dp[run][balls]) return dp[run][balls];
    if(!balls || !run ){
        dp[run][balls] = 1;
        return 1;
    }
    FREP(15){
        temp = compute(run - out[i], balls - bal[i]);
        dp[run][balls] += temp;
        dp[run][balls] %= MOD;
    }
    dp[run][balls] ++;
    return dp[run][balls];
}
int main()
{
    int test;
    si(test);
    int ans;
    FL(dp);
    FREP(test){
        ans = 0;
        si(N);
        ans += compute(N, 6);
        printf("Case %d: %d\n", i+1, ans);
    }
    return 0;
}

