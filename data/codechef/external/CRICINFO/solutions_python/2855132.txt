#include<bits/stdc++.h>
using namespace std;

long long dp[10002][7];
int visited[10002][7];
long long recurse(int n,int k,int wicket)
{
    long long ans=0;
    if(n<=0)return 1;
    if(k==0&&wicket)return 2;
    if(wicket)ans++;
    if(k==0)return 1;
    if(visited[n][k])return ans+dp[n][k];
    ans+=recurse(n,k-1,0);
    if(ans>=10000007)ans%=10000007;
    //dot
    //runs 1 to 6
    ans+=recurse(n-1,k-1,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-2,k-1,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-3,k-1,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-4,k-1,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-6,k-1,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n,k-1,1);  //wicket
    if(ans>=10000007)ans%=10000007;
    //wide
    ans+=recurse(n-1,k,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-2,k,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-3,k,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-5,k,0);
    if(ans>=10000007)ans%=10000007;
    //no ball
    ans+=recurse(n-1,k,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-2,k,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-5,k,0);
    if(ans>=10000007)ans%=10000007;
    ans+=recurse(n-7,k,0);
    if(ans>=10000007)ans%=10000007;
    dp[n][k]=ans;
    visited[n][k]=1;
    return ans;
}
int main()
{
    int n,t,test=1;
    cin>>t;
    memset(visited,0,sizeof(visited));
    while(t--)
    {
    cin>>n;
    cout<<"Case "<<test++<<": "<<recurse(n,6,0)<<endl;
    }
    cin>>n;
    return 0;
}
