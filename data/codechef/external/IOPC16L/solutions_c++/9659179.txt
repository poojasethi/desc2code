//Author:Hena Firdaus
//USING DYNAMIC PROGRAMMING :) 
#include <bits/stdc++.h>
using namespace std;
int n,f[100005][2],vis[100005];
vector<int>adj[100005];

int dp[100005][2];
int vc[100005];
int fun(int u)
{
  vis[u]=1;
  if(vc[u]!=-1)
    return vc[u];
  dp[u][0]=0;
  dp[u][1]=1;
  for(int i=0;i<adj[u].size();i++)
  {
    int v=adj[u][i];
    if(!vis[v])
    { int ff=fun(v);
    
    dp[u][0]+=dp[v][1];
    dp[u][1]+=ff;}
  }
  return vc[u]=min(dp[u][0],dp[u][1]);
//cout<<"u:"<<u<<" dp[u][0]:"<<dp[u][0]<<" dp[u][1]:"<<dp[u][1]<<endl;
}

int main()
{
	int m,a,b,k;
	scanf("%d%d%d",&n,&m,&k);
	while(m--)
	{
		scanf("%d%d",&a,&b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
  memset(dp,0,sizeof(dp));
  
  int mxdeg=0,root;
  for(int i=1;i<=n;i++)
  {
    if(adj[i].size()>mxdeg)
    {
      mxdeg=adj[i].size();
      root=i;
    }
  }
  int vv=INT_MAX;
		/*for(int i=1;i<=n;i++)
    {
      memset(vis,0,sizeof(vis));
      memset(vc,-1,sizeof(vc));
      
      
      //fun(i);
      
      vv=min(vv,fun(i));
      
    }*/
      memset(vis,0,sizeof(vis));
      memset(vc,-1,sizeof(vc));
     vv=fun(root); 
      //cout<<vv<<endl;
		if(vv< k)
			printf("Case 1\n");
		else
			
				printf("Case 2\n");
	
	return 0;
}