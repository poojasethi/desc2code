#include<cstdio>
#include<cmath>
#include<cstdlib>
#define MAX 1000005
#define IND 78499

int arr[MAX],prime[IND];
inline void sieve()
{
long long int i,j;
for(i=4;i<MAX;i+=2)
arr[i]=1;

for(i=3;i<MAX;i+=2)
for(j=i;j*i<MAX;j+=2)
arr[i*j]=1;

int k=0;
prime[k++]=2;
for(i=3;i<MAX;i+=2)
if(!arr[i])
prime[k++]=i;
}
typedef long long int i64;
/*
inline i64 mulmod(i64 a,i64 b,i64 mod)
{
  i64 x=0,y=a%mod;
  while(b)
  {
  if(b%2)
  x=(x+y)%mod;
  y=(y*2)%mod;
  b>>=1;
}
return x%mod;
}

inline i64 modexp(i64 a,i64 b,i64 mod)
{
i64 x=1;
while(b)
{
        if(b%2)
        x=mulmod(x,a,mod);
        a=mulmod(a,a,mod);
        b>>=1;
        }
        return x%mod;
}
        
inline bool miller_rabbin(i64 p)
{
if(p==2)
return true;

if(p%2==0 || p<2)
return false;

i64 s=p-1,temp,mod,a;
while(s%2==0)
s/=2;

for(int it=0;it<4;++it)
{
a=(rand()%(p-1))+1;
temp=s;
mod=modexp(a,temp,p);
while(temp!=p-1 && mod!=1 && mod!=p-1)
{
mod=mulmod(mod,mod,p);
temp*=2;
}
if(mod!=p-1 && (temp%2==0))
return false;
}
return true;
}
*/

inline bool bin_search(i64 val)
{
int mid,low=0,high=IND-1;
while(low<=high)
{
mid=low+(high-low)/2;
if(prime[mid]==val)
return true;
if(val>prime[mid])
low=mid+1;
else
high=mid-1;
}
return false;
}

int main()
{
sieve();
int tt;
i64 n;
double sq;
scanf("%d",&tt);
while(tt--)
{
scanf("%lld",&n);
    sq=sqrt(n);
    if((sq-int(sq)==0.0) && bin_search(i64(sq)))
    printf("YES\n");
    else
    printf("NO\n");
}
return 0;
}


