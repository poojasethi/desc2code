#include <bits/stdc++.h>
using namespace std;
#define MAX 100005
#define LOG 17
typedef long long LL;

vector<int> g[MAX];
int L[MAX],R[MAX],AC[MAX];
int H[MAX],N,tym = -1;
int P[MAX][LOG+1];

LL seg[3*MAX],lazy[3*MAX][2];
#define LT (node << 1)
#define RT ((node << 1) + 1)
#define MID ((l+r) >> 1)

void pushdown(int node,int l,int r){
	if (lazy[node][0] != 0 || lazy[node][1] != 0){
		if (l == r)
			seg[node] += ((lazy[node][0]*H[AC[l]]) - lazy[node][1]);
		else {
			lazy[LT][0] += lazy[node][0], lazy[LT][1] += lazy[node][1];
			lazy[RT][0] += lazy[node][0], lazy[RT][1] += lazy[node][1];
		}

		lazy[node][0] = lazy[node][1] = 0;
		return;
	}
}
void update(int node,int l,int r,int a,int b,LL val,LL sub){
	pushdown(node,l,r);
	if (l > b || r < a) return;
	if (l >= a && r <= b){
		lazy[node][0] += val, lazy[node][1] += sub;
		pushdown(node,l,r);
		return;
	}
	update(LT,l,MID,a,b,val,sub);
	update(RT,MID+1,r,a,b,val,sub);
}

LL query(LL node,LL l,LL r,LL id){
	pushdown(node,l,r);
	if (l == r)
		return seg[node];
	if (MID >= id)
		return query(LT,l,MID,id);
	return query(RT,MID+1,r,id);
}

void UP(int a,LL v){
    update(1,0,N-1,L[a],R[a],v,v*(H[a]-1));
}

LL QU(int a){
    LL res = query(1,0,N-1,L[a]);
    return res;
}

void dfs(int idx,int p,int h){
    ++tym;
    L[idx] = R[idx] = tym;
    AC[tym] = idx;
    P[idx][0] = p;
    H[idx] = h;

    for(int i = 0; i < g[idx].size(); ++i){
        int x = g[idx][i];
        if (x == p) continue;
        dfs(x,idx,h+1);
        R[idx] = tym;
    }
}

void LCA(){
    for(int k = 1; (1 << k) < N; ++k)
        for(int i = 1; i <= N; ++i)
            if (P[i][k-1] != -1) P[i][k] = P[P[i][k-1]][k-1];
}

int LCA(int x,int y){
    if (H[x] < H[y]) swap(x,y);
    for(int i = LOG; i >= 0; --i)
        if ((H[x]-(1 << i)) >= H[y]) x = P[x][i];

    if (x == y) return x;
    for(int i = LOG; i >= 0; --i)
        if (P[x][i] != -1 && P[x][i] != P[y][i]) x = P[x][i], y = P[y][i];
    return P[x][0];
}

void solve(){
    memset(P,-1,sizeof(P));
    int q,root,a,b;
    char ch;

    cin >> N >> q >> root;
    for(int i = 0; i < N-1; ++i){
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }

    dfs(root,-1,1);
    LCA();
    while(q--){
        cin >> ch >> a >> b;
        if (ch == 'U')
            UP(a,(LL)b);
        else {
            int cm = LCA(a,b);
            LL d1 = QU(a), d2 = QU(b), d3 = QU(cm);
            LL res = d1+d2-d3;
            if (cm != root) res -= QU(P[cm][0]);
            cout << res << endl;
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    solve();
    return 0;
}
