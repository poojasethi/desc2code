#include <bits/stdc++.h>
using namespace std;
#define MAX 100005
#define LOG 17
typedef long long LL;

vector<int> g[MAX];
int L[MAX],R[MAX],AC[MAX];
int H[MAX],N,tym = 0;
int P[MAX][LOG+1];

LL tree[MAX][2];
void update(int idx,LL val,int chk){
    for(; idx < MAX; idx += idx & -idx)
        tree[idx][chk] += val;
}

LL query(int idx,int chk){
    LL sum = 0;
    for(; idx > 0; idx -= idx & -idx)
        sum += tree[idx][chk];
    return sum;
}

void UP(int idx,LL val){
    update(L[idx],val,0);
    update(R[idx]+1,-val,0);

    val = val*(H[idx]-1);
    update(L[idx],val,1);
    update(R[idx]+1,-val,1);
}

LL QU(int idx){
    LL mul = query(L[idx],0);
    LL sub = query(L[idx],1);

    LL res = mul*(H[idx]);
    res -= sub;
    return res;
}

void dfs(int idx,int p,int h){
    ++tym;
    L[idx] = R[idx] = tym;
    AC[tym] = idx;
    P[idx][0] = p;
    H[idx] = h;

    for(int i = 0; i < g[idx].size(); ++i){
        int x = g[idx][i];
        if (x == p) continue;
        dfs(x,idx,h+1);
        R[idx] = tym;
    }
}

void LCA(){
    for(int k = 1; (1 << k) < N; ++k)
        for(int i = 1; i <= N; ++i)
            if (P[i][k-1] != -1) P[i][k] = P[P[i][k-1]][k-1];
}

int LCA(int x,int y){
    if (H[x] < H[y]) swap(x,y);
    for(int i = LOG; i >= 0; --i)
        if ((H[x]-(1 << i)) >= H[y]) x = P[x][i];

    if (x == y) return x;
    for(int i = LOG; i >= 0; --i)
        if (P[x][i] != -1 && P[x][i] != P[y][i]) x = P[x][i], y = P[y][i];
    return P[x][0];
}

void solve(){
    memset(P,-1,sizeof(P));
    int q,root,a,b;
    char ch;

    cin >> N >> q >> root;
    for(int i = 0; i < N-1; ++i){
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }

    dfs(root,-1,1);
    LCA();
    while(q--){
        cin >> ch >> a >> b;
        if (ch == 'U')
            UP(a,(LL)b);
        else {
            int cm = LCA(a,b);
            LL d1 = QU(a), d2 = QU(b), d3 = QU(cm);
            LL res = d1+d2-d3;
            if (cm != root) res -= QU(P[cm][0]);
            cout << res << endl;
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    solve();
    return 0;
}
