#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define REP(i, n) for(int i=0;i<n;i++)
#define ll long long
ll m;

ll cur[2][2];
ll mat[2][2];

void matmul(ll p[][2], ll q[][2])
{
	ll c[2][2];
	REP(i, 2)
		REP(j, 2)
		{
			c[i][j] = 0;
			REP(k, 2)
				c[i][j] += (p[i][k]*q[k][j]+m)%m;
		}
	REP(i, 2)
		REP(j, 2)
			p[i][j] = (c[i][j] + m)%m;
}

void raise(ll exp)
{
	ll mov[2][2];
	mov[0][0] = mat[0][0]; mov[0][1] = mat[0][1];
	mov[1][0] = mat[1][0]; mov[1][1] = mat[1][1];
	if( exp == 1 )
		return;
	mat[0][0] = mat[1][1] = 1;
	mat[0][1] = mat[1][0] = 0;
	while( exp )
	{
		if(exp%2 == 1 )
			matmul(mat, mov);
		matmul(mov, mov);
		exp /= 2;
	}
}

void update()
{
	matmul(cur, mat);
}

int main()
{
	int t;
	cin>>t;
	int primes[100005];
	REP(i, 100005)
		primes[i] = 1;
	primes[0] = primes[1] = 0;
	for( int i=2;i<100005;i++)
	{
		if( primes[i] == 0 )
			continue;
		for( int j=2*i;j<100005;j+=i)
			primes[j] = 0;
	}
	while( t-- )
	{
		ll n, r;
		cin>>n>>r>>m;
		if( m == 1 || n < r)
		{
			cout<<0<<endl;
			continue;
		}
		ll factors[n+1];
		REP(i, n+1)
			factors[i] = 0;
		for( int i=2;i<=n;i++)
		{
			if( primes[i] == 0 )
				continue;
			for( ll j=i;j<=n;j *= i )
				factors[i] += n/j;
		}
		for( int i=2;i<=r;i++)
		{
			if( primes[i] == 0 )
				continue;
			for( ll j=i;j<=r;j *= i )
				factors[i] -= r/j;
		}
		for( int i=2;i<=n-r;i++)
		{
			if( primes[i] == 0 )
				continue;
			for( ll j=i;j<=n-r;j *= i )
				factors[i] -= (n-r)/j;
		}
		//cur[0][0] = 1; cur[1][1] = 1;
		//cur[1][0] = cur[0][1] = 0;
		mat[0][0] = 1; mat[0][1] = 1;
		mat[1][0] = 1; mat[1][1] = 0;

		REP(i, n+1)
		{
			if( primes[i] == 0 || factors[i] <= 0 )
				continue;
		//	cout<<i<<" "<<factors[i]<<endl;
			REP(j, factors[i])
				raise(i);
		//	cout<<mat[0][0]<<endl;
	//		raise(factors[i]);
		}
		//if( mat[1][0] == 0 )
		//	mat[1][0] = 1;
		cout<<mat[1][0]<<endl;
	}
	return 0;
}




	


