#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
#define f first
#define sc second
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * (b / gcd(a, b))); }
const int maxn=100005;
vector<int> prime;
bool chk[maxn];
void solve()
{
    prime.push_back(2);
    for(int i=3;i<=sqrt(maxn);i+=2){
        if(!chk[i]){
            for(int j=i*i;j<=maxn;j+=2*i)
                chk[j]=true;
        }
    }
    for(int i=3;i<=maxn;i+=2){
        if(!chk[i])
            prime.push_back(i);
    }
}
int fun(int n,int k)
{
    int ans=0;
    while(n){
        n/=k;
        ans+=n;
    }
    return ans;
}
void multiply(LL F[2][2], LL M[2][2],LL m){
LL x = (F[0][0]*M[0][0] + F[0][1]*M[1][0])%m;
LL y = (F[0][0]*M[0][1] + F[0][1]*M[1][1])%m;
LL z = (F[1][0]*M[0][0] + F[1][1]*M[1][0])%m;
LL w = (F[1][0]*M[0][1] + F[1][1]*M[1][1])%m;
F[0][0] = x;
F[0][1] = y;
F[1][0] = z;
F[1][1] = w;
return;
}
void power(LL F[2][2],LL n,LL m)
{
    LL M[2][2]={{1,0},{0,1}};
    while(n>0){
        if(n&1)
            multiply(M,F,m);
        multiply(F,F,m);
        n/=2;
    }
    F[0][0]=M[0][0];
    F[0][1]=M[0][1];
    F[1][0]=M[1][0];
    F[1][1]=M[1][1];
}
int main()
{
    solve();
    int sz=prime.size();
    int t;
    scanf("%d",&t);
    while(t--){
        int n,r,mod;
        scanf("%d %d %d",&n,&r,&mod);
        vector<int> ar;
        ar.resize(sz);
        LL ans[2][2]={{1,1},{1,0}};
        for(int i=0;i<sz;i++){
            ar[i]=fun(n,prime[i])-fun(r,prime[i])-fun(n-r,prime[i]);
        }
        for(int i=0;i<sz;i++){
            while(ar[i]--){
                power(ans,prime[i],mod);
            }
        }
        printf("%lld\n",ans[0][1]);
    }
    return 0;
}

