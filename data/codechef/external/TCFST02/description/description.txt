 
Lets say one fine day, you decide to impress your Love, by gifting her a necklace of some of the most exquisite beads available in the world - each one different from the other. Lets say each bead is numbered from 1 to n. You are initially given the beads woven into the necklace in the order 1,2 ….n. That is the ith bead lies to the left of the (i-1)th bead.
Obviously, you are not as creative to choose the best possible relative positioning of the beads so as to make a limited edition collection. So you take the help of your friend who hands you a permutation scheme that would create a world class piece of jewellery. The permutation can be described by b1,b2…..bn which would mean that the b(i)th bead should lie on the left of the b(i-1)th bead.
Now to reorder the beads, you need to choose which direction to move a particular bead (right or left) and how many positions should it be moved to reach its desired position. Let us define K as the sum total of distance moved by each bead in the process of reaching its destination. You need to minimise K. In the re-ordering process, all the beads are simultaneously isolated from the necklace.
Necklace cannot be flipped.
 

Input
First line contains one integer n. 
The second line consists n integers b1, b2, b3, b4 .... bn from a permutation of set {1,2......n} describing the desired order of the beads.
 

Output
Output should consists of only one integer k.

Constraints
1 ≤ n ≤ 50000
 

Example
Input:
4
4 2 3 1
Output:
2

Input:
4
4 1 2 3
Output:
0
 
