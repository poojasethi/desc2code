#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int > pii;
typedef pair<int,pii > piii;
typedef vector<int>     VI;
//input
#define sc1(x) scanf("%d",&x);
#define sc2(x,y) scanf("%d%d",&x,&y);
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z);

/*
#define sc1(x) scanf("%lld",&x);
#define sc2(x,y) scanf("%lld%lld",&x,&y);
#define sc3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z);
*/

#define pb push_back
#define mp make_pair
#define ini(x,val) memset(x,val,sizeof(x));

#define fs first
#define sc second

//some constants
#define MOD 1000000007
#define inf 99999999
#define linf 99999999999999999ll	//long long inf
#define PI 3.1415926535897932384626
const double eps=0.000000000000001 ;

#define gcd __gcd
#define tr(container, it)  for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define PrintCont(cont) {printf("\n----------------\n");\
for(typeof(cont.begin()) it = cont.begin();it!=cont.end();++it) cout<<*it<<" ";printf("\n----------------\n");}
#define all(v) v.begin(),v.end()
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define debug(x) cout<<#x<<" :: "<<x<<"\n";
#define debug2(x,y) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\n";
#define debug3(x,y,z) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\t"<<#z<<" :: "<<z<<"\n";

#define LIM 1105
int pfactors[LIM],bigfactor[LIM],sv[LIM],hsh[LIM];
vector<int>prime;
void sieve()
{
	sv[0]=sv[1]=1;
	for(int i=2;i*i<LIM;++i)
	{
		if(sv[i]==0)
		for(int j=i*i;j<LIM;j+=i)
			sv[j]=1;
	}
	int c=0;
	for(int i=2;i<LIM;++i)
		if(sv[i]==0)
		{	prime.pb(i);hsh[i]=c++;}
//	debug(hsh[31]);
}
void precompute()
{
	int i,j;
	for(i=1;i<LIM;++i)bigfactor[i]=1;
	for(i=1;i<LIM;++i)
	{
		int temp = i,c=0;
		for(j=prime[0];j*j<=temp;j=prime[++c])
		{
			while(temp%j==0)
			{
				temp/=j;pfactors[i]|=(1<<hsh[j]);
			}
		}
		if(temp>1)
		{
			if(temp<=31){pfactors[i]|=(1<<hsh[temp]);}
			else {bigfactor[i]=temp;}
		}
	}
	//for(i=1;i<=5;++i)printf("i :: %d  mask :: %d\n",i,pfactors[i]);
}
vector<int>v;
int nxt[LIM],dp[LIM][2048+20];
bool cmp(int x,int y)
{
	if(bigfactor[x]<bigfactor[y])return 1;return 0;
	//return (bigfactor[x]<=bigfactor[y]);
}
int solve(int ind,int mask)
{
	assert(mask<=2048);
	if(ind >= v.size())return 0;
	int &ans = dp[ind][mask];
	if(ans!=-1)return ans;
	ans = solve(ind+1,mask);
	if(!(mask&pfactors[v[ind]]))
	{
		if(bigfactor[v[ind]]==1)
			ans = max(ans,1+solve(ind+1,mask|pfactors[v[ind]]));
		else
			ans = max(ans,1+solve(nxt[bigfactor[v[ind]]],mask|pfactors[v[ind]]));
	}	
	return ans;
}
int main(int argc, char const *argv[])
{
	sieve();precompute();
	
	int t;
	sc1(t);

	while(t--)
	{
		ini(nxt,0);
		v.clear();
		int i,j,n;

		sc1(n);
		for(i=0;i<=n;++i)
		{
			for(j=0;j<=2048;++j)
				dp[i][j]=-1;
		}

		for(i=0;i<n;++i)
		{
			int x;sc1(x);
			v.pb(x);
		}
		/*for(i=0;i<n;++i)
		{
			printf("%d ",bigfactor[v[i]]);
		}*/
		sort(all(v),cmp);
		//return 0;
		for(i=0;i<n;++i)
		{
			nxt[bigfactor[v[i]]]=i+1;
		}


		printf("%d\n",solve(0,0));
	}
	
	return 0;
}