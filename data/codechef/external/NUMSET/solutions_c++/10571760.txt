#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
int dp[30000]={0},xtra[1005],mask[1005],a[]={2,3,5,7,11,13,17,19,23,29,31};
#define pp pair<int,int>
#define ppp pair<pp,int>
vector<int> G[1005];
int main()
{
    int t,i,j,l=0;
    scanf("%d",&t);
    for(i=1;i<=1000;i++)
    {
        int temp=i;
        for(j=0;j<11;j++)
        {
            while(temp%a[j]==0)
            {
                mask[i]|=(1<<j);
                temp/=a[j];
            }
        }
        xtra[i]=temp;
    }
    while(t--)
    {
        int n,arr[1005],i,j,ans=0,val=0;
        scanf("%d",&n);
        for(i=0;i<n;i++)
        {
            //printf("i=%d\n",i);
            scanf("%d",&arr[i]);
            if(arr[i]==1)
            {
            	val++;
            	continue;
            }
            if(xtra[arr[i]]>1)
                G[xtra[arr[i]]].push_back(mask[arr[i]]);
            else
            {
            	//printf("i=%d\n",i);
                for(j=0;j<2048;j++)
                {
                    //printf("j=%d\n",j);
                    int m=mask[arr[i]];
                    if((m&j)==0)
                    {
                        dp[m|j]=max(dp[m|j],dp[j]+1);
                    }
                    ans=max(ans,dp[j]);
                }
            }
        }
        for(i=2;i<=1000;i++)
        {
            if(G[i].empty())
                continue;
            int si=G[i].size(),temp[3000]={0},k;
            for(k=0;k<si;k++)
            {
                int v=G[i][k];
                for(j=0;j<2048;j++)
                {
                    if((v&j)==0)
                    {
                        temp[v|j]=max(temp[v|j],dp[j]+1);
                    }
                }
            }
            for(j=0;j<2048;j++)
            {
                dp[j]=max(dp[j],temp[j]);
                ans=max(ans,dp[j]);
            }
            G[i].clear();
        }
        //printf("val=%d ans=%d\n",val,ans);
        printf("%d\n",ans+val);
        for(j=0;j<2048;j++)
        	dp[j]=0;
    }
    return 0;
}
