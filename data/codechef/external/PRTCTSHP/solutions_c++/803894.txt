/*
    Aleksandar "Al3kSaNdaR" Ivanovic

    PRTCTSHP
*/
#include <cstdio>
#include <algorithm>
#include <cmath>

using namespace std;

typedef struct Point
{
    double X, Y;

    Point ( ) { };

    Point ( double _X, double _Y )
    {
        X = _X;
        Y = _Y;
    }

    inline bool operator < ( const Point &NewPoint ) const
    {
        return ( ( X < NewPoint.X ) || ( ( X == NewPoint.X ) && ( Y < NewPoint.Y ) ) );
    }
};

inline bool LeftTurn ( const Point &P1, const Point &P2, const Point &P3 )
{
    return ( ( ( P2.X - P1.X ) * ( P3.Y - P2.Y ) - ( P3.X - P2.X ) * ( P2.Y - P1.Y ) ) <= 0 );
}

inline void MakeHull ( const int &N, Point Points [ ], int &HullSize, Point Hull [ ] )
{
    sort ( Points, Points + N );

    int idx = 0;

    Hull[idx++] = Points[0];
    Hull[idx++] = Points[1];

    for ( int i = 2; i < N; i++ )
    {
        while ( ( idx >= 2 ) && ( LeftTurn ( Hull[idx - 2], Hull[idx - 1], Points[i] ) ) ) idx--;

        Hull[idx++] = Points[i];
    }

    int idy = idx + 1;

    for ( int i = N - 2; i >= 0; i-- )
    {
        while ( ( idx >= idy ) && ( LeftTurn ( Hull[idx - 2], Hull[idx - 1], Points[i] ) ) ) idx--;

        Hull[idx++] = Points[i];
    }

    HullSize = idx;
}

inline double FindDist ( const Point &P1, const Point &P2 )
{
    return sqrt ( ( P2.X - P1.X ) * ( P2.X - P1.X ) + ( P2.Y - P1.Y ) * ( P2.Y - P1.Y ) );
}

int main ( void )
{
    int N;

    scanf ( "%d", &N );

    Point Points[4 * N], Hull[8 * N];

    int Cnt = 0;

    for ( int i = 0; i < N; i++ )
    {
        double X, Y;

        scanf ( "%lf %lf", &X, &Y );

        Points[Cnt++] = Point ( X - 1.00, Y - 1.00 );
        Points[Cnt++] = Point ( X - 1.00, Y + 1.00 );
        Points[Cnt++] = Point ( X + 1.00, Y - 1.00 );
        Points[Cnt++] = Point ( X + 1.00, Y + 1.00 );
    }

    int HullSize = 0;

    MakeHull ( Cnt, Points, HullSize, Hull );

    double Dist = 0;

    for ( int i = 0; i < HullSize; i++ ) Dist += FindDist ( Hull[i], Hull[ ( i + 1 ) % HullSize ] );

    printf ( "%.8lf\n", Dist );

    return 0;
}
