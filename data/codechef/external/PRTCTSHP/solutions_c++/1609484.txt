#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <queue>
 
using namespace std;
 
#define rep(i,a,b) for(typeof(a) i=(a);i<(b);i++)
#define ll long long int
#define ii pair<int,int>
#define Clear(x,val) memset(x,val,sizeof(x))
#define SZ(v) (v).size()
#define pb push_back
#define INF 1e9 

vector<double> vx;
vector<double> vy;
 
double cross( int p , int i , int n ) {
	double x1 = vx[i]-vx[p];
	double x2 = vx[n]-vx[p];
	double y1 = vy[i]-vy[p];
	double y2 = vy[n]-vy[p];	
	return (x1*y2-y1*x2);
}
double dot( int p , int i , int n  ) {
	double x1 = vx[i]-vx[p];
        double x2 = vx[n]-vx[p];
        double y1 = vy[i]-vy[p];
        double y2 = vy[n]-vy[p];
	return (x1*x2+y1*y2);
}
double convexHull( int N , bool onEdge ) {
	int p = 0;double ret = 0.0;
	bool used[N+5];Clear( used , 0 );
	rep( i , 0 , N  ) {
		if( vx[i] < vx[p] ) p = i;
		else if( (vx[i]==vx[p]) && (vy[i]>vy[p]) ) p = i;
	}
	int start = p;
	do {
		int n = -1;
		double dist = onEdge?INF:0;
		for( int i = 0; i < N; i++ ) {
			if( i == p ) continue;
			if( used[i] ) continue;
			if( n == -1 ) n = i;
			double cros = cross( p , i , n );
			double dott = dot( p , i , n );
			if( cros < 0 ) {	
				n = i;dist = dott;
			}
			else if( cros == 0 ) {
				if( onEdge && dott < dist ){
					dist = dott; n = i;
				}		
				else if( !onEdge && dott > dist ) {
					dist = dott;n = i;
				}
			}
		}
		ret += sqrt( (vx[n]-vx[p])*(vx[n]-vx[p])+(vy[n]-vy[p])*(vy[n]-vy[p]) ); 
		p = n;used[p] = true;
	}while(start!=p);
	return ret;
}
int main()
{
 
 
	vx.clear();vy.clear();		
 
	int N;scanf("%d",&N);
	rep( i , 0 , N ) {
		double x ,  y;
		scanf("%lf %lf" , &x , &y );
		vx.push_back( x );vx.push_back( x+2.0 );vx.push_back(x);vx.push_back(x+2.0);		
		vy.push_back( y );vy.push_back(y);vy.push_back( y+2.0 );vy.push_back(y+2.0);
	}
	int newn = vx.size();
	printf( "%0.6lf\n" , convexHull( newn , 1 ) );
	return 0;
}
