#include<iostream>
#include<cstdio>
#include<cstring>
#include<sstream>
#include<cmath>
#include<deque>
#include<vector>
#include<utility>
#include<set>
#include<algorithm>

using namespace std;
	
typedef long long ll;
#define  INIT(a) memset(a,0,sizeof(a))
#define LIM 10000
#define INF 100000
#define MIN(a,b) ((a < b)?a:b)
#define MAX(a,b) ((a > b)?a:b)
#define PB(v,i) v.push_back(i)
#define ALL(c) c.begin(), c.end()
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)

double arr[LIM][2]; 
set < pair<double,double> > temp;
set < pair<pair<double,double> , double> > points;

double find_angle(pair<double,double> p1,pair<double,double> p2){
	double hyp,base;
	hyp = sqrt((p2.second-p1.second)*(p2.second-p1.second) + (p2.first-p1.first)*(p2.first-p1.first));
	base = p2.second - p1.second;
	return(acos(base/hyp));
}

double chk(double x1,double y1,double x2,double y2,double x3,double y3){
	return ((x2 - x1)*(y3 - y1) - (y2 - y1)*(x3 - x1));
}
	
int main(){
	int n;
	pair<double,double> initial;
	temp.clear();
	points.clear();
	double ans=0.0,x,y;
	scanf("%d",&n);
	if(n == 0)
		printf("0\n");
	else{
	for(int i=0;i < n;i++){
		scanf("%lf %lf",&x,&y);
		pair<double,double> p1,p2,p3,p4;
		p1.first = y-1;
		p1.second = x-1;
		temp.insert(p1);
		p2.first = y-1;
		p2.second = x+1;
		temp.insert(p2);
		p3.first = y+1;
		p3.second = x+1;
		temp.insert(p3);
		p4.first = y+1;
		p4.second = x-1;
		temp.insert(p4);		
		}
		initial = *(temp.begin());
		int len = temp.size();
		for(set <pair<double,double> >::iterator it = (++temp.begin());it != temp.end();it++){
			pair<pair<double,double>,double> p;
			p.first.first = find_angle(initial,*it);
			p.first.second = it->second;
			p.second = it->first;
			points.insert(p);
		}
		//Setting the final array
		arr[0][0] = initial.second;
		arr[0][1] = initial.first;
		int count = 1;
		for(set <pair<pair<double,double> , double> >::iterator it = points.begin();it != points.end();it++){
			arr[count][0] = (it->first).second;
			arr[count][1] = it->second;
			count++;
		}
		deque<int> q;
		q.push_back(0);
		q.push_back(1);
		for(int i=2;i < len;i++){
			while(chk(arr[*(q.end()-2)][0],arr[*(q.end()-2)][1],arr[q.back()][0],arr[q.back()][1],arr[i][0],arr[i][1]) <= 0){
				q.pop_back();
				if(q.size() == 1)
					break;
				}
			q.push_back(i);	
		}
		int final = *(q.end()-1);
		while(q.size() > 1){
			int id1,id2;
			id1 = *(q.end()-2);
			id2 = *(q.end()-1);
			q.pop_back();
			ans += sqrt((arr[id1][0] - arr[id2][0])*(arr[id1][0] - arr[id2][0]) +
				   (arr[id1][1] - arr[id2][1])*(arr[id1][1] - arr[id2][1]));
		}
		ans += sqrt((arr[0][0] - arr[final][0])*(arr[0][0] - arr[final][0]) +
				   (arr[0][1] - arr[final][1])*(arr[0][1] - arr[final][1]));
		printf("%.6lf\n",ans);	
		}
	}
