import sys

def create_meal_from_rawinput():
	temp = sys.stdin.readline()
	proteinsStr = temp.split()[1:]
	proteins = [int(i) for i in proteinsStr]
	ingredients = sys.stdin.readline().strip()
	desiredProteins = int(sys.stdin.readline())

	return Meal(
		proteins,
		ingredients,
		desiredProteins
		)

class Meal(object):
	def __init__(self, proteins, ingredients, desiredProteins):
		self.proteins = proteins
		self.ingredients = ingredients
		self.desiredProteins = desiredProteins
		self.bestMatch = ["#" for i in xrange(desiredProteins + 1)]
		self.bestMatch[desiredProteins] = ""

	
	def displayProperties(self):
		print self.proteins
		print self.ingredients
		print self.desiredProteins
		print self.bestMatch

	def findBestIngredients(self):
		for i in self.ingredients:
			self.iterate(i)


		if self.bestMatch[0] == "#":
			return "IMPOSSIBLE"
		else:
			return self.bestMatch[0]

	def iterate(self, currentIngredient):
		currentProtein = self.proteins[ord(currentIngredient) - ord('a')] 
		for i in xrange(self.desiredProteins + 1):
			if self.bestMatch[i] != "#":
				temp = i - currentProtein

				if temp >= 0:
					newProteinString = self.bestMatch[i] + currentIngredient

					if self.bestMatch[temp] == "#" or self.bestMatch[temp] > newProteinString:
						self.bestMatch[temp] = newProteinString

numberOfGuests = int(sys.stdin.readline())

for i in xrange(numberOfGuests):
	meal = create_meal_from_rawinput()
	print meal.findBestIngredients()
