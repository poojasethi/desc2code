
#include <vector>

#include <list>

#include <map>

#include <set>

#include <queue>

#include <deque>

#include <stack>

#include <bitset>

#include <algorithm>

#include <functional>

#include <numeric>

#include <utility>

#include <sstream>

#include <iostream>

#include <iomanip>

#include <cstdio>

#include <cmath>

#include <cstdlib>

#include <ctime>

#include <sys/time.h>

#include <stdio.h>

#include <string.h>

 

using namespace std;

 

typedef pair<int,int> PII;

typedef vector<PII> VPII;

typedef vector<int> VI;

typedef vector<VI> VVI;

typedef long long LL;

typedef unsigned long long ULL;

typedef unsigned char BYTE;

 

#define FOR(i, n) for (int i = 0; i < (n); ++i)

#define FORU(i, s, e) for (int i = (s); i <= (e); ++i)

#define FORD(i, s, e) for (int i = (s); i >= (e); --i)

#define ALL(x) (x).begin(),(x).end()

#define FOREACH(i, v) for(__typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)

#define SIZE(x) ((int)(x).size())

#define MP make_pair

#define BIT(x, b) (((x) >> (b)) & 1)

#define DEBUG(x) cerr << #x << " = " << x << " at line " << __LINE__ << endl;

#define INF 1000000000

#define MAX_TIME 5

#define TIME_LEFT_UNTIL(end) ((curTime=getTime()-startTime) < (end))

#define TIME_LEFT() TIME_LEFT_UNTIL(MAX_TIME)

#define INIT_TIME() startTime = getTime();

//#define cerr while (0) cerr

 

double startTime, curTime;

 

inline double getTime () {

  timeval tv;

  gettimeofday(&tv, 0);

  return tv.tv_sec + tv.tv_usec * 1e-6;

}

 

int table[500];

bool dp[1005][505];

 

int main () {

  int cases, K, S, N;

  char buf[1111];

  scanf("%d", &cases);

  while (cases--) {

    scanf("%d", &K);

    FOR(i, K) {

      int t;

      scanf("%d", &t);

      table[i+'a'] = t;

    }

 

    scanf(" %s", buf);

    string s(buf);

    N = SIZE(s);

 

    scanf("%d", &S);

    
    dp[N][0] = 1;

    FORU(i, 1, S)

      dp[N][i] = 0;

    FORD(i, N-1, 0) {

      int v = table[s[i]];

      FOR(j, v)

        dp[i][j] = dp[i+1][j];

      FORU(j, v, S)

        dp[i][j] = dp[i+1][j] | dp[i+1][j-v];

    }

 

    if (!dp[0][S])

      printf("IMPOSSIBLE");

    else {

      int p = 0;

      while (S > 0) {

        for (char c = 'a'; c < 'a'+K; ++c) {

          if (table[c] > S)

            continue;

          bool success = 0;

          FORU(i, p, N-1)

            if (s[i] == c) {

              if (dp[i+1][S-table[c]]) {

                p = i+1;

                success = 1;

              }

              break;

            }

          if (success) {

            printf("%c", c);

            S -= table[c];

            break;

          }

        }

      }

    }

    printf("\n");

  }

  return 0;

}

 




