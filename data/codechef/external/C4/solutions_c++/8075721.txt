#define problem "C4"
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxN = 1e3 + 10, maxW = 1e3 + 10;
typedef int i_N[maxN];
int N, W;
i_N A;
char S[maxN];
bool Fx[maxN][maxW], Gx[maxW];

int get_calo(char x){
    return A[x - 'a'];
}

void dynamic(void){
    int leng = strlen(S);
    reverse(S, S + leng);
    Gx[0] = 1;
    for(int i = 0; i < leng; i++){
        int calo = get_calo(S[i]);
        for(int j = W - calo; j >= 0; j--){
            Gx[j + calo] |= Gx[j];
            Fx[i][j + calo] |= Gx[j];
        }
    }
}

void trace(int start, int W){
    if(!W) return;
    int min_i = -1;
    for(int i = start; i >= 0; i--)
        if(Fx[i][W])
            if(min_i == -1 || S[min_i] > S[i])
                min_i = i;
    printf("%c", S[min_i]);
    trace(min_i - 1, W - get_calo(S[min_i]));
}

int main(){
  
    int test;
    scanf("%d\n", &test);
    while(test--){
        scanf("%d", &N);
        for(int i = 0; i < N; i++) scanf("%d ", A + i);
        gets(S);
        scanf("%d\n", &W);
        memset(Fx, 0, sizeof(Fx));
        memset(Gx, 0, sizeof(Gx));
        dynamic();
        if(!Gx[W]){
            puts("IMPOSSIBLE");
            continue;
        }
        trace(strlen(S) - 1, W);
        puts("");
    }
}
