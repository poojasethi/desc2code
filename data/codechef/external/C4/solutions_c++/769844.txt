#define DEBUG 0

#include <stdio.h>
#include <string.h>

/*
//recursive backtracking - tle
void f(int k, int p[26], int s, char l[1001], int pos, int total, char r[1001], int r_pos) {
  if(DEBUG) {
    r[r_pos]='\0';
    printf("f pos=%d total=%d r=%s\n", pos, total, r);
    cout << endl;
  }
  if(total==s) {
    r[r_pos]='\0';
    if(strcmp(r, b)<0)
      strcpy(b, r);
    return;
  }
  if(l[pos]=='\0' || total>s)
    return;
  r[r_pos]=l[pos];
  f(k, p, s, l, pos+1, total+p[l[pos]-'a'], r, r_pos+1);
  f(k, p, s, l, pos+1, total, r, r_pos);
}

//    f(k, p, s, l, 0, 0, r, 0);
*/

char b[500][1001];

int main(void) {
  int tc, k, p[26], i, j, s, tmp;
  char l[1001], test[1001], c[2];
  c[1]='\0';

  scanf("%d", &tc);
  while(tc--) {
    scanf("%d", &k);
    for(i=0;i<k;i++)
      scanf("%d", &p[i]);
    scanf("%s%d", &l, &s);
    for(i=1;i<=s;i++) {
      b[i][0]=126;
      b[i][1]='\0';
    }

    for(i=0;l[i]!='\0';i++) {
      tmp=p[l[i]-'a'];
      for(j=s-tmp;j>0;j--)
        if(b[j][0]<126) {
          c[0]=l[i];
          strcpy(test, b[j]);
          strcat(test, c);
          if(strcmp(test, b[j+tmp])<0) {
            strcpy(b[j+tmp], test);
            if(DEBUG)
              printf("b[%d]=%s\n", j+tmp, b[j+tmp]);
          }
        }
      if(l[i]<b[tmp][0]) { // single char would always be first
        b[tmp][0]=l[i];
        b[tmp][1]='\0';
        if(DEBUG)
          printf("b[%d]=%s\n", tmp, b[tmp]);
      }
    }
    if(b[s][0]<126)
      printf("%s\n", b[s]);
    else
      printf("IMPOSSIBLE\n");
  }
  return 0;
}
