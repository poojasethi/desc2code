//problema A
#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <numeric>
#include <utility>
 
#include <deque>
#include <stack>
#include <bitset>
#include <map>
#include <set>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <list>
 
#include <sstream>
#include <iostream>
#include <iomanip>
 
using namespace std;
 
typedef long long int64;
 
#define forn(i, n) for(int64 i = 0; i < (int)(n); i++)
#define fore(i, a, n) for(int64 i = a; i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) (a).size()
#define all(a) a.begin(), a.end()
#define VI vector<int>
#define PII vector<pair<int,int> >
#define iss istringstream //>>
#define MAX 105
#define MOD 1000000007
const long double EPS = 1E-9;
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double PI = 2 * acos(.0);

int t, n , len , S;
char cad[1005];
int value[30];
bool DP[1005][505];
string path[1005][505];
bool solve(){
	forn(i, len + 1) DP[i][0] = true;
	fore(i, 1, S + 1) DP[0][i] = false;
	bool cent = 0;
	fore(i , 1 , len + 1) {
		fore(j, 1, S + 1){
			if(DP[i - 1][j]){
				DP[i][j] = true;
				path[i][j] = path[i - 1][j];
			}else {
				DP[i][j] = false;
				path[i][j] = "";
			}
			int val = value[cad[i - 1] - 'a']; 
			if(j - val >= 0){
				if(DP[i - 1][j - val]){
					DP[i][j] = true;
					string cmp = path[i - 1][j - val] + cad[i - 1];
					if(path[i][j] == "" || path[i][j] > cmp ) path[i][j] = cmp;
				}
			}
		}
	}
	return DP[len][S];
}
/*void printSol(int r, int c){
	if(c == 0) return ;
	printSol(path[r][c].fs , path[r][c].sc);
	printf("%c", cad[r - 1]);
}*/
int main(){
	scanf("%d", &t);
	while(t--){
		scanf("%d", &n);
		forn(i, n) scanf("%d", &value[i]);
		scanf("%s", cad);
		scanf("%d", &S);
		len = strlen(cad);
		if(solve()){
			cout<< path[len][S] << endl;
		}else{
			cout << "IMPOSSIBLE" << endl;
		}
	}		
	return 0;
}
