#include<bits/stdc++.h>
using namespace std;

const int N=12345;

struct Point {
    double x, y;
    Point(double x=0, double y=0) : x(x), y(y) { }

    double operator^(Point b) {
        return (x*b.y-y*b.x);
    }

    Point operator-(Point b) {
        return Point(x-b.x, y-b.y);
    }

    Point operator+(Point b) {
        return Point(x+b.x, y+b.y);
    }
}p[N];

double dist(Point a, Point b) {
    return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);
}

bool compare(Point a, Point b) {
    double det=(a-p[0])^(b-p[0]);
    //cout<<det<<" "<<a.x<<" "<<a.y<<endl;
    //cout<<det<<" "<<b.x<<" "<<b.y<<endl;
    if(det==0) {
        return (dist(p[0], a)<dist(p[0], b));
    } else {
        return (det>0) ? true:false;
    }
}

Point nextTotop(stack<Point> &st) {
    Point temp=st.top();
    st.pop();
    Point req=st.top();
    st.push(temp);
    return req;
}

double convexHull(int n) {
    stack<Point> st;
    st.push(p[0]);
    st.push(p[1]);
    st.push(p[2]);
    for(int i=3;i<n;i++) {
        Point ftop=st.top();
        Point stop=nextTotop(st);
        double det=(ftop-stop)^(p[i]-ftop);
        while(det<=0) {
            st.pop();
            ftop=st.top();
            stop=nextTotop(st);
            det=(ftop-stop)^(p[i]-ftop);
        }
        st.push(p[i]);
    }
    double ans=0;
    vector<Point> vec;
    while(!st.empty()) {
        vec.push_back(st.top());
        st.pop();
    }
    //cout<<vec.size()<<endl;
    ans+=sqrt(dist(vec[0], vec[vec.size()-1]));
    for(int i=1;i<vec.size();i++) {
        ans+=sqrt(dist(vec[i], vec[i-1]));
    }
    return ans;
}


int main() {
    int test;
    scanf("%d", &test);
    while(test--) {
        int n;
        scanf("%d", &n);
        for(int i=0;i<n;i++) {
            scanf("%lf %lf", &p[i].x, &p[i].y);
        }
        int minidx=0;
        double ymin=p[0].y;
        for(int i=1;i<n;i++) {
            if((ymin>p[i].y) || (ymin==p[i].y && (p[i].x<p[minidx].x))) {
                ymin=p[i].y;
                minidx=i;
            }
        }
        //cout<<"ram "<<p[minidx].x<<" "<<p[minidx].y<<endl;
        Point temp=p[0];
        p[0]=p[minidx];
        p[minidx]=temp;
        sort(p+1, p+n, compare);
        printf("%.2lf\n", convexHull(n));
    }
}

