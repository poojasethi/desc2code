#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<climits>
#include<cstring>

using namespace std;

#define ll double

struct point
{
       ll x;
       ll y;
}p[100003],upper[100003],lower[100003],hull[100003];



void print(point a)
{
     cout<<"("<<a.x<<","<<a.y<<")";
}

bool isLeft(point a,point b,point c)
{
     return ((a.x-b.x)*(b.y-c.y) - (b.x-c.x)*(a.y-b.y))>0;
}

bool comp(point a,point b)
{
     if(a.x != b.x)
     return a.x < b.x;
     
     return a.y < b.y;
}

ll dist(point a,point b)
{
   return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);
}
void convexHull(int n)
{
     int i,j,k;
     j = 0;
     k = 0;
     
     for(i=0;i<n;i++)
     {
        while(k>=2 && !isLeft(hull[k-2],hull[k-1],p[i]))
        k--;
        
        hull[k++] = p[i];
     }
     
     for(i=n-2,j=k+1;i>=0;i--)
     {
        while(k>=j && !isLeft(hull[k-2],hull[k-1],p[i]))
        k--;
        
        hull[k++] = p[i];
     }
     
     double ans = 0.0;
     
     for(i=1;i<k;i++)
     {
        ans += sqrt(dist(hull[i],hull[i-1]));
     }
     
     printf("%0.2lf\n",ans);
}



int main()
{
    int t;
    int n,i;
    
    scanf("%d",&t);
    
    while(t--)
    {
              scanf("%d",&n);
    
              memset(hull,0,sizeof(0));
              for(i=0;i<n;i++)
              {
                   scanf("%lf%lf",&p[i].x,&p[i].y);
              }
    
              sort(p,p+n,comp);
              convexHull(n);
              //system("pause");
    }    
    return 0;
}
