#include<bits/stdc++.h>

using namespace std;

// typedefs
typedef long  int ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;


#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

vector<string> split(const string& s, char c) {
    vector<string> v;
    stringstream ss(s);
    string x;
    while (getline(ss, x, c))
        v.emplace_back(x);
    return move(v);
}

void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
    cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
    err(++it, args...);
}


// Useful hardware instructions ??????????????????
#define bitcount                    __builtin_popcount
#define gcd                         __gcd

// Useful Macros
#define pb push_back
#define avg(v) accumulate( v.begin(), v.end(), 0.0 )/v.size()//returns double
#define fill(a,v)                   memset(a, v, sizeof a)///////
#define forall(x,a,b)               for(int x=a;x<b;x++)
#define foreach(container, it)      for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
//takes care of iterator declaration
#define all(v)                      v.begin(), v.end() /////////
#define present(v,ele)              ((v).find(ele) != (v).end())
#define cpresent(v,ele)             (find(all(v),ele) != (v).end())

// Input macros
#define s(n)                        scanf("%d",&n)
#define sl(n)                       scanf("%ld",&n)
#define sll(n)                      scanf("%lld",&n)
#define p(n)                        printf("%d\n",n)
#define pl(n)                       printf("%ld\n",n)
#define pll(n)                      printf("%lld\n",n)


#define IOS ios_base::sync_with_stdio(0)

int main()
{
    IOS;
    int t;cin>>t;
    while(t--){
        int n;cin>>n;
        if(n&1)n--;
        cout<<(n*n)/16<<"\n";
    }
}




















