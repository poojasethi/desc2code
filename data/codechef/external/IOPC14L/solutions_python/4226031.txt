#include <bits/stdc++.h>

using namespace std;

const int N = 2005;
const int M = (int)(1e6 + 2 * N);
const long long mod = (long long)(1e9 + 7);

long long fact[M], inv[M], ans[N];
long long dp[N][N];
int n, num[N / 2], Q, S;
vector< pair<int,int> > P;

long long Power(long long base, long long index)
{
	long long ans = 1, temp = base;
	while(index)
	{
		if(index & 1)
			ans = (ans * temp) % mod;
		temp = (temp * temp) % mod;
		index >>= 1;
	}
	return ans;
}

long long Inv(long long num)
{
	return Power(num, mod - 2);
}

void PreCompute()
{
	fact[0] = 1;
	inv[0] = 1;
	for(long long i = 1; i < M; i++)
	{
		fact[i] = (fact[i - 1] * i) % mod;
		inv[i] = Inv(fact[i]);
	}
}

long long nCr(int n, int r)
{
	long long res = fact[n];
	res = (res * inv[r]) % mod;
	res = (res * inv[n - r]) % mod;
	return res;
}

void Solve()
{
	memset(dp, 0, sizeof(dp));
	int sz = P.size();
	
	long long power = P[0].second, base = P[0].first;
	
	for(int i = 0; i <= power && i * base < N; i++)
		dp[0][i * base] = (i & 1) ? (mod - nCr(power, i)) % mod : nCr(power, i);
		
	for(int i = 1; i < sz; i++)
	{
		power = P[i].second;
		base = P[i].first;
		for(int j = 0; j < N; j++)
		{
			long long temp = 0;
			for(int k = 0; k <= power && k * base <= j; k++)
			{
				long long val = (dp[i - 1][j - k * base] * nCr(power, k)) % mod;
				if(k & 1)
					val = (mod - val) % mod;
				temp = (temp + val) % mod;
			}
			dp[i][j] = temp;
		}
	}
}

int main()
{
	int val;
	PreCompute();
	memset(num, 0, sizeof(num));
	
	scanf("%d", &n);
	
	for(int i = 0; i < n; i++)
	{
		scanf("%d", &val);
		num[val]++;
	}
	
	for(int i = 0; i < N / 2; i++)
		if(num[i])
			P.push_back(make_pair(i + 1, num[i]));
	
	Solve();
	int sz = P.size();
	
	
	for(int i = 0; i < N; i++)
	{
		ans[i] = 0;
		for(int j = 0; j <= i; j++)
		{
			ans[i] += (dp[sz - 1][j] * nCr(n + i - j - 1, n - 1)) % mod;
			ans[i] %= mod;
		}
	}
	
	scanf("%d", &Q);
	while(Q--)
	{
		scanf("%d", &S);
		printf("%lld\n", ans[S]);
	}
	
	return 0;
}
