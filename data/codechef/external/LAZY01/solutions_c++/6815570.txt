#include <iostream>
#include<queue>
#include<vector>
#include<algorithm>

using namespace std;

struct node
{
	int n;
	vector<int> ds;
	bool visited;
};

int main() {
	// your code goes here
	int N,L,i,j;
	cin>>N>>L;
	int d[N][N];
	for(i=0;i<N;i++)
		for(j=0;j<N;j++)
			cin>>d[i][j];
	
	queue<node*> q;
	vector<node> v;
	vector<int> w,x;
	
	node temp;
	node* temp2;
	temp.visited=false;
	
	for(i=0;i<N;i++)
	{
		temp.n=i;
		temp.ds.push_back(0);
		v.push_back(temp);
	}
	
	q.push(&v[0]);
	
	while(!q.empty())
	{
		temp2=q.front();
		q.pop();
		
		if(temp2->visited==false)
		{
			temp2->visited=true;
			
			for(i=0;i<N;i++)
			{
				if(i!=temp2->n)
				{
					if(v[i].visited==false)
					{
						q.push(&v[i]);
						
						w=v[i].ds;
						x=temp2->ds;

						for(j=0;j<w.size();j++)
							temp2->ds.push_back(w[j]+d[i][temp2->n]);

						for(j=0;j<x.size();j++)
							v[i].ds.push_back(x[j]+d[i][temp2->n]);
					}
				}
			}
		}
	}
	
	if(find(v[N-1].ds.begin(),v[N-1].ds.end(),L-d[0][N-1])==v[N-1].ds.end())
		cout<<"IMPOSSIBLE";
	else
		cout<<"POSSIBLE";
	return 0;
}