/*
if input is a power of 2 then ans is yes
    else no
    becoz let us take example which is a power of 2
    32
    now 32/2 = 16;16/2 = 8 8/2 = 4 4/2 = 2 2/2 = 1 so we got 1 we end the process and alien will go back to his planet that is
    he will be not present on the earth
    if u take any even number other than power of 2, then while  in the process of dividing it by 2 u will get an odd number and then u will
    never reach to 1.
    and offcourse if u take any odd number u keep on  doing (n*3)+3 untill u get 1 which is never possible :)
*/
    #include <iostream>
    #include <cstdlib>
    #include <cstdio>
    #include <cmath>
    #include <algorithm>
    #include <vector>
    #include <set>
    #include <map>
    #include <stdio.h>
    #include <string.h>
    #include <math.h>
    #include <cassert>
    using namespace std;
    #define FOR(i,a,b) for(i= a ; i < b ; ++i)
    #define rep(i,n) FOR(i,0,n)
    #define INF INT_MAX
    #define pb push_back
    #define mp make_pair
    #define min(a,b) ((a)<(b)?(a):(b))
    #define si(n) scanf("%d",&n)
    #define pin(n) printf("%d\n",n)
    #define sl(n) scanf("%lld",&n)
    #define scan(v,n) vector<int> v;rep(i,n){ int j;si(j);v.pb(j);}
    #define mod (int)(1e9 + 7)
    #define ll long long int
    #define F first
    #define S second
    ll modpow(ll a,ll n,ll temp){ll res=1,y=a;while(n>0){if(n&1)res=(res*y)%temp;y=(y*y)%temp;n/=2;}return res%temp;}


    using std::string;

    static struct IO {
        char tmp[1 << 10];

        // fast input routines
        char cur;

    //#define nextChar() (cur = getc_unlocked(stdin))
    //#define peekChar() (cur)
        inline char nextChar() { return cur = getc_unlocked(stdin); }
        inline char peekChar() { return cur; }

        inline operator bool() { return peekChar(); }
        inline static bool isBlank(char c) { return (c < '-' && c); }
        inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

        inline IO& operator >> (char & c) { c = nextChar(); return *this; }

        inline IO& operator >> (char * buf) {
            if (skipBlanks()) {
                if (peekChar()) {
                    *(buf++) = peekChar();
                    while (!isBlank(nextChar())) *(buf++) = peekChar();
                } *(buf++) = 0; } return *this; }

        inline IO& operator >> (string & s) {
            if (skipBlanks()) {	s.clear(); s += peekChar();
                while (!isBlank(nextChar())) s += peekChar(); }
            return *this; }

        inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

    #define defineInFor(intType) \
        inline IO& operator >>(intType & n) { \
            if (skipBlanks()) { \
                int sign = +1; \
                if (peekChar() == '-') { \
                    sign = -1; \
                    n = nextChar() - '0'; \
                } else \
                    n = peekChar() - '0'; \
                while (!isBlank(nextChar())) { \
                    n += n + (n << 3) + peekChar() - 48; \
                } \
                n *= sign; \
            } \
            return *this; \
        }

    defineInFor(int)
    defineInFor(unsigned int)
    defineInFor(long long)

        // fast output routines

    //#define putChar(c) putc_unlocked((c), stdout)
        inline void putChar(char c) { putc_unlocked(c, stdout); }
        inline IO& operator << (char c) { putChar(c); return *this; }
        inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

        inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

        char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
        inline IO& operator << (double d) { return (*this) << toString(d); }


    #define defineOutFor(intType) \
        inline char * toString(intType n) { \
            char * p = (tmp + 30); \
            if (n) { \
                bool isNeg = 0; \
                if (n < 0) isNeg = 1, n = -n; \
                while (n) \
                    *--p = (n % 10) + '0', n /= 10; \
                if (isNeg) *--p = '-'; \
            } else *--p = '0'; \
            return p; \
        } \
        inline IO& operator << (intType n) { return (*this) << toString(n); }

    defineOutFor(int)
    defineOutFor(long long)

    #define endl ('\n')
    #define cout __io__
    #define cin __io__
    } __io__;

    /////////////////////////////////___/\___ ALL THE BEST SAI AVINASH DUDDUPUDI ____/\____//////////////////////////////////////////////////
   int main()
   {
    long long   int tc;
    cin>>tc;
    while(tc--)
    {
       long long  int n;
        cin>>n;
        if(((n)&(n-1)) == 0) // efficient way for checking whether a number is power of 2 (or) not :)
        {
            cout<<"No"<<endl;
        }
        else
        {
            cout<<"Yes"<<endl;
        }
    }
}
