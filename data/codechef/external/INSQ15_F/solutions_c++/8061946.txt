#include <bits/stdc++.h>

using namespace std;

#define ll long long

ll ht[1<<20], cost[1<<20], dist[2][1<<20], vis[2][1<<20];
vector<int> adj[1<<20];

//0-up mode
//1-down mode

int main()
{
	//freopen("i.txt", "r", stdin);
	int n, m, i, j, u, v, mode, cur, dest, src;
	ll up_cost, down_cost, c;
	scanf("%d%d", &n, &m);
	for(i=0; i<n; i++)
		scanf("%lld", &ht[i]), dist[0][i] = dist[1][i] = 1ll<<50;
	for(i=0; i<n; i++)
		scanf("%lld", &cost[i]);
	while(m--){
		scanf("%d%d", &u, &v);
		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	priority_queue <pair<ll, pair<int, int> >, vector<pair<ll, pair<int, int > > >, greater<pair<ll, pair<int, int > > > > q;
	q.push(make_pair(cost[0], make_pair(0, 0)));
	q.push(make_pair(cost[0], make_pair(1, 0)));
	j = 0;
	dist[0][0] = dist[1][0] = cost[0];
	while(!q.empty()){
		src = q.top().second.second;
		c = q.top().first;
		mode = q.top().second.first;
		q.pop();
		//cout << src << "\n";
		if(src==n-1)
			break;
		if(dist[mode][src]<c)
			continue;
		//dist[mode][src] = c;
		//if(dist[mode][src]<c)
		//	continue;
		for(i=0; i<adj[src].size(); i++){
			dest = adj[src][i];
			if(ht[dest]>ht[src]){
				if(!mode){
					up_cost = c;
					down_cost = c+cost[dest];
				}
				else{
					up_cost = c+cost[src];
					down_cost = c+cost[src]+cost[dest];
				}
			}
			else if(ht[dest]==ht[src]){
				if(!mode){
					up_cost = c;
					down_cost = c+cost[dest];
				}
				else{
					up_cost = c+cost[dest];
					down_cost = c;
				}
			}
			else{
				if(!mode){
					up_cost = c+cost[src]+cost[dest];
					down_cost = c+cost[src];
				}
				else{
					up_cost = c+cost[dest];
					down_cost = c;
				}
			}
			if(dist[0][dest]>up_cost){
				dist[0][dest] = up_cost;
				q.push(make_pair(up_cost, make_pair(0, dest)));
			}
			if(dist[1][dest]>down_cost){
				dist[1][dest] = down_cost;
				q.push(make_pair(down_cost, make_pair(1, dest)));
			}
		}
	}
	ll ans = min(dist[0][n-1], dist[1][n-1]);
	if(ans==1ll<<50)
		printf("-1\n");
	else
		printf("%lld\n", ans);
	//printf("%lld\n", min(dist[0][n-1], dist[1][n-1]));
	return 0;
}