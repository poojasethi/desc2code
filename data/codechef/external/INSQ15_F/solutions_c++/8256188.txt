#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <cstdio>

using namespace std;

#define forl(i,l,r) for(int i=(l); i<(r); i++)
#define forn(i,n) forl(i,0,n)
#define clr(a) memset(a, 0, sizeof(a))
#define pb push_back
typedef long long ll;
typedef pair<int, int > iip;
typedef pair<ll, int > lip;

const int maxn=100000+11;
const int maxw=1000*1000*1000+11;
const ll maxd= ll(maxw)*2*maxn;
bool vis[2*maxn+2];
int height[maxn];
int cost[maxn];
ll dist[2*maxn+2];
vector<iip> adj[2*maxn+2];

void djInit(int n){
	forn(i, n)
		dist[i]=maxd;
	clr(vis);
}


ll dijsktras(int s,int t, int n){
	djInit(n);
	dist[s]=0;
	priority_queue<lip, vector<lip>, greater<lip> > pq;
	pq.push(lip(0, s));
	while(!pq.empty()){
		lip top=pq.top();
		pq.pop();
		int u=top.second;
		if(u==t)
			break;
		if(vis[u]) continue;
		forn(i, adj[u].size()){
			int v=adj[u][i].first;
			if(vis[v])	continue;
			ll alt=dist[u]+adj[u][i].second;
			if(dist[v]>alt){
				dist[v]=alt;
				pq.push(lip(dist[v], v));
			}
		}
		vis[u]=true;
	}
	if(dist[t]==maxd)
		return -1;
	return dist[t];
}
int main(){
	std::ios_base::sync_with_stdio(false);cin.clear();
	int n,m;
	cin>>n>>m;
	forl(i, 1, n+1)
		cin>>height[i];
	forl(i, 1, n+1){
		cin>>cost[i];
		adj[i].pb(iip(i+n,cost[i])), adj[i+n].pb(iip(i,cost[i]));
	}
	forn(i, m){
		int u,v;
		cin>>u>>v;
		if(height[u]<=height[v]){
			adj[u].pb(iip(v, 0));
			adj[v+n].pb(iip(u+n,0));
		}
		if(height[v]<=height[u]){
			adj[v].pb(iip(u, 0));
			adj[u+n].pb(iip(v+n,0));
		}
	}
	adj[0].pb(iip(1, cost[1]));
	adj[0].pb(iip(1+n, cost[1]));
	adj[n].pb(iip(2*n+1, 0));
	adj[2*n].pb(iip(2*n+1, 0));

	cout<<dijsktras(0, 2*n+1, 2*n+2)<<endl;
}