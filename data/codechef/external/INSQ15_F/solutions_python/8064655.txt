#include<bits/stdc++.h>
using namespace std;
 
#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
 
#define ll long long
#define ull unsigned ll
#define pii pair<ll,ll>
#define piim pair<pii,int>
#define INF 100000000000000000;
 
struct comp {
    bool operator() (const piim &a, const piim &b) {
        return a.first.second > b.first.second;
    }
};
 
priority_queue< piim, vector< piim >, comp > Q;
 
vector<int> g[100009];
 
ll c[100009];
ll h[100009];
ll d[100009][2];
bool f[100009][2];
int main()
{
    int n,r;
    scanf("%d %d",&n,&r);
 
    for(int i=1;i<=n;i++)
    scanf("%lld",&h[i]);
 
    for(int i=1;i<=n;i++)
    scanf("%lld",&c[i]);
 
    for(int i=0;i<r;i++)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
 
    memset(f,false,sizeof f);
    for(int i=1;i<=n;i++)
    {
        d[i][0]= -1;
        d[i][1]= -1;
    }
    d[1][0]=c[1];
    d[1][1]=c[1];
    Q.push(piim(pii(1,d[1][0]),0));
    Q.push(piim(pii(1,d[1][1]),1));
 
    while(!Q.empty())
    {
        int u = Q.top().first.first;
        int md = Q.top().second;
        Q.pop();
        if(f[u][md])continue;
 
        for(int i=0;i<g[u].size();i++)
        {
            int v = g[u][i];
            int ch =0; // decide if i have to change the mode or not
 
            if(h[v]==h[u])
            ch =0;
            else if(h[v]>=h[u] && md == 0)
            ch=1;
            else if(h[v]<=h[u]&& md ==1)
            ch=1;
 
            int nmd;
            if(ch == 1)
            nmd = 1-md;
            else
            nmd = md;
            if(!f[v][nmd] && ( (d[u][md]+ ((ch==1)?c[u]:0) < d[v][nmd]) || d[v][nmd]==-1) )
            {
                d[v][nmd] = d[u][md]+ ((ch==1)?c[u]:0);
                Q.push(piim(pii(v,d[v][nmd]),nmd));
            }
            // case when h[u] == h[v], we can also go to v by incurring cost by changing mode
            if(h[u]==h[v])
            {
                if(!f[v][1-nmd] && ( (d[u][md]+ c[u] < d[v][1-nmd]) || d[v][1-nmd]==-1) )
                {
                d[v][1-nmd] = d[u][md]+ c[u];
                Q.push(piim(pii(v,d[v][1-nmd]),1-nmd));
                }
            }
 
 
        }
        f[u][md]=true;
 
 
    }
    if(d[n][0]==-1)
    printf("%lld\n",d[n][1]);
    else if(d[n][1]==-1)
    printf("%lld\n",d[n][0]);
    else
        printf("%lld\n",min(d[n][0],d[n][1]));
    return 0;
}
 