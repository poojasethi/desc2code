#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

ll ht[1000007];
ll dis[1000007][2];
ll mode[1000007];

#define mp make_pair
#define fi first
#define  sc second 
#define pb push_back
#define INF 1000000000000000000

typedef long long ll; 

typedef  pair < ll, pair <ll, ll> > plii ;

priority_queue <pair < ll, pair <ll, ll> >, vector<plii>,greater<plii>  > pq ;

ll n, r;
vector <vector <ll> > graph;

int  main() {
	scanf ("%lld%lld", &n, &r);
	for (ll i = 1; i <= n; i++)
		scanf ("%lld", &ht[i]);
	for (ll i = 1; i <= n; i++)
		scanf ("%lld", &mode[i]);

	graph.clear();
	graph.resize(n+1);
	for (ll i = 1; i <= r; i++) {
		ll u, v;
		scanf ("%lld%lld", &u, &v);
		graph[u].pb(v);
		graph[v].pb(u);
	}

	for (ll i = 1; i<= n; i++) {
		dis[i][1] = INF;
		dis[i][0] = INF;
	}

	
	dis[1][0] = mode[1];
	dis[1][1] = mode[1];
	
	
	pq.push(mp(mode[1], mp(1, 0)));
	pq.push(mp(mode[1], mp(1, 1)));
	


	while (!pq.empty() ) {
		plii t = pq.top();
		pq.pop();

		ll cv = t.first;
		ll cd  = t.sc.first;
		ll cm = t.sc.sc;
		
		ll sz = graph[cd].size();

		for (int i = 0; i < sz; i++) {
			int v = graph[cd][i];
			if ( ht [v] == ht[cd] ) {
				 if (dis[v][!cm]  >    mode[cd] + cv) {
				  	dis[v][!cm]  =     mode[cd] + cv;
				 	pq.push(mp(dis[v][!cm], mp(v, !cm) ) );
				}
				if (dis[v][cm] > cv) {
					dis[v][cm] = cv;
					pq.push(mp(dis[v][cm], mp(v, cm)));
				}

				continue;
			}
					
			if ((ht [v] > ht[cd] && cm ==  0) || (ht[v] < ht[cd] && cm == 1) ) {
				 if (dis[v][!cm]  >    mode[cd] + cv) {
				  	dis[v][!cm]  =     mode[cd] + cv;
				 	pq.push(mp(dis[v][!cm], mp(v, !cm) ) );
				}
			}

			else {
				if (dis[v][cm] >  cv) {
				 	dis[v][cm]  = cv;
				 	pq.push( mp(dis[v][cm], mp(v, cm) ) );
				}
			}
			
		}
	}


	ll ans = min (dis[n][0], dis[n][1]);
	if (ans == INF)
		printf("-1\n");
	else
		printf ("%lld\n", ans );
	

	return 0;
}

	


