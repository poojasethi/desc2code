//You only fail when you stop trying...
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll  long long int
#define inf 100000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

vector<ll>v[maxn];
ll dist[maxn][2],cost[maxn],h[maxn];
int main()
{
	boost1;boost2;
	ll i,j,n,m,x,y,d0,d1,cur,distance,mode,nxt;
	cin>>n>>m;
	for(i=1;i<=n;i++)
	cin>>h[i];
	for(i=1;i<=n;i++)
	cin>>cost[i];
	for(i=1;i<=m;i++)
	{
		cin>>x>>y;
		v[x].pb(y);
		v[y].pb(x);
	}
	for(i=1;i<=n;i++)
	{
		dist[i][0]=inf;
		dist[i][1]=inf;
	}
	dist[1][0]=dist[1][1]=cost[1];
	priority_queue<pair<ll,pair<ll,ll> > >q;
	q.push(mp(-dist[1][0],mp(0,1)));
	q.push(mp(-dist[1][1],mp(1,1)));
	while(!q.empty())
	{
		cur=q.top().S.S;
		distance=-q.top().F;
		mode=q.top().S.F;
		q.pop();
		if(dist[cur][mode]!=distance)
		continue;
		for(i=0;i<v[cur].size();i++)
		{
			nxt=v[cur][i];
			if(h[nxt]>h[cur])
			{
				if(mode==0)
				{
					d0=distance;
					d1=distance+cost[nxt];
				}
				else
				{
					d0=distance+cost[cur];
					d1=distance+cost[cur]+cost[nxt];
				}
			}
			else if(h[nxt]==h[cur])
			{
				if(mode==0)
				{
					d0=distance;
					d1=distance+cost[nxt];
				}
				else
				{
					d0=distance+cost[nxt];
					d1=distance;
				}
			}
			else
			{
				if(mode==0)
				{
					d0=distance+cost[cur]+cost[nxt];
					d1=distance+cost[cur];
				}
				else
				{
					d0=distance+cost[nxt];
					d1=distance;
				}
			}
			if(dist[nxt][0]>d0)
			{
				dist[nxt][0]=d0;
				q.push(mp(-dist[nxt][0],mp(0,nxt)));
			}
			if(dist[nxt][1]>d1)
			{
				dist[nxt][1]=d1;
				q.push(mp(-dist[nxt][1],mp(1,nxt)));
			}
		}
	}
	ll ans=min(dist[n][0],dist[n][1]);
	if(ans==inf)
	cout<<"-1";
	else
	cout<<ans;
	return 0;
}
