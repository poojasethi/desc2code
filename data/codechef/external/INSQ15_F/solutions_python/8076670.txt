#include<bits/stdc++.h>
#define N 110000
#define ll unsigned long long int
#define inf (ll) 1e18
using namespace std;
ll h[N], c[N];
vector<int> v[N];
int main(){
	int n,r; scanf("%d %d",&n,&r);
	for(int i=1; i<=n; i++) scanf("%llu",&h[i]);
	for(int i=1; i<=n; i++) scanf("%llu",&c[i]);
	while(r--){
		int x,y; scanf("%d %d",&x,&y);
		v[x].push_back(y); v[y].push_back(x);
	}
	ll cost[N][2];
	for(int i=1; i<=n; i++) cost[i][0]=cost[i][1]=inf;
	priority_queue<pair<ll,int> >q;
	cost[1][0]=0ll;
    cost[1][1]=0ll;
	ll ans=inf;
	q.push(make_pair(0ll,1));
    q.push(make_pair(0ll,1));
	while(!q.empty()){
		int cur=q.top().second;
        q.pop();
        for(int i=0; i<v[cur].size(); i++){
            int next=v[cur][i];
            int wt=c[cur];
            if(h[cur]==h[next]){
                if(cost[next][0]>cost[cur][0]){
                    cost[next][0]=cost[cur][0];
                    q.push(make_pair(-cost[next][0],next));
                }
                if(cost[next][1]>cost[cur][0]+wt){
                    cost[next][1]=wt+cost[cur][0];
                    q.push(make_pair(-cost[next][1],next));
                }
                if(cost[next][0]>cost[cur][1]+wt){
                    cost[next][0]=wt+cost[cur][1];
                    q.push(make_pair(-cost[next][0],next));
                }
                if(cost[next][1]>cost[cur][1]){
                    cost[next][1]=cost[cur][1];
                    q.push(make_pair(-cost[next][1],next));
                }
            }
            else if(h[cur]<h[next]){
                if(cost[next][1]>wt+cost[cur][0]){
                    cost[next][1]=wt+cost[cur][0];
                    q.push(make_pair(-cost[next][1],next));
                }
                if(cost[next][1]>cost[cur][1]){
                    cost[next][1]=cost[cur][1];
                    q.push(make_pair(-cost[next][1],next));
                }
            }
            else if(h[cur]>h[next]){
                if(cost[next][0]>cost[cur][0]){
                    cost[next][0]=cost[cur][0];
                    q.push(make_pair(-cost[next][0],next));
                }
                if(cost[next][0]>wt+cost[cur][1]){
                    cost[next][0]=wt+cost[cur][1];
                    q.push(make_pair(-cost[next][0],next));
                }
            }
        }
	}
    ans=min(inf,min(cost[n][0],cost[n][1]));
	if(ans<inf) cout<<ans+c[1]<<endl;
	else cout<<-1<<endl;
}