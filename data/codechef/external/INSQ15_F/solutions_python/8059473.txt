#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<list>
using namespace std;
#define inf 100000000000000000LL
long long int func(vector<pair<int,int> >*adj,int src,int des)
{
long long int ans[des+3];
fill(ans,ans+des+3,inf);
priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;
q.push(make_pair(0,src));
ans[src]=0;
while(!q.empty())
{
pair<int,int>temp=q.top();
q.pop();
for(int i=0;i<adj[temp.second].size();i++)
if(ans[adj[temp.second][i].second]>ans[temp.second]+adj[temp.second][i].first)
{
ans[adj[temp.second][i].second]=ans[temp.second]+adj[temp.second][i].first;
q.push(make_pair(ans[adj[temp.second][i].second],adj[temp.second][i].second));
}
}
return ans[des];
}
int main()
{
ios_base::sync_with_stdio(false);
int n,r;
cin>>n>>r;
int h[n],c[n];
vector<pair<int,int> >adj[3*n];
for(int i=1;i<=n;i++)
cin>>h[i];
for(int i=1;i<=n;i++)
{
cin>>c[i];
adj[i].push_back(make_pair(c[i],n+i));
adj[n+i].push_back(make_pair(c[i],i));
}
adj[0].push_back(make_pair(c[1],1));
adj[0].push_back(make_pair(c[1],n+1));
adj[n].push_back(make_pair(0,2*n+1));
adj[2*n].push_back(make_pair(0,2*n+1));
while(r--)
{
int u,v;
cin>>u>>v;
if(h[u]<=h[v])
{
adj[u].push_back(make_pair(0,v));
adj[n+v].push_back(make_pair(0,n+u));
}
if(h[v]<=h[u])
{
adj[v].push_back(make_pair(0,u));
adj[n+u].push_back(make_pair(0,n+v));
}
}
long long int ans=func(adj,0,2*n+1);
if(ans>=inf)
cout<<"-1"<<endl;
else
cout<<ans<<endl;
return 0;
}
