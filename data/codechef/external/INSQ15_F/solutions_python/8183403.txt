import java.io.*;
import java.util.*;

class InsomniaqE {

	int n,r;
	int h[],c[];
	ArrayList<Node> g[];
	long oo = (long)1e16;
	
	InsomniaqE() throws IOException {
		solve();
	}

	public static void main(String args[]) {
		new Thread(null, new Runnable() {
			public void run() {
				try {
					new InsomniaqE();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (StackOverflowError e) {
					System.out.println("RTE");
				}
			}
		}, "1", 1 << 24).start();
	}

	public void solve(){
		InputReader in = new InputReader(System.in);
		
		n = in.nextInt();
		r = in.nextInt();
		
		h = new int[n + 1];
		for(int i=1;i<=n;i++)
			h[i] = in.nextInt();
		
		c = new int[n + 1];
		for(int i=1;i<=n;i++)
			c[i] = in.nextInt();	
		
		int N = 2*n + 2;
		g = new ArrayList[N];
		for(int i=0;i<N;i++)
			g[i] = new ArrayList<Node>();
		
		g[0].add(new Node(1,c[1]));
		g[0].add(new Node(n+1,c[1]));
		
		for(int i=1;i<=n;i++){
			g[i].add(new Node(n+i,c[i]));
			g[n+i].add(new Node(i,c[i]));
		}
		
		g[n].add(new Node(2*n+1,0));
		g[2*n].add(new Node(2*n+1,0));
		
		while(r-- > 0){
			int u = in.nextInt();
			int v = in.nextInt();
			if(h[u] <= h[v])	g[u].add(new Node(v,0));
			if(h[u] >= h[v])	g[n+u].add(new Node(n+v,0));
			if(h[v] <= h[u])	g[v].add(new Node(u,0));
			if(h[v] >= h[u])	g[n+v].add(new Node(n+u,0));
		}
		
		long ans = Dijkstra(0,g);
		System.out.println(ans >= oo ? -1 : ans);
	}
	
	public long Dijkstra(int s,ArrayList<Node> g[]){
		long[] dist = new long[g.length];
		boolean[] v = new boolean[g.length];
		Arrays.fill(dist,oo);
		dist[s] = 0;
		Comparator<Node> comp = new MyComparator();
		PriorityQueue<Node> q = new PriorityQueue<Node>(2*g.length,comp);
		q.add(new Node(s,0));
		
		while(!q.isEmpty()){
			Node now = q.poll();
			if(!v[now.x]){
				v[now.x] = true;
				for(int i=0;i < g[now.x].size(); i++){
					int curr = g[now.x].get(i).x;
					long w = g[now.x].get(i).dist;
					if(dist[now.x] + w < dist[curr]){
						dist[curr] = dist[now.x] + w;
						q.add(new Node(curr,dist[curr]));
					}
				}
			}
		}
		
		return dist[g.length - 1];
	}
	
	static class MyComparator implements Comparator<Node>{
		public int compare(Node n0, Node n1) {
			if(n0.dist > n1.dist)
				return 1;
			else if(n0.dist < n1.dist)
				return -1;
			return 0;
		}
	}
	
	static public class Node{
		int x;
		long dist;
		public Node(int i,long j){
			x = i;
			dist = j;
		}
	}
	
	static class MyArrayList {
		 
	    private int[] myStore;
	    private int actSize = 0;
	     
	    public MyArrayList(){
	        myStore = new int[5];
	    }
	     
	    public int get(int index){
	        return myStore[index];
	    }
	     
	    public void add(int obj){
	        if(myStore.length-actSize <= 1)
	            increaseListSize();
	        myStore[actSize++] = obj;
	    }
	   
	    public int size(){
	        return actSize;
	    }
	     
	    private void increaseListSize(){
	        myStore = Arrays.copyOf(myStore, myStore.length*2);
	    }
	}
	
	static class InputReader {

		private InputStream stream;
		private byte[] buf = new byte[8192];
		private int curChar;
		private int snumChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res;
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}

}
