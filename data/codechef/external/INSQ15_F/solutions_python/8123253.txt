/* 

   SHUBHAM RAI-IIIT Hyderabad

 */
#include<bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(i=a;i<b;i++)
#define REP(i,a) for(i=0;i<a;i++)
#define LLD long long int
#define MOD 1000000007
#define si(n) scanf("%d",&n);
#define si2(n,m) scanf("%d%d",&n,&m);
#define sl(n) scanf("%lld",&n);
#define TR(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define F first
#define S second
#define pb push_back
#define mp make_pair
typedef pair<int,int> PII;
#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

LLD d[100002][2],h[100002],c[100002];
vector<int> G[100002];
void dijsktra(int n)
{
	int i;
	REP(i,n+1)
		d[i][0]=d[i][1]=1e15;
	d[1][0]=d[1][1]=0;
	set < pair<LLD,PII> > s;		
	REP(i,G[1].size())
	{
		int x=G[1][i];
		if(h[x]<=h[1])
		{
			s.insert(mp(c[1],mp(0,x)));
			d[x][0]=min(d[x][0],c[1]);
		}
		if(h[x]>=h[1])
		{
			s.insert(mp(c[1],mp(1,x)));
			d[x][1]=min(c[1],d[x][1]);
		}
	}
	while(!s.empty())
	{
		pair<LLD,PII> k=*s.begin();
		s.erase(s.begin());
		LLD cost=k.F;
		int u=k.S.S,dir=k.S.F;
//		trace3(u,cost,dir);
		REP(i,G[u].size())
		{
			int x=G[u][i];
			if(h[x]<=h[u])
			{
				if(dir==0 && d[x][0]>cost)
				{
					s.insert(mp(cost,mp(0,x)));
					d[x][0]=cost;
				}
				else if(dir==1 && d[x][0]>cost+c[u])
				{
					s.insert(mp(cost+c[u],mp(0,x)));
					d[x][0]=cost+c[u];
				}
			}
			if(h[x]>=h[u])
			{
				if(dir==1 && d[x][1]>cost)
				{
					s.insert(mp(cost,mp(1,x)));
					d[x][1]=cost;
				}
				else if(dir==0 && d[x][1]>cost+c[u])
				{
					s.insert(mp(cost+c[u],mp(1,x)));
					d[x][1]=cost+c[u];
				}
			}
		}
	}
}
int main()
{
	int n,i,j,m;
	si2(n,m);
	REP(i,n)
		sl(h[i+1]);
	REP(i,n)
		sl(c[i+1]);
	REP(i,m)
	{
		int x,y;
		si2(x,y);
		G[x].pb(y);
		G[y].pb(x);
	}
	dijsktra(n);
//	FOR(i,1,n+1)
//		trace3(i,d[i][0],d[i][1]);
	LLD ans=min(d[n][1],d[n][0]);
	if(ans==1e15)
		cout<<-1<<endl;
	else
		cout<<ans<<endl;
	return 0;
}
