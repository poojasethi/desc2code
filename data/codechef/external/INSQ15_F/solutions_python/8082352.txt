#include<bits/stdc++.h>
using namespace std;

const int N=123456;
const long long INF=2e18;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, pii > piii;

ll h[N], c[N], d[2][N];
vector<int> adj[N];

ll dijks(int n) {
    for(int i=0;i<n;i++) {
        d[0][i]=INF;
        d[1][i]=INF;
    }
    priority_queue<piii, vector<piii > , greater<piii > > pq;
    d[0][0]=d[1][0]=c[0];
    pq.push(piii(c[0], pii(0, 1)));
    pq.push(piii(c[0], pii(0, 0)));
    while(!pq.empty()) {
        piii minm=pq.top();
        pq.pop();
        int mdu=minm.second.second;
        int u=minm.second.first;
        int dd=minm.first;
        if(dd<=d[mdu][u]) {
            for(int i=0;i<(int)adj[u].size();i++) {
                int w=adj[u][i];
                int wt=0, mdw=mdu;
                if((mdu==0 && h[u]<h[w]) || (mdu==1 && h[u]>h[w])) {
                    mdw=mdu^1;
                    wt=c[u];
                }
                if(d[mdu][u]+wt<d[mdw][w]) {
                    d[mdw][w]=d[mdu][u]+wt;
                    pq.push(piii(d[mdw][w], pii(w, mdw)));
                }
                if(h[u]==h[w]) {
                    wt=c[u];
                    mdw=mdu^1;
                    if(d[mdu][u]+wt<d[mdw][w]) {
                        d[mdw][w]=d[mdu][u]+wt;
                        pq.push(piii(d[mdw][w], pii(w, mdw)));
                    }
                }
            }
        }
    }
    ll ans=min(d[0][n-1], d[1][n-1]);
    return (ans==INF)?-1:ans;
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0;i<n;i++) {
        scanf("%lld", h+i);
    }
    for(int i=0;i<n;i++) {
        scanf("%lld", c+i);
    }
    for(int i=0;i<m;i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    ll ans=dijks(n);
    printf("%lld\n", ans);
}
