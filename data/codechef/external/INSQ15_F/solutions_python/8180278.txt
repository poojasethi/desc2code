#include<bits/stdc++.h>
#define fr(x) scanf("%d",&x)
#define ll long long
using namespace std;

ll dist[2][100005];
int h[100005];
ll c[100005];
vector<int> g[100005];
struct triple{
    ll a;
    int b,c;//c=mode 0 or 1,0=low and 1=high
    triple(ll a1,int b1,int c1){
        a=a1;
        b=b1;
        c=c1;
    }
};

bool operator>(triple a,triple b){
    return a.a>b.a;
}

priority_queue<triple,deque<triple>,greater<triple> >pq;

int main(){
    int n,r,u,v;
    ll ans=-1;
    fr(n);fr(r);
    for(int i=1;i<=n;++i){
        fr(h[i]);
    }
    for(int i=1;i<=n;++i){
        fr(c[i]);
    }
    while(r--){
        fr(u);fr(v);
        g[u].emplace_back(v);
        g[v].emplace_back(u);
    }
    pq.push(triple(c[1],1,0));
    pq.push(triple(c[1],1,1));
    memset(dist,63,sizeof(dist));
    dist[1][1]=c[1];
    dist[0][1]=c[1];
    while(!pq.empty()){
        auto x=pq.top();
        pq.pop();
        if(x.b==n){
            ans=x.a;
            break;
        }
        if(dist[x.c][x.b]==x.a)
            for(auto&y:g[x.b]){
                if(x.c){
                    if(h[y]>=h[x.b]){
                        if(dist[1][y]>dist[x.c][x.b]){
                            dist[1][y]=dist[x.c][x.b];
                            pq.push(triple(dist[1][y],y,1));
                        }
                    }
                    if(h[y]<=h[x.b]){
                        if(dist[0][y]>dist[x.c][x.b]+c[x.b]){
                            dist[0][y]=dist[x.c][x.b]+c[x.b];
                            pq.push(triple(dist[0][y],y,0));
                        }
                    }
                }
                else{
                    if(h[y]<=h[x.b]){
                        if(dist[0][y]>dist[x.c][x.b]){
                            dist[0][y]=dist[x.c][x.b];
                            pq.push(triple(dist[0][y],y,0));
                        }
                    }
                    if(h[y]>=h[x.b]){
                        if(dist[1][y]>dist[x.c][x.b]+c[x.b]){
                            dist[1][y]=dist[x.c][x.b]+c[x.b];
                            pq.push(triple(dist[1][y],y,1));
                        }
                    }
                }
            }
    }
    printf("%lld",ans);
    return 0;
}