#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define ll long long
#define pb push_back
 using namespace std ;

ll dp[100002][2];
vector<int>v[100002];
int h[100000+1],c[100000+1];

struct comp{
    bool operator()(pair<int,int>a,pair<int,int>b){
        return dp[a.first][a.second]>dp[b.first][b.second];
    }
};

void djistra(int des){

   int i;
   for(i=1;i<=des;++i)
        dp[i][0] = dp[i][1] = LONG_LONG_MAX;
    dp[1][0] = dp[1][1] = 0;
    priority_queue<pair<int,int>,vector<pair<int,int> >,comp>pq;
    pq.push(make_pair(1,0));
    while(!pq.empty()){

        pair<int,int>p = pq.top();
        pq.pop();
       //cout<<p.first<<" "<<p.second<<" "<<dp[p.first][p.second]<<endl;
        int src = p.first;
        for(i=0;i<v[src].size();++i){
            int des = v[src][i];
           if(p.first==1){
              if(h[des]>h[src]){
                 if(c[src]<dp[des][0]){
                    dp[des][0] = c[src];
                    pq.push(make_pair(des,0));
                 }
              }
              else if(h[src]>h[des]){
                 if(c[src]<dp[des][1]){
                    dp[des][1] = c[src];
                    pq.push(make_pair(des,1));
                 }
              }else{
                  if(c[src]<dp[des][0]){
                    dp[des][0] = c[src];
                    pq.push(make_pair(des,0));
                  }
                  if(c[src]<dp[des][1]){
                    dp[des][1] = c[src];
                    pq.push(make_pair(des,1));
                  }
              }
              continue;
           }

             if(p.second==0){
                if(h[des]>=h[src]){
                   if(dp[src][0]<dp[des][0]){
                       dp[des][0] = dp[src][0];
                       pq.push(make_pair(des,0));
                   }
                }
                if(h[des]<=h[src]){
                   if((dp[src][0]+c[src])<dp[des][1]){
                       dp[des][1] = dp[src][0]+c[src];
                       pq.push(make_pair(des,1));
                   }
                }
             }else{

                if(h[des]<=h[src]){
                   if(dp[src][1]<dp[des][1]){
                       dp[des][1] = dp[src][1];
                       pq.push(make_pair(des,1));
                   }
                }
                if(h[des]>=h[src]){
                   if((dp[src][1]+c[src])<dp[des][0]){
                       dp[des][0] = dp[src][1]+c[src];
                       pq.push(make_pair(des,0));
                   }
                }
             }
        }
    }
}
int main(){

int t,n,i,j,k,a,b,x,y;
cin>>n>>k;

for(i=1;i<=n;++i)
    s(h[i]);

for(i=1;i<=n;++i)
    s(c[i]);

for(i=0;i<k;++i){
   s(x);s(y);
   v[x].pb(y);
   v[y].pb(x);
}

djistra(n);

ll ans = min(dp[n][0],dp[n][1]);
if(ans==LONG_LONG_MAX)
    printf("-1\n");
else
    cout<<ans<<endl;
return 0;
}
