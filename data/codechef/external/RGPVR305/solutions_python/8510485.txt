#include<bits/stdc++.h>
#include<string>
using namespace std;

void add(vector <int> &_a, int M){

    //cout<<"";cout<<M<<" + ";for (int _i = 0; _i < _a.size(); _i++) cout << _a[_i]; cout << "  ";
    int idx = _a.size() - 1, car = M;

    for( ;idx >= 0; idx--){
        car += _a[idx];
         _a[idx] = car % 10;
         car /= 10;
    }

    //cout<<"";/to append if carry isn't zero
    if (car) _a.insert(_a.begin(), car);
    //cout<<"";cout<<" = "; for (int _i = 0; _i < _a.size(); _i++) cout << _a[_i]; cout << endl;
}

void subtract(vector <int> &_a, vector <int> &_b){

    //cout<<"";for (int _i = 0; _i < _a.size(); _i++) cout << _a[_i]; cout << "  ";
    //cout<<"";cout<<" - ";for (int _i = 0; _i < _b.size(); _i++) cout << _b[_i]; cout << " = ";

    int  a = _a.size() - 1,b = _b.size() - 1;

    while (b >= 0){

        //cout<<"";/When Borrow is needed
        if (_a[a] < _b[b]) {

            _a[a--] += 10 - _b[b--];
            _a[a]--;
        }
        //cout<<"";/when Borrow is not needed
        else _a[a--]-=_b[b--];
    }
    //cout<<"";/To remove front zero's
    while(_a.size()>1){

        if(*_a.begin()) break;
        else _a.erase(_a.begin());
    }

    //cout<<"";for (int _i = 0; _i < _a.size(); _i++) cout << _a[_i]; cout << endl;
}
void _multiply(vector <int> &_a, int M){

    //cout<<"";cout<<M<<" * ";for (int _i = 0; _i < _a.size(); _i++) cout << _a[_i]; cout << " = ";
    int temp = 0;

    for(int j = _a.size()-1; j >= 0; j--) {

        temp += _a[j]*M;
        _a[j] = temp % 10;
         temp /= 10;
    }

        //cout<<"";/to append if carry
    _a.insert(_a.begin(), temp);

    //cout<<"";/remove front zero's
    while(_a.size()>1){

        if(*_a.begin()) break;
        else _a.erase(_a.begin());
    }

    //cout<<"";for (int _i = 0; _i < _a.size(); _i++) cout << _a[_i]; cout << endl;
}

bool compare(vector <int> &_a, vector <int> &d){
    //cout<<"";/remove front zero's
    while(_a.size()>1){

        if(*_a.begin()) break;
        else _a.erase(_a.begin());
    }
    //cout<<"";/remove front zero's
    while(d.size()>1){

        if(*d.begin()) break;
        else d.erase(d.begin());
    }

    if (_a.size() != d.size())
        return _a.size() < d.size();

    for(int i = 0; i < _a.size(); i++){
        if (_a[i] != d[i])
            return _a[i] < d[i];
    }
    return true;
}
void multiply(vector <int> &a, vector <int> &d, vector <int> &c){

    vector <int> _a(a); int f__k = 0;

    for(int i = 0; i < 10; i++){
        _a = a;
        _a.push_back(i);
        _multiply(_a, i);
        if (compare(_a,d)) f__k = i;
        else break;
         _a.pop_back();
    }
    c.push_back(f__k);
    _a=a;
    _a.push_back(f__k);
     _multiply(_a, f__k);
    //cout<<"";for (int _i = 0; _i < _a.size(); _i++) cout << _a[_i]; cout << endl;
    //cout<<"";for (int _i = 0; _i < d.size(); _i++) cout << d[_i]; cout << endl;
    subtract(d, _a);
    a.push_back(f__k);
    add(a,f__k);
}
 vector<int> find_square_root(vector<int> &b){
 //cout<<"";cout << s << endl;
        int index = 0;
        int l = b.size();

        vector <int> a, c, d; a.clear(); c.clear(); d.clear();

        if (l & 1) b.insert(b.begin(), 0);
        l=b.size();

        a.push_back(0);

        //cout<<"";for (int i = 0; i < b.size(); i++) cout << b[i]; cout << endl;

        while(index < l - 1){

            d.push_back(b[index++]);
            d.push_back(b[index++]);

            //cout<<"";for (int i = 0; i < d.size(); i++) cout << d[i]; cout << endl;
            multiply(a, d, c);
        }
       return c;
}
int main(){

    int t;

    scanf("%d",&t);

    string str;

    vector<int> ans,b;
    int size;

    while(t--){

        str.clear();ans.clear();b.clear();
        cin >> str;
        size=str.size();
        for(int i = 0; i < size; i++) b.push_back(str[i] - '0');

        ans=find_square_root(b);
        size= ans.size();
        for(int i = 0; i < size; i++) printf("%d",ans[i]); printf("\n");
    }
    return 0;
}
