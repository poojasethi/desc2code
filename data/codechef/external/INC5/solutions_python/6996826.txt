#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
vector<int> *v;
int count1[1000000]={0};
 int visited[1000000]={0};
int c,j;
void solve(long long int i)
{
    visited[i]=1;
    c++;
    int i1;
    for(i1=0;i1<v[i].size();i1++)
    if(!visited[v[i][i1]])
    solve(v[i][i1]);
}
void dfs(long long int n)
{
    j=0;
    for(int i=0;i<n;i++)
    visited[i]=0;
    for(long long int i = 0; i < n; i++)
        if(!visited[i])
        {
            c=0;
            solve(i);
            count1[j++]=c;
        }
}

int main() {
	// your code goes here
	long long int t,k,n,m,i=0,a,b;

	cin>>t;
	while(t--)
	{
	    cin>>n>>m>>k;
	    	 v=new vector<int>[n+1];
	    	i=0;
	    while(i<m)
	    {
	        cin>>a>>b;
	        v[a-1].push_back(b-1);
	        v[b-1].push_back(a-1);
	        i++;
	    }
	    dfs(n);
	    sort(count1,count1+j,std::greater<int>());
	    c=0;
	    i=0;
	    while((i<j)&&(k>0))
	    {
	        c+=count1[i++];
	        k--;
	    }
	    cout<<c<<endl;
	}
	
	return 0;
}
