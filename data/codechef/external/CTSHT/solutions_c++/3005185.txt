// FINDING MINIMUM DISTANCE IN UNWEIGHTED GRAPH 0S AND 1S
#include<stdio.h>
#include<stdlib.h>
#define MAX 210
typedef struct{
 int key;        
}element;
element queue[MAX];
int front,rear;
int **map,**dis,*visited;
void enqueue(int item){
     
 queue[++rear].key=item;     
}
int dequeue(){
 return queue[++front].key;    
}
int isemptyqueue(){
     
 if(front==rear)
  return 1;
 return 0;    
}
void bfs(int i,int n){
 
 dis[i][i]=0;     
 int temp,j;
 enqueue(i);
 visited[i]=1;
 //printf("her");
 while(!isemptyqueue()){
   temp=dequeue();                       
    
   for(j=0;j<n;j++)
   if(!visited[j]&&map[temp][j])
   {
     dis[i][j]=dis[i][temp]+1;
     enqueue(j);
     visited[j]=1;                       
   }                      
 }    
}
void caldis(int n){
 int i; 
 //printf("here");
 for(i=0;i<n;i++){
  front=-1;     
  rear=-1;    
  visited=(int*)calloc(n,sizeof(int));
  //printf("here");
  if(!visited[i])
   bfs(i,n);
  free(visited);
 }
}
int main(){
 int q,n,t,i,j,src,des;    
 char *str,ch;
 scanf("%d",&q);
 while(q--){
 scanf("%d",&n);
 map=(int**)malloc(n*sizeof(int*));
 dis=(int**)malloc(n*sizeof(int*));
 for(i=0;i<n;i++){
  map[i]=(int*)malloc(n*sizeof(int));   
  dis[i]=(int*)malloc(n*sizeof(int));
 }
 ch=getchar();
 str=(char*)malloc((n+1)*sizeof(char));
 for(i=0;i<n;i++){
   scanf("%s",str);
   for(j=0;j<n;j++){
     if(str[j]=='Y')
       map[i][j]=1;
      else
       map[i][j]=0; 
     dis[i][j]=-1;
   }
 }
 
  caldis(n); 
  scanf("%d",&t);
  
  while(t--){
    scanf("%d%d",&src,&des);
    printf("%d\n",dis[src][des]);         
  }
 }
  return 0;   
}
