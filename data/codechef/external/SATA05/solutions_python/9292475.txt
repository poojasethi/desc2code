#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) ((n) & (1LL << (i)))
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
#define EPS 1e-9
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos((ld) 0);
ll gcd(ll a, ll b) {ll r; while (b != 0) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
void addmod(ll& a, ll val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}

const int maxn = 2010;
int n;
int a[maxn];
int b[maxn];
int x[maxn];
int c[maxn];
int sum[maxn][maxn];
int r[maxn];
int pw[maxn][maxn];
int rp[maxn][maxn];

void solve() {
	cin>>n;
	FOR(i, 1, n + 1) cin>>a[i];
	FOR(i, 1, n + 1) {
		x[i] = MOD - i;
		pw[i][0] = 1; rp[i][0] = 1; rp[i][1] = fpow(x[i], MOD - 2);
		FOR(j, 1, n + 1) {
			pw[i][j] = (ll) pw[i][j - 1] * x[i] % MOD;
			rp[i][j] = (ll) rp[i][j - 1] * rp[i][1] % MOD;
		}
	}
	c[0] = MOD - 1; c[1] = 1;
	FOR(i, 2, n + 1) {
		FORd(j, n + 1, 0) {
			c[j] = (ll) c[j] * x[i] % MOD;
			if (j) addmod(c[j], c[j - 1]);
		}
	}
	reverse(c, c + n + 1);
	FOR(i, 1, n + 1) {
		FOR(j, 0, n + 1) {
			if (j) sum[i][j] = sum[i][j - 1];
			int d = (ll) rp[i][j] * c[j] % MOD;
			if (!(j & 1)) addmod(sum[i][j], d);
			else addmod(sum[i][j], MOD - d);
		}
	}
	FOR(i, 1, n + 1) {
		FOR(j, 1, n + 1) {
			int d = (ll) pw[i][j] * sum[i][j - 1] % MOD;
			if (!(j & 1)) d = MOD - d;
			r[j] = (c[j] - d + MOD) % MOD;
		}
		reverse(r, r + n);
		r[n - 1] = 1;
		int C = 1;
		FOR(j, 1, n + 1) if (i != j) {
			C = (ll) C * (i - j + MOD) % MOD;
		}
		int tot = 0;
		FOR(j, 1, n + 1) addmod(tot, (ll) r[j - 1] * a[j] % MOD);
		b[i] = (ll) tot * fpow(C, MOD - 2) % MOD;
	}
	FOR(i, 0, n) {
		int res = 0;
		FORd(j, n + 1, 0) {
			res = ((ll) res * i + b[j]) % MOD;
		}
		cout<<res<<" ";
	}
}

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
