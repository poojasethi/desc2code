#include <assert.h>
#include <memory.h>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

const ll MOD = 1e9 + 7;

int n;
ll L[2020];
ll M[2020][2020];

inline ll inv(ll x) {
  assert(x);
  assert(x > 0);
  int exp = MOD - 2;
  ll b = 1;
  while (exp) {
    x %= MOD;
    if (exp % 2) b *= x, b %= MOD;
    exp /= 2;
    x *= x;
  }
  return b;
}

inline ll fix(ll x) {
  x %= MOD;
  if (x < 0) x += MOD;
  return x;
}

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  ios_base::sync_with_stdio(false);

  cin >> n;
  for (int i = 0; i < n; i++) cin >> L[i];
  for (int j = 0; j < n; j++) {
    ll x = j + 1, cur = 1;
    for (int i = 0; i < n; i++) {
      M[i][j] = cur;
      cur *= x;
    }
  }

  // http:// ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19660023042.pdf
  // pages 2-3

  for (int i = 0; i < n; i++) M[i][n] = L[i];

  for (int i = 0; i < n; i++) {
    for (int j = n; --j > i;) {
      M[j][n] = fix(M[j][n] - M[j - 1][n] * (i + 1));
    }
  }

  for (int i = n; --i >= 0;) {
    for (int j = i; --j >= 0;) {
      M[i][n] = fix(M[i][n] * inv(i - j));
      M[j][n] = fix(M[j][n] - M[i][n]);
    }
  }

  for (int x = 0; x < n; x++) {
    ll xn = 1;
    ll px = 0;
    for (int d = 1; d <= n; d++) {
      xn *= x;
      xn %= MOD;
      px += xn * M[d - 1][n];
      px %= MOD;
    }
    cout << px << ((x == n - 1) ? '\n' : ' ');
  }

#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
