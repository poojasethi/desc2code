                /* Author -  Dipjal Chhetri */
                /* College - Jaypee Institute of Information Technology */
                import java.io.*;
                import java.util.*;
                import java.math.*;
                import java.util.Arrays;
                import java.util.ArrayList;
                import java.util.Comparator;
                import java.util.Collections;
                import java.util.Scanner;
                import java.io.PrintWriter;
                import java.math.BigInteger;
                import java.math.BigDecimal;
                 
                class FresherName{
                  
                   static InputReader reader;
                   static final long mod = (long) 1e9 + 7;
                   static int [] uf;
                    public static void main(String args[])throws IOException{
                       reader = new InputReader(System.in);
                       FresherName elect = new FresherName();
                       elect.run(reader);
                    }
                    
                    public static void run(InputReader reader) throws IOException{
                      // System.out.println("Lets test!");
                      int N = reader.readInt();
                      pre(N);
                      for(int i = 1; i <= N; ++i){
                          int u = reader.readInt();
                          int v = reader.readInt();
                          UNION(u , v);
                        }
                      HashMap < Integer , Integer > hs = new HashMap < Integer , Integer > ();
                      for(int i = 1; i <= N; ++i){
                          int uu = FIND(i);
                          if(hs.containsKey(uu)){
                              int x = hs.get(uu);
                              hs.remove(uu);
                              hs.put(uu , x + 1);
                            }else{
                                hs.put(uu , 1);
                            }
                        }
                        int to = hs.size();
                        System.out.println(to);
                        int a[] = new int[to];
                        int i = 0;
                        for(Map.Entry < Integer , Integer > e : hs.entrySet()){
                            a[i++] = e.getValue();
                        }
                        Arrays.sort(a);
                        for(int j = 0; j < i; ++j) System.out.print(a[j] + " ");
                        System.out.println();
                    }
                    
                    static int FIND(int u){
                        if(uf[u] != uf[uf[u]]){
                            return uf[u] = FIND(uf[u]);
                        }
                        return uf[u];
                    }
                    static void UNION(int u , int v){
                        int uu = FIND(u);
                        int vv = FIND(v);
                        if(uu == vv) return;
                        uf[uu] = vv;
                    }
                    static void pre(int n){
                        uf = new int[n + 1];
                        for(int i = 1; i <= n; ++i) uf[i] = i;
                    }
                    static final class InputReader {
                        private final InputStream stream;
                        private final byte[] buf = new byte[1024];
                        private int curChar;
                        private int numChars;
                 
                        public InputReader(InputStream stream) {
                            this.stream = stream;
                        }
                 
                        private int read() throws IOException {
                            if (curChar >= numChars) {
                                curChar = 0;
                                numChars = stream.read(buf);
                                if (numChars <= 0) {
                                    return -1;
                                }
                            }
                            return buf[curChar++];
                        }
                 
                        public final int readInt() throws IOException {
                            return (int)readLong();
                        }
                 
                        public final long readLong() throws IOException {
                            int c = read();
                            while (isSpaceChar(c)) {
                                c = read();
                                if (c == -1) throw new IOException();
                            }
                            boolean negative = false;
                            if (c == '-') {
                                negative = true;
                                c = read();
                            }
                            long res = 0;
                            do {
                                res *= 10;
                                res += c - '0';
                                c = read();
                            } while (!isSpaceChar(c));
                            return negative ? -res : res;
                        }
                 
                        public final int[] readIntArray(int size) throws IOException {
                            int[] array = new int[size];
                            for (int i=0; i<size; i++) {
                                array[i] = readInt();
                            }
                            return array;
                        }
                 
                        public final long[] readLongArray(int size) throws IOException {
                            long[] array = new long[size];
                            for (int i=0; i<size; i++) {
                                array[i] = readLong();
                            }
                            return array;
                        }
                 
                        public final String readString() throws IOException {
                            int c = read();
                            while (isSpaceChar(c)) {
                                c = read();
                            }
                            StringBuilder res = new StringBuilder();
                            do {
                                res.append((char)c);
                                c = read();
                            } while (!isSpaceChar(c));
                            return res.toString();
                        }
                 
                        private boolean isSpaceChar(int c) {
                            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
                        }
                    }
                }    