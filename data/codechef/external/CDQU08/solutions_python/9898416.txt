#include<stdio.h>
#include<algorithm>
typedef long long ll;
#define MAX 1003
ll p[MAX],rank[MAX],setsize[MAX];
void makeset(ll n)
{
	ll i;
	for(i=0;i<=n;i++)
	{
	p[i]=i;
	rank[i]=0;
	setsize[i]=1;
}
}
ll find(ll n)
{
	if(p[n]==n)
	return n;
	else return find(p[n]);
}
bool issameset(ll a,ll b)
{
	return find(a)==find(b);
}
void merge(ll a,ll b)
{
	if(!issameset(a,b))
	{
	   ll g=find(a);
	   ll f=find(b);
	   if(rank[g]>rank[f])
	   {
	   	p[f]=g;
	   	setsize[g]=setsize[g]+setsize[f];
	   	setsize[f]=0;
		}
		else
		{
				p[g]=f;
	   	setsize[f]=setsize[f]+setsize[g];
	   	setsize[g]=0;
			}
		if(rank[g]==rank[f])
		rank[f]++;	
	}
}
int main()
{
	ll n,i;
	ll a,b;
	scanf("%lld",&n);
	ll g1=n;
	makeset(MAX);
	while(n--)
	{
		scanf("%lld%lld",&a,&b);
		merge(a,b);
			}
	ll j;
	ll count=0;
	ll at[1005];
	ll b1=0;
	for(i=1;i<=g1;i++)
	if(setsize[i]>0)
	at[b1++]=setsize[i];
	std::sort(at,at+b1);
	printf("%lld\n",b1);
	for(i=0;i<b1;i++)
		printf("%lld ",at[i]);
		printf("\n");
		return 0;		
}