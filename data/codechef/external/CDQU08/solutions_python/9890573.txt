#include <bits/stdc++.h>
using namespace std;
int cnt=1,ar[1005],z=0;
int adj_List[1005][1005];
class Graph
{
	int tN;
	void _DFS(int curr, bool visited[]);
	
	public:
		Graph(int tN);
		void addEdge(int a, int b);
		void DFS();
};
 
Graph::Graph(int tN)
{
	this->tN=tN;
	memset(adj_List,0,sizeof(adj_List));
}
 
void Graph::addEdge(int a, int b)
{
	adj_List[a][b]=1;
	adj_List[b][a]=1;
}
 
void Graph::DFS()
{
	bool visited[tN+1];
	for(int i=0;i<=tN;i++)
		visited[i]=false;
		
	for(int i=1;i<=tN;i++)
		if(!visited[i])
		{
			_DFS(i,visited);
			ar[z++]=cnt;
			cnt=1;
		}
}
 
void Graph::_DFS(int node, bool visited[])
{
	visited[node]=true;
	//System.out.print(node+" ");
		
    for(int i=1;i<=tN;i++)
        if(adj_List[node][i])
       	if(!visited[i])
       	{
       	    cnt++;
           	_DFS(i, visited);
       	}
}
	
int main()
{
	int N,a,b;
	cin>>N;
	Graph g (N);
	for(int i=0;i<N;i++)
	{
		cin>>a>>b;
		g.addEdge(a,b);
	}
	g.DFS();
	sort(ar,ar+z);
	cout<<z<<endl;
	for(int i=0;i<z;i++)
	    cout<<ar[i]<<" ";
	cout<<endl;
	return 0;
} 