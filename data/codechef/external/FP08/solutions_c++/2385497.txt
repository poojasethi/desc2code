#include<iostream>
#include<vector>
#include<cstdio>
#include<algorithm>
#include<stack>
#include<queue>
#include<string>
#include<set>
#include<map>
#include<cstring>
#include<cmath>
#include<climits>
#include<cstdlib>
#include<utility>
#include<deque>
#include<functional>
#define pause system("pause")
#define nl printf("\n")
#define readint(x) scanf("%d",&x)
#define read2int(x,y) scanf("%d%d",&x,&y)
#define read3int(x,y,z) scanf("%d%d%d",&x,&y,&z)
 
#define MXC (100001)
#define MXP (MXC<<1)
 
using namespace std;
 
map<string,int> id;
 
int parent[MXP];
int comp[MXC];
 
int FIND(int x)
{
    if(x==parent[x]) return x;
    else
    return (parent[x]=FIND(parent[x]));
}
 
void init()
{
     id.clear();
     memset(parent,0,sizeof parent);
     memset(comp,0,sizeof comp);
}
 
int main()
{
    int T,curr_ppl,F,id1,id2,ans,p1,p2,p;
    string s1,s2;
    scanf("%d",&T);
    while(T--)
    {
              curr_ppl=0;
              scanf("%d",&F);
              init();
              while(F--)
              {
                        cin>>s1>>s2;
                        id1=id[s1]; id2=id[s2];
                        if(!id1 && !id2)
                        {
                                id[s1]=(id1=++curr_ppl);
                                id[s2]=(id2=++curr_ppl);
                                parent[id1]=parent[id2]=id1;
                                comp[id1]=2;
                                printf("%d\n",comp[id1]);
                        }
                        else
                        if(!id1)
                        {
                               id[s1]=(id1=++curr_ppl);
                               parent[id1]=parent[id2];
                               p=FIND(id2);
                               comp[p]+=1;
                               printf("%d\n",comp[p]);
                        }
                        else
                        if(!id2)
                        {
                               id[s2]=(id2=++curr_ppl);
                               parent[id2]=parent[id1];
                               p=FIND(id1);
                               comp[p]+=1;
                               printf("%d\n",comp[p]);
                        }
                        else
                        {
                               p1=FIND(id1);
                               p2=FIND(id2);
                               ans=comp[p1];
                               if(p1!=p2)
                               {
                                         if(comp[p1]>comp[p2])
                                         {
                                                             parent[p2]=parent[p1];
                                                             comp[p1]+=comp[p2];
                                                             ans=comp[p1];
                                         }
                                         else
                                         {
                                                             parent[p1]=parent[p2];
                                                             comp[p2]+=comp[p1];
                                                             ans=comp[p2];
                                         }
                               }
                               printf("%d\n",ans);
                        }
              }
    }
    return 0;
}