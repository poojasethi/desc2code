#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
using namespace std;
bool E[505][505], used[505];
int N, siz[505], deg[505];
vector<int> L;
bool cmp(int a, int b) {
	return deg[a] > deg[b];
}
void go(int x) {
	used[x] = true;
	L.push_back(x);
	for (int i = 1; i <= N; ++i)
		if (E[x][i] && !used[i]) go(i);
}
bool can() {
	memset(used, 0, sizeof(used));
	int co = 0;
	for (int i = 1; i <= N; ++i) {
		if (used[i]) continue;
		L.clear();
		go(i);
		if (L.size() == 1) continue;
		++co;
		sort(L.begin(), L.end(), cmp);
		int split;
		for (int i = 0; i < L.size(); ++i)
			if (deg[L[i]] >= i) {
				split = i;
			}
		for (int i = 0; i <= split; ++i)
			for (int j = i + 1; j <= split; ++j)
				if (!E[L[i]][L[j]]) return false;
		for (int i = split + 1; i < L.size(); ++i)
			for (int j = i + 1; j < L.size(); ++j)
				if (E[L[i]][L[j]]) return false;
	}
	if (co > 2) return false;
	return true;
}
int main() {
	int T;
	scanf("%d", &T);
	while (T--) {
		int M;
		scanf("%d%d", &N, &M);
		memset(E, 0, sizeof(E));
		memset(deg, 0, sizeof(deg));
		while (M--) {
			int a, b;
			scanf("%d%d", &a, &b);
			E[a][b] = E[b][a] = true;
			++deg[a];
			++deg[b];
		}
		printf(can() ? "YES\n" : "NO\n");
	}
}
