#include <iostream>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <vector>
#include<stack>
#include<set>
#include<limits.h>
#include <queue>
#include <map>
#include <cstdlib>
#include <algorithm>
//psyduck
#define ll long long
#define S(x) scanf("%d",&x)
#define Sf(x) scanf("%f",&x)
#define Slf(x) scanf("%lf",&x)
#define Sl(x) scanf("%lld",&x)
#define P(x)  printf("%d\n", x)
#define Pf(x)  printf("%f\n", x)
#define Plf(x)  printf("%lf\n", x)
#define Pl(x)  printf("%lld\n", x)
#define mem(x,i) memset(x,i,sizeof(x))
#define pb push_back
#define mod 1000000007
#define INF 1000000000000000008LL
using namespace std;
ll int solve(ll int n);
ll int fun(ll int dig);
ll int dp[100];
int main()
{

    mem(dp,-1);
    ll int n;
    cin >> n;
    ll lo = 1;
    ll hi = 1000000000000000000LL;
  //  int f = 1;
  ll int ans;
    while(lo < hi){
        ll mid = (lo+hi)/2;
        ll int ans = solve(mid);
        //cout << mid<<" "<<ans<<endl;
        if(ans >= n){
            hi = mid;
        }
        else {
            lo = mid+1;
        }
    }
   ans = solve(lo);
   if(ans == n){
    Pl(lo);
   }
   else{
    cout <<"-1"<<endl;
   }
    //ll int tmp = fun(1);
    //cout << ans;
}
ll int solve(ll int n)
{
    ll int rev,num,dig,val,len,j,pwr;
    char s[20];

    sprintf(s,"%lld",n);
    len = strlen(s);
    dig = len;
    ll ans = 0;
    for (int i = 0; i < len; i++){
        val = s[i]-48;
        for(j = 0; j < val; j++){
            ans = ans + fun(dig-1);
            if(j == 1){
                ll pwr = 1;
                for (int k = 1; k <= (dig-1); k++){
                    pwr = pwr*10;
                }
                ans = ans+pwr;
            }
        }
        if(j == 1){
            pwr = 0;
            for (int k = i+1; k < len; k++){
                pwr = pwr*10+(s[k]-48);
            }
            ans = ans+pwr+1;
        }
        dig = dig-1;
    }
    return ans;
}
ll int fun(ll int dig)
{
    ll int ans = 0;
    if(dig == 0){
        return 0;
    }
    if(dp[dig] != -1){
        return dp[dig];
    }
    for(int i = 0; i <= 9; i++){
        ans = ans + fun(dig-1);
        if(i == 1){
           ll pwr = 1;
            for (int j = 1; j <= (dig-1); j++){
                pwr = pwr*10;
            }
            ans = ans+pwr;
        }
    }
    return dp[dig] = ans;
}
