#include <cstdio>
#include <bits/stdc++.h>
#include <iostream>
using std::string;
 
static struct IO {
	char tmp[1 << 10];
 
	// fast input routines
	char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }
 
	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
	inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }
 
	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }
 
	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
	// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
using namespace std;

int min(int a,int b)
{
    return a<b?a:b;
}

int north[1005][1005];
	    int south[1005][1005];
	    int east[1005][1005];
	    int west[1005][1005];

int main() {
	// your code goes here
	ios_base::sync_with_stdio(false);
	//cin.tie(NULL),cout.tie(NULL);
	int t,i,n,m,j,cost;
	cin>>t;
	while(t--)
	{
	    cin>>n>>m;
	    int arr[n][m];
	    cost=INT_MAX;
	    for(i=0;i<n;i++)
	    {
	        for(j=0;j<m;j++)
	        {
	            cin>>arr[i][j];
	        }
	    }
	   
	    //memset(north,0,sizeof(north));
	    //memset(south,0,sizeof(south));
	    //memset(east,0,sizeof(east));
	    //memset(west,0,sizeof(west));
	    
	    for(i=0;i<m;i++)
	    {
	        south[n-1][i]=arr[n-1][i];
	        north[0][i]=arr[0][i];
	    }
	    
	    for(i=0;i<n;i++)
	    {
	        east[i][m-1]=arr[i][m-1];
	        west[i][0]=arr[i][0];
	    }
	    
	    for(i=0;i<n;i++)
	    {
	        for(j=0;j<m;j++)
	        {
	            if(i!=0)
	            {
	             north[i][j]=min(arr[i][j],arr[i][j]+north[i-1][j]);
	            }
	            if(j!=0)
	            {
	             west[i][j]=min(arr[i][j],arr[i][j]+west[i][j-1]);
	            }
	        }
	    }
	    
	    for(i=n-1;i>=0;i--)
	    {
	        for(j=m-1;j>=0;j--)
	        {
	            if(i!=n-1)
	            {
	             south[i][j]=min(arr[i][j],arr[i][j]+south[i+1][j]);
	            }
	            if(j!=m-1)
	            {
	             east[i][j]=min(arr[i][j],arr[i][j]+east[i][j+1]);
	            }
	        }
	    }
	    
	    for(i=0;i<n;i++)
	    {
	        for(j=0;j<m;j++)
	        {
	            cost=min(cost,east[i][j]+west[i][j]+north[i][j]+south[i][j]-3*arr[i][j]);
	        }
	    }
	    
	    cout<<cost<<'\n';
	}
	return 0;
}
