//kanv kumar
#include <bits/stdc++.h>
using namespace std;
int dpn[1001][1001],dps[1001][1001],dpw[1001][1001],dpe[1001][1001];
int main(int argc, char const *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);cout.tie(NULL);
	int t;cin>>t;
	while(t--)
	{
		/*memset(dpn,0,sizeof(dpn));
		memset(dps,0,sizeof(dps));
		memset(dpw,0,sizeof(dpw));
		memset(dpe,0,sizeof(dpe));*/
		int n,m,c[1001][1001];
		cin>>n>>m;
		for (int i = 1; i<=n ; ++i)
		{
			for (int j = 1; j<=m ; ++j)
			{
				cin>>c[i][j];
			}
		}
		//base cases
		for (int j = 1; j<=m ; ++j) 
		{
			dpn[1][j]=c[1][j]; //north...top row
			dps[n][j]=c[n][j]; //south..bottom row
		}
		for (int i =1 ; i<=n ; ++i) 
		{
			dpw[i][1]=c[i][1]; //west..leftmost col
			dpe[i][m]=c[i][m];  //east...rightmost col
		}

		for (int i = 1; i <=n ; ++i) 
		{
			for (int j = 1; j <= m ; ++j)
			{
				if(i>=2) //north
					dpn[i][j]=min(c[i][j],c[i][j]+dpn[i-1][j]);
				if(j>=2) //west
					dpw[i][j]=min(c[i][j],c[i][j]+dpw[i][j-1]);	
			}
		}

		for (int i = n; i >=1 ; i--) 
		{
			for (int j =m ; j>=1 ; j--)
			{
				if(i!=n) //south
					dps[i][j]=min(c[i][j],c[i][j]+dps[i+1][j]); 
				if(j!=m) //east
					dpe[i][j]=min(c[i][j],c[i][j]+dpe[i][j+1]);
			}
		}

		int ans=INT_MAX;
		for (int i = 1; i<=n ; ++i)
		{
			for (int j = 1; j<=m ; ++j)
			{
				ans=min(ans,dpn[i][j]+dps[i][j]+dpw[i][j]+dpe[i][j]-3*c[i][j]);
			}
		}
		
		cout<<ans<<endl;
	}
	return 0;
}