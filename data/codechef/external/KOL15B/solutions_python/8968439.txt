#include<bits/stdc++.h>
using namespace std;
#ifndef ONLINE_JUDGE
#define getcx getchar
#define putcx putchar
#else
#define getcx getchar_unlocked
#define putcx putchar_unlocked
#endif
#define maxm 1000000007
inline long inp() {
    register int n=0;
    register int c = getcx();
    int sign = 1;
    while(c < '0' || c > '9') {
        if(c == '-') sign=-1;
        c = getcx();
    }
    while(c >= '0' && c <= '9') {
        n = (n << 3) + (n << 1) + c - '0';
        c = getcx();
    }
    n = n * sign;
    return n;
}
inline void inps(char *str){
    register char c;
    register int i = 0;
    while((c = getcx()) == '\n' || c == ' '){}
    while(c != '\n' && (int)c != EOF){
        str[i++] = c;
        c = getcx();
    }
    str[i] = '\0';
}
long long int powr (long long int a, long long int b)
{
    if (b == 0)
        return 1;
    long long int x = powr(a, b/2);
    if (b % 2 == 0)
        return (x*x)%maxm;
    else
        return (((x*x)%maxm)*a)%maxm;
}
//
int a[1005][1005];
int up[1005][1005], dwn[1005][1005], lft[1005][1005], rght[1005][1005];
int main(){
    int t;
    t=inp();
    while(t--){
        int n, m;
        n=inp(); m=inp();

        for (int i = 0; i <= n + 1; i++){
            for (int j = 0; j <= m + 1; j++){
                a[i][j] = 0;
                up[i][j] = 0;
                dwn[i][j] = 0;
                lft[i][j] = 0;
                rght[i][j] = 0;
            }
        }

        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= m; j++){
                a[i][j]=inp();
                up[i][j] = min(0, up[i - 1][j] + a[i][j]);
                lft[i][j] = min(0, lft[i][j - 1] + a[i][j]);
            }
        }
        for (int i = n; i >= 1; i--){
            for (int j = m; j >= 1; j--){
                dwn[i][j] = min(0, dwn[i + 1][j] + a[i][j]);
                rght[i][j] = min(0, rght[i][j + 1] + a[i][j]);
            }
        }
        int ans = maxm;
        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= m; j++){
                ans = min(ans, up[i - 1][j] + lft[i][j - 1] + dwn[i + 1][j] + rght[i][j + 1] + a[i][j]);
            }
        }
        printf("%d\n", ans);
    }
}