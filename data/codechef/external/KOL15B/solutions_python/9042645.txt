#include<iostream>
#include<cstdio>
#include<climits>

using namespace std;
long int a[1001][1001],up[1001][1001],down[1001][1001],oppright[1001][1001],oppleft[1001][1001];

int main(){
    int n,m,i,j,t,tmp;
    long int min_so_far;
    scanf("%d",&t);
    while(t--){
        scanf("%d%d",&n,&m);
        for(i=1;i<=n;i++){
            for(j=1;j<=m;j++){
                scanf("%d",&a[i][j]);
            }
        }
        for(j=1;j<=m;j++){
           for(i=n;i>=1;i--){                           //from bottom to up (UPWARDS)
              if(i==n){
                up[i][j]=a[i][j];
                min_so_far=up[i][j];
              }
              else{
                if(min_so_far>0){
                    min_so_far=a[i][j];
                    up[i][j]=min_so_far;
                }
                else{
                  min_so_far+=a[i][j];
                  up[i][j]=min_so_far;
                }
              }
           }
        }

        for(j=1;j<=m;j++){
           for(i=1;i<=n;i++){                           //from top to bottom (DOWNWARDS)
              if(i==1){
                down[i][j]=a[i][j];
                min_so_far=down[i][j];
              }
              else{
                if(min_so_far>0){
                    min_so_far=a[i][j];
                    down[i][j]=min_so_far;
                }
                else{
                  min_so_far+=a[i][j];
                  down[i][j]=min_so_far;
                }
              }
           }
        }

       for(i=1;i<=n;i++){                               //from oppright to oppleft(RIGHTWARDS)
          for(j=1;j<=m;j++){
            if(j==1){
               oppleft[i][j]=a[i][j];
               min_so_far=oppleft[i][j];
            }
            else{
                if(min_so_far>0){
                    min_so_far=a[i][j];
                    oppleft[i][j]=min_so_far;
                }
                else{
                    min_so_far+=a[i][j];
                    oppleft[i][j]=min_so_far;
                }
            }
          }
       }

       for(i=1;i<=n;i++){                               //from oppleft to oppright(LEFTWARDS)
          for(j=m;j>=1;j--){
            if(j==m){
               oppright[i][j]=a[i][j];
               min_so_far=oppright[i][j];
            }
            else{
                if(min_so_far>0){
                    min_so_far=a[i][j];
                    oppright[i][j]=min_so_far;
                }
                else{
                    min_so_far+=a[i][j];
                    oppright[i][j]=min_so_far;
                }
            }
          }
       }

       long int smallest,rough;
       smallest=up[1][1]+down[1][1]+oppleft[1][1]+oppright[1][1]-(3*a[1][1]);

       for(i=1;i<=n;i++){
         for(j=1;j<=m;j++){
            rough=up[i][j]+down[i][j]+oppleft[i][j]+oppright[i][j]-(3*a[i][j]);
            if(rough<smallest)
                smallest=rough;
         }
       }
       printf("%ld \n",smallest);

    }

    return 0;
}
