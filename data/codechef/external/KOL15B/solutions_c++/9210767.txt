#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <climits>
#define gc getchar_unlocked
#define fori(i, start, end) for (int i = (int) start; i <= (int)end; i++)
#define forir(i, start, end) for (int i = (int) start; i >= (int)end; i--)
#define min(a, b) (int) a > (int) b ? b:a
using namespace std;

int read_int()
{
    register int x = 0, c = gc();
    int sign = 1;
    while(c!='-' && (c<48 || c>57) ) c = gc();
    if(c=='-')
        sign = -1, c = gc();
    while(c>=48 && c<=57)
        x = (x<<1) + (x<<3) + c - 48, c = gc();
    return sign*x;
}

int input[1001][1001];
int Aux[4][1002][1002];
int main()
{
    int T = read_int();
    while(T--)
    {
         int N = read_int(), M = read_int();

         fori(i, 0, N+1)
         {
             fori(j, 0, M+1)
             {
                input[i][j] = 0;
                Aux[0][i][j] = 0;
                Aux[1][i][j] = 0;
                Aux[2][i][j] = 0;
                Aux[3][i][j] = 0;
             }
         }
         fori(i, 1, N)
         {
             fori(j, 1, M)
             {
                  input[i][j] = read_int();
             }
         }

         fori(i, 1, N)
         {
             fori(j, 1, M)
             {
                  Aux[0][i][j] = min(Aux[0][i-1][j] + input[i][j], input[i][j]);
                  Aux[1][N + 1 - i][j] = min(Aux[1][N + 1 - i + 1][j]+input[N + 1 - i][j], input[N + 1 - i][j]);
                  Aux[2][i][j] = min(Aux[2][i][j-1]+ input[i][j], input[i][j]);
                  Aux[3][i][M + 1 - j] = min(Aux[3][i][M+1 - j+1]+ input[i][M+1-j], input[i][M+1-j]);
             }
         }

         long int minimum = LONG_MAX;
         long int sum = 0;
         fori(i, 1, N)
         {
             sum = 0;
              fori(j, 1, M)
              {
                sum = Aux[0][i][j] + Aux[1][i][j] + Aux[2][i][j] + Aux[3][i][j] - 3 * input[i][j];
                if (sum < minimum)
                {
                     minimum = sum;
                }
              }
         }

         printf("%d\n", minimum);
    }
}
