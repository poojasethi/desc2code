#include<stdio.h>
#define ll long long
ll segtree_sum[400010]={0};
ll lazy[400010]={0};
void initialize(){
     int i;
     for(i=0;i<400010;++i){
         segtree_sum[i]=0;
         lazy[i]=0;
     }
}
void lazy_update(int low,int high,int qlow,int qhigh,int pos,ll delta){
     if(low>high)
        return;
     if(lazy[pos]!=0){
        segtree_sum[pos]+=(high-low+1)*lazy[pos];
        if(low!=high){
           lazy[2*pos+1]+=lazy[pos];
           lazy[2*pos+2]+=lazy[pos];
        }
        lazy[pos]=0;
     }
     if(qlow>high||qhigh<low)
        return;
     if(qlow<=low&&qhigh>=high){
        segtree_sum[pos]+=(high-low+1)*delta;
        if(low!=high){
           lazy[2*pos+1]+=delta;
           lazy[2*pos+2]+=delta;
        }
        return;
     }
     int mid=(low+high)/2;
     lazy_update(low,mid,qlow,qhigh,2*pos+1,delta);
     lazy_update(mid+1,high,qlow,qhigh,2*pos+2,delta);
     segtree_sum[pos]=segtree_sum[2*pos+1]+segtree_sum[2*pos+2];
}
ll query_segtree(int low,int high,int qlow,int qhigh,int pos){
     if(low>high)
        return 0;
     if(lazy[pos]!=0){
        segtree_sum[pos]+=(high-low+1)*lazy[pos];
        if(low!=high){
           lazy[2*pos+1]+=lazy[pos];
           lazy[2*pos+2]+=lazy[pos];
        }
        lazy[pos]=0;
     }
     if(qlow>high||qhigh<low)
        return 0;
     if(qlow<=low&&qhigh>=high)
        return segtree_sum[pos];
     int mid=(low+high)/2;
     return query_segtree(low,mid,qlow,qhigh,2*pos+1)+query_segtree(mid+1,high,qlow,qhigh,2*pos+2);
}
int main(){
    int t,n,qu,p,q,i,delta,choice;
    scanf("%d",&t);
    while(t--){
       scanf("%d %d",&n,&qu);
       initialize();
       while(qu--){
          scanf("%d %d %d",&choice,&p,&q);
          --p; --q;
          if(choice==1){
             scanf("%d",&delta);
             lazy_update(0,n-1,p,q,0,delta);
          }
          else{
             ll ans=query_segtree(0,n-1,p,q,0);
             printf("%lld\n",ans);
          }
       }
    }
    return 0;
}
             
