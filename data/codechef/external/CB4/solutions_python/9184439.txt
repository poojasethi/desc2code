
#include <bits/stdc++.h>
# define sz(a) int((a).size())
# define all(c) (c).begin(),(c).end() 
# define allr(c) (c).rbegin(),(c).rend() 

using namespace std;

typedef long long int lli;

lli node[400002];
lli up[400002];

void update(int l, int h, int a, int b, int i, lli v) {
    if (a <= l && h <= b) {
        node[i] += (h - l + 1) * v;
        up[i] += v;
        return;
    }
    else if (b < l || a > h) return;

    int left = 2 * i + 1;
    int right = 2 * i + 2;
    int mid = (l + h) / 2;

    if (up[i]) {
        node[left] += (mid - l + 1) * up[i];
        up[left] += up[i];
        node[right] += (h - mid) * up[i];
        up[right] += up[i];
        up[i] = 0;
    }

    update(l, mid, a, b, left, v);
    update(mid + 1, h, a, b, right, v);
    node[i] = node[left] + node[right];
}

lli merge(int l, int h, int a, int b, int i) {
    if (a <= l && h <= b) return node[i];
    else if (b < l || a > h) return 0;

    int left = 2 * i + 1;
    int right = 2 * i + 2;
    int mid = (l + h) / 2;

    if (up[i]) {
        node[left] += (mid - l + 1) * up[i];
        up[left] += up[i];
        node[right] += (h - mid) * up[i];
        up[right] += up[i];
        up[i] = 0;
    }
    return merge(l, mid, a, b, left) + merge(mid + 1, h, a, b, right);
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        memset(node, 0, sizeof(node));
        memset(up, 0, sizeof(up));
        int n, c;
        scanf("%d %d", &n, &c);
        for (int i = 0; i < c; ++i) {
            int a;
            scanf("%d", &a);
            if (a == 1) {
                int b, c, d;
                scanf("%d %d %d", &b, &c, &d);
                update(1, n, b, c, 0, d);
            }
            else {
                int b, c;
                scanf("%d %d", &b, &c);
                printf("%lld\n", merge(1, n, b, c, 0));
            }
        }
    }
}

