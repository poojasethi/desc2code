#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i,l,n) for(i=l;i<n;i++)
#define sf(a) scanf("%lld",&a)
#define pf(a) printf("%lld",a)
#define line() printf("\n")
#define spc() printf(" ")
ll tree[262200]={0},ar[1000000],lazy[262200]={0};
void update(ll node,ll start,ll end,ll l,ll r,ll val)
{
	if(lazy[node]!=0)
	{
		tree[node]+=(end-start+1)*lazy[node];
		if(start!=end)
		{
			lazy[2*node]+=lazy[node];
			lazy[2*node+1]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(l>end||r<start||start>end)
	return;
	if(l<=start&&r>=end)
	{
		tree[node]+=(end-start+1)*val;
		if(start!=end)
		{
			lazy[2*node]+=val;
			lazy[2*node+1]+=val;	
		
		}
		return;
	}
	ll mid=(start+end)/2;
	update(node*2,start,mid,l,r,val);
	update(node*2+1,mid+1,end,l,r,val);
	tree[node]=tree[2*node]+tree[2*node+1];
}
ll rangequery(ll node,ll start,ll end,ll l,ll r)
{
	if(l>end||r<start||start>end)
	return 0;
	if(lazy[node]!=0)
	{
		tree[node]+=(end-start+1)*lazy[node];
		if(start!=end)	
		{
			lazy[node*2]+=lazy[node];
			lazy[node*2+1]+=lazy[node];
		
		}
		lazy[node]=0;
	
	}
	
	if(l<=start&&r>=end)
	return tree[node];
	ll p1,p2,mid=(start+end)/2;
	p1=rangequery(node*2,start,mid,l,r);
	p2=rangequery(node*2+1,mid+1,end,l,r);
return (p1+p2);
}
int main()
{
	ll t;
	sf(t);
	while(t--)
	{		std::memset(lazy, 0, sizeof lazy);
			std::memset(tree, 0, sizeof tree);
		ll n,i,j,w,x,y,z,q;
		sf(n);sf(q);
		while(q--)
		{
			sf(w);sf(x);sf(y);
			if(w==1)
			{
				sf(z);
				update(1,0,n-1,x-1,y-1,z);
			}
			else
			{
				ll ans=rangequery(1,0,n-1,x-1,y-1);			
				pf(ans);
				line();
			}
		}		
	}
return 0;
}