#include<bits/stdc++.h>
using namespace std;
long long int lazy[1000000]={0};
long long int tree[1000000]={0};
long long int getmid(long long int p,long long int q)
{
	return p + (q-p)/2;
}
void update(long long int ss,long long int se,long long int us,long long int ue,long long int si,long long int diff)
{
	if(lazy[si]!=0)
	{
		tree[si]+=(se-ss+1)*lazy[si];
		if(ss!=se)
		{
			lazy[si*2+1]+=lazy[si];
			lazy[si*2+2]+=lazy[si];
		}
		lazy[si]=0;
	}
	//out of range
	if(us>se || ue<ss || ss>se)
	return;
	//complete in range
	if(ss>=us && se<=ue)
	{
		tree[si]+=(se-ss+1)*diff;
		if(ss!=se)
		{
			lazy[si*2+1]+=diff;
			lazy[si*2+2]+=diff;
		}
		return;
	}
	long long int mid = getmid(ss,se);
	update(ss,mid,us,ue,2*si+1,diff);
	update(mid+1,se,us,ue,2*si+2,diff);
	tree[si] = tree[si*2+1] + tree[si*2 + 2];
}
long long int getsum(long long int ss,long long int se,long long int qs,long long int qe,long long int si)
{
	if(lazy[si]!=0)
	{
		tree[si]+=(se-ss+1)*lazy[si];
		if(ss!=se)
		{
			lazy[si*2+1]+=lazy[si];
			lazy[si*2+2]+=lazy[si];
		}
		lazy[si]=0;
	}
	if(qs>se || qe<ss || ss>se)
	return 0;
	if(ss>=qs && se<=qe)
	{
		return tree[si];
	}
	long long int mid = getmid(ss,se);
    return getsum(ss, mid, qs, qe, 2*si+1) +
           getsum(mid+1, se, qs, qe, 2*si+2);
}
int main()
{
	long long int t;cin>>t;
	while(t--)
	{	memset(lazy,0,sizeof(lazy));memset(tree,0,sizeof(tree));
		long long int n,m;
		cin>>n>>m;
		long long int arr[n];
		for(long long int i=0;i<n;i++)
		{
			arr[i]=0;
		}
		while(m--)
		{
			long long int choice;
			cin>>choice;
			if(choice==1)
			{
				long long int p,q,v;
				cin>>p>>q>>v;
				update(0,n-1,p-1,q-1,0,v);
			}
			else
			{
				long long int p,q;
				cin>>p>>q;
				cout<<getsum(0, n-1, p-1, q-1, 0)<<endl;
			}
		}
	}
}