#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#define MAXI 1000000
#define test int t; cin >> t; while(t--)
typedef long long ll;

using namespace std;

ll tree[MAXI],lazy[MAXI];
void update(int r1,int r2,int si,int se,int index,ll diff){
    if(lazy[index]!=0){
        tree[index]+=(se-si+1)*lazy[index];
        if(si!=se){
            lazy[2*index+1]+=lazy[index];
            lazy[2*index+2]+=lazy[index];
        }
        lazy[index]=0;
    }
    
    if(si>se || si>r2 || se<r1)return;
    
    if(si>=r1 && se<=r2){
        tree[index]+=(se-si+1)*diff;
        if(si!=se){
            lazy[2*index+1]+=diff;
            lazy[2*index+2]+=diff;
        }
        return;
    }
    
    int mid=(si+se)/2;
    update(r1,r2,si,mid,2*index+1,diff);
    update(r1,r2,mid+1,se,2*index+2,diff);
    tree[index]=tree[2*index+1]+tree[2*index+2];
}

ll getsum(int r1,int r2,int si,int se,int index){
    if(lazy[index]!=0){
        tree[index]+=(se-si+1)*lazy[index];
        if(si!=se){
            lazy[2*index+1]+=lazy[index];
            lazy[2*index+2]+=lazy[index];
        }
        lazy[index]=0;
    }
    if(si>se || si>r2 || se<r1)return 0;
    
    if(si>=r1 && se<=r2)return tree[index];
    
    int mid=(si+se)/2;
    return getsum(r1,r2,si,mid,2*index+1)+getsum(r1,r2,mid+1,se,2*index+2);
}
int main() {
	test{
	    int n,q; cin >> n >> q;
	    for(int i=0;i<MAXI;i++)lazy[i]=tree[i]=0;
	    
	    for(int i=0;i<q;i++){
	        int a; cin >> a;
	        if(a==1){
	            int p,q;ll diff;
	            scanf("%d%d%lld",&p,&q,&diff);
	            update(p,q,0,n-1,0,diff);
	        }
	        else{
	            int p,q;scanf("%d%d",&p,&q);
	            ll k=getsum(p,q,0,n-1,0);
	            printf("%lld\n",k);
	        }
	    }
	}
	return 0;
}
