#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> 
#include <algorithm>
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;
 
//M lazy 
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(long long int i=0;i<n;i++)
#define fu(i,a,n) for(long long int i=a;i<=n;i++)
#define fd(i,n,a) for(long long int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)
 
#define gi(n) scanf("%lld",&n)
#define gl(n) cin >> n
#define pi(n) printf("%lld",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
#define MOD 1000000009
#define MAX 100005
#define LMT 1005
#define LEN 100000
using namespace std;
#define ll long long int
 
 ll arr[MAX],n;
 ll tree[MAX];
 ll tree1[MAX];
void update(ll a,ll b)
{
	ll index=a;
	
	while(index<=MAX)
	{
		//	cout<<index<<" ";
		tree[index]+=b;
		index+= index & (-index);
	
	}
	//cout<<endl;
	
}
void update1(ll a,ll b)
{
	ll index=a;
	
	while(index<=MAX)
	{
		//	cout<<index<<" ";
		tree1[index]+=b;
		index+= index & (-index);
	
	}
	//cout<<endl;
	
}
ll find(ll a)
{
	ll sum=0;
	
	while(a)
	{
		//	cout<<a<<" ";
		sum+=tree[a];
		a -= a & (-a);
	}
//	cout<<endl;
	return sum;
}
ll find1(ll a)
{
	ll sum=0;
	
	while(a)
	{
		//	cout<<a<<" ";
		sum+=tree1[a];
		a -= a & (-a);
	}
//	cout<<endl;
	return sum;
}
int main()
{   long long int a,b,c,m,x,k,i,j,ans=1,cnt,count=0;

	cin>>x;
	while(x--)
	{
		memset(tree,0,sizeof(tree));
			memset(tree1,0,sizeof(tree1));
	cin>>n>>m;
	
	for(i=0;i<m;i++)
	{
		cin>>a;
		if(a==1)
		{
			cin>>a>>b>>c;
			
			update(a,c);
			update(b+1,-c);
			update1(a,(a-1)*c);
			update1(b+1,-b*c);
		}
		else
		{
			cin>>a>>b;
			
		cout<<find(b)*b-find1(b)-find(a-1)*(a-1)+find1(a-1)<<endl;
		}
	}
	
		

	}
    
  
	return 0;
}
