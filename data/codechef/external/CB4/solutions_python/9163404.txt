#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <limits.h>
#include <vector>
#include <stdlib.h>
#include <algorithm>
#include <memory.h>
#include <string.h>
#include <math.h>
#include <string>
#include <algorithm>
#include <functional>
#include <cassert>

using namespace std;
typedef long long lli;
typedef vector<int> vi;
typedef pair<int, int> pii;

//#define _LOCAL_DEBUG_
#ifdef _LOCAL_DEBUG_
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
#define eprintf(...) 
#endif
const int MAX = 1e5 + 100;
int n;

lli sum[4 * MAX];
lli toAdd[4 * MAX];

void clear() {
    memset(sum, 0, sizeof(sum));
    memset(toAdd, 0, sizeof(toAdd));
}

void push(int v, int tl, int tr) {
    toAdd[2 * v] += toAdd[v], toAdd[2 * v + 1] += toAdd[v];
    int tm = (tl + tr) / 2;
    sum[2 * v] += 1LL * (tm - tl + 1) * toAdd[v];
    sum[2 * v + 1] += 1LL * (tr - tm) * toAdd[v];
    toAdd[v] = 0;
}

lli query(int v, int tl, int tr, int l, int r) {
    if (l > r) return 0;
    if (l == tl && r == tr)
        return sum[v];
    push(v, tl, tr);
    int tm = (tl + tr) / 2;
    lli res = 0;
    res += query(2 * v, tl, tm, l, min(tm, r));
    res += query(2 * v + 1, tm + 1, tr, max(l, tm + 1), r);
    return res;
}

void update(int v, int tl, int tr, int l, int r, int val) {
    if (l > r) return;
    sum[v] += (r - l + 1) * 1LL * val;
    if (tl == l && tr == r) {
        toAdd[v] += val;
        return;
    }
    push(v, tl, tr);
    int tm = (tl + tr) / 2;
    update(2 * v, tl, tm, l, min(r, tm), val);
    update(2 * v + 1, tm + 1, tr, max(l, tm + 1), r, val);
}

void solve() {
    int  q;
    scanf("%d%d", &n, &q);
    while (q--) {
        int type;
        scanf("%d", &type);
        if (type == 1) {
            int l, r, v;
            scanf("%d%d%d", &l, &r, &v);
            l--, r--;
            update(1, 0, n - 1, l, r, v);
        }
        else {
            int l, r;
            scanf("%d%d", &l, &r);
            l--, r--;
            lli res = query(1, 0, n - 1, l, r);
            printf("%lld\n", res);
        }
    }
}

int main() {
#ifdef _LOCAL_VAN
    freopen("in.txt", "r", stdin);
#endif
    int t;
    scanf("%d", &t);
    while (t--) {
        clear();
        solve();
    }
    return 0;
}