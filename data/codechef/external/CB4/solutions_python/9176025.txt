#include <bits/stdc++.h>
#define ll long long
#define gc getchar
//#define gc getchar_unlocked
const int N = 1e5 + 5;
int n;
ll BIT1[N], BIT2[N];
using namespace std;
void update_point(ll tree[], int index, ll value){
      while( index <= n ){
                tree[index] += value;
                index += index & (-index);
      }
}
ll range_update(int p, int q, ll v){
      update_point( BIT1, p, v);
      update_point( BIT1, q+1, -v);
      update_point( BIT2, p, v * (p-1) );
      update_point( BIT2, q+1, -v*q);
}
ll query(ll tree[], int index){
      ll sum = 0;
      while(index){
            sum += tree[index];
            index -= index & (-index);
      }
      return sum;
}
ll query(int a){
      return query( BIT1, a) * a - query( BIT2, a);
}
ll range_query( int p, int q){
      return query(q) - query(p-1);
}
int main(){
	int t, i, j, c, choice, p, q;
        ll ans, v;
	scanf( "%d", &t);
    	while(t--){
                scanf( "%d %d", &n, &c);
                memset( BIT1, 0, sizeof BIT1);
                memset( BIT2, 0, sizeof BIT2);
                while( c--){
                        scanf( "%d %d %d", &choice, &p, &q);
                        choice--;
                        if( choice ){
                                ans = range_query( p, q);
                                printf("%lld\n", ans);
                        }
                        else{
                                scanf("%lld", &v);
                                range_update( p, q, v);
                        }
                }
    	}
    	return 0;
}
