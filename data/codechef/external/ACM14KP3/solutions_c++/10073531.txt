#include<bits/stdc++.h>
#define SIZE 2000009
#define ll long long

using namespace std;

inline bool compare(int a,int b, vector<int> &A){
	return A[a]+a >= A[b] +b;
}


class SegmentTree{                                                           // Point update Range Query Std SEg Tree
	vector<int> st, A;
	int n;
	int left(int p){return p<<1;}
	int right(int p){return (p<<1) +1;}
	int rmq(int p, int L,int R, int i,int j){
		if(R<i || L>j) return -1;
		if(L>i && R<j) return st[p];
		if(L==R) return st[p];
		int p1 = rmq(left(p), L  , (L+R)/2,i, j );
		int p2 = rmq(right(p), (L+R)/2 +1, R, i, j);
		if(p1 == -1)
			return p2;
		if(p2 == -1)
			return p1;
		return compare(p1,p2,A) ? p1: p2;
	}
	void build_st(int p , int L, int R){
		if(L == R) {st[p] = L;return;}

		build_st(left(p), L  , (L+R)/2);
		build_st(right(p), (L+R)/2+1, R);
		int p1 = st[left(p)] , p2 = st[right(p)];
		st[p] = (compare(p1,p2,A) ? p1 : p2 );
	}

	public:

	SegmentTree(vector<int> &hol){
		st.assign(4*hol.size(),0);
		A = hol;
		n = hol.size() ;
		build_st(1,0,n-1);
	}
	int rmq(int i, int j){
		return rmq(1, 0, n-1, i, j);
	}
};



void zalgor(string &s, vector<int> &z){
	int L = 0, R = 0;
	int n = s.length();
	for (int i = 1; i < n; i++) {
		if (i > R) {
			L = R = i;
			while (R < n && s[R-L] == s[R]) R++;
			z[i] = R-L; R--;
		} else {
			int k = i-L;
			if (z[k] < R-i+1) z[i] = z[k];
			else {
				L = i;
				while (R < n && s[R-L] == s[R]) R++;
				z[i] = R-L; R--;
			}
		}
	}
}

int main(){
//	char A[SIZE],B[SIZE],A1[SIZE],B1[SIZE];

	ios::sync_with_stdio(false);
	int T, q;
   string A,B,A1,B1;
//   int ans=0,fa[SIZE] = {0},fb[SIZE] ={0}, n;// = A1.length();

	cin>>T;
	for(int q =1; q<=T; q++){
	//string A,B,A1,B1;
	cin>>A;

	cin>>B;

	A1 = B+A;
	B1 = A+B;

	int ans=0, n = A1.length();
	vector<int> fa(n+5,0), fb(n+5,0);
	ans =0; n = A1.length();
	zalgor(A1,fa);
	zalgor(B1,fb);
	n = n/2;

	for(int i =0; i< n; i++){
		fa[i] = fa[i +n];
	}
//	cout<<endl;
	
	for(int i =0; i< n; i++){
		fb[i] = fb[i + n];
	}
//	cout<<endl;
	cout<<"Case "<<q<<": ";

	vector<int> k(fa.begin(), fa.begin()+n);
	SegmentTree t (k);
	int h = A.length();
//	cout<<t.rmq(h,n)<<endl;;
	for(int i =0; i< n; i++){
		if(t.rmq(0,fb[i]) !=-1)
		ans = max(ans,( fa[t.rmq(0,fb[i])] + t.rmq(0,fb[i]) >=i ?i + t.rmq(0,fb[i]):0 ));
	}
	cout<<ans<<endl;
	}
	return 0;
}


