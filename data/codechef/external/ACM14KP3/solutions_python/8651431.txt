#include <bits/stdc++.h>

#define gcd __gcd
#define bitcount __builtin_popcountll
#define getcx getchar_unlocked
#define rep(i,j,n) for(i=j;i<n;i++)
#define tr(it,c) for(auto it=(c).begin();it!=(c).end();it++)
#define pb push_back
#define mp make_pair
#define uset unordered_set
#define umap unordered_map
#define fi first
#define sc second
#define DEBUG 0

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pill;
typedef pair<int,pi> pii;

template <class T> T& get(T &n) {
    cin>>n;
    return n;
}

#ifdef TRACE
template<class T> ostream& printContainer(ostream &o,const T &c){
    tr(it,c){
        o<<*it<<' ';
    }
    return o;
}

template<class T> ostream& operator<<(ostream &o,const vector<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const deque<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const list<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const set<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const uset<T> &c){return printContainer(o,c);}
template<class T> ostream& operator<<(ostream &o,const multiset<T> &c){return printContainer(o,c);}
template<class T,class V> ostream& operator<<(ostream &o,const map<T,V> &c){return printContainer(o,c);}
template<class T,class V> ostream& operator<<(ostream &o,const umap<T,V> &c){return printContainer(o,c);}
template<class T,class V> ostream& operator<<(ostream &o,const pair<T,V> &c){return (o<<"("<<c.ft<<","<<c.sc<<")");}

#define trace(x)                 cerr << #x << ": " << x << endl;
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;
#else
#define trace(x)
#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)
#endif

const int hell = 1000000007;
const ll INF = (ll)hell*hell;
const int MAXN = 1e6+10;
const int BLOCK = 100;
const int MAXQ = 10001;

void z_algorithm(const char *s,int N,vector<int> &z){
    z[0]=N;
    int l,r,k;
    l=1;r=0;
    rep(k,1,N){
        if(k<=r && k+z[k-l]<=r)
            z[k]=z[k-l];
        else{
            l=k;r=max(l-1,r);
            while(r+1<N && s[r+1]==s[r-l+1])
                r++;
            z[k]=r-l+1;
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int T,tc;
    cin>>T;
    rep(tc,1,T+1){
        int i,j;
        string a,b;
        cin>>a>>b;
        string x = a+"#"+b;
        string y = b+"#"+a;
        vector<int> z1(x.size()),z2(x.size());
        z_algorithm(x.c_str(),x.length(),z1);
        z_algorithm(y.c_str(),y.length(),z2);
        z1.erase(z1.begin(),z1.begin()+a.size()+1);
        z2.erase(z2.begin(),z2.begin()+a.size()+1);
        vector<pi> sorted_z2(z2.size());
        rep(i,0,(int)z2.size()) sorted_z2[i] = mp(z2[i],i);
        sort(sorted_z2.begin(),sorted_z2.end());
        set<int> s;
        rep(i,0,(int)z2.size()) s.insert(i);
        j = 0;
        int ans = 0;
        rep(i,0,(int)a.length()){
            //Remove all less than i.
            while(j<(int)z2.size()&&sorted_z2[j].fi<i){
                //Remove from set.
                s.erase(sorted_z2[j].sc);
                ++j;
            }
            int pre = z1[i];
            auto it = s.upper_bound(pre);
            if(it!=s.begin()){
                --it;
                //it is first index less than pre >= i-1.
                int temp = *it;
                ans = max(ans,temp+i);
            }
        }
        cout<<"Case "<<tc<<": "<<ans<<"\n";
    }
}
