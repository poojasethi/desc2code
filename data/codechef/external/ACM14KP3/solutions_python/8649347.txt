#include <bits/stdc++.h>
using namespace std ;

#define ft first
#define sd second
#define pb push_back
#define all(x) x.begin(),x.end()

#define ll long long int
#define vi vector<int>
#define vii vector<pair<int,int> >
#define pii pair<int,int>
#define vl vector<ll>
#define vll vector<pair<ll,ll> >
#define pll pair<ll,ll>
#define mp make_pair

#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)

#define scll1(x) scanf("%lld",&x)
#define scll2(x,y) scanf("%lld%lld",&x,&y)
#define scll3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)

#define pr1(x) printf("%d\n",x)
#define pr2(x,y) printf("%d %d\n",x,y)
#define pr3(x,y,z) printf("%d %d %d\n",x,y,z)

#define prll1(x) printf("%lld\n",x)
#define prll2(x,y) printf("%lld %lld\n",x,y)
#define prll3(x,y,z) printf("%lld %lld %lld\n",x,y,z)

#define pr_vec(v) for(int i=0;i<v.size();i++) cout << v[i] << " " ;

#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)

#define fr(i, a, b) for(i=a; i<=b; i++)
#define fb(i, a, b) for(i=a; i>=b; i--)

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>


const int maxn = 2 * 1e6 + 10;

int n , m;
char p[maxn], a[maxn], b[maxn];
int F[maxn], A[ maxn ], B[ maxn ];

void Construct_Failure_Function() {

  //  F[0] = 0; // empty string
  //  F[1] = 0; // always true
    int m = strlen( p );
    for(int i=0;i<=m;i++) F[i] = 0;

    for(int i=2;i<=m;i++) {
        int j = i-1;
        do{
            j = F[j];
            if(p[j] == p[i-1]) {
                F[i] = j+1;
                break;
            }
        } while(j);
    }
}

int main() {
    int T; sc1( T );
    int test;
    fr(test, 1, T) {
        scanf("%s",a);
        scanf("%s",b);
        n = strlen( a );
        m = strlen( b );
        int i;
        fr(i, 0, n-1) p[i] = a[i];
        p[n] = '?';
        fr(i, n+1, n+m) p[i] = b[i-n-1];
        p[n+m+1] = 0;
        Construct_Failure_Function();
        fr(i, 0, n+m+1) A[i] = F[i];
        fr(i, 0, n-1) p[i] = b[i];
        p[n] = '?';
        fr(i, n+1, n+m) p[i] = a[i-n-1];
        p[n+m+1] = 0;
        Construct_Failure_Function();
        fr(i, 0, n+m+1) B[i] = F[i];
        int ans = 0;
        fr(i, n+1, n+m+1) {
            if( A[i] + B[i] >= i-n-1 ) {
                ans = i-n-1;
            }
        }
        printf("Case %d: ", test);
        pr1( ans );
    }
    return 0;
}
