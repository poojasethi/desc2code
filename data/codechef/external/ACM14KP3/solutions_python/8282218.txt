#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

//using namespace __gnu_pbds;
using namespace std;

//#pragma comment(linker, "/STACK:16777216")

#define Foreach(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define For(i,a,b) for(int (i)=(a);(i) < (b); ++(i))
#define rof(i,a,b) for(int (i)=(a);(i) > (b); --(i))
#define rep(i, c) for(auto &(i) : (c))
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define PB pop_back()
#define iOS ios_base::sync_with_stdio(false)
#define sqr(a) (((a) * (a)))
#define all(a) a.begin() , a.end()
#define error(x) cerr << #x << " = " << (x) <<endl
#define Error(a,b) cerr<<"( "<<#a<<" , "<<#b<<" ) = ( "<<(a)<<" , "<<(b)<<" )\n";
#define errop(a) cerr<<#a<<" = ( "<<((a).x)<<" , "<<((a).y)<<" )\n";
#define coud(a,b) cout<<fixed << setprecision((b)) << (a)
#define L(x) ((x)<<1)
#define R(x) (((x)<<1)+1)
#define umap unordered_map
#define double long double
#define mod 1000000007
#define mod1 1000000009
#define LIMIT 1000000000000000LL
#define si(n) scanf("%d",&n)
#define sii(n,m) scanf("%d%d",&n,&m)
#define pi(n) printf("%d\n",n)
const int inf=0x3f3f3f3f;
//template <typename T> using os =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef pair<int,int>pii;
typedef vector<int> vi;
typedef complex<double> point;

char s[1000011];
char t[1000011];
ll sum11[1000011];
ll sum12[1000011];
ll sum21[1000011];
ll sum22[1000011];
ll power1[1000011];
ll power2[1000011];

ll power(ll b,ll e){
    if(e==0){
        return 1;
    }
    else if(e==1){
        return b;
    }
    else{
        ll p=power(b,e/2);
        if(e%2==0){
            return (p*p);
        }
        else{
            p=(p*p);
            p=(p*b);
            return p;
        }
    }
}

int main(){
    int t2;
    scanf("%d",&t2);

    power1[0]=1;
    power2[0]=1;

    For(i,1,1000010){
        power1[i]=(power1[i-1]*31);
        power2[i]=(power2[i-1]*31);
    }

    For(t1,1,t2+1){
        scanf("%s",s);
        scanf("%s",t);
        int l=strlen(s);

        For(i,0,l+1){
            sum11[i]=sum12[i]=sum21[i]=sum22[i]=0;
        }

        For(i,1,l+1){
            sum11[i]=(sum11[i-1]+(s[i-1]-'a')*power1[i]);
            sum12[i]=(sum12[i-1]+(s[i-1]-'a')*power2[i]);
            sum21[i]=(sum21[i-1]+(t[i-1]-'a')*power1[i]);
            sum22[i]=(sum22[i-1]+(t[i-1]-'a')*power2[i]);
        }

        int answer1=0;
        int l1=1;
        int r1=1;
        int l2=1;
        int r2=1;

        while(l2<=r2 && r2<=l){
            ll temp1=sum11[r1];
            ll temp2=sum21[r2]-sum21[l2-1];
            //printf("(%d,%d)--(%d,%d)\n",l1,r1,l2,r2);

            if(temp1*power(31,l2-1)==temp2){
                //printf("checkd for prefix\n");
                if(sum21[l2-1]*power(31,r1)==(sum11[r2]-sum11[r1])){
                    answer1=max(answer1,r2);
                    //printf("increasing answer to %d\n",r2);
                }
                r1++;
                r2++;
            }
            else{
                if(l2==r2){
                    r2++;
                    l2++;
                }
                else{
                    l2++;
                    r1--;
                }
            }
        }

        printf("Case %d: %d\n",t1,answer1);
    }
return 0;}