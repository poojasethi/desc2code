#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < int(Y);++(X))
#define rrep(X,Y) for (int (X) = int(Y-1);(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < int(Y);++(X))
#define peat(X,Y) for (;(X) < int(Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

void zAlgo(string str,vector<int> &re){
  //cout<<str<<endl;
  re.resize(str.size());
  re[0]=str.size();
  int i=1,j=0;
  while(i<str.size()){
    while(i+j<str.size() && str[j]==str[i+j]) ++j;
    re[i]=j;
    if(!j){
      ++i;
      continue;
    }
    int k=1;
    while(i+k<str.size() && k+re[k]<j){
      re[i+k]=re[k];
      ++k;
    }
    i+=k;
    j-=k;
  //  rep(ii,re.size())cout<<re[ii]<<",";cout<<i<<":"<<j<<endl;
  }
//  cout<<re<<endl;
//  rep(i,re.size())cout<<re[i]<<",";cout<<endl;
}

void solve(string str,string st,vector<int> &re){
  vector<int> tmp;
  zAlgo(st+str,tmp);
  rep(i,str.size())
    re.pb(tmp[st.size()+i]);
}

struct Seg{
 ll sum,mx;
  Seg(ll d=-1){
    sum=mx=d;
  }
};
Seg SegE=Seg(0);

const int MAX_N=(1<<20);
const ll INF=(1ll<<60);
int nn=1<<20;
Seg dat[2*MAX_N-1];

Seg operator+(Seg l,Seg r){
  Seg seg;
  seg.sum=l.sum+r.sum;
  seg.mx=max(l.mx,r.mx);
  return seg;
}

void upd(int k,Seg a){
  k+=nn-1;
  dat[k]=a;
  while(k>0){
    k=(k-1)/2;
    dat[k]=dat[k*2+1]+dat[k*2+2];
  }
}

//(l,r,0,0,nn)
Seg query(int a,int b,int k,int l,int r){
  if(r<=a || b<=l)return SegE;
  if(a<=l && r<=b) return dat[k];
  return query(a,b,k*2+1,l,(l+r)/2) + query(a,b,k*2+2,(l+r)/2,r);
}

int main(){
  //ios_base::sync_with_stdio(false);
 // cout<<fixed<<setprecision(0);
  int i,j,k;
  int t,T;
  cin>>T;
  rep(t,T){
    string A,B;
    cin>>A>>B;
    vector<int> a,b;
    solve(A,B,a);
    solve(B,A,b);
    rep(i,b.size()){
      upd(i,Seg(b[i]));
    }
//    rep(i,a.size())cout<<a[i]<<",";cout<<endl;
//    rep(i,b.size())cout<<b[i]<<",";cout<<endl;
    int re=0;
    rep(i,a.size()){
      Seg seg=query(0,a[i]+1,0,0,nn);
      if(seg.mx>=i){
        int l=0,r=a[i]+1,m;
        while(r-l>1){
          m=(l+r)/2;
          if(query(m,a[i]+1,0,0,nn).mx>=i){
            l=m;
          }else{
            r=m;
          }
        }
        re=max(re,l+i);
      }
    }
    cout<<"Case "<<t+1<<": "<<re<<endl;
  }
  return 0;
}