#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1000000000
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define IN(x,y) ((y).find((x))!=(y).end())
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);
 
#define M (1<<17)
int d[2*M+2];
 
void dodaj (int pos, int ile) {
   for (int i = pos + M; i > 0; i >>= 1) {
      d[i] += ile;
   }
}
 
int kty (int k) { // 1-based
   int nr = 1;
   while (nr < M) {
      if (d[nr] < k) return -1;
      if (d[2*nr] >= k) {
         nr *= 2;
      } else {
         k -= d[2*nr];
         nr = 2*nr + 1;
      }
   }
   return nr - M;
}
 
// uÅ¼ycie: np. inicjalizacja:
/*
   wez(n)
   FOR(i,2*M) d[i] = 0;
   FOR(i,n) scanf("%d",&d[i+M]);
   REPD(i,M-1,1) d[i] = d[2*i] + d[2*i+1];
*/
 
int f[100007];
 
int main () {
   vector<pii> v;
   int n = 100000;
   int ile = n;
   FOR(i,2*M) d[i] = 0;
   FOR(i,n) d[i+M] = 1;
   REPD(i,M-1,1) d[i] = d[2*i] + d[2*i+1];
   while (ile > 2) {
      int pot2 = 1;
      while (pot2 <= ile) pot2 *= 2;
      for (pot2 /= 2; pot2 > 0; pot2 /= 2) {
         int ktory = kty(pot2);
         dodaj(ktory, -1);
         ile--;
      }
      v.pb(mp(1+kty(1), -1));
      if (ile >= 2) {
         //printf("%d %d\n",tr.find_kth(1),tr.find_kth(2));
         v.pb(mp(1+kty(2),1+kty(1)));
      }
   }
   
   TESTS {
      wez(nn)
      FORI(i,nn) scanf("%d",f+i);
      int pos = 0;
      while (pos < SZ(v) && v[pos].fi <= nn) ++pos; --pos;
      //DBG(v[pos])
      if (nn == 1) {
         printf("%d\n",f[1]);
      } else if (nn == 2) {
         printf("%d %d\n",f[1],f[2]);
      } else {
         if (v[pos].se == -1) {
            printf("%d\n", f[v[pos].fi]);
         } else {
            printf("%d %d\n", f[v[pos].se], f[v[pos].fi]);
         }
      }
   }
}