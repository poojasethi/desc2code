#include <bits/stdc++.h>

#define f(i, a, n) for (ll i = a; i < n; i++)
#define fd(i, n, a) for (ll i = n; i >= a; i--)
#define rep(i,n) f(i,0,n)

#define mkp make_pair
#define pb push_back
#define ff first
#define ss second
#define pll pair <ll, ll>
#define pii pair <int, int>
#define MOD 1000000007

#define s(x) scanf("%lld", &x); //s(x) is for long long int.
#define si(x) scanf("%d", &x);

#define debug true
#define ok if(debug)
#define trace(x) ok cout << #x << ": " << x << endl;
#define trace2(x, y) ok cout << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)    ok      cout << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)  ok cout << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
								<< #d << ": " << d << endl;
#define trace5(a, b, c, d, e) ok cout << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									 << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) ok cout << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									<< #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

typedef long long ll;
using namespace std;
ll a[1005];	
ll power(ll base, ll exp) {
	if (exp == 0)
		return 1LL;
	
	ll x = power(base,(exp/2))%MOD;

	x = (x*x)%MOD;

	if (exp %2)
		x = (x*base) % MOD;

	return x;
}

ll gp (ll x, ll t) { 
	ll flg = -1;

	if (t % 2)
		flg = -1;
	else
		flg = 1;
	
	ll a = power(x,t);
	ll b  = power(MOD-1, t);
	
	ll c = (a - flg + MOD)%MOD;
	c = (c*x)%MOD;
	
	ll d = power((x+1), MOD-2);
	ll ans = (c * d)%MOD;
	return ans;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("/home/spharish/input.txt", "r", stdin);
	#endif
		
	ios::sync_with_stdio(false);
	ll n;
	cin >> n;

	ll sum = 0;
	rep(i,n) {
		cin>>a[i];
		sum = (sum + a[i])%MOD;
	}

	ll t,q;
	cin >> t >> q;

	ll ans;
	if (t > 1)
		ans = (sum*gp((n-1), (t-1)))%MOD;
	else
		ans = 0;
	//cout <<ans <<endl;
	int flag;
	if (t%2)
		flag = 1;
	else
		flag = -1;
	while (q--) {
		ll x;
		cin >> x;
		x--;
		if (n == 1) {
			cout<<"0"<<endl;
			continue;
		}
		ll tmp = (ans + (flag*((sum-a[x] + MOD)%MOD) ) + MOD)%MOD;
		cout<<tmp<<endl;
	}

	return 0;
}