#include <iostream>
#include <string.h>

using namespace std;

char postfix[100],infix[100];

struct node{
  char ele;
  node *left, *right;
};

node *stack[100];
int top = -1;
int top1 =-1;
char stk[100];

void push(node *x)
{
  stack[++top] = x;
}

node *pop(){
  return stack[top--];
}

void push1(char x)
{
  stk[++top1] = x;
}

char pop1(){
  return stk[top1--];
}

int prec( char x)
 {
  if(x=='^')
   return 3;
  else if ( x=='/' || x=='*')
   return 2;
  else if (x=='+' || x=='-')
   return 1;
  else
   return 0;
 }

void post(char infix[],int length,int j)
{
  int i = 0;
  char x;
  int a,b;
  while(i<length)
    {
      x=infix[i];
     
      if(x>='0' && x<='9')
	postfix[j++] = x;
     else if(x== '(')
      {push1(x);
        }      
     else if(x ==')')
      {
	while(!(top1 == -1) && stk[top1]!='(')
        {
	  postfix[j++]=stk[top1];
         pop1();
        }
       pop1();    
      }
     else
      {
        while(!(top1 == -1))
          {
            a= prec(stk[top1]);
            b= prec(x);
           if(a>=b)
            {
             postfix[j++]=stk[top1];
             pop1();
            } 
           else
            break;
          }
        push1(x);
       }
     i = i+1;
    }
   while(top1 != -1)
      {
       postfix[j++]=stk[top1];
       pop1();
      }
    
}

void crtree(char *postfix, char temp, int i)
{
  node *m,*n,*o;
  if(temp != '\0')
    {
      if((temp >= '1')&&(temp <= '9'))
	{
	  m = new node;
	  m -> ele = temp;
	  m -> left = NULL;
	  m -> right = NULL;
	  push(m);
	  i++;
	}
      else {
	n= pop();
	o= pop();
	m = new node;
	m -> ele = temp;
	m->left = o;
	m->right = n;
	push(m);
	i++;
      }
      crtree(postfix,postfix[i],i);
    }
}

void ino(node *t){
  if(t != NULL)
    {
      if(t->left != NULL)
	cout<<"(";
      ino(t->left);
      cout<<t->ele;
      ino(t->right);
      if(t->right != NULL)
	cout<<")";
    }
}

int main(){
  // cout<<"Enter the expression: ";
  cin>>infix;
  int l = strlen(infix);
  post(infix,l,0);
  // cout<<postfix;
  crtree(postfix,postfix[0],0);
  ino(stack[0]);
  cout<<endl;

  return 0;
}
