#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

const int max_n=500010;

int n,k;
char str[max_n+5];
int P[max_n], nP;
int S[max_n], nS;

pii Q[max_n]; int nQ;

bool possible(int a)
{
	int right=-1;
	for(int p=0; p<a; ++p)
		right=max(right,P[p]);
	nQ=0;
	for(int p=a; p<nP; ++p)
	{
		// S[p-a] maps to P[p]
		int s=p-a;

		right=max(right,P[p]);
		right=max(right,S[s]);

		if(S[s]>P[p])
			Q[nQ++]=pii(P[p],S[s]);
	}

	if(nQ==0) return (right+1<=k);

	int best=right+1+(right-Q[0].fs);
	int toadd=0;
	for(int i=0; i<nQ; ++i)
	{
		if(i==0) toadd+=2*(Q[i].sc-Q[i].fs);
		else toadd+=2*(Q[i].sc-max(Q[i-1].sc,Q[i].fs));

		if(i+1<nQ) best=min(best,right+1+toadd+(right-Q[i+1].fs));
		else best=min(best,right+1+toadd);
	}

	return (best<=k);
}

int main()
{
	gi(n); gi(k);
	gs(str);

	nP=0; nS=0;
	rep(i,n)
	{
		if(str[i]=='H')
			P[nP++]=i;
		else if(str[i]=='S')
			S[nS++]=i;
	}

	if(not possible(nP))
		pin(-1);
	else
	{
		int l=max(nP-nS,0)-1, r=nP;
		while(l+1<r) //(l,r]
		{
			int mid=(l+r)/2;
			if(possible(mid)) r=mid;
			else l=mid;
		}
		pin(r);
	}
	
	return 0;
}
