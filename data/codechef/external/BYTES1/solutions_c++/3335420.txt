//evanlimanto

#include <iostream>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <cassert>
#include <utility>
#include <string>
#include <bitset>
#include <vector>
#include <cstdio>
#include <stack>
#include <queue>
#include <list>
#include <set>
#include <map>
#include <algorithm>
#include <cmath>
#include <complex>

using namespace std;

typedef long long        LL;
typedef pair<int, int>   pii;
typedef pair<int, pii>   piii;
typedef vector<int>      vi;
typedef vector<pii>      vii;

//Fast Input 
inline void inpint( int &n ) {
  n=0; register int ch = getchar_unlocked(); int sign = 1;
  while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getchar_unlocked(); }
  while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getchar_unlocked(); }
  n = n * sign;
}
//End Fast Input

inline string itostr(int a){
    char x[100];
    sprintf(x,"%d",a); string s = x;
    return s;
}

inline int strtoi(string a){
    char x[100]; int res;
    strcpy(x,a.c_str()); sscanf(x,"%d",&res);
    return res;
}

inline int sqr(int x){return x * x;}
inline int cube(int x){return x * x * x;}

const LL LLINF      = 9223372036854775807LL;
const LL LLINF17    = 100000000000000000LL;
const int INF       = 2147483647;
const int INF9      = 1e9;
const int MOD       = 1000000007;
const double eps    = 1e-7;
const double PI     = acos(-1.0);

#define FORIT(a,b)   for (__typeof((b).begin()) (a)=(b).begin(); (a)!=(b).end(); (a)++)
#define FOR(a,b,c)   for (int (a)=(b); (a)<(c); (a)++)
#define FORN(a,b,c)  for (int (a)=(b); (a)<=(c); (a)++)
#define FORD(a,b,c)  for (int (a)=(b); (a)>=(c); (a)--)
#define REP(i,n)     FOR(i,0,n)
#define REPN(i,n)    FORN(i,1,n)
#define REPD(i,n)    FORD(i,n,1)

#define RESET(a,b)   memset(a,b,sizeof(a)) 
#define SYNC         ios_base::sync_with_stdio(0);
#define SIZE(a)      (int)(a.size())
#define MIN(a,b)     (a) = min((a),(b))
#define MAX(a,b)     (a) = max((a),(b))
#define input(in)    freopen(in,"r",stdin)
#define output(out)  freopen(out,"w",stdout)
#define ALL(a)       a.begin(),a.end()
#define RALL(a)      a.rbegin(),a.rend()
#define SIZE(a)      (int)(a.size())
#define LEN(a)       (int)(a.length())

#define FIN(x)       freopen(x,"r",stdin)
#define FOUT(x)      freopen(x,"w",stdout)
#define FCLOSE       {fclose(stdin); fclose(stdout);}

#define fi           first
#define se           second
#define pb           push_back
#define mp           make_pair

int dr[] = {1,0,-1,0,-1,1,1,-1};
int dc[] = {0,-1,0,1,1,1,-1,-1};

#define MAX_Q 200000
int q,ans[MAX_Q];

struct event{
    int ind,s,e;
    
    event(){};
    event(int ind, int s, int e) : ind(ind), s(s), e(e) {};
    
    bool operator < (event E)const{
        return e<E.e;
    }
}e[MAX_Q];

#define MAX_N 30000
int n,a[MAX_N],T[MAX_N+1];

void update(int idx, int val){
    for(;idx<=n;idx += (idx & -idx)) T[idx] += val;
}

int F(int idx){
    int sum = 0;
    for(;idx>0;idx -= (idx & -idx)) sum += T[idx];
    return sum;
}

#define MAX_VAL 1000000+1
int last[MAX_VAL];

void solve(){
    sort(e,e+q);
    
    int pos = 0,tot = 0;
    memset(last,-1,sizeof(last));
    memset(T,0,sizeof(T));
    
    for(int i = 0;i<n;++i){
        if(last[a[i]]!=-1) update(last[a[i]],-1);
        else ++tot;
        
        update(i+1,1);
        last[a[i]] = i+1;
        
        while(pos<q && e[pos].e==i+1){
            ans[e[pos].ind] = tot-F(e[pos].s-1);
            ++pos;
        }
    }
    
    for(int i = 0;i<q;++i) printf("%d\n",ans[i]);
}

int main(){
    scanf("%d %d",&n,&q);
    for(int i = 0;i<n;++i) scanf("%d",&a[i]);
 
    for(int i = 0,x,y;i<q;++i){
        scanf("%d %d",&x,&y);
        e[i] = event(i,x,y);
    }
    
    solve();
    
    return 0;
}