#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
#define sd(x) scanf("%d", &x)
#define mp make_pair
#define pb push_back
#define vi vector<int>
#define ft first
#define sc second
#define INF 1000000000
#define MOD 10000007
int n, k;
pair<LL,LL> c[205];
LL cost[205][205];
LL dp[205][37];
LL func(int last, int tot)
{
	if (tot < 0) {
		return 100000000000000LL;
	}
	if (last == n+1) {
		if (tot == 0) return 0;
		else return 100000000000000LL;
	}
	if (dp[last][tot] != -1) return dp[last][tot];
	LL ans = 100000000000000LL;
	for (int i = last; i <= n; i++) {
		ans = min(ans, cost[last][i] + func(i+1, tot-1));
	}
	return dp[last][tot] = ans;
}
int main()
{
	int t;
	scanf("%d", &t);
	while (t--) {
		cin>>n>>k;
		memset(dp, -1, sizeof dp);
		for (int i = 1; i <= n; i++) cin>>c[i].first;
		for (int i = 1; i <= n; i++) cin>>c[i].second;
		sort(c+1, c+n+1);
		for (int i = 1; i <= n; i++) {
			for (int j = i; j <= n; j++) {
				int sel = i;
				LL cst = (j-i)*c[sel].second;
				for (int l = i; l <= j; l++) {
					cst += abs(c[sel].first - c[l].first); 
				}
				cost[i][j] = cst;
				for (sel = i+1; sel <= j; sel++) {
					cst -= (j-i)*c[sel-1].second;
					cst += (j-i)*c[sel].second;
					cst -= (j - sel+1)*(c[sel].first - c[sel-1].first);
					cst += (sel - i)*(c[sel].first - c[sel-1].first);
					cost[i][j] = min(cost[i][j], cst);
				}
			//	cout<<cost[i][j]<<" "<<endl;
			}
		}
		
		printf("%lld\n", func(1, k));
	}
	return 0;
}