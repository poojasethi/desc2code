#include <cstdio>
#include <algorithm>
#include <vector>
#define pos first
#define cost second
#define MAXN 210
#define MAXK 45
using namespace std;
typedef long long ll;
typedef pair<ll,ll> pii;
const ll INF = 300000000;

int N,K;
pii city[MAXN+10];
ll acc[MAXN+10];

ll memo[MAXN][MAXK], memo2[MAXN][MAXN];

ll soma( int a, int b, int caso )
{
	if ( caso == 0 ) {
		//printf("%d %d %d %lld\n", a, b, caso, acc[b] - acc[a] + (b-a)*( city[a].cost - city[a].pos ) );
		return acc[b] - acc[a] + (b-a)*( city[a].cost - city[a].pos );
	}
	if ( caso == 1 ) {
		//printf("%d %d %d %lld\n", a, b, caso, acc[a-1] - acc[b-1] + (b-a)*( city[b].cost + city[b].pos ) );
		return acc[a-1] - acc[b-1] + (b-a)*( city[b].cost + city[b].pos );
	}
}

ll melhor( int i, int j )
{
	if ( memo2[i][j] != -1 ) return memo2[i][j];
	ll minimo = INF;
	for ( int k = i; k < j; k++ ) {
			minimo = min ( soma(i,k,0) + soma(k+1,j,1), minimo );
	}
	return memo2[i][j] = minimo;
}

ll pd( int i, int cap )
{
	if ( cap == 0 )
		return soma(i,N,0);
	if ( i == N )
		return INF;
	if ( memo[i][cap] != -1 ) return memo[i][cap];
	ll ans = INF;
	for ( int a = i+1; a <= N; a++ ) {
		ans = min( ans, melhor(i,a) + pd(a,cap-1) );
	}
	return memo[i][cap] = ans;
}

int main()
{
	int T;
	scanf("%d", &T);
	while ( T-- ) {
		scanf("%d %d", &N, &K);
		for ( int i = 1; i <= N; i++ )
			for ( int k = 1; k <= K; k++ )
				memo[i][k] = -1;
		for ( int i = 1; i <= N; i++ )
			for ( int j = 1; j <= N; j++ )
				memo2[i][j] = -1;
		for ( int i = 1; i <= N; i++ )
			scanf("%lld", &city[i].pos);
		for ( int i = 1; i <= N; i++ )
			scanf("%lld", &city[i].cost);
		sort(city+1, city+N+1);
		acc[0] = 0;
		for ( int i = 1; i <= N; i++ )
			acc[i] = acc[i-1] + city[i].pos;
		ll aux = 0, mini = INF;
		for ( int i = 1; i <= N; i++ ) {
			aux = pd(i,K-1) + soma(1,i,1);
			mini = min( mini, aux );
		}
		printf("%lld\n", mini);
	}
	return 0;
}