
#include<bits/stdc++.h>
#define all(x) x.begin(), x.end()
#define pb(x) push_back(x)
#define N 205
#define INF (1LL<<62)
using namespace std;

int k, n;
long long memo[N][36], cost[N][N], X[N], C[N];
int id[N];

long long DP(int pos, int cap){
    
    if(cap == k){
        
        if(pos == n)return 0;
        return INF;
    }
    if(pos >= n)return INF;
    
    long long &ret = memo[pos][cap];
    if(ret != -1)return ret;
    
    long long ans = INF;
    for(int i = pos; i < n; i++)ans = min(ans, cost[pos][i] + DP(i + 1, cap + 1));

    return ret = ans;
}


#define cout2(x, y) cout << x << " " << y << endl

bool comp(int i, int j){ return X[i] < X[j]; }
int main(){

    int tc = 0;
    scanf("%d", &tc);
    
    while(tc--){
        
        int c;
        scanf("%d%d", &n, &k);
        
        for(int i = 0; i < n; i++)scanf("%lld", &X[i]), id[i] = i;
        sort(id, id + n, comp);
    
        long long sum = 0;
        for(int i = 0; i < n; i++)scanf("%lld", &C[i]);
        
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                
                sum = 0;
                for(int l = j - 1; l >= i; l--)
                    sum += (X[id[l + 1]] - X[id[l]]) * (j - l);                 
                
                cost[i][j] = (j - i) * C[id[i]] + sum;  
                
                for(int l = i + 1; l <= j; l++){//si l es la capital de [i-j]
                     
                     sum -= (X[id[l]] - X[id[l - 1]]) * (j - l + 1);
                     sum += (X[id[l]] - X[id[l - 1]]) * (l - i);
                     cost[i][j] = min(cost[i][j], sum + (j - i) * C[id[l]]);  
                }
                //printf("%d %d %lld\n", i, j, cost[i][j]);
            }
        }
         
        memset(memo, -1, sizeof memo);
        long long ans = DP(0, 0);
        
        printf("%lld\n", ans);
        
    }
}
