#include <iostream>
#include <cstdlib>
 
using namespace std;
 
struct column {
	int *array;
	struct column *next;
};
 
typedef struct column col;
 
int compare(int b[], int v[], int N);
 
int main()
{
	int N;
	int i;
	int j;
	int count;
	int pattern = 0;
	int done = 0;
	int v[1000];
	int *a;
	int *b;
	col *head;
	col *ptr;
 
	cin >> N;
 
	while(N != 0) {
		cin >> i >> j;
		pattern = j;
		head = new col;
		count = 0;
		
		b = (int *) malloc(sizeof(int) *  N);
		b[0] = b[N - 1] = 1;
 
		for(int loop = 0; loop < N; loop++) {
			cin >> v[loop];
		}
 
		head -> array = a = v;
		head -> next = NULL;
		count++;
		
		ptr = head;
 
		for(count = 2; count <= j; count++) {
			for(int index = 1; index < N - 1; index++) {
				b[index] = (b[index - 1] * a[index + 1] + 1) / a[index];
				if(count == j && (index + 1) == i) {
					cout << b[index] << endl;
					done = 1;
					break;
				}
			}
 
			if(done == 1) {
				done = 0;
				break;
			}
			if(compare(b,v,N)) {
				ptr -> next = new col;
				ptr = ptr -> next;
				ptr -> array = b;
				ptr -> next = NULL;
				a = b;
				b = (int *) malloc(sizeof(int) * N);
				b[0] = b[N - 1] = 1;
			}
			else {
				pattern = count - 1;
				j = j % pattern;
				if(j == 0) {
					j = pattern;
				}
				ptr = head;
				while(j != 1) {
					ptr = ptr -> next;
					j--;
				}
				cout << ptr -> array[i - 1] << endl;
				break;
			}
 
		}
 
		while(head != NULL) {
			ptr = head;
			head = head -> next;
			free(ptr);
		}
		
		cin >> N;
 
	}
 
	return 0;
}
 
int compare(int b[], int v[], int N)
{
	for(int i = 0; i < N; i++) {
		if(b[i] != v[i]) {
			return 1;
		}
	}
 
	return 0;
}
 