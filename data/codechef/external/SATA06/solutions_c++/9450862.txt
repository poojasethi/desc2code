#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back
#define all(s) s.begin(),s.end()
#define present(c,x) ((c).find(x) != (c).end())
const double EPS = 1e-8;
const int mod = 1e9+7;
const int N = 1e6+10;
const ll INF = 1e18;

//#define DEBUG
ll power(ll x,ll y){
  ll t=1;
  while(y>0){
    if(y%2) y-=1,t=t*x%mod;
    else y/=2,x=x*x%mod;
  }
  return t;
}
#ifdef DEBUG
#define dprintf(fmt,...) fprintf(stderr,fmt,__VA_ARGS__)
#else
#define dprintf(fmt,...)
#endif


ll I[5][5],temp[5][5],M[5][5],store[5][5];
void copyM(ll M1[][5],ll M2[][5],int m){
  for(int i=0;i<m;++i){
    for(int j=0;j<m;++j){
      M2[i][j]=M1[i][j];
    }
  }
}

void matmul(ll M1[][5],ll M2[][5],int m){
  for(int i=0;i<m;++i){
    for(int j=0;j<m;++j){
      temp[i][j]=0;
      for(int k=0;k<m;++k)
        temp[i][j]=(temp[i][j]+(M2[i][k]*M1[k][j])%mod)%mod;
    }
  }
}
void setI(int m){
  for(int i=0;i<m;++i){
    for(int j=0;j<m;++j){
      if(i!=j) I[i][j]=0;
      else I[i][j]=1;
    }
  }
}
void powerM(ll M1[][5],int m,ll n){
  setI(m);
  while(n>0){
    if(n%2==0){
        matmul(M1,M1,m);
        copyM(temp,M1,m);
        n/=2;
    }else{
        matmul(M1,I,m);
        copyM(temp,I,m);
        n-=1;
    }
  }

}
int main(){
	int n,k,m; scanf("%d%d%d",&n,&k,&m);
	FILL(M,0);
	M[0][0]=1;
	REPP(i,1,k){
		REP(j,k) M[i][j]=M[i-1][j];
		M[i][i]++; M[i][i-1]++; 
	}
/*	REP(i,k){
		REP(j,k) printf("%lld ",M[i][j]); printf("\n");
	}*/
	powerM(M,k,n-1);
	ll ans=0;
	REP(i,k) ans+=I[k-1][i];
	ans%=mod;
	printf("%lld\n",ans*m%mod);
  return 0;
}
