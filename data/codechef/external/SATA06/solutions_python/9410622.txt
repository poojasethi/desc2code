#include <stdio.h>
#include <math.h>
#define ll long long
#define gc getchar_unlocked
#define pc putchar_unlocked
#define md 1000000007
inline int inp() {
    register int n=0; register int c = gc(); while(c < '0' || c > '9')c = gc();
    while(c >= '0' && c <= '9') {n = (n << 3) + (n << 1) + c - '0'; c = gc();}
    return n;
}
inline ll inpll() {
    register ll n=0; register int c = gc(); while(c < '0' || c > '9')c = gc();
    while(c >= '0' && c <= '9') {n = (n << 3) + (n << 1) + c - '0'; c = gc();}
    return n;
}
inline void oup(ll n) {
    char s[21]; register int i=0; do { s[i++]=n%10+'0'; n/=10;} while(n);
    while(--i>=0) {pc(s[i]);} pc('\n');
}
ll powr(ll b, ll e, ll p) {
    ll res=1; while(e>0) {if(e&1) res=(res*b)%p; b=(b*b)%p; e>>=1;}
    return res;
}
ll modInverse(ll a, ll p) {
    return powr(a, p-2, p);
}
ll modBinomial(ll n, ll r, ll p) {
    ll numerator = 1, denominator=1;
    int i;
    for (i=1; i<=r; i++) {
        numerator = (numerator * (n-i+1) ) % p;
        denominator = (denominator * i) % p;
    }
    return (numerator*modInverse(denominator,p)) % p;
}
int main() {
	int k,i; ll n,m,mn,ans,t;
    n=inpll(); k=inp(); m=inpll();
    n--,k--;
    mn=n>k?k:n;
    ans=0;
    for(i=0; i<=mn; ++i){
	    t=modBinomial(n, i, md)*modBinomial(k, i, md);
	    t%=md;
	    t*=(1<<i);
	    t%=md;
	    ans+=t;
	    ans%=md;
	}
	ans*=m;
	ans%=md;
	oup(ans);   
    return 0;
}