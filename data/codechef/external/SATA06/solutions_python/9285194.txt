#include<bits/stdc++.h>
using namespace std;

#define fre freopen("input.txt","r",stdin)
#define ll long long
#define abs(x) ((x)>0?(x):-(x))
#define mod 1000000007
#define scand(x) scanf("%d",&x);
#define scanlld(x) scanf("%I64d",&x);
#define scans(x) scanf("%s",x);
#define printd(x) printf("%d",x);
#define printlld(x) printf("%I64d",x);
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define inf (1<<30)
#define forup(i,a,b) for(int i=a;i<b;i++)
#define pii pair<int,int>
#define boost ios_base::sync_with_stdio(0)
#define MAXN 10
class Matrix {
    public:
        int rows, cols;
        ll mat[MAXN][MAXN];
        
        ll add(ll a,ll b){return (a+b)%mod;}
        ll sub(ll a,ll b){ll val=a-b;while(val<0)val+=mod;return val;}
        ll mul(ll a,ll b){ll val=a*b;if(val>=mod)val%=mod;return val;}
        
        Matrix() {}
        
        Matrix(int n,int m) {rows=n,cols=m;forup(i,0,n)forup(j,0,m)mat[i][j]=0;}
        
        void get_identity() {forup(i,0,rows){forup(j,0,cols){if(i==j){mat[i][j]=1;}else{mat[i][j]=0;}}}}
        
        Matrix operator *(const Matrix& a) 
        {
            Matrix temp(rows, cols);
            forup(i,0,rows)forup(j,0,a.cols)forup(k,0,cols)temp.mat[i][j]=add(temp.mat[i][j],mul(mat[i][k],a.mat[k][j]));
            return temp;
        }

        vector<ll> operator *(vector<ll> a) 
        {
            int N=a.size();
            vector<ll> ans(N);
            forup(i,0,N)forup(j,0,N)ans[i]=add(ans[i],mul(mat[i][j],a[j]));
            return ans;
        }

        void pow(ll p) { 
            Matrix res(rows,cols); 
            res.get_identity();
            while(p){if(p&1)res=res*(*this);*this=(*this)*(*this);p/=2;}
            *this=res;
        }
}Mat;       // Use Mat=Matrix(rows,col) for initialising and Mat.mat[][] for accessing the matrix
int main()
{
	boost;
	//fre;
	long long n,m,k;
	cin>>n>>k>>m;
	Mat=Matrix(k+1,k+1);
	Mat.mat[1][1]=1;
	forup(i,2,k+1)
	{
		Mat.mat[i][i]=1,Mat.mat[i][i-1]=1;
		forup(j,1,k+1)Mat.mat[i][j]+=Mat.mat[i-1][j];
	}
	Mat.pow(n-1);
	long long ans=0;
	forup(i,1,k+1)ans+=Mat.mat[k][i];
	cout<<(ans*m)%mod;
	return 0;
}