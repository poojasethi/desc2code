/*
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
	ABHINANDAN AGARWAL
	MNNIT ALLAHABAD
	CSE
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
*/
//Principia mathematica.. 
#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
typedef unsigned long long llu;
#define mp make_pair
#define pb push_back
#define sc(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define scstr(x) scanf("%s",x)
#define pd(x) printf("%d",x)
#define pstr(x) printf("%s",x)
#define newl() printf("\n")
#define fl(i,n) for (i=0;i<n;i++)
#define fle(i,n) for (i=1;i<=n;i++)
#define fla(i,a,n) for (i=a;i<n;i++)
#define mem(a,i) memset(a,i,sizeof(a))
#define fi first
#define se second
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > piii ;
#define wl(n) while (n--)
#define MOD 1000000007
//-------------
int A[2000+10];
int B[2000+10];
int vis1[2000+10]={0};
int vis2[2000+10]={0};
int p,n;
pii pos[2000+10];
map<pii,int>M;
int fuck=1,is11=0,is12=0;
void DFS(int *arr,int *vis,int cur,vector<int>&s,int *is)
{
	//printf("DFS called:cur:%d\n",cur);
	if (!(1<=cur&&cur<=4*n-4))
	{
		exit(1);
	}
	if (arr[cur]==-1)
	{
		(*is)++;
	}
	if (arr[cur]!=-1)
		s.pb(arr[cur]);
	if (A[cur]!=B[cur])
		fuck=0;
	vis[cur]=1;
	pii x=pos[cur];
	int i,j;
	for (i=n-1;i>=-(n-1);i-=(n-1))
	{
		if (i==0)continue;
		for (j=1;j>=-1;j--)
		{

			if (j==0)continue;
			//printf("i:%d and j:%d\n",i,j);
			//printf("i:%d and j:%d\n",i,j);
			if (1<=x.fi-i&&x.fi-i<=n&&1<=x.se-j&&x.se-j<=n)
			{
				int pp=M[mp(x.fi-i,x.se-j)];
				if (vis[pp]==0)
				{	DFS(arr,vis,pp,s,is);
					//printf("calling %d,%d from %d,%d\n",pos[pp].fi,pos[pp].se,x.fi,x.se);
				}
			}
			if (1<=x.fi-j&&x.fi-j<=n&&1<=x.se-i&&x.se-i<=n)
			{
				int pp=M[mp(x.fi-j,x.se-i)];
				if (vis[pp]==0)
				{	DFS(arr,vis,pp,s,is);
					//printf("calling %d,%d from %d,%d\n",pos[pp].fi,pos[pp].se,x.fi,x.se);
				}
			}
		}
	}
}

int doit(vector<int>&v1,vector<int>&v2)
{
	int z=v1.size(),i,j;
	for (i=0;i<z;i++)
	{
		if (v1[0]==v2[i])
		{
			break;
		}
	}
	if (i==z)return 0;
	for (j=0;j<z;j++)
	{
		if (v1[j]!=v2[(j+i)%z])
			return 0;
	}
	return 1;
}

int main()
{
	int t;
	sc(t);
	wl(t)
	{
		int i,j;
		p=1;
		sc(n);
		M.clear();
		for(i=1;i<=4*n-4;i++)
		{
			sc(A[i]);

		}

		for (i=1;i<=4*n-4;i++)
		{
			sc(B[i]);
		}
		for (i=0;i<=2000;i++)
		{
			vis1[i]=0;
			vis2[i]=0;
		}
		for (i=1;i<=n;i++)
		{
			pos[p]=mp(1,i);
			M[mp(1,i)]=p++;
		}
		for (i=2;i<=n;i++)
		{
			//pos[p++]=
			pos[p]=mp(i,n);
			M[mp(i,n)]=p++;
		}
		for (i=n-1;i>=1;i--)
		{
			pos[p]=mp(n,i);
			M[mp(n,i)]=p++;
		}
		for (i=n-1;i>=2;i--)
		{
			pos[p]=mp(i,1);
			M[mp(i,1)]=p++;
		}
		/*for (i=1;i<p;i++)
		{
			printf("for index:%d (%d,%d)\n",i,pos[i].fi,pos[i].se);
		}*/
		int ftot=1;
		int comps=0;
		for(i=1;i<=4*n-4;i++)
		{
			if (vis1[i]!=vis2[i])
			{
				//printf("Alert!!!Alert!!!Alert!!!Alert!!!Alert!!!Alert!!!Alert!!!Alert!!!\n");
			}
			if (vis1[i]==0)
			{
				comps++;
				fuck=1;
				is11=0;is12=0;
				//printf("Yo.. new DFS called for node :%d\n",i);
				vector<int>s1,s2;
				//printf("before tha call\n");
				DFS(A,vis1,i,s1,&is11);
				//printf("before the call\n");
				DFS(B,vis2,i,s2,&is12);
				//multiset<int>::iterator it1,it2;
				vector<int>::iterator it1,it2;
				//-----------------------------------------	
				/*it1=s1.begin();it2=s2.begin();
				printf("Compnent %d first set::",comps);
				while(it1!=s1.end())
				{
					printf("%d || ",*it1);it1++;
				}
				printf("Second set:: ");
				while (it2!=s2.end())
				{
					printf("%d || ",*it2);it2++;
				}*/
				//-----------------------------------------

				it1=s1.begin();
				it2=s2.begin();
				int f=1;
				//printf("i:%d size of set:%ld set2:%ld\n",i,s1.size(),s2.size());
				if (s1.size()!=s2.size())
					f=0;
				if (f&&is11>0)
				{
					f=doit(s1,s2);
				}

				/*if (f)
				{
					if(fuck==0)
					{
						if ((*s1.begin())!=-1)
						{
							f=0;
							//break;
						}
					}
				}*/
				if (!f)
				{
					ftot=0;
					break;
				}
			}
		}
		//printf("components:%d \n",comps);
		if (ftot)
		{
			printf("YES\n");
		}
		else
			printf("NO\n");

	}		

	return 0;

}