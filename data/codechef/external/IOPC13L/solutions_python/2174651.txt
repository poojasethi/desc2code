import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;
 
public class Main {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static void solve()
	{
		final int I = Integer.MAX_VALUE / 3;
		for(int T = ni();T >= 1;T--){
			int n = ni();
			int[][] co = new int[n][];
			for(int i = 0;i < n;i++){
				co[i] = new int[]{ni(), ni(), ni()};
			}
			int[][] dp = new int[n+1][n+1];
			for(int i = 0;i <= n;i++){
				for(int j = 0;j <= n;j++){
					if(i == j){
						if(i > 0){
							dp[i][j] = I;
						}
						continue;
					}
					if(i > j){
						dp[i][j] = dp[j][i];
					}else if(i == 0 && j == 1){
						dp[i][j] = 0;
					}else if(j == 0 && i == 1){
						dp[i][j] = 0;
					}else if(i > j){
						int min = I;
						if(i-1 == j){
							for(int k = 1;k <= i-2;k++){
								min = Math.min(min, dp[k][j] + d(co[i-1], co[k-1]));
							}
							min = Math.min(min, dp[0][j]);
						}else{
							min = dp[i-1][j] + d(co[i-1], co[i-2]);
						}
						dp[i][j] = min;
					}else{
						int min = I;
						if(j-1 == i){
							for(int k = 1;k <= j-2;k++){
								min = Math.min(min, dp[i][k] + d(co[j-1], co[k-1]));
							}
							min = Math.min(min, dp[i][0]);
						}else{
							min = dp[i][j-1] + d(co[j-1], co[j-2]);
						}
						dp[i][j] = min;
					}
				}
//				tr(i, dp[i]);
			}
			
			int ret = I;
			for(int i = 0;i <= n;i++){
				ret = Math.min(ret, dp[n][i]);
				ret = Math.min(ret, dp[i][n]);
			}
			out.println(ret);
		}
	}
	
	static int d(int[] a, int[] b)
	{
		return Math.abs(a[0]-b[0])+Math.abs(a[1]-b[1])+Math.abs(a[2]-b[2]);
	}
	
	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private static String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private static char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}