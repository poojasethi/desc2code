#include<cstdio>
#include<cstring>
using namespace std;
#define FOR(i, a, b) for(int i=a; i<b; ++i)
#define FORC(i, a, b) for(int i=a; i<=b; ++i)
#define FORD(i, a, b) for(int i=a-1; i>=b; --i)
#define ini(arr, val) memset(arr, val, sizeof(arr));
#define min(a, b) ((a>b)?(b):(a))
const int N=1007;
int t, n, x[N], y[N], z[N], dp[N], prefix[N], best[N];
inline int Abs(int x)
{
   return (x > 0) ? (x) : (-x);
}
inline int cost(int i, int j)
{
   if(j == n) return 0;
   return Abs(x[i]-x[j]) + Abs(y[i]-y[j]) + Abs(z[i]-z[j]);
}
int main()
{
   scanf("%d", &t);
   while(t--)
   {
      scanf("%d", &n);
      ini(dp, 0); ini(best, 0); ini(prefix, 0);
      FOR(i, 0, n) scanf("%d%d%d", x + i, y + i, z + i);
      FOR(i, 1, n) prefix[i] = prefix[i - 1] + cost(i - 1, i);
      FORD(i, n-1, 0)
      {
	 dp[i] = cost(i, i+1) + dp[i+1];
	 best[i] = cost(i-1, i+1) + best[i+1];
	 FORC(j, i+2, n)
	 {
	    dp[i] = min( dp[i], cost(i, j) + prefix[j-1] - prefix[i+1] + best[j]);
	    best[i] = min(best[i], cost(i-1, j) + prefix[j-1] - prefix[i] + best[j]);
	 }
      }
      printf("%d\n", dp[0]);
   }
}  