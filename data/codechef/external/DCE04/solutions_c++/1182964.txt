#include <iostream>
#include <string>
#include <algorithm>
#include <iomanip>
#include <cstring>
#include <utility>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <cmath>
#include <climits>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>

using namespace std;

void handle_child(int& spaces, int& child) {
	if (child <= 0) {
		return;
	}

	if (spaces > 0) {
		int max_child = min(child, 4);	

		if (spaces - max_child >= 0) {
			spaces -= max_child;
			child -= max_child;
		}
		else {
			child -= spaces;
			spaces = 0;
		}
	}
}

void handle_men(int& spaces, int& men) {
	// if there is no men left, no one can be rescued
	if (men <= 0) {
		spaces = 0; 
		return;
	}

	if (spaces > 0) {
		men -= 1;
		spaces--;
	}
}

void handle_women(int& spaces, int& women, int& child) {
	// if no women left, ignore children
	if (women <= 0) {
		return;
	}

	if (spaces > 0) {
		women -= 1;
		spaces--;
	}

	handle_child(spaces, child);
}

void solve(int spaces, int m, int w, int c) {
	int temp_m = m;
	int temp_w = w;
	int temp_c = c;

	while (spaces > 0) {
		handle_men(spaces, temp_m);
		if (spaces <= 0)
			break;

		// handle children of the single man
		handle_child(spaces, temp_c);
		if (spaces <= 0)
			break;

		// for each women, we need to take care of up to 4 children
		handle_women(spaces, temp_w, temp_c);
		if (spaces <= 0)
			break;

		// for each women, we need to take care of up to 4 children
		handle_women(spaces, temp_w, temp_c);
		if (spaces <= 0)
			break;
	}

	printf("%d %d %d\n", m - temp_m, w - temp_w, c - temp_c);
}

void inout_rescue() {
	int test_cases;
	int spaces;
	int m;
	int w;
	int c;

	scanf("%d", &test_cases);
	while (test_cases--) {
		scanf("%d", &spaces);
		scanf("%d", &m);
		scanf("%d", &w);
		scanf("%d", &c);
		solve(spaces, m, w, c);
	}
}


int main() {
	inout_rescue();
	return 0;
}