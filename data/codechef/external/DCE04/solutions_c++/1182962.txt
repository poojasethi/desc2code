#include <iostream>
#include <string>
#include <algorithm>
#include <iomanip>
#include <cstring>
#include <utility>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <cmath>
#include <climits>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>

using namespace std;

struct three {
	int m;
	int w;
	int c;

	three(int m = 0, int w = 0, int c = 0) {
		this->m = m;
		this->w = w;
		this->c = c;
	}

	bool operator ==(const three& rhs) const {
		return (m == rhs.m && w == rhs.w && c == rhs.c);
	}

	bool operator !=(const three& rhs) const {
		return !(*this == rhs);
	}

	friend ostream& operator <<(ostream& out, const three& rhs) {
		return out << "m: " << rhs.m << " w: " << rhs.w << " c:" << rhs.c << endl;
	}
};

void handle_child(int& spaces, int& child) {
	if (child <= 0) {
		return;
	}

	if (spaces > 0) {
		int max_child = min(child, 4);	

		if (spaces - max_child >= 0) {
			spaces -= max_child;
			child -= max_child;
		}
		else {
			child -= spaces;
			spaces = 0;
		}
	}
}

void handle_men(int& spaces, int& men) {
	// if there is no men left, no one can go
	if (men <= 0) {
		spaces = 0; 
		return;
	}

	if (spaces > 0) {
		men -= 1;
		spaces--;
	}
}

void handle_women(int& spaces, int& women) {
	if (women <= 0) {
		return;
	}

	if (spaces > 0) {
		women -= 1;
		spaces--;
	}
}

three solve(int spaces, int m, int w, int c) {
	int temp_m = m;
	int temp_w = w;
	int temp_c = c;

	while (spaces > 0) {
		handle_men(spaces, temp_m);
		if (spaces <= 0)
			break;

		handle_child(spaces, temp_c);
		if (spaces <= 0)
			break;

		if (temp_w > 0) {
			handle_women(spaces, temp_w);
			if (spaces <= 0)
				break;

			handle_child(spaces, temp_c);
			if (spaces <= 0)
				break;
		}

		if (temp_w > 0) {
			handle_women(spaces, temp_w);
			if (spaces <= 0)
				break;

			handle_child(spaces, temp_c);
			if (spaces <= 0)
				break;
		}
	}

	cout << m - temp_m << " " << w - temp_w << " " << c - temp_c << endl;
	return three(m - temp_m, w - temp_w, c - temp_c);

}

void inout_rescue() {
	int test_cases;
	int spaces;
	int m;
	int w;
	int c;

	cin >> test_cases;
	while (test_cases--) {
		cin >> spaces >> m >> w >> c;
		solve(spaces, m, w, c);
	}
}

three solution(int capacity, int m, int w, int c) {
	if(c>((4*capacity)/5)) {
		c=(4*capacity)/5;
	}

	if(2*m<((2*(capacity-c)/3)))
	{
		if(w>2*m)
			w=2*m;
	}
	else if(w>((2*(capacity-c)/3))) {
		w=2*(capacity-c)/3;
		if(m>capacity-c-w)
			m=capacity-c-w;
	}

	else
		if(m>capacity-c-w)
			m=capacity-c-w;


	if((m+w)*4<c)
		c=(m+w)*4;
	// printf("%d %d %d\n",m,w,c);

	return three(m, w, c);
}

void test() {
	int total = 100;
	three a;
	three b;
	for (int spaces = 200; spaces <= 1000; ++spaces) {
		for (int m = 10; m < total; ++m) {
			for (int w = 10; w <= 2*total; ++w) {
				for (int c = 10; c <= 4*total; ++c) {
					cout << "sp: " << spaces << " " << m << " " << w << " " << c << endl;
					a = solution(spaces, m, w, c);
					b = solve(spaces, m, w, c);
					if (a != b) {
						cout << "spaces = " << spaces << endl;
						cout << "m: " << m << " w:" << w << " c: " << c << endl;
						cin.get();
					}
				}
			}
		}
	}
}

void special_test() {
	int spaces = 200;
	int m = 10;
	int w = 10;
	int c = 82;

	cout << "correct: " << solution(spaces, m, w, c) << endl;
	cout << "actual: " << solve(spaces, m, w, c) << endl;
}

int main() {
	inout_rescue();
	//test();
	//special_test();
	return 0;
}