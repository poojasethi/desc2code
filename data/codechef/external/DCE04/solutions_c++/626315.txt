// Prepend this entire file to main when ready to submit.

#ifndef PROGRAMMING_CONTESTS_H
#define PROGRAMMING_CONTESTS_H

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <typeinfo>
#include <utility>
using namespace std;

typedef long long LL;

#define RI(x) int x; scanf("%i", &x)
#define RLL(x) long long x; scanf("%lli", &x)
#define RS(x) char _buf[2000]; scanf("%s", _buf); string x(_buf)
#define RL(x) string x; getline(cin, x) //Does not include line break at end.
#define FIN(path) freopen(path, "r", stdin)
#define FOUT(path) freopen(path, "w", stdout)

#define IT(c) typeof(c.begin())
#define FOR(i, a, b) for(int i=(a), _b=(b); i<_b; ++i)
#define FORR(i, a, b) for(int i=(b-1), _a=(a); i>=_a; --i)
#define FORE(it, c) for(IT(c) it=c.begin(); it!=c.end(); ++it)
#define ALL(x) x.begin(), x.end()

#define PB push_back
#define MP make_pair
#define SZ(c) ((int)c.size())
#define LEN(a) (sizeof(a)/sizeof(a[0]))
#define END(a) (a+LEN(a))

#define TWO(e) (1<<e)
#define TWOL(e) (1LL<<e)


static const double PI = acos(-1.0);
static const double GOLD = (1+sqrt(5.0))/2;




template<size_t N>
static bool aLessThan(int (&a)[N], int (&b)[N]) {
  for(int i=0;i<N;++i) {
    if(a[i]<b[i]) return true;
    if(a[i]>b[i]) return false;
  }
  return false;
}

// Requires that type of v is the type that a contains.
template <typename A, typename V>
static void fillArray(A &a, const V &v) {
  fill((V*)a, (V*)a+sizeof(a)/sizeof(V), v);
}


// Pieces which are the empty string are dropped.
static void split(const string &s, vector<string> &pieces, const string &delim = " ") {
  unsigned int nextI = 0;
    for(unsigned int cutAt = s.find(delim,nextI); cutAt != s.npos; cutAt = s.find(delim,nextI)) {
         if(cutAt > nextI) pieces.push_back(s.substr(nextI,cutAt-nextI));
         nextI = cutAt+delim.length();
    }
    if(nextI < s.length()) {
         pieces.push_back(s.substr(nextI));
  }
}

static string toLower(const string& s) {
  string t = s;
  transform(s.begin(), s.end(), t.begin(), (int (*)(int))tolower);
  return t;
}
static string toUpper(const string& s) {
  string t = s;
  transform(s.begin(), s.end(), t.begin(), (int (*)(int))toupper);  
  return t;
}



static bool isLetter(const char& c) {
  char d = tolower(c);
  return d >= 'a' && d <= 'z';
}
static bool isVowel(const char& c) {
  char d = tolower(c);
  return d=='a'||d=='e'||d=='i'||d=='o'||d=='u'||d=='y';
}
static bool isConsonant(const char& c) {
  return isLetter(c) && !isVowel(c);
}






























// Stuff for debugging.

static void sleep(const int ms) {
    clock_t goal = ms + clock();
    while (goal > clock());
}

template<typename T>
static void print(T x) {
  cout << x << endl;
}

template<typename T>
static void print(T first, const T &last) {
  while(first != last) cout << *(first++) << " ";
  cout << endl;
}

template<typename T, size_t LENGTH>
static void print(const T (&a)[LENGTH]) {
  print(a,a+LENGTH);
}

template<typename T, size_t LENGTH0, size_t LENGTH1>
static void print(const T (&a)[LENGTH0][LENGTH1]) {
  for(int i = 0; i < LENGTH0; ++i) {
    print(a[i]);
  }
}

static double timer() {
  return 1.0*clock()/CLOCKS_PER_SEC;
}

#endif // PROGRAMMING_CONTESTS_H









int main() {
  //FIN("input.txt");
  RI(t);
  FOR(tests,0,t) {
    RI(cap); RI(men); RI(wom); RI(chi);
    
    int best = 0;
    int ans[3]={0}; //c,w,m
    
    FOR(m,0,men+1) {
      int c = min(min(4*m,chi),cap-m);
      int w = 0;
      
      int left = cap-m-w-c, wLeft = wom-w, cLeft = chi-c;
      int wcccc = min(min(min(left/5,wLeft),cLeft/4),2*m);
      w += wcccc;
      c += 4*wcccc;
      
      left = cap-m-w-c, wLeft = wom-w, cLeft = chi-c;
      if(wLeft > 0 && left > 0 && w < 2*m) {
        ++w; --left; --wLeft;
        c += min(cLeft,left);
      }

      left = cap-m-w-c, wLeft = wom-w, cLeft = chi-c;
      w += min(min(wLeft,left),2*m-w);
      
      int tot = m+w+c; int curr[3]={c,w,m};
      
      /*
      print("start");
      print(ans);
      print(curr);
      print(aLessThan(ans,curr));
      */
      
      if(tot>best||(tot==best&&aLessThan(ans,curr))) {
        best = tot;
        memcpy(ans,curr,3*sizeof(int));
      }
    }
    
    printf("%i %i %i\n", ans[2], ans[1], ans[0]);   
  }
  return 0;
}
