#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll sum[1001][1001]={}, mx[1001][1001]={}, maxcol[1001][1001]={}, a[1001][1001];
const int inf= 2000000000;
ll min(ll r, ll t){
return (r<t)?r:t;}
int main(){
	int n, m, i, j, k, q, x, y, moves=0, s;
	cin>>n>>m;
	for(i=1; i<=n; i++){
		for(j=1; j<=m; j++){
			cin>>a[i][j];
		}
	}
	cin>>q;
	for(i=1; i<=n; i++){
		for(j=1; j<=m; j++){
			sum[i][j]=a[i][j];
			sum[i][j]+=sum[i-1][j];
			sum[i][j]+=sum[i][j-1];
			sum[i][j]-=sum[i-1][j-1];
		//	cout<<sum[i][j]<<" ";
		}//cout<<endl;
	}
	while(q--){
		cin>>x>>y;
		moves=inf;
		for(i=1; i<=n; i++){
			deque<int> dq;
			for(j=1; j<=y; j++){
				while(!dq.empty()&&a[i][j]>a[i][dq.back()]){
					dq.pop_back();
				}
				dq.push_back(j);
			}
			for(; j<=m; j++){
				//cout<<a[i][dq.front()];
				maxcol[i][j-1]=a[i][dq.front()];
				while(!dq.empty()&&dq.front()<=j-y){
					dq.pop_front();
				}
			
				while(!dq.empty()&&a[i][j]>a[i][dq.back()]){
					dq.pop_back();
				}
				dq.push_back(j);
			}
			//cout<<a[i][dq.front()]<<"\n";
			maxcol[i][j-1]=a[i][dq.front()];
		}
		/*for(i=1; i<=n; i++){
			for(j=y; j<=m; j++)
				cout<<maxcol[i][j]<<" ";
			cout<<endl;
		}*/
		for(j=y; j<=m; j++){
			deque<int> dq;
			for(i=1; i<=x; i++){
				while(!dq.empty()&&maxcol[i][j]>maxcol[dq.back()][j]){
					dq.pop_back();
				}
				dq.push_back(i);
			//	cout<<"push back "<<i<<endl;
			}
			for(; i<=n; i++){
				s=sum[i-1][j]+sum[i-x-1][j-y]-sum[i-x-1][j]-sum[i-1][j-y];
				moves=min(moves, maxcol[dq.front()][j]*x*y-s);
			//	cout<<maxcol[dq.front()][j]<<" "<<s<<" "<<maxcol[dq.front()][j]*x*y-s<<" "<<i<<" "<<j<<" "<<endl;
				while(!dq.empty()&&dq.front()<=i-x){
			//		cout<<"pop front "<<dq.front()<<endl;
					dq.pop_front();
				}
			
				while(!dq.empty()&&maxcol[i][j]>maxcol[dq.back()][j]){
			//		cout<<"pop back "<<dq.back()<<endl;
					dq.pop_back();
				}
				dq.push_back(i);
			//	cout<<"push back "<<i<<endl;
			}
			s=sum[i-1][j]+sum[i-x-1][j-y]-sum[i-x-1][j]-sum[i-1][j-y];
			moves=min(moves, maxcol[dq.front()][j]*x*y-s);
			//cout<<maxcol[dq.front()][j]<<" "<<s<<" "<<maxcol[dq.front()][j]*x*y-s<<" "<<i<<" "<<j<<" "<<endl;
		}cout<<moves<<endl;
	}
}