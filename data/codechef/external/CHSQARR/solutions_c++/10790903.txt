#include<iostream>
#include<deque>
using namespace std;


int arr[1001][1001],sum[1001][1001];
int colmax [1001][1001],rowmax[1001][1001],omax[1001][1001];
deque< pair<int,int> > q1(1001);
int i,j,n,m,q,a,b,l,z;

void sumi()
{
    for(i=0;i<=n;i++)
    {
        sum[i][0]=0;

    }
    for(j=0;j<=m;j++)
    {
        sum[0][j]=0;

    }
    for(i=1;i<=n;i++)
    {
        int rs=0;
        for(j=1;j<=m;j++)
            {
                    sum[i][j]=arr[i][j]+rs+sum[i-1][j];
                    rs+=arr[i][j];
            }
    }
}

void columnmax()
{
    for(i=1;i<=n;i++)
        {
            q1.clear();
            for(z=1;z<=b;z++)
            {

                   while ( (!q1.empty()) && arr[i][z] >= arr[q1.back().first][q1.back().second])
                        q1.pop_back();  // Remove from rear
                                // Add new element at rear of queue
                        q1.push_back(make_pair(i,z));

             }
            colmax[i][b]=q1.front().second;

            for(j=2;j<=(m-(b-1));j++)
                {
                        while ( (!q1.empty()) &&  q1.front().second < j)
                            q1.pop_front();  // Remove from front of queue
                    while ( (!q1.empty()) && arr[i][j+b-1] >= arr[q1.back().first][q1.back().second])
                                    q1.pop_back();  // Remove from rear

        // Add new element at rear of queue
                                    q1.push_back(make_pair(i,j+b-1));

                    colmax[i][b+(j-1)]=q1.front().second;

                }
            //cout<<endl;
        }
}

void printcolmax()
{
    for(i=a;i<=n;i++)
    {
        for(j=b;j<=m;j++)
            cout<<omax[i][j]<<" ";
    cout<<endl;
    }

}
void rowimax()
{

        for(j=1;j<=m;j++)
        {
            q1.clear();
            for(l=1;l<=a;l++)
            {

                   while ( (!q1.empty()) && arr[l][j] >= arr[q1.back().first][q1.back().second])
                        q1.pop_back();  // Remove from rear
                                // Add new element at rear of queue
                        q1.push_back(make_pair(l,j));

             }
            rowmax[a][j]=q1.front().first;

            for(i=2;i<=(n-(a-1));i++)
                {
                        while ( (!q1.empty()) &&  q1.front().first < i)
                            q1.pop_front();  // Remove from front of queue
                    while ( (!q1.empty()) && arr[i+a-1][j] >= arr[q1.back().first][q1.back().second])
                                    q1.pop_back();  // Remove from rear

        // Add new element at rear of queue
                                    q1.push_back(make_pair(i+a-1,j));

                    rowmax[i+a-1][j]=q1.front().first;

                }
            //cout<<endl;
        }


}

int maxsub()
{
        for(j=b;j<=m;j++)
        {

            q1.clear();
            for(z=1;z<=a;z++)
                        {
                            while ( (!q1.empty()) && arr[z][colmax[z][j]] >= arr[q1.back().first][q1.back().second])
                                q1.pop_back();  // Remove from rear
                                // Add new element at rear of queue
                            q1.push_back(make_pair( z,colmax[z][j]  ));
                        }

        omax[a][j]=arr[q1.front().first][q1.front().second];



    for(i=a+1;i<=n;i++)
    {
                    while ( (!q1.empty()) &&  q1.front().first < (i-a+1))
                            q1.pop_front();  // Remove from front of queue
                    while ( (!q1.empty()) && arr[i][colmax[i][j]] >= arr[q1.back().first][q1.back().second])
                                    q1.pop_back();  // Remove from rear

        // Add new element at rear of queue
                                    q1.push_back(make_pair(i,colmax[i][j]));
                omax[i][j]=arr[q1.front().first][q1.front().second];
    }
    }
}

int main()
{

    cin>>n>>m;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
            cin>>arr[i][j];
    }
    sumi();
    cin>>q;
    while(q--)
    {
        cin>>a>>b;
        int mini=1e9+7;
        int lmini=0;
        //int siz=a*b;
        int maxi=0;

        columnmax();
        //rowimax();
        //printcolmax();
        q1.clear();
        maxsub();
//printcolmax();


        for(i=1;i<=(n-(a-1));i++)
        {
                    /*q1.clear();
                    for(z=1;z<=b;z++)
                    {
                        for(l=i;l<(i+a);l++)
                        {
                            while ( (!q1.empty()) && arr[l][z] >= arr[q1.back().first][q1.back().second])
                                q1.pop_back();  // Remove from rear
                                // Add new element at rear of queue
                            q1.push_back(make_pair(l,z));
                        }
                    }


                maxi=arr[q1.front().first][q1.front().second];
                //cout<<"Maxi"<<maxi<<endl;
                lmini=(maxi*a*b)-(sum[i+a-1][b]-sum[i-1][b]);
                if(lmini<mini)
                    mini=lmini;*/
            //cout<<m<<endl;
            for(j=1;j<=(m-(b-1));j++)
            {
                /*for(l=i;l<(i+a);l++)
                {
                    while ( (!q1.empty()) &&  q1.front().second < j)
                            q1.pop_front();  // Remove from front of queue
                    while ( (!q1.empty()) && arr[l][j+b-1] >= arr[q1.back().first][q1.back().second])
                                    q1.pop_back();  // Remove from rear

        // Add new element at rear of queue
                                    q1.push_back(make_pair(l,j+b-1));
                }

                maxi=arr[q1.front().first][q1.front().second];
                */
                //cout<<"Maxi Inner"<<maxi<<endl;
                lmini=(omax[i+(a-1)][j+(b-1)]*a*b)-(sum[i+a-1][j+b-1]-sum[i-1][j+b-1]-sum[i+a-1][j-1]+sum[i-1][j-1]);
                if(lmini<mini)
                    mini=lmini;
            }
        }
        cout<<mini<<endl;
    }

return 0;
}
