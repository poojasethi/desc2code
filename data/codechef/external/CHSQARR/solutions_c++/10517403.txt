using namespace std;
 
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <iterator>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <bitset>
#include <stdio.h>
#include <math.h>
#include <list>
// #include <stdc++.h>

int M[11][11][1000][1000];
int S[1000][1000];
int arr[1000][1000];

// int max(int a, int b){
// 	if (a>b)
// 	{
// 		return a;
// 	}
// 	else return b;
// }

// int min(int a, int b){
// 	if (a<b)
// 	{
// 		return a;
// 	}
// 	else return b;
// }

int main(){
    // cout << __builtin_clz(8)<<"lol\n";
	int n,m,q,a,b;
	scanf("%d %d",&n,&m);
	// int arr[n][m];
	for(int i=0; i<n;i++)
  		for(int j=0; j<m;j++)
        	scanf("%d",&arr[i][j]);

    // int M[1000][1000][11][11];
    // int S[1000][1000];
    for(int i=0; 1<<i <= n; i++)
        for(int j=0; 1<<j <= m; j++)
            for(int x=0; x + (1<<i)-1 < n; x++)
                for(int y = 0; y + (1<<j) -1 < m; y++)
                {
                    i=(int)i;
                    j=(int)j;
                    if (i == 0 && j == 0)
                            M[i][j][x][y] = arr[x][y]; 
                    else if (i == 0)
                            M[i][j][x][y] = max(M[i][j-1][x][y], M[i][j-1][x][(int)(y+(1<<(j-1)))]);
                    else if (j == 0)
                            M[i][j][x][y] = max(M[i-1][j][x][y], M[i-1][j][(int)(x+ (1<<(i-1)))][y]);
                    else 
                            M[i][j][x][y] = max(M[i-1][j-1][x][y], max(M[i-1][j-1][(int)(x + (1<<(i-1)))][y], max(M[i-1][j-1][x][(int)(y+(1<<(j-1)))], M[i-1][j-1][(int)(x + (1<<(i-1)))][(int)(y+(1<<(j-1)))])));
                }

    for (int i = 0; i < m; ++i)
    {
    	S[0][i] = arr[0][i];
    }            
    for (int i = 1; i < n; ++i)
    {
    	for (int j = 0; j < m; ++j)
    	{
    		S[i][j] = arr[i][j] + S[i-1][j];
    	}
    }
    for (int i = 0; i < n; ++i)
    {
    	for (int j = 1; j < m; ++j)
    	{
    		S[i][j] += S[i][j-1];
    	}
    }

    // for (int i = 0; i < n; ++i)
    // {
    // 	for (int j = 0; j < m; ++j)
    // 	{
    // 		cout << i << " " <<j <<"S" <<S[i][j]<<endl;
    // 	}
    // }
    scanf("%d",&q);
    while(q--){
    	scanf("%d %d",&a,&b);
    	int max_element,sum,ans=1000000007;
    	for (int i = 0; i <= n-a; ++i)
    	{
    		for (int j = 0; j <= m-b; ++j)
    		{
    			int x=i,y=j;
    			int x1=i+a-1,y1=j+b-1;
    	// 		int k = log2(x1 - x + 1);
 				// int l = log2(y1 - y + 1);
                int k = 31-__builtin_clz(x1-x+1);
                int l = 31- __builtin_clz(y1-y+1);
 				max_element = max(M[k][l][x][y], max(M[k][l][(int)(x1 - (1<<k) + 1)][y], max(M[k][l][x][(int)(y1 - (1<<l) + 1)], M[k][l][(int)(x1 - (1<<k) + 1)][(int)(y1 - (1<<l) + 1)])));
 				sum = S[x1][y1];
 				// cout << sum << "total" << endl;
 				if (x>0)
 				{
 					sum = sum - S[x-1][y1];
 				}
 				if (y>0)
 				{
 					sum -= S[x1][y-1];
 				}
 				if (x>0 && y>0)
 				{
 					sum += S[x-1][y-1];
 				}
 				// cout << i<<" "<<j << "sum" << sum<< endl;
 				ans = min(ans, max_element*a*b-sum);
    		}
    	}
    	// cout << ans << endl;
        printf("%d\n",ans );
    }
    return 0;            
}