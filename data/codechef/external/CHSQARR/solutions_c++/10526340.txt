#include<bits/stdc++.h>
using namespace std;


#define MEM(a,N,b) fill(a,(a+N),b)
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define FORR(i,n) for(i=n-1;i>=0;--i)
#define elif else if
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define sll(x) scanf("%lld",&x)
#define sl(x)  scanf("%ld",&x)
#define sd(x)  scanf("%d",&x)
#define pi(x)  printf("%d",x)
#define pl(x)  printf("%ld",x)
#define pll(x) printf("%lld",x)
#define nl     printf("\n")
#define sp     printf(" ")
typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef pair<int,long> PIL;
typedef pair<long,int> PLI;
typedef pair<int,long long> PILL;
typedef pair<long long,int> PLLI;
typedef pair<long,long> PLL;
typedef pair<long long,long long> PLLLL;
typedef pair<double,PIL> PDPIL;
typedef vector<int> VI;
typedef vector<long> VL;
typedef vector<double> VD;
typedef vector<long double> VLD;
typedef vector<long long> VLL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VLL> VVLL;
typedef vector<PII > VPII;
typedef vector<PLL > VPLL;
typedef vector<PIL> VPIL;
typedef vector<PLI > VPLI;
typedef vector<PILL> VPILL;
typedef vector<PLLI> VPLLI;
typedef vector<PLLLL> VPLLLL;
typedef vector<VPLL> VVPLL;
typedef vector<PDPIL> VPDPIL;
#define ll long long
#define l long
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define ABS(x)   ((x) < 0 ? (-1)*(x) : (x))
#define Pi 3.1415926535897
#define MOD 1000000007
#define coolreshab ios::sync_with_stdio(false);//cin.tie(NULL)


/*freopen("test.txt","r",stdin);
  freopen("out.txt","w",stdout);
  cout << clock() / (double) CLOCKS_PER_SEC << "\n";*/


VVL mat,rowmax,Max;
VVLL sum;
deque<int> DQ;
main()
 { int N,M,Q,i,j,a,b;
   l ans;
   coolreshab;
   /*freopen("test.txt","r",stdin);
     freopen("out.txt","w",stdout);*/

   cin>>N>>M;
   mat.resize(N,VL(M));

   FORN(i,N)
    {
        FORN(j,M)
            cin>>mat[i][j];
    }
   sum.resize(N+1,VLL(M+1,0));
   FORAB(i,1,N)
   {
       FORAB(j,1,M)
       {
           sum[i][j]=mat[i-1][j-1]+sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1];
          // cout<<sum[i][j]<<" ";
       }
       //cout<<endl;
   }
   cin>>Q;

   while(Q--)

      {
          cin>>a>>b;
          rowmax.resize(N);


          FORN(i,N)
          {

              FORN(j,b)
              {
                  while(!DQ.empty() and mat[i][j]>=mat[i][DQ.back()])
                  {
                      DQ.pop_back();
                  }
                  DQ.pb(j);
              }

              for(;j<M;++j)
              {
                  rowmax[i].pb(mat[i][DQ.front()]);
                  while(!DQ.empty() and DQ.front()<=j-b)
                  {
                      DQ.pop_front();
                  }
                  while(!DQ.empty() and mat[i][j]>=mat[i][DQ.back()])
                  {
                      DQ.pop_back();
                  }
                  DQ.pb(j);
              }
             rowmax[i].pb(mat[i][DQ.front()]);
             DQ.clear();
          }

       /* FORN(i,N)
         {
             FORN(j,rowmax[i].size())
                cout<<rowmax[i][j]<<" ";
             cout<<endl;
         }*/
         DQ.clear();
         Max.resize(N-a+1);
         FORN(j,M-b+1)
          {

              FORN(i,a)
              {
                  while(!DQ.empty() and rowmax[i][j]>=rowmax[DQ.back()][j])
                  {
                      DQ.pop_back();
                  }
                  DQ.pb(i);
              }

              for(;i<N;++i)
              {
                  Max[i-a].pb(rowmax[DQ.front()][j]);
                  while(!DQ.empty() and DQ.front()<=i-a)
                  {
                      DQ.pop_front();
                  }
                  while(!DQ.empty() and rowmax[i][j]>=rowmax[DQ.back()][j])
                  {
                      DQ.pop_back();
                  }
                  DQ.pb(i);
              }
              Max[i-a].pb(rowmax[DQ.front()][j]);
              DQ.clear();
          }
        /* cout<<endl;
         FORN(i,N-a+1)
         {
             FORN(j,Max[i].size())
                cout<<Max[i][j]<<" ";
             cout<<endl;
         }*/
        ans=LONG_MAX;
        FORN(i,N-a+1)
        {
            FORN(j,M-b+1)
            {
                ans=MIN(ans , (Max[i][j]* 1LL *a *b) - (sum[i+a][j+b]-sum[i][j+b]-sum[i+a][j]+sum[i][j]));
            }
        }
        cout<<ans<<endl;
        Max.clear();
        rowmax.clear();
        DQ.clear();
      }
      // cout << clock() / (double) CLOCKS_PER_SEC << "\n";
 }
