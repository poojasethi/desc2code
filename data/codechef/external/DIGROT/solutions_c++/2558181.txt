#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>
#include<list>
#include<string>
#include<utility>
#include<numeric>
#include<iterator>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<climits>
#include<cstring>

#define ALL(c)  c.begin(), c.end()
#define TR(c, it)   for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define MAX(a, b)   ((a) > (b) ? (a) : (b))
#define gc  getchar_unlocked
#define lli long long int
#define inf INT_MAX
#define mininf INT_MIN
#define pb push_back
#define mp  make_pair

using namespace std;

int makeNum(vector<int> v)
{
    int i = v.size() - 1;
    int n = 0;
    while(v.size())
    {
        n += pow(10, i) * *v.begin();
        i--;
        v.erase(v.begin());
    }
    return n;
}

int lrot(int n)
{
    vector<int> num;
    vector<int>::iterator it;
    int temp = n;
    while(temp)
    {
        num.pb(temp % 10);
        temp /= 10;
    }
    reverse(ALL(num));
    num.pb(*num.begin());
    num.erase(num.begin());
    if(*num.begin() == 0)
        num.erase(num.begin());
    temp = makeNum(num);
    return temp;
}

int rrot(int n)
{
    vector<int> num;
    vector<int>::iterator it;
    int temp = n;
    while(temp)
    {
        num.pb(temp % 10);
        temp /= 10;
    }
    reverse(ALL(num));
    it = num.end();
    --it;
    num.insert(num.begin(), *it);
    num.erase(--num.end());
    if(*num.begin() == 0)
        num.erase(num.begin());
    temp = makeNum(num);
    return temp;
}


int main()
{
    int t, n, n_saved;
    scanf("%d", &t);
    while(t--)
    {
        scanf("%d", &n);
//        n_saved = n;
        if(n < 10)
        {
            printf("%d\n", n);
            continue;
        }
//        vector<int> num;
//        vector<int>::iterator it;
//        while(n_saved)
//        {
//            num.pb(n_saved % 10);
//            n_saved /= 10;
//        }
//        int c = count(ALL(num), 0);
//        if(c == num.size()-1)
//        {
//            printf("%d\n", *(--num.end()));
//            continue;
//        }

        int maxm = 0, temp;
        maxm = MAX(maxm, lrot(rrot(n)));
        maxm = MAX(maxm, rrot(lrot(n)));
        temp = n;
        FOR(i, 1, 7)
        {
            temp = rrot(temp);
            maxm = MAX(maxm, temp);
        }
        temp = n;
        FOR(i, 1, 7)
        {
            temp = lrot(temp);
            maxm = MAX(maxm, temp);
        }
        cout << maxm << endl;
    }
    return 0;
}
