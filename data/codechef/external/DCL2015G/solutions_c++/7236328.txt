#include <bits/stdc++.h>
using namespace std;
// my sincerest thanks to e-maxx for sharing his fft implementation
// fft implementation nicked from e-maxx.ru/algo
double PI = 3.14159265359;
typedef complex<double> base;
 
void fft (vector<base> & a, bool invert) {
	int n = (int) a.size();
    //cout<<n<<endl;
	for (int i=1, j=0; i<n; ++i) {
		int bit = n >> 1;
		//cout<<j<<" "<<bit<<endl;
		for (; j>=bit; bit>>=1)
			{
				j -= bit;
				//cout<<j<<" hi "<<bit<<endl;
			}
		j += bit;
		//cout<<i<<" bye "<<j<<endl;
		if (i < j)
			swap (a[i], a[j]);
	}
 
	for (int len=2; len<=n; len<<=1) {
		double ang = 2*PI/len * (invert ? -1 : 1);
		base wlen (cos(ang), sin(ang));
		for (int i=0; i<n; i+=len) {
			base w (1);
			for (int j=0; j<len/2; ++j) {
				base u = a[i+j],  v = a[i+j+len/2] * w;
				a[i+j] = u + v;
				a[i+j+len/2] = u - v;
				w *= wlen;
			}
		}
	}
	if (invert)
		for (int i=0; i<n; ++i)
			a[i] /= n;
}
void squarer (const vector<int> & a,  vector<int> & msd) {
	vector<base> fa (a.begin(), a.end());
	size_t n = 1;
	while (n < a.size())  n <<= 1;
	n <<= 1;
	fa.resize (n);
 
	fft (fa, false);
	for (size_t i=0; i<n; ++i)
		fa[i] *= fa[i];
	fft (fa, true);
 
	msd.resize (n);
	for (size_t i=0; i<n; ++i)
		{
			msd[i] = int (fa[i].real() + 0.5);
			//cout<<res[i]<<endl;
		}
}
int main()
{
	int n,x;
	scanf("%d", &n);
	vector <int> poly(200001,0);
	poly[0]=1;
	for (int i = 0; i < n; ++i)
	{
		scanf("%d", &x);
		poly[x]=1;
	}
	vector <int> ans;
	squarer(poly, ans);
	int m;
	scanf("%d", &m);
	int fans=0;
	while(m--)
	{
		scanf("%d", &x);
		if(ans[x])
			fans++;
	}
	printf("%d\n", fans);
	return 0;
}