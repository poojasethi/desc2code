#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MAX 200005
#define MIN 5005
#define N 1000000007

double PI = 3.14159265359;

typedef complex<double> cmplx;

void fastFourierTransform(vector<cmplx> &a, bool invert)
{
	ll len=(ll) a.size();
	ll i,j,l;
	for(i=1,j=0;i<len;i++)
	{
		ll bit = len >> 1;
		for(;j>=bit;bit>>=1)
			j-=bit;
		j+=bit;
		if(i<j)
			swap(a[i],a[j]);
	}
	for(l=2;l<=len;l<<=1)
	{
		double ang = 2*PI/l * (invert ? -1 : 1);
		cmplx wlen(cos(ang),sin(ang));
		for(i=0;i<len;i+=l)
		{
			cmplx w(1);
			for(j=0;j<l/2;j++)
			{
				cmplx u=a[i+j], v=a[i+j+l/2]*w;
				a[i+j]=u+v;
				a[i+j+l/2]=u-v;
				w*=wlen;
			}
		}
	}
	if(invert)
		for(i=0;i<len;i++)
		{
			a[i]/=len;
		}
} 

void Multiplier(const vector<ll> &a,const vector<ll> &b, vector<ll> &msd)
{
	vector<cmplx> fa(a.begin(),a.end());
	vector<cmplx> fb(b.begin(),b.end());
	vector<cmplx> fc(b.begin(),b.end());
	ll i,n1=1,n2=1;
	while(n1<a.size()) n1<<=1;
	n1<<=1;
	while(n2<a.size()) n2<<=1;
	n2<<=1;
	ll n=max(n1,n2);
	fa.resize(n);
	fb.resize(n);
	fc.resize(n);
	msd.resize(n);
	fastFourierTransform(fa,false);
	fastFourierTransform(fb,false);
	for(i=0;i<n;i++)
	{
		fc[i]=fa[i]*fb[i];
	}
	fastFourierTransform(fc,true);
	for(i=0;i<n;i++)
	{
		msd[i]=(ll)(fc[i].real()+0.5);
	}
}

int main()
{
	
	ll i,j,t,k,l,r,q,m,n;
	scanf("%lld",&n);
	vector<ll> arr(200001,0);
	vector<ll> brr(200001,0);
	arr[0]=1;
	brr[0]=1;
	for(i=0;i<n;i++)
	{
		scanf("%lld", &k);
		arr[k]=1;
		brr[k]=1;
	}
	vector<ll> kup;
	Multiplier(arr,brr,kup);
	//cout<<"hi"<<endl;
	scanf("%lld", &m);
	ll msd=0;
	while(m--)
	{
		scanf("%lld", &k);
		if(kup[k])
			msd++;
	}
	printf("%lld\n",msd);
	return 0;
}