#include<iostream>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<stack>
#include<algorithm>
#include<cstdio>
#include<cstring>
 
#define sd(x) scanf("%d",&x)
#define MP make_pair
#define PB push_back
#define MOD 1000000007
#define M 40000000
#define F first
#define S second
#define ll long long int
#define LL long long int
 
using namespace std;
 
#define N 200001
 
int vis[N], RIGHT[N], arr[N], LEFT[N], b[101][N];
vector<int> adj[N];
int n;
inline LL powr(LL i, LL x, LL c){
    if(x <= 0){
        return 1%c;
    }
    LL ans = powr(i, x/2, c);
    ans*=ans;
    if(ans >= c)
        ans %= c;
    if(x & 1){
        ans *= i;
    }
    if(ans >= c)
        ans %= c;
    return ans;
}
inline int count(int pos, int val){
    int ans  =0 ;
    while(pos > 0){
        ans += b[val][pos];
        pos -= (pos & -pos);
    }
    return ans;
}
inline int update(int pos, int x, int val){
    while(pos <= n){
        b[x][pos] += val;
        pos += pos & -pos;
    }
    return 0;
}
inline int range(int l, int r, int x){
    int ans = 0;
    ans = count(r, x);
    ans -= count(l-1, x);
    return ans;
}
int cnt = 0;
inline int make(int x){
    cnt++;
    int i;
    LEFT[x] = cnt;
    for(i = 0; i < adj[x].size(); i++){
        if(vis[adj[x][i]] == 0){
            vis[adj[x][i]] = 1;
            make(adj[x][i]);
        }
    }
    RIGHT[x] = cnt;
    return 0;
}
int main(){
    int  k, i, x, y, z, pos, l, r;
    LL c;
    cin>>n>>k;
    for(i = 1; i <= n; i++){
        sd(arr[i]);
    }
    for(i = 1; i < n; i++ ){
        sd(x);
        sd(y);
        adj[x].PB(y);
        adj[y].PB(x);
    }
    for(i = 1; i <= n; i++){
        vis[i] = 0;
    }
    vis[1] = 1;
    make(1);
    for(i = 0; i <= 100; i++){
        for(int j = 0; j <= n; j++){
            b[i][j] = 0;
        }
    }
    //cout<<"Yes";
    for(i = 1; i <= n; i++){
        update(LEFT[i], arr[i], 1);
    }
 
    for(i = 0; i < k; i++){
        sd(x);
        sd(y);
        sd(z);
        if(x == 1){
            pos = LEFT[y];
            update(pos, arr[pos], -1);
            update(pos, z, 1);
            arr[pos] = z;
        }
        else{
            LL ans = 1;
            l = LEFT[y];
            r = RIGHT[y];
            c = z;
            for(int j = 1; j <= 100; j++){
                x = range(l, r, j);
                //cout<<j<<" "<<x<<endl;
                ans *= powr(j, x, c);
                if(ans >= c){
                    ans %= c;
                }
            }
            printf("%lld\n", ans);//<<endl;
        }
    }
    return 0;
}  