#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<deque>
#include<iostream>
#include<string.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<algorithm>
#include<bitset>
#include<stack>
#include<queue>
#define MODM 1000000007
#define MAXM 2147483647
#define mp make_pair
#define ff first
#define ss second
#define Pi 3.14159265358979323846264
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define Sort(x) sort(x.begin(),x.end())
#define P pair<int,int>
#define S(x) scanf("%d",&x);
using namespace std;
typedef long long int lli;
typedef unsigned long long int llu;

lli gcd(lli a,lli b){if(a==0)return(b);else return(gcd(b%a,a));}
lli fastpow(lli a,lli n,lli temp){if(n==1)return((a*temp)%MODM); if(n&1)temp=(temp*a)%MODM;return(fastpow((a*a)%MODM,n/2,temp));}
int scan()
{
 int t=0,m=1;char c;c=getchar();while((c<'0' || c>'9') and c!='-') c=getchar();if(c=='-'){c=getchar();m=-1;}
 while(c>='0' && c<='9'){t=(t<<3)+(t<<1)+c-'0';c=getchar();}
return(t*m);
}
vector<int>v,hash;
vector< vector<int> >adj;
map< vector<int>,int>mymap;
lli fact[10005];
char done[10005];
int num;
lli solve(int nd,int par)
{	
	lli ans=1;
	int nnd;
	vector<int>lst;
	lst.pb(-1);
	for(int i=0;i<adj[nd].size();i++)
	{
		nnd=adj[nd][i];
		if(nnd!=par)
		{	
			//printf("called to %d\n",nnd);
			ans=(ans*solve(nnd,nd))%MODM;
			if(mymap[hash]==0)
			{
				mymap[hash]=(++num);
				lst.pb(num);
			}
			else
			lst.pb(mymap[hash]);
		}
	}
	//printf("node=%d %d\nlist\n",nd,lst.size());
	Sort(lst);
	/*for(int i=0;i<lst.size();i++)
	printf("%d ",lst[i]);
	printf("\n");*/
	int cnt=1;
	for(int i=1;i<lst.size();i++)
	{
		if(lst[i]!=lst[i-1])
		{
			ans=(ans*fact[cnt])%MODM;
			cnt=1;
		}
		else cnt++;
	}
	ans=(ans*fact[cnt])%MODM;
	hash=lst;
	return(ans);
}	
		
int main()
{
	int n,t,x,y;
	lli ans,cnt;
	fact[0]=fact[1]=1;
	for(int i=2;i<=10001;i++)
	fact[i]=(fact[i-1]*i)%MODM;
	S(t);
	while(t--)
	{	
		num=0;
		mymap.clear(); adj.clear(); hash.clear();
		S(n);
		for(int i=0;i<n;i++)
		adj.pb(v);
		for(int i=0;i<n-1;i++)
		{
			S(x);S(y);
			adj[x].pb(y);
			adj[y].pb(x);
		}
		printf("%lld\n",solve(0,-1));
	}
	return(0);
}
				
				