#include <iostream>
#include <cassert>
#include <fstream>
#include <cstdio>
#include <cassert>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <string>
#include <utility>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <ctime>
#include <vector>                              
using namespace std;
#define fname ""
#define ull unsigned long long
#define ll long long
#define INF 1000*1000*1000
#define F first
#define S second
#define mp make_pair
#define pb push_back
const int N = 200500;
const int mod = INF + 7;
 
ll binpow(ll a, ll b) {
	ll res = 1;
	while(b) {
		if (b & 1) res = (res * a) % mod;
		a = (a * a) % mod;
		b >>= 1;
	}
	return res;
}
 
ll f[N], inv[N];
 
ll get(int x, int y, int x2, int y2) {
	int n = x2 - x;
	int m = y2 - y;
	ll res = f[n + m];
	res = (res * inv[n]) % mod;
	res = (res * inv[m]) % mod;
	return res;
}
 
int n, m, k;
 
struct node {
	int x, y;
	bool operator < (node T) const {
		if (x == T.x) return y < T.y;
		return x < T.x;
	}
}a[N];
 
ll d[N];
 
void solve() {
	scanf("%d%d%d", &n, &m, &k);
 
	for (int i = 1; i <= k; ++ i) {
		scanf("%d%d", &a[i].x, &a[i].y);
	}
	++k;
	a[k].x = n, a[k].y = m;
	sort(a + 1, a + 1 + k);
	memset(d, 0, sizeof d);
	for (int i = 1; i <= k; ++ i) {
		d[i] = get(1, 1, a[i].x, a[i].y);
		for (int j = 1; j < i; ++ j) {
			if (a[i].x >= a[j].x && a[i].y >= a[j].y) {
				d[i] = (d[i] - get(a[j].x, a[j].y, a[i].x, a[i].y) * d[j]) % mod;
				if (d[i] < 0) d[i] += mod;
			}
		}
	}
	printf("%lld\n", d[k]);
}
 
int main ()
{
	#ifndef ONLINE_JUDGE
	freopen (fname"in","r",stdin);
	freopen (fname"out","w",stdout);
	#endif
 
	f[0] = 1;
	inv[0] = 1;
	for (int i = 1; i <= 200000; ++ i) {
		f[i] = (f[i - 1] * i) % mod;
		inv[i] = binpow(f[i], mod - 2);
	}
 
	int test;
	scanf("%d\n", &test);
 
	while(test--) solve();
 
	return 0;
} 