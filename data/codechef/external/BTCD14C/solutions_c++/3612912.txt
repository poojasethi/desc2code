#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define P(x) printf("%d\n",x)

typedef long long int LL;
const int MAXN = 10000001;

int prime[MAXN];
int P[MAXN];
vector<int > C[447];

void pre() {

	int rank = 0;
	for(int i = 2; i < MAXN; i++) if(!prime[i]) {
		rank++;
		P[rank] = i;
		if(rank <= 446) C[rank].push_back(0);
		if(rank <= 446) C[rank].push_back(i);
		for(int j = 2*i; j < MAXN; j += i) {
			if(!prime[j]) {
				prime[j] = rank;
				if(rank <= 446) C[rank].push_back(j);
			}
		}
		if(rank <= 446) C[rank].push_back(MAXN);
	}

	rep(i,2,MAXN) {
		if(!prime[i]) prime[i] = 1;
		else prime[i] = 0;

		prime[i] += prime[i-1];
	}
}


int query(int idx, int l, int r) {
	int lo = 0;
	int hi = C[idx].size()-1;
	int y = 0;
	while(lo <= hi) {
		int mi = (lo+hi)>>1;
		if(C[idx][mi] <= r) {
			y  = mi;
			lo = mi+1;
		} else {
			hi = mi-1;
		}
	}

	lo = 0;
	hi = C[idx].size()-1;
	int x = 0;
	while(lo <= hi) {
		int mi = (lo+hi)>>1;
		if(C[idx][mi] >= l) {
			x  = mi;
			hi = mi-1;
		} else {
			lo = mi+1;
		}
	}
	// printf("%d %d %d\n",idx,y,x);
	return y-x+1;

}

int main() {
	int q;
	pre();
	S(q);
	while(q--) {
		int l,r,k;
		scanf("%d%d%d",&l,&r,&k);
		int num;
		int den = r-l+1;
		if(k > 664579) num = 0;
		else if(k > 446) {
			num = max(prime[r] - prime[max(l-1, P[k])], 0);
		} else {
			num = r-l+1;
			rep(i,1,k+1) num -= query(i,l,r);
			// num = den - num;

		}
		num = den - num;
		int g = __gcd(num, den);
		printf("%d/%d\n",num/g,den/g);
	}
	return 0;
}