#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#define MAXN 10000010

using namespace std;
typedef long long lli;
struct query
{
  int l,r;
  int k;
  int pos;
  int ans;
};

vector<query> ques;

bool cmp1(query a, query b)
{
  return a.k<b.k;
}

bool cmp2(query a, query b)
{
  return a.pos<b.pos;
}

int bit[MAXN];
bool prime[MAXN];

void init()
{
  for(int i=0;i<MAXN;i++) bit[i]=0,prime[i]=1;
}

void update(int i, int val)
{
  while(i<MAXN)
    {
      bit[i]+=val;
      i+=-i&i;
    }
}

int getval(int a)
{
  int ans=0;
  while(a>0)
    {
      ans+=bit[a];
      a-=-a&a;
    }
  return ans;
}

void solve()
{
  init();
  int cnt=0;
  int curr=0;
  for(int i=2;i<MAXN;i++)
    if(prime[i])
    {
      cnt++;
      update(i,1);
      for(lli j=(lli)i*i;j<MAXN;j+=i)
	{
	  if(prime[j])
	    {
	      prime[j]=0;
	      update(j,1);
	    }
	}
      while(curr<ques.size()&&ques[curr].k==cnt)
	{
	  ques[curr].ans=getval(ques[curr].r)-getval(ques[curr].l-1);
	  curr++;
	}
    }
}

int gcd(int a, int b)
{
  if(b==0) return a;
  return gcd(b,a%b);
}

int main()
{
  
  query temp;
  int q;
  scanf("%d",&q);
  for(int i=0;i<q;i++)
    {
      scanf("%d%d%d",&temp.l,&temp.r,&temp.k);
      temp.pos=i;
      temp.ans=temp.r-temp.l+1;
      ques.push_back(temp);
    }

  sort(ques.begin(),ques.end(),cmp1);
  solve();
  sort(ques.begin(),ques.end(),cmp2);
  for(int i=0;i<ques.size();i++)
    {
      int a=ques[i].ans;
      int b=ques[i].r-ques[i].l+1;
      int g=gcd(b,a);
      a/=g,b/=g;
      printf("%d/%d\n",a,b);
    }
  return 0;
}
