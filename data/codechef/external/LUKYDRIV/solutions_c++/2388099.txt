#include <stdio.h>
#include <memory.h>
#include <assert.h>
 
typedef long long lint;
 
const lint MOD = 1000000007LL;
 
int cnt[10];
lint ncrDP[10009][5];
char s[10009];
 
lint ncr(int n, int k)
{
	if(n < 0 || k < 0 || n < k) return 0;
	if(n == k) return 1;
	if(ncrDP[n][k] != -1)
		return ncrDP[n][k];
	return ncrDP[n][k] = (ncr(n - 1, k - 1) + ncr(n - 1, k)) % MOD;
}
 
lint recurse(int used, int nextDigit, int divRest)
{
	if(nextDigit == 0)
	{
		if(used == 0) return 0;
		if(divRest != 0) return 0;
		if(used == 4) return 1;
		return (recurse(used + 1, nextDigit, divRest) + ncr(cnt[0], 4 - used)) % MOD;
	}
	
	lint r = 0;
	for(int u = used; u <= 4 && u - used <= cnt[nextDigit]; u++)
	r = (r + recurse(u, nextDigit - 1, (divRest + (u - used) * nextDigit) % 9) * ncr(cnt[nextDigit], u - used)) % MOD;
	return r;
}
int main()
{
	int T;
	scanf("%d", &T);
	memset(ncrDP, 0xff, sizeof(ncrDP));
	for(int t = 0; t < T; t++)
	{
		int l = 0;
		scanf("%s", s);
		for(int i = 0; i < 10; i++) cnt[i] = 0;
		for(int i = 0; s[i]; i++, l++)
			cnt[s[i] - '0']++;
		
		assert(l <= 10000);
		lint result = recurse(0, 9, 0);
		printf("%lld\n", result);
	}
	return 0;
}
