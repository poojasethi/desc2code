#include <iostream>
#include <utility>
#include <algorithm>
#include <fstream>
using namespace std;

#define LL long long int
#define MAXN 10000
#define F first
#define S second
#define MP make_pair
#define MOD 1000000007

LL sum4[MAXN + 2][4], sum3[MAXN / 10 + 2][3], sum2[MAXN / 100 + 2][2], sum1[MAXN / 1000 + 2], index1 = 0, index2 = 0, index3 = 0, index4 = 0;

LL a[MAXN + 2], dp[MAXN + 2][10][5];

LL comb(LL i, LL j){
    LL ans;
    if(j == 0 or j == i){
        return 1;
    }
    if(i == 0 or j > i){
        return 0;
    }
    ans = i;
    if(j == 1){
        ans %= MOD;
        return ans;
    }
    ans = (ans * (i - 1)) / 2;
    if(j == 2){
        ans %= MOD;
        return ans;
    }
    ans = (ans * (i - 2)) / 3;
    if(j == 3){
        ans %= MOD;
        return ans;
    }
    ans = (ans * (i - 3)) / 4;
    if(j == 4){
        ans %= MOD;
        return ans;
    }
    return ans;
}

inline void Solve(){
    string s;
    cin>>s;
    LL i, j, k, n, count[10] = {0}, temp_count[10], ans = 0;
    n = s.length();
    for(i = 1; i <= n; i++){
        j = (int)s[i - 1] - int('0');
        a[i] = j;
        count[j]++;
    }
    LL num, temp_ans;

    //sum4
    for(i = 0; i < index4; i++){
        for(j = 0; j < 10; j++){
            temp_count[j] = 0;
        }
        temp_ans = 1;
        for(j = 0; j < 4; j++){
            num = sum4[i][j];
            temp_count[num]++;
        }
        for(j = 0; j < 10; j++){
            temp_ans = temp_ans * comb(count[j], temp_count[j]);
            temp_ans %= MOD;
        }
        ans += temp_ans;
        ans %= MOD;
    }

    //sum3
    for(i = 0; i < index3; i++){
        for(j = 0; j < 10; j++){
            temp_count[j] = 0;
        }
        temp_ans = 1;
        for(j = 0; j < 3; j++){
            num = sum3[i][j];
            temp_count[num]++;
        }
        for(j = 0; j < 10; j++){
            temp_ans = temp_ans * comb(count[j], temp_count[j]);
            temp_ans %= MOD;
        }
        ans += temp_ans;
        ans %= MOD;
    }

    //sum2
    for(i = 0; i < index2; i++){
        for(j = 0; j < 10; j++){
            temp_count[j] = 0;
        }
        temp_ans = 1;
        for(j = 0; j < 2; j++){
            num = sum2[i][j];
            temp_count[num]++;
        }
        for(j = 0; j < 10; j++){
            temp_ans = temp_ans * comb(count[j], temp_count[j]);
            temp_ans %= MOD;
        }
        ans += temp_ans;
        ans %= MOD;
    }

    //sum1
    for(i = 0; i < index1; i++){
        for(j = 0; j < 10; j++){
            temp_count[j] = 0;
        }
        temp_ans = 1;
        for(j = 0; j < 1; j++){
            num = sum1[i];
            temp_count[num]++;
        }
        for(j = 0; j < 10; j++){
            temp_ans = temp_ans * comb(count[j], temp_count[j]);
            temp_ans %= MOD;
        }
        ans += temp_ans;
        ans %= MOD;
    }

    if(ans < 0){
        ans += MOD;
    }
    cout<<ans<<endl;
    return;
}

inline void Pre(){
    LL i, j, k, l, tsum1, tsum2, tsum3, tsum4;
    for(i = 0; i < 10; i++){
        tsum1 = i;
        if(tsum1 % 9 == 0 and tsum1 != 0){
            sum1[index1] = i;
            index1++;
        }
        for(j = i; j < 10; j++){
            tsum2 = tsum1 + j;
            if(tsum2 % 9 == 0 and tsum2 != 0){
                sum2[index2][0] = i;
                sum2[index2][1] = j;
                index2++;
            }
            for(k = j; k < 10; k++){
                tsum3 = tsum2 + k;
                if(tsum3 % 9 == 0 and tsum3 != 0){
                    sum3[index3][0] = i;
                    sum3[index3][1] = j;
                    sum3[index3][2] = k;
                    index3++;
                }
                for(l = k; l < 10; l++){
                    tsum4 = tsum3 + l;
                    if(tsum4 % 9 == 0 and tsum4 != 0){
                        sum4[index4][0] = i;
                        sum4[index4][1] = j;
                        sum4[index4][2] = k;
                        sum4[index4][3] = l;
                        index4++;
                    }
                }
            }
        }
    }
    return;
}

int main(){
    Pre();
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
    #endif
    LL t;
    cin>>t;
    while(t--){
        Solve();
    }
    return 0;
}


