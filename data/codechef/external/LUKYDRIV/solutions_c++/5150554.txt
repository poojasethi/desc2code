#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<vector>
#include<queue>
#include<algorithm>
#define mod 1000000007
typedef long long li;
using namespace std;

typedef struct data
{
	li q;
	li r;
} data;

/*class comparison		//for Priority Queue
{
	public : 
	bool operator()(customer a,customer b)
	{
		int pra=0,prb=0;
		pra=a.next;
		prb=b.next;
		if(pra<prb)
			return true;
		else
			return false;
	}
};

int comp(const void *a, const void *b)
{
	data m = *((data *)a);
	data n = *((data *)b);
	if(m.a>n.a)
		return 1;
	else if(m.a<n.a)
		return -1;
	else if(m.a==n.a)
	{
		if(m.d>n.d)
			return 1;
		else
			return -1;
	}
}*/

/*li exp(li x, li y)
{
	if(y==0)
		return 1;
	li z=0;
	z=exp(x,y/2);
	z=(z*z)%mod;
	if((y%2)==1)
		z=(z*x)%mod;
	return z;
}*/
	
int main()
{
	int T=0,N=0,p=0,s=0,m=0,i=0,x=0,j=0,k=0,len=0,end=0,max=0,c=0;
	int R=0;
	int Dp[5][10];
	//char S[20005];
	char y=' ';
	//char c=' ';
	int Z[21];
	for(i=0;i<=20;i++)
	{
		p=i;
		s=0;
		m=0;
		while(p>0)
		{
			m=p%10;
			p=p/10;
			s=s+m;
		}
		Z[i]=s;
		//printf("%lld %lld\n",i,Z[i]);
	}
	scanf("%d",&T);
	getchar();
	while(T--)
	{
		R=0;
		x=0;
		c=0;
		for(i=0;i<=4;i++)
		{
			for(j=0;j<=9;j++)
			{
				Dp[i][j]=0;
			}
		}
		//scanf("%s",S);
		//N=strlen(S);
		//getchar();
		y='1';
		while(y>='0'&&y<='9')
		{
			y=getchar();
			if(y<'0'||y>'9')
				break;
			c=y;
			c=c-'0';
			//printf("%lld %lld\n",i,c);
			/*if(c==9)
			{
				Dp[4][9]=(Dp[4][9]+Dp[3][0]+Dp[3][9])%mod;
			}
			else
				Dp[4][9]=(Dp[4][9]+Dp[3][9-c])%mod;*/
			for(k=3;k>=1;k--)
			{
				for(j=0;j<=9;j++)
				{
					x=j+c;
					x=Z[x];
					Dp[k+1][x]=(Dp[k+1][x]+Dp[k][j])%mod;
				}
			}
			
			Dp[1][c]=(Dp[1][c]+1)%mod;
			/*for(s=0;s<=4;s++)
			{
				for(m=0;m<=9;m++)
				{
					printf("%lld\t",Dp[s][m]);
				}
				printf("\n");
			}
			getchar();*/
		}
		for(i=1;i<=4;i++)
		{
			R=(R+Dp[i][9])%mod;
		}
		/*for(i=0;i<=4;i++)
		{
			for(j=0;j<=9;j++)
			{
				printf("%lld\t",Dp[i][j]);
			}
			printf("\n");
		}*/
		printf("%d\n",R);		
	}
	return 0;
}

	
