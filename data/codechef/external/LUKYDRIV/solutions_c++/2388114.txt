#include <stdio.h>
#include <memory.h>
#include <assert.h>
 
typedef long long lint;
 
const lint MOD = 1000000007LL;
 
int cnt[10], u, t, i;
lint ncrDP[10009][5], dp[5][10][9];
char s[10009];
 
lint ncr(int n, int k)
{
	if(n < 0 || k < 0 || n < k) return 0;
	if(n == k) return 1;
	if(ncrDP[n][k] != -1)
		return ncrDP[n][k];
	return ncrDP[n][k] = (ncr(n - 1, k - 1) + ncr(n - 1, k)) % MOD;
}
 

int main()
{
	int T;
	scanf("%d", &T);
	memset(ncrDP, 0xff, sizeof(ncrDP));
	for(t = 0; t < T; t++)
	{
		scanf("%s", s);
		for(i = 0; i < 10; i++) cnt[i] = 0;
		for(i = 0; s[i]; i++)
			cnt[s[i] - '0']++;
		
		for(int used = 4; used >= 0; used--)
			for(int nextDigit = 0; nextDigit <= 9; nextDigit++)
				for(int divRem = 0; divRem < 9; divRem++)
					if(nextDigit == 0 && used == 0 || nextDigit == 0 && divRem) dp[used][nextDigit][divRem] = 0;
					else if(nextDigit == 0 && used == 4) dp[used][nextDigit][divRem] = 1;
					else if(nextDigit == 0) dp[used][nextDigit][divRem] = (dp[used + 1][nextDigit][divRem] + ncr(cnt[0], 4 - used));
					else for(dp[used][nextDigit][divRem] = 0, u = used; u <= 4; u++)
					dp[used][nextDigit][divRem] += dp[u][nextDigit - 1][(divRem + (u - used) * nextDigit) % 9] * ncr(cnt[nextDigit], u - used);
					
		
		printf("%lld\n", dp[0][9][0] % MOD);
	}
	return 0;
}
