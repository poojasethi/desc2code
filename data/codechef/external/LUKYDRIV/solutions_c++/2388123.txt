#include <stdio.h>
#include <memory.h>
#include <assert.h>
 
typedef long long lint;
 
const lint MOD = 1000000007LL;
 
int T, cnt[10], u, t, i, a, b, c, ptr;
lint ncrDP[10009][5], dp[5][10][9];
char s[10009];

 
lint ncr(int n, int k)
{
	if(n < k) return 0;
	if(n == k || k == 0) return 1;
	if(ncrDP[n][k] != -1)
		return ncrDP[n][k];
	return ncrDP[n][k] = ncr(n - 1, k - 1) + ncr(n - 1, k);
}
 

int main()
{
	scanf("%d", &T);
	
	/*for(int n = 0; n <= 10000; n++)
		for(int k = 0; k < 5; k++)
			if(n < k) ncr[n][k] = 0;
			else if(n == k) ncr[n][k] = 1;
			else ncr[n][k] = ncr[n - 1][k - 1] + ncr[n - 1][k];*/
	memset(ncrDP, 0xff, sizeof(ncrDP));
	while(T--)
	{
		scanf("%s", s);
		for(i = 0; i < 10; i++) cnt[i] = 0;
		for(i = 0; s[i]; i++)
			cnt[s[i] - '0']++;
		
		for(a = 4; a >= 0; a--)
			for(b = 0; b <= 9; b++)
				for(c = 0; c < 9; c++)
					if((b == 0 && a == 0) || (b == 0 && c)) dp[a][b][c] = 0;
					else if(b == 0 && a == 4) dp[a][b][c] = 1;
					else if(b == 0) dp[a][b][c] = (dp[a + 1][b][c] + ncr(cnt[0], 4 - a));
					else for(dp[a][b][c] = 0, u = a; u <= 4; u++)
					dp[a][b][c] += dp[u][b - 1][(c + (u - a) * b) % 9] * ncr(cnt[b], u - a);
					
		
		printf("%lld\n", dp[0][9][0] % MOD);
	}
	return 0;
}
