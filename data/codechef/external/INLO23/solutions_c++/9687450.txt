#include<bits/stdc++.h>
using namespace std;
int ans=INT_MIN;
bool flag=false;
class graph
{
    list<int> *adj;
    public:
     graph(int v)
     {
         adj=new list<int>[v];
     }
     void add_edge(int u,int v)
     {
         adj[u].push_back(v);
     }
     int dfs(int v,vector<bool>& visited,vector<int>& val)
     {
         //cout<<v<<"\n";
         visited[v]=true;
         list<int>::iterator it;
         int rval=val[v];
         for(it=adj[v].begin();it!=adj[v].end();it++)
         {
             if(!visited[*it])
             {
                 rval=min(rval,dfs(*it,visited,val));
             }
         }
         if(!flag)
         {
             ans=(val[v]-rval);
             flag=true;
         }
         else
            ans=max(ans,val[v]-rval);
        return rval;
     }
};
int main()
{
    int i,n,a,b,root;
    scanf("%d",&n);
    graph g(n);
    vector<int> val(n);
    for(i=0;i<n;i++)
        scanf("%d",&(val[i]));
    for(i=0;i<n;i++)
    {
        scanf("%d",&b);
        a=i;
        if(b!=-1)
        {
            b--;
            g.add_edge(b,i);
        }
        else
            root=i;
    }
    vector<bool> visited(n);
    g.dfs(root,visited,val);
    printf("%d",ans);
    return 0;
}