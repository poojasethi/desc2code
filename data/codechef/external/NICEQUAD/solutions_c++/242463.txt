#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;

int main ()
{
  int t,n,x,y,i;
  long long int res = 0;
  long long int e_e[4],e_o[4],o_e[4],o_o[4];
  long long int even_even[2],even_odd[2],odd_even[2],odd_odd[2];
  
  scanf ("%d",&t);
  while (t--)
  {
    scanf ("%d",&n);
    
    // A in 0, B in 3, C in 2, D in 1
    
    memset(e_e,0,sizeof(e_e));
    memset(e_o,0,sizeof(e_o));
    memset(o_e,0,sizeof(o_e));
    memset(o_o,0,sizeof(o_o));
    memset(even_even,0,sizeof(even_even));
    memset(odd_odd,0,sizeof(odd_odd));
    memset(even_odd,0,sizeof(even_odd));
    memset(odd_even,0,sizeof(odd_even));
    
    for (i = 0; i < n; i++)
    {
      scanf ("%d%d",&x,&y);
      if (x > 0 && y > 0) { if (x % 2 == 0) { if (y % 2 == 0) e_e[0]++; else e_o[0]++; } else { if (y % 2 == 0) o_e[0]++; else o_o[0]++; } }
      else if (x < 0 && y > 0) { if (x % 2 == 0) { if (y % 2 == 0) e_e[1]++; else e_o[1]++; } else { if (y % 2 == 0) o_e[1]++; else o_o[1]++; } }
      else if (x < 0 && y < 0) { if (x % 2 == 0) { if (y % 2 == 0) e_e[2]++; else e_o[2]++; } else { if (y % 2 == 0) o_e[2]++; else o_o[2]++; } }
      else if (x > 0 && y < 0) { if (x % 2 == 0) { if (y % 2 == 0) e_e[3]++; else e_o[3]++; } else { if (y % 2 == 0) o_e[3]++; else o_o[3]++; } }
    }
    
    res = 0;
    
    swap(e_o[1],o_e[1]); swap(e_o[3],o_e[3]);
    
    even_even[0] = e_e[2]*e_e[0] + o_o[2]*o_o[0] + e_o[2]*e_o[0] + o_e[2]*o_e[0];
    even_even[1] = e_e[1]*e_e[3] + o_o[1]*o_o[3] + e_o[1]*e_o[3] + o_e[1]*o_e[3];
    even_odd[0] = e_e[2]*e_o[0] + o_o[2]*o_e[0] + e_o[2]*e_e[0] + o_e[2]*o_o[0];
    even_odd[1] = e_e[1]*e_o[3] + o_o[1]*o_e[3] + e_o[1]*e_e[3] + o_e[1]*o_o[3];
    odd_even[0] = e_e[2]*o_e[0] + o_e[2]*e_e[0] + e_o[2]*o_o[0] + o_o[2]*e_o[0];
    odd_even[1] = e_e[1]*o_e[3] + o_e[1]*e_e[3] + e_o[1]*o_o[3] + o_o[1]*e_o[3];
    odd_odd[0] = e_e[2]*o_o[0] + o_e[2]*e_o[0] + e_o[2]*o_e[0] + o_o[2]*e_e[0];
    odd_odd[1] = e_e[1]*o_o[3] + o_e[1]*e_o[3] + e_o[1]*o_e[3] + o_o[1]*e_e[3];
    
    res += even_even[0] * even_even[1];
    res += even_even[0] * even_odd[1];
    res += even_odd[0] * even_even[1];
    res += even_even[0] * odd_even[1];
    res += even_even[0] * odd_odd[1];
    res += even_odd[0] * odd_even[1];
    res += odd_even[0] * even_even[1];
    res += odd_even[0] * even_odd[1];
    res += odd_odd[0] * even_even[1];
    res += odd_odd[0] * odd_odd[1];
    printf("%lld\n",res);
    
  }
  return 0;
}
      