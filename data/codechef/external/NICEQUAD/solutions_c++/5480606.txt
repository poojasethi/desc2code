// Coded By Swapnil Singh
// H4ck3r Alias :- Sw1p

#include <cstdio>
#include <cctype>
#include <cstdlib>
using namespace std;
struct Point
{
Point() : x(0), y(0) {}
Point(int x, int y) : x(x), y(y) { }
int x;
int y;
};
inline int area(Point p1, Point p2, Point p3, Point p4)
{
return ((p1.x*p2.y + p2.x*p3.y + p3.x*p4.y + p4.x*p1.y)
- (p2.x*p1.y + p3.x*p2.y + p4.x*p3.y + p1.x*p4.y)) % 2;
}
const int BUFSIZE = 8192;
char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;
int read_int()
{
int n;
bool sign=true;
sign = 1;
for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
r_buffer[r_bufpos]!='-'; r_bufpos++);
if (r_buffer[r_bufpos] == '-')
{
sign = false;
r_bufpos += 1;
}
if (r_bufpos == BUFSIZE)
{
r_bufpos = 0;
fread(r_buffer, 1, BUFSIZE, stdin);
for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
r_buffer[r_bufpos]!='-'; r_bufpos++);
if (r_buffer[r_bufpos] == '-')
{
sign = false;
r_bufpos += 1;
}
}
n = 0;
for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
n = 10 * n + r_buffer[r_bufpos] - '0';
if (r_bufpos == BUFSIZE)
{
r_bufpos = 0;
fread(r_buffer, 1, BUFSIZE, stdin);
for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
n = 10 * n + r_buffer[r_bufpos] - '0';
}
return sign? n: -n;
}
inline void set_point(Point &p, int n)
{
if (n == 0)
{
p.x = 2;
p.y = 2;
}
else if (n == 1)
{
p.x = 2;
p.y = 1;
}
else if (n == 2)
{
p.x = 1;
p.y = 2;
}
else if (n == 3)
{
p.x = 1;
p.y = 1;
}
}
inline int get_offset(int x, int y)
{
return abs((x % 2) << 1) + abs(y % 2);
}
int A1[4], A2[4], A3[4], A4[4];
int main()
{
int t, x, y, cnt1, cnt2, cnt3, cnt4, n;
Point p1, p2, p3, p4;
t = read_int();
for(; t>0; t--)
{
for(int i=0; i<4; i++)
A1[i] = A2[i] = A3[i] = A4[i] = 0;
n = read_int();
for(int i=0; i<n; i++)
{
x = read_int();
y = read_int();
if (x > 0 && y > 0)
A1[get_offset(x, y)] += 1;
else if (x < 0 && y > 0)
A2[get_offset(x, y)] += 1;
else if (x < 0 && y < 0)
A3[get_offset(x, y)] += 1;
else if (x > 0 && y < 0)
A4[get_offset(x, y)] += 1;
}
unsigned long long result = 0;
for(int a=0; a<4; a++)
{
set_point(p1, a);
for(int b=0; b<4; b++)
{
set_point(p2, b);
for(int c=0; c<4; c++)
{
set_point(p3, c);
for(int d=0; d<4; d++)
{
set_point(p4, d);
if (!area(p1, p2, p3, p4))
result += (unsigned long long)A1[a]*
A2[b]*A3[c]*A4[d];
}
}
}
}
printf("%lld\n", result);
}
return 0;
}