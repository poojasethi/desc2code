#include<iostream>
#include<cmath>
#include<cstdio>
using namespace std;
long long q[4][2][2]; //4 - 0-A 1-B 2-C 3-D
                    //2 - 0-x even 1-x odd
                    //2-  0-y even 1-y odd

void initialize()//to initialize q matrix
{
     for (int i=0; i<4; i++)
       {
           for(int j=0; j<2; j++)
           {
               for(int k=0; k<2; k++)
               {


               q[i][j][k] = 0;
               //cout<<q[i][j][k]<<" ";
               }
           }
       }

}
bool isareaint(int ax, int ay, int bx, int by, int cx, int cy, int dx, int dy)
{
    //from herons formula and Quadrangle Parallelogram Theorem, Pierre Varignon
    //quad area is an int if area is even (since even or odd only depends on whether ax, ay etc are even or odd and not on their vaules can compute for 0 and 1 only)
    int area = (int)abs((double)(ax*by - ay*bx + bx*cy - by*cx + cx*dy - cy*dx + dx*ay - dy*ax));
    //cout<<"area is "<<area<<"ax is "<<ax<<"ay is "<<ay<<"bx is "<<bx<<"by is "<<by<<"cx is "<<cx<<"cy is "<<cy<<"dx is "<<dx<<"dy is "<<dy<<endl;
    return 1 - (area%2);

}
void solve()
{
    long long count =0;
    for(int ax =0; ax<2; ax++)
     for(int ay =0; ay<2; ay++)
      for(int bx =0; bx<2; bx++)
       for(int by =0; by<2; by++)
        for(int cx =0; cx<2; cx++)
         for(int cy =0; cy<2; cy++)
          for(int dx =0; dx<2; dx++)
           for(int dy =0; dy<2; dy++)
           {
               if( isareaint(ax, ay, bx, by, cx, cy, dx, dy) == 1)
               count+= (long long) q[0][ax][ay]*q[1][bx][by]*q[2][cx][cy]*q[3][dx][dy];
           }
           printf("%lld\n", count);

}
int main()
{
    int t, n, x, y, p;
    scanf("%d", &t);
    while(t--)
    {
      initialize();
      scanf("%d", &n);
      for(int i=0; i<n; i++)
      {
          scanf("%d%d", &x , &y);
          if(x == 0 || y ==0)
          continue;
          if(x>0 && y>0)
          p=0;
          if(x >0 && y<0)
          p=1;
          if(x <0 && y<0)
          p =2;
          if(x<0 && y>0)
          p=3;
          q[p][(int)abs((double)x)%2][(int)abs((double)y)%2]++;


      }

      solve();
    }




}
