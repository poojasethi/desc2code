#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<bitset>
#include<complex>
 #include<sstream>
#include<fstream>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
 
 
 
#define oo 					(int)13e7
#define getcx getchar_unlocked
inline void s( int &ret )
{
	ret = 0;
	int x = getcx();
	while( x != -1 && (x < '0' || x > '9' )  && x != '-' )x=getcx();
	bool neg = false;
	if( x=='-' ) { neg=true; x=getcx(); }
	ret = x-'0';
	x=getcx();
	while(  x >= '0' && x <= '9' && x != -1 )
		{ ret = (ret<<3)+(ret<<1) + x-'0'; x=getcx(); }
	if( neg ) ret *= -1;
}
#define sl(n) 					scanf("%lld",&n)
#define sf(n) 					scanf("%lf",&n)
#define fill(a,v) 				memset(a, v, sizeof a)
#define ull 					unsigned long long
#define ll 						long long
#define bitcount 			__builtin_popcount
#define all(x) 				x.begin(), x.end()
#define pb( z ) 				push_back( z )
#define gcd					__gcd
using namespace std;
 
inline int mod2( int xa, int ya, int xb, int yb, int xc, int yc )
{
	int r = (xa^xb^xc)&(ya^yb^yc);
	r ^= xa&ya;
	r ^= xb&yb;
	r ^= yb&yb;
	
	return r;
}
int cnt[4][2][2];
//ll cnt2[4][2];
//int X[30008], Y[30008];
int main()
{
	int t;
	s( t );
	while( t-- )
	{
		int n; s( n );
		fill( cnt, 0 );
		//fill( cnt2, 0 );
		for(int i=0; i < n; i++)
		{
			int x, y;
			s(x); s(y);
			//X[i] = x; Y[i] = y;
			int quad = 0;
			if( x < 0 ) quad |= 1;
			if( y < 0 ) quad |= 2;
			x = abs(x); y=abs(y);
			if( x==0 || y==0 ) 
				continue;
			//cout<< quad << " " << (x&1) << " " << (y&1) << endl;
			cnt[ quad ][ x & 1 ][ y & 1 ] ++;
		}
		
		int q1 = 0, q2 = 1, q3 = 3, q4 = 2;
		ll ans = 0;
		
		
		
		for(int xa=0; xa < 2; xa++)
		for(int ya=0; ya < 2; ya++)
		for(int xb=0; xb < 2; xb++)
		for(int yb=0; yb < 2; yb++)
		for(int xc=0; xc < 2; xc++)
		for(int yc=0; yc < 2; yc++)
		for(int xd=0; xd < 2; xd++)
		for(int yd=0; yd < 2; yd++)
		{
			int m1 = mod2( xa, ya, xb, yb, xc, yc );
			int m2 = mod2( xd, yd, xb, yb, xc, yc );
			
			if( m1 == m2 )
			{
				ll val = cnt[ q1 ][ xa ][ ya ];
				val *= cnt[ q2 ][ xb ][ yb ] * (ll)cnt[ q4 ][ xc ][ yc ] * (ll)cnt[ q3 ][ xd ][ yd ];
				
				ans += val;
			}
			
		}
		cout<< ans << endl;
		
	}
	return 0;
}
 