#include <cstdio>
#include <cctype>
#include <cstring>
#include <cstdlib>
#include <vector>
 
using namespace std;
 
const int BUFSIZE = 4096;
const char MINUS = '-';
const char ZEROCHAR = '0';
 
char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;
 
int readint()
{
    int sign = 1;
    int n = 0;
    for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != MINUS &&
            !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != MINUS &&
                !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    }
    if (r_buffer[r_bufpos] == MINUS)
    {
        sign = -1;
        r_bufpos += 1;
    }
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - ZEROCHAR;
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - ZEROCHAR;
    }
    return sign * n;
}
 
inline int getIndex(int x, int y)
{
    return abs(x % 2) << 1 | abs(y % 2);
}
 
typedef vector<pair<int, int> >::iterator pnt;
 
inline int area(const pnt& a, const pnt& b, const pnt& c, const pnt& d)
{
    return (a->first * b->second + b->first * c->second + c->first * d->second
            + d->first * a->second - a->second * b->first
            - b->second * c->first - c->second * d->first
            - d->second * a->first) % 2;
}
 
inline int idx(const pnt& a)
{
    return (a->first << 1 | a->second);
}
 
int main()
{
    int t, n;
    int x, y;
    int i, j;
    long long result;
    int arr[4][4];
    vector<pair<int, int> > cases;
    cases.push_back(pair<int, int> (0, 0));
    cases.push_back(pair<int, int> (0, 1));
    cases.push_back(pair<int, int> (1, 0));
    cases.push_back(pair<int, int> (1, 1));
    pnt it1;
    pnt it2;
    pnt it3;
    pnt it4;
 
    t = readint();
    for (; t; t--)
    {
        result = 0;
        for (int k=0; k < 4; k++)
            memset(arr[k], 0, sizeof(int)*4);
 
        n = readint();
        for (; n; n--)
        {
            x = readint();
            y = readint();
            i = -1;
            j = -1;
            if (x > 0)
            {
                if (y > 0)
                    i = 0;
                else if (y < 0)
                    i = 3;
            }
            else if (x < 0)
            {
                if (y > 0)
                    i = 1;
                else if (y < 0)
                    i = 2;
            }
            if (i >= 0)
            {
                j = getIndex(x, y);
                arr[i][j] += 1;
            }
        }
 
        for (it1 = cases.begin(); it1 != cases.end(); it1++)
            for (it2 = cases.begin(); it2 != cases.end(); it2++)
                for (it3 = cases.begin(); it3 != cases.end(); it3++)
                    for (it4 = cases.begin(); it4 != cases.end(); it4++)
                        if (!area(it1, it2, it3, it4))
                        {
                            result += (long long) arr[0][idx(it1)]
                                    * arr[1][idx(it2)] * arr[2][idx(it3)]
                                    * arr[3][idx(it4)];
                        }
        printf("%lld\n", result);
    }
    return 0;
}