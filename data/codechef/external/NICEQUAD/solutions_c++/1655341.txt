#include <cstdio>
#include <cctype>
#include <cstdlib>
using namespace std;
struct Co_ordinate
{
Co_ordinate() : a(0), b(0) {}
Co_ordinate(int a, int b) : a(a), b(b) { }
int a;
int b;
};
inline int area(Co_ordinate p1, Co_ordinate p2, Co_ordinate p3, Co_ordinate p4)
{
return ((p1.a*p2.b + p2.a*p3.b + p3.a*p4.b + p4.a*p1.b)
- (p2.a*p1.b + p3.a*p2.b + p4.a*p3.b + p1.a*p4.b)) % 2;
}
const int BUFSIZE = 8192;
char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;
int read_int()
{
int n;
bool sign=true;
sign = 1;
for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
r_buffer[r_bufpos]!='-'; r_bufpos++);
if (r_buffer[r_bufpos] == '-')
{
sign = false;
r_bufpos += 1;
}
if (r_bufpos == BUFSIZE)
{
r_bufpos = 0;
fread(r_buffer, 1, BUFSIZE, stdin);
for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
r_buffer[r_bufpos]!='-'; r_bufpos++);
if (r_buffer[r_bufpos] == '-')
{
sign = false;
r_bufpos += 1;
}
}
n = 0;
for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
n = 10 * n + r_buffer[r_bufpos] - '0';
if (r_bufpos == BUFSIZE)
{
r_bufpos = 0;
fread(r_buffer, 1, BUFSIZE, stdin);
for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
n = 10 * n + r_buffer[r_bufpos] - '0';
}
return sign? n: -n;
}
inline void set_Co_ordinate(Co_ordinate &p, int n)
{
if (n == 0)
{
p.a = 2;
p.b = 2;
}
else if (n == 1)
{
p.a = 2;
p.b = 1;
}
else if (n == 2)
{
p.a = 1;
p.b = 2;
}
else if (n == 3)
{
p.a = 1;
p.b = 1;
}
}
inline int get_offset(int a, int b)
{
return abs((a % 2) << 1) + abs(b % 2);
}
int A1[4], A2[4], A3[4], A4[4];
int main()
{
int t, a, b, cnt1, cnt2, cnt3, cnt4, n;
Co_ordinate p1, p2, p3, p4;
t = read_int();
for(; t>0; t--)
{
for(int i=0; i<4; i++)
A1[i] = A2[i] = A3[i] = A4[i] = 0;
n = read_int();
for(int i=0; i<n; i++)
{
a = read_int();
b = read_int();
if (a > 0 && b > 0)
A1[get_offset(a, b)] += 1;
else if (a < 0 && b > 0)
A2[get_offset(a, b)] += 1;
else if (a < 0 && b < 0)
A3[get_offset(a, b)] += 1;
else if (a > 0 && b < 0)
A4[get_offset(a, b)] += 1;
}
unsigned long long result = 0;
for(int a=0; a<4; a++)
{
set_Co_ordinate(p1, a);
for(int b=0; b<4; b++)
{
set_Co_ordinate(p2, b);
for(int c=0; c<4; c++)
{
set_Co_ordinate(p3, c);
for(int d=0; d<4; d++)
{
set_Co_ordinate(p4, d);
if (!area(p1, p2, p3, p4))
result += (unsigned long long)A1[a]*
A2[b]*A3[c]*A4[d];
}
}
}
}
printf("%lld\n", result);
}
return 0;
} 