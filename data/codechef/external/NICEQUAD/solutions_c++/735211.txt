#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <cmath>
#include <fstream>
#include <algorithm>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <complex>
#include <iterator>
#include <cstdlib>
#include <cstring>
#include <sstream>

using namespace std;

#define EPS (1e-10)
#define EQ(a,b) (abs((a) - (b)) < EPS)
#define EQV(a,b) (EQ((a).real(),(b).real()) && EQ((a).imag(),(b).imag()))

typedef complex<double> P;
typedef pair<P,P> Edge;
typedef long long ll;

const double PI=4*atan(1.0);
//#define RED_FILE

#ifdef RED_FILE
ifstream ifs("input.txt");
ofstream ofs("output.txt");
#define cin ifs
#define cout ofs
#endif

void solve(){

std::ios_base::sync_with_stdio(0);
    int t;
    //cin>>t;
    //FILE *fp=fopen("input.txt","r");
    //FILE *fp=stdin;
    //fscanf(fp,"%d",&t);
    cin>>t;
    while(t--){
        int n;
        //fscanf(fp,"%d",&n);
        cin>>n;
        int d[4][2][2];
        memset(d,0,sizeof(d));
        for(int i = 0; i < n; i++){
            int x,y;
            //fscanf(fp,"%d %d",&x,&y);
            cin>>x>>y;
            int dim=-1;
            if(x>0&&y>0)
                dim=0;
            else if(x>0&&y<0)
                dim=1;
            else if(x<0&&y<0)
                dim=2;
            else if(x<0&&y>0)
                dim=3;
            if(dim!=-1)
                d[dim][abs(x)%2][abs(y)%2]++;
        }
        ll res=0;
        for(int ax=0;ax<2;ax++){
            for(int ay=0;ay<2;ay++){
                for(int bx=0;bx<2;bx++){
                    for(int by=0;by<2;by++){
                        for(int cx=0;cx<2;cx++){
                            for(int cy=0;cy<2;cy++){
                                for(int dx=0;dx<2;dx++){
                                    for(int dy=0;dy<2;dy++){
                                        int sum=abs((ax*by-ay*bx)+(bx*cy-by*cx)+(cx*dy-cy*dx)+(dx*ay-dy*ax));
                                        if(sum%2==0)
                                            res+=(ll)d[0][ax][ay]*(ll)d[1][bx][by]*(ll)d[2][cx][cy]*(ll)d[3][dx][dy];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        //printf("%lld\n",res);
        cout<<res<<endl;
    }
}
int main(){

    solve();

    return 0;
}
