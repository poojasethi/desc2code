#include <bits/stdtr1c++.h>

using namespace std;

typedef long double ld;
struct edge {
	int v; ld w;
};

ld dist[100005];
bool seen[100005];
vector<edge> g[100005];
int main() {
	int t; cin >> t;
	while (t--) {
		int n; cin >> n;
		//clear memory
		for (int i = 1; i <= n; i++) {
			g[i].clear();
			dist[i] = 0;
			seen[i] = false;
		}
		int x, y; ld w;
		while (cin >> x >> y >> w) {
			if (x == -1) break;
			g[x].push_back({y, w});
			g[y].push_back({x, w});
		}
		
		priority_queue<pair<ld, int>> pq;
		pq.push({1e99, 1});
		while (!pq.empty()) {
			auto p = pq.top(); pq.pop();
			int u = p.second; ld d = p.first;
			if (seen[p.second]) continue;
			seen[u] = true;
			dist[u] = d;
			for (edge uv : g[u]) {
				if (!seen[uv.v] && dist[uv.v] < min(d, uv.w)) {
					dist[uv.v] = min(d, uv.w);
					pq.push({dist[uv.v], uv.v});
				}
			}
		}
		cout << setprecision(7) << fixed << dist[n] << endl;
	}
	return 0;
}