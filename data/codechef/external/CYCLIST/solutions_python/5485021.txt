#include<iostream>
#include<queue>
#include<cmath>

using namespace std;

struct vert
{
       int id;
       double cost;
};

bool operator < (const vert &a,const vert &b)
{
     return a.cost < b.cost;
}

#define maxn 1010

bool marked[maxn];
double adj[maxn][maxn];
double cost[maxn];

int main()
{
    int t,v,i,j;
    scanf("%d",&t);
    while(t--)
    {
              scanf("%d",&v);
              for(i=0;i<=v;i++)
              {
                 for(j=0;j<=v;j++)
                 {
                     adj[i][j]=-1;
                 }
              }   
              for(i=0;i<=v;i++)
              {
                  cost[i]=-1;
                  //marked[i]=0;
              }
              for(i=0;i<maxn;i++)
              marked[i]=0;
              int x,y;
              double c;
              while(1)
              {
                      scanf("%d%d%lf",&x,&y,&c);
                      if(x==-1)
                      break;
                      adj[x][y]=c;
                      adj[y][x]=c;
              }
              
              priority_queue<vert> pq;
              vert tmp;
              tmp.id=1;
              tmp.cost=100.0;
              cost[1]=100.0;
              pq.push(tmp);
              while(!pq.empty())
              {
                  tmp=pq.top();
                  pq.pop();
                  int u=tmp.id;
                  double ctmp=tmp.cost;
                  
                  if(marked[u]==1)
                  continue;
                  
                  marked[u]=1;
                  for(i=1;i<=v;i++)
                  {
                      if(adj[u][i]==-1)
                      continue;
                      if(cost[i]==-1||cost[i]<min(ctmp,adj[u][i]))
                      {
                         cost[i]=min(ctmp,adj[u][i]);
                         tmp.id=i;
                         tmp.cost=cost[i];
                         pq.push(tmp);
                      }
                  }
              }
              printf("%.7lf\n",cost[v]);
    }
    return 0;
}
