#include <iostream>
#include <vector>
#include <queue>

using namespace std;
typedef pair<int, double> Pair;

void swap(vector<int> &heapArr,vector<int> &heapPos,int i,int j){
	int temp = heapArr[i];//change type here if not int
	heapArr[i] = heapArr[j];
	heapArr[j] = temp;
	heapPos[heapArr[i]] = i;
	heapPos[heapArr[j]] = j;
}

void maxHeapify(vector<int> &heapArr,vector<double> &values,vector<int> &heapPos,int i){
	int n = heapArr.size() - 1;
	int left = 2*i;
	int right = 2*i+1;
	int largest;
	if(left <= n && values[heapArr[left]] > values[heapArr[i]]){
		largest = left;
	}
	else{
		largest = i;
	}
	if(right <= n && values[heapArr[right]] > values[heapArr[largest]]){
		largest = right;
	}
	if(largest != i){
		swap(heapArr,heapPos,i,largest);
		maxHeapify(heapArr,values,heapPos,largest);
	}
}

void makeHeap(vector<int> &heapArr,vector<double> &values,vector<int> &heapPos){
	int n = heapArr.size()-1;
	for(int i=n/2;i>0;i--){
		maxHeapify(heapArr,values,heapPos,i);
	}
}


int extractMax(vector<int> &heapArr,vector<double> &values,vector<int> &heapPos){
	int n = heapArr.size() - 1;
	int max = heapArr[1];
	heapPos[heapArr[1]]=0;
	heapArr[1] = heapArr[n];
	heapPos[heapArr[1]] = 1;
	heapArr.pop_back();
	maxHeapify(heapArr,values,heapPos,1);
	return max;
}

void increaseKey(vector<int> &heapArr,vector<double> &values,vector<int> &heapPos,int node){
	int pos = heapPos[node];
	while(pos>1 && values[heapArr[pos/2]] < values[heapArr[pos]]){
		swap(heapArr,heapPos,pos,pos/2);
		pos /= 2;
	}
}

/*void heapInsert(vector<int> &heapArr,vector<double> &values,vector<int> &heapPos,int node){
	heapArr.push_back(node);
	heapPos[node] = heapArr.size()-1;
	increaseKey(heapArr,values,heapPos,node);
}*/

int main(){
	int T;
	cin >> T;
	while(T--){
		int n;
		scanf("%d",&n);
		vector<int> heapArr(n+1);
		vector<int> heapPos(n+1);
		for(int i=1;i<=n;i++){
			heapArr[i]=i;
			heapPos[i]=i;
		}
		vector<double> values(n+1,0);
		values[1]=1000000000.0;
		vector<vector<Pair > > adj(n+1);

		int u;
		int v;
		double weight;
		scanf("%d%d%lf",&u,&v,&weight);
		while(u!=-1){
			adj[u].push_back(Pair(v,weight));
			adj[v].push_back(Pair(u,weight));
			scanf("%d%d%lf",&u,&v,&weight);
		}

		while(1){
			int currNode = extractMax(heapArr,values,heapPos);
			if(currNode == n) break;
			for(Pair i : adj[currNode]){
				if(heapPos[i.first]!=0){
					double tmp = values[currNode] < i.second ? values[currNode] : i.second;
					if(values[i.first] < tmp){
						values[i.first] = tmp;
						increaseKey(heapArr,values,heapPos,i.first);
					}
				}
			}
		}
		printf("%.7lf\n",values[n]);  
	}
	/*vector<double> values;
	values.push_back(0.0);
	values.push_back(10000000000.0);
	values.push_back(0.0);
	vector<int> heapArr(3);
	heapArr[1] = 2;
	heapArr[2] = 1;
	vector<int> heapPos(3);
	heapPos[1] = 2;
	heapPos[2] = 1;
	makeHeap(heapArr,values,heapPos);
	cout << heapArr[1] << endl;*/
	return 0;
}