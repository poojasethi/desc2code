#include <iostream>
#include <algorithm>
#include <vector>
typedef long long int ll;
ll a[1000005];
ll size[1000005];
using namespace std;

 
void initialize(ll n)
{
	for(ll i=1;i<=n;i++)
	{
		a[i]=i;
		size[i]=1;
	}	
}
 
ll root(ll x)
{
	while(a[x]!=x)
	{
		a[x]=a[a[x]];
		x=a[x];
	}
	return x;
}
 
bool Connected(ll x,ll y)
{
	if(root(x)==root(y))
	return true;
	
	else
	return false;
}
 
void Union(ll x,ll y)
{
	ll root_x=root(x);
	ll root_y=root(y);
	
	if(root_x==root_y)
	return;
	
	if(size[root_x]<size[root_y])
	{
		a[root_x]=root_y;
		size[root_y]+=size[root_x];
	}
	else
	{
		a[root_y]=root_x;
		size[root_x]+=size[root_y];
	}
}
 
int main() {
	// your code goes here
	ll x,y,p,n,i,s;
	vector<pair<double,pair<ll,ll>>> v;
	cin>>s;
	while(s--)
	{
	double k;
	cin>>n;
	initialize(n);
	v.clear();
	while(1)
	{
		cin>>x>>y>>k;
		
		if(x==-1)
		break;
		
		v.push_back({k,{x,y}});
	}
	sort(v.begin(),v.end());
	for(i=v.size()-1;i>=0;i--)
	{
		Union(v[i].second.first,v[i].second.second);
		
		if(root(n)==root(1))
		{
			printf("%lf\n",v[i].first);
			break;
		}
	}
	}
	return 0;
}