#include <bits/stdc++.h>
#include <assert.h>
#include <unordered_map>
using namespace std;
 
typedef long long ll;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;
 
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define mp make_pair
#define fst first
#define snd second
 
ll t, n, u, v, m, q, r, ql, qr, k, l, s, x, y, w, h, c, a, b, z;
const int N = 1e6 + 50;
const long long mod = 1e9 + 7;
const long long INF = 1LL << 57LL;
const bool JUDGE = false;
vii adj[N];
double cost;
vector < double > cst[N];
priority_queue < pair < double, int > > pq;
vector < double > f;
bool vis[N];
queue < int > Q;
ll mx = 0;
bool bfs(int m) {
	Q = queue < int > ();
	Q.push(1);
	memset(vis, 0, sizeof(vis));
	while (!Q.empty()) {
		int x = Q.front();
		Q.pop();
		if (vis[x]) continue;
		vis[x] = true;
		for (int i = 0; i < adj[x].size(); ++i) {
			int u = adj[x][i];
			if (cst[x][i] >= f[m]) Q.push(u);
		}
	}
	return vis[n];
}
int main(){
	csl;
	cin >> t;
	while (t--) {
		cin >> n;
		f.clear();
		for (int i = 0; i <= n; ++i) adj[i].clear(), cst[i].clear();
		while (true) {
			cin >> x >> y >> cost;
			if (x == -1) break;
			adj[x].push_back(y);
			adj[y].push_back(x);
			cst[x].push_back(cost);
			cst[y].push_back(cost);
			f.push_back(cost);
			mx = max(mx, x);
			mx = max(mx, y);
		}
		sort(f.begin(), f.end());
		int lo = 0, hi = f.size() - 1;;
		while (lo < hi) {
			int mid = (lo + hi + 1) / 2;
			if (bfs(mid)) lo = mid;
			else hi = mid - 1;
		}
		cout << fixed << setprecision(7) << f[lo] << '\n';
	}
	return 0;
}