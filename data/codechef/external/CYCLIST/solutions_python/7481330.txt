#include <bits/stdc++.h>

using namespace std;

#define getcx getchar_unlocked

template <typename type> inline void inp( type &n )
{
   n=0;
   type ch=getcx();
   type sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
}

struct node{
    node* next;
};

node* fnd(node* x)
{
    node* t;
    t=x;
    while(t->next!=t)
    {
        t=t->next;
    }
    return t->next;
}

void mrge(node* x,node* y)
{
  node* t;
  node* p;
  p=x;
  t=y;
  while(p->next!=p)
  {
      p=p->next;
  }
  while(t->next!=t)
  {
      t=t->next;
  }
  t->next=p;
}

int main()
{
    long long int t;
    inp(t);
    while(t--)
    {
    long long int n,m,x,y,i,high=-1,pos=1;
    double z,small=100000;
    inp(n);
    long long int created[n+1];
    node* l[n+1];
    memset(created,-1,sizeof(created));
    vector <pair<double,pair<long long int,long long int> > > v1;
    vector <pair<long long int,double> > v2[n+1];
    vector <pair<double,pair<long long int,long long int> > >::iterator it;
    vector <pair<long long int,double> >::iterator jt;
    pair <long long int,long long int> p1;
    pair <double,pair<long long int,long long int> >p2;
    pair<long long int,double> p3;
    while(true)
    {
        inp(x);
        inp(y);
        scanf("%lf",&z);
        if(x==-1&&y==-1&&z==-1)
        {
            break;
        }
        if(max(x,y)>high)
        {
            high=max(x,y);
        }
        if(created[x]==-1)
        {
        l[x]=new node();
        l[x]->next=l[x];
        created[x]=1;
        }
        if(created[y]==-1)
        {
        l[y]=new node();
        l[y]->next=l[y];
        created[y]=1;
        }
        p1=make_pair(x,y);
        p2=make_pair(z,p1);
        v1.emplace_back(p2);
    }
    sort(v1.begin(),v1.end());
    for(it=v1.end()-1;it>=v1.begin();it--)
    {
        if(fnd(l[it->second.first])!=fnd(l[it->second.second]))
        {
               p3=make_pair(it->second.second,it->first);
               v2[it->second.first].emplace_back(p3);
               p3=make_pair(it->second.first,it->first);
               v2[it->second.second].emplace_back(p3);
            mrge(l[it->second.first],l[it->second.second]);
        }
    }
    double a[high+1];
    long long int visited[high+1];
    for(i=0;i<high+1;i++)
    {
        a[i]=100000;
        visited[i]=-1;
    }
    while(visited[high]==-1)
    {
       visited[pos]=1;
       for(jt=v2[pos].begin();jt!=v2[pos].end();jt++)
       {
           if(a[jt->first]>jt->second)
           {
               if(a[pos]>jt->second)
               {
                   a[jt->first]=jt->second;
               }
               else
               {
                   a[jt->first]=a[pos];
               }
           }
       }
       for(i=1;i<high+1;i++)
       {
           if(visited[i]==-1&&a[i]!=100000)
           {
               pos=i;
               break;
           }
       }
    }
    printf("%lf\n",a[high]);
    }
    return 0;
}






