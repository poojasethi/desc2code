#include<bits/stdc++.h>
#define pb push_back
#define id pair<int,double >
#define mp make_pair
#define f first
#define s second
#define visited 1
#define initial 0
using namespace std;
struct comp
{
	bool operator() ( id a, id b )
	{
		return a.s < b.s ;
	}

};
int main()
{
	int n,t,i,j,a,u,v,sz;double w,b;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		vector<id > g[n+5];
		priority_queue< id , vector<id > ,comp > pq; 
		while(1)
		{
			scanf("%d%d%lf",&u,&v,&w);
			if(u==-1)
				break;
			g[u].pb(mp(v,w));
			g[v].pb(mp(u,w));
		
		}
		
		double safety[n+5];
		bool state[n+5]={0} ;
		fill(safety,safety+n+4,-1);
		pq.push(mp(1,0));
		safety[1]=0; id x;
		while(!pq.empty())
		{	
			
			x=pq.top();
			pq.pop();
			u=x.f;
			if(state[u]==visited)
				continue;
			if(u==n)
			{
				break;
			}
			sz=g[u].size();
		
			for(i=0;i<sz;++i)
			{
				
				a=g[u][i].f;
				b=g[u][i].s;
		
				if(safety[a]<0)
				{
					if(u==1)
						safety[a]=b;
					else
					{
						safety[a]=min(safety[u],b);
					}
					pq.push(mp(a,safety[a]));
				}
				else
				if(min(safety[u],b)>safety[a])
				{
		
					safety[a]=min(safety[u],b);
					pq.push(mp(a,safety[a]));
				}
				
			}	
			state[u]=visited;
		}
		printf("%0.7lf\n",safety[n]);
	}
		
	return 0;
}