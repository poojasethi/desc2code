#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define f first
#define s second
ll par[1000010],depth[1000010],n,k;
vector<pair< double,pair<ll,ll> > >edge;
ll root(ll x)
{
	while(par[x]!=x)
	{
		par[x]=par[par[x]];
		x=par[x];
	}
	return x;
}
void uni(ll x,ll y)
{
	ll r1=root(x);
	ll r2=root(y);
	if(r1==r2)
		return;
	if(depth[r1]>=depth[r2])
	{
		depth[r1]+=depth[r2];
		par[r2]=par[r1];
	}
	else
	{
		depth[r2]+=depth[r1];
		par[r1]=par[r2];
	}
}
void kruskal()
{
	for(ll i=k-1;i>=0;--i)
	{
		uni(edge[i].s.f,edge[i].s.s);
		if(root(1)==root(n))
		{
			printf("%lf\n",edge[i].f);
			return;
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);	
	ll i,t,x,y;
	double z;
	cin>>t;
	while(t--)
	{
		cin>>n;
		for(i=1;i<=n;++i)
		{
			par[i]=i;
			depth[i]=1;
		}
		edge.clear();
		while(1)
		{
			cin>>x>>y>>z;
			if(x==-1)
				break;
			edge.push_back({z,{x,y}});
		}
		sort(edge.begin(),edge.end());
		k=edge.size();
		kruskal();
	}
	return 0;
}