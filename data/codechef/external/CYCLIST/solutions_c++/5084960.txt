#include<bits/stdc++.h>
#define pb(a) push_back(a)
#define mp(a,b) make_pair(a,b)
#define pii pair<double,int>

using namespace std;

double dist[10001];
bool visited[10001];
int n;
double m[1001][1001];
vector <int> g[1001];
int s,t;

double dijkstra() {
	priority_queue <pii> pq;
	memset(visited,false,sizeof(visited));
	visited[s]=true;
	dist[s]=101.0;
	memset(dist,0.0,sizeof(dist));
	pq.push(mp(0.0,s));
	int i,j,u,v;
	pii w;
	while (!pq.empty()) {
		w=pq.top(); pq.pop();
		u=w.second;
		if (visited[u]==true && u!=s) continue;
		dist[u]=w.first;
		//printf("%d: %f\n",u,w.first);
	//	if (u==t) return w.first;
		visited[u]=true;
		for (i=0;i<g[u].size();i++) {
			v=g[u][i];
			if (visited[v]==false) {
				//printf("%d\n",v);
				if (u!=s) {
					pq.push(mp(min(dist[u],m[u][v]),v));
				}
				else {
					pq.push(mp(m[u][v],v));
				}
			}
		}
	}
	return dist[t];
}

int main() {
	int u,v,i,j,k,x,y;
	double d;
	int z;
	scanf("%d",&z);
	while (z--) {
		scanf("%d",&n);
		scanf("%d %d %lf",&u,&v,&d);
		s=1;
		t=1;
		while (u!=-1 && v!=-1) {
			s=min(s,u);
			s=min(s,v);
			t=max(t,u);
			t=max(t,v);
			g[u].pb(v);
			m[u][v]=m[v][u]=d;
			g[v].pb(u);
			scanf("%d %d %lf",&u,&v,&d);
		}
		printf("%0.7lf\n",dijkstra());
		for (i=0;i<=1000;i++) g[i].clear();
	}
	return 0;
}





