#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define FL(i,a,b) for(ll i=a;i<b;i++)
#define FOR(i,n) for(ll i=0;i<n;i++)
#define SORTF(x) sort(x.begin(),x.end(),func);
#define SORT(x) sort(x.begin(),x.end())
#define pb(x) push_back(x)
#define SET(v, val) memset(v, val, sizeof(v)) ;
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define ALL(v) v.begin(),v.end()
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }
#define fill(x,n) memset(x,n,sizeof(x))
#define S(n) scanf("%lld",&n)

struct node {
	ll ver;
	double val;
};

bool operator<(const node &a, const node &b) {
	if(a.val < b.val) 
		return true;
	return false;
}

int main() {
	ll t;
	S(t);
	while(t--) {
		ll n;
		S(n);
		vector<ll> gra[n + 5];
		vector<double> cost[n + 5];
		while(1) {
			ll a,b;
			double w;
			S(a);
			S(b);
			scanf("%lf", &w);
			if(a == -1)
				break;
			gra[a].push_back(b);
			gra[b].push_back(a);
			cost[a].push_back(w);
			cost[b].push_back(w);
		}
		priority_queue<node> q;
		double dist[n + 5];
		ll i;
		for(i = 0;i <= n;i++) 
			dist[i] = -INT_MAX;
		dist[1] = INT_MAX;
		node t1;
		t1.val = INT_MAX;
		t1.ver = 1;
		q.push(t1);
		ll vis[n + 5];
		memset(vis, 0, sizeof(vis));
		while(!q.empty()) {
			node t2 = q.top();
			q.pop();
			if(vis[t2.ver] == 1) 
				continue;
			vis[t2.ver] = 1;
			for(i = 0;i < gra[t2.ver].size();i++) {
				ll u = gra[t2.ver][i];
				ll v = t2.ver;
				if(dist[u] < min(dist[v], cost[v][i]) ) {
					dist[u] = min(dist[v], cost[v][i]);
					node t3;
					t3.ver = u;
					t3.val = dist[u];
					q.push(t3);
				}
			}
		}
		printf("%0.6lf\n", dist[n]);
	}
}