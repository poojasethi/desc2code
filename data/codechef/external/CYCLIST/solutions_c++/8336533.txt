#include<iostream>
#include<cstdlib>
#include<climits>
#include<cstdio>
using namespace std;

struct adjlist
{
    int dest;
    double val;
    struct adjlist *next;
};

struct Adjlist
{
    struct adjlist *head;
};

struct Graph
{
    int v;
    Adjlist *arr;
};

void addedge(struct Graph *g,int src,int dest,double val)
{
    struct adjlist *node=(struct adjlist *)malloc(sizeof(struct adjlist));
    node->dest=dest-1;
    node->val=val;
    node->next=g->arr[src-1].head;
    g->arr[src-1].head=node;

    node=(struct adjlist *)malloc(sizeof(struct adjlist));
    node->dest=src-1;
    node->val=val;
    node->next=g->arr[dest-1].head;
    g->arr[dest-1].head=node;
}


struct Graph *creategraph(int n)
{
    struct Graph *graph=(struct Graph *) malloc (n*sizeof(struct Graph));
    int i;
    graph->v=n;
    graph->arr=(struct Adjlist *)malloc(n*sizeof(struct Adjlist));
    for(i=0;i<n;i++)
        graph->arr[i].head=NULL;
    return graph;
}

int extractmax(bool visited[],double value[],int v)
{
    int i=0;
    int index;
    double ans=-1.000000;
    while(i<v)
    {
        if(value[i]>ans && visited[i]!=true)
           {
           	ans=value[i];
           	index=i;
           }
        i++;
    }
    return index;
}

double * djikstra(struct Graph *g,int parent[])
{
    int i,v=g->v;
    bool visited[v];
    double value[v];
    for(i=0;i<v;i++)
    {
        visited[i]=false;
        value[i]=-1.000000;
    }

    value[0]=0.000000;
    parent[0]=-1;
    for(i=0;i<v;i++)
    {
        int index=extractmax(visited,value,v);
        visited[index]=true;
        struct adjlist *ptr=g->arr[index].head;
        while(ptr!=NULL)
        {
            if(value[ptr->dest]<ptr->val && visited[ptr->dest]==false)
                {value[ptr->dest]=ptr->val; parent[ptr->dest]=index;}
            ptr=ptr->next;
        }
    }
    double *a=&value[0];
    return a;
}

int main()
{
    int t,n,src,dest,great;
    double val;
    cin >> t;
    while(t--)
    {
        cin >> n;
        great=-1;
        int parent[n];
        parent[0]=-1;
        struct Graph *g=creategraph(n);
        while(1)
        {
            cin >> src >> dest >> val;
            if(dest>great)
                great=dest;
            if(src==-1 && dest==-1 && val==-1)
                break;
            addedge(g,src,dest,val);
        }
        double *VAL=djikstra(g,parent);
        int i=great-1;
        double ans=101.00;
        while(i!=0)
        {
            if(VAL[i]<ans)
                ans=VAL[i];
            i=parent[i];
        }
        printf("%0.6lf\n",ans);
    }
    return 0;
}
