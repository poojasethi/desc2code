#include <iostream>
#include <string>
#include <cstdarg>
#include <utility>
#include <queue>
#include <stack>
#include <set>
#include <list>
#include <vector>
#include <queue>
#include <bitset>
#include <map>

#include <functional>
#include <sstream>
#include <algorithm>
#include <iostream>

#include <cstddef>
#include <cstring>
#include <cctype>
#include <cmath>
#include <cstdio>

#include <stdexcept>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cassert>
#include <ctime>

using namespace std ;

const int MAX = 1005 ;

struct node
{
    int pt ;
    double cost ;
};

bool operator<(const node &a, const node &b)
{
    return a.cost<b.cost;
}

double cost[MAX] ;
double adj[MAX][MAX] ;
bool chsn[MAX] ;
int t , n  ;

void reset()
{
    for(int i=0 ; i <= n ; i++ )
    {
        for(int j=0 ; j <= n ; j++)
        {
            adj[i][j] = -1 ;
        }
        chsn[i] = 0 ;
        cost[i] = -1 ;
    }
}

int main(int argc, const char * argv[])
{
    double cst ;
    
    scanf("%d" , &t);
    
    while (t--) {
        
        int s, e , pos  ;
        double cos ;
        scanf("%d" , &n) ;
        scanf("%d %d %lf", &s , &e , &cos) ;
        
        reset() ;
        
        while (s != -1)
        {
            adj[s][e] = cos ;
            adj[e][s] = cos ;
            scanf("%d %d %lf", &s , &e , &cos) ;
            
        }
        
        node temp ;
        
        temp.pt = 1 ;
        temp.cost = 100.0 ;
        
        priority_queue<node> pq;
        
        pq.push(temp) ;
        
        
        while (!pq.empty())
        {
            
            temp = pq.top() ;
            pq.pop();
            
            if(chsn[temp.pt] == 1 )
            continue;
            
            cst = temp.cost ;
            pos = temp.pt ;
            
            for(int i=1 ; i <= n ; i++  )
            {
                if(adj[pos][i] == -1)
                continue ;
                
                if(cost[i] == -1 || cost[i] < min( adj[pos][i] , cst ))
                {
                    cost[i] = min( adj[pos][i] , cst ) ;
                    temp.pt = i ;
                    temp.cost = cost[i] ;
                    pq.push(temp) ;
                }
            }
        }
        
        printf("%.8lf\n", cost[n] );
    }
    
}