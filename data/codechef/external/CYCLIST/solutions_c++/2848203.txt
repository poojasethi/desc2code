#include<iostream>
#include<cstdio>
#include<set>
#include<utility>
#include<algorithm>
#define di double

using namespace std;

int a[100005]={0},count1[100005]={0};

struct comp1
{
    inline bool operator()(pair< di, pair<int,int> > left, pair< di, pair<int,int> > right)
    {
        if(left.first==right.first)
        return left.second.first>right.second.first;
        return left.first > right.first;
    }
};

int root(int x)
{
    int i=x;
    while(a[i]!=i)
    {
        a[i]=a[a[i]];
        i=a[i];
    }
    return i;
}

void uniondo(int x,int y)
{
    int rootx,rooty;
    rootx=root(x);
    rooty=root(y);
    if(count1[rootx]>=count1[rooty])
    {
        a[rooty]=rootx;
        count1[rootx]=count1[rootx]+count1[rooty];
    }
    else if(count1[rooty]>count1[rootx])
    {
        a[rootx]=rooty;
        count1[rooty]=count1[rooty]+count1[rootx];
    }
}

int main()
{
    int t,n,m,i,j,x,y,sum=0;
    scanf("%d",&t);
    int weight;
    double w;
    while(t--)
    {
        sum=0;
        multiset< pair< di, pair<int,int> >,comp1 > q;
        pair< di, pair<int,int> > p;
        multiset< pair< di, pair<int,int> >,comp1 >::iterator it;
        scanf("%d",&n);
        
        for(i=0;i<n;i++)
        {
            a[i]=i;
            count1[i]=1;
        }
        scanf("%d%d%lf",&i,&j,&w);
        i--;
        j--;
        //weight=(int)(w*1e8*-1);
        while(i!=-2 && j!=-2)
        {
            q.insert(make_pair(w,make_pair(i,j)));
            //cout<<i<<" "<<j<<" "<<w<<endl;
            scanf("%d%d%lf",&i,&j,&w);
            //weight=(int)(w*1e8*-1);
            i--,j--;
        }
        while(!q.empty())
        {
            p=*(q.begin());
            q.erase(q.begin());
            x=p.second.first;
            y=p.second.second;
            w=p.first;
            //printf("%.6lf\n",weight);
            if(root(x)!=root(y))
            {
                uniondo(x,y);
                if(root(0)==root(n-1))
                break;
            }
        }
        if(n>1)
        {//w=(double)(-1*weight)/1e8;
        printf("%.6lf\n",w);}
        else
        printf("0\n");
    }
    return 0;
}