#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
struct edge{
	long long int u,v;
	double weight;
}e[100010];
int p[100001];
long long int n,m;
double res;

int compare(edge e1,edge e2)
{
	if(e1.weight>e2.weight) 
	return 1;
	else 
	return 0;
}
int parent(int y)
{
	if(p[y]==y)
	return y;
	else
	return p[y]=parent(p[y]); 
}

void union1(int u,int v)
{
	int px =parent (u);
	int py=parent(v);
	p[px]=py;	
}

void mst()
{
	res=0;
	sort(e,e+m,compare);
	for(long long int i=0; i<m; i++ )
	{
		if(parent(e[i].u)!=parent(e[i].v))
		{
			union1(e[i].u,e[i].v);
				res = e[i].weight;
			if(parent(1)==parent(n))
				break;	
		}
	}
	
	printf("%lf",res);
}

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	
		cin>>n;
		for(long long int i=1; i<=n; i++)
			p[i]=i;
		                                       //parent initialize
			long long int i=0;
			while(cin>>e[i].u>>e[i].v>>e[i].weight&&e[i].u!=-1&&e[i].v!=-1&&e[i].weight!=-1)
			{
				i++;
			}
			m=i;
		
	
		mst();
		if(t!=0)
		cout<<"\n";
	
	}
	return 0;
}
