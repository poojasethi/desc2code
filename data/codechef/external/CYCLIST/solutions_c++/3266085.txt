#include<stdio.h>
#include<iostream>
#include<vector>
#include<limits.h>
#include<string.h>
#include<algorithm>
#include<stdlib.h>
#include<queue>
#include<float.h>
#define maxn 1010
typedef long long ll;
using namespace std;
struct node
{
    int id;
    double d;
};
class Compare
{
public:
    bool operator() (node &a,node &b)
    {
        return a.d<b.d;
    }
};
 
vector <node> adj[maxn];
priority_queue <node,vector<node>,Compare> pq;
double dist[maxn];
int n; //n: no of vertices
// m: no of edges
 
 
int main()
{
    int i,j,u,v,start,end,t;
    double dis;
    node temp;
    //freopen("input.txt","r",stdin);
    scanf("%d",&t);
    while(t--)
    {
        bool marked[maxn]= {0};
        scanf("%d",&n);
        while(scanf("%d%d%lf",&start,&end,&dis)&&(start!=-1))
        {
            temp.id=end;
            temp.d=dis;
            adj[start].push_back(temp);
            temp.id=start;
            adj[end].push_back(temp);
        }
        fill(dist,dist+n+1,FLT_MIN);
        temp.id=1;
        temp.d=0.0;
        dist[1]=FLT_MAX;      //Source index
        pq.push(temp);
        while(!pq.empty())
        {
            temp=pq.top();
            pq.pop();
            u=temp.id;
            if(marked[u])continue;
            marked[u]=1;
            for(i=0; i<adj[u].size(); i++)
            {
                v=adj[u][i].id;
                if(marked[v])continue;
                if(dist[v]<min(dist[u],adj[u][i].d))
                {
                    dist[v]=min(dist[u],adj[u][i].d);
                    temp.id=v;
                    temp.d=dist[v];
                    pq.push(temp);
                }
            }
        }
        printf("%.8lf\n",dist[n]);
        for(i=1;i<=n;i++)
        adj[i].clear();
    }
    return 0;
}