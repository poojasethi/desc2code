#include <iostream>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <vector>
#include <utility>

using namespace std;
int n;
vector< pair<int,double> > graph[10010];
double ans[10010];
void input()
{
	scanf("%d",&n);
	for(int i = 0;i <= n;i++)
		graph[i].clear();
	int a,b;
	double w;
	scanf("%d %d %lf",&a,&b,&w);
	while(a != -1)
	{
		graph[a].push_back(make_pair(b,w));
		graph[b].push_back(make_pair(a,w));
		scanf("%d %d %lf",&a,&b,&w);
	}
	for(int i = 0;i <= n;i++)
		ans[i] = -1.0;
}
struct compare
{
	bool operator()(pair< int,double> a, pair< int,double > b)
	{
		return a.second < b.second;
	}
};
void apply()
{
	priority_queue< pair< int,double >, std::vector< pair< int,double> >,compare > q;
	pair< int,double > p;
	ans[n] = 0;
	vector< pair<int,double > >::iterator it;
	int n1,n2;
	n1 = n;
	double w;
	for(it = graph[n].begin();it != graph[n].end();it++)
	{
		n2 = (*it).first;
		w = (*it).second;
		q.push(make_pair(n2,w));
	}
	while(!q.empty())
	{
		p = q.top();
		q.pop();
		n1 = p.first;
		if(ans[n1] == -1)
		{
			ans[n1] = p.second;
		}
		else
		{
			ans[n1] = max(ans[n1],p.second);
		}

		if(ans[1] != -1)
			break;

		for(it = graph[n1].begin();it != graph[n1].end();it++)
		{
			n2 = (*it).first;
			w = (*it).second;
			w = min(w,ans[n1]);
			if(ans[n2] == -1)
				q.push(make_pair(n2,w));
		}
	}
	printf("%0.8lf\n",ans[1]);
}
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
    {
        input();
        apply();
    }
}
