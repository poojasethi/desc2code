#include<stdio.h>
int wp[100000],p[100000],rr[100000];
double w[100000];
void merge( int l1, int r)
{
    
     int i, j, k1,m=(l1+r)/2;
   int n1 = m - l1 + 1;
    int n2 =  r - m;
 
    
    int  e[n1],f[n1],Le[n1],Rf[n2];double R[n2],L[n1];
 
    
    for(i = 0; i < n1; i++)
        {L[i] = w[l1 + i];
        e[i]=p[i+l1];
        Le[i]=wp[i+l1];
        }
    for(j = 0; j < n2; j++)
      {       R[j] = w[m + 1+ j];
        f[j]=p[m+1+j];
        Rf[j]=wp[m+1+j];
       }
 
    i = 0;
    j = 0;
    k1 = l1;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            w[k1] = L[i];
            p[k1]=e[i];
            wp[k1]=Le[i];
            i++;
        }
        else
        {
            w[k1] = R[j];
            p[k1]=f[j];
            wp[k1]=Rf[j];
            j++;
        }
        k1++;
    }
 
    
    while (i < n1)
    {
        w[k1] = L[i];
        p[k1]=e[i];
        wp[k1]=Le[i];
        i++;
        k1++;
    }
 
    
    while (j < n2)
    {
        w[k1] = R[j];
        p[k1]=f[j];
        wp[k1]=Rf[j];
        j++;
        k1++;
    }
   
}
void mergesort(int low, int high)
{
   int mid=(low+high)/2;
    if(low>=high)
    return;
    mergesort(low,mid);
    mergesort(mid+1,high);
    merge(low,high);
}
 int find(int i)
{
      if(rr[i]<0)
      return i;
      return find(rr[i]);
}
void unin(int i,int j)
{
      int root1=find(i),root2=find(j);
      if(root1==root2)
      return;
      if(rr[root2]<rr[root1])
      rr[root1]=root2;
      else 
      {
            if(rr[root1]==rr[root2])
            {
                  rr[root1]--;}
                   rr[root2]=root1;
                  
            
      }
      
}
int main()
{int t;
      scanf("%d",&t);
      while(t--)
      {
            for(int i=0;i<100000;i++)
            rr[i]=-1;
            int n;
            int ct=0;
            scanf("%d",&n);
            
            while(1)
            {
            scanf("%d%d%lf",&p[ct],&wp[ct],&w[ct]);ct++;
            if(p[ct-1]==-1)
            {ct--;
                  break;
            }
            
            }
           
           mergesort(0,ct-1);
           
          for(int i=ct-1;i>=0;i--)
            {
                  unin(p[i],wp[i]);
                  if(find(1)==find(n)&&find(1)!=-1)
                  {
                        printf("%lf\n",w[i]);
                        break;
                  }
            }
            
      }return 0;
}