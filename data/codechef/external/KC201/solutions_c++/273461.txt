#include<iostream>
#include<cstring>

using namespace std;

int main(void)
{
	int i=-1,j,k,m,n,c;
	struct str
	{ char s[100];
	  int len,mir,pal;
	}count;
	while(1)
	{
	   cin>>count.s;
	   c=strcmp(count.s,"#");
	   if(c==0)
		break;
	   else
	   {
		++i;
		count.len=strlen(count.s);
		count.pal=1;
		count.mir=1;
		if((count.len)%2==0)
		{ m=(count.len)/2;
		  n=m-1;
		}
		else
		{ m=((count.len)/2)-1;
		  n=m+2;
		}
		for(j=m,k=n;j>=0;j--,k++)
		{ if((count.s[j]=='A')&&(count.s[k]=='A'))
		  {}
 		  else if((count.s[j]=='E')&&(count.s[k]=='3'))
		  {count.pal=0;}
		  else if((count.s[j]=='H')&&(count.s[k]=='H'))
		  {}
		  else if((count.s[j]=='I')&&(count.s[k]=='I'))
		  {}
		  else if((count.s[j]=='J')&&(count.s[k]=='L'))
		  {count.pal=0;}
		  else if((count.s[j]=='L')&&(count.s[k]=='J'))
		  { count.pal=0;}
		  else if((count.s[j]=='M')&&(count.s[k]=='M'))
		  {}
		  else if((count.s[j]=='O')&&(count.s[k]=='O'))
		  {}
		  else if((count.s[j]=='S')&&(count.s[k]=='2'))
		  {count.pal=0;}
		  else if((count.s[j]=='T')&&(count.s[k]=='T'))
		  {}
		  else if((count.s[j]=='U')&&(count.s[k]=='U'))
		  {}
		  else if((count.s[j]=='V')&&(count.s[k]=='V'))
		  {}
		  else if((count.s[j]=='W')&&(count.s[k]=='W'))
		  {}
		  else if((count.s[j]=='X')&&(count.s[k]=='X'))
		  {}
		  else if((count.s[j]=='Y')&&(count.s[k]=='Y'))
		  {}
		  else if((count.s[j]=='Z')&&(count.s[k]=='5'))
		  {count.pal=0;}
		  else if((count.s[j]=='1')&&(count.s[k]=='1'))
		  {}
	 	  else if((count.s[j]=='2')&&(count.s[k]=='S'))
	 	  {count.pal=0;}
		  else if((count.s[j]=='3')&&(count.s[k]=='E'))
		  {count.pal=0;}
		  else if((count.s[j]=='5')&&(count.s[k]=='Z'))
		  {count.pal=0;}
		  else if((count.s[j]=='8')&&(count.s[k]=='8'))
	 	  {}
		  else
		  {count.mir=0;
		   break;
		  }
		}
		if(count.pal!=0)
		{ for(j=m,k=n;j>=0;j--,k++)
		  { if(count.s[j]!=count.s[k])
		    { count.pal=0;
		      break;
		    }
		  }
		}
		if((count.pal!=0)&&(count.mir!=0))
			cout<<"mirroredpalindrome\n";
		else if((count.pal!=0)&&(count.mir==0))
			cout<<"regularpalindrome\n";
		else if((count.pal==0)&&(count.mir!=0))
			cout<<"mirroredstring\n";
		else
			cout<<"notpalindrome\n";
		}
	}
return 0;
}

