#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

class MaxHeap   {
public :
    vector <int> A;
    void insert(int n)  {
        A.push_back(n);
        push_heap(A.begin(), A.end());
    }
    int extractMax()   {
        if (A.empty())
            return -1;
        int mn = A[0];
        pop_heap(A.begin(), A.end());
        A.pop_back();
        return mn;
    }
    int max()   {
        return A.empty() ? -1 : A[0];
    }
    int size()  {
        return A.size();
    }
    void clear()    {
        A.clear();
    }
} heap;

int main()  {
    int T, N, M, K, i, j, cnt;
    char str[55];

    scanf("%d", &T);
    while (T--) {
        scanf("%d %d %d", &N, &M, &K);
        for (i = 0; i < N; i++) {
            scanf("%s", str);
            for (j = cnt = 0; str[j] != '\0'; j++)
                if (str[j] == '.')
                    cnt++;
            heap.insert(cnt);
        }
        for (i = 0; i < K; i++) {
            cnt = heap.extractMax();
            cnt = M - cnt;
            heap.insert(cnt);
        }
        for (cnt = i = 0; i < heap.size(); i++)
            cnt += (M - heap.A[i]);
        printf("%d\n", cnt);
        heap.clear();
    }

    return 0;
}
