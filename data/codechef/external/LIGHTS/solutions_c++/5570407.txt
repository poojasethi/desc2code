#include <queue>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <algorithm>
#include <bitset>
#include <cstdlib>
#include <list>
#include <stack>
#include <deque>
#include <cmath>
#include <string>
#include <string.h>
#include <iomanip>
#include <sstream>
#include <set>
#include <cassert>
#include <ctype.h>
using namespace std;
#define rep(i,n) for(int i = 0; i < n ; ++i)
#define REP(i,a,b) for(int i = a ; i <= b; ++i)
#define s(n) scanf("%d",&n)
#define rev(i,n) for(int i = n ; i >= 0 ; --i)
#define REV(i,a,b) for(int i = a ; i >= b ; --i)
#define INF 1000000000
#define pp pair<int,int>
#define pb(a) push_back(a)
#define ll long long
#define vi vector<int>
#define mii map<int,int>
#define msi map<string,int>
#define vii vector<vector<int> >
#define vpp vector<pair<int,int> >
#define MOD 1000000007
#define pdd pair<double,double>
#define vl vector<long long>
char M[51][51] ; 
int row[51] ; 
int main()
{
  //  freopen("input.txt","r",stdin) ; 
    ios_base::sync_with_stdio(0) ; 
    int tc , n , m , k , ans , mini , ind; 
    cin >> tc ; 
    while(tc--)
    {
        ans = 0 ; 
        cin >> n >> m >> k ; 
        vector<pair<int,int> > toggle ; 
        for(int r = 0 ; r < n ; ++r)
        {
            for(int c = 0 ; c < m ; ++c)
            {
                cin >> M[r][c] ; 
            }
        }
        for(int r = 0 ; r < n ; ++r)
        {
            row[r] = 0 ; 
        }
        for(int r = 0 ; r < n ; ++r)
        {
            for(int c = 0 ; c < m ; ++c)
            {
                if(M[r][c] == '*')
                {
                    row[r]++ ; 
                }
            }
            if(m - row[r] >= row[r])
            {
                toggle.pb(pp(m-row[r],r)) ; 
            }
        }
        sort(toggle.rbegin() , toggle.rend()) ; 
        for(int i = 0 ; i < toggle.size() ; ++i)
        {
            k-- ; 
            if(k < 0)
            {
                break ; 
            }
            row[toggle[i].second] = m - row[toggle[i].second] ; 
        }
        for(int r = 0 ; r < n ; ++r)
        {
            ans += row[r] ; 
        }
        mini = INF , ind = 0 ; 
        if(k > 0)
        {
            if(k&1)
            {
                for(int r = 0 ; r < n ; ++r)
                {
                    if(row[r] >= m - row[r])
                    {
                        if((row[r] - (m - row[r])) <= mini)
                        {
                            ind = r ; 
                            mini = 2*row[r] - m ; 
                        }
                    }
                }
                ans = ans - row[ind] + (m - row[ind]) ; 
            }
        }
        cout << ans << "\n" ; 
    }
    return 0 ; 
}