// Primality testing
#include <iostream>
#include <cstring>
#include <cstdlib>
#define ll long long
#define ULL unsigned long long int 
#define R register
#define GC getchar()
#define PUTCHAR putchar_unlocked
#define tc() ll t ; std::cin>>t ; while(t--)
using namespace std;
const ULL SQRT_MAX = 1ULL << 32; // constraint 
void Fast(ULL &x) // Fast in
{
    R ULL a=GC;
    x=0;
    for(;(a<48 || a>57);a=GC);
    for(;(a>47 && a<58);a=GC)
        x=(x<<1)+(x<<3)+a-48;
}
inline void write(ULL x) // Fast Out
{
    if(x==-1)
    {
        PUTCHAR('-');
        PUTCHAR('1');
        PUTCHAR('\n');
    }
    else
    {
        ULL i = 10;
        char buf[11];
        buf[10] = '\n';
    do
      {
            buf[--i] = x % 10 + '0';
            x/= 10;
      }
      while(x);
    do
      {
          PUTCHAR(buf[i]);
      } while (buf[i++] != '\n');
    }
}

ULL multiply_mod(ULL x, ULL y, ULL mod) //(a*b)%c
{
    if (x < SQRT_MAX && y < SQRT_MAX)
        return (x*y)%mod;
 
    ULL res = 0;
    ULL tmp = y%mod;
    while (x)
    {
        if ((x & 1) && (res += tmp) >= mod)
            res -= mod;
        tmp <<= 1;
        if (tmp >= mod)
            tmp -= mod;
        x >>= 1;
    }
    return res;
}
ULL power_mod(ULL base, ULL exp, ULL mod) // Exponentiation by Squaring
{
    ULL result = 1;
    while(exp)
    {
        if (exp&1)
        result = multiply_mod(result, base, mod);
        exp >>= 1;
        base = multiply_mod(base, base, mod);
    }
 
    return result;
}

ULL test(ULL n , ULL a) // (a*b)%c
{
    ULL s = n-1;
    int r = 0;
    while (!(s & 1))
        s >>= 1, r++;
    ULL t = power_mod(a, s, n);
    if (t == 1 || t == n-1)
        return 1;
    while (--r)
        if ((t = multiply_mod(t, t, n)) == n-1)
        return 1;
    return 0;

}
 

ULL isprime(ULL n)
{
    if (n<2 || !(n & 1))
        return n == 2;
    return test(n, 2) && test(n, 3) && test(n, 5) && test(n, 7) && test(n, 11);
}

int main()
{

    tc()
    {
        ULL num ;
        Fast(num) ;
         if(isprime(num)) cout<<"YEAH"<<endl ;
        else
        {
            ULL count = 0 ;
            printf("NAA\n");;
            for(ll i = num + 1 ; i <=1000000000000LL ; i++ )
            {
                if(isprime(i))
                {
                    count++;
                    if(count <= 10)
                    printf("%llu ",i);
                    else
                        break;
                }
            }
            printf("\n");
        }
    }
        return 0;
}

// By Pheonix 