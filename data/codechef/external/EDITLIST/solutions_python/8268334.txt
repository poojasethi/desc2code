#include <bits/stdc++.h>

using namespace std;

// Input macros
#define s(n) scanf("%d",&n)		// int - 9 digits
#define sc(n) scanf("%c",&n)	// char
#define sl(n) scanf("%lld",&n)	// long long - 18 digits
#define sd(n) scanf("%lf",&n)	//	double
#define ss(n) getline(cin,n)	//	string - NOT STABLE

// Printing
#define p(n) printf("%d",n)			// int
#define pc(n) printf("%c",n)		// char
#define pl(n) printf("%lld",n)		// long long
#define pd(n) printf("%lf",n)		// double
#define ps(n) cout<<n				// string
#define pa(arr) printarr(arr,0,sizeof(arr)/sizeof(*arr))  // array
#define psp() printf(" ")			// space
#define pt() printf("\t")			// tab
#define pln() printf("\n")			// newline

// Useful constants
#define INF INT_MAX
#define EPS 1e-9

// Useful functions
#define bitcount(x) __builtin_popcount(x) 	// returns the number of 1-bits in x.
#define gcd(a,b) __gcd(a,b)					// gcd of a & b
#define bit(x,i) (x&(1<<i)) 			 	//select the bit at position i of x as power of 2
#define max2(x)  __builtin_ctz(x)  			// returns max power of 2
#define drep(a) a.erase(unique(all(a)),a.end()) 				//deletes repeat in stl container
#define index(arr,val) (lower_bound(all(arr),val)-arr.begin())	// returns index of 1st occurrence of element in container >= val

// Useful container manipulation / traversal macros
#define f(i,a,b) for(i=a; i<=b; ++i)		// for loop
#define foreach(v, c) for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)	// stl for loop
#define all(a) a.begin(), a.end()
#define in(a,b) ( find((b).begin(),(b).end(),a) != (b).end())	// returns if element is present in container
#define pb push_back
#define arrclear(a) memset(a, 0, sizeof(a))	// set all element of array to 0
#define sz(a) (int)(a.size()))
#define mp make_pair

//Data types
#define ll long long
typedef vector<int>   vi;
typedef vector<vi>   vvi;
typedef pair<long long,long long> pii;
typedef pair<string,int> psi;
typedef map<int,int> hash;

// Debugging


// Time

int i,j;

template <typename T>
inline void printarr(const T* arr,int start,int end){
	f(i,start,end-1){ cout<<arr[i]<<' '; }
}

bool comp(int a,int b){
	return a<=b;
}

int L[101][101];

int lcs( int *X, int *Y, int m, int n )
{
   f(i,0,m){ f(j,0,n){ L[i][j]=0; }}
   int i, j;

   /* Following steps build L[m+1][n+1] in bottom up fashion. Note
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
   for (i=0; i<=m; i++)
   {
     for (j=0; j<=n; j++)
     {
       if (i == 0){ L[i][j] = j; }
			 else if(j==0){ L[i][j] = i; }
       else if (X[i-1] == Y[j-1]) {
         L[i][j] = L[i-1][j-1];
			 }
       else {
         int a = L[i-1][j-1];
				 int b = L[i-1][j];
				 int c = L[i][j-1];
				 L[i][j] = 1+ min(min(a,b),c);
			 }
     }
   }

   /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
   return L[m][n];
}

int main()
{
	int t;s(t);
	int a[101]; int b[101];

	while(t--){
		int m;s(m);
		f(i,0,m-1){ s(a[i]); }
		int n;s(n);
		f(i,0,n-1){ s(b[i]); }

		int l = lcs(a,b,m,n);
		p(l); pln();
	}


	return 0;
}
