
#include<iostream>
//#include<string.h>
#define cost_substitution 1
#define cost_insertion 1
#define cost_deletion 1
using namespace std;
	int a1[102];
	int a2[102];

	int dp[102][102];


int main()
{
	ios::sync_with_stdio(false);
	int t,i,n1,n2,j,d1,d2,d3;
	cin>>t;
	while(t--)
	{
	cin>>n1;
	for(i=0;i<n1;i++)
	cin>>a1[i];
	cin>>n2;
	for(i=0;i<n2;i++)
	cin>>a2[i];


	 /*
	 Next two loops show the base condition of edit distance dp i.e.
	 		dp[0,0]=0
	 		dp[0,j]=j           //Just Insertion
	 		dp[j,0]=j           //Just Deletion
	 */
	for( i=0;i<=n1;i++)
	   dp[i][0]=i;
    for( j=1;j<=n2;j++)
       dp[0][j]=j;
       /*
       dp[i,j]=min(d1,d2,d3)
       		d1->substitution-->if last character same dont do anything(0) else replace last char(1)
       		d2->insertion-->convert (s+ch1) to (t+ch2) by inserting in ch2. so dp (s+ch1,t)+1 ;+1 for ch2 insertion
       		d3->deletion -->convert (s+ch1) to (t+ch2) by deleting ch1 from s.so dp[s,t+ch2]+1 ;+1 for ch1 deletion
       */
     for( i=1;i<=n1;i++)
	 {
     	for( j=1;j<=n2;j++)
		 {
     		d1=((a1[i-1]==a2[j-1])?0:cost_substitution)+dp[i-1][j-1];
            d2=dp[i][j-1]+cost_insertion;

		    d3=dp[i-1][j]+cost_deletion;
            //finding minimum of 3
			if(d1<d2&&d1<d3)
               dp[i][j]=d1;
            else{
            	if(d2<d3)
            	   dp[i][j]=d2;
         	     else
         	     dp[i][j]=d3;
            }
     	}
     }
     cout<< dp[n1][n2];
	cout<<endl;

	}
	return 0;
}
