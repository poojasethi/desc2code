//Levitian distance
//dp easy
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t; cin>>t;
	while(t--)
	{
		int m,n,i,j,add=0; cin>>m;	int a[m];
		for(i=0;i<m;i++)cin>>a[i]; cin>>n; int b[n];
		for(i=0;i<n;i++)cin>>b[i];
		int dp[m+1][n+1];
		memset(dp,0,sizeof(dp));
		dp[0][0]=0;
		for(i=1;i<=m;i++)dp[i][0]=i; for(j=1;j<=n;j++)dp[0][j]=j;
		for(i=1;i<=m;i++)
		{
			 for(j=1;j<=n;j++)
			 {
			 	if(a[i-1]==b[j-1])add=0;
			 	else add=1;
			 	dp[i][j]=min(min(dp[i-1][j]+1,dp[i][j-1]+1),dp[i-1][j-1]+add);
			 }
		}
		cout<<dp[m][n]<<endl;
	}
	return 0;
}