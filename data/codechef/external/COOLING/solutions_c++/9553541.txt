#include<iostream>
using namespace std;

void merge(int arr[], int l, int m, int r){
	int i, j, k;
    int n1 = m - l + 2;
    int n2 =  r - m + 1;
 
    // create temp arrays
    unsigned int L[n1], R[n2];
 
    // Copy data to temp arrays L[] and R[] 
    for(i = 0; i < n1-1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2-1; j++)
        R[j] = arr[m + 1+ j];
    // Set the last entries as the largest numbers
	L[n1-1]=0;
	R[n2-1]=0;
	L[n1-1]--;
	R[n2-1]--; 
    // Merge the temp arrays back into arr[l..r]
    i = 0;
    j = 0;
    k = l;
    for(k=l; k<=r; k++)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
     }
}

void mergesort(int a[], int l, int r){
	if(l<r){
		int m = (l+r)/2;
		mergesort(a,l,m);
		mergesort(a,m+1,r);
		merge(a,l,m,r);
	}
}


void sort(int a[], int N)
{
	int l,m,r;
	l=0;
	r=N-1;
	m=r/2;
	mergesort(a,l,m);
	mergesort(a,m+1,r);
	merge(a,l,m,r);
}




int main(){
	int t;
	int N;
	cin>>t;
	while(t--){
		cin>>N;
		int p[N], r[N];
		int k = 0;
		while(k<N){
			cin>>p[k];
			k++;
		}
		k = 0;
		while(k<N){
			cin>>r[k];
			k++;
		}
		sort(p,N);
		sort(r,N);
		/*k = 0;
		while(k<N){
			cout<<p[k]<<" ";
			k++;
		}
		cout<<endl;
		k = 0;
		while(k<N){
			cout<<r[k]<<" ";
			k++;
		}
		*/
		int count = 0;
		int i = 0,j =0;
		while(j<N){
			if(p[i]<=r[j]){
				count++;
				i++;
				j++;
			}
			else
				j++;
		}
		cout<<count<<endl;
	}
}