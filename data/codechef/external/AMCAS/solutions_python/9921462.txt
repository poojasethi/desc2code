// Aditya Shah
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;

#define all(X) (X).begin(), (X).end()

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;

const double PI = 2 * acos(0);
const double sideWays = PI / 6 + sqrt(3) / 4.0;
const double single = PI / 4;

int N, M, A, C, x, y;

LL SQ(PII pos) {
	int Lx = max(pos.first - A + 1, 0);
	int Ly = max(pos.second - A + 1, 0);
	int Rx = min(pos.first, N - A);
	int Ry = min(pos.second, M - A);
	LL res = (Ry - Ly + 1) * 1LL * (Rx - Lx + 1);
	return res;
}

int main() {
	while (cin >> N >> M >> A >> C) {
		set<PII> pts, can;
		while (C--) {
			cin >> x >> y;
			pts.insert(PII(x, y));
			if (x) can.insert(PII(x - 1, y));
			if (y) can.insert(PII(x, y - 1));
			if (x && y) can.insert(PII(x - 1, y - 1));
			can.insert(PII(x, y));
		}
		LL tot = (N - A + 1) * 1LL * (M - A + 1);
		double res = 0;
		for (auto P : can) {
			if (P.first < N && P.second < M) {
				vector<PII> neighbors;
				if (pts.count(P)) neighbors.emplace_back(P);
				if (pts.count(PII(P.first + 1, P.second))) neighbors.emplace_back(PII(P.first + 1, P.second));
				if (pts.count(PII(P.first, P.second + 1))) neighbors.emplace_back(PII(P.first, P.second + 1));
				if (pts.count(PII(P.first + 1, P.second + 1))) neighbors.emplace_back(PII(P.first + 1, P.second + 1));
				LL Squares = SQ(P);
				if (neighbors.size() == 1) {
					res += single * Squares;
				} else if (neighbors.size() == 2) {
					if (abs(neighbors[1].first - neighbors[0].first) + abs(neighbors[1].second - neighbors[0].second) == 1) {
						res += sideWays * Squares;
					} else {
						res += Squares;
					}
				} else {
					res += Squares;
				}
			}
		}
		res /= tot;
		cout << fixed << setprecision(10) << res << "\n";
	}
	return 0;
}