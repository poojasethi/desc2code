This time Laltu wanted the question to be staightforward.
So, given 3 1-indexed sorted arrays (A[], B[], C[]), find the number of triplets 1 ≤ i ≤ j ≤ k, such that: A[i] ≤ B[j] ≤ C[k]. Note that i, j and k don't exceed the size of respective arrays.
 

Input
First line contains T, the number of test cases. Each test case consists of:

P, the length of first array. The next line will consist of P integers.
Q, the length of second array. The next line will consist of Q integers.
R, the length of third array. The next line will consist of R integers.
 

Output
For each test case print the required answer in one line.
 

Constraints

1 ≤ T ≤ 3
1 ≤ P, Q, R ≤ 10^5
-10^9 ≤ Elements of arrrays ≤ 10^9

 

Example
Input:
1
3
1 5 6
3
2 3 4
3
7 8 9

Output:
6
 

Explanation
The possible triplets (i, j, k) are:
(1, 1, 1)
(1, 1, 2)
(1, 1, 3)
(1, 2, 2)
(1, 2, 3)
(1, 3, 3)
Note: Large input data. Use scanf/printf instead of cin/cout.
