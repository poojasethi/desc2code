#include<bits/stdc++.h>
using namespace std;
#define maxn 100100
typedef long long int ll;
ll P[maxn],Q[maxn],R[maxn],tree[5*maxn],freq[maxn];
map<ll,ll> m;
ll read(ll idx)
{
    //printf("%d-idx-read\n",idx);
    ll cnt=0;
    while(idx>0)
    {
        cnt+=tree[idx];
        idx-=(idx&-idx);
    }
    return cnt;
}

void update(ll pos)
{
   // printf("%d-pos-update\n",pos);
    while(pos<4*maxn)
    {
        tree[pos]+=1;
        pos+=(pos&-pos);
        //printf("%d ",pos);
    }
}

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        memset(tree,0,sizeof(tree));
        memset(freq,0,sizeof(freq));
        m.clear();
        int p,q,r;
        scanf("%d",&p);
        for(int i=0;i<p;i++){
            scanf("%lld",&P[i]);
            m[P[i]]=1;
        }
        scanf("%d",&q);
        for(int i=0;i<q;i++) {
            scanf("%lld",&Q[i]);
            m[Q[i]]=1;
        }
        scanf("%d",&r);
        for(int i=0;i<r;i++){
            scanf("%lld",&R[i]);
            m[R[i]]=1;
        }
        int cnt=1;
        for(map<ll,ll>::iterator it=m.begin();it!=m.end();it++)
            it->second=cnt++;
        for(int i=0;i<p;i++){
            P[i]=m[P[i]];
      //      printf("%d ",P[i]);
        }
    //cout<<endl;
        for(int i=0;i<q;i++)
        {
            Q[i]=m[Q[i]];
       //     printf("%d ",Q[i]);
        }
        //cout<<endl;
        for(int i=0;i<r;i++)
        {
            R[i]=m[R[i]];
           //printf("%d ",R[i]);
        }
       //cout<<endl;


        int i;
        for(i=r-1;i>=min(r-1,q-1);i--)
        {
            update(R[i]);
        }
        i++;
        while(i>=0)
        {
            ll cnt=read(Q[i]-1);//stictly smaller
            freq[i]=r-i-cnt;//greater than or equal to
        //    printf("%d-freq\n",freq[i]);
            if(i==0)
                break;
            update(R[i-1]);
            i--;
        }
        memset(tree,0,sizeof(tree));
        ll ans=0;
        for(i=0;i<min(p,q);i++)
        {
            update(P[i]);
            int cnt=read(Q[i]);
            ans+=cnt*freq[i];
        }
        while(i<q)
        {
            int cnt=read(Q[i]);
            ans+=cnt*freq[i];
            i++;
        }
        printf("%lld\n",ans);
    }
}
/*
12
6
-6 -5 -4 -3 -2 -1
4
4 7 1 -9
2
2 -2
6
-2 -6 12 4 3 -9
2
-1 0
4
1 4 -3 6
4
0 3 2 1
6
-1 3 4 5 2 5
2
-3 -5
4
2 4 6 -1
2
-1 -2
6
-9 -8 -7 -6 2 1
*/
