#include <bits/stdc++.h>
#include <stdlib.h>
using namespace std;
long long mod=1e9+7;
 
typedef long long unsigned llu;
typedef long long int lld;
typedef long ld;
#define rep(i,a,n) for(long long int i = (a); i <= (n); ++i)
#define repI(i,a,n) for(int i = (a); i <= (n); ++i)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sc(a) scanf("%lld",&a)
#define sc2(a,b) scanf("%lld%lld",&a,&b)
#define sc3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scd(a) scanf("%d",&a)
#define scd2(a,b) scanf("%d%d",&a,&b)
#define scd3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define scf(a) scanf("%lf",&a)
#define scf2(a,b) scanf("%lf%lf",&a,&b)
#define scf3(a,b,c) scanf("%lf%lf%lf",&a,&b,&c)
#define prL(a) printf("%lld\n",a)
#define prS(a) printf("%lld ",a)
#define prdL(a) printf("%d\n",a)
#define prdS(a) printf("%d ",a)
#define prfL(a) printf("%lf\n",a)
#define prfS(a) printf("%lf ",a)
#define popcount __builtin_popcountll
#define swap(a,b,t) t=a;a=b;b=t
typedef pair<lld,lld> PA;
 
#define lim 100003
#define lim2 3003
map<char,lld> M,Mn;
inline lld sqr(lld x) { return x * x; }
// map<lld,lld>::iterator it;
// std::ios::sync_with_stdio(false);
// string S[lim],T[lim];
 
// multiset<lld> S;
// set<PA> S;
// string S;
// vector<lld> V[lim];
 
// lld dp[1002][1002];
// bool dp[5005][5005];
// priority_queue<PA> Q;
lld A[lim],B[lim];
lld P[lim],Q[lim],R[lim];
// char S[lim];
lld FenA[lim],FenB[lim];
lld findSumF(lld Fen[],lld p,lld n){
    lld i,ans=0;
    for(i=p;i>0;i-=(i&-i)){
        ans+=Fen[i];
    }
    return ans;
}

lld findSum(lld Fen[],lld l,lld r,lld n){
    return findSumF(Fen,r,n)-findSumF(Fen,l-1,n);
}

void update(lld Fen[],lld p,lld val,lld n){
    lld i;
    for(i=p;i<=n;i+=(i&-i)){
        Fen[i]+=val;
    }
}

int main(){
	// std::ios::sync_with_stdio(false);
    lld T,i,j,k,l,r,s,a,b,c,d,w,x,y,v,z,m,n,t,p,q,curr,sum,ans,pos,val,secondMin,countA,indicator;
    sc(T);
    while(T--){
    	sc(p);
    	rep(i,0,p-1){
    		sc(P[i]);
    		A[i]=P[i];
    	}
    	sc(q);
    	rep(i,0,q-1){
    		sc(Q[i]);
    		B[i]=Q[i];
    	}
    	sc(r);
    	rep(i,0,r-1) sc(R[i]);
    	rep(i,0,p) FenA[i]=0;
    	rep(i,0,q) FenB[i]=0;
    	sort(A,A+p);
    	sort(B,B+q);
    	ans=0;
    	n=min(p,min(q,r));
    	for(i=0;i<n;i++){
    		t=lower_bound(A,A+p,P[i])-A;
    		update(FenA,t+1,1,p);
    		t=upper_bound(A,A+p,Q[i])-A;
    		val=findSumF(FenA,t,p);
    		t=lower_bound(B,B+q,Q[i])-B;
    		update(FenB,t+1,val,q);
    		t=upper_bound(B,B+q,R[i])-B;
    		val=findSumF(FenB,t,q);
    		ans+=val;
    	}
    	n=min(q,r);
    	for(;i<n;i++){
    		t=upper_bound(A,A+p,Q[i])-A;
    		val=findSumF(FenA,t,p);
    		t=lower_bound(B,B+q,Q[i])-B;
    		update(FenB,t+1,val,q);
    		t=upper_bound(B,B+q,R[i])-B;
    		val=findSumF(FenB,t,q);
    		ans+=val;
    	}
    	n=r;
    	for(;i<n;i++){
    		t=upper_bound(B,B+q,R[i])-B;
    		val=findSumF(FenB,t,q);
    		ans+=val;
    	}
    	prL(ans);
    }
    return 0;
}
