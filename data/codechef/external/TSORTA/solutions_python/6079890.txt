#include<bits/stdc++.h>
#define pb(x) push_back(x)
#define all(x) x.begin(), x.end()
#define cout2(x, y) cout << x << " " << y <<  endl
#define N 100005

using namespace std;

long long tree[2][3 * N], A1[N], A2[N], A3[N], B[3 * N], aux[N];

int add = 1e9, mod = 10000;
map<int, int>mapa[10000];

void update(int x, int id, long long val){
	
	for(int i = x; i < 3 * N; i += i&-i)tree[id][i] += val;	
}

long long query(int x, int id){
	
	long long ans = 0;
	for(int i = x; i > 0; i -= i&-i)ans += tree[id][i];
	return ans;	
}

int main(){

	int tc = 0;
	scanf("%d", &tc);
	
	while(tc--){
		
		for(int i = 0; i < mod; i++)mapa[i].clear();
		memset(tree, 0, sizeof tree);
		
		int P, Q, R, top = 0;
		
		scanf("%d", &P);
		for(int i = 0; i < P; i++)scanf("%lld", &A1[i]), B[top++] = A1[i] += add;
		
		scanf("%d", &Q);
		for(int i = 0; i < Q; i++)scanf("%lld", &A2[i]), B[top++] = A2[i] += add;
		
		scanf("%d", &R);
		for(int i = 0; i < R; i++)scanf("%lld", &A3[i]), B[top++] = A3[i] += add;
		
		sort(B, B + top);
		int id = 1;
		
		for(int i = 0; i < top; i++)
			if(mapa[B[i]%mod].find(B[i]) == mapa[B[i]%mod].end())
				mapa[B[i]%mod][B[i]] = id++;
		
		for(int i = 0; i < P; i++)A1[i] = mapa[A1[i]%mod][A1[i]];
		for(int i = 0; i < Q; i++)A2[i] = mapa[A2[i]%mod][A2[i]];
		for(int i = 0; i < R; i++)A3[i] = mapa[A3[i]%mod][A3[i]];
		
		for(int i = 0; i < Q; i++){
			
			if(i < P)update(A1[i], 0, 1);
			aux[i] = query(A2[i], 0);
		}
		
		long long ans = 0;
		for(int i = 0; i < R; i++){
			
			if(i < Q)update(A2[i], 1, aux[i]);
			ans  += query(A3[i], 1);
		}
		
		printf("%lld\n", ans);
	}
}

