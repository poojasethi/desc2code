#include <iostream>
#include <cmath>

using namespace std;

bool isPalindrome(unsigned long long n)
{
  unsigned long long m = 0,x = n;
  while ( n > 0 )
  {
    m = m*10 + n%10;
    n = n/10; 
  }
  
  if ( m == x)
    return true;
  
  return false;
}

void increase_propagate(int a[], unsigned long d)
{
  unsigned long index = d/2;
  if(d%2 == 0)
    index--;
  
  unsigned long long m = 0;
  for(unsigned long i = 0; i<=index; i++)
    m = m*10 + a[i];
  
  m++;
  for(unsigned long i = index; i>=0, m>0; i--)
  {
    a[i] = m%10;
    m/=10;
  }
}
  
void mirror(int a[], unsigned long d)
{
  for(unsigned long i=0; i<d/2; i++)
    a[d-i-1] = a[i];
}

int main()
{
  unsigned long long t,num;
  cin>>t;
  while(t--)
  {
    cin>>num;
    
    if(num>=0 && num < 9)
    {
      cout<<num+1<<endl;
      continue;
    }
    else if(num==9 || num==10)
    {
      cout<<11<<endl;
      continue;
    }
    
    unsigned long digits = ceil(log10(num+1));
    bool odd = (digits%2==1)?true:false;
    int a[digits];
    unsigned long long tmp = num;
    
    for(unsigned long d=digits-1; d>=0, tmp > 0; d--)
    {
      a[d] = tmp%10;
      tmp/=10;
    }
 
    if(!isPalindrome(num))
    {
      unsigned long i=digits/2 - 1,j= digits/2;
      if(odd)
	j++;
      if(a[i] == a[j])
      {
	i--;
	j++;
      }
      
      bool left_big = (a[i] > a[j])?true:false;
      if(left_big)
	mirror(a, digits);
      
      else
      {
	increase_propagate(a, digits);
	mirror(a, digits);
      }
    }
    
    else
    {
    /*  bool largest = true;
      for(unsigned long d = 0; d<digits; d++)
      {
	if(a[d] != 9)
	  largest = false;
      }
      
      if (largest)
      {
	cout<<num+2<<endl;
	continue;
      }
      else
      {
	increase_propagate(a, digits);
	mirror(a, digits);
      }*/
    }

    unsigned long long m = 0;
    for(unsigned long d = 0; d<digits; d++)
      m = m*10 + a[d];
    
    cout<<m<<endl;
  }
  return 0;
}
