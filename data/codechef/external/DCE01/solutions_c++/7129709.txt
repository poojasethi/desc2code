#include <iostream>
#include <queue>
using namespace std;
#define S(n) scanf("%d",&n)
#define FOR(i,a,s) for(int i=a;i<s;i++)
struct node{
    int data;
    int fill;
} arr[1001][1001];
struct hnode{
    int x,y,val;
};
struct CALess
{
     bool operator ()(hnode& lhs, hnode& rhs)
     {
         return lhs.val > rhs.val;
     }
};
void sink(int cr, int cc, int tr, int tc){
    priority_queue<hnode, std::deque<hnode>, CALess> pq;
 
    hnode cur;
    hnode temp;
    cur.val = arr[cr][cc].data;
    cur.x = cr;
    cur.y = cc;
    pq.push(cur);
    arr[cur.x][cur.y].fill = 1;
    int x,y;
    while(!pq.empty())
    {
        cur = pq.top();
        pq.pop();
        arr[cur.x][cur.y].fill = 2;
        x = cur.x;
        y = cur.y;
        if(y-1 >= 0)
        {
            if(arr[x][y-1].fill == 0)
            {
                arr[x][y-1].data += cur.val;
                temp.val = arr[x][y-1].data;
                temp.x = x;
                temp.y = y-1;
                pq.push(temp);
                arr[x][y-1].fill = 1;
            }
            else
            {
                if(x-1>=0 && arr[x][y-1].fill == 2 && arr[x-1][y].fill == 0)
                {
                    arr[x-1][y].data += cur.val;
                    temp.val = arr[x-1][y].data;
                    temp.x = x-1;
                    temp.y = y;
                    pq.push(temp);
                    arr[x-1][y].fill = 1;
                }
            }
        }
        if(y+1 < tc-x)
        {
            if(arr[x][y+1].fill == 0)
            {
                arr[x][y+1].data += cur.val;
                temp.val = arr[x][y+1].data;
                temp.x = x;
                temp.y = y+1;
                pq.push(temp);
                arr[x][y+1].fill = 1;
            }
            else
            {
                if(x-1>=0 && arr[x][y+1].fill == 2 && arr[x-1][y+1].fill == 0)
                {
                    arr[x-1][y+1].data += cur.val;
                    temp.val = arr[x-1][y+1].data;
                    temp.x = x-1;
                    temp.y = y+1;
                    pq.push(temp);
                    arr[x-1][y+1].fill = 1;
                }
            }
        }
 
    }
 
}
int main()
{
    int t = 1, n, k, h;
    S(t);
    FOR(i,0,t){
 
        S(n);S(k);S(h);
        FOR(j,0,k){
            FOR(l,0,n-j){
                arr[j][l].data=0;
                arr[j][l].fill=0;
            }
        }
        FOR(j,0,k){
            FOR(l,0,n-j){
                S(arr[j][l].data);
            }
        }
        sink(k-1, h-1, k, n);
        int max = 0;
        FOR(j,0,k){
            FOR(l,0,n-j){
                if(max < arr[j][l].data)
                    max = arr[j][l].data;
            }
        }
        printf("%d\n",max);
    }
    return 0;
}
 