#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) ((n) & (1LL << (i)))
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
#define EPS 1e-9
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos((ld) 0);
ll gcd(ll a, ll b) {ll r; while (b != 0) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
int mulmod(ll a, ll b, int p = MOD) {return a * b % p;}
int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}

const int maxn = 100010;
const int K = (int) sqrt(maxn << 1);
const int maxe = 20;

struct Query {
	int l, r, z;
	int idx;
	Query() {
		l = r = 0;
		z = -1;
	}
	int operator < (const Query& oth) {
		if (l / K != oth.l / K) return l / K < oth.l / K;
		return r < oth.r;
	}
};

int n, q;
int f[maxn];
vi adj[maxn];
Query query[maxn];
int p[maxn][maxe];
int lev[maxn];
int tin[maxn];
int tou[maxn];
int tms;
int idx[maxn << 1];
int vis[maxn];
int cnt[maxn];
vi val[maxn];
int sum;
int ans[maxn];

void dfs(int u, int dad = -1) {
	idx[tin[u] = tms++] = u;
	FOR(i, 1, maxe) p[u][i] = p[p[u][i - 1]][i - 1];
	FOR(i, 0, sz(adj[u])) {
		int v = adj[u][i];
		if (v != dad) {
			lev[v] = lev[u] + 1;
			p[v][0] = u;
			dfs(v, u);
		}
	}
	idx[tou[u] = tms++] = u;
}

int isparent(int u, int v) {
	return tin[u] <= tin[v] && tou[u] >= tou[v];
}

int lca(int u, int v) {
	if (lev[u] < lev[v]) swap(u, v);
	if (isparent(v, u)) return v;
	FORd(i, maxe, 0) {
		if (lev[p[u][i]] >= lev[v]) {
			u = p[u][i];
		}
	}
	FORd(i, maxe, 0) {
		if (p[u][i] != p[v][i]) {
			u = p[u][i];
			v = p[v][i];
		}
	}
	return p[u][0];
}

void add(int d) {
	if (sz(val[d])) submod(sum, val[d].back());
	if (sz(val[d])) val[d].pb(mulmod(val[d].back(), d));
	else val[d].pb(d);
	addmod(sum, val[d].back());
}

void rem(int d) {
	submod(sum, val[d].back());
	val[d].pop_back();
	if (sz(val[d])) {
		addmod(sum, val[d].back());
	}
}

void deal(int u) {
	vis[u] ^= 1;
	if (vis[u]) add(f[u]);
	else rem(f[u]);
}

void solve() {
	cin>>n;
	FOR(i, 0, n) cin>>f[i];
	FOR(i, 0, n - 1) {
		int u, v; cin>>u>>v; u--; v--;
		adj[u].pb(v); adj[v].pb(u);
	}
	dfs(0);
	cin>>q;
	FOR(i, 0, q) {
		int u, v; cin>>u>>v; u--; v--;
		if (lev[u] > lev[v]) swap(u, v);
		int a = lca(u, v);
		if (u == a) {
			query[i].l = tin[u];
			query[i].r = tin[v];
		}
		else {
			query[i].l = tou[u];
			query[i].r = tin[v];
			query[i].z = a;
		}
		query[i].idx = i;
	}
	sort(query, query + q);
	int l = 0, r = -1;
	FOR(i, 0, q) {
		if (l < query[i].l) {
			while (l + 1 <= query[i].l) {
				deal(idx[l++]);
			}
		}
		else {
			while (l - 1 >= query[i].l) {
				deal(idx[--l]);
			}
		}
		if (r < query[i].r) {
			while (r + 1 <= query[i].r) {
				deal(idx[++r]);
			}
		}
		else {
			while (r - 1 >= query[i].r) {
				deal(idx[r--]);
			}
		}
		if (~query[i].z) deal(query[i].z);
		ans[query[i].idx] = sum;
		if (~query[i].z) deal(query[i].z);
	}
	FOR(i, 0, q) cout<<ans[i]<<"\n";
}

int main() {
//	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
