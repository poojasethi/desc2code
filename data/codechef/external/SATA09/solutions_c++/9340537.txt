#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> pii;
typedef pair<pii,int> ppi;
const int MAXN = 100005;
const int SQRT = 1000;
const long long int MOD = 1000000007;
int ctr,val[MAXN],pos[MAXN],rev_map[2*MAXN],gctr[MAXN],fans[MAXN];
long long int contrib[MAXN],mod_inv[MAXN],ans;
bool vis[MAXN];
vector <int> G[MAXN];
long long int power(long long int a, int b)
{
	if(b == 0)
		return 1;
	long long int ans = power(a,b/2);
	ans = (ans*ans)%MOD;
	if(b%2)
		ans = (ans*a)%MOD;
	return ans;
}
bool sorter(const ppi &x, const ppi &y)
{
	int xv = x.first.first/SQRT, yv = y.first.first/SQRT;
	if(xv != yv)
		return xv < yv;
	return x.first.second < y.first.second;
}
void dfs(int v, int pv)
{
	pos[v] = ctr;
	rev_map[ctr] = v;
	ctr++;
	for (int i = 0; i < G[v].size(); ++i)
	{
		if(G[v][i] != pv)
			dfs(G[v][i],v);
	}
	rev_map[ctr] = pv;
	ctr++;
}
void add(int x)
{
	vis[x] = true;
	int vx = val[x];
	if(gctr[vx])
		ans = (ans + MOD - contrib[vx])%MOD;
	else
		contrib[vx] = 1;
	gctr[vx]++;
	contrib[vx] = (contrib[vx]*vx)%MOD;
	ans = (ans + contrib[vx])%MOD;
}
void remove(int x)
{
	vis[x] = false;
	int vx = val[x];
	gctr[vx]--;
	ans = (ans + MOD - contrib[vx])%MOD;
	if(gctr[vx])
		contrib[vx] = (contrib[vx]*mod_inv[vx])%MOD;
	else
		contrib[vx] = 0;
	ans = (ans + contrib[vx])%MOD;
}
int main()
{
	// preprocessing
	for (int i = 1; i < MAXN; ++i)
		mod_inv[i] = power(i,MOD-2);
	//
	int n;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
		scanf("%d", &val[i]);
	for (int i = 0; i < n-1; ++i)
	{
		int u,v;
		scanf("%d %d", &u, &v);
		G[u].push_back(v);
		G[v].push_back(u);
	}
	dfs(1,0);
	int q;
	scanf("%d", &q);
	vector <ppi> queries;
	for (int i = 0; i < q; ++i)
	{
		int u,v;
		scanf("%d %d", &u, &v);
		u = pos[u];
		v = pos[v];
		if(u > v)
			swap(u,v);
		queries.push_back(ppi(pii(u,v),i));
	}
	sort(queries.begin(), queries.end(), sorter);
	int l = 0, r = 0;
	add(1);
	for (int i = 0; i < queries.size(); ++i)
	{
		while(l < queries[i].first.first)
		{
			if(vis[rev_map[l+1]])
				remove(rev_map[l]);
			else
				add(rev_map[l+1]);
			l++;
		}
		while(l > queries[i].first.first)
		{
			if(vis[rev_map[l-1]])
				remove(rev_map[l]);
			else
				add(rev_map[l-1]);
			l--;
		}
		while(r < queries[i].first.second)
		{
			if(vis[rev_map[r+1]])
				remove(rev_map[r]);
			else
				add(rev_map[r+1]);
			r++;
		}
		while(r > queries[i].first.second)
		{
			if(vis[rev_map[r-1]])
				remove(rev_map[r]);
			else
				add(rev_map[r-1]);
			r--;
		}
		fans[queries[i].second] = ans;
	}
	for (int i = 0; i < q; ++i)
		printf("%d\n", fans[i]);
	return 0;
}