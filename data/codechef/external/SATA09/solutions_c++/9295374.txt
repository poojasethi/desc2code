#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int MAXN = 100000 + 10, K = 17, M = 1e9 + 7;

vector<int> G[MAXN];
int dep[MAXN], f[MAXN][K + 1];
int st[MAXN], ed[MAXN], loc[MAXN << 1];
int n, m, P, dfn;

void dfs(int x, int par = -1) {
  loc[st[x] = dfn++] = x;
  for (int i = 1; i <= K; ++i) f[x][i] = f[f[x][i - 1]][i - 1];
  for (auto &y: G[x]) if (y != par) {
    dep[y] = dep[f[y][0] = x] + 1;
    dfs(y, x);
  }
  loc[ed[x] = dfn++] = x;
}
int lca(int x, int y) {
  if (x == y) return x;
  if (dep[x] < dep[y]) swap(x, y);
  for (int i = K; ~i; --i) {
    if (dep[f[x][i]] >= dep[y]) x = f[x][i];
  }
  if (x == y) return x;
  for (int i = K; ~i; --i) {
    if (f[x][i] != f[y][i]) x = f[x][i], y = f[y][i];
  }
  return f[x][0];
}

int val[MAXN], inv[MAXN], vis[MAXN], sum;
int cnt[MAXN], mul[MAXN], ans[MAXN];
void deal(int x) {
  int c = val[x]; vis[x] ^= 1;
  sum += M - mul[c]; if (sum >= M) sum -= M;
  if (!vis[x]) {
    mul[c] = 1ll * mul[c] * inv[c] % M;
    if (--cnt[c] == 0) mul[c] = 0;
  }
  else {
    if (++cnt[c] == 1) mul[c] = 1;
    mul[c] = 1ll * mul[c] * c % M;
  }
  sum += mul[c]; if (sum >= M) sum -= M;
}

struct Node {
  int l, r, z, id;
  bool operator < (const Node &rhs) {
    return l / P == rhs.l / P ? r < rhs.r : l / P < rhs.l / P;
  }
} Q[MAXN];

int main() {
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) scanf("%d", val + i);
  for (int i = 1; i < n; ++i) {
    int u, v; scanf("%d%d", &u, &v);
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(dep[1] = 1);
  P = sqrt(n * 2);
  scanf("%d", &m);
  for (int i = 0; i < m; ++i) {
    int x, y; scanf("%d%d", &x, &y);
    if (st[x] > st[y]) swap(x, y);
    int z = lca(x, y); Q[i].id = i;
    if (z == x) Q[i].l = st[x], Q[i].r = st[y];
    else Q[i].l = ed[x], Q[i].r = st[y], Q[i].z = z;
  }
  sort(Q, Q + m);
  inv[1] = 1; sum = 0;
  for (int i = 2; i < MAXN; ++i) {
    inv[i] = LL(M - inv[M % i]) * (M / i) % M;
  }
  for (int i = 0, l = 0, r = -1; i < m; ++i) {
    if (r < Q[i].r) {
      for (++r; r <= Q[i].r; ++r) deal(loc[r]);
      --r;
    }
    for (; r > Q[i].r; --r) deal(loc[r]);
    for (; l < Q[i].l; ++l) deal(loc[l]);
    if (l > Q[i].l) {
      for (--l; l >= Q[i].l; --l) deal(loc[l]);
      ++l;
    }
    if (Q[i].z) deal(Q[i].z);
    ans[Q[i].id] = sum;
    if (Q[i].z) deal(Q[i].z);
  }
  for (int i = 0; i < m; ++ i) printf("%d\n", ans[i]);
  return 0;
}
