#include <bits/stdc++.h>
using namespace std;

#define ll long long
const int N = 1e5 + 5, SQRT = 320, LOGN = 20, MOD = 1e9 + 7;

int l[N], r[N], id[2*N], depth[N], p[LOGN][N], cntr = 0;
bool visited[N];
int fare[N], freq[N], now[N], mod_inv[N], ans[N], current = 0;
vector<int> adj[N];

struct data{
    int l, r, lca, id;
}Q[N];

bool cmp(const data &a, const data &b){
    return make_pair(a.l/SQRT, a.r) < make_pair(b.l/SQRT, b.r);
}

void dfs(int u, int prev){
    l[u] = ++cntr, id[cntr] = u;
    p[0][u] = prev, depth[u] = depth[prev] + 1;
    for(int i = 1; i < LOGN; i++)   p[i][u] = p[i - 1][p[i - 1][u]];
    for(auto v : adj[u])
        if(v != prev)
            dfs(v, u);
    r[u] = ++cntr, id[cntr] = u;
}

int mul(ll a, ll b){
    ll res = (a * 1LL * b) % MOD;
    return res;
}

int add(int a, int b){
    int res = (a + b) % MOD;
    if(res < 0) res += MOD;
    return res;
}

int pow_mod(int base, int expo){
    int res = 1;
    while(expo){
        if(expo & 1)    res = mul(res, base);
        base = mul(base, base);
        expo /= 2;
    }
    return res;
}

void toggle(int x){
    int k = fare[x];
    if(visited[x]){
        current = add(current, -now[k]);
        now[k] = mul(now[k], mod_inv[k]), freq[k]--;
        if(freq[k]) current = add(current, now[k]);
    }
    else{
        if(freq[k]) current = add(current, -now[k]);
        now[k] = mul(now[k], k), freq[k]++;
        current = add(current, now[k]);
    }
    visited[x] ^= 1;
}

int lca(int u, int v){
    if(depth[v] > depth[u]) swap(u, v);
    int delta = depth[u] - depth[v];
    for(int i = LOGN - 1; i >= 0; i--)
        if(delta & (1 << i))
            u = p[i][u];
    if(u == v)  return u;
    for(int i = LOGN - 1; i >= 0; i--)
        if(p[i][u] != p[i][v])
            u = p[i][u], v = p[i][v];
    return p[0][u];
}

int main(){

    for(int i = 1; i < N; i++){
        now[i] = 1;
        mod_inv[i] = pow_mod(i, MOD - 2);
    }

    int n, q, u, v;
    scanf("%d", &n);
    for(int i = 1; i <= n; i++) scanf("%d", &fare[i]);
    for(int i = 1; i < n; i++){
        scanf("%d %d", &u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1, 0);
    scanf("%d", &q);
    for(int i = 0; i < q; i++){
        scanf("%d %d", &u, &v);
        if(l[u] > l[v]) swap(u, v);
        Q[i].lca = lca(u, v);
        if(Q[i].lca == u)   Q[i].l = l[u], Q[i].r = l[v];
        else Q[i].l = r[u], Q[i].r = l[v];
        Q[i].id = i;
    }
    sort(Q, Q + q, cmp);
    int l = Q[0].l, r = Q[0].l - 1;
    for(int i = 0; i < q; i++){
        if(ans[Q[i].id])    continue;
        while(Q[i].l > l)   toggle(id[l++]);
        while(Q[i].l < l)   toggle(id[--l]);
        while(Q[i].r > r)   toggle(id[++r]);
        while(Q[i].r < r)   toggle(id[r--]);
        int u = id[l], v = id[r];
        if(Q[i].lca != u and Q[i].lca != v)  toggle(Q[i].lca);
        ans[Q[i].id] = current;
        if(Q[i].lca != u and Q[i].lca != v)  toggle(Q[i].lca);
    }
    for(int i = 0; i < q; i++)  printf("%d\n", ans[i]);
}
