#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define pil pair<int,long long>
#define pli pair<long long,int>
#define pll pair<long long,long long>
#define pb push_back
#define mp make_pair
#define sd(x) scanf("%d", &x)
#define pd(x) printf("%d\n",x)
#define pdl(x) printf("%lld\n",x)
#define sdl(x) scanf("%lld", &x)
#define eps 1e-12
using namespace std;
struct pree
{
	int l,r,id,s_id;
};
bool compare(pree uu,pree vv)
{
	if(uu.s_id==vv.s_id)
	{
		return uu.r<vv.r;
	}
	return uu.s_id<vv.s_id;
}
int ctr=1,a[500000],num[500000];
vector<int> g[100008];
inline void dfs(int pos,int prev)
{
	num[pos]=ctr;
	a[ctr]=pos;
	ctr++;
	for(int i=0;i<g[pos].size();i++)
	{
		if(g[pos][i]!=prev)
		{
			dfs(g[pos][i],pos);
		}
	}
	a[ctr]=prev;
	ctr++;
}
ll ans[200000];
pree q[200000];
bool reached[100009];
ll mod=1000000007,inv[100009],temp[100009];
int m[100009];
int main()
{
	int n,mm;
	sd(n);
	//sd(mm);
	int w[n+1];
	for(int i=1;i<=n;i++)
	{
		sd(w[i]);
	}
	inv[1]=1;
	for(int i=2;i<=100000;i++)
	{
		inv[i]=((mod-(inv[mod%i]))*(mod/i))%mod;
	}
	for(int i=1;i<n;i++)
	{
		int x,y;
		scanf("%d %d",&x,&y);
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(1,0);
	int sq=1000;
	sd(mm);
	for(int i=0;i<mm;i++)
	{
		int x,y;
		scanf("%d %d",&x,&y);
		q[i].id=i;
		q[i].l=num[x];
		q[i].r=num[y];
		q[i].s_id=q[i].l/sq;
	}
	sort(q,q+mm,compare);
	int l=0,r=0;
	int fans=0;
	for(int i=0;i<mm;i++)
	{
		int x=q[i].l;
		int y=q[i].r;
		if(l<x)
		{
			for(int j=l+1;j<=x;j++)
			{
				if(reached[a[j]])
				{
					if(j-1>0)
					{
						fans=fans-temp[w[a[j-1]]];
						if(fans<0)
						{
							fans+=mod;
						}
						m[w[a[j-1]]]--;
						if(m[w[a[j-1]]]==0)
						{
							temp[w[a[j-1]]]=0;
						}
						else
						{
							temp[w[a[j-1]]]=temp[w[a[j-1]]]*inv[w[a[j-1]]];
							temp[w[a[j-1]]]%=mod;
							fans=fans+temp[w[a[j-1]]];
							if(fans>=mod)
							{
								fans-=mod;
							}
						}
						reached[a[j-1]]=false;
					}
				}
				else
				{
					reached[a[j]]=true;
					fans-=temp[w[a[j]]];
					if(fans<0)
					{
						fans+=mod;
					}
					m[w[a[j]]]++;
					if(m[w[a[j]]]==1)
					{
						temp[w[a[j]]]=1ll;
					}
					temp[w[a[j]]]=temp[w[a[j]]]*w[a[j]];
					temp[w[a[j]]]%=mod;
					fans=fans+temp[w[a[j]]];
					if(fans>=mod)
					{
						fans-=mod;
					}
				}
			}
			l=x;
		}
		else
		{
			for(int j=l-1;j>=x;j--)
			{
				if(reached[a[j]])
				{
					fans=fans-temp[w[a[j+1]]];
					if(fans<0)
					{
						fans+=mod;
					}
					m[w[a[j+1]]]--;
					if(m[w[a[j+1]]]==0)
					{
						temp[w[a[j+1]]]=0;
					}
					else
					{
						temp[w[a[j+1]]]=temp[w[a[j+1]]]*inv[w[a[j+1]]];
						temp[w[a[j+1]]]%=mod;
						fans=fans+temp[w[a[j+1]]];
						if(fans>=mod)
						{
							fans-=mod;
						}
					}
					reached[a[j+1]]=false;
				}
				else
				{
					reached[a[j]]=true;
					fans-=temp[w[a[j]]];
					if(fans<0)
					{
						fans+=mod;
					}
					m[w[a[j]]]++;
					if(m[w[a[j]]]==1)
					{
						temp[w[a[j]]]=1ll;
					}
					temp[w[a[j]]]=temp[w[a[j]]]*w[a[j]];
					temp[w[a[j]]]%=mod;
					fans=fans+temp[w[a[j]]];
					if(fans>=mod)
					{
						fans-=mod;
					}
				}
			}
			l=x;
		}
		if(r<y)
		{
			for(int j=r+1;j<=y;j++)
			{
				if(reached[a[j]])
				{
					if(j-1>0)
					{
						fans=fans-temp[w[a[j-1]]];
						if(fans<0)
						{
							fans+=mod;
						}
						m[w[a[j-1]]]--;
						if(m[w[a[j-1]]]==0)
						{
							temp[w[a[j-1]]]=0;
						}
						else
						{
							temp[w[a[j-1]]]=temp[w[a[j-1]]]*inv[w[a[j-1]]];
							temp[w[a[j-1]]]%=mod;
							fans=fans+temp[w[a[j-1]]];
							if(fans>=mod)
							{
								fans-=mod;
							}
						}
						reached[a[j-1]]=false;
					}
				}
				else
				{
					reached[a[j]]=true;
					fans-=temp[w[a[j]]];
					if(fans<0)
					{
						fans+=mod;
					}
					m[w[a[j]]]++;
					if(m[w[a[j]]]==1)
					{
						temp[w[a[j]]]=1ll;
					}
					temp[w[a[j]]]=temp[w[a[j]]]*w[a[j]];
					temp[w[a[j]]]%=mod;
					fans=fans+temp[w[a[j]]];
					if(fans>=mod)
					{
						fans-=mod;
					}
				}
			}
			r=y;
		}
		else
		{
			for(int j=r-1;j>=y;j--)
			{
				if(reached[a[j]])
				{
					fans=fans-temp[w[a[j+1]]];
					if(fans<0)
					{
						fans+=mod;
					}
					m[w[a[j+1]]]--;
					if(m[w[a[j+1]]]==0)
					{
						temp[w[a[j+1]]]=0;
					}
					else
					{
						temp[w[a[j+1]]]=temp[w[a[j+1]]]*inv[w[a[j+1]]];
						temp[w[a[j+1]]]%=mod;
						fans=fans+temp[w[a[j+1]]];
						if(fans>=mod)
						{
							fans-=mod;
						}
					}
					reached[a[j+1]]=false;
				}
				else
				{
					reached[a[j]]=true;
					fans-=temp[w[a[j]]];
					if(fans<0)
					{
						fans+=mod;
					}
					m[w[a[j]]]++;
					if(m[w[a[j]]]==1)
					{
						temp[w[a[j]]]=1ll;
					}
					temp[w[a[j]]]=temp[w[a[j]]]*w[a[j]];
					temp[w[a[j]]]%=mod;
					fans=fans+temp[w[a[j]]];
					if(fans>=mod)
					{
						fans-=mod;
					}
				}
			}
			r=y;
		}
		ans[q[i].id]=fans;
	}
	for(int i=0;i<mm;i++)
	{
		pdl(ans[i]);
	}
}