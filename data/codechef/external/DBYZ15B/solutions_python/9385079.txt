//compile c++11 with -std=c++0x in g++
#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
#define pb push_back
#define mp make_pair
#define f first
#define sc second
#define pii pair<int,int>
#define M 1000000007
#define inf (int)(2e+9)
#define all(o) (o).begin(), (o).end()
/*#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;*/
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * (b / gcd(a, b))); }
LL max(LL a,LL b,LL c){return max(a,max(b,c));}
inline int read()
{
	int ret = 0,temp=1;
	int c = getchar_unlocked();
	while(c<'0' || c>'9'){
		c = getchar_unlocked();
	}
	while(c>='0' && c<='9')
	{
		ret = (ret<<3) + (ret<<1) + c - '0';
		c = getchar_unlocked();
	}
        return ret;
}
LL mulmod(LL a,LL b) {
   long double res = a;
   res *= b;
   LL c = (LL)(res / M);
   a *= b;
   a -= c * M;
   a %= M;
   if (a < 0) a += M;
   return a;
}
inline void add(LL &a,LL b) { a+=b; if(a>=M) a-=M;}
const int N=405;
struct poly
{
  LL c[N];
  poly(bool id=false)
  {
    c[0]=id;
    for(int i=1;i<N;i++) c[i]=0;
  }
  LL& operator[] (int i){
    return c[i];
  }
};
poly operator+ (poly &a,poly &b)
{
  poly ret;
  for(int i=0;i<N;i++){
    ret[i]=a[i];
    add(ret[i],b[i]);
  }
  return ret;
}
poly operator* (poly &a, poly &b)
{
  LL ret[N+N];
  for(int i=0;i<N+N;i++) ret[i]=0;
    for(int i=0;i<N;i++) 
      for(int j=0;j<N;j++) 
        add(ret[i+j],a[i]*b[j]%M);
  poly r;
  for(int i=0;i<N;i++) r[i]=ret[i];
    return r;
}
poly power(poly a,LL p)
{
  poly ans(true);
  while(p>0){
    if(p&1) ans=(ans*a);
    a=(a*a);
    p/=2;
  }
  return ans;
}
poly go(poly &a,LL k)
{
  if(k==0) return poly();
  poly id(true);
    poly fst=go(a,k/2);
    poly snd=power(a,k/2);
    snd=id+snd;
    poly res=fst*snd;
  if(k%2==0){
    return res;
  }
  else{
    poly th=power(a,k);
    return th+res;
  }
}
int main()
{
    int n,q;
    LL k;
    scanf("%d %lld",&n,&k);
    poly f;
    for(int i=0;i<n;i++){
      int x;
      scanf("%d",&x);
      f[x]++;
    }
    f=go(f,k);
    scanf("%d",&q);
    while(q--){
      int x;
      scanf("%d",&x);
      printf("%lld\n",f[x]);
    }
}
  