#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007LL
#define MAX 1000000
#define ll long long
 
bool p[MAX>>1];
vector <int>primes;
 
void sieve() {
	int i,j,k;
	primes.push_back(2);
	for(i=3;i*i<MAX;i+=2) {
		if(p[i>>1]==0) {
			primes.push_back(i);
			for(j=i*i,k=i*2;j<MAX;j+=k)
				p[j>>1] = 1;
		}
	}
	for(;i<MAX;i+=2)
		if(p[i>>1]==0)
			primes.push_back(i);
}
 
ll mul(ll a, ll b, ll p){
	ll ans = 0;
	while(b){
		if(b & 1) ans = (ans + a) % p;
		a = (a + a) % p;
		b >>= 1;
	}
	return ans;
}
 
ll power(ll a,ll b, ll m) {
	ll r= 1;
	while(b) {
		if(b&1)
			r=mul(r,a,m);
		a=mul(a,a,m);
		b>>=1;
	}
	return r%m;
}
 
bool check_primality(ll n) {
	int k = 10;
	for(int i=0;i<k;i++) {
		ll a = rand();
		if(power(a%n,n-1,n)!=1) {
			return false;
		}
	}
	return true;
}
 
ll number_primes(ll n) {
	ll ans = 0,temp = n;
	for(int i=0;temp>1 && i<(int)primes.size();i++) {
		// printf("%d\n",primes[i]);
		if(temp%primes[i]==0) {
			ans++;
			temp/=primes[i];
		}
	}
	
	if(temp>1) {
		bool f = check_primality(temp);
		if(f)
			ans++;
		else
			ans+=2;
	}
 
	return ans;
}
 
int main() {
	int t;
	ll n, k;
	sieve();
	scanf("%d",&t);
	
	while(t--) {
		scanf("%lld %lld",&n,&k);
		ll a = number_primes(k);
		ll b = number_primes(n);
		ll ans = power((power(2LL,a,MOD) + 1LL)%MOD,b,MOD);
		printf("%lld\n",ans);
	}
	return 0;
} 