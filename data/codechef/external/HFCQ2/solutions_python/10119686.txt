/*--------------------------
|  Author- Advitiya Brijesh |
|  PIE @ MNNIT Allahabad    |
|  advitiyabrijesh@gmail.com|
|                           |
---------------------------*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<list<ll> > vli;
typedef vector<int> vi;
typedef vector<pair<ll,ll> > vpll;
typedef vector<pair<int,int> > vpii;
typedef pair<int ,int> pii;
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define rep(i,n) for(int i=0;i<n;++i)
#define REP(i,a,b) for(int i=a;i<=b;++i)
#define PER(i,b) for(int i=b;i>=0;--i)
#define sd(n) scanf("%d",&n)
#define sld(n) scanf("%ld",&n)
#define sll(n) scanf("%lld",&n)
#define ss(n) scanf("%s",n)
#define sc(n) scanf("%c",&n)
#define oll(n) printf("%lld\n",n);
#define mset(n,k) memset(n,k,sizeof(n))
#define MOD 1000000007
#define MAX 2000005
#define MAXN 1005
vector<int>v;
bool isprime[1000005]={true};
ll mulmod(ll a,ll b,ll c){

  ll x=0,y=a%c;

  while(b){

    if(b&1){

      x=(x+y)%c;

    }

    y=(y*2)%c;

    b/=2;

  }

  return x%c;
}
//modular expo
ll power(ll x, unsigned long long int  y, ll p)
{
    ll res = 1;
    x = x % p;
    while (y > 0)
    {
        if (y & 1)
            res=mulmod(res,x,p);

        y = y>>1;
        x=mulmod(x,x,p);
    }
    return res%p;
}
bool miller(long long p){
    if(p<2){
        return false;
    }
    if(p!=2 && p%2==0){
        return false;
    }
    long long s=p-1;
    while(s%2==0){
        s/=2;
    }
    for(int i=0;i<4;i++){
        long long a=rand()%(p-1)+1,temp=s;
        long long mod=power(a,temp,p);
        while(temp!=p-1 && mod!=1 && mod!=p-1){
            mod=mulmod(mod,mod,p);
            temp *= 2;
        }
        if(mod!=p-1 && temp%2==0){
            return false;
        }
    }
    return true;
}
void seive(){
    //v.pb(2);
    for(int i=2;i<=1000000;++i){
        if(isprime[i]){
            v.pb(i);
            for(int j=i*i;j<=1000000;j+=i){
                isprime[j]=false;
            }
        }
    }
}

/*bool miller(ll p,int iteration = 6)
{
    if(p<2)
        return 0;
    if(p!=2 && p%2==0)
        return 0;
    ll s=p-1;
    while(s%2==0){
        s/=2;
    }
    ll base[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022};
    for(int i=0;i<iteration;i++) {
        ll a= base[i];
        if (a > p- 2)
            a = rand()%(p-1)+1;
        ll temp=s;
        ll mod=modpow(a,temp,p);
        while(temp!=p-1 && mod!=1 && mod!=p-1) {
            //mod=(mod*mod)%p;
            mod = mulmod (mod, mod, p);
            temp *= 2;
        }
        if(mod!=p-1 && temp%2==0)
            return 0;
    }
    return 1;
}*/

ll PollardRho(ll n)
{
    if(n%2==0) return 2ll;
    ll x=(ll) rand()%n;
    ll y=x;
    ll c=(ll) rand()%n;
    ll d;
    do{
        x= (mulmod (x, x, n) + c) % n;//(((x*x)%n)+c)%n;
        y=(mulmod (y, y, n) + c) % n;//(((y*y)%n)+c)%n;
        y=(mulmod (y, y, n) + c) % n;//(((y*y)%n)+c)%n;
        d=__gcd(abs(x-y),n);
    }while(d==1);
    return d;
}
int pfactor(ll n)   {
    if( n==1 ) return 0;
    if( miller(n))
    {
        return 1;
    }
    ll div=PollardRho(n);
    return pfactor(div) + pfactor(n/div);
}

int divi (ll n) {
    int ans = 0;
    if (n > 1) {
        ans += pfactor(n);

    }
    return ans;
}
int main(){
    seive();
    int t;
    sd(t);
    while(t--){
        ll n,k;
        sll(n),sll(k);
        ll pfn=divi(n),pfk=divi(k);
        ll ans=1LL<<pfk;
        ans++;
        ans=power(ans,pfn,MOD);
        printf("%lld\n",ans);
    }
return 0;}
