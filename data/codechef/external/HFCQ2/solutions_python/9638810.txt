#include<bits/stdc++.h>
using namespace std;
#define  int LL
#define LL long long
#define modi 1000000007
typedef  long long ll;
ll power(ll  x,ll y)
{
ll d=1;
   while(y)
   {
       if(y%2)
           d=((d%modi)*(x%modi))%modi;
       y>>=1;
       x=(x*x)%modi;
   }
   return d;
}



ll mulMod(ll a, ll b, ll m){

	int largestBit = 0;
	while((b >> largestBit) != 0){
		largestBit++;
	}


	ll result = 0;
	for(int currentBit = largestBit - 1; currentBit >= 0; currentBit--){
		result = (result + result);

		if(result >= m)result -= m;

		if((b >> currentBit) & 1){
			result += a;
			if(result >= m)result -= m;
		}
	}
	return result;
}
ll exp_mod(ll a, ll x, ll m) {
    if (x == 0) return 1;
    ll res = exp_mod(a, x/2, m);
    res = mulMod(res, res, m); //(res * res) % m;
    if(x % 2 == 1) res = mulMod(res, a, m); // (res * a) % m
    return res;
}
ll random(ll a, ll b) {
    ll intervallLength = b - a + 1;
    int neededSteps = 0;
    ll base = RAND_MAX + 1LL;
    while(intervallLength > 0){
    	intervallLength /= base;
    	neededSteps++;
    }
    intervallLength = b - a + 1;
    ll result = 0;
    for(int stepsDone = 0; stepsDone < neededSteps; stepsDone++){
        result = (result * base + rand());
    }
    result %= intervallLength;
    if(result < 0) result += intervallLength;
    return result + a;
}
bool witness(ll a, ll n) {
    ll u = n-1;
    int t = 0;
    while (u % 2 == 0) {
        t++;
        u /= 2;
    }
    ll next = exp_mod(a, u, n);
    if(next == 1)return false;
    ll last;
    for(int i = 0; i < t; i++) {
    	last = next;
        next = mulMod(last, last, n);//(last * last) % n;
        if (next == 1){
        	return last != n - 1;
        }
    }
    return next != 1;
}
bool millerRabin(ll n, int s) {
    if (n <= 1) return false;
    if (n == 2) return true;
    if (n % 2 == 0) return false;
    for(int i = 0; i < s; i++) {
        ll a = random(1, n-1);
        if (witness(a, n)) return false;
    }
    return true;
}
bool isPrime(ll val){
	return millerRabin(val, 20);
}
const int MAXP = 1000000; // = 10^6
int primes[MAXP / 10], P;
bool sieve[MAXP];

void init(){
	memset(sieve, false, sizeof(sieve));
	P = 0;
	for(int p = 2; p < MAXP; p++){
		if(sieve[p]) continue;
		primes[P++] = p;
		if(MAXP / p >= p){
			for(int i = p * p; i < MAXP; i+=p){
				sieve[i] = true;
			}
		}
	}
}
bool isSquare(ll val){
	ll lo = 1, hi = val;
	while(lo <= hi){
		ll mid = lo + (hi - lo) / 2;
		ll tmp = (val / mid) / mid;
		if(tmp == 0)hi = mid - 1;
		else if(mid * mid == val)return true;
		else if(mid * mid < val)lo = mid + 1;
	}
	return false;
}


ll calc(ll val){
	ll res = 1;
	for(int i = 0; i < P; i++){
		if(val == 1)break;
		int p = primes[i];
		if(val % p == 0){
			int num = 0;
			while(val % p == 0){
				val /= p;
				++num;
			}
			res *= num + 1;
		}
	}
	if(val == 1)return res; // first case
	else if(isPrime(val))return res * 2; // second case
	else if(isSquare(val))return res * 3; // third case but with p == q
	else return res * 4; // third case with p != q
}
 main() {
	init();
	ll ne,ke,no,ko,rese;
 int tcc;cin>>tcc;while(tcc--)
 {
     cin >> ne>>ke;
	no=calc(ne);
	ko=calc(ke);
	ll foo=log2(no);
	ko++;
	rese=power(ko,foo);
	cout<<rese<<endl;
 }
	return 0;
}