#include <bits/stdc++.h>
#define ll long long int
#define INF INT_MAX

const long long int mod=1000000007;

using namespace std;

int arr[100005];
vector <int> V;

void sieve()
{
    int i,j;
    arr[0]=arr[1]=1;
    for (i=2;i<320;i++)
    {
        if (arr[i]==0)
        {
            j=2;
            while ((i*j)<=100005)
            {
                arr[i*j]=1;
                j++;
            }
        }
    }
    
    for (i=2;i<100002;++i)
        if (arr[i]==0)
        {
            //cout<<i<<" ";
            V.push_back(i);
        }
    return;
}

ll fastpow (ll x, ll y)
{
    ll res=1;
    while (y>0)
    {
        if (y%2==1)
        {
            res=(res*x)%mod;
            y--;
        }
        x=(x*x)%mod;
        y/=2;
    }
    return res%mod;
}

inline ll mulmod(ll a, ll b, ll modulus)
{
    a %= modulus;
    b %= modulus;
    long double res = a;
    res *= b;
    long long c = (long long)(res / modulus);
    a *= b;
    a -= c * modulus;
    a %= modulus;
    if (a < 0) 
        a += modulus;
    return a;
}

/* modular exponentiation */

inline ll modulo(ll y, ll exponent, ll modulus)
{
    ll x = 1;

    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            x = mulmod(x,y,modulus);
        y = mulmod(y,y,modulus);
        exponent>>= 1;
    }
    return x;
}

/* Miller-Rabin primality test, iteration signifies the accuracy */

inline bool Miller(ll p)
{
    if (p < 2)
        return false;
    
    if (p != 2 && p % 2==0)
        return false;

    for (int i=0;i<30;++i)
    {
        if (p==V[i])
            return true;
        else if (p%V[i]==0)
            return false;
    }    
            
    ll s = p - 1;
    int cnt=0;
    while (s % 2 == 0)
    {
        s /= 2;
        cnt++;
    }

    for (int i = 0; i < 40; i++)
    {
        ll a = (rand())%(p - 1) + 1;
        ll model = modulo(a, s, p);

        if (model==1 || model== p-1)
            continue;
        int f=0;
        for (int j=0;j<cnt;++j)
        {
            model = mulmod(model, model, p);
            if (model==p-1)
            {
                f=1;
                break;
            }
        }
        if (f==1)
            continue;
        return false;
    }
    return true;
}

int main()
{
    int t;
    ll n,m,a,b,i,j,k,l;
    sieve();
    scanf ("%d",&t);
    while (t--)
    {
        scanf ("%lld %lld",&n,&k);
        
        ll cnt=0,ans1,ans2;
        //cout<<V.size()<<endl;
        for (i=0;i<9592;++i)
        {
            if (k<1)
                break;
            if (k%V[i]==0)
            {
                k/=V[i];
                cnt++;
            }
        }
        
        if (Miller(k))
            cnt++;
        else if (k!=1)
            cnt+=2;
        ans1=fastpow(2*1LL,cnt);
        
        cnt=0;
        for (i=0;i<9592;++i)
        {
            if (n<1)
                break;
            if (n%V[i]==0)
            {
                n/=V[i];
                cnt++;
            }
        }
        
        if (Miller(n))
            cnt++;
        else if (n!=1)
            cnt+=2;
        ans2=fastpow(ans1+1,cnt);
        
        //cout<<ans1<<" "<<ans2<<endl;
        
        printf ("%lld\n",ans2);
    }
	return 0;
}
