
#include <bits/stdc++.h>

#define sc(x) scanf("%d",&x);
#define sc2(x,y) scanf("%d%d",&x,&y);
#define pr(x) printf("%d \n",x);
#define scll(x) scanf("%lld",&x);
#define scll2(x,y) scanf("lld",&x,&y);
#define prll(x) printf("%lld \n",x);
#define ll long long
#define PII  pair<int,int>

using namespace std;

int mod=1e9 + 7;

struct tree
{
    int sum;
    int l,r;
}
segtree[5000001];
inline tree merg(tree a,tree b){
    tree c;
    c.sum = ( a.sum | b.sum );
    return c;
}
void buildtree(int i,int l,int r,int s[])
{
    if(l==r)
    {
        segtree[i].sum=s[l];
    //    cout<<i<<" "<<segtree[i].sum<<endl;
        return;
    }
    buildtree( 2*i , l , (l+r)/2 , s );
    buildtree( 2*i+1 , 1+(l+r)/2 , r , s );
    segtree[i] = merg(segtree[2*i], segtree[2*i+1]);
 //   cout<<i<<" "<<segtree[i].sum<<endl;
}
void updatetree(int i,int l,int r,int x,int y)
{
    if( l==x && r==x )
    {
        segtree[i].sum = y;
        return;
    }
    else if( x <= (l+r)/2 ) updatetree( 2*i , l , (l+r)/2 , x , y );
    else updatetree( 2*i+1 , (l+r)/2+1 , r , x , y );
    segtree[i] = merg(segtree[2*i], segtree[2*i+1]);
}
tree query(int i,int l,int r,int c,int d)
{
    if( c==l && d==r ) return segtree[i];
    else if( d <= (l+r)/2 ) return query( 2*i , l , (l+r)/2 , c , d );
    else if( (l+r)/2 < c ) return query(2*i+1 , 1+(l+r)/2 , r , c , d);
    else
    {
        tree a = query( 2*i, l , (l+r)/2 , c , (l+r)/2 );
        tree b = query( 2*i+1 , 1+(l+r)/2 , r ,  1+(l+r)/2 , d );
        tree mer;
        mer = merg(a, b);
        return mer;
    }
}


int ar[1000000+100];

ll p[1000000+100];
int main()
{
    p[0]=1;
    int n,q;
    sc2(n,q)
    for(int i=0;i<n;i++){
        sc(ar[i])
        p[i+1]=(2*p[i])%mod;
    }

    buildtree(1,0,n-1,ar);
    int x,l,r;
    ll ans;
    while(q--){
        sc(x)sc2(l,r)
        if(x==1){
            ans = ((ll)query(1,0,n-1,l-1,r-1).sum * p[r-l])%mod;
            prll(ans)
        }
        else{
            updatetree(1,0,n-1,l-1,r);
        }
    }

}
