//https://www.codechef.com/DIBZ2016/problems/DZ16SUBA
//Copyright of code reserved with Arpit Bajaj
//Date : 02-02-2016
#include<bits/stdc++.h>
#define pii pair<int,int>
#define ll long long
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define ll long long
#define debug(x) cout<<">value ("<<#x<<") : "<<x<<endl;
#define MOD 1000000007
using namespace std;
#define Maxn 1000005
ll pow2[Maxn];
ll A[Maxn]; // array is 0 based indexing
ll tree[4*Maxn];// use 0 based indexing
void build(int idx, int start, int end)
{
    if(start==end) //leaf node
        tree[idx]=A[start];
    else
    {
        int mid = (start+end)/2;
        build(2*idx, start, mid);
        build(2*idx + 1, mid+1, end);
        tree[idx]=tree[idx*2]|tree[idx*2 + 1]; // combining logic of parent from children
    }
}
void update(int idx, int start, int end, int arrayidx, ll val)
{
    if(start==end)
    {
        A[arrayidx]=val;
        tree[idx]=val;
    }
    else
    {
        int mid = (start+end)/2;
        if(start<=arrayidx && arrayidx<=mid)
            update(2*idx,start,mid,arrayidx,val);//recur on left child
        else
            update(2*idx+1,mid+1,end,arrayidx,val);//recur on right child
        tree[idx]=tree[2*idx]|tree[2*idx+1];//combining logic
    }
}
ll query(int idx, int start, int end, int l, int r)
{
    if(start>r | end<l) // range represented by idx is totally outside
        return 0LL;
    else if(l<=start && r>=end) // range represented by idx is totally inside
        return tree[idx];
    int mid = (start+end)/2;
    ll q1 = query(2*idx,start,mid,l,r);
    ll q2 = query(2*idx+1,mid+1,end,l,r);
    return (q1|q2); //combining logic
}
void power()
{
    pow2[0]=1LL;
    for(int i=1;i<Maxn;i++)
        pow2[i]=(pow2[i-1]*2LL)%MOD;
}
int main()
{
//    ios_base::sync_with_stdio(false);
//        cin.tie(NULL);
//    freopen("in.txt","r",stdin);
//    freopen("out.txt","w",stdout);
    int n,q,i;
    //cin>>n>>q;
    scanf("%d %d",&n,&q);
    for(i=0;i<n;i++)
        scanf("%lld",&A[i]);
    power();
    build(1,0,n-1);
    while(q--)
    {
        int t,l,r,idx,val;
        scanf("%d",&t);
        if(t==1)
        {
            scanf("%d %d",&l,&r);
            l--;r--;
            ll ans = (pow2[r-l]*query(1,0,n-1,l,r))%MOD;
            printf("%lld\n",ans);
            //cout<<ans<<endl;
        }
        else
        {
            //cin>>idx>>val;
            scanf("%d %d",&idx,&val);
            idx--;
            update(1,0,n-1,idx,val);
        }
    }
    return 0;
}
