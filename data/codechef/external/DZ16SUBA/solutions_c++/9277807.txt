#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<pii> vpii;
typedef unsigned long long llu;

#define author ayushtomar
#define rf freopen("in.txt", "r", stdin)
#define wf freopen("out.txt", "w", stdout)
#define debug(x) cerr<<#x<<" "<<x<<endl;
#define f first
#define s second
#define MOD 1000000007
#define mp make_pair
#define pb push_back
ll tree[1<<21];
ll A[1<<21];
void build(int node, int start, int end)
{
    if(start == end)
    {
        // Leaf node will have a single element
        tree[node] = A[start];
    }
    else
    {
        int mid = (start + end) / 2;
        // Recurse on the left child
        build(2*node, start, mid);
        // Recurse on the right child
        build(2*node+1, mid+1, end);
        // Internal node will have the sum of both of its children
        tree[node] = tree[2*node]| tree[2*node+1];
    }
}
void update(int node, int start, int end, int idx, ll val)
{
    if(start == end)
    {
        // Leaf node
        A[idx] = val;
        tree[node] = val;
    }
    else
    {
        int mid = (start + end) / 2;
        if(start <= idx and idx <= mid)
        {
            // If idx is in the left child, recurse on the left child
            update(2*node, start, mid, idx, val);
        }
        else
        {
            // if idx is in the right child, recurse on the right child
            update(2*node+1, mid+1, end, idx, val);
        }
        // Internal node will have the sum of both of its children
        tree[node] = tree[2*node] | tree[2*node+1];
    }
}
ll query(int node, int start, int end, int l, int r)
{
    if(r < start or end < l)
    {
        // range represented by a node is completely outside the given range
        return 0;
    }
    if(l <= start and end <= r)
    {
        // range represented by a node is completely inside the given range
        return tree[node];
    }
    // range represented by a node is partially inside and partially outside the given range
    int mid = (start + end) / 2;
    ll p1 = query(2*node, start, mid, l, r);
    ll p2 = query(2*node+1, mid+1, end, l, r);
    return (p1|p2);
}
ll mult[1<<21];
int main()
{
    mult[0]=1LL;
    for(int i=1;i<=1000000+100;i++)
        mult[i]=(mult[i-1]*2LL)%MOD;
    int n,q;
    scanf("%d %d",&n,&q);
    for(int i=0;i<n;i++)
        scanf("%lld",&A[i]);
        build(1,0,n-1);
    while(q--)
    {
        int t,l,r,v;
        ll x;
        scanf("%d",&t);
        if(t==1)
        {
     //       printf("hue \n");
            scanf("%d %d",&l,&r);
            l--; r--;
            ll ans = (mult[r-l] * query(1,0,n-1,l,r))%MOD;
           printf("%lld\n",ans);
        }
        else
        {
            scanf("%d %lld",&v,&x);
            v--;
            update(1,0,n-1,v,x);
        }
    }
 return 0;
}
