#include <iostream>
#include <stdio.h>
using namespace std;

typedef long long ll;

#define sc(x) scanf("%d",&(x))
#define scl(x) scanf("%lld",&(x))
#define fori(n) for(int i=0;i<n;i++)
#define forj(n) for(int j=0;j<n;j++)

const ll mod = 1000000007;
const int N = 1000005;

ll a[N];
ll tree[4 * N];
ll b[N]; 

void build_tree(int node, int l, int r){
    //cout << "l " << l << " r " << r << endl;
    if (l == r){
        tree[node] = a[l];
        return;
    }
    int mid = (l + r) / 2;
    build_tree(node * 2, l, mid);
    build_tree(node * 2 + 1, mid + 1, r);
    tree[node] = (tree[node * 2] | tree[node * 2 + 1]);   
    return;
}

void update(int node, int idx, ll val, int l, int r){
    if (l == r){
        tree[node] = val;
        return;
    }
    int mid = (l + r) / 2;
    if (l <= idx && idx <= mid)update(node * 2, idx, val, l, mid);
    else update(node * 2 + 1, idx, val, mid + 1, r);
    tree[node] = (tree[node * 2] | tree[node * 2 + 1]);

    return;
}

ll query(int node, int start, int end, int l, int r){
    if (l >= start && r <= end)return tree[node];
    if (l>end || r<start)return 0;
    int mid = (l + r) / 2;
    ll t1 = query(node * 2, start, end, l, mid);
    ll t2 = query(node * 2 + 1, start, end, mid + 1, r);
    return (t1 | t2) ;
}


int main(){
    //freopen("input.txt", "r", stdin);
    b[0]=1;
    for(int i=1;i<N;i++){
        b[i]=(b[i-1]*2)%mod;
    }
    int n, q;
    sc(n); sc(q);
    fori(n){
        scl(a[i]);
    }
    /*fori(10)cout << a[i] << " ";
    cout << endl;*/
    build_tree(1, 0, n - 1);

    /*fori(10)cout << tree[i] << " ";
    cout << endl;*/
    fori(q){
        int t1, start, end, idx;
        ll val;
        sc(t1);
        if (t1 == 1){
            sc(start); sc(end);
            start--;
            end--;
            ll temp = (b[end-start]*query(1, start, end, 0, n - 1))%mod;
            printf("%lld\n", temp);
        }
        else{
            sc(idx); scl(val);
            idx--;
            a[idx]=val;
            update(1, idx, val, 0, n - 1);
        }
        // fori(10)cout << a[i] << " ";
        // cout << endl;
        // fori(10)cout << tree[i] << " ";
        // cout << endl;
        // cout << endl;
    }   
}
