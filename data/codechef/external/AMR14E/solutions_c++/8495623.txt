/*
    ***************************************************************************************************************
     
                              Author : SUBHENDU SETHI
                              Codechef Handle: subhendu_sethi
                              SPOJ Handle: codekatte
                              Codeforces Handle: subhendu_sethi
                              UVA Handle: codekatte
     
    **************************************************************************************************************
    */
    #include <bits/stdc++.h>
    #define ll long long int
    #define LD long double
    #define si(x) scanf("%lld",&x)
    #define sl(x) scanf("%lld",&x)
    #define sd(x) scanf("%lf",&x)
    #define sc(x) scanf("%c",&x)
    #define ss(x) scanf("%s",x)
    #define vl vector<ll>
    #define vi vector<int>
    #define vvl vector< vl >
    #define vvi vector< vi >
    #define ii pair<int,int>
    #define pb push_back
    #define mp make_pair
    #define F first
    #define S second
    #define MOD 1299709
    #define MOD1 1000000000
    #define mem(x,y) memset(x,y,sizeof(x))
    #define f(i,a,b) for(ll i=(a);i<(b);i++)
    #define max_int_value 2147483647
    #define max_long_value 9223372036854775807
    #define FOR( gg,itit )  for( auto itit=gg.begin();itit!=gg.end();itit++ )
    #define ub(X,v) upper_bound(X.begin(),X.end(),v)
    #define lb(X,v) lower_bound(X.begin(),X.end(),v)
    #define cons 5000
    #define MAXN 250000
    #define gc getchar_unlocked
    using namespace std;
bool isPrime[10000];
void init()
{
    // Since range is very small so not used Sieve
    for (int i = 2; i < sizeof(isPrime); ++i) {
        int j = 2;
        for (; j * j <= i; ++j) {
            if (i % j == 0) {
                break;
            }
        }
        if (j * j > i) isPrime[i] = true;
    }
}

main()
{
    init();
    int testCases, divisors[1000005];
    scanf("%d", &testCases);
    while(testCases--) {
        long long L, R;
        scanf("%lld%lld", &L, &R);
        for(long long i=L; i<=R; i++) divisors[i-L] = 0; //Initialize divisors of all numbers to 0
        for(long long i=1; i*i <= R; i++) { // Iterate through 1 to sqrt(R)
            long long square = i*i;
            // j starts with first number in range [L, R] which is multiple of i
            for(long long j=( (L-1) / i + 1) * i; j <= R; j += i) {
                // Factors under consideration are i and j / i 
                if (j < square) continue; // Already counted because of 2 in else condition below
                if( square == j ) // Just 1 factor
                    divisors[j-L] += 1;
                else divisors[j-L] += 2; // Counting factors i and j / i
            }
        }
        int ans = 0;
        for(long long i = L; i <= R; i++) if(isPrime[divisors[i-L]]) ans++;
        printf("%d\n",ans);
    }
}   