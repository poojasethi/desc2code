#include <iostream>
#include <math.h>
#include <bits/stdc++.h>
using namespace std;
int ans[100000];
int ctr1 = 0;
int f = 1;
bool pm[100000];
int sieve(long long int L,long long int U) {
    int ctr = 0;
	int i,j,d;
    d=U-L+1; /* from range L to U, we have d=U-L+1 numbers. */
    /* use flag[i] to mark whether (L+i) is a prime number or not. */
    bool *flag=new bool[d];
    for (i=0;i<d;i++)
        flag[i]=true; /* default: mark all to be true */
    for (i=(L%2!=0);i<d;i+=2)
        flag[i]=false;
    /* sieve by prime factors staring from 3 till sqrt(U) */
    for (i=3;i<=sqrt(U);i+=2)
    {
        if (i>L && !flag[i-L])
        continue;
    /* choose the first number to be sieved -- >=L,
    divisible by i, and not i itself! */
        j=L/i*i;
        if (j<L)
            j+=i;
        if (j==i)
            j+=i; /* if j is a prime number, have to start form next
                    one */
        j-=L; /* change j to the index representing j */
        for (;j<d;j+=i) flag[j]=false;
    }
    if (L<=1)
        flag[1-L]=false;
    if (L<=2)
        flag[2-L]=true;
    for (i=0;i<d;i++) {
        if (flag[i] && f == 0)
            ctr++;
        else if (flag[i] && f) {
        	ans[ctr1++] = L+i;
        	pm[L+i] = 1;
        }
    }
    f = 0;
	return ctr;
}
main()
{
	long long int t,a,b;
	cin>>t;
	memset(pm,0,sizeof(pm));
	int k = sieve(1,100000);
	vector <long long int> kiwi;
	int ff = 0;
	for (int i = 0;i < ctr1; i++)
	{
		long long int j = ans[i];
		long long int temp = ans[i];
		ff = 3;
		while ((j*ans[i]) <= 1000000000)
		{
			j = j*ans[i];
			if (pm[ff] == 1) {
			kiwi.push_back(j);
			}
			ff++;
		}
	}
	int len = kiwi.size();
//	cout << ctr1 << endl;
	while(t--)
	{
		cin>>a>>b;
		int num = sieve(a,b);
		for (int i = 0; i < len; i++)
		{
			if (kiwi[i] >= a && kiwi[i] <= b)
				num++;
		}
		cout << num << endl;
	}
}