# include <bits/stdc++.h>
using namespace std;
vector <long long int> sieve;

static long long int N=1e9+5;
static long long int mark[100005];
static long long int used[2000005];

void solve()
     {
     memset(mark,0,sizeof(mark));
     long long int i,j,k=2,mx=sqrt(N);
     while (k<=mx)
           {
           mark[k]=1;
           sieve.push_back(k);
           for(j=2*k; j<=mx; j+=k)
              mark[j]=1;
           for(j=k+1; j<=mx and mark[j]; j++);
           k=j;
           }
     }

long long int segmented_sieve (long long int a,long long int b)
     {
     memset(used,0,sizeof(used));
     long long int r=sqrt(b),p,q,p2,q2,ans=0,z=0;
     long long int h=upper_bound(sieve.begin(),sieve.end(),r)-sieve.begin();
     //cout<<h<<sieve.size();
     for (long long int i=0; i<h; i++)
         {
         long long int cnt=0;
         p=a/sieve[i]; q=p*sieve[i]; if(q<a) q+=sieve[i];
         
         for(long long int j=q-a; j<=b-a; j+=sieve[i])
                  if ((a+j)%sieve[i]==0 and (a+j)!=sieve[i] and used[j]==0)
                     {
                     cnt++;
                     used[j]=1;
                     }

         z+=cnt;
         long long int y=sieve[i],x=1;
         while (y<=b)
               {
               if (y>=a and x>1)
                  {
                  long long int f=lower_bound(sieve.begin(),sieve.end(),x+1)-sieve.begin();
                  if(sieve[f]==x+1) ans++;
                  }
               y*=sieve[i];
               x++;
               }
         //cout<<sieve[i]<<" "<<z<<" "<<ans<<"\n";
         }
     ans=ans+(b-a+1-z);
         
     return ans;
     }


int main()
    {
    solve();
    long long int t,a,b,i,j,k;
    cin>>t;
    while(t--)
              {
              cin>>a>>b;
              if (a==1) a++;
              long long int ans=segmented_sieve(a,b);
              cout<<ans<<"\n";
              }
    return 0;
    }