#include <stdio.h>
#include <cmath>

using namespace std;

bool sieve[200005];
int primes[10000];
static int isprime[35000];

void init_primes()
{
    int i, j;
    for(i=0; i<35000; i++)
        isprime[i]=1;
    for(i=2; i<35000; i++)
    {
        if(isprime[i])
        {
            for(j=2*i; j<35000; j+=i)
                isprime[j]=0;
        }
    }
    i=0;
    for(j=2; j<35000; j++)
        primes[i++]=j;
}

void SieveOfEratosthenes(int low, int high)
{
    int i=0, j, p;
    for(j=0; j<=(high-low); j++)
        sieve[j]=1;
    while(primes[i]*primes[i]<=high)
    {
        p=(low/primes[i])*primes[i];
        if(p<low)
            p+=primes[i];
        if(p==primes[i])
            p+=primes[i];
        while(p<=high)
        {
            sieve[p-low]=0;
            p+=primes[i];
        }
        i++;
    }
}

int f1(int q)
{
    int i, ans=1;
    for(i=1; i<sqrt(q); i++)
    {
        if(q%i==0)
            ans+=2;
    }
    return ans;
}

int is_prime(int a)
{
    if(a==2 || a==3 || a==5 || a==7)
        return 1;
    if(a==1 || a%2==0)
        return 0;
    int i;
    for(i=3; i<=sqrt(a); i+=2)
    {
        if(a%i==0)
            return 0;
    }
    return 1;
}


int main()
{
    int t, p, q, x, a, b, i, ans;
    scanf("%d", &t);
    init_primes();
    while(t--)
    {
        ans=0;
        scanf("%d %d", &a, &b);
        SieveOfEratosthenes(a, b);
        for(i=a; i<=b; i++)
        {
            if(sieve[i-a])
                ans++;
        }
        //cout<<p;
        p=sqrt(a);
        if(p*p<a)
            p++;
        while((p*p>=a) and (p*p<=b))
        {
            q=p*p;
            x=f1(q);
            if(is_prime(x)==1)
            {
                ans++;
                //cout<<x<<endl;
            }
            p++;
        }

        printf("%d\n", ans);
    }

    return 0;
}
