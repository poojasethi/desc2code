#include<bits/stdc++.h>
#define MOD 1000000007
#define pb push_back
using namespace std;
int prime[100000];
int sprime[100000];
vector<int>f[10005];
vector<int> v;
int k=0;
int cnt[100000];
int mx[100000];
void sieve() {
    prime[0]=prime[1]=1;
    for(int i=2;i<=100000;i++) {
        if(!prime[i]) {
            for(int j=2*i;j<=100000;j+=i) {
                prime[j]=1;
            }
        }
    }
    for(int i=2;i<=100000;i++) {
        if(!prime[i])
            sprime[k++]=i;
    }
}
int main() {

    sieve();
    int t;scanf("%d",&t);
    while(t--) {
        v.clear();
        memset(cnt,0,sizeof(cnt));
        memset(mx,0,sizeof(mx));
        int n;scanf("%d",&n);
        int a[n+1];
        for(int i=1;i<=n;i++) {
            scanf("%d",&a[i]);
            f[i].clear();
            int x=a[i];
            int s=sqrt(x);
            for(int j=0;sprime[j]<=s;j++) {
                if(j>=k)
                    break;
                if(x%sprime[j]==0) {
                    f[i].pb(sprime[j]);
                    v.pb(sprime[j]);
                }
                while(x%sprime[j]==0)
                    x/=sprime[j];
            }
            if(x>1) {
                f[i].pb(x);
                v.pb(x);
            }
        }
        v.pb(MOD);
        sort(v.begin(),v.end());
        v.erase(unique(v.begin(),v.end()),v.end());
        for(int i=1;i<=n;i++) {
            for(int j=f[i].size()-1;j>=0;j--) {
               int p=f[i][j];
               int x=lower_bound(v.begin(),v.end(),p)-v.begin();
               cnt[x]++;
               mx[x]=max(mx[x],cnt[x]);
            }
            if(i>1) {
                for(int j=0;j<v.size() && v[j]<=a[i];j--) {
                    if(a[i]%v[j]!=0){
                        int x=lower_bound(v.begin(),v.end(),v[j])-v.begin();
                        cnt[x]=0;
                    }
                }
            }
        }
        int q;scanf("%d",&q);
        while(q--) {
            int k;
            scanf("%d",&k);
            if(k==1) {
                printf("%d\n",n);
                continue;
            }
            int r=lower_bound(v.begin(),v.end(),k)-v.begin();
            if(v[r]==k) {
               printf("%d\n",mx[r]);
            }
            else {
                printf("0\n");
            }
        }
    }
    return 0;
}
