#include <string.h>
#include <math.h>
#include <limits.h>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <map>
#include<cstdio>
#include<cstring>
#include<vector>
#include<complex>
#define _USE_MATH_DEFINES//M_PI

// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%I64d",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
#define p(n)                       printf("%d\n",n)
#define pc(n)                       printf("%c\n",n)
#define ps(n)                       printf("%s\n",n)
#define pf(n)                       printf("%lf\n",n)
#define pl(n)                      printf("%I64d\n",n)

// Useful constants
#define INF                         (int)1e9
#define EPS                         1e-9

// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd

// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(i=a;i<b;i++)
#define foralle(i,a,b)               for(i=a;i<=b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define mp                          make_pair

// Some common useful functions
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
#define DREP(a)                      sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())
//#include <conio.h>

using namespace std;
static int a[100000];
void findfac(int a[],int m,int n,int count);
int main(int argc, char *argv[])
{
    int t;
    s(t);
    while(t--)
     {
              int n;
              s(n);
              a[0]=1;
              findfac(a,1,n+1,1);
     }
    
    //getch();
    return 0;
}
void findfac(int a[],int m,int n,int count)
{
     int x;
    int temp=0;
    int i=0;
    int flag=1; 
    if(count<n)
     {
               x=0;
               count++;
              
     }
    else
     {
        int sum=0;
        
        //p(a[0]),p(a[1]);
        //puts("here");
        for(i=m-1;i>=0;i--)
        {
                    sum=sum+a[i];       
                   // printf("%d",a[i]);
        }
        //printf("\n");
        p(sum);
        return;
     }
 
    do
     {
             
               if((i<m)&&(flag==1))
                {
                      //printf("\nhere");
                      x=a[i]*2+temp;
                      temp=x/10;
                      a[i]=x%10;
                      //printf("\na[i]:%d",a[i]);
                      i++;//essential fo rthe upper cases
                       
                }
               else if(temp>0)
                {
                    flag=0;
                      
                      a[i]=temp%10;
                      temp=temp/10;
                      //printf("\na[i]:%d",a[i]);
                      i++;
                      m++;//this means that the number of digits are increasing
                }
                
     }while(temp>0||i<m);
    
    
    findfac(a,m,n,count);
}
 
