/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}

map<int, int>m;
vector<int>graph[101];
#define gc getchar
void read(int &n) {
    n = 0;
    char ch = gc();
    while ( !isdigit(ch) ) ch=gc();
    while ( isdigit(ch) ) {
        n = n*10 + ch-48;
        ch=gc();
    }
}
void dfs(int u, int l)
{
	if(l == 2) {
		m[u]++;
		return;
	}
	int s = graph[u].size();
	rep(i, s) {
		dfs(graph[u][i], l + 1);
	}	
}

void solve()
{
	int n, p;
	read(n); read(p);
	rep(i, p) {
		int u, v; read(u); read(v);
		graph[u].pb(v);
	}
	LL ans = 0;
	for(int i = 1; i <= n; i++) {
		m.clear();
		dfs(i, 0);
		map<int, int> :: iterator it;
		for(it = m.begin(); it != m.end(); ++it) {
			if((*it).first != i) {
				ans += (1LL * ((*it).second * ((*it).second - 1)) / 2);
			}
		}
	}
	pl(ans); pn;
}

int main()
{
	int t = 1;
	//scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
