#include <bits/stdc++.h>
using namespace std;
ifstream fin;
typedef long long int ll;
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define MOD 1000000007
int main()
{
    int M,N,P,_i,_j;
    //fin.open("input.txt");
    //Take input the number of rows, columns and blocked cells
    cin>>M>>N>>P;

    //declaring a Grid array which stores the number of paths
    ll Grid[M+1][N+1];

    //Note that we'll be using 1-based indexing here.
    //initialize all paths initially as 0
    memset(Grid, 0, sizeof(Grid));

    F(i,0,P-1)
    {
        //Take in the blocked cells and mark them with a special value(-1 here)
        cin>>_i>>_j;
        Grid[_i][_j] = -1;
    }

    if(Grid[1][1] == -1)
    {
        printf("0");
        return 0;
    }
    for(int i=1;i<=M;i++) if(Grid[i][1]!=-1) Grid[i][1]=1ll; else break;
    for(int i=2;i<=N;i++) if(Grid[1][i]!=-1) Grid[1][i]=1ll; else break;


    for(int i= 2;i<=M;i++)
    for(int j= 2;j<=N;j++)
    {
         if(Grid[i][j]==-1) continue;
         if(Grid[i-1][j]!=-1) Grid[i][j] = (Grid[i][j] + Grid[i-1][j] + MOD)%MOD;;
         if(Grid[i][j-1]!=-1) Grid[i][j] = (Grid[i][j] + Grid[i][j-1] + MOD)%MOD;;
    }

    //if(Grid[M][N]>0) cout<<Grid[M][N]; else cout<<"0";
    printf("%lld",(Grid[M][N] >= 0 ? Grid[M][N] : 0));
}
