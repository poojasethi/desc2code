#include <iostream>
#include <cstring>
using namespace std;


int main()
{
int M,N,P,i,j,k;
int mod=1000000007;

cin>>M>>N>>P;
int num_way[M+1][N+1];
memset(num_way,0,sizeof(num_way));




	for(int p=0;p<P;p++)
	{
		cin>>i>>j;
		num_way[i][j]=-1;
	}



	if(num_way[1][1]==-1)
	{cout<<"0";
	return 0;
	}

// initialisation of first row ( direction is restricted to only right)

	for(k=1;k<=N;k++)
	{
	if(num_way[1][k]!=-1)
	num_way[1][k]=1;
	else
	break;
	}	


// initialisation of first column ( direction is restricted to only down)

	for(k=1;k<=M;k++)
	{
	if(num_way[k][1]!=-1)
	num_way[k][1]=1;
	else
	break;
	}

// start filling matrix num_way to find number of ways from 1,1 to m,n


	for(i=2;i<=M;i++)
	{
		for(j=2;j<=N;j++)
		{
			if(num_way[i][j]==-1)   // we dont want to calculate for blocked cells  
			continue;
			else
			{
			if(num_way[i][j-1]!=-1)
			num_way[i][j]=(num_way[i][j]+ num_way[i][j-1]) % mod ; 			
			
			if(num_way[i-1][j]!=-1)
			num_way[i][j]=(num_way[i][j]+num_way[i-1][j]) % mod ; 
			}
					
		}
	}

if(num_way[M][N]>=0)
cout<<num_way[M][N];
else
cout<<"0";

}