
#include <bits/stdc++.h>

#define LLI long long  int
#define LLU long long unsigned int
#define LI  long int
#define LU  long unsigned

#define MIN(a,b) ((b)^(((a)^(b))&-((a)<(b))))
#define BUG printf("BUGGEeee");
#define PRINT(n) printf("%d\n",n);
#define MOD 1000000007
#define POWER2(v) (v && !(v & (v - 1)))
#define PA pair<int,int>
#define PB pair<PA,int>
#define MP(a,b) make_pair(a,b)
#define PUS(x) push_back(x)


#define MAX_VAL 10000010
#define MAX_INT 999999999
#define MIN_INT -999999999
#define TO_STR(N) #N

using namespace std;






LLI MAX(LLI a,LLI b)
{
    if(a>b)return a;
    return b;
}


int  GCD(int a,int b)
{
   int x=MAX(a,b);
   int y=MIN(a,b);
    if(x%y==0)
    {
        return y;
    }
    else
    {
        return GCD(x%y,y);
    }

}


long long fast_pow(int a,int n)
{
    long long result = 1;
    long long power = n;
    long long value = a;
    while(power>0)
    {
        if(power&1)
            {result = result*value;
            result = result%MOD;}
        value = value*value;
        value = value%MOD;
        power /= 2;
        //power >>= 1;
    }
    return result;
}


int pow_k(LLI N,LLI K)
{
    int count=0;
    while(N>1)
    {
        N/=K;
        count++;
    }
    return count;
}


int count_bit(int N)
{
    int count=0;
    for(int i=0;i<32;i++)
    {
        if(N&(1<<i))
        {
            count++;
        }
    }
    return count;
}


//----------------------------------------------------------------

LLI grid[1010][1010]={0};

int main()
{
    
    ios_base::sync_with_stdio(false);
    int N,M,P;
    cin>>N>>M>>P;
    
    for(int i=0;i<P;i++)
    {
        int a,b;
        cin>>a>>b;
        grid[a][b]=-1;
    }
    for(int i=0;i<=N;i++)
    {

        if(grid[i][1]!=-1)grid[i][1]=1LL;
        else break;
    }
    for(int i=0;i<=M;i++)
    {
        //cout<<grid[1][i]<<endl;
        if(grid[1][i]!=-1)grid[1][i]=1LL;
        else break;
    }
    for(int i=2;i<=N;i++)
    {
        for(int j=2;j<=M;j++)
        {
            if(grid[i][j]==-1)continue;

            if(grid[i][j-1]>0)
            {
                grid[i][j]+=grid[i][j-1];
            }
            if(grid[i-1][j]>0)
            {
                grid[i][j]+=grid[i-1][j];
            }
            grid[i][j]%=MOD;
        }
    }
    /*for(int i=0;i<=N;i++)
    {
        for(int j=0;j<=M;j++)
        {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }*/
    cout<<((grid[N][M]%MOD)>0?(grid[N][M]%MOD):0)<<endl;
    return 0;
}
