#include <bits/stdc++.h>
using namespace std;

#define  inf 1000000000000000LL
int a[1001][1001];
long long b[1001][1001][2];
long long c[1001][1001][2];

int main()
{
    int n,m,p;
    scanf("%d%d%d",&n,&m,&p);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    b[1][1][0]=b[1][1][1]=a[1][1];
    for(int i=2;i<=m;i++)
    {
        b[1][i][0]=b[1][i-1][0]+a[1][i];
        b[1][i][1]=-inf;
    }
    for(int i=2;i<=n;i++)
    {
        b[i][1][0]=-inf;
        b[i][1][1]=b[i-1][1][1]+a[i][1];
    }
    for(int i=2;i<=n;i++)
    {
        for(int j=2;j<=m;j++)
        {
            b[i][j][0]=a[i][j]+max(b[i][j-1][0],b[i][j-1][1]);
            b[i][j][1]=a[i][j]+max(b[i-1][j][0],b[i-1][j][1]);
        }
    }
    c[n][m][0]=c[n][m][1]=a[n][m];
    for(int i=n-1;i>=1;i--)
    {
        c[i][m][0]=-inf;
        c[i][m][1]=a[i][m]+c[i+1][m][1];
    }
    for(int i=m-1;i>=1;i--)
    {
        c[n][i][0]=a[n][i]+c[n][i+1][0];
        c[n][i][1]=-inf;
    }
    for(int i=n-1;i>=1;i--)
    {
        for(int j=m-1;j>=1;j--)
        {
            c[i][j][0]=a[i][j]+max(c[i][j+1][0],c[i][j+1][1]);
            c[i][j][1]=a[i][j]+max(c[i+1][j][0],c[i+1][j][1]);
        }
    }
    long long d=max(b[n][m][0],b[n][m][1]);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(i-1>=1)
            {
                d=max(d,b[i][j][0]+c[i-1][j][0]-p);
                d=max(d,b[i][j][0]+c[i-1][j][1]-p-a[i][j]);
            }
            if(j-1>=1)
            {
                d=max(d,b[i][j][0]+c[i][j-1][1]-p-a[i][j-1]);
            }
        }
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(j-1>=1)
            {
                d=max(d,b[i][j][1]+c[i][j-1][1]-p);
                d=max(d,b[i][j][1]+c[i][j-1][0]-p-a[i][j]);
            }
            if(i-1>=1)
            {
                d=max(d,b[i][j][1]+c[i-1][j][0]-p-a[i-1][j]);
            }
        }
    }
    cout<<d<<endl;
}
