import java.io.*;
import java.util.StringTokenizer;

import static java.lang.Math.max;

public class Main {
    private final InputReader in;
    private final PrintWriter out;

    public Main(final InputReader in, final PrintWriter out) {
        this.in = in;
        this.out = out;
    }

    private static PrintWriter getOutput(final String filename) throws IOException {
        if (filename == null || filename.isEmpty()) {
            return new PrintWriter(new OutputStreamWriter(System.out));
        } else {
            return new PrintWriter(new FileWriter(filename + ".out"));
        }
    }

    public static void main(final String[] args) throws NumberFormatException, IOException {
        final String filename = "";
        final long time = System.currentTimeMillis();
        try (final InputReader in = new InputReader(filename); final PrintWriter out = getOutput(filename)) {
            new Main(in, out).solve();
        }
//        System.err.println("Running time: " + (System.currentTimeMillis() - time));
    }

    private void solve() throws IOException {
        final int n = in.nextInt();
        final int m = in.nextInt();
        final long p = in.nextLong();
        final long[][] field = new long[n][m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                field[i][j] = in.nextInt();

        final long[][] dp1 = new long[n][m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if (i == 0 && j == 0)
                    dp1[i][j] = field[i][j];
                else if (i == 0)
                    dp1[i][j] = field[i][j] + dp1[i][j - 1];
                else if (j == 0)
                    dp1[i][j] = field[i][j] + dp1[i - 1][j];
                else
                    dp1[i][j] = field[i][j] + max(dp1[i - 1][j], dp1[i][j - 1]);

        final long[][] dp2 = new long[n][m];
        for (int i = n - 1; i >= 0; i--)
            for (int j = m - 1; j >= 0; j--)
                if (i == n - 1 && j == m - 1)
                    dp2[i][j] = field[i][j];
                else if (i == n - 1)
                    dp2[i][j] = field[i][j] + dp2[i][j + 1];
                else if (j == m - 1)
                    dp2[i][j] = field[i][j] + dp2[i + 1][j];
                else
                    dp2[i][j] = field[i][j] + max(dp2[i + 1][j], dp2[i][j + 1]);

        assertTrue(dp1[n - 1][m - 1] == dp2[0][0]);
        long result = dp1[n - 1][m - 1];

        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++) {
                //14
                //2.
                if (i < n - 1 && j < m - 1)
                    result = max(result, dp1[i][j] + dp2[i][j + 1] + field[i + 1][j] - p);
                //.34
                //12.
                if (i < n - 1 && j > 0 && j < m - 1)
                    result = max(result, dp1[i + 1][j - 1] + dp2[i][j + 1] + field[i][j] + field[i + 1][j] - p);
                //.3
                //12
                if (i < n - 1 && j > 0)
                    result = max(result, dp1[i + 1][j - 1] + dp2[i + 1][j] + field[i][j] - p);
                //12
                //4.
                if (i < n - 1 && j < m - 1)
                    result = max(result, dp1[i][j] + dp2[i + 1][j] + field[i][j + 1] - p);
                //.1
                //32
                //4.
                if (i > 0 && i < n - 1 && j < m - 1)
                    result = max(result, dp1[i - 1][j + 1] + dp2[i + 1][j] + field[i][j] + field[i][j + 1] - p);
                //.1
                //32
                if (i > 0 && j < m - 1)
                    result = max(result, dp1[i - 1][j + 1] + dp2[i][j + 1] + field[i][j] - p);
            }

        out.println(result);
    }

    private void assertTrue(final boolean t) {
        if (!t) throw new RuntimeException();
    }
}

class InputReader implements Closeable {
    private StringTokenizer st;
    private final BufferedReader in;

    public InputReader(final String filename) throws IOException {
        if (filename == null || filename.isEmpty())
            in = new BufferedReader(new InputStreamReader(System.in));
        else
            in = new BufferedReader(new FileReader(filename + ".in"));
    }

    public boolean hasNextToken() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String line = in.readLine();
            if (line == null)
                return false;
            st = new StringTokenizer(line);
        }
        return true;
    }

    public String nextToken() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String line = in.readLine();
            if (line == null)
                return null;
            st = new StringTokenizer(line);
        }
        return st.nextToken();
    }

    public String readLine() throws IOException {
        return in.readLine();
    }

    public int nextInt() throws NumberFormatException, IOException {
        return Integer.parseInt(nextToken());
    }

    public long nextLong() throws NumberFormatException, IOException {
        return Long.parseLong(nextToken());
    }

    public double nextDouble() throws NumberFormatException, IOException {
        return Double.parseDouble(nextToken());
    }

    @Override
    public void close() throws IOException {
        in.close();
    }
}