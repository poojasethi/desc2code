
//~        Author : Sarvesh Mahajan                             
//               IIIT,Hyderabad                                   
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef ONLINE_JUDGE
#define DEBUG
#endif

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define For(i,a,b) for(i=a;i<b;i++)
#define loop(i,b) for(i=0;i<b;i++)
#define Loop(i,b) for(i=1;i<=b;i++)
#define pi(n) cout<<n<<' '
#define si(n) cin>>n
#define int long long 
const int MOD=1e9+7;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;
#define F first
#define S second
#define sz(x) (int) x.size()
#define pLL(x) cout<<x<<' '
#define fill(x,c) memset(x,c,sizeof(x))
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#ifdef DEBUG
#define DB(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DB2(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DB3(x, y, z)       cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl;
#else
#define DB(x)
#define DB2(x,y)
#define DB3(x,y,z)
#endif


const int N=1e3+5;
int n,m;
inline bool ok(int x,int y)
{
	if(x<0 or x>=n) return 0;
	if(y<0 or y>=m) return 0;
	return 1;
}

int from[N][N],to[2][N][N],a[N][N];
const int inf=1e16;

#undef int
int main()
{
#define int long long
ios_base::sync_with_stdio(false);
int t,l,k,ans,i,j,res=0,fl;
t=1;
int T=t;


int p;



Loop(t,T)
{
	cin>>n>>m>>p;
	loop(i,n)
		loop(j,m)
		cin>>a[i][j];

	to[0][0][0]=to[1][0][0]=a[0][0];
	Loop(i,n-1)
	{
		to[1][i][0]=to[1][i-1][0]+a[i][0];
		to[0][i][0]=-inf;
	}

	Loop(i,m-1)
	{
		to[0][0][i]=to[0][0][i-1]+a[0][i];
		to[1][0][i]=-inf;
	}

	Loop(i,n-1)
		Loop(j,m-1)
		{
			// from left
			to[0][i][j]=a[i][j]+max(to[0][i][j-1],to[1][i][j-1]);
			// from top
			to[1][i][j]=a[i][j]+max(to[0][i-1][j],to[1][i-1][j]);
		}


	DB("L")

/*	loop(i,n)
	{
		loop(j,m)
		cout<<to[i][j]<<' ';
	         cout<<"\n";
	}*/
	from[n-1][m-1]=a[n-1][m-1];
	for(i=n-2;i>=0;--i)
			from[i][m-1]=from[i+1][m-1]+a[i][m-1];
		

	for(i=m-2;i>=0;--i)
		from[n-1][i]=from[n-1][i+1]+a[n-1][i];


	for(i=n-2;i>=0;--i)
		for(j=m-2;j>=0;--j)
		from[i][j]=a[i][j]+max(from[i][j+1],from[i+1][j]);
		
		



	/*loop(i,n)
	{
		loop(j,m)
		cout<<to[i][j]+from[i][j]-a[i][j]<<' ';
	         cout<<"\n";
	}*/

	int res=max(to[0][n-1][m-1],to[1][n-1][m-1]);

	loop(i,n)
	{
		loop(j,m)
		{
			// left at (i,j)
			if(ok(i,j-1))
			{
			// case 1: left is already visited
			res=max(res,-p+to[0][i][j]+from[i][j]-a[i][j]);
			if(ok(i+1,j-1))
			res=max(res,-p+to[0][i][j]+from[i+1][j-1]);
			// case 2: left is not visited
			res=max(res,-p+to[1][i][j]+a[i][j-1]+from[i][j]-a[i][j]);
			if(ok(i+1,j-1))
			res=max(res,-p+to[1][i][j]+a[i][j-1]+from[i+1][j-1]);

			}		

			// up at i,j

			if(ok(i-1,j))
			{
				// up is already visited
				res=max(res,-p+to[1][i][j]+from[i][j]-a[i][j]);
				if(ok(i-1,j+1))
				res=max(res,-p+to[1][i][j]+from[i-1][j+1]);

				// not visited
				res=max(res,-p+to[0][i][j]+a[i-1][j]+from[i][j]-a[i][j]);
				if(ok(i-1,j+1))
				res=max(res,-p+to[0][i][j]+a[i-1][j]+from[i-1][j+1]);
				
			}
		}
	}

	cout<<res<<'\n';
}


return 0;
}
