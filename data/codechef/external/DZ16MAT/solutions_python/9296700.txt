#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
#define pb push_back
#define mp make_pair
#define f first
#define sc second
#define pii pair<int,int>
#define M 1000000007
const LL inf=200000000000;
#define all(o) (o).begin(), (o).end()
/*#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;*/
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * (b / gcd(a, b))); }
LL max(LL a,LL b,LL c){return max(a,max(b,c));}
inline LL power(LL x,LL y)
{
    LL ans=1;
    while(y>0){
        if(y&1)
            ans=(ans*x)%M;
        x=(x*x)%M;
        y/=2;
    }
    return ans;
}
inline int read()
{
	int ret = 0,temp=1;
	int c = getchar_unlocked();
	while(c<'0' || c>'9'){
		c = getchar_unlocked();
	}
	while(c>='0' && c<='9')
	{
		ret = (ret<<3) + (ret<<1) + c - '0';
		c = getchar_unlocked();
	}
        return ret;
}
LL mulmod(LL a,LL b) {
   long double res = a;
   res *= b;
   LL c = (LL)(res / M);
   a *= b;
   a -= c * M;
   a %= M;
   if (a < 0) a += M;
   return a;
}
const int N=1005;
LL a[N][N];
LL dp1[N][N],dp2[N][N];
int main()
{
  int n,m,p;
  scanf("%d %d %d",&n,&m,&p);
  for(int i=1;i<=n;i++) for(int j=1;j<=m;j++) scanf("%lld",&a[i][j]);
  for(int i=0;i<=n+1;i++){
    for(int j=0;j<=m+1;j++){
      dp1[i][j]=-inf;
      dp2[i][j]=-inf;
    }
  }
  for(int i=1;i<=n;i++){
    for(int j=1;j<=m;j++){
      if(i==1 && j==1){
        dp1[i][j]=a[i][j];
      }
      else
      dp1[i][j]=max(dp1[i-1][j],dp1[i][j-1])+a[i][j];
    }
  }
  for(int i=n;i>=1;i--){
    for(int j=m;j>=1;j--){
      if(i==n && j==m) dp2[i][j]=a[i][j];
      else
      dp2[i][j]=max(dp2[i+1][j],dp2[i][j+1])+a[i][j];
    }
  }
  LL ans=dp1[n][m];
  //printf("%lld\n",ans);
 // printf("%lld %lld\n",dp1[2][2],dp2[1][3]);
  for(int i=2;i<=n;i++){
    for(int j=2;j<=m;j++){
          if(dp1[i-1][j]>dp1[i][j-1]){
            LL k=dp1[i][j]-p;
            k+=a[i][j-1];
            k+=max(dp2[i+1][j-1],dp2[i][j]-a[i][j]);
            ans=max(k,ans);
            k=dp1[i][j]-p;
            k+=dp2[i-1][j+1];
            ans=max(k,ans);

          }
          else
          {
            LL k=dp1[i][j]-p;
            k+=a[i-1][j];
            k+=max(dp2[i-1][j+1],dp2[i][j]-a[i][j]);
            ans=max(k,ans);
            k=dp1[i][j]-p;
            k+=dp2[i+1][j-1];
            ans=max(ans,k);
          }
          //printf("%lld %d %d\n",k,i,j);
          
    }
  }
  printf("%lld\n",ans);
  return 0;
}
