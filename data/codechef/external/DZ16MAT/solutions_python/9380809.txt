//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef pair<ll, int> pli;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2, mod);
}


int r, c;
ll p, arr[1005][1005], DP1[1005][1005], DP2[1005][1005];


int main()
{
    // ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    //http://codeforces.com/blog/entry/23190

    scanf("%d%d%lld", &r, &c, &p);
    for(int i=1;i<=r;i++)
        for(int j=1;j<=c;j++){
            scanf("%lld", &arr[i][j]);
        }

    for(int i=1;i<=r;i++)
        for(int j=1;j<=c;j++)
            if(i == 1)  DP1[i][j] = DP1[i][j-1]+arr[i][j];
            else if(j == 1) DP1[i][j] = DP1[i-1][j]+arr[i][j];
            else    DP1[i][j] = arr[i][j] + max(DP1[i-1][j], DP1[i][j-1]);
    for(int i=r;i>=1;i--)
        for(int j=c;j>=1;j--)
            if(i == r)  DP2[i][j] = DP2[i][j+1]+arr[i][j];
            else if(j == c) DP2[i][j] = DP2[i+1][j]+arr[i][j];
            else    DP2[i][j] = arr[i][j] + max(DP2[i+1][j], DP2[i][j+1]);

// cout<<"DP1\n";
// for(int i=1;i<=r;i++){
//     for(int j=1;j<=c;j++)   cout<<DP1[i][j]<<" ";cout<<endl;
// }cout<<endl;
// cout<<"DP2\n";
// for(int i=1;i<=r;i++){
//     for(int j=1;j<=c;j++)   cout<<DP2[i][j]<<" ";cout<<endl;
// }cout<<endl;

    ll ans = DP1[r][c];
// cout<<ans<<endl;
    for(int i=1;i<=r;i++)
        for(int j=1;j<=c;j++){
            
            //from left, to left, to bottom
            if(j>1 && i<r) ans = max(ans, DP1[i][j-1]-p+arr[i][j]+DP2[i+1][j-1]);

            //from left, to top, to right
            if(j>1 && i>1 && j<c)  ans = max(ans, DP1[i][j-1]+arr[i][j]-p+arr[i-1][j]+DP2[i-1][j+1]);

            //from left, to top, to bottom
            if(j>1 && i>1)  ans = max(ans, DP1[i][j-1]-p+arr[i-1][j]+DP2[i][j]);

            //from top, to top, to right
            if(i>1 && j<c) ans = max(ans, DP1[i-1][j]-p+arr[i][j]+DP2[i-1][j+1]);

            //from top, to left, to bottom
            if(i>1 && j>1 && i<r)   ans = max(ans, DP1[i-1][j]+arr[i][j]-p+arr[i][j-1]+DP2[i+1][j-1]);

            //from top, to left, to right
            if(i>1 && j>1)  ans = max(ans, DP1[i-1][j]-p+arr[i][j-1]+DP2[i][j]);
    // cout<<"after "<<i<<" "<<j<<" ans = "<<ans<<endl;
        }

    printf("%lld", ans);
    return 0;
}










