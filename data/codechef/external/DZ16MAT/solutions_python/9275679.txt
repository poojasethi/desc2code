#include <bits/stdc++.h>
using namespace std;

#define ll long long
const int N = 1e3 + 5;
const long long INF = 1e12 + 5;

ll prefix[N][N], suffix[N][N];
int A[N][N], dir[N][N];

int main(){

    for(int i = 0; i < N; i++)
        for(int j =0; j < N; j++)
            prefix[i][j] = suffix[i][j] = -INF;

    int n, m, p;
    scanf("%d %d %d", &n, &m, &p);
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            scanf("%d", &A[i][j]);
    prefix[1][1] = A[1][1];
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            if(i == 1 and j == 1)    continue;
            prefix[i][j] = max(prefix[i - 1][j], prefix[i][j - 1]) + A[i][j];
            if(prefix[i - 1][j] > prefix[i][j - 1]) dir[i][j] = 0;
            else if(prefix[i - 1][j] < prefix[i][j - 1])   dir[i][j] = 1;
            else dir[i][j] = 2;
        }
    }
    suffix[n][m] = A[n][m];
    for(int i = n; i >= 1; i--){
        for(int j = m; j >= 1; j--){
            if(i == n and j == m)   continue;
            suffix[i][j] = max(suffix[i + 1][j], suffix[i][j + 1]) + A[i][j];
        }
    }

    ll ans = prefix[n][m];
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            if(i == 1 and j == 1)  continue;
            ans = max(ans, prefix[i - 1][j] + A[i][j] + suffix[i - 1][j + 1] - p);
            ans = max(ans, prefix[i - 1][j] + A[i][j] + A[i][j - 1] + max(suffix[i][j] - A[i][j], suffix[i + 1][j - 1]) - p);
            ans = max(ans, prefix[i][j - 1] + A[i][j] + suffix[i + 1][j - 1] - p);
            ans = max(ans, prefix[i][j - 1] + A[i][j] + A[i - 1][j] + max(suffix[i][j] - A[i][j], suffix[i - 1][j + 1]) - p);
        }
    }
    cout<<ans;
}
