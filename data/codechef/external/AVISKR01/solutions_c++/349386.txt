#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long int64;
const int mod=1000000007,oo=1000000000;
#define INLINE inline __attribute__((always_inline))

const int maxV=300000,maxP=30000;
int lcm[maxV+10];
void init() {
    static int prime[maxP],nPrime=0;
	static int p[maxV+10];
	for(int i=2;i<=maxV;i++) {
		if(p[i]==0) {
			prime[++nPrime]=i;
			p[i]=nPrime;
		}
		for(int pi=1;pi<=nPrime;pi++) {
			int pp=prime[pi],mul=i*pp;
			if(mul>maxV)
			    break;
			p[mul]=pi;
			if(p[i]==pi)
			    break;
		}
	}

	static int powP[maxP];
	for(int i=1;i<=nPrime;i++)
	    powP[i]=1;

	lcm[0]=1;
	for(int i=1;i<=maxV;i++) {
		lcm[i]=lcm[i-1];
		for(int ii=i;ii>1;) {
			int pi=p[ii],pp=prime[pi];
			int pow=1;
			do ii/=pp,pow*=pp;
			while(ii%pp==0);

			if(pow>powP[pi]) {
			    lcm[i]=(int64)lcm[i]*(pow/powP[pi])%mod;
			    powP[pi]=pow;
			}
		}
		//printf("%d : %d\n",i,lcm[i]);
	}
}

const int maxN=100100;
struct STNode {
	int add,max,min;
};
STNode st[262144];
INLINE void st_upd(int id) {
	st[id].max=max(st[id*2].max,st[id*2+1].max);
	st[id].min=min(st[id*2].min,st[id*2+1].min);
}
INLINE void st_apply(int id,int val) {
	st[id].add+=val;
	st[id].max+=val;
	st[id].min+=val;
}
INLINE void st_pre(int id) {
	if(st[id].add) {
		st_apply(id*2,st[id].add);
		st_apply(id*2+1,st[id].add);
		st[id].add=0;
	}
}
int A[maxN];
void st_init(int id,int L,int R) {
    st[id].add=0;
	if(L==R) {
		st[id].min=st[id].max=A[L];
		return;
	}
	int M=(L+R)/2;
	st_init(id*2,L,M);
	st_init(id*2+1,M+1,R);
	st_upd(id);
}
int st_sL,st_sR,st_val,st_mi,st_ma;
void st_add(int id,int L,int R) {
	//printf("%d %d %d %d %d %d\n",id,L,R,st_sL,st_sR,st_val);
	if(st_sR<L||R<st_sL)
	    return;
	if(st_sL<=L&&R<=st_sR) {
		st_apply(id,st_val);
		return;
	}
	st_pre(id);
	int M=(L+R)/2;
	st_add(id*2,L,M);
	st_add(id*2+1,M+1,R);
	st_upd(id);
}
void st_get(int id,int L,int R) {
	if(st_sR<L||R<st_sL)
	    return;
	if(st_sL<=L&&R<=st_sR) {
		st_ma=max(st_ma,st[id].max);
		st_mi=min(st_mi,st[id].min);
		return;
	}
	st_pre(id);
	int M=(L+R)/2;
	st_get(id*2,L,M);
	st_get(id*2+1,M+1,R);
}
int main() {
	init();
	lcm[0]=0;
	
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
	    scanf("%d",A+i);

	st_init(1,1,n);

	while(m--) {
		int cmd,L,R;
		scanf("%d%d%d",&cmd,&L,&R);
		
		L++,R++;
		st_sL=L,st_sR=R;
		if(cmd==0) {
			scanf("%d",&cmd);
			st_val=cmd,st_add(1,1,n);
		} else {
			st_mi=oo,st_ma=-1,st_get(1,1,n);
			//printf("mi=%d(%d) ma=%d\n",st_mi,st_mi2,st_ma);
			printf("%d\n",(cmd==1)?lcm[st_ma]:lcm[st_mi]);
		}
	}
	scanf("%*s");
}
