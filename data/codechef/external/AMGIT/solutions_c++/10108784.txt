#include<bits/stdc++.h>
using namespace std;
const int  N = 2e5+5;
string str;
map<string,int> Map;
map<string,int> G[N];
int oo[N];
void parse(string &s,vector<string>&v)
{
    for(int i = 0; s[i] ; i ++ ) {
        if(s[i]=='/') s[i] = ' ';
    }
    istringstream iss(s);
    string a;
    while(iss >> a) v.push_back(a);
}

char type[10];
int cnt = 0;
int dp[N], subsize[N];
int mem[N];
int dmem[N];
void dfs(int u)
{
    int child = 0;
    for(auto a: G[u] ) {
        dfs(a.second);
        subsize[u] += subsize[a.second];
        dp[u] += dp[a.second];
        mem[u] += mem[a.second];
        dmem[u] += dmem[a.second];
        child ++;
    }
    if(child == 0) {
        dp[u] = oo[u];
        subsize[u] = 1;
        if(oo[u]) mem[u] = 1;
        else dmem[u] = 1;
        return;
        
    }
    dmem[u] = min(dmem[u], 1 + mem[u]);
    mem[u] = min(mem[u], 1 + dmem[u]);
    
}

int main()
{
    int t;
    cin>>t;
    while(t--) {
        int n;
        cin >> n;
        cnt =1 ;
        for(int i = 0 ; i < n ; i ++ ) {
            scanf("%s",type);
            getline(cin,str);
            vector<string> v;
            parse(str,v);
            int cur = 0;
            for(int i = 0; i < v.size(); i ++ ) {
                string c = v[i];
                if(G[cur].count(c) == 0) {
                    G[cur][c] = cnt ++;
                }
                cur = G[cur][c];
            }
            if(type[0]=='s') {
                oo[cur] = 1;
            }
            else oo[cur] = 0;
        }
        dfs(0);
        
        printf("%d\n",mem[0]);
        memset(oo,0,sizeof oo);
        memset(dp,0,sizeof dp);
        memset(subsize ,0 , sizeof subsize);
        for(int i = 0; i < cnt ; i ++ ) G[i].clear();
        Map.clear();
        memset(dmem,0,sizeof dmem);
        memset(mem,0,sizeof mem);
        
    }
}
