#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <map>
#include <cstring>

using namespace std;

#define si(a) scanf("%d",&a)
#define f first
#define s second
#define MAX 10005

vector<int> graph[MAX];
int dp[MAX][2],hoite_hobe[MAX];

int go(int now,int wh)
{
    if(graph[now].size()==0){
        return hoite_hobe[now]!=wh;
    }
    int &ret=dp[now][wh];
    if(ret!=-1)
        return ret;
    int tmp1=1,tmp2=0;
    int i;
    for(i=0;i<graph[now].size();i++){
        int to=graph[now][i];
        tmp1+=go(to,!wh);
        tmp2+=go(to,wh);
    }
    return ret=min(tmp2,tmp1);
}

map<string,int> all[MAX];
char str[1005];
bool vis[MAX];


void solve(void)
{
    memset(dp, -1, sizeof(dp));
    memset(vis, 0, sizeof(vis));
    int n,i,j;
    si(n);
    int cnt=1;
    char ss[20];

    for(i=0;i<n;i++){
        scanf("%s",ss);
        scanf("%s",str);
        int len=strlen(str);
        int pr = -1, prnd = 0;
        for(j=0;j<=len;j++)
            if(str[j] == '/' || j == len) {
                if(pr != -1) {
                    string x(str, pr, j-pr);
                    if(all[prnd].find(x) == all[prnd].end()) all[prnd][x] = cnt++;
                    int nd = all[prnd][x];
                    if(!vis[nd]) {
                        graph[prnd].push_back(nd);
                        //printf("add: %d to %d\n", prnd, all[x]);
                    }
                    prnd = nd;
                    vis[prnd] = true;
                }
                pr = j+1;
            }
        hoite_hobe[prnd] = !strcmp(ss, "stage");
    }
/*
    for(map <string, int>::iterator it = all.begin(); it != all.end(); it++) {
        printf("%s %d\n", it->f.c_str(), it->s);
    }
*/
    printf("%d\n", go(0, 0));
    //cout<<endl;
    for(i = 0; i < cnt; i++) {
        graph[i].clear();
        all[i].clear();
    }
}

int main()
{
    //freopen("inp.txt", "r", stdin);
    int t;
    si(t);
    while(t--) solve();

    return 0;
}
