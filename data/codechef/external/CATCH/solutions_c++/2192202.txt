#include<stdio.h>

// author k1e13

// quick algo : Simply stated the task is nothing but to code

// Longest Increasing Subsequence Problem

// If you have not coded it before or have a problem about it , I would like to suggest that you go through this 
// awesome stuff by MIT : 

// http://people.csail.mit.edu/bdean/6.046/dp/

// Deep Review : Probably the best way to convince a person that the given question demands nothing but

// coding Longest Increasing Subsequence , is to ask him/her about the following special casses

// as in how many balls can be caught in which the heights are like : 1 , 2 , 5 , 9 , 15

// answer is all since we can always catch a ball withought sacrificing another as the balls come in 

// increasing heights

// now what about this sequence : 7 , 5 , 2 , 1 , 0

// answer is 1 as no matter what you do , once you raise your bucket for catching even one ball ( which is the

// proposed maximum ) you are surely going to miss all the others as others come in decreasing heights 
// and you are not allowed to lower the bucket

// hence the problem boils down to determining the longest possible increasing "Subsequence"( note there is a
// big difference between an increasing Subsequence and a sequence as the sequence must be CONTINUOUS : ai , a(i+1) , a(i+2) , .., but 
// subsequence need not be as in : a1 , a5 , a8 , a17 :D)
//which one can follow to catch the balls

// in that particular ordering as the subsequence says

// also , I would suggest you to go through the O(n logn) solution for the same problem

// as though the O(n^2) solution suffices the constratints but the O(n logn) solution may come handy some times as well


int main(){

	int arr[1000] ;
	int L[1000] ;
	int T , N , i , j , max ;

	scanf("%d",&T) ;

	while(T--){
	
		scanf("%d",&N) ;

		for(i=0;i<N;i++)
			scanf("%d",arr+i) ;

		L[0] = 1 ;
		for(i=1;i<N;i++){
		
			max = 0 ;
			for(j=0;j<i;j++){
			
				if(max < L[j] && arr[j] <= arr[i])
					max = L[j] ;
			
			}

			L[i] = max+1 ;
			
		}

		max = L[0] ;
		for(i=1;i<N;i++)
			if(max < L[i])
				max = L[i] ;
			else ;

		printf("%d\n",max) ;

	}


}