#include<stdio.h>
#include<iostream>
#include<stdlib.h>
#include<vector>
#include<set>
#include<math.h>
#include<map>
#include<algorithm>
#include<queue>
#include<cstring>
#include<stack>
using namespace std;
#define tr(container,it) \
  for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
typedef pair<long,long>ii;
#define MAX1 6553
#define MAX2 18
struct entry
{
	long nr[2];
	long p;
}L[MAX1];

long P[MAX2][MAX1];
long n,stp,cnt;
bool cmp(entry a,entry b)
{
	return (a.nr[0]==b.nr[0])? (a.nr[1]<b.nr[1]?1:0):(a.nr[0]<b.nr[0]?1:0);
}
long lcp(long x,long y)
{
	long ans=0,i;
	if(x==y)
	return n-x;
	for(i=stp-1;i>=0&&x<n&&y<n; i--)
	{
		if(P[i][x]==P[i][y])
		{
			ans+= 1<<i;
			x+= 1<<i;
			y+= 1<<i;
		}
	}
	return ans;
}

int main()
{	
  //freopen("input.txt","r",stdin);
  long t;
  cin>>t;
  while(t--)
{
  string str;
  cin>>str;
  n=str.length();
  memset(P,0,sizeof(P));
  for(long i=0;i<n;i++)
  {
  	P[0][i]=str[i];
  }
  
  for(stp=1,cnt=1;cnt<n;stp++,cnt*=2)
  {
  	for(long i=0;i<n;i++)
  	{
  	   L[i].nr[0]=P[stp-1][i];
	   L[i].nr[1]= (i+cnt <n)? P[stp-1][i+cnt]:-1;
	   L[i].p=i;
	}
	
	sort(L,L+n,cmp);
	for(long i=0;i<n;i++)
	{
		P[stp][L[i].p]= (i>0&&L[i].nr[0]==L[i-1].nr[0]&&L[i].nr[1]==L[i-1].nr[1])? P[stp][L[i-1].p]:i;
	}
  }
  
  long SUF_ARR[MAX1];
  for(long i=0;i<n;i++)
  {
  	SUF_ARR[i]=L[i].p;
  	//cout<<L[i].p<<" ";
  }
  //cout<<endl;
  long ans=0;
  
  ans +=n- SUF_ARR[0];
  for(long i=1;i<n;i++)
  {
  	long kk=lcp(SUF_ARR[i],SUF_ARR[i-1]);
  //	cout<<kk<<" ";
  	ans +=(n-SUF_ARR[i]-kk);
  }
  cout<<ans<<endl;
}
  
   return 0;
}