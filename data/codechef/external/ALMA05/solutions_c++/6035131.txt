#include<iostream>
#include<stack>
#include<string>
#include<vector>
#include<set>
#include<queue>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<algorithm>
#include <stdlib.h>

using namespace std;

#define gc getchar
#define MOD 1000000007
#define p 1000000005
#define pc(x) putchar(x)
#define pi(n) printf("%d",n)
#define pis(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define pll(n) printf("%lld",n)
#define ps printf(" ")
#define pn printf("\n")
#define rep(i,n) for(i=0;i<n;i++)
#define fu(i,a,n) for(i=a;i<=n;i++)
#define fd(i,n,a) for(i=n;i>=a;i--)
#define INV 333333336
#define ll long long
#define ull unsigned long long
#define EPS 1e-9
#define infi 2000000000
#define linfi 2000000000000000000
#define ARRAY_SIZE(a) sizeof(a)/sizeof(	[0])
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

inline ll sn()
{
	ll n=0;
	ll ch=gc();
	while( ch <48 )ch=gc();
	while( ch >47 )
	n = (n<<3)+(n<<1) + ch-'0', ch=gc();
	    return n;
}

inline void wi(ll n)
{
	ll N = n, rev, count = 0;
	rev = N;
	if (N == 0) { pc('0');  return ;}
	while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
	rev = 0;
	while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
	while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
	while (count--) pc('0');
}

ll x[35][35];
ll dp[35][35][35][35];
ll sumc[35][35];
ll sumr[35][35];
ll n,m;

ll f(ll cl,ll cr,ll rt,ll rb)
{
    //printf("IN %d %d %d %d\n",cl,cr,rt,rb);
    if(dp[cl][cr][rt][rb]!=-1)
    {
      //  printf("OUT %d %d %d %d %d\n",cl,cr,rt,rb,dp[cl][cr][rt][rb]);
        return dp[cl][cr][rt][rb];
    }
    ll day=n+m-(cr-cl+1+rb-rt+1)+1;
    if(cl>cr || rt>rb)
    {
        dp[cl][cr][rt][rb]=0;
        //printf("OUT %d %d %d %d %d\n",cl,cr,rt,rb,dp[cl][cr][rt][rb]);
        return 0;
    }
    ll max=-1;
        if(max < f(cl+1,cr,rt,rb) + day * (sumc[rb][cl] - sumc[rt-1][cl]) ) max = f(cl+1,cr,rt,rb)+day*(sumc[rb][cl]-sumc[rt-1][cl]);
        if(max < f(cl,cr-1,rt,rb)+day*(sumc[rb][cr]-sumc[rt-1][cr])) max = f(cl,cr-1,rt,rb)+day*(sumc[rb][cr]-sumc[rt-1][cr]);
        if(max < f(cl,cr,rt+1,rb)+day*(sumr[rt][cr]-sumr[rt][cl-1])) max=f(cl,cr,rt+1,rb)+day*(sumr[rt][cr]-sumr[rt][cl-1]);
        if(max < f(cl,cr,rt,rb-1)+day*(sumr[rb][cr]-sumr[rb][cl-1])) max=f(cl,cr,rt,rb-1)+day*(sumr[rb][cr]-sumr[rb][cl-1]);

    dp[cl][cr][rt][rb]=max;
    //printf("OUT %d %d %d %d %d\n",cl,cr,rt,rb,dp[cl][cr][rt][rb]);
    return dp[cl][cr][rt][rb];
}

int main()
{
	ll t;
	scanf("%lld",&t);
	while(t--)
    {
        ll i,j,k;
        scanf("%lld",&n);
        scanf("%lld",&m);
        fu(i,1,n) fu(j,1,m)
            scanf("%lld",&x[i][j]);
        fu(i,1,m)
        {
            sumc[0][i]=0;
            fu(j,1,n) sumc[j][i]=sumc[j-1][i]+x[j][i];
        }

        fu(i,1,n)
        {
            sumr[i][0]=0;
            fu(j,1,m) sumr[i][j]=sumr[i][j-1]+x[i][j];
        }

       /* pn;
        rep(i,n+1)
        {
            rep(j,m+1)
            {
                pis(x[i][j]);
            }pn;
        }pn;
        rep(i,n+1)
        {
            rep(j,m+1)
            {
                pis(sumc[i][j]);
            }pn;
        }pn;
        rep(i,n+1)
        {
            rep(j,m+1)
            {
                pis(sumr[i][j]);
            }pn;
        }*/
        memset(dp,-1,sizeof(dp));

        ll ans=f(1,m,1,n);
        pll(ans);pn;

    }
	return 0;
}

