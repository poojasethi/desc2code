#include <bits/stdc++.h>
using namespace std ;

#define LL long long 
#define MAXN 33 

LL DP[MAXN][MAXN][MAXN][MAXN] , M[MAXN][MAXN] ;
int T , R , C ;

LL solve(int s1,int e1,int s2,int e2){
	
	if(s2 < s1 || e2 < e1)
		return 0 ;
	LL &ret = DP[s1][e1][s2][e2] ; 
	if(ret != -1){
		return ret ;
	}
	ret = 0 ;	
	LL sum_matrix ;
	sum_matrix = ( M[s2][e2] - M[s2][e1-1] - M[s1-1][e2] + M[s1-1][e1-1] ) ;
	ret = max(ret,sum_matrix+solve(s1+1,e1,s2,e2)) ;
	ret = max(ret,sum_matrix+solve(s1,e1+1,s2,e2)) ;
	ret = max(ret,sum_matrix+solve(s1,e1,s2-1,e2)) ;
	ret = max(ret,sum_matrix+solve(s1,e1,s2,e2-1)) ;
	return ret ;	
}

int main(){

	scanf("%d",&T) ;
	while(T--){
		scanf("%d%d",&R,&C) ;
		for(int i=1;i<=R;i++){
			LL sum = 0 ;		
			for(int j=1;j<=C;j++){
				scanf("%lld",&M[i][j]) ;
				sum += M[i][j] ;
				M[i][j] = sum + M[i-1][j] ;			
			}
		}
		
		for(int i=1;i<=R;i++){
			for(int j=1;j<=C;j++){
				for(int k=i;k<=R;k++){
					for(int l=j;l<=C;l++){
						DP[i][j][k][l] = -1 ;
					}
				}
			}
		}
		printf("%lld\n",solve(1,1,R,C)) ;	
	}
	return 0 ;
}
