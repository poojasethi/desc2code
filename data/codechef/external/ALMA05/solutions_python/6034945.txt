import java.io.IOException;
import java.io.InputStream;

public class Main {
    static int N;
    static int M;
    static long[][] A;
    static long[][] B;
    static long[][] C;

    static long[][][][] cache;

    static long solve(int left, int right, int bottom, int top, int day) {
        if (left > right || bottom > top) return 0;
        long cached = cache[left][right][bottom][top];
        if (cached != 0) {
            return cached;
        }

        long leftValue = solve(left+1, right, bottom, top, day+1);
//        leftValue += day*(C[top][left]-(bottom == 0 ? 0 : C[bottom-1][left]));
        for (int n=bottom; n<=top; n++) {
            leftValue += A[n][left]*day;
        }

        long rightValue = solve(left, right-1, bottom, top, day+1);
//        rightValue += day*(C[top][right]-(bottom == 0 ? 0 : C[bottom-1][right]));
        for (int n=bottom; n<=top; n++) {
            rightValue += A[n][right]*day;
        }

        long bottomValue = solve(left, right, bottom+1, top, day+1);
//        bottomValue += day*(B[bottom][right]-(left == 0 ? 0 : C[bottom][left-1]));
        for (int m=left; m<=right; m++) {
            bottomValue += A[bottom][m]*day;
        }

        long topValue = solve(left, right, bottom, top-1, day+1);
//        topValue += day*(B[top][right]-(left == 0 ? 0 : C[top][left-1]));
        for (int m=left; m<=right; m++) {
            topValue += A[top][m]*day;
        }
        
        long value = Math.max(Math.max(leftValue,rightValue),Math.max(bottomValue,topValue));
        cache[left][right][bottom][top] = value;
        return value;
    }

    public static void main(String[] args) throws IOException {
        InputReader reader = new InputReader(System.in);
        int T = reader.readInt();
        for (int t=0; t<T; t++) {
            int N = reader.readInt();
            int M = reader.readInt();
            A = new long[N][M];
            for (int n=0; n<N; n++) {
                for (int m=0; m<M; m++) {
                    A[n][m] = reader.readInt();
                }
            }
            B = new long[N][M];
            for (int n=0; n<N; n++) {
                B[n][0] = A[n][0];
                for (int m=1; m<M; m++) {
                    B[n][m] = B[n][m-1]+A[n][m];
                }
            }
            C = new long[N][M];
            for (int m=0; m<M; m++) {
                C[0][m] = A[0][m];
                for (int n=1; n<N; n++) {
                    C[n][m] = C[n-1][m]+A[n][m];
                }
            }
            cache = new long[M][M][N][N];
            long answer = solve(0,M-1,0,N-1,1);
            System.out.println(answer);
        }
    }

    static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public final int readInt() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res;
        }

        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res;
        }

        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }

}
