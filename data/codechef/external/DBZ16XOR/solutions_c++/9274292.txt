#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ll long long int
#define s(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define mod 1000000007
#define get getchar_unlocked

int N;

struct node
{
    int x, ind;
}seg[400005];

int a[100005];
int B[32][100005];
ll S[100005];
ll ans = 0;

void C_S_T(int l, int r, int ind)
{
    if (l == r) {
        seg[ind].x = a[l];
        seg[ind].ind = l;
        return;
    }
    int m = (l+r)/2;
    int p = 2*ind+1;
    int q = p+1;
    C_S_T(l, m, p);
    C_S_T(m+1, r, q);
    if (seg[p].x >= seg[q].x)
        seg[ind] = seg[p];
    else
        seg[ind] = seg[q];
}

node getA(int x, int y, int l, int r, int ind)
{
    if (r < x || y < l) {
        node A;
        A.x = A.ind = -1;
        return A;
    }
    if (x <= l && r <= y)
        return seg[ind];
    int m = (l+r)/2;
    int p = 2*ind+1;
    int q = p+1;
    node A = getA(x, y, l, m, p);
    node B = getA(x, y, m+1, r, q);
    if (A.x >= B.x)
        return A;
    return B;
}

void query(int l, int r)
{
    //cerr << l << " " << r << endl;
    if (l >= r)
        return;
    int ind, l1, l2, i, r1, r2;
    ll X, O1, O2, Z1, Z2;
    node tmp = getA(l, r, 1, N, 0);
    //cerr << "YES\n";
    ind = tmp.ind;
    l1 = l;
    r1 = ind-1;
    l2 = ind+1;
    r2 = r;
    for (i = 0; i < 25; ++i) {
        X = (1 << i);
        if (l1 <= r1) {
            O1 = B[i][r1]-B[i][l1-1];
            Z1 = r1-l1+1-O1;
        }
        else
            O1 = Z1 = 0;
        if (l2 <= r2) {
            O2 = B[i][r2]-B[i][l2-1];
            Z2 = r2-l2+1-O2;
        }
        else
            O2 = Z2 = 0;
        if (a[ind] & X) {
            ans += (O1*O2*X);
            ans += (Z1*Z2*X);
        }
        else {
            ans += (O1*Z2*X);
            ans += (O2*Z1*X);
        }
     //   cout << ans << endl;
    }
    if (l1 <= r1)
        ans += S[r1]-S[l1-1];
   // cout << ans << " ";
    if (l2 <= r2)
        ans += S[r2]-S[l2-1];
    //cout << ans << endl;
    query(l, ind-1);
    query(ind+1, r);
}

int main()
{
    int n, i, j;
    s(n);
    N = n;
    for (i = 1; i <= n; ++i) {
        s(a[i]);
        S[i] = S[i-1]+a[i];
        for (j = 0; j < 25; ++j) {
            B[j][i] = B[j][i-1];
            if (a[i] & (1 << j))
                ++B[j][i];
        }
    }
    C_S_T(1, n, 0);
    query(1, n);
    cout << ans << endl;
    return 0;
}
