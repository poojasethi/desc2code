#include<bits/stdc++.h>
#include<algorithm>
#include<vector>
#include<queue>
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={0,1,0,-1};int dy[]={1,0,-1,0}; //4 direction
#define REP(i,n) for(int i=0;i<n;i++)
#define REPU(i,a,b) for(int i=a;i<b;i++)
#define sll(n) scanf("%lld",&n)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define sl(n) scanf("%ld",&n)
#define pin(n) printf("%d\n",n)
#define MP make_pair
#define PB push_back
typedef long long LL;
using namespace std;
string d,s;
int main()
{
    int t;
    si(t);
    while(t--)
    {
        cin>>d>>s;
        int ct=INT_MAX;
        if(s.size()==d.size())
        {
            REP(i,s.size())
            ct+=(s[i]!=d[i]);
            cout<<ct<<endl; continue;
        }
        if(d.size()>s.size()) swap(s,d);
        for(int i=0;i<(s.size()-d.size());i++)
        {
                int c=0;
            for(int j=0;j<d.size();j++)
            {
                if(d[j]!=s[i+j]) c++;
            }
            ct=min(ct,c);
        }
        cout<<ct<<endl;
    }
	return 0;
}
