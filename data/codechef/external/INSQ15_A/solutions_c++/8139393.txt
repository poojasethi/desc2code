#include <stdio.h>
#include <limits.h>
#include <queue>
#include <stdlib.h>
#include <algorithm>
#include <time.h>
#include <iostream>
#include <stack>
#include <map>
#include <string>
#include <malloc.h>
using namespace std;

class Solution {
public:
std::vector<int>  Zalgorithm(string s);
};

struct Order
{
    bool operator()(pair<long long  int, long long int> const& a, pair< long long int, long long int> const& b) const
    {
        if(a.first==b.first)
        {
          return a.second < b.second;
        }
        return a.first > b.first;
        
    }
};

std::vector<int> Solution::Zalgorithm(string s)
{
    std::vector<int> Zarray(s.size(),0);
    int L=0,R=0;
    int n = s.size();
    for(int i=1;i<n;i++)
    {
        if(i>R)
        {
            L=R=i;
            while(R < n && s[R-L]==s[R])
            {
                R++;
            }
            Zarray[i] = R-L;
            R--;
        }
        else
        {
            // since this array is already a part of [L,R] =>
            // so this is i-l denotes how far is it after l
            // and since s[l] is similar to s[0], hence checking only that value
            int k = i-L;
            // kth letter is as much similar as much last value checked
            if(Zarray[k]<R-i+1)
            {
                Zarray[i] = Zarray[k];
            }
            else
            {
                L=i;
                while(R<n && s[R-L]==s[R])
                {
                    R++;
                }
                Zarray[i] = R-L;
                R--;
            }

        }
    }
    return Zarray;

}


 int main()
{
    string s1;
    cin >> s1;
    Solution solution;
    std::vector<int> ans = solution.Zalgorithm(s1);
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        int t;
        scanf("%d",&t);
        if(ans[t]<t)
        {
            printf("%d\n",ans[t]);
        }
        else
        {
            printf("%d\n",t);   
        }
    }
    return 0;
}   