/*takes two integers N and M and tries to find twice the sum of the quotients of the integer division of (i * N) by M varying i from 0 to M-1 both included. But as he started computing the sums for larger values of M and N, things started becoming very complex. So he has asked for your help. You need to output the sum that Bob needs.
Input

The first line of the input contains an integer T denoting the number of test cases.
Saurav Shekhar(sauravshekhar01@gmail.com)
IOPC 2013*/

#include<stdio.h>

long long int gcd(long long int a, long long int b)
{	long long int c;
	c = a%b;
	while(c)
	{	//printf("a = %d,b = %d\n",a,b);
		a = b;
		b = c;
		c = a%b;
	}
	//printf("gcd = %d\n",b);
	return b;
}

int main()
{	
	int T;
	long long int M,N,k=0;
	long long int sum = 0;
	scanf("%d",&T);
	while(T--)
	{
		k=0; sum=0;
		scanf("%lld %lld",&M,&N);	//printf("%d\n",M);
		if(M>N)
			k = gcd(M,N);
		else
			k = gcd(N,M);
		sum = M*N -M -N + k ;
		printf("%lld\n",sum);
	}
	return 0;
}
