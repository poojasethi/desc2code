#include<iostream>
using namespace std;
string a[10000000];
string b[10000000];
void merge(int,int,int);
void merge_sort(int low,int high)
{
    int mid;
    if (low<high)
    {
        mid=(low+high)/2;
        merge_sort(low,mid);
        merge_sort(mid+1,high);
        merge(low,mid,high);
    }
}
void merge(int low,int mid,int high)
{
    int h,i,j,k;
    h=low;
    i=low;
    j=mid+1;
 
    while ((h<=mid)&&(j<=high))
    {
        if (a[h]<=a[j])
        {
            b[i]=a[h];
            h++;
        }
        else
        {
            b[i]=a[j];
            j++;
        }
        i++;
    }
    if (h>mid)
    {
        for (k=j;k<=high;k++)
        {
            b[i]=a[k];
            i++;
        }
    }
    else
    {
        for (k=h;k<=mid;k++)
        {
            b[i]=a[k];
            i++;
        }
    }
    for (k=low;k<=high;k++) a[k]=b[k];
}
 
int main()
{
    int n,i,j=0;
    i=0;
    while (cin>>n)
    {
        i=0;j=0;
        while (i<n)
        {
            cin>>a[i];
            j=0;
            while (a[i][j])
            {
                a[i][j]=tolower(a[i][j]);
                j++;
 
            }
            i++;
        }
        merge_sort(0,n-1);
        //for (i=0;i<n;i++)
          //  cout<<a[i]<<endl;
        i=1;
        int len_n,len_o=a[0].length(),max_len=0;
        while (i<n)
        {
            if (a[i].length()>max_len)
            {
                len_n=a[i].length();
                int j=0;
 
                while (a[i][j]==a[i-1][j] && j<len_n)
                    j++;
                if (j>max_len)
                    max_len=j;
                i++;
                len_o=len_n;
            }
 
            else
                i++;
        }
        cout<<max_len<<endl;
    }
    return 0;
}