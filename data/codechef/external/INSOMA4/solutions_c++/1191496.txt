#include <iostream>
#include <string>
#include <sstream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <set>
#include <fstream>

using namespace std;

class Node
{
    public:
    char mContent;
    bool mMarker;
    int height;
    int visited;
    vector<Node*> mChildren;

    Node()          { mContent = ' '; mMarker = false; visited = 1; height = 0;}
    ~Node() {}
    char content()  { return mContent; }
    void setContent(char c) { mContent = c; }
    bool wordMarker() { return mMarker; }
    void setWordMarker() { mMarker = true; }
    Node* findChild(char c);
    void appendChild(Node* child) { mChildren.push_back(child);}
};


class Trie
{
    public:
    Trie(); ~Trie();
    Node* root;

    void addWord(string s,int &max);
    bool searchWord(string s);
    void deleteWord(string s);
};

Node* Node::findChild(char c)
{
    for (int i = 0; i < mChildren.size(); i++)
    {
        Node* tmp = mChildren.at(i);
        if (tmp->content() == c) return tmp;
    }

    return NULL;
}

Trie::Trie() { root = new Node(); }
Trie::~Trie() {}

void Trie::addWord(string s,int &max)
{
    Node* current = root;

    if (s.length() == 0)
    {
        current->setWordMarker();
        return;
    }

    for (int i = 0 ; i < s.length(); i++)
    {
        Node* child = current->findChild(s[i]);

        if (child != NULL)
        {
            current = child;
            current->visited++;
        }
        else
        {
            Node* tmp = new Node();
            tmp->setContent(s[i]);
            tmp->height = current->height + 1;
            current->appendChild(tmp);
            current = tmp;
        }
        if ((current->height > max) && (current->visited > 1)) max = current->height;
        if (i == s.length()-1) current->setWordMarker();
    }
}

int main()
{
    int max = 0;
    int t;
    cin>>t;
    Trie* trie = new Trie();
    string inp;
    for (; t > 0; t--)
    {
        cin>>inp;
        trie->addWord(inp,max);
    }

    cout<<max<<endl;
	return 0;
}
