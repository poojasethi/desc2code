#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<set>
#include<cmath>
#include<bitset>
#include<map>
#include<queue>
#include<stack>
#define test(t) while(t--)
#define cin(n) scanf("%d",&n)
#define cout(n) printf("%d\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>
#define pb push_back
#define mp make_pair
#define imax (int) 1000000007
#define ill long long
#define gc getchar_unlocked
void fcin(int &x){register int c = gc();x = 0;for(;(c<48 || c>57);c = gc());for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}}
using namespace std;

struct node
{
	char val;int deg,depth;	vector<node> children;
	node(char i='\0',int d=0,int od=0)
	{
		val=i;deg=od;depth=d;
	}
};

struct trie
{
	node top;
	trie()
	{
		top = node('\0',0,2);
	}
	void insert(char *arr)
	{
		int i,j,flag;
		node* temp = &top;
		for(i=0;i<strlen(arr);i++)
		{
			flag=0;
			for(j=0;j<temp->children.size();j++)
			{
				if(arr[i]==temp->children[j].val)
				{
					flag=1;temp = &(temp->children[j]);temp->deg++;break;
				}
			}
			if(flag==0)
			{
				temp->children.pb(node(arr[i],temp->depth+1,1));temp=&(temp->children[temp->children.size()-1]);
			}
		}
	}
	
	int dfs(node temp)
	{
		if(temp.deg<2) return 0;int maxm=temp.depth;
		for(int i=0;i<temp.children.size();i++)
		{
			maxm = max(dfs(temp.children[i]),maxm);
		}
		return maxm;
	}
};

int main()
{
	int n; char a[100];trie T;
	cin(n);
	test(n)
	{
		scanf("%s",a);
		T.insert(a);
	}
	cout(T.dfs(T.top));	
	return 0;
}