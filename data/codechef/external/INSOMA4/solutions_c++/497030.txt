#include<vector>
#include<iostream>
#include<algorithm>
#include<string.h>
 
using namespace std;
 
int mymax;
 
int mystrcmp(const char *str1,const char *str2)
{
    int i = 0;
    while (str1[i] != 0x00 && str2[i] != 0x00)
    {
        if (str1[i] != str2[i])
        {
            if (str1[i] < str2[i])
            {
                if(i > mymax)
                    mymax = i;
                return -1;
            }
            else
            {
                if((i) > mymax)
                    mymax = i;
                return 1;
            }
        }
        i++;
    }
    if (str1[i] == 0x00 && str2[i] == 0x00)
    {
        if((i) > mymax)
            mymax = i;
        return 0;
    }
    else if (str1[i] == 0x00)
    {
        if((i) > mymax)
            mymax = i;
        return -1;
    }
    else
    {
        if((i) > mymax)
            mymax = i;
        return 1;
    }
}
 
void Merge(vector<string>& rData, int nLeft, int nMid, int nRight)
{
 int nLeftArrayLen  = (nMid - nLeft) + 1;
 int nRightArrayLen = (nRight - nMid);
 
 vector<string> LeftArray, RightArray;
 LeftArray.resize(nLeftArrayLen);
 RightArray.resize(nRightArrayLen);
 
 vector<string>::iterator itrFirst, itrLast;
 
 //Create the left sub array...
 itrFirst = rData.begin() + nLeft;
 itrLast  = itrFirst + nLeftArrayLen;
 copy(itrFirst, itrLast, LeftArray.begin());
 
 //Create the right sub array...
 itrFirst = rData.begin() + nMid + 1;
 itrLast  = itrFirst + nRightArrayLen;
 copy(itrFirst, itrLast, RightArray.begin());
 
 int nLIndex = 0;
 int nRIndex = 0;
 int nCopyIndex = nLeft;
 for (; (nCopyIndex <= nRight && 
  nLIndex < nLeftArrayLen && 
  nRIndex < nRightArrayLen);){
 
    if (mystrcmp(LeftArray[nLIndex].c_str(),RightArray[nRIndex].c_str()) <= 0)
   rData[nCopyIndex++] = LeftArray[nLIndex++];
  else
   rData[nCopyIndex++] = RightArray[nRIndex++];
 }
 //Copy the remaining elements from the left subarray to main array...
 while (nCopyIndex <= nRight && nLIndex < nLeftArrayLen)
  rData[nCopyIndex++] = LeftArray[nLIndex++];
 //Copy the remaining elements from the right subarray to main array...
 while (nCopyIndex <= nRight && nRightArrayLen)
  rData[nCopyIndex++] = RightArray[nRIndex++];
}
 
void MergeSort(vector<string>& rData, int nLeft, int nRight)
{
 if (nLeft < nRight){
  int nMid = ((nLeft + nRight) / 2);
  MergeSort(rData, nLeft, nMid);
  MergeSort(rData, nMid + 1, nRight);
  Merge(rData, nLeft, nMid, nRight);
 }
}
 
int main()
{
    int no;
    while(scanf("%d",&no) != EOF)
    {
        mymax = 0;
        vector<string> names;
        string temp;
        for(int i = 0; i < no; i++)
        {
            char tem[101];
            cin >> tem;
            temp = tem;
            names.push_back(temp);
            temp.erase();
        }
        MergeSort(names,0,(no - 1));
        cout << endl << mymax;
    }
    return 0;
}  