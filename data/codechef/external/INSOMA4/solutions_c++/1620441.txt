#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<cctype>
#include<algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
#define cin(n) scanint(n)
#define gc getchar_unlocked
void scanint(int &x){register int c = gc();x = 0;for(;(c<48 || c>57);c = gc());for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}}
struct node
{
    char val;
    int depth,deg;
    vector<node> children;
    node(char c='\0',int d=0,int od=1){
      depth=d;val=c;deg=od;
   }
};
struct trie
{
  
  node top;
  trie()
  {
    top=node('\0',0,2);
  }
  void insert(char *arr)
  {
//     cout<<"inserting: "<<arr<<endl;
    node* temp=&top;bool flag;
    for(int i=0;i<strlen(arr);i++)
    {
      flag=true;
      for(int j=0;j<temp->children.size();j++)
      {
	if(arr[i]==temp->children[j].val){temp=&(temp->children[j]);temp->deg++;flag=false;break;}
      }
      if(flag){temp->children.pb(node(arr[i],temp->depth+1,1));temp=&(temp->children[temp->children.size()-1]);}
    }
  }
  int dfs(node temp)
  {
    //cout<<temp.val<<" "<<temp.deg<<" "<<temp.depth<<" "<<temp.children.size()<<endl;
    if(temp.deg<2)return 0;
    int maximum=temp.depth;
    for(int i=0;i<temp.children.size();i++)maximum=max(dfs(temp.children[i]),maximum);
    return maximum;
  }
};
int main()
{
  int n;
  char arr[101];
  trie T;
  cin(n);
   for(int i=0;i<n;i++)
   {
     scanf("%s",arr);
     T.insert(arr);
   }
   cout<<T.dfs(T.top)<<endl;
}