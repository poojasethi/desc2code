#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>

#define MaxLengthAncestorList 100

class AncestorList
{
public:
	AncestorList(char ancestorListChar[])
	{
		unsigned int i = 0;
		for(; i < strlen(ancestorListChar); i++)
			ancestorListInteger[i] = ancestorListChar[i];
		for(; i < MaxLengthAncestorList; i++)
			ancestorListInteger[i] = -1;
	}

	bool operator<(const AncestorList& ancestorListRight) const
	{
		bool isLessThan = 0;
		for(unsigned int i = 0; i < MaxLengthAncestorList; i++)
		{
			if((this->ancestorListInteger)[i] < ancestorListRight.ancestorListInteger[i])
			{
				isLessThan = 1;
				break;
			}
			else if((this->ancestorListInteger)[i] > ancestorListRight.ancestorListInteger[i])
				break;
			else if((this->ancestorListInteger)[i] == -1)
				break;
			else if(ancestorListRight.ancestorListInteger[i] == -1)
				break;
		}
		return isLessThan;
	}

	unsigned int operator-(const AncestorList& ancestorListRight) const
	{
		unsigned int i;
		for(i = 0; i < MaxLengthAncestorList; i++)
		{
			if(((this->ancestorListInteger)[i] != ancestorListRight.ancestorListInteger[i]) || (((this->ancestorListInteger)[i] * ancestorListRight.ancestorListInteger[i]) == 1))
				break;
		}
		return i;
	}

private:
	int ancestorListInteger[MaxLengthAncestorList];
};


int main()
{
	char ancestorListInput[MaxLengthAncestorList + 1];
	std::vector<AncestorList> ancestorListVector;

	unsigned int numberOfInputs, i;
	scanf("%d", &numberOfInputs);
	for(i = 0; i < numberOfInputs; i++)
	{
		scanf("%s", ancestorListInput);
		ancestorListVector.push_back(AncestorList(ancestorListInput));
	}

	std::sort(ancestorListVector.begin(), ancestorListVector.end());

	unsigned int numberOfMatches, maximumNumberOfMatches = 0;
	for(i = 0; i < (ancestorListVector.size() - 1); i++)
	{
		numberOfMatches = ancestorListVector[i + 1] - ancestorListVector[i];
		if(numberOfMatches > maximumNumberOfMatches)
			maximumNumberOfMatches = numberOfMatches;
	}
	printf("%d", maximumNumberOfMatches);

	return 0;
}