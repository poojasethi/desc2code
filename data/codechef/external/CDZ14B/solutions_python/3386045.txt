#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<list>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<cmath>
#include<cctype>
#include<cstring>
#include<string>
#include<ctime>
#include<cassert>
using namespace std;
#ifdef _WIN32
#include<conio.h>
#endif
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;
#define FOR(i,a,b) for(int i=(a);i< (b);i++)
#define input(a) scanf("%d",&a)
#define CLEAR(a) memset((a),0,sizeof(a))
#define INF 1000000000
#define LL long long
#define PI 2*acos(0.0)
#define sqr(a) (a)*(a)
#ifdef ONLINE_JUDGE
inline int read()
{
    char temp;
    int x=0;
    temp=getchar_unlocked();
    while(temp<48)temp=getchar_unlocked();
    x+=(temp-'0');
    temp=getchar_unlocked();
    while(temp>=48)
    {
        x=x*10;
        x+=(temp-'0');
        temp=getchar_unlocked();
    }
    return x;
}
inline void write(int a)
{
  char snum[20];
  int i=0;
  do
  {
    snum[i++]=a%10+48;
    a=a/10;
  }while(a!=0);
  i--;
  while(i>=0)
  putchar_unlocked(snum[i--]);
  putchar_unlocked('\n');
}
inline void readstr(char *s)
{
   char ch=0;
   int i=0;
   while(ch<33)
      ch=getchar_unlocked();
   while(ch!='\n')
   {
      s[i]=ch;
      ch=getchar_unlocked();
      i++;
   }
   s[i]='\0';
}
#endif
#define MOD 1000000007
LL dp[10005];
LL modPow(LL a,LL b)
{
	LL n=a;
	LL ans=1;
	while(b)
	{
		if(b%2)
		  ans=(ans*n)%MOD;
		  b/=2;
		  n=(n*n)%MOD;
	}
	return ans;
}
int main()
{
	int tc,L;
	string s;
	input(tc);
	while(tc--)
	{
		scanf("%d",&L);
		cin>>s;
		CLEAR(dp);
		LL ans=0;
		int len=s.length();
		dp[0]=(LL)(s[0]-'a'+1);
		ans=(ans+dp[0])%MOD;
		for(int i=1;i<min(L,len);i++)
		{
			dp[i]=(dp[i-1]*(LL)(s[i]-'a'+1))%MOD;
			ans=(ans+dp[i])%MOD;
		}
		LL k=(dp[len-1]-1+MOD)%MOD;
		k=(k*((modPow(26,L-len)-1+MOD)%MOD))%MOD;
		k=(k*26)%MOD;
		k=(k*modPow(25,MOD-2))%MOD;
		if(L>=len)
		{
			ans=(ans+k)%MOD;
			ans=(ans-1+MOD)%MOD;
		}
		printf("%lld\n",ans);
	}
	return 0;
}