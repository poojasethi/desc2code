#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime>
#include <limits.h>

using namespace std;


#define LL 				"%I64d"
#define sz(a) 			int((a).size())
#define pb 				push_back
#define mp 				make_pair
#define F				first
#define S				second
#define all(c) 			(c).begin(),(c).end()
#define tr(c,i) 		for(typeof(c.begin()) i = c.begin(); i != c.end(); i++)
#define present(c,x) 	((c).find(x) != (c).end())
#define cpresent(c,x) 	(find(all(c),x) != (c).end()) 
#define INF				(int(1e9))
#define INFL			(int(1e18))
#define EPS				1e-12
const int inf = 100010;
const int MOD = 1000000007;
const double pi=acos(-1.0);

/*
#define rc m + 1,r,tr<<1|1
#define zero(a) fabs(a)<eps
*/

/*
 
#define 	chkbit(s, b) 	(s & (1<<b))
#define 	setbit(s, b) 	(s |= (1<<b))
#define 	clrbit(s, b) 	(s &= ~(1<<b))
 
*/


#define iabs(x)  ((x) > 0 ? (x) : -(x))

#define clear1(A, X, SIZE) memset(A, X, sizeof(A[0]) * (SIZE))
#define clearall(A, X) memset(A, X, sizeof(A))
#define memcopy1(A , X, SIZE) memcpy(A , X ,sizeof(X[0])*(SIZE))
#define memcopyall(A, X) memcpy(A , X ,sizeof(X))
#define max( x, y )  ( ((x) > (y)) ? (x) : (y) )

#define rep(i,a)	for(i=0;i<a;i++)
#define FOR(i,a,b)	for(i=a;i<b;i++)
#define ll	long long
int gcd(int a,int b) {return (b==0?a:gcd(b,a%b));}
int lcm(int a,int b) {return (a*(b/gcd(a,b)));}
int fx[]={0,0,1,-1};
int fy[]={-1,1,0,0};

bool comp(const pair<ll,int> &A, const pair<ll,int> &B) {
	if(A.F > B.F) {
		return 1;
	}
	if(A.F == B.F && A.S < B.S) {
		return 1;
	}
	return 0;
}
int main() {
	ios_base::sync_with_stdio(0);
	int i=0,j;
	int n,t,cnt=0;
	#ifndef ONLINE_JUDGE
		
		clock_t start = clock();
	#endif
	
//	cin >>t;
	
		int m,s,q;
		vector<pair<ll,int> > V;
		cin>>n;
	rep(i,n) {
		cin>>s>>m;
		V.pb(mp(1LL*s*m,i+1));
	}
	sort(all(V),comp);
	
	cin>>q;
	rep(i,q) {
		cin>>s;
		cout<<V[s-1].S<<endl;
	}
	
	
	 
	#ifndef ONLINE_JUDGE
		clock_t end = clock();
    	cout << "\nTime elapsed: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
    #endif
	return 0;
}	