Chef Jessie has a lot of recipes with her (N). She often remembered the starting few characters of the recipe and forgot the rest. As all the great chefs do, Jessie also numbered the recipes depending on the priority. So, given the list of recipes along with their priorities answer Jessie’s queries.
Jessie’s queries are as follows:
She gives you the first few characters of a recipe; you have to print the complete recipe with the highest priority.
Note:
Every recipe has a unique priority


Input
First line contains an integer N - the number of recipes.
Followed by N strings Si along with an integer each Vi.
Si stands for the recipe and Vi for the priority.
It is followed by an integer Q - the number of queries.
Followed by Q strings Qi.
Each string Si, Qi contain only lowercase Latin alphabets ('a' - 'z') and '-'.


Output
Q – lines, each contain the answer for each of the query.
If for a query no recipe matches print "NO". (Without quotes)


Constraints
0 <= N <= 1000
0 <= Q <= 1000
-10^9 <= Vi <= 10^9
1 <= |Si| <= 1000 (length of Si)
1 <= |Qi| <= 1000 (length of Qi)

Example1:
Input:
4
flour-with-eggs 100
chicken-ham -10
flour-without-eggs 200
fish-with-pepper 1100
6
f
flour-with
flour-with-
c
fl
chik

Output:
fish-with-pepper
flour-without-eggs
flour-with-eggs
chicken-ham
flour-without-eggs
NO



Code

This is the solution that P wrote for the problem:


	#include <iostream.h>
	#include <map>
	using namespace std;


	int main() {
	int n,q,l;
	string s;
	long long v;
	map<long long,string>m;
	cin>>n;
	for(int i=0;i<n;i++){
	cin>>s;
	m[v]=s;
	}
	cin>>v;
	map<long long,string>::reverse_iterator rit;
	for(int i=0;i<q;i++){
	cin>>q;
	l=s.length();
	for(rit=m.rbegin();rit!=m.rend();rit++){
	if(rit->second->substr(0,l)=s){
	cout<<rit->second<<endl;
	break;
	}
	}
	if(rit==M.rend())
	cout<<"NO"<<endl;
	}
	return 0;
	}



Steps to be followed
    1. Read the given description carefully and understand the problem.
    2. Analyze the code given in the problem and find bugs(errors) in these codes..
    3. The given code can be copied and compiled in an online compiler (Eg. ideone.com).
    4. Once the bugs are eliminated from the code, the clean code can be submitted as the solution to the problem..
    5. The solution should be a debugged version of the code provided and must satisfy the test cases to be accepted..
All the best!!
