// ROH.cpp : Defines the entry point for the console application.
//


#include<iostream>
#include<vector>
#include<stdio.h>
#include<cstdio>
#include<set>
#include<stdlib.h>
#include<algorithm>
#include<queue>
#include<bitset>
#include<map>
#include<fstream>
#include<stack>
#include<utility>
#include<string>
#include<cstring>
#include<math.h>

using namespace std;

#define scan scanf
#define sscan sscanf_s
#define get gets
#define print printf 
#define mod 1000000007
#define ll long long
#define init int i,j,k,l,m,n,test
#define pause system("pause")
#define inf 1000000009
#define white 0
#define black 2
#define gray 1


vector<pair<int,int> > v[109];
int final_cost[109];
struct node
{
	int index;
	int colour;
	int visit,finish,sum,pre;

};
struct node x[109];
bool fin[109];
int timex;
int cycle;
void DFS(int y)
{
	init;
	timex++;
	x[y].colour=gray;
	x[y].visit=timex;
	
	for(i=0;i<v[y].size();i++)
	{
		pair<int,int> p;
		p=v[y][i];
		if(x[p.first].colour==white)
		{
			//non visited
			
			x[p.first].pre=y;
			//x[p.first].sum=x[y].sum+p.second;
			DFS(p.first);

		}
		else if(x[p.first].colour==gray )
		{
			
			cycle=1;

		}

	}
	x[y].colour=black;
	timex++;
	x[y].finish=timex;
	

}
bool operator<(const struct node &a,const struct node &b)
{
	return a.finish>b.finish;

}
bool leap(int y)
{
	if(y%400==0)
		return 1;
	if(y%4==0 && y%100!=0)
		return 1;
	return 0;

}
int main()
{
	init;
	scan("%d",&test);
		char s[100];
	get(s);
	int f=0;
	while(test--)
	{
		f++;
	
		int d,y;
		get(s);
		d=(s[1]-'0')+10*(s[0]-'0');
		if(s[3]=='J' && s[4]=='A')
			m=1;
		else if(s[3]=='F')
			m=2;
		else if(s[3]=='M' && s[5]=='R')
			m=3;
		else if(s[3]=='A' && s[4]=='P')
			m=4;
		else if(s[3]=='M')
			m=5;
		else if(s[3]=='J' && s[5]=='N')
			m=6;
		else if(s[3]=='J' && s[5]=='L')
			m=7;
		else if(s[3]=='A')
			m=8;
		else if(s[3]=='S')
			m=9;
		else if(s[3]=='O')
			m=10;
		else if(s[3]=='N')
			m=11;
		else m=12;
		y=(s[10]-'0')+10*(s[9]-'0')+100*(s[8]-'0')+1000*(s[7]-'0');
		l=leap(y);
		int c=0;
		int leap[]={31,28,31,30,31,30,31,31,30,31,30,31};
		if(l==1)
			leap[1]=29;
		//cout<<m<<endl;
		for(i=0;i<m-1;i++)
		{
			
				c+=leap[i];
	

		}
		c+=d;
		//cout<<c<<endl;
		cout<<"Case "<<f<<": ";
		if(c>300)
		{
			if(c>360)
			{
				cout<<c-360<<" Ones"<<endl;

			}
			else
			{
				cout<<c-300<<" Tens"<<endl;
			}

		}
		else
			cout<<c<<" Hundreds"<<endl;
		
		


	}

		

	
	
}

	
	
		


