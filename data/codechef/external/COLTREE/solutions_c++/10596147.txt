#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int N = 1e6 + 5;
const int MOD = 1e9 + 7;

ll fact[55] , ncr[55][55];

void pre() {
	int n = 50;
	fact[0] = 1;

	frep(i , 1 , n)
		fact[i] = ( (ll)(i) * fact[i - 1] ) % MOD;

	frep(i , 0 , n)
		frep(j , 0 , i) {
			if (j == 0)
				ncr[i][j] = 1;
			else
				ncr[i][j] = (ncr[i - 1][j - 1] + ncr[i - 1][j]) % MOD;

		}
}

int main(int argc, char const *argv[])
{
	fast;

	pre();

	CASES {
		int n , k;
		cin >> n >> k;

		rep(i , n - 1) {
			int a , b;
			cin >> a >> b;
		}

		ll fans = 0;

		//number of colors that are assigned
		for(int color = 1;color <= min(n , k);color++) {
			//assign color - 1 colors to n - 1 nodes
			//select color - 1 nodes from n - 1 nodes
			ll ans = ncr[n - 1][color - 1];
			ans = (ans * fact[color]) % MOD;
			//try fact[color] combinations for 'color' number of nodes(LCA)
			ans = (ans * ncr[k][color]) % MOD;
			//select 'color' number of colors from total k colors
			fans = (fans + ans) % MOD;
		}
		cout << fans << '\n';
	}

	return 0;
}