#include <cstdio>
#include <vector>
 
using namespace std;
 
long long pow(long long x, int n, int p) {
	if (n == 0)
		return 1;
	long long res = pow(x, n / 2, p);
	res = (res * res) % p;
	if (n % 2 == 1)
		res = (res * x) % p;
	return res;
}
 
int main() {
	int t;
	scanf("%d", &t);
	for (int i = 1; i <= t; i++) {
		int n;
		int p;
		scanf("%d%d", &n, &p);
		vector <int> x(n), y(n);
		for (int j = 0; j < n; j++)
			scanf("%d%d", &x[j], &y[j]);
		int cur = 1;
		long long dx = 0;
		long long dy = 0;
		while (cur < n && dx == 0 && dy == 0) {
			dx = x[0] - x[cur];
			dy = y[0] - y[cur];
			cur++;
		}
		if (dx == 0 && dy == 0) {
			printf("Case #%d: MULTIPLE SOLUTIONS\n", i);
			continue;
		}
		if (dx == 0) {
			printf("Case #%d: NO SOLUTIONS\n", i);
			continue;
		}
		if (dx < 0)
			dx += p;
		if (dy < 0)
			dy += p;
		long long a = (dy * pow(dx, p - 2, p)) % p;
		long long b = (y[0] - a * x[0]) % p;
		if (b < 0)
			b += p;
		bool good = true;
		for (int j = 0; j < n; j++) {
			if ((a * x[j] + b) % p != y[j]) {
				good = false;
				break;
			}
		}
		if (good)
			printf("Case #%d: %lld %lld\n", i, a, b);
		else
			printf("Case #%d: NO SOLUTIONS\n", i);
	}
	return 0;
} 