#include <cstdio>
#include <cstring>
#include <algorithm>
 
#define get getchar_unlocked
#define ARRAY_SIZE(A) sizeof(A)/sizeof(A[0])
 
using namespace std ;
 
inline int inp( )
{
    int n = 0 , s = 1 ;
    char p = get( ) ;
    if( p == '-' )
        s = -1 ;
    while( ( p < '0' || p > '9' ) && p != EOF && p != '-' )
        p = get( ) ;
    if( p == '-' )
        s = -1 , p = get( ) ;
    while( p >= '0' && p <= '9' )
    {
        n = ( n << 3 ) + ( n << 1 ) + ( p - '0' ) ;
        p = get( ) ;
    }
    return n * s ;
}
 
int CeilIndex(int A[], int l, int r, int key) {
    int m;
 
    while( r - l > 1 ) {
        m = l + (r - l)/2;
        (A[m] >= key ? r : l) = m;
    }
 
    return r;
}
 
int LongestIncreasingSubsequenceLength(int A[], int size) {
 
    int *tailTable   = new int[size];
    int len;
 
    tailTable[0] = A[0];
    len = 1;
    
    for( int i = 1; i < size; i++ ) {
        if( A[i] < tailTable[0] )
            tailTable[0] = A[i];
        else if( A[i] > tailTable[len-1] )
            tailTable[len++] = A[i];
        else
            tailTable[CeilIndex(tailTable, -1, len-1, A[i])] = A[i];
    }
 
    delete[] tailTable;
 
    return len;
}
 
int main() {
    
    int n;
    n = inp();
    
    int i;
    int A[n];
    
    for (i = 0;i < n;i++) {
    	A[i] = inp();
    }
 
    printf("%d\n",
            LongestIncreasingSubsequenceLength(A, n));
 
    return 0;
} 