    #include<stdio.h>
    #include<stack>
    #include<map>
    #include<vector>
    #include<math.h>
    using namespace std;
    vector <long long int> ve[200];
    long long int f[200];
    void dfs(long long int u)
    {
    //dfs function implements dfs algorithm on the graph and find out tree edges ,cross edges and back edges
    long long int i,si;
    f[u]=1;
    si=ve[u].size();
    for(i=0;i<si;i++)
    {
    //finding out tree edges
    if(f[ve[u][i]]==0)
    {
    dfs(ve[u][i]);
    }
    }
    }
    long long int df(long long int n)
    {
    long long int co=0;
    long long i,j;
    for(i=0;i<n;i++)
    {
    if(f[i]==0)
    {
    ++co;
    dfs(i);
    }
    }
    return co;
    }
    int main()
    {
    long long int t,n,d,st,en,w,c,x[200],y[200],z[200],di,i,j,count;
     //freopen("cook.txt","r",stdin);
    scanf("%lld",&t);
    while(t--)
    {
    for(i=0;i<=200;i++)
    f[i]=0;
    for(i=0;i<=200;i++)
    ve[i].clear();
    scanf("%lld%lld",&n,&d);
    for(i=0;i<n;i++)
    {
    scanf("%lld%lld%lld",&x[i],&y[i],&z[i]);
    }
    if(n>1)
    {
    for(i=0;i<n;i++)
    {
    for(j=i+1;j<n;j++)
    {
    di=pow(x[j]-x[i],2)+(pow(y[j]-y[i],2))+(pow(z[j]-z[i],2));
    if(di<=(1.0*d*d))
    {
      ve[i].push_back(j);
      ve[j].push_back(i);
    }
    }
    }
    count=df(n);
    }
    else
    count=1;
    printf("%lld\n",count);
    }
    return 0;
    }

