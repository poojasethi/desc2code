#include<iostream>
#include<algorithm>
#include<limits.h>
#include<vector>
#include<stack>
#include<math.h>
#define mp make_pair
#define pb push_back
using namespace std;
bool *visit;
typedef long long ll;
vector<ll> *adj;
long long x[1000],y[1000],z[1000];
void mke_conn(ll n,ll d)
{
for(ll i=0;i<n;i++){
for(ll j=0;j<n;j++)
{
 if(i==j)continue;
if(sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])+(z[i]-z[j])*(z[i]-z[j]))<=d)
  adj[i].pb(j);
}
}
}
void dfs(ll node,ll n)
{
 visit[node]=true;
 for(ll j=0;j<adj[node].size();j++){
  if(visit[adj[node][j]]==false)
   dfs(adj[node][j],n);
 }
 }
int count_components(int n)
{
int count1=0;
 for(int i=0;i<n;i++)
 {
  if(visit[i]==false){
   dfs(i,n);count1++;}
 }
 return count1;
}
int main()
{
ll t,n,d,i,j;
cin>>t;
while(t--){
cin>>n>>d;
for(i=0;i<n;i++)
cin>>x[i]>>y[i]>>z[i];
adj=new vector<ll>[n+1];
mke_conn(n,d);
visit=new bool[n+1];
for(i=0;i<n;i++)
 visit[i]=false;
cout<<count_components(n)<<endl;
}
return 0;
}
