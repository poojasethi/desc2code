
#include <bits/stdc++.h>

using namespace std;

#define sf              scanf
#define pf              printf
#define fs              first
#define se              second
#define pb              push_back
#define ins             insert
#define Lb              lower_bound
#define Up              upper_bound
#define INF             (1<<30)
#define mem(a,b)        memset(a, b, sizeof(a))
#define MAX             100010
#define MAXR            100010
#define MAXC            100010

typedef long long ll;

const double PI = 2.0 * acos(0.0);
const double eps = 1e-9;

template < class T > T Abs(T x) { return x > 0 ? x : -x; }
template < class T > string toString(T n) { ostringstream ost; ost << n; ost.flush() ; return ost.str(); }
template < class T > inline T gcd(T a,T b) { if(a < 0) return gcd(-a,b); if(b < 0)return gcd(a,-b); return (b == 0) ? a : gcd(b ,a % b); }
template < class T > inline T lcm(T a,T b) { if(a < 0) return lcm(-a,b); if(b < 0)return lcm(a,-b); return a * (b / gcd(a , b)); }
template < class T > inline T sqr(T n) { return n * n; }
template < class T > T power(T n, int p)
{
    if(!p) return 1;
    else
    {
        T sum = sqr( power( n ,  p >> 1) );
        if(p & 1) sum =  n;
        return sum;
    }
}


//ll bigmod(ll num , ll p , ll mod)
//{
//    ll sum = 1 , temp = num;
//    while(p)
//    {
//        if(p & 1) sum = (sum * temp) % mod;
//        temp = (temp * temp) % mod; p = p >> 1;
//    }
//    return sum;
//}


/// S , E  , N , W
//int one [] = {1 ,0,-1, 0};
//int two [] = {0 ,1, 0,-1};
///S , SE , E , NE , N , NW , W , SW
//int one [] = {1 ,1 ,0,-1,-1,-1, 0, 1};
//int two [] = {0 ,1 ,1 ,1, 0,-1,-1,-1};
///Knight Direction
//int one[]={2 ,1 ,-1,-2,-2,-1, 1, 2};
//int two[]={1 ,2 , 2, 1,-1,-2,-2,-1};

///============================================================================================////


struct node {

    int x , y , z;
    node(){}
    node(int a , int b , int c) { x = a; y = b ; z = c; }
};
vector < int > bord[105];
node ve[105];
bool mark[105];


int dis(node a , node b)
{
    return sqrt( pow(a.x - b.x , 2) + pow(a.y - b.y , 2 ) + pow(a.z - b.z , 2) );
}

void dfs(int n)
{
    mark[n] = true;
    int len = bord[n].size();
    for(int i = 0 ; i < len ; ++i)
    {
        if(mark[bord[n][i]] == false) dfs(bord[n][i]);
    }
}


int main()
{
    int t , n , m , a , b , c;
    sf("%d" , &t);
    while(t--)
    {
        sf("%d %d" , &n , &m);
        for(int i = 1 ; i <= n ; ++i)
        {
            sf("%d %d %d" , &a , &b , &c);
            ve[i] = node(a , b , c);
        }
        for(int i = 0 ; i < n + 2 ; ++i)
        {
            mark[i] = false;
            bord[i].clear();
        }
        for(int i = 1 ; i <= n ; ++i)
        {
            for(int j = 1 ; j <= n ; ++j)
            {
                if(i == j) continue ;
                if(dis(ve[i] , ve[j]) <= m ) bord[i].push_back(j);
            }
        }
        int ans = 0;
        for(int i = 1 ; i <= n ; ++i)
        {
            if(mark[i] == false){ ++ans; dfs(i);}
        }
        pf("%d\n" , ans);
    }
    return 0;
}
