#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll arr1[101],arr2[101],arr3[101],d;
ll euclid(ll x1,ll y1,ll z1,ll x2,ll y2,ll z2)
{
    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2));
}
void dfs_visit(long long u,vector<bool>& visited,long long graph[101][101],long long n)
{
    long long i,j;
    visited[u]=true;
    for(i=0;i<n;i++)
    {
        if(u!=i && graph[u][i])
        {
            long long ver=i;
            if (!visited[ver])
            {
                dfs_visit(ver,visited,graph,n);
            }
        }
    }
}

long long dfs(long long n, long long graph[101][101])
{
    vector<bool> visited(n+1,false);
    long long i;
    long long ans =0;
    for(i=0;i<n;i++)
    {
        if(!visited[i])
        {
            dfs_visit(i,visited, graph,n);
            ans++;
        }
    }
    return ans;
}

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        long long i,j,n;
        scanf("%lld%lld",&n,&d);
        for(i=0;i<n;i++)
            scanf("%lld%lld%lld",&arr1[i],&arr2[i],&arr3[i]);
        long long graph[101][101]={0};
        for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
                if(i!=j && (euclid(arr1[i],arr2[i],arr3[i],arr1[j],arr2[j],arr3[j]))<= d)
                {
                    graph[i][j] = 1;
                    graph[j][i] = 1;
                }
            }
        }
        printf("%lld\n",dfs(n,graph));
    }
    return 0;
}
