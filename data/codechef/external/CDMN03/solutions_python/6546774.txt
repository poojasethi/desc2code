import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

public class Main {

    public static void main(String[] args) throws IOException {
        InputReader reader = new InputReader(System.in);
        int T = reader.readInt();
        for (int t=0; t<T; t++) {
            int N = reader.readInt();
            long D = reader.readLong();
            long[] X = new long[N];
            long[] Y = new long[N];
            long[] Z = new long[N];
            for (int n=0; n<N; n++) {
                X[n] = reader.readLong();
                Y[n] = reader.readLong();
                Z[n] = reader.readLong();
            }
            UnionFind uf = new UnionFind(N);
            int answer = N;
            for (int i=0; i<N; i++) {
                for (int j=i+1; j<N; j++) {
                    long dx = X[i]-X[j];
                    long dy = Y[i]-Y[j];
                    long dz = Z[i]-Z[j];
                    if (dx*dx+dy*dy+dz*dz <= D*D) {
                        if (uf.union(i, j)) {
                            answer--;
                        }
                    }
                }
            }
            System.out.println(answer);
        }
    }

    static class UnionFind {
        private final int[] group;
        
        public UnionFind(int size) {
            group = new int[size];
            Arrays.fill(group, -1);
        }

        public final int find(int x) {
            while (group[x] >= 0) {
                x = group[x];
            }
            return x;
        }

        public final boolean union(int x, int y) {
            x = find(x);
            y = find(y);
            if (x != y) {
                if (group[x] > group[y]) {
                    group[y] += group[x];
                    group[x] = y;
                } else {
                    group[x] += group[y];
                    group[y] = x;
                }
            }
            return (x != y);
        }

        public final int size(int x) {
            return -group[find(x)];
        }
    }

    static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public final int readInt() throws IOException {
            return (int)readLong();
        }

        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
                if (c == -1) throw new IOException();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return negative ? -res : res;
        }

        public final int[] readIntArray(int size) throws IOException {
            int[] array = new int[size];
            for (int i=0; i<size; i++) {
                array[i] = readInt();
            }
            return array;
        }

        public final long[] readLongArray(int size) throws IOException {
            long[] array = new long[size];
            for (int i=0; i<size; i++) {
                array[i] = readLong();
            }
            return array;
        }

        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }

}
