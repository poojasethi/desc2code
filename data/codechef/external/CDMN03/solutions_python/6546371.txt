#include <iostream>
#include <queue>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long ll;

 ll gxy[102],res[102];

inline ll Scan_f()
{
    ll noRead=0;
    //register char p=getchar_unlocked();
    register char p=getc(stdin);
    //for(;p<48 || p>57;p=getchar_unlocked());
    for(;p<48 || p>57;p=getc(stdin));
    //while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getchar_unlocked();}
    while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getc(stdin);}
    return noRead;
};

 int root(int i)
 {
     while(i!=gxy[i])
        i = gxy[i];
     return i;
 }

 void unions(int p,int q)
 {
     int i,j;
     i = root(p);
     j = root(q);
     if(i > j)
        gxy[j] = i;
     else if(j > i)
        gxy[i] = j;
 }

int main()
{
    ll T,d,n,x[202],y[202],z[202],i,tp,sol,j;
    ll dt[202][202];
    T = Scan_f();
    while(T > 0)
    {
        n = Scan_f();
        d = Scan_f();
        sol = 1;
        for(i=0;i<n;i++)
        {
            scanf("%lld %lld %lld",&x[i],&y[i],&z[i]);
        }
        for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
               dt[i][j] = ((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])+(z[i]-z[j])*(z[i]-z[j]));
            }
        }
        for(i=0;i<n;i++)
            gxy[i] = i;
        for(i=0;i<n;i++)
        {
            for(j=i+1;j<n;j++)
            {
                if(dt[i][j] <= d*d)
                {
                    unions(i,j);
                }
            }
        }
        for(i=0;i<n;i++)
            res[i] = root(i);
        sort(res,res+n);
        for(i=1;i<n;i++)
        {
            if(res[i-1] != res[i])
            {
                sol++;
            }
        }
        printf("%lld\n",sol);
        T--;
    }
    return 0;
}
