#include <bits/stdc++.h>
using namespace std;

double dist(double a,double b,double c)
{
	return sqrt(pow(a,2)+pow(b,2)+pow(c,2));

}
struct subset
{
    int parent;
    int rank;
};
int find(struct subset subsets[], int i)
{
    // find root and make root as parent of i (path compression)
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
 
    return subsets[i].parent;
}
 
// A function that does union of two sets of x and y
// (uses union by rank)
void Union(struct subset subsets[], int x, int y)
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
 
    // Attach smaller rank tree under root of high rank tree
    // (Union by Rank)
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
 
    // If ranks are same, then make one as root and increment
    // its rank by one
    else
    {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}


int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	
	
		 int n;
		double d;
		cin>>n>>d;
		int arr[n];
		double a[n],b[n],c[n];
		 int val[n];
		
		for( int i=0;i<n;i++)
		{
		
			cin>>a[i]>>b[i]>>c[i];
			arr[i]=i;
				val[i]=0;
		
		}


    struct subset *subsets =
        (struct subset*) malloc( n * sizeof(struct subset) );
 
    for (int v = 0; v < n; ++v)
    {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

 

		
		
		
		
		
		for(int i=0;i<n;i++)
		{	
			
			
			for(int j=i+1;j<n;j++)
			{
				if(dist(a[i]-a[j],b[i]-b[j],c[i]-c[j])<=d)
					{
						
      				 	 int x = find(subsets, arr[i]);
       				        	int y = find(subsets,arr[j]);
       				 
					Union(subsets, x, y);		
					
					
					}

			
			
			}
		
		
		}
		int count=0;
		for(int i=0;i<n;i++)
		{

			val[find(subsets, arr[i])]=1;

			
		
		
		}

				for(int i=0;i<n;i++)
		{
			if(val[i]==1)
				count++;
			
		
		
		}
		
		
		
	cout<<count<<endl;
	
	
	
	
	
	
	}



return 0;
}