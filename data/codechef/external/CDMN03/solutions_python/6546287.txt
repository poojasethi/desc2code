#include<stdio.h>
 
 
long long parent[1006],sum[1006];
 
long long max;
long long find(long long i)
    {
        long long j;
        if(parent[i]==i)
        return i;
        else
        j=find(parent[i]);
 
        //parent[i]=j;
        return j;
    }
void set_union(long long i,long long j)
    {
        long long x1,y1;
    x1=find(i);
    y1=find(j);
 
    //if(sum[x1]+sum[y1]>max&&x1!=y1)
    //max=sum[x1]+sum[y1];
 
    if(x1>y1)
      {
 
        parent[y1]=x1;
        sum[x1]=sum[x1]+sum[y1];
      }
    else if ( x1< y1)
       {
 
 
        parent[x1]=y1;
        sum[y1]=sum[x1]+sum[y1];
 
       }
 
    }
 
 
void solve()
{
 
long long  n,ar[1003][3],d,i,j,res[1003];
scanf("%lld%lld",&n,&d);
 
max=1;
for(i=0;i<1003;i++)
{
    parent[i]=i;
    sum[i]=1;
}
for(i=0;i<n;i++)
scanf("%lld%lld%lld",&ar[i][0],&ar[i][1],&ar[i][2]);
 
for(i=0;i<n;i++)
{
    for(j=i+1;j<n;j++)
{
    if((((ar[i][0]-ar[j][0])*(ar[i][0]-ar[j][0]))+((ar[i][1]-ar[j][1])*(ar[i][1]-ar[j][1]))+((ar[i][2]-ar[j][2])*(ar[i][2]-ar[j][2])))<=d*d)
    set_union(i,j);
}
}
 
for(i=0;i<n;i++)
res[i]=find(i);
 
 
long long temp;
 
for(i=0;i<n;i++)
{
    for(j=i+1;j<n;j++)
{
 
    if(res[i]<res[j])
    {
        temp=res[i];
        res[i]=res[j];
        res[j]=temp;
    }
}
}
long long  res1=1;
for(i=1;i<n;i++)
{
 //   printf("%lld ",res[i]);
    if(res[i]!=res[i-1])
    res1++;
 
}
 
printf("%lld\n",res1);
}
int main()
{
 
    int t;
    scanf("%d",&t);
    while(t--)
    solve();
 
    return 0;
}