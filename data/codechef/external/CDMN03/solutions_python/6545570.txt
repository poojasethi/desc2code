#include <bits/stdc++.h>
using namespace std;

struct my
{
   long long  int x;
   long long int y;
   long long int z;
};
long long int hash[102];

int findSet(int i) { return (hash[i] == i) ? i : (hash[i] = findSet(hash[i])); }
void unionSet(int i, int j) { hash[findSet(i)] = findSet(j); }

int main()
{
    int test;
    cin>>test;
    while(test--)
    {
        long long int n,d;
        cin>>n>>d;
        my node[n+2];
        for(int i=0;i<n;i++)
             cin>>node[i].x>>node[i].y>>node[i].z;

        for(int i=0;i<n;i++)
             hash[i]=i;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if( ((node[i].x-node[j].x)*(node[i].x-node[j].x) )+((node[i].y-node[j].y)*(node[i].y-node[j].y))+((node[i].z-node[j].z)*(node[i].z-node[j].z) )<= d*d   )
                           unionSet(j,i);
            }
        }
        long long  int res[n+2];
        for(int i=0;i<n;i++)
             res[i]=findSet(hash[i]);
        sort(res,res+n);
        long long  int curr=res[0];
        long long int count=1;
        for(int i=1;i<n;i++)
        {
            if(curr!=res[i])
            {
                count++;
                curr=res[i];
            }
        }
        cout<<count<<endl;
    }

    return 0;
}
