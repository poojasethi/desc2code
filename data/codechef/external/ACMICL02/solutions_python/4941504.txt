#include<stdio.h>
#include<stdlib.h>
#include<cstdio>
#include<math.h>
#include<iostream>
#define getcx getchar_unlocked
using namespace std;

int h;

inline void inp( int &n ) 
{
	n=0;
	int ch=getcx();int sign=1;
	while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
	
	while(  ch >= '0' && ch <= '9' )
	        n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
	n=n*sign;
}

struct data
{
	int item,satis;
	float ratio;
};

void exchange(struct data* d1,struct data* d2)
{
	struct data t;
	t = *d1;
	*d1 = *d2;
	*d2 = t;
}

void heap_sort(struct data* array)
{
	h--;
	int i,l,r;
	for(;h>0;)
	{
	exchange(&array[0],&array[h]);
	h--;
	i = 0;
	while(1)
		{
			l = 2*i+1;
			r = 2*i+2;
			if(l>h)
			{
				break;
			}
			if(r>h)
			{
				if(array[l].ratio<array[i].ratio)
				{
					exchange(&array[i],&array[l]);
				}
				i = l;
				break;
			}
			if(array[l].ratio<array[r].ratio)
			{
				if(array[l].ratio<array[i].ratio)
				{
					exchange(&array[i],&array[l]);
				}
				i = l;
			}
			else
			{
				if(array[r].ratio<array[i].ratio)
				{
					exchange(&array[i],&array[r]);
				}
				i = r;
			}
		}
	}
	
}
	
void insert_minheap(struct data* array,int item,float ratio,int satis)
{
	array[h].item = item;
	array[h].ratio = ratio;
	array[h].satis = satis;
	int i = h,p;
	while(i!=0)
	{
		p = (i-1)/2;
		if(array[i].ratio<array[p].ratio)
		{
			exchange(&array[i],&array[p]);
		}
		else
		{
			break;
		}
		i = p;
	}
	h++;
}
	
int main()
	{
	int n,m;
	int item, satis;
	float ratio;
	inp(n);
	inp(m);
	while(!(n==0 && m==0))
	{
	struct data* array = (struct data*)malloc(sizeof(struct data)*m);
	h = 0;
	for(int i=0;i<m;i++)
		{
	
		inp(item);
		inp(satis);
		
		
		if(item==0)
		 ratio = 1999;
		else
		 ratio = (1.0 * satis)/(item);
		 insert_minheap(array,item,ratio,satis);
		}
		heap_sort(array);
		int sum=0;
		satis=0;
	for(int i=0;i<m;i++)
		{
		if(sum<n)
			{
			sum=sum+array[i].item;
			satis=satis+array[i].satis;
			if(sum>n)
				{
				sum=sum-array[i].item;
				satis=satis-array[i].satis;
				break;
				}
			}
		}
	printf("%d %d\n",sum,satis);
	inp(n);
	inp(m);
	}
}