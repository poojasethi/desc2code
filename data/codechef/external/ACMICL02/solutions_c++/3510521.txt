#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define iter(container,it) typeof(container.begin()) it
#define all(x) x.begin(),x.end()
#define fastin std::ios::sync_with_stdio(false);cin.tie(NULL)
#define cout_precision(x) cout<<std::fixed<<setprecision(x)
using namespace std;
#ifndef ONLINE_JUDGE
#include <debug.h>
#endif
#define SET(p) memset(p,-1,sizeof(p))
#define CLR(p) memset(p,0,sizeof(p))
#define S(n) scanf("%d",&n)
#define P(n) printf("%d\n",n)
pair<int,int> knapsack(const vector<int>& weights,const vector<int>& values,const int& weight)
{
    /*..........................................................
    ..... weights[] and values[] should be 1-indexed !!!!! .....
    ..........................................................*/

    int size=(int)weights.size(),i,j;
    vector<vector<int> > dp_value(2,vector<int> (weight+1,0));
    vector<vector<int> > dp_weight=dp_value;
    vector<int> chosen_ones;
    for(i=1; i<size; i++)
    {
        for(j=0; j<=weight; j++)
        {
            dp_value[i&1][j]=dp_value[(i-1)&1][j];
            dp_weight[i&1][j]=dp_weight[(i-1)&1][j];
            if(weights[i]<=j)
            {
                if(dp_value[(i-1)&1][j-weights[i]]+values[i]>dp_value[(i-1)&1][j])
                {
                    dp_value[i&1][j]=dp_value[(i-1)&1][j-weights[i]]+values[i];
                    dp_weight[i&1][j]=dp_weight[(i-1)&1][j-weights[i]]+weights[i];
                    chosen_ones.pb(i);
                }
                else if(dp_value[(i-1)&1][j-weights[i]]+values[i]==dp_value[(i-1)&1][j])
                {
                    if(dp_weight[(i-1)&1][j-weights[i]]+weights[i]<dp_weight[(i-1)&1][j])
                    {
                        dp_weight[i&1][j]=dp_weight[(i-1)&1][j-weights[i]]+weights[i];
                        chosen_ones.pb(i);
                    }
                }
            }
        }
        dp_value[(i+1)&1]=dp_value[i&1];
        dp_weight[(i+1)&1]=dp_weight[i&1];
    }

    return mp(dp_weight[(size-1)&1][weight],dp_value[(size-1)&1][weight]);
}
int main()
{
    int weight,n,i;
    fastin;
    while(1)
    {
        cin>>weight>>n;
        if(weight==0&&n==0)
            break;
        vector<int> weights(n+1,0),values(n+1,0);
        for(i=1;i<=n;i++)
        {
            cin>>weights[i]>>values[i];
        }
        pair<int,int> ans=knapsack(weights,values,weight);
        cout<<ans.first<<" "<<ans.second<<"\n";
    }
}
