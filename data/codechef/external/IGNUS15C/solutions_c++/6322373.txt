// An easy concept, but using Lucas theorem disturbs me a lot!
#include<stdio.h>
#include<iostream>
#include<vector>
using namespace std;
#define ll long long
#define mod 100003

ll countFact(ll n, ll p)
{
    ll k=0;
    while (n>=p)
    {
        k+=n/p;
        n/=p;
    }
    return k;
}
 
/* This function calculates (a^b)%MOD */
long long pow(ll a, ll b, ll MOD)
{
    long long x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD; 
        b /= 2;
    }
    return x;
}
 
/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(ll n,ll MOD)
{
    return pow(n,MOD-2,MOD);
}
 
long long factMOD(ll n, ll MOD)
{
    long long res = 1; 
    while (n > 0)
    {
        for (ll i=2, m=n%MOD; i<=m; i++)
            res = (res * i) % MOD;
        if ((n/=MOD)%2 > 0) 
            res = MOD - res;
    }
    return res;
}
 
long long C(ll n, ll r, ll MOD)
{
    if (countFact(n, MOD) > countFact(r, MOD) + countFact(n-r, MOD))
        return 0;
 
    return (factMOD(n, MOD) *
            ((InverseEuler(factMOD(r, MOD), MOD) * 
            InverseEuler(factMOD(n-r, MOD), MOD)) % MOD)) % MOD;
}

int main()
{
	int test;scanf("%d",&test);
	while(test--)
	{
		ll n,k;scanf("%lld%lld",&n,&k);
		if(k==1)
		{
			printf("%lld\n",n%mod);
			continue;
		}
		ll ans=0;
		if(n-k-1>=k)
			ans+=C(n-k-1,k,mod);
		if(n-k-1>=k-2)
			ans+=C(n-k-1,k-2,mod);
		if(n-k-1>=k-1)
			ans+=2*C(n-k-1,k-1,mod);
		printf("%lld\n",(ans+mod)%mod);
	}
	return 0;
}