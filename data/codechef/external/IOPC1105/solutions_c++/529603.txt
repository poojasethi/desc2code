#include <cstdio>
#include <iostream>
#include <vector>
#include <string>
#include <string.h>
#include <memory.h>
#include <utility>
#include <queue>
#include <algorithm>
#include <cmath>
#include <map>
#include <set>
#include <ctime>
using namespace std;
 
#define mp make_pair
#define pb push_back
#define sz(a) int((a).size())
#define forn(i, n) for (int i=0; i<(n); ++i)
 
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
 
const int maxn = 505;
const int maxm = 5000000;
const int inf = 1000000000;
 
 
vector<pii> g[maxn];
int cap[maxm], cost[maxm];
int V, E;
 
inline void add(int x, int y, int ca, int co)
{
  cap[E] = ca, cost[E] = co, g[x].pb(mp(y, E++));
  cap[E] = 0, cost[E] = -co, g[y].pb(mp(x, E++));
}
 
int d[maxn], p[maxn], pe[maxn];
int u[maxn];
vector<int> q, nq;
int n, m;
 
bool bf(int S, int T)
{
  forn (i, V) d[i] = inf, u[i] = 0, p[i] = -1;
  q.clear();
  d[S] = 0;
  q.pb(S);
  for (int it=1; !q.empty(); ++it)
  {
    nq.clear();
    forn (i, sz(q))
    {
      int x = q[i];
      forn (j, sz(g[x]))
      {
        int y = g[x][j].first, e = g[x][j].second;
        if (d[y] > d[x]+cost[e] && cap[e] > 0)
        {
          d[y] = d[x]+cost[e];
          p[y] = x, pe[y] = e;
          if (u[y] != it)  u[y] = it, nq.pb(y);
        }
      }
    }
    q = nq;
  }
  return d[T] != inf;
}
 
int mcmf(int S, int T)
{
  int flow = 0, res = 0;
  while (bf(S, T))
  {
    int push = inf;
    for (int x=T; p[x]!=-1; x=p[x])
      push = min(push, cap[pe[x]]);
    flow += push;
    for (int x=T; p[x]!=-1; x=p[x])
      res += cost[pe[x]] * push, cap[pe[x]] -= push, cap[pe[x]^1] += push;
  }
  if (flow != n) return -1;
  return res;
}
 
int main()
{
  int tc; scanf("%d", &tc);
  while (tc--)
  {
    scanf("%d %d", &n, &m);
    V = 2*n+2;
    int S = V-2, T = V-1;
    E = 0;
    forn (i, V) g[i].clear();
    forn (i, m)
    {
      int x, y, z; scanf("%d %d %d", &x, &y, &z);
      --x, --y;
      add(x, y+n, 1, z);
    }
    forn (i, n)
    {
      add(S, i, 1, 0);
      add(i+n, T, 1, 0);
    }
    int res = mcmf(S, T);
    if (res == -1) puts("Impossible");
    else printf("%d\n", res);
  }
 
 
  return 0;
} 