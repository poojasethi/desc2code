#include <bits/stdc++.h>

using namespace std;
const int MOD = 10000007;

int t, k;
long long n;

class matrix {
public:
        long long mat[50][50];
        matrix() {
                memset(mat, 0, sizeof(mat));
        }
        matrix(int val) {
                for (int i = 0; i < 50; ++i)
                        for (int j = 0; j < 50; ++j)
                                this->mat[i][j] = val;
        }
};
matrix eye() {
        matrix ret;
        for (int i = 0; i < 50; ++i)
                ret.mat[i][i] = 1;
        return ret;
}
matrix mul(matrix a, matrix b) {
        matrix c;
        for (int i = 0; i < max(4*k, 2); ++i)
                for (int j = 0; j < max(4*k, 2); ++j)
                        for (int o = 0; o < max(4*k, 2); ++o)
                                c.mat[i][o] = (c.mat[i][o] + a.mat[i][j] * b.mat[j][o]) % MOD;
        return c;
}
matrix expo(matrix a, long long x) {
        if (x == 0) return eye();
        if (x == 1) return a;
        matrix ret = expo(a, x/2);
        matrix ret1 = mul(ret, ret);
        if (x&1)
                return mul(ret1, a);
        else
                return ret1;
}
int fibonacci(long long x) {
        matrix fibo(1);
        fibo.mat[0][0] = 0;
        matrix ret = expo(fibo, x);
        return ret.mat[1][1];
}
matrix transform(int k) {
        matrix ret;
        for (int ff = 0; ff < k; ++ff) {
                for (int ss = 0; ss < 2; ++ss) {
                        for (int tt = 0; tt < 2; ++tt) {
                                for (int solver = 0; solver < 3; ++solver) {
                                        int nff = ff, nss = ss, ntt = tt;
                                        if (solver == 0) {
                                                nff = (nff+1)%k;
                                                nss = 0;
                                        } else if (solver == 1) {
                                                if (nss == 1) continue;
                                                nss = 1;
                                        } else {
                                                ntt = 1;
                                                nss = 0;
                                        }
                                        int prev = 4*ff + 2*ss + tt;
                                        int next = 4*nff + 2*nss + ntt;
                                        ret.mat[prev][next]++;
                                        // cout << "@" << ret.mat[prev][next] << endl;
                                }
                        }
                }
        }
        return ret;
}
int main() {
        ios_base::sync_with_stdio(0);
        // freopen("ms.txt", "wb", stdout);
        cin >> t;
        while (t--) {
                cin >> n >> k;
                if (k == 0) {
                        cout << fibonacci(n+1) << endl;
                        continue;
                } else {
                        matrix tee = transform(k);
                        matrix res = expo(tee, n);
                        // 1 = 4*0 + 2*0 + 1
                        // 3 = 4*0 + 2*1 + 1
                        int ans = (res.mat[0][1] + res.mat[0][3]) % MOD;
                        cout << ans << endl;
                }
        }
        return 0;
}

