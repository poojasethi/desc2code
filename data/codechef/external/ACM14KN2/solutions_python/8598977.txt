# include <bits/stdc++.h>
using namespace std;
long long int n,mod=10000007;
int k;

vector <vector <long long int> > mult(vector < vector <long long int> > &A,vector <vector <long long int> > &B)
{
        vector < vector <long long int> > ans(4*k,vector <long long int> (4*k,0));
        for (int i = 0; i < 4*k; ++i)
        {
                for (int j = 0; j < 4*k; ++j)
                {
                        for (int l = 0; l < 4*k; ++l)
                        {
                                ans[i][j]+=(A[i][l] * B[l][j]);
                                ans[i][j]%=mod;
                        }
                }
        }
        return ans;
}
vector < vector <long long int> > power(vector <vector <long long int> > &A,long long int b)
{
        if(b==1)
                return A;
        vector < vector <long long int> > temp,ans=power(A,b/2);
        temp=mult(ans,ans);
        if(b%2)
        {
                ans=mult(temp,A);
                return ans;
        }
        return temp;
}
long long int fibo_fast(long long int n)
{

        long long int ans[2][2],fibonacci[2][2]={{1,1},{1,0}},result[2][2]={{1,0},{0,1}};

        while(n)

        {

                if(n%2==1)

                {

                        memset(ans,0,sizeof(ans));

                        for(int i=0;i<2;i++)

                                for(int j=0;j<2;j++)

                                        for(int k=0;k<2;k++)

                                                ans[i][j]=(ans[i][j]+result[i][k]*fibonacci[k][j])%mod;

                        for(int i=0;i<2;i++)

                                for(int j=0;j<2;j++)

                                        result[i][j]=ans[i][j];

                }

                memset(ans,0,sizeof(ans));

                for(int i=0;i<2;i++)

                        for(int j=0;j<2;j++)

                                for(int k=0;k<2;k++)

                                        ans[i][j]=(ans[i][j]+fibonacci[i][k]*fibonacci[k][j])%mod;

                for(int i=0;i<2;i++)

                        for(int j=0;j<2;j++)

                                fibonacci[i][j]=ans[i][j];

                n/=2;

        }

        return result[0][1];

}
int pos(int a,int b,int c)
{
        return (4*a)+(2*b)+c;
}
int main()
{
        long long  t,prev;
        cin>>t;
         
        while(t--){
        
                cin>>n>>k;
                vector <vector <long long int> > a(4*k,vector< long long int >(4*k,0));
                if(k==0)
                {
                        if(n==1)
                                cout<<1<<endl;
                        else
                                cout<<fibo_fast(n+2)<<endl;
                        continue;
                }

                for(int i=0;i<k;++i)
                {
                        /*
                         *f(n,i,j,k) = 

                         //0 solves the n'th problem
                         //
                         //f(n-1,i-1,j,k) +
                         //
                         ////1 solves the n'th problem
                         //
                         //f(n-1,i,1-j,k) +
                         //
                         ////2 solves the n'th problem
                         //
                         //f(n-1,i,j,k) + f(n-1,i,j,1-k)
                         * */
                        
                    prev=(i-1);
                    if(prev<0)
                            prev+=k;
                    //A taking the ith task
                    a[pos(i,0,0)][pos(prev,0,0)]++;
                    a[pos(i,0,1)][pos(prev,0,1)]++;
                    a[pos(i,0,0)][pos(prev,1,0)]++;
                    a[pos(i,0,1)][pos(prev,1,1)]++;

                    //B taking the ith task

                    a[pos(i,1,0)][pos(i,0,0)]++;
                    a[pos(i,1,1)][pos(i,0,1)]++;

                    //C taking the ith task

                    a[pos(i,0,1)][pos(i,0,0)]++;
                    a[pos(i,0,1)][pos(i,0,1)]++;
                    a[pos(i,0,1)][pos(i,1,0)]++;
                    a[pos(i,0,1)][pos(i,1,1)]++;

                }
                
                vector< vector < long long int > > ans=power(a,n);
                long long  yes=(ans[pos(0,0,1)][pos(0,0,0)]+ans[pos(0,1,1)][pos(0,0,0)])%mod;
                cout<<yes<<endl;
        
        }    
        return 0;
}
