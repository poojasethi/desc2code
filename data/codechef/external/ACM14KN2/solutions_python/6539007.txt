    #include <vector>
    #include <list>
    #include <map>
    #include <set>
    #include <deque>
    #include <stack>
    #include <bitset>
    #include <algorithm>
    #include <functional>
    #include <numeric>
    #include <utility>
    #include <sstream>
    #include <iostream>
    #include <iomanip>
    #include <cstdio>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #include <fstream>
    #include <cstring>
    #include <cassert>
    #include <queue>
    using namespace std;
    long long int n,mod=10000007;
    int k;
    vector <vector <long long int> > mult(vector < vector <long long int> > &A,vector <vector <long long int> > &B)
    {
    vector < vector <long long int> > ans(4*k,vector <long long int> (4*k,0));
    for (int i = 0; i < 4*k; ++i)
    {
    for (int j = 0; j < 4*k; ++j)
    {
    for (int l = 0; l < 4*k; ++l)
    {
    ans[i][j]+=(A[i][l] * B[l][j]);
    ans[i][j]%=mod;
    }
    }
    }
    return ans;
    }
    vector < vector <long long int> > power(vector <vector <long long int> > &A,long long int b)
    {
    if(b==1)
    return A;
    vector < vector <long long int> > temp,ans=power(A,b/2);
    temp=mult(ans,ans);
    if(b%2)
    {
    ans=mult(temp,A);
    return ans;
    }
    return temp;
    }
    //fibo_fast from http://krishnannakul.wordpress.com/2012/07/16/matrix-exponentiation-olog-n-solution-to-find-the-nth-fibonacci-number/
    long long int fibo_fast(long long int n)
    {
    long long int ans[2][2],fibonacci[2][2]={{1,1},{1,0}},result[2][2]={{1,0},{0,1}};
    while(n)
    {
    if(n%2==1)
    {
    memset(ans,0,sizeof(ans));
    for(int i=0;i<2;i++)
    for(int j=0;j<2;j++)
    for(int k=0;k<2;k++)
    ans[i][j]=(ans[i][j]+result[i][k]*fibonacci[k][j])%mod;
    for(int i=0;i<2;i++)
    for(int j=0;j<2;j++)
    result[i][j]=ans[i][j];
    }
    memset(ans,0,sizeof(ans));
    for(int i=0;i<2;i++)
    for(int j=0;j<2;j++)
    for(int k=0;k<2;k++)
    ans[i][j]=(ans[i][j]+fibonacci[i][k]*fibonacci[k][j])%mod;
    for(int i=0;i<2;i++)
    for(int j=0;j<2;j++)
    fibonacci[i][j]=ans[i][j];
    n/=2;
    }
    return result[0][1];
    }
    int pos_of(int a,int b,int c)
    {
    return (4*a)+(2*b)+c;
    }
    int main()
    {
    // freopen("input.txt","r",stdin);
    int t;
    cin>>t;
    while(t--)
    {
    cin>>n>>k;
    if(k==0)
    {
    if(n==1)
    cout<<"1\n";
    else
    cout<<fibo_fast(n+2)<<"\n";
    continue;
    }
    vector < vector <long long int> > A(4*k,vector <long long int> (4*k,0));
    int prev;
    for (int i = 0; i < k; ++i)
    {
    prev = i-1;
    if(prev < 0)
    prev+=k;
    //for a,0,0
    A[pos_of(i,0,0)][pos_of(prev,0,0)]++;
    A[pos_of(i,0,0)][pos_of(prev,1,0)]++;
    //for a,0,1
    A[pos_of(i,0,1)][pos_of(prev,0,1)]++;
    A[pos_of(i,0,1)][pos_of(prev,1,1)]++;
    A[pos_of(i,0,1)][pos_of(i,0,0)]++;
    A[pos_of(i,0,1)][pos_of(i,0,1)]++;
    A[pos_of(i,0,1)][pos_of(i,1,0)]++;
    A[pos_of(i,0,1)][pos_of(i,1,1)]++;
    //for a,1,0
    A[pos_of(i,1,0)][pos_of(i,0,0)]++;
    //for a,1,1
    A[pos_of(i,1,1)][pos_of(i,0,1)]++;
    }
    // for (int i = 0; i < 4*k; ++i)
    // {
    // for (int j = 0; j < 4*k; ++j)
    // {
    // cout<<A[i][j]<<" ";
    // }
    // cout<<"\n";
    // }
    // cout<<"\n";
    vector < vector <long long int> > ans=power(A,n);
    // for (int i = 0; i < 4*k; ++i)
    // {
    // for (int j = 0; j < 4*k; ++j)
    // {
    // cout<<ans[i][j]<<" ";
    // }
    // cout<<"\n";
    // }
    long long int fans=ans[pos_of(0,0,1)][0]+ans[pos_of(0,1,1)][0];
    fans%=mod;
    cout<<fans<<"\n";
    }
    return 0;
    } 
