#include<iostream>
#include<cstdio>
#include<cassert>
#include<cmath>
#include<vector>
#include<set>
#include<map>
#include<string>
#include<algorithm>
#define vvl vector<vector<long long> >
#define vvi vector<vector<long long> >
long long mod=10000007;
using namespace std;
long long temp[2][2];

void MatrixMult(long long A[][2], long long B[][2])
{
	for(int i = 0; i < 2; i++)
		for(int j = 0; j < 2; j++)
		{
			temp[i][j] = 0;
			for(int k = 0; k < 2; k++)
				temp[i][j] =(temp[i][j] + (A[i][k] * B[k][j]) % mod) % mod;
		}
	for(int i = 0; i < 2; i++)
		for(int j = 0; j < 2; j++)
			A[i][j] = temp[i][j];
}

long long FindFibonacci(long long n)
{
	if (n == 0)
		return 0;
	if (n == 1)
		return 1;
	n--;
	long long ans[2][2];
	long long res[2][2];

	res[0][0] = res[1][1] = 1;
	res[0][1] = res[1][0] = 0;
	ans[0][0] = ans[0][1] = ans[1][0] = 1;
	ans[1][1] = 0;
	while(n)
	{
		if(n & 1)
			MatrixMult(res, ans);
		MatrixMult(ans, ans);
		n >>= 1;
	}
	return (res[0][0] + res[0][1]) % mod;
}

void mat_mult(vector<vector<long long> > a,vector<vector<long long> > b, vector<vector<long long> > &c)
{
	assert (a.size()!=0);
	assert (b.size()!=0);
	assert (a[0].size()==b.size());
	c.resize(a.size());
	for (int i=0;i<c.size();++i)c[i].resize (b[0].size());
	for (int i=0;i<a.size();++i){
		for (int k=0;k<b[0].size();++k){
			c[i][k] = 0;
			for (int j=0;j<a[i].size();++j) {
				c[i][k] = ( c[i][k] + ( a[i][j] * b[j][k] ) % mod ) % mod;
			}
		}
	}
}
vector<vector< vvl > > pre(11,vector< vvl > (65));
int rev(int a,int b,int c)
{
	int ans=(a<<2)+(b<<1)+c;
	return ans;
}
void eye (vvl &a, int dim){
	a.resize (dim);
	for (int i=0;i<dim;++i){a[i].resize(dim);a[i][i]=1;}
}
void trans(vvl a,vvl &b)
{
	int q=a.size(),w=a[0].size();
	b.resize(w);
	for(int i=0;i<w;++i)
	{
		b[i].resize(q);
		for(int j=0;j<q;++j)
		{
			b[i][j]=a[j][i];
		}
	}
}
void init(int k)
{
	vvl mat(4*k,vector<long long> (4*k,0));
	int size=4*k;
	for(int i=0;i<size;++i)
	{
		int a,b,c;
		c=i&1;
		b=(i>>1)&1;
		a=i>>2;
		mat[i][rev((a+1)%k,b,0)]++;
		if(c==0)
		{
			mat[i][rev(a,b,1)]++;	
		}	
		mat[i][rev(a,1,0)]++;
	}
	pre[k][1]=mat;
}
void doit()
{
	long long n,k;
	scanf("%lld%lld",&n,&k);
	if(k==0)
	{	
		printf("%lld\n",FindFibonacci(n+1));
	}
	else
	{
		vvl ans;
		eye(ans,4*k);
		int i=1;
		while(n)
		{
			vvl p=pre[k][i];
			if(n%2==1)mat_mult(ans,p,ans);
			i++;
			n/=2;
		}
		long long v=ans[0][2]+ans[0][3];
		v%=mod;
		printf("%lld\n",v);
	}
}
int main()
{
	for(int i=1;i<=10;++i)init(i);
	for(int i=1;i<=10;++i)
	{
		for(int j=2;j<=64;++j)
		{
			vvl p=pre[i][j-1];
			mat_mult(pre[i][j-1],p,pre[i][j]);
		}
	}
	int t;
	scanf("%d",&t);
	while(t--)
	{
		doit();
	}
	return 0;
}
