#include <bits/stdc++.h>
using namespace std;

#define VI vector<long long>
#define VVI vector< VI >

const int MOD = 1e7 + 7;

VVI give(int k) {
    VVI A = VVI(4*k, VI(4*k, 0));

    int num = 0;
    for(int i=0; i<k; i++) {

        A[4*i][((i-1)*4 + 4*k) % (4*k)] = 1;
        A[4*i][((i-1)*4 + 4*k + 2) % (4*k)] = 1;

        A[4*i+1][((i-1)*4 + 4*k+1) % (4*k)] += 1;
        A[4*i+1][((i-1)*4 + 4*k + 3) % (4*k)] += 1;
        A[4*i+1][4*i+1] += 1;
        A[4*i+1][4*i+3] += 1;
        A[4*i+1][4*i] += 1;
        A[4*i+1][4*i+2] += 1;

        A[4*i+2][4*i] = 1;

        A[4*i+3][4*i+1] = 1;
    }
    return A;
}

VVI iden(int k) {
    VVI A = VVI(k, VI(k, 0));
    for(int i=0; i<k; i++) {
        A[i][i] = 1;
    }
    return A;
}


VVI mul(VVI A, VVI B) {
    VVI C = VVI(A.size(), VI(B.size(), 0));

    for(int i=0; i<C.size(); i++) {
        for(int j=0; j<A.size(); j++) {
            for(int k=0; k<B.size(); k++) {
                C[i][j] += (A[i][k] * B[k][j]) % MOD;
                if(C[i][j] >= MOD) C[i][j] -= MOD;
            }
        }
    }

    return C;
}

VVI powr(VVI A, long long b) {
    VVI ret = iden((int)A.size());

    while(b) {
        if(b&1) ret = mul(ret, A);
        A = mul(A,A);
        b >>= 1;
    }
    return ret;
}

int main() {
    ios_base::sync_with_stdio(0);
    int t; cin >> t;
    while(t--) {
        long long n; int k;
        cin >> n >> k;
        long long ans = 0;
        if(n==1 && k==0)
            ans = 1;
        else if(k==0) {
            VVI A = VVI(2, VI(2, 0));
            A[0][0] = 1; A[0][1] = 1;
            A[1][0] = 1; A[1][1] = 0;
            A = powr(A, n+2);
            ans = A[0][1];
        }
        else {
            VVI A = give(k);

            A = powr(A, n);
            ans = A[1][0] + A[3][0];
            if(ans >= MOD)
                ans -= MOD;
        }
        cout << ans << endl;
    }
}