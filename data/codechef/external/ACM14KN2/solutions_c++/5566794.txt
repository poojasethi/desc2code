#include <bits/stdc++.h>
#define lli long long
#define M 10000007

using namespace std;

lli sz;
lli A[62][62];
lli res[62][62];

void mul(lli A1[][62], lli A2[][62])
{
    lli C[62][62];
    for ( lli i = 0; i < sz; i++ ) {
        for ( lli j = 0; j < sz; j++ ) {
            C[i][j] = 0;
            for ( lli k = 0; k < sz; k++ ) {
                C[i][j] = (C[i][j] + (A1[i][k]*A2[k][j])%M)%M;
            }
        }
    }
    for ( lli i = 0; i < sz; i++ ) {
        for ( lli j = 0; j < sz; j++ ) A1[i][j] = C[i][j];
    }
    return;
}
void pre(lli k)
{
    if ( k == 0 ) sz = 2;
    else sz = 4LL*k + 6LL;
    for ( lli i = 0; i < sz; i++ ) {
        for ( lli j = 0; j < sz; j++ ) {
            A[i][j] = 0;
            if ( i == j ) res[i][j] = 1;
            else res[i][j] = 0;
        }
    }
    if ( k != 0 ) {
        for ( lli fs = 0; fs < k; fs++ ) {
            for ( lli sc = 0; sc < 2; sc++ ) {
                for ( lli th = 0; th < 2; th++ ) {
                    for ( lli who = 0; who < 3; who++ ) {
                        lli new_fs,new_sc,new_th;
                        new_fs = fs;
                        new_sc = sc;
                        new_th = th;
                        if ( who == 0 ) new_fs = (new_fs+1)%k, new_sc = 0;
                        else if ( who == 1 ) {
                            if ( sc == 1) continue;
                            else new_sc = 1;
                        }
                        else new_th = new_th | 1, new_sc = 0;
                        lli curr_state =  4LL*fs + 2LL*sc + th;
                        lli next_state = 4LL*new_fs + 2LL*new_sc + new_th;
                        A[curr_state][next_state]++;
                    }
                }
            }
        }
    }
    else {
        A[0][0] = A[0][1] = A[1][0] = 1LL;
        A[1][1] = 0LL;
    }
    return;
}

void fast_pow(lli n)
{
    while ( n > 0 ) {
        if ( n&1 ) mul(res,A);
        mul(A,A);
        n >>= 1;
    }
    return;
}

int main()
{
    lli t;
    lli n,k,ans;
    cin >> t;
    while ( t-- ) {
        cin >> n >> k;
        pre(k);
        fast_pow(n);
        if ( sz != 2 ) ans = (res[0][3]+res[0][1])%M;
        else {
            ans = (res[0][0]*1LL)%M;
            ans = (ans + res[0][1])%M;
            if ( n == 1 ) ans = 1LL;
            else if ( n == 2 ) ans = 3LL;
        }
        cout << ans << endl;
    }
    return 0;
}
