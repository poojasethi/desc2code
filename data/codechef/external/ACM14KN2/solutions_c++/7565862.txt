#include <bits/stdc++.h>

#define ll long long
#define mp make_pair
#define pb push_back
#define ld double

using namespace std;

const ll mod = 10000007;

struct matrix {
	int m, n;
	ll a[42][42];
} mtdv, tmp;

matrix mul(matrix a, matrix b) {
	matrix c;
	c.m = a.m;
	c.n = b.n;
	for (int i = 1; i <= c.m; ++i) {
		for (int j = 1; j <= c.n; ++j) {
			c.a[i][j] = 0;
			for (int k = 1; k <= a.n; ++k)
				c.a[i][j] = (c.a[i][j] + a.a[i][k] * b.a[k][j]) % mod;
		}
	}
	return c;
}

matrix power(matrix a, ll n) {
	if (!n)
		return mtdv;
	tmp = power(a, n >> 1);
	tmp = mul(tmp, tmp);
	if (n & 1ll)
		tmp = mul(tmp, a);
	return tmp;
}

ll n;
int K;
matrix c, v;

int cs(int i, int j, int k) {
	return i * 4 + j * 2 + k + 1;
}

void solve0() {
	mtdv.m = mtdv.n = 2;
	for (int i = 1; i <= mtdv.m; ++i)
		for (int j = 1; j <= mtdv.n; ++j)
			mtdv.a[i][j] = (i == j);
	c.m = c.n = 2;
	c.a[1][1] = 0;
	c.a[1][2] = 1;
	c.a[2][1] = 1;
	c.a[2][2] = 1;
	v.m = 2;
	v.n = 1;
	v.a[1][1] = v.a[2][1] = 1;
	c = power(c, n - 1);
	c = mul(c, v);
	printf("%lld\n", (c.a[1][1] + c.a[2][1]) % mod);
}

void solve() {
	scanf("%lld%d", &n, &K);
	if (!K) {
		solve0();
		return;
	}
	mtdv.m = mtdv.n = 4 * K;
	for (int i = 1; i <= mtdv.m; ++i)
		for (int j = 1; j <= mtdv.n; ++j)
			mtdv.a[i][j] = (i == j);
	c.m = c.n = 4 * K;
	for (int i = 1; i <= c.m; ++i)
		for (int j = 1; j <= c.n; ++j)
			c.a[i][j] = 0;
	for (int i = 0; i < K; ++i) {
		for (int j = 0; j <= 1; ++j) {
			for (int k = 0; k <= 1; ++k) {
				int u = cs(i, j, k);
				if (j)
					c.a[u][cs(i, 0, k)]++;
				else {
					c.a[u][cs((i - 1 + K) % K, 0, k)]++;
					c.a[u][cs((i - 1 + K) % K, 1, k)]++;
					if (k) {
						c.a[u][cs(i, 0, 0)]++;
						c.a[u][cs(i, 0, 1)]++;
						c.a[u][cs(i, 1, 0)]++;
						c.a[u][cs(i, 1, 1)]++;
					}
				}
			}
		}
	}
//	for (int i = 1; i <= c.m; ++i) {
//		for (int j = 1; j <= c.n; ++j)
//			printf("%d ", c.a[i][j]);
//		printf("\n");
//	}
	v.m = 4 * K;
	v.n = 1;
	for (int i = 1; i <= v.m; ++i)
		v.a[i][1] = 0;
	v.a[cs(1 % K, 0, 0)][1]++;
	v.a[cs(0, 1, 0)][1]++;
	v.a[cs(0, 0, 1)][1]++;
	c = power(c, n - 1);
	c = mul(c, v);
	printf("%lld\n", (c.a[cs(0, 0, 1)][1] + c.a[cs(0, 1, 1)][1]) % mod);
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	while (t--) {
		solve();
	}
#ifdef LOCAL
	printf("\n%.3lf s\n", (double) clock() / (double) CLOCKS_PER_SEC);
#endif
}
