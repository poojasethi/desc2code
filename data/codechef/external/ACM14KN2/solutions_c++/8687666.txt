#include<cstdio>
#include<iostream>
#include<algorithm>
using namespace std;
#define mod 10000007
long long int fib(long long int n)
{
    n-=1;
    long long int X[3][3],Y[3][3];
    Y[1][1]=1;
    Y[1][2]=1;
    Y[2][1]=1;
    Y[2][2]=0;

    X[1][1]=1;
    X[1][2]=0;
    X[2][1]=0;
    X[2][2]=1;

    int cnt=2;
    while(n>0)
    {
        if(n&1)
        {
            //x=x*y
            long long int tmp[3][3];
            for(int i=1; i<=cnt; i++)
            {
                for(int j=1; j<=cnt; j++)
                {
                    tmp[i][j]=0;
                    for(int k=1; k<=cnt; k++)
                    {
                        tmp[i][j]+=X[i][k]*Y[k][j];
                        tmp[i][j]%=mod;
                    }
                }
            }
            for(int i=1; i<=cnt; i++)
            {
                for(int j=1; j<=cnt; j++)
                {
                    X[i][j]=tmp[i][j];
                }
            }
        }
        //y=y*y;
        long long int tmp[3][3];
        for(int i=1; i<=cnt; i++)
        {
            for(int j=1; j<=cnt; j++)
            {
                tmp[i][j]=0;
                for(int k=1; k<=cnt; k++)
                {
                    tmp[i][j]+=Y[i][k]*Y[k][j];
                    tmp[i][j]%=mod;
                }
            }
        }
        for(int i=1; i<=cnt; i++)
        {
            for(int j=1; j<=cnt; j++)
            {
                Y[i][j]=tmp[i][j];
            }
        }
        n/=2;
    }
    long long int ans;
    ans=2*X[1][1]+1*X[1][2];
    ans%=mod;
    return ans;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        long long int n;
        int K;
        scanf("%lld %d",&n,&K);
        if(n==1)
        {
            printf("1\n");
            continue;
        }
        if(K==0)
        {
            printf("%lld\n",fib(n));
            continue;
        }

        int P[50],Q[50],R[50],Initial[50];
        int cnt=0;
        for(int i=0; i<K; i++)
        {
            for(int j=0; j<=1; j++)
            {
                for(int k=0; k<=1; k++)
                {
                    cnt++;
                    P[cnt]=i;
                    Q[cnt]=j;
                    R[cnt]=k;
                    if(i+j+k==1)
                    {
                        Initial[cnt]=1;
                    }
                    else if(K==1 && i+j+k==0)
                    {
                        Initial[cnt]=1;
                    }
                    else
                    {
                        Initial[cnt]=0;
                    }
                    //printf("cnt is %d and p q r are %d %d %d\n",cnt,P[cnt],Q[cnt],R[cnt]);
                }
            }
        }
        //Creating the adjacency matrix
        long long int adj[50][50];
        for(int i=1; i<=cnt; i++)
        {
            for(int j=1; j<=cnt; j++)
            {
                int a=P[i],b=Q[i],c=R[i];
                int A=P[j],B=Q[j],C=R[j];

                int val=0;
                //Increase a->A
                if((a+1)%K==A && b==B && C==0)
                {
                    val++;
                }
                //Increase b->B
                if(a==A && B==1 && C==0)
                {
                    val++;
                }
                //Increase c->C
                if(a==A && b==B && c==0 && C==1)
                {
                    val++;
                }
                adj[i][j]=val;
            }
        }
        //Done
        /*
        printf("matrix is\n");
        for(int i=1; i<=cnt; i++)
        {
            for(int j=1; j<=cnt; j++)
            {
                printf("%lld ",adj[i][j]);
            }
            printf("\n");
        }
        */
        long long int X[50][50],Y[50][50];
        for(int i=1; i<=cnt; i++)
        {
            for(int j=1; j<=cnt; j++)
            {
                Y[i][j]=adj[i][j];
                if(i==j)
                {
                    X[i][j]=1;
                }
                else
                {
                    X[i][j]=0;
                }
            }
        }
        //Matrix Expo
        n--;
        while(n>0)
        {
            if(n&1)
            {
                //x=x*y
                long long int tmp[50][50];
                for(int i=1; i<=cnt; i++)
                {
                    for(int j=1; j<=cnt; j++)
                    {
                        tmp[i][j]=0;
                        for(int k=1; k<=cnt; k++)
                        {
                            tmp[i][j]+=X[i][k]*Y[k][j];
                            tmp[i][j]%=mod;
                        }
                    }
                }
                for(int i=1; i<=cnt; i++)
                {
                    for(int j=1; j<=cnt; j++)
                    {
                        X[i][j]=tmp[i][j];
                    }
                }
            }
            //y=y*y;
            long long int tmp[50][50];
            for(int i=1; i<=cnt; i++)
            {
                for(int j=1; j<=cnt; j++)
                {
                    tmp[i][j]=0;
                    for(int k=1; k<=cnt; k++)
                    {
                        tmp[i][j]+=Y[i][k]*Y[k][j];
                        tmp[i][j]%=mod;
                    }
                }
            }
            for(int i=1; i<=cnt; i++)
            {
                for(int j=1; j<=cnt; j++)
                {
                    Y[i][j]=tmp[i][j];
                }
            }
            n/=2;
        }
        //Matrix Expo Done

        long long int ans=0;
        for(int col=1; col<=cnt; col++)
        {
            if(P[col]==0 && Q[col]==1)
            {
                for(int row=1; row<=cnt; row++)
                {
                    ans+=X[row][col]*Initial[row];
                    ans%=mod;
                }
            }
        }
        printf("%lld\n",ans);
        /*
        printf("X is\n");
        for(int i=1; i<=cnt; i++)
        {
            for(int j=1; j<=cnt; j++)
            {
                printf("%lld ",X[i][j]);
            }
            printf("\n");
        }
        */
    }
    return 0;
}
