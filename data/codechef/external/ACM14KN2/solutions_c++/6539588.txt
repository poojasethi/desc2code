#define MOD 10000007
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
 
typedef long long LL;
typedef vector<LL> VL;
typedef vector <VL> VLL;
 
LL n, k;
VLL I;
 
VLL multiply (VLL &a, VLL &b) {
//assert (arsz == acsz && bcsz == acsz);
LL wq = 4 * k;
 
//assert (a.size() == b.size());
VLL mult (wq, vector<LL>(wq, 0 ));
 
for (LL i = 0; i < wq; i++)
for (LL j = 0; j < wq; j++)
for (LL k1 = 0; k1 < wq; k1++ ){
mult[i][j] = mult[i][j] + ((a[i][k1]  * b[k1][j] ));
mult[i][j] %= MOD;
}
 
return mult;
}
 
 //fibo_fast from http://krishnannakul.wordpress.com/2012/07/16/matrix-exponentiation-olog-n-solution-to-find-the-nth-fibonacci-number/
long long int fibo_fast(long long int n)
{
long long int ans[2][2],fibonacci[2][2]={{1,1},{1,0}},result[2][2]={{1,0},{0,1}};
while(n)
{
if(n%2==1)
{
memset(ans,0,sizeof(ans));
for(int i=0;i<2;i++)
for(int j=0;j<2;j++)
for(int k=0;k<2;k++)
ans[i][j]=(ans[i][j]+result[i][k]*fibonacci[k][j])%MOD;
for(int i=0;i<2;i++)
for(int j=0;j<2;j++)
result[i][j]=ans[i][j];
}
memset(ans,0,sizeof(ans));
for(int i=0;i<2;i++)
for(int j=0;j<2;j++)
for(int k=0;k<2;k++)
ans[i][j]=(ans[i][j]+fibonacci[i][k]*fibonacci[k][j])%MOD;
for(int i=0;i<2;i++)
for(int j=0;j<2;j++)
fibonacci[i][j]=ans[i][j];
n/=2;
}
return result[0][1];
}
VLL expo (VLL &A, LL n) {
//if (n == 0)
//return I;
//else
if (n == 1)
return A;
VLL T = expo (A, n/2);
VLL T1 = multiply (T,T);
if (n % 2 == 0 )
return T1;
else
return multiply (T1,A);
}
int get (int a, int b, int c) {
	
	int t =  (4*a + 2*b + c);
	return t;
}
 
 
int main () {
	//ios_base::sync_with_stdio(false);
	LL test;
	cin >> test;
	while (test--) {
	cin >> n >> k;
	if (k == 0) {
		if (n == 1)
			cout<<"1\n";
		else
			cout<<fibo_fast(n+2)<<"\n";
		continue;
	}
	VLL A(4*k , VL(4*k, 0 ));
	for (int i = 0; i < k; i++)	{
		int prev = i - 1;
		if (prev < 0)
			prev += k;
		// a 0 0
		A[get(i,0,0)][get (prev,0,0)]++;
		A[get(i,0,0)][get (prev ,1, 0)]++;
	   // a 0 1
		A[get (i, 0, 1)][get (prev,0,1)]++;
		A[get (i,0,1)] [get (i,0,0)]++;
		A[get (i,0,1)] [get (i, 1, 0)]++;
		A[get (i,0,1)] [get (i,1,1)]++;
		A[get (i,0,1)] [get (prev, 1, 1)]++;
		A[get (i,0,1)] [get (i,0,1)]++;
		// a 1 0
		A[get (i,1,0)][get(i,0,0)]++;
		// a 1 1
		A [get (i,1,1)][get(i,0,1)]++;
	}
	VLL ans = expo(A,n);
	//cout <<A[5][5];
	LL fans = ans[get(0,0,1)][0] + ans[get(0,1,1)][0];
	fans %= MOD;
	cout <<fans<<"\n";
	}
	return 0;
}
 