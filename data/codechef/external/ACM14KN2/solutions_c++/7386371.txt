#include<bits/stdc++.h>
using namespace std;
#define mod 10000007LL
#define ll long long
void modulo(ll a[][50],ll n,int k)
{
    int i,j,l,s=4*k;
    ll c[50][50];
    ll x[50][50],y[50][50];
    for(i=0;i<s;i++)
        for(j=0;j<s;j++)
    {
        if(i!=j)
            x[i][j]=0LL;
        else
            x[i][j]=1LL;
        y[i][j]=a[i][j];
    }
    while(n>0)
    {
        if(n%2==1)
        {
            for(i=0;i<s;i++)
                for(j=0;j<s;j++)
                {
                    c[i][j]=0LL;
                    for(k=0;k<s;k++)
                        c[i][j]=(c[i][j]+(x[i][k]*y[k][j]))%mod;
                }
            for(i=0;i<s;i++)
                for(j=0;j<s;j++)
                    x[i][j]=c[i][j];

        }
        for(i=0;i<s;i++)
                for(j=0;j<s;j++)
                {
                    c[i][j]=0LL;
                    for(k=0;k<s;k++)
                        c[i][j]=(c[i][j]+(y[i][k]*y[k][j]))%mod;
                }
            for(i=0;i<s;i++)
                for(j=0;j<s;j++)
                    y[i][j]=c[i][j];
        n/=2LL;
    }
    for(i=0;i<s;i++)
        for(j=0;j<s;j++)
            a[i][j]=x[i][j];
}
long long int fibo_fast(long long int n)
{

    long long int ans[2][2],fibonacci[2][2]={{1,1},{1,0}},result[2][2]={{1,0},{0,1}};

    while(n)

    {

        if(n%2==1)

        {

            memset(ans,0,sizeof(ans));

                for(int i=0;i<2;i++)

                    for(int j=0;j<2;j++)

                        for(int k=0;k<2;k++)

                            ans[i][j]=(ans[i][j]+result[i][k]*fibonacci[k][j])%mod;

                for(int i=0;i<2;i++)

                     for(int j=0;j<2;j++)

                        result[i][j]=ans[i][j];

        }

        memset(ans,0,sizeof(ans));

        for(int i=0;i<2;i++)

            for(int j=0;j<2;j++)

                for(int k=0;k<2;k++)

                    ans[i][j]=(ans[i][j]+fibonacci[i][k]*fibonacci[k][j])%mod;

        for(int i=0;i<2;i++)

            for(int j=0;j<2;j++)

                fibonacci[i][j]=ans[i][j];

        n/=2;

    }

    return result[0][1];

}
ll func(ll n,int k)
{
    ll a[50][50];
    int i,j,x,y,z;
    for(i=0; i<4*k; i++)
    {
        for(j=0; j<4*k; j++)
            a[i][j]=0LL;
    }
    for(i=0; i<4*k; i++)
    {
        j=i;
        x=j/4;
        j=j%4;
        z=j%2;
        j=j/2;
        y=j%2;
        if(y==0&&z==0)
        {
            int num=0;
            num=(4*((x-1+k)%k));
            a[i][num]++;
            num=0;
            num=(4*((x-1+k)%k))+2;
            a[i][num]++;
        }
        else if(y==0&&z==1)
        {
            int num=0;
            num=(4*((x-1+k)%k))+1;
            a[i][num]++;
            num=0;
            num=(4*((x-1+k)%k))+3;
            a[i][num]++;
            num=0;
            num=(4*x)+0;
            a[i][num]++;
            num=0;
            num=(4*x)+1;
            a[i][num]++;
            num=0;
            num=(4*x)+2;
            a[i][num]++;
            num=0;
            num=(4*x)+3;
            a[i][num]++;
        }
        else if(y==1&&z==0)
        {
            int num=0;
            num=(4*x);
            a[i][num]++;
        }
        else if(y==1&&z==1)
        {
            int num=0;
            num=(4*x)+1;
            a[i][num]++;
        }
    }
//    for(i=0;i<4*k;i++)
//    {
//        for(j=0;j<4*k;j++)
//            printf("%lld ",a[i][j]);
//        printf("\n");
//    }

    ll ans=0LL;
    modulo(a,n,k);
    ans=(ans+a[1][0]+a[3][0])%mod;
    return (ans%mod);
}
int main()
{
    int t,k;
    ll n;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%lld %d",&n,&k);
        if(k==0)
        {
            if(n==1)
                printf("%d\n",1);
            else
                printf("%lld\n",fibo_fast(n+2LL));
            continue;
        }
        printf("%lld\n",func(n,k));
    }
    return 0;
}
