#include<iostream>
#include<algorithm>
#include<cstdio>
#include<string.h>
#include<climits>
#include<vector>
#include<stack>
#include<set>
using namespace std;
#define FOR(i,a,b) for(i=a;i<=b;i++)
#define sint(i) scanf("%d",&i)
#define ss(s) scanf("%s",s)
#define pil pair<int,long long>
#define pli pair<long long,int>
#define mp(i,j) make_pair(i,j)
#define ll long long
#define MAX 1000000000
#define MOD 1000000007
#define vi vector<pil>
#define vvi vector < vi >
#define pb(i) push_back(i);
#define tr(v,it) for(it=v.begin();it!=v.end();it++)
ll UNI;
ll prims(vvi &g, int size)
{
    ll sum=0;
    ll d[size+1];
    int i,u,v;
    vector<int> visited(size+1,false);
    FOR(i,1,size)
    {
        d[i]=UNI;
       // cout<<d[i]<<" ";
    }
    d[1]=0;
    set< pli > s;
    FOR(i,1,size)
    {
        s.insert(mp(d[i],i));
    }
    pli use;
    pil num;
    ll wt;
    vi::iterator it;
    while(size)
    {
        use=*(s.begin());
        s.erase(s.begin());
        u=use.second;
        visited[u]=true;
        size--;
        sum=sum+d[u];
        tr(g[u],it)
        {
            num=*it;
            v=num.first;
            wt=num.second;
            if(!visited[v] && d[v]>(wt))
            {
                s.erase(s.find(mp(d[v],v)));
                d[v]=wt;
                s.insert(mp(d[v],v));
            }
        }
    }
    return sum;
}
ll dijkstra(vvi &g, int size)
{
    int n=size;
    ll d[size+1];
    ll l[size+1];
    int i,u,v;
    FOR(i,1,size)
    {
        d[i]=UNI;
        l[i]=UNI;
      //  cout<<d[i]<<"";
    }
    d[1]=0;
    l[1]=0;
    set< pli > s;
    FOR(i,1,size)
    {
        s.insert(mp(d[i],i));
    }
    pli use;
    pil num;
    ll wt;
    vi::iterator it;
    while(size)
    {
        use=*(s.begin());
        s.erase(s.begin());
        u=use.second;
        size--;
        tr(g[u],it)
        {
            num=*it;
            v=num.first;
            wt=num.second;
            if(d[v]>(d[u]+wt))
            {
                s.erase(s.find(mp(d[v],v)));
                d[v]=d[u]+wt;
                l[v]=wt;
                s.insert(mp(d[v],v));
            }
            else if(d[v]==(d[u]+wt))
            {
                l[v]=min(l[v],wt);
            }
        }
    }
    ll sum=0;
    FOR(i,1,n)
    {
        if(l[i]>=UNI)
        {
       // cout<<i<<" ";
        return -1;
        }
        sum=sum+l[i];
    }
    return sum;
}
int main()
{
    UNI=100000000000000000ll;
    int t;
    sint(t);
    while(t--)
    {
    int i;
    int n;
    cin>>n;
    vvi g(n+1,vi() );
    int e;
    sint(e);
    int v1,v2;
    ll w;
    FOR(i,1,e)
    {
        cin>>v1>>v2>>w;
        v1++;
        v2++;
        g[v1].pb(mp(v2,w));
        g[v2].pb(mp(v1,w));
    }
    ll dij=dijkstra(g,n);
    ll pri=prims(g,n);
    if(dij==pri)
    {
        cout<<"YES\n";
    }
    else
    cout<<"NO\n";
    }
    return 0;
}
