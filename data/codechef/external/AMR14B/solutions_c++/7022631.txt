#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;
#define llu long long unsigned int
#define lli long long int
#define li long int
#define fi first
#define se second
#define maxx 1000000000
#define pb push_back
#define pii pair<lli,lli>
#define vi vector<int>
#define MAXX LLONG_MAX
#define mod 1000000007
int scan()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
li scanli()    {int ip=getchar_unlocked(),flag=1;li ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lli scanlli()    {int ip=getchar_unlocked(),flag=1;lli ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scanllu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
void print(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void printli(li n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void printlli(lli n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void printllu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}

// Implementation of dijkstra's algorithm in O(ElogV) using priority queues

struct comp {
    bool operator() (const pii &a, const pii &b) {
        return a.second > b.second;
    }
};

priority_queue< pii, vector<pii>, comp > Q;
vector<pii> E[20010];
vector<bool> visited(20010,0),visited1(20010,0);
vector<lli> dist(20010,MAXX),dist1(20010,MAXX);
vector<lli> baap(20010,-1),parent(20010,-1);
lli total_weight=0;

void primsMST(int src)
{
	dist1[src]=0;
	Q.push(make_pair(src,0));
	while(!Q.empty())
	{
		int u=Q.top().fi;
		Q.pop();
		if(visited1[u]==0)
		{

			if(u!=0)
				total_weight+=dist1[u];
			int len=E[u].size();
			for(int i=0;i<len;i++)
			{
				int v=E[u][i].fi;
				int w=E[u][i].se;
				if(w<dist1[v] and visited1[v]==0)
				{
					parent[v]=u;
					dist1[v]=w;
					Q.push(make_pair(v,dist1[v]));
				}
			}
			visited1[u]=1;
		}
	}
}

void dijkstra(lli src)
{
	dist[src]=0;
	Q.push(make_pair(src,0));
	while(!Q.empty())
	{
		lli u=Q.top().fi;
		//cout<<"u : "<<u<<endl;
		Q.pop();
		if(visited[u]==0)
		{
			lli len=E[u].size();
			for(lli i=0;i<len;i++)
			{
				lli v=E[u][i].fi;
				lli w=E[u][i].se;
				if(dist[u]+w<dist[v] and visited[v]==0)
				{
					baap[v]=u;
					dist[v]=dist[u]+w;
					Q.push(make_pair(v,dist[v]));
				}
				else if(dist[u]+w==dist[v] and visited[v]==0)
				{
					if(dist[baap[v]]<dist[u])
					{
						baap[v]=u;
						dist[v]=dist[u]+w;
						Q.push(make_pair(v,dist[v]));
					}
				}
			}
			visited[u]=1;
		}
	}
}

void init()
{
	lli i,j,k;
	for(i=0;i<20001;i++)
	{
		E[i].clear();
		dist[i]=MAXX;
		dist1[i]=MAXX;
		visited[i]=0;
		visited1[i]=0;
		baap[i]=-1;
		parent[i]=-1;
	}
	total_weight=0;
	Q=priority_queue< pii, vector<pii>, comp>();
}

int main()
{
	lli t=scanlli(),i,j,k;
	while(t--)
	{
		init();
		lli n=scanlli(),m=scanlli();
		for(i=0;i<m;i++)
		{
			lli u=scanlli(),v=scanlli(),w=scanlli();
			E[u].pb(make_pair(v,w));
			E[v].pb(make_pair(u,w));
		}
		dijkstra(0);
		Q=priority_queue<pii, vector<pii>, comp>();
		primsMST(0);
		bool flag=0;
		for(i=0;i<n;i++)
		{
			if(dist[i]==MAXX)
			{
				flag=1;
				break;
			}
		}
		if(flag==0)
		{
			lli weight=0;
			for(i=1;i<n;i++)
			{
				weight+=(abs(dist[i]-dist[baap[i]]));
			}
			if(weight==total_weight)
				cout<<"YES"<<endl;
			else
				cout<<"NO"<<endl;
		}
		else
			cout<<"NO"<<endl;
	}
	return 0;
}