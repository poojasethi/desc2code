//Pranet Verma
#include <bits/stdc++.h>
using namespace std;
vector<int> g[100001];
struct Edge
{
    int u,v,w;
    Edge(int u,int v,int w):u(u),v(v),w(w){}
    bool operator <(const Edge &o) const{return w<o.w;}
};
vector<Edge> e;
int pa[100001];
int fs(int u)
{
    return pa[u]=(pa[u]==u?u:fs(pa[u]));
}
#define pii pair<long long,int>
#define ppi pair<pii,int>
long long dist[100001],edgeTo[100001];
bool done[100001];
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,m;
        scanf("%d%d",&n,&m);
        for(int i=0;i<n;++i)
            pa[i]=i;
        for(int i=0;i<m;++i)
        {
            int u,v,w;
            scanf("%d%d%d",&u,&v,&w);
            g[u].push_back(e.size());
            g[v].push_back(e.size());
            e.push_back(Edge(u,v,w));
        }
        vector<Edge> _e=e;
        sort(_e.begin(),_e.end());
        long long ans=0;
        for(int i=0;i<_e.size();++i)
        {
            int u=_e[i].u;
            int v=_e[i].v;
            if(fs(u)^fs(v))
                pa[fs(u)]=fs(v),ans+=_e[i].w;
        }
        set<int> roots;
        for(int i=0;i<n;++i)
            roots.insert(fs(i));
        if(roots.size()!=1)
        {
            printf("NO\n");
            for(int i=0;i<n;++i)
                g[i].clear();
            e.clear();
            continue;
        }
        // cout<<ans<<endl;
        for(int i=0;i<n;++i)
            dist[i]=1e18,edgeTo[i]=1e18,done[i]=0;
        dist[0]=0;
        edgeTo[0]=0;
        priority_queue<ppi,vector<ppi>,greater<ppi> > Q;
        Q.push(make_pair(make_pair(dist[0],0),0));
        set<ppi> exists;
        while(!Q.empty())
        {
            int u=Q.top().second;
            long long d=Q.top().first.first;
            int w=Q.top().first.second;
            Q.pop();
            if(d>dist[u])
                continue;
            if(w>edgeTo[u])
                continue;
            assert(!done[u]);
            done[u]=true;
            ans-=w;
            for(int i=0;i<g[u].size();++i)
            {
                int id=g[u][i];
                int v=e[id].u^e[id].v^u;
                int wt=e[id].w;
                if(dist[v]>dist[u]+wt)
                {
                    dist[v]=dist[u]+wt;
                    edgeTo[v]=wt;
                    ppi key=make_pair(make_pair(dist[v],wt),v);
                    Q.push( key );
                }
                else if(dist[v]==dist[u]+wt && edgeTo[v]>wt)
                {
                    edgeTo[v]=wt;
                    ppi key=make_pair(make_pair(dist[v],wt),v);
                    Q.push(key);
                }
            }
        }
        if(ans==0)
            printf("YES\n");
        else
            printf("NO\n");
        for(int i=0;i<n;++i)
            g[i].clear();
        e.clear();
    } 
}