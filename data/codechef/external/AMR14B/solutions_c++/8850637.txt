/*
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
	ABHINANDAN AGARWAL
	MNNIT ALLAHABAD
	CSE
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
*/
#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
typedef unsigned long long llu;
#define mp make_pair
#define pb push_back
int fs()
{
	int x=0;
	char c;
	c=getchar_unlocked();
	while (c<'0'||c>'9')
		c=getchar_unlocked();
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return x; 
}
void pps(const char *s)
{
	int i;
	for (i=0;s[i]!='\0';i++)
	{
		putchar_unlocked(s[i]);
	}
}
void _ppd(int a)
{
	if (a==0)
		return ;
	_ppd(a/10);
	putchar_unlocked(a%10+'0');
}
void ppd(int a) // Printing integer using utchar unlocked!
{
	if (a==0)
		pc('0');
	else
	_ppd(a);
}
void _pplld(ll a)
{
	if (a==0)
		return ;
	_pplld(a/10);
	pc(a%10+'0');
}
void pplld(ll a)
{
	if (a==0)
	{
		pc('0');
		return ;
	}
	if (a<0)
	{
		pc('-');
		a=-a;
	}
	_pplld(a);
}
int ggs(char *s) // String inputting
{
	int x=0;
	char c=gc();
	while (!('a'<=c&&c<='z')&&c!=-1) // change conditions to whatever strings can input !
		c=gc();
	while ('a'<=c&&c<='z')
	{
		s[x++]=c;
		c=gc();
	}
	s[x]='\0';
	return x;
}

int fsn()
{
	int x=0;
	char c;
	c=getchar_unlocked();
	while (!('0'<=c&&c<='9'||c=='-'))
		c=getchar_unlocked();
	int neg=0;
	if (c=='-'){
		neg=1;
		c=getchar_unlocked();
	}
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return (neg==0?x:-x); 
}
//------------------------------------------------------------------------------------
typedef pair<ll,pair<ll,int> > piii;
#define inf 9999999999999999LL

ll d[20000+10],ww[20000+10];
int vis[20000+10]={0};
ll prim(vector<pair<int,int> >graph[],int n)
{
	priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;
	d[0]=0;
	int i,z,c=0;
	ll ans=0;
	q.push(mp(0,0));
	while (!q.empty())
	{
		pair<int,int>x=q.top();
		q.pop();
		if (vis[x.second])
			continue;
		ans+=x.first;
		vis[x.second]=1;
		c++;
		z=graph[x.second].size();
		for (i=0;i<z;i++)
		{
			if (!vis[graph[x.second][i].first]&&d[graph[x.second][i].first]>graph[x.second][i].second)
			{
				d[graph[x.second][i].first]=graph[x.second][i].second;	
				q.push(mp(d[graph[x.second][i].first],graph[x.second][i].first));
			}
		}
	}
	if (c==n)
		return ans;
	return -1;
}
void reset(int n)
{
	int i;
	for (i=0;i<n+10;i++)
	{
		d[i]=inf;
		ww[i]=inf;
		vis[i]=0;
	}
}
int main()
{
	int t=fs();
	while (t--)
	{
		vector<pair<int,int> >graph[20000+10];
		priority_queue<piii,vector<piii>,greater<piii> >q;
		int n=fs(),m=fs(),i,j,x,y,w;
		for (i=0;i<m;i++)
		{
			x=fs();y=fs();w=fs();
			graph[x].pb(mp(y,w));
			graph[y].pb(mp(x,w));
		}
		reset(n);
		ll mst=prim(graph,n);
		if (mst<0)
		{
			pps("NO\n");
			continue;
		}
		
		//printf("mst is :%lld\n",mst);		
		ll sum=0;
		reset(n);
		q.push(mp(0,mp(0,0)));	
		d[0]=0;
		ww[0]=0;
		while (!q.empty())
		{
			piii x=q.top();
			q.pop();
			if (vis[x.second.second])
				continue;
			vis[x.second.second]=1;
			int z=graph[x.second.second].size(),cur=x.second.second;
			for (i=0;i<z;i++)
			{
				if (!vis[graph[cur][i].first]&&((ll)graph[cur][i].second+x.first<d[graph[cur][i].first]|| ( (ll)graph[cur][i].second+x.first==d[graph[cur][i].first]&&ww[graph[cur][i].first]>graph[cur][i].second )   ))
				{
					d[graph[cur][i].first]=(ll)graph[cur][i].second+x.first;
					ww[graph[cur][i].first]=graph[cur][i].second;
					q.push(mp(d[graph[cur][i].first],mp(graph[cur][i].second,graph[cur][i].first)));
				}

			}
		}
		for (i=0;i<n;i++)
		{
			if (ww[i]>=inf)
				break;
			sum+=ww[i];
			//printf("ww[%d]:%lld\n",i,ww[i]);
		}
		//printf("i:%d when n:%d and sum:%lld\n",i,n,sum);
		if (i!=n||sum!=mst)
		{
			pps("NO\n");
		}
		else
			pps("YES\n");
			
	}
	
	return 0;
}