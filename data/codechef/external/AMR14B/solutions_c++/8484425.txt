#include<bits/stdc++.h>
#define INF (1e16 + 10)
#define pb push_back
#define mp make_pair
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> llii;

int nt, tc, N, M;
ll spt, mst;
vector<vector<ii> > G;
vector<ll> dist, last;
vector<int> p, r;
vector<pair<int, ii> > E;

void init() {
    G.assign(N, vector<ii>());
    E.clear();
    dist.assign(N, INF);
    last.assign(N, INF);
    spt = mst = 0;
}

ll dijkstra(int u) {
    priority_queue<pair<ll, llii>, vector<pair<ll, llii> >, greater<pair<ll, llii> > > pq;
    dist[u] = last[u] = 0, pq.push(mp(0, mp(0, u)));

    while (!pq.empty()) {
        pair<ll, llii> fr = pq.top();
        pq.pop(), u = fr.second.second;
        ll w = fr.first;

        if (w > dist[u]) {
            continue;
        }

        for (int j = 0; j < (int) G[u].size(); j++) {
            int v = G[u][j].second; ll wt = G[u][j].first;
            if ((dist[v] > dist[u] + wt) || (dist[v] == dist[u] + wt && wt < last[v])) {
                dist[v] = dist[u] + wt;
                last[v] = wt;
                pq.push(mp(dist[v], mp(last[v], v)));
            }
        }
    }

    ll res = 0;
    for (int i = 1; i < N; i++) {
        if (last[i] == INF) {
            return -1L;
        }
        res += last[i];
    }
    return res;
}

void init_uf() {
    r.assign(N, 0);
    p.resize(N);
    for (int i = 0; i < N; i++) {
        p[i] = i;
    }
}

int find(int v) {
    return (v == p[v]) ? v : (p[v] = find(p[v]));
}

void unite(int u, int v) {
    if (r[u] > r[v]) {
        p[v] = u;
    }
    else {
        p[u] = v;
        if (r[u] == r[v]) {
            r[v]++;
        }
    }
}

ll kruskal() {
    sort(E.begin(), E.end());
    init_uf();
    
    int cnt = 0;
    ll res = 0;
    for (int i = 0; i < M; i++) {
        ll w = E[i].first; int u = E[i].second.first, v = E[i].second.second;
        int s1 = find(u), s2 = find(v);

        if (s1 != s2) {
            cnt++, res += w;
            unite(s1, s2);
            if (cnt == N - 1) {
                break;
            }
        }
    }
    return res;
}

int main() {
    scanf("%d", &nt);
    for (tc = 1; tc <= nt; tc++) {
        scanf("%d %d", &N, &M);

        init();

        for (int i = 0; i < M; i++) {
            int u, v; ll w;
            scanf("%d %d %lld", &u, &v, &w);
            G[u].pb(mp(w, v)), G[v].pb(mp(w, u));
            E.pb(mp(w, mp(u, v)));
        }

        spt = dijkstra(0);
        if (spt == -1) {
            printf("NO\n");
            continue;
        }
        
        mst = kruskal();

        printf("%s\n", (spt == mst) ? "YES" : "NO");
    }
}