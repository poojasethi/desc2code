#include <stdio.h>
#include <iostream>
#include <sstream>
#include <math.h>
#include <limits.h>
#include <limits>
#include <string.h>
#include <string>
#include <algorithm>
#include <stack>
#include <set>
#include <ctime>
#include <queue>
#include <vector>
#include <map>
#include <assert.h>
#include <utility>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf (1ll << 60)
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define sf scanf
#define pf printf
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define scch(a) scanf(" %c",&a)
#define scll1(a) scanf(" %lld",&a)
#define scll2(a,b) scanf(" %I64d %I64d",&a,&b)
#define scll3(a,b,c) scanf(" %I64d %I64d %I64d",&a,&b,&c)
#define sci1(a) scanf(" %d",&a)
#define sci2(a,b) scanf(" %d %d",&a,&b)
#define sci3(a,b,c) scanf(" %d %d %d",&a,&b,&c)
#define scd1(a) scanf(" %lf",&a)
#define scd2(a,b) scanf(" %lf %lf",&a,&b)
#define scd3(a,b,c) scanf(" %lf %lf %lf",&a,&b,&c)
#define sz(a) (int)a.size()
#define ll long long
#define ull unsigned long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}

#define mt 20010
#define mod

ll edges_in_dj[mt],dist[mt];

struct maan
{
  int node;
  ll cost;
  bool operator < (const maan& p) const
  {
      return cost > p.cost;
  }
};

struct maan3
{
  int node;
  ll cost;
};

vec_<maan3>adj[mt];

ll sum1,sum2;
int par[mt];

void dj()
{
    priority_queue<maan>q;
    maan u,v;
    int i,j;
    ll d;
    u.node=0;
    u.cost=0;
    dist[0]=0;
    edges_in_dj[0]=0;
    q.push(u);
    while(!q.empty())
    {
        u=q.top();q.pop();
        d=u.cost;
        if(dist[u.node] < d)
            continue;

        for(i=0;i<sz(adj[u.node]);i++)
        {
            v.node=adj[u.node][i].node;
            v.cost=d+adj[u.node][i].cost;
            if(v.cost < dist[v.node])
            {
                edges_in_dj[v.node]=adj[u.node][i].cost;
                dist[v.node]=v.cost;
                q.push(v);
            }
            else if(v.cost == dist[v.node])
            edges_in_dj[v.node]=min(edges_in_dj[v.node],adj[u.node][i].cost);
        }
    }
}

struct maan2
{
    int a,b;
    ll c;
};

vec_<maan2>fmst;

void init(int n)
{
    clr(fmst);
    int i;
    for(i=0;i<=mt-5;i++)
    {
        clr(adj[i]);
        dist[i]=inf;
        edges_in_dj[i]=0;
        par[i]=i;
    }
    sum1=sum2=0ll;
}

bool comp(maan2 a,maan2 b)
{
    return a.c < b.c;
}

int find_parent(int u)
{
    if(par[u] == u)
        return u;
    return par[u]=find_parent(par[u]);
}

int mst(int n)
{
    sort(all(fmst),comp);
    int ret=0,u,v,i;

    for(i=0;i<sz(fmst);i++)
    {
//        if(ret == n-1)
//            break;
        u=fmst[i].a;
        v=fmst[i].b;
        u=find_parent(u);
        v=find_parent(v);
        if(u != v)
        {
            par[u]=v;
            sum1+=fmst[i].c;
            ret++;
        }
    }

    return ret;
}

int main ()
{
    int i,j,test,n,m,a,b;ll c;
    maan3 temp;
    maan2 temp2;

    sci1(test);
    while(test--)
    {
        sci2(n,m);
        init(n);
        while(m--)
        {
            sci2(a,b);scll1(c);
            temp2.a=a;temp2.b=b;temp2.c=c;fmst.pb(temp2);
            temp.node=b;
            temp.cost=c;
            adj[a].pb(temp);
            temp.node=a;
            adj[b].pb(temp);
        }
        m=mst(n);
        if(m != n-1)
        {
            printf("NO\n");
            continue;
        }
        dj();
        for(i=0;i<n;i++)
            sum2+=edges_in_dj[i];
        if(sum1 == sum2)
            printf("YES\n");
        else
            printf("NO\n");
    }

    return 0;
}

