#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
const ll maxn=20000+11;
const ll maxw=1000*1000*1000+11;
const ll maxd= ll(maxw)*maxn;

#define pp pair<ll,ll>
vector< vector<pp> > graph;
ll dist[maxn];
bool visited[maxn];
ll len[maxn];

void init(int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		visited[i]=false;
		dist[i] =maxd;
		len[i]=maxw;
	}
	dist[0]=0;
	len[0]=0;
	memset(visited,false,sizeof(visited));
}

ll dijkstra(int n)
{
	priority_queue< pp, vector<pp>, greater<pp> > q;
	ll u,i;
	q.push(pp(dist[0],0));
	while(!q.empty())
	{
		u=q.top().second;
		q.pop();
		if(visited[u])
			continue;
		for(i=0;i<graph[u].size();i++)
		{
			ll vertex = graph[u][i].second;
			ll cost = graph[u][i].first;
			if(visited[vertex])
				continue;
			if(dist[vertex]>(dist[u]+cost)||(dist[u]+cost==dist[vertex]&&cost<len[vertex]))
			{
				len[vertex]=cost;
				dist[vertex]=dist[u]+cost;
				q.push(pp(dist[vertex],vertex));
			}
		}
		visited[u]=true;
	}
	ll ans=0;
	for(i=0;i<n;i++)
		if(dist[i]==maxd) return -1;
		else ans+=len[i];
	return ans;
}

ll primMST(int n)
{
	priority_queue< pp, vector<pp>, greater<pp> > q1;
	ll minwt,vertex,i,y,x;
	q1.push(pp(dist[0],0));
	while(!q1.empty())
	{
		minwt = q1.top().first;
		vertex = q1.top().second;
		q1.pop();
		if(visited[vertex] == true)
			continue;
		for(i=0;i<graph[vertex].size();i++)
		{
			y = graph[vertex][i].second;
			x = graph[vertex][i].first;
			if(visited[y]==false&&dist[y]>x)
			{
				dist[y]=x;
				q1.push(graph[vertex][i]);
			}
		}
		visited[vertex]=true;
	}
	ll ans=0;
	for(i=0;i<n;i++)
		if(dist[i]==maxd) return -1;
		else ans+=dist[i];
	return ans;
}

int main()
{
	ios::sync_with_stdio(false);
	int t;
	cin>>t;
	while(t--)
	{
		ll n,m,i;
		cin>>n>>m;
		graph.clear();
		graph.resize(n+5);
		while(m--)
		{
			ll x,y,cost;
			cin>>x>>y>>cost;
			graph[x].push_back(pp(cost,y));
			graph[y].push_back(pp(cost,x));
		}
		init(n);
		ll a1 = primMST(n);
		init(n);
		ll a2 = dijkstra(n);
		if(a1==a2&&a1!=-1)
			cout<<"YES\n";
		else
			cout<<"NO\n";
	}
	return 0;
}