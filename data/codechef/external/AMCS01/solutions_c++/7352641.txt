#include<bits/stdc++.h>
using namespace std;


vector< vector<int> > graph(100005);

pair<int,int> tree[100005]={make_pair(0,0)};

int marked[100005]={0};

void traverse(int index)
{	int count=1;
	int max_height=0;
	marked[index]=1;
	for(int i=0;i<graph[index].size();i++)
	{	int child = graph[index][i];
		if(marked[child]==0)
		{	traverse(child);
			if(tree[child].first>=max_height)
			{	if(max_height==tree[child].first)
				{	count+=tree[child].second;	
				}
				else
				{	count=tree[child].second;
				}
				max_height=tree[child].first;
				
			}
		}
	}
	tree[index]=make_pair(max_height+1,count);
	
} 

pair<int,int> number[100005]={make_pair(0,0)};

int checked[100005]={0};

void travelDown(int index, pair<int,int> num)
{	checked[index]=1;
	pair<int,int> myHite =  tree[index];
	if(myHite.first==num.first)
	{	number[index]=make_pair(myHite.first,myHite.second+num.second);
	}
	else if(myHite.first>num.first)
	{	number[index]=make_pair(myHite.first,myHite.second);
	}
	else if(myHite.first<num.first)
	{	number[index]=make_pair(num.first,num.second);
	}
	
	int childhood=0;
	int max1=-2;
	int second=0;
	for(int i=0;i<graph[index].size();i++)
	{	int child = graph[index][i];
		if(checked[child]==0)
		{
			if(tree[child].first!=myHite.first-1&&tree[child].first>=max1)
		{	if(max1==tree[child].first)
			{	second+=tree[child].second;
			}
			else
			{	second=tree[child].second;
			}
			max1=tree[child].first;
			
		}
		else if(tree[child].first==myHite.first-1)
		{	childhood++;
		}
		}
	}
	max1++;
	//cout<<index<<" res "<<num.first<<" "<<num.second<<" "<<max1<<" "<<second<<endl;
	for(int i=0;i<graph[index].size();i++)
	{	int child = graph[index][i];
		if(checked[child]==0)
		{
			if(tree[child].first!=myHite.first-1)
			{	pair<int,int> down = make_pair(number[index].first+1,number[index].second);
				 //cout<<child<<" "<<down.first<<" 2 "<<down.second<<endl;
				travelDown(child,down);
			}
			else if(tree[child].first==myHite.first-1)
			{	pair<int,int> down;
				if(childhood>1)
				{	
					 if(myHite.first==number[index].first)down = make_pair(number[index].first+1,number[index].second-tree[child].second);
					 else down = make_pair(number[index].first+1,number[index].second);
				//	cout<<child<<" "<<down.first<<" 1 "<<down.second<<endl;	
					travelDown(child,down);
				}
				else
				{
					{	if(max1+1==num.first+1)
						{	down = make_pair(num.first+1,second+num.second);
						}
						else if(max1+1>num.first+1)
						{	down = make_pair(max1+1,second);
						}
						else if(max1+1<num.first+1)
						{		down = make_pair(num.first+1,num.second);
						}
					}
				//	cout<<child<<" "<<down.first<<" 3 "<<down.second<<endl;
					travelDown(child,down);
				}
		}
	}
	}
	
}

int main()
{	 int n;
	scanf("%i",&n);
	 for(int i=0;i<n-1;i++)
	 {	int r1,r2;
	 	scanf("%i%i",&r1,&r2);
	 	graph[r1+1].push_back(r2+1);
	 	graph[r2+1].push_back(r1+1);
	 }
	 traverse(1);
	
	 travelDown(1,make_pair(1,1));
	 
	 
	  for(int i=1;i<=n;i++)
	 {	printf("%i ",number[i].second);
	 	
	 }
	 printf("\n");

}


