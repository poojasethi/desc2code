#include<iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

#define LL long long int
#define PII pair<int,int>
#define PB push_back
#define MP make_pair

vector<vector<PII> > v;
LL dis[200000];
int P[200000][20];
int L[200000];
int T[200000];
void dfs(int cnode, LL cdis,int clev = 0){
    dis[cnode] = cdis;
    L[cnode] = clev;
    for(int i=0;i<(int)v[cnode].size();i++)
        dfs(v[cnode][i].first, cdis + v[cnode][i].second, clev + 1);
}
int lca(int p, int q){
    int tmp, log, i;
    if (L[p] < L[q])
        tmp = p, p = q, q = tmp;
    for (log = 1; 1 << log <= L[p]; log++);
    log--;
    for (i = log; i >= 0; i--)
        if (L[p] - (1 << i) >= L[q])
            p = P[p][i];
    if (p == q)
        return p;
    for (i = log; i >= 0; i--)
        if (P[p][i] != -1 && P[p][i] != P[q][i])
            p = P[p][i], q = P[q][i];
    return T[p];
}
int main(){
    while(1){
        v.clear();
        int i,n,x,L,j;
        scanf("%d",&n);
        if(n == 0)
            break;
        v.resize(n);
        for(i=0;i<n;i++)for(j=0;(1<<j)<n;j++)P[i][j] = -1;
        for(i=1;i<n;i++){
            scanf("%d %d",&x,&L);
            v[x].PB(MP(i,L));
            P[i][0] = T[i] = x;
        }
        for(j=1;(1<<j)<n;j++){
            for(i=0;i<n;i++)
                if(P[i][j-1] != -1)
                    P[i][j] = P[P[i][j-1]][j-1];
        }
        dfs(0,0);
        int q,src,des;
        scanf("%d",&q);
        while(q--){
            scanf("%d %d",&src, &des);
            printf("%Ld ", dis[src] + dis[des] - 2*dis[lca(src, des)]);
        }
        printf("\n");
    }
    return 0;
}
