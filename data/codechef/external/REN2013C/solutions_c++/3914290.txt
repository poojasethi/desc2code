/* 
 * File:   REN2013C.cpp
 * Author: anuraganand
 * Created on 25 January, 2014, 12:26 AM
 */

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <list>
#include <utility>
#include <algorithm>
#include <cassert>

using namespace std;
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef long double ld;
#define var(a,b)  __typeof(b) a = b
#define rep(i,n)  for(int i = 0;(i) < (n);  ++i)
#define rept(i,a,b) for(var(i,a); i < (b); ++i)
#define tr(v,it)  for(var(it,v.begin());it!=v.end();++it)
#define fill(a,val) memset(a,val,sizeof(a))
#define gi(n) scanf("%d",&n);
#define all(v) v.begin(),v.end()

#define N 100100
#define LG 20
int parent[N], P[N][LG], level[N];

inline void init(int x, int n) {
    for(int i = 0; i < LG; i++) P[x][i] = -1;
    P[x][0] = parent[x];
    for(int j = 1; (1 << j) < n; j++)
        if(P[x][j - 1] != -1) P[x][j] = P[P[x][j - 1]][j- 1];
}

inline int lca(int x, int y) {
    if(level[x] < level[y]) swap(x, y);
    int lg = 1;
    while((1 << lg) <= level[x]) lg++; lg--;
    for(int i = lg; i >= 0; i--) {
        if(level[x] - (1 << i) >= level[y]) x = P[x][i];
    }
    if(x == y) return x;
    for(int i = lg; i >= 0; i--) {
        if(P[x][i] != -1 && P[x][i] != P[y][i]) x = P[x][i], y = P[y][i];
    }
    return parent[x];
}

void init(int n) {
    for(int i = 0; i < n; i++) init(i, n);
}

ll dist[N];
vector <pii> g[N];
bool mark[N];

void dfs(int u,int lev,ll dis) {
    mark[u] = 1;
    level[u] = lev;
    dist[u] = dis;
    tr(g[u],it) {
        if(!mark[it->ff]) {
            parent[it->ff] = u;
            dfs(it->ff,lev + 1,dis + it->ss);
        }
    }
}

int main(int argc, char** argv) {
#ifdef LOCAL
    freopen("in.txt", "r", stdin);
#endif
    while(true) {
        int n; gi(n);
        if(n == 0) break;
        rep(i,n) g[i].clear();
        rept(i,1,n) {
            int a,b;
            gi(a); gi(b);
            g[a].pb(mp(i,b)); g[i].pb(mp(a,b));
        }
        fill(mark,0);
        dfs(0,0,0);
        init(n);
        int qq; gi(qq);
        while(qq--) {
            int u,v;
            ll dis;
            gi(u); gi(v);
            int anc = lca(u,v);
            if(anc == u) {
                dis = dist[v] - dist[u]; 
            } else if(anc == v) {
                dis = dist[u] - dist[v];
            } else {
                dis = dist[u] + dist[v] - 2 * dist[anc];
            }
            printf("%lld ",dis);
        } puts("");
    }
    return 0;
}
