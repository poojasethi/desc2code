/*
 * #LCA //<O(nlogn),O(logn)> topcoder
 * http://www.codechef.com/problems/REN2013C
 */
#include<bits/stdc++.h>
using namespace std;
#define MAX_S 100005
typedef long long int LL;
int n;
vector<int >v[MAX_S];
LL dis[MAX_S];//dis
int L[MAX_S],T[MAX_S],P[MAX_S];// level , tree, P for lca
void dfs(int a,int nr){//a is index, l is level, d is distance
    if(L[a] < nr) P[a] =0;
    else if(L[a]%nr ==0)
        P[a] = T[a];
    else
        P[a] = P[T[a]];
    for(int i=0;i<v[a].size();i++)
        dfs(v[a][i],nr);
}
int LCA(int x,int y){
    while(P[x]!=P[y])
        if(L[x] > L[y])
            x = P[x];
        else
            y = P[y];
     while(x!=y)
         if(L[x]>L[y])
             x = T[x];
         else
             y = T[y];
     return x;
}
int main(){
    int a,b,t,m;
    while(1){
        cin >> n;
        if(!n)
            break;
        for(int i=0;i<n;i++){
            v[i].clear();
            L[i]=dis[i]=0;
        }
        int maxL=0;
        for(int i=1;i<n;i++){
            scanf("%d%d",&a,&b);
            v[a].push_back(i);
            T[i] = a;
            L[i] = L[a]+1;
            dis[i] = dis[a]+b;
        }
        dfs(0,sqrt(n));
        scanf("%d",&m);
        scanf("%d%d",&a,&b);
        t = LCA(a,b);
        printf("%lld",dis[a] + dis[b] - 2*dis[t]) ;
        while(--m){
            scanf("%d%d",&a,&b);
            t = LCA(a,b);
            printf(" %lld",dis[a] + dis[b] - 2*dis[t]) ;
        }
        printf("\n");
    }
}
