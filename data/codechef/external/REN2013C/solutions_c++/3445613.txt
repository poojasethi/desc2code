#include <iostream>
#include <cmath>
#include <cstdio>
#include <vector>
#include <cstring>
#include <map>
using namespace std;
#define LL long long
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define MAXX 100100
#define logMAXX 20
int P[MAXX][logMAXX];
int T[MAXX],L[MAXX];
LL cost[MAXX];
vector<int>grph[MAXX];
map<pii,LL>mapp;
void dfs(int u,int parent,int length,LL cst)
{
        if(L[u]!=-1)return ;
        L[u]=length;
        T[u]=parent;
        cost[u]=cst;
        int size=grph[u].size();
        for(int i=0; i<size; i++)
                if(grph[u][i]!=parent)
                        dfs(grph[u][i],u,length+1,cst+mapp[mp(u,grph[u][i])]);
}
void process(int nodes)
{

        for(int i=0; i<nodes; i++)
                P[i][0]=T[i];

        for(int j=1; (1<<j) <nodes; j++)
                for(int i=0; i<nodes; i++)
                        if(P[i][j-1]!=-1)
                                P[i][j]=P[P[i][j-1]][j-1];

}
void swap(int &a,int &b)
{
        a=a^b;
        b=a^b;
        a=a^b;
}
LL LCA(int x,int y)
{
        int tmp,log;
        int a=x,b=y;
        if(L[x]<L[y])
                swap(x,y);
        for(log=1; 1<< log <=L[x]; log++)	;
        log--;
        for(int i=log; i>=0; i--)
                if(L[x]-(1<<i)>=L[y])
                        x=P[x][i];
        if(x==y)return cost[a]+cost[b]-2*cost[x];
        for(int i=log; i>=0; i--)
                if(P[x][i]!=-1&&P[x][i]!=P[y][i])
                        x=P[x][i],y=P[y][i];
        //cout<<cost[T[x]]<<"\t"<<cost[a]<<"\t"<<cost[b]<<endl;
        return cost[a]+cost[b]-2*cost[T[x]];
}
int main()
{
        int N;
        while(scanf("%d",&N)&&N!=0) {
                int edges=N-1;
                for(int i=0; i<MAXX; i++)grph[i].clear();
                mapp.clear();
                for(int i=1; i<=edges; i++) {
                        int a,b;
                        scanf("%d%d",&a,&b);
                        grph[a].pb(i);
                        grph[i].pb(a);
                        mapp[mp(i,a)]=b;
                        mapp[mp(a,i)]=b;
                }
                memset(L,-1,sizeof(L));
                memset(T,-1,sizeof(T));
                memset(P,-1,sizeof(P));
                dfs(0,0,1,0);
                //node parent length
                process(N);
                int Q;
                scanf("%d",&Q);
                //printf("pankaj");
                while(Q--) {
                        int a,b;
                        scanf("%d%d",&a,&b);
                  //      printf("pankaj\n");
                        printf("%lld ",LCA(a,b));
                }
                printf("\n");
        }
        return 0;
}
