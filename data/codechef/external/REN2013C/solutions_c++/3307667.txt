#include<stdio.h>
#include<iostream>
#include<math.h>
#include<stdlib.h>
#include<string.h>
#include<limits.h>
#include<vector>
#include<algorithm>
#include <stack>
#include<queue>
#include<set>

#define mod 1000000007
#define f(i,a,b) for(i=a;i<b;i++)
#define ff(i,a)  for(i=0;i<a;i++)
#define sc scanf
#define pr printf
#define clr(a) memset(a,0,sizeof(a))
#define ll long long 
#define vi vector<int>
#define pin(n) printf("%d\n",n)
#define pll(n) printf("%lld\n",n)
#define sin(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define pins(n) printf("%d ",n)
#define plls(n) printf("%lld ",n)
#define ss(n) scanf("%s",n)
#define nl pr("\n")

using namespace std;

typedef struct node{
	int v;
	int w;
	struct node *next;
}node;

typedef struct graph
{
	struct node *begin;
}graph;

graph g[100005];
ll int cost[100005];
int parent[100005];
int flag[100005];

void bfs(int i)
{
	node *temp=g[i].begin;
	int v;
	while(temp!=NULL)
	{
		v=temp->v;
		if(flag[v]==0)
		{
			cost[v]=(ll)(cost[i]+temp->w);
			flag[v]=1;
			bfs(v);
		}
		temp=temp->next;
	}
}

int find(int i,int j)
{
	if(i==j)
		return i;
	if(j>i)
		return find(i,parent[j]);
	if(i>j)
		return find(parent[i],j);
}

int main()
{
	int n,i,j,k,m,l,u,v,w;
	while(1)
	{
		sin(n);
		if(!n)
			break;
		ff(i,n)
		{
			flag[i]=0;
			g[i].begin=NULL;
		}
		node *temp,*tmp;
		
		f(i,1,n)
		{
			sin(v);sin(w);
			parent[i]=v;

			temp=g[v].begin;
			g[v].begin=(node *)malloc(sizeof(node));
			g[v].begin->v=i;
			g[v].begin->w=w;
			g[v].begin->next=temp;

		}
		cost[0]=0ll;
		parent[0]=0;
		flag[0]=1;
		bfs(0);

		sin(m);
		ll int ans;
		ff(i,m)
		{
			sin(u);sin(v);
			l=find(u,v);
			ans=cost[u]+cost[v]-(2*cost[l]);
			plls(ans);
		}
		nl;

	}
	
	return 0;
}

