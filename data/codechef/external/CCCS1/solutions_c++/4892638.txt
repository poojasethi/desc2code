#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define ll long long
const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}

bool isOdd(long long l,long long d)
{
  // Tn = l - (n-1)*d;
  // Tn>=0;
    
  // (n-1)d<=l
  // (n-1)<=l/d;

  long long n=1+l/d;

  long long a= l-(n-1)*d;

  long long t1= (a+l);
  long long t2=n;

  if(t1%4==0 || t2%4==0)
    return false;
  if(t1%2==0 && t2%2==0)
    return false;
  return true;



}
int main(void)
{
  int t;
  cin>>t;
  while(t--)
  {
    int n;
    cin>>n;
    long long l,d;

    bool ans=false;
    while(n--)
    {
    cin>>d>>l;
     ans^=(isOdd(l,d));
     // cout<<l<<" "<<d<<" "<<isOdd(l,d)<<endl; 
    }
    if(ans)
      cout<<"YES\n";
    else
      cout<<"NO\n";
  }
}
































