#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;

const int mod = 1000000007;

void mmul( int sz, long long a[10][10], long long b[10][10], long long c[10][10] )
{
    int i, j, k;
    for ( i = 1; i <= sz; i++ )
    {
        for ( j = 1; j <= sz; j++ )
        {
            c[i][j] = 0;
            for ( k = 1; k <= sz; k++ )
            {
                c[i][j] = ( c[i][j] + ((a[i][k]*b[k][j])) );
                if ( c[i][j] >= mod ) c[i][j] = c[i][j] % mod;
            }
        }
    }
}

void mcpy( int sz, long long a[10][10], long long b[10][10] )
{
    int i, j;
    for ( i = 1; i <= sz; i++ )
    {
        for ( j = 1; j <= sz; j++ )
            b[i][j] = a[i][j];
    }
}

void fst( int sz, long long m[10][10], long long st )
{
    if ( st < 0 ) return;
    long long a[10][10], b[10][10], r[10][10];
    int i, j, k;
    for ( i = 1; i <= sz; i++ )
    {
        for ( j = 1; j <= sz; j++ )
            r[i][j] = 0;
        r[i][i] = 1;
    }
    while ( st > 0 )
    {
        if ( st % 2 == 1 )
        {
            mcpy( sz, r, a );
            mmul( sz, a, m, r );
        }
        mcpy( sz, m, a );
        mcpy( sz, m, b );
        mmul( sz, a, b, m );
        st = st / 2;
    }
    mcpy( sz, r, m );
}

int main()
{
    int t, T;
    long long i, j, K, n;
    long long m[10][10], k, y[10], z[10];
    scanf( "%d", &T );
    for ( t = 0; t < T; t++ )
    {
        scanf( "%lld %lld", &n, &K );
        k = K;
        memset( m, 0, sizeof( m ) );
        m[1][1] = k-1; m[1][2] = k-2; m[1][3] = k-1; m[1][4] = k-2; m[1][5] = k-1; m[1][6] = k-2; m[1][7] = k-1; m[1][8] = k-2;
        m[2][1]=(k-1)*(k-2); m[2][2]=(k-1)*(k-2)+1; m[2][3] = (k-1)*(k-2)+2*(k-1)*(k-1); m[2][4] = (k-1)*(k-2)+1+2*(k-2)*(k-1);
        m[2][5] = (k-1)*(k-2); m[2][6] = (k-2)*(k-2); m[2][7] = (k-1)*(k-2); m[2][8] = (k-2)*(k-2);
        m[3][1] = 1; m[4][2] = 1;
        m[5][2] = 1; m[5][3] = k-1; m[5][4] = k-2;
        m[6][1] = k-1; m[6][2] = k-2; m[6][7] = k-1; m[6][8] = k-2;
        m[7][2] = 1; m[7][3] = k-1; m[7][4] = k-2;
        m[8][1] = k-1; m[8][2] = k-2; m[8][5] = k-1; m[8][6] = k-2;

        for ( i = 1; i <= 8; i++ )
        {
            for ( j = 1; j <= 8; j++ )
            {
                m[i][j] = (m[i][j]+mod);
                if ( m[i][j] >= mod ) m[i][j] = m[i][j] % mod;
            }
        }

        y[1] = k+3*k*(k-1)+k*(k-1)*(k-2);
        y[2] = 3*k*(k-1)*(k-2) + 3*k*(k-1) + k*(k-1)*(k-2)*(k-2) + k*(k-1)*(k-1);
        y[3] = k;
        y[4] = k*(k-1);
        y[5] = k+k*(k-1);
        y[6] = 2*k*(k-1) + k*(k-1)*(k-2);
        y[7] = k+k*(k-1);
        y[8] = 2*k*(k-1) + k*(k-1)*(k-2);
        for ( i = 1; i <= 8; i++ )
            y[i] = y[i] % mod;
        if ( n == 1 )
        {
            printf( "%lld\n", (y[3]+y[4])%mod );
        }
        else if ( n == 2 )
        {
            printf( "%lld\n", (y[1]+y[2])%mod );
        }
        else
        {
            fst( 8, m, n-2 );
            for ( i = 1; i <= 8; i++ )
            {
                z[i] = 0;
                for ( j = 1; j <= 8; j++ )
                {
                    z[i] = ( z[i] + (( m[i][j]*y[j] )) )%mod;
                    if ( z[i] >= mod ) z[i] = z[i] % mod;
                }
            }
            printf( "%lld\n", (z[1]+z[2])%mod );
        }
    }
    return 0;
}