#include<bits/stdc++.h>
using namespace std;
void build(int node,int a,int b,vector<int>& arr,vector<int>& tree)
{
    if(a>b)
        return; //invalid
    if(a==b)
    {
        tree[node]=arr[a];
        return; //leaf node
    }
    build(node*2,a,(a+b)/2,arr,tree);
    build(node*2+1,(a+b)/2+1,b,arr,tree);
    tree[node]=max(tree[node*2],tree[node*2+1]);
}
/*void update(int node,int a,int b,int i,int j,int val)
{
    if((a>b)||(a>j)||(i>b))
        return;
        if(lazy[node]!=0)
    {
        tree[node]+=lazy[node];
        if(a!=b)
        {
            lazy[node*2]+=lazy[node];
            lazy[node*2+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if((a>=i)&&(b<=j))
    {
        tree[node]+=val;
        if(a!=b)
        {
            lazy[2*node]+=val;
            lazy[2*node+1]+=val;
        }
        return;
    }
    update(node*2,a,(a+b)/2,i,j,val);
    update(node*2+1,(a+b)/2+1,b,i,j,val);
    tree[node]=max(tree[node*2],tree[node*2+1]);
}*/
int query(int node,int a,int b,int i,int j,vector<int>& tree,vector<int>& lazy)
{
    if((a>b)||(a>j)||(i>b))
        return -1;
    if(lazy[node]!=0)
    {
        tree[node]+=lazy[node];
        if(a!=b)
        {
            lazy[2*node]+=lazy[node];
            lazy[2*node+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if((a>=i)&&(b<=j))
    {
        return tree[node];
    }
    int q1=query(2*node,a,(a+b)/2,i,j,tree,lazy);
    int q2=query(2*node+1,(a+b)/2+1,b,i,j,tree,lazy);
    int res=max(q1,q2);
    return res;
}
int main()
{
    int i,res,k,n;
    scanf("%d",&n);
    vector<int> v(n),tree(4*n),lazy(4*n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&(v[i]));
    }
    scanf("%d",&k);
    build(1,0,n-1,v,tree);
    for(i=0;i<(n-k+1);i++)
    {
        res=query(1,0,n-1,i,i+k-1,tree,lazy);
        printf("%d ",res);
    }
    return 0;
}
