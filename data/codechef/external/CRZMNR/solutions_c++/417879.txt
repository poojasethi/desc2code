/*just checking solution by commenting some lines*/

#include <cstdio>
#include <vector>

using namespace std;

inline int readInt() {
	int res;
	scanf("%d", &res);
	return res;
}

int dist(int x1, int y1, int x2, int y2) {
	return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
}

int d[100];
vector <pair <int, int> > e[101];
int r[100][201];

void go(int v, int p, int l) {
	fill_n(r[v], l + 1, d[v]);
	for (int i = 0; i < e[v].size(); i++) {
		int nv = e[v][i].first;
		if (nv == p)
			continue;
		int ll = l - e[v][i].second;
		int d = e[v][i].second;
		if (ll < 0)
			continue;
		go(nv, v, ll);
		for (int j = l; j >= d; j--) {
			for (int k = 0; k <= j - d; k++)
				r[v][j] = max(r[v][j], r[v][k] + r[nv][j - d - k]);
		}
	}
}

int main() {
//	freopen("output.txt", "w", stdout);
	int t = readInt();
	for (int tt = 1; tt <= t; tt++) {
		int n = readInt();
		int l = readInt();
		for (int i = 0; i < n; i++) {
			d[i] = readInt();
			e[i].clear();
		}
		for (int i = 0; i < n - 1; i++) {
			int a = readInt();
			int b = readInt();
			int c = readInt();
			e[a].push_back(make_pair(b, c));
			e[b].push_back(make_pair(a, c));
		}
		go(0, -1, l / 2);
		int ans = r[0][l / 2];
		printf("Case #%d: %d\n", tt, ans);
	}
//	system("pause");
    return 0;
}

/*
6 25
5 8 3 3 10 7
0 1 4
3 0 3
2 3 2
5 2 3
4 5 4

4 2 5
-10 5 2 6
1 2 1
2 3 1
2 4 1

*/
