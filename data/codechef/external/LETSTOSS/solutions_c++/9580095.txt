//#include<bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <set>
using namespace std;
#define w(t) while(t--)
#define S(x) scanf("%d",&x)
#define SLL(x) scanf("%lld",&x)
#define P(x) printf("%d\n",x)
#define fl(i , a, b) for(i = (int)a; i<(int)b; i++)
#define mem(a , value) memset(a , value , sizeof(a))
#define tr(c, itr) for(itr = (c).begin(); itr != (c).end(); itr++)
#define MOD 1000000007
#define MAX 10000010
#define ll long long
#define all(v) v.begin(),v.end()
#define mp make_pair
#define pb push_back
#define f first
#define s second
typedef pair<int,int> pp;
int ab[MAX + 10];
ll prime[MAX+10] , dp[200002];
int k =0  ;
int ans[200002][2]; 
void sieve()
{
	for(ll i = 2; i*i<=MAX ; i++)
	{
		if(ab[i]==0)
		{
			for(ll j = i*i; j<=MAX; j+=i)
				ab[j] = 1;
		}
	}
	for(ll i=2; i<=MAX; i++)
	{
		if(ab[i]==0)
			prime[k++] = i ;
	}	
	return ; 
}
int main()
{
	//std::ios_base::sync_with_stdio(false);
	ll a , b,  i, j ; 
	sieve(); 
	SLL(a); SLL(b); 
	for(i = a; i<=b; i++)
	{
		dp[i-a] = i; 
	}
	for(j =0 ; j < k ; j++)
	{
		ll p = prime[j]; 
		ll first = (a/p);
		first = first*p ; 
		while(first < a) first += p ; 
		for(i = first; i<=b ; i+=p)
		{
			ll act = dp[i-a]; 
			if(act%p == 0 ){
				ll c =0 ; 
				while(act%p == 0){
					act=act/p; 
					c++; 
				}
				if(c%2)
					ans[i-a][1]++;
				else
					ans[i-a][0]++;
			}
			dp[i-a] = act;
		}
	}
	for(i =a; i<= b ;i++)
	{
		// if actual num of that number !=1 means 1 odd power is left 
		if(dp[i-a]!=1)ans[i-a][1]++;
	}
	int final =0 ;
	for(i = a; i<=b; i++)
	{
		if(ans[i-a][1] > ans[i-a][0]){
			final++;
		}
	}
	cout << final <<endl;
	return 0; 
}
/*

99999999900000
100000000000000

*/