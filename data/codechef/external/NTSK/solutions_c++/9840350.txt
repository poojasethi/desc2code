#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cctype>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
using namespace std; 
#define DEBUG(x) cout << '>' << #x << ':' << x << endl;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
const int INF = 1<<29;
typedef long long ll;
inline int two(int n) { return 1 << n; }
inline int test(int n, int b) { return (n>>b)&1; }
inline void set_bit(int & n, int b) { n |= two(b); }
inline void unset_bit(int & n, int b) { n &= ~two(b); }
inline int last_bit(int n) { return n & (-n); }
inline int ones(int n) { int res = 0; while(n && ++res) n-=n&(-n); return res; }
template<class T> void chmax(T & a, const T & b) { a = max(a, b); }
template<class T> void chmin(T & a, const T & b) { a = min(a, b); }

/////////////////////////////////////////////////////////////////////

bool Vis[111][111];
long long dp[111][111];
int N;
int Arr[111];


long long rec(int pos, int bche) {
	if(pos == N) return dp[pos][bche] = 0;
	if(bche == 0) return dp[pos][bche] = 0;

	if(Vis[pos][bche]) return dp[pos][bche];
	Vis[pos][bche] = true;

	long long ans = rec(pos + 1, bche);
	long long sum = 0;
	for(int i = pos; i < N; ++i) {
		ans = max(ans, rec(i + 1, bche - 1) + sum + Arr[i]);
		sum += Arr[i];
	}

	return dp[pos][bche] = ans;
}

int main()
{
	scanf("%d", &N);
	for(int i = 0; i < N; ++i) {
		scanf("%d", &Arr[i]);
	}

	memset(Vis, 0, sizeof Vis);
	for(int i = N; i >= 0; --i) {
		rec(0, i);
	}

	int Q;
	scanf("%d", &Q);
	while(Q--) {
		int M;
		scanf("%d", &M);

		int low = 0;
		int high = N;

		while(high - low > 2) {
			int mid = (low + high) >> 1;
			
			long long sum = dp[0][mid];
			if(sum >= M) {
				high = mid;
			} else {
				low = mid;
			}
		}

		int Ans = -1;
		for(int i = low; i <= high; ++i) {
			long long ans = dp[0][i];
			if(ans >= M) {
				Ans = i;
				break;
			}
		}

		if(Ans == -1) {
			puts("Not Possible");
		} else {
			printf("%d\n", Ans);
		}

	}
    return 0;
}  

