#include<bits/stdc++.h>
#include<algorithm>
#include<vector>
#include<queue>
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
int dx[]={0,1,0,-1};int dy[]={1,0,-1,0}; //4 direction
#define REP(i,n) for(int i=0;i<n;i++)
#define REPU(i,a,b) for(int i=a;i<b;i++)
#define sll(n) scanf("%lld",&n)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define sl(n) scanf("%ld",&n)
#define pin(n) printf("%d\n",n)
#define MP make_pair
#define PB push_back
#define all(a) a.begin(),a.end()
#define F first
#define S second
#define SET(a,b) memset(a,b,sizeof (a))
typedef long long LL;
#define PII pair<int,int>
using namespace std;
int n,m;
char a[505][505];
int vis[505][505];
LL dfs(int x,int y)
{
    LL ans=1;
    vis[x][y]=1;
    for(int i=0;i<4;i++)
    {
        int xx=x+dx[i];
        int yy=y+dy[i];
        if(xx>=0 && xx<n && yy>=0 && yy<m && a[xx][yy]=='*' && vis[xx][yy]==0)
        {
            ans=max(ans,dfs(xx,yy)+1);
        }
    }
    vis[x][y]=0;
    return ans;
}
int main()
{
    si(n); si(m);
    REP(i,n) cin>>a[i];
    LL ans=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(a[i][j]=='*')
            {
                ans=max(ans,dfs(i,j));
            }
        }
    }
    cout<<ans<<endl;
    return 0;
}
