#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define MOD 1000000007

int a[1000005], ps[1000005];

int gcd(int a, int b)
{
    if (a == 0) {
        return b;
    }
    else {
        return gcd(b % a, a);
    }
}

int merge(int a[], int l, int m, int r)
{
    int n1, n2, i, j;
    n1=(m-l+1);
    n2=r-m;
    int L[n1];
    int R[n2];
    for(i=0;i<n1;i++)
    {
        L[i]=a[l+i];
    }
    for(j=0;j<n2;j++)
    {
        R[j]=a[l+n1+j];
    }
    i=0;
    j=0;
    int k=l;
    while(i<n1 && j<n2)
    {
        if(L[i]<=R[j])
        {
            a[k]=L[i];
            i++;
        }
        else
        {
            a[k]=R[j];
            j++;
        }
        k++;
    }
    while(i<n1)
    {
        a[k]=L[i];
        i++;
        k++;
    }
    while(j<n2)
    {
        a[k]=R[j];
        j++;
        k++;
    }
    return 0;
}
 
int mergeSort(int a[], int l, int r)
{
    if(l<r)
    {
        int m;
        m=(r+l)/2;
        mergeSort(a, l, m);
        mergeSort(a, m+1, r);
        merge(a, l, m, r);
    }
    return 0;
}

int main()
{
    int T, N, i, count, temp;
    long long int prod;
    for (i = 2; i < 1001; i++) {
        ps[i * i]++;
    }
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &N);
        count = 0;
        for (i = 1; i <= N; i++) {
            scanf("%d", &a[i]);
            if (ps[gcd(i, a[i])]) {
                count++;
            }
        }
        mergeSort(a, 1, N);
        prod = 1;
        temp = N - count;
        for (i = N; i > temp; i--) {
            prod = (prod * a[i]) % MOD;
        }
        printf("%lld\n", prod);
    }
    return 0;
}
