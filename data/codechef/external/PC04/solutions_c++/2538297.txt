#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<queue>
#include<stack>
#include<vector>
#include <map>
#include <set>
typedef long long int ll;
using namespace std;
typedef struct point{
    int x,y;
}point ;

bool collinear(point a,point b,point c){
    //printf("%d \n",((b.y - a.y)*(c.x - b.x)));
    //printf("%d \n",((c.y - b.y)*(b.x - a.x)));
    if( ((b.y - a.y)*(c.x - b.x)) == ((c.y - b.y)*(b.x - a.x)) ) return true;
    //if( ((b.y - a.y)*(c.x - b.x)) == -((c.y - b.y)*(b.x - a.x)) ) return true;
    return false;
}

int angle(point a,point b,point c){
    if((b.y - a.y)*(c.y - b.y) == -(b.x -a.x)*(c.x-b.x)) return 1;
    return 0;
}

bool parallel(point a,point b,point c,point d){
    if( ((b.y - a.y)*(c.x - d.x)) == ((c.y-d.y)*(b.x - a.x)))
        if(((c.y-b.y)*(d.x-a.x)) == ((d.y - a.y)*(c.x -b.x)))
            return true;
        return false;
}

bool intersect(point a1,point a2,point b1,point b2){
    float det;
     det = (a2.x - a1.x) * (b2.y - b1.y) - (b2.x - b1.x) * (a2.y - a1.y);
     if(det == 0)
     return 0;
     float num1,num2;
     num1 = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y)*(a1.x - b1.x);
     num2 = (b2.x - b1.x)*(a1.y - b1.y) - (b2.y - b1.y)*(a1.x - b1.x);
     if((num1 < 0) == det > 0)
     return 0;
     if((num2 < 0) == det > 0)
     return 0;
     if( ((num1 > det) == (det > 0)) || ((num2 > det) == (det > 0)) )
     return 0;
     return 1;
}

int main(){
    int t,l1,l2,l3,l4,a1,a2,a3,a4;
    point a,b,c,d;
    scanf("%d",&t);
    while(t--){
        scanf("%d%d",&a.x,&a.y);
        scanf("%d%d",&b.x,&b.y);
        scanf("%d%d",&c.x,&c.y);
        scanf("%d%d",&d.x,&d.y);
        if(collinear(a,b,c)||collinear(b,c,d)||collinear(c,d,a)||collinear(d,a,b)){
            printf("NONE\n"); continue;
        }
        if(intersect(a,b,c,d) || intersect(a,d,c,b)) {
            printf("NONE\n");continue;
        }
        l1 = (b.y-a.y)*(b.y-a.y) + (b.x-a.x)*(b.x - a.x);
        l2 = (c.y-b.y)*(c.y-b.y) + (c.x-b.x)*(c.x - b.x);
        l3 = (d.y-c.y)*(d.y-c.y) + (d.x-c.x)*(d.x - c.x);
        l4 = (a.y-d.y)*(a.y-d.y) + (a.x-d.x)*(a.x - d.x);
        a1 = angle(a,b,c);
        a2 = angle(b,c,d);
        a3 = angle(c,d,a);
        a4 = angle(d,a,b);
        if( (a.x + c.x == b.x + d.x) && (a.y + c.y ==  b.y + d.y)){
            if(a1  == 1 && a2 == 1&& a3 == 1 && a4 == 1){
                if(l1 == l2 && l2 == l3 && l3 == l4) printf("SQUARE\n");
                else printf("RECTANGLE\n");
                continue;
            }
            if(l1 == l2 && l2 == l3 && l3 == l4) {
                printf("RHOMBUS\n");continue;
            }
            printf("PARALLELOGRAM\n");
        }
        else
            printf("QUADRILATERAL\n");
    }
    return 0;
}
