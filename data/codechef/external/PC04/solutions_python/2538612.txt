#include<stdio.h>
#include<math.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
#include<vector>
#include<algorithm>

#define MOD 1000000007

using namespace std;

struct point
{
    int x,y;
};

int sameslope(struct point p1,struct point p2,struct point p3)
{
	int x1=p1.x;
	int y1=p1.y;
	int x2=p2.x;
	int y2=p2.y;
	int x3=p3.x;
	int y3=p3.y;

	if(((y2-y1)*(x3-x2))==((y3-y2)*(x2-x1)))
	return 1;

	else
	return 0;
}

int isparallel(int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4)
{
	if((y2-y1)*(x4-x3)==(y4-y3)*(x2-x1))
	return 1;

	else
	return 0;
}

int dist(struct point p1,struct point p2)
{
	return ( ( (p2.y-p1.y)*(p2.y-p1.y) )+( (p2.x-p1.x)*(p2.x-p1.x) ) );
}

int isper(struct point p1,struct point p2,struct point p3,struct point p4)
{
	int a=(p3.y-p1.y)*(p4.y-p2.y);
	int b=(p3.x-p1.x)*(p4.x-p2.x);
	if(a==-b)
	return 1;

	else
	return 0;


}

int direction(struct point p1,struct point p2,struct point p3)
{
	int x1=p3.x-p2.x;
	int y1=p3.y-p2.y;
	int x2=p2.x-p1.x;
	int y2=p2.y-p1.y;
	

	
	int val= (x1*y2-x2*y1);

	if(val==0)
	return 0;
	
	else if(val>0)
	return 1;
	
	else
	return 2;
}

int onsegment(struct point p1,struct point p2,struct point p3)
{
	int maxx=max(p1.x,p2.x);
    int minx=min(p1.x,p2.x);
    int maxy=max(p1.y,p2.y);
    int miny=min(p1.y,p2.y);

	if(p3.x>=minx&&p3.x<=maxx&&p3.y>=miny&&p3.y<=maxy)
	return 1;
	
	else
	return 0;
}

int intersect(struct point p1,struct point p2,struct point p3,struct point p4)
{
	int d1=direction(p3,p4,p1);
	int d2=direction(p3,p4,p2);
	int d3=direction(p1,p2,p3);
	int d4=direction(p1,p2,p4);
	
	if(d1!=d2&&d3!=d4)
	return 1;
	
	else if(d1==0&&onsegment(p3,p4,p1))
	return 1;
	
	else if(d2==0&&onsegment(p3,p4,p2))
	return 1;

	else if(d3==0&&onsegment(p1,p2,p3))
	return 1;

	else if(d4==0&&onsegment(p1,p2,p4))
	return 1;

	else
	return 0;
}

int isperpendicular(struct point p1,struct point p2,struct point p3,struct point p4)
{
	// P/Q*R/S=-1
	int P=p2.y-p1.y;
	int Q=p2.x-p1.x;
	int R=p4.y-p3.y;
	int S=p4.x-p3.x;
//	printf("\n%d %d %d %d",P,Q,R,S);
	
	if(P*R==(-1*Q*S))
	{
//		printf("Returning 1");
		return 1;
	}
	
	else
	{
	//	printf("Returning 0");
		return 0;
	}
}

int main()
{
int t;

scanf("%d",&t);

while(t--)
{
struct point p1,p2,p3,p4;

scanf("%d %d",&p1.x,&p1.y);
scanf("%d %d",&p2.x,&p2.y);
scanf("%d %d",&p3.x,&p3.y);
scanf("%d %d",&p4.x,&p4.y);

if(sameslope(p1,p2,p3)||sameslope(p2,p3,p4)||sameslope(p3,p4,p1)||sameslope(p4,p1,p2))
printf("\nNONE");

else if(intersect(p1,p2,p3,p4)||intersect(p1,p4,p3,p2))
printf("\nNONE");

else
{
	if(dist(p1,p2)!=dist(p3,p4)||dist(p2,p3)!=dist(p4,p1))
	{
		printf("\nQUADRILATERAL");
		continue;
	}
	
	else if(dist(p1,p2)==dist(p2,p3)) // adjacent sides are equal
	{
	//	printf("\n%d %d %d %d %d %d",dist(p1,p2),dist(p2,p3),dist(p3,p4),dist(p4,p1),dist(p1,p3),dist(p2,p4));
		if(isperpendicular(p1,p2,p2,p3)&&isperpendicular(p2,p3,p3,p4)&&isperpendicular(p3,p4,p4,p1)&&isperpendicular(p4,p1,p1,p2))
		printf("\nSQUARE");

		else
		printf("\nRHOMBUS");

		continue;
	}

	else // adjacent sides are not equal
	{
	if(isperpendicular(p1,p2,p2,p3)&&isperpendicular(p2,p3,p3,p4)&&isperpendicular(p3,p4,p4,p1)&&isperpendicular(p4,p1,p1,p2))
		printf("\nRECTANGLE");
		
		else
		printf("\nPARALLELOGRAM");

		continue;
	}
	

}
	

}
}//end of main()
