import java.io.IOException;
import java.util.Arrays;
import java.awt.geom.Line2D;
import java.util.InputMismatchException;
import java.util.Comparator;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author karan173
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		FastReader in = new FastReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Quadrilateral solver = new Quadrilateral();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Quadrilateral
{
    double eps = 1e-8;

    public void solve(int testNumber, FastReader in, PrintWriter out)
    {
        MyPoint2D p[] = new MyPoint2D[4];
        for (int i = 0; i < 4; i++)
        {
            p[i] = new MyPoint2D (in.nextInt (), in.nextInt (), i);
        }
        double sqdDist[] = new double[4];
        for (int i = 0; i < 4; i++)
        {
            sqdDist[i] = p[i].distanceSquaredTo (p[(i + 1) % 4]);
        }
        boolean oppEqual = (equal (sqdDist[0], sqdDist[2]) && equal (sqdDist[1], sqdDist[3]));
        boolean adjEqual = true;
        for (int i = 0; i < 4; i++)
        {
            if (!equal (sqdDist[i], sqdDist[(i + 1) % 4]))
            {
                adjEqual = false;
                break;
            }
        }
        boolean all90 = true;
        for (int i = 0; i < 4; i++)
        {
            if (!equal (0.0, MyPoint2D.dot (p[i], p[(i + 1) % 4], p[(i + 2) % 4])))
            {
                all90 = false;
                break;
            }
        }
        boolean cross0 = false;
        for (int i = 0; i < 4; i++)
        {
            if (equal (0.0, MyPoint2D.cross (p[i], p[(i + 1) % 4], p[(i + 2) % 4])))
            {
                cross0 = true;
                break;
            }
        }
        if (cross0)
        {
            out.println ("NONE");
            return;
        }
        Line2D ab = new Line2D.Double ();
        ab.setLine (p[0].x, p[0].y, p[1].x, p[1].y);
        Line2D cd = new Line2D.Double ();
        cd.setLine (p[2].x, p[2].y, p[3].x, p[3].y);
        Line2D bc = new Line2D.Double (p[1].x, p[1].y, p[2].x, p[2].y);
        Line2D ad = new Line2D.Double (p[0].x, p[0].y, p[3].x, p[3].y);
        if (ab.intersectsLine (cd) || bc.intersectsLine (ad))
        {
            out.println ("NONE");
            return;
        }

        if (all90 && adjEqual)
        {
            out.println ("SQUARE");
            return;
        }
        if (adjEqual)
        {
            out.println ("RHOMBUS");
            return;
        }
        if (oppEqual && all90)
        {
            out.println ("RECTANGLE");
            return;
        }
        if (oppEqual)
        {
            out.println ("PARALLELOGRAM");
            return;
        }
        out.println ("QUADRILATERAL");
    }

    boolean equal(double x, double y)
    {
        return Math.abs (x - y) <= eps;
    }

}

class FastReader
{

    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastReader(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
        {
            throw new InputMismatchException ();
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                throw new InputMismatchException ();
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read ();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
            {
                throw new InputMismatchException ();
            }
            res *= 10;
            res += c - '0';
            c = read ();
        } while (!isSpaceChar (c));
        return res * sgn;
    }

    public String nextString()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        StringBuilder res = new StringBuilder ();
        do
        {
            res.appendCodePoint (c);
            c = read ();
        } while (!isSpaceChar (c));
        return res.toString ();
    }

    public boolean isSpaceChar(int c)
    {
        if (filter != null)
        {
            return filter.isSpaceChar (c);
        }
        return isWhitespace (c);
    }

    public static boolean isWhitespace(int c)
    {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String next()
    {
        return nextString ();
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}

class MyPoint2D implements Comparable<MyPoint2D>
{
    public double x, y;
//    double theta;
    int id;
    public MyPoint2D(double x, double y, int id)
    {
        this.x = x;
        this.y = y;
//        theta = Math.atan2(y, x);
        this.id = id;
    }

    // return square of Euclidean distance between this point and that point
    public double distanceSquaredTo(MyPoint2D that)
    {
        double dx = this.x - that.x;
        double dy = this.y - that.y;
        return dx * dx + dy * dy;
    }

    // compare by y-coordinate, breaking ties by x-coordinate
    public int compareTo(MyPoint2D that)
    {
        if (this.y < that.y)
            return -1;
        if (this.y > that.y)
            return +1;
        if (this.x < that.x)
            return -1;
        if (this.x > that.x)
            return +1;
        return 0;
    }

    /*
    returns cross of vectors p1->p2 and p2->p3
     */
    public static double cross(MyPoint2D p1, MyPoint2D p2, MyPoint2D p3)
    {
        //using cross product of vectors p1p2 and p2p3
        //cross product will only have z component

        //vector a = p2-p1, b = p3-p2
        double ax = p2.x - p1.x;
        double ay = p2.y - p1.y;
        double bx = p3.x - p2.x;
        double by = p3.y - p2.y;

        //z compont of cross
        double crossZ = ax * by - bx * ay;
        return crossZ;
    }

    /*
    dot product of vectors p1->p2 and p2->p3
     */
    public static double dot(MyPoint2D p1, MyPoint2D p2, MyPoint2D p3)
    {
        //using cross product of vectors p1p2 and p2p3
        //cross product will only have z component

        //vector a = p2-p1, b = p3-p2
        double ax = p2.x - p1.x;
        double ay = p2.y - p1.y;
        double bx = p3.x - p2.x;
        double by = p3.y - p2.y;

        //z compont of cross
        return ax * bx + ay * by;
    }

    // compare other points relative to polar angle (between -pi and pi) they
    // make with Origin, break ties with y then x

    //sort by id

    // does this point equal y?
    public boolean equals(Object other)
    {
        if (other == this)
            return true;
        if (other == null)
            return false;
        if (other.getClass() != this.getClass())
            return false;
        MyPoint2D that = (MyPoint2D) other;
        return this.x == that.x && this.y == that.y;
    }

    // convert to string
    public String toString()
    {
        return "(" + x + ", " + y + ")";
    }

    }
