import java.awt.Point;
import java.io.*;
import java.util.Arrays;

/*
 * Word Mess
 */
class EN03 {

	static char[][] map;
	static final int d[][] ={{0,1},{1,0},{0,-1},{-1,0},{1,1},{-1,-1}};
	static Point fn;
	
	public static void main(String[] args)throws IOException {
		// TODO Auto-generated method stub
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder out = new StringBuilder();
		int n = Integer.parseInt(in.readLine());
		map = new char[n+2][n+2];
		for(char ch[] : map)
			Arrays.fill(ch, '#');
		for (int i=0;i<n;i++){
			String l = in.readLine();
			for (int j=0;j<n;j++){
				map[j+1][i+1] = l.charAt(j);
			}
		}
		String wrds = in.readLine();
		while (!wrds.startsWith("0")){
			boolean fnd = false;
			for (int i=1;i<=n;i++)
			for (int j=1;j<=n;j++){
			if (map[j][i] == wrds.charAt(0))
			for (int k=0;k<6;k++){
				if (dfs(new Point(j,i),wrds,k,0)){
					fnd = true;
					out.append(i+","+j+" "+fn.y+","+fn.x+"\n");
				}
			}
			}
			if (!fnd)
				out.append("Not found\n");
			wrds = in.readLine();
		}
		
		System.out.print(out);
	}

	static boolean dfs(Point st, String w,int dir,int in){
		//pln(st);
		fn = new Point(st);
		if (in == w.length()-1)
			return true;
		if (map[st.x+d[dir][0]][st.y+d[dir][1]] == w.charAt(in+1)){
			return dfs(new Point(st.x+d[dir][0],st.y+d[dir][1]),w,dir,in+1);
		}
		return false;
	}
	static void pln(Object o){
		System.out.println(o);
	}
}
