// This works!!
//Data-structures includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;

#define pb		push_back
#define mp	 	make_pair
#define fill(a,v) 	memset(a, v, sizeof(a))
#define sz		size()
#define all(x)		x.begin(), x.end()
#define INDEX(arr,ind)	(lower_bound(all(arr),ind)-arr.begin())
#define FF		first
#define SS		second
#define T(t)            int t;scanf ("%d",&t);while (t--)
typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef vector<long long> VLL;
typedef pair<int,int> PII;
typedef vector<pair<int,int> > VPII;
typedef pair<double,double> pdd;

int main()
{
	int n;
	int i,j,k,flag=0,len;	
	char arr[111][111];
	scanf ("%d",&n);
	for (i=0;i<n;i++)
		scanf ("%s",arr[i]);
	while (1)
	{
		char s[111];
		scanf ("%s",s);
		if (s[0]=='0') break;
		len=strlen(s);
		int pr=0;
		for (i=0;i<n;i++)
		{
			for (j=0;j<n;j++)
			{
				flag=0;
				if (n-j>=len)
				{
					for (k=0;k<len;k++){
						if (arr[i][j+k]!=s[k]){
							flag=1;break;}
					}
					if (flag==0 && pr==0){

						printf ("%d,%d %d,%d\n",i+1,j+1,i+1,j+len);
						pr=1;
					}
				}
				flag=0;
				if (j+1>=len)
				{
					for (k=0;k<len;k++){
						if (arr[i][j-k]!=s[k]){
							flag=1;break;}
					}
					if (flag==0 && pr==0){
						printf ("%d,%d %d,%d\n",i+1,j+1,i+1,j+2-len);
						pr=1;
					}
				}
				flag=0;
				if (n-i>=len)
				{
					for (k=0;k<len;k++){
						if (arr[i+k][j]!=s[k]){
							flag=1;break;}
					}
					if (flag==0 && pr==0){
						printf ("%d,%d %d,%d\n",i+1,j+1,i+len,j+1);
						pr=1;
					}
				}
				flag=0;
				if (i+1>=len)
				{
					for (k=0;k<len;k++){
						if (arr[i-k][j]!=s[k]){
							flag=1;break;}
					}
					if (flag==0 && pr==0){
						printf ("%d,%d %d,%d\n",i+1,j+1,i+2-len,j+1);
						pr=1;
					}
				}
				flag=0;
				if (n-i>=len && n-j>=len)
				{
					for (k=0;k<len;k++){
						if (arr[i+k][j+k]!=s[k]){
							flag=1;break;}
					}
					if (flag==0 && pr==0){
						printf ("%d,%d %d,%d\n",i+1,j+1,i+len,j+len);
						pr=1;
					}
				}
				flag=0;
				if (j+1>=len && i+1>=len)
				{
					for (k=0;k<len;k++){
						if (arr[i-k][j-k]!=s[k]){
							flag=1;break;}
					}
					if (flag==0 && pr==0){
						printf ("%d,%d %d,%d\n",i+1,j+1,i+2-len,j-len+2);
						pr=1;
					}
				}
				if (pr==1) break;
			}
			if (pr==1) break;
		}
		if (pr==0) printf ("Not found\n");
	}
	return 0;
}
