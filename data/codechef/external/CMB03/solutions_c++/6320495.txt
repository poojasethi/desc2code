//@author:Sameer Jain
//@status:
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<math.h>
#include<malloc.h>
#include<algorithm>
#include<vector>
#include<iostream>

#define rep(i,a,b) for(int i=a;i<b;i++)
#define rev(i,a,b) for(int i=a;i>=b;i--)
#define rt() int testCases;scanf("%d",&testCases);for(int i=0;i<testCases;i++)solveTestCase();
#define si(n) scanf("%d",&n);
#define sli(n) scanf("%ld",&n);
#define slli(n) scanf("%lld",&n);
#define ss(s) scanf("%s",s);
#define len(n,s) int n;n=strlen(s);
#define pi(n) printf("%d\n",n);
#define pws(n) printf("%d ",n);
#define pli(n) printf("%ld\n",n);
#define plli(n) printf("%lld\n",n);
#define ps(s) printf("%s\n",s);
#define psws(s) printf("%s ",s);
#define p2a(arr,m,n) for(int i=0;i<m;i++){for(int j=0;j<n;j++)printf("%d ",arr[i][j]);printf("\n");}
#define p2lla(arr,m,n) for(int i=0;i<m;i++){for(int j=0;j<n;j++)printf("%d ",arr[i][j]);printf("\n");}
#define pa(arr,n) for(int i=0;i<n;i++)printf("%d ",arr[i]);printf("\n");
#define clr(arr,val) memset(arr,val,sizeof(arr));
#define sa(arr,n) for(int i=0;i<n;i++)scanf("%d",&arr[i]);
#define s2a(arr,m,n) for(int i=0;i<m;i++){for(int j=0;j<n;j++)scanf("%d",&arr[i][j]);}
#define am(node) (struct node *) malloc(sizeof(struct node));

#define modu 1000000007
#define pb push_back
 
typedef long long ll;

using namespace std;

// A binary tree node
struct Node{

    int data;
    long int sum;
    struct Node* left, *right;
    struct Node* next;
};
 
// Utility function to allocate memory for a new node
struct Node* newNode(int data){

    struct Node* node = new(struct Node);
    node->data = data;
    node->left = node->right = node->next=NULL;
    return (node);
}

void solveTestCase(){

	char str_a[20],str_b[10];

	int lps_arr[10];
	ss(str_a);
	ss(str_b);
	
	int len_a=strlen(str_a);
	// ps(str_a);
	// ps(str_b);
	int len_b=strlen(str_b);

	// pi(len_b);
	//Calculating LPS
	lps_arr[0]=0;
	int i=1;
	int lps_len=0;
	while(i<len_b){

		if(str_b[i]==str_b[lps_len]){

			lps_len++;
			lps_arr[i]=lps_len;
			i++;
		}
		else{

			if(lps_len==0){

				// lps_len=0;
				lps_arr[i]=0;
				i++;
			}
			else{

				lps_len=lps_arr[lps_len-1];
			}
		}
	}
	// pa(lps_arr,len_b);
	i=0;
	int j=0;
	while(i<len_a){

		if(str_a[i]==str_b[j]){

			i++;
			j++;
			if(j==len_b){

				ps("1");
				return;
			}
		}
		else{

			if(j==0){

				i++;
			}
			else{

				j=lps_arr[j-1];
			}
		}
	}

	ps("0");
}

int main(){

	rt()
	return 0;
}