#ifndef PROGRAMMING_CONTESTS_H
#define PROGRAMMING_CONTESTS_H
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <typeinfo>
#include <utility>
#include <vector>
#ifdef LOCALHOST
static FILE* _freopen=freopen("input.txt","r",stdin);
#else
#define NDEBUG
#endif
#include <cassert>
using namespace std;
 
typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
 
#define IT(c) typeof(c.begin())
#define PB push_back
#define MP make_pair
#define LEN(a) (sizeof(a)/sizeof(a[0]))
#define ALL(c) c.begin(),c.end()
#define FOR(i,a,b) for(int i=(a), _b=(b); i<_b; ++i)
#define FORD(i,a,b) for(int i=(b-1), _a=(a); i>=_a; --i)
#define FORE(i,c) for(IT(c) i=(c).begin(); i!=(c).end(); ++i)
 
static int RI(){int res;int r=scanf("%d ",&res);assert(r==1);return res;}
static LL RLL(){LL res;int r=scanf("%lld ",&res);assert(r==1);return res;}
static ULL RULL(){ULL res;int r=scanf("%llu ",&res);assert(r==1);return res;}
static double RD(){double res;int r=scanf("%lf ",&res);assert(r==1);return res;}
static string RS(){char buf[2000];int r=scanf("%s ",buf);assert(r==1);return string(buf);}
static string RL(){string res;getline(cin,res);assert(cin.good());return res;} //Requires and discards line break at end of line.
static const double PI=acos(-1.0), EPS=1e-10;
template<typename T> static string str(T x){stringstream ss;ss<<x;return ss.str();}
template<typename A,typename V> static void fill(A& a,V v){fill_n((V*)a,sizeof(a)/sizeof(v),v);} // Requires A is a V array.
static double timer(){return 1.0*clock()/CLOCKS_PER_SEC;}
 
#endif //PROGRAMMING_CONTESTS_H
 
 
static int** comb(int n, int m=numeric_limits<int>::max()) {
  assert(n >= 0 && m >= 1);
  int** c = new int*[n+1];
  for(int i = 0; i <= n; ++i) {
    c[i] = new int[n+1]; memset(c[i],0,sizeof(c[i]));
    c[i][0] = (c[i][i] = 1);
    for(int j = 1; j <= i/2; ++j) {
      c[i][j] = (c[i][i-j] = (c[i-1][j-1]+c[i-1][j])%m);
      assert(0 <= c[i][j] && c[i][j] < m);
    }
  }
  return c;
}
 
 
LL mem[15][55][55][55];
 
int main(int argc, char** argv) {
  int** ch=comb(15);
  int n,a,b,c;
  while(true){
    cin>>n>>a>>b>>c;
    if(n==0)break;
    FORD(i,1,n+2){
      FOR(aa,0,a+1){
        FOR(bb,0,b+1){
          FOR(cc,0,c+1){
            LL res=0;
            if(i==n+1)res=1;
            else {
              //use 1 char
              if(aa>=i)res+=mem[i+1][aa-i][bb][cc];
              if(bb>=i)res+=mem[i+1][aa][bb-i][cc];
              if(cc>=i)res+=mem[i+1][aa][bb][cc-i];
              //use 2 chars
              if(i%2==0){
                if(aa>=i/2&&bb>=i/2)res+=ch[i][i/2]*mem[i+1][aa-i/2][bb-i/2][cc];
                if(aa>=i/2&&cc>=i/2)res+=ch[i][i/2]*mem[i+1][aa-i/2][bb][cc-i/2];
                if(bb>=i/2&&cc>=i/2)res+=ch[i][i/2]*mem[i+1][aa][bb-i/2][cc-i/2];                                          
              }
              //use 3 chars
              if(i%3==0&&aa>=i/3&&bb>=i/3&&cc>=i/3)res+=ch[i][i/3]*ch[2*i/3][i/3]*mem[i+1][aa-i/3][bb-i/3][cc-i/3];
            }
            mem[i][aa][bb][cc]=res;
          }
        }
      }
    }
    cout<<mem[1][a][b][c]<<endl;
  }
  return 0;
}