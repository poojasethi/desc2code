#include "bits/stdc++.h"
using namespace std;

typedef vector<int> vi;
typedef vector< int >::iterator vit;
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef long long int lld;

#define iterate(n) for(int qwe=0;qwe<n;i++)
#define getw getchar_unlocked
#define get(a) geta(&a)
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,it) for(typeof((c).begin()) it = c.begin();it!= (c).end();it++)
#define show(a) tr(a,it){ cout << *it << endl; }
#define rep(n,i) for(int (i)=0;(i)<(n);(i)++)


template < typename T >
inline void geta(T *a){
	T n=0,s=1;
	char p=getw();
	if(p=='-') s=-1;
	while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=getw();
	if(p=='-') s=-1,p=getw();
	while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=getw(); }
	*a = n*s;
}

void fill(vector<int> &a, int n){
	a.resize(n);
	rep(n,i) get(a[i]);
}

lld MOD = 1000000007;

int main(){
	lld n,m,i,j,l,r,k,p,d;
	vi a;
	lld t;	
	get(t);
	while(t--){
		get(n);
		fill(a,n);
		int isalloted[n];
		vector< int > TobeMultiplied;
		memset(isalloted,0,sizeof(isalloted));
		for(int i=0;i<n;i++){
			if( isalloted[i] == 0  ){
				isalloted[i] = 1;
				int max = a[i];
				queue<int> Q;
				Q.push(i);
				while(!Q.empty()){
					int idx = Q.front();
					for(int j = 0 ;j<n;j++){
						if( isalloted[j] == 0 && idx!=j ){
							if( __gcd(a[idx],a[j]) > 1 ){
								Q.push(j);
								if(a[j] > max){
									max = a[j];
								}
								isalloted[j] = 1;
							}
						}
					}
					Q.pop();
				}
				TobeMultiplied.push_back(max);
			}
		}
		lld ans = 1;
		for(vi::iterator it = TobeMultiplied.begin();it!=TobeMultiplied.end();it++){
			ans = (ans * (*it))%MOD;
		}
		TobeMultiplied.clear();
		printf("%lld\n",ans);
	}

	
	return 0; 	
 }













