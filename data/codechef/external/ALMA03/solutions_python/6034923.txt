

import java.io.*;
import java.math.*;
import java.util.*;
class Task {

    public static void main(String[] args) {

        Thread t = new Thread(null, null, "Solution", 100000000) {

            @Override
            public void run() {
                InputStream inputstream = System.in;
                OutputStream outputstream = System.out;
                InputReader in = new InputReader(inputstream);
                PrintWriter out = new PrintWriter(outputstream);

                int T = 1;
                T = Integer.parseInt(in.readString());

                for (int i = 1; i <= T; i++) {
                    Solution solver = new Solution();
                    solver.solve(i, in, out);
                }
                out.close();
            }

        };
        t.start();

    }
}

class Graph {

    Map<Integer, ArrayList<Integer>> mymap;

    Set<Integer> myset;

    public Graph() {
        mymap = new HashMap<Integer, ArrayList<Integer>>();
        myset = new HashSet<Integer>();
    }

    public void dfs(int ele, int[] max) {

        myset.add(ele);
        if (max[0] < ele) {
            max[0] = ele;
        }
        ArrayList<Integer> mylist = mymap.get(ele);
        if (mylist == null) {
            return;
        }
        for (Integer temp : mylist) {
            if (myset.contains(temp) == false) {
                dfs(temp, max);
            }
        }
    }
}

class Solution {

    public int gcd(int large, int small) {

        if (small == 0) {
            return (large);
        }
        return (gcd(small, large % small));
    }

    public void solve(int testno, InputReader in, PrintWriter out) {

        int N = in.readInt();
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = in.readInt();
        }

        Graph g = new Graph();
        for (int i = 0; i < N - 1; i++) {
            for (int j = i + 1; j < N; j++) {
                if (gcd(arr[i], arr[j]) > 1) {
                    ArrayList<Integer> mylist = g.mymap.get(arr[i]);
                    if (mylist == null) {
                        mylist = new ArrayList<Integer>();
                        mylist.add(arr[j]);
                        g.mymap.put(arr[i], mylist);
                    } else {
                        mylist.add(arr[j]);
                        g.mymap.put(arr[i], mylist);
                    }
                    mylist = g.mymap.get(arr[j]);

                    if (mylist == null) {
                        mylist = new ArrayList<Integer>();
                        mylist.add(arr[i]);
                        g.mymap.put(arr[j], mylist);
                    } else {
                        mylist.add(arr[i]);
                        g.mymap.put(arr[j], mylist);
                    }
                }
            }
        }

        int MOD = 100_000_000_7;
        long ans = 1;
        for (int i = 0; i < N; i++) {
            int[] max = new int[1];
            max[0] = Integer.MIN_VALUE;
            if (g.myset.contains(arr[i]) == false) {
                g.dfs(arr[i], max);
                ans = ((ans % MOD) * max[0]) % MOD;
            }
        }
        out.println(ans);

    }
}

class InputReader {

    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        if (numChars == -1) {
            throw new InputMismatchException();
        }
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0) {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int readInt() {
        int c = read();
        while (isSpaceChar(c)) {
            c = read();
        }
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9') {
                throw new InputMismatchException();
            }
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c)) {
            c = read();
        }
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public long readLong() {
        return Long.parseLong(readString());
    }

    public double readDouble() {
        return Double.parseDouble(readString());
    }

    public float readFloat() {
        return Float.parseFloat(readString());
    }

    public static boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
}
