#include<bits/stdc++.h>
using namespace std;
#define FOR(i,a)    for(int i = 0;i < a;i++)
#define REP(i,a,b)  for(int i = a;i < b;i++)
#define vi vector<int>
#define MOD 1000000007

long long chk(bool ar[500],int n)//chk and return any element of a subgraph not considered so far
{
    FOR(i,n)
    {
        if(ar[i]==false)
        {
            return i;
        }
    }
    return -1;
}

int main()
{
    ios_base::sync_with_stdio(false);	
    int t;
    cin>>t;
    while(t--)
    {
        vector<long long>v; //elemental storage
        vector<long long>graph[510];
        int n;
        cin>>n;
        bool ar[500]; //track visited elements
        fill(ar,ar+500,false);
        long long a;
        FOR(i,n)
        {
        	cin>>a;
        	v.push_back(a);
        }
        //sort(v.begin(),v.end(),std::greater<long long>());
        FOR(i,n)
        {
        	REP(j,i+1,n)
        	{
        		if(__gcd(v[i],v[j])!=1)
        		{
        		    graph[i].push_back(j);  //graph construction
        		    graph[j].push_back(i);
        		}
        	}
        }
        long long prod=1;
        while(chk(ar,n)!=-1)
        {
            long long beg=chk(ar,n);//first ele with false
            vector<long long>ele;//the current connected element
            queue<long long>q;//bfs queue
            q.push(beg);//init
            ar[beg]=true;//init
            ele.push_back(beg);//init
            while(!q.empty())
            {
                long long tp=q.front();
                q.pop();
                for(vector<long long>::iterator it=graph[tp].begin();it!=graph[tp].end();it++)//bfs
                {
                    if(ar[*it]==false)
                    {
                        q.push(*it);
                        ar[*it]=true;
                        ele.push_back(*it);
                    }
                }
            }
            long long ma=-1;
            for(vector<long long>::iterator it=ele.begin();it!=ele.end();it++)//find connected element maxima
            {
                ma=max(ma,v[*it]);
            }
            prod=(prod*ma)%MOD;
        }
        cout<<prod<<endl;
    }
    return 0;
}
