import java.io.*;
import java.util.*;

class Solution {

    BufferedReader br;
    PrintWriter out;
    StringTokenizer st;
    boolean eof;

    static final int Mod = 1000000007;

    int[] p, sz;

    void init(int n) {
        for (int i = 1; i <= n; i++) {
            p[i] = i;
            sz[i] = 1;
        }
    }

    int root(int x) {
        return p[x] == x ? x : root(p[x]);
    }

    void join(int a, int b) {
        a = root(a);
        b = root(b);
        if (a == b) return;
        if (sz[a] > sz[b]) sz[p[b] = a] += sz[b];
        else sz[p[a] = b] += sz[a];
    }

    int gcd(int x, int y) {
        while (x > 0 && y > 0) {
            if (x > y) x %= y;
            else y %= x;
        }
        return x + y;
    }

    void solve() throws IOException {
        p = new int[222];
        sz = new int[222];
        int t = nextInt();
        while (t-- > 0) {
            int n = nextInt();
            int a[] = new int[n + 1];
            for (int i = 1; i <= n; i++) a[i] = nextInt();
            init(n);
            for (int i = 1; i <= n; i++) {
                for (int j = i + 1; j <= n; j++) {
                    if (gcd(a[i], a[j]) > 1) {
                        join(i, j);
                    }
                }
            }
            long res = 1;
            for (int i = 1; i <= n; i++) {
                int mx = -Mod;
                for (int j = 1; j <= n; j++)
                    if (root(j) == i) {
                        if (mx < a[j]) mx = a[j];
                    }
                if (mx >= 0) res = (res * mx) % Mod;
            }
            out.println(res);
        }
    }

    Solution() throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        out = new PrintWriter(System.out);
        solve();
        out.close();
    }

    public static void main(String[] args) throws IOException {
        new Solution();
    }

    String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return null;
            }
        }
        return st.nextToken();
    }

    String nextString() {
        try {
            return br.readLine();
        } catch (IOException e) {
            eof = true;
            return null;
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }
}