import java.util.Scanner;

public class Main {
    static boolean[][] connected;
    static boolean[] seen;
    static int N;
    static int[] A;

    static int gcd(int a, int b) {
        return (b == 0) ? a : gcd(b, a%b);
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int T = input.nextInt();
        for (int t=0; t<T; t++) {
            N = input.nextInt();
            A = new int[N];
            for (int n=0; n<N; n++) {
                A[n] = input.nextInt();
            }
            connected = new boolean[N][N];
            for (int i=0; i<N; i++) {
                for (int j=i+1; j<N; j++) {
                    int gcd = gcd(A[i], A[j]);
                    if (gcd > 1) {
                        connected[i][j] = connected[j][i] = true;
                    }
                }
            }
            seen = new boolean[N];
            long answer = 1;
            for (int n=0; n<N; n++) {
                if (!seen[n]) {
                    answer *= dfs(n);
                    answer %= 1000000007;
                }
            }
            System.out.println(answer);
        }
    }

    static long dfs(int node) {
        seen[node] = true;
        long max = A[node];
        for (int i=0; i<N; i++) {
            if (connected[node][i] && !seen[i]) {
                max = Math.max(max, dfs(i));
            }
        }
        return max;
    }

}
