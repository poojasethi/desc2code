//includes
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <list>
#include <utility>
#include <algorithm>
#include <cassert>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>

using namespace std;

#define inf 1e7;

map<pair<int,int>, bool> discovered;
//map<int, bool> final;

queue<pair< pair<int, int>, int> > db;
vector<vector<int> > L;
map< pair<int, int>, vector< pair<int, int> > > adjList;

int Vc;
int check = 0;
//void BFS(int s)
//{
//    discovered[s] = true;
//    for(int v=0;v<Vc;v++)
//    {
//        if(v!=s)discovered[v]=false;
//    }
//    int i=0;
//    L.push_back(*(new vector<int>));
//    L[0].push_back(s);
//    if(final[s]) {cout << 0<< endl; check = 1; return; }
//
//    while(L[i].size()!=0)
//    {
//        L.push_back(*(new vector<int>));
//        for(int j=0;j < (int)L[i].size(); j++)
//        {
//            int u = L[i][j];
//            for(int k=0;k<(int)adjList[u].size();k++)
//            {
//                int v = adjList[u][k];
//                if(final[v]){cout<<i+1<<endl;check = 1;return;}
//                if(discovered[v]==false)
//                {
//                    discovered[v] = true;
//                    L[i+1].push_back(v);
//                }
//            }
//        }
//        i++;
//    }
//}


int gcd(int a, int b) {
    return b ? gcd(b, a % b) : a;
}

int main()
{
    int n1;
    cin >> n1;

    while(n1--)
    {
        check = 0;
        discovered.clear();
        //        L.clear();
        adjList.clear();
        while(!db.empty()) db.pop();
        int p,a,b,c,d,k,q;
        cin >> p >> a >> b >> c >> d >> k >> q;

        q%=k;
        for(int i=0;i<d;i++)
        {
            adjList[make_pair(0,i)] = *(new vector<pair<int, int> >);
            adjList[make_pair(0,i)].push_back(make_pair(0, (i+a)%d));
            adjList[make_pair(0,i)].push_back(make_pair(0, (i+d-b%d)%d));
            adjList[make_pair(0,i)].push_back(make_pair(0, (i*c)%d));
//            adjList[make_pair(0,i)].push_back(make_pair(0, (i%d)%d));
            adjList[make_pair(0,i)].push_back(make_pair(1, (i%k)));

        }
        for(int i=0;i<k;i++)
        {
            adjList[make_pair(1,i)] = *(new vector<pair<int, int> >);
            adjList[make_pair(1,i)].push_back(make_pair(1, (i+a)%k));
            adjList[make_pair(1,i)].push_back(make_pair(1, (i+k-b%k)%k));
            adjList[make_pair(1,i)].push_back(make_pair(1, (i*c)%k));

        }


        db.push(make_pair(make_pair(0,p%d),0));
        db.push(make_pair(make_pair(1,p%k),0));
        discovered[make_pair(0,p%d)]=true;
        discovered[make_pair(1,p%k)]=true;
        while(!db.empty())
        {
            pair<int,int> u = db.front().first;
            //            int r = db.front().first;
            int val = db.front().second;
            db.pop();
            if(u.first==1 && u.second==q) {
                check = 1;
                    cout<<val<< endl;break;}
            for(int i=0;i<(int)adjList[u].size();i++)
            {
                pair<int, int> v = adjList[u][i];
                if(!discovered[v])
                {
                    discovered[v] = true;
                    db.push(make_pair(v, val+1));
                }
            }
        }
                if(!check) cout << -1 << endl;
    }


}
