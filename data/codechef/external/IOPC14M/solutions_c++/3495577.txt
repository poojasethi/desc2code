# include <iostream>
# include <fstream>
# include <sstream>
# include <iomanip>
# include <algorithm>
# include <numeric>
# include <cstdio>
# include <cmath>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <deque>
# define inf 1000000007
using namespace std;
typedef unsigned long long int ulli;
int main() {
    #ifndef ONLINE_JUDGE
        freopen("../input.txt","r",stdin);
    #endif
	int t;
	int N, a, b, c, d, k, Q;

	bool vis[1005][2];
	scanf("%d", &t);
	while(t--) {

		scanf("%d %d %d %d %d %d %d", &N, &a, &b, &c, &d, &k, &Q);

		for(int i=0;i<=1000;i++) {		
			vis[i][0] = false;
			vis[i][1] = false;
		}
		int res = inf;
		int iter = 0, steps, currN, applied;
		queue< pair< pair<int, int>, int> > q;
		q.push(make_pair(make_pair(N, 0), 1));
                q.push(make_pair(make_pair(N%d, 1), 0));
		while(!q.empty()) {
			iter++;

			currN = q.front().first.first;
			steps = q.front().first.second;
			applied = q.front().second;

			q.pop();

			if(Q%k == (currN%k)) {
				res = steps;
				break;
			}

			if(vis[currN][applied]) {
				continue;
			}
			vis[currN][applied] = true;
			steps++;

			if(applied == 0) {
				//q.push(make_pair(make_pair(currN % d, steps), 0));
				q.push(make_pair(make_pair((currN + a)%d, steps), 0));
				q.push(make_pair(make_pair(((currN - b)%d + d)%d, steps), 0));
				q.push(make_pair(make_pair((currN * c)%d, steps), 0));
			}

			q.push(make_pair(make_pair((currN + a)%k, steps), 1));
			q.push(make_pair(make_pair(((currN - b)%k + k)%k, steps), 1));
			q.push(make_pair(make_pair((currN * c)%k, steps), 1));
		}
		if(res == inf)
			printf("-1\n");
		else
			printf("%d\n", res);
	}
    return 0;
}