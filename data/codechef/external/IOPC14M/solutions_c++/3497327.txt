#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include <math.h>
#include <string>
#include <algorithm>
#include <sstream>
#include <fstream>
#include <map>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <iomanip>
using namespace std;




#define LL long long
#define rep(i,a,n) for(LL i = a;i<n;i++)
#define S(a) scanf("%d",&a)
#define P(a) printf("%d\n",a)
#define PS(s) printf(s)
#define SLL(a) scanf("%lld",&a)
#define PLL(a) printf("%lld\n",a)


#define II LL


#define MOD 1000000007      
#define mp make_pair
bool visited[2][1111];
void clear()
{
	rep(i,0,2)
	rep(j,0,1111) visited[i][j] = false;
}

int main()
{
	LL test;
	SLL(test);
	pair<int,pair<int,int> >  tiii;
	pair<int,int> tii;
	while(test--)
	{
		int n,a,b,c,d,k,q;
		scanf("%d%d%d%d%d%d%d",&n,&a,&b,&c,&d,&k,&q);
		// n = 1+rand()%1000;
		// a = 1+rand()%1000;
		// b = 1+rand()%1000;
		// c = 1+rand()%1000;
		// d = 1+rand()%1000;
		// k = 1+rand()%1000;
		// q = 1+rand()%1000;
		// printf("%d %d %d %d %d %d %d \n",n,a,b,c,d,k,q );

		queue<pair<int,pair<int,int> > >  bfs = queue<pair<int,pair<int,int> > >() ;
		clear();
		bfs.push(mp(0,mp(0,n%d))); visited[0][n%d] = true;
		bfs.push(mp(0,mp(1,n%k))); visited[1][n%k] = true;
		bool found = false;
		while(bfs.size())
		{
			tiii = bfs.front(); bfs.pop();
			int lev = tiii.first;
			tii = tiii.second;


			if(tii.first==0)
			{
				if(!visited[0][((tii.second)+ (a%d) )%d] && (visited[0][((tii.second)+ (a%d) )%d] = true) ) bfs.push(mp(lev+1,mp(0,((tii.second)+(a%d) )%d)));
				if(!visited[0][((tii.second)-(b%d)+d)%d] && (visited[0][((tii.second)-(b%d)+d)%d] = true)) bfs.push(mp(lev+1,mp(0,((tii.second)-(b%d)+d)%d)));
				if(!visited[0][((tii.second)*(c%d) )%d] && (visited[0][((tii.second)*(c%d))%d] = true)) bfs.push(mp(lev+1,mp(0,((tii.second)*(c%d))%d )));
				if(!visited[1][((tii.second))%k] && (visited[1][((tii.second))%k] = true)) bfs.push(mp(lev+1,mp(1,((tii.second))%k)));
			}
			else
			{
				if((tii.second)%k== q%k)
				{
					//cerr<<"tiisec="<<tii.second<<"tiisec/k = "<<(tii.second)%k<<"q/k"<<q%k<<endl;
					found = true;
					printf("%d\n",lev);
					break;
				}
				if(!visited[1][((tii.second)+ (a%k) )%k] && (visited[1][((tii.second)+ (a%k) )%k] = true)) bfs.push(mp(lev+1,mp(1,((tii.second)+(a%k) )%k)));
				if(!visited[1][((tii.second)-(b%k)+k)%k] && (visited[1][((tii.second)-(b%k)+k)%k] = true )) bfs.push(mp(lev+1,mp(1,((tii.second)-(b%k)+k)%k)));
				if(!visited[1][((tii.second)*(c%k) )%k] && (visited[1][((tii.second)*(c%k) )%k] = true)) bfs.push(mp(lev+1,mp(1,((tii.second)*(c%k) )%k)));
			}
		}
		if(!found){
			printf("-1\n");
		}
	}
	
	
    
	return 0;
}



