#include<cstdio>


inline int get_number()
{
    int c;        
    int n = 0;

    c = getchar_unlocked();
    while (c < '0' || c > '9') {
		c = getchar_unlocked();
	}
    while (c >= '0' && c <= '9')
    {
        // n = 10 * n + (c - '0');
        n = (n << 3) + ( n << 1 ) + c - '0';
		c = getchar_unlocked();
    }
    return n;
}

inline bool has_subset(int *arr, int num, int sum)
{
   /* handles the recursive break scenario */
   if (sum < 0) {
	   return false;
   } else if (sum == 0) {
           return true;
   } else if (num == 1) {
       if (arr[0] == sum) {
		   return true;
	   } else { 
		   return false;
	   }
   }

   return (has_subset(arr, num-1, sum) || has_subset(arr, num-1, sum-arr[num-1]));
}

int main()
{
   int n_test, num, sum, i, j;
   int arr[1001];

   n_test = get_number();
   for (i=0; i<n_test; i++) {
     num = get_number();
	 sum = get_number();
	 for (j=0; j<num; j++) {
       arr[j] = get_number();
	 }
     if (has_subset(arr, num, sum)) {
		 printf("1\n");
	 } else {
		 printf("0\n");
	 }
   }
}