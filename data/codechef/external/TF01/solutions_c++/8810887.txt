#include<bits/stdc++.h>
using namespace std;
/*vector<vector<bool> > dp(1001,vector<bool>(1001));
inline int getint()
    {
    int num=0;
    char c=getchar_unlocked();
    while(!(c>='0' && c<='9'))
    c=getchar_unlocked();
    while(c>='0' && c<='9')
    {
    num=(num<<3)+(num<<1)+c-'0';
    c=getchar_unlocked();
    }
    return num;
    }
bool check(vector<int>& v,int sum,int n)
{
	int i,j;
	//vector<vector<bool> > dp(sum+1,vector<bool>(n+1,false));
	for(i=0;i<=n;i++)
		dp[0][i]=true;
	for(i=1;i<=sum;i++)
		dp[i][0]=false;
	for(i=1;i<=sum;i++)
	{
		for(j=1;j<=n;j++)
		{
			dp[i][j]=dp[i][j-1];
			if((dp[i][j]==false)&&(i>=v[j-1]))
			{
				dp[i][j]=(dp[i-v[j-1]][j-1]);
			}
		}
	}
	return dp[sum][n];
}
int main()
{
	int i,t,n,k;
	vector<int> v(1000);
	bool flag;
	t=getint();
	while(t--)
	{
		n=getint();
		k=getint();
		for(i=0;i<n;i++)
			v[i]=getint();
		flag=check(v,k,n);
		if(flag==true)
			printf("1\n");
		else
			printf("0\n");
	}
	return 0;
}*/
#include<cstdio>
#include<iostream>
using namespace std;
bool isSubsetSum(int set[], int n, int sum)
{
   if (sum == 0)
     return true;
   if (n == 0 && sum != 0)
     return false;
   if (set[n-1] > sum)
     return isSubsetSum(set, n-1, sum);
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);
}
int main()
{
       int t,n,k;
       int a[1010];
       scanf("%d",&t);
       while(t--)
       {
               scanf("%d%d",&n,&k);
               for(int i=0;i<n;i++)
                scanf("%d",&a[i]);
              cout<<isSubsetSum(a,n,k)<<endl;
       }
      return 0;
} 