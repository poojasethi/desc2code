#include <iostream>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <vector>
#include <algorithm>

using namespace std;

#define REP(i, n) for(int i=0;i<n;i++)
char s[1000005];

int main()
{
	int t;
	scanf("%d", &t);
//	cin>>t;

	while( t-- )
	{
//		string s;
//		cin>>s;
		scanf("%s", s);
		int k, l;
//		cin>>k>>l;
		scanf("%d", &k);
		scanf("%d", &l);
		
		int cur=0;
		vector <int> best;
//		int sptr = 0;
//		int eptr = 0;
		int n = strlen(s);
/*		int sz =1;
		while( eptr < n)
		{
			if(s[eptr] == s[sptr] )
				eptr++;
			else
			{
				sz = eptr-sptr;
				cur += min(sz, k);
				sz = max(0, sz-k);
				while( sz )
				{
					best.push_back(min(k, sz));
					sz = max(0, sz-k);
				}
				sptr = eptr;
			}
		}
		sz = eptr-sptr;
		cur += min(sz, k);
		sz = max(0, sz-k);
		while( sz )
		{
			best.push_back(min(k, sz));
			sz = max(0, sz-k);
		}*/
		int sz = 1;
		for( int i=1;i<=n;i++)
		{
			if( s[i] == s[i-1] )
				sz++;
			else
			{
			//	cout<<"sizes "<<sz<<endl;
				cur += min(sz, k);
				sz -= k; 
				while( sz > 0 )
				{
					best.push_back(min(k, sz));
			//		cout<<"pushing "<<sz<<endl;
					sz -= k;
				}
				sz = 1;
			}
		}
		//cout<<cur<<endl;
		sort( best.begin(), best.end(), greater <int> () );
		int m = best.size();
		if( cur >= l )
		{
//			cout<<l<<endl;
			printf("%d\n",l);
			continue;
		}
		int cmat = cur;
//		cout<<cmat<<endl;
		REP(i, m)
		{
			if( cmat >= l )
			{
		//		cout<<cur<<endl;
				printf("%d\n",cur);
				break;
			}

			if( cmat + best[i] >= l )
			{
				//cout<<cur+1+(l-cmat)<<endl;
				printf("%d\n",cur+1+l-cmat);
				break;
			}
			cmat += best[i];
			cur += best[i]+1;
//			cout<<cmat<<endl;

		}
	}
	return 0;
}
