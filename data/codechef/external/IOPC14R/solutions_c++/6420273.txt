#include <iostream>
#include <set>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string.h>

using namespace std;

char str[1000010];

#define inchar getchar_unlocked

inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}


int main() {
	// your code goes here
   
    int test;
    cin>>test;
    while(test--)
     {
         scanf("%s",str+1);
         int len = strlen(str+1);
         int k,l;
         inp(k);inp(l);
         
         
         // find the longest subsequence which can be formed where length of V = LCS
         
         char c = str[1];
         int count = 1;
         int minlen = 0;
         
         vector<int> vec,extra;
         
         for(int i=2;i<=len;i++)
          {
             if(str[i] == c)
              {
                 count++; 
              }
              else
              {
                 vec.push_back(count);
                 c = str[i];
                 count = 1;
              }
          }
          
          vec.push_back(count);
          
          for(int i=0;i<vec.size();i++)
           {
               int x = vec[i];
               if(x<=k)
                {
                   minlen += x;               
                }
                else
                {
                   x -= k;
                   minlen += k;
                   while(x>0)    
                    {
                       extra.push_back(min(x,k));
                       x -=k;
                    }
                }
           }
           
          
           
        if(minlen >= l)
         {
             printf("%d\n",l);
             continue;
         }
         
         sort(extra.begin(),extra.end());
         
         int lcs = minlen;
         
         for(int i=extra.size()-1;i>=0;i--)
          {
               lcs += extra[i];
               minlen = minlen + extra[i] + 1;
               if(lcs >= l)
                break;
               
          }
         printf("%d\n",minlen+l-lcs);
         
     }
   
	return 0;
}
