#include<stdio.h>
#include<iostream>
#include<math.h>
#include<stdlib.h>
#include<set>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
using namespace std;
#define ll long long
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define sc(x) scanf("%c",&x)
#define vl vector< ll > 
#define vi vector< int > 
#define vvl vector< vl > 
#define vvi vector< vi > 
#define pb push_back
#define mod 1000000007
#define mem(x,y) memset(x,y,sizeof(x))
#define f(i,n) for(int i=0;i<(n);i++)
#define max_int_value 2147483647
#define max_long_value 9223372036854775807
//qsort(ww,cc,sizeof(tp),compare);
/*int compare(const void *a,const void *b){
	ll y=((((tp*)a)->w)-(((tp*)b)->w));
	if(y>0)return 1;
	else if(y==0)return 0;
	else return -1;
}*/
ll t,arr[1000010],k,len,cc,l,mmax,curr,flag,lleft,ff;
char ss[1000010];
int main()
{
	sl(t);
	while(t--){
		scanf("%s",ss);
		sl(k); sl(l);
		len=strlen(ss);
		cc=0; mmax=1; curr=1;
		flag=0; ff=0;
		for(int i=1;i<len;i++){
			if(ss[i]!=ss[i-1]){
				if(curr>k){
					ll temp=curr-k;
                    ff+=(temp/k);
                    if(temp%k){
                        arr[cc]=temp%k;
                        //cout<<"kk "<<curr<<endl;;
                        cc++;
                    }
				}
				mmax++; curr=1;
			}else{
				curr++;
				if(curr<=k)mmax++;
			}
		}
        if(curr>k && curr!=0){
            ll temp=curr-k;
            ff+=(temp/k);
            if(temp%k){
                arr[cc]=temp%k;
                //cout<<"kk "<<curr<<endl;;
                cc++;
            }
		}
        //cout<<mmax<<endl;
		if(mmax>=l){
			printf("%lld\n",l);
		}else{
			lleft=l-mmax;
            if(lleft<ff*k){
                mmax+=ceil(double(lleft)/k)+lleft;
            }else{
                mmax+=ff*k+ff;
                lleft-=ff*k;
                sort(arr,arr+cc);
                //cout<<cc<<endl;
                for(int i=cc-1;i>=0 && lleft>0;i--){
                    if(lleft<=arr[i]){
                        mmax+=ceil(double(lleft)/k)+lleft;
                        lleft=0;
                        break;
                    }else{
                        mmax+=ceil(double(arr[i])/k)+arr[i];
                        lleft-=arr[i];
                    }
                }
			}
            printf("%lld\n",mmax);
		}
	}
	return 0;
}
