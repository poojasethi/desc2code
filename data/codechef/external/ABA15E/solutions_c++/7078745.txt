#include<vector>
#include<cstring>
#include<algorithm>
#include<stdio.h>
#include<climits>
#include<set>
#include<fstream>
#include<cmath>
#include<bitset>
#include<map>
#include<stack>
#include<fstream>
#include<iostream>
#include<queue>
#define test(t) while(t--)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)

#define p(n) printf("%lld\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>
#define pb push_back
#define inf 1000000000LL
#define mp make_pair

#define N 100014
//#define inf 100000000
#define ll  long long
using namespace std;

ll mod =1000000007;
double eps = 1e-9;
ll powmod(ll a,ll b)
{
   ll res = 1;
   while(b>0)
   {
     if(b&1)
        res = (res*a)%mod;
        a=(a*a)%mod;
        b/=2;
   }
   return res;
}
ll minverse(ll a)
{
  if(a==0)
    return 1LL;
  else
   return powmod(a,mod-2);
}

int row=5,col=5;
void copymatrix(ll a[5][5],ll b[5][5])
{
 int i,j;
 for(i=0;i<row;++i)
 for(j=0;j<col;++j)
 a[i][j]=b[i][j];
}
void multiply(ll a[5][5],ll b[5][5])
{
    ll c[5][5];
    int i,j,k;
    for(i=0;i<5;i++)
       for(j=0;j<5;++j)
         c[i][j]=0;

    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            c[i][j]=0;
            for(k=0;k<col;k++)
            {
                c[i][j]=(c[i][j]+a[i][k]*1LL*b[k][j]%mod)%mod;
            }
        }
    }
    copymatrix(a,c);
}

void matpow(ll a[5][5],ll b)
{


     ll c[5][5];
    int i,j;
    for(i=0;i<5;i++)
        for(j=0;j<5;++j)
         c[i][j]=0;
    for(i=0;i<col;i++)
        c[i][i]=1;

    while(b)
    {
        if(b&1)
            multiply(c,a);
        multiply(a,a);
        b/=2;
    }
    copymatrix(a,c);
}

int main()
{

  int t,i,j;
  ll ans ;
  cin>>t;
  ll mat[5][5];


  while(t--)
  {
  int n;
    s(n);
     memset(mat,0,sizeof(mat));
      mat[0][0] = 4;
      mat[0][1] = mat[0][4] = mat[2][1] = mat[3][2] = mat[4][4] = 1;
      mat[1][1] = 3;
      mat[1][2] = 2;
      matpow(mat,n-1);
      ans = mat[0][0]*7 +mat[0][1]*5 +mat[0][2]+mat[0][3] +2*mat[0][4];
      ans = ans%mod;
    printf("%lld\n",ans);
  }
return 0;
}
