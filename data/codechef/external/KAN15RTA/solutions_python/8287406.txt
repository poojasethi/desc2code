
//Created By Mayur Agarwal :)

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include<iostream>
#include<stdio.h>
#include<cmath>
#include <vector>
#include <string>
#include<cstring>
#include <set>
#include <algorithm>
#include<map>
#include<iterator>
#include<functional>
#include<stack>
#include<queue>

#define ll long long 
#define in(a) scanf("%lld",&a)
#define inc(a) scanf("%c",&a)
#define ins(a) scanf("%s", &a)
#define pr(a) printf("%lld\n",a)
#define prc(a) printf("%c",a)
#define prs(a) printf("%s\n",a)
#define fori(I,N) for(ll I=0;I<N;I++)
#define forin(i,n) for(ll I=1;I<=N;I++)
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define ALL(X) (X).begin(), (X).end()
#define pi   acos(-1.0)
#define mod 1000000007
#define SIZE 452

using namespace std;
typedef pair<ll, ll>pll;


ll dp[452][452][452];
char x[SIZE], y[SIZE], z[SIZE];


ll LCSubsequence(ll n)  //return the length of common subsequence in two strings
{
	for (ll i = 0; i <= n; i++)
	{
		for (ll j = 0; j <= n; j++)
		{
			for (ll k = 0; k <= n; k++)
			{
				if (i == 0 || j == 0 || k == 0)
					dp[i][j][k] = 0;
				else if (x[i - 1] == y[j - 1] && z[k - 1] == y[j - 1])
					dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;
				else if (x[i - 1] == y[j - 1] && z[k - 1] != y[j - 1])
				{
					dp[i][j][k] = max(dp[i][j][k - 1], dp[i - 1][j - 1][k]);
				}
				else if (z[k - 1] == y[j - 1] && x[i - 1] != y[j - 1])
				{
					dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k - 1]);
				}
				else if (x[i - 1] == z[k - 1] && y[j - 1] != z[k - 1])
				{
					dp[i][j][k] = max(dp[i][j - 1][k], dp[i - 1][j][k - 1]);
				}
				else
				{
					dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));
				}
			}
		}
	}
	return dp[n][n][n];
}


int main()
{
	ll t;
	in(t);
	while (t--)
	{
		ins(x);
		ins(y);
		ins(z);
		ll n = strlen(x);
		pr((3 * (n - LCSubsequence(n))));
	}
	//system("pause");
	return 0;
}