#include<iostream>
#define MAX 40
using namespace std;
using std::string;
 
static struct IO {
char tmp[1 << 10];
 
// fast input routines
char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
inline char nextChar() { return cur = getc_unlocked(stdin); }
inline char peekChar() { return cur; }
 
inline operator bool() { return peekChar(); }
inline static bool isBlank(char c) { return (c < '-' && c); }
inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
inline IO& operator >> (char * buf) {
if (skipBlanks()) {
if (peekChar()) {
*(buf++) = peekChar();
while (!isBlank(nextChar())) *(buf++) = peekChar();
} *(buf++) = 0; } return *this; }
 
inline IO& operator >> (string & s) {
if (skipBlanks()) { s.clear(); s += peekChar();
while (!isBlank(nextChar())) s += peekChar(); }
return *this; }
 
inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }
 
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
inline void putChar(char c) { putc_unlocked(c, stdout); }
inline IO& operator << (const char c) { putChar(c); return *this; }
inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
struct job
{
	int s,f,pay;
}JOB[MAX],temp;
int main()
{
	int T,c,i,j,K,M,D,k,result,m1,m2,t;
	cin>>T;
	for(c =1;c<=T;c++)
	{
		cin>>K>>M;
		m1=m2=0;
		for(i=1;i<=K;i++)
		{
			cin>>JOB[i].s>>JOB[i].f;
			JOB[i].pay=0;
			if(m1>JOB[i].s || m1==0)
				m1=JOB[i].s;
			if(m2<JOB[i].f)
				m2 = JOB[i].f;
		}
		
		for(i=0;i<M;i++)
		{
			cin>>D;
			while(D--)
			{
				cin>>j>>k;
				JOB[j].pay +=k;
			}
		}
		for(i=1;i<=K;i++)
		{
			j= i-1;
			temp = JOB[i];
			while(j>=0 && JOB[j].s >= temp.s)
			{
				JOB[j+1]=JOB[j];
				j--;
			}
			JOB[j+1]= temp;
		}
		result =0;
		for(i=m1;i<=m2;i++)
		{
			t = 0;
			for(j=1;j<=K;j++)
			{
				if(JOB[j].s <=i && JOB[j].f>=i)
					t+=JOB[j].pay;
				else if(JOB[j].s > i)
					break;
			}
			if(t>result)
				result = t;
		}
		cout<<"Case "<<c<<": "<<result<<endl;
	}
	return 0;
}