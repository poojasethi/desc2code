/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <complex>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FF(i,a,n) for(i=(a);i<(n);++i)
#define REP(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define MAX(a,b) ((a)>(b)?(a):(b))
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

int s[33], e[33];
int tot[33];
map<int,int> hash;
set<int> st;

int main() {
    input();

    int t; S(t);
    int tst = 1;
    while ( t-- ) {
        hash.clear(); st.clear();
        int k,m;
        S(k); S(m);
        F(i,0,k) {
            S(s[i]); S(e[i]);
            st.insert(s[i]); st.insert(e[i]);
        }
        int K = 0;
        set<int>::iterator it;
        FE(it,st) {
            hash[*it] = K++;
        }
        M(tot,0);
        F(i,0,m) {
            int d; S(d);
            F(j,0,d) {
                int id,num;
                S(id); S(num);
                id--;
                tot[id] += num;
            }
        }

        int ans = 0;
        int curr = 0;
        F(i,0,K) {
            F(j,0,k) {
                int start = hash[s[j]];
                int end = hash[e[j]];
                if ( i == start ) curr += tot[j];
                if ( i == end+1 ) curr -= tot[j];
            }
            ans = max(ans,curr);
        }

        printf("Case %d: %d\n", tst++, ans);
    }

    return 0;
}