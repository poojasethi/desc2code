#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<string>
#include<cstring>
#include<sstream>
#include<cmath>
#include<climits>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<iterator>
#include<cassert>
#include<cctype>
#include<tr1/unordered_map>
using namespace std;
 
#define all(c) c.begin(), c.end()

int get()             
{
  char c;
  while(c=getchar_unlocked(),(c<'0'||c>'9')&&(c!='-'));
  bool Flag=(c=='-');
  if(Flag)
    c=getchar_unlocked();
  int X=0;
  while(c>='0'&&c<='9')
    {
      X=X*10+c-48;
      c=getchar_unlocked();
    }
  return Flag?-X:X;
}

int getmax_days(vector<pair<int,int> > & event)
{
  std::vector<int> v;
  for (int i = 0; i < event.size(); ++i)
  {
    v.push_back(event[i].first);
    v.push_back(event[i].second);
  }
  return *max_element(all(v));
}
 
 
int main(int argc, char const *argv[])
{
  int t = get();
  for(int a=0; a<t; a++)
  {
    int k = get();
    int m = get();
    vector<pair<int,int> > event(k);
    for (int i = 0; i < k; ++i)
    {
      event[i].first = get()-1;
      event[i].second = get()-1;
    }
 
    int maxdays = getmax_days(event);
    std::vector<int> day(maxdays,0);
 
    //vector< vector<pair<int,int> > > nation(m);    // Commenting this line gives AC
    for (int i = 0; i < m; ++i)
    {
      int d = get();
      for (int i = 0; i < d; ++i)
      {
        int ev_id = get()-1;
        int participants = get();
        for (int i = event[ev_id].first; i <= event[ev_id].second; ++i)
        {
          day[i] += participants;
        }
      }
    }
    printf("Case %d: %d\n",a+1,*max_element(all(day)));
 
  }
  return 0;
} 