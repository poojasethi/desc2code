#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<string>
#include<cstring>
#include<sstream>
#include<cmath>
#include<climits>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<iterator>
#include<cassert>
#include<cctype>
#include<tr1/unordered_map>
using namespace std;
 
typedef std::tr1::unordered_map<char,int> un_mapci;
typedef map<char,int> mapci;
 
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%ld",&n)
#define sll(n) scanf("%lld",&n)
 
#define sstr(str) scanf ("%s", str); 
 
#define p(n) printf("%d ",n)
#define pl(n) printf("%ld ",n)
#define pll(n) printf("%lld ",n)
 
#define pf(n) printf("%f\n",n)
#define pd(n) printf("%lf\n",n)
 
#define pnl(n) printf("%d\n",n)
#define plnl(n) printf("%ld\n",n)
#define pllnl(n) printf("%lld\n",n)
#define nl() putchar_unlocked('\n')
 
#define ll long long
#define MAX(a,b) a>b?a:b
#define all(c) c.begin(), c.end()
#define rall(c) c.rbegin(), c.rend()    // reverse all 
#define pb push_back
#define tr(c,it) for(typeof(c.begin()) it = c.begin(); it !=c.end(); ++it)
#define tr_rev(c,it) for(typeof(c.rbegin()) it = c.rbegin(); it !=(c.rend()); ++it)
#define loop(i,a,n) for(int i=a;i<n;i++)
typedef vector<int> vi;
typedef vector<long long> vll;
typedef vector< vector<int> > vvi;
typedef vector<string> vstr;
 
#define sz(a) int((a).size()) 
#define szar(a) int(sizeof(ar)/sizeof(ar[0]))
#define osit ostream_iterator 
 
void pvec(vi v)
{
  tr(v,it) { p(*it);}
  nl();
}
 
void pvec(vll v)
{
  tr(v,it) { pll(*it);}
  nl();
}
 
std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems)          
 {
    std::stringstream ss(s);                                            //  aa#bc#d -> aa, b,c,d
    std::string item;                                                   //  aa##c#d -> aa, "", c,d
    while (std::getline(ss, item, delim)) {                             //  aa#bc#  -> aa, bc, ""
        elems.push_back(item);                                          //  #a#b#   -> "", a, b, ""
    }
    if(s[s.size() - 1] == delim) elems.push_back("");
    return elems;
}
 
 
std::vector<std::string> split(const std::string &s, char delim) {
    std::vector<std::string> elems;
    split(s, delim, elems);
    return elems;
}
 
int get()                  // working even in loops, working excellent
{
  char c;
  while(c=getchar_unlocked(),(c<'0'||c>'9')&&(c!='-'));
  bool Flag=(c=='-');
  if(Flag)
    c=getchar_unlocked();
  int X=0;
  while(c>='0'&&c<='9')
    {
      X=X*10+c-48;
      c=getchar_unlocked();
    }
  return Flag?-X:X;
}
 
inline void get(char *str)
 
{
    register char c = 0;
    register int i = 0;
    while (c < 33)
        c = getchar_unlocked();
 
    while (c != '\n') {
        str[i] = c;
        c = getchar_unlocked();
        i = i + 1;
    }
    str[i] = '\0';
 
}
 
void output(int X)        // working even in loops, working excellent
{
  if(X<0)
    {
      putchar_unlocked('-');
      X=-X;
    }
  int Len=0,Data[10];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  if(!Len)
    Data[Len++]=0;
  while(Len--)
    putchar_unlocked(Data[Len]+48);
 
  putchar_unlocked(' ');
}
void output(ll X)        // working even in loops, working excellent
{
  if(X<0)
    {
      putchar_unlocked('-');
      X=-X;
    }
  int Len=0,Data[10];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  if(!Len)
    Data[Len++]=0;
  while(Len--)
    putchar_unlocked(Data[Len]+48);
 
  putchar_unlocked(' ');
}
 
template<class T>
void p2d(T c, int n,int m)
{
  nl();
  loop(i,0,n)
  {
    loop(j,0,m)
    {
      cout << c[i][j] << " ";
    }
    nl();
  }
}
 
bool cmp(const pair<char,int>& lhs, const pair<char,int>& rhs)
{
  if(lhs.second == rhs.second)
    return lhs.first < rhs.first;
  else
    return lhs.second < rhs.second;
}
 
int getmax_days(vector<pair<int,int> > & event)
{
  std::vector<int> v;
  for (int i = 0; i < event.size(); ++i)
  {
    v.push_back(event[i].first);
    v.push_back(event[i].second);
  }
  return *max_element(all(v));
}
 
 
int main(int argc, char const *argv[])
{
  int t = get();
  for(int a=0; a<t; a++)
  {
    // printf("came here\n");
    int k = get();
    int m = get();
    vector<pair<int,int> > event(k);
    for (int i = 0; i < k; ++i)
    {
      event[i].first = get()-1;
      event[i].second = get()-1;
    }
 
    int maxdays = getmax_days(event);
    std::vector<int> day(maxdays,0);
 
    // vector< vector<pair<int,int> > > nation(m);
    for (int i = 0; i < m; ++i)
    {
      int d = get();
      for (int i = 0; i < d; ++i)
      {
        int ev_id = get()-1;
        int participants = get();
        for (int i = event[ev_id].first; i <= event[ev_id].second; ++i)
        {
          day[i] += participants;
        }
      }
    }
    printf("Case %d: %d\n",a+1,*max_element(all(day)));
 
  }
  return 0;
} 