#include <bits/stdc++.h>
using namespace std;

/* Uzumaki Naruto */
#define TRACE

#ifdef TRACE
#define dbgarr(a,n)   cerr << "["; for(int i = 0; i < n; ++i) cerr << a[i] << " ";cerr << "\b]\n";
#define dbg(args...)  {debug,args; cerr<<endl;}
#define pause()       cin.get();cin.get();

#else
#define dbgarr(a,n)
#define dbg(args...)
#define pause()

#endif

struct debugger {
    template<typename T> debugger& operator , (const T& v) {
        cerr<<v<<" "; return *this;
    }
} debug;

template <typename T1, typename T2>
inline ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    return os << "(" << p.first << ", " << p.second << ")";
}

template<typename T>
inline ostream &operator << (ostream & os,const vector<T>& v) {
    bool first = true; os << "[";
    for (typename vector<T>::const_iterator ii = v.begin(); ii != v.end(); ++ii) {
        if(!first) os << ", ";
        os << *ii; first = false;
    }
    return os << "]";
}

#define fr first
#define se second
typedef long long LL;
typedef pair<int,int> pii;
typedef vector<int> vi;

const int NN = 112;
const int MM = 212;

int dp[MM][NN],nxt[MM][NN];
bool vis[MM][NN]; // day,model
int cost[MM][NN],fn[MM];
string model[NN];

int f(int day,int item,int m,int n){
    if (day == m) return 0;

    if (vis[day][item]) return dp[day][item];
    vis[day][item] = true;
    int ans = numeric_limits<int> :: max();

    if (item != 0){
        int tmp = f(day+1,item,m,n);
        if (tmp < ans) ans = tmp, nxt[day][item] = item;
    }

    int ex = ((item != 0) ? cost[day][item]-100 : 0);
    for(int i = 1; i <= n; ++i){
        if (i == item) continue;
        int tmp = f(day+1,i,m,n);
        tmp += cost[day][i] - ex;
        if (tmp < ans)
            ans = tmp, nxt[day][item] = i;
    }

    dp[day][item] = ans;
    return ans;
}

void solve(){
    int n,m;
    cin >> n >> m;
    for(int i = 1; i <= n; ++i){
        cin >> model[i];
        for(int j = 0; j < m; ++j)
            cin >> cost[j][i];
    }

    memset(vis,false,sizeof(vis));
    int ans = f(0,0,m,n), st = 0;
    for(int i = 0; i < m; ++i)
        st = (fn[i] = nxt[i][st]);

    cout << "Tk " << ans << endl;
    for(int i = 0, j = 0; i < m; i = j){
        while(j < m and fn[j] == fn[i]) ++j;
        cout << model[fn[i]] << " for " << j-i << " month(s)\n";
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    string inp;
    while(cin >> inp){
        cout << inp << endl;
        if (inp == "TheEnd") break;
        solve();
        cout << endl;
    }
    return 0;
}
