/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
struct debugger{template<typename T> debugger& operator,(const T& v){cerr<<v<<" ";return *this;}}dbg;
#define db(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)
#define s(n) scanf("%d",&n);
#define MAXN 222
bool done[MAXN][MAXN];
int dp[MAXN][MAXN];
int rec(int index,int prev,int n,int m,vector< vector<int> > &cost)
{
    if(index==m)
        return 0;

    if(done[index][prev])
        return dp[index][prev];

    int ans=INT_MAX;
    for(int i=0;i<n;i++)
    {
        ans=min(ans,rec(index+1,i,n,m,cost)-(cost[prev][index]-100)+cost[i][index]);
    }
    ans=min(ans,rec(index+1,prev,n,m,cost));
    done[index][prev]=1;
    return dp[index][prev]=ans;
}
int rec2(int index,int prev,int n,int m,vector< vector<int> > &cost,vector<int> &choosen)
{
    if(index==m)
        return 0;

    for(int i=0;i<n;i++)
    {
        int c=rec(index+1,i,n,m,cost)-(cost[prev][index]-100)+cost[i][index];
        if(c==dp[index][prev])
        {
            choosen.push_back(i);
            return rec2(index+1,i,n,m,cost,choosen);
        }
    }
    if(rec(index+1,prev,n,m,cost)==dp[index][prev])
    {
        choosen.push_back(prev);
        return rec2(index+1,prev,n,m,cost,choosen);
    }
}
int main()
{
    //freopen("in","r",stdin);

    while(1)
    {
        string start;cin>>start;
        if(start=="TheEnd") break;
        cout<<start<<endl;
        int n,m;
        cin>>n>>m;
        vector<int> v(n);
        vector<string> models(n);
        vector< vector<int> > cost(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            cin>>models[i];
            for(int j=0;j<m;j++)
                s(cost[i][j]);
        }
        int ans=INT_MAX;
        for(int i=0;i<=m;i++)
            for(int j=0;j<=n;j++)
            {
                done[i][j]=0;
                dp[i][j]=0;
            }
        for(int i=0;i<n;i++)
            ans=min(ans,rec(1,i,n,m,cost)+cost[i][0]);
        vector<int> choosen;
        for(int i=0;i<n;i++)
        {
            if(rec(1,i,n,m,cost)+cost[i][0]==ans)
            {
                choosen.push_back(i);
                rec2(1,i,n,m,cost,choosen);
                break;
            }
        }
        //int c=0;
        //for(int i=0;i<choosen.size();i++)
        //{
            //if(i==0)
                //c+=cost[choosen[i]][i];
            //else if(choosen[i]!=choosen[i-1])
                //c+=cost[choosen[i]][i]-(cost[choosen[i-1]][i]-100);
            //cout<<choosen[i]<<" ";
        //}
        printf("Tk %d\n",ans);
        int count=1;
        int last=choosen[0];
        for(int i=1;i<m;i++)
        {
            if(choosen[i]==last)
                count++;
            else
            {
                cout<<models[last]<<" for "<<count<<" month(s)"<<endl;
                last=choosen[i];
                count=1;
            }
        }
        cout<<models[last]<<" for "<<count<<" month(s)"<<endl;
        cout<<endl;
    }
    cout<<"TheEnd"<<endl;
    return 0;
}
