import java.io.InputStreamReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Nitesh Agarwal
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		TestingKmp solver = new TestingKmp();
		solver.solve(1, in, out);
		out.close();
	}
}

class TestingKmp {
    public void solve(int testNumber, InputReader in, OutputWriter out) {
        int t=in.nextInt();
        while (t-->0){
            String text=in.nextString();int x=in.nextInt();
            for(int i=0;i<x;i++){
                String pat=in.nextString();
                out.printLine(KMP.matches(text,pat));
            }
        }
    }
}

class InputReader {
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }
    public String next()
    {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }
    public int nextInt()
    {
        return Integer.parseInt(next());
    }
    public String nextString()
    {
        try {
            return in.readLine();
        }
        catch (Exception e)
        {
            return null;
        }

    }
}

class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object...objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void printLine(Object...objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }
}

class KMP {
    public static int matches(String text,String pat){
        int l=text.length(),m=pat.length();
        //constructing the Non-Deterministic Finite Automaton
        int nfa[]=new int [m+1];
        nfa[0]=0;
        nfa[1]=0;
        for(int i=2;i<=m;i++){
            int j=nfa[i-1];
            while(true){
                if(pat.charAt(j)==pat.charAt(i-1)){
                    nfa[i]=j+1;break;
                }
                if(j==0){nfa[i]=0;break;
                }
                j=nfa[j];
            }
        }
        int cou=0,i=0,j=0;
        while (true){
            if(i==l)
                break;
            if(pat.charAt(j)==text.charAt(i)){
                j++;i++;
                if(j==m){        //Match Found
                    cou++;
                    j=nfa[j];
                }
            }
            else
                if(j>0) j=nfa[j];
            else
                    i++;
        }
        return cou;
    }
}
