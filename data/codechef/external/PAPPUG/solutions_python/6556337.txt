import java.io.InputStreamReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		pappug solver = new pappug();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class pappug {
    public void solve(int testNumber, InputReader in, OutputWriter out) {

        String t=in.nextString();
        int que=in.nextInt();
        for(int i1=0;i1<que;i1++){
            String s=in.nextString();
            int cou=match(s,t);
            out.printLine(cou);
        }
    }
    public int match(String s,String t){
        int m=s.length(),n=t.length();
        int p[]=new int [m+1];
        p[0]=p[1]=0;
        int k=0;
        for(int q=2;q<=m;q++){
            k=p[q-1];
            while (true){
                if(s.charAt(q-1)==s.charAt(k)){
                    p[q]=k+1;
                    break;
                }
                if(k==0) {
                    p[q] = 0;
                    break;
                }
                k=p[k];
            }
        }
        int q=0;int cou=0,i=0;
        //out.printLine(s+" "+t);
        while (true){
            if(i==n)
                break;
            if(s.charAt(q)==t.charAt(i)) {
                i++;
                q++;

                if (q == m) {
                    cou++;
                    q = p[q];
                }
            }
            else if(q>0)    q=p[q];
            else i++;
        }
        return cou;
    }
}

class InputReader {
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }
    public String next()
    {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }
    public int nextInt()
    {
        return Integer.parseInt(next());
    }

    public String nextString()
    {
        try {
            return in.readLine();
        }
        catch (Exception e)
        {
            return null;
        }

    }
}

class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

    public void print(Object...objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void printLine(Object...objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }
}
