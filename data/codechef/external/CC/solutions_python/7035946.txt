def dfs(start):
	if visited[start]:return 1
	stack=[start]
	while (stack!=[]):
		x = stack.pop()
		visited[x]=color
		for i in graph[x]:
			if visited[i]:continue
			stack.append(i)
	return 1
def bfs(start):
	if visited[start]:return 1
	queue=[start]
	while (queue!=[]):
		x = queue.pop(0)
		visited[x]=color
		for i in graph[x]:
			if visited[i]:continue
			queue.append(i)
	return 1

for i in range(input()):
	vertices = input()
	graph=[[] for i in range(vertices)]
	edges=  input()
	for i in range(edges):
		a,b = map(int,raw_input().split())
		graph[a].append(b)
		graph[b].append(a)
	visited=[0 for i in range(vertices)]
	color=0
	for i in range(vertices):
		if visited[i]:continue
		else:
			color+=1
			bfs(i)
	# print visited
	print max(visited)
