def dfs_rec(adj, source, visited):
	visited[source] = 1
	for v in adj[source]:
		if visited[v] == 0:
			return dfs_rec(adj, v, visited)


def dfs_iter(adj):
	p = len(adj)
	visited = [0]*p
	stack = [0]
	while len(stack) != 0:
		v = stack.pop()
		if visited[v] != 1:
			visited[v] = 1
			for u in adj[v]:
				if visited[u] != 1:
					stack.append(u)

	return visited
		
def dfs_iter_spoj(adj, source, visited):
	p = len(adj)
	stack = [source]
	while len(stack) != 0:
		v = stack.pop()
		if visited[v] != 1:
			visited[v] = 1
			for u in adj[v]:
				if visited[u] != 1:
					stack.append(u)

	return visited

for _ in xrange(int(raw_input())):
	p = int(raw_input())
	q = int(raw_input())
	visited = [0]*p
	adj = {}
	for x in range(p): adj[x] = []
	for _ in xrange(q):
		m,n = map(int, raw_input().split())
		adj[m].append(n)
		adj[n].append(m)

	count = 0
	for source in range(p):
		if visited[source] != 1:
			dfs_iter_spoj(adj, source, visited)
			count += 1

	print count
