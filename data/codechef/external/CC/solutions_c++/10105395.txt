#include <iostream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <iterator>
#include <time.h>
 
#define MAX(a,b) (a>b)?a:b
#define MIN(a,b) (a>b)?b:a
using namespace std;
typedef long long int llint;
typedef long int lint;
template <typename T_>
void fastread(T_ *a)
{
    char c=0; *a=0;
    while(c<33){c=getchar();}
    while(c>32){*a=(*a<<3)+(*a<<1)+c-'0'; c=getchar();}
}
 
llint fast_str(char *a)
{
    llint len=0; char c=0;
    while(c<33){c=getchar();}//eat spaces
    while(c!='\n'){*a=c; ++len; ++a; c=getchar();}
    *a='\0';
    return len;
}
 
llint fast_wrd(char *a)
{
    char c=0; llint len=0;
    while(c<33){c=getchar();}
    while(c>32){*a=c; ++len; ++a; c=getchar();}
    *a='\0';
    return len;
}
 
 
llint exponent_fast(llint x, llint n, llint MOD)
{
    llint result=1,m,sample=x;
    m=n;
    while(m>0)
    {
        while( m%2 == 0)
        {
            sample = (sample *sample)%MOD;
            m/=2;
            if(m==0)break;
        }
        --m;
        result = (result * sample)%MOD;
    }
    return result;
}

int visited[100000];
vector<int> verts[100000];

void flush() {
    for(llint i=0;i<100000; ++i) {
        visited[i] = 0;
        verts[i].clear();
    }
}

void visit(int node) { //indirectly dfs
    for(int i=0;i<verts[node].size();++i) {
        if(!visited[verts[node].at(i)]) {
            visited[verts[node].at(i)]=1;
            visit(verts[node].at(i));
        }
    }
}

/*#define fileIO
#define debug*/
//problem code: CC, codechef, connected components
int main(){
    #ifdef fileIO
    freopen("in1.txt","r",stdin);
    #endif //fileIO
    //= = = = = = = = = = = = = = = = = = = =
    llint cases,vertices,edges;
    fastread(&cases);
    while(cases--) {
        fastread(&vertices);
        fastread(&edges);
        llint cc=0;
        llint from, to;
        while(edges--) {
            fastread(&from); fastread(&to);
            verts[from].push_back(to);
            verts[to].push_back(from);
        }

        for(llint i=0; i<vertices; ++i) {
            if(!visited[i]) { //then visit it and color children
                ++cc;
                visited[i] = 1;
                visit(i);
            }
        }
        cout<<cc<<endl;

        flush();
    }
    //= = = = = = = = = = = = = = = = = = = =
    return 0;
} 