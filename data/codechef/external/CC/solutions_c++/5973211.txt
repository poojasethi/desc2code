#include <cstdio>
#include <cstdlib>
#include <iostream>

struct node
{
    int data;
    bool visited;
    struct node* link;
};

struct node* arr = NULL;

void dfs(struct node* head)
{
  if(head == NULL)
     return;
  if(head->visited == true)
    return;
  head->visited = true;
  head = head->link;
  while(head != NULL)
  {
      dfs(&arr[head->data]);
      head = head->link;
  }
}

int count_connected_comps(int N)
{
    int c = 0;
    for(int i=0;i<N;i++)
    {
        if(arr[i].visited == false)
        {
            c++;
            dfs(&arr[i]);
        }
    }
    return c;
}

void add(struct node* head,int value)
{
    while(head->link != NULL)
        head = head->link;
    head->link = new struct node();
    head = head->link;
    head->data = value;
    head->visited = false;
    head->link = NULL;
}

void display(int N)
{
    struct node* temp = NULL;
    for(int i=0;i<N;i++)
    {
        temp = &arr[i];
        printf("%d->",temp->data);
        temp = temp->link;
        while(temp != NULL)
        {
          printf("->%d",temp->data);
          temp = temp->link;
        }
        printf("\n");
    }
}

int main()
{
    int t;
    int N,e;
    scanf("%d",&t);
    while(t--)
    {
      scanf("%d",&N);
      arr = new struct node[N];
      for(int i=0;i<N;i++)
      {
          arr[i].data=i;
          arr[i].link = NULL;
          arr[i].visited = false;
      }
      scanf("%d",&e);
      int v1,v2;
      for(int i=0;i<e;i++)
      {
          scanf("%d %d",&v1,&v2);
          add(&arr[v1],v2);
          add(&arr[v2],v1);
      }
      //display(N);
      int c = count_connected_comps(N);
      printf("%d\n",c);
      delete(arr);
    }
    return 0;
}
