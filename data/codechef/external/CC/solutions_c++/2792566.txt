#include <iostream>
#include <stdio.h>
#include <vector>
#include <map>

using namespace std;

int tim = 0;

void DFS_VISIT( vector< vector<int> >& A, vector<int>& C, vector<int>& P, vector<int>& D, vector<int>& F, int u ) {
	
	int v;
	
	tim = tim + 1;
	D[ u ] = tim;
	C[ u ] = 1;
	
	vector<int> :: iterator it;
	
	for( it = A[ u ].begin();it != A[ u ].end();it++ ) {
	
		v = (*it);
		if( C[ v ] == 0 ) {
			
			P[ v ] = u;
			DFS_VISIT( A, C, P, D, F, v );
		}
	}
	
	tim = tim + 1;
	F[ u ] = tim;
	C[ u ] = 2;	
}

int main() {
	
	int t, n, m, i, p, q, comp;
	
	scanf("%d", &t );
	
	while( t-- ) {
		
		scanf("%d", &n );
		scanf("%d", &m );
		
		vector< vector<int> > A( n, vector<int> ( ) );
		
		vector<int> color( n, 0 );
		vector<int> parent( n, -999 );
		vector<int> d( n );
		vector<int> f( n );
		
		for( i = 1;i <= m;i++ ) {
			
			scanf("%d %d", &p, &q );
			
			A[ p ].push_back( q );
			A[ q ].push_back( p );

		}
		
		comp = 0;
		for( i = 0;i < n;i++ ) {
			
			if( color[ i ] == 0 ) {
				
				comp++;
				DFS_VISIT( A, color, parent, d, f, i );
			}
		}
		
		printf("%d\n", comp );
		A.clear();
	}
	
	return 0;
}
