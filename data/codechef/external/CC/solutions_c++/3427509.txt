//Connected Components

#include<iostream>
#include<vector>
using namespace std;

#define WHITE 0
#define GREY 1
#define BLACK 2

int isColor[100001];
vector<int> graph[100001];

void dfs(int v,int &cc)
{
	vector<int> stack;
	int c;
	cc++;
	stack.push_back(v);
	while(stack.size())
	{
		c = stack.back();
		stack.pop_back();
		if(isColor[c] != BLACK)
		{
			for(int i = 0;i < graph[c].size();i++)
			{
				if(isColor[graph[c][i]] == WHITE)
				{
					stack.push_back(graph[c][i]);
					isColor[graph[c][i]] = GREY;
				}
			}
			isColor[c] = BLACK;
		}
	}
}

int main()
{
	int t,n,a,b,e,cc;
	cin>>t;
	while(t--)
	{
		cin>>n>>e;
		for(int i = 0;i < n;i++)
		{
			isColor[i] = WHITE;
			graph[i].clear();
		}
		for(int i = 0;i < e;i++)
		{
			cin>>a>>b;
			graph[a].push_back(b);
			graph[b].push_back(a);
		}
		cc = 0;
		for(int i = 0;i < n;i++)
		{
			if(isColor[i] == WHITE)
				dfs(i,cc);
		}
		cout<<cc<<endl;
	}
	return 0;
}
