//BFS traversal using STL
#include<iostream>
#include<vector>

using namespace std;

#define max 100005

int visited[max];
vector<int> A[max];		//Array of vectors for adjacency list

void dfs(int node)
{
int x;
visited[node]=1;	//node has been visited

for(x=0;x<A[node].size();x++)
if(visited[A[node][x]]==0)	//vertex i in the edge list of vertex node is unvisited
dfs(A[node][x]);

}

int main()
{
int T,N,M,i,x,y;
cin>>T;

while(T--)
{
cin>>N>>M;

for(i=1;i<=N;i++)
{
A[i].clear();
visited[i]=0;	//mark all vertices unvisited
}

for(i=0;i<M;i++)
{
cin>>x>>y;
x++;
y++;
A[x].push_back(y);	// y is a edge on x's adjacency list
A[y].push_back(x);
}



int component=0;

for(i=1;i<=N;i++)	//all vertices of the graph
if(visited[i]==0)	//unvisited vertice
{
component++;	//one more connected component of the graph
dfs(i);
}



cout<<component<<endl;


}	//end T--;

return 0;
}

