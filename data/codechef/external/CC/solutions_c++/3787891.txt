#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<list>
#include<bitset>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<string.h>
#define MAX 100005
using namespace std;

bool visited[MAX];

class GRAPH{
	int v;
	list<int> *adj;
public:
	GRAPH(int v);
	void addEdge(int v, int w);
	int dfs(int start);
	void bfs(int start);
};

GRAPH::GRAPH(int v){
	this->v=v;
	adj = new list<int>[v];
}

void GRAPH::addEdge(int v, int w){
	adj[v].push_back(w);
}

int GRAPH::dfs(int start){	
	visited[start] = true; 
    list<int>::iterator i;
    for(i = adj[start].begin(); i != adj[start].end(); ++i)
    {
        if(!visited[*i])
        {
            dfs(*i);
        }
    }
    return 1;    
}

void GRAPH::bfs(int start){
	return;
}	

int main(){
	int cases;
	long int n,e,x,y,ans,i,itr;
	scanf("%d",&cases);
	while(cases--){
		scanf("%ld",&n);
		GRAPH g(n);
		for(i=0;i<n;i++) visited[i] = false;
		scanf("%ld",&e);
		while(e--){
			scanf("%ld%ld",&x,&y);
			// undirected graph
			g.addEdge(x,y);
			g.addEdge(y,x);
		}
		ans = 0;
		for(i=0;i<n;i++){
			if(!visited[i]){
				itr = g.dfs(i);
				if(itr == 1) ans++;
			}
		}
		printf("%ld\n",ans);
	}
	return 0;	
}
