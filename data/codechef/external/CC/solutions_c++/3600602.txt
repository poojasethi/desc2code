// Implementation of Kosaraju's algorithm to print all SCCs
#include <iostream>
#include <list>
#include <stack>
using namespace std;
int  count=0;
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // An array of adjacency lists
 
    // Fills Stack with vertices (in increasing order of finishing times)
    // The top element of stack has the maximum finishing time
    void fillOrder(int v, bool visited[], stack<int> &Stack);
 
    // A recursive function to print DFS starting from v
    void DFSUtil(int v, bool visited[]);
public:
    Graph(int V);
    void addEdge(int v, int w);
 
    // The main function that finds and prints strongly connected components
    void printSCCs(Graph &g);
 
    // Function that returns reverse (or transpose) of this graph
   // Graph getTranspose();
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V+1];
}
// A recursive function to print DFS starting from v
void Graph::DFSUtil(int v, bool visited[])
{
    // Mark the current node as visited and print it
    visited[v] = true;
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
        DFSUtil(*i, visited);
}
 

 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);
}
 
void Graph::fillOrder(int v, bool visited[], stack<int> &Stack)
{
    // Mark the current node as visited and print it
    visited[v] = true;
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
        if(!visited[*i])
            fillOrder(*i, visited, Stack);
 
    // All vertices reachable from v are processed by now, push v to Stack
    Stack.push(v);
}
 
// The main function that finds and prints all strongly connected components
void Graph::printSCCs(Graph &g)
{
    stack<int> Stack;
 
    // Mark all the vertices as not visited (For first DFS)
    bool *visited = new bool[V];
    for(int i = 1; i <= V; i++)
        visited[i] = false;
    for(int i = 1; i <= V; i++)
        if(visited[i] == false)
            fillOrder(i, visited, Stack);
    //Graph gr = getTranspose();
    for(int i = 1; i <= V; i++)
        visited[i] = false;
 
    while (Stack.empty() == false)
    {
        // Pop a vertex from stack
        int v = Stack.top();
        Stack.pop();
 
        // Print Strongly connected component of the popped vertex
        if (visited[v] == false)
        {
            g.DFSUtil(v, visited);
            count++;
 
        }
    }
    
}
 
// Driver program to test above functions
int main()
{
   int t,n,e,x,y,i;
   scanf("%d",&t);
   while(t--)
   {
   scanf("%d %d",&n,&e);
   Graph g(n);
   for(i=0;i<e;i++)
   {
   scanf("%d %d",&x,&y);
   g.addEdge(x+1,y+1);
   }
    g.printSCCs(g);
    printf("%d\n",count);
    count=0;
    }
 
    return 0;
}
 
