#include<bits/stdc++.h>
using namespace std;
class graph
{
    int ver;
    list<int> *adj;
    public:
    graph(int v)
    {
        ver=v;
        adj=new list<int>[v];
    }
    void add_edge(int v,int w)
    {
        adj[v].push_back(w);
    }
    void bfs(int v,vector<int>& visited)
    {
        int i;
        visited[v]=1;
        list<int> queue;
        queue.push_back(v);
        while(!queue.empty())
        {
            v=queue.front();
            //printf("%d\t",v);
            queue.pop_front();
            list<int>::iterator it;
            for(it=adj[v].begin();it!=adj[v].end();it++)
            {
                if(!visited[*it])
                {
                    visited[*it]=1;
                    queue.push_back(*it);
                }
            }
        }
    }
};
    int main()
    {
        int i,t,n,e,a,b,ans;
        scanf("%d",&t);
        while(t--)
        {
            ans=0;
            scanf("%d",&n);
            graph g(n);
            scanf("%d",&e);
            vector<int> visited(n);
            for(i=0;i<e;i++)
            {
                scanf("%d%d",&a,&b);
                g.add_edge(a,b);
                g.add_edge(b,a);
            }
            for(i=0;i<n;i++)
            {
                if(!visited[i])
                {
                    ans++;
                    g.bfs(i,visited);
                }
            }
            printf("%d\n",ans);
        }
        return 0;
    }


