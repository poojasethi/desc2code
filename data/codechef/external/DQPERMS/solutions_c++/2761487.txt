#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;
typedef pair< pii , pii > piiii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second
#define loc first.first
#define lmv first.second
#define lct second.first
#define rct second.second

#define pb push_back

const LL modref=1000000007ll;

const int max_n=100010;

int T;
int n;

typedef set<piiii> sset; 
sset S; sset::iterator it;

LL qmin,qmax;

LL p2[max_n];
void findp2()
{
	p2[0]=1ll;
	forup(i,1,max_n)
		p2[i]=(p2[i-1]*2ll)%modref;
}

LL fmax(LL s, LL e, LL r)
{
	if(s>e) return 0ll;
	assert(r<=e-s+1);

	LL ret=p2[r]-1ll;
	ret*=p2[(n-2)-(s+r-1)]; ret%=modref;
	return ret;
}

LL fmin(LL s, LL e, LL r)
{
	if(s>e) return 0ll;
	assert(r<=e-s+1);

	LL ret=p2[r]-1ll;
	ret*=p2[(n-2)-e]; ret%=modref;
	return ret;
}

int main()
{
	findp2();
	gi(T);

	rep(z,T)
	{
		gi(n);

		S.clear();
		S.insert(piiii(pii(-1,0),pii(0,0)));

		qmin=0ll; qmax=p2[n-1]-1ll;
		bool valid=true;
		int ci,cj;
		rep(i,n/2)
		{
			gi(ci); --ci; gi(cj);
			if(not valid) { pin(-1); continue; }

			piiii cp;
			if(cj<=n/2) cp=piiii(pii(ci,0),pii(cj,ci+1-cj));
			else cp=piiii(pii(ci,1),pii(ci+1-(n-cj+1),n-cj+1));

			it=S.upper_bound(cp); --it; // should work, not sure though ..
			if(not( it->lct<=cp.lct and it->rct<=cp.rct )) valid=false;
			++it;
			if(it!=S.end() and (not( it->lct>=cp.lct and it->rct>=cp.rct ))) valid=false;
			if(not valid) { pin(-1); continue; }

			if(it==S.end())
			{
				--it;
				int ploc=it->loc, /*plmv=it->lmv, plct=it->lct,*/ prct=it->rct;
				int cloc=cp.loc, clmv=cp.lmv, /*clct=cp.lct,*/ crct=cp.rct;

				if(clmv) { qmin += p2[n-2-cloc]; qmin%=modref; }
				qmin += fmin(ploc+1,cloc-1,(crct-prct-clmv)); qmin %= modref;

				if(clmv) { qmax += p2[n-2-cloc]; qmax%=modref; }
				qmax += modref-(p2[n-ploc-2]-1); qmax %= modref;
				qmax += (p2[n-cloc-2]-1); qmax %= modref;
				qmax += fmax(ploc+1,cloc-1,(crct-prct-clmv)); qmax %= modref;
			}
			else
			{
				int nloc=it->loc, nlmv=it->lmv, /*nlct=it->lct,*/ nrct=it->rct;
				--it;
				int ploc=it->loc, /*plmv=it->lmv, plct=it->lct,*/ prct=it->rct;
				int cloc=cp.loc, clmv=cp.lmv, /*clct=cp.lct,*/ crct=cp.rct;

				if(clmv) { qmin += p2[n-2-cloc]; qmin%=modref; }
				qmin += modref-fmin(ploc+1,nloc-1,(nrct-prct-nlmv)); qmin %= modref;
				qmin += fmin(cloc+1,nloc-1,(nrct-crct-nlmv)); qmin%=modref;
				qmin += fmin(ploc+1,cloc-1,(crct-prct-clmv)); qmin%=modref;

				if(clmv) { qmax += p2[n-2-cloc]; qmax%=modref; }
				qmax += modref-fmax(ploc+1,nloc-1,(nrct-prct-nlmv)); qmax %= modref;
				qmax += fmax(cloc+1,nloc-1,(nrct-crct-nlmv)); qmax%=modref;
				qmax += fmax(ploc+1,cloc-1,(crct-prct-clmv)); qmax%=modref;
			}

			S.insert(cp);
			pis((int(qmin))); pin((int(qmax)));
		}
	}
	
	return 0;
}