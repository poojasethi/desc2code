#include <bits/stdc++.h>
#define ll long long
#define MOD 1000000007
#define INF 0x3f3f3f3f
 
using namespace std;
 
int st[500005],a[100005],ans[100005],zero_time[100005];
pair<int,int> p[100005];
 
int get_mid(int u,int v)
{
    return u+(v-u)/2;
}
 
void build_tree(int ss,int se,int ci)
{
    if(ss==se)
    {
        st[ci]=zero_time[ss];
        return;
    }
    int mid=get_mid(ss,se);
    build_tree(ss,mid,2*ci);
    build_tree(mid+1,se,2*ci+1);
    st[ci]=max(st[2*ci],st[2*ci+1]);
}
 
int query(int ss,int se,int qs,int qe,int ci)
{
    if(ss>=qs&&se<=qe)
        return st[ci];
    if(ss>qe||se<qs)
        return 0;
    int mid=get_mid(ss,se);
    return max(query(ss,mid,qs,qe,2*ci),query(mid+1,se,qs,qe,2*ci+1));
}
 
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
        scanf("%d",&a[i]);
    for(int i=0;i<m;i++)
    {
        scanf("%d%d",&p[i].first,&p[i].second);
    }
    int q;
    memset(zero_time,0x3f,sizeof(zero_time));
    scanf("%d",&q);
    for(int i=1;i<=q;i++)
    {
        int x;
        scanf("%d",&x);
        if(a[x]){
            a[x]--;
            if(!a[x])
                zero_time[x]=i;
        }
    }
    build_tree(1,n,1);
    for(int i=0;i<m;i++)
    {
        int seg_zero_time=query(1,n,p[i].first,p[i].second,1);
        if(seg_zero_time!=INF)
        {
            ans[seg_zero_time]++;
        }
    }
    for(int i=1;i<=q;i++)
        ans[i]+=ans[i-1];
    for(int i=1;i<=q;i++)
        printf("%d\n",ans[i]);
 
    return 0;
 
}