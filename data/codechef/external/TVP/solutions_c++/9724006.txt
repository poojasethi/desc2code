#include<bits/stdc++.h>
using namespace std;
#define MAX 1000000000
int arr[100005],ans[100005];
int tree[400005];
pair<int,int> p[100005];
void build(int node,int a,int b)
{
	if(a==b)
	{
		tree[node]=MAX;
		return;
	}
	build(node*2,a,(a+b)/2);
	build(node*2+1,(a+b)/2+1,b);
	tree[node]=max(tree[node*2],tree[node*2+1]);
}
void update(int node,int a,int b,int i,int val)
{
	if(a>b)
	return ;
	if(a==b&&a==i)
	{
		tree[node]=val;
		return ;
	}
	if(i<=(a+b)/2)
	update(node*2,a,(a+b)/2,i,val);
	else
	update(node*2+1,(a+b)/2+1,b,i,val);
	tree[node]=max(tree[node*2],tree[node*2+1]);
}
int query(int node,int a,int b,int l,int r)
{
	if(a>b)
	return 0;
	if(a>=l&&b<=r)
	{
		return tree[node];
	}
	if(r<=(a+b)/2)
	return query(node*2,a,(a+b)>>1,l,r);
	else if(l>(a+b)/2)
	return query(node*2+1,(a+b)/2+1,b,l,r);
	else
	return max(query(node*2,a,(a+b)>>1,l,r),query(node*2+1,(a+b)/2+1,b,l,r));
}
int main()
{
	int n,m,q;
	cin>>n>>m;
	for(int i=1;i<=n;i++)
	cin>>arr[i];
	for(int i=1;i<=m;i++)
	cin>>p[i].first>>p[i].second;
	build(1,1,n);
	cin>>q;
	for(int i=1;i<=q;i++)
	{
		int x;
		cin>>x;
		arr[x]--;
		if(arr[x]==0)
		{
			update(1,1,n,x,i);
		}
	}
	for(int i=1;i<=m;i++)
	{
		int l=query(1,1,n,p[i].first,p[i].second);
		if(l!=MAX)
		ans[l]++;
	}
	for(int i=1;i<=q;i++)
	{
		ans[i]+=ans[i-1];
		cout<<ans[i]<<endl;
	}
}