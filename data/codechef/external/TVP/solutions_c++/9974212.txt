/*
* @problem: template
*/
#include <iostream>
#include <algorithm>
#include <utility>
#include <cstring>
#include <string.h>
#include <set>
#include <map>
#include <math.h>
#include <stdio.h>
#include <vector>
#include <functional>
#include <bitset>
#include <iomanip>
#define ll long long
#define gr greater<ll>()
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define MS1(ar) memset(ar,-1,sizeof ar)
#define f first
#define s second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
using namespace std;
#define mod 100000007
const int MAX = 1e5 + 10;
ll tree[4 * MAX];
ll dp[MAX];
ll ar[MAX];
void build(int node, int l, int r)
{
	if (l == r)
	{
		tree[node] = mod;
		return;
	}
	else
	{
		ll mid = (l + r) / 2;
		build(2 * node, l, mid);
		build(2 * node + 1, (mid + 1), r);

		tree[node] = max(tree[2 * node], tree[2 * node + 1]);
	}
}

void update(int node, int l, int r, int i, int val)
{
	if (l > r)
	{
		return;
	}

	if (l == r && l == i)
	{
		tree[node] = val;
		return;
	}
	ll mid = (l + r) / 2;
	if (i <= mid)
		update(2 * node, l, mid, i, val);
	else if (i > mid)
		update(2 * node + 1, mid + 1, r, i, val);
	tree[node] = max(tree[2 * node], tree[2 * node + 1]);
}

ll query(int node, int l, int r, int i, int j)
{
	if (l > r)
		return 0;

	if (l >= i && r <= j)
		return tree[node];
	int mid = (l + r) / 2;
	if (j <= mid)
		return query(2 * node, l, mid, i, j);
	if (i > mid)
		return query(2 * node + 1, mid + 1, r, i, j);
	else
	{
		ll left = query(2 * node, l, mid, i, j);
		ll right = query(2 * node + 1, mid + 1, r, i, j);
		return max(left, right);
	}
}
int main()
{
	int n, m, a, b, q;
	vector<pair<int, int> >v;
	//freopen("../input.txt", "r", stdin);
	ind(n);
	ind(m);
	for (int i = 1; i <= n; i++)
	{
		inl(ar[i]);
	}
	build(1, 1, n);
	for (int i = 1; i <= m; i++)
	{
		ind(a);
		ind(b);
		v.pb(make_pair(a, b));
	}
	ind(q);
	int x;
	for (int i = 1; i <= q; i++)
	{
		ind(x);
		ar[x]--;
		if (!ar[x])
			update(1, 1, n, x, i);
	}
	MS0(dp);
	for (int i = 0; i < m; i++)
	{
		ll qans = query(1, 1, n, v[i].first, v[i].second);
		if (qans == mod)
			continue;
		else
			dp[qans]++;
	}
	for (int i = 1; i <= q; i++)
	{
		dp[i] += dp[i - 1];
		pl(dp[i]);
	}
	return 0;
}
