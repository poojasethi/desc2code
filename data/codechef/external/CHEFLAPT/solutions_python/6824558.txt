import java.io.*;
import java.util.*;

public class Main {

    static Long applesInTree[];

    static InputReader in = new InputReader(System.in);
    static OutputWriter out = new OutputWriter(System.out);

    public static void main(String[] args) throws IOException {

        int testcases = in.readInt();

        for (int i = 0; i < testcases; i++) {
            int x = in.readInt();
            Set<Integer> set = new TreeSet<Integer>();
            Map<Integer, Integer> map = new HashMap<Integer, Integer>();
            for (int j = 0; j < x; j++) {
                int cost = in.readInt();
                if(map.get(cost) == null)
                {
                    map.put(cost, 1);
                }
                else
                {
                    int tyms = map.get(cost);
                    map.put(cost, ++tyms);
                }
            }
            for(int j : map.keySet())
            {
                if(map.get(j) == 1)
                {
                    set.add(j);
                }
            }
            out.printLine(set.iterator().next());
        }


        out.flush();
        out.close();
    }

    private static int countOpenTweets(final int[] tweets) {
        int count = 0;
        for (int i = 0; i < tweets.length; i++) {
            if (tweets[i] == 1) {
                count++;
            }
        }
        return count;
    }

    private static void closeAllTweets(int[] tweets) {
        for (int i = 0; i < tweets.length; i++) {
            tweets[i] = 0;
        }
    }

    private static void toggle(final int[] tweets, final int tweetNo) {
        if (tweets[tweetNo - 1] == 1) {
            tweets[tweetNo - 1] = 0;
        } else {
            tweets[tweetNo - 1] = 1;
        }
    }

}

class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        while (!isSpaceChar(c));
        return res * sgn;
    }

    public long readLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        while (!isSpaceChar(c));
        return res * sgn;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do {
            res.appendCodePoint(c);
            c = read();
        }
        while (!isSpaceChar(c));
        return res.toString();

    }

    public boolean isSpaceChar(int c) {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String next() {
        return readString();
    }

    public interface SpaceCharFilter {
        public boolean isSpaceChar(int ch);
    }

}

class OutputWriter {
    private final PrintWriter writer;

    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }

    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }

    public void print(Object... objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0)
                writer.print(' ');
            writer.print(objects[i]);
        }
    }

    public void printLine(Object... objects) {
        print(objects);
        writer.println();
    }

    public void close() {
        writer.close();
    }

    public void flush() {
        writer.flush();
    }

}

class IOUtils {
    public static int[] readIntArray(InputReader in, int size) {
        int[] array = new int[size];
        for (int i = 0; i < size; i++)
            array[i] = in.readInt();
        return array;
    }

    public static Long[] readLongArray(InputReader in, int size) {
        Long[] array = new Long[size];
        for (int i = 0; i < size; i++)
            array[i] = in.readLong();
        return array;
    }
}