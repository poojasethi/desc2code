//Finds the minimum spanning tree using kruskal's algorithm
//capable of printing the minimum value
//can also print the edges forming the MST

#include<stdio.h>
#include<stdlib.h>

#define gc getchar_unlocked()

typedef struct edge
{
  long int s,d,w;
}edge;

int compare(const void *a,const void *b)
{
  edge *a1=(edge*)a;
  edge *a2=(edge*)b;
 
 return (a1->w)-(a2->w);
}

long int root(long int);
void join(long int,long int);
long int kruskal();
long int in();

long int *par,*size,*ansx,*ansy,pos=0,v,e;
edge *arr;

int main()
{
  long int i,j,ans=0,t=0;
  
  t=in();
  
  //scanf("%ld",&t);
  
  while(t--)
  {
  
    v=in();
    e=in();
    
    //scanf("%ld %ld",&v,&e);
    
    pos=0;
    
    arr=new edge[e+1];//array of structure
    par=new long int[v+1];
    size=new long int[v+1];
    ansx=new long int[e+1];
    ansy=new long int[e+1];
    
    for(i=1;i<=v;i++)
    {
      par[i]=i;
      size[i]=1;
    }
    
    for(i=0;i<e;i++)
    {
      arr[i].s=in();
      arr[i].d=in();
      arr[i].w=in();
    
      //scanf("%ld %ld %ld",&(arr[i].s),&(arr[i].d),&(arr[i].w));
    }
    
    ans=kruskal();
    
    //for(i=0;i<pos;i++)
      //printf("%ld %ld\n",ansx[i],ansy[i]);
    
    printf("%ld\n",ans);
  }
      
  return 0; 
}

long int kruskal()
{
  //sort the edges in ascending order
  
  long int i,j,sum=0;
  
  qsort(arr,e,sizeof(edge),compare);
  
  for(i=0;i<e;i++)
  {
    if(root(arr[i].s)!=root(arr[i].d))
    {
      join(arr[i].s,arr[i].d);
      ansx[pos]=arr[i].s,ansy[pos++]=arr[i].d;
      sum+=arr[i].w;
    }
  }
  
  return sum;
}
  

long int root(long int i)
{
    while(par[i]!=i)
    {
      par[i]=par[par[i]];
      i=par[i];
    }
    
    return i;
}

void join(long int a,long int b)
{
    long int x,y;
    
    x=root(a);
    y=root(b);
    
    if(size[x]>=size[y])//merge y into x
    {
	size[x]+=size[y];
	size[y]=0;
	par[y]=x;
    }
    
    else
    {
      size[y]+=size[x];
      size[x]=0;
      par[x]=y;
    }
}

long int in()
{
  char ch;
  long int t=0;
  
  ch=gc;
  
  while(ch<48||ch>57)
    ch=gc;
  
  while(ch>=48&&ch<=57)
  {
    t=(t<<3)+(t<<1)+ch-48;
    ch=gc;
  }
  
  return t;
}