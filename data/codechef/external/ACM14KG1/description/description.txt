Laxman is doing Diwali shopping. There are N shops numbered from 1 to N. Laxman wants to buy M different types of crackers. Crackers are numbered from 1 to M. Each shop sells many types of crackers. Laxman is currently at the i'th shop. Laxman want to find j and k, such that j <= i and k ≥ i and he can buy all M types of crackers only by visiting shops in the range of j to k. If there are multiple valid j, k, he then want to minimize the window size, that is, minimize the value of k - j. If there are still multiple valid j, k, then he wants to minimize the value of j. It is also known that, by visiting all the N shops, Laxman can surely buy all M types of crackers.
Write a program to output j, k values for all valid i.

Input
The first line of the input contains an integer T denoting the number of test cases. Each test case is described as follows,
First line of each test case has 2 integers, N and M. Following N lines describe the shops.
Each of the N lines starts with an integer X, which denotes the number of different types of crackers sold in that shop. X integers follow describing the cracker types. All the X integers are different.

Output
For each test case output N lines, One for each i, 1 <= i <= N. Each line should contain two integers, j and k.

Constraints

1 ≤ T ≤ 10000
1 ≤ N ≤ 100000
1 ≤ M ≤ 100000
0 ≤ X ≤ 100000
1 ≤ Sum of N over all test cases ≤ 500000
1 ≤ Sum of M over all test cases ≤ 500000
1 ≤ Sum of X over all test cases ≤ 500000


Example
Input:
2
3 3
1 1
1 2
1 3
3 3
1 1
2 2 3
1 1

Output:
1 3
1 3
1 3
1 2
1 2
2 3

Explanation
Test case #1:
Laxman needs to visit all 3 shops to but all M types

Test case #2:
Laxman needs to visit shops 1, 2 to get all M types. Or he can visit shops 2, 3 to get all M types.
For i = 2, we could have bought all types from shops 2 3, but we prefer 1 2 because 1 < 2, as stated in the statement we want to minimize j in case of tie.

