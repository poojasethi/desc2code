#include <bits/stdc++.h>
using namespace std;
struct node
{
  int ans,ans2;
  void merge(node a,node b)
  {
    ans=max(a.ans,b.ans);
    ans2=min(a.ans2,b.ans2);
  }
    node(){
      ans=INT_MIN;
      ans2=INT_MAX;
    }
    node(int val){
        ans=val;
        ans2=val;
    }
}tree[50000000];
void create(int pos)
{
  pos>>=1;
  while(pos){
    tree[pos].merge(tree[pos<<1],tree[(pos<<1)+1]);
    pos>>=1;
  }
}
node query(int root,int l_most,int r_most,int l,int r)
{
  if(l_most >= l && r_most <= r)
    return tree[root];
  int l_child = (root<<1) , r_child = l_child + 1,mid = (l_most + r_most )>>1;
  node left=node(),right = node();
  if(l<=mid)
    left = query(l_child,l_most,mid,l,r);
  if(r>mid)
    right = query(r_child,mid+1,r_most,l,r);;
  node temp = node();
  temp.merge(left,right);
  return temp;
}
int main()
{

  int n,q,p,l,r;

  scanf("%d",&n);scanf("%d",&q);
  int k = (int)ceil(log(n)/log(2));
  int pos = (1<<k),temp;
  for(int i=0;i<n;i++){
    scanf("%d",&temp);
    tree[pos+i] = node(temp);
    create(pos+i);
  }
  while(q--)
  {
        scanf("%d",&l);scanf("%d",&r);
        cout<<query(1,1,pos,l+1,r+1).ans-query(1,1,pos,l+1,r+1).ans2<<endl;
  }

  return 0;
}
