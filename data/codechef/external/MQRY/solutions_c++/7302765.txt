#include<iostream>
#include<cstdio>
#include<algorithm>
#define LL long long int
#define INF 1000000005
using namespace std;
int arr[100005];
struct seg
{	int max;
	int min;
}tree[500005];
void build(int node,int a,int b)
{	if(a>b)
		return ;
	if(a==b)
	{	tree[node].max=arr[a];
		tree[node].min=arr[a];
		return ;
	}	
	build(2*node,a,(a+b)/2);
	build(2*node+1,(a+b)/2+1,b);
	tree[node].max=max(tree[2*node].max,tree[2*node+1].max);
	tree[node].min=min(tree[2*node].min,tree[2*node+1].min);
	return ;
}
struct seg query(int node,int a,int b,int start,int end)
{	struct seg left;
	struct seg right;
	if(a>b||b<start||a>end)
		return ((seg){0,INF});
	if(start<=a&&b<=end)
		return tree[node];
	left=query(2*node,a,(a+b)/2,start,end);
	right=query(2*node+1,(a+b)/2+1,b,start,end) ;
	return (seg){ max(left.max,right.max) ,min(left.min,right.min) } ;
}
int main()
{	int N,Q,p,q,i;
	struct seg ans;
	char ch;
	scanf("%d%d",&N,&Q);
	for(i=0;i<N;i++)
		scanf("%d",&arr[i]);
	build(1,0,N-1);	
	
	while(Q--)
	{		
		{ 	scanf("%d%d",&p,&q);
			ans=query(1,0,N-1,p,q);
			printf("%d\n",ans.max-ans.min);
		}
			
	}	
	return 0;
}
 