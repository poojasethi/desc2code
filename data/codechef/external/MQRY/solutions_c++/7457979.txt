#include<bits/stdc++.h>
#include<algorithm>
#include<vector>
#include<queue>
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={0,1,0,-1};int dy[]={1,0,-1,0}; //4 direction
#define REP(i,n) for(int i=0;i<n;i++)
#define REPU(i,a,b) for(int i=a;i<b;i++)
#define sll(n) scanf("%lld",&n)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define sl(n) scanf("%ld",&n)
#define pin(n) printf("%d\n",n)
#define MP make_pair
#define PB push_back
#define all(a) a.begin(),a.end()
#define F first
#define S second
#define SET(a,b) memset(a,b,sizeof (a))
typedef long long LL;
#define PII pair<int,int>
using namespace std;
LL t1[100000<<2],t2[100000<<2];
LL a[100005];
void build(int node,int l,int h)
{
    if(l>h) return;
    if(l==h)
    {
        t2[node]=a[l];
        t1[node]=a[l]; return;
    }
    build(node<<1,l,(l+h)>>1);
    build((node<<1)+1,((l+h)>>1)+1,h);
    t1[node]=max(t1[(node<<1)+1],t1[node<<1]);
    t2[node]=min(t2[(node<<1)+1],t2[node<<1]);
}

LL query_max(int node,int l,int h,int i,int j)
{
    if(i>j || l>j || h<i) return -1000000001;
    if(i<=l && j>=h) return t1[node];
    return max(query_max(node<<1,l,(l+h)>>1,i,j),query_max((node<<1)+1,((l+h)>>1)+1,h,i,j));
}
LL query_min(int node,int l,int h,int i,int j)
{
    if(i>j || l>j || h<i) return 1000000000;
    if(i<=l && j>=h) return t2[node];
    return min(query_min(node<<1,l,(l+h)>>1,i,j),query_min((node<<1)+1,((l+h)>>1)+1,h,i,j));
}
int main()
{
    int n,q;
    si(n); si(q);
    REP(i,n)
    {
        sll(a[i]);
    }
    build(1,0,n-1);
    while(q--)
    {
        int l,h; si(l); si(h);
        printf("%lld\n",query_max(1,0,n-1,l,h)-query_min(1,0,n-1,l,h));
    }
	return 0;
}
