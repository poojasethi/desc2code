#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<cmath>
#include<stack>
#include<queue>
#include<algorithm>
#define all(c) c.begin(),c.end()
#define tr(c,it) for(typeof(c.begin()) it=c.begin();it!=c.end();it++)
#define sz(c) c.size()
#define pb push_back
#define mp make_pair
#define gc() getchar_unlocked()
#define pc(x) putchar_unlocked(x)

#define ll long long int
#define SIZE 100001
#define rep(i,a,b) for(i=a;i<=b;++i)
using namespace std;

const ll inf = 1e9+1;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
typedef map<int,int> mii;




static inline int scanInt()
{
    int x=0;
    register char c=gc();
    while(c<'0'||c>'9')
    {
        c=gc();
    }
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=gc();
    }
    return x;
}


static inline ll scanLong()
{
    ll x=0;
    register char c=gc();
    while(c<'0'||c>'9')
    {
        c=gc();
    }
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=gc();
    }
    return x;
}










static inline void fastWrite(ll x)
{

  char s[21];
  int i=0;
  do
  {
      s[i++]=x%10+'0';
      x/=10;
  }while(x);
  --i;
  while(i>=0)
  {
      pc(s[i--]);
  }
  pc('\n');

}



int gcd(int x,int y)
{
return(y?gcd(y,x%y):x);
}

int f(int x,int y)
{
    int cnt=0;
    for(int i=x;i<=y;i++)
    {
        if(!(i%x))
            cnt++;
    }
    return cnt;
}

ll arr[SIZE];
ll lazy[SIZE<<2]={0};
ll maxtree[SIZE<<2];
ll mintree[SIZE<<2];

void build_tree(int lower,int upper,int node)
{
    if(lower>upper)
    return;
    if(lower==upper)
    {
        maxtree[node]=arr[lower];
        mintree[node]=arr[lower];
        return;
    }
    int mid=(lower+upper)>>1;
    build_tree(lower,mid,2*node);
    build_tree(mid+1,upper,2*node+1);
    maxtree[node]=max(maxtree[2*node],maxtree[2*node+1]);
    mintree[node]=min(mintree[2*node],mintree[2*node+1]);
    return;
}

ll max_query_tree(int lower,int upper,int l,int r,int node)
{
if(lower>upper||lower>r||upper<l)
    return -1;
if(lower>=l&&upper<=r)
return(maxtree[node]);
int mid=(lower+upper)>>1;
ll q1=max_query_tree(lower,mid,l,r,2*node);
ll q2=max_query_tree(mid+1,upper,l,r,2*node+1);
return(max(q1,q2));
}


ll min_query_tree(int lower,int upper,int l,int r,int node)
{
if(lower>upper||lower>r||upper<l)
    return inf;
if(lower>=l&&upper<=r)
return(mintree[node]);
int mid=(lower+upper)>>1;
ll q1=min_query_tree(lower,mid,l,r,2*node);
ll q2=min_query_tree(mid+1,upper,l,r,2*node+1);
return(min(q1,q2));
}

int main()
{
//ios_base::sync_with_stdio(false);
//cin.tie(0);
int N;
int Q;
int X;
int Y;
N=scanInt();
Q=scanInt();
int i;
rep(i,0,N-1)
arr[i]=scanLong();
    build_tree(0,N-1,1);
rep(i,0,Q-1){
    X=scanInt();
    Y=scanInt();
    //--X;--Y;
    ll maxi=max_query_tree(0,N-1,X,Y,1);
    ll mini=min_query_tree(0,N-1,X,Y,1);
    fastWrite(maxi-mini);
}
return 0;
}



