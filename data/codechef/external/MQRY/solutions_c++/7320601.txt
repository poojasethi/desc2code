#include<bits/stdc++.h>
#define MAX 100000
using namespace std;
struct node{
int mx,mi;
};
 
node st[4*MAX];
 
node buildSegmentTree(int a[],int start,int end,int idx)
{
	if(start==end)
	{
		st[idx].mx=a[start];
		st[idx].mi=a[start];
		return st[idx];
	}
	else
	{	
		node left=buildSegmentTree(a,start,(start+end)/2,2*idx);
		node right=buildSegmentTree(a,(start+end)/2+1,end,2*idx+1);
		st[idx].mx=max(left.mx,right.mx);
		st[idx].mi=min(left.mi,right.mi);
		return st[idx];
	}	
 
}
 
node query(int left,int right,int start,int end,int idx)
{
	node temp;
	if(end<left||start>right)
	{
		temp.mx=INT_MIN;
		temp.mi=INT_MAX;
		return temp;
	}
	else
	{
		if(left<=start && right>=end)
			return st[idx];
		else
		{
			node l=query(left,right,start,(start+end)/2,2*idx);
			node r=query(left,right,(start+end)/2+1,end,2*idx+1);
			temp.mx=max(l.mx,r.mx);
			temp.mi=min(l.mi,r.mi);
			return temp;
		}	
	}
}	
	
int main()
{
	int n,q;
	scanf("%d%d",&n,&q);
	int a[n];
	for(int i=0;i<n;i++)
	scanf("%d",&a[i]);
	buildSegmentTree(a,0,n-1,1);
	while(q--)
	{
	    int l,r;
	    scanf("%d %d",&l,&r);
	    if(l>r)
	    swap(l,r);
	    node temp;
	    temp=query(l,r,0,n-1,1);
	    printf("%d\n",temp.mx-temp.mi);
	}
	return 0;
}