#include<bits/stdc++.h>

using namespace std;

long long max_tree[300000];
long long min_tree[300000];
long long arr[100003];
long long n,c,q,j,k,u,v,mx,mn,t;

void buildtree(long long node, long long st, long long ed)
{
	if(st>ed) return;
	if(st == ed)
	{
		max_tree[node] = arr[st];
		min_tree[node]=arr[st];
		return;
	}
		buildtree(2*node, st, (st+ed)/2);
		buildtree(2*node+1, (st+ed)/2 + 1, ed);

		min_tree[node] = min(min_tree[2*node], min_tree[2*node + 1]);
		max_tree[node]=max(max_tree[2*node], max_tree[2*node + 1]);
}

void query(long long node, long long st, long long ed, long long l, long long r)
{
	if((st>ed) || (r<st) || (l>ed)) return ;

	if((l<=st) && (ed<=r))
	{
		mn=min(mn,min_tree[node]);
		mx=max(mx,max_tree[node]);
		return;
	}

    query(2*node, st, (st+ed)/2, l, r);
	query(2*node+1, (st+ed)/2 + 1, ed, l, r);

}

int main()
{

    ios_base::sync_with_stdio(false);

	//cin>>t;
	//while(t--)
	//{
		cin>>n >>q;
		for(j=1;j<=n;j++)
	    cin>>arr[j];
		buildtree(1, 1, n);
		while(q--)
		{
			mx=0,mn=1000005000;
			cin>>u>>v;
			u++,v++;
			query(1, 1, n, u, v);
			cout<<mx-mn<<"\n";
		}
	//}
}
