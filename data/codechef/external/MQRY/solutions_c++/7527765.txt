#include <iostream>
#include <cmath>
#include <cstdio>
using namespace std;

typedef long long ll;

ll P[1000000];
ll Q[1000000];
ll z= 1000000000;

ll maketree(int n, ll A[],int start, int last, int pos)
{
    if(start==last)
    {
        P[pos]=A[start];
        return A[start];

    }
    P[pos]=min(maketree(n,A,(start+last)/2+1,last,2*pos+2),maketree(n,A,start,(start+last)/2,2*pos+1));

    return P[pos];





}

ll maketree1(int n, ll A[],int start, int last, int pos)
{
    if(start==last)
    {
        Q[pos]=A[start];
        return A[start] ;

    }
    Q[pos]=max(maketree1(n,A,(start+last)/2+1,last,2*pos+2),maketree1(n,A,start,(start+last)/2,2*pos+1));

    return Q[pos];





}

ll minquery(int start, int last,int l,int r,int pos)
{
    if(start>r||l>last)
        return z;
    else if(start>=l&&r>=last)
    {
        return P[pos];
    }
    int p1 = minquery((start+last)/2+1,last,l,r,2*pos+2);
    int p2 = minquery(start,(start+last)/2,l,r,2*pos+1);

    return min(p1,p2);



}

ll maxquery(int start, int last,int l,int r,int pos)
{
    if(start>r||l>last)
        return 0;
    else if(start>=l&&r>=last)
    {
        return Q[pos];
    }
    int p1 = maxquery((start+last)/2+1,last,l,r,2*pos+2);
    int p2 = maxquery(start,(start+last)/2,l,r,2*pos+1);

    return max(p1,p2);



}

void printarr(int n, int A[])
{
    for(int i=0;i<n;i++)
        printf("%d ",A[i]);
    printf("\n");
}
int main()
{
    int n,q;
    scanf("%d%d",&n,&q);
    ll A[n];
    for(int i=0;i<n;i++)
    {
        scanf("%lld",&A[i]);

    }
    maketree(n,A,0,n-1,0);
    maketree1(n,A,0,n-1,0);
   // printarr(n*ceil(log(n)),P);
    //printarr(n*ceil(log(n)),Q);

    for(int i =0;i<q;i++)
    {
        int l,r;
        scanf("%d%d",&l,&r);
        ll MA=maxquery(0,n-1,l,r,0);
        ll MI=minquery(0,n-1,l,r,0);

        printf("%lld\n",MA-MI);

    }







    return 0;
}
