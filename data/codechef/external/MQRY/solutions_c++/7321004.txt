#include<bits/stdc++.h>
using namespace std;
int a[100010];

int getMid(int lo,int hi){
	return lo+(hi-lo)/2;
}

int maxtree(int a[],int lo,int hi,int *st, int stindex){
    if(lo == hi){
    	st[stindex] = a[lo];
    	return a[lo];
	}	
	int mid = getMid(lo,hi);
	st[stindex] = max(maxtree(a,lo,mid,st,2*stindex+1),maxtree(a,mid+1,hi,st,2*stindex+2));
	return st[stindex];
}

int mintree(int a[],int lo,int hi,int *st1,int stindex){
    if(lo == hi){
    	st1[stindex] = a[lo];
    	return a[lo];
	}	
	int mid = getMid(lo,hi);
	st1[stindex] = min(mintree(a,lo,mid,st1,2*stindex+1),mintree(a,mid+1,hi,st1,2*stindex+2));
	return st1[stindex];
}

int getmax(int *st,int lo,int hi,int left,int right,int stindex){
	if(left<=lo && right>=hi){
		return st[stindex];
	}
	if(left>hi || right<lo ){
		return INT_MIN;
	}
	int mid = getMid(lo,hi);
	return max(getmax(st,lo,mid,left,right,2*stindex+1),getmax(st,mid+1,hi,left,right,2*stindex+2));
}

int getmin(int *st1,int lo,int hi,int left,int right,int stindex){
	if(left<=lo && right>=hi){
		return st1[stindex];
	}
	if(left>hi || right<lo ){
		return INT_MAX;
	}
	int mid = getMid(lo,hi);
	return min(getmin(st1,lo,mid,left,right,2*stindex+1),getmin(st1,mid+1,hi,left,right,2*stindex+2));
}

int main(){
        ios::sync_with_stdio(false);
	int n,m,x,y,i,z,max_size;
	cin>>n>>m;
	for(i=0;i<n;i++){
		cin>>a[i];
	}
	z = ceil(log2(n));
	max_size = 2*pow(2,z) - 1;
	int *st = new int[max_size];
	*st = maxtree(a,0,n-1,st,0);
	int *st1 = new int[max_size];
	*st1 = mintree(a,0,n-1,st1,0);
	for(i=0;i<m;i++){
		cin>>x>>y;
	    int max1 = getmax(st,0,n-1,x,y,0);
	    int min1 = getmin(st1,0,n-1,x,y,0);
	    int diff = max1-min1;
	    cout<<diff<<endl;
	}
	return 0;
}