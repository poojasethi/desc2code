#include<bits/stdc++.h>
using namespace std;

const int N=123456;
const int INF=(int)2e10;
int a[N];

struct Node {
    int maxm, minm;
}tree[4*N];

void build(int node, int from, int to) {
    if(from==to) {
        tree[node].maxm=a[from];
        tree[node].minm=a[from];
        return ;
    }
    int lc=2*node;
    int rc=2*node+1;
    int mid=(from+to)/2;
    build(lc, from, mid);
    build(rc, mid+1, to);
    tree[node].maxm=max(tree[lc].maxm, tree[rc].maxm);
    tree[node].minm=min(tree[lc].minm, tree[rc].minm);
}

Node range_query(int node, int from, int to, int l, int r) {
    if(from>to || from>r || to<l) {
        Node temp;
        temp.maxm=-1;
        temp.minm=INF;
        return temp;
    }
    if(from>=l && to<=r) {
        return tree[node];
    }
    int mid=(from+to)/2;
    int lc=2*node;
    int rc=lc+1;
    Node left=range_query(lc, from, mid, l, r);
    Node right=range_query(rc, mid+1, to, l, r);
    Node temp;
    temp.maxm=max(left.maxm, right.maxm);
    temp.minm=min(left.minm, right.minm);
    return temp;
}

int main() {
    int n, q;
    scanf("%d %d", &n, &q);
    for(int i=0;i<n;i++) {
        scanf("%d", &a[i]);
    }
    build(1, 0, n-1);
    while(q--) {
        int l, r;
        scanf("%d %d", &l, &r);
        Node temp=range_query(1, 0, n-1, l, r);
        printf("%d\n", temp.maxm-temp.minm);
    }
}
