#include<iostream>
#include<math.h>
#include<cstring>
#include <bits/stdc++.h>
inline int inp(){int n=0,s=1,c=getchar_unlocked();if(c=='-')s=-1;while(c<48)c=getchar_unlocked();while(c>47)n=(n<<3)+(n<<1)+c-'0',c=getchar_unlocked();return n*s;}
/*ustypedef long long int          LL;
typedef unsigned long long     ULL;
typedef long double            LD;
 
 
#define pb                   push_back
#define ppb                  pop_back
#define mp                   make_pair
#define ff                   first
#define ss                   second
 
 
#define PI                   acos(-1.0)
#define e                    exp(1.0)
#define EPS                  1e-9
 
 
#define count_1(n)           __builtin_popcountll(n)
 
 
#define fr(i,a,b)            for(int i=a;i<=b;++i)
#define rev(i,b,a)           for(int i=b;i>=a;--i)
#define foreach(v,c)         for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define CLR(A)               memset(A,false,sizeof(A))
#define FILL(A,n,val)        for(int i=0;i<n;++i) A[i]=val
#define all(x)               x.begin(),x.end()
#define TT()                 int tc;cin>>tc;while(tc--)
 
 
#define dbg(vari)            cout<<#vari<<" = "<<(vari)<<endl;
#define dbgA(A,n)            cout<<endl;fr(i,0,n-1) cout<<i<<" -- > "<<A[i]<<endl;
#define dbgV(V)              cout<<endl;fr(i,0,V.size()-1){cout<<i<<" --> "<<V[i].ff<<" "<<V[i].ss<<endl;}
#define dbgG(G,n)            cout<<endl;fr(i,1,n){cout<<i<<" --> ";fr(j,0,(G[i].size())-1) cout<<"("<<G[i][j].ff<<" , "<<G[i][j].ss<<")"<<"  ";cout<<endl;}
#define ns                  cout<<endl<<" ----- entered -----"<<endl;
 
 
#define maX(a,b)                ((a)>(b)?(a):(b))
#define miN(a,b)                ((a)<(b)?(a):(b))
#define abS(x)                  ((x)<0?-(x):(x))
 
 
typedef pair<int,int>          PII;
typedef vector<int>           VI;
typedef vector<PII>          VPII;
typedef vector<VPII>         VVPII;
typedef set<int>              SI;
typedef set<PII>             SPII;
typedef map<int,int>           MPII;
 
 
typedef pair<LL,LL>          PLL;
typedef pair<PLL,LL>         PPLL;
typedef vector<string>           VS;
typedef vector<PLL>          VPLL;
typedef vector<VPLL>         VVPLL;
typedef set<LL>              SL;
typedef set<PLL>             SPLL;
typedef map<LL,LL>           MPLL;*/
using namespace std;
 
template<class T>
class SegmentTree
{
     long long int *A,size;
     public:
     SegmentTree(long long int N)
     {
          long int x = (long long int)(ceil(log2(N)))+1;
          size = 2*(long long int)pow(2,x);
          A = new long long int[size];
          memset(A,-1,sizeof(A));
     }
     void initialize(long long int node, long long int start,
                         long long int end, long long int *array)
     {
 
          if (start==end)
             A[node] = start;
          else
          {
             long long int mid = (start+end)/2;
              initialize(2*node,start,mid,array);
              initialize(2*node+1,mid+1,end,array);
              if (array[A[2*node]]>=
                     array[A[2*node+1]])
                 A[node] = A[2 * node];
              else
                  A[node] = A[2 * node + 1];
          }
     }
     long long int query(long long int node,long long int start,
                   long long int end, int i,long long int j, T *array)
     {
         long long int id1,id2;
         if (i>end || j<start)
            return -1;
 
         if (start>=i && end<=j)
            return A[node];
 
       long long int mid = (start+end)/2;
         id1 = query(2*node,start,mid,i,j,array);
         id2 = query(2*node+1,mid+1,end,i,j,array);
 
         if (id1==-1)
            return id2;
         if (id2==-1)
            return id1;
 
         if (array[id1]>=array[id2])
            return id1;
         else
             return id2;
     }
};

template<class T1>
class SegmentTree1
{
     long long int *A,size;
     public:
     SegmentTree1(long long int N)
     {
          long int x = (long long int)(ceil(log2(N)))+1;
          size = 2*(long long int)pow(2,x);
          A = new long long int[size];
          memset(A,-1,sizeof(A));
     }
     void initialize(long long int node, long long int start,
                         long long int end, long long int *array)
     {
 
          if (start==end)
             A[node] = start;
          else
          {
             long long int mid = (start+end)/2;
              initialize(2*node,start,mid,array);
              initialize(2*node+1,mid+1,end,array);
              if (array[A[2*node]]<=
                     array[A[2*node+1]])
                 A[node] = A[2 * node];
              else
                  A[node] = A[2 * node + 1];
          }
     }
     long long int query(long long int node,long long int start,
                   long long int end, int i,long long int j, T1 *array)
     {
        // cout << "hi " <<endl;
         long long int id1,id2;
         if (i>end || j<start)
            return -1;
 
         if (start>=i && end<=j)
            return A[node];
 
       long long int mid = (start+end)/2;
         id1 = query(2*node,start,mid,i,j,array);
         id2 = query(2*node+1,mid+1,end,i,j,array);
 
         if (id1==-1)
            return id2;
         if (id2==-1)
            return id1;
 
         if (array[id1]<=array[id2])
            return id1;
         else
             return id2;
     }
};
 
 
int main()
{
  long long int i,n,q;
   long long int x,y,x1,y1;
    long long int A[100005];
     n=inp();
     q=inp();
    for (i=0;i<n;i++)
        A[i]=inp();
     SegmentTree<long long int> s(n);
      s.initialize(1,0,n-1,A);
     SegmentTree1<long long int> s1(n);
      s1.initialize(1,0,n-1,A);
     while(q--)
     {
      long long int x,y,max,min;
      x=inp();
       y=inp();
      max=A[s.query(1,0,n-1,x,y,A)];
      //cout << max <<endl;
      min=A[s1.query(1,0,n-1,x,y,A)];
     // cout << min <<endl;
      cout << max-min << endl;
     }
     //  cout <<sum <<endl;
       return 0;
    
}  