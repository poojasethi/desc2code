#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
#define lli long long int
#define li long int
#define ulli unsigned long long int
#define si(n) scanf("%d", &n)
#define sli(n) scanf("%ld", &n)
#define slli(n) scanf("%lld", &n)
#define sulli(n) scanf("%llu", &n)
#define sc(c) scanf("%c", &c)
#define newln printf("\n")
#define pb push_back 
#define all(c) c.begin(), c.end()
#define rep(i,x,n) for(i=x; i< n; ++i)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define present(container, element) (container.find(element) != container.end()) 
#define cpresent(container, element) (find(all(container),element) != container.end())

int a[100010], min_tree[262155], max_tree[262155];

pair<int, int> getminmax(int lq, int rq, int l, int h, int pos){
	if(h<lq || l>rq){
		return make_pair(INT_MAX, INT_MIN);
	}
	if(lq<=l && rq>=h){
		return make_pair(min_tree[pos], max_tree[pos]);
	}
	pair<int, int> retl, retr;
	int minval, maxval;
	long long int leftchild = 2*pos+1, rightchild=2*pos+2, mid = (l+h)/2;
	retl = getminmax(lq, rq, l, mid, leftchild);
	retr = getminmax(lq, rq, mid+1, h, rightchild);
	if(retl.first < retr.first){
		minval = retl.first;
	}
	else{
		minval = retr.first;
	}
	if(retl.second > retr.second){
		maxval = retl.second;
	}
	else{
		maxval = retr.second;
	}
	return make_pair(minval, maxval);
}


void build(long long int pos, long long int l, long long int h){
	if(l==h){
		min_tree[pos] = a[l];
		max_tree[pos] = a[h];
		return;
	}
	long long int mid = (l+h)/2, leftchild=2*pos+1, rightchild=2*pos+2;
	build(leftchild, l, mid);
	build(rightchild, mid+1, h);
	min_tree[pos] = min(min_tree[leftchild], min_tree[rightchild]);
	max_tree[pos] = max(max_tree[leftchild], max_tree[rightchild]);
	// min_tree[pos] = min_tree[leftchild]<min_tree[rightchild]?min_tree[leftchild]:min_tree[rightchild];
	// max_tree[pos] = max_tree[leftchild]>max_tree[rightchild]?max_tree[leftchild]:max_tree[rightchild];
	return;
}

int main()
{
	pair<int, int> ans;
	// cout << "first = " << ans.first << "\tsecond = " << ans.second << endl;
	int n, q, i, lq, rq;
	si(n); si(q);
	rep(i, 0, n)
		si(a[i]);
	build(0, 0, n-1);
	// rep(i, 0, 9){
	// 	cout << min_tree[i] << "\t";
	// }
	// endl;
	// rep(i, 0, 9){
	// 	cout << max_tree[i] << "\t";
	// }
	// endl;
	while(q--){
		si(lq); si(rq);
		ans = getminmax(lq, rq, 0, n-1, 0);
		// cout << ans.second << endl;
		// cout << ans.first << endl;
		printf("%d\n", ans.second-ans.first);
	}
	return 0;
}