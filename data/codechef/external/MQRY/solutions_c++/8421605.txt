#include<bits/stdc++.h>
//need update statement
 
#define gc getchar_unlocked
#define pc putchar_unlocked
 
//inline int getchar_unlocked(){return getchar();}
//inline int putchar_unlocked(int c){ return putchar(c);}
using namespace std;
 
int min(int a,int b){  return a<b?a:b;}
int max(int a,int b) {return a>b?a:b; }
 
void fastwrite(int inp)
{
int a=(inp<0)?-inp:inp;
char snum[20];
int i=0;
do
{
snum[i++]=a%10+48;
a=a/10;
}while(a!=0);
if(inp<0)
snum[i++]='-';
i--;
while(i>=0)
pc(snum[i--]);
pc('\n');
}
 
int fastread()
{
char sign='\0',c=gc();
int ret=0;
while((c<'0'||c>'9')&&c!='-'){c=gc();}
if(c=='-'){
sign='1';
c=gc();
}
while(c>='0'&&c<='9'){
ret=10*ret+c-48;
c=gc();
}
if(sign)ret=-ret;
return ret;
}
 
int max_tree[300000];
int min_tree[300000];
int arr[100003];
 
 
 
void buildtree(int node,int start,int end)
{
    if(start>end)
        return ;
    if(start==end)
    {
         max_tree[node]=arr[start] ;
         min_tree[node]=arr[start];
         return ;
    }
 
int mid=(start+end)>>1;
 
    buildtree(node<<1,start,mid);
    buildtree((node<<1)+1,mid+1,end);
 
    min_tree[node]=min(min_tree[node<<1],min_tree[(node<<1)+1]);
    max_tree[node]=max(max_tree[node<<1],max_tree[(node<<1)+1]);
 
}
int MAX,MIN;
 
void query(int node,int start,int end,int l,int r)
{
     if((start>end) || (r<start) || (l>end)  ) return ;
 
     if((l<=start) && (r>=end))
     {
         MIN=min(MIN,min_tree[node]);
         MAX=max(MAX,max_tree[node]);
         return ;
 
     }
  int mid=(start+end)>>1;
     query(node<<1,start,mid,l,r);
     query((node<<1)+1,mid+1,end,l,r) ;
}
 
int main()
{
    int n,q,l,r;
    n=fastread(); q=fastread();
 
    for(int i=1;i<=n;i++)
          arr[i]=fastread();
 
        buildtree(1,1,n);
 
    while(q--)
    {   MAX=0;  MIN=1000005000;
       l=fastread();
       r=fastread();
l++;
r++;
 
        query(1,1,n,l,r);
       MAX=MAX-MIN;
        fastwrite(MAX);
 
    }
}
 