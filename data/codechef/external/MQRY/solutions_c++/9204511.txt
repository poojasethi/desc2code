#include<bits/stdc++.h>
using namespace std;
long long min(long long a,long long b)
{
    if(a<b)
        return a;
    else return b;
}
long long max(long long a,long long b)
{
    if(a>b)
        return a;
    else return b;
}
long long arr[100001];
long long tree1[262114];
long long tree2[262114];
void build_tree1(int node,int a,int b)
{
	if(a>b)
		return;

	if(a==b)
	{
		tree1[node]=arr[a];
		return;
	}

	build_tree1(node*2,a,(a+b)/2);
	build_tree1(node*2+1,(a+b)/2+1,b);

	tree1[node]=max(tree1[node*2], tree1[node*2+1]);
}

int query_tree1(int node,int a,int b,int i,int j)
{
	if(b<i || a>j || a>b)
		return 0;

	if(a >= i && b <= j)
		return tree1[node];

	int q1 = query_tree1(node*2, a, (a+b)/2, i, j);
	int q2 = query_tree1(node*2+1, 1+(a+b)/2, b, i, j);

	int ans = max(q1, q2);

	return ans;
}


void build_tree2(int node,int a,int b)
{
	if(a>b)
		return;

	if(a==b)
	{
		tree2[node]=arr[a];
	//	printf("%d %d min is %d\n",a,b,tree2[node]);
		return;
	}

	build_tree2(node*2,a,(a+b)/2);
	build_tree2(node*2+1,(a+b)/2+1,b);

	tree2[node]=min(tree2[node*2], tree2[node*2+1]);
//	printf("%d %d min is %d\n",a,b,tree2[node]);
}

int query_tree2(int node,int a,int b,int i,int j)
{
	if(b<i || a>j || a>b)
		return 1000000001;

	if(a >= i && b <= j)
		return tree2[node];

	int q1 = query_tree2(node*2, a, (a+b)/2, i, j);
	int q2 = query_tree2(node*2+1, 1+(a+b)/2, b, i, j);

	int ans = min(q1, q2);

	return ans;
}

int main()
{
  long long int n,q;
  cin>>n>>q;
  long long a,b,ans1,ans2,ans;
  for(long long int i=0;i<n;i++)
  {
      cin>>arr[i];
  }
  build_tree1(1,0,n-1);
  build_tree2(1,0,n-1);
//  for(int i=1;i<=(2*n-1);i++)
//  {
//      cout<<maxtree[i]<<" ";
//  }
  while(q--)
  {
      cin>>a>>b;
      ans1=query_tree2(1,0,n-1,a,b);
      //cout<<ans1<<" ";
      ans2=query_tree1(1,0,n-1,a,b);
      //cout<<ans2<<endl;
        cout<<ans2-ans1<<endl;
  }
   return 0;
}
