#include <bits/stdc++.h>
#define ll long long
#define sz 100005
using namespace std;

int d[sz],calc[sz],pre[sz];
// d stores the distance from origin
// pre stores consecutive distances i.e pre[1]=1 and pre[i]= d[i]-d[i-1]; i>1
// using a 1 based indexing
// calc stores the needed subsequence
int lps[sz];

// using KMP algorithm

void computelps(int n)	//n is length of array calc == pattern array
{
	int i=2,j=1;
	lps[1]=1;
	while(i<=n)
	{
		if(calc[i]==calc[j])
		{
			lps[i]=j+1;
			i++;
			j++;
		}
		else
		{
			if(j!=1)
			{
				j=lps[j-1];
			}
			else
			{
				lps[i]=1;
				i++;
			}
		}
	}
}

void search(int n,int m,int &ans) // n== length of d / text and m== length of calc/pattern
{
	int i=1,j=1;
	while(i<=n)
	{
		//cout<<i<<" "<<j<<"\n";
		if(pre[i]==calc[j])
		{
			i++;
			j++;
		}
		
		if(j==m+1)
		{
			ans++; // match found
			j=lps[j-1];
		}
		else if( pre[i]!=calc[j] && i<=n)
		{
			if(j>1)
			{
				j=lps[j-1];
			}
			else
			{
				i++;
			}
		}
	}
}

void printa(int *a,int n)
{
	for(int i=1;i<=n;i++)
	{
		cout<<a[i]<<" ";
	}
	cout<<"\n";
}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    #endif
    int t;
    scanf("%d",&t);
    d[0]=0;
    while(t--)
    {
        int n,k,ans=0;
        scanf("%d %d",&n,&k);
        for(int i=1;i<=n;i++)
        {
            scanf("%d ",&d[i]);
			if(i!=1)
			{
				pre[i]=d[i]-d[i-1];
			}
			else
			{
				pre[i]=0;
			}
        }
        for(int i=1;i<=k;i++)
        {
            scanf ("%d ",&calc[i]);
		}								// only input
		
		computelps(k);
		//printa(calc,k);
		//printa(lps,k);
        search(n,k,ans);
		cout<<ans<<"\n";
    }
    return 0;
}
