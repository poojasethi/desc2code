// author [V]ict0r
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) ((S&two(X))>0)
#define containL(S,X) ((S&twoL(X))>0)
#define debug(args...) dbg(),args
typedef pair<int,int> ipair;
int countbit(int n) {return (n==0)?0:(1+countbit(n&(n-1)));}
int lowbit(int n) {return (n^(n-1))&n;}
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> T sqr(T x) {return x*x;}
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N)
#define SS(N) scanf("%s", N)
#define SIZE(X) ((int)((X).size()))
#define LEN(X) ((int)((X).length()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;++A)
#define EFOR(A,B,C) for(int A=B;A<=C;++A)
#define RFOR(A,B,C) for(int A=B;A>=C;--A)
#define FORL(A,B,C) for(ll A=B;A<C;++A)
#define EFORL(A,B,C) for(ll A=B;A<=C;++A)
#define RFORL(A,B,C) for(ll A=B;A>=C;--A)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX(A,B) (A > B) ? A : B
#define MIN(A,B) (A < B) ? A : B
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define PRN(A, N) if (DBG) { FOR(j, 0, N) cout << A[j] << " " ; cout << endl;}
#define PR2N(A, M, N) FOR(i, 0, M) { PRN(A[i], N) }
#define PR(A) PRN(A, sizeof(A)/sizeof(A[0]))
#define PR2(A) FOR(i, 0, sizeof(A)/sizeof(A[0])) { PR(A[i]) }
#define LIM 10001
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

char str[LIM];
int c2,c5,ans;

int main(int argc, char *argv[]){
	DBGCHECK;
	int t;
	S(t);
	while (t-- > 0) {		
		SS(str);
		c2 = c5 = 0,ans = 1;
		int flag = 1,len = strlen(str);
		ll num;
		FORL(i, 0, len){
			num = 0;
			while(i < len && isdigit(str[i]))
				num = num*10 + str[i++] - '0';
			if(num == 0){
				flag = 0;
				break;
			}
			while(num%5 == 0){
				num /= 5;
				c5++;
				}
			while(num%2 == 0){
				num /= 2;
				c2++;
				}	
			ans = (ans*(num%10)) % 10;
		}
		debug("ans",ans);
		if (!flag || ans == 0)
			printf("Robot hanged.\n");
		else{
			int mul = 1;
			if(c2 > c5)
				EFOR(i,1,c2-c5)
					mul = (mul*2)%10;
			else if(c5 > c2)
				EFOR(i,1,c5-c2)
					mul = (mul*5)%10;
			debug("mul",mul);		
			ans  = (ans*mul)%10;		
			printf("%d\n", ans);
		}
	}
}
