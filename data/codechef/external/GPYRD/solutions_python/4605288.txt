from math import sqrt
 
 
def disp(A):
    j = 0
    for i in A:
        print j, i
        j += 1
    print 
 
def Asum(A):
    s = 0L
    for i in A:
        s += sum(i)
    return long(s)
 
def solve(N):
    N = sqrt(1 + 8*N) - 1
    N /= 2
    N = int(N)
#    print N
    A = [[0] * (i + 1) for i in xrange(N)]
    A[0][0] = 1
    for i in xrange(1, N):
        A[i][0] = A[i][i] = 1
        for j in xrange(1, i):
            A[i][j] = A[i-1][j-1] + A[i-1][j]
#    disp(A)
    removeoutermost(A, N)
    A = A[2:]
#    disp(A)
    prev = Asum(A)
    A = step2(A)
#    disp(A)
    step3(A)
#    disp(A)
    print prev - Asum(A)
    
 
def removeoutermost(A, N):
    for i in xrange(0, N):
        A[i] = A[i][1:-1]
 
def is_prime(N):
    if (N == 1):
        return False
    for i in xrange(2, N):
        if N % i == 0:
            return False
    return True
 
def step2(A):
    B = [x for x in A if is_prime(x[0])]
    return B
 
def step3(A):
    for i in xrange(len(A)):
        div = A[i][0]
        for j in xrange(len(A[i])):
            A[i][j] /= div
 
t = input()
for i in xrange(t):
    n = input()
    solve(n) 