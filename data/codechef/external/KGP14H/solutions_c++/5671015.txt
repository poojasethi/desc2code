//Common headers
#include<cstdio>
#include<iostream>
#include<vector>
#include<utility>
#include<algorithm>
#include<string>

using namespace std;


#define ipair std::pair< int, int >
#define ull unsigned long long
#define traverse(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define rtraverse(container, it) for(typeof(container.rbegin()) it = container.rbegin(); it != container.rend(); it++)

#define INF 100000000
#define TOLERANCE 1e-5
int main(){
	int testCases= 0;
	cin >> testCases;
	
	for(int tc=1;tc<=testCases;tc++){
		int K, R;
		cin >> K >> R;
		int K_1 = K+1;
		int K_2 = K+2;
		int dist[K+2][K+2];
		int dp[K+2][K+2];
		
		for(int i=0;i<K_2;i++){
			dist[i][i] = 0;
			int from,to,dft;
			cin >> from;
			for(int j=0;j<K_1;j++){
				cin >> to >> dft;
				dist[from][to] = dft;
			}
		}
		//Read and ready
		
		dp[0][0] = 0;
		//dp[0][1] = dp[1][0] = dist[0][1]; implied in the loop
		for(int i=1;i<K_2;i++){
			dp[i][i] = 0;
			dp[0][i] = dp[i][0] = dp[0][i-1] + dist[i-1][i];
		}
		///*
		dp[1][2] = dp[2][1] = (dp[0][1] + dist[0][2]);
		for(int i=3;i<K_2;i++){
			dp[1][i] = dp[i][1] = (dp[1][i-1] + dist[i-1][i]);// WHERE i E [2,K+1]
		}//*/
		for(int i=2;i<K_2;i++){
			int minSoFar = dp[i][0] + dist[0][i+1];
			for(int j=1;j<i;j++){
				minSoFar = min( minSoFar, dp[i][j] + dist[j][i+1] );
			}
			dp[i][i+1] = dp[i+1][i] = minSoFar;
			for(int j=i+2;j<K_2;j++){
				dp[i][j] = dp[j][i] = dp[i][j-1]+dist[j-1][j];
			}
		}
		
		
		
		//FINALLY, complete the cycle
		int minSoFar = dp[K_1][0]+ dist[0][K_1];
		for(int i=0;i<K_1;i++){
			//if(i==K_1)				continue;
			dp[K_1][i]+= dist[i][K_1];
			minSoFar = min(minSoFar, dp[K_1][i]);
		}
		
		minSoFar+= (R * K_1);
		printf("Case %d: %d\n", tc, minSoFar);
		
	}
	return 0;
}