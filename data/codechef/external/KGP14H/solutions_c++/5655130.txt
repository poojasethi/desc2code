	#include <iostream>
	#include<stack>
	#include<string>
	#include<vector>
	#include<set>
	#include<queue>
	#include<stdio.h>
	#include<string.h>
	#include<math.h>
	#include<algorithm>
	using namespace std;

	#define gc getchar
	#define p 1000000007
	#define MOD 1000000007
	#define pc(x) putchar(x)
	#define pi(n) printf("%d",n)
	#define pis(n) printf("%d ",n)
	#define pin(n) printf("%d\n",n)
	#define pll(n) printf("%lld",n)
	#define ps printf(" ")
	#define pn printf("\n")
	#define rep(i,n) for(i=0;i<n;i++)
	#define fu(i,a,n) for(i=a;i<=n;i++)
	#define fd(i,n,a) for(i=n;i>=a;i--)
	#define INV 333333336
	#define ll long long
	#define ull unsigned long long
	#define EPS 1e-9
	#define infi 2000000000
	#define linfi 2000000000000000000

	inline int sn()
	{
		int n=0;
		int ch=gc();
		while( ch <48 )ch=gc();
		while( ch >47 )
		n = (n<<3)+(n<<1) + ch-'0', ch=gc();
		    return n;
	}

	inline void wi(int n)
	{
		int N = n, rev, count = 0;
		rev = N;
		if (N == 0) { pc('0');  return ;}
		while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
		rev = 0;
		while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
		while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
		while (count--) pc('0');
	}
		
	int main()
	{
		int t=sn();
		for(int q=1;q<=t;q++)
		{
			int n,r,i,j,h,s,l,k;
			scanf("%d %d",&n,&r);
			int x[n+2][n+2];
			rep(i,n+2) rep(j,n+2) x[i][j]=0;
			rep(i,n+2)
			{
				scanf("%d",&h);
				rep(j,n+1)
				{
					scanf("%d",&s);
					scanf("%d",&x[h][s]);
				}
			}
			
			/*pn;
			rep(i,n+2)
			{
				rep(j,n+2)
				printf("%d ",x[i][j]);
				pn;
			}
			pn;*/
			
			int ans[105][105][105];
			
			rep(i,n+2) rep(j,n+2) rep(k,n+2) ans[i][j][k]=infi;
			
			ans[0][0][0]=0;
			ans[1][0][0]=2*x[1][0];
			fu(i,1,n)
			{
				if(i>=2) k=i-2;
				else k=0;
				fu(j,0,k)
				{
					ans[i+1][i][j]  =min(ans[i+1][i][j]  ,ans[i][i-1][j]+x[i][i+1]+x[i+1][j]-x[i][j]);
					ans[i+1][i-1][i]=min(ans[i+1][i-1][i],ans[i][i-1][j]+x[i][i+1]+x[i-1][i+1]-x[i-1][i]);
				}	
				fu(j,0,k)
				{
					ans[i+1][i][i-1]=min(ans[i+1][i][i-1],ans[i][j][i-1]+x[i][i+1]+x[i+1][i-1]-x[i][i-1]);
					ans[i+1][j][i]  =min(ans[i+1][j][i]  ,ans[i][j][i-1]+x[i][i+1]+x[j][i+1]-x[j][i]);				
				}				
			} 
			
			h=infi;
			fu(i,n+1,n+1)
			{
			
				if(i>=2) k=i-2;
				else k=0;
				fu(j,0,k)
				{
					h=min(h,ans[i][i-1][j]);
					//printf("%d %d %d %d\n",i,i-1,j,ans[i][i-1][j]);
				}
				fu(j,0,k)
				{	
					h=min(h,ans[i][j][i-1]);
					//printf("%d %d %d %d\n",i,j,i-1,ans[i][j][i-1]);
				}
			
			}
			
			printf("Case %d: ",q);
			pi(h+(n+1)*r);pn;
		}
	
	}














