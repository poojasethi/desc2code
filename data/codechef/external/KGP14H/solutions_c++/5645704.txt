#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define fr first
#define se second

/* Relevant code begins here */

int k;
ill r;
ill cost[1005][1005];
ill dp[205][205][205];

ill fnc(int idx, int a, int b)
{
	if (idx > k+1) return 0;
	if (idx == k+1) return cost[a][idx] + cost[idx][b];
	if (dp[idx][a][b] != -1) return dp[idx][a][b];
	
	ill ret = 0LL;
	ret = min(fnc(idx+1, idx, b) + cost[a][idx], fnc(idx+1, a, idx) + cost[b][idx]);
	
	return dp[idx][a][b] = ret;
}

int main()
{
	int t, cases = 0, i, j, x, y;
	ill ans;
	S(t);
	
	while (t--) {
		M(cost, 0);
		S(k), Sl(r);
		F(i, 0, k+2) {
			S(x);
			F(j, 0, k+1) {
				S(y), Sl(cost[x][y]);
			}
		}	
		M(dp, -1);
		ans = fnc(0, 0, 0) + r*(k+1);
		printf("Case %d: %lld\n", ++cases, ans);
	}
}