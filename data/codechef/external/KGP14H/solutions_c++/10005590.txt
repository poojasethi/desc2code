#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);
using namespace std;
typedef long long int LL;
int dist[110][110] , dp[110][110][110];
//lasta and lastb denote the largest id of cities in both sets.
int recur(int curr_node , int lasta , int lastb){	
	if(curr_node < 0)
		return 0;	
	if(curr_node == 0)
		return dist[0][lasta] + dist[0][lastb];
	if(dp[curr_node][lasta][lastb]!=-1)
		return dp[curr_node][lasta][lastb];	
	int ret;
	//assign curr_node to set A
	ret = dist[curr_node][lasta] + recur(curr_node-1 , curr_node , lastb);
	ret = min(ret , recur( curr_node-1 , lasta , curr_node ) + dist[curr_node][lastb]);
	dp[curr_node][lasta][lastb] = ret;
	return ret;
}
int main()
{
int K , R , id , U , W , test;
si(test);
for(int o=1;o<=test;o++)
{
memset(dp , -1 , sizeof(dp));
si(K);si(R);
for(int ln = 1; ln <= K+2 ; ln++){
	si(id);
	dist[id][id] = 0;
	for(int j=1;j<=(K+1);j++){
		si(U);si(W);
		dist[id][U] = W;
	}
}
int st = 0 , en = K+1;
int ans = recur(K , K+1 , K+1) + R*(K+1);
printf("Case %d: %d\n",o , ans);
}
return 0;
}