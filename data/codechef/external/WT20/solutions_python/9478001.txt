// AUTHOR: ARVIND NAIR

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;

#define as(z,x,y) assert(x <=z  && z<= y);
#define s(x)   scanf("%d",&x)
#define rep(a,c)   for ( long int (a)=0; (a)<(c); (a)++)
#define repn(a,b,c)  for ( long int (a)=(b); (a)<=(c); (a)++)
#define repd(a,b,c)  for (  long int (a)=(b); (a)>=(c); (a)--)
#define all(v) (v).begin(),(v).end()
#define fi  first
#define se  second
#define pb  push_back
#define mp  make_pair
#define INF (int)1e9
#define EPS (double)(1e-9)
#define MOD (int)1e9+7
#define M(x,i) memset(x,i,sizeof(x))
#define trace(x)    cout<<#x<<" is "<<x<<"\n"
#define sz(x) (int)(x.size())
#define tr(i) for(typeof(i.begin()) it=i.begin(); it!=i.end();it++)
#define MAXN 1000005

int flag[4*MAXN];
vector<pii> v;

struct node {
  int sum;
  node(int l,int r):sum(0) {}
  node():sum(-1)  {}

}tree[4*MAXN];

void push(int v,int start, int end) {
  
  int mid=(start+end)>>1;
    tree[2*v].sum+=flag[v];
    tree[2*v+1].sum+=flag[v];
    flag[2*v]+=flag[v];
    flag[2*v+1]+=flag[v];

    flag[v]=0;
}

void add(int v,int start, int end,int val) {
  tree[v].sum+=val;
  flag[v]+=val;
}


void build(int v,int start, int end) {

   if(start==end)
    {  tree[v]=node(start,end);
        return;
      }

       int mid=(start+end)>>1;
       build(2*v,start,mid);
       build(2*v+1,mid+1,end);
       tree[v].sum=max(tree[2*v].sum,tree[2*v+1].sum);
    
}

void update(int v,int start, int end, int l, int r, int val)  {

  if(start>r or end<l)
    return;

  if(l<=start and r>=end)
   { add(v,start,end,val);
      return;
    }

      push(v,start,end);
     int mid=(start+end)>>1;
       update(2*v,start,mid,l,r,val);
       update(2*v+1,mid+1,end,l,r,val);

    tree[v].sum=max(tree[2*v].sum,tree[2*v+1].sum);
}

int query(int v, int start, int end, int l, int r)  {

if(l>end or r<start) 
  return 0;

  if(l<=start and r>=end)
    return tree[v].sum;

   push(v,start,end);
   int mid=(start+end)>>1;
       int res1=query(2*v,start,mid,l,r);
       int res2=query(2*v+1,mid+1,end,l,r);

  return max(res1,res2);
  
}

int main()
{ ios_base::sync_with_stdio(false);  cin.tie(0); 

int n; cin>>n;
M(flag,0);
build(1,1,MAXN);

rep(i,n) {

  int x,y; cin>>x>>y;
  --y;
  v.pb(mp(x,y));
  update(1,1,MAXN,x,y,1);
}

vi ans;

 rep(i,n) {
  
  update(1,1,MAXN,v[i].fi,v[i].se,-1);
    int ret=query(1,1,MAXN,1,MAXN);
    if(ret<2)
      ans.pb(i+1);
    update(1,1,MAXN,v[i].fi,v[i].se,1);
    }


    cout<<sz(ans)<<"\n";

    rep(i,sz(ans))
    cout<<ans[i]<<" ";
return 0;
}
