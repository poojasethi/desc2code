import java.io.IOException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
 
class MyScanner{
        BufferedReader br;
        StringTokenizer st;
 
        public MyScanner() {
                br = new BufferedReader(new InputStreamReader(System.in));
        }
 
        boolean hasNext(){
                if(st.hasMoreElements())
                        return true;
                try {
                        st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                        e.printStackTrace();
                }
                return st.hasMoreTokens();
        }
        String next() {
                while (st == null || !st.hasMoreElements()) {
                        try {
                                st = new StringTokenizer(br.readLine());
                        } catch (Exception e) {
                                e.printStackTrace();
                        }
                }
                return st.nextToken().trim();
        }
 
        int nextInt() {
                return Integer.parseInt(next());
        }
 
        double nextDouble() {
                return Double.parseDouble(next());
        }
 
        String nextLine(){
                String str = "";
                try {
                        str = br.readLine();
                } catch (IOException e) {
                        e.printStackTrace();
                }
                return str;
        }
 
        public long nextLong() {
                return Long.parseLong(next());
        }
 
}
class ALMA02 {
    public static void main(String[] args) throws IOException {
        MyScanner ob = new MyScanner();
        long[] p = {0,9,189,2889,38889,488889,5888889,68888889,788888889,8888888889L,98888888889L,1088888888889L,11888888888889L,128888888888889L,1388888888888889L,14888888888888889L,158888888888888889L};
        long[] p2= {0,9,99,999,9999,99999,999999,9999999,99999999,999999999,9999999999L,99999999999L,999999999999L,9999999999999L,99999999999999L,999999999999999L,9999999999999999L,99999999999999999L,999999999999999999L};
        long n,kl,remainder,q,r;
        int pos;        
        String str;
        //n >=p[i] && n < p[i+1]
        try {
            for(int tc = ob.nextInt(); tc > 0; tc--){
            kl = ob.nextLong(); // temp
            n = ob.nextLong();
            for(pos = 0; n>=p[pos];)pos++;
            n = p[pos] - n;
            remainder = n % pos;
            q = n / pos;
            r = p2[pos] - q;
            str = Long.toString(r);
            System.out.println(str.charAt(str.length()-1-(int)remainder));
        }
        return;
        } catch (Exception e) { return;
        }
}
}
 