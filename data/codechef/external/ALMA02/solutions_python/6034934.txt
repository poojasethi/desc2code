import java.io.IOException;
import java.io.InputStream;

public class Main {

    public static void main(String[] args) throws IOException {
        InputReader reader = new InputReader(System.in);
        int T = reader.readInt();
        StringBuilder output = new StringBuilder(20*T);
        for (int t=0; t<T; t++) {
            reader.readInt();
            long K = reader.readLong();
            long answer = solve(1, 1, K);
            output.append(answer).append('\n');
        }
        System.out.print(output);
    }

    static long solve(long digits, long number, long K) {
        long sectionLength = 9*number*digits;
        if (K <= sectionLength) {
            long part = (K-1)/digits;
            number += part;
            K -= part*digits;
            K = digits-K;
            for (int k=0; k<K; k++) {
                number /= 10;
            }
            return number%10;
        } else {
            return solve(digits+1, 10*number, K-sectionLength);
        }
    }

    static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public final int readInt() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res;
        }

        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res;
        }

        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }

}
