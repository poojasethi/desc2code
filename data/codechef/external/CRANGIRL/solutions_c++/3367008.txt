#include<cstdio>
#include<algorithm>
#include<string>
#include<iostream>
#include<vector>
#include<cstring>
#define X first
#define Y second
using namespace std;
//source: geeks for geeks
int found[1000010],pos;
void computeLPSArray(char *pat, int M, int *lps);
void KMPSearch(char *pat, char *txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
    int *lps = (int *)malloc(sizeof(int)*M);
    int j  = 0;
    computeLPSArray(pat, M, lps);
    int i = 0;  
    while(i < N)
    {
      if(pat[j] == txt[i])
      {
        j++;
        i++;
      }
 
      if (j == M)
      {
        found[i-j+1]++;
        j = lps[j-1];
      }
      else if(pat[j] != txt[i])
      {
        if(j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
    free(lps);
}
void computeLPSArray(char *pat, int M, int *lps)
{
    int len = 0;
    int i;
    lps[0] = 0;
    i = 1;
    while(i < M)
    {
       if(pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else
       {
         if( len != 0 )
           len = lps[len-1];
         else
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}
int main()
{
	char t[1000010],p[1000010];
	scanf("%s",t);
	scanf("%s",p);
	int pl=strlen(p);
	int tl=strlen(t);
	KMPSearch(p,t);
	vector< pair<int,int> > v;
	for(int i=1;i<=tl;)
	{
		int c=0;
		int spos=i;
		if(found[i]>0)
		{
			int temp=i;
			while(temp<=tl && found[temp]>0)
			{
				c++;
				found[temp]=-1;
				temp+=pl;
			}
			i=temp-pl+1;
			v.push_back(make_pair(spos,c));
		}
		else
			i++;
	}
	sort(v.rbegin(),v.rend());
	if(v.size()==0)
		printf("-1\n");
	else
	{
		for(int i=0;i<v.size();i++)
			printf("%d %d\n",v[i].X,v[i].Y);
	}
	return 0;
}
