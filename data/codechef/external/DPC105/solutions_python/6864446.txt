#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>

#define s(n) scanf("%d",&n)
#define cmp(a,b)	strcmp(a,b)
#define p(n)	printf("%s ",n );
#define fo(i,a,b) for(i=a;i<b;i++)

int r,c;
int xans, yans;
char a[51][51];

typedef struct _node
{
    int x,y;
    char c;
    struct _node* next;
}node;

typedef struct _list
{
    node* head;
}list;

int Num(char c)
{
    int n=(int)c;
    n<=90?(n-=65):(n-=97);
    return n;
}

list* CreateTable()
{
    int i;
    list* table=(list*)malloc(26*sizeof(list));
    fo(i,0,26)
        table[i].head=NULL;
    return table;
}

node* CreateNode(int x, int y, char c)
{
    node* newn=(node*)malloc(sizeof(node));
    newn->x=x;
    newn->y=y;
    newn->c=c;
    newn->next=NULL;
    return newn;
}

void Add(int x, int y, char c, list* Table)
{
    int num=Num(c);
    node* temp=Table[num].head;
    if(!temp)
        Table[num].head=CreateNode(x,y,c);
    else
    {
        while(temp->next)
            temp=temp->next;
        temp->next=CreateNode(x,y,c);
    }
    return;
}

int Loop(int x, int y, int c1, int c2, char *s, list* T)
{
    int i;
    fo(i,0,strlen(s)){
        if((x>=0)&&(y>=0)&&(x<r)&&(y<c)&&(tolower(a[x][y])==tolower(s[i])))
        {x+=c1;	y+=c2;}
        else
            return 0;
    }
    return 1;
}

int Search(int x, int y, char* s, list* T)
{
    if(Loop(x,y,1,0,s,T))
        return 1;
    else if(Loop(x,y,1,1,s,T))
        return 1;
    else if(Loop(x,y,0,1,s,T))
        return 1;
    else if(Loop(x,y,-1,1,s,T))
        return 1;
    else if(Loop(x,y,-1,0,s,T))
        return 1;
    else if(Loop(x,y,-1,-1,s,T))
        return 1;
    else if(Loop(x,y,0,-1,s,T))
        return 1;
    else if(Loop(x,y,1,-1,s,T))
        return 1;
    return 0;
}

void Solve(char *s, list* Table)
{
    node* temp=Table[Num(s[0])].head;
    while(temp)
    {
        if(Search(temp->x,temp->y,s,Table)){
            xans=temp->x;
            yans=temp->y;
            return;
        }
        temp=temp->next;
    }
    return;
}

int main(int argc, char const *argv[])
{
    int t,i,j,k;
    char s[21][100];
    list* Table;
    
    Table=CreateTable();
    s(r);   s(c);
    while(!((r==0)&&(c==0)))
    {
        fo(i,0,r)
        {
            scanf("%s",a[i]);
            fo(j, 0, c)
                Add(i, j, a[i][j], Table);
        }
        
        s(k);
        fo(i,0,k){
            scanf("%s",s[i]);
            Solve(s[i], Table);
            printf("%d %d\n",xans+1,yans+1);
        }
            printf("\n");  
        s(r);   s(c);
   
    }
    return 0;
}