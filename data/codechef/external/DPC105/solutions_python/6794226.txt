#include<stdio.h>
#include<string.h>
#include<stdlib.h>

char grid_matrix[50][50];
char string_input[50];
int check;
int ascii_value(int);
int right(int ,int );
int left(int,int);
int down(int,int);
int up(int,int);
int search_down_right(int,int);
int search_down_left(int,int);
int search_up_right(int,int);
int search_up_left(int,int);
int word_search(int,int);

int main()
{
    int T;
    int i,j,k,m,n,number;

    while(1)
    {
        scanf("%d %d",&m,&n);

        if(n==0 && m==0)
		break;
        for(j=0;j<m;j++)
        {
            scanf("%s",grid_matrix[j]);
        }
        scanf("%d",&number);
        while(number--)
        {

            int found=0;
            scanf("%s",&string_input);

            for(j=0;j<m;j++)
            {

                for(k=0;k<n;k++)
                {

                    if(found==1)
                    {
                        break;
                    }
                    if(grid_matrix[j][k]==string_input[0])
                    {
                        check=word_search(j,k);
                        if(check==1)
                        {
                            found=1;
                        }
                    }
                    else if(grid_matrix[j][k] - 32 == string_input[0])
                    {
                        check=word_search(j,k);

                        if(check==1)
                        {
                            found=1;
                        }
                    }
                    else if(grid_matrix[j][k] + 32 == string_input[0])
                    {
                        check=word_search(j,k);

                        if(check==1)
                        {
                            found=1;
                        }
                    }
                }
                if(found==1)
                    break;
            }
        }
        printf("\n");
    }
    return 0;
}

int word_search(int x,int y)
{

    if(left(x,y))
		return 1;
    if(right(x,y))
		return 1;
	if(up(x,y))
		return 1;
    if(down(x,y))
		return 1;
    if(search_down_left(x,y))
		return 1;
	if(search_down_right(x,y))
		return 1;
	if(search_up_left(x,y))
		return 1;
    if(search_up_right(x,y))
		return 1;
}

int up(int x,int y)
{
    int length = strlen(string_input);
    int count=0;
    int m=0,n=x,p=y;
    int l;
    for(l=0;l<length;l++)
    {

        if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		x--;
		m++;
    }
    if(count == length)
    {
        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}

int down(int x,int y)
{

    int length = strlen(string_input);

    int count=0;
    int m=0,n=x,p=y;
    int l;
    for(l=0;l<length;l++)
    {
        if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		x++;
		m++;
    }
    if(count == length)
    {

        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}

int left(int x,int y)
{


    int length = strlen(string_input);
    int count=0;
    int m=0,n=x,p=y;
    int l;
    for(l=0;l<length;l++)
    {
        if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		y--;
		m++;
    }
    if(count == length)
    {

        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}

int right(int x,int y)
{
    int length = strlen(string_input);
    int count=0;
    int m=0,n=x,p=y;
    int l;

    for(l=0;l<length;l++)
    {
        if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		y++;
		m++;
    }
    if(count == length)
    {

        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}

int search_down_right(int x,int y)
{
    int length = strlen(string_input);

    int count=0;
    int m=0,n=x,p=y;

    int l;

    for(l=0;l<length;l++)
    {
        if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		x++;
		y++;
		m++;
    }
    if(count == length)
    {

        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}

int search_up_right(int x,int y)
{
    int length = strlen(string_input);
    int count=0;
    int m=0,n=x,p=y;
    int l;

    for(l=0;l<length;l++)
    {
        if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		x--;y++;m++;
    }
    if(count == length)
    {
        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}

int search_down_left(int x,int y)
{
    int length = strlen(string_input);
    int count=0;
    int m=0,n=x,p=y;
    int l;

    for(l=0;l<length;l++)
    {
        if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		x++;
		y--;
		m++;
    }
    if(count == length)
    {
        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}

int search_up_left(int x,int y)
{
    int length = strlen(string_input);
    int count=0;
    int m=0,n=x,p=y;
    int l;

    for(l=0;l<length;l++)
    {
       if(grid_matrix[x][y] == string_input[m])
			count++;
		else if(grid_matrix[x][y] + 32 == string_input[m])
			count++;
		else if(grid_matrix[x][y] -32 == string_input[m])
			count++;
		else
			break;
		x--;
		y--;
		m++;
    }
    if(count == length)
    {
        printf("%d %d\n",n+1,p+1);
        return 1;
    }
    return 0;
}
