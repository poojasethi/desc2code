#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 50

char input[MAX][MAX];
int n = 0, m = 0, w = 0;

inline int validateIndex(int x, int y);
int chkForWord( int i, int j, char *word, unsigned char flag);
unsigned char traversePath (int, int, char*);
int main()
{
//	int n = 0, m = 0, w = 0;
	int i = 0, j = 0, k = 0;
	int x = -1, y = -1;
	unsigned char flag = 0;
//	char input[MAX][MAX];
	char wlist[MAX][MAX];
	while(1)
	{
		memset(input, 0, sizeof(input));
		memset(input, 0, sizeof(wlist));
		scanf("%d%d",&m,&n);
		if(0 == m || 0 == n)
			break;
		for(i = 0; i < m; i++) {
			scanf("%s",input[i]);
			for(j = 0; '\0' != input[i][j]; j++)
				input[i][j] = toupper(input[i][j]);
		}
		scanf("%d",&w);
		for(i = 0; i < w; i++) {
			scanf("%s",wlist[i]);
			for(j = 0; '\0' != wlist[i][j]; j++)
				wlist[i][j] = toupper(wlist[i][j]);
		}
		for(k = 0; k < w; k++) {
			char word[MAX] = {0};
			strncpy(word, wlist[k], MAX-1);
			for(i = 0; i < m; i++) {
				for(j = 0; j < n; j++) {
					if(input[i][j] == word[0]) {
						flag = traversePath(i, j, word); 
						if(0 == flag)
							continue;
						if(0 == chkForWord( i, j, word, flag)) {
							break;
						}
					}
				}
				if(j < n)
					break;
			}
			if(i == m) {
				continue;
			}
			printf("%d %d\n", i+1, j+1);
		}
		printf("\n");

	}
	return 0;
}
int chkForWord( int x, int y, char *word, unsigned char flag)
{
	int len = 0, k = 0;
	int i = 0, j = 0;
	len = strlen(word);
	if(flag & 1) {
		k = 0;
		for(i = x, j = y; 0 == validateIndex(i,j) && k < len; i--, j--, k++) {
                        if(input[i][j] != word[k])
                                break;
                }
                if(k == len)
                        return 0;
	}
	if(flag & 2) {
		k = 0;
                for(i = x, j = y; 0 == validateIndex(i,j) && k < len; i--, k++) {
                        if(input[i][j] != word[k])
                                break;
                }
                if(k == len)
                        return 0;

        }
	if(flag & 4) {
		k = 0;
                for(i = x, j = y; 0 == validateIndex(i,j) && k < len; i--, j++, k++) {
                        if(input[i][j] != word[k])
                                break;
                }
                if(k == len)
                        return 0;

        }
	if(flag & 8) {
		k = 0;
                for(i = x, j = y; 0 == validateIndex(i,j) && k < len; j--, k++) {
                        if(input[i][j] != word[k])
                                break;
                }
                if(k == len)
                        return 0;

        }
	if(flag & 16) {
		k = 0;
                for(i = x, j = y; 0 == validateIndex(i,j) && k < len; j++, k++) {
                        if(input[i][j] != word[k])
                                break;
                }
                if(k == len)
                        return 0;

        }
	if(flag & 32) {
		k = 0;
                for(i = x, j = y; 0 == validateIndex(i,j) && k < len; i++, j--, k++) {
                        if(input[i][j] != word[k])
                                break;
                }
                if(k == len)
                        return 0;

        }
	if(flag & 64) {
		k = 0;
                for(i = x, j = y; 0 == validateIndex(i,j) && k < len; i++, k++) {
                        if(input[i][j] != word[k])
                                break;
                }
                if(k == len)
                        return 0;

        }
	if(flag & 128) {
		k = 0;
		for(i = x, j = y; 0 == validateIndex(i,j) && k < len; i++, j++, k++) {
			if(input[i][j] != word[k])
				break;
		}
		if(k == len)
			return 0;
        }

	return -1;
}

inline int validateIndex(int x, int y)
{
	if((0 > x) || (0 > y) || (m < x) || (n < y) )
		return -1;
	return 0;
}
unsigned char traversePath(int x, int y, char *word)
{
	int len = 0, i = 0, j = 0;
	unsigned char flag = 0;
	int k = 1;

	if(input[x][y] != word[0])
		return 0;
	for(i = -1; i < 2;i++) {
		for(j = -1; j < 2; j++) {
			if((i == j) && (0 == i)) {
				continue;
			}
			if((0 == validateIndex(x + i, y + j))) {
				if(word[1] == input[x+i][y+j]) {
					flag = flag | k;
				}
			}
			k = k * 2;
		}
	}
	return flag;
}
