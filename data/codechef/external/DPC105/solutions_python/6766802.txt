#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node{
	char key[51];
	int found,index;
	struct node *next;
}node;

int m,n;
char ar[51][51];
node words[27];
int output[42];

void strupr(char *str){
	int i=0;
	while(i<strlen(str)){
		str[i]=toupper(str[i]);
		i++;
	}
}


void insert(int i, char *str,int index);
int checkAll(char *str,int r,int c,int len);
int findHorizontal(char *str,int r,int c,int len);
int findRevHorizontal(char *str,int r,int c,int len);
int findVertical(char *str,int r,int c,int len);
int findRevVertical(char *str,int r,int c,int len);
int findRBDiag(char *str,int r,int c,int len);
int findLBDiag(char *str,int r,int c,int len);
int findLTDiag(char *str,int r,int c,int len);
int findRTDiag(char *str,int r,int c,int len);

int main(int argc, char const *argv[])
{
	int t,i,j,l,numW;
	//scanf("%d" , &t);
	while(1){
		for(i=1;i<=26;i++)words[i].next=NULL;
		scanf("%d" , &m);
		scanf("%d" , &n);
		
		if(m==0 && n==0)
			return 0;
		char str[n+1];
		
		for(i=1;i<=m;i++){
			scanf("%s" , str);
			strupr(str);
			for(j=1;j<=n;j++)
				ar[i][j]=str[j-1];
		}
		scanf("%d" , &numW);
		int maxPosL = (m>n)?m:n;
		char word[maxPosL];
		int ind;
		for(i=1;i<=numW;i++){
			scanf("%s" , word);
			strupr(word);
			ind = ((int)word[0])-64;
			insert(ind,word,i);
		}
		int numFind=0;
		for(i=1;i<=m;i++){
			for(j=1;j<=n;j++){
				ind = ((int)ar[i][j])-64;
				node *t=words[ind].next;
				while(t){
					if(!t->found){
						if(checkAll(t->key,i,j,strlen(t->key))){
							t->found=1;
							output[t->index*2-1]=i;
							output[t->index*2]=j;
							numFind++;
						}
						if(numFind==numW)
							goto label;
					}
					t=t->next;
				}	
			}
		}
		label:
		for(i=1;i<=numW;i++){
			printf("%d %d\n",output[2*i-1],output[2*i]);
		}
		printf("\n");
	}
	return 0;
}

void insert(int i, char *str,int index){
	node *temp = &words[i];
	while(temp->next){
		temp=temp->next;
	}
	node *t = (node *)malloc(sizeof(node ));
	strcpy(t->key,str);
	t->next=NULL;
	t->found=0;
	t->index=index;
	temp->next = t;
}

int checkAll(char *str,int r,int c,int len){
	if(findHorizontal(str,r,c,len))
		return 1;
	if(findVertical(str,r,c,len))
		return 1;
	if(findRevVertical(str,r,c,len))
		return 1;
	if(findRevHorizontal(str,r,c,len))
		return 1;
	if(findRBDiag(str,r,c,len))
		return 1;
	if(findLBDiag(str,r,c,len))
		return 1;
	if(findLTDiag(str,r,c,len))
		return 1;
	if(findRTDiag(str,r,c,len))
		return 1;

	return 0;
}

int findHorizontal(char *str,int r,int c,int len){
	if(len>n-c+1)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r][c+i])
			return 0;
		i++;
	}
	return 1;
}
int findRevHorizontal(char *str,int r,int c,int len){
	if(c<len)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r][c-i])
			return 0;
		i++;
	}
	return 1;
}
int findVertical(char *str,int r,int c,int len){
	if(len>m-r+1)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r+i][c])
			return 0;
		i++;
	}
	return 1;
}
int findRevVertical(char *str,int r,int c,int len){
	if(len>r)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r-i][c])
			return 0;
		i++;
	}
	return 1;
}
int findRBDiag(char *str,int r,int c,int len){
	if(len>n-c+1 || len>m-r+1)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r+i][c+i])
			return 0;
		i++;
	}
	return 1;
}

int findLBDiag(char *str,int r,int c,int len){
	if(len>c || len>m-r+1)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r+i][c-i])
			return 0;
		i++;
	}
	return 1;
}

int findLTDiag(char *str,int r,int c,int len){
	if(len>c || len>r)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r-i][c-i])
			return 0;
		i++;
	}
	return 1;
}

int findRTDiag(char *str,int r,int c,int len){
	if(len>n-c+1 || len>r)return 0;
	int i=1;
	while(i<len){
		if(str[i]!=ar[r-i][c+i])
			return 0;
		i++;
	}
	return 1;
}



/*
Test Case:
1
8 11
abcDEFGhigg
hEbkWalDork
FtyAwaldORm
FtsimrLqsrc
byoArBeDeyv
Klcbqwikomk
strEBGadhrb
yUiqlxcnBjf
4
Waldorf
Bambi
Betty
Dagbert


*/

/*
For displaying word list:
for(i=1;i<=26;i++){
	node *t=words[i].next;
	while(t){
		printf("%s\n", t->key);
		t=t->next;
	}
}
*/