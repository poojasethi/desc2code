    #include<stdio.h>
    #include<string.h>
    #include<math.h>
    #include<ctype.h>
    #include<stdlib.h>
    #include<iostream>
    #include<algorithm>
    #include<vector>
    #include<map>
    #include<set>
    #include<queue>
    #include<stack>
    #include<sstream>
    using namespace std;
    #define INF 2000000000
    #define INFLL (1LL<<62)
    #define SS ({int x;scanf("%d", &x);x;})
    #define SSL ({LL x;scanf("%lld", &x);x;})
    #define rep(i,n) for(int i=0;i<(n);i++)
    #define rept(i,m,n) for(int i=(m);i<(n);i++)
    #define ull unsigned long long
    #define lint long long
    #define MX 10000001
     
    typedef struct
    {
    lint x,y;
    }pt;
     
    bool cmp(pt a,pt b)
    {
    if(a.y!=b.y)
    return a.y<b.y;
    return a.x<b.x;
    }
     
    int main()
    {
    int i,j,k,l,n,m,t;
    t=SS;
    while(t--)
    {
    n=SS;
    pt pts[n+1];
    for(i=0;i<n;++i)
    {
    l=SS;
    m=SS;
    pts[i].x=l-1;
    pts[i].y=m;
    }
    sort(pts,pts+n,cmp);
    vector<lint> ysorted(n);
    rep(i,n)
    ysorted[i]=pts[i].y;
    // rep(i,n)
    // {
    // printf("%lld ",ysorted[i]);
    // cout<<pts[i].x<<" "<<pts[i].y<<endl;
    // }
     
    lint dp[n+1];
    rep(i,n+1)
    dp[i]=-111111111;
    dp[0]=pts[0].y-pts[0].x;
    rept(i,1,n)
    {
    int mx=pts[i].x;
    vector<lint>::iterator up=upper_bound(ysorted.begin(),ysorted.begin()+i,mx);
    int upindex=int(up-ysorted.begin());
    if(pts[upindex].y>pts[i].x)
    upindex--;
    lint prevbest=0;
    if(upindex!=-1)
    {
    prevbest=dp[upindex];
    // printf("%d curr x = %lld prev y = %lld dp[prev] = %lld \n",i,pts[i].x,pts[upindex].y,dp[upindex]);
    }
    dp[i]=max(dp[i-1],prevbest+pts[i].y-pts[i].x);
    }
    printf("%lld\n",dp[n-1]);
    }
    return 0;
    } 

