#include <algorithm>
#include <iostream>
#include <sstream>
#include <fstream>
#include <memory>
#include <vector>
#include <string>
#include <bitset>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <climits>
#include <cstring>
#include <cstdio>
#include <cmath>
#define sz(a) ((int)(a).size())
#define foreach(i, v) for(__typeof((v).begin()) i=(v).begin(); i!=(v).end(); i++)
using namespace std;
typedef long long llong;

const int Maxn = 10000+10;
const int INF = 0x7f7f7f7f;
const llong mod = 1000000007;
const double eps = 1e-10;
const double pi = acos(-1.0);
inline int realcmp(double a, double b){ return (a>b+eps) ? 1 : ((a+eps<b)?-1:0); }

struct Item
{
    int x, y;
    Item(){}
    Item(int a, int b): x(a), y(b) {}
    bool operator < (const Item &b) const
    {
        if( y != b.y )
            return y < b.y;
        return x < b.x;
    }
};

vector<Item> vt;
int f[Maxn];

int main()
{
    int cas, n, a, b;
    vector<Item>::iterator ptr;

    scanf("%d", &cas);
    while( cas-- )
    {
        scanf("%d", &n);
        vt.clear();
        memset(f, 0, sizeof(f));
        vt.push_back(Item(0, 0));
        for(int i=0; i<n; i++)
        {
            scanf("%d %d", &a, &b);
            vt.push_back(Item(a-1, b));
        }
        sort(vt.begin(), vt.end());

        for(int i=1; i<=n; i++)
        {
            ptr = lower_bound(vt.begin(), vt.end(), Item(0, vt[i].x));
            while( ptr!=vt.begin() && (ptr->y)>vt[i].x )
                ptr--;
            int id = int(ptr-vt.begin());
            f[i] = max(f[i-1], f[id]+vt[i].y-vt[i].x);
        }
        printf("%d\n", f[n]);
    }

    return 0;
}
