#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <cstring>
#include <cmath>
#include <climits>
#include <algorithm>
#include <cstdio>
using namespace std;

typedef unsigned long long ULL;
typedef long long LL;

#define REP(i,n)      FOR(i,0,n)
#define FOR(i,a,b)    for(int i = a; i < b; i++)
#define ROF(i,a,b)    for(int i=a;i>b;i--)
#define GI 		      ({int t;scanf("%d",&t);t;})
#define GL 		      ({LL t;scanf("%lld",&t);t;})
#define GD 		      ({double t;scanf("%lf",&t);t;})
#define pb 	          push_back
#define mp 	          make_pair
#define MOD 	      1000000007
#define INF	          (int)1e9
#define EPS	          1e-9
#define TR(a,it)      for(typeof((a).begin()) it = (a).begin(); it!=(a).end(); ++it)

struct Order
{
    int start, end, duration, sum;
}ord[10001];

int finish[10001];
bool comp(Order a, Order b) {
    return a.end < b.end;
}

int main()
{
	int T, t = 0, n;
	scanf("%d", &T);
	while (T--){
		scanf("%d", &n);
		REP(i, n){
		    scanf("%d %d", &ord[i].start, &ord[i].end);
		    ord[i].start--;     /// In Ques ith bus starts at xi - 1 and input given is xi
		    ord[i].duration = ord[i].end - ord[i].start;
		}

		sort(ord, ord+n, comp);

		for (int i=0; i<n; i++)
            finish[i] = ord[i].end;

        ord[0].sum = ord[0].duration;
		for (int i=1; i<n; i++){
            int j = 0;
            ord[i].sum = 0;
            int pos = upper_bound(finish, finish+n, ord[i].start) - finish;
            if (pos > 0)
                ord[i].sum = max(ord[i-1].sum, ord[pos-1].sum + ord[i].duration);
            else
                ord[i].sum = max(ord[i-1].sum, ord[i].duration);
		}

		printf("%d\n", ord[n-1].sum);
	}
	return 0;
}

