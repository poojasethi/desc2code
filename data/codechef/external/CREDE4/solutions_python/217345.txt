#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef unsigned long ulong;

struct num
{
	ulong number;
	string padded;
};

bool compare(const num &n1, const num &n2)
{
	return n1.padded>=n2.padded;
}

string pad(const ulong &n,const short &digits)
{
	char str[40];
	sprintf(str,"%ld",n);
	int l=strlen(str);
	char c=n%10+'0';
	return string(str)+string(digits-l,c);	
}

short getDigits( ulong n)
{
	short count=0;
	while(n) 
	{
		n/=10;
		++count;
	}
	
	return count;
}

int main()
{
	short cases;
	scanf("%hd",&cases);
	vector<num> V;
	while(cases--)
	{
		short size,maxdig=0;
		scanf("%hd",&size);
		for(short i=0;i!=size;++i) 
		{
			ulong x;
			scanf("%lu",&x);
			maxdig=max(maxdig,getDigits(x));
			num N={x,""};
			V.push_back(N);
		}

		for(short i=0;i!=size;++i) 
			V[i].padded=pad(V[i].number,maxdig);

		sort(V.begin(),V.end(),compare);

		for(short i=0;i!=size;++i)
			printf("%ld",V[i].number);

		printf("\n");
		V.clear();		

	}
	
	return 0;
}

