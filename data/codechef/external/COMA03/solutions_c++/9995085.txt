#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define vb vector<bool>
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
const int maxn = 1e5 + 10;

int lg;
int lca[maxn][20];
int ans[maxn], tmp[maxn], level[maxn], mark[maxn];
vi adj[maxn];
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}

void dfs(int v, int par, vb& visited)
{
	visited[v] = true;
	lca[v][0] = par;
	level[v] = (par != -1) ? level[par]+1 : 1;
	vi::iterator it;
	for( it=adj[v].begin();it!=adj[v].end();it++ )
	{
		if( !visited[*it] )
			dfs( *it, v, visited);
	}
	
}
void construct_lca( int n)
{
	vb visited(n+1);
	dfs( 1, -1, visited);
	lg = ceil(log2(n));
	int i, j;
	for( i=1;i<=lg;i++ )
	{
		for( j=1;j<=n;j++ )
		{
			if( lca[j][i-1] != -1)
			{
				lca[j][i] = lca[ lca[j][i-1] ] [i-1];
			}
		}
	}
}

int get_lca( int x, int y)
{
	if( level[x] < level[y] )
		swap( x, y);
	int i;
	for( i=lg;i>=0;i-- )
	{
		if( ( lca[x][i] != -1 ) && ( level[ lca[x][i] ] >= level[y] ) )
			x = lca[x][i];
	}
	if( x==y )
		return x;
	for( i=lg;i>=0;i-- )
	{
		if( ( lca[x][i] != -1 ) && ( lca[x][i] != lca[y][i] ) )
		{
			x = lca[x][i];
			y = lca[y][i];
		}
	}
	return lca[x][0];
}

void dfs_final( int v, vb& visited)
{
	visited[v] = true;
	vi::iterator it;
	int sum = mark[v];
	for( it=adj[v].begin();it!=adj[v].end();it++ )
	{
		if ( !visited[*it] )
		{
			dfs_final( *it, visited);
			ans[v] += ans[*it];
			ans[v] %= mod;
			sum += tmp[*it];
			sum %= mod;
		}
	}
	tmp[v] = sum;
	ans[v] += tmp[v];
	ans[v] %= mod;
	//ut << "v=" << v << " ans[v]="<<ans[v]<<"\n";
}
int main()
{
	ios_base::sync_with_stdio(false);
	memset( lca, -1, sizeof(lca) );
	memset( tmp, 0, sizeof(tmp) );
	memset( ans, 0, sizeof(ans) );
	memset( mark, 0, sizeof(mark) );
	int i, u, q, x, y, f, anc, val, n;
	cin >> n >> u >> q;
	for( i=0;i<n-1;i++ )
	{
		cin >> x >> y;
		adj[x].pb( y);
		adj[y].pb( x);
	}
	construct_lca( n);
	while( u--)
	{
		cin >> x >> y >> val;
		anc = get_lca(x, y);
		//cout << anc <<"\n";
		mark[x] += val;
		mark[y] += val;
		mark[anc] -= val;
		if( lca[anc][0] != -1)
		{
				mark[ lca[anc][0] ] -= val;
				if( mark[ lca[anc][0] ] < 0 )
					mark[ lca[anc][0] ] += mod;
				mark[ lca[anc][0] ] %=mod;
		}
		mark[x] %=mod;
		mark[y] %=mod;
		if( mark[ anc] < 0)
		{
			mark[anc] += mod;
		}
		mark[anc] %=mod;
		
	}
	vb visited(n+1);
	dfs_final( 1, visited);
	while( q--)
	{
		cin >> x;
		f = ans[x];
		if( f<0 )
			f += mod;
		f %= mod;
		cout << f <<"\n";
	}
    return 0;
}
