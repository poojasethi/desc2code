#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <cassert>

#define MOD 	       	1000000007
#define LU             	long long unsigned int
#define LL             	long long int

#define REP(i,n)        for(int i = 0; i < n; i++)
#define FOR(i,a,b,k)    for(int i = a; i < b; i+=k)

using namespace std;

int ni(){
    int v;
    scanf("%d", &v);
    return v;
}

LL getIndex(int x, int y){
    if(x == 0 && y == 0) return 0;
    int absx = (x >= 0) ? x:-x;
    int absy = (y >= 0) ? y:-y;
    int N = max(absx, absy);

    LL L = 2*N+1;
    L = L*L - 1;
    LL px_my = L;
    LL mx_my = px_my - 2*N;
    LL mx_py = mx_my - 2*N;
    LL px_py = mx_py - 2*N;

    if(absy == N){
        if(y < 0){
            return px_my - N + x;
        }
        else{
            return mx_py - N - x;
        }
    }
    else{
        if(x < 0){
            return mx_my - N - y;
        }
        else{
            return px_py - N + y;
        }
    }
}

class PrimeChecker{
    public:
    static LU mult(LL a, LL b, LL M){
        LL ret = 0;
        while(b != 0){
            if(b & 1){
                ret = (ret + a) % M;
            }
            a = (a+a) % M;
            b >>= 1;
        }
        return ret;
    }

    static LL mp(LL a, LL b, LL M){
        LL ret = 1;
        while(b != 0){
            if(b & 1){
                ret = mult(ret,a,M);
            }
            a = mult(a,a,M);
            b >>= 1;
        }
        return ret;
    }

    static bool mr(LL n, LL a){
        LL s = 0,d,nm1 = n-1;
        d = nm1;
        while(d > 0 && d % 2 == 0){
            s++;
            d/=2;
        }

        LL ap = mp(a,d,n);
        if(ap == 1) return true;

        for (int i = 0; i < s-1; i++) {
            if (ap == nm1) return true;
            ap = mult(ap,ap,n);
        }
        if (ap == nm1) return true;
        return false;
    }

    static bool isPrime(LL n){
        if(n<29) return n==2 || n==3 || n==5 || n==7 || n==11 || n==13 || n==17 || n==19 || n==23;
		if(!(n&1 && n%3 && n%5 && n%7 && n%11 && n%13 && n%17 && n%19 && n%23)) return 0;
		return mr(n, 2) && mr(n, 1215) &&
			(n==17431 || mr(n, 34862) && (n==3281359 || mr(n, 574237825)));
    }
}PC;

int BFS(int x, int y){
    LL num = getIndex(x, y);
    if(PC.isPrime(num)) return 0;

    int k = 1;
    while(true){
        REP(i,k){
            int d1 = k-i;
            int d2 = i;
            if(PC.isPrime(getIndex(x+d1, y+d2))) return k;
            if(PC.isPrime(getIndex(x-d2, y+d1))) return k;
            if(PC.isPrime(getIndex(x-d1, y-d2))) return k;
            if(PC.isPrime(getIndex(x+d2, y-d1))) return k;
        }
        k++;
    }
}

int main(){
    int t = ni();
    while(t--){
        int x = ni();
        int y = ni();

        printf("%d\n", BFS(x,y));
    }
}
