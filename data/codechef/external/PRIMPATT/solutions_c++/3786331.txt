#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <fstream>
#include<math.h>

using namespace std;

#define fore(i, l, r) for(int i = (l); i < (r); ++i)
#define forn(i, n) fore(i, 0, n)


const static int bits = 19, mask = (1<<19) - 1;
#define UINT_MAX 32767
 
#define NN 4000001
#define RR 2000000



long long a[10];

/*
struct strP
{
	int x;
	int y;
};
*/
int readInt(int l, int r, string name)
{
    int x;
    if(scanf("%d", &x) != 1){
        fprintf(stderr, "Expected int %s in range [%d, %d], but haven't found!", name.c_str(), l, r);
        throw;
    }
    if(!(l <= x && x <= r)){
        fprintf(stderr, "Expected int %s in range [%d, %d], but found %d!", name.c_str(), l, r, x);
        throw;
    }
    return x;
}

/*
long long findBM(long long x)
{
	for(long long i=(long long)x/2;i>=1;i--)
	{
		if(x % i==0)
			return i;
	}
}
*/

/*
void writefile()
{
	ofstream f1;
	f1.open("test.txt");

	for(int r=100;r>=-100;r--)
	{
		for(int c=-100;c<=100;c++)
		{
			//f1<<findNumber(c,r)<<" ";
			f1<<findBM(findNumber(c,r))<<" ";
		}
		f1<<endl;
	}

	f1.close();



}

*/


unsigned long long mul(unsigned long long x, unsigned long long y, unsigned long long M)
{
if (x <= UINT_MAX && y <= UINT_MAX) return x * y % M;
unsigned long long rslt = y * (x & mask) % M;
while (x >>= bits) rslt = (rslt + (y = (y << bits) % M) * (x & mask)) % M;
return rslt;
}


static int test(unsigned long long n, unsigned long long a) {
unsigned long long s, t, nmin1 = n - 1;
int r;
for (s = nmin1, r = 0; !(s & 1); s >>= 1, r++) ;
for(t = a; s >>= 1; )
{
a = mul(a, a, n);
if (s & 1) t = mul(t, a, n);
}
if (t == 1 || t == nmin1) return 1;
while (--r) if ((t = mul(t, t, n)) == nmin1) return 1;
return 0;
}



static int IsPrime(long long n)
{
	if(n<29) return n==2 || n==3 || n==5 || n==7 || n==11 || n==13 || n==17 || n==19 || n==23;
	if(!(n&1 && n%3 && n%5 && n%7 && n%11 && n%13 && n%17 && n%19 && n%23)) return 0;
	return test(n, 2) && test(n, 1215) &&(n==17431 || test(n, 34862) && (n==3281359 || test(n, 574237825)));
}


/*
int IsPrime(long long n)
{

	if(n==0 || n==1 ) return 0;
	if(n==2) return 1;

	long double s=sqrt((long double) n);
	long long dif=(long long)abs(s*s-n);
	long long i2=dif+(long long)s;

	for(long long i=2;i<=i2;i++)
	{
		if(n % i==0)
			return 0;
	}
	return 1;
}
*/



long long findNumber(long long  x,long long y)
{

	long long x0,y0;

	if(x>=0 && y<=0)
	{
		x0=4*x*x-3*x;
		y0=4*y*y-3*y;
		if(x0>=y0)
			return x0+y;
		else
			return y0+x;
	}
	else if(x>=0 && y>=0)
	{

		x0=4*x*x-3*x;
		y0=4*y*y-y;
		if(x0>=y0)
			return x0+y;
		else
			return y0-x;
	}
	else if(x<=0 && y>=0)
	{
		x0=4*x*x-x;
		y0=4*y*y-y;
		if(x0>=y0)
			return x0-y;
		else
			return y0-x;
	}
	else if(x<=0 && y<=0)
	{
		x0=4*x*x-x;
		y0=4*y*y-3*y;
		if(x0>=y0)
			return x0-y;
		else
			return y0+x;
	}


}

/*
strP findRoutate(int x0,int y0,int n,int r,int i)
{
	strP P;

	switch(n)
	{
	case 0:
		P.x=x0-r;
		P.y=y0+i;
		break;
	case 1:
		P.x=x0+i;
		P.y=y0+r;
		break;
	case 2:
		P.x=x0+r;
		P.y=y0-i;
		break;
	case 3:
		P.y=y0-r;
		P.x=x0-i;
		break;
	}
	
	//cout<<"i="<<i<<"     P.x="<<P.x<<" P.y="<<P.y<<endl;

	return P;
}
*/

/*
long long checkCircle(int x,int y,int r)
{
	strP P;
	for(int i=0;i<=r;i++)
	{
		P=findRoutate(x,y,1,r,i);
		if(IsPrime(findNumber(P.x,P.y))==1)
			return r;

		P=findRoutate(x,y,2,r,i);
		if(IsPrime(findNumber(P.x,P.y))==1)
			return r;

		P=findRoutate(x,y,3,r,i);
		if(IsPrime(findNumber(P.x,P.y))==1)
			return r;


		if(i>0 && i<r)
		{
			P=findRoutate(x,y,1,r,-i);
			if(IsPrime(findNumber(P.x,P.y))==1)
				return r;

			P=findRoutate(x,y,2,r,-i);
			if(IsPrime(findNumber(P.x,P.y))==1)
				return r;

			P=findRoutate(x,y,3,r,-i);
			if(IsPrime(findNumber(P.x,P.y))==1)
				return r;
		}

	}

	return -1;

}
*/

/*
long long checkCircle2(int x,int y,int r)
{

	//long long min=r;
	//int f=0;

	for(int dy=-r;dy<=r;dy++)
	{
		if(IsPrime(findNumber(x-r,y+dy))==1)
			return r;
	}

	for(int dy=-r;dy<=r;dy++)
	{
		if(IsPrime(findNumber(x+r,y+dy))==1)
			return r;
	}

	for(int dx=-r;dx<=r;dx++)
	{
		if(IsPrime(findNumber(x+dx,y+r))==1)
			return r;
	}


	for(int dx=-r;dx<=r;dx++)
	{
		if(IsPrime(findNumber(x+dx,y-r))==1)
			return r;
	}
	return -1;
}
*/



long long solve()
{
	long long x=a[0],y=a[1];
	
	

	if(IsPrime(findNumber(x,y))==1)
		return 0;

	for(int d=1;;d++)
	{
		for(int x1=d,y1=0;x1>=0,y1<=d;x1--,y1++)
		{
			if(x1==0 && y1>0)
			{
				if(IsPrime(findNumber(x+x1,y+y1))==1)
					return abs(x1)+abs(y1);
				if(IsPrime(findNumber(x+x1,y-y1))==1)
					return abs(x1)+abs(y1);
			}
			else if(y1==0 && x1>0)
			{
				if(IsPrime(findNumber(x+x1,y+y1))==1)
					return abs(x1)+abs(y1);
				if(IsPrime(findNumber(x-x1,y-y1))==1)
					return abs(x1)+abs(y1);
			}
			else if(x1>0 && y1>0)
			{
				if(IsPrime(findNumber(x+x1,y+y1))==1)
					return abs(x1)+abs(y1);
				if(IsPrime(findNumber(x-x1,y+y1))==1)
					return abs(x1)+abs(y1);
				if(IsPrime(findNumber(x+x1,y-y1))==1)
					return abs(x1)+abs(y1);
				if(IsPrime(findNumber(x-x1,y-y1))==1)
					return abs(x1)+abs(y1);
			}
		}
	}
}

void process_case()
{
	
	forn(i, 2)
	{
        a[i] = readInt(-2000001,  2000001, "a[i]");
    }
  
    cout << solve() << endl;
    
}




int main()
{
	int T;
	scanf("%d", &T);

	
	forn(Ti, T)
	{
		process_case();
	}
	


	//writefile();
	//cout<<solve()<<endl;
	//int cin1;cin>>cin1;
    return 0;
}

