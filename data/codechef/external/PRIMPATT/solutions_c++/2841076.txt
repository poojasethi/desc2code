#include<stdio.h>
#include<cmath>
using namespace std;
const static int bits = 19, mask = (1<<19) - 1;
#define UINT_MAX 32767
 
#define NN 4000001
#define RR 2000000
unsigned long long mul(unsigned long long x, unsigned long long y, unsigned long long M)
{
if (x <= UINT_MAX && y <= UINT_MAX) return x * y % M;
unsigned long long rslt = y * (x & mask) % M;
while (x >>= bits) rslt = (rslt + (y = (y << bits) % M) * (x & mask)) % M;
return rslt;
}
 
static int test(unsigned long long n, unsigned long long a) {
unsigned long long s, t, nmin1 = n - 1;
int r;
for (s = nmin1, r = 0; !(s & 1); s >>= 1, r++) ;
for(t = a; s >>= 1; )
{
a = mul(a, a, n);
if (s & 1) t = mul(t, a, n);
}
if (t == 1 || t == nmin1) return 1;
while (--r) if ((t = mul(t, t, n)) == nmin1) return 1;
return 0;
}
 
static bool prime(unsigned long long n) {
if(n<29) return n==2 || n==3 || n==5 || n==7 || n==11 || n==13 || n==17 || n==19 || n==23;
if(!(n&1 && n%3 && n%5 && n%7 && n%11 && n%13 && n%17 && n%19 && n%23)) return false;
return test(n, 2) && test(n, 1215) &&(n==17431 || test(n, 34862) && (n==3281359 || test(n, 574237825)));
}
long long abs(long long i)
{
	if(i<0) return -i;
	return i;
}
 
 
long long num(long long i,long long j)
{
	if(i==0&&j==0) return 0;
	if(j>(-i)&&(j<i)) return (2*i-1)*(2*i-1)+abs(i+j)-1;
	if((j>=i)&&(j>=(-i))) return 2*j*(2*j-1)+abs(j-i);
	if((j>i)&&(j<=(-i))) return 4*i*i+abs(i+j);
	return 2*j*(2*j-1)+abs(i-j);
}
long long t,i,j;
int main()
{
	scanf("%d",&t);
	while(t--)
	{
		int k=0,a,b;
		bool v=false;
		scanf("%lld%lld",&i,&j);
		if(prime(num(i,j)))
		printf("%d\n",k);
		else{
		for(k=1;;k++)
		{
			for(a=1;a<=k;a++)
			{
				b=k-a;
				if(prime(num(a+i,b+j)))
				{printf("%d\n",k);v=true;break;}
			}
			if(v) break;
			for(a=1-k;a<=0;a++)
			{
				b=k+a;
				if(prime(num(a+i,b+j)))
				{printf("%d\n",k);v=true;break;}
			}
			if(v) break;
			for(a=-k;a<0;a++) 
			{
				b=-k-a;
				if(prime(num(a+i,b+j)))
				{printf("%d\n",k);v=true;break;}
			}
			if(v) break;
			for(a=0;a<k;a++)
			{
				b=-k+a;
				if(prime(num(a+i,b+j)))
				{printf("%d\n",k);v=true;break;}
			}
			if(v) break;
		}
		}
	}
	return 0;
}