#include<cstdio>
#include<cstdlib>
#include<ctime>
#include<limits>
#include<limits.h>
#define MAX 10
using namespace std;
#define ll long long
int arr[50];
ll max(ll a,ll b)
{
  if(a>b)return a;
  return b;
}
ll modulo(ll a,ll b,ll c){
  ll res = 1,i; 
  for(i=0;i<b;i++){
    res=(res*a)%c;
  }
  return res;
}
ll pos(ll x,ll y)
{
  if(abs(x)>abs(y))
    {
      if(x>0)
	return 4*x*x-3*x+y;
      else
	return 4*x*x-x-y;
    }
  else
    {
      if(y>0)
	return 4*y*y-y-x;
      else
	return 4*y*y-3*y+x;
    }
}
/*
bool Miller(long long p,long long a){
  long long s=0;
  p=p-1;
  while(p%2==0)
    {
      s++;
      p/=2;
    }
  long long temp=s;
  long long mod=modulo(a,temp,p);
  while(temp!=p-1 && mod!=1 && mod!=p-1){
    mod=(mod*mod)%p;
    temp *= 2;
  }
  if(mod!=p-1 && temp%2==0){
    return false;
  }
  return true;
}
*/

const static int bits = 19, mask = (1<<bits) - 1;
static unsigned long long mul(unsigned long long x, unsigned long long y, unsigned long long M)
{
if (x <= UINT_MAX && y <= UINT_MAX) return x * y % M;
unsigned long long rslt = y * (x & mask) % M;
while (x >>= bits) rslt = (rslt + (y = (y << bits) % M) * (x & mask)) % M;
return rslt;
}
 
static int Miller(unsigned long long n, unsigned long long a) {
unsigned long long s, t, nmin1 = n - 1;
int r;
for (s = nmin1, r = 0; !(s & 1); s >>= 1, r++) ;
for(t = a; s >>= 1; )
{
a = mul(a, a, n);
if (s & 1) t = mul(t, a, n);
}
if (t == 1 || t == nmin1) return 1;
while (--r) if ((t = mul(t, t, n)) == nmin1) return 1;
return 0;
}
bool prime(int x,int y)
{
  ll t=pos(x,y);
  if(t==2)return 1;
  if(t%2==0 || t%3==0 || t%5==0 || t%7==0 || t%11==0 || t%13==0 || t%17==0 || t%19==0 || t%23==0)
    return 0;
  if(t<29)return 1;
  return Miller(t,2) && Miller(t,1215) && (t==17431 || Miller(t,34862) && (t==3281359 || Miller(t,574237825)));
}
int main()
{
  int x,y,d,t,test;
  scanf("%d",&test);
  while(test--)
    {
      scanf("%d %d",&x,&y);
      for(d=0;;d++)
	{
	  for(t=0;t<=d;t++)
	    if(prime(x-t,y-d+t) || prime(x-t,y+d-t) || prime(x+t,y-d+t) || prime(x+t,y+d-t))
 	      break;
	  if(t<=d)
	    break;
	}
      printf("%d\n",d);
    }
  return 0;
}