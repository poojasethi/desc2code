#include <bits/stdc++.h>
#include <stdlib.h>
using namespace std;
long long mod=1e9+7;
 
typedef long long unsigned llu;
typedef long long int lld;
typedef long ld;
#define sc(a) scanf("%lld",&a)
#define sc2(a,b) scanf("%lld%lld",&a,&b)
#define sc3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scd(a) scanf("%d",&a)
#define scd2(a,b) scanf("%d%d",&a,&b)
#define scd3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define scf(a) scanf("%lf",&a)
#define scf2(a,b) scanf("%lf%lf",&a,&b)
#define scf3(a,b,c) scanf("%lf%lf%lf",&a,&b,&c)
#define prL(a) printf("%lld\n",a)
#define prS(a) printf("%lld ",a)
#define prdL(a) printf("%d\n",a)
#define prdS(a) printf("%d ",a)
#define prfL(a) printf("%lf\n",a)
#define prfS(a) printf("%lf ",a)
#define popcount __builtin_popcountll
#define swap(a,b,t) t=a;a=b;b=t
typedef pair<lld,lld> PA;

#define lim 2100003
#define lim2 3003
map<lld,lld> M,Mn;
inline lld sqr(lld x) { return x * x; }
// map<lld,lld>::iterator it;
// std::ios::sync_with_stdio(false);
// string S[lim],T[lim];
 
// multiset<lld> S;
// set<PA> S;
// string S;
// vector<lld> V[lim];
 
lld dp[2002][2002],A[2002][2002];
// bool dp[5005][5005];
// priority_queue<PA> Q;
// lld A[lim],B[lim],C[lim],D[lim];
lld P[lim];
// char S[lim];


int main(){
	// std::ios::sync_with_stdio(false);
    lld T,i,j,k,l,r,s,a,b,c,d,w,x,y,v,z,m,n,t,p,q,curr,sum,ans,pos,secondMin,countA,indicator;
    sc(T);
    while(T--){
    	sc(n);
    	for(i=1;i<=n;i++){
    		for(j=1;j<=n;j++) sc(A[i][j]);
    	}
    	for(i=0;i<=n;i++) dp[i][0]=dp[0][i]=0;
    	for(i=1;i<=n;i++){
    		for(j=1;j<=n;j++){
    			dp[i][j]=dp[i-1][j]+dp[i][j-1]+A[i][j]-dp[i-1][j-1];
    		}
    	}
    	t=dp[n][n];
    	ans=-1;
    	// c=sqrt(t);
    	for(k=1;k<=max(n,t);k++){
    		if(t%k!=0) continue;
    		else{
    			x=k;
    			y=t/k;
    			if(x>n || y>n) continue;
    		}
    		for(i=1;i<=n;i++){
    			for(j=1;j<=n;j++){
    				if(i+x-1<=n && j+y-1<=n){
    					p=i+x-1;
    					q=j+y-1;
    					z=dp[p][q]-dp[i-1][q]-dp[p][j-1]+dp[i-1][j-1];
    					ans=max(ans,z);
    				}
    				if(i+y-1<=n && j+x-1<=n){
    					p=i+y-1;
    					q=j+x-1;
    					z=dp[p][q]-dp[i-1][q]-dp[p][j-1]+dp[i-1][j-1];
    					ans=max(ans,z);
    				}
    			}
    		}
    	}
    	if(ans==-1) prL(ans);
    	else prL(t-ans);
    	// cout<<t<<ans;
    }
    return 0;
}