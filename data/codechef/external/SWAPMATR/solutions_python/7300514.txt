#include <bits/stdc++.h>

using namespace std;

#define bug(n) printf("bug %d\n", n)

int n;

int isPossible(int count)
{
	if(count == 0)
		return 1;
	for (int i = 1; i <= n; ++i)
	{
		if(i*(count/i) == count && count/i <= n)
			return 1;
	}
	return 0;
}

void constructDP(int a[][1001],int dp[][1001])
{
	for (int i = 0; i <= n; ++i)
	{
		dp[0][i] = 0;
		dp[i][0] = 0;
	}
	for (int i = 1; i <= n; ++i)
	{
		for(int j = 1;j <= n; ++j)
		{
			dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + a[i][j];
		}
	}
}

int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		int a[1001][1001];
		int dp[1001][1001];
		int temp;
		for(int i = 1;i <= n;++i)
		{
			for(int j = 1;j <= n;++j)
			{
				while(!((temp = getchar()) && temp > 32))
				{}
				a[i][j] = temp-48;
			}
		}/*
		for (int i = 0; i <= n; ++i)
		{
			for(int j = 0;j <= n; ++j)
				printf("%d ", a[i][j]);
			printf("\n");
		}*/
		int count = 0;
		for(int i = 1;i <= n;++i)
		{
			for (int j = 1; j <= n; ++j)
			{
				if(a[i][j] == 1)
					count++;
			}
		}
		if(count == 0 || count == n*n)
		{
			printf("0\n");
		}
		else if(isPossible(count))
		{
			constructDP(a,dp);
			/*for (int i = 0; i <= n; ++i)
			{
				for(int j = 0;j <= n; ++j)
					printf("%d ", dp[i][j]);
				printf("\n");
			}*/
			int ans = INT_MAX;
			int x,y;
			for (int i = 1; i <= n; ++i)
			{
				if(count%i == 0 && count/i <= n)
				{
					x = i;
					y = count/i;
					for(int j = 1;j <= n;j++)
					{
						for(int k =1; k <= n;k++)
						{
							if((j+x-1 <= n) && (k+y-1 <= n))
								ans = min(ans, count-dp[j+x-1][k+y-1]+dp[j-1][k+y-1]+dp[j+x-1][k-1]-dp[j-1][k-1]);
			//				bug(1);
			//				printf("%d %d %d\n", j,k,ans);
							if((j+y-1 <= n) && (k+x-1 <= n))
								ans = min(ans, count-dp[j+y-1][k+x-1]+dp[j-1][k+x-1]+dp[j+y-1][k-1]-dp[j-1][k-1]);
			//				bug(2);
			//				printf("%d %d %d\n", j,k,ans);
						}
					}
				}
			}
			printf("%d\n", ans);
		}
		else
			printf("-1\n");
	}
	return 0;
}