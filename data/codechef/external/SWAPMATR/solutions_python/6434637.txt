#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define pb push_back
#define mp make_pair
#define gc getchar_unlocked
#define MAX 1001
int A[MAX][MAX];

int read_int(){
    register int x = 0, c = gc();
    int sign = 1;
    while(c!='-' && (c<48 || c>57) ) c = gc();
    if(c=='-')
        sign = -1, c = gc();
    while(c>=48 && c<=57)
        x = (x<<1) + (x<<3) + c - 48, c = gc();
    return sign*x;
}

int isPossible(int numOnes, int N)
{
    if(numOnes == 0 || numOnes == N*N) return 1;
    //printf("Here\n");
    for(int i = 1; i <= N; i++)
    {
        //printf("i:%d\n",i);
        if(numOnes%i == 0 && i*(numOnes/i) == numOnes && numOnes/i <= N)
        {
            return 1;
        }
    }
    return 0;
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int T,N,count1,R,C;
    T = read_int();
    while(T--)
    {
        N = read_int();
        F(i,1,N) F(j,1,N) A[i][j] = read_int();
        count1 = 0;
        F(i,1,N) F(j,1,N) if(A[i][j] == 1) count1++;
        //printf("Count:%d\n",count1);
        if(isPossible(count1,N) > 0)
        {
            if(count1 == N*N || count1 == 0)
            {
                printf("0\n");
                //printf("========\n");
                continue;
            }
            //printf("R:%d C:%d\n",R,C);
            int dp[N+1][N+1];
            F(i,0,N) dp[i][0] = dp[0][i] = 0;
            dp[1][1] = A[1][1];
            F(j,2,N) dp[1][j] = dp[1][j-1] + A[1][j];
            F(i,2,N) dp[i][1] = dp[i-1][1] + A[i][1];
            F(i,2,N)
            {
                F(j,2,N)
                {
                    dp[i][j] = (dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + A[i][j]);
                }
            }
            /*printf("dp\n");
            F(i,0,N)
            {
                F(j,0,N) printf("%d ",dp[i][j]);
                printf("\n");
            }*/
            int ans = INT_MAX;
            F(r,1,N)
            {
                if(count1%r == 0)
                {
                    R = r;
                    C = count1/r;
                    if(R > N || C > N) continue;
                    F(i,1,N)
                    {
                        F(j,1,N)
                        {
                            if(i+R-1 <= N && j+C-1 <= N)
                                ans = min(ans,count1 + dp[i+R-1][j-1] + dp[i-1][j+C-1] - dp[i-1][j-1] - dp[i+R-1][j+C-1]);
                            if(i+C-1 <= N && j+R-1 <= N)
                                ans = min(ans,count1 + dp[i+C-1][j-1] + dp[i-1][j+R-1] - dp[i-1][j-1] - dp[i+C-1][j+R-1]);
                        }
                    }
                }
            }

            printf("%d\n",ans);
        }
        else
            printf("-1\n");
        //printf("================\n");
    }
    return 0;
}

