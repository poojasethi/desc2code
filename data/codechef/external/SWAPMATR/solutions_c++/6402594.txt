import java.io.IOException;
import java.io.InputStream;

public class Main {

    public static void main(String[] args) throws IOException {
        InputReader reader = new InputReader(System.in);
        int T = reader.readInt();
        for (int t=0; t<T; t++) {
            int N = reader.readInt();
            int[][] A = new int[N+1][N+1];
            int ones = 0;
            for (int r=1; r<=N; r++) {
                for (int c=1; c<=N; c++) {
                    int value = reader.readInt();
                    if (value == 1) {
                        ones++;
                    }
                    A[r][c] = value + A[r][c-1];
                }
            }
            for (int c=1; c<=N; c++) {
                for (int r=1; r<=N; r++) {
                    A[r][c] += A[r-1][c];
                }
            }
            int min = (ones == 0) ? 0 : Integer.MAX_VALUE;
            for (int w=1; w<=ones; w++) {
                if (ones%w == 0) {
                    int h = ones/w;
                    if (w > N || h > N) continue;
                    for (int r=0; r<=N-h; r++) {
                        for (int c=0; c<=N-w; c++) {
                            int value = A[r+h][c+w]-A[r][c+w]-A[r+h][c]+A[r][c];
                            min = Math.min(min, ones-value);
                        }
                    }
                }
            }
            System.out.println((min == Integer.MAX_VALUE) ? -1 : min);
        }
    }

    static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public final int readInt() throws IOException {
            return (int)readLong();
        }

        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
                if (c == -1) throw new IOException();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return negative ? -res : res;
        }

        public final int[] readIntArray(int size) throws IOException {
            int[] array = new int[size];
            for (int i=0; i<size; i++) {
                array[i] = readInt();
            }
            return array;
        }

        public final long[] readLongArray(int size) throws IOException {
            long[] array = new long[size];
            for (int i=0; i<size; i++) {
                array[i] = readLong();
            }
            return array;
        }

        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }

}
