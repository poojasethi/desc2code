#include<iostream>
#include<cstdlib>
#include<cstring>
using namespace std;

void reverse(char str[], int length)
{
	int start = 0;
	int end = length - 1;
	while (start < end)
	{
		swap(*(str + start), *(str + end));
		start++;
		end--;
	}
}

char *itoa(long long num, char *str, int base)
{
	int i = 0;
	bool isNegative = false;
	/* Handle 0 explicitely, otherwise empty string is printed for 0 */
	if (num == 0)
	{
		str[i++] = '0';
		str[i] = '\0';
		return str;
	}
	// In standard itoa(), negative numbers are handled only with
	// base 10. Otherwise numbers are considered unsigned.
	if (num < 0 && base == 10)
	{
		isNegative = true;
		num = -num;
	}
	// Process individual digits
	while (num != 0)
	{
		int rem = num % base;
		str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
		num = num / base;
	}
	// If number is negative, append '-'
	if (isNegative)
		str[i++] = '-';
	str[i] = '\0';				// Append string terminator
	// Reverse the string
	reverse(str, i);
	return str;
}

int main(void)
{
	long long T, N, A, temp, i;
	char W, V;
	int X, Y, Z;
	char *c;
	char C[1000];
	bool cond;

	scanf("%lld", &T);

	while (T--)
	{
		scanf("%lld", &N);
		temp = N;
		scanf("%d %d %d", &X, &Y, &Z);
		cond = false;

		i = 1;

		while (1)
		{
			N = temp * i;
			c = itoa(N, C, 10);
			i++;

			if (strlen(c) > 5)
				break;

			if (c[1] - '0' == X)
			{
				if (c[2] - '0' == Y)
				{
					if (c[3] - '0' == Z)
					{
						W = c[0];
						V = c[4];
						A = N;
						cond = true;
					}
				}
			}
		}

		if (cond == true)
		{
			printf("%c %c %lld\n", W, V, A / temp);
		}
		else
		{
			printf("0\n");
		}
	}

	return 0;
}