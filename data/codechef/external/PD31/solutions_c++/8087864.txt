#include<bits/stdc++.h>
using namespace std;

int n,m;

int p[100009];
int findd(int x)
{
	while(p[x]>0)
		x=p[x];
	return x;
}

bool unionn(int i,int j)
{
    int x=findd(i),y=findd(j);
    if(x==y)
        return false;
    int z=p[x]+p[y];
    if(abs(p[x])>= abs(p[y]))
    {
        p[y]=x;
        p[x]=z;
    }
    else
    {
        p[x]=y;
        p[y]=z;
    }
    return true;
}

int main()
{
	memset(p,-1,sizeof(p));
	scanf("%d%d",&n,&m);
	vector<vector<int> > graph(n+9);
	int x,y;
	for(int i=0;i<m;i++)
	{
		scanf("%d%d",&x,&y);
		graph[x].push_back(y);
	}
	if(m!=n-1)
	{
		cout<<"NO";
		return 0;
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=0;j<graph[i].size();i++)
		{
			if(!unionn(i,graph[i][j]))
			{
				printf("NO");
				return 0;
			}
		}
	}
	int comp=0;
	for(int i=1;i<=n;i++)
		if(p[i]<0)
			comp++;
	if(comp>1)
		cout<<"NO";
	else
		cout<<"YES";
	return 0;
}