#include<bits/stdc++.h>
using namespace std;
list<int> adj[1005];
bool visited[1005];
bool util(int v,int parent)
{
	visited[v]=true;
	list<int>::iterator i;
	for(i=adj[v].begin();i!=adj[v].end();i++)
	{
		if(!visited[*i])
		{
			if(util(*i,v))
			{
				return true;
			}
		}
		else if(*i!=parent)
		{
			return true;
		}
	}
	return false;
}
bool is_tree(int n)
{
	if(util(1,-1))
	{
		return false;
	}
	for(int i=1;i<n;i++)
	{
		if(!visited[i])
		{
			return false;
		}
	}
	return true;
}
int main()
{
	int n,m;
	int x,y;
	scanf("%d%d",&n,&m);
	memset(visited,false,sizeof(visited));
	for(int i=0;i<n;i++)
	{
		adj[i].clear();
	}
	if(n!=m+1)
	{
		printf("NO\n");
		exit(0);
	}
	for(int i=0;i<m;i++)
	{
		scanf("%d%d",&x,&y);
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	is_tree(n)?printf("YES\n"):printf("NO\n");
}