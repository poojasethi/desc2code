#include<bits/stdc++.h>
using namespace std;
class graph
{
    int ver;
    list<int> *adj;
    public:
    graph(int v)
    {
        ver=v;
        adj=new list<int>[v];
    }
    void add_edge(int v,int w)
    {
        adj[v].push_back(w);
        adj[w].push_back(v);
    }
    void bfs(int v,vector<int>& visited)
    {
        int i;
        list<int> queue;
        visited[v]=1;
        queue.push_back(v);
        while(!queue.empty())
        {
            v=queue.front();
            queue.pop_front();
            list<int>::iterator it;
            for(it=adj[v].begin();it!=adj[v].end();it++)
            {
                if(!visited[*it])
                {
                    visited[*it]=1;
                    queue.push_back(*it);
                }
            }
        }
    }
};
    int main()
    {
    	int i,flag,n,m,u,v,c;
    	scanf("%d%d",&n,&m);
    	graph g(n);
    	flag=1;
    	c=m;
    	while(c--)
    	{
    		scanf("%d%d",&u,&v);
    		u--;
    		v--;
    		g.add_edge(u,v);
    		
    	}
    	if(m==n-1)
    	{
    		c=0;
    		vector<int> visited(n);
    		for(i=0;i<n;i++)
    		{
    			if(!visited[i])
    			{
    				c++;
    					if(c>1)
    				{
    					flag=0;
    					break;
    				}
    				g.bfs(i,visited);
    			}
    		}
    	}
    	else
    		flag=0;
    	if(flag)
    		printf("YES");
    	else
    		printf("NO");
        return 0;
    }

