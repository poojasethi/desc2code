#include <iostream>

using namespace std;

//Initialize tree
int binary_tree[0];

//set root = node value
int node(int root){
	root = binary_tree[root];
	return root;
}

int main(){
	//Number of nodes
	int N;
	cin >> N;

	//Create tree with N nodes
	binary_tree[N];

	for (int i = 1; i < N+1; i++){
		binary_tree[i]=i;
	}

	//Number of edges
	int M;
	cin >> M;

	//Check to see if tree with N nodes have N-1 edges, if not print NO
	if (M != N - 1){
		cout << "NO";
		return 0;
	}

	//Each edge contains pair (node_one, node_two)
	int node_1;
	int node_2;

	//For number of edges
	for (int i = 0; i < M; i++){
		cin >> node_1;
		cin >> node_2;

		//If the pair (u,v) is not connected, connect (u,v)
		if (node(node_1) != node(node_2)){
			binary_tree[node(node_1)] = node(node_2);
		}
		//Else is a cycle print NO
		else {
			cout << "NO";
			return 0;
		}

	}

	//Has N-1 edges and no cycles, therefore is a tree. Print YES
	cout << "YES";
	return 0;
}