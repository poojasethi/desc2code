#include<iostream>
#include<list>
using namespace std;
class Graph{
int V;
list<int> *adj;

bool iscyclicutil(int v,bool visited[],int parent);
public:
    Graph(int V);
void addEdge(int v,int w);
bool istree();
};
Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}
void Graph::addEdge(int v,int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);
}
bool Graph::iscyclicutil(int v,bool visited[],int parent)
{
    visited[v]=true;
    list <int>:: iterator i;
    for(i=adj[v].begin();i!=adj[v].end();++i)
    {
        if(!visited[*i])
        {
            if(iscyclicutil(*i,visited,v))
            return true;

        }
        else if(*i!=parent)
            return true;
    }
    return false;
}
bool Graph::istree()
{
    bool *visited=new bool[V];
    for(int i=0;i<V;i++)
        visited[i]=false;
    if(iscyclicutil(0,visited,-1))
        return false;
    for(int i=0;i<V;i++)
    {
        if(visited[i]==false)
            return false;
    }

return true;

}
int main()
{
    int v,e;
    cin>>v>>e;
    Graph g(v);
    for(int i=0;i<e;i++)
    {
        int v,w;
        cin>>v>>w;
        g.addEdge(v-1,w-1);
    }
    if(g.istree())
        cout<<"YES"<<endl;
    else
        cout<<"NO"<<endl;
    return 0;
}
