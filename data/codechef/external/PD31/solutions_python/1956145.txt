def has_cycle(g, visited, u, parent):
        visited[u] = True
        if u in g:
                for v in g[u]:
                        if v not in visited:
                                parent[v] = u
                                if has_cycle(g, visited, v, parent): return True
                        elif parent[u] != v: return True
        return False
def is_tree(g, n, e):
        if e != n-1: return False
        visited = {}
        if has_cycle(g, visited, 1, {}): return False
        for v in xrange(1, n+1):
                if v not in visited: return False
        return True
def mkg():
        n, m = map(int, raw_input().strip().split())
        g = {}
        for i in xrange(m):
                u, v = map(int, raw_input().strip().split())
                if u in g: g[u] = g[u] + [v]
                else: g[u] = [v]
                if v in g: g[v] = g[v] + [u]
                else: g[v] = [u]
        #print g
        if is_tree(g, n, m): print "YES"
        else: print "NO"
mkg()