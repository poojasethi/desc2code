

import java.util.*;
import java.lang.*;
import java.io.*;

public class Main {

    public static void main(String[] args) {
        InputStream inputstream = System.in;
        OutputStream outputstream = System.out;
        InputReader in = new InputReader(inputstream);
        PrintWriter out = new PrintWriter(outputstream);
        int T;
        T = Integer.parseInt(in.readString());
        for (int i = 1; i <= T; i++) {
            Task solver = new Task();
            solver.solve(i, in, out);
        }
        out.close();
    }
}

class Task {

    public void solve(int testno, InputReader in, PrintWriter out) {
        String str = in.readString();
        int B = 0, R = 0, G = 0;
        int posB = -1, posR = -1, posG = -1;
        int minSequence = -1;
        int ans = -1;
        boolean b=false;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == 'B') {
                posB = i;
                B++;
            } else if (str.charAt(i) == 'R') {
                posR = i;
                R++;
            } else if (str.charAt(i) == 'G') {
                posG = i;
                G++;
            }
            if (R > 0 && G > 0 && B > 0) {
                if (posB >= posR && posB >= posG) {
                    if (posR >= posG) {
                        ans = (posB - posR) + (posR - posG) + 1;

                    } else {
                        ans = (posB - posG) + (posG - posR) + 1;
                    }
                } else if (posR >= posB && posR >= posG) {
                    if (posB >= posG) {
                        ans = (posR - posB) + (posB - posG) + 1;

                    } else {
                        ans = (posR - posG) + (posG - posB) + 1;
                    }
                } else {
                    if (posB >= posR) {
                        ans = (posG - posB) + (posB - posR) + 1;

                    } else {
                        ans = (posG - posR) + (posR - posB) + 1;
                    }
                }
                if (b == false) {
                    minSequence = ans;
                    b = true;
                }
                if (minSequence > ans) {
                    minSequence = ans;
                }
                if(minSequence==3){
                    break;
                }
            }
        }
        out.println(minSequence);
    }

}

class InputReader {

    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        if (numChars == -1) {
            throw new InputMismatchException();
        }
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0) {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int readInt() {
        int c = read();
        while (isSpaceChar(c)) {
            c = read();
        }
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9') {
                throw new InputMismatchException();
            }
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c)) {
            c = read();
        }
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public long readLong() {
        return Long.parseLong(readString());
    }

    public double readDouble() {
        return Double.parseDouble(readString());
    }

    public float readFloat() {
        return Float.parseFloat(readString());
    }

    public static boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
}
