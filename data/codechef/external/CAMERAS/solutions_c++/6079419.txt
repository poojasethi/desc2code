#include<bits/stdc++.h>

using namespace std;
long long n,k,arr[100006];

struct Interval
{
    long long start;
    long long end;
};
bool compareInterval(Interval i1, Interval i2)
{  return (i1.start < i2.start)? true: false; }

void mergeIntervals(vector<Interval>& intervals)
{
    //cout<<intervals.size()<<endl;
    if (intervals.size() <= 0)
        return;
    long long c=0,i,j;
    /*for(i=0;i<n;i++)
        cout<<arr[i]<<" ";
    cout<<endl;*/
    // Create an empty stack of intervals
    stack<Interval> s;

    // sort the intervals based on start time
    sort(intervals.begin(), intervals.end(), compareInterval);
    //cout<<intervals.size()<<endl;
        // push the first interval to stack
    s.push(intervals[0]);
    Interval top = s.top();
    //cout<<intervals.size();
   // Start from the next interval and merge if necessary
    for (i = 1 ; i < intervals.size(); i++)
    {
        // get interval from stack top
         top=s.top();
        // if current interval is not overlapping with stack top,
        // push it to the stack
        if (top.end < intervals[i].start)
        {
            s.push( intervals[i] );
        }
        // Otherwise update the ending time of top if ending of current
        // interval is more
        else if (top.end <= intervals[i].end )
        {
            top.end = intervals[i].end;
            s.pop();
            s.push(top);
        }
    }
    // Print contents of stack
    //cout << "\n The Merged Intervals are: ";
    j=0;
    while (!s.empty())
    {
        Interval t = s.top();

       //cout << "[" << t.start << "," << t.end << "]" << " "<<endl;
       for(;j<n;j++)
       {
           if(arr[j] >= t.start && arr[j]<= t.end)
            c++;
           else if(arr[j]<t.start)
                break;
        }
        s.pop();
    }

    printf("%lld\n",c);
    return;
}
void TestCase3()
{
    // Create a set of intervals
    long long i,j;
    for(i=0;i<n;i++)
        cin>>arr[i];
    sort(arr,arr+n);
    reverse(arr,arr+n);

    Interval intvls[k+1];// = { {1,3},{7,9},{4,6},{10,13} };
    for(i=0;i<k;i++)
        cin>>intvls[i].start>>intvls[i].end;

    vector<Interval> intervals(intvls, intvls+k);
    // Merge overlapping inervals and print result
    mergeIntervals(intervals);
}
int main()
{
    cin>>n>>k;
    TestCase3();
    return 0;
}
