#include <iostream>     // std::cout
#include <algorithm>    // std::lower_bound, std::upper_bound, std::sort
#include <vector> 
      // std::vector
      using namespace std;
typedef struct node
{
	int a;
	int b;
}node;
node arr[100005];
bool compare(node x,node y)
{
	if(x.a<y.a)
	return true;
	else
	return false;
}
vector<int> vec;
vector<int>::iterator low,up;
int main () {
	
	int N,K,num,i;
 scanf("%d %d",&N,&K);
 for(i=1;i<=N;i++)
 {
 	scanf("%d",&num);
 	vec.push_back(num);
 }
 sort(vec.begin(),vec.end());
 for(i=1;i<=K;i++)
 {
 	scanf("%d %d",&arr[i].a,&arr[i].b);
}
sort(arr+1,arr+K+1,compare);
int ans=0;
int minx;
for(i=1;i<=K;i++)
{
	//printf("%d %d\n",arr[i].a,arr[i].b);
	if(i==1)
	{
		low=lower_bound(vec.begin(),vec.end(),arr[i].a);
		up=upper_bound(vec.begin(),vec.end(),arr[i].b);
		up--;
		//printf("%d %d\n",up-vec.begin(),low-vec.begin());
		ans+=(up-vec.begin())-(low-vec.begin())+1;
		minx=arr[i].b+1;
	}
	else
	{
		if(arr[i].a>minx)
		minx=arr[i].a;
		if(minx<=arr[i].b)
		{
	      		low=lower_bound(vec.begin(),vec.end(),minx);
		up=upper_bound(vec.begin(),vec.end(),arr[i].b);
		up--;
		//printf("%d %d\n",up-vec.begin(),low-vec.begin());
		ans+=(up-vec.begin())-(low-vec.begin())+1;
		minx=arr[i].b+1;
		}
		
	}
}
printf("%d\n",ans);
  return 0;
}