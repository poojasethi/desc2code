#include <bits/stdc++.h>

using namespace std;

const int maxn = 100100;

struct node{
	int pt, cst;
	bool operator<(const node&n) const{
		if(pt==n.pt)
			return cst<n.cst;
		return (pt<n.pt);
	}
};

node arr[maxn];
vector<pair<int, int> >v;
int cost[maxn], x[maxn], dp[maxn];

int main()
{
	//freopen("input.txt", "r", stdin);
	int t, n, l, d, i, j, k, y, lo, hi, mid, oldk, p, r;
	scanf("%d", &t);
	while(t--){
		v.clear();
		scanf("%d%d%d", &n, &l, &d);
		for(i=1; i<=n; i++)
			scanf("%d%d", &arr[i].pt, &arr[i].cst), dp[i] = INT_MAX;
		dp[0] = x[0] = cost[0] = 0;
		sort(arr+1, arr+n+1);
		for(i=1; i<=n; i++){
			x[i] = arr[i].pt;
			cost[i] = arr[i].cst;
			//cout << x[i] << " " << cost[i] << "\n";
		}
		x[n+1] = l;
		cost[n+1] = 0;
		bool pos = true;
		for(i=1; i<=n+1; i++){
			if(x[i]-x[i-1]>d){
				pos = false;
				break;
			}
		}
		if(!pos){
			printf("NO\n");
			continue;
		}
		v.push_back(make_pair(0, 0));
		for(i=1; i<=n+1; i++){
			//cout << i << " " << v.size() << " ";
			k = (--lower_bound(v.begin(), v.end(), make_pair(i+1, 0)))->second;
			dp[i] = ((x[i]-x[k])<=d && (x[i]-x[k])>=0)?(dp[k]+cost[k]):INT_MAX;
			/*if(dp[i]==INT_MAX){
				pos = false;
				break;
			}*/
			//cout << k << " " << dp[i] << " ";
			for(j=v.size()-1; j>=0; j--){	
				y = v[j].first, oldk = v[j].second;
				p = ((x[y]-x[i])<=d && (x[y]-x[i])>=0)?dp[i]+cost[i]:INT_MAX;
				r = ((x[y]-x[oldk])<=d && (x[y]-x[oldk])>=0)?dp[oldk]+cost[oldk]:INT_MAX;
				//cout << y << " " << oldk << " " << p << " " << r << "\n";
				if(y>i && (p<r))
					v.pop_back();
				else{
					lo = y+1, hi = n+2;
					while(lo<hi){
						mid = (lo+hi)>>1;
						p = ((x[mid]-x[i])<=d && (x[mid]-x[i])>=0)?(dp[i]+cost[i]):INT_MAX;
						r = ((x[mid]-x[oldk])<=d && (x[mid]-x[oldk])>=0)?(dp[oldk]+cost[oldk]):INT_MAX;
						if(p<=r)
							hi = mid;
						else
							lo = mid+1;
					}
					//cout << "T " << hi <<"\n";
					if(hi!=n+2){
						if((x[hi]-x[i])<=d && (x[hi]>=x[i]))
							v.push_back(make_pair(hi, i));
					}
					break;
				}
			}
			//for(j=0; j<v.size(); j++)
			//	cout << "En " << v[j].first << " " << v[j].second << "\n";
			//cout << "\n\n";
			if(v.size()==0)
				v.push_back(make_pair(0, i));
		}
		printf("YES %d\n", dp[n+1]);
	}
	return 0;
}