#include <set>
#include <algorithm>
#include <stdio.h>
using namespace std;

const int N=100002;
int X[N];
int C[N];
int S[N];
pair<int, int> p1[N+1];
set< pair<int, int> > s1;

int main(int argc, char* argv[])
{
    int h,  i, j, t, n, l, d, x, c;
    scanf("%d", &t);
    set< pair<int, int> >::iterator it;
    for(h=0;h<t;h++)
    {
        scanf("%d %d %d", &n, &l, &d);
        for(i=0;i<n;i++)
        {
            scanf("%d %d", &x, &c);
            p1[i]=make_pair(x,c);
        }
        sort(p1,p1+n);
        for(i=0;i<n;i++)
        {
            X[i+1]=p1[i].first;
            C[i+1]=p1[i].second;
        }
        X[n+1]=l;
        bool canreach=true;
        for(i=1;i<=n+1;i++)
        {
            if(X[i]-X[i-1]>d)
            {
                canreach=false;
                break;
            }
        }
        if(canreach)
        {
            if(h) s1.clear();
            int pprev=-1, prev=-1;
            s1.insert(make_pair(0,0));
            for(i=1;i<=n+1;i++)
            {
                int stop=prev;
                for(j=prev+1;j<i;j++)
                {
                    if(X[i]-X[j]<=d)
                    {
                        break;
                    }
                    stop=j;
                }
                prev=stop;
                if(prev!=pprev)
                {
                    for(j=pprev+1;j<=prev;j++)
                    {
                        s1.erase(make_pair(S[j],X[j]));
                    }
                }
                it=s1.begin();
                int v=it->first;
                S[i]=(i<n+1) ? v+C[i] : v;
                s1.insert(make_pair(S[i],X[i]));
                pprev=prev;
            }
            it=s1.begin();
            int v=it->first;
            printf("YES %d\n", v);
        }
        else
        {
            printf("NO\n");
        }
    }
    return 0;
}

