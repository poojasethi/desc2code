#include <iostream>
#include <algorithm>
#include <cstdio>
using namespace std;
#define inf 1000000000

int tree[400001];

bool cmp(pair<int,int> a,pair<int,int> b){
    return a.first<b.first;
}

int query(int t,int i,int j,int l,int r){
    if(r<i||l>j)
        return inf;
    if(l<=i&&j<=r)
        return tree[t];
    int mid=(i+j)/2;
    return min(query(2*t,i,mid,l,r),query(2*t+1,mid+1,j,l,r));
}

void update(int t,int i,int j,int in,int val){
    if(i==j){
        if(in==i)
            tree[t]=min(tree[t],val);
        return;
    }
    int mid=(i+j)/2;
    if(in<=mid)
        update(2*t,i,mid,in,val);
    else
        update(2*t+1,mid+1,j,in,val);
    tree[t]=min(tree[2*t],tree[2*t+1]);
}

int getin(int x,pair<int,int>* arr,int n){
    int low=0,high=n-1,ans=-1;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid].first>=x){
            ans=mid;
            high=mid-1;
        }else
            low=mid+1;
    }
    return ans;
}

int main(){
    int t;
    scanf("%d",&t);
    while(t--){
        int n,l,d;
        scanf("%d%d%d",&n,&l,&d);
        bool g=true;
        for(int i=0;i<=400000;i++)
            tree[i]=inf;
        pair<int,int> arr[n+1];
        int dp[n+1];
        for(int i=0;i<n;i++)
            scanf("%d%d",&arr[i].first,&arr[i].second);
        arr[n].first=l;
        arr[n].second=0;
        sort(arr,arr+n+1,cmp);
        for(int i=0;i<=n;i++){
            if(arr[i].first<=d)
                dp[i]=0;
            else{
                int in=getin(arr[i].first-d,arr,n);
                if(in==i||in==-1){
                    g=false;
                    break;
                }
                dp[i]=query(1,0,n,in,i-1);
            }
            update(1,0,n,i,dp[i]+arr[i].second);
        }
        if(!g)
            printf("NO\n");
        else{
            if(dp[n]>=inf)
                printf("NO\n");
            else
                printf("YES %d\n",dp[n]);
        }
    }
}
