// A C / C++ program for Dijkstra's single source shortest path algorithm.
// The program is for adjacency matrix representation of the graph
# include<iostream>
#include <stdio.h>
#include <limits.h>
using namespace std;
// Number of vertices in the graph
# define N 1001

// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[],int V)
{
   // Initialize min value
   int min = INT_MAX, min_index;

   for (int v =1; v <=V; v++)
     if (sptSet[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;

   return min_index;
}

// A utility function to print the constructed distance array
int printSolution(int dist[],int de)
{
    /*
   printf("Vertex   Distance from Source\n");
   for (int i = 0; i < V; i++)
      printf("%d \t\t %d\n", i, dist[i]);*/
      if(dist[de]==INT_MAX)
        cout<<"-1"<<endl;
      else
      cout<<(dist[de]*10)<<endl;
}

// Funtion that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[N][N], int src,int des,int V)
{
     int dist[V+1];     // The output array.  dist[i] will hold the shortest
                      // distance from src to i

     bool sptSet[V+1]; // sptSet[i] will true if vertex i is included in shortest
                     // path tree or shortest distance from src to i is finalized

     // Initialize all distances as INFINITE and stpSet[] as false
     for (int i =1; i <=V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

     // Distance of source vertex from itself is always 0
     dist[src] = 0;

     // Find shortest path for all vertices
     for (int count =1; count <=V; count++)
     {
       // Pick the minimum distance vertex from the set of vertices not
       // yet processed. u is always equal to src in first iteration.
       int u = minDistance(dist, sptSet,V);

       // Mark the picked vertex as processed
       sptSet[u] = true;

       // Update dist value of the adjacent vertices of the picked vertex.
       for (int v =1; v <=V; v++)

         // Update dist[v] only if is not in sptSet, there is an edge from
         // u to v, and total weight of path from src to  v through u is
         // smaller than current value of dist[v]
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }

     // print the constructed distance array
     printSolution(dist,des);
}

// driver program to test above function
int main()
{

    int t,k,s,d,p,j;
    int ver;
    cin>>t;
    while(t--)
    {
        int graph[N][N]={0};
        cin>>ver>>k;
        int a,b,c,i;
        for(i=0;i<k;i++)
        {
            cin>>a>>b>>c;
            graph[a][b]=c;
        }
        for(i=1;i<=ver;i++)
        {
            cin>>p;
            for(j=1;j<=ver;j++)
            {
                if(graph[j][i]>p)
                    graph[j][i]=graph[j][i]-p;
            }
        }
        cin>>s>>d;
        dijkstra(graph,s,d,ver);

    }
    return 0;
}
