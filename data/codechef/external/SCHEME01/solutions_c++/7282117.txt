/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/
 
#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define ff first
#define ss second
#define mkp make_pair
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;
#define pii pair<int, int>
#define get getchar_unlocked
#define inf 1000000000
inline int scan()
{
    int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n*s;
}
 
/*void print(int X)
{
  if(X<0) { putchar_unlocked('-');  X=-X;  }
  int Len=0,Data[10];
  while(X) { Data[Len++]=X%10; X/=10; }
  if(!Len) Data[Len++]=0;
  while(Len--) putchar_unlocked(Data[Len]+48);
}*/
 
void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}
 
struct comp {
    bool operator() (const pii &a, const pii &b) {
        return a.second > b.second;
    }
};
vector< pii >g[1005];
int D[1005];
bool F[1005];
int P[1005];
int n, m;
 
int dijikstra(int starting, int ending)
{
	priority_queue< pii, vector<pii>, comp > Q;
	for(int i = 1; i <= n; i++) {
		D[i] = inf;
	}
	D[starting] = 0;
	Q.push(mkp(starting, 0));
	
	while(!Q.empty()) {
		int u = Q.top().first;
		Q.pop();
		if(u == ending) {
			return D[ending];
		}
		if(F[u]) continue;
		int sz = g[u].size();
		for(int i = 0; i < sz; i++) {
			int v = g[u][i].ff;
			int w = g[u][i].ss;
			if(w > P[v]) w -= P[v];
			if(!F[v] && D[v] > D[u] + w) {
				D[v] = D[u] + w;
				Q.push(mkp(v, D[v]));
			}
		}
		F[u] = 1; //Done with this vertex
	}
	return -1;
}
 
void solve()
{
	//clearing step
	for(int i = 0; i < 1005; i++) g[i].clear();
	for(int i = 0; i < 1005; i++) F[i] = false;
	n, m;
	n = scan(); m = scan();//s(n); s(m);
	rep(i, m) {
		int u, v, c;
		u = scan(); v = scan(); c = scan();//s(u); s(v); s(c);
		g[u].push_back(mkp(v, c));
	}
	rep(i, n) {
		int p; p = scan();//s(p);
		P[i + 1] = p;
	}
	int starting, ending;
	starting = scan(); ending = scan();//s(starting); s(ending);
	int ans = dijikstra(starting, ending);
	if(ans == -1) {
		puts("-1");
	}
	else {
		printf("%lld\n", (1LL * ans * 10));
	}
}
 
int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
 