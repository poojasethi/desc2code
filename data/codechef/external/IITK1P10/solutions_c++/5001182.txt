#include<bits/stdc++.h>
#define N 1000001
using namespace std;
 
int tree[N];
long long a[200001];
 
int read(int x) {
	int sum=0;
	while (x>0) {
		sum+=tree[x];
		x-=(x&(-x));
	}
	return sum;
}
 
void update(int x,int val) {
	while (x<=N) {
		tree[x]+=val;
		x+=(x&(-x));
	}
}
 
vector<int> g[200001];
int tin[200001],tout[200001],timer;
int visited[200001];
void dfs(int u) {
	visited[u]=true;
	int i,v;
	tin[u]=++timer;
	for (i=0;i<g[u].size();i++) {
		v=g[u][i];
		if (visited[v]==false) {
			dfs(v);
		}
	}
	tout[u]=++timer;
}
 
 
 
int main() {
	int n,q,i,j,k,u,v;
	scanf("%d %d",&n,&q);
	for (i=0;i<n-1;i++) {
		scanf("%d %d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	memset(visited,false,sizeof(visited));
	timer=0;
	dfs(1);
	for (i=1;i<=n;i++) {
		scanf("%lld",&a[i]);
		if (a[i]==0) {
			update(tin[i],1);
		}
	}
	char s[1001];
	long long x;
	while (q--) {
		scanf("%s",s);
		if (s[0]=='Q') {
			scanf("%d",&u);
			printf("%d\n",read(tout[u])-read(tin[u]-1));
		}
		else {
			scanf("%d %lld",&u,&x);
			if (a[u]==0 && x!=0) {
				update(tin[u],-1);
				a[u]+=x;
			}
			else {
				if (x==0) continue;
				else {
					a[u]+=x;
					if (a[u]==0) {
						update(tin[u],1);
					}
				}
			}
		}
	}
	return 0;
}
 