#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <cassert>

using namespace std;

#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define S(x) 			scanf("%d",&x)
#define all(c) 			(c).begin(),(c).end() 
#define sz(c) 			int((c).size())
#define pb 				push_back
#define present(c,x) 	((c).find(x) != (c).end()) 
#define cpresent(c,x) 	(find(all(c),x) != (c).end())
#define rep(i,x,y) 		for(int i = x; i < y; i++)
#define REV(i,x,y) 		for(int i = x; i >= y; i--)
#define foreach(c,itr)	for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define FILL(a,v) 		memset(a,v,sizeof(a))
#define debug(args...)	{dbg,args; cerr<<endl;}
#define FF 				first
#define SS 				second 
//#define R(x) 			((rand()%x) + 1)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

struct _debugger
{
	template<typename T> _debugger& operator , (const T& v)
	{	
		cerr<<v<<" ";
		return *this;
	}
} dbg;
 
void debugarr(int * arr,int n)
{
	cout<<"[";
	for(int i=0;i<n;i++) cout<<arr[i]<<" ";
	cout<<"]"<<endl;
}

/* ------------------------Main Code----------------------- */
const int MAX = 100001;

vi g[MAX];
int tin[MAX], tout[MAX], vis[MAX], tm = 1;
int BIT[4*MAX];
LL A[MAX];

void dfs(int c)
{
	vis[c] = 1;
	tin[c] = tm++;
	rep(i,0,sz(g[c])) if(!vis[g[c][i]]) dfs(g[c][i]);
	tout[c] = tm++;
}

void update(int idx, int val)
{
	while(idx < MAX){
		BIT[idx] += val;
		idx += idx & -idx;
	}
}

int query(int idx)
{
	int res = 0;
	while(idx > 0){
		res += BIT[idx];
		idx -= idx & -idx;
	}
	return res;
}

int main()
{
	int n, q;
	S(n); S(q);
	rep(i,0,n-1){
		int x, y;
		S(x); S(y);
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(1);
	rep(i,1,n+1){
		scanf("%lld",&A[i]);
		if(A[i] == 0) update(tin[i], 1);
	}
	while(q--){
		char ch;
		cin >> ch;
		//debug(ch);
		if(ch == 'Q'){
			int x; S(x);
			printf("%d\n",query(tout[x]) - query(tin[x]-1));
		}
		else if(ch == 'U'){
			int x, y;
			S(x); S(y);
			if(A[x] == 0) update(tin[x],-1);
			A[x] += y;
			if(A[x] == 0) update(tin[x],1);
		}
	}
	return 0;
}