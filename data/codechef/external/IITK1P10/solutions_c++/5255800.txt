#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
typedef long double ld;

#define EPSILON 1e-12
struct BIT {
	vector<long long> v;
	BIT(int s) {
		resize(s);
	}
	void clear() {
		v.clear();
	}
	BIT() {
	}
	void resize(int s) {
		s = 1 << (int) ceil(log(1.0 * s) / log(2.) + EPSILON);
		v.resize(s);
	}
	long long get(int i) {
		i++;
		long long r = 0;
		while (i) {
			r += v[i - 1];
			i -= i & -i;
		}
		return r;
	}
	void add(int i, long long val) {
		i++;
		while (i <= (int) v.size()) {
			v[i - 1] += val;
			i += i & -i;
		}
	}
	int find(long long val) {
		int s = 0;
		int m = v.size() >> 1;
		while (m) {
			if (v[s + m - 1] < val)
				val -= v[(s += m) - 1];
			m >>= 1;
		}
		return s;
	}
};

vector<int> v1, v2;
vector<vector<int> > adjL;
vector<ll> val;

void dfs(int cur, int par, int& ind) {
	v1[cur] = ind++;
	for (int i = 0; i < adjL[cur].size(); ++i) {
		int nxt = adjL[cur][i];
		if (nxt == par)
			continue;
		dfs(nxt, cur, ind);
	}
	v2[cur] = ind++;
}

void updateValue(int i, int v, BIT& bit) {
	bit.add(v1[i]+1, v);
	bit.add(v2[i]+1, v);
}

int main() {
#ifndef ONLINE_JUDGE
//	freopen("1.in", "rt", stdin);
//freopen("1.out","wt",stdout);
#endif
	int N, Q;
	cin >> N >> Q;
	adjL.resize(N);
	for (int i = 0; i < N-1; ++i) {
		int a, b;
		cin >> a >> b;
		--a;--b;
		adjL[a].push_back(b);
		adjL[b].push_back(a);
	}
	int ind = 0;
	v1.resize(N);
	v2.resize(N);
	val.resize(N);
	dfs(0, -1, ind);
	BIT bit(N*2);
	for (int i = 0; i < N; ++i) {
		cin >> val[i];
		if (val[i] == 0) {
			updateValue(i, 1, bit);
		}
	}
	for (int I = 0; I < Q; ++I) {
		char c;
		int i;
		cin >> c >> i;
		--i;
		if (c == 'U') {
			ll v;
			cin >> v;
			ll ns = val[i] + v;
			if (val[i] == 0 && ns != 0) {
				updateValue(i, -1, bit);
			}
			if (val[i] != 0 && ns == 0) {
				updateValue(i, 1, bit);
			}
		} else {
			ll t1 = bit.get(v2[i]+1);
			ll t2 = bit.get(v1[i]);
			cout << (t1-t2)/2 << endl;
		}
	}
	return 0;
}
