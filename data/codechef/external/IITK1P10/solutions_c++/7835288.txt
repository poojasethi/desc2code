
#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi  vector<int>
#define pb  push_back
#define mp  make_pair
#define M(a,x) memset(a,x,sizeof(a))
#define sci(x) scanf("%d",&x);
#define scl(x) scanf("%lld",&x);
#define scs(x) scanf("%s",x);
#define print(x) printf("%d",x);
#define nl printf("\n")
#define printl(x) printf("%lld",x)
#define F(i,a,n) for(int i=a;i<n;i++)
#define INF 100000000000000000LL
#define LL long long

const int N=1e5+5;
LL a[N];
LL tree[N];
LL subtree[N];
LL depth[N];
LL pos[N];
vector<int> adj[N];
int cnt;
int visited[N];
inline void update(int idx,LL val) {
    while(idx<N-1) {
	tree[idx]+=val;
	idx+=idx&-idx;
    }
}
LL query(int idx) {
    LL sm=0;
    while(idx>0) {
	sm+=tree[idx];
	idx-=(idx&-idx);
    }
    return sm;
}
inline void dfs(int u) {
    visited[u]=1;
    subtree[u]=1;
    F(i,0,adj[u].size()) {
	int v=adj[u][i];
	if(!visited[v]) {
	    depth[v]=1+depth[u];
	    dfs(v);
	    subtree[u]+=subtree[v];
	}
    }
    pos[u]=cnt--;
}
int main() {
    int n,q;sci(n);sci(q);
    F(i,0,n-1) {
	int x,y;sci(x);sci(y);
	adj[x].pb(y);
	adj[y].pb(x);
    }
    cnt=n;
    dfs(1);
    F(i,1,n+1) {
	scanf("%lld",&a[i]);
	if(a[i]==0)
	    update(i,1);
    }
    char s[2];
    while(q--) {
	scanf("%s",s);
	if(s[0]=='U') {
	    int x,y;sci(x);sci(y);
	    if(a[x]+y==0 && y!=0) {
		update(pos[x],1);
	    }
	    if(a[x]+y!=0 && a[x]==0) {
		update(pos[x],-1);
	    }
	    a[x]=y;
	}
	if(s[0]=='Q') {
	    int x;sci(x);
	    printf("%lld\n",query(pos[x]+subtree[x])-query(pos[x]-1));
	}
    }
}
