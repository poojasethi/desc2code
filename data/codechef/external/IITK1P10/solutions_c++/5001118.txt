#include<bits/stdc++.h>
#include<string>
using namespace std;
 
struct node
{
	long long int val;
	long long int subzero;
	int parent;
	vector<int> children;
}	;
 
typedef struct node tp;
 
int main()
{
	int n,q;
	cin>>n>>q;
 
	tp tree[n+1];
 
	tree[1].parent=1;
	
	int i,j;
	int tempa,tempb;
 
	vector<int> nodes[n+1];
 
	for(i=0;i<n-1;i++)
	{
		scanf("%d %d",&tempa,&tempb);
		nodes[tempa].push_back(tempb);
		nodes[tempb].push_back(tempa);
	}
 
	queue<int> bfs;
	
	bfs.push(1);
	bool visited[n+1];
 
	memset(visited,0,sizeof(visited));
	visited[1]=true;
 
	while(bfs.empty()==false)
	{
		int front=bfs.front();
		
		for(i=0;i<(nodes[front]).size();i++)
		{
			if(visited[nodes[front][i]]==true) continue;
 
			(tree[front].children).push_back(nodes[front][i]);
			tree[nodes[front][i]].parent=front;
			visited[nodes[front][i]]=true;
 
			bfs.push(nodes[front][i]);
		}
		bfs.pop();
	}
/*
	for(i=1;i<=n;i++)
	{
		cout<<tree[i].parent<<endl;
	}
	cout<<endl;
	for(i=1;i<=n;i++)
	{
		for(j=0;j<tree[i].children.size();j++)
		{
			cout<<(tree[i].children)[j]<<" ";
		}
		cout<<endl;
	}
*/
	for(i=1;i<=n;i++)
	{
		scanf("%lld",&(tree[i].val));
	}
 
	stack<int> dfs;
 
	dfs.push(1);
 
	memset(visited,0,sizeof(visited));
 
	while(dfs.empty()==false)
	{
		int top=dfs.top();
 
		if(visited[top]==false)
		{
			visited[top]=true;
 
			for(i=0;i<(tree[top].children).size();i++)
			{
				dfs.push((tree[top].children)[i]);
			}
		}
 
		else if(visited[top]==true)
		{
			tree[top].subzero=0;
 
			if(tree[top].val==0)
			{
				tree[top].subzero=1;
			}
 
			for(i=0;i<(tree[top].children).size();i++)
			{
				(tree[top].subzero)+=tree[((tree[top].children)[i])].subzero;
			}
 
			dfs.pop();
		}
	}
 
	string tpe;
	long long int init;
 
	for(i=0;i<q;i++)
	{
		cin>>tpe;
 
		if(tpe=="Q")
		{
			cin>>tempa;
			cout<<tree[tempa].subzero<<endl;
		}
 
		else
		{
			cin>>tempa>>tempb;
			
			init=tree[tempa].val;
			tree[tempa].val+=tempb;
 
			if(init!=0 && tree[tempa].val==0)
			{
				tree[tempa].subzero++;
			
				while(tempa!=1)
				{
					tempa=tree[tempa].parent;
 
					tree[tempa].subzero++;
				}
			}
 
			else if(init==0 && tree[tempa].val!=0)
			{
				tree[tempa].subzero--;
			
				while(tempa!=1)
				{
					tempa=tree[tempa].parent;
 
					tree[tempa].subzero--;
				}
			}
		}
	}
 
	return 0;
}
 