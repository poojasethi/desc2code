#include <bits/stdc++.h>
#define MAX 100005
using namespace std;

// fast input
template<typename T>
inline void fi(T *a)
{
 register char c=0;
 while (c<33) c=getchar_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}


vector <int> v[MAX];
int actual[MAX];
int intime[MAX];
long long A[MAX];
int outtime[MAX];
int tree[4*MAX];
int timer;

void dfs(int curr, int prev)
{
    actual[timer] = curr;
    intime[curr] = timer++;
    for ( int i = 0; i < (int)v[curr].size(); i++ ) {
        if ( v[curr][i] == prev ) continue;
        dfs(v[curr][i], curr);
    }
    outtime[curr] = timer;
}

void build(int where, int left, int right)
{
    if ( left > right ) return;
    if ( left == right ) {
        tree[where] = (A[actual[left]] == 0);
        return;
    }
    int mid = (left+right)/2;
    build(where*2, left, mid);
    build(where*2+1, mid+1, right);
    tree[where] = tree[where*2] + tree[where*2+1];
}

void update(int where, int left, int right, int idx, long long val)
{
    if ( left > right || left > idx || right < idx ) return;
    if ( left == right ) {
        A[actual[left]] += val;
        tree[where] = (A[actual[left]] == 0);
        return;
    }
    int mid = (left+right)/2;
    update(where*2, left, mid, idx, val);
    update(where*2+1, mid+1, right, idx, val);
    tree[where] = tree[where*2] + tree[where*2+1];
}

int query(int where, int left, int right, int i, int j)
{
    if ( left > right || left > j || right < i ) return 0;
    if ( left >= i && right <= j ) return tree[where];
    int mid = (left+right)/2;
    return query(where*2, left, mid, i, j) + query(where*2+1, mid+1, right, i, j);
}

int main()
{
    int n,q,x,y;
    char str[11];
    timer = 0;

    fi(&n), fi(&q);
    for ( int i = 0; i < n-1; i++ ) {
        fi(&x), fi(&y);
        x--, y--;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    for ( int i = 0; i < n; i++ ) fi(&A[i]);
    dfs(0,-1);
    build(1,0,n-1);
    while ( q-- ) {
        scanf("%s", str);
        if ( str[0] == 'Q' ) {
            fi(&x);
            x--;
            printf("%d\n",query(1,0,n-1,intime[x],outtime[x]-1));
        }
        else {
            fi(&x), fi(&y);
            x--;
            update(1,0,n-1,intime[x],(long long)y);
        }
    }
    return 0;
}
