#include <cstdio>
#include<vector>
#include<string.h>
#include<cstring>
#include<iostream>
using namespace std;
#define max 100001
int tree[max],tim,A[max],tin[max],tout[max],visited[max],Val[max];
vector<int> G[max];
int query(int idx)
{
	int sum=0;
	while(idx>0)
	{
		sum+=tree[idx];
		idx-=(idx & -idx);
	}
	return sum;
}
void update(int idx,int val)
{
	while(idx<=max)
	{
		tree[idx]+=val;
		idx+=(idx & -idx);
	}
}
void dfs(int node)
{
	tin[node]=tim++;
	visited[node]=1;
	int i,v;
	for(i=0;i<G[node].size();i++)
	{
		v=G[node][i];
		if(!visited[v])
			dfs(v);
	}
	tout[node]=tim;
}
int main() {
	int n,q,i,j,k,a,b,u,v;
	string c;
	scanf("%d%d",&n,&q);	
	for(i=1;i<n;i++)
	{
		scanf("%d%d",&a,&b);
		G[a].push_back(b);
		G[b].push_back(a);
	}
	memset(visited,0,sizeof(visited));
	memset(tree,0,sizeof(tree));
	dfs(1);
	for(i=1;i<=n;i++)
	{
		scanf("%d",&Val[i]);
		if(Val[i]==0)
		{
			b=tin[i];
			update(b,1);
		}
	}
	for(i=1;i<=q;i++)
	{
		cin>>c;
		if(c=="U")
		{
			scanf("%d%d",&u,&v);
			if(v!=0)
			{
				if(Val[u]==0)
					update(tin[u],-1);
				Val[u]+=v;
				if(Val[u]==0)
					update(tin[u],1);
			}
		}
		if(c=="Q")
		{
			scanf("%d",&u);
			printf("%d\n",query(tout[u])-query(tin[u]-1));
		}
	}
	return 0;
}
