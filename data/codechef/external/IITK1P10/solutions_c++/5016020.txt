#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include <math.h>

using namespace std;

typedef long long LL;

vector<int> v[100005];
int visited[100005];
int len[100005];
int st[100005];
LL val1[100005];
int val[100005];
int n;

LL BIT[100005];


void update(int idx,int value,int N)  // idx is 0 based
{
    ++idx;
        while(idx<=N)
        {
            BIT[idx] += value;
            idx += (idx & -idx);
        }
        return;
}


int query(int l, int r){	// l, r are 0 based
	r += 1;
	int ans = 0;
	while(r > 0){
		ans += BIT[r];
		r -= (r & -r);
	}
	while(l > 0){
		ans -= BIT[l];
		l -= (l & -l);
	}
	return ans;
}


int dfs(int x,int &s)
{
    val1[s] = val[x];
    visited[x]=1;
    st[x] = s++;


    int sz=1;
    for(int i=0;i<v[x].size();++i)
    {
        int c = v[x][i];
        if(visited[c]==0)
        {
               len[c] =  dfs(c,s);
               sz += len[c];
        }
    }

    return sz;

}


int main()
{
    memset(visited,0,sizeof(visited));

int q;
cin>>n>>q;

for(int i=1;i<n;++i)
{
    int a,b; cin>>a>>b;
    --a;
    --b;
    v[a].push_back(b);
    v[b].push_back(a);
}

for(int i=0;i<n;++i)
{
        cin>>val[i];
}

int s=0;

len[0] = dfs(0,s);

   // cout<<endl;

    //for(int i=0;i<n;++i) cout<<"i = "<<i<<" len[i] = "<<len[i]<<endl;
    // for(int i=0;i<n;++i) cout<<"i = "<<i<<" st[i] = "<<st[i]<<endl;
    //  for(int i=0;i<n;++i) cout<<"i = "<<i<<" val1[i] = "<<val1[i]<<endl;


    memset(BIT,0,sizeof(BIT));

    for(int i=0;i<n;++i)
    {
        if(val1[i]==0) update(i,1,n);
    }



for(int i=0;i<q;++i)
{
    char ch[2]; cin>>ch;

    if(ch[0] == 'U')
    {
        int u,v; cin>>u>>v;
        --u;

        u = st[u];

        val1[u] += (LL)v;

        if(val1[u]==0)
        {update(u,1,n);}

        //  for(int i=0;i<n;++i) cout<<"i = "<<i<<" val1[i] = "<<val1[i]<<endl;

    }
    else if(ch[0] == 'Q')
    {
        int u; cin>>u;
        --u;
        int y=len[u];
        u = st[u];
        y += u-1;
        cout<<query(u,y)<<endl;
    }

}

    return 0;
}
