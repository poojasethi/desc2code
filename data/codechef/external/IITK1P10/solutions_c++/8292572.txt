#include<bits/stdc++.h>
#define mod 1000000007
#define len(a) strlen(a)
#define ll long long
#define nl printf("\n")
#define db printf("debug")
#define yes printf("YES\n")
#define no printf("NO\n")
#define pb(a) push_back(a)
#define po(a) pop_back()
#define mp(a,b) make_pair(a,b)
#define set(a,v) memset(a,v,sizeof(a))
#define sz(v) v.size()

#define pcase(i) printf("Case #%d: ",i)
using namespace std;

vector<vector<int> >tree(100010);
int n,m;
ll value[100005];
int ans [100005];
bool vis[100010];
vector<int> parent(200005);
int cnt=0;

void pnt(vector<vector<int> >tree,int n)
{
    int i;
    for(i=0;i<=n;i++)
    {
        printf("%d->",i);
        for(int j=0;j<tree[i].size();j++)
            printf("%d ",tree[i][j]);
        nl;
    }
}
void pnt_val()
{
    for(int i=1;i<=n;i++)
        printf("%d %d %d\n",i,parent[i],ans[i]);
}

void dfs(int root)
{
    vis[root]=true;
    //cout<<root<<" ";
    if(tree[root].size()==1)
    {
        if(value[root] == 0)
        {
            ans[root]=1;
        }

        return ;
    }
    int x=tree[root].size();

    int b=0;
    for(int i=0;i<x;i++)
    {
        if( !vis[tree[root][i] ] )
            {

                parent[ tree[root][i] ] = root;
                dfs(tree[root][i]);

                ans[root]+= ans [  tree[root][i]  ];
            }
    }
    if(value[root]==0)
            ans[root]+=1;

}
void propagate(int x, int add)
{
    while(parent[x]!=x)
    {
        ans[x]+= add;
        x=parent[x];
    }
    ans[x]+=add;
}

void update(int x, int v)
{
    ll old= value[x];
    value[x]+=v;
    if(old == 0 and value[x]!=0)
    {
        propagate(x,-1);
    }
    else if(old!=0 and value[x]==0)
    {
        propagate(x,1);
    }
}

int main()
{
    int x,y,i;
    for(i=0;i<=100005;i++)
        vis[i]=false;

    scanf("%d %d",&n,&m);

    for(i=1;i<=n-1;i++)
    {
        cin>>x>>y;
        tree[x].pb(y);
        tree[y].pb(x);
    }

    for(i=1;i<=n;i++)
        cin>>value[i];

   // pnt(tree,n);nl;
    parent[1]=1;
    dfs(1);
    //pnt_val();nl;

    while(m--)
    {
        char op;
        int x,v;
        cin>>op;
        if (op=='Q')
        {
            cin>>x;
            cout<<ans[x];nl;
        }
        else
            {
                cin>>x>>v;
                update(x,v);
            }
    }

}
