#include<cmath>
#include<list>
#include<iostream>
#include<cstdlib>
#include<vector>
#include<stack>
#include<map>
#include<set>
#include<cstring>
#include<algorithm>

using namespace std;
#define M 1000000007
#define N 100003
#define INF (int)1e9
#define LINF (long long)1e18
#define pb push_back
#define popb pop_back()
#define pln() printf("\n")
#define s(t) scanf("%d",&t)
#define sd(t) scanf("%lf",&t)
#define sld(t) scanf("%Lf",&t)
#define sl(t) scanf("%lld",&t)
#define sc(t) scanf("%c",&t)
#define ss(t) scanf("%s",t)
#define p(t) printf("%d",t)
#define pl(t) printf("%lld",t)
#define ps(t) printf("%s",t)

#define FILL(a,b) memset(a,b,sizeof(a))

typedef vector<int> VI;
typedef pair<int,int> PII;
typedef long long LL;
typedef vector<LL> VL;
typedef pair<LL,LL> PLL;
typedef vector<PII> VPII;

/*Start where you are. Use what you have. Do what you can..*/
/*
template<class type>
type fastread()
{
char ch;type num=0;
while((ch=getchar_unlocked())<'0');
while(ch>='0')
{
num=(num)*10+ch-'0';
ch=getchar_unlocked();              
}             
return num;            
             
}
*/

VI child[N+1];
bool visited[N+1];
int st[N+3],ed[N+3];
int level[N+2];
LL ft[N+2];
LL val[N+1];

int cur=1;

void update(int i,LL Val,int n)
{
while(i<=n)
{
ft[i]+=Val;
i+=(i&-i);           
}     
}

int query(int i)
{
    int sum=0;
while(i>0)
{
sum+=ft[i];
i-=(i&-i);          
}    
return sum;    
}

void dfs(int node)
{
if(visited[node])return;
visited[node]=true;
st[node]=cur;
for(int i=0;i<child[node].size();++i)
{
if(!visited[child[node][i]]){        
level[child[node][i]]=level[node]+1;
cur++;        
dfs(child[node][i]);        }
}     
ed[node]=cur;     
     
}


int main()
{   
#ifndef ONLINE_JUDGE
freopen("inp.txt","r",stdin);
freopen("re.txt","w",stdout);
#endif
int n,m,x,a,b;char ch[2];LL Val,old;
s(n);s(m);

for(int i=0;i<n-1;++i)
{
s(a);s(b);
child[a].pb(b);
child[b].pb(a);        
        
}
dfs(1);

//for(int i=1;i<=4;++i)
//{p(st[i]);ps(" ");p(ed[i]);pln();}
for(int i=1;i<=n;++i)
{scanf("%lld",&val[i]);
if(val[i]==0)
update(st[i],1,n);
}



while(m--)
{
ss(ch);
if(ch[0]=='U')
{
s(x);s(Val);
 old=val[x];
val[x]+=Val;
if(Val){
if(val[x]==0)
update(st[x],1,n);
else if(old==0)
update(st[x],-1,n);

}
//for(int i=0;i<5;++i){pl(ft[i]);ps(" ");}pln();     
}   
else
{
s(x);
p(query(ed[x])-query(st[x]-1));
pln();    
}          
          
          
}











//cin.get();
return 0;    
}
