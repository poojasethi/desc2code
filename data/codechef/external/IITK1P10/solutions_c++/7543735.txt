#include<bits/stdc++.h>
using namespace std;

const int N=123456;

int st[N], ft[N], timer=-1, boom[N];
long long a[N];

struct Node {
    int cnt;
    long long val;
}tree[4*N];

vector<int> adj[N];

void build(int node, int from, int to) {
    if(from==to) {
        tree[node].val=a[to];
        if(tree[node].val==0) {
            tree[node].cnt=1;
        } else {
            tree[node].cnt=0;
        }
        return ;
    }
    int mid=(from+to)/2;
    int lc=2*node;
    int rc=lc+1;
    build(lc, from, mid);
    build(rc, mid+1, to);
    tree[node].cnt=tree[lc].cnt+tree[rc].cnt;
}

void update(int node, int from, int to, int idx, long long value) {
    if(from==to && to==idx) {
        tree[node].val+=value;
        if(tree[node].val==0) {
            tree[node].cnt=1;
        } else {
            tree[node].cnt=0;
        }
        return ;
    }
    int mid=(from+to)/2;
    int lc=2*node;
    int rc=lc+1;
    if(idx<=mid) {
        update(lc, from, mid, idx, value);
    } else {
        update(rc, mid+1, to, idx, value);
    }
    tree[node].cnt=tree[lc].cnt+tree[rc].cnt;
}

Node query(int node, int from, int to, int l, int r) {
    if(from>to || from>r || to<l) {
        Node temp;
        temp.cnt=0;
        return temp;
    }
    if(from>=l && to<=r) {
        return tree[node];
    }
    int mid=(from+to)/2;
    int lc=2*node;
    int rc=lc+1;
    Node left=query(lc, from, mid, l, r);
    Node right=query(rc, mid+1, to, l, r);
    Node par;
    par.cnt=left.cnt+right.cnt;
    return par;
}

void dfs(int s) {
    st[s]=++timer;
    boom[s]=1;
    for(int i=0;i<adj[s].size();i++) {
        int w=adj[s][i];
        if(!boom[w]) {
            dfs(w);
        }
    }
    ft[s]=timer;
}

int main() {
    int n, q;
    scanf("%d %d", &n, &q);
    for(int i=1;i<n;i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(0);
    for(int i=0;i<n;i++) {
        scanf("%lld", &a[i]);
    }
    build(1, 0, n-1);
    while(q--) {
        char cmd[11];
        scanf("%s", cmd);
        if(cmd[0]=='U') {
            int x, v;
            scanf("%d %d", &x, &v);
            x--;
            update(1, 0, n-1, x, (long long)v);
        } else {
            int x;
            scanf("%d", &x);
            x--;
            Node ans=query(1, 0, n-1, st[x], ft[x]);
            printf("%d\n", ans.cnt);
        }
    }
}
