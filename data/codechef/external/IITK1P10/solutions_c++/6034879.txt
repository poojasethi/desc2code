#include <stdio.h>
#include <math.h>
#include <vector>
using namespace std;
vector<int> graph[100005];
int s_time[100005];
int e_time[100005];
int visited[100005];
int W[100005];
int val[100005];
int time=-1;

/*void update(int *st,int ss,int se,int si,int qs,int qe,int val)
{
	if(qs<=ss && se<=qe)
	{
		st[si]
	}
}*/
int constructUtil(int *st,int ss,int se,int si)
{
	if(ss==se)
	{
		st[si]=val[ss];
	    return st[si];	
	}
	int mid=(ss+se)/2;
	st[si]=constructUtil(st,ss,mid,2*si+1)+constructUtil(st,mid+1,se,2*si+2);
	return st[si];
}
int query(int *st,int ss,int se,int si,int qs,int qe)
{
	if(qs<=ss && se<=qe)
	return st[si];
	else if(qe<ss || se<qs)
	return 0;
	else
	{
	int mid=(ss+se)/2;
	return query(st,ss,mid,2*si+1,qs,qe)+query(st,mid+1,se,2*si+2,qs,qe);
    }
	
}
void update(int *st,int ss,int se,int si,int u,int val)
{
	
	st[si]+=val;
	if(ss==se)
	return;
	int mid=(ss+se)/2;
	if(ss<=u && u<=mid)
	update(st,ss,mid,2*si+1,u,val);
	else
	update(st,mid+1,se,2*si+2,u,val);
	return;
}
void dfs(int);
int *construct(int N)
{
	int h=log2(2*N-1)+1;
	int max_size=2*pow(2,h)-1;
	int *st=new int[max_size];
	return st;
}
int main()
{
	int N,m,i,u,v,id,Q;
	scanf("%d %d",&N,&Q);
	int *st=construct(N);
	for(i=1;i<=N-1;i++)
	{
	  scanf("%d %d",&u,&v);
	  graph[u].push_back(v);
	  graph[v].push_back(u);
	}
	for(i=1;i<=N;i++)
	{
		scanf("%d",&W[i]);
	}
    //ab kya karein
    //dfs lagate hain
    dfs(1);
	constructUtil(st,0,N-1,0);
	//build the segement tree
	char c;
	while(Q--)
	{
		getchar();
		scanf("%c",&c);
		//element id and element u
		if(c=='Q')
		{
		scanf("%d",&u);
	    printf("%d\n",query(st,0,N-1,0,s_time[u],e_time[u]));	
	    }
		else
		{
		scanf("%d %d",&u,&v);
		if(W[u]!=0)
		{
		W[u]+=v;
		if(W[u]==0)
		update(st,0,N-1,0,s_time[u],1);
	    }
        else
		{
		W[u]+=v;
		if(W[u]!=0)
		update(st,0,N-1,0,s_time[u],-1);
		} 		
	    }
		
		
	}
	
	
	
	
    return 0;
	
}
void dfs(int v)
{
	s_time[v]=++time;
	visited[v]=1;
	for(int i=0;i<graph[v].size();i++)
	{
		if(visited[graph[v][i]]==0)
		{
			dfs(graph[v][i]);
		}
	}
	if(W[v]==0)
	val[s_time[v]]=1;
	e_time[v]=time;
	
	//updation is required
	//s_time and e_time are segements
}
