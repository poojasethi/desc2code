#include<bits/stdc++.h>
using namespace std;

const int MAXN=100012;

typedef long long LL;
LL arr[MAXN];
int bit[MAXN];
void update(int x,int v)
{
    while(x<MAXN)
    {
        bit[x]+=v;
        x+=(-x&x);
    }
}

int query(int x)
{
    int ret=0;
    while(x)
    {
        ret+=bit[x];
        x-=(-x&x);
    }
    return ret;
}

vector<vector<int> > v;
int n,m;
int order[MAXN],B[MAXN];

int o;
int dfs(int ind,int p)
{
    order[ind]=o++;
    int &ret=B[ind];
    ret=order[ind];
    for(int i=0;i<v[ind].size();i++)
    {
        int u=v[ind][i];
        if(u==p)
            continue;
        ret=max(ret,dfs(u,ind));
    }
    return ret;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("in.in", "r", stdin);
#endif

    cin>>n>>m;
    v.resize(n+3);
    int a,b;
    for(int i=1;i<n;i++)
    {
        cin>>a>>b;
        v[a].push_back(b);
        v[b].push_back(a);
    }

    o=1;
    dfs(1,0);

    for(int i=1;i<=n;i++)
    {
        cin>>arr[i];
        if(arr[i]==0)
            {
                update(order[i],1);
            }
    }

    while(m--)
    {
        char c;
        cin>>c;

        if(c=='Q')
        {
            cin>>a;
            cout<<query(B[a])-query(order[a]-1)<<endl;;
        }
        else
        {
            cin>>a>>b;
            bool old=(arr[a]==0);
            arr[a]+=b;
            bool nw=(arr[a]==0);
            if(old!=nw)
            {
                if(old)
                    update(order[a],-1);
                else
                    update(order[a],1);
            }
        }
    }
    return 0;
}

