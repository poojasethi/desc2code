// adijimmy
#include <bits/stdc++.h>
#define ll long long int
#define MAX 100005
using namespace std;
struct node{
int zero;
int num;
};
node tree[4*MAX];
int arr[MAX],brr[MAX],crr[MAX],d[MAX][2],cnt;
vector<int> v[MAX];
void ordering_segtree(int u){
int start,end;
start = cnt;
if(v[u].size()==0){
   d[u][0] = -1;
   d[u][1] = -1;
   crr[u] = cnt;
   brr[cnt++] = arr[u];
   return;
}
 
for(int i=0;i<v[u].size();i++)
    ordering_segtree(v[u][i]);
 
end = cnt-1;
d[u][0] = start;
d[u][1] = end;
crr[u] = cnt;
brr[cnt++] = arr[u];
}
void init_tree(int indx,int l,int h){
if(l==h){
    tree[indx].num = brr[l];
    if(brr[l] == 0)
        tree[indx].zero = 1;
    else
        tree[indx].zero = 0;
    return;
}
int mid = (l+h)>>1;
init_tree(indx<<1,l,mid);
init_tree(indx<<1|1,mid+1,h);
tree[indx].zero = tree[indx<<1].zero + tree[indx<<1|1].zero;
tree[indx].num = min(tree[indx<<1].num ,tree[indx<<1|1].num);
}
void update_tree(int indx,int l,int h,int chg,int val){
if(h<chg || l>chg)
  return;
if(l==chg && h==chg){
  tree[indx].num = val;
  if(val==0)
    tree[indx].zero = 1;
  else
    tree[indx].zero = 0;
  return ;
}
int mid=(l+h)>>1;
update_tree(indx<<1,l,mid,chg,val);
update_tree(indx<<1|1,mid+1,h,chg,val);
tree[indx].zero = tree[indx<<1].zero+tree[indx<<1|1].zero;
tree[indx].num = min(tree[indx<<1].num,tree[indx<<1|1].num);
}
int query_tree(int indx,int l,int h,int rx,int ry){
if(h<rx || l>ry)
    return 0;
if(rx<=l && h<=ry){
    return tree[indx].zero;
}
int mid=(l+h)>>1;
return query_tree(indx<<1,l,mid,rx,ry)+query_tree(indx<<1|1,mid+1,h,rx,ry);
}
int main(){
int N,a,b,Q,l,h,k;
string c;
cin >> N >> Q;
 
cnt = 0;
for(int i=1;i<N;i++){
    cin >> a >> b;
    a--;
    b--;
    v[a].push_back(b);
}
 
for(int i=0;i<N;i++)
    cin >> arr[i];
 
ordering_segtree(0);
//for(int i=0;i<N;i++){
  //  cout<<d[i][0]<<" "<<d[i][1]<<endl;
//}
//return 0;
init_tree(1,0,N-1);
// cin>>Q;
while(Q--){
cin >> c;
if(c[0]=='U'){
    cin >> l >> h;
    l--;
    update_tree(1,0,N-1,crr[l],h);
}
else{
    cin >> k;
    k--;
    if(d[k][0] != -1 && d[k][1] != -1){
        int ans = query_tree(1,0,N-1,d[k][0],d[k][1]);
        cout<<ans<<endl;
    }
    else
        cout<<"0"<<endl;
}
}
return 0;
}