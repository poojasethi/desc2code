#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long

const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}


int start[100004];
int end[100004];

vector<int> order;
vector<int> g[100005];
void dfs(int u,int parent)
{

  start[u]=order.size();
  order.push_back(u);

  for(int i=0;i<g[u].size();++i)
  {
    int v=g[u][i];
    if(v!=parent)
      dfs(v,u);
  }

  end[u]=order.size()-1;
}






int n,q,N,base;


int tree[500005];
ll a[100005];
void makeTree(int index,int l,int r)
{
    if(l==r)
    {
        if(l<n)
        {
          tree[l]=1;
        }
        else
        {
          tree[l]=0;
        }
        return;
    }

    int mid=(l+r)/2;

    makeTree(2*index+1,l,mid);
    makeTree(2*index+2,mid+1,r);

    tree[index]=tree[2*index+1]+tree[2*index+2];

}


void mergeUp(int index)
{
  int parent;
  while(index)
  {
    parent=(index-1)/2;

    if(index%2==0)
      tree[parent]=tree[index-1]+tree[index];
    else
      tree[parent]=tree[index]+tree[index+1];

    index=parent;
  }
}

int query(int index,int l,int r,int x,int y)
{
  if(x>r || y<l)
    return 0;
  if(x<=l && r<=y)
    return tree[index];
  int mid=(l+r)/2;
  int left=query(2*index+1,l,mid,x,y);
  int right=query(2*index+2,mid+1,r,x,y);

  return left+right;
}
int main()
{
  std::ios::sync_with_stdio(false);

  cin>>n>>q;
  for(int i=0;i<n-1;++i)
  {
    int u,v;
    cin>>u>>v;
    g[u].push_back(v);
    g[v].push_back(u);
  }

  dfs(1,0);

  N=ceil(log2(n));
  base=(1<<N)-1;
  

  makeTree(0,0,base);

  for (int i = 1; i <=n; ++i)
  {
    int x;
    cin>>x;
    a[i]+=x;
    if(a[i]==0)
      tree[base+start[i] ]=1;
    else
      tree[base+start[i]]=0;
    mergeUp(base+start[i] );
  }


  int x;
  ll v;

  while(q--)
  {
    char ch;
    cin>>ch;

    switch(ch)
    {
      case 'Q':
      cin>>x;
      printf("%d\n",query(0,0,base,start[x],end[x]));
      break;
      case 'U':
      cin>>x>>v;

      a[x]+=v;
      if(a[x]==0)
        tree[base+start[x] ]=1;
      else
        tree[base+start[x]]=0;
      mergeUp(base+start[x] );

      break;
    
      default:
      assert(false);
    }
  }
  
}
