#include <bits/stdc++.h>
using namespace std;
vector< vector <int> > UG;
int traversal_length;
void DFS_visit(int j, int * visited, int * BE, int * End, int * traversal_array)
{
	vector <int>::iterator it;
	int v;
	if(visited[j])
		return;
	visited[j] = 1;
	BE[j] = traversal_length;
	traversal_array[traversal_length] = j;
	traversal_length++;
	for (it = UG[j].begin(); it != UG[j].end(); it++)
	{
		v = *it;
		if(!visited[v])
		{
			DFS_visit(v,visited,BE,End,traversal_array);
		}
	}
	End[j] = traversal_length;
}

void DFS(int source, int * BE,int * End, int * traversal_array,int V)
{
	int visited[V];
	vector <int>::iterator it;
	memset(visited, 0 , sizeof(visited));
	traversal_length = 0;
	DFS_visit(source,visited,BE,End,traversal_array);
}


void Build_Fenwick(int * FT, int * cumm_cost, int Size)
{
	int i,j;
	for(i = 1;i<= Size;i++)
	{
		j = i-1;
		if(i == 1)
			FT[i] = cumm_cost[j];
		else
		    FT[i] = cumm_cost[j] - cumm_cost[j - (j & -j)];
	}
}
int ReadFenwick(int * FT, int idx)
{
	if(idx == 0)
		return 0;
	else
		return FT[idx] + ReadFenwick(FT,idx - (idx & -idx));
}

void UpdateFenwick(int * FT, int idx, int val, int size)
{
	if(idx > size)
	{
		return;
	}
	else
	{
		FT[idx] += val;
		idx += (idx & -idx); 
		UpdateFenwick(FT,idx,val,size);
	}
}
int main()
{
	int u,v,i;
	int prev, now;
	int V,Q;
	char in[5];
	scanf("%d%d",&V,&Q);
	vector< int > temp;
	UG.assign(V,temp);
	long long cost[V];
	int cumm_cost[V];
	vector < int >::iterator it;
	for(i = 0;i < V - 1;i++)
	{
		scanf("%d%d",&u,&v);
		u--;v--;
		UG[u].push_back(v);
		UG[v].push_back(u);
	}
	for(i = 0;i< V;i++)
	{
		scanf("%lld",&cost[i]);
	}
	int Begin[V];
	int End[V];
	int DFS_traversal[V];
	int Fenwick_Tree[V+1];
	Fenwick_Tree[0] = 0;
	DFS(0,Begin,End,DFS_traversal,V);
	/*for(i = 0; i< V;i++)
	{
		printf("%d ",++DFS_traversal[i] );
	}
	printf("\n");
	for(i = 0; i< V;i++)
	{
		printf("%d ",Begin[i] );
	}
	printf("\n");
	for(i = 0; i< V;i++)
	{
		printf("%d ",End[i] );
	}
	printf("\n");*/
	for(i = 0 ;i< V;i++)
	{
		if(i == 0)
		{
			cumm_cost[i] = (cost[DFS_traversal[i]] == 0);
		}
		else
		{
			cumm_cost[i] = cumm_cost[i-1] + (cost[DFS_traversal[i]] == 0);
		}
	}
	Build_Fenwick(Fenwick_Tree,cumm_cost,V);
	for(i = 0; i < Q;i++)
	{
		scanf("%s",in);
		if(in[0] == 'Q')
		{
			scanf("%d",&u);
			printf("%d\n",ReadFenwick(Fenwick_Tree,End[u-1]) - ReadFenwick(Fenwick_Tree,Begin[u-1]+1) );
		}
		else
		{
			scanf("%d%d",&u,&v);
			prev = cost[--u];
			cost[u] += v;
			if(prev == 0 && cost[u] != 0)
			{
				UpdateFenwick(Fenwick_Tree, DFS_traversal[u] + 1,-1,V);
			}
			else if (prev != 0 && cost[u] == 0)
			{
				UpdateFenwick(Fenwick_Tree, DFS_traversal[u] + 1,1,V);	
			}
		}
	}
	return 0;
}
