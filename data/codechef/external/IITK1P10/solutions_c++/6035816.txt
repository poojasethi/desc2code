#include <algorithm>
#include <assert.h>
#include <bitset>
#include <cmath>
#include <ctype.h>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <list>
#include <limits.h>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <string.h>
#include <time.h>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> ipair;
typedef vector<int> vi;

void FJ(){
    #ifndef ONLINE_JUDGE
        freopen("I.txt","r",stdin);
    #endif
}

#define MAX 1000000007
#define MOD 1000000007
#define FT first
#define SE second
#define SZ size()
#define BG begin()
#define EN end()
#define SP system("pause")
#define PB(a) push_back(a)
#define rep(i,n) REP(i,0,n)
#define MP(a,b) make_pair(a,b)
#define PT(a) printf("%d\n",a)
#define GT(a) int a;scanf("%d",&a)
#define MS(a,b) memset(a,b,sizeof(a))
#define FI freopen("I.txt","r",stdin)
#define FO freopen("O.txt","w",stdout)
#define rev(i,n) for(int i=n;i>=0;i--)
#define REP(i,a,b) for(int i=a;i<b;i++)
#define take(ar,n) int ar[n+1]; rep(i,n) cin>>ar[i+1]
#define foreach(V,it) for(typeof((V).BG)it=(V.BG);it!=V.EN;it++)
#define show(ar,n) rep(i,n) printf("%d%c",ar[i],(i == n)?'\n':' ');
#define FU (int)1e5+7
vector<int> BIT,in,out,L,V;
vector<vector<int> >adj;
int N,cnt=0;
void update(int idx,int val)
{
    while(idx<=N)
    {
        BIT[idx]+=val;
        idx+=idx&(-idx);
    }
}
int query(int idx)
{
    int r=0;
    while(idx>0)
    {
        r+=BIT[idx];
        idx-=idx&(-idx);
    }
    return r;
}
void dfs(int a,int l=0)
{
    in[a]=cnt++;
    L[a]=l;
    V[a]=1;
    foreach(adj[a],it) if(!V[*it]) dfs(*it,l+1);
    out[a]=cnt;
}
int main()
{
    FJ();
    cin>>N;
    adj.resize(N+7);
    BIT.resize(N+7);
    in.resize(N+7);
    out.resize(N+7);
    L.resize(N+7);
    V.resize(N+7);
    GT(Q);
    rep(i,N-1)
    {
        GT(x);
        GT(y);
        adj[x].PB(y);
        adj[y].PB(x);
    }
    take(val,N);
    dfs(1);
    REP(i,1,N+1) if(val[i]==0) update(in[i],1);
//    show(val,N+1);puts("");
//    show(BIT,N+1);puts("");
    char ch;
    rep(i,Q)
    {
        cin>>ch;
        GT(x);
        if(ch=='Q')
        {
            int R=query(out[x]);
            R-=query(in[x]-1);
            printf("%d\n",R);
        }
        else
        {
            GT(y);
            if(val[x])
            {
                val[x]+=y;
                if(val[x]==0) update(in[x],1);
            }
            else
            {
                val[x]+=y;
                if(val[x]) update(in[x],-1);
            }
        }
    }
    return 0;
}
