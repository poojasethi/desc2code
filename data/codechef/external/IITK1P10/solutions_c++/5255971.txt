#include<bits/stdc++.h>

using namespace std;

vector<int> tree[(int)1e5+10];
int value[(int)1e5 + 10];
vector <int> parents[(int)1e5];
int dp[(int)1e5];
int vis[(int)1e5];

int dfs(int s)
{
    if(vis[s])
    {
        return dp[s];
    }
    if(value[s] == 0)
        dp[s] = 1;
    
    vis[s] = 1;
    for(int i = 0 ; i < tree[s].size() ; i++)
    {
        dp[s] += dfs(tree[s][i]);
    }
    return dp[s];
}
void update(int node , int val)
{
    int lastval = value[node];
    value[node] += val;
    if((value[node] == 0 && lastval == 0) || (value[node] != 0 && lastval != 0))return;
    if(value[node] == 0)
    {
        dp[node]++;
        if(node == 1)
           return;
        while(true)
        {
            node = parents[node][0];
            dp[node]++;
            if(node == 1)
                break;
        }
    }
    else
    {
        dp[node]--;
        if(node == 1)
            return;
        while(true)
        {
        	
            node = parents[node][0];
            dp[node]--;
            if(node == 1)
                break;
        }
    }
}
int main()
{


    int N , Q;
    cin >> N >> Q;
    for(int i = 0 ; i < N - 1 ; i++)
    {
        int one , two;
        cin >> one >> two;
        tree[one].push_back(two);
        parents[two].push_back(one);
    }
    for(int i = 1 ; i <= N ; i++)
    {
        int one;
        cin >> one;
        value[i] = one;
    }
    char c ;
    int node;
    memset(dp,0,sizeof dp);
    dfs(1);
    for(int i = 0 ; i < Q ; i++)
    {
        cin >> c >> node;
        if(c == 'Q')
        {
            cout << dp[node] << endl;
        }
        else
        {
            int val ;
            cin >> val;
            update(node , val);
        }
        string s;
        getline(cin,s);
    }
    return 0;
}
