#include<stdio.h>
#include<iostream>
#include<vector>
#define get getchar_unlocked
using namespace std;
typedef struct _node{
	int val;
	int idx;
}node;

typedef struct elements{
	node n;
	node parent;
	int zeros;
	vector<int> child;
}tree;

int visited[100001]={0};
tree ele[100001];
vector<int> inp[100001];

int val_arr[100001];


int scan()
{
    int n = 0, s = 1, ch = get();
    while (ch < '0' || ch > '9') {
        if (ch == '-')
            s = -1;
        ch = get();
    }
    while (ch >= '0' && ch <= '9') {
        n = (n << 3) + (n << 1) + ch - '0';
        ch = get();
    }
    return (n*s);
}

void createTree(int p)
{
	ele[p].n.val=val_arr[p];
	ele[p].n.idx=p;
	int size=inp[p].size();
	
	
	ele[p].zeros=0;
	if(ele[p].n.val==0)
	ele[p].zeros=1;
	
	
	int i;
	for(i=0;i<size;i++)
	{
		if(visited[inp[p][i]]==1)
		continue;
		else
		{
			visited[inp[p][i]]=1;
			ele[p].child.push_back(inp[p][i]);
			ele[inp[p][i]].parent.idx=p;
			createTree(inp[p][i]);
			ele[p].zeros+=ele[inp[p][i]].zeros;
		}
	}
}


void printTree(int n)
{
	int i;
	for(i=1;i<=n;i++)
	{
		cout << ele[i].n.val << "\n";
	}
}

int getZero(int x)
{
	int count=0,i;
	if(ele[x].n.val==0)
	count=1;
	int size=ele[x].child.size();
	
	if(size==0)
	return count;
	
	for(i=0;i<size;i++)
	{
		count+=getZero(ele[x].child[i]);
	}
	return count;
}


void increase(int p)
{
	ele[p].zeros++;
	int ptemp=ele[p].parent.idx;
	while(ptemp!=-1)
	{
		ele[ptemp].zeros++;
		ptemp=ele[ptemp].parent.idx;
	}
}


void decrease(int p)
{
	ele[p].zeros--;
	int ptemp=ele[p].parent.idx;
	while(ptemp!=-1)
	{
		ele[ptemp].zeros--;
		ptemp=ele[ptemp].parent.idx;
	}
}

int main()
{
	int N,Q;

	
	N=scan();
	Q=scan();
	int i,j;
	int x,y;
	for(i=0;i<N-1;i++)
	{
		x=scan();
		y=scan();
		inp[x].push_back(y);
		inp[y].push_back(x);
	}
	
	for(i=1;i<=N;i++)
	{
		val_arr[i]=scan();	
	}
	
	
	
	
	visited[1]=1;
	ele[1].parent.idx=-1;
	createTree(1);
	
	char ch;
	int count;
	bool flag=false;
	for(i=0;i<Q;++i)
	{
		scanf("%c",&ch);	
		if(ch=='Q')
		{
			x=scan();
			count=ele[x].zeros;
			printf("%d\n",count);
		}
		else if(ch=='U')
		{
			x=scan();
			y=scan();
			ele[x].n.val+=y;
			if(ele[x].n.val==0 && y!=0)
			increase(x); // increase
			if(ele[x].n.val==y && y!=0)
			decrease(x); // decrease
			
		}
		else
		{
			i--;
		}

	}
	return 0;
}