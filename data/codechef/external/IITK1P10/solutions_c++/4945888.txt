#include <iostream>
#include <list>

using namespace std;

struct Node
{
	int val;
	Node* parent;
	list<Node *> children;
	int count;

	Node(){
		parent = NULL;
		count =0;
	}
};



int main(){
	int N,Q;
	cin >>N>>Q;
	Node* arr[N];
	list<int> edge[N];
	// cout << "before\n";
	for(int i=0;i<N;i++){
		arr[i] = new Node();
	}
	// cout << "init\n";

	for(int i=0;i<N-1;i++){
		int l,k;
		cin >>l>>k;
		edge[l-1].push_back(k-1);
		edge[k-1].push_back(l-1);
	}	
	// cout << "edge\n";
	arr[0]->parent= NULL;
	for(int i=0;i<N;i++){
		for (std::list<int>::iterator it = edge[i].begin(); it != edge[i].end(); it++){
			if(arr[*it]->parent == NULL && *it != 0){
				arr[*it]->parent = arr[i];
			}
		}
	}
	// cout << "weight\n";
	for(int i=0;i<N;i++){
		cin >>arr[i]->val;
		if(arr[i]->val ==0){
			Node* x = arr[i]->parent;
			while(x != NULL){
				x->count++;	
				x = x->parent;
			}
			
		}
	}

	for(int i=0;i<Q;i++){
		char c;
		cin >> c;
		if(c == 'U'){
			int k,v;
			cin >> k>>v;
			if(arr[k-1]->val ==0 && v!=0){
				Node* x = arr[k-1]->parent;
				while(x != NULL){
					x->count--;	
					x = x->parent;
				}
				
			}
			arr[k-1]->val+=v;
			if(arr[k-1]->val ==0 && v == 0){
				Node* x = arr[k-1]->parent;
				while(x != NULL){
					x->count++;	
					x = x->parent;
				}
				
			}

		}
		else{
			int k;
			cin >>k;
			cout << arr[k-1]->count <<endl;
		}
	}
	
	// cout << arr[0]->count << endl;

	return 0;
}