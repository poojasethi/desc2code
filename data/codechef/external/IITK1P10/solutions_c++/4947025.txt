#include<stdio.h>
#include<iostream>
#include<vector>

using namespace std;

#define ll long long

int tz=0;
int MAX;
ll val[100001];
vector<int> neighbour[100001];
int visited[100001];

int in[100001];int out[100001];
int tree[100001];

void dfs(int n)
{
	int i,len,next;

	visited[n]=1;
	++tz;
	in[n]=tz;
	
	len=neighbour[n].size();
	for(i=0;i<len;++i)
	{
		next=neighbour[n][i];
		if(visited[next]==0)
		{
			dfs(next);
		}
	}
	out[n]=tz;
}

void update(int index, int val)
{
	while(index<=MAX)
	{
		tree[index]+=val;
		index+=(index & -index);
	}
}

int query(int n)
{
	int index=n,sum=0;
	while(index>0)
	{
		sum+=tree[index];
		index-= (index & -index);
	}
	return sum;
}
int main()
{
	int n,q,i,prev;
	int x,y;
	string s;
	scanf("%d %d",&n,&q);
	MAX=n;
	for(i=1;i<n;++i)
	{
		scanf("%d %d",&x,&y);
		neighbour[x].push_back(y);
		neighbour[y].push_back(x);
	}
	
	for(i=1;i<=n;++i)visited[i]=0;

	dfs(1);

	for(i=1;i<=n;++i)
	{
		scanf("%d",&x);
		val[i]=x;
		if(x==0)update(in[i],1);
	}
	
	while(q--)
	{
		cin>>s;
		if(s[0]=='U')
		{
			scanf("%d %d",&x,&y);
			prev=val[x];
			val[x]+=y;
			if(prev!=0 && val[x]==0)update(in[x],1);
			if(prev==0 && val[x]!=0)update(in[x],-1);
		}
		else
		{
			scanf("%d",&x);
			printf("%d\n",query(out[x])-query(in[x]-1));
		}
	}
	return 0;
}
