//THE ALGO FREAKS
//inclusions
#include <stdio.h>
#include<math.h>
#include<ctype.h>
#include<cstring>
#include<bitset>
#include<string>
#include<stdlib.h>
#include<iostream>
#include<list>
#include<sstream>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<algorithm>
//input statements
#define sf(n) scanf("%d",&n)

#define gc() getchar()
#define fsf(n) scanf("%f",&n)
#define sf2(n,m) scanf("%d %d",&n,&m)
//#define lsf(n) scanf("%lld",&n)
//#define lsf2(n,m) scanf("%lld %lld",&n,&m)
/*#define usf(n) scanf("%u",&n)
#define ulsf(n) scanf("%llu",&n)
#define usf2(n,m) scanf("%u %u",&n,&m)
#define ulsf2(n) scanf("%llu %llu",&n,&m)*/

//output statements
#define pf(n) printf("%d",n)
#define pf2(n,m) printf("%d %d",n,m)
#define pfn(n){ pf(n); nl;}
#define pf2n(n,m) {pf2(n,m); nl;}
//#define lpf(n) printf("%lld",n)
//#define lpf2(n,m) printf("%lld %lld",n,m)
//#define lpf2n(n,m) {lpf2(n,m); nl;}
//#define lpfn(n){ lpf(n); nl;}
//for unsigned int/long int
/*#define upf(n) printf("%u",n)
#define ulpf(n) printf("%llu",n)
#define upf2(n,m) printf("%u %u",n,m)
#define ulpf2(n,m) printf("%llu %llu",n,m)
#define upfn(n) {upf(n); nl;}
#define upf2n(n,m) {upf2(n,m); nl;}
#define ulpf2n(n,m) {ulpf2(n,m); nl;}
#define ulpfn(n) {ulpf(n); nl;}*/
#define pc(c) putchar(c)
//#define fpfn(n) {fpf(n); nl;}
//#define fpf(n) printf("%f",n)
#define nl printf("\n")
#define sp printf(" ")
#define yes printf("Yes\n")
#define no printf("No\n")
//statements
#define fr(i,n)  for(i=0;i<n;i++)
#define frw(i,p,e) for(i=p;i<e;i++)
#define rev(i,p,e) for(i=p;i>=e;i--)
#define ini(arr,i,n,p) for(i=0;i<n;i++) arr[i]=p
#define ittr(v,it) for(typeof(v.begin()) it=v.begin(); it!=v.end();it++)
//binary search bsearch(key,base,num,size,compare function)
//sorting qsort(base,num,size, compare function)
#define cont continue
#define wl while
#define ev(x) x%2==0
#define od(x) x%2!=0
#define max3(max,a,b,c) if(a>b) {if(a>c)max=a; else max=c;} else {if(b>c)max=b; else max=c;}
#define mod(a,b) (a>=0)?(a)%(b):(a)%(b)+(b)

//types
typedef long long int lint;
typedef unsigned long long int ulint;
typedef unsigned int uint;
typedef short int sint;
typedef double dbl;
typedef float flt;
#define vi vector<int>
#define vvi vector<vi >
#define ii pair<int,int>
#define iii pair<int, ii >
#define F first 
#define S second 
#define prq priority_queue
#define sz(a) int((a).size())
#define vecsiz(c) (c.end()-c.begin())
//dfs bfs
#define ddx dx[]={-1,0,+1,0}
#define ddy dy[]={0,+1,0,-1}
#define range(i,j,n,m) (i<0 || j<0 || i>=n || j>=m) 
//STL and containers
#define all(c) c.begin(),c.end()
#define maxe max_element 
#define  mine min_element
#define pb push_back
#define pfr push_front
#define mp make_pair
 #define present(container, element) (container.find(element) != container.end())//for set, map
 #define cpresent(container, element) (find(all(container),element) != container.end()) //for others
#define accum accumulate
//constants
#define CONS 1000000007
#define SIZE 100002
#define TYPE int
#define TYPE2 double

using namespace std;
//--------------------------------------------------
//                code from here
//--------------------------------------------------

lint pow1(lint a,lint b)
{
    if(b==0)
    return 1LL;
    if(b==1)
    return a;
    if(b%2==1)
    return a*pow1(a*a,b/2);
    return pow1(a*a,b/2);
}
int main()
{
	int a,n,b,k,i,j;
	scanf("%d%d%d%d",&n,&k,&a,&b);
	int arr[n];
	int nice[n];
	for(i=0;i<n;i++)
	{
		int temp=1;
		scanf("%d",&arr[i]);
		int num=arr[i];
		for(j=2;j*j<=num;j++)
		{
			if(num%j==0)
			{
				temp*=j;
				while(num%j==0)
					num/=j;
			}
		}
		if(num>1)
			temp*=num;
		nice[i]=temp;
	}
	int l=n/2;
	lint num;
	lint p1=pow1(2,l);
	vi left[17];
	vi right[17];
	for(num=0;num<p1;num++)
	{
		int sum=0,cnt=0;
		for(i=0;i<n;i++)
		{
			if((1<<i&num))
			{
				sum+=nice[i];
				cnt++;
			}
		}
		left[cnt].pb(sum);
	}
	l=n-l;
 p1=pow1(2,l);
	for(num=0;num<p1;num++)
	{
		int sum=0,cnt=0;
		for(i=0;i<n;i++)
		{
			if((1<<i&num))
			{
				sum+=nice[i+n-l];
				cnt++;
			}
		}
		right[cnt].pb(sum);
	}
	frw(i,1,17)
	{
		sort(all(right[i]));
	}

left[0].clear(); left[0].pb(0);
	lint sub=0;
int sum;typeof(right[0].begin()) it2,it3;
	frw(i,0,min(k,16)+1)
	{
		ittr(left[i],it)
		{
			//pfn(*it);
			if(*it>b)continue;
			if(*it>=a && *it<=b)sub++;
			frw(j,1,min(k-i,16)+1)
			{
				it2=lower_bound (all(right[j]),a-*it); 
				it3=upper_bound (all(right[j]),b-*it); 
				sub+=it3-it2;
				//pf2n(j,sub);
			}
		}
	}
	cout<<sub<<endl;
	return 0;
}