#include "bits/stdc++.h"
using namespace std;
        #define rep(i,n) for(int i = 0; i < n; ++i)
        #define REP(i,a,b) for(int i = a ; i <= b; ++i)
        #define rep1(i,n) for(int i = 1; i <=n ; ++i)
        #define s(n) scanf("%lf",&n)
        #define rev(i,n) for(int i = n-2; i >= 0 ; --i)
        #define REV(i,a,b) for(int i = a ; i >= b ; --i)
        #define INF 1000000000
        #define pii pair<int,int>
        #define pb(a) push_back(a)
        #define ll long long
        #define vi vector<int>
        #define mii map<int,int>
        #define msi map<string,int>
        #define vii vector<vector<int> >
        #define vpp vector<pair<int,int> >
        #define MOD 1000000007
        #define PDD pair<double,double>
        #define vl vector<long long>
        #define pil pair<int,long long>
        #define pll pair<long long,long long>
        #define sz(v) (int)v.size()
        #define mp make_pair
        #define pi 3.1415926536
        #define gc getchar_unlocked
        #define ios std::ios::sync_with_stdio(false)
        #define e(a) exp(a)
        #define limit 100000000
        #define gc getchar_unlocked
    ll pwr(ll a,ll b,ll mod) {a%=mod;if(a<0)a+=mod;ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
    ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
    ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
    ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
    // ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
//vll v;
    const double EPS = 1e-9;  /*two numbers are deemed equal if their abs difference is less than some small epsilon , [less than operator- if(a<b-EPS){}],[less than or equal -if(a<b+EPS){}]*/
    vector<ll> m[33];
    vector<ll> m1[33];
    int main(int argc, char const *argv[])
    {
    	//ios;
    	int n, k, A, B;
    	scanf("%d%d%d%d", &n, &k, &A, &B);
    	ll a[n+1];ll b[n+1];ll c[n+1];
    	rep(i,n)
    	scanf("%lld", &a[i]); 

  for(int i = 0; i < n; i++){
int number  = a[i];
   ll pro = 1;
     int flag = 0;
     while(number % 2 == 0){
     	flag = 1;
         number = number / 2;         
     }
     if(flag == 1)pro *= 2;
     for(int j = 3; j <= sqrt(a[i]); j++){
     	 flag = 0;
         while(number % j == 0){
         	flag = 1;
         	number = number / j; 
         }
         if(flag == 1)pro*=j;
     }

     if(number > 2){
     	pro *= number;
     }
     a[i] = pro;
   }
   // for(int i = 0; i < n; i++){cout << a[i] << " " ;}cout << "\n";
    	int divide = n/2;
    	int divide1 = n - divide;
    	ll prec = pwr(2, divide);
    	ll prec1 = pwr(2, divide1);
    	for(int i = 0; i < divide; i++){b[i] = a[i];}//firstpart
		for(int i = divide; i < n; i++)c[i-divide] = a[i];//secondpart
    	//BITMASKS
    	for(int i = 0; i < prec; i++){
    		ll c1 = 0, pro = 0;
    		for(int j = 0; j < divide; j++){
    			if(i & (1<<j)){
    				c1++;
    				pro += b[j];
    				// cout << "*"
    			}
    			
    		}
    		m[c1].push_back(pro);
    	}
// for(int i = 0 ; i <= 2; i++){
// 	cout << i <<  "\n";
// 	for(int j = 0 ; j  < m[i].size(); j++)cout << m[i][j] << " ";
// 		cout << "\n";
// }
    	for(int i = 0; i < prec1; i++){
    		ll c1 = 0, pro = 0;
    		for(int j = 0; j < divide1; j++){
    			if(i & (1<<j)){
    				c1++;
    				pro += c[j];
    			}
    			
    		}
    		m1[c1].push_back(pro);
    	}

    	for(int i  = 0 ; i <= k; i++){
    		sort(m1[i].begin(), m1[i].end());
    	}

    	//end BITMASKS
    	ll c3 = 0;
    	for(int i = 0; i <= k; i++){
    		for(int j = 0; j <= k; j++){
    			if(i+j <= k){
    				for(int p = 0; p < m[i].size(); p++){
    					// for(int q = 0; q < m1[j].size(); q++){
    					// 	if(m1[j][q] + m[i][p] >= A && m1[j][q] + m[i][p] <= B)c3++;
    					// }
    					int val = A - m[i][p];
						int id1 = lower_bound(m1[j].begin(),m1[j].end(),val) - m1[j].begin();
						val = B - m[i][p];
						int id2 = upper_bound(m1[j].begin(),m1[j].end(),val) - m1[j].begin() - 1;
						c3 = c3 + max(0,id2 - id1 + 1);
    				}
    			}
    		}
    	}
    	printf("%lld", c3);
    	return 0;
    }