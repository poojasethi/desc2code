#include<bits/stdc++.h>
using namespace std;

const int N=1234567;
const int K=33;

int nice[N], aa[N];


vector<int> adj[K];
typedef pair<int, int> pii;
pii findsum[N];

void process() {
    nice[1]=1;
    for(int i=2;i<N;i++) {
        if(nice[i]==0) {
            nice[i]=i;
            for(int j=2*i;j<N;j+=i) {
                if(nice[j]==0) nice[j]=1;
                nice[j]*=i;
            }
        }
    }
}


inline int mask(int i, int j) {
    return (i & (1<<j) ) ;
}


int main() {
    process();
    int n, k, a, b;
    scanf("%d %d %d %d", &n, &k, &a, &b);
    for(int i=0;i<n;i++) {
        int num;
        scanf("%d", &num);
        aa[i]=nice[num];
    }
    int fh=n/2, sh=n/2;
    if(n & 1) fh++;
    long long ans=0;
    int e=0;
    for(int i=1;i<(1<<fh);i++) {
        int sz=0, sum=0;
        for(int j=0;j<fh;j++) {
            if(mask(i, j)) {
                sz++;
                sum+=aa[j];
                if(sum>b) break;
            }
        }
        if(sum<=b && sz<=k) {
            findsum[e++]=pii(sum, sz);
            if(sum>=a) ans++;
        }
    }
    for(int i=1;i<(1<<sh);i++) {
        int sz=0, sum=0;
        for(int j=0;j<sh;j++) {
            if(mask(i, j)) {
                sz++;
                sum+=aa[j+fh];
                if(sum>b) break;
            }
        }
        if(sum<=b && sz<=k) {
            adj[sz].push_back(sum);
            if(sum>=a) ans++;
        }
    }
    for(int i=0;i<K;i++) {
        if(adj[i].size()>1) sort(adj[i].begin(), adj[i].end());
    }
    for(int i=0;i<e;i++) {
        int ff=findsum[i].first;
        int ss=findsum[i].second;
        for(int j=1;j<=k-ss;j++) {
            int low=lower_bound(adj[j].begin(), adj[j].end(), a-ff)-adj[j].begin();
            int high=upper_bound(adj[j].begin(), adj[j].end(), b-ff)-adj[j].begin();
            ans+=(high-low);
        }
    }
    printf("%lld\n", ans);
}
