//meet in the middle
#include<bits/stdc++.h>
#define LL long long int
using namespace std;
 
 
int niceness[50], n;
vector<int> first_half[20];
vector<int> sec_half[20];
 
void generate_subsets_first(int st, int end) {
	LL i = 0, j, sum = 0;
	LL mask;
	LL size = end - st + 1;
	for(mask=0;mask<(1<<size);mask++) {
		sum = 0;i = 0;
		for(j=0;j<size;j++) {
			if(!((1<<j)&mask)) {
				sum += niceness[j];
				i++;
			}
		}
		first_half[i].push_back(sum);
	}
}
 
void generate_subsets_second(int st, int end) {
	LL i = 0, j, sum = 0;
	LL mask;
	LL size = end - st + 1;
	for(mask=0;mask<(1<<size);mask++) {
		sum = 0;i = 0;
		for(j=0;j<size;j++) {
			if(!((1<<j)&mask)) {
				sum += niceness[st+j];
				i++;
			}
		}
		sec_half[i].push_back(sum);
	}
}
 
int main() {
	int i, j, k, a, b, x;
	cin>>n>>k>>a>>b;
	for(i=0;i<n;i++) {
		cin>>x;
		niceness[i] = 1;
		for(j=2;j*j<=x;j++) {
			if(x%j == 0) {
				niceness[i] = niceness[i]*j;
			}
			while(x%j == 0) {
				x/=j;
			}
		}
		if(x > 1) {
			niceness[i] = niceness[i]*x;
		}
	}
 
	int mid = (n-1)/2;
	int size = n - mid -1;
	generate_subsets_first(0, mid);
	generate_subsets_second(mid+1, n-1);
 
	for(i=0;i<=size;i++) {
		sort(sec_half[i].begin(), sec_half[i].end());
	}
	int t;
	LL ans = 0;
	for(i=0;i<=mid+1;i++) {
		for(j=0;j<first_half[i].size();j++) {
			int sum = first_half[i][j];
			int upto = min(k-i, size);
			int copy = ans;
			for(t=0;t<=upto;t++) {  //length of subsets in second half
				int upper = upper_bound(sec_half[t].begin(), sec_half[t].end(), b-sum) - sec_half[t].begin();
				int lower = lower_bound(sec_half[t].begin(), sec_half[t].end(), a-sum) - sec_half[t].begin();
				ans = ans + (upper -lower); 
			}
		}
	}
	cout<<ans<<endl;
	return 0;
}