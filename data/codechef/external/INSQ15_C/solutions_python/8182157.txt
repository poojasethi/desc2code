#include<bits/stdc++.h>
#define pb push_back
#define ll long long
using namespace std;
ll nice[35+5];
vector<ll> v1[20],v2[20];
void generate_subsets_first(ll st, ll end) {
	ll i = 0, j, sum = 0;
	ll mask;
	ll size = end - st + 1;
	for(mask=0;mask<(1<<size);mask++) {
		sum = 0;i = 0;
		for(j=0;j<size;j++) {
			if(!((1<<j)&mask)) {
				sum += nice[j];
				i++;
			}
		}
		v1[i].push_back(sum);
	}
}

void generate_subsets_second(ll st, ll end) {
	ll i = 0, j, sum = 0;
	ll mask;
	ll size = end - st + 1;
	for(mask=0;mask<(1<<size);mask++) {
		sum = 0;i = 0;
		for(j=0;j<size;j++) {
			if(!((1<<j)&mask)) {
				sum += nice[st+j];
				i++;
			}
		}
		v2[i].push_back(sum);
	}
}


int main()
{
	ll i,n,k,l,x,y,u,pro,mid,midm,j,size_subset,temp,sz,sum,count,ans,lowerbd,upperbd,p,low,high;
	
	scanf("%lld%lld%lld%lld",&n,&k,&l,&u);
	ll a[n+5];
	for(i=0;i<n;++i)
	{
		scanf("%lld",&a[i]);
		temp=a[i];
		pro=1;	//prime divisors of a[i]
		if(temp%2==0)
		{
			pro*=2;
			while(!(temp&1))
			{
				temp/=2;
			}
		}
		for(j=3;j*j<=temp;j+=2)
		{
			if(temp%j==0)
			{
				pro*=j;
				while(temp%j==0)
				{
					temp/=j;
				}
			}
		}
		if(temp>2)
		{
			pro*=temp;
		}
		nice[i]=pro;
	}
	
	
	midm = (n-1)/2;
	ll size = n - midm -1;
	generate_subsets_first(0, midm);
	generate_subsets_second(midm+1, n-1);

	
	for(i=0;i<=size;++i)
	{
		sort(v2[i].begin(),v2[i].end());
	}
/*

	for(i=0;i<=mid;++i)
	{
		sz=v1[i].size();
		for(j=0;j<sz;++j)
		{
			printf("%d  ",v1[i][j]);
		}
		printf("\n");
	}

	
	for(i=0;i<=n-mid;++i)
	{
		sz=v2[i].size();
		for(j=0;j<sz;++j)
		{
			printf("%d  ",v2[i][j]);
		}
		printf("\n");
	}
	*/
	ans=0;
	for(i=0;i<=midm+1;++i)
	{
		sz=v1[i].size();
		for(j=0;j<sz;++j)
		{
			lowerbd=l-v1[i][j];
			upperbd=u-v1[i][j];
			for(p=0;p+i<=k&&(p<=size);++p)
			{
				
				int upper = upper_bound(v2[p].begin(), v2[p].end(), upperbd) - v2[p].begin();
				int lower = lower_bound(v2[p].begin(), v2[p].end(), lowerbd) - v2[p].begin();
				ans = ans + (upper -lower);
		
		//		printf("%lld %lld\n",lower,upper);
				/*
				low=0;
				high=v2[p].size()-1;
				while(low<high)
				{
					mid=(low+high)>>1;
					if(v2[p][mid]>=lowerbd)
					{
						high=mid;
					}
					if(v2[p][mid]<lowerbd)
					{
						low=mid+1;
					}
				}
				x=low;
				
				
				
				
				
				low=0;
				high=v2[p].size()-1;
				while(low<high)
				{
					mid=(low+high+1)>>1;
					if(v2[p][mid]>upperbd)
					{
						high=mid-1;
					}
					if(v2[p][mid]<=upperbd)
					{
						low=mid;
					}
				}
				y=low;
				if(x<=y&&v2[p][x]>=lowerbd&&v2[p][y]<=upperbd)
				{
					ans+=(y-x+1);
		//			printf("%d %d  %d  %d\n",i, p,x,y);
				}
				*/
			}
		}
	}
	printf("%lld\n",ans);
	return 0;
}