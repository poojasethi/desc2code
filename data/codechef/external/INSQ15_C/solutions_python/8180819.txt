//#include"stdafx.h"
#include<bits/stdc++.h>
using namespace std;

long long int arr[50],niceness[50];
void fact(long long int n)
{
	long long int i,num,pro;
	for (i = 0; i < n; i++)
	{
		num = arr[i];
		pro = 1;
		if (num % 2 == 0)
		{
			while (num % 2 == 0)
				num /= 2;
			pro *= 2;
		}
		for (long long int j = 3; j * j <= num; j += 2)
		{
			if (num % j == 0)
			{
				while (num % j == 0)
					num /= j;
				pro *= j;
			}

		}
		if (num > 1)
			pro *= num;
		niceness[i] = pro;
	}
}

vector<pair<long long int, long long int> > a, b;
void powerset(long long int st,long long int n)
{
	long long int i,lim=1<<(n-st+1),j,len,sum=0;
	for (i = 0; i < lim; i++)
	{
		len = 0; sum = 0;
		for (j = 0; j < n-st+1; j++)
		{
			if (i&(1 << j))
			{
				len++;
				sum += niceness[st+j];
			}
		}
		if (st)
			b.push_back(make_pair(len, sum));
		else
		a.push_back(make_pair(len, sum));
	}
}

bool cmpf(const pair<long long int, long long int> p,const pair<long long int,long long int> q)
{
	return p.first > q.first;
}
long long int mitm(long long int n,long long int x,long long int y,long long int k)
{
	/*
	for (long long int i = 0; i < a.size(); i++)
		cout << a[i].first << " " << a[i].second << "\n";
	for (long long int i = 0; i < b.size(); i++)
		cout << b[i].first << " " << b[i].second << "\n";
		*/


	long long int i,sum,kk,tofind,ans=0;
	sort(b.begin(), b.end());
//	sort(a.begin(), a.end());
	for (i = 0; i < a.size(); i++)
	{
		kk = a[i].first;
		sum = a[i].second;
		
		for (long long int j = 0; j + kk <= k; j++)
		{
			pair<long long int, long long int> ll = make_pair(j,x-sum);

			pair<long long int, long long int> uu = make_pair(j, y - sum);
			ans += upper_bound(b.begin(), b.end(), uu) - lower_bound(b.begin(), b.end(), ll);

		}
	}
	return ans;
}
 int main()
{

	long long int n, k, a, b;
	cin >> n >> k >> a >> b;
	long long int i;
	for (i = 0; i < n; i++)
		cin >> arr[i];

	fact(n);
	powerset(0,n/2);
	powerset((n / 2) + 1, n-1);
	
	cout<<mitm(n,a,b,k)<<"\n";
	return 0;
}
