#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#define maxn 50005
#define maxk 20
using namespace std;

int T,n,K;
int dist[maxn],cost[maxn];
int f[maxn][maxk];

int get(int low,int high) {
  int k = (int) floor(log(high - low + 1)/log(2));
  int g0 = f[low][k],g1 = f[high - (1 << k) + 1][k];
  return (cost[g0] < cost[g1]) ? g0 : g1;
}

long long rec(int low,int high,int fuelLeft) {
  if (high - low <= 1) return 1LL * max(0,dist[high] - dist[low] - fuelLeft) * cost[low];
  int mid = get(low + 1,high - 1);
  if (cost[mid] <= cost[low]) return rec(low,mid,fuelLeft) + rec(mid,high,0);
  else if (dist[mid] - dist[low] > K) return rec(low,mid,fuelLeft) + rec(mid,high,0);
  else {
    int nextReach = min(K,dist[high] - dist[low]);
    return 1LL * max(nextReach - fuelLeft,0) * cost[low] + rec(mid,high,max(nextReach,fuelLeft) - dist[mid] + dist[low]);
  }
}

int main() {
  scanf("%d", &T);
  while (T--) {
    scanf("%d %d", &n, &K);
    for (int i = 1; i <= n; i++) scanf("%d", &dist[i]);
    for (int i = 0; i < n; i++) scanf("%d", &cost[i]);

    for (int i = 0; i < n; i++) f[i][0] = i;
    for (int j = 1; (1 << j) <= n; j++)
      for (int i = 0; i + (1 << j) <= n; i++) {
        int g0 = f[i][j - 1],g1 = f[(i + (1 << (j - 1)))][j - 1];
	f[i][j] = (cost[g0] < cost[g1]) ? g0 : g1;
      }

    printf("%lld\n", rec(0,n,0));
  }
}
