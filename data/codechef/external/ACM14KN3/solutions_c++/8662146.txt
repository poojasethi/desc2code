#include<stdio.h>
#include<string.h>
#define getchar_unlocked getchar
#define putchar_unlocked putchar

inline long long int read_int() 
{
	register char c = getchar_unlocked();
	while(c<'0' || c>'9') 
		c = getchar_unlocked();
	long long int ret = 0;
	while(c>='0' && c<='9') 
	{
		ret = (ret<<3)+(ret<<1) + c - 48;
		c = getchar_unlocked();
	}
	return ret;
}
 
inline void fastwrite(long long int a)
{
	char snum[20];
	long long int i=0;
	do
	{
		snum[i++]=a%10+48;
		a=a/10;
	}while(a!=0);
	i=i-1;
	while(i>=0)
		putchar_unlocked(snum[i--]);
	putchar_unlocked('\n');
}

void merge(long long int arr[], long long int l, long long int m, long long int r)
{
    long long int i, j, k;
    long long int n1 = m - l + 1;
    long long int n2 =  r - m;
 
    long long int L[n1], R[n2];
 
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(long long int arr[], long long int l, long long int r)
{
    if (l < r)
    {
        long long int m = l+(r-l)/2; 
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

void cmerge(char arr[], long long int l, long long int m, long long int r)
{
    long long int i, j, k;
    long long int n1 = m - l + 1;
    long long int n2 =  r - m;
 
    long long int L[n1], R[n2];
 
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void cmergeSort(char arr[], long long int l, long long int r)
{
    if (l < r)
    {
        long long int m = l+(r-l)/2; 
        cmergeSort(arr, l, m);
        cmergeSort(arr, m+1, r);
        cmerge(arr, l, m, r);
    }
}


int main()
{
	long long int t, p, q, n, j, tempi;

	char s[101];
	t = read_int();
	while(t--)
	{
		scanf("%s", s);
		p = read_int();
		q = read_int();
	
		n = strlen(s);	
	
		cmergeSort(s, 0 ,n-1);
		
		while(q--)
		{
			j = read_int();
			if(j > (n*p))
				printf("-1\n");
			else
			{
				tempi = j/p;
				
				if(j%p == 0)
					printf("%c\n", s[tempi-1]);
				else
					printf("%c\n", s[tempi]);
			}
		}
	}
	
	return 0;
}