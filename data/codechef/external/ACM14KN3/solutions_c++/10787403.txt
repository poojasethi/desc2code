/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Parser in=new Parser(System.in);
		OutputWriter out=new OutputWriter(System.out);
		int t=in.nextInt();
		while(--t>=0)
		{
		    String s=in.next();
		    int P=in.nextInt();
		    int Q=in.nextInt();
		    char c[]=s.toCharArray();
		    Arrays.sort(c);
		    for(int i=0; ++i<=Q;)
		    {
		        int x=in.nextInt();
		        if(x>s.length()*P)
		           out.printLine(-1);
		        else
		           out.printLine(c[(x-1)/P]);
		    }
		}
		out.flush();
		out.close();
	}
	private static class Parser
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
        public Parser(InputStream in)
        {
            din = new DataInputStream(in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
        public int nextInt() throws Exception
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }
        public long nextLong() throws Exception
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }
        public String next() throws Exception
        {
            StringBuffer ret=new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char)c);
                c = read();
            } while (c > ' ');
            return ret.toString();
        }
        private void fillBuffer() throws Exception
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) buffer[0] = -1;
        }
        private byte read() throws Exception
        {
            if (bufferPointer == bytesRead) fillBuffer();
            return buffer[bufferPointer++];
        }
    }
    private static class OutputWriter
    {
        private final PrintWriter writer;
        public OutputWriter(OutputStream outputStream)
        {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }
        public OutputWriter(Writer writer)
        {
            this.writer = new PrintWriter(writer);
        }
        public void print(Object... objects)
        {
            for (int i = 0; i < objects.length; i++)
            {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }
        public void printLine(Object... objects)
        {
            print(objects);
            writer.println();
        }
        public void close()
        {
            writer.close();
        }
        public void flush()
        {
            writer.flush();
        }
    }
}
