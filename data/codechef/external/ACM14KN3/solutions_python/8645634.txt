import java.io.*;
import java.util.*;
import java.text.*;
class acm{
	public static long ar[];
	public static int bs(int lo,  int hi, long p){
		
	while (lo < hi){
      int mid = lo + (hi-lo)/2;    // note: division truncates
      if (ar[mid]>=p)
         hi = mid;
      else
         lo = mid+1;
	 }
          
   if (ar[lo]<p)
      return -1;                // p(x) is true for all x in S!
      
   else return lo;
}   
	public static void main(String[] args) throws Exception
    {
	   //new FileInputStream("input.txt");
		//new FileOutputStream("output.txt")
		InputReader in = new InputReader(System.in);
		OutputWriter out = new OutputWriter(System.out);
		int t=in.ri();
		for(int it=0;it<t;it++)
		{
			String s=in.rs();
			int pp=in.ri();
			int q=in.ri();
			ar=new long[26];
			Arrays.fill(ar,0);
			for(int i=0;i<s.length();i++)
			{
				long add=pp;
				ar[s.charAt(i)-97]+=add;
				
			}
			for(int i=1;i<26;i++)
			ar[i]=ar[i-1]+ar[i];
			for(int i=0;i<q;i++)
			{
				long n=in.rl();
				int p = -1;
				for (int a = 26; a >= 1; a /= 2) {
				while (p+a < 26 && ar[p+a] < n) p += a;}
				if(p+1<26&&ar[p+1]>=n)out.pl((char)(p+1+97));
				else out.pl("-1");
			/*int p=bs(0,25,n);
			//out.pl(p);
			if(p==-1)out.pl("-1");
			else {char ch=(char)(p+97);out.pl(ch);}*/
		}
		}
		
		
	  out.close();
	}
private static class InputReader
	{
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;
		 
		public InputReader(InputStream stream)
		{
			this.stream = stream;
		}
 
		public int read()
		{
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars)
			{
				curChar = 0;
				try
				{
					numChars = stream.read(buf);
				} catch (IOException e)
				{
					throw new InputMismatchException();
				}
				if (numChars <= 0)
				return -1;
			}
			return buf[curChar++];
		}
		        public String rs()
        {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do
            {
                res.appendCodePoint(c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        } 
		public int ri()
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-')
			{
				sgn = -1;
				c = read();
			}
			int res = 0;
			do
			{
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}
		public long rl() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }
		public boolean isSpaceChar(int c)
		{
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
 
		
 
		public interface SpaceCharFilter
		{
			public boolean isSpaceChar(int ch);
		}
	}
 
	private static class OutputWriter
	{
		private final PrintWriter writer;
 
		public OutputWriter(OutputStream outputStream)
		{
			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
		}
 
		public OutputWriter(Writer writer)
		{
			this.writer = new PrintWriter(writer);
		}
 		public void print(Object... objects)
		{
			for (int i = 0; i < objects.length; i++)
			{
				if (i != 0)
				writer.print(' ');
				writer.print(objects[i]);
			}
		}
		
		public void pf(double n)
		{
			writer.printf("%.2f%n", n);
		}
		public void pl(Object... objects)
		{
			print(objects);
			writer.println();
		}
 
		public void close()
		{
			writer.close();
		}
 
		public void flush()
		{
			writer.flush();
		}
 
	}
}
