#include <bits/stdc++.h>
using namespace std;
 
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define SL(x) scanf("%lld",&x)
#define SS(x) scanf("%s".x)
#define FOR(i, s, e) for(i = s; i < e; i++)
#define FORSQ(i, s, e) for(i = s; i*i< e; i++)
#define SA(a, s, e) for(i = s; i < e; i++) scanf( "%d" , &a[i])
#define SAL(a, s, e) for(i = s; i < e; i++) scanf( "%lld" , &a[i])
#define PA(a, s, e) for(i = s; i < e; i++) printf( "%d" , a[i])
#define P(x) printf("%d",x)
#define PL(x) printf("%lld",x)
#define PS(x) printf("%s",x)
 
#define SA2D(a, r, c) FOR(i,0,r) FOR(j,0,c) S(a[i][j])
#define PA2D(a, r, c) FOR(i,0,r){FOR(j,0,c)printf("%d",a[i][j])NL;}
 
#define ll long long int
#define llu unsigned long long int
 
#define NL printf("\n")
#define SP printf(" ")
#define pb push_back
#define mp make_pair
#define ppb pop_back
#define pii pair<int,int>
#define pll pair<ll,ll>
 
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,1,sizeof(a))
 
#define MOD 10007
#define ARRMAX 10000005
#define MAX INT_MAX
#define MIN INT_MIN
 
bool prime[ARRMAX];
int primes[ARRMAX],total_primes;
int before[ARRMAX];
template<class T>
T powe(T x,T n)
{
	if(n==0)
	return 1;
	T r=1,y=x;
	while(n>1)
	{
		if(n&1)
		r*=y;
		y*=y;
		n/=2;
	}
	r*=y;
	return r;
}
template<class T>
T modpow(T x,T n)
{
	if(n==0)
	return 1;
	T r=1,y=x;
	while(n>1)
	{
		if(n&1)
		{
			r*=y;
			r%=MOD;
		}
		y*=y;
		y%=MOD;
		n/=2;
	}
	r*=y;
	r%=MOD;
	return r;
}
template<class T>
T gcd(T a,T b)
{
	while(b>0)
	{
		a^=b;
		b^=a;
		a^=b;
		b%=a;
	}
	return a;
}
 
void seive()
{
	int i,j;
	SET(prime);
	prime[0]=prime[1]=false;
	for(i = 4; i < ARRMAX; i+= 2)
	prime[i]=false;
	for(i = 3; i*i < ARRMAX;i+= 2)
	if(prime[i])
		for(j = i*i; j < ARRMAX; j+= (i<<1))
			prime[j]=false;
}
void storeprimes()
{
	int i,j=0;
	FOR(i,0,ARRMAX)
	if(prime[i])
		primes[j++]=i;
	total_primes=j;
	before[1]=0;
	FOR(i,2,ARRMAX)
	{
		if(prime[i])
			before[i]=before[i-1]+1;
		else
			before[i]=before[i-1];
	}
}
int main()
{
	ll n;
	int x;
	seive();
	storeprimes();
	while(SL(n)!=EOF)
	{
		if(n==1)
		{
			cout<<0;
			NL;
			continue;
		}
		x=before[n];
		x=modpow(2,x-1);
		cout<<x;
		NL;
	}
	return 0;
} 