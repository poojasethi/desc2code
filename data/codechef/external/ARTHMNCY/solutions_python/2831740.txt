import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;


public class Main {

	InputReader input;
	PrintWriter output;
	BufferedReader inp;

	void run(){
		output = new PrintWriter(new OutputStreamWriter(System.out));
		input = new InputReader(System.in);
		inp = new BufferedReader(new InputStreamReader(System.in));
		solve();
		output.flush();
	}

	public static void main(String[] args){
		new Main().run();
	}
	
	
	long expo(int a, int b, long mod) {
		long x = 1;
		long y = a;
		while(b > 0) {
			if((b & 1) == 1) {
				x = (x * y) % mod;
			}
			y = (y * y) % mod;		//squaring the base
			b /= 2;
		}
		return x % mod;
	}
	
	void solve() {
		try {
			String nm = inp.readLine();
			SieveEratosthenes st = new SieveEratosthenes(10000050);
			while(nm != null) {
				int n =Integer.parseInt(nm);
				if(n == 1) {
					System.out.println("0");
					nm = inp.readLine();
					continue;
				}
				long res = expo(2, st.numTill[n] - 1, 10007);
				System.out.println(res);
				nm = inp.readLine();
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	class SieveEratosthenes {

		boolean[] notPrime;
		int[] numFactor;
		int[] primeStore;
		int[] numTill;
		public SieveEratosthenes(int max) {
			notPrime = new boolean[max+1];
			//numFactor = new int[max+10];
			//primeStore = new int[max+10];
			numTill = new int[max+10];
			int index = (int)Math.sqrt((double)max);
			// chnage to i <= max for correcting numFactors
			for(int i = 2; i <= index; i++) {
				if(!notPrime[i]) {
					//numFactor[i] = 1;
					for(int j = 2*i; j <= max; j += i) {
						notPrime[j] = true;
						//numFactor[j]++;
					}
				}
			}
			int ind = 0;
			for(int i = 2; i <= max; i++) {
				numTill[i] += numTill[i-1];
				if(isPrime(i)) {
					numTill[i]++;
					//primeStore[ind] = i;
					ind++;
				}
			}
		}
		/**
		 * Check if number n is prime
		 * @param n
		 * @return
		 */
		public boolean isPrime(int n) {
			return !(notPrime[n]);
		}

	}


	class InputReader {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars)
			{
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-')
			{
				sgn = -1;
				c = read();
			}
			int res = 0;
			do
			{
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuffer res = new StringBuffer();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public Long readLong() {
			return Long.parseLong(readString());
		}

		public java.lang.Double readDouble() {
			return java.lang.Double.parseDouble(readString());
		}

		public boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
	}

}