/** C++ Libraries**/

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <stack>
#include <vector>
/** TEMPLATES **/

namespace wstemp{/** www.wolfsyntax.blog.com **/
#define etype long long int
#define ri	register int
#define run(n) std::ios::sync_with_stdio((n));
#define loop(t) while((t--))
#define getc() getchar();
#define print(d,c) printf((d),(c));
#define T(a,b)	if((a) == 1) printf("Execution Time: %0.4f sec",((clock()-(b)) / CLOCKS_PER_SEC));
}


using namespace wstemp;								// call the templates
using namespace std;

inline void nextInt(ri &io){
	register etype c = getchar();
	io = 0; short int flag = 0;
	for(;((c < 48 || c > 57) && c != '-'); c = getchar()) ;
	if(c == '-'){
		flag = 1;
		c = getchar();
	}
	for(; c > 47 && c < 58; c = getchar()) 
	io = (io << 1 ) + (io << 3) + c - 48;	if(flag)
	io = -io;
}

/**


	Problem Code : ONP
	Problem Description :  | Transform the Expression
		
	Input : 

	Output : 

	Constraints : 

	Example : 

	Input : 

	Output : 



	Editorial | Explaination : 

***/





#ifndef S
#define S
	inline void syntax(){								// Code Fragments to be process
		/** freopen access mode : 
			"w" - write
			"r" - read
			"a" - append
			"r+" - read update
			"w+" - write update
			"a"+ - append update

Example: freopen(file.in,"r",stdin);

**/

		//freopen(filename,access mode,stdout/stdin);
		
		int test = 0; cin >> test;
		while(test--){
			string equation;
			stack<char> expressions;
			cin >> equation;
			
			for(int i = 0; i < equation.length(); i++)
				switch(equation[i]){
					case '(':
						break;
					case ')':
					{
						cout << expressions.top();
						expressions.pop();
						break;
					}
					case '+':
					case '-':
					case '*':
					case '/':
					case '^':
					{
						expressions.push(equation[i]);
						break;
					}
					default:
					{
						cout << equation[i];
						break;
					}
						
				
				}

			
			cout << endl;
		}//end while
		
			/* Enter your code here. Read input from Standard Input. Print output to Standard Output */

		//register double tx = 0; T(0,tx); cout << endl;				// execution time

	}

#endif

int main(){


	run(0) syntax();								// Function Call: Calls the function syntax() that contains process.
	

return 0;										// Successfully Terminate the program

}