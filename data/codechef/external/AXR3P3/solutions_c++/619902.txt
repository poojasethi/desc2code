#include <iostream>
#include <cstring>
#include <cctype>

using namespace std;
const int MAX = 1000 ;

class infix
{
	private :

		char target[MAX], stack[MAX] ;
		char *s, *t ;
		int top ;

	public :

		infix( ) ;
		void setexpr ( char *str ) ;
		void push ( char c ) ;
		char pop( ) ;
		void convert( ) ;
		int priority ( char c ) ;
		void show( ) ;
} ;

// initializes data members
infix :: infix( )
{
	top = -1 ;
	strcpy ( target, "" ) ;
	strcpy ( stack, "" ) ;
	t = target ;
	s = ""  ;
}

// sets s to point to given expr.
void infix :: setexpr ( char *str )
{
	s = str ;
}

// adds an operator to the stack
void infix :: push ( char c )
{
	if ( top == MAX );
		//cout << "\nStack is full\n" ;
	else
	{
		top++ ;
		stack[top] = c ;
	}
}

// pops an operator from the stack
char infix :: pop( )
{
	if ( top == -1 )
	{
		//cout << "\nStack is empty\n" ;
		return -1 ;
	}
	else
	{
		char item = stack[top] ;
		top-- ;
		return item ;
	}
}

// converts the given expr. from infix to postfix form
void infix :: convert( )
{
     //cout << "Hello" << endl;
	while ( *s )
	{
		if ( *s == ' ' || *s == '\t' )
		{
			s++ ;
			continue ;
		}
		if ( isdigit ( *s ) || isalpha ( *s ) )
		{
			while ( isdigit ( *s ) || isalpha ( *s ) )
			{
				*t = *s ;
				s++ ;
				t++ ;
			}
		}
		if ( *s == '(' )
		{
			push ( *s ) ;
			s++ ;
		}
		char opr ;
		if ( *s == '*' || *s == '+' || *s == '/' || *s == '%' || *s == '-' || *s == '^' )
		{
			if ( top != -1 )
			{
				opr = pop( ) ;
				while ( (priority(opr) >= priority(*s)))
				{
					*t = opr ;
					t++ ;
					opr = pop( ) ;
				}
			  if((int)opr != -1)
				push ( opr ) ;
				push ( *s ) ;
			}
			else
				push ( *s ) ;
			s++ ;
		}

		if ( *s == ')' )
		{
			opr = pop( ) ;
			while ( ( opr ) != '(' )
			{
				*t = opr ;
				t++ ;
				opr =  pop( ) ;
			}
			s++ ;
		}
		//cout << target << endl;
	}

    //cout << "End " << endl;
	while ( top != -1 )
	{
		char opr = pop( ) ;
		*t = opr ;
		t++ ;
	}

	*t = '\0' ;
}

// returns the priority of an operator
int infix :: priority ( char c )
{
	if ( c == '^' )
		return 10 ;
	if ( c == '/' )
		return 9 ;
	if ( c == '*')
	    return 8;
    if ( c == '-')
        return 7; 
    if ( c == '+')
        return 6;
    return -1;
}

// displays the postfix form of given expr.
void infix :: show( )
{
    cout << target ;
}

int main( )
{
    int t;
	char expr[MAX] ;
    
    cin >> t;
    
    while(t--)
    {
    
	infix q ;
	//cout << "\nEnter an expression in infix form: " ;
	cin >> expr;

    //cout << "The expr is " << expr << endl;
	q.setexpr ( expr ) ;
	q.convert( ) ;

	//cout << "\nThe postfix expression is: " ;
	q.show( ) ;
	cout << endl;
    }
	//system("pause");
}
