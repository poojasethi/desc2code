OPEN = '('
CLOS = ')'
OPER = '+-*/^'

def process(S, DEBUG=False):
    R = ''
    stack = []
    if DEBUG: print 'EXPRESSION %s' % S
    if DEBUG: print 'NEWSTACK %s' % stack
    for i in xrange(len(S)):
        if   S[i] not in OPEN+CLOS+OPER:
            R += S[i]
            if DEBUG: print 'OUTPUT %s' % S[i]
        elif S[i] in OPER:
            O1 = S[i]
            while stack and stack[-1] in OPER:
                O2 = stack[-1]
                if  DEBUG: print 'O1 %s O2 %s' % (O1, O2)
                if  OPER.index(O1) < OPER.index(O2):
                    O2  = stack.pop()
                    if DEBUG: print 'POP %s' % O2
                    if DEBUG: print 'NEWSTACK %s' % stack
                    R  += O2
                    if DEBUG: print 'OUTPUT %s' % O2
                else:
                    break
            stack.append(O1)
            if DEBUG: print 'PUSH %s' % O1
            if DEBUG: print 'NEWSTACK %s' % stack
        elif S[i] in OPEN:
            stack.append(S[i])
            if DEBUG: print 'PUSH %s' % S[i]
            if DEBUG: print 'NEWSTACK %s' % stack
        elif S[i] in CLOS:
            while stack and stack[-1] in OPER:
                O  = stack.pop()
                if DEBUG: print 'POP %s' % O
                if DEBUG: print 'NEWSTACK %s' % stack
                R += O
                if DEBUG: print 'OUTPUT %s' % O
            C = stack.pop()
            if DEBUG: print 'POP %s' % C
            if DEBUG: print 'NEWSTACK %s' % stack
    while stack:
        C  = stack.pop()
        if DEBUG: print 'POP %s' % C
        if DEBUG: print 'NEWSTACK %s' % stack
        R += C
        if DEBUG: print 'OUTPUT %s' % C
    if DEBUG: print 'RESULT %s' % R
    if DEBUG: print '*' * 80
    return R

def main():
    T = int(raw_input())
    for t in xrange(T):
        S = raw_input()
        print process(S)

main()
