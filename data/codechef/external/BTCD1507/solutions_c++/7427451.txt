	#include <cstring>
	#include <vector>
	#include <list>
	#include <map>
	#include <set>
	#include <deque>
	#include <stack>
	#include <bitset>
	#include <algorithm>
	#include <functional>
	#include <numeric>
	#include <utility>
	#include <sstream>
	#include <iostream>
	#include <iomanip>
	#include <cstdio>
	#include <cmath>
	#include <cstdlib>
	#include <ctime>
	#include <memory.h>
	#include <cassert>

	using namespace std;

	const int inf = (int)1e8;
	const int N = 1010;

	const pair <int, int> BAD = make_pair(inf, inf);

	int a[N][N], b[N][N];
	pair <int, int> upleft[N][N];
	pair <int, int> downleft[N][N];
	pair <int, int> upright[N][N];
	pair <int, int> downright[N][N];
	pair <int, int> meet_left[N][N];
	pair <int, int> meet_right[N][N];
	pair <int, int> meet_up[N][N];
	pair <int, int> meet_down[N][N];

	inline pair <int, int> add(pair <int, int> x, pair <int, int> y) {
	  return make_pair(x.first + y.first, x.second + y.second);
	}

	int main() {
	  int tt;
	  scanf("%d", &tt);
	  while (tt--) {
	    int h, w;
	    scanf("%d %d", &h, &w);
	    for (int i = 0; i < h; i++) {
	      for (int j = 0; j < w; j++) {
	        scanf("%d", &a[i][j]);
	        b[i][j] = 0;
	      }
	    }
	    int K;
	    scanf("%d", &K);
	    for (int i = 0; i < K; i++) {
	      int x, y;
	      scanf("%d %d", &x, &y);
	      x--; y--;
	      b[x][y]--;
	    }
	    if (a[0][0] == -1 || a[0][w - 1] == -1 || a[h - 1][0] == -1 || a[h - 1][w - 1] == -1) {
	      printf("%d\n", -1);
	      continue;
	    }
	    for (int i = 0; i < h; i++) {
	      for (int j = 0; j < w; j++) {
	        if (a[i][j] == -1) {
	          upleft[i][j] = BAD;
	          continue;
	        }
	        if (i == 0 && j == 0) {
	          upleft[i][j] = make_pair(b[i][j], a[i][j]);
	          continue;
	        }
	        pair <int, int> x = min(i == 0 ? BAD : upleft[i - 1][j], j == 0 ? BAD : upleft[i][j - 1]);
	        upleft[i][j] = make_pair(x.first + b[i][j], x.second + a[i][j]);
	      }
	    }
	    for (int i = h - 1; i >= 0; i--) {
	      for (int j = 0; j < w; j++) {
	        if (a[i][j] == -1) {
	          downleft[i][j] = BAD;
	          continue;
	        }
	        if (i == h - 1 && j == 0) {
	          downleft[i][j] = make_pair(b[i][j], a[i][j]);
	          continue;
	        }
	        pair <int, int> x = min(i == h - 1 ? BAD : downleft[i + 1][j], j == 0 ? BAD : downleft[i][j - 1]);
	        downleft[i][j] = make_pair(x.first + b[i][j], x.second + a[i][j]);
	      }
	    }
	    for (int i = 0; i < h; i++) {
	      for (int j = w - 1; j >= 0; j--) {
	        if (a[i][j] == -1) {
	          upright[i][j] = BAD;
	          continue;
	        }
	        if (i == 0 && j == w - 1) {
	          upright[i][j] = make_pair(b[i][j], a[i][j]);
	          continue;
	        }
	        pair <int, int> x = min(i == 0 ? BAD : upright[i - 1][j], j == w - 1 ? BAD : upright[i][j + 1]);
	        upright[i][j] = make_pair(x.first + b[i][j], x.second + a[i][j]);
	      }
	    }
	    for (int i = h - 1; i >= 0; i--) {
	      for (int j = w - 1; j >= 0; j--) {
	        if (a[i][j] == -1) {
	          downright[i][j] = BAD;
	          continue;
	        }
	        if (i == h - 1 && j == w - 1) {
	          downright[i][j] = make_pair(b[i][j], a[i][j]);
	          continue;
	        }
	        pair <int, int> x = min(i == h - 1 ? BAD : downright[i + 1][j], j == w - 1 ? BAD : downright[i][j + 1]);
	        downright[i][j] = make_pair(x.first + b[i][j], x.second + a[i][j]);
	      }
	    }
	    pair <int, int> ans = BAD;
	    for (int i = 1; i < h - 1; i++) {
	      for (int j = 1; j < w - 1; j++) {
	        if (a[i][j] == -1) {
	          continue;
	        }
	        {
	          pair <int, int> x = add(add(upleft[i][j - 1], downleft[i + 1][j]), add(upright[i - 1][j], downright[i][j + 1]));
	          ans = min(ans, make_pair(x.first + b[i][j], x.second + a[i][j]));
	        }
	        {
	          pair <int, int> x = add(add(upleft[i - 1][j], downleft[i][j - 1]), add(upright[i][j + 1], downright[i + 1][j]));
	          ans = min(ans, make_pair(x.first + b[i][j], x.second + a[i][j]));
	        }
	      }
	    }
	    for (int i = 0; i < h; i++) {
	      for (int j = 0; j < w; j++) {
	        if (a[i][j] == -1) {
	          meet_left[i][j] = BAD;
	          continue;
	        }
	        if (i == 0 && j == 0) {
	          meet_left[i][j] = downleft[i + 1][j];
	          continue;
	        }
	        if (i == h - 1 && j == 0) {
	          meet_left[i][j] = upleft[i - 1][j];
	          continue;
	        }
	        meet_left[i][j] = BAD;
	        meet_left[i][j] = min(meet_left[i][j], add(i > 0 ? upleft[i - 1][j] : BAD, i < h - 1 ? downleft[i + 1][j] : BAD));
	        meet_left[i][j] = min(meet_left[i][j], add(j > 0 ? upleft[i][j - 1] : BAD, i < h - 1 ? downleft[i + 1][j] : BAD));
	        meet_left[i][j] = min(meet_left[i][j], add(i > 0 ? upleft[i - 1][j] : BAD, j > 0     ? downleft[i][j - 1] : BAD));
	      }
	    }
	    for (int i = 0; i < h; i++) {
	      for (int j = 0; j < w; j++) {
	        if (a[i][j] == -1) {
	          meet_right[i][j] = BAD;
	          continue;
	        }
	        if (i == 0 && j == w - 1) {
	          meet_right[i][j] = downright[i + 1][j];
	          continue;
	        }
	        if (i == h - 1 && j == w - 1) {
	          meet_right[i][j] = upright[i - 1][j];
	          continue;
	        }
	        meet_right[i][j] = BAD;
	        meet_right[i][j] = min(meet_right[i][j], add(i > 0     ? upright[i - 1][j] : BAD, i < h - 1 ? downright[i + 1][j] : BAD));
	        meet_right[i][j] = min(meet_right[i][j], add(j < w - 1 ? upright[i][j + 1] : BAD, i < h - 1 ? downright[i + 1][j] : BAD));
	        meet_right[i][j] = min(meet_right[i][j], add(i > 0     ? upright[i - 1][j] : BAD, j < w - 1 ? downright[i][j + 1] : BAD));
	      }
	    }
	    for (int i = 0; i < h; i++) {
	      pair <int, int> best = BAD;
	      for (int j = 0; j < w; j++) {
	        if (a[i][j] == -1) {
	          best = BAD;
	          continue;
	        }
	        ans = min(ans, add(add(best, meet_right[i][j]), make_pair(b[i][j], a[i][j])));
	        best = min(best, meet_left[i][j]);
	        best = add(best, make_pair(b[i][j], a[i][j]));
	      }
	    }
	    for (int i = 0; i < h; i++) {
	      for (int j = 0; j < w; j++) {
	        if (a[i][j] == -1) {
	          meet_up[i][j] = BAD;
	          continue;
	        }
	        if (i == 0 && j == 0) {
	          meet_up[i][j] = upright[i][j + 1];
	          continue;
	        }
	        if (i == 0 && j == w - 1) {
	          meet_up[i][j] = upleft[i][j - 1];
	          continue;
	        }
	        meet_up[i][j] = BAD;
	        meet_up[i][j] = min(meet_up[i][j], add(j > 0 ? upleft[i][j - 1] : BAD, j < w - 1 ? upright[i][j + 1] : BAD));
	        meet_up[i][j] = min(meet_up[i][j], add(i > 0 ? upleft[i - 1][j] : BAD, j < w - 1 ? upright[i][j + 1] : BAD));
	        meet_up[i][j] = min(meet_up[i][j], add(j > 0 ? upleft[i][j - 1] : BAD, i > 0     ? upright[i - 1][j] : BAD));
	      }
	    }
	    for (int i = 0; i < h; i++) {
	      for (int j = 0; j < w; j++) {
	        if (a[i][j] == -1) {
	          meet_down[i][j] = BAD;
	          continue;
	        }
	        if (i == h - 1 && j == 0) {
	          meet_down[i][j] = downright[i][j + 1];
	          continue;
	        }
	        if (i == h - 1 && j == w - 1) {
	          meet_down[i][j] = downleft[i][j - 1];
	          continue;
	        }
	        meet_down[i][j] = BAD;
	        meet_down[i][j] = min(meet_down[i][j], add(j > 0     ? downleft[i][j - 1] : BAD, j < w - 1 ? downright[i][j + 1] : BAD));
	        meet_down[i][j] = min(meet_down[i][j], add(i < h - 1 ? downleft[i + 1][j] : BAD, j < w - 1 ? downright[i][j + 1] : BAD));
	        meet_down[i][j] = min(meet_down[i][j], add(j > 0     ? downleft[i][j - 1] : BAD, i < h - 1 ? downright[i + 1][j] : BAD));
	      }
	    }
	    for (int j = 0; j < w; j++) {
	      pair <int, int> best = BAD;
	      for (int i = 0; i < h; i++) {
	        if (a[i][j] == -1) {
	          best = BAD;
	          continue;
	        }
	        ans = min(ans, add(add(best, meet_down[i][j]), make_pair(b[i][j], a[i][j])));
	        best = min(best, meet_up[i][j]);
	        best = add(best, make_pair(b[i][j], a[i][j]));
	      }
	    }
	    assert(ans.first >= -K);
	    printf("%d\n", ans.first == -K ? ans.second : -1);
	  }
	  return 0;
	}
