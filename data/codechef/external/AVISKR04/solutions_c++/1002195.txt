#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <set>
#include <utility>
using namespace std;

#define N 101
#define FF for(i=0; i<n; i++)for(j=0; j<n; j++)

typedef long long ll;
typedef pair<int,int> ii;

int main(){
    int t, n, i, j, h, cnt, x, y;
    int mark[N][N], dx[4] = {1,-1,0,0}, dy[4] = {0,0,1,-1};
    ll k, m, ans, dif, val, d;
    ll table[N][N];
    set<pair<ll,ii> > live;
    scanf("%d",&t);
    while (t--) {
        scanf("%d %lld %lld", &n, &k, &m);
        live.clear();
        cnt=0;
        memset(mark, 0, sizeof(mark));
        FF{
            scanf("%lld", &table[i][j]);
            m -= table[i][j];
            if(table[i][j] >= k)
            {
                mark[i][j]=1;
                cnt++;
            }
        }
        FF
            if (!mark[i][j]) {
                for(h=0; h<4; h++){
                    x = i + dx[h];
                    y = j + dy[h];
                    if (0 <= x && x < n && 0 <= y && y < n && table[x][y] >= k) break;
                }
                if (h < 4){
                    mark[i][j]=1;
                    cnt++;
                    live.insert(make_pair(-table[i][j], make_pair(i,j)));
                }
            };
        if (m <= 0)
            {
            printf("0\n");
            continue;
            }
        if (cnt == 0)
            {
            printf("Not possible\n");
            continue;
            }
        ans=dif=0;
        while(true){
            if(live.empty()) {
                ans += (m+cnt-1)/cnt;
                break;
            }
            pair<ll, ii> p = *live.begin();
            val = -p.first + dif;
            i = p.second.first;
            j = p.second.second;
            d = k - val;
            if (m <= d*cnt){
                ans += (m+cnt-1)/cnt;
                break;
            }
            ans += d;
            m -= cnt*d;
            dif += d;
            live.erase(live.begin());
            for (h=0; h<4; h++){
                x = i+dx[h];
                y = j+dy[h];
                if(0 <= x && x < n && 0 <= y && y < n && !mark[x][y]){
                    mark[x][y]=1;
                    cnt++;
                    live.insert(make_pair(-table[x][y]+dif, make_pair(x,y)));
                }
            }
        }
        printf("%lld\n",ans);
    }
    return 0;
}
