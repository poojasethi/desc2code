#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <vector>
#include <string>
#include <cstring>

using namespace std;

#define PI acos(-1.0)
#define MP make_pair
#define PB push_back
#define SET(a,v) memset(a, v, sizeof(a))

#define VI vector <int>
#define PII pair <int, int>
#define LL long long 

#define FOR(i,a,b) for (int i = a; i <= b; i++)
#define FORD(i,a,b) for (int i = a; i >= b; i--)
#define REP(i,a,b) for (int i = a; i < b; i++)
#define REPD(i,a,b) for (int i = a; i > b; i--)
#define FIT(it,v) for (typeof(v.begin()) it = v.begin(); it != v.end(); it++)
#define FITD(it,v) for (typeof(v.rbegin()) it = v.rbegin(); it != v.rend(); it++)
#define FALL(i,v) for (int i = 0; i < (v.size()); i++)

#define maxn 110

LL a[maxn][maxn];
int n;
LL m, k;
int cd[] = {0, 1, -1, 0};
int cc[] = {-1, 0, 0, 1};
bool OK[maxn][maxn];

set< pair<LL, PII> > heap;

int main() {
    //freopen("a.in", "r", stdin); freopen("a.out", "w", stdout);
    int _;
    int x, y, u, v, cnt = 0;
    LL res = 0, dif = 0, val, d;
    

    cin >> _;
    while (_--) {
          
          scanf("%d%lld%lld", &n, &k, &m);
          FOR (i, 1, n)
          FOR (j, 1, n) {
              scanf("%lld", &a[i][j]);
              m -= a[i][j]; 
          }      
          
          if (m <= 0) {
             printf("0\n");
             continue;      
          }
          
          heap.clear();          
          SET (OK, false);
          FOR (i, 1, n)
          FOR (j, 1, n) OK[i][j] = (a[i][j] >= k);
          
          FOR (i, 1, n)
          FOR (j, 1, n)
              if (a[i][j] < k) {
                 FOR (h, 0, 3) {
                     x = i + cd[h];
                     y = j + cc[h];
                     
                     if (1 <= x && 1 <= y && x <= n && y <= n && a[x][y] >= k) {
                        OK[i][j] = true;
                        heap.insert(MP(-a[i][j], MP(i, j)));
                        break;      
                     }
                 }
              }
              
          cnt = 0;
          FOR (i, 1, n)
          FOR (j, 1, n) if (OK[i][j]) cnt ++;
          
          if (cnt == 0) {
             printf ("Not possible\n");        
             continue;
          }
          
          res = 0;
          dif = 0;
          while (1) {
                if (heap.empty()) {
                   res += (m + cnt - 1)/cnt;
                   break;                        
                } 
                
                pair<LL, PII > p = (*heap.begin());
                u = p.second.first;
                v = p.second.second;
                
                val = - p.first + dif;
                d = k - val;
                if (m <= d * cnt) {
                   res += (m + cnt - 1)/cnt;
                   break;      
                }
                
                dif += d;
                res += d;
                m -= d * cnt;
                heap.erase(heap.begin());
                
                FOR (h, 0, 3) {
                    x = u + cd[h];
                    y = v + cc[h];
                    if (1 <= x && 1 <= y && x <= n && y <= n && OK[x][y] == false) {
                       OK[x][y] = true;
                       cnt++;
                       heap.insert(MP(-a[x][y] + dif, MP(x, y)));      
                    }    
                }
          }
          printf("%lld\n", res);
    }
    return 0;   
}
