#include <bits/stdc++.h>
using namespace std;
const int N = (1e5+1000);
int a[N], F[512][N], n, buc, id[N], lazy[512];
map<int, pair<int,int> > Mp;

int update(int l, int r, int x){
    int idx = id[l];
    int idy = id[r];

    for (int i=idx+1; i<idy; i++){
        lazy[i] = (lazy[i] + x)%n;
    }

    if (idx == idy){
        for (int i=l; i<=r; i++){
            int old = a[i];
            F[idx][old]--;
            a[i] = (a[i] + x)%n;
            F[idx][a[i]]++;
        }
        return 0;
    }

    pair<int,int> p = Mp[idx];
    for (int i=l; i<=p.second; i++){
        int old = a[i];
        F[idx][old]--;
        a[i] = (a[i] + x)%n;
        F[idx][a[i]]++;
    }

    p = Mp[idy];
    for (int i=p.first; i<=r; i++){
        int old = a[i];
        F[idy][old]--;
        a[i] = (a[i] + x)%n;
        F[idy][a[i]]++;
    }
    return 0;
}

int query(int l, int r, int x){
    int idx = id[l];
    int idy = id[r];
    int ret = 0;
    for (int i = idx+1; i<idy; i++){
        int del = lazy[i];
        int lf = (x - del + n)%n;
        ret+=F[i][lf];
    }

    if (idx == idy){
        //cout<<"here\n";
        int cnt = 0;
        for (int i=l; i<=r; i++){
            int val = (a[i] + lazy[idx])%n;
            if (val==x){
                cnt++;
            }
        }
        return cnt;
    }

    pair<int,int> p = Mp[idx];
    for (int i=l; i<=p.second; i++){
        int val = (a[i] + lazy[idx])%n;
        if (val==x){ret++;}
    }

    p = Mp[idy];
    for (int i=p.first; i<=r; i++){
        int val = (a[i] + lazy[idy])%n;
        if (val==x){ret++;}
    }
    return ret;
}

int main(){
    //freopen("in.txt","r",stdin);
    ios_base::sync_with_stdio(0) ;
    cin.tie(0);
    int q;
    cin>>n>>q;
    for (int i=1; i<=n; i++){
        cin>>a[i];
    }

    buc = n/499;
    if (n%499){
        buc++;
    }

    for (int i=1; i<=buc; i++){
        int st = (i-1)*499;
        int en = st + (499 - 1);
        Mp[i] = make_pair(st,en);
        for (int j=st; j<=en; j++){
            id[j] = i;
            int t = a[j];
            F[i][t]++;
        }
    }

    //cout<<"done "<<endl;

    int t,l,r,x;

    while (q--){
        cin>>t;
        if (t==1){
            cin>>l>>r>>x;
            l++; r++;
            //cout<<"updating \n";
            update(l,r,x);
            //cout<<"done"<<endl;
            ///update()
        }
        else {
            cin>>l>>r>>x;
            l++; r++;
            //cout<<"query " <<endl;
            cout<<query(l,r,x)<<"\n";
            //cout<<"done "<<endl;
        }
    }
}
