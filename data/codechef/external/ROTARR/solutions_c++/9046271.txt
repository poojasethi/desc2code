#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1e5 + 9,SQRT = 330;

int N,Q,type,l,r,x;
int A[MAXN];
long long lazy[MAXN];
int cnt[SQRT][MAXN];
int sq = 0;

int main (){
	scanf("%d %d",&N,&Q);
	while(sq * sq <= N) ++sq;
	for(int i  = 0;i < N;++i){
		scanf("%d",&A[i]);
	}
	for(int block = 0;block * block <= N;++block){
		int l = block * sq, r = min(N - 1,(block + 1) * sq - 1);
		for(int j = l;j <= r;++j)
			cnt[block][A[j]]++;
	}
	while(Q--){
		scanf("%d %d %d %d",&type,&l,&r,&x);
		if(type == 1){
			for(int block = 0;block * block <= N;++block){
				int left = block * sq, right = min(N - 1,(block + 1) * sq - 1);
				if(right < l || left > r || left > right) continue;
				if(left >= l && right <= r) 
					lazy[block] = (lazy[block] + x) % N;
				else {
				   for(int idx = max(l,left);idx <= min(r,right);++idx){
				   	   cnt[block][A[idx]]--;
				   	   A[idx] = (A[idx] + x) % N;
				   	   cnt[block][A[idx]]++;
				   }
				}
			}
		} else {
			int res = 0;
			for(int block = 0;block * block <= N;++block){
				int left = block * sq, right = min(N - 1,(block + 1) * sq - 1);
				if(right < l || left > r || left > right) continue;
				if(left >= l && right <= r)
					res += cnt[block][(x - lazy[block] + N) % N];
				else {
				   for(int idx = max(l,left);idx <= min(r,right);++idx){
					  if((A[idx] + lazy[block]) % N == x)
						++res;
				   }	
				}
			}
			printf("%d\n",res);
		}
	}
	return 0;
}
