#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <sstream>
#include <cmath>
#include <cassert>
#include <memory.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define sz(a) (int)(a).size()
#define _(a,b) memset((a), (b), sizeof(a))

void prepare()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
}

const int maxn = 100005;

int pr[maxn];
vector<int> v[maxn];
vector<int> g[maxn];
int p[maxn];
vector<int> c[maxn][33];
int col[maxn];

int fnd(int k)
{
	if (k != p[k])
		return p[k] = fnd(p[k]);
	return p[k];
}

int n;

bool used[maxn];

void dfs(int k)
{
	if (used[k])
		return;
	used[k] = true;
	for (int i = 0; i < sz(v[k]); i++)
	{
		if (!used[v[k][i]])
		{
			g[k].pb(v[k][i]);
			dfs(v[k][i]);
		}
	}
}

void dfs2(int k, int pp)
{
	pr[k] = pp;
	for (int i = 0; i < sz(g[k]); i++)
	{
		if (g[k][i] != pp)
			dfs2(g[k][i], k);
	}
}

bool solve()
{
	scanf("%d", &n);
	int x, y;
	_(pr, -1);
	for (int i = 0; i < n - 1; i++)
	{
		scanf("%d%d", &x, &y);
		v[x].pb(y);
		v[y].pb(x);
		//pr[y] = x;
	}
	dfs(0);
	dfs2(0, -1);
	int q;
	scanf("%d", &q);
	for (int i = 0; i <= n; i++)
		p[i] = i;
	for (int i = 0; i < q; i++)
	{
		int t, a, b;
		scanf("%d%d%d", &t, &a, &b);
		if (t == 1)
		{
			col[a] = b;
			if (pr[a] >= 0 && col[pr[a]] == b)
			{
				if (rand() & 1)
					p[fnd(a)] = fnd(pr[a]);
				else
					p[fnd(pr[a])] = fnd(a);
			}
			for (int i = 0; i < sz(c[a][b]); i++)
			{
				if (rand() & 1)
					p[fnd(a)] = fnd(c[a][b][i]);
				else
					p[fnd(c[a][b][i])] = fnd(a);
			}
			if (pr[a] >= 0)
				c[pr[a]][b].pb(a);
		}
		else
		{
			printf(fnd(a) == fnd(b) ? "YES\n" : "NO\n");
		}
	}
	return false;
}

int main()
{
	prepare();
	while (solve());
	return 0;
}