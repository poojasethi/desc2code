#include <iostream>
#include <cstring>
#include <vector>

using namespace std;

int dp[20][1<<19];
vector<int> v[20];
int n;

int solve(int pos, int mask)
{
        if(pos == n) return 1;
        if(dp[pos][mask] != -1) return dp[pos][mask];
        int ans = 0;
        for(int i = 0; i < v[pos].size(); i++) {
            if(mask&(1<<(v[pos][i]))) {
                ans = (ans + solve(pos+1, mask^(1<<(v[pos][i]))))%1000000003;
            }
        }
        return dp[pos][mask] = ans;
}

int main()
{
    int t;

    cin >> t;

    while(t--) {
        memset(dp, -1, sizeof(dp));

        int m;

        cin >> n >> m;
        for(int i = 0; i < n; i++) {
            v[i].clear();
        }
        for(int i = 0; i < m; i++) {
            int x,y;

            cin >> x >> y;
            v[x].push_back(y-n);
        }
        cout << solve(0, (1<<n)-1) << endl;
    }
}
