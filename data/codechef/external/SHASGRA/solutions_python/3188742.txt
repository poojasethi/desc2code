import java.io.OutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author karan173
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		FastReader in = new FastReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		GoodBoyEshwar solver = new GoodBoyEshwar();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class GoodBoyEshwar
{
    int n,m;
    boolean adj[][];
    long dp[][];
    static final long MOD = (long) (1e9 + 3);
    public void solve(int testNumber, FastReader in, PrintWriter out)
    {
        n = in.ni ();
        m = in.ni ();
        adj = new boolean[n+1][n+1];
        for (int i = 0; i < m; i++)
        {
            int u = in.ni ();
            int v = in.ni ();
            v-=n;
            u++;
            v++;
            adj[u][v] = true;
        }
        dp = new long[1 << n][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++)
        {
            //match ith boy
            for (int j = 0; j < (1 << n); j++)
            {
                for (int k = 0; k < n; k++)
                {
                    if (((1 << k) & j) != 0)
                    {
                        if (adj[i][k + 1])
                        {
                            //match ith boy with (k+1) th girl
                            dp[j][i] += dp[j - (1 << k)][i - 1];
                            if (dp[j][i] >= MOD)
                            {
                                dp[j][i] -= MOD;
                            }
                        }
                    }
                }
            }
        }
        out.println (dp[(1 << n) - 1][n]);
    }
}

class FastReader
{

    public InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastReader(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
        {
            throw new InputMismatchException ();
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                throw new InputMismatchException ();
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int ni()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read ();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
            {
                throw new InputMismatchException ();
            }
            res *= 10;
            res += c - '0';
            c = read ();
        } while (!isSpaceChar (c));
        return res * sgn;
    }

    public String ns()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        StringBuilder res = new StringBuilder ();
        do
        {
            res.appendCodePoint (c);
            c = read ();
        } while (!isSpaceChar (c));
        return res.toString ();
    }

    public boolean isSpaceChar(int c)
    {
        if (filter != null)
        {
            return filter.isSpaceChar (c);
        }
        return isWhitespace (c);
    }

    public static boolean isWhitespace(int c)
    {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String next()
    {
        return ns ();
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}
