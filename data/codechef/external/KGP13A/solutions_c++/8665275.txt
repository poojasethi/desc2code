#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
int connecttoHQ[51];

int to;
int weight;
int distant[51][51];
#define inf 1000000000
int main()
{
  int t;// test cases
  scanf("%d",&t);
  int tc=1;
  while(t--){
    int k;
    int p;// no of pairs connected to
    int to,weight;
    scanf("%d",&k);
    for(int i=0;i<51;i++){//marked all dist as infinite
      for(int j=0;j<51;j++){
        distant[i][j]=inf;
      }
      distant[i][i]=0;
    }
    for(int i=1;i<=k;i++)
    {
      scanf("%d",&connecttoHQ[i]);//  0 0r 1
      scanf("%d",&p);
      for(int j=1;j<=p;j++){
        scanf("%d %d",&to,&weight);
        distant[i][to]=weight;// 1 connected to 2 weight 10 and so
        distant[to][i]=weight;
      }
    } // finding distance between all nodes
    for(int t=1;t<=k;t++)// intermediate vertices
    {
      for(int i=1;i<=k;i++){// source vertices
        for(int j=1;j<=k;j++){// destination vertices
          if(distant[i][t]+distant[t][j]<distant[i][j])
            distant[i][j]=distant[i][t]+distant[t][j];
        }
      }
    }
    
    int best=inf;

    for(int u=1;u<=k;u++){// u and v are source and destination
      if(!connecttoHQ[u])
        continue;
      for(int v=u+1;v<=k;v++){
        if(!connecttoHQ[v])
          continue;
        int cur=0;

        for(int w=1;w<=k;w++){
          int temp=inf;
          for(int x=1;x<=k;x++)
          {
            if (distant[u][x]+distant[v][x]==distant[u][v])
              temp=min(temp,distant[w][x]);
          }
          cur+=temp;
          //printf("%d %d %d : %d\n",u,v,w,temp);
        }
        //printf("%d %d : %d\n",u,v,cur);
        best=min(cur,best);
      }
    }
    printf("Case %d: %d\n",tc++,best);
  }


  return 0;
}
