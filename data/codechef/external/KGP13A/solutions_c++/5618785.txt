#include <bits/stdc++.h>
using namespace std;

#define	pii pair<int,int>
#define	vi vector<int>
#define	mp make_pair
#define	pb push_back
#define X first
#define Y second
#define	ill int long long
#define INF 1000000000

int k;
int visited[55];
int doori[55];
vector <pii> v[55];
vi head,path;

int bigbfs(int index){
	int curr,temp,source,sink,ans,res=INF,dis;
	memset(visited,0,sizeof visited);
	source = head[index];
	queue <int> Q;
	Q.push(source);
	visited[source] = INF;
	while(!Q.empty()){
		curr = Q.front(); Q.pop();
		for(int i=0;i<v[curr].size();i++){
			temp = v[curr][i].X;
			if(!visited[temp]){
				Q.push(temp);
				visited[temp] = curr;
			}
		}
	}
	for(int i=index+1;i<head.size();i++){
		sink = head[i]; temp = sink;
		while(true){
			path.pb(temp);
			if(temp == source) break;
			temp = visited[temp];
		}
		memset(doori,-1,sizeof doori);
		for(int i=0;i<path.size();i++){
			Q.push(path[i]);
			doori[path[i]] = 0; 
		}
		path.clear();
		while(!Q.empty()){
			curr = Q.front(); Q.pop();
			for(int i=0;i<v[curr].size();i++){
				temp = v[curr][i].X; dis = v[curr][i].Y;
				if(doori[temp] == -1){
					Q.push(temp);
					doori[temp] = doori[curr] + dis;
				}
			}
		}
		ans = 0;
		for(int i=1;i<=k;i++) ans += doori[i];
		res = min(ans,res);
	}
	return res;
}

void solve(){
	int flag,d,a,b,res=INF;
	scanf("%d",&k);
	for(int i=1;i<=k;i++){
		scanf("%d %d",&flag,&d);
		if(flag) head.pb(i);
		for(int j=1;j<=d;j++){
			scanf("%d %d",&a,&b);
			v[i].pb(mp(a,b));
		}
	}
	for(int i=0;i<head.size();i++){
		res = min(bigbfs(i),res);
	}
	for(int i=1;i<=k;i++) v[i].clear();
	head.clear();
	cout<<res<<endl;
	return;
}

int main(){
	int t;
	scanf("%d",&t);
	for(int i=0;i<t;i++){
		printf("Case %d: ",i+1);
		solve();
	}
	return 0;
}