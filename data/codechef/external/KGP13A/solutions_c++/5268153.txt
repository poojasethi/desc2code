/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <complex>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FF(i,a,n) for(i=(a);i<(n);++i)
#define REP(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define MAX(a,b) ((a)>(b)?(a):(b))
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

vector<int> head;
vector<int> g[55];
vector<int> w[55];
int is[55];

bool vis[55];

int main() {
    input();

    int t; S(t);
    int tst = 1;
    while ( t-- ) {
        head.clear();
        F(i,0,55) {
            g[i].clear(); w[i].clear();
        }
        int n; S(n);
        F(i,0,n) {
            S(is[i]); if ( is[i] ) head.pb(i);
            int k; S(k);
            F(j,0,k) {
                int u,v; S(u); S(v); u--;
                g[i].pb(u); w[i].pb(v);
                g[u].pb(i); w[u].pb(v);
            }
        }

        int ans = 1000000000;

        F(start,0,head.size()) {
            F(end,start,head.size()) {

                int S = head[start], E = head[end];
                // cout << S << " " << E << endl;
                M(vis,0);
                int par[55];
                queue<int> q;
                q.push(S); vis[S] = 1; par[S] = -1;
                while ( !q.empty() ) {
                    int whr = q.front(); q.pop();
                    F(i,0,g[whr].size()) {
                        int nx = g[whr][i];
                        if ( vis[nx] ) continue;
                        vis[nx] = 1; q.push(nx); par[nx] = whr;                        
                    }
                }
                int onpath[55];
                F(i,0,n) onpath[i] = 0;
                int x = E;
                while ( x != -1 ) {
                    //cout << x<< " ";
                    onpath[x] = 1;
                    x = par[x];
                } //cout << endl;

                int tot = 0;
                F(node,0,n) {
                    int mn = 1000000000;
                    queue<int> q,d;
                    M(vis,0);
                    q.push(node); d.push(0);
                    vis[node] = 1;
                    while ( !q.empty() ) {
                        int whr = q.front(); q.pop();
                        int dis = d.front(); d.pop();
                        if ( onpath[whr] ) {
                            mn = min(mn,dis);
                        }
                        F(i,0,g[whr].size()) {
                            int nx = g[whr][i];
                            int c = w[whr][i];
                            if ( vis[nx] ) continue;
                            vis[nx] = 1;
                            q.push(nx); d.push(dis+c);
                        }
                    }
                    tot += mn;
                }

                ans = min(ans,tot);

            }
        }


        printf("Case %d: %d\n", tst++, ans);
    }

    return 0;
}