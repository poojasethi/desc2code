#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long
#define pb push_back
const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}
int type[500];
ll dist[505][505];
int n;
bool onPath(int i,int j,int k)
{
    if (dist[i][j]==dist[i][k]+dist[k][j])
        return true;
    return false;
}
ll evaluate(int i,int j)
{
    ll ans=0;
    for(int k=1;k<=n;++k)
    {
        if(onPath(i,j,k))
            continue;

        ll best=infinity;
        for(int w=1;w<=n;++w)
        {
            if(onPath(i,j,w))
                best=min(best,dist[k][w]);
        }
        ans+=best;
    }
    return ans;
}
int main()
{
  std::ios::sync_with_stdio(false);
  

  int t;
  cin>>t;
  int tt=0;
  while(t--)
  {
    cout<<"Case "<<++tt<<": ";
    cin>>n;
    ll s=0;
    for(int i=1;i<=n;++i)
        for(int j=1;j<=n;++j)
            dist[i][j]=infinity;
    for(int i=1;i<=n;++i)
    {

        cin>>type[i];
        int x;
        cin>>x;

        while(x--)
        {
            int u,d;
            cin>>u>>d;
            s+=d;
            dist[i][u]=d;
            dist[u][i]=d;
        }

        dist[i][i]=0;
    }
    s/=2;
    for(int k=1;k<=n;++k)
        for(int i=1;i<=n;++i)
            for(int j=1;j<=n;++j)
                dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);

    ll ans=infinity;
    for(int i=1;i<=n;++i)
    {
        if(type[i]==0)
            continue;
        for(int j=1;j<=n;++j)
        {
            if(type[j]==0)
                continue;
            ans=min(ans,evaluate(i,j));
        }
    }
    cout<<ans<<endl;
  }





  
}