#include<iostream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<cstring>
#include<cmath>
#include<queue>
#include<map>
#include<vector>
#include<stack>
#include<set>
#include<fstream>
#define pb push_back
#define mp make_pair
#define Inf 1e17
#define M 100
#define Mod 1000000007
using namespace std;

vector<int> graph[M];
long long dist[M][M],fin,ans,n;
bool done[M],boss[M];
vector<pair<int,long long> > v;

void DFS(int node)
{
    done[node]=true;
    int i,child;
    long long res;
    vector<pair<int,long long> > u;
    u=v;
    res=ans;
    for(i=0;i<n;i++)
    {
        if(v[i].second>dist[i][node])
        {
            ans+=dist[i][node]-v[i].second;
            v[i].second=dist[i][node];
        }
    }
    if(boss[node])
    {
        fin=min(fin,ans);
    }
    for(i=0;i<graph[node].size();i++)
    {
        child=graph[node][i];
        if(!done[child])
        {
            DFS(child);
        }
    }
    v=u;
    ans=res;
    return ;
}

int main()
{
    int i,j,k,t,Case;
    scanf("%d",&t);
    Case=0;
    while(t--)
    {
        Case++;
        int m,x,y,tt;
        scanf("%d",&n);
        for(i=0;i<n;i++)
            for(j=0;j<n;j++)
            {
                if(i!=j) dist[i][j]=Inf;
                else dist[i][j]=0;
            }
        fill(boss,boss+n,false);
        for(i=0;i<n;i++)
        {
            scanf("%d",&tt);
            if(tt) boss[i]=true;
            else boss[i]=false;
            scanf("%d",&m);
            while(m--)
            {
                scanf("%d %d",&x,&y);
                x--;
                graph[i].pb(x);
                dist[i][x]=y;
            }
        }
        for(k=0;k<n;k++)
        {
            for(i=0;i<n;i++)
                for(j=0;j<n;j++)
            {
                dist[i][j]=min(dist[i][k]+dist[k][j],dist[i][j]);
            }
        }
        fin=Inf;
        for(i=0;i<n;i++)
        {
            if(boss[i])
            {
                ans=0;
                for(j=0;j<n;j++)
                {
                    ans+=dist[i][j];
                    v.pb(mp(j,dist[i][j]));
                }
                fill(done,done+n,false);
                DFS(i);
                v.clear();
            }
        }
        cout<<"Case "<<Case<<": "<<fin<<endl;
        for(i=0;i<n;i++) graph[i].clear();
    }
    return 0;
}
