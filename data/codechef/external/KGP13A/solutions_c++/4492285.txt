#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <bitset>

using namespace std;

#define INF 1000000000

int test,n,k,num=0,d,ans,sum;
int Adj[55][55];
vector<int> vec;
/*
#define inchar getchar_unlocked

inline int inp() {
      int n=0, ch;
      while((ch = inchar()) < '0');
      n=(ch-'0');
      while((ch=inchar())>='0') n=(n<<3)+(n<<1)+(ch-'0');
      return n;
}

*/
int main()
 {
   //test = inp();
   scanf("%d",&test);
   while(test--)
    {
     num++;
     //n = inp();
     scanf("%d",&n);
     for(int i=1;i<=n;i++)
       for(int j=1;j<=n;j++)
         Adj[i][j] = INF;            
    for(int i=1;i<=n;i++)
      Adj[i][i] = 0;
    vec.clear();
    for(int i=1;i<=n;i++)
     {
         int state;
         //state = inp();
         scanf("%d",&state);
         if(state)
          vec.push_back(i);
         int vil,v,w;
        // vil = inp();
         scanf("%d",&vil);
         while(vil--)
          {
            //v = inp();
            //w = inp();
            scanf("%d %d",&v,&w);
            Adj[i][v] = w;           
          
          }
               
     }
   
    for(int k=1;k<=n;k++)
      for(int i=1;i<=n;i++)
       for(int j=1;j<=n;j++)
        Adj[i][j] = min(Adj[i][j] ,Adj[i][k] + Adj[k][j] );
   
    /*
    for(int i=1;i<=n;i++)
    {
       for(int j=1;j<=n;j++)
        cout<<Adj[i][j]<<" ";
    cout<<"\n";
    }
    cout<<"\n";
 
   int len = vec.size();
     for(int j=0;j<=len;j++)
       cout<<vec[j]<<" ";
    cout<<"\n";
  */
  int u,v;
  int len = vec.size();
  bool connected[55];
  ans = INF;
  for(int i=1;i<=len;i++)
   {
     u = vec[i];     
     for(int j=0;j<i;j++)
       {
          v = vec[j];
          //for(int i=1;i<=n;i++)
           // connected[i] = false;
          for(int k=1;k<=n;k++)
           {
             if(Adj[u][k] + Adj[k][v] == Adj[u][v])
               connected[k] = true;       
             else
               connected[k] = false;
           
           }
           sum = 0;
           for(int k=1;k<=n;k++)
            {
              if(!connected[k])  // for each unconnected vertex
               {
                  int mini = INF;   // calculate minimum distance of vertex from path
                  for(int h = 1;h<=n;h++)
                   {
                      if(connected[h])
                       {
                         mini = min(mini,Adj[h][k]);               
                       }       
                   }
                  sum += mini;                 
               } //if closes
                     
            }// for closes
             ans = min(ans,sum);
                
       }       
   }
  
     printf("Case %d: %d\n",num,ans);
  
  
  
 
  }
  //getchar();
  //getchar();
  return 0;          
 }
