#include <iostream>
#include <vector>
#include <algorithm>
#define pb push_back
#define mp make_pair
#define ll long long
using namespace std;
vector<int> f,vis;
vector< vector< pair<int,int> > > adj;
pair<bool,pair<ll,int> > dfs(int nd, int end){
	if(vis[nd]) return mp(0,mp(0ll,0));
	vis[nd]=1;
	ll ret = 0; bool fl = 0; int sz=1;
	for(int i=0;i<adj[nd].size();i++){
		pair<bool,pair<ll,int> > p = dfs(adj[nd][i].first,end);
		if(p.first){
			fl=1;
			sz += p.second.second;
			ret += p.second.first;
		}
		else{
			sz += p.second.second;
			ret += p.second.first + adj[nd][i].second*1ll*p.second.second;
		}
	}
	if(nd == end) fl=1;
	// cout << nd+1 << ": " << fl << " " << ret << " " << sz << endl;
	return mp(fl,mp(ret,sz));
}
int main(){
	int t;
	cin >> t;
	for(int cases=1; cases<=t; cases++){
		int k;
		cin >> k;
		f.resize(k);
		adj.clear();
		adj.resize(k);
		for(int i=0;i<k;i++){
			cin >> f[i];
			int d;
			cin >> d;
			while(d--){
				int x,y;
				cin >> x >> y;
				adj[i].pb(mp(x-1,y));
			}
		}
		// cout << 1 << endl;
		ll ans=1e18;
		for(int i=0;i<k;i++){
			if(!f[i]) continue;
			for(int j=i+1;j<k;j++){
				if(!f[j]) continue;
				vis.clear();
				vis.resize(k,0);
				// cout << "DFS starts " << i+1 << " " << j+1 << endl;
				ans = min(ans,dfs(i,j).second.first);
			}
		}
		cout << "Case " << cases << ": " << ans << "\n";
	}
	return 0;
}