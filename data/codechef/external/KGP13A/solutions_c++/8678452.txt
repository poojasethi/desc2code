#include<iostream>
using namespace std;
typedef long long int lli;
#include<bits/stdc++.h>
lli ans=INT_MAX;
list<pair<lli,lli> > li[100];
lli dist[100][100];
int n;
void dfs(int start,lli visited[],int par,int cov[])
 {
 //	cout<<" start is "<<start<<endl;
 	
 	list<pair<lli,lli> > :: iterator it;
 	int f=0;
 	 visited[start]=0;
 	 cov[start]=1;
 	for(it=li[start].begin();it!=li[start].end();it++)
 	 {
 	 	
 	 	if(it->first==0 && par!=0)
 	 	 {
 	 	 	f=1;
 	 	 	break;
		   }
	  }
	  
	  if(f==1)
	   {
	 //  	cout<<" yes back way "<<endl;
	   	lli temp=0;
	   	for(int i=1;i<=n;i++)
	   	 {
	   	 	temp+=min(visited[i],dist[start][i]);
	   	 //	cout<<" include "<<i<<" costs "<<min(visited[i],dist[start][i])<<endl;
	   	 	
			}
		
			ans=min(ans,temp);
		  //   cout<<" costs "<<temp<<" but sanswer "<<ans<<endl;
	   }
	  
	   for(int i=1;i<=n;i++)
	    {
	    	
	    	visited[i]=min(visited[i],dist[start][i]);
	    //	cout<<"  updating dist of "<<i<<"as "<<visited[i]<<endl;
	    	
		}
		
		 for(it=li[start].begin();it!=li[start].end();it++)
		  {
		  	if(cov[it->first]==0)
		  	 {
		  	 	lli tt[100];
		  	 	for(int i=0;i<=n;i++) tt[i]=visited[i];
		  	 	int ll[100];
		  	 		for(int i=0;i<=n;i++) ll[i]=cov[i];
		  	 	dfs(it->first,tt,start,ll);
			   }
		  }
 	
 	
 }
int main()
 {
 	int t;
 	 cin>>t;
 	 int cn=1;
 	 while(t--)
 	  {
 	  	ans=INT_MAX;
 	  	
 	  	 int cov[100];
 	  	  cin>>n;
 	  	  for(int i=1;i<=n;i++)
 	  	   {
 	  	   	for(int j=1;j<=n;j++)
 	  	   	 {
 	  	   	 	dist[i][j]=INT_MAX;
				   }
			  }
			  for(int i=1;i<=n;i++)
			  {
			  	dist[i][i]=0;
			  	cov[i]=0;
			   } 
			  
 	  	  for(int i=1;i<100;i++) li[i].clear();
 	  	  
 	  	  for(int i=1;i<=n;i++)
 	  	   {
 	  	   	int a;
 	  	  
 	  	   	cin>>a;
 	  	   	 //	cout<<" a is "<<a<<endl;
 	  	   	if(a==1)
				  {
				  	li[0].push_back(make_pair(i,0));
				  	li[i].push_back(make_pair(0,i));
				  }
 	  	   	int k;
 	  	   	 cin>>k;
 	  	   	 for(int j=1;j<=k;j++)
 	  	   	  {
 	  	   	  	 lli a,b;
 	  	   	  	 cin>>a>>b;
 	  	   	  	 dist[i][a]=b;
 	  	   	  	 dist[a][i]=b;
 	  	   	  	  
 	  	   	  	  li[i].push_back(make_pair(a,b) );
					}
					
			  }
			  
			  
			/*  for(int i=0;i<=n;i++)
             {
             	for(int j=0;j<=n;j++)
             	 {  
             	    cout<<dist[i][j]<<" ";
				  }
				  cout<<endl;
			 }*/
			 
			 
			 // floyd 
			 for (int k = 1; k <=n; k++)
            {
        
        for (int i = 1; i <=n;i++)
           {
            
            for (int j = 1; j <=n; j++)
            {
            //	 cout<<" i "<<i<<" j "<<j<<" k "<<k<<endl;
                
                if (dist[i][k] + dist[k][j] < dist[i][j])
                {
                	 dist[i][j] = dist[i][k] + dist[k][j];
                //	 cout<<" set distance b /w i "<<i<<" j "<<j<<" via "<<k<<endl;
                	
				}
                   
            }
             }
            }
            for(int i=0;i<=n;i++) dist[0][i]=INT_MAX;
            
          /*  for(int i=0;i<=n;i++)
             {
             	for(int j=0;j<=n;j++)
             	 {  
             	    cout<<dist[i][j]<<" ";
				  }
				  cout<<endl;
			 }*/
            
            lli visited[100];
            for(int i=1;i<=100;i++) visited[i]=INT_MAX;
            
            dfs(0,visited,0,cov);
            cout<<"Case "<<cn++<<": "<<ans<<endl;
			  
 	  	  
	   }
 	
 }