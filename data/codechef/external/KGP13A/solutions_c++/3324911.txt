//KGP13A
#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

vector< vector<int> > path(vector< vector<int> > adjmat)
{
    int n=static_cast<int>(adjmat[0].size());
    vector< vector<int> > dprev(n,vector<int> (n));
    copy(adjmat.begin(),adjmat.end(),dprev.begin());
    for(int k=1;k<n;k++)
    {
        vector< vector<int> > dnext(n,vector<int> (n));
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<n;j++)
            {
                //dnext[i][j]=min(dprev[i][j],dprev[i][k]+dprev[k][j]);
                if(dprev[i][j]==-1 && (dprev[i][k]==-1 || dprev[k][j]==-1))
                {
                    dnext[i][j]=-1;
                }
                else if(dprev[i][j]==-1)
                {
                    dnext[i][j]=dprev[i][k]+dprev[k][j];
                }
                else if(dprev[i][k]==-1 || dprev[k][j]==-1)
                {
                    dnext[i][j]=dprev[i][j];
                }
                else
                {
                    dnext[i][j]=min(dprev[i][j],dprev[i][k]+dprev[k][j]);
                }
            }
        }
        copy(dnext.begin(),dnext.end(),dprev.begin());
    }
    return dprev;
}
int main()
{
    //freopen("KGP13A.txt","r",stdin);
    int t;
    cin>>t;
    int n=t;
    while(t--)
    {
        int k;
        cin>>k;
        vector<vector<int> > adjmat(k+1,vector<int> (k+1,-1));
        vector<int> connected;
        for(int i=0;i<=k;i++)
        {
            adjmat[i][i]=0;
        }
        for(int i=1;i<=k;i++)
        {
            int u=i;
            int no,isconnected;
            cin>>isconnected>>no;
            if(isconnected==1)
            {
                connected.push_back(i);
            }
            for(int j=1;j<=no;j++)
            {
                int v,weight;
                cin>>v>>weight;
                adjmat[u][v]=weight;
            }
        }
        vector< vector<int> > shortestPathmat;
        shortestPathmat=path(adjmat);
        /*
        for(int i=1;i<=k;i++)
        {
            for(int j=1;j<=k;j++)
            {
                printf("%d ",shortestPathmat[i][j]);
            }
            printf("\n");
        }
        */
        int connectlen=static_cast<int>(connected.size());
        int ans=-1;
        for(int i=0;i<connectlen;i++)
        {
            for(int j=i+1;j<connectlen;j++)
            {
                int u=connected[i];
                int v=connected[j];
                int totalans=0;
                for(int x=1;x<=k;x++)
                {
                    if(shortestPathmat[u][x]+shortestPathmat[x][v]==shortestPathmat[u][v])
                    {
                        continue;
                    }
                    int mini=-1;
                    for(int y=1;y<=k;y++)
                    {
                        if(shortestPathmat[u][y]+shortestPathmat[y][v]==shortestPathmat[u][v])
                        {
                            if(mini==-1)
                            {
                                mini=shortestPathmat[x][y];
                            }
                            else
                            {
                                mini=min(shortestPathmat[x][y],mini);
                            }
                        }
                    }
                    totalans+=mini;
                }
                if(ans==-1)
                {
                    ans=totalans;
                }
                else
                {
                    ans=min(totalans,ans);
                }
            }
        }
        printf("Case %d: %d\n",n-t,ans);
    }
}
