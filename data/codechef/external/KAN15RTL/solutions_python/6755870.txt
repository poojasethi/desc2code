import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class Main {
    static long mod = 1000000007;
    static boolean[] composite;
    static int[] primes;

    static void initPrimes(int MAXN) {
        int sqrtN = (int)Math.sqrt(MAXN);
        composite = new boolean[MAXN];
        composite[0] = composite[1] = true;
        for (int p=2; p<=sqrtN; p++) {
            if (!composite[p]) {
                for (int x=2*p; x<MAXN; x+=p) {
                    composite[x] = true;
                }
            }
        }
        int primeNo = 0;
        for (boolean b : composite) {
            if (!b) primeNo++;
        }
        primes = new int[primeNo];
        primeNo = 0;
        for (int p=2; p<MAXN; p++) {
            if (!composite[p]) {
                primes[primeNo++] = p;
            }
        }
    }

    public static void main(String[] args) throws IOException {
        PrintWriter output = new PrintWriter(System.out);
        initPrimes(3000000);
        InputReader reader = new InputReader(System.in);
        int Q = reader.readInt();
        for (int q=0; q<Q; q++) {
            int K = reader.readInt();
            long prime = primes[K-1];
            long answer = modPow(prime, prime);
            output.println(answer);
        }
        output.close();
    }

    static long modPow(long base, long exp) {
        long result = 1;
        long pow = base;
        while (exp != 0) {
            if ((exp&1) == 1) {
                result *= pow;
                result %= mod;
            }
            exp >>>= 1;
            pow *= pow;
            pow %= mod;
        }
        return result;
    }

    static Set<Long> f(long number) {
        if (number == 1) {
            return Collections.singleton(0L);
        }
        Set<Long> result = new HashSet<Long>();
        for (long d=2; d<number; d++) {
            if (number%d == 0) {
                Set<Long> set1 = f(d);
                set1 = times(set1, Collections.singleton(number/d));
                Set<Long> set2 = f(number/d);
                set2 = times(set2, Collections.singleton(d));
                result.addAll(plus(set1, set2));
            }
        }
        if (result.isEmpty()) {
            result = Collections.singleton(1L);
        }
        return result;
    }

    static Set<Long> plus(Set<Long> set1, Set<Long> set2) {
        Set<Long> result = new HashSet<Long>();
        for (long value1 : set1) {
            for (long value2 : set2) {
                result.add(value1+value2);
            }
        }
        return result;
    }

    static Set<Long> times(Set<Long> set1, Set<Long> set2) {
        Set<Long> result = new HashSet<Long>();
        for (long value1 : set1) {
            for (long value2 : set2) {
                result.add(value1*value2);
            }
        }
        return result;
    }

    static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public final int readInt() throws IOException {
            return (int)readLong();
        }

        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
                if (c == -1) throw new IOException();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return negative ? -res : res;
        }

        public final int[] readIntArray(int size) throws IOException {
            int[] array = new int[size];
            for (int i=0; i<size; i++) {
                array[i] = readInt();
            }
            return array;
        }

        public final long[] readLongArray(int size) throws IOException {
            long[] array = new long[size];
            for (int i=0; i<size; i++) {
                array[i] = readLong();
            }
            return array;
        }

        public final String readString() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            StringBuilder res = new StringBuilder();
            do {
                res.append((char)c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }

        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }

}
