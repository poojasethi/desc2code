#include<bits/stdc++.h>
using namespace std;
map<string,int> m;
int parent[100000+10];
int sz[100000+10];
int rk[100000+10];
void reset()
{
    m.clear();
    memset(parent,0,sizeof(parent));
    memset(sz,0,sizeof(sz));
    memset(rk,0,sizeof(rk));
}
void makeset(int x)
{
    parent[x]=x;
    rk[x]=0;
    sz[x]=1;
}
int findset(int x)
{
    if(parent[x]!=x)
        return findset(parent[x]);
    return parent[x];
}
void Link(int x,int y)
{
    if(rk[x]>rk[y])
    {
        parent[y]=x;
        sz[x]+=sz[y];
    }
    else
    {
        parent[x]=y;
        sz[y]+=sz[x];
        if(rk[x]==rk[y])
            rk[y]++;
    }
}
void unionset(int x,int y)
{
    Link(findset(x),findset(y));
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        reset();
        int n,cnt=0;
        scanf("%d",&n);
        for(int i=0;i<n;i++)
        {
            string a,b;
            cin>>a>>b;
            if(!m.count(a))
            {
                m[a]=cnt;
                makeset(cnt);
                cnt++;
            }
            if(!m.count(b))
            {
                m[b]=cnt;
                makeset(cnt);
                cnt++;
            }
            int x,y;
            x=findset(m[a]);
            y=findset(m[b]);
            if(findset(x)!=findset(y))
                unionset(x,y);
            printf("%d\n",sz[findset(x)]);
        }
    }
}
