#include <cstdio>
#include <string>
#include <cstring>
#include <map>
#include <iostream>

#define MX 100001
#define MXC (MX<<1)

using namespace std;

map<string,int> getid;
string getname[MXC];

int parent[MX];
int comp[MXC];

void init(int *x)
{
     *x=0;
     getid.clear();
     memset(parent,0,sizeof parent);
     memset(comp,0,sizeof comp);
}

int FIND(int x)
{
    //cout<<x<<endl; system("pause");
    if(parent[x]==-1)
                     return x;
    else
        return (parent[x]=FIND(parent[x]));
}

int UNION(int id1,int id2,int p1,int p2)
{
     //Always grow the network which is larger
     if(comp[p1]>comp[p2])
     {
         parent[p2]=p1;
         comp[p1]+=comp[p2];
         return comp[p1];
     }
     else
     {
         parent[p1]=p2;
         comp[p2]+=comp[p1];
         return comp[p2];
     }
}

int main()
{
    int T,curr_ppl,F,id1,id2,p1,p2,p,ans;
    string s1,s2;
    curr_ppl=0;
    cin>>T;
    while(T--)
    {
    init(&curr_ppl);
    cin>>F;
    while(F--)
    {
              cin>>s1>>s2;
              id1=getid[s1];  id2=getid[s2];
              //If both are new to the network
              if(!id1 && !id2)
              {
                      getid[s1]=(id1 = ++curr_ppl);  getid[s2]=(id2 = ++curr_ppl);
                      getname[id1]=s1; getname[id2]=s2;
                      parent[id1]=-1; parent[id2]=id1;
                      comp[id1]=2;
                      printf("2\n");          
              }
              else
              //If s1 is new to the network
              if(!id1)
              {
                      getid[s1]=(id1 = ++curr_ppl);   getname[id1]=s1;
                      p=FIND(id2);
                      parent[id1]=p;
                      comp[p]+=1;
                      printf("%d\n",comp[p]);
              }
              else
              //If s2 is new to the network
              if(!id2)
              {
                      getid[s2]=(id2 = ++curr_ppl);   getname[id2]=s2;
                      p=FIND(id1);
                      parent[id2]=p;
                      comp[p]+=1;
                      printf("%d\n",comp[p]);
              }
              else
              //Both are already in the network
              {
                     p1=FIND(id1);  p2=FIND(id2);
                     ans = comp[p1];
                     //Both are in different networks, join their networks
                     if(p1!=p2) 
                     {
                                ans=UNION(id1,id2,p1,p2);
                     }
                     printf("%d\n",ans);
              }
    }
    }
    return 0;
}
