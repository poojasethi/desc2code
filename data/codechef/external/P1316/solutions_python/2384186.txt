#include <cstdio>
#include <string>
#include <cstring>
#include <map>
#include <iostream>

#define MX 100001
#define MXC (MX<<1)

using namespace std;

map<string,int> getid;

int parent[MXC];
int comp[MXC];

void init()
{
     getid.clear();
     memset(parent,0,sizeof parent);
     memset(comp,0,sizeof comp);
}

int FIND(int x)
{
    if(parent[x]==x)
                     return x;
    else
        return (parent[x]=FIND(parent[x]));
}

int UNION(int id1,int id2,int p1,int p2)
{
     //Always grow the network which is larger
     if(comp[p1]>comp[p2])
     {
         parent[p2]=p1;
         comp[p1]+=comp[p2];
         return comp[p1];
     }
     else
     {
         parent[p1]=p2;
         comp[p2]+=comp[p1];
         return comp[p2];
     }
}

int main()
{
    int T,curr_ppl,F,id1,id2,p1,p2,p,ans;
    string s1,s2;
    cin>>T;
    while(T--)
    {
    init();
    cin>>F;
    curr_ppl=0;
    while(F--)
    {
              cin>>s1>>s2;
              //If s1 is new to the network
              if(!getid.count(s1))
              {
                                   getid[s1]=(id1=++curr_ppl); 
                                   parent[id1]=id1;
                                   comp[id1]=1;
              }
              //If s2 is new to the network
              if(!getid.count(s2))
              {
                                   getid[s2]=(id2=++curr_ppl); 
                                   parent[id2]=id2;
                                   comp[id2]=1;
              }
              id1=getid[s1]; p1=FIND(parent[id1]);
              id2=getid[s2]; p2=FIND(parent[id2]);
              ans=comp[p1];
              //Both are in different networks, join their networks
              if(p1!=p2)
              {
                        ans=UNION(id1,id2,p1,p2);
              }
              printf("%d\n",ans);
    }
    }
    return 0;
}
