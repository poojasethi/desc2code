#include<iostream>
#include<cstdio>
#include<map>
#include<cstring>
#define MXC 100000
#define MXF (MXC<<1)
using namespace std;
int comp[MXC];
int parent[MXF];
map<string,int>mymap;
int FIND(int x)
{
    if(x==parent[x])return x;
    else
    {
        parent[x]=FIND(parent[x]);
        return parent[x];
    }
}
void reset()
{
     mymap.clear();
     memset(comp,0,sizeof comp);
     memset(parent,0,sizeof parent);
}
int main()
{
    int t,n,id1,id2,p1,p2,p,ans;
    char a[50],b[50];
    //string a,b;
    cin>>t;
    while(t--)
    {
              cin>>n;
              int curr=1;
              reset();
              while(n--)
              {
                        scanf("%s %s",a,b);
                        //cin>>a>>b;
                        id1=mymap[a];
                        id2=mymap[b];
                        if(!id1 && !id2)
                        {
                                mymap[a]=id1=curr++;
                                mymap[b]=id2=curr++;
                                parent[id1]=parent[id2]=id1;
                                comp[id1]=2;
                                cout<<2<<endl;
                        }
                        else if(!id1)
                        {
                                mymap[a]=id1=curr++;
                                p=FIND(id2);
                                parent[id1]=p;
                                comp[p]+=1;
                                cout<<comp[p]<<endl;
                        }
                        else if(!id2)
                        {
                                mymap[b]=id2=curr++;
                                p=FIND(id1);
                                parent[id2]=p;  
                                comp[p]+=1;
                                cout<<comp[p]<<endl;
                        }
                        else
                        {
                                p1=FIND(id1);
                                p2=FIND(id2);
                                ans=comp[p1];
                                if(p1!=p2)
                                {
                                          if(comp[p1]<comp[p2])
                                          {
                                                               parent[p1]=parent[p2];
                                                               comp[p2]+=comp[p1];
                                                               ans=comp[p2];
                                          }
                                          else
                                          {
                                                               parent[p2]=parent[p1];
                                                               comp[p1]+=comp[p2];
                                                               ans=comp[p1];
                                          }
                                }
                                cout<<ans<<endl;
                        }
              }
    }
}

                                        
                        
                                
                        
                        
                        
    
