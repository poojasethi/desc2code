#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;
typedef vector<int> vi;

const int N = 1e6 + 50;

const ll mod = 1e9 + 7;

ll pow(ll a, ll b) {
  if (b == 0) return 1;
  ll x = pow(a, b / 2ll);
  x = (x * x) % mod;
  return b & 1 ? (a * x) % mod : x;
}

int b[100];

ll f(vi);

map<vi, ll> M;

void bt(int p, int k, int pp, vi& v, ll& ans, bool fallat) {
  if (p == k) {
    if (not fallat) return;
    vi w(b, b + pp);
    ans = (ans + f(w)) % mod;
    return;
  }
  for (int i = 0; i <= v[p]; ++i) {
    if (i != 0) {
      b[pp] = i;
      bt(p + 1, k, pp + 1, v, ans, fallat or i != v[p]);
    }
    else {
      bt(p + 1, k, pp, v, ans, fallat or i != v[p]);
    }
  }
}

ll f(vi v) {
  if (v.size() == 0) return 1;
  sort(v.begin(), v.end());
  map<vi, ll>::iterator fd = M.find(v);
  if (fd != M.end()) return fd->second;
  ll ans = 0;
  bt(0, v.size(), 0, v, ans, false);
  return M[v] = ans;
}

int main() {
  int q;
  cin >> q;
  vi erat(N, -1);
  for (int i = 2; i < N; ++i) if (erat[i] == -1) {
    for (int j = i; j < N; j += i) erat[j] = i;
  }
  while (q--) {
    ll n, c;
    cin >> n >> c;
    map<int, int> F;
    int cand = -1;
    for (int i = 2; i * i <= n; ++i) while (n % i == 0) {
      n /= i;
      F[i]++;
    }
    if (n > 1) F[n]++;
    vector<int> v;
    for (auto & x : F) v.push_back(x.second);
    
    cout << (c * f(v)) % mod << endl;
  }
}