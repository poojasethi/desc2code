/*******************************************************************************
IF YOU ARE LOOKING THIS YOU ARE RIGHT WAY
*******************************************************************************/
#include<stdio.h>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<map>
#include<string>
#include<cmath>
#include<cstring>
#include<stdlib.h>
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
#define MAX 1000005
typedef pair<int,int> p;
typedef pair<int,p> pii;
#define fi first
#define se second
#define pb push_back
#define s(a) scanf("%d",&a);
#define mem(a) memset(a,0,sizeof(0))
#define MOD 1000000007
vector<int> v;
long long dp[MAX];
map<int,int> mp;
vector<int> primes;
int isprime[MAX];

void sieve()
{
	int i;
	isprime[0] = isprime[1] = 1;
	for(i = 2 ; i * i< MAX ; i++)
	{
		if(isprime[i] == 0)
		{
			primes.pb(i);
			for(int j = i * i ;  j < MAX ; j += i)
				isprime[j] = 1;
		}
	}
	for(; i  < MAX ; i++)
		if(!isprime[i])
			primes.pb(i);
}

long long power(long long a,long long N)
{
	if(N==0)
		return 1;
	long long d = power(a,N/2);
	d *= d;
	if(N%2)	
		d *= a;
	return d;
}

long long convert(long long N)
{
	
	vector<int> v;
	int cnt;
	for(int i = 0 ; i < primes.size() ; i++)
	{
		cnt = 0;
		while(N % primes[i] == 0)
		{
			N /= primes[i];
			cnt++;
		}
		if(cnt)
			v.pb(cnt);
		if(N == 1)
			break;
	}
	if(N != 1)
	{
		v.pb(1);
	}
	sort(v.rbegin(),v.rend());
	long long x = 1;
	for(int i = 0 ; i < v.size(); i++)
	{
//		printf("%d %d\n",primes[i],v[i]);
		x *= power(primes[i],v[i]);
	}
	return x;
}

long long int solve(long long int N)
{
//	printf("is N : %lld\n",N);
	long long x = convert(N);
//	printf("x is : %d\n",x);
	if(mp.find(x) != mp.end())
		return mp[x];
	int till = (int)sqrt(x);
	long long t = 1;
	for(int i = 2 ; i <= till ; i++)
	{
		if(x % i == 0)
		{
			t += solve(x/i);
			if(t > MOD)
				t -= MOD;
			if(x/i != i)
				t += solve(i);
			if(t > MOD)	t -= MOD;
		}
	}
	mp[x] = t;
	return t;
	
}

int main()
{
	int T;
	sieve();
//	printf("size : %d\n",primes.size());
	scanf("%d",&T);
//	T = 1;
	mp[1] = 1;
	while(T--)
	{
		long long int N,C;
		scanf("%lld%lld",&N,&C);
		long long x = solve(N);
//		printf("%d %d %d %d %d\n",mp[1],mp[2],mp[4],mp[8],mp[16]);
		printf("%lld\n",(C*x)%MOD);
	}
	return 0;
}