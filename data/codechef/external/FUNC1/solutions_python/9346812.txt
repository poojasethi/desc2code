#include <bits/stdc++.h>
#define MOD 1000000007

using namespace std;
typedef long long int ll;

map< vector<ll>  ,ll > dp;


//map< ll, vector<ll> > divs;
//inline void do_divs(ll n){
//    if(divs.count(n) != 0) return;
//    divs[n] = vector<ll>();
//    for(ll i=1; i*i<=n; ++i){
//        if(n % i == 0){
//            divs[n].push_back(i);
//
//            if(n/i != i)
//                divs[n].push_back(n/i);
//        }
//    }
//    sort(divs[n].begin(),divs[n].end());
//}

inline ll f(ll n){
    if(n == 1) return 1;
//    cout << n << endl;
    vector<ll> hash;
    ll count_div = 0;
    ll aux = n;
    while(aux % 2 == 0){
            aux /= 2;
            count_div++; //pares
    }

    if(count_div != 0)
        hash.push_back( count_div );

    for(ll i=3; i*i <= aux; i+=2) {
        count_div = 0;
        while( aux % i == 0 ){
            aux /= i;
            count_div++; //primos impares
        }
        if( count_div != 0 )
            hash.push_back( count_div );
    }

    if(aux > 1) //es primo
        hash.push_back( 1 );


    sort( hash.begin(), hash.end() );

    if(dp.count( hash ) != 0) return dp[ hash ];
    ll r = 0LL;
//    do_divs(n);
    for(ll i=1; i*i<=n; ++i){
        if(n % i == 0){
            if(i!=n)
                r = (r + f(i)) % MOD;

            if(n/i != i && n/i != n)
                r = ( r + f(n/i) ) % MOD;
        }
    }

    return dp[hash]  = r%MOD;;
}

int main(){
//    cout << f(30) << " " << f(70) << endl;

//    dp.reserve(2048);
//    divs.reserve(2048);
//    dp.reserve(2048);
//    divs.reserve(2048);
//    freopen("in.txt","r",stdin);
//    cin.tie(NULL);
//    cin.sync_with_stdio(false);
    int T;
    ll n,c;
//    cin >> T;
    scanf("%d",&T);
    while(T--){
//        cin >> n >> c;
        scanf("%lld %lld",&n,&c);
//        int sz = 0;
//        for(ll i=1; i*i<=n; ++i){
//            if( n % i == 0 ){
//                divs[sz++] = i;
//                if( i != n/i )
//                    divs[sz++] = n/i;
//            }
//        }
//
//        sort(divs,divs+sz);
//        dp[0] = 1LL;
//        for(int i=1; i<sz; i++){
//            dp[i] = 0LL;
//            for(int j=0; j<sz && divs[j] < divs[i]; ++j)
//                if( divs[i] % divs[j] == 0 ){
//                    dp[i] = (dp[j] + dp[i]) % MOD;
//                }
//        }
//        dp.clear();

        printf("%lld\n", ( f(n) * ( c % MOD ) ) % MOD );
//        cout << dp.size() << endl;

    }
}
