import java.io.*;
import java.util.*;

class BiswaAndFunction {

	static final int mod = (int) 1e9 + 7;
	static HashMap<ArrayList<Integer>, Integer> map;

	public static void main(String[] args) {
		InputReader in = new InputReader(System.in);
		PrintWriter w = new PrintWriter(System.out);

		int t = in.nextInt();
		
		map = new HashMap<ArrayList<Integer>, Integer>();
		map.put(new ArrayList<Integer>(), 1);
		
		while (t-- > 0) {
			long n = in.nextLong();
			int c = in.nextInt();
			ArrayList<Integer> a = getExponents(n);
			w.println((dp(a) * 1L * c) % mod);
		}

		w.close();
	}

	static int dp(ArrayList<Integer> a) {
		if (map.containsKey(a))
			return map.get(a);
		int ans = get(0, a, new ArrayList<Integer>(), false);
		map.put(a, ans);
		return ans;
	}

	static int get(int pos, ArrayList<Integer> a, ArrayList<Integer> b, boolean isNotN){
		if(pos == a.size())
			return isNotN ? dp(getMultiSet(b)) : 0;
		int ans = 0;
		if(b.size() <= pos)	b.add(0);
		for(int i = 0; i <= a.get(pos); i++){
			b.set(pos, i);
			ans += get(pos + 1, a, b, isNotN | (i < a.get(pos)));
			if(ans >= mod)
				ans -= mod;
		}
		return ans;
	}

	static ArrayList<Integer> getMultiSet(ArrayList<Integer> b) { //remove zeros and sort
		ArrayList<Integer> ans = new ArrayList<Integer>();
		for (int x : b)
			if (x != 0)
				ans.add(x);
		Collections.sort(ans);
		return ans;
	}

	static ArrayList<Integer> getExponents(long n) {
		ArrayList<Integer> ans = new ArrayList<Integer>();
		for (long i = 2; i * i <= n; i++) {
			if (n % i == 0) {
				int c = 0;
				while (n % i == 0) {
					n /= i;
					c++;
				}
				ans.add(c);
			}
		}
		if (n != 1)
			ans.add(1);
		return ans;
	}

	static class InputReader {

		private InputStream stream;
		private byte[] buf = new byte[8192];
		private int curChar, snumChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long nextLong() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int[] nextIntArray(int n) {
			int a[] = new int[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}

		public String readString() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
}