#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int MOD = 1e9 + 7;
map<vector<int>, int> dp;

void upd(int &x, int y) {
  x += y; if (x >= MOD) x -= MOD;
}

LL solve(vector<int> &s);

LL dfs(vector<int> &s, int d, int o) {
  if (d == 0) {
    if (!o) return 0;
    vector<int> t;
    for (auto x: s) if (x) t.push_back(x);
    sort(t.begin(), t.end());
    return solve(t);
  }
  int ret = 0, up = s[d - 1];
  for (int i = 0; i <= up; ++i) {
    s[d - 1] -= i;
    upd(ret, dfs(s, d - 1, o || i));
    s[d - 1] += i;
  }
  return ret;
}

LL solve(vector<int> &s) {
  if (!s.size()) return 1;
  if (dp.count(s)) return dp[s];
  return dp[s] = dfs(s, s.size(), 0);
}

void run() {
  LL n, c; cin >> n >> c;
  vector<int> p;
  for (LL i = 2; i * i <= n; ++i) {
    if (n % i == 0) {
      int x = 0;
      while (n % i == 0) ++x, n /= i;
      p.push_back(x);
    }
  }
  if (n > 1) p.push_back(1);
  sort(p.begin(), p.end());
  cout << solve(p) * c % MOD << endl;
}

int main() {
  int T; scanf("%d", &T);
  for (int cas = 1; cas <= T; ++cas) run();
  return 0;
}
