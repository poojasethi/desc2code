n,q=map(int,raw_input().split())
sz=[]
idi=range(n+1)#array containing the objects idi[i]=i
for i in range(n+1):
    sz.append(1)
''' unite to trees by pointing one root of one to the other'''
def union(x,y):
    rootx=root(long(x))
    rooty=root(long(y))
    if(rootx==rooty):
        return
    if(sz[rootx]< sz[rooty]):
        idi[rootx]=rooty
        sz[rooty]+=sz[rootx]
    else:
        idi[rooty]=rootx
        sz[rootx]+=sz[rooty]
#checks whether given object have the same parent or not
def connected(x,y):
    return root(long(x))==root(long(y))
#finds the root of the object
def root(x):
    while(x!=idi[x]):
        x=idi[x]
    return x


for _ in xrange(q):
    t,x,y=map(int,raw_input().split())
    if(t==0):
        union(long(x),long(y))
    else:
        if(connected(long(x),long(y))==True):
            print "Yes"
        else:
            print "No"

        
