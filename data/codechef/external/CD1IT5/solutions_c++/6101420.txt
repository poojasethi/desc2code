#include<iostream>
#include<stdio.h>
#include<string.h>

#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif // ONLINE_JUDGE

using namespace std;

int fast_input(){
    char c=gc();
    while(c<'0'||c>'9') c=gc();
    int ans=0;
    while(c>='0'&&c<='9'){
        ans=10*ans+(c-'0');
        c=gc();
    }
    return ans;
}

struct subset{
    int parent,rank;
};

//int parent[100010];
struct subset subsets[100010];

int find_parent(int a){
    if(subsets[a].parent!=a){
        subsets[a].parent=find_parent(subsets[a].parent);
    }
    return subsets[a].parent;
}

void do_union(int a,int b){
    int parent_x=find_parent(a);
    int parent_y=find_parent(b);
    if(subsets[parent_x].rank<subsets[parent_y].rank) subsets[parent_x].parent=parent_y;
    else if(subsets[parent_x].rank>subsets[parent_y].rank) subsets[parent_y].parent=parent_x;
    else{
     subsets[parent_y].parent=parent_x;
     subsets[parent_x].rank++;
    }
}

bool same_set(int a,int b){
    int parent_x=find_parent(a);
    int parent_y=find_parent(b);
    if(parent_x==parent_y) return true;
    else return false;
}

int main(){
    int n,q;
    n=fast_input();
    for(int i=0;i<=n;i++){
        subsets[i].parent=i;
        subsets[i].rank=0;
    }
    //for(int i=1;i<=n;i++) cout<<subsets[i].parent<<" ";
    //cout<<"\n";
    //memset(parent,-1,sizeof(parent));
    q=fast_input();
    int t,x,y;
    while(q--){
            t=fast_input();
    if(t==0){
            x=fast_input();
            y=fast_input();
            if(find_parent(x)!=find_parent(y)) do_union(x,y);
            //for(int i=1;i<=n;i++) cout<<subsets[i].parent<<" ";
            //cout<<"\n";
    }
    else if(t==1){
            x=fast_input();
            y=fast_input();
            if(same_set(x,y)) printf("Yes\n");
            else printf("No\n");
    }
}
return 0;
}
