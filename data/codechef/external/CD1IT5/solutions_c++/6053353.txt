#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef long long int ll;
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define gc getchar

int read_int(){
    register int x = 0, c = gc();
    int sign = 1;
    while(c!='-' && (c<48 || c>57) ) c = gc();
    if(c=='-')
        sign = -1, c = gc();
    while(c>=48 && c<=57)
        x = (x<<1) + (x<<3) + c - 48, c = gc();
    return sign*x;
}
class UnionFind
{
private:
    vi parent, Rank, setSize;
    int numSets;
public:
    UnionFind(int N)
    {
        setSize.assign(N, 1);
        numSets =  N;
        Rank.assign(N, 0);
        parent.assign(N, 0);
        F(i,0,N-1)
            parent[i] = i;
    }
    int findSet(int i)
    {
        return (parent[i] == i) ? i : findSet(parent[i]);
    }
    bool isSameSet(int i, int j)
    {
        return findSet(i) == findSet(j);
    }
    void unionSet(int i, int j)
    {
        if(!isSameSet(i, j))
        {
            numSets--;
            int x = findSet(i);
            int y = findSet(j);
            if(Rank[x] > Rank[y])
            {
                parent[y] = x;
                setSize[x] += setSize[y];
            }
            else
            {
                parent[x] = y;
                setSize[y] += setSize[x];
            }
            if(Rank[x] == Rank[y])
                Rank[y]++;
        }
    }
    int numDisjointSets()
    {
        return numSets;
    }
    int sizeOfSet(int i)
    {
        return setSize[findSet(i)];
    }
};


int main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int N,Q,t,X,Y;
    N = read_int();
    Q = read_int();
    UnionFind Islands(N);
    while(Q--)
    {
        t = read_int();
        X = read_int();
        Y = read_int();
        if(t==0) Islands.unionSet(X-1,Y-1);
        else printf(Islands.isSameSet(X-1,Y-1) ? "Yes\n" : "No\n");
    }
    return 0;
}


