#include <iostream>
#include <vector>
using namespace std;

const int maxk = 6;
const int maxn = 1e5;
const string noAns = "Stupid Fish";
int N, K;
int v[maxn + 5];
int buttonTimes[maxk*2 + 2];
int coordButton[maxk*2];
int coords[maxk];
int nButtons;
int start, stop;

bool bt(int coord, int usedMask) {
  if (coord == K) {
    cout << start+1 << " " << stop+1;
    for (int i = 0; i < 2*K; ++i) {
      cout << " " << coordButton[i]+1;
    }
    cout << endl;
    return true;
  }
  for (int i = 0; i < nButtons; ++i) if ((usedMask & (1<<i)) == 0){
    // adding then sub
    for (int j = 0; j < nButtons; ++j) {
      if ((usedMask&(1<<j))==0 && i != j && 
          buttonTimes[i] - buttonTimes[j] == coords[coord]) {
        coordButton[2*coord] = i;
        coordButton[2*coord+1] = j;
        if (bt(coord+1, usedMask | (1<<i) | (1<<j))) return true;
      }
    }
  }
  return false;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int T; cin >> T;
  while (T--) {
    cin >> N >> K;
    nButtons = K*2 + 2;
    for (int i = 0; i < N; ++i) {
      cin >> v[i];
      --v[i];
    }
    for (int i = 0; i < K; ++i) cin >> coords[i];
    bool found = false;
    for (start = 0; start < nButtons && !found; ++start) {
      for (stop = 0; stop < nButtons && !found; ++stop) if (start != stop) {
        for (int i = 0; i < nButtons; ++i) buttonTimes[i] = 0;
        bool enabled = false;
        for (int i = 0; i < N; ++i) {
          if (v[i] == start) {
            enabled = true;
            continue;
          } else if (v[i] == stop) {
            enabled = false;
            continue;
          }
          if (enabled) {
            ++buttonTimes[v[i]];
          }
        }
        found = bt(0, (1<<start) | (1<<stop));
      }
    }
    if (!found) cout << noAns << endl;
  }
}