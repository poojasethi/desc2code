#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;
typedef vector<int> vi;

int n, k, kk, s, t;
vi dirs, pos;
int memo[6][1 << 14];

int dp(int p, int mask) {
  if (p == k) return -3;
  int& ref = memo[p][mask];
  if (ref != -1) return ref;
  for (int i = 0; i < kk; ++i) if (not (mask & (1 << i))) {
    for (int j = 0; j < kk; ++j) if (j != i and not (mask & (1 << j))) {
      if (dirs[i] - dirs[j] == pos[p]) {
	int r = dp(p + 1, mask | (1 << i) | (1 << j));
	if (r != -2) return ref = (1 << (i + 16)) | (1 << j);
      }
    }
  }
  return ref = -2;
}

void cas() {
  cin >> n >> k;
  kk = 2 * k + 2;
  vi v(n);
  for (int i = 0; i < n; ++i) {
    cin >> v[i];
    --v[i];
  }
  pos = vi(k);
  for (int i = 0; i < k; ++i) cin >> pos[i];
  for (s = 0; s < kk; ++s) {
    for (t = 0; t < kk; ++t) if (s != t) {
      dirs = vi(kk, 0);
      bool started = false;
      for (int i = 0; i < n; ++i) {
	if (v[i] == s) started = true;
	else if (v[i] == t) started = false;
	else if (started) {
	  dirs[v[i]]++;
	} 
      }
      int mask = (1 << s) | (1 << t);
      memset(memo, -1, sizeof memo);
      int r = dp(0, mask);
      if (r != -2) {
	cout << s + 1 << ' ' << t + 1;
	for (int p = 0; p < k; ++p) {
	  int r = dp(p, mask);
	  int j = 0;
	  while (not (r & (1 << j))) ++j;
	  int i = j + 1;
	  while (not (r & (1 << i))) ++i;
	  i -= 16;
	  mask = mask | (1 << i) | (1 << j);
	  cout << ' '<< i + 1 << ' ' << j + 1;
	}
	cout << endl;
	return;
      }
    }
  }
  cout << "Stupid Fish" << endl;
}

int main() {
  cin.tie(NULL);
  ios::sync_with_stdio(false);
  int t;
  cin >> t;
  while (t--) cas();
}