
#include <iostream>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>

using namespace std;

long long getSum(long long BITree[], int n, int index)
{
    long long  sum = 0; // Iniialize result
 
    // index in BITree[] is 1 more than the index in arr[]
    index = index + 1;
 
    // Traverse ancestors of BITree[index]
    while (index>0)
    {
        // Add current element of BITree to sum
        sum += BITree[index];
 
        // Move index to parent node
        index -= index & (-index);
    }
    return sum;
}
void updateBIT(long long  *BITree, int n, int index, int val)
{
    // index in BITree[] is 1 more than the index in arr[]
    index = index + 1;
 
    // Traverse all ancestors and add 'val'
    while (index <= n)
    {
       // Add 'val' to current node of BI Tree
       BITree[index] += val;
 
       // Update index to that of parent
       index += index & (-index);
    }
}
long long  *constructBITree(int arr[], int n)
{
    // Create and initialize BITree[] as 0
    long long  *BITree = new long long [n+1];
    for (int i=1; i<=n; i++)
        BITree[i] = 0;
 
    // Store the actual values in BITree[] using update()
    for (int i=0; i<n; i++)
        updateBIT(BITree, n, i, arr[i]);
 

    return BITree;
}
int main()
{
    int n,q;
    scanf("%d%d",&n,&q);
    int freq[1000002]={0};
    long long  *BITree = constructBITree(freq, n);
for(int i=0;i<n;i++)
{
    int input;
    scanf("%d",&input);
    updateBIT(BITree, n, i, input); //Update BIT for above change in arr[]
}
char temp[5];int x,y;

for(int i=0;i<q;i++)
 {   scanf("%s%d%d",temp,&x,&y);
    printf("%lld\n",getSum(BITree, n, y-1)-getSum(BITree, n, x-2)); 
}
    return 0;
}