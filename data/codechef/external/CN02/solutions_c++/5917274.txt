#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<climits>
#include<map>
#include<math.h>
#include<set>
#include<algorithm>
#define LL long long int
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define SL(N) scanf("%lld",&N);
#define pb push_back
#define mp make_pair
#define pnl printf("\n");
#define FOR(i,a,b) for (i=a;i<=b;i++)
#define mem(a,val) memset(a,val,sizeof(a))
using namespace std;
int gcd(int a, int b){ int temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
LL mod=1000000007;
LL f[1000100],invf[1000010];
void fact()
{
    f[0]=1;
    for(LL i=1;i<=1000010;i++)
    {
        f[i]=(f[i-1]*i);
        if(f[i]>mod)f[i]%=mod;
       // cout<<f[i]<<" ";
    }
    return;
}
LL fpow(LL a, LL b, LL mod)
{
    LL p=1;
    while(b>0)
    {
        if(b&1) p=(p*a)%mod;
        a=a*a; a%=mod;
        b/=2;
    }
    return p;
}
void inverseF()
{
    for(LL i=0;i<=1000001;i++)
    {
        //invf[i-1]= (i*invf[i])%mod;
        invf[i]=fpow(f[i],mod-2,mod);
       //cout<<invf[i-1]<<" ";
    }
    //cout<<invf[0]<<" ";
    return;
}
int main()
{

      LL i,j,t,N;
      fact(); inverseF();
     t=1;
      while(t--)
      {
            SL(N)
            LL ans=0;
            for(i=1;i<=N;i++)
            {
                double x= ((N-i)*1.0)/2.0;
                if(ceil(x)==floor(x))
                {
                    int x1=x-6;
                    if(x1>=0)
                    {
                       //  cout<<i<<" " <<x1<<endl;
                         //cout<<((f[x1+5]*(invf[5]*invf[x1])%mod ))%mod<<endl;
                         LL xx=(invf[5]*invf[x1])%mod;
                        ans= ans+ (f[x1+5]*xx)%mod; ans=ans%mod;
                    }
                   else break;
                }
            }
            cout<<ans<<endl;
      }
return 0;
}