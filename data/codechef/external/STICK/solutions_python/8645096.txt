#include<bits/stdc++.h>
using namespace std;
int p[11];
int a[11][11];
int finalans=-1;

void swap (int* a, int * b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
void reverse(int str[], int l, int h)
{
   while (l < h)
   {
       swap(&str[l], &str[h]);
       l++;
       h--;
   }
}

int findCeil (int str[], int first, int l, int h)
{
    // initialize index of ceiling element
    int ceilIndex = l;

    // Now iterate through rest of the elements and find
    // the smallest character greater than 'first'
    for (int i = l+1; i <= h; i++)
      if (str[i] > first && str[i] < str[ceilIndex])
            ceilIndex = i;

    return ceilIndex;
}

// Print all permutations of str in sorted order
void sortedPermutations ( int str[] ,int size)
{
    // Get size of string

    // Sort the string in increasing order
    sort(str,str+size);

    // Print permutations one by one
    bool isFinished = false;
    while ( ! isFinished )
    {
        // print this permutation
        int ans=p[str[0]];
        for(int i=1;i<size;i++)
        {
            if(a[str[i-1]][str[i]]==1)
            {
                ans+=p[str[i]];
            }
            else
                break;
        }
        finalans=max(ans,finalans);
        // Find the rightmost character which is smaller than its next
        // character. Let us call it 'first char'
        int i;
        for ( i = size - 2; i >= 0; --i )
           if (str[i] < str[i+1])
              break;

        // If there is no such chracter, all are sorted in decreasing order,
        // means we just printed the last permutation and we are done.
        if ( i == -1 )
            isFinished = true;
        else
        {
            // Find the ceil of 'first char' in right of first character.
            // Ceil of a character is the smallest character greater than it
            int ceilIndex = findCeil( str, str[i], i + 1, size - 1 );

            // Swap first and second characters
            swap( &str[i], &str[ceilIndex] );

            // reverse the string on right of 'first char'
            reverse( str, i + 1, size - 1 );
        }
    }
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        //memset(dp,-1,sizeof(dp));
        for(int i=0;i<n;i++)
        {
            scanf("%d",&p[i]);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
                scanf("%d",&a[i][j]);
        }
        //int ans=-1;
        //int mask=0;
        int str[n];
        finalans=-1;
        for(int i=0;i<n;i++)
        {
            str[i]=i;
        }
        sortedPermutations ( str ,n);
        printf("%d\n",finalans);
    }
    return 0;
}
