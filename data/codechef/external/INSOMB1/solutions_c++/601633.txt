#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long ll;
typedef unsigned long long ull;
using namespace std;

int c[2000];
vector<int> primes;
int rem(string& s, int n)
{
	int i, t = 0;
	for (i=0; i<s.size() && t<=n; ++i) t = 10 * t + s[i] - '0';
	if (t == n) return 1;

	int res = t % n;
	for (; i<s.size(); ++i) {
		t = 10 * res + s[i] - '0';
		res = t % n;
	}
	return res;
}

int main()
{
	ios_base::sync_with_stdio(0);
	for (int i=2; i*i<2000; ++i) if (!c[i])
		for (int j=2*i; j<2000; j+=i) c[j] = 1;
	REP(i, 2, 2000) if (!c[i]) primes.pb(i);

	string s; cin >> s;
	string res = "PRIME";

	if (s == "1" || s == "0") {
		res = "COMPOSITE";
	}
	else {
		rep(i, primes.size()) {
			if (rem(s, primes[i]) == 0) { res = "COMPOSITE"; break; }
		}
	}
	cout << res << endl;
	return 0;
}
