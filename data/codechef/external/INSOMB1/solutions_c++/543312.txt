#include <iostream>
#include <string.h>

int len, rest[1001], prim[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013};
char puffer[1001];

int rest_erst(int n)
{
int t=0;
for(rest[t++]=1; t<len; rest[t++]=(10*rest[t-1])%n);
return 0;
}

int teilbar(int n)
{
int val, t;
rest_erst(n);
for(t=val=0; t<len; t++)
	val+=puffer[len-t-1]*rest[t];
return(val%n)==0;
}

int gleich(int n)
{
int t;
for(t=len-1; t>=0; n/=10, t--)
	if((n%10)!=puffer[t])
		return 0;
return 1;
}

int test()
{
int t;
for(t=0; t<sizeof(prim)/sizeof(prim[0]); t++)
	if(teilbar(prim[t]))
		return gleich(prim[t]);
return 1;
}

main()
{
int t;
for(std::cin>>puffer,len=strlen(puffer),t=0; t<len; t++)
	puffer[t]-=48;
if(test())
	std::cout << "PRIME";
else
	std::cout << "COMPOSITE";
return 0;
}
