#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <string.h>
using namespace std;

const int N = 1000;
int p[N];
vector<int> primes;
char in[1005];
int len;

bool is_div(int k) {
    int n = 0;
    for (int i=0; i<len; i++) {
        n = n*10+in[i]-'0';
        n%=k;
    }
    return (n==0);
}


bool eq(int k) {
    for (int i=len-1; i>=0; i--) {
        if (k%10 != (in[i]-'0'))
            return false;
        k /= 10;
    }
    return true;
}

int test() {
    for (unsigned i=0; i<primes.size(); i++) {
        if (is_div(primes[i])) {
            if (eq(primes[i]))
                return 1;
            else
                return 0;
        }
    }
    return 1;
}

int main()
{
    memset(p, 1, sizeof p);
    for (int i=2; i<N; i++) if (p[i]) {
        primes.push_back(i);
        for (int j=i+i; j<N; j+=i)
            p[j] = 0;
    }
    scanf("%s", in);
    len = strlen(in);
    int ans = test();

    if (ans) printf("PRIME\n");
    else printf("COMPOSITE\n");
    return 0;
}
