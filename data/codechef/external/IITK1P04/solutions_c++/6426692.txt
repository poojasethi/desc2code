#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
class edge
{
    int vertex;
    int capacity;
};
vector<int> vec[301];
int capacity[301][301],tempcapacity[301][301];
int parent[301],visit[301];

int bfs(int a, int b)
{
    queue<int> Q;
    Q.push(a);
    parent[a]=-1;
    visit[a]=1;
    vector<int>::iterator it;
    while(!Q.empty())
    {   
        int t=Q.front();
        Q.pop();
        int n=vec[t].size();
        for(it=vec[t].begin();it!=vec[t].end();it++)
        {
            //printf("tempcapacity[%d][%d]=%d\n",t,vec[t][i],tempcapacity[t][vec[t][i]]);
            //printf("vec[%d][%d]=%d\n",t,i,vec[t][i]);
            if(visit[*it]==-1 && tempcapacity[t][*it]>0)
            {
                visit[*it]=1; parent[*it]=t; Q.push(*it);
                if((*it)==b) return 1;
            }
        }
    }
    return 0;
}

int func(int a, int b)
{
    int u=b,temp,v=parent[u];
    temp=tempcapacity[v][u];
    while(v!=a)
    {
        u=parent[v];
        temp=min(temp,tempcapacity[u][v]);
        v=u;
    }
    v=parent[b];
    u=b;
    while(u!=a)
    {
        tempcapacity[v][u]-=temp;
        tempcapacity[u][v]+=temp;
        u=v;
        v=parent[u];
    }
    return temp;
    
}

int main()
{
    int n,m,u,v,w,t,a,b,i,j;
    //edge temp;
    scanf("%d%d",&n,&m);
    memset(capacity,0,sizeof(capacity));
    memset(tempcapacity,0,sizeof(tempcapacity));
    while(m--)
    {
        scanf("%d%d%d",&u,&v,&w);
        vec[u].push_back(v);  
        capacity[u][v]=w;  
        tempcapacity[u][v]=w;    
    }
    scanf("%d",&t);
    while(t--)
    {
        int maxflow=0;
        scanf("%d%d",&a,&b);
        memset(parent,-1,sizeof(parent));
        memset(visit,-1,sizeof(parent));
        for(i=0;i<=300;i++)
            for(j=0;j<=300;j++)
                tempcapacity[i][j]=capacity[i][j];
        int flag=bfs(a,b);
        //cout<<"flag= "<<flag<<endl;
        while(flag==1)
        {
            maxflow+=func(a,b);
            memset(parent,-1,sizeof(parent));
            memset(visit,-1,sizeof(parent));
            flag=bfs(a,b);
        }
        printf("%d\n",maxflow);
    }
}   