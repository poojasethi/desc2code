// dinic by adijimmy template maxflow
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define MAXN 305
const int INF = 1000000000;
struct edge {
	int a, b, cap, flow;
};
int n, s, t, d[MAXN], ptr[MAXN], q[MAXN];
vector<edge> e;
vector<int> g[MAXN];

void add_edge (int a, int b, int cap) {
	edge e1 = { a, b, cap, 0 };
	edge e2 = { b, a, 0, 0 };
	g[a].push_back ((int) e.size());
	e.push_back (e1);
	g[b].push_back ((int) e.size());
	e.push_back (e2);
}

bool bfs() {
	int qh=0, qt=0;
	q[qt++] = s;
	memset (d, -1, sizeof d);
	d[s] = 0;
	while (qh < qt && d[t] == -1) {
		int v = q[qh++];
		for (size_t i=0; i<g[v].size(); ++i) {
			int id = g[v][i],
				to = e[id].b;
			if (d[to] == -1 && e[id].flow < e[id].cap) {
				q[qt++] = to;
				d[to] = d[v] + 1;
			}
		}
	}
	if(d[t] == -1) return false;
	return true;
}

int dfs (int v, int flow) {
	if (flow==0 || v==t) return flow;
	for (; ptr[v]<(int)g[v].size(); ++ptr[v]) {
		int id = g[v][ptr[v]],
			to = e[id].b;
		if (d[to] != d[v] + 1)  continue;
		int pushed = dfs (to, min (flow, e[id].cap - e[id].flow));
		if (pushed) {
			e[id].flow += pushed;
			e[id^1].flow -= pushed;
			return pushed;
		}
	}
	return 0;
}

int dinic() {
	int flow = 0;
	while(bfs()){
		memset (ptr, 0, sizeof ptr);
		while (int pushed = dfs (s, INF))
			flow += pushed;
	}
	return flow;
}

void init(){
  for(int i=0;i<e.size();i++) e[i].flow = 0;
}

int main(){
 int n,m,a,b,w;
 scanf("%d %d",&n,&m);
 for(int i=0;i<m;i++){
    scanf("%d %d %d",&a,&b,&w);
    add_edge(a,b,w);
 }
 int tc;
 scanf("%d",&tc);
 while(tc--){
  scanf("%d %d",&s,&t);
  init();
  printf("%d\n",dinic());
 }
 return 0;
}
