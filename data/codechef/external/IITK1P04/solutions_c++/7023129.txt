#include<bits/stdc++.h>

using namespace std;

inline void out(int number) ;
inline void inp( int &n );
inline void inps(char *str);

#define MAXN 300


int N,M,U,V,W,T,A,B;
int graph[MAXN+5][MAXN+5],rgraph[MAXN+5][MAXN+5],prev[MAXN+5],visited[MAXN+5];
int temp;
vector<int> ::iterator it;

vector< vector<int> > adj(MAXN,vector<int>(0,0));

bool bfs(int s, int t)
{
    prev[s]=-1;
    queue<int> Q;
    Q.push(s);

    memset(visited,0,sizeof(visited));
        visited[s]=1;
    while(!Q.empty())
    {
        temp=Q.front();
        Q.pop();
        for(it=adj[temp].begin();it!=adj[temp].end();it++)
        {

            if(visited[*it]==0&&rgraph[temp][*it]>0)
                {
                    prev[*it]=temp;Q.push(*it);
                    visited[*it]=1;
                }
        }

    }
    return visited[t]!=0;


}

int maxFlow(int s,int t)
{
    for(int i=0;i<N;i++)for(int j=0;j<N;j++)rgraph[i][j]=graph[i][j];
    int flow=0;
    while(bfs(s,t)) //there exists a path
    {
        temp=INT_MAX;
        int j=t;
        while(prev[j]!=-1)
        {
            temp=min(temp,rgraph[prev[j]][j]);
            j=prev[j];

        }
        j=t;
        while(prev[j]!=-1)
        {
            rgraph[prev[j]][j]-=temp;
            rgraph[j][prev[j]]+=temp;
            j=prev[j];
        }
        flow+=temp;
    }
    return flow;
}

int main()
{
    inp(N);inp(M);
    for(int i=0;i<M;i++)
    {
        inp(U);inp(V);inp(W);
        graph[--U][--V]=W;
        adj[U].push_back(V);
        adj[V].push_back(U);
    }

    inp(T);
    while(T--)
    {
        inp(A);inp(B);
        A--;B--;
        out(maxFlow(A,B));cout<<endl;
    }

    return 0;
}

inline void inp( int &n )
{
n=0;
int ch=getchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getchar();}

while(  ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=getchar();
n=n*sign;

}


inline void out(int number)
{
	if (number)
	{
    char str[11];

		int i = 10;
		while (number > 0)
		{
			--i;
			str[i] = (number % 10) + '0';
			number /= 10;
		}
		str[10] = 0;

		fwrite(str + i, 1, 10 - i, stdout);
	}
	else
	{
		putchar('0');
	}
}


inline void inps(char *str)
{
    register char c = 0;
    register int i = 0;
    while (c < 33)
        c = getchar();
    while (c != '\n') {
        str[i] = c;
        c = getchar();
        i = i + 1;
    }
    str[i] = '\0';
}
