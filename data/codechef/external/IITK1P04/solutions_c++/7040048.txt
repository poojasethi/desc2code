#include<bits/stdc++.h>
using namespace std;
#define INF 10000000
int graph[410][410];
int flowMat[410][410];
int s,t;
int n,m;
bool visited[410];
int parent[410];
int bfs()
{
	memset(parent,-1,sizeof parent);
	memset(visited,0,sizeof visited);
	queue<int> qq;
	qq.push(s);
	visited[s]=true;
	while(!qq.empty())
	{
		int node = qq.front();
		if(node==t)
		{
			break;
		}
		qq.pop();
		visited[node]=true;
		for(int i=1;i<=n;++i)
		{
			if(!visited[i]&&flowMat[node][i])
			{
				visited[i]=true;
				qq.push(i);
				parent[i]=node;
			}
		}
	}
	if(!visited[t])
		return 0;
	int node=t,mini=INF;
	while(node!=s)
	{
		mini=min(mini,flowMat[parent[node]][node]);
		node=parent[node];
	}
	node=t;
	while(node!=s)
	{
		flowMat[parent[node]][node]-=mini;
		flowMat[node][parent[node]]+=mini;
		node=parent[node];
	}
	return mini;
}
int maxFlow()
{
	int ans=0,x=0;
	do
	{
		memset(visited,0,sizeof visited);
		ans+=x;
		
	}while((x=bfs()));
	return ans;
}
int main()
{
	scanf("%d%d",&n,&m);
	memset(graph,0,sizeof graph);
	int u,v,w;
	for(int i=0;i<m;++i)
	{
		scanf("%d%d%d",&u,&v,&w);
		graph[u][v]=w;
	}
	int q;
	scanf("%d",&q);
	while(q--)
	{
		
		scanf("%d%d",&s,&t);
		for(int i=0;i<=n;++i)
		for(int j=0;j<=n;++j)
			flowMat[i][j]=graph[i][j];
		printf("%d\n",maxFlow());
	}
	return 0;
}
