#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
#define debug(args...) dbg(),args
const double pi=acos(-1.0);
const double eps=1e-11;
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N) 
#define SC(N) scanf("%c", &N) 
#define SS(N) scanf("%s", N) 
#define SIZE(X) ((int)((X).size()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define FORL(A,B,C) for(ll A=B;A<C;A++)
#define EFORL(A,B,C) for(ll A=B;A<=C;A++)
#define RFORL(A,B,C) for(ll A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX(A,B) ((A > B) ? A : B)
#define MIN(A,B) ((A < B) ? A : B)
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define MOD 1000000007LL
#define LIM 1000002 
#define INF 10000
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

int cnt,len;
char s[LIM],ans[LIM];

int main(int argc,char* argv[]){
	DBGCHECK;
	int flag = 1,t=0;
	//scanf("\n");
	while(1){	
		scanf("%[^\n]s",s);
		getchar();
		if(s[0] == '#')
			break;	
		cnt = 0;
		len = strlen(s);
		FOR(i,0,len){
			switch(s[i]){
				case ' ':
					ans[cnt++] = '%';
					ans[cnt++] = '2';
					ans[cnt++] = '0';
					break;
				case '!':
					ans[cnt++] = '%';
					ans[cnt++] = '2';
					ans[cnt++] = '1';
					break;
				case '$':
					ans[cnt++] = '%';
					ans[cnt++] = '2';
					ans[cnt++] = '4';
					break;
				case '%':
					ans[cnt++] = '%';
					ans[cnt++] = '2';
					ans[cnt++] = '5';
					break;
				case '(':
					ans[cnt++] = '%';
					ans[cnt++] = '2';
					ans[cnt++] = '8';
					break;
				case ')':
					ans[cnt++] = '%';
					ans[cnt++] = '2';
					ans[cnt++] = '9';
					break;	
				case '*':
					ans[cnt++] = '%';
					ans[cnt++] = '2';
					ans[cnt++] = 'a';
					break;	
				default:
					ans[cnt++] = s[i];
					break;
			}
		}
		ans[cnt] = '\0';
		printf("%s\n",ans);
	}
}
