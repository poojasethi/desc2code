#include<iostream>
#include<cstdio>
#define ld long
using namespace std;

int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
inline ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}

void println_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}

int partition (long int arr[], int l, int h)
{
    long int x = arr[h],temp;
    int i = (l - 1);
 
    for (int j = l; j <= h- 1; j++)
    {
        if (arr[j] <= x)
        {
            i++;
            temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;            
        }
    }
    temp=arr[i + 1];
    arr[i+1]=arr[h];
    arr[h]=temp; 
    return (i + 1);
}
 
inline void quickSort(long int A[], int l, int h)
{
    if (l < h)
    {        
        long int p = partition(A, l, h); /* Partitioning index */
        quickSort(A, l, p - 1);  
        quickSort(A, p + 1, h);
    }
}
int main()
{
    int N=scan_ld(),i,j=1,ctr=0;
    ld K=scan_ld(),x;
  
      ld A[N+1]; A[0]=1000000001;
      for(i=0;i<N;i++)
      {
          x=scan_ld(); 
          if(x<K && (x&1))
          {
              A[j]=x; 
              j++;
          }
      }
      quickSort(A,1,j-1);
      for(i=1;i<j;i++)
      {
 
          if( (A[i]^A[i-1]))
          {
              ctr++;
          }
      }
    println_d(ctr);
    return 0;
}
            