#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
using namespace std;

const int MAXN = 10005;
//const int MAXN2 = MAXN * 2;
const int LEN = 20;

int N, M, time_index, ans;
int depth[MAXN * 2], m_index[MAXN * 2], first[MAXN];
int dp[MAXN * 2][LEN], pos[MAXN * 2][LEN];
int sum[MAXN];
vector<vector<int> > tree;

int DoSomething(int u, int f)
{
	int res = sum[u];
	for(int i = 0; i < tree[u].size(); i++)
	{
		int v = tree[u][i];
		if(v == f)  continue;

		res += DoSomething(v, u);
	}

	ans = max(ans, res);

	return res;
}

void dfs(int u, int d)
{
	m_index[time_index] = u;
	depth[time_index] = d;
	first[u] = time_index++;

	for(int i = 0; i < tree[u].size(); i++)
	{
		int v = tree[u][i];
		if(first[v] != -1)  continue;

		dfs(v, d + 1);

		m_index[time_index] = u;
		depth[time_index++] = d;
	}
}

void out()
{
	printf("\n");



	/*
	for(int i = 0; i < time_index; i++)
	{
		printf("%d %d\n", m_index[i] + 1, depth[i]);
	}
	*/

	printf("\n");

	//for(int i = 0; i < N; i++)
//		printf("%d\n", first[i]);

	int n = time_index;
	for(int j = 0, l = 1; l <= n; l *= 2, j++)
	{
		for(int i = 0; i < n; i++)
		{
			if(i + l > n)  break;
			//dp[i][j] = min(dp[i][j - 1], dp[i + l][j - 1]);
			printf("%d ", dp[i][j]);
		}
		printf("\n");
	}
}

void ready_rmq()
{
	int n = time_index;
	for(int i = 0; i < n; i++)
	{
		dp[i][0] = depth[i];
		pos[i][0] = i;
	}

	for(int j = 1, l = 2; l <= n; l *= 2, j++)
	{
		for(int i = 0; i < n; i++)
		{
			if(i + l > n)  break;
			if(dp[i][j - 1] < dp[i + l / 2][j - 1])
			{
				dp[i][j] = dp[i][j - 1];
				pos[i][j] = pos[i][j - 1];
			}
			else
			{
				dp[i][j] = dp[i + l / 2][j - 1];
				pos[i][j] = pos[i + l / 2][j - 1];
			}
		}
	}
}

void ready_lca()
{
	time_index = 0;
	memset(first, -1, sizeof(first));
	dfs(0, 0);

	ready_rmq();

	//out();
}

int query_lca(int u, int v)
{
	int fu = first[u];
	int fv = first[v];

	if(fu > fv)  swap(fu, fv);
	
	int l = 1, j = 0;
	while(fu + l - 1 <= fv)  { l *= 2; j++; }

	l /= 2;
	j--;

	if(dp[fu][j] < dp[fv + 1 - l][j])
		return m_index[pos[fu][j]];
	else
		return m_index[pos[fv + 1 - l][j]];
}

int main()
{
	int T;
	scanf("%d", &T);
	while(T--)
	{
		scanf("%d%d", &N, &M);

		tree.clear();
		tree.resize(N);
		
		for(int i = 1; i < N; i++)
		{
			int a, b;
			scanf("%d%d", &a, &b);
			tree[a].push_back(b);
			tree[b].push_back(a);
		}

		ready_lca();

		memset(sum, 0, sizeof(sum));
		for(int i = 0; i < M; i++)
		{
			int a, b;
			scanf("%d%d", &a, &b);
			if(a == b)  continue;

			int c = query_lca(a, b);
			//printf("#%d %d %d\n", a, b, c);
			if(a == c)  {sum[c]--; sum[b]++;}
			else if(b == c)  {sum[c]--; sum[a]++;}
			else  {sum[c] -= 2; sum[a]++; sum[b]++;}
		}

		/*
		for(int i = 0; i < N; i++)
		{
			printf("@ %d %d\n", i, sum[i]);
		}
		*/
		ans = 0;
		DoSomething(0, -1);
		printf("%d\n", ans);
	}
}