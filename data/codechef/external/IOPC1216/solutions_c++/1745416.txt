#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;

#define s(n)					scanf("%d",&n);
#define sl(n)                   scanf("%lld", &n);
#define sf(n) 					scanf("%lf",&n);
#define ss(n) 					scanf("%s",n);
#define INF						(int)1e9
#define LINF					(long long)1e18
#define EPS						1e-12
#define FOR(i,a,b)				for(int i=a;i<b;i++)
#define REP(i,n)				FOR(i,0,n)
#define foreach(v,c)            for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define mp						make_pair
#define FF						first
#define SS						second
#define tri(a,b,c)				mp(a,mp(b,c))
#define XX						first
#define YY						second.first
#define ZZ						second.second
#define pb						push_back
#define fill(a,v) 				memset(a,v,sizeof a)
#define all(x)					x.begin(),x.end()
#define SZ(v)					((int)(v.size()))
#define DREP(a)					sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())
#define debug(args...)			{dbg,args; cerr<<endl;}
#define dline					cerr<<endl
#define SP                      system("pause");
#define HAHA                    printf("HAHA\n");
#define mod                     10000

void debugarr(int *arr, int ind1, int ind2)
{
	cout<<"[ ";
	for(int i=ind1;i<=ind2;i++)
		cout<<arr[i]<<" ";
	cout<<"]"<<endl;
}

typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
typedef pair<LL,PII> TRI;

typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;
typedef vector<TRI> VT;

typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;
typedef vector<VT> VVT;

/////////////////////////////////////////////////////////////////////////////////////////

int n, m;
int lev[10005];
int p[10005][15];
VI a[10005];
VI b[10005];
int dp[10005];

void dfs1(int u, int w)
{
    REP(i, a[u].size())
    {
        int v = a[u][i];
        if(v == w) continue;
        p[v][0] = u;
        lev[v] = lev[u]+1;
        dfs1(v, u);
    }
}

void dfs2(int u, int w)
{
    REP(i, a[u].size())
    {
        int v = a[u][i];
        if(v == w) continue;
        dfs2(v, u);
        dp[u] += dp[v];
    }
}

int lca(int u, int v)
{
    if(lev[u] < lev[v]) swap(u, v);
    for(int i = 14; i >= 0; i--)
    {
        if(lev[u]-(1<<i) >= lev[v]) u = p[u][i];
    }
    if(u == v) return u;
    for(int i = 14; i>=0; i--)
    {
        if((p[u][i] != -1) && (p[u][i] != p[v][i]))
        {
            u = p[u][i];
            v = p[v][i];
        }
    }
    return p[u][0];
}

int main()
{
    int te; s(te) while(te--)
    {
        fill(dp, 0);
        s(n) s(m)
        FOR(i, 0, n)
        {
            a[i].clear();
            b[i].clear();
        }
        FOR(i, 1, n)
        {
            int p, q; s(p) s(q)
            a[p].pb(q);
            a[q].pb(p);
        }
        FOR(i, 0, m)
        {
            int p, q; s(p) s(q)
            b[p].pb(q);
            b[q].pb(p);
        }
        lev[0] = 0;
        fill(p, -1);
        dfs1(0, -1);
        FOR(j, 1, 15) FOR(i, 0, n) if(p[i][j-1] != -1) p[i][j] = p[p[i][j-1]][j-1];
        FOR(u, 0, n) REP(i, b[u].size())
        {
            int v = b[u][i];
            if(v < u)
            {
                dp[u]++, dp[v]++, dp[lca(u, v)]-=2;
            }
        }
        dfs2(0, -1);
        int ans = 0;
        FOR(i, 0, n) ans = max(ans, dp[i]);
        printf("%d\n", ans);
    }
}

