#include <complex>
#include <cassert>
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef complex < double > base ;

const double PI = acos(-1);

const int
	MaxLength = 1 << 16;

void fft ( vector < base > & a, bool invert ) {
	int n = MaxLength;

	for ( int i = 1 , j = 0 ; i < n ; ++ i ) {
		int bit = n >> 1 ;
		for ( ; j >= bit ; bit >>= 1 )
			j -= bit ;
		j += bit ;
		if ( i < j )
			swap ( a [ i ] , a [ j ] ) ;
	}

	for ( int len = 2 ; len <= n ; len <<= 1 ) {
		double ang = 2 * PI / len * ( invert ? - 1 : 1 ) ;
		base wlen ( cos ( ang ) , sin ( ang ) ) ;
		for ( int i = 0 ; i < n ; i += len ) {
			base w ( 1 ) ;
			for ( int j = 0 ; j < len / 2 ; ++j ) {
				base u = a [ i + j ] ,  v = a [ i + j + len / 2 ] * w ;
				a [ i + j ] = u + v ;
				a [ i + j + len / 2 ] = u - v ;
				w *= wlen ;
			}
		}
	}
	if ( invert )
		for ( int i = 0 ; i < n ; ++i )
			a [ i ] /= n ;
}

void multiply(const vector <int> &a,const vector <int> &b,vector <int> &res)
{
	vector < base > fa ( a. begin ( ) , a. end ( ) ) ,  fb ( b. begin ( ) , b. end ( ) ) ;
	fa. resize ( 1 << 16 );
	fb. resize ( 1 << 16 ) ;

	fft ( fa, false );
	fft ( fb, false ) ;
	for ( int i = 0 ; i < MaxLength ; ++i )
		fa [ i ] *= fb [ i ] ;
	fft ( fa, true ) ;

	res. resize ( MaxLength ) ;
	for ( int i = 0 ; i < MaxLength ; ++ i )
		res [ i ] = int ( fa [ i ] . real ( ) + 0.5 ) ;
}

const int
	OFFSET = 10000;

int N;
vector<int> a;
vector<int> b;
vector<int> c;
vector<int> d;

int main()
{
	cin.sync_with_stdio(false);

	cin >> N;
	a.resize(MaxLength);
	for(int i = 0; i < N; i++)
	{
		int x;
		cin >> x;
		a[ x + OFFSET ]++;
	}

	multiply(a, a, b);
	multiply(a, b, c);

	d.resize(2 * a.size());
	for (int i = 0; i < 2 * OFFSET; i++)
		d[2 * i] = a[i];

	multiply(d, a, b);

	assert(b.size() == c.size());

	int length = b.size();
	for (int i = 0; i < length; i++)
	{
		c[ i ] -= 3 * b[ i ];
		if (i % 3 == 0 && c[ i ])
			c[ i ] += 2 * a[ i / 3 ];
		if (c[ i ])
			cout << i - 3 * OFFSET << " : " << c[ i ] / 6 << "\n";
	}

	return 0;
}
