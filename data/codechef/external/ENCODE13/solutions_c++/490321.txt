#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cassert>
#include <complex>

using namespace std;
#define s(n) scanf("%d", &n)
typedef long long LL;


const double PI = 4*atan(1);
typedef complex<double> base;

vector<base> omega;
vector<base> inverse_omega;
int N;

void init_fft(int n)
{
	 N  = n;
	 omega.resize(n);
	 inverse_omega.resize(n);
	 double angle = 2 * PI / n;
	 
	 for(int i = 0; i < n; i++)
	 {
		  double c = cos(i * angle);
		  double s = sin(i * angle);
		  omega[i] = base( c, s);
		  inverse_omega[i] = base(c, -s);
	 }
}


void fft (vector<base> & a, bool invert)
{
	 int n = (int) a.size();
	 if (n == 1)  return;
	 
	 vector<base> even (n/2),  odd (n/2);
	 for (int i=0, j=0; i<n; i+=2, ++j)
	 {
		  even[j] = a[i];
		  odd[j] = a[i+1];
	 }
	 fft (even, invert);
	 fft (odd,  invert);
	 int fact = N /n;
	 for (int i=0; i + i <n; ++i)
	 {
		  base twiddle =  odd[i] * ( invert ? inverse_omega[i * fact] : omega[i * fact]) ;
		  a[i] =  even[i] + twiddle;
		  a[i+n/2] = even[i] - twiddle;
		  if (invert)
			   a[i] /= 2,  a[i+n/2] /= 2;
	 }
}
void multiply (const vector<long long> & a, const vector<long long> & b, vector<long long> & res)
{
	 vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
	 size_t n = 1;
	 while (n < max (a.size(), b.size()))  n <<= 1;
	 n <<= 1;
	 fa.resize (n),  fb.resize (n);
	 
	 init_fft(n);
	 fft (fa, false),  fft (fb, false);
	 for (size_t i=0; i<n; ++i)
		  fa[i] *= fb[i];
	 fft (fa, true);

	 res.resize (n);
	 for (size_t i=0; i<n; ++i)
		  res[i] = (long long) (fa[i].real() + 0.5);
}

const int maxn = 20005;


void print(vector<int>&v,const string s)
{
	 cout << "Vector : " << s <<" is as follows :-\n";
	 for(int i = 0; i <v.size(); i++)
		  printf("%d ", v[i]);
	 cout << endl;
}
LL A[maxn];

int main()
{
	 int N;
	 s(N);
	 for(int i = 0; i < N; i++)
	 {
		  int a; s(a);
		  A[a+10000] ++;
	 }
	 
	 vector<LL> p1(A,A+maxn);
	 vector<LL> p2(2*maxn,0);
	 vector<LL> p3(3*maxn, 0);
	 
	 
	 for(int i = 0; i < maxn; i++)
	 {
		  p2[2*i] = 3*p1[i];
		  p3[3*i] = 2*p1[i];
	 }
	 
	 vector<LL> Q1;
	 multiply(p1,p1,Q1);
	 vector<LL> ans;
	 multiply(p1,Q1,ans);
	 vector<LL> Q3;
	 multiply(p2,p1,Q3);
	 
	 for(int i=0;i<3*maxn;i++)
		  ans[i] = ans[i] - Q3[i] + p3[i];
	 
	 for(int i = 0; i < ans.size(); i++)
		  if( ans[i])
			   printf("%d : %lld\n", i-30000 , ans[i] / 6);
		  
		  
}