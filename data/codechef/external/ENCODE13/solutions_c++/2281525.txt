#include <stdio.h>
#include <cmath>
#include <vector>
#include <complex>
#include <memory.h>

using namespace std;

typedef complex<double> com;
const double pi = 3.1415926535897932384626433832795;

vector <com> a,b;
int q[66666], cnt[66666], cc[66666];
int len,n,i;

void fft(vector <com> &a,bool inv) {
  int n,m,i,j;
  double ang;
  com u,w,wn;
  vector <com> a0,a1;
  n = a.size();
  if (n == 1) return;
  m = n >> 1;
  a0.resize(m);
  a1.resize(m);
  for (i=0,j=0;i<n;i+=2,j++) {
    a0[j] = a[i];
    a1[j] = a[i+1];
  }
  fft(a0,inv);
  fft(a1,inv);
  ang = 2.0*pi/n;
  if (inv) ang = -ang;
  w = 1;
  wn = complex<double>(cos(ang),sin(ang));
  for (i=0;i<m;i++) {
    u = w*a1[i];
    a[i] = a0[i]+u;
    a[i+m] = a0[i]-u;
    if (inv) {
      a[i] /= 2;
      a[i+m] /= 2;
    }
    w *= wn;
  }
}

int main() {
  len = 65536;
  scanf("%d",&n);
  for (i=0;i<len;i++) cnt[i] = 0;
  for (i=0;i<n;i++) {
    scanf("%d",&q[i]);
    q[i] += 10000;
    cnt[q[i]]++;
  }
  a.resize(len);
  b.resize(len);
  for (i=0;i<len;i++) a[i] = com(cnt[i],0);
  for (i=0;i<len;i++) b[i] = a[i];
  fft(a,false);
  fft(b,false);
  for (i=0;i<len;i++) a[i] *= b[i];
  fft(a,true);
  for (i=0;i<len;i++) a[i] = (int)(a[i].real()+0.5);
  for (i=0;i<len;i++) b[i] = com(cnt[i],0);
  fft(a,false);
  fft(b,false);
  for (i=0;i<len;i++) a[i] *= b[i];
  fft(a,true);
  for (i=0;i<len;i++) cc[i] = (int)(a[i].real()+0.5);
  for (i=0;i<len;i++)
    if (i & 1) a[i] = 0;
    else a[i] = com(cnt[i >> 1],0);
  for (i=0;i<len;i++) b[i] = com(cnt[i],0);
  fft(a,false);
  fft(b,false);
  for (i=0;i<len;i++) a[i] *= b[i];
  fft(a,true);
  for (i=0;i<len;i++) cc[i] -= (int)(a[i].real()+0.5)*3;
  for (i=0;i<n;i++) cc[q[i]*3] += 2;
  for (i=0;i<len;i++)
    if (cc[i] > 0) printf("%d : %d\n",i-30000,cc[i]/6);
  return 0;
}
