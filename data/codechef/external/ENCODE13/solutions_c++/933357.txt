#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
using namespace std;
#define PI 3.1415926535897932384626
#define tolong(x) ((long long)floor(x.real+0.5))
struct Complex{
	double real,imag;
	Complex(){}
	Complex(double r,double i):real(r),imag(i){}
}a1[1000000],a2[1000000];
Complex operator +(const Complex& a,const Complex& b) {
	return 	Complex(a.real+b.real,a.imag+b.imag);
}
Complex operator -(const Complex& a,const Complex& b) {
	return 	Complex(a.real-b.real,a.imag-b.imag);
}
Complex operator *(const Complex& a,const Complex& b) {
	return 	Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag +a.imag*b.real);
}
Complex operator /(const Complex& a,const double& b) {
	return 	Complex(a.real/b,a.imag/b);
}
int n,N,i,j,a[50000],R[1000000],a3[1000000];
long long A[1000000],res;
void rev(Complex* a) {
	for (i=0;i<n;i++) if (R[i]<i) swap(a[R[i]],a[i]);
}
void DFT(Complex* a,int n,bool inv) {
	int m,j,k;
	Complex wi,w,u,v;
	rev(a);
	for (m=2;m<=n;m<<=1) {
		double Arg=2*PI/m*(inv?-1:1);
		wi=Complex(cos(Arg),sin(Arg));
		for (j=0;j<n;j+=m) {
			w=Complex(1,0);
			for (k=j;k<j+m/2;k++) {
				u=a[k];v=a[k+m/2]*w;
				a[k]=u+v;a[k+m/2]=u-v;
				w=w*wi;
			}
		}
	}
	if (inv) for (j=0;j<n;j++) a[j]=a[j]/n;
}
int main() {
	scanf("%d",&N);
	for (i=0;i<N;i++) scanf("%d",&a[i]);
	for (i=0;i<N;i++) a1[a[i]+20000].real+=1,
		a2[a[i]+a[i]+40000].real+=1,a3[a[i]+a[i]+a[i]+60000]+=1;
	for (n=1<<17,i=0;i<n;i++) for (int j=0;j<17;j++) R[i]=(R[i]<<1)|((i>>j)&1);
	DFT(a1,n,0);DFT(a2,n,0);
	for (i=0;i<n;i++) a2[i]=a1[i]*a2[i];
	for (i=0;i<n;i++) a1[i]=a1[i]*a1[i]*a1[i];
	DFT(a1,n,1);DFT(a2,n,1);
	for (i=0;i<n;i++) A[i]=tolong(a1[i])-tolong(a2[i])*3+a3[i]*2;
	for (i=0;i<=120000;i++) if (A[i]!=0) printf("%d : %lld\n",i-60000,A[i]/6);
}