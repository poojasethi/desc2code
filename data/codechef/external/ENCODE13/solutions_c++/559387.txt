#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>

using namespace std; 

#define M_PI 3.14159265358979323846

struct base
{
	long double real;
	long double imag;
};

inline base multiply(const base& left, const base& right)
{
	base res;
	res.real = left.real * right.real - left.imag * right.imag;
	res.imag = left.real * right.imag + left.imag * right.real;

	return res;
}


int rev (int num, int lg_n) {
	int res = 0;
	for (int i=0; i<lg_n; ++i)
		if (num & (1<<i))
			res |= 1<<(lg_n-1-i);
	return res;
}

int lg_n;
int rev_t[1 << 19];

void prepare(int n)
{
	lg_n = 0;
	while ((1 << lg_n) < n)  ++lg_n;

	for (int i=0; i<n; ++i)	
		rev_t[i] = rev(i, lg_n);

}

void fft (base* a, int n, bool invert) 
{
	for (int i=0; i<n; ++i)
		if (i < rev_t[i])
			swap (a[i], a[rev_t[i]]);

	for (int len=2; len<=n; len<<=1) 
	{
		long double ang = 2*M_PI/len * (invert ? -1 : 1);
		base wlen = {cos(ang), sin(ang)};

		for (int i=0; i<n; i+=len) 
		{
			base w = {1, 0};
			for (int j=0; j<len/2; ++j) 
			{
				base& a1 = a[i + j];
				base& a2 = a[i + j + len/2];

				base u = a1;
				base v = multiply(a2, w);

				a1.real = u.real + v.real;
				a1.imag = u.imag + v.imag;

				a2.real = u.real - v.real;
				a2.imag = u.imag - v.imag;

				w = multiply(w, wlen);
			}
		}
	}
	if (invert)
		for (int i=0; i<n; ++i)
			a[i].real /= n;
}

#define tolong(x) ((long long) floor (x.real + 0.5))

base s1[1 << 18];
base s2[1 << 18];
base s3[1 << 18];
base s4[1 << 18];
base s5[1 << 18];
base s6[1 << 18];
int n;

void BruteForce()
{
	int N;
	scanf("%d", &N);

	vector<int> s(N);

	for (int i = 0; i < N; i++)
	{
		int x;
		scanf("%d", &x);
		s[i] = x;
	}
	vector<int> total(1200000);
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < i; j++)
		{
			for (int k = 0; k < j; k++)
			{
				int r = s[i] + s[j] + s[k];
				total[r + 60000]++;
			}
		}
	}
	for (int i = 0; i < total.size(); i++)
	{
		int r = total[i];
		if (r == 0)
			continue;

		printf("%d: %d\n", i - 60000, r);
	}
}

int main(int argc, char* argv[])
{
#ifndef ONLINE_JUDGE
	freopen("test.in", "r", stdin);
#endif

#if 0
	printf("500\n");
	for (int i = 0; i < 500; i++)
		printf("%d\n", rand() % 1000 - 500);
	return 0;
#endif
#if 0
	BruteForce();
#endif

	int N;
	scanf("%d", &N);

	for (int i = 0; i < N; i++)
	{
		int x;
		scanf("%d", &x);
		
		s1[x + 20000].real++;
		s2[x + 20000 + x + 20000].real++;
		s6[3 * x + 60000].real++;
	}
	
	int n = 1 << 17;

	prepare(n);
	fft(s1, n, false);

	fft(s2, n, false);

	for (int i = 0; i < n; i++)
	{
		s3[i] = multiply(s1[i], multiply(s1[i], s1[i]));
		s5[i] = multiply(s1[i], s2[i]);
	}
	fft(s3, n, true);
	fft(s5, n, true);
	
	for (int i = 0; i <= 2 * 60000; i++)
	{
		long long r = tolong(s3[i]);
		if (r == 0)
			continue;


		long long rsame = tolong(s6[i]);
		long long r2 = tolong(s5[i]);

		r = r - (r2 - rsame) * 3 - rsame;
		if (r == 0)
			continue;

		assert ((r % 6) == 0);

		printf("%d : %lld\n", i - 60000, r / 6);
	}


	
	return 0;
}
