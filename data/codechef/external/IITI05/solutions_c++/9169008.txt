#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <map>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <cstring>
#define REP(i,x,v)for(int i=x;i<=v;i++)
#define REPD(i,x,v)for(int i=x;i>=v;i--)
#define FOR(i,v)for(int i=0;i<v;i++)
#define FORE(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REMIN(x,y) (x)=min((x),(y))
#define REMAX(x,y) (x)=max((x),(y))
#define pb push_back
#define sz size()
#define mp make_pair
#define fi first
#define se second
#define ll long long
#define IN(x,y) ((y).find((x))!=(y).end())
#define un(v) v.erase(unique(ALL(v)),v.end())
#define LOLDBG
#ifdef LOLDBG
#define DBG(vari) cerr<<#vari<<" = "<<vari<<endl;
#define DBG2(v1,v2) cerr<<(v1)<<" - "<<(v2)<<endl;
#else
#define DBG(vari)
#define DBG2(v1,v2)
#endif
#define CZ(x) scanf("%d",&(x));
#define CZ2(x,y) scanf("%d%d",&(x),&(y));
#define CZ3(x,y,z) scanf("%d%d%d",&(x),&(y),&(z));
#define ALL(x) (x).begin(),(x).end()
#define tests int dsdsf;cin>>dsdsf;while(dsdsf--)
#define testss int dsdsf;CZ(dsdsf);while(dsdsf--)
using namespace std;
typedef pair<int,int> pii;
typedef vector<int> vi;
template<typename T,typename TT> ostream &operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream &operator<<(ostream &s,vector<T> t){s<<"{";FOR(i,t.size())s<<t[i]<<(i==t.size()-1?"":",");return s<<"}"<<endl; }
 
#define M (1<<17)
 
struct ext
{
    int x;
    ext(){x=0;}
    inline ext operator+(const ext& A) const
    {
        ext w;
        w.x=x^A.x;
        return w;
    }
};
 
struct node//node() el neutralny
{
    int v[4];
    node(){v[0]=v[1]=v[2]=v[3]=0;}
    inline node operator+(const node& A) const
    {
        node w;
        FOR(i,4) w.v[i]=v[i]+A.v[i];
        return w;
    }
    node extend(ext E)
    {
        node w;
        FOR(i,4) w.v[i]=v[i^E.x];
        return w;
    }
};
 
node d[2*M];
ext e[2*M];
int A,B;
ext V;
 
node qu(int l,int r,int nr)
{
    if (A<=l && r<=B) return d[nr];
    if (A>r || B<l) return node();
    return (qu(l,(l+r)/2,nr*2)+qu((l+r)/2+1,r,nr*2+1)).extend(e[nr]);
}
 
node query(int a,int b)
{
    A=a;B=b;
    return qu(0,M-1,1);
}
 
 
void md(int l,int r,int nr)
{
    if (A<=l && r<=B) 
    {
        d[nr]=d[nr].extend(V);
        e[nr]=e[nr]+V;
        return;
    }
    if (A>r || B<l) return;
    md(l,(l+r)/2,nr*2);md((l+r)/2+1,r,nr*2+1);
    d[nr]=(d[nr*2]+d[nr*2+1]).extend(e[nr]);
}
 
void modify(int a,int b,ext val)
{
    A=a;B=b;V=val;
    md(0,M-1,1);
}
 
void czysc()
{
    FOR(i,2*M) d[i]=node();
    FOR(i,2*M) e[i]=ext();
}
 
void bulk()
{
    REPD(i,M-1,1) d[i]=(d[i*2]+d[i*2+1]);
}
 
 
 
int main()
{
    ios_base::sync_with_stdio(0);
    int n;CZ(n);
    czysc();
    FOR(i,n)
    {
        int a;CZ(a);
        d[M+i].v[a]=1;
    }
    bulk();
    int q;CZ(q);
    node tp;
    ext f;
    while(q--)
    {
        int a,b,c;
        CZ3(a,b,c);
        b--;c--;
        if (a==0)
        {
            tp=query(b,c);
            printf("%d %d %d %d\n",tp.v[1],tp.v[3],tp.v[0],tp.v[2]);
        }
        else
        {
            f.x=a;
            modify(b,c,f);
        }
    }
 
    return 0;
}
 