#include <iostream>
 
using namespace std;
 
void merge(long long*,long long*,long long,long long,long long);
void mergesort(long long *a, long long*b, long long low, long long high)
{
    long long pivot;
    if(low<high)
    {
        pivot=(low+high)/2;
        mergesort(a,b,low,pivot);
        mergesort(a,b,pivot+1,high);
        merge(a,b,low,pivot,high);
    }
}
void merge(long long *a, long long *b, long long low, long long pivot, long long high)
{
    long long h,i,j,k;
    h=low;
    i=low;
    j=pivot+1;
 
    while((h<=pivot)&&(j<=high))
    {
        if(a[h]<=a[j])
        {
            b[i]=a[h];
            h++;
        }
        else
        {
            b[i]=a[j];
            j++;
        }
        i++;
    }
    if(h>pivot)
    {
        for(k=j; k<=high; k++)
        {
            b[i]=a[k];
            i++;
        }
    }
    else
    {
        for(k=h; k<=pivot; k++)
        {
            b[i]=a[k];
            i++;
        }
    }
    for(k=low; k<=high; k++) a[k]=b[k];
}
 
int main()
{ long long t;cin>>t;
for(long long k=0;k<t;k++)
 {  long long n,need;
   cin>>n>>need;    
   long long a[n] ;
   for(long long i=0;i<n;i++)
   {cin>>a[i];}         
 
    long long num;
    long long sum=0;
    num = sizeof(a)/sizeof(long long);
 
    long long b[num];
 
    mergesort(a,b,0,num-1);
        
        
 
  for(long long i=num-1; i>=num-need; i--)
       {sum=sum+a[i];}
    cout<<sum<<endl;
}
 
return 0;
}