#include <cstdio>
 
class binaryHeap
{
public:
    int data[100000];
    int length;
 
    void reset() {length = 0;}
 
    void insert(int n)
    {
        int index, parentIndex;
        int temp;
        length++;
        data[length] = n;
        index = length;
        parentIndex = length >> 1;
        while (parentIndex)
        {
            if (data[parentIndex] <= data[index])
                break;
 
            temp = data[parentIndex];
            data[parentIndex] = data[index];
            data[index] = temp;
            index = parentIndex;
            parentIndex >>= 1;
        }
    }
 
    void replaceMin(int n)
    {
        int index, childIndex;
        int temp;
        data[1] = n;
        index = 1;
        childIndex = 2;
        while (childIndex <= length)
        {
            if ( (childIndex+1 <= length) && (data[childIndex+1] < data[childIndex] ) )
            {
                childIndex++;
            }
            if (data[childIndex] >= data[index])
                break;
 
            temp = data[childIndex];
            data[childIndex] = data[index];
            data[index] = temp;
            index = childIndex;
            childIndex <<= 1;
        }
 
    }
};
 
class Input
{
private:
 
	char buffer[1048576];
	int bufferMax,nextToRead;
 
	void refill()
	{
		bufferMax = fread(buffer,1,1048576,stdin);
		nextToRead = 0;
	}
 
	int getNextChar()
	{
		if ( nextToRead == bufferMax )
			refill();
 
		return buffer[nextToRead++];
	}
 
public:
 
	Input(){bufferMax = nextToRead = 0;}
 
	int getInt()
	{
		int ret = 0; int c;
		while((c = getNextChar()) < 48);
		do
		{
			ret = 10*ret + c - 48;
		}
		while((c = getNextChar()) > 47);
		return ret;
	}
};
 
binaryHeap heap;
 
int main()
{
    Input input;
    int tests, items, essential;
    int minimumEssential, nextItem;
    long long int sum;
 
 
    tests = input.getInt();
 
    while (tests--)
    {
        items = input.getInt();
        essential = input.getInt();
        heap.reset();
        sum = 0;
 
        while (heap.length < essential)
        {
            nextItem = input.getInt();
            heap.insert(nextItem);
            sum += nextItem;
        }
        minimumEssential = heap.data[1];
 
        for (int i = essential ; i < items ; i++)
        {
            nextItem = input.getInt();
            if (nextItem <= minimumEssential)
                continue;
 
            heap.replaceMin(nextItem);
            sum += nextItem - minimumEssential;
            minimumEssential = heap.data[1];
        }
 
        printf("%lld\n", sum);
    }
 
    return 0;
} 