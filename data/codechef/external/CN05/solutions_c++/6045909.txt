#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <list>
#include <utility>
#include <algorithm>
#include <cassert>
#include <fstream>
 
using namespace std;
//typedefs
typedef long long ll; 
typedef unsigned long long ull;
typedef pair<int,int> pii;
 
 
#define MOD 1000000007

ll **matrixMultiplication(ll **A,ll **B){
    ll ** C;

    C=(ll **)malloc(sizeof(ll)*2);
    for(ll i=0;i<2;i++){
        C[i]=(ll *)malloc(sizeof(ll )*2);
    }

    C[0][0]=((A[0][0]*B[0][0])%MOD+(A[0][1]*B[1][0])%MOD)%MOD;
    C[0][1]=((A[0][0]*B[0][1])%MOD+(A[0][1]*B[1][1])%MOD)%MOD;
    C[1][0]=((A[1][0]*B[0][0])%MOD+(A[1][1]*B[1][0])%MOD)%MOD;
    C[1][1]=((A[1][0]*B[0][1])%MOD+(A[1][1]*B[1][1])%MOD)%MOD;
    return C;
}
ll **logarithmicExponentiation(ll **A,ll n){
    ll ** C;

    C=(ll **)malloc(sizeof(ll)*2);
    for(ll i=0;i<2;i++){
        C[i]=(ll *)malloc(sizeof(ll )*2);
    }
    C[0][0]=1;
    C[0][1]=0;
    C[1][0]=0;
    C[1][1]=1;

    if(n==1)return A;
    else if(n==0){
        
        return C;
    }
    else if(n%2==0){
        C=logarithmicExponentiation(A,n/2);
        return matrixMultiplication(C,C);
    }
    else{
        C=logarithmicExponentiation(A,n/2);
        return matrixMultiplication(matrixMultiplication(C,C),A);
    }
}
int main () {
    ios_base::sync_with_stdio(false);
    
    ll n,ans,t;
    ll ** mat,**res;
	cin>>t;
    mat=(ll **)malloc(sizeof(ll *)*2);
    for(ll i=0;i<2;i++){
        mat[i]=(ll *)malloc(sizeof(ll )*2);
    }
    
    mat[0][0]=2;
    mat[0][1]=3;
    mat[1][0]=1;
    mat[1][1]=0;
    
    while(t--){
        cin>>n;
        if(n==0)cout<<2<<endl;
        else if(n==1)cout<<5<<endl;
        else{
						//cout<<"n is equal to :"<<n<<endl;
            res=logarithmicExponentiation(mat,n-1);
            cout<<((res[0][0]*5)%MOD+(res[0][1]*2)%MOD)%MOD<<endl;
        }
    }
    
    
    //system("pause");
    return 0;
}
