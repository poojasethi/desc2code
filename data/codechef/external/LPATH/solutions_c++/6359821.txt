#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ulli        unsigned long long int
#define lli         long long int
#define clr(x)      memset(x,0)
#define set(x)      memset(x,1)
#define memset(x,i) memset(x,i,sizeof(x))
#define Sd(x)       scanf("%d",&x);
#define Sf(x)       scanf("%f",&x);
#define Sc(x)       scanf("%c",&x);
#define Ss(x)       scanf("%s",x);
#define Sulli(x)    scanf("%llu",&x)
#define F(i,a,n)    for(int i=a;i<n;i++)
#define FD(i,a,n)   for(int i=a;i>=n;i--)
#define Nl          printf("\n");

//-----RELEVANT CODE-----

int a[205][205],v[205][205];
int r,c;
int dx[] = {0, 0, 1, -1, 1, -1, 1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, -1, 1};

bool isvalid(int i,int j)
{
    return i>=0 && j>=0 && i<r && j<c;
}

int f(int x,int y)
{
    int i;
    if(v[x][y]!=-1)
        return v[x][y];
    v[x][y]=0;
    F(i,0,8)
    {
        int nx=x+dx[i];
        int ny=y+dy[i];
        if(isvalid(nx,ny) && a[nx][ny]==a[x][y]+1)
            v[x][y]=max(v[x][y],1+f(nx,ny));
    }
    return v[x][y];
}
int main()
{
    //freopen("inp.txt","r",stdin);
    int t,ans;
    Sd(t);
    while(t--)
    {
        memset(v,-1);
        scanf("%d %d",&r,&c);
        F(i,0,r) F(j,0,c) Sd(a[i][j]);
        ans = -1;
        F(i,0,r)
        {
            F(j,0,c)
            {
                if(a[i][j]==0 && v[i][j]==-1)
                    ans=max(ans,f(i,j));
            }
        }
        printf("%d\n",ans+1);
    }
    return 0;
}

