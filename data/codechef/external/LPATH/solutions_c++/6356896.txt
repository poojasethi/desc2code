#include<stdio.h>
#include<vector>
using namespace std;
#define gc getchar_unlocked
long long ma = 0;
void scan(long long &x)
{
register int c = gc();
x = 0;
for(;(c<48 || c>57);c = gc());
for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
long long r , c ;
long long graph[1000][1000];
long long dp[1000][1000];
vector < pair <long , long > > zero ;
int x[] = {1 , -1 , 0 , 0 , 1 , -1 , 1 , -1};
int y[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
void count_path (long long row , long long col , long long k) {
if (row >= r || col >= c || row < 0|| col < 0)
return ;
for ( int i = 0; i < 8; i++) {
if (row + x[i] >= r || col + y[i] >= c || row + x[i] < 0 || col + y[i] < 0)
continue;
if (graph[row+x[i]][col+y[i]] == k && dp[row+x[i]][col+y[i]] < dp[row][col] + 1) {
dp[row + x[i]][col+y[i]] = 1 + dp[row][col];
//if (ma < dp[row + x[i]][col + y[i]] )
//ma = dp[row + x[i]][col + y[i]] ;
//printf("dp %d\n", dp[row + x[i]][col+y[i]]);
//long long m = k + 1;
count_path(row + x[i] , col + y[i] , k+1);
}
}
}
int main() {
int t;
scanf("%d", &t);
while(t--) {
ma = 0;
zero.clear();
//scanf("%d%d", &r , &c);
scan(r);
scan(c);
for (long long i = 0; i < r; i++) {
for (long long j = 0; j < c; j++) {
scan(graph[i][j]);
dp[i][j] = 0;
if (graph[i][j] == 0) {
zero.push_back( pair <long long , long long > (i , j) );
dp[i][j] = 1;
}
}
}
//long long max = 0;
int k ;
for (long long i = 0; i < zero.size(); i++) {
k = 1;
count_path( zero[i].first , zero[i].second , 1);
}
for (long long i = 0; i < r; i++) {
for (long long j = 0; j < c; j++) {
if (ma < dp[i][j])
ma = dp[i][j];
}
}
printf("%lld\n", ma);
}

return 0;
}