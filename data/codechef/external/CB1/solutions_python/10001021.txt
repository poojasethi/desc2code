using namespace std;

#include <string>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
#include <stack>
#include <queue>
#include <limits.h>
#include <iterator>
#include <iomanip>
#include <time.h>

#define null NULL
#define PRINT_NEW_LINE printf("\n")
#define gc getchar_unlocked
#define MAX_INPUT_SIZE 1001
#define CODEFORCES_MAX_INPUT_SIZE 101
#define TOPCODER_MAX_INPUT_SIZE 51
#define ALPHABET_SIZE 26
#define HACKER_RANK_LOWER_CASE "hackerrank"
#define MAX_SIZE_USER_INPUT 101
#define LIMIT 10000001
#define MODN 1000000007
#define MAX_SIZE 1000001

#define gc getchar_unlocked

void solveProblem() {
    bool primeNumbers[MAX_SIZE];
    memset(primeNumbers, true, sizeof(primeNumbers));
    primeNumbers[0] = false;
    primeNumbers[1] = false;
    for (int outerCounter = 2; outerCounter * outerCounter < MAX_SIZE; outerCounter++) {
        if (primeNumbers[outerCounter]) {
            for (int innerCounter = outerCounter * 2; innerCounter < MAX_SIZE; innerCounter = innerCounter + outerCounter) {
                primeNumbers[innerCounter] = false;
            }
        }
    }
    int countOfPrimes[MAX_SIZE] = { 0 };
    for (int outerCounter = 2; outerCounter < MAX_SIZE; outerCounter++) {
        if (primeNumbers[outerCounter]) {
            countOfPrimes[outerCounter] = countOfPrimes[outerCounter - 1] + 1;
        } else {
            countOfPrimes[outerCounter] = countOfPrimes[outerCounter - 1];
        }
    }
    unsigned int testCases;
    int fUserInput, sUserInput;
    scanf("%u", &testCases);
    while (testCases--) {
        scanf("%d %d", &fUserInput, &sUserInput);
        printf("%d\n", countOfPrimes[sUserInput] - countOfPrimes[fUserInput - 1]);
    }
}

int main() {
    solveProblem();
    return 0;
}
