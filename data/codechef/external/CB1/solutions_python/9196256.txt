/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    private static final Scanner in = new Scanner(System.in);
    private static int[] primes = new int[1000000];
    private static long primeProd;
    private static int lastProdIndex;
    private static int maxPrimes;

    private static int countBits(long n) {
        int count=0;
        for (int incr=32; incr>0; incr>>=1) {
            long n2 = n>>>incr;
            if (n2 >0) {
                count += incr;
                n=n2;
            }
        }
        return count;
    }

    private static long gcd(long a, long b) {
        if (b==0) { return a; }
        for(;;) {
            if ((a%=b) == 0) { return b; }
            if ((b%=a) == 0) { return a; }
        }
    }

    private static void init() {
        primes[0] = 2;
        primes[1] = 3;
        maxPrimes = 2;
        primeProd = 1;
        int primeProdBits = 2;
        int nextPrime = 3;
        while (countBits(nextPrime) + primeProdBits < 63) {
            primeProd *= nextPrime;
            primeProdBits = countBits(primeProd);
            for (nextPrime += 2; gcd(primeProd,nextPrime) > 1; nextPrime+= 2);
            primes[maxPrimes++] = nextPrime;
        }
        lastProdIndex = maxPrimes-2;
    }
    
    

    private static boolean isPrime(int n) {
        if (gcd(primeProd,n) > 1) { return false; }
        int a = (int)Math.ceil(Math.sqrt(n));
        int diff = a*a-n;
        int b = (int)Math.ceil(Math.sqrt(diff));
        if ((b*b - diff) == 0) { return false; }
        for (int i = lastPrimeIndex(a-b); i > lastProdIndex; --i) {
            if (n % primes[i] == 0) { return false; }
        }
        return true;
    }

    /* Generate primes until the highest is at least n. */
    private static void generatePrimes(int n) {
        int lastPrime = primes[maxPrimes-1];
        while (lastPrime < n) {
            for (lastPrime += 2; !isPrime(lastPrime); lastPrime += 2);
            primes[maxPrimes++] = lastPrime;
        }
    }

    /* Returns the index of the first prime >= n. */
    private static int firstPrimeIndex(int n) {
        if (n <= primes[0]) { return 0; }
        int low = 0;
        int high = Math.min(maxPrimes-1, n);
        assert primes[high] >= n;
        while (high-low > 1) {
            int mid = (high+low)/2;
            if (primes[mid] < n) {
                low = mid;
            } else if (primes[mid] > n) {
                high = mid;
            } else {
                return mid;
            }
        }
        return high;
    }

    /* Returns the index of the last prime <= n. */
    private static int lastPrimeIndex(int n) {
        if (primes[maxPrimes-1]==n) { return maxPrimes-1; }
        int low = 0;
        int high = Math.min(maxPrimes-1, n);
        if (primes[high] <= n) { return high; } // It is possible the last prime is n.
        while (high-low > 1) {
            int mid = (high+low)/2;
            if (primes[mid] < n) {
                low = mid;
            } else if (primes[mid] > n) {
                high = mid;
            } else {
                return mid;
            }
        }
        return low;
    }

    private static int countPrimes(int start, int end) {
        int count = 0;
        generatePrimes(end);
        int a = firstPrimeIndex(start);
        int b = lastPrimeIndex(end);
        /*
        if (a > 0 && b < maxPrimes-1) {
            System.out.println(primes[a-1] + " <= " + start + " <= " + primes[a]);
            System.out.println(primes[b] + " <= " + end + " <= " + primes[b+1]);
        } else {
            System.out.println(start + " <= " + primes[a]);
            System.out.println(primes[b] + " <= " + end);
        }
        */
        return 1 - firstPrimeIndex(start) + lastPrimeIndex(end);
    }

    private static void printPrimes() {
        System.out.print("primes = [" + primes[0]);
        for(int i=1; i<maxPrimes; i++) { System.out.print(", " + primes[i]); }
        System.out.println("]");
    }

	public static void main (String[] args) throws java.lang.Exception
	{
	    init();
	    //printPrimes();
	    //System.out.println("primes["+lastProdIndex+"] = "+primes[lastProdIndex]);
	    //System.exit(0);
	    //generatePrimes(10000);
	    //printPrimes();
	    int t = in.nextInt();
	    while (t-->0) {
	        System.out.println(countPrimes(in.nextInt(), in.nextInt()));
	    }
		// your code goes here
	}
}
