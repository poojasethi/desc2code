#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 100005
#define NN 705
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define ln 1000000000
#define cs 137
#define Line pair < pair <ll, ll>, ll >
#define Pi pair < Pa, Pa >
#define Pa pair < int, int >


using namespace std;

int Fmax[N], Smax[N], Par[N], H[N], Center[N], Rad[N], n;
vector < Pa > a[N];

void DFS(int u, int pre)
{
    Fmax[u] = Smax[u] = 0;
    Par[u] = pre;
    for(int i=0; i<a[u].size(); i++)
    {
        int v = a[u][i].f;
        int w = a[u][i].s;
        if(v == pre)    continue;
        H[v] = H[u] + w;
        DFS(v, u);
        if(Fmax[u] < Fmax[v] + w)
        {
            Smax[u] = Fmax[u];
            Fmax[u] = Fmax[v] + w;
        }
        else
            Smax[u] = max(Smax[u], Fmax[v] + w);
    }
    if(Fmax[u] == Smax[u])
    {
        Center[u] = u;
        Rad[u] = Fmax[u];
        return;
    }
    for(int i=0; i<a[u].size(); i++)
    {
        int v = a[u][i].f;
        int w = a[u][i].s;
        if(v == pre || (Fmax[v] + w) != Fmax[u])    continue;
        int center = Center[u] = Center[v];
        Rad[u] = max(max(H[center] - H[u] + Smax[u], Fmax[center]), Rad[v]);
        if(Rad[u] != Rad[v])
        while(center != u)
        {
            center = Par[center];
            int New = max(Fmax[center], H[center] - H[u] + Smax[u]);
            if(Rad[u] >= New)
            {
                Rad[u] = New;
                Center[u] = center;
            }
            else
                break;
        }
    }
}

int main()
{
   // filein("AMAEXPER.inp"); fileout("AMAEXPER.out");
    int T, u, v, w;
    cin >> T;
    while(T--)
    {
        cin >> n;
        for(int i=1; i<=n; i++)
            a[i].clear();
        for(int i=1; i<n; i++)
        {
            scanf("%d%d%d", &u, &v, &w);
            a[u].push_back(mp(v, w));
            a[v].push_back(mp(u, w));
        }
        DFS(1, 0);
        for(int i=1; i<=n; i++)
            printf("%d\n", Rad[i]);
    }
}
