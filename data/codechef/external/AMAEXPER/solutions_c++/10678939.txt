    #include <cstdio>
    #include <algorithm>
    #include <cstdlib>
    using namespace std;
     
    #define N 100010
     
    int h[N], parent[N][20], dmax[N], droot[N], diameter[N], radius[N], end[N];
    int n, tote, height;
     
    struct edge{
    	int t, l, n;
    }e[N * 2];
     
    void adde(int u, int v, int l) {
    	e[++tote].t = v;
    	e[tote].l = l;
    	e[tote].n = h[u];
    	h[u] = tote;
    	return ;
    }
     
    void dfs1(int u) {
    	for (int i = h[u]; i; i = e[i].n) {
    		int v = e[i].t;
    		if (v == parent[u][0]) continue;
    		parent[v][0] = u;
    		dfs1(v);
    	}
    	return ;
    }
     
    void dfs2(int u) {
    	int dmax2 = 0;
    	dmax[u] = diameter[u] = radius[u] = 0;
        end[u] = u;
        for (int i = h[u]; i; i = e[i].n) {
        	int v = e[i].t, l = e[i].l;
        	if (parent[u][0] == v) continue;
        	droot[v] = droot[u] + l;
            dfs2(v);
            if (diameter[v] > diameter[u]) {
            	diameter[u] = diameter[v];
                radius[u] = radius[v];	
            }
            if (dmax[v] + l >= dmax[u]) {
            	dmax2 = dmax[u];
                dmax[u] = dmax[v] + l;
                end[u] = end[v];
            }
            else if (dmax[v] + l > dmax2)
                dmax2 = dmax[v] + l;
        if (dmax[u] + dmax2 > diameter[u]) {
            diameter[u] = dmax[u] + dmax2;
        	int t = height, z = end[u];
        	//while (parent[z][0] != 0 && (dmax2 + droot[parent[z][0]] - droot[u]) > (dmax[u] + dmax2) / 2) z = parent[z][0];
        	while (t >= 0) {
        		if (parent[z][t] != 0 && (dmax2 + droot[parent[z][t]] - droot[u]) > (dmax[u] + dmax2) / 2) z = parent[z][t];	
        		t--;
        	}
        	int l1 = dmax2 + droot[z] - droot[u];
        	int l2 = diameter[u] - (droot[parent[z][0]] - droot[u]) - dmax2;
            radius[u] = min(l1, l2);
        }
      }
        return ;
    }
     
    int main() {
    	int test;
    	scanf("%d\n", &test);
    	for (int t = 1; t <= test; t++) {
    	scanf("%d",&n);
    	tote = 0;
    	for (int i = 1; i <= n; i++) h[i] = parent[i][0] = 0;
    	for (int i = 1; i < n; i++) {
    		int u, v, l;
    		scanf("%d%d%d", &u, &v, &l);
    		adde(u, v, l); adde(v, u, l);
    	}
     
    	dfs1(1);
    	
    	for (int i = 1; i <= 17; i++) {
    		bool flag = false;
    		for (int j = 1; j <= n; j++) {
    			parent[j][i] = parent[parent[j][i - 1]][i - 1];
    			if (parent[j][i] != 0) flag = true;
    		}
     
    		if (!flag) {
    			height = i;
    			break;
    		}
    	}
     
    	dfs2(1);
    	
    	for (int i = 1; i <= n; i++) printf("%d\n", radius[i]);
    	
    	}
    	return 0;
    } 