#include<iostream>
using namespace std;
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<vector>
#include<map>
#include<queue>
#include<algorithm>
#include<cmath>
#include<set>
#include<ctime>
#include<stack>
#include<list>
#include<cassert>
typedef pair<int,int> pii;
#define rep(i,j,n) for(i=j;i<n;i++)
#define pb push_back
#define sz(a) a.size()
#define ff first
#define ss second 
#define lli long long int

const int maxn = 1e5+9;
vector<int> adj[maxn];
int cnt;
int start[maxn], end[maxn];
int level[maxn];
lli sqrd[350][maxn];
int pos[maxn];
lli ans[maxn];
lli dd[350];

void dfs(lli node, lli lev){
	
	start[node] = ++cnt;
	level[node] = lev;

	for(lli i=0; i<adj[node].size(); i++){
		lli u = adj[node][i];
		if(start[u] == 0)
			dfs(u,lev+1);
	}

	end[node] = cnt;
}

int main() {
	
	//clock_t start = std::clock();
	//freopen ("inp.txt","r",stdin);
	//freopen ("out.txt","w",stdout);
	//cout << "Time: " << (std::clock() - start) / (double)(CLOCKS_PER_SEC / 1000) << " ms" << std::endl;
	

	lli n,m,i,x,y,j;

	cin>>n>>m;
	
	rep(i,0,n-1){

		cin>>x>>y;
		x--,y--;
		adj[x].pb(y);
		adj[y].pb(x);			

	}
	
	dfs(0,0);
	rep(i,0,n)
		start[i]--,end[i]--;
	for(i=0; i<n; i++)
		pos[start[i]] = i;
	
	lli sq = sqrt(n);
	lli maxi = (n-1)/sq + 1;
	
	for(i=0; i<n; i++){
		lli id = i/sq;
		sqrd[id][level[pos[i]]]++;
	}
	
	lli type,l,k;
	for(i=0; i<m; i++){
		
		
		cin>>type;
		if(type == 1){
			cin>>l>>y;
			ans[l] += y;
			for(j=0; j<maxi+2; j++){
				dd[j] += sqrd[j][l]*y;
			}
		}
		if(type == 2){
			cin>>x;
			lli a = start[x-1], b = end[x-1];
			lli answer = 0;
			for(j=(b/sq)*sq; j<=b; j++)
				answer += ans[level[pos[j]]];
			for(j=(a/sq)*sq; j<a; j++)
				answer -= ans[level[pos[j]]];
				
			for(j=a/sq; j<b/sq; j++)
				answer += dd[j];
			
			cout << answer << endl;
		}
	}
	
	return 0;
}