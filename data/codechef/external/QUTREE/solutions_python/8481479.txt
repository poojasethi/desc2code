#include <iostream>
#include <cassert>
#include <fstream>
#include <cstdio>
#include <cassert>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <string>
#include <utility>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <ctime>
#include <vector>                              
using namespace std;
#define fname ""
#define ull unsigned long long
#define ll long long
#define INF 1000*1000*1000
#define F first
#define S second
#define mp make_pair
#define pb push_back
const int N = 100500;
 
ll d[N], cost[N];
 
int sz = 0, which[N], by[N];
int lvl[N], L[N], R[N], total = 0;
 
int par[N];
 
vector <int> a[N], all[N];
int n, m;
 
ll tot[N];
 
void calc(int v, int p = 0) {
	d[v] = cost[v];
	for (int i = 0; i < a[v].size(); ++ i) {
		int to = a[v][i];
		if (to != p) {
			calc(to, v);
			d[v] += d[to];
		}
	}
}
 
void recalc() {
	for (int i = 0; i <= n; ++ i) {
		tot[i] = 0;
	}
	for (int i = 1; i <= sz; ++ i) {
		tot[which[i]] += by[i];
	}
	for (int i = 1; i <= n; ++ i) {
		cost[i] += tot[lvl[i]];
	}
	calc(1);
	sz = 0;
}
 
void dfs(int v, int p = 0) {
	par[++total] = v;
	L[v] = total;
	for (int i = 0; i < a[v].size(); ++ i) {
		int to = a[v][i];
		if (to != p) {
			lvl[to] = lvl[v] + 1;
			dfs(to, v);
		}
	}
	R[v] = total;
}
 
int GetCnt(int v, int level) {
	int left = lower_bound(all[level].begin(), all[level].end(), L[v]) - all[level].begin();
	int right = upper_bound(all[level].begin(), all[level].end(), R[v]) - all[level].begin();
	return right - left;
}
 
void solve() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i < n; ++ i) {
		int x, y;
		scanf("%d%d", &x, &y);
		a[x].pb(y);
		a[y].pb(x);
	}
	
	dfs(1);
 
	for (int i = 1; i <= total; ++ i) {
		all[lvl[par[i]]].pb(i);
	}
 
	for (int i = 1; i <= m; ++ i) {
		int type;
		scanf("%d", &type);
		if (type == 1) {
			++sz;
			scanf("%d%d", &which[sz], &by[sz]);
		}
		else {
			int ver;
			scanf("%d", &ver);
			ll ans = d[ver];
			for (int j = 1; j <= sz; ++ j) {
				ans += GetCnt(ver, which[j]) * 1ll * by[j];
			}
			printf("%lld\n", ans);
		}
		if (sz >= 600) recalc();
	}
}
 
int main ()
{
	#ifndef ONLINE_JUDGE
	freopen (fname"in","r",stdin);
	freopen (fname"out","w",stdout);
	#endif
 
	solve();
 
	return 0;
} 