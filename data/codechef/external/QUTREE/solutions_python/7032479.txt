#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
int tnow=0;
vector<int> V[100005];
int in[100005],out[100005],level[100005];
int chk[100005],arr[100005];
void dfs(int v, int par){
    level[v] = (par == -1 ? 0 : level[par]+1);
    in[v] = tnow;
    arr[tnow++] = v;

    for(int i=0;i<(int)V[v].size();i++){
        int vv = V[v][i];
        if(vv == par)   continue;
        dfs(vv, v);
    }

    out[v] = tnow;
}
int n,m,block;
LL blockcnt[318][100005],levelval[100005],blocksum[100005];
void getblockcount()
{
    for(int i=0;i<tnow;i++){
        int bl=i/block;
        blockcnt[bl][level[arr[i]]]++;
    }
}
LL query(int l,int r)
{
    int st=l/block;
    int en=r/block;
    LL ans=0;
    if(st==en){
        for(int i=l;i<=r;i++)
        {
            int v=arr[i];
            ans+=levelval[level[v]];
        }
     return ans;
    }
    for(int i=st+1;i<en;i++)
    {
        ans+=blocksum[i];
    }
    for(int i=l;i/block==st;i++){
        ans+=levelval[level[arr[i]]];
    }
    for(int i=r;i/block==en;i--)
        ans+=levelval[level[arr[i]]];
    return ans;
}
int main()
{
    scanf("%d %d",&n,&m);
    int u,v;
    block=ceil(sqrt(n));
    for(int i=1;i<n;i++)
    {
        scanf("%d %d",&u,&v);
        V[u].push_back(v);
        V[v].push_back(u);
    }
    dfs(1,-1);
    getblockcount();
    int q,id,lev;
    LL cost;
    while(m--){
        scanf("%d",&id);
        if(id==1){
            scanf("%d %lld",&lev,&cost);
            levelval[lev]+=cost;
            for(int i=0;i<block;i++)
                blocksum[i]+=blockcnt[i][lev]*cost;
        }
        else
        {
            scanf("%d",&u);
            LL ans=query(in[u],out[u]-1);
            printf("%lld\n",ans);
        }
       // printf("\n");
    }
    return 0;
}
/*
7 10
1 2
1 3
3 4
3 5
5 6
5 7
1 2 4
2 1
1 1 5
2 4
2 5
2 1
*/
