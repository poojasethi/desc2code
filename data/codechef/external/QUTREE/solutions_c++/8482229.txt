#include<bits/stdc++.h>
using namespace std;

#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define ll long long
#define ull unsigned ll
#define N 100009

vector<int> g[N],level[N];
int n,m;
ll d[N];
int lvl[N];
int par[N],L[N],R[N];
int total=0;
int which[N],by[N];
int sz=0;
ll tot[N],cost[N];

void dfs2(int u,int p)
{
   d[u]=cost[u];
   for(int i=0;i<g[u].size();i++)
   {
       int v = g[u][i];
       if(v==p)continue;
       dfs2(v,u);
       d[u] += d[v];
   }
}
void calc(int v, int p = 0) {
	d[v] = cost[v];
	for (int i = 0; i < g[v].size(); ++ i) {
		int to = g[v][i];
		if (to != p) {
			calc(to, v);
			d[v] += d[to];
		}
	}
}
/*
void recalc()
{
    for(int i=0;i<=n;i++)
        tot[i]=0;
    for(int i=1;i<=sz;i++)
    {
        tot[which[i]] += by[i];
    }
    for(int i=1;i<=n;i++)
    {
        cost[i] += tot[lvl[i]];
    }
    dfs2(1,-1);
    sz=0;
}*/
void recalc() {
	for (int i = 0; i <= n; ++ i) {
		tot[i] = 0;
	}
	for (int i = 1; i <= sz; ++ i) {
		tot[which[i]] += by[i];
	}
	for (int i = 1; i <= n; ++ i) {
		cost[i] += tot[lvl[i]];
	}
	calc(1);
	sz = 0;
}
/*
void dfs(int u,int p=-1)
{
    total++;
    par[total]=u;
    L[u]=total;
    for(int i=0;i<g[u].size();i++)
    {
        int v = g[u][i];
        if(v!=p)
        {
            lvl[v] = lvl[u]+1;
            dfs(v,u);
        }
    }
    R[u] = total;
}
*/
void dfs(int v, int p = 0) {
	par[++total] = v;
	L[v] = total;
	for (int i = 0; i < g[v].size(); ++ i) {
		int to = g[v][i];
		if (to != p) {
			lvl[to] = lvl[v] + 1;
			dfs(to, v);
		}
	}
	R[v] = total;
}
int GetCnt(int v,int l)
{
    int left = lower_bound(level[l].begin(),level[l].end(),L[v])-level[l].begin();
    int right = upper_bound(level[l].begin(),level[l].end(),R[v])-level[l].begin();
    return right-left;
}
int main()
{
    //#ifndef ONLINE_JUDGE
    //freopen("input.txt","r",stdin);
   // #endif // ONLINE_JUDGE
    scanf("%d %d",&n,&m);
    for(int i=0;i<n-1;i++)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1);
    for(int i=1;i<=total;i++)
    {
        level[lvl[par[i]]].push_back(i);
    }

    for(int i=1;i<=m;i++)
    {

        int typ;
        scanf("%d",&typ);
        if(typ==1)
        {
            //printf("chk\n");

            sz++;
           scanf("%d%d",&which[sz],&by[sz]);

        }
        else {
                int ver;
                scanf("%d", &ver);
                ll ans = d[ver];
                for (int j = 1; j <= sz; ++ j) {
                    ans += GetCnt(ver, which[j]) * 1ll * by[j];
                }
                printf("%lld\n", ans);
            }
        if(sz>=600)
            recalc();

    }

    /*
    for (int i = 1; i <= m; ++ i) {
            int type;
            scanf("%d", &type);
            if (type == 1) {
                ++sz;
                scanf("%d%d", &which[sz], &by[sz]);
            }
            else {
                int ver;
                scanf("%d", &ver);
                ll ans = d[ver];
                for (int j = 1; j <= sz; ++ j) {
                    ans += GetCnt(ver, which[j]) * 1ll * by[j];
                }
                printf("%lld\n", ans);
            }
            if (sz >= 600) recalc();
        }
        */
    return 0;
}
