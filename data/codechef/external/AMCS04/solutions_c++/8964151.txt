
/*
 *
 *    J1K7_7
 * 
 */
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <cstring>
#include <list>
#include <map>
#include <iomanip>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <limits>
using namespace std;
typedef long long          ll;
typedef unsigned long long ull;
typedef long double        ld;
typedef pair<int,int>      pii;
typedef pair<ll,ll>        pll;
typedef vector<int>        vi;
typedef vector<long long>  vll;
#define l(x) 		       (x << 1) + 1
#define r(x) 		       (x << 1) + 2
#define mid(l, r) 	       ((l + r) >> 1)
#define mp                 make_pair
#define pb                 push_back
#define all(a)             a.begin(),a.end()
#define pr(n)              printf("%d",n)
#define s(n)               scanf("%d",&n)
#define debug(x)	       {cerr <<#x<<" = " <<x<<"\n"; }
#define debug2(x, y)       {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<"\n";}
#define ss                 second
#define ff                 first
#define m0(x) 		       memset(x,0,sizeof(x))
#define snuke(c,itr)       for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
const int mod=1e9+7;

const int  two_mod = 5e8+4;

const ll  mx_ll   = numeric_limits<ll> :: max();
const int mx_int  = numeric_limits<int> :: max();

const long double PI = (long double)(3.1415926535897932384626433832795);

inline bool ispow2(int x){return (x!=0 && (x&(x-1))==0);} //0 or 1

int msb(unsigned x){ union { double a; int b[2]; }; a = x; return (b[1] >> 20) - 1023; }

template<class T>
inline void cinarr(T a, int n){ for (int i=0;i<n;++i) cin >> a[i];}

inline ll powmod(ll a,ll b, ll mod ) {ll res = 1; while(b){if(b&1) res = (res*a)%mod;a = (a*a)%mod;b >>= 1;}return res;}

inline ll gcd(ll a,ll b){ll t;while(b){a=a%b;t=a;a=b;b=t;}return a;}
inline ll lcm(ll a,ll b){return a/gcd(a,b)*b;}

inline int nextint(){ int x; scanf("%d",&x); return x; }
inline ll nextll(){ ll x; scanf("%lld",&x); return x; }


ll fi(ll n) 
{ 
	ll result = n; 
	for(ll i=2;i*i <= n;i++) 
	{ 
		if (n % i == 0) result -= result / i; 
		while (n % i == 0) n /= i; 
	} 
	if (n > 1) result -= result / n; 
	return result; 
}


ll baby_giant (ll a, ll b, ll m) {

	ll fans = mx_ll;

	ll n = (ll) sqrt (m + .0) + 1;

    ll an = 1;
    for (ll i=0; i<n; ++i)
        an = (an * a) % m;

    map<ll,ll> vals;
    for (ll i=1, cur=an; i<=n; ++i) {
        if (!vals.count(cur))
            vals[cur] = i;
        cur = (cur * an) % m;
    }

    for (ll i=0, cur=b; i<=n; ++i) {
        if (vals.count(cur)) {
            ll ans = vals[cur] * n - i;
            if (ans < m && ans != 0 )
			{
				fans = min ( fans , ans );  
			}
        }
        cur = (cur * a) % m;
    }

	if ( fans  == mx_ll )
    	return -1;
	else  
		return fans;

}

/*
 * vector<ll> getDivisors(ll n)
{
	set<ll> fcd;
    for(ll i = 1; i * i <= n ; i++)
    {
        if ( n % i == 0 )
        {
            fcd.insert(i);
            fcd.insert(n/i);
        }
    }
    vector<ll> cd;
    for(auto x: fcd)
        cd.push_back(x);

    return cd;

	}*/

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
	int t; cin >> t;
	while(t--)
	{
		ll  a , c , m , k ;
		cin >> a >> c >> m >> k;

		ll init_x = baby_giant(a,c,m);
		ll comm_diff = baby_giant(a,1ll,m);

		if ( init_x == -1  || c == 0 || comm_diff == -1)
		{
			cout << "0" << "\n";
			continue;
		}

		//		vector<ll> divisor_of_d = getDivisors(comm_diff);

		/*		for( auto x : divisor_of_d )
				{
				if( powmod(a,x,m) == 1 )
				{
				comm_diff = x; 
				break;
				}
				}
				*/

		if ( c == 1 ) 
		{
			init_x = 0 ;  
		}


		//		init_x = init_x % comm_diff ;

		ll sum = k * ( k - 1ll ) / 2ll;
		sum = sum % mod;

		sum = (sum * comm_diff ) % mod;
		sum = (sum + (k * init_x))%mod;
		cout << sum  << "\n";

	}

	return 0;
}
