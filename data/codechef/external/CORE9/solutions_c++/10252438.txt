#include<stdio.h>
#include<algorithm>
#include<map>
#include<vector>

using namespace std;


map < int, vector<int> > graph;
vector <int> adj_list;

void bfs(int *isvisited, int *parent) {
	
	int i, j;
	vector <int> stack;
	int start = 1;
	int end = 100;
	stack.push_back(start);
	isvisited[start] = 1;
	while(stack.size()) {
		stack.erase(stack.begin());
		for(i=0; i<graph[start].size(); i++) {
			if(isvisited[graph[start][i]] != 1) {
				stack.push_back(graph[start][i]);
				parent[graph[start][i]] = start;
				isvisited[graph[start][i]] = 1;
			}
		}
		start = stack[0];
		if(start == end)
			break;
	}
	int count = 0;
	int p = 100;
	while(p != 1) {
		p = parent[p];
		count++;
	}	
	printf("%d\n",count);

}

int main () {

	int t, snake, ladder, a[110], b[110], temp[110], sum;
	char string[200];
	
	scanf("%d",&t);
	
	while(t--) {
		int isvisited[110] = {0};
		int parent[110] = {0};


		for(int i=1; i<=100; i++) 
			b[i] = i;
			
		for(int i=1; i<=100; i++) 
			temp[i] = 1;
					
		snake = 0;
		ladder = 0;
					
		scanf(" %s",string);
		for(int i=0; string[i]; i++) {
			if(string[i] != ',')
					sum = sum*10 + string[i] - '0';
			else {
				snake = sum;
				sum = 0;
			}
		}
		
		ladder = sum;
		sum =0;
		
		int k = 0;
		for(int j=0; j<snake; j++) {
			scanf(" %s",string);
			sum = 0;
			for(int i=0;string[i];i++) {
				if(string[i] != ',')
					sum = sum*10 + string[i] - '0';
				else {
					a[k++] = sum;
					sum = 0;
				}
			}
			a[k++] = sum;
			sum = 0;
		}
		
		for(int i=0; i<2*snake; i=i+2) {
			b[a[i]] = a[i+1];
			temp[a[i]] = -1;
		}
		
		
	    k = 0;
		for(int j=0; j<ladder; j++) {
			scanf(" %s",string);
			sum = 0;
			for(int i=0;string[i];i++) {
				if(string[i] != ',')
					sum = sum*10 + string[i] - '0';
				else {
					sum = 0;
					a[k++] = sum;
				}
			}
			a[k++] = sum;
			sum = 0;
		}
		for(int i=0; i<2*ladder; i=i+2){
			b[a[i]] = a[i+1];
			temp[a[i]] = -1;
		}
	
		for(int i=1; i<100; i++) {
			if(temp[i] != -1) {
				for(int j=1; j<=6; j++) {	
					if(i+j <= 100)		
						graph[i].push_back(b[i+j]);
				}
			}
		}
		
		bfs(isvisited, parent);
		graph.erase(graph.begin(), graph.end());
		
	}
	return 0;
}

