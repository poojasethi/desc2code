#include <iostream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <math.h>
#include <cstdio>
 
#define FOR(i,x,y) for(int i=(x);i<(y);i++)
#define RFOR(i,x,y) for(int i=(x);i>=(y);i--)
#define MIN(x,y) ((x)<(y)?(x):(y))
#define MAX(x,y) ((x)>(y)?(x):(y))
#define ABS(x) ((x)>0?(x):-(x))
#define SQ(x) ((x)*(x))
#define mset(x,y) memset(x,y,sizeof(x))

typedef long long int lli;
typedef long double ld;

using namespace std;

int n,m,k;
vector<int> adl[100010];
int deg[100010];
int done[100010];
int find()
{
	mset(done,0);
	for(int i=0;i<n;i++) deg[i]=adl[i].size();
	priority_queue<pair<int, int> >que;
	for(int i=0;i<n;i++) que.push(make_pair(-deg[i],i));
	int ind,d;
	while(que.size())
	{
		d=-que.top().first;
		ind=que.top().second;
		que.pop();
		if(done[ind]) continue;
		if(d>=k) break;
		done[ind]=1;
		for(int i=0;i<adl[ind].size();i++)
		if(!done[adl[ind][i]])
		{
			deg[adl[ind][i]]--;
			que.push(make_pair(-deg[adl[ind][i]],adl[ind][i]));
		}
	}
	int count=0;
	for(int i=0;i<n;i++) if(!done[i]) count++;
	return count;
}

int main()
{
  //  freopen("inp.txt","r",stdin);
    scanf("%d%d%d",&n,&m,&k);
    int a,b;
    for(int i=0;i<m;i++)
    {
    	scanf("%d%d",&a,&b);
    	adl[a].push_back(b);
    	adl[b].push_back(a);
    }
    printf("%d\n",find());
    return 0;
    
}