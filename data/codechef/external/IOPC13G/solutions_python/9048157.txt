//# include <stdlib.h>
// symmetric relation => undirected graph
# include <vector>
using namespace std;
typedef vector<int>::iterator vit;
# define Nlimit (int) 1e5
# include <stdio.h>
char mark[Nlimit];
vector<int> adj[Nlimit];
long int size[Nlimit];
long int N,M,k,count;
void addedge(long int a,long int b)
{
	adj[a].push_back(b);
	adj[b].push_back(a);
	size[a]++;
	size[b]++;
}
void DFSm( long int v)
{
	mark[v]=1;
	count++;
	size[v]--;
	vit it;
	for(it=adj[v].begin();it!=adj[v].end();it++)
	{
		size[*it]--;
		if(!mark[*it] && size[*it]<k)
			DFSm(*it);
	}
}
void DFSvisit_m()
{
	int v;
	for(v=0;v<N;v++)
		if(!mark[v] && size[v]<k)
			DFSm(v);
}


int main()
{
	int i;
	long int a,b;
	scanf("%ld%ld%ld",&N,&M,&k);
	for(i=0;i<M;i++)
	{
		scanf("%ld%ld",&a,&b);
		addedge(a,b);
	}
	DFSvisit_m();
	printf("%ld\n",(N-count));
	return 0;
}
	
	
	
