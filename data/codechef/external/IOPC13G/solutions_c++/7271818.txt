#include <iostream>
#include <string>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <sstream>
using namespace std;
typedef long long LL;
#define VI vector<int>
#define SIZE(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A,0,sizeof(A))
#define MSV(A,a) memset(A,a,sizeof(A))
#define MAX(a,b) ((a>=b)?(a):(b))
#define MIN(a,b) ((a>=b)?(b):(a))
#define II pair<int,int>
#define MP make_pair
#define X first
#define Y second
#define PB push_back
#define FOUND(A,x) (A.find(x)!=A.end)
#define getcx getchar_unlocked
#define INF (int(1e9))
#define INFL (LL(1e18))
 
#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REV(i, a, n) for(int i = a; i > n; i--)
#define FORALL(it,A) for(it=A.begin(); it!=A.end();it++)
#define DEB(n) cout<<"(<<< DEBUG "<<n<<" >>>)"<<endl;
//int dx[] = {-1,0,1,0}, dy[] = {0,1,0,-1};
//int dx[] = {1,1,1,0,0,-1,-1,-1}, dy[] = {1,0,-1,1,-1,1,0,-1};
inline void inp( int &n )
{
        n=0;
        int ch=getcx();int sign=1;
        while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
        while(  ch >= '0' && ch <= '9' )
                n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
		n=n*sign;
}
int n,e,k;
VI G[100005];
int size[100005];
bool removed[100005];
void visit(int node)
{
	removed[node] = 1;
	REP(i,SIZE(G[node]))
	{
		int next = G[node][i];
		if(!removed[next])
		{
			size[next]--;
			if(size[next] < k)
				visit(next);
		}
	}
}
int main()
{
	int a,b,x,y;
	inp(n),inp(e),inp(k);
	REP(i,e)
	{
		inp(x),inp(y);
		G[x].PB(y);
		G[y].PB(x);
		size[x]++;
		size[y]++;
	}
	for(int i=0;i<n;i++)
	{
		if(!removed[i] && size[i]<k)
		{
			visit(i);
		}
	}
	int ans = 0;
	for(int i=0;i<n;i++)
		if(!removed[i])
			ans++;
	printf("%d\n",ans);
	return 0;
}