#include <iostream>
#include <fstream>
#include <string>
#include <set>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <queue>
 
using namespace std;
int arr[222222];
int segTree[1000000];

void initializeSegTree(int b, int e, int i) {

	if(b == e)
		segTree[i] = b;
	else
	{
		int l = i*2+1, r = i*2+2;
		initializeSegTree(b, (b+e)/2, l);
		initializeSegTree((b+e)/2+1, e, r);

		if(arr[segTree[l]] >= arr[segTree[r]])
			segTree[i] = segTree[l];
		else
			segTree[i] = segTree[r];
	}
}

int q(int b, int e, int i, int j, int node)
{
	int p1,p2;
	if(i > e || j < b)
		return -1;

	if(b >=i && e <=j)
		return segTree[node];

	int l = 2*node+1, r = 2*node +2;
	p1 = q(b, (b+e)/2, i,j,l);
	p2 = q((b+e)/2+1, e, i,j,r);

	if(p1 == -1)
		return p2;
	if(p2 == -1)
		return p1;
	if(arr[p2] >= arr[p1])
		return p2;
	return p1;
}
int main() {
	/*freopen("t.in", "r", stdin);
	freopen("t.out", "w", stdout);*/

	int t,n,i;

	scanf("%d", &n);

	for(i = 0;  i < n; ++i)
		scanf("%d", &arr[i]);

 
	initializeSegTree(0, i-1, 0);
	
	int k;
	scanf("%d", &k);
	for(i = 0 ; i < k; ++i)
	{
		int a,b;
		scanf("%d %d", &a, &b);
		int max;
		if(a == 1 && b == n)
			max = 0;
		else if(a == 1)
			max = arr[q(0,n-1,b, n-1,0)];
		else if(b == n)
			max = arr[q(0,n-1,0, a-2,0)];
		else
		{
			int m1 = q(0, n-1, 0, a-2, 0),
				m2 = q(0, n-1, b, n-1, 0);
			max = arr[m1] > arr[m2] ? arr[m1] : arr[m2];
		}

		printf("%d\n", max);
	}
    return 0;
}