# include "stdio.h"
# include <vector>

using namespace std;

typedef struct graph
{
	int n;
	int count[1000];
	bool adjacency_list[1000][1000];
}graph;

graph * create_graph(int n)
{
	graph * g = new graph;
	g->n = n;
	g->count;

	for(int i = 0; i < n; i++)
	{
		g->count[i] = 0;
	}

	return g;
}

void add_edge(graph * g, int x, int y)
{
	g->adjacency_list[x][y] = true;
	g->count[x] += 1;
}

vector<int> players;

int give_players_count_one(graph * g, int n)
{
	for(int i = 0; i < n; i++)
	{
		if(g->count[i] == 1)
		{
			players.push_back(i);
		}
	}

	return players.size();
}

int players_left(graph * g, int n, int m)
{
	int final_count = 0;

	while(give_players_count_one(g, n))
	{
		final_count++;
		while(not players.empty())
		{
			int x = players.back();
			players.pop_back();
			g->count[x] = 0;

			int i;

			for(i = 0; i < n; i++)
			{
				g->adjacency_list[x][i] = false;
			}
			for(i = 0; i < n; i++)
			{
				if(g->adjacency_list[i][x])
				{
					g->adjacency_list[i][x] = false;
					g->count[i] -= 1;	
				}
			}
		}
	}
	return final_count;

}

int main()
{
	int t, n, m, x, y;

	scanf("%d", &t);

	while(t--)
	{
		scanf("%d %d", &n, &m);
		graph * g = create_graph(n);
		int i = 0;

		while(i < m)
		{
			scanf("%d %d", &x, &y);
			add_edge(g, x-1, y-1);
			add_edge(g, y-1, x-1);
			i++;
		}

		printf("%d\n", players_left(g, n, m));
	}
	return 0;
}