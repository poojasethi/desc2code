#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdio>

#include <algorithm>
#define eps 0.000001

using namespace std;

double a[100];
double dp[1<<20];

bool poss(int i, int j, int k)
{
    //cout << 1 << endl;
    if(a[i]+a[j] < a[k]) return false;
    if(a[i]+a[k] < a[j]) return false;
    if(a[k]+a[j] < a[i]) return false;
    return true;
}

double calarea(int i, int j, int k)
{
    double s = (double)(a[i]+a[j]+a[k])/2.0;
    double v1, v2, v3;
    v1 = s-(double)a[i];
    v2 = s-(double)a[j];
    v3 = s-(double)a[k];
    s = s * v1 * v2 * v3;
    return (double)sqrt(s);
}

int main()
{
    int n;
    ios_base::sync_with_stdio(false);
    cin >> n;
    memset(dp, 0, sizeof(dp));

    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    //sort(a, a+n);
    double val;
    cin >> val;
    dp[0] = 0;
    for(int i = 0; i < (1<<n); i++) {
        for(int j = 0; j < n; j++) {
            for(int k = j+1; k < n; k++) {
                for(int l = k+1; l < n; l++) {
                    if(j == k || k == l || l == j) continue;
                    if((i&(1<<j)) && (i&(1<<k)) && (i&(1<<l))) {
                           // cout << endl;
                        if(poss(j, k, l)) dp[i] = max(dp[i], calarea(j, k, l) + dp[i^(1<<j)^(1<<k)^(1<<l)]);
                    }
                }
            }
        }
    }

    bool flag = 0;
    double maxval = 0.0;
    for(int i = 0; i < (1<<n); i++) {
        if(fabs(val-dp[i]) < eps) {
            flag = 1;
        }
        maxval = max(maxval, dp[i]);
    }

    //cout << maxval << endl;
    if(!flag) {
        cout << "AREA NOT POSSIBLE" << endl;
    }
    else if(fabs(val-maxval) > eps) {
        cout << "BOB WINS" << endl;
        printf("%.6f\n", maxval);
    }
    else {
        cout << "DRAW" << endl;
    }
}
