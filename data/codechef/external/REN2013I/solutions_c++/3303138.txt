#include <iostream>
#include <cstring>
#include <set>
#include <cmath>
#include <algorithm>
#include <cstdio>
 
#define eps 0.000001
 
using namespace std;
 
double a[20];
int n;
double val;
int dp2[20][1<<17];
 
bool poss(int i, int j, int k)
{
    if(a[i]+a[j] < a[k]) return false;
    if(a[i]+a[k] < a[j]) return false;
    if(a[k]+a[j] < a[i]) return false;
    return true;
}
bool flag = 0;
set<double> ss;
 
double dp[20][1<<17];
 
double calarea(int i, int j, int k)
{
    double s = (double)(a[i]+a[j]+a[k])/2.0;
    double v1, v2, v3;
    v1 = s-(double)a[i];
    v2 = s-(double)a[j];
    v3 = s-(double)a[k];
    s = s * v1 * v2 * v3;
 
    return (double)sqrt(s);
}
 
double solve(int pos, int mask)
{
        if(n-pos < 3) {
                return 0.0;
        }
        if(dp[pos][mask] > -0.5) return dp[pos][mask];
        double res = 0.0;
        int checkmask = -1;
        for(int i = 0; i < n; i++) {
            if(mask&(1<<i)) for(int j = i+1; j < n; j++) {
                if(mask&(1<<j) && j != i) for(int k = j+1; k < n; k++) {
                    if(mask&(1<<k) && k != j && k != i) {
                        if(poss(i, j, k)) {
                            int nmask = mask;
                            nmask ^= (1<<i);
                            nmask ^= (1<<j);
                            nmask ^= (1<<k);
                            res = max(res, calarea(i, j, k)+solve(pos+3, nmask));
                        }
                    }
                }
            }
        }
        if(fabs(res-val) < eps) {
                                flag = 1;
                            }
        return dp[pos][mask] = res;
}
 
int main()
{
	ios_base::sync_with_stdio(false);
    memset(dp, -1, sizeof(dp));
    cin >> n;
 
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
 
    //sort(a, a+n);
 
    cin >> val;
 
    double res = solve(0, (1<<n)-1);
    if(!flag && val > eps) {
        cout << "AREA NOT POSSIBLE" << endl;
    }
    else if(fabs(val-res) > eps) {
        cout << "BOB WINS" << endl;
        printf("%.6f\n", res);
    }
    else {
        cout << "DRAW" << endl;
    }
 }