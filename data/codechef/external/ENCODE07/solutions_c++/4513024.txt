/** 
 * This question asks us to find the no of tuples (a,b) such that
 * mu(a*b) = mu(a) * mu(b),			mu(n) --> Mobius function of n
 * It is equivalent to finding the no of co-prime doubles in a given range
 * Now, total no of doublets is n^2
 * Therefore,
 * ans = n^2 - Sigma[i=2 to n] #{gcd(a,b)==i && mu(a)!=0 && mu(b)!=0}
 *	   = n^2 - Sigma[i=2 to n] mu(i) * #{gcd(a,b)>=i && mu(a)!=0 && mu(b)!=0}
 *	   = n^2 - Sigma[i=2 to n] mu(i) * #{i|a && i|b && mu(a)!=0 && mu(b)!=0}
 *	   = n^2 - Sigma[i=2 to n] mu(i) * #{i|a && mu(a)!=0} * #{i|b && mu(b)!=0}
 *	   = n^2 - Sigma[i=2 to n] mu(i) * #{i|a && mu(a)!=0}^2
 * This answer was inspired from Fura2's ans
 * Author: thecodekaiser
*/

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>

using namespace std;
#define MAXN 100010
typedef long long ll;

// Function : to precompute the primes
vector<bool> isPrime(MAXN,true);
vector<vector<int> > primeFactors;
int sqfree[MAXN];
int mu[MAXN];			// Mobius function

void pre()
{
	isPrime[0] = isPrime[1] = false;
	primeFactors.resize(MAXN);
	for(int i = 2; i <= MAXN; i++){
		if(isPrime[i]){
		    primeFactors[i].push_back(i);
		    for(int j = 2*i;j <= MAXN;j += i){
		        isPrime[j]=false;
		        primeFactors[j].push_back(i);
		    } 
		}
	}
	
	// First calculating the Mobius function of all
	// but first we need to know if a number is square free or not
	sqfree[0] = sqfree[1] = 1;
	
	for(int i = 2; i*i <= MAXN; i++)
	{
    	for(int j = i*i;j <= MAXN;j += i*i)
    	 	sqfree[j] = 1;
    }
	
	// Now we calculate the mobius function
	mu[1] = 1;
	for(int i = 2; i <= MAXN; i++)
		if(sqfree[i] == 0)
			mu[i]=((((int)(primeFactors[i].size()))%2==0)?(1):(-1));

}

// Solver Function : 
void solve()
{
	ll N , ans;
	scanf("%lld", &N);
	ans = N*N;
	
	for(ll i = 2; i <= N; i++)
		if(mu[i] != 0)
		{
			ll cnt = 0;
			for(ll j = i; j <= N; j += i)
					if(mu[j] != 0)	cnt++;
			ans += (mu[i] * cnt * cnt);
		}
	printf("%lld\n",ans);					
}


int main() {
	pre();
	// your code goes here
	int t;
	scanf("%d",&t);
	while(t--)
		solve();
	return 0;
	
}