#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
using namespace std;
typedef long long int LL;


int adj[104][104] , dist[104] , u , v;
set< pair<int , int > > S;

int main()
{
int K , M ,N;
scanf("%d",&K);
scanf("%d %d",&M,&N);
memset(adj , 0 , sizeof(adj));
for(int i=1;i<=M+N;i++)
{
	scanf("%d %d",&u,&v);
	adj[u][v] = 1;
	// adj[v][u] = 1;
}

for(int i=1;i<=100;i++){
	dist[i] = 10000000;
	for(int j=i+1;j<=i+K && j<=100;j++)
		adj[i][j] = 1;
}



dist[1] = 0;
S.insert(make_pair(dist[1] , 1));
pair<int , int > pp;
int curr_vertex , curr_dist;
while(!S.empty())
{
	pp = *(S.begin());
	S.erase(S.begin());
	curr_dist = pp.first;
	curr_vertex = pp.second;
	
	for(int i=1;i<=100;i++)
	{
		if(adj[curr_vertex][i]==1)
		{
			if(curr_dist + 1 < dist[i])
			{
				dist[i] = curr_dist + 1;
				S.insert(make_pair(curr_dist + 1 , i));
			}
		}
	}
}
cout << dist[100] << endl;
return 0;
}
