#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define N 100010
vector<int> g[N];
int T=0,cnt[100010],a[100010],st[100010],en[100010],sqrtn,ans=0;

struct query {
    int l,r;
}q[100010];

bool sort_cond(const query &q1,const query &q2) {
    if (q1.l/sqrtn != q2.l/sqrtn) {
        return q1.l/sqrtn < q2.l/sqrtn;
    }
    return q1.r < q2.r;
}

void remove(int idx)
{
    cnt[a[idx]]--;
    if(cnt[a[idx]] == 0) {
        ans--;
    }
}

void add(int idx)
{
    cnt[a[idx]]++;
    if(cnt[a[idx]] == 1) {
        ans++;
    }
}

void dfs(int u) {
    st[u]=T;
    T++;
    for(int i=0;i<(int)g[u].size();i++) {
        dfs(g[u][i]);
    }
    en[u]=T-1;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n,k,i,u,l,r,answer=0;
    cin>>n>>k;
    for(i=1;i<n;i++) {
        cin>>u;
        --u;
        g[u].push_back(i);
    }
    sqrtn=sqrt(n);
    dfs(0);
    for(i=0;i<n;i++) {
        q[i].l=st[i];
        q[i].r=en[i];
    }
    sort(q,q+n,sort_cond);
    for(i=0;i<n;i++){
        cin>>u;
        a[st[i]]=u;
    }
    int curr_l=0,curr_r=0;
    for(i=0;i<n;i++)
    {
        l=q[i].l;
        r=q[i].r;
        /* We are at [curr_l,curr_r)
         Readjust curr_l and curr_r to [l,r+1) = [l,r] */
        while (curr_l < l) {
            remove(curr_l);
            curr_l++;
        }
        while (curr_l > l) {
            add(curr_l-1);
            curr_l--;
        }
        while (curr_r <= r) {
            add(curr_r);
            curr_r++;
        }
        
        while (curr_r > r+1) {
            remove(curr_r-1);
            curr_r--;
        }
        answer+=ans;
    }
    cout<<answer<<'\n';
    return 0;
}