#include<bits/stdc++.h>
using namespace std;
int fenwick[100010];
int start[100010];
bool visited[100010];
vector<int> tree[100010];
int myvar;
int col[100010];
long long ans;

inline int inp()
{
    register int r=0,c;
    for(c=getchar_unlocked();c<=32;c=getchar_unlocked())
    {
         if(c=='-')
           return -inp();
    }

    for(;c>32; r = (r<<1)+(r<<3)+c-'0', c = getchar_unlocked());

    return r;
}


void update(int pos,int extra)
{
   while(pos<100010)
   {
      fenwick[pos]+=extra;
      pos+= (pos&(-pos));
   }
}

int query(int pos)
{
   int ans=0;
   while(pos>0)
   {
       ans+=fenwick[pos];
       pos-= (pos&(-pos));
   }
   return ans;
}


void dfs(int v)
{
    visited[v]=true;
    myvar++;

    int temp=myvar,i;

    for(i=0;i<tree[v].size();i++)
    {
        if(!visited[tree[v][i]])
          dfs(tree[v][i]);
    }

    if(start[col[v]]==-1)
    {
      start[col[v]]=temp;
      update(temp,1);
    }
    else if(start[col[v]]<temp)
    {
      update(start[col[v]],-1);
      update(temp,1);
      start[col[v]]=temp;
    }

    ans+= query(100009)-query(temp-1);
}


int main()
{

    memset(start,-1,sizeof start);

    int n,k,i,x;
    n=inp();
    k=inp();

    for(i=1;i<n;i++)
    {
        x=inp();
        x--;   //Zero based
        tree[i].push_back(x);
        tree[x].push_back(i);
    }

    for(i=0;i<n;i++)
      col[i]=inp();

    dfs(0);

    printf("%lld",ans);




}
