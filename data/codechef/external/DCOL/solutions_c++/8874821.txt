#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define N (int)1e5 + 5
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define MOD (int)(1e9+7)
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i=0;i<N;i++)
#define frep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<int,int>
#define vii vector<int>
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)

//smaller to larger technique

vii V[N];
map<ll , ll> M[N];
map<ll , ll> :: iterator it;
ll w[N] , ans[N] , fans[N] , color[N];

void merge(int u , int v) {
	int uu = u , vv = v;
	if (M[w[u]].size() < M[w[v]].size()) {
		swap(u , v);
		u = w[u];
		v = w[v];
		w[uu] = w[vv];
	}
	else {
		u = w[u];
		v = w[v];
	}
	for (it = M[v].begin();it != M[v].end();it++) {
		int color = it -> ff;
		int cnt = it -> ss;
		if (M[u][color] == 0) {
			M[u][color] = 1;
			ans[u]++;
		}
	}
}

void dfs(int node , int parent) {
	// cout << "node " << node << "\n";
	rep(i , V[node].size()) {
		int v = V[node][i];
		if (v != parent) {
			dfs(v , node);
			merge(node , v);
		}
	}
	fans[node] = ans[w[node]];
}

int main(int argc, char const *argv[])
{
	fast;

	 // freopen("inp.txt" , "r" , stdin);

	 int n , k;
	 cin >> n >> k;

	 rep(i , n - 1) {
	 	int a ;
	 	cin >> a;
	 	V[i + 2].pb(a);
	 	V[a].pb(i + 2);
	 }

	 frep(i , 1 , n) {
	 	w[i] = i;
	 	cin >> color[i];
	 	ans[i] = 1;
	 	M[i][color[i]] = 1;
	 }


	 dfs(1 , - 1);

	 // print(fans , 1 , n);
	 ll sum = 0;
	 frep(i , 1 , n)
	 	sum += fans[i];
	 cout << sum << "\n";
 
	return 0;
}