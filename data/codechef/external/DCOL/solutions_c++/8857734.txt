#include<bits/stdc++.h>
using namespace std;
struct res{
	int val,l,r,idx;
	bool t;
};
bool cmp(res a,res b)
{
	if(a.r==b.r)
	return a.t<b.t;
	return a.r<b.r;
}
int bit[100005];
void update(int ind,int val)
{
	while(ind<=100000)
	{
		bit[ind]+=val;
		ind+=ind&-ind;
	}
}
int sum(int ind)
{
	int sum=0;
	while(ind>0)
	{
		sum+=bit[ind];
		ind-=ind&-ind;
	}
	return sum;
}
int pre[100005];
res r1[200005];
int ans[100005];
vector<int> adj[100005];
int col[100005];
int first[100005],last[100005];
bool vis[100005];
int need[100005];
int l=0;
void dfs(int u)
{
	vis[u]=true;
		need[l++]=u;
	for(int i=0;i<adj[u].size();i++)
	{
		if(!vis[adj[u][i]])
		{
			dfs(adj[u][i]);
		}
	}
	last[u]=l-1;
}
int main()
{
	int n,k;
	scanf("%d%d",&n,&k);
	for(int i=0;i<n-1;i++)
	{
		int u;
		scanf("%d",&u);
			//parent[i+2]=u;
		adj[u].push_back(i+2);
	}
	for(int i=1;i<=n;i++)
	scanf("%d",&col[i]);
	dfs(1);
	memset(first,-1,sizeof first);
	for(int i=0;i<l;i++)
	{
		//cout<<need[i]<<" ";
		r1[i].val=col[need[i]];
		r1[i].r=i+1;
		r1[i].idx=i+1;
		r1[i].t=0;
		if(first[need[i]]==-1)
		{
			first[need[i]]=i;
		}
	}
	//cout<<endl;
	int x=l;
	for(int i=1;i<=n;i++)
	{
	   r1[x].l=first[i]+1;
	   r1[x].r=last[i]+1;
	   r1[x].idx=x-l;
	   r1[x].t=1;
	   x++;
	}
	memset(vis,false,sizeof vis);
		for(int i=1;i<=l;i++)
		update(i,1);
		sort(r1,r1+x,cmp);
		for(int i=0;i<x;i++)
	{
		if(r1[i].t)
		{
			ans[r1[i].idx]=sum(r1[i].r)-sum(r1[i].l-1);
		//	cout<<r1[i].r<<" "<<r1[i].l<<" "<<sum(r1[i].r)<<endl;
		}
		else
		{
			if(vis[r1[i].val])
			{
				if(pre[r1[i].val]!=0)
				update(pre[r1[i].val],-1);
			}
			pre[r1[i].val]=r1[i].idx;
			vis[r1[i].val]=true;
		}
	}
	long long print=0;
	for(int i=0;i<x-l;i++)
	print+=(long long)ans[i];
	printf("%lld\n",print);
}