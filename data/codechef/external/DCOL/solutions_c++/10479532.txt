#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
vector < int > tree[N];
set < int > dist[N];
int a[N];
int ptr[N];
int n , m , u , v;
void UNION(set < int > & s1 , set < int > & s2){
    for(set < int > :: iterator it = s1.begin(); it != s1.end(); ++it) s2.insert(*it);
}
long long cut = 0;
void dfs(int node , int parent){
    dist[node].insert(a[node]);
    int pt = node;
    for(int i = 0; i < tree[node].size(); ++i){
        int child  = tree[node][i];
        if(child != parent){
            dfs(child , node);
        if(dist[pt].size() >= dist[ptr[child]].size()){
           UNION(dist[ptr[child]] , dist[pt]);
        }else{
            UNION(dist[pt] , dist[ptr[child]]);
            pt = ptr[child];
        }
        }
    }
    ptr[node] = pt;
    cut += dist[pt].size();
}
long long get(int node , int par){
    long long ret = dist[ptr[node]].size();
    for(int i = 0; i < tree[node].size(); ++i){
        if(tree[node][i] != par){
            ret += get(tree[node][i] , node);
        }
    }
   // cout << "Subarray rooted at : " << node << " = " << ret << endl;
    return ret;
}
int main()
{
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i = 1; i <= n - 1; ++i){
        cin >> u;
        tree[u].push_back(i + 1);
    }
    for(int i = 1; i <= n; ++i) cin >> a[i];
    dfs(1 , -1);
    long long ans = get(1 , -1);
    cout << cut << endl;
    return 0;
}
