#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int time1=0;
int d[100010];
int vis[100010];
struct query{
	int l,r,i,ans;
	int block_x;
};
int P[100010];
vector<int>V[100010];
int C[100010],L[100010],H[100010];
int dfs(int a)
{
    vis[a]=1;
    P[time1]=C[a];
    L[a]=time1++;
    int i,j;
    for(i=0;i<V[a].size();i++)
    {
        if(!vis[V[a][i]])
        {
            dfs(V[a][i]);
        }
    }
    H[a]=time1;
}
int block;
bool comp(query q1,query q2){
	if(q1.block_x!=q2.block_x)
	{
		return q1.block_x<q2.block_x;
	}
	else
		return q1.r<q2.r;
}
bool comp2(query q1,query q2)
{
	return q1.i<q2.i;
}
query Q[100010];
int cnt=0;
inline int add(int a)
{
	if(d[a]==0)
	{
		cnt++;
		d[a]=1;
	}
	else
		d[a]++;
}
inline int del(int a)
{
	d[a]--;
	if(d[a]==0)
	{
		cnt--;
	}
}
int main()
{
    int n,k,i,a,b,ans,r,l;
    scanf("%d %d",&n,&k);
    for(i=2;i<=n;i++)
    {
        scanf("%d",&a);
        V[a].push_back(i);
    }
    for(i=0;i<n;i++)
    {
        scanf("%d",&a);
        C[i+1]=a;
    }
    dfs(1);
    block=(int)sqrt(n);
    for(i=0;i<n;i++)
	{
	 //   cout<<L[i+1]<<" "<<H[i+1]<<endl;
		Q[i].l=L[i+1];Q[i].r=H[i+1]-1;
		Q[i].block_x=Q[i].l/block;
		Q[i].i=i;
	}
	sort(Q,Q+n,comp);
	l=0;r=-1;
	for(i=0;i<n;i++)
	{
		while(Q[i].l<l)
		{
			l--;
			add(P[l]);
		}
		while(Q[i].r>r)
		{
			r++;
			add(P[r]);
		}
		while(Q[i].l>l)
		{
			del(P[l]);
			l++;
		}
		while(Q[i].r<r)
		{
			del(P[r]);
			r--;
		}
		Q[i].ans=cnt;
	}
	ans=0;
    for(i=0;i<n;i++)
    {
        ans=ans+Q[i].ans;
    }
    printf("%d\n",ans);
}
