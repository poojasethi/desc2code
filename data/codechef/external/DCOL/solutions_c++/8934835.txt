//#include<bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <set>
using namespace std;
#define w(t) while(t--)
#define S(x) scanf("%d",&x)
#define SLL(x) scanf("%lld",&x)
#define P(x) printf("%d",x)
#define fl(i , a, b) for(i = (int)a; i<(int)b; i++)
#define mem(a , value) memset(a , value , sizeof(a))
#define tr(c, itr) for(itr = (c).begin(); itr != (c).end(); itr++)
#define MOD 1000000007
#define MAX 1000000010
#define ll long long
#define mp make_pair
#define pb push_back
typedef pair<int,int> pp;
std::vector<int> v[100002]; 
int c[100002] , ans= 0 ;
int dp[100002];
void dfs(int u , std::map < int,  int > & m1 )
{
	std::map<int, int> mnode; 
	for (int i = 0; i < (int)v[u].size(); ++i)
	{
		int nx = v[u][i]; 
		dfs(nx , mnode); 

		if(m1.find(c[nx]) == m1.end())
			m1[c[nx]] = 1; 
	}
	std::map<int, int>::iterator it = mnode.begin();
	std::map<int, int>::iterator it1 = m1.begin();
	while(it!=mnode.end())
	{
		if(m1.find(it->first)==m1.end())
			m1[it->first] = 1;
		it++;
	}
	mnode[c[u]] = 1;
	m1[c[u]] = 1;
	ans += mnode.size();
}
int main()
{
	//std::ios_base::sync_with_stdio(false);
	int n , m , i ,a;
	cin >> n >> m ;
	fl(i , 1, n)
	{
		cin >> a;
		v[a].pb(i+1);
	}
	fl(i , 1, n+1)
	cin >> c[i] ;

	std::map<int, int> m1;
	dfs(1 , m1) ; 
	cout << ans << endl ; 
	return 0;
}