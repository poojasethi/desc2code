#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;

int main(){
	int n, k;
	cin >> n >> k;
	map<int, set<int> > height_group;
	int height[n+1];
	int node_parent[n+1];
	int node_color[n+1];
	height[1] = 1;
	set<int> root;
	root.insert(1);
	height_group.insert(make_pair(1, root));
	
	int parent;
	for (int i = 2; i <= n; ++i){
		scanf("%d", &parent);
		height[i] = height[parent]+1;
		node_parent[i] = parent;
		map<int, set<int> > :: iterator it = height_group.find(height[i]);
		if(it == height_group.end()){
			set<int> group;
			group.insert(i);
			height_group.insert(make_pair(height[i], group));
		} 
		else{
			(it->second).insert(i);
		}
	}

	int color;
	for (int i = 1; i <= n; ++i)
	{
		scanf("%d", &color);
		node_color[i] = color;
	}

	set<int> distinct_color[n+1];
	int to_visit[n+1];
	for (int i = 0; i < n+1; ++i)
	{
		to_visit[i] = i;
		distinct_color[i].insert(node_color[i]);
	}

	long long int total = 0;
	map<int, set<int> >:: iterator it = height_group.end();
	it--;
	set<int> :: iterator setIt;
	while(it != height_group.begin()){
		set<int> group = it->second;
		setIt = group.begin();
		while(setIt != group.end()){
			total += distinct_color[*setIt].size();
			distinct_color[node_parent[*setIt]].insert(distinct_color[*setIt].begin(), distinct_color[*setIt].end());
			distinct_color[*setIt].clear();
			setIt++;
		}
		it--;
	}
	total += distinct_color[1].size();
	printf("%lld\n", total);
}