#include <bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c < '0' || c > '9'){
        c = getchar_unlocked();
    }
    while(c >= '0' && c <= '9'){
        x = (x<<1) + (x<<3) + c - '0';
        c = getchar_unlocked();
    }
    return x;
}
const int N = 100001;
const int LN = 17;
const int mod = 1e9 + 7;
int sum[N];
int dp[LN][N];
int depth[N];
int fact[N];
int n , q;
list<int> v[N];
void dfs(int node,int parent){
    dp[0][node] = parent;
    if(fact[node-1]%3 == 0){
        sum[node] ++;
    }
    for(list<int>::iterator it = v[node].begin() ; it != v[node].end() ; ++it){
        if(*it != parent){
            depth[*it] = depth[node] + 1;
            sum[*it] += sum[node];
            dfs(*it,node);
        }
    }
}
int LCA(int a , int b){
    if(depth[a] < depth[b]){
        return LCA(b,a);
    }
    int dif = depth[a] - depth[b];
    for(int i = 0 ; i < LN ; ++i){
        if((dif>>i)&1){
            a = dp[i][a];
        }
    }
    if(a ^ b){
        for(int i = LN - 1 ; i >= 0 ; --i){
            if(dp[i][a] ^ dp[i][b]){
                a = dp[i][a];
                b = dp[i][b];
            }
        }
        a = dp[0][a];
    }
    return a;
}
int main(){
    n = scan();
    fact[0] = 1;
    for(int i = 1 ; i < n ; ++i){
        int a = scan() + 1 , b = scan() + 1;
        v[a].push_back(b);
        v[b].push_back(a);
        fact[i] = (1LL * fact[i-1] * i)%mod;
    }
    depth[1] = 0;
    sum[1] = 0;
    sum[0] = 0;
    dfs(1,0);
    for(int i = 1 ; i < LN ; ++i){
        for(int j = 1 ; j <= n ; ++j){
            dp[i][j] = dp[i-1][dp[i-1][j]];
        }
    }
    q = scan();
    while(q--){
        int a = scan() + 1, b = scan() + 1;
        int lca = LCA(a,b);
        printf("%d\n",sum[a] + sum[b] - sum[lca] - sum[dp[0][lca]]);
    }
}