#include <bits/stdc++.h> 
#define mod 1000000007
#define gc getchar_unlocked
#define pc(x) putchar_unlocked(x);
using namespace std;
typedef long long int lli;
lli fact[100000];
int n;

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
void func()
{
    int i,res=1;
    fact[0]=1;
    for(i=1;i<100000;i++)
    {
        res=((lli)res*i)%mod;
        fact[i]=res;        
    }
}

vector<int> vec[100000];
int dp[100000][20],parent[100000],level[100000],nodes[100000];
bool visit[100000];

void func2()
{
    int i,j;
    memset(dp,-1,sizeof(dp));
    for(i=0;i<n;i++)
        dp[i][0]=parent[i];    
    for(j=1;((1<<j)<n);j++)
    for(i=0;i<n;i++)
    {
        if(dp[i][j-1]!=-1)
        {
            dp[i][j]=dp[dp[i][j-1]][j-1];
        }
    }
}

int LCA(int x, int y)
{
    int i;
    if(level[x]<level[y])
        swap(x,y);
    for(i=int(log2(double(level[x])));i>=0;i--)
    {
        if((level[x]-(1<<i))>=level[y])
        {
            x=dp[x][i];
        }
    }
    if(x==y) return x;
    for(i=int(log2(double(level[x])));i>=0;i--)
    {
        if(dp[x][i]!=-1 && dp[x][i]!=dp[y][i])
        {
            x=dp[x][i];y=dp[y][i];
        }
    }
    return parent[x];
}

void func3()
{
    nodes[0]=0;
    queue<int> Q;
    Q.push(0);
    vector<int>::iterator it;
    while(!Q.empty())
    {
        int top=Q.front();
        Q.pop();
        for(it=vec[top].begin();it!=vec[top].end();it++)
        {
            if(nodes[*it]==-1)
            {
                int i=*it;
                if(fact[i]%3==0) nodes[i]=nodes[parent[i]]+1;
                else nodes[i]=nodes[parent[i]];
                Q.push(*it);
            }
        }
    }
}

void bfs()
{
    queue<int> Q;
    Q.push(0);
    visit[0]=true;
    parent[0]=-1;
    level[0]=0;
    vector<int>:: iterator it;
    while(!Q.empty())
    {
        int top=Q.front();
        Q.pop();
        for(it=vec[top].begin();it!=vec[top].end();it++)
        {
            if(visit[*it]==false)
            {
                parent[*it]=top;visit[*it]=true;level[*it]=level[top]+1;Q.push(*it);
            }
        }
    }
}

int main()
{
    //std::ios::sync_with_stdio(0);
    int q,i,j,a,b,x,y;
    func();
    scanf("%d",&n);
    for(i=0;i<n-1;i++)
    {
        scanf("%d%d",&x,&y);
        vec[x].push_back(y);
        vec[y].push_back(x);
    }
    memset(visit,false,sizeof(visit));
    memset(parent,-1,sizeof(parent));
    memset(level,-1,sizeof(level));
    memset(nodes,-1,sizeof(nodes));
    bfs();
    func2();
    func3();
    scanint(q);
    for(i=0;i<q;i++)
    {
        scanf("%d%d",&a,&b);
        int lca=LCA(a,b);
        int ans=nodes[a]+nodes[b]-2*nodes[lca]+1*(fact[lca]%3==0);
        printf("%d\n",ans);
    }
}
