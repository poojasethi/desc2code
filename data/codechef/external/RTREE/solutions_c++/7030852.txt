#include <bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c < '0' || c > '9'){
        c = getchar_unlocked();
    }
    while(c >= '0' && c <= '9'){
        x = (x<<1) + (x<<3) + c - '0';
        c = getchar_unlocked();
    }
    return x;
}
const int N = 100001;
const int mod = 1e9 + 7;
int sum[N];
int depth[N];
int fact[N];
int parent[N];
int subtree[N];
int n , q;
list<int> v[N];
int chainhead[N] = {0};
int cur = 1;
void dfs(int node,int parent){
    ::parent[node] = parent;
    subtree[node] = depth[node];
    sum[node] += (fact[node-1]%3 == 0);
    for(list<int>::iterator it = v[node].begin() ; it != v[node].end() ; ++it){
        if(*it != parent){
            depth[*it] = depth[node] + 1;
            sum[*it] += sum[node];
            dfs(*it,node);
            subtree[node] = max(subtree[node] , subtree[*it]);
        }
    }
}
void hld(int node){
    int mx = -1 , id = -1;
    for(list<int>::iterator it = v[node].begin() ; it != v[node].end() ; ++it){
        if(*it != parent[node]){
            if(mx < subtree[*it]){
                id = *it;
                mx = subtree[*it];
            }
        }
    }
    if(id != -1){
        chainhead[id] = chainhead[node];
        hld(id);
    }
    for(list<int>::iterator it = v[node].begin() ; it != v[node].end() ; ++it){
        if(*it != parent[node] && *it != id){
            ++cur;
            chainhead[*it] = *it;
            hld(*it);
        }
    }
}
int solve(int a , int b){
    int ret = 0;
    while(chainhead[a] ^ chainhead[b]){
        if(depth[chainhead[a]] > depth[chainhead[b]]){
            ret += sum[a] - sum[parent[chainhead[a]]];
            a = parent[chainhead[a]];
        }
        else{
            ret += sum[b] - sum[parent[chainhead[b]]];
            b = parent[chainhead[b]];
        }
    }
    if(depth[a] > depth[b]){
        ret += sum[a] - sum[parent[b]];
    }
    else{
        ret += sum[b] - sum[parent[a]];
    }
    return ret;
}
int main(){
    n = scan();
    fact[0] = 1;
    for(int i = 1 ; i < n ; ++i){
        int a = scan() + 1 , b = scan() + 1;
        v[a].push_back(b);
        v[b].push_back(a);
        fact[i] = (1LL * fact[i-1] * i)%mod;
    }
    parent[0] = 0;// :'(
    depth[1] = 1;
    sum[1] = 0;
    sum[0] = 0;
    dfs(1,0);
    chainhead[1] = 1;
    hld(1);
    q = scan();
    while(q--){
        int a = scan() + 1, b = scan() + 1;
        printf("%d\n",solve(a,b));
    }
} 