Vasya has got an array A consisting of N integers (1-indexed). He suddenly got an idea for generating another array B.
The generation of elements of new array B, will take place in the following manner:

For each i in range[1, N], B(i)  product of all divisors of A(i)


Hence, The new array B formed also has N elements.
Now, Vasya is interested in such subarrays of B that have product of elements as a perfect square. More formally, for a subarray [l,r] (starting at l and ending at r, both inclusive) of array B, the function M is defined in the following way.


M(l,r) = B(l) * B(l + 1) * B(l + 2) * ... * B(r)


Vasya wants the value returned by function M(l,r) to be perfect square.
Your task is to count all subarrays of B whose product of elements is a perfect square.
 

Input

First line of input contains T denoting the number of test cases.
First line of each test case contains N denoting the size of array A.
Next line contains N space separated integers denoting the elements of array A.

 

Output

Print T lines, one line for each test case. In each line, output the answer for that test case.


 

Constraints

1 ≤ T ≤ 10
1 ≤ N ≤ 10^5
1 ≤ A[i] ≤ 10^6

 

Example
Input:
3
4
2 3 8 27
5
3 3 3 3 3
7
4 8 11 17 36 25 15

Output:
3
6
2
 

Explanation
In 1st test case, array B will be [2, 3, 64, 729]. There are 3 subarrays whose product of elements is perfect square: (3,3), (3,4) and (4,4).
In 2nd test case, array B will be [3, 3, 3, 3, 3]. There are 6 subarrays whose product of elements is perfect square: (1,2), (1,4), (2,3), (2,5), (3,4), (4,5).
In 3rd test case, array B will be [8, 64, 11, 17, 10077696, 125, 225]. There are only 2 subarrays whose product of elements is perfect square: (2,2) and (7,7).
