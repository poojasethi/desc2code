
#include<iostream>
#include<cstdio>
#include<memory.h>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<string>
#include<map>
#include<cstring>
#include<vector>
#include<queue>
#include<stack>
#include<assert.h>
#include<set>
#include<deque>
#include<climits>
#include<utility>

using namespace std;

#define lc(i) (i<<1)
#define rc(i) ((i<<1)+1)
#define iscan(n) scanf("%d",&n)
#define llscan(n) scanf("%lld",&n)
#define cscan(n) scanf("%c",&n)
#define sscan(n) scanf("%s",n)
#define FOR(i,a,b) for(i=a;i<b;++i)
#define MP make_pair
#define PB push_back
#define LL long long
#define _MAX 10000
#define FILL(a,x) memset(a,x,sizeof a)
#define REP(i,n) for(i=0;i<n;++i)

int MOD;
int C[27][27];

int nCr(int n, int r)
{
	if(n < r)
	{
		return 0;
	}
	if(r > n - r)
		r = n-r;
	if(r == 0)
		return 1;
	if(C[n][r] != -1)
		return C[n][r];
	C[n][r] = (nCr(n-1,r-1) + nCr(n-1,r)) % MOD;
	return C[n][r];
}

int a[26];
int n,m;
int bnd;
int dp[(1<<16)][26][26];

int solve(int msk, int rem, int id)
{
	if(rem == 0) return 1;
	if(rem > n-id) return 0;
	if(dp[msk][rem][id] != -1)
		return dp[msk][rem][id];
	int ret = 0;
	for(int i=0;i<=bnd;++i)
	{
		if(!(msk & (1<<i)) && (a[i] & (1<<id)))
			ret += solve(msk|(1<<i),rem-1,id+1);
	}
	ret += solve(msk,rem,id+1);
	return dp[msk][rem][id] = ret%MOD;
}

int F[26];

int fact(int nn)
{
	if(F[nn] != -1)
		return F[nn];
	return F[nn] = (fact(nn-1) * nn)%MOD;
}

int main()
{
	MOD = 10007;
	FILL(C,-1);
	FILL(a,0);
	FILL(dp,-1);
	FILL(F,-1);
	F[0] = 1;
	F[1] = 1;
	int k;
	iscan(n);
	iscan(m);
	iscan(k);
	int i,j;
	REP(i,n)
	{
		REP(j,m)
		{
			int b;
			iscan(b);
			if(b)
			{
				a[j] |= (1<<i);
			}
		}
	}
	sort(a,a+m);
//	REP(i,m)cout<<a[i]<<endl;
	int full = 0;
	i = m-1;
	while(i>=0 && full < 10 && a[i] == (1<<n)-1)
	{
		--i;
		++full;
	}
	bnd = i;
//	cout<<bnd<<" "<<full<<endl;
	int ans = 0,tmp;
	for(i=0;i<=full && i <= k;++i)
	{
		tmp = solve(0,k-i,0);
	//	printf("solve(%d,%d,%d) = %d\n",0,k-i,0,tmp);
		tmp = (tmp * ((nCr(n-k+i,i) * nCr(full,i)) % MOD)) % MOD;
		tmp = (tmp*fact(i)) % MOD;
		ans += tmp;
	}
	printf("%d\n",ans % MOD);
	
	return 0;
}
