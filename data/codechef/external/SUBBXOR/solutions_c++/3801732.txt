//
//  main.cpp
// sub arary XOR
//
//  Created by UJJWAL CHHIBBER on 30/4/14.
//  Copyright (c) 2014 UJJWAL CHHIBBER. All rights reserved.
//
#include <iostream>
#include<stdlib.h>
#define gc getchar_unlocked
inline unsigned int rd(){
   unsigned int n = 0;
    int flag = 1;
    char c;
    while(1)
    {
        c = gc();
        if(c >= '0' && c <= '9')
        {  n = (n<<3) + (n<<1) + c - '0'; flag = 0;  }
        else if(flag != 1)
            break;
    }
    
    return  n;
}
 struct trie{
    int leftc;
    int rightc;
    struct trie *left,*right;
}trie;
struct trie *insert(struct trie *root,unsigned int n,int level){
    
    if(level == -1) return root;
  unsigned  int x = ((n>>level)&1);
    
    if(x){
        root->rightc++;
        if(root->right == NULL){
        root->right = (struct trie *)malloc(sizeof(struct trie));
            root->right->leftc = root->right->rightc = 0;
        }
        root->right = insert(root->right, n, level-1);
    }
    else{
        root->leftc++;
        if(root->left == NULL){
            root->left=(struct trie *)malloc(sizeof(struct trie));
            root->left->leftc = root->left->rightc = 0;
        }
        root->left = insert(root->left, n, level-1);
        
    }
    return root;
}
unsigned int query(struct trie *root,unsigned int n,int level,unsigned int k){
 
    if(level == -1 || root == NULL) return 0;
    
   unsigned int p  =((n>>level)&1);
   unsigned int q = ((k>>level)&1);
    if(q){
        if(p == 0) return root->leftc + query(root->right, n, level-1, k);
        else
            return root->rightc + query(root->left, n, level-1, k);
        
    }
    else
    {
        if(p == 0) return query(root->left, n, level-1, k);
        else
            return query(root->right, n, level-1, k);
    }
    
}
int main(){
    
  unsigned int n,k,t;
    t = rd();
   // scanf("%u",&t);
    while(t--)
    {
        struct trie *root;
        root =(struct trie *)malloc(sizeof(struct trie));
        root->leftc = root->rightc = 0;
        root->left = root->right = NULL;
        
       root =  insert(root, 0, 20);
        unsigned  int i,q,p = 0,x;
        long long int ans=  0;
    n = rd(); k  =rd();
    //    scanf("%u %u",&n,&k);
        for(i=0;i<n;++i){
            x = rd();
          //  scanf("%u",&x);
            q = p^x;
            ans += (long long )query(root,q,20,k);
          root = insert(root, q, 20);
            p = q;
        }        printf("%lld\n",ans);
    
    }
    
    
    return 0;
}