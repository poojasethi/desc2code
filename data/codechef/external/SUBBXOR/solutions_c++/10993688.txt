#include<bits/stdc++.h>
#define len(a) strlen(a)
#define ll long long
#define nl printf("\n")
#define mod 1000000007
//#define ip(a) scanf("%I64d",&a)
#define f first
#define s second
#define db printf("debug")
#define yes printf("YES\n")
#define no printf("NO\n")
#define pb(a) push_back(a)
#define po(a) pop_back()
#define mp(a,b) make_pair(a,b)
#define set(a,v) memset(a,v,sizeof(a))

#define sz(v) v.size()
#define pcase(i) printf("Case #%d:\n",i)
#define gc getchar//_unlocked

using namespace std;


// program to insert n string int trie and search q string if present in trie or not
struct trie_node
{
    trie_node *left;
    trie_node *right;
    ll r_cnt;
    ll l_cnt;
     trie_node()
     {

         left=NULL;
         right=NULL;
         r_cnt=l_cnt=0;
     }
};

void insert(trie_node *root, ll n)
{
    ll i;
    for(i=31;i>=0;i--)
    {

        ll b= (n>>i)&1;        // calculating i-th bit
        if(b==1)    // odd bit->1
        {
            root->r_cnt++;
            if(root->right==NULL)
                root->right= new trie_node;
            root= root->right;
        }
        else        // even bit->0
        {
            root->l_cnt++;
            if(root->left== NULL)
                root->left = new trie_node;
            root= root->left;
        }
    }
}
ll query(trie_node *root, ll n, ll k)
{
    ll bit_k,i;
    ll bit_n;
    ll ans=0, res=0;
    for(i=31;i>=0;i--)
    {

        bit_k = (k>>i)&1;
        bit_n = (n>>i)&1;

        if(bit_k==1)
        {
            if(bit_n==1)
            {
                res+= root->r_cnt;
                if(root->left==NULL)
                    return res;
                root = root->left;
            }
            else
                {
                    res+= root->l_cnt;
                    if(root->right==NULL)
                        return res;
                    root = root->right;
                }
        }
        else
        {
            if(bit_n==1)
            {
                if(root->right==NULL)
                   return res;
                root=root->right;
            }
            else
            {
                if(root->left==NULL)
                    return res;
                root= root->left;
            }
        }
    }

    return res;
}

int main()
{
    ll t;
    cin>>t;
    while(t--)
    {
        ll n,k,i,x;
        ll pre_xor=0, ans=0;
        trie_node *root = new trie_node;


        cin>>n>>k;
        insert(root, 0);
        for(i=1;i<=n;i++)
        {
            cin>>x;
            pre_xor= pre_xor^x;
            ans+= query(root, pre_xor, k);
            insert(root, pre_xor);
        }
        cout<<ans;nl;
    }
}
