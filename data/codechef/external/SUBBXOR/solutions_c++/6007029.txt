// Author: thecodekaiser
#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
#define MXN 20
 
struct Node
{
	int leftc, rightc;
	Node * right, * left;
 
	Node()  { leftc = 0; rightc = 0; left = NULL; right = NULL; }
 
	~Node() { if(left != NULL) delete left; if(right != NULL) delete right; }
};
 
Node * insert(Node * root, unsigned int n, int level)
{
	if(level == -1)
		return root;
 
	unsigned int idx = ((n >> level) & 1);
 
	if(idx)
	{
		root -> rightc++;
 
		if(root -> right == NULL)
			root -> right = new Node();
 
		root -> right = insert(root -> right, n, level-1);
	}
	else
	{
		root -> leftc++;
 
		if(root -> left == NULL)
			root -> left = new Node();
 
		root -> left = insert(root -> left, n, level-1);
	}
 
	return root;
}
 
unsigned int query(Node * root, ll n, int level, ll k)
{
	if(level == -1 or root == NULL)
		return 0;
 
	unsigned int p = ((n >> level) & 1);
	unsigned int q = ((k >> level) & 1);
 
	if(q)
	{
		if(p == 0)
			return root -> leftc + query(root -> right, n, level-1, k);
		else	return root -> rightc + query(root -> left, n, level-1, k);
	}
	else
	{
		if(p == 0)
			return query(root -> left, n, level-1, k);
		else	return query(root -> right, n, level-1, k);
	}
}
 
void solve()
{
	Node * root = new Node();
 
	//cout << "HERE" << endl;
	root = insert(root, 0LL, 20);	
 
	ll N, K;
	cin >> N >> K;
 
 
	ll ans = 0;
	ll pre = 0, num;
	for(int i = 0; i < N; i++)
	{
		cin >> num;
		pre = pre ^ num;
 
		ans += query(root, pre, 20, K);
 
		root = insert(root, pre, 20);
	}
 
	cout << ans << endl;
	return;
}
 
int main()
{
	int t;
	cin >> t;
 
	while(t--)
		solve();
	return 0;
}