#include<bits/stdc++.h>
using namespace std;

typedef struct node {
    int leftc;
    int rightc;
    struct node * left,*right;
}trie;

trie * insert(trie * root,int num,int level) {

    if(level==-1)
        return root;
    int bit=(num&(1<<level));
    if(bit) {
        root->rightc++;
        if(root->right==NULL) {
            root->right=(trie*)malloc(sizeof(trie));
            root->right->leftc=root->right->rightc=0;
        }
        root->right=insert(root->right,num,level-1);
    }
    else {
            root->leftc++;
            if(root->left==NULL) {
                root->left=(trie*)malloc(sizeof(trie));
                root->left->rightc=root->left->leftc=0;
            }
            root->left=insert(root->left,num,level-1);
    }
    return root;
}
int query(trie * root,int num, int level,int k) {

    if(level==-1 || root==NULL)
        return 0;
    int p=(num&(1<<level));
    int q=(k&(1<<level));
    if(q) {
        if(p==0)
            return root->leftc+query(root->right,num,level-1,k);
        else
            return root->rightc+query(root->left,num,level-1,k);
    }
    else {
        if(p==0)
             return query(root->left,num,level-1,k);
        else
             return query(root->right,num,level-1,k);
    }
}
void print(trie * root) {
    if(root==NULL)
        return ;
    printf("%d %d\n",root->leftc,root->rightc);
    print(root->left);
    print(root->right);
}

int main() {
    int t;cin>>t;
    while(t--) {
        trie * root;
        root=(trie*)malloc(sizeof(trie));
        root->left=root->right=NULL;
        root->leftc=root->rightc=0;
        root=insert(root,0,20); // top most node is empty
        int n,i,j,p=0,x,q,k;
        long long ans=0;
        scanf("%d%d",&n,&k);
        for(int i=0;i<n;i++) {
            scanf("%d",&x);
            q=p^x;
            ans+=(long long )(query(root,q,20,k));
            root=insert(root,q,20);
            p=q;
        }
        cout<<ans<<endl;
    }
    return 0;
}