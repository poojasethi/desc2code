#include <bits/stdc++.h>
#define lli long long

using namespace std;

int tot,n,k;

struct node {
    int pos[2];
    int cnt;
    node() {
        pos[0] = pos[1] = -1;
        cnt = 0;
    }
}tree[100005*20];

int A[100005];

void init()
{
    tot = 0;
    for ( int i = 0; i < n*20; i++ ) tree[i] = node();
    return;
}

lli query(int idx, int where, int tight, int val)
{
    if ( idx == -1 ) return tree[where].cnt;
    lli ans;
    if ( tight == 0 ) ans = tree[where].cnt;
    else {
        ans = 0;
        int raised1 = ((val & (1<<idx)) > 0);
        int raised2 = ((k & (1<<idx)) > 0);

        for ( int i = 0; i < 2; i++ ) {
            if ( tree[where].pos[i] == -1 ) continue;
            if ( (i^raised1) > raised2 ) continue;
            if ( (i^raised1) == raised2 ) ans += query(idx-1, tree[where].pos[i], 1, val);
            if ( (i^raised1) < raised2 ) ans += query(idx-1, tree[where].pos[i], 0, val);
        }
    }
    return ans;
}

lli query(int val)
{
    return query(19,0,1,val);
}

void insert(int idx, int where, int val)
{
    tree[where].cnt++;
    if ( idx == -1 ) return;
    int raised = ((val & (1<<idx)) > 0);
    if ( tree[where].pos[raised] == -1 ) {
        tot++;
        tree[where].pos[raised] = tot;
    }
    insert(idx-1, tree[where].pos[raised], val);
}

void insert(int val)
{
    insert(19,0,val);
    return;
}
int main()
{
    int t,val;
    lli ans;

    cin >> t;

    while ( t-- ) {

        cin >> n >> k;
        k--;

        init();

        for ( int i = 1; i <= n; i++ ) cin >> A[i];

        val = ans = 0;

        for ( int i = 0; i <= n; i++ ) {
            val ^= A[i];
            ans += query(val);
            insert(val);
        }

        cout << ans << endl;
    }
    return 0;
}
