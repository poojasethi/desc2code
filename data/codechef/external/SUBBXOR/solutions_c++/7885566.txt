#include <bits/stdc++.h>

using namespace std;

#define MAX 100005
#define ll long long

struct node {
	ll cnt[2];
	node *next[2];
};

void insert(node *root, int n, int l){
	node *current;
	current = root;

	for(int i=l ; i>=0 ; i--){
		int index = ((n>>i)&1);
		current->cnt[index]++;
		if(current->next[index] == NULL){
			current->next[index] = (node *)malloc(sizeof(node));
			current->next[index]->cnt[0] = current->next[index]->cnt[1] = 0;
			current->next[index]->next[0] = current->next[index]->next[1] = NULL;
		}
		current = current->next[index];
	}
}

ll query(node *root, int n, int k, int l){
	if(l == -1 || root == NULL)
		return 0;
	int p = ((n >> l) & 1);
	int q = ((k >> l) & 1);

	if(q){
		if(p == 0)
			return root->cnt[0] + query(root->next[1], n, k, l-1);
		else
			return root->cnt[1] + query(root->next[0], n, k, l-1);
	} else {
		if(p == 0)
			return query(root->next[0], n, k, l-1);
		else
			return query(root->next[1], n, k, l-1);
	}
}

int main(){
	int t;
	scanf("%d", &t);

	while(t--){
		int n, k, a;
		scanf("%d %d", &n, &k);
		
		node *root = (node *)malloc(sizeof(node));
		ll ans = 0;

		int q, p;
		q = p = 0;
		insert(root, 0, 20);
		for(int i=0 ; i<n ; i++){
			scanf("%d", &a);

			q = p ^ a;
			ans += query(root, q, k, 20);
			insert(root, q, 20);
			p = q;
		}	

		printf("%lld\n", ans);
	}

	return 0;
}