#include<bits/stdc++.h>
using namespace std;

struct trie
{
	long long lcount, rcount;
	trie *left, *right;
	public:
		trie()
		{
			lcount = rcount = 0;
			left = right = NULL;
		}
};


void insert(trie *root, unsigned int num)
{
	for(int i=17; i>=0; i--)
	{
		unsigned int x = (num>>i) & 1;

		if(x)
		{
			root->rcount++;
			if(root->right==NULL)
				root->right = new trie();
			root = root->right;
		}
		else
		{
			root->lcount++;
			if(root->left==NULL)
				root->left = new trie();
			root = root->left;
		}
	}
}

long long getSubArray(trie *root, unsigned long long cms, unsigned int k)
{
	if(root==NULL)
		return 0;
	long long result = 0;
	for(int i=17; i>=0; i--)
	{
		unsigned int p = (cms>>i) & 1;
		unsigned int x = (k>>i) & 1;

		if(x)
		{
			if(p==0)
			{
				result += root->lcount;
				if(root->right==NULL)
					return result;
				root = root->right;
			}
			else
			{
				result += root->rcount;
				if(root->left==NULL)
					return result;
				root = root->left;
			}
		}
		else
		{
			if(p==0)
			{
				if(root->left==NULL)
					return result;
				root = root->left;
			}
			else
			{
				if(root->right==NULL)
					return result;
				root = root->right;
			}
		}
	}
	return result;
}


int main()
{
	int t;
	cin>>t;

	while(t--)
	{
		unsigned int num, cum = 0;
		unsigned int i;
		long long ans = 0;
		unsigned int n, k;

		trie *root = new trie();
		insert(root, 0);

		scanf("%u%u", &n, &k);
		for(i=0; i<n; i++)
		{
			scanf("%u", &num);
			cum = cum^num;
			ans += getSubArray(root, cum, k);
			insert(root, cum);
		}
		cout<<ans<<endl;
	}
	return 0;
}