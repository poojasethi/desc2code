#include<iostream>
using namespace std;

struct trie{
	struct trie *child[2];
	int count[2];
	trie():count(),child(){}
};

void insert(trie *root,int n){
	trie *ptr=root;
	for(int i=20;i>=0;i--){
		int p=(n>>i)&1;
		
		
		if(ptr->child[p]==NULL)
			ptr->child[p]=new trie();
		ptr->count[p]++;
		ptr=ptr->child[p];
		
	}
			
}

int query(trie *root,int x,int k,int level){
	if(level==-1 || root==NULL)
		return 0;
	int p=(x>>level)&1;
	int q=(k>>level)&1;

	if(p==0 && q==0)
		return query(root->child[0],x,k,level-1);
	else if(p==0 && q==1)
		return root->count[0]+query(root->child[1],x,k,level-1);
	else if(p==1 && q==0)
		return	query(root->child[1],x,k,level-1);
	else if(p==1 && q==1)
		return root->count[1]+query(root->child[0],x,k,level-1);

}

int main(){
	int t,n,k,a;
	cin>>t;

	while(t--){
		cin>>n>>k;
		int x=0;
		long long count=0; 
		trie *root=new trie;
		insert(root,0);
		for(int i=0;i<n;i++){
			cin>>a;
			x^=a;
			count+=(long long)query(root,x,k,20);
			insert(root,x);

		}

		cout<<count<<endl;
	}

	return 0;
}
