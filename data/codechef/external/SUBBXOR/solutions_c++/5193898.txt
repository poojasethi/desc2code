//editorial
#include<cstdio>
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
struct node
{
    int left_count,right_count;
    node *left,*right;
};
node *newNode()
{
    node *p=(node*)malloc(sizeof(node));
    p->left=p->right=NULL;
    p->left_count=p->right_count=0;
    return p;
}
node *insert(node *head,int n)
{
    node *root=head;
   for(int i=20;i>=0;i--)
   {
       int x=(n>>i) & 1;if(x)
        {
            root->right_count++;
            if(root->right == NULL)
                root->right = newNode();
            root = root->right;
        }
        else
        {
            root->left_count++;
            if(root->left == NULL)
                root->left = newNode();
            root = root->left;
        }
    }
    return head;
}
unsigned int query(node *root,unsigned int n ,int level,int k)
{
    if(level==-1 || !root)return 0;
    unsigned int p=((n>>level)&1);
    unsigned int q=((k>>level)&1);
    if(q)
    {
        if(p==0)return root->left_count+query(root->right,n,level-1,k);
        else return root->right_count+query(root->left,n,level-1,k);
    }
    else
    {
        if(p==0)return query(root->left,n,level-1,k);
        else return query(root->right,n,level-1,k);
    }
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        node * root;
        root=(node *)malloc(sizeof(node));
        root->left=root->right=NULL;
        root->left_count=root->right_count=0;
        root=insert(root,0);
        unsigned int n,i,j,p=0,x,q,k;
        long long ans=0;
        scanf("%u%u",&n,&k);
        for(i=0; i<n; i++)
        {
            scanf("%u",&x);
            q=p^x;
            ans+=(long long)(query(root,q,20,k));
            root=insert(root,q);
            p=q;
        }
        printf("%lld\n",ans);
    }
    return 0;
}
