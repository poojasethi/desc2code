//CodeChef--Maximum Threat
#include<bits/stdc++.h>
#define MAX 10000

using namespace std;

class Graph{
	
	private :
		
		std::vector<int> adjList[MAX];
	    int Vertices;
	
	public :
	    
		Graph(int Vertices){ this->Vertices=Vertices;  }    
	    
	    void addEdge(int src,int dest){
	    	
	    	adjList[src].push_back(dest);
	    	adjList[dest].push_back(src);
	    	
	    }
	    
	    void DFS(int u,int *Visited,int *num,int *label_arr,int label){
	    	
	    	Visited[u]=1;
	    	(*num)++;
	    	label_arr[u]=label;
	    	
	    	for(int i=0;i<adjList[u].size();i++)
	    	      if(!Visited[adjList[u][i]])
	    	             DFS(adjList[u][i],Visited,num,label_arr,label);	    	
	    	
	    } 
	
	    int maxThreat(int convict){
	    	
	    	int Visited[Vertices+1],label_arr[Vertices+1],num;
	    	
	    	memset(Visited,0,sizeof(Visited));
	    	memset(label_arr,0,sizeof(label_arr));
	    	
	    	int component=1;
	    	vector<int> label;
	    	
	    	label.push_back(-1);
	    	for(int i=1;i<=Vertices;i++)
	    	   if(!Visited[i]){
	    	   	
	    	   	num=0;
	    	   	DFS(i,Visited,&num,label_arr,component);
	    	   	component++;
	    	   	label.push_back(num);    	   	
	    	   	
	    	   }
	    	
	    	int ans=0;
	    	for(int i=1;i<component;i++)
	          if(i!=label_arr[convict]&&ans<label[i])	
	    	     ans=label[i];
	    	     
	    	return ans;     
	    	
	    }
	
	    void destroy(){
	    	
	    	for(int i=1;i<=Vertices;i++) adjList[i].clear();
	    	
	    }
	
};

int main(){
	
	int testCases,vertices,convict,edges,src,dest;
	
	scanf("%d",&testCases);
	
	while(testCases--){
		
		scanf("%d%d%d",&vertices,&convict,&edges);
		
		Graph G(vertices);
		
		while(edges--){
			
			scanf("%d%d",&src,&dest);
			G.addEdge(src,dest);		
			
		}
		
		printf("%d\n",G.maxThreat(convict));
		
		if(testCases)
		   G.destroy();	
		
	}
	
	return 0;
	
}