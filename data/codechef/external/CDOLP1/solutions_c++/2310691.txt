// 2-d vector refrence http://stackoverflow.com/questions/4844810/c-2d-vector-and-operations
#include<iostream>
#include<string.h>
#include<climits>
#include<stdio.h>
#include<string>
#include<algorithm>
#include<deque>
#include<math.h>
#include<sstream>
#include<vector>
#include<map>
using namespace std;
struct list
{
	vector<int> frnd;
	bool visit;
};
typedef struct list list;
int main(int argc, char const *argv[])
{
	int testcases;
	cin>>testcases;
	while(testcases--)
	{
		int size,n,s,f,*count,i,max=-1,a,b,value,temp;
		cin>>n;
		cin>>s;
		cin>>f;
		list adjacency[n+1];
		count = new int[n+1];
		for(i=0;i<=n;i++)
		{
			count[i]=0;
			adjacency[i].visit=true;
		}
		for(i=0;i<f;i++)
		{
			cin>>a;
			cin>>b;
			adjacency[a].frnd.push_back(b);
			adjacency[b].frnd.push_back(a);
			count[a]=count[a]+1;
			count[b]=count[b]+1;
		}
		/*for(i=1;i<=n;i++)
		{
			j=0;
			while(j!=adjacency[i].frnd.size())
			{
				cout<<adjacency[i].frnd[j];
				j++;
			}
		}*/
		deque<int> q;
		q.push_back(s);
		count[s]=-1;
		while(!q.empty())
		{
			i=0;
			//cout<<"aya"<<endl;
			value=q.front();
			//cout<<value<<endl;
			q.pop_front();
			size=adjacency[value].frnd.size();
			while(i!=size)
			{
				temp=adjacency[value].frnd[i];
				if(adjacency[temp].visit==true)
				{
					q.push_back(temp);
					count[temp]=-1;
				}
				i++;	
			}
			adjacency[value].visit=false;
		}
		for(i=1;i<=n;i++)
		{
			//cout<<count[i]<<",";
			if(count[i]>max)
			{
				max=count[i];
			}
		}
		//cout<<endl;
		printf("%d\n",max+1);
	}
	return 0;
}