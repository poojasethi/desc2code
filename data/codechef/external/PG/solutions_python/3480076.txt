#include <iostream>
using namespace std;
//a1 repetative index.

int main()
{

	int tcCount;
	cin>>tcCount;
	signed long long num, power;
	int lastDigit,resPower,temp=1;
	int lastDigitPowerRep[10]={1,1,4,4,2,1,1,4,4,2};	//starting from 0
	int mem[10][4]={0};
	//extract last digit of num.
	for (int i = 0; i < tcCount; i++)
	{
		cin>>num;
		cin>>power;
		lastDigit =num%10;//opt: convert int to short opt: easier way to get reminder
		if (power==0)
		{
			cout<<1;
		}
		//else if(lastDigit==0 ||lastDigit==6 ||lastDigit==5 ||lastDigit==1 )
		//	cout<<lastDigit;
		else
		{
			temp=lastDigit;
			resPower=(power-1)%lastDigitPowerRep[lastDigit];
			if(mem[lastDigit][resPower]==0)
			{
				for (int j = 0; j < resPower; j++)
				{
					temp=temp* lastDigit;
				}
				mem[lastDigit][resPower]=temp%10;
			}
			cout<<mem[lastDigit][resPower];
		}
		if(i!=tcCount-1)
			cout<<endl;
	}
	//extract the resultant power for the number.
	//if 0
	//if the one with 1s
	return 0;
}