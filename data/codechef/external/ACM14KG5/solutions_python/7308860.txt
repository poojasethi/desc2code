#include <bits/stdc++.h>
#define M 1000000007
#define lli long long

using namespace std;

lli fact[200005];
lli inv_fact[200005];
lli cnt[200005];

lli fast_pow(lli a, lli b)
{
    lli res = 1;
    while ( b > 0 ) {
        if ( b&1 ) res = (res*a)%M;
        a = (a*a)%M;
        b >>= 1;
    }
    return res;
}

void pre()
{
    fact[0] = inv_fact[0] = 1;
    for ( lli i = 1; i <= 200000; i++ ) {
        fact[i] = (fact[i-1]*i)%M;
        inv_fact[i] = (inv_fact[i-1]*fast_pow(i,M-2))%M;
    }
    return;
}

lli C(int a, int b)
{
    if ( a == b ) return 1;
    if ( a < b ) return 0;
    lli ans = fact[a];
    ans = (ans*inv_fact[b])%M;
    ans = (ans*inv_fact[a-b])%M;
    return ans;
}
//Code for FAST INPUT :)
template <typename T>
inline void fi(T *a)
{
    register char c=0;
    while (c<33) c=getchar();
    *a=0;
    int tmp = 0;
    while (c>33)
    {
        if ( c == 45 ) tmp = 1;
        else *a=*a*10+c-'0';
        c=getchar();
    }
    if ( tmp == 1 ) *a = 0-(*a);
}

int find_sqrt(lli p)
{
    lli l = 1, r = p, mid, ans;
    while ( l <= r ) {
        mid = (l+r)/2;
        if ( mid*mid > p ) r = mid-1;
        else ans = mid, l = mid+1;
    }
    return ans;
}

int main()
{
    int t,n,k;
    lli ans;
    pre();
    fi(&t);
    assert(t <= 100000);
    while ( t-- ) {
        fi(&n), fi(&k);
        assert(n >= 1 && n <= 100000);
        assert(k >= 1 && k <= 100000);
        if ( n == 1 ) {
            puts("-1");
            continue;
        }
        ans = 0;
        int p = find_sqrt((lli)k);
        for ( int i = 1; i <= p; i++ ) {
            lli val = C(n+i-3,i-1);
            lli val1;
            if ( (lli)(i)*(lli)(i-1) <= k ) val1 = k/i - (i-1);
            else val1 = 0;
            val = (val*val1)%M;
            ans = ans + val;
            if ( ans >= M ) ans -= M;
        }
        printf("%lld\n", ans);
    }
    return 0;
}
