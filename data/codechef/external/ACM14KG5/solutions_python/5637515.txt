#include <stdio.h>
#include <vector>
#include <iostream>
#include <queue>
#include <set>
#include <algorithm>
#include <math.h>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
using namespace std;
#define si(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define mem(a,b) memset(a,b,sizeof(a))
#define f(a,b) for(int i=a;i<b;i++)
#define maX(a,b) ((a)>(b)?a:b)
#define miN(a,b) ((a)<(b)?a:b)
#define ll long long int
#define fill(a,v) memset(a, v, sizeof a)
#define mod 1000000007
typedef pair<ll, ll> ii;
typedef pair<ll, ii> iii;
ll n,k;
ll dp[100003][400];
void init(){
    for(ll i=0;i<=100002;i++){
        for(ll j=1;j<=318;j++){
            dp[i][j]=0;
        }
    }
}
ll sum[320]={0};
void solve(){
    for(ll i=1;i<=100000;i++){
        for(ll j=1;j<=317;j++){
            if(i==1){
                dp[i][j]=1;
            }
            else{
                dp[i][j]=(sum[j])%mod;
            }
        }
        sum[0]=0;
        for(ll j=1;j<=317;j++){
            sum[j]=(dp[i][j]+sum[j-1])%mod;
        }
    }
}
int main(int argc, const char * argv[])
{
    ios_base::sync_with_stdio(0);
    init();
    solve();
    ll t;
    cin>>t;
    while(t--){
        cin>>n>>k;
        if(n==1){
            cout<<"-1"<<endl;
            continue;
        }
        ll m1=(long long)sqrt(k);
        ll ways=0;
        for(ll i=1;i<=m1;i++){
            ways=(ways+dp[n][i])%mod;
        }
        ll ndp[340]={0};
        for(ll i=1;i<=m1;i++){
            ndp[i]=(ndp[i-1]+dp[n-1][i])%mod;
        }
        ll num;
       for(ll i=1;i<=m1;i++){
         if((k/i)<=m1)break;
            num=(k/i)-k/(i+1)%mod;
           ways=(ways+(ndp[i]*num)%mod)%mod;
            ways%=mod;
       }
        cout<<ways<<endl;
    }
   return 0;

}