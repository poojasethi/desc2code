#include <bits/stdc++.h>
#define make_it_fast ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

const double eps=1e-11;
//const double pi=acos(-1.0);
typedef long long ll;
typedef long long int lli;
typedef unsigned long long ull;
typedef long double ld;

#define ff first
#define ss second
#define pb push_back
#define mkp make_pair
typedef std::pair<int,int> pii ;
typedef std::pair<lli,lli> pll ;
typedef std::vector<int> vi ;
#define lpu(i,s,e) for(i=s;i<e;i++)
#define lpd(i,s,e) for(i=s;i>e;i--)
#define lpui(i,s,e) for(i=s;i<=e;i++)
#define lpdi(i,s,e) for(i=s;i>=e;i--)
#define rep(i,n) for(i=0;i<n;i++)
#define repi(i,n) for(i=0;i<=n;i++)
#define all(v) v.begin(), v.end()
#define abs(a) (a<0?-(a):a)
#define pl printf("\n");
#define dpl fprintf(stderr, "\n");
#define db(x) cerr << x << endl; // DEBUG PRIMITIVE
#define dbn(A,N) for(int __I=0; __I<N; __I++) cerr << A[__I] << " "; dpl; // DEBUG 1-D ARRAY
#define dbnm(A,N,M) for(int __I=0; __I<N; __I++) { for(int __J=0; __J<M; __J++) cerr << A[__I][__J] << " "; dpl; } // DEBUG 2-D ARRAY
#define dbvp(v) for(auto __Velem : v) cerr << '(' << __Velem.ff << ',' << __Velem.ss << ") " ; cerr << endl; // DEBUG VECTOR PAIRS
#define dbv(v) for(auto __Velem : v) cerr << __Velem << ' '; cerr << endl; // DEBUG VECTOR PRIMITIVE
#define gi2(_A,_B) inp(_A); inp(_B);
#define gi3(_A,_B,_C) inp(_A); inp(_B); inp(_C);

class TimeTracker {
  clock_t start, end;
public:
  TimeTracker() {
    start = clock();
  }
  ~TimeTracker() {
    end = clock();
    fprintf(stderr, "RunTime : %.3lf s\n", (double)(end - start) / CLOCKS_PER_SEC);
  }
};

template <class T> inline void mswap(T& a,T &b){ a^=b; b^=a; a^=b; } // only for int based , not for float based or structures
template <class T> inline void bswap(T& a,T& b){ T temp; temp = a; a = b; b = temp; }
template <class T> inline T min(T& a,T &b){ if(a<b) { return a; } else return b; }
template <class T> inline T max(T& a,T &b){ if(a>b) { return a; } else return b; }

# define getcx getchar_unlocked

template <class T>
void inp(T& n)//fast input function
{
  n=0;
  int ch=getcx();
  int sign=1;
  while( ch < '0' || ch > '9' )
    {if(ch=='-')sign=-1; ch=getcx();}
  while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
  n=n*sign;
}

template <class T>
void oup(T x)
{
  if(x<0)
  {
    putchar('-');
    x=-x;
  }
  int len=0,data[25];
  while(x)
  {
    data[len++]=x%10;
    x/=10;
  }
  if(!len)
    data[len++]=0;
  while(len--)
    putchar(data[len]+48);
  putchar('\n');
}

#define MOD 1000000007

ull modInverse(ull i)
{
  if(i == 1)
    return 1;
  ull ans = 1;
  ull pow = MOD-2;
  while(pow)
  {
    if(pow %2 == 1)
      ans *= i;
  
    i = (i*i) % MOD;
    pow /= 2;
    ans = ans % MOD;
  }
 
  return ans;
}

int main()
{
  // make_it_fast
  #ifdef LOCAL
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
    TimeTracker trk;
  #endif

  lli i, j;
  lli **f;
  f = new lli*[100010];
  rep(i, 100010) f[i] = new lli[330];

  lpu(j, 1, 330) f[0][j] = 1;
  lpu(i, 1, 100010) f[i][0] = 0;

  lpu(i, 1, 100010)
    lpu(j, 1, 330)
      f[i][j] = (f[i-1][j] + f[i][j-1])%MOD;

  int t; inp(t);
  lli tmp, n, k;
  while(t--){
    inp(n); inp(k);
    lli ans = 0;
    i = 1;
    if(n == 1){ oup(-1); continue; }
    while((k/i) >= i) {
      tmp = ((k/i) - i + 1) * f[n-2][i]; tmp %= MOD;
      ans += tmp; 
      ans %= MOD;
      
      i++;
    }
    oup(ans);
  }
  return 0;
}