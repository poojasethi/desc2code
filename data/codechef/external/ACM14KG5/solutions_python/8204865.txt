#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
#include<cmath>
typedef unsigned long long llu;

int fs()
{
	int x=0;
	char c;
	c=getchar_unlocked();
	while (c<'0'||c>'9')
		c=getchar_unlocked();
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return x; 
}
void pps(const char *s)
{
	int i;
	for (i=0;s[i]!='\0';i++)
	{
		putchar_unlocked(s[i]);
	}
}
void _ppd(llu a)
{
	if (a==0)
		return ;
	_ppd(a/10);
	putchar_unlocked(a%10+'0');
}
void ppd(llu a) // Printing integer using utchar unlocked!
{
	if (a==0)
		pc('0');
	else
	_ppd(a);
}
int dp[100321][321];
#define M 1000000007
int main()
{
	int i,j;
	dp[0][0]=0;
	for (i=1;i<321;i++)
		dp[0][i]=1;
	for (i=1;i<=100320;i++)
		dp[i][0]=1;
	
	for (i=1;i<=100320;i++)
		for (j=1;j<=320;j++)
		{
			if (j>i)
				dp[i][j]=0;
			else
			
				dp[i][j]=(dp[i-1][j]+dp[i-1][j-1])%M;
		}
	
	
	int t;
	t=fs();
	while (t--)
	{
		int n,k;
		n=fs();
		k=fs();
		if (n==1)
		{
			printf("-1\n");
			continue;
		}
		int root=1;
		while (root*root<=k)
			root++;
		root--;
		llu ans=0;

		ans=(ans+dp[root-1+n][root-1])%M;
		for (i=1;i<root;i++)
			ans=(ans+(llu)dp[i-1+n-1][i-1]*(k/i-k/(i+1)))%M;
		if (k/i!=i)
		{
			ans=(ans+(llu)dp[i-1+n-1][i-1]*(k/i-k/(i+1)))%M;
		}

/*
		for (i=1;i<=root;i++)
		{
			ans=(ans+dp[n-1][i]*(k/i-i+1))%M;
		}
*/
		ppd(ans);pc('\n');
	}
	return 0;
}