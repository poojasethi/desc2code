#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define mset(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gi(x) scanf("%d", &x)
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << (x) << " "
#define dbs(x) cerr << (x) << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int MAX_N = 1e5 + 500;
const int mod = 1e9 + 7;

int fac[MAX_N], invFac[MAX_N];

inline int powMod(int x, int n) {
    int ret = 1;
    while(n > 0) {
        if(n & 1) ret = (ll)ret * x % mod;
        x = (ll)x * x % mod;
        n >>= 1;
    }
    return ret;
}

inline void init() {
    fac[0] = 1;
    for(int i = 1; i < MAX_N; ++i) fac[i] = (ll)fac[i - 1] * i % mod;
    invFac[MAX_N - 1] = powMod(fac[MAX_N - 1], mod - 2);
    for(int i = MAX_N - 2; i >= 0; --i) invFac[i] = (ll)invFac[i + 1] * (i + 1) % mod;
}

inline int choose(int N, int R) {
    if(R > N) return 0;
    int ret = (ll)fac[N] * invFac[R] % mod;
    ret = (ll)ret * invFac[N - R] % mod;
    return ret;
}

inline int numSequences(int N, int K) {
    return choose((K - 1) + N - 1, N - 1);
}

int main() {
    init();
    int T; gi(T);
    rep(z, T) {
        int N, K;
        gi(N), gi(K);
        if(N == 1) puts("-1");
        else {
            int ans = 0;
            for(int secondLast = 1; secondLast * secondLast <= K; ++secondLast) {
                ans += (ll)((K / secondLast) - secondLast + 1) * numSequences(N - 1, secondLast) % mod;
                if(ans >= mod) ans -= mod;
            }
            pin(ans);
        }
    }
    return 0;
}