#include<bits/stdc++.h>
using namespace std;
//custom
#define endl ('\n')
#define space (" ")
#define __ ios_base::sync_with_stdio(false);cin.tie(0);
// Useful constants
#define INF (int)1e9
#define EPS (double)(1e-9)
#define PI (double)(3.141592653589793)
//utils
#define SET(a,b) (memset(a,b,sizeof(a)))
//for vectors
#define pb push_back
#define mp make_pair
typedef vector<int> vi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;
//data types
typedef long long ll;
//loops
#define REP(i,a,b) \
    for(int i = int(a);i <= int(b);i++)
#define TRvi(c,it) \
    for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define MEMSET_INF 127 //2bill
#define MEMSET_HALF_INF 63 //1bill

#ifdef DEBUG
    #define debug(args...) {dbg,args; cerr<<endl;}
    #define _
    #define OUT(A,a,b) for(int zi = a;zi <= int(b); zi++)cout<<A[zi]<<space;cout<<endl;
#else
    #define debug(args...)  // Just strip off all debug tokens
    #define _ ios_base::sync_with_stdio(false);cin.tie(0);
    #define OUT(A,a,b)
#endif 
struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }
} dbg;

int dp[100002][335];
// int prefix[335];
const int MOD = 1e9 + 7;
const ll MOD2 = 1e9 + 7;

int main(){
    _
    int t,n,k;
    cin>>t;

    // Precompute dp
    // dp[i][j] = count ending at at cracker i with value j at ith position.
    // O(10^5*10^2*2)
    // REP(j, 1, 330)
    //     dp[0][j] = 1;

    // REP(i, 1, 100000){
    //     dp[i][0] = 1;
    // }
    // dp[0][1] = 1;

    REP(i, 1, 100001){
        // prefix[0] = 0;
        // REP(j, 1, 400){
        //     prefix[j] = prefix[j-1] + dp[i-1][j];
        //     if(prefix[j] > MOD)
        //         prefix[j] -= MOD;
        // }

        REP(j, 1, 330){
            if(i == 1)dp[i][j] = j;
            else if(j == 1)dp[i][j] = 1;
            else
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            if(dp[i][j] > MOD)
                dp[i][j] -= MOD;
        }
    }

    // REP(i, 0, 5){
    //     REP(j, 0, 5){
    //         cout<<dp[i][j]<<space;
    //     }
    //     cout<<endl;
    // }

    while(t--){
        cin>>n>>k;
        if(n == 1){
            cout<<-1<<endl;
            continue;
        }
        ll total = 0;

        // Add all ending at or before sqrt(k).
        total = dp[n][(int)sqrt(k)];

        int last = (int)sqrt(k);
        // Add all ending at more than sqrt(k).
        // this includes n-1th cracker and appropriate j
        // REP(j, 1, sqrt(k)){
        for(int j = sqrt(k); j >= 1; j--){
            // int noToTake = k - (int)sqrt(k) - ( k - k/j);
            // debug("k, j, sqrt(k), k/j, noToTake, dp[n][j]", k, j, sqrt(k), k/j, noToTake, dp[n][j]);
            // total += dp[n-1][j]*noToTake;
            int curr = k/j;
            // total += dp[n-1][j]*(ll)((int)k/j - j);
            total += dp[n-1][j]*(ll)(curr - last);
            // debug(total)
            if(total > MOD2)
                total %= MOD2;
            last = curr;
        }
        cout<<total<<endl;
    }
    return 0;
}