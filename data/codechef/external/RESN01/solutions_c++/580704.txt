using namespace std;
#include <algorithm>
#include <iostream>
#include <iterator>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>

# define HIGH 2147483647

void build(int node,int a,int b);
int find(int node,int a,int b,int i,int j,int temp);

int arr[20100],tree[100000],ans[20010];
int main()
{
    int cases,n,k,temp,x,i,j,m;
    scanf("%d",&cases);
    while(cases--)
    {
         scanf("%d %d",&n,&k);
         temp=HIGH;
         for(i=0;i<n;i++)
         {
              scanf("%d",&arr[i]);
              temp=temp & arr[i];
         }
         x=(n/2);    
         if(k>=x)
         {
              printf("%d",temp);
              for(i=1;i<n;i++)
                   printf(" %d",temp);
              printf("\n");
              continue;
         }
         build(1,0,n-1);
         for(m=0;m<n;m++)
         {
              i=m-k;
              j=m+k;
              if(j>=n) j=j-n;
              if(i<0) i=i+n;
              
              if(i>j)
                   ans[m]=find(1,0,n-1,i,n-1,HIGH) & find(1,0,n-1,0,j,HIGH);
              else ans[m]=find(1,0,n-1,i,j,HIGH);
         }
         printf("%d",ans[0]);
         for(i=1;i<n;i++)
              printf(" %d",ans[i]);
         printf("\n");
    }
    return 0;
}

void build(int node,int a,int b)
{
     int left,right,mid;
     if(a==b)
     {
          tree[node]=arr[a];
          return;
     }
     
     mid=(a+b)/2;
     left=2*node;
     right=2*node + 1;
     
     build(left,a,mid);
     build(right,mid+1,b);
     
     tree[node]=tree[left]&tree[right];
     return;
}

int find(int node,int a,int b,int i,int j,int temp)
{
     int mid,left,right,val;
     mid=(a+b)/2;
     left=2*node;
     right=2*node+1;
     
     if(i<=a && j>=b)
          return temp&tree[node];
     if(j<=mid)
          return find(left,a,mid,i,j,temp);
     else if(i>mid)
          return find(right,mid+1,b,i,j,temp);
     else
     {
         val=find(left,a,mid,i,j,temp);
         return find(right,mid+1,b,i,j,val);
     }
}
     
