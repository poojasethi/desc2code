/*
	Author: Pankaj Jindal
*/

#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <math.h>
#include <cassert>
#include <string.h>
#include <stack>

using namespace std;

#define DEBUG if(0)

//Numberic Functions
template<class T> inline T gcd(T a, T b){
	if(a<0)return gcd(-a,b); if(b<0)return gcd(a,-b); return (b==0)?a:gcd(b,a%b);
}
template<class T> inline T lcm(T a, T b){
	if(a<0)return lcm(-a,b); if(b<0)return lcm(a,-b); return a*(b/gcd(a,b));
}
template<class T> inline T euclide(T a, T b, T &x, T &y){
	if(a<0){T d=euclide(-a,b,x,y); x=-x; return d;}
	if(b<0){T d=euclide(a,-b,x,y); y=-y; return d;}
	if(b==0){x=1;y=0;return a;}else{T d=euclide(b,a%b,x,y);T t=x;x=y;y=t-(a/b)*y;return d;}
}

template<class T> inline bool isPrimeNumber(T n){
	if(n<=1)return false;for(T i=2;i*i<=n;i++) if(n%i==0) return false;return true;
}
template<class T> inline T eularFunction(T n){
	vector<pair<T,int> > R=factorize(n);T r=n;for (int i=0;i<R.size();i++)r=r/R[i].first*(R[i].first-1);return r;
}

//Translator
bool isUpperCase(char c){return c>='A' && c<='Z';}
bool isLowerCase(char c){return c>='a' && c<='z';}
bool isLetter(char c){return c>='A' && c<='Z' || c>='a' && c<='z';}
bool isDigit(char c){return c>='0' && c<='9';}
char toLowerCase(char c){return (isUpperCase(c))?(c+32):c;}
char toUpperCase(char c){return (isLowerCase(c))?(c-32):c;}

#define REP(i, n) for(int i = 0; i < (int)(n); i++)
#define FOR(i, s, e) for(int i = (int)(s); i < (int)(e); i++)

#define pb push_back
#define mp make_pair

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;

const double PT = acos(-1.0);
const double EPS = 1e-11;

#define MAX 22000
#define T_SIZE 4*MAX

int T[T_SIZE];
int a[MAX];

void build(int node, int i, int j){
	if(i == j) {
        T[node] = a[i];
        return;
    }
    int mid = (i + j) >> 1, lt = node << 1, rt = lt | 1;
    build(lt, i, mid);
    build(rt, mid + 1, j);
    T[node] = T[lt] & T[rt];
}

int query(int v, int l, int r, int a, int b){
	if (a==l and r==b){
		return T[v];
	}
	
	int mid = (l + r)>> 1;
	if (b <= mid)	//nothing in the left child
		return query(2*v, l, mid, a, b);
	else if (a > mid)
		return query(2*v+1, mid+1, r, a, b);
	else{
		return query(2*v, l, mid, a, mid) & \
		query(2*v+1, mid+1, r, mid+1, b);
	}
}

int main(){
	int T, N, K;
	
	scanf("%d", &T);
	while(T--){
		scanf("%d %d", &N, &K);
		REP(i, N)
			scanf("%d", &a[i]);

		K = min(K, N-1);
		build(1, 0, N-1);
		//PrintTree(N);
		REP(i, N){
			int start = (i-K + N)%N;
			int end = (i+K)%N;
			int res = -1;
			if(start<i)
				res &= query(1, 0, N-1, start, i);
			else
				res &= query(1, 0, N-1, start, N-1) & query(1, 0, N-1, 0, i);

			if(end>i)
				res &= query(1, 0, N-1, i, end);
			else
				res &= query(1, 0, N-1, i, N-1) & query(1, 0, N-1, 0, end);
			if(i)
				printf(" ");
			printf("%d", res);
		}
		printf("\n");
	}
	return 0;
}

