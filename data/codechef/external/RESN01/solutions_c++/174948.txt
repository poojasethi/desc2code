/* 
 * File:   Phony.cpp
 * Author: nikhil
 *
 * Created on 12 January, 2010, 3:45 PM
 */

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<bitset>


//Other Includes
#include<sstream>
#include<fstream>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>


using namespace std;


#define FOR(i,a,b)                              for(int i=a;i<b;i++)
#define REP(i,n)                                FOR(i,0,n)
#define pb                                      push_back
#define s(n)					scanf("%d",&n)
#define sl(n) 					scanf("%lld",&n)
#define sf(n) 					scanf("%lf",&n)
#define fill(a,v) 				memset(a, v, sizeof a)
#define sz                                      size()
#define INF                                     (int)1e9
#define EPS                                     1e-9
#define bitcount                                __builtin_popcount
#define all(x)                                  x.begin(), x.end()
#define gcd					__gcd


typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef vector<string> VS;
typedef pair<int, int > PII;

int nums[20005];
int ans[20005];
int n,k;
void solve()
{
    
    for(int i=0;i<31;i++)
    {
        for(int j=0;j<n;j++)
        {
            if((nums[j]&(1<<i))==0)
            {
                for(int p=0;p<=k;p++)
                {
                    int tmp=j-p>=0? j-p: n+j-p;
                    ans[tmp]&= ~(1<<i);
                    
                    tmp=j+p<n? j+p: j+p-n;
                    ans[tmp]&= ~(1<<i);
                }
                j+=k;
            }
        }
        
        for(int j=n-1;j>=0;j--)
        {
            if((nums[j]&(1<<i))==0)
            {
                for(int p=0;p<=k;p++)
                {
                    int tmp=j-p>=0? j-p: n+j-p;
                    ans[tmp]&= ~(1<<i);
                    
                    tmp=j+p<n? j+p: j+p-n;
                    ans[tmp]&= ~(1<<i);
                }
                j-=k;
            }
        }
    }
}
int main()
{
    int t; s(t);
    while(t--)
    {
        s(n),s(k);
        k=min(n,k);
        REP(i,n)        s(nums[i]), ans[i]=nums[i];
        solve();
        REP(i,n)        printf("%d ",ans[i]);
    }
}
