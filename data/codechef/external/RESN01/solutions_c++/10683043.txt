#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
//using namespace __gnu_pbds; //new version c++
//using namespace pb_ds;

#define PB push_back
#define MP make_pair
#define SZ size()
#define REP(i, n) for(int i = 0; i < (n); i++)
#define ITR(i, j, n) for(int i = (j); i < (n); i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Fr first
#define Sc second
#define si(a) scanf("%d", &a)
#define sl(a) scanf("%lld", &a)
#define sd(a) scanf("%lf", &a)
#define ss(a) scanf("%s", a)
#define sii(a, b) scanf("%d%d", &a, &b)
#define sll(a, b) scanf("%lld%lld", &a, &b)
#define sdd(a, b) scanf("%lf%lf", &a, &b)
#define debug(x) cout << #x << ": " << x << endl
#define Fast_IO ios_base::sync_with_stdio(0);cin.tie(0)

typedef long long Long;
typedef pair <int, int> Pii;
///<-------------------------------------------------END OF TEMPLATE-------------------------------------------------->

#define MAX 20005
int N, K, A[MAX], aux[MAX];

void process(int p) {
   int z = 0;
   REP(i, N) {
      aux[i] = A[i] & (1 << p);
      if(!aux[i]) z = 1;
   }
   if(!z) return;

   vector <Pii> vec;
   int prev = N-1;
   REP(i, N) {
      if(aux[prev] || !aux[i]) {
         prev = i;
         continue;
      }
      prev = i;
      int sz = 1;
      while(1) {
         int pp = i + sz;
         if(pp >= N) pp -= N;
         if(!aux[pp]) break;
         sz++;
      }
      vec.PB(MP(i, sz));
   }

   REP(i, vec.SZ) {
      Pii x = vec[i];
      int k = K;
      while(x.Sc > 0 && k > 0) {
         int r = x.Fr + x.Sc - 1;
         if(r >= N) r -= N;
         A[ x.Fr ] ^= (1 << p);
         if(r != x.Fr) A[ r ] ^= (1 << p);
         x.Fr++;
         if(x.Fr >= N) x.Fr -= N;
         x.Sc -= 2;
         k--;
      }
   }
}

int main() {
   int t;
   si(t);
   while(t--) {
      sii(N, K);
      REP(i, N) si(A[i]);

      REP(i, 30) process(i);
      REP(i, N) {
         if(i) printf(" ");
         printf("%d", A[i]);
      }
      puts("");
   }

   return 0;
}
