#include <stdio.h>

char *fstart; 
const int BUF = 10000000;  
char buf [BUF];
char outbuf [BUF]; 
int outat; 
 
void get_int ( int* n)	{ 
	while ( *fstart != 0 && !( '0' <= *fstart && *fstart <= '9')) 
		fstart++; 
	*n = 0; 
	while ( '0' <= *fstart && *fstart <= '9')	{ 
		*n = ( ( *n) << 3) + ( ( *n) << 1) + *fstart - '0', ++fstart; 
	} 
} 
 
void take_input ()	{ 
	int sz = fread ( buf, sizeof ( char), BUF, stdin); 
	buf [sz] = 0; 
	fstart = buf;  
	outat = 0;
}

inline void outnum ( int x) { 
  char s [100]; int at = 0, i; 
  do { s [at++] = x % 10, x /= 10; } while ( x > 0); 
  for (i = at - 1; i >= 0; --i) outbuf [outat++] = s [i] + '0';
  outbuf [outat++] = ' ';	
} 

void flushoutbuf () { 
  fwrite ( outbuf, sizeof ( char), outat, stdout); 
  outat = 0; 
} 

int arr [20000];
int ans [20000];
 
main ()	{
	take_input ();
	int T, N, K, i, j;
	get_int ( & T);
	while ( T--)	{
		get_int ( & N);
		get_int ( & K);
		for ( i = 0; i < N; i++)	{
			get_int ( & arr [i]);
		}
		if ( K > N / 2 - 1)	{
			int anz = arr [0];
			for ( i = 1; i < N; i++)	{
				anz &= arr [i];
				if ( anz == 0)
					break;
			}
			for ( i = 0; i < N; i++)
				outnum ( anz);	
		}
		else	{
			int group = 1;
			int pick_from = 1;
			int* parr = arr;
			int* pans = ans;
			while ( group * 3 <= 2 * K + 1)	{
				for ( i = 0; i < N; i++)
					pans [i] = parr [i] & parr [( i + pick_from) % N] & parr [( i - pick_from + N) % N];		
				group *= 3;
				pick_from = group;
				int * temp = parr;
				parr = pans;
				pans = temp;
			}
			if ( group != 2 * K + 1)	{
				pick_from = ( 2 * K + 1 - group) / 2;
				for ( i = 0; i < N; i++)
					pans [i] = parr [i] & parr [( i + pick_from) % N] & parr [( i - pick_from + N) % N];
				for ( i = 0; i < N; i++)
					outnum ( pans [i]);	
			}
			else	{
				for ( i = 0; i < N; i++)
					outnum ( parr [i]);
			}
		}
		outbuf [outat++] = '\n';
	}
	flushoutbuf ();
	return 0;
} 