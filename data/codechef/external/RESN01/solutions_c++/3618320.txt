#include <bits/stdc++.h>

#define ALL(c)        c.begin(), c.end()
#define TR(c, it)     for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define REP(i, j, lo) for(int (i) = (j); i >= (lo); i--)
#define MAX(a, b)     ((a) > (b) ? (a) : (b))
#define MIN(a, b)     ((a) < (b) ? (a) : (b))
#define gc            getchar_unlocked
#define pu            putchar_unlocked

#ifndef ONLINE_JUDGE
    #define gc getchar
    #define pu putchar
#endif

#define ll            long long int
#define ull           unsigned long long int
#define inf           INT_MAX
#define mininf        INT_MIN
#define pb            push_back
#define pob           pop_back
#define pf            push_front
#define pof           pop_front
#define mp            make_pair
#define PI            3.14159265358979323846264338327950288
#define endl          '\n'
#define SET(arr, val) memset(arr, val, sizeof arr)
#define SI            ( { int x; scanf("%d", &x); x; } )
#define IOSFAST       ( ios::sync_with_stdio(false); )
#define sysp          ( system("pause") )
#define MAXN           200000
inline void MAXR(int &a, int b){ if(a < b)   a = b; }

using namespace std;

template <typename T>
inline void ifast(T &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for( ; ((c < 48 || c > 57) && c != '-'); c = gc());
    if(c == '-')
    {
        neg = 1;
        c = gc();
    }
    for( ; c > 47 && c < 58 ; c = gc())
        x = (x << 1) + (x << 3) + c - 48;
    if(neg)
        x = -x;
}

int segT[4*MAXN], inp[MAXN];

void buildSegTree(int root, int beg, int end)
{
    if(beg == end)
    {
        segT[root] = inp[beg];
        return ;
    }
    int mid = (beg + end) >> 1, lc = (root << 1), rc = lc | 1;
    buildSegTree(lc, beg, mid);
    buildSegTree(rc, mid+1, end);
    segT[root] = segT[lc] & segT[rc];
}

int query(int root, int beg, int end, int ql, int qr)
{
    if(ql == beg && qr == end)
        return segT[root];
    int mid = (beg + end) >> 1, lc = (root << 1), rc = lc | 1;
    if(qr <= mid)
        return query(lc, beg, mid, ql, qr);
    else if(ql > mid)
        return query(rc, mid+1, end, ql, qr);
    else
        return ( query(lc, beg, mid, ql, mid) & query(rc, mid+1, end, mid+1, qr) );
}

int main()
{
    int t = SI;
    while(t--)
    {
        int n = SI, k = SI;
        k = MIN(n, k);
        FOR(i, 0, n)
            ifast(inp[i]);
        buildSegTree(1, 0, n-1);
        FOR(i, 0, n)
        {
            int ql = (i - k + n) % n, qr = (i + k) % n;
            int res = -1;
            if(ql < i)
                res &= query(1, 0, n-1, ql, i);
            else
                res &= query(1, 0, n-1, 0, i) & query(1, 0, n-1, ql, n-1);
            if(qr > i)
                res &= query(1, 0, n-1, i, qr);
            else
                res &= query(1, 0, n-1, i, n-1) & query(1, 0, n-1, 0, qr);
            printf("%d ", res);
        }
        puts("");
    }
    return 0;
}
