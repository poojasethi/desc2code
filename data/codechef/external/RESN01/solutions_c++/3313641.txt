/*******************karan*****************************/
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
#include<limits.h>
#include<math.h>
#include<ctype.h>
#include<algorithm>
#include<vector>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<utility> //for pair
#define S(a,x) scanf("%"#a,&x)  //#a expands to "a" we use this bcoz, arguments are not replaced within quoted strings
#define PS(a,x) printf("%"#a" ",x)  //print with space
#define PN(a,x) printf("%"#a"\n",x)  //print with newline
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define Max(a, b) ((a>b)?a:b)
#define Min(a, b) ((a>b)?b:a)
#define all(v) (v).begin() , (v).end()
#define MAXN 22000
#define MOD 1000000007
#define MBITS 30
#define TC int t; S(d,t); while(t--)
#define fill(a,v) memset(a,v,sizeof a)     //Works properly only for v = 0 or -1
#define LL long long
using namespace std;
int n, k, a[MAXN], dp[2][MAXN][MBITS];
#define gc getchar_unlocked

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

int main()
{
    int t;
    scanint(t);
    REP(zzz,t)
    {
        scanint(n); scanint(k);
        REP(i,n) scanint(a[i]);
        REP(j,MBITS)
        {
            int firstI = INT_MAX>>1, lastI=INT_MIN>>1;
            REP(i,n)
            {
                if((a[i]&(1<<j))==0)
                {
                    firstI = min(firstI, i);
                    lastI = max(lastI, i);
                }
            }

            //left to right
            if((a[0]&(1<<j))==0)
            {
                dp[0][0][j] = 0;
            }
            else
            {
                dp[0][0][j] = n-lastI; //cyclic
            }
            FOR(i,1,n)
            {
                if((a[i]&(1<<j))==0)
                {
                    dp[0][i][j] = 0;
                }
                else
                {
                    dp[0][i][j] = 1 + dp[0][i-1][j];
                }
            }

            //right to left
            if((a[n-1]&(1<<j))==0)
            {
                dp[1][n-1][j] = 0;
            }
            else
            {
                dp[1][n-1][j] = 1+firstI; //cyclic
            }
            FORD(i,n-2,0)
            {
                if((a[i]&(1<<j))==0)
                {
                    dp[1][i][j] = 0;
                }
                else
                {
                    dp[1][i][j] = 1 + dp[1][i+1][j];
                }
            }
        }
        REP(i,n)
        {
            int ans = 0;
            REP(j,MBITS)
            {
                int minv = min(dp[0][i][j], dp[1][i][j]);
                //PS(d,minv);
                if(minv>k)
                {
                    ans |= (1<<j);
                }
            }
 PS(d,ans);
           // PN(s,"");
        }
        PN(s,"");


    }
    return 0;
}
