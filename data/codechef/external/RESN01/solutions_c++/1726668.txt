#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <cctype>

#define MAXN 20005
#define MAXM 32

using namespace std;

int n , tc , k;
int a[MAXN];
int dx[] = {-1,1};

vector< bool >g( vector<bool> &v )
{
	if( v == vector<bool>(n,0) || v == vector<bool>(n,1) )
		return v;
	queue<int>Q;
	vector<int>dist(n,-1);
	for( int i = 0 ; i < n ; ++i )
		if( v[i] == 0 )
		{
			dist[i] = 0;
			Q.push(i);
		}
	while( !Q.empty() )
	{
		int node = Q.front();
		Q.pop();
		for( int k = 0 ; k < 2 ; ++k )
		{
			int nnode = (node + dx[k]+n)%n;
			if( dist[nnode] == -1 )
			{
				dist[nnode] = dist[node] + 1;
				Q.push(nnode);
			}
		}	
	}
	for( int i = 0 ; i < n ; ++i )
		if( dist[i] <= k )
			v[i] = 0;
	return v;
}
vector< int > f( vector<int> &v )
{
	vector< vector< bool > > W( MAXM , vector<bool>(n,0) );
	for( int i = 0 ; i < MAXM ; ++i )
		for( int j = 0 ; j < n ; ++j )
			if( (1<<i) & v[j] )
				W[i][j] = 1;
	for( int i = 0 ; i < MAXM ; ++i )	
		W[i] = g(W[i]);
	v = vector<int>(n,0);
	for( int i = 0 ; i < MAXM ; ++i )
		for( int j = 0 ; j < n ; ++j )
			if( W[i][j] )
				v[j] += (1<<i);
	return v;
}
int main()
{
	scanf( "%d" , &tc );
        while( tc-- )
        {
		scanf( "%d%d" , &n , &k );
	        for( int i = 0 ; i < n ; ++i )
		        scanf( "%d" , &a[i] );
		vector< int >v( a , a + n );
		vector< int >w = f(v);
		printf( "%d" , w[0] );
	        for( int i = 1 ; i < n ; ++i )
			printf( " %d" , w[i] );
		puts("");
        }
}
