#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<math.h>

using namespace std;

int list[25000];
int sgtree[100000];

void sginitilize(int node,int s, int e)
{
	if (s == e) sgtree[node] = list[s];
	else
	{
		int midpoint = (s + e) / 2;
		sginitilize(node * 2,s,midpoint);
		sginitilize(node * 2 + 1,midpoint + 1,e);
		sgtree[node] = sgtree[node * 2] & sgtree[node * 2 + 1];
	}
}

int sgquery(int node,int s,int e,int ts,int te)
{
	int midpoint = (s + e) / 2;
	if (s == ts && e == te) return sgtree[node];
	else if (ts <= midpoint && te <= midpoint) return sgquery(node * 2,s,midpoint,ts,te);
	else if (ts > midpoint && te > midpoint) return sgquery(node * 2 + 1,midpoint + 1,e,ts,te);
	else if (ts <= midpoint && te > midpoint) return sgquery(node * 2,s,midpoint,ts,midpoint) & 
												sgquery(node * 2 + 1,midpoint + 1,e,midpoint + 1,te);
}

int main()
{
	//freopen("in.in","r",stdin);
	int n;
	scanf("%d",&n);
	while(n --){
		int m,k;
		scanf("%d %d",&m,&k);
		k = min(k,m / 2 + 1);
		for(int i = 0; i < m;i++){
			scanf("%d",&list[i]);
		}
		sginitilize(1,0,m - 1);
		for(int i = 0; i < m;i++){
			int newval = list[i];
			newval &= sgquery(1,0,m - 1,i ,min(i + k,m - 1));
			if (i + k > m - 1) newval &= sgquery(1,0,m-1,0,k - (m - i));
			newval &= sgquery(1,0,m-1,max(0,i - k),i);
			if (i - k < 0) newval &= sgquery(1,0,m-1, m - (k - i),m - 1);
			list[i] = newval;
		}
		for(int i = 0; i < m;i++){
			if (i != 0 ) printf(" ");
			printf("%d",list[i]);
		}
		printf("\n");
	}
	//while(true);
}
