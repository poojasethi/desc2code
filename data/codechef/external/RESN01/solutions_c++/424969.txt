
// Author: Mahesh
#include <vector>
#include <string>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <ctype.h>
#include <bitset>
 
using namespace std;
 
#define REP(i, n) for(int i=0; i<(n); i++)
#define FOR(i, a, b) for(int i=(a); i<(b); i++)
#define IFOR(i, a, b) for(int i=(a); i>=(b); i--)
#define FORD(i, a, b, c) for(int i=(a); i<(b); i+=(c))
 
#define SS ({int x;scanf("%d", &x);x;})
#define SI(x) ((int)x.size())
#define PB(x) push_back(x)
#define MP(a,b) make_pair(a, b)
#define SORT(a) sort(a.begin(),a.end())
#define ITER(it,a) for(typeof(a.begin()) it = a.begin(); it!=a.end(); it++)
#define ALL(a) a.begin(),a.end()
#define INF 1000000000
#define V vector
#define S string
#define FST first
#define SEC second
typedef V<int> VI;
typedef V<S> VS;
typedef long long LL;
typedef pair<int, int> PII;
 
 
int tt[1000000];
int a[20005];
void build(int node, int aa, int bb){
	if(aa==bb){
		tt[node] = a[aa];
		return;
	}
	int mid = (aa+bb)/2;
	build(2*node, aa, mid);
	build(2*node+1, mid+1, bb);
	tt[node] = tt[2*node]&tt[2*node+1];
}
 
 
int query(int node, int aa, int bb, int i, int j){
	if(i==aa && j==bb){
		return tt[node];
	}
	int mid = (aa+bb)/2;
	if(i>mid){
		return query(2*node+1, mid+1, bb, i, j);
	}
	else if(j<=mid){
		return query(2*node, aa, mid, i, j);
	}
	else{
		return query(2*node, aa, mid, i, mid)&query(2*node+1, mid+1, bb, mid+1, j);
	}
}
 
 
 
  
 
 
int main()
{
	int t=SS;
	while(t--){
		int n=SS, k=SS;
		int ta=~0;
		REP(i, n){
			a[i]=SS;
			ta&=a[i];
		}
 
		if(1+2*k>=n){
			REP(i, n) printf("%d ", ta);
			putchar('\n');
			continue;
		}
		build(1, 0, n-1);
		REP(i, n){
			int aa = i-k, bb=i+k;
			if(aa>=0 && bb<n){
				printf("%d ", query(1, 0, n-1, aa, bb));
			}
			else if(bb>=n){
				printf("%d ", query(1, 0, n-1, aa, n-1)&query(1, 0, n-1, 0, bb%n) );
			}
			else{
				printf("%d ", query(1, 0, n-1, 0, bb)&query(1, 0, n-1, aa+n, n-1) );
			}
		}
		putchar('\n');
	}
	return 0;
}
 
