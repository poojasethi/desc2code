#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <sstream>
#include <cmath>
#include <map>
#include <utility>
#include <queue>
#include <algorithm>

using namespace std;

#define MAXN 20005

int t, n, k;
int A[MAXN];
int dx[] = {1,-1};

struct node{
	int ind, dist;
	node(){}
	node( int _ind, int _dist ){ ind = _ind; dist = _dist; }
};

vector < bool > fn( vector < bool > &V , int n)
{
	if( V == vector < bool > (n,0) || V == vector < bool > (n,1) ) return V;
	queue < node > Q;
	for(int i = 0; i < n ; i++)
		if( !V[i] ) Q.push( node(i,0) );
	while( !Q.empty() )
	{
		node q = Q.front(); Q.pop();
		for(int i = 0; i <  2 ; i++)
		{
			int nind = (q.ind + dx[i]+n)%n;
			if( q.dist < k && V[nind] ){
				V[nind] = 0;
				Q.push( node(nind,q.dist+1) );
			}
		}
	}
	
	return V;
}

int main()
{
	scanf("%d",&t);
	while( t-- )
	{
		scanf("%d %d",&n,&k);
		for(int i = 0; i < n ; i++)
			scanf("%d",&A[i]);
		vector < vector < bool > >M(32, vector < bool > (n,0) );
		for(int bit = 0; bit < 32 ; bit++)
			for(int i = 0; i < n ; i++)
				if( A[i]&(1<<bit) ) M[bit][i] = 1;
		for(int bit = 0; bit < 32; bit++)
			M[bit] = fn(M[bit],n);
		for(int i = 0; i < n; i++)
		{
			A[i] = 0;
			for(int bit = 0 ; bit < 32 ; bit++ )
				if( M[bit][i] ) A[i] += (1<<bit);
		}
		printf("%d",A[0]);
		for(int i = 1; i < n; i++)
			printf(" %d",A[i]);
		printf("\n");
	}
	
	return 0;
}
