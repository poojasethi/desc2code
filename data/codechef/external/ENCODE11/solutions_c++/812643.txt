#include <math.h>

#include <stdio.h>

#include <iostream>

#include <set>

#include <vector>

#include <algorithm>

typedef long long int64;



using namespace std;





int64 list_viruses[100];

pair<int64, int64> tree[4 * 1010];

int N, Q, last_num;

int64 L, X, Y, V, R, total_sum;

bool found;

vector<int64>::iterator ite;



void update(int nod, int lo, int hi, int slo, int shi, int64 value) {

	int tmpL, tmpR;

	if (lo > shi || hi < slo)

		return;

	tmpL = max(slo, lo);

	tmpR = min(shi, hi);

	tree[nod].first += (tmpR - tmpL + 1) * value;

	if (slo <= lo && hi <= shi) {

		tree[nod].second += value;

		return;

	}

	int mid = (lo + hi) >> 1;

	update(2 * nod + 1, lo, mid, slo, shi, value);

	update(2 * nod + 2, mid + 1, hi, slo, shi, value);

}



int64 query(int nod, int lo, int hi, int64 to_add, int64 sum) {

	int64 interval_sum = tree[nod].first + (hi - lo + 1) * to_add, right, left;

	if (last_num != -1)

		return 0;

	if (interval_sum + sum == total_sum || (lo == hi && interval_sum + sum > total_sum)) {

		last_num = hi;

		return 0;

	}

	int mid = (hi + lo) >> 1;

	if (interval_sum + sum < total_sum)

		return interval_sum + sum;

	right = query(2 * nod + 1, lo, mid, tree[nod].second + to_add, sum);

	left = query(2 * nod + 2, mid + 1, hi, tree[nod].second + to_add, right);

	return 0;

}



int binary_search(int num, bool first) {

	int lo = 0, mid, hi = N - 1;

	if (list_viruses[lo] == num) {

		found = true;

		return lo;

	}

	if (list_viruses[hi] <= num) {

		found = true;

		return hi;

	}

	while (lo + 1 < hi) {

		mid = (hi + lo - 1) >> 1;

		if (list_viruses[mid] < num)

			lo = mid + 1;

		else

			hi = mid + 1;

	}

	if(list_viruses[lo] > num && !first)

		lo--;

	else if (list_viruses[lo] < num && first)

		lo++;

	return lo;

}



int main() {

	scanf("%d", &N);

	for (int i = 0; i < N; ++i)

		scanf("%lld", &list_viruses[i]);

	sort(list_viruses, list_viruses + N);

	scanf("%lld%d", &L, &Q);

	while (Q--) {

		found = false;

		scanf("%lld%lld%lld%lld", &X, &Y, &V, &R);

		int start = binary_search(X, true);

		int end = binary_search(Y, false);

		if(start < end || (start == end && list_viruses[start] >= X && list_viruses[end] <= Y))

			update(0, 0, N - 1, start, end, V);

		last_num = -1;

		total_sum = R;

		query(0, 0, N - 1, (!L) ? 1 : L, 0);

		if (last_num == -1)

			last_num = N - 1;

		printf("%lld\n", list_viruses[last_num]);

	}

	return 0;

}