#include<stdio.h>
#include<list>

using namespace std;

int n,L,q,temp,i,x,y,v,r,j,k;
int virlist[100000];
void qsort(int a[],int l,int r);
void swap(int &a,int &b);
int part(int a[],int l,int r);
int binsearch(int num);
list<int> virus;
list<int>::iterator it;

int main()
{
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
         scanf("%d",&temp);
         virlist[i]=temp;
         virus.push_back(temp);
    }
    qsort(virlist,0,n-1);
    scanf("%d %d",&L,&q);
    for(i=1;i<L;i++)
    {
          for(j=0;j<n;j++)
          {              
              virus.push_back(virlist[j]);
          }
    }
    for(i=1;i<=q;i++)
    {
          scanf("%d %d %d %d",&x,&y,&v,&r);
          for(j=x;j<=y;j++)
          {
               if(binsearch(j)!=-1)
               {
                     for(k=1;k<=v;k++)
                     {
                           virus.push_back(j);
                     }
               }
          }
          virus.sort();
          it=virus.begin();
          for(k=1;k<r;k++){it++;}
          printf("%d\n",*it);
    }
   
}

void qsort(int a[],int l,int r)
{
	if (l<r)
	{
		int pivot=part(a,l,r);
		qsort(a,l,pivot-1);
		qsort(a,pivot+1,r);
	}
}

int part(int a[],int l,int r)
{
    int pivot=a[l];    
    while(l<r)
    {           
       while(pivot<=a[r] && l<=r){r--;}       
       if(l<r)
       {
           swap(a[l],a[r]);
       }
       while(a[l]<pivot && l<=r){l++;}
       if(l<r)
       {
           swap(a[l],a[r]);
       }
    }    
    return l;
}

void swap(int &a,int &b)
{
     a=a+b;
     b=a-b;
     a=a-b;
}

int binsearch(int num)
{
    int loc=-1,l=0,u=n-1,found=0,mid;
    while(found==0)
    {
            mid=(l+u)/2;
            if( virlist[mid]>num ){
                 u=mid ;
                 if(l==u && virlist[l]!=num){found=2;}
            }
            else if ( virlist[mid]<num ){
                 l=mid + 1 ;
                 if(l==u && virlist[l]!=num){found=2;}
            }
            else if ( virlist[mid]==num ){
                 loc=mid;
                 found=1;
            }
    }
    return loc;
}
     
