#include<bits/stdc++.h>
#define pb(x) push_back(x)
#define mp(i,j) make_pair(i,j)
#define ll long long 
int lolol;
#define S(x) lolol=scanf("%l64d", &x)
#define s(x) lolol=scanf("%d", &x)
#define getchar_unlocked getchar
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
int main(){
    ll n,m;
    n=scan(); m=scan();
    vector<pair<ll,ll> > a[n+1];
    while(m--){
        ll x,y,z;
        x=scan(); y=scan(); z=scan();
        a[x].pb(mp(y,2*z));
        a[y].pb(mp(x,2*z));
    }
    vector<ll> pol;
    ll k; k=scan();
    for(int i=0; i<k; i++){
        ll x; x=scan();
        pol.pb(x);
    }
    ll p; 
    p=scan();
    vector<ll> boost;
    for(int i=0; i<p; i++){
        ll x; x=scan();
        boost.pb(x);
    }
    ll st,en; st=scan(); en=scan();
    ll dist[n+1]; memset(dist,-1,sizeof dist);
    priority_queue<pair<ll,ll> > q;
    q.push(mp(0,en));
    dist[en]=0;
    while(!q.empty()){
        ll node=q.top().second;
        q.pop();
        ll sz=a[node].size();
        for(int i=0; i<sz; i++){
            ll nbr=a[node][i].first;
            ll wt=a[node][i].second;
            if(dist[nbr]==-1 || dist[nbr]>dist[node]+wt){
                dist[nbr]=dist[node]+wt;
                q.push(mp(-dist[nbr],nbr));
            }
        }
    }
    ll dist_thief=dist[st];
    if(dist_thief==-1){
        cout<<-1;
        return 0;
    }
    for(int i=0; i<k; i++){
        if(dist[pol[i]]>=0){
            if(dist[pol[i]]<=dist[st]){
                cout<<-1<<endl;
                return 0;
            }
        }
    }
    for(int i=0; i<p; i++){
        if(dist[boost[i]]>=0){
            a[boost[i]].pb(mp(en,dist[boost[i]]/2));
            a[en].pb(mp(boost[i],dist[boost[i]]/2));
        }
    }
    memset(dist,-1,sizeof(dist));
    dist[en]=0;
    q.push(mp(0,en));
    while(!q.empty()){
        ll node=q.top().second;
        q.pop();
        ll sz=a[node].size();
        for(int i=0; i<sz; i++){
            ll nbr=a[node][i].first;
            ll wt=a[node][i].second;
            if(dist[nbr]==-1 || dist[nbr]>dist[node]+wt){
                dist[nbr]=dist[node]+wt;
                q.push(mp(-dist[nbr],nbr));
            }
        }
    }
    for(int i=0; i<k; i++){
        if(dist[pol[i]]<=(dist_thief)){
            cout<<-1;
            return 0;
        }
    }
    cout<<(dist_thief/2);
    
}