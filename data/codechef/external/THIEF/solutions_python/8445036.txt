#include<bits/stdc++.h>
using namespace std;
#define getchar_unlocked getchar
#define pb push_back
#define mp make_pair
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
typedef long long ll;
vector<pair<int,ll> > v[100001];
priority_queue<pair<ll,int > > q;
ll d[100001];
bool check[100001]={0};
double dist[100001];
priority_queue<pair<double,int> > Q;
ll thef[100001];
int main(){
    int n=scan(),m=scan();
    for(int i=0;i<n;i++){
        d[i]=9999999999999999LL;
        dist[i]=9999999999999999LL;
        thef[i]=9999999999999999LL;
    }
    while(m--){
        int a=scan(),b=scan(),w=scan();
        v[a].pb(mp(b,w));
        v[b].pb(mp(a,w));
    }
    int qe=scan();
    while(qe--){
        int node=scan();
        d[node]=0;
        q.push(mp(0,node));
    }
    qe=scan();
    while(qe--){
        int node=scan();
        check[node]=1;
    }
    while(!q.empty()){
        int node=q.top().second;
        q.pop();
        int x=v[node].size();
        for(int i=0;i<x;i++){
            int next=v[node][i].first;
            ll weight=v[node][i].second;
            if(d[next]>d[node]+weight){
                d[next]=d[node]+weight;
                q.push(mp(-d[next],next));
            }
        }
    }
    while(!Q.empty())Q.pop();
    for(int i=0;i<n;i++){
        if(check[i]){
            double X = d[i];
            dist[i]=X;
            Q.push(mp(-X,i));
        }
    }
    while(!Q.empty()){
        int node=Q.top().second;
        Q.pop();
        int x=v[node].size();
        for(int i=0;i<x;i++){
            int next=v[node][i].first;
            double weight=v[node][i].second;
            weight/=2;
            if(dist[next]>dist[node]+weight){
                dist[next]=dist[node]+weight;
                Q.push(mp(-dist[next],next));
            }
        }
    }
    int s=scan(),t=scan();
    thef[s]=0;
    q.push(mp(0,s));
    while(!q.empty()){
        int node=q.top().second;
        q.pop();
        int x=v[node].size();
        for(int i=0;i<x;i++){
            int next=v[node][i].first;
            ll weight=v[node][i].second;
            if(thef[next]>thef[node]+weight){
                thef[next]=thef[node]+weight;
                q.push(mp(-thef[next],next));
            }
        }
    }
    if((double)thef[t]>=min(dist[t],(double)d[t])){
        printf("-1");
    }
    else if(thef[t]==9999999999999999LL){
        printf("-1");
    }
    else{
        cout<<thef[t]<<" ";
    }
}
