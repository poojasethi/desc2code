#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <cstring>
#include <cmath>
#include <climits>
#include <algorithm>
#include <cstdio>
using namespace std;

typedef unsigned long long ULL;
typedef long long LL;

#define REP(i,n)      FOR(i,0,n)
#define FOR(i,a,b)    for(int i = a; i < b; i++)
#define ROF(i,a,b)    for(int i=a;i>b;i--)
#define GI 		      ({int t;scanf("%d",&t);t;})
#define GL 		      ({LL t;scanf("%lld",&t);t;})
#define GD 		      ({double t;scanf("%lf",&t);t;})
#define pb 	          push_back
#define mp 	          make_pair
#define INF	          (int)1e9
#define EPS	          1e-9
#define TR(a,it)      for (typeof((a).begin()) it = (a).begin(); it != (a).end(); ++it)

const ULL MOD = 10000000000283ull;
int fi(int n)
{
    int result = n;
    for (int i=2; i*i <= n; i++) {
        if (n % i == 0) {
             while (n % i == 0)
                     n /= i;
             result -= result / i;
        }
    }
    if (n > 1)
       result -= result / n;
    return result;
}

ULL multiply(ULL b, ULL p)
{
    if (b >= MOD)   b %= MOD;

    ULL ans = 0;
    while (p) {
        if (p & 1) {
            ans = (ans + b);
            if (ans >= MOD)
                ans -= MOD;
        }
        b = (b + b);
        if (b >= MOD)
            b -= MOD;
        p >>= 1;
    }
    return ans;
}

ULL powermod_iterative(ULL b, ULL p)
{
    if (b > MOD)    b %= MOD;

    ULL ans = 1;
    while (p) {
	    if (p & 1)
		   ans = multiply(ans, b);
        b = multiply(b, b);
		p >>= 1;
	}
	return ans;
}

int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int T, t = 0, N, K;

	scanf("%d", &T);
	while (T--) {
        scanf("%d %d", &N, &K);

        if (N == 1) {
            printf("%d\n", K);
            continue;
        }
        ULL ans = powermod_iterative(N, K);
        ULL inverse = powermod_iterative(N-1, MOD - 2);

        ULL term1 = multiply(ans, inverse);
        ULL phi = fi(N);
        term1 = multiply(term1, phi);
        ULL term2 = multiply(inverse, phi);

        printf("%llu\n", (term1 - term2 + MOD) % MOD);
	}
	return 0;
}
