//      @author anks

#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) ((S&two(X))>0)
#define containL(S,X) ((S&twoL(X))>0)
#define debug(args...) dbg(),args
typedef pair<int,int> ipair;
int countbit(int n) {return (n==0)?0:(1+countbit(n&(n-1)));}
int lowbit(int n) {return (n^(n-1))&n;}
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> T sqr(T x) {return x*x;}
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N)
#define SS(N) scanf("%s", N)
#define SIZE(X) ((int)((X).size()))
#define LEN(X) ((int)((X).length()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;++A)
#define EFOR(A,B,C) for(int A=B;A<=C;++A)
#define RFOR(A,B,C) for(int A=B;A>=C;--A)
#define FORL(A,B,C) for(ll A=B;A<C;++A)
#define EFORL(A,B,C) for(ll A=B;A<=C;++A)
#define RFORL(A,B,C) for(ll A=B;A>=C;--A)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX(A,B) (A > B) ? A : B
#define MIN(A,B) (A < B) ? A : B
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define PRN(A, N) if (DBG) { FOR(j, 0, N) cout << A[j] << " " ; cout << endl;}
#define PR2N(A, M, N) FOR(i, 0, M) { PRN(A[i], N) }
#define PR(A) PRN(A, sizeof(A)/sizeof(A[0]))
#define PR2(A) FOR(i, 0, sizeof(A)/sizeof(A[0])) { PR(A[i]) }
#define MAXLIM 100000
#define MOD 10000000000283LL
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

ll phi(ll n){ 
	ll result=1; 

	if(!(n%2)){ 
		n/=2; 
		while(!(n%2)){ 
			n/=2; 
			result*=2; 
		} 
	} 

	for(ll k=3;k*k<=n;k+=2){ 
		if(!(n%k)){ 
			n/=k; 
			result*=k-1; 
			while(!(n%k)){ 
				n/=k; 
				result*=k; 
			} 
		} 
	} 
	if(n>1) 
		result*=n-1; 

	return result; 
}

ll mulmod(ll a, ll b, ll c){
    ll x = 0, y=a%c;
    while(b){
		x = (x + (b%10)*y)%c;		
        y = (y*10)%c;
        b /= 10;
    }
    return x;
}

ll modexponent(ll base, ll exponent, ll mod) {
	ll result = 1;
	
	while (exponent > 0) {
		if ((exponent & 1) == 1)
			result = mulmod(result, base, mod);
		exponent = exponent >> 1;
		base = mulmod(base, base, mod);		
	}	
	
	return result;
} 

ll egcd(ll a, ll b, ll &x, ll &y) {
    if (a==0){
        x=0;
        y=1;
        return b;
    }
    ll x1, y1;
    ll d = egcd(b%a, a, x1, y1);
    x = y1 - (b / a) * x1;
	y = x1;	
	return d;
    
}

int main (int argc, char *argv[]) {
	DBGCHECK;
	
	int t;
	S(t);
	
	while (t-- > 0) {
		int n, k;
		ll sum = 0, val1, val2;
		S(n); S(k);
		if (n == 1)
			sum = k;
		else {
			ll x, y;
			egcd(n - 1, MOD, x, y);
			if (x < 0) x += MOD;
			val1 = mulmod(phi(n), x, MOD); val2 = modexponent(n, k, MOD) - 1;
			sum = mulmod(val1, val2, MOD);			
		}
		printf("%lld\n", sum);
	}
	
	return 0;	
}
