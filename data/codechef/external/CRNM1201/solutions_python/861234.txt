// author [V]ict0r
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
#include<assert.h>
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
#define debug(args...) dbg(),args
const double pi=acos(-1.0);
const double eps=1e-11;
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N) 
#define SC(N) scanf("%c", &N) 
#define SS(N) scanf("%s", N) 
#define SIZE(X) ((int)((X).size()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define FORL(A,B,C) for(ll A=B;A<C;A++)
#define EFORL(A,B,C) for(ll A=B;A<=C;A++)
#define RFORL(A,B,C) for(ll A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX(A,B) ((A > B) ? A : B)
#define MIN(A,B) ((A < B) ? A : B)
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define MOD 10000000000283LL
#define LIM 1000002 
#define INF 10000
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

ll totient(int t){
  ll ans = t,n = t;
  EFOR(i,2,sqrt(t))
    if (n % i == 0){
		ans = (ans*(i - 1))/i;
      while (n % i == 0)
		n /= i;
    }
   if (n > 1)
		ans = (ans*(n - 1))/n;
  debug("totient",t,ans);	
  return ans;
}

ll modmul(ll a,ll b){
	ll sum = a,ans = 0;
	if(sum >= MOD)
		sum = sum%MOD;
	while(b)
	{
		if(b & 1)
			ans = (ans + sum)%MOD;	
		b >>= 1;
		sum = (sum << 1)%MOD;
	}
	return ans;
}

ll powmod(ll x,ll e){
    ll ans=1,b=x;
    while(e)
    {
        if(e&1)
            ans = modmul(ans,b);
        b = modmul(b,b);
        e>>=1;
    }
    return ans;
}

int main(int argc,char* argv[]){
	DBGCHECK;
	int t;
	S(t);
	while(t-- > 0){
		int n,k;
		ll ans;
		scanf("%d %d",&n,&k);
		if(n == 1)
			ans = k;
		else{
			ll tot = totient(n);
			ans = powmod(n,k) - 1;
			debug(ans);
			ans = modmul(ans,powmod(n-1,MOD-2));
			ans = modmul(ans,tot);
		}
		printf("%lld\n",ans);
	}
}
