#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>

using namespace std;

#define MAX_A 100000
#define MAX_B 1000

int A[MAX_A+5], B[MAX_B+5];
int counts[MAX_B+5], done[MAX_B+5];

int contains( int val, int NB ){
	int low = 0, high = NB - 1, mid;
	while( low <= high ){
		mid = (low + high)/2;
		if( B[mid] == val )
			return mid;
		if( B[mid] > val )
			high = mid - 1;
		else
			low = mid + 1;
	}
	return -1;
}

void performtest(){
	int NA, NB, i, j;
	
	//Initialize
	scanf( "%d", &NA );
	for( i=0; i<NA; i++ )
		scanf( "%d", A + i );
	scanf( "%d", &NB );
	for( j=0; j<NB; j++ )
		scanf( "%d", B + j );
	
	memset( done, false, sizeof( done ) );
	memset( counts, 0, sizeof( counts ) );
	
	sort( B, B + NB );
	
	for( i=0; i<NA; i++ )
		A[i] = contains( A[i], NB );
	
	long long result = 0;
	int pre = -1, total = 0;
	for( i=0; i<NA; i++ )
		if( A[i] >= 0 ){
			counts[ A[i] ]++;
			if( !done[ A[i] ] ){
				done[ A[i] ] = true;
				total++;
			}
			if( total == NB )
				break;
		}
	
	if( total < NB ){
		printf( "0\n" );
		return;
	}
	
	for( j=0; j<NA; j++ )
		if( A[j] >= 0 ){
			if( counts[ A[j] ] > 1 )
				counts[ A[j] ]--;
			else
				break;
		}
	result = (long long)( j - pre )*(long long)( NA - i );
	pre = j;
	
	for( i=i+1; i<NA; i++ )
		if( A[i] >= 0 ){
			counts[ A[i] ]++;
			for( j=pre; j<NA; j++ )
				if( A[j] >= 0 ){
					if( counts[ A[j] ] > 1 )
						counts[ A[j] ]--;
					else
						break;
				}
			result += (long long)( j - pre )*(long long)( NA - i );
			pre = j;
		}
	printf( "%lld\n", result );
}

int main(){
	int tests;
	scanf( "%d", &tests );
	while( tests-- )
		performtest();
	return 0;
}