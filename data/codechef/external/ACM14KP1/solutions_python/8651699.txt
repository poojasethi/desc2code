
#include <iostream>
#include <stdio.h>
#include <tuple>
#include <vector>
#include <cmath>
#include <algorithm>
#include <time.h>
#include <iomanip>


using namespace std;

double dist(double x1, double y1, double x2, double y2)
{
    double res=sqrt( (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) );
    return res;
}

struct sort_pred_second {
    bool operator()(const pair<int,double> &left, const pair<int,double> &right){
        return left.second<right.second;
    }
};


int main()
{
    //freopen("input.txt","r",stdin);

    int test, k=0;
    cin>>test;
    double results[test];

    while(test>0)
    {

        int n;
        cin>>n;

        vector< pair<double,double> > points(n);
        double x,y;

        for(int i=0;i<n;i++)
        {
            cin>>x>>y;
            points[i]=pair<double,double>(x,y);
        }

        double infx=0, infy=1000000;
        vector< pair<int,double> > distances(n);

        double d;
        for(int i=0;i<n;i++)
        {
            d=dist(infx,infy,points[i].first,points[i].second);
            distances[i]=pair<int,double>(i,d);
        }

        sort(distances.begin(),distances.end(),sort_pred_second());
        //cout<<"done till here!!"<<endl;


        double mini=-1,tmp;
        int pos1,pos2,pos3;
        int ans1,ans2,ans3;

        if(n>10)
        {
            for(int i=9;i<n;i++)
            {
                pos1=distances[i].first;
                for(int j=i-1;j>=i-9 && j>=0;j--)
                {
                    pos2=distances[j].first;
                    for(int k=j-1;k>=j-9 && k>=0;k--)
                    {
                        pos3=distances[k].first;

                        tmp=dist(points[pos1].first,points[pos1].second,points[pos2].first,points[pos2].second) +
                            dist(points[pos2].first,points[pos2].second,points[pos3].first,points[pos3].second) +
                            dist(points[pos3].first,points[pos3].second,points[pos1].first,points[pos1].second);

                        if(mini==-1)
                        {
                            mini=tmp;
                            ans1=pos1;
                            ans2=pos2;
                            ans3=pos3;
                        }
                        else if(tmp<mini)
                        {
                            mini=tmp;
                            ans1=pos1;
                            ans2=pos2;
                            ans3=pos3;
                        }
            }}}
        }
        else
        {
            pair<double,double> p,q,r;
            for(int i=0;i<n-2;i++)
            {
                p=points[i];
                for(int j=i+1;j<n-1;j++)
                {
                    q=points[j];
                    for(int k=j+1;k<n;k++)
                    {
                        r=points[k];
                        tmp=dist(p.first,p.second,q.first,q.second)+dist(q.first,q.second,r.first,r.second)
                            +dist(r.first,r.second,p.first,p.second);
                        if(mini==-1)
                            mini=tmp;
                        else if(tmp<mini)
                            mini=tmp;
            }}}
        }

        results[k++]=mini;
        test-=1;
    }

    cout.precision(10);
    for(int i=0;i<k;i++)
    {
        cout<<"Case "<<i+1<<": "<<results[i]<<endl;
    }
    cout.precision(3);

    //fclose(stdin);
    return 0;
}
