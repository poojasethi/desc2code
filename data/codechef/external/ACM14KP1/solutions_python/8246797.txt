//Created By Mayur Agarwal :)

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include<iostream>
#include<stdio.h>
#include<cmath>
#include<float.h>
#include<stdlib.h>
#include <vector>
#include <string>
#include<cstring>
#include <set>
#include <algorithm>
#include<map>
#include<iterator>
#include<functional>
#include<stack>
#include<queue>

#define ll long long 
/*#define in(a) scanf("%lld",&a)
#define inc(a) scanf("%c",&a)
#define ins(a) scanf("%s", &a)
#define pr(a) printf("%lld\n",a)
#define prc(a) printf("%c",a)
#define prs(a) printf("%s\n",a)*/
#define fori(I,N) for(ll I=0;I<N;I++)
#define forin(i,n) for(ll I=1;I<=N;I++)
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define ALL(X) (X).begin(), (X).end()
#define pi   acos(-1.0)
#define mod 1000000007
#define SIZE 100010

using namespace std;
//typedef pair<ll, ll>pll;

/*double distanc(point a, point b,point c)
{
	double dist;

	dist = sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y)) + sqrt((c.x - b.x)*(c.x - b.x) + (c.y - b.y)*(c.y - b.y)) + sqrt((a.x - c.x)*(a.x - c.x) + (a.y - c.y)*(a.y - c.y));

	return dist;
}
*/
struct Point
{
	double x, y;
};

Point strip[SIZE];
Point P[SIZE];

int compareX(const void* a, const void* b)
{
	Point *p1 = (Point *)a, *p2 = (Point *)b;
	return (p1->x - p2->x);
}

int compareY(const void* a, const void* b)
{
	Point *p1 = (Point *)a, *p2 = (Point *)b;
	return (p1->y - p2->y);
}


double distance(Point a, Point b,Point c)
{
	return sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y)) + sqrt((c.x - b.x)*(c.x - b.x) + (c.y - b.y)*(c.y - b.y)) + sqrt((a.x - c.x)*(a.x - c.x) + (a.y - c.y)*(a.y - c.y));

}


double bruteForce(Point P[], int n)
{
	double min = FLT_MAX;
	{
		for (int i = 0; i < n; ++i)
		{
			for (int j = i + 1; j < n; ++j)
			{
				for (ll k = j + 1; k < n; ++k)
				{
					if (distance(P[i], P[j],P[k]) < min)
						min = distance(P[i], P[j],P[k]);
				}
			}
		}
	}
	return min;
}


double min(double x, double y)
{
	return (x < y) ? x : y;
}


double stripClosest(Point strip[], int size, double d)
{
	double min = d;  

	qsort(strip, size, sizeof(Point), compareY);

	for (int i = 0; i < size; ++i)
	{
		for (int j = i + 1; j < size && (strip[j].y - strip[i].y) < min; ++j)
		{
			for (ll k = j + 1; k < size && (strip[k].y - strip[j].y - strip[i].y) < min; ++k)
			{
				if (distance(strip[i], strip[j], strip[k]) < min)
					min = distance(strip[i], strip[j], strip[k]);
			}
		}
	}
	return min;
}


double closestUtil(Point P[], int n)
{
	
	if (n <= 3)
		return bruteForce(P, n);

	
	int mid = n / 2;
	Point midPoint = P[mid];


	double dl = closestUtil(P, mid);
	double dr = closestUtil(P + mid, n - mid);

	double d = min(dl, dr);

	
	int j = 0;
	for (int i = 0; i < n; i++)
	{
		if (abs(P[i].x - midPoint.x) < d)
			strip[j] = P[i], j++;

	}
	return min(d, stripClosest(strip, j, d));
}


double closest(Point P[], int n)
{
	qsort(P, n, sizeof(Point), compareX);
	return closestUtil(P, n);
}

int main()
{
	ll t;
	cin >> t;
	for (ll xx = 1; xx <= t;xx++)
	{
		ll n;
		cin >> n;
		double a, b;
		for (ll i = 0; i < n; i++)
		{
			cin >> a >> b;
			P[i].x = a;
			P[i].y = b;
		}
		printf("Case %lld: %.10lf\n", xx,closest(P, n));
	}
	//system("pause");
	return 0;
}