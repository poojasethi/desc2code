//  Created by shikhar vishnoi

#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <math.h>
#include <limits>
#include <cmath>
#include <iomanip>

using namespace std;

struct point
{
    double x,y;
};

point q[100010];

bool comp_x (point p1,point p2)
{
    return p1.x<p2.x;
}
bool comp_y (point p1,point p2)
{
    return p1.y<p2.y;
}

double distance (point p1,point p2,point p3)
{
    return sqrt(((p1.x-p2.x)*(p1.x-p2.x))+((p1.y-p2.y)*(p1.y-p2.y)))+sqrt(((p1.x-p3.x)*(p1.x-p3.x))+((p1.y-p3.y)*(p1.y-p3.y)))+sqrt(((p3.x-p2.x)*(p3.x-p2.x))+((p3.y-p2.y)*(p3.y-p2.y)));
}

double middle (point p[],int size,double z)
{
    double minimum=z;
    sort(p, p+size, comp_y);
    for (int i=0; i<size-2; i++)
    {
        for (int j=i+1; j<size-1 ; j++)
        {
            for (int k=j+1; k<size && p[k].y-p[i].y<z; k++)
            {
                
                if (distance(p[i],p[j],p[k])<minimum)
                {
                    minimum=distance(p[i],p[j],p[k]);
                }
            }
        }
    }
    return minimum;
}

double closest (point p[],int size)
{
    double minimum=std::numeric_limits<double>::infinity();
    sort(p, p+size, comp_x);
    if (size<=5)
    {
        for (int i=0; i<size-2; i++)
        {
            for (int j=i+1; j<size-1; j++)
            {
                for (int k=j+1; k<size; k++)
                {
                    
                    if (distance(p[i],p[j],p[k])<minimum)
                    {
                        minimum=distance(p[i],p[j],p[k]);
                    }
                }
            }
        }
        return minimum;
    }
    minimum=min(closest(p,size/2),closest(p+size/2,(size-(size/2))));
    point strip[size+10];
    double mid=p[size/2].x;
    int j=0;
    for (int i=0; i<size; i++)
    {
        if (abs(p[i].x-mid)<minimum)
        {
            strip[j]=p[i];
            j++;
        }
    }
    minimum=min(minimum,middle(strip, j, minimum));
    return minimum;
}

int main()
{
    ios_base::sync_with_stdio(false);
    int t;
    cin>>t;
    for (int tc=1; tc<=t; tc++)
    {
        int n;
        cin>>n;
        for (int i=0; i<n; i++)
        {
            cin>>q[i].x>>q[i].y;
        }
        cout<<"Case "<<tc<<": ";
        std::cout << std::setprecision(15) <<closest(q, n)<<endl;
    }
    return 0;
}