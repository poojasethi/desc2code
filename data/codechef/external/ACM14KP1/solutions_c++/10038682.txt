#include<bits/stdc++.h>
using namespace std;
# define d double 
# define l long int
struct Point{
	d x;
	d y;
};
int compareX(const void* a, const void* b)
{
    Point *p1 = (Point *)a,  *p2 = (Point *)b;
    return (p1->x - p2->x);
}
// Needed to sort array of points according to Y coordinate
int compareY(const void* a, const void* b)
{
    Point *p1 = (Point *)a,   *p2 = (Point *)b;
    return (p1->y - p2->y);
}
d dist(Point p1, Point p2)
{
    return sqrt( (p1.x - p2.x)*(p1.x - p2.x) +
                 (p1.y - p2.y)*(p1.y - p2.y)
               );
}
d stripmin(Point strip[],l size, d sum)
{
	d mini = sum;  
	qsort(strip, size, sizeof(Point), compareY); 
	for(l i=0;i<size;i++)
	{
		for(l j=i+1;j<size&&(strip[j].y-strip[i].y)<(mini/2);j++)
		{
			for(l k=j+1;k<size&&(strip[k].y-strip[i].y)<(mini/2);k++)
			{
				d di=(dist(strip[i],strip[j])+dist(strip[k],strip[j])+dist(strip[i],strip[k]));
				if(di<mini) mini=di;
			}
		}
	}
	return mini;
}
/*d bruteforce(Point P[],int n)
{
	d mini = FLT_MAX;
    for (int i = 0; i < n; i++)
        for (int j = i+1; j < n; j++)
        	for(int k=j+1;k<n;k++)
            	{d di=(dist(P[i],P[j])+dist(P[k],P[j])+dist(P[i],P[k])); //cout<<i<<j<<k<<" "<<di<<"\n";
            		if(mini>di) mini=di;}
    return mini;
}*/
d minsum(Point P[],l n)
{
	if(n<3)
	{
		return DBL_MAX;
	}
	l mid=n/2;
	Point midpt=P[mid];
	d lf=minsum(P,mid);
	d rt=minsum(P+mid,n-mid);
	d sum=min(lf,rt);
	//cout<<sum<<"\n";
	Point strip[n];
	l j = 0;
    for (l i = 0; i < n; i++)
        if (abs(P[i].x - midpt.x) < (sum/2))
            strip[j] = P[i], j++;
    d middle=stripmin(strip,j,sum);
    //cout<<min(middle,sum)<<"\n";
    return min(middle,sum);
}
int main()
{
	int t;
	cin>>t;
	int h=t;
	l n;
	Point P[100005];
	while(t--){
		cin>>n;
		for(l i=0;i<n;i++)
		{
			cin>>P[i].x>>P[i].y;
		}
		    qsort(P, n, sizeof(Point), compareX);
		cout<<"Case "<<h-t<<": "<<setprecision(10)<<minsum(P, n)<<"\n";
	}
}