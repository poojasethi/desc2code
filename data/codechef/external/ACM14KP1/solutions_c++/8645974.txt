#include<bits/stdc++.h>
using namespace std;
struct Point
{
	double x, y;
};

Point strip[100010];
Point P[100010];

int compareX(const void* a, const void* b)
{
	Point *p1 = (Point *)a, *p2 = (Point *)b;
	return (p1->x - p2->x);
}

int compareY(const void* a, const void* b)
{
	Point *p1 = (Point *)a, *p2 = (Point *)b;
	return (p1->y - p2->y);
}


double distance(Point a, Point b,Point c)
{
	return sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y)) + sqrt((c.x - b.x)*(c.x - b.x) + (c.y - b.y)*(c.y - b.y)) + sqrt((a.x - c.x)*(a.x - c.x) + (a.y - c.y)*(a.y - c.y));

}


double bruteForce(Point P[], int n)
{
	double min = FLT_MAX;
	{
		for (int i = 0; i < n; ++i)
		{
			for (int j = i + 1; j < n; ++j)
			{
				for (int k = j + 1; k < n; ++k)
				{
					if (distance(P[i], P[j],P[k]) < min)
						min = distance(P[i], P[j],P[k]);
				}
			}
		}
	}
	return min;
}


double min(double x, double y)
{
	return (x < y) ? x : y;
}


double stripClosest(Point strip[], int size, double d)
{
	double min = d;

	qsort(strip, size, sizeof(Point), compareY);

	for (int i = 0; i < size; ++i)
	{
		for (int j = i + 1; j < size && (strip[j].y - strip[i].y) < min; ++j)
		{
			for (int k = j + 1; k < size && (strip[k].y - strip[j].y - strip[i].y) < min; ++k)
			{
				if (distance(strip[i], strip[j], strip[k]) < min)
					min = distance(strip[i], strip[j], strip[k]);
			}
		}
	}
	return min;
}


double closestUtil(Point P[], int n)
{

	if (n <= 3)
		return bruteForce(P, n);


	int mid = n / 2;
	Point midPoint = P[mid];


	double dl = closestUtil(P, mid);
	double dr = closestUtil(P + mid, n - mid);

	double d = min(dl, dr);


	int j = 0;
	for (int i = 0; i < n; i++)
	{
		if (abs(P[i].x - midPoint.x) < d)
			strip[j] = P[i], j++;

	}
	return min(d, stripClosest(strip, j, d));
}


double closest(Point P[], int n)
{
	qsort(P, n, sizeof(Point), compareX);
	return closestUtil(P, n);
}

int main()
{
	int t;
	cin >> t;
	for (int xx = 1; xx <= t;xx++)
	{
		int n;
		cin >> n;
		double a, b;
		for (int  i = 0; i < n; i++)
		{
			cin >> a >> b;
			P[i].x = a;
			P[i].y = b;
		}

		cout<<fixed<<setprecision(10)<<"Case "<<xx<<": "<<closest(P, n)<<endl;
	}
}
