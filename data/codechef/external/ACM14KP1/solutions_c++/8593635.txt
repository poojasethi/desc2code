#include<bits/stdc++.h>

#define PB push_back
#define MP make_pair
#define F first
#define S second

#define RI(a) scanf("%d",&a);
#define PI(a) printf("%d",a);

#define SZ(a) (int)(a.size())

#define SET(a,b) memset(a,b,sizeof(a))

#define TR(a,t) for(__typeof(a.begin()) t=a.begin();t!=a.end();t++)

#define REP(i,l,h) for(int i=(l); i<=(h);i++)
#define REPD(i,h,l) for(int i=(h);i>=(l);i--)

#define ALL(a) a.begin(),a.end()

#define DRT()  int t; cin>>t; while(t--)

#define PRSNT(a,e) (a.find(e) != a.end())

#define MINH priority_queue<int, vector<int>, greater<int> >

#define trace1(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define N 100001
#define MOD 1000000007

typedef long long LL;
using namespace std;

bool cmp(pair<long double, long double> A, pair<long double, long double> B) {
        return A.S < B.S;
}
 
long double dist(pair<long double, long double> p1, pair<long double, long double> p2, pair<long double, long double> p3)
{
    return sqrt( (p1.F - p2.F)*(p1.F - p2.F) +
                 (p1.S - p2.S)*(p1.S - p2.S)
               ) +
           sqrt( (p1.F - p3.F)*(p1.F - p3.F) +
                 (p1.S - p3.S)*(p1.S - p3.S)
               ) +
           sqrt( (p3.F - p2.F)*(p3.F - p2.F) +
                 (p3.S - p2.S)*(p3.S - p2.S)
               );
}
 
long double bruteForce(pair<long double, long double> P[], int n)
{
    long double mn = LDBL_MAX;
    for (int i = 0; i < n; ++i)
        for (int j = i+1; j < n; ++j)
            for(int k = j+1; k < n; ++k)
                    mn = min(mn, dist(P[i], P[j], P[k]));
    return mn;
}
 
long double stripClosest(pair<long double, long double> strip[], int size, long double d)
{
    long double mn = d;
 
    sort(strip, strip + size, cmp); 
 
    for (int i = 0; i < size; ++i)
        for (int j = i + 1; j < size && (strip[j].S - strip[i].S) < mn; ++j)
                for(int k = j + 1; j < size && (strip[k].S - strip[i].S) < mn; ++k) 
                        mn = min(mn, dist(strip[i], strip[j], strip[k]));
 
    return mn;
}

long double closestUtil(pair<long double, long double> P[], int n)
{
    if (n <= 4)
        return bruteForce(P, n);
 
    int mid = n/2;
    pair <long double, long double> midPoint = P[mid];
 
    long double dl = closestUtil(P, mid);
    long double dr = closestUtil(P + mid, n-mid);
 
    long double d = min(dl, dr);
 
    pair <long double, long double > strip[n];
    int j = 0;
    for (int i = 0; i < n; i++)
        if (abs(P[i].F - midPoint.F) < d)
            strip[j] = P[i], j++;
 
    return min(d, stripClosest(strip, j, d) );
}
 
int main()
{
        int n, j = 1;
        pair<long double, long double> P[N];
        DRT() {
                cin>>n;
                REP(i,0,n-1) cin>>P[i].F>>P[i].S;
                sort(P,P+n);
                cout<<"Case "<<j<<": ";
                printf("%LF\n",closestUtil(P, n));
                j++;
        }
        return 0;
}
