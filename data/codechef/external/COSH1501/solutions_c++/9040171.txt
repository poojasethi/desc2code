#include <cstdio>
#include <iostream>
#include <cstring>
#include <map>
using namespace std;
int primes[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499};
int lenprimes = sizeof(primes)/4;

string getString(int n)
{
	string result = "";
	for(int i=0;i<lenprimes;i++)
	{
			int count = 0;
			while(n%primes[i] == 0)
			{
				n /= primes[i];
				count++;
			}
			if(count%2 == 0)
				result += '0';
			else
				result += '1';
	}
	return result;
}
string getXOR(string a, string b)
{
	string result = "";
	for(int i=0;i<lenprimes;i++)
		if(a[i] == b[i])
			result += '0';
		else
			result += '1';
	return result;
}

int solve(map<int,map<string,int> > dpmap,string* arr, int i, string aim)
{
	if(dpmap[i].find(aim) != dpmap[i].end())
		return dpmap[i][aim];
	int ans;
	if(aim == arr[i])
		ans = 1;
	else
		ans = 0;

	if(i == 0)
	{
		return dpmap[i][aim] = ans;
	}
	return dpmap[i][aim] = ans + solve(dpmap,arr,i-1,aim) + solve(dpmap,arr,i-1,getXOR(aim,arr[i]));
}

int iterativesolve(map<int,map<string,int> > dpmap,string* arr, int n, string aim)
{
	for(int i=0;i<=n;i++)
	{
		if(dpmap[i].find(arr[i]) != dpmap[i].end())
				dpmap[i][arr[i]] += 1;
			else
				dpmap[i][arr[i]] = 1;

		if(i == 0)
			continue;

		for(map<string,int>::iterator it = dpmap[i-1].begin();it!=dpmap[i-1].end();it++)
		{
			if(dpmap[i].find(it->first) != dpmap[i].end())
				dpmap[i][it->first] += it->second;
			else
				dpmap[i][it->first] = it->second;

			if(dpmap[i].find(getXOR(it->first,arr[i])) != dpmap[i].end())
				dpmap[i][getXOR(it->first,arr[i])] += it->second;
			else
				dpmap[i][getXOR(it->first,arr[i])] = it->second;
		}
	}
	return dpmap[n][aim];
}

int main()
{
	string* arr;
	int t;
	scanf("%d",&t);
	
	string aim = "";
	for(int i=0;i<lenprimes;i++)
		aim += '0';

	while(t--)
	{
		int n;
		map<int,map<string,int> > dpmap;
		scanf("%d",&n);
		arr = new string[n];
		for(int i=0;i<n;i++)
		{
			int p;
			scanf("%d",&p);
			arr[i] = getString(p);
		} 
		cout<<iterativesolve(dpmap,arr,n-1,aim)<<endl;
	}
}