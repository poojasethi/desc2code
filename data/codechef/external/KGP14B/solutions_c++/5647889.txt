#include <iostream>
#include<stack>
#include<string>
#include<vector>
#include<set>
#include<queue>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<algorithm>
using namespace std;

#define gc getchar
#define p 1000000007
#define MOD 1000000007
#define pc(x) putchar(x)
#define pi(n) printf("%d",n)
#define pis(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define pll(n) printf("%lld",n)
#define ps printf(" ")
#define pn printf("\n")
#define rep(i,n) for(i=0;i<n;i++)
#define fu(i,a,n) for(i=a;i<=n;i++)
#define fd(i,n,a) for(i=n;i>=a;i--)
#define INV 333333336
#define ll long long
#define ull unsigned long long
#define EPS 1e-9
#define infi 2000000000

inline int sn()
{
    int n=0;
    int ch=gc();
    while( ch <48 )ch=gc();
    while( ch >47 )
    n = (n<<3)+(n<<1) + ch-'0', ch=gc();
        return n;
}

inline void wi(int n)
{
    int N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0');  return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
}


ll arr[21][21],n;

vector<ll> ans(1100000);
		
ll f(ll m, ll s)
{
	if(ans[s]!=-1) return ans[s];
	ll i,h,l;
	h=0;
	fu(i,1,n) 
	{
		
		if((arr[m][i]==1) && (((1<<(n-i))&s)!=0)) 
		{
			l=(1<<(n-i))^s;
			h+=f(m-1,l);
		}
	}
	ans[s]=h;
	return h;
}
		
		
int min(int a, int b,int c)
{
	return (a<b?a:b)<c?(a<b?a:b):c;
}
		
int main()
{
	int t=sn();
	for(int q=1;q<=t;q++)
	{
		int a1,b1,i,j;
		int x[1005][1005];
		a1=sn();
		b1=sn();
		char a[1005],b[1005];
		scanf("%s",a);		
		scanf("%s",b);
		int h=0;
		
		int l1 = strlen(a) + 1;
		int l2=strlen(b) + 1;
		for (i = 0; i < l2; i++) x[i][0] = i;
		for (i = 0; i < l1; i++) x[0][i] = i;
		for (i = 1; i < l2 ; i++)
			{
				for (j = 1; j < l1 ; j++)
				{
					if (a[j - 1] == b[i - 1]) x[i][j] = x[i-1][j-1]+1;
					else
						{
							x[i][j] = min(x[i-1][j]+1,x[i][j-1]+1);
						}

				}
			}

		printf("Case %d: %d\n",q,x[l2-1][l1-1]);
		
		
	}
	
}














