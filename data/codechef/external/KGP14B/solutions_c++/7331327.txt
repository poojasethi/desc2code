#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <math.h>

#define FR(i, a, b)   for(int i = a; i < b; i++)
#define FOR(i, a, b)  for(int i = a; i <= b; i++)
#define LFOR(i, a, b) for(int i = a; i >= b; i--)
#define FRSZ(i, x)    for(int i = 0; i < (int)x.size(); i++)
#define RP(i, n)      for(int i = 0; i < n; i++)
#define repeat        do
#define until(x)      while(!(x))
#define _ve vector
#define _pa pair
#define _tu tuple
#define _mp make_pair
#define _mt make_tuple
#define _pb push_back
#define _fi first
#define _sc second
#define sz(a) ((int)(a).size())

using namespace std;

template <class T> T min3(T a, T b, T c){ return min(a, min(b, c));};
template <class T> T max3(T a, T b, T c){ return max(a, max(b, c));};

typedef long long int64;
typedef unsigned long long qword;
typedef long double ldouble;

void openFile(){freopen("/home/khaihanhdk/devplace/a.inp", "r", stdin);}

char s[10000], t[10000];
int res[1100][1100];
int m, n;

int main()
{
    //freopen("d:\\a.inp", "r", stdin);
    int oo;
    scanf("%d", &oo);
    for(int o = 0; o < oo; o++)
    {
        scanf("%d%d", &n, &m);
        memset(s, 0, sizeof(s));
        memset(t, 0, sizeof(t));
        scanf("%s", &s);
        scanf("%s", &t);
        if(s[0] == t[0]) res[0][0] = 1;
        else res[0][0] = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(!(i == 0 && j == 0))
                {
                    if(s[i] == t[j])
                    {
                        if(i == 0 || j == 0)
                            res[i][j] = 1;
                        else res[i][j] = res[i - 1][j - 1] + 1;
                    }
                    else
                    {
                        if(i == 0) res[i][j] = 0;
                        else res[i][j] = res[i - 1][j];
                        if(j != 0) res[i][j] = max(res[i][j - 1], res[i][j]);
                        if(j != 0 && i != 0) res[i][j] = max(res[i][j], res[i - 1][j - 1]);
                    }
                }
        cout << "Case " << o + 1 << ": " << -res[n - 1][m - 1] + m + n << endl;

    }
}
