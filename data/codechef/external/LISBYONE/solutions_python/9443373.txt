#include <bits/stdc++.h>
using namespace std;
const int MAXN = 1000 + 10, SIZE = 1000000 + 10;
typedef pair<int, int> PII;
vector<PII> add[MAXN], sub[MAXN];
int f[MAXN], g[MAXN], a[MAXN];
int n, k;

int sum[SIZE << 2], cov[SIZE << 2];
#define lson (rt<<1)
#define rson (rt<<1|1)
#define mid ((l+r)>>1)
void upd(int rt, int l, int r) {
  if (cov[rt]) sum[rt] = r - l;
  else if (l + 1 == r) sum[rt] = 0;
  else sum[rt] = sum[lson] + sum[rson];
}
void build(int rt, int l, int r) {
  sum[rt] = cov[rt] = 0;
  if (l + 1 == r) return;
  build(lson, l, mid);
  build(rson, mid, r);
}
void ins(int rt, int l, int r, int L, int R, int v) {
  if (L <= l && R >= r) {
    cov[rt] += v;
    upd(rt, l, r);
    return;
  }
  if (L < mid) ins(lson, l, mid, L, R, v);
  if (R > mid) ins(rson, mid, r, L, R, v);
  upd(rt, l, r);
}

void run() {
  scanf("%d%d", &n, &k);
  for (int i = 0; i <= n; ++i) add[i].clear();
  for (int i = 0; i <= n; ++i) sub[i].clear();
  for (int i = 1; i <= n; ++i) scanf("%d", a + i);
  for (int i = 1; i <= n; ++i) {
    f[i] = 1;
    for (int j = 1; j < i; ++j) {
      if (a[j] < a[i]) f[i] = max(f[i], f[j] + 1);
    }
  }
  for (int i = n; i >= 1; --i) {
    g[i] = 1;
    for (int j = n; j > i; --j) {
      if (a[j] > a[i]) g[i] = max(g[i], g[j] + 1);
    }
  }
  int len = *max_element(f + 1, f + 1 + n);
  for (int i = 1; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j) {
      if (a[i] >= a[j] || f[i] + g[j] != len) continue;
      int l = a[i] + 1, r = min(k, a[j] - 1);
      if (l <= r) {
        add[i].push_back(PII(l, r));
        sub[j].push_back(PII(l, r));
      }
    }
  }
  for (int i = 1; i <= n; ++i) if (g[i] == len) {
    if (a[i] > 1) add[0].push_back(PII(1, a[i] - 1));
    if (a[i] > 1) sub[i].push_back(PII(1, a[i] - 1));
  }
  for (int i = 1; i <= n; ++i) if (f[i] == len) {
    if (a[i] < k) add[i].push_back(PII(a[i] + 1, k));
  }
  build(1, 1, k + 1);
  int ret = 0;
  for (int i = 0; i <= n; ++i) {
    for (auto &x: add[i]) ins(1, 1, k + 1, x.first, x.second + 1, 1);
    for (auto &x: sub[i]) ins(1, 1, k + 1, x.first, x.second + 1, -1);
    ret += sum[1];
  }
  cout << ret << endl;
}

int main() {
  int T; scanf("%d", &T);
  for (int cas = 1; cas <= T; ++cas) {
    run();
  }
  return 0;
}
