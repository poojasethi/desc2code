// Tapan Sahni
#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <iomanip>
#include <map>
#include <complex>
#include <set>

#define mod 1000000007

using namespace std;
typedef long long LL;

const int N = 1000 + 10;
const int inf = 1000000000;

int a[N];
int fdp[N][N] , fdp1[N][N];
vector <pair <int ,int> > v;
int main() {
  ios::sync_with_stdio(false) ; cin.tie(nullptr);
  int t;
  cin >> t;
  while(t--) {
    int n , k;
    cin >> n >> k;
    for(int i = 1; i <= n; i++) cin >> a[i];
    int lis = 0;
    for(int i = 0; i <= n + 1; i++)
      for(int j = 0; j <= n + 1; j++){
        fdp[i][j] = inf;
        fdp1[i][j] = -1;
      }
    fdp[0][0] = 0;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        fdp[i][j] = fdp[i - 1][j];
        if (j && fdp[i - 1][j - 1] < a[i])
          fdp[i][j] = min(fdp[i][j], a[i]);
        if (fdp[i][j] != inf)
          lis = max(lis, j);
      }
    }
    fdp1[n + 1][0] = inf;
    for (int i = n; i >= 1; i--){
      for (int j = 0; j <= n; j++){
        fdp1[i][j] = fdp1[i + 1][j];
        if (j && fdp1[i + 1][j - 1] > a[i])
          fdp1[i][j] = max(fdp1[i][j], a[i]);
      }
    }
    LL ans = 0;
    int r;
    for (int i = 1; i < n; i++){
      r = -1;
      for (int j = 0; j <= lis; j++){
        int j1 = lis - j;
        if (fdp1[i + 1][j1] - fdp[i][j] > 1) {
          if (fdp1[i + 1][j1] > k) {
            if (fdp[i][j] >= r)
              ans += max(k - fdp[i][j], 0);
            else
              ans += max(k - r + 1, 0);
            break;
          }
          if (fdp[i][j] >= r)
            ans += max(fdp1[i + 1][j1] - fdp[i][j] - 1, 0);
          else
            ans += max(fdp1[i + 1][j1] - r, 0);
          r = fdp1[i + 1][j1];
        }
      }
    }
    ans += max(k - fdp[n][lis], 0);
    ans += max(min(k, fdp1[1][lis] - 1), 0);
    cout << ans << endl;
  }
  
  return  0;
}
// Never Quit
