#include <iostream>
#include <vector>
#include <string.h>
#include <queue>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef vector<vii> vvii;

#define MAXN 1010
ll n,K;
ll din[MAXN];
vvi sig;
vvii inter;
ll num[MAXN];
char vist[MAXN];

ll dina(ll a){
  if(din[a] == -1){
    din[a] = 1;
    for(int i = a+1; i < n; ++i) if(num[i] > num[a]) din[a] = max(din[a],dina(i)+1);
    for(int i = a+1; i < n; ++i) if(num[i] > num[a] and dina(i) == din[a]-1) sig[a].push_back(i);
  }
  return din[a];
}

int main(){
  int t; cin >> t;
  for(int cass = 0; cass < t; ++cass){
    cin >> n >> K;
    for(int i = 0; i < n; ++i) cin >> num[i];
    memset(din,-1,sizeof(din));
    sig = vvi(n);
    ll length = -1;
    for(int i = 0; i < n; ++i){
      length = max(length,dina(i));
    }
    queue<ii> q;
    memset(vist,0,sizeof(vist));
    for(int i = 0; i < n; ++i){
      if(length == dina(i)){ q.push(ii(i,0));}
    }
    inter = vvii(n+2);
//     for(int i = 0; i < n; ++i){
//       cout << i << ": ";
//       for(int j = 0; j < sig[i].size(); ++j){
// 	cout << sig[i][j] << ' ';
//       }
//       cout << endl;
//     }
//     cout << length << endl;
    while(!q.empty()){
      ii aux = q.front(); q.pop();
      ll a = aux.first;
      ll b = aux.second;
//       cout << a << ' ' << b << endl;
      if(vist[a]) continue;
      vist[a] = 1;
      if(b == 0){
	for(int i = 0; i <= a; ++i) inter[i].push_back(ii(1,min(num[a]-1,K)));
      }
      for(int i = 0; i < sig[a].size(); ++i){
	for(int j = a+1; j <= sig[a][i]; ++j){
	  inter[j].push_back(ii(num[a]+1,min(num[sig[a][i]]-1,K)));
	}
	q.push(ii(sig[a][i],b+1));
      }
      if(b == length-1){
	for(int i = a+1; i <= n; ++i) inter[i].push_back(ii(num[a]+1,K));
      }
    }
    ll sol = 0;
    for(int i = 0; i <= n; ++i){
      sort(inter[i].begin(), inter[i].end());
      ii cosa(-3,-4);
      for(int j = 0; j < inter[i].size(); ++j){
	ii aux = inter[i][j];
// 	cout << i << ' ' << j << ' ' << aux.first << ' ' << aux.second << ' ' << sol<< endl;
	if(aux.first > cosa.second){
	  sol += max(cosa.second-cosa.first+1,0LL);
	  cosa = aux;
	}
	else{
	  cosa.second = max(cosa.second,aux.second);
	}
      }
      sol += max(cosa.second-cosa.first+1,0LL);
    }
    cout << sol << endl;
  }
}