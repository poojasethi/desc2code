//Done by: K Ashwin

#include<bits/stdc++.h>

using namespace std;

//Taken from "competitive programming" by Steven Halim
// Shortcuts for "common" data types in contests
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (auto it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)

#define s(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define set0(a) memset(a, 0, sizeof(a))
#define setdp(a) memset(a, -1, sizeof(a))
#define setinf(a) memset(a, 127, sizeof(a))
#define INF 2000000000
#define MOD 1000000007

int lis[1005], lds[1005], a[1005], dp1[1005][1005], dp2[1005][1005];

int main()
{
    int t, n, k, t1, mx_lis;

    s(t);

    while (t--) {
        s(n);
        s(k);

        set0(lis);
        set0(lds);

        REP (i, 1, n)
            s(a[i]);

        REP (i, 1, n) {
            t1 = 0;
            //idx = i;
            REP (j, 0, i - 1) {
                if (a[i] > a[j]) {
                    if (lis[j] > t1) {
                        t1 = lis[j];
                        //idx = j;
                    }

                    /*else if (lis[j] == t1) {
                        idx = (a[j] < a[idx] ? j : idx);
                    }*/
                }
            }

            lis[i] = t1 + 1;
            //pre[i] = idx;
        }

        for (int i = n; i >= 1; i--) {
            t1 = 0;// idx = i;
            for (int j = n; j > i; j--) {
                if (a[i] < a[j]) {
                    if (lds[j] > t1) {
                        t1 = lds[j];
                        //idx = j;
                    }
                }

                /*else if (lds[j] == t1)
                    idx = (a[j] > a[idx] ? j : idx);*/
            }

            lds[i] = t1 + 1;
            //pre[i] = idx;
        }

        /*cout << "LIS:\n";
        REP (i, 1, n)
            cout << lis[i] << " ";
        cout << endl;

        cout << "LDS:\n";
        REP (i, 1, n)
            cout << lds[i] << " ";
        cout << endl;*/

        mx_lis = 0;
        REP (i, 1, n)
            mx_lis = max(mx_lis, lis[i]);

        REP (i, 0, n + 1) {
            REP (j, 0, n + 1) {
                dp1[i][j] = INF;
                dp2[i][j] = 0;
            }
        }

        dp1[0][0] = 0;
        REP (i, 1, n) {
            REP (j, 0, mx_lis)
                dp1[i][j] = dp1[i - 1][j];

            dp1[i][lis[i]] = min(dp1[i][lis[i]], a[i]);
        }


        dp2[n + 1][0] = k + 1;
        for (int i = n; i >= 1; i--) {
            REP (j, 0, mx_lis)
                dp2[i][j] = dp2[i + 1][j];

            dp2[i][lds[i]] = max(dp2[i][lds[i]], a[i]);
        }

        /*cout << "DP1:\n";
        REP (i, 1, n) {
            REP (j, 0, mx_lis)
                cout << dp1[i][j] << " ";
            cout << endl;
        }

        cout << "DP2:\n";
        REP (i, 1, n) {
            REP (j, 0, mx_lis)
                cout << dp2[i][j] << " ";
            cout << endl;
        }*/

        ll ans = 0;
        REP (i, 1, n + 1) {
            REP (j, 0, mx_lis) {
                //cout << i << " " << j << " " << dp2[i][mx_lis - j] - dp1[i - 1][j] - 1 << endl;
                ans += max(0, min(dp2[i][mx_lis - j],k+1) - min(k,dp1[i - 1][j]) - 1);
            }
        }

        cout << ans << endl;
    }

    return 0;
}
