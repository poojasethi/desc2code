#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;
#define llu long long unsigned int
#define lli long long int
#define li long int
#define fi first
#define pii pair<int,int>
#define se second
#define pb push_back
#define vi vector<int>
#define mod 1000000007
int scan()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
li scanli()    {int ip=getchar_unlocked(),flag=1;li ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lli scanlli()    {int ip=getchar_unlocked(),flag=1;lli ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scanllu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
void print(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void printli(li n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void printlli(lli n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void printllu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}

vector< vector<double> > height(101,vector<double>(101,0));
vector< pair<int,double> > E[10001];
vector<double> dist(10001,(double)(1000000000));
vector<bool> visited(10001,0);


struct comp {
    bool operator() (const pair<int,double> &a, const pair<int,double> &b) {
        return a.second > b.second;
    }
};

priority_queue< pair<int,double> , vector< pair<int,double> >, comp > Q;




double calc(double h1,double h2)
{
	if(h1>h2)
	{
		double ans=0.5+0.5*(double)(sqrt(1+pow(h1-h2,2)));
		//cout<<ans<<" ";
		return ans;
	}
	else
	{
		double ans=1.5*sqrt(1+pow(h1-h2,2))-0.5;
		//cout<<ans<<" ";
		return ans;
	}
}

void dijkstra(int src,int dest)
{
	dist[src]=0;
	Q.push(make_pair(src,0));
	while(!Q.empty())
	{
		int u=Q.top().fi;
		Q.pop();
		if(visited[u]==0)
		{
			int len=E[u].size();
			for(int i=0;i<len;i++)
			{
				int v=E[u][i].fi;
				double w=E[u][i].se;
				if(dist[u]+w<dist[v] and visited[v]==0)
				{
					dist[v]=dist[u]+w;
					Q.push(make_pair(v,dist[v]));
				}
			}
			visited[u]=1;
		}
		if(u==dest)
			break;
	}
}

void init1()
{
	int i,j,k;
	for(i=0;i<10001;i++)
	{
		visited[i]=0;
		dist[i]=(double)INT_MAX;
	}
	Q=priority_queue< pair<int,double> , vector< pair<int,double> >, comp >(); 
}
void init()
{
	int i,j,k;
	for(i=0;i<10001;i++)
	{
		E[i].clear();
		visited[i]=0;
		dist[i]=(double)INT_MAX;
	}
	Q=priority_queue< pair<int,double> , vector< pair<int,double> >, comp >(); 
}

int main()
{
	int t=scan(),i,j,k;
	for(k=1;k<=t;k++)
	{
		init();
		int r=scan(),c=scan();
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				scanf("%lf",&height[i][j]);
				//cout<<height[i][j]<<" ";
			}
		}
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				if(i-1>=0)
				{
					double temp=calc(height[i][j],height[i-1][j]);
					//cout<<temp<<" ";
					E[i*c+j].pb(make_pair((i-1)*c+j,temp));					
				}
				if(i+1<r)
				{
					double temp=calc(height[i][j],height[i+1][j]);
					E[i*c+j].pb(make_pair((i+1)*c+j,temp));
				}
				if(j-1>=0)
				{
					double temp=calc(height[i][j],height[i][j-1]);
					E[i*c+j].pb(make_pair(i*c+j-1,temp));
				}
				if(j+1<c)
				{
					double temp=calc(height[i][j],height[i][j+1]);
					E[i*c+j].pb(make_pair(i*c+j+1,temp));
				}
			}
		}
		int q=scan();
		printf("Case %d:\n",k);
		while(q--)
		{
			init1();
			int x1=scan(),y1=scan(),x2=scan(),y2=scan();
			x1--;y1--;x2--;y2--;
			dijkstra(x1*c+y1,x2*c+y2);
			printf("%.6lf\n",dist[x2*c+y2]);
		}
	}	
	return 0;
}