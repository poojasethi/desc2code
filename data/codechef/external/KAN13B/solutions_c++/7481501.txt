#include <iostream>
#include <cmath>
#include <algorithm>
#include <stdio.h>

typedef double d;
using namespace std;

int query_size[10];
double result[10][100];

double getHardness(d h1,d h2);

int main(){
    int testCases,temp;
    cin>>testCases;
    temp = testCases;

    int r,c;
    int i_s,j_s,i_e,j_e;
    int i,j,k;
    double arr[102][102];
    double min_hardness[102][102];
    int v,h;

    while(testCases){
            cin>>r>>c;
            for(i = 0;i<r;++i)
                for(j = 0;j<c;++j)
                    cin>>arr[i][j];

            cin>>query_size[temp-testCases];
            for(k = 0;k<query_size[temp-testCases];++k){
                cin>>i_s>>j_s>>i_e>>j_e;
                min_hardness[i_s-1][j_s-1] = 0;

                v = (i_s<i_e?1:-1);
                h = (j_s<j_e?1:-1);

                for(i = i_s-1+v;i!=i_e-1+v;i+=v){
                    min_hardness[i][j_s-1] = min_hardness[i-v][j_s-1] + getHardness(arr[i-v][j_s-1],arr[i][j_s-1]);
                }
                for(j = j_s-1+h;j!=j_e-1+h;j+=h){
                    min_hardness[i_s-1][j] = min_hardness[i_s-1][j-h] + getHardness(arr[i_s-1][j-h],arr[i_s-1][j]);
                }
                for(i = i_s-1+v;i!=i_e-1+v;i+=v)
                    for(j = j_s-1+h;j!=j_e-1+h;j+=h){
                        min_hardness[i][j] = min(min_hardness[i-v][j] + getHardness(arr[i-v][j],arr[i][j]),min_hardness[i][j-h] + getHardness(arr[i][j-h],arr[i][j]));
                    }

                result[temp-testCases][k] = min_hardness[i_e-1][j_e-1];
            }

    --testCases;
    }

    for(i = 0;i<temp;++i){
        cout<<"Case "<<i+1<<":"<<endl;
        for(j = 0;j<query_size[i];++j)
            printf("%0.6lf\n",result[i][j]);
    }
return 0;
}

double getHardness(d h1,d h2){
    if(h1>h2) return (0.5 + 0.5*sqrt((d)1 + (h1-h2)*(h1-h2)));
    else return (-0.5 + 1.5*sqrt((d)1 + (h1-h2)*(h1-h2)));
}
