/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%d",&n);
#define MAXN 111 
#define ii pair<int,int>
#define iii pair<double,pair<int,int> >

int dx[]={1,-1,0,0};
int dy[]={0,0,-1,1};
double grid[MAXN][MAXN];
double d[MAXN][MAXN];
bool visit[MAXN][MAXN];
double cost[MAXN][MAXN][4];
int main()
{
    //freopen("in","r",stdin);

    int test;s(test);
    int kase=0;
    while(test--)
    {
        kase++;
        int N,M;s(N);s(M);
        for(int i=0;i<N;i++)
            for(int j=0;j<M;j++)
                scanf("%lf",&grid[i][j]);

        for(int i=0;i<N;i++)
        {
            for(int j=0;j<M;j++)
            {
                int cx=i,cy=j;
                for(int k=0;k<4;k++)
                {
                    int nx=cx+dx[k];
                    int ny=cy+dy[k];
                    if(nx>=N||nx<0||ny<0||ny>=M) continue;
                    double dist;
                    if(grid[nx][ny]<grid[cx][cy])
                        dist=0.5+0.5*sqrt(1.00+pow((grid[cx][cy]-grid[nx][ny]),2));
                    else
                        dist=-0.5+1.5*sqrt(1.00+pow((grid[cx][cy]-grid[nx][ny]),2));
                    cost[cx][cy][k]=dist;
                }
            }
        }


        int q;s(q);
        printf("Case %d:\n",kase);
        while(q--)
        {
            int x1,y1,x2,y2;
            s(x1);s(y1);s(x2);s(y2);
            x1--;x2--;y1--;y2--;
            for(int i=0;i<N;i++)
                for(int j=0;j<M;j++)
                {
                    d[i][j]=INT_MAX;
                    visit[i][j]=0;
                }
            priority_queue<iii,vector<iii>,greater<iii> > q;
            q.push(iii(0,ii(x1,y1)));
            d[x1][y1]=0;
            while(q.size()>0)
            {
                iii c=q.top();
                q.pop();
                int cx=c.second.first;
                int cy=c.second.second;
                if(cx==x2&&cy==y2) break;
                if(visit[cx][cy]) continue;
                visit[cx][cy]=1;
                for(int i=0;i<4;i++)
                {
                    int nx=cx+dx[i];
                    int ny=cy+dy[i];
                    if(nx>=N||nx<0||ny<0||ny>=M)
                        continue;
                    if(visit[nx][ny])
                        continue;
                    double dist=cost[cx][cy][i];
                    if(d[nx][ny]>d[cx][cy]+dist)
                    {
                        d[nx][ny]=d[cx][cy]+dist;
                        q.push(iii(d[nx][ny],ii(nx,ny)));
                    }
                }
            }
            printf("%.6lf\n",d[x2][y2]);
        }
    }
    return 0;
}

