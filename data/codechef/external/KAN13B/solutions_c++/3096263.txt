#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<vector>
#include<queue>

using namespace std;

#define ll long long
#define llu unsigned long long
#define MOD 1000000007
#define INF 2000000000
#define mp make_pair
#define pii pair<int,int>
#define node pair < pii , double >

int r,c;
double grid[101][101];
double D[102][102];
double calc[101][101][4];

bool flag[101][101];

int dirx[]={1,0,-1,0};
int diry[]={0,1,0,-1};

struct cmp
{
       bool operator() (const node &a, const node &b)
       {
            return a.second > b.second;
       }
};


int main() 
{
    int t,i,j,tc = 1,k;
    scanf("%d",&t);
    while(t--)
    {
              printf("Case %d:\n",tc++);
              scanf("%d%d",&r,&c);
              //cout<<r<<c<<endl;
              for(i=0;i<r;i++)
              {
                 for(j=0;j<c;j++)
                 {
                    scanf("%lf",&grid[i][j]);
                 }
              }
              
              for(i=0;i<r;i++)
              {
                 for(j=0;j<c;j++)
                 {
                    for(k=0;k<4;k++)
                    {
                       int ni = i + dirx[k];
                       int nj = j + diry[k];
                       
                       if(ni>=0 && ni<r && nj>=0 && nj<c)
                       {
                                double h1 = grid[i][j];
                                double h2 = grid[ni][nj];
                                
                                if(h1-h2 < 1e-9)
                                {
                                    calc[i][j][k] = -0.5 + 1.5*sqrt(1+(h1-h2)*(h1-h2));
                                }
                                else
                                {
                                    calc[i][j][k] = 0.5 + 0.5*sqrt(1+(h1-h2)*(h1-h2));
                                } 
                       }
                    }
                 }
              }
               
              int q,sx,sy,ex,ey;
              scanf("%d",&q);
              //cout<<"A";
              while(q--)
              {
                        memset(flag,0,sizeof(flag));

                        for(i=0;i<r;i++)
                        {
                           for(j=0;j<c;j++)
                           D[i][j] = 1e15;
                        }
                        
                        
                        scanf("%d%d%d%d",&sx,&sy,&ex,&ey);
                        sx--,sy--,ex--,ey--;
                        
                        priority_queue < node , vector < node > , cmp > pq;
                        
                        D[sx][sy] = 0.0;
                        
                        pq.push(mp(mp(sx,sy),0.0));
                        
                        while(!pq.empty())
                        {
                            
                            node cur = pq.top();
                            
                            int x,y;
                            
                            x = cur.first.first;
                            y = cur.first.second;
                            
                            pq.pop();

                            if(x == ex && y == ey)
                            break;
                                                        
                            if(flag[x][y])
                            continue;
                            
                           // cout<<"A";
                            
                            for(i=0;i<4;i++)
                            {
                               int nx = x + dirx[i];
                               int ny = y + diry[i];
                               
                               if(nx>=0 && nx < r && ny>=0 && ny<c)
                               if(!flag[nx][ny] && (D[x][y] + calc[x][y][i] < D[nx][ny] + 1e-9))
                               {
                                  D[nx][ny] = D[x][y] + calc[x][y][i];
                                  pq.push(mp(mp(nx,ny),D[nx][ny]));
                               //   cout<<"A";
                               }
                            }
                            flag[x][y] = 1;
                        }    
                        printf("%.6lf\n",D[ex][ey]);
              }
    }
    //system("pause");
    return 0;
}
