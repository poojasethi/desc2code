#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

typedef pair<int,int> pint;
typedef map<int,int> mint;

#define SIZE 105

double h[SIZE][SIZE];
vector<double> cost[SIZE][SIZE];

struct node{
    int r,c;
    double val;
    bool operator < (const node & p)const{return val>p.val;}
};

bool vis[SIZE][SIZE];

int row ,col;

int dr[]={-1,0,1,0};
int dc[]={0,-1,0,1};

double dijkstra(int sr,int sc , int fr , int fc ){

    for (int i=1;i<=row;++i){
        for (int j=1;j<=col;++j){
            vis[i][j]=false;
        }
    }

    //CLR(vis);

    node place,temp,u;
    place.val=0;
    place.r=sr;
    place.c=sc;


    priority_queue<node> q;

    q.push(place);


    while (!q.empty())
    {
        temp=q.top();q.pop();
        if (temp.r == fr && temp.c ==fc ){
            return temp.val;
        }

        if (vis[temp.r][temp.c])
            continue;
        vis[temp.r][temp.c]=true;


        for (int i=0;i<4;++i)
        {
            u.r=temp.r+dr[i];
            u.c=temp.c+dc[i];

            if ( u.r>0 && u.r<=row && u.c>0 && u.c<=col && !vis[ u.r ][ u.c ] ){
                //cout<<cost[temp.r][temp.r].size()<<endl;
                u.val=temp.val+cost[temp.r][temp.c][i];
                q.push(u);
            }
        }
    }
    return -1;
}


int main(){

    //FRO

    int kase;
    scanf("%d",&kase);

    for (int kk=1;kase--;++kk){

        scanf("%d %d",&row,&col);

        for (int i=1;i<=row;++i){
            for (int j=1;j<=col;++j){
                scanf("%lf",&h[i][j]);
                cost[i][j].clear();
            }
        }
        for (int i=1;i<=row;++i){
            for (int j=1;j<=col;++j){
                for (int k=0;k<4;++k){
                    double h1= h[i][j];
                    double h2= h[ i+dr[k] ][ j+dc[k] ];

                    if ( h1 > h2 ){
                        cost[i][j].PB( 0.5 + 0.5 * sqrt( 1 + (h1 - h2 )*(h1 - h2 ) ) );
                    }else{
                        cost[i][j].PB( -0.5 + 1.5 * sqrt( 1 + (h1 - h2 )*(h1 - h2 ) ) );
                    }
                }
            }
        }

        int qq;
        scanf("%d",&qq);
        int sr,sc,fr,fc;
        printf("Case %d:\n",kk);
        while ( qq-- ){

            scanf("%d %d %d %d",&sr,&sc,&fr,&fc);

            printf("%.6lf\n",dijkstra( sr,sc,fr,fc ) );
        }
    }


    return 0;
}
