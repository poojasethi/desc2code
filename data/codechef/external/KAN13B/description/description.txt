John lives in a hilly city. He wants to go from point A to point B and he is planning to walk today. Fortunately for him, the city is designed like a grid. Unfortunately, as the elevation of each point is different, finding the easiest path is not trivial. That’s why John needs your help.

John wants to find a path from A to B with minimum hardness. Hardness of going from point A with height h_1 to adjacent point B with height h_2 is


 if h_1 > h_2, then 0.5 + 0.5 * sqrt(1 + (h_1 - h_2 )^2)
 otherwise, -0.5 + 1.5 * sqrt(1 + (h_1 - h_2 )^2)


Distance between adjacent points is considered one unit. Slope of road segments between adjacent points is never more than 0.5.


Input
The input file starts with a number T that represents the number of test cases. Then T test cases follow. Each test case starts with two number r, c, representing the size of the grid. Next r lines contain c numbers. j-th number from i-th line corresponds to the height of the intersection of i-th street with j-th avenue.


Next line contains an integer q, then q lines follow. Each of the following lines represents a query. A query contains four numbers: i_s, j_s, i_e, and j_e. This represents a request to find the path with minimum hardness from intersection between i_s-th street and j_s-th avenue to the intersection between i_e-th street and j_e-th avenue.


Output

Start each test case with case number as shown in sample output (e.g. “Case 1:” for the first case, quotes for clarification). Then output q lines, each for one query. For each query, output a line containing the hardness of optimal path with 6 digits after decimal point.


See sample input and output in the next page for details.


Constraints
1 <= T <= 10
5 <= r, c <= 100
1 <= q <= 100
1 <= i_s, i_e <= r
1 <= j_s, j_e <= c

Example
Input:
2
6 5
0.0 0.1 0.2 0.3 0.4
0.1 0.0 0.3 0.3 0.5
0.2 0.2 0.2 0.2 0.2
0.3 0.4 0.5 0.5 0.3
0.3 0.5 0.5 0.5 0.6
0.6 0.4 0.4 0.2 0.2 
5
1 1 4 4
1 1 6 5
1 1 1 5
3 1 1 3
6 5 2 3
6 5
0.0 0.1 0.2 0.3 0.4
0.1 0.0 0.3 0.3 0.5
0.2 0.2 0.2 0.2 0.2
0.3 0.4 0.5 0.5 0.3
0.3 0.5 0.5 0.5 0.6
0.6 0.4 0.4 0.2 0.2 
3
1 5 6 1
6 1 1 1
6 3 2 5


Output:
Case 1:
6.037407
9.049802
4.029925
4.009975
6.066684
Case 2:
9.074374
5.029497
6.066684



Problem Setter : Tanaeem Moosa

