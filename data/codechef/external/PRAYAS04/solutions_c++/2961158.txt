
/* Come on Code on!!!!
re_hash
dev_cpp
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <ctime>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;

#define S(a) scanf("%d",&(a))
#define P(a) printf("%d",(a))
#define NL printf("\n")
#define SL(a) scanf("%lld",&(a))
#define PL(a) printf("%lld",(a))
#define ll long long int
#define FOR(I,A,B) for(int I= (A); I<(B); ++I)
#define all(c) c.begin(), c.end()
#define stop system("pause")
#define pb push_back
#define mp make_pair
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define MOD 1000000007

vector<int> adj[505];
int mark[505];

int dfs(int i){
    int count=1;
    mark[i]=1;
    FOR(j,0,adj[i].size()){
        if(!mark[adj[i][j]]){
            count+=dfs(adj[i][j]);
        }
    }
    return count;
}

int main(){
    int t;
    S(t);
    while(t--){
        int n,m;
        S(n);S(m);
        FOR(i,0,505){
            mark[i]=0;
            adj[i].clear();
        }
        FOR(i,0,m){
            int a,b;
            S(a);S(b);
            adj[a].pb(b);
            adj[b].pb(a);
        }
        int vertices = 0;
        int connected_comps=0;
        ll ans =0 ;
        FOR(i,0,n){ 
            if(!mark[i]){   //each time the dfs called....a new connected component is found....so return its size
                connected_comps=dfs(i);
                ans+=(connected_comps*(connected_comps-1))/2;
                if(connected_comps==1)
                    vertices++;
                ans%=MOD;
                ans+=MOD;
                ans%=MOD;
            }
        }
        ans+=(vertices*(vertices-1))/2;
        ans%=MOD;
        ans+=MOD;
        ans%=MOD;
        PL(ans);
        NL;
    }
    return 0;
}

        
        
