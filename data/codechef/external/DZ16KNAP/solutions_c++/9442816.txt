#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5+10;
int C[maxn],P[maxn],n,dep[maxn],cntv[maxn],idp[maxn],m,idc[maxn],idv[maxn];
long long ans;
vector<int> ide[maxn];
struct edge{
    int u,v;
    bool ok;
} e[maxn];
struct _chain{
    vector<int> v,tree,tmp;
    int sz,p;
    _chain(int _p=0){
        tree.clear();v.clear();v.push_back(0);
        v.push_back(_p);
        sz=1;p=_p;
    }
    void add(int x){
        v.push_back(x);sz++;
    }
    void build(int l,int r,int k){
        if (l==r){
            tree[k]=C[v[l]];
            return ;
        }
        tmp[k]=0;
        build(l,(l+r)>>1,k<<1);
        build(((l+r)>>1)+1,r,(k<<1)|1);
        tree[k]=min(tree[k<<1],tree[(k<<1)|1]);
    }
    void push_down(int l,int r,int k){
        if (l==r) return ;
        if (tmp[k]==0) return ;
        int k1=k<<1;
        int k2=k1+1;
        tree[k1]-=tmp[k];tmp[k1]+=tmp[k];
        tree[k2]-=tmp[k];tmp[k2]+=tmp[k];
        tmp[k]=0;
    }
    void update(int l,int r,int u,int v,int z,int k){
        if (r<u||v<l) return ;
        if (u<=l&&r<=v) {
            tree[k]-=z;tmp[k]+=z;
            return ;
        }
        push_down(l,r,k);
        update(l,(l+r)>>1,u,v,z,k<<1);
        update(((l+r)>>1)+1,r,u,v,z,(k<<1)|1);
        tree[k]=min(tree[k<<1],tree[(k<<1)|1]);
    }
    int get(int l,int r,int u,int v,int k){
        if (r<u||v<l) return 1e9;
        if (u<=l&&r<=v) return tree[k];
        push_down(l,r,k);
        return min(get(l,(l+r)>>1,u,v,k<<1),get(((l+r)>>1)+1,r,u,v,(k<<1)|1));
    }
    void init(){
        tree.resize(5*sz);
        tmp.resize(5*sz);
        build(1,sz,1);
    }
    int getmin(int x){
        int l=1,r=1+dep[x]-dep[p];
        return get(1,sz,l,r,1);
    }
    void del(int x,int z){
        int l=1,r=1+dep[x]-dep[p];
        update(1,sz,l,r,z,1);
    }
} ;
vector<_chain> chain;
void predfs(int x,int r){
    cntv[x]=1;
    int vmax=0,id=0,y;
    for (vector<int>:: iterator it= ide[x].begin(); it!= ide[x].end(); it++){
        y=e[*it].u+e[*it].v-x;
        if (y!=r){
            dep[y]=dep[x]+1;
            idp[y]=x;
            predfs(y,x);
            if (cntv[y]>vmax){
                vmax=cntv[y];
                id=*it;
            }
            cntv[x]+=cntv[y];
        }
    }
    e[id].ok=1;
}
void dfs(int x,int r,int id){
    if (id==-1){
        id=m;m++;
        chain.push_back(_chain(x));
    } else chain[id].add(x);
    idc[x]=id;
    int y;
    for (vector<int>:: iterator it= ide[x].begin(); it!= ide[x].end(); it++){
        y=e[*it].u+e[*it].v-x;
        if (y!=r){
            if (e[*it].ok) dfs(y,x,id); else dfs(y,x,-1);
        }
    }
}
int getminroot(int x){
    if (x==0) return 1e9;
    int id=idc[x];
    int tmp=chain[id].p;
    tmp=idp[tmp];
    return min(chain[id].getmin(x),getminroot(tmp));
}
void del(int x){
    if (x==0) return ;
    int id=idc[x];
    int tmp=chain[id].p;
    tmp=idp[tmp];
    chain[id].del(x,1);
    del(tmp);
}
bool _less(int x,int y){
    return P[x]>P[y];
}
int main(){
    scanf("%d",&n);
    for (int i=1; i<=n; i++) scanf("%d%d",&C[i],&P[i]);
    for (int i=1; i<n; i++){
        scanf("%d%d",&e[i].u,&e[i].v);
        e[i].ok=0;
        ide[e[i].u].push_back(i);
        ide[e[i].v].push_back(i);
    }
    predfs(1,0);m=0;
    dfs(1,0,-1);
    for (int i=0; i<m; i++) chain[i].init();
    for (int i=1; i<=n; i++) idv[i]=i;
    sort(idv+1,idv+n+1,_less);
    for (int u,i=1; i<=n; i++){
        u=idv[i];
        if (getminroot(u)>0){
            ans+=1LL*P[u];
            del(u);
        }
    }
    cout<<ans;
}
