#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define inf 1000000000
#define mod 1000000007
using namespace std;

// P - pattern, F - failure function, m - P.size()
string P, T;
int F[10050];
bool match[500050];
int dp[500050][2];
void FailureFunction(int m) {
    int i = 1, j = 0;
    F[0] = 0;
    while(i < m) {
        if(P[i] == P[j])
            {F[i] = j+1; i++; j++;}
        else if(j > 0)
            j = F[j-1];
        else
            {F[i] = 0; i++;}
    }
}

// P - pattern, T - text
void KMP() {
    int m=P.size(), n=T.size(), i=0, j=0;
    FailureFunction(m);
    while(i < n) {
        while(j && T[i] != P[j]) j = F[j-1]; 
        if(T[i] == P[j]) j++;
        if(j == m) 
            match[i-j+1] = true;
        //printf("%d\n", i-j+1);
        i++;
    }
}

// int recurse(int index, int flag) {
//     if(index >= T.size())
//         return flag;
//     if(dp[index][flag] != -1)
//         return dp[index][flag];
//     dp[index][flag] = recurse(index + 1, flag);
//     if(match[index])
//         dp[index][flag] += recurse(index + P.size(), 1);
//     dp[index][flag] %= mod;
//     return dp[index][flag];
// }

int main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
    #endif
    cin>>P;
    cin>>T;
    for(int i=0;i<500050;i++)
        match[i] = false;
    for(int j=0;j<2;j++)
        for(int i=0;i<500050;i++)
            dp[i][j] = 0;
    KMP();
    //cout<<"0"<<endl;
    //recurse(0,0);

    for(int i=T.size()-1;i>=0;i--) {
        for(int j=0;j<2;j++) {
            dp[i][j] = dp[i+1][j];
            if(match[i]) {
                dp[i][j] += dp[i+P.size()][1] + 1;
            }
            dp[i][j] %= mod;
        }
    }
    // for(int i=0;i<T.size();i++)
    //     cout<<dp[i][0]<<" "<<dp[i][1]<<endl;
    cout<<dp[0][0]<<endl;
    return 0;
}