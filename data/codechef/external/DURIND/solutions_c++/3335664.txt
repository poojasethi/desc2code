#include<iostream>
#include<map>
#include<cstdio>
#include<vector>
#define rep(i,a,b) for(int i=a;i<b;i++)
#define cin(n) scanf("%d",&n)
#include<algorithm>
#include<cstring>
#define ill long long
#define mod 1000000007
 
using namespace std;
void computeLPSArray(char *pat, int M, int *lps);
bool flag[500008];
void KMPSearch(char *pat, char *txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
 
    // create lps[] that will hold the longest prefix suffix values for pattern
    int *lps = (int *)malloc(sizeof(int)*M);
    int j  = 0;  // index for pat[]
 
    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);
 
    int i = 0;  // index for txt[]
    while(i < N)
    {
      if(pat[j] == txt[i])
      {
        j++;
        i++;
      }
 
      if (j == M)
      {
        //printf("Found pattern at index %d \n", i-j);
        flag[i-1]=1;
        j = lps[j-1];
      }
 
      // mismatch after j matches
      else if(pat[j] != txt[i])
      {
        // Do not match lps[0..lps[j-1]] characters,
        // they will match anyway
        if(j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
    free(lps); // to avoid memory leak
}
 
void computeLPSArray(char *pat, int M, int *lps)
{
    int len = 0;  // lenght of the previous longest prefix suffix
    int i;
 
    lps[0] = 0; // lps[0] is always 0
    i = 1;
 
    // the loop calculates lps[i] for i = 1 to M-1
    while(i < M)
    {
       if(pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if( len != 0 )
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];
 
           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}
 
int main()
{
    int t,m,n,i,j,k,l;
    //cin(t);
    t=1;
    while(t--)
    {
        char s1[10008],s2[500019];
        scanf("%s%s",&s1,&s2);
        int dp[500009+9]={0};
        memset(flag,0,sizeof(flag));
        KMPSearch(s1,s2);
        int len=strlen(s2),len2=strlen(s1);
		
		//for(i=0;i<len;i++)
        //	cout<<flag[i]<<" ";
        	
        for(i=0;i<len;i++)
        {
            if(i>0)
                dp[i]=dp[i-1];
            if(i>=len2-1&&flag[i])
            {
                if(i>len2-1)
                    dp[i]=(dp[i]+dp[i-len2])%mod;
                dp[i]=(dp[i]+1)%mod;
            }
        }
        cout<<dp[len-1]<<"\n";
    }
    return 0;
}
 