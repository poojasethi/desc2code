#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>
using namespace std;
#define ull unsigned long long
char key[10001];
char lock[500001];
int lsp[10001];
ull dp[500001];
int is[10001];
vector<int> v;
int pat;
void make_lsp()
{
	lsp[0] = 0;
	int l = 0;
	for (int i = 1; key[i]; ) {
		if (key[i] == key[l]) {
			l++;
			lsp[i++] = l;
		}
		else if (l){
			l = lsp[l-1];
		}
		else {
			lsp[i++] = 0;
		}
	}
}
void kmp()
{
	int i = 0; // patter index
	int j = 0; // text index
	pat = strlen(key);
	for (j = 0; lock[j]; ) {
		if (key[i] == lock[j]) {
			i++;
			j++;
		}
		else if (i) {
			i = lsp[i-1];
		}
		else {
			j++;
		}
		if (i == pat) {
			v.push_back(j-pat);
			//printf("%d\n",j-pat);
			i = lsp[i-1];
		}
	}
}
ull mod(ull x)
{
	return x%1000000007;
}
ull find ()
{
	/*if (x >= v.size()) return 1;
	if (is[x]) return dp[x];
	int one = lower_bound(v.begin(),v.end(),v[x]+pat)-v.begin();
	int zero = x+1;
	ull ans = mod(find(one)+find(zero));
	is[x] = 1;
	dp[x] = ans;
	return ans;*/
	int n = v.size();
	int i = n-1;
	dp[i] = 2;
	for (i = i-1; i >= 0; i--) {
		int x = lower_bound(v.begin(),v.end(),v[i]+pat)-v.begin();
		ull temp = x < n ? dp[x] : 1;
		temp += dp[i+1];
		dp[i] = mod(temp);
	}
	return dp[0];
}
int main()
{
	scanf("%s",key);
	scanf("%s",lock);
	make_lsp();
	kmp();
	if (v.size() == 0) printf("0\n");
	else printf("%llu\n",mod(find()+1000000006));
	return 0;
}
