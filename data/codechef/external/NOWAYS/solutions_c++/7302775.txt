#include<iostream>
using namespace std;
#include<vector>
 #define mod 1000000007
vector<long long> f(100005+1,1);
void fun(){
 
    for (int i=2; i<=100005;i++)
        f[i]= (f[i-1]*i) % mod;
}
long long pow(int a, int b, int MOD)
{
    long long x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}
 
/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(int n, int MOD)
{
    return pow(n,MOD-2,MOD);
}
 
long long C(int n, int r, int MOD)
{
 
    return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}
int main()
{    
   int t;
   cin >>t;
   fun();
   while(t--)
   {
    int MOD=1000000007;
       int n,k;
       cin >>n>>k;
       cout << C(n,k,MOD) <<endl;
   }
   return 0;
}
