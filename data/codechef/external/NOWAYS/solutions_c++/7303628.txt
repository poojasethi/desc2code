#include <bits/stdc++.h>
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iostream>
#include <list>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <sstream>
#include <string>

#define pc putchar_unlocked
#define inchar getchar_unlocked
#define popcount(n)   __builtin_popcount(n) //number of 1 in a binary number
#define popcountl(n)  __builtin_popcountll(n) //number of 1 in a binary number
#define ctz(x)        __builtin_ctz(x) //number of trailing zeroes in a digit
#define ctzl(x)       __builtin_ctzll(x)
#define clz(x)        __builtin_clz(n)
#define clzl(x)       __builtin_clzll(x) //number of leading zeroes in a digit
#define REP(i,n) for(__typeof(n) i=0; i<(n); i++)
#define REP2(i,n) for(__typeof(n) i=1; i<=(n); i++)
#define FOR(i,a,b) for(__typeof(b) i=(a); i<=(b); i++)
#define rep(i,a,b)           for(int i=(a);i<=(b);++i)
#define INF (1<<30)
#define PI 3.14159265358979323846264338327950
#define PB(x) push_back(x)
#define ALL(x) x.begin(),x.end()
#define SZ size()
#define eps 1e-9
#define VI vector<int>
#define VS vector<string>
#define LL long long int
#define MII map<int,int>
#define MSI map<string,int>
#define MIS map<int,string>
#define CLEAR(x) memset(x,0,sizeof(x));
#define mem(x,y) memset(x,y,sizeof(x));
#define MAX(a,b) (a>b?a:b)
#define MIN(a,b) (a<b?a:b)
#define pi 2*acos(0.0)
#define mod 1000000007


using namespace std;

/*inline int fastread(){   // fast input taking function
    int n, ch;
    while ((ch = inchar()) < '0');
    n = (ch - '0');
    while ((ch = inchar()) >= '0')
        n = (n << 3) + (n << 1) + (ch - '0');
    return n;
}*/

/*inline void fastwrite(int n){ //fast output function
    char ch[15];
    int ind=0;
    if(n<0){
        pc('-');
        n *= -1;
    }
    if(n == 0){
        pc('0');
    }
    while(n > 0){
        ch[ind] = n%10 + '0';
        n /= 10;
        ind++;
    }
    while(ind--) pc(ch[ind]);
    pc('\n');
}*/

inline LL MODexp(LL a,LL b,const LL &MOD){LL x=1;while(b>0){if(b&1){x*=a;if(x>=MOD)x%=MOD;};b>>=1;a*=a;if(a>=MOD)a%=MOD;}return x;}
inline LL invMOD(const LL &a,const LL &MOD){return MODexp(a,MOD-2,MOD);}
inline LL comb(const LL &N,LL R,const LL &MOD){R>(N-R)?(R=N-R):R;LL mul=1LL;rep(i,0,R-1) mul=((mul*(N-i))%MOD*invMOD(i+1,MOD))%MOD;return mul;}

/*int pop_count(int v) { // fast popcount function
    v = v - ((v >> 1) & 0x55555555);
    v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
    return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
}*/

/*long long npr(long long n,long long m)
{
   long long ret=1,i;
   for(i=1;i<=m;i++)
   ret*=(n-i+1);
   return ret;
}*/
/*long long ncr(long long n,long long m)
{
   long long ret=1,i;
   for(i=1;i<=m;i++)
   {
       ret*=(n-i+1);
       ret/=i;
   }
   return ret;
}*/
/*long long fact(long long n)
{
    long long ret=1,i;
    for(i=1;i<=n;i++)
    ret*=i;
    return ret;
}*/
/*long long gcd(long long n,long long m)
{
  while(m>0)
  {
    n=n%m;
    n=n^m;
    m=m^n;
    n=n^m;
  }
  return n;
}*/
/*long long lcm(long long n,long long m)
{
    long long x=(n*m)/gcd(n,m);
    return x;
}*/
/*long long is_prime(long long n)
{
    long long ii;
    if(n == 1)
    return 0;
    if(n == 2)
    return 1;
    if(n%2 == 0)
    return 0;
    for(ii=3;ii*ii<=n;ii=ii+2)
        if(n%ii == 0)
        return 0;
        return 1;
}*/
/*double area_triangle(double x1,double y1,double x2,double y2,double x3,double y3)
{
    double a;
    a=x1*(y2-y3)+y1*(x3-x2)+((x2*y3)-(y2*x3))+eps;
    a=a/2+eps;
    return a;
}*/
/*double dist_2point(double x1,double y1,double x2,double y2)
{
    double d;
    d=sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2)));
    return d;
}*/
/*int binary_search(int a[],int n,int l,int u)
{
    int mid;
    if(l>u)
    return 0;
    mid=floor(l+u)/2;
    if(a[mid]==n)
    return mid;
    else if(a[mid]>n)
    binary_search(a,n,l,mid-1);
    else
    binary_search(a,n,mid+1,u);
}*/
/*bool is_palindrome(const string &s, int start, int end)
{
    int siz=end-start+1;
    if(siz%2==0)
    {
        int middle=start+siz/2;
        int i;
        for(i =0;middle-1-i>=0&&middle+i<=end&&s[middle-1-i]==s[middle+i];i++);
        if(middle-i-1<0||middle+i>end)
        return true;
    }
    else
    {
        int middle = start + siz/2;
        int i;
        for (i=1;middle-i>=0&&middle+i<=end&&s[middle-i]==s[middle+i];i++);
        if (middle-i<0||middle+i>end)
        return true;
    }
    return false;
}*/

long long i,j,k,l,m,n,p,q,r,t,x,z,ans,res,sum,cnt;
vector<long long>v,vv;
set<long long>st;
map<long long,long long>mp,mmp;
string s,ss,str;

int main()
{
    ios_base::sync_with_stdio(false);

    cin>>t;
    while(t--)
    {
        cin>>n>>k;
        if(n<k) cout<<"0\n";
        else cout<<comb(n,k,mod)<<endl;
    }
}
