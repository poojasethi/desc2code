#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>

using namespace std;

inline long long pow(long long int a, long long int b, long long int MOD)
{
	long long x=1,y=a;
	while(b > 0)
	{
		if(b%2 == 1)
		{
			x=(x*y);
			if(x>MOD) x%=MOD;
		}
		y = (y*y);
		if(y>MOD) y%=MOD;
		b /= 2;
	}
	return x;
}

/* 	Modular Multiplicative Inverse
	Using Euler's Theorem
	a^(phi(m)) = 1 (mod m)
	a^(-1) = a^(m-2) (mod m) */
inline long long InverseEuler(long long int n, long long int MOD)
{
	return pow(n,MOD-2,MOD);
}

inline long long C(int n, int r,long long int MOD)
{
	long long mul=1,fn,fr,fn_r;
	for (int i=2; i<=n;i++)
		{
		    mul*=i;
		    mul%=MOD;

		    if(i==n)
                fn=mul;
            if(i==r)
                fr=mul;
            if(i==(n-r))
            {
                fn_r=mul;
            }
            if((n-r)==0)
                fn_r=1;
            if((n-r)==1)
                fn_r=1;
            if(r==1||r==0)
                fr=1;
		}

	return (fn*((InverseEuler(fr, MOD) * InverseEuler(fn_r, MOD)) % MOD)) % MOD;
}

int main()
{
    int t,n,k;
    scanf("%d", &t);
    while(t--)
    {
        scanf("%d", &n);
        scanf("%d", &k);
        if(n==0 && k==0)
        {
            printf("%d\n", 0);
        }
        else if(k==0&&n>0)
            printf("%d\n", 1);
        else if(k==1 && n==1)
            printf("%d\n", 1);
        else if(k<=n)
            printf("%lld\n", C(n,k,1000000007));
        else
            printf("%d\n", 0);
    }
}
