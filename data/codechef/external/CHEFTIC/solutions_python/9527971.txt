
def read():
    return map(int, raw_input().split())

def is_X(c):
    if c == 'X':
        return 1
    else:
        return 0

T = read()[0]

for n in range(T):
    N, K = read()

    Box =[None for i in range(N)]
    for i in range(N):
        s = raw_input()
        Box[i] = list(s)
        
    H1 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    V1 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    D1 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    D3 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    
    H2 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    V2 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    D2 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    D4 = [ [0 for i in range(0, N)]  for j in range(0, N)]

    H1[0][0] = V1[0][0] = D1[0][0] = D3[i][j] = is_X(Box[0][0])
    max_len = 0
    for i in range(N):
        if max_len >= K:
            break
        for j in range(N):
            if i==0 and j==0:
                continue
            c = Box[i][j]
            #horizontal
            if i > 0:
                if  is_X(c) == 0:
                    H1[i][j] = 0
                else:
                    H1[i][j] = H1[i-1][j] + 1
            else:
                H1[i][j] = is_X(c)
            #vertical
            if j > 0:
                if is_X(c) == 0:
                    V1[i][j] = 0
                else:
                    V1[i][j] = V1[i][j-1] + 1
            else:
                V1[i][j] = is_X(c)
            #diagonal
            if i>0 and j>0:
                if is_X(c) == 0:
                    D1[i][j] = 0
                else:
                    D1[i][j] = D1[i-1][j-1] + 1
            else:
                D1[i][j] = is_X(c)
            #diagonal
            if i>0 and j < N-1:
                if is_X(c) == 0:
                    D3[i][j] = 0
                else:
                    D3[i][j] = D3[i-1][j+1] + 1
            else:
                D3[i][j] = is_X(c)
            
            max_len = max(max_len, H1[i][j], V1[i][j], D1[i][j], D3[i][j])

    if max_len >= K:
        print 'YES'
        continue
        
    H2 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    V2 = [ [0 for i in range(0, N)]  for j in range(0, N)]
    D2 = [ [0 for i in range(0, N)]  for j in range(0, N)]

    H2[N-1][N-1] = V2[N-1][N-1] = D2[N-1][N-1] = is_X(Box[N-1][N-1])
    max_len = 0
    l = range(N)[::-1]
    for i in l:
        if max_len >= K:
            break
        for j in l:
            if i==N-1 and j==N-1:
                continue
            c = Box[i][j]
            #horizontal
            if i < N-1:
                if  is_X(c) == 0:
                    H2[i][j] = 0
                else:
                    H2[i][j] = H2[i+1][j] + 1
            else:
                H2[i][j] = is_X(c)
            #vertical
            if j < N-1:
                if is_X(c) == 0:
                    V2[i][j] = 0
                else:
                    V2[i][j] = V2[i][j+1] + 1
            else:
                V2[i][j] = is_X(c)
            #diagonal
            if i<N-1 and j<N-1:
                if is_X(c) == 0:
                    D2[i][j] = 0
                else:
                    D2[i][j] = D2[i+1][j+1] + 1
            else:
                D2[i][j] = is_X(c)
            #diagonal
            if i < N-1 and j>0:
                if is_X(c) == 0:
                    D4[i][j] = 0
                else:
                    D4[i][j] = D4[i+1][j-1] + 1
            else:
                D4[i][j] = is_X(c)
            
            max_len = max(max_len, H2[i][j], V2[i][j], D2[i][j], D4[i][j])

    if max_len >= K:
        print 'YES'
        continue
    
    max_len = 0
    for i in range(N):
        for j in range(N):
            if Box[i][j] == '.':
                h = v = d = d2 = 0
                if i > 0:
                    h += H1[i-1][j]
                if j > 0:
                    v += V1[i][j-1]
                if i>0 and j>0:
                    d += D1[i-1][j-1]
                if i>0 and j < N-1:
                    d2 += D3[i-1][j+1]
               
                if i < N-1:
                    h += H2[i+1][j]
                if j < N-1:
                    v += V2[i][j+1]
                if i<N-1 and j<N-1:
                    d += D2[i+1][j+1]
                if i < N-1 and j>0:
                    d2 += D4[i+1][j-1]
                
                max_len = max( max_len, h+1, v+1, d+1, d2+1 )
                if max_len >= K:
                    break

    if max_len >= K:
        print 'YES'
        continue
    else:
        print 'NO'
    
        

    