/**
* He who forgives and acxnowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <climits>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define tracx(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define tracxarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define tracxvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define tracxcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

typedef long long ll;
typedef pair<int,int> ii;

const int MAX = 100005;
const int MOD = 1000000000+7;
const int INF = 1000000000;

int n, K;

bool checkH(char board[][25]) {
    for (int i = 0; i < n; i++) {
        int cx = 0, co = 0;

        for (int j = 0; j < K; j++) cx += (board[i][j]=='X'), co += (board[i][j]=='O');
        if ((cx == K-1) && (co == 0)) return true;

        for (int j = K; j < n; j++) {
            cx += board[i][j]=='X';
            cx -= board[i][j-K]=='X';

            co += board[i][j]=='O';
            co -= board[i][j-K]=='O';

            if ((cx == K-1) && (co == 0)) return true;
        }
    }
    return false;
}

bool checkD(char board[][25]) {
    int cx = 0;
    for (int i = 0; i <= n-K; i++) {
        for (int j = 0; j <= n-K; j++) {
            int cx = 0, co = 0;
            for (int k = 0; k < K; k++) cx += (board[i+k][j+k]=='X'), co += (board[i+k][j+k]=='O');
            if ((cx == K-1) && (co == 0)) return true;
        }
    }
    return false;
}

void flipH(char board[][25], char flipped[][25]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) flipped[i][n-1-j] = board[i][j];
    }
}

void flipV(char board[][25], char flipped[][25]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) flipped[n-1-i][j] = board[i][j];
    }
}

void transpose(char board[][25], char transpose[][25]){
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) transpose[j][i] = board[i][j];
    }
}

int main() {
    int t;
    scanf("%d", &t);
    while(t--) {
        scanf("%d%d", &n, &K);
        char board[25][25];
        for (int i = 0; i < n; i++) scanf("%s", board[i]);
        char flippedH[25][25], flippedV[25][25], flippedHV[25][25], transposed[25][25];

        flipH(board, flippedH);
        flipV(board, flippedV);

        flipV(flippedH, flippedHV);

        transpose(board, transposed);

        bool flag = false;
        flag = checkH(board) | checkH(transposed) | checkD(board) | checkD(flippedV) | checkD(flippedH) | checkD(flippedHV);

        if (flag) printf("YES\n");
        else printf("NO\n");
    }
}
