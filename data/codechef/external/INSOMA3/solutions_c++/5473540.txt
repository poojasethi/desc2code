/*
Template belongs to : Himanshu Jaju [himanshujaju]
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define GI(x)     scanf("%d",&x);
#define GLL(x)    scanf("%lld",&x);
#define GSTR(x)   scanf("%s",x);

#define PI(x)     printf("%d",x);
#define PLL(x)    printf("%lld",x);
#define PSTR(x)   printf("%s",x);;

#define FOR(i,a,b)      for(int i=a;i<b;i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007

LL inversions = 0;

VI mergeSort(VI a)
{
      VI left;
      VI right;
      int n = sz(a);
      if(n <= 1) return a;
      int mid = n/2;
      FOR(i,0,mid) left.pb(a[i]);
      FOR(i,mid,n) right.pb(a[i]);
      left = mergeSort(left);
      right = mergeSort(right);

      int i = 0 ,j = 0, k = 0;
      while(i<sz(left) && j<sz(right))
      {
            if(left[i] < right[j])
            {
                  a[k] = left[i];
                  k++;
                  i++;
                  inversions += j;
            }
            else
            {
                  a[k] = right[j];
                  k++;
                  j++;
            }
      }
      while(i<sz(left))
      {
            a[k] = left[i];
            k++;
            i++;
            inversions += j;
      }
      while(j<sz(right))
      {
            a[k] = right[j];
            j++;
            k++;
      }
      return a;
}

int main()
{
      inp_s;
      int p = 0;
//      DRT()
      {
            inversions = 0;
            int n,k;
            cin>>n;
            VI arr(n);
            FOR(i,0,n) cin>>arr[i];
            arr = mergeSort(arr);
            cout<<inversions<<endl;
      }
      return 0;
}
