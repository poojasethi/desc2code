#include<stdlib.h>
#include<stdio.h>
long long int count;
/* Function to merge the two haves arr[l..m] and arr[m+1..r] of array arr[] */
long long int merge(long long int arr[],long long int l,long long int m, long long int r)
{
    long long int i, j, k;
    long long int n1 = m - l + 1;
    long long int n2 =  r - m;
 
    /* create temp arrays */
  long long int L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
            count+=n1-i;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
    return 0;
}
 
/* l is for left index and r is right index of the sub-array
  of arr to be sorted */
long long int mergeSort(long long int arr[],long long int l,long long int r)
{
    if (l < r)
    {
      long long int m = l+(r-l)/2; //Same as (l+r)/2, but avoids overflow for large l and h
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
    return 0;
}
 
 
/* UITLITY FUNCTIONS */
/* Function to print an array */
/*void printArray(int A[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}*/
 
/* Driver program to test above functions */
int main()
{
	
		count =0;
		long long int arr_size;
		scanf("%lld",&arr_size);
		 
   long long int arr[arr_size],i;
   for( i=0;i<arr_size;i++) 
    scanf("%lld",&arr[i]);
    //int arr_size = sizeof(arr)/sizeof(arr[0]);
 
   // printf("Given array is \n");
    //printArray(arr, arr_size);
 
    mergeSort(arr, 0, arr_size - 1);
	printf("%lld\n",count);
    //printf("\nSorted array is \n");
    //printArray(arr, arr_size);
	
    return 0;
}