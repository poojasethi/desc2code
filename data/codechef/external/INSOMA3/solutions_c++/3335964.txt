#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<list>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<cmath>
#include<cctype>
#include<cstring>
#include<string>
#include<ctime>
#include<cassert>
using namespace std;
#ifdef _WIN32
#include<conio.h>
#endif
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;
#define FOR(i,a,b) for(int i=(a);i< (b);i++)
#define input(a) scanf("%d",&a)
#define CLEAR(a) memset((a),0,sizeof(a))
#define INF 1000000000
#define LL long long
#define PI 2*acos(0.0)
#define sqr(a) (a)*(a)
#ifdef ONLINE_JUDGE
inline int read()
{
    char temp;
    int x=0;
    temp=getchar_unlocked();
    while(temp<48)temp=getchar_unlocked();
    x+=(temp-'0');
    temp=getchar_unlocked();
    while(temp>=48)
    {
        x=x*10;
        x+=(temp-'0');
        temp=getchar_unlocked();
    }
    return x;
}
inline void write(int a)
{
  char snum[20];
  int i=0;
  do
  {
    snum[i++]=a%10+48;
    a=a/10;
  }while(a!=0);
  i--;
  while(i>=0)
  putchar_unlocked(snum[i--]);
  putchar_unlocked('\n');
}
inline void readstr(char *s)
{
   char ch=0;
   int i=0;
   while(ch<33)
      ch=getchar_unlocked();
   while(ch!='\n')
   {
      s[i]=ch;
      ch=getchar_unlocked();
      i++;
   }
   s[i]='\0';
}
#endif
#define MAX 100005
//split inversion count;
int merge(int a[],int b[],int left,int mid,int right)
{
	int i,j,k;
	int count=0;
	i=left;
	j=mid+1;
	k=left;
	while((i<=mid)&&(j<=right))
	{
		if(a[i]<=a[j])
		  b[k++]=a[i++];
		else
		{
			b[k++]=a[j++];
			count +=(mid-i+1);
		}
	}
	while(i<=mid)
	  b[k++]=a[i++];
	while(j<=right)
	  b[k++]=a[j++];
	for(i=left;i<=right;i++)
	  a[i]=b[i];
	return count;
}
int merge_sort(int a[],int b[],int left,int right)
{
	int mid;
	int count=0;
	if(left<right)
	{
		mid=(left+right)>>1;
		count=merge_sort(a,b,left,mid);
		count +=merge_sort(a,b,mid+1,right);
		count +=merge(a,b,left,mid,right);
	}
	return count;
}
int main()
{
	int a[MAX];
	int b[MAX];
	int n;
	input(n);
	FOR(i,0,n)
	  input(a[i]);
	int ans=merge_sort(a,b,0,n-1);
	cout<<ans;
	return 0;
}
