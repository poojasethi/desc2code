/* theCodeGame */

#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;


/*
Fenwick tree for
    1. Point update and Range Query
    2. Range update and Point Query
*/
template<class T>
class Fenwick{

    T *tree;
    int N;

    public:

    Fenwick(int n){
        N = n;
        tree = new T[N+5];
        //memset(tree,0,sizeof(tree));
        fill(tree,tree+N+5,0);
    }

    ~Fenwick(){
        delete []tree;
    }

    /* returns sum for [1...b] */
    T sum(int idx){
        T ret = 0;
        while(idx>0){
            ret += tree[idx];
            idx -= (idx&-idx);
        }
        return ret;
    }
    /* returns sum for [a...b] */
    T sum(int a, int b){
        T ret = sum(b);
        if(a>1){
            ret -= sum(a-1);
        }
        return ret;
    }

    /* increments index idx by inc */
    void update(int idx, T inc){
        while(idx<=N){
            tree[idx] += inc;
            idx += (idx&-idx);
        }
    }

    /* increments [a...b] indices by inc */
    void update(int a, int b, T inc){
        update(a,inc);
        update(b+1,-inc);
    }

};

typedef long long int LL;

int main(){
    #ifdef LOCAL
        freopen("D:\\A\\in.txt","r+",stdin);
        freopen("D:\\A\\out.txt","w+",stdout);
    #endif // LOCAL
    int T;
    //scanf("%d",&T);
    T = 1;
    for(int t=1;t<=T;t++){
        int N,x;
        scanf("%d",&N);
        vector<int>arr,brr;
        for(int i=0;i<N;i++){
            scanf("%d",&x);
            arr.push_back(x);
        }
        brr = arr;
        sort(brr.begin(),brr.end());
        for(int i=0;i<N;i++){
            int idx = int(lower_bound(brr.begin(),brr.end(),arr[i])-brr.begin());
            arr[i] = idx+1;
        }
        LL inv = 0;
        Fenwick<LL>ft(N);
        for(int i=N-1;i>=0;i--){
            inv += ft.sum(arr[i]-1);
            ft.update(arr[i],1);
        }
        printf("%lld\n",inv);
    }
    return 0;
}
