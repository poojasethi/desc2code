#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<vector>
#include<list>
#include<set>
#include<deque>
#include<cmath>
 
#define FOR(i,j,k,l) for(((i)=(j));((i)<(k));((i)+=(l)))
#define REP(i,n) for((i)=0;(i)<(n);(i)++)
#define ABS(x) (((x)>=0)?((x)):(-(x)))
#define SWAP(x,y) do{x^=y;y^=x;x^=y;}while(0)
#define MOD (1000000007)
//#define min(a,b) ((a<b)?(a):(b))
//#define max(a,b) ((a>b)?(a):(b))
typedef long long int ll;
typedef long double ld;
 
#define FEQ(x,y) (ABS((x)-(y))<0.000002)
using namespace std;
int getint(){
	char c=getchar_unlocked();
	int r=0;int ismin=0;
	while(c>0 && (c<'0' || c>'9') ){
	  if(c=='-'){
	    ismin=1;
	  }else ismin=0;
	  c=getchar_unlocked();
	}
	while(c>0 && (c>='0' && c<='9')){
		r*=10;
		r+=(int)(c-'0');
		c=getchar_unlocked();
	}
	if(ismin){return -r; }else return r;
}
ll getll(){
	char c=getchar_unlocked();
	ll r=0;int ismin=0;
	while(c>0LL && (c<'0' || c>'9')){
	  if(c=='-'){
	    ismin=1;
	  }else ismin=0;
	  c=getchar_unlocked();
	}
	while(c>0 && (c>='0' && c<='9')){
		r*=10LL;
		r+=(ll)(c-'0');
		c=getchar_unlocked();
	}
	if(ismin){return -r; }else return r;
 
}
template<typename T>
int split_inv(T* A, int len, T* MA);
template<typename T>
int count_split_inv(T *A, int len){
  T *MA=(T *)malloc(len*sizeof(T));// MA is merging temp array
  int x= split_inv(A, len, MA);
  free(MA);
  return x;
}
template<typename T>
int split_inv(T* A,int len, T *MA){
  if(len>1){
    int l,r,s;
    l=split_inv(A,len/2,MA);
    r=split_inv(A+len/2,len-len/2,MA);s=0;
    int fi=0,si=len/2,mi=0;
    while(fi<len/2 && si< len){
      if(A[fi]<A[si]){MA[mi++]=A[fi++];}else{s+=len/2-fi; MA[mi++]=A[si++];
      }
    }
    while(fi<len/2){MA[mi++]=A[fi++];}
    while(si<len){MA[mi++]=A[si++];}
    while(mi--){A[mi]=MA[mi];}
    return l+r+s;
  }else return 0;
}
int main() {
  int nin, inum;
  int x, y, z, i, j, k, n;
  cin >> n;//>>nin;
  nin=1;
  int *X=(int *)malloc(n*sizeof(int));
  FOR(inum, 0, nin, 1) {
    //each test case
    for(i=0;i<n;i++)X[i]=getint();
    printf("%d\n",count_split_inv(X,n));
 
  }
 
  return 0;
}
 