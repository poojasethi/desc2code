//SPOJ--Inversion Count
#include<bits/stdc++.h>
#define MAX 200005

using namespace std;

typedef long long int lli;

inline void fast_read(lli *number){
	
	*number=0;
	register char currentChar=getchar_unlocked();
	
	while(currentChar<'0'||currentChar>'9')
	   currentChar=getchar_unlocked();
	   
	while(currentChar>='0'&&currentChar<='9'){
		
		*number=*number*10+currentChar-'0';		
		currentChar=getchar_unlocked();
			
	}   
	
}


lli array[MAX];

void invCnt(lli *,lli );
lli mergeBack(lli *,lli *,lli *,lli ,lli );

lli ans=0;

int main(void){
	
	lli testCases,totalNumbers,i;	
	scanf("%lld",&totalNumbers);
		
	ans=0;
		
	for(i=0;i<totalNumbers;i++)
	   fast_read(&array[i]);
		   
		   //scanf("%lld",&array[i]);
		
	invCnt(array,totalNumbers);
		
	printf("%lld\n",ans);
			
	
	
	return 0;
	
}   

void invCnt(lli *arr,lli totalElements){
	
	if(totalElements<=1)
	   return ;
	
	//1 2 3 4 
	
	lli mid=(totalElements)/2,i;
	
	lli *arr1,*arr2;
	
	arr1=(lli *)malloc(sizeof(lli)*(mid));
	arr2=(lli *)malloc(sizeof(lli)*(totalElements-mid));
	
	for(i=0;i<mid;i++)
	   arr1[i]=arr[i];
	   
	for(i=mid;i<totalElements;i++)
	   arr2[i-mid]=arr[i];   
	
	invCnt(arr1,mid);
	invCnt(arr2,totalElements-mid);
	
	ans+=mergeBack(arr,arr1,arr2,mid,totalElements-mid);
		
//	free(arr1);
//	free(arr2);
		
	
}   
     
lli mergeBack(lli *arr,lli *arr1,lli *arr2,lli n1,lli n2){
	
	lli i=0,j=0,totalCount=0,totalInversions=0;
	
	while(i<n1&&j<n2){
		
		if(arr1[i]>arr2[j]){
			
			arr[totalCount++]=arr2[j++];
			totalInversions+=(n1-i);
			
		}
		   
		
		else arr[totalCount++]=arr1[i++];	
		
	}
	
    while(i<n1)	
    	arr[totalCount++]=arr1[i++];
      	

    while(j<n2)	
       arr[totalCount++]=arr2[j++];   
	
	return totalInversions;
	
}   

void swap(lli *n1,lli *n2){
	
	lli temp=*n1;
	*n1=*n2;
	*n2=temp;
	
}