#include<stdio.h>
#include<iostream>
long copy[1000000];   //dummy array to hold intermediate values
long long count=0;
void mergesort(long long *s,long long lb,long long ub)  //lb and ub is the position of the first and last element of sub array resp
{ if(lb==ub) return;
  long mid=(lb+ub)/2,j=lb,k=mid+1;  
  mergesort(s,lb,mid);
  mergesort(s,mid+1,ub);
  long a=0;    //counts the number of elements in right subarray which are smaller than the current element in the left subarray
  for(long i=lb;i<=ub;)
     { if(s[j]<=s[k]) 
	     { copy[i++]=s[j++];
		   a=0;
	     }
	   else
	       { copy[i++]=s[k++];
		     a++;
		   }     
	   if(s[j]<=s[k] || k==ub+1)
	     count+=a*(mid-j+1);    	   
	   if(j==mid+1)
	     { while(k<=ub)
	            copy[i++]=s[k++];
	       break;    
	     } 
	   if(k==ub+1)
	     { while(j<=mid)
	            copy[i++]=s[j++];
	       break;     
	     }       
     }  
  for(long i=lb;i<=ub;i++)
     s[i]=copy[i];   
}
int main()
{ long long s[100000],n;
  scanf("%lld",&n);
  for(long i=0;i<n;i++)
     scanf("%lld",&s[i]);
  mergesort(s,0,n-1);
  printf("%lld ",count);   
}