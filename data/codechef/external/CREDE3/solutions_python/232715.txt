/*	  CREDE3  The Grid					*/
/*     Assume dimension <= M = 1000		*/

# include <stdio.h>
# define M 1000

int main()
{    
	int it,i,j,T,R,data,max,delay,a[M][M];
	char ch;
	scanf("%d\n",&T);		// Get number of cases			
		
	for(it=0; it<T; it++) {	 
		scanf("%d",&R);  // Get number of rows
//		printf(" *Dim %d\n",R);
		for(i=0; i<R; i++) { // get block delay
			for(j=0; j<R; j++)
			{	scanf("%d",&data);
				a[i][j] = data;
			}
		}
		for(i=R-1; i>0; i--) { // propagate bottom up
			if(a[i][0] > a[i][1]) a[i-1][0] = a[i-1][0] + a[i][0];
			else				  a[i-1][0] = a[i-1][0] + a[i][1];
//			printf("  Left a[%d][%d] = %d",i-1,0,a[i-1][0]); 
			for(j=1; j<R-1; j++)  // mid row with 3 below  
			{					max = a[i][j-1];
				if(a[i][j  ] > max) max = a[i][j  ];
				if(a[i][j+1] > max) max = a[i][j+1];
				a[i-1][j] = max + a[i-1][j];
//				printf("  Mid a[%d][%d] = %d",i-1,j,a[i-1][j]); 
			}					// right end just 2 below
			if(a[i][R-1] > a[i][R-2]) a[i-1][R-1] = a[i-1][R-1] + a[i][R-1];
			else					  a[i-1][R-1] = a[i-1][R-1] + a[i][R-2];
//			printf("  Right a[%d][%d] = %d",i-1,R-1,a[i-1][R-1]); 
		}
		delay = a[0][0];
		for(i=1; i<R; i++)		// find max of top row
			if(a[0][i] > delay) delay = a[0][i];

		if(R == 0) delay = 0;	// special cases dim = 0
		if(R == 1) delay = a[0][0];  // and dim = 1
		printf("\n%d",delay);
		if(it < T-1)		// skip blank input line
			scanf("%c",ch);
	}
	printf("\n");
	return (0);					
}			