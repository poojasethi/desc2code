#include <bits/stdc++.h>

#define ll long long

#define SZ(x) (int)(x).size()
#define pb push_back

template<class T>inline void chkmax(T &x, const T &y) {if(x < y) x = y;}
template<class T>inline void chkmin(T &x, const T &y) {if(x > y) x = y;}

template<class T>
inline void read(T &x) {
    char c;int f = 1;x = 0;
    while(((c=getchar()) < '0' || c > '9') && c != '-');
    if(c == '-') f = -1;else x = c-'0';
    while((c=getchar()) >= '0' && c <= '9') x= x*10+c-'0';
    x *= f;
}
int outn;
char out[(int)1e7];
template<class T>
inline void write(T x) {
    if(x < 0) out[outn++] = '-', x = -x;
    if(x) {
        static int tmpn;
        static char tmp[20];
        tmpn = 0;
        while(x) tmp[tmpn++] = x%10+'0', x /= 10;
        while(tmpn) out[outn++] = tmp[--tmpn];
    }
    else out[outn++] = '0';
}

const int N = 1e5;
const int INF = 1e9;

int n, MOD;
int w[N+9];
struct graph {
    int sz, head[N+9], to[N*2+9], ne[N*2+9];
    graph() {
        sz = 1, memset(head, 0, sizeof head);
    }
    inline void addedge(int u, int v) {
        to[sz] = v, ne[sz] = head[u], head[u] = sz++;
        to[sz] = u, ne[sz] = head[v], head[v] = sz++;
    }
}g;

int h[N*3+9][2];
int s[N*3+9][2];
int f[N*3+9];
bool vis[N*3+9];
std::vector<std::pair<int,int> > d[N+9];
int dfn[N+9], tot, size[N+9], fe[N+9];

int qn;

#define inv(x) ((((x)-1)^1)+1)

void dp(int now, int x) {
    if(vis[x]) return ;
    vis[x] = true, h[x][0] = h[x][1] = 1, s[x][0] = s[x][1] = w[now]%MOD;
    for(int i = g.head[now], to, y; i; i = g.ne[i])
        if(x <= n || i != inv(x-n)) {
            dp(to = g.to[i], y = i+n);
            (f[x] += f[y]) %= MOD;
            bool t = w[now] > w[to];
            (f[x] += 1ll*h[x][t]*s[y][t^1]%MOD+1ll*s[x][t]*h[y][t^1]%MOD) %= MOD;
            (h[x][t] += h[y][t^1]) %= MOD, (s[x][t] += s[y][t^1]+1ll*h[y][t^1]*w[now]%MOD) %= MOD;
        }
}

void dfs(int now, int fa) {
    dfn[now] = ++tot, size[now] = 1;
    for(int i = g.head[now], to; i; i = g.ne[i])
        if((to = g.to[i]) != fa) {
            fe[to] = i, dfs(to, now), size[now] += size[to];
            d[now].pb(std::make_pair(dfn[to], i));
        }
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("KOL15E.in", "r", stdin);
    freopen("KOL15E.out", "w", stdout);
#endif

    read(n), read(MOD);
    for(int i = 1; i <= n; ++i)
        read(w[i]);
    for(int i = 1; i < n; ++i) {
        int u, v;
        read(u), read(v);
        g.addedge(u, v);
    }
    for(int i = 1; i <= n; ++i)
        dp(i, i);
    dfs(1, 0);
    read(qn);
    while(qn--) {
        int rt, sub;
        read(rt), read(sub);
        if(sub == rt) write(f[sub]);
        else if(dfn[sub] <= dfn[rt] && dfn[rt] <= dfn[sub]+size[sub]-1) {
            int t = std::lower_bound(d[sub].begin(), d[sub].end(), std::make_pair(dfn[rt], INF))-d[sub].begin()-1;
            write(f[inv(d[sub][t].second)+n]);
        }
        else write(f[fe[sub]+n]);
        out[outn++] = '\n';
    }
    printf("%s", out);
    
#ifndef ONLINE_JUDGE
    fclose(stdin);fclose(stdout);
#endif
    return 0;
}
