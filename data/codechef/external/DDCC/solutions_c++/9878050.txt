#include <bits/stdc++.h>
using namespace std;
#define bitcount    __builtin_popcountll
#define tr(it,c)  for(auto it=(c).begin();it!=(c).end();it++)
#define ABS(x) ((x) < 0 ? -1*(x) : (x))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define MIN(x,y) ((x) < (y) ? (x) : (y))
#define mp make_pair
#define pb push_back
#define MOD 1000000007
#define INF 2000000000
#define BINF 20000000000000000LL

using namespace std;
typedef long long ll;
typedef pair<ll,ll> pl;

struct query
{
	int id;
	int L;
	int R;
	int buck;
}queries[200010];

int buckSize;
long long int arr[200010];
long long int ncs[1000010];
long long int ans[200010];
long long int currans;

bool comp(const query &a, const query &b)
{
	if(a.buck == b.buck)
		return a.R < b.R;

	return a.buck < b.buck;
}

inline void add(int i)
{
	currans += arr[i]*(2*ncs[arr[i]] + 1);
  	++ncs[arr[i]];
}

inline void remove(int i) 
{
  	--ncs[arr[i]];
  	currans -= arr[i]*(2*ncs[arr[i]] + 1);
}

int main()
{
	int N,Q,i,j,bucks,bL,nL,bR,nR;

	scanf("%d",&N);
	scanf("%d",&Q);
	buckSize = MAX(1,sqrt(N));

	for(i = 0; i < N; ++i)
		scanf("%lld", arr+i);
	
	for(i = 0; i < Q; ++i)
	{
		scanf("%d", &queries[i].L);
		scanf("%d", &queries[i].R);
		--queries[i].L;
		--queries[i].R;
		queries[i].buck = queries[i].L/buckSize;
		queries[i].id = i;
	}

	sort(queries, queries+Q, comp);

	currans = arr[0];
	bL = 0;
	bR = 0;
	ncs[arr[0]] = 1;

	//printf("%lld\n", currans );

	for(i = 0; i < Q; ++i)
	{
		nL = queries[i].L;
		nR = queries[i].R;

		while(bL < nL)
			remove(bL++);
		while(bL > nL) 
			add(--bL);
		while(bR < nR) 
			add(++bR);
		while(bR > nR) 
			remove(bR--);		

		ans[queries[i].id] = currans;
	}

	for(i = 0; i < Q; ++i)
		printf("%lld\n", ans[i]);

	return 0;
}