import java.io.BufferedReader;
	import java.io.FileReader;
	import java.io.InputStreamReader;
	import java.util.StringTokenizer;
	import java.util.Arrays;
	 
 
	class TestClass
		{
		static int INFINITY=1000000;
		int n;
		int[][] adj;
		int[] visited;
		static int w;
	    public static void main(String args[] ) throws Exception {
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	        new TestClass().solve(br);
	        br.close();
	  }
	  void solve(BufferedReader br)throws Exception
	  {
	  	int t=Integer.parseInt(br.readLine());
	  	for(int l=0;l<t;l++)
	  	{ 
	  		StringTokenizer st=new StringTokenizer(br.readLine());
	  		n=Integer.parseInt(st.nextToken());
	  		int k=Integer.parseInt(st.nextToken());
	  		adj=new int[n+1][n+1];
 		
	  		for(int i=0;i<k;i++)
	  		{
	  			st=new StringTokenizer(br.readLine());
	  			int x=Integer.parseInt(st.nextToken());
	  			int y=Integer.parseInt(st.nextToken());
	  			int cst=Integer.parseInt(st.nextToken());
	  			adj[x][y]=cst;
	  			adj[y][x]=cst;
	  		}
  		int m=Integer.parseInt(br.readLine());
	  		int ycount=0;
	  		for(int i=0;i<m;i++)
	  		{
	  			visited=new int[n+1];
	  			st=new StringTokenizer(br.readLine());
	  			int s=Integer.parseInt(st.nextToken());
	  			int d=Integer.parseInt(st.nextToken());
	  			w=adj[s][d];
	  			dfs(s);
	  			if(visited[d]!=1)
	  			{
	  				ycount++;
	  			}
	  			
	  		}
	  		//System.out.println(ycount);
	  		int a=gcd(ycount,m);
	  		
	  		System.out.println((ycount/a)+"/"+(m/a));
	  		
	  		
	  }
	 }
	 void dfs(int n)
	   {
		 visited[n]=1;
	 	for(int i=0;i<adj[n].length;i++)
	 	{
	 		if(adj[n][i]!=0&&visited[i]==0&&adj[n][i]<w)
	 		{
	 			dfs(i);
 		}
	 	}
	 }
	 int gcd(int a,int b)
	 {
	 	if(b!=0)
	 	{
	 		return gcd(b,a%b);
	 	}	 	else
	 	{
	 		return a;
	 	}
	 }
	}
