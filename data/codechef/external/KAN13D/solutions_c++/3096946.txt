#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

typedef pair<int,int> pint;
typedef map<int,int> mint;

#define SIZE 105

LL MOD=1000000000+7;
class Matrix
{
    int N;
public:
    LL matrix[SIZE][SIZE];
    Matrix(int n= 0) {
        N = n;
    }
    int getDim() {return N;}
    void setDim( int x ){N=x;}
    Matrix operator+ (Matrix &A)
    {
        Matrix ret(N);
        int i,j;
        for (i=0; i<N; ++i)
        {
            for (j=0; j<N; ++j) ret.matrix[i][j] = (matrix[i][j] + A.matrix[i][j])%MOD;
        }
        return ret;
    }
    Matrix operator* (Matrix &A)
    {
        Matrix ret(N);
        int i,j,k;
        for (i=0; i<N; ++i)
        {
            for (j=0; j<N; ++j)
            {
                ret.matrix[i][j] = 0;
                for (k=0; k<N; ++k)
                {
                    ret.matrix[i][j] += matrix[i][k]*A.matrix[k][j];
                    ret.matrix[i][j] %= MOD;
                }
            }
        }
        return ret;
    }
    void printMatrix()
    {
        int i,j;
        puts("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        for (i=0; i<N; ++i)
        {
            for (j=0; j<N; ++j) printf("%3d ", matrix[i][j]);
            puts("");
        }
        puts("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    }
};

Matrix tmp;
Matrix A;
void bigmod( int p)
{
    A = tmp;
    p--;

    while ( p>0 ){
        if ( p & 1 ){
            tmp = tmp * A;
            p--;
        }else{
            A = A * A ;
            p = p >> 1;
        }
    }
}

LL fact[110];

int main(){

    //freopen("recurrence.in","r",stdin);

    int kase;
    scanf("%d",&kase);

    for (int kk=1;kase--;++kk){
        int n,dim;
        scanf("%d %d",&dim,&n);


        for ( int i=0;i<dim;++i ){
            scanf("%lld",&fact[i]);
            fact[i]= (fact[i]+MOD)%MOD;
        }

        for (int i=0;i<dim;++i){
            scanf("%lld",&tmp.matrix[0][dim-i-1]);
        }

        for (int i=1;i<dim;++i){
            for (int j=0;j<dim;++j){
                if ( j+1==i )
                    tmp.matrix[i][j]=1;
                else
                    tmp.matrix[i][j]=0;
            }
        }
        tmp.setDim(dim);

        if ( n<dim ){
            printf("%lld\n",fact[n] );
            continue;
        }

        bigmod( n-dim+1 );

        LL ans = 0;
        for (int i=0;i<dim;++i){
            ans=( ans+ tmp.matrix[0][i]*fact[ dim-i-1 ]   )%MOD;
        }
        if ( ans<0 ){
            ans+=MOD;
        }
        printf("%lld\n",ans);

    }


    return 0;
}
