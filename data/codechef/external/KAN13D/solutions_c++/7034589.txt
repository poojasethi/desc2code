#include<bits/stdc++.h>

#define MOD 1000000007
#define DIM 100

using namespace std;

typedef long long int ll;

int m;

void mult (ll a[][DIM], ll b[][DIM], ll c[][DIM]) {
    // a and c may be same
    queue<ll> q;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            ll s = 0;
            for (int k = 0; k < m; k++) {
                s += (a[i][k] * b[k][j]) % MOD;
                s %= MOD;
            }
            q.push(s);
        }
        for (int j = 0; j < m; j++) {
            c[i][j] = q.front();
            q.pop();
        }
    }
}

void exp (ll mat[][DIM], ll pow, ll result[][DIM]) {
    if (pow == 0) {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                if (i == j) result[i][j] = 1;
                else result[i][j] = 0;
            }
        }
        return;
    }
    ll temp_res[DIM][DIM];
    exp (mat, pow/2, temp_res);
    mult (temp_res, temp_res, result);
    if (pow%2 == 1) mult(result, mat, result);
}

int main()
{
    int i,j,t,k,n,x,y,test,cases;
    ll f[DIM], sig[DIM];
    ll mat[DIM][DIM];
    ll res[DIM][DIM];
    memset(mat, 0, sizeof(mat));
    for (i = 1; i < DIM; i++) mat[i][i-1] = 1;

    scanf("%d",&cases);
    for(test=1; test<=cases; test++) {
        scanf("%d %d", &m, &n);
        for (i = 0; i < m; i++) {
            scanf("%lld", &f[i]);
            f[i] += (2*MOD);
            f[i] %= MOD;
        }
        for (i = 0; i < m; i++) {
            scanf("%lld", &sig[i]);
        }
        if (n < m) {
            printf("%lld\n", f[n] % MOD);
            continue;
        }
        for (i = 0; i < m; i++) mat[0][i] = sig[m-1-i];
        exp (mat, n-(m-1), res);
        ll s = 0;
        for (i = 0; i < m; i++) {
             s += (res[0][i] * f[m-1-i]) % MOD;
             s %= MOD;
        }
        printf("%lld\n", s);

    }
    return 0;
}
