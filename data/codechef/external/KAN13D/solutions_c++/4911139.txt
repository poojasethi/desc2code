#include <stdio.h>
#include <string.h>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <iostream>
#include <algorithm>
#include <deque>
#include <assert.h>
#include <bitset>

using namespace std;

#define ll long long
#define clean(a,b) memset(a,b,sizeof a)
#define mod 1000000007LL
struct pq
{
    int r,c;
    ll mat[101][101];
    pq()
    {
        clean(mat, 0);
    }

    pq operator*(const pq &b)
    {
        pq tmp ;
        tmp.r = tmp.c = b.r;

        for(int i = 0 ; i<r ; i++)
        {
            for(int j = 0 ; j<b.c ; j++)
            {
                tmp.mat[i][j] = 0;
                for(int k = 0 ; k<c ; k++)
                {
                    tmp.mat[i][j] += ((ll)mat[i][k]*(ll)b.mat[k][j]);
                    if(tmp.mat[i][j]>=mod*mod) tmp.mat[i][j] -= mod*mod;
                    //tmp.mat[i][j] %= mod;
                }
                tmp.mat[i][j] %= mod;
            }
        }
        return tmp;
    }
};

pq pow(int p,pq &a)
{
//    cout<<p<<endl;
    pq ret;
    ret.r = ret.c = a.r;

    for(int i = 0 ; i<ret.c ; i++)
        ret.mat[i][i] = 1;
    while(p)
    {
        if(p&1)
        {
            ret = ret*a;
        }
        a = a*a;
        p>>=1;
    }


    return ret;
}
ll f[101];
int main()
{
    int tcase,cas=1;

    scanf(" %d",&tcase);

    while(tcase--)
    {
        int n,m;

        scanf(" %d %d",&m,&n);
        pq a;
        a.r = a.c = m;

        for(int i = 0 ; i<a.r-1 ; i++)
        {
            a.mat[i][i+1] = 1;
        }
        for(int i = 0 ; i<m  ; i++)
        {
            scanf(" %lld",&f[i]);
            f[i] += mod;
            f[i] %= mod;
        }

        for(int i = 0 ; i<m ; i++)
        {
            scanf(" %lld",&a.mat[m-1][i]);
        }

        if(n<m)
        {
            printf("%lld\n",f[n]%mod);
            continue;
        }

        pq ret = pow(n-m+1 , a);

        ll sol = 0;

        for(int i = 0; i<m ; i++)
        {
            sol += ((ll)ret.mat[m-1][i]*(ll)f[i])%(ll)mod;
            sol %= mod;
        }

        printf("%lld\n",sol);
    }
    return 0;
}
