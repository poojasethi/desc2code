#include<bits/stdc++.h>

#define MOD 1000000007
#define DIM 100

using namespace std;

typedef long long int ll;

int m;
ll mat[DIM][DIM];
ll result[DIM][DIM];
ll mult_temp[DIM][DIM];
double m1, m2, e;

void mult (ll a[][DIM], ll b[][DIM]) {
    // result = a * b
    //auto begin = chrono::high_resolution_clock::now();
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            ll s = 0;
            for (int k = 0; k < m; k++) {
                s += (a[i][k] * b[k][j]);
                if(s>MOD) s %= MOD;
            }
            mult_temp[i][j] = s;
        }
    }
    //auto end = chrono::high_resolution_clock::now();
    //m1 += chrono::duration_cast<std::chrono::microseconds>(end-begin).count();
    //auto begin2 = chrono::high_resolution_clock::now();
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            result[i][j] = mult_temp[i][j];
        }
    }
    //auto end2 = chrono::high_resolution_clock::now();
    //m2 += chrono::duration_cast<std::chrono::microseconds>(end2-begin2).count();
}

void exp (ll pow) {
    //auto begin = chrono::high_resolution_clock::now();
    if (pow == 0) {
        memset(result, 0, sizeof(result));
        for (int i = 0; i < m; i++) {
            result[i][i] = 1;
        }
        return;
    }
    //auto end = chrono::high_resolution_clock::now();
    //e += chrono::duration_cast<std::chrono::microseconds>(end-begin).count();
    exp (pow/2);
    mult (result, result);
    if (pow%2 == 1) mult(result, mat);
}

int main()
{
    int i,test,cases;
    ll n;
    ll f[DIM], sig[DIM];
    for (i = 1; i < DIM; i++) mat[i][i-1] = 1;

    scanf("%d",&cases);
    for(test=1; test<=cases; test++) {
        scanf("%d %lld", &m, &n);
        for (i = 0; i < m; i++) {
            scanf("%lld", &f[i]);
            f[i] += (2*MOD);
            f[i] %= MOD;
        }
        for (i = 0; i < m; i++) {
            scanf("%lld", &sig[i]);
        }
        if (n < m) {
            printf("%lld\n", f[n] % MOD);
            continue;
        }
        for (i = 0; i < m; i++) mat[0][i] = sig[m-1-i];
        exp (n-(m-1));
        ll s = 0;
        for (i = 0; i < m; i++) {
             s += (result[0][i] * f[m-1-i]) % MOD;
             s %= MOD;
        }
        printf("%lld\n", s);
    }
    //cout << m1 << endl;
    //cout << m2 << endl;
    //cout << e << endl;
    return 0;
}
