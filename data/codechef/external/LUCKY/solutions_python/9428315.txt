#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define getchar_unlocked getchar
typedef unsigned long long ull;
ull readInt () {
  bool minus = false;
  ull result = 0;
  char ch;
  ch = getchar_unlocked();
  while (true) {
    if (ch == '-') break;
    if (ch >= '0' && ch <= '9') break;
    ch = getchar_unlocked();
}
if (ch == '-') minus = true; else result = ch-'0';
while (true) {
    ch = getchar_unlocked();
    if (ch < '0' || ch > '9') break;
    result = result*10 + (ch - '0');
}
if (minus)
    return -result;
else
    return result;
}
ull modPow(ull a, ull x, ull p) {
    //calculates a^x mod p in logarithmic time.
    ull res = 1;
    while(x > 0) {
        if( x % 2 != 0) {
            res = (res * a) % p;
        }
        a = (a * a) % p;
        x /= 2;
    }
    return res;
}
 
ull modInverse(ull a, ull p) {
    //calculates the modular multiplicative of a mod m.
    //(assuming p is prime).
    return modPow(a, p-2, p);
}
ull modBinomial(ull n, ull k, ull p) {
// calculates C(n,k) mod p (assuming p is prime).
 
    ull numerator = 1; // n * (n-1) * ... * (n-k+1)
    for (int i=0; i<k; i++) {
        numerator = (numerator * (n-i) ) % p;
    }
 
    ull denominator = 1; // k!
    for (int i=1; i<=k; i++) {
        denominator = (denominator * i) % p;
    }
 
    // numerator / denominator mod p.
    return ( numerator* modInverse(denominator,p) ) % p;
}
int main()
{
    ios_base::sync_with_stdio(0);
    int T, N;
    cin>>T;
    cin>>N;
    while (T--)
    {
        int X, Y;
        cin>>X>>Y;
        cout<<modPow(X,Y,N)<<"\n";
    }
}
