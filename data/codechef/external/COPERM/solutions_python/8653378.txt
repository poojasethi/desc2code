#include <bits/stdc++.h>
#include <stdlib.h>
using namespace std;
long long mod=1e9+7;
 
typedef long long unsigned llu;
typedef long long int lld;
typedef long ld;
#define rep(i,a,n) for(long long int i = (a); i <= (n); ++i)
#define repI(i,a,n) for(int i = (a); i <= (n); ++i)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sc(a) scanf("%lld",&a)
#define sc2(a,b) scanf("%lld%lld",&a,&b)
#define sc3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scd(a) scanf("%d",&a)
#define scd2(a,b) scanf("%d%d",&a,&b)
#define scd3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define scf(a) scanf("%lf",&a)
#define scf2(a,b) scanf("%lf%lf",&a,&b)
#define scf3(a,b,c) scanf("%lf%lf%lf",&a,&b,&c)
#define prL(a) printf("%lld\n",a)
#define prS(a) printf("%lld ",a)
#define prdL(a) printf("%d\n",a)
#define prdS(a) printf("%d ",a)
#define prfL(a) printf("%lf\n",a)
#define prfS(a) printf("%lf ",a)
#define popcount __builtin_popcountll
#define swap(a,b,t) t=a;a=b;b=t
typedef pair<lld,lld> PA;
 
#define lim 100003
#define lim2 3003
map<char,lld> M,Mn;
inline lld sqr(lld x) { return x * x; }
// map<lld,lld>::iterator it;
// std::ios::sync_with_stdio(false);
// string S[lim],T[lim];
 
// multiset<lld> S;
// set<PA> S;
// string S;
// vector<lld> V[lim];
 
lld dp[lim][22];
// bool dp[5005][5005];
// priority_queue<PA> Q;
lld A[lim],B[lim];
lld P[lim],Q[lim],R[lim];
// char S[lim];


int main(){
	// std::ios::sync_with_stdio(false);
    lld T,i,j,k,l,r,s,a,b,c,d,w,x,y,v,z,m,n,t,p,q,curr,sum,ans,pos,val,secondMin,countA,indicator;
    sc(T);
    while(T--){
    	sc2(n,r);
    	t=(1<<n)-1;
    	// cout<<t;
    	rep(i,1,t){
    		rep(j,1,n){
    			a=1<<(j-1);
    			if((i&a)==0){
    				dp[i][j]=0;
    				continue;
    			}
    			a=i-1;
    			if((i&a)==0){
    				dp[i][j]=1;
    				continue;
    			}
    			x=i-(1<<(j-1));
    			countA=0;
    			rep(k,1,n){
    				a=1<<(k-1);
    				if((x&a)!=0 && abs(j-k)<=r) countA+=dp[x][k];
    			}
    			dp[i][j]=countA;
    		}
    	}
    	ans=0;
    	rep(i,1,n) ans+=dp[t][i];
    	prL(ans);
    	// rep(i,1,t){
    	// 	rep(j,1,n) prS(dp[i][j]);
    	// 	printf("\n");
    	// }
    }
    return 0;
}
