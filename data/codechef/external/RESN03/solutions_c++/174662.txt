/* 
 * File:   sqrbracket.cpp
 * Author: nikhil
 *
 * Created on 28 January, 2010, 11:30 PM
 */

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<bitset>


//Other Includes
#include<sstream>
#include<fstream>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>


using namespace std;


#define FOR(i,a,b)                              for(int i=a;i<b;i++)
#define REP(i,n)                                FOR(i,0,n)
#define pb                                      push_back
#define s(n)					scanf("%d",&n)
#define sl(n) 					scanf("%lld",&n)
#define sf(n) 					scanf("%lf",&n)
#define fill(a,v) 				memset(a, v, sizeof a)
#define sz                                      size()
#define INF                                     (int)1e9
#define EPS                                     1e-9
#define bitcount                                __builtin_popcount
#define all(x)                                  x.begin(), x.end()
#define gcd					__gcd
#define ULL                                     unsigned long long


typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef vector<string> VS;
typedef pair<int, int > PII;


int fact[101];
int bin[101][101];
int ans[101][101];

void preprocess()
{
    fact[0]=1;
    FOR(i,1,101)
    fact[i]=( (LL)fact[i-1] *(LL)i)%1000000007;

    REP(i,101)    bin[i][0]=bin[i][i]=1;

    FOR(i,1,101)
        FOR(j,1,i)
        bin[i][j]=(bin[i-1][j]+bin[i-1][j-1])%1000000007;

    

}

int solve()
{
    for(int i=0;i<101;i++) ans[0][i]=1;
    for(int i=1;i<101;i++)
    {
        for(int j=2;j<101;j++)
        {
            for(int l=2;l<=j && l<=i;l++)
            {
                //cout<<"i="<<i<<" j is "<<j<<" & l is ="<<l<<endl;
                ULL tmp=(ULL)bin[i-1][l-1]*(ULL)(fact[l-1]);
                tmp=tmp%1000000007;
                tmp=(ULL)(tmp)*(ULL)(ans[i-l][j]);
                ans[i][j]+=(tmp%1000000007);
                if(ans[i][j]>=1000000007)
                    ans[i][j]-=1000000007;
            }
        }
    }

}
int main()
{
    preprocess();
    solve();
    int t; s(t);
    while(t--)
    {
        int n,k;
        s(n),s(k);
        printf("%d\n",ans[n][k]);
    }
}
