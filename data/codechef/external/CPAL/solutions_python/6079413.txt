///ROHIT PATIYAL///

#include <iostream>
#include <cstdio>	//for printf and scanf (faster io)
#include <cmath> 	//for logl2() and pow etc math functions
#include <algorithm>	//for sort and other algorithms
#include <vector> 	//for vectors(resizable arrays)
#include <cstring>	//for memset
#include <cstdlib>
#include <queue>
#include <stack>
#include <set>
#include <map>		
#include <ctime>		
using namespace std;

#define lli long long int
#define ull unsigned long long	//(0 - 18446744073709551615) ie (0 - 10^19) 	int - 0 to 4294967295 ie (0 - 10^9)
#define rep(i,b) for(i=0;i<b;i++)
#define repab(i,a,b) for(i=a;i<b;i++)
#define printArray(a,size) for(lli o=0;o<size;o++){cout<<a[o]<<" ";}cout<<endl;

int pal_timestill[86400];


void secToStr(int time_val[], int i){
	int hrs,mins,seconds;
	hrs = i/3600;	
	mins = (i%3600)/60;
	seconds = (i%3600)%60;
	time_val[5] = seconds%10;
	time_val[4] = (seconds/10)%10;
	time_val[3] = mins%10;
	time_val[2] = (mins/10)%10;
	time_val[1] = hrs%10;
	time_val[0] = (hrs/10)%10;
}

void strToSec(char time_val[], int* seconds){
	//HH:MM:SS
	int ans = 0;
	//printArray(time_val,6);

	ans += (time_val[7]-'0');
	ans += 10*(time_val[6]-'0'); 
	ans += 60*(time_val[4]-'0');
	ans += 60*10*(time_val[3]-'0');
	ans += 3600*(time_val[1]-'0');
	ans += 3600*10*(time_val[0]-'0');
	*seconds = ans;
	//cout<<ans<<endl;
}



void pre(){
	int i,j;
	int time_val[9]; //HHMMSS
	
	rep(i,86400){
		secToStr(time_val, i);
		//printArray(time_val,6);
		bool pallindrome = true;
		rep(j,3){
			if(time_val[j]!=time_val[5-j]){
				pallindrome = false;
				break;
			}
		}
		if(pallindrome){
			if(i!=0)
			pal_timestill[i] = pal_timestill[i-1]+1;
		}else{
			if(i!=0)
			pal_timestill[i] = pal_timestill[i-1];
		}
		//cout<<i<<endl;
	}

}


//max stack size allowed is 10^8
int main(){
	//max stack size allowed is 10^6
	lli t, Q;
	scanf("%lld", &Q);
	pal_timestill[0]=1;
	
	pre();
	rep(t, Q){
		char time_start[9];
		char time_end[9];
		scanf("%s %s", time_start,time_end);
		
		int startsecs, endsecs;
		int i;
		
		strToSec(time_start, &startsecs);
		strToSec(time_end, &endsecs);
		if(startsecs > 0)
			printf("%d\n", pal_timestill[endsecs]-pal_timestill[startsecs-1]);
		else
			printf("%d\n", pal_timestill[endsecs]);
	}	

	return 0;
} 
