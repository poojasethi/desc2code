#include <cstdio>
#include <vector>
#include <utility>

using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define pb push_back
#define mp make_pair

const int max_V = 1e5 + 10;

int startT[max_V], endT[max_V];
int odd[max_V] = {0}, even[max_V] = {0};
int isOdd[max_V] = {0};
vector <pii> input;
vector <int> edges[max_V];
int ct = 1;

void DFS (int node)
{
	startT[node] = ct;
	for (auto v:edges[node])
	{
		ct++;
		DFS (v);
	}
	endT[node] = ct;
}

void Update (int BIT[], int i, int x, int N)
{
	while (i <= N)
	{
		// printf("test\n");
		BIT[i] += x;
		i += (i & -i);
	}
}

int Query (int BIT[], int i)
{
	int ans = 0;
	while (i)
	{
		ans += BIT[i];
		i -= (i & -i);
	}
	return ans;
}

void AddVertex (int BIT[], int v, int N)
{
	// printf("test\n");
	Update (BIT, startT[v], 1, N);
	// Update (BIT, endT[v] + 1, -1, N);
}

ll Query (int v)
{
	ll A = Query (odd, endT[v]) - Query (odd, startT[v] - 1);
	ll B = Query (even, endT[v]) - Query (even, startT[v] - 1);

	// printf("%d,%lld,%lld\n", v, A, B);

	A = (A * (A - 1)) >> 1;
	B = (B * (B - 1)) >> 1;

	return A + B;
}

int main ()
{
	int T, x, y, M, cind = 1;
	scanf ("%d", &T);
	while (T--)
	{
		scanf ("%d", &M);
		while (M--)
		{
			scanf ("%d%d", &x, &y);
			if (x == 0)
				edges[y].pb(cind++);
			input.pb (mp (x, y));
		}
		DFS (0);

		// for (int i = 0; i < cind; i++)
		// 	printf("%d %d\n", startT[i], endT[i]);

		int numV = cind;
		AddVertex (even, 0, numV + 1);
		cind = 1;

		// printf("test\n");

		for (auto q:input)
		{
			if (q.first == 0)
			{
				x = q.second;
				y = cind++;

				isOdd[y] = (isOdd[x] ^ (1 ^ 0));
				if (isOdd[y])
					AddVertex (odd, y, numV + 1);
				else
					AddVertex (even, y, numV + 1);

			}
			else
			{
				printf("%lld\n", Query (q.second));
			}
		}

		// for (int i = 0; i < numV; i++)
		// 	printf("%d, %d\n", i, isOdd[i]);

		cind = 1;
		ct = 1;
		input.clear();
		for (int i = 0; i < max_V; i++)
		{
			edges[i].clear();
			odd[i] = 0;
			even[i] = 0;
		}
	}
}