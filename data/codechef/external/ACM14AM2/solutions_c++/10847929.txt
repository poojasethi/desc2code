#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<vector>
#include<string.h>
using namespace std;
typedef long long int ll;
vector<int>adj[100001];
vector<ll>v(100001,0);
vector<int>tree(4*100001,0),treeg(4*100001,0),g(100001,0),e(100001,0);
struct node
{
  int s,l;
}b[100001];
struct temp
{
    int c,v;
}a[100001];
int pt=0;
void dfs(int node,int l)
{
  g[node]=1;
  b[node].s=pt;
  e[pt++]=node;
  v[node]=l;
  int k;
  for(k=0;k<adj[node].size();k++)
  {
    if(g[adj[node][k]]==0)
     dfs(adj[node][k],l+1);
  }
  b[node].l=pt;
};
void upd(int node,int a,int b,int i)
{
  if(a>b || a>i || b<i)
   return;
  if(a==i && b==i)
  {
    if(v[e[a]]%2==0)
     tree[node]=1;
    else
     tree[node]=0;
    treeg[node]=1;
    return;
  }
  int mid=(a+b)/2;
  upd(node*2,a,mid,i);
  upd(node*2+1,mid+1,b,i);
  tree[node]=tree[node*2]+tree[node*2+1];
  treeg[node]=treeg[node*2]+treeg[node*2+1];
};
ll get(int node,int a,int b,int i,int j)
{
  if(a>b || a>j || b<i)
   return 0;
  if(a>=i && b<=j)
   return tree[node];
  int mid=(a+b)/2;
  return get(node*2,a,mid,i,j)+get(node*2+1,mid+1,b,i,j);
};
ll getg(int node,int a,int b,int i,int j)
{
  if(a>b || a>j || b<i)
   return 0;
  if(a>=i && b<=j)
   return treeg[node];
  int mid=(a+b)/2;
  return getg(node*2,a,mid,i,j)+getg(node*2+1,mid+1,b,i,j);
};
void clearr(int node,int a,int b)
{
  if(a>b)
   return;
  if(a==b)
  {
      tree[node]=treeg[node]=0;
      return;
  }
  int mid=(a+b)/2;
  clearr(node*2,a,mid);
  clearr(node*2+1,mid+1,b);
  tree[node]=0;
  treeg[node]=0;
};
int main()
{
  int t,m,i;
  int cnt;
  ll q1,q2;
  ll ans;
  scanf("%d",&t);
  while(t--)
  {
   cnt=1;
   scanf("%d",&m);
   for(i=1;i<=m;i++)
   {
    scanf("%d%d",&a[i].c,&a[i].v);
    if(a[i].c==0)
    {
     adj[a[i].v].push_back(cnt++);
     a[i].v=cnt-1;
    }
   }
   pt=0;
   dfs(0,0);
   upd(1,0,pt-1,b[0].s);
   for(i=1;i<=m;i++)
   {
    if(a[i].c==0)
    {
      upd(1,0,pt-1,b[a[i].v].s);
    }
    else
    {
      q1=get(1,0,pt-1,b[a[i].v].s,b[a[i].v].l-1);
      q2=getg(1,0,pt-1,b[a[i].v].s,b[a[i].v].l-1)-q1;
      ans=(q1*(q1-1))/2;
      ans+=(q2*(q2-1))/2;
      printf("%lld\n",ans);
    }
   }
   for(i=0;i<cnt;i++)
   {
     adj[i].clear();
     g[i]=v[i]=e[i]=0;
   }
   clearr(1,0,pt-1);
  }
  return 0;
}
