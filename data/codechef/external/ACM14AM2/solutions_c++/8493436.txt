#include <bits/stdc++.h>
using namespace std;
vector<int> adj[100005];
int BIT1[100005];
int BIT2[100005];
int indHash[100005];
int level[100005];
int lastNode[100005];
vector<int> dfsStore;
vector<pair<int, int> > queries;
void update(int BIT[], int x, int n) {
	while(x <= n) {
		BIT[x] += 1;
		x += (x & -x);
	}
}
int readVal(int BIT[], int x) {
	int retVal = 0;
	while(x) {
		retVal += BIT[x];
		x -= (x & -x);
	}
	return retVal;
}
/*void propagate(int node, int lvl) {
	if(node == -1) {
		return;
	}
	int diff = lvl - level[node];
	if(diff % 2 == 0) {
		pairs[node] = pairs[node] + evenCnt[node];
		evenCnt[node]++;
	} else {
		pairs[node] = pairs[node] + oddCnt[node];
		oddCnt[node]++;
	}
	propagate(par[node], lvl);
}*/
int dfs(int node) {
	int i;
	dfsStore.push_back(node);
	int maxNode = node;
	for(i = 0; i < adj[node].size(); i++) {
		maxNode = dfs(adj[node][i]);
	}
	lastNode[node] = maxNode;
	return maxNode;
}
int main() {
	int t;
	cin >> t;
	while(t--) {
		int q;
		int vCnt = 1;
		cin >> q;
		memset(BIT1, 0, sizeof(BIT1));
		memset(BIT2, 0, sizeof(BIT2));
		memset(indHash, 0, sizeof(indHash));
		memset(level, 0, sizeof(level));
		memset(lastNode, 0, sizeof(lastNode));
		queries.clear();
		dfsStore.clear();
		int maxV;
		int i;
		for(i = 0; i <= 100005; i++) {
			adj[i].clear();
		}
		while(q--) {
			int qType, v;
			cin >> qType >> v;
			queries.push_back(make_pair(qType, v));
			if(qType == 0) {
				adj[v].push_back(vCnt);
				level[vCnt] = level[v] + 1;
				vCnt++;
 			}
		}
		maxV = vCnt;
		vCnt = 1;
		lastNode[0] = dfs(0);

		reverse(dfsStore.begin(), dfsStore.end());
		for(i = 0; i < dfsStore.size(); i++) {
			//cout << dfsStore[i] << " " << lastNode[dfsStore[i]] << endl;
			indHash[dfsStore[i]] = i + 1;
		}
		update(BIT1, indHash[0], maxV);
		for(i = 0; i < queries.size(); i++) {
			int qType = queries[i].first;
			int v = queries[i].second;
			if(qType == 0) {
				if(level[vCnt] % 2 == 0) {
					update(BIT1, indHash[vCnt], maxV);
				} else {
					update(BIT2, indHash[vCnt], maxV);
				}
				vCnt++;
			} else {
				long long int a = readVal(BIT1, indHash[v]) - readVal(BIT1, indHash[lastNode[v]] - 1);
				long long int b = readVal(BIT2, indHash[v]) - readVal(BIT2, indHash[lastNode[v]] - 1);
				//cout << a << " " << b;
				long long int ans = a * (a - 1) / 2 + b * (b - 1) / 2;
				cout << ans << endl;
			}
		}
	}
	return 0;
}