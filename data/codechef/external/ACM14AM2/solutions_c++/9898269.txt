#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define N 100005
vector<int> v[N];
int dep[N], par[N], pos[N], tree[2][4*N], cnt, sz[N], q[N][2], n;
int dfsorder(int i, int d, int p)
{
	par[i]=p;
	pos[i]=cnt++;
	dep[i]=d;
	int s=1;
	for(int j=0;j<v[i].size();j++)
		s+=dfsorder(v[i][j], d+1, i);
	sz[i]=s;
	return s;
}
void update(int i, int j, int v, int node, int dir)
{
	if(i>j || i>v || j<v)
		return;
	if(i==j){
		tree[dir][node]++;
		return;
	}
	int mid=(i+j)>>1, l=node<<1;
	update(i, mid, v, l, dir);
	update(mid+1, j, v, l+1, dir);
	tree[dir][node]=tree[dir][l]+tree[dir][l+1];
}
int query(int i, int j, int l, int r, int node, int dir)
{
	if(i>j || i>r || j<l)
		return 0;
	if(i>=l && j<=r)
		return tree[dir][node];
	int mid=(i+j)>>1, le=node<<1;
	return query(i, mid, l, r, le, dir)+query(mid+1, j, l, r, le+1, dir);
}
void init()
{
	for(int i=0;i<N;i++)
		v[i].clear();
	n=1;
	memset(dep, 0, sizeof(dep));
	memset(tree, 0, sizeof(tree));
	memset(sz, 0, sizeof(sz));
}
int main()
{
	int t;
	scanf("%d", &t);
	while(t--){
		int m;
		scanf("%d", &m);
		init();
		for(int i=0;i<m;i++){
			scanf("%d%d", &q[i][0], &q[i][1]);
			if(q[i][0]==0){
				v[q[i][1]].push_back(n);
				q[i][1]=n++;
			}
		}
		cnt=0;
		dfsorder(0, 0, -1);
		//for(int i=0;i<n;i++)
		//	printf("%d %d %d\n", pos[i], sz[i], dep[i]);
		update(0, n-1, 0, 1, 0);
		for(int i=0;i<m;i++){
			if(q[i][0]==0)
				update(0, n-1, pos[q[i][1]], 1, dep[q[i][1]]&1);
			else{
				int n1=query(0, n-1, pos[q[i][1]], pos[q[i][1]]+sz[q[i][1]]-1, 1, 0);
				int n2=query(0, n-1, pos[q[i][1]], pos[q[i][1]]+sz[q[i][1]]-1, 1, 1);
				ll ans=(ll)n1*(n1-1)/2 + (ll)n2*(n2-1)/2;
				printf("%lld\n", ans);
			}
		}
	}
}
