#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<set>
using namespace std;
vector<vector<int> > adjlst;
vector<long long> bit1,bit2;
vector<int> renum,h;
vector<pair<int,int> > range;
vector<bool> vis;
int n;
int dfsno=1;
void dfs(int x,int hi=0)
{
	range[x].first=dfsno;
	renum[x]=dfsno;
	dfsno++;
	vis[x]=1;
	h[x]=hi;
	for(int i=0;i<(int)adjlst[x].size();++i)
	{
		int nxt=adjlst[x][i];
		if(!vis[nxt])
		{
			dfs(nxt,hi+1);
		}
	}
	range[x].second=dfsno-1;
}
void up1(int x)
{
	if(x<=n)
	{
		bit1[x]++;
		int r=x&(-x);
		up1(x+r);
	}	
}
long long q1(int x)
{
	if(x==0)return 0;
	int r=x&(-x);
	return bit1[x]+q1(x-r);
}
void up2(int x)
{
	if(x<=n)
	{
		bit2[x]++;
		int r=x&(-x);
		up2(x+r);
	}
}
long long q2(int x)
{
	if(x==0)return 0;
	int r=x&(-x);
	return bit2[x]+q2(x-r);
}

void doit()
{
	int m;
	adjlst.clear();
	bit1.clear();
	bit2.clear();
	renum.clear();
	range.clear();
	h.clear();
	vis.clear();
	n=1;
	scanf("%d",&m);
	vector<int> emp;
	adjlst.push_back(emp);
	vector<pair<int,int> > queries;
	for(int i=0;i<m;++i)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		if(a==0)
		{
			n++;
			adjlst.push_back(emp);
			adjlst[n-1].push_back(b);
			adjlst[b].push_back(n-1);
		}
		queries.push_back(make_pair(a,b));
	}
	bit1.resize(n+1);
	bit2.resize(n+1);
	vis.resize(n);
	for(int i=0;i<=n;++i)
	{	bit1[i]=0;bit2[i]=0;}
	h.resize(n);
	renum.resize(n);
	range.resize(n);
	for(int i=0;i<n;++i)vis[i]=0;
	dfsno=1;
	dfs(0);
	up1(1);
	int qw=1;
	for(int i=0;i<m;++i)
	{
		int a=queries[i].first;
		int b=queries[i].second;
		if(a==0)
		{
			if(h[qw]%2==1)up2(renum[qw]);
			else up1(renum[qw]);
			qw++;
		}
		else
		{
			long long c,d;
			c=q1(range[b].second)-q1(range[b].first-1);
			d=q2(range[b].second)-q2(range[b].first-1);
			printf("%lld\n",((c*(c-1))/2)+((d*(d-1))/2));
		}
	}
}
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		doit();
	}
	return 0;
}
