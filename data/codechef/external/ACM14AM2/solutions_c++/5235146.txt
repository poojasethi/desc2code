#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <set>
#include <cstdio>
#include <cstdlib>
#include <stack>
#include <cstring>
#include <iomanip>
#include <cctype>
#include <map>

using namespace std;

vector<int> order;

vector<int> pos;

vector<int> len;

vector<int> par;

vector<vector<int> > Tree;

void dfs(int u,int par) {
    ::par[u] = par;
    len[u] = 1;
    pos[u] = (int)order.size();
    order.push_back(u);
    for(int i = 0;i < Tree[u].size();i++) {
        dfs(Tree[u][i], !par);
        len[u]+=len[Tree[u][i]];
    }
}

const int N = 100005;

long long BIT[2][N];

void update(int bn,int i,long long v) {
    while(i < N) {
        BIT[bn][i]+=v;
        i+= (i & -i);
    }
    
}

long long query(int bn,int i) {
    long long a = 0;
    while(i) {
        a+=BIT[bn][i];
        i-=(i & -i);
    }
    return a;
}

void solve() {
    order.clear();
    order.resize(1);
    Tree.clear();
    Tree.resize(2);
    int m; cin>>m;
    vector<pair<int,int> > qs;
    while(m--) {
        int tp,v; cin>>tp>>v;
        v++;
        qs.push_back(make_pair(tp,v));
        if(tp == 0) {
            Tree[v].push_back((int)Tree.size());
            Tree.push_back(vector<int>());
        }
    }
    par.resize(Tree.size());
    pos.resize(Tree.size());
    len.resize(Tree.size());
    dfs(1,0);
    for(int i = 0;i < N;i++) BIT[0][i] = BIT[1][i] = 0;
    update(0,1,1);
    int cr = 2;
    for(int i = 0;i < qs.size();i++) {
        if(qs[i].first == 0) {
            update(par[cr],pos[cr], 1);
            cr++;
        }
        else {
            long long a = 0;
            long long q1 = query(0,pos[qs[i].second] + len[qs[i].second] - 1) - query(0,pos[qs[i].second] - 1);
            long long q2 = query(1,pos[qs[i].second] + len[qs[i].second] - 1) - query(1,pos[qs[i].second] - 1);
            a+= (q1 * (q1 - 1) ) / 2;
            a+= (q2 * (q2 - 1) ) / 2;
            cout<<a<<endl;
        }
    }
    
    
}

int main() {
    int t; cin>>t;
    while(t--) {
        solve();
    }
}