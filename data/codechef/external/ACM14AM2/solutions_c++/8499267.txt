#include<bits/stdc++.h>
#define pb push_back
#define ll long long
#define mp make_pair
#define X first
#define Y second 
#define MAXVAL 200000
using namespace std;

ll pos[100001],cnt;
ll in[100001],out[100001];
bool visited[100001];
vector<ll> G[100001];
ll tree[2][MAXVAL];  // tree[0] is for even and tree[1] is for odd
ll h[100001];

ll read(ll i,ll idx)
{
	ll ans = 0;
	while(idx>0) {
		ans += tree[i][idx];
		idx -= (idx & -idx);
	}
	return ans;
}

ll update(ll i,ll idx,ll val)
{
	while(idx<=MAXVAL) {
		tree[i][idx] += val;
		idx += (idx & -idx);
	}
}

void dfs(ll s)
{
	visited[s] = 1;
	pos[s] = cnt;
	in[s] = cnt++;
	ll i,u,v;
	for(i=0;i<G[s].size();i++) {
		u = G[s][i];
		if(!visited[u]) {
			h[u] = h[s]+1;
			dfs(u);
		}
	}
	out[s] = cnt;
}

int main()
{
	ll curr,t,i,j,k,a,b,c,m,idx;
	scanf("%lld",&t);
	vector<pair<ll,ll> > V;
	vector<ll> IDX;
	while(t--) {
		scanf("%lld",&m);
		idx = 0;
		cnt = 1;
		for(i=0;i<m;i++) {
			scanf("%lld%lld",&a,&b);
			V.pb(mp(a,b));
			if(!a) {
				G[b].pb(++idx);
				IDX.pb(idx);
			}
		}
		memset(visited,false,sizeof(visited));
		memset(tree[0],0,sizeof(tree[0]));
		memset(tree[1],0,sizeof(tree[1]));
		h[0] = 0;
		dfs(0);
		update(0,pos[0],1);
		curr = 0;
		for(i=0;i<m;i++) {
			if(V[i].X == 0) {
				if((h[IDX[curr]])%2)
					update(1,pos[IDX[curr]],1);
				else
					update(0,pos[IDX[curr]],1);
				curr++;
			}
			else {
				a = read(0,out[V[i].Y]-1) - read(0,in[V[i].Y]-1);
				b = read(1,out[V[i].Y]-1) - read(1,in[V[i].Y]-1);
				/* cout<<"aa "<<a<<" "<<b<<endl; */
				printf("%lld\n",(a*(a-1))/2+(b*(b-1))/2);
			}
		}
		V.clear();
		IDX.clear();
		for(i=0;i<=100000;i++)
			G[i].clear();
	}
	return 0;
}
