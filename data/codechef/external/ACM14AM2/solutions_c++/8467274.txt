#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
using namespace std;
typedef long long ll;
const int maxn = (int)1e5+5;
int n, q[maxn][2], d[maxn], h[maxn], s[maxn*2+1][2], p[maxn], inter[maxn][2];
vector<int> e[maxn];

struct bit{
	int n;
	void init(int _n){
		n = _n;
		memset(s,0,sizeof s);
	}
	int query(int idx, int height){
		int ans = 0;
		while(idx){
			ans += s[idx][height];
			idx -= idx&(-idx);
		}
		return ans;
	}
	int query(int l, int r, int height){
		return query(r+1,height)-query(l,height);
	}
	void update(int idx,int height){
		idx++;
		while(idx<=n){
			s[idx][height]++;
			idx += idx&(-idx);
		}
	}
};

void dfs(int u, int p, int height){
	d[u] = n++; h[u] = height;
	inter[u][0] = inter[u][1] = d[u];
	for(int i=0;i<e[u].size();i++){
		int v = e[u][i];
		if(v == p) continue;
		dfs(v,u,height^1);
		inter[u][0] = min(inter[u][0], inter[v][0]);
		inter[u][1] = max(inter[u][1], inter[v][1]);
	}
}
inline ll nc2(int x){
	return (x*1ll*(x-1))/2ll;
}
int main(){
	ios_base::sync_with_stdio(0); cin.clear();
	int t; cin >> t;
	bit S;
	while(t--){
		int m; cin >> m; n = 1;
		for(int i=0;i<maxn;i++) e[i].clear();
		for(int i=0;i<m;i++){
			cin >> q[i][0] >> q[i][1];
			if(q[i][0] == 0){
				e[q[i][1]].pb(n);
				e[n++].pb(q[i][1]);
			}
		}
		n = 0;
		dfs(0,-1,0); 
		S.init(n); S.update(0,0); int cnt = 1;
		for(int i=0;i<m;i++){
			int typ = q[i][0], u = q[i][1];
			if(typ == 0){
				S.update(d[cnt],h[cnt]); cnt++;
			}
			else{
				int even = S.query(inter[u][0], inter[u][1], 0);
				int odd = S.query(inter[u][0], inter[u][1], 1);
				ll ans = nc2(odd) + nc2(even);
				cout << ans << "\n";
			}
		}
	}
	return 0;
}