#include <bits/stdc++.h>

#define vi   vector<int>
#define pb   push_back
#define vvi  vector<vector<int> >
#define pii  pair<int,int>
#define ll   long long
#define mp   make_pair
#define inf 0x7fffffff
#define s(n) scanf("%d",&n)
double eps = 1e-9;
using namespace std;

int in[100002];
int out[100002];
int chk[100002];
int bit[2][200005];
int times=1;
vvi v;
int query(int n,int num)
{
    n++;
    int sum=0;
    int idx=n;
    while(idx>0)
    {
        sum+=bit[num][idx];
        idx-=(idx&-idx);
    }
    return sum;
}
void update_point(int idx,int k,int num)
{
    idx++;
    while(idx<=200004)
    {
        bit[num][idx]+=k;
        idx+=(idx&-idx);
    }
}
void dfs(int source)
{
    
    in[source]=times;
    times++;
    for(int i=0;i<v[source].size();i++)
    {
        int fronts=v[source][i];
        chk[fronts]=1^chk[source];
        dfs(fronts);
    }
    out[source]=times;
    times++;
}
int main()
{
    //freopen("i.txt","r",stdin);
   // std::ios::sync_with_stdio(false);
    int t;
    s(t);
    while(t--)
    {
        int m;
        s(m);
        vector<pii> q;
        int counts=1;
        memset(bit,0,sizeof(bit));
        times=1;
        vvi().swap(v);
        v.resize(100003);
        for(int i=0;i<m;i++)
        {
            int a,b;
            s(a);s(b);
            q.pb(mp(a,b));
            if(a==0)
            {
               
                v[b].pb(counts);
                counts++;
            }
        }
        dfs(0);
        counts=1;
        update_point(1,1,0);
        for(int i=0;i<m;i++)
        {
            int a=q[i].first,b=q[i].second;
            if(a==0)
            {
                update_point(in[counts],1,chk[counts]);
                counts++;
            }
            else{
                ll x=query(out[b],0)-query(in[b]-1,0);
                ll y=query(out[b],1)-query(in[b]-1,1);
                cout<<((x*(x-1))/2+(y*(y-1))/2)<<"\n";
            }
        }
    }
    return 0;
}