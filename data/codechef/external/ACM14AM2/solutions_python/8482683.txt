#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define ll long long
#define pb push_back
#define mod 1000000007
 using namespace std ;


int bit[100002][2];
int maxval =100000;
int update(int idx,int val,int ty){

   while(idx<=maxval){
       bit[idx][ty]+=val;

       idx +=(idx & -idx);
   }
}

int query(int idx,int ty){

   int ans = 0;

   while(idx>0){
      ans+=bit[idx][ty];
      idx-=(idx & -idx);
   }

   return ans;
}


ll modExp(ll a,ll b,ll md){
    ll ans = 1;
    while(b){
       if(b&1)
            ans = (ans*a)%md;
        a = (a*a)%md;
        b/=2;
    }
    return ans;
}

ll inverse(ll num){
   return modExp(num,mod-2,mod);
}
ll ncr(int n,int r){

  ll num = 1;
  ll den = 1;
  int i ;
  for(i=1;i<=n;++i)
    num = (num*i)%mod;
   for(i=1;i<=n-r;++i)
    den = (den*i)%mod;
    for(i=1;i<=r;++i)
    den = (den*i)%mod;

    ll ans = num*inverse(den);
    ans%=mod;
    return ans;

}

int mark[2002];
void sieve(){

   int i,j;
   for(i=1;i<=2000;++i)
        mark[i] = 1;
   mark[1] = 0;

   for(i=2;i*i<=2000;++i){

      if(mark[i]==1){
         for(j=2;i*j<=2000;++j)
            mark[i*j] = 0;
      }
   }
}
vector<int>v[100002];
vector<pair<int,int> >que;
int tim ;
int chec[100002];
int in[100002],out[100002];
int crea[100002];

void initialise(){
   que.clear();
   int i;
   memset(bit,0,sizeof(bit));
   for(i=0;i<=100000;++i)
    v[i].clear();
   tim = 1;
   memset(in,0,sizeof(in));
   memset(out,0,sizeof(out));
}

void dfs(int id){
   in[id] = tim;
   int i;
   for(i=0;i<v[id].size();++i){
      chec[v[id][i]] = chec[id]^1;
      dfs(v[id][i]);
   }
   out[id] = tim;
   tim++;
}

int main(){


int t,m,i,j,ty,id;

cin>>t;
while(t--){
  initialise();
  s(m);
  int coun = 0;
  for(i=1;i<=m;++i){
    s(ty);s(id);

    if(ty==0){
      coun++;
      crea[i] = coun;
      v[id].pb(coun);
    }
    que.pb(make_pair(ty,id));
  }
  chec[0] = 0;
  dfs(0);

  update(out[0],1,chec[0]);
  for(i=1;i<=m;++i){
      //cout<<i<<endl;
     if(que[i-1].first==0){
        int id = crea[i];
        update(out[id],1,chec[id]);
     }else{
        int id = que[i-1].second;
        ll od = query(out[id],0)-query(in[id]-1,0);
        ll ev = query(out[id],1)-query(in[id]-1,1);
        ll ans = od*(od-1)/2+ev*(ev-1)/2;
        printf("%lld\n",ans);
     }
  }
}
return 0;
}
