#include<bits/stdc++.h>
#define ll long long
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)1e6+4
using namespace std;
int segO[N],segE[N],timer=0;
vector<int> G[100005];
vector<pii> Q;
int st[100005],ed[100005],depth[100005];
void allc(){
    mem(segO,0);
    mem(segE,0);
    for(int i=0;i<100005;i++)
        G[i].clear();
    Q.clear();
    timer=0;
}
void dfs(int x,int p){
    depth[x]=depth[p]+1;
    st[x]=++timer;
    for(int i=0;i<G[x].size();i++){
        int to=G[x][i];
        if(to!=p){
            dfs(to,x);
        }
    }
    ed[x]=timer;
}
void update(int *A,int i,int l,int r,int x){
    if(x<l||x>r)
        return;
    if(x==l&&l==r){
       A[i]++;
       return;
    }
    int mid=(l+r)>>1;
    update(A,2*i,l,mid,x);
    update(A,2*i+1,mid+1,r,x);
    A[i]=A[2*i]+A[2*i+1];
}
int query(int *A,int i,int l,int r,int ql,int qr){
    if(qr<l||ql>r)
        return 0;
    if(ql<=l&&r<=qr){
        return A[i];
    }
    int mid=(l+r)>>1;
    return query(A,2*i,l,mid,ql,qr)+query(A,2*i+1,mid+1,r,ql,qr);
}
void solve(){
    allc();
    int q;
    cin>>q;
    int c=2;
    while(q--){
        int t,x;
        cin>>t>>x;
        if(t==0){
           x++;
           Q.pb(mp(t,c));
           G[x].pb(c);
           c++;
        }
        else{
            x++;
            Q.pb(mp(t,x));
        }
    }
    dfs(1,0);
    update(segO,1,1,timer,st[1]);
    for(int q=0;q<Q.size();q++){
        int t=Q[q].fi;
        int x=Q[q].se;
        if(t==0){
           if(depth[x]%2)
            update(segO,1,1,timer,st[x]);
           else
            update(segE,1,1,timer,st[x]);
        }
        else{
            ll o=query(segO,1,1,timer,st[x],ed[x]);
            ll e=query(segE,1,1,timer,st[x],ed[x]);
            printf("%lld\n",(o*(o-1))/2+(e*(e-1))/2);
        }
    }
}
int main(){
   //ios_base::sync_with_stdio(false);
   int t=1;
   scanf("%d",&t);
   for(int i=1;i<=t;i++){
       //printf("Case #%d: ",i);
       solve();
   }
   return 0;
}
