import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Stack;

 class GroundStations {

	static boolean debug = false;
	static int m,n,c,time,last;
	static int type[],v[],depth[];
	static int dfsOrder[],start[],end[];
	static int seg[][];
	static long odd,even,ans[];
	static MyArrayList g[];
	
	public static void main(String args[]) {
		InputReader in = new InputReader(System.in);
		PrintWriter w = new PrintWriter(System.out);
		
		int t = in.nextInt();
		
		while(t-- > 0){
			m = in.nextInt();
			n = 1;
			
			type = new int[m];
			v = new int[m];
			
			for(int i=0;i<m;i++){
				type[i] = in.nextInt();
				v[i] = in.nextInt();
				if(type[i] == 0)
					n++;
			}
			
			g = new MyArrayList[n];
			for(int i=0;i<n;i++)
				g[i] = new MyArrayList();
			
			depth = new int[n];
			c = 1;
			
			for(int i=0;i<m;i++){
				if(type[i] == 0){
					g[v[i]].add(c);
					depth[c++] = (depth[v[i]] + 1) & 1;
				}
			}
			
			time = -1;
			dfsOrder = new int[n];
			start = new int[n];
			end = new int[n];
			dfsIterative();
			
			if(debug){
				System.out.println(n + " " + c);
				for(int i=0;i<n;i++){
					System.out.print(i + " : ");
					for(int j=0;j<g[i].actSize;j++)
						System.out.print(g[i].myStore[j] + " ");
					System.out.println();
				}
				System.out.println("   depth   " + Arrays.toString(depth));
				System.out.println(" dfsOrder  " + Arrays.toString(dfsOrder));
				System.out.println("   start   " + Arrays.toString(start));
				System.out.println("    end    " + Arrays.toString(end));
			}
			
			seg = new int[2][4*n];
			build(0,n-1,0);
			
			ans = new long[m];
			last = n;
			
			for(int i=m-1;i>=0;i--){
				if(type[i] == 1){
					even = find(0,n-1,0,start[v[i]],end[v[i]],0);
					odd = find(0,n-1,0,start[v[i]],end[v[i]],1);
					ans[i] = odd * (odd - 1) / 2 + even * (even - 1) / 2; 
				}
				else
					update(0,n-1,0,start[--last]);
			}
			
			for(int i=0;i<m;i++)
				if(type[i] == 1)
					w.println(ans[i]);
			
		}

		w.close();
	}
	
	static public void dfs(int curr,int prev){ 
		time++;
		dfsOrder[time] = curr;
		start[curr] = time;
		
		for(int i=0;i<g[curr].actSize;i++)
			if(g[curr].myStore[i] != prev)
				dfs(g[curr].myStore[i],curr);
		
		end[curr] = time;
	}
	
	static public void dfsIterative(){
		
		Stack<Integer> stack = new Stack<Integer>();
		stack.push(0);
		time++;
		dfsOrder[time] = 0;
		start[0] = 0;
		int next[] = new int[n];
		
		while(!stack.isEmpty()){
			int curr = stack.peek();
			if(next[curr] >= g[curr].actSize){
				stack.pop();
				end[curr] = time;
			}
			else{
				time++;
				int nxt = g[curr].get(next[curr]);
				stack.push(nxt);
				start[nxt] = time;
				dfsOrder[time] = nxt;
				next[curr]++;
			}
		}
	}
	
	static public void build(int s,int e,int c){
		if(s == e){
			seg[0][c] = 1 - depth[dfsOrder[s]];
			seg[1][c] = depth[dfsOrder[s]];
		}
		else{
			int m = (s + e) >> 1;
			build(s,m,2*c+1);
			build(m+1,e,2*c+2);
			seg[0][c] = seg[0][2*c+1] + seg[0][2*c+2];
			seg[1][c] = seg[1][2*c+1] + seg[1][2*c+2];
		}
	}
	
	static public void update(int s,int e,int c,int x){
		if(depth[dfsOrder[x]] == 0)
			seg[0][c]--;
		else
			seg[1][c]--;
		if(s == e)	return;
		int m = (s + e) >> 1;
		if(x <= m)
			update(s,m,2*c+1,x);
		else
			update(m+1,e,2*c+2,x);
	}
	
	static public int find(int s,int e,int c,int l,int r,int type){
		if(s == l && e == r)
			return seg[type][c];
		int m = (s + e) >> 1;
		if(l <= m && r <= m)	return find(s,m,2*c+1,l,r,type);
		if(l  > m && r  > m)	return find(m+1,e,2*c+2,l,r,type);
		return find(s,m,2*c+1,l,m,type) + find(m+1,e,2*c+2,m+1,r,type);
	}
	
	static public class MyArrayList {
		 
	    public int[] myStore;
	    public int actSize = 0;
	     
	    public MyArrayList(){
	        myStore = new int[5]; }
	     
	    public int get(int index){
	        if(index < actSize)
	            return myStore[index];
	        else 
	            throw new ArrayIndexOutOfBoundsException(); }
	     
	    public void add(int obj){
	        if(myStore.length-actSize <= 3)
	            increaseListSize();
	        myStore[actSize++] = obj; }
	   
	    public int size(){
	        return actSize; }
	     
	    private void increaseListSize(){
	        myStore = Arrays.copyOf(myStore, myStore.length*2); }
	    
	}

	static class InputReader {

		private InputStream stream;
		private byte[] buf = new byte[8192];
		private int curChar;
		private int snumChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}

			int res = 0;

			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));

			return res * sgn;
		}
		
		public String readString() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
}
