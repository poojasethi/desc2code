#include<bits/stdc++.h>

using namespace std;

const int MAXN = 2*100000 + 22;

int BIT[2][MAXN];

int what[MAXN];

int Node[MAXN];

list < int > Adj[MAXN];

int start[MAXN],tame;
int end[MAXN],level[MAXN];

void update(int BIT[] , int idx)
{
    while(idx<=MAXN-1)
    {
        BIT[idx]+=1;
        idx+=idx&-idx;
    }
    return ;
}

int get(int idx , int bit[])
{
    int ret = 0 ;
    while(idx>0)
    {
        ret += bit[idx];
        idx-=idx&-idx;
    }
    return ret;
}

void DFS(int S)
{
    ++tame;
    start[S]=tame;
    for(list < int >::iterator it = Adj[S].begin();it!=Adj[S].end();++it)
            {
                level[*it]=level[S]+1;
                DFS((*it));
            }
    ++tame;
    end[S]=tame;
}


int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    int T;
    cin>>T;
    for(;T;--T)
    {

        int M , i , n=0 ;
        cin>>M;
        for(i=0;i<M;++i)
            {
                cin>>what[i]>>Node[i];
                if(!what[i])
                {
                    ++n;
                    Adj[Node[i]].push_back(n);
                }
            }

        n = 0;

        DFS(0);
        update(BIT[0],start[0]);

        for(i=0;i<M;++i)
        {
            if(!what[i])
            {
                ++n;
                update( BIT[level[n]%2], start[n] );
            }
            else
            {
                long long u = get(end[Node[i]] , BIT[0]) - get(start[Node[i]] -1 , BIT[0]);
                long long  v = get(end[Node[i]] , BIT[1]) - get(start[Node[i]] -1 , BIT[1]);
                cout<<((long long)u*(u-1))/2 + ((long long ) v*(v-1))/2<<"\n";

            }
        }

        tame=0;
        memset(start,0,sizeof(start));
        memset(end,0,sizeof(end));
        memset(level,0,sizeof(level));
        memset(BIT,0,sizeof(BIT));
        for(i=0;i<M;++i)
            Adj[i].clear();
    }
    return 0;
}
