#include <bits/stdc++.h>

using namespace std;

vector<int> gr[100002];
int cnt,bit[3][100002];
int start[100002],en[100002],ht[100002],qr[100002];
int ar[100002];

void update(int x, int in, int val) 
{
	  while(in<=100000)
	  {
	  	bit[x][in]+=val;
	    in+=in & -in;	
	  }
}
 
int get(int x, int in) 
{
  	int sum=0;
  	while(in)
  	{
    	sum+=bit[x][in];
    	in-=in & -in;
  	}
	 return sum;
}

void dfs(int i,int par,int val)
 {
	start[i]=++cnt;
	ht[i]=val;
	for(int j=0;j<gr[i].size();j++)
	{
		if(gr[i][j]==par)
		continue;
		dfs(gr[i][j],i,val+1);
	}
	en[i]=cnt;
}


int main()
{
	int t,m,a,b,i,j,l,r,x;
	long long ans,sol;
	cin>>t;
	while(t--)
	{
		cin>>m;
		cnt=0;
		x=1;
		sol=0;
		memset(bit,0,sizeof(bit));
		for(i=0;i<=m;i++)
		gr[i].clear();
		for(i=0;i<m;i++)
		{
			cin>>qr[i]>>ar[i];
			if(!qr[i])
			{
				gr[ar[i]].push_back(x++);	
			}	
		}
		dfs(0,-1,0);
		update(ht[0]%2,start[0],1);
		x=1;
		for(i=0;i<m;i++)
		{
			if(!qr[i])
			{
				update(ht[x]%2,start[x],1);
				x++;
			}
			else
			{
				ans=get(1,en[ar[i]])-get(1,start[ar[i]]-1);
				sol=(ans*(ans-1)/2);
				ans=get(0,en[ar[i]])-get(0,start[ar[i]]-1);
				sol+=(ans*(ans-1)/2);
				cout<<sol<<"\n";
			}
		}
	}
	return 0;
}