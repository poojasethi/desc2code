#include<iostream>
#include<string.h>
using namespace std;
int arr[100005];
struct node
{
    node *left;
    node *right;
    int data;
    int s;
    int h;
    node()
    {
        left=NULL;
        right=NULL;
        data=0;s=1;
        h=1;

    }
    node(int d)
    {
        data=d;
        s=1;
        left=NULL;
        right=NULL;
        h=1;
    }
};
int height(node *root)
{
    if(root==NULL)
        return 0;
    else
        return root->h;
}
int getBalance(node *root)
{
    if(root!=NULL)
    {
        return height(root->left)-height(root->right);
    }
    else
        return 0;
}
int getSize(node *t)
{
    if(t==NULL)
        return 0;
    else return t->s;
}
node *rotateLeft(node *root)
{
    //cout<<"Rotated left \n";
    node *t=root->right;
    root->right=t->left;
    t->left=root;
    root->h=max(height(root->left),height(root->right))+1;
    t->h=max(height(t->left),height(t->right))+1;
    root->s=getSize(root->left)+getSize(root->right)+1;
    t->s=getSize(t->left)+getSize(t->right)+1;
    return t;
}
node *rotateRight(node *root)
{
    //cout<<"Rotated right \n";
    node *t=root->left;
    root->left=t->right;
    t->right=root;
    root->h=max(height(root->left),height(root->right))+1;
    t->h=max(height(t->left),height(t->right))+1;
    root->s=getSize(root->left)+getSize(root->right)+1;
    t->s=getSize(t->left)+getSize(t->right)+1;
    return t;

}
node *insert_node(node *root,int key,int *c)
{
    if(root==NULL)
    {
        return new node(key);
    }
    else if(key>root->data)
    {
        root->right=insert_node(root->right,key,c);
        *c=*c+getSize(root->left)+1;
    }
    else
    {
        root->left=insert_node(root->left,key,c);
    }
    root->h=max(height(root->left),height(root->right))+1;
    root->s=getSize(root->left)+getSize(root->right)+1;
    int k=getBalance(root);
    //cout<<"Hello1  "<<k<<"\n";
    if(k<=1&&k>=-1)
        return root;
    //cout<<"Hello2\n";
    if(k==2&&getBalance(root->left)>=0)
    {
        root=rotateRight(root);
    }
    else if(k==2&&getBalance(root->left)<0)
    {
        root->left=rotateLeft(root->left);
        root=rotateRight(root);
    }
    else if(k==-2&&getBalance(root->right)>0)
    {
        root->right=rotateRight(root->right);
        root=rotateLeft(root);
    }
    else if(k==-2&&getBalance(root->right)<=0)
    {
        root=rotateLeft(root);
    }
    return root;

}
void preorder(node *root)
{
    if(root==NULL)
        return ;

    preorder(root->left);
    preorder(root->right);
    cout<<root->data<<" ";
}
int main()
{
    int n,i,j,t;
    int c[100005]={0};
    cin>>t;
    while(t--)
    {
        cin>>n;
        for(i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        memset(c,0,sizeof(c));

        node *root=NULL;
        for(i=0;i<n;i++)
        {
            root=insert_node(root,arr[i],&c[i]);
            //cout<<root->s<<"\n";
        }
        //preorder(root);
        //cout<<"\n";
        //cout<<root->s<<"\n";
        for(i=0;i<n;i++)
        {
            cout<<c[i]<<" ";
        }
        cout<<"\n";

    }

}
