#include<bits/stdc++.h>
using namespace std;
long long arr[1000000]={0};
long long tree[1000000]={0};
long long count2[1000000]={0};
//long long count = 0;
/*void build(long long node,long long start,long long end,long long count)
{
	if(start > end)
	{
		return;
	}
	if(start == end)
	{
		cout<<"hello\n";
		tree[node] = count;//arr[node];
		return;
	}
	long long mid = (start+end)/2;
	long long left = node*2;
	long long right = node*2+1;
	build(left,start,end,count);
	build(right,start,end,count);
	if(tree[left]>tree[right])
	count++;
	tree[node] = count;
	return;
}*/
 long long query(int node,int start,int end,int se,int ee)
 {
 	if(start>end || ee<start || se>end) return 0;
 	
 	else if(start>=se && end<=ee)
 	  {
 	  	
 	 	  return tree[node];
	  }
	  int mid=(start+end)/2;
	 long long  q1= query(2*node,start,mid,se,ee);
	 long long  q2= query(2*node+1,mid+1,end,se,ee);
	   return (q1+q2);
	   
 }
 
void update(long long node,long long start,long long  end,long long  se,long long  ee,long long val)
 {
 	if(start>end || ee<start || se>end) 
	 return ;
 	else
	  if(start==end && start==se)
 	  {
 	 	  tree[node]+=val;
 	 	  return ;
	  }
	  long long  mid=(start+end)/2;
	  
	  update(2*node,start,mid,se,se,val);
	  update(2*node+1,mid+1,end,se,ee,val);
	  tree[node]=tree[2*node]+tree[2*node+1];
 }
 
int main()
{
	long long t;
	cin>>t;
	while(t--)
	{	
	  for(int i = 0;i<1000000;i++)
	   tree[i]=0;
	   
	  long long max_val=0;
		long long n;
		cin>>n;
		for(long long i = 0 ; i < n ; i++)
		{
			cin>>arr[i];
			//cout<<arr[i];
			max_val = max(max_val,arr[i]);
			
		}
		//cout<<max_val<<endl;
	//	build(1,1,n,0);
	
	for(long long  i = 0;i < n ;i++)
	{
		long long  temp = arr[i];
		long long  ans = query(1,0,max_val,0,temp-1);
	    //cout<<ans<<" ";
		count2[i] = ans;
		update(1,0,max_val,temp,temp,1);
	}
	for(long long  i = 0;i < n ; i++)
	cout<<count2[i]<<" ";
	cout<<endl;
}
}