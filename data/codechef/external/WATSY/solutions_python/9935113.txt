#include<iostream>
#include<stdlib.h>
#define ull long long int
using namespace std;
ull query (ull*,int);
int update(ull*,int,int,int);
int cmpfunc (const void * a, const void * b)
{
   return ( *(int*)a - *(int*)b );
}
int main(){
	int t;
	cin>>t;
	while(t--){
		int n,a[100004],b[100004];
		cin>>n;
		ull tree[100004]={0}, s=0;
		for (int i =0; i <n; i++)
		{
			cin>>a[i];
			b[i]=a[i];
		}
		qsort(b,n,sizeof(int),cmpfunc);
		for (int i = 0; i < n; ++i)
		{
			int l=0,h=n-1,mid;
			while(l<=h){
				mid=(l+h)/2;
				if(a[i]==b[mid]){
					a[i]=mid+1;
					break;
				}
				else if(a[i]>b[mid]){
					l=mid+1;
				}
				else{
					h=mid-1;
				}

			}
		}
		for (int i = 0; i < n; ++i)
		{
			update(tree,a[i],1,n+1);
			cout<<query(tree,a[i]-1)<<" ";


		}
		cout<<endl;
		
	}

}

ull query(ull tree[],int t){
	if(t<0)
		return 0;
	int s=0;
	while(t!=0){
		s+=tree[t];
		t-=t&(-t);

	}
	return s;
}
int update(ull tree[],int t,int i,int n){
	while(t<=n){
		tree[t]+=i;
		t+=t&(-t);
	}
return 0;
}