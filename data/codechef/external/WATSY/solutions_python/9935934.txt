    /* Author -  Dipjal Chhetri */
    /* College - Jaypee Institute of Information Technology */
    import java.io.*;
    import java.util.*;
    import java.math.*;
    import java.util.Arrays;
    import java.util.ArrayList;
    import java.util.Comparator;
    import java.util.Collections;
    import java.util.Scanner;
    import java.io.PrintWriter;
    import java.math.BigInteger;
    import java.math.BigDecimal;
     
    class BigOv2D{
      
       static InputReader reader;
       static int [] bit;
       static int [] a;
       static int n;
       static final int N = (int) 1e6 + 5;
        public static void main(String args[])throws IOException{
           reader = new InputReader(System.in);
           BigOv2D elect = new BigOv2D();
           elect.run(reader);
        }
        
        public static void run(InputReader reader) throws IOException{
            // System.out.println("Lets test!");
             int T = reader.readInt();
             while(T-- > 0){
                 n = reader.readInt();
                 a = new int[n];
                 bit = new int[N];
                 for(int i = 0; i < n; ++i){
                    a[i] = reader.readInt();
                }
                for(int i = 0; i < N; ++i){
                    bit[i] = 0;
                }
                StringBuilder answer = new StringBuilder();
                for(int i = 0; i < n; ++i){
                    answer.append(query(a[i] - 1) ).append(" ");
                    update(a[i] , 1);
                }
                System.out.println(answer);
            }
        }
        static void update(int idx , int val){
            for(; idx < N; idx += idx & -idx){
                bit[idx] += val;
            }
        }
        static int query(int idx){
            int res = 0;
            for(; idx > 0; idx -= idx & -idx){
                res += bit[idx];
            }
            return res;
        }
        static final class InputReader {
            private final InputStream stream;
            private final byte[] buf = new byte[1024];
            private int curChar;
            private int numChars;
     
            public InputReader(InputStream stream) {
                this.stream = stream;
            }
     
            private int read() throws IOException {
                if (curChar >= numChars) {
                    curChar = 0;
                    numChars = stream.read(buf);
                    if (numChars <= 0) {
                        return -1;
                    }
                }
                return buf[curChar++];
            }
     
            public final int readInt() throws IOException {
                return (int)readLong();
            }
     
            public final long readLong() throws IOException {
                int c = read();
                while (isSpaceChar(c)) {
                    c = read();
                    if (c == -1) throw new IOException();
                }
                boolean negative = false;
                if (c == '-') {
                    negative = true;
                    c = read();
                }
                long res = 0;
                do {
                    res *= 10;
                    res += c - '0';
                    c = read();
                } while (!isSpaceChar(c));
                return negative ? -res : res;
            }
     
            public final int[] readIntArray(int size) throws IOException {
                int[] array = new int[size];
                for (int i=0; i<size; i++) {
                    array[i] = readInt();
                }
                return array;
            }
     
            public final long[] readLongArray(int size) throws IOException {
                long[] array = new long[size];
                for (int i=0; i<size; i++) {
                    array[i] = readLong();
                }
                return array;
            }
     
            public final String readString() throws IOException {
                int c = read();
                while (isSpaceChar(c)) {
                    c = read();
                }
                StringBuilder res = new StringBuilder();
                do {
                    res.append((char)c);
                    c = read();
                } while (!isSpaceChar(c));
                return res.toString();
            }
     
            private boolean isSpaceChar(int c) {
                return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
            }
        }
    } 