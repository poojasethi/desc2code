#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
template<typename T> struct FenwickTree {
    const int nmax;
    vector<T> vec;

    FenwickTree ( int _n ) :nmax ( _n+1 ),vec ( nmax ) {
    }

    T read ( int idx ) {
        idx++;
        T sum = 0;
        while ( idx > 0 ) {
            sum += vec[idx];
            idx -= ( idx & -idx );
        }
        return sum;
    }
    void add ( int idx ,T val ) {
        idx++;
        while ( idx <nmax ) {
            vec[idx] += val;
            idx += ( idx & -idx );
        }
    }

    T readRange ( int l,int r ) {
        return read ( r-1 )-read ( l-1 );

    }
    T readVal ( int pos ) {
        return readRange ( pos,pos+1 );

    }
    void clear() {
        fill ( all ( vec ),0 );
    }
};
typedef FenwickTree<int> Fenwick;


int main() {
    ios_base::sync_with_stdio ( false );
    
    
    vi mp2 ( 1000005 );
    inrep {
        int n;
        cin>>n;
        vi a ( n );
        cin>>a;
//         map<int,int> mp;
        vi b=a;
        sort ( all ( b ) );
        int e=unique ( all ( b ) )-b.begin();
        int cnt=0;
        rep ( i,e ) {
            mp2[b[i]]=cnt++;
        }
        rep ( i,n ) {
            a[i]=mp2[a[i]];
        }
        Fenwick fw ( cnt );
        vi res ( n );
        rep ( i,n ) {
            res[i]= fw.read ( a[i]-1 );
            fw.add ( a[i],1 );

        }
        cout<<res;

    }
}
