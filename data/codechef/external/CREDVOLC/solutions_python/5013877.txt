#include<bits/stdc++.h>

using namespace std;

int h[205][205];
bool visited[205][205];
int ans[205][205]={0};

int main()
{
    int n,m;
    scanf("%d%d",&n,&m);

    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            visited[i][j]=false;
        }
    }

    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            scanf("%d",&h[i][j]);
        }
    }

    int x,y;
    scanf("%d%d",&x,&y);

    priority_queue<pair<int,pair<int,int> >,vector<pair<int,pair<int,int> > >,greater<pair<int,pair<int,int> > > >Q1;

    //Q1.push(make_pair(h[x][y],make_pair(x,y)));
    visited[x][y]=true;
    ans[x][y]=1;
    int h1=h[x][y];
    int x1=x;
    int y1=y;

            if((x1-1)!=0 && !visited[x1-1][y1])
            {
                Q1.push(make_pair(h[x1-1][y1],make_pair(x1-1,y1)));
            }
            if((y1-1)!=0 && !visited[x1][y1-1])
            {
                Q1.push(make_pair(h[x1][y1-1],make_pair(x1,y1-1)));
            }
            if((x1+1)!=(n+1) && !visited[x1+1][y1])
            {
                Q1.push(make_pair(h[x1+1][y1],make_pair(x1+1,y1)));
            }
            if((y1+1)!=(m+1) && !visited[x1][y1+1])
            {
                Q1.push(make_pair(h[x1][y1+1],make_pair(x1,y1+1)));
            }
            if((y1+1)!=(m+1) && (x1+1)!=(n+1) && !visited[x1+1][y1+1])
            {
                Q1.push(make_pair(h[x1+1][y1+1],make_pair(x1+1,y1+1)));
            }
            if((y1+1)!=(m+1) && (x1-1)!=0 && !visited[x1-1][y1+1])
            {
                Q1.push(make_pair(h[x1-1][y1+1],make_pair(x1-1,y1+1)));
            }
            if((y1-1)!=(0) && (x1+1)!=(n+1) && !visited[x1+1][y1-1])
            {
                Q1.push(make_pair(h[x1+1][y1-1],make_pair(x1+1,y1-1)));
            }
            if((y1-1)!=(0) && (x1-1)!=0 && !visited[x1-1][y1-1])
            {
                Q1.push(make_pair(h[x1-1][y1-1],make_pair(x1-1,y1-1)));
            }

    while(!Q1.empty())
    {
        pair<int,pair<int,int> >t1=Q1.top();
        h1=max(h1,t1.first);
        int x1=t1.second.first;
        int y1=t1.second.second;
        ans[x1][y1]=1;
        Q1.pop();
      //  printf("%d %d %d\n",x1,y1,h[x1][y1]);
        if(x1==1 || x1==n || y1==1 || y1==m)
        {
            bool con=true;
            while(!Q1.empty())
            {
                pair<int,pair<int,int> >t1=Q1.top();
                int h2=t1.first;
                int x1=t1.second.first;
                int y1=t1.second.second;
                Q1.pop();
                if(h2<=h1)
                {
                    visited[x1][y1]=true;
                    ans[x1][y1]=true;
            if((x1-1)!=0 && !visited[x1-1][y1])
            {
                Q1.push(make_pair(h[x1-1][y1],make_pair(x1-1,y1)));
                visited[x1-1][y1]=true;
            }
            if((y1-1)!=0 && !visited[x1][y1-1])
            {
                visited[x1][y1-1]=true;
                Q1.push(make_pair(h[x1][y1-1],make_pair(x1,y1-1)));
            }
            if((x1+1)!=(n+1) && !visited[x1+1][y1])
            {
                visited[x1+1][y1]=true;
                Q1.push(make_pair(h[x1+1][y1],make_pair(x1+1,y1)));
            }
            if((y1+1)!=(m+1) && !visited[x1][y1+1])
            {
                visited[x1][y1+1]=true;
                Q1.push(make_pair(h[x1][y1+1],make_pair(x1,y1+1)));
            }
            if((y1+1)!=(m+1) && (x1+1)!=(n+1) && !visited[x1+1][y1+1])
            {
                visited[x1+1][y1+1]=true;
                Q1.push(make_pair(h[x1+1][y1+1],make_pair(x1+1,y1+1)));
            }
            if((y1+1)!=(m+1) && (x1-1)!=0 && !visited[x1-1][y1+1])
            {
                visited[x1-1][y1+1]=true;
                Q1.push(make_pair(h[x1-1][y1+1],make_pair(x1-1,y1+1)));
            }
            if((y1-1)!=(0) && (x1+1)!=(n+1) && !visited[x1+1][y1-1])
            {
                visited[x1+1][y1-1]=true;
                Q1.push(make_pair(h[x1+1][y1-1],make_pair(x1+1,y1-1)));
            }
            if((y1-1)!=(0) && (x1-1)!=0 && !visited[x1-1][y1-1])
            {
                visited[x1-1][y1-1]=true;
                Q1.push(make_pair(h[x1-1][y1-1],make_pair(x1-1,y1-1)));
            }
                }
                else
                {
                    con=false;
                    break;
                }
            }
            if(!con)
            {
                break;
            }
        }
        else
        {
           // printf("hi\n");
            if((x1-1)!=0 && !visited[x1-1][y1])
            {
                Q1.push(make_pair(h[x1-1][y1],make_pair(x1-1,y1)));
                visited[x1-1][y1]=true;
            }
            if((y1-1)!=0 && !visited[x1][y1-1])
            {
                visited[x1][y1-1]=true;
                Q1.push(make_pair(h[x1][y1-1],make_pair(x1,y1-1)));
            }
            if((x1+1)!=(n+1) && !visited[x1+1][y1])
            {
                visited[x1+1][y1]=true;
                Q1.push(make_pair(h[x1+1][y1],make_pair(x1+1,y1)));
            }
            if((y1+1)!=(m+1) && !visited[x1][y1+1])
            {
                visited[x1][y1+1]=true;
                Q1.push(make_pair(h[x1][y1+1],make_pair(x1,y1+1)));
            }
            if((y1+1)!=(m+1) && (x1+1)!=(n+1) && !visited[x1+1][y1+1])
            {
                visited[x1+1][y1+1]=true;
                Q1.push(make_pair(h[x1+1][y1+1],make_pair(x1+1,y1+1)));
            }
            if((y1+1)!=(m+1) && (x1-1)!=0 && !visited[x1-1][y1+1])
            {
                visited[x1-1][y1+1]=true;
                Q1.push(make_pair(h[x1-1][y1+1],make_pair(x1-1,y1+1)));
            }
            if((y1-1)!=(0) && (x1+1)!=(n+1) && !visited[x1+1][y1-1])
            {
                visited[x1+1][y1-1]=true;
                Q1.push(make_pair(h[x1+1][y1-1],make_pair(x1+1,y1-1)));
            }
            if((y1-1)!=(0) && (x1-1)!=0 && !visited[x1-1][y1-1])
            {
                visited[x1-1][y1-1]=true;
                Q1.push(make_pair(h[x1-1][y1-1],make_pair(x1-1,y1-1)));
            }
            //break;
        }
    }

    while(!Q1.empty())
    {
        Q1.pop();
    }

    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            printf("%d ",ans[i][j]);
        }
        printf("\n");
    }
return 0;}
