#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100000000
#define TOTDIGITS 105
#define DIGIT 8
#define len 20   //>=DIGITS/7
using namespace std;
class BigInt
{
public:
    int value[len];
    int numlen;
    BigInt()
    {
        reset();
    }
    void reset()
    {
        numlen=0;
        for(int i=0;i<len;i++)
            value[i]=0;
    }
    void setNum(char num[])
    {
        int l=strlen(num);
        long p=1;
        reset();
        for (int i=l-1; i>=0; i--){
            value[numlen]=value[numlen]+p*(int)(num[i]-'0');
            p*=10;
            if(p>MAX)
            {
                value[numlen+1]=value[numlen]/MAX;
                value[numlen]=value[numlen]%MAX;
                numlen++;
                p=10;
            }
        }
    }
    bool getNum ()
    {
        char num[TOTDIGITS];
        if(scanf("%s",num)!=EOF)
        {
            setNum(num);
            return true;
        }
        else
        {
            return false;
        }
    }
    BigInt operator -(long long num)
    {
        int now=0,borrowed=0;
        BigInt result;
        long nownum;
        while(numlen>=now )
        {
            nownum=(num%MAX);
            num=num/MAX;
            if(value[now]<nownum ){
                if(numlen>now)
                {
                    borrowed=MAX;
                }
                else
                {
                    borrowed=10;
                    while(borrowed<nownum)
                        borrowed*=10;
                }
                result.value[now]=value[now]+borrowed-nownum;
                num++;
            }
            else
            {
                result.value[now]=value[now]-nownum;
            }
            now++;
        }
        result.numlen=now;
        return result;
    }
    BigInt operator *(long num)
    {
        int carry = 0;
        long long val;
        BigInt result;
        for (int i=0; i<numlen; i++)
        {
                val = (long long)value[i]*num+carry;
                carry = val/MAX;
                result.value[i]=val%MAX;
        }
        result.numlen=numlen;
        if(carry>0)
        {
            result.value[result.numlen]=carry;
            result.numlen++;
        }
        return result;
    }
    bool equals(long long num)
    {
        long  nownum;
        for (int i=0; i<=numlen; i++)
        {
            nownum=num%MAX;
            num=num/MAX;
            if(value[i]!=nownum)
            {
                return false;
            }
        }
        return true;
    }
    bool operator !=(long long num)
    {
        return !(this->equals(num));
    }
    void toString(void)
    {
        if(numlen==0)
        {
            printf("%u\n",value[0]);
        }
        else
        {
            int i;
            for (i=numlen; i>=0; i--) {
                if(value[i]!=0)
                {
                    printf("%u",value[i]);
                    break;
                }
            }
            for (i--; i>=0; i--) {
                printf("%0*u",DIGIT, value[i]);
            }
            printf("\n");
        }
   }
};
int main(int argc, char** argv) {
    BigInt b;
    while(b.getNum())
    {
        if(b!=0 && b!=1)
        {
            b=b-1;
            b=b*2;
        }
        b.toString();
    }
    return (0);
}
  