#include <bits/stdc++.h>
using namespace std;
#define ll long long
struct Edge
{
  int u,v,flow,capacity;
  Edge()
  {

  }
  Edge(int u,int v,int flow,int capacity)
  {
    this->u=u;
    this->v=v;
    this->flow=flow;
    this->capacity=capacity;

  }
};  

vector<Edge> e;
vector<vector<int> > G;
int n,m;
int source,sink;
int dist[5001];
int ptr[5001];


bool findPath()
{

  memset(dist,-1,sizeof(dist));
  dist[source]=0;
  queue<int> Q;
  Q.push(source);
  while(!Q.empty())
  {
    
    int u=Q.front();
    assert(dist[u]>=0);
    // cout<<u<<endl;
    Q.pop();

    for (int i = 0; i < G[u].size(); ++i)    
    {
      int ID=G[u][i];
      // assert(u==e[ID].u);
      int v=e[ID].v;

      if( (dist[v]==-1) && e[ID].flow<e[ID].capacity)
      {
        // cout<<v<<endl;
        dist[v]=dist[u]+1;
        // cout<<dist[v]<<endl;
        Q.push(v);
        // if(v==sink)
        //   return true;
      }
    }
  }

  return dist[sink]!=-1;
}


int dfs(int u,int flow)
{ 
  if(flow==0)
    return 0;
  if(u==sink)
    return flow;
  for(;ptr[u]<G[u].size();++ptr[u])
  {
    int ID=G[u][ptr[u]];
    int v=e[ID].v;
    
    if(dist[v]!=dist[u]+1)
      continue;
    
    int pushed=dfs(v,min(flow,e[ID].capacity-e[ID].flow));
    if(pushed)
    {
      e[ID].flow    +=pushed;
      e[ID^1].flow  -=pushed;
      return pushed;
    }
  }
  return 0;
}
ll dinics()
{
  ll flow=0;
  while(findPath())
  {
    memset(ptr,0,sizeof ptr);
    while(int pushed=dfs(source,1e9))
      flow+=pushed;
  }
  return flow;
}
void addEdge(int u,int v,int capacity)
{
    G[u].push_back(e.size());
    e.push_back(Edge(u,v,0,capacity));
    G[v].push_back(e.size());
    e.push_back(Edge(v,u,0,0));
}
int func(int l,int r,int x,int y){
  if(x>r || y<l)
    return 0;
  return min(r,y)-max(l,x)+1;
}
int main(){
  ios::sync_with_stdio(0);
  cin.tie(0);
  int t;
  cin>>t;
  int s[221];
  int e[221];
  while(t--){
    int n,m;
    cin>>n>>m;
    source=0;
    sink=5000;

    ::e.clear();
    G.clear();
    G.resize(5001);
    vector<int> times;
    for(int i=1;i<=n;++i){
      cin>>s[i]>>e[i];
      --e[i];
      assert(s[i]<=e[i]);
      times.push_back(s[i]);
      times.push_back(e[i]);
      addEdge(source,i,1e9);
    }
    ll req=0;
    for(int i=1;i<=m;++i)
    {
      int r;
      cin>>s[n+i]>>e[n+i]>>r;
      --e[n+i];
      assert(s[n+i]<=e[n+i]);
      
      times.push_back(s[n+i]);
      times.push_back(e[n+i]);
      addEdge(n+i,sink,r);
      req+=r;
    }
    sort(times.begin(),times.end());
    times.erase(unique(times.begin(),times.end()),times.end());
    times.push_back(1e9);

    vector<pair<int,int> > tim;
    for(int i=0;i<(int)times.size()-1;++i)
      tim.push_back(make_pair(times[i],times[i+1]-1));

    for(int i=1;i<=n;++i)
      for(int j=0;j<tim.size();++j)
        addEdge(i,n+m+j+1,func(s[i],e[i],tim[j].first,tim[j].second));

    for(int j=0;j<tim.size();++j)
      for(int i=1;i<=m;++i)
        addEdge(n+m+j+1,n+i,func(tim[j].first,tim[j].second,s[n+i],e[n+i]));
  
    cout<<(dinics()==req?"YES\n":"NO\n");
  } 
}