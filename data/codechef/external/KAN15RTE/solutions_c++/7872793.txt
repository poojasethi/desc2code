#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;
 
#define rep(i, n) for(int i = 0; i < (n); ++i)
 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define mset(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())
 
#define gi(x) scanf("%d", &x)
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << (x) << " "
#define dbs(x) cerr << (x) << " "
 
const int maxN = 101;
const int maxM = 101;
 

const int inf = 0x3f3f3f3f;
 
struct Edge
{
  int u,v,flow,capacity;
  Edge()
  {

  }
  Edge(int u,int v,int flow,int capacity)
  {
    this->u=u;
    this->v=v;
    this->flow=flow;
    this->capacity=capacity;

  }
};  

vector<Edge> e;
vector<vector<int> > G;
int n,m;
int source,sink;
int dist[5001];
int ptr[5001];


bool findPath()
{

  memset(dist,-1,sizeof(dist));
  dist[source]=0;
  queue<int> Q;
  Q.push(source);
  while(!Q.empty())
  {
    
    int u=Q.front();
    assert(dist[u]>=0);
    // cout<<u<<endl;
    Q.pop();

    for (int i = 0; i < G[u].size(); ++i)    
    {
      int ID=G[u][i];
      // assert(u==e[ID].u);
      int v=e[ID].v;

      if( (dist[v]==-1) && e[ID].flow<e[ID].capacity)
      {
        // cout<<v<<endl;
        dist[v]=dist[u]+1;
        // cout<<dist[v]<<endl;
        Q.push(v);
        // if(v==sink)
        //   return true;
      }
    }
  }

  return dist[sink]!=-1;
}


int dfs(int u,int flow)
{ 
  if(flow==0)
    return 0;
  if(u==sink)
    return flow;
  for(;ptr[u]<G[u].size();++ptr[u])
  {
    int ID=G[u][ptr[u]];
    int v=e[ID].v;
    
    if(dist[v]!=dist[u]+1)
      continue;
    
    int pushed=dfs(v,min(flow,e[ID].capacity-e[ID].flow));
    if(pushed)
    {
      e[ID].flow    +=pushed;
      e[ID^1].flow  -=pushed;
      return pushed;
    }
  }
  return 0;
}
ll dinics()
{
  ll flow=0;
  while(findPath())
  {
    memset(ptr,0,sizeof ptr);
    while(int pushed=dfs(source,1e9))
      flow+=pushed;
  }
  return flow;
}
void addEdge(int u,int v,int capacity)
{
    G[u].push_back(e.size());
    e.push_back(Edge(u,v,0,capacity));
    G[v].push_back(e.size());
    e.push_back(Edge(v,u,0,0));
}
 
int main() {
    
    
    int T;
    gi(T);
    int st[maxN], en[maxN];
    int b[maxM], e[maxM], req[maxM];
 
    rep (tc, T) {
        int n, m;
        gi(n), gi(m);
 
        vi v;
 
        rep (i, n) {
            gi(st[i]), gi(en[i]);
            v.pb(st[i]);
            v.pb(en[i]);
        }
 
        rep (i, m) {
            gi(b[i]), gi(e[i]), gi(req[i]);
            v.pb(b[i]);
            v.pb(e[i]);
        }
 
        sort(all(v));
        v.resize(unique(all(v)) - v.begin());
 
 
        int nodes = 2 + n + m + sz(v) - 1;
        ::e.clear();
        G.clear();
        G.resize(nodes);      
        source = 0;
        sink = nodes - 1;
    
        rep (i, n) {
            addEdge(source, i + 1, inf);
 
            rep (j, sz(v) - 1) {
                if (v[j] >= st[i] and v[j + 1] <= en[i]) {
                    addEdge(i + 1, n + 1 + j, (v[j + 1] - v[j]));
                }
            }
        }
 
        rep (i, m) {
            addEdge(n + 1 + sz(v) - 1 + i, sink, req[i]);
 
            rep (j, sz(v) - 1) {
                if (v[j] >= b[i] and v[j + 1] <= e[i]) {
                    addEdge(n + 1 + j, n + 1 + sz(v) - 1 + i, (v[j + 1] - v[j]));
                }
            }
        }
 
        int flow = dinics();
 
        int required = 0;
        rep (i, m) required += req[i];
 
        puts(flow == required ? "YES" : "NO");
    }
 
    return 0;
} 