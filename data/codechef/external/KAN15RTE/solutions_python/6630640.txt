#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define mset(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gi(x) scanf("%d", &x)
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << (x) << " "
#define dbs(x) cerr << (x) << " "

const int maxN = 101;
const int maxM = 101;

int st[maxN], en[maxN];
int b[maxM], e[maxM], req[maxM];

const int inf = 0x3f3f3f3f;

struct edge {
    int x, y, cap, flow;
};

struct DinicFlow {
    vector <edge> e;
    vector <int> cur, d;
    vector < vector <int> > adj;
    int n, source, sink;

    DinicFlow() {}

    DinicFlow(int v) {
        n = v;
        cur = vector <int> (n + 1);
        d = vector <int> (n + 1);
        adj = vector < vector <int> > (n + 1);
    }

    void addEdge(int from, int to, int cap) {
        edge e1 = {from, to, cap, 0};
        edge e2 = {to, from, 0, 0};
        adj[from].push_back(e.size()); e.push_back(e1);
        adj[to].push_back(e.size()); e.push_back(e2);
    }

    int bfs() {
        queue <int> q;
        for(int i = 0; i <= n; ++i) d[i] = -1;
        q.push(source); d[source] = 0;
        while(!q.empty() and d[sink] < 0) {
            int x = q.front(); q.pop();
            for(int i = 0; i < (int)adj[x].size(); ++i) {
                int id = adj[x][i], y = e[id].y;
                if(d[y] < 0 and e[id].flow < e[id].cap) {
                    q.push(y); d[y] = d[x] + 1;
                }
            }
        }
        return d[sink] >= 0;
    }

    int dfs(int x, int flow) {
        if(!flow) return 0;
        if(x == sink) return flow;
        for(;cur[x] < (int)adj[x].size(); ++cur[x]) {
            int id = adj[x][cur[x]], y = e[id].y;
            if(d[y] != d[x] + 1) continue;
            int pushed = dfs(y, min(flow, e[id].cap - e[id].flow));
            if(pushed) {
                e[id].flow += pushed;
                e[id ^ 1].flow -= pushed;
                return pushed;
            }
        }
        return 0;
    }

    int maxFlow(int src, int snk) {
        this->source = src; this->sink = snk;
        int flow = 0;
        while(bfs()) {
            for(int i = 0; i <= n; ++i) cur[i] = 0;
            while(int pushed = dfs(source, inf)) {
                flow += pushed;
            }
        }
        return flow;
    }
};

int main() {
    #ifdef LOCAL
    freopen("in.txt", "r", stdin);
    #endif
    
    int T;
    gi(T);

    rep (tc, T) {

        int n, m;
        gi(n), gi(m);

        vi v;

        rep (i, n) {
            gi(st[i]), gi(en[i]);
            v.pb(st[i]);
            v.pb(en[i]);
        }

        rep (i, m) {
            gi(b[i]), gi(e[i]), gi(req[i]);
            v.pb(b[i]);
            v.pb(e[i]);
        }

        sort(all(v));
        v.resize(unique(all(v)) - v.begin());

        DinicFlow mf(2 + n + m + sz(v) - 1);

        int nodes = 2 + n + m + sz(v) - 1;
        
        int src = 0;
        int sink = nodes - 1;

        rep (i, n) {
            mf.addEdge(src, i + 1, inf);

            rep (j, sz(v) - 1) {
                if (v[j] >= st[i] and v[j + 1] <= en[i]) {
                    mf.addEdge(i + 1, n + 1 + j, (v[j + 1] - v[j]));
                }
            }
        }

        rep (i, m) {
            mf.addEdge(n + 1 + sz(v) - 1 + i, sink, req[i]);

            rep (j, sz(v) - 1) {
                if (v[j] >= b[i] and v[j + 1] <= e[i]) {
                    mf.addEdge(n + 1 + j, n + 1 + sz(v) - 1 + i, (v[j + 1] - v[j]));
                }
            }
        }

        int flow = mf.maxFlow(src, sink);

        int required = 0;
        rep (i, m) required += req[i];

        puts(flow == required ? "YES" : "NO");
    }

    return 0;
}