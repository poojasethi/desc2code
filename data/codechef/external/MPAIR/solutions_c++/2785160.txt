#include <iostream>
#include <queue>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

bool vis[100005];

long long func(vector <int> v[], int idx)
{
	queue <int> q;
	vis[idx] = true;
	q.push(idx);
	long long cnt = 1;
	int i,f;
	while ( !(q.empty()) ) {
		f = q.front();
		q.pop();
		for ( i = 0; i < v[f].size(); i++ ) {
			if ( !vis[v[f][i]] ) {
				vis[v[f][i]] = true;
				cnt++;
				q.push(v[f][i]);
			}
		}
	}
	return cnt;
}

int main() {
	int n,m,x,y,i;
	memset(vis, false, sizeof(vis));
	cin >> n >> m;
	vector <int> v[n+2];
	int dp[n+2];
	while ( m-- ) {
		cin >> x >> y;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	vector <long long> ans;
	long long res = 0;
	for ( i = 1; i <= n; i++ ) {
		if ( !vis[i] ) {
			long long x = func(v,i);
			ans.push_back(x);
		}
	}
	
	for ( i = ans.size()-1; i >= 0; i-- ) {
		if ( i == ans.size()-1 ) dp[i] = ans[i];
		else dp[i] = dp[i+1] + ans[i];
	}
	for ( i = 0; i < ans.size()-1; i++ ) {
		res += ans[i]*dp[i+1];
	}
	cout << res << endl;
	return 0;
}