#include<iostream>
using namespace std;
long long parent[100005];long long c[100005];
long long mat[1000005][2];
long long find(long long parent[], long long i)
{
    if (parent[i] == -1)
        return i;
    return find(parent, parent[i]);
}

// Naive implementation of union()
void Union(long long parent[], long long x, long long y)
{
    long long xset = find(parent, x);
    long long yset = find(parent, y);
    parent[xset] = yset;
    c[yset]=c[yset]+c[xset];
}
int main()
{
    long long n,m,ans=0,i,p;
    cin>>n>>m;
    p=n;
    for(i=1;i<=n;i++)
    {parent[i]=-1;c[i]=1;}
    for(i=1;i<=m;i++)
    {
        cin>>mat[i][0]>>mat[i][1];
    }
    for(i=1;i<=m;i++)
    {
        Union(parent,mat[i][0],mat[i][1]);
    }
    for(i=1;i<=n;i++)
    {
        if(parent[i]==-1)
        {
                ans=ans+(c[i]*(p-c[i]));
                p=p-c[i];
        }
    }
    //ans=(count*(count-1))/2;
    cout<<ans<<endl;
    return 0;
}
