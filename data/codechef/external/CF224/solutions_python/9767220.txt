#include<bits/stdc++.h>
using namespace std;
 
struct Point
{
    int x, y;
};

Point p0;

Point nextToTop(stack<Point> &S)
{
    Point p = S.top();
    S.pop();
    Point res = S.top();
    S.push(p);
    return res;
}

int distSq(Point p1,Point p2)
{
    return (p1.x - p2.x)*(p1.x - p2.x) +
          (p1.y - p2.y)*(p1.y - p2.y);
}

int distSq2(pair<int,int> p1,pair<int,int> p2)
{
    return (p1.first - p2.first)*(p1.first - p2.first) +
          (p1.second - p2.second)*(p1.second - p2.second);
}

int orientation(Point p, Point q, Point r)
{
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
 
    if (val == 0) return 0;  // colinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}
 
// A function used by library function qsort() to sort an array of
// points with respect to the first point
int compare(const void *vp1, const void *vp2)
{
   Point *p1 = (Point *)vp1;
   Point *p2 = (Point *)vp2;
 
   // Find orientation
   int o = orientation(p0, *p1, *p2);
   if (o == 0)
     return (distSq(p0, *p2) >= distSq(p0, *p1))? -1 : 1;
 
   return (o == 2)? -1: 1;
}
 
// Prints convex hull of a set of n points.
void solve(Point points[], int n)
{
   int ymin = points[0].y, min = 0;
   for (int i = 1; i < n; i++)
   {
     int y = points[i].y;
     if ((y < ymin) || (ymin == y &&
         points[i].x < points[min].x))
        ymin = points[i].y, min = i;
   }
   swap(points[0], points[min]);
   p0 = points[0];
   qsort(&points[1], n-1, sizeof(Point), compare);
    int m = 1; // Initialize size of modified array
  
   for (int i=1; i<n; i++)
   {
       while (i < n-1 && orientation(p0, points[i],
                                    points[i+1]) == 0)
          i++;
        points[m] = points[i];
       m++; 
   }
   if (m < 3) return;
   stack<Point> S;
   S.push(points[0]);
   S.push(points[1]);
   S.push(points[2]);
   for (int i = 3; i < m; i++)
   {
      while (orientation(nextToTop(S), S.top(), points[i]) != 2)
         S.pop();
      S.push(points[i]);
   }
   double ans=0;
   int count=1,k=0;
   vector<pair<int,int> >v(S.size()); v.clear();
   int sz = S.size();
   while (!S.empty())
   {
       k++;
       Point p = S.top();
       S.pop();
       v.push_back(make_pair(p.x,p.y));
  }
  for(int i=1;i<sz;i+=1)
  {
      ans+=sqrt(distSq2(v[i],v[i-1]));
      //cout<<v[i].first<<" "<<v[i].second<<" "<<v[i-1].first<<" "<<v[i-1].second<<endl;
  }
  ans+=sqrt(distSq2(v[0],v[sz-1]));
  printf("%.1f\n",ans);
  }  

int main()
{
    int n,a,b;
    scanf("%d",&n);
    Point points[n+1];
    for(int i=0;i<n;i++)
    {
      scanf("%d%d",&a,&b);
      points[i].x=a,points[i].y=b;
    }
    solve(points, n);
    return 0;
}