#include<bits/stdc++.h>
#define x first
#define y second
using namespace std;
#define ll long long
#define dd double
struct Point{
	double x,y;
	bool operator <(const Point &p) const {
		return x < p.x || (x == p.x && y < p.y);
	}
};
double cross(const Point &O, const Point &A, const Point &B)
{
	return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}
double dist(const Point &p,const Point &q)
{
	return sqrt(pow((p.x-q.x),2.0)+pow((p.y-q.y),2.0));
}
void convex_hull(vector<Point> P)
{
	ll n = P.size(), k = 0;
	vector<Point> H(2*n);
	sort(P.begin(), P.end());
	for (ll i = 0; i < n; ++i) {
		while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}
	for (ll i = n-2, t = k+1; i >= 0; i--) {
		while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}
	H.resize(k-1);
	n=k-1;
	dd per=0;
    	ll j = 0;
	Point p=H[j];
    	for (ll i = 1; i < n; i++)
    	{
        	per +=dist(p,H[i]);
        	p=H[i];
    	}
	per+=dist(p,H[0]);
 	printf("%.1lf\n",per);
}
int main()
{
	/*ll t;
	scanf("%lld",&t);
	while(t--)
	{*/
		ll n,i;
		vector<Point>v;
		scanf("%lld",&n);
		for(i=0;i<n;i++)
		{
			dd temp,temp1;
			scanf("%lf%lf",&temp,&temp1);
			Point p;
			p.x=temp;p.y=temp1;
			v.push_back(p);
		}
		convex_hull(v);
	//}
	return 0;
}
