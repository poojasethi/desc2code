#include<bits/stdc++.h>
#define ll long long int
#define loop(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
#define bp 1000000007
#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define F first
#define S second
#define EPS 1e-9
using namespace std;
const ll LIM=1e5+5;
ll n,x,y;
double pm;
struct point{
    ll x,y;
    point ():x(0),y(0){}
    point(ll xx,ll yy):x(xx),y(yy){}
};
struct vec{
    ll x,y;
    vec(point a,point b){x=b.x-a.x;y=b.y-a.y;}
};
point pivot;
vector<point>P(LIM);
vector<point>S;
bool collinear(point a,point b,point c){
    double m1=1.0*(c.y-b.y)/(c.x-b.x);
    double m2=1.0*(b.y-a.y)/(b.x-a.x);
    if(fabs(m1-m2)<EPS)return 1;
    return 0;
}
double dist(point a,point b){
    return hypot(b.y-a.y,b.x-a.x);
}
bool AnglCmp(point a,point b){
    if(collinear(pivot,a,b))
        return dist(a,pivot)<dist(b,pivot);
    else{
        double d1y=(a.y-pivot.y),d1x=(a.x-pivot.x);
        double d2y=(b.y-pivot.y),d2x = (b.x-pivot.x);
        return atan2(d1y,d1x) - atan2(d2y,d2x)<0;
    }
}
void SortAndPivot(){
    ll small=0;
    loop(i,1,n)
        if(P[i].y<P[small].y || (P[i].y==P[small].y && P[i].x>P[small].x))
            small=i;
    pivot=P[small];
//    printf("Small %d\n",small);
    swap(P[small],P[0]);
    sort(P.begin()+1,P.begin()+n,AnglCmp);

}
double cross (vec &a,vec &b){
    return a.x*b.y-b.x*a.y;
}
bool CCW(point a,point b,point c){
    vec v1(a,b),v2(b,c);
    return cross(v1,v2) > EPS;
}
void CH(){
    SortAndPivot();
//    printf("P:\n");
//    loop(i,0,n)
//        printf("%lld %lld\n",P[i].x,P[i].y);
    S.pb(P[n-1]);S.pb(P[0]);S.pb(P[1]);
    loop(i,2,n){
//        printf("S before:\n");
//        loop(i,0,sz(S))
//            printf("%lld %lld\n",S[i].x,S[i].y);
        ll j=sz(S);
        if(CCW(S[j-2],S[j-1],P[i]))
            S.pb(P[i]);
        else
            S.pop_back(),i--;
//        printf("S after:\n");
//        loop(i,0,sz(S))
//            printf("%lld %lld\n",S[i].x,S[i].y);
    }

}
int main()
{
	scanf("%lld",&n);
	loop(i,0,n)scanf("%lld %lld",&x,&y),P[i]=point(x,y);
	CH();

	loop(i,0,sz(S)-1){
        pm+=(dist(S[i],S[i+1]));
	}
	printf("%.1f",pm);
	return 0;
}
