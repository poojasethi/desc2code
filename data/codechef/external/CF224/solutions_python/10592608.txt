#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define pil pair<int,along long>
#define pli pair<long long,int>
#define pll pair<long long,long long>
#define pb push_back
#define mk make_pair
#define eps 1e-12
#define maxn 100009
using namespace std;
struct point
{
	ll x,y;
	point() {}
	point(ll x,ll y): x(x),y(y) {}
	point(const point& p): x(p.x),y(p.y) {}
	point operator + (const point& p) const {return point(x+p.x,y+p.y);}
	point operator - (const point& p) const {return point(x-p.x,y-p.y);}
};
bool operator < (const point& xx,const point& yy)
{
	return mk(xx.x,xx.y)<mk(yy.x,yy.y);
}
inline ll dot_product(point xx,point yy)
{
	return (xx.x*yy.x)+(xx.y*yy.y);
}
inline ll cross_product(point xx,point yy)
{
	return (xx.x*yy.y)-(xx.y*yy.x);
}
inline ll sqdist(point xx,point yy)
{
	return dot_product(xx-yy,xx-yy);
}
inline long double dist(point xx,point yy)
{
	return sqrt(sqdist(xx,yy));
}
inline bool anti(point xx,point yy)
{
	if(cross_product(xx,yy)>0)
	{
		return true;
	}
	return false;
}
point lowbot;
inline bool compare(point xx,point yy)
{
	if(cross_product(xx-lowbot,yy-lowbot)==0)
	{
		return sqdist(lowbot,xx)<sqdist(lowbot,yy);
	}
	return cross_product(xx-lowbot,yy-lowbot)>0;
}
inline vector<point> convex_hull(vector<point> v)
{
	int id=0;
	lowbot=v[0];
	for(int i=1;i<v.size();i++)
	{
		if((lowbot.y>v[i].y)||(lowbot.y==v[i].y&&(lowbot.x>v[i].x)))
		{
			id=i;
			lowbot=v[id];
		}
	}
	swap(v[0],v[id]);
	sort(v.begin()+1,v.end(),compare);
	vector<point> ans;
	ans.pb(v[0]);
	ans.pb(v[1]);
	for(int i=2;i<v.size();i++)
	{
		while(ans.size()>=2)
		{
			if(!anti(ans[ans.size()-1]-ans[ans.size()-2],v[i]-ans[ans.size()-1]))
			{
				ans.pop_back();
			}
			else
			{
				break;
			}
		}
		ans.pb(v[i]);
	}
	return ans;
}
int main()
{
	ios_base::sync_with_stdio(false);
	int n;
	cin>>n;
	vector<point> v;
	for(int i=0;i<n;i++)
	{
		ll x,y;
		cin>>x>>y;
		v.pb(point(x,y));
	}
	vector<point> hull=convex_hull(v);
	int m=hull.size();
	long double ans=0.0;
	for(int i=0;i<m;i++)
	{
		ans=ans+dist(hull[i],hull[(i+1)%m]);
	}
	cout<<fixed<<setprecision(1)<<ans<<"\n";
}