#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<cstdio>
#include<algorithm>

using namespace std;

struct points
{
    int x;
    int y;
};

/*inline int input()
{
    int a=0;

    char c;

    c=getchar();

    while(c<33)
    {
        c=getchar();
    }

    while(c>=33)
    {
        a=(a<<3)+(a<<1)+c-'0';

        c=getchar();
    }

    return(0);
}
*/
int main()
{
    int subid;
    cin>>subid;

    int t;

    cin>>t;

    while(t--)
    {
        points r[3];

        float a[3];

        double max=0,min=0,med=0;

        enum side{scalene,isosceles};

        side side=scalene;

        enum angle{right,acute,obtuse};

        angle angle;

        int i=0,j=0;

        for(i=0;i<3;i++)
        {
            cin>>r[i].x;
            cin>>r[i].y;
        }

        for(i=0;i<3;i++)
        {
            a[i]=(pow((r[(i+1)%3].x-r[i%3].x),2)+pow((r[(i+1)%3].y-r[i%3].y),2));
        }

      //  for(i=0;i<3;i++)
     //   cout<<"a["<<i<<"]="<<a[i]<<endl;
        sort(a,a+3);

        min=a[0];
        med=a[1];
        max=a[2];

       /* min=a[0];
        max=a[0];
        for(i=1;i<3;i++)
        {
            if(max<a[i])
                max=a[i];

            if(min>a[i])
                min=a[i];
        }

        for(i=0;i<3;i++)
        {
            if((fabs(a[i]-max)>pow(10,-6))&&(fabs(a[i]-min)>pow(10,-6)))
               med=a[i];
        }*/
     //   cout<<"min max med="<<min<<"\t"<<max<<"\t"<<med<<endl;

        for(i=0;i<3;i++)
        {
            for(j=i+1;j<3;j++)
            {
                if(fabs(a[i]-a[j])<=pow(10,-6))
                {
                    side=isosceles;
                    break;
                }
            }
        }

        double A,B;
       // cout<<max<<" "<<min<<" "<<med<<endl;

        A=max;

        B=min+med;

       // cout<<"a="<<A<<"\nb="<<B<<endl;

        if(fabs(A-B)<=pow(10,-6))
            angle=right;
        else if(A>B)
            angle=obtuse;
        else if(A<B)
            angle=acute;

        switch(subid)
        {
            case 1:
                    {
                        if(side==isosceles)
                        {
                            cout<<"Isosceles triangle"<<endl;
                        }

                        else
                        {
                            cout<<"Scalene triangle"<<endl;
                        }

                        break;
                    }

            case 2:
                {
                    if(side==isosceles)
                    {
                        switch(angle)
                        {
                            case right:
                                cout<<"Isosceles right triangle"<<endl;
                                break;

                            case acute:
                                cout<<"Isosceles acute triangle"<<endl;
                                break;

                            case obtuse:
                                cout<<"Isosceles obtuse triangle"<<endl;
                                break;
                        }

                        break;
                   }

                  else if(side==scalene)
                     {
                       switch(angle)
                        {
                            case right:
                                cout<<"Scalene right triangle"<<endl;
                                break;

                            case acute:
                                cout<<"Scalene acute triangle"<<endl;
                                break;

                            case obtuse:
                                cout<<"Scalene obtuse triangle"<<endl;
                                break;
                        }

                      break;
                    }

                    break;
        }

    }

    }

    return(0);
}
