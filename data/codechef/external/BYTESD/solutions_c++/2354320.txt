#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<list>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iomanip>
#include<cmath>
#include<cctype>
#include<cstring>
#include<string>
#include<ctime>
#include<cassert>
using namespace std;
//#include<conio.h>

#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;
#define FOR(i,a,b) for(int i=(a);i< (b);i++)
#define input(a) scanf("%d",&a)
#define CLEAR(a) memset((a),0,sizeof(a))
#define INF 1000000000
#define LL long long
#define PI 2*acos(0.0)
#define sqr(a) (a)*(a)
#define MAX 1005
char dp[MAX][MAX];
bool check[MAX][MAX];
int n,m,start,end;
bool flag;
void dfs(int i,int j)
{
    if(dp[i][j]=='f')
    {
     if(flag==0)
     {
     for(int p=0;p<n;p++)
     {
      for(int q=0;q<m;q++)
      {
      if(p==i && q==j)
      printf("f");
      else if(p==start && q==end)
      printf("s");
      else if(check[p][q])
      printf("b");
      else
      printf("-");
      }
      printf("\n");
      }
      flag=1;
      }
     }
     else if(flag==0 && i>=0 && j>=0 && i<n && j<m && check[i][j]==false && (dp[i][j]=='b' || dp[i][j]=='s') )
     {
             check[i][j]=true;
             dfs(i+1,j);
             dfs(i-1,j);
             dfs(i,j+1);
             dfs(i,j-1);
             check[i][j]=false;
     }  
}
int main()
{
    int tc;
    input(tc);
    while(tc--)
    {
      input(n);input(m);
      flag=false;
      memset(check,0,sizeof(check));
      for(int i=0;i<n;i++)
        scanf("%s",&dp[i]);
      for(int i=0;i<n;i++)
       for(int j=0;j<m;j++)
       {
         if(dp[i][j]=='s')
         {
            start=i;
            end=j; 
            dfs(i,j);               
         }     
       }
      
      if(!flag)
       cout<<"The path doesn't exist.\n";         
    }
    //getch();
    return 0;
}
