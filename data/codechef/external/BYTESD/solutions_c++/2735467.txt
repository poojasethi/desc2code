/*
author :  R Anirudh 
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;
#define SIZE(A) ((int)(A.size()))
#define MSET(A,x) memset(A,x,sizeof(A));
#define FILL(A,x) fill(A.begin(),A.end(),x)
#define REP(i,N) for(int i=0;i<(int)(N);i++)
#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)
#define REV(i,a,b) for(int i=(int)(a);i>=(int)(b);i--)
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define ALL(x) x.begin(),x.end()
#define INF (INT_MAX/2)
#define LLINF (LONG_LONG_MAX/2LL)
#define EPS 1e-12
#define GI ({int t;scanf("%d",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GF ({double t;scanf("%lf",&t);t;})
#define bitCount(n) __builtin_popcount(n)
#define MOD 10000009
#define MAXN 1000005
#define FIX(a) (((a)%MOD+MOD)%MOD)
typedef long long LL;
typedef unsigned long long ULL;
using namespace std;
int t,n,m;
char a[1001][1001];
int b[1001][1001];
bool valid(int i,int j)
{return(i>=0&&j>=0&&j<m&&i<n);}
bool visit(int i,int j)
{
if(!valid(i,j))
return 0;
if(b[i][j]==0)
return 0;
if(a[i][j]=='f')
{b[i][j]=1;
return b[i][j];}	
b[i][j]=0;
if(visit(i+1,j))
{b[i][j]=1;
return b[i][j];}	
if(visit(i-1,j))
{b[i][j]=1;
return b[i][j];}	
if(visit(i,j+1))
{b[i][j]=1;
return b[i][j];}
if(visit(i,j-1))
{b[i][j]=1;
return b[i][j];}
return b[i][j];
}
int a1,a2,a3,a4;
int main()
{ scanf("%d",&t);
while(t--)
{
scanf("%d %d\n",&n,&m);
for(int i=0;i<n;i++)
{ cin>>a[i];
for(int j=0;j<m;j++)
{ if(a[i][j]=='w')	
b[i][j]=0;
else
if(a[i][j]=='f')
{a1=i;a2=j;b[i][j]=-1;}
else
if(a[i][j]=='s')
{a3=i;a4=j;b[i][j]=0;}
else
b[i][j]=-1;
}
}
int i=a3,j=a4;
if(visit(i,j+1)||visit(i-1,j)||visit(i,j+1)||visit(i,j-1))
b[i][j]=1;
if(b[a1][a2]==-1)
printf("The path doesn't exist.\n");
else
{
for(i=0;i<n;i++)
{ for(j=0;j<m;j++)
{if(b[i][j]!=1)
cout<<"-";
else
cout<<a[i][j];
}
cout<<endl;
}
}
}
return 0;
}