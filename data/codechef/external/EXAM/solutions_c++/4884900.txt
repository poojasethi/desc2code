/*
Author :  ARVIND PANDEY
 */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string.h>
#include <stdlib.h>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <map>

using namespace std;

struct _ {
    ios_base::Init i;

    _() {
        cin.sync_with_stdio(0);
        cin.tie(0);
    }
} _;

#define FOR(i,n) for(i=0;i<n;i++)
#define pb(x) push_back(x)
#define ll long long
#define mp make_pair

ll power(ll a, ll n)//////             O(log n)
{
    ll ans = 1;
    while (n) {
        if (n % 2 == 1)
            ans *= a;
        a *= a;
        n /= 2;
    }
    return ans;
}

ll gcd(ll a, ll b)////                 O(log(a+b))
{
    if (b==0)
        return a;
    return gcd(b,a%b);
}
////////////////////////////////////////////////////////////////////////////////////CODE BEGINS/////////////////////////////////////////////////////////
#define gc getchar_unlocked

void inp(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

int dp[1005][10005];
int temp[1005][10005];


int main() 
{
    int i,j,N,T; 
    //cin>>N;
    inp(N);
    int val[N+1],wt[N+1];
    //cin>>T;
    inp(T);
    
    FOR(i,N)
    //cin>>val[i];
    inp(val[i]);
    
    FOR(i,N)
    //cin>>wt[i];
    inp(wt[i]);
    int flag=0;
    for(i=1;i<=N;i++)
    {
        flag=0;
        for(j=1;j<=T;j++)
        {
            if(wt[i-1]<=j)
                {
                    dp[i][j] = max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
                    temp[i][j] = max(2*val[i-1]+dp[i-1][j-wt[i-1]],temp[i-1][j]);
                    temp[i][j] = max(val[i-1]+temp[i-1][j-wt[i-1]],temp[i][j]);    
                }
            else
            {
                dp[i][j] = dp[i-1][j];
                temp[i][j] = temp[i-1][j];
            }
        }
    }
    printf("%d\n",temp[N][T]);
    //cout<<temp[N][T]<<"\n";
    // cout<<dp[N][T]<<"\n";
    return 0;
}