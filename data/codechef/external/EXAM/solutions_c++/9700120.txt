#include<bits/stdc++.h>
using namespace std;
#define SF(x)	scanf("%d", &x)
#define PF(x)	printf("%d", x)
#define psp     printf(" ")
#define pnl     printf("\n")
#define charint(c) ((c)-'0')
#define pii pair< int, int >
#define pb(x) push_back(x)
#define test int t; scanf("%d",&t);while(t--)
#define forall(a,b) for(long long i=a;i<=b;i++)
#define abs(a) ((a)>(0)?(a):(-a))
#define bit(x,i)          (x&(1<<i))  //select the bit of position i of x
#define lowbit(x)         ((x)&((x)^((x)-1))) 
#define higbit(x)         (1 << ( int) log2(x) )
#define countleadzero(x)  __builtin_ctz(x) //in its binary representation ex. when x=8 answer is 3
#define countsetbits(x)   ____builtin_popcount(x) //count no of setbits
#define gcd(a,b)   __gcd(a,b)
#define bss binary_search
#define esort(x)        (sort((x).begin(), (x).end()))
#define ersort(x)       (sort((x).rbegin(), (x).rend()))
#define MAX		100050
#define INF		1e9
#define MOD     1000000007
#define fi first
#define se second
typedef long long 		ll;
typedef unsigned long long	ull;
struct node{
	ll sm;ll in;
};
int main(){
int n,t;
cin>>n>>t;
int v[n],wt[n];
forall(0,n-1)
cin>>v[i];
forall(0,n-1)
cin>>wt[i];
node dp[2][t+1];
for(int i=0;i<2;i++){
dp[i][0].sm=0;
dp[i][0].in=0;
}
for(int i=0;i<=t;i++){
dp[0][i].sm=0;
dp[0][i].in=0;
}
for(int i=1;i<=n;i++){
	for(int j=1;j<=t;j++){
		if(j<wt[i-1]){
			dp[1][j].sm=dp[0][j].sm;
		}
		else{
			dp[1][j].sm=max(max(dp[0][j].sm,dp[0][j-wt[i-1]].sm+v[i-1]),dp[0][j-wt[i-1]].in+2*v[i-1]);
		}
		if(j<wt[i-1])
		dp[1][j].in=dp[0][j].in;
		else
		dp[1][j].in=max(dp[0][j].in,dp[0][j-wt[i-1]].in+v[i-1]);
	}
	for(int j=0;j<=t;j++)
	{
		dp[0][j].sm=dp[1][j].sm;
		dp[0][j].in=dp[1][j].in;
	}
//	for(int j=0;j<=t;j++)
//	cout<<dp[0][j].sm<<"#"<<dp[0][j].in<<" ";
//	pnl;
}
cout<<dp[1][t].sm;
}