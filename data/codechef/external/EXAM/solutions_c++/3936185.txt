#include<iostream>
#define ll long long int

using namespace std;

int one_double[1010][10010]={0},all_one[1010][10010]={0};

int max1(int a,int b,int c)
{
    if(a>=b)
        return (a>=c)?a:c;
    else if(a<=b)
        return (b>=c)?b:c;
}

int main()
{
    int i,j,k,l,m,n,marks[1010],time[1010];
    cin>>n>>m;
    for(i=1;i<=n;i++)
        cin>>marks[i];
    for(i=1;i<=n;i++)
        cin>>time[i];

    for(i=1;i<=n;i++)
    {
        // curnt element cant be picked at all because its time[i] is greater than j
        for(j=1;j<min(time[i],m+1);j++)
        {
            one_double[i][j]=one_double[i-1][j];
            all_one[i][j]=all_one[i-1][j];
        }
        // covers all the cases for wich current elemnt can be picked
        for(j=time[i];j<=m;j++)
        {
            // 1. not picking up the current elemt
            // 2. picking up the current elemnt
            all_one[i][j]=max(all_one[i-1][j],all_one[i-1][j-time[i]]+marks[i]);

            // 1 . picking this element only once time and any previous element 2 times or
            // 2 . pick current element 2 times or
            // 3 . dont pick current element at all
            one_double[i][j]=max1(one_double[i-1][j-time[i]]+marks[i],
                                  all_one[i-1][j-time[i]]+2*marks[i],
                                  one_double[i-1][j]);
        }
    }
    cout<<one_double[n][m];

    return 0;
}
