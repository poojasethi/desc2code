#include<iostream>
#include<stdio.h>
#include<vector>
#include<map>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<assert.h>
using namespace std;
 
int K[1003][10000+1];
int MOD[1000+1][10000+1];
 int knapSack(int W, int wt[], int val[], int n)
{
    int i, w;
 
 
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
           {
               MOD[i][w]=0;
               K[i][w] = 0;
           }
           else if (wt[i-1] <= w)
           {
               K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
               MOD[i][w] =max(2*val[i-1] + K[i-1][w-wt[i-1]],  MOD[i-1][w-wt[i-1]]+val[i-1]);
               MOD[i][w]=max(MOD[i][w],MOD[i-1][w]);
           }
           else
           {
               K[i][w] = K[i-1][w];
               MOD[i][w]= MOD[i-1][w];
           }
          //printf("%lld ",MOD[i][w]);
       }
       //printf("\n");
   }
 
   return MOD[n][W];
}
 
int main()
{
    int n;
    cin>>n;
 
    assert(n<=1000);
 
    int total;
    cin>>total;
 
   assert(total<=10000);
    int marks[n+1],time[n+1];
 
    for(int i=0;i<n;i++)
        scanf("%d",&marks[i]);
 
    for(int i=0;i<n;i++)
        scanf("%d",&time[i]);
 
    int ans=0;
    ans=max(ans,knapSack(total,time,marks,n));
 
    printf("%d\n",ans);
    return 0;
}