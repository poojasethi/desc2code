#include <bits/stdc++.h>
using namespace std;
 
#define mod 1000000007
#define INF (int)1e9
#define EPS 1e-9
#define LINF (long long)1e18
 
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz(a) int((a).size())
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define trr(c,i) for(typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); i++)
#define loop(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
#define rloop(i,a,b) for(int (i)=(a);(i)>=(b);(i)--)
#define maxn 1000010
typedef long long ll;
typedef pair<int,int> pi;
typedef pair<ll,ll> pl;
typedef vector<int> vi;
typedef vector<pi> vpi;
typedef vector<long long> vl;
typedef vector<pl> vpl;
 
template <typename X> void swap( X &a, X &b) {
X tp;tp = a;a = b;b = tp;
}
int prime[maxn];
vi primes;
vi found;
vl pfactors;
 
void primesieve()
{
    primes.clear();
    ll k;
    loop(j,0,maxn) prime[j]=1;
    prime[0]=0;
    prime[1]=0;
    ll i;
    //main sieve
    for(i=2;i<maxn;i++)
    {
        if(prime[i])
        for( k=i;i*k<maxn;k++)
        {
            prime[i*k]=0;
        }
    }
    loop(j,2,maxn) if(prime[j]) primes.pb(j);
}
 
int main()
{
    ll n,phin;
    primesieve();
    int t;
    cin>>t;
    ll x,y;
    while(t--)
    {
        cin>>n>>phin;
        pfactors.clear();
        found.clear();
        //check if u can find some prime factors
        tr(primes,i)
        {
            if(*i>n) break;
            if(n%(*i)==0) found.pb(*i);
        }
        tr(found, j)
        {
            x=1;
            y=(*j);
            while(n%(*j)==0)
            {
                pfactors.pb(*j);
                x=x*(*j);
                n/=(*j);
            }
            //compute new phi(n)
            phin=(phin/(x-(x/y)));
        }
        //check various cases
        if(n!=1)
        {
            //either p^2 or pq or p
            if(n==(phin+1)) pfactors.pb(n); //case p
            else if(n==(n-phin)*(n-phin) ) loop(i,0,2) pfactors.pb(n-phin); //case p^2
            else
            {
                //case pq
                ll prod=n;
                ll sum= n-phin +1;
                double sum1=n-phin+1;
                // x^2 -sum*x+prod=0
                ll root1,root2;
                double d= sqrt(sum1*sum1-4*1*prod+0.5);
                //cout<<"discriminant="<<dis<<"\n";
                ll dis=d+0.5;
                root1=(sum+dis)/2;
                root2=(sum-dis)/2;
                pfactors.pb(root2);
                pfactors.pb(root1);
            }
        }
        //sort(all(pfactors));
        tr(pfactors,j)cout<<(*j)<<" ";
        cout<<"\n";
    }
    return 0;
 
}