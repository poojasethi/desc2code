#include <bits/stdc++.h>
using namespace std;

#define F  first
#define S  second
#define MP make_pair
#define PB push_back

const int N = 1003;

int n, m, ans = INT_MAX;
char A[N][N];
bool visited[N][N];
int dist[N][N];

bool ok(int i, int j) {
    return !visited[i][j] and A[i][j] != '#';
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    cin>>n>>m;
    int x, y;
    for(int i=1;i<=n;++i)
    {
        for(int j=1;j<=m;++j)
        {
            cin>>A[i][j];
            if(A[i][j] == 'S')
            {
                x = i, y = j;
            }
        }
    }
    queue < pair<int,int> > Q;
    Q.push(MP(x,y));
    visited[x][y] = 1;
    while(!Q.empty())
    {
        int i, j;
        pair <int,int> P = Q.front();
        Q.pop();
        if(A[P.F][P.S] == 'E') {
            cout<<dist[P.F][P.S]<<"\n";
            return 0;
        }
        if(P.F - 1 >= 1) {
            i = P.F - 1, j = P.S;
            if(ok(i, j)) {
                Q.push(MP(i, j));
                visited[i][j] = 1;
                dist[i][j] = 1 + dist[P.F][P.S];
            }
        }
        if(P.F + 1 <= n) {
            i = P.F + 1, j = P.S;
            if(ok(i, j)) {
                Q.push(MP(i, j));
                visited[i][j] = 1;
                dist[i][j] = 1 + dist[P.F][P.S];
            }
        }
        if(P.S - 1 >= 1) {
            i = P.F, j = P.S - 1;
            if(ok(i, j)) {
                Q.push(MP(i, j));
                visited[i][j] = 1;
                dist[i][j] = 1 + dist[P.F][P.S];
            }
        }
        if(P.S + 1 <= m) {
            i = P.F, j = P.S + 1;
            if(ok(i, j)) {
                Q.push(MP(i, j));
                visited[i][j] = 1;
                dist[i][j] = 1 + dist[P.F][P.S];
            }
        }
    }
    cout<<"-1\n";
    return 0;
}