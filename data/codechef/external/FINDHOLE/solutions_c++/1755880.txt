#include <cstdio>
#include <cassert>

#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int N, M, K, C;
int D[104][104];

class BipartiteMatching {
   vector<bool> seen;
   bool bpm(int u) {
      for (int j = 0; j < adj[u].size(); ++j) {
         int v = adj[u][j];
         if (seen[v]) continue;
         seen[v] = true;
         if (matchR[v] < 0 || bpm(matchR[v])) {
            matchL[u] = v;
            matchR[v] = u;
            return true;
         }
      }
      return false;
   }
public:
   size_t nL, nR;
   vector< vector<int> > adj; // adjacency lists

   vector<int> matchL, matchR;
   BipartiteMatching(size_t _nL, size_t _nR) : nL(_nL), nR(_nR), adj(_nL) {}

   int process() {
      matchL.assign( nL, -1 ),
      matchR.assign( nR, -1 );
      int cnt = 0;
      for (int i = 0; i < nL; ++i) {
         seen = vector<bool>(nR, false);
         if (bpm(i))
            cnt++;
      }
      return cnt;
   }
};

bool check(int t) {
   BipartiteMatching bpm(N, M*2);
   for (int i = 0; i < N; ++i) {
      for (int j = 0; j < M; ++j) {
         if (D[i][j] + C <= t)
            bpm.adj[i].push_back(j);
         if (D[i][j] <= t)
            bpm.adj[i].push_back(j + M);
      }
   }
   return bpm.process() >= K;
}

int binary_search() {
   int lo = 0, hi = 20000000;
   while (lo < hi) {
      int mid = lo + (hi-lo)/2;
      if (check(mid))
         hi = mid;
      else
         lo = mid+1;
   }
   assert(check(lo));
   return lo;
}

int main(int argc, char* argv[]) {
   int TC;
   scanf("%d", &TC);
   while (TC-- > 0) {
      scanf("%d %d %d %d", &N, &M, &K, &C);
      for (int i = 0; i < N; ++i)
         for (int j = 0; j < M; ++j)
            scanf("%d", &D[i][j]);
      int res = binary_search();
      printf("%d\n", res);
   }

   return 0;
}
