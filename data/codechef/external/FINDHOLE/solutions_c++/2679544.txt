#include <iostream>
#include <vector>
#include <cstring>
#include <cstdio>

using namespace std;

int n, m, k, c;
int v[105][105];
vector<int> fillin[205];
int vis[300];
int r[200];
int l[301];

bool dfs(int pos)
{
    if(vis[pos]) return false;
    vis[pos] = 1;

    for(int i = 0; i < fillin[pos].size(); i++) {
        if(l[fillin[pos][i]] == -1 || dfs(l[fillin[pos][i]])) {
            r[pos] = fillin[pos][i];
            l[fillin[pos][i]] = pos;
            return true;
        }
    }
    return false;
}
int main()
{
    int t;

    cin >> t;

    while(t--) {
        int n, m, k, c;

        cin >> n >> m >> k >> c;

        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                scanf("%d", &v[i][j]);

        int low = 0;
        int high = 20000000;

        while(low < high) {
            int mid = (low+high)/2;

            for(int i = 0; i < 2*m; i++) {
                fillin[i].clear();
            }

            for(int i = 0; i < n; i++) {
                for(int j = 0; j < m; j++) {
                    if(v[i][j] <= mid) fillin[2*j].push_back(i);
                    if(v[i][j] <= mid-c) fillin[2*j + 1].push_back(i);
                }
            }

            memset(r, -1, sizeof(r));
            memset(l, -1, sizeof(l));
            bool flow_possible = true;
            while(flow_possible) {
                flow_possible = false;
                memset(vis, 0, sizeof(vis));
                for(int i = 0; i < 2*m; i++) {
                    if(r[i] == -1) {
                        flow_possible |= dfs(i);
                    }
                }
            }

            int val = 0;

            for(int i = 0; i < 2*m; i++) {
                if(r[i] != -1) val++;
            }

            if(val >= k) high = mid;
            else low = mid+1;
        }

        cout << low << endl;
    }
}
