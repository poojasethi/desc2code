//#pragma comment(linker,"/STACK:102400000,102400000")
#include<stdio.h>
#include<iostream>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<string>
#define ll long long
#define db double
#define PB push_back
using namespace std;

const int N = 100005;
const int maxnode=310;
const int maxedge=50010*2;
const int inf=100000000;
const int oo = 1000000000;

int node,src,dest,nedge;
int head[maxnode],point[maxedge],next[maxedge],flow[maxedge],capa[maxedge];
int dist[maxnode],Q[maxnode],work[maxnode];

void init(int _node,int _src,int _dest){
    node=_node;
    src=_src;
    dest=_dest;
    for(int i=0;i<node;i++) head[i]=-1;
    nedge=0;
}

void addedge(int u,int v,int c1,int c2){
    point[nedge]=v,capa[nedge]=c1,flow[nedge]=0,next[nedge]=head[u],head[u]=nedge++;
    point[nedge]=u,capa[nedge]=c2,flow[nedge]=0,next[nedge]=head[v],head[v]=nedge++;
}

bool dinic_bfs(){
    memset(dist,255,sizeof(dist));
    dist[src]=0;
    int sizeQ=0;
    Q[sizeQ++]=src;
    for(int c1=0;c1<sizeQ;c1++)
        for(int k=Q[c1],i=head[k];i>=0;i=next[i])
            if(flow[i]<capa[i]&&dist[point[i]]<0){
                dist[point[i]]=dist[k]+1;
                Q[sizeQ++]=point[i];
            }
    return dist[dest]>=0;
}

int dinic_dfs(int x,int exp)
{
    if(x==dest) return exp;
    for(int &i=work[x];i>=0;i=next[i])
    {
        int v=point[i],tmp;
        if(flow[i]<capa[i]&&dist[v]==dist[x]+1&&(tmp=dinic_dfs(v,min(exp,capa[i]-flow[i])))>0)
        {
            flow[i]+=tmp;
            flow[i^1]-=tmp;
            return tmp;
        }
    }
    return 0;
}

int dinic_flow()
{
    int res=0;
    while(dinic_bfs())
    {
        for(int i=0;i<node;i++) work[i]=head[i];
        while(1)
        {
            int delta=dinic_dfs(src,oo);
            if(delta==0) break;
            res+=delta;
        }
    }
    return res;
}

int t,n,m,k,c;
int a[110][110];

int main()
{
#ifdef PKWV
    freopen("in.in","r",stdin);
#endif // PKWV
    scanf("%d",&t);
    while(t--){
        scanf("%d%d%d%d",&n,&m,&k,&c);
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                scanf("%d",&a[i][j]);
            }
        }
        int l=0,r=inf;
        while(l<r){
            int mid=(l+r)>>1;
            init(n+m+m+2,0,n+m+m+1);
            for(int i=1;i<=n;i++){
                addedge(0,i,1,0);
                for(int j=1;j<=m;j++){
                    if(a[i][j]<=mid){
                        addedge(i,j+n,1,0);
                        if(a[i][j]+c<=mid){
                            addedge(i,j+n+m,1,0);
                        }
                    }
                }
            }
            for(int j=1;j<=m;j++){
                addedge(j+n,dest,1,0);
                addedge(j+n+m,dest,1,0);
            }
            int ans=dinic_flow();//printf("%d\n",ans);
            if(ans>=k) r=mid;
            else l=mid+1;
        }
        printf("%d\n",r);
    }
    return 0;
}

