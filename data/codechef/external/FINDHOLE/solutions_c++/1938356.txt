#include<cstdio>
#include<iostream>
#include<algorithm>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<functional>
#include<limits>
#include<cassert>

using namespace std;

const int inv=numeric_limits<int>::max();
const int max_n=105;
const int max_c=10000005;
const int max_v=3*max_n+2;

int n,h,C,k;
int d[max_n][max_n];
vector<int> adjl[max_v];
int s=0,t=n+2*h+1;
int v;

int c[max_v][max_v];
int f[max_v][max_v]={0};

bool visited[max_v];
int par[max_v];
int aug[max_v];
queue<int> Q;
int augval;

bool augmentingpath()
{
  fill(visited, visited+max_v, false);
  while(!Q.empty())
    Q.pop();
	
  visited[s]=true;
  par[s]=s;
  Q.push(s);
  aug[s]=inv;
  
  int vt,vtnbr;
  while(!Q.empty())
  {
    vt=Q.front();
    Q.pop();
    
    for(int i=0; i<adjl[vt].size(); ++i)
    {
      vtnbr=adjl[vt][i];
      if((not visited[vtnbr]) and (c[vt][vtnbr]-f[vt][vtnbr]>0))
      {
        visited[vtnbr]=true;
        Q.push(vtnbr);
        par[vtnbr]=vt;
		aug[vtnbr]=min(aug[vt],c[vt][vtnbr]-f[vt][vtnbr]);
      }
    }
  }
  
  augval=aug[t];
  return visited[t];  
}
 
void augmentflow(int vt)
{
  if(par[vt]!=vt)
  {
    f[par[vt]][vt]+=augval;
    f[vt][par[vt]]-=augval;
    augmentflow(par[vt]);
  }
}

int maxflow;
void findmaxflow()
{
	maxflow=0;
    while(augmentingpath())
    {
      maxflow+=augval;
      augmentflow(t);
    }
}

bool match(int T)
{
	for(int i=0; i<max_v; i++)
		adjl[i].resize(0);
	
	for(int i=0; i<max_v; i++)
		for(int j=0; j<max_v; j++)
		{
			c[i][j]=0;
			f[i][j]=0;
		}

	for(int i=0; i<n; i++)
	{
		adjl[s].push_back(i+1);
		adjl[i+1].push_back(s);
		c[s][i+1]=1;
	}
	
	for(int i=0; i<n; i++)
		for(int j=0; j<h; j++)
		{
			if(d[i][j]<=T)
			{
				adjl[i+1].push_back(n+1+j);
				adjl[n+1+j].push_back(i+1);
				c[i+1][n+1+j]=1;
			}
			if(d[i][j]+C<=T)
			{
				adjl[i+1].push_back(n+h+1+j);
				adjl[n+h+1+j].push_back(i+1);
				c[i+1][n+h+1+j]=1;
			}
		}
		
	for(int i=0; i<2*h; i++)
	{
		adjl[n+1+i].push_back(t);
		adjl[t].push_back(n+1+i);
		c[n+1+i][t]=1;
	}
		
	findmaxflow();
	//cout<<T<<" "<<maxflow<<endl;
	if(maxflow>=k)
		return true;
	return false;
}

int binsrc(int l, int r)//(l,r]
{
	if(r==l+1)
		return r;
	
	int mid=(l+r)/2;
	if(match(mid))
		return binsrc(l,mid);
	else
		return binsrc(mid,r);
}

int T;
int main()
{
	scanf("%d",&T);
	for(int z=0; z<T; z++)
	{
		scanf("%d%d%d%d",&n,&h,&k,&C);
		t=n+2*h+1;
		for(int i=0; i<n; i++)
			for(int j=0; j<h; j++)
				scanf("%d",&d[i][j]);
				
		printf("%d\n",binsrc(0,2*max_c));
	}
	
    return 0;
}
