#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <complex>
#include <utility>
#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cctype>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>

using namespace std;


typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef vector <int> VI;
typedef vector <string> VS;
typedef vector <vector <int> > VVI;
typedef pair <int,int> PII;

#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
#define REV(i,a,b) for(int i=a-1;i>=b;i--)
#define rev(i,n) REV(i,n,0)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define GI ({ int x; scanf("%d",&x); x; })
#define GLL ({ LL x; scanf("%lld",&x); x; })
#define ALL(v) v.begin(),v.end()
#define PB push_back
#define MP make_pair
#define PQ priority_queue
#define inf (int)(1e9)
#define linf (LL)(1e18)
#define eps (double)(1e-9)
#define leps (LD)(1e-18)
#define PI (double)(3.141592653589793238)


inline int gi()
{
	register int r=0,c;
	for(c=getchar_unlocked();c<=32;c=getchar_unlocked());
	if(c=='-')
		return -gi();
	for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
	return r;
}

#define MAXN 305
#define INF (int)(1e9)
vector<int> G[MAXN];
int n,m,match[MAXN],dist[MAXN]; // left - 1 to n, right - n+1 to n+m

bool bfs()
{
	queue<int> Q;
	int u,v;
	dist[0]=INF;
	REP(i,1,n+1)
		if(match[i]==0) // take all elements which have not been matched yet
			dist[i]=0, Q.push(i);
		else
			dist[i]=INF;
	while(!Q.empty())
	{
		u=Q.front(); Q.pop();
		REP(i,0,G[u].size())
		{
			v=G[u][i];
			if(dist[match[v]]==INF)
				dist[match[v]]=dist[u]+1,Q.push(match[v]);
		}
	}
	return dist[0]!=INF;	
}

bool dfs(int u)
{
	if(u==0) return true;
	
	int v;
	REP(i,0,G[u].size())
	{
		v=G[u][i];
		if(dist[match[v]]==dist[u]+1)
			if(dfs(match[v]))
			{
				match[u]=v; match[v]=u; return true;
			}
	}
	
	dist[u]=INF;
	return false;
}

int hopcroft_karp()
{
	int ans=0;
	memset(dist,0,sizeof dist);
	memset(match,0,sizeof match);
	
	while(bfs())
		REP(i,1,n+1)
			if(match[i]==0 && dfs(i))
				ans++;

	REP(i,1,n+m+1) G[i].clear();
	return ans;
}

int c,a[105][105];

int solve(int curr)
{
	int M=m/2;
	REP(i,1,n+1)
		REP(j,1,M+1)
		{
			if(a[i][j]<=curr)
			{
				G[i].PB(n+j);
				G[n+j].PB(i);
			}
			if(a[i][j]+c<=curr)
			{
				G[i].PB(n+M+j);
				G[n+M+j].PB(i);
			}
		}
	return hopcroft_karp();
}

int main()
{
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	int t,k,l,r;
	t=gi();
	while(t--)
	{
		n=gi(); m=gi(); k=gi(); c=gi();
		REP(i,1,n+1)
			REP(j,1,m+1)
				a[i][j]=gi();
		m*=2;
		l=0,r=20000005;
		while(l<r)
		{
			int mid=(l+r)/2;
			if(solve(mid)>=k)
				r=mid;
			else
				l=mid+1;
			//cout<<l<<' '<<r<<'\n';
		}
		cout<<r<<'\n';
	}
	return 0;
}
