#include<iostream>
#include<vector>
using namespace std;
vector<vector<bool> > graph;
vector<vector<int> > mat;
int n,m,k,c;
//n1 rows, n2 cols.
//n1 nodes in 1st part and n2 nodes in 2nd
int n1;
int n2;
vector<int> mc,mr;
vector<bool> seen;

bool bpm(int i)
{
	for(int j=0;j<n2;++j)
	if(graph[i][j]&&!seen[j])
	{
		seen[j]=1;
		if(mc[j]<0||bpm(mc[j]))
		{
			mr[i]=j;
			mc[j]=i;
			return 1;
		}
	}
	return 0;
}
int match()
{
	mc.resize(n2);
	mr.resize(n1);
	for(int i=0;i<n1;++i)
		mr[i]=-1;
	for(int j=0;j<n2;++j)
		mc[j]=-1;
	int ans=0;
	vector<bool> myseen(n2,0);
	for(int i=0;i<n1;++i)
	{
		::seen=myseen;
		if(bpm(i))ans++;
	}
	return ans;
}

bool cando(int mt)
{
graph.clear();
graph.resize(n1);
for(int i=0;i<n;++i)graph[i].resize(n2);
for(int i=0;i<n1;++i)
for(int j=0;j<n2;++j)
if(j%2==1)
{
if(mat[i][j/2]+c<=mt)graph[i][j]=1;
else graph[i][j]=0;
}
else
{
if(mat[i][j/2]<=mt)graph[i][j]=1;
else graph[i][j]=0;
}
if(match()>=k)return 1;
return 0;
}

int doit()
{
int ans=0;
cin>>n>>m>>k>>c;
mat.resize(n);
n1=n;
n2=2*m;
for(int i=0;i<n;++i)mat[i].resize(m);
for(int i=0;i<n;++i)
for(int j=0;j<m;++j)
cin>>mat[i][j];
int l=1,h=20000000;
while(l<=h)
{
int m=(l+h)/2;
if(cando(m))
{
h=m-1;
}
else
l=m+1;
}
if(cando(h))ans=h;
else ans=l;
return ans;
}
int main()
{
int t;
cin>>t;
while(t--)
{
cout<<doit()<<endl;
}
return 0;
}