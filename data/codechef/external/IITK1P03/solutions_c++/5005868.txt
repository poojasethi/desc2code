#include <bits/stdc++.h>
using namespace std;
#define N 100000
typedef long long int ll;
typedef pair<ll,ll> pll;
vector <int> vec[N + 10];
int mark[N + 10];

ll mn;

ll powerh[N + 10],cost[N + 10];
ll pop[N + 10];
int pind[50];

pll pr[50],subs[2][N*10 + 10];
void sub_gen(int,int,int);
int b_search(int l,int h,ll tar)
{
    int id = -1;
    while(l <= h)
    {
        int mid = (l + h)/2;
        if(subs[1][mid].first > tar)
        {
            id = mid;
            h = mid - 1;
        }
        else
        {
            l = mid + 1;
        }
    }
    return id;
}
ll dfs(int u)
{
    mark[u] = 1;
    ll ans = pop[u];
    mn = min(mn,cost[u]);
    int sz = vec[u].size();
    for(int j = 0 ; j<sz ; j++)
    {
        int v = vec[u][j];
        if(mark[v] == 0)
        {
            ans = ans + dfs(v);
        }
    }
    mark[u] = 2;
    return ans;
}
int main()
{
    int n,e,k,i;
    scanf("%d %d %d",&n,&e,&k);
    for(i = 1 ; i<=e ; i++)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        vec[u].push_back(v);
        vec[v].push_back(u);
    }
    ll INF = pow(10,15);
    for(i = 1 ; i<=n ; i++)
    {
        scanf("%lld",&pop[i]);
        cost[i] = INF;
        mark[i] = 0;
        powerh[i] = -1;
    }
    for(i = 1 ; i<=k ; i++) scanf("%d",&pind[i]);
    for(i = 1 ; i<=k ; i++) scanf("%lld",&cost[pind[i]]);

    int x;
    ll m;
    scanf("%d %lld",&x,&m);
    for(i = 1 ; i<=x ; i++)
    {
        int u;
        scanf("%d",&u);
        m = m + cost[pind[u]];
    }
    int cnt = 0;
    for(i = 1 ; i<=n ; i++)
    {
        if(mark[i] == 0)
        {
            mn = INF;
            ll po = dfs(i);
            if(mn != INF)
            {
                cnt++;
                pr[cnt] = pll(mn,po);
                //cout<<pr[cnt].first<<" "<<pr[cnt].second<<endl;

            }
        }
    }
    int tot = cnt;
    int mid = tot/2;
    int p20 = pow(2,mid);
    int p21 = pow(2,tot - mid);
    sub_gen(0,1,mid);
    sub_gen(1,mid+1,tot);
    sort(subs[0],subs[0] + p20);
    sort(subs[1],subs[1] + p21);
    //for(i = 0 ; i<p20 ; i++) cout<<subs[0][i].first<<" "<<subs[0][i].second<<endl;
    //for(i = 0 ; i<p21 ; i++) cout<<subs[1][i].first<<" "<<subs[1][i].second<<endl;
    //for(i = 0 ; i<p21 ; i++) cout<<subs[1][i].first<<" "<<subs[1][i].second<<endl;
    for(i = 1 ; i<p21 ; i++) subs[1][i].second = max(subs[1][i].second,subs[1][i-1].second);
    ll ans = 0;
    for(i = 0 ; i<p20 ; i++)
    {
        ll left = m - subs[0][i].first;
        int id = b_search(0,p21-1,left);
        if(id == -1) id = p21;
        if(id != 0)
        {
            ll cand = subs[1][id-1].second + subs[0][i].second;
            ans = max(ans,cand);
        }
    }
    cout<<ans<<endl;
    return 0;

}
void sub_gen(int f,int l,int h)
{
    int p2 = pow(2,h - l + 1);
    for(int i = 0 ; i<p2 ; i++)
    {
        subs[f][i].first = 0;
        subs[f][i].second = 0;
        int temp = i;
        int cnt = l-1;
        while(temp > 0)
        {
            cnt++;
            if(temp%2)
            {
                subs[f][i].first = subs[f][i].first + pr[cnt].first;
                subs[f][i].second = subs[f][i].second + pr[cnt].second;
            }
            temp = temp/2;
        }
    }
}
