#include <bits/stdc++.h>
#define ll long long int
#define MAX 201
#define EPS 1e-9
#define MOD 1000000007
#define INF 1e9
#define pn() printf("\n")
#define vint vector <int>
#define vpint vector <pair<int,int> >
#define pb push_back
#define mp make_pair
#define ft first
#define sd second
#define gc() getchar_unlocked()
#define ms(x,v) memset(x,v,sizeof x)
#define pr_arr(i,x,size) for(i=0;i<size;i++) cout<<x[i]<<" "
#define ff(i,a,b) for(i=a;i<=b;i++)
#define fb(i,a,b) for(i=a;i>=b;i--)
#define gprint(i) cout<<"Case #"<<i<<": "
using namespace std;

template<class T>
void scanint(T &x)
{
    register T c = gc();
    x = 0;
    T neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

template<class T>
T modulus(T x,int m=MOD)
{
    return (((x%m)+m)%m);
}

inline bool lt(double a, double b)
{
    return a + EPS < b;
}
inline bool gt(double a, double b)
{
    return a > b + EPS;
}
inline bool eq(double a, double b)
{
    return fabs(a - b) < EPS;
}

ll power(ll base,ll p)
{
    if(p==0)
        return 1;
    ll temp=1;
    while(p>1)
    {
        if(p%2!=0)
            temp=(1LL*(base*temp)%MOD);
        base=(1LL*(base*base)%MOD);
        p/=2;
    }
    ll ans=(1LL*(base*temp)%MOD);
    return ans;
}

char arr[MAX][MAX];
int visited[MAX][MAX];
int t,n,m;

void bfs(int a,int b)
{
		queue <pair<int,int> > q;
		q.push(mp(a,b));
		int i,j;
		visited[a][b]=1;
		while(!q.empty())
		{
			pair<int,int> u=q.front();
			q.pop();
			ff(i,-1,1)
			{
				ff(j,-1,1)
				{
					if(i+u.ft>=0 && i+u.ft<n && j+u.sd>=0 && j+u.sd<m && visited[u.ft+i][u.sd+j]==0)
					{
						visited[i+u.ft][u.sd+j]=1;
						if(arr[u.ft+i][u.sd+j]=='#')
						{
							q.push(mp(u.ft+i,u.sd+j));
						}
					}
				}
			}
		}
}


int main()
{
    ios::sync_with_stdio(false);
    int i,j;
    scanf("%d",&t);
    while(t--)
    {
    	//ms(arr,0);
    	ms(visited,0);
    	scanf("%d %d",&n,&m);
    	int ans=0;
    	ff(i,0,n-1)
    	{
    		// ff(j,0,m-1)
    		// {
    		// 	char temp;
    			scanf("%s",&arr[i]);
    		//	arr[i][j]=(temp=='#'?1:0);
    		// }
    	}
    	ff(i,1,n-2)
    	{
    		ff(j,1,m-2)
    		{
    			if(visited[i][j]==0 && arr[i][j]=='#')
    			{
    				bfs(i,j);
    				ans++;
    			}
    		}
    	}
    	printf("%d\n",ans);
    }
    return 0;
}