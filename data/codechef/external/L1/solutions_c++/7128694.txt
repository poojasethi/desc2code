#include <stdio.h>
#include <string.h>
 
#include <stdlib.h>
#include <time.h>
 
#define MAX 1000
#define TSIZE 8192
#define TSIZEF 32768
 
typedef unsigned int u32;
typedef long long keytype;
 
struct coord_t {
	short y, x;
};
 
struct hashentry {
	short id;
	short min1, min2;
	char  blocked1, blocked2;
	keytype key;
};
 
struct hashentryf {
	int id;
//	int padding;
	keytype key;
};
 
int M, N;
int id;
hashentry *e, *te;
hashentryf *fte;
 
coord_t objects[2*MAX];
hashentry lines[TSIZE];
hashentryf flaggedss[TSIZEF];
 
bool containskey(keytype k) {
	u32 h = (u32)k;
	h = (h^h>>9)&(TSIZE-1);
 
	e = &lines[h];
	while(e->id == id) {
		if(e->key==k) return true;
		if(++e==te) e=lines;
	}
	return false;
}
 
bool flagged(int id, keytype k) {
	u32 h = id * 110002499;
	h = (h^(u32)k>>9)&(TSIZEF-1);
 
	hashentryf *fe = &flaggedss[h];
//	int c=0;
	while(fe->id) {
//		if(c++ > 10) printf("c>10\n");
		if(fe->id==id && fe->key==k) return true;
		if(++fe==fte) fe=flaggedss;
	}
 
	fe->id = id;
	fe->key = k;
	return false;
}
 
int compute() {
	double fm;
	int rslt=0;
	for(int i=0; i<N; i++) {
		id = i+1;
 
		coord_t *c = objects+i;
 
		int y=c->y;
		int x=c->x;
 
		for(int j=N-i; --j; ) {
			c++;
			int dy = c->y - y;
			int dx = c->x - x;
			if(dx) fm = (double)dy / (double)dx; 
			else fm = 20001.;
			long long l = (long long)(fm*1000000000.0);
 
			if(containskey(l)) {
				if(dx==0) {
					if(dy>0) { if(dy<e->min1) e->min1=dy; }
					else if(dy>e->min2) e->min2=dy;
				}
				else {
					if(dx<0) { if(dx>e->min1) e->min1=dx; }
					else if(dx<e->min2) e->min2=dx;
				}
			}
			else {
				rslt++;
				e->id = id;
				if(dx==0) {
					if(dy>0) { e->min1 = dy; e->min2 = -20001; }
					else	 { e->min2 = dy; e->min1 = 20001; }
				}
				else {
					if(dx<0) { e->min1 = dx; e->min2 = 20001; }
					else     { e->min2 = dx; e->min1 = -20001; }
				}
				e->blocked1 = e->blocked2 = 0;
				e->key = l;
			}
		}
		
		for(int j=1; j<=M; j++) {
			c++;
			int dy = c->y - y;
			int dx = c->x - x;
			if(dx) fm = (double)dy / (double)dx; 
			else fm = 20001.;
			long long l = (long long)(fm*1000000000.0);
			
			if(containskey(l)) {
				if(dx==0) {
					if(dy>0) {
						if(e->min1<20001 && dy<e->min1) {
							if(!flagged(j, l) && !e->blocked1) {
								rslt--;
								e->blocked1 = 1;
							}
						}
					}
					else if(e->min2>-20001 && dy>e->min2) {
						if(!flagged(j, l) && !e->blocked2) {
							rslt--;
							e->blocked2 = 1;
						}
					}
				}
				else {
					if(dx<0) {
						if(e->min1>-20001 && dx>e->min1) {
							if(!flagged(j, l) && !e->blocked1) {
								rslt--;
								e->blocked1 = 1;
							}
						}
					}
					else if(e->min2<20001 && dx<e->min2) {
						if(!flagged(j, l) && !e->blocked2) {
							rslt--;
							e->blocked2 = 1;
						}
					}
				}
			}
		}
	}
 
	return rslt;
}
 
int main() {
	int tests;
 
	te = &lines[0] + TSIZE;
	fte = &flaggedss[0] + TSIZEF;
 
#ifdef TEST
	clock_t start = clock();
	tests = 15;
	M=1000;
	N=1000;
	srand(5);
#else
	scanf("%d", &tests);
#endif
	while(tests--) {
		memset(lines, 0, TSIZE*sizeof(hashentry));
		memset(flaggedss, 0, TSIZEF*sizeof(hashentryf));
 
#ifndef TEST
		scanf("%d %d", &N, &M);
#endif
		int y, x;
		for(int i=0; i<N+M; i++) {
#ifndef TEST
			scanf("%d %d", &y, &x);
#else
gen:		y = rand()%200;
			x = rand()%200;
			for(int j=0; j<i; j++)
				if(objects[j].y==y && objects[j].x==x) goto gen;
#endif
			objects[i].y = y;
			objects[i].x = x;
		}
 
		printf("%d\n", compute());
	}
#ifdef TEST
	clock_t end = clock();
	printf("\n%.3f\n", (double)(end - start) / CLOCKS_PER_SEC);
#endif
} 
