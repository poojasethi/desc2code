#include<stdio.h>
#include<vector>
using namespace std;
class UnionFind
{
private:
	vector<long long > p;
	vector<long long > rank;
public:
	UnionFind(long long n)
	{
		rank.assign(n,0);
		p.assign(n,0);
		for(long long i=0;i<n;i++)
			p[i]=i;
	}
	long long findSet(long long i)
	{
		return (p[i]==i)?i:p[i]=findSet(p[i]); //path compression	
	}
	long long isSameSet(long long a,long long b)
	{
		return findSet(a)==findSet(b);
	}
	long long unionSet(long long i,long long j)
	{
		long long x=findSet(i);
		long long y=findSet(j);
		if(rank[x]>rank[y])
			p[y]=x;
		else
		{
			p[x]=y;
			if(rank[x]==rank[y])
				rank[y]++;  //rank based heuristics
		}
	}
};
#include <stdio.h>
using namespace std;

int main() {
	long long t;
	long long a;
	long long b;
	long long q;
	long long n;
	long long c;
	scanf("%lld",&t);
	while(t--)
	{
		scanf("%lld%lld",&n,&c);
		UnionFind uf(n);
		for(int i=0;i<c;i++)
		{
			scanf("%lld%lld",&a,&b);
			uf.unionSet(a-1,b-1);
		}
		scanf("%lld",&q);
		while(q--)
		{
			scanf("%lld%lld",&a,&b);
			if(uf.isSameSet(a-1,b-1))
				printf("Yes\n");
			else
				printf("No\n");
		}
	}
}