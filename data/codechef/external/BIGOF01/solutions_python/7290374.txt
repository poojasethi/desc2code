/* http://www.geeksforgeeks.org/UNION-find-algorithm-set-2-UNION-by-rank/ */

// template : rjohari23

#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<stdlib.h>
#include<algorithm>
#include<vector>
#define getcx getchar_unlocked
#define pc(x) putchar_unlocked(x);
#ifndef ONLINE_JUDGE
    #define getcx getchar
#endif
using namespace std;
#define clear(a) memset((a),0,sizeof(a))
#define pb push_back
#define SIZE(v) v.size()
#define ull unsigned long long int
#define lli long long int
#define li long int
#define ii int
#define mod 1000000007

inline int inp()
{
   int n=0;
   int ch=getcx();int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   return n*sign;
}

inline long long in()
{
   long long n=0;
   long long ch=getcx();long long sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   return n*sign;
}

inline void write (lli n)
{
    lli N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0');return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
}

/* http://discuss.codechef.com/questions/20106/fast-string-input */
/* fast string input using getchar_unlocked */
inline string ip()
{
    string s = "";
    int temp=getchar_unlocked();
    while ( temp<'a'||temp>'z' )
        temp = getchar_unlocked();
    while ( temp>='a'&&temp<='z' )
    {
        s += (char)temp;
        temp = getchar_unlocked();
    }
    return s;
}

inline int find ( int parent[], int a )
{
	int n = a;
	int k;
	while ( parent[a]!=a ) 
		a = parent[a];
	while ( parent[n]!=n )
	{
		k = parent[n];
		parent[n] = a;
		n = k;
	}
	return a;
}

inline int UNION ( int parent[], int a, int b )
{
	a = find(parent,a);
	b = find(parent,b);
	if ( a==b ) 
		return 0;
	parent[a] = b;
	return 1;
}

int main()
{
	int t,i,n,c,a,b,Q,s,d;
	
	t = inp();
	
	while ( t-- )
	{	
		n = inp();	c = inp();
		int parent[n];
		
		for ( i=0;i<n;i++ )
			parent[i] = i;
		
		while ( c-- )
		{
			a = inp();	b = inp();
			UNION(parent,a-1,b-1);
		}
		
		Q = inp();
		while ( Q-- )
		{
			s = inp();	d = inp();
			if ( find(parent,s-1)==find(parent,d-1) )
				printf("Yes\n");
			else
				printf("No\n");
		}
	}
	
	return 0;
}