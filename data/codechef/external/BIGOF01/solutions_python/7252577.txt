
#include <stdio.h>
#include <stdlib.h>
 


struct subset
{
    int parent;
    int rank;
};
 


int find(struct subset subsets[], int i)
{
   
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
 
    //printf("\ni find fun \n",subsets[i].parent);
	return  subsets[i].parent;
}

void Union(struct subset subsets[], int x, int y)
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
 
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
 
    else
    {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}
 

void solve(struct subset subsets[],int arr1[],int arr2[],int c,int n)
{
	
    for (int v = 1; v <=n; ++v)
    {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    for(int i=1;i<=c;i++)
    {
    int x=find(subsets, arr1[i]);
	int y=find(subsets, arr2[i]);
	if(x!=y)
	{
	 Union(subsets, x, y);
	}
    	
    	
    }
    
 
	
	
	
	
	
}
int arr1[1000001];
int arr2[1000001];
int main()
{
	int t,n,c,q,i,x,y;

	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&n,&c);
		
		 struct subset *subsets =(struct subset*) malloc( (n+1)* sizeof(struct subset) );
 
		
		for(i=1;i<=c;i++)
		{
		scanf("%d%d",&arr1[i],&arr2[i]);
			
		}
	
	solve(subsets,arr1,arr2,c,n);
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d%d",&x,&y);
		int a=find(subsets, x);
		int b=find(subsets, y);
		// printf("value 0f a,b %d  %d\n",a,b);
		if(a==b)
		printf("Yes\n");
		else
		printf("No\n");
		
		
		
	}
	
	
	
	}
 
    return 0;
}