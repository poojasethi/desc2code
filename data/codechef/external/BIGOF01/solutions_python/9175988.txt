#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll *id, cnt, *sz;
map<ll,ll> mp;  //use this map to map indexes with data.
void init(ll N)
{
    cnt = N;
	id = new ll[N+1];
	sz = new ll[N+1];
    for(ll i=1; i<=N; i++)
    {
        id[i] = i;
	    sz[i] = 1;
	}
}
ll find(ll p)
{
    if(id[p]==p)
        return p;
    else
    {
        id[p]=find(id[p]);
        return id[p];
    }
}
// Replace sets containing x and y with their union.
void merge(ll x, ll y)
{
    ll i = find(x);
    ll j = find(y);
    if (i == j) return;
    // make smaller root point to larger one
    if(sz[i]<sz[j])
    {
        id[i]=j;
        sz[j]+=sz[i];
    }
    else
    {
        id[j]=i;
        sz[i]+=sz[j];
    }
    cnt--;
}
// Are objects x and y in the same set?
bool connected(ll x, ll y)
{
    return find(x) == find(y);
}
// Return the number of disjoint sets.
ll count()
{
    return cnt;
}
void destroy()
{
    delete []id;
	delete []sz;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    ll t,n,c,x,y,q;
    cin>>t;
    while(t--)
    {
        cin>>n>>c;
        init(n);
        while(c--)
        {
            cin>>x>>y;
            merge(x,y);
        }
        cin>>q;
        while(q--)
        {
            cin>>x>>y;
            if(find(x)==find(y))
            {
                cout<<"Yes\n";
            }
            else
            {
                cout<<"No\n";
            }
        }
        destroy();
    }
    return 0;
}


