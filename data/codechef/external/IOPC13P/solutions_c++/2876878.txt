#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <utility>
#include <vector>
#include <map>
#include <sstream>

#define maxn 100000
using namespace std;

typedef long long LL;

int n , m;

int parent[maxn + 5];
int rank[maxn + 5];

typedef struct edge 
{
	int x , y , cost;
} edge;

edge createEdge (int x , int y , int c)
{
	edge E;
	E.x = x;
	E.y = y;
	E.cost = c;
	
	return E;
}

vector<edge > E;

bool cmp (edge a , edge b)
{
	return a.cost < b.cost;
}

void createSet (int n)
{
	for (int i = 0; i < n; i++)
	{
		parent[i] = i;
		rank[i] = 0;
	}
}

int findSet (int x)
{
	if (x != parent[x]) return parent[x] = findSet(parent[x]);
	return parent[x];
}

void mergeSet (int x, int y)
{
	int px = findSet(x);
	int py = findSet(y);
	
 	if (rank[px] > rank[py]) parent[py] = px;
 	else parent[px] = py;
 	
 	if (rank[px] == rank[py]) rank[py] = rank[py] + 1;
}

int visited[100005];

vector<vector<int> > adjlist (100005);

void dfs (int from)
{
	visited[from] = true;
	
	for (int i = 0; i < adjlist[from].size(); i++)
	{
		int to = adjlist[from][i];
		
		if (!visited[to])
			dfs (to);
	}
}

int main()
{
	scanf ("%d %d" , &n , &m);
	
	for (int i = 0; i < m; i++)
	{
		int x , y , c;
		scanf ("%d %d %d" , &x , &y , &c);
		//adjlist[x].push_back(y);
		//adjlist[y].push_back(x);
		edge e  = createEdge(x , y , c);
		
		E.push_back(e);
	}
	
	/*
	int connected = 0;
	
	for (int i = 0; i < n; i++)
	{
		if (!visited[i])
		{
			dfs (i);
			connected++;
		}
	}
	
	int ok = true;

	if (connected > 1)
		ok = false;
	*/
	int ok = true;
	sort (E.begin() , E.end() , cmp);
	
	int right = 0;

	for (int i= 0; i < m;)
	{
		int cost = E[i].cost;
		for (int j = right; j < m; j++)
		{
			if (E[j].cost == cost)
			{
				right ++;
			}
			else 
			{
				right = j;
				break;
			}
		}
		
				
		int cnt = 0;
		int total  =0;
		map<int ,int> mp;
		for (int j = i; j < right; j++)
		{
			total ++;
			int x = E[j].x , y = E[j].y;
			if (mp.find(x) == mp.end()) mp[x] = cnt ++;
			if (mp.find(y) == mp.end()) mp[y] = cnt ++;
			//if (findSet(x) == findSet(y)) cnt ++;
		}
		
		createSet(cnt);
		
		for (int j = i; j < right; j++)
		{
			int x = E[j].x , y = E[j].y;
			int fir = mp[x];
			int sec = mp[y];
			
			if (findSet(fir) == findSet(sec))
			{
				ok = false;
				break;
			}
			else 
			{
				mergeSet(fir , sec);
			}
			//if (findSet(x) == findSet(y)) cnt ++;
		}		
		
		if (!ok) break;
		
		i = right;
	}

	if (ok) printf("YES\n");
	else printf("NO\n");

	return 0;
}