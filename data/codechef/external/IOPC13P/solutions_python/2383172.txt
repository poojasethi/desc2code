#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;
#define FOR(i, a, b) for(int i=a; i<b; ++i)
#define F first
#define S second
#define PII pair<int, int>
const int N = 100007;
int n, m; pair<PII, int> a[2*N];
int par[N], rank[N]; bool yes[N], skip;
int v1, v2, j, val, x, y, z;
inline int findpar(int v)
{
   if(par[v] != v) par[v] = findpar(par[v]);
   return par[v];
}
inline void merge(int a, int b)
{
   if(rank[a] > rank[b])
      par[b] = a;
   else
   {
      par[a] = b;
      if(rank[a] == rank[b]) ++rank[b];
   }
}
bool cmp(pair<PII, int > u, pair<PII, int> v)
{
   return u.S < v.S;
}
int main()
{
   scanf("%d%d", &n, &m);
   FOR(i, 0, m)
   {
      scanf("%d%d%d", &x, &y, &z);
      a[i].F.F = x; a[i].F.S = y; a[i].S = z;
   }
   sort(a, a+m, cmp);
   FOR(i, 0, n) par[i] = i;
   FOR(i, 0, m)
   {
      if(!skip)
      {
	 val = a[i].S; j = i;
	 while(j<m and a[j].S == val)
	 {
	    if(findpar ( a[j].F.F ) == findpar ( a[j].F.S ) )
	       yes[j] = true;
	    ++j;
	 }
	 skip = true; --i;
      }
      else
      {
	 val = a[i].S;
	 while(i<m and a[i].S == val)
	 {
	    if(!yes[i])
	    {
	       v1 = findpar (a[i].F.F);
	       v2 = findpar (a[i].F.S);
	       if(v1 == v2)
	       {
		  printf("NO\n");
		  return 0;
	       }
	       else
		  merge(v1, v2);
	    }
	    ++i;
	 }
	 skip = false; --i;
      }
   }
   printf("YES\n");
   return 0;
} 