#include <algorithm>
#include <iostream>
#include <cstdio>
#include <vector>
#include <utility>
using namespace std;

#define		S(x)				scanf("%d",&x)
#define		INC(i,a,b)			for(int i=a;i<b;++i)
#define		REP(i,n)			INC(i,0,n)
#define		FF				first
#define		SS				second
#define		mp				make_pair
#define		tri(a,b,c)			mp(a,mp(b,c))
#define		XX				FF
#define		YY				SS.FF
#define		ZZ				SS.SS

typedef pair<int,int> PII;
typedef pair<int,PII> TRI;
typedef vector<int> VI;
typedef vector<PII> VII;

const int MAX_N = 1e5, MAX_M = 2e5;
bool ans = true;
int n, m;
TRI E[MAX_M];
int S[MAX_N], R[MAX_N];
int F[MAX_M];

int findSet(int);
void link(int,int);

int main() {
  S(n); S(m);
  REP(i,n) {
    S[i] = i;
    R[i] = 0;
  }
  REP(i,m) {
    S(E[i].YY); S(E[i].ZZ); S(E[i].XX);
  }
  sort(E,E+m);
  
  int l, c=0, r=1;
  
  REP(i,m) {
    int d = E[i].ZZ;
    if(d>c) {
      if(r==1) {
	c = d;
	l = i;
	r = 0;
      }
      else {
	i = l-1;
	r = 1;
	continue;
      }
    }
    
    int a = E[i].YY, b = E[i].ZZ;
    if(r==1) {
      if(findSet(a)!=findSet(b)) link(S[a],S[b]);
      else if(F[i]==1) {
	ans = false;
	break;
      }
    }
    else {
      if(findSet(a)==findSet(b)) F[i] = 0;
      else F[i] = 1;
    }
  }
  
  if(ans) cout << "YES";
  else cout << "NO";
  
  return 0;
}

int findSet(int v) {
  if(v!=S[v]) S[v] = findSet(S[v]);
  return S[v];
}
void link(int a, int b) {
  if(R[a]<R[b]) S[a] = b;
  else {
    S[b] = a;
    if(R[a]==R[b]) R[a]++;
  }
}