#include <algorithm>

#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>

#include <iostream>
#include <iterator>

#include <map>

#include <numeric>

#include <queue>

#include <set>
#include <sstream>
#include <string>

#include <vector>

using namespace std;

#define ALL(c) (c).begin(), (c).end()

#define CLEAR(x) memset(x,0,sizeof x);
#define CLEARA(x) memset(&x,0,sizeof x);

#define FILL(x,v) memset(x,v,sizeof x);
#define FILLA(x,v) memset(&x,v,sizeof x);
#define FOR(i,a,b) for (int _b=(b), i=(a); i <= _b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--) 
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
 
#define REP(i,n) for (int i=0,_n=(n); i < _n; i++)
#define REPD(i,n) for (int i=(n)-1; i >= 0; i--)
#define REVERSE(c) reverse(ALL(c))

#define SORT(c) sort(ALL(c))
 
#define VAR(a,b) __typeof(b) a=(b)
 
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())

#define INF 0x7fffffff
#define pb push_back
#define X first
#define Y second
#define SZ(c) (int)(c).size()
#define MP make_pair

#define MAX_BIT 20

typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;

struct trie
{
	int set;
	struct trie *one, *zero; 
};

int main()
{
	struct trie *temp,*node;
	int n,q,a,b,max_xor,pow2;
	temp = new trie;
	temp->set = 0;
	temp->zero = NULL;
	temp->one = NULL;
	scanf("%d",&n);
	REP(i,n)
	{
		scanf("%d",&a);
		pow2 = 1<<MAX_BIT;
		node = temp;
		while(pow2!=1)
		{
			pow2 = pow2>>1;
			if(pow2 & a)
			{
				if(node->one==NULL)
				{
					node->one = new trie;
					node = node->one;
					node->set = 1;
					node->zero = NULL;
					node->one = NULL;
				}
				else
				{
					node = node->one;
				}
			}
			else
			{
				if(node->zero==NULL)
				{
					node->zero = new trie;
					node = node->zero;
					node->set = 0;
					node->zero = NULL;
					node->one = NULL;
				}
				else
				{
					node = node->zero;
				}
			}
		}
	}		
	scanf("%d",&q);	
	REP(i,q)
	{
		scanf("%d",&b);
		pow2 = 1<<MAX_BIT;
		max_xor = 0;
		node = temp;
		while(pow2!=1)			
		{
			pow2 = pow2>>1;
			if(pow2 & b)
			{
				if(node->zero!=NULL)
				{
					max_xor+=pow2;
					node = node->zero;					
				}
				else
				{
					node = node->one;
				}
			}
			else
			{
				if(node->one!=NULL)
				{
					max_xor+=pow2;
					node = node->one;					
				}
				else
				{
					node = node->zero;
				}			
			}
		}
		printf("%d\n",max_xor);
	}
	return 0;
}
