#include <cstdio>
#include <cmath>
#include <string>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <iterator>
#include <iterator>
#include <set>

#define maxn 100000
#define M 20

using namespace std;

struct pnode{
    int info;
    pnode *newn[1];
};

int n;
int q;

void process() {
    int a, b, pow2;
    int m_xor;
    pnode *nnode;
    pnode *t;
    nnode = new pnode;
    nnode -> info = 0;
    nnode -> newn[0] = NULL;
    nnode -> newn[1] = NULL;
    scanf("%d", &n);

    for (int i = 1; i <= n; i++) {
        scanf ("%d", &a);
        pow2 = 1 << M;
        t = nnode;
        while (pow2 != 1) {
            pow2 = pow2 >> 1;
            if (pow2 & a) {
                if (t -> newn[1] == NULL) {
                    t -> newn[1] = new pnode;
                    t = t -> newn[1];
                    t -> info = 1;
                    t -> newn[1] = NULL;
                    t -> newn[0] = NULL;
                } else {
                    t = t -> newn[1];
                }
            } else {
                if (t -> newn[0] == NULL) {
                    t -> newn[0] = new pnode;
                    t = t -> newn[0];
                    t -> info = 0;
                    t -> newn[1] = NULL;
                    t -> newn[0] = NULL;
                } else {
                    t = t -> newn[0];
                }
            }
        }

    }

    scanf("%d", &q);
    for (int i = 1; i <= q; i++) {
        scanf ("%d", &b);
        t = nnode;
        pow2 = 1 << M;
        m_xor = 0;
        while (pow2 != 1) {
            pow2 = pow2 >> 1;
            if (pow2 & b) {
                if(t -> newn[0] != NULL) {
					m_xor += pow2;
					t = t -> newn[0];
				}
				else {
					t = t -> newn[1];
				}
            } else {
                if(t -> newn[1] != NULL) {
                    m_xor += pow2;
					t = t -> newn[1];
				}
				else {
					t = t -> newn[0];
				}
            }
        }
        printf("%d\n", m_xor);
    }
}

int main() {
    process();
    return 0;
}
