#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).end()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,b) REPN(x, 0, b)

#define dbg(x) cout << #x << " = " << x << endl;
#define dbg2(x, y) cout << #x << " = " << x << "  " << #y << " = " << y << endl;
#define dbg3(x, y, z) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << endl;
#define dbg4(x, y, z, w) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << "  " << #w << " = " << w <<  endl;

#define MAX 2000005

int next[MAX][2];
int arreglo[20];
int node;

void init(int n) {
	CLR(arreglo, 0);
	int t = 0;
	while (n) {
		arreglo[t++] = n % 2;
		n /= 2;
	}
}

void process() {	
	int tot = 19;	
	int head = 0;
	while (tot >= 0) {
		int chr = arreglo[tot];
		if (next[head][chr] == -1) next[head][chr] = node++;
		head = next[head][chr];
		tot--;
	}
	
}

int eval() {
	int tot = 19;
	int head = 0;
	int res = 0;
	while (tot >= 0) {
		int chr = arreglo[tot];
		if (next[head][1-chr] != -1) {
			res = res * 2 + 1;
			head = next[head][1-chr];
		}
		else {
			res *= 2;
			head = next[head][chr];
		}
		tot--;
	}
	return res;
}

int main() {
	CLR(next, -1);
	int n, m;
	node = 1;
	scanf("%d", &n);
	REP(i, n) {
		int nro;
		scanf("%d", &nro);
		init(nro);
		process();
	}
	
	scanf("%d", &m);
	
	REP(i, m) {
		int x;
		scanf("%d", &x);
		init(x);
		printf("%d\n", eval());
	}
	
	return 0;
}