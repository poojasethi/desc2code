#include<bits/stdc++.h>
using namespace std;
struct node {
    int child[2];
    node() {
        memset(child,-1,sizeof child);
        }
    int& operator [] (int y) {
        return child[y];
        }
    };
vector<node> trie;
void Push(int x) {
    int p=0;
    for(int i=22; i>=0; i--) {
        int t;
        if(x&(1<<i)) t=1;
        else t=0;
        if(trie[p][t]==-1) {
            node nw;
            trie.push_back(nw);
            trie[p][t]=trie.size()-1;
            }
        p=trie[p][t];
        }
    }
int find(int x) {
    int p=0;
    int k=0;
    for(int i=22; i>=0; i--) {
        int t;

        if(x&(1<<i)) t=0;
        else t=1;
        if(trie[p][t]!=-1) {
            k+=(1<<i);
            }
        else {
            t=!t;
            }
        p=trie[p][t];
        //cout<<t<<" "<<p<<" "<<k<<endl;
        }
     return k;
    //return (x^k);
    }
main() {
    ios_base::sync_with_stdio(false);
    node root;
    trie.push_back(root);
    int n,x;
    cin>>n;
    for(int i=0; i<n; i++) {
        cin>>x;
        Push(x);
        }
    int m;
    cin>>m;
    for(int i=0; i<m; i++) {
        cin>>x;
        cout<<find(x)<<endl;
        }
    }
