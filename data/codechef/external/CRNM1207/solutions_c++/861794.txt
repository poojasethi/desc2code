//      @author anks

#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) ((S&two(X))>0)
#define containL(S,X) ((S&twoL(X))>0)
#define debug(args...) dbg(),args
typedef pair<int,int> ipair;
int countbit(int n) {return (n==0)?0:(1+countbit(n&(n-1)));}
int totbit(int n) {return (n>0)?(1+totbit(n>>1)):0;}
int lowbit(int n) {return (n^(n-1))&n;}
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> T sqr(T x) {return x*x;}
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N)
#define SS(N) scanf("%s", N)
#define SIZE(X) ((int)((X).size()))
#define LEN(X) ((int)((X).length()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;++A)
#define EFOR(A,B,C) for(int A=B;A<=C;++A)
#define RFOR(A,B,C) for(int A=B;A>=C;--A)
#define FORL(A,B,C) for(ll A=B;A<C;++A)
#define EFORL(A,B,C) for(ll A=B;A<=C;++A)
#define RFORL(A,B,C) for(ll A=B;A>=C;--A)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX(A,B) (A > B) ? A : B
#define MIN(A,B) (A < B) ? A : B
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define PRN(A, N) if (DBG) { FOR(j, 0, N) cout << A[j] << " " ; cout << endl;}
#define PR2N(A, M, N) FOR(i, 0, M) { PRN(A[i], N) }
#define PR(A) PRN(A, sizeof(A)/sizeof(A[0]))
#define PR2(A) FOR(i, 0, sizeof(A)/sizeof(A[0])) { PR(A[i]) }
#define MAXLIM 100000
#define LIM 2097152
#define INF 1000000
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };
int tree[LIM], n, A[MAXLIM];
void preprocess() {
	MEM(tree, -1);
	FOR(i, 0, n) {
		int k = 19, index = 0;
		while (k >= 0) {
			if ((1 << k) & A[i])
				tree[index = 2*index + 1] = 1;
			else
				tree[index = 2*index + 2] = 0;
			k--;
		}
	}
}

int getMax(int q) {
	int k = 19, index = 0, ans = 0;
	while (k >= 0) {		
		if ((1 << k) & q)
			index = (tree[2*index + 2] == -1) ? 2*index + 1 : 2*index + 2;
		else
			index = (tree[2*index + 1] == -1) ? 2*index + 2 : 2*index + 1;
		ans = ans + (1 << k) * tree[index];		
		k--;
	}
	debug(ans);	
	return ans^q;
}

int main (int argc, char *argv[]) {
	DBGCHECK;
	
	S(n);	
	FOR(i, 0, n)
		S(A[i]);
	
	preprocess();
	
	int q;
	S(q);
	while (q-- > 0) {
		int qi;
		S(qi);		
		printf("%d\n", getMax(qi));
		debug("");
	}
	
	return 0;	
}
