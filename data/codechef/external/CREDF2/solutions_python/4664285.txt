#include<cstdio>
#include<string>
#include<list>
#include<iostream>
#include<map>
using namespace std;
char input[81];
char tempArray[17];
bool decrypt(list<string> lst[],char* ptr,map<char,char>& mp,map<char,char>& rev);
void empty(){}
int main()
{
	int test;
	list<string> lst[15];
	scanf("%d",&test);
	while(test--)
	{
		for(int i=0;i<15;i++)
			lst[i].clear();
		int wrdCnt;
		scanf("%d",&wrdCnt);
		string temp;
		cin.get();
		while(wrdCnt--)
		{
			getline(cin,temp);
			lst[temp.size()-1].push_front(temp);
		}
		scanf("%[A-Z \t]s",input);
		map<char,char>mp;
		map<char,char>rev;
		char* ptr = input;
		if(!decrypt(lst,ptr,mp,rev))
		{
			for(int i=0;input[i];i++)
			{
				if(input[i]>='A' && input[i] <='Z')
					printf("*");
				else
					printf("%c",input[i]);
			}
			printf("\n");
		}
 
	}
}
bool decrypt(list<string> lst[],char* ptr,map<char,char>& mp,map<char,char>& rev)
{
	if(*ptr){
	while(*ptr == ' ' | *ptr =='\t')
		ptr++;
	string tempStr;
	tempStr.reserve(20);
	while(*ptr != ' ' && *ptr)
		tempStr+= *(ptr++);
	for(list<string>::iterator itr = lst[tempStr.size()-1].begin();itr != lst[tempStr.size()-1].end();itr++)
	{
		map<char,char> tmpMap = mp;
		map<char,char> tmpRev = rev;
		for(int j=0;j<tempStr.size();j++)
		{			char tmp;
			if(tmp = tmpMap[tempStr[j]])
			{
				if(itr->at(j) != tmp)
					goto d;
			}
			else
			{
				if(!tmpRev[itr->at(j)]){
				tmpMap[tempStr[j]] = itr->at(j);
				tmpRev[itr->at(j)] = tempStr[j];
				}
				else
				{
					goto d;
				}
			}
		}
		if(decrypt(lst,ptr,tmpMap,tmpRev))
			return true;
		d:
		continue;
	}
	}
	else
	{
		for(int i =0;input[i];i++)
		{
			char tmp;
			if(tmp = mp[input[i]])
			{
				printf("%c",tmp);
			}
			else
				printf("%c",input[i]);
		}
		printf("\n");
		return true;
	}
	return false;
}
 