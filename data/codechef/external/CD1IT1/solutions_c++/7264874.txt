#include<iostream>
#include<cstdio>
using namespace std;
inline long int input()
{
	long int n=0,flag=0;
	char c;

	for(c=getchar_unlocked();c==' '||c=='\n'||c=='\t';c=getchar_unlocked());

	if(c=='-')
	{
		flag=1;
		c=getchar_unlocked();
	}

	for(;c>0x2f && c<0x3a;c=getchar_unlocked())
	 n=(n*10)+(c & 0x0f);

	if(flag)
	 n*=-1;

	return n;
};
void merge(int *,int, int , int );
void mergesort(int *a, int low, int high)
{
    int mid;
    if (low < high)
    {
        mid=(low+high)/2;
        mergesort(a,low,mid);
        mergesort(a,mid+1,high);
        merge(a,low,high,mid);
    }
    return;
}
void merge(int *a, int low, int high, int mid)
{
    int i, j, k, c[high];
    i = low;
    k = low;
    j = mid + 1;
    while (i <= mid && j <= high)
    {
        if (a[i] < a[j])
        {
            c[k] = a[i];
            k++;
            i++;
        }
        else
        {
            c[k] = a[j];
            k++;
            j++;
        }
    }
    while (i <= mid)
    {
        c[k] = a[i];
        k++;
        i++;
    }
    while (j <= high)
    {
        c[k] = a[j];
        k++;
        j++;
    }
    for (i = low; i < k; i++)
    {
        a[i] = c[i];
    }
}
int main()
{
    int n;
    n=input();
    //scanf("%d",&n);
    int a[n];
    for(int i=0;i<n;i++)
    {
        a[i]=input();
       // scanf("%d",&a[i]);
    }
    mergesort(a,0,n-1);
    if (n&1)
	{
		printf ("%d\n", a[(n>>1)]);
	}
	else
	{
		printf ("%d\n", a[(n>>1)-1]);
	}
    return 0;
}
