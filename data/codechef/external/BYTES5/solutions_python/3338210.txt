#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

#define GETCHAR getchar_unlocked
typedef unsigned long long uint64;

int binary_search(vector<uint64> &a, int begin, int end, uint64 element)
{
	if (begin >= end)
		if (a[begin] >= element)
			return begin - 1;
		else 
			return begin;
	int mid = (begin + end)/2; 
	if (element > a[mid])
		return binary_search(a, mid + 1, end, element);
	else 
		return binary_search(a, begin, mid - 1, element);
}
inline int readInt()
{
	int flag=1;
	int n = 0;
	char c;
	while (1)
	{
		c=GETCHAR();
		if(c>='0'&&c<='9') {n = n * 10 + c - '0';flag=0;}
		else if(flag!=1) break;
	}
	return n;
}

int main()
{
	int t;
	scanf("%d", &t);
	while (t--) {
		int n;
		scanf("%d", &n);
		vector<int> a(n);
		vector<uint64> prefix_sum(n);
		for (int i = 0; i < n; i++)
			a[i] = readInt();
		sort(a.begin(), a.end());
		for (int i = 0; i < n; i++) {
			if (i == 0)
				prefix_sum[i] = a[i];
			else 
				prefix_sum[i] = prefix_sum[i - 1] + a[i];
		}
		int q;
		scanf("%d", &q);
		while (q--) {
			uint64 sum;
			scanf("%llu", &sum);
			printf("%d ", 1 + binary_search(prefix_sum, 0, n - 1,  sum));
		}
		printf("\n");
	}
}

