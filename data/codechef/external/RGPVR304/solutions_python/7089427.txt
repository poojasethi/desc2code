import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.awt.Polygon;
import java.awt.geom.Area;

public class Main {

	public static void main(String[] args) throws IOException {
		PrintWriter writer = new PrintWriter(System.out);
		long start = System.currentTimeMillis();
		InputReader reader = new InputReader(System.in);
		int T = reader.readInt();
		while (T-- > 0) {

			int N = reader.readInt(); // # Of polygons

			int[] xarray = new int[N];
			int[] yarray = new int[N];

			for (int i = 0; i < N; i++) {

				xarray[i] = reader.readInt();

			}
			for (int i = 0; i < N; i++) {

				yarray[i] = reader.readInt();

			}

			//Polygon p = new Polygon(xarray, yarray, N);

			double ans = Math.abs(areaOfPolygons(xarray, yarray));
			
			writer.write(ans+"\n");
		}

		writer.flush();
		long end = System.currentTimeMillis();
			
		// System.out.println(end - start + "ms");

	}

	public static double areaOfPolygons(int[] x, int[] y) {

		double area = 0; // Accumulates area in the loop
		int j = x.length - 1; // The last vertex is the 'previous' one to the
								// first

		for (int i = 0; i < x.length; i++) {
			area = area + (x[j] + x[i]) * (y[j] - y[i]);
			j = i; // j is previous vertex to i
		}
		return area / 2.00f;
	}

	public static boolean containsPolygon(Polygon a, Polygon b) {

		boolean contains = true;
		int val = a.npoints > b.npoints ? b.npoints : a.npoints;
		for (int i = 0; i < val; i++) {

			if (!(a.contains(b.xpoints[i], b.ypoints[i]))) {
				contains = false;
				break;
			}

		}
		return contains;
	}

	static final class InputReader {
		private final InputStream stream;
		private final byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		private int read() throws IOException {
			if (curChar >= numChars) {
				curChar = 0;
				numChars = stream.read(buf);
				if (numChars <= 0) {
					return -1;
				}
			}
			return buf[curChar++];
		}

		public final int readInt() throws IOException {
			return (int) readLong();
		}

		public final long readLong() throws IOException {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
				if (c == -1)
					throw new IOException();
			}
			boolean negative = false;
			if (c == '-') {
				negative = true;
				c = read();
			}
			long res = 0;
			do {
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return negative ? -res : res;
		}

		public final String readString(int length) throws IOException {
			char[] A = new char[length];
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
				if (c == -1)
					throw new IOException();
			}
			A[0] = (char) c;
			for (int n = 1; n < length; n++) {
				A[n] = (char) read();
			}
			return new String(A);
		}

		public final int[] readIntArray(int size) throws IOException {
			int[] array = new int[size];
			for (int i = 0; i < size; i++) {
				array[i] = readInt();
			}
			return array;
		}

		public final long[] readLongArray(int size) throws IOException {
			long[] array = new long[size];
			for (int i = 0; i < size; i++) {
				array[i] = readLong();
			}
			return array;
		}

		private boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
	}
}