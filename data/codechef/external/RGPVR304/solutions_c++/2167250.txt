#include <stdio.h>
#include <cmath>
#include <algorithm>

#define INF 30000

struct point
{
	int x;
	int y;
};

int comp(const void *a,const void *b){
	point ap = *(point*)a;
	point bp = *(point*)b;

	double sa,sb;

	if(ap.x>0) sa = (double)ap.y/ap.x;
	else if(ap.x==0)sa = INF;
	else sa = 2*INF + (double)ap.y/ap.x;

	if(bp.x>0) sb = (double)bp.y/bp.x;
	else if(bp.x==0)sb = INF;
	else sb = 2*INF + (double)bp.y/bp.x;

	return sa < sb ? 1 : 0;
}

int main(){
	int T;
	scanf("%d",&T);

	while(T--){
		int N;
		scanf("%d",&N);

		point pts[N];
		for(int i=0;i<N;i++) scanf("%d",&pts[i].x);

		int miny=0;
		for(int i=0;i<N;i++){
			scanf("%d",&pts[i].y);
			if(pts[i].y<pts[miny].y) miny=i;
		}

		for(int i=0;i<N;i++){
			if(i!=miny){
				pts[i].x -= pts[miny].x;
				pts[i].y -= pts[miny].y;
			}
		}

		pts[miny].x = pts[0].x;
		pts[miny].y = pts[0].y;
		pts[0].x =0;
		pts[0].y=0;

		qsort(pts+1,N-1,sizeof(point),comp);

		double area=0,a=sqrt(pts[1].x*pts[1].x+pts[1].y*pts[1].y),b,c,s;
		for(int i=1;i<N-1;i++){
			b = sqrt((pts[i].x-pts[i+1].x)*(pts[i].x-pts[i+1].x) + (pts[i].y-pts[i+1].y)*(pts[i].y-pts[i+1].y));
			c = sqrt(pts[i+1].x*pts[i+1].x + pts[i+1].y*pts[i+1].y);
			s = (a+b+c)/2;

			area += sqrt(s*(s-a)*(s-b)*(s-c));
			a=c;
		}

		printf("%.1lf\n",area);
	}
}
