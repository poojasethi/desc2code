#include<bits/stdc++.h>
using namespace std;
#define temp 0
#define perm 1
#define INF (int(1e9))
#define INFL ((long long int)(1e18))
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define in4(p,q,r,s) scanf("%d %d %d %d",&p,&q,&r,&s);
#define unsetBit(BITT,X) (BITT&(~(1<<X)));
#define setBit(BITT,X) (BITT|(1<<X));
#define bitIsSet(BITT,X) (BITT&(1<<X))
#define bitIsNotSet(BITT,X) (!(BITT&(1<<X)))
#define getcx getchar
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define mod 1000000007
#define pii pair< int , int >
#define V 100000
int res[V+5],prime[V+5];
void pre()
{
    for(int i=2; i<=V; i++)
    {
        if(prime[i]==0)//a prime
        {
            res[i] = 1;
            for(int j=i+i; j<=V; j+=i)
            {
                res[j] = res[j/i] + 1;
                prime[j] = 1;
            }
        }
    }
    int mx = 0;
    for(int i=1; i<=V; i++)
    {
        //printf("%d %d\n",i,res[i]);
        mx = max( mx , res[i] );
    }
    //printf("%d\n",mx);
}
vector<int> v[20];
long long int dp[20][100005];
long long int A[20], B[20] , C[20];
long long int func(int pos,int idx)
{
    if(dp[pos][idx]!=-1)
    {
        //printf("bb\n");
        return dp[pos][idx];
    }
    /*int sdx = idx;
    long long int ans = 0;
    for(int i=0; i<v[pos].size(); i++)
    {
        idx++;
        long long int p = v[pos][i];
        p *= idx;
        p *= idx;

        ans += p;
    }*/
    long long int Idx = idx+1;
    long long int ans = Idx*Idx*A[pos] + Idx*B[pos] + C[pos];
    dp[pos][idx] = ans;
    return ans;
}
int lim;
int n;
long long int memo[1<<17];
long long int solve(int bitMask)
{
    if(memo[bitMask]!=-1)
    {
        //printf("aa\n");
        return memo[bitMask];
    }
    int cnt = 0;
    for(int i=0; i<=lim; i++)
    {
        if(bitMask&(1<<i))
        {
            cnt += (int)v[i].size();
        }
    }
    //printf("lim is %d and n is %d and cnt is %d\n",lim,n,cnt);
    if(cnt==n)
    {
        return 0;
    }
    long long int ans = 0;
    for(int i=0; i<=lim; i++)
    {
        if(bitMask&(1<<i))
        {
            continue;
        }
        //bit is not set , lets use it
        long long int curr = func(i,cnt);
        int newMask = bitMask|(1<<i);
        ans = max( ans , curr+solve(newMask) );
    }
    memo[bitMask] = ans;
    return ans;
}
int main()
{
    pre();
    in(n);
    int mx = 0;
    for(int i=1; i<=n; i++)
    {
        int x,y;
        in(x);
        in(y);
        int pos = res[x];
        v[pos].push_back(y);

        mx = max( mx , pos );
    }
    for(int i=0; i<=mx; i++)
    {
        sort(v[i].begin(),v[i].end());
        //printf("i is %d and size is %d\n",i,v[i].size());
    }
    for(int i=0; i<=mx; i++)
    {
        A[i] = 0;
        for(int j=0; j<v[i].size(); j++)
        {
            A[i] += v[i][j];
        }

        B[i] = 0;
        C[i] = 0;
        for(int j=1; j<v[i].size(); j++)
        {
            long long int p = 2;
            p *= j;
            p *= v[i][j];
            B[i] += p;//2*j*v[i][j];

            long long int q = j;
            q *= j;
            q *= v[i][j];

            C[i] += q;//j*j*v[i][j]

        }
    }
    /*for(int i=0; i<=mx; i++)
    {
        printf("i is %d %lld %lld %lld\n",i,A[i],B[i],C[i]);
    }*/
    lim = mx;
    memset(memo,-1,sizeof(memo));
    memset(dp,-1,sizeof(dp));
    long long int ans = solve(0);
    printf("%lld\n",ans);
}
