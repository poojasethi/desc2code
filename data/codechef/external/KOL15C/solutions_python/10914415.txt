#include <bits/stdc++.h>
using namespace std;

#define TRACE
#ifdef TRACE
#define TR(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define TR(...)
#endif

typedef long long                LL;
typedef vector < int >           VI;
typedef pair < int,int >         II;
typedef vector < II >            VII;

#define MOD                      1000000007
#define EPS                      1e-12
#define N                        100010
#define PB                       push_back
#define MP                       make_pair
#define F                        first 
#define S                        second
#define ALL(v)                   v.begin(),v.end()
#define SZ(a)                    (int)a.size()
#define FILL(a,b)                memset(a,b,sizeof(a))
#define SI(n)                    scanf("%d",&n)
#define SLL(n)                   scanf("%lld",&n)
#define PLLN(n)                  printf("%lld\n",n)
#define PIN(n)                   printf("%d\n",n)
#define REP(i,j,n)               for(LL i=j;i<n;i++)
#define PER(i,j,n)               for(LL i=n-1;i>=j;i--)
#define endl                     '\n'
#define fast_io                  ios_base::sync_with_stdio(false);cin.tie(NULL)

inline int mult(int a , int b) { LL x = a; x *= LL(b); if(x >= MOD) x %= MOD; return x; }
inline int add(int a , int b) { return a + b >= MOD ? a + b - MOD : a + b; }
LL powmod(LL a,LL b){ if(b==0)return 1; LL x=powmod(a,b/2); LL y=(x*x)%MOD; if(b%2) return (a*y)%MOD; return y%MOD; }

const int SQRT = 350;
int c[N] , d[N] , A[N];
VI upd[SQRT];
int main() {
  int n , q; SI(n); SI(q);
  while(q --) {
    int a , b; SI(a); SI(b);
    if(a >= SQRT) {
      for(int i = b ; i <= n ; i += a)
        A[i] ++;
    }
    else
      upd[a].PB(b);
  }
  REP(i,0,SQRT) {
    if(i == 0) {
      for(int j : upd[i])
        A[j] ++;
      continue;
    }
    FILL(c , 0);
    FILL(d , 0);
    for(int j : upd[i])
      c[j] ++;
    for(int j = 1 ; j <= n ; j ++) {
      d[j] = c[j];
      if(j - i > 0)
        d[j] += d[j-i];
      A[j] += d[j];
    }
  }
  REP(i,1,n+1)
    printf("%d ",A[i]);
  printf("\n");
  return 0;
}
