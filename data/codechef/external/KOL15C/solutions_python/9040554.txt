#include <bits/stdc++.h>
#define lli long long int
#define s(x) scanf("%lld", &x)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define MAXX 100005

using namespace std;

// Main things is ax + b  are distributed overs set {0,1,2,3,..,a-1}
/*
    {y : y = 5x+16 \-/ x >= 0}  is subset of {y : y = 5x+11 \-/ x >= 0} is subset of {y : y = 5x+6 \-/ x >= 0} is subset of {y : y = 5x+1 \-/ x >= 0}

    because 16%5 = 11%5 = 6%5 = 1%5 = 1

    so for particular a say, a = 5

    5x+6 contribution from 5x+6, 5x+1
    5x+11 contribution from 5x+11, 5x+6, 5x+1
    5x+16 contribution from 5x+16, 5x+11, 5x+6, 5x+1

    so to get contribution at index i from that a iterate through i
*/

lli arr[MAXX] = {0};
vector<pair<lli, lli> > vv;
vector<lli> cntr(MAXX);

int main()
{
    lli n,i,j,k,pos,sqrn,q,a,b;

    s(n);
    s(q);

    sqrn = (lli)sqrt((double)n);

    while (q--) {
        s(a);
        s(b);

        if (a >= sqrn) {
            for (i = b; i <= n; i += a)
                ++arr[i];
        } else {
            vv.pb(mp(a,b));
        }
    }

    sort(vv.begin(), vv.end());

    pos = 0;
    for (j = 1; j < sqrn; ++j) {

        for (i = 0; i < n; ++i)
            cntr[i] = 0;

        for (i = 1; i <= n; ++i) {
            while ((pos < vv.size()) && (vv[pos].fr == j) && (vv[pos].sc <= i)) {
                ++cntr[vv[pos].sc%j];
                ++pos;
            }
            arr[i] += cntr[i%j];
        }
    }

    for (i = 1; i <= n; ++i)
        printf("%lld ", arr[i]);

    printf("\n");

    return 0;
}
