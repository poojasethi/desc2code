#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <map>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <stack>
#include <list>

#define REP(i,n)      FOR(i,0,n)
#define FOR(i,a,b)    for(int i = a; i < b; i++)
#define ROF(i,a,b)    for(int i=a;i>b;i--)
using namespace std;
vector <bool> V(100000);
bool check_prime(long long int k);
void enumerate();
long long int nearprime(char * s);
long long int make_num(char*s, vector<int> r);

int main(){
  for(int i = 0; i < 100000; i++)
    V[i] = 1;
  
      
  enumerate();
  int t;
  scanf("%d",&t);

  while(t--){
    char s[13];
    scanf("%s", s);
    long long int k = nearprime(s);
    printf("%lld\n", k);
  }
  return 0;
}

void enumerate(){
  for(int i = 2; i < 100000; i++){
    if (V[i] == 0)
      continue;
    for(int j = 2; i * j < 100000; j++)
      V[i*j] = 0;
  }
}

long long int nearprime(char * s){
  long long int k = 0;
  int length = 0;
  vector <int> r;
  for(;s[length] != 0; length++)
    if(s[length] == '?'){
      //cout << length << "---" << endl;
      r.push_back(length);
      s[length] = '0';
    }

  k = make_num(s,r);  
  while(!(check_prime(k))){
  
    int g = r.size()-1;
    //    cout << g << endl;
    //if( g  < 2)
      //return k;
    int j = s[r[g]] - '0';
    //    cout << "j " << j;
    while(j == 9){
      s[r[g]] = '0';
      g--;
      j = s[r[g]] - '0';
    }
    s[r[g]]++;
    k = make_num(s,r);
    //cout << k << endl;
  }

  return k;
}
long long int make_num(char*s, vector<int> r){
  long long int k = 0;
  int i;
  for( i = 0; s[i] != 0; i++)
    k = k * 10 + s[i] - '0';
  if (r[0] == 0)
    return k + (long long)pow(10,i-1);
  return k;
}
    

bool check_prime(long long int k){
  if( k == 0 || k == 1)
    return false;
  if ((int)log10(k) < 5)
    return V[k];
  else{
    int i = 2;
    for(i = 2; i < 100000; i++)
      if(V[i] == 0)
        continue;
      else
        if(k % i == 0)
          return false;
    long long int x = sqrt(k) + 5;
    for(; i <= x; i++)
      if(k % i == 0)
        return false;
  }
  return true;
}
        
        
      
      

  
  
    
  
                                  

    
