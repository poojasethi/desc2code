#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <sys/time.h>
#include <stdio.h>
#include <string.h>

using namespace std;

typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
typedef unsigned long long ULL;
typedef unsigned char BYTE;

#define FOR(i, n) for (int i = 0; i < (n); ++i)
#define FORU(i, s, e) for (int i = (s); i <= (e); ++i)
#define FORD(i, s, e) for (int i = (s); i >= (e); --i)
#define ALL(x) (x).begin(),(x).end()
#define FOREACH(i, v) for(__typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)
#define SIZE(x) ((int)(x).size())
#define MP make_pair
#define BIT(x, b) (((x) >> (b)) & 1)
#define DEBUG(x) cerr << #x << " = " << x << " at line " << __LINE__ << endl;
#define INF 1000000000
#define MAX_TIME 5
#define TIME_LEFT_UNTIL(end) ((curTime=getTime()-startTime) < (end))
#define TIME_LEFT() TIME_LEFT_UNTIL(MAX_TIME)
#define INIT_TIME() startTime = getTime();
//#define cerr while (0) cerr

double startTime, curTime;

inline double getTime () {
  timeval tv;
  gettimeofday(&tv, 0);
  return tv.tv_sec + tv.tv_usec * 1e-6;
}

#define MAX 3200000
bool comp[MAX];
VI primes;
vector<LL> options;

inline bool prime (LL& x) {
  if (x < MAX)
    return !comp[x];

  FOREACH(i, primes) {
    int p = *i;
    if (p*p > x)
      return 1;
    if (x % p == 0)
      return 0;
  }
  return 1;
}

LL dfs (LL c, int p) {
  if (p == SIZE(options)) {
    if (prime(c))
      return c;
    return -1;
  }
  
  FOR(i, 10) {
    LL t = dfs(c + options[p]*i, p+1);
    if (t != -1)
      return t;
  }
  return -1;
}

int main () {
  memset(comp, 0, sizeof(comp));
  comp[0] = 1;
  comp[1] = 1;
  for (int i = 4; i < MAX; i += 2)
    comp[i] = 1;
  for (int i = 3; i*i < MAX; i += 2)
    if (!comp[i])
      for (int j = i*i; j < MAX; j += 2*i)
        comp[j] = 1;
  FORU(i, 2, MAX-1)
    if (!comp[i])
      primes.push_back(i);

  int cases;
  scanf("%d", &cases);
  char buf[100];
  while (cases--) {
    scanf(" %s", buf);
    string s(buf);

    LL v = 0, p = 1;
    FOR(i, SIZE(s))
      p *= 10;
    options.clear();

    FOR(i, SIZE(s)) {
      p /= 10;
      v *= 10;
      if (s[i] == '?')
        options.push_back(p);
      else
        v += s[i] - '0';
    }

    LL out = -1;
    if (options[0] > v) {
      for (int i = 1; out == -1; ++i)
        out = dfs(v + i*options[0], 1);
    }
    else
      out = dfs(v, 0);
    printf("%lld\n", out);
  }
  return 0;
}
