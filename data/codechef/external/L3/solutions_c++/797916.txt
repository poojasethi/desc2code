#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <cassert>

#define LU             	long long unsigned int
#define LL             	long long int

#define REP(i,n)        for(int i = 0; i < n; i++)
#define FOR(i,a,b,k)    for(int i = a; i < b; i+=k)

using namespace std;

char s[16];
int len;
LL num;

int ni(){
    int v;
    scanf("%d", &v);
    return v;
}

LL mult(LL a, LL b, LL M){
    LL ans = 0;
    while(b != 0){
        if(b & 1){
            ans = (ans + a) % M;
        }
        a = (a+a) % M;
        b >>= 1;
    }
    return ans;
}

LL get(){
    LL ret = 0;
    int v;
    for(int i = 0; i < len; i++){
        if(s[i] != '?'){
            v = (s[i] - '0');
        }
        else if(i == 0){
            v = rand()%9 + 1;
        }
        else{
            v = rand()%10;
        }
        ret = 10*ret + v;
    }
    return ret;
}

LL powMod(LL a, LL p, LL n){
    LL r = 1;
    LL x = a;

    while(p){
        if(p & 1){
            r = mult(r,x,n);
        }
        x = mult(x,x,n);
        p >>= 1;
    }
    return r;
}

bool MillerRabin(int a, LL n){
    int s = 0;
    LL d = n-1;
    while(d % 2 == 0){
        s++;
        d >>= 1;
    }

    LL ap = powMod(a,d,n);
    if(ap == 1) return true;

    for (int i = 0; i < s-1; i++) {
        if (ap+1 == n) return true;
        ap = mult(ap,ap,n);
    }
    if (ap+1 == n) return true;
    return false;
}

bool isPrime(LL val){
    if(val <= 11){
        if(val == 2 || val == 3 || val == 5 || val == 7 || val == 11) return true;
        return false;
    }

    return (MillerRabin(2, val) && MillerRabin(3, val) && MillerRabin(5, val) && MillerRabin(7, val) && MillerRabin(11, val));
}


int main(){
    int t = ni();
    while(t--){
        scanf("%s", s);
        len = strlen(s);
        do
        {
            num = get();
        }
        while(!isPrime(num));
        printf("%lld\n", num);
    }
}
