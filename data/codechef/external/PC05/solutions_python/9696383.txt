// Amazing takes time, legendary requires patience
#include "bits/stdc++.h"
using namespace std;
const int MOD = 1e9+7;
const int eps = -1e6;
const int MAX = 100010;
#define sd(n) scanf("%lld", &(n))
#define rep(i, x, n) for (int i = x, _n = (n); i < _n; ++i)
#define repi(i, a) for(typeof((a).begin()) i = (a).begin(), _##i = (a).end(); i != _##i; ++i)
#define SZ(c) (int)(c).size()
#define pra(v, n) rep(i, 0, n) cout << v[i] << " "; cout << endl;
#define lcm(a,b) (a*(b/__gcd(a,b)))
#define all(c) (c).begin(), (c).end()
#define pb push_back
#define mii map<int, int>
#define pii pair<int, int>
#define pip pair<int, pii>
#define F first
#define S second
#define mp make_pair
#define ll long long int
#define llu unsigned long long
#define CLR(p) memset(p, 0, sizeof(p))
#define SET(p) memset(p, -1, sizeof(p))
#define INF 0x3f3f3f3f
#define pi 3.14159265358979
#define debug 0
#define vi vector<int>
#define vvi vector< vi >
#define pb push_back
#define rall(c) c.rbegin(),c.rend() 
#define sz(c) c.size()
#define tr(c,it)  for(typeof(c.begin()) it=c.begin();it!=c.end();it++)  
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define present(c,x) find(all(c),x)!=c.end()
#define cpresent(c,x) c.find(x)!=c.end()  
#define permute(c) next_permutation(all(c))
#define MAX 100005

ll _sieve_size;
bitset<10000010> bs;   
vi primes;   
void sieve(ll upperbound) {          
  _sieve_size = upperbound + 1;               
  bs.set();                                            
  bs[0] = bs[1] = 0;                              
  for (ll i = 2; i <= _sieve_size; i++) 
  	if (bs[i]) {
    for (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;
    primes.push_back((int)i);
	} 
}                                          

bool isPrime(ll N) {                 
  if (N <= _sieve_size) return bs[N];                  
  for (int i = 0; i < (int)primes.size(); i++)
    if (N % primes[i] == 0) return false;
  return true;                    
}                   

int sod(int num)
{
	int sum=0;
	while(num)
	{
		sum+=num%10;
		num/=10;
	}	
	return sum;
}
ll dp[MAX];
bool ans[MAX];
int main()
{
	sieve(100005);
	rep(i,1,MAX)
		dp[i]=sod(i);
	rep(i,1,MAX)
		ans[i] = isPrime(dp[i]);
	CLR(dp); dp[1] = dp[0] = 0;
	rep(i,1,MAX)
		dp[i]+=dp[i-1]+ans[i];
	long long T,a,d,n,x;
	sd(T);
	while(T--)	{
	ll l,r;
	sd(l); sd(r);
	printf("%lld\n",dp[r]-dp[l-1]);	
	}    return 0;
}   

