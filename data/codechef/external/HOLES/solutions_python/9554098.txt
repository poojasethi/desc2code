
class TotalHoles:
    def __init__(self):
        self.onehole_chars = 'ADOPQR'
        self.twohole_chars = 'B'
        self.nohole_chars = 'CEFGHIJKLMNSTUVWXYZ'
        self.char_dict = {}
        self.output = []

    def fill_val(self, c, v):
        val = self.char_dict.get(c, None)
        if val is None:
            self.char_dict[c] = v
        else:
            self.char_dict[c] = val + v

    def get_input(self):
        try:
            T = int(raw_input())
            if  0 < T <= 40:
                count = 0
                while count < T:
                    text = raw_input('')
                    if text.isupper():
                        for c in text:
                            if c in self.onehole_chars:
                                self.fill_val(c, 1)
                            elif c in self.twohole_chars:
                                self.fill_val(c, 2)
                            elif c in self.nohole_chars:
                                self.fill_val(c, 0)
                        s = 0
                        for i,v in self.char_dict.items():
                            if v > 0:
                                s += v
                        self.output.append(s)
                        self.char_dict = {}
                    else:
                        raise 'Value should be in upper letters.'

                    count += 1
            else:
                raise 'Test case should be in defined limit.'
        except ValueError as e:
            print (e.__str__())


if __name__ == '__main__':
    t = TotalHoles()
    t.get_input()
    for i in t.output:
        print (i)