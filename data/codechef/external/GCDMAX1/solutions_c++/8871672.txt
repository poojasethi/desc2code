//#include<bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <set>
using namespace std;
#define w(t) while(t--)
#define S(x) scanf("%d",&x)
#define SLL(x) scanf("%lld",&x)
#define P(x) printf("%d",x)
#define fl(i , a, b) for(i = (int)a; i<(int)b; i++)
#define mem(a , value) memset(a , value , sizeof(a))
#define tr(c, itr) for(itr = (c).begin(); itr != (c).end(); itr++)
#define MOD 1000000007
#define MAX 1000000010
#define ll long long
#define mp make_pair
#define pb push_back
typedef pair<int,int> pp;
int a[1234567] , t[5000002];
int query(int qs , int qe , int ss , int se , int index)
{
	if(qs > se || qe < ss)
		return 0 ; 
	if(qs>=ss && qe<=se)
		return t[index];
	int mid = (ss+se)/2;
	int p = query(qs , qe, ss , mid , 2*index+1);
	int q = query(qs , qe , mid+1 , se , 2*index+2);
	return __gcd(p , q); 
}
void build(int ss , int se , int index)
{
	if(ss==se){
		t[index] = a[ss];
		return ; 
	}
	int mid = (ss+se)/2;
	build(ss , mid , 2*index+1);
	build(mid+1 , se , 2*index+2);
	t[index] = __gcd(t[2*index+1] , t[2*index+2]); 
	return ; 
}
int main()
{
	//std::ios_base::sync_with_stdio(false);
	int n , k , i , ans =0 , final =0 , j; 
	cin>>n>>k;
	fl(i , 0 ,n  ) cin>>a[i];
	build(0 , n-1 , 0);
	j =0; 
	i =0 ; final =0 ; 
	fl(i ,0 , n ){
		if(a[i] >=k) final =1;
	}
	ans = a[0];
	i =0 ;
	while(i < n )
	{
		if(i == j )
		{
			ans = a[i]; 
			i++ ; 
			if(i>=n) break ; 
			if(__gcd(ans , a[i] ) >= k )
			{
				final = max(final , i -j+1);
			}
			else
			{
				j++; ans = a[j];
			}
		}
		else
		{
			if(i + 1 >= n ) break; 
			if(__gcd(ans , a[i+1]) >= k){
				i++ ; final = max(final , i - j +1); 
				ans = __gcd(ans , a[i+1]); 
			}
			else
			{
				j++;
				ans = query(j , i , 0 , n-1 , 0 );
				final= max(final , i - j +1 );
			}
		}
	}
	printf("%d\n", final);
	return 0;
}