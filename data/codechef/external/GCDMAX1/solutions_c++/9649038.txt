#include <bits/stdc++.h>
 
 
const int N = 500005;
 
using namespace std;
int a[N];
int n, k;
int tree[4*N];
int init_tree_max(int node,int b,int e)
{
        if(b==e) // leaf node
        {
            tree[node] = a[b];
            return tree[node] ;
        }
        int mid = (b+e)/2;
        int sutta1 = init_tree_max(2*node,b,mid);
        int sutta2 =  init_tree_max(2*node+1,mid+1,e);
       tree[node]  = __gcd(sutta1 , sutta2);
       return tree[node];
}
 
 
int query_max(int node,int b,int e,int i,int j)
{
        if(b >= i && e <= j)//in range
            return tree[node];
 
        int mid = (b+e)/2;
        if(j<=mid)
            return query_max(2*node,b,mid,i,j);
        else if(i>mid)
            return query_max(2*node+1,mid+1,e,i,j);
        int p1 = query_max(2*node,b,mid,i,j);
        int p2 = query_max(2*node+1,mid+1,e,i,j);
 
        return __gcd(p1,p2);
}
 
bool check(int x) {
    bool flag = false;
    for(int i = 0 ; i <= n - x; i++) {
        int xyzw = query_max(1 , 0 , n-1 , i , i + x -1);
        if( xyzw >= k) {
           flag = true;
        }
    }
    //cout <<"-----------------"<< endl;
 
    return flag;
}
int main(){
    cin.sync_with_stdio(0);
    cin>>n>>k;
    for(int i = 0; i < n; i++) {
        cin>>a[i];
    }
    init_tree_max(1 , 0 , n-1);
    int low = 1;
    int high = n;
    int ans = 0;
    while( low <= high) {
        int mid = (low+ high)/2;
        //cout<< endl <<mid <<endl;
        if( check(mid)) {
            low = mid + 1;
            ans= mid;
        } else {
            high = mid - 1;
        }
    }
    cout <<ans<<endl;
 
   //cout << query_max(1 , 0 , n-1 , 0 , 2) <<endl;;
 
	return 0;
}
 