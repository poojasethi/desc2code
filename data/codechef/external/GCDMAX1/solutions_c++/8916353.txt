#include<bits/stdc++.h>
using  namespace std;

typedef long  long ll;
int arr[500010];
int tree[4*500010];
void build(int node,int l,int r)
{
	if(l>r)
	return ;
	if(l==r)
	{
		tree[node]=arr[l];
		return;
	}
	build(node*2,l,(l+r)/2);
	build(node*2+1,(l+r)/2+1,r);
	tree[node]=__gcd(tree[node*2],tree[node*2+1]);
}
int query(int node,int a,int b,int i,int j)
{
	if(i>j || a>j || b<i)
	{
		return 0;
	}
	if(a>=i && b<=j)
	{
		return tree[node];
	}
	return __gcd(query(node*2,a,(a+b)/2,i,j),query(node*2+1,(a+b)/2+1,b,i,j));
}
int main()
{
	int n,k,i;
	scanf("%d%d",&n,&k);
	for(i=0;i<n;i++)
	{
		scanf("%d",&arr[i]);
	}
	int s=*max_element(arr,arr+n);
	//cout<<s<<endl;
	if(s<k)
	{
		puts("0");
	}
	else
	{
		build(1,0,n-1);
		int j;
		i=0;
		j=0;
		int maxi=0;
		//cout<<query(1,0,n-1,0,0)<<endl;
		while(i<n && j<n)
		{
		//	cout<<i<<" "<<j<<endl;
			int g=query(1,0,n-1,i,j);
		//	cout<<g<<endl;
			if(g>=k)
			{
				maxi=max(maxi,j-i+1);
				j++;
			}
			else
			{
				i++;
				j=max(j,i);
			}
		}
		printf("%d\n",maxi);
	}
	
}