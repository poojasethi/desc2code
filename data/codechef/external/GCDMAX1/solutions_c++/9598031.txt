#include<iostream>
#include<cstdio>
#include<algorithm>
#include<map>
#include<set>
#include<vector>
#include<cstring>
#include<queue>
#include<stack>
#include<list>
#include<cstdlib>
#include<cmath>
#include<string>
#include<climits>
using namespace std;
#define ll long long
const ll mx=500001;
const ll mod=1000000007;
int tree[4*mx];
int ar[mx+1];
void create(int in,int s,int e)
{
  if(s==e)
  {
    tree[in]=ar[s];
    return ;
  }
  int mid=(s+e)/2;
  create(2*in,s,mid);
  create(2*in+1,mid+1,e);
  tree[in]=__gcd(max(tree[2*in],tree[2*in+1]),min(tree[2*in],tree[2*in+1]));
}
int query(int in,int s,int e,int l,int r)
{
   if(s==l&&e==r)
    return tree[in];
   int mid=(s+e)/2;
   if(r<=mid)
     return query(2*in,s,mid,l,r);
    else
    if(l>mid)
     return query(2*in+1,mid+1,e,l,r);
    else
    {
      int x=query(2*in,s,mid,l,mid);
      int y=query(2*in+1,mid+1,e,mid+1,r);
      return __gcd(max(x,y),min(x,y));
    }   

}
int main()
{
  int n,i,q,l,r,x=0,mx=-1,t,k;
  cin>>n>>k;
  for(i=0;i<n;i++)
    cin>>ar[i];
  create(1,0,n-1);

  for(i=0;i<n;i++)
    {
      x=__gcd(max(x,ar[i]),min(x,ar[i]));
      if(x>=k)
        break;
    }
  
  if(i==n)
  {
    cout<<"0\n";
    return 0;
  }
  l=0;r=i;
  mx=r-l+1;
  while(l<n&&r<n)
  {
    t=query(1,0,n-1,min(l,r),max(l,r));
    if(t>=k)
      {
        mx=max(mx,r-l+1);
           r++;
      }
    else
     l++;  
  }
  cout<<mx;
  return 0;
}