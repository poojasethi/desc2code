//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define vt(a) vector <ll> a
#define st(a) set <ll> a
#define sti(a) set <ll>::iterator a
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%d",&a)
#define sm(a,b) scanf("%d%d", &a, &b)
#define pr(a) printf("%d\n", a)
#define pm(a,b) printf("%d %d\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
using namespace std;
int tree[2000005], nums[500005], BIT[500005];
int half (int q,int w)
{
	return q+(w-q)/2;
}
int cnstrct_tree(int left,int right,int current)
{
	if(left==right)
	{
		tree[current]=nums[left];
		return nums[left];
	}
	else
	{
		int mid = half(left,right);
		tree[current] = __gcd( cnstrct_tree(left, mid, 2*current+1), cnstrct_tree(mid+1, right, 2*current+2));
		return tree[current];
	}
}
int get_gcd(int left, int right, int current, int q_left, int q_right)
{
	if(q_left<=left && q_right>=right)
		return tree[current];
	if(right<q_left || left>q_right)
		return 0;
	int mid = half(left,right);
	return __gcd( get_gcd(left, mid, 2*current+1, q_left, q_right), get_gcd(mid+1, right, 2*current+2, q_left, q_right));
}
int main()
{
	int i, j, t, n, m, k, l, r, mini,cnt, maxi, temp, flag, result, left, right, mid;
	sm(n, k);
	fr(i, 0, n)
		sc(nums[i]);
	temp = cnstrct_tree(0, n-1, 0);
	left = right = 0;
	result = 0;
	while(right<n)
	{
		temp = get_gcd(0, n-1, 0, left, right);
		if(temp>=k)
		{
			result = max(result, right-left+1);
			right++;
		}
		else
			left++;
		right = max(left, right);
	}
	pr(result);
return 0;
}
