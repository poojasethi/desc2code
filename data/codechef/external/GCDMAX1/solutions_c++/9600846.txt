#include <bits/stdc++.h>
using namespace std;
void build(int node,int a,int b,vector<int>& v,vector<int>& tree)
{
	if(a==b)
	{
		tree[node]=v[a];
		return;
	}
	int mid=(a+b)/2;
	build(node*2,a,mid,v,tree);
	build(node*2+1,mid+1,b,v,tree);
	tree[node]=__gcd(tree[node*2],tree[node*2+1]);
}
int query(int node,int a,int b,int l,int r,vector<int>& tree)
{
	if((a>b)||(l>b)||(a>r))
	{
		return 0;
	}
	if((a>=l)&&(b<=r))
	{
		return tree[node];
	}
	int mid=(a+b)/2;
	int q1=query(node*2,a,mid,l,r,tree);
	int q2=query(node*2+1,mid+1,b,l,r,tree);
	return __gcd(q1,q2);
}
int main() {
	int i,n,k,l,r,j;
	scanf("%d%d",&n,&k);
	vector<int> v(n),tree(4*n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&(v[i]));
	}
	build(1,0,n-1,v,tree);
	i=j=0;
	int ans=0,c=0,cal;
	cal=v[0];
	while(i<n)
	{
		if(cal>=k&&j<n)
		{
			ans=max(ans,j-i+1);
			j++;
			cal=__gcd(cal,v[j]);
		}
		else
		{
			i++;
			if(i>j)
				j=i;
			cal=query(1,0,n-1,i,j,tree);
		}
	}
	printf("%d",ans);
	return 0;
}