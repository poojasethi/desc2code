#include<bits/stdc++.h>
using namespace std;
 
int st[2000020];
int arr[500005];
int gcd(int a,int b)
{
  if(b==0)
    return a;
  else
    return gcd(b,a%b);
}
 
/*void build_segtree(int ss,int se,int node)
{
	if(ss==se)
	{
		tree[node]=arr[ss];
	
}
	else
	{
		int mid=(ss+se)/2;
		build_segtree(ss,mid,2*node);
		build_segtree(mid+1,se,2*node+1);
		
		tree[node]=gcd(tree[2*node],tree[2*node+1]);
	     
	}
}
int query(int arr[],int l,int r,int ss,int se,int node)
{
	if(ss>=l&&se<=r)
	return tree[node];
	if(l>r || ss>r || l>se)
    return 0;
	else
	{
		int mid=(ss+se)/2;
		int t1=query(arr,l,r,ss,mid,2*node);
		int t2=query(arr,l,r,mid+1,se,2*node+1);
		if(t1==0)
		return t2;
		else if(t2==0)
		return t1;
		else
	return gcd(t1,t2);
    }
}
*/

void buildst(int index,int ss,int se)
{
  if(ss==se)
  {
    st[index]=arr[ss];
    return ;
  }
  int mid=(ss+se)/2;
  buildst(2*index,ss,mid);
  buildst(2*index+1,mid+1,se);
  st[index]=gcd(st[2*index],st[2*index+1]);
}
int query(int index,int ss,int se,int l,int r)
{
  if(l>r || ss>r || l>se)
    return 0;
  if(l<=ss && r>=se)
    return st[index];
  int mid=(ss+se)/2;
  int leftans=query(2*index,ss,mid,l,r);
  int rightans=query(2*index+1,mid+1,se,l,r);
  return gcd(leftans,rightans);
}

 
int main()
{
	cin.sync_with_stdio(false);
	std::cout.sync_with_stdio(false);
	int n,k;
	cin>>n>>k;
	
	for(int i=1;i<=n;i++)
	cin>>arr[i];
	buildst(1,1,n);
	int i=1;
	int j=1;
    int l=INT_MIN;
	while(i<=n&&j<=n)
	{
		if(i==j)
		j++;
	int ans=query(1,1,n,i,j);
	if(ans>=k)
	{
		int t=j-i+1;
		if(t>l)
		l=t;
		if(l==n)	
		break;
		j++;
	}	
	else
	{
		i++;
	}
	if(i==j)
	j++;
	}	
	if(l==INT_MIN)
	l=0;
	cout<<l<<endl;

  /* int r=0;
  int maxi=0;
  for(int i=1;i<=n;++i)
  {
    for(int j=r+1;j<=n;j++)
    {
      if(query(1,1,n,i,j)>=k)
      {
        r=j;
        maxi=max(maxi,(r-i+1));
      }
      else
        break;
      
    }
  }
  cout<<maxi;
*/
}