#include<bits/stdc++.h>
using namespace std;
#define debug(x) cout << "[DEBUG] " << #x << " = " << x << "\n"
int prefix[500010],suffix[500010];
int A[500010],n,k;

//GCD Euler
int gcd(int a,int b)
{
    if(b==0)
        return a;
    else return gcd(b,a%b);
}

//POssibility function
bool poss(int len)
{
    int i;
    int numblocks = (n+len-1)/len;
    int uri=0,ug;
    ug = (n/len)*len;
    while(uri<ug){
    prefix[uri]=A[uri];
    for(i=uri+1;i<=uri+len-1;i++)
        prefix[i]=gcd(prefix[i-1],A[i]);
    suffix[uri+len-1]=A[uri+len-1];
    for(i=uri+len-2;i>=uri;i--)
        suffix[i]=gcd(suffix[i+1],A[i]);
    uri+=len;
    }

    prefix[ug]=A[ug];
    for(i=ug+1;i<=n-1;i++)
         prefix[i]=gcd(prefix[i-1],A[i]);
    suffix[n-1]=A[n-1];
    for(i=n-2;i>=ug;i--)
        suffix[i]=gcd(suffix[i+1],A[i]);

    for(i=0;i<=n-len;i++)
    {
        uri=gcd(suffix[i],prefix[i+len-1]);
        if(uri>=k)
            return true;
    }
    return false;
}

//Binary search on the length of the subarray
int binsearch(int lwr,int upr)
{
if(lwr==upr)
{
    if(poss(lwr))
        return lwr;
    else return 0;
}
else if(lwr<upr)
{
    int mid = (lwr+upr+1)/2;
     if(poss(mid))
        return binsearch(mid,upr);
     else
        return binsearch(lwr,mid-1);
}
}

int main()
{
int i;
cin>>n>>k;
for(i=0;i<n;i++)
    cin>>A[i];
cout<<binsearch(1,n);


}
