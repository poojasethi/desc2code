#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;

int arr[500005];
int tree[5000000];
void build_tree(int i,int low,int high)
{
  if(low>high)
  return;
  if(low==high)
  {
  tree[i]=arr[low];
  return;
  }
  int mid=(low+high)/2;
  build_tree(2*i,low,mid);
  build_tree(2*i+1,mid+1,high);
  tree[i]=__gcd(tree[2*i],tree[2*i+1]);
}

int getgcd(int l,int r,int idx,int low,int high)
{
	if(l>r || l>high || low>r||low>high)
	return 0;
	if(l<=low && r>=high)
	return tree[idx];
	return __gcd(getgcd(l,r,2*idx,low,(low+high)/2),getgcd(l,r,2*idx+1,((low+high)/2)+1,high));
}

int main()
{
	int n,k,max,i,j,x;
	cin>>n>>k;
	for(i=0;i<n;i++)
	cin>>arr[i];
	
	build_tree(1,0,n-1);
	i=0;
	j=0;
	max=0;
	x=0;
//	for(i=1;i<10;i++)
//	cout<<tree[i]<<"\n";
	//cout<<"get="<<getgcd(0,0,1,0,n-1);
	while(1)
	{
		if(i>=n || j>=n)
		break;
		x=getgcd(i,j,1,0,n-1);
		if(x>=k)
		{
			if(j-i+1>max)
			max=j-i+1;
			j++;
		}
		else
		i++;
		
	}
	cout<<max;
	return 0;
}