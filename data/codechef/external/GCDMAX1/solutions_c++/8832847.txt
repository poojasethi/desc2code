#include <iostream>
#define ll long long
using namespace std;
ll int seg[3000001];
int a[500001];
int qe,qs;
ll gcd(ll a, ll b)
{
	return a==0?b:gcd(b%a,a);
}
ll int get(ll int low,ll int high,ll int node)
{
	if(low>qe||high<qs)
	{
		return 0;
	}
	if(low>=qs&&high<=qe)
	{
		return seg[node];
	}
	int mid=(low+high)/2;
	ll int a=get(low,mid,node*2+1);
	ll int b=get(mid+1,high,node*2+2);
	return gcd(a,b);
}
void build(ll int low,ll int high,ll int node)
{
	if(low==high)
	{
		seg[node] = a[low];
		return;
	}
	int mid = (low+high)/2;
	build(low,mid,node*2+1);
	build(mid+1,high,node*2+2);
	seg[node]=gcd(seg[node*2+1],seg[node*2+2]);
}
int main() 
{
	int n;
	ll k;
	cin>>n>>k;
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
	}
	build(0,n-1,0);
	/*for(int i=0;i<4*n;i++)
	{
		cout<<seg[i]<<" ";
	}*/
	//int g = 0;
	int i=0;
	int j=0;
	int mxl = 0;
	while(i<n)
	{
		qs = i;
		qe = j;
		ll gcd = get(0,n-1,0);
		//cout<<i<<" "<<j<<" "<<gcd<<"\n";
		if(gcd>=k)
		{
			mxl = max(mxl, j-i+1);
		}
		if(j<n-1&&gcd>=k)
		{
			j++;
		}
		else
		{
			i++;
			if(i==j+1)
			{
				j++;
			}
		}
	}
	cout<<mxl<<"\n";
	return 0;
}