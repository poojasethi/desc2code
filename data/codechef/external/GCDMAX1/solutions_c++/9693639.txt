/***********************
 	
  	root8950

***********************/

#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ppii pair< pii,pii >
#define ppll pair< pll,pll >
#define vi vector<int>
#define MAT vector< vi >

#define ft first
#define sd second
#define mp make_pair
#define pb push_back

#define root 1
#define lft 2*idx
#define rgt 2*idx+1
#define cllft lft,st,mid
#define clrgt rgt,mid+1,ed

#define inf INT_MAX/2
#define linf LLONG_MAX/2

#define all(p) p.begin(),p.end()
#define set(p) memset(p, -1, sizeof(p))
#define clr(p) memset(p, 0, sizeof(p))
#define mem(p, v) memset(p, v, sizeof(p))
#define cpy(d, s) memcpy(d, s, sizeof(s))
#define asst(X,L,R) assert(X >= L && X <= R)

#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)

/*
#define gc getchar_unlocked
int rd_int(){ int num=0; char c=gc(); bool flag=0; while(!((c>='0' & c<='9') || c == '-')) c=gc(); if(c=='-'){ flag=1; c=gc(); } while(c>='0' && c<='9'){ num=(num<<1)+(num<<3)+c-'0'; c=gc(); } if(flag) return -num; return num; }
#define pc putchar_unlocked
void wr_int(int num){ if(num<0){pc('-');num=-num;} char snum[20];int i=0;do{snum[i++]=num%10+48;num/=10;}while(num);i--;while(i>=0){pc(snum[i--]);}pc('\n');}
*/

template <class T> T max(T a,T b,T c){return ( ( a > b ) ? ( ( a > c) ? a : c ) : ( ( b > c ) ? b : c ) );}
template <class T> T min(T a,T b,T c){return ( ( a < b ) ? ( ( a < c) ? a : c ) : ( ( b < c ) ? b : c ) );}
// compiling with gcc11 or above
// g++ -std=c++0x
// PIE is defined as M_PI

/////////////////////////////////////////////////////////////////////////MACRO ENDS//////////////////////////////////////////////////////////////////////////

const int MOD = 1000000000 + 7 ;
const int MAXN = 100000 + 9 ;

vector< vector<int> > ST(5e5+1,vector<int> (20));
int n,k;
vector<int> vec(5e5+1);

void preprocess(){
	for(int i=0;i<n;i++){
		ST[i][0]=vec[i];
	}
	for(int j=1;(1<<j)<=n;j++){
		for(int i=0;i+(1<<j)-1<n;i++){
			ST[i][j]=__gcd(ST[i][j-1],ST[i+(1<<(j-1))][j-1]);
		}
	}
}

int query(int start,int end){
	int diff=end-start;
	diff=31 - __builtin_clz(diff+1);
	return __gcd( ST[start][diff] , ST[end-(1<<diff)+1][diff]);
}

int main(){
	//ios_base::sync_with_stdio(false);
	//cin.tie(NULL);
	int t=1;
	//cin >> t;
	while(t--){
		cin >> n >> k;
		for(int i=0;i<n;i++){
			cin >> vec[i];
		}
		preprocess();
		int ans=0;
		for(int i=0;i<n;i++){
			int lo=i;
			int hi=n-1;
			while(lo < hi){
				int mid=(lo+hi)/2;
				int gcdmid=query(i,mid);
				int gcdrgt=query(i,mid+1);
				if(gcdmid >= k){
					if(gcdrgt < k){
						lo=mid;
						break;
					}
					else lo=mid+1;
				}
				else{
					hi=mid;
				}
			}
			int gcd=query(i,lo);
			if(gcd>=k){
				ans=max(ans,lo-i+1);
			}
		}
		cout << ans << "\n";
	}
	return 0;
}
