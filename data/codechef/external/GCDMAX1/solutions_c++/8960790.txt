#include <iostream>
#include <string>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>
#include <utility>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstring>
#include <iomanip>
#include <list>
#include <bitset>
#define ff first
#define ss second
#define mod 1000000007
#define SET(a) memset(a,-1,sizeof(a))
#define CLEAR(a) memset(a,0,sizeof(a))
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)
using namespace std;
typedef long long LL;
typedef pair< int , int > pii;
typedef pair< LL, LL> pll;
typedef vector< LL >vll;
typedef vector< int > vi;
template<class T>T gcd(T a,T b){return (b==0)?a:gcd(b,a%b);}
template<class T>T lcm(T a,T b){return (a*b)/gcd(a,b);}
template<class T>T powmod(T a,T b) {T res=1;if(a>=mod)a%=mod;for(;b;b>>=1){if(b&1)res=res*a;if(res>=mod)res%=mod;a=a*a;if(a>=mod)a%=mod;}return res;}


int arr[500005],segtree[4*500005],n;
void build(int node,int beg,int end)
{
    if(beg>end)
    return;
    if(beg==end)
    {
        segtree[node]=arr[beg];
        return ;
    }
    build(2*node,beg,(beg+end)/2);
    build(2*node+1,(beg+end)/2+1,end);
    segtree[node]=gcd(segtree[2*node],segtree[2*node+1]);
}/*
void update(int node,int beg,int end,int x,int y,int val)
{
    if(beg>end||x>end||y<beg)
    return;
    if(beg==end)
    {
        segtree[node]+=val;
        return;
    }
    update(2*node,beg,(beg+end)/2,x,y,val);
    update(2*node+1,(beg+end)/2+1,end,x,y,val);
    segtree[node]=max(segtree[2*node],segtree[2*node+1]);
}*/
int querie(int node,int beg,int end,int x,int y)
{
    if(beg>end||x>end||y<beg)
    return mod;
    if(x<=beg&&y>=end)
    return segtree[node];
    int q1=querie(2*node,beg,(beg+end)/2,x,y);
    int q2=querie(2*node+1,(beg+end)/2+1,end,x,y);
    if(q1>=mod)return q2;
    if(q2>=mod)return q1;
    return gcd(q1,q2);
}
int k;
int main()
{
	cin>>n>>k;
	for(int i=0;i<n;i++)
		cin>>arr[i];
	build(1,0,n-1);
	int p=0,q=0;
	int x,ans;
	ans=0;
	//cout<<gcd(15,45)<<" ";
	//cout<<querie(1,0,n-1,3,4);
	while(p<n)
	{
		x=querie(1,0,n-1,q,p);
		if(x>=k)
		{
			
			ans=max(ans,p-q+1);
			p++;
		}
		else
		{
			q++;
		}
		if(q>p)
			p++;
	}
	cout<<ans;
	return 0;
}
