#include<bits/stdc++.h>
#define ll long long int
#define F first
#define S second
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define rep(i,in1,n) for(i=in1;i<=n;i++)
#define repd(i,in1,n) for(i=in1;i>=n;i--)

#define pf(n) printf("%d ",n);
#define sf(n) scanf("%d",&n)
#define sl(n) scanf("%I64d",&n)
#define nl printf("\n")
#define mem(arr,init) memset(arr,init,sizeof(arr))
#define mod 1000000007
using namespace std;

void mul(ll mat1[5][5],ll mat2[5][5],ll res[5][5])
{
	ll i,j,k;
//	mem(res,0);
	for(i=1;i<=4;i++)
	{
			for(j=1;j<=4;j++)
			{
				res[i][j]=0;
			}
		//	nl;
	}
	for(i=1;i<=4;i++)
	{
			for(j=1;j<=4;j++)
			{
					for(k=1;k<=4;k++)
					{
						res[i][j]=(res[i][j]%mod+((mat1[i][k]%mod)*(mat2[k][j]%mod))%mod)%mod;
					}
		//			cout<<res[i][j]<<" ";
			}
		//	nl;
			
	}
}

void powr(ll mat[5][5],ll ans[5][5],ll b)
{
	ll i,j;
	for(i=1;i<=4;i++)
	{
		for(j=1;j<=4;j++)
		{
			if(i==j)
			{
				ans[i][j]=1;
			}
			else
			{
				ans[i][j]=0;
			}
		}
	}
	
	ll temp[5][5];
	while(b)
	{
		if(b&1)
		{
			mul(mat,ans,temp);
			for(i=1;i<=4;i++)
			{
				for(j=1;j<=4;j++)
				{
					ans[i][j]=temp[i][j]%mod;
				}
			}
			
		}
		b=b>>1;
		mul(mat,mat,temp);
		for(i=1;i<=4;i++)
			{
				for(j=1;j<=4;j++)
				{
					mat[i][j]=temp[i][j]%mod;
				}
			}
	}
	
	
}
void disp(ll res[5][5])
{
	ll i,j;
	for(i=1;i<=4;i++)
			{
				for(j=1;j<=4;j++)
				{
					cout<<res[i][j]<<" ";
				}
				nl;
			}
}

int main()
{
	ll i,j,k,t,n,m,a,b,c,x,y,z,d,t1,t2,t3,w;
	ll mat[5][5];
	ll res[5][5];
	cin>>t;
	while(t--)
	{
		cin>>a>>b>>c>>d>>t1>>t2>>t3>>n;
		mem(mat,0);
		mat[1][1]=a; mat[1][2]=b; mat[1][3]=c; mat[1][4]=1;
		mat[2][1]=1; mat[2][2]=0; mat[2][3]=0; mat[2][4]=0;
		mat[3][1]=0; mat[3][2]=1; mat[3][3]=0; mat[3][4]=0;
		mat[4][1]=0; mat[4][2]=0; mat[4][3]=0; mat[4][4]=1;
		if(n<=3)
		{
			if(n==1)
			cout<<t1;
			if(n==2)
			cout<<t2;
			if(n==3)
			cout<<t3;
			nl;
			continue;
		}
		mem(res,0);
		
		powr(mat,res,n-3);
		//mul(mat,mat,res);
		x=res[1][1]%mod; y=res[1][2]%mod; z=res[1][3]%mod; w=res[1][4]%mod;
 		z=((x%mod)*(t3%mod)%mod)+((y%mod)*(t2%mod)%mod)+((z%mod)*(t1%mod)%mod)+((w%mod)*(d%mod)%mod);
 		cout<<z%mod<<endl;
 	//	disp(res);
		
		
	}




	return 0;
}
