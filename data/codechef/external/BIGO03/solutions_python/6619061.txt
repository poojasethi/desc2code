/**
	Author: Shuvojit
	Time: 2015-04-03-09.22
	Comment:
*/
#include<bits/stdc++.h>
#include<set>
#include<map>
#include<vector>
#include<stack>
#include<queue>
#define ll long long
using namespace std;
const int row=4;
const int col=4;
const int d=4; //generally row=col=d;
const ll MOD=1E9+7;// CAUTION: if declared other wise 1
ll C[row][col];
ll I[row][col]={{1, 0, 0, 0}, {0, 1,0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};

void mul(ll F[row][col],ll M[row][row])
{
    ll temp[row][col];

    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            temp[i][j]=0;
            for(int k=0;k<d;k++)
                temp[i][j]=(temp[i][j]+((F[i][k]%MOD)*(M[k][j]%MOD))%MOD)%MOD;
        }
    }

    for(int i=0;i<row;i++)
        for(int j=0;j<col;j++)
            F[i][j]=temp[i][j];
    return;
}
/*void modpow(ll M[4][4], int n)
{
	ll ret[4][4]={{1, 0, 0, 0}, {0, 1,0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};
	while(n>0) {
		if(n&1) {
			mul(ret, M);
		}
		mul(M, M);
		n>>=1;
	}
	memcpy(M, ret, sizeof ret);
}*/
void power(ll F[row][col],ll n)
{
    //cout<<n<<endl;
    if(n==0 || n==1)
    {
        return ;
    }
    else if(n%2==0)
    {
        power(F,n/2);
        mul(F,F);
    }
    else
    {
        power(F,n-1);
        mul(F,C);
    }
}

int main()
{
	ll T,k;
	ll a[4];
	ll t[4];
	ll F[row][col];
	ll ans;

	scanf("%lld",&T);
	while(T--)
	{
        for(int i=0;i<4;i++)  //will vary according to no. of co-efficients given
        {
            scanf("%lld",&a[i]);
        }
        for(int i=2;i>=0;i--)  //initial cases or base cases
        {
            scanf("%lld",&t[i]);
        }
        scanf("%lld",&k); //kth number of the series to be computed


        C[0][0]=a[0];C[0][1]=a[1];C[0][2]=a[2];C[0][3]=1;
        C[1][0]=1;
                C[2][1]=1;
                                                C[3][3]=1;

        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++)
                F[i][j]=C[i][j];


        if(k==1)
             printf("%lld\n",t[2]);   //handling the base cases
        else if(k==2)
             printf("%lld\n",t[1]);
        else if(k==3)
             printf("%lld\n",t[0]);
        else
        {
            power(F,k-3);  //K-3 because the three base cases is to be done outside

            ans=0;
            ans=((F[0][0]%MOD)*(t[0]%MOD))%MOD;  //product taken with three base cases
            ans=((ans%MOD+(F[0][1]%MOD)*(t[1]%MOD))%MOD)%MOD;
            ans=((ans%MOD+(F[0][2]%MOD)*(t[2]%MOD))%MOD)%MOD;
            ans=((ans%MOD+(F[0][3]%MOD)*(a[3]%MOD))%MOD)%MOD;

            printf("%lld\n",ans);
        }
	}
	return 0;
}
