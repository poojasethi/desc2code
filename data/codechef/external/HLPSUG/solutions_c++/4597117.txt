#include <iostream>
#include <fstream>




using namespace std;



#define TEST 0


class ProblemSolver {
	private:
		int *primes;
		int numprimes;
		const int NMAX;
		const int K;
	public:
		ProblemSolver() : NMAX(1000), K(28) {
			bool sieve[NMAX + 1];
			for (int i = 0; i <= NMAX; i += 1) {
				sieve[i] = true;
			}
			sieve[0] = sieve[1] = false;
			for (int i = 4; i <= NMAX; i += 2) {
				sieve[i] = false;
			}
			for (int i = 3; i * i <= NMAX; i += 2) {
				if (sieve[i]) {
					for (int j = i * i; j <= NMAX; j += i) {
						sieve[j] = false;
					}
				}
			}
			numprimes = 1;
			for (int i = 3; i <= NMAX; i += 2) {
				if (sieve[i]) {
					numprimes += 1;
				}
			}
			primes = new int[numprimes];
			primes[0] = 2;
			int index = 1;
			for (int i = 3; i <= NMAX; i += 2) {
				if (sieve[i]) {
					primes[index] = i;
					index += 1;
				}
			}
		}
		~ProblemSolver() {
			delete[] primes;
		}
	public:
		void solve(int testNum, istream &in, ostream &out) {
			int N;
			in >> N;
			int sum = 0;
			for (int i = 0; i < numprimes && primes[i] <= N; i += 1) {
				if (primes[i] >= K) {
					sum += primes[i];
				}
			}
			out << sum << "\n";
		}
};


int main() {
	#if TEST
		ifstream inputfile;
		inputfile.open("input.txt", ios::in);
		istream &in = inputfile;
		ostream &out = cout;
	#else
		istream &in = cin;
		ostream &out = cout;
	#endif
	ProblemSolver solver;
	int testCases;
	in >> testCases;
	for (int testNum = 1; testNum <= testCases; testNum += 1) {
		solver.solve(testNum, in, out);
	}
	return 0;
}
