#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<cmath>
#include<vector>
#include<iterator>
using namespace std;

inline int scan() {
    int p=0;
    char c;
    c=getchar_unlocked();
    while(c<'0' || c>'9')
        c=getchar_unlocked();
    while(c>='0' && c<='9'){
        p=(p<<3)+(p<<1)+c-'0';
        c=getchar_unlocked();
    }
    return p;
}

int xcount, ocount;

void display(char **a) {
	cout<<"Tic Tac Toe"<<endl;
	for(int i=0; i<4; i++) {
		for(int j=0; j<4; j++) {
			cout<<a[i][j];
			if(a[i][j]=='X')
				xcount++;
			else if(a[i][j]=='O')
				ocount++;			
		}
		cout<<endl;
	}
	cout<<xcount<<" "<<ocount<<endl;
}

bool hasWon(char c, char **a) {
	int count = 0;
	int diagflag= 1;
	
	//Check diagonals
	
	if(a[0][0] == c || a[0][0] == 'T') {
		for(int i=0; i<3; i++) {
			if(a[i+1][i+1] != c && a[i+1][i+1] != 'T') {
				diagflag = 0;
				break;
			}
		}
 	}
 	else diagflag = 0;
 	
	if(diagflag) {
 		//cout<<"win through right diagonal"<<endl;
 		return true;	
	}
 	if(a[0][3] == c || a[0][3] == 'T') {
 		diagflag = 1;
 		for(int i=2; i>=0; i--) {
 			if(a[3-i][i] != c && a[3-i][i] != 'T') {
 				diagflag = 0;
 				break;
 			}
 		}
 	}
 	else diagflag = 0;
 	if(diagflag) {
 		//cout<<"win through left diagonal"<<endl;
 		return true;
 	}
	//Check rows
	
	for(int i=0; i<4; i++) {
		count = 0;
		if(a[i][0] == c || a[i][0] == 'T') {
			for(int j=1; j<4; j++) {
				if(a[i][j] == c || a[i][j] == 'T')
					++count;		
				else break;
			}
			if(count == 3) {
				//cout<<"win through "<<i<<"th row"<<endl;
				return true;
			}
		}		
	}
	
	//Check columns
	
	for(int i=0; i<4; i++) {
		count = 0;
		if(a[0][i] == c || a[0][i] == 'T') {
			for(int j=1; j<4; j++) {
				if(a[j][i] == c || a[j][i] == 'T')
					++count;
				else break;
			
			}
			if(count == 3) {
				//cout<<"win through "<<i<<"th column"<<endl;
				return true;
			}
		}		
	}
	
	return false;
}

bool isDraw(char **a) {
	for(int i=0; i<4; i++)
		for(int j=0; j<4; j++)
			if(a[i][j] == '.')
				return false;
	
	return true;
	
}

int main() {
	int test;
	test = scan();
	for(int t=0; t<test; t++) {	
		bool wonx, wono, draw, incomplete;
		wonx = wono = draw = incomplete = false;
		char **a = (char **)malloc(4*sizeof(char*));
		for(int i=0; i<4; i++)
			a[i] = (char*)malloc(4*sizeof(char));
		xcount = ocount = 0;
		for(int i=0; i<4; i++) {
			for(int j=0; j<4; j++) {
				cin>>a[i][j];
				if(a[i][j] == 'X')
					++xcount;
				else if(a[i][j] == 'O')
					++ocount;				
			}
		}
		//display(a);
		if(xcount>ocount)
			wonx = hasWon('X', a);
		else if(xcount==ocount)
			wono = hasWon('O', a);
		
		
		//cout<<wonx<<" "<<wono<<endl;
		if(!wonx && !wono) {
			draw = isDraw(a);
		}
		
		if(!draw && !wonx && !wono)
			incomplete = true;
		
		if(wonx)
			cout<<"Case #"<<t+1<<": "<<"X won"<<endl;	
		else if(wono)
			cout<<"Case #"<<t+1<<": "<<"O won"<<endl;
		else if(incomplete)
			cout<<"Case #"<<t+1<<": "<<"Game not completed"<<endl;
		else if(draw)
			cout<<"Case #"<<t+1<<": "<<"Draw"<<endl;
	}
	return 0;
}