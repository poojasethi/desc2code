#include <iostream>
#include <string>
#include <algorithm>
#include <cstdio>
#include <cstring>

#define get getchar_unlocked()

using namespace std;

inline int input(char a[])
{
    char temp;
    register int counter =0;
    for (int i=0;counter<16; i++)
    {
        temp = get;
        if ((temp=='X')||(temp=='O')||(temp=='.')||(temp=='T'))
        {
            a[counter] = temp;
            counter++;
        }
    }

    return 0;
}

bool ifempty(char s[])
{
    for (int i=0; i<16; i++)
    {
        if (s[i]=='.'){return true;}
    }

    return false;
}

inline bool checkvertical(char s[], char a,int l)
{
    register int counter=0, index=l;
    for (int i=0; i<4; i++)
    {
        if ((s[index]==a)||(s[index]=='T'))
        {
            counter++;
        }

        else break;
        index+=4;
    }

    if (counter==4){return true;}

    else return false;
}

inline bool checkhorizontal(char s[], char a, int l)
{
    register int counter=0, index=l;
    for (int i=0; i<4; i++)
    {
        if ((s[index]==a)||(s[index]=='T'))
        {
            counter++;
        }

        else break;
        index+=1;
    }

    if (counter==4){return true;}

    else return false;
}

inline bool checkd1(char s[], char a)
{
    register int counter=0, index=0;
    for (int i=0; i<4; i++)
    {
        if ((s[index]==a)||(s[index]=='T'))
        {
            counter++;
        }

         else break;
        index+=5;
    }

    if (counter==4){return true;}

    else return false;
}

inline bool checkd2(char s[], char a)
{
    register int counter=0, index=3;
    for (int i=0; i<4; i++)
    {
        if ((s[index]==a)||(s[index]=='T'))
        {
            counter++;
        }

        else break;
        index+=3;
    }

    if (counter==4){return true;}

    else return false;
}

inline int endgame(char s[])// 0 if 0 wins // 1 if X wins //2 if draw // 3 if game not over
{
    if ((checkvertical(s,'O',0))||(checkvertical(s,'O',1))||(checkvertical(s,'O',2))||(checkvertical(s,'O',3))||
    (checkhorizontal(s,'O',0))||(checkhorizontal(s,'O',4))||(checkhorizontal(s,'O',8))||(checkhorizontal(s,'O',12))
    ||(checkd1(s,'O'))||(checkd2(s,'O'))){return 0;}

    if ((checkvertical(s,'X',0))||(checkvertical(s,'X',1))||(checkvertical(s,'X',2))||(checkvertical(s,'X',3))||
    (checkhorizontal(s,'X',0))||(checkhorizontal(s,'X',4))||(checkhorizontal(s,'X',8))||(checkhorizontal(s,'X',12))
    ||(checkd1(s,'X'))||(checkd2(s,'X'))){return 1;}

    if (ifempty(s)){return 3;}

    return 2;
}

inline int test(int t)
{
    char s[16];
    int outcome;
    input(s);

    outcome = endgame(s);

    cout<<"Case #"<<t+1<<": ";

    if (outcome == 0){cout<<"O won\n";}
    if (outcome == 1){cout<<"X won\n";}
    if (outcome == 2){cout<<"Draw\n";}
    if (outcome == 3){cout<<"Game not completed\n";}

    return 0;
}

int main()
{
    int t;
    scanf("%d",&t);
    for (int i=0; i<t; i++)
    {
        test(i);
    }

    return 0;
}
