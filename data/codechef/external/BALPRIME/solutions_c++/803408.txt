#include<stdio.h>
#include<iostream>
#include<math.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#define LIMIT 1000000LL
using namespace std;

long long max1=LIMIT;
bool sieve[((LIMIT-1)>>1)+2]={false};
long long primes[LIMIT>>1];
long long balancedPrimes[LIMIT>>2];
long long no_of_primes=1;
long long sievebound;

void sieveMethod(long long max1,bool print) {
	/* For sieve method we need a 
	sievebound : a upper bound for the multiplier to be marked
	crosslimit : for the the limit on counter (sufficient to check till sqrt of LIMIT)
	*/

	/* sieve of eratosthenes start */
	sievebound=((max1-1)>>1);
	long long crosslimit=sqrt(max1)-1/2;
	long long i,j;
	for( i=1LL; i<crosslimit;i++){
		if(!sieve[i]){
			for(j=2*i*(i+1);j<=sievebound;j+=2*i+1)
				sieve[j]=true;
		}
	}
	/* sieve of eratosthenes ends */

	/* collecting primes in a array */
	j=0;
	primes[j++]=2;
	for(i=1;i<=sievebound;i++)
		if(!sieve[i]){
			no_of_primes++;
			primes[j++]=(2*i+1);
		}
}

void display(long long arr[LIMIT>>1]){
	long i;
	for(i=0;i<200;i++)
		printf("%lld,",arr[i]);
	printf("\n");
}

void calculateBalancedPrime(){
	long long i,j=0;
	for(i=1;i<no_of_primes-1;i++){
//	for(i=1;i<100;i++){
//		printf("%lld %lld",primes[i-1],primes[i+1]);
		if((primes[i-1]+primes[i+1])/2 == primes[i]){
			balancedPrimes[j++]=primes[i];
		}
	}
//	printf(" J = %lld , N : %lld",j,no_of_primes);

}

int main()
{
	clock_t starttime=clock(),endtime=0;
	long long num=0,T,i;
	char choice[100],NL;
	sieveMethod(1000000,false);
/*	
	printf("Number of primes upto %lld: %lld\n",LIMIT,no_of_primes);
	printf("%lld %lld",primes[0],primes[2]);
	printf("****************Primes\n");
	display(primes);
	printf("****************Balanced Primes\n");
	display(balancedPrimes);
	printf("**********Main loop \n");
	for(i=0;i<200;i++)
		printf("%lld,",primes[i]);
*/
	calculateBalancedPrime();
	scanf("%lld",&T);
	while(T-->0){
		scanf("%lld",&num);
		printf("%lld\n",balancedPrimes[num]);

	}
	return 0;
}
