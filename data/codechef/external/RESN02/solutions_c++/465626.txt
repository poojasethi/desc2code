#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
using namespace std;
#define INF (int)1e9
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define ll long long
#define wez(n) int (n); scanf("%d",&(n));
#define IN(x,y) ((y).find((x))!=(y).end()) 
#define DBG(vari) cout<<#vari<<" = "<<vari<<endl;
 
int n;
 
int mod (int x, int m) {
   x %= m;
   if (x < 0) x += m;
   return x;
}
 
template <class T>
T potega (T x, int wykl) {
   if (wykl == 1) return x;
   T wyn = potega(x*x,wykl/2);
   if (wykl & 1) wyn = wyn * x;
   return wyn;
   /*if (wykl==1) return x;
   return x * potega(x,wykl-1);*/
}
 
struct Macierz {
   vector<int> p;
   
   Macierz (): p(n) {
   }
   
   Macierz operator * (const Macierz &m) const {
      Macierz w;
      FOR(x,n) {
         int temp = 0;
         FOR(y,n) {
            //if (n==4) { DBG(y) DBG(p[y]) DBG(m.p[(x-y)%n]) }
            temp += p[y] * m.p[mod(x-y,n)];
         }
         w.p[x] = temp % 2;
      }
      return w;
   }
};
 
int main () {
   wez(t);
   while(t--) {
      vector<int> a;
      scanf("%d",&n);
      wez(k);
      FOR(i,n) {wez(b);a.pb(b);}
      
      Macierz m;
      m.p[0] = m.p[1] = m.p[n-1] = 1;
      for (int i = 2; i < n-1; ++i) m.p[i] = 0;
      
      Macierz pot = potega(m,k);
      //FOR(i,n) DBG(pot.p[i])
      FOR(y,n) {
         int wynik = 0;
         FOR(x,n) if (pot.p[mod(x-y,n)]) wynik ^= a[x];
         printf("%d ",wynik);
      }
      printf("\n");
   }
}