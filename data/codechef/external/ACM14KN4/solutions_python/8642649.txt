/* Manchester United > Coding */
#include<iostream>
#include<vector>
#include<utility> 
#include<algorithm>
#include<map>
#include<cmath>
#include<string>
#include<queue>
#include<cstdlib>
#include<cstdio>
//
using namespace std;
long long int mod =1000000007;
const int N = 100001;  // limit for array size
long long int n;  // array size
long long int m;
long long int t[2 * N];
long long int f[2*N];
long long int asc[2*N];
long long int desc[2*N];

void build() {  // build the tree
  for (long long int i = n - 1; i > 0; --i)
  {
  	 t[i] = max(t[i<<1],t[i<<1|1]);
  	 f[i] = f[i<<1] + f[i<<1|1];
  	 if(asc[i<<1]==1 && asc[i<<1|1]==1)
  	 	asc[i]=1;
  	 else
  	 	asc[i]=0;
  	 
  	 if(desc[i<<1]==1 && desc[i<<1|1]==1)
  	 	desc[i]=1;
  	 else
  	 	desc[i]=0;
 }
}
void modify(long long int p, long long int value) {  // set value at position p
  long long int q = p;
  for (t[p += n] = value,f[p] =value; p > 1; p >>= 1) 
  {
  	t[p>>1] = max(t[p],t[p^1]);
  	f[p>>1] = f[p] + f[p^1];
  }
  if(q!=0 && q!=n-1)
  {
	if(f[n+q] >=f[n+q-1])
  		asc[n+q]=1;
  	else
  		asc[n+q]=0;
  	if(f[n+q] <=f[n+q-1])
  		desc[n+q]=1;
  	else
  		desc[n+q]=0;
  	if(f[n+q+1] >=f[n+q])
  		asc[n+q+1]=1;
  	else
  		asc[n+q+1]=0;
  	if(f[n+q+1] <=f[n+q])
  		desc[n+q+1]=1;
  	else
  		desc[n+q+1]=0;
  	long long int o=q;
  	for (q+=n;q > 1; q >>= 1) 
  	{
  		asc[q>>1] = asc[q]&asc[q^1];
  		desc[q>>1] = desc[q]&desc[q^1];
  		
  	}
  	for (o+=(n+1);o > 1; o >>= 1) 
  	{
  		asc[o>>1] = asc[o]&asc[o^1];
  		desc[o>>1] = desc[o]&desc[o^1];
  	}
  	
  }
  if(q==0)
  {
	if(f[n+q+1] >=f[n+q])
  		asc[n+q+1]=1;
  	else
  		asc[n+q+1]=0;
  	if(f[n+q] <=f[n+q-1])
  		desc[n+q+1]=1;
  	else
  		desc[n+q+1]=0;
  	for (q+=(n+1);q > 1; q >>= 1) 
  	{
  		asc[q>>1] = asc[q]&asc[q^1];
  		desc[q>>1] = desc[q]&desc[q^1];
  	}
  }
  if(q==n-1)
  {
  	if(f[n+q] >=f[n+q-1])
  		asc[n+q]=1;
  	else
  		asc[n+q]=0;
  	if(f[n+q] <=f[n+q-1])
  		desc[n+q]=1;
  	else
  		desc[n+q]=0;
  	for (q+=n;q > 1; q >>= 1) 
  	{
  		asc[q>>1] = asc[q]&asc[q^1];
  		desc[q>>1] = desc[q]&desc[q^1];
  	}
  }	
}

long long int query(long long int l, long long int r) {  // sum on long long interval [l, r)
  long long int res = 0;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res += f[l++];
    if (r&1) res += f[--r];
  }
  return res;
}

long long int query2(long long int l, long long int r) {  // sum on interval [l, r)
  long long int res = 0;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = max(res,t[l++]);
    if (r&1) res = max(res,t[--r]);
  }
  return res;
}

long long int query3(long long int l, long long int r) {  // sum on interval [l, r)
  long long int res = 1;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = res & asc[l++];
    if (r&1) res = res & asc[--r];
  }
  return res;
}

long long int query4(long long int l, int r) {  // sum on long long interval [l, r)
  long long int res = 1;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = res & desc[l++];
    if (r&1) res = res & desc[--r];
  }
  return res;
}

int main() {
  scanf("%lld", &n);
  scanf("%lld", &m);
  for (long long int i = 0; i < n; ++i)
  { 
  	scanf("%lld", t + n + i);
  	f[n+i] = t[n+i];
  }
  asc[n]=1,desc[n]=1;
  for (long long int i = 1; i < n; ++i)
  { 
  	if(f[n+i] >=f[n+i-1])
  		asc[n+i]=1;
  	else
  		asc[n+i]=0;	
  	if(f[n+i] <=f[n+i-1])
  		desc[n+i]=1;
  	else
  		desc[n+i]=0;
  }
  
  build();
  for(long long int j=0; j<2*m;j++)
  {
  	char a;
  	long long int x,y;
  	scanf("%c %lld %lld",&a,&x,&y);
  	if(a=='U')
  		modify(x-1,y);
  	if(a=='M')
  		printf("%lld\n",query2(x-1,y));
  	if(a=='S')
  		printf("%lld\n",query(x-1,y));
  	if(a=='I')
  		printf("%lld\n",query3(x,y));
  	if(a=='D')
  		printf("%lld\n",query4(x,y));
  }
  return 0;
}

