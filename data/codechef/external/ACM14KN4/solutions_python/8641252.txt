#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define inf -10000000ll
struct node
{
	ll sum,val,maxele,right,left;
	bool inc,dec;
	node()
	{
		sum=right=left=0;
		maxele=inf;
		inc=true;
		dec=true;
	}
	void merge(const node &l,const node &r)
	{
		sum=l.sum+r.sum;
		maxele=max(l.maxele,r.maxele);
		right=r.right;
		left=l.left;
		if(l.right<=r.left && r.inc && l.inc)
		inc=true;
		else
		inc=false;
 
		if(l.right>=r.left && r.dec && l.dec)
		dec=1;
		else
		dec=false;
 
	}
 
}tree[4*100105];
 
ll ar[100010];
void build(ll node,ll a,ll b)
{
	if(a>b)
	return;
 
	if(a==b)
	{
		tree[node].sum=tree[node].right=tree[node].left=tree[node].maxele=ar[a];
		tree[node].inc=true;
		tree[node].dec=true;
		return;
 
	}
	build(2*node,a,(a+b)/2);
	build(2*node+1,1+(a+b)/2,b);
	tree[node].merge(tree[2*node],tree[2*node+1]);
 
 
}
 
void update(ll node,ll a,ll b,ll pos)
{
	if(a==b)
	{
		tree[node].sum=tree[node].right=tree[node].left=tree[node].maxele=ar[a];
		tree[node].inc=true;
		tree[node].dec=true;
		return;
 
	}ll mid = (a + b)/2;
    if (pos >= a && pos <= mid) 
    update(node*2, a, mid, pos);
    else 
    update(node*2+1, mid+1, b, pos);
    tree[node].merge(tree[node*2], tree[node*2+1]);
 
}
 
 
node query(ll root,ll a,ll b,ll i,ll j)
{
	node s;;
 
	if(a > b || a > j || b < i) 
	return s;
 
 
	if(a>=i && b<=j)
	return tree[root];
 
	node q1 = query(root*2, a, (a+b)/2, i, j);
	node q2 = query(1+root*2, 1+(a+b)/2, b, i, j); 
	if(q1.maxele==inf)
	return q2;
	if(q2.maxele==inf)
	return q1;
	//	cout<<q1.sum<<" "<<q2.sum<<endl;
	node res;
	res.merge(q1,q2);
	return res;
 
 
 
}
 
int main()
{
 
	ll n,m;
	scanf("%lld %lld",&n,&m);
	for(int i=0;i<n;i++)
	scanf("%lld",&ar[i]);
	build(1,0,n-1);
 
	while(m--)
    {
 
        char c;
        int a,b;
        cin>>c>>a>>b;
        if(c=='U')
        {
        //	cout<<" in\n";
        	ar[a-1]=b;
        	update(1,0,n-1,a-1);     // this was part due to which i got 4 wa
        }                            // i wrote a=1  instead of a-1    
        else
        {
        	node p=query(1,0,n-1,a-1,b-1);
 
        	if(c=='M')
        	{
        		cout<<p.maxele<<endl;
        	}
        	if(c=='S')
        	{
        		cout<<p.sum<<endl;
        	}
        	if(c=='I')
        	{
        		if(p.inc)
        		cout<<1<<endl;
        		else
        		cout<<0<<endl;
        	}
        	if(c=='D')
        	{
        		if(p.dec)
        		cout<<1<<endl;
        		else
        		cout<<0<<endl;
 
        	}
        }
 
    }
/*	for(int i=0;i<16;i++)
        {
        	cout<<i<<" "<<tree[i].sum<<" ";
        	if(tree[i].inc)
        	cout<<1<<" ";
        	else
        	cout<<0<<" ";
        	
        	 if(tree[i].dec)
        	cout<<1<<endl;
        	else
        	cout<<0<<endl;
 
        }*/
}