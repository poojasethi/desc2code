import java.io.*;
import java.util.*;
 class temp2{
	static node[] segment;
	static long[] a;
	public static void main(String[] args) throws Exception
	{
		InputReader in=new InputReader(System.in);
		PrintWriter pw=new PrintWriter(System.out);
		int n=in.nextInt();
		int m=in.nextInt();
		a=new long[n];
		segment=new node[4*n];
		for(int i=0;i<n;i++)
		{
			a[i]=in.nextLong();
		}
		initialize(0,0,n-1);
		for(int i=0;i<m;i++)
		{
			String s=in.readString();
			if(s.charAt(0)=='U')
			{
				int x=in.nextInt()-1;
				long y=in.nextLong();
				a[x]=y;
				updatepos(0,0,n-1,x,y);
			}
			else if(s.charAt(0)=='M')
			{
				int x=in.nextInt()-1;
				int y=in.nextInt()-1;
				node tt=query(0,0,n-1,x,y);
				pw.println(tt.max);
			}
			else if(s.charAt(0)=='D')
			{
				int x=in.nextInt()-1;
				int y=in.nextInt()-1;
				node tt=query(0,0,n-1,x,y);
				if(tt.dic)
				{
					pw.println(1);
				}
				else
				{
					pw.println(0);
				}
			}
			else if(s.charAt(0)=='S')
			{
				int x=in.nextInt()-1;
				int y=in.nextInt()-1;
				node tt=query(0,0,n-1,x,y);
				pw.println(tt.sum);
			}
			else
			{
				int x=in.nextInt()-1;
				int y=in.nextInt()-1;
				node tt=query(0,0,n-1,x,y);
				if(tt.lis)
				{
					pw.println(1);
				}
				else
				{
					pw.println(0);
				}
			}
			
		}
		pw.close();
	}
	public static void initialize(int c,int start,int end)
	{
		if(start==end)
		{
			segment[c]=new node(a[start],start,end);
			//System.out.println("start   "+start+" end"+end+" segmet is"+segment[c]);
			return;
		}
		int mid=(start+end)/2;
		initialize(2*c+1,start,mid);
		initialize(2*c+2,mid+1,end);
		segment[c]=merge(segment[2*c+1],segment[2*c+2]);
		//System.out.println("start   "+start+" end"+end+" segmet is"+segment[c]);
		
	}
	public static void updatepos(int c,int start,int end,int idx,long vv)
	{
		if(start==end)
		{
			segment[c].max=vv;
			segment[c].sum=vv;
		}
		else
		{
			int mid=(start+end)/2;
			if(idx<=mid)
			{
				updatepos(2*c+1,start,mid,idx,vv);
			}
			else
			{
				updatepos(2*c+2,mid+1,end,idx,vv);
			}
			segment[c]=merge(segment[2*c+1],segment[2*c+2]);
			
		}
	}
	public static node query(int c,int s,int e,int l,int r)
	{
		if(s==l && e==r)
		{
			return segment[c];
		}
		int m=(s+e)>>1;
		if(l<=m && r<=m)return query(2*c+1,s,m,l,r);
		if(l>m && r>m)return query(2*c+2,m+1,e,l,r);
		return merge(query(2*c+1,s,m,l,m),query(2*c+2,m+1,e,m+1,r));
	}
	public static node merge(node x,node y)
	{
		node temp=new node(0,x.l,y.r);
		temp.max=Math.max(x.max, y.max);
		if(!(x.lis && y.lis && a[x.r]<=a[y.l]))
		{
			temp.lis=false;
		}
		if(!(x.dic && y.dic &&a[x.r]>=a[y.l] ))
		{
			temp.dic=false;
		}
		temp.sum=x.sum+y.sum;
		return temp;
	}
	
	static class node
	{
		long max;
		long sum;
		boolean lis;
		boolean dic;
		int l;
		int r;
		public node(long x,int l,int r)
		{
			this.max=x;
			this.sum=x;
			this.lis=true;
			this.dic=true;
			this.l=l;
			this.r=r;
		}
	}
	
	
	
	
	
	 static class InputReader {
 
		private InputStream stream;
		private byte[] buf = new byte[8192];
		private int curChar;
		private int snumChars;
		private SpaceCharFilter filter;
 
		public InputReader(InputStream stream) {
			this.stream = stream;
		}
 
		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}
 
		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
 
			int res = 0;
 
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
 
			return res * sgn;
		}
		
		public long nextLong() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
 
			long res = 0;
 
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
 
			return res * sgn;
		}
		
		public String readString() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}
 
		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
 
		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
 
}