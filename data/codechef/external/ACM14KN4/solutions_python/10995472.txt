//You only fail when you stop trying...
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

ll arr[maxn];
struct st
{
	ll sum,maxi,last,first,inc,dec;
	st()
	{
		sum=last=first=inc=dec=0;
		maxi=-inf;
	}
}	tree[4*maxn];
void build(ll node,ll a,ll b)
{
	if(a==b)
	{
		tree[node].sum=arr[a];
		tree[node].maxi=arr[a];
		tree[node].first=arr[a];
		tree[node].last=arr[a];
		tree[node].inc=1;
		tree[node].dec=1;
		return;
	}
	ll mid=(a+b)/2;
	build(2*node,a,mid);
	build(2*node+1,mid+1,b);
	
	tree[node].sum=tree[2*node].sum+tree[2*node+1].sum;
	tree[node].maxi=max(tree[2*node].maxi,tree[2*node+1].maxi);
	if(tree[2*node].inc && tree[2*node+1].inc && tree[2*node].last<=tree[2*node+1].first)
	tree[node].inc=1;
	else
	tree[node].inc=0;
	if(tree[2*node].dec && tree[2*node+1].dec && tree[2*node].last>=tree[2*node+1].first)
	tree[node].dec=1;
	else
	tree[node].dec=0;
	tree[node].first=tree[2*node].first;
	tree[node].last=tree[2*node+1].last;
}	
void update(ll node,ll a,ll b,ll ind,ll val)
{
	if(a>b || a>ind || b<ind)
	return;
	if(a==b)
	{
		tree[node].sum=val;
		tree[node].maxi=val;
		tree[node].first=val;
		tree[node].last=val;
		tree[node].inc=1;
		tree[node].dec=1;
		return;
	}
	ll mid=(a+b)/2;
	if(ind<=mid)
	update(2*node,a,mid,ind,val);
	else
	update(2*node+1,mid+1,b,ind,val);
	tree[node].sum=tree[2*node].sum+tree[2*node+1].sum;
	tree[node].maxi=max(tree[2*node].maxi,tree[2*node+1].maxi);
	if(tree[2*node].inc && tree[2*node+1].inc && tree[2*node].last<=tree[2*node+1].first)
	tree[node].inc=1;
	else
	tree[node].inc=0;
	if(tree[2*node].dec && tree[2*node+1].dec && tree[2*node].last>=tree[2*node+1].first)
	tree[node].dec=1;
	else
	tree[node].dec=0;
	tree[node].first=tree[2*node].first;
	tree[node].last=tree[2*node+1].last;
}
struct st query(ll node,ll a,ll b,ll l,ll r)
{
	if(a>b || a>r || b<l)
	{
		struct st t;
		return t;
	}
	if(a>=l && b<=r)
	return tree[node];
	ll mid=(a+b)/2;
	struct st t1,t2;
	if(mid>=r)return query(2*node,a,mid,l,r);
	else if(l>mid)return query(2*node+1,mid+1,b,l,r);
	t1=query(2*node,a,mid,l,r);
	t2=query(2*node+1,mid+1,b,l,r);
	struct st t;
	t.sum=t1.sum+t2.sum;
	t.maxi=max(t1.maxi,t2.maxi);
	if(t1.inc && t2.inc && t1.last<=t2.first)
	t.inc=1;
	else
	t.inc=0;
	if(t1.dec && t2.dec && t1.last>=t2.first)
	t.dec=1;
	else
	t.dec=0;
	t.first=t1.first;
	t.last=t2.last;
	return t;
}
int main()
{
	boost1;boost2;	
	ll i,j,n,q,l,r,ind,val;
	char type;
	cin>>n>>q;
	for(i=1;i<=n;i++)
	cin>>arr[i];
	build(1,1,n);
	//cout<<tree[2].last<<endl;
	while(q--)
	{
		cin>>type;
		if(type=='U')
		{
			cin>>ind>>val;
			update(1,1,n,ind,val);
		}
		else if(type=='M')
		{
			cin>>l>>r;
			cout<<query(1,1,n,l,r).maxi<<endl;
		}
		else if(type=='S')
		{
			cin>>l>>r;
			cout<<query(1,1,n,l,r).sum<<endl;
		}
		else if(type=='I')
		{
			cin>>l>>r;
			cout<<query(1,1,n,l,r).inc<<endl;//<<" "<<query(1,1,n,l,r).maxi<<" "<<query(1,1,n,l,r).inc<<" "<<query(1,1,n,l,r).first<<" "<<query(1,1,n,l,r).last<<endl;
		}
		else
		{
			cin>>l>>r;
			cout<<query(1,1,n,l,r).dec<<endl;
		}
	}
	return 0;
}