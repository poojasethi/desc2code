#include<bits/stdc++.h>
#define MAX 262944
using namespace std;
struct node{
    long long sm, mx;
    bool in, de;
}seg[MAX];
long long arr[MAX];
int qs, qe;
void build(int i, int j, int ind){
    if(i == j){
        seg[ind].sm = arr[i];
        seg[ind].mx = arr[i];
        seg[ind].in = true;
        seg[ind].de = true;
        return;
    }
    int mid,l,r;
    mid = (i + j)>>1;
    l = ind <<1;
    r =l|1;
    build(i,mid,l);
    build(mid+1,j,r);
    seg[ind].sm = seg[l].sm + seg[r].sm;
    seg[ind].mx = max(seg[l].mx, seg[r].mx);
    if(seg[l].in && seg[r].in && (arr[mid] <= arr[mid + 1]))
        seg[ind].in = true;
    else
        seg[ind].in = false;
    if(seg[l].de && seg[r].de && (arr[mid] >= arr[mid + 1]))
        seg[ind].de = true;
    else
        seg[ind].de = false;
}
void update(int i, int j, int ind){
    if(i > qs || j < qs)
        return;
    if(i == j && i == qs){
        seg[ind].sm = arr[i];
        seg[ind].mx = arr[i];
        seg[ind].in = true;
        seg[ind].de = true;
        return;
    }
    int mid,l,r;
    mid = (i + j)>>1;
    l = ind <<1;
    r =l|1;
    update(i,mid,l);
    update(mid+1,j,r);
    seg[ind].sm = seg[l].sm + seg[r].sm;
    seg[ind].mx = max(seg[l].mx, seg[r].mx);
    if(seg[l].in && seg[r].in && (arr[mid] <= arr[mid + 1]))
        seg[ind].in = true;
    else
        seg[ind].in = false;
    if(seg[l].de && seg[r].de && (arr[mid] >= arr[mid + 1]))
        seg[ind].de = true;
    else
        seg[ind].de = false;
}

long long sum(int i, int j, int ind){
    if(i > qe || j < qs)
        return 0;
    if(i >= qs && j <= qe) return seg[ind].sm;
    int mid,l,r;
    mid = (i + j)>>1;
    l = ind <<1;
    r =l|1;
    return sum(i, mid, l) + sum(mid+1, j, r);
}

long long mx(int i, int j, int ind){
    if(i > qe || j < qs)
        return 0;
    if(i >= qs && j <= qe) return seg[ind].mx;
    int mid,l,r;
    mid = (i + j)>>1;
    l = ind <<1;
    r =l|1;
    return max(mx(i, mid, l),mx(mid+1, j, r));
}

bool inc(int i, int j, int ind){
    if(i > qe || j < qs)
        return true;
    if(i >= qs && j <= qe) return seg[ind].in;
    int mid,l,r;
    mid = (i + j)>>1;
    l = ind <<1;
    r =l|1;
    bool check = true;
    if(mid >=qs && (mid+1)<=qe && (arr[mid] > arr[mid + 1]))
        check = false;
    return (check && (inc(i, mid, l) && inc(mid+1, j, r)));
}

bool dec(int i, int j, int ind){
    if(i > qe || j < qs)
        return true;
    if(i >= qs && j <= qe) return seg[ind].de;
    int mid,l,r;
    mid = (i + j)>>1;
    l = ind <<1;
    r =l|1;
    bool check = true;
    if(mid >=qs && (mid+1)<=qe && (arr[mid] < arr[mid + 1]))
        check = false;
    return (check && (dec(i, mid, l) && dec(mid+1, j, r)));
}

int main()
{
    //cin.sync_with_stdio(false);
    int n, m, i;
    long long te;
    char ch[2],c;
    bool xx;
    scanf("%d%d", &n,&m);
    for(i = 1; i <= n;i++){
        scanf("%lld", &arr[i]);
    }
    build(1,n,1);
    while(m--){
        //cin>>c>>qs>>qe;
        scanf("%s%d%d", ch,&qs,&qe);
        if(*ch == 'U'){
            arr[qs] = qe;
            update(1,n,1);
        }
        else if(*ch == 'S'){
            te = sum(1,n,1);
            printf("%lld\n", te);
        }
        else if(*ch == 'M'){
            te = mx(1,n,1);
            printf("%lld\n", te);
        }
        else if(*ch == 'I'){
            xx = inc(1,n,1);
            if(xx)
                printf("1\n");
            else printf("0\n");
        }
        else if(*ch == 'D'){
            xx = dec(1,n,1);
            if(xx)
                printf("1\n");
            else printf("0\n");
        }
        else while(1);
    }
    return 0;
}
