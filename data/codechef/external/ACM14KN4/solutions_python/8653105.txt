#include <bits/stdc++.h>

using namespace std;

#define MAX 100005
#define ll long long

int arr[MAX];

struct Node {
	ll sum;
	int m;
	bool inc, dec;
}tree[4 * MAX];

Node getNode(ll a, int b, bool c, bool d){
	Node temp;
	temp.sum = a, temp.m = b, temp.inc = c, temp.dec = d;
	return temp;
}

void build(int node, int a, int b){
	if(a>b)
		return;

	if(a == b){
		tree[node] = getNode(arr[a], arr[a], true, true);
		return;
	}

	int left, right;
	left = 2 * node + 1, right = 2 * node + 2;

	build(left, a, (a+b)/2);
	build(right, (a+b)/2+1, b);

	tree[node].sum = tree[left].sum + tree[right].sum;
	//cout<<a<<" "<<b<<" : "<<tree[node].sum<<endl;
	tree[node].m = max(tree[left].m, tree[right].m);
	if(tree[left].inc && tree[right].inc && arr[(a+b)/2] <= arr[(a+b)/2+1])
		tree[node].inc = true;
	else
		tree[node].inc = false;
	if(tree[left].dec && tree[right].dec && arr[(a+b)/2] >= arr[(a+b)/2+1])
		tree[node].dec = true;
	else
		tree[node].dec = false;
}	

void update(int node, int a, int b, int i, int j, int val){
	if(a>b || a>j || b<i){
		return;
	}

	if(a == b){
		arr[a] = val;
		tree[node] = getNode(val, val, true, true);
		return;
	}

	int left, right;
	left = 2 * node + 1, right = 2 * node + 2;

	update(left, a, (a+b)/2, i, j, val);
	update(right, (a+b)/2+1, b, i, j, val);

	tree[node].sum = tree[left].sum + tree[right].sum;
	tree[node].m = max(tree[left].m, tree[right].m);
	if(tree[left].inc && tree[right].inc && arr[(a+b)/2] <= arr[(a+b)/2+1])
		tree[node].inc = true;
	else
		tree[node].inc = false;
	if(tree[left].dec && tree[right].dec && arr[(a+b)/2] >= arr[(a+b)/2+1])
		tree[node].dec = true;
	else
		tree[node].dec = false;
}

Node query(int node, int a, int b, int i, int j){
	if(a>b || a>j || b<i){
		return getNode(0, 0, true, true);
	}

	if(a>=i && b<=j){
		return tree[node];
	}

	int left, right, mid;
	left = 2 * node + 1, right = 2 * node + 2;

	Node c, d;
	mid = (a+b)/2;

	c = query(left, a, (a+b)/2, i, j);
	d = query(right, (a+b)/2+1, b, i, j);

	Node temp;
	temp.sum = c.sum + d.sum;
	temp.m = max(c.m, d.m);
	if(c.inc && d.inc && (arr[mid] <= arr[mid+1] || mid<i || mid>j || mid+1<i || mid+1>j))
		temp.inc = true;
	else
		temp.inc = false;
	if(c.dec && d.dec && (arr[mid] >= arr[mid+1] || mid<i || mid>j || mid+1<i || mid+1>j))
		temp.dec = true;
	else
		temp.dec = false;

	return temp;
}

int main(){
	int n, m;
	scanf("%d %d", &n, &m);

	for(int i=0 ; i<n ; i++)
		scanf("%d", &arr[i]);

	build(0, 0, n-1);

	for(int i=0 ; i<m ; i++){
		int x, y;
		char oper;
		getchar();
		scanf("%c %d %d", &oper, &x, &y);

		x--, y--;

		if(oper == 'U'){
			y++;
			update(0, 0, n-1, x, x, y);
		} else if(oper == 'M'){
			printf("%d\n", query(0, 0, n-1, x, y).m);
		} else if(oper == 'S'){
			printf("%lld\n", query(0, 0, n-1, x, y).sum);
		} else if(oper == 'I'){
			printf("%d\n", query(0, 0, n-1, x, y).inc);
		} else {
			printf("%d\n", query(0, 0, n-1, x, y).dec);
		}
	}

	return 0;
}