#include<bits/stdc++.h>
#define rep(i,x,y) for(i=x;i<y;i++)
#define rrep(i,x,y) for(i=x;i>=y;i--)
#define trv(y,x) for(typeof(x.begin())y=x.begin();y!=x.end();y++)
#define pb(f) push_back(f)
#define sc(a) scanf("%d",&a)
#define scl(a) scanf("%lld",&a)
#define pi(c) printf("%d\n",c)
#define pil(c) printf("%lld\n",c)
#define ll long long
#define scs(a) scanf("%s",a)
using namespace std;
ll a[123456];
//int max_size = 2*(int)pow(2, (int)(ceil(log2(n))));
	
struct node
{
	ll inc,dec,sum,maxsum;
};
node st[400007];
node makenode(ll inc,ll dec,ll sum,ll maxsum)
{
	node tmp;
	tmp.inc=inc;
	tmp.dec=dec;
	tmp.maxsum=maxsum;
	tmp.sum=sum;
	return tmp;
}
 
node jodo(node l,node r,int from,int to)
{
	node tmp;
	tmp.sum=l.sum+r.sum;
	tmp.maxsum=max(l.maxsum,r.maxsum);
	int mid=(from+to)/2;
	if(l.inc&&r.inc&&a[mid]<=a[mid+1]) tmp.inc=1;
	else tmp.inc=0;
	if(l.dec&&r.dec&&a[mid]>=a[mid+1]) tmp.dec=1;
	else tmp.dec=0;
	return tmp;
}
node ans(int index, int from, int to, int a, int b) {
    if (from == a && to == b) {
        return st[index];
    }
    int mid = (from+to)/2;
    if (b <= mid) {
        return ans((index<<1), from, mid, a, b);
    }
    if (a > mid) {
        return ans((index<<1) + 1, mid+1,to,a,b);
    }
    node l = ans((index<<1), from, mid, a, mid);
    node r = ans((index<<1) + 1, mid+1,to,mid+1,b);
    return jodo(l,r,from,to);
}
void update(int index,int from,int to,int i)
{
	if (from==to&&from==index)
	{
		st[i]=makenode(1,1,a[to],a[to]);
		return;
	}
	int mid=(from+to)/2;
	if (index <= mid) {
        update(index, from, mid,2*i);
    }
    else {
        update(index, mid+1,to,2*i+1);
    }
    st[i]=jodo(st[2*i],st[2*i+1],from,to);
}
 
node buildst(int ss,int se,int i)
{
	
	if(ss==se)
	{
		st[i]=makenode(1,1,a[ss],a[ss]);
		return st[i];
	}
	int mid=(ss+se)/2;
	node l=buildst(ss,mid,2*i);
	node r=buildst(mid+1,se,2*i+1);
	st[i]=jodo(l,r,ss,se);
	return st[i];
}
int main()
{
	int n;
	sc(n);
	
	int m;
	sc(m);
	int i;
	rep(i,1,n+1)
	{
		scl(a[i]);
	}
	
	buildst(1,n,1);
	
	while(m--)
	{
		int cas,x,y;
		char p[2];
		scs(p);
		sc(x);
		sc(y);
		if(p[0]=='U')
		//if(!cas)
		{
			a[x]=y;
			update(x,1,n,1);
		}
		else
		{
			node k=ans(1,1,n,x,y);
			if(p[0]=='I')
			printf("%lld\n",k.inc);//<<endl;
			if(p[0]=='D')
			printf("%lld\n",k.dec);//<<endl;
			if(p[0]=='S')
			printf("%lld\n",k.sum);//<<endl;
			if(p[0]=='M')
			printf("%lld\n",k.maxsum);//<<endl;
		}
	}
 
} 