# include<bits/stdc++.h>
using namespace std;

struct S{
	long long int sum;
	int maxi;
	bool inc;
	bool dec;
	int lastval;
	int firstval;
};
const int N = 1e5;  // limit for array size
int n,m;  // array size,quries
S t[2 * N];

void build() {  // build the tree
  for (int i = n - 1; i > 0; --i) 
  {
	  S a,b;
	  a = t[i<<1]; b = t[i<<1|1];
	  t[i].sum = a.sum + b.sum;
	  t[i].maxi = max(a.maxi , b.maxi);
	  t[i].lastval = b.lastval;
	  t[i].firstval = a.firstval;
	  t[i].inc = ((a.inc & b.inc)&&(a.lastval<=b.firstval))?true:false;
	  t[i].dec = ((a.dec & b.dec)&&(a.lastval>=b.firstval))?true:false;
  }
}

void modify(int p, int value) {  // set value at position p
	p += n;
	t[p].sum = value;
	t[p].maxi = value;
	t[p].lastval = value;
	t[p].firstval = value;
	t[p].inc = true;
	t[p].dec = true;
  for (; p > 1; p >>= 1)
  {
	  int p1 = p,p2 = p^1;
	  S a,b;
	  if(p1<p2) {a = t[p1]; b = t[p2];}
	  else {b = t[p1]; a = t[p2];}
	  t[p>>1].sum = a.sum + b.sum;
	  t[p>>1].maxi = max(a.maxi , b.maxi);
	  t[p>>1].lastval = b.lastval;
	  t[p>>1].firstval = a.firstval;
	  t[p>>1].inc = ((a.inc & b.inc)&&(a.lastval<=b.firstval))?true:false;
	  t[p>>1].dec = ((a.dec & b.dec)&&(a.lastval>=b.firstval))?true:false;
	  
  }
}


int queryM(int l, int r) {  // maxi on interval [l, r)
  int res = INT_MIN;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = max(t[l++].maxi,res);
    if (r&1) res = max(t[--r].maxi,res);
  }
  return res;
}

long long int queryS(int l, int r) {  // sum on interval [l, r)
  long long int res = 0;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res += t[l++].sum;
    if (r&1) res += t[--r].sum;
  }
  return res;
}

int queryI(int l, int r) {  // INC on interval [l, r)
  int resl = 1,resr = 1; int pl = INT_MIN,pr = INT_MAX;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1){S A = t[l++]; resl = ((A.inc & resl)&&(pl<=A.firstval));pl = A.lastval;}
    if (r&1){S A = t[--r]; resr = ((A.inc & resr)&&(pr>=A.lastval));pr = A.firstval;}
  }
  return ((resl&resr)&&(pl<=pr));
}

int queryD(int l, int r) {  // DEC on interval [l, r)
  int resl = 1,resr = 1; int pl = INT_MAX,pr = INT_MIN;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1){S A = t[l++]; resl = ((A.dec & resl)&&(pl>=A.firstval));pl = A.lastval;}
    if (r&1){S A = t[--r]; resr = ((A.dec & resr)&&(pr<=A.lastval));pr = A.firstval;}
  }
  return ((resl&resr)&&(pl>=pr));
}

int main() {
	int te;
  scanf("%d %d", &n,&m);
  for (int i = 0; i < n; ++i)
  { 
	  scanf("%d", &te);
	  t[n + i].sum = te;
	  t[n+i].maxi = te;
	  t[n + i].lastval = te;
	  t[n+i].firstval = te;
	  t[n+i].inc = true;
	  t[n+i].dec = true;
  }
  build();
  for (int i = 0; i < m; ++i)
  {
	  int l,r; char ch;
	  cin>>ch; scanf("%d %d", &l,&r);
	  if(ch=='U') modify(l-1,r);
	  else if(ch=='M') printf("%d\n", queryM(l-1, r));
	  else if(ch=='S') printf("%lld\n", queryS(l-1, r));
	  else if(ch=='I') printf("%d\n", queryI(l-1, r));
	  else if(ch=='D') printf("%d\n", queryD(l-1, r));
  }
  return 0;
}







