#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define N  100005
int a[N],n,m,x,y;
char c;

struct probs
{
	ll sum;
	int maxi;
	int l,h;
	bool i,d;
	probs()
	{
		i=d=0;
	}
}p[5*N];

void create(int k,int low ,int high)
{
	if(low==high)
	{
		p[k].sum=a[low];
		p[k].maxi=a[low];
		p[k].i=1;
		p[k].d=1;
		p[k].l=p[k].h=a[low];
		return;
	}
		int mid=(low+high)/2;
		create(2*k,low,mid);
		create(2*k+1,mid+1,high);
		p[k].sum=(p[2*k].sum+p[2*k+1].sum);
		p[k].maxi=max(p[2*k].maxi,p[2*k+1].maxi);
		if((p[2*k].i && p[2*k+1].i) && (p[2*k].h<=p[2*k+1].l))
		{
			p[k].i=1;
		}
		else
		p[k].i=0;
		
		if((p[2*k].d && p[2*k+1].d) && (p[2*k].h>=p[2*k+1].l))
		{
			p[k].d=1;
		}
		else
		p[k].d=0;
		
		p[k].l=p[2*k].l;
		p[k].h=p[2*k+1].h;
}

void update(int k,int low,int high,int id,int v)
{
	
	if(low>high || id>high || id<low) return;
	
	if(low==high && low==id)
	{
		p[k].sum=(ll)v;
		p[k].maxi=v;
		p[k].i=1;
		p[k].d=1;
		p[k].l=p[k].h=v;
		return;
	}
		int mid=(low+high)/2;
		update(2*k,low,mid,id,v);
		update(2*k+1,mid+1,high,id,v);
		
		p[k].sum=(p[2*k].sum+p[2*k+1].sum);
		p[k].maxi=max(p[2*k].maxi,p[2*k+1].maxi);
		
		if((p[2*k].i && p[2*k+1].i) && (p[2*k].h<=p[2*k+1].l))
		{
			p[k].i=1;
		}
		else
		p[k].i=0;
		
		if((p[2*k].d && p[2*k+1].d) && (p[2*k].h>=p[2*k+1].l))
		{
			p[k].d=1;
		}
		else
		p[k].d=0;
		
		p[k].l=p[2*k].l;
		p[k].h=p[2*k+1].h;
}

int qmax(int k,int lo,int hi,int qlo,int qhi)
{
	if(hi<qlo || lo>qhi || lo>hi)
	return 0;
	
	if(lo>=qlo && hi<=qhi)
	return p[k].maxi;
	
	int mid=(lo+hi)/2;
	int q1=qmax(2*k,lo,mid,qlo,qhi);
	int q2=qmax(2*k+1,mid+1,hi,qlo,qhi);
	return max(q1,q2);
}

ll qsum(int k,int lo,int hi,int qlo,int qhi)
{
	if(hi<qlo || lo>qhi || lo>hi)
	return 0;
	
	if(lo>=qlo && hi<=qhi)
	return p[k].sum;
	
	int mid=(lo+hi)/2;
	ll q1=qsum(2*k,lo,mid,qlo,qhi);
	ll q2=qsum(2*k+1,mid+1,hi,qlo,qhi);
	return q1+q2;
}

bool qi(int k,int lo,int hi,int qlo,int qhi)
{
	if(hi<qlo || lo>qhi || lo>hi)
	return 1;
	
	if(lo>=qlo && hi<=qhi)
	return p[k].i;
	
	int mid=(lo+hi)/2;
	bool q1=qi(2*k,lo,mid,qlo,qhi);
	bool q2=qi(2*k+1,mid+1,hi,qlo,qhi);
	if(qlo<=(lo+hi)/2&&(lo+hi)/2+1<=qhi)
		return (q1&&q2&&p[2*k].h<=p[2*k+1].l)?1:0;
	else
		return (q1&&q2)?1:0;
}

bool qd(int k,int lo,int hi,int qlo,int qhi)
{
	if(hi<qlo || lo>qhi || lo>hi)
	return 1;
	
	if(lo>=qlo && hi<=qhi)
	return p[k].d;
	
	int mid=(lo+hi)/2;
	bool q1=qd(2*k,lo,mid,qlo,qhi);
	bool q2=qd(2*k+1,mid+1,hi,qlo,qhi);
	if(qlo<=(lo+hi)/2&&(lo+hi)/2+1<=qhi)
		return (q1&&q2&&p[2*k].h>=p[2*k+1].l)?1:0;
	else
		return (q1&&q2)?1:0;
}

int main()
{
	ios_base::sync_with_stdio(0);
	scanf("%d %d",&n,&m);
	
	for(int i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
	}
	create(1,1,n);
	while(m--)
	{
		scanf(" %c",&c);
		scanf("%d%d",&x,&y);
		if(c=='M')
		printf("%d\n",qmax(1,1,n,x,y));
		if(c=='S')
		printf("%lld\n",qsum(1,1,n,x,y));
		if(c=='U')
		update(1,1,n,x,y);
		if(c=='I')
		printf("%d\n",qi(1,1,n,x,y));
		if(c=='D')
		printf("%d\n",qd(1,1,n,x,y));
	}
	
}