import java.io.*;
import java.util.*;
class acm14kn4 {
	static node[] segment;
	static int[] a;
	public static void main(String[] args) throws Exception
	{
		InputReader in=new InputReader(System.in);
		PrintWriter pw=new PrintWriter(System.out);
		int n=in.nextInt();
		int m=in.nextInt();
		a=new int[n];
		segment=new node[4*n];
		for(int i=0;i<n;i++)
		{
			a[i]=in.nextInt();
		}
		build(0,n-1,0);
		for(int i=0;i<m;i++)
		{
			String s=in.readString();
			char type=s.charAt(0);
			if(type=='U')
			{
				int x=in.nextInt()-1;
				int y=in.nextInt();
				a[x]=y;
				updatepos(0,0,n-1,x,y);
			}
			else 
			{
				int x=in.nextInt()-1;
				int y=in.nextInt()-1;
				node tt=query(0,0,n-1,x,y);
					if(type=='M')
				{
					pw.println(tt.max);
				}
				else if(type=='S')
				{
					pw.println(tt.sum);
				}
				else if(type=='I')
				{
					pw.println(tt.lis?1:0);
				}
				else
				{
					pw.println(tt.dic?1:0);
				}
			}
		
			
		}
		pw.close();
	}
	
	public static void build(int s,int e,int c){
		if(s == e){
			segment[c] = new node(a[s]);
			return;
		}
		int m = (s + e) >> 1;
		build(s,m,2*c+1);
		build(m+1,e,2*c+2);
		segment[c] = merge(segment[2*c+1],segment[2*c+2], m);
	}
	public static void updatepos(int c,int start,int end,int idx,int vv)
	{
		if(start==end)
		{
		segment[c]=new node(vv);
		}
		else
		{
			int mid=(start+end)>>1;
			if(idx<=mid)
			{
				updatepos(2*c+1,start,mid,idx,vv);
			}
			else
			{
				updatepos(2*c+2,mid+1,end,idx,vv);
			}
			segment[c]=merge(segment[2*c+1],segment[2*c+2],mid);
			
		}
	}
	public static node query(int c,int s,int e,int l,int r)
	{
		if(s==l && e==r)
		{
			return segment[c];
		}
		int m=(s+e)>>1;
		if(l<=m && r<=m)return query(2*c+1,s,m,l,r);
		if(l>m && r>m)return query(2*c+2,m+1,e,l,r);
		return merge(query(2*c+1,s,m,l,m),query(2*c+2,m+1,e,m+1,r),m);
	}

	
	public static node merge(node x,node y,int m){
		node ret = new node();
		ret.max = Math.max(x.max, y.max);
		ret.sum = x.sum + y.sum;
		ret.lis = x.lis && y.lis&& a[m] <= a[m+1];
		ret.dic = x.dic && y.dic && a[m] >= a[m+1];
		return ret;
	}
	/*public static node find(int s,int e,int c,int l,int r){
		if(s == l && e == r) return segment[c].copy();
		int m = (s + e) >> 1;
		if(l <= m && r <= m) return find(s,m,2*c+1,l,r);
		if(l >  m && r  > m) return find(m+1,e,2*c+2,l,r);
		return merge(find(s,m,2*c+1,l,m) , find(m+1,e,2*c+2,m+1,r), m);
	}*/
	
	static public class node
	{
		int max;
		long sum;
		boolean lis;
		boolean dic;
	
		public node(int x)
		{
			this.max=x;
			this.sum=x;
			this.lis=true;
			this.dic=true;
		}
		public node()
		{
			
		}
		public node copy(){
			node ret = new node();
			ret.max = max;
			ret.sum = sum;
			ret.lis = lis;
			ret.dic = dic;
			return ret;
		}
		
	}
	
	
	
	
	
	 static class InputReader {

		private InputStream stream;
		private byte[] buf = new byte[8192];
		private int curChar;
		private int snumChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}

			int res = 0;

			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));

			return res * sgn;
		}
		
		public long nextLong() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}

			long res = 0;

			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));

			return res * sgn;
		}
		
		public String readString() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}

}
