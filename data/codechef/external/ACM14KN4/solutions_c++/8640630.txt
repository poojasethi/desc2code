#include<bits/stdc++.h>
#define ll long long int
using namespace std;
ll arr[100005];
ll maxm(ll a,ll b)
{
    return (a>b)?a:b;
}
struct node
{
    ll mx,sum;
    bool isinc,isdec;
} tree[400005];
void build(int root,int a,int b)
{
    if(a==b)
    {
        tree[root].mx=arr[a];
        tree[root].sum=arr[a];
        tree[root].isinc=true;
        tree[root].isdec=true;
        return;
    }
    else{
    int m=(a+b)>>1;
    int left=(root<<1);
    int right=(root<<1)+1;
    build(left,a,m);
    build(right,m+1,b);
    tree[root].mx=maxm(tree[left].mx,tree[right].mx);
    tree[root].sum=tree[left].sum+tree[right].sum;
        tree[root].isinc=tree[left].isinc&&tree[right].isinc&&(arr[m]<=arr[m+1]);
        tree[root].isdec=tree[left].isdec&&tree[right].isdec&&(arr[m]>=arr[m+1]);
}
}
ll querymax(int root,int l,int r,int a,int b)
{
    if(b<l||a>r)
        return 0;
    if(l>=a&&r<=b)
    {
        return tree[root].mx;
    }
    int m=(l+r)>>1;
    int left=(root<<1);
    int right=(root<<1)+1;
    return maxm(querymax(left,l,m,a,b),querymax(right,m+1,r,a,b));
}
ll querysum(int root,int l,int r,int a,int b)
{
    if(b<l||a>r)
        return 0;
    if(l>=a&&r<=b)
    {
        return tree[root].sum;
    }
    int m=(l+r)>>1;
    int left=(root<<1);
    int right=(root<<1)+1;
    return querysum(left,l,m,a,b)+querysum(right,m+1,r,a,b);
}
void update(int root,int l,int r,int a)
{
    if(a<l||a>r)
        return ;
    if(l==r)
    {
        tree[root].mx=arr[l];
        tree[root].sum=arr[l];
        return;
    }
     int m=(l+r)>>1;
    int left=(root<<1);
    int right=(root<<1)+1;
    update(left,l,m,a);
    update(right,m+1,r,a);
    tree[root].mx=maxm(tree[left].mx,tree[right].mx);
    tree[root].sum=tree[left].sum+tree[right].sum;
    tree[root].isinc=tree[left].isinc&&tree[right].isinc&&(arr[m]<=arr[m+1]);
    tree[root].isdec=tree[left].isdec&&tree[right].isdec&&(arr[m]>=arr[m+1]);
}
bool queryinc(int root,int l,int r,int a,int b)
{
    if(b<l||a>r)
        return true;
    if(l>=a&&r<=b)
    {
        return tree[root].isinc;
    }
     int m=(l+r)>>1;
    int left=(root<<1);
    int right=(root<<1)+1;
    return queryinc(left,l,m,a,b)&&queryinc(right,m+1,r,a,b)&&((arr[m]<=arr[m+1])||m<a||m>b||(m+1)<a||(m+1)>b);
}
bool querydec(int root,int l,int r,int a,int b)
{
    if(b<l||a>r)
        return true;
    if(l>=a&&r<=b)
    {
        return tree[root].isdec;
    }
     int m=(l+r)>>1;
    int left=(root<<1);
    int right=(root<<1)+1;
    return querydec(left,l,m,a,b)&&querydec(right,m+1,r,a,b)&&((arr[m]>=arr[m+1])||m<a||m>b||(m+1)<a||(m+1)>b);
}
int main()
{
    ll n,m,x,y;
    char ch[2];
    scanf("%lld%lld",&n,&m);
    for(int i=1; i<=n; i++)
        scanf("%lld",&arr[i]);
    build(1,1,n);
    while(m--)
    {

        scanf("%s %lld%lld",ch,&x,&y);
        if(ch[0]=='U')
        {
              arr[x]=y;
            update(1,1,n,x);
        }
        else if(ch[0]=='M')
        {

            printf("%lld\n",querymax(1,1,n,x,y));
        }
        else if(ch[0]=='S')
        {

            printf("%lld\n",querysum(1,1,n,x,y));
        }
        else if(ch[0]=='I')
        {

            if(queryinc(1,1,n,x,y))
              printf("1\n");
              else
                printf("0\n");
        }
        else if(ch[0]=='D')
        {

            if(querydec(1,1,n,x,y))
               printf("1\n");
              else
                printf("0\n");
        }
    }
    return 0;
}
