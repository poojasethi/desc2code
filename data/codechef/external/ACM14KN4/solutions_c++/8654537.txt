#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define MAX 2000005

struct keep{
	ll maxa;
	ll sum;
	int inc;
	int dec;
};

keep tree[MAX];

ll arr[MAX];

ll max(ll a,ll b)
{
	return a > b ? a : b;
}


void build(int l,int r,int ind)
{
	if(l==r)
	{
		tree[ind].maxa=arr[l];
		tree[ind].sum=arr[l];
		tree[ind].inc=1;
		tree[ind].dec=1;
		return ;
	}
	int mid=(l+r)/2;
	build(l,mid,2*ind);
	build(mid+1,r,2*ind+1);

	tree[ind].maxa = max(tree[2*ind].maxa,tree[2*ind+1].maxa);

	tree[ind].sum =  tree[2*ind].sum + tree[2*ind+1].sum;

	tree[ind].inc = 0;
	tree[ind].dec = 0;

	if( tree[2*ind].inc == 1 and tree[2*ind+1].inc == 1 and arr[mid] <= arr[mid+1] )
	{
		tree[ind].inc=1;
	}
	if( tree[2*ind].dec == 1 and tree[2*ind+1].dec == 1 and arr[mid] >= arr[mid+1])
	{
		tree[ind].dec=1;
	}

	return;
}

long long query1(int l,int r,int ind,int s,int e,int type)
{
	if( l > e || s > r)
	{
		return -1;
	}
	if(  s <= l and r <= e)
	{
		if(type==0)return tree[ind].maxa;
		if(type==1)return tree[ind].sum;
		if(type==2)return tree[ind].inc;
		if(type==3)return tree[ind].dec;
	
	}

	int mid=(l+r)/2;
	ll a = query1(l,mid,2*ind,s,e,type);
	ll b = query1(mid+1,r,2*ind+1,s,e,type);


	if(type==0)return max(a,b);
	if(type==1 )
	{
		if(a == -1 and b == -1 )return 0;
		else if( a == -1 ) return b;
		else if( b == -1 ) return a;
		else return a+b;
	}
	if(type==2){
		if( a== -1 and b== -1) return 1;
		else if( a == -1) return b;
		else if (b == -1 )return a;
		if( a == 1 and b ==1 and arr[mid] <= arr[mid+1])
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	if(type==3){
		if( a== -1 and b== -1) return 1;
		else if( a == -1) return b;
		else if (b == -1 )return a;
		if( a == 1 and b ==1 and arr[mid] >= arr[mid+1])
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}

}


void update(int st,int l,int r,int ind,ll val)
{
	if(l==r)
	{
		tree[ind].maxa = val;
		tree[ind].sum = val;
		tree[ind].inc = 1;
		tree[ind].dec = 1;
		return;
	}
	int mid = (l+r)/2;
	if(st <= mid)
	{
		update(st,l,mid,2*ind,val);
	}
	else
	{
		update(st,mid+1,r,2*ind+1,val);
	}

	tree[ind].maxa = max(tree[2*ind].maxa,tree[2*ind+1].maxa);

	tree[ind].sum =  tree[2*ind].sum + tree[2*ind+1].sum;

	tree[ind].inc = 0;
	tree[ind].dec = 0;

	if( tree[2*ind].inc == 1 and tree[2*ind+1].inc == 1 and arr[mid] <= arr[mid+1] )
	{
		tree[ind].inc=1;
	}
	if( tree[2*ind].dec == 1 and tree[2*ind+1].dec == 1 and arr[mid] >= arr[mid+1])
	{
		tree[ind].dec=1;
	}

}

int main()
{
	int n,m;

	scanf("%d%d",&n,&m);

	for(int i=1;i<=n;i++)
	{
		scanf("%d",&arr[i]);
	}

	build(1,n,1);

	while(m-->0)
	{	char s;
		int k1;ll k2;
		cin>>s;
		scanf("%d%llu",&k1,&k2);
		ll ans=0;
		if(s == 'S')ans=query1(1,n,1,k1,k2,1);
		if(s == 'M')ans=query1(1,n,1,k1,k2,0);
		if(s == 'I')ans=query1(1,n,1,k1,k2,2);
		if(s == 'D')ans=query1(1,n,1,k1,k2,3);
		if(s == 'U'){  arr[k1]= k2 ; update(k1,1,n,1,k2); }

		if( s!= 'U')
		{
			printf("%llu\n",ans);
		}

	}
}