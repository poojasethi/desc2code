#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<ctime>
#include<assert.h>

#include<cmath>
#include<iostream>
#include<fstream>

#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>
#include<limits.h>

using namespace std;

#define MAX(a,b) ((a)>(b) ? (a) : (b))
#define MIN(a,b) ((a)<(b) ? (a) : (b))
#define EPS 1e-9
#define asdf exit(0);


typedef long long LL;
//typedef __int64 LL;







vector<int> adj[100010];
vector<int> order;
int is_bom[100010];
int vis[100010];

LL dp[100010];
int bom_sum[100010];
LL mod=1000000007;

queue<int> q;

void  bfs(int u)
{



    while(!q.empty()) q.pop();
    int i,v,f;

    vis[u]=1;
    q.push(u);

    order.push_back(u);


    while(!q.empty())
    {
        f=q.front();q.pop();
        for(i=0;i<adj[f].size();i++)
        {
            v=adj[f][i];
            if(vis[v]) continue;

            vis[v]=1;
            q.push(v);
            order.push_back(v);
        }
    }




}






void ini()
{
    memset(vis,0,sizeof(vis));
    memset(is_bom,0,sizeof(is_bom));

    int i;
    order.clear();
    for(i=0;i<100010;i++)
    {
        adj[i].clear();
    }
}







int main()
{
    //freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);

    int T,n,m,i,j,Kay,u,v;

    scanf("%d",&T);


    while(T--)
    {
        ini();
        scanf("%d",&n);

        for(i=0;i<n-1;i++)
        {
            scanf("%d %d",&u,&v);
            adj[u].push_back(v);
            adj[v].push_back(u);
        }


        scanf("%d",&Kay);


        j=1;
        for(i=0;i<Kay;i++)
        {
            scanf("%d",&j);
            is_bom[j]=1;
        }



        bfs(j);









        memset(vis,0,sizeof(vis));
        for(i=order.size()-1;i>=0;i--)
        {
            u=order[i];

            bom_sum[u]=is_bom[u];
            dp[u]=1;
            for(j=0;j<adj[u].size();j++)
            {
                v=adj[u][j];
                if(vis[v])
                {
                    bom_sum[u]+=bom_sum[v];

					if(!bom_sum[v])
					{
						dp[u]=(dp[u]*(dp[v]+1))%mod;
					}


				}

            }
			vis[u]=1;
        }







        LL ans=1;
        if(Kay)
        {

            for(i=1;i<=n;i++)
            {
                if(bom_sum[i])
                {
                    ans=(ans*dp[i])%mod;
                }
            }

        }
        else
        {
            ans=0;
            for(i=1;i<=n;i++)
            {
                ans=(ans+dp[i])%mod;
            }

        }
        printf("%lld\n",ans);





    }
    return 0;
}
