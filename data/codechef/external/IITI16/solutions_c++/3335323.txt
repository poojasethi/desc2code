/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

#define MAX 112345
#define MOD 1000000007

vector<int> g[MAX];
bool isThere[MAX];

int cnt[MAX];
void count(int whr,int par) {
    cnt[whr] = isThere[whr];
    F(i,0,g[whr].size()) {
        int next = g[whr][i];
        if ( next == par )
            continue;
        count(next,whr);
        cnt[whr] += cnt[next];
    }
}

#define pll pair<ill,ill>
pll allSubtree(int whr,int par) {
    // cout << whr << endl;
    pll res;
    res.fr = 0; res.se = 1;
    F(i,0,g[whr].size()) {
        int next = g[whr][i];
        if ( next == par )
            continue;
        pll tmp = allSubtree(next,whr);
        res.fr = (res.fr+tmp.fr) % MOD;
        res.se = (res.se*(tmp.se+1)) % MOD;
    }
    res.fr = (res.fr+res.se) % MOD;
    return res;
}

ill f(int whr,int par) {
    ill res = 1;
    F(i,0,g[whr].size()) {
        int next = g[whr][i];
        if ( next == par )
            continue;
        ill tmp = f(next,whr);
        if ( cnt[next] == 0 ) res = (res*(tmp+1)) % MOD;
        else res = (res*tmp) % MOD;
    }
    return res;
}

int main() {
    input();
    int t; S(t);
    while ( t-- ) {
        int n; S(n);
        F(i,0,n+5) { g[i].clear(); isThere[i] = 0; }
        F(i,1,n) {
            int a,b; S(a); S(b);
            g[a].pb(b); g[b].pb(a);
        }
        int m = 0; S(m);
        int r = -1;
        F(i,0,m) {
            int x; S(x);
            isThere[x] = 1;
            if ( r == -1 ) r = x;
        }
        if ( m == 0 ) {
            pll res = allSubtree(1,0);
            printf("%lld\n", res.fr);
        } else {
            count(r,0);
            printf("%lld\n", f(r,0));
        }
    }
    return 0;
}