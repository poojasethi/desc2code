#include <iostream>
#include <vector>
#include <map>

#define MOD 1000000007

using namespace std;

vector<long long> v[100005];
long long node[100005];
map<long long, long long> mm;

bool dfs(long long pos, long long pre)
{
    bool poss = false;
    if(mm[pos]) poss = true;
    for(long long i = 0; i < v[pos].size(); i++) {
        if(v[pos][i] != pre) {
            poss |= dfs(v[pos][i], pos);
        }
    }
    node[pos] = poss;
    return poss;
}

long long sum = 0;

long long dfs2(long long pos, long long pre)
{
        long long ans = 1LL;
        for(long long i = 0; i < v[pos].size(); i++) {
            if(v[pos][i] == pre || node[v[pos][i]]) continue;
            ans = (ans * (dfs2(v[pos][i], pos)+1LL))%MOD;
        }
        sum = (sum + ans)%MOD;
        return ans;
}

int main()
{
        long long t;
        ios_base::sync_with_stdio(false);
        cin >> t;
        while(t--) {
            sum = 0;
            long long n;
            mm.clear();
            cin >> n;
            for(long long i = 0; i <= n+5; i++) {
                v[i].clear();
                node[i] = 0;
            }
            long long x, y;
            for(long long i = 0; i < n-1; i++) {
                cin >> x >> y;
                v[x-1].push_back(y-1);
                v[y-1].push_back(x-1);
            }
            long long k;
            cin >> k;
            long long s[k];
            for(long long i = 0; i < k; i++) {
                    cin >> s[i];
                    s[i]--;
                    mm[s[i]] = 1;
            }

            if(k) {
                dfs(s[0], -1);
            }
            for(long long i = 0; i < n; i++) {
                if(!node[i])
                for(long long j = 0; j < v[i].size(); j++) {
                    if(node[v[i][j]]) {
                        v[i].push_back(n);
                        v[n].push_back(i);
                    }
                }
            }
            if(k) cout << dfs2(n, -1) << endl;
            else {
                dfs2(0, -1);
                cout << sum << endl;
            }
        }
}

/*
9
9
1 2
2 6
2 7
1 8
1 9
1 3
3 4
3 5
*/
