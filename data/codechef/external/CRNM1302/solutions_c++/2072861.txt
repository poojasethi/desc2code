#include<iostream>
#include<stdio.h>
#include<climits>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<map>
#include<vector>

using namespace std;
int arr[105][1005];
long long dp[105][1005];
int arrl[105][1005];
int arrr[105][1005];
long long dpf[105][1005];
int t,n,m,k;


/*int fun(int row,int num)
{

    if(dpf[row][num])
        return dpf[row][num];
    else if(num==0)
    {
        dpf[row][num]=0;
        return dpf[row][num];
    }
    else if(row==n)
    {
        return dp[row]
    }
    else
    {
        int minim=INT_MAX,temp;
        for(int i=0;(i<=m)&&(i<=num);i++)
        {
            temp=dp[row][i]+fun(row+1,num-i);
            if(minim>temp)
                minim=temp;
        }
        dpf[row][]
    }
}*/

int main()
{
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d%d",&n,&m,&k);
        for(int i=1; i<=n; i++)
        {
            arrl[i][0]=0;
            for(int j=1; j<=m; j++)
            {
                scanf("%d",&arr[i][j]);
                arrl[i][j]=arrl[i][j-1]+arr[i][j];
            }
        }
        for(int i=1; i<=n; i++)
        {
            arrr[i][0]=0;
            for(int j=1; j<=m; j++)
            {
                arrr[i][j]=arrr[i][j-1]+arr[i][m-j+1];
            }
            arr[i][0]=0;
            dp[i][0]=0;
            for(int j=1; j<=m; j++)
            {
                int minim=INT_MAX;
                int temp;
                for(int l=0; l<=j; l++)
                {
                    temp=arrl[i][l]+arrr[i][j-l];
                    if(minim>temp)
                        minim=temp;
                }
                dp[i][j]=minim;
            }
        }
        /*for(int i=1; i<=k; i++)
        {
            int minim=INT_MAX,ind;
            ind=0;
            int temp;
            for(int j=1; j<=n; j++)
            {
                if(counter[j]<=m)
                {
                    temp=(dp[j][counter[j]]-dp[j][counter[j]-1]);
                    if(minim>temp)
                    {
                        minim=temp;
                        ind=j;
                    }
                }
            }
            counter[ind]++;
            dpf[i]=dpf[i-1]+minim;
        }*/
        //printf("%d\n",dpf[k]);
        for(int i=0;(i<=k);i++)
        {
            if(i<=m)
                dpf[n][i]=dp[n][i];
            else
                dpf[n][i]=INT_MAX;
        }
        for(int i=n-1;i>=1;i--)
        {
            dpf[i][0]=0;
            for(int j=1;(j<=(k));j++)
            {
                long long minim=INT_MAX;
                long long temp;
                for(int l=0;(l<=j&&(l<=m));l++)
                {
                    temp=dpf[i+1][j-l]+dp[i][l];
                    if(minim>temp)
                        minim=temp;
                }
                dpf[i][j]=minim;
            }
        }
        printf("%lld\n",dpf[1][k]);
    }
    return 0;
}
