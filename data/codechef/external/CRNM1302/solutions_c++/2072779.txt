#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <queue>
#include <cstdio>
#include <set>
#include <map>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <cassert>
#include <limits.h>

typedef unsigned long long ULL;
typedef long long LL;

#define MIN(a,b) (a<b?a:b)
#define MAX(a,b) (a>b?a:b)
#define ABS(a) ((a>0)?a:-a)

#define SZ(a) ((int)a.size())
#define PB(a) push_back(a)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define REP(i,n) FOR(i,0,(int)(n-1))
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define printv(v) REP(i,SZ(v))printf("%d ",v[i]);
#define mp(a,b) make_pair(a,b)
#define PII pair<int,int>
#define MOD 1000000007
using namespace std;
LL grid[102][1002];
LL rowlsum[102][1002],rowrsum[102][1002],sum[102][1002],dp[102][1002];
int main()
{
    int t,n,m,k;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d %d %d",&n,&m,&k);
        for(int i=1;i<=n;i++)
        {
            scanf("%lld",&grid[i][1]);

            rowlsum[i][1]=grid[i][1];
            for(int j=2;j<=m;j++)
            {
                scanf("%lld",&grid[i][j]);
                rowlsum[i][j]=rowlsum[i][j-1]+grid[i][j];
            }

            rowrsum[i][m]=grid[i][m];
            for(int j=m-1;j>=1;j--)
            {
                rowrsum[i][j]=rowrsum[i][j+1]+grid[i][j];
            }
        }

        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=max(m,k);j++)
            {
                sum[i][j]=INT_MAX;
            }
        }
        for(int i=1;i<=n;i++)
        {
            rowlsum[i][0]=0;
            rowrsum[i][m+1]=0;
            for(int x=0;x<=min(m,k);x++)
            {
                for(int j=0;j<=x;j++)
                {
                    if(x==0)
                    {
                        sum[i][x]=0;
                    }
                    else
                    {
                        sum[i][x]=min(sum[i][x],rowlsum[i][j]+rowrsum[i][m-x+1+j]);
                    }
                }
            }
        }

        for(int i=n;i>=1;i--)
        {
            for(int j=0;j<=k;j++)
            {
                dp[i][j]=INT_MAX;
                for(int taken=0;taken<=min(j,m);taken++)
                {
                    if(i==n)
                    {
                        dp[i][j]=sum[i][j];
                    }
                    else
                    {
                        dp[i][j]=min(dp[i][j],sum[i][taken]+dp[i+1][j-taken]);
                    }
                }
            }
        }


        cout<<dp[1][k]<<"\n";
    }
    return 0;
}
