 
Problem description.
Garg in recent past has seen a lot of nightmares – basically Numerical Nightmares.
 The evil entity in his dreams seemed to show Garg a particular function as follows :-

int troll(N)
{
	r=0
	for (i = 1 ,i<=N ,i++)
	{
      		if N%i==0
         	     r += foo(i)
	}
	return r
}


int foo(N)
{
    r = 0
    for (i = 1 ,i<=N ,i++)
    {
       if gcd(N,i) == 1
             r++
    }
    return r
}


Here gcd(a,b) denotes Greatest Common Divisor between a and b.
Garg woke up all on a sudden. He eventually realised that troll(N) will only lead him to his ultimate goal.


Now, he has N gems with each gem having power denoted by troll(i) where 1<=i<=N.
Now Garg decided to multiply the powers of all the N gems. Let this value be M.


Garg chooses any particular prime factor of M and removes it. He keeps on doing it unless there are no prime factors of M left. The number of such removal operations is the secret number which will lead him to his ultimate goal.


Input
First line contains T- the number of test cases.
Thereafter , T lines follow .
Each line contains a number N – the number of gems


Output
For each test case , print the number of removal operations as mentioned above .
 

Constraints

1 ≤ T ≤ 25*10^5
1 ≤ N ≤ 3*10^7

 

Example
Input:
1
6
Output:
7
