#include <bits/stdc++.h>
 
typedef long long ll;
 
using namespace std;
 
int sum[7] = {1, 2, 4, 8, 16, 32, 64};
double dp[10][205], g[10][205][205];
ll c[205][205];
 
int main()
{
	ios_base::sync_with_stdio(false);
 
	for (int i = 0; i <= 64; i++)
		c[i][0] = 1;
	for (int i = 1; i <= 64; i++)
		for (int j = 1; j <= 64; j++)
			c[i][j] = c[i-1][j] + c[i-1][j-1];
	for (int i = 1; i < 7; i++)
		for (int k = 0; k <= sum[i]; k++)
			for (int l = max(0, k - sum[i-1]); l <= min(sum[i-1], k); l++)
				g[i][k][l] = 1.0 * c[sum[i-1]][l] / c[sum[i]][k] * c[sum[i-1]][k-l];
 
	int t;
	cin >> t;
	while (t--)
	{
		int n, m;
		double p;
		cin >> m >> n >> p;
		int ib = 0;
		while ((1 << ib) < n+m) ib++;
		dp[0][0] = 0;
		dp[0][1] = 1;
		for (int i = 1; i <= ib; i++)
			for (int in = 0; in <= sum[i]; in++)
			{
				dp[i][in] = 0;
				for (int il = max(0, in-sum[i-1]); il <= min(sum[i-1], in); il++)
				{
					double L = dp[i-1][il], R = dp[i-1][in-il];
					dp[i][in] += g[i][in][il] * (L*R + (L*(1-R) + (1-L)*R)*p);
				}
			}
		cout << setprecision(10) << fixed << dp[ib][n] << endl;
	}
    return 0;
}