#include<bits/stdc++.h>
#define ll long long
#define MOD 1000000007
using namespace std;

ll n,m,ans,t;
ll root[2005],siz[2005];
map<ll,pair<ll,ll> > mp;

ll mod_pow(ll expo)
{
    ll res=1;
    ll base=26;
    while(expo)
    {
        if(expo%2!=0)
            res=(res*base)%MOD;
        expo/=2;
        base=(base*base)%MOD;
    }
    return res;
}

void init()
{
    for(ll i=1;i<=n;i++)
    {
        root[i]=i;
        siz[i]=1;
    }
}

ll rt(ll i)  // Path Compression
{
    while(root[i]!=i)
    {
        root[i]=root[root[i]];
        i=root[i];
    }
    return i;
}

void Union(ll src,ll dest) // Weighted Union
{
    ll root_src=rt(src);
    ll root_dest=rt(dest);
    if(root_src==root_dest)
        return;
    if(siz[root_src] < siz[root_dest])
    {
        root[root_src]=root[root_dest];
        siz[root_dest]+=siz[root_src];
    }
    else
    {
        root[root_dest]=root[root_src];
        siz[root_src]+=siz[root_dest];
    }
    ans--;
}

int main(void)
{
    scanf("%lld",&t);
    while(t--)
    {
        scanf("%lld %lld",&n,&m);
        init();
        ll l,r;
        ans=n;
        mp.clear();
        for(ll i=0;i<m;i++)
        {
            scanf("%lld %lld",&l,&r);
            if(ans==1)
                continue;
            ll mid=(l+r)/2;
            if(mid*2!=(l+r))
            {
                ll lt=l;
                ll rt=r;

                while(lt<rt)
                {
                    Union(lt,rt);
                    lt++;
                    rt--;
                }
            }
            else
            {

            if((mp[mid].second-mp[mid].first)<(r-l))
            {
                mp[mid].first=l;
                mp[mid].second=r;
            }
            }
        }
        for(map<ll,pair<ll,ll> > :: iterator it=mp.begin();it!=mp.end();it++)
        {
            ll lt=it->second.first;
            int rt=it->second.second;
            if(ans==1)
                    break;
            while(lt<rt)
            {

                Union(lt,rt);
                lt++;
                rt--;
            }
        }
        /*for(ll i=1;i<=n;i++)
        {
            if(root[i]==i)
                ans++;
        }*/
        printf("%lld\n",mod_pow(ans)%MOD);
    }
    return 0;
}
