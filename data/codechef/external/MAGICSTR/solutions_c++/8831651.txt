#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,ii ) for( typeof(gg.begin()) ii=gg.begin();ii!=gg.end();ii++)
#define	mp make_pair
#define	pb push_back
#define	X first
#define	Y second
#define sz(a) int((a).size())
#define N 2010
#define mod 1000000007
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
const ll INF = 1e18+1;
 
inline ll input(void)
{
	char t;
	ll x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
    while(t>=48 && t<=57)
    {
        x=(x<<3)+(x<<1)+t-48;
        t=getchar();
    }
	if(neg)
		x=-x;
	return x;
}
 
inline void output(ll x)
{
	char a[20];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}
 
int p[2*N],ranker[2*N],numsets;
ll clen[2*N];
 
void create(int x)
{
	p[x]=x;
	ranker[x]=1;
}
 
int findset(int x)
{
	if (x != p[x]) p[x] = findset(p[x]);
	return p[x];
}
 
void merge(int x,int y)
{
	int px=findset(x),py=findset(y);
	if(px==py) return;
	//output(x);
	//output(y);
	numsets--;
	if(ranker[px]>ranker[py])
	{
		p[py]=px;
		ranker[px]=ranker[px]+ranker[py];
	}
	else
	{
		p[px]=py;
		ranker[py]=ranker[py]+ranker[px];
	}
}
 
ll power(ll a, ll b, ll m)
{
	ll ans=1;
	while(b)
	{
		if (b%2) ans*=a;
		b/=2;
		a*=a;
		if (a>=m) a%=m;
		if (ans>=m) ans%=m;
	}
	return ans;
}
 
int main()
{
	ll t,n,m,l,r,centre,len;
	t=input();
	while(t--)
	{
		FILL(clen,0);
		n=input();
		m=input();
		numsets=n;
		REP(i,2*n-1) create(i);
		while(m--)
		{
			l=input();
			r=input();
			l--;
			r--;
			l=2*l;
			r=2*r;
			centre=(l+r)/2;
			len=(r-l)/2;
			clen[centre]=max(len,clen[centre]);
		}
		REP(i,2*n-1)
		{
			for(int j=i%2;j<=clen[i];j+=2)
				merge(i-j,i+j);
		}
		output(power(26,numsets,mod));
	}
return 0;
}