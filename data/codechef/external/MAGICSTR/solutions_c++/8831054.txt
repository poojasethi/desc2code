
#include<bits/stdc++.h>
#define all(x) x.begin(), x.end()
#define pb(x) push_back(x)
#define cout2(x, y) cout << x << " " << y << endl
#define N 2005
#define MOD 1000000007

using namespace std;

int oddPal[N], evenPal[N];

int P[N];
bool vis[N];

int Find(int x){
	
	if(x == P[x])return x;
	return P[x] = Find(P[x]);	
}

void Union(int x, int y){
	
	x = Find(x);
	y = Find(y);
	P[x] = y;	
}

int main(){

	int tc = 0;
	scanf("%d", &tc);
	
	while(tc--){
		
		int n, m;
		scanf("%d%d", &n, &m);	
		
		for(int i = 0; i <= n; i++){
			
			oddPal[i] = evenPal[i] = 0;
			P[i] = i;
			vis[i] = false;
		}
			
		int l, r;
		for(int i = 0; i < m; i++){
			
			scanf("%d%d", &l, &r);
			l--, r--;
			
			if((r - l + 1)&1)oddPal[(r + l)>>1] = max(oddPal[(r + l)>>1], r);	
			else evenPal[(r + l)>>1] = max(evenPal[(r + l)>>1], r);
			
		}
		
		for(int i = 0; i < n; i++){
			for(int j = i, len, c; j < n; j++){
				
				len = (j - i + 1);
				c = ((i + j)>>1);
				
				if((len&1) && oddPal[c] >= j)Union(i, j);
				else if((len&1) == 0 && evenPal[c] >= j)Union(i, j);	
			}
		}
		
		long long ans = 1;
		for(int i = 0; i < n; i++){
			
			if(vis[Find(i)])continue;	
			vis[Find(i)] = true;
			
			ans = ans * 26;
			if(ans >= MOD)ans %= MOD;
		}

		printf("%lld\n", ans);
	}


}
