// #include<abhi.944>

#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;

#ifndef ONLINE_JUDGE
	#define TRACE
#endif

const long double PI=3.1415926535897932384626;
const ll MAX=1000000000+7;
const int INF = 0x3f3f3f3f;

#define ps printf(" ")
#define pn printf("\n")
#define sc(n) scanf("%d",&n)
#define pf(n) printf("%lld",n)
#define forall(it, x) for(__typeof((x).begin()) it=(x).begin();it!=(x).end();it++)
#define sz size()
#define ff first
#define ss second
#define pb push_back //pop_back
#define mp make_pair
#define fill(a,val) memset(a,val,sizeof(a))

#ifdef TRACE
    #define trace(x)            cerr<<"ERROR---->"<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
#endif

int a[2005];
int Rank[2005];
int c;

template <class T> inline T bigmod(T p,T e,T M){ll ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p) % M;p = (p * p) % M;}return (T)ret;}

int assign(int m)                     //path-compression included :D
{
    if(a[m]==m) return m;
    else return a[m]=assign(a[m]);
}

void Union_find(int x,int y)					// Union-find
{
	c--;							// gives no of components
	int xroot=assign(x);
	int yroot=assign(y);

	if(Rank[xroot] < Rank[yroot])
		a[xroot]=yroot;
	else if(Rank[xroot] > Rank[yroot])
		a[yroot]=xroot;
	else {
		Rank[xroot]++;
		a[yroot]=xroot;																
    }
}

void give_values(int n) {

	c=n;
	for (int i = 0; i < n+3; ++i)
    	{
        	a[i]=i;
            Rank[i]=0;
    	}
}

void union_find(int L,int R) {
    int p1=L,p2=R;
    while(p1<=p2) {
        int g = assign(p1);
        int h = assign(p2);
        if(g!=h) {
		Union_find(g,h);
	}
        p1++;
        p2--;
    }
}

int main(int argc, char const *argv[])
{
    int t;
    sc(t);
    while(t--) {
        int n,m;
        sc(n); sc(m);

        give_values(n);

        for (int i = 0; i < m; ++i)
        {
            int L,R;
            sc(L); sc(R);
            L--; R--;
            if(c==1) continue;
            union_find(L,R);
        }

        ll pro;
	pro = bigmod((ll)(26),(ll)c,(ll)MAX);	
       pf(pro); pn;
    }
    return 0;
}
