#include <bits/stdc++.h>
using namespace std;

int graph[251][251];

bool bpm(int h,int g,int u,int seen[],int match[])
{
    int i;
    for(i=0;i<g;i++)
    {
        if(graph[u][i]&&!seen[i])
        {
            seen[i]=1;
            if(match[i]<0||bpm(h,g,match[i],seen,match))
            {
               match[i]=u;
               return true;
            }
        }
    }
    return false;
}


int maxbpm(int h,int g)
{
     int match[g],i,j,cnt,seen[g];
     for(i=0;i<g;i++) match[i]=-1;
     cnt=0;
     for(i=0;i<h;i++)
     {
         for(j=0;j<g;j++) seen[j]=0;
         if(bpm(h,g,i,seen,match))
         cnt++;
     }
     return cnt;
}

int main()
{
    int t,l;
    cin>>t;
    for(l=1;l<=t;l++)
    {
       int h,g,k,c,i,j,n,m,p,q,r,s,sum;
       vector< pair<int,int> > host,guest;
       vector<int> dist;
       cin>>h>>g>>k>>c;
       for(i=0;i<h;i++) for(j=0;j<g;j++) graph[i][j]=0;
       for(i=0;i<h;i++)
       {
           cin>>n>>m;
           host.push_back(make_pair(n,m));
       }
       for(i=0;i<g;i++)
       {
           cin>>n>>m;
           guest.push_back(make_pair(n,m));
           dist.push_back(abs(k-n)+abs(k-m));
       }
       for(i=0;i<h;i++)
       {
           p=host[i].first;
           q=host[i].second;
           for(j=0;j<g;j++)
           {
               r=guest[j].first;
               s=guest[j].second;
               sum=dist[j]+abs(p-r)+abs(q-s);
               if(sum<=c) graph[i][j]=1;
           }
       }
       cout<<"Case "<<l<<": "<<maxbpm(h,g)<<endl;
    }
    return 0;
}
