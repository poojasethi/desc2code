#include<bits/stdc++.h>
using namespace std;
struct host
{
    int x;
    int y;
};
struct guest
{
    int x;
    int y;
    int dist;
};

bool other(int j,int mark[],int **graph,int p,int q)
{
    int i=mark[j];
    for(int k=0;k<q;k++)
    {
        if(k==j)
        {
            continue;
        }
        if(graph[i][k]==1)
        {
            if(mark[k]=-1)
            {
                mark[k]=i;
                return true;
            }
            else
            {
                if(other(k,mark,graph,p,q))
                {
                    mark[k]=i;
                    return true;
                }
            }
        }
    }
    return false;
}

int max_match(int **graph,int p,int q)
{
    int ans=0;
    int mark[q];
    memset(mark,-1,sizeof(mark));
    for(int i=0;i<p;i++)
    {
        for(int j=0;j<q;j++)
        {
            if(graph[i][j]==1)
            {
                if(mark[j]==-1)
                {
                    mark[j]=i;
                    ans++;
                    break;
                }
                else
                {
                    if(other(j,mark,graph,p,q))
                    {
                        mark[j]=i;
                        ans++;
                        break;
                    }
                }
            }
        }
    }
    return ans;
}

int main()
{
    int t;
    cin>>t;
    for(int z=1;z<=t;z++)
    {
        int p,q,k,c;
        cin>>p>>q>>k>>c;
        host h[p];
        guest g[q];
        for(int i=0;i<p;i++)
        {
            cin>>h[i].x>>h[i].y;
        }
        for(int i=0;i<q;i++)
        {
            cin>>g[i].x>>g[i].y;
            g[i].dist=(abs(k-g[i].x)+abs(k-g[i].y));

        }
        int **graph;
        graph=new int* [p];
        for(int i=0;i<p;i++)
        {
            graph[i]=new int [q];
        }
        for(int i=0;i<p;i++)
        {
            for(int j=0;j<q;j++)
            {
                if(abs(h[i].x-g[j].x)+abs(h[i].y-g[j].y)+g[j].dist<=c)
                {
                    graph[i][j]=1;
                }
                else
                {
                    graph[i][j]=0;
                }
            }
        }

        cout<<"Case "<<z<<":"<<" "<<max_match(graph,p,q)<<endl;



    }
}
