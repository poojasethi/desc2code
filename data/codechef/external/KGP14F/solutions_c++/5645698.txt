#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define fr first
#define se second

/* Relevant code begins here */

int g, h, k;
ill c;
int visited[255];
int matchR[255];
int arr[255][255];

pii hosts[255], guests[255];

int bpm(int u)
{
	int v;
    	F(v, 0, g) {
		if (arr[u][v] && !visited[v]) {
			visited[v] = 1;
			if (matchR[v] < 0 || bpm(matchR[v])) {
				matchR[v] = u;
				return 1;
			}
		}
	}
	return 0;
}
 
int maxBPM()
{
	M(matchR, -1);
	
	int result = 0, u;
	F(u, 0, h) {
		M(visited, 0);
		if (bpm(u)) result++;
	}
	return result;
}

int main()
{
	int t, cases = 0, i, j, ans;
	S(t);
	while (t--) {
		ans = 0;
		M(arr, 0);
		S(h), S(g), S(k), Sl(c);
		
		F(i, 0, h) {
			S(hosts[i].fr), S(hosts[i].se);
		}
		F(i, 0, g) {
			S(guests[i].fr), S(guests[i].se);
		}
		F(i, 0, h) {
			F(j, 0, g) {
				ill dist = abs(hosts[i].fr - guests[j].fr) + abs(hosts[i].se - guests[j].se) + abs(k - guests[j].fr) + abs(k - guests[j].se);
				if (dist <= c) arr[i][j] = 1;
			}
		}
		ans = maxBPM();
		printf("Case %d: %d\n", ++cases, ans);
	}
	return 0;
}