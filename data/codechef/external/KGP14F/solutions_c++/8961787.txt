#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define pb push_back
#define ft first
#define se second
#define mp make_pair
vector<int> adj[501];
bool marked[501][501];
int m, n;
bool visit[501], mark[501];
bool dfs(int rt) {
	if (visit[rt]) return 0;
	visit[rt] = 1;
	if (rt >= m) {
		if (!mark[rt]) {
			mark[rt] = 1;
			return 1;
		} else {
			for (int i = 0; i < adj[rt].size(); ++i) {
				if (marked[rt][adj[rt][i]] && dfs(adj[rt][i])) {
					marked[rt][adj[rt][i]] = 0;
					marked[adj[rt][i]][rt] = 0;
					mark[rt] = 1;
					return 1;
				}
			}
			return 0;
		}
	} else {
		for (int i = 0; i < adj[rt].size(); ++i) {
			if (!marked[rt][adj[rt][i]] && dfs(adj[rt][i])) {
				marked[rt][adj[rt][i]] = 1;
				marked[adj[rt][i]][rt] = 1;
				mark[rt] = 1;
				return 1;
			}
		}
		return 0;
	}
}
int findmax() {
	bool found = 1;
	while (found) {
		found = 0;
		memset(visit, 0, sizeof visit);
		for (int i = 0; i < m; ++i) {
			if (!mark[i] && dfs(i)) {
				found = 1;
				break;
			} 
		}
	}
	int cnt = 0;
	for (int i = 0; i < m; ++i) if (mark[i]) cnt++;
	return cnt;
}
int main(int argc, char const *argv[]) {
    int t;
    scanf("%d", &t);
    pair<int, int> lt[251], rt[251];
	int ri8[251];
    for (int test = 1; test <= t; ++test) {
    	int k, c;
    	memset(marked, 0, sizeof marked);
    	memset(mark, 0, sizeof mark);
    	scanf("%d%d%d%d", &m, &n, &k, &c);
    	for (int i = 0; i < m; ++i) scanf("%d%d", &lt[i].ft, &lt[i].se);
    	for (int i = 0; i < n; ++i) 
    		scanf("%d%d", &rt[i].ft, &rt[i].se), ri8[i] = abs(k - rt[i].ft) + abs(k - rt[i].se);
    	for (int i = 0; i < m; ++i) {
    		for(int j = 0; j < n; ++j) {  
    			if (abs(lt[i].ft - rt[j].ft) + abs(lt[i].se - rt[j].se) + ri8[j] <= c) {
    				adj[i].pb(j + m), adj[j + m].pb(i);	
    			}
    		}
    	}
    	printf("Case %d: %d\n", test, findmax());
    	for (int i = 0; i < m + n; ++i) if (adj[i].size()) adj[i].clear();
    }
	return 0;
}