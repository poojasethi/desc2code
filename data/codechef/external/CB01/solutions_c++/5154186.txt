#include<bits/stdc++.h>
#define pb push_back
#define inf 99999999
#define mp make_pair
#define Vector vector<int>
#define Vov vector<vector<int> >
#define ll long long
#define fs first
#define sd second
#define pf(n) printf("%d\n",n)
#define FILL(a,val) memset(a,val,sizeof(val))
#define Min(a,b) (a < b) ? a:b
#define Max(a,b) (a > b) ? a:b
#define sn(n) scanf("%d",&n)
#define ss(s) scanf("%s",s)
#define Swap(a,b) (a = b+a-(b=a))
#define FOR(i,a,b) for(i=a;i<b;i++)
#define FORE(i,a,b) for(i=a;i <= b;i++)
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)
#define mod 1009
using namespace std;
int gcd(int a,int b){
	return (!b) ? a:gcd(b,a%b);
}
int cmp(const void *a, const void *b) {
	return (*(int*)a-*(int*)b);
}
// qsort(a,n,sizeof(int),cmp);
vector<vector<int> >graph(10000);
void inp_graph(){
	int n,m,src,des,i;
	sn(n);sn(m);
	FOR(i,0,m){
		sn(src);sn(des);
		graph[src].pb(des);
	}
}
ll n,k;
ll fact[1010],multi_inverse[1010];
long long modexpo(long long a,long long b)
{
	//calculates a ^ b mod n
    long long d=1;
    while(b)
    {
        if(b%2){
            d=(d*a)%mod;
		}
        //b = b/2;
        a=(a*a)%mod;
        //cout << a << " " << b << endl;
        b >>= 1; // Right shift
		//printf("%d-%d-%d\n",a,d,b);
    }
    return d;
}
void precompute(){
	int i,var = 1;
	ll tmp = 1;
	fact[0] = 1;
	multi_inverse[0] = 1;
	FORE(i,1,1009){
		var *= i;
		var %= 1009;
		fact[i]= var;
		
		tmp *= modexpo(i,1007);
		tmp %= 1009;
		multi_inverse[i] = tmp;
	}
}
int main(){
	int t;
	sn(t);
	precompute();
	while(t--){
		int res = 1;
		cin >> n >> k;	
		while(n){
			int N= n%mod;
			int K = k%mod;
			if(N < K){
				res = 0;
				break;
			}
			res *= (fact[N]*multi_inverse[K]*multi_inverse[N-K]) % mod;
			res %= 1009;
			n /= 1009;
			k /= 1009;
		}
		cout << res << endl;
	}
	return 0;
}
