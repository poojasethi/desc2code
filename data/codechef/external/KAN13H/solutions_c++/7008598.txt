#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <list>
#include <stack>
#include <bitset>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <deque>
#include <ctime>
#include<fstream>
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define ss(n) scanf("%s",n)
#define s2(a,b) scanf("%d%d",&a,&b)
#define SET(p)      memset(p,-1,sizeof(p))
#define CLR(p)      memset(p,0,sizeof(p))
#define vi vector<int>
#define ii pair<int,int>
#define pb push_backs
#define mp make_pair
#define F first
#define S second
#define LL long long
#define ULL unsigned long long
#define R freopen("in","r",stdin)
#define W freopen("out","w",stdout)
using namespace std;
LL dp[55][55];
int dno[55][55];
LL dans[55][55][55];
LL fun(int n,int p);
int no(int n,int p)
{
    //cout<<n<<" "<<p<<endl;
	if(n<=1)return 0;
	if(p==3)return n-1;
	if(dno[n][p]!=-1)return dno[n][p];
	LL ans=LLONG_MAX;
	int in=0;
	for(int i=1;i<n;i++)
	{
		if(ans>2*fun(i,p)+fun(n-i,p-1))
		{
			in=i;
            ans=2*fun(i,p)+fun(n-i,p-1);
		}
	}
	return dno[n][p]=in;
}
LL fun(int n,int p)
{
    //cout<<n<<" "<<p<<endl;
    if(dp[n][p]!=-1)return dp[n][p];
	if(n==0)return 0;
	if(n==1)return 1;
	
	if(p==3)
	{
		return dp[n][p]=2*fun(n-1,3)+1;
	}
	int i=no(n,p);
	return dp[n][p]=2*fun(i,p)+fun(n-i,p-1);
}
LL ans(int n,int p,int k)
{
    //cout<<n<<" "<<p<<" "<<k<<endl;
    if(dans[n][p][k]!=-1)return dans[n][p][k];
    int in=no(n,p);
    if(in==0)return 1;
    LL A=0;
    if(in>=k)
    {
        A=fun(in,p);
        A+=fun(n-in,p-1);
        A+=ans(in,p,k);
    }
    else
    {
        A=fun(in,p);
        A+=ans(n-in,p-1,k-in);
    }
    return dans[n][p][k]=A;
}
int main()
{
 
   // R;W;
    SET(dno);
    SET(dp);
    SET(dans);
    int t,cc=0;cin>>t;
    
    while(t--)
    {
        cc++;
    	int n,p,k;
        s2(n,p);s(k);
        printf("Case %d: %lld\n",cc,ans(n,p,k));
        
        
        
    }
    
    
} 
