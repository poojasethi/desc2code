/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%lld",&n);
#define ll long long
struct debugger{template<typename T> debugger& operator,(const T& v){cerr<<v<<" ";return *this;}}dbg;
#define db(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)
#define MAXN 55
ll dp[55][55];
ll n1[55][55];
ll done[55][55];
ll toe[55];
ll done3[55];
ll rec3(ll n)
{
    if(n==1)
        return 1;
    if(done3[n])
        toe[n];
    done3[n]=1;
    return toe[n]=2*rec3(n-1)+1;
}
ll rec(ll n,ll p)
{
    if(done[n][p])
        return dp[n][p];

    if(n==1){
        done[n][p]=dp[n][p]=1;
        return 1;
    }
    if(p<=2)
        return LONG_MAX;
    if(p==3)
    {
        done[n][p]=1;
        dp[n][p]=rec3(n);
        return dp[n][p];
    }

    ll ans=LONG_MAX;
    for(ll i=1;i<n;i++)
    {
        ll first=rec(i,p);
        ll second=rec(n-i,p-1);
        if(first!=LONG_MAX&&second!=LONG_MAX)
        {
            if(2*first+second<ans)
            {
                n1[n][p]=i;
            }
            ans=min(ans,2*first+second);
        }
    }
    done[n][p]=1;
    return dp[n][p]=ans;
}
ll dp2[MAXN][MAXN][MAXN];
bool done2[MAXN][MAXN][MAXN];
ll count2(ll n,ll p,ll k)
{
    assert(k<=n);
    if(k==0)
        return 0;
    if(n==1)
        return 1;
    if(p<=2)
        return 0;

    if(done2[n][p][k])
        return dp2[n][p][k];
    if(p==3)
    {
        ll first=rec(n-1,3);
        ll second=rec(n-1,3);
        if(k<n)
            return first+1+count2(n-1,3,k);
        else
            return first+1;

    }
    ll first=rec(n1[n][p],p);
    ll second=rec(n-n1[n][p],p-1);
    if(k<=n1[n][p])
    {
        done2[n][p][k]=1;
        return dp2[n][p][k]=first+second+count2(n1[n][p],p,k);
    }
    else
    {
        done2[n][p][k]=1;
        return dp2[n][p][k]=first+count2(n-n1[n][p],p-1,k-n1[n][p]);
    }
}
int  main()
{
    //freopen("in","r",stdin);
    for(int i=1;i<55;i++)
        n1[i][3]=i-1;


    ll test;s(test);
    ll kase=0;
    while(test--)
    {
        kase++;
        ll n,p,k;s(n);s(p);s(k);
        rec(n,p);
        printf("Case %lld: %lld\n",kase,count2(n,p,k));
    }

    return 0;
}

