#include <bits/stdc++.h>
using namespace std;

const int MAXN = 2048;
bitset<MAXN> A[MAXN];
int n;

vector<int> getAll(bitset<MAXN> &s) {
  unsigned int* u = (unsigned int*)&s;
  vector<int> r;
  for (int i = 0; i < 64; ++i) if (u[i]) {
    for (unsigned int x = u[i]; x; x -= x & -x) {
      int p = __builtin_ctz(x & -x);
      r.push_back(i * 32 + p);
    }
  }
  return r;
}

void solve() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++ i) {
    A[i].reset();
    for (int j = 0; j < n; ++ j) {
      int x; scanf("%d", &x);
      if (x) A[i][j] = 1;
    }
  }
  int range(n), start;
  for (int i = 0; i < n; ++ i) {
    bitset<MAXN> Q, All;
    for (int j = 0; j < n; ++ j) All[j] = 1;
    Q.reset(); Q[i] = 1; All[i] = 0;
    int depth = -1;
    while (Q.count()) {
      vector<int> u = getAll(Q);
      bitset<MAXN> now;
      for (auto &v: u) now |= A[v];
      now &= All;
      All ^= now;
      Q = now;
      depth ++;
    }
    if (!All.any() && depth < range) {
      range = depth;
      start = i + 1;
    }
  }
  if (range == n) puts("-1");
  else printf("%d %d\n", range, start);
}

int main() {
  int T; scanf("%d", &T);
  for (int _ = 0; _ < T; ++_) {
    solve();
  }
  return 0;
}
