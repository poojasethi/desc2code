#include <assert.h>
#include <memory.h>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

int g[2000][64];
int not_used[64];

void solve() {
  int n;
  cin >> n;
  rep(i, n) {
    rep(x, 64) g[i][x] = 0;
    rep(j, n) {
      int x;
      cin >> x;
      if (x) {
        g[i][j >> 5] |= 1 << (j & 31);
      }
    }
  }
  int best_range = numeric_limits<int>::max();
  int best_city = -1;
  rep(i, n) {
    queue<int> q;
    vector<int> dist(n, std::numeric_limits<int>::max());
    rep(x, 64) not_used[x] = -1;
    q.push(i);
    not_used[i >> 5] ^= 1 << (i & 31);
    dist[i] = 0;
    while (!q.empty()) {
      int u = q.front();
      q.pop();
      int du = dist[u];
      rep(x, 64) {
        int interesting = not_used[x] & g[u][x];
        if (interesting) {
          rep(y, 32) {
            if ((interesting >> y) & 1) {
              int v = (x << 5) + y;
              dist[v] = du + 1;
              q.push(v);
            }
          }
          not_used[x] ^= interesting;
        }
      }
    }
    int max_dist = *std::max_element(all(dist));
    if (max_dist < best_range) {
      best_range = max_dist;
      best_city = i;
    }
  }
  if (best_city == -1) {
    cout << -1 << endl;
  } else {
    cout << best_range << ' ' << best_city + 1 << endl;
  }
}

void run() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  run();
  cout.flush();

#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
