#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <cstring>
#define oo (int)1e9
#define fill( a , v ) memset( a , v , sizeof (a) )
#define bits( x ) __builtin_popcount( x )
#define gcd( a , b ) __gcd( a, b )
#define lcm( a , b ) (a/gcd( a, b ) ) * b
#define add push_back
#define s(n) scanf( "%d" , &n )
const int mxn = 10000 + 10;
typedef long long ll;

using namespace std;
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};

int dp[16][1<<16][2];
short vis[16][1<<16][2];
int id;
int mat[4][4];
int a[4][4];

int solve( int prev , int mask , int turn )
{
	if( !mask )return 0;
	
	int &d = dp[prev][mask][turn];
	short &v = vis[prev][mask][turn];
	
	if( v == id )return d;
	v = id;
	
	if( turn ) d = oo;
	else d = -oo;
	
	if( turn )
	{
		int x = prev / 4;
		int y = prev % 4;
		
		bool neighbour = 0;
		for(int i=0;i<4;i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];
			
			if( nx >= 0 && ny >= 0 && nx < 4 && ny < 4 )
			{
				int mm = mat[nx][ny];
				
				if( mask & mm )
				{
					neighbour = 1;
					d = min( d , -a[nx][ny] + solve( nx * 4 + ny , mask ^ mm , !turn ) );
				}
			}
		}
		
		if( !neighbour )
		{
			for(int i=0;i<16;i++)
			 if( mask & 1<<i )
			 d = min( d , -a[i/4][i%4] + solve( i , mask ^ 1<<i , !turn )  );
		}
	}
	else
	{
		int x = prev / 4;
		int y = prev % 4;
		
		bool neighbour = 0;
		for(int i=0;i<4;i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];
			
			if( nx >= 0 && ny >= 0 && nx < 4 && ny < 4 )
			{
				int mm = mat[nx][ny];
				
				if( mask & mm )
				{
					neighbour = 1;
					d = max( d , a[nx][ny] + solve( nx * 4 + ny , mask ^ mm , !turn ) );
				}
			}
		}
		
		if( !neighbour )
		{
			for(int i=0;i<16;i++)
			 if( mask & 1<<i )
			 d = max( d , a[i/4][i%4] + solve( i , mask ^ 1<<i , !turn )  );
		}		
	}
	
	return d;
}

int main()
{
	for(int i=0,c=1;i<4;i++)
	 for(int j=0;j<4;j++,c<<=1)
	  mat[i][j] = c;
	  
	  int mm = (1<<16)-1;
	int runs;
	s( runs );
	
	while( runs-- )
	{
		++id;
		for(int i=0;i<4;i++)
		 for(int j=0;j<4;j++)
		  s( a[i][j] );
		  
		int soln = -oo;
		
		
		for(int i=0;i<4;i++)
		 for(int j=0;j<4;j++)
		 soln = max( soln , a[i][j] + solve( i * 4 + j , mm ^ mat[i][j] , 1 )  );
		 
		 printf( "%d\n" , soln );
	}
}
