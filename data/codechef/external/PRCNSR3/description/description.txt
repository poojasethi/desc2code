
Given a Tree T where each vertex v has a weight w, you need to support the following queries:

  0 v m  Add the number m,  K  times to the vertex  v . Here  K  denotes the last 5 digits of  L  where L is the number of ways you can make  m  by using the numbers 2 and 4. Eg. for a query 0 1 6, you need to add 6, 3 times to the vertex 1. Which means you will add 18 to the weight of vertex 1. This is because 6 = 2 + 2 + 2 or 6 = 2 + 4 or 6 = 4 + 2. The vertices are indexed from 1.
 1 v  Print the sum of all weights in the subtree rooted at vertex  v . The weight wv is also included. 
The entire tree is assumed to be  rooted at vertex 1. Also, the initial weights of all vertices is 1


Input
The first line of input contains integers  N  and  Q  denoting the number of vertices and the number of queries respectivelyThe next N - 1 lines contain an integers u and v each denoting an edge in the tree.The next Q lines each contain one query as described earlier.


Output
For every type 1 query output a single integer containing the result modulo (10^9 + 7)[specifically the remainder when the result is divided by (10^9 + 7)]


Constraints

 2 ≤ N ≤ 10^4
 1 ≤ Q ≤ 10^5
 0 ≤ m < 10^9 + 7



Example
Input:
6 4
1 2
1 3
1 4
1 5
1 6
1 3
0 3 6
1 3
1 1

Output:
1
19
24
