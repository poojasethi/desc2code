#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define mod1 100000
#define mod 1000000007
using namespace std;
typedef long long int LL;
long long int N , Q , u , v;

std::vector<long long int > adjList[100010];

long long int stme[100010] , etime[100010] , ctme = 1;
long long int BIT[100010];


void update(long long int index , long long int val)
{
	while(index<=100004)
	{
		BIT[index] = (BIT[index] + val);
		BIT[index]%=mod;
		index+=(index)&(-index);
	}
}

long long int query(long long int index)
{
	long long int ret = 0;
	while(index>0)
	{
		ret+=BIT[index];
		ret = (ret%mod);
		index-=(index)&(-index);
	}
	return ret%mod;
}


void multiply(LL A[2][2] , LL B[2][2]){
	LL C[2][2];
	C[0][0] = ((A[0][0]*B[0][0])%mod1 + (A[0][1]*B[1][0])%mod1)%mod1;
	C[0][1] = ((A[0][0]*B[0][1])%mod1 + (A[0][1]*B[1][1])%mod1)%mod1;
	C[1][0] = ((A[1][0]*B[0][0])%mod1 + (A[1][1]*B[1][0])%mod1)%mod1;
	C[1][1] = ((A[1][0]*B[0][1])%mod1 + (A[1][1]*B[1][1])%mod1)%mod1;
	for(long long int i=0;i<2;i++)
		for(long long int j=0;j<2;j++)
			A[i][j] = (C[i][j]%mod1);
}

void power(LL F[2][2] , long long int expo)
{
	if(expo<=1)
		return;
	LL M[2][2] = {{1,1},{1,0}};
	power(F , expo/2);
	multiply(F , F);
	if(expo%2!=0)
		multiply(F , M);
}


long long int fibo(long long int K){
	if(K%2!=0)
		return 0;
	LL F[2][2] = {{1,1},{1,0}};
	power(F , K/2);
	return F[0][0]%mod1;
}


void dfs(long long int curr_vertex , long long int parent)
{
	stme[curr_vertex] = ctme++;
	std::vector<long long int >::iterator it = adjList[curr_vertex].begin();
	while(it!=adjList[curr_vertex].end())
	{
		if((*it)!=parent)
			dfs(*it , curr_vertex);
		it++;
	}
	etime[curr_vertex] = ctme++;
}





int main()
{

long long int qflag , v , m , K;
LL p , q , ans;
scanf("%lld %lld",&N,&Q);
for(long long int i=1;i<=N-1;i++)
{
	scanf("%lld %lld",&u,&v);
	adjList[u].push_back(v);
	adjList[v].push_back(u);
}
dfs(1 , -1);

for(long long int i=1;i<=N;i++)
	update(stme[i] , 1);


for(long long int i=1;i<=Q;i++)
{
	cin >> qflag;
	if(qflag==0)
	{
		cin >> v >> m;
		// if(m%2==0)
			// continue;
		K = (m*(fibo(m)%mod1))%mod;
		update(stme[v] , K);
	}
	else
	{
		cin >> v;
		p = query(etime[v]);
		q = query(stme[v]-1);
		ans = (p - q + mod)%mod;
		cout << ans << endl;
	}
}


return 0;
}












