#include<bits/stdc++.h>
#define N 11000
#define pb push_back
#define ll long long int
#define mod 100000
#define MOD 1000000007
using namespace std;
int a[N],ind[N];
int c[N]; ll s[4*N];
int tt=1;
int visited[N];
vector<int> v[N];
int dfs(int node){
	a[tt++]=node;
	visited[node]=1;
	int f=0;
	for(int i=0; i<v[node].size(); i++){
		if(!visited[v[node][i]]){
			dfs(v[node][i]);
			f=1;
		}
	}
	visited[node]=0;
	if(!f) return c[node]=1;
	c[node]++;
	for(int i=0; i<v[node].size(); i++){
		c[node]+=c[v[node][i]];
	}
	return c[node];
}
void fib(ll n, ll&x, ll&y){
    if(n==1){
        x = y = 1;
        return ;
    }
    if(n&1){
        fib(n-1, y, x);
        y=(y+x)%mod;
    }
	else{
        ll a, b;
        fib(n>>1, a, b);
        y = (a*a+b*b)%mod;
        x = (a*b + a*(b-a+mod))%mod;
    }
}
void make(int l, int r, int node){
	if(l==r){
		s[node]=1;
		return;	
	} 
	int mid=l+r; mid/=2;
	make(l,mid,2*node); make(mid+1,r,1+ 2*node);
	s[node]=(s[2*node]%MOD+s[1+ 2*node]%MOD)%MOD;
}
int sum(int l,int r,int start,int end,int node){
    if(start>r||end<l) return 0;
    if(start>=l&&end<=r) return s[node]%MOD;
    int mid=start + end;
    mid>>=1;
    return (sum(l,r,start,mid,2*node)%MOD+sum(l,r,mid+1,end,2*node+1)%MOD)%MOD;
}
void update(int l, int r, int node, ll val, int i){
    if(l>i||i>r) return;
    s[node]+=val;
    s[node]%=MOD;
    if(l!=r){
        int mid=l+r;
        mid>>=1;
        update(l,mid,2*node,val,i);
        update(mid+1,r,2*node+1,val,i);
    }
}
int main(){
	//freopen("in.txt","r",stdin);
	memset(visited,0,sizeof visited);
	int n,q; cin>>n>>q;
	for(int i=1; i<n; i++){
		int x,y; cin>>x>>y;
		v[x].pb(y); v[y].pb(x);
	}	
	dfs(1);
	for(int i=1; i<=n; i++) c[i]--;
	for(int i=1; i<=n; i++){
		ind[a[i]]=i;
	}
	make(1,n,1);
	while(q--){
		int type; cin>>type;
		if(!type){
			ll m; int v; cin>>v>>m;
			if(m&1) continue;
			ll x=m;
			m/=2;
			if(!m) m=1;
			ll val=0, lol=0;
			fib(m,lol,val);
			int pt=ind[v];
			val*=x;
			val%=MOD;
			update(1,n,1,val,pt);
		}
		else{
			int pt; cin>>pt;
			int x=ind[pt];
			//cout<<x<<" "<<x+c[pt]<<endl;
			cout<<sum(x,x+c[pt],1,n,1)%MOD<<endl;
		}
		
	}
}