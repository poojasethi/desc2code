#include<bits/stdc++.h>
using namespace std;
char st[100005];
struct check{
	int open;
	int close;
};
check pass[300005];
void build(int node,int a,int b)
{
	if(a==b)
	{
		if(st[a]=='(')
		{
			pass[node].open=0;
			pass[node].close=1;
		}
		else
		{
			pass[node].close=0;
			pass[node].open=1;
		}
		return;
	}
	int mini;
	build(node*2,a,(a+b)/2);
	build(node*2+1,(a+b)/2+1,b);
	if(pass[node*2].close<pass[node*2+1].open)
	mini=pass[node*2].close;
	else
	mini=pass[node*2+1].open;
	pass[node].open=pass[node*2].open+pass[node*2+1].open-mini;
	pass[node].close=pass[node*2].close+pass[node*2+1].close-mini;
}
void update(int node,int a,int b,int ind)
{
	if(a==b)
	{
		if(st[a]=='(')
		st[a]=')';
		else
		st[a]='(';
		if(st[a]=='(')
		{
			pass[node].open=0;
			pass[node].close=1;
		}
		else
		{
			pass[node].close=0;
			pass[node].open=1;
		}
		return;
	}
	int mini;
	if(ind<=(a+b)/2)
	update(node*2,a,(a+b)/2,ind);
	else
	update(node*2+1,(a+b)/2+1,b,ind);
		if(pass[node*2].close<pass[node*2+1].open)
	mini=pass[node*2].close;
	else
	mini=pass[node*2+1].open;
	pass[node].open=pass[node*2].open+pass[node*2+1].open-mini;
	pass[node].close=pass[node*2].close+pass[node*2+1].close-mini;
}
int main()
{
	int n,l,r;
	scanf("%s",st);
	scanf("%d",&n);
	int len=strlen(st);
    build(1,0,len-1);
	while(n--)
	{
		scanf("%d%d",&l,&r);
		if(st[l]==st[r])
		{
			if(pass[1].open==0&&pass[1].close==0)
			printf("Yes\n");
			else
			printf("No\n");
		}
		else
		{
			update(1,0,len-1,l);
			update(1,0,len-1,r);
			if(pass[1].open==0&&pass[1].close==0)
			printf("Yes\n");
			else
			puts("No");
		}
	}
}