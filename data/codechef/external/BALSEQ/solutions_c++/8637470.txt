#include<bits/stdc++.h>
using namespace std;
struct node
{

    int left,right;
}tree[4*100015];
string ar;
void build(int node,int a,int b)
{

    if(a>b)
        return;
    if(a==b)
    {
        if(ar[a]=='(')
        {
            tree[node].right=1;
            tree[node].left=0;
        }
        else
        {
            tree[node].right=0;
            tree[node].left=1;
        }
        return;
    }
    build(2*node,a,(a+b)/2);
    build(2*node+1,1+(a+b)/2,b);

    // merge two nodes

    int balance=min(tree[node*2].right,tree[node*2+1].left);
    tree[node].left=tree[2*node].left+tree[node*2+1].left-balance;
    tree[node].right=tree[2*node].right+tree[node*2+1].right-balance;

}

void update(int node,int a,int b,int i)
{

	if(a==b)
	{
		if(ar[a]==')')
		{
			ar[a]='(';
			tree[node].left=0,tree[node].right=1;
		}

		else
		{
			ar[a]=')';
			tree[node].left=1,tree[node].right=0;
		}
		return;
	}
	if(i>=a && i<=(a+b)/2)
	update(node*2,a,(a+b)/2,i);
	else
	update(1+(node*2),1+((a+b)/2),b,i);

	// merge two nodes
	int balance=min(tree[node*2].right,tree[node*2+1].left);
    tree[node].left=tree[2*node].left+tree[node*2+1].left-balance;
    tree[node].right=tree[2*node].right+tree[node*2+1].right-balance;


}

int main()
{
    cin>>ar;
    build(1,0,ar.size()-1);
    int q;
    cin>>q;
  // q=2;
    while(q--)
    {
    	int a,b;
    	cin>>a>>b;
    	if(ar[a]!=ar[b])
    	{
    		update(1,0,ar.size()-1,a);
    		update(1,0,ar.size()-1,b);
    	}
    	if(tree[1].left==0 && tree[1].right==0)
    	cout<<"Yes\n";
    	else
    	cout<<"No\n";
    }


}
