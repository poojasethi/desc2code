//Common headers
#include<cstdio>
#include<iostream>
#include<vector>
#include<utility>
#include<algorithm>
#include<string>

using namespace std;


#define ipair std::pair< int, int >
#define ull unsigned long long
#define traverse(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define rtraverse(container, it) for(typeof(container.rbegin()) it = container.rbegin(); it != container.rend(); it++)

#define TOLERANCE 1e-5

/*
int gcd(int a,int b){
    if( b == 0)
       return a;
    else
       return gcd(b, a%b);
}
*/
int main(){
	int testCases= 0;
	cin >> testCases;
	
	for(int tc=1;tc<=testCases;tc++){
		int x1,y1,x2,y2;
		int GS;
		cin >> GS;
		cin >> x1 >> y1;
		cin >> x2 >> y2;
		int X = x1-x2;
		int Y = y1-y2;
		
		if( X < 0)
			X = 0-X;
		if( Y<0 )
			Y = 0-Y;
		
		
		/*if(X==Y){
			int ans = 4 + (X-1) * 3;
			printf("Case %d: %d\n", tc, ans);
			continue;
		}*/
		//X is the greater of the 2
		if( Y > X){
			int t = X;
			X = Y;
			Y = t;
		}
		
		int ans = X+Y+1;
		//Add 2 for each corner they intersect at. If they do intersect, It'll be at the midpt of 2 points where they're at centers of squares. So we use the LCM
		
		
		int x = 2*X;
		int y = 2*Y;
		//cout << " ANS HERE IS" << ans;
		for(int i=1;i<y;i+=2){	//( * X)/Y;	has to be of the form n+1/2
			
			//cout << "HERE";
			if( ((i*X)%Y==0)  && (((i*X)/Y)%2==1) ){ //Whole number   && ODD number	
				//cout << "\nFOUR CROSS AT i=" << i;
				ans++;
			}
			
		}
		
		
		printf("Case %d: %d\n", tc, ans);
		
	}
	return 0;
}