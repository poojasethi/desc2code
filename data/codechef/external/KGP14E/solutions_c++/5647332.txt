# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,PII> TRI;
typedef vector<string> VS;

#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define mt(a,b,c) mp(a,mp(b,c))
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)

inline int inp()
{
    register int r=0,c;
    for(c=getchar_unlocked(); c<=32; c=getchar_unlocked());
    if(c=='-')
        return -inp();
    for(; c>32; r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
    return r;
}

long long int ans;
double i,j,x,l,m1,inc;
int x1,x2,y11,y2;
int main()
{

    int t,k,X=0;
    t = inp();
    while(t--)
    {X++;
        ans=0;
        k=inp();
        x1=inp();
        y11=inp();
        x2=inp();
        y2=inp();

       int diffx=abs(x2-x1);
       int diffy=abs(y2-y11);
       if(x2>x1)
       {
           i=(double)x1+0.5;
           inc=0.5;
        }
        else
        {
            i=(double)x1-0.5;
            inc=-0.5;
        }
        l=(double)(y2-y11);

        if((x2-x1)!=0 && (y2-y11)!=0)
        {
        l=l/(double)(x2-x1);
            int cnt=0;
        for(;(inc>0)?(i<(double)x2):(i>(double)x2); i+=inc*2)
        {
            j=(double)y11 + (l)*(i-(double)x1);
                x=j-floor(j);
               if(abs(x-0.5)<1e-6)
                    cnt++;
        }
        ans=diffx;
        ans+=diffy;
        ans+=cnt;
        ans+=1;
        printf("Case %d: %lld\n",X,ans);
        }
        else
        printf("Case %d: %lld\n",X,abs(x2-x1)+abs(y2-y11)+1);
    }
    return 0;
}
