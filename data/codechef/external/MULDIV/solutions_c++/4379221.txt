#include<iostream>
#include<cstdio>
using namespace std;
typedef long long LL;
inline LL getn(){
	LL n=0,c=getchar();
	while(c< '0'||c>'9')c= getchar();
	while(c>='0'&& c<='9')
		n = (n<<3)+(n<<1)+c-'0',c= getchar();
	return n;
}

int main()
{
    LL m,n,test,k,temp,j;
    test=getn();
    while(test--)
    {
       n=getn();
       k=getn();
       m=getn();
//firstly if n is divisible by k then divide repeatedly and store count
//break as soon as n becomes in divisible by k
       j=0;
       while(m-- && n!=0 && k!=1)
       {
            j++;
           if(n%k==0)
            {
                n/=k;
            }
            else
            {
                m+=1;
                break;
            }
       }
//if n is not divisible by k then we have to perform m operations :: m=(m-j+1 )
//here two cases arise
//case 1: if no of operations is even then we get same no as we have to divide & then multiply till m=0
//case2:if no. of operations are odd the after performing all operations we get n multiplied by k
      if(n%k!=0)
       {
           if(m&1)
           {
               n=n*k;
           }
       }

        printf("%lld\n",n);
    }
    return 0;
}
