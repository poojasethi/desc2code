#include<cstdio>
#include<algorithm>
#include<cstring>
#include <sys/resource.h>
using namespace std;
int n,h[400005];
long long dp[400005];
int abs1(int x)
{
    if(x>0)
        return x;
    return -x;
}
long long fun(int idx)
{
   	long long ans=100000000000000000LL;
	if(idx>=n-1)
		return 0;
	if(dp[idx]!=-1)
		return dp[idx];
	int c=1;
	for(int i=idx+1;i<n;i=idx+c)
	{
		c*=2;
		ans=min(ans,abs1(h[idx]-h[i])+fun(i));
	}
	return dp[idx]=ans;
}
int main()
{
    const rlim_t kStackSize = 20 * 1024 * 1024;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
	scanf("%d",&n);
	for(int i=0;i<n;i++)
		scanf("%d",&h[i]);
	memset(dp,-1,sizeof(dp));
	printf("%lld\n",fun(0));
	return 0;
}