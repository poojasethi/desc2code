#include <bits/stdc++.h>

using namespace std;

#define lld long long
#define mod 1000000007
#define INF (int)1e9
#define s(n) scanf("%d", &n)
#define sc(n) scanf("%c", &n)
#define sl(n) scanf("%lld", &n)
#define sf(n) scanf("%f", &n)
#define ss(n) scanf("%s", n);
#define all(a) a.begin(), a.end()
#define pii pair<int, int>
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define sq(x) ((x)*(x))
#define mset(x,v) memset(x,v,sizeof(x))
#define PI 3.1415926535897932384626
#define MAX 1000005

int a[20005], b[20005], tree[10000005], inv_cnt[200005], BLOCK, ans[100005];
struct node {
    int l, r, id;
}que[100005];

bool cmp(node x, node y) {
	if(x.l/BLOCK != y.l/BLOCK) {
		return x.l/BLOCK < y.l/BLOCK;
	}
	return x.r < y.r;
}


void write(int x, int val)
{
    while (x < MAX) {
        tree[x] += val;
        x += (x & (-x));
    }
}

int read(int x)
{
    int ans = 0;
    while (x > 0) {
        ans += tree[x];
        x -= (x & (-x));
    }

    return ans;
}

int main()
{
    int n, i, j;
    s(n);

    for (i = 1; i <= n; i++) {
        s(a[i]);
        b[i] = a[i];
    }
    BLOCK = sqrt(n);
    sort(b, b+n+1);

    for (i = 1; i <= n; i++) {
        int tmp = lower_bound(b, b+n+1, a[i]) - b;
        a[i] = tmp;
    }

    int q;
    s(q);
    for (i = 0; i < q; i++) {
        s(que[i].l), s(que[i].r);
        que[i].id = i;
    }

    sort(que, que + q, cmp);

    int currentL = 1, currentR = 1, res = 0;
    write(a[1], 1);

	for(i = 0; i < q; i++) {
		int L = que[i].l, R = que[i].r;

		while (currentR < R) {
            currentR++;
            res += (-read(a[currentR]) + read(MAX-5));
            write(a[currentR], 1);
		}

		while (currentR > R) {
            res -= (-read(a[currentR]) + read(MAX - 5));
            write(a[currentR], -1);
            currentR--;
		}

		while (currentL < L) {
            res -= read(a[currentL] - 1);
            write(a[currentL], -1);
            currentL++;
		}

		while (currentL > L) {
            currentL--;
            res += read(a[currentL] - 1);
            write(a[currentL], 1);
		}

		ans[que[i].id] = res;
	}

	for (i = 0; i < q; i++)
        cout << ans[i] << endl;

    return 0;
}
