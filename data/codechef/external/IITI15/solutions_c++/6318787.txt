#include <bits/stdc++.h>
#define MAX 20005
#define lli long long

using namespace std;

lli ans[MAX];
lli val;
int A[MAX];
int blocks;
int tree[MAX];
map <int, int> mp;

struct node {
    int l,r,idx;
    node() { }
    node(int l, int r, int idx)
    {
        this->l = l;
        this->r = r;
        this->idx = idx;
    }
}q[MAX];

bool func(node p1, node p2)
{
    if ( p1.l/blocks != p2.l/blocks ) return (p1.l/blocks < p2.l/blocks);
    return p1.r < p2.r;
}

void update(int idx, int val)
{
    while ( idx <= MAX-4 ) {
        tree[idx] += val;
        idx += (idx & (-idx));
    }
}

int query(int idx)
{
    int ret = 0;
    while ( idx > 0 ) {
        ret += tree[idx];
        idx -= (idx & (-idx));
    }
    return ret;
}


void add(int pos)
{
    return;
}

void rem(int pos)
{
    return;
}

template <typename T>
inline void fi(T *a)
{
register char c=0;
while (c<33) c=getchar_unlocked();
*a=0;
int tmp = 0;
while (c>33)
{
if ( c == 45 ) tmp = 1;
else *a=*a*10+c-'0';
c=getchar_unlocked();
}
if ( tmp == 1 ) *a = 0-(*a);
}

int main()
{
    map <int,int> :: iterator it;
    int pp = 1;
    int n,m,x,y,l,r;
    l = r = 0;
    val = 0;
    fi(&n);

    blocks = (int)sqrt(n);

    for ( int i = 0; i < n; i++ ) fi(&A[i]), mp[A[i]] = 1;
    for ( it = mp.begin(); it != mp.end(); it++ ) it->second = pp++;
    for ( int i = 0; i < n; i++ ) A[i] = mp[A[i]];

    fi(&m);

    for ( int i = 0; i < m; i++ ) {
        fi(&x), fi(&y);
        x--, y--;
        q[i] = node(x,y,i);
    }

    sort(q, q + m, func);

    for ( int i = 0; i < m; i++ ) {
        while ( l < q[i].l ) {
            val -= (query(A[l]-1));
            update(A[l],-1);
           // rem(l);
            l++;
        }
        while ( l > q[i].l ) {
            val += (query(A[l-1]-1));
            update(A[l-1],1);
         //   add(l-1);
            l--;
        }
        while ( r <= q[i].r ) {
           // add(r);
            val += (query(MAX-4)-query(A[r]));
            update(A[r], 1);
            r++;
        }
        while ( r > q[i].r+1 ) {
         //   rem(r-1);
            val -= (query(MAX-4)-query(A[r-1]));
            update(A[r-1],-1);
            r--;
        }
        ans[q[i].idx] = val;
    }

    for ( int i = 0; i < m; i++ ) printf("%lld\n", ans[i]);
    return 0;
}
