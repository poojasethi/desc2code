#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <string>
#include <string.h>
#include <math.h>
using namespace std;

#define fore(i, l, r) for(int i = l; i < r; i++)
#define forn(i, n) fore(i, 0, n)
#define pb push_back
#define mp make_pair
#define x first
#define y second

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<pii> vpii;
typedef pair<int, pii> pipii;

#define S 150

bool cmp(pipii a, pipii b){
  if (a.y.x/S != b.y.x/S) return a.y.x/S < b.y.x/S;
  else return a.y.y < b.y.y;
}

const int N = 20005;
int BIT[N], n;

int sum(int a){
  int ans = 0;
  while (a > 0) {
    ans += BIT[a];
    a -= (a & -a);
  }
  return ans;
}

void update(int a, int v){
  while (a <= n){
    BIT[a] += v;
    a += (a & -a);
  }
}

int main(){
  scanf("%d", &n);
  int arr[n];
  pii temp[n];
  forn(i, n){
    scanf("%d", &arr[i]);
    temp[i] = mp(arr[i], i);
  }
  sort(temp, temp + n);
  int count = 1;
  arr[temp[0].y] = count;
  fore(i, 1, n){
    arr[temp[i].y] = temp[i].x == temp[i - 1].x ? count : ++count;
  }


  forn(i, n + 1) BIT[i] = 0;

  int q;
  scanf("%d", &q);
  pipii Q[q];
  forn(i, q){
    int a, b;
    scanf("%d %d", &a, &b);
    Q[i] = mp(i, mp(a, b));
  }
  
  sort(Q, Q + q, cmp);
  int l = 1, r = 1, inv = 0;
  update(arr[0], 1);
  int answer[q];
  forn(i, q){
    while(r < Q[i].y.y){
      r++;
      inv += sum(n) - sum(arr[r - 1]);
      update(arr[r - 1], 1);
    }
    
    while (l > Q[i].y.x){
      l--;
      inv += sum(arr[l - 1] - 1);
      update(arr[l - 1], 1);
    }
    
    while (r > Q[i].y.y) {
      inv -= sum(n) - sum(arr[r - 1]);
      update(arr[r - 1], -1);
      r--;
    }
    
    while (l < Q[i].y.x){
      inv -= sum(arr[l - 1] - 1);
      update(arr[l - 1], -1);
      l++;
    }
    
    answer[Q[i].x] = inv;
  }
  
  forn(i, q){
    printf("%d\n", answer[i]);
  }
}

