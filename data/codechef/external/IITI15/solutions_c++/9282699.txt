#pragma comment(linker, "/STACK:102400000,102400000")
#pragma warning(disable:4996)  
#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <string>
#include <cstdio>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
#define INF 0x3fffffff
typedef long long ll;

const int mod = 1e9 + 7;
const int maxn = 20005;

struct no
{
	int le, ri, id;
}qu[maxn];

map<int, int>has;

int n, q, nx, bk;
int A[maxn], B[maxn], res[maxn], ans[maxn];

bool cmp(no n1, no n2)
{
	if (n1.le / bk == n2.le / bk)
	{
		return n1.ri < n2.ri;
	}
	else
	{
		return n1.le / bk < n2.le / bk;
	}
}
int lowbit(int x)
{
	return x&(-x);
}

void add(int x,int value)
{
	while (x <= nx)
	{
		ans[x] += value;
		x = x + lowbit(x);
	}
}

int sum(int x)
{
	int res = 0;
	while (x>0)
	{
		res += ans[x];
		x = x - lowbit(x);
	}
	return res;
}

void input()
{
	int i, u, v;
	scanf("%d", &n);

	for (i = 1; i <= n; i++)
	{
		scanf("%d", &A[i]);
		B[i] = A[i];
	}

	sort(B + 1, B + n + 1);
	nx = 0;
	for (i = 1; i <= n; i++)
	{
		if (has[B[i]] == 0)
		{
			nx++;
			has[B[i]] = nx;
		}
	}

	scanf("%d", &q);
	for (i = 1; i <= q; i++)
	{
		scanf("%d%d", &u, &v);
		qu[i].id = i;
		qu[i].le = u;
		qu[i].ri = v;
	}
}

void solve()
{
	bk = sqrt(1.0*n);
	sort(qu + 1, qu + q + 1, cmp);

	int i, j, id, pl = 1, pr = 0, an = 0;
	for (i = 1; i <= q; i++)
	{
		id = qu[i].id;
		if (qu[i].le == qu[i].ri)
		{
			res[id] = 0;
			continue;
		}
		if (pr < qu[i].ri)
		{
			for (j = pr + 1; j <= qu[i].ri; j++)
			{
				int re = sum(has[A[j]]);
				an += ((j - pl) - re);
				add(has[A[j]], 1);
			}
		}
		else
		{
			for (j = pr; j > qu[i].ri; j--)
			{
				int re = sum(has[A[j]]) - 1;
				an -= ((j - pl) - re);
				add(has[A[j]], -1);
			}
		}
		pr = qu[i].ri;

		if (pl < qu[i].le)
		{
			for (j = pl; j < qu[i].le; j++)
			{
				add(has[A[j]], -1);
				int re = sum(has[A[j]] - 1);
				an -= re;
			}
		}
		else
		{
			for (j = pl - 1; j >= qu[i].le; j--)
			{
				int re = sum(has[A[j]] - 1);
				an += re;
				add(has[A[j]], 1);
			}
		}
		pl = qu[i].le;
		res[id] = an;
	}
	for (i = 1; i <= q; i++)
	{
		printf("%d\n", res[i]);
	}
}

int main() 
{
	//freopen("i.txt","r",stdin);
	//freopen("o.txt","w",stdout);
	
	input();
	solve();

	return 0;
}