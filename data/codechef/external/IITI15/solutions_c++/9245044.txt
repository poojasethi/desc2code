//OM
#include <cmath>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <list>
#include <stack>
#include <queue>
#include <utility>
#include <sstream>
#include <algorithm>
using  namespace  std;

#define  x first
#define  y second
#define  pb push_back
#define  mp make_pair
#define  PI (acos(-1.0))
#define  mem(a,b) memset(a,b,sizeof(a))
#define  Sort(x) sort(x.begin(),x.end())
#define  FOR(i, b, e) for(int i = b; i <= e; i++)
#define  FORR(i, b, e) for(int i = b; i >= e; i--)
#define  FORI(i, s) for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)
#define  pr(x) cout<<x<<"\n"
#define  prs(x) cout<<x<<" "
#define  pr2(x,y) cout<<x<<" "<<y<<"\n"
#define  pr3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n"
#define  ppr(a) cout<<a.x<<" "<<a.y<<"\n"

typedef  long long ll;
typedef  pair <int, int> pii;
typedef  pair <double , double> pdd;
typedef  vector <int> vi;
typedef  vector <pii> vpii;

//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};
//int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction

#define  EPS 1e-9
#define  MAX 20007
ll a[MAX];
ll b[MAX];
int block,res=0,cnt[MAX],ans[MAX],n;
struct qry
{
    int l,r,i;
} q[MAX];
int tree[MAX];
int query(int idx)
{
    int sum=0;
    while(idx>0){
        sum+=tree[idx];
        idx-=idx&(-idx);
    }
    return sum;
}
void update(int idx,int x,int n)
{
    while(idx<=n){
        tree[idx]+=x;
        idx+=idx&(-idx);
    }
}
bool cmp(qry a,qry b)
{
    if(a.l/block!=b.l/block)
        return a.l <b.l;
    return a.r< b.r;
}
void add(int pos,int t){
    if(t) res+=query(n)-query(a[pos]);
    else res+=query(a[pos]-1);
    update(a[pos],1,n);
}
void rem(int pos,int t){
    if(t) res-=query(n)-query(a[pos]);
    else res-=query(a[pos]-1);
    update(a[pos],-1,n);
}
void SqrtDec(int m)
{
    block=142;
    sort(q,q+m,cmp);
    int curL=0,curR=0;
    FOR(i,0,m-1)
    {
        int L=q[i].l;
        int R=q[i].r;
        while(curL<L){rem(curL,0);curL++;}
        while(curL>L){add(curL-1,0);curL--;}
        while(curR<=R){add(curR,1);curR++;}
        while(curR>R+1){rem(curR-1,1);curR--;}
        ans[q[i].i]=res;
    }
}
int main()
{
    int T,m;
    scanf("%d",&n);
    FOR(i,0,n-1)scanf("%lld",&a[i]),b[i]=a[i];
    sort(b,b+n);
    FOR(i,0,n-1)a[i]=lower_bound(b,b+n,a[i])-b+1;
    scanf("%d",&m);
    FOR(i,0,m-1){
        scanf("%d%d",&q[i].l,&q[i].r),q[i].i=i;
        q[i].l--;
        q[i].r--;
    }
    SqrtDec(m);
    FOR(i,0,m-1)
    printf("%d\n",ans[i]);
    return 0;
}

