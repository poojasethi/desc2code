#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define f first
#define s second
#define pii air<int,int>
#define mp make_pair
vector< int >v;
map<int,int>my;
int n,ptr;
int a[100011],bit[100011];
ll ans[100011];
struct node
{
    int l,r,ind;
};
ll answer;
node q[100011];
const int block=500;
bool cmp(node a,node b)
{
    if(a.l/block!=b.l/block)
        return a.l/block<b.l/block;
    return a.r<b.r;
}
int query(int x)
{
    int idx=x,ans=0;
    while(idx>0)
    {
        ans+=bit[idx];
        idx-=(idx&-idx);
    }
    return ans;
}
void update(int x,int v)
{
    int i=x;
    while(i<=ptr)
    {
        bit[i]+=v;
        i+=(i&-i);
    }
}
void lremove(int i)
{
    answer-=(ll)(query(my[a[i]]-1));
    update(my[a[i]],-1);
}
void ladd(int i)
{
    answer+=(ll)(query(my[a[i]]-1));
    update(my[a[i]],1);
}
void rremove(int i)
{
    answer-=(ll)(query(ptr)-query(my[a[i]]));
    update(my[a[i]],-1);
}
void radd(int i)
{
    answer+=(ll)(query(ptr)-query(my[a[i]]));
    update(my[a[i]],1);
}

int main()
{
    int i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
        v.pb(a[i]);
    }
    sort(v.begin(),v.end());
    ptr=1;
    for(i=0;i<n;i++)
    {
        if(!my[v[i]])
        {
            my[v[i]]=ptr;
            ptr++;
        }
    }
    int m;
    scanf("%d",&m);
    for(i=0;i<m;i++)
    {
        scanf("%d %d",&q[i].l,&q[i].r);
        q[i].l--;
        q[i].r--;
        q[i].ind=i;
    }
    ptr--;
    sort(q,q+m,cmp);
    answer=0;
//    for(i=0;i<n;i++)
//        printf("%d ",my[a[i]]);
//    printf("\n");
//    for(i=0;i<m;i++)
//        printf("%d %d %d\n",q[i].l,q[i].r,q[i].ind);
    for(i=q[0].l;i<=q[0].r;i++)
    {
        answer+=(query(ptr)-query(my[a[i]]));
        update(my[a[i]],1);
    }
    ans[q[0].ind]=answer;
    //printf("%d %d\n",query(ptr),bit[ptr]);
    int cl=q[0].l,cr=q[0].r;
    for(i=1;i<m;i++)
    {
        while(cl<q[i].l)lremove(cl),cl++;
        while(cl>q[i].l)ladd(cl-1),cl--;
        while(cr>q[i].r)rremove(cr),cr--;
        while(cr<q[i].r)radd(cr+1),cr++;
        ans[q[i].ind]=answer;
    }
    for(i=0;i<m;i++)
        printf("%lld\n",ans[i]);
    return 0;
}
