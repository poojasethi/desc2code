
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
 
using namespace std;
 
#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second
 
/* Relevant code begins here */
 
/* Input from file or online */
 
void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}
 
/* Input opener ends */
 
#define MAX 21234
 
int tree[MAX];
// value[n] += x
void add(int n, int x) { for (; n < MAX; n |= n + 1) tree[n] += x; }
// Returns value[0] + value[1] + ... + value[n]
int get(int n) { int s=0; while (n>=0) { s+=tree[n]; n=(n&(n+1))-1; } return s; }
 
map<int,int> m;
int a[MAX], b[MAX];
 
struct event {
    int l,r,idx;
} e[MAX];
int N = 150;
bool operator<(event a,event b) {
    if ( a.l/N != b.l/N ) return (a.l/N)<(b.l/N);
    else if ( a.r != b.r ) return a.r<b.r;
    return a.idx<b.idx;
}
int ans[MAX];
 
int main() {
    input();
    M(tree,0);
    int K = 0;
    int n; S(n);
    F(i,0,n) {
        S(a[i]);
        b[i] = a[i];
    }
    sort(b,b+n);
    F(i,0,n) {
        if ( !m.count(b[i]) )
            m[b[i]] = K++;
    }
    F(i,0,n) a[i] = m[a[i]];
    int q; S(q);
    F(i,0,q) {
        S(e[i].l); S(e[i].r); e[i].idx=i;
        e[i].l--; e[i].r--;
    }
    sort(e,e+q);
    int res = 0;
    int l = 0, r = 0;
    add(a[0],1);
    F(i,0,q) {
        // cout << e[i].l << " " << e[i].r << endl;
        while ( r < e[i].r ) {
            r++;
            res += -get(a[r])+get(MAX-5);
            add(a[r],1);
        }
        while ( r > e[i].r ) {
            res -= -get(a[r])+get(MAX-5);
            add(a[r],-1);
            r--;
        }
        while ( l < e[i].l ) {
            res -= (get(a[l]-1));
            add(a[l],-1);
            l++;
        }
        while ( l > e[i].l ) {
            l--;
            res += (get(a[l]-1));
            add(a[l],1);
        }
        ans[e[i].idx] = res;
    }
    F(i,0,q) printf("%d\n", ans[i]);
    return 0;
} 