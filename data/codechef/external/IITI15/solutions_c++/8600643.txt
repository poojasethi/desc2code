#include<vector>
#include<cstring>
#include<algorithm>
#include<stdio.h>
#include<climits>
#include<set>
#include<fstream>
#include<cmath>
#include<bitset>
#include<map>
#include<stack>
#include<fstream>
#include<iostream>
#include<queue>
#include<assert.h>
#define test(t) while(t--)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)

#define p(n) printf("%lld\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>

#define pb push_back
#define inf 1000000000LL
#define mp make_pair

#define N 100004
#define LN 20
//#define inf 100000000

using namespace std;

int bit[20002];
int maxval = 20001;

int update(int idx,int val){

   while(idx<=maxval){
       bit[idx]+=val;

       idx +=(idx & -idx);
   }
}

int query(int idx){

   int ans = 0;

   while(idx>0){
      ans+=bit[idx];
      idx-=(idx & -idx);
   }

   return ans;
}

int a[20001],b[20001];
int main(){


    int n,i,j,k;
    map<int,int>m1;
    cin>>n;
    for(i=0;i<n;++i){
        s(a[i]);
        b[i] = a[i];
    }

    sort(b,b+n);
    m1[b[0]] = 1;
    int id = 1;
    for(i=1;i<n;++i){
        if(b[i]!=b[i-1]){
           id++;
           m1[b[i]] = id;
        }
    }

    for(i=0;i<n;++i)
        a[i] = m1[a[i]];

    vector<pair<int,int> >block[201];
    pair<int,int>que[20002];
    map<pair<int,int>,int>ans;
    int SQN = sqrt(n);
    int q,n1,n2;
    s(q);
    for(i=1;i<=q;++i){
       s(n1);s(n2);
       n1--;n2--;
       int blo = n1/SQN;
       block[blo].pb(make_pair(n2,n1));
       que[i] = make_pair(n1,n2);
    }

    int maxb = (n-1)/SQN;
    for(i=0;i<=maxb;++i)
        sort(block[i].begin(),block[i].end());

    for(i=0;i<=maxb;++i){
       memset(bit,0,sizeof(bit));
       int leftend = (i+1)*SQN;
       int rightend = (i+1)*SQN;
       int an = 0;
       for(j=0;j<block[i].size();++j){
            int lq = block[i][j].second;
            int rq = block[i][j].first;
            if(rq<leftend){
               for(k=lq;k<=rq;++k){
                  an+=(k-lq-query(a[k]));
                  update(a[k],1);
               }
               for(k=lq;k<=rq;++k){
                  update(a[k],-1);
               }
               ans[make_pair(lq,rq)] = an;
               an = 0;
            }else{
               for(k=leftend-1;k>=lq;--k){
                   an+=(query(a[k]-1));
                   update(a[k],1);
               }
               for(k=rightend;k<=rq;++k){
                   an+=(k-lq-query(a[k]));
                   update(a[k],1);
               }
               ans[make_pair(lq,rq)] = an;
               for(k=lq;k<leftend;++k){
                   an-=(query(a[k]-1));
                   update(a[k],-1);
               }
               rightend = rq+1;
            }
       }
    }

    for(i=1;i<=q;++i)
        cout<<ans[que[i]]<<endl;
}
