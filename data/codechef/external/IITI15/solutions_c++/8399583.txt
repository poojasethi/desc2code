#include <bits/stdc++.h>
using namespace std;
int n,sz;
typedef struct node{
	int l,r,i;
}node;
bool cmp(node n1,node n2){
	return (n1.l/sz!=n2.l/sz)?n1.l<n2.l:n1.r<n2.r;
}
void update(int *BIT,int ind,int val) {
	while(ind<=n) {
		BIT[ind]+=val;
		ind+=(ind&-ind);
	}
}
int read(int* BIT,int ind) {
	int sum=0;
	while(ind>0) {
		sum+=BIT[ind];
		ind-=(ind&-ind);
	}
	return sum;
}
int main(){
	cin>>n;sz=ceil(sqrt(n+0.));int a[n];pair<int,int> b[n];
	for(int i=0;i<n;i++) cin>>a[i],b[i].first=a[i],b[i].second=i;sort(b,b+n);
	int rank[n],prev=-1,xc=0;
	for(int i=0;i<n;i++) if(b[i].first!=prev) {rank[b[i].second]=++xc;prev=b[i].first;} else rank[b[i].second]=xc;
	int q;cin>>q;
	node arr[q];
	for(int i=0;i<q;i++) {cin>>arr[i].l>>arr[i].r;
		arr[i].l--;arr[i].r--;arr[i].i=i;}
	int ans[q];
	sort(arr,arr+q,cmp);
	int anst=0,currL=0,currR=0;
	int BIT[n+1];
	memset(BIT,0,sizeof(BIT));
	update(BIT,rank[0],1);
	for(int i=0;i<q;i++) {
		while(currL<arr[i].l) {
			anst-=read(BIT,rank[currL]-1);
			update(BIT,rank[currL],-1);
			currL++;
		}
		while(currR>arr[i].r) {
			anst-=read(BIT,n);
			anst+=read(BIT,rank[currR]);
			update(BIT,rank[currR],-1);
			currR--;
		}
		while(currL>arr[i].l) {
			anst+=read(BIT,rank[currL-1]-1);
			update(BIT,rank[currL-1],+1);
			currL--;
		}
		while(currR<arr[i].r) {
			anst+=read(BIT,n);
			anst-=read(BIT,rank[currR+1]);
			update(BIT,rank[currR+1],+1);
			currR++;
		}
		ans[arr[i].i]=anst;
	}
	for ( int i=0;i<q;i++) cout<<ans[i]<<endl;
	return 0;	
}