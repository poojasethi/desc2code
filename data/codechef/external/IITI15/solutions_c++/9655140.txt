#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define Q 20000
#define N 100000
#define M 400
struct query
{
	int id,l,r;
	ll k;
}querys[Q + 10];
vector <int> games[Q + 10];
map <int,int> mp;
int ar[N + 10];
ll inv[Q + 10];
ll  bit[N + 10];
bool compare(query a,query b)
{
	if(a.l/M == b.l/M) return a.r < b.r;
	return a.l/M < b.l/M;
}
void solve_querys(int,int);
void Update(int x,ll v)
{
	while(x <= N)
	{
		bit[x] = bit[x] + v;
		x += (x & -x);
	}
}
ll Query(int x)
{
	ll sum = 0;
	while(x > 0)
	{
		sum = sum + bit[x];
		x -= (x & -x);
	}
	return sum;
}
int main()
{
	
	int n,q;
	scanf("%d",&n);
	for(int i = 1 ; i<=n ; i++) scanf("%d",&ar[i]);
	scanf("%d",&q);
	int id = 0; 
	for(int i = 1 ; i<=q ; i++)
	{
		id++;
		scanf("%d %d",&querys[id].l,&querys[id].r);
		querys[id].id = id;
	}
	solve_querys(id,n);
	for(int i = 1 ; i<=q ; i++)
	{
		printf("%lld\n",inv[i]);
	}
	return 0;
}
void solve_querys(int q,int n)
{
	sort(querys+1,querys+q+1,compare);
	mp.clear();
	for(int i = 1 ; i<=n ; i++)
	{
		bit[i] = 0;
		mp[ar[i]] = 1;
	}
	int cnt = 0;
	for(map <int,int> :: iterator it = mp.begin() ; it != mp.end() ; it++)
	{
		cnt++;
		(*it).second = cnt;
	}
	for(int i = 1 ; i<=n ; i++)
	{
		ar[i] = mp[ar[i]];
	}
	int l = 1,r = 1;
	Update(ar[1],1);
	ll curinv = 0;
	for(int i = 1 ; i<=q ; i++)
	{
		while(r < querys[i].r)
		{
			r++; Update(ar[r],1);
			curinv = curinv + (Query(cnt) - Query(ar[r]));
		}
		while(r > querys[i].r)
		{
			Update(ar[r],-1);
            curinv = curinv - (Query(cnt) - Query(ar[r]));
            r--;
		}
		while(l > querys[i].l)
		{
			l--;
			Update(ar[l],1);
			curinv = curinv + Query(ar[l]-1);
		}
		while(l < querys[i].l)
		{
			Update(ar[l],-1);
            curinv = curinv - Query(ar[l]-1);
            l++;
		}
		inv[querys[i].id] = curinv;//%(querys[i].k + 1);
		//cout<<curinv<<endl;
	}
}