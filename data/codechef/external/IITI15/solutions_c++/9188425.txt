#include <bits/stdc++.h>

#define pf printf
#define sf scanf
#define INF 2000000000
#define pi (acos(-1.0))
#define i64 long long int
#define DBG printf("Hi\n")
#define loop for(i =1 ; i<=n; i++)
#define mp make_pair
#define mod 1000000007
#define maxn 1000005
#define ff first
#define sc second

using namespace std ;
int block , sum[20005] , k , offans[20005] , a[20005] ;
struct entry{
    int en, id ;
}inp[20004];
bool comp1(struct entry en1, struct entry en2){return (en1.en<en2.en) ; }

struct query{
    int l , r , id ;
}qu[20005];

bool comp2(struct query qu1, struct query qu2 )
{
    if(qu1.l/block != qu2.l/block) return ( qu1.l/block<qu2.l/block ) ;
    return (qu1.r>qu2.r) ;
}

void update(int idx, int val)
{
    while(idx<=k){
        sum[idx] += val ;
        idx += (idx&(-idx)) ;
       // pf("%d %d")
    }
    return ;
}
int query(int idx)
{
    int ret = 0 ;
    while(idx>0){
        ret += sum[idx] ;
        idx -= (idx&(-idx)) ;
    }
    return ret ;
}


int main()
{
    int i , j , l , r , m , n , ans , q , ret ;

    sf("%d",&n) ;

    loop {
        sf("%d",&inp[i].en) ;
        inp[i].id = i ;
    }
    sort( inp+1 , inp+n+1 , comp1) ;

    for( i = 1 , k = 0 ; i<=n ; i++ )
    {
        if(inp[i-1].en==inp[i].en){
            a[inp[i].id] = k ;
        }
        else a[inp[i].id] = ++k ;
    }

 //   for(i =1 ; i<=n ; i++) pf("%d ",a[i]) ;
  //  pf("\n") ;

    sf("%d",&q) ;

    for(i =1 ; i<=q ; i++)
    {
        sf("%d %d",&qu[i].l,&qu[i].r) ;
        qu[i].id = i ;
    }

    block = sqrt(n) ;

    sort( qu+1 , qu+1+q , comp2) ;

    l = r = 1 ; ans = 0 ;
    update(a[1],1) ;


    for( i =  1 ; i<=q ; i++){
       //     pf("%d %d\n",qu[i].l,qu[i].r) ;
        while(l<qu[i].l){
            ret = query(a[l]-1) ;
        //    DBG ;
            ans-=ret ;
            update(a[l],-1) ;
            l++ ;
        }
   // DBG ;
        while(l>qu[i].l){
            l--;
            update(a[l],1) ;
            ret = query(a[l]-1) ;
            ans+= ret ;
        }
     //   DBG ;
        while(r<qu[i].r){
            r++ ;
            update(a[r],1) ;
            ret = query(a[r]) ;
            ans += ((r-l+1) - ret) ;
         //   pf("main %d %d\n",r,ans) ;
        }
       // DBG ;
        while(r>qu[i].r){
            ret = query(a[r]) ;
            ans -= ((r-l+1) - ret) ;
            update(a[r],-1) ;
            r-- ;
        }
       // DBG ;
        offans[qu[i].id] = ans ;
    //    pf("%d %d %d\n",l,r,ans) ;
    }

    for(i =1 ; i<=q ; i++) pf("%d\n",offans[i]) ;

    return 0 ;
}
