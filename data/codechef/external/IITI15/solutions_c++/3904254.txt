#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<ctime>
#include<assert.h>

#include<cmath>
#include<iostream>
#include<fstream>

#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>
#include<limits.h>

using namespace std;

#define MAX(a,b) ((a)>(b) ? (a) : (b))
#define MIN(a,b) ((a)<(b) ? (a) : (b))
#define EPS 1e-9
#define asdf exit(0);


typedef long long LL;



int sum[20002];
int a[20002];

struct NODE
{
    int l,r;
    int id;
}node[20002];


int ans[20002];


struct cmp
{
    bool operator()(const NODE& n1,const NODE& n2)
    {
        return n1.l>n2.l;
    }
};




int main()
{
    //freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
    int n,i,j,k,q;
    scanf("%d",&n);
    for(i=0;i<n;i++) scanf("%d",&a[i]);

    scanf("%d",&q);

    for(i=0;i<q;i++)
    {
        scanf("%d %d",&node[i].l,&node[i].r);
        node[i].l--;
        node[i].r--;
        node[i].id = i;
    }

    sort(node,node+q,cmp());
    //Sort in order of decreasing l value of Queries

    k=0;
    int cnt=0;
    for(i=n-1;i>=0;i--)
    {
        cnt=0;
        for(j=i+1;j<n;j++)
        {	
            if(a[j]<a[i]) 
            	cnt++;
            sum[j]+=cnt;
        }

        while(k<q && node[k].l==i)
        {
            ans[node[k].id]=sum[node[k].r];
            k++;
        }
    }

    for(i=0;i<q;i++)
    {
        printf("%d\n",ans[i]);
    }

    return 0;
}
