#include<iostream>
#include<algorithm>
#include<map>
#include<cmath>
#include<cstdio>
using namespace std;

struct data
{
int l,r,i;
};
int blocks;
struct data que[2*100000+10];
int n,q;
int ans[100007];
int a[100007];
int temp;
int tree[1000000];
map<int,int>m;
bool cmp(struct data a,struct data b)
{
if(a.l/blocks!=b.l/blocks)
return a.l/blocks<b.l/blocks;
return a.r<b.r;
}

void update(int i,int val)
{
while(i<=n+2)
{
tree[i]+=val;
i+=i&-i;
}
}

int query(int i)
{
int sum=0;
while(i>0)
{
sum+=tree[i];
i-=i&-i;
}
return sum;
}

void func()
{
blocks=(int)sqrt(n);
int c=0;
map<int,int>::iterator j;
for(j=m.begin();j!=m.end();j++)
m[j->first]=++c;
for(int i=0;i<q;i++)
{
scanf("%d%d",&que[i].l,&que[i].r);
que[i].l--;
que[i].r--;
que[i].i=i;
}
sort(que,que+q,cmp);
int l=0,r=0;
update(m[a[0]],1);
for(int i=0;i<q;i++)
{
while(r<que[i].r)
{
r++;
temp+=query(n+2)-query(m[a[r]]);
update(m[a[r]],1);
}
while(r>que[i].r)
{
temp-=query(n+2)-query(m[a[r]]);
update(m[a[r]],-1);
r--;
}
while(l<que[i].l)
{
temp-=query(m[a[l]]-1);
update(m[a[l]],-1);
l++;
}
while(l>que[i].l)
{
l--;
temp+=query(m[a[l]]-1);
update(m[a[l]],1);
}
ans[que[i].i]=temp;
}
for(int i=0;i<q;i++)
printf("%d\n",ans[i]);
}

int main()
{
//ios_base::sync_with_stdio(false);
scanf("%d",&n);
for(int i=0;i<n;i++)
{
scanf("%d",&a[i]);
m[a[i]];
}
scanf("%d",&q);
func();
return 0;
}
