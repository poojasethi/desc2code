#include <cstdio>
#include <algorithm>
#include <map>
using namespace std;

int queryRoot;

struct query {
	int l, r, i, i2;
	
	query() {}
	
	query(int left, int right, int index)
	{
		l = left;
		r = right;
		i = index;
		i2 = i;
	}
};

bool cmpQueryLeft(query a, query b)
{
	return a.l < b.l;
}

bool cmpQueryRight(query a, query b)
{
	if(a.l/queryRoot != b.l/queryRoot)
		return false;
	return a.r < b.r;
}

int bit[20001];

void update(int i, int x)
{
	while(i <= 20000)
	{
		bit[i] += x;
		i += (i & -i);
	}
}

int get(int i)
{
	int ans = 0;
	while(i > 0)
	{
		ans += bit[i];
		i -= (i & -i);
	}
	return ans;
}

int sqrt(int x)
{
	int a=1, b=x;
	while(a != b)
	{
		int mid = a+(b-a)/2;
		
		if(mid*mid < x) a = mid+1;
		else b = mid;
	}
	
	return a;
}

int main()
{	
	int n, q;
	int array[20000], answer[20000], arrayCopy[20000];
	query queryList[20000];
	
	scanf("%d", &n);
	for(int i=0; i<n; i++)
	{
		scanf("%d", &array[i]);
		arrayCopy[i] = array[i];
	}
	
	scanf("%d", &q);
	for(int i=0; i<q; i++)
	{
		int l, r;
		scanf("%d %d", &l, &r);
		queryList[i] = query(l-1, r-1, i);
	}
	
	queryRoot = sqrt(q);
	sort(queryList, queryList+q, cmpQueryLeft);
	sort(queryList, queryList+q, cmpQueryRight);
	
	map<int,int> lineariser;
	sort(arrayCopy, arrayCopy+n);
	
	for(int i=0; i<n; i++)
	{
		if(not lineariser.count(arrayCopy[i]))
			lineariser[arrayCopy[i]] = i+1;
		bit[i] = 0;
	}
	
	for(int i=0; i<n; i++)
		array[i] = lineariser[array[i]];
			
	int a=0, b=0, inv=0;
	update(array[0], +1);
	
	for(int i=0; i<q; i++)
	{
		while(b != queryList[i].r)
		{
			if(b < queryList[i].r)
			{
				inv += get(n) - get(array[++b]);
				update(array[b], +1);
			}
			
			if(b > queryList[i].r)
			{
				inv -= get(n) - get(array[b]);
				update(array[b--], -1);
			}
		}
		
		while(a != queryList[i].l)
		{
			if(a < queryList[i].l)
			{
				inv -= get(array[a]-1);
				update(array[a++], -1);
			}
			
			if(a > queryList[i].l)
			{
				inv += get(array[--a]-1);
				update(array[a], +1);
			}
		}
		
		answer[queryList[i].i] = inv;
	}
	
	for(int i=0; i<q; i++)
		printf("%d\n", answer[i]);
	
	return 0;
}
