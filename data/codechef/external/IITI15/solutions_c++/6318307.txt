#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

map <int,int> mymap;
int a[20009],b[20009];
int tree[20009],maxval,sqroot,ans[20009],idx[20009];

struct query{
    int L,R,i;
};

query q[20009];

void update(int j,int k)
{
    while(j <= maxval)
    {
     //   cout << j << " " << "update" << endl;
        tree[j] += k;
        j += (j & -j);
    }
}

int sum(int j)
{
    int sum = 0;
    while(j > 0)
    {
      //  cout << j << " " << "add" << endl;
        sum += tree[j];
        j -= (j & -j);
    }
    return sum;
}

bool cmp(query L,query R)
{
    if(L.L / sqroot != R.L / sqroot)
        return (L.L / sqroot < R.L / sqroot);
    return (L.R / sqroot < R.R / sqroot);
}


int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    memset(tree,0,sizeof(tree));
    int n;s(n);
    sqroot = sqrt(n);
    REP(i,0,n - 1)
    {
        s(a[i]);
        b[i] = a[i];
    }
    sort(b,b + n);
    REP(i,0,n - 1)
        mymap[b[i]] = i + 1;
    maxval = n;
    REP(i,0,n - 1)
        idx[i] = mymap[a[i]];
    int m;s(m);
    REP(i,0,m - 1)
    {
        int a,b;s(a);s(b);
        a--;
        b--;
        q[i].L = a;
        q[i].R = b;
        q[i].i = i;
    }
    sort(q , q + m, cmp);
    int preans = 0 , prevL = q[0].L , prevR = q[0].R;
    REP(i,prevL,prevR)
    {
        preans += sum(n) - sum(idx[i]);
        update(idx[i],1);
    }
    ans[q[0].i] = preans;
    //cout << q[0].i <<  " " << preans << endl;
    REP(k,1,m - 1)
    {
        int curR = q[k].R , curL = q[k].L;
        REP(j,prevL,curL - 1)
        {
        //    cout << k << "1" << endl;
            preans -= sum(idx[j] - 1);
            update(idx[j] , -1);
        }
       // cout << preans << endl;
        for( int j = prevL - 1; j >= curL; j-- )
        {
        //    cout << "2" << endl;
            preans += sum(idx[j] - 1);
            update(idx[j] , 1);
        }
        //cout << preans << endl;
        REP(j,prevR + 1,curR)
        {
        //    cout << "3" << endl;
            preans += sum(n) - sum(idx[j]);
            update(idx[j] , 1);
        }
        //cout << preans << endl;
        for(int j = prevR;j >= curR + 1;j--)
        {
      //      cout << "4" << endl;
            preans -= sum(n) - sum(idx[j]);
            update(idx[j] , -1);
        }
        //cout << preans << endl;
        prevL = curL;
        prevR = curR;
        ans[q[k].i] = preans;
        //cout << "HELLO " << preans << " " << q[k].i << endl;
    }
    REP(i,0,m - 1)
        printf("%d\n",ans[i]);
    return 0;
}
