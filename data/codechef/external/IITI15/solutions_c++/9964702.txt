#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

typedef pair <ll, ll> pii;
typedef pair<ll,pii> piii;
#define fi first
#define sc second
#define mkp make_pair

bool cnt[1000007];
ll ar[1000007];
ll tmp[100007];
ll BLOCKSIZE;
ll qans[1000007];
ll f[1000007];
ll BIT[20007];
map <ll, ll> mp;

void update(ll idx, ll v) {
    for (ll i = idx ; i <= 20001; i = i + (i & -i)) {
        BIT[i] = BIT[i] +  v;
    }
}
ll  query(ll idx) {
    ll s = 0;
    for (ll i = idx; i > 0; i = i - (i & -i)) {
        s = s + BIT[i];
    }
    return s;
}

vector <piii> queries;

long long  ans = 0;

ll calBLOCKSIZE (ll n) {
    BLOCKSIZE = sqrt(n);
}
ll BLOCKIDX(ll n) {
    return (n / BLOCKSIZE);
}
bool cmp1(const piii a, const piii b) {
    if (BLOCKIDX(a.sc.fi)  == BLOCKIDX(b.sc.fi)) {
        return a.sc.sc < b.sc.sc;
    } 
    return BLOCKIDX(a.sc.fi)  <  BLOCKIDX(b.sc.fi);
}

ll cl = 0;
ll cr = 0;

void operate(ll l, ll r) {
    while (cl < l) {
        ll x = query(mp[ar[cl]]-1);
       /// cout <<"*"<<" " <<l <<" " <<x << endl;
        
        ans = ans - x;
        update (mp[ar[cl]],-1);
        cl++;
    }
    // cout <<ans <<endl;
    while (cl >  l) {
        cl--;
        ll x = query(mp[ar[cl]]-1);
        ans = ans + x;
        update (mp[ar[cl]], 1);
    }

    while (cr < r) {
        cr ++;
        ll x = query(20000) - query(mp[ar[cr]]);
        ans = ans + x;
        update (mp[ar[cr]], 1);
    }
  
    while (cr >  r) {
        ll x = query(20000) - query(mp[ar[cr] ] );
        ans = ans - x;
        update (mp[ar[cr]], -1);
        cr --;
    }
}

int main()
{
    //freopen("/home/spharish/input.txt", "r", stdin);
    ll n;
    scanf ("%lld", &n);
    
    calBLOCKSIZE(n);
    for (ll  i = 1; i <= n; i++) {
        scanf ("%lld", &ar[i]);
        tmp[i-1] = ar[i];
    }
    sort(tmp, tmp + n);
    ll cntr = 1;
    for (ll i = 0 ; i  < n; i++) {
        if (i == 0) {
            mp[tmp[i]] = cntr++;
        }
        else if (tmp[i] != tmp[i-1]) {
            mp[tmp[i]] = cntr++;
        }
    }
    // for (ll i = 1; i <= n; i++) {
    //     cout <<ar[i] <<" "<<mp[ar[i]]<<endl;
    // }
    ll q;
    cin >> q;
    for (ll i = 0; i < q; i++) {
        ll l, r;
        scanf("%lld%lld", &l, &r);
        queries.push_back(mkp(i,mkp(l,r)));
    }
    sort (queries.begin(), queries.end(), cmp1);
    cl = queries[0].sc.fi;
    cr = cl-1;

    for (ll i = 0; i < q; i++) {
       //cout << cl <<" " << cr <<" " << queries[i].sc.fi <<" "<<  queries[i].sc.sc <<" "<<ans<<endl;
        operate(queries[i].sc.fi, queries[i].sc.sc);
     //   cout << cl <<" " << cr <<" " << queries[i].sc.fi <<" "<<  queries[i].sc.sc <<" "<<ans<<endl;
        qans[queries[i].fi] = ans;
        // cout <<ans <<endl;
    }
    for (ll i = 0; i < q; i++)
        printf ("%lld\n", qans[i]);
}