#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
#define LL long long
#define PB push_back
#define MP make_pair
#define ff first
#define ss second
#define DEBUG(lol) cout<<#lol<<" "<<(lol)<<endl;
using namespace std;
const int MAXN = 20005;
const int MAXS = 150;
const int S = 141;
const int czapa = 32768;
int drz[2 * czapa + 1];
int n, a, b, m;

LL INW[MAXS][MAXN];
int wieksze[MAXS][MAXN];
int tab[MAXN];
pair<int, int> num[MAXN];


void wrzuc(int poz)
{
  poz += czapa;
  while(poz >= 1)
  {
    drz[poz]++;
    poz >>= 1;
  }
}
void wyrzuc(int poz)
{
  poz += czapa;
  while(poz >= 1)
  {
    drz[poz]--;
    poz >>= 1;
  }
}
int szukaj(int poza, int pozb)
{
  poza += czapa;
  pozb += czapa;
  
  int ret = drz[poza];
  if(poza != pozb)
    ret += drz[pozb];
  while(poza / 2 != pozb / 2)
  {
    if(poza % 2 == 0)
      ret += drz[poza + 1];
    if(pozb % 2 == 1)
      ret += drz[pozb - 1];
    poza >>= 1;
    pozb >>= 1;
  }
  return ret;
  
}
int main()
{

  scanf("%d", &n);
  for(int i = 1; i <= n; i++)
  {
    scanf("%d", &num[i].ff);
    num[i].ss = i;    
  }
  sort(num + 1, num + 1 + n);
  int x = 0;
  num[0].ff = -1;
  for(int i = 1; i <= n; i++)
  {
    if(num[i].ff != num[i - 1].ff)
    {
      x++;
    }
    tab[num[i].ss] = x;
  }
  
  for(int i = 1; i * S <= n; i++)
  {
    LL inwersje = 0;
    for(int j = 1; j <= i * S; j++)
    {
      inwersje += szukaj(tab[j] + 1, n + 1);
      wrzuc(tab[j]);
    }
    wieksze[i][i * S] = szukaj(tab[i * S] + 1, n + 1);
    INW[i][i * S] = inwersje;
    for(int j = i * S + 1; j <= n; j++)
    {
      inwersje -= szukaj(0, tab[j - i * S] - 1);
      wyrzuc(tab[j - i * S]);
      wieksze[i][j] = szukaj(tab[j] + 1, n + 1);
      inwersje += wieksze[i][j];
      wrzuc(tab[j]);
      INW[i][j] = inwersje;
    }
    for(int j = n; j > n - i * S; j--)
      wyrzuc(tab[j]);
  }
  
  scanf("%d", &m);
  while(m--)
  {
    scanf("%d %d", &a, &b);
    
    int dlugosc = b - a + 1;
    int iloraz = dlugosc / S;

    LL inwersje = INW[iloraz][a + iloraz * S - 1];

    for(int i = a + iloraz * S; i <= b; i++)
    {
      wrzuc(tab[i - iloraz * S]);
      inwersje += wieksze[iloraz][i] + szukaj(tab[i] + 1, n + 1);
    }    
    for(int i = a + iloraz * S; i <= b; i++)
    {
      wyrzuc(tab[i - iloraz * S]);     
    }
    printf("%lld\n", inwersje);
  }
  
  return 0;
}