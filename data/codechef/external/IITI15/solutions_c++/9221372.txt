#include<bits/stdc++.h>
#define f first
#define s second
int blk =141;
using namespace std;
typedef long long li;
typedef pair < int , int > ii;
typedef pair < ii , int > iii;

iii Q[2*10000+1];
int  tree[4*10000+1];
li answer[2*10000+1];

bool cmp(iii A , iii B){
    if(A.f.f/blk!=B.f.f/blk)
        return A.f.f/blk<B.f.f/blk;
    return A.f.s<B.f.s;
}

li query(int x){
    li ret = 0;
    for(x+=10;x;x-=x&-x)ret+=tree[x];
    return ret;
}

void update(int x  , int val){
    for(x+=10;x<=20020;x+=x&-x)tree[x]+=val;
}



void add(int x , li &ans, char a){
    if(a=='L'){
        update(x,1);
        ans+=query(x-1);
    }
    else{
        ans+=query(20000) - query(x);
        update(x,1);
    }
}
void rem(int x , li &ans,char a){
    if(a=='L'){
        ans-=query(x-1);
        update(x,-1);
    }
    else{
        ans-=query(20000) - query(x);
        update(x,-1);
    }
}

int main()
{

    ios::sync_with_stdio(0);
    cin.tie(0);
    int N , i , j , M ;
    cin>>N;
    vector < int > arr(N),V;
    for(i=0;i<N;++i){
        cin>>arr[i];
        V.push_back(arr[i]);
    }
    sort(V.begin(),V.end());
    for(i=0;i<N;++i)
        arr[i] = lower_bound(V.begin(),V.end(),arr[i])-V.begin();
    cin>>M;
    
    for(i=0;i<M;++i){
        cin>>Q[i].f.f>>Q[i].f.s;
        Q[i].f.f--;
        Q[i].f.s--;
        Q[i].s = i;
    }

    sort(Q,Q+M,cmp);

    int cur_l = 0 , cur_r = 0;

    li ans = 0;

    add(arr[cur_l],ans,'L');

    for(i=0;i<M;++i){

        while(cur_l<Q[i].f.f){
            rem(arr[cur_l],ans,'L');
            ++cur_l;
        }
        while(cur_l>Q[i].f.f){
            --cur_l;
            add(arr[cur_l],ans,'L');
        }
        while(cur_r<Q[i].f.s){
            ++cur_r;
            add(arr[cur_r],ans,'R');
        }
        while(cur_r>Q[i].f.s){
            rem(arr[cur_r],ans,'R');
            --cur_r;
        }

        answer[Q[i].s]=ans;
    }

    for(i=0;i<M;++i)cout<<answer[i]<<'\n';
    return 0;
}
