#include <bits/stdc++.h>
using namespace std; 
#define rep(i,n)        for(int i = 0;  i < n ; ++i)
#define REP(i,a,b)      for(int i = a ; i <= b; ++i)
#define pii             pair<int,int> 
#define pb(a)           push_back(a)
#define ll              long long
#define MOD             1000000007
#define pil             pair<int,long long>
#define mp              make_pair
#define CLR(x,a)        memset(x,a,sizeof(x))
#define pll             pair<ll,ll>
static struct IO {
char tmp[1 << 10];
// fast input routines
char cur;
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
inline char nextChar() { return cur = getc(stdin); }
inline char peekChar() { return cur; }
inline operator bool() { return peekChar(); }
inline static bool isBlank(char c) { return (c < '-' && c); }
inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
inline IO& operator >> (char & c) { c = nextChar(); return *this; }
inline IO& operator >> (char * buf) {
if (skipBlanks()) {
if (peekChar()) {
*(buf++) = peekChar();
while (!isBlank(nextChar())) *(buf++) = peekChar();
} *(buf++) = 0; } return *this; }
inline IO& operator >> (string & s) {
if (skipBlanks()) { s.clear(); s += peekChar();
while (!isBlank(nextChar())) s += peekChar(); }
return *this; }
inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
// fast output routines
//#define putChar(c) putc_unlocked((c), stdout)
inline void putChar(char c) { putc(c, stdout); }
inline IO& operator << (char c) { putChar(c); return *this; }
inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
inline IO& operator << (double d) { return (*this) << toString(d); }
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
defineOutFor(int)
defineOutFor(long long)
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
struct queryy{
    int L , R , id ; 
};
int idx = 1 ,N;
long long answer = 0 ;  
vector<int> arr ;
long long tree[4*20000] ;
int BLOCK ;  
struct cmp{
    bool operator()(const queryy &q1 , const queryy &q2){
        if(q1.L/BLOCK == q2.L/BLOCK){
            return q1.R < q2.R ; 
        }
        return q1.L/BLOCK < q2.L/BLOCK ; 
    }
};
long long query(int node , int a , int b , int i , int j ){
    if(a >= i and b <= j){
        return tree[node] ; 
    }
    if(i > b or j < a or j < i){
        return 0 ; 
    }
    return query(2*node,a,(a+b)/2,i,j) + query(2*node+1,(a+b)/2 + 1 ,b , i , j); 
}
void update(int node , int a , int b , int X,int v){
    if(a == b and a == X){
        tree[node] += v ; 
        return ; 
    }
    if(a > X or b < X){
        return ; 
    }
    update(2*node,a,(a+b)/2,X,v) ; 
    update(2*node+1,(a+b)/2 + 1, b ,X,v) ; 
    tree[node] = tree[2*node] + tree[2*node+1] ; 
}
void remove1(int ind){
    answer -= query(1,1,N,1,arr[ind]-1) ; 
    update(1,1,N,arr[ind],-1) ; 
}
void remove2(int ind){
    answer -= query(1,1,N,arr[ind]+1,N) ; 
    update(1,1,N,arr[ind],-1) ; 
}
void add1(int ind){
    answer += query(1,1,N,1,arr[ind]-1) ; 
    update(1,1,N,arr[ind],1) ; 
}
void add2(int ind){
    answer += query(1,1,N,arr[ind]+1,N) ; 
    update(1,1,N,arr[ind],1) ; 
}
int main(){
  //  freopen("input.txt","r",stdin) ; 
    cin >> N ;
    arr.resize(N) ;   
    BLOCK = sqrt(N); 
    set<int> s ; 
    map<int,int> id ; 
    for(int i = 0 ; i < N ; ++i){
        cin >> arr[i] ; 
        s.insert(arr[i]) ; 
    }
    for(set<int>::iterator itr = s.begin() ; itr != s.end() ; ++itr){
        id[*itr] = idx++ ; 
    }
    for(int i = 0 ; i < N ; ++i){
        arr[i] = id[arr[i]] ; 
    }
    int currL = 0 , currR = 0 ; 
    int Q ; 
    cin >> Q ; 
    vector<queryy> q(Q) ; 
    for(int i = 0 ; i < Q ; ++i){
        cin >> q[i].L >> q[i].R ; 
        q[i].L-- , q[i].R-- ; 
        q[i].id = i ; 
    } 
    sort(q.begin() , q.end(),cmp()) ; 
    answer = 0 ; 
    vector<long long> ans(Q) ; 
    for(int i = 0 ; i < Q ; ++i){
        int L = q[i].L , R = q[i].R ; 
     //   cout << L << " " << R << "\n" ; 
        while(currL < L){
            remove1(currL) ;
        //    cout << arr[currL] << "\n" ; 
            currL++ ; 
        }
       // cout << answer << "\n" ; 
        while(currL > L){
            add1(currL-1) ; 
        //    cout << arr[currL-1] << "\n" ; 
            currL-- ; 
        }
       // cout << answer << "\n" ; 
        while(currR <= R){
            add2(currR) ; 
       //     cout << arr[currR] << "\n" ; 
            currR++ ; 
        }
      //  cout << answer << "\n" ; 
        while(currR > R+1){
            remove2(currR-1) ;
        //    cout << arr[currR-1] << "\n" ; 
            currR-- ; 
        }
     //   cout << answer << "\n" ; 
        ans[q[i].id] = answer; 
    //    cout << q[i].id << "\n" ;  
    }
    for(int i = 0 ; i < Q ; ++i){
        cout << ans[i] << "\n" ; 
    }
    return 0 ; 
}