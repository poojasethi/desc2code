#include<stdio.h>
int grid[8][8];
int input[8][2];
void protect(int row,int col)
{
	int i,j;
	// Protect column
	for(i = 0;i < 8;i++)
		if(i != col)
			grid[row][i] += 16 - abs(i-col)*2;
		
	// Protect row
	for(i = 0;i < 8;i++)
		if(i != row)
			grid[i][col] += 16 - abs(i-row)*2;
	
	// Protect diagonal
	i = row+1;j = col+1;
	while(i < 8 && j < 8)
	{
		grid[i][j] += 8 - abs(i-row);
		i++;
		j++;
	}
	i = row-1;j = col-1;
	while(i >= 0 && j >= 0)
	{
		grid[i][j] += 8 - abs(i-row);
		i--;
		j--;
	}
	i = row-1;j = col+1;
	while(i >= 0 && j < 8)
	{
		grid[i][j] += 8 - abs(i-row);
		i--;
		j++;
	}
	i = row+1;j = col-1;
	while(i < 8 && j >= 0)
	{
		grid[i][j] += 8 - abs(i-row);
		i++;
		j--;
	}
}

int find_max()
{
	int max = -1000,i,j;
	for(i = 0;i < 8;i++)
		for(j = 0;j < 8;j++)
			if(grid[i][j] > max)
				max = grid[i][j];			
	return max;	
}

void print_grid()
{
	int i,j;
	for(i = 0;i < 8;i++)
	{
		for(j = 0;j < 8;j++)
			printf("%d ",grid[i][j]);
		printf("\n");
	}
}

int main()
{
	int n,i,j,row,col,position,max;
	scanf("%d",&n);
	while(n--)
	{
		for(i = 0;i < 8;i++)
			for(j = 0;j < 8;j++)
				grid[i][j] = 0;
		for(i = 0;i < 8;i++)
		{
			scanf("%d",&position);
			row = 7 - (position-1)/8;
			if(row%2)
				col = (position-1)%8;
			else
				col = 7 - (position-1)%8;				
			input[i][0] = row;
			input[i][1] = col;
			protect(row,col);
			//printf("After pass : %d\n",i+1);
			//print_grid();
		}
		for(i = 0;i < 8;i++)
			grid[input[i][0]][input[i][1]] = 0;
		//printf("Final grid\n");
		//print_grid();
		max = find_max();
		for(i = 7;i >= 0;i--)
		{
			if(i%2)
			{
				for(j = 0;j < 8;j++)
				{
					if(grid[i][j] == max)
						printf("%d ",(7-i)*8 + j + 1);
				}
			}
			else
			{
				for(j = 7;j >= 0;j--)
				{
					if(grid[i][j] == max)
						printf("%d ",(7-i)*8 + (7-j) + 1);
				}
			}
		}
		printf("\n");
	}
	return 0;
}
