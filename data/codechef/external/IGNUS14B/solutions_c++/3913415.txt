#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector <int> vi;
typedef pair <int,int> pii;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz(a) (int)a.size()
#define all(c) c.begin(), c.end()
#define rep(i, n) for(int i = 0; i < (n); i++)
#define rept(i, a, b) for(int i = (a); i < (b); i++)
#define fill(a, v) memset(a, v, sizeof(a))
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

#define N 100100
int odd[N], even[N];

void manacher(string s) {
    int n = (int)s.length();
    int l = 0, r = -1;

    // calculate odd length palindromes centered at i
    for(int i = 0; i < n; i++) {
        int k = (i > r ? 0 : min(odd[l + r - i], r - i)) + 1;
        while(i + k < n && i - k >= 0 && s[i - k] == s[i + k]) k++;
        odd[i] = --k;
        if(i + k > r) l = i - k, r = i + k;
    }

    // calculate even length palindromes centered at i and i - 1
    l = 0, r = -1;
    for(int i = 0; i < n; i++) {
        int k = (i > r ? 0 : min(even[l + r - i + 1], r - i + 1)) + 1;
        while(i + k - 1 < n && i - k >= 0 && s[i - k] == s[i + k - 1]) k++;
        even[i] = --k;
        if(i + k - 1 > r) l = i - k, r = i + k - 1;
    }
}

char buf[N];
int primesCount[N];

bool isPrime(int n) {
    if(n < 2) return false;
    for(int i = 2; i * i <= n; i++) if(n % i == 0) return false;
    return true;
}

int main() {
    primesCount[0] = 0;
    rept(i, 1, N) primesCount[i] = primesCount[i - 1] + isPrime(i);
    int tests;
    scanf("%d", &tests);
    while(tests--) {
        scanf("%s", buf);
        manacher(buf);
        int n = strlen(buf);
        int ans = 0;
        rep(i, n) {
            if(even[i] > 0) ans++;
            if(odd[i] > 0) ans += primesCount[2 * odd[i] + 1] - 1;
        }
        printf("%d\n", ans);
    }
    return 0;
}