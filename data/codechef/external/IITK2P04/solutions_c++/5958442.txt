#include<bits/stdc++.h>
using namespace std;
#define ll long long

int arr[1010][1010];

int num[1000010]={0};

vector<int> edges[1000010];

bool visited[1000010]={false};

int diameter(int i)
{
	vector<int> nodes;
	nodes.push_back(i);
	queue<int> bfs;
	bfs.push(i);
	int cnted=0,temp;
	visited[i]=true;
	int last=i;
	while(!bfs.empty())
	{
		temp=bfs.front();
		cnted+=edges[temp].size();
		last=temp;
		bfs.pop();
		for(int j=0;j<edges[temp].size();j++)
		{
			if(!visited[edges[temp][j]])
			{
				bfs.push(edges[temp][j]);
				visited[edges[temp][j]]=true;
				nodes.push_back(edges[temp][j]);
			}
		}
	}
	pair<int,int>tempp;
	if(cnted == 2*(nodes.size()-1))
	{
		for(int j=0;j<nodes.size();j++)visited[nodes[j]]=false;
		queue<pair<int,int> > bf;
		bf.push(make_pair(last,0));
		visited[last]=true;
		
		while(!bf.empty())
		{
			tempp=bf.front();
			
			last=tempp.second;
			temp=tempp.first;
			bf.pop();
			for(int j=0;j<edges[temp].size();j++)
			{
				if(!visited[edges[temp][j]])
				{
					bf.push(make_pair(edges[temp][j],last+1));
					visited[edges[temp][j]]=true;
					//nodes.push_back(edges[temp][j]);
				}
			}
		}
		//cout<<i<<" "<<nodes.size()<<endl;
		return last;
	}
	//cout<<i<<" "<<nodes.size()<<endl;
	return -1;
}
int main()
{
	
	int n,m;
	scanf("%d%d",&n,&m);
	//cout<<n<<" "<<m<<endl;
	std::map<int,int> mymap;
  	std::map<int,int>::iterator it;
	
	int cnt=1;
	//cout<<cnt<<endl;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			scanf("%d",&arr[i][j]);
			//cout<<arr[i][j]<<" ";
			if(mymap.count(arr[i][j]) > 0)
			{
				arr[i][j]=mymap[arr[i][j]];
				num[arr[i][j]]++;
			}
			else
			{
				mymap[arr[i][j]]=cnt;
				arr[i][j]=cnt;
				num[arr[i][j]]++;
				++cnt;
			}
			//cout<<arr[i][j]<<" ";
		}
		//cout<<endl;
	}
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(i<n-1)
			{
				if(arr[i][j]==arr[i+1][j])
				{
					edges[i*n+j].push_back(i*n+n+j);
					edges[i*n+n+j].push_back(i*n+j);
					//cout<<i*n+j<<" "<<i*n+n+j<<endl;
				}
			}
			if(j<m-1)
			{
				if(arr[i][j]==arr[i][j+1])
				{
					edges[i*n+j].push_back(i*n+1+j);
					edges[i*n+1+j].push_back(i*n+j);
					//cout<<i*n+j<<" "<<i*n+1+j<<endl;
				}
			}
		}
	}
	
	long long res=1;
	for(int i=0;i<n*m;i++)
	{
		if(visited[i]==false)
		{
			
			int temp=diameter(i)+1;
			
			if(temp==0)
			{
				res=max(res,(long long)num[arr[i/n][i%m]]);
			}
			else res=max(res,(long long)temp);
		}
	}
	cout<<res<<endl;
	
	
	
	
} 