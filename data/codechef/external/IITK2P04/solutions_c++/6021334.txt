#include <bits/stdc++.h>
using namespace std;
int a[1005][1005];
int no[1000005];
int level[1000005];
int parent[1000005];
int v[1000100][5];
int visit[1000005];
int visit1[1000005];
int bfs(int check,int src)
{
    int sink,d,i;
    queue <int> q;
    q.push(src);
    parent[src]=src;
    visit[src]=check;
    level[src]=1;
    int m1=0,mindex=src;
    while(!q.empty())
    {
        d = q.front();
        q.pop();
        int l1=v[d][0];
        for(i=1;i<=l1;i++)
        {
            if(visit[v[d][i]]!=check)
            {
                level[v[d][i]]=level[d]+1,q.push(v[d][i]),visit[v[d][i]]=check,parent[v[d][i]]=d;
                m1=level[v[d][i]],mindex=v[d][i];
            }
            else if(parent[d]!=v[d][i])
                return -1;
        }
    }
    return mindex;
}

int bfs1(int check,int src)
{
    int sink,d,i;
    queue <int> q;
    q.push(src);
    parent[src]=src;
    visit1[src]=check;
    level[src]=1;
    int m1=0,mindex=src;
    while(!q.empty())
    {
        d = q.front();
        q.pop();
        int l1 =v[d][0];
        for(i=1;i<=l1;i++)
        {
            if(visit1[v[d][i]]!=check)
            {
                level[v[d][i]]=level[d]+1,q.push(v[d][i]),visit1[v[d][i]]=check;
                m1=level[v[d][i]],mindex=v[d][i];
            }
        }
    }
    return mindex;
}
int dia(int src,int m)
{
    int sink = bfs1(src,src);
    sink = bfs(1,sink);
    if(sink==-1)
    {
        int d=no[a[src/m][src%m]];
        no[a[src/m][src%m]]=-1;
        return d;
    }
    return level[sink];
}

int main()
{
    int n,k,m,i,j,l;
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++)
        for(j=0;j<m;j++)
            scanf("%d",&a[i][j]);
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            if(i!=0 && a[i][j]==a[i-1][j])
                v[i*m+j][v[i*m+j][0]+1]=(i-1)*m+j,v[i*m+j][0]+=1;
            if(i!=n-1 && a[i][j]==a[i+1][j])
                v[i*m+j][v[i*m+j][0]+1]=(i+1)*m+j,v[i*m+j][0]+=1;
            if(j!=0 && a[i][j]==a[i][j-1])
                v[i*m+j][v[i*m+j][0]+1]=(i)*m+j-1,v[i*m+j][0]+=1;
            if(j!=m-1 && a[i][j]==a[i][j+1])
                v[i*m+j][v[i*m+j][0]+1]=(i)*m+j+1,v[i*m+j][0]+=1;
        }
    }
    for(i=0;i<n;i++)
        for(j=0;j<m;j++)
            no[a[i][j]]+=1;
    int ans=0;
    for(i=0;i<n*m;i++)
    {
        if(visit[i]==0 && no[a[i/m][i%m]]!=-1)
        {
            int ans1=dia(i,m);
            ans=max(ans,ans1);
//            printf("%d %d %d\n",i,visit[i],ans1);
        }
    }
    printf("%d\n",ans);
    return 0;
}
