#include <bits/stdc++.h>
using namespace std;
int grid[1001][1001];
int colors[1000001];
bool visited[1001][1001];
bool visited1[1001][1001];
int dist[1001][1001];
pair<int,int> parent[1001][1001];
int n,m;
bool check(int i,int j)
{
    if(i>=0 && i<n && j>=0 && j<m) return true;
    return false;
}
int bfs(int i,int j)
{
    int x[]={-1,0,0,1};
    int y[]={0,-1,1,0};
    queue<pair<int,int> > q;
    q.push(make_pair(i,j));
    visited[i][j]=1;
    bool all=false;
    pair<int,int> p;
    while(!q.empty())
    {
        p=q.front();
        //cout<<"popped: "<<p.first<<" "<<p.second<<endl;
        q.pop();
        for(int l=0;l<4;++l)
        {
            if(check(p.first+x[l],p.second+y[l]))
            {
                if(grid[p.first+x[l]][p.second+y[l]]==grid[p.first][p.second])
                {
                    if(!visited[p.first+x[l]][p.second+y[l]]){ visited[p.first+x[l]][p.second+y[l]]=1;
                        q.push(make_pair(p.first+x[l],p.second+y[l]));
                        parent[p.first+x[l]][p.second+y[l]]=make_pair(p.first,p.second);
                    }
                    else if(parent[p.first][p.second]!=make_pair(p.first+x[l],p.second+y[l])) all=true;

                }
            }
        }
    }
    if(all){ //cout<<"return: "<<colors[grid[i][j]]<<endl;
        return colors[grid[i][j]];}
    //cout<<"return: "<<c<<endl;

    q.push(p);
    visited1[p.first][p.second]=1;
    dist[p.first][p.second]=1;
    while(!q.empty())
    {
        p=q.front();
        q.pop();
        for(int l=0;l<4;++l)
        {
            if(check(p.first+x[l],p.second+y[l]) && grid[p.first+x[l]][p.second+y[l]]==grid[p.first][p.second] && !visited1[p.first+x[l]][p.second+y[l]])
            {
                visited1[p.first+x[l]][p.second+y[l]]=1;
                dist[p.first+x[l]][p.second+y[l]]=dist[p.first][p.second]+1;
                q.push(make_pair(p.first+x[l],p.second+y[l]));
            }
        }
    }
    return dist[p.first][p.second];
}
int main()
{
    scanf("%d %d",&n,&m);
    for(int i=0;i<n;++i)
    {
        for(int j=0;j<m;++j)
        {
            scanf("%d",&grid[i][j]);
            colors[grid[i][j]]++;
        }
    }
    int ans=0;
    for(int i=0;i<n;++i)
    {
        for(int j=0;j<m;++j)
        {
            if(!visited[i][j])
            {
                ans=max(ans,bfs(i,j));
            }
        }
    }
    printf("%d",ans);
    return 0;
}
