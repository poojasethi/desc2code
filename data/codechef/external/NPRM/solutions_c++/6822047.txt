#include<iostream>  
#include<cstdio>  
#include<map>  
#include<cstring>  
#include<cmath>  
#include<vector>  
#include<algorithm>  
#include<set>  
#include<string>  
#include<ctime>
#include<queue>  
#define inf 1000000005  
#define M 40  
#define N 100005
#define maxn 300005  
#define eps 1e-8
#define zero(a) fabs(a)<eps  
#define Min(a,b) ((a)<(b)?(a):(b))  
#define Max(a,b) ((a)>(b)?(a):(b))  
#define pb(a) push_back(a)  
#define mp(a,b) make_pair(a,b)  
#define mem(a,b) memset(a,b,sizeof(a))  
#define LL long long  
#define MOD 1000000007
#define lson step<<1
#define rson step<<1|1
#define sqr(a) ((a)*(a))  
#define Key_value ch[ch[root][1]][0]  
#define test puts("OK");  
#define pi acos(-1.0)
#define lowbit(x) ((-(x))&(x))
#define HASH1 1331
#define HASH2 10001
#define C   240  
#define TIME 10  
#pragma comment(linker, "/STACK:1024000000,1024000000")  
using namespace std;
int n,temp,total;
int primelist[100000];
bool prime(int m) {  
  if(m==1) return false;
    if(m==2||m==3)   
        return true;    
    if(m%2==0||m%3==0)      
        return false;    
    for(int i=5,j=4;i*i<=m;i+=(j=6-j))    
        if(m%i==0)             
            return false;   
    return true; 
} 
void Solve(int index, int lcm, int K){      
    int i;      
    int t, t_temp;   
    if (K == 0)       
    {           
        temp += n / lcm;
        return ;      
    }   
    for (i = index; i < total - K + 1; i++){         
        t = lcm * primelist[i];         
        t_temp = temp;           
        if (t <= n&&t>0)                     
            Solve(i + 1, t, K - 1);                  
        if (t_temp == temp) return ;        
    }  
}
int main()
{
  int t;cin>>t;
    while(t--)
    {   
      cin>>n;
        int ans=0;
        total=0;
        if(!prime(n)){
          puts("-1");
          continue;
        }
        for(int i=2;i*i<=n;i++)  
            if(prime(i))    
                primelist[total++]=i;
        for(int k=1;k<=total;k++){   
            temp = 0;      
            Solve(0, 1, k);        
            if (temp == 0) break;         
            if (k & 1) ans+= temp;       
            else ans -= temp; 
        }
        printf("%d\n",n-ans-1+total);
    }
    return 0;
} 