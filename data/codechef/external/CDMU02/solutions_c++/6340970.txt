#include<iostream>
#include<cstring>
using namespace std;

#define MAX 1000000

typedef long int ll;

ll tree[4*MAX][27]={0};
char str[MAX+1];
int cnt=0;

void build_tree(int start, int end, ll idx)
{
	if(start==end)
	{
	//	cout<<idx<<endl;
		int num= str[start]-97;
		tree[idx][num]++;
		return;
	}
	int mid= (start+end)/2;
	build_tree(start,mid,1+2*idx);
	build_tree(mid+1,end,2+2*idx);
//	cout<<idx<<endl;
	for(int i=0;i<26;i++)
	 tree[idx][i]= tree[2*idx+1][i] + tree[2*idx+2][i];
	 
}

int query(int ss, int se, int qs, int qe, ll idx, char ele)
{
	if(ss>=qs && se<=qe)
	 {
	 	//cout<<ss<<" "<<se<<" "<<qs<<" "<<qe<<endl;
	 	return tree[idx][ele-97];
	 }
	 
	if(ss>qe || se<qs)
	return 0;
	 
	int mid= (ss+se)/2;
	int p= query(ss,mid,qs,qe,1+2*idx,ele)+ query(mid+1,se,qs,qe,2+2*idx,ele);
//	cout<<" for segment : "<<ss<<" "<<se<<" "<<p<<endl;
	return p;
}

int main()
{
	cin>>str;
	int len=strlen(str);
	
	build_tree(0,len-1,0);
	int i,j;
	/*
	for(i=0;i<7;i++)
	{
		for(j=0;j<26;j++)
		{
			if(tree[i][j]!=0)
			{
				//cout<<i<<" : "<<(char)(j+97)<<" "<<tree[i][j]<<endl;
			}
		}
	}
	*/
	int low, high,que;
	cin>>que;
	while(que--){
	char k;
	cin>>k>>low>>high;
	low--;
	high--;
	cout<<query(0,len-1,low,high,0,k)<<endl;
	}
	return 0;
}