#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define sz(c) c.size()
#define rep(i,n) for(typeof(n) i = 0;i<n;i++)
#define range(i,a,b) for(typeof(b) i = a;i<=b;i++)
#define tr(it,c) for(typeof(c.begin()) it = c.begin();it!= c.end();++it)
#define x first
#define y second
#define author dipjal
using namespace std;
typedef long long int ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef map<int,int> mii;
const int SIZE = 1e6+5;
ll mod = 1e9+7;
const ll epf = -1e5+9;
int N,M;
int u,v;
string s;
ll tree[SIZE<<1][26];

void build_tree(int low,int high,int node){
    if(low>high)
        return;
    if(low==high){
        tree[node][s[low]-'a']++;
        return;
    }
    int mid = (low+high)>>1;
    build_tree(low,mid,node<<1);
    build_tree(mid+1,high,1+(node<<1));
    for(int i  = 0;i<26;i++)
        tree[node][i]=tree[node<<1][i]+tree[1+(node<<1)][i];
}


int query_tree(int low,int high,int l,int r,int node,char c){
    if(low>high||high<l||low>r)
        return 0;
    if(low>=l&&high<=r){
            return tree[node][c-'a'];
    }
    int mid = (low+high)>>1;
    int q1 = query_tree(low,mid,l,r,node<<1,c);
    int q2 = query_tree(mid+1,high,l,r,1+(node<<1),c);
    return(q1+q2);
}




int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin>>s;
    cin>>M;
    char key;
    build_tree(0,(int)sz(s)-1,1);
    while(M--){
           cin>>key;
           cin>>u>>v;
    --u,--v;
    int ans = query_tree(0,(int)(sz(s)-1),u,v,1,key);
    printf("%d\n",ans);
    }
    return 0;
}
