//      @author anks

#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <string.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) ((S&two(X))>0)
#define containL(S,X) ((S&twoL(X))>0)
#define debug(args...) dbg(),args
typedef pair<int,int> ipair;
int countbit(int n) {return (n==0)?0:(1+countbit(n&(n-1)));}
int lowbit(int n) {return (n^(n-1))&n;}
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> T sqr(T x) {return x*x;}
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N)
#define SS(N) scanf("%s", N)
#define SIZE(X) ((int)((X).size()))
#define LEN(X) ((int)((X).length()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;++A)
#define EFOR(A,B,C) for(int A=B;A<=C;++A)
#define RFOR(A,B,C) for(int A=B;A>=C;--A)
#define FORL(A,B,C) for(ll A=B;A<C;++A)
#define EFORL(A,B,C) for(ll A=B;A<=C;++A)
#define RFORL(A,B,C) for(ll A=B;A>=C;--A)
#define PB(A,B) A.push_back(B);
#define PF(A) A.first
#define PS(A) A.second
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX(A,B) (A > B) ? A : B
#define MIN(A,B) (A < B) ? A : B
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define PRN(A, N) if (DBG) { FOR(j, 0, N) cout << setw(3) << A[j] << " " ; cout << endl;}
#define PR2N(A, M, N) FOR(i, 0, M) { PRN(A[i], N) }
#define PR(A) PRN(A, sizeof(A)/sizeof(A[0]))
#define PR2(A) FOR(i, 0, sizeof(A)/sizeof(A[0])) { PR(A[i]) }
#define MAXLIM 102
#define INF 1000
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

int m, n, T[MAXLIM][MAXLIM];
char A[MAXLIM][MAXLIM];
queue<ipair> q;

void mark(int x, int y, int c) {
	T[x][y] = c + 1; A[x][y] = '#'; q.push(MP(x, y));
}

void bfs(int x, int y) {
	T[x][y] = 0; A[x][y] = '#';
	q.push(MP(x, y));
	while(!q.empty()) {		
		ipair p = q.front(); q.pop();
		int x = PF(p), y = PS(p);		
		// bottom
		FOR(i, x + 1, m) {
			if (A[i][y] == '#') break;
			if (T[i][y] == INF)
				mark(i, y, T[x][y]);			
		}
		// top
		RFOR(i, x - 1, 0) {
			if (A[i][y] == '#') break;
			if (T[i][y] == INF)
				mark(i, y, T[x][y]);
		}
		// left
		RFOR(i, y - 1, 0) {
			if (A[x][i] == '#') break;
			if (T[x][i] == INF)
				mark(x, i, T[x][y]);			
		}
		// right
		FOR(i, y + 1, n) {
			if (A[x][i] == '#')	break;
			if (T[x][i] == INF)
				mark(x, i, T[x][y]);
		}
	}
}

int main (int argc, char *argv[]) 
{
	DBGCHECK;
	
	int t;
	S(t);
	
	while (t-- > 0) {
		S(m); S(n);
		int x, y, ex, ey;
		S(x); S(y); S(ex); S(ey);
		char s[MAXLIM];
		FOR(i, 0, m) {
			SS(s);
			FOR(j, 0, n) {
				T[i][j] = INF;
				A[i][j] = s[j];
			}
		}
		bfs(x, y);
		PR2N(T, m, n);
		printf("%d\n", (T[ex][ey] == INF) ? 0 : T[ex][ey]);
	}
	
	return 0;	
}
