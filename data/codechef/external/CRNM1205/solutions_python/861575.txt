#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>
#include <cassert>
#define F first
#define S second
using namespace std;
const int INF = 1000000000;
typedef pair<int,int>pi;
typedef pair<int,pi>ppi;
int M,N;
int sx,sy;
int fx,fy;
char grid[1000][1100];
int main()
{
    int T;
    scanf("%d",&T);
    while(T--){
        scanf("%d%d",&M,&N);
        scanf("%d%d",&sx,&sy); 
        scanf("%d%d",&fx,&fy);
        for(int i=0;i<M;i++)scanf("%s",grid[i]);
        //for(int i=0;i<M;i++)for(int j=0;j<N;j++)assert(grid[i][j]=='.' || grid[i][j]=='#');
        //queue<ppi,vector<ppi>, greater<ppi> >q;
        queue<pi>q;
        q.push(pi(sx,sy));
        int dis[M][N];
        for(int i=0;i<M;i++)for(int j=0;j<N;j++)dis[i][j] = INF;
        dis[sx][sy]=0;
        grid[sx][sy]='#';
        while(!q.empty()){
            pi top = q.front();
            q.pop();
            int x=top.F,y=top.S;
            //if ( dis[x][y]<d)continue;
            /*if ( x==fx && y==fy){
                ans=d;y
                break;
            }
            */
            //dis[x][y] = d;
            //grid[x][y]='#';
            //up
            for ( int i=x-1;i>=0 && grid[i][y]=='.' && dis[i][y]==INF;i--)
                if ( dis[i][y]==INF){
                    q.push(pi(i,y));
                    dis[i][y]  = dis[x][y]+1;
                    grid[i][y] = '#';
                }
            //down
            for ( int i=x+1;i<M && grid[i][y]=='.' && dis[i][y]==INF;i++)
                if ( dis[i][y]==INF){
                    q.push(pi(i,y));
                    dis[i][y]  = dis[x][y]+1;
                    grid[i][y] = '#';
                }
            //left
            for ( int i=y-1;i>=0 && grid[x][i]=='.' && dis[x][i]==INF;i--)
                if ( dis[x][i]==INF){
                    q.push(pi(x,i));
                    dis[x][i]  = dis[x][y]+1;
                    grid[x][i] = '#';
                }
            //right
            for (int i=y+1;i<N && grid[x][i]=='.' && dis[x][i]==INF;i++)
                if ( dis[x][i]==INF){
                    q.push(pi(x,i));
                    dis[x][i]  = dis[x][y]+1;
                    grid[x][i] = '#';
                }
                
        }
        if ( dis[fx][fy]==INF)printf("0\n");
        //else if ( ans==0)printf("1\n");
        else printf("%d\n",dis[fx][fy]);
    }
return 0;   
}
