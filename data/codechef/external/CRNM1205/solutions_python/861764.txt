#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <string.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) ((S&two(X))>0)
#define containL(S,X) ((S&twoL(X))>0)
#define debug(args...) dbg(),args
typedef pair<int,int> ipair;
int countbit(int n) {return (n==0)?0:(1+countbit(n&(n-1)));}
int lowbit(int n) {return (n^(n-1))&n;}
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> T sqr(T x) {return x*x;}
template<class T> void checkmin(T &a,T b) {if (b<a) a=b;}
template<class T> void checkmax(T &a,T b) {if (b>a) a=b;}
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N)
#define SS(N) scanf("%s", N)
#define SIZE(X) ((int)((X).size()))
#define LEN(X) ((int)((X).length()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;++A)
#define EFOR(A,B,C) for(int A=B;A<=C;++A)
#define RFOR(A,B,C) for(int A=B;A>=C;--A)
#define FORL(A,B,C) for(ll A=B;A<C;++A)
#define EFORL(A,B,C) for(ll A=B;A<=C;++A)
#define RFORL(A,B,C) for(ll A=B;A>=C;--A)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define MAX(A,B) (A > B) ? A : B
#define MIN(A,B) (A < B) ? A : B
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG)
cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };
#define PRN(A, N) FOR(j, 0, N) cout << A[j] << " " ; cout << endl;
#define PRRN(A, M, N) FOR(i, 0, M) { PRN(A[i], N) }
#define PR(A) PRN(A, sizeof(A)/sizeof(A[0]))
#define PRR(A) FOR(i, 0, sizeof(A)/sizeof(A[0])) { PR(A[i]) }
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)

#define MOD 100000007
#define INF 100001
#define MAXSIZE 10001

int T[102][102], n, m, sx, sy, dx, dy;
char grid[102][102];
queue<ipair> q;

void check(int x, int y, int c) {
    /*
    if (x > n - 1 || x < 0 || y > m - 1 || y < 0 || grid[x][y] == '#' || grid[x][y] == '+') {
        return;
    }
    */ 
    //debug(x, y, c);
    if (grid[x][y] == '.') {
        T[x][y] = c;
        grid[x][y] = '+';
        q.push(MP(x, y));
    }
}

void bfs(int x, int y){
    T[x][y] = 0;
    grid[x][y] = '+';
    q.push(MP(x, y));
    while(!q.empty()) {
        ipair p = q.front();
        int x = p.first, y = p.second, c = T[x][y];
        //debug(x, y);
        //PRRN(T, n, m);
        //debug("");
        q.pop();
        RFOR(i, x-1, 0) {
            if(grid[i][y]=='#' || grid[i][y]=='+')
                break;
            if(T[i][y] < INF)
                continue;
            check(i, y, c+1);
        }
        FOR(i, x+1, n) {			
            if(grid[i][y]=='#' || grid[i][y]=='+')
                break;
            if(T[i][y] < INF)
                continue;
            check(i, y, c+1);
        }
        RFOR(i, y-1, 0) {			
            if(grid[x][i]=='#' || grid[x][i]=='+')
                break;
            if(T[x][i] < INF)
                continue;
            check(x, i, c+1);
        }
        FOR(i, y+1, m) {
            if(grid[x][i]=='#' || grid[x][i]=='+')
                break;
            if(T[x][i] < INF)
                continue;
            check(x, i, c+1);
        }
    }
    //PRRN(T, n, m);
}

int main (int argc, char *argv[]) {
    DBGCHECK;
    int t;
    S(t);
    while (t-- > 0) {
        S(n); S(m);
        S(sx); S(sy);
        S(dx); S(dy);

        FOR(i, 0, n) {
            SS(grid[i]);
            FOR(j, 0, m) {
                T[i][j] = INF;
            }
        }
        bfs(sx, sy);
        printf("%d\n", (T[dx][dy] == -1 || T[dx][dy] == INF) ? 0 : T[dx][dy]);
    }
    return 0;
}

