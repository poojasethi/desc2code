/*
Success is a matter of hanging on, when others have let go.
Its not who you are, that holds you back, its who you think you are not.
The future belongs to those, who believe in the beauty of their dreams.
*/
//{ /* theCodeGame */
#include<iostream>
#include<cmath>
#include<algorithm>
#include<climits>
#include<vector>
#include<queue>
#include<bitset>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<ctime>
#include<map>
using namespace std;
#define MOD 1000000007LL
#define LL long long
#define ULL unsigned long long
#define LD long double
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(x)   ((x)<0?-(x):(x))
#define SQR(x) ((x)*(x))
#define CUBE(x) ((x)*(x)*(x))
#define si(n) scanf("%d",&n)
#define si2(n,m) scanf("%d %d",&n,&m)
#define sf(n) scanf("%f",&n)
#define sl(n) scanf("%ld",&n)
#define sll(n) scanf("%lld",&n)
#define slu(n) scanf("%llu",&n)
#define sd(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define pnl printf("\n")
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define FORR(i,n,e) for(int i=(n);i>=(e);i--)
#define FORD(i,a,b,d) for(int i=(a);i<(b);i+=(d))
#define FORRD(i,n,e,d) for(int i=(n);i>=(e);i-=(d))
//#undef mydebug
#ifdef mydebug
#define DB(x) cout<<#x<<"="<<(x)<<"\n"
#define DB2(x,y) cout<<#x<<"="<<(x)<<"\t"<<#y<<"="<<(y)<<"\n"
#define DB3(x,y,z) cout<<#x<<"="<<(x)<<"\t"<<#y<<"="<<(y)<<"\t"<<#z<<"="<<(z)<<"\n"
#define DB4(x,y,z,a) cout<<#x<<"="<<(x)<<"\t"<<#y<<"="<<(y)<<"\t"<<#z<<"="<<(z)<<"\t"<<#a<<"="<<(a)<<"\n"
#define pnld pnl;
#else
#define DB(x)
#define DB2(x,y)
#define DB3(x,y,z)
#define DB4(x,y,z,a)
#define pnld
#endif
#define FILL(a,b) memset(a,b,sizeof(a))
const double PI=3.14159265358979323846264338327950288419716939937510582097494459230;
//template <class T>void swap(T &x,T &y){T t;t=x;x=y;y=t;}
void DBG_ARR(const int A[],int S,int N){cout<<"[";FOR(i,S,N){cout<<A[i]<<" ";}cout<<"]\n";}
void swaps (char &x,char &y){char t;t=x;x=y;y=t;}void swapi(int &a,int &b){int t;t=a;a=b;b=t;}
ULL gcd(ULL a,ULL b){if(a==0)return b;if(b==0)return a;if(a==1||b==1)return 1;if(a==b)return a;if(a>b)return gcd(b,a%b);else return gcd(a,b%a);}
//}
#define size 111
const int dx[]={-1,0,1,0};
const int dy[]={0,1,0,-1};//no diagonal movements
int ANS[size][size];//for answer
//for taking the map
int M,N,Sx,Sy,Fx,Fy;

void precompute(){}
void doThis(){
    string map[size];
    FILL(ANS,0);
    si2(M,N);
    si2(Sx,Sy);
    si2(Fx,Fy);
    REP(i,M){
        cin>>map[i];//ss(map[i]);
    }
    queue<pair<int,int> >q;
    q.push(make_pair(Sx,Sy));
    ANS[Sx][Sy]=1;
   // DB3("pushing..",Sx,Sy);
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
       // DB3("poped..",x,y);
        q.pop();
        if(x==Fx&&y==Fy){
            //DB4(x,Fx,y,Fy);
            break;
        }
        //trying each move using dx,dy
        FOR(i,0,4){
            int tX=x;
            int tY=y;
           // DB3("for 1 to 4 direction loop",x,y);
            while(1){
                //DB("while loop");
                tX=tX+dx[i];
                tY=tY+dy[i];
                //DB4(dx[i],dy[i],tX,tY);
                if(tX>=0&&tY>=0&&tX<M&&tY<N&&map[tX][tY]=='.'&&ANS[tX][tY]==0){
                    ANS[tX][tY]=ANS[x][y]+1;
                    //DB4(x,y,ANS[x][y],ANS[tX][tY]);
                    //DB3("pushing..",tX,tY);
                    q.push(make_pair(tX,tY));
                }else{
                    //DB("break out of loop");
                    break;
                }
            }
        }//end for dx dy
    }
   /* pnld;
    REP(i,M){
        REP(j,M){
            cout<<ANS[i][j]<<" ";
        }
        pnld;
    }
    pnld;*/
    if(ANS[Fx][Fy]){
        printf("%d\n",ANS[Fx][Fy]-1);
    }else{
        puts("0");
    }
}

int main(){
#ifdef amy
freopen("C:\\A\\in.txt","r",stdin);freopen("C:\\A\\out.txt","w",stdout);freopen("C:\\A\\err.txt", "w", stderr);
#endif
precompute();
int t=1;
scanf("%d",&t);
while(t--){doThis();}
#ifdef amy
fprintf(stdout,"\nTIME: %.3lf sec\n", (double)clock()/(CLOCKS_PER_SEC));
#endif
return 0;
}
