# include <cstdio>
# include <iostream>
# include <algorithm>
# include <vector>
# include <cstring>
# include <cctype>
# include <set>
# include <map>
# include <cmath>
# include <queue>
 
using namespace std;
 
int M,N;
char maze[105][105];
vector<int>adj[20000];
queue<int>bfsqueue;
char seen[20000];
int dist[20000];
 
char isvalid(int i,int j)
{
if(i<0||j<0||i>=M||j>=N||maze[i][j]=='#'||seen[i*N+j])return false;
else return true;
}
 
int main()
{
int T;
scanf("%d",&T);
for(int t=1;t<=T;t++)
{
scanf("%d%d",&M,&N);
int sx,sy,ex,ey;
scanf("%d%d%d%d",&sx,&sy,&ex,&ey);
for(int i=0;i<M;i++)
scanf("%s",maze[i]);
memset(seen,0,M*N);
while(!bfsqueue.empty())bfsqueue.pop();
int ST=sx*N+sy,EN=ex*N+ey;
seen[ST]=1;bfsqueue.push(ST);dist[ST]=0;
while(!bfsqueue.empty())
{
int u=bfsqueue.front();
bfsqueue.pop();
seen[u]=2;
int x=u/N,y=u-x*N;
//printf("%d %d\n",x,y);
for(int i=x+1,v=u+N;isvalid(i,y);i++,v+=N)
if(!seen[v])
{
bfsqueue.push(v),dist[v]=dist[u]+1,seen[v]=1;
if(v==EN)
{
printf("%d\n",dist[v]);
goto BPP;
}
}
for(int i=x-1,v=u-N;isvalid(i,y);i--,v-=N)
if(!seen[v])
{
bfsqueue.push(v),dist[v]=dist[u]+1,seen[v]=1;
if(v==EN)
{
printf("%d\n",dist[v]);
goto BPP;
}
}
for(int i=y+1,v=u+1;isvalid(x,i);i++,v++)
if(!seen[v])
{
bfsqueue.push(v),dist[v]=dist[u]+1,seen[v]=1;
if(v==EN)
{
printf("%d\n",dist[v]);
goto BPP;
}
}
for(int i=y-1,v=u-1;isvalid(x,i);i--,v--)
if(!seen[v])
{
bfsqueue.push(v),dist[v]=dist[u]+1,seen[v]=1;
if(v==EN)
{
printf("%d\n",dist[v]);
goto BPP;
}
}
}
printf("0\n");
BPP:;
}
return 0;
}