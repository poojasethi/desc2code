City of Romini is one of the well planned cities of the world. Why? Because road network at Romini is great. The roads in Romini are built in a grid like fashion. Some roads in Romini have stall-walls from which people cannot pass through. One such arrangement of Romini grid road network is given in a figure below 


The above network has 5 east to west roads and 3 north to south roads. “#” represents stall-walls. Stall-walls are only present at the intersection point of any two roads.

Nooji is spending her holiday in City of Romini. She was amazed by the transport system of Romini. They have a very weird rule of charging fare from commuters. For a travelling distance of any units in either a horizontal direction or a vertical direction, without a stall-wall in between source and destination, they charge 1 Rupa. So suppose Nooji wants to travel from S to D2 in above grid network system, she will only have to pay 1 Rupa. But if she wants to travel between S and D1, she will be charged 3 Rupa because she cannot commute through stall-wall and so she will have to go south first one unit (and pay 1 Rupa for it), then travel 3 units east (and pay 1 Rupa for it) and then finally travel 1 unit north to reach D1 (and pay 1 Rupa for it). So in total she will have to pay 3 Rupa. 

She is so confused with this system! Being a travel planner for her, can you plan her travel between given source and destination so that she has to pay minimum?


 Note  If Nooji cannot reach destination from source, print 0 as answer.


Input
First line contains T, the no. of test cases. Each test case starts with two integers M and N in the first line, the dimensions of grid road network. Next line contains the integer coordinates of source for Nooji. Next line contains integer coordinates of destination for Nooji. Next M lines contain N characters in each line, the description of Grid road network. Note that all coordinates are 0 indexed based.


Output
Output T lines each containing the minimum amount Nooji will have to pay for travelling.


Constraints
 
N<=100 
M<=100
T<=100

Example

Input:
2
4 4
1 1
2 2
....
..#.
.#..
....
3 5
1 2 
0 4
..##.
...#.
.....


Output:
4
3
