#include<bits/stdc++.h>

using namespace std;

#define gc getchar_unlocked
#define pc putchar_unlocked
#define ll long long int 
int min(int a,int b){  return a<b?a:b;}
int max(int a,int b) {return a>b?a:b; }
 
void fastwrite(ll inp)
{
ll a=(inp<0)?-inp:inp;
char snum[20];
int i=0;
do
{
snum[i++]=a%10+48;
a=a/10;
}while(a!=0);
if(inp<0)
snum[i++]='-';
i--;
while(i>=0)
pc(snum[i--]);
pc('\n');
}
 
ll fastread()
{
char sign='\0',c=gc();
ll ret=0;
while((c<'0'||c>'9')&&c!='-'){c=gc();}
if(c=='-'){
sign='1';
c=gc();
}
while(c>='0'&&c<='9'){
ret=10*ret+c-48;
c=gc();
}
if(sign)ret=-ret;
return ret;
}

ll gcd(ll a , ll b)
{
  if(b == 0)
     return a;
     
  else
     return gcd(b , a%b);

}

int main()
{
ll test , n , query , arr[100005] , l , r , i , j , gcd1  ,x , prefix[100005] , suffix[100005];

test = fastread();
while(test--)
{
 n = fastread();
 query = fastread();

for(i =1 ; i <= n ; i++)
{
     arr[i] = fastread();
}

prefix[1] = arr[1];
suffix[n] = arr[n];
    

for( i = 2 ; i <= n ; i++ )
    prefix[i] = gcd( arr[i] , prefix[i-1]);
    
for(i = n-1 ; i >=1 ; i--)
{
     suffix[i] = gcd( arr[i] , suffix[i+1]);
 
 }    
while(query--)
 {
   l = fastread();
   r = fastread();
 
 // cout << prefix[2] << "dfdd";
 if(l == 1)
   gcd1 = suffix[r+1];
   
  if(r == n)
     gcd1 = prefix[l-1];
 else
  gcd1 = gcd(suffix[r+1] , prefix[l-1]);
     
     
  
  fastwrite(gcd1);
//  cout << endl;
 }

}


return 0;
}