#include <iostream>
#include <cstdlib>
#include <cassert>
#include <utility>
#include <algorithm>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <string>

#define all(i,n) for(i = 0; i < (n); i++)
#define SET(p) memset(p,-1,sizeof(p))
#define CLR(p) memset(p,0,sizeof(p))
#define maX(a,b)    ((a)>(b)?(a):(b))
#define miN(a,b)        ((a)<(b)?(a):(b))
#define cin(n)    scanf("%d",&n)

#define p(n)    printf("%d\n",n)
#define cinl(n)   scanf("%lld",&n)
#define pl(n)   printf("%lld\n",n)
#define Sf(n)   scanf("%lf",&n)
#define Ss(n)   scanf("%s",n)
#define ill  unsigned long long
#define ULL unsigned long long
#define pb push_back
#define pii pair<int,int>
#define edge pair<int,pii>
#define ll long long
#define co(e) e.first
#define n1(e) e.second.first
#define n2(e) e.second.second
#define ALL(A) A.begin(), A.end()
#define oo        (1<<30)
#define PI          3.141592653589793
#define ERR         1e-6
#define pi          2*acos(0)
#define PB          push_back
#define mp make_pair
#define gc getchar_unlocked
using namespace std;
#define max2 1000000

#define LL long long

LL mulmod (LL a, LL b, LL mod) {
    LL res = (a * ((long double) b / (long double) mod));
    // put the number in long double, and then reduce the value to LL, forget
   // overflow.
    res = a * b - res * mod;
    if (res >= mod) res -= mod;
    if (res < 0) res += mod;
    return res;
}

ill powe(ill a,ill b,ill mod)
{
    ill ans=1;
    while(b)
    {
        if(b&1)
            ans=mulmod(a,ans,mod);
        a=mulmod(a,a,mod);
        b=b/2;
    }
    return ans;
}
#define mod 1000000007

int dp[5002][5002][4][2];
//char s[5007];
string s;
int rec(int pos,int req,int utha,int prev)
{
    if(utha==3&&!req)
        return 1;
    if(utha==3)
        return 0;
    if(pos==s.length())
        return 0;

    if(dp[pos][req][utha][prev]!=-1)
        return dp[pos][req][utha][prev];

    int ret=0;

    if(!prev)
        ret=rec(pos+1,req,utha,0);
    
    if(req>0&&utha<=2)
        ret=(ret+rec(pos+1,req-(s[pos]=='a'),utha,1))%mod;
    if(utha<=2&&req==0)
        ret=(ret+rec(pos+1,req,utha,1))%mod;
    
    if(utha<3)
    {
        if(req>0)
            ret=(ret+rec(pos+1,req-(s[pos]=='a'),utha+1,0))%mod;
        else
            ret=(ret+rec(pos+1,req,utha+1,0))%mod;
    }
    return dp[pos][req][utha][prev]=ret;
}


//int fcin(){register int c = gc();int x = 0;for(;(c<48 || c>57);c = gc());for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}return x;}

int main()
{
    int m,last,i,j,k,t,n;

    cin(t);
    //ma.clear();
    while(t--)
    {
        //scanf("%s",&s);
        cin>>s;

        cin(n);
        //n=100;
        //memset(dp,-1,sizeof(dp));
        for (int i = 0; i <=s.length()+1; i++) {
            for (int j = 0; j <=n; j++) {
                for (int k = 0; k <=3; k++) {
                    for (int l = 0; l <=1; l++) {
                        dp[i][j][k][l] = -1;
                    }
                }
            }
         }
        printf("%d\n",rec(0,n,0,0));
    }
return 0;
}
