#include <bits/stdc++.h>

using namespace std;

const int N = 5005;
const long long mod = (long long)(1e9 + 7);

char S[N];
long long dp[2][N][4][2];

void Solve()
{
	int n = strlen(S);
	for(int i = 0; i <= n; i++)
		for(int j = 0; j < 4; j++)
			for(int k = 0; k < 2; k++)
				dp[0][i][j][k] = 0;

	dp[0][0][0][0] = 1;
	
	for(int idx = 0; idx <= n; idx++)
	{
		int curr = idx & 1, next = !curr;
		
		for(int i = 0; i <= n; i++)
			for(int j = 0; j < 4; j++)
				for(int k = 0; k < 4; k++)
					dp[next][i][j][k] = 0;
					
		for(int i = 0; i <= n; i++)
			for(int j = 0; j < 4; j++)
				for(int k = 0; k < 2; k++)
					if(k & 1)
					{
						dp[next][i + (S[idx] == 'a')][j][k ^ 1] += dp[curr][i][j][k];
						if(dp[next][i + (S[idx] == 'a')][j][k ^ 1] >= mod)
							dp[next][i + (S[idx] == 'a')][j][k ^ 1] -= mod;
							
						dp[next][i + (S[idx] == 'a')][j][k] += dp[curr][i][j][k];
						if(dp[next][i + (S[idx] == 'a')][j][k] >= mod)
							dp[next][i + (S[idx] == 'a')][j][k] -= mod;
					}
					else
					{
						if(j < 3)
						{
							dp[next][i + (S[idx] == 'a')][j + 1][k] += dp[curr][i][j][k];
							if(dp[next][i + (S[idx] == 'a')][j + 1][k] >= mod)
								dp[next][i + (S[idx] == 'a')][j + 1][k] -= mod;
								
							dp[next][i + (S[idx] == 'a')][j + 1][k ^ 1] += dp[curr][i][j][k];
							if(dp[next][i + (S[idx] == 'a')][j + 1][k ^ 1] >= mod)
								dp[next][i + (S[idx] == 'a')][j + 1][k ^ 1] -= mod;
						}
						dp[next][i][j][k] += dp[curr][i][j][k];
						if(dp[next][i][j][k] >= mod)
							dp[next][i][j][k] -= mod;
					}
	}
}

int main()
{
	int T, M;
	scanf("%d", &T);
	while(T--)
	{
		scanf("%s%d", S, &M);
		Solve();
		int res = 0, n = strlen(S);
		for(int i = M; i <= n; i++)
			res = (res + dp[n & 1][i][3][0]) % mod;
		printf("%d\n", res);
	}
	return 0;
}