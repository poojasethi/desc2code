#include <algorithm>
#include <string>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <deque>
#include <functional>
#include <list>
#include <map>
#include <set>
#include <utility>


using namespace std;
/*========================================Templates=============================================*/
// datatypes
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;


#define in(a) scanf("%d",&a)
#define out(a) printf("%d",a)

#define pb push_back
#define len length()
#define sz size()

#define gc getchar_unlocked
#define pc putchar_unlocked
#define pn printf("\n")
#define ps printf(" ")

#define rep(i,a,b) for(int i=a;i<b;i++)
#define repn(i,n) rep(i,0,n)

#define all(a) a.begin(),a.end()
#define repv(i,a) rep(i,all(a))
#define sortv(a) sort(all(a))
#define W(a) while(a--)

/*======================================Templates Ends========================*/
/* Main Code Starts from here */

struct compare
{
    bool operator() (const char l, const char r)
    {
        return l>r;
    }
};

int main()
{
    int i,j,k,x,y,z;
    int t,n;

    in(t);
    cin.ignore(256,'\n');
    string str1, str2;
    bool result;
    W(t)
    {
        getline(cin, str1);
        getline(cin, str2);

        if(str1.len!=str2.len)
        {
            result=false;
        }

        //check str2 for leading zeroes
        else if(str2[str2.len-1]=='0')
        {
            result=false;
        }

        else
        {
            result=true;

            //all fine
            //process all digits of str1
            string str3="";
            priority_queue<char,vector<char>, compare> pq;
            x=0;
            repn(i,str1.len)
            {
                if(str1[i]=='0')
                    x++;
                else
                    pq.push(str1[i]);
            }


            str3+=pq.top();
            pq.pop();
            //cout<<"str3 initially "<<str3<<endl;

            //append all zeroes to str3 now
            repn(i,x)
            str3+='0';

            //cout<<"str3 after zeroes "<<str3<<endl;

            while(pq.empty()==false)
            {
                str3+=pq.top();
                pq.pop();

                //cout<<"str3 progressive "<<str3<<endl;
            }

            if(str3==str2)
                result=true;

            else
                result=false;

        }

        if(result)
        {
            printf("AC");
        }

        else
        {
            printf("WA");
        }

        pn;

    }
    return 0;
}
