#include <iostream>
#include <cstring>
#include <map>
#include <vector>
#define REP(i,n) for(int i=0; i<n; ++i)
#define FOREACH(it,v) for(typeof(v.begin()) it=v.begin(); it!=v.end(); ++it)
using namespace std;

map<string,int> carro;
int N;
vector<int> gustos[100];

bool satisfecho[100];
bool ocupado[100];

bool go() {
    int imin=-1;
    int mingustos=1000;
    REP(i, N) if(!satisfecho[i]) {
        int g=0;
        FOREACH(it,gustos[i])
            if(!ocupado[*it]) ++g;

        if(!g) return false;
        if(g<mingustos) {
            mingustos=g;
            imin=i;
        }
    }
    if(imin==-1) return true;

    FOREACH(it,gustos[imin]) if(!ocupado[*it]) {
        ocupado[*it]=true;
        satisfecho[imin]=true;
        if(go()) return true;
        ocupado[*it]=false;
        satisfecho[imin]=false;
    }

    return false;
}

int main()
{
    cin>>N;
    memset(satisfecho, 0, N);
    memset(ocupado, 0, N);

    string name;
    REP(i,N)
        cin>>name;

    string vehicle;
    REP(i,N) {
        cin>>vehicle;
        carro[vehicle]=i;
    }

    REP(i,N) {
        int p;
        cin>>p;
        REP(k,p) {
            cin>>vehicle;
            typeof(carro.begin()) it = carro.find(vehicle);
            if(it==carro.end()) {
                cout<<"No"<<endl;
                return 0;
            }
            gustos[i].push_back(it->second);
        }
    }

    cout << ( go() ? "Yes" : "No" );
}
