#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

template<class A, class B> A cvt(B x) {stringstream s;s<<x;A r;s>>r;return r;}

#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i) 
#define FOREQ(i,a,b) for(int i= (int )a ; i <= (int )b ; ++i) 
#define REV(i,a,b) for(int i= (int )a ; i > (int )b ; --i) 
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define PP pop()
#define EM empty()
#define INF 1000000000
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a) 	    __typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define PRESENT(c,x) 	((c).find(x) != (c).end())
#define SZ(x) 		x.size();
#define CPRESENT(c,x) 	(find(c.begin(),c.end(),x) != (c).end())
#define D(N) 		int N
#define S(N)		scanf("%d",&N)

#define CREATE_CLOCK() clock_t ____start, ____diff = 0 ;
#define START_CLOCK() ____start = clock() ;
#define REPORT_CLOCK() ({float f = (((float)clock()) - ____start)/((float)CLOCKS_PER_SEC);printf ("Time = %.6f\n" , f);})

typedef pair<int,int>  PI;
typedef pair<int,PI>   TRI;
typedef V( int )       VI;
typedef V( PI  )       VII;
typedef V( string )    VS;
typedef long long      LL;

map <string, bool> cars;

struct preference {
	int	k;
	string	cars[100];
} p[100];

int	n;

/** IMPORTANT */
int f (const void *, const void *);
bool allocate_car (int);

int main ()
{
	int	i, j;
	string	str;

	cin>>n;

	for (i=0; i<n; i++) 
		cin>>str;

	for (i=0; i<n; i++) {
		cin>>str;
		cars[str] = true;
	}

	for (i=0; i<n; i++) {
		cin>>p[i].k;

		for (j=0; j<p[i].k; j++)
			cin>>p[i].cars[j];
	}
	
	/** IMPORTANT */
	qsort (p, n, sizeof(preference), f);

	if (allocate_car(0))
		cout<<"Yes";
	else
		cout<<"No";

	return 0;
}

int f (const void *a, const void *b)
{
	return ((preference *)a)->k - ((preference *)b)->k;
}

bool allocate_car (int user)
{
	int	i, j;
	bool	flag;

	if (user == n)
		return true;

	for (i=0; i<p[user].k; i++) {
		if (cars[p[user].cars[i]] == false) continue;
		cars[p[user].cars[i]] = false;

		flag = allocate_car(user+1);
		if (flag) return true;
		cars[p[user].cars[i]] = true;
	}
	return false;
}
