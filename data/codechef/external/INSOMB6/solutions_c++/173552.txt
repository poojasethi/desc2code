#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <map>

using namespace std;

class BipartiteMatching {
   vector<bool> seen;
   bool bpm(int u) {
      for (int j = 0; j < adj[u].size(); ++j) {
         int v = adj[u][j];
         if (seen[v]) continue;
         seen[v] = true;
         if (matchR[v] < 0 || bpm(matchR[v])) {
            matchL[u] = v;
            matchR[v] = u;
            return true;
         }
      }
      return false;
   }
public:
   int nL, nR;
   vector< vector<int> > adj; // adjacency lists

   vector<int> matchL, matchR;
   BipartiteMatching(int _nL, int _nR) : nL(_nL), nR(_nR) {
      adj.assign(nL, vector<int>());
   }

   int process() {
      matchL.assign( nL, -1 ),
      matchR.assign( nR, -1 );
      int cnt = 0;
      for (int i = 0; i < nL; ++i) {
         seen = vector<bool>(nR, false);
         if (bpm(i))
            cnt++;
      }
      return cnt;
   }
};

string ceo[104];
string vehicle[104];
map< string, vector<int> > veh_name_2_id;

int main(int argc, char* argv[]) {
   string line;
   getline(cin, line);
   int N;
   sscanf(line.c_str(), "%d", &N);

   for (int i = 0; i < N; ++i)
      getline(cin, ceo[i]);

   for (int k = 0; k < N; ++k) {
      getline(cin, vehicle[k]);
      veh_name_2_id[ vehicle[k] ].push_back(k);
   }

   BipartiteMatching bpm(N, N);
   for (int i = 0; i < N; ++i) {
      int K;
      getline(cin, line);
      istringstream is(line);
      is >> K;
      while (K-- > 0) {
         string name;
         is >> name;
         const vector<int>& v = veh_name_2_id[ name ];
         for (int j = 0; j < v.size(); ++j)
            bpm.adj[i].push_back(v[j]);
      }
   }

   cout << (bpm.process() == N ? "Yes" : "No") << endl;

   return 0;
}
