// A C++ program to find maximal Bipartite matching.
#include <iostream>
#include <string.h>
#include<map>
using namespace std;
 
// M is number of applicants and N is number of jobs
int N,M;
 
// A DFS based recursive function that returns true if a
// matching for vertex u is possible
bool bpm(bool bpGraph[][200], int u, bool seen[], int matchR[])
{
    // Try every job one by one
    for (int v = 0; v < N; v++)
    {
        // If applicant u is interested in job v and v is
        // not visited
        if (bpGraph[u][v] && !seen[v])
        {
            seen[v] = true; // Mark v as visited
 
            // If job 'v' is not assigned to an applicant OR
            // previously assigned applicant for job v (which is matchR[v]) 
            // has an alternate job available. 
            // Since v is marked as visited in the above line, matchR[v] 
            // in the following recursive call will not get job 'v' again
            if (matchR[v] < 0 || bpm(bpGraph, matchR[v], seen, matchR))
            {
                matchR[v] = u;
                return true;
            }
        }
    }
    return false;
}
 
// Returns maximum number of matching from M to N
int maxBPM(bool bpGraph[][200])
{
    // An array to keep track of the applicants assigned to
    // jobs. The value of matchR[i] is the applicant number
    // assigned to job i, the value -1 indicates nobody is
    // assigned.
    int matchR[N];
 
    // Initially all jobs are available
    memset(matchR, -1, sizeof(matchR));
 
    int result = 0; // Count of jobs assigned to applicants
    for (int u = 0; u < M; u++)
    {
        // Mark all jobs as not seen for next applicant.
        bool seen[N];
        memset(seen, 0, sizeof(seen));
 
        // Find if the applicant 'u' can get a job
        if (bpm(bpGraph, u, seen, matchR))
            result++;
    }
    return result;
}
 
// Driver program to test above functions
int main()
{
    // Let us create a bpGraph shown in the above example
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int i,j,k; scanf("%d",&N);
    M=N;
    map<string,int>m;
    
    string str;
    for(i=0;i<N;i++)
    {
                    cin>>str;
                    m.insert(pair<string,int>(str,i));
    }
    for(i=0;i<N;i++)
    {
                    cin>>str;
                    m.insert(pair<string,int>(str,i));
    }
    bool bpGraph[200][200];
    memset(bpGraph,0,sizeof bpGraph);
    i=0;
    for(i=0;i<N;i++)
    {
                    cin>>j;
                    for(k=0;k<j;k++)
                    {
                                    cin>>str;
                                    bpGraph[i][m[str]]=1;
                    }
    }
    /*for(i=0;i<N;i++)
    {
                    for(j=0;j<N;j++)
                    cout<<bpGraph[i][j];
                    cout<<"\n";
    }*/
    if(maxBPM(bpGraph)==N)
    cout<<"Yes\n";
    else cout<<"No\n";
    
    
 
    return 0;
}
