//problema A
#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <numeric>
#include <utility>
 
#include <deque>
#include <stack>
#include <bitset>
#include <map>
#include <set>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <list>
 
#include <sstream>
#include <iostream>
#include <iomanip>
 
using namespace std;
 
typedef long long int64;
 
#define forn(i, n) for(int64 i = 0; i < (int)(n); i++)
#define fore(i, a, n) for(int64 i = a; i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) (a).size()
#define all(a) a.begin(), a.end()
#define VI vector<int>
#define PII vector<pair<int,int> >
#define iss istringstream //>>
#define MAX 105
#define MOD 1000000007
const long double EPS = 1E-9;
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double PI = 2 * acos(.0);


 map< string , short> vehicles;
bool pref[MAX][MAX];
bool filled[MAX];
int n , k;
bool solve(int vehi){
	//cout << vehi << endl;
	if (vehi == n + 1) return true;
	bool cent = false;
	forn(i, n){
		if(pref[i + 1][vehi] && !filled[i + 1]){
			filled[i + 1] = true;
			if(!cent) cent = solve(vehi + 1);
			filled[i + 1] = false;
		}
	}
	return cent;
}

int main(){
	memset(pref, false, sizeof(pref));
	fill(filled, filled + MAX, 0);
	cin >> n;
	string aux;
	int cur = 1;
	forn(i, n){
		cin >> aux;
	} 
	cur =0;
	forn(i, n){
		cin >> aux;
		vehicles[aux] = ++cur;
	}
	forn(i, n){
		cin >> k;
		forn(j, k){
			cin >> aux;
			pref[i + 1][vehicles[aux]] = true;
		}
	}
	
	if(solve(1)) cout << "Yes" << endl;
	else cout << "No" << endl;
	return 0;
}
