#include<bits/stdc++.h>
using namespace std;

#define LL long long

int n,q,k,in[112345];
int blocks;
int ft[112345];

struct query
{
	int id,l,r;
}Q[112345];
LL res[112345],ans;

bool cmp(query x,query y)
{
	if(x.l/blocks != y.l/blocks)
		return x.l/blocks < y.l/blocks;
	return x.r < y.r;
}

void update(int idx,int v)
{
	while(idx <= 112345)
	{
		ft[idx] += v;
		idx += (idx & -idx);
	}
}

void point_upd(int pos,int val)
{
	update(pos,val);
}

int query(int idx)
{
	int sum = 0;
	while (idx > 0)
	{
		sum += ft[idx];
		idx -= (idx & -idx);	
	}
	return sum;
}

int range_query(int l,int r)
{
	l = max(0,l);
	r = min(112345,r);
	return query(r) - query(l-1);
}

void add(int pos)
{
	ans = ans + range_query(in[pos]-k,in[pos]+k);
	point_upd(in[pos],1);
}

void remove(int pos)
{
	point_upd(in[pos],-1);
	ans = ans - range_query(in[pos]-k,in[pos]+k);
}

int main()
{
	cin >> n >> q >> k;
	for(int i=1;i<=n;i++)
		cin >> in[i];
	blocks = sqrt(n);
	int a,b;
	for(int i=0;i<q;i++)
	{
		cin >> a >> b;
		Q[i].id = i;
		Q[i].l = a;
		Q[i].r = b;
	}
	sort(Q,Q+q,cmp);
	
	point_upd(in[1],1);
	int prevl = 1;
	int prevr = 1;
	for(int i=0;i<q;i++)
	{
		int l = Q[i].l;
		int r = Q[i].r;
		
		while(prevl < l)
			remove(prevl++);
		while(prevl > l)
			add(--prevl);
		while(prevr < r)
			add(++prevr);
		while(prevr > r)
			remove(prevr--);
		res[Q[i].id] = ans;	
	}
	
	for(int i=0;i<q;i++)
		cout << res[i] << endl;
	
	return 0;
}
