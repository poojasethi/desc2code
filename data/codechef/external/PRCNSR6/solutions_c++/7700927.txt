#include <bits/stdc++.h>

#define lli long long

using namespace std;

vector < pair<int, pair<int,int> > > v;

lli ans[100005];
int A[100005];
int tree[200005];
int blocks;
int cnt;
lli fin;
int k;

void update(int idx, int val)
{
    while ( idx <= 200001 ) {
        tree[idx] += val;
        idx += (idx & (-idx));
    }
    return;
}

lli query(int idx)
{
    lli ans = 0;
    while ( idx > 0 ) {
        ans += tree[idx];
        idx -= (idx & (-idx));
    }
    return ans;
}

void add(int pos)
{
    fin += query(A[pos]+k) - query(A[pos]-k-1);
    update(A[pos], 1);
    return;
}

void rem(int pos)
{
    update(A[pos], -1);
    fin -= (query(A[pos]+k) - query(A[pos]-k-1)); 
    return;
}

bool func(pair <int, pair<int,int> > p1, pair <int, pair<int,int> > p2)
{
    if ( p1.second.first/blocks != p2.second.first/blocks ) return (p1.second.first)/blocks < (p2.second.first)/blocks;
    return p1.second.second < p2.second.second;
}

int main()
{
    int n,q,x,y;
    
    scanf("%d%d%d", &n, &q, &k);
    
    blocks = (int)sqrt(n);
    cnt = 1;
    
    for ( int i = 0; i < n; i++ ) scanf("%d", &A[i]);

    for ( int i = 0; i < q; i++ ) {
        scanf("%d%d", &x, &y);
        x--, y--;
        v.push_back(make_pair(i,make_pair(x,y)));
    }

    sort(v.begin(),v.end(),func);

    int L = 0 ,R = 0;
    
    add(0);
    for(int i = 0; i < q; ++i){
        int st = v[i].second.first, en = v[i].second.second;
        while(R > en){
            rem(R);
            --R;
        }
        while(R < en){
            ++R;
            add(R);
        }
        while(L > st){
            --L;
            add(L);
        }
        while(L < st){
            rem(L);
            ++L;
        }
        ans[v[i].first] = fin;
        // store answer here
    }

    for ( int i = 0; i < q; i++ ) printf("%lld\n", ans[i]);
    return 0;
}