#include<bits/stdc++.h>
#define pn() printf("\n")
#define si(x) scanf("%d",&x)
#define pi(x) printf("%d\n",x)
#define sll(x) scanf("%lld",&x)
#define pll(x) printf("%lld\n",x)
#define sc(x) scanf("%c",&x)
#define pc(x) printf("%c",x)
#define sf(x) scanf("%f",&x)
#define pf(x) printf("%f\n",x)
#define sd(x) scanf("%lf",&x)
#define pd(x) printf("%.7lf\n",x)
#define sld(x) scanf("%Lf",&x)
#define pld(x) printf("%.9Lf\n",x)
#define MOD 1000000000
#define ll long long
#define SIZE 333
#define MAX 100000
using namespace std;
struct Q{
    int l,r,i;
}query[100001];
bool operator<(Q a,Q b){
    if(a.l/SIZE!=b.l/SIZE){
        return a.l/SIZE<b.l/SIZE;
    }
    else{
        return a.r<b.r;
    }
}
int a[100001];
int bit[100001];
ll finalans[100001];
void add(int idx,int val){
    for(int i=idx;i<=MAX;i+=(i&(-i))){
        bit[i]+=val;
    }
}
int sum(int idx){
    int ans=0;
    while(idx>0){
        ans+=bit[idx];
        idx-=(idx&(-idx));
    }
    return ans;
}
int sum(int from,int to){
    from=max(from,1);
    to=min(to,100000);
    if(from>to){
        return 0;
    }
    return sum(to)-sum(from-1);
}
int main(void){
    int n,q,k;
    si(n);si(q);si(k);
    for(int i=1;i<=n;i++){
        si(a[i]);
    }
    for(int i=1;i<=q;i++){
        si(query[i].l);
        si(query[i].r);
        query[i].i=i;
    }
    sort(query+1,query+q+1);
    int curblock=-1;
    int curl=-1;
    int curr=-1;
    ll ans=0;
    for(int i=1;i<=q;i++){
        if(curblock!=query[i].l/SIZE){
            ans=0;
            memset(bit,0,sizeof(bit));
            add(a[query[i].l],1);
            curl=query[i].l;
            curr=query[i].l;
            curblock=query[i].l/SIZE;
        }
        while(query[i].l<curl){
            ans+=sum(a[curl-1]-k,a[curl-1]+k);
            curl--;
            add(a[curl],1);
        }
        while(query[i].l>curl){
            add(a[curl],-1);
            curl++;
            ans-=sum(a[curl-1]-k,a[curl-1]+k);
        }
        while(query[i].r>curr){
            ans+=sum(a[curr+1]-k,a[curr+1]+k);
            curr++;
            add(a[curr],1);
        }
        finalans[query[i].i]=ans;
    }
    for(int i=1;i<=q;i++){
        pll(finalans[i]);
    }
    return 0;
}
