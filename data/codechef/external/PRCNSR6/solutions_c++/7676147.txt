#include<bits/stdc++.h>
using namespace std;
#define f first
#define s secoond
#define pii pair<int,int>
#define mp make_pair
#define ll long long
#define pll pair<ll,ll>
#define pil pair<int,ll>
#define pb push_back
#define mod 1000000007LL
//#define gc getchar_unlocked
#define gc getchar
inline int getn(){
	int n = 0, c = gc();
	while(c < '0' || c > '9') c = gc();
	while(c >= '0' && c <= '9')
		n = (n<<3) + (n<<1) + c - '0', c = gc();
	return n;
}
int a[100011];
ll c[100011];
void update(int x,ll v)
{
    int i=x;
    while(i<=100000)
    {
        c[i]+=v;
        i=i+(i&-i);
    }
}
ll query(int x)
{
    ll ans=0;
    int i=x;
    while(i>0)
    {
        ans+=c[i];
        i-=(i&-i);
    }
    return ans;
}
struct node
{
    int l,r,ind;
};
ll ans[100011];
node q[100011];
int block=337;
bool cmp(node a,node b)
{
    if(a.l/block!=b.l/block)
        return a.l/block<b.l/block;
    return a.r<b.r;
}
ll answer=0LL;
int k;
inline void add(int i)
{
    int mn=max(1,a[i]-k);
    int mx=min(100000,a[i]+k);
    answer+=(query(mx)-query(mn-1));
    update(a[i],1);
}
inline void rem(int i)
{
    update(a[i],-1);
    int mn=max(1,a[i]-k);
    int mx=min(100000,a[i]+k);
    answer-=(query(mx)-query(mn-1));
}
int main()
{
    int n,m,i,j;
 
    //scanf("%d %d %d",&n,&m,&k);
    n=getn();
    m=getn();
    k=getn();
    for(i=0; i<n; i++)
        //scanf("%d",&a[i]);
        a[i]=getn();
    for(i=0; i<m; i++)
    {
        int l,r;
        //scanf("%d %d",&l,&r);
        q[i].l=getn();
        q[i].r=getn();
        q[i].l--;
        q[i].r--;
        q[i].ind=i;
    }
    for(i=0;i<=100000;i++)
    	c[i]=0;
    sort(q,q+m,cmp);
    for(i=q[0].l; i<=q[0].r; i++)
        add(i);
    ans[q[0].ind]=answer;
    int cl,cr;
    cl=q[0].l;
    cr=q[0].r;
    for(i=1; i<m; i++)
    {
        //printf("%d %d %lld\n",cl,cr,answer);
        while(cl>q[i].l)add(cl-1),cl--;
        while(cr<q[i].r)add(cr+1),cr++;
        while(cl<q[i].l)rem(cl),cl++;
        while(cr>q[i].r)rem(cr),cr--;
        ans[q[i].ind]=answer;
    }
    for(i=0; i<m; i++)
        printf("%lld\n",ans[i]);
    return 0;
}
 