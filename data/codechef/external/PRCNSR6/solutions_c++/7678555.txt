#include<bits/stdc++.h>
#define NMAX 100010
#define gc getchar_unlocked
#define QMAX 100000
#define rf freopen("inp.in","r",stdin)
 
using namespace std;
 
int N , Q , K , L , R , block=337;
int A[NMAX] , BIT[NMAX] ;
long long ANS[NMAX], ans = 0;
 
inline int getn(){
	int n = 0, c = gc();
	while(c < '0' || c > '9') c = gc();
	while(c >= '0' && c <= '9')
		n = (n<<3) + (n<<1) + c - '0', c = gc();
	return n;
}
 
struct query{
 
	int l ,  r , id ;
 
	query(){ 
		l = r = id = 0;
	}
 
	query(int ll , int rr , int i){ 
		l = ll , r = rr; id = i;
	}
 
}QUERY[NMAX];
 
bool cmp(query x , query y){
	if(x.l/block == y.l/block) 
		return x.r < y.r;
	return x.l/block < y.l/block;
}
 
inline int calc(int l,int r){
 
	int res1 = 0, res2 = 0;
 
	for(int i = r   ; i > 0 ; i-= i&-i)
		res1+= BIT[i];
	for(int i = l-1 ; i > 0 ; i-= i&-i)
		res2+= BIT[i];
 
	return res1 - res2;
}
 
inline void update(int x,int v){
	for(int i = x ; i <= QMAX ; i += i&-i )
		BIT[i] += v;
}
 
inline void add(int id){
	int l = max(1,A[id] - K);
	int r = min(QMAX , A[id] + K);
    ans += calc(l,r);
	update(A[id],1);
}
 
inline void remove(int idx){
	int l = max(1,A[idx] - K);
	int r = min(QMAX , A[idx] + K);
	update(A[idx],-1);
	ans -= calc(l,r);
}
 
int main(){
 
 
 
	N = getn() , Q = getn() , K = getn();
 
	for(int i = 1 ; i <= N ; i++) A[i] = getn();
 
	for(int i = 1 ; i <= Q ; i++){
		QUERY[i].l = getn() , QUERY[i].r = getn();
		QUERY[i].id = i;
	}
 
	sort(QUERY+1,QUERY+1+Q,cmp);
 
	int lef = 1 , rig = 0;
 
	for(int i = 1; i <= Q ; i++){
 
		int x = QUERY[i].l;
	    int y = QUERY[i].r;
 
	    while(lef < x) remove(lef++);
        while(lef > x) add(--lef);
        while(rig < y) add(++rig);
        while(rig > y) remove(rig--);
 
	    ANS[QUERY[i].id] = ans;
	}
 
	for(int i = 1 ; i <= Q ; i++) cout << ANS[i] << "\n";
 
	return 0;
} 