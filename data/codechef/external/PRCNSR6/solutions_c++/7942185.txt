/* #################################
    Ashish Kumar - IIIT Hyderabad ##
 ################################ */

#include<bits/stdc++.h>
using namespace std;
#define INF INT_MAX
#define ALL(x) x.begin(),x.end()
#define pb push_back
#define sz(x) int(x.size())
#define mp make_pair
#define fill(x,v) memset(x,v,sizeof(x))
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d ",n)
#define pd(n) printf("%lf ",n);
#define pdl(n) printf("%lf\n",n);
#define pin(n) printf("%d\n",n)
#define pln(n) printf("%lld\n",n)
#define pl(n) printf("%lld ",n)
#define sl(n) scanf("%d",&n)
#define sd(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define scan(v,n) vector<int> v;rep(i,n){ int j;si(j);v.pb(j);}
#define mod (int)(1e9 + 7)
#define ll  int
ll modpow(ll a,ll n,ll temp){ll res=1,y=a;while(n>0){if(n&1)res=(res*y)%temp;y=(y*y)%temp;n/=2;}return res%temp;} 
typedef struct node{
	ll l;
	ll r;
	ll bn;
	ll ind;
}node;
node queries[100001];
ll a[100001];
ll MAX = 100001;
ll tree[100001];
long long int ans[100001];
inline bool cmp(node a, node b){
	if(a.bn == b.bn){
		return a.r > b.r;
	}
	return a.bn < b.bn;
}

inline void update(ll ind, ll val){
	while(ind<=MAX){
		//cout << ind << endl;
		tree[ind]+=val;
		ind+=(ind&-ind);
	}
}

inline ll read(ll ind){
	ll sm = 0;
	while(ind>0){
		sm+=tree[ind];
		ind-=(ind&-ind);
	}
	return sm;
}

inline ll rangesum(ll a, ll b){
	return read(min(100001,a)) - read(max(0,b-1));
}

int main()
{
	ll i,j,n,t,k,q,li,ri;	
	sl(n);
	sl(q);
	sl(k);
	for(i=1;i<=n;i++){
		sl(a[i]);
	}
	ll SQ = sqrt(n);
	node query_node;
	for(i=1;i<=q;i++){
		sl(li);
		sl(ri);
		query_node.l = li;
		query_node.r = ri;
		query_node.bn = ((li-1)/SQ);
		query_node.ind = i;
		queries[i] = query_node;
	}
	sort(queries+1,queries+q+1,cmp);
	ll low = 1;
	ll high = 1;
	i = 1;
	long long int cur = 0;
	update(a[1],1);
	while(i<=q){
		while(low<queries[i].l){
			update(a[low],-1);
			cur -= rangesum(a[low]+k,a[low]-k);
			low++;
		}
		while(low>queries[i].l){
			low--;
			cur += rangesum(a[low]+k,a[low]-k);
			update(a[low],1);
		}
		while(high<queries[i].r){
			high++;
			cur += rangesum(a[high]+k,a[high]-k);
			update(a[high],1);
		}
		while(high>queries[i].r){
			update(a[high],-1);
			cur -= rangesum(a[high]+k,a[high]-k);
			high--;
		}
		ans[queries[i].ind] = cur;//(read(a[]+k) - read(a[i]-k-1));
		i++;
	}
	for(i=1;i<=q;i++){
		cout << ans[i] <<endl;
	}
	return 0;
}
