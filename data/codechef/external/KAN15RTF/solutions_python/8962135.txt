#include <bits/stdc++.h>
using namespace std;

#define INF 1000000007

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vector<int> > vvi;
typedef pair<int,int> ii;
typedef vector<pair<int,int> > vii;
typedef vector<vector<pair<int,int> > > vvii;

#define all(x) (x).begin(), (x).end()
#define nall(x) (x).rbegin(), (x).rend()
#define tr(x,it) for(vi::iterator it = (x).begin();it!=(x).end();++it)
#define ntr(x,it) for(auto it = (x).rbegin();it!=(x).rend();++it)
#define ufy(v) sort(all(v));(v).erase(unique(all((v))),(v).end())
#define sz(a) int((a).size()) 
#define boost ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define pb push_back 
#define PB pop_back
#define pf push_front
#define PF pop_front
#define MP make_pair
#define clr clear
#define rz resize
#define C(a,b) memset(a,b,sizeof(a))
#define ia(a,n) FOR(i,0,n-1)cin>>a[i]
#define ia1(a,n) FOR(i,1,n)cin>>a[i]
#define fpresent(c,x) ((c).find(x) != (c).end())  // set,map
#define present(c,x) (find(all(c),x) != (c).end())  //vector
#define F first
#define S second
#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define NFOR(i,a,b) for(int i=a;i>=b;--i)
#define rep(i,n) FOR(i,0,n-1)
#define TCASE int __T;cin>>__T;FOR(Tc,1,__T)
inline int add(int a,int b, int m=INF){a+=b;if(a>=m)a-=m;return a;}
inline int mul(int a,int b, int m=INF){return (int)(((ll)a*(ll)b)%m);}
inline int norm(int x,int m=INF){if(x>=m)x%=m;if(x<0)x+=m;return x;}
inline int neg(int x,int m=INF){x=-x;return norm(x);}

int n,m;
vvi g,t;
stack<int> scc;vi in,ans;
int sctr;
int dfsctr;
int dfs_num[5000],dfs_low[5000];

void DFS(int u,int p=-1)
{
	dfs_num[u]=dfs_low[u]=dfsctr;
	++dfsctr;
	scc.push(u);in[u]=1;
	tr(g[u],it)
	{
		if(p==*it)continue;
		if(dfs_num[*it]==-1)
		DFS(*it,u);
		if(in[*it])dfs_low[u]=min(dfs_low[u],dfs_low[*it]);
	}
	if(dfs_low[u]==dfs_num[u])
	{
		vector<int>s;
		while(scc.top()!=u)
		{ans[scc.top()]=sctr;in[scc.top()]=0;scc.pop();}
		ans[scc.top()]=sctr;in[scc.top()]=0;scc.pop();

		++sctr;
	}
}
vi vis;
int dfs(int u, int p=-1)
{
	int ans=0;
	tr(t[u],it)
	{
		if(*it==p)continue;
		ans+=dfs(*it,u);
	}
	vis[u]=1;
	return ans+(t[u].size()==1);
}

int main()
{
    boost;
    TCASE
    {
    	cin>>n>>m;	
    	g.clr();g.rz(n);
    	FOR(i,0,m-1)
    	{
    		int u,v;
    		cin>>u>>v;
    		g[u-1].pb(v-1);g[v-1].pb(u-1);
    	}
    	if(n==1)
    	{
    		cout<<"0\n";continue;
    	}
    	if(n==2)
    	{
    		cout<<"-1\n";
    		continue;
    	}
    	ans.clr();in.clr();
    	ans.rz(n);in.rz(n);
    	while(!scc.empty())scc.pop();
    	sctr=dfsctr=0;
    	FOR(i,0,n-1)dfs_num[i]=dfs_low[i]=-1;
    	FOR(i,0,n-1)
    	{
    		if(dfs_num[i]==-1)
    		DFS(i);
    	}
    	
    	if(sctr==1)
    	{
    		cout<<"0\n";continue;
    	}
    	
    	t.clr();t.rz(sctr);
    	FOR(i,0,n-1)
    	{
    		tr(g[i],it)
    		{
    			if(ans[*it]!=ans[i])
    			t[ans[i]].pb(ans[*it]);
    		}
    	}
    	vis.clr();
    	vis.rz(sctr);
    	
    	int anss=0,leaf=0,no=0;
    	FOR(i,0,sctr-1)
    	{
    		if(!vis[i])
    		anss+=dfs(i,-1),no+=(t[i].size()==0);
    	}

    	cout<<(anss+1)/2+no<<"\n";
    }
	return 0;
}


