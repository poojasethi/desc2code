#include <iostream>
#include <string.h>
#include <stdio.h>
 #define lli long long int
using namespace std;
 
#define ARRAY_SIZE(A) sizeof(A)/sizeof(A[0])
// Binary search (note boundaries in the caller)
// A[] is ceilIndex in the caller
lli CeilIndex(lli A[], lli l, lli r, lli key) {
   lli m;
 
    while( r - l > 1 ) {
        m = l + (r - l)/2;
        (A[m] > key ? r : l) = m; // ternary expression returns an l-value
    }
 
    return r;
}
 
lli LongestIncreasingSubsequenceLength(lli A[], lli size) {
    // Add boundary case, when array size is one
 
    lli *tailTable   = new lli[size];
    lli i,len; // always points empty slot
 
    memset(tailTable, 0, sizeof(tailTable[0])*size);
 
    tailTable[0] = A[0];
    len = 1;
    for(  i = 1; i < size; i++ ) {
        if( A[i] < tailTable[0] )
            // new smallest value
            tailTable[0] = A[i];
        else if( A[i] >= tailTable[len-1] )
            // A[i] wants to extend largest subsequence
            tailTable[len++] = A[i];
        else
            // A[i] wants to be current end candidate of an existing subsequence
            // It will replace ceil value in tailTable
            tailTable[CeilIndex(tailTable, -1, len-1, A[i])] = A[i];
    }
 
    delete[] tailTable;
 
    return len;
}
 
int main() {
   lli n;
   cin>>n;
   lli A[n];
   lli i;
   for(i=0;i<n;i++)
   cin>>A[i];
    
 
    cout<<LongestIncreasingSubsequenceLength(A, n);
 
    return 0;
}