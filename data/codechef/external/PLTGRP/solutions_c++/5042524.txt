// finding non-decreasing maximum subsequence ... 
// very much thanks to .. Raziman-Thottungal-Valapu __/\__
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <utility>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <queue>
#include <sstream>
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef istringstream iss;
typedef ostringstream oss;

#define geti(n) int n;scanf("%d",&n)
#define getl(n) long long n;cin >> n
#define rep(i,n) for(int i=0;i<n;i++)
#define puti(n) printf("%d\n",n)
#define putl(n) cout <<  n  << endl
#define puts(s)  cout << s << endl
#define ll long long
#define pb push_back
#define sz size()
#define mem(p,q) memset(p,q,sizeof(p))
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)


/*int binary_search(vi arr,int key,int hi)
{ 
	int lo = 0 ;
	int mid = 1 ; 
  while(lo < hi)
  {
  	mid = lo + (hi-lo)/2;
  	if(arr[mid]>key)
  	   hi = mid ;
  	  else
  	  lo = mid + 1 ;  
  }
  if(lo==hi)
   return lo ;	
return -1 ;  
} */
int main()
{
   #ifdef _WIN32 
    freopen("input.txt", "r", stdin);
   #endif // LOCAL_USER
 geti(n);
 vi ar ; 
 fu(i,0,n-1)
 {
 	//scanf("%d",&tmp);  
    //cout<<"i:"<<tmp<<"\n";
 //cout<<ar.size();
 	//int x  = binary_search(ar,tmp,ar.size());
  geti(tmp);
  vector<int>::iterator it ; 
  it = upper_bound(ar.begin(),ar.end(),tmp);
  if(it == ar.end())
    {//cout<<tmp;
      ar.push_back(tmp);
    }
  else
    ar[it-ar.begin()] = tmp ; 
}
 puti(ar.size());	
 return 0;
}