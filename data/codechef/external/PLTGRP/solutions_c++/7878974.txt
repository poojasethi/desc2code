/*_______SHREY MANIK______*/
#include <iostream>
#include <string>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>
#include <utility>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstring>
#include <iomanip>
#include<list>
#define ff first
#define ss second
#define MOD 1000000007
#define LL long long
#define SET(a) memset(a,-1,sizeof(a))
#define CLEAR(a) memset(a,0,sizeof(a))
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)
using namespace std;
template<class T>T gcd(T a,T b){return (b==0)?a:gcd(b,a%b);}
template<class T>T lcm(T a,T b){return (a*b)/gcd(a,b);}
int n,a[100005];
vector<int>v;
vector<int>::iterator up;
int main()
{
  cin>>n;
  for(int i=0;i<n;i++)
  cin>>a[i];
  v.pb(a[0]);
  for(int i=1;i<n;i++)
  {
  	up=upper_bound(v.begin(),v.end(),a[i]);
  //	if(up!=v.begin()&&(*(up-1))==a[i])                        uncomment these lines to get logest monotonic increasing subsequence
  //	continue;
  	if(up==v.end())
  	v.pb(a[i]);
  	else
  	*up=a[i];
  }
  cout<<v.size();
  return 0;
}
