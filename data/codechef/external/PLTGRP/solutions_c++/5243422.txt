/* Ref:
http://www.cprogramdevelop.com/1098762/
http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/
http://stackoverflow.com/questions/2631726/how-to-determine-the-longest-increasing-subsequence-using-dynamic-programming

*/

#include <bits/stdc++.h>

typedef long long lld;
typedef unsigned long long llu;
#define rep(i,x,y) for(i=x;i<y;i++)
#define rrep(i,x,y) for(i=x;i>=y;i--)
#define trv(y,x) for(typeof(x.begin())y=x.begin();y!=x.end();y++)
#define N 100010
using namespace std;

int A[N],B[N],P[N],LIS[N];



int solve(int n)
{
    int i,len,l,r,m,j,x;
    /*rep(i,0,n) P[A[i]]=i;
    rep(i,0,n) B[i]=P[B[i]]; */
    LIS[0]=B[0];
    len=1;
    rep(i,1,n)
    {
        x=LIS[len-1];
        if(B[i]<LIS[0])
            LIS[0]=B[i];
       /* else if(B[i]==LIS[0])
            { LIS[1]=B[i]; len=max(len,2); }
        else */if(B[i]>=x)
            LIS[len++]=B[i];
        else
        {
            l=0; r=len-1;
            while(r-l>1)
            {
                m=(l+r)/2;
                if(LIS[m]>=B[i]) r=m;
                else l=m;
            }
            LIS[r]=B[i];
        }
   // rep(j,0,len) {cout<<LIS[j]<<" "; }cout<<"\n";
    }
return len;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t,i,n;
    /*cin>>t;
    while(t--)
    {*/
        cin>>n;
        //rep(i,0,n)cin>>A[i];
        rep(i,0,n)cin>>B[i];
        cout<<solve(n)<<"\n";
   // }
return 0;
}
