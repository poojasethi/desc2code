//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
// #define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> ii;
typedef pair<int, ii> iii;
typedef pair<ll, int> pli;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2, mod);
}

const ll INF = (ll)1e10;
//taken from https://www.codechef.com/viewsolution/9263319
typedef vector<ll> VD;
typedef vector<VD> VVD;
typedef vector<int> VI;
VI LLL,RRR;
VVD Cost;
ll MinCostMatching(const VVD &cost, VI &Lmate, VI &Rmate) {
  int n = int(cost.size());
 
  // construct dual feasible solution
  VD u(n);
  VD v(n);
  for (int i = 0; i < n; i++) {
    u[i] = cost[i][0];
    for (int j = 1; j < n; j++) u[i] = min(u[i], cost[i][j]);
  }
  for (int j = 0; j < n; j++) {
    v[j] = cost[0][j] - u[0];
    for (int i = 1; i < n; i++) v[j] = min(v[j], cost[i][j] - u[i]);
  }
  
  // construct primal solution satisfying complementary slackness
  Lmate = VI(n, -1);
  Rmate = VI(n, -1);
  int mated = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (Rmate[j] != -1) continue;
      if ((cost[i][j] - u[i] - v[j]) ==0) {
    Lmate[i] = j;
    Rmate[j] = i;
    mated++;
    break;
      }
    }
  }
  
  VD dist(n);
  VI dad(n);
  VI seen(n);
  
  // repeat until primal solution is feasible
  while (mated < n) {
    
    // find an unmatched left node
    int s = 0;
    while (Lmate[s] != -1) s++;
    
    // initialize Dijkstra
    fill(dad.begin(), dad.end(), -1);
    fill(seen.begin(), seen.end(), 0);
    for (int k = 0; k < n; k++) 
      dist[k] = cost[s][k] - u[s] - v[k];
    
    int j = 0;
    while (true) {
      
      // find closest
      j = -1;
      for (int k = 0; k < n; k++) {
    if (seen[k]) continue;
    if (j == -1 || dist[k] < dist[j]) j = k;
      }
      seen[j] = 1;
      
      // termination condition
      if (Rmate[j] == -1) break;
      
      // relax neighbors
      const int i = Rmate[j];
      for (int k = 0; k < n; k++) {
    if (seen[k]) continue;
    const ll new_dist = dist[j] + cost[i][k] - u[i] - v[k];
    if (dist[k] > new_dist) {
      dist[k] = new_dist;
      dad[k] = j;
    }
      }
    }
    
    // update dual variables
    for (int k = 0; k < n; k++) {
      if (k == j || !seen[k]) continue;
      const int i = Rmate[k];
      v[k] += dist[k] - dist[j];
      u[i] -= dist[k] - dist[j];
    }
    u[s] += dist[j];
    
    // augment along path
    while (dad[j] >= 0) {
      const int d = dad[j];
      Rmate[j] = Rmate[d];
      Lmate[Rmate[j]] = j;
      j = d;
    }
    Rmate[j] = s;
    Lmate[s] = j;
    
    mated++;
  }
  
  ll value = 0;
  for (int i = 0; i < n; i++)
    value += cost[i][Lmate[i]];
  
  return value;
}

typedef pair<ii, ii> i4;
int companies, shelves, used[305];
i4 arr[305];
ll x[305], y[305], p[305], cap[10005];


int main()
{
    // ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    //http://codeforces.com/blog/entry/23190
    //highest sums of x+y will be assigned to shelf with highest capacity
    //assign high penalty to incompatible shelf-company combo

    int t;
    scanf("%d", &t);
    while(t--){

        scanf("%d%d", &companies, &shelves);
        for(int i=0;i<companies;i++){
            scanf("%lld%lld%lld", &x[i], &y[i], &p[i]);
            arr[i].ff.ff = x[i]+y[i];
            arr[i].ff.ss = p[i];
            arr[i].ss.ff = x[i];
            arr[i].ss.ss = y[i];
        }
        for(int i=0;i<shelves;i++)
            scanf("%lld", &cap[i]);
        sort(cap, cap+shelves, greater<ll>());
        if(shelves < companies){
            for(int i=shelves;i<companies;i++)
                cap[i] = 0;
            shelves = companies;
        }
        sort(arr, arr+companies, greater<i4>());
        ll filledSpots = 0;
        for(int i=0,j=0;i<companies;i++,j++){
            used[i] = min(cap[j], arr[i].ff.ff);
            filledSpots += used[i];
        }

        int n = companies;
        vector<vector<ll> > cost (n, vector<ll> (n));
        vector<int> useless1, useless2;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++){
                // if(x[i]+y[i] <= cap[j]) cost[i][j] = x[i]*0 + y[i]*p[i] + (cap[j]-x[i]-y[i])*INF;
                // else if(x[i] < cap[j])  cost[i][j] = (cap[j]-x[i])*p[i];
                // else    cost[i][j] = 0;
                if(arr[i].ff.ff >= used[j]) cost[i][j] = max(0LL, used[j]-arr[i].ss.ff) * arr[i].ff.ss;
                else    cost[i][j] = (ll)1e18;
            }

        ll totCost = MinCostMatching(cost, useless1, useless2);
        printf("%lld %lld\n", filledSpots, totCost);
    }

    return 0;
}










