#include <time.h>
#include <assert.h>
#include <algorithm>
#include <cstdlib>
#include<string.h>
#include <time.h>
#include <iostream>
#include <cstdio>
using namespace std;

typedef long long LL;
#define maxn 10000000;

LL modpow (LL a, LL b , LL mod )
{
    LL res = 1;
    while (b)
    {
        if (b & 1) res = (res * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return res;
}

LL solve(LL n, LL p)
{
    LL ans = 0;
    LL res = n / p;
    if (res % 2 == 0) ans = 1;
    else ans = p - 1;
    //LL ans = modpow (p - 1 , n / p , p);
    LL temp = n % p;
    LL prod = 1;
    for (LL i = 1; i <= temp; i++)
    {
        prod = (prod * i) % p;
    }
    prod %= p;
    ans = (ans * prod) % p;
    ans %= p;
    if (res < 1) return ans;
    else
    {
        if (n >= p)
            ans = (ans * solve(n / p , p)) % p;
    }
    return ans;
}

LL solveThis (LL n , LL p)
{
    LL ans = 1;
    for (LL i = 1; i <= n; i++)
    {
        LL temp = i;
        while (temp > 0 && temp % p == 0)
        {
            temp /= p;
        }
        ans = (ans * temp) % p;
    }
    return ans;
}

int isPrime(int n)
{
    if (n < 2) return false;
    for (int i = 2; i * i <= n; i++)
        if (n % i == 0)
            return false;
    return true;
}

int main()
{
    /*
    for (int i = 2; i <= 100; i++)
    {
        if (!isPrime(i)) continue;
        for (int n = 1; n <= 100; n++)
        {
            LL res1 = solve(n , i);
            LL res2 = solveThis(n , i);
            if (res1 != res2)
            {
                printf ("%d and %d\n" , n, i);
                printf("ERRORRRRRRRR\n");
                break;
            }
        }
    }
    */
    int T;
    scanf ("%d" , &T);
    while (T--)
    {
        LL n;
        LL p;
        scanf ("%lld %lld" , &n , &p);

        LL ans = solve (n , p);
        assert (ans >= 0);
        printf("%lld\n" , ans);
    }

    return 0;
}