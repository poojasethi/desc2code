#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<map>
#include<set>
#include<string>
#include<queue>
#include<stack>
using namespace std;

typedef pair<int,int> PII;

#define mp make_pair
#define pb push_back
#define fi first
#define se second

struct room
{
	int n,s,e,w,i;
};
vector< PII > east,west;
int n;
room rooms[100000];
map<int,int> yc;
map<int,int>::iterator it;

bool compare(PII x,PII y)
{
	if(x.fi<y.fi)
		return true;
	return false;
}

int main()
{
	scanf("%d",&n);
	int parent[100000];
	for(int i=0;i<n;i++)
	{
		scanf("%d%d%d%d",&rooms[i].w,&rooms[i].s,&rooms[i].e,&rooms[i].n);
		rooms[i].i=i;
		east.pb(mp(rooms[i].e,i));
		west.pb(mp(rooms[i].w,i));
	}
	sort(east.begin(),east.end(),compare);
	sort(west.begin(),west.end(),compare);
	int eit=0,wit=0;
	while(wit<n)
	{
		if(east[eit].fi<west[wit].fi)
		{
			yc.erase(rooms[east[eit].se].s);
			yc.erase(rooms[east[eit].se].n);
			eit++;
		}
		else
		{
			int c=west[wit].se;
			it=yc.lower_bound(rooms[c].s);
			if(it==yc.end())
			{
				parent[c]=-1;
			}	
			else
			{
				parent[c]=it->se;
			}
			yc[rooms[c].s]=parent[c];
			yc[rooms[c].n]=c;
			wit++;	
		}
	}
	for(int i=0;i<n;i++)
	{
		printf("%d\n",parent[i]);
	}
	return 0;
}