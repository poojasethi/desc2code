#include<iostream>
#include<stdio.h>
#include<climits>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<map>
#include<vector>
#include<queue>
#include<set>

using namespace std;

struct node
{
    int x,y1,y2;
    int id,up;
}arr[200100];

bool comp(node a,node b)
{
    return(a.x<b.x);
}

struct compare_y{
    bool operator()(const node &a,const node &b)
    {
        return a.y1<b.y1;
    }
};

int ans[200100];

int main()
{
    int n;
    scanf("%d",&n);
    arr[0].x=INT_MIN,arr[0].y1=INT_MIN,arr[0].y2=INT_MAX,arr[0].id=0,arr[0].up=0;
    int co=1;
    for(int i=1;i<=n;i++)
    {
        int a,b,c,d;
        scanf("%d%d%d%d",&a,&b,&c,&d);
        arr[co].x=a,arr[co].y1=b,arr[co].y2=d,arr[co].id=i,arr[co].up=0;
        co++;
        arr[co].x=c,arr[co].y1=b,arr[co].y2=d,arr[co].id=i,arr[co].up=1;
        co++;
    }
    arr[co].x=INT_MAX,arr[co].y1=INT_MIN,arr[co].y2=INT_MAX,arr[co].id=0,arr[co].up=1;
    sort(arr,arr+co+1,comp);
    set<node,compare_y> se;
    ans[0]=0;
    se.insert(arr[0]);
    for(int i=1;i<co;i++)
    {
        if(arr[i].up==0)
        {
            set<node,compare_y>::iterator it=se.lower_bound(arr[i]);
            it--;
            if(it->up==1)
                ans[arr[i].id]=ans[it->id];
            else
                ans[arr[i].id]=it->id;
            se.insert(arr[i]);
            node p=arr[i];
            p.up=1;
            p.y1=p.y2;
            se.insert(p);
        }
        else
        {
            node p=arr[i];
            p.up=0;
            se.erase(p);
            p.up=1;
            p.y1=p.y2;
            se.erase(p);
        }
    }
    for(int i=1;i<=n;i++)
        printf("%d\n",ans[i]-1);
    return 0;
}
