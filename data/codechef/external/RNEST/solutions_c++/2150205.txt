#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<string>
 
using namespace std;
 
#define s(n)				scanf("%d",&n)
#define sl(n)				scanf("%lld",&n)
#define sf(n)				scanf("%lf",&n)
 
#define EPS				1e-9
 
#define FOR(i,a,b)			for(int i=a;i<b;i++)
#define REP(i,n)			FOR(i,0,n)
#define foreach(v,c)			for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
 
#define mp				make_pair
#define pb				push_back
 
#define FF				first
#define SS				second
 
#define tri(a,b,c)			mp(a,mp(b,c))
#define XX				first
#define YY				second.first
#define ZZ				second.second
 
#define fill(a,v)			memset(a,v,sizeof a)     //Works properly only for v = 0 or -1
#define all(x)				x.begin(),x.end()
#define SZ(v)				((int)(v.size()))
#define DREP(a)				sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())
 
typedef pair<int,int> PII;
typedef pair<long long,long long> PLL;
typedef pair< int, PII > TRI;

typedef vector<int> VI;
typedef long long LL;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;
typedef vector<TRI> VT;

typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;
typedef vector<VT> VVT;

#define MAX 100010
#define INF (1e9)

int N, ans[MAX];

struct point{
	int m, x, y, right, end;
	point(){}
	point(int M, int X, int Y, int R, int E) : m(M), x(X), y(Y), right(R), end(E) {}
} arr[4*MAX];

set<point> sl;

bool operator < (const point &a, const point &b){
	return a.x < b.x;
}

bool compare(const point &a, const point &b){
	if(a.y == b.y){
		if(a.m == b.m)
			return a.x<b.x;
		return a.m<b.m;
	}
	return a.y<b.y;
}

int main(){

	int x1, x2, y1, y2;
	
	s(N);
	REP(i,N){
		s(x1);	s(y1);	s(x2);	s(y2);
		arr[4*i+0] = point(i, x1, y1, 0, 0);
		arr[4*i+1] = point(i, x1, y2, 0, 1);
		arr[4*i+2] = point(i, x2, y1, 1, 0);
		arr[4*i+3] = point(i, x2, y2, 1, 1);
	}
	sort(arr, arr+4*N, compare);
	FOR(i,0,4*N){
		if(arr[i].end){
			sl.erase(arr[i]);
			continue;
		}
		sl.insert(arr[i]);
		if(!arr[i].right)
			continue;
		set<point>::iterator it = sl.find(arr[i]);
		it++;
		if(it == sl.end()){
			ans[arr[i].m] = -1;
			continue;
		}
		if(it->right)
			ans[arr[i].m] = it->m;
		else
			ans[arr[i].m] = ans[it->m];
	}
	REP(i,N)
		printf("%d\n", ans[i]);
	
	return 0;
}
/*
6 0
2
1
2
3
2
1
5 10
10
20
10
5
10
*/
