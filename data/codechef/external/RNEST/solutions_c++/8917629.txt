#include<bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d",&x);
#define slld(x) scanf("%lld",&x);
#define LL long long
#define LD long double
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define Fill(a, b) memset(a, b, sizeof(a))
#define INF 2000000009

typedef pair<int,int> PII;
typedef vector<int> VI;

long long mod = 1000000009LL;

long long pwm(long long a , long long n )
{
    long long curr = a;
    long long res = 1;
    while(n)
    {
        if(n&1)
        {
            res = res*curr;
            res %= mod;
        }
        n /= 2;
        curr *= curr;
        curr %= mod;
    }
    return res;
}

int x11[112345],x12[112345];
int y11[112345],y12[112345];
int arrx[412345];
vector<PII> rect[412345];
vector<int> recnt[412345];
map<int,int> xm;
map<int,int> ym;
int par[112345];
int main()
{
    int n;
    sd(n);
    int cntr = 1;
    for(int i=1;i<=n;i++)
    {
        par[i] = -1;
        sd(x11[i]);arrx[cntr++]=x11[i];
        sd(y11[i]);arrx[cntr++]=y11[i];
        sd(x12[i]);arrx[cntr++]=x12[i];
        sd(y12[i]);arrx[cntr++]=y12[i];
        //rect[x1].push_back(MP(y1[i],y2[i]));
        //rect[x2].push_back(MP(y1[i],y2[i]));
    }
    sort(arrx , arrx+cntr);
    for(int i=0;i<cntr;i++)
    {
        xm[arrx[i]] = i+1;
    }

    for(int i=1;i<=n;i++)
    {
        rect[xm[x11[i]]].push_back(MP(xm[y11[i]],i));
        //cout<<"Pushed in rect["<<xm[x11[i]]<<"] pair : "<<xm[y11[i]]<<" "<<i<<endl;
        rect[xm[x11[i]]].push_back(MP(xm[y12[i]],-i));
        //cout<<"Pushed in rect["<<xm[x11[i]]<<"] pair : "<<xm[y12[i]]<<" "<<-i<<endl;
        rect[xm[x12[i]]].push_back(MP(xm[y11[i]],i));
        //cout<<"Pushed in rect["<<xm[x12[i]]<<"] pair : "<<xm[y11[i]]<<" "<<i<<endl;
        rect[xm[x12[i]]].push_back(MP(xm[y12[i]],-i));
        //cout<<"Pushed in rect["<<xm[x12[i]]<<"] pair : "<<xm[y12[i]]<<" "<<-i<<endl;
    }
    set<PII> curr;
    curr.insert(MP(0 , 0));
    curr.insert(MP(10*cntr, 0));
    for(int i=1;i<=cntr;i++)
    {
        sort(rect[i].begin() , rect[i].end());
        for(int j=0;j<rect[i].size();j++)
        {
            //cout<<rect[i][j].first<<" outer "<<rect[i][j].second<<endl;
            if(rect[i][j].second > 0 && xm[x11[rect[i][j].second]] == i)
            {
                set<PII>::iterator it = curr.lower_bound(rect[i][j]);
                it--;
                //cout<<(*it).first<<" inner1 "<<(*it).second<<endl;
                if((*it).second < 0 )
                {
                    par[rect[i][j].second] = par[-1*((*it).second)];
                }
                else
                {
                    par[rect[i][j].second] = ((*it).second);
                }

                curr.insert(rect[i][j]);
                curr.insert(MP(xm[y12[rect[i][j].second]],-rect[i][j].second));
            }
            else if(rect[i][j].second > 0 && xm[x12[rect[i][j].second]] == i)
            {
                //cout<<" inner2 "<<endl;
                if(curr.find(rect[i][j]) != curr.end())curr.erase(curr.find(rect[i][j]));
                PII r2 = MP(xm[y12[rect[i][j].second]],-rect[i][j].second);
                if(curr.find(r2) != curr.end())curr.erase(curr.find(r2));
            }
        }
    }
    for(int i=1;i<=n;i++)
    {
        printf("%d\n",par[i]-1);
    }
    //cout<<endl;

}
