#include<bits/stdc++.h>
using namespace std;
 
#define LET(x, a)  __typeof(a) x(a)
#define TR(v, it) for(LET(it, v.begin()); it != v.end(); it++)
#define si(x) scanf("%d",&x)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define MOD 1000000007
#define SET(x,y) memset(x,y,sizeof(x));
#define LL long long int
#define ULL unsigned LL
#define PII pair<int, int>
struct rect
{
    int x;
    int y1,y2;
    int idx;
    int typ;
};
rect R[1000003];
bool mycmp(rect i, rect j)
{
    return i.x<j.x;
}

class seg {
    struct node {
        node *l, *r;
        int val;
        int tp;
        node() {
            l = r = NULL;
            val = tp = 0;
        }
        void upd(int to) {
            tp = 1;
            val = to;
        }
        void push() {
            if (!tp)
                return;
            tp = 0;
            if (!l) 
                l = new node();
            l->upd(val);
            if (!r)
                r = new node();
            r->upd(val);
        }
    };
    void update(node *&cur, int cl, int cr, int ql, int qr, int to) {
        if (cl > qr || ql > cr)
            return;
        if (cur == NULL) 
            cur = new node();
        if (cl >= ql && cr <= qr) {
            cur->upd(to);
            return;
        }
        cur->push();
        int mid = (cl + cr) / 2;
        update(cur->l, cl, mid, ql, qr, to);
        update(cur->r, mid + 1, cr, ql, qr, to);
    }
    int query(node *cur, int cl, int cr, int loc) {
        if (cl > loc || cr < loc)
            return -1;
        if (cur == NULL)
            return -1;
        if (cl == cr) {
            return cur->val;
        }
        cur->push();
        int mid = (cl + cr) / 2;
        return max(query(cur->l, cl, mid, loc), query(cur->r, mid + 1, cr, loc)); 
    }
    public:
    node *top;
    int N;
    seg(int N) {
        top = NULL;
        this->N = N;
    }
    void U(int ql, int qr, int to) {
        update(top, 0, N, ql, qr, to);
    }
    int Q(int loc) {
        return query(top, 0, N, loc);
    }
    
};
int par[1000003];
seg* root;
int main() {
    root = new seg(INF + 1);
    int N;
    cin>>N;
    int pos = 0;
    for(int i=0;i<N;i++)
    {
        par[i] = -1;
        int x1,y1,x2,y2;
        cin>>x1>>y1>>x2>>y2;
        R[pos].x = x1;
        R[pos].y1 = y1;
        R[pos].y2 = y2;
        R[pos].typ = 0;
        R[pos].idx = i;
        pos++;

        R[pos].x = x2;
        R[pos].y1 = y1;
        R[pos].y2 = y2;
        R[pos].typ = 1;
        R[pos].idx = i;
        pos++;
    }
    sort(R,R+pos,mycmp);

    for(int i=0;i<pos;i++)
    {
        if(R[i].typ==0)
        {
            par[R[i].idx] = root->Q(R[i].y1);
            root->U(R[i].y1, R[i].y2, R[i].idx);
        }
        else
        {
            root->U(R[i].y1, R[i].y2, par[R[i].idx]);
        }
    }

    for(int i=0;i<N;i++)
        cout<<par[i]<<endl;
    return 0;
}

