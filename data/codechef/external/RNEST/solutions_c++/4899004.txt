#include<cstdio>
#include<cstring>
#include<cmath>
#include<vector>
#include<algorithm>
#include<stack>
#include<map>
using namespace std;
typedef long long ll;
const double eps=1e-6;
const int maxn=100005;
const int inf=0x3fffffff;

int n,ans[maxn];
vector<int>vis;
struct P{
    int id,x,y1,y2,z;
    P(){}
    P(int id,int x,int y1,int y2,int z):id(id),x(x),y1(y1),y2(y2),z(z){}
    bool operator<(const P&a)const{
        return x<a.x;
    }
}p[maxn+maxn];

struct ST{
    int l,r,val,d;
}st[maxn*8];
void down(int id){
    st[id<<1].val=st[id<<1|1].val=st[id].val;
    st[id<<1].d=st[id<<1|1].d=1,st[id].d=0;
}
void up(int id){
    if(st[id<<1].val==st[id<<1|1].val)st[id].val=st[id<<1].val;
    else st[id].val=-2;
}
void build(int id,int l,int r){
    st[id].l=l,st[id].r=r,st[id].val=-1,st[id].d=0;
    if(l==r)return;
    int m=(l+r)>>1;
    build(id<<1,l,m),build(id<<1|1,m+1,r);
}
void upd(int id,int l,int r,int val){
    if(st[id].l==l&&st[id].r==r){
        st[id].val=val,st[id].d=1;
        return;
    }
    if(st[id].d)down(id);
    int m=(st[id].l+st[id].r)>>1;
    if(r<=m)upd(id<<1,l,r,val);
    else if(l>m)upd(id<<1|1,l,r,val);
    else upd(id<<1,l,m,val),upd(id<<1|1,m+1,r,val);
    up(id);
}
int query(int id,int pos){
    if(st[id].val!=-2)return st[id].val;
    if(st[id].d)down(id);
    int m=(st[id].l+st[id].r)>>1;
    if(pos<=m)return query(id<<1,pos);
    return query(id<<1|1,pos);
}

void init(){
    scanf("%d",&n);
    memset(ans,-1,sizeof(ans));
    vis.clear();
    for(int i=1;i<=n;i++){
        int x1,y1,x2,y2;
        scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
        p[2*i-1]=P(i,x1,y1,y2,0);
        p[2*i]=P(i,x2,y1,y2,1);
        vis.push_back(y1),vis.push_back(y2);
    }
    sort(vis.begin(),vis.end());
    vis.erase(unique(vis.begin(),vis.end()),vis.end());
    for(int i=1;i<=n+n;i++){
        p[i].y1=lower_bound(vis.begin(),vis.end(),p[i].y1)-vis.begin()+1;
        p[i].y2=lower_bound(vis.begin(),vis.end(),p[i].y2)-vis.begin()+1;
    }
    build(1,1,vis.size());
    sort(p+1,p+n+n+1);
}

int main(){
 //   freopen("ACM/in.in","r",stdin);
    init();
    for(int i=1;i<=n+n;i++){
        if(p[i].z)upd(1,p[i].y1,p[i].y2,ans[p[i].id]);
        else{
            int ret=query(1,p[i].y1);
            ans[p[i].id]=ret;
            upd(1,p[i].y1,p[i].y2,p[i].id);
        }
    }
    for(int i=1;i<=n;i++)printf("%d\n",ans[i]==-1?-1:ans[i]-1);
    return 0;
}
