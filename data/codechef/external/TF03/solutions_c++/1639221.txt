/*
ID: nihalb
PROG: TF03
LANG: C++
*/

#include<stdio.h>
#define int64 long long
#define MOD 10000ll

int64 BinarySearch(int64 A[], int64 i, int64 j, int64 key)
{
    if(i>j) return 0;
    if(i == j)
    {
        if(A[i] < key) return i;
        else return 0;
    }
    int64 mid = i + 1 + (j-i)/2;
    if(A[mid] >= key) return BinarySearch(A,i,mid-1,key);
    else return BinarySearch(A,mid,j,key);
}

int64 BinSearch(int64 A[], int64 size, int64 key)
{
    return BinarySearch(A,1,size,key);
}

void FillLIS(int64* Lengths, int64* V, int64 start, int64 end, int64* A)
{
    int64 k;
    int64 L = Lengths[start-1];
    for(int64 i=start; i<=end; ++i)
    {
        k = BinSearch(V,L,A[i]);
        if(k == L)
        {
            V[k+1] = A[i];
            L++;
        }
        else if(A[i] < V[k+1]) V[k+1] = A[i];
        Lengths[i] = L;
    }
}

void Fill(int64* A, int64 start, int64 end)
{
    for(int64 i=start; i<=end; i++) A[i] = (i*i)%MOD;
}

int main()
{
    int T;
    scanf("%d",&T);
    int64* A = new int64[10000005];
    int64* V = new int64[10000005];
    int64* Lengths = new int64[10000005];
    Lengths[0] = 0;
    int64 size,k,MaxSoFar=0;
    while(T--)
    {
        scanf("%lld%lld",&size,&k);
        if(MaxSoFar < size)
        {
            Fill(A,MaxSoFar+1,size);
            FillLIS(Lengths,V,MaxSoFar+1,size,A);
            MaxSoFar = size;
        }
        if(k <= Lengths[size]) printf("1\n");
        else printf("0\n");
    }
    delete[] A,V,Lengths;
	return 0;
}
