#include<iostream>
#include<stdlib.h>
#include<string>
using namespace std;
void LPSArray(long int lps[],string pat)
{
    long int len = 0;
    lps[0] = 0;
    long int i=1;
    while(i<pat.length())
    {
        if(pat[len]==pat[i])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if(len!=0)
                len = lps[len-1];
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
void KMP(string txt,string pat)
{
    long int lt = txt.length();
    long int lp = pat.length();
    long int i=0,j=0;
    long int sum=0;
    long int *lps = (long int *)malloc(sizeof(long int)*lp);
    LPSArray(lps,pat);
    while(i<lt)
    {
        if(txt[i]==pat[j])
        {
            i++;
            j++;
        }
        if(j==lp)
        {
            sum++;
            j = lps[j-1];
        }
        else if(i<lt && txt[i]!=pat[j])
        {
            if(j!=0)
                j = lps[j-1];
            else
                i++;
        }
    }
    if(sum==0)
        cout<<"-1"<<endl;
    else
        cout<<sum<<endl;
}
int main()
{
    int T;
    long int N,M,k;
    cin>>T;
    while(T--)
    {
        cin>>N>>M>>k;
        string txt,pat;
        cin>>txt>>pat;
        string p = pat.substr(0,k);
        KMP(txt,p);
    }
    return 0;
}
