/*
EDITORIAL : 
You basically have to perform modulo multiplication(with m) for all numbers between [1,N], where m=2b.
For example n=5 , b=7 hence m=2b=14.
So you find (n! % m) = 120%14=8 now since 8>= b, answer is odd.
Why does it work?
7x1=7
7x2=14             14x1=14
7x3=21
...
7x14=98            14x7=98
7x15=105
7x16=112            14x8=112
7x17=119
7x18=126             14x9=126

Now 120 lies between 112(14x8) and 126(14x9) which means in 7s table it falls between (7x16) and (7x18)
Since you know the remainder of 120%14=8
112 % 14 ...... 126 % 14 = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,0 (14s table)
112 % 7 ..... 119 % 7 ..... 126 % 7 =0,1,2,3,4,5,6,0,1,2,3,4,5,6,0 (7s table)
if remainder is <7 , 16 would be your quotient but here remainder=8 which is >=7 , hence quotient would be 17. 
*/
#include<iostream>
using namespace std;
long long mulmod(long long a,long long b,long long c){
    long long x = 0,y=a%c;
    while(b > 0){
        if(b%2 == 1){
            x = (x+y)%c;
        }
        y = (y*2)%c;
        b /= 2;
    }
    return x%c;
}
int main(){
	int t;
	cin>>t;
	while(t--){
		long long int a,b;
		cin>>a>>b;
		long long int val=1;
		long long int mod=2*b;
		for(int i=1;i<=a;i++)
		{
			val=mulmod(val,i,mod);
		}
		if(val>=b)
		cout<<"Odd\n";
		else
		cout<<"Even\n";
	}	
}