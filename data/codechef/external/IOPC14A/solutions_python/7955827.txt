import java.io.*;
import java.util.*;
import java.math.BigInteger;
class fact{
static InputReader reader;
public static void main(String args[])throws IOException{
solve();}
public static void solve()throws IOException 
{
int T; 
long b,n;
reader=new InputReader(System.in);
//System.out.println("--Tester--");
T=reader.readInt();
for(int i=1;i<=T;i++){
b=reader.readLong();
n=reader.readLong();
solver(BigInteger.valueOf(b),BigInteger.valueOf(n));}
}

public static void solver(BigInteger N,BigInteger B)
{
BigInteger res=BigInteger.ONE;
BigInteger TWO=BigInteger.valueOf(2);
BigInteger me=B;
B=B.multiply(TWO);
int to=Integer.parseInt(N.toString());
for(int i=2;i<=to;i++){
res=res.multiply(BigInteger.valueOf(i));
res=res.mod(B);}
System.out.println(res.compareTo(me)>=0?"Odd":"Even");
return;
}
  static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
 
        public InputReader(InputStream stream) {
            this.stream = stream;
        }
 
        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }
 
        public final int readInt() throws IOException {
            return (int)readLong();
        }
 
        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
                if (c == -1) throw new IOException();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return negative ? -res : res;
        }
 
        public final int[] readIntArray(int size) throws IOException {
            int[] array = new int[size];
            for (int i=0; i<size; i++) {
                array[i] = readInt();
            }
            return array;
        }
 
        public final long[] readLongArray(int size) throws IOException {
            long[] array = new long[size];
            for (int i=0; i<size; i++) {
                array[i] = readLong();
            }
            return array;
        }
 
        public final String readString() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            StringBuilder res = new StringBuilder();
            do {
                res.append((char)c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }
 
        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }
 
}