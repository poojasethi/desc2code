#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<cmath>
#include<stack>
#include<queue>
#include<algorithm>
#define all(c) c.begin(),c.end()
#define tr(c,it) for(typeof(c.begin()) it=c.begin();it!=c.end();it++)
#define sz(c) c.size()
#define pb push_back
#define mp make_pair
#define inf 1000001
//#define gc() getchar_unlocked()
//#define pc(x) putchar_unlocked(x)
#define ll long long int
#define SIZE 100001

using namespace std;


typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
typedef map<int,int> mii;


/*
static inline int fastio()
{
    int x=0;
    char c=gc();
    while(c<'0'||c>'9')
    {
        c=gc();
    }
    while(c>='0'&&c<='9')
    {
        x=(x<<1)+(x<<3)+c-'0';
        c=gc();
    }
    return x;
}


static inline void fastWrite(ll x)
{

  char s[21];
  int i=0;
  do
  {
      s[i++]=x%10+'0';
      x/=10;
  }while(x);
  --i;
  while(i>=0)
  {
      pc(s[i--]);
  }
  pc('\n');

}




int gcd(int x,int y)
{
return(y?gcd(y,x%y):x);
}

int f(int x,int y)
{
    int cnt=0;
    for(int i=x;i<=y;i++)
    {
        if(!(i%x))
            cnt++;
    }
    return cnt;
} */

int arr[SIZE];
int lazy[SIZE<<2]={0};
int tree[SIZE<<2];

void build_tree(int lower,int upper,int node)
{
if(lower>upper)
{
    return;
}
if(lower==upper)
{
    tree[node]=arr[lower];
    return;
}
int mid=(lower+upper)/2;
build_tree(lower,mid,2*node);
build_tree(mid+1,upper,2*node+1);
tree[node]=tree[node*2]+tree[node*2+1];
}

ll query_tree(int lower,int upper,int l,int r,int node)
{
if(lower>upper||lower>r||upper<l)
{
    return 0;
}
if(lower>=l&&upper<=r)
{
    return(tree[node]);
}
int mid=(lower+upper)/2;
ll q1=(query_tree(lower,mid,l,r,2*node));
ll q2=(query_tree(mid+1,upper,l,r,2*node+1));
return(q1+q2);
}

















int main()
{
   ios_base::sync_with_stdio(false);
   cin.tie(0);
   int N;
   int Q;
   int L,R;
   cin>>N>>Q;
   int i;
   for(i=0;i<N;i++)
    cin>>arr[i];
   build_tree(0,N-1,1);
   while(Q--)
   {
     cin>>L>>R;
     --L;--R;
     cout<<(query_tree(0,N-1,0,L-1,1)+query_tree(0,N-1,R+1,N-1,1))<<endl;
    }
    return 0;
}





