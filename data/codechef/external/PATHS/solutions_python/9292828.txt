#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 

using namespace std;
using namespace __gnu_pbds;

#define INF 1000000009

typedef tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vector<int> > vvi;
typedef pair<int,int> ii;
typedef vector<pair<int,int> > vii;
typedef vector<vector<pair<int,int> > > vvii;

#define all(x) (x).begin(), (x).end()
#define nall(x) (x).rbegin(), (x).rend()
#define tr(x,it) for(auto it = (x).begin();it!=(x).end();++it)
#define ntr(x,it) for(auto it = (x).rbegin();it!=(x).rend();++it)
#define ufy(v) sort(all(v));(v).erase(unique(all((v))),(v).end())
#define sz(a) int((a).size()) 
#define boost ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define pb push_back 
#define PB pop_back
#define pf push_front
#define PF pop_front
#define MP make_pair
#define clr clear
#define rz resize
#define C(a,b) memset(a,b,sizeof(a))
#define ia(a,n) FOR(i,0,n-1)cin>>a[i]
#define ia1(a,n) FOR(i,1,n)cin>>a[i]
#define fpresent(c,x) ((c).find(x) != (c).end())  // set,map
#define present(c,x) (find(all(c),x) != (c).end())  //vector
#define F first
#define S second
#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define NFOR(i,a,b) for(int i=a;i>=b;--i)
#define rep(i,n) FOR(i,0,n-1)
#define TCASE int __T;cin>>__T;FOR(Tc,1,__T)
inline int add(int a,int b, int m=INF){a+=b;if(a>=m)a-=m;return a;}
inline int mul(int a,int b, int m=INF){return (int)(((ll)a*(ll)b)%m);}
inline int norm(int x,int m=INF){if(x>=m)x%=m;if(x<0)x+=m;return x;}
inline int neg(int x,int m=INF){x=-x;return norm(x);}
const int INFF=1e9+363;

vii ans;
int C[2001][2001];
int dp[1001][1001];
int main()
{
    boost;
    C[0][0]=1;
    FOR(i,1,2000){
    	C[i][0]=1;
    	FOR(j,1,i){
    		C[i][j]=add(C[i-1][j],C[i-1][j-1]);
    	}
    }
    FOR(i,1,1000)dp[1][i]=1;
    FOR(i,2,1000){
    	dp[i][1]=1;
    	FOR(j,2,1000){
    		dp[i][j]=add(dp[i-1][j],dp[i][j-1],INFF);
    	}
    }
    TCASE{
    	string x;
    	cin>>x;
    	int hash=0,h2=0;;
    	FOR(i,0,sz(x)-1)hash=add(mul(hash,10),x[i]-'0'),h2=add(mul(h2,10,INFF),x[i]-'0',INFF);
    	
    	ans.clear();
    	FOR(n,1,1000)
    	{
    		FOR(m,1,1000)
    		{
    			if(C[n+m-2][n-1]==hash and dp[n][m]==h2)ans.pb({n,m});
    		}
    	}
    	if(sz(ans)==0){
    		cout<<"The Grid is Too Big!\n";
    		continue;
    	}
    	cout<<ans.size()<<"\n";
    	tr(ans,it){
    		cout<<it->F<<" "<<it->S<<"\n";
    	}
    	
    }
	return 0;
}
