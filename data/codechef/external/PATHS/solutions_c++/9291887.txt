#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define MOD1 1000000007
#define MOD2 1000000009
using namespace std;
typedef long long int LL;

LL dp1[1004][1004] , dp2[1004][1004];

int main()
{
int len , test;
scanf("%d",&test);
LL  hash1 = 0 , hash2 = 0;
std::vector< pair < int , int > > temp ;
memset(dp1 , 0 , sizeof(dp1));
memset(dp2 , 0 , sizeof(dp2));
dp1[0][1] = 1;
dp2[0][1] = 1;
LL val1 , val2;
for(int i=1;i<=1000;i++)
{
	for(int j=1;j<=1000;j++)
	{
		val1 = ((dp1[i-1][j]%MOD1) + (dp1[i][j-1]%MOD1))%MOD1;
		val2 = ((dp2[i-1][j]%MOD2) + (dp2[i][j-1]%MOD2))%MOD2;
		dp1[i][j] = val1;
		dp2[i][j] = val2;
	}
}
LL tp1 =1  , tp2 = 1;
while(test--){
string str;
cin >> str;
	len = str.length();
	tp1 = 1;
	tp2 = 1;
	hash1 = 0;
	hash2 = 0;
	for(int i=len-1;i>=0;i--)
	{
		hash1 = (hash1%MOD1 + ((str[i] - '0')*tp1)%MOD1)%MOD1;
		hash2 = (hash2%MOD2 + ((str[i] - '0')*tp2)%MOD2)%MOD2;
		tp1 = (tp1 * 10)%MOD1;
		tp2 = (tp2 * 10)%MOD2;
	}
	for(int i=1;i<=1000;i++)
	{
		for(int j=1;j<=1000;j++)
		{
			if(dp1[i][j] == hash1 && dp2[i][j] == hash2)
				temp.push_back(make_pair(i , j));
		}
	}
	if(temp.size() == 0)
		printf("The Grid is Too Big!\n");
	else
	{
		printf("%d\n",(int)temp.size());
		for(int i=0;i<temp.size();i++)
			printf("%d %d\n", temp[i].first , temp[i].second);
	}
	temp.clear();
}
return 0;
}











