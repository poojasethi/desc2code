#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
using namespace std;
typedef long long int ll;
ll dp[100][2][2][2][2][2][2][2][2][2][2],cp[100][2][2][2][2][2][2][2][2][2][2],ans,a[100],n;
ll recc(ll index,ll zero,ll one,ll two,ll three,ll four,ll five,ll six,ll seven,ll eight,ll nine)
{
    if(dp[index][zero][one][two][three][four][five][six][seven][eight][nine]!=-1)
        return dp[index][zero][one][two][three][four][five][six][seven][eight][nine];
    if(index==n)
        return 0;
    int number;
    number=a[index];
    ll m[10]={0};
    while(number!=0)
    {
        m[number%10]=1;
        number/=10;
    }
    ll flag=0;
    ll f=0,s=0;
    if((m[0]==1&&zero==1)||(m[1]==1&&one==1)||(m[2]==1&&two==1)||(m[3]==1&&three==1)||(m[4]==1&&four==1)||(m[5]==1&&five==1)||(m[6]==1&&six==1)||(m[7]==1&&seven==1)||(m[8]==1&&eight==1)||(m[9]==1&&nine==1))
        flag=1;
    if(index==n-1)
    {
        if(flag==1)
        {
            dp[index][zero][one][two][three][four][five][six][seven][eight][nine]=0;
            cp[index][zero][one][two][three][four][five][six][seven][eight][nine]=0;
            return dp[index][zero][one][two][three][four][five][six][seven][eight][nine];
        }
        else
        {
            dp[index][zero][one][two][three][four][five][six][seven][eight][nine]=a[index];
            cp[index][zero][one][two][three][four][five][six][seven][eight][nine]=1;
            return dp[index][zero][one][two][three][four][five][six][seven][eight][nine];
        }
    }
    if(flag==0){
    f=a[index]+recc(index+1,(zero|m[0]),(one|m[1]),(two|m[2]),(three|m[3]),(four|m[4]),(five|m[5]),(six|m[6]),(seven|m[7]),(eight|m[8]),(nine|m[9]));
    s=recc(index+1,zero,one,two,three,four,five,six,seven,eight,nine);

    if(f==s)
    {
        if(cp[index+1][zero][one][two][three][four][five][six][seven][eight][nine]>cp[index+1][zero|m[0]][one|m[1]][two|m[2]][three|m[3]][four|m[4]][five|m[5]][six|m[6]][seven|m[7]][eight|m[8]][nine|m[9]])
        {
            dp[index][zero][one][two][three][four][five][six][seven][eight][nine]=s;
            cp[index][zero][one][two][three][four][five][six][seven][eight][nine]=cp[index+1][zero][one][two][three][four][five][six][seven][eight][nine]+0;
        }
        else
        {
            dp[index][zero][one][two][three][four][five][six][seven][eight][nine]=f;
            cp[index][zero][one][two][three][four][five][six][seven][eight][nine]=cp[index+1][zero|m[0]][one|m[1]][two|m[2]][three|m[3]][four|m[4]][five|m[5]][six|m[6]][seven|m[7]][eight|m[8]][nine|m[9]]+1;
        }
        return dp[index][zero][one][two][three][four][five][six][seven][eight][nine];
    }
    if(f>s)
    {
        dp[index][zero][one][two][three][four][five][six][seven][eight][nine]=f;
        cp[index][zero][one][two][three][four][five][six][seven][eight][nine]=cp[index+1][zero|m[0]][one|m[1]][two|m[2]][three|m[3]][four|m[4]][five|m[5]][six|m[6]][seven|m[7]][eight|m[8]][nine|m[9]]+1;
        return dp[index][zero][one][two][three][four][five][six][seven][eight][nine];
    }
    if(f<s)
    {
        dp[index][zero][one][two][three][four][five][six][seven][eight][nine]=s;
        cp[index][zero][one][two][three][four][five][six][seven][eight][nine]=cp[index+1][zero][one][two][three][four][five][six][seven][eight][nine]+0;
        return dp[index][zero][one][two][three][four][five][six][seven][eight][nine];
    }
    }
    if(flag==1)
    {//f=a[index]+recc(index+1,(zero|m[0]),(one|m[1]),(two|m[2]),(three|m[3]),(four|m[4]),(five|m[5]),(six|m[6]),(seven|m[7]),(eight|m[8]),(nine|m[9]));
    s=recc(index+1,zero,one,two,three,four,five,six,seven,eight,nine);
    dp[index][zero][one][two][three][four][five][six][seven][eight][nine]=s;
    cp[index][zero][one][two][three][four][five][six][seven][eight][nine]=cp[index+1][zero][one][two][three][four][five][six][seven][eight][nine]+0;
    return dp[index][zero][one][two][three][four][five][six][seven][eight][nine];


    }

}
int main()
{
    ll i,j,fu;
    while(cin>>n)
    {
        //map<ll ,int> m;
        j=0;
        ans=0;
        memset(dp,-1,sizeof(dp));
        memset(cp,0,sizeof(cp));
        for(i=0;i<n;i++)
        {
            cin>>a[i];
            /*cin>>fu;
           if(m.find(fu)==m.end())
            {
                m[fu]=1;
                a[j++]=fu;
            }
*/
        }
  //      n=j;
       // for(i=0;i<n;i++)
          //  cout<<a[i];
        recc(0,0,0,0,0,0,0,0,0,0,0);
        //cout<<dp[0][0][0][0][0][0][0][0][0][0][0]<<endl;
        cout<<cp[0][0][0][0][0][0][0][0][0][0][0]<<endl;
        //cout<<cp[0][0][0][0][0][0][0][0][0][0][0]+1<<endl;

    }
    return 0;
}
