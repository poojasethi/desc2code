#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b); }
#define LCM(a,b)  { return a*b/GCD(a,b);  }
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define FORN(i,n) for(i=n;i>=0;i--)
#define FORN_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int lld;
using namespace std;
struct node{
	bool st;
	lld val;
	lld ct;
};
node dp[103][1030];
lld a[103],bit[103];
lld n;
node rec(lld pos, lld used)
{
	if(pos==n){
		node ans={true,0,0};
		return ans;
	}
	else if(dp[pos][used].st==true)
	return dp[pos][used];
	else
	{
		node x,y;
		if ( (bit[pos]+used) == (bit[pos] | used) )
		{
			x=rec(pos+1,used);
			y=rec(pos+1,used|bit[pos] );
			if(x.val> (y.val + a[pos] ) )
			{
				dp[pos][used]=x;
				return dp[pos][used];
			}
			else if( x.val < (y.val + a[pos] ) )
			{
				dp[pos][used]=(node){ true,y.val+a[pos],y.ct+1 };
				return dp[pos][used];
			}
			else
			{
				lld tmp=MAX(x.ct,(y.ct+1) );
				dp[pos][used]=(node) {true,x.val,tmp};
				return dp[pos][used];
			}
		}
		else
		{
			dp[pos][used]=rec(pos+1,used);
			return dp[pos][used];
		}
	}
	
}
int main()
{
	ios_base::sync_with_stdio(0);
	lld i,j,md,tmp;
	while(cin>>n)
	{
		FOR(i,n)
		cin>>a[i];
		FOR(i,n)
		{
			tmp=a[i];
			bit[i]=0;
			while(tmp>0)
			{
				md=tmp%10;
				bit[i]=	bit[i] | (1<<md);
				tmp/=10;
			}
		//	cout<<a[i]<<" "<<bit[i]<<endl;
		}
		FOR(i,n+2)
		{
			FOR(j,1030)
			{
				dp[i][j].st=false;
			}
		}
		cout<<rec(0,0).ct<<endl;
	}
	return 0;
}