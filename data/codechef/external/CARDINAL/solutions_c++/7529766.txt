#include<bits/stdc++.h>
using namespace std;
long long DP[101][1024];
int Card[101][1024];

int GetMask(int num)
{
    int mask=0;
    while(num)
    {
        int digit=num%10;
        mask|=1<<digit;
        num/=10;
    }
    return mask;
}

int main()
{
ios::sync_with_stdio(0);
cin.tie(0);
    int N;
    for(;1;)
    {
        if(cin>>N);
        else return 0;

        int A[N+1],i,j;
        long long Ans=0;
        int C=0;

        for(i=1;i<=N;++i)
            {
                cin>>A[i];
            }

        for(i=1;i<=N;++i)
        {
            int Mask=GetMask(A[i]);
            for(j=0;j<(1<<10);++j)
            {
                DP[i][j]=DP[i-1][j];
                Card[i][j]=Card[i-1][j];
                if((j|Mask)==j)
                {

                    if(DP[i-1][j]<DP[i-1][j^Mask]+A[i])
                    {
                        Card[i][j]=Card[i-1][j^Mask]+1;
                        DP[i][j]=DP[i-1][j^Mask]+A[i];
                    }
                    else if(DP[i-1][j]==DP[i-1][j^Mask]+A[i])
                    {
                        Card[i][j]=max(Card[i-1][j^Mask]+1,Card[i-1][j]);
                        DP[i][j]=DP[i-1][j^Mask]+A[i];
                    }
                    else
                    {
                        DP[i][j]=DP[i-1][j];
                        Card[i][j]=Card[i-1][j];
                    }

                    if(Ans<DP[i][j])
                    {
                        Ans=DP[i][j];
                        C=Card[i][j];
                    }
                    else if(Ans==DP[i][j])
                    {
                            C=max(Card[i][j],C);
                    }
                }
            }
        }
        cout<<C<<"\n";
        memset(Card,0,sizeof(Card));
        memset(DP,0,sizeof(DP));
    }
    return 0;
}
