#include<bits/stdc++.h>
using namespace std;

const int N=123;
const int C=1024;

long long a[N], fsum[C], fcar[C];

int _findset(int num) {
    int res=0;
    while(num) {
        res|=(1<<(num%10));
        num/=10;
    }
    return res;
}

int main() {
    int n;
    while(scanf("%d", &n)!=-1) {
        memset(fsum, 0, sizeof(fsum));
        memset(fcar, 0, sizeof(fcar));
        for(int i=0;i<n;i++) {
            scanf("%d", &a[i]);
        }
        for(int i=0;i<n;i++) {
            int bit=_findset(a[i]);
            for(int j=0;j<C;j++) {
                if(!(bit & j)) {
                    int _nset=bit|j;
                    if(fsum[_nset]<fsum[j]+a[i]) {
                        fsum[_nset]=fsum[j]+a[i];
                        fcar[_nset]=fcar[j]+1;
                    } else if(fsum[_nset]==fsum[j]+a[i]) {
                        fcar[_nset]=max(fcar[_nset], fcar[j]+1);
                    }
                }
            }
        }
        long long sum=0, _max=0;
        for(int i=0;i<C;i++) {
            if(sum<fsum[i]) {
                sum=fsum[i];
                _max=fcar[i];
            } else if(sum==fsum[i]) {
                _max=max(_max, fcar[i]);
            }
        }
        printf("%d\n", _max);
    }
}
