#include <cstdio>

using namespace std;

/*
https://www.codechef.com/problems/CARDINAL
*/

#define MAX 200

#define MAX_DIGIT 10

int N;
long long arr[MAX];

struct value
{
	long long sum;
	int cardi;
};

int all_mask;

value dp[1<<MAX_DIGIT][MAX];

int getmask(long long n)
{
	int mask = 0;

	do
	{
		long long q = n%10;
		mask = mask | (1 << q);
		n = n/10;
	} while(n);

	return mask;
}

value findMaxCardinalUtil(int bitmask, int index)
{
	value& res = dp[bitmask][index];
	// all digit chosen, hence no need to go further
	if(bitmask == all_mask || index > N-1)
	{
		value temp;
		temp.cardi = 0;
		temp.sum = 0;
		return temp;
	}

	if(res.sum != -1 && res.cardi != -1)
		return res;

	int cur_mask = getmask(arr[index]);

	if(index == N-1)
	{
		if( (bitmask & cur_mask) == 0)
		{
			res.sum = arr[index];
			res.cardi = 1;
		}
		else
		{
			res.sum = 0;
			res.cardi = 0;
		}
		return res;
	}

	//if we dont take this value
	value val1 = findMaxCardinalUtil(bitmask, index+1);

	//if we can take this value
	if((bitmask & cur_mask) == 0)
	{
		value val2 = findMaxCardinalUtil(bitmask|cur_mask, index+1);

		val2.sum += arr[index];
		val2.cardi += 1;

		if(val1.sum > val2.sum)
			return res = val1;
		else if(val2.sum > val1.sum)
			return res = val2;
		else if(val1.cardi > val2.cardi)
			return res = val1;
		else
			return res = val2;
	}
	else
		return res = val1;
}

int findMaxCardinal()
{
	// bitmask 0 and index 0
	value ans = findMaxCardinalUtil(0, 0);
	return ans.cardi;
}


int main()
{
	//freopen("input.txt", "r", stdin);

	while(scanf("%d" , &N) != EOF)
	{
		for(int i=0;i<N; i++)
			scanf("%lld", &arr[i]);

		for(int i=0; i< (1<<MAX_DIGIT); i++)
		{
			for(int j=0; j<N; j++)
			{
				dp[i][j].cardi = -1;
				dp[i][j].sum = -1;
			}
		}

		all_mask = (1<<MAX_DIGIT)-1;
		int answer = findMaxCardinal();
		printf("%d\n" , answer);
	}
	return 0;
}