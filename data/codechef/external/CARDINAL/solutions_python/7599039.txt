//written by raj_0jaiswal
#include <bits/stdc++.h>
using namespace std;
#define crt()  int t; cin>>t; while(t--)
#define ll long long
#define mod 1000000007
#define mxx 100005
#define sc(n) scanf("%d",&n)
#define out(x) #x << " = " << x << "   "
#define DBG(vari) cerr<<#vari<<" ==> "<<(vari)<<endl;
#define pb                      push_back
#define vt                      vector<int>
#define pi                      pair<int,int>
#define mp                      make_pair
#define ff                      first
#define ss                      second
#define maX(a,b)                ((a)>(b)?(a):(b))
#define miN(a,b)                ((a)<(b)?(a):(b))
#define INF                     (int)1e9
#define SORT(_a,_b)             sort(_a,_b,greater<int>())
#define DPdbg(n)                for(int i=0;i<=n;i++){for(int j=0;j<=n;j++)cout<<dp[i][j]<<" ";cout<<endl;}
/*inline int scan(){ register int t=0;char c=getchar_unlocked();while(c<'0' || c>'9')c=getchar_unlocked();
while(c>='0' && c<='9'){t=(t<<3)+(t<<1)+c-'0';c=getchar_unlocked();} return(t);}*/
ll power(ll aa,ll pp){ ll xx=1,yy=aa%mod; while(pp>0){ if(pp&1) xx=(xx*yy)%mod; yy=(yy*yy)%mod; pp=pp>>1;} return xx%mod;}
bool cmp(pi a,pi b){if(a.ff!=b.ff)return a.ff<b.ff; else return a.ss<b.ss;}
int A[101],bits[101],cord[1025];
ll sum[1025];
int main()
{
    //ios_base::sync_with_stdio(false);
    int n;
    while(scanf("%d",&n)!=EOF)
    {
        memset(sum,0,sizeof(sum));
        memset(cord,0,sizeof(cord));
        int i,j,k,xd;
        for(i=0;i<n;i++){
            scanf("%d",&A[i]);
            k=A[i];xd=0;
            while(k){
                xd=xd|(1<<(k%10));
                k=k/10;
            }
            bits[i]=xd;  //set bit for present digit(0 to 9) 
        }
        //for(i=0;i<n;i++) cout<<bits[i]<<" ";
        for(i=0;i<n;i++)
        {
        	int b=bits[i];
            for(j=0;j<1024;j++)
            {
                if((j&b)==0)
                {
                    int index = b|j;  //no of set index in index is equal to the # of set bits of b + # j
                    if(sum[index] < sum[j]+A[i])
                    {
                        sum[index]=sum[j]+A[i];
                        cord[index]=cord[j]+1;
                    }
                    else if(sum[index]==sum[j]+A[i])
                    {
                        cord[index]=maX(cord[index],cord[j]+1);
                    }
                }
            }
        }
        //for(i=0;i<20;i++)cout<<sum[i]<<" ";
        int cnt=0;
        ll mx=0;
        for(i=0;i<1024;i++)
        {
            if(sum[i]>=mx){
             mx=sum[i];
             cnt=maX(cnt,cord[i]);
            }
        }
        printf("%d\n",cnt);
    }
    return 0;
}

