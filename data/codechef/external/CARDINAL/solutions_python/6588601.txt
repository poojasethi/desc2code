#include <iostream>
#include "bits/stdc++.h"
using namespace std;
long long mask;
long long a[200];
long long p,mark[200];
long long ans,n;
long long dpmasks[200];
long long compute_mask(long long mask,long long num)
{
	long long h=num;
	while(h)
	{
	  mask=(mask|(1<<(h%10)));
	    h=h/10;
	}
	return mask;
}
long long ans3; // for included elemnts
void solve(long long mask,long long sum,long long index,long long inc)
{
   //if(mask==p)  return;
    if(index==n)
      {
        	if(ans<sum) {ans=sum;ans3=inc;}
    else{ if(ans==sum)
           if(ans3<inc) 
       
       ans3=inc;}
        return;
      }
      solve(mask,sum,index+1,inc);
      
    
    if((dpmasks[index]&mask)==0)
    solve(mask|(dpmasks[index]),sum+a[index],index+1,inc+1);
    
     return;
}
int main() {
	while(scanf("%lld",&n)!=EOF){
//	scanf("%lld",&n);
	  for(int i=0;i<n;i++)
	  {
	  	scanf("%lld",&a[i]);
	      dpmasks[i]=compute_mask(0,a[i]);	  
	  }
	  
	  p= (1<<10)-1;
	  int ans1=0;int AN=0;
	//  for(int i=0;i<n;i++)
	  //{
	  	ans=0;mask=0;ans3=0;
	  	memset(mark,0,sizeof(mark));
	  	solve(0,0,0,0);
	  	// ans1 has actual sum and AN has actual no elemnts
	  //	if(ans1<ans) {ans1=ans;AN=ans3;}
	  	//else if(ans1==ans){
	  	//	if(ans3>AN) AN=ans3;
	  //}
	  	//if(ans3>AN) AN=ans3;
	  //}
   printf("%lld\n",ans3);
	// cout<<ans3<<endl;
//	  cout<<ans<<endl;
	 // printf("%d\n",AN);
	}
	return 0;
} 