#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define all(a)  a.begin(), a.end()
#define allr(a) a.rbegin(), a.rend()
#define SL(n) scanf("%lld", &n)
#define fill(a, x) memset(a, x, sizeof(a));
#define mod 1000000007
#define eps 0.000000001

using namespace std;
typedef long long LL;
typedef vector <LL> VL;
typedef map <LL, LL> ML;
typedef pair<LL, LL> PL;
typedef vector <PL> VPL;

int N;
LL a[105];
typedef struct node{
    LL Max;
    int Count;
}node;

node dp[105][1024];
int Max;
node res;

bool isSet(int x, int mask){
    return (mask & (1 << x));
}

int Set(int x, int mask){
    return (mask | (1 << x));
}

node Solve(int pos, int mask){
    if(pos >= N){
        node x;
        x.Max = 0;
        x.Count = 0;
        return x;
    }
    node res = dp[pos][mask];
    if(res.Max != -1 && res.Count != -1){
        return dp[pos][mask];
    }
    int x = a[pos];
    bool flag = true;
    while(x){
        if(isSet(x % 10, mask)){
            flag = false;
            break;
        }
        x /= 10;
    }
    x = a[pos];
    int tmask = mask;
    int y = 0;
    int Ans = 0;
    while(x){
        mask = Set(x % 10, mask);
        x /= 10;
    }
    if(flag){
        node temp = Solve(pos + 1, mask);
        int tans = a[pos] + temp.Max;
        if(tans > Ans){
            Ans = tans;
        }
        y = 1 + temp.Count;
    }
    node temp = Solve(pos + 1, tmask);
    if(temp.Max > Ans){
        Ans = temp.Max;
        y = temp.Count;
    }
    else if(temp.Max == Ans){
        y = max(y, temp.Count);
    }
    node RAns;
    RAns.Max = Ans;
    RAns.Count = y;
    return (dp[pos][tmask] = RAns);
}

int main() {
    while(scanf("%d", &N) != EOF){
        fill(a, (LL)0);
        for(int n=0;n<N;++n){
            scanf("%lld", &a[n]);
        }
        sort(a, a+N);
        for(int n=0;n<(N/2);++n){
            swap(a[n], a[N - n - 1]);
        }
        res.Max = -1;
        res.Count = -1;
        for(int n=0;n<N;++n){
            for(int i=0;i<1024;++i){
                dp[n][i] = res;
            }
        }
        node Ans;
        Ans = Solve(0, 0);
        printf("%d\n", Ans.Count);
    }
    return 0;
}