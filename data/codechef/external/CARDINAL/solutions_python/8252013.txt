#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <vector>
#include <string>
#include <set>
#include <cstring>
#include <functional>
#include <iomanip>
#include <cmath>
#define ll long long
#define pb push_back
#define mp make_pair
#define gcd(a,b) __gcd(a,b)
#define fillm(v,val) memset(v,val,sizeof(v))
#define _iosync ios_base::sync_with_stdio(false);cin.tie(0);
const ll mod = 1000000007ll;
#define pi acos(-1.0)

using namespace std;

const ll maxn = 105;
ll ar[maxn];
pair<ll, ll> dp[maxn][(1 << 10)];
ll state[maxn][10];

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll n;
    while (cin >> n)
    {
        for (int i = 0; i <= n; ++i)
        {
            for (int j = 0; j < (1 << 10); ++j)
            {
                dp[i][j].first = -1;
                dp[i][j].second = -1;
            }
        }
        dp[0][0].first = 0;
        dp[0][0].second = 0;
        fillm(state, 0);
        for (int i = 1; i <= n; ++i)
        {
            cin >> ar[i];
            ll temp = ar[i];
            while (temp)
            {
                state[i][temp % 10] = 1;
                temp /= 10;
            }
        }
        for (int i = 1; i <= n; ++i)
        {
            for (int j = 0; j < (1 << 10); ++j)
            {
                dp[i][j] = dp[i - 1][j];
                ll flag = 1;
                ll temp[10] = {0};
                ll temp1 = 0;
                for (int k = 0; k < 10; ++k)
                {
                    temp[k] = (((j & (1 << k)) > 0) - state[i][k]);
                    if (temp[k] < 0)
                    {
                        flag = 0;
                        break;
                    }
                    ll temp2 = temp[k];
                    temp1 = temp1 | (temp2 << k);
                }
                if (flag)
                {
                    if (dp[i - 1][temp1].first == -1ll)
                        continue;
                    pair<ll, ll> new_state = make_pair(dp[i - 1][temp1].first + ar[i], dp[i - 1][temp1].second + 1);
                    dp[i][j] = max(dp[i][j], new_state);
                }
            }
        }
        pair<ll, ll> ans = make_pair(0, 0);
        for (int i = 0; i < (1 << 10); ++i)
        {
            ans = max(ans, dp[n][i]);
        }
        cout << ans.second << "\n";
    }
    return 0;
}
