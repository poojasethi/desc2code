#include<bits/stdc++.h>
using namespace std;
pair<long long ,int> DP[101][1100];
long long A[101];
int calc(long long N)
{
	int B[10];
	memset(B,0,sizeof B);
	while(N > 0)
	{
		B[N%10] = 1;
		N = N/10;
	}
	long long p = 0;
	for(int i = 0;i < 10;i++)
	{
		p+=(B[i]*(int)pow(2,i));
	}
	return p;
}
int main()
{
	int N;
//	cout << calc(7) << " " << calc(10) << " " << calc(17) << endl;
//	cout << (128^3) << endl;
	while(scanf("%d",&N)==1)
	{
		memset(DP,0,sizeof DP);
		for(int i = 0;i < N;i++)
			cin >> A[i];
		sort(A,A+N);
		int limit = pow(2,10);
		int k = calc(A[0]);
		DP[0][k].first = A[0];
		DP[0][k].second = 1;
		for(int i = 1;i < N;i++)
		{
			int k = calc(A[i]);
			for(int j = 0;j <= limit;j++)
			{
				//if(j^k <= limit){
				DP[i][j^k].first = DP[i-1][j^k].first;
				DP[i][j^k].second = DP[i-1][j^k].second;
				if((j & k) == 0)
				{
					
					DP[i][j^k].first = max(DP[i-1][j^k].first,DP[i-1][j].first+A[i]);
					if(DP[i-1][j^k].first == DP[i-1][j].first+A[i])
					{
						DP[i][j^k].second = max(DP[i-1][j^k].second,DP[i-1][j].second+1);
					}
					else if(DP[i-1][j^k].first > DP[i-1][j].first+A[i])
					{
						DP[i][j^k].second = DP[i-1][j^k].second;	
					}
					else 
					{
						DP[i][j^k].second = DP[i-1][j].second+1;
					}
				}
			//}
			}
		}
	//cout << DP[1][131].second << DP[1][131].first << endl;
	long long ma = 0;
	int p = 0;
	for(int i = limit;i >= 0;i--){
		if(DP[N-1][i].first>ma)
		{
		//	cout << DP[N-1][i].first << " " << DP[N-1][i].second << endl;
		//	cout << DP[N-1][i].second << endl;
			ma = DP[N-1][i].first;
			p = DP[N-1][i].second;
			//break;
		}
		else if(DP[N-1][i].first == ma && DP[N-1][i].second > p)
			p = DP[N-1][i].second;
	}
	cout << p << endl;
	}
	return 0;
}
//cout << DP[N-1][i].first << " " << DP[N-1][i].second << endl;