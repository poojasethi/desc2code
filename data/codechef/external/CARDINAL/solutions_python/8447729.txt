#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
using namespace std;
typedef long long int LL;
typedef vector<LL> VL;
typedef vector<int> VI; 
typedef vector<VL> VVL; 
typedef pair<LL,LL> PLL; 
typedef pair<int ,int> II;
typedef vector<II> VII;
void FastIO(){
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}
int N , arr[104] , dpr[1028] , cardinality[1028];
int getmask(int u){
	int mask = 0 , t;
	while(u!=0){
	 	t = (u%10);
	 	u = (u/10);
	 	mask = mask | (1<<t);
	}
	return mask;
}
bool check_valid(int mask , int u){
	int t;
	while(u!=0){
		t = (u%10);
		u = (u/10);
		if(mask & (1<<t))
			return false;
	}
	return true;
}
int main(){
FastIO();
int k;
while(scanf("%d",&N)!=EOF){
for(int i=1;i<=N;i++)
	scanf("%d",&arr[i]);
for(int i=0;i<1024;i++){
	dpr[i] = 0;
	cardinality[i] = 0;
}
for(int i=0;i<1024;i++){
for(int j=1;j<=N;j++){
		if(check_valid(i , arr[j])){
			if(dpr[i] + arr[j] > dpr[i|getmask(arr[j])]){
				dpr[i|getmask(arr[j])] = dpr[i] + arr[j];
				cardinality[i|getmask(arr[j])] = cardinality[i] + 1;
			}
			else if(dpr[i] + arr[j] == dpr[i|getmask(arr[j])] ){
				cardinality[i|getmask(arr[j])] = max( cardinality[i|getmask(arr[j])] , cardinality[i] + 1);
			}
		}		
		}
}
int ans = -1 , t;
for(int i=0;i<1024;i++){
	if(dpr[i] > ans){
		ans = dpr[i];
		t = cardinality[i];
	}
	else if(ans == dpr[i])
		t = max(t , cardinality[i]);
}
cout << t << endl;
}
return 0;
}