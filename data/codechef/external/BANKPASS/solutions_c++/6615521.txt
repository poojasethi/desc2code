# include <iostream>
# include <string>
# include <algorithm>

using namespace std;

class trie_node
{
public:
	trie_node * children[26];

	trie_node()
	{}

	bool insert_string( string s)
	{
		trie_node ** temp = children;

		bool flag = false;
		int i;
		for(i = 0; i < s.size(); i++)
		{
			if (temp[s[i] - 'a'] != NULL)
			{
				temp = temp[s[i] - 'a']->children;

				if (i == s.size()-1)
					return false;
			}
			else
			{
				temp[s[i] - 'a'] = new trie_node();
				temp = temp[s[i] - 'a']->children;
			}
		}
		return true;
	}
};

int main()
{
	int n, i = 0;
	bool flag = true;
	cin >> n;
	string * ss = new string[n];
	trie_node * root = new trie_node(); 
	while(i < n)
	{
		cin >> ss[i];
		i++;
	}
	sort(ss, ss+n);
	reverse(ss, ss+n);

	i = 0;

	while(i < n)
	{
		flag &= root->insert_string(ss[i]);
		i++;
	}

	if (not flag)
		cout << "vulnerable" << endl;
	else
		cout << "non vulnerable" << endl;

	return 0;
}