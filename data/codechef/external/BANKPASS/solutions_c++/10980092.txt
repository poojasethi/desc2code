#include<bits/stdc++.h>
#define len(a) strlen(a)
#define ll long long
#define nl printf("\n")
#define mod 1000000007
//#define ip(a) scanf("%I64d",&a)
#define f first
#define s second
#define db printf("debug")
#define yes printf("YES\n")
#define no printf("NO\n")
#define pb(a) push_back(a)
#define po(a) pop_back()
#define mp(a,b) make_pair(a,b)
#define set(a,v) memset(a,v,sizeof(a))

#define sz(v) v.size()
#define pcase(i) printf("Case #%d:\n",i)
#define gc getchar//_unlocked

using namespace std;


// program to insert n string int trie and search q string if present in trie or not
struct trie_node
{
    trie_node* child[27];
    bool leaf;
};

struct trie_node* new_node()
{
    struct trie_node *tmp= NULL;
    tmp = (struct trie_node*) malloc(sizeof(trie_node));
    if(tmp!=NULL)
    {
        tmp->leaf = false;
        for(int i=1;i<=26;i++)
            tmp->child[i] = NULL;
    }
    else
        printf("Memory error\n");

    return tmp;

}

void insert(struct trie_node *root, string s)
{
    struct trie_node *next = root;
    int l= s.size(),i;
    for(i=0;i<l;i++)
    {
        int id = s[i]-96;
        if(next->child[id]==NULL)
        {
            next->child[id] = new_node();
        }
        next = next->child[id];
    }
    next->leaf = true;
}

bool search(struct trie_node *root, string s)
{
    int i,l;
    struct trie_node *next = root;
    l = s.size();
    for(i=0;i<l;i++)
    {
        int id= s[i]-96;
        next =  next->child[id];
    }
    for(i=1;i<=26;i++)
    {
        if(next->child[i]!= NULL)
            return true;
    }
    return false;
}
int main()
{
    int n,i,q,b=0;
    string s;
    cin>>n;
    vector<string>v;
    struct trie_node *root= new_node();
    for(i=0;i<n;i++)
    {
        cin>>s;
        insert(root,s);
        v.pb(s);
        //cout<<"added\n";
    }
   /* printf("sorted\n");
    sort(v.begin(), v.end());
    for(i=0;i<v.size();i++)
        cout<<v[i]<<"\n";

    cout<<"\nfor each\n";
    */
    for(i=0;i<v.size();i++)
    {
        //cout<<v[i]<<"\n";
        if(search(root,v[i]))
            {
                b=1;
                break;
            }
    }
    if(b)
        printf("vulnerable\n");
    else
       printf("non vulnerable\n");

}
