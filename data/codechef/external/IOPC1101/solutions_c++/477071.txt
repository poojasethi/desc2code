#include <iostream>
#include <iosfwd>
#include <iomanip>

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cassert>
#include <cctype>

#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <deque>
#include <string>
#include <list>
#include <iterator>
#include <sstream>
#include <complex>

#include <fstream>
#include <functional>
#include <numeric>
#include <utility>
#include <algorithm>

using namespace std;

#define BUG(x) if (DEBUG) cout << __LINE__ << ": " << #x << " = " << x << endl
#define LET(x, a) __typeof(a) x = a
#define FOR(i, a, b) for (LET(i, (a)); i < (b); ++i)
#define RFOR(i, a, b) for (LET(i, (a)); i >= (b); --i)
#define REP(i, N) FOR (i, 0, N)
#define RREP(i, N) RFOR (i, N, 0)
#define ALL(x) (x).begin(), (x).end()
#define RALL(x) (x).rbegin(), (x).rend()
#define CLEAR(x) memset( (x), 0, sizeof((x)))
#define FILL(x, v) memset((x), (v), sizeof((x)))
#define SORT(x) sort((x).begin(), (x).end())
#define UNIQUE(x) SORT(x), (x).resize(unique((x).begin(), (x).end()) - (x).begin())
#define REVERSE(x) reverse((x).begin(), (x).end())
#define FOREACH(it, v) for(LET(it, (v).begin()); it != (v).end(); ++it)
#define PRESENT(x, v) (find(ALL((x)), (v)) != (x).end())
#define CPRESENT(x, v) ((x).find((v)) != (x).end())
#define PB(x) push_back((x))
#define SIZE(x) ((int) (x).size())
#define MP(x, y) make_pair((x), (y))

typedef vector <int> VI; typedef vector <string> VS; typedef vector <double> VD;
typedef vector <VI> VVI; typedef vector <VS> VVS; typedef stringstream SS;
typedef pair <int, int> PII; typedef long long LL; typedef unsigned long long ULL;
typedef vector <PII> VPII; typedef vector <LL> VLL; typedef vector <bool> VB;
typedef vector <VLL> VVLL; typedef vector <VD> VVD; typedef vector <VB> VVB;

template <class T> inline int size(const T& c) { return (int) c.size(); }
VI tokenInt(string& s) {stringstream sin(s); VI v; int x; while (sin >> x) v.PB(x); return v;}
VS tokenStr(string& s) {stringstream sin(s); VS v; string x; while (sin >> x) v.PB(x); return v;}
int rInt() {int nT = -1; scanf("%d", &nT); return nT;}
string rStr() {char nStr[1 << 10] = ""; scanf("%s", nStr); return nStr;}
LL rLL() {LL nT = -1; scanf("%lld", &nT); return nT;}
char rChar() {char c = -1; scanf("%c", &c); return c;}
VI stov(string& s) {VI v; REP(i, size(s)) v.PB(s[i] - '0'); REVERSE(v); return v;}
LL stol(string& s) {LL r = 0; REP(i, size(s)) r = r * 10LL + (s[i] - '0'); return r;}
int stoi(string& s) {int r = 0; REP(i, size(s)) r = r * 10 + (s[i] - '0'); return r;}
string ltos(LL x) {string s; do {s.PB(x % 10 + '0'); x /= 10;} while (x); REVERSE(s); return s;}
VI ltov(LL x) {VI v; do {v.PB(x % 10); x /= 10;} while (x); return v;}
string itos(int x) {string s; do {s.PB(x % 10 + '0');x /= 10;} while (x); REVERSE(s); return s;}
VI itov(int x) {VI v; do {v.PB(x % 10);x /= 10;} while (x); return v;}
string vtos(VI& v) {string s; int l = size(v); REP(i, l) s.PB(v[l-i-1] + '0'); return s;}
LL vtol(VI& v) {LL r = 0; int l = size(v); REP(i, l) r = r * 10LL + v[l-i-1]; return r;}
int vtoi(VI& v) {int r = 0, l = size(v); REP(i, l) r = r * 10 + v[l-i-1]; return r;}
inline LL two(int x) {return (1LL << (x));}
template <class T> ostream& operator <<(ostream &O, vector <T> &v) {O << '{';
int x = size(v)-1; REP(i,x) O << v[i] << ", "; if (x >= 0) O << v[x]; return O << '}';}
VS split(string s,string del) {s += del[0]; string temp; VS ret; REP(i,size(s))
if(del.find(s[i]) == string::npos) temp.PB(s[i]); else{ret.PB(temp);temp = "";} return ret;}

const bool DEBUG = true;
const double EPS = 1e-8;
const int INF  = 1000000000;
const LL INFLL = 1000000000000000000LL;

pair <int, int> solve(vector <int>& v, int& i, int k) {
	int minElement = v[i], maxElement = v[i];
	int start = (v[i] - k + 1), end = v[i];
	while (i < size(v)) {
		++i;
		if (i == size(v)) break;
		minElement = min(minElement, v[i]);
		maxElement = max(maxElement, v[i]);
		if ((maxElement - minElement + 1) <= k) {
			start = max(start, (v[i] - k + 1));
			end = min(end, v[i]);
		}
		else break;
	}
	return make_pair(start, end);
}

int main()
{
	const bool contest = false;
	if (contest == true) {
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
	}
	int nTest = rInt();
	for (int test = 1; test <= nTest; ++test) {
		int n = rInt(), k = rInt(), m = rInt();
		LL totalScroll = 0;
		int minScrolls = 0;
		vector <int> v(m);
		for (int i = 0; i < m; ++i)
			v[i] = rInt();
		int start = 1, end = 1 + (k - 1);
		for (int i = 0; i < size(v);) {
			if (v[i] <= end && v[i] >= start) {
				++i; continue;
			}
			else {
				minScrolls++;
				pair <int, int> p = solve(v, i, k);
				int nstart = p.first, nend = p.second;
				if (abs(start - nstart) <= abs(start - nend)) {
					totalScroll += abs(start - nstart);
					start = nstart;
					end = start + (k - 1);
				}
				else {
					totalScroll += abs(start - nend);
					start = nend;
					end = start + (k - 1);
				}
			}
		}
		printf("%d %lld\n", minScrolls, totalScroll);
	}
	return 0;
}

// Powered by PhoenixAI
