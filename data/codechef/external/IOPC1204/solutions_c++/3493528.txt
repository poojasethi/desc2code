#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<utility>
 
using namespace std;
 
typedef long long int ULL;
 
vector<ULL> prime;
int iterations = 10;
int isp[605];
 
int isPrime(int n)
{
        if (n < 2)
                return false;
        for (int i = 2; i * i <= n; i++)
                if (n % i == 0)
                        return false;
        return true;
}
 
void compute()
{
        for (int i = 2; i <= 600; i++)
        {
                if (isPrime(i))
                        prime.push_back(i);
        }
}
 
const ULL mask = (1<<20)-1;
 
ULL mulMod(ULL a , ULL b , ULL c)
{
        ULL z= (a*(b&mask))%c  +  (((a<<20)%c)*(b>>20))%c;
        while (z >= c)
                z -= c;
        return z; 
}
 
ULL modulo(ULL a, ULL b , ULL c)
{
        ULL res = 1;
        while (b > 0)
        {
                if (b & 1)
                      res   = mulMod(res , a, c);
                a = mulMod(a , a, c);
                b >>= 1;
        }
        return res;
}
 
int witness[] = {2 , 3, 5, 7 , 11};
 
int millerRabinTest(ULL N)
{
        if (N < 2) 
                return false;
        if (N % 2 == 0) return N == 2 ;
        if (N % 3 == 0) return N == 3;
        if (N % 5 == 0) return N == 5;
        if (N % 7 == 0) return N == 7;
        if (N % 11 == 0) return N == 11;
        //if (N % 13 == 0) return N == 13;
        
        ULL  s = N - 1;
        while ((s & 1) == 0)
        {
                s /= 2;
        }
        
        for (int i = 0; i  < iterations ; i++)
        {
                ULL a = rand() % (N - 1) + 1 , temp = s;
                ULL mod = modulo(a , temp , N);
                while (temp != N - 1 && mod != 1 && mod != N - 1)
                {
                        mod = mulMod(mod , mod , N);
                        temp *= 2;
                }
                if (mod != N - 1 && (temp & 1) ==  0)
                        return false;
        }
        return true;
}
 
ULL solve(ULL N)
{
        N += 2;
        if (N == 2)
                return 1;
        for (int i = 0; i <= 600; i++)
                isp[i] = true;
         /*       
        for (int i = 0; i < prime.size(); i++)
        {       
                ULL p = prime[i];
                if (p > N)      
                        break;
                ULL t = p;
                t = ((N  + p - 1) / p) * p;
                while (t < N + 600)
                {
                        //cout<<t<<" ";
                        if (p < t)
                                isp[t - N]  = false;
                        t += p;
                }
        }
        /*
        for (int i = 0; i < 600; i++)
                if (isp[i])
                        cout<<i<<endl;
        
        //return true;
        //cout<<millerRabinTest(34)<<endl;
        */
        for (ULL i = N ; ; i++)
        {
                if (millerRabinTest(i))
                {
                        //cout<<i<<endl;
                        //cout<<"here"<<endl;
                        return i;
                }
        }
}
 
int main()
{
        compute();
        int T;
        scanf("%d" , &T);
        
        while (T--)
        {
                ULL x ;
                scanf("%llu" , &x);
                printf("%llu\n" , solve(x));
        }
        
        return 0;
} 