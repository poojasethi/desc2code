#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

int test[5] = {2,3,5,7,11};
int T;

long long MOD(long long a,long long b,long long c) {
  long long m1 = a >> 20;
  m1 = (m1 * b) % c;
  m1 <<= 20;
  long long m2 = a & ((1 << 20) - 1);
  m2 = (m2 * b) % c;
  return (m1 + m2) % c;
}

long long power(long long a,long long n,long long mod) {
  long long p = 1;
  while (n) {
    if (n % 2) p = MOD(p,a,mod);
    if (n /= 2) a = MOD(a,a,mod);
  }
  return p;
}

bool witness(long long a,long long n) {
  long long m,x,y;
  for (m = n - 1; m % 2 == 0; m /= 2);
  x = power(a,m,n);
  for (; m < n - 1; m *= 2) {
    y = MOD(x,x,n);
    if (y == 1 && 1 < x && x < n - 1) return false;
    x = y;
  }
  return x == 1;
}

bool prime(long long n) {
  for (int i = 0; i < 5; i++) if (n % test[i] == 0) return n == test[i];
  for (int i = 0; i < 5; i++) if (!witness(test[i],n)) return false;
  return true;
}

int main() {
  scanf("%d", &T);
  while (T--) {
    long long x;
    scanf("%lld", &x);
    if (x == 0) printf("1\n"); else {
    x += 2;
    if (x > 2 && x % 2 == 0) x++;
    if (x > 3 && x % 3 == 0) x += 2;
    while (!prime(x)) x += (x % 3 == 1) ? 4 : 2;
    printf("%lld\n", x);
    }
  }
}
