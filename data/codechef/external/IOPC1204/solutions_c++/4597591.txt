/**
 * The question requires us to find smallest N such that for any given X(a large no <= 10^12)
 * f(N) > X, where f(N) = Summation of (d * Mobius function(d)) over all divisors (d) of N.
 * Now it's pretty simple because all we need to do is find the next prime number greater than 
 * given X (but since we need strictly greater value, we add 2 to X) and that's easy with Rabin-Miller
 * primality test.
 * Author : thecodekaiser
 */
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
 
using namespace std;
typedef long long int LL;
#define MOD 1000000007
#define INF 2000000009
 
// Function : To calculate (a*b) % c
const LL MASK = (1<<20)-1;
 
/*
LL modmul(LL a , LL b , LL c)
{
        LL z= (a * (b & MASK)) % c  +  (((a << 20) % c) * (b >> 20)) % c;
        while (z >= c)
                z -= c;
        return z; 
}
*/


LL modmul(LL a, LL b , LL c)
{
	LL q = (LL)(((long double)a * (long double)b) / (long double) c);
	LL r = a*b - q*c;
	r %= c;
	if(r < 0)
		r += c;
	return r;
}


// Function : To calculate (a^b) % c
LL modpow(LL a, LL b, LL c)
{
	LL res = 1;
	while(b > 0)
	{
		if(b & 1)
			res = modmul(res, a, c);
		a = modmul(a, a, c);
		b >>= 1;
	}
	return res;
}
 
// Function : To check if a number is prime or not using the Rabin-Miller Primality Test
int isPrime(LL N, int iter)
{
	if(N < 2)				// for 0 or 1
		return 0;
	if(N == 2)				// for 2
		return 1;
	if(!(N & 1))			// for even numbers
		return 0;
		
		
    LL  s = N - 1;
    while ((s & 1) == 0)
    {
            s /= 2;
    }
    
    for (int i = 0; i  < iter ; i++)
    {
            LL a = rand() % (N - 1) + 1 , temp = s;
            LL mod = modpow(a , temp , N);
            while (temp != N - 1 && mod != 1 && mod != N - 1)
            {
                    mod = modmul(mod , mod , N);
                    temp *= 2;
            }
            if (mod != N - 1 && (temp & 1) ==  0)
                    return false;
    }
    return true;
}
 
 
void solve()
{
	LL N, i;
	scanf("%lld", &N);
	
	N += 2;
//	cout << N << endl;
	if(N == 2)
	{
		printf("1\n");
		return;
	}
	else
	{
		for (i = N ; ; i++)
        {
                if (isPrime(i,5))
                {
            		printf("%lld\n",i);
            		return;
                }
        }
	}
}
 
 
int main() {
	// your code goes here
	int t;
	scanf("%d",&t);
//	cout << "First T: " << t << endl;
	while(t--)
	{
		solve();
//		cout << "T: " << t << endl;
	}
	return 0;
} 