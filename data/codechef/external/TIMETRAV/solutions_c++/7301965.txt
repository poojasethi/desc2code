#include <bits/stdc++.h>

using namespace std;
int n;
int prev[100001],dist[100001],child[100001],visited[100001],height[100001];
vector<int> lvl[100001],a[100001],v;
void bfs(int i)
{
	int node;
	queue <int> q;
	q.push(i);
    dist[i]=1;
    prev[i]=i;
	while(!q.empty())
	{
		int j=q.front();
		q.pop();
		if (j!=1)
            dist[j]=dist[prev[j]]+1;

		visited[j]=1;
		for(int i=0;i<a[j].size();i++)
			if(visited[a[j][i]]==0)
			{
				q.push(a[j][i]);
				prev[a[j][i]]=j;
			}
	}
}

int bfs1(int i)
{
    visited[i]=1;
    for(int j=0;j<a[i].size();j++)
    {
        if(visited[a[i][j]]==0)
        {
            child[i]+=bfs1(a[i][j]);
        }


	}
	child[i]++;
	return child[i];

}

int bfs2(int i)
{
    visited[i]=1;
    int h=0;
    for(int j=0;j<a[i].size();j++)
    {
        if(visited[a[i][j]]==0)
        {
            h=max(h,bfs2(a[i][j]));
        }
        height[i]=h;
	}
	height[i]++;
	//cout<<i<<" "<<height[i]<<endl;
	return height[i];

}
int dp[100001];
int solve(int i)
{
    int ans =pow(10,9);
    if(i>=v[v.size()-1])
        return 0;
    int h= upper_bound(v.begin(),v.end(),i)-v.begin();
	if(dp[v[h]]!=-1)
		return dp[v[h]];
    for(int j=0;j<lvl[v[h]].size();j++)
        ans=min(ans,child[lvl[v[h]][j]]+solve(v[h]+height[lvl[v[h]][j]]-1));
    
    dp[v[h]]=ans;
    return ans;
}


int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;

        scanf("%d",&n);
        
		for(int i=1;i<=n;i++)
        {
            dp[i]=-1;
            height[i]=0;
            visited[i]=0;
            child[i]=0;
            prev[i]=0;
            dist[i]=0;
            a[i].clear();
            lvl[i].clear();
            
        }
        v.clear();
        int a1,b1;
        for(int i=0;i<n-1;i++)
        {
            scanf("%d %d",&a1,&b1);
            a[a1].push_back(b1);
            a[b1].push_back(a1);
        }

        

        int h;
        scanf("%d",&h);
        int k;
        for(int i=0;i<h;i++)
        {
            scanf("%d",&k);
            v.push_back(k);
        }
        bfs(1);
        for(int i=1;i<=n;i++)
        {
            visited[i]=0;
        }
        bfs1(1);
        for(int i=1;i<=n;i++)
        {
            visited[i]=0;
        }
        bfs2(1);
        sort(v.begin(),v.end());

        for(int i=1;i<=n;i++)
        {
            lvl[dist[i]].push_back(i);
        }
     

        printf("%d\n",solve(0));



    }

    return 0;
}