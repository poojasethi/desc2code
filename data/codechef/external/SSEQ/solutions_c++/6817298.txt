#include<bits/stdc++.h>
using namespace std;
 
#define ll long long int
#define mp make_pair
#define pb push_back
#define s(n) scanf("%d",&n);
#define sl(n) scanf("%lld",&n);
#define p(n) printf("%d\n",n)
#define pl(n) printf("%lld\n",n)
 int a[111111];
 class node{
 
	public:
	
 	bool ap;
 	int d;
 	int l;
 	int r;
 	int size;
 		node(){}
 		node(int x){
 			ap=1;
 			d=0;
 			l=r=x;
 			size=1;
 		}
 };
 
 class tree{
 	node tt[4*100000+15];
 	public:
 		tree(){};
 		void build(int s,int e,int idx );
 		node init(int x);
 		node combine(node x,node y);
 		void update(int s,int e,int idx, int id,int x);
 		node query(int s,int e,int idx,int i,int j);
 };
 
 node tree:: init(int x){
 	node t(x);
 	return t;
 }
 node tree:: combine(node x,node y){
 	node t;
 	if(x.size==1&&y.size==1){
 		t.ap=1;
 		t.d=y.l-x.r;
 	}
 	else if(x.size==1&&y.size!=1){
 		t.ap=(y.l==x.r+y.d);
 		t.d=t.ap?y.d:0;
 	}
 	else if(x.size!=1&&y.size==1){
 		t.ap=(y.l==x.r+x.d);
 		t.d=t.ap?x.d:0;
 	}
 	else{
 		t.ap=x.ap&&y.ap&&(y.l==x.r+x.d&&x.d==y.d);
 		t.d=t.ap?x.d:0;
 	}
 	t.l=x.l;
 	t.r=y.r;
 	t.size=x.size+y.size;
 	return t;
 }
void tree:: build(int s,int e,int idx){
	if(s==e){
		tt[idx]=init(a[s]);
		return ;
	}
	int m=(s+e)>>1;
	int l=(idx<<1)+1;
	int r=l+1;
	build(s,m,l);
	build(m+1,e,r);
	tt[idx]=combine(tt[l],tt[r]);
}
void  tree:: update(int s,int e,int idx,int id,int x)
{
    if(s>e||id>e||id<s)return;
    if(s==e&&s==id)
    {
        tt[idx]=init(x);
        return;
    }
    int m=(s+e)>>1;
	int  l=(idx<<1)+1;
	int r=l+1;
    update(s,m,l,id,x);
    update(m+1,e,r,id,x);
    tt[idx]=combine(tt[l],tt[r]);
}
node tree:: query(int s,int e,int idx,int i,int j){
	if(s>=i&&e<=j)
		return tt[idx];
	int m=(s+e)>>1;
	int l=(idx<<1)+1;
	int r=l+1;
	if(m<i)
		return query(m+1,e,r,i,j);
	if(m>=j)
		return query(s,m,l,i,j);
	return combine(query(s,m,l,i,j),query(m+1,e,r,i,j));
}
 
 
int main(){
	tree t;
	int n;
	cin>>n;
	int i,j;
	for(i=0;i<n;i++)
		cin>>a[i];
	t.build(0,n-1,0);
	int q;
	cin>>q;
	while(q--){
		int ty;
		int i,j;
		cin>>ty>>i>>j;
		if(ty){
			node tt=t.query(0,n-1,0,i-1,j-1);
			cout<<tt.ap<<endl;
		}
		else{
			i--;
			a[i]=j;
			t.update(0,n-1,0,i-1,j);
		}
	}
} 