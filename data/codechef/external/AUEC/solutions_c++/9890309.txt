#include <stdio.h>
#include <iostream>
#include <vector>
#include <stack>
using namespace std;


void dfs(vector< vector<int> > &vec,int src ,int N,int status[])
{
stack <int> s;

status[src] = 2;
s.push(src);

while(s.empty() == false)
{
    int u = s.top();
    s.pop();
    status[u] = 3;

    for (int i=1 ;i<=N;i++){
        if (vec[u][i]==1 and status[i]==1)
        {
            status[i] = 2;
            s.push(i);

        }
    }


}





}




int connected_components(vector< vector<int> > &vec,int N,int status[])


{
    int connected_component =0;

    for(int i=1;i<=N;i++){

        if (status[i] == 1){
            connected_component +=1;
            dfs(vec,i,N,status);
        }
    }
    return connected_component;
}

int main(){

int T,N,M,u,v;

cin >> T ;
for(int k=1;k<=T;k++){
cin >> N >> M;
vector< vector<int> > vec;
int status[N+1],F[N+1];


vec.resize(N+1);
for (int i=1;i<=N;i++){
    F[i]      = 0;
    status[i] = 1;
    vec[i].resize(N+1);
}

for (int i=1;i<=N;i++){
    for(int j=1;j<=N;j++){
        vec[i][j]=0;

    }
}


for (int i=1 ;i<=M;i++){
    cin >> u >> v;
    vec[u][v] = 1;
    vec[v][u] = 1;
    F[u] +=1;
    F[v]+=1;



}

int check =0;
for (int i=1;i<=N;i++){

    if (F[i]%2!=0){check=1;break;}

}

if (check == 1){printf("Case %d: No\n",k);}

else{

    int cp = connected_components(vec,N,status);
  

    if (cp > 1){printf("Case %d: No\n",k);}

    else{
        printf("Case %d: Yes\n",k);
    }


}




}
}
