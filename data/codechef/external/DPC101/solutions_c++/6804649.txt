#include <bits/stdc++.h>
using namespace std;
 
#define ll long long int
#define FL(i,a,b) for(ll i=a;i<b;i++)
#define FOR(i,n) for(ll i=0;i<n;i++)
#define SORTF(x) sort(x.begin(),x.end(),func);
#define SORT(x) sort(x.begin(),x.end())
#define pb(x) push_back(x)
#define SET(v, val) memset(v, val, sizeof(v)) ;
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define ALL(v) v.begin(),v.end()
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }
#define fill(x,n) memset(x,n,sizeof(x))
#define S(n) scanf("%lld",&n)
 
//ll dx[] = {-1,0,1,0}, dy[] = {0,1,0,-1};
//ll dx[] = {1,1,1,0,0,-1,-1,-1}, dy[] = {1,0,-1,1,-1,1,0,-1};
//ll gcd(ll a, ll b) {if (a == 0 || b == 0) return maX(a,b); if (b % a == 0) return a; return gcd(b%a, a);}
//ll small_primes[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349};
//ll toll(const string &s) { stringstream ss; ss << s; ll x; ss >> x; return x; }
//ll modPow(ll a,ll b) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//ll modInverse(ll a){return modPow(a,MOD-2);}
//ll nCk(ll n, ll k){if(k<0)return 0;ll numerator = 1;forall(il,0,k)numerator =(numerator*(n-il))%MOD;ll denominator = 1;forall(il,1,k+1)denominator=(denominator*il)%MOD;return (numerator*modInverse(denominator))%MOD;}
 
int main() {
	string a,b;
	while(1) {
		cin>>a>>b;
		if(a[0] == '0' && b[0] == '0') break;
		int l1 = a.length();
		int l2 = b.length();
		string car = "";
		car += '0';
		int carry = 0;
		while(l1 > 0 && l2 > 0) {
			int sum = ((a[l1 - 1] - '0') + (b[l2 - 1] - '0') + (car[0] - '0'));
			//cout<<sum<<"\n";
			if(sum > 9) carry++;
			car[0] = ((sum / 10) + '0');
			l1--;
			l2--;
		}
		while(l1 > 0) {
			int sum = ((a[l1 - 1] - '0') + (car[0] - '0'));
			car[0] = ((sum / 10) + '0');
			//cout<<sum<<"\n";
			if(sum > 9) carry++;
			l1--;
		}
		while(l2 > 0) {
			int sum  = ((b[l2 - 1] - '0') + (car[0] - '0'));
			car[0] = ((sum / 10) + '0');
			//cout<<sum<<"\n";
			if(sum > 9) carry++;
			l2--;
		}
		//if(car[0] > '0') carry++;
		if(carry == 0)  cout<<"No carry operation.\n";
		else if (carry == 1) cout<<carry<<" carry operation.\n";
		else
		cout<<carry<<" carry operations.\n";
	}
	return 0;
}