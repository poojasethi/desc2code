#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>

#define m first
#define c second
#define NMAX 50010

using namespace std;


int tree[NMAX];

int N;

void init(){
	int i;
	for(i = 0; i < N; ++i) tree[i] =0;
}

void upd(int x){
	for(;x < N; x+=(x&-x)){
		tree[x]++;
		if(!x) break;
	}
}

int query(int x){
	int vl = 0;
	for(;x >=0;x-=(x&-x)){
		vl += tree[x];
		if(!x) break;
	}

	return vl;
}


pair<double,double> lines[NMAX];
pair<int,int> l2[NMAX];
pair<double,int> order[NMAX];

long long K;

const double eps = 1e-9;

int comp(const pair<double,int> &a, const pair<double,int> &b){
	if(fabs(a.first-b.first) <= eps) return a.second < b.second;
	return a.first < b.first;
}

int check(double yy){
	int i;
	long long ct;
	init();

	for(i =0 ; i < N; ++i) order[i] = make_pair(lines[i].m*yy+lines[i].c,i);
	sort(order,order+N);

	ct =0;
	for(i =0 ; i< N; ++i){
		ct += query(order[i].second);
		upd(order[i].second);
	}


	return ct >= K;
}

int comp2(const pair<int,int> &a, const pair<int,int> &b){
	if(a.first == b.first) return a.second > b.second;
	return a.first > b.first;
}

int comp3(const pair<int,int> &a, const pair<int,int> &b){
	if(a.first == b.first) return a.second < b.second;
	return a.first > b.first;
}

//m,c ints
//points below it
//all ms are distinct m > 0


const double lim = (2e4);
const int iter = 100;

double search(){
	double low,high,mid;

	low = -lim*lim*3;
	high = lim*lim*3;

	int i;

	for(i = 0; i < iter; ++i){
		mid = low+(high-low)/2.0;
		if(check(mid)){
			high = mid;
		}else{
			low = mid;
		}
	}

	return low;
}

int main(){
	int m,c;

	scanf("%d%lld",&N,&K);
	int i;
	for(i =0; i < N; ++i){
		scanf("%d%d",&m,&c);
		l2[i] = make_pair(m,-c);
	}

	sort(l2,l2+N);
	for(i = 0; i < N; ++i) if(l2[i].first > 0) break;
	if(i) sort(l2,l2+i,comp3);
	if(i < N) sort(l2+i,l2+N,comp2);


	for(i = 0; i < N; ++i){
		m = l2[i].first;
		c = l2[i].second;
		lines[i] = make_pair(1.0/m,c*1.0/m);
		if(i) assert(lines[i].m-lines[i-1].m >= -1e-7);
	}

	printf("%.9lf\n",search());

	return 0;
}
