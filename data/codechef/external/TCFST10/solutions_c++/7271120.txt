#include<iostream>
#include<algorithm>
using namespace std;
const long long MOD = 1e9;
const int MAXN = 1e5 + 5;
struct edge{
    int v , u;
    long long c;
    edge(){}
    edge(int _v , int _u , long long _c)
    {
        v = _v;
        u = _u;
        c = _c;
    }
};

bool cmp(edge A , edge B)
{
    return A.c > B.c;
}
long long npairs = 0;
edge edges[MAXN];
int par[MAXN];
int sz[MAXN] , cnte = 0;
int getpar(int v)
{
    return (par[v] == v)?v:(par[v] = getpar(par[v]));
}
void merge(int e)
{
    int v = edges[e].v;
    int u = edges[e].u;
    v = getpar(v);
    u = getpar(u);

    if(u == v) return;

    npairs += (long long)sz[v] * sz[u];
    if(sz[v] > sz[u])
    {
        par[u] = v;
        sz[v] += sz[u];
    }
    else
    {
        par[v] = u;
        sz[u] += sz[v];
    }
}
int main()
{
    int k , l;
    cin >> k >> l;
    for(int i = 1;i <= k;i ++) par[i] = i , sz[i] = 1;
    for(int i = 0;i < l;i ++)
    {
        int a , b , c;
        cin >> a >> b >> c;
        edges[++cnte] = edge(a , b , c);
    }
    sort(edges + 1 , edges + cnte + 1 , cmp);
    long long ans = 0;
    for(int i = 1;i <= cnte;i ++)
    {
        merge(i);
        ans = (ans + (edges[i].c * npairs) % MOD) % MOD;
    }
    cout << ans << endl;
    return 0;
}
