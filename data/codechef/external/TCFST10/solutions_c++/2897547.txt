#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<ctime>
#include<cctype>
#include<cassert>
#include<climits>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<clocale>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<cwchar>
#include<cwctype>

//containers
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<complex>
#include<string>
#include<stack>
#include<bitset>
#include<istream>
#include<valarray>

//IOs
#include<iostream>
#include<sstream>
#include<iomanip>
#include<fstream>
#include<exception>
#include<ios>
#include<iosfwd>
#include<ostream>
#include<iterator>
#include<stdexcept>
#include<streambuf>


//algorithm & miscellaneous
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<limits>
#include<locale>
#include<memory>
#include<new>

#define ll long long
#define ull unsigned long long
#define ld long double
#define mp make_pair
#define pb push_back
#define inf (ll)1e18
#define iinf (int)1e9
#define triple(a,b,c) make_pair(a,make_pair(b,c))
#define two(a,b) make_pair(a,b)
#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define psi pair<string,int>
#define pis pair<int,string>
#define pss pair<string,string>
#define vi vector<int>
#define vl vector<long long>
#define vs vector<string>
#define vc vector<char>
#define vpii vector<pii>
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})


int dx[] = {-1,0,0,1,-1,-1,1,1};
int dy[] = {0,-1,1,0,-1,1,-1,1};
const double eps = 1e-9;

using namespace std;

const ll mod = (ll)1e9;

vector< pair<ll, pii> > e;
int parent[1000001],rank[1000001],sets[1000001],ns;
ll sum[1000001];

void init(int n)
{
              ns = n;

              for(int i=0;i<n;i++)
              {
                      parent[i] = i;
                      rank[i] = 0;
                      sets[i] = 1;
              }
              return ;
}

int find_set(int i)
{
                 if(parent[i]==i)
                                 return i;

                 return parent[i]=find_set(parent[i]);
}

void union_set(int x,int y)
{
                   int p1=find_set(x);
                   int p2=find_set(y);

                   if(p1==p2)return ;

                   if(rank[p1]==rank[p2])
                                        rank[p1]+=1;
                   else if(rank[p1]<rank[p2])
                        swap(p1,p2);

                   parent[p2]=p1;

                   sets[p1]+=sets[p2];

                   ns-=1;

}

int main()
{
          int n = GI, m = GI;

          e.clear();

          init(n);

          for(int i=0;i<m;i++)
          {
                  int u = GI, v = GI;
                  ll w = GL;
                  u--,v--;
                  e.pb(mp(w,mp(u,v)));
          }

          sort(e.begin(),e.end());

          ll ans = 0;

          if(m > 0)
          sum[0] = e[0].fi;

          for(int i=1;i<m;i++)
                  sum[i] = sum[i-1] + e[i].fi;

          for(int i=m-1;i>=0;i--)
          {
                  int x = find_set(e[i].se.fi), y = find_set(e[i].se.se);
                  if(x != y)
                  {
                       ll tmp = (ll)(sets[x]%mod);
                       tmp = (tmp%mod)*(ll)(sets[y]%mod);
                       tmp = (tmp%mod)*(sum[i]%mod);
                       ans = (ans%mod  + tmp%mod)%mod;
                       union_set(x,y);
                  }
                  //cout<<ans<<" ";
          }

          printf("%lld\n",ans);

          scanf("\n");
          return 0;
}


