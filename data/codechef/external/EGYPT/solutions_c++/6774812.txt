/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

int in[26], out[26];
int graph[26][26];
int visited[26];

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}

bool check()
{
	int flag = 0, flag1 = 0;
	rep(i, 26) {
		switch(in[i] - out[i]) {
			case 0 :
				break;
			case 1 :
				if(flag) return false;
				flag = 1; break;
			case -1 :
				if(flag1) return false;;
				flag1 = 1; break;
			default :
				return false;
		}
	}
	return true;	
}

void dfs(int v)
{
	visited[v] = 1;
	rep(i, 26) {
		if(!visited[i] && graph[v][i]) {
			dfs(i);
		}
	}
}
bool fun()
{
	if(!check()) return false;
	int i;
	//finding vectex
	for(i = 0; i < 26; i++) {
		if(in[i] != 0 || out[i] != 0) {
			break;
		}
	}
	//check whether from this vertex all vertices are visited are not
	dfs(i);
	int totalvertices = 0, visitedvertices = 0;
	rep(i, 26) if(visited[i]) visitedvertices++;
	rep(i, 26) if(in[i] != 0 || out[i] != 0) totalvertices++;
	return (totalvertices == visitedvertices);
}

void solve()
{
	//clearing step
	memset(in, 0, sizeof(in));
	memset(out, 0, sizeof(out));
	memset(graph, 0, sizeof(graph));
	memset(visited, 0, sizeof(visited));
	int n;
	s(n);
	char str[10005];
	rep(i, n) {
		scanf("%s", str);
		int l = strlen(str);
		out[str[0] - 'a']++;
		in[str[l - 1] - 'a']++;
		graph[str[0] - 'a'][str[l - 1] - 'a']++;
		graph[str[l - 1] - 'a'][str[0] - 'a']++;	
	}
	bool ans = fun();
	if(ans) {
		puts("The journey continues.");
	}
	else {
		puts("Journey ends here.");
	}
}

int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
