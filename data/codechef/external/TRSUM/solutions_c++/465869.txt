#include <algorithm>
#include <bitset>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <stack>
#include <queue>
#include <utility>
#include <vector>
#define mod 1000000007
using namespace std;

long long up[20010][22],down[20010][22];
int n,k,T;
vector<int> adj[20010];
int pre[20010];
long long c[22][22],sum[22];

void calc_down(int u)
{
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (pre[u] == v) continue;
        pre[v] = u;  calc_down(v);
    }
    
    for (int i = 0; i <= k; i++) down[u][i] = 1;
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (pre[u] == v) continue;
        for (int j = 0; j <= k; j++)
          for (int t = 0; t <= j; t++) down[u][j] = (down[u][j] + c[j][t] * down[v][t]) % mod;
    }
}

void calc_up(int u)
{
//    cout << "iter to: " << u << endl;    
    for (int i = 0; i <= k; i++) sum[i] = 1;
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (pre[u] == v) continue;
        for (int j = 0; j <= k; j++)
          for (int t = 0; t <= j; t++) sum[j] = (sum[j] + c[j][t] * down[v][t]) % mod;
    }
/*    cout << "without root" << endl;
    for (int j = 0; j <= k; j++) cout << sum[j] << ' ';
    cout << endl;*/
        
    for (int j = 0; j <= k; j++) sum[j] = (sum[j] + up[u][j]) % mod;
      
/*    cout << "with root" << endl;
    for (int j = 0; j <= k; j++) cout << sum[j] << ' ';
    cout << endl;*/
      
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (pre[u] == v) continue;
        for (int j = 0; j <= k; j++)
          for (int t = 0; t <= j; t++) sum[j] = (sum[j] - c[j][t] * down[v][t]) % mod;
/*        cout << "processed: " << v << endl;
        for (int j = 0; j <= k; j++) cout << sum[j] << ' ';
        cout << endl;*/
        for (int j = 0; j <= k; j++)
          for (int t = 0; t <= j; t++) up[v][j] = (up[v][j] + c[j][t] * sum[t]) % mod;
        for (int j = 0; j <= k; j++)
          for (int t = 0; t <= j; t++) sum[j] = (sum[j] + c[j][t] * down[v][t]) % mod;          
    }
//    cout << endl;
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (pre[u] == v) continue;
        calc_up(v);
    }
}

int main()
{
//    freopen("treesum.in","r",stdin);
//    freopen("treesum.ou","w",stdout);
    scanf("%d", &T);
    memset(c,0,sizeof(c));
    c[0][0] = 1;
    for (int i = 1; i <= 20; i++)
      for (int j = 0; j <= i; j++)
      {
            c[i][j] = c[i - 1][j];
            if (j) c[i][j] = (c[i][j] + c[i - 1][j - 1]) % mod;            
        }        
        
    while (T--)
    {
        scanf("%d %d", &n, &k);
        for (int i = 0; i < n; i++) adj[i].clear();
        for (int i = 0; i < n - 1; i++)
        {
            int u,v;  scanf("%d %d", &u, &v);
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        for (int i = 0; i < n; i++) pre[i] = -1;
        calc_down(0);
        for (int i = 0; i < n; i++)
          for (int j = 0; j <= k; j++) up[i][j] = 0;
        calc_up(0);
        for (int i = 0; i < n; i++)
        {
            long long ans = (up[i][k] + down[i][k]) % mod;
            printf("%lld\n", (ans + mod) % mod);
        }
        printf("\n");
    }                          
}
