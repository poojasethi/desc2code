#include <cstdio>
#include <cstring>

#define mod 1000000007
#define len1 20001
#define len2 21
#define back(i) (1^(i))
#define mem(x) memset( x , 0 , sizeof x )

typedef long long LL ;

LL g[len1][len2] , a[len1] , c[len2][len2] ;
LL ans[len1][len2] , tmp1[len2] , tmp2[len2] , _[len2] ;

int N , K ;
int intre[len1<<1] , sm ;

struct edg
{
    int tot ;
    int now[len1] , next[len1<<1] , g[len1<<1];
    
    void set()
    {
        tot = 1 ;
        memset( now , 0 , sizeof now );
    }
    void add( int st , int ed )
    {
        ++tot ;
        g[tot] = ed ;
        next[tot] = now[st];
        now[st] = tot ;
    }
}e;


void merge( LL a[len2] , LL b[len2] )
{
    int i , j ;
    
    for ( i = 0 ; i <= K ; ++i )
    {
        _[i] = a[i];
        for ( j = 0 ; j <= K ; ++j )
        {
            _[i] += c[i][j] * b[j] ;
            _[i] %= mod ;
        }
    }
    for ( i = 0 ; i <= K ; ++i )
        a[i] = _[i];
}

void calc_down( int x , int las )
{
    int i , j ;
    
    for ( i = e.now[x] ; i ; i = e.next[i] )
    if ( i != back(las) )
    {
        intre[i] = 1 ;
        
        j = e.g[i] ;
        calc_down( j , i );
        
        merge( g[x] , g[j] );
    }
    for ( j = 0 ; j <= K ; ++j )
    {
        g[x][j] += a[x] ;
        if ( g[x][j] >= mod )
            g[x][j] = 0 ;
    }
}
void calc_up( int x )
{
    int i , j , l ;
    
    for ( i = e.now[x] ; i ; i = e.next[i] )
    if ( intre[i] )
    {
        j = e.g[i];
        
        mem( tmp1 );
        merge( tmp1 , g[j] );
        for ( l = 0 ; l <= K ; ++l )
        {
            tmp1[l] = ans[x][l] - tmp1[l];
            if ( tmp1[l] < 0 )
                tmp1[l] += mod ;
        }
        mem( tmp2 );
        merge( tmp2 , tmp1 );
        
        for ( l = 0 ; l <= K ; ++l )
            ans[j][l] = ( tmp2[l] + g[j][l] ) % mod ;
        calc_up( j );
    }
}



int main()
{
    int i , j , test ;
    int sc , sv ;
    
    c[0][0] = 1 ;
    for ( i = 1 ; i <= 20 ; ++i )
    {
        c[i][0] = 1 ;
        for ( j = 1 ; j <= i ; ++j )
            c[i][j] = ( c[i-1][j] + c[i-1][j-1] ) % mod ;
    }
    for ( scanf("%d",&test); test ; --test )
    {
        scanf("%d%d",&N,&K);
        e.set();
        for ( i = 1 ; i < N ; ++i )
        {
            scanf("%d%d",&sc,&sv);
            ++sc , ++sv ;
            
            e.add( sc , sv );
            e.add( sv , sc );
        }
        for ( i = 1 ; i <= N ; ++i )
            a[i] = 1 ;
        
        mem( intre );
        mem( g );
        mem( ans );
        
        calc_down( 1 , 0 );
        
        for ( j = 0 ; j <= K ; ++j )
            ans[1][j] = g[1][j];
        calc_up( 1 );
        
        for ( i = 1 ; i <= N ; ++i )
            printf("%d\n",ans[i][K]);
        printf("\n");
    }
    
    return 0;
}
/*
Input
2
3 2
0 1
1 2

3 3
0 1
0 2


Output
14
9
14

17
36
36
*/
