#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<vector>
#include<cstdlib>
#include<stack>
#include<queue>
#include<string>
#include<cstring>
#define PR(x) printf(#x"=%d\n",x)
#define PRARR(x,n) for(int i=0;i<n;i++)printf(#x"[%d]=\t%d\n",i,x[i])
#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
int dfs(int u);
using namespace std;
int n;
bool visited[1001];
int doDfs[1001];
vector < vector < int > > celebrity;
vector<int> tmp;
void init() {

		for (int i=0;i<n; i++) {
                        doDfs[i] = 1;
                        visited[i] = false;
			celebrity.push_back(tmp);
                 }
                }
int main()
{

	int t;
	
	scanf("%d",&t);
	while( t-- ) {
		int m;
		scanf("%d%d",&n,&m);
		init();
		int a,b;
for ( int i = 0; i < m; i++) {
			scanf( "%d%d",&a,&b);
			celebrity[a].push_back(b);
		}
		
		for (int i = 0; i < n; i++) {
			doDfs[i] = 1;
			visited[i] =false;
			
		}
		int ans = 0;
		
		for ( int i = 0; i < n ; i++) {
	
			ans=max(dfs(i),ans);
		}
		printf("%d\n",ans);
		celebrity.clear();	
	}	
	return 0;
}
int dfs( int u) {
if (visited[u]==true) 
return doDfs[u];
visited[u] =true;
	int ans=1;
	for (int i=0;i<celebrity[u].size();i++) {
		
		int current=celebrity[u][i];
		int dist = dfs(current);
		if ( ans < (1 + dist))
			ans = 1 + dist;
		}      
	doDfs[u]=ans;
	 return ans;
	 }	



