#include <set>
#include <map>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <cctype>
#include <cstdio>
#include <string>
#include <vector>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long ll;

#define pb push_back
#define mp make_pair
#define popb pop_back
#define all(a) a.begin(), a.end()
#define SZ(a) ( (int)a.size() )
#define mem(a, b) memset(a, b, sizeof(a))

/// Cycles ///
//#define cycl0 0
//#define cycl1 1
//#define cycl5 5
//#define cycl6 6
//int cycl2[] = {1, 2, 4, 8, 6};
//int cycl3[] = {1, 3, 9, 7, 1};
//int cycl4[] = {1, 4, 6};
//int cycl7[] = {1, 7, 9, 3, 1};
//int cycl8[] = {1, 8, 4, 2, 6};
//int cycl9[] = {1, 9, 1};

vector<int>v[1000];
int dp[1000], n, m;
int dp_solve(int cur);

int main()
{
	int t, i, a, b, ans;

	scanf ("%d", &t);
	while(t--)
	{
	    scanf ("%d %d", &n, &m);
	    for (i=0; i<m; i++)
	    {
	        scanf ("%d %d", &a, &b);
	        v[a].pb(b);
	    }
	    ans = 0;
	    mem(dp, -1);
	    for (i=0; i<n; i++) ans = max(ans, dp_solve(i));
	    printf ("%d\n", ans);
	    for (i=0; i<n; i++) v[i].clear();
	}
	return 0;
}

int dp_solve(int cur)
{
//    if (!SZ(v[cur])) return 1;
    if (dp[cur] != -1) return dp[cur];

    dp[cur] = 1;
    for (int i=0; i<SZ(v[cur]); i++)
        dp[cur] = max(dp[cur], dp_solve(v[cur][i])+1);
    return dp[cur];
}
