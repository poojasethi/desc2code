#include <cstdio>
# include <algorithm>
#include <stdint.h>
#include <unistd.h>
using namespace std;
/* Fast IO */
class FastInput {
public:
    FastInput() {
        m_dataOffset = 0;
        m_dataSize = 0;
        m_v = 0x80000000;
    }
	
    uint32_t ReadNext() {
        if (m_dataOffset == m_dataSize) {
            int r = read(0, m_buffer, sizeof(m_buffer));
            if (r <= 0) return m_v;
            m_dataOffset = 0;
            m_dataSize = 0;
            int i = 0;
            if (m_buffer[0] < '0') {
                if (m_v != 0x80000000) {
                    m_data[m_dataSize++] = m_v;
                    m_v = 0x80000000;
                }
                for (; (i < r) && (m_buffer[i] < '0'); ++i);
            }
            for (; i < r;) {
                if (m_buffer[i] >= '0') {
                    m_v = m_v * 10 + m_buffer[i] - 48;
                    ++i;
                } else {
                    m_data[m_dataSize++] = m_v;
                    m_v = 0x80000000;
                    for (i = i + 1; (i < r) && (m_buffer[i] < '0'); ++i);
                }
            }
        }
        return m_data[m_dataOffset++];
    }
	
public:
    uint8_t m_buffer[32768];
    uint32_t m_data[16384];
    size_t m_dataOffset, m_dataSize;
    uint32_t m_v;
};
 


/* End of fast IO*/
 
int visited[1001];
int cost[1001];
int graph[1001][1001];
 
int dfs( int u ,int n) {
 
	if ( visited[u] == 1) 
		return cost[u];
 
	visited[u] = 1;
	int ans = 1;
	for ( int i = 0; i < n; i++) {
		
		if(graph[u][i] == 1){
		
		int d = dfs(i,n);
		if ( ans < (1 + d))
			ans = 1 + d;
		}
	}      
	
 
	 cost[u] =  ans;
	 return ans;
}	
 

 
 
 
int main()
{
 
    FastInput object;  
	int t,n,m,a,b,i,j;
	//scanf("%d",&t);
	t = object.ReadNext();
	while( t-- ) {
 
		//scanf("%d%d",&n,&m);
		n = object.ReadNext();
        m = object.ReadNext();
		  for (i = 0; i < n; i++) {
                        cost[i] = 1;
                        visited[i] = 0;
                        
              for(j=0;j<n;j++)graph[i][j]=0;          
                        
			
          }
 
 
 
		for ( i = 0; i < m; i++) {
			//scanf( "%d%d",&a,&b);
			a = object.ReadNext();
			b = object.ReadNext();
			graph[a][b] = 1;
		}
		
		
		int ans = 0;
		
		for (i = 0; i < n ; i++) {
	
			ans = max ( dfs(i,n), ans);
		}
		printf("%d\n",ans);
			
	}	
	return 0;
}
 