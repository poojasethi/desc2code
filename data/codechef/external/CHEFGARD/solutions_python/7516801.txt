/* AKSHIT CHOPRA - 2014A7PS035P  BITS Pilani */
#include<bits/stdc++.h>

using namespace std;

#define LL long long

int get_int()
{
    int num = 0;
    char c = getchar_unlocked();
    int flag = 0;
    while(!((c>='0' && c<='9') || c == '-'))
        c=getchar_unlocked();
    if(c == '-')
    {
        flag = 1;
        c=getchar_unlocked();
    }
    while(c>='0' && c<='9')
    {
        num = (num<<1)+(num<<3)+c-'0';
        c=getchar_unlocked();
    }
    if(flag==0)
        return num;
    else
        return -1*num;
}
LL get_LL()
{
    LL num = 0;
    char c = getchar_unlocked();
    int flag = 0;
    while(!((c>='0' && c<='9') || c == '-'))
        c=getchar_unlocked();
    if(c == '-')
    {
        flag = 1;
        c=getchar_unlocked();
    }
    while(c>='0' && c<='9')
    {
        num = (num<<1)+(num<<3)+c-'0';
        c=getchar_unlocked();
    }
    if(flag==0)
        return num;
    else
        return -1*num;
}
int n ;
LL solve(LL *col1,LL *col2,LL *col3,int n)
{
    LL *col_12 =  (LL *)calloc(n+1,sizeof(LL)) ;
    LL *col_123 = (LL *)calloc(n+1,sizeof(LL )) ;
    LL minm , tmp  ;
 //    printf("n = %d\n",n) ;
   minm = LLONG_MAX ;
    for(int i=1;i<=n;i++)
    {
        minm =  min(minm , col1[i] - col2[i]) ;
        col_12[i] = col2[i] + minm ;
    }
   /* for(int i=1;i<=n;i++)
    {
        //printf("hey..\n") ;
        minm = INT_MAX ;
        for(int j=1;j<=i;j++)
        {
           tmp = col1[j] - col2[j] ;
           if(tmp < minm)
            minm = tmp ;
           
        }
        col_12[i] = col2[i] + minm ;
        //printf("check %lld\n",col_12[i]) ;
    }*/
    minm = LLONG_MAX ;
    for(int i=1;i<=n;i++)
    {
        minm = min(minm ,col_12[i] - col3[i]) ;
        col_123[i] = col3[i] + minm ;
    }
    LL ret = col_123[n] ;
 //   printf("check %lld\n",ret) ;
    
    free(col_12) ;
    free(col_123) ;
    return ret ;
}
int main() 
{
    int t,n,i ;
    t = get_int() ;
    LL *col1,*col2,*col3 ;
    char *c ;
    LL *cost ;
    while(t--)
    {
       n = get_int() ;
       cost = (LL *)calloc(n+1,sizeof(LL )) ;
       col1 = (LL *)calloc(n+1,sizeof(LL )) ; // cost of painting all first i fences as red :P
       col2 = (LL *)calloc(n+1,sizeof(LL )) ;
       col3 = (LL *)calloc(n+1,sizeof(LL )) ;
       c = (char *)calloc(n+1,sizeof(char )) ;
       
       scanf("%s",c) ;
       
       for(i=1;i<=n;i++)
        cost[i] = get_LL() ;
       
       for(i=1;i<=n;i++)
       {
           col1[i] = col1[i-1] + cost[i];
           col2[i] = col2[i-1] + cost[i];
           col3[i] = col3[i-1] + cost[i] ;
           if(c[i-1]=='R')
             col1[i] -= cost[i] ;
           else if(c[i-1]=='G')
            col2[i] -= cost[i] ;
           else if(c[i-1]=='B')    
            col3[i] -= cost[i] ;
       }
   //    puts(c) ;
      /* printf("costs prepared\n") ;
       for(i=1;i<=n;i++)
        printf("%lld %lld %lld\n",col1[i],col2[i],col3[i]) ;
       */
       
       LL ans ;
       ans = solve(col1,col2,col3,n) ;
       ans = min(ans,solve(col1,col3,col2,n)) ;
       ans = min(ans,solve(col2,col1,col3,n)) ;
       ans = min(ans,solve(col2,col3,col1,n)) ;
       ans = min(ans,solve(col3,col1,col2,n)) ;
       ans = min(ans,solve(col3,col2,col1,n)) ;
       
       printf("%lld\n",ans) ;
       
       free(col1) ;
       free(col2) ;
       free(col3) ;
       free(c) ;
       free(cost) ;
    }
	return 0;
}
