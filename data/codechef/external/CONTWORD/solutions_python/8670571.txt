#include <cstdio>
#include <queue>
#include <cstring>
#include <memory.h>
#include <algorithm>
using namespace std;
#define M 101
char s[M][M],s1[M][M];
int a[M],st[M],en[M],mid[M],nxt[M],flag[M],vis[M];
queue<int> qq;
int main() {
    int cas,n,i,j,k,l,ss,tt,fg;
    for(scanf("%d",&cas);cas--;) {
        scanf("%d",&n);
        memset(a,0,sizeof(a));
        memset(st,0,sizeof(st));
        memset(en,0,sizeof(en));
        memset(mid,0,sizeof(mid));
        memset(vis,0,sizeof(vis));
        memset(nxt,-1,sizeof(nxt));
        for(i=0;i<n;i++) {
            scanf("%s",s[i]);
            strcpy(s1[i],s[i]);
            l=strlen(s[i]);
            for(k=j=0;j<l;j++) if(!j || s[i][j-1]!=s[i][j]) s[i][k++]=s[i][j];
            s[i][k]=0;
            for(j=0;j<k;j++) vis[s[i][j]-'a']=1;
        }
        int no=0;
        for(k=0;k<n;k++) {
            l=strlen(s[k]);
            if(l==1) a[s[k][0]-'a']=1;
            else {
                st[s[k][0]-'a']++;
                en[s[k][l-1]-'a']++;
                nxt[s[k][0]-'a']=s[k][l-1]-'a';
                for(i=0;i<l;i++) {
                    for(j=i+1;j<l;j++) if(s[k][i]==s[k][j]) break;
                    if(j<l) break;
                }
                if(i<l) {no=1;break;}
                for(i=1;i<l-1;i++) mid[s[k][i]-'a']++;
            }
        }
        for(i=0;i<26;i++) {
            if(mid[i]) {
                if(mid[i]>1 || a[i] || st[i] || en[i]) {no=1;break;}
            }
            if(st[i]>1 || en[i]>1) {no=1;break;}
        }
        if(no) {puts("NOT POSSIBLE");continue;}
        for(k=i=0;i<26;i++) if(vis[i]) k++;
        if(k==1) {
            for(i=0;i<n;i++) printf("%s",s1[i]);
            puts("");
            continue;
        }
        for(ss=tt=i=0;i<26;i++){
            if(!st[i] && en[i]) tt++;
            if(st[i] && !en[i]) ss++;
        }
        for(i=0;i<26;i++) {
            if(!vis[i]) continue;
            memset(flag,0,sizeof(flag));
            flag[i]=1;
            while(!qq.empty()) qq.pop();
            qq.push(i);
            while(!qq.empty()){
                k=qq.front();qq.pop();
                if(nxt[k]<0) continue;
                k=nxt[k];
                if(flag[k]) {no=1;break;}
                flag[k]=1;
                qq.push(k);
            }
            if(no) break;
        }
        if(no) {puts("NOT POSSIBLE");continue;}
        if(ss==1 && tt==1) {
            for(i=0;i<26;i++) if(a[i] && !st[i] && !en[i]) break;
            if(i<26) {puts("MORE THAN ONE");continue;}
            for(i=0;i<26;i++) if(st[i] && !en[i]) break;
            k=i;
            for(;;) {
                for(i=0;i<n;i++) {
                    l=strlen(s[i]);
                    if(s[i][0]==k+'a' && s[i][l-1]==k+'a') printf("%s",s1[i]);
                }
                for(i=0;i<n;i++) {
                    l=strlen(s[i]);
                    if(s[i][0]==k+'a' && s[i][l-1]!=k+'a') break;
                }
                if(i==n) break;
                printf("%s",s1[i]);
                k=s[i][strlen(s[i])-1]-'a';
            }
            puts("");
        }
        else puts("MORE THAN ONE");
    }
}