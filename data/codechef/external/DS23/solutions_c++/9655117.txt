#include <iostream>
#include <limits.h>

using namespace std;

bool isSafe( bool **A, int n, int m, int r, int c, bool **visit ) {

	if( ( r >= 0 ) && ( c >= 0 ) && ( r < n ) && ( c < m ) && !visit[ r ][ c ] && !A[ r ][ c ] )
		return true;
	return false;
}

void DFS( bool **A, int n, int m, int r, int c, bool **visit, int ans, int& fans ) {

	if( r == n - 1 && c == m - 1 ) {
		fans = min( ans + 1, fans );
	}
	
	if( isSafe( A, n, m, r + 1, c, visit ) ) {
		visit[ r + 1 ][ c ] = true;
		DFS( A, n, m, r + 1, c, visit, ans + 1, fans );
		visit[ r + 1 ][ c ] = false;
	}

	if( isSafe( A, n, m, r - 1, c, visit ) ) {
		visit[ r - 1 ][ c ] = true;
		DFS( A, n, m, r - 1, c, visit, ans + 1, fans );
		visit[ r - 1 ][ c ] = false;
	}

	if( isSafe( A, n, m, r, c + 1, visit ) ) {
		visit[ r ][ c + 1 ] = true;
		DFS( A, n, m, r, c + 1, visit, ans + 1, fans );
		visit[ r ][ c + 1 ] = false;
	}

	if( isSafe( A, n, m, r, c - 1, visit ) ) {
		visit[ r ][ c - 1 ] = true;
		DFS( A, n, m, r, c - 1, visit, ans + 1, fans );
		visit[ r ][ c - 1 ] = false;
	}

	if( isSafe( A, n, m, r + 1, c + 1, visit ) ) {
		visit[ r + 1 ][ c + 1 ] = true;
		DFS( A, n, m, r + 1, c + 1, visit, ans + 1, fans );
		visit[ r + 1 ][ c + 1 ] = false;
	}

	if( isSafe( A, n, m, r + 1, c - 1, visit ) ) {
		visit[ r + 1 ][ c - 1 ] = true;
		DFS( A, n, m, r + 1, c - 1, visit, ans + 1, fans );
		visit[ r + 1 ][ c - 1 ] = false;
	}

	if( isSafe( A, n, m, r - 1, c + 1, visit ) ) {
		visit[ r - 1 ][ c + 1 ] = true;
		DFS( A, n, m, r - 1, c + 1, visit, ans + 1, fans );
		visit[ r - 1 ][ c + 1 ] = false;
	}

	if( isSafe( A, n, m, r - 1, c - 1, visit ) ) {
		visit[ r - 1 ][ c - 1 ] = true;
		DFS( A, n, m, r - 1, c - 1, visit, ans + 1, fans );
		visit[ r - 1 ][ c - 1 ] = false;
	}
}

int main() {
	
	ios_base::sync_with_stdio( false );
	int n, m, i, j, ans, fans;

	cin >> n;

	bool **A = new bool*[ n ];
	bool **visit = new bool*[ n ];

	char *s = new char[ 81 ];
	cin >> s;
	
	for( m = 0;s[ m ];m++ );

	for( i = 0;i < n;i++ ) {
		A[ i ] = new bool[ m ];
		visit[ i ] = new bool[ m ];
	}

	for( i = 0;i < m;i++ ) {
		A[ 0 ][ i ] = s[ i ] -'0';
		visit[ 0 ][ i ] = false;
	}

	for( i = 1;i < n;i++ ) {
		char *s2 = new char[ 81 ];
		cin >> s2;
		for( j = 0;j < m;j++ ) {
			A[ i ][ j ] = s2[ j ] -'0';
			visit[ i ][ j ] = false;
		}
	}

	fans = INT_MAX;
	ans = 0;
	DFS( A, n, m, 0, 0, visit, ans, fans );

	cout << fans << "\n";

	return 0;
}