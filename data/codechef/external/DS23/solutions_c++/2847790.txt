#include<cmath>
#include<stdlib.h>
#include<limits.h>
#include<iostream>
#include<vector>
#include<stdio.h>
#include<string>
#include<string.h>
#include<algorithm>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<ctime>
#include<functional>
#include<iterator>
#define mp(x,y) make_pair(x,y)
#define pb(x) push_back(x)
#define vi vector<int>
#define vs vector<string>
#define fori(s,e) for(i=s;i<=e;i++)
#define forj(s,e) for(j=s;j<=e;j++)
#define fork(s,e) for(k=s;k<=e;k++)
#define ull unsigned long long
#define ll long long
#define imax INT_MAX
#define imin INT_MIN
#define sz(x) (int)x.size()
#define ppb pop_back
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define all(x) x.begin(),x.end()
#define mem(x,y) memset(x,y,sizeof(x));
#define pii pair<int,int>
#define in(c,x) scanf("%"#c,&x);
#define out(c,x) printf("%"#c,x);
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define aa first
#define bb second
using namespace std;
int readint()
{
    int t = 0;
    char c, ch;
    ch = getchar();
    if ( ch == '-' ) c = getchar();
    else c = ch;
    while ( c < '0' || c > '9' )
        c = getchar();
    while ( c >= '0' && c <= '9' )
    {
        t = ( t << 3 ) + ( t << 1 ) + c - '0';
        c = getchar();
    }
    if ( ch == '-' ) return -t;
    else return t;
}
int main()
{
    int i, j, k, t, n, m, x, y;
    int  a, b, h;
    cin >> n;
    vs grid(n);
    fori ( 0, n - 1 )
    {
        cin>>grid[i];
    }
    int col=grid[0].size();
    vector< vector< pii > > adj ( n*col );
    a=0,b=n*col-1;
    int X[]={-1,-1,0,1,1, 1, 0,-1};
    int Y[]={ 0, 1,1,1,0,-1,-1,-1};
    fori(0,b)
    {
        int r=i/col,c=i%col;
        if(grid[r][c]=='0')
        forj(0,7)
        {
            x=c+X[j],y=r+Y[j];
            if(x>=0 && x<col && y>=0 && y<n && grid[y][x]=='0')
                adj[i].pb ( pii ( y*col+x, 1 ) );
        }
    }
    vi dis ( b+1, imax );
    set<pii > V;
    dis[a] = 0;
    V.insert ( pii ( a, 0 ) );
    while ( !V.empty() )
    {
        pii top = *(V.begin());
        V.erase ( V.begin() );
        int v = top.first, d = top.second;
        tr ( adj[v], it )
        {
            int v2 = it->first, cost = it->second;
            if ( dis[v2] > dis[v] + cost )
            {
                if ( dis[v2] != imax )
                    V.erase ( V.find ( pii ( v2, dis[v2] ) ) );
                dis[v2] = dis[v] + cost;
                V.insert ( pii ( v2, dis[v2] ) );
            }
        }
    }
    /*fori(0,b)
    {
        int r=i/col,c=i%col;
        cout<<r<<" "<<c<<" "<<grid[r][c]<<" "<<dis[i];
        int n=adj[i].size();
        //cout<<n<<endl;
        cout<<endl;

    }*/
    cout << dis[b]+1 << endl;
    return 0;
}
