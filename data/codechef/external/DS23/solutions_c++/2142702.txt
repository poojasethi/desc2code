#include<iostream>
#include<vector>
#include<cstdio>
#include<algorithm>
#include<stack>
#include<queue>
#include<string>
#include<set>
#include<map>
#include<cstring>
#include<cmath>
#include<climits>
#include<utility>
#define pause system("pause")
#define nl printf("\n")
#define readint(x) scanf("%d",&x)
#define read2int(x,y) scanf("%d%d",&x,&y)
using namespace std;
int score[82][82];
bool visited[82][82];
char arr[82][82];
int n,m;
pair<int,int>temp;
bool safe(int i,int j)
{
     if(i>=0 && i<n && j>=0 && j<m && visited[i][j]==false && arr[i][j]=='0')return true;
     return false;
}
void bfs(int x,int y)
{
     int t1=0,t2=0;
     queue<pair<int,int> >q;
     q.push(make_pair(x,y));
     visited[x][y]=true;
     score[x][y]=1;
     while(!q.empty())
     {
                      temp=q.front();
                      t1=temp.first;
                      t2=temp.second;
                      q.pop();
                      if(safe(t1,t2-1))
                      {
                                      q.push(make_pair(t1,t2-1));
                                      visited[t1][t2-1]=true;
                                      score[t1][t2-1]=score[t1][t2]+1;
                      }
                      if(safe(t1,t2+1))
                      {
                                      q.push(make_pair(t1,t2+1));
                                      visited[t1][t2+1]=true;
                                      score[t1][t2+1]=score[t1][t2]+1;
                      }
                      if(safe(t1-1,t2-1))
                      {
                                      q.push(make_pair(t1-1,t2-1));
                                      visited[t1-1][t2-1]=true;
                                      score[t1-1][t2-1]=score[t1][t2]+1;
                      }
                      if(safe(t1-1,t2))
                      {
                                      q.push(make_pair(t1-1,t2));
                                      visited[t1-1][t2]=true;
                                      score[t1-1][t2]=score[t1][t2]+1;
                      }
                      if(safe(t1-1,t2+1))
                      {
                                      q.push(make_pair(t1-1,t2+1));
                                      visited[t1-1][t2+1]=true;
                                      score[t1-1][t2+1]=score[t1][t2]+1;
                      }
                      if(safe(t1+1,t2-1))
                      {
                                      q.push(make_pair(t1+1,t2-1));
                                      visited[t1+1][t2-1]=true;
                                      score[t1+1][t2-1]=score[t1][t2]+1;
                      }
                      if(safe(t1+1,t2))
                      {
                                      q.push(make_pair(t1+1,t2));
                                      visited[t1+1][t2]=true;
                                      score[t1+1][t2]=score[t1][t2]+1;
                      }
                      if(safe(t1+1,t2+1))
                      {
                                      q.push(make_pair(t1+1,t2+1));
                                      visited[t1+1][t2+1]=true;
                                      score[t1+1][t2+1]=score[t1][t2]+1;
                      }
     }
}
int main()
{
    readint(n);
    for(int i=0;i<n;i++)scanf("%s",arr[i]);
    m=strlen(arr[0]);
    memset(score,0,sizeof(score));
    memset(visited,false,sizeof(visited));
    score[0][0]=1;
    bfs(0,0);
    cout<<score[n-1][m-1];
}
