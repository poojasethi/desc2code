#include<bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
#define author rajat1603
#define pb push_back
#define mp make_pair
char arr[1000001];
char pat[1000001]={NULL};
int N;
inline void computeLPSArray(int M, int *lps){
    int len = 0;
    int i;
    lps[0] = 0;
    i = 1;
    while(i<M){
        if(pat[i]==pat[len]){
            len++;
            lps[i] = len;
            i++;
        }
           else{
                if(len){
                    len = lps[len-1];
                }
            else{
                lps[i++] = 0;
            }
        }
    }
}
inline int kmp(int k){//Taken from GEEKSFORGEEKS
    int coun=0;
    int M = strlen(pat);
    int *lps = (int *)malloc(sizeof(int)*M);
    int j  = 0;
    computeLPSArray( M, lps);
    int i = 0;
    while (i < N){
        if (pat[j] == arr[i]){
            j++;
            i++;
        }
        if (j == M){
            coun++;
            if(coun>=k){
                return coun;
            }
            j = lps[j-1];
        }
        else if (i<N&&pat[j]!=arr[i]){
            if (j)
                j = lps[j-1];
            else
                i++;
        }
    }
    free(lps);
    return coun;
}
inline bool comp(int sz,int k){
    for(int i=0;i<sz;i++){
        pat[i]=arr[i];
    }
    pat[sz]='\0';
    int temp = kmp(k);
    return temp>=k;
}
inline int binary(int n,int k){
    int l=1;
    int r=n;
    while(l<=r){
        int mid = (l+r)>>1;
        bool temp = comp(mid,k);
        if(!temp){
            r=mid-1;
        }
        else{
            l=mid+1;
        }
    }
    return r;
}
int main(){
    int n=scan();
    scanf("%s",arr);
    int k=scan();
    N=n;
    int x=binary(n,k);
    printf("%d\n",x);
    arr[x]='\0';
    printf("%s",arr);
}  