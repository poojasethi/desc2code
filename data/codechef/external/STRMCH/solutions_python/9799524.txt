// created by: Prashant Kumar Singh :)
#include<iostream>
#include<algorithm>
#include<utility>
#include<cstring>
#include<string.h>
#include<set>
#include<map>
#include<math.h>
#include<stdio.h>
#include<vector>
#include<functional>
#include<bitset>
#include<iomanip>
#define ll long long
#define gr greater<ll>()
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define f first
#define s second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
using namespace std;
int ffunc[1000006];
int compute_failure_function(int psize, string pattern)
{
	int k = -1, i;
	ffunc[0] = k;
	int ma = k;
	for (i = 1ll; i < psize; i++) {
		while (k > -1 && pattern[k + 1] != pattern[i])
			k = ffunc[k];
		if (pattern[i] == pattern[k + 1])
			k++;
		ffunc[i] = k;
		ma = max(ma, ffunc[i]);
	}
	return ma;
}

int KMP(string target, string pattern)
{
	int cnt = 0;
	int psize = pattern.length();
	compute_failure_function(psize, pattern);
	int tsize = target.length();
	int k = -1, i;
	for (i = 0ll; i < tsize; i++) {
		while (k > -1 && pattern[k + 1] != target[i])
			k = ffunc[k];
		if (target[i] == pattern[k + 1])
			k++;
		if (k == psize - 1) {
			cnt++;
		}
	}
	return cnt;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	int x, ans, k;
	string s;
	cin >> x;
	cin >> s >> k;
	int lo = 0, hi = s.length();
	while (lo <= hi)
	{
		int mid = lo + (hi - lo) / 2;
		string s1 = s.substr(0, mid);
		int y = KMP(s, s1);
		//cout << mid <<" "<<y << endl;
		if (y >= k)
		{
			ans = mid;
			lo = mid + 1;
		}
		else
			hi = mid - 1;
	}
	cout << ans << endl;
	cout << s.substr(0, ans) << endl;
	return 0;
}