#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define p(n) printf("%d\n",n)
#define mod 1000000007LL
#define ll long long
#define pb push_back
#define mp make_pair

#define LN 21
using namespace std;

 int occ;
void computeLPSArray(string pat, int M, int lps[])
{
    int len = 0;  // lenght of the previous longest prefix suffix
    int i;

    lps[0] = 0; // lps[0] is always 0
    i = 1;

    // the loop calculates lps[i] for i = 1 to M-1
    while (i < M)
    {
       if (pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if (len != 0)
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];

           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}

void KMPSearch(string pat, string txt)
{
    int M = pat.length();
    int N = txt.length();

    // create lps[] that will hold the longest prefix suffix values for pattern
    int lps[1000002];
    int j  = 0;  // index for pat[]

    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);

    int i = 0;  // index for txt[]
    while (i < N)
    {
      if (pat[j] == txt[i])
      {
        j++;
        i++;
      }

      if (j == M)
      {
        occ++;
        j = lps[j-1];
      }

      // mismatch after j matches
      else if (i < N && pat[j] != txt[i])
      {
        // Do not match lps[0..lps[j-1]] characters,
        // they will match anyway
        if (j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
}



string s1,pat;
int main()
{
    int n,k,i;

    s(n);
    cin>>s1;

    s(k);
     int lo=1;
     int hi=s1.length();
     int ans=0;
     while(lo<=hi)
     {
      int mid=(lo+hi)/2;
      //cout<<lo<<" "<<hi<<" "<<mid<<endl;
      occ=0;
      pat.clear();
      for(i=0;i<mid;++i)
      pat.pb(s1[i]);
      KMPSearch(pat, s1);
      //cout<<pat<<" "<<s1<<" "<<occ<<endl;
      if(occ>=k)
      {
      ans=mid;
      lo=mid+1;
      }
      else
      hi=mid-1;
     }
     printf("%d\n",ans);
     for(i=0;i<ans;++i)
     printf("%c",s1[i]);
     printf("\n");


    return 0;
}
