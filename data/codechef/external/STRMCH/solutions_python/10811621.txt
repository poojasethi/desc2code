#include <bits/stdc++.h>
using namespace std;

#define TRACE
#ifdef TRACE
#define TR(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define TR(...)
#endif

typedef long long                LL;
typedef vector < int >           VI;
typedef pair < int,int >         II;
typedef vector < II >            VII;

#define MOD                      1000000007
#define EPS                      1e-12
#define N                        200100
#define PB                       push_back
#define MP                       make_pair
#define F                        first 
#define S                        second
#define ALL(v)                   v.begin(),v.end()
#define SZ(a)                    (int)a.size()
#define FILL(a,b)                memset(a,b,sizeof(a))
#define SI(n)                    scanf("%d",&n)
#define SLL(n)                   scanf("%lld",&n)
#define PLLN(n)                  printf("%lld\n",n)
#define PIN(n)                   printf("%d\n",n)
#define REP(i,j,n)               for(LL i=j;i<n;i++)
#define PER(i,j,n)               for(LL i=n-1;i>=j;i--)
#define endl                     '\n'
#define fast_io                  ios_base::sync_with_stdio(false);cin.tie(NULL)

int lps[1000006],cnt[1000006];

void lps_array(string pattern){
  lps[0]=0;
  int i=0,j=1;
  while(j<pattern.length()){
    if(pattern[i]==pattern[j]){
      lps[j]=i+1;
      i++;
      j++;
    }
    else{
      if(i!=0)
        i=lps[i-1];
      else{
        lps[j]=0;
        j++;
      }
    }
  }
}

int kmp(string pattern,string text){
  lps_array(pattern);
  int i=0,j=0,ret=0;
  while(i<text.length()){
    if(text[i]==pattern[j]){
      i++;
      j++;
    }
    if(j==pattern.length()){
      ret++;
      j=lps[j-1];
    }
    else if(i<text.length() && pattern[j]!=text[i]){
      if(j!=0)
        j=lps[j-1];
      else
        i++;
    }
  }
  return ret;
}


int main() {
  fast_io;
  int n , k; cin >> n;
  string s; cin >> s >> k;
  int lo = 1 , hi = n , ans=0;
  while(lo <= hi) {
    int mid = (lo + hi)/2;
    if(kmp(s.substr(0,mid) , s) >= k)
      ans = mid , lo = mid + 1;
    else
      hi = mid - 1;
  }
  cout << ans << endl << s.substr(0,ans) << endl;
  return 0;
}
