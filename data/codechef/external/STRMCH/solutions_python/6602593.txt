/*
***************************************************************************************************************

							Author : Yash Sadhwani

**************************************************************************************************************
*/
#include<stdio.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<stack>
#include<functional>
using namespace std;
#define ll long long
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define sd(x) scanf("%lf",&x)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define vl vector<ll>
#define vi vector<int>
#define vvl vector< vl >
#define vvi vector< vi >
#define pb push_back
#define mod 1000000007
#define mem(x,y) memset(x,y,sizeof(x))
#define f(i,a,b) for(int i=(a);i<(b);i++)
#define max_int_value 2147483647
#define max_long_value 9223372036854775807
#define ub(X,v) upper_bound(X.begin(),X.end(),v)
#define lb(X,v) lower_bound(X.begin(),X.end(),v)



//qsort(ww,cc,sizeof(tp),compare);
/*int compare(const void *a,const void *b){
	ll y=((((tp*)a)->w)-(((tp*)b)->w));
	if(y>0)return 1;
	else if(y==0)return 0;
	else return -1;
}
bool way(ii x,ii y){
	return x.first<y.first or x.first==y.first and x.second<y.second;
}

ll modpow(ll base, ll exponent,ll modulus){
	if(base==0&&exponent==0)return 0;
	ll result = 1;
	while (exponent > 0){
		if (exponent % 2 == 1)
		    result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	return result;
}

*/


#define MAXN 1000010
#define ls (node<<1)
#define rs ((node<<1)+1)
#define ii pair<int,int>



char given[MAXN],pattern[MAXN];
int failure[MAXN];

void compute_prefix(void){
	int m=strlen(pattern),k=-1;
	failure[0]=0;
	for(int q=1;q<m;q++){
		while(k>=0 && pattern[k+1]!=pattern[q])k=failure[k]-1;
		if(pattern[k+1]==pattern[q])k++;
		failure[q]=k+1;
	}
}
int kmp_matcher(void){
	int ret=0;
	int n=strlen(given),m=strlen(pattern),q=-1;
	compute_prefix();
	for(int i=0;i<n;i++){
		while(q>=0 && pattern[q+1]!=given[i])q=failure[q]-1;
		if(pattern[q+1]==given[i])q++;
		if(q==m-1){
			ret++;
			//printf("%d\n",i-m+1);
			q=failure[q]-1;
		}
	}
	return ret;
}





int occ;

int bin(int left,int right){
	if(left>right)return right;
	int mid=(left+right)/2;
	for(int i=0;i<mid;i++)pattern[i]=given[i];
	pattern[mid]='\0';
	int ret=kmp_matcher();
	if(ret>=occ)return bin(mid+1,right);
	else return bin(left,mid-1);
}

int N;

inline void ReadInput(void){
	si(N);
	ss(given);
	si(occ);
}

inline void solve(void){
	int ans=bin(0,N);
	printf("%d\n",ans );
	for(int i=0;i<ans;i++)printf("%c",given[i] );
}

inline void Refresh(void){
	
}

int main()
{	
	ReadInput();
	solve();
    return 0;
}