#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
// If you need to recall how to use memset:
#define MEMSET_INF 127 // about 2B
#define MEMSET_HALF_INF 63 // about 1B
//memset(dist, MEMSET_INF, sizeof dist); // useful to initialize shortest path distances
//memset(dp_memo, -1, sizeof dp_memo); // useful to initialize DP memoization table
//memset(arr, 0, sizeof arr); // useful to clear array of integers

int b[1000009];
char p[1000009],t[1000009];
int m,n,ans;

void kmpreprocess()
{
    int i = 0,j = -1;b[0] = -1;
    while(i < m)
    {
        while(j >=0 && p[i]!=p[j]) j = b[j];
        i++;j++;
        b[i] = j;
    }
}

void kmpsearch()
{
    int i = 0,j = 0;
    while( i < n )
    {
        while( j >=0 && t[i] != p[j] ) j = b[j];
        i++;j++;
        if( j == m)
        {
 //           printf("String found at idx -- %d\n",i-j);
            ans++;
            j = b[j];
        }
    }
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    s(m);
    scanf("%s",p);
    n = m;
    strcat(t,p);
    int k;s(k);
    //cout << t << " " << p << endl;
    int low = 0;
    int high = m;
    kmpreprocess();
    while( low < high )
    {
        int mid = (low + high + 1) / 2;
        //printf("%d %d\n",low,high);
        m = mid;
        ans = 0;
        kmpsearch();
        if( ans >= k )
            low = mid;
        else
            high = mid - 1;
    }
    printf("%d\n",low);
    REP(i,0,low - 1)
        printf("%c",p[i]);
    printf("\n");
    return 0;
}
