import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;

public class Main {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static void solve()
	{
		int mod = 1000000007;
		for(int T = ni();T >= 1;T--){
			int n = ni(), m = ni();
			int[][] M = new int[n][n];
			for(int i = 0;i < m;i++){
				int f = ni(), t = ni();
				M[f][t]--;
				M[t][f]--;
				M[f][f]++;
				M[t][t]++;
			}
			
			int[][] U = new int[n-1][n-1];
			for(int i = 0;i < n-1;i++){
				for(int j = 0;j < n-1;j++){
					U[i][j] = M[i][j];
					if(U[i][j]<0)U[i][j]+=mod;
				}
			}
			out.println(det(U, mod));
		}
	}
	
	public static int det(int[][] A, int mod)
	{
		int[][] lu = decomposeToLU(A, mod);
		if(lu == null)return 0;
		long mul = 1;
		for(int i = 0;i < A.length;i++){
			mul = mul * lu[i][i] % mod;
		}
		return (int)mul;
	}
	
	public static int[][] decomposeToLU(int[][] A, int mod)
	{
		int n = A.length;
		int[][] LU = new int[n][n];
		for(int r = 0;r < n;r++){
			for(int j = r;j < n;j++){
				long sum = 0;
				for(int k = 0;k < j;k++){
					sum += (long)LU[r][k]*LU[k][j]%mod;
				}
				LU[r][j] = (int)((A[r][j]-sum%mod+mod)%mod);
			}
			if(LU[r][r] == 0)return null;
			long inv = invl(LU[r][r], mod);
			for(int i = r+1;i < n;i++){
				long sum = 0;
				for(int k = 0;k < i;k++){
					sum += (long)LU[i][k]*LU[k][r]%mod;
				}
				LU[i][r] = (int)((A[i][r]-sum%mod+mod)*inv%mod);
			}
		}
		return LU;
	}
	
	public static long invl(long a, long mod)
	{
		long b = mod;
		long p = 1, q = 0;
		while(b > 0){
			long c = a / b;
			long d;
			d = a; a = b; b = d % b;
			d = p; p = q; q = d - c * q;
		}
		return p < 0 ? p + mod : p;
	}
	
	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}
