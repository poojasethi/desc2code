#include<iostream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<cstring>
#include<cmath>
#include<queue>
#include<map>
#include<vector>
#include<stack>
#include<set>
#include<fstream>
#define pb push_back
#define mp make_pair
#define M 401
#define K 11
#define limit 150000
#define Inf 1e8
#define accr 1e-11
#define PI 3.141592653589793238462643383279502884197
#define Mod 1000000007
#define ll (long long)
using namespace std;

long long dp[M][1100],sum[K][M];

bool valid(int num,int k)
{
           bool solve=false;
            int cnt=0;
            while(cnt!=k)
            {
                if(((num>>cnt)&1)!=((num>>(k-cnt-1))&1))
                {
                    solve=true;
                    break;
                }
                cnt++;
            }
            return solve;
}

int main()
{
    int i,j,k,l,p,q,r,num,cnt,t;
    for(k=0;k<K;k++)
    {
        vector<int> graph[(1<<k)];
        for(i=0;i<(1<<k);i++)
        {
            if(valid(i,k))
            {
                dp[0][i]=1;
                sum[k][0]+=1;
            }
            num=i;
            num>>=(k-1);
            num<<=(k-1);
            num=i-num;
            num<<=1;
            if(valid(num,k)&&valid(i<<1,k+1))
            graph[num].pb(i);
            if(valid(num+1,k)&&valid((i<<1)+1,k+1))
            graph[num+1].pb(i);
        }
        for(i=1;i<M;i++)
        {
            for(j=0;j<(1<<k);j++)
            {
                for(l=0;l<graph[j].size();l++)
                {
                    dp[i][j]+=dp[i-1][graph[j][l]];
                    sum[k][i]+=dp[i-1][graph[j][l]];
                    sum[k][i]%=Mod;
                    dp[i][j]%=Mod;
                }
            }
        }
        for(i=0;i<M;i++)
            for(j=0;j<(1<<k);j++) dp[i][j]=0;
    }

    scanf("%d",&t);
    while(t--)
    {
        int n,m;
        scanf("%d %d",&n,&m);
        if(n<m)
        {
            num=(1<<n);
            printf("%d\n",num);
        }
        else
        {
            long long ans;
            ans=sum[m][n-m];
            cout<<ans<<endl;
        }
    }

    return 0;
}
