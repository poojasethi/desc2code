#include<iostream>
#include<stdio.h>
#include<climits>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<map>
#include<vector>
#include<queue>
#define mod 1000000007

using namespace std;

int n,k;
int dp[100000][13];
long long dp1[2000][405],ans;

int fun2(int mask,int pos)
{
    if(dp[mask][pos]==-1)
    {
        int temp=0,temp1,temp2;
        temp1=mask;
        for(int i=0;i<pos;i++)
        {
            temp<<=1;
            temp2=1&temp1;
            temp1>>=1;
            temp|=temp2;
        }
        //printf("%d %d\n",mask,temp);
        if(temp!=mask)
            dp[mask][pos]=1;
        else
            dp[mask][pos]=0;
        return dp[mask][pos];
    }
    return dp[mask][pos];
}

long long fun1(int mask,int pos)
{
    if(dp1[mask][pos]==-1)
    {
        if(pos==n)
        {
            if(fun2(mask,k)==1)
                dp1[mask][pos]=1;
            else
                dp1[mask][pos]=0;
            return dp1[mask][pos];
        }
        int temp1=fun2(mask,k);
        int temp2=fun2(mask<<1,k+1);
        long long temp3,temp4;
        if(temp1&&temp2)
            temp3=fun1((mask<<1)&((1<<k)-1),pos+1);
        else
            temp3=0;
        temp2=fun2((mask<<1)|1,k+1);
        if(temp1&&temp2)
            temp4=fun1(((mask<<1)|1)&((1<<k)-1),pos+1);
        else
            temp4=0;
        dp1[mask][pos]=(temp3+temp4)%mod;
        return dp1[mask][pos];
    }
    return dp1[mask][pos];
}

int fun(int mask)
{
    ans=(ans+fun1(mask,k))%mod;
    for(int i=0;i<k&&(mask&(1<<i))==0;i++)
    {
        if(!(mask&(1<<i)))
            fun(mask|1<<i);
    }
    return 0;
}


int main()
{
    int t;
    scanf("%d",&t);
    for(int i=0;i<10000;i++)
        for(int j=0;j<12;j++)
            dp[i][j]=-1;
    while(t--)
    {
        scanf("%d%d",&n,&k);
        for(int i=0;i<=1024;i++)
            for(int j=0;j<=400;j++)
                dp1[i][j]=-1;
        if(k>n)
        {
            ans=1;
            for(int i=0;i<n;i++)
                ans*=2;
            printf("%d\n",ans);
            continue;
        }
        ans=0;
        fun(0);
        printf("%d\n",ans);
    }
    return 0;
}
