#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << (x) << " "
#define pln(x) cout << (x) << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << (x) << " "
#define dbs(x) cerr << (x) << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int N = 404;
const int K = 12;
const int mod = (int)1e9 + 7;

int dp[N][1 << K][2]; // pos, last k digs, found yet

inline void add(int &a, int b) {
    a += b;
    if(a >= mod) a -= mod;
}

int memo[1 << K][K];

int isPalin(int n, int len) {
    bool ret = true;
    vi digs;
    rep(i, len) {
        digs.pb(n & 1);
        n >>= 1;
    }
    rep(i, len) {
        if(digs[i] != digs[len - 1 - i]) ret = false;
    }
    return ret;
}

#define isGood(i, j) memo[(i)][(j)]

int go(int pos, int mask, int found, int n, int k) {
    if(pos == n) {
        return found;
    }
    int & ret = dp[pos][mask][found];
    if(ret != -1) return ret;
    ret = 0;
    bool foundHere;
    // put 0
    foundHere = pos >= k - 1 and isGood((mask << 1) & ((1 << k) - 1), k);
    foundHere |= pos >= k and isGood((mask << 1) & ((1 << (k + 1)) - 1), k + 1);
    add(ret, go(pos + 1, (mask << 1) & ((1 << k) - 1) , found || foundHere, n, k));

    // put 1
    foundHere = pos >= k - 1 and isGood((mask << 1 | 1) & ((1 << k) - 1), k);
    foundHere |= pos >= k and isGood((mask << 1 | 1) & ((1 << (k + 1)) - 1), k + 1);
    add(ret, go(pos + 1, (mask << 1 | 1) & ((1 << k) - 1), found || foundHere, n, k));
    return ret;
}

int main() {
    fill(memo, -1);
    rep(i, 1 << K) rep(j, K) memo[i][j] = isPalin(i, j);
    int T; gi(T);
    rep(z, T) {
        int n, k;
        gi(n), gi(k);
        int ans = 1;
        rep(i, n) {
            add(ans, ans);
        }
        fill(dp, -1);
        ans -= go(0, 0, 0, n, k);
        if(ans < 0) ans += mod;
        pin(ans);
    }
    return 0;
}