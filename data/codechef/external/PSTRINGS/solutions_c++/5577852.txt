#include <bits/stdc++.h>
#define MOD 1000000007
using namespace std;
typedef long long ll;
int ispalin[2050][12];
int flag;
int n,k;
ll mem[402][2050];
ll fun(int len, int mask){
	if(n==len && n<k) return 1;
	if(n==len) return !ispalin[mask][k];
	ll ans=0,ans1,ans2;
	int mask0 = (mask<<1) & flag;
    int mask1 = ((mask<<1) | 1) & flag;
    if(len<k-1){
    	if(mem[len+1][mask0]==-1) ans1 = fun(len+1,mask0)%MOD;
    	else ans1 = mem[len+1][mask0] % MOD;
    	if(mem[len+1][mask1]==-1) ans2 = ( ans1 + fun(len+1,mask1) )%MOD;
    	else ans2 = ( ans1 + mem[len+1][mask1] ) %MOD;
    	return (fun(len+1,mask0)%MOD+fun(len+1,mask1)%MOD)%MOD;
    }	
    if(len==k-1){
    	if(!ispalin[mask0][k]){
    		if(mem[len+1][mask0]==-1) ans = fun(len+1,mask0)%MOD;
    		else ans = mem[len+1][mask0] % MOD;
	    }
	    if( !ispalin[mask1][k] ){
	    	if(mem[len+1][mask1]==-1) ans = (ans + fun(len+1,mask1))%MOD;
    		else ans = ( ans + mem[len+1][mask1] ) %MOD;
	    }
    }
    else{
	   	if(!ispalin[mask0][k] && !ispalin[mask0][k+1]){
	    	if(mem[len+1][mask0]==-1) ans = fun(len+1,mask0)%MOD;
    		else ans = mem[len+1][mask0] % MOD;
	    }
	    if(!ispalin[mask1][k]  && !ispalin[mask1][k+1]){
	    	if(mem[len+1][mask1]==-1) ans = (ans + fun(len+1,mask1))%MOD;
    		else ans = ( ans + mem[len+1][mask1] ) %MOD;
	    }	
    }
    mem[len][mask]=ans;
    return ans;
}
void numstr(){
	ll ans= (fun(1,0)%MOD + fun(1,1)%MOD)%MOD;
	printf("%lld\n",ans);
}
int main(){
	int T;
	scanf("%d",&T);
	for(int i=0;i<2050;i++){
		ispalin[i][1]=1;
		ispalin[i][0]=1;
	}
	for(int i=0;i<12;i++) ispalin[0][i]=1;
	for(int i=0;i<2051;i++){
		for(int j=2;j<12;j++){
			int next = (i>>1) & ((1<<(j-2)) - 1);
			if( (i&1) == ((i>>(j-1)) & 1 )){
				if(j==2) ispalin[i][j]=1;
				else ispalin[i][j] = ispalin[next][j-2];
			}
			else ispalin[i][j]=0;
		}
	}
	/*for(int i=0;i<64;i++){
		for(int j=0;j<6;j++) printf("%d %d %d\n",i,j,ispalin[i][j]);
	}*/
	while(T--){
		memset(mem,-1,sizeof mem);
		scanf("%d%d",&n,&k);
		//cerr<<T<<" "<<n<<" "<<k<<"\n";
        flag = (1<<(k+1))-1; 
		numstr();
	}
	return 0;
}
