// A Dynamic Programming based C++ program to find minimum
// number operations to convert str1 to str2
#include<bits/stdc++.h>
using namespace std;

// Utility function to find minimum of three numbers
int min(int x, int y, int z)
{
    return min(min(x, y), z);
}
int dp[4000][4000];
int editDistDP(string str1, string str2, int m, int n)
{
    // Create a table to store results of subproblems
    for(int i=0;i<=4000;i++)dp[0][i]=0;
    for(int i=0;i<=4000;i++)dp[i][0]=0;

    // Fill d[][] in bottom up manner
    for (int i=0; i<=m; i++)
    {
        for (int j=0; j<=n; j++)
        {
            // If first string is empty, only option is to
            // isnert all characters of second string
            if (i==0)
                dp[i][j] = j;  // Min. operations = j

            // If second string is empty, only option is to
            // remove all characters of second string
            else if (j==0)
                dp[i][j] = i*2; // Min. operations = i

            // If last characters are same, ignore last char
            // and recur for remaining string
            else if (str1[i-1] == str2[j-1])
                dp[i][j] = dp[i-1][j-1];

            // If last character are different, consider all
            // possibilities and find minimum
            else
                dp[i][j] =  min(dp[i][j-1]+1,  dp[i-1][j]+2);  // Remove
                                //   dp[i-1][j-1]); // Replace
        }
    }

    return dp[m][n];
}

// Driver program
int main()
{
    // your code goes here
    string str1 ;
    string str2 ;
    int test,a,b,i;
    scanf("%d",&test);
    while(test--)
    {
        cin >> a;
        char c;
     //   lenA=a;
        int k;
        str1="";
        for(i=0; i<a; i++)
        {
            cin >> c >> k;
            //str1=str1+c;
           // ara1[i]=k;
             while(k--) str1+=c;
        }
        cin >> a;
       // lenB=a;
        str2="";
        for(i=0; i<a; i++)
        {
            cin >> c >> k;
            while(k--)str2=str2+c;
         //   ara2[i]=k;
        }
        //   lenA=str.size();
        //cout<<str<<" "<<str2<<endl;
    //    memset(dp,-1,sizeof dp);
        //  lenB=str2.size();
        cout << editDistDP(str1, str2, str1.length(), str2.length())<<endl;
      //  printf("%lld\n",dp_func(0,0));
    }

   //cout << editDistDP(str1, str2, str1.length(), str2.length());

    return 0;
}
