#include <bits/stdc++.h>

using namespace std;

const int P = 110;
const int H = 13;

int N, M, D, C;
string G[H][P];
bool vis[H][P][P][P];

struct Node
{
	int x, y, z, dis;
	Node (int a, int b, int c, int d)
	{
		x = a;
		y = b;
		z = c;
		dis = d;
	}
};

bool valid (int x, int y, int z, int d)
{
	if (x == 0 || x == N + 1)
		return G[z][x][y] != 'X';
	else if ((x + z) & 1)
		return G[z][x][(y + d) % C] != 'X';
	else
		return G[z][x][(y - d + C) % C] != 'X';
}

bool Check (int x, int y, int z, int d)
{
	return x >= 0 && x < N + 2 && y >= 0 && y < C && z >= 0 && z < D && valid (x, y, z, d);
}

int bfs (int x, int y, int z)
{
	int dx[7] = {1, 0, 0, -1, 0, 0, 0};
	int dy[7] = {0, 1, 0, 0, -1, 0, 0};
	int dz[7] = {0, 0, 1, 0, 0, -1, 0};
	int d;
	
	Node T (x, y, z, 0);
	vis[z][x][y][0] = true;
	queue < Node > Q;
	Q.push (T);
	while (!Q.empty ())
	{
		T = Q.front ();
		Q.pop ();
		x = T.x;	y = T.y;	z = T.z;	d = T.dis;
		if (G[z][x][y] == 'D')
			return d;

		for (int i = 0; i < 7; i++)
		{
			int xx = x + dx[i], yy = y + dy[i], zz = z + dz[i];
			if (d < M && Check (xx, yy, zz, (d + 1) % C) && !vis[zz][xx][yy][(d + 1) % C])
			{
				T = Node (xx, yy, zz, d + 1);
				Q.push (T);
				vis[zz][xx][yy][(d + 1) % C] = true;
			}
		}
	}
	return -1;
}

int main ()
{
	cin >> M >> N >> C >> D;
	for (int i = 0; i < D; i++)
		for (int j = 0; j < N + 2; j++)
			cin >> G[i][j];

	int x, y, z;
	for (int i = 0; i < D; i++)
		for (int j = 0; j < C; j++)
			if (G[i][0][j] == 'S')
				z = i, x = 0, y = j;

	memset (vis, false, sizeof (vis));
	int res = bfs (x, y, z);
	cout << res << endl;
	return 0;
}