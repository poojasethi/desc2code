#include <stdio.h>
#include <vector>
#include <string.h>
using namespace std;
#define MAXN 200005
struct node {
    int dist;
    vector<int> adj;
}graph[MAXN];
int H[MAXN], visit[MAXN];
void dfs(int start, int dist) {
    if(visit[start]) return;
    visit[start] = 1;
    graph[start].dist = dist;
    for(int i = 0 ; i < graph[start].adj.size(); i++) {
        int num = graph[start].adj[i];
        dfs(num, dist + 1);
    }
}
void solve() {
    int N;
    scanf("%d", &N);
    memset(graph, 0, sizeof(graph));
    for(int i = 1; i < N; i++) {
        int x, y;
        scanf("%d %d", &x, &y);
        graph[x].adj.push_back(y);
        graph[y].adj.push_back(x);
    }
    dfs(1, 0);
    for(int i = 1; i <= N; i++) H[i] = graph[i].dist, visit[i] = 0;
    int x = 1;
    for(int i = 1; i <= N; i++) if(H[x] < H[i]) x = i;
    dfs(x, 0);
    for(int i = 1; i <= N; i++) H[i] = max(H[i], graph[i].dist), visit[i] = 0;
    x = 1;
    for(int i = 1; i <= N; i++) if(H[x] < H[i]) x = i;
    dfs(x, 0);
    for(int i = 1; i <= N; i++) H[i] = max(H[i], graph[i].dist), visit[i] = 0;
    long long ans = 0;
    for(int i = 1; i <= N; i++) ans += H[i];
    printf("%.9lf\n", double(ans)/double(N));
}
int main() {
    int t;
    scanf("%d", &t);
    while(t--) solve();
}
