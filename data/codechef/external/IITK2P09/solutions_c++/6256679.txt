#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

vector <vi> adj_lis;
int dis[200009],val,ch[200009],poi;

int memoize(int u)
{
    //cout << u << endl;
    if(dis[u] != -1)
    {
        ch[u] = -1;
        return max(dis[u],val - dis[u]);
    }
    int maxi = dis[u];
    TRvi(adj_lis[u],it)
    {
      //  cout << *it << " " ;
        if(ch[*it] == -1)
        {
            ch[*it] = 1;
            maxi = max(maxi,memoize(*it));
            ch[*it] = -1;
        }
    }
    //cout << endl;
    if(maxi >= 0)
        return dis[u] = maxi + 1;
    else
        return dis[u] = -1;
}

int dfs(int i,int k)
{
    int maxi = dis[i];
    TRvi(adj_lis[i],it)
    {
        if(dis[*it] == -1)
        {
            dis[*it] = dis[i] + 1;
            int p = dfs(*it,k);
            maxi = max (maxi , p);
            if( k == 1 && p != val )
                dis[*it] = -1;
        }
    }
    return maxi;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    int t;s(t);
    while(t--)
    {
        int n;s(n);
        adj_lis.clear();
        adj_lis.resize(n + 1);
        REP(i,0,n-2)
        {
            int a,b;s(a);s(b);
            adj_lis[a].push_back(b);
            adj_lis[b].push_back(a);
        }
        memset(dis,-1,sizeof(dis));
        dis[1] = 0;
        val = dfs(1,0);
        REP(i,1,n)
        {
            if(dis[i] == val)
            {
                poi = i;
                break;
            }
        }
        memset(dis,-1,sizeof(dis));
        dis[poi] = 0;
        val = dfs(poi,0);
        memset(dis,-1,sizeof(dis));
        dis[poi] = 0;
        dfs(poi,1);
        /*REP(i,1,n)
        {
            cout << i << " " << dis[i] << endl;
        }*/
        vi deg;
        REP(i,1,n)
        {
            if(adj_lis[i].size() == 1)
                deg.push_back(i);
        }
        memset(ch,-1,sizeof(ch));
        TRvi(deg,it)
        {
            if(dis[*it] == -1)
            {
                ch[*it] = 1;
                memoize(*it);
            }
        }
        ll ans = 0;
        REP(i,1,n)
        {
 //           cout << i << " " << dis[i] << endl;
            ans += max(dis[i],val - dis[i]);
        }
        printf("%0.12lf\n",double(double(ans)/double(n)));
    }
    return 0;
}
