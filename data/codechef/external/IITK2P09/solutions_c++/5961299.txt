#include <bits/stdc++.h>

#define PB push_back
#define MP make_pair
#define LL long long
#define MAXN 202021
#define M 1000000007
#define F first
#define S second
#define sd(x) scanf("%d",&x)
#define sld(x) scanf("%lld",&x)

using namespace std;

#define N 200100

int vis[N], par[N], dep[N], ans[N], forpar[N];
vector< pair<int, int> > edg[N];
vector<int> adj[N];

inline int dfs(int x){
    vis[x] = 1;
    int i, ch;
    dep[x] = 1;
    for(i = 0; i < adj[x].size(); i++){
        ch = adj[x][i];
        if(vis[ch] == 0){
            par[ch] = x;
            dfs(ch);
            edg[x].PB(MP(dep[ch] + 1, ch));
            dep[x] = max(dep[ch] + 1, dep[x]);
        }
    }
    sort(edg[x].begin(), edg[x].end());
}

inline int dfs2(int x){
    int si, p, ma, i, ch;
    vis[x] = 1;
    si = edg[x].size();
    if(si != 0)
        ans[x] = edg[x][si - 1].F;
    else ans[x] = 0;
    p = par[x];

    if(p == 0){
        forpar[x] = 0;
    }
    else{
        ma = 0;
        for(i = edg[p].size() - 1; i >= 0 && i >= edg[p].size() - 2 ; i--){
            if(edg[p][i].S != x){
                ma = max(edg[p][i].F, ma);
            }
        }
        forpar[x] = ma + 1;
    }
    forpar[x] = max(forpar[x], 1 + forpar[p]);
    ans[x] = max(ans[x], forpar[x]);
    for(i = 0; i < adj[x].size(); i++){
        ch = adj[x][i];
        if(vis[ch] == 0){
            dfs2(ch);
        }
    }
}

int solve(){
    int n, i, x, y;
    cin>>n;
    for(i = 1; i < n; i++){
        sd(x);
        sd(y);
        adj[x].PB(y);
        adj[y].PB(x);
    }
    par[1] = 0;
    memset(vis, 0, sizeof(vis));
    dfs(1);
    memset(vis, 0, sizeof(vis));
    for(i = 1; i <= n; i++){
        forpar[i] = 0;
    }
    memset(vis, 0, sizeof(vis));
    dfs2(1);
    memset(vis, 0, sizeof(vis));
    for(i = 1; i <= n; i++){
        adj[i].clear();
        edg[i].clear();
    }
    LL an = 0;
    for(i = 1; i <= n; i++){
        an += ans[i];
    }
    /*for(i = 1; i <= n; i++){
        cout<<ans[i]<<" ";
    }
    cout<<endl;*/
    long double ret = an;
    ret -= n;
    ret /= n;
    cout<<setprecision(6)<<fixed;
    cout<<ret<<endl;
}

int main(){

    int t;
    cin>>t;
    while(t--){
        solve();
    }
}