#include<bits/stdc++.h>
using namespace std;

#define pn(n) printf("%d\n",n)
#define pl(n) printf("%lld\n",n)
#define rn(n) scanf("%d",&n)
#define rf(n) scanf("%lf",&n)
#define rs(n) scanf("%s",n)
#define ps(n) printf("%s\n",n)
#define rl(n) scanf("%lld",&n)
#define fr(i,a,b) for(int i=(int)a; i <= (int)b; i++)
#define frr(i,a,b) for(int i=(int)a; i >= (int)b; i--)
#define ll long long int
#define us(x) unsigned x
#define pb push_back
#define vi vector<int>
#define ve(x) vector<x>
#define si set<int>
#define itv vi :: iterator
#define tve(x) vector<x> :: iterator
#define its si :: iterator
#define tse(x) set<x> :: iterator
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define log(x,y) (log(double(x))/log(double(y)))
#define log2(x) log(x,2)
#define fill(s,v) memset(s,v,sizeof(s))
#define all(s) s.begin(),s.end()
#define frs(i,s) for(its i = s.begin(); i != s.end(); i++)
#define fs(i,s,x) for(set<x> :: iterator i = s.begin(); i != s.end(); i++)
#define frv(i,v) for(itv i = v.begin(); i != v.end(); i++)
#define fv(i,v,x) for( vector<x> :: iterator i = v.begin(); i != v.end(); i++)
#define INF 2147483647
#define MOD 1000000007
#define ii pair<int,int>
#define pa(x) pair<x,x>
#define mp make_pair
bool visit[200010];
vi node[200010];
ll dist[200010];
int n;
int fnd(int nde)
{
    queue<pair<int,ll> > q;
    fill(visit,false);
    fill(dist,0);
    q.push(mp(nde,0));
    while(!q.empty())
    {
        ii z = q.front();
        q.pop();
        int cur = z.first;
        ll dst = z.second;
        dist[cur] = dst;
        visit[cur] = true;
        frv(i,node[cur])
        {
            if(!visit[*i]) q.push(mp(*i,dst+1));
        }
    }
    int ans = nde;
    fr(i,1,n)
    {
        if(dist[ans] < dist[i]) ans = i;
    }
    return ans;
}

void stval(int nde)
{
    queue<pair<int,ll> > q;
    fill(visit,false);
    q.push(mp(nde,0));
    while(!q.empty())
    {
        ii z = q.front();
        q.pop();
        int cur = z.first;
        ll dst = z.second;
        dist[cur] = max(dist[cur],dst);
        visit[cur] = true;
        frv(i,node[cur])
        {
            if(!visit[*i]) q.push(mp(*i,dst+1));
        }
    }
}

main()
{
    int t;
    int a,b;
    rn(t);
    while(t--)
    {
        rn(n);
        fr(i,0,n) node[i].clear();
        fr(i,1,n-1)
        {
            rn(a);rn(b);
            node[a].pb(b);
            node[b].pb(a);
        }
        int res = fnd(1);
        int res2 = fnd(res);
        fill(dist,0);
        stval(res);
        stval(res2);
        ll tot = 0;
       // cout << res << " "<< res2<< endl;
        fr(i,1,n) {tot = tot + dist[i]; }
        //cout << tot<< endl;
        double ans = tot/(double)n;
        printf("%.8lf\n",ans);
    }
return 0;
}
