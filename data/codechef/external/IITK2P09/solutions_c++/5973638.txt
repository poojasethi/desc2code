//Bismillahir Rahmanir Rahmeem

#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string.h>
#include <stdlib.h>
#include<map>
#include<queue>
#include<stack>
#include<utility>
#include<stdlib.h>
#include<string>
#include<set>
#include<iomanip>
#define INF 1e9
#define lld long long int
#define clr(a) memset(a,0,sizeof(a))
#define reset(a) memset(a,-1,sizeof(a))
#define act(a) memset(a,1,sizeof(a))
#define setinf(a) memset(a,0b01111111,sizeof(a));
#define FRO freopen("input.txt","r",stdin);
#define FROut freopen("output.txt","w",stdout);
#define ui unsigned int
#define came "came"
#define pii pair<int,int>
#define plii pair<long long int, int>
#define pll pair<long long,long long>
#define pic pair<int,char>
#define ninf (-1e9)-2
#define inf (1e9)+2
#include<fstream>
#include <assert.h>

#define foreach(x) for(__typeof(x.begin()) it=x.begin(); it!=x.end();it++)

using namespace std;
#define pid pair<int,double>
#define pdi pair<double,int>

#define PB push_back
#define MP make_pair
#define pri(x) printf("%d\n",x)
#define pi 3.14159265359
#define X first
#define Y second

lld dist1[200005];
lld dist2[200005];
lld dist[200005];

vector< int > v[200005];

vector< pii > zero;

bool first;

void dfs(int indx, int dep, lld *dist)
{
    dist[indx]=dep;
    if(!first && indx==0) return;
    int i;
    for(i=0;i<v[indx].size();i++)
    {
        if(dist[v[indx][i]]==-1)
        {
            dfs(v[indx][i],dep+1,dist);
        }
    }
}

int main()
{
    //FRO
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        int i,j;
        int x,y;
        for(i=0;i<n;i++)
        {
            v[i].clear();
        }
        zero.clear();
        for(i=0;i<n-1;i++)
        {
            scanf("%d %d",&x,&y);
            x--,y--;
            if(x>=n || y>=n)
            {
                break;
            }
            v[x].PB(y);
            v[y].PB(x);
        }
        reset(dist);
        first=true;
        dfs(0,0,dist);
        first=false;
        int mx=0,mxi=0;
        for(i=0;i<n;i++)
        {
            if(dist[i]>mx)
            {
                mx=dist[i];
                mxi=i;
            }
        }
        reset(dist1);
        dfs(mxi,0,dist1);
        mx=mxi=0;
        for(i=0;i<n;i++)
        {
            if(dist1[i]==-1)
            {
                dist1[i]=dist[i]+dist1[0];
            }
            if(dist1[i]>mx)
            {
                mx=dist1[i];
                mxi=i;
            }
        }

        reset(dist2);
        dfs(mxi,0,dist2);

        for(i=0;i<n;i++)
        {
            if(dist2[i]==-1)
            {
                dist2[i]=dist[i]+dist2[0];
            }
        }
        double total=0;
        for(i=0;i<n;i++)
        {
            total+=((double)max(dist1[i],dist2[i]));
        }
        total/=(1.0*n);
        printf("%.8lf\n",total);
    }
    return 0;
}
