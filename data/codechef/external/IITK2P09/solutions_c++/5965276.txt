#include<iostream>
#include<vector>
#include<cstdio>
#define maxm 400005

using namespace std;

vector<int> g[maxm];
struct node
{
    int fmax, smax;
};
node arr[maxm], ans[maxm];
int visit[maxm], up[maxm];

void dfs(int vx)
{
    int sz = g[vx].size();
    if((sz == 1 && vx != 1) || sz == 0)
    {
        arr[vx].fmax = 0;
        arr[vx].smax = -1;
        return;
    }
    int temp1 = -1, temp2 = -1;
    for(int i = 0; i < sz; i++)
    {
        if(visit[g[vx][i]] == 0)
        {
            visit[g[vx][i]] = 1;
            dfs(g[vx][i]);
            if(arr[g[vx][i]].fmax > temp1)
            {
                temp2 = temp1;
                temp1 = arr[g[vx][i]].fmax;
            }
            else
            {
                temp2 = max(temp2, arr[g[vx][i]].fmax);
            }
        }
    }
    if(temp1 >= 0)temp1++;
    if(temp2 >= 0)temp2++;
    arr[vx].fmax = temp1;
    arr[vx].smax = temp2;
}


void dfs1(int vx, int pa)
{
    int sz = g[vx].size();
    if(pa == -1)
    {
        up[vx] = 0;
    }
    for(int i = 0; i < sz; i++)
    {
        if(g[vx][i] != pa)
        {
            if(arr[vx].fmax == (arr[g[vx][i]].fmax +1))up[g[vx][i]] = max(up[vx]+1, arr[vx].smax+1);
            else up[g[vx][i]] = max(up[vx]+1, arr[vx].fmax+1);
            dfs1(g[vx][i], vx);
        }
    }
}
int main()
{
    int t;
    scanf("%d", &t);
    while(t--)
    {
        int n;
        scanf("%d", &n);
        for(int i = 0; i <= n; i++)
        {
            visit[i] = 0;
            g[i].clear();
        }
        for(int i = 1; i < n; i++)
        {
            int x, y;
            scanf("%d%d", &x, &y);
            g[x].push_back(y);
            g[y].push_back(x);
        }
        visit[1] = 1;
        dfs(1);
        dfs1(1, -1);
        //cout << endl;
        for(int i = 1; i <= n; i++)
        {
            up[i] = max(arr[i].fmax, up[i]);
            //ans1 = ans1 + (double)ans[i];
            //cout << i << " " <<arr[i].fmax << " " << arr[i].smax << endl;
        }
        double ans1 = 0.0;
        for(int i = 1; i <= n; i++)
        {
            ans1 = ans1 + (double)up[i];
            //cout << i << " " << ans[i].fmax << " " << ans[i].smax << endl;//<<arr[i].fmax << " " << arr[i].smax << endl;
        }
        ans1 = (double)(ans1 / (double)n);
        //for(int i = 2; i <= n; i++)visit[i] = 0;
        printf("%.10lf\n", ans1);



    }
}
