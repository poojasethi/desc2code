#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<vector>
#include<stack>
#include<queue>
#define ll long long 
using namespace std;
ll n,visited[201000],dist[201010],jlt[201010];
vector<ll> v[201010];
void dfs(ll node,ll count)
{
	ll u;
	queue<ll> s;
	s.push(node);
	visited[node]=1;
	dist[node]=0;
	while(!s.empty())
	{
		u=s.front();
		s.pop();
		// if(u==-1)
		// {
  //  			count++;
  //  			continue;
  //  		}
		// dist[u]=count;
		// s.push(-1);
		for(ll i=0;i<v[u].size();i++)
	 	{
	 		if(visited[v[u][i]]==0) 
	 		{
	 			dist[v[u][i]]=dist[u]+1;
	 			s.push(v[u][i]);
	 			visited[v[u][i]]=1;
	 		}
		}
	}
	// dist[node]=count;
	// for(ll i=0;i<v[node].size();i++)
	// {
	// 	if(visited[v[node][i]]==0) dfs(v[node][i],count+1);
	// }
}
int main()
{
	ll t;
	scanf("%lld",&t);
	while(t--)
	{
		scanf("%lld",&n);
		ll i,a,b;
		for(i=0;i<n;i++) 
		{
			v[i].clear();
			visited[i]=0;
		}
		for(i=0;i<n-1;i++)
		{
			scanf("%lld%lld",&a,&b);
			v[a-1].push_back(b-1);
			v[b-1].push_back(a-1);
		}
		dist[0]=0;
		dfs(0,0);
		ll node1=0;
		for(i=0;i<n;i++)
			if(dist[i]>dist[node1]) node1=i;
		memset(visited,0,sizeof(visited));
		memset(dist,0,sizeof(dist));
		dfs(node1,0);
		ll node2=node1;
		for(i=0;i<n;i++)
			if(dist[i]>dist[node2]) node2=i;
		for(i=0;i<n;i++) jlt[i]=dist[i];
		memset(visited,0,sizeof(visited));
		memset(dist,0,sizeof(dist));
		b=node2;
		dfs(b,0);
		double sum=0;
		for(i=0;i<n;i++)
		{
			if(jlt[i]>dist[i]) sum=sum+jlt[i];
			else sum=sum+dist[i];
		}
		printf("%0.10lf\n",sum/n);

		memset(visited,0,sizeof(visited));
		memset(dist,0,sizeof(dist));
	}
return 0;
}
