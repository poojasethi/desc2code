#include <bits/stdc++.h>
using namespace std;
#define MAXN 200005
struct node
{
    vector<int> adj;
}graph[MAXN];

int H[MAXN];
bool mark[MAXN];
int A[MAXN],N;
void dfs(int src,int depth)
{
    if(mark[src])return;
    mark[src] = 1;
    H[src] = depth;
    int sz = graph[src].adj.size();
    for(int i=0;i<sz;i++)
    {
        dfs(graph[src].adj[i],depth+1);
    }
}
int R()
{
    int temp = 1;
    for(int i=1;i<=N;i++)
    {
        if(H[temp]<H[i])temp = i;
    }
    return temp;
}
void CLEAR()
{
    for(int i=0;i<=N;i++)mark[i]=0;
    for(int i=0;i<=N;i++)H[i] = 0;
}
void solve()
{
    int u,v;
    scanf("%d",&N);
    memset(graph,0,sizeof(graph));
    for(int i=0;i<N-1;i++)
    {
        scanf("%d%d",&u,&v);
        graph[u].adj.push_back(v);
        graph[v].adj.push_back(u);
    }
    CLEAR();
    dfs(1,0);
    for(int i=1;i<=N;i++)A[i] = H[i];
    long long maxi = R();
    CLEAR();
    dfs(maxi,0);
    for(int i=1;i<=N;i++)A[i] = max(A[i],H[i]);
    maxi = R();
    CLEAR();
    dfs(maxi,0);
    for(int i=1;i<=N;i++)A[i] = max(A[i],H[i]);
    maxi = 0;
    for(int i=1;i<=N;i++)maxi+=A[i];
    double ans = double(maxi)/double(N);
    printf("%0.7lf\n",ans);
}
int main()
{
    int t;scanf("%d",&t);
    while(t--) solve();
}
