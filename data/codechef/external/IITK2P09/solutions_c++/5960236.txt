#include <bits/stdc++.h>
#define PB push_back
#define MP make_pair
#define LL long long
#define F first
#define S second
#define MAXN 200301
#define M 1000000007
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%I64d",&x)
using namespace std;

vector<int > v[MAXN + 1];
vector<pair<int, int > > dist[MAXN + 1];
int vis[MAXN + 1], par[MAXN + 1];
pair<int, int > ans[MAXN + 1];

inline void DFS(int i){
    vis[i] = 1;
    pair<int, int > max1, max2;
    max1 = MP(0, 0);
    max2 = MP(0, 0);
    int node, sz;
    for(int j=0;j<v[i].size();j++){
        node = v[i][j];
        if(vis[node] == -1){
            par[node] = i;
            DFS(node);
            sz = dist[node].size();
            if(dist[node][sz - 1].F + 1 >= max1.F){
                max2 = max1;
                max1.F = dist[node][sz - 1].F + 1;
                max1.S = node;
            }
            else if(dist[node][sz - 1].F + 1 >= max2.F){
                max2.F = dist[node][sz - 1].F + 1;
                max2.S = node;
            }
        }
    }
    dist[i].PB(max2);
    dist[i].PB(max1);
}

void BFS(){
    queue<int > q;
    pair<int, int > temp;
    int parent, node, j, i;

    q.push(1);
    ans[1] = *(max_element(dist[1].begin(), dist[1].end()));
    dist[1].PB(MP(0, 0));

    while(!q.empty()){
        i = q.front();
        q.pop();

        ans[i] = *(max_element(dist[i].begin(), dist[i].end()));

        parent = par[i];
        temp = MP(0, 0);
        for(j=0;j<dist[parent].size();j++){
            if(dist[parent][j].S != i){
                if(dist[parent][j].F + 1 >= temp.F){
                    temp.F = dist[parent][j].F + 1;
                    temp.S = parent;
                }
            }
        }

        dist[i].PB(temp);
        if(temp.F >= ans[i].F){
            ans[i] = temp;
        }

        for(j=0;j<v[i].size();j++){
            node = v[i][j];
            if(vis[node] == -1){
                vis[node] = 1;
                q.push(node);
            }
        }
    }
}

int main(){
    int n, t, i, j, x, y;
    LL sum;
    double f_ans;
    cin>>t;
    while(t--){
        cin>>n;
        cout<<setprecision(6)<<fixed;
        for(i=1;i<=n;i++){
            v[i].clear();
            dist[i].clear();
        }

        for(i=1;i<n;i++){
            cin>>x>>y;
            v[x].PB(y);
            v[y].PB(x);
        }

        for(i=1;i<=n;i++){
            vis[i] = -1;
        }

        DFS(1);

        for(i=1;i<=n;i++){
            vis[i] = -1;
        }

        BFS();
        sum = 0;
        for(i=1;i<=n;i++){
            sum += ans[i].F;
          //  cout<<ans[i].F<<endl;
        }
        //cout<<sum<<endl;
        f_ans = sum / (n * 1.0);
        cout<<f_ans<<endl;
    }
}
