#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;
#define maxn 2000009
typedef long long ll;

int n,best,root;
vector<int> graph[maxn] ;
int startdis[maxn],enddis[maxn],dis[maxn],visited[maxn];
void initgraph()
{
	root=0;
	for(int i=0;i<maxn;i++)
	graph[i].clear();
}

void init()
{
	best=0;
	for(int i =0;i<maxn;i++)
	{
		dis[i]=0;
		visited[i]=0;
		startdis[i]=0;
		enddis[i]=0;		
	}
}
void dfs(int n1)
{
	visited[n1] =1;
	if(best<dis[n1])
	{
	  root = n1;
	  best = dis[n1];
	}
	for(int i=0;i<graph[n1].size();i++)
	{
		int child = graph[n1][i];
		if(visited[child]==0)
		{
			dis[child] = dis[n1]+1;
			dfs(child);
		}
		
	}
	
}


void dfs1(int n1)
{
	visited[n1] =1;
	for(int i=0;i<graph[n1].size();i++)
	{
		int child = graph[n1][i];
		if(visited[child]==0)
		{
			startdis[child] = startdis[n1]+1;
			dfs1(child);
		}
		
	}
	
}

void dfs2(int n1)
{
	visited[n1] =1;
	for(int i=0;i<graph[n1].size();i++)
	{
		int child = graph[n1][i];
		if(visited[child]==0)
		{
			enddis[child] = enddis[n1]+1;
			dfs2(child);
		}
		
	}
	
}


int main()
{
	int tc;
	scanf("%d",&tc);
	while(tc--)
	{
		int u,v;
		ll sum=0;
		initgraph();
		scanf("%d",&n);
		for(int i=1;i<n;i++)
		{
			scanf("%d%d",&u,&v);
			graph[u-1].push_back(v-1);
			graph[v-1].push_back(u-1);	
		}	
		init();
		dfs(0);
		int start = root;
		
		init();
		root = start;
		best=0;
		dfs(root);
		int end = root;
		
		init();
		dfs1(start);
	
		for(int i=0;i<n;i++)
		visited[i]=0;
		dfs2(end);
	
	    ll b =(long long) n;
		for(int i=0;i<n;i++)
		{
			sum = sum + max(startdis[i] , enddis[i]);
		}
	
		//cout<<sum<<endl;
	    long double ans = (sum/(n*1.0));
		printf("%.6Lf\n",ans);
	
	}
	return 0;
}