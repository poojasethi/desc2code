#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
#define s(n) scanf("%d",&n)
#define s2(n,m) scanf("%d%d",&n,&m)
#define s3(n,m,l) scanf("%d%d%d",&n,&m,&l)
#define rep(i,n) for(int i=0;i<n;++i)
ll pwr(ll a,ll b,ll mod) {ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;
 
 
int dA[200001];
int dB[200001];
vector<int> nbrs[200001];
int maxIdx,maxDist;
int pa[200001];
void dfs(int u,int p,int d,int dist[])
{
  dist[u]=0;
  maxDist=0;
  maxIdx=u;


  pa[u]=p;
  queue<int> Q;
  Q.push(u);
  while(!Q.empty())
  {
    int u=Q.front();

    Q.pop();

    for(int i=0;i<nbrs[u].size();++i)
    {
      int v=nbrs[u][i];
      
      if(v==pa[u])
      continue;
      pa[v]=u;
      dist[v]=dist[u]+1;
      Q.push(v);

      if(dist[v]>maxDist)
      {
        maxDist=dist[v];
        maxIdx=v;
      }
    }
  }
  // dist[u]=d;
  // for(int i=0;i<nbrs[u].size();++i)
  // {
  //   int v=nbrs[u][i];
  //   if(v==p)
  //     continue;
  //   dfs(v,u,d+1,dist);
  // }
 
  // if(d>maxDist)
  // {
  //   maxDist=d;
  //   maxIdx=u;
  // }
}
int main()
{
  std::ios::sync_with_stdio(false);
  
 
  int t;
  cin>>t;
  while(t--)
  {
    int n;
    cin>>n;
    for(int i=1;i<=200000;++i)
      nbrs[i].clear();
    for(int i=0;i<n-1;++i)
    {
      int u,v;
      cin>>u>>v;
      nbrs[u].pb(v);
      nbrs[v].pb(u);     
    }
 
    maxDist=-1;
    maxIdx=-1;
    dfs(1,0,0,dA);  
 
    maxDist=-1;
    dfs(maxIdx,0,0,dA);
 
    maxDist=-1;
    dfs(maxIdx,0,0,dB);
 
    ll ans=0;
    for(int i=1;i<=n;++i)
    {
      int m=max(dA[i],dB[i]);
      ans+=m;
    }
    cout<<setprecision(10)<<fixed<<(double)ans/n<<"\n";
  } 
 
 
} 