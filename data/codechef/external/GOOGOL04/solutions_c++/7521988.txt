

/* A systematical O(N) solution of creating longest monotonically increasing subsequence by forming a sorted sequence */


#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<algorithm>

using namespace std;
typedef long long int ll;


ll a[1000001];



int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin>>n;
    int i;
    int length=1;
    ll dp_sorted[n];
    for(i=0;i<n;i++){
        cin>>a[i];dp_sorted[i]=0;}
        dp_sorted[0]=a[0];
        for(i=1;i<n;i++)
        {
            if(a[i]<dp_sorted[0])
            {
                dp_sorted[0]=a[i];
            }
            else if(a[i]>=dp_sorted[length-1])
            {
                dp_sorted[length++]=a[i];
            }
            else
            {
            int left=0;
            int right=length;
            while(right>left)
            {
            int mid=(left+right)>>1;
             if(dp_sorted[mid]>a[i])
             {
                 right=mid;
             }
             else
             {

                 left=mid+1;
             }
            }
            dp_sorted[right]=a[i];
            }}

            cout<<n-length<<endl;


             return 0;
            }
