import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;

public class Main {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static class Info
	{
		public long pref, suff, all, mid;

		public Info(long pref, long suff, long all, long mid) {
			this.pref = pref;
			this.suff = suff;
			this.all = all;
			this.mid = mid;
		}
		
		public Info(){}

		@Override
		public String toString() {
			return "Info [pref=" + pref + ", suff=" + suff + ", all=" + all
					+ ", mid=" + mid + "]";
		};
	}
	
	static void solve()
	{
		int S = ni(), n = ni(), T = ni();
		int[] a = na(S);
		Info[][] info = new Info[S][S];
		for(int i = 0;i < S;i++){
			info[i][i] = new Info(a[i], a[i], a[i], a[i]);
			for(int j = i+1;j < S;j++){
				info[i][j] = new Info(0, 0, 0, 0);
				info[i][j].all = info[i][j-1].all + a[j];
				info[i][j].pref = Math.max(info[i][j-1].pref, info[i][j].all);
				info[i][j].suff = Math.max(a[j], info[i][j-1].suff+a[j]);
				info[i][j].mid = Math.max(info[i][j-1].mid, Math.max(info[i][j].pref, info[i][j].suff));
//				tr(i, j, info[i][j]);
			}
		}
		
		SegmentTreeOverwrite st = new SegmentTreeOverwrite(n, S, info);
		for(int i = 0;i < T;i++){
			char type = nc();
			if(type == 'U'){
				int l = ni()-1, r = ni()-1, m = ni();
				st.update(l, r+1, m);
//				for(int j = 1;j < st.M;j++){
//					tr(j, st.cover[j] != st.C ? st.cover[j] % a.length : "?", st.st[j]);
//				}
//				tr(st.toArray());
			}else{
				int l = ni()-1, r = ni()-1;
				out.println(st.go(l, r+1).mid);
			}
		}
	}
	
	public static class SegmentTreeOverwrite {
		public int M, H, N;
		public int[] cover;
		public Info[] st;
		public final Info[][] info;
		public final int S;
		
		public SegmentTreeOverwrite(int n, int S, Info[][] info)
		{
			this.S = S;
			this.info = info;
			N = n;
			M = Integer.highestOneBit(Math.max(N-1, 1))<<2;
			H = M>>>1;
			cover = new int[M];
			st = new Info[M];
			for(int i = 0;i < M;i++){
				st[i] = new Info();
			}
			Arrays.fill(cover, C);
		}
		
		private void propagate(int i)
		{
			if(i >= H){
				int j = ((i-H)-cover[i])%S;
				if(j < 0)j += S;
				st[i].pref = st[i].suff = st[i].all = st[i].mid = info[j][j].pref;
			}else if(cover[i] == C){
				merge(st[2*i], st[2*i+1], st[i]);
			}else{
				int hi = Integer.highestOneBit(i);
				int left = H/hi*(i-hi);
				int right = H/hi*(i-hi+1);
				make(left, right, st[i], cover[i]);
			}
		}
		
		private void make(int left, int right, Info tar, int begin)
		{
			long o = S*1100000000L;
			if((left-begin+o)/S == (right-begin+o-1)/S){
//				tr((int)((left-begin+o)%S), (int)((right-begin+o-1)%S));
				Info fo = info[(int)((left-begin+o)%S)][(int)((right-begin+o-1)%S)];
				tar.pref = fo.pref;
				tar.suff = fo.suff;
				tar.all = fo.all;
				tar.mid = fo.mid;
			}else{
				Info L = info[(int)((left-begin+o)%S)][S-1];
				Info R = info[0][(int)((right-begin+o-1)%S)];
				long bet = (right-begin+o-1)/S-(left-begin+o)/S-1;
//				tr(left, right, tar, begin, bet);
				tar.pref = L.pref;
				if(bet > 0){
					tar.pref = Math.max(tar.pref, L.all + info[0][S-1].pref);
					tar.pref = Math.max(tar.pref, L.all + info[0][S-1].all*bet);
					tar.pref = Math.max(tar.pref, L.all + info[0][S-1].all*(bet-1) + info[0][S-1].pref);
					tar.pref = Math.max(tar.pref, L.all + info[0][S-1].all*bet + R.pref);
				}else{
					tar.pref = Math.max(tar.pref, L.all + R.pref);
				}
				tar.suff = R.suff;
				if(bet > 0){
					tar.suff = Math.max(tar.suff, R.all + info[0][S-1].suff);
					tar.suff = Math.max(tar.suff, R.all + info[0][S-1].all*bet);
					tar.suff = Math.max(tar.suff, R.all + info[0][S-1].all*(bet-1) + info[0][S-1].suff);
					tar.suff = Math.max(tar.suff, R.all + info[0][S-1].all*bet + L.suff);
				}else{
					tar.suff = Math.max(tar.suff, R.all + L.suff);
				}
				tar.all = L.all + bet * info[0][S-1].all + R.all;
				if(bet > 0){
					tar.mid = Long.MIN_VALUE;
					if(bet >= 2){
						tar.mid = Math.max(tar.mid, info[0][S-1].suff + info[0][S-1].pref);
						tar.mid = Math.max(tar.mid, info[0][S-1].suff + info[0][S-1].all * (bet-2) + info[0][S-1].pref);
					}
					tar.mid = Math.max(tar.mid, info[0][S-1].mid);
					tar.mid = Math.max(tar.mid, L.suff + info[0][S-1].pref);
					tar.mid = Math.max(tar.mid, info[0][S-1].suff + R.pref);
					tar.mid = Math.max(tar.mid, L.suff + info[0][S-1].all*bet + R.pref);
					tar.mid = Math.max(tar.mid, L.suff + info[0][S-1].all*(bet-1) + info[0][S-1].pref);
					tar.mid = Math.max(tar.mid, info[0][S-1].suff + info[0][S-1].all*(bet-1) + R.pref);
				}else{
					tar.mid = Long.MIN_VALUE;
					tar.mid = Math.max(tar.mid, L.mid);
					tar.mid = Math.max(tar.mid, R.mid);
					tar.mid = Math.max(tar.mid, L.suff + R.pref);
				}
			}
		}
		
		private Info merge(Info L, Info R, Info tar)
		{
			if(tar == null){
				tar = new Info();
			}
			tar.pref = Math.max(L.pref, L.all + R.pref);
			tar.suff = Math.max(R.suff, R.all + L.suff);
			tar.all = L.all + R.all;
			tar.mid = Math.max(Math.max(L.mid, R.mid), L.suff + R.pref);
			return tar;
		}
		
		public void update(int l, int r, int v){ update(l, r, l-v+1, 0, H, 1); }
		
		public static final int C = Integer.MIN_VALUE;
		
		private void update(int l, int r, int v, int cl, int cr, int cur)
		{
			if(l <= cl && cr <= r){
				cover[cur] = v;
				propagate(cur);
			}else{
				int mid = cl+cr>>>1;
				if(cover[cur] != C){ // back-propagate
					cover[2*cur] = cover[2*cur+1] = cover[cur];
					cover[cur] = C;
					propagate(2*cur);
					propagate(2*cur+1);
				}
				if(cl < r && l < mid){
					update(l, r, v, cl, mid, 2*cur);
				}
				if(mid < r && l < cr){
					update(l, r, v, mid, cr, 2*cur+1);
				}
				propagate(cur);
			}
		}
		
		public Info go(int l, int r){ return go(l, r, 0, H, 1); }
	
		public Info go(int l, int r, int cl, int cr, int cur){
			if(l <= cl && cr <= r){
				return st[cur];
			}else{
				if(cover[cur] != C){
					Info ret = new Info();
					make(Math.max(l, cl), Math.min(r, cr), ret, cover[cur]);
					return ret;
				}
				int mid = cl+cr>>>1;
				Info L = null, R = null;
				if(cl < r && l < mid){
					L = go(l, r, cl, mid, 2*cur);
				}
				if(mid < r && l < cr){
					R = go(l, r, mid, cr, 2*cur+1);
				}
				if(L == null)return R;
				if(R == null)return L;
				return merge(L, R, null);
			}
		}
		
		public int[] toArray()
		{
			return toArray(0, H, 1, new int[H]);
		}
		
		public int[] toArray(int cl, int cr, int cur, int[] res)
		{
			if(cur >= H){
				res[cl] = (int)st[cur].all;
			}else if(cover[cur] == C){
				int mid = cl+cr>>>1;
				toArray(cl, mid, 2*cur, res);
				toArray(mid, cr, 2*cur+1, res);
			}else{
				int begin = (cl-cover[cur])%S;
				if(begin < 0)begin += S;
				for(int i = cl;i < cr;i++, begin++){
					if(begin == S)begin = 0;
					res[i] = (int)info[begin][begin].all;
				}
			}
			return res;
		}
	}
	
	
	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	private static boolean eof()
	{
		if(lenbuf == -1)return true;
		int lptr = ptrbuf;
		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
		
		try {
			is.mark(1000);
			while(true){
				int b = is.read();
				if(b == -1){
					is.reset();
					return true;
				}else if(!isSpaceChar(b)){
					is.reset();
					return false;
				}
			}
		} catch (IOException e) {
			return true;
		}
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private static double nd() { return Double.parseDouble(ns()); }
	private static char nc() { return (char)skip(); }
	
	private static String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private static char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private static char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private static int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}
