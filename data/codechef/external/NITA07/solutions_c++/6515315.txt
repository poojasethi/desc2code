#include<iostream>
#include<utility>
#include<queue>
using namespace std;

int n, m, arr[105][105], visited[105][105], dis[105][105], move;

int dirx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
int diry[] = {-1, 0, 1, -1, 1, -1, 0, 1};

int isSafe(int i, int j)
{
	return(i>=0 && i<n && j>=0 && j<m && visited[i][j]==0 && arr[i][j]==0);
}

int bfs()
{
	int x, y;
	pair<int, int> v;
    queue<pair<int, int> > q;
    q.push(make_pair(0, 0));
    visited[0][0]=1;
    //move=0;
    while(!q.empty())
    {
        v=q.front();
        q.pop();
        x=v.first, y=v.second;
        for(int k=0; k<8; k++)
        {
            if(isSafe(x+dirx[k], y+diry[k]))
            {
            	//move++;
            	//if(x+dirx[k]==n-1 && y+diry[k]==m-1) return move;
                q.push(make_pair(x+dirx[k], y+diry[k]));
                visited[x+dirx[k]][y+diry[k]]=1;
                dis[x+dirx[k]][y+diry[k]]=dis[x][y]+1;
            }
        }
    }
    return dis[n-1][m-1];
}

int main()
{
    cin>>n;
    string s;
    for(int i=0; i<n; i++)
    {
    	cin>>s;
    	if(i==0) m = s.length();
    	for(int j=0; j<m; j++) arr[i][j] = s[j]-48;
    }
    cout<<bfs()+1;
    return 0;
}