#
# given [a, b] find number of fibonacci number in it
#

fibs = [1, 1]

def fib_in_range (a, b):
    j = len(fibs) - 1
    if fibs[j] < a:
        
        while fibs[j] < a:
            fibs.append (fibs[j] + fibs[j - 1])
            j += 1
        if fibs[j] > b:
            return -1 # no such number exists
        return fibs[j]
    else:
        
        while fibs[j] > a:
            j -= 1
            if j < 0:
                return -1 ## shouldn't be here
        if fibs[j] == a:
            return a
        if fibs[j + 1] <= b:
            return fibs[j + 1]
        return -1 # no such number exists
        
    
def n_fib_nums(a, b):
    n = 0

    f1 = fib_in_range(a, b)
    if f1 == -1:
        return n
    n += 1
    f2 = fib_in_range(f1 + 1, b)
    if f2 == -1:
        return n
    n += 1
    f3 = f1 + f2
    while f3 <= b:
        n += 1
        f1 = f2
        f2 = f3
        f3 = f1 + f2
    
    return n


if __name__ == '__main__':
    while True:
        nums = raw_input()
        a = int(nums[0: nums.find(" ")])
        b = int(nums[nums.find(" ") + 1:])
        if ((a == 0) and (b == 0)):
            break
        print n_fib_nums(a, b)

        
