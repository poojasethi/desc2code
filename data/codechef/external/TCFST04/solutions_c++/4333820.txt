#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdio>
using namespace std;
#define ps(x) push_back(x)
#define tkint(n) scanf("%d",&n)
#define getcx getchar_unlocked
 inline void inp( int &n ) 
 {
    n=0;
    int ch=getcx();int sign=1;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

    while(  ch >= '0' && ch <= '9' )
            n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    n=n*sign;
  }   
vector<int>q[2*100000+5];
int last[2*100000+5];
int d[2*100000+5],r[2*100000+5];
int main()
{
	int n,k,m;
	tkint(n);
	tkint(m);
	tkint(k);
	for(int i=1;i<=n;++i)inp(d[i]);
	for(int j=n;j>=1;--j)
	{
		if(d[j]==d[j+1])r[j]=1+r[j+1];
		else r[j]=1;
	}
	for(int i=1;i<=n;)
	{
		if(last[d[i]]!=0){q[d[i]].ps(i-last[d[i]]-1);}
		last[d[i]]=i+r[i]-1;
		q[d[i]].ps(r[i]);
		i=i+r[i];
	}
	int ans=0;
	for(int i=1;i<=m;++i)
	{
		if(q[i].size()==0)continue;
		int s=0,t=0,cost=0,sum=q[i][0];
		while(t<q[i].size() && s<q[i].size())
		{
			if(cost<=k)
			{
				ans=max(ans,sum);
				t+=2;
				sum+=q[i][t];
				cost+=q[i][t-1];
			}
			if(cost>k)
			{
				cost-=q[i][s+1];
				sum-=q[i][s];
				s+=2;
			}
		}
	}
	printf("%d\n",ans);
	return 0;
}
