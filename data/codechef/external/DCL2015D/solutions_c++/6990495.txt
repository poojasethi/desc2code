#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;
#define llu long long unsigned int
#define lli long long int
#define li long int
#define fi first
#define se second
#define pii pair<int,int>
#define pii pair<int,int>
#define pb push_back
#define vi vector<int>
#define mod 1000000007
int scan()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
li scanli()    {int ip=getchar_unlocked(),flag=1;li ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lli scanlli()    {int ip=getchar_unlocked(),flag=1;lli ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scanllu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
void print(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void printli(li n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void printlli(lli n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void printllu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}

struct comp {
    bool operator() (const pii &a, const pii &b) {
        return a.second > b.second;
    }
};

priority_queue< pii, vector<pii>, comp > Q;
vector<pii> E[1100];
vector<bool> visited(1100,0);
vector<int> dist(1100,1000000000);
vector<pii> points;

void dijkstra(int src,int dest)
{
	dist[src]=0;
	Q.push(make_pair(src,0));
	while(!Q.empty())
	{
		int u=Q.top().fi;
		Q.pop();
		if(visited[u]==0)
		{
			int len=E[u].size();
			for(int i=0;i<len;i++)
			{
				int v=E[u][i].fi;
				int w=E[u][i].se;
				if(dist[u]+w<dist[v] and visited[v]==0)
				{
					dist[v]=dist[u]+w;
					Q.push(make_pair(v,dist[v]));
				}
			}
			visited[u]=1;
		}
		if(u==dest)
			break;
	}
}

int main()
{
	int n=scan(),x1=scan(),y1=scan();
	points.pb(make_pair(0,0));
	int i,j,k;
	for(i=0;i<n;i++)
	{
		int a=scan(),b=scan();
		points.pb(make_pair(a,b));
	}
	points.pb(make_pair(x1,y1));
	for(i=0;i<n+2;i++)
	{
		for(j=i+1;j<n+2;j++)
		{
			int cost=pow((points[i].fi-points[j].fi),2)+pow((points[i].se-points[j].se),2);
			E[i].pb(make_pair(j,cost));
			E[j].pb(make_pair(i,cost));
		}
	}
	dijkstra(0,n+1);	
	cout<<dist[n+1]<<endl;
	return 0;
}