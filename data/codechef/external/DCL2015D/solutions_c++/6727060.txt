/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}

int pt[1005][2];
int dist[1005];
int visited[1005];

int cost(int i, int j)
{
	int x = (pt[i][0] - pt[j][0]);
	int y = (pt[i][1] - pt[j][1]);
	return x * x + y * y;
}

void solve()
{
	int n, x1, y1;
	s(n); s(x1); s(y1);
	//source
	pt[0][0] = 0; pt[0][1] = 0;
	//intermediate points
	for(int i = 1; i <= n; i++) {
		s(pt[i][0]); s(pt[i][1]);
	}
	//destination
	pt[n + 1][0] = x1; pt[n + 1][1] = y1;
	for(int i = 0; i <= n + 1; i++) dist[i] = INT_MAX;
	memset(visited, 0, sizeof(visited));
	dist[0] = 0;
	while(true) {
		//find node having minimum distance
		int mp = INT_MAX;
		int p;
		for(int i = 0; i <= n + 1; i++) {
			if(visited[i] == 0 && dist[i] < mp) {
				mp = dist[i];
				p = i;
			}
		}
		if(p == n + 1) {
			break;
		}
		//done with that
		visited[p] = 1;
		//updating nodes connected to p
		for(int i = 0; i <= n + 1; i++) {
			if(visited[i] == 0 && dist[i] > dist[p] + cost(p, i)) {
				dist[i] = dist[p] + cost(p, i);
			}
		}
	}
	pi(dist[n + 1]); pn;			
}

int main()
{
	int t = 1;
	//scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
