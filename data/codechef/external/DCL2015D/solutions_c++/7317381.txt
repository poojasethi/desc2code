//Copyrights of the Code reserved with chetan_shukla
#include<bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii> vpii;
#define f first
#define s second
#define mp make_pair
#define pb push_back
#define INF INT_MAX
vector< pair<int,int> > Ind;

int DIST(int x1 ,int y1 ,int x2 ,int y2)
{
	return ((x1-x2) * (x1-x2) + (y1-y2) * (y1-y2));
}

vector< vpii > Graph;
vector<int> dist,visited;             // Visited and Distance Arrays
priority_queue<pii,vpii,greater<pii> > Rec;

void Dijkstra(int s, int dest)
{

    dist[s] = 0;
    Rec.push(mp(s,dist[s]));

	while(!Rec.empty())
    {
        int Cur = Rec.top().second;
									//cout<<"Cur: "<<Cur<<endl;
        Rec.pop();

		if(visited[Cur]==0)
		{
			unsigned int siz = Graph[Cur].size();
													//cout<<"siz: "<<siz<<endl;
        	for(int i=0; i<siz; i++)
        	{
        	    int m = Graph[Cur][i].first;
        	    int l = Graph[Cur][i].second;

        	    if(dist[l]>dist[Cur]+m && visited[l]==0)
        	    {
        	        dist[l]=dist[Cur]+m;
        	        Rec.push(mp(dist[l],l));
        	    }
        	}
        	visited[Cur] = 1;                     //Mark the Current Vertex as Visited
		}
		if(Cur==dest)
            		break;
    }
}
int main()
{
    int n,i,j;
    scanf("%d",&n);
    Ind.resize(n+2);
    Graph.resize(n+2);
	dist.resize(n+2,INT_MAX);
	visited.resize(n+2,0);
    Ind[0].first = Ind[0].second = 0;

    int x1,y1;
    scanf("%d %d", &x1, &y1);
    Ind[n+1].first =x1;  Ind[n+1].second = y1;

    for(i=1; i<=n; i++)
    {
        scanf("%d %d",&Ind[i].first,&Ind[i].second);
    }

    for(i=0; i<n+2; i++)
    {
        Graph[i].clear();
    }
    for(i=0; i<n+2; i++)
	{
		for(j=i+1; j<n+2; j++)
		{
			int Cost= DIST(Ind[i].first,Ind[i].second,Ind[j].first,Ind[j].second);
			Graph[i].pb(mp(Cost,j));
			Graph[j].pb(mp(Cost,i));
		}
	}

	Dijkstra(0,n+1);

    printf("%d\n", dist[n+1]);
    dist.clear();
    visited.clear();
    for(i=0; i<n+2; i++)
    {
        Graph[i].clear();
    }

    return 0;
}
