#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>

using namespace std;

inline int scan() {
    int n = 0, ch = getchar_unlocked();

    while (ch < 48 || ch > 57)
        ch = getchar_unlocked();

    while (ch >=48 && ch <= 57) {
        n = (n<<3) + (n<<1) + ch - 48;
        ch = getchar_unlocked();
    }
    return n;
}

int compare (const void *a, const void * b)
{
    return ( *(char *)a - *(char *)b );
}

void swap (char* a, char* b)
{
    char t = *a;
    *a = *b;
    *b = t;
}

int findCeil (char str[], char first, int l, int h)
{
    int ceilIndex = l;

    for (int i = l+1; i <= h; i++)
        if (str[i] > first && str[i] < str[ceilIndex])
            ceilIndex = i;

    return ceilIndex;
}

void reverse(char str[], int l, int h)
{
    while (l < h)
    {
        swap(&str[l], &str[h]);
        l++;
        h--;
    }
}

int sortedPermutations ( char str[] , char a[])
{
    int size = strlen(str);

    qsort( str, size, sizeof( str[0] ), compare );

    int k = 0;
    bool isFinished = false;
    while ( ! isFinished )
    {
        k++;
        if (strcmp(str,a) == 0) {
            return k;
        }

        int i;
        for ( i = size - 2; i >= 0; --i )
            if (str[i] < str[i+1])
                break;

        if ( i == -1 )
            isFinished = true;
        else
        {
            int ceilIndex = findCeil( str, str[i], i + 1, size - 1 );

            swap( &str[i], &str[ceilIndex] );

            reverse( str, i + 1, size - 1 );
        }
    }
    return 0;
}

int fact(int n) {
    int r = 1;
    for (int i = 2; i <= n; i++)
        r = r * i;
    return r;
}

int main() {
    int t;
    t = scan();
    char a[11], b[11];

    while (t--) {
        scanf("%s", a);

        strcpy(b, a);

        int r = fact(strlen(a)) - sortedPermutations(a, b) + 1;

        string str = "";
        while (r > 0) {
            str = (char)((r % 26) + 64) + str;
            r = r / 26;
        }
        cout<<str<<endl;
    }
    return 0;
}
