#include<bits/stdc++.h>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define pb push_back
#define mk make_pair
#define MOD 1000000009
#define ll long long int
#define mc(B) memset(B,'\0',sizeof B)
#define mi(B) memset(B,0,sizeof B)
#define MAX 800001
#define rep(i,a,b) for(int i=(int)a;i<(int)b;i++)
#define rrep(i,a) for(int i=(int)a;i>=(int)0;i--)
#define ab(a) (a<0)?(-1*a):a
#define my_size(x) ((char*)(&x+1)-(char*)&x)

using namespace std;
inline void rdint(int &n) { n=0; char c=gc(); while(c < '0' or c > '9') c=gc(); while(c>='0' and c<='9') { n=(n<<3)+(n<<1)+c-'0'; c=gc(); }}
inline void rdlong(ll &n) { n=0; char c=gc(); while(c < '0' or c > '9') c=gc(); while(c>='0' and c<='9') { n=(n<<3)+(n<<1)+c-'0'; c=gc(); }}
inline void print(int a) { char s[20]; int i=0; do { s[i++]=a%10+'0'; a/=10; } while(a); i--; while(i>=0) pc(s[i--]); pc('\n'); }
inline void prlong(ll a) { char s[20]; int i=0; do { s[i++]=a%10+'0'; a/=10; } while(a); i--; while(i>=0) pc(s[i--]); pc('\n'); }
inline int power(int a, int b) { int x=1, y=a; while(b>0) { if(b&1) x*=y; y*=y; b/=2;} return x; }
inline int powerl(ll a, ll b) { ll x=1, y=a; while(b>0) { if(b&1) x*=y; x%=MOD; y*=y; y%=MOD; b/=2;} return x%MOD; }
inline int gcd(int a, int b) { if(!b) return a; return gcd(b, a%b); }
inline void strrev(char *s) { char t; for(int i=0, j=strlen(s)-1;i<j;i++,j--) t=*(s+i), *(s+i)=*(s+j), *(s+j)=t; }
template<typename T> int mysize(T &x) { return ((char*)(&x+1)-(char*)&x); }

const int LIM=1000010;
int flag[LIM];
inline void gensieve() { mi(flag); int i,j; flag[0] = flag[1] = 1; for(i=4;i<LIM;i+=2) flag[i]=1; 
	for (i = 3;i*i < LIM;i=i+2) if(!flag[i]) for(j=i*i;j<LIM;j=j+2*i) flag[j]=1;
}
int fact (int num)
{
    if (num <=1 )
        return 1;
    else
        return num * fact (num-1);
}
 
int find_big (char str[], int start)
{
    int x = str[start];
    int count = 0;
    int trav;
    for (trav = start + 1; *(str + trav ); trav++)
    {
        if (str[trav] > x)
            count++;
    }
    return count;
}
 
int find_rank (char str[])
{
    int len = strlen (str);
    int mul = fact (len);
 
    int trav;
    int res = 1;
    for (trav = 0; *(str + trav); trav++ )
    {
        int small = find_big (str, trav);
        mul = mul / (len - trav);
        res += mul * small;
 
    }
    return res;
 
 
}
 
void reverse (char str[])
{
    int start = 0;
    int end = strlen (str)-1;
    while (start <= end)
    {
        char temp = str[start];
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
    printf("%s\n",str);
 
}
 
void column  (int num)
{
    char str[20];
    int index = 0;
    while (num >0 )
    {
        int rem = num % 26;
        if (rem == 0)
        {
            str[index++] = 'Z';
            num = num /26 -1;
        }
        else
        {
            str[index++] = rem-1 + 'A';
            num = num /26;
        }
    }
    str[index] = '\0';
    reverse (str);
 
}
 
int main()
{
    int t;
    scanf("%d",&t);
    char *str = (char *)malloc (sizeof(char) * 10);
    while (t--)
    {
        scanf("%s",str);
        int res = find_rank (str);
        column(res);
    }
    return 0;
}