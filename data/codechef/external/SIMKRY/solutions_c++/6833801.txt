#include <iostream>
#include <climits>
#include <cmath>
#include <vector>
#include <bitset>
#include <map>
using namespace std;
bitset<10000010> bs;
vector<long long> primes,P(100006);
map<int, bool> is_prime;

void sieve(long long upper_bound) {
    bs.set();
    bs[0] = bs[1] = 0;
    for(long long i = 2; i <= upper_bound + 1; i++) {
        if(bs[i]) {
            for(long long j = i * i; j <= upper_bound + 1; j += i)
                bs[j] = 0;
            primes.push_back((int) i);
			is_prime[i] = true;
            
        }
    }
}
void pre() {
	sieve(100006);
	P[0]=P[1]=1;
	for(int i=2;i<=100005;i++) {
		if(is_prime[i]) {
			P[i]=(i*P[i-1])%1000000009;
		}
		else {
			P[i]=P[i-1];
		}
	}
}
long long pow(long long a, long long b) {
long long x = 1, y = a;
    while(b > 0) {
        if(b%2 == 1) {
            x=(x*y);
            if(x>1000000009) x%=1000000009;
        }
        y = (y*y);
        if(y>1000000009) y%=1000000009;
        b /= 2;
    }
    return x;
}
long long modInverse(long long a, long long m) {
    return pow(a,m-2);
}
int main() {
	pre();
	int t,a1,a2,ind1,ind2,ans;
	long long pro=1;
	cin>>t;
	while(t--) {
		pro=1;
		cin>>a1>>a2;
		ans=(P[a2]*modInverse(P[a1-1],1000000009))%1000000009;
		cout<<ans<<endl;
	}
	return 0;
	
}