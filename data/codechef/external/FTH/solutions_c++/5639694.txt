#include<bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
inline void putint(int n){
        int N = n, rev, count = 0;
        rev = N;
        if (!N){
            putchar_unlocked('0');
            putchar_unlocked('\n');
            return ;
        }
        while (!(rev%10)){
            count++;
            rev/= 10;
        }
        rev = 0;
        while (N) { 
            rev = (rev<<3) + (rev<<1) + N % 10;
            N /= 10;
        } 
        while (rev != 0){
            putchar_unlocked(rev % 10 + '0');
            rev /= 10;
        }
        while (count--){
            putchar_unlocked('0');
        }
    putchar_unlocked('\n');
}
vector<int> v[100001];
bool visited[100001]={0};
vector<int> ans;
void bfs(int node){
    queue<int> q;
    q.push(node);
    while(!q.empty()){
        int u=q.front();
        q.pop();
        visited[u]=1;
        int x=v[u].size();
        for(int i=0;i<x;i++){
            int child=v[u][i];
            if(!visited[child]){
                q.push(child);
                ans.push_back(child);
                visited[child]=1;
                if(child==node){
                    ans.clear();
                    return;
                }
            }
        }
    }
    
}
int main(){
    int t=scan();
    while(t--){
        for(int i=0;i<100001;i++){
            v[i].clear();
        }
        memset(visited,0,sizeof(visited));
        int n=scan(),m=scan();
        while(m--){
            int a=scan(),b=scan();
            v[a].push_back(b);
        }
        bool f=0;
        int an=0;
        for(int i=1;i<=n;i++){
            if(!visited[i]){
            memset(visited,0,sizeof(visited));
                ans.clear();
            bfs(i);
               // cout<<ans.size()<<" ";
                if(ans.size()>=n-1){
                    f=1;
                    an=i;
                   // if(i==2){
                    //printf("%d ",ans.size());
                    //} 
                    break;
                }
            }
        }
        if(f==0){
            putchar_unlocked('-');
            putchar_unlocked('1');
            putchar_unlocked('\n');
        }
        else{
            putint(an);
            
        }
        ans.clear();
    }
}