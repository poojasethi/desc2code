/*	SURENDRA KUMAR MEENA	*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <queue>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <climits>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <ctime>
using namespace std;
typedef long long int LL;
#define R(i,m,n)	for(int i=m;i>=n;i--)
#define FF(i,m,n)	for(int i=m;i<n;i++)
#define F(i,n)	FF(i,0,n)
#define S(t)	scanf("%d",&t)

char Word[55010][26],Pat[6];
int Lenw[55010],Lenw2[55010];
int val[55010][26];
int len;
int val2[6];
bool existstar[6];
bool existalpha[6];
bool existmark[6];
int totcount[6];
int qq;
int memo[25][5];
int wno;

bool WildcardMatching(){
	int ii=0,jj=0,i,j;
	while(ii<Lenw[wno] && (Pat[jj]=='?' || Pat[jj]==Word[wno][ii]))	ii++,jj++;
	if(ii==Lenw[wno]){
		if(jj<len && Pat[jj]=='*')	jj++;
		if(jj<len)	return 0;
		return 1;
	}
	if(jj==len)			return 0;
	if(Pat[jj]!='*')	return 0;
	i=ii+1;j=jj+1;
	while(ii<Lenw[wno]){
		if(!existstar[jj] && len-jj!=Lenw[wno]-ii){
			ii=i++,jj=j;
			continue;
		}
		if(!existalpha[jj]){
			if(!existstar[jj]){
				if(len-jj==Lenw[wno]-ii)	return 1;
				ii=i++,jj=j;
				continue;
			}
			if(totcount[jj]<=Lenw[wno]-ii)	return 1;
			ii=i++,jj=j;
			continue;
		}
		if(!existstar[jj] && !existmark[jj]){
			while(jj<len && Pat[jj]==Word[wno][ii])	jj++,ii++;
			if(jj==len && ii==Lenw[wno])	return 1;
			ii=i++,jj=j;
			continue;
		}
		if(memo[ii][jj]!=qq){
			memo[ii][jj]=qq;
			if(Pat[jj]=='?' || Pat[jj]==Word[wno][ii])	ii++,jj++;
			else if(Pat[jj]=='*'){
				jj++;
				if(jj<len)	i=ii+1,j=jj;
				else		return 1;
			}
			else	ii=i++,jj=j;
		}
		else{
			ii=i++;jj=j;
		}
	}
	while(Pat[jj]=='*')	jj++;
	return	jj==len;
}

int main(){
	int t,i,j,k;
	char ch;
	memset(memo,0,sizeof(memo));
	qq=1;
	scanf("%d",&t);
	while(t--){
		int n,q;
		scanf("%d%d",&n,&q);
		for(i=0;i<n;i++){
			scanf("%s",Word[i]);
			Lenw[i]=strlen(Word[i]);
		}
		memcpy(Lenw2,Lenw,sizeof(Lenw));
		sort(Lenw2,Lenw2+n);
		while(q--){
			int ans=0;
			scanf("%s",Pat);
			printf("%s ",Pat);
			len=strlen(Pat);
			for(i=0;i<len-1;i++)
				if(Pat[i]=='?' && Pat[i+1]=='*'){	Pat[i]='*';	Pat[i+1]='?';	}
			char *p=Pat+1;
			for(j=1;Pat[j];j++){
				if(Pat[j]=='*' && Pat[j]==Pat[j-1])	continue;
				*p++=Pat[j];
			}
			*p='\0';
			len=strlen(Pat);
			existstar[len]=0;
			existalpha[len]=0;
			existmark[len]=0;
			totcount[len]=0;
			for(i=len-1;i>=0;i--){
				existstar[i]=(existstar[i+1]|(Pat[i]=='*'));
				existalpha[i]=existalpha[i+1];
				existmark[i]=existmark[i+1];
				totcount[i]=totcount[i+1];
				if(Pat[i]=='?'){
					totcount[i]++;
					existmark[i]=1;
				}
				else if(Pat[i]!='*')	existalpha[i]=1;
			}
			if(existalpha[0]==false && existstar[0]==true){
				printf("%d\n",n-(lower_bound(Lenw2,Lenw2+n,totcount[0])-Lenw2));
				continue;
			}
			for(wno=0;wno<n;wno++,qq++){
				if(Pat[0]!='*' && Pat[0]!='?' && Word[wno][0]!=Pat[0])	continue;
				if(Pat[len-1]!='*' && Pat[len-1]!='?' && Word[wno][Lenw[wno]-1]!=Pat[len-1])	continue;
				if(WildcardMatching())	ans++;
			}
			printf("%d\n",ans);
		}
		puts("");
	}
	return 0;
}
