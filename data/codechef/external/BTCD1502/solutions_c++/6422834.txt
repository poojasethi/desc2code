//Bismillahir Rahmanir Rahmeem

#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string.h>
#include <stdlib.h>
#include<map>
#include<queue>
#include<stack>
#include<utility>
#include<stdlib.h>
#include<string>
#include<set>
#include<iomanip>
#define INF 1e9
#define lld long long int
#define CLR(a) memset(a,0,sizeof(a))
#define RESET(a) memset(a,-1,sizeof(a))
#define act(a) memset(a,1,sizeof(a))
#define setinf(a) memset(a,0b01111111,sizeof(a));
#define FRO freopen("input.txt","r",stdin);
#define FROut freopen("output.txt","w",stdout);
#define ui unsigned int
#define came "came"
#define pii pair<int,int>
#define plii pair<long long int, int>
#define pll pair<long long,long long>
#define pic pair<int,char>
#define ninf (-1e9)-2
#define inf (1e9)+2
#include<fstream>
#include <assert.h>
#include <bitset>

#define foreach(x) for(__typeof(x.begin()) it=x.begin(); it!=x.end();it++)

using namespace std;
#define pid pair<int,double>
#define pdi pair<double,int>

#define PB push_back
#define MP make_pair
#define pri(x) printf("%d\n",x)
#define pi 3.14159265359
#define F first
#define S second
#define vit vector<int>::iterator

int n,m;
char a[55];

lld grid[155];
lld target[155];
lld tw[55];

int main()
{
    //FRO
    tw[0]=1;
    int i;
    for(i=1;i<55;i++)
    {
        tw[i]=(tw[i-1]*2);
    }
    int t;
    scanf("%d",&t);
    while(t--)
    {
        CLR(grid);
        CLR(target);
        int i,j;
        scanf("%d %d",&n,&m);
        for(i=0;i<n;i++)
        {
            scanf("%s",a);
            for(j=0;j<m;j++)
            {
                grid[i]=(grid[i]+(tw[j])*(lld)(a[j]-'0'));
            }
        }
        for(i=0;i<n;i++)
        {
            scanf("%s",a);
            for(j=0;j<m;j++)
            {
                target[i]=(target[i]+(tw[j])*(lld)(a[j]-'0'));
            }
        }
        sort(grid,grid+n);
        sort(target,target+n);
        int res=1e9;
        for(i=0;i<n;i++)
        {
            lld v=grid[i]^target[0];
            for(j=0;j<n;j++)
            {
                grid[j]^=v;
            }
            sort(grid,grid+n);
            for(j=0;j<n;j++)
            {
                if(grid[j]!=target[j])
                {
                    break;
                }
            }
            if(j==n)
            {
                res=min(res,__builtin_popcountll(v));
            }
            for(j=0;j<n;j++)
            {
                grid[j]^=v;
            }
            sort(grid,grid+n);
        }
        if(res==1e9)
        {
            res=-1;
        }
        printf("%d\n",res);
    }
    return 0;
}
