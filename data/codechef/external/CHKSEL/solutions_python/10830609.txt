/*
	Swamy Saranam

	Date	: 15/07/2016 23:12:42
	Author	: Krishna Mohan A M
	Problem	:
	Status	:
*/
#include <bits/stdc++.h>

using namespace std;

typedef long double ld;

typedef long long ll;
typedef pair<int,int>	pii;
typedef pair<ld,ld>	pdd;
typedef vector<int> vi;
typedef vector<ld> vd;
typedef pair<ll,ll> pl;

#define FASTIO          ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define FOR(i,a,b)		for(int i=(a);i<(b);i++)
#define REP(i,n)		FOR(i,0,n)
#define SORT(v)			sort((v).begin(),(v).end())
#define UN(v)			SORT(v),(v).erase(unique((v).begin(),(v).end()),(v).end())
#define CL(a,b)			memset(a,b,sizeof a)
#define pb				push_back
#define x               first
#define y               second
#define endl            "\n"
#define sendl           " \n"

const int mod = 1000000007;
const int M  = 1e6+5;

int t;
ll n, k;
int p;
ll fact[M];
/*

    Got TLE with this method

ll nCrModDP(ll n, ll r, ll p)
{
    if(r==0)
        return 1;
    ll C[M];
    memset(C, 0, sizeof(C));
    C[0] = 1;
    for(ll i=1; i<=n; i++)
    {
        for(ll j=min(i, r); j>0; j--)
        {
            C[j] = (C[j] + C[j-1])%p;
        }
    }
    return C[r];
}
*/

ll bigMod(ll n, ll r, int p)
{
    if(r==0)
        return 1;
    if(r&1)
    {
        return (n*bigMod(n, r-1, p))%p;
    }
    else
    {
        ll tmp = bigMod(n, r>>1, p);
        return (tmp*tmp)%p;
    }
}

ll bigMod2(ll n, ll r, int p)
{
    ll t =1, a = n;
    while(r)
    {
        if(r&1)
            t = (t*a)%p;
        a = (a*a)%p;
        r>>=1;
    }
    return t;
}

void init(ll p)
{
    fact[0] = 1;
    FOR(i, 1, p)
        fact[i] = (i*fact[i-1])%p;
} 

ll nCrMod(int n, int r, int p)
{
    ll tmp = (fact[r]*fact[n-r])%p;
    ll inv = bigMod2(tmp, p-2, p);
    return (inv*fact[n])%p;
}

ll nCrModPLucas(ll n, ll r, int p)
{
    if(n==0 && r==0)
        return 1;
    int ni = n%p, ri = r%p;
    return (nCrModPLucas(n/p, r/p, p)*nCrMod(ni, ri, p))%p;
}

int cnt(ll n, int p) {
	return n < p ? 0 : cnt(n / p, p) + n / p;
}

ll lucas(ll n, ll k, int p) {
	if (n < 0 || k < 0 || n < k) return 0;
	if (n < p) return fact[n] * bigMod(fact[k] * fact[n-k] % p, p - 2, p) % p;
	return lucas(n % p, k % p, p) * lucas(n / p, k / p, p) % p;
}

int main()
{
    FASTIO
    cin>>t;
    while(t--)
    {
        cin>>n>>k>>p;
        init(p);
        int mult = cnt(n, p) - cnt(k, p) - cnt(n-k, p);
        if(mult>0)
            cout<<0<<endl;
        else
            //cout<<nCrModPLucas(n, k, p)<<endl;
            cout<<lucas(n, k, p)<<endl;
    }
    return 0;
}