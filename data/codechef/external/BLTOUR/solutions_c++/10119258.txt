#include <bits/stdc++.h>

using namespace std;

#define boost ios::sync_with_stdio(true); cin.tie(0); cout.tie(0);
#define pii pair<int,int>
#define vpii vector<pair<int,int> >
#define vvpii vector<vector<pair<int,int> > >
#define pb push_back 
#define mp make_pair
#define vi vector<int>
#define vii vector<vector<int> >
#define vppii  vector<pair<pair<int,int>,int> >
#define N 100002
#define mod 1000000007

int fact[N];
int visited[N];

void init(vi &children)
{
	int i=1;
	fact[1]=1;
	fact[0]=1;
	visited[0]=visited[1]=0;
	for(int i=2;i<N;i++)
	{
		visited[i]=0;
		fact[i]=((long long)fact[i-1]*i)%mod;
		
	}
}



void dfs(vii &adj,vi &children,int x)
{

	visited[x]=1;
	for(vi::iterator iter=adj[x].begin();iter!=adj[x].end();iter++)
	{
		if(visited[*iter]==0)
		{
			children[x]++;
			dfs(adj,children,*iter);
		}
	}
}

int main()
{
  boost;
  int t;
  cin>>t;
  while(t--)
  {
	  int n,m;
	  cin>>n;
	  m=n-1;
	  vector<int> children(n+1); // the children count for each number
	  for(int i=0;i<=n;i++)
	  	children[i]=0;
	  vii adj(n+1);
	  //init();
	  while(m--)
	  {
	    int a,b;
	    cin>>a>>b;
	    adj[a].pb(b);
	    adj[b].pb(a);
	  }
	  init(children);
	  int x;
	  cin>>x;
	  //the number we will do dfs for
	  dfs(adj,children,x);
	  //check if the graph is actuallly connected
	  int flag=0;
	  for(int i=1;i<=n;i++)
	  {
	  	if(visited[i]==0)
	  		flag=1;
	  }
	  if(flag==1)
	  {
	  	cout<<0<<endl;
	  	continue;
	  }
	  //now the graph is connected
	  long long ans=1;
	  for(int i=1;i<=n;i++)
	  {
	  	ans=(ans*fact[children[i]])%mod;
	  }
	  cout<<ans<<endl;
  }
 return 0;
}
