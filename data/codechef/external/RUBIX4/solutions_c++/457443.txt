#include<iostream>
#include<stdlib.h>
#include<list>
#include <math.h>
using namespace std;

typedef struct s{
  int val,length,pos;
}sq;



int conseq(int *arr,int n){
  int *seq;
  sq tmp;
  list<sq> sqlist;
  seq=(int *)malloc(n*sizeof(int));
  seq[n-1]=1;
  
  if(n==1) return 0;
  
  for(int i=n-2;i>=0;i--){
    if((arr[i+1]-arr[i])==1)
      seq[i]=seq[i+1]+1;
    else {
      seq[i]=1;
      tmp.val=arr[i+1];tmp.length=seq[i+1]; tmp.pos= i+1;
      sqlist.push_front(tmp);
    }
  }
  tmp.val=arr[0];tmp.length=seq[0]; tmp.pos=0;
  sqlist.push_front(tmp);
  free(seq);
  /*
    for(int i=0;i<n;i++)
    cout<<seq[i]<<" ";
    cout <<"\nNum of Sequences: "<<sqlist.size()<<endl;
  */
  int pos=0,maximum =-1,tmpmax;
  int dpos,dval;
  sq tmpseq;
  list<sq>::iterator it,jt;
  
  if(sqlist.size()==1) return 0;
  
  int rem=0;
  while(sqlist.size()!=0){
    it=sqlist.begin();
    tmpmax=(*it).length;tmpseq.val=(*it).val;tmpseq.length=(*it).length; tmpseq.pos=(*it).pos;
    sqlist.erase(it);
    if(sqlist.size()){
      for(jt=sqlist.begin();jt!= sqlist.end();){
	dpos= (*jt).pos-tmpseq.pos ;
	dval= (*jt).val-tmpseq.val ;
	if(dpos == dval) {
	  tmpmax+=(*jt).length;
	  jt=sqlist.erase(jt);
	  rem++;
	}
	else jt++;
      }
    }
    maximum=max(maximum,tmpmax);
    //cout<< "Round Complete: "<<maximum<<endl;
    
  }
  //cout<< "Maximum link seq: "<<maximum<<endl;

  return (n-maximum);
}

int main()
{
  int T,n;
  int *arr= NULL;
  int tmp;
  cin >> T;
  while(T-- >0){
    cin >> n;
    arr=(int*)realloc(arr,n*sizeof(int));
    for(int i=0;i<n;i++) 
      cin >>arr[i];
    cout<< conseq(arr,n)<<endl;
  }
}
