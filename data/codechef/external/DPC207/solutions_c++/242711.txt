#include <iostream>

using namespace std;

struct rect {
	int xll;
	int yll;
	int xur;
	int yur;
};

bool is_overlap(rect r1, rect r2) {
	if (r1.xll < r2.xur && r1.xll > r2.xll && r1.yll < r2.yur && r1.yll > r2.yll) // bottom left corner
		return true;
	if (r1.xur > r2.xll && r1.xur < r2.xur && r1.yll > r2.yll && r1.yll < r2.yur) // bottom right corner
		return true;
	if (r1.xur > r2.xll && r1.xur < r2.xur && r1.yur > r2.yll && r1.yur < r2.yur)
		return true;
	if (r1.xll < r2.xur && r1.xll > r2.xll && r1.yur > r2.yll && r1.yur > r2.yll)
		return true;
	
	// r1 inside r2
	if (r1.xll >= r2.xll && r1.yll >= r2.yll && r1.xur <= r2.xur && r1.yur <= r2.yur)
		return true;
	// r1 surrounds r2
	if (r1.xll <= r2.xll && r1.yll <= r2.yll && r1.xur >= r2.xur && r1.yur >= r2.yur)
		return true;
	
	// left edge touches
	if (r1.xll == r2.xll && r1.yll < r2.yur)
		return true;
	// right edge touches
	if (r1.xur == r2.xur && r1.yur > r2.yll)
		return true;
	// top edge touches
	if (r1.yur == r2.yur && r1.xll < r2.xur && r1.yll < r2.yur)
		return true;
	// bottom edge touches
	if (r1.yll == r2.yll && r1.xll < r2.xur && r1.yll < r2.yur)
		return true;
	
	return false;
}

rect get_overlap(rect r1, rect r2) {
	rect ol;
	if (r1.xll <= r2.xur && r1.xll >= r2.xll)
		ol.xll = r1.xll;
	else
		ol.xll = r2.xll;
	if (r1.yll <= r2.yur && r1.yll >= r2.yll)
		ol.yll = r1.yll;
	else
		ol.yll = r2.yll;
	if (r1.xur <= r2.xur && r1.xur >= r2.xll)
		ol.xur = r1.xur;
	else
		ol.xur = r2.xur;
	if (r1.yur <= r2.yur && r1.yur >= r2.yll)
		ol.yur = r1.yur;
	else
		ol.yur = r2.yur;
	return ol;
}

int main(int argc, char** argv) {
	rect r1;
	rect r2;
	rect ol;
	int tc;
	
	cin >> tc;
	
	while (tc-- > 0) {
		cin >> r1.xll >> r1.yll >> r1.xur >> r1.yur;
		cin >> r2.xll >> r2.yll >> r2.xur >> r2.yur;
		
		if (is_overlap(r1, r2)) {
			ol = get_overlap(r1, r2);
			cout << ol.xll << " " << ol.yll << " " << ol.xur << " " << ol.yur << endl;
		}
		else {
			cout << "No Overlap" << endl;
		}
	}
}