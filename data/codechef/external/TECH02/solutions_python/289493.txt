/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Saransh
 */
import java.io.*;
import java.util.*;
public class Main {

    /**
     * @param args the command line arguments
     */
    static boolean marked[];
    static int memo[];
    public static void main(String[] args) {
        // TODO code application logic here
        try
        {
            ParserLose p=new ParserLose(System.in);
            
            marked=new boolean[100001];
            memo=new int[100001];
            for(int i=1;i<100000;i++)
                find(i);
            
            int t=p.nextInt();
            while(t-->0)
            {
                int m=find(p.nextInt());
                System.out.println(m);
            }
        }
        catch(Exception e)
        {

        }
    }
    public static int find(int t)
    {
        if(t<=0)
            return 0;
        if(t==1)
        {
            marked[t]=true;
            memo[t]=t;
            return 1;
        }
        if(t==2)
        {
            marked[t]=true;
            memo[t]=t;
            return t;
        }
        if(t==3)
        {
            marked[t]=true;
            memo[t]=t;
            return 3;
        }
        if(marked[t])
            return memo[t];
        int min=Integer.MAX_VALUE;
        for(int i=1;i<=t/2;i++)
        {
            if(t%i==0)
            {
                int k=1+find(t-i);
                if(k<min)
                    min=k;
            }
        }
        marked[t]=true;
        memo[t]=min;
        return min;
    }
    public static int dig(int a)
    {
        if(a==0)
            return a;
        return a%10+dig(a/10);
    }
    public static void check(String a,String b)
    {
        char tmp1[]=a.toCharArray();
        char tmp2[]=b.toCharArray();
        if(tmp1.length!=tmp2.length)
        {
            System.out.println("NO");
            return;
        }
        Arrays.sort(tmp1);
        Arrays.sort(tmp2);
        for(int i=0;i<tmp1.length;i++)
        {
            if(tmp1[i]!=tmp2[i])
            {
                System.out.println("NO");
                return;
            }
        }
        System.out.println("YES");
    }

}

class ParserLose
{
    final private int BUFFER_SIZE = 1 << 16;
    private DataInputStream din;
    private byte[] buffer;
    private int bufferPointer,bytesRead;
    public ParserLose(InputStream in)
    {
        din=new DataInputStream (in);
        buffer=new byte[BUFFER_SIZE];
        bufferPointer=bytesRead=0;
    }
    public int nextInt() throws Exception
    {
        int ret=0;
        byte c =read();
        while(c<=' ')c=read();

        do{
            ret=ret*10+(c-'0');
            c=read();
        }while(c>' ');

        return ret;
    }
    public String nextString() throws Exception
	   {
		   StringBuffer sb=new StringBuffer("");
		   byte c = read();
		   while (c <= ' ') c = read();
		   do
		   {
			   sb.append((char)c);
			   c=read();
		   }while(c>' ');
		   return sb.toString();
	   }
	   public char nextChar() throws Exception
	   {
		   byte c=read();
		   while(c<=' ') c= read();
		   return (char)c;
	   }
    private byte read() throws Exception
    {
        if(bufferPointer==bytesRead)fillBuffer();
        return buffer[bufferPointer++];
    }
    private void fillBuffer() throws Exception
    {
        bytesRead=din.read(buffer,bufferPointer=0,BUFFER_SIZE);
        if(bytesRead==-1)buffer[0]=-1;
    }

}