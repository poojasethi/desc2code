#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define ll long long
#define pb push_back
#define mod 1000000007
 using namespace std ;


int bit[100002][2];
int maxval =100000;
int update(int idx,int val,int ty){

   while(idx<=maxval){
       bit[idx][ty]+=val;

       idx +=(idx & -idx);
   }
}

int query(int idx,int ty){

   int ans = 0;

   while(idx>0){
      ans+=bit[idx][ty];
      idx-=(idx & -idx);
   }

   return ans;
}


ll modExp(ll a,ll b,ll md){
    ll ans = 1;
    while(b){
       if(b&1)
            ans = (ans*a)%md;
        a = (a*a)%md;
        b/=2;
    }
    return ans;
}

ll inverse(ll num){
   return modExp(num,mod-2,mod);
}
ll ncr(int n,int r){

  ll num = 1;
  ll den = 1;
  int i ;
  for(i=1;i<=n;++i)
    num = (num*i)%mod;
   for(i=1;i<=n-r;++i)
    den = (den*i)%mod;
    for(i=1;i<=r;++i)
    den = (den*i)%mod;

    ll ans = num*inverse(den);
    ans%=mod;
    return ans;

}

int mark[2002];
void sieve(){

   int i,j;
   for(i=1;i<=2000;++i)
        mark[i] = 1;
   mark[1] = 0;

   for(i=2;i*i<=2000;++i){

      if(mark[i]==1){
         for(j=2;i*j<=2000;++j)
            mark[i*j] = 0;
      }
   }
}

int possible(ll maxm,ll curr,ll val){
   ll ct = 0;
   ll tmp = curr;
   while(tmp>0){
      tmp/=2;
      ct++;
   }
   if(ct-1>=val)
        return 0;

   ll big = 0;
   ll lo = curr*2;
   ll hi = curr*2+1;
   while(1){
      if(hi<=maxm){
         big+=(hi-lo+1);
         lo = lo*2;
         hi = hi*2+1;
      }else if(lo>maxm)
            break;
      else{
         big+=(maxm-lo+1);
         break;
      }
   }

   if(big>(maxm-val))
        return 1;
    return 2;
}
int main(){

int t;
ll n,m;
s(t);
while(t--){
    scanf("%lld %lld",&n,&m);
    ll lo = n;
    ll hi = 1;
    ll l = 1;
    ll h = n;
    while(l<=h){
       ll mi = (l+h)/2;
       if(possible(n,mi,m)==0){
          h = mi - 1;
       }else if(possible(n,mi,m)==1){
          l = mi + 1;
       }else{
          lo = mi;
          h = mi - 1;
       }
    }

    l = 1;
    h = n;
    while(l<=h){
       ll mi = (l+h)/2;
       if(possible(n,mi,m)==0){
          h = mi - 1;
       }else if(possible(n,mi,m)==1){
          l = mi + 1;
       }else{
          hi = mi;
          l = mi + 1;
       }
    }
    //cout<<lo<<" "<<hi<<endl;
    printf("%lld\n",hi - lo + 1);
}
return 0;
}
