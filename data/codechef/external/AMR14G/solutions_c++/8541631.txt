#include <bits/stdc++.h>
using namespace std;
 
#define ll long long
#define rep(i,n) for(int i=0; i<(n); i++)
#define forn(i,a,b) for(int i=(a); i<=(b); i++)
#define forb(i,a,b) for(int i=(a); i>=(b); i--)
 
#define DBG 1
#define debug(x) if (DBG) {cerr << #x << " : " << x << endl; }
#define debug2(x, y) if (DBG) {cerr << #x << " : " << x << " :: " << #y << " : " << y << endl; }
#define debug3(x, y, z) if (DBG) {cerr << #x << " : " << x << " :: " << #y << " : " << y << " :: " << #z << " : " << z << endl; }
 
#define pb push_back
#define mp make_pair
#define pi pair<int, int>
#define pl pair<ll, ll>
#define VI vector<int>
#define VII vector<VI >
#define VL vector<ll>

#define all(x) x.begin(), x.end()
#define max(a,b) ((a) > (b)) ? (a) : (b)
#define min(a,b) ((a) < (b)) ? (a) : (b)

#define si(x) scanf("%i", &x)
#define sd(x) scanf("%lf", &x)


ll solve()
{
	ll n,m;
	cin >> n >> m;

	int depth = 0;
	ll x = n;
	while(x)
	{
		depth++;
		x>>=1;
	}

	depth--;

	ll positions = 0;
	rep(i, depth + 1)
	{
		if (m < i+1) break;

		ll level = 1LL<<i;
		if (i == depth)
		{
			positions += (n - level + 1);
			// debug3(i, positions, level);
			break;
		}


		// positions += binarySearch(i, n, m, 0, level);
		
		// ll start = 0, last = level - 1;

		ll heapsize = (1LL<<(depth - i + 1)) - 1;
		
		ll incompleteHeapIndex = n>>(depth - i);

		if (n-m+1 >= heapsize) positions += incompleteHeapIndex - level;
		// debug3(i, positions, heapsize);

		heapsize = (heapsize/2) + 1;
		ll firstNumber = incompleteHeapIndex*heapsize;
		// ll lastNumber = (incompleteHeapIndex + 1)*heapsize - 1;
		heapsize += (n - firstNumber + 1);
		heapsize--;
		if (n-m+1 >= heapsize) positions ++;
		// debug3(i, positions, heapsize);

		heapsize = (1LL<<(depth - i)) - 1;
		if (n-m+1 >= heapsize) positions += 2*level - incompleteHeapIndex - 1;

		// debug3(i, positions, heapsize);
	}



	return positions;
}

int main()
{
	int t;
	si(t);

	while(t--)
	{
		cout << solve() << endl;
	}
}
