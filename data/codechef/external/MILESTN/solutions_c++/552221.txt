// https://www.spoj.pl/problems/CANDYSTN/
// candystn

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <map>

using namespace std;

typedef long long ll;

int main()
{
		 int t;
		 scanf("%d",&t);
		 while(t--)
		 {
					  int n, m;
					  scanf("%d%d",&n,&m);
					  vector<ll> bag, coll;
					  int x[m];
					  for(int i = 0; i < m; ++i)scanf("%d",&x[i]);
					  // initially
					  bag.push_back(n); coll.push_back(0);
					  // operations
					  for(int i = 1; i < m; ++i)
					  {
								 int a1 = x[i - 1]; // previous milestone
								 int a2 = x[i]; // present milestone
								 if(a1 > a2)
								 {
										 ll diff = a1 - a2;
										 ll col_prev = coll[coll.size() - 1];
										 ll bag_prev = bag[bag.size() - 1];
										 // remove from the collection add to the bag
										 coll.push_back(col_prev - diff);
										 bag.push_back(bag_prev + diff);
				  		 		 }
				  		 		 if(a1 < a2)
				  		 		 {
										 ll diff = a2 - a1;
										 ll col_prev = coll[coll.size() - 1];
										 ll bag_prev = bag[bag.size() - 1];
										 // remove from the bag and add it to the collection
										 coll.push_back(col_prev + diff);
										 bag.push_back(bag_prev - diff);
					  		  	 }
					  		  	 if(a1 == a2)
					  		  	 {
										 ll col_prev = coll[coll.size() - 1];
										 coll.push_back(col_prev - 1);
				  		 	 	 }
	  			 	  }
	  			 	  bool flag = false;
					  ll min_bag = n;
					  for(int i = 0; i < bag.size(); i++)
					          {
								  	  if(bag[i] < 0){flag = true;break;}
									  if(bag[i] < min_bag)min_bag = bag[i];
								 }
					  if(flag){printf("-1\n");continue;}
					  ll min = 0;
					  for(int i = 0; i < coll.size(); ++i)
					  {
								 if(coll[i] < min)min = coll[i];
	  			 	  }
					  ll ans = (ll)abs(min) + 1;
					  if(ans <= min_bag)printf("%lld\n", ans);
					  else printf("-1\n");
	  	 }
	  	 return 0;
}

