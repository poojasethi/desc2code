/*
_____________________________________________________________
|  ____  |  |  ____  |  |___   ____|   |  ____  |   |__  __| |
|  |  |  |  | |    | |      | |        | |    | |      | |   |
|  |  |  |  | |    | |      | |        | |    | |      | |   |
|  |__|  |  | |    | |      | |        | |    | |      | |   |
|    ____|  | |____| |      | |        | |____| |      | |   |
|    \      |  ____  |      | |        |  ____  |      | |   |
| |\  \     | |    | |   _  | |        | |    | |      | |   |
| | \  \    | |    | |  | \_/ |        | |    | |      | |   |
|_|__\__\___|_|____|_|__\_____|________|_|____|_|______|_|___|
*/
#include<bits/stdc++.h>
#define mp make_pair
#define pb push_back
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
const int N = 2001;
const int Z = 21;
int t,n,z;
int arr[N];
int rnd(int n){
	if(n%10<5){
		return n-(n%10);
	}
	return (n+10)-(n%10);
}
int memoize[N][Z];
int solve(int pos,int left){
	if(left<0){
		return 999999999;
	}
	if(pos>n){
		return 0;
	}
	if(memoize[pos][left]!=-1){
		return memoize[pos][left];
	}
	int sum=0;
	int ret=999999999;
	for(int i=pos;i<=n;++i){
		sum+=arr[i];
        ret = min (ret , rnd(sum) + solve(i+1,left-1));
	}
	return memoize[pos][left]=ret;
}
int main(){
	t=1;
	while(t--){
		memset(memoize,-1,sizeof(int)*N*Z);
		n=scan(),z=scan();
		for(int i=1;i<=n;++i){
			arr[i]=scan();
		}
		int ans = solve(1,z+1);
		printf("%d\n",ans);
	}
}