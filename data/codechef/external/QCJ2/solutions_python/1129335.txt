#!/usr/bin/env python
MAXN = 26

parent = [0] * MAXN
rank   = [0] * MAXN

def UF_MakeSet():
    for x in xrange(MAXN):
        parent[x] = x
        rank[x]   = 0

def UF_Union(x, y):
    xRoot = UF_Find(x)
    yRoot = UF_Find(y)
    if   xRoot == yRoot:
         return
    if   rank[xRoot] < rank[yRoot]:
         parent[xRoot] = yRoot
    elif rank[xRoot] > rank[yRoot]:
         parent[yRoot] = xRoot
    else:
         parent[yRoot] = xRoot
         rank[xRoot]  += 1

def UF_Find(x):
    if parent[x] != x:
       parent[x] = UF_Find(parent[x])
    return parent[x]

def isABconnected(G, e):
    UF_MakeSet()
    for i in xrange(len(G)):
        if i == e: continue
        x = ord(G[i][0])-ord('A')
        y = ord(G[i][1])-ord('A')
        UF_Union(x, y)
    return UF_Find(0) == UF_Find(1)

def main():
    G = []
    while True:
        R = raw_input().strip()
        if R == 'END': break
        G += [R]
    N = 0
    for i in xrange(len(G)):
        if not isABconnected(G, i):
           print G[i]
           N += 1
    if not N:
       print 'Too Bad, We Lose'

main()

