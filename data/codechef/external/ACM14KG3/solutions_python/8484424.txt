#include<bits/stdc++.h>
#define itn int
using namespace std;
typedef long long ll;
int mod = 1e9 + 7 ;
int powmod(ll a,int b) {ll res=1;if(a>=mod)a%=mod;for(;b;b>>=1){if(b&1)res=res*a;if(res>=mod)res%=mod;a=a*a;if(a>=mod)a%=mod;}return res;}
ll gcd(ll a , ll b){return b==0?a:gcd(b,a%b); }
int main()
{
	//ios_base::sync_with_stdio(false);cin.tie(0);
	int p,i,j,m,n,l,k;
	char s[10010],t[11010],temp[10];
	set<char> mys[100];
	//freopen ("output.txt","w",stdout);
	//freopen ("input.txt","r",stdin);
	cin>>p;
	int mat[30][30];
	while(p--)
	{
		cin>>s>>t;
		for(i=0;i<30;i++)
			mys[i].clear();
		memset(mat,0,sizeof(mat));
		cin>>m;
		for(i=0;i<m;i++)
		{
			cin>>temp;
			mat[temp[0]-97][temp[3]-97]=1;
		}
		if(strlen(s)!=strlen(t))
			cout<<"NO\n";
		
		else
		{
			
			for (k = 0; k < 27; k++)
    {
        // Pick all vertices as source one by one
        for (i = 0; i < 27; i++)
        {
            // Pick all vertices as destination for the
            // above picked source
            for (j = 0; j < 27; j++)
            {
                // If vertex k is on a path from i to j,
                // then make sure that the value of reach[i][j] is 1
                mat[i][j] = mat[i][j] || (mat[i][k] && mat[k][j]);
            }
        }
    }
			l=strlen(s);
			int flag=0;
			for(i=0;i<l;i++)
			{
				if(s[i]==t[i]) continue;
			//	cout<<mat[s[i]-97][t[i]-97]<<endl;
				if(mat[s[i]-97][t[i]-97]==0)
				{
					flag=1; break;
				}
			}
			if(flag==1)
				cout<<"NO\n";
			else cout<<"YES\n";
		}
	}
}
