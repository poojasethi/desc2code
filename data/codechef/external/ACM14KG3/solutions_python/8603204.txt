#include<bits/stdc++.h>

#define PB push_back
#define MP make_pair
#define F first
#define S second

#define RI(a) scanf("%d",&a);
#define RIL(a) scanf("%lld",&a);
#define PI(a) printf("%d\n",a);
#define PIL(a) printf("%lld\n",a);

#define SZ(a) (int)(a.size())

#define SET(a,b) memset(a,b,sizeof(a))

#define TR(a,t) for(__typeof(a.begin()) it=a.begin();it!=a.end();it++)

#define REP(i,l,h) for(int i=(l); i<=(h);i++)
#define REPD(i,h,l) for(int i=(h);i>=(l);i--)

#define ALL(a) a.begin(),a.end()

#define DRT()  int t; cin>>t; while(t--)

#define PRSNT(a,e) (a.find(e) != a.end())

#define MINH priority_queue<int, vector<int>, greater<int> >

#define trace1(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define N 27
#define MOD 1000000007

typedef long long LL;

using namespace std;

string a,b;
vector<int> v[N];
int n,m;
int visited[N];
int found=0;
void dfs(int s,int target) {
        if(visited[s]==1)
                return;
        visited[s] = 1;
        if(s==target)
        {
                found=1;
                return;
        }
        TR(v[s],it) 
                if(!visited[*it])
                        dfs(*it, target);
}

void scan_undirected_unweighted_graph() {
                cin>>m;
                string temp;
                REP(i,0,25) v[i].clear();
                int v1,v2;
                REP(i,0,m-1) {
                        cin>>temp;
                        v[temp[0]-'a'].PB(temp[3]-'a');
                }
}

int main()
{
        int m, la, flag, lb;
        string temp;
        char tt;
        DRT() {
                flag = 0;
                cin>>a>>b;
                la = SZ(a);
                lb = SZ(b);
                
                scan_undirected_unweighted_graph();

                if(la != lb) { 
                        cout<<"NO\n";
                        continue;
                }
                int k;
                REP(i,0,la-1) {
                        //     trace2(a[i],b[i]);
                        if(a[i] == b[i]) continue;
                        else {
                                k=0;
                                found=0;
                                SET(visited,0);
                                dfs(a[i]-'a', b[i]-'a');
                                if(found==0) flag=1;
                        }
                }
                if(flag == 1) cout<<"NO\n";
                else cout << "YES\n";       
        }
        return 0;
}
