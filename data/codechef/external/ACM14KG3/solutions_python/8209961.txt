/*path matrix using warshall's algorithm */
#include<stdio.h>
#include<string.h>
#define max 26
int adj[max][max];
int temp[max][max];
char s[1004],t[1004];
int n;
void create_graph()
{
    int k;
    char d[5];
    scanf("%s %s",s,t);
    scanf("%d",&n);
    for(k=0;k<n;k++)
    {
        scanf("%s",d);
        adj[d[0]-'a'][d[3]-'a']=1;
        temp[d[0]-'a'][d[3]-'a']=1;
    }
}
void pow(int k)
{
    int i,j,tt[max][max];
    for(i=0;i<max;i++)
    for(j=0;j<max;j++)
    {
        {
            if(temp[i][j]==1)
                tt[i][j]=1;
            else
            {
                if((temp[i][k]==1)&&(temp[k][j]==1))
                    tt[i][j]=1;
                else
                    tt[i][j]=0;
            }
        }
    }
    for(i=0;i<max;i++)
    {
        for(j=0;j<max;j++)
        {
            temp[i][j]=tt[i][j];
        }
    }
}
int main()
{
    int i,j,p,l,x,m;
    scanf("%d",&m);
    while(m--)
    {
        for(i=0;i<max;i++)
        for(j=0;j<max;j++)
        {
            adj[i][j]=0;
            temp[i][j]=0;
        }
        create_graph();
        l=strlen(s);
        x=strlen(t);
        if(l!=x)
            printf("NO\n");
        else
        {
            for(p=0;p<max;p++)
            {
                pow(p);
            }
            for(i=0;i<l;i++)
            {
                if((temp[s[i]-'a'][t[i]-'a']!=1)&&(s[i]!=t[i]))
                {
                    printf("NO\n");
                    break;
                }
            }
            if(i==l)
                printf("YES\n");
        }
    }
    return 0;
}
