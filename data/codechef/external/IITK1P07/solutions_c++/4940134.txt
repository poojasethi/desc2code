/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
struct debugger{template<typename T> debugger& operator,(const T& v){cerr<<v<<" ";return *this;}}dbg;
#define db(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)
#define s(n) scanf("%lld",&n);
#define ll long long
void gentests()
{
    ofstream file;
    file.open("in");
    int test=1000;
    file<<test<<endl;
    while(test--)
    {
        ll n=rand();
        n*=rand();
        ll m=rand();
        m*=rand();
        ll x=rand();
        x*=rand();
        file<<x<<" "<<m<<" "<<n<<endl;
    }
    file.close();
}
inline ll mulmod(ll a,ll b,ll c)
{
    if(a==0||b==0)
        return 0;
    ll hh=LLONG_MAX/a;
    if(hh>b)
        return (a*b)%c;
    ll x=0,y=a%c;
    while(b>0)
    {
        if(b&1)
        {
            x=(x+y);
            if(x>=c) x-=c;
        }
        y=(y<<1);
        if(y>=c) y-=c;
        b=b>>1;
    }
    return x;
}
vector<ll> powers;
long long modpow(long long n,long long p,long long mod)
{
    long long ret=1;
    int i=1;
    while(p>0)
    {
        if(p&1)
        {
            ret=mulmod(powers[i],ret,mod);
            if(ret>=mod)
                ret%=mod;
        }
        i++;
        p>>=1;
    }
    return ret;
}
ll sum(ll x,ll m,ll n)
{
    if(m==0)
        return 0;
    if(m==1)
        return 1;
    if(!(m&1))
    {
        ll s=sum(x,m/2,n);
        ll ret=s;
        ret+=mulmod(modpow(x,m/2,n),s,n);
        if(ret>=n)
            ret%=n;
        return ret;

    }
    else
    {

        ll s=sum(x,m/2,n);
        ll ret=s;
        ll t=modpow(x,m/2,n);
        ret+=mulmod(t,s,n);
        ret+=mulmod(t,t,n);
        if(ret>=n)
            ret%=n;
        return ret;
    }
}
int main()
{
    //gentests();
    //freopen("in","r",stdin);
    //clock_t start=clock();

    ll test;cin>>test;
    while(test--)
    {
        ll x,m,n;
        s(x);s(m);s(n);
        powers.assign(70,0);
        powers[0]=1;
        powers[1]=x;
        for(ll i=2;i<70;i++)
            powers[i]=mulmod(powers[i-1],powers[i-1],n);
        m++;
        printf("%lld\n",sum(x,m,n));
    }
    //clock_t end=clock();
    //cout<<(end-start)/double(CLOCKS_PER_SEC)<<endl;

    return 0;
}

