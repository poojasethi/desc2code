// Program for the CANDYPK problem
// Combinatorics - Composition(Weak Composition)

#include <iostream>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#define MOD 1000000007

using namespace std;
typedef long long LL;

// Calculates (a^b) % MOD
LL powerMod(LL a, LL b)
{
  LL p = 1;

  while(b)
  {
    if(b % 2) p = LL(p) * a % MOD;
    if(b /= 2) a = LL(a) * a % MOD;
  }

  return p;
}

// Calculates nCr % MOD using Chinese Remainder Theorem result
LL nCr(LL n1, LL r1)
{
  LL a, b, x, result;
  
  result = a = b = 1;
  for(LL i = 1; i <= r1; i++)
  {
    a = (a * (n1 - r1 + i)) % MOD;
    b = (b * i) % MOD;
  }

  x = powerMod(b, MOD - 2);
  result = (a * x) % MOD;
  return result;
}
//

int main()
{
  long n, m, k;
  long s, r;
  int temp1, temp2;
  long ans;

  scanf("%ld %ld %ld", &n, &m, &k);
  s = 0;
  for(LL i = 0; i < k; i++)
  {
    scanf("%d %d", &temp1, &temp2);
    s += temp2;
  }

  // # of remaining balls required
  r = n - s;

  // # of integral solutions for the eqn. x1 + x2 + .... + xm = r
  // (r + m - 1)C(m - 1)
  if(r == 0) ans = 1;
  else if(r < 0) ans = 0;
  else ans = nCr(r + m - 1, m - 1);

  printf("%ld\n", ans);

  return 0;
}