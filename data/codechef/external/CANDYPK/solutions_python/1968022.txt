// Program for the CANDYPK problem
// Combinatorics - Composition(Weak Composition)

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#define MOD 1000000007

using namespace std;

// Function to find nCr
int countFact(int n1, int p)
{
  int k1 = 0;
  while(n1 > 0)
  {
    k1 += n1 / p;
    n1 /= p;
  }

  return k1;
}
 
// Calculates (a^b) % MOD
long long powerMod(int a, int b)
{
  long long x = 1, y = a;

  while(b > 0)
  {
    if(b % 2 == 1)
    {
      x = (x * y);
      if(x > MOD) x %= MOD;
    }
    y = (y * y);
    if(y > MOD) y %= MOD;
     b /= 2;
  }

  return x;
}

// Calculates nCr
long long nCr(int n1, int r1)
{
  long long result = 1;
  int *isPrime;

  // Initialize
  isPrime = (int*)malloc(n1 * sizeof(int));
  for(int i = 2; i <= n1; i++)
   isPrime[i] = 1;

  for(int i = 2; i <= n1; i++)
   if(isPrime[i])
   {
     for(int j = 2 * i; j <= n1; j += i)
      isPrime[j] = 0;
     int k1 = countFact(n1, i) - countFact(r1, i) - countFact(n1 - r1, i);
     result = (result * powerMod(i, k1)) % MOD;
   }

  return result;
}
//

int main()
{
  int n, m, k;
  int s, r;
  int temp1, temp2;
  long long ans;

  scanf("%ld %ld %ld", &n, &m, &k);
  s = 0;
  for(int i = 0; i < k; i++)
  {
    scanf("%d %d", &temp1, &temp2);
    s += temp2;
  }

  // # of remaining balls required
  r = n - s;

  // # of integral solutions for the eqn. x1 + x2 + .... + xm = r
  // (r + m - 1)C(m - 1)
  if(r == 0) ans = 1;
  else if(r < 0) ans = 0;
  else ans = nCr(r + m - 1, m - 1);

  printf("%lld\n", ans);

  return 0;
}