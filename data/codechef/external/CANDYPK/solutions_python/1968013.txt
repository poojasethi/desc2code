    #include <iostream>
    #include <cstdio>
    #include <algorithm>
    #include <string>
    #include <vector>
    #include <map>
    #include <set>
     
    using namespace std;
     
    #define MODULUS 1000000007
    /*
    long long pow(int a, int b, int MOD)
    {
    long long x=1,y=a;
    while(b > 0)
    {
    if(b%2 == 1)
    {
    x=(x*y);
    if(x>MOD) x%=MOD;
    }
    y = (y*y);
    if(y>MOD) y%=MOD;
    b /= 2;
    }
    return x;
    }
     
    /* Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
    /*
    long long InverseEuler(int n, int MOD)
    {
    return pow(n,MOD-2,MOD);
    }
     
    long long C(int n, int r, int MOD)
    {
    vector<long long> f(n,1);
    for (int i=2; i<=n;i++)
    f[i]= (f[i-1]*i) % MOD;
    return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
    }
    */
    /*
    long long C(int n, int r, int MOD)
    {
    vector< vector<long long> > C(2,vector<long long> (r+1,0));
     
    for (int i=0; i<=n; i++)
    {
    for (int k=0; k<=r && k<=i; k++)
    if (k==0 || k==i)
    C[i&1][k] = 1;
    else
    C[i&1][k] = (C[(i-1)&1][k-1] + C[(i-1)&1][k])%MOD;
    }
    return C[n&1][r];
    }
     
    long long C(int n, int r)
    {
    if (r==0) return 1;
    else return (C(n-1,r-1) * n / r)%MODULUS;
    }
    */
     
    int countFact(int n, int p)
    {
    int k=0;
    while (n>0)
    {
    k+=n/p;
    n/=p;
    }
    return k;
    }
     
    /* This function calculates (a^b)%MOD */
    long long pow(int a, int b, int MOD)
    {
    long long x=1,y=a;
    while(b > 0)
    {
    if(b%2 == 1)
    {
    x=(x*y);
    if(x>MOD) x%=MOD;
    }
    y = (y*y);
    if(y>MOD) y%=MOD;
    b /= 2;
    }
    return x;
    }
     
    long long C(int n, int r, int MOD)
    {
    long long res = 1;
    vector<bool> isPrime(n,1);
    for (int i=2; i<=n; i++)
    if (isPrime[i])
    {
    for (int j=2*i; j<=n; j+=i)
    isPrime[j]=0;
    int k = countFact(n,i) - countFact(r,i) - countFact(n-r,i);
    res = (res * pow(i, k, MOD)) % MOD;
    }
    return res;
    }
     
    int main()
    {
    int t,i;
    // scanf("%d", &t);
    // while ( t-- ) {
    // cout << C(5,1,MODULUS) << endl;
     
    int n,m,k,x,y;
    int min = 0;
    scanf("%d %d %d", &n, &m, &k);
    for ( i = 0; i < k; ++i ) {
    scanf("%d %d", &x, &y);
    min += y;
    }
    int total = n - min;
    if ( total < 0 ) {
    printf("0\n");
    return 0;
    }
    int C1 = total + m - 1;
    int C2 = m - 1;
    printf("%lld\n", C(C1,C2,MODULUS));
     
    // }
    return 0;
    } 