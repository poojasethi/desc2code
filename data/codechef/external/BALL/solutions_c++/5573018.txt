#include<bits/stdc++.h>
using namespace std;
 
#define LET(x, a)  __typeof(a) x(a)
#define TR(v, it) for(LET(it, v.begin()); it != v.end(); it++)
#define si(x) scanf("%d",&x)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define MOD 1000000007
#define SET(x,y) memset(x,y,sizeof(x));
#define LL long long int
#define ULL unsigned LL
#define PII pair<int, int>
 
int t, n;
LL x[100], y[100], s[100];
double r[300];
double sq(double a) {
    return a * a;
}
bool inters(int i, int j, double ix[2], double iy[2]) {
    double a = x[j] - x[i];
    double b = y[j] - y[i];
    double c = (sq(r[i]) - sq(x[i]) - sq(y[i]) - 
                (sq(r[j]) - sq(x[j]) - sq(y[j]))) / 2;
    double d = sqrt(sq(a) + sq(b));
    if (!(abs(r[i] - r[j]) <= d && abs(r[i] + r[j]) >= d))
        return false;
    if (d == 0) {
        return false;
    }
    a /= d;
    b /= d;
    c /= d;
    double e = c - a * x[i] - b * y[i];
    if (r[i] < e) 
        return false;
    double h = sqrt(sq(r[i]) - sq(e));
    ix[0] = x[i] + a * e - h * b;
    iy[0] = y[i] + b * e + h * a;
    ix[1] = x[i] + a * e + h * b;
    iy[1] = y[i] + b * e - h * a;
    return true;
}
double dist(pair<double, double> a, pair<double, double> b) {
    return sqrt(sq(b.first - a.first) + sq(b.second - a.second));
}
int main() {
    int i;
    cin >> t;
    while (t--) {
        cin >> n;
        for (i = 0; i < n; i++) {
            scanf("%Ld %Ld %Ld", &x[i], &y[i], &s[i]);
        }
        double lb = 0, ub = 1e18, mid;
        int iters = 300;
        while (iters--) {
            mid = (lb + ub) / 2;
            for (i = 0; i < n; i++) {
                r[i] = mid * s[i];
            }
            vector<pair<double, double> > pts;
            int j;
            double ix[2], iy[2];
            for (i = 0; i < n; i++) {
                pts.PB(MP(x[i], y[i]));
                for (j = i + 1; j < n; j++) {
                    if (inters(i, j, ix, iy)) {
                        pts.PB(MP(ix[0], iy[0]));
                        pts.PB(MP(ix[1], iy[1]));
                    }
                }
            }
            for (i = 0; i < (int)pts.size(); i++) {
                for (j = 0; j < n; j++) {
                    if (dist(MP(x[j], y[j]), pts[i]) > r[j] + 1e-6)
                        break;
                }
                if (j == n) {
                    break;
                }
            }
            if (i == (int)pts.size()) {
                lb = mid;
            } else {
                ub = mid;
            }
        }
        printf("%.10lf\n", mid);
    }
    return 0;
}

