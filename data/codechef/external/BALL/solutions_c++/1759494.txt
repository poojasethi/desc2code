#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <list>
#include <map>
#include <set>
#include <utility>
#include <iostream>
#include <iomanip>
#include <string.h>

using namespace std;

typedef long long ll;
#define debug(args...) dbg(),args
#define FOR(A,B,C) for(int A=B;A<C;A++)
#define PB(A,B) A.push_back(B);
#define ALL(A) A.rbegin(),A.rend()
#define MEM(A,B) memset(A,B,sizeof(A))
#define MAX(A,B) (A > B) ? A : B
#define MIN(A,B) (A < B) ? A : B
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define LIM 100
#define MOD 100000007LL
#define INF 1000000000
#define EPS 0.0001
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

double x[51],y[51],s[51];
int n;

double func(double a,double b){
    double ans = 0,time;
    FOR(i,0,n){
        time = ((a - x[i])*(a - x[i]) + (b - y[i])*(b - y[i]))/(s[i]*s[i]);
        ans = MAX(ans,time);
        }
    return ans;
}

double g(double x){
    double lowy = -1000000, highy = 1000000,mid1,mid2;
    while(fabs((highy - lowy)) > EPS){
        mid1 = (2*lowy + highy)/3;
        mid2 = (lowy + 2*highy)/3;
        if(func(x,mid1) >= func(x,mid2))
            lowy = mid1;
        else
            highy = mid2;
    }
    //debug("Lowy is : ",lowy);
    return func(x, lowy);
}

double optimum(){
    double lowx = -1000000, highx = 1000000,mid1,mid2;
    while(fabs((highx - lowx)) > EPS){
        mid1 = (2*lowx + highx)/3;
        mid2 = (lowx + 2*highx)/3;
        if(g(mid1) >= g(mid2))
            lowx = mid1;
        else
            highx = mid2;
    }
    debug("Lowx is : ",lowx);
    return g(lowx);
}

int main (int argc, char *argv[])
{
    DBGCHECK;
    int t;
    cin >> t;
    while(t--){
        cin >> n;
        FOR(i,0,n)
            cin >> x[i] >> y[i] >> s[i];
        cout << sqrt(optimum()) << endl;    
    }   
}
