#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

#define fr(a,b,c) for(int a = b; a < c; a++)
#define rep(a,b) fr(a,0,b)
#define db if(1)
#define ln puts("")

const double eps = 1e-6;
const double pi = acos(-1);
int n;
double r[111][2];
double s[111];


bool read(){
	if(scanf("%d", &n) == EOF) return false;
	
	rep(i,n) scanf("%lf%lf%lf", &r[i][0], &r[i][1], &s[i]);
	
	return true;
}

inline double dist(double x, double y, double xx, double yy){
	return (x-xx)*(x-xx) + (y-yy)*(y-yy);
}

double getslow(double x, double y){
	double res = 0;
	
	rep(i,n){	
		double temp = dist(r[i][0], r[i][1], x, y)/(s[i]*s[i]);
		res = max(res, temp);
	}
	
	return res;
}

struct point{
	double x, y;
	double fitness;
	
	void calc(){
		fitness = getslow(x, y);
	}
	
	point (double x, double y){
		this->x = x;
		this->y = y;
		calc();
	}	
	
	point(){}
	
	bool operator < (const point & b) const{
		return fitness < b.fitness;
	}
	
	point randompoint(double k){
		double angle = ((rand()*1.0)/RAND_MAX)*(2*pi);
		
		point res = *this;
		res.x += k*cos(angle);
		res.y += k*sin(angle);
		res.calc();
		
		return res;
	}
};

point pop[11111];
int last;

void offspring(double k, int child, int maxpop){
	int oldlast = last;

	rep(i,oldlast){
		rep(j,child){
			pop[last++] = pop[i].randompoint(k);
		}
	}

	sort(pop, pop+last);
	
	last = min(maxpop,last);
}

void process2(){
	rep(i,n) pop[i] = point(r[i][0], r[i][1]);
	last = n;
			
	double k = 100000;
	double factor = 0.94;
	int child = 10;
	int maxpop = 10;
	int cont = 0;
	
	while(k > 1e-8){
		cont++;
		offspring(k, child, maxpop);
		k *= factor;
	}
	
	//printf("%d\n", cont);
	
	//printf("0 0 %lf\n", sqrt(getslow(0,0)));
	//printf("%lf %lf\n", pop[0].x, pop[0].y);
	printf("%lf\n", sqrt(pop[0].fitness));
}

int main(){
	int t = -1;
	
	scanf("%d", &t);
	
	while(t-- && read()){
		process2();
	}
	
	return 0;
}