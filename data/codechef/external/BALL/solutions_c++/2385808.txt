#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<ctime>
#include<cctype>
#include<cassert>
#include<climits>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<clocale>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<cwchar>
#include<cwctype>

//containers
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<complex>
#include<string>
#include<stack>
#include<bitset>
#include<istream>
#include<valarray>

//IOs
#include<iostream>
#include<sstream>
#include<iomanip>
#include<fstream>
#include<exception>
#include<ios>
#include<iosfwd>
#include<ostream>
#include<iterator>
#include<stdexcept>
#include<streambuf>


//algorithm & miscellaneous
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<limits>
#include<locale>
#include<memory>
#include<new>

#define ll long long
#define ull unsigned long long
#define ld double
#define mp make_pair
#define pb push_back
#define inf (ll)1e18
#define iinf (int)1e9
#define triple(a,b,c) make_pair(a,make_pair(b,c))
#define two(a,b) make_pair(a,b)
#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define psi pair<string,int>
#define pis pair<int,string>
#define pss pair<string,string>
#define vi vector<int>
#define vl vector<long long>
#define vs vector<string>
#define vc vector<char> 
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})


int dx[] = {-1,0,0,1,-1,-1,1,1};
int dy[] = {0,-1,1,0,-1,1,-1,1};
const double eps = 1e-9;

using namespace std;

int n;
ld x[51],y[51],s[51],lox,loy,hix,hiy,mx1,mx2,my1,my2,xmax,xmin,ymax,ymin;

ld g(ld x1,ld y1)
{
        ld max1 = 0.0;
        
        for(int i=0;i<n;i++)
                max1 = max(max1 , 1.0*sqrt((x1-x[i])*(x1-x[i]) + (y1-y[i])*(y1-y[i]))/(1.0*s[i]));        
                
        return max1;
}

ld f(ld mi)
{
        loy = ymin, hiy = ymax;
        
        for(int i=0;i<64;i++)
        //while(abs(hiy - loy) >= eps) 
        {
                        my1 = (loy*2 + hiy)/3.0;
                        my2 = (loy + 2*hiy)/3.0;
                        
                        if(g(mi,my1) < g(mi,my2))
                                     hiy = my2;
                        else loy = my1;              
        }
        
        return g(mi,(loy+hiy)/2.0);
}

int main()
{
          
          int t = GI;
          
          while(t--)
          {
                     n = GI;
                     
                     
                     for(int i=0;i<n;i++)
                     {
                             x[i] = GD, y[i] = GD, s[i] = GD;
                             
                             if(!i)xmax = x[i],xmin = x[i],ymax = y[i],ymin = y[i];
                             else 
                             {
                                  xmax = max(xmax,x[i]);
                                  xmin = min(xmin,x[i]);
                                  ymax = max(ymax,y[i]);
                                  ymin = min(ymin,y[i]);     
                             }
                     }
                     
                     //cout<<xmin<<" "<<xmax<<" "<<ymin<<" "<<ymax<<"\n";
                     
                     lox = xmin, hix = xmax;
                     
                     for(int i=0;i<64;i++)
                     //while(abs(hix-lox) >= eps)
                     {
                                        mx1 = (lox*2 + hix)/3.0;
                                        mx2 = (lox + 2*hix)/3.0;
                                        
                                        if(f(mx1) < f(mx2))
                                                  hix = mx2;
                                        else lox = mx1;    
                     }
                     

                     printf("%lf\n",f((lox+hix)/2.0));
                     
          }
          
          scanf("\n");
          return 0;    
}
