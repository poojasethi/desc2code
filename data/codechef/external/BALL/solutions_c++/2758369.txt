#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int max_n=55;
const double abslim=1000010.0;
const double acc=(1.0e-8);
//const double inv=4.0*abslim;

int T;
int n;
double x[max_n], y[max_n], s[max_n];

double h(double xx, double yy)
{
	double ret=0.0;

	rep(i,n)
		ret = max( ret , sqrt(((x[i]-xx)*(x[i]-xx)) + ((y[i]-yy)*(y[i]-yy)))/s[i] );

	return ret;
}

double g(double xx, double l, double r)
{
	while(r-l>acc)
	{
		double mid1=l+(r-l)/3.0;
		double mid2=l+2.0*(r-l)/3.0;

		if(h(xx,mid1)<h(xx,mid2)) r=mid2;
		else l=mid1;
	}
	return h(xx,(l+r)/2.0);
}

double f(double l, double r)
{
	while(r-l>acc)
	{
		double mid1=l+(r-l)/3.0;
		double mid2=l+2.0*(r-l)/3.0;

		if(g(mid1,-abslim,abslim) < g(mid2,-abslim,abslim)) r=mid2;
		else l=mid1;
	}
	return g((l+r)/2.0,-abslim,abslim);
}

int main()
{
	gi(T);

	rep(z,T)
	{
		gi(n);

		int cx,cy,cs;
		rep(i,n)
		{
			gi(cx); gi(cy); gi(cs);
			x[i]=(double(cx)); y[i]=(double(cy)); s[i]=(double(cs));
		}

		pdn(f(-abslim,abslim));

		//pdn(h(0.0,0.0));
	}
	
	return 0;
}