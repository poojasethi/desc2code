#ifdef ONLINE_JUDGE
#include <bits/stdc++.h>
using namespace std;
#else
#include "header.h"
#endif
#define SS(n) scanf("%s",n)
#define pn putchar_unlocked('\n')
#define ps putchar_unlocked(' ')
#define sz(s) int((s).size())
#define rep(i,n) for(int(i)=0; (i)<(n);++(i))
#define ru(i,a,b) for(int(i)=a;(i)<=(b);++(i))
#define rd(i,b,a) for(int(i)=b;(i)>=(a);--(i))
#define clr(a) memset(a,0,sizeof(a))
#define all(x) (x).begin(),(x).end()
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define tm pv1
#ifndef ONLINE_JUDGE
#include "debug.h"
#else
#define ck1
#define ck2
#define ck3
#define dir
#define show(x)
#define show2(x,y)
#define show3(x,y,z)
#define show4(x,y,z,w)
#define disp(A,init,n,m)
#endif
typedef long long LL; typedef vector <int> vi; typedef pair<int,int> pii; typedef map <int,int> mii; template <class T> inline T max(T a,T b,T c) {return (max(max(a,b),c));} template <class T> inline T min(T a,T b,T c) {return (min(min(a,b),c));} template <class T> inline T sqr(T x) {return x*x;} inline int inp() {int n=0,s=1;char p=getchar_unlocked();if(p=='-')s=-1;while((p<'0'||p>'9')&&p!=EOF&&p!='-')p=getchar_unlocked();if(p=='-')s=-1,p=getchar_unlocked();while(p>='0'&&p<='9')n=(n<<3)+(n<<1)+(p-'0'),p=getchar_unlocked();return n*s;} void out(int x){if(x<0)putchar_unlocked('-'),x=-x;int ll=0,dd[10];while(x)dd[ll++]=x%10,x/=10;if(!ll)dd[ll++]=0;while(ll--)putchar_unlocked(dd[ll]+48);} inline int ins(int x,int y,int m,int n){return (x>=1&&x<=m&&y>=1&&y<=n);} template <class T> inline T gcd(T a,T b){return (!b? a : gcd(b,a%b));} template <class T> inline T ABS(T x){return ((x)>0?(x):(-(x)));}
const int N = 1e5 + 11;

vector <int>  g[N];
int b[N], e[N], tm;

void go(int u, int p) {
  b[u] = tm++;
  for(int v:g[u]) if(v != p) go(v,u);
  e[u] = tm-1;
}

int main() {
  #ifndef ONLINE_JUDGE
    freopen("in.txt","r",stdin);
  #endif
  for(int tc=1,t=1; tc<=t; ++tc) {
    int n=inp(), qq=inp();
    int adm=inp();
    rep(i,n-1) {
      int u=inp(), v=inp();
      g[u].pb(v);
    }
    tm = 0, go(adm,-1);
    while(qq--) {
      int x=inp(), y=inp();
      if(b[y] >= b[x] && e[y] <= e[x]) puts("-1");
      else if(b[x] >= b[y] && e[x] <= e[y]) puts("1");
      else puts("0");
    }
  }
}
    
