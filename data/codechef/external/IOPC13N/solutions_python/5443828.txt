#include <vector>
#include <string>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <ctype.h>
#include <bitset>
#include <assert.h>
 
using namespace std;
 
#define REP(i, n) for(int i=0; i<(n); i++)
#define FOR(i, a, b) for(int i=(a); i<(b); i++)
#define IFOR(i, a, b) for(int i=(a); i>=(b); i--)
#define FORD(i, a, b, c) for(int i=(a); i<(b); i+=(c))
 
#define SS ({int x;scanf("%d", &x);x;})
#define SI(x) ((int)x.size())
#define PB(x) push_back(x)
#define MP(a,b) make_pair(a, b)
#define SORT(a) sort(a.begin(),a.end())
#define ITER(it,a) for(typeof(a.begin()) it = a.begin(); it!=a.end(); it++)
#define ALL(a) a.begin(),a.end()
#define INF 1000000000
#define V vector
#define S string
#define FST first
#define SEC second
typedef V<int> VI;
typedef V<S> VS;
typedef long long LL;
typedef pair<int, int> PII;
inline int bfs(int src,int dest,int graph[])
 {
 	while(true)
	{
		if(graph[src]== -1)
		return false;
		if(graph[src]==dest)
		return true;
		src= graph[src];
	}
 	
 }	
int main()
 {
 	int n,q,u,x,y;
 	scanf("%d%d%d",&n,&q,&u);
    int g[100000];
    for(int i=0;i<100000;i++) g[i]=-1;
    for(int i=0;i<n-1;i++) 
     {
       scanf("%d%d",&x,&y);
     	g[y]=x;
     }
     while(q--)
      {
        scanf("%d%d",&x,&y);
      	int k=bfs(x,y,g);
      int	k1=bfs(y,x,g);
      	if(k==1){ printf("1\n");}
      	else if(k1==1) { printf("-1\n");}
      	else { printf("0\n");}
      }
 	
 }	