#include<bits/stdc++.h>
using namespace std ;
 
int par[1000000];
int depth[101000];
vector <int> gr[101000];
int visited[101000];
void dfs(int m , int n )
{
	depth[m]=n;
	visited[m]=true; 
	for(int i=0;i<gr[m].size();i++)
	{
		if ( !visited[gr[m][i]])
			dfs(gr[m][i],n+1);
	}
}
 
int find_par(int a , int b)
{
	int m = depth[a]-depth[b] ;
	int t = a ;
	while (m--)
	{
		t = par[t] ;
		if (t==-1) break;
	}
	if ( t==b) return true ;
	else return false ;
}
int main ( )
{
	memset(par,-1,sizeof(par));
	memset(depth,0,sizeof(depth));
	memset(visited,0,sizeof(visited));
 
	int N,Q,a,b,x,y;
scanf("%d%d%d",&N,&Q,&a);
	par[a] = -1;
	for(int i=1;i<=N-1;i++)
	{
		scanf("%d",&x);
scanf("%d",&y);
		par[y]=x;
		gr[x].push_back(y) ;
	}
	
	dfs(a,0) ;
	
 
	for(int i=1;i<=Q;i++)
	{
		scanf("%d%d",&a,&b);
		if (depth[a]==depth[b]) printf("0");
		else if ( depth[a]>depth[b])
		{
			if (find_par(a,b))	printf("1");
			else 	printf("0") ;
		}
		else
		{
			if (find_par(b,a))	printf("-1");
			else 	printf("0");
		
		}
		printf("\n") ;
	}
	
	return 0 ;
}