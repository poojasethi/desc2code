#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> pii;
typedef vector<pii> vpii;
typedef vector<int> vi;
typedef map<char,int> mci;
typedef queue<int> qi;
#define ll long long
typedef vector<int> vi;
const int INF=987654321;
int u;
vi adj[100005];
int subsize[100005];
int parent[100005];
int depth[100005];
void dfs(int u,int pre,int _depth=0){
     subsize[u]=1;
     parent[u]=pre;
     depth[u]=_depth;
     for(int i=0;i<adj[u].size();i++){
         if(adj[u][i]!=pre){
            dfs(adj[u][i],u,_depth+1);
            subsize[u]+=subsize[adj[u][i]];
         }
     }
}
int chainNo=0,chainHead[100005],chainId[100005];
void hld(int cur){
     if(chainHead[chainNo]==-1)chainHead[chainNo]=cur;
     chainId[cur]=chainNo;

     int id=-1,mxid=-1;
     for(int i=0;i<adj[cur].size();i++){
          if(adj[cur][i]!=parent[cur]&&subsize[adj[cur][i]]>mxid){
              mxid=subsize[adj[cur][i]];
              id=adj[cur][i];
          }
     }
     if(id>=0)hld(id);
     for(int i=0;i<adj[cur].size();i++){
         if(adj[cur][i]!=parent[cur]&&adj[cur][i]!=id){
            chainNo++;
            hld(adj[cur][i]);
         }
     }
}
int lca(int u,int v){
    while(chainId[u]!=chainId[v]){
        if(depth[chainHead[chainId[u]]]>depth[chainHead[chainId[v]]])
        u=parent[chainHead[chainId[u]]];
        else
        v=parent[chainHead[chainId[v]]];
    }
    if(depth[u]<depth[v])return u;
    return v;
}
int main(){
    int n,q,x,y,m;


    scanf("%d%d%d",&n,&q,&u);
    for(int i=0;i<n;i++)adj[i].clear();
    for(int i=0;i<n-1;i++){
       scanf("%d%d",&x,&y);
       adj[x].push_back(y);
       adj[y].push_back(x);
    }


    for(int i=0;i<100005;i++){
       parent[i]=-1;
       chainHead[i]=-1;
       depth[i]=0;
       subsize[i]=0;

    }
    dfs(u,-1);
    hld(u);
    while(q--){
       scanf("%d%d",&x,&y);
       int l=lca(x,y);
       if(l==y)printf("1\n");
       else if(l==x)printf("-1\n");
       else printf("0\n");

    }
    return 0;
}
