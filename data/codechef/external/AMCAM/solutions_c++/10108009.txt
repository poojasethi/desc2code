#include <bits/stdc++.h>
using namespace std;

const int N = 205;
long long x[N],y[N],cx[N],cy[N];
int n,k;
vector<int>G[N];
int match[N];
bool vis[N];
long long dist(int i,int j)
{
    long long dx = x[i] - cx[j];
    long long dy = y[i] - cy[j];
    return dx*dx+dy*dy;
}

int dfs(int u)
{
    if(vis[u]) return 0;
    vis[u] = 1;
    for(auto a: G[u]) {
        if(match[a] ==-1 || dfs(match[a]) ) {
            match[a] = u;
            return 1;
        }
    }
    return 0;
}

bool can(long long mid)
{
    for(int i= 0; i < n; i ++ ){
        for(int j = 0; j < n ; j ++ ) {
            long long pd = dist(i,j);
            if(pd > mid ) {
                G[i].push_back(j);
            }
        }
    }
    memset(match, -1, sizeof match);
    int cnt = 0;
    for(int i = 0; i < n ; i ++ ) {
        memset(vis, 0 ,sizeof vis);
        if(dfs(i)) cnt ++;
    }
    for(int i = 0; i < n; i ++ ) G[i].clear();
    if(2*n- cnt >= k ) return 1;
    return 0;
}

int main()
{
    
    cin >> n >> k;
    for(int i = 0; i < n ; i ++) cin >> x[i] >> y[i];
    for(int i = 0; i< n; i ++) cin >> cx[i] >> cy[i];
    
    long long low = 0, high = 1e12, mid , ans;
    while(low <= high ) {
        mid = (low + high) / 2;
        if(can(mid)) {
            ans = mid;
            high = mid-1;
        }else low = mid+1;
    }
    printf("%.9lf\n", sqrt(ans));
}