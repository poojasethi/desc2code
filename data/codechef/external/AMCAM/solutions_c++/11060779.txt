#include <bits/stdc++.h>

using namespace std;

constexpr int MAX_N = 200 + 1;

vector<int> G[MAX_N];
int matched[2 * MAX_N];
bool used[2 * MAX_N];

pair<int,int> cats[MAX_N], mice[MAX_N];

int N, K;

bool pairUp(int node)
{
    if (used[node])
        return false;

    used[node] = true;

    for (int v : G[node])
        if (!matched[v])
        {
            matched[v] = node;
            matched[node] = v;
            return true;
        }

    for (int v : G[node])
        if (pairUp(matched[v]))
        {
            matched[node] = v;
            matched[v] = node;
            return true;
        }

    return false;
}

long long square(int x)
{
    return 1LL * x * x;
}

long long dist(const pair<int,int> &A, const pair<int,int> &B)
{
    return square(A.first - B.first) + square(A.second - B.second);
}

int maxMatching(long long D)
{
    for (int i = 1; i <= 2 * N; ++i)
        matched[i] = 0;

    for (int i = 1; i <= N; ++i)
        G[i].clear();

    for (int i = 1; i <= N; ++i)
        for (int j = 1; j <= N; ++j)
            if (dist(cats[i], mice[j]) > D)
                G[i].push_back(j + N);

    bool changed;

    do
    {
        changed = false;
        memset(used, 0 , sizeof used);

        for (int i = 1; i <= N; ++i)
            if (!matched[i])
                changed |= pairUp(i);

    } while (changed);

    int maxMatch = 0;

    for (int i = 1; i <= N; ++i)
        maxMatch += matched[i] > 0;

    ///cout << maxMatch << endl;

    return maxMatch;
}

int main()
{
    ///ifstream cin("data.in");

    cin >> N >> K;

    for (int i = 1; i <= N; ++i)
        cin >> cats[i].first >> cats[i].second;

    for (int i = 1; i <= N; ++i)
        cin >> mice[i].first >> mice[i].second;

    long long l = 0, r = numeric_limits<long long>::max() / 2;
    long long found = -1;

    while (l <= r)
    {
        long long m = (l + r) / 2;

        if (2 * N - maxMatching(m) >= K)
        {
            found = m;
            r = m - 1;
        }
        else
            l = m + 1;
    }

    cout << fixed << setprecision(10) << sqrt(found) << endl;

    return 0;
}
