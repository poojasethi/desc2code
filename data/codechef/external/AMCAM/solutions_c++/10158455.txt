#include "bits/stdc++.h"
using namespace std;
const int N = 205;
int n , k;
int catx[N];
int caty[N];
int mousex[N];
int mousey[N];
bool visited[N];
int match[N];
vector < int > v[N];
inline long long sqr(int x){
	return 1LL * x * x;
}
bool dfs(int node){
	if(visited[node]){
		return 0;
	}
	visited[node] = 1;
	for(int next : v[node]){
		if(!match[next] || dfs(match[next])){
			match[next] = node;
			return 1;
		}
	}
	return 0;
}
bool check(long long val){
	for(int i = 1 ; i <= n ; ++i){
		v[i].clear();
		match[i] = 0;
		visited[i] = 0;
		for(int j = 1 ; j <= n ; ++j){
			if(sqr(catx[i] - mousex[j]) + sqr(caty[i] - mousey[j]) > val){
				v[i].emplace_back(j);
			}
		}
		v[i].shrink_to_fit();
	}
	int ans = n + n;
	for(int i = 1 ; i <= n ; ++i){
		ans -= dfs(i);
		memset(visited , 0 , sizeof(visited));
	}
	return ans >= k;
}
int main(){
	scanf("%d %d" , &n , &k);
	for(int i = 1 ; i <= n ; ++i){
		scanf("%d %d" , catx + i , caty + i);
	}
	for(int i = 1 ; i <= n ; ++i){
		scanf("%d %d" , mousex + i , mousey + i);
	}
	long long l = 0;
	long long r = 2e10;
	while(l < r){
		long long mid = l + r >> 1;
		if(check(mid)){
			r = mid;
		}
		else{
			l = mid + 1;
		}
	}
	printf("%.9lf\n" , sqrt(l));
}