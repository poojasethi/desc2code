#include <bits/stdc++.h>

#define REP(i, n)	for(int i=0;i<n;i++)
#define REPN(i, n)	for(int i=1;i<=n;i++)
#define SET(i, n)   memset(i, n, sizeof(i))

#define MAX			250
#define INF			(1LL << 50LL)
#define pb			push_back

using namespace std;

typedef long long ll;

int n, k, CX[MAX], CY[MAX], MX[MAX], MY[MAX];
vector<int>edge[MAX];
int seen[MAX];
int match[MAX], t;
double dis[MAX][MAX];
    
double ds(int x, int y){
    double r1 = (CX[x] - MX[y]);
           r1 = r1 * r1;
    double r2 = (CY[x] - MY[y]);
           r2 = r2 * r2;
    // return sqrt(r1 + r2);
    // cout << "\n" << CX[x] << ' ' << CY[x] << ' ' << MX[x] << ' ' << MY[y]
    return sqrt(r1 + r2);
}

bool bpm(int u){
    if(seen[u] == t) return false;
    seen[u] = t;
    REP(i, edge[u].size()){
        int v = edge[u][i];
        if (match[v] == -1){
            match[v] = u;
            return true;
        } 
        if(bpm(match[v])){               
             match[v] = u;
             return true;
        } 
    }
    return false;
}
 
int maxBPM(){
    int ret = 0; 
    REPN(i, n){
        t++;
        if(bpm(i)){
            ret += 1;
        }
    }
    return ret;
}

void init(){
    REPN(i, n){
        match[i] = -1;
        edge[i].clear();
    }
}

double solve(){
    REPN(i, n){
        REPN(j, n){
            dis[i][j] = ds(i, j);
            // cout << dis[i][j] << "   ";
        }
        // cout << endl;
    }
    double lo = 0, hi = 1000000, ret = 0;
    REP(fi, 200){
        double mid = (lo + hi) / 2.0;
        init();
        // cout << "--------\n";
        REPN(i, n){
            REPN(j, n){
                if(i == j) continue;
                if(dis[i][j] > mid){
                    // cout << i << ' ' << j << endl;
                    edge[i].pb(j);
                }
            }
        } 
        int ch = 2 * n - maxBPM();
        // cout << mid << ' ' << ch << ' ' << k << endl;
        if(ch >= k){
            hi = mid;
        }
        else lo = mid;
    }
    return lo;
}

int main(){
    scanf("%d %d", &n, &k);
    REPN(i, n){
        scanf("%d %d", &CX[i], &CY[i]);
    }
    REPN(i, n){
        scanf("%d %d", &MX[i], &MY[i]);
    }
    double ret = solve();
    printf("%.6lf\n", ret);
    return 0;
}
