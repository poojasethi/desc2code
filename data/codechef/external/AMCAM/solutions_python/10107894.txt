#include <bits/stdc++.h>

using namespace std;

long long L,R,INF;
long long karp[100007];
long long hopcroft[100007];
long long ar[100007],pr[100007],X[10000],XX[10000],Y[10000],YY[10000];
vector<long long> adj[100007];


bool Bfs()
{
    queue<long long> q;
    long long i;
    for( i=1;i<=L;i++)
    {
        if( hopcroft[i] ) karp[i] = INF;
        else
        {
            karp[i] = 0;
            q.push( i );
        }
    }
    karp[0] = INF;
    while( !q.empty())
    {
        long long u = q.front();
        q.pop();
        for( i=0;i<adj[u].size();i++)
        {
            long long v = adj[u][i];
            if( karp[hopcroft[v]] == INF )
            {
                karp[hopcroft[v]] = karp[u] + 1;
                q.push( hopcroft[v] );
            }
        }
    }
    return karp[0] != INF;
}
bool Dfs( long long u )
{
    if( !u ) return true;
    long long i;
    for( i=0;i<adj[u].size();i++)
    {
        long long v = adj[u][i];
        if( karp[hopcroft[v]]==karp[u]+1 && Dfs( hopcroft[v] ))
        {
            hopcroft[u] = v;
            hopcroft[v] = u;
            return true;
        }
    }
    karp[u] = INF;
    return false;
}

double dist(long long i,long long j)
{
    double q,w;
    q=X[i]-XX[j];
    w=Y[i]-YY[j];
    return q*q+w*w;
}

int main()
{
    double low,high,mid;
    long long i,j,k,l,cnt,ans,test,q,w,e,r,n,m;

    cin>>n>>m;

    for(i=1;i<=n;i++)
    {
        cin>>X[i]>>Y[i];
    }

    for(i=1;i<=n;i++)
    {
        cin>>XX[i]>>YY[i];
    }

    low=0;
    high=1e10;

    cnt=0;

    while(cnt<=200)
    {
        cnt++;
        mid=low+high;
        mid/=2;

        for(i=0;i<=2*n+5;i++)
        {
            karp[i]=0;
            hopcroft[i]=0;
            adj[i].clear();
        }

        for(i=1;i<=n;i++)
        {
            for(j=1;j<=n;j++)
            {
                if(dist(i,j)>mid*mid)
                {
                    adj[i].push_back(j+n);
                    adj[j+n].push_back(i);
                }
            }
        }

        L=n;
        R=n;

        long long Ans = 0;
        while( Bfs())
        {
            for( i=1;i<=L;i++)
            {
                if( hopcroft[i] ) continue;
                if( Dfs( i ))
                {
                    Ans++;
                }
            }
        }

        if(2*n-Ans>=m) high=mid;
        else low=mid;
    }

    printf("%.10lf\n",mid);
}
