#include<bits/stdc++.h>
#define fr first
#define se second
using namespace std;
int tree[1000005];
pair<int,int> a[1000005];
int m;int n;
int visited[1000005];
struct triple {
    int x,y,z;
}p[1000005];
int marks[100005];
inline void update(int idx,int val){

    while(idx<=m && idx>0) {
        tree[idx]+=val;
        idx+=(idx&-idx);
    }
}
inline int  query(int idx) {
    int sum=0;
    while(idx>0) {
        sum+=tree[idx];
        idx-=(idx&-idx);
    }
    return sum;
}
bool cmp(struct triple a,struct triple b) {
    return a.y<b.y;
}
int ans[1000000];
int main() {
    scanf("%d",&n);
    for(int i=1;i<=n;i++) {
        scanf("%d",&marks[i]);
    }
    scanf("%d",&m);
    for(int i=1;i<=m;i++) {
        int x;
        scanf("%d",&x);
        a[i].fr=x;
        a[i].se=marks[x];
    }
    int cnt=1;
    for(int i=m+1;i<=2*m;i++) {
        a[i].fr=a[cnt].fr;
        a[i].se=a[cnt].se;
        cnt++;
    }
    m=2*m;
    int q;scanf("%d",&q);
    for(int i=1;i<=q;i++) {
        scanf("%d%d",&p[i].x,&p[i].y);
            p[i].y=p[i].x+p[i].y-1;
            p[i].z=i;
    }
    sort(p+1,p+q+1,cmp);
    int j=1;
    for(int i=1;i<=q;i++) {
        while(j<=p[i].y) {
            if(!visited[a[j].first]) {
                visited[a[j].first]=j;
                update(j,a[j].second);
     //         cout<<query(j)-query(0)<<endl;
             }
             else {
                update(visited[a[j].first],-a[j].second);
                visited[a[j].first]=j;
                update(j,a[j].second);
   //           cout<<query(j)-query(0)<<endl;
            }
            j++;
        }
        ans[p[i].z]=query(p[i].y)-query(p[i].x-1);
//      cout<<query(p[i].y)<<" "<<query(p[i].x-1)<<endl;
    }
    for(int i=1;i<=q;i++) {
        printf("%d\n",ans[i]);
    }
}
