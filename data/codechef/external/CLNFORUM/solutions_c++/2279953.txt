
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <cstdlib>
#include <string>
#include <list>
#include <bitset>
#include <iomanip>
#include <cmath>
#include <sstream>
#include <deque>
#include <climits>
#include <cassert>


using namespace std;

#define ull unsigned long long
#define ll long long
#define Abs(x) ((x)<0?(-x):(x))
#define Max(x,y) ((x)>(y)?(x):(y))
#define Sl(x) scanf("%lld",&x)
#define Su(x) scanf("%llu",&x)
#define S(x) scanf("%d",&x)

#define pii pair<int,int>
#define pll pair<ll,ll>
#define pps pair<ll,pll>
#define ppf pair<pll,ll>
#define fr first
#define se second
#define MOD 1000000007
#define V(x) vector<x>
#define pb(x) push_back(x)
#define mem(x,i) memset(x,i,sizeof(x))
#define fori(i,s,n) for(i=(s);i<(n);i++)
#define ford(i,s,n) for(i=(n);i>=(s);--i)
#define INF 8944674407370955161LL
#define debug(i,st,arr) fori(i,0,st){cout<<arr[i]<<" ";}cout<<endl;
#define forci(i,sw) for((i)=(sw).begin();(i)!=(sw).end();(i)++)
#define forcd(i,sw) for((i)=(sw).end()--;(i)!=(sw).begin();(i)++)

int main()
{
    int t;

    S(t);

    map<string, pair<string, int> > m;
    m["8"] = pair<string, int>("ate", 1);
    m["w8"] = pair<string,int>("wait", 1);
    m["gr8"] = pair<string, int>("great", 1);
    m["4"] = pair<string, int>("for", 1);
    m["b4"] = pair<string, int>("before", 1);
    getchar();
    while(t--) {
        string s;
        int i;
        getline(cin, s);
       // cout << s << endl;
        string ss = "";
        fori(i,0,s.size()) {
            if(s[i] == ' ') {
                if(m[ss].se) {
                    cout << m[ss].fr << " ";
                }
                else {
                    cout << ss << " ";
                }
                ss = "";
            }
            else {
                ss += s[i];
            }
        }
        if(m[ss].se) {
            cout << m[ss].fr << endl;
        }
        else {
            cout << ss << endl;
        }
    }
    return 0;
}
