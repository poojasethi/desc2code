
#include<bits/stdc++.h>

using namespace std;

#define fli(i,x,y) for(ll i=x;i<y;i++)
#define fld(i,x,y) for(ll i=x;i>y;i--)
#define wl(t) while(t--)

#define maxv 1000001
#define maxm 1234567890
#define MOD 1000000007
#define PB push_back
typedef long long ll;


using std::string;
 
static struct IO {
     char tmp[1 << 10];
 
     // fast input routines
     char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
     inline char nextChar() { return cur = getc_unlocked(stdin); }
     inline char peekChar() { return cur; }
 
     inline operator bool() { return peekChar(); }
     inline static bool isBlank(char c) { return (c < '-' && c); }
     inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
     inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
     inline IO& operator >> (char * buf) {
          if (skipBlanks()) {
               if (peekChar()) {
                    *(buf++) = peekChar();
                    while (!isBlank(nextChar())) *(buf++) = peekChar();
               } *(buf++) = 0; } return *this; }
 
     inline IO& operator >> (string & s) {
          if (skipBlanks()) { s.clear(); s += peekChar();
               while (!isBlank(nextChar())) s += peekChar(); }
          return *this; }
 
     inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;     }
 
#define defineInFor(intType) \
     inline IO& operator >>(intType & n) { \
          if (skipBlanks()) { \
               int sign = +1; \
               if (peekChar() == '-') { \
                    sign = -1; \
                    n = nextChar() - '0'; \
               } else \
                    n = peekChar() - '0'; \
               while (!isBlank(nextChar())) { \
                    n += n + (n << 3) + peekChar() - 48; \
               } \
               n *= sign; \
          } \
          return *this; \
     }
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
     // fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
     inline void putChar(char c) { putc_unlocked(c, stdout); }
     inline IO& operator << (char c) { putChar(c); return *this; }
     inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
     inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
     char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
     inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
     inline char * toString(intType n) { \
          char * p = (tmp + 30); \
          if (n) { \
               bool isNeg = 0; \
               if (n < 0) isNeg = 1, n = -n; \
               while (n) \
                    *--p = (n % 10) + '0', n /= 10; \
               if (isNeg) *--p = '-'; \
          } else *--p = '0'; \
          return p; \
     } \
     inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;



ll arr[maxv][3];
int main()
{
    // freopen("inp.txt","r",stdin);

     
     ll n,k;
     cin>>n>>k;
     string st;
     cin>>st;

     for(ll i = 0; i < n;){
          fli(j,0,k){
               //   cout<<st[i]<<" ";
               arr[j][abs('a'-st[i])]++;
               i++;
               
              
          }
     }


     string ans = "";
     fli(i,0,k){
          ll a = arr[i][0];
          ll b = arr[i][1];
          ll c = arr[i][2];

          if(a >= max(b,c))
               ans += "a";
          else if(b >= max(a,c))
               ans += "b";
          else 
               ans += "c";

      //    cout<<a<<" "<<b<<" "<<c<<"\n";
     }
     cout<<ans<<"\n";

     return 0;
}