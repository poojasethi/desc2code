//#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#define MAX 1001
using namespace std;

class MazePathCount
{
	public:
	int count;
	void SetDefaultValueVisited(bool Visited[][MAX], int N)
	{
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
				Visited[i][j] = false;
		}
	}
	void Input(int Arr[][MAX], int N)
	{
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
				scanf("%d", &Arr[i][j]);
		}
	}

	bool isSafe(int i, int j, int N)
	{
		if (i<0 || i>N - 1 || j<0 || j>N - 1)
			return false;
		else
			return true;
	}
	int IsPathExist(int Arr[][MAX], bool Visited[][MAX], int i, int j, int N)
	{
		
		if (!isSafe(i, j, N))
			return count;
		if (i == N - 1 && j == N - 1 && Arr[i][j] == 0)
		{
			count = count + 1;
			return count;
		}

		if (Arr[i][j] == 0 && Arr[i + 1][j] == 0 && !Visited[i + 1][j])
		{
			Visited[i][j] = true;
			IsPathExist(Arr, Visited, i + 1, j, N);
			Visited[i][j] = false;
		}
		if (Arr[i][j] == 0 && Arr[i - 1][j] == 0 && !Visited[i - 1][j])
		{
			Visited[i][j] = true;
			IsPathExist(Arr, Visited, i - 1, j, N);
			Visited[i][j] = false;
		}
		if (Arr[i][j] == 0 && Arr[i][j + 1] == 0 && !Visited[i][j + 1])
		{
			Visited[i][j] = true;
			IsPathExist(Arr, Visited, i, j + 1, N);
			Visited[i][j] = false;
		}
		if (Arr[i][j] == 0 && Arr[i][j - 1] == 0 && !Visited[i][j - 1])
		{
			Visited[i][j] = true;
			IsPathExist(Arr, Visited, i, j - 1, N);
			Visited[i][j] = false;
		}
		return count;
	}
};
int main()
{
	MazePathCount maze;
	static bool Visited[MAX][MAX];
	int N;
	static int Arr[MAX][MAX];
	int totalNumberOfPath = 0;
	scanf("%d", &N);
	maze.count = 0;
	maze.SetDefaultValueVisited(Visited, N);
	maze.Input(Arr, N);	
	totalNumberOfPath = maze.IsPathExist(Arr, Visited, 0, 0, N);
	printf("%d\n", totalNumberOfPath);
	return 0;
}