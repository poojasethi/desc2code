#include <iostream>

using namespace std;

typedef long long int Lint;

struct Cell {
	
	int x;
	int y;
};

bool isSafe( int x, int y, int n ) {
	if( ( x >= n ) || ( y >= n ) || ( x < 0 ) || ( y < 0 ) )
		return false;
	return true;
}

Lint count = 0;

void DFS( Lint A[][100], struct Cell curr, Lint n ) {
	
	if( ( curr.x == ( n - 1 )  ) && ( curr.y == ( n - 1 ) ) )
		count++;
	A[  curr.x ][ curr.y ] = 1;
	struct Cell nxt1 = {curr.x + 1, curr.y};
	struct Cell nxt2 = {curr.x, curr.y + 1};
	struct Cell nxt3 = {curr.x - 1, curr.y};
	struct Cell nxt4 = {curr.x, curr.y - 1};

	if( isSafe( curr.x + 1, curr.y, n ) && !A[ curr.x + 1 ][ curr.y ] ) {
		DFS( A, nxt1, n );		
	}

	if( isSafe( curr.x, curr.y + 1, n ) && !A[ curr.x ][ curr.y + 1 ] ) {
		DFS( A, nxt2, n );
	}

	if( isSafe( curr.x - 1, curr.y, n ) && !A[ curr.x - 1 ][ curr.y ] ) {
		DFS( A, nxt3, n );		
	}

	if( isSafe( curr.x, curr.y - 1, n ) && !A[ curr.x ][ curr.y - 1 ] ) {
		DFS( A, nxt4, n );
	}
	A[ curr.x ][ curr.y ] = 0;
}

int main() {
	
	ios_base::sync_with_stdio( false );

	Lint n, i, j;
	cin >> n;
	Lint A[ 100 ][ 100 ];

	for( i = 0;i < 100;i++ ) {
		for( j = 0;j< 100;j++ )
			A[ i ][ j ] = 0;
	}

	for( i = 0;i < n;i++ ) {
		for( j = 0;j< n;j++ )
			cin >> A[ i ][ j ];
	}

	struct Cell start = {0,0};
	count = 0;
	if( !A[ 0 ][ 0 ] ) {
		DFS( A, start, n );
		cout << count << "\n";
	} else
			cout << "0\n";

	return 0;
}