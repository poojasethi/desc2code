#include<iostream>
#include<utility>
#include<queue>
using namespace std;
int n,sum=0;
void dfs(pair<int,int>,int[][10],int[][10]);
int main(){
    int mat[10][10];
    cin>>n;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin>>mat[i][j];
        }
    }
    if(n==1){
        if(mat[0][0]==1){
        cout<<"0";
        return 0;
    }else{
        cout<<"1";
        return 0;
    }
}
if(mat[0][0] || mat[n-1][n-1]){
    cout<<sum;
    return 0;
}
    int visited[10][10];
   for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
           visited[i][j]=0;
        }
    }

    dfs(make_pair(0,0),mat,visited);
    cout<<sum;
}
void dfs(pair<int ,int> p,int mat[][10],int visited[][10]){
    if(p.first == (n-1) && p.second == (n-1)){
            sum++;
            visited[p.first][p.second]=1;
        //cout<<sum;

    }
else{

   int i = p.first;
   int j = p.second;
//    cout<<i<<" "<<j<<endl;

   if(mat[i][j]!= 1 && i<n && i>=0 && j<n && j>=0 && !visited[i][j]){
         visited[p.first][p.second] =1;

        dfs(make_pair(i+1,j),mat,visited);


        dfs(make_pair(i,j+1),mat,visited);


        dfs(make_pair(i-1,j),mat,visited);


        dfs(make_pair(i,j-1),mat,visited);
visited[i][j] =0;
   }
}
}
