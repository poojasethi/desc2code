#include <stdio.h>

typedef struct position
{
    int a,b;
}position;

void solution(int,int);
int moveup(int,int);
int movedown(int,int);
int moveleft(int,int);
int moveright(int,int);
void updatestack(int,int);
int searchstack(int,int);
//void updatesolutionstack();
//void print();

position stack[100];//,solutionstack[20][100];

int map[20][20],n,count,top/*,solutiontop,topofeachsolution[20]*/;

int main()
{
    int i,j;

    //printf("enter side of matrix\n");
    scanf("%d",&n);
    //printf("enter maze 1 for closed path 0 for open\n");

    for (i=0;i<n;i++)
    {
        for (j=0;j<n;j++)
        {
            scanf("%d",&map[i][j]);
        }
    }

    solution(0,0);
    printf("%d\n",count);
    //print();

    return 0;
}

void solution(int i,int j)
{
    if (moveup(i,j))
    {
        solution(i-1,j);
    }
    if (moveright(i,j))
    {
        solution(i,j+1);
    }
    if (movedown(i,j))
    {
        solution(i+1,j);
    }
    if (moveleft(i,j))
    {
        solution(i,j-1);
    }

    top--;
}

int moveup(int i,int j)
{
    if (i-1<0||map[i-1][j]||searchstack(i-1,j))
    {
        return 0;
    }

    updatestack(i,j);
    return 1;
}

int movedown(int i,int j)
{
    if (i+1>=n||map[i+1][j]||searchstack(i+1,j))
    {
        return 0;
    }

    if (i==n-2&&j==n-1)
    {
        /*updatestack(i,j);
        updatestack(i+1,j);
        updatesolutionstack();
        top-=2;*/
        count++;
        return 0;
    }

    updatestack(i,j);
    return 1;
}

int moveleft(int i,int j)
{
    if (j-1<0||map[i][j-1]||searchstack(i,j-1))
    {
        return 0;
    }

    updatestack(i,j);
    return 1;
}

int moveright(int i,int j)
{
    if (j+1>=n||map[i][j+1]||searchstack(i,j+1))
    {
        return 0;
    }

    if (i==n-1&&j==n-2)
    {
        /*updatestack(i,j);
        updatestack(i,j+1);
        updatesolutionstack();
        top-=2;*/
        count++;
        return 0;
    }

    updatestack(i,j);
    return 1;
}

void updatestack(int a,int b)
{
    stack[top].a=a;
    stack[top++].b=b;
}

int searchstack(int a,int b)
{
    int k;

    for (k=0;k<top;k++)
    {
        if (stack[k].a==a&&stack[k].b==b)
        {
            return 1;
        }
    }

    return 0;
}

/*void updatesolutionstack()
{
    int k;

    for (k=0;k<top;k++)
    {
        solutionstack[solutiontop][k].a=stack[k].a;
        solutionstack[solutiontop][k].b=stack[k].b;
    }

    topofeachsolution[solutiontop++]=top;
}*/

/*void print()
{
    int i,j;

    for (i=0;i<solutiontop;i++)
    {
        printf("solution no %d\n",i+1);
        for (j=0;j<topofeachsolution[i];j++)
        {
            printf("%d)%d %d\n",j+1,solutionstack[i][j].a+1,solutionstack[i][j].b+1);
        }
        printf("\n");
    }
}*/
