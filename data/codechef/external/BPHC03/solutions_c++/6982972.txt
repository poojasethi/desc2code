#include <iostream>
#include<stdio.h>
using namespace std;
int arr[1001][1001];
int n=0;
int count=0;
int sol[1001][1001];


int dfs(int x,int y)
{
	if(x==n && y==n)
	{
		count++;

	}
	
	if((x+1)<=n && sol[x+1][y]==0 && arr[x+1][y]==0)
	{
		sol[x+1][y]=1;//visited
		dfs(x+1,y);//can go down
	
	}
		if((y+1)<=n && sol[x][y+1]==0 && arr[x][y+1]==0)		{
		sol[x][y+1]=1;//visited
		dfs(x,y+1);//can go furthe
		
		}
if((x-1)>=1 && sol[x-1][y]==0 && arr[x-1][y]==0)	{
	
	sol[x-1][y]=1;
	dfs(x-1,y);
	}//visited
		if((y-1)>=1 && sol[x][y-1]==0 && arr[x][y-1]==0)
		{
			sol[x][y-1]=1;
			dfs(x,y-1);
			}//visited
//		sol[x][y]=0;//if solution not reached back ack
	//	arr[x][y]=1;
	sol[x][y]=0;
	
	
	return count;
	}//end of the dfs function
int main() {
	scanf("%d",&n);
	for(int i=1;i<=1000;i++)
	{
		for(int j=1;j<=1000;j++){sol[i][j]=0;arr[i][j]=1;}
		
		
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			//sol[i][j]=0;
			scanf("%d",&arr[i][j]);
		}//end of the inner for loop
	}//end of the for loop
	//now cal the dfs function and backtracking also use
	count=dfs(1,1);
	cout<<count;
//	print();
	return 0;
}