#include <string>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <queue>
#include <deque>
#include <cassert>
#include <cctype>
#define MP make_pair
using namespace std;
typedef pair<int, int> PII;
typedef unsigned long long ULL;
typedef long long LL;

#define MOD
#define INF
#define MAXN 12

const int dx[] = {-1, 1, 0, 0};
const int dy[] = {0, 0, -1, 1};

int R, C;
char grid[MAXN+1][MAXN+1];
vector<PII> food;

void findit(PII pnt, int dc, vector<vector<int> > &adj)
{
    int dp[R][C];
    memset(dp, -1, sizeof(dp));
    dp[pnt.first][pnt.second] = 0;
    queue<PII> Q;
    Q.push(pnt);
    while(!Q.empty())
    {
        PII p = Q.front();
        Q.pop();

        for(int i=0; i<4; ++i)
        {
            int xx = p.first+dx[i], yy = p.second + dy[i];
            if(xx<0 || yy<0 || xx >=R || yy>=C || grid[xx][yy]=='#' || dp[xx][yy]>-1)
                continue;
            dp[xx][yy] = dp[p.first][p.second] + 1;
            Q.push(MP(xx,yy));
        }
    }
    for(int i=0; i<food.size(); ++i)
        adj[dc][i] = dp[food[i].first][food[i].second];
}

int solve()
{
    food.clear();
    for(int i=0; i<R; ++i)
        for(int j=0; j<C; ++j)
            if(grid[i][j] == 'H')
                food.push_back(MP(i,j));
    for(int i=0; i<R; ++i)
        for(int j=0; j<C; ++j)
            if(grid[i][j] == 'F')
                food.push_back(MP(i,j));
    int N = food.size();
    vector< vector <int> > adj(N, vector<int>(N));

    for(int i=0; i<N; ++i)for(int j=0; j<N; ++j) adj[i][j] = -1;
    for(int i=0; i<N; ++i)
        findit(food[i], i, adj);
    for(int i=0; i<N; ++i)for(int j=0; j<N; ++j)
        if(adj[i][j] == -1)return -1;


    vector<int> pm(N-1);
    int K = N-1;
    for(int i=0; i<K; ++i)
        pm[i] = i+1;
    int rs = R*C+10;
    do
    {
        int r = 0;
        for(int i=0; i<(K-1); ++i)
            r += adj[pm[i]][pm[i+1]];
        r += adj[0][pm[0]] + adj[pm[K-1]][0];
        rs = min(r, rs);
    }while(next_permutation(pm.begin(), pm.end()));
    return rs/2;
}

void readInput()
{
    scanf("%d%d", &R, &C);
    for(int i=0; i<R; ++i)
        scanf("%s", grid[i]);

}

int main()
{

    int testcases;
    scanf("%d", &testcases);
    for(int caseno=1; caseno<=testcases; caseno++)
    {
        printf("Case %d: ", caseno);
        readInput();
        printf("%d\n", solve());
    }
    return 0;
}


