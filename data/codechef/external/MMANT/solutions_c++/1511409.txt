#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

#define INF 100000000
using namespace std;

int n , m;
char s[15][15];
int dist[500][500];
int adjMat[500][500];

int isValid (int x, int y) {
    if (x >= 0 && x < n && y >=0 && y < m)
        return true;
    return false;
}

int main() {
    //freopen("input.txt" , "r"  , stdin);

    int T , caseNo = 1;
    scanf("%d" , &T);
    while (T--) {
        scanf("%d%d" , &n , &m);
        for (int i = 0; i <  n; i++)
            scanf ("%s" , s[i]);

        for (int i = 0; i < m * n; i++)
            for (int j = 0; j < m * n; j++) {
                adjMat[i][j] = INF;
                dist[i][j] = INF;
            }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m ; j++) {
                if (s[i][j] != '#') {
                    if (isValid (i + 1,j) && s[i + 1][j] != '#') {
                        int from = i * m + j;
                        int to = (i + 1) * m + j;
                        adjMat[from][to] = 1;
                        adjMat[to][from] = 1;
                    }
                    if (isValid (i - 1,j) && s[i - 1][j] != '#') {
                        int from = i * m + j;
                        int to = (i - 1) * m + j;
                        adjMat[from][to] = 1;
                        adjMat[to][from] = 1;
                    }
                    if (isValid (i ,j + 1) && s[i][j + 1] != '#') {
                        int from = i * m + j;
                        int to = (i ) * m + j + 1;
                        adjMat[from][to] = 1;
                        adjMat[to][from] = 1;
                    }
                    if (isValid (i,j - 1) && s[i ][j - 1] != '#') {
                        int from = i * m + j;
                        int to = (i) * m + j - 1;
                        adjMat[from][to] = 1;
                        adjMat[to][from] = 1;
                    }
                }
            }
        }

        for (int i = 0; i < n * m; i++)
            for (int j = 0; j < n * m; j++)
                dist[i][j] = adjMat[i][j];

        for (int k = 0; k < m * n; k++) {
            for (int i = 0; i < m * n; i++) {
                for (int j = 0; j < m * n; j++) {
                    dist[i][j] = min (dist[i][j] , dist[i][k] + dist[k][j]);
                }
            }
        }

        int answer = INF;
        int start = 0;
        vector<int> food;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <  m; j++) {
                if (s[i][j] == 'F') {
                    food.push_back(i * m + j);
                }
                if (s[i][j] == 'H') {
                    start = i * m + j;
                }
            }
        }

        vector<int> a;
        for (int i = 0; i < food.size(); i++)
            a.push_back(i);

        do {
            int result = 0;
            int from = start;
            for (int i = 0; i < a.size(); i++) {
                result += dist[from][food[a[i]]];
                from = food[a[i]];
            }
            result += dist[from][start];
            if (result < answer)
                answer = result;
        } while (next_permutation(a.begin() , a.end()));

        if (answer >= INF)
            printf("Case %d: -1\n",caseNo++);
        else
            printf("Case %d: %d\n" , caseNo++ , (answer) / 2);
    }

    return 0;
}
