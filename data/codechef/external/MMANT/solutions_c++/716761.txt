#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,k,n) for(int i=(k);i<(n);i++)
#define inf 12345678

int R, C;
char s[13][13];
int d[12][12][12][12];
int fx[9], fy[9], fn, ord[9];
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};

inline bool good(int x,int y)
{ return x>=0 && x<R && y>=0 && y<C && s[x][y]!='#'; }

int solve()
{
	fn=1;

	//init
	REP(ix,R) REP(iy,C)
	{
		REP(jx,R) REP(jy,C) d[ix][iy][jx][jy] = inf;
		d[ix][iy][ix][iy] = 0;
	}

	//fill basic
	REP(i,R) REP(j,C)
	{
		REP(k,4) if(good(i,j) && good(i+dx[k],j+dy[k]))
			d[i][j][i+dx[k]][j+dy[k]] = 1;
		if(s[i][j]=='H') fx[0]=i,fy[0]=j;
		if(s[i][j]=='F') fx[fn]=i,fy[fn++]=j;
	}

	//apsp
	REP(kx,R) REP(ky,C)
		REP(ix,R) REP(iy,C) if(d[ix][iy][kx][ky]<inf)
			REP(jx,R) REP(jy,C)
			{
				int &r = d[ix][iy][jx][jy];
				r = min( r, d[ix][iy][kx][ky] + d[kx][ky][jx][jy] );
			}

	REP(i,fn) if(d[fx[0]][fy[0]][fx[i]][fy[i]]==inf) return -1;
	REP(i,fn) ord[i] = i;
	int ans = inf;
	
	/*
	do
	{
		REP(k,fn)
		{
			int ai = 0, bi = 0, da = 0, db = 0;
			FOR(i,1,k+1)  da = min(inf,da+d[fx[ai]][fy[ai]][fx[i]][fy[i]]), ai = i;
			FOR(i,k+1,fn) db = min(inf,db+d[fx[bi]][fy[bi]][fx[i]][fy[i]]), bi = i;
			int dc = d[fx[ai]][fy[ai]][fx[bi]][fy[bi]];
			if(da<db) swap(da,db);
			int cur = da + ( (da>=db+dc) ? 0 : (db+dc-da+1)/2 );
			ans = min(ans,cur);
		}
	}while(next_permutation(ord+1,ord+fn));
	*/
	
	do
	{
		int st = 0, cur = 0;
		for(int i=1;i<fn;st=ord[i++])
			cur+=d[fx[st]][fy[st]][fx[ord[i]]][fy[ord[i]]];
  		cur+=d[fx[st]][fy[st]][fx[0]][fy[0]];
		cur>>=1;
		if(cur<ans) ans = cur;
	}while(next_permutation(ord+1,ord+fn));

	return ans == inf ? -1 : ans;
}

int main()
{
	int kase = 1, kases;
	for(scanf("%d",&kases);kases--;kase++)
	{
		printf("Case %d: ",kase);
		scanf("%d %d",&R,&C);
		REP(i,R) scanf(" %s",s[i]);
		printf("%d\n",solve());
	}
	return 0;
}