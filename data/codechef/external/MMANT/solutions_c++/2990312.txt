#include <sstream>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <complex>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <bitset>
#include <list>
#include <string.h>
#include <assert.h>
#include <time.h>

#define LOCAL_TEST true
#define SZ(x) ((int)x.size())
#define clrall(name,val) memset(name,(val),sizeof(name));
#define clrint(name,val,s) memset(name,(val),sizeof(int)*s);
#define Assign(name,val) name.assign(val+1,vector<int>())
#define EPS .000000001
#define ll long long
#define ull long long unsigned
#define SF scanf
#define PF printf
#define psb(b) push_back((b))
#define ppb() pop_back()
#define oo (1<<30)
#define mp make_pair
#define fs first
#define sc second
#define rep(var,s,n) for(var=(s);var<(n);(var)++)
#define rvp(var,s,n) for(var=(n-1);var>(s-1);(var)--)
#define read_ freopen("input.txt","r",stdin)
#define write_ freopen("outputtest.txt","w",stdout)

using namespace std;

template<class T>inline T Max(T a,T b){return a>b?a:b;}
template<class T>inline T Min(T a,T b){return a>b?b:a;}
template<class T>inline T _GCD(T a,T b){if(b==0) return a;return _GCD(b,a%b);}
template<class T>inline T _LCM(T a,T b){T g=_GCD(a,b);return ((a/g)*b);}
template<class T>inline T big_mod(T a,T p,T MOD){if(p==0) return 1L;T ret=big_mod(a,p/2,MOD);ret=(ret*ret)%MOD;if(ret<0) ret+=MOD;if(p%2) ret=(ret*a)%MOD;if(ret<0) ret+=MOD;return ret;}
template<class T>inline T power(T a,T p){if(p==0) return 1L;ll ret=power(a,p/2);ret=(ret*ret);if(p%2) ret=(ret*a);return ret;}

int compare(string a,string b){if(a==b) return 0;if(SZ(a)==SZ(b)){for(int i=0; i<SZ(a); i++){if(a[i]>b[i]) return 1;else if(a[i]<b[i]) return -1;}return -1;}if(SZ(a)>SZ(b)) return 1;return -1;}
string string_add(string b,string a){if(SZ(a)>SZ(b)) swap(a,b);a=string((SZ(b)-SZ(a)),'0')+a;int carry=0,add;string res;for(int i=SZ(a)-1; i>-1; i--){add=(int)(a[i]-'0')+(int)(b[i]-'0')+carry;carry=add/10;res+=(add%10)+'0';}if(carry) res+=carry+'0';reverse(res.begin(),res.end());return res;}
string string_mul(string a,string b){if(SZ(a)>SZ(b)) swap(a,b);string res,tres;int l=0,carry,mul;for(int i=SZ(a)-1; i>-1; i--){tres=string(l,'0');carry=0;for(int j=SZ(b)-1; j>-1; j--){mul=(int)(a[i]-'0')*(int)(b[j]-'0')+carry;carry=mul/10; tres+=(mul%10)+'0'; }if(carry) tres+=carry+'0';reverse(tres.begin(),tres.end());res=string_add(tres,res);l++;}return res;}
void cut_leading_zero(string &res){int i;for(i=0; i<SZ(res); i++){if(res[i]!='0') break;}res=res.substr(i);if(!SZ(res)) res="0";return;}

///pass a vector to a funtion: funtion (vector <data type> &vector name);
///int rr[]= {-1,-1,0,0,1,1};
///int cc[]= {-1,0,-1,1,0,1};
int rr[]= {0,0,1,-1};/*4 side move*/
int cc[]= {-1,1,0,0};/*4 side move*/
///int rr[]= {1,1,0,-1,-1,-1,0,1};/*8 side move*/
///int cc[]= {0,1,1,1,0,-1,-1,-1};/*8 side move*/
///int rr[]={1,1,2,2,-1,-1,-2,-2};/*night move*/
///int cc[]={2,-2,1,-1,2,-2,1,-1};/*night move*/

int dist[15][15][15][15];
int mpp[15][15],mindist[15][15];

string mat[15];
int r,c;

int bfs(int x,int y)
{
    int id=mpp[x][y],u=x,v=y;
    queue<int> Q;
    Q.push(x);
    Q.push(y);
    dist[x][y][x][y]=0;
    mindist[id][id]=0;
    while(!Q.empty())
    {
        int nx,ny;
        x=Q.front();Q.pop();
        y=Q.front();Q.pop();
        for(int i=0;i<4;i++)
        {
            nx=x+rr[i];
            ny=y+cc[i];
            if(nx<0||nx==r||ny<0||ny==c||mat[nx][ny]=='#') continue;
            if(dist[u][v][nx][ny]>dist[u][v][x][y]+1)
            {
                Q.push(nx);
                Q.push(ny);
                dist[u][v][nx][ny]=dist[u][v][x][y]+1;
                if(mat[nx][ny]=='F'||mat[nx][ny]=='H') mindist[id][mpp[nx][ny]]=dist[u][v][nx][ny];
            }
        }
    }
    return 0;
}

int dp[10][(1<<9)+10],lim,inf,ii;
int fx,fy,lx,ly;
pair<int,int> point[15];

int rec(int pre,int mask)
{

    if(mask==0)
    {
        fx=point[pre].fs;
        fy=point[pre].sc;
        return dist[fx][fy][lx][ly];
    }
    int &ret = dp[pre][mask];
    if(ret!=-1) return ret;
    ret = inf;
    for(int i=0;i<=ii;i++)
    {
        if((mask&(1<<i)))
        {
            ret=min(ret,rec(i,mask^(1<<i))+mindist[pre][i]);
        }
    }
    return ret;
}

int main()
{
    int test,cas=0;
    SF("%d",&test);
    while(test--)
    {
        SF("%d %d",&r,&c);
        for(int i=0;i<r;i++) cin>>mat[i];
        clrall(dist,32);
        clrall(mindist,32);
        inf=dist[0][0][0][0];
        clrall(mpp,0);
        ii=0;
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(mat[i][j]=='H')
                {
                    point[0]=mp(i,j);
                }
                if(mat[i][j]=='F')
                {
                    mpp[i][j]=++ii;
                    point[ii]=mp(i,j);
                }
            }
        }
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(mat[i][j]=='H'||mat[i][j]=='F')
                {
                    bfs(i,j);
                }
            }
        }
        int mn=0,res=inf;
        for(lx=0;lx<r;lx++)
        {
            for(ly=0;ly<c;ly++)
            {
                clrall(dp,-1);
                for(int i=0;i<(1<<(ii+1));i++)
                {
                    lim=i^1;
                    mn=0;
                    mn=rec(0,lim);
                    lim=(i^((1<<(ii+1))-1))^1;
                    mn=max(mn,rec(0,lim));
                    res=min(res,mn);
                }
            }
        }
        PF("Case %d: ",++cas);
        if(res==inf) PF("-1\n");
        else PF("%d\n",res);
    }
    return 0;
}













