using namespace std;
#include <cmath>
#include <ctime>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <algorithm>

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef map<int,int>mii;
typedef map<string,int> msi;

#define MEM(a,b) memset(a, b, sizeof(a))
#define all(x) x.begin(), x.end()
#define len(x) (int)length()
#define sz(x) (int)x.size()
#define pb push_back
#define sqr(x) ((x)*(x))
#define popcount(a) __builtin_popcount(a)
#define gcd(a, b) __gcd(a,b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))

#define rep(i, n) for(int i=0;i< n;i++)
#define repi(i, m, n) for(int i=m;i<=n;i++)
#define repr(i, m, n) for(int i=m;i>=n;i--)

#define pi acos(-1.0)
#define INF 2147483647

int dx[]={-1,0,1,0,-1,1,1,-1}, dy[]={0,-1,0,1,-1,-1,1,1};
int kx[]={2,1,-1,-2,-2,-1,1,2},ky[]={1,2,2,1,-1,-2,-2,-1};

template< class T > T _pow(T N, T P) { return (P == 0) ? 1 : N * _pow (N, P-1);}
template< class T > T _max(T a, T b) { return (!(a < b) ? a : b); }
template< class T > T _min(T a, T b) { return (a < b ? a : b); }

bool isVowel(char ch){ch = tolower(ch); return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';}
ll bigmod(ll B,ll P,ll M){ll R = 1; while(P > 0) {if(P % 2){R = (R * B) % M;}P /= 2;B = (B * B) % M;}return (int)R;}
ll nCr(double n,double r){double ans=1; if(r > n - r)r = n - r; repi(i, 1, r){ans *= (n - i + 1); ans /= i;} return (ll)ans;}
ll modmul(ll a, ll b, ll m) {return  ((a % m) * (b % m)) % m;}
string toString(int n){stringstream ss; ss << n; return ss.str();}
int toInt(string s){int r = 0;istringstream sin(s);sin >> r; return r;}
//void sieve(int n){MEM(prime, 1); for(int i = 2; i * i <= n; i++)for(int j = i * i; j <= n; j += i) prime[j] = 0;}

bool vis[15][15][1<<8];
int len[15][15][1<<8];
char g[15][15];
int food[15][15];
int dis[15][15][15][15];
int r, c, hy, hx;

struct info {
    int y, x, m;
} u, v;

void fw()
{
    rep(ky, r) rep(kx, c) {
        rep(iy, r) rep(ix, c) {
            rep(jy, r) rep(jx, c) {
                if(dis[iy][ix][ky][kx] == INF || dis[ky][kx][jy][jx] == INF) continue;
                dis[iy][ix][jy][jx] = min(dis[iy][ix][jy][jx], dis[iy][ix][ky][kx] + dis[ky][kx][jy][jx]);
            }
        }
    }
}

void bfs()
{
    queue<info>Q;
    u.x = hx, u.y = hy, u.m = 0;
    Q.push(u);
    MEM(len, 0);
    MEM(vis, 0);
    vis[u.y][u.x][u.m] = 1;
    len[u.y][u.x][u.m] = 0;

    while(!Q.empty()) {
        u = Q.front();
        Q.pop();

        rep(i, 4) {
            v.x = u.x + dx[i];
            v.y = u.y + dy[i];
            if(v.x >= 0 && v.x < c && v.y >= 0 && v.y < r  && g[v.y][v.x] != '#') {
                dis[v.y][v.x][u.y][u.x] = dis[u.y][u.x][v.y][v.x] = 1;
                if(!vis[v.y][v.x][u.m]) {
                    vis[v.y][v.x][u.m] = 1;
                    len[v.y][v.x][u.m] = len[u.y][u.x][u.m] + 1;
                    v.m = u.m;
                    Q.push(v);
                }
                if(food[v.y][v.x] != -1) {
                    v.m = u.m | (1 << food[v.y][v.x]);
                    if(!vis[v.y][v.x][v.m]) {
                        vis[v.y][v.x][v.m] = 1;
                        len[v.y][v.x][v.m] = len[u.y][u.x][u.m] + 1;
                        Q.push(v);
                    }
                }
            }
        }
    }
}



int main()
{
   //freopen("i.txt","r",stdin);
   //freopen("o.txt","w",stdout);

   int t, cs = 0;
   scanf("%d", &t);
   while(t--) {
       scanf("%d%d",&r, &c);
       rep(i, r) scanf("%s", g[i]);
       int nF = 0;
       MEM(food, -1);
       rep(i, r) rep(j, c) {
           if(g[i][j] == 'F') food[i][j] = nF++;
           if(g[i][j] == 'H') hy = i, hx = j;
       }
       rep(i, r)rep(j, c)rep(k, r)rep(l, c) dis[i][j][k][l] = INF;
       bfs();
       fw();

       int ret = INF;
       rep(i, r) rep(j, c) rep(k, r) rep(l, c) rep(m, 1 << nF) {
           int mask = 0, b = 1;
           rep(n, nF) {
               if(!(b & m)) mask |= b;
               b <<= 1;
           }

           if(vis[i][j][m] && vis[k][l][mask]) {
              ret = min(ret, (len[i][j][m] + len[k][l][mask] + dis[i][j][k][l]) / 2);
           }
       }
       printf("Case %d: ", ++cs);
       if(ret == INF) printf("-1\n");
       else printf("%d\n", ret);
   }
   return 0;
}