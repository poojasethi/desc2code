#include <iostream>
#include <cstring>

using namespace std;

const int N = 12;
const int K = 8;
const int D = 4;

const int dy[] = { -1, 0, 1, 0 };
const int dx[] = { 0, 1, 0, -1 };

const unsigned int INF = 0xffffffff;

unsigned int res[N][N][1 << K];
int m[N][N];
char a[N][N+1];
int qr[N * N *(1 << K)];
int qc[N * N *(1 << K)];
int qm[N * N *(1 << K)];

int main() {
  int t; cin >> t;
  for (int tt = 1; tt <= t; tt++) {
    int rows, cols; cin >> rows >> cols;
    for (int i = 0; i < rows; i++) cin >> a[i];

    memset(m, 0, sizeof(m));
    memset(res, 0xff, sizeof(res));

    int all = 0;
    int r, c;
    for (int i = 0, mask = 1; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        if (a[i][j] == 'F') {
          all |= mask;
          m[i][j] = mask;
          mask <<= 1;
        } else if (a[i][j] == 'H') {
          r = i; c = j;
        }
      }
    }

    int get = 0, put = 0;
    qr[put] = r; qc[put] = c; qm[put++] = 0; res[r][c][0] = 0;
    while (get < put) {
      r = qr[get]; c = qc[get];
      int mask = qm[get++];
      for (int d = 0; d < D; d++) {
        int rr = r + dy[d], cc = c + dx[d];
        if (rr < 0 || rr >= rows || cc < 0 || cc >= cols) continue;
        if (a[rr][cc] == '#') continue;
        int mm = mask | m[rr][cc];
        if (res[r][c][mask]+1 < res[rr][cc][mm]) {
          res[rr][cc][mm] = res[r][c][mask]+1;
          qr[put] = rr; qc[put] = cc; qm[put++] = mm;
        }
      }
    }

    unsigned int best = INF;
    for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) {
      for (int m1 = 0; m1 <= all; m1++) for (int m2 = 0; m2 <= all; m2++) if ((m1 | m2) == all) {
        if (res[i][j][m1] == INF || res[i][j][m2] == INF) continue;
        unsigned int hi = max(res[i][j][m1], res[i][j][m2]);
        if (hi < best) best = hi;
      }
    }
    cout << "Case " << tt << ": " << (int)(best) << endl;
  }
  return 0;
}

