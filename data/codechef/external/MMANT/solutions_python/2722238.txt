#include<cstdio>
#include<iostream>
#include<cassert>
#include<cctype>
#include<cfloat>
#include<climits>
#include<cstring>
#include<bitset>
#include<deque>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<vector>
#include<algorithm>
#include<string>
#include<climits>
#include<cmath>
#define MAX 9000
using namespace std;
int fl[20][20],dp[100009][20],dis[20][20],vis[20][20];
char ar[20][20];
vector<pair<int, int> >vec;
vector<pair<int, int> >::iterator it;
int hx,hy,r,c;
int rx[]={-1,0,1,0};
int ry[]={0,1,0,-1};
queue<pair<int,int> >q;
bool isok(int i, int j)
{
	if(i>=0&&i<r&&j>=0&&j<c)
		return true;
	return false;
}
void disp()
{
	int i,j;
	for(i=0;i<r;i++)
		printf("%s\n",ar[i]);
	cout<<"---fl---"<<endl;
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			cout<<fl[i][j]<<" ";
		}
		cout<<endl;
	}
	cout<<"---vector---"<<endl;
	for(i=0;i<vec.size();i++)
	{
		cout<<vec[i].first<<" "<<vec[i].second<<endl;
	}
	cout<<"---dis---"<<endl;
	for(i=0;i<vec.size();i++)
	{
		for(j=0;j<vec.size();j++)
		{
			cout<<dis[i][j]<<" ";
		}
		cout<<endl;
	}
	cout<<"---dp---"<<endl;
	for(i=1;i<1<<vec.size();i++)
	{
		for(j=0;j<vec.size();j++)
		{
			cout<<dp[i][j]<<" ";
		}
		cout<<endl;
	}
}
void dist(int pos, int cnt)
{
	for(int i=0;i<cnt;i++)
	{
		dis[pos][i]=fl[vec[i].first][vec[i].second];
	}
}
void floodfil(int pos)
{
	int i,j,k,x,y;
	for(i=0;i<r;i++)
		for(j=0;j<c;j++)
			fl[i][j]=9000;
	x=vec[pos].first;
	y=vec[pos].second;
	fl[x][y]=0;
	while(!q.empty())
		q.pop();
	q.push(pair<int,int>(x,y));
	while(!q.empty())
	{
		int i,j;
		i=q.front().first;
		j=q.front().second;
		vis[i][j]=1;
		q.pop();
		for(k=0;k<4;k++)
		{
			if(isok(i+rx[k],j+ry[k])&&fl[i+rx[k]][j+ry[k]]==MAX&&ar[i][j]!='#'&&ar[i+rx[k]][j+ry[k]]!='#')
			{
				q.push(pair<int,int>(i+rx[k],j+ry[k]));
				fl[i+rx[k]][j+ry[k]]=fl[i][j]+1;
			}
		}
	}
	//cout<<"----- "<<pos<<" ------"<<endl;
	//for(i=0;i<r;i++)
	//{
		//for(j=0;j<c;j++)
		//{
			//cout<<fl[i][j]<<" ";
		//}
		//cout<<endl;
	//}
}
int main()
{
	int t,i,j,l,temp,cnt,k,mini,mask,nf;
	scanf("%d",&t);
	l=0;
	while(t--)
	{
		//memset(dp,0,sizeof(dp)*100000*19);
		l++;
		nf=0;
		scanf("%d %d",&r,&c);
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				vis[i][j]=0;
				ar[i][j]='\0';
				fl[i][j]=MAX;
				//dp[i][j]=MAX;
			}
		}
		vec.clear();
		for(i=0;i<r;i++)
			scanf("%s",&ar[i][0]);
		//disp();
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				if(ar[i][j]=='H')
				{
					hx=i;
					hy=j;
				}
				else if(ar[i][j]=='F')
					nf++;
			}
		}
		fl[hx][hy]=0;
		//flood
		while(!q.empty())
			q.pop();
		q.push(pair<int,int>(hx,hy));
		vec.clear();
		while(!q.empty())
		{
			int i,j;
			i=q.front().first;
			j=q.front().second;
			if(ar[i][j]=='F'||ar[i][j]=='H')
				vec.push_back(pair<int,int>(i,j));
			vis[i][j]=1;
			q.pop();
			for(k=0;k<4;k++)
			{
				if(isok(i+rx[k],j+ry[k])&&fl[i+rx[k]][j+ry[k]]==MAX&&ar[i][j]!='#'&&ar[i+rx[k]][j+ry[k]]!='#')
				{
					//vis[i+rx[k]][j+ry[k]]=1;
					q.push(pair<int,int>(i+rx[k],j+ry[k]));
					fl[i+rx[k]][j+ry[k]]=fl[i][j]+1;
					if(ar[i+rx[k]][j+ry[k]]=='F')
						nf--;
				}
			}
		}
		if(nf==0)
		{

			//flood
			//it=vec.begin();
			cnt=vec.size();
			//---------old----
			//for(i=0;i<cnt;i++)
			//{
			//for(j=0;j<cnt;j++)
			//{
			//dis[i][j]=abs(fl[vec[j].first][vec[j].second]-fl[vec[i].first][vec[i].second]);
			//}
			//}
			//--------------------
			for(i=0;i<cnt;i++)
			{
				//cout<<i<<endl;
				if(i!=0)
				{
					floodfil(i);
				}
				dist(i,cnt);
			}
			cnt--;
			//cout<<cnt<<endl;
			mask=1<<cnt;
			for(i=0;i<mask;i++)
				for(j=0;j<=cnt;j++)
					dp[i][j]=MAX;
			for(i=1;i<mask;i++)
			{
				for(j=0;j<cnt;j++)
				{
					temp=i&~(1<<j);
					if(i&(1<<j)&&temp!=0)
					{
						for(k=0;k<cnt;k++)
						{
							if(temp&(1<<k))
							{
								dp[i][j]=min(dp[temp][k]+dis[k+1][j+1],dp[i][j]);
								//cout<<"if- from "<<temp<<" "<<k<<" to: "<<i<<" "<<j<<" : "<<dp[i][j]<<endl;;
							}
						}
					}
					else if(temp==0)
					{
						dp[i][j]=dis[0][j+1];
						//cout<<"el- "<<i<<" "<<j<<" : "<<dp[i][j]<<endl;;
					}
				}
			}
			mini=INT_MAX;
			for(i=0;i<cnt;i++)
			{
				if(mini>dp[(1<<cnt)-1][i]+dis[i+1][0])
					mini=dp[(1<<cnt)-1][i]+dis[i+1][0];
			}
			//disp();
			if(mini%2==0)
				printf("Case %d: %d\n",l,mini/2);
			else
				printf("Case %d: %d\n",l,mini-mini/2);
		}
		else
			printf("Case %d: -1\n",l);
	}

	return 0;
}
