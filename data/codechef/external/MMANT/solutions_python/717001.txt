#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>
#include <queue>
#include <cassert>
#define rep(i,a,n) for(int i=a;i<n;i++)
#define in(n) scanf("%d",&n)
#define inl(n) scanf("%lld",&n)
#define out(n) printf("%d ",n)
#define outln(n) printf("%d\n",n)
#define outl(n) printf("%lld ",n)
#define outlln(n) printf("%lld\n",n)
#define LL long long 
#define pb push_back
#define inf 84215045
using namespace std;
string g[16];
int hx,hy,r,c;
int Fx[16],Fy[16],Fc=0;
int d[16][16][16][16];
int dx[]={-1,1,0,0};
int dy[]={0,0,-1,1};
int dp[(1<<8)][8];
bool poss(int x,int y)
{
	return x>=0 && x<r && y>=0 && y<c && g[x][y]!='#';
}
int main()
{
	int X,kase=1;
	scanf("%d",&X);
	while(X--)
	{
		memset(d,5,sizeof(d));
		memset(dp,5,sizeof(dp));
		in(r);in(c);
		Fc=0;
		for(int i=0;i<r;i++)
		{
			cin>>g[i];
			for(int j=0;j<c;j++)
			{
				if(g[i][j]=='H')hx=i,hy=j;
				if(g[i][j]=='F')
				{
					Fx[Fc]=i;Fy[Fc++]=j;
				}
			}
		}
		for(int i=0;i<r;i++)for(int j=0;j<c;j++)
		{
			if(g[i][j]=='#')continue;
			queue<int> qx,qy;
			qx.push(i);qy.push(j);
			d[i][j][i][j]=0;
			while(!qx.empty())
			{
				int nx=qx.front(),ny=qy.front();
				qx.pop();qy.pop();
				for(int k=0;k<4;k++)
				{
					if(poss(nx+dx[k],ny+dy[k]))
					{
						if(d[i][j][nx+dx[k]][ny+dy[k]]==inf)
						{
							d[i][j][nx+dx[k]][ny+dy[k]] = d[i][j][nx][ny]+1;
							qx.push(nx+dx[k]);
							qy.push(ny+dy[k]);
						}
					}
				}
			}
		}
		for(int i=0;i<Fc;i++)dp[(1<<i)][i]=d[hx][hy][Fx[i]][Fy[i]];
		int tmp;
		for(int i=1;i<(1<<Fc);i++)
		{
			if(i&(i-1)==0)continue;
			for(int k=0;k<Fc;k++)for(int l=0;l<Fc;l++)
			{
				if(i&(1<<l))
				{
				dp[i][l] =min(dp[i][l],dp[i^(1<<l)][k]+d[Fx[l]][Fy[l]][Fx[k]][Fy[k]]);

				}
			}
		}
		int j;
		int ret=inf;
/*		for(int i=1;i<(1<<Fc);i++)for(int j=0;j<Fc;j++)
		{
			if(dp[i][j]<inf)
			{
				printf("mask is %d last is %d %d\n",i,j,dp[i][j]);
			}
		}*/

		for(int i=0;i<(1<<Fc);i++)
		{
			j = (1<<Fc)-1-i;
			for(int k=0;k<Fc;k++)for(int l=0;l<Fc;l++)
			{
				int d1 = dp[i][k],d2 = dp[j][l],d3=d[Fx[k]][Fy[k]][Fx[l]][Fy[l]];
				int dt = max(d1,d2) - min(d1,d2);
				d3 = max(0,d3-dt);
				ret = min(ret,max(d1,d2)+(d3+1)/2);
			}
		}
		if(ret>=inf)ret=-1;
		printf("Case %d: %d\n",kase,ret);
		kase++;
	}
	return 0;

}
