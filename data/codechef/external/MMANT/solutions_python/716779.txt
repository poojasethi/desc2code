#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define inf 1000000
#define maxN 20
#define maxFood 10
#define maxState (1 << maxFood)
#define maxQ 1000000

using namespace std;

int N, M, K;
int qX[maxQ], qY[maxQ], qIn, qOut;
int D[maxN][maxN][maxN][maxN];
char map[maxN][maxN];
int homex, homey;
int fx[maxFood], fy[maxFood];
int F[maxState][maxFood];

inline void addState(int sx, int sy, int dx, int dy, int d)
{
	if (dx >= 0 && dx < N && dy >= 0 && dy < M && map[dx][dy] != '#' && d < D[sx][sy][dx][dy])
	{
		D[sx][sy][dx][dy] = d;
		qIn = (qIn + 1) % maxQ;
		qX[qIn] = dx;
		qY[qIn] = dy;
	}
}

void BFS(int startx, int starty)
{
	qIn = 0;
	qX[0] = startx, qY[0] = starty;
	qOut = -1;
	D[startx][starty][startx][starty] = 0;
	while (qOut != qIn)
	{
		qOut = (qOut + 1) % maxQ;
		int x = qX[qOut], y = qY[qOut], d = D[startx][starty][x][y];
		addState(startx, starty, x - 1, y, d + 1);
		addState(startx, starty, x, y - 1, d + 1);
		addState(startx, starty, x + 1, y, d + 1);
		addState(startx, starty, x, y + 1, d + 1);
	}
}

// a <= b
inline int calc_ans(int a, int b, int dist)
{
	int fe = b - a;
	if (fe > dist)
		return b;
	return b + (dist - fe ) / 2;
}

int main()
{
	int T;
	scanf("%d", &T);
	for (int z = 1; z <= T; z++)
	{
		scanf("%d %d", &N, &M);
		K = 0;
		for (int i = 0; i < N; i++)
		{
			scanf("%s", map[i]);
			for (int j = 0; j < M; j++)
				if (map[i][j] == 'H')
					homex = i, homey = j;
				else if (map[i][j] == 'F')
				{
					fx[K] = i;
					fy[K] = j;
					K++;
				}
		}
		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++)
				for (int k = 0; k < N; k++)
					for (int l = 0; l < M; l++)
						D[i][j][k][l] = inf;
		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++)
 				BFS(i, j);
		int K2 = 1 << K;
		for (int i = 0; i < K2; i++)
			for (int j = 0; j < K; j++)
			{
				F[i][j] = inf;
				if (i == (1 << j))
					F[i][j] = D[homex][homey][fx[j]][fy[j]];
				else if (i & (1 << j))
				{
					int t = i ^ (1 << j);
					for (int k = 0; k < K; k++)
						if (t & (1 << k))
							F[i][j] = min(F[i][j], F[t][k] + D[fx[k]][fy[k]][fx[j]][fy[j]]);
				}
			}
		int ans = inf;
		for (int i = 1; i < K2; i++)
		{
			int rem = K2 - i - 1;
			for (int j = 0; j < K; j++)
				if (i & (1 << j))
				{
					int a = F[i][j];
					if (rem)
					{
						for (int k = 0; k < K; k++)
							if (rem & (1 << k))
							{
								int b = F[rem][k], dist = D[fx[j]][fy[j]][fx[k]][fy[k]];
								ans = min(ans, calc_ans(min(a, b), max(a, b), dist));
							}
					}
					else
					{
						int b = 0, dist = D[homex][homey][fx[j]][fy[j]];
						ans = min(ans, calc_ans(min(a, b), max(a, b), dist));
					}
				}
		}
		if (K == 0)
			ans = 0;
		cout << "Case " << z << ": ";
		if (ans == inf)
			cout << "-1" << endl;
		else
			cout << ans << endl;
	}
	return 0;
}
