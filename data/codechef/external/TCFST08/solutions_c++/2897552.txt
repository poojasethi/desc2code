
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

int n, unmap[1<<15], seen[1<<15];
char s[15];
void printit(int x) {
	int top = unmap[x];
	rep(i,n) printf("%c",(top & (1<<i))?'+':'-'); pn;
}
int main() {
	int t; gi(t);
	rep(ii,t) {
		int q;
		gi(n); gi(q);
		scanf("%s",s);
		int startState = 0;
		rep(i,n) if(s[i]=='+') startState += (1<<i);
		memset(seen, -1, sizeof seen);
		int curState = startState;
		int stateNo = 0;
		int co=0;
		while(seen[curState] == -1) {
			unmap[stateNo] = curState;
			seen[curState] = stateNo++;
			co++;
			bool fir = (curState & 1);
			if(fir) {
				//gold so change state of last element
				curState ^= (1<<(n-1));
				fir = (curState & 1);
			}
			curState>>=1;
			if(!fir) curState += (1<<(n-1));
		}
		// printf("%d %d %d\n",seen[curState], stateNo, curState);
		int length = stateNo - seen[curState];
		stateNo = seen[curState];
		printf("Experiment #%d:\n",ii+1);
		while(q--) {
			int x; gi(x);
			if(x<co) {
				printit(x);
			} else {
				//x -= stateNo;
				//x %= length;
				printit(x%co);
			}
		}
	}
}
