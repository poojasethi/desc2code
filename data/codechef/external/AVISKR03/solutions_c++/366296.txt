#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<fstream>
#include<iostream>
#include<algorithm>
using namespace std;
#define fill(x,y) memset(x,0,y)
#define REP(x,y) for(int x=0;x<y;++x)
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define lowbit(x) ((x)&-(x))
#define sqr(x) ((x)*(x))
#define cl(x) x.clear()
#define INF 1000000000
#define sz(x) x.size()
#define pb push_back
#define mp make_pair
#define oo (~0U>>1)
#define eps 1e-8
const int maxn=100003;
const int MOD=1000000007;
int n,s,a[maxn],F[maxn],G[maxn],*f=F,*g=G;
int main()
{
    int T;
    for(scanf("%d",&T);T;--T)
    {
        scanf("%d%d",&n,&s);
        int sa=0,tot=0;
        REP(i,n)
        {
            int l,r;
            scanf("%d%d",&l,&r);
            if(l<r)sa+=a[tot++]=r-l;
            s-=l;
        }
        if(s<0||sa<s)
        {
            puts("0");
            continue;
        }
        for(;;)
        {
            sa=0;
            REP(i,tot)
            {
                 a[i]=min(a[i],s);
                 sa+=a[i];
            }
            if(s>sa-s)s=sa-s;else break;
        }
        fill(F,4*s+8),fill(G,4*s+8);
        f[0]=1;
        REP(i,tot-1)
        {
            int d=a[i]+1;
            g[0]=1;
            for(int j=1;j<=s;++j)
            {
                g[j]=g[j-1]+f[j];
                if(g[j]>=MOD)g[j]-=MOD;
                if(j>=d)g[j]+=MOD-f[j-d];
                if(g[j]>=MOD)g[j]-=MOD;
            }
            swap(f,g);
        }
        int d=a[tot-1]+1,ans=0;
        REP(i,d)
        {
            ans+=f[s-i];
            if(ans>=MOD)ans-=MOD;
        }
        printf("%d\n",ans);
    }
    return EXIT_SUCCESS;
}
