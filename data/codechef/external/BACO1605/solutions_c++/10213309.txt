#include<bits/stdc++.h>

#define MOD 1000000007
#define MODSET(d) if ((d) >= MOD) d %= MOD;

using namespace std;

const int LK = 17;

int gcdArray[LK][100005];

int getGCDQuery(int l, int r)
{
    if (l == r)
    {
        return gcdArray[0][l];
    }
    else
    {
        int k = log2(r - l);
        return __gcd(gcdArray[k][l], gcdArray[k][r - (1 << k) + 1]);
    }
}

int main()
{
    #ifdef VSP4
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // VSP4

    long long int t, n, k, i, j, first, last, mid, curr, ans;

    cin >> n >> k;

    for (i = 0; i < n; i++)
    {
        cin >> gcdArray[0][i];
    }

    for (j = 1; j < LK; j++)
    {
        for (i = 0; i < n - (1 << j) + 1; i++)
        {
            gcdArray[j][i] = __gcd(gcdArray[j-1][i], gcdArray[j-1][i + (1 << (j - 1))]);
        }
    }

    ans = 0;

    for (i = 0; i < n; i++)
    {
        first = i;
        last = n-1;
        curr = -1; //impossible initially

        while (first <= last)
        {
            mid = (first + last) / 2;

            if (getGCDQuery(i, mid) >= k)
            {
                curr = mid;
                first = mid + 1;
            }
            else
            {
                last = mid - 1;
            }
        }

        if (curr != -1) //if at all possible gcd >= k
        {
            ans = max(ans, curr - i + 1);
        }

    }

    cout << ans << "\n";

    return 0;
}
