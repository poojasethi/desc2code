#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(false);cin.tie(0);
using namespace std;
#define pb push_back
#define pob pop_back
#define pf push_front
#define pof pop_front
#define mp make_pair
#define all(a) a.begin(),a.end()
#define bitcnt(x) __builtin_popcountll(x) 
#define MOD 5000000007
#define total 100005
#define M 1000000007
typedef unsigned long long int uint64;
typedef long long int int64;
//vector<int>v[1005];
inline void fast(int &x) {
    register int c = getchar_unlocked();
    x = 0;
    int neg = 0;
    for(; ((c<48 || c>57) && c != '-'); c = getchar_unlocked());
    if(c=='-') {
        neg = 1;
        c = getchar_unlocked();
    }
    for(; c>47 && c<58 ; c = getchar_unlocked()) {
        x = (x<<1) + (x<<3) + c - 48;
    }
    if(neg)
        x = -x;
}

struct node{
	int val;
	node(){
		val=0;
	}
	void merge(node &l,node &r){
		val=l.val+r.val;
	}
};
node tree[4*total];
int h;
void upd(int root,int lft,int rht,int id1,int id2){
	if(id1<=lft&&id2>=rht&&tree[root].val==0)
	return ;
	if(id1<=lft&&id2>=rht&&root>=h&&root<=2*h){
		tree[root].val=tree[root].val/2;
		return ;
	}
	if(root>2*h)
	return ;
	int mid=(lft+rht)/2;
	if(id1<mid)
	upd(2*root,lft,mid,id1,id2);
	if(id2>mid)
	upd(2*root+1,mid,rht,id1,id2);
	tree[root].merge(tree[2*root],tree[2*root+1]);	
}
node query(int root,int lft,int rht,int id1,int id2){
	if(id1<=lft&&id2>=rht)
	return tree[root];
	int mid=(lft+rht)/2;
	node l,r,n;
	if(id1<mid)
	l=query(2*root,lft,mid,id1,id2);
	if(id2>mid)
	r=query(2*root+1,mid,rht,id1,id2);
	n.merge(l,r);
	return n;
}
int main(){
	int n,i,j;
	//cin>>n;
	fast(n);
	h=ceil(log2(n));
	h=1<<h;
	for(i=0;i<n;i++){
		//cin>>j;
		fast(j);
		tree[i+h].val=j;
	}
	for(i=h-1;i>=1;i--)
	tree[i].merge(tree[2*i],tree[2*i+1]);
	int q,ch,l,r;
	//cin>>q;
	fast(q);
	while(q--){
		//cin>>ch>>l>>r;
		fast(ch);
		fast(l);
		fast(r);
		l--;
		r--;
		if(ch==1)
		upd(1,h,2*h,l+h,r+h+1);
		else{
			node x=query(1,h,2*h,l+h,r+h+1);
			printf("%d\n",x.val);
		}
		//for(i=1;i<=n+h;i++)
		//cout<<tree[i].val<<" ";
		//cout<<endl;
	}
	return 0;
}