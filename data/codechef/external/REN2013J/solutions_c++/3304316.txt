    #include<iostream>
    #include<vector>
    #include<set>
    #include<stdio.h>
    using namespace std;
    int tr[100010],a[100010];
    inline void fast(int &x) {
register int c = getchar_unlocked();
x = 0;
int neg = 0;
for(; ((c<48 || c>57) && c != '-'); c = getchar_unlocked());
if(c=='-') {
neg = 1;
c = getchar_unlocked();
}
for(; c>47 && c<58 ; c = getchar_unlocked()) {
x = (x<<1) + (x<<3) + c - 48;
}
if(neg)
x = -x;
}
 
    set<int> s;
    int update(int idx,int value)
    {
    while(idx<=100000)
    {
    tr[idx]+=value;
    idx+=((idx)&(-idx));
    }
    }
    int query(int idx)
    {
    int sum=0;
    while(idx>0)
    {
    sum+=tr[idx];
    idx-=((idx)&(-idx));
    }
    return sum;
    }
    int main()
    {
    int n,q,u,v,t;
    fast(n);
    for(int i=1;i<=n;i++){fast(a[i]);update(i,a[i]);s.insert(i);}
    fast(q);
    while(q--)
    {
    fast(t);
    if(t==1)
    {
    fast(u);fast(v);
    set<int>::iterator it;
    it=s.lower_bound(u);
    int k=*it;
    if(it!=s.end())
    while(k<=v)
    {
    update(k,-a[k]+a[k]/2);
    a[k]/=2;
    if(a[k]==0){s.erase(k);it=s.lower_bound(k);}
    else ++it;
    if(it==s.end())break;
	k=*it;
    }
    }
    else
    {
    fast(u);fast(v);
    printf("%d\n",query(v)-query(u-1));
    }
    }
    } 