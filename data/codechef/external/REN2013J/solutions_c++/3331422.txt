#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <cctype>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <iostream>
#include <ctime>
#include <cassert>
#include <sstream>

using namespace std;

#define INF 0x3f3f3f3f
#define ll long long
#define MAXN 100010

int n,vet[MAXN],tree[4*MAXN][10],lazy[4*MAXN],sum[4*MAXN];

void build(int v, int b, int e) {
    lazy[v] = 0;
    if (b == e) {
        sum[v] = vet[b];
        for (int i=9; i>=0; i--) {
            tree[v][i] = vet[b]%2;
            vet[b] /= 2;
        }
        return;
    }
    
    int m = (b+e)/2;
    build(2*v+1,b,m);
    build(2*v+2,m+1,e);
    for (int i=0; i<10; i++)
        tree[v][i] = tree[2*v+1][i] + tree[2*v+2][i];
    sum[v] = sum[2*v+1] + sum[2*v+2];
    return;
}

void adjust(int v, int t) {
    if (t >= 10) {
        for (int i=0; i<10; i++)
            tree[v][i] = 0;
        return;
    }
    
    for (int i=9; i>=t; i--)
        tree[v][i] = tree[v][i-t];
    for (int i=0; i<t; i++)
        tree[v][i] = 0;
        
    sum[v] = 0;
    int carry = 0, pot = 1;
    for (int i=9; i>=0; i--) {
        carry += tree[v][i];
        sum[v] += (carry%2)*pot;
        carry /= 2;
        pot *= 2;
    }
    while (carry > 0) {
        sum[v] += (carry%2)*pot;
        carry /= 2;
        pot *= 2;
    }
    
    return;
}

void update(int v, int b, int e, int i, int j) {
    if (b>j || e<i) return;
    if (sum[v] == 0) return;
    if (i<=b && e<=j) {
        lazy[v]++;
        for (int i=9; i>0; i--)
            tree[v][i] = tree[v][i-1];
        tree[v][0] = 0;
        return;
    }
    
    if (lazy[v]) {
        adjust(2*v+1,lazy[v]); lazy[2*v+1] += lazy[v];
        adjust(2*v+2,lazy[v]); lazy[2*v+2] += lazy[v];
        lazy[v] = 0;
    }
    
    int m = (b+e)/2;
    update(2*v+1,b,m,i,j);
    update(2*v+2,m+1,e,i,j);
    
    for (int i=0; i<10; i++)
        tree[v][i] = tree[2*v+1][i] + tree[2*v+2][i];
    
    return;
}

int query(int v, int b, int e, int i, int j) {
    if (b>j || e<i) return 0;
    if (sum[v] == 0) return 0;
    if (i<=b && e<=j) {
        int ret = 0, carry = 0, pot = 1;
        for (int i=9; i>=0; i--) {
            carry += tree[v][i];
            ret += (carry%2)*pot;
            carry /= 2;
            pot *= 2;
        }
        while (carry > 0) {
            ret += (carry%2)*pot;
            carry /= 2;
            pot *= 2;
        }
        return ret;
    }
    
    if (lazy[v]) {
        adjust(2*v+1,lazy[v]); lazy[2*v+1] += lazy[v];
        adjust(2*v+2,lazy[v]); lazy[2*v+2] += lazy[v];
        lazy[v] = 0;
    }
    
    int m = (b+e)/2;
    return query(2*v+1,b,m,i,j) + query(2*v+2,m+1,e,i,j);
}

int main() {
    scanf("%d",&n);
    for (int i=0; i<n; i++)
        scanf("%d",&vet[i]);
    build(0,0,n-1);
    
    int Q;
    scanf("%d",&Q);
    while (Q--) {
        int t,x,y;
        scanf("%d%d%d",&t,&x,&y);
        x--; y--;
        if (t == 1) {
            update(0,0,n-1,x,y);
        }
        else {
            printf("%d\n",query(0,0,n-1,x,y));
        }
    }
    
    return 0;
}
