#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<vector>
#include<string>
#include<queue>
#define MOD 1000000007
using namespace std;
typedef long long ll;
#define x getchar()
#define y putchar
int ops_cnt;
// Inner helper function
inline bool isOperator(char ch){
	if(ch == '+' || ch == '-' || ch == '*' || ch == '/' )
		return 1;
	else
		return 0;
}
// Fast input
inline string read(){
	string res = "";
	char ch = x;
	while((ch < '0' || ch > '9' ) && !isOperator(ch))
		ch = x;
	while((ch >='0' && ch <= '9') || (isOperator(ch))){
		res = res + ch;
		if(isOperator(ch)) ops_cnt += 1;
		ch = x;
		//cout<<res<<endl;
	}
	return res;
}
inline ll do_this(ll a,ll b,char ch){
	switch(ch){
		case '+' : return (a+b)%MOD;break;
		case '-' : return (a-b)%MOD;break;
		case '*' : return (a*b)%MOD;break;
		case '/' : return (a/b)%MOD;break;
	}
}
//Fast input
inline void inp( ll &n ) {
	n=0;
	int ch=x,sign=1;
	while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=x;}
	while( ch >= '0' && ch <= '9' )
 		n=(n<<3)+(n<<1)+ ch-'0', ch=x;
	n=n*sign;
}
// Fast output
inline void out(ll k) {
	int n=k,i=0;
	char ch[15];
	if(n<=0) {
		if(n==0) y('0');		
		else 	y('-');
		n=n*-1;
		}
	while(n>0) {
		ch[i]=(n%10)+'0';
		n=n/10;
		i++;
		}
	while(i>0) {
		y(ch[i-1]);
		i--;
		}
	y('\n');
	}

int main(){
	char pp[505];
	char ops[505];
	string op;
	while(true)
	{
		int left = 0;
		ll result = 0,cnt = 0;
		scanf("%s",pp);
		op = pp;
		if(op[0] == '0' || op[1] == '\n')
			break;
		for(int i=0; i < op.length();i++) 
			if(isOperator(op.at(i)))
				ops[left++] = op.at(i),cnt+=1;

		//cout<<"OPS size: "<<ops.size()<<endl;
		inp(result);
		if(result >= MOD) result = result%MOD;

		//cout<<"Args size: "<<args.size()<<endl;
		for(int i = 0; i < cnt ; i++){
			ll a;
			inp(a);
			result = do_this(result,a,ops[i]);
		}
		out(result);
	}
	return 0;
}
