#include<bits/stdc++.h>
#define ll long long
#define scl(n) scanf("%lld",&n)
#define sc(n) scanf("%d",&n)
#define inf 8e18
#define mp make_pair
using namespace std;
ll int n,p[200001];
class segment
{
    private:
        ll int l,r;
    public:
        segment(ll int a,ll int b)
        {
            l = a;
            r = b;
        }
        ll int getl()
        {
            return l;
        }
        ll int getr()
        {
            return r;
        }
        ll int pos()
        {
            ll int val = (l+r)/2;
            if(val <= 0)
                return 1;
            else if(val >= n)
                return n;
            else
                return val;
        }
        ll int len()
        {
            if(r-l==1)
                return -100000;
            else
                return min(pos()-l,r-pos());
        }
};
class segment2
{
    private:
        ll int l,r;
    public:
        segment2(ll int a,ll int b):l(a),r(b){}
        ll int getl() const
        {
            return l;
        }
        ll int getr() const
        {
            return r;
        }
};
set<segment> s;
set<segment2> s2;
bool operator <(segment2 a ,segment2 b)
{
    return a.getl() < b.getl();
}
bool operator <(segment a,segment b)
{
    return mp(-a.len(),a.pos()) < mp(-b.len(),b.pos());
}
void rm(ll int l,ll int r)
{
    s.erase(segment(l,r));
    s2.erase(segment2(l,r));
}
void add(ll int l,ll int r)
{
    s.insert(segment(l,r));
    s2.insert(segment2(l,r));
}
ll int insertPerson(int num)
{
    segment curr = *s.begin();
    ll int p = curr.pos();
    rm(curr.getl(),curr.getr());
    add(curr.getl(),p);
    add(p,curr.getr());
    return p;
}
void removePerson(int num)
{
    ll int val=p[num];
    ll int a,b,c,d;
    set<segment2> :: iterator it;
    it=s2.lower_bound(segment2(val,-1));
    a=it->getl();
    b=it->getr();
    it--;
    c=it->getl();
    d=it->getr();
    rm(a,b);
    rm(c,d);
    add(c,b);
}
int main()
{
    int q,i,num=1,j;
    scl(n);
    sc(q);
    add(-inf,inf);
    while(q--)
    {
        sc(i);
        if(i==1)
        {
            p[num]=insertPerson(num);
            cout<<p[num]<<endl;
            num++;
        }
        else
        {
            cin>>j;
            removePerson(j);
        }
    }
    return 0;
}
