#include<iostream>
using namespace std;
#define MAX 200005
long long int Left[MAX],Right[MAX],seat[MAX];
long long int N;
class node
{
public:
   long long int l,r,L,R;
   bool operator>(node &p)
   {
      long long int l1=(r-l)/2,l2=(p.r-p.l)/2;
      if(l==1||r==N)
         l1=r-l;
      if(p.l==1||p.r==N)
         l2=p.r-p.l;
      if(l1>l2)
         return true;
      if(l2>l1)
         return false;
      if(l<p.l)
         return true;
      return false;
   }
};
node heap[MAX];
void Insert(node data,long long int n)//N-1 elements are present
{
   long long int idx=n;
   for(;idx!=1&&data>heap[idx/2];idx=idx/2)
   {
      heap[idx]=heap[idx/2];
      Right[heap[idx].L]=idx;
      Left[heap[idx].R]=idx;
   }
   heap[idx]=data;
   Right[heap[idx].L]=idx;
   Left[heap[idx].R]=idx;
   return ;
}
void adjustAbove(long long int idx)
{
   node temp=heap[idx];
   for(;idx!=1&&temp>heap[idx/2];idx=idx/2)
   {
      heap[idx]=heap[idx/2];
      Right[heap[idx].L]=idx;
      Left[heap[idx].R]=idx;
   }
   heap[idx]=temp;
   Right[heap[idx].L]=idx;
   Left[heap[idx].R]=idx;
}
void Delete(long long int n)   //Nth index is available BEFORE Deleting
{
   Right[heap[1].L]=0;
   Left[heap[1].R]=0;
   if(1==n)
      return ;
   --n;
   long long int idx=2;
   for(;idx<=n;)
   {
      if(idx<n&&heap[idx+1]>heap[idx])
         ++idx;
      if(heap[idx]>heap[n+1]==false)
         break;
      heap[idx/2]=heap[idx];

      Right[heap[idx/2].L]=idx/2;
      Left[heap[idx/2].R]=idx/2;
      idx=idx*2;
   }
   heap[idx/2]=heap[n+1];
   Right[heap[idx/2].L]=idx/2;
   Left[heap[idx/2].R]=idx/2;
}
long long int n;
void Display()
{
   cout<<endl;
   cout<<endl;
   for(int i=1;i<=n;++i)
      cout<<heap[i].L<<"     "<<heap[i].R<<"      "<<heap[i].l<<"      "<<heap[i].r<<endl;
   cout<<endl;
   cout<<endl;
   for(int i=1;i<=10;++i)
      cout<<Left[i]<<"  "<<Right[i]<<"       ";
   cout<<endl;
   cout<<endl;
}
void DeleteExtra(int i,int n)
{
   Right[heap[i].L]=0;
   Left[heap[i].R]=0;
   bool delIsGreater=heap[n]>heap[i];
   if(i==n)
      return ;
   --n;
   if(delIsGreater)
   {
      //cout<<"IT IS WORKING"<<endl;
      for(;i!=1&&heap[n+1]>heap[i/2];i=i/2)
      {
         heap[i]=heap[i/2];
         Left[heap[i].R]=i;
         Right[heap[i].L]=i;
      }
      heap[i]=heap[n+1];
      Left[heap[i].R]=i;
      Right[heap[i].L]=i;
      return ;
   }
   long long int idx=2*i;
   for(;idx<=n;)
   {
      if(idx<n&&heap[idx+1]>heap[idx])
         ++idx;
      if(heap[idx]>heap[n+1]==false)
         break;
      heap[idx/2]=heap[idx];

      Right[heap[idx/2].L]=idx/2;
      Left[heap[idx/2].R]=idx/2;
      idx=idx*2;
   }
   heap[idx/2]=heap[n+1];
   Right[heap[idx/2].L]=idx/2;
   Left[heap[idx/2].R]=idx/2;
}
int main()
{
   node temp1,temp2;
   long long int Q,choice,person,length,i,position,x,y;
   cin>>N>>Q;
   person=0,n=1;
   for(i=0;i<MAX;++i)
   {
      Left[i]=Right[i]=0;
   }
   heap[1].l=1;
   heap[1].r=N;
   heap[1].L=0;
   heap[1].R=0;
   while(Q--)
   {
      //Display();
      cin>>choice;
      if(choice==1)
      {
         temp2=temp1=heap[1];
         Delete(n);

         --n;
         length=temp1.r-temp1.l+1;
         if(temp1.l==1)
            position=1;
         else if(temp1.r==N)
            position=N;
         else
            position=temp1.l+(length-1)/2;
         cout<<position<<endl;
         //Display();
         seat[++person]=position;
         if(position==1||length<=2)     ////NO Left BLOCK IS ADDING
         {
            Right[temp1.L]=-person;
            Left[person]=-temp1.L;
         }
         else     //Left BLOCK IS ADDING
         {
            temp1.R=person;temp1.L=temp1.L;
            temp1.r=position-1;temp1.l=temp1.l;
            ++n;
            Insert(temp1,n);
         }
         if(position==N||length==1)     ////NO Right BLOCK IS ADDING
         {
            Left[temp2.R]=-person;
            Right[person]=-temp2.R;
         }
         else      //Right BLOCK IS ADDING
         {
            temp2.l=position+1;
            temp2.L=person;
            ++n;
            Insert(temp2,n);
         }
      }
      else if(choice==2)
      {
         cin>>choice;
         if(Left[choice]<=0&&Right[choice]<=0)
         {
            temp1.l=temp1.r=seat[choice];
            temp1.L=-Left[choice];
            temp1.R=-Right[choice];

            ++n;
            Insert(temp1,n);
            continue;
         }
         if(Left[choice]<=0)
         {
            heap[Right[choice]].l--;
            heap[Right[choice]].L=-Left[choice];
            adjustAbove(Right[choice]);
            continue;
         }
         if(Right[choice]<=0)
         {
            heap[Left[choice]].r++;
            heap[Left[choice]].R=-Right[choice];
            adjustAbove(Left[choice]);
            continue;
         }
         x=heap[Right[choice]].r;
         y=heap[Right[choice]].R;
         DeleteExtra(Right[choice],n);
         --n;
         heap[Left[choice]].R=y;
         heap[Left[choice]].r=x;
         adjustAbove(Left[choice]);
      }
   }
   return 0;
}
