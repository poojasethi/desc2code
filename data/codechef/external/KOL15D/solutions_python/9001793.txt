/*
*/

//#pragma comment(linker, "/STACK:16777216")
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>  
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
#include <assert.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash

#define eps 1e-8
#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 128

const int N = 200005;

using namespace std;

long long n;
int tests;
set<pair<long long, pair<long long, long long> > > segments[10];
set<long long> occup;

long long get_best(long long l,long long r)
{
	if (l==1&&r==n)
		return n;
	if (l==1)
		return r-1;
	if (r==n)
		return r-l;
	return (r-l)/2;
}

void remove_segment(long long l,long long r)
{
	if (l>r)
		return ;
	long long len=(r-l+1);
//	cout<<l<<" "<<r<<"%"<<get_best(l,r)<<endl;
	
	segments[len%2].erase(make_pair(-get_best(l,r),make_pair(l,r)));
}

void add_segment(long long l,long long r)
{
	if (l>r)
		return ;
	long long len=r-l+1;
//	cout<<l<<" "<<r<<"%!"<<get_best(l,r)<<endl;
	
	segments[len%2].insert(make_pair(-get_best(l,r),make_pair(l,r)));
}

void remove_person(long long id)
{
	occup.erase(id);
}

long long get_next(long long id)
{
	set<long long>::iterator it;
	it=occup.lower_bound(id);
	return *it;
}

long long get_prev(long long id)
{
	set<long long>::iterator it;
	it=occup.lower_bound(id);
	--it;
	return (*it);
}

long long get_best_position(long long l,long long r)
{
	if (l==1&&r==n)
		return 1;
	if (r==n)
		return r;
	if (l==1)
		return l;	
	return (l+r)/2;
}

long long SITS_AT[N];
int CNT=1;

void sit_person(pair<long long, long long> p)
{
	long long best_position=get_best_position(p.first,p.second);
	
	//cout<<p.first<<"! "<<p.second<<" "<<best_position<<endl;
	
	remove_segment(p.first,p.second);
	add_segment(p.first,best_position-1);
	add_segment(best_position+1,p.second);
	occup.insert(best_position);
	SITS_AT[CNT]=best_position;
	++CNT;
	cout<<best_position<<endl;
}

bool better( pair<long long, long long>  p1,pair<long long, long long>  p2)
{
	long long dist1,dist2;
	dist1=get_best(p1.first,p1.second);
	dist2=get_best(p2.first,p2.second);
	if (dist1!=dist2)
		return (dist1>dist2);
	return (p1.first<p2.first);
}

pair<long long, long long> get_best(set<pair<long long, pair<long long, long long> > > &s)
{
	if (s.size()==0)
		return make_pair(-1,-100);
		
	set<pair<long long, pair<long long, long long> > > ::iterator it;
	
	it=s.begin();
	pair<long long, pair<long long, long long> > p=(*it);
	return p.second;
}

void show_state()
{
	return ;
	set<long long>::iterator it;
	cout<<"seats : ";
	for (it=occup.begin();it!=occup.end();it++)
	{
		cout<<*it<<"  ";
	}
	cout<<endl;
	
	cout<<"segments: "<<endl;
	set<pair<long long, pair<long long,long long> > > ::iterator it2;
	for (it2=segments[0].begin();it2!=segments[0].end();it2++)
	{
		pair<long long, pair<long long, long long> > p=*it2;
		cout<<p.second.first<<" "<<p.second.second<<endl;
	}
	for (it2=segments[1].begin();it2!=segments[1].end();it2++)
	{
		pair<long long, pair<long long, long long> > p=*it2;
		cout<<p.second.first<<" "<<p.second.second<<endl;
	}
	cout<<endl;
}
int main(){
//	freopen("path2.in","r",stdin);
//	freopen("path2.out","w",stdout);
	//freopen("F:/in.txt","r",stdin);
	//freopen("F:/output.txt","w",stdout);
	ios_base::sync_with_stdio(0);
	//cin.tie(0);
	
//	cout<<get_best(-1,-100)<<endl;
	
	cin>>n;
	cin>>tests;
	
	segments[n%2].insert(make_pair(-n,make_pair(1,n)));
	occup.insert(0);
	occup.insert(n+1);
	
	for (;tests;--tests)
	{
		show_state();
		
		int tp;
		cin>>tp;
		if (tp==1)// new folk
		{
			// todo empty
			pair<long long,long long> P1=get_best(segments[0]);
			pair<long long,long long> P2=get_best(segments[1]);
			if (better(P1,P2))
			{
				sit_person(P1);
			}
			else
			{
				sit_person(P2);
			}
		}
		else // person leaves
		{
			long long id;
			cin>>id;
			id=SITS_AT[id];
			
			remove_person(id);
			long long prev=get_prev(id);
			long long nxt=get_next(id);
			remove_segment(prev+1,id-1);
			remove_segment(id+1,nxt-1);
			//cout<<"@"<<prev<<" "<<nxt<<endl;
			add_segment(prev+1,nxt-1);
		}
	}
	
	return 0;
}