/*
	                         Complexity-> O(Bruce_Lee)

/************************* The Beauty of Code begins *************************/

#include <bits/stdc++.h>
using namespace std;

const int maxn = 200100;
const long long INF = 2000000000000000000LL;
long long n;
long long pos[maxn];

struct segment {
	    long long l, r;
	    segment(long long _L, long long _R) 
	    {
	   	     l = _L;
	   	     r = _R;
	    }
	    long long bestPos()
		{
			long long ans = (l + r) / 2;
			if (ans <= 0)
			{
				ans = 1;
			}
			if (ans > n) ans = n;
			return ans;
		}
		long long bestLen()
		{
			if (r - l + 1 <= 2)
			{
				return -100000;
			}
			return min(bestPos() - l, r - bestPos());
		}	
};

bool operator<(segment y, segment x)
{
	return make_pair(-y.bestLen(), y.bestPos()) < make_pair(-x.bestLen(), x.bestPos());
}

struct forRemSeg {
	   long long L, R;
	   forRemSeg(long long _L, long long _R) 
	   {
	   	     L = _L;
	   	     R = _R;
	   }
};

bool operator < (forRemSeg x, forRemSeg y)
{
	 return x.L < y.L;
}

set< segment > segs;
set< forRemSeg > seg1;

void add(long long l, long long r)
{
	 segs.insert(segment(l, r));
	 seg1.insert(forRemSeg(l, r));
}

void rem(long long l, long long r)
{
	 segs.erase(segment(l, r));
	 seg1.erase(forRemSeg(l, r));
}

void insert(long long x)
{
	 segment Best = *segs.begin();
	 pos[x] = Best.bestPos();
	
	 rem(Best.l, Best.r);
	 add(Best.l, pos[x]);
	 add(pos[x], Best.r);
	
     return;
}

void remove(long long x)
{
     long long Position = pos[x];
     
     set< forRemSeg >::iterator it = seg1.lower_bound(forRemSeg(Position, -1));
     forRemSeg rR = *it;
     it--;
     forRemSeg lL = *it;
     
     long long left = lL.L;
     long long right = rR.R;
     
     rem(left, Position);
     rem(Position, right);
     add(left, right);
     return;
}

int main()
{
   ios::sync_with_stdio(false);
   
   int Q;
   cin >> n >> Q;
   
   add(-INF, INF);
   
   long long id = 1;
   
   while (Q--) {
          int op;
          cin >> op;
          if (op == 1) {
                    insert(id);
                    cout << pos[id] << endl;
                    id++;
          }
          else {
          	    long long x;
          	    cin >> x;
                    remove(x);
          }
          
   }
   return 0;
}