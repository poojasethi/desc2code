#include <iostream>
#include<algorithm>
using namespace std;
#define MAX 10000000
long long int s[MAX];
long long int tree[MAX];
void build(int n,int l,int r)
{
if(l>r)
return;
if(l==r)
{
tree[n]=s[l];
return;
}
build(n*2,l,(l+r)/2);
build(n*2+1,1+(l+r)/2,r);
tree[n]=tree[n*2]+tree[n*2+1];
}
void update(int n,int l,int r,int x,int y)
{
if(x>r||x<l)
return;
if(l==r)
{
if(l==x)
tree[n]-=y;
return;
}
update(n*2,l,(l+r)/2,x,y);
update(1+n*2,1+(l+r)/2,r,x,y);
tree[n]=tree[n*2]+tree[n*2+1];
}
long long int query(int n,int l,int r,int x,int y)
{
if(l>r||l>y||r<x)
return 0;
if(l>=x&&r<=y)
return tree[n];
long long int q1=query(n*2,l,(l+r)/2,x,y);
long long int q2=query(1+n*2,1+(l+r)/2,r,x,y);
long long int op=q1+q2;
return op;
}
int main() 
{
int t,num,q,x1,y1,c,i;
scanf("%d",&t);
while(t--)
{
scanf("%d%d",&num,&q);
for(i=1;i<=num;i++)
scanf("%lld",&s[i]);
build(1,1,num);
while(q--)
{
scanf("%d",&c);
if(c==0)
{
scanf("%d%d",&x1,&y1);
printf("%lld\n",query(1,1,num,x1,y1));
}
else if(c==1)
{
scanf("%d%d",&x1,&y1);
update(1,1,num,x1,y1);
}
}
}
	return 0;
}