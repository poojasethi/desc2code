#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int N = 111;
const ll inf = 1e18;

ll dp[N][N][3][N]; // pos A, pos B, last used, len

char a[N], b[N];

ll x, y;
ll go(int n, int m, int last, int len, ll cost) {
    if(n == 0 and m == 0) {
        return cost;
    }

    ll & ret = dp[n][m][last][len];
    if(ret != -1) return ret;
    ret = inf;
    
    if(n > 0 and m > 0) {
        if(a[n] == b[m]) {
            // no change
            ret = min(ret, cost + go(n - 1, m - 1, 2, 0, 0));
        } else {
            // replace
            ret = min(ret, cost + go(n - 1, m - 1, 2, 1, 1));
        }
    }

    if(n > 0) {
        // delete
        if(last == 0) {
            ret = min(ret, go(n - 1, m, 0, len + 1, cost + 1));
        } else {
            ret = min(ret, cost + go(n - 1, m, 0, 1, x + 1));
        }
    }

    if(m > 0) {
        // insert
        if(last == 1) {
            ret = min(ret, go(n, m - 1, 1, len + 1, min(cost + 1, y)));
        } else {
            ret = min(ret, cost + go(n, m - 1, 1, 1, x + 1));
        }
    }
    return ret;
}

int main() {
    int T; gi(T);
    rep(z, T) {
        int n, m;
        gi(n), gi(m);
        scanf("%s", a + 1);
        scanf("%s", b + 1);
        scanf("%lld %lld", &x, &y);
        fill(dp, -1);
        ll ans = go(n, m, 2, 0, 0);
        printf("Case %d: %lld\n", z + 1, ans);
    }
    return 0;
}