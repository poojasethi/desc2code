#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long
#define pb push_back
const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}

string s1,s2;
int x,y;
int DP[105][105];
int dp(int i,int j)
{
  if(i==0 && j==0)
  {
    return 0;
  }
  /* add some stuff */
  if(i==0)
  {
    return min(x+j,y);
  }

  /* delete everything */
  if(j==0)
  {
    return x+i;
  }

  if(DP[i][j]!=-1)
    return DP[i][j];

  // cout<<"xxx\n";
  int o1=infinity;
  if(s1[i-1]==s2[j-1])
      o1=dp(i-1,j-1);
  else
      o1=1+dp(i-1,j-1);
  int o2=infinity;
    for(int rm=1;rm<=i;++rm)
    {
      o2=min(o2, x+rm + dp(i-rm,j) );
    }

  
  int o3=infinity;
    for(int ad=1;ad<=j;++ad)
    {
      o3=min(o3,  min(x+ad,y)+dp(i,j-ad));
    }

  return DP[i][j]=min(o1,min(o2,o3));
}
int main()
{
  std::ios::sync_with_stdio(false);
  
  int t;
  cin>>t;
  int tt=0;
  while(t--)
  { 
    cout<<"Case "<<++tt<<": ";
    memset(DP,-1,sizeof DP);
    int n,m;
    cin>>n>>m;
    cin>>s1>>s2;
    cin>>x>>y;
    cout<<dp(n,m)<<"\n";
  }





  
}