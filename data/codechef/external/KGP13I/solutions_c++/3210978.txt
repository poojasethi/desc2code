/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%d",&n);
#define MAXN 111
int N,M;
int x,y;
char A[MAXN],B[MAXN];
int dp[MAXN][MAXN][MAXN][4];
bool done[MAXN][MAXN][MAXN][4];
int cnt=0;

int rec(int i,int j,int c,int flag)
{
    if(done[i][j][c][flag])
        return dp[i][j][c][flag];

    if(i==N&&j==M)
    {
        int ret;
        if(flag==0)
            ret=0;
        else if(flag==1)
            ret= min(x+c,y);
        else
            ret= x+c;
        return ret;
    }
    if(i==N)
    {
        if(flag==2)
            return x+c+rec(i,j+1,1,1);
        else if(flag==1)
            return rec(i,j+1,c+1,1);
        else if(flag==0)
            return rec(i,j+1,1,1);
    }
    if(j==M)
    {
        if(flag==1)
            return min(x+c,y)+rec(i+1,j,1,2);
        else if(flag==2)
            return rec(i+1,j,c+1,2);
        else if(flag==0)
            return rec(i+1,j,1,2);
    }

    //replace or match
    int ans=INT_MAX;
    int add=(A[i]!=B[j]);
    if(flag==1)
        add+=min(x+c,y);
    if(flag==2)
        add+=x+c;

    ans=min(ans,rec(i+1,j+1,0,0)+add);


    //insert
    add=0;
    if(flag==2)
    {
        add=x+c;
        ans=min(ans,add+rec(i,j+1,1,1));
    }
    else if(flag==1)
    {
        ans=min(ans,add+rec(i,j+1,c+1,1));
    }
    else if(flag==0)
    {
        ans=min(ans,add+rec(i,j+1,1,1));
    }

    //delete
    add=0;
    if(flag==1)
    {
        add=min(x+c,y);
        ans=min(ans,add+rec(i+1,j,1,2));
    }
    else if(flag==2)
    {
        ans=min(ans,add+rec(i+1,j,c+1,2));
    }
    else if(flag==0)
    {
        ans=min(ans,add+rec(i+1,j,1,2));
    }
    done[i][j][c][flag]=1;
    return dp[i][j][c][flag]=ans;

}
int main()
{
    //freopen("in","r",stdin);

    int test;s(test);
    int kase=0;
    while(test--)
    {
        kase++;
        s(N);s(M);
        for(int i=0;i<MAXN;i++)
            for(int j=0;j<MAXN;j++)
                for(int k=0;k<MAXN;k++)
                    for(int l=0;l<4;l++)
                        done[i][j][k][l]=0;
        scanf("%s",A);
        scanf("%s",B);
        s(x);s(y);

        int ans=rec(0,0,0,0);

        printf("Case %d: %d\n",kase,ans);
    }
    return 0;
}

