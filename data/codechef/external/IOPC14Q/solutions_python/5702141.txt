#include <cstdio>
#include <iostream>
#include <fstream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <string>
#include <ctime>
#include <cassert>
#include <utility>
#include <numeric>

using namespace std;

#define INF 1000000000
#define MAXN 55

int T, N, M;
int rowSum[MAXN];
int colSum[MAXN];
int A[MAXN][MAXN];

int n;
int sink, source;
vector<int> G[2 * MAXN];
int cap[2 * MAXN][2 * MAXN];
int pr[2 * MAXN];
queue<int> Q;
bool v[2 * MAXN];

void addEdge(int a, int b, int _cap) {
	G[a].push_back(b);
	G[b].push_back(a);
	cap[a][b] = _cap;
}

void removeEdge(int a, int b) {
	G[a].erase(find(G[a].begin(), G[a].end(), b));
	G[b].erase(find(G[b].begin(), G[b].end(), a));
}

bool bfs() {
	memset(v, false, sizeof(v));
	memset(pr, -1, sizeof(pr));
	while (!Q.empty()) {
		Q.pop();
	}
	
	v[source] = true;
	Q.push(source);
	
	while (!Q.empty()) {
		int p = Q.front(); Q.pop();
		if (p == sink) {
			continue;
		}
		
		for (vector<int> :: iterator it = G[p].begin(); it != G[p].end(); it++) {
			int x = *it;
			if (cap[p][x] > 0 && !v[x]) {
				v[x] = true;
				pr[x] = p;
				Q.push(x);
			}
		}
	}
	
	return v[sink];
}

bool canMatch() {
	int flow = 0;
	while (bfs()) {
		int flmin = INF;
		for (int k = sink; k != source; k = pr[k]) {
			flmin = min(flmin, cap[pr[k]][k]);
		}
		for (int k = sink; k != source; k = pr[k]) {
			cap[pr[k]][k] -= flmin;
			cap[k][pr[k]] += flmin;
		}
		flow += flmin;
	}
	
	for (vector<int> :: iterator it = G[source].begin(); it != G[source].end(); it++) {
		int x = *it;
		if (cap[source][x] > 0) {
			return false;
		}
	}
	for (vector<int> :: iterator it = G[sink].begin(); it != G[sink].end(); it++) {
		int x = *it;
		if (cap[x][sink] > 0) {
			return false;
		}
	}
	
	return true;
}

bool build() {
	if (!canMatch()) {
		return false;
	}
	
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			removeEdge(i, j + N);
			
			if (cap[i][j + N] == 0) {
				cap[source][i]++;
				cap[i][source]--;
				cap[j + N][sink]++;
				cap[sink][j + N]--;
				
				if (canMatch()) {
					A[i][j] = 0;
				}
				else {
					cap[source][i]--;
					cap[i][source]++;
					cap[j + N][sink]--;
					cap[sink][j + N]++;
					A[i][j] = 1;
				}
			}
			else {
				A[i][j] = 0;
			}
		}
	}
	
	return true;
}

bool solve() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			addEdge(i, j + N, 1);
		}
	}
	n = N + M + 2;
	source = n - 2;
	sink = n - 1;
	
	for (int i = 0; i < N; i++) {
		addEdge(source, i, rowSum[i]);
	}
	for (int i = 0; i < M; i++) {
		addEdge(i + N, sink, colSum[i]);
	}
	
	bool ok = build();
	
	for (int i = 0; i < n; i++) {
		G[i].clear();
	}
	memset(cap, 0, sizeof(cap));
	
	return ok;
}

int main() {
//	freopen("date.in", "r", stdin);
//	freopen("date.out","w", stdout);
	cin.sync_with_stdio(false);
	
	cin >> T;
	for (int t = 1; t <= T; t++) {
		cin >> N >> M;
		for (int i = 0; i < N; i++) {
			cin >> rowSum[i];
		}
		for (int i = 0; i < M; i++) {
			cin >> colSum[i];
		}
		bool ok = solve();
		cout << "TestCase #:" << t << '\n';
		if (!ok) {
			cout << -1 << '\n';
		}
		else {
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					cout << A[i][j];
				}
				cout << '\n';
			}
		}
	}
	
//	srand(time(0));
//	N = M = 50;
//	memset(rowSum, 0, sizeof(rowSum));
//	memset(colSum, 0, sizeof(colSum));
//	for (int i = 0; i < N; i++) {
//		for (int j = 0; j < M; j++) {
//			A[i][j] = rand() % 2;
//			rowSum[i] += A[i][j];
//			colSum[j] += A[i][j];
//		}
//	}
//	
//	cout << N << ' ' << M << endl;
//	for (int i = 0; i < N; i++) {
//		cout << rowSum[i] << ' ';
//	}
//	cout << '\n';
//	for (int i = 0; i < M; i++) {
//		cout << colSum[i] << ' ';
//	}
//	cout << '\n';
	
	return 0;
}
