#include <iostream>
#include <cstring>

using namespace std;

int source, sink, n, m;
int cap[201][201], vis[201], node, a[201][201], aa[201][201];
int totr, totc, r[201], c[201];

bool flow(int pos)
{
    if(vis[pos] == node) return false;
    vis[pos] = node;
    for(int i = 0; i < n+m+2; i++) {
        if(!cap[pos][i]) continue;
        if(i == sink) {
            cap[pos][i]--;
            cap[i][pos]++;
            if(pos < n) {
                a[pos][i] = 1;
            }
            else {
                a[i][pos] = 0;
            }
            return true;
        }
        if(flow(i)) {
            cap[pos][i]--;
            cap[i][pos]++;
            if(pos < n) {
                a[pos][i] = 1;
            }
            else {
                a[i][pos] = 0;
            }
            return 1;
        }
    }
    return false;
}

int main()
{
    int t;
    ios_base::sync_with_stdio(false);
    cin >> t;
    int cs = 0;
    while(t--) {
        cin >> n >> m;
        cs++;
        cout << "TestCase #:" << cs << endl;
        totr = totc = 0;
        for(int i = 0; i < n; i++) cin >> r[i], totr += r[i];
        for(int j = 0; j < m; j++) cin >> c[j], totc += c[j];
        source = n+m;
        sink = n+m+1;
        memset(cap, 0, sizeof(cap));
        memset(aa, 0, sizeof(aa));
        memset(a, 0, sizeof(a));
        memset(vis, 0, sizeof(vis));
        for(int i = 0; i < n; i++) {
            cap[source][i] = r[i];
        }

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                cap[i][j+n] = 1;
            }
        }

        for(int i = 0; i < m; i++) {
            cap[i+n][sink] = c[i];
        }
        int ans = 0;
        node = 1;
        while(flow(source)) {
            node++;
            ans++;
        }
        //cout << ans << endl;
        if(ans != totr || totr != totc) {
            cout << -1 << endl;
            continue;
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(cap[j+n][i] == 1) {
                    cap[j+n][i] = 0;
                    cap[source][i]++;
                    cap[i][source]--;
                    cap[j+n][sink]++;
                    cap[sink][j+n]--;
                    node++;
                    if(!flow(source)) {
                        cap[j+n][i] = 1;
                        cap[source][i]--;
                        cap[i][source]++;
                        cap[j+n][sink]--;
                        cap[sink][j+n]++;
                    }
                }
                else {
                    cap[i][n+j] = 0;
                }
            }
        }

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                cout << cap[j+n][i];
            }
            cout << endl;
        }

    }
}
