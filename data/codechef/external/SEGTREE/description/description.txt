
While learning about data structures, Ira came across the well known Segment Tree data structure. To learn about it, you may refer to  this link .


Segment tree is built using the following recursive algorithm (following pseudo code resembles C) -
Define  node  as segment tree node. And, make_node()  is a function which returns the pointer to a segment tree node created by the function.

 function node * build_segtree(int l, int r) {
      node * root = make_node();
      if (l  != r) {
          m = (l+r)/2     /* Integer division */
          root -> left = build_segtree(l, m);
          root -> right = build_segtree(m+1, r);
      }
      return root;
 }


To make a segment tree for an array of length n , we call the above function as -
 node * segtree_root = build_segtree(1, n) . 
 Now, Ira is interested in number of nodes that will be created by the above algorithm, i.e, space complexity. Formally, she wants to find out - how many times function  make_node()  will be called if array of length n is given. Can you help her ?

 Note : Check explanation section for understanding the structure of segment tree better. 

Input

The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer n denoting the length of the array for which segment tree need to be built.


Output

For each test case, output a single line containing the answer to the corresponding test case, i.e., number of nodes in the segment tree. 


Constraints

1 ≤ T ≤ 100000
1 ≤ n ≤ 2 × 10 ^ 9  


Example
Input:
2
1
5
Output:
1
9

Explanation
Example case 2. This is how the segment tree looks -
  Circles represent segment tree node. Number written in the circles represent the order in which those nodes will be created.

