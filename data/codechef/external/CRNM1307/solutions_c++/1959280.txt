#include<iostream>
#include<stdio.h>
#include<string.h>
#include<vector>
#include<algorithm>
#include<map>
#include<math.h>
#include<climits>
using namespace std;

#define mod 1000000007

long long dp[101][51][51][101], n, m;

long long fun(int sum, int r1, int r2, int k)
{
    if(dp[sum][r1][r2][k]==-1)
    {
        if(k==0)
            return 0;
        if((sum==0)&&(k==1))
            return 1;
        if((sum==0)&&(k!=1))
            return 0;
        long long temp=0, temp1=0, temp2=0, temp3=0, temp4=0;
        if(r1==r2)
        {
            if(((sum-r1-1)>=0)&&((sum-1-r2)>=0))
                temp1=fun(sum-1, r1, r2, k-1);
            if(((r1-1)>=0)&&((sum-1-r2)>=0))
                temp2=fun(sum-1, r1-1, r2, k-1);
            if(((sum-r1-1)>=0)&&((r2-1)>=0))
                temp3=fun(sum-1, r1, r2-1, k-1);
            if(((r1-1)>=0)&&((r2-1)>=0))
                temp4=fun(sum-1, r1-1, r2-1, k-1);
        }
        else
        {
            if(((sum-r1-1)>=0)&&((sum-1-r2)>=0))
                temp1=fun(sum-1, r1, r2, k);
            if(((r1-1)>=0)&&((sum-1-r2)>=0))
                temp2=fun(sum-1, r1-1, r2, k);
            if(((sum-r1-1)>=0)&&((r2-1)>=0))
                temp3=fun(sum-1, r1, r2-1, k);
            if(((r1-1)>=0)&&((r2-1)>=0))
                temp4=fun(sum-1, r1-1, r2-1, k);
        }
        temp=temp1+temp2+temp3+temp4;
        temp%=mod;
        dp[sum][r1][r2][k]=temp;
    }
    return dp[sum][r1][r2][k];
}

int main()
{
    long long t, k;
    scanf("%lld",&t);
    for(int i=0; i<101; i++)
        for(int j=0; j<51; j++)
            for(int l=0; l<51; l++)
                for(int l2=0; l2<101; l2++)
                    dp[i][j][l][l2]=-1;
    while(t--)
    {
        scanf("%lld%lld%lld",&n,&m,&k);
        long long ans=fun(n+m-2, n-1, n-1, k);
        printf("%lld\n",ans);
    }
    return 0;
}
