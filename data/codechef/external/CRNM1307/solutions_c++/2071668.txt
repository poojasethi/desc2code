#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <queue>
#include <cstdio>
#include <set>
#include <map>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <cassert>
#include <limits.h>

typedef unsigned long long ULL;
typedef long long LL;

#define MIN(a,b) (a<b?a:b)
#define MAX(a,b) (a>b?a:b)
#define ABS(a) ((a>0)?a:-a)

#define SZ(a) ((int)a.size())
#define PB(a) push_back(a)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define REP(i,n) FOR(i,0,(int)(n-1))
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define printv(v) REP(i,SZ(v))printf("%d ",v[i]);
#define mp(a,b) make_pair(a,b)
#define PII pair<int,int>
#define MOD 1000000007
using namespace std;
LL dp[105][52][52][105];
void pre()
{
    dp[0][1][1][1]=1;
    int max1;
    for(int step=1;step<=100;step++)
    {
        max1=step+1;
        if(max1>50)
        max1=50;

        for(int cab=1;cab<=max1;cab++)
        {
            for(int sher=1;sher<=max1;sher++)
            {
                for(int shots=1;shots<=102;shots++)
                {
                    if(cab==sher)
                    dp[step][cab][sher][shots]=(dp[step-1][cab-1][sher][shots-1]+dp[step-1][cab][sher][shots-1]+dp[step-1][cab][sher-1][shots-1]+dp[step-1][cab-1][sher-1][shots-1])%MOD;

                    else if(cab!=sher)
                    dp[step][cab][sher][shots]=(dp[step-1][cab-1][sher][shots]+dp[step-1][cab][sher][shots]+dp[step-1][cab][sher-1][shots]+dp[step-1][cab-1][sher-1][shots])%MOD;
                }
            }
        }
    }
}
int main()
{
    int t,n,m,k;
    scanf("%d",&t);

    for(int i=0;i<=102;i++)
    {
        for(int j=0;j<=52;j++)
        {
            for(int k=0;k<=52;k++)
            {
                for(int a=0;a<=102;a++)
                {
                    dp[i][j][k][a]=0;
                }
            }
        }
    }

    pre();
    while(t--)
    {
        scanf("%d %d %d",&n,&m,&k);
        if(k==0)
        cout<<"0\n";

        else cout<<dp[n+m-2][n][n][k]<<"\n";

    }
    return 0;
}
