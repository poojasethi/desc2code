#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
using namespace std;

typedef long long ll;
ll cnt = 0;
const ll MOD = 1000000007;

const int MM = 50;
const int SS = 99;
const int KK = 101;

ll dp[SS][MM][MM][KK];
bool mark[SS][MM][MM][KK];


int dx0[4] = {1, 0, 1, 0};
int dx1[4] = {1, 0, 0, 1};

int N, M, K;

ll build(int steps, int x0, int x1, int k)
{
   // if(steps == 1 && x0== 0 && x1==0 && k==2)cout<<"hurra"<<endl;
    cnt++;
    int x3, x4;
    ll sum = 0;

    if(mark[steps][x0][x1][k] == 1)return dp[steps][x0][x1][k];

    if(k>steps+1)return 0;

    if(x0 == x1)
    {
            if(k<2)return 0;
            for(int i=0; i<4; i++)
            {
            x3 = x0-dx0[i];
            x4 = x1-dx1[i];
            if(x3>=0 && x4>=0 && steps>0)
            {
                sum+= build(steps-1, x3, x4, k-1);
                if(sum>=MOD)sum-=MOD;
            }
            }
    }
    else
    {
            if(k<1)return 0;
            for(int i=0; i<4; i++)
            {
            x3 = x0-dx0[i];
            x4 = x1-dx1[i];
            if(x3>=0 && x4>=0 && steps>0)
            {
                sum+= build(steps-1, x3, x4, k);
                if(sum>=MOD)sum-=MOD;
            }
            }
    }
    dp[steps][x0][x1][k] = sum;
    mark[steps][x0][x1][k] = 1;
    return sum;


}

void precompute()
{
    memset(mark, 0, sizeof(mark));
    memset(dp, 0, sizeof(dp));

    dp[0][0][0][1] = 1;
    mark[0][0][0][1] = 1;

    for(int i =0; i<MM; i++)
    {
        for(int j=0; j<MM; j++)
        {
            for(int steps = 0; steps<i+50; steps++)
            {
                for(int k=0; k<=steps+1; k++)
                {
                        build(steps,i,j,k);
                      //cout<<i<<" "<<j<<" "<<steps<<" "<<k<<" "<<build(steps,i,j,k)<<endl;
                }

            }

        }
    }


}



void solve()
{

scanf("%d%d%d", &N, &M, &K);
printf("%lld\n", dp[N+M-2][N-1][N-1][K]);

}
void make()
{
    for(int i=0; i<1000; i++)
    {
        cout<<"50 50 "<<i%99<<endl;
    }
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    //make();
    //return 0;
    precompute();

    int t;
    scanf("%d", &t);
    while(t--)
    {
        solve();
    }
}
