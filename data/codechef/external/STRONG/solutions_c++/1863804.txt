#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<math.h>
using namespace std;
int rowNbr[] = {-1, -1, -1, 0, 0, 1, 1, 1};
int colNbr[] = {-1, 0, 1, -1, 1, -1, 0, 1};
int ROW,COL;
char M[105][105];
bool visited[105][105];
int isSafe(int row, int col ,int befrow,int befcol)
{
return ((row >= 0) && (row < ROW) && (col >= 0) && (col < COL) && ((int)M[row][col]==(int)M[befrow][befcol]+1 ) && !visited[row][col]);
}
int DFS(int row, int col)
{
int k3=0;
visited[row][col] = true;
for (int k=0;k<8;k++)
if (isSafe(row + rowNbr[k], col + colNbr[k],row,col) )
k3=max(k3,DFS(row + rowNbr[k], col + colNbr[k])+1);
return k3;
}
int func(char c)
{
int ans=0;
memset(visited, 0, sizeof(visited));
for (int i = 0; i < ROW; ++i)
for (int j = 0; j < COL; ++j)
if (M[i][j]==c && !visited[i][j])
{
ans=max(ans,DFS(i, j)+1);
}
return ans;
}
int main()
{
cin>>ROW>>COL;
int i,j;
for(i=0;i<ROW;i++)
for(j=0;j<COL;j++)
cin>>M[i][j];
int t;char ch;
int ans2;
cin>>t;
while(t--)
{
cin>>ch;
ans2=func(ch);
if(ans2!=0)
printf("Strong %d\n",ans2);
else
printf("Weak\n");
}
return 0;
} 