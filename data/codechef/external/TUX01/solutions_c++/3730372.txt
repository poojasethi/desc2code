//adijimmy
//segment tree implementation :)
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <utility>
#include <bitset>
using namespace std;
const int INF=1000000009;
int arr[1000001];
struct node{
    int val;
    int cnt;
    node(){val=0;cnt=0;}
    node(int a,int b){val=a;cnt=b;}
};
node seg[4*1000001];
void build(int l,int r,int indx)
{
    if(l==r)
    {
        if(arr[l]%2==0)
        {
            seg[indx].val=arr[l];
            seg[indx].cnt=1;
        }
        else
        {
            seg[indx].val=INF;
            seg[indx].cnt=0;
        }
        return;
    }
    int mid=(l+r)>>1;
    build(l,mid,2*indx+1);
    build(mid+1,r,2*indx+2);
    if(seg[indx*2+1].val==seg[indx*2+2].val)
    {
        seg[indx].val=seg[indx*2+1].val;
        seg[indx].cnt=seg[indx*2+1].cnt+seg[indx*2+2].cnt;
    }
    else if(seg[indx*2+1].val < seg[indx*2+2].val)
    {
        seg[indx].val=seg[indx*2+1].val;
        seg[indx].cnt=seg[indx*2+1].cnt;
    }
    else if(seg[indx*2+1].val > seg[indx*2+2].val)
    {
        seg[indx].val=seg[indx*2+2].val;
        seg[indx].cnt=seg[indx*2+2].cnt;
    }
}
void update(int l,int r,int indx,int pos,int value)
{
   if( pos<l || pos>r)
     return;
   if(l==r)
   {
     if(value%2==0)
     {
        seg[indx].val=value;
        seg[indx].cnt=1;
     }
     else
     {
       seg[indx].val=INF;
       seg[indx].cnt=0;
     }
     return;
   }
   int mid=(l+r)>>1;
   update(l,mid,indx*2+1,pos,value);
   update(mid+1,r,indx*2+2,pos,value);
   if(seg[indx*2+1].val==seg[indx*2+2].val)
    {
        seg[indx].val=seg[indx*2+1].val;
        seg[indx].cnt=seg[indx*2+1].cnt+seg[indx*2+2].cnt;
    }
    else if(seg[indx*2+1].val < seg[indx*2+2].val)
    {
        seg[indx].val=seg[indx*2+1].val;
        seg[indx].cnt=seg[indx*2+1].cnt;
    }
    else if(seg[indx*2+1].val > seg[indx*2+2].val)
    {
        seg[indx].val=seg[indx*2+2].val;
        seg[indx].cnt=seg[indx*2+2].cnt;
    }
}
node query(int sl,int sr,int indx,int ql,int qr)
{
    if(sl>qr || sr<ql)
        return node(INF,0);
    if(sr<=qr  && sl>=ql)
         return seg[indx];
    int mid=(sl+sr)>>1;
    node x=query(sl,mid,indx*2+1,ql,qr);
    node y=query(mid+1,sr,indx*2+2,ql,qr);
    if(x.val < y.val)
       return x;
    else if(x.val > y.val)
        return y;
    else
        return node(x.val,x.cnt+y.cnt);
}
int main()
{
int  N,Q,a,b,c;
scanf("%d%d",&N,&Q);
for(int i=0;i<N;i++)
    scanf("%d",&arr[i]);
build(0,N-1,0);
while(Q--)
{
    scanf("%d%d%d",&a,&b,&c);
    b--;
    if(a==1)
    {
     c--;
     node ans = query(0,N-1,0,b,c);
     if(ans.val==INF)
     {
        //ans.val=-1;
        printf("%d %d\n",-1,ans.cnt);
     }
      else
        printf("%d %d\n",ans.val,ans.cnt);
    }
    else
    {
      //printf("adijimmy\n");
      arr[b]=c;
      update(0,N-1,0,b,c);
    }
}
return 0;
}
