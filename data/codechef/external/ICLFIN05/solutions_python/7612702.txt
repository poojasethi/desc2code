#include <iostream>
#include<stack>
#include<vector>
#include<set>
#include<queue>
#include<stdio.h>
#include<math.h>
#include<algorithm>
using namespace std;
#define gc getchar
#define MOD 1000000007
#define pc(x) putchar(x);
#define pi(n) printf("%d",n)
#define pll(n) printf("%lld",n)
#define ps printf(" ")
#define pn printf("\n")
#define rep(i,n) for(i=0;i<n;i++)
#define fu(i,a,n) for(i=a;i<=n;i++)
#define fd(i,n,a) for(i=n;i>=a;i--)
#define MOD 1000000007
#define INV 333333336
#define ll long long
#define EPS 1e-9
#define infi 2000000000
inline int sn()
{
int n=0;
int ch=gc();
while( ch <48 )ch=gc();
while( ch >47 )
n = (n<<3)+(n<<1) + ch-'0', ch=gc();
return n;
}
inline void wi(int n)
{
int N = n, rev, count = 0;
rev = N;
if (N == 0) { pc('0'); return ;}
while ((rev % 10) == 0)
 { count++; rev /= 10;} 
rev = 0;
while (N != 0) 
{ rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;} 
while (rev != 0) 
{ pc(rev % 10 + '0'); rev /= 10;}
while (count--) pc('0');
}
int x[105][1005],t[105][1005],r[105][1005],n,tym,visited[105][1005];
int ans(int st,int ty)
{
int i,min=infi;
if(visited[st][ty]) return x[st][ty];
if(st==1)
{
if(ty>=t[1][1])
{
x[st][ty]=0;
visited[st][ty]=1;
return x[st][ty];
}
else
{
visited[st][ty]=1;
return x[st][ty];
}
}
for(i=1;i<n;i++)
{
if(ty-t[i][st] < 0 || i==st) continue;
if(min > ans(i,ty-t[i][st])+r[i][st])
{
min=ans(i,ty-t[i][st])+r[i][st];
}
}
x[st][ty]=min;
visited[st][ty]=1;
return x[st][ty];
}
int main()
{
int q=sn();
while(q--)
{
int i,j,k;
n=sn();
tym=sn();
fu(i,1,n)
fu(j,1,n)
t[i][j]=sn();
fu(i,1,n)
fu(j,1,n)
r[i][j]=sn();
rep(i,n+4)
rep(j,tym+4)
{x[i][j]=infi;visited[i][j]=0;}
rep(i,n+1)
{
rep(j,tym+1)
{
x[i][j]=ans(i,j);
}
}
fd(i,tym,0)
{
if(x[n][i]!=x[n][i-1]) break;
}
if(x[n][tym]>=infi) {pi(-1);pn;}
else {pi(x[n][tym]);ps;pi(i);pn;}
}
return 0;
}