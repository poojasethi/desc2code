#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (10007LL)
#define INF (10000005)
#define SIZE (100005)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<pll, int> pli;
 
 
int n, T;
ll cost[52][52], tim[52][52], dist[52][1005];
 
 
int main()
{
int test;
scanf("%d", &test);
while(test--){
scanf("%d%d", &n, &T);
for(int i=1;i<=n;i++)
for(int j=1;j<=n;j++)
scanf("%lld", &tim[i][j]);
for(int i=1;i<=n;i++){
for(int j=0;j<=T;j++)	dist[i][j] = (ll)1e15;
for(int j=1;j<=n;j++){
scanf("%lld", &cost[i][j]);
}
}
ll ans = -1;
dist[1][0] = 0;
priority_queue<pli> pq;
pq.push(pli (pll (0, 0), 1));
while(!pq.empty()){
int v = pq.top().ss;
ll d = -pq.top().ff.ff;
ll t = -pq.top().ff.ss;
pq.pop();
if(v == n && t <= T){
ans = t;
break;
}
if(d > dist[v][t])	continue;
for(int i=1;i<=n;i++){
if(i == v)	continue;
ll dd = d + cost[v][i];
ll tt = t + tim[v][i];
if(tt > T)	continue;
if(dist[i][tt] > dd){
dist[i][tt] = dd;
pq.push(pli (pll (-dd, -tt), i));
}
}
}
printf("%lld %lld\n", dist[n][ans], ans);
}
return 0;
}
 