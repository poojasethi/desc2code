#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

long long get_num()
{
    long long num = 0;
    char c = getchar_unlocked();
    while(!(c>='0' && c<='9'))
        c = getchar_unlocked();
    while(c>='0' && c<='9')
    {
        num = (num<<3) + (num<<1) + c -'0';
        c = getchar_unlocked();
    }
    return num;
}

void multiply(long long m1[2][2], long long m2[2][2])
{
    long long x =  m1[0][0]*m2[0][0] + m1[0][1]*m2[1][0];
    long long y =  m1[0][0]*m2[0][1] + m1[0][1]*m2[1][1];
    long long z =  m1[1][0]*m2[0][0] + m1[1][1]*m2[1][0];
    long long w =  m1[1][0]*m2[0][1] + m1[1][1]*m2[1][1];
    
    m1[0][0] = x;
    m1[0][1] = y;
    m1[1][0] = z;
    m1[1][1] = w;
}

void power(long long m1[2][2], long long n)
{
    if( n == 0 || n == 1)
        return;
    
    long long M[2][2] = {{1,1},{1,0}};
    
    power(m1, n/2);
    multiply(m1, m1);
    
    if (n%2 != 0)
        multiply(m1, M);
}

long long fib(long long n, long long a, long long b)
{
    long long m1[2][2] = {{1,1},{1,0}};
    if (n == 0)
        return 0;
    else if(n==1)
        return a;
    else if(n==2)
        return b;
    
    power(m1, n-2);
    //cout<<m1[0][0]<<" "<<m1[0][1]<<endl<<m1[1][0]<<" "<<m1[1][1]<<endl;
    return ((m1[0][0]*b)+(m1[0][1]*a));
}

int main()
{
    long long t,a,b,n;
    t=get_num();
    while(t--)
    {
        a=get_num();
        b=get_num();
        n=get_num();
        
        cout<<fib(n,a,b)<<endl;
    }
}
