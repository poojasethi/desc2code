#include<iostream>

using namespace std;

typedef long long L;

//#define MOD 10000000000000000007

L c[2][2]={{0,1},{1,1}};

// multiply function performs matrix multiplication

void multiply(L a[][2],L b[][2] )
{

   L p,q,r,s;

   p=((a[0][0]*b[0][0])+(a[0][1]*b[1][0]));

   q=((a[1][0]*b[0][0])+(a[1][1]*b[1][0]));

   r=((a[0][0]*b[0][1])+(a[0][1]*b[1][1]));

   s=((a[1][0]*b[0][1])+(a[1][1]*b[1][1]));

   a[0][0]=p;

   a[1][0]=q;

   a[0][1]=r;

   a[1][1]=s;

}

// power function calcuates power of matrix raised to p ,ie , matrix ^ p in log(p) time

// concept of exponential by squaring

// if a is any matrix

// if p ==1 , a=a^p ,ie, a

// if p%2==1 , a*pow(a,p-1)

// if p%2==0. pow(a,p/2) and then a*a

// this process is continued till p>1

// we select a starting matrix such numbers in it are the starting numbers and finally stores sum of previous two numbers

void power(L a[][2],L p)
{

        if( p % 2 == 0 && p!=0)
        {

          if( p != 2 )

          power(a,p/2);

          multiply(a,a);

          //if( p == 2 )

          //return ;

        }

        else if(p>1)
             {

                power(a,p-1);

                multiply(a,c);

             }

}

int main()
{

   L t,n,num1,num2;

   cin>>t;

   while(t--)
   {

      cin>>num1>>num2>>n;

      // num1 and num1 are starting numbers

      // n is the nth number of the series

      L a[2][2]={{0,1},{1,1}};

      power(a,n-1);

      if(n == 1)

      cout<<num1<<endl;

      else if(n == 2)

           cout<<num2<<endl;

           else cout<<(num1*a[0][0]+num2*a[0][1])<<endl;

   }

   return 0;

}












