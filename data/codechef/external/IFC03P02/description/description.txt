

Problem description:
Write the 'lcs' function that takes two sequences and finds the length of longest common subsequence present in both..
Function prototype:

"int lcs( char *X, char *Y, int m, int n )"

 A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, “abc”, “abg”, “bdf”, “aeg”, ”acefg”, .. etc are subsequences of “abcdefg”. So a string of length n has 2^n different possible subsequences.

Example:
Input:
 ABCDGH 
 AEDFHR 
Final Output:
3 

Interpretation :
	common 'ADH' subsequence is of of length 3.

Sample main function C/C++: 
 int main() 
 { 
    string string_X; 
    string string_Y; 
  cin >> string_X; 
  cin >> string_Y; 
 int m = string_X.length(), n = string_Y.length(); 
 char * X = new char[m + 1]; 
  char * Y = new char[n + 1]; 
  strcpy (X, string_X.c_str()); 
strcpy (Y, string_Y.c_str()); 
printf("%d\n", lcs( X, Y, m, n ) ); 
    getchar(); 
   return 0; 
 } 
