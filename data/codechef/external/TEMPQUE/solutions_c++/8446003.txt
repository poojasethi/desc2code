#include <bits/stdc++.h>
#define MAX 200005

using namespace std;

vector < pair<int,int> > v;
int pos[MAX];
int tree[MAX];

void update(int idx, int val)
{
    while ( idx <= MAX-4 ) {
        tree[idx] += val;
        idx += (idx & (-idx));
    }
    return;
}

int query(int idx)
{
    int ans = 0;
    while ( idx > 0 ) {
        ans += tree[idx];
        idx -= (idx & (-idx));
    }
    return ans;
}

int main()
{
    int n,mm,x,type;
    scanf("%d%d", &n, &mm);
    v.push_back(make_pair(-1,-1));
    for ( int i = 1; i <= n; i++ ) {
        scanf("%d", &x);
        v.push_back(make_pair(x,i));
    }

    sort(v.begin(),v.end());

    for ( int i = 1; i <= n; i++ ) {
        pos[v[i].second] = i;
     //   cnt[v[i].second] = v[i].first;
    }

    while ( mm-- ) {
        scanf("%d%d", &type, &x);
        if ( type == 1 ) {
            int id = pos[x];
            int num = v[id].first + query(id);
            int l,r,m,idx=-1;
            l = 1, r = n;
            while ( l <= r ) {
                m = (l+r)>>1;
                int val = v[m].first + query(m);
                if ( val <= num ) {
                    idx = m;
                    l = m+1;
                }
                else r = m-1;
            }
            if ( idx != -1 ) {
                swap(pos[v[id].second], pos[v[idx].second]);
                swap(v[idx].second,v[id].second);
                update(idx,1);
                update(idx+1,-1);
            }
        }
        
        else if ( type == 2 ) {
            int l,r,m,idx=n+1;
            l = 1, r = n;
            while ( l <= r ) {
                m = (l+r)>>1;
                int val = v[m].first + query(m);
                if ( val >= x ) {
                    idx = m;
                    r = m-1;
                }
                else l = m+1;
            }

            printf("%d\n", n-idx+1);
        }
        else {
            int l,r,m,idx=-1;
            l = 1, r = n;
            while ( l <= r ) {
                m = (l+r)>>1;
                int val = v[m].first + query(m);
                if ( val >= x ) {
                    idx = m;
                    r = m-1;
                }
                else l = m+1;
            }
            if ( idx != -1 ) update(idx,-1);
        }
    }
    return 0;
}
