#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <string>
#define out(v) cout << #v << ": " << (v) << endl
using namespace std;
typedef long long LL;
typedef pair<int, int> pr;

const int size = 100 * 1000 + 5;
int N, Q;
pr arr[size];
int mp[size];

LL bit[size];
void add(int x, LL d) {
	while (x <= N + 1) bit[x] += d, x += x & -x;
}
LL getsum(int x) {
	LL s = 0;
	while (x) s += bit[x], x -= x & -x;
	return s;
}
void update_range(int x, int y, LL d) {
	add(x, d);
	add(y + 1, -d);
}
LL query_point(int x) {
	return getsum(x);
}

int lower(int low, int high, LL d) {
	while (low < high) {
		int mid = (low + high) / 2;
		if (d <= query_point(mid)) high = mid;
		else low = mid + 1;
	}
	return low;
}
int upper(int low, int high, LL d) {
	return lower(low, high, d + 1);
}
int main() {
	scanf("%d%d", &N, &Q);
	for (int i = 1; i <= N; ++i) {
		scanf("%d", &arr[i].first);
		arr[i].second = i;
	}
	sort(arr + 1, arr + N + 1);
	for (int i = 1; i <= N; ++i) {
		mp[arr[i].second] = i;
	}
	memset(bit, 0, sizeof(bit));
	for (int i = 1; i <= N; ++i) {
		update_range(i, i, arr[i].first);
	}
	//for (int i = 1; i <= N; ++i) cout << query_point(i) << " "; cout << endl;
	while (Q--) {
		int op, x;
		scanf("%d%d", &op, &x);
		if (op == 1) {
			int i = mp[x];
			int j = upper(1, N + 1, query_point(i)) - 1;
			mp[arr[i].second] = j, mp[arr[j].second] = i;
			swap(arr[i], arr[j]);
			update_range(j, j, 1);
		} else if (op == 2) {
			int k = lower(1, N + 1, x);
			printf("%d\n", N - k + 1);
		} else if (op == 3) {
			int k = lower(1, N + 1, x);
			update_range(k, N, -1);
		}
	}
	return 0;
}
