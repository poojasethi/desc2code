#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
using namespace std;
 
typedef pair<int,int> pii;
 
int n, q, m;
 
pii a[ 1<<17 ];
int pos[ 1<<17 ], who[ 1<<17 ];
int c[ 1<<17 ];
 
void upd( int p, int v )
{
int i;
for ( i = p; i < m; i=i+(i&(-i)) )
c[i] = c[i] + v;
}
 
int query( int p )
{
int i, r = 0;
for ( i = p; i > 0; i = (i&(i-1)) )
r = r + c[i];
return r;
}
 
int LB( int v )
{
if ( query( n ) < v ) return n+1;
int lo, hi, mid, msum, lsum;
lo = 0; hi = m;
lsum = 0;
while ( lo+1 < hi )
{
mid = (lo+hi)/2;
msum = lsum + c[mid];
if ( msum >= v )
hi = mid;
else
{
lo = mid;
lsum = msum;
}
}
return hi;
}
 
int main()
{
int i, j, k, s, t;
 
scanf( "%d %d", &n, &q );
m = (1<<17);
memset( c, 0, sizeof( c ) );
for ( i = 1; i <= n; i++ )
{
scanf( "%d", &a[i].first );
a[i].second = i;
}
 
sort( a + 1, a + n + 1 );
a[0].first = 0;
for ( i = 1; i <= n; i++ )
{
upd( i, a[i].first-a[i-1].first );
pos[a[i].second] = i;
who[i] = a[i].second;
}
 
for ( i = 1; i <= q; i++ )
{
scanf( "%d %d", &j, &k );
if ( j == 1 )
{
s = LB( query( pos[k] )+1 )-1;
upd( s, 1 );
t = who[s];
if ( s < n )
upd( s+1, -1 );
swap( pos[t], pos[k] );
who[pos[k]] = k;
who[pos[t]] = t;
}
else if ( j == 2 )
{
s = LB( k );
if ( s > n ) printf( "0\n" );
else printf( "%d\n", n-s+1 );
}
else if ( j == 3 )
{
s = LB( k );
if ( s <= n )
upd( s, -1 );
}
}
return 0;
}