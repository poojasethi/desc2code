#include <stdio.h>
#include <string.h>
#include <algorithm>
#define end (1<<17)
using namespace std;
struct Node{
    int u,id;
};
struct Node node[100010];
bool cmp(Node a, Node b){
    if(a.u == b.u)  return a.id < b.id;
    return a.u < b.u;
}
int mmap[100010], inv[100010], s[(1<<17) + 10];
int n,m;
int getsum(int u){
    int ans = 0;
    for(int i=u;i>0;i-=(i&(-i)))
        ans += s[i];
    return ans;
}
void add(int u,int val){
    for(int i=u;i<=end;i+=(i&(-i)))
        s[i] += val;
}
int find(int val){
    if(getsum(n) <= val)    return n;
    if(s[1] > val)          return 0;
    int l = 0, r = end;
    int ls = 0,ms;
    while(l + 1 < r){
        int m = (l + r)/2;
        ms = ls + s[m];
        if(ms > val)    r = m;
        else{
            l = m;
            ls += s[m];
        }
        //printf("%d %d\n",l,ls);
    }
    return l;
}
void sswap(int &a,int &b){
    int c = a;
    a = b, b = c;
}
int main(){
    scanf("%d %d", &n, &m);
    for(int i=1;i<=n;i++){
        scanf("%d", &node[i].u);
        node[i].id = i;
    }
    sort(node + 1, node +1 + n,cmp);
    for(int i=1;i<=n;i++)   mmap[node[i].id] = i, inv[i] = node[i].id;
    memset(s,0,sizeof(s));
    for(int i=1;i<=n;i++)   add(i,node[i].u), add(i+1, -node[i].u);
    for(int i=n+1;i<=end;i++)   add(i,200000000), add(i+1,-200000000);
    while(m--){
        int key,u;
        scanf("%d %d",&key, &u);
        if(key == 1){
            int val = getsum(mmap[u]);
            int v = inv[find(val)];
            sswap(mmap[u],mmap[v]);
            sswap(inv[mmap[u]],inv[mmap[v]]);
            add(mmap[u],1), add(mmap[u] + 1, -1);
        }
        else if(key == 2){
            int v = find(u - 1);
            printf("%d\n",n - v);
        }
        else{
            int v = find(u-1);
            add(v + 1, -1);
        }
    }
    return 0;
}
