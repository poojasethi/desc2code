#include<bits/stdc++.h>
#define ll long long
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define sd(x) scanf("%d",&x)
#define pd(x) printf("%d",x)
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld",x)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)(1e5+255)
int BIT[N],n,q,pos1[N],pos2[N];//where,who
pii a[N];
void update(int x,int val){
    for(;x<n+50;x+=(x&-x)){
        BIT[x]+=val;
    }
}
int query(int x){
    int sum=0;
    for(;x;x-=(x&-x)){
        sum+=BIT[x];
    }
    return sum;
}
int lowerBound(int val){
    int lo=1,hi=n;
    if(query(hi)<val)
        return n+1;
    while(lo<hi){
        int mid=(lo+hi)>>1;
        if(query(mid)>=val){
            hi=mid;
        }
        else{
            lo=mid+1;
        }
    }
    return lo;
}
void solve(){
    sd(n);sd(q);
    for(int i=1;i<=n;i++){
        sd(a[i].fi);
        a[i].se=i;
    }
    sort(a+1,a+n+1);
    for(int i=1;i<=n;i++){
        pos1[a[i].se]=i;
        pos2[i]=a[i].se;
    }
    a[0].fi=0;
    for(int i=1;i<=n;i++){
        update(i,a[i].fi-a[i-1].fi);
    }
    for(int i=1;i<=q;i++){
        int t;
        sd(t);
        if(t==3){
            int y;
            sd(y);
            int x=lowerBound(y);
            update(x,-1);
        }
        if(t==2){
            int y;
            sd(y);
            int x=lowerBound(y);
            pd(n+1-x);
            printf("\n");
        }
        if(t==1){
            int x;
            sd(x);
            int sz=query(pos1[x]);
            int lastSz=pos2[lowerBound(sz+1)-1];
            swap(pos1[x],pos1[lastSz]);
            pos2[pos1[x]]=x;
            pos2[pos1[lastSz]]=lastSz;
            update(pos1[x],1);
            update(pos1[x]+1,-1);
        }
    }
}
int main(){
   //freopen("C-large-practice.IN","r",stdin);
   //freopen("out.txt","w",stdout);
   int t=1;
   //sd(t);
   for(int i=1;i<=t;i++){
       //printf("Case #%d:\n",i);
       solve();
   }
   return 0;
}
