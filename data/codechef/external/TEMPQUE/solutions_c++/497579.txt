#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <iostream>
#include <cstring>
#define REP(i,x,v)for(int i=x;i<=v;i++)
#define REPD(i,x,v)for(int i=x;i>=v;i--)
#define FOR(i,v)REP(i,0,(int)(v)-1)
#define FORD(i,v)REPD(i,(int)(v)-1,0)
#define pb push_back
#define sz size()
#define mp make_pair
#define fi first
#define se second
#define ll long long
#define IN(x,y) ((y).find((x))!=(y).end())
//#define LOLDBG
#ifdef LOLDBG
#define DBG(vari) cout<<#vari<<" = "<<vari<<endl;
#define DBG2(v1,v2) cout<<(v1)<<" - "<<(v2)<<endl;
#else
#define DBG(vari)
#define DBG2(v1,v2)
#endif
#define CZ(x) scanf("%d",&(x))
#define ALL(x) (x).begin(),(x).end()
#define M (1<<17)
using namespace std;

template<typename T,typename TT> ostream &operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream &operator<<(ostream &s,vector<T> t){s<<"{";FOR(i,t.size())s<<t[i]<<(i==t.size()-1?"":",");return s<<"}"<<endl; }

int bit[1000001];
int maxval;//do ustawienia
// BIT obsluguje przedzial [1..maxval]

int N,Q;

void czysc(int mxv)
{
    maxval=mxv;
    FOR(i,mxv+1) bit[i]=0;
}

void dodaj(int ind, int war)
{
    while(ind<maxval)
    {
        bit[ind]+=war;
        ind+=(ind & -ind);
    }
}

int suma(int ind)//[1..ind]
{
    int sm=0;
    while(ind>0)
    {
        sm+=bit[ind];
        ind-=(ind & -ind);
    }
    return sm;
}

int LB(int v)
{
    int lo, hi, mid, msum, lsum;
    lo = 0; hi = maxval;
    lsum = 0;
    while (lo+1<hi)
    {
        mid=(lo+hi)/2;
        msum=lsum+bit[mid];
        if (msum>=v)
            hi = mid;
        else
        {
            lo=mid;
            lsum=msum;
        }
    }
    return hi;
}

int lb(int x)
{
    int lo=1,hi=maxval,mid;
    while(hi-lo>1)
    {
        mid=(hi+lo)/2;
        if (suma(mid)>=x) hi=mid;
        else lo=mid;
    }
    if (suma(lo)>=x) return lo;
    return hi;
}

vector<pair<int,int> > tp;
int t[1000000];
int who[1000000];
int where[1000000];

int main()
{
    CZ(N);CZ(Q);
    tp.resize(N);
    czysc(M);
    dodaj(N+1,300000000);
    int a;
    FOR(i,N)
    {
        CZ(a);
        tp[i]=mp(a,i+1);
    }
    sort(ALL(tp));
    t[0]=0;
    FOR(i,N)
    {
        t[i+1]=tp[i].fi;
        who[i+1]=tp[i].se;
        where[tp[i].se]=i+1;
        dodaj(i+1,t[i+1]-t[i]);
    }
    int typ;
    FOR(i,Q)
    {
        CZ(typ);CZ(a);
        if (typ==2)
        {
            a=min(a,200000000);
            printf("%d\n",N-LB(a)+1);
        }
        if (typ==3)
        {
            a=min(a,200000000);
            int p=LB(a);
            dodaj(p,-1);
        }
        if (typ==1)
        {
            DBG(where[a]);
            int h=suma(where[a]);
            DBG(h);
            int p=LB(h+1)-1;
            DBG(p);
            DBG(suma(p));
            int nr=who[p];
            where[nr]=where[a];
            where[a]=p;
            who[where[nr]]=nr;
            who[p]=a;
            dodaj(p,1);
            dodaj(p+1,-1);
        }
        //REP(i,1,N)
        //    cout<<suma(i)<<" ";
        //cout<<endl;
    }

    

    return 0;
}
