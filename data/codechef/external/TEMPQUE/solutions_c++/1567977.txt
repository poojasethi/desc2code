
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<string>

using namespace std;

#define s(n)					scanf("%d",&n);
#define sl(n) 					scanf("%lld",&n);
#define sf(n) 					scanf("%lf",&n);
#define ss(n) 					scanf("%s",n);
#define INF						(int)1e9
#define LINF					(long long)1e18
#define EPS						1e-9
#define FOR(i,a,b)				for(int i=a;i<b;i++)
#define REP(i,n)				FOR(i,0,n)
#define foreach(v,c)            for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define mp						make_pair
#define FF						first
#define SS						second
#define tri(a,b,c)				mp(a,mp(b,c))
#define XX						first
#define YY						second.first
#define ZZ						second.second
#define pb						push_back
#define fill(a,v) 				memset(a,v,sizeof a)
#define all(x)					x.begin(),x.end()
#define SZ(v)					((int)(v.size()))
#define DREP(a)					sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())
#define debug(args...)			{dbg,args; cerr<<endl;}
#define dline					cerr<<endl
#define SP                      system("pause");
#define HAHA                    printf("HAHA\n");

void debugarr(int * arr,int n)
{
	cout<<"[ ";
	for(int i=0;i<n;i++)
		cout<<arr[i]<<" ";
	cout<<"]"<<endl;
}

typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
typedef pair<LL,PII> TRI;

typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;
typedef vector<TRI> VT;

typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;
typedef vector<VT> VVT;

/////////////////////////////////////////////////////////////////////////////////////////

#define N 100005
#define base (1<<17)

int n, q;
int seg[base<<1];
int fwd[N], bkd[N];

struct two
{
    int num, ind;
} a[N];

bool operator < (const two& t1, const two& t2)
{
    return t1.num < t2.num;
}

int getpos(int sum)
{
    if(sum > seg[1]) return n;
    int i = 1;
    while(i<base)
    {
        int l = i<<1;
        if(seg[l] >= sum) i = l;
        else sum -= seg[l], i = l|1;
    }
    return i - base;
}

void update(int ind, int inc)
{
    ind += base;
    while(ind) seg[ind] += inc, ind >>= 1;
}

int presum(int ind)
{
    ind += base;
    int ans = seg[ind];
    while(ind)
    {
        if(ind&1) ans += seg[ind-1];
        ind>>=1;
    }
    return ans;
}

int main()
{
    s(n) s(q)
    REP(i, n)
    {
        s(a[i].num)
        a[i].ind = i;
    }
    sort(a, a+n);
    REP(i, n)
    {
        fwd[a[i].ind] = i;
        bkd[i] = a[i].ind;
    }
    REP(i, n)
    {
        seg[base+i] = i ? a[i].num - a[i-1].num : a[0].num;
    }
    for(int i = base; --i;)
    {
        seg[i] = seg[i<<1] + seg[(i<<1)|1];
    }
    while(q--)
    {
        int qu;
        s(qu)
        if(qu == 1)
        {
            int ind; s(ind) ind--;
            int sum = presum(fwd[ind]);
            int newind = getpos(sum+1) - 1; // rightmost 0
            // swap ind, newind
            int x, y, z, w;
            x = fwd[ind];
            y = newind;
            z = ind;
            w = bkd[newind];
            fwd[w] = x;
            bkd[x] = w;
            fwd[z] = y;
            bkd[y] = z;
            update(y, 1);
            if(y+1<n) update(y+1, -1);
        }
        else if(qu == 2)
        {
            int x; s(x)
            printf("%d\n", n - getpos(x));
        }
        else
        {
            int y; s(y)
            int p = getpos(y);
            if(p<n) update(p, -1);
        }
    }
}






















