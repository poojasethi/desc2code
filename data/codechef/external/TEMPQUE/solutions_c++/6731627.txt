#include <bits/stdc++.h>
#include <assert.h>
//#include <unordered_map>
using namespace std;
 
typedef long long ll;
typedef double ld;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;
typedef vector < vll > matrix;
 
#define rep(i,n) for(ll i = 0; i < n; i++)
#define reps(i,a,n) for(ll i = a; i < n; i++)
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define l(x) (((x) << 1) | 1)
#define r(x) ((l(x)) + 1)
#define md(a,b) (((a) + (b)) >> 1LL)
#define INF ((1LL << 57LL))
#define pb push_back
#define mp make_pair
#define fst first
#define snd second
 
ll t, n, u, v, m, q, l, r, ql, qr, k, d, c;
const int N = 1e5 + 500;
const int M = 1e2 + 5;
const ll mod = 1e9 + 7;
const bool JUDGE = false;
pii a[N];
int T[4 * N];
int lz[4 * N];
int pos[N], rpos[N];
void init(int l, int r, int i) {
        if (l == r) {
                T[i] = a[l].fst;
                lz[i] = 0;
                return;
        }
        int mid = (l + r) / 2;
        init(l, mid, l(i));
        init(mid + 1, r, r(i));
        T[i] = max(T[l(i)], T[r(i)]);
        lz[i] = 0;
}
void relax(int i) {
        lz[l(i)] += lz[i];
        lz[r(i)] += lz[i];
        T[i] += lz[i];
        lz[i] = 0;
}
int find(int l, int r, int i, int x) {
        if (l == r) {
 //               cout << T[i] << ' ';
                return l;
        }
        int mid = (l + r) / 2;
        if (lz[i] != 0) relax(i);
        if (T[l(i)] + lz[l(i)] < x) return find(mid + 1, r, r(i), x);
        else return find(l, mid, l(i), x);
}
void modify(int l, int r, int rl, int rr, int i, int v) {
    if (rl <= l && rr >= r) lz[i] += v;
    else if (rl > r || l > rr) return;
    else {
        if (lz[i] != 0) relax(i);
        int mid = (l + r) / 2;
        modify(l, mid, rl, rr, l(i), v);
        modify(mid + 1, r, rl, rr, r(i), v);
        T[i] = max(T[l(i)] + lz[l(i)], T[r(i)] + lz[r(i)]);
    }
}
int get(int l, int r, int i, int x) {
    if (l == r) return T[i] + lz[i];
    else {
        int mid = (l + r) / 2;
        if (lz[i] != 0) relax(i);
        if (x <= mid) return get(l, mid, l(i), x);
        else return get(mid + 1, r, r(i), x);
    }
}
int main(){
        csl;
        if (JUDGE) {
                        freopen("grader.in", "r", stdin);
                        freopen("grader0.out", "w", stdout);
        }
                cin >> n >> q;
                rep (i, n) cin >> a[i].fst;
                rep (i, n) a[i].snd = i;
                sort(a, a + n);
                reps (i, 1, n + 1) pos[a[i - 1].snd] = i - 1, rpos[i - 1] = a[i - 1].snd;
                a[n].fst = INT_MAX - 6e5;;
                a[n].snd = 0;
                init(0, n, 0);
                while (q--) {
                    int id; int j;
                    cin >> id >> j;
                    if (id == 1) {
						j--;
                        int val = get(0, n, 0, pos[j]);
                        int p = find(0, n, 0, val + 1);
                        p--;
                        //cout << p << '\n';
                        modify(0, n, p, p, 0, 1);
                        int i = pos[j];
                        swap(pos[rpos[p]], pos[j]);
                        rpos[i] = rpos[p];
                        rpos[p] = j;
                    }
                    else if (id == 2) {
                        int x = find(0, n, 0, j);
                        cout << n - x << '\n';
                    }
                    else {
                        int x = find(0, n, 0, j);
                        modify(0, n, x, n - 1, 0, -1);
                    }
                  /*  rep (i, n) {
                        cout << get(0, n, 0, i) << " ";
                    }
                    cout << '\n';*/
                 /*   rep (i, n) {
                        cout << pos[i] << ' ';
                    }
                    cout << '\n';*/
                }
                return 0;
}