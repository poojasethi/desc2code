
#include<iostream>
#include<cstdio>
#include<vector>
#include<cassert>
#include<sstream>
#include<map>
#include<set>
#include<climits>
#include<stack>
#include<queue>
#include<algorithm>
#include<string>
#include<cstring>
#include<cctype>
#include<cmath>
#include<cstdlib>
#include<climits>
using namespace std;
#define pop_count(n) __builtin_popcount(n)
#define FOR(i,a,b) for(int i= (int)a; i< (int)b; ++i)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define ALL(x) x.begin(),x.end()
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())

typedef pair<int,int> PI;
typedef vector<int> VI;
typedef long long LL;
#define INF 1000000000
#define BASE 131072

struct node
{
   int max,min,offset;
}a[BASE*2+9];
void seg_update(int at)
{
   if(at)
   {
      a[at].max=max(a[at*2].max,a[at*2+1].max)+a[at].offset;
      a[at].min=min(a[at*2].min,a[at*2+1].min)+a[at].offset;
      seg_update(at/2);
   }
}
void updatev(int at,int v)
{
   a[BASE+at].offset+=v;
   a[BASE+at].max=a[BASE+at].min=a[BASE+at].offset;
   seg_update((BASE+at)/2);
}
int leftmost(int v)	//storing in decending order
{
   int c=1;
   int coffset=0;
   while(c<BASE)
   {
      coffset+=a[c].offset;
      c=c*2;
      if(a[c].min+coffset>v)
	 c++;
   }
   return c;
}
int getv(int at)
{
   int ret=0;
   while(at)
   {
      ret+=a[at].offset;
      at>>=1;
   }
   return ret;
}
int q[100009]; //q[i] gives a pointer to segtree for q no. i
int rq[BASE*2+9]; //rq[i] gives qno at a give point in segtree 
void addpilg(int p)
{
   int lmost,v;
   v=getv(q[p]);
   lmost=leftmost(v);
   int lqno;
   lqno=rq[lmost];
   swap(q[lqno],q[p]);
   rq[q[lqno]]=lqno;
   rq[q[p]]=p;
   updatev(lmost-BASE,1);
}
int n;
int cntq(int x)
{
   int c=1;
   int coffset=a[1].offset;
   while(c<BASE)
   {
      c*=2;
      if(a[c].min+coffset>=x)
	 c++;
      coffset+=a[c].offset;
   }
   return min(n,(c-BASE));	//all those
}
void decy(int y,int at=1,int offset=0)
{
   //dec all >=y
   if(at>=BASE+n)
      return ;
   if(a[at].min+offset>=y)
      a[at].offset--;
   else if (a[at].max+offset>=y)
   {
      decy(y,at*2,offset+a[at].offset);
      decy(y,at*2+1,offset+a[at].offset);
   }
   if(at<BASE)
   {
      a[at].min=min(a[at*2].min,a[at*2+1].min)+a[at].offset;
      a[at].max=max(a[at*2].max,a[at*2+1].max)+a[at].offset;
   }
   else
   {
      a[at].min=a[at].max=a[at].offset;
   }
}
int main()
{
   //CODE GOES HERE>>...
   int tmp;
   int i,j;
   int k;
   int c;
   scanf("%d%d",&n,&k);
   PI tmpar[100009];
   for(i=0;i<n;i++)
   {
      scanf("%d",&tmp);
      tmpar[i].first=tmp;
      tmpar[i].second=i;
   }
   sort(tmpar,tmpar+n);
   reverse(tmpar,tmpar+n);
   for(i=0;i<n;i++)
   {
      q[tmpar[i].second]=BASE+i;
      rq[BASE+i]=tmpar[i].second;
      updatev(i,tmpar[i].first);
   }
   while(k--)
   {
      scanf("%d%d",&c,&tmp);
      if(c==1)
      {
	 //pilgrim enters tmp
	 addpilg(tmp-1);
      }
      else if(c==2)
      {
	 // find no qs with >= tmp ppl
	 printf("%d\n",cntq(tmp));
      }
      else
      {
	 //decrease qs with >= tmp ppl
	 decy(tmp);
      }
   }
   return 0;
}
