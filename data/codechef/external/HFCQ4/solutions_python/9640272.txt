/* tester's code by TEJA VOJJALA of O(N* (log^2 N))*/
#include <cstdio>
#include<iostream>
#include<string.h>
#include<algorithm>
using namespace std;
#define MAXN 262144
#define MAXLG 20
char B[MAXN];
char A[MAXN];
int LCP[MAXN];
struct entry
{
    int nr[2];
    int p;
} L[MAXN];
int arr[200005],brr[200005],crr[200005];
int P[MAXLG][MAXN];
int N,i,N1;
int stp, cnt;
 
int cmp(struct entry a, struct entry b)
{
    return a.nr[0]==b.nr[0] ?(a.nr[1]<b.nr[1] ?1: 0): (a.nr[0]<b.nr[0] ?1: 0);
}
int lcp(int x, int y,int N)
{
 int k, ret = 0; if (x == y) return N - x;
 for (k = stp - 1; k >= 0 && x < N && y < N; k --)
 if (P[k][x] == P[k][y])
 x += 1 << k, y += 1 << k, ret += 1 << k; return ret;
}
int createSA(int N,char A[200005],int ar[200005])
{
	for( i = 0; i < N; i++)
    {
        P[0][i] = A[i] - 'a';
        ar[i]=0;
	}
 ar[i+1]=0;
    for(stp=1, cnt = 1; cnt < N; stp++, cnt *= 2)
    {
        for(i=0; i < N; i++)
        {
            L[i].nr[0]=P[stp- 1][i];
            L[i].nr[1]=i +cnt <N? P[stp -1][i+ cnt]:-1;
            L[i].p= i;
        }
        sort(L, L+N, cmp);
        for(i=0; i < N; i++)
            P[stp][L[i].p] =i> 0 && L[i].nr[0]==L[i-1].nr[0] && L[i].nr[1] == L[i- 1].nr[1] ? P[stp][L[i-1].p] : i;
    }
    int j;
	LCP[0]=0;
	ar[1]++;
	ar[N+1-L[0].p]--;
	for(i=1;i<N;i++)
	{
		LCP[i]=lcp(L[i-1].p,L[i].p,N);
		ar[LCP[i]+1]++;
		ar[N+1-L[i].p]--;
	}
	for(int i=1;i<N+2;i++)
	{
		ar[i]=ar[i]+ar[i-1];
	}
	return 0;
}
char C[2000005];
int drr[200005];
int main()
{
	//freopen("input11.txt","r",stdin);
  	//freopen("output111.txt","w",stdout);
	int type,k;
    scanf("%s",A);
    scanf("%s",B);
    N=strlen(A);
    N1=strlen(B);
    int u=0;
    createSA(N,A,arr);
    createSA(N1,B,brr);
	for(i=0;i<N;i++)
	C[i]=A[i];
	C[i]='$';
	for(i=N+1;i<N+1+N1;i++)
	C[i]=B[u++];
	C[i]='\0';
	createSA(N+N1+1,C,crr);
	for(i=0;i<=N;i++)
	{
		drr[N+1-i]++;
		drr[N+1-i+N1+1]--;
	}
	for(i=1;i<N+N1+2;i++)
	{
		drr[i]=drr[i]+drr[i-1];
		crr[i]=crr[i]-drr[i];
	}
	int q;
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d %d",&type,&k);
		if(type==1)
		{
			printf("%d\n",arr[k]+brr[k]-crr[k]);
		}
		else if(type==2)
		{
			printf("%d\n",crr[k]-brr[k]);
		}
		else if(type==3)
		{
			printf("%d\n",crr[k]-arr[k]);
		}
		else if(type==4)
		{
			printf("%d\n",2*crr[k]-brr[k]-arr[k]);
		}
	}
    return 0;
} 