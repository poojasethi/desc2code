#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long int llu;
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define mem(a, v) memset(a, v, sizeof(a))
#define PI acos(-1)
#define S(a) scanf("%d",&a)
#define SL(a) scanf("%lld",&a)
#define S2(a, b) scanf("%d%d",&a,&b)
#define nl printf("\n")
#define DEB(x) cout<<#x<<" : "<<x<<endl;
const ll mod = 1000000007LL;
const int lmt = 500010;

const int MAX = 500010;
string s, as, bs;
int iSA[MAX], SA[MAX];
int cnt[MAX], nxt[MAX];
bool bh[MAX], b2h[MAX];


bool smaller_first_char(int a, int b){
    return s[a] < s[b];
}

void suffixSort(int n){
    for (int i=0; i<n; ++i){
        SA[i] = i;
    }
    sort(SA, SA + n, smaller_first_char);
    for (int i=0; i<n; ++i){
        bh[i] = i == 0 || s[SA[i]] != s[SA[i-1]];
        b2h[i] = false;
    }

    for (int h = 1; h < n; h <<= 1){
        int buckets = 0;
        for (int i=0, j; i < n; i = j){
            j = i + 1;
            while (j < n && !bh[j]) j++;
            nxt[i] = j;
            buckets++;
        }
        if (buckets == n) break;
        for (int i = 0; i < n; i = nxt[i]){
            cnt[i] = 0;
            for (int j = i; j < nxt[i]; ++j){
                iSA[SA[j]] = i;
            }
        }

        cnt[iSA[n - h]]++;
        b2h[iSA[n - h]] = true;
        for (int i = 0; i < n; i = nxt[i]){
            for (int j = i; j < nxt[i]; ++j){
                int s = SA[j] - h;
                if (s >= 0){
                    int head = iSA[s];
                    iSA[s] = head + cnt[head]++;
                    b2h[iSA[s]] = true;
                }
            }
            for (int j = i; j < nxt[i]; ++j){
                int s = SA[j] - h;
                if (s >= 0 && b2h[iSA[s]]){
                    for (int k = iSA[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
                }
            }
        }
        for (int i=0; i<n; ++i){
            SA[iSA[i]] = i;
            bh[i] |= b2h[i];
        }
    }
    for (int i=0; i<n; ++i){
        iSA[SA[i]] = i;
    }
}

int lcp[MAX];
void getlcp(int n){
    for (int i=0; i<n; ++i)
        iSA[SA[i]] = i;

    lcp[0] = 0;

    for (int i=0, h=0; i<n; ++i){
        if (iSA[i] > 0){
            int j = SA[iSA[i]-1];
            while (i + h < n && j + h < n && s[i+h] == s[j+h])
                h++;
            lcp[iSA[i]] = h;

            if (h > 0)
                h--;
        }
    }
}

int A[lmt], B[lmt], C[lmt];

int main(){
    cin>>as>>bs;
    int na = as.size();
    s = as;
    suffixSort(na);
    getlcp(na);

    for(int i = 0; i < na; i++){
        A[lcp[i]]--;
        A[na - SA[i]]++;
    }
    for(int i = na-1; i > 0; i--)
        A[i] += A[i+1];
        
    s = bs;
    int nb = bs.size();
    suffixSort(nb);
    getlcp(nb);
    for(int i = 0; i < nb; i++){
        B[lcp[i]]--;
        B[nb - SA[i]]++; 
    }

    for(int i = nb-1; i > 0; i--)
        B[i] += B[i+1];
    s = as + "#" + bs;
    int nc = s.size();

    suffixSort(nc);
    getlcp(nc);
    for(int i = 1; i < nc; i++){
        C[lcp[i]]--;
        int len;
        if(SA[i] > na)
            len = nc - SA[i];
        else
            len = na - SA[i];
        C[len]++; 
    }
    for(int i = nc-1; i > 0; i--)
        C[i] += C[i+1];
    int q;
    S(q);
    while(q--){
        int x, k, ans = 0;
        S2(x, k);
        if(x == 1)
            ans = A[k] + B[k] - C[k];
        else if(x == 2)
            ans = C[k] - B[k];
        else if(x == 3)
            ans = C[k] - A[k];
        else
            ans = 2*C[k] - A[k] - B[k];
        printf("%d\n",ans);
    }
    return 0;
}