/* setter's code by SHIVAM GARG O(n) approach */
#include<bits/stdc++.h>
using namespace std;
const int N = 200005;
int str[N]; 
int rank[N], pos[N];
int cnt[N], next[N]; 
bool bh[N], b2h[N];
bool smaller_first_char(int a, int b){
  return str[a] < str[b];
}
void SuffixSort(int n){ 
  for (int i=0; i<n; ++i){
    pos[i] = i;
  }
  sort(pos, pos + n, smaller_first_char);
  for (int i=0; i<n; ++i){
    bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
    b2h[i] = false;
  }
  for (int h = 1; h < n; h <<= 1){
    int buckets = 0;
    for (int i=0, j; i < n; i = j){
      j = i + 1;
      while (j < n && !bh[j]) j++;
      next[i] = j;
      buckets++;
    }
    if (buckets == n) break; 
    for (int i = 0; i < n; i = next[i]){
      cnt[i] = 0;
      for (int j = i; j < next[i]; ++j){
        rank[pos[j]] = i;
      }
    }
    cnt[rank[n - h]]++;
    b2h[rank[n - h]] = true;
    for (int i = 0; i < n; i = next[i]){
      for (int j = i; j < next[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0){
          int head = rank[s];
          rank[s] = head + cnt[head]++;
          b2h[rank[s]] = true;
        }
      }
      for (int j = i; j < next[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0 && b2h[rank[s]]){
          for (int k = rank[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
        }
      }
    }
    for (int i=0; i<n; ++i){
      pos[rank[i]] = i;
      bh[i] |= b2h[i];
    }
  }
  for (int i=0; i<n; ++i){
    rank[pos[i]] = i;
  }
}
 
int height[N];
void getHeight(int n){
  for (int i=0; i<n; ++i) rank[pos[i]] = i;
  height[0] = 0;
  for (int i=0, h=0; i<n; ++i){
    if (rank[i] > 0){
      int j = pos[rank[i]-1];
      while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
      height[rank[i]] = h;
      if (h > 0) h--;
    }
  }
}
string s;
long long arr[200005];
long long brr[200005];
long long crr[200005];
long long drr[200005];
void solve(char s[200005]){
  int n = strlen(s);
  for (int i=0; i<n; ++i) str[i] = s[i];
  SuffixSort(n);
  getHeight(n);
}
int main(){
  //freopen("input44.txt","r",stdin);
  //freopen("output44.txt","w",stdout);
  char A[100005];
  char B[100005];
  int i,j;
  scanf("%s",A);
  scanf("%s",B);
  char C[200005];
  solve(A);
  int l1=strlen(A);
  for(i=0;i<l1;i++)
  {
  	arr[height[i]+1]++;
  	arr[l1-pos[i]+1]--;
  }
  solve(B);
  int l2=strlen(B);
  for(i=0;i<l2;i++)
  {
  	brr[height[i]+1]++;
  	brr[l2-pos[i]+1]--;
  }
  strcpy(C,A);
  char t[10]="$";
  strcat(C,t);
  strcat(C,B);
  solve(C);
  int l3=strlen(C);
  for(i=0;i<l3;i++)
  {
  	crr[height[i]+1]++;
  	crr[l3-pos[i]+1]--;
  }
  int x,y;
  x=l2;
  y=1;
  for(i=1;i<=l1+1;i++)
  {
  	drr[y]++;
  	drr[x+2]--;
  	x++;
  	y++;
  }
  for(i=1;i<=200000;i++)
  {
  	arr[i]=arr[i-1]+arr[i];
  	brr[i]=brr[i-1]+brr[i];
  	crr[i]=crr[i-1]+crr[i];
  	drr[i]=drr[i-1]+drr[i];
  }
  for(i=0;i<=200000;i++)
  crr[i]=crr[i]-drr[i];
  int q;
  long long answ;
  scanf("%d",&q);
  while(q--)
  {
  	scanf("%d %d",&x,&y);
  	if(x==1)//present in both
  	{
  		answ=arr[y]+brr[y]-crr[y];
  	}
  	else if(x==2)//present in A , not in B
  	{
  		answ=crr[y]-brr[y];
  	}
  	else if(x==3)//present in B , not in A
  	{
  		answ=crr[y]-arr[y];
  	}
  	else if(x==4)//presnt in A or B , not in both
  	{
  		answ=2*crr[y]-arr[y]-brr[y];
  	}
  	printf("%lld\n",answ);
  }
  return 0;
} 