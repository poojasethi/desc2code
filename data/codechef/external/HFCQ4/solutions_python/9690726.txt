#include<bits/stdc++.h>
using namespace std;
inline int read()
{
	int ret = 0,temp=1;
	int c = getchar_unlocked();
	while(c<'0' || c>'9'){
		c = getchar_unlocked();
	}
	while(c>='0' && c<='9')
	{
		ret = (ret<<3) + (ret<<1) + c - '0';
		c = getchar_unlocked();
	}
        return ret;
}
#define MAXN 100005
#define MAXLG 19
struct entry
{
    int nr[2];
    int p;
}L[MAXN];
int P[MAXLG][MAXN];
int N,i;
int stp,cnt;
int cmp(struct entry a,struct entry b)
{
    return a.nr[0]==b.nr[0]?(a.nr[1]<b.nr[1]?1:0):(a.nr[0]<b.nr[0]?1:0);
}
int lcp(int x,int y)
{
    int ret=0;
    if (x ==y) return N-x;
    for(int k=stp-1;k>=0;k--)
    {
        if(P[k][x]==P[k][y]){
            ret+=1<<k;
            x+=1<<k;
            y+=1<<k;
            if(x>=N || y>=N)
                return ret;
        }
    }
    return ret;
}
void solve(int N,vector<int> & sA,string A)
{
	//memset(P,0,sizeof P);
	//memset(L,0,sizeof L);
	for(int i=0;i<N;i++)
        P[0][i]=A[i]-'a';
    stp=1;
    for(cnt=1;cnt<N;cnt*=2)
    {
        for(int i=0;i<N;i++)
        {
            L[i].nr[0]=P[stp-1][i];
            L[i].nr[1]=i+cnt<N?P[stp-1][i+cnt]:-1;
            L[i].p=i;
        }
        sort(L,L+N,cmp);
        for(int i=0;i<N;i++)
        {
            P[stp][L[i].p]=i>0 && L[i].nr[0]==L[i-1].nr[0] && L[i].nr[1]==L[i-1].nr[1]?P[stp][L[i-1].p]:i;

        }
        stp++;
    }
    sA.clear();
    sA.resize(N+5);
 	sA[1]++;
 	sA[(N-L[0].p)+1]--;
 	for(int i=1;i<N;i++){
 		int s2=N-L[i].p;
 		int l=lcp(L[i].p,L[i-1].p);
 		sA[l+1]++;
 		sA[s2+1]--;
 	}
 	for(int i=1;i<sA.size();i++) sA[i]+=sA[i-1]; 	
}
int main()
{
	string A,B;
    cin>>A>>B;
    N=A.length();
    vector<int> fa,fb,fab;
    solve(N,fa,A);
    N=B.length();
    solve(N,fb,B);
    string C=A+"#"+B;
    N=C.length();
    solve(N,fab,C);
    int p=min(A.length(),B.length());
    for(int i=1;i<=p;i++){
    	fab[i]-=i;
    }
    int q;
    scanf("%d",&q);
    while(q--){
    	int ty,x;
    	ty=read();x=read();
    	if(ty==1){
    		printf("%d\n",fa[x]+fb[x]-fab[x]);
    	}
    	else if(ty==2){
    		printf("%d\n",fab[x]-fb[x]);
    	}
    	else if(ty==3){
    		printf("%d\n",fab[x]-fa[x]);
    	}
    	else
    		printf("%d\n",2*fab[x]-fa[x]-fb[x]);
    }
    return 0;
}
