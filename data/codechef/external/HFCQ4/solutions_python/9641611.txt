#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-9;
ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> void setmin(T& a, T val) {if (a > val) a = val;}
template<class T> void setmax(T& a, T val) {if (a < val) a = val;}
void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}

const int MAXN = 100010;
struct SuffixArray {
	char T[MAXN];
	int nsz;
	int RA[MAXN], tmpRA[MAXN];
	int SA[MAXN], tmpSA[MAXN];
	int c[MAXN];
	int Phi[MAXN], PLCP[MAXN];
	int LCP[MAXN];
	void init(char* str) {
		strcpy(T, str);
		nsz = strlen(T);
		for (int i = 0; i < nsz; i++) {
			RA[i] = tmpRA[i] = 0;
			SA[i] = tmpSA[i] = 0;
			Phi[i] = PLCP[i] = LCP[i] = 0;
		}
		constructSA();
		computeLCP();
	}
	void countingsort(int k) {
		int sum = 0, maxi = max(300, nsz);
		memset(c, 0, sizeof(c));
		for (int i = 0; i < nsz; i++) c[i + k < nsz ? RA[i + k] : 0]++;
		for (int i = 0; i < maxi; i++) {
			int t = c[i]; c[i] = sum; sum += t;
		}
		for (int i = 0; i < nsz; i++) tmpSA[c[SA[i] + k < nsz ? RA[SA[i] + k] : 0]++] = SA[i];
		for (int i = 0; i < nsz; i++) SA[i] = tmpSA[i];
	}
	void constructSA() {
		int r;
		for (int i = 0; i < nsz; i++) RA[i] = T[i];
		for (int i = 0; i < nsz; i++) SA[i] = i;
		for (int k = 1; k < nsz; k <<= 1) {
			countingsort(k);
			countingsort(0);
			tmpSA[SA[0]] = r = 0;
			for (int i = 1; i < nsz; i++) tmpRA[SA[i]] = (RA[SA[i]] == RA[SA[i - 1]] && RA[SA[i] + k] == RA[SA[i - 1] + k]) ? r : ++r;
			for (int i = 0; i < nsz; i++) RA[i] = tmpRA[i];
			if (RA[SA[nsz - 1]] == nsz - 1) break;
		}
	}
	void computeLCP() {
		int L = 0;
		Phi[SA[0]] = -1;
		for (int i = 1; i < nsz; i++) Phi[SA[i]] = SA[i - 1];
		for (int i = 0; i < nsz; i++) {
			if (!~Phi[i]) {PLCP[i] = 0; continue;}
			while (T[i + L] == T[Phi[i] + L]) L++;
			PLCP[i] = L;
			L = max(L - 1, 0);
		}
		for (int i = 0; i < nsz; i++) LCP[i] = PLCP[SA[i]];
	}
} sa;

const int maxn = 100010;
string s, t;
ll x[maxn];
ll y[maxn];
ll z[maxn];

void solve() {
	cin>>s>>t;
	int n = sz(s), m = sz(t);
	sa.init((char*) (s + "$").data());
	FOR(i, 0, sa.nsz - 1) {
		int k = sa.LCP[sa.RA[i]] + 1;
		int d = sa.nsz - i - 1;
		if (k <= d) {
			x[k]++;
			x[d + 1]--;
		}
	}
	FOR(i, 1, sa.nsz) {
		x[i] += x[i - 1];
	}
	sa.init((char*) (t + "$").data());
	FOR(i, 0, sa.nsz - 1) {
		int k = sa.LCP[sa.RA[i]] + 1;
		int d = sa.nsz - i - 1;
		if (k <= d) {
			y[k]++;
			y[d + 1]--;
		}
	}
	FOR(i, 1, sa.nsz) {
		y[i] += y[i - 1];
	}
	sa.init((char*) (s + " " + t + "$").data());
	FOR(i, 0, n) {
		int k = sa.LCP[sa.RA[i]] + 1;
		int d = n - i;
		if (k <= d) {
			z[k]++;
			z[d + 1]--;
		}
	}
	FOR(i, n + 1, n + m + 1) {
		int k = sa.LCP[sa.RA[i]] + 1;
		int d = n + m - i + 1;
		if (k <= d) {
			z[k]++;
			z[d + 1]--;
		}
	}
	FOR(i, 1, sa.nsz) {
		z[i] += z[i - 1];
	}
	int q; cin>>q;
	while (q--) {
		int op, k; cin>>op>>k;
		if (op == 1) {
			cout<<x[k] + y[k] - z[k]<<"\n";
		}
		else if (op == 2) {
			cout<<z[k] - y[k]<<"\n";
		}
		else if (op == 3) {
			cout<<z[k] - x[k]<<"\n";
		}
		else if (op == 4) {
			cout<<2 * z[k] - x[k] - y[k]<<"\n";
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
