using namespace std;
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <limits.h>
#include <vector>
#include <map>
#include <bitset>
#include <string>
#include <iterator>
#include <set>
#include <utility>
#include <queue>
#include <numeric>
#include <functional>
#include <ctype.h>
#include <stack>
#include <algorithm>
#include <cstdlib>
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define wl(n) while(n--)
#define ll long long
#define bitcnt(x) __builtin_popcount(x)
#define P(x) printf("%d\n",x)
#define PB push_back
#define MP make_pair
#define fl(i,n) for(i=0;i<n;i++)
#define fil(i,a,n) for(i=a;i<n;i++)
#define rev(i,a,n) for(i=n-1;i>=a;i--)
#define mem(a,i) memset(a,i,sizeof(a))
#define F first
#define S1 second
typedef pair<int,int> P;
vector<int> v1;
pair<int,int> p1;
#define MOD 1000000007
#define debug(x)  printf("####%d####\n",x);
#define nl printf("\n");
#define str string
int a[1234567];
string s,s1;
int dp[1001];
ll pow1(ll x,ll y)
{
    if(y==0)
    return 1;
    ll temp= pow1(x,y/2)%MOD;
    if(y%2==0)
    return (temp*temp)%MOD;
    else
    return (((temp*temp)%MOD)*x)%MOD;
}
// suffix array starts
   #define MAXN 200013
   #define LOGN 20
   int level[LOGN][MAXN],stp,cnt,rankarray[MAXN],sa[MAXN],lcp[MAXN];
   ll cntA[MAXN],cntB[MAXN],cntU[MAXN];
   struct node
   {
       int nr[2],p;    
   }L[MAXN];
   int findlcp(int x, int y,int n)
   {
      int ans =0 ; 
      for (int k = stp-1; k>=0 && x<n && y<n; k--)
      {
          if(level[k][x]==level[k][y])
          {
              int t = (int)pow1(2, k);
              ans+=t; 
              x += t, y +=t;
          }
      }
      return ans; 
   }
   bool cmp(struct node a,struct node b)
   {
       if(a.nr[0]!=b.nr[0])
           return a.nr[0]<b.nr[0];
       return a.nr[1]<b.nr[1];
   }
   void kasai(int n,string s)
   {
       int i,k=0;
       for (int i = 0; i < n; ++i,k?k--:0)
       {
           if(rankarray[i]==n-1)
           {
               k=0;
               continue;
           }
           int j=sa[rankarray[i]+1];
           while(i+k<n&&j+k<n&&s[i+k]==s[j+k])
               k++;
           lcp[rankarray[i]]=k;
       }
   }
   void build(int n,string s)
   {
       int i;
       fl(i,n)
       level[0][i]=s[i]-'a'; // ith length se start hone vaali string ki lexographical rankarrayition
       for(stp=1,cnt=1;cnt<n;stp++,cnt*=2)
       {
           fl(i,n)
           {
               L[i].nr[0]=level[stp-1][i];
               if(i+cnt<n)
                   L[i].nr[1]=level[stp-1][i+cnt];
               else
                   L[i].nr[1]=-1;// INT_MAX in case of smallest lexographical rotation;
               L[i].p=i;
           }
           sort(L,L+n,cmp);
           fl(i,n)
           {
               if(i>0&&L[i].nr[0]==L[i-1].nr[0]&&L[i].nr[1]==L[i-1].nr[1])
                   level[stp][L[i].p]=level[stp][L[i-1].p];
               else
                   level[stp][L[i].p]=i;
           }
       }
       fl(i,n)
       sa[level[stp-1][i]]=i;
       fl(i,n)
       rankarray[sa[i]]=i; // ith sequence kis rankarrayition se start ho raha h 
       kasai(n,s);
   }
   // end of suffix array
void computeDistinctSubstrings(int n,ll cnt[])
{
	cnt[1]++;
	cnt[n-sa[0]+1]--;
	int i;
	fil(i,1,n)
	{
		cnt[lcp[i-1]+1]++;
		cnt[n-sa[i]+1]--;
	}
	fil(i,1,n+1)
	cnt[i]+=cnt[i-1];
}
int main()
{
    //std::ios_base::sync_with_stdio(false);
    int t;
    int n,i,j,k,m,l;


    cin>>s;
    n=s.length();
    build(n,s);
    computeDistinctSubstrings(n,cntA);
    

    cin>>s1;
    m=s1.length();
    build(m,s1);
    computeDistinctSubstrings(m,cntB);
    

    s+="#"+s1;
    m=s.length();
    build(m,s);
    fil(i,1,m)
    {
    	if(sa[i]<n)
    	{
    		cntU[lcp[i-1]+1]++;
    		cntU[n-sa[i]+1]--;
    	}
    	else if(sa[i]>n)
    	{
    		cntU[lcp[i-1]+1]++;
    		cntU[m-sa[i]+1]--;
    	}
    }
    fil(i,1,m+1)
    cntU[i]+=cntU[i-1];

    int q;
    S(q);
    wl(q)
    {
    	S2(j,k);
    	if(j==1)
    		cout<<cntA[k]+cntB[k]-cntU[k]<<"\n";
    	else if(j==2)
    		cout<<cntU[k] - cntB[k]<<"\n";
    	else if(j==3)
    		cout<<cntU[k] - cntA[k]<<"\n";
    	else
    		cout<<2*cntU[k] - cntA[k] - cntB[k]<<"\n";
    }
    
    /*fil(i,1,m+1)
    cout<<cntA[i]<<" ";
    nl;

    fil(i,1,m+1)
    cout<<cntB[i]<<" ";
    nl;

    fil(i,1,m+1)
    cout<<cntU[i]<<" ";
    nl;
*/
    /*ll ans=0;
    fl(i,m+1)
    ans+=2*cntU[i]-cntA[i]-cntB[i];

    cout<<ans<<"\n";*/

    return 0;
}