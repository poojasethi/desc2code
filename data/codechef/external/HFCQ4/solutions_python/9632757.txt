#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ll long long
#define s(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define sd(x) scanf("%lf", &x)
#define mod 1000000007
#define get getchar_unlocked

vector < pair < pair <int, int>, int> > v;
int dp[25][200005];
char a[200005];
char b[200005];
int ansA[200005];
int ansB[200005];
int ansAUB[200005];

void suffix(char a[], string &P, int n, int ans[])
{
    int i, j, k, x, y;
    for (i = 0; i < n; ++i) {
        dp[0][i] = a[i] - 97;
        P.pb(a[i]);
    }
    bool con = true;
    for (j = 0; con; ++j) {
        v.clear();
        for (i = 0; i < n; ++i) {
            if (i+(1<<j) < n)
                v.pb(mp(mp(dp[j][i], dp[j][i+(1<<j)]), i));
            else
                v.pb(mp(mp(dp[j][i], -1), i));
        }
        sort(v.begin(), v.end());
        con = false;
        dp[j+1][v[0].second] = 0;
        for (i = 1; i < n; ++i) {
            if (v[i].first == v[i-1].first) {
                dp[j+1][v[i].second] = dp[j+1][v[i-1].second];
                con = true;
            }
            else
                dp[j+1][v[i].second] = i;
        }
    }
    int tmp;
    ++ans[1];
    --ans[n-v[0].second+1];
    for (i = 1; i < v.size(); ++i) {
        x = v[i].second;
        y = v[i-1].second;
        tmp = 0;
        for (k = j; k >= 0 && x < n && y < n; --k) {
            if (dp[k][x] == dp[k][y]) {
                x += (1<<k);
                y += (1<<k);
                tmp += (1<<k);
            }
        }
        ++ans[tmp+1];
        --ans[n-v[i].second+1];
    }
}

int main()
{
    string P, Q;
    scanf("%s", a);
    scanf("%s", b);
    int lenA = strlen(a);
    int lenB = strlen(b);
    suffix(a, P, lenA, ansA);
    P.pb('=');
    suffix(b, P, lenB, ansB);
    for (int i = 0; i < P.size(); ++i)
        a[i] = P[i];
    suffix(a, Q, lenA+lenB+1, ansAUB);
    int i;
    for (i = 1; i <= lenA; ++i)
        ansA[i] += ansA[i-1];
    for (i = 1; i <= lenB; ++i)
        ansB[i] += ansB[i-1];
    int j = lenA + lenB + 1;
    for (i = 1; i <= j; ++i)
        ansAUB[i] += ansAUB[i-1];
    for (i = 1; i <= min(lenA, lenB)+1; ++i)
        ansAUB[i] -= i;
    int q, x, y;
    s(q);
    while (q--) {
        s(x);
        s(y);
        if (x == 1)
            printf("%d\n", ansA[y] + ansB[y] - ansAUB[y]);
        else if (x == 2)
            printf("%d\n", ansAUB[y]-ansB[y]);
        else if (x == 3)
            printf("%d\n", ansAUB[y]-ansA[y]);
        else if (x == 4)
            printf("%d\n", 2*ansAUB[y]-ansA[y]-ansB[y]);
        else
            assert(0);
    }
    return 0;
}
