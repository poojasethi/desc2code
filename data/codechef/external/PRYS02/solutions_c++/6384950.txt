/*Author :rednivrug15 */
#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define rep(i,n) for(int i=0; i<n ; i++)
using namespace std;
 
#define REP(i,n) for (int i = 1; i <= n; i++)
#define ll long long
const int mod=1000000007;
 
long long gcd(long long a,long long b)
{
    return b==0?a:gcd(b,a%b);
}
 
long long int lcm(long long int a, long long int b) {
  return (a/gcd(a,b))*b;
}
 
long long extended_euclid(long long int a, long long int b,long long int &x,long long int &y) {
  long long int xx = y = 0;
  long long int yy = x = 1;
  while (b) {
    long long int q = a/b;
    long long int t = b; b = a%b; a = t;
    t = xx; xx = x-q*xx; x = t;
    t = yy; yy = y-q*yy; y = t;
  }
  return a;
}
 
int tree[400001];
int n;
 
void update(int node,int i,int j,int x)
{
    if(i>x || j<x)
        return;
    if(i==x && j==x)
    {
        tree[node]=1;
        return;
    }
    update(2*node,i,(i+j)/2,x);
    update(2*node+1,(i+j)/2+1,j,x);
    tree[node]=tree[2*node]&tree[2*node+1];
}
 
int query(int node,int i,int j,int x)
{
    if(j<x)
        return -1;
    if(tree[node]==1)
        return -1;
    if(i==j)
        return i;
    int leftchild=query(2*node,i,(i+j)/2,x);
    //printf("%d %d\n",leftchild,node);
    if(leftchild!=-1)
        return leftchild;
    return query(2*node+1,(i+j)/2+1,j,x);
}
 
 
int main()
{
    int t;
    cin>>t;
 
    while(t--)
    {
       memset(tree,0,sizeof tree);
       cin>>n;
 
       if(n==0)
       {
           printf("0\n");
           continue;
       }
 
       if(n==1)
       {
           printf("0 1\n");
           continue;
       }
 
       int N=n;
       if(n%2==1)
        n=n-1;
 
       int ans[N];
 
       ans[0]=(n/2);
       ans[n-1]=(n/2)+1;
 
       update(1,1,n,n/2);
       update(1,1,n,(n/2)+1);
 
       long long sum=0;
       int flag=0,last=ans[0];
 
       for(int i=1,j=n-2; i<=j; i++,j--)
       {
           int put,diff;
           if(flag==0)
           {
               put=query(1,1,n,last);
               diff=ans[i-1]-put;
               last=put;
           }
           else
           {
               put=query(1,1,n,1);
               diff=ans[i-1]-put;
           }
           update(1,1,n,put);
 
           ans[i]=put;
           ans[j]=ans[j+1]+diff;
 
           update(1,1,n,ans[i]);
           update(1,1,n,ans[j]);
           flag^=1;
       }
 
       if(N%2==1)
       {
           ans[N-1]=ans[n-1];
           ans[n-1]=N;
       }
 
       for(int i=1; i<N; i++)
        sum+=abs(ans[i]-ans[i-1]);
 
        printf("%lld ",sum);
         for(int i=0; i<N; i++)
          printf("%d ",ans[i]);
        printf("\n");
    }
 
    return 0;
}