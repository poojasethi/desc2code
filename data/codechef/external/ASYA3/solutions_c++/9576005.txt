//Author : pakhandi
//
using namespace std;

#include<bits/stdc++.h>

#define wl(n) while(n--)
#define fl(i,a,b) for(i=a; i<b; i++)
#define rev(i,a,b) for(i=a; i>=b; i--)

#define si(n) scanf("%d", &n)
#define sll(l) scanf("%lld",&l)
#define ss(s) scanf("%s", s)
#define sc(c) scanf("%c", &c)
#define sd(f) scanf("%lf", &f)

#define pi(n) printf("%d\n", n)
#define pll(l) printf("%lld", l)
#define ps(s) printf("%s\n", s)
#define pc(c) printf("%c\n", c)
#define pd(f) printf("%.20lf\n", f)

#define debug(x) cout<<"\n#("<<x<<")#\n"
#define nline printf("\n")

#define mem(a,i) memset(a,i,sizeof(a))

#define MOD 1000000007
#define ll long long int
#define u64 unsigned long long int

#define mclr(strn) strn.clear()
#define ignr cin.ignore()
#define PB push_back
#define SZ size
#define MP make_pair
#define fi first
#define sec second

std::vector<int> adj[1000006], A, B;
bool vis[1000006];
int cost[1000006];
pair<int,int> sub[1000006];
int parent[1000006];
int totMarbles;
int nodes, edges;

pair<int,int> dfs(int node, int par)
{
	if(vis[node])	return MP(0,0);
	vis[node] = 1;

	parent[node] = par;

	int i, limit = adj[node].SZ();

	fl(i,0,limit)
	{
		int v = adj[node][i];
		pair<int,int> temp = dfs(v,node);
		sub[node].first += temp.first;
		sub[node].second += temp.second;
	}

	sub[node].first++;
	sub[node].second += cost[node];

	return sub[node];
}

int main()
{
	int cases;
	int i, j;

	si(cases);

	wl(cases)
	{
		si(nodes);

		//--------------------------------------
		
		edges = nodes - 1;

		fl(i,0,nodes)
		{
			adj[i].clear();
			cost[i] = 0;
			sub[i].first = sub[i].second = 0;
			vis[i] = 0;
		}
		A.clear();
		B.clear();

		long double ans = 0.0;

		totMarbles = 0;

		//--------------------------------------

		fl(i,0,edges)
		{
			int x, y;
			si(x);	si(y);

			adj[x].PB(y);
			adj[y].PB(x);
			A.PB(x);	B.PB(y);
		}

		fl(i,0,nodes)
		{
			si(cost[i]);
			totMarbles += cost[i];
		}

		dfs(0,-1);

		//-------------------------------------

		fl(i,0,edges)
		{
			int na, nb, ma, mb;
			long double pa=1.0, pb=1.0;

			pair<int,int> temp;

			if(parent[A[i]] == B[i])
			{
				temp = sub[A[i]];
			}
			else
			{
				temp = sub[B[i]];
				temp.first = nodes - temp.first;
				temp.second = totMarbles - temp.second;
			}

			na = temp.first;
			ma = temp.second;

			nb = nodes - na;
			mb = totMarbles - ma;

			int options = nodes-1;

			long double foroneA = nb/(options*1.0);
			fl(j,0,ma)
				pa *= foroneA;

			long double foroneB = na/(options*1.0);
			fl(j,0,mb)
				pb *= foroneB;

			ans += (pa*pb);
		}

		printf("%.20Lf\n", ans);
		//pd(ans);

	}
}