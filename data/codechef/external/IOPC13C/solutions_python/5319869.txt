#include <bits/stdc++.h>

using namespace std;

typedef long long LL;

const int MAXN = 100005;
const LL mod = (LL) 1e9 + 7;

int N, root[2], visited[2][MAXN];
vector<int> g[2][MAXN];

string toString(int n) {
    if (n == 0) return "0";
    string ans = "";
    while (n) {
        ans += (char) (n % 10 + '0');
        n /= 10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

LL getHash(vector<LL> a) {
    string s = "";
    for (int i = 0; i < a.size(); i++) {
        s += toString(a[i]);
        if (i + 1 != a.size()) {
            s += ",";
        }
    }
    //cout << "here " << s << endl;
    LL res = 0;
    for (int i = 0; i < s.size(); i++) {
        res *= 23;
        if (s[i] >= 0 && s[i] <= 9) {
            res += (s[i] - '0' + 1);
        } else {
            res += 13;
        }
        res %= mod;
    }
    return res;
}

LL dfs(int flag, int u) {
    //cout << flag << " " << u << endl;
    visited[flag][u] = true;
    vector<LL> child;
    for (int i = 0; i < g[flag][u].size(); i++) {
        int v = g[flag][u][i];
        if (!visited[flag][v]) {
            child.push_back(dfs(flag, v));
        }
    }
    sort(child.begin(), child.end());
    child.push_back(1);
    /*
    cout << "---- " << endl;
    cout << flag << " " << u << endl;
    for (int i = 0; i < child.size(); i++) {
        cout << child[i] << " ";
    }
    cout << endl;
    */
    //cout << "in dfs " << flag << " " << u << endl;
    return getHash(child);
}

int main() {
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    int T, tc = 1;
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &N);
        for (int flag = 0; flag < 2; flag++) {
            scanf("%d", &root[flag]);
            for (int i = 0; i + 1 < N; i++) {
                int u, v;
                scanf("%d %d", &u, &v);
                //cout << u << " " << v << endl;
                g[flag][u].push_back(v);
                g[flag][v].push_back(u);
            }
        }
        memset(visited, 0, sizeof(visited));
        //cout << "here" << endl;
        vector<LL> a(2);
        for (int flag = 0; flag < 2; flag++) {
            a[flag] = dfs(flag, root[flag]);
        }
        //cout << "hashes " << a[0] << " " << a[1] << endl;
        //cout << "answer" << endl;
        if (a[0] != a[1]) {
            printf("0\n");
        } else {
            printf("1\n");
        }
        for (int flag = 0; flag < 2; flag++) {
            for (int i = 0; i < N; i++) {
                g[flag][i].clear();
            }
        }
    }

    return 0;
}
