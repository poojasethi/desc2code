#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <utility>
#include <vector>
#include <map>
#include <sstream>

using namespace std;

typedef long long LL;

int n , m , k;

vector<vector<int > >  adjlist1 (100005);
vector<vector<int > > adjlist2 (100005);

int root1 , root2;
int deg1[100005] , deg2[100005];
int visited1[100005] , visited2[100005];

vector<vector<int> > D1 (100005);
vector<vector<int> > D2 (100005);

void dfs1 (int from , int depth)
{
	visited1[from] = true;
	int cnt = 0;
	for (int i = 0; i < adjlist1[from].size(); i++)
	{
		int to = adjlist1[from][i];
		if (!visited1[to])
		{
			dfs1 (to , depth + 1);
			cnt ++;
		}
	} 
	deg1[from] = cnt;
	D1[depth].push_back(cnt);
}

void dfs2 (int from , int depth)
{
	visited2[from] = true;
	int cnt = 0;
	for (int i = 0; i < adjlist2[from].size(); i++)
	{
		int to = adjlist2[from][i];
		if (!visited2[to])
		{
			dfs2 (to , depth + 1);
			cnt ++;
		}
	} 
	deg2[from] = cnt;
	D2[depth].push_back(cnt);
}

int solveIt ()
{
//	cout << "deg1" << endl;
//	for (int i = 0; i < n; i++)
//		cout << deg1[i] << " ";
//	cout << endl;
//	
//	cout << "deg2" << endl;
//	for (int i = 0; i < n; i++)
//		cout << deg2[i] << " ";
//	cout << endl;
//	
	
	for (int i = 0; i <= n; i++)
	{
		int sz1 = D1[i].size();
		int sz2 = D2[i].size();
		
//		cout << "deg1" << endl;
//		for (int j = 0; j < sz1; j++)
//			cout << D1[i][j] << " ";
//		cout << endl;
	
//		cout << "deg2" << endl;
//		for (int j = 0; j < sz2; j++)
//			cout << D2[i][j] << " ";
//		cout << endl;
	
		
		if (sz1 != sz2) return false;
		
		sort (D1[i].begin() , D1[i].end());
		sort (D2[i].begin() , D2[i].end());
		
						
		for (int j = 0; j < sz1; j++)
		{
			if (D1[i][j] != D2[i][j])
				return false;
		}
	}
	
	return true;
}

int main()
{
	int T;
	scanf ("%d" , &T);
	while (T--)
	{
		scanf ("%d" , &n);
		
		scanf ("%d", &root1);
		for (int i = 0; i + 1 < n; i++)
		{
			int x, y;
			scanf ("%d %d" , &x , &y);
			adjlist1[x].push_back(y);
			adjlist1[y].push_back(x);
		}

		scanf ("%d", &root2);
		for (int i = 0; i + 1 < n; i++)
		{
			int x, y;
			scanf ("%d %d" , &x , &y);
			adjlist2[x].push_back(y);
			adjlist2[y].push_back(x);
		}
		
		
		dfs1 (root1 , 0);
		dfs2 (root2 , 0);
				
		int res = solveIt();
		
		printf("%d\n" , res);		
		
		for (int i = 0; i < n; i++)
			adjlist1[i].clear();
		for (int i = 0; i < n; i++)
			adjlist2[i].clear();
		for (int i = 0; i <= n; i++)
			D1[i].clear();
		for (int i = 0; i <= n; i++)
			D2[i].clear();
		
		memset (visited1 , 0 , sizeof (visited1));
		memset (visited2 , 0 , sizeof (visited2));
		memset (deg1 , 0 , sizeof(deg1));
		memset (deg2 , 0 , sizeof(deg2));
		
	}

	return 0;
}