#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

const int max_n=110;

int T;
int n;
char s[max_n];
int ch[max_n][2], nch[max_n]={0};
stack<int> S;

struct pol
{
	int d;
	LL a[55];
	pol(){}
};
pol P[max_n];

pol oneminus(pol p)
{
	pol ret;

	ret.d=p.d;
	ret.a[0]=1ll-p.a[0];
	forup(i,1,ret.d+1)
		ret.a[i]=(-p.a[i]);

	return ret;
}

pol operator*(pol p, pol q)
{
	pol ret;

	ret.d=p.d+q.d;
	rep(i,ret.d+1)
	{
		ret.a[i]=0ll;
		rep(j,i+1)
			if(j<=p.d and i-j<=q.d)
				ret.a[i]+=(p.a[j]*q.a[i-j]);
	}

	return ret;
}

void DFS(int ix)
{
	if(s[ix]=='x')
	{
		P[ix].d=1;
		P[ix].a[0]=1ll;
		P[ix].a[1]=(-1ll);
		return;
	}

	DFS(ch[ix][0]);
	DFS(ch[ix][1]);

	if(s[ix]=='m')
		P[ix]=P[ch[ix][0]]*P[ch[ix][1]];
	else
		P[ix]=oneminus(oneminus(P[ch[ix][0]])*oneminus(P[ch[ix][1]]));
}

int main()
{
	gi(T);

	rep(z,T)
	{
		gs(s); slenn(s,n);

		fill(nch,nch+n,0);
		while(not S.empty()) S.pop();

		rep(i,n)
		{
			if(s[i]!='x')
				S.push(i);
			else
			{
				int curr=i;
				while(not S.empty())
				{
					ch[S.top()][nch[S.top()]++]=curr;
					if(nch[S.top()]==2)
					{
						curr=S.top();
						S.pop();
					}
					else
						break;
				}
			}
		}

		/*rep(i,n)
			if(s[i]!='x')
				printf("%d: %d %d\n",i,ch[i][0],ch[i][1]);*/

		DFS(0);

		double res=(double(0));
		pol p=P[0];
		rep(i,p.d+1)
			res+=((double(p.a[i]))/(double(i+1)));

		pdn(res);
	}
	
	return 0;
}