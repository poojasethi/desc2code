// saurav shekhar
// Codechef MINMAX, Amritapuri regionals 12

#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cassert>

using namespace std;
typedef long double Lf;
const int LIM = 102;

/********polynomial*/
typedef vector<long long> poly;
int init[] = {0,1LL};

poly operator+ (const poly &f, const poly &g)
{
	poly h;
	int i=0;
	for(; i < min(f.size(), g.size()); i++) h.push_back(f[i] + g[i]);
	for(; i < f.size(); i++) h.push_back(f[i]);
	for(; i < g.size(); i++) h.push_back(g[i]);
	return h;
}

poly operator- (const poly &f, const poly &g)
{
	poly h;
	int i=0;
	for(; i < min(f.size(), g.size()); i++) h.push_back(f[i] - g[i]);
	for(; i < f.size(); i++) h.push_back(f[i]);
	for(; i < g.size(); i++) h.push_back(-g[i]);
	return h;
}

poly operator* (const poly &f, const poly &g)
{
	poly h(f.size() + g.size() - 1, 0);
	for(int i=0; i < f.size(); i++) {
		for(int j=0; j < g.size(); j++) {
			h[i+j] += f[i] * g[j];
		}
	}
	return h;
}

ostream &operator<< (ostream &os, const poly &f) {		// for direct output
	if(!f.size()) os << "0";
	else {
		os << f[0];
		for(int i=1; i < f.size(); i++) {
			os << " + " << f[i] << "x^" << i;
		}
	}
}

/***********polynomial*/

int pos, MAXN;
char s[102];

poly find_cds()
{
	assert(pos < MAXN);
	if(s[pos] == 'x') {
		pos++;
		poly f(init, init+2);
		return f;
	} else {
		poly F1 ;
		poly F2 ;
		poly F;
		if(s[pos] == 'M') {
			pos++;
			F1 = find_cds();
			F2 = find_cds();
			F = F1 * F2;
			return F;
		} else {
			pos++;
			F1 = find_cds();
			F2 = find_cds();
			F = F1 + F2 - F1 * F2;
			return F;
		}
	}
}

int main()
{
	int T;
	Lf ans, n, d;
	poly cds;
	cin >> T;
	while(T--) {
		pos = 0;
		scanf("%s", s);
		MAXN = strlen(s);
		cds = find_cds();
		ans = 0.0;
		//cout << cds;
		//cout << "\n";
		for(int i=1; i < cds.size(); i++) {
			n = (Lf)cds[i] * (Lf)i;
			d = (Lf) i + 1.0 ;
			ans = ans +  (n/d) ; 
		}
		printf("%.7Lf\n", ans);
 	}
	return 0;
}
