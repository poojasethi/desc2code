#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5+5;
#define pii pair<int,int>
#define pll pair<long long>
#define mp make_pair
#define F first
#define S second
#define vi vector<long double>
#define vpii vector< pii >
#define vll vector<long long>
#define all(c) c.begin(), c.end() 
#define tr(container, it)  for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define pfi(x) printf("%d\n",x)
#define pfll(x) printf("%lld\n",x)
#define pfs(x) printf("%s\n",x)
#define sfi(x) scanf("%d",&x)
#define sfll(x) scanf("%lld",&x)
#define sfs(x) scanf("%s",x)
#define ull unsigned long long
#define vull vector< ull >
#define ld long double
#define pb push_back
int parent[105];
vector <int> children[105];
int nodes[105];
int root;
vi poly[105];
// bool done[105];
void print(vi& v1)
{
	for(int i = 0;i<v1.size();i++)
	{
		cout<<v1[i]<<" ";
	}
	cout<<endl;
}	
void sub1(vi& v1)
{	if(v1.size() == 0)
	{
		v1.pb(1);
		return;
	}

	for(int i = 1;i<v1.size();i++)
	{
		v1[i]*=-1;
	}

	v1[0] = 1-v1[0];
	
}
vi multiply(vi v1 , vi v2)
 {//	print(v1);
	// print(v2);
	vi v3(v1.size()+v2.size()-1,0);
	for(int i = 0;i<v1.size();i++)
	{
		for(int j = 0;j<v2.size();j++)
		{
			v3[i+j]+=v1[i]*v2[j];
		}
	}
	// print(v3);
	return v3;
}
void equate(int j,vi v1)
{
	for(int i = 0;i<v1.size();i++)
	{
		poly[j].pb(v1[i]);
	}
}
vi makepoly(int i)
{	
	if(children[i].size() == 0)
	{	//cout<<"YES"<<endl;
		vi v1 ;
		v1.pb(0);
		v1.pb(1);
		// print(v1);
		// done[i] = 1;
		equate(i,v1);
		return v1;
	}
	vi v1 = makepoly(children[i][0]);
	vi v2 = makepoly(children[i][1]);
	if(nodes[i] == 2)
	{//	done[i] = 1;
		equate(i,multiply(v1,v2));
		return poly[i];	
	}
	// done[i] = 1;
	vi v3;
	sub1(v1);
	sub1(v2);
	v3 = multiply(v1,v2);
	sub1(v3);
	equate(i,v3);
	return v3;

}
void make_tree(string s)
{
	int l = s.length();
	vector <int> v;
	int count = 0;
	for(int i=l-1;i>=0;i--)
	{	poly[i].resize(0);
		children[i].resize(0);
		if(s[i]=='x')
		{
			v.push_back(count);
			nodes[count++] = 0;
		}
		else if(s[i]=='m')
		{
			parent[v.back()] = count;
			v.pop_back();
			parent[v.back()] = count;
			v.pop_back();
			v.push_back(count);
			nodes[count++] = 1;
		}
		else if(s[i]=='M')
		{
			parent[v.back()] = count;
			v.pop_back();
			parent[v.back()] = count;
			v.pop_back();
			v.push_back(count);
			nodes[count++] = 2;
		}
		else
			cout<<"error";

	}
	root = count-1;
	parent[root] = -1;
	
	for(int i=0;i<l;i++)
	{
		if(parent[i]!=-1)
			children[parent[i]].push_back(i);
	}
}

int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{//	memset(done,0,sizeof done);
		string s;
		cin>>s;
		make_tree(s);
		makepoly(root);
		// cout<<poly[root].size()<<endl;
		// cout<<nodes[root]<<endl;
		// print(poly[root]);
		ld ans = 0;
		for(int i = 0;i<poly[root].size();i++)
		{
			ans+=poly[root][i]/((ld)(i+1));
		}
		cout<<setprecision(10)<<fixed<<1.0-ans<<endl;
	}
	
	return 0;
}