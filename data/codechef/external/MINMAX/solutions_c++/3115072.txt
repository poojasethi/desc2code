#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<numeric>
#include<stack>

using namespace std;

#define poly vector<long long int>
#define f(i,j) for(int i=0;i<j;i++)
#define fe(i,j) for(int i=0;i<=j;i++)
#define fr(i,j) for(int i=j;i>0;i--)
#define fre(i,j) for(int i=j;i>=0;i--)

void prnt_pol(poly & p){
  f(i,p.size()){
    cout<<p[i]<<" ";
  }
}

long double int_eval(poly & p){
  long double ans=0;
  long double temp;
  f(i,p.size()){
    ans+=((double) p[i])/(i+1);
  }
  return ans;
}

poly add_poly(poly & p1,poly & p2){
  poly sm;
  sm.resize(max(p1.size(),p2.size()),0);
  f(i,p1.size()){
    sm[i]+=p1[i];
  }
  f(i,p2.size()){
    sm[i]+=p2[i];
  }
  return sm;
}

poly sub_poly(poly & p1, poly & p2){
  poly sm;
  sm.resize(max(p1.size(),p2.size()),0);
  f(i,p1.size()){
    sm[i]+=p1[i];
  }
  f(i,p2.size()){
    sm[i]-=p2[i];
  }
  return sm;
}

poly mult_poly(poly & p1, poly & p2){
  poly temp;
  temp.resize(p1.size()+p2.size()-1,0);
  f(i,p1.size()){
    f(j,p2.size()){
      temp[i+j]+=p1[i]*p2[j];
    }
  }
  return temp;
}

int main(){
  poly cnt,temp,p1,p2;
  cnt.push_back(0);
  cnt.push_back(1);

  long double ans;
  int t;
  string s;
  stack<poly> st;

  cin>>t;
  while(t--){
    cin>>s;
    fre(i,s.length()-1){
      if(s[i]=='x'){
	st.push(cnt);
      }
      else if(s[i]=='m'){
	p1=st.top();
	st.pop();
	p2=st.top();
	st.pop();
	temp=mult_poly(p1,p2);
	st.push(temp);
      }
      else{
	p1=st.top();
	st.pop();
	p2=st.top();
	st.pop();
	temp=mult_poly(p1,p2);
	temp=sub_poly(p1,temp);
	temp=add_poly(p2,temp);
	st.push(temp);
      }
    }
    temp=st.top();
    st.pop();
    ans=int_eval(temp);
    printf("%.9Lf\n",ans);
  }
}
