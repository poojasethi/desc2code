#include <cstdio>
#include <cstring>

using namespace std;

const int MAXN = 120;

struct poly {
    int deg;
    long double coef[MAXN];
};

poly polys[MAXN];
char str[MAXN];
char aux[MAXN];

int main()
{
    int t;
    scanf("%d", &t);
    while (t--) {
        int lev = 0;
        scanf("%s", str);

        int n = strlen(str);
        for (int i = 0; i < n; ++i) {
            if (str[i] == 'm' || str[i] == 'M') {
                ++lev; 
                aux[lev] = str[i];
            } else {
                ++lev;
                aux[lev] = 'x';
                polys[lev].deg = 1;
                polys[lev].coef[0] = 0.0;
                polys[lev].coef[1] = 1.0;

                while (lev >= 3 && aux[lev] == 'x' && aux[lev - 1] == 'x') {
                    // compute probability encoding logic statements as polys
                    // e.g., min(p, q) < x <=> p < x or q < x 
                    // <=> (p < x) + (q < x) - (p < x and q < x)
                    if (aux[lev - 2] == 'm') {
                        // min(p(x), q(x)) = p(x) + q(x) - p(x) * q(x)
                        //                 = -(1 - p(x)) * (1 - q(x)) + 1
                        polys[lev - 2].deg = polys[lev - 1].deg + polys[lev].deg;
                        for (int p = 0; p <= polys[lev - 2].deg; ++p)
                            polys[lev - 2].coef[p] = 0;

                        for (int p = 0; p <= polys[lev].deg; ++p)
                            polys[lev].coef[p] = -polys[lev].coef[p];
                        polys[lev].coef[0] += 1.0;

                        for (int p = 0; p <= polys[lev - 1].deg; ++p)
                            polys[lev - 1].coef[p] = -polys[lev - 1].coef[p];
                        polys[lev - 1].coef[0] += 1.0;

                        for (int p = 0; p <= polys[lev].deg; ++p)
                            for (int q = 0; q <= polys[lev - 1].deg; ++q)
                                polys[lev - 2].coef[p + q] += polys[lev].coef[p] *
                                    polys[lev - 1].coef[q];

                        for (int p = 0; p <= polys[lev - 2].deg; ++p)
                            polys[lev - 2].coef[p] = -polys[lev - 2].coef[p];
                        polys[lev - 2].coef[0] += 1.0;
                    } else {
                        // max(p(x), q(x)) = p(x) * q(x)
                        polys[lev - 2].deg = polys[lev - 1].deg + polys[lev].deg;
                        for (int p = 0; p <= polys[lev - 2].deg; ++p)
                            polys[lev - 2].coef[p] = 0;

                        for (int p = 0; p <= polys[lev].deg; ++p)
                            for (int q = 0; q <= polys[lev - 1].deg; ++q)
                                polys[lev - 2].coef[p + q] += polys[lev].coef[p] *
                                    polys[lev - 1].coef[q];
                    }
                    aux[lev - 2] = 'x';
                    lev = lev - 2;
                }
            }
        }

        long double prob = 1.0;
        for (int i = 1; i <= polys[lev].deg; ++i)
            prob -= polys[lev].coef[i] / (i + 1);
        printf("%.9Lf\n", prob);
    }

    return 0;
}
