#include<bits/stdc++.h>
using namespace std;
 
#define LET(x, a)  __typeof(a) x(a)
#define TR(v, it) for(LET(it, v.begin()); it != v.end(); it++)
#define si(x) scanf("%d",&x)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define MOD 1000000007
#define SET(x,y) memset(x,y,sizeof(x));
#define LL long long int
#define ULL unsigned LL
#define PII pair<int, int>
#define double long double
 
class poly {
    vector<double> coeffs;
    int deg;
    public:
    void setcoeff(int x, double val) {
        if ((int)coeffs.size() <= x) {
            coeffs.resize(x + 1);
            deg = x;
        }
        coeffs[x] = val;
    }
    void addcoeff(int x, double val) {
        setcoeff(x, val + getcoeff(x));
    }
    double getcoeff(int x) {
        if ((int)coeffs.size() <= x)
            return 0;
        return coeffs[x];
    }
    int degree() {
        return deg;
    }
    poly operator * (poly b) {
        int i, j;
        poly ret;
        for (i = 0; i <= degree(); i++) {
            for (j = 0; j <= b.degree(); j++) {
                ret.addcoeff(i + j, getcoeff(i) * b.getcoeff(j));
            }
        }
        return ret;
    }
    poly operator + (poly b) {
        int i;
        poly ret;
        for (i = 0; i <= max(degree(), b.degree());i++) {
            ret.setcoeff(i, getcoeff(i) + b.getcoeff(i));
        }
        return ret;
    }
    poly operator - (poly b) {
        int i;
        poly ret;
        for (i = 0; i <= max(degree(), b.degree()); i++) {
            ret.setcoeff(i, getcoeff(i) - b.getcoeff(i));
        }
        return ret;
    }
    poly integral() {
        poly ret;
        int i;
        for (i = 0; i <= degree(); i++) {
            ret.setcoeff(i + 1, getcoeff(i) / (i + 1));
        }
        return ret;
    }
    poly differentiate() {
        poly ret;
        int i;
        for (i = 1; i <= degree(); i++) {
            ret.setcoeff(i - 1, getcoeff(i) * i);
        }
        return ret;
    }
    double pw(double a, int x) {
        double ret = 1;
        while (x--) {
            ret *= a;
        }
        return ret;
    }
    double getval(double loc) {
        double ans = 0;
        int i;
        for (i = 0; i <= degree(); i++) {
            ans += getcoeff(i) * pw(loc, i);
        }
        return ans;
    }
    void print() {
        int i;
        for (i = degree(); i >= 0; i--) {
            printf("%.1Lfx^%d + ", getcoeff(i), i);
        }
        printf("\n");
        return;
    }
};

poly ONE;
poly X;
string s;
int cloc = 0;
poly dfs() {
    char cval = s[cloc];
    cloc ++;
    if (cval == 'x') {
        return X;
    } else {
        poly p1 = dfs();
        poly p2 = dfs();
        poly cpol;
        if (cval == 'm')
            cpol = p1 + p2 - p1 * p2;
        else
            cpol = p1 * p2;
        return cpol;
    }
}

int main() {
    int t;
    ONE.setcoeff(0, 1);
    X.setcoeff(1, 1);
    cin >> t;
    while (t--) {
        cin >> s;
        cloc = 0;
        poly ret = (dfs().differentiate() * X).integral();
        printf("%.10Lf\n", ret.getval(1));
    }
    return 0;
}

