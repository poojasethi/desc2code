//Conversion Of Infix To Postfix including Paranthesis()
#include<stdio.h>
#include<string.h>
struct stack
{
 char arr[401];
 int tos;
};
void push(struct stack *,char);
char pop(struct stack *);
int pred(char,char);
int isempty(struct stack);
void convert(char *,char *);
int isopnd(char);
 
int main()
{
char infix[401],postfix[401];
int t;
scanf("%d",&t);
t++;
while(t--)
{
memset(infix,'\0',sizeof(infix));
memset(postfix,'\0',sizeof(postfix));
gets(infix);
//fflush(stdin);
convert(infix,postfix);
printf("%s\n",postfix);
}
//getch();
return 0;
}
 
 
 
void convert(char *infix,char *postfix)
{
struct stack s;
s.tos=-1;
int i,j=0,x;
char ch;
for(i=0;infix[i]!='\0';i++)
{
ch=infix[i];
  if(isopnd(ch)==1)
  {
                                 if(ch=='(')
	                             {
	         	                               push(&s,'(');
		                                       //break;
                                 }
                                 else if(ch==')')
                                 {
		                                            while((ch=pop(&s))!='(')
		                                            {                     
		                                                                  postfix[j]=ch;
	                                                                   j++;
                                                    }
                                                    // pop(&s);
	                                                 //break;
                                 }
                                 else
                                 {
                                     postfix[j]=ch;
                                      j++;
                                 }
  }
          else
          {
              	while(isempty(s)==0)
	            {     
                                                     x=pred(s.arr[s.tos],ch);
               	                                     if(x==0)
	                                                 break;
	                                                 postfix[j]=pop(&s);
	                                                 j++;
                 }
            push(&s,ch);        
          }
}
while(isempty(s)==0)
{
                    postfix[j]=pop(&s);
                    j++;
}
postfix[j]='\0';
}
 
int isempty(struct stack s)
{
if(s.tos==-1)
return 1;
else
return 0;
}
 
int isopnd(char ch)
{
if(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='^'||ch=='%')
return 0;
else
return 1;
}
 
int pred(char op1,char op2)
{
if(op1=='^')
return 1;
else if(op2=='^')
return 0;
else if(op1=='*'||op1=='/'||op1=='%')
return 1;
else if(op2=='*'||op2=='/'||op2=='%')
return 0;
else if(op1=='+'||op1=='-')
return 1;
else
return 0;
}
 
void push(struct stack *p,char item)
{
p->tos=p->tos+1;
p->arr[p->tos]=item;
}
 
 
char pop(struct stack *p)
{
char item;
item=p->arr[p->tos];
p->tos=p->tos-1;
return item;
}