#include <cstdio>

int mod=100000007;
char str[100010];
long long g[400010][5]={0};

int f(int n, int x)
{
	static int done[400010][5]={0},ans[400010][5]={0};

	if(done[n][x]) return ans[n][x];
	
	int rv = g[n][x];
	
	for(int i=n-x;i>0;i-=x) rv = (rv + g[i][x])%mod;

	done[n][x] = 1; ans[n][x] = rv;

	return rv;
}

int precompute()
{
	g[1][3]=1;
	g[2][3]=2;
	g[3][3]=4;
	for(int i=4;i<400010;i++) g[i][3]=(g[i-1][3]+g[i-2][3]+g[i-3][3])%mod;
	
	g[1][4]=1;
	g[2][4]=2;
	g[3][4]=4;
	g[4][4]=8;
	for(int i=5;i<400010;i++) g[i][4]=(g[i-1][4]+g[i-2][4]+g[i-3][4]+g[i-4][4])%mod;
	
	return 0;
}

int solve()
{
	long long rv=1;

	int times[256]={0};
	times['a']=times['d']=times['g']=times['j']=times['m']=times['p']=times['t']=times['w']=1;
	times['b']=times['e']=times['h']=times['k']=times['n']=times['q']=times['u']=times['x']=2;
	times['c']=times['f']=times['i']=times['l']=times['o']=times['r']=times['v']=times['y']=3;
	times['s']=times['z']=4;

	int code[256]={0};
	code['a']=code['b']=code['c']=2;
	code['d']=code['e']=code['f']=3;
	code['g']=code['h']=code['i']=4;
	code['j']=code['k']=code['l']=5;
	code['m']=code['n']=code['o']=6;
	code['p']=code['q']=code['r']=code['s']=7;
	code['t']=code['u']=code['v']=8;
	code['w']=code['x']=code['y']=code['z']=9;

	int xx[256]={0};
	xx['a']=xx['b']=xx['c']=3;
	xx['d']=xx['e']=xx['f']=3;
	xx['g']=xx['h']=xx['i']=3;
	xx['j']=xx['k']=xx['l']=3;
	xx['m']=xx['n']=xx['o']=3;
	xx['p']=xx['q']=xx['r']=xx['s']=4;
	xx['t']=xx['u']=xx['v']=3;
	xx['w']=xx['x']=xx['y']=xx['z']=4;

	int c=times[str[0]],last=code[str[0]],len=1;

	for(int i=1; str[i]; i++,len++)
	{
		if(code[str[i]]==last) 
		{
			c+=times[str[i]];
		}
		else
		{
			rv *= f(c,xx[str[i-1]]);
			rv %= mod;

			last = code[str[i]];
			c = times[str[i]];
		}
	}
	
	rv *= f(c,xx[str[len-1]]);
	rv %= mod;

	return (int)rv; 
}

int main()
{
	int t=0;
	scanf("%d",&t);
	precompute();
	while(t--)
	{
		scanf("%s",str);
		printf("%d\n",solve());
	}
	return 0;
}

