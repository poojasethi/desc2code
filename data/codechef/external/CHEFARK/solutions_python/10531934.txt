import math
     
"""def power(a,b):
        if(b<0):
            return power(1/a,-b)
        elif(b==0):
            return 1
        elif(b==1):
            return a
        elif(b%2==0):
            return power(a*a,b/2)%1000000007
        elif(b%2!=0):
            return (a * power(a*a,(b-1)/2))%1000000007
"""
     
'''def powerfn(a,n):
        result = 1
        value = a
        power = n
        while(power>0):
            if(power%2!=0):
                result = result*value
                result = result%1000000007
            value = value*value
            value = value%1000000007
            power = power/2
        return result
     
def modular_inv(n):
        return powerfn(n,1000000005)'''
mod=1000000007      
def powerfn(a,n):
    result = 1
    value = a
    power = n
    while(power>0):
        if(power%2!=0):
            result = result*value
            result = result%1000000007
        value = value*value
        value = value%1000000007
        power = power/2
    return result

def modular_inv(n):
    return powerfn(n,mod-2)
     
     
factorials=[]
inverse_fac=[]
factorials.append(1)
inverse_fac.append(1)
for i in range(1,100002):
        factorials.append(i*factorials[i-1]%1000000007)
for i in range(1,100002):
        inverse_fac.append(modular_inv(i)*inverse_fac[i-1]%1000000007)
    #print factorials
    #print inverse_fac
     
t=int(raw_input())
for i in range(t):
        s=raw_input()
        n,k=s.split()
        n=int(n)
        k=int(k)
        arr=list(map(int,raw_input().split()))
        counter=0
        for i in arr:
            if(i==0):
                counter+=1
        if(n==1 or counter==n):
            print "1"
        else:
            if(counter>1 and counter<n):
                n=n-counter+1
            if(n<=k):
                k=n
            ans=0
            for j in range(k,-1,-2):
                ans=((ans+((((inverse_fac[j]*factorials[n])%1000000007)*inverse_fac[n-j])%1000000007))%1000000007)
            print ans%1000000007 