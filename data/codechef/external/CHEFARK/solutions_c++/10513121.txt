#include<stdio.h>
long long int fun(long long int a,long long int b)
{
    long long int i,m=1000000007,arr[65],ans,v,mask,temp=1;
    arr[0]=a%m; ans=1;
        for(i=1;i<65;i++)
        arr[i]=(arr[i-1]*arr[i-1])%m;
        for(i=0;i<62;i++)
        {
            v=b&(temp<<i);
            mask=1<<i;
            if((v^mask)==0) ans=(ans*arr[i])%m;
        }
        return ans;
}
int main()
{
    long long int i,j,t,n,KK,array[100005],permu[100005],mod=1000000007;
     scanf("%lld",&t);
     permu[0]=1;permu[1]=1;
    for(i=2;i<100005;i++)
    {
      permu[i]=(permu[i-1]*(i%mod))%mod;
    }
    for(i=0;i<t;i++)
    {
        long long int count=0;
        scanf("%lld%lld",&n,&KK);
        for(j=0;j<n;j++)
        {
            scanf("%lld",&array[j]);
            if(array[j]==0) count=count+1;
        }
  long long int sum,p,flag,ans,a,b;
    if(count==0)
    {
        if(KK>=n)
        {
         ans=fun(2,(n-1));
        printf("%lld\n",ans);
        }
        else
        {
            if(KK%2==0)
            {     sum=0;
                for(p=0;p<=KK;p=p+2)
                {
                  a=(permu[n-p]*permu[p])%mod;
                  b=mod-2;
                 ans=fun(a,b);
                 flag=(permu[n]*ans)%mod;
                 sum=(sum+flag)%mod;
                }
              printf("%lld\n",sum);
            }

            else
            {
                    sum=0;
                for(p=1;p<=KK;p=p+2)
                {
                  a=(permu[n-p]*permu[p])%mod;
                  b=mod-2;
                 ans=fun(a,b);
               flag=(permu[n]*ans)%mod;
               sum=(sum+flag)%mod;
            }
             printf("%lld\n",sum);
            }
       }
    }
    else  //-----------------------------------
    {
       if(KK>=(n-count))
        {
            if((n-count)==0) printf("1\n");
            else{
                ans=fun(2,(n-count));
                printf("%lld\n",ans);
                }
        }
        else
        {
                sum=0;
                for(p=0;p<=KK;p++)
                {
                  a=(permu[n-count-p]*permu[p])%mod;
                  b=mod-2;
                 ans=fun(a,b);
                 flag=(permu[n-count]*ans)%mod;
                 sum=(sum+flag)%mod;
                }
              printf("%lld\n",sum);
        }

    }
  }

 }

