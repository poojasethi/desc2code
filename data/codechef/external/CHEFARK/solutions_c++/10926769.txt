#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 1;
const long long MOD = 1e9 + 7;
unsigned long long fact[N], inv_fact[N];

unsigned long long modulo_inverse(unsigned long long num){
	unsigned long long ans = 1, power = MOD - 2;
	while(power > 0){
		if(power & 1){
			ans = (ans * num) % MOD;
		}
		num = (num * num) % MOD;
		power >>= 1;
	}
	return ans;
}

int main(){
	int t, n, k, i, zer, en, num;
	unsigned long long temp, ans;
	fact[0] = inv_fact[0] = 1;
	for(i = 1; i <= N; ++i){
		fact[i] = (fact[i - 1] * i) % MOD;
		inv_fact[i] = modulo_inverse(fact[i]);
	}
	scanf("%d", &t);
	while(t--){
		scanf("%d %d", &n, &k);
		zer = 0;
		for(i = 0; i < n; ++i){
			scanf("%d", &num);
			if(num == 0)
				++zer;
		}
		n -= zer;
		en = min(n, k) + 1;
		ans = 0;
		for(i = 0; i < en; ++i)
			if(zer || (k - i) % 2 == 0){
				temp = fact[n];
				temp = (temp * inv_fact[i]) % MOD;
				temp = (temp * inv_fact[n - i]) % MOD;
				ans = (ans + temp) % MOD;
			}
		printf("%llu\n", ans);		
	}
	return 0;
}