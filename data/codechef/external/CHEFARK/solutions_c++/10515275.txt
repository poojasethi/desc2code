#include <stdio.h>
 
typedef long long i64;
const i64 MOD = 1000000007;
i64 T, N, K, fact[100005], inv_fact[100005];
 
i64 power(i64 b, i64 e)
{
	if (!e) return 1;
	i64 i = power(b, e >> 1);
 
	i = (i * i) % MOD;
	if (e & 1) i = (i * b) % MOD;
	return i;
}
 
void factorial()
{
	fact[0] = fact[1] = 1;
	for (i64 i = 2; i <= 100004; ++i) fact[i] = (fact[i-1] * i) % MOD;
	inv_fact[100004] = power(fact[100004], MOD-2);
	for (i64 i = 100004; i > 0; --i) inv_fact[i-1] = (i * inv_fact[i]) % MOD;
}
 
i64 nCr(int n, int r)
{
	if (r > n) return 0;
	return (((fact[n] * inv_fact[n-r]) % MOD) * inv_fact[r]) % MOD;
}
 
int main()
{
	i64 tmp, ans, aN;
	factorial();
	scanf("%lld", &T);
	while (T--)
	{
		ans = 0;
		scanf("%lld%lld", &N, &K);
		aN = N;
		for (int i = 0; i < N; ++i) 
		{
			scanf("%lld", &tmp);
			if (!tmp) --aN;
		}
		if (aN == N) for (int i = K; i >= 0; i -= 2) ans = (ans + (nCr(N, i))) % MOD;
		else for (int i = K; i >= 0; --i) ans = (ans + (nCr(aN, i))) % MOD;
		printf("%lld\n", ans);
	}
	return 0;
}