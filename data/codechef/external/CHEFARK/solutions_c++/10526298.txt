#include <bits/stdc++.h>

using namespace std;

#define boost ios::sync_with_stdio(true); cin.tie(0); cout.tie(0);
#define pii pair<int,int>
#define vpii vector<pair<int,int> >
#define vvpii vector<vector<pair<int,int> > >
#define vi vector<int>
#define vii vector<vector<int> >
#define pb push_back 
#define mp make_pair 

long long mod= 1000000007;

long long binpow(long long a,long long n)
{
	if(n==0)
		return 1;
	if(n==1)
		return a;
	long long x=binpow(a,n/2);
	if(n%2==0)
		return(x*x)%mod;
	else
		return(a*(x*x)%mod)%mod;
}

long long inv_mod(long long a)
{
	if(a==0)
		return 1;
	return binpow(a,mod-2);
}

long long inverse(long long a)
{
	long long pow = mod - 2;
	unsigned long long act = a , res = 1;
	while( pow )
	{
		if(pow&1)
		{
			res *= act;
			res %= mod;
		}
		act *= act;
		act %= mod;
		pow >>= 1;
	}
	return res;
}


int main()
{
	//boost;
	int t;
	scanf("%d",&t);
	int i;
	//compute factorials mod
	long long fact[100002];
	int l;
	fact[0]=1;
	fact[1]=1;
	for(l=2;l<=100000;l++)
	{
		fact[l]=(fact[l-1]*l)%mod;
	}
	while(t--)
	{
		long long u,k;
		scanf("%lld %lld",&u,&k);
		long long n=0,z=0,x;
		int flag=0;
		while(u--)
		{
			scanf("%lld",&x);
			if(x!=0)
				n++;
			else
				z++;

		}
		long long ans=0;

		//n holds number of non-zero numbers in the array
		//Required answer is n-1C0 + n-1C1 +...+ n-1Ck
		for(i=0;i<=min(k,n);i++)
		{
			if(z>0 || (k+i)%2==0)
			{
			//	cout<<"andhar"<<endl;
				long long ans1=fact[n];
			//	cout<<"ans1 *1= "<<ans1<<endl;
				ans1=(ans1*inverse(fact[i]))%mod;
			//	cout<<"ans1 *2= "<<ans1<<endl;
				ans1=(ans1*inverse(fact[n-i]))%mod;
			//	cout<<"ans1 *3= "<<ans1<<endl;
			//	cout<<"ans1="<<ans1<<" i="<<i<<endl;;
				ans=(ans+ans1)%mod;
			}
		}
		printf("%lld\n",ans);

	}
	return 0;
}
