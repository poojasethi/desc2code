#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<string>
#include<sstream>
#include<cstring>
#include<climits>
#include<cmath>
using namespace std;
 
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%ld",&n)
#define sll(n) scanf("%lld",&n)
 
#define sstr(str) scanf ("%s", str);   
 
#define p(n) printf("%d ",n)
#define pl(n) printf("%ld ",n)
#define pll(n) printf("%lld ",n)
 
#define pf(n) printf("%f\n",n)
#define pd(n) printf("%lf\n",n)
 
#define pnl(n) printf("%d\n",n)
#define plnl(n) printf("%ld\n",n)
#define pllnl(n) printf("%lld\n",n)
#define nl() putchar_unlocked('\n')
 
#define ll long long
#define min(a,b) a<b?a:b
#define all(c) c.begin(), c.end()
#define pb push_back
#define tr(c,it) for(typeof(c.begin()) it = c.begin(); it !=c.end(); it++)
#define loop(i,a,n) for(int i=a;i<n;i++)
typedef vector<int> vi;
typedef vector<long long> vll;
typedef vector< vector<int> > vvi;
typedef vector<string> vs;
 
/*void pvec(vi v)
{
  tr(v,it) { p(*it);}
  nl();
}
 
void pvec(vll v)
{
  tr(v,it) { pll(*it);}
  nl();
}*/
 
/*std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems)          
 {
    std::stringstream ss(s);                                            //  aa#bc#d -> aa, b,c,d
    std::string item;                                                   //  aa##c#d -> aa, "", c,d
    while (std::getline(ss, item, delim)) {                             //  aa#bc#  -> aa, bc, ""
        elems.push_back(item);
    }
    if(s[s.size() - 1] == delim) elems.push_back("");
    return elems;
}
 
 
std::vector<std::string> split(const std::string &s, char delim) {
    std::vector<std::string> elems;
    split(s, delim, elems);
    return elems;
}*/
 
int get()                  // working even in loops, working excellent
{
  char c;
  while(c=getchar_unlocked(),(c<'0'||c>'9')&&(c!='-'));
  bool Flag=(c=='-');
  if(Flag)
    c=getchar_unlocked();
  int X=0;
  while(c>='0'&&c<='9')
    {
      X=X*10+c-48;
      c=getchar_unlocked();
    }
  return Flag?-X:X;
}
 
inline void get(char *str)
 
{
    register char c = 0;
    register int i = 0;
    while (c < 33)
        c = getchar_unlocked();
 
    while (c != '\n') {
        str[i] = c;
        c = getchar_unlocked();
        i = i + 1;
    }
    str[i] = '\0';
 
}
 
void output(int X)        // working even in loops, working excellent
{
  if(X<0)
    {
      putchar_unlocked('-');
      X=-X;
    }
  int Len=0,Data[10];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  if(!Len)
    Data[Len++]=0;
  while(Len--)
    putchar_unlocked(Data[Len]+48);
 
  putchar_unlocked(' ');
}
void output(ll X)        // working even in loops, working excellent
{
  if(X<0)
    {
      putchar_unlocked('-');
      X=-X;
    }
  int Len=0,Data[10];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  if(!Len)
    Data[Len++]=0;
  while(Len--)
    putchar_unlocked(Data[Len]+48);
 
  putchar_unlocked(' ');
}


int main()
{
  int t = get();
  //s(t);
  while(t--)
  {
    char num[100000];
    get(num);
   // string str(num);
    if(next_permutation(num , num + strlen(num)) == true) printf("%s\n",num );
    else {putchar_unlocked('-1'); nl();}
  }
  return 0;
}