    // Learning magical c++
    //c and c++ header files
    #include<cstdio>
    #include<sstream>
    #include<string>
    #include<cstdlib>
    #include<cstring>
    #include<iostream>
    #include<algorithm>
    #include<cassert>
    #include<vector>
    #include<stack>
    #include<queue>
    #include<deque>
    #include<set>
    #include<map>
    #include<cmath>
    #include<utility>
     
    using namespace std;
     
    //some useful macors to be used in program
    typedef long long ll;
    typedef pair<int,int> ii;
     
    #define FOR(i,a,b) for(int i=(a);i<(b);i++)
    #define FOR0(i,a) for(int i=0;i<(a);i++)
    #define FOR1(i,a) for(int i=1;i<(a);i++)
    #define REP(i,a,b,c) for(int i=(a);i<(b);i+=(c))
    #define TRAVERSE(it,s) for(typeof(s.begin()) it=s.begin();it!=s.end();++it)
    #define ENDL putchar(10)
    #define PB push_back
    #define MP make_pair
    #define SZ size
     
    #define FILL(a,x) memset(a,x,sizeof a)
    #define ALL(c) (c).begin(),(c).end()
    #define PRESENT(c,x) (find(ALL(c),x) != (c).end())
     
    #define ABS(a) ((a)<0?-(a):(a))
    #define SQ(x) (x)*(x)
    #define INF 0xffffff00
    #define ESP 1e-6
     
    #define MIN(a,b) (a)<(b)?(a):(b)
    #define MAX(a,b) (a)>(b)?(a):(b)
    #define MININ(a) *min_element(a.begin(),a.end())
    #define MININ_A(a,n) *min_element(a,a+n)
    #define MAXIN(a) *max_element(a.begin(),a.end())
    #define MAXIN_A(a,n) *max_element(a,a+n)
     
    #define P(x) printf("%d",x);
    #define PE(x) printf("%d\n",x);
    #define SI ({int _x; scanf("%d",&_x); _x;})
    #define SLL ({long long _x; scanf("%lld",&_x); _x;})
    #define SLF ({double _x; scanf("%lld",&_x); _x;})
    #define SC getchar()
    #define SS(n) scanf("%s",n)
     
    //class created for reading input faster
    class INPUT
    {
    static const int BUFSIZE=1<<16; //static makes it global and const for making constant..:)
    static char buffer[]; //static declaration of a buffer pointer [] makes it a constant pointer
    char *bufpos;
    char *bufend;
    void grabBuffer();
    public:
    INPUT() //constructor
    {
    grabBuffer();
    }
    bool eof()
    {
    return bufend==buffer;
    }
    char nextChar()
    {
    return *bufpos;
    }
    inline char readChar(); //inline used as macro for functions
    inline void skipWS(); //skip word spaces
    inline unsigned readUnsigned();
    inline int readInt();
    };
     
    char INPUT::buffer[INPUT::BUFSIZE];
     
    void INPUT::grabBuffer()
    {
    bufpos=buffer;
    bufend=buffer + read(0,buffer,BUFSIZE); //read(starting index,filling var,size to read)
    }
     
    char INPUT::readChar()
    {
    char res=*bufpos++;
    if(bufpos==bufend) //calling buffer to read again more input
    grabBuffer();
    return res;
    }
     
    inline bool myisspace(char c)
    {
    return c<=' '; // to check for keyboard and space character
    }
     
    void INPUT::skipWS()
    {
    while(!eof() && myisspace(nextChar()))
    {
    readChar();
    }
    }
     
    unsigned INPUT::readUnsigned()
    {
    skipWS();
    unsigned res=0;
    while(!eof() && isdigit(nextChar()))
    {
    res=10u * res + (readChar()-'0');
    }
    return res;
    }
     
    int INPUT::readInt()
    {
    skipWS();
    bool neg=false;
    if(!eof() && nextChar()=='-')
    {
    neg=true;
    readChar();
    }
    int res=static_cast<int>(readUnsigned());
    if(neg)
    {
    res=-res;
    }
    return res;
    }
     
    ii V[1000011];
     
    int main()
    {
    INPUT I;
    for(int TT=I.readInt();TT--;)
    {
    int n=I.readInt();
    FOR0(i,n)
    {
    int a=I.readInt();
    int b=I.readInt();
    V[i]=MP(b,a);
    }
    if(n==1)
    {
    puts("1");
    continue;
    }
    sort(V,V+n);
    /* FOR0(i,n)
    {
    PE(V[i].first);
    PE(V[i].second);
    } */
    int ans=1;
    int end=V[0].first;
    FOR1(i,n)
    {
    if(V[i].second>=end)
    {
    ans++;
    end=V[i].first;
    }
    }
    PE(ans);
    }
    return 0;
    } 