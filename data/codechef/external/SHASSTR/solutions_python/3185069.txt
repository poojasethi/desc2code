//includes
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <list>
#include <utility>
#include <algorithm>
#include <cassert>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
 
#define inf 1e6;
 
 
using namespace std;
 
int lcs[5100][5100];
int lcsa[5100][5100];
int lcsb[5100][5100];
int lcsans[5100][5100];
 
int main() {
    //freopen("/Users/arkanathpathak/Temp/MainCpp/in1.txt", "r", stdin);
    int t;
    scanf("%d", &t);
 
 
    //    int lcs[510][510];
    //    int lcsa[510][510];
    //    int lcsb[510][510];
    //    int lcsans[510][510];
    for (int test = 0; test < t; test++)
    {
        int n1, n2, k;
        scanf("%d", &n1);
        scanf("%d", &n2);
        scanf("%d%*c", &k);
        char s1[6000];
        char s2[6000];
        scanf("%s", s1);
        scanf("%s", s2);
        if (k > n1 || k > n2)
        {
            printf("-1\n");
            continue;
        }
        if (k == n1 || k == n2)
        {
            printf("0\n");
            continue;
        }
 
 
        for (int i = 0; i < n1 + 1; i++)
        {
 
            for (int j = 0; j < n2 + 1; j++)
            {
                if (i == 0 || j == 0) lcs[i][j] = 0;
                else if (s1[i - 1] == s2[j - 1]) lcs[i][j] = lcs[i - 1][j - 1] + 1;
                else lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1]);
            }
        }
 
 
        if (k == 0)
        {
            printf("%d\n", lcs[n1][n2]);
            continue;
        }
 
 
        for (int i = 0; i < n1; i++)
        {
            for (int j = 0; j < n2; j++)
            {
 
                lcsa[i][j] = -inf;
                if (i < k - 1) continue;
                if (i == k - 1)
                {
                    lcsa[i][j] = 0;
                    continue;
                }
                lcsa[i][j] = max(lcsa[i][j], lcsa[i - 1][j]);
                lcsa[i][j] = max(lcsa[i][j], lcs[i - k + 1][j + 1]);
                if (j > 0)
                {
                    if (s1[i] == s2[j]) lcsa[i][j] = max(lcsa[i][j], lcsa[i - 1][j - 1] + 1);
                    lcsa[i][j] = max(lcsa[i][j], lcsa[i][j - 1]);
                } else
                {
                    if (s1[i] == s2[j]) lcsa[i][j] = max(lcsa[i][j], 1);
                }
            }
        }
 
 
        for (int j = 0; j < n2; j++)
        {
            for (int i = 0; i < n1; i++)
            {
 
                lcsb[i][j] = -inf;
                if (j < k - 1) continue;
                if (j == k - 1)
                {
                    lcsb[i][j] = 0;
                    continue;
                }
                lcsb[i][j] = max(lcsb[i][j], lcsb[i][j - 1]);
                lcsb[i][j] = max(lcsb[i][j], lcs[i + 1][j - k + 1]);
                if (i > 0)
                {
                    if (s1[i] == s2[j]) lcsb[i][j] = max(lcsb[i][j], lcsb[i - 1][j - 1] + 1);
                    lcsb[i][j] = max(lcsb[i][j], lcsb[i - 1][j]);
                } else
                {
                    if (s1[i] == s2[j]) lcsb[i][j] = max(lcsb[i][j], 1);
                }
            }
        }
 
 
        for (int i = 0; i < n1; i++)
        {
            for (int j = 0; j < n2; j++)
            {
                lcsans[i][j] = -inf;
                if (i < k - 1 || j < k - 1) continue;
                if (i == k - 1 || j == k - 1)
                {
                    lcsans[i][j] = 0;
                    continue;
                }
                lcsans[i][j] = max(lcsans[i][j], lcsans[i - 1][j]);
                lcsans[i][j] = max(lcsans[i][j], lcsans[i][j - 1]);
                lcsans[i][j] = max(lcsans[i][j], lcsa[i][j - k]);
                lcsans[i][j] = max(lcsans[i][j], lcsb[i - k][j]);
                lcsans[i][j] = max(lcsans[i][j], lcs[i - k + 1][j - k + 1]);
                if (s1[i] == s2[j]) lcsans[i][j] = max(lcsans[i][j], lcsans[i - 1][j - 1] + 1);
            }
        }
 
 
 
 
        printf("%d\n", lcsans[n1 - 1][n2 - 1]);
 
 
    }
} 