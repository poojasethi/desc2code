//includes
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <list>
#include <utility>
#include <algorithm>
#include <cassert>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
 
#define inf 1e6;
 
 
using namespace std;
  int lcs[5100][5100];
    int lcsa[5100][5100];
    int lcsb[5100][5100];
    int lcsans[5100][5100];
int main() {
    int t;
    scanf("%d", &t);
   
    
//    int lcs[510][510];
//    int lcsa[510][510];
//    int lcsb[510][510];
//    int lcsans[510][510];
    for (int test = 0; test < t; test++)
    {
        int n1, n2, k;
        scanf("%d", &n1);
        scanf("%d", &n2);
        scanf("%d%*c", &k);
        char s1[6000];
        char s2[6000];
        scanf("%s", s1);
        scanf("%s", s2);
        if(k>n1 || k>n2)
        {
            printf("-1\n");
            continue;
        }
        if(k==n1 || k==n2)
        {
            printf("0\n");
            continue;
        }
        
        if (s1[0] == s2[0]) lcs[0][0] = 1;
        else lcs[0][0] = 0;
        for (int j = 1; j < n2; j++)
        {
            if (s1[0] == s2[j]) lcs[0][j] = 1;
            else if (lcs[0][j - 1] == 1) lcs[0][j] = 1;
            else lcs[0][j]=0;
        }
        for (int j = 1; j < n1; j++)
        {
            if (s1[j] == s2[0]) lcs[j][0] = 1;
            else if (lcs[j - 1][0] == 1) lcs[j][0] = 1;
            else lcs[j][0]=0;
        }
        for (int i = 1; i < n1; i++)
        {
            for (int j = 1; j < n2; j++)
            {
                if (s1[i] == s2[j]) lcs[i][j] = max(lcs[i - 1][j - 1] + 1, max(lcs[i - 1][j], lcs[i][j - 1]));
                else lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1]);
            }
        }
        
        
        if(k==0)
        {
            printf("%d\n",lcs[n1-1][n2-1]);
            continue;
        }
 
        
        for (int i = 0; i < k - 1; i++)
        {
            for (int j = 0; j < n2; j++)
            {
                lcsa[i][j] = -inf;
            }
        }
        for (int i = 0; i < n2; i++)
        {
            lcsa[k-1][i]=0;
        }
        
        for (int i = k; i < n1; i++)
        {
            for (int j= 0; j< n2; j++)
            {
                lcsa[i][j]=-inf;
                lcsa[i][j] = max(lcsa[i][j],lcsa[i-1][j]);
                lcsa[i][j] = max(lcsa[i][j],lcs[i-k][j]);
                if(j>0)
                {
                    if(s1[i]==s2[j]) lcsa[i][j] = max(lcsa[i][j],lcsa[i-1][j-1]+1);
                    lcsa[i][j] = max(lcsa[i][j],lcsa[i][j-1]);
                }
                else
                {
                    if(s1[i]==s2[j]) lcsa[i][j] = max(lcsa[i][j],1);
                }
            }
        }
        
        
        
        for (int i = 0; i < k - 1; i++)
        {
            for (int j = 0; j < n1; j++)
            {
                lcsb[j][i] = -inf;
            }
        }
        for (int i = 0; i < n1; i++)
        {
            lcsb[i][k-1]=0;
        }
        for (int i = k; i < n2; i++)
        {
            for (int j= 0; j< n1; j++)
            {
                lcsb[j][i]=-inf;
                lcsb[j][i] = max(lcsb[j][i],lcsb[j][i-1]);
                lcsb[j][i] = max(lcsb[j][i],lcs[j][i-k]);
                if(j>0)
                {
                    if(s1[j]==s2[i]) lcsb[j][i] = max(lcsb[j][i],lcsb[j-1][i-1]+1);
                    lcsb[j][i] = max(lcsb[j][i],lcsb[j-1][i]);
                }
                else
                {
                    if(s1[j]==s2[i]) lcsb[j][i] = max(lcsb[j][i],1);
                }
            }
        }
        
        
        for (int i = 0; i < k - 1; i++)
        {
            for (int j = 0; j < n2; j++)
            {
                lcsans[i][j] = -inf;
            }
        }
        for (int i = 0; i < k - 1; i++)
        {
            for (int j = 0; j < n1; j++)
            {
                lcsans[j][i] = -inf;
            }
        }
        
        for (int i = k-1; i < n1; i++)
        {
            lcsans[i][k-1]=0;
        }
        for (int i = k-1; i < n2; i++)
        {
            lcsans[k-1][i]=0;
        }
        for (int i = 0; i < k-1 && i<n2; i++)
        {
            lcsans[k-1][i]=-inf;
        }
        for (int i = 0; i < k-1 && i<n1; i++)
        {
            lcsans[i][k-1]=-inf;
        }
        
        for (int i = k; i < n1; i++)
        {
            for (int j= k; j< n2; j++)
            {
                lcsans[i][j]=-inf;
                lcsans[i][j]= max(lcsans[i][j],lcsans[i-1][j]);
                lcsans[i][j] = max(lcsans[i][j],lcsans[i][j-1]);
                lcsans[i][j] = max(lcsans[i][j],lcsa[i][j-k]);
                lcsans[i][j] = max(lcsans[i][j],lcsb[i-k][j]);
                lcsans[i][j] = max(lcsans[i][j],lcs[i-k][j-k]);
                if(s1[i]==s2[j]) lcsans[i][j] = max(lcsans[i][j],lcsans[i-1][j-1]+1);
            }
        }
        
        
        printf("%d\n",lcsans[n1-1][n2-1]);
    }
} 