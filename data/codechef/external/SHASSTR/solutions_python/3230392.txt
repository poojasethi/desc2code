/*******************karan*****************************/
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
#include<math.h>
#include<ctype.h>

#define S(a,x) scanf("%"#a,&x)  //#a expands to "a" we use this bcoz, arguments are not replaced within quoted strings
#define PS(a,x) printf("%"#a" ",x)  //print with space
#define PN(a,x) printf("%"#a"\n",x)  //print with newline
#define FOR(i,a,b) for( i=a;i<b;i++)
#define FORD(i,a,b) for( i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define Max(a, b) ((a>b)?a:b)
#define Min(a, b) ((a>b)?b:a)
//macros for using a char array of lenght n as a char array of length 8n using bit masking
//array must be used for storing flags
#define ISBITSET(x,i) ((x[i>>3] & (1<<(i&7)))!=0)
#define SETBIT(x,i) x[i>>3]|=(1<<(i&7));
#define CLEARBIT(x,i) x[i>>3]&=(1<<(i&7))^0xFF;
#define MAXN 5001
#define MOD 1000000007
#define TC int t; S(d,t); while(t--)
#define fill(a,v) memset(a,v,sizeof a)     //Works properly only for v = 0 or -1
int dp[MAXN][MAXN][2][2];
int n1,n2,k;
char a[MAXN], b[MAXN];
#define MINVAL (-MAXN-5)

int getVal(int i, int j, int x, int y)
{
    if (i < 0 || j < 0)
    {
        return MINVAL;
    }
    return dp[i][j][x][y];
}
int main()
{
    TC
    {
        int i,j;
        S(d,n1);
        S(d,n2);
        S(d,k);
        S(s,a);
        S(s,b);
        if(k>n1 || k>n2)
        {
            PN(d,-1);
            continue;
        }
        REP(i,n1+1)
        {
            dp[i][0][0][0] = 0;
            if(k==0)
            {
                dp[i][0][0][1] = dp[i][0][1][0] = dp[i][0][1][1] = MINVAL;
                continue;
            }
            dp[i][0][1][1] = dp[i][0][0][1] = MINVAL;
            dp[i][0][1][0] = (i>=k)?0:MINVAL;
        }
        REP(i,n2+1)
        {
            dp[0][i][0][0] = 0;
            if(k==0)
            {
                dp[0][i][0][1] = dp[0][i][1][0] = dp[0][i][1][1] = MINVAL;
                continue;
            }
            dp[0][i][1][1] = dp[0][i][1][0] = MINVAL;
            dp[0][i][0][1] = (i>=k)?0:MINVAL;
        }
        FOR(i,1,n1+1)
        {
            FOR(j,1,n2+1)
            {
                char x = a[i - 1], y = b[j - 1];
                //00
                dp[i][j][0][0] = Max (dp[i][j - 1][0][0], dp[i - 1][j][0][0]);
                if (x == y)
                {
                    dp[i][j][0][0] = 1 + dp[i - 1][j - 1][0][0];
                }

                //11
                //both completed at i,j
                int ans = getVal (i - k, j - k, 0, 0);
                //first completed at i, second b4
                ans = Max (ans, getVal (i - k, j, 0, 1));
                //first b4 i, second at j
                ans = Max (ans, getVal (i, j - k, 1, 0));
                //both b4
                ans = Max (ans, Max (getVal (i - 1, j, 1, 1), getVal (i, j - 1, 1, 1)));
                if (x == y)
                {
                    ans = Max (ans, 1 + getVal (i - 1, j - 1, 1, 1));
                }
                dp[i][j][1][1] = ans;

                //10
                //at i
                ans = getVal (i - k, j, 0, 0);
                //b4 i
                ans = Max (ans, getVal (i - 1, j, 1, 0));
                ans = Max (ans, getVal (i, j - 1, 1, 0));
                if (x == y)
                {
                    ans = 1 + getVal (i - 1, j - 1, 1, 0);
                }
                dp[i][j][1][0] = ans;

                //01
                //at j
                ans = getVal (i, j - k, 0, 0);
                //b4 j
                ans = Max (ans, getVal (i, j - 1, 0, 1));
                ans = Max (ans, getVal (i - 1, j, 0, 1));
                if (x == y)
                {
                    ans = 1 + getVal (i - 1, j - 1, 0, 1);
                }
                dp[i][j][0][1] = ans;
            }
        }
        PN(d,dp[n1][n2][1][1]);
//        for (int k1 = 0; k1 < 2; k1++)
//        {
//            for (int k2 = 0; k2 < 2; k2++)
//            {
//                for (int i = 0; i < n1 + 1; i++)
//                {
//                    for (int j = 0; j < n2 + 1; j++)
//                    {
//                        printf ("%d ",dp[i][j][k1][k2]);
//                    }
//                    PN(s,"");
//                }
//                PN(s,"");
//                PN(s,"");
//            }
//
//        }
    }
    return 0;
}
