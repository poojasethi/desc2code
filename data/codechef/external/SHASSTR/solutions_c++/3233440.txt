#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <fstream>
#include <list>
#include <set>
#include <climits>
#include <map>
#include <stack>
#include <queue>
#include <complex>
#include <cmath>
#include <sstream>
#include <deque>
#include <utility>
#include <bitset>
#include <numeric>
#include <ext/hash_set>
#include <ext/hash_map>

using namespace std;
using namespace __gnu_cxx;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,b,a) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define iter(it,s) for(__typeof(s.begin())it = s.begin();it!=s.end();it++)

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

string a, b;
int memo[5005][5005][2][2], s1, s2, k;

int bt() {
  for (int i = s1; i >= 0; i--) {
    for (int j = s2; j >= 0; j--) {
      for (int cut1 = 1; cut1 >= 0; cut1--) {
        for (int cut2 = 1; cut2 >= 0; cut2--) {
          //      FOR (cut1, 0, 2) {
          //        FOR (cut2, 0, 2) {
          int &res = memo[i][j][cut1][cut2];
          if (i == s1) {
            if (cut1) {
              if (!cut2) {
                if (j + k <= s2)
                  res = 0;
                else
                  res = -oo;
              } else
                res = 0;
            } else
              res = -oo;
            continue;
          }
          if (j == s2) {
            if (cut2) {
              if (!cut1) {
                if (i + k <= s1)
                  res = 0;
                else
                  res = -oo;
              } else
                res = 0;
            } else
              res = -oo;
            continue;
          }
          res = -oo;
          if (!cut1 && i + k <= s1)
            res = max(res, memo[i + k][j][1][cut2]);
          if (!cut2 && j + k <= s2)
            res = max(res, memo[i][j + k][cut1][1]);
          if (a[i] == b[j])
            res = max(res, memo[i + 1][j + 1][cut1][cut2] + 1);
          else
            res = max(res,
                max(memo[i + 1][j][cut1][cut2], memo[i][j + 1][cut1][cut2]));
        }
      }
    }
  }
  return memo[0][0][0][0];
}

int rec(int i, int j, bool cut1, bool cut2) {
  if (i == s1) {
    if (j + k <= s2)
      cut2 = 1;
    if (cut1 && cut2)
      return 0;
    return -oo;
  }
  if (j == s2) {
    if (i + k <= s1)
      cut1 = 1;
    if (cut1 && cut2)
      return 0;
    return -oo;
  }
  int &res = memo[i][j][cut1][cut2];
  if (res != -1)
    return res;
  res = -oo;
  if (!cut1 && i + k <= s1)
    res = rec(i + k, j, 1, cut2);
  if (!cut2 && j + k <= s2)
    res = max(res, rec(i, j + k, cut1, 1));
  if (a[i] == b[j])
    res = max(res, rec(i + 1, j + 1, cut1, cut2) + 1);
  else
    res = max(res, max(rec(i + 1, j, cut1, cut2), rec(i, j + 1, cut1, cut2)));
  return res;
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("test.in", "rt", stdin);
  //	freopen("o.txt", "wt", stdout);
#endif
  ios::sync_with_stdio(false);
  int t;
  cin >> t;
  while (t--) {
    cin >> s1 >> s2 >> k >> a >> b;
    if (k > s1 || k > s2) {
      cout << "-1\n";
      continue;
    }
//    mem (memo, -1);
//    cout << rec(0, 0, 0, 0) << ' ';
    cout << bt() << '\n';
  }
  return 0;
}
