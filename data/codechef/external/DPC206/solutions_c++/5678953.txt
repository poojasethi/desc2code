#include <iostream>
#include <cstring>
#include <unistd.h>
#include <cstdio>
#include <cstdlib>

using namespace std;


#define BS 64*1024
char ibuffer[BS];
int ibuffer_offset = 0;
int ibuffer_size = 0;

long long int inline fastread() 
{
	register long long int r = 0;
	char s = '1';
	int sign = 1;

	while(1) 
	{
		if(ibuffer_offset >= ibuffer_size) 
		{
			ibuffer_size = read(0, ibuffer, BS);
			ibuffer_offset = 0;
		}

		if(ibuffer[ibuffer_offset] < '0' || ibuffer[ibuffer_offset] > '9')
		{ 
			if(s != '0')
			{
				if(ibuffer[ibuffer_offset++] == '-')
					sign = -1;
			}
			else
				return r * sign;
		}
		else 
		{
			s = '0';
			r = (r << 3) + (r << 1) + ibuffer[ibuffer_offset++] - '0';
		}
	}
}

void strrev(char *str, int len = -100)
{
    if(len == -100)
    {
    	len = strlen(str);
    }

	if(len > 0)
	{
		*str = (*str + *(str + len - 1)) - (*(str + len - 1) = *str);
		strrev(str + 1, len - 2);
	}
}

long long int reverse(long long int n)
{
    long long int rev = 0;
    
    while(n)
    {
    	rev = (rev << 3) + (rev << 1) + (n % 10);
    	n /= 10;
    }
    
    return rev;
}

// bool isPalindrome(long long int n)
// {
// 	// printf("isPalind: %lld %lld\n", n, reverse(n));
// 	return n == reverse(n);
// }

int main() 
{
	int n;
	
	scanf("%d", &n);
	
	for(; n--; )
	{
		long long int p;
		
	    scanf("%lld", &p);
	    
	    unsigned int cnt = 0;
	    
	    while(1)
	    {
	    	long long int rev = reverse(p);
	    	if(p == rev)
	    	{
	    		break;
	    	}
	    	else
	    	{
	    		p += rev;
	    		cnt++;
	    	}
	    }
	    
	    printf("%u %lld\n", cnt, p);
	}
	
	return 0;
}
