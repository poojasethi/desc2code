/* Author: Karlheinz Jung */
/* Compiler: Borland Turbo C 2.01 */
/* Computer: Rabbit 286 */
/* Problem: Leaky containers (IOPC1107) */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#define LL long long
#define ULL unsigned long long
#ifndef ONLINE_JUDGE
	#define buffer_size 1000
#else
	#define buffer_size 200000000
#endif
#define _T for(;!((*ez1>='0'&&*ez1<='9')||*ez1=='-');ez1++);if(*ez1=='-'){wq1=-1;ez1++;}while(1){char c=*ez1;if(c<=32)return wq2*wq1;wq2=(wq2<<1)+(wq2<<3)+c-'0';ez1++;}
#define MI(a,b) a<b?a:b

char pq1[buffer_size];
char *ez1;

int sint(){int wq1=1,wq2=0;_T}
long slong(){long wq1=1,wq2=0;_T}
LL sLL(){LL wq1=1,wq2=0;_T}
ULL sULL(){ULL wq1=1,wq2=0;_T}
int sstring(char ziel[]){char *ez2=ziel;for(;ez1<pq1+buffer_size&&*ez1<33;ez1++);for(;ez1<pq1+buffer_size&&*ez1>32;*ez2++=*ez1++);*ez2='\0';return ez1<pq1+buffer_size;}

int R, C, m, n, d, X, Y, tot, temp, out;
int r[25], c[25], br[105], bc[105];

void dfs(int z)
{
int i;
if(tot<out)
	{
	if(z==n)
		{
		if(tot>=n+m)
			{
			out=tot;
			}
		else
			{
			for (i=0; i<=R-X; i++)
				{
				temp=tot+i*(C-Y);
				if(temp>=n+m)
					{
					out=MI(out,temp);
					}
				else
					{
					temp+=((n+m-temp+(R-X-i)-1)/(R-X-i))*(R-X-i);
					out=MI(out,temp);
					}
				}
			}
		}
	else
		{
		if(br[r[z]])
			{
			br[r[z]]=0;
			X++;
			tot+=C-Y;
			dfs(z+1);
			br[r[z]]=1;
			X--;
			tot-=C-Y;
			}
		else
			{
			dfs(z+1);
			}
		if(bc[c[z]])
			{
			bc[c[z]]=0;
			Y++;
			tot+=R-X;
			dfs(z+1);
			bc[c[z]]=1;
			Y--;
			tot-=R-X;
			}
		else
			{
			dfs(z+1);
			}
		}
	}
}


void losen()
{
int i;
R=sint();
C=sint();
n=sint();
m=sint();
for(i=0; i<n; i++)
	{
	r[i]=sint();
	c[i]=sint();
	d=sint();
	}
X=Y=tot=0;
out=10000;
memset(br,1,sizeof(br));
memset(bc,1,sizeof(bc));
dfs(0);
printf("%d\n",out);
}

int main()
{
int fall;
if(fread(pq1,1,sizeof(pq1),stdin));
ez1=pq1;
for(fall=sint(); fall--; losen());
return 0;
}
