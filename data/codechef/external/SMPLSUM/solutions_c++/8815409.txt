#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cassert>
#include <stack>
#include <vector>
using namespace std;
const int MOD = (int)1e9 + 7;
const int Tmax = 1000033;
const int Nmax = 10000003;

int lp[Nmax];
long long answer[Nmax];
vector<int> primes;


int main() {
	// your code goes here
	    for ( int i = 2; i < Nmax; i ++) {
        if (!lp[i]) {
           primes.push_back(i);
           lp[i] = i;
        } 
        
        for (int j = 0; j < primes.size() && primes[j] <= lp[i] && i * 1ll * primes[j] < Nmax; j ++) {
            lp[primes[j] * i] = primes[j];
        }
    }
    long long int n,t;
   scanf("%lld",&t);
   while(t--)
   {//top-down memoization
   	scanf("%lld",&n);
   	if(answer[n]!=0)
   	{
   		printf("%lld\n",answer[n]);
   		continue;
   	}
   	answer[n]=1;
   	long long int m=n;
   	while(n>1)
	{
	 long long int p=lp[n];
	 long long int pw=1,cnt=0;
	 while(lp[n]==p)
	 {
	 	pw=(pw*p);
	 	n/=p;
	 	cnt++;
	 }
	 long long int res=0;
	 if(cnt==1)
	 {
	 	  res = 1ll * p * p - p + 1;
	 }
	 else
	 {
	 	  res = (pw * pw) * p;
          res = (res + 1) / (p + 1);
	 }
	   answer[m] = (answer[m]  * res);
	}
	//cout<<answer[m]<<endl;
	printf("%lld\n",answer[m]);
   }
	return 0;
}