#include<iostream>
#include<string>
#include<string.h>
#include<cstdio>
#include<algorithm>
#include<map>
#include<cmath>
#include<queue>
#include<stack>
#include<vector>
 
using namespace std;
 
#define ll long long
#define l long
#define max(a,b) (a>b?a:b)
#define min(a,b) (a>b?b:a)
#define ms(a,b) memset(a,(b),sizeof(a))
#define fr(i,a,n) for(i=a;i<n;i++)
#define gc getchar()
#define pc putchar
#define ull unsigned ll
 
 
inline ll gcd(ll a,ll b){if(b==0)return a;else return gcd(b,a%b);}
inline ll lcm(ll a,ll b){return (a*b)/gcd(a,b);}
 
inline void get(l &x){register l c=gc;x=0;l neg=0;for(;((c<48||c>57)&&c!='-');c=gc);if(c=='-'){neg = 1;c=gc;}for(;c>47&&c<58;c=gc){x=(x<<1)+(x<<3)+c-48;}if(neg)x=-x;}
 
inline void get(int &x){register int c=gc;x=0;int neg=0;for(;((c<48||c>57)&&c!='-');c=gc);if(c=='-'){neg = 1;c=gc;}for(;c>47&&c<58;c=gc){x=(x<<1)+(x<<3)+c-48;}if(neg)x=-x;}
 
inline void get(ll &x){register ll c=gc;x=0;ll neg=0;for(;((c<48||c>57)&&c!='-');c=gc);if(c=='-'){neg = 1;c=gc;}for(;c>47&&c<58;c=gc){x=(x<<1)+(x<<3)+c-48;}if(neg)x=-x;}
 
inline void get(ull &x){register ull c=gc;x=0;ull neg=0;for(;((c<48||c>57)&&c!='-');c=gc);if(c=='-'){neg = 1;c=gc;}for(;c>47&&c<58;c=gc){x=(x<<1)+(x<<3)+c-48;}if(neg)x=-x;}
 
inline void put(int n){int i=0;char ch[20];if(n==0)pc('0');while(n>0)ch[i]=(n%10)+'0',n=n/10,i++;while(i>0)pc(ch[i-1]),i--;} 
 
inline void put(l n){l i=0;char ch[20];if(n==0)pc('0');while(n>0)ch[i]=(n%10)+'0',n=n/10,i++;while(i>0)pc(ch[i-1]),i--;}
 
inline void put(ll n){ll i=0;char ch[20];if(n==0)pc('0');while(n>0)ch[i]=(n%10)+'0',n=n/10,i++;while(i>0)pc(ch[i-1]),i--;}
 
inline void put(ull n){ull i=0;char ch[20];if(n==0)pc('0');while(n>0)ch[i]=(n%10)+'0',n=n/10,i++;while(i>0)pc(ch[i-1]),i--;}
 
 
#define MAXN 10000001
 
ll phiSum[MAXN],factSieve[MAXN];
 
void lowest_prime(){
  ll i,j;
  for(i=2;i<MAXN;i+=2)
    factSieve[i]=2;
  for(i=3;i<MAXN;i+=2){
    for(j=1;j*i<MAXN;j++)
      if(factSieve[i*j]==0)
        factSieve[i*j]=i;
  }
}
void factorSieve()
{
  for(ll i=0;i<MAXN;i++)   factSieve[i]=i;
  ll m=sqrt(MAXN);
  for(ll i=2;i<=m;i++)
  {
    if(factSieve[i]==i)
    {
      for(ll j=i;j<MAXN;j+=i)
        if(factSieve[j]==j)
          factSieve[j]=i;
    }
  }
}
void prime_factorize(ll n){
  ll next,curr,val=factSieve[n],ans=1,temp=n;
  if(factSieve[n]==n)
    ans=n*(n-1)+1;
  else{
    while(n>1){
    curr =factSieve[n];
    //cout<<curr<<" ";
    n/=curr;
    next = factSieve[n]; 
    //cout<<curr<<" "<<next<<"\n";
    if(curr==next){
      val*=curr;
      continue;
    }
      if(factSieve[val]==val)
        ans*= (val*(val-1)+1);
      else
        ans*= ((val*val*curr)+1)/(curr+1);
      val=next;
    }
  }
  phiSum[temp]=ans;
  printf("%lld\n",ans);
}
 
int main()
{
   #ifndef ONLINE_JUDGE
   freopen("inp.txt","r",stdin);
   freopen("out.txt","w",stdout);
   #endif
   ll t,n,i,j;
 
   //lowest_prime();
   factorSieve();
 
 
   /*for(int i=2;i<50;i++)
    cout<<i<<" "<<factSieve[i]<<"\n";
    */
   get(t);
   while(t--){
    get(n);
    if(phiSum[n]!=0){
      printf("%lld\n",phiSum[n]);
    }
    else{
      prime_factorize(n);
    }
  }
   return 0;
}  