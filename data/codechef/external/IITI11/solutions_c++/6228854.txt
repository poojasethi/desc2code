/* Pranet Verma */
/* Yeh mera template hai. Apna khud banao =_= */
#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
#define mp make_pair
#define s(n) scanf("%d",&n)
#define s2(n,m) scanf("%d%d",&n,&m)
#define s3(n,m,l) scanf("%d%d%d",&n,&m,&l)
#define rep(i,n) for(int i=0;i<n;++i)
ll pwr(ll a,ll b,ll mod) {a%=mod;if(a<0)a+=mod;ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;


struct Edge
{
  int u,v,flow,capacity;
  Edge()
  {

  }
  Edge(int u,int v,int flow,int capacity)
  {
    this->u=u;
    this->v=v;
    this->flow=flow;
    this->capacity=capacity;

  }
};  

vector<Edge> e;
vector<vector<int> > G;
int n,m;
int source,sink;
int dist[5001];
int ptr[5001];


bool findPath()
{

  memset(dist,-1,sizeof(dist));
  dist[source]=0;
  queue<int> Q;
  Q.push(source);
  while(!Q.empty())
  {
    
    int u=Q.front();
    assert(dist[u]>=0);
    // cout<<u<<endl;
    Q.pop();

    for (int i = 0; i < G[u].size(); ++i)    
    {
      int ID=G[u][i];
      // assert(u==e[ID].u);
      int v=e[ID].v;

      if( (dist[v]==-1) && e[ID].flow<e[ID].capacity)
      {
        // cout<<v<<endl;
        dist[v]=dist[u]+1;
        // cout<<dist[v]<<endl;
        Q.push(v);
        // if(v==sink)
        //   return true;
      }
    }
  }

  return dist[sink]!=-1;
}


int dfs(int u,int flow)
{ 
  if(flow==0)
    return 0;
  if(u==sink)
    return flow;
  for(;ptr[u]<G[u].size();++ptr[u])
  {
    int ID=G[u][ptr[u]];
    int v=e[ID].v;
    
    if(dist[v]!=dist[u]+1)
      continue;
    
    int pushed=dfs(v,min(flow,e[ID].capacity-e[ID].flow));
    if(pushed)
    {
      e[ID].flow    +=pushed;
      e[ID^1].flow  -=pushed;
      return pushed;
    }
  }
  return 0;
}
ll dinics()
{
  ll flow=0;
  while(findPath())
  {
    memset(ptr,0,sizeof ptr);
    while(int pushed=dfs(source,1e9))
      flow+=pushed;
  }
  return flow;
}
void addEdge(int u,int v,int capacity)
{
    G[u].push_back(e.size());
    e.push_back(Edge(u,v,0,capacity));
    G[v].push_back(e.size());
    e.push_back(Edge(v,u,0,0));
}
int main()
{
  std::ios::sync_with_stdio(false);
  
  int n,m;
  cin>>n>>m;
  G.resize(n+n+5);
  source=0;
  sink=n+n+1;
  for(int i=0;i<m;++i)
  {
  	int r,c;
  	cin>>r>>c;
  	addEdge(r,n+c,infinity);
  }

  for(int i=1;i<=n;++i)
  {
  	addEdge(source,i,1);
  	addEdge(n+i,sink,1);
  }
 

  cout<<dinics();


}