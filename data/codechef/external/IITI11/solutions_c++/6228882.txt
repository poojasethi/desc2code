#include <bits/stdc++.h>
using namespace std; 
#define rep(i,n)        for(int i = 0;  i < n ; ++i)
#define REP(i,a,b)      for(int i = a ; i <= b; ++i)
#define pii             pair<int,int> 
#define pb(a)           push_back(a)
#define ll              long long
#define MOD             1000000007
#define pil             pair<int,long long>
#define mp              make_pair
#define CLR(x,a)        memset(x,a,sizeof(x))
#define pll             pair<ll,ll>

const int MAXN = 203; 
const int INF = 1000000000; 
 
struct edge {
    int a, b, cap, flow;
};
 
int s=0, t=202, d[MAXN], ptr[MAXN], q[MAXN];
vector<edge> e;
vector<int> g[MAXN];
 
void add_edge (int a, int b, int cap) {
    edge e1 = { a, b, cap, 0 };
    edge e2 = { b, a, 0, 0 };
    g[a].push_back ((int) e.size());
    e.push_back (e1);
    g[b].push_back ((int) e.size());
    e.push_back (e2);
}
 
bool bfs() {
    int qh=0, qt=0;
    q[qt++] = s;
    memset (d, -1, sizeof(d));
    d[s] = 0;
    while (qh < qt && d[t] == -1) {
        int v = q[qh++];
        for (size_t i=0; i<g[v].size(); ++i) {
            int id = g[v][i],
                to = e[id].b;
            if (d[to] == -1 && e[id].flow < e[id].cap) {
                q[qt++] = to;
                d[to] = d[v] + 1;
            }
        }
    }
    return d[t] != -1;
}
 
int dfs (int v, int flow) {
    if (!flow)  return 0;
    if (v == t)  return flow;
    for (; ptr[v]<(int)g[v].size(); ++ptr[v]) {
        int id = g[v][ptr[v]],
            to = e[id].b;
        if (d[to] != d[v] + 1)  continue;
        int pushed = dfs (to, min (flow, e[id].cap - e[id].flow));
        if (pushed) {
            e[id].flow += pushed;
            e[id^1].flow -= pushed;
            return pushed;
        }
    }
    return 0;
}
 
int dinic() {
    int flow = 0;
    for (;;) {
        if (!bfs())  break;
        memset (ptr, 0, sizeof(ptr));
        while (int pushed = dfs (s, INF))
            flow += pushed;
    }
    return flow;
}
int main()
{
	ios::sync_with_stdio(0);
    int N , T ; 
    cin >> N ;  
    assert(N<=100);
    cin >> T ; 	
    s=0;
    t=N+N+1;

    for(int i = 0 ; i < T ; ++i)
    {
    	int r,c;
    	cin>>r>>c;
    	add_edge(r,c+N,1000000);
    }

    for(int i=1;i<=N;++i)
    {
    	add_edge(s,i,1);
    	add_edge(i+N,t,1);
    }
    cout << dinic(); 
} 