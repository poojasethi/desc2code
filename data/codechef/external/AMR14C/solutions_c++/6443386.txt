#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <vector>
#include <memory.h>


using namespace std;


#define ll long long int
#define inchar getchar_unlocked

 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}


int occurence[100010],cumulative[100010];

int main() {
	// your code goes here
	

	
	int test;
	inp(test);
	while(test--)
	 {
	     memset(occurence,0,sizeof occurence);
	     memset(cumulative,0,sizeof cumulative);
	     
	     int n,m,x;
	     
	     inp(n);inp(m);inp(x);
	     for(int i=1;i<=n;i++)
	      {
	          int num;
	          inp(num);
	          occurence[num%m]++;
	      }
	      
	      cumulative[0] = occurence[0];
	      
	      for(int i=1;i<m;i++)
	       cumulative[i] = cumulative[i-1]+occurence[i];
	      
	      ll ans = (ll)(cumulative[x]);
	      ans = ans * (ll)(occurence[0]);
	      
	      for(int i=1;i<=x;i++)
	       {
	           ll times = occurence[i];
	           if(times == 0) continue;
	           
	           ll tmp = (ll)(cumulative[x-i]) + (ll)(cumulative[m-1]- cumulative[m-i-1]);
	           tmp = tmp*times;
	           ans += tmp;
	           
	       }
	       
	       for(int i=x+1;i<m;i++)
	        {
	            ll times = occurence[i];
	            if(times == 0) continue;
	            
	            int diff = i-x;
	            
	            ll tmp = (ll)(cumulative[m-diff] - cumulative[m-i-1]);
	            tmp = tmp * (ll)(times);
	            
	            ans += tmp;
	            
	        }
	        
	        
	       printf("%lld\n",ans);
	      
	      
	     
	 }
	
	return 0;
}
