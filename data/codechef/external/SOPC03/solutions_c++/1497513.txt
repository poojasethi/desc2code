#include <iostream>
#include <algorithm>
#include <functional>
#include <vector>
#include <limits.h>
#include <stdio.h>
#include <string>
#include <map>
#include <sstream>
using namespace std;
int n, t;
int a[200500];
int aux[200500];
int inv = 0;
void merge(int l, int m, int r) {
	for (int i = l; i <= r; i++)
		aux[i] = a[i];
	int lb = l, rb = r, mb = m;
	for (int i = lb; i <= rb; i++) {
		if (m + 1 > rb) {
			a[i] = aux[l];
			//printf("%d and %d in %d inv +\n", l, m + 1, i);
			l++;
			continue;
		}
		if (l > mb) {
			a[i] = aux[m + 1];
			//printf("%d and %d in %d \n", l, m + 1, i);
			m++;
			continue;
		}
		if (aux[l] > aux[m + 1]) {
			//printf("%d and %d in %d inv +\n", l, m + 1, i);
			inv += mb - l + 1;
			a[i] = aux[m + 1];
			m++;
		} else {
			a[i] = aux[l];
			//printf("%d and %d in %d\n", l, m + 1, i);
			l++;
		}
	}

}
void msort(int l, int r) {
	if (l >= r)
		return;
	int m = l + (r - l) / 2;
	msort(l, m);
	msort(m + 1, r);
	merge(l, m, r);
}
void solve() {
	inv = 0;
	for (int i = 0 ; i < 200000 ; i++) {
		a[i] = 0;
		aux[i] = 0;
	}
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	msort(1, n);
	printf("%d\n", inv);
}

int main() {
	scanf("%d", &t);
	for (int times = 1; times <= t; times++)
		solve();
	return 0;
}
