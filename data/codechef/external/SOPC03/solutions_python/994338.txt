import java.util.Scanner;

public class Main{
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		scanner.nextInt(); //ignore the value of T
		Mergesort merge = new Mergesort();
		int[] array = new int[100000];
		while (scanner.hasNext()){
			int N = scanner.nextInt();			
			for (int i=0; i<N; i++) array[i] = scanner.nextInt();	
			System.out.println(merge.sort(array, N));
		}
	}	
}

class Mergesort {
	private int[] numbers;
	private int[] helper;
	private int number;

	public int sort(int[] values, int length) {
		this.numbers = values;
		number = length;
		this.helper = new int[number];
		return mergesort(0, number - 1);
	}

	private int mergesort(int low, int high) {
		// Check if low is smaller then high, if not then the array is sorted
		if (low < high) {
			// Get the index of the element which is in the middle
			int middle = (low + high) / 2;
			// Sort the left side of the array
			int a = mergesort(low, middle);
			// Sort the right side of the array
			int b = mergesort(middle + 1, high);
			// Combine them both
			int c = merge(low, middle, high);
			return a+b+c;
		}
		return 0;
	}

	private int merge(int low, int middle, int high) {
		int count = 0;
		// Copy both parts into the helper array
		for (int i = low; i <= high; i++) {
			helper[i] = numbers[i];
		}

		int i = low;
		int j = middle + 1;
		int k = low;
		// Copy the smallest values from either the left or the right side back
		// to the original array
		while (i <= middle && j <= high) {
			if (helper[i] <= helper[j]) {
				numbers[k] = helper[i];
				i++;
			}else{
				numbers[k] = helper[j];
				j++;
				count += (middle - i + 1);
			}
			k++;
		}

		while (i <= middle) {
			numbers[k] = helper[i];
			k++;
			i++;
		}
		
		return count;
	}
}
