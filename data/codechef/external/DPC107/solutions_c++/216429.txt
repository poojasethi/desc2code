#include <iostream>
#include <vector>

using namespace std;

void get_llo(const vector< vector<bool> > &grid, 
			 const int &xll2, const int &yll2, 
			 const int &xur2, const int &yur2, 
			 int &xllo, int &yllo);
void get_uro(const vector< vector<bool> > &grid, 
			 const int &xll2, const int &yll2, 
			 const int &xur2, const int &yur2, 
			 int &xuro, int &yuro);

int main()
{
	int n;
	int xll1, yll1, xur1, yur1;
	int xll2, yll2, xur2, yur2;
	int xllo, yllo, xuro, yuro;

	vector< vector<bool> > grid;

	scanf("%d", &n);

	for (int i = 0; i < n; i++)
	{
		scanf("%d %d %d %d", &xll1, &yll1, &xur1, &yur1);
		scanf("%d %d %d %d", &xll2, &yll2, &xur2, &yur2);

		grid = vector< vector<bool> >(10000, vector<bool>(10000));

		for (int j = yll1; j <= yur1; j++)
		{
			for (int k = xll1; k <= xur1; k++)
			{
				grid.at(j).at(k) = true;
			}
		}

		get_llo(grid, xll2, yll2, xur2, yur2, xllo, yllo);
		get_uro(grid, xll2, yll2, xur2, yur2, xuro, yuro);

		if ((xllo == -1) || (yllo == -1) || (xuro == -1) || (yuro == -1))
		{
			printf("No Overlap\n");
		}
		else
		{
			printf("%d %d %d %d\n", xllo, yllo, xuro, yuro);
		}
	}
}


void get_llo(const vector< vector<bool> > &grid, 
			 const int &xll2, const int &yll2, 
			 const int &xur2, const int &yur2, 
			 int &xllo, int &yllo)
{
	for (int i = yll2; i <= yur2; i++)
	{
		for (int j = xll2; j <= xur2; j++)
		{
			if (grid.at(i).at(j))
			{
				yllo = i;
				xllo = j;

				return;
			}
		}
	}

	xllo = -1;
	yllo = -1;
}

void get_uro(const vector< vector<bool> > &grid, 
			 const int &xll2, const int &yll2, 
			 const int &xur2, const int &yur2, 
			 int &xuro, int &yuro)
{
	for (int i = yur2; i >= yll2; i--)
	{
		for (int j = xur2; j >= xll2; j--)
		{
			if (grid.at(i).at(j))
			{
				yuro = i;
				xuro = j;

				return;
			}
		}
	}

	xuro = -1;
	yuro = -1;
}
