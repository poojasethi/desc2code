#define _CRT_SECURE_NO_WARNINGS
 
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <complex>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <cassert>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
#define SZ(x) (int)(x).size()
#define FOR(i, seq, n) for(int i = (seq); i < (n); ++i)
#define FORD(i, seq, n) for(int i = (seq); i >= (n); --i)
#define REP(i, n) for(int i = 0; i < (n); ++i)
#define REPD(i, n) for(int i = (n) - 1; i >= 0; --i)
#define ALL(x) (x).begin(), (x).end()
#define SQR(x) (x)*(x)
typedef unsigned long long u64;
typedef signed long long i64;
typedef pair<int, int> pii;
#define X first
#define Y second
 
const int iters = 30;
int n, px[301], py[301];
 
double eval(double x, double y)
{
	double ret = 0;
	REP (i, n) ret = max(ret, (x - px[i]) * (x - px[i]) + (y - py[i]) * (y - py[i]));
	return ret;
}
 
double get(double y)
{
	double lo = 0, hi = 1000;
	REP (i, iters) {
		double nl = (2 * lo + hi) / 3;
		double nh = (lo + 2 * hi) / 3;
		if (eval(nl, y) > eval(nh, y))
			lo = nl;
		else
			hi = nh;
	}
	return eval((lo + hi) / 2, y);
}
 
int main()
{
	scanf("%d", &n);
	REP (i, n) scanf("%d%d", &px[i], &py[i]);
	double lo = 0, hi = 1000;
	REP (i, iters) {
		double nl = (2 * lo + hi) / 3;
		double nh = (lo + 2 * hi) / 3;
		if (get(nl) > get(nh))
			lo = nl;
		else
			hi = nh;
	}
	double r = sqrt(get((lo + hi) / 2));
	printf("%.2lf\n", 2 * r);
	return 0;
}
 