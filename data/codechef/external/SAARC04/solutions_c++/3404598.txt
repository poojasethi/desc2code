#include <list>
#include <set>
#include <map>
#include <ctime>
#include <stack>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <queue>
#include <deque>
#include <bitset>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <iterator>
#include <cassert>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <complex>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;
 
#define For(i,n) for( int i=0; i < n; i++)
#define FOR(i,a,b) for( __typeof(b) i=(a); i<=(b); i++)
#define ALL(c)  c.begin() , c.end()
#define LL long long
#define int64 LL
#define Set(t,v) memset((t), (v), sizeof(t))

typedef vector < int > VI;
typedef pair< int , int > PII;
typedef pair < LL , LL > PLL;
#define fr first
#define se second
#define pi M_PI
#define rad(x) (x)*acos(-1)/180.0
#define EPS 1e-6
#define INF 10000*10000
stringstream ss;
#define two(x) ( 1LL<<x )
#define sq(x) ( (x)*(x) )
LL mod = 1000000007LL;

/**************************Code****************************/

int m, cnt = 0;
int mat[64][64], mark[64];
vector < int > path;

void DFS( int x )
{
	if( x == m )
	{
		cnt ++;
		for( int i = 0 ; i < path.size() ; i ++ )
			cout << path[i] << " ";
		cout << endl;
		return;
	}
	for( int i = 1 ; i < 64 ; i ++ )
		if( !mark[i] && mat[x][i] )
		{
			mark[i] = 1;
			path.push_back( i );
			DFS( i );
			path.pop_back();
			mark[i] = 0;
		}
}

int main()
{
	int t, cc = 0;
	cin >> t;
	while( t -- )
	{
		cin >> m;
		int x, y;
		cnt = 0;
		memset( mat , 0 , sizeof mat );
		memset( mark , 0 , sizeof mark );
		while( cin >> x >> y , x && y )
			mat[x][y] = mat[y][x] = 1;
		path.clear();
		path.push_back( mark[1] = 1 );
		cout << "CASE " << ++ cc << ":" << endl;
		DFS( 1 );
		cout << "There are " << cnt << " routes from the firestation to streetcorner " << m << "." << endl;
	}
	return 0;
}
