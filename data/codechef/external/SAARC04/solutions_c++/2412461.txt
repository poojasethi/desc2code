#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
#define ll long long
#define gc getchar_unlocked

int read_int() {
  char c = gc();
  int ret = 0, sign = 1;
  while((c<'0' || c>'9') && c!='-') c = gc();
  if(c=='-') {
    sign = -1;
    c = gc();
  }
  while(c>='0' && c<='9') {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  if(sign<0) ret = -ret;
  return ret;
}

bool visited[61];
bool graph[61][61];
int des;
int tot;
void go(int so, vector<int> path) {
  if(so==des) {
    tot++;
    for(int i=0; i<(int)path.size()-1; i++) {
      printf("%d ",path[i]);
    }
    printf("%d",path[path.size()-1]);
    printf("\n");
    return ;
  }
  for(int i=1; i<=60; i++) {
    if(!visited[i] && graph[so][i]) {
      visited[i] = true;
      path.push_back(i);
      go(i,path);
      path.pop_back();
      visited[i] = false;
    }
  }  
}

int main() {
  int t = read_int();
  for(int z=0; z<t; z++) {
    scanf("%d",&des);
    for(int i=1; i<=60; i++) visited[i] = 0;
    for(int i=1; i<=60; i++){ 
      for(int j=1; j<=60; j++) {
	graph[i][j] = 0;
      }
    }
    int a,b;
    while(scanf("%d%d",&a,&b),a*b) {
      graph[a][b]=graph[b][a] = 1;
    }
    visited[1] = true;
    vector<int> temp;
    temp.push_back(1);
    tot = 0;
    printf("CASE %d:\n",(z+1));
    go(1,temp);
    printf("There are %d routes from the firestation to streetcorner %d.\n",tot,des);
  }
  return 0;
}
