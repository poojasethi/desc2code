#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
using namespace std;
const int N = 5005;
int a[N], f[N][N][3];
int dfs(int l, int r, int s)
{
	if (l > r) return 0;
	if (l == r)
	{
		if (s == 1) return a[l] < a[l - 1];
		if (s == 2) return a[l] < a[l + 1];
	}
	int &ans = f[l][r][s];
	if (ans != -1) return ans;
	ans = 0;
	if (s == 1)
	{
		ans = dfs(l, r - 1, 1);
		if (a[r] < a[l - 1]) ans = max(ans, 1 + dfs(l, r - 1, 2));
	}
	else
	{
		ans = dfs(l + 1, r, 2);
		if (a[l] < a[r + 1]) ans = max(ans, 1 + dfs(l + 1, r, 1));
	}
	return ans;
}
int main()
{
	int n;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++ i) scanf("%d", &a[i]);
	memset(f, -1, sizeof(f));
	for (int i = 1; i <= n; ++ i)
	{
		int f = 0;
		if (i > 1) f = max(f, dfs(1, i - 1, 2));
		if (i < n) f = max(f, dfs(i + 1, n, 1));
		printf("%d%c", f, " \n"[i == n]);
	}
}

