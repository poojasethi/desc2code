/* Author: Karlheinz Jung */
/* Compiler: C++ @ ideone.com */
/* Computer: Rabbit 286 */

#include <iostream>
#include <deque>
#include <vector>
#include <algorithm>

using namespace std;

const int BI_MAX=10000;

struct BigInteger
{
deque<short> val;
int flags;
BigInteger(int n=0)
	{
	flags=0;
	if(n) flags=n/abs(n);
	while(n)
		{
		val.push_back(n%BI_MAX);
		n/=BI_MAX;
		}
        }
void clear_leading_zero()
	{
	while(val.back()==0) val.pop_back();
	}
string to_string()
	{
	if(val.size()==0) return "0";
	char res[val.size()*4+5];
	char *r;
	r=res+val.size()*4+4;
	*(r--)='\0';
	for(int i=0; i<(int)val.size(); i++)
		{
		int t=val[i];
		for(int j=0; j<4; j++)
			{
			if(t==0&&i==(int)val.size()-1) break;
			(*r--)=t%10+'0';
			t/=10;
                        }
                }
	return string(r+1);
        }
};

BigInteger add(const BigInteger &a, const BigInteger &b)
{
BigInteger res(0);
short va, vb, k=0;
for(int i=0; i<max<int>(a.val.size(),b.val.size()); i++)
	{
	if(i<(int)a.val.size())
		va=a.val[i];
	else
		va=0;
	if(i<(int)b.val.size())
		vb=b.val[i];
	else
		vb=0;
	va+=k;
	k=(va+vb)>=BI_MAX;
	res.val.push_back(va+vb-(k?BI_MAX:0));
        }
if(k)res.val.push_back(k);
return res;
}

BigInteger mul(const BigInteger &a, const BigInteger &b)
{
int k=0, i, j;
BigInteger res(0);
for(int i=0; i<(int)a.val.size()+(int)b.val.size()+1; i++)
	{
	res.val.push_back(0);
        }
for(i=0; i<(int)a.val.size(); i++)
	{
	k=0;
	for(j=0; j<(int)b.val.size(); j++)
		{
		k=a.val[i]*b.val[j]+k;
		res.val[i+j]+=k%BI_MAX;
		k/=BI_MAX;
		if(res.val[i+j]>=BI_MAX)
			{
			res.val[i+j]-=BI_MAX;k++;
                        }
		}
	while(k)
		{
		res.val[i+j]+=k;
		if(res.val[i+j]>=BI_MAX)
			{
			res.val[i+j]-=BI_MAX;
			k=1;
			}
		else
			k=0;
                        j++;
		}
	}
res.clear_leading_zero();
return res;
}

BigInteger operator+(const BigInteger &a,const BigInteger &b)
{
return add(a,b);
}

BigInteger operator*(const BigInteger &a,const BigInteger &b)
{
return mul(a,b);
}

vector<string> fibs;

bool compare(const string &a, const string &b)
{
if(a.size()!=b.size())return a.size()<b.size();
	return a<b;
}

int main()
{
BigInteger n, a=2, b=1;
fibs.push_back(b.to_string());
fibs.push_back(a.to_string());
while(1)
	{
	n=a+b;
	b=a;
	a=n;
	fibs.push_back(n.to_string());
	if(fibs.back().size()>101) break;
	}
string aa, bb;
for(;cin>>aa>>bb;)
	{
	if(aa=="0"&&bb=="0") break;
	cout<<upper_bound(fibs.begin(),fibs.end(),bb,compare)-lower_bound(fibs.begin(),fibs.end(),aa,compare)<<endl;
	}
return 0;
}
