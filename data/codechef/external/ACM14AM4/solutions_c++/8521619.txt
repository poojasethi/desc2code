#include <bits/stdc++.h>

using namespace std;

#define REP(i,n) for(int (i) = 0; (i) < (n); (i)++)
#define ll long long

int main()
{
    int T;
    scanf("%d", &T);

    vector<vector<int> > v(100, vector<int>(100, 0));
    vector<vector<int> > diag1(100, vector<int>(100, 0));
    vector<vector<int> > diag2(100, vector<int>(100, 0));

    while(T--)
    {
        int m,n;
        scanf("%d %d", &m, &n);

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                int t;
                scanf("%d", &t);
                v[i][j] = t;
            }
        }

        for(int i=0;i<m;i++)
        {
            int sum =0;
            for(int l=0;i+l<m && l<n;l++)
            {
                sum += v[i+l][l];
                diag1[i+l][l] = sum;
            }
        }

        for(int j=1;j<n;j++)
        {
            int sum = 0;
            for(int l=0;j+l<n && l<m;l++)
            {
                sum += v[l][j+l];
                diag1[l][j+l] = sum;
            }
        }

        for(int i=m-1;i>=0;i--)
        {
            int sum = 0;
            for(int l=0;i-l>=0 && l<n;l++)
            {
                sum += v[i-l][l];
                diag2[i-l][l] = sum;
            }
        }

        for(int j=1;j<n;j++)
        {
            int sum = 0;
            for(int l=0;m-l-1>=0 && j+l<n;l++)
            {
                sum += v[m-l-1][j+l];
                diag2[m-l-1][j+l] = sum;
            }
        }

        int result = -INFINITY;
        for(int uy=0;uy<n;uy++)
        {

            for(int ulx=0;ulx<m-1;ulx++)
            {
                for(int urx = ulx+1;urx<m;urx++)
                {
                    int dy = uy + (urx - ulx);
                    if(dy>=n)
                        break;
                    int result_here = diag1[urx][dy] - ((ulx-1>=0 && uy-1>=0) ? diag1[ulx-1][uy-1] : 0);

                    result_here += diag2[ulx][dy] - ((urx+1<m && uy-1>=0) ? diag2[urx+1][uy-1] : 0);



                    if((ulx+urx)%2 == 0)
                        result_here -= v[(ulx+urx)/2][(uy+dy)/2];

                    result = max(result, result_here);

                }
            }
        }

        printf("%d\n", result);
    }
}
