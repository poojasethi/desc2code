#include <iostream>
#include <limits.h>
using namespace std;

struct sq_mat
{
    int max_len;
    int i;
    int j;
    int diag1[101];                                               //int *diag1=new int[101];
    int diag2[101];                                               //int *diag2=new int[101];
};


int main()
{
    int T, m, n, x, y, z, l;
    cin >> T;
    for(x=0; x<T; x++)
    {
        cin >> m >> n;
        int** ptr;
        ptr=new int*[m];
        for(y=0; y<m; y++)
            ptr[y]=new int[n];
        for(y=0; y<m; y++)
        {
            for(z=0; z<n; z++)
                cin >> ptr[y][z];
        }

        sq_mat** s;
        s=new sq_mat*[m];
        for(y=0; y<m; y++)
            s[y]=new sq_mat[n];
        for(y=0; y<m; y++)
        {
            for(z=0; z<n; z++)
            {
                s[y][z].i=y;
                s[y][z].j=z;
                s[y][z].max_len=min(m-y, n-z);
            }
        }



        for(l=1; l<=min(m, n); l++)
        {
            for(y=0; y<m; y++)
            {
                for(z=0; z<n; z++)
                {
                    if(l<=s[y][z].max_len)
                    {
                        if(l==1)
                        {
                            s[y][z].diag1[l]=ptr[y][z];
                            s[y][z].diag2[l]=ptr[y][z];
                        }
                        else
                        {
                            s[y][z].diag1[l]=s[y][z].diag1[l-1]+ptr[y+l-1][z+l-1];
                            s[y][z].diag2[l]=s[y][z+1].diag2[l-1]+ptr[y+l-1][z];
                        }
                    }
                }
            }
        }
        int strength=INT_MIN;
        for(l=2; l<=min(m, n); l++)
        {
            for(y=0; y<m; y++)
            {
                for(z=0; z<n; z++)
                {
                    if(l<=s[y][z].max_len)
                    {
                        if(l%2==0)
                        {
                            if(strength<(s[y][z].diag1[l]+s[y][z].diag2[l]))
                                strength=(s[y][z].diag1[l]+s[y][z].diag2[l]);
                        }
                        else
                        {
                            int q=(l-1)/2;
                            if(strength<(s[y][z].diag1[l]+s[y][z].diag2[l]-ptr[y+q][z+q]))
                                strength=(s[y][z].diag1[l]+s[y][z].diag2[l]-ptr[y+q][z+q]);
                        }
                    }
                }
            }
        }

        cout << strength << "\n";
        delete ptr;
        delete s;
    }
    return 0;
}
