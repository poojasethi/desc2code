#include<bits/stdc++.h>
#define ll long long
using namespace std;
  ll one[105][105];
int main()
{

   //freopen("i.txt","r",stdin);
    int t;
    for(scanf("%d",&t);t;--t)
    {

        int m,n;
        scanf("%lld%lld",&m,&n);
       // long long strength, max_strength=-1000000000;
        for(ll i=0;i<m;i++)
        {
            for(ll j=0;j<n;j++)
            {
                scanf("%lld",&one[i][j]);
            }
        }
       /* for(int i=1; i<m-1; i++){
			for(int j=1; j<n-1; j++){
				strength = one[i][j];
				//max_strength = max(strength,max_strength);
				int mins = min(min(j,n-j-1),min(i,m-i-1));
				for(int k=1; k<=mins; k++){
					strength += one[i-k][j-k] + one[i-k][j+k] + one[i+k][j-k] + one[i+k][j+k];
					//cout << strength << endl;
					max_strength = max(max_strength,strength);

				}
			}
		}
		for(int i=0; i<m-1; i++){
			for(int j=0; j<n-1; j++){
				strength = one[i][j] + one[i+1][j] + one[i][j+1] + one[i+1][j+1];
				max_strength = max(strength,max_strength);
				int mins = min(min(j,n-j-2),min(i,m-i-2));
				for(int k=1; k<=mins; k++){
					strength += one[i-k][j-k] + one[i-k][j+k+1] + one[i+k+1][j-k] + one[i+k+1][j+k+1];
					max_strength = max(max_strength,strength);

				}
			}
		}*/
       ll maxi=-1000000000,s;
        for(ll i=1;i<m-1;i++)
        {
            for(ll j=1;j<n-1;j++)
            {
                ll x= min(min(i,m-1-i), min(j,n-1-j));
                s=one[i][j];

                for(ll k=1;k<=x;k++)
                {
                    s+=one[i-k][j-k]+one[i-k][j+k]+one[i+k][j-k]+one[i+k][j+k];
                    if(s>maxi)
                    maxi=s;
                }
            }
        }
        for(ll i=0;i<m-1;i++)
        {
            for(ll j=0;j<n-1;j++)
            {
                s=one[i][j]+one[i+1][j]+one[i][j+1]+one[i+1][j+1];
                if(s>maxi)
                maxi=s;
                ll x=min(min(i,m-i-2),min(j,n-j-2));
                for(ll k=1;k<=x;k++)
                {
                    s+=one[i-k][j+k+1]+one[i+k+1][j-k]+one[i+k+1][j+k+1]+one[i-k][j-k];
                    if(s>maxi)
                    maxi=s;
                }
            }
        }

        cout<<maxi<<endl;

        //cout<<max_strength<<endl;

    }
       return 0;
}
