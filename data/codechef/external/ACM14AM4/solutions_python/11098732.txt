// By Dipankar Jain
#include<bits/stdc++.h>
using namespace std;

#define rep(x, n) for(int x=0; x<n; x++)
#define srep(x, start, end) for(int x=start; x<=end; x++)
#define mp make_pair
#define endline cout<<"\n"; cout<<flush;

typedef long long ll;
typedef unsigned long long ull;


#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int INF = 0x3f3f3f3f;


int compare( const int* a, const int* b)
{
  return ( *(int *)a - *(int *)b );
}

int main()
{
  //ios::sync_with_stdio(false);
  int t;
  scanf("%d", &t);
  while(t--)
  {
    int m, n, w[101][101];
    scanf("%d %d", &m, &n);
    rep(i, m)
    {
      rep(j, n)
      {
        scanf("%d", &w[i][j]);
      }
    }
    ll ans = INT_MIN;
    rep(i, m)
    {
      rep(j, n)
      {
        int k = 1;
        ll tmp = w[i][j];
        while((i+k) != m && (i-k) != -1 && (j+k) != n && (j-k) != -1)
        {
          tmp += (w[i+k][j+k] + w[i-k][j-k] + w[i+k][j-k] + w[i-k][j+k]);
          ++k;
          if(tmp > ans)
            ans = tmp;
        }
      }
    }
    rep(i, m)
    {
      rep(j, n)
      {
        int lsq = 1;
        while((i + lsq) < m && (j+lsq) < n)
        {
          int sl = 0;
          ll tmp = 0;
          while(sl <= lsq)
          {
            tmp += (w[i+sl][j+sl] + w[i+lsq-sl][j+sl]);
            ++sl;
          }
          if(tmp > ans)
            ans = tmp;
          lsq += 2;
        }
      }
    }
    printf("%lld\n", ans);
  }
  return 0;
}
