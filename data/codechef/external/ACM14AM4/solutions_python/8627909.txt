#include<bits/stdc++.h>

#define PB push_back
#define MP make_pair
#define F first
#define S second

#define RI(a) scanf("%d",&a);
#define RIL(a) scanf("%lld",&a);
#define PI(a) printf("%d\n",a);
#define PIL(a) printf("%lld\n",a);

#define SZ(a) (int)(a.size())

#define SET(a,b) memset(a,b,sizeof(a))

#define TR(a,t) for(__typeof(a.begin()) t=a.begin();t!=a.end();t++)

#define REP(i,l,h) for(int i=(l); i<=(h);i++)
#define REPD(i,h,l) for(int i=(h);i>=(l);i--)

#define ALL(a) a.begin(),a.end()

#define DRT()  int t; cin>>t; while(t--)

#define PRSNT(a,e) (a.find(e) != a.end())

#define MINH priority_queue<int, vector<int>, greater<int> >

#define trace1(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define N 101
#define MOD 1000000007

typedef long long LL;

using namespace std;
int a[N][N],prer[N][N],prel[N][N],cpy[N][N];
int main()
{
        int mx=INT_MIN,lt,rt,mid;
        DRT() {
                int n,m;
                mx=INT_MIN;
                SET(prel,0);
                SET(prer,0);
                cin>>n>>m;

                REP(i,0,n-1) REP(j,0,m-1) {
                        cin>>a[i][j];
                        cpy[i][j]=a[i][j];
                }
                if(n>m)
                {
                        REP(i,0,m-1) REP(j,0,n-1) a[i][j]=cpy[j][i];
                        swap(n,m);
                }
                

                REP(i,0,n-1)
                        REP(j,0,m-1){
                                if(j==0||i==0)
                                        prel[i][j]=a[i][j];
                                else
                                        prel[i][j]=prel[i-1][j-1]+a[i][j];
                        }

                /*REP(i,0,n-1)
                  {
                  REP(j,0,m-1) cout<<prel[i][j]<<" ";
                  cout<<endl;
                  }*/
                REP(i,0,n-1)
                        REPD(j,m-1,0){
                                if(j==m-1||i==0)
                                        prer[i][j]=a[i][j];
                                else
                                        prer[i][j]=prer[i-1][j+1]+a[i][j];
                        }
                /*REP(i,0,n-1)
                {
                        REP(j,0,m-1) cout<<i<<" "<<j<<" "<<prer[i][j]<<"  ";
                        cout<<endl;
                }*/

                REP(l,2,min(n,m))
                {
                       // trace1(l);
                        REP(i,0,n-1)
                        REP(j,0,m-1){
                                
                                if(i+l-1>n-1||j+l-1>m-1)
                                        continue;
                                lt=prel[i+l-1][j+l-1]-prel[i-1][j-1];
                                rt=prer[i+l-1][j]-prer[i-1][j+l];
                                if((2*i+l-1)%2==0&&(2*j+l-1)%2==0)
                                {
                                        mid=a[(2*i+l-1)/2][(2*j+l-1)/2];
                                }
                                else
                                        mid=0;
                         //       trace3(i,j,lt+rt);
                           //     trace2(lt,rt);
                           //     trace1(mid);
                                if(lt+rt-mid>mx)
                                        mx=lt+rt-mid;

                        }
                }
                cout<<mx<<endl;
        }
        return 0;
}
