#include <stdio.h>
#include <string.h>
 
char Matrix[50][50];
int I;
 
char testBaseSurround ( int row, int col, int width)
{
int x=0;
char *ptr = (char *)&Matrix[row][col];
x = width;
while ( *ptr != '\0')
{
if ( *ptr++ == '#')
return 0;
if ( --x == 0)
break;
}
return 1;
}
 
int getColSpace ( char *ptr, int lim)
{
int sp=0;
while ( *ptr++ == '*')
++sp;
return sp > lim ? lim : sp;
}
 
char testBase ( char *ptr, int width)
{
int sp=0;
while ( *ptr++ == '#')
++sp;
if ( sp != width)
return 0;
return 1;
}
 
int findColumn ( int sc, int row, int col, int *Length)
{
int height=0;
char *ptr=NULL;
while ( Matrix[row][col] == '*')
{
*Length = 0;
ptr = &Matrix[row][col];
if ( getColSpace ( ptr, sc) != sc)
return 0;

ptr += sc;
while ( *ptr == '#')
{
*Length = *Length + 1;
++ptr;
}
if ( getColSpace ( ptr, sc) != sc)
return 0;

++row;
++height;
}
return height;
}
 
void findBase ( int *row, int *col)
{
int IBase=1, IBaseHeight=0, x=0, y=0, sc=0, ColLen=0;
char *ptr = &Matrix[*row][*col];
++ptr;

if ( *ptr != '#' && *(ptr+1) != '#')
{
*col = *col + 2;
return;
}

while ( *ptr++ == '#')
++IBase;
 

if ( *row != 0)
{
y = *row-1;
x = *col;
if ( !testBaseSurround ( y, x, IBase))
{
*col = *col + 2;

return;
}
}
 

y = *row;
x = *col;
while ( Matrix[y][x] == '#')
{
if ( !testBase(&Matrix[y][x],IBase))
{
*col = *col + IBase;
return;
}
++IBaseHeight;
++y;
}
sc = (IBase/3);
 
if ( (y = findColumn ( sc, y, x, &ColLen)) == 0)
{
*col = *col + IBase;
return;
}
//
if ( (ColLen + (2 * sc)) != IBase)
{
*col = *col + IBase;

return;
}
//
y += (*row + IBaseHeight);
// finding bottom base now
x = IBaseHeight;
while ( x != 0)
{
if ( !testBase(&Matrix[y][*col],IBase))
{
*col = *col + IBase;
return;
}
y++;
--x;
}
//
// test surround
if ( !testBaseSurround ( y, *col, IBase))
{
*col = *col + IBase;
//printf ( "nope\n");
return;
}
//printf ( "ok\n");
++I;
*col = *col + IBase;
}
 
int main()
{
unsigned char b;
int r=0,c=0, rs=0, cs=0;
 
scanf ( "%d %d", &r, &c);
memset ( &Matrix, 0, 50 * 50);
I = 0;
 
for ( ; rs < r; ++rs)
{
for ( cs = 0; cs < c; ++cs)
{
while ( b = (char)getchar())
{
if ( b == '\0')
return 0;
if ( b == '#' || b == '*')
{
Matrix[rs][cs] = b;
break;
}	
}
}
}
 

for ( rs = 0, cs=0; rs < r; cs=0,++rs)
{
while ( (b = Matrix[rs][cs]) != '\0')
{
if ( b == '#')
findBase ( &rs, &cs);
else
++cs;
if ( cs > c)
break;
}
}
//
printf ( "%d\n", I);
return 0;
}