#include <iostream>
#include <fstream>
#include <cstring>
#include <queue>
//#define DEBUG
#define MAX_SIZE 42
using namespace std;

char picture[MAX_SIZE][MAX_SIZE]; //leave blank edge for the graph
bool visited[MAX_SIZE][MAX_SIZE];

int setMark(int x, int y, char* pic, bool* visited){
	queue<int> myQueue;
	myQueue.push(x*MAX_SIZE+y);
	visited[myQueue.front()] = true;
	int count = 1, temp;
	while (!myQueue.empty()){
		temp = myQueue.front();
		if (pic[temp-1] == '#' && visited[temp-1] == false){
			myQueue.push(temp-1);
			visited[temp-1] = true;
			count ++;
		}
		if (pic[temp+1] == '#' && visited[temp+1] == false){
			myQueue.push(temp+1);
			visited[temp+1] = true;
			count ++;
		}
		if (pic[temp-MAX_SIZE] == '#' && visited[temp-MAX_SIZE] == false){
			myQueue.push(temp-MAX_SIZE);
			visited[temp-MAX_SIZE] = true;
			count ++;
		}
		if (pic[temp+MAX_SIZE] == '#' && visited[temp+MAX_SIZE] == false){
			myQueue.push(temp+MAX_SIZE);
			visited[temp+MAX_SIZE] = true;
			count ++;
		}
		myQueue.pop();
	}
	return count;
}

int helper(int x, int y, int R, int C, bool indicate, bool flag=false, int w_rec=0){
	//flag means the edge connect to the vertical column
	int ans = 0;
	if (indicate == true){	//scan by line
		if (flag == true){
			int col_y_start = y+w_rec/3, col_y_end = y+w_rec-1-w_rec/3;
			while (picture[x][y] == '#' && ((y >= col_y_start && y<= col_y_end) || picture[x-1][y] == '*' || picture[x+1][y] == '*')){ans++; y++;}
		}else{
			while (picture[x][y] == '#' && (picture[x-1][y] == '*' || picture[x+1][y] == '*')){ans++; y++;}
		}
	}else{//scan by column
		while (picture[x][y] == '#' && (picture[x][y-1] == '*' || picture[x][y+1] == '*')){ans++; x++;}
	}
	return ans;
}

int main(){	
	memset(picture, '*', sizeof(picture));
	memset(visited, false, sizeof(visited));
	//input
	int  R, C;
	#ifdef DEBUG
	ifstream cin("TestCases.txt");
	cin >> R >> C;
	#else
	scanf("%d%d", &R, &C);
	#endif

	for (int i=1; i<=R; i++){
		for (int j=1; j<=C; j++){
			#ifdef DEBUG
			cin >> picture[i][j];
			#else
			cin >> picture[i][j];
			#endif
		}
	}
	//deal with input
	int answer = 0;

	for (int i=1; i<=R; i++){
		for (int j=1; j<=C; j++){
			if (visited[i][j] == false && picture[i][j] == '#'){
				int h_rec_top = helper(i, j, R, C, false);
				int w_rec_top = helper(i, j, R, C, true);
				if (h_rec_top != helper(i, j+w_rec_top-1, R, C, false) || w_rec_top != helper(i+h_rec_top-1, j, R, C, true, true, w_rec_top)){
					setMark(i, j, &picture[0][0], &visited[0][0]); continue;
				}
				
				int h_col_left = helper(i+h_rec_top, j+w_rec_top/3, R, C, false);
				if (h_col_left < 1) {setMark(i, j, &picture[0][0], &visited[0][0]); continue;}
				if (h_col_left != helper(i+h_rec_top, j+w_rec_top-1-w_rec_top/3, R, C, false)) {setMark(i, j, &picture[0][0], &visited[0][0]); continue;}
				
				int h_rec_down = helper(i+h_rec_top+h_col_left, j, R, C, false);
				int w_rec_down = helper(i+h_rec_top+h_col_left+h_rec_down-1, j, R, C, true);
				if (h_rec_top != h_rec_down || w_rec_top != w_rec_down) {setMark(i, j, &picture[0][0], &visited[0][0]); continue;}
				if (h_rec_down != helper(i+h_rec_top+h_col_left, j+w_rec_top-1, R, C, false) || w_rec_down != helper(i+h_rec_top+h_col_left, j, R, C, true, true, w_rec_top)){
					setMark(i, j, &picture[0][0], &visited[0][0]); continue;
				}
				if (setMark(i, j, &picture[0][0], &visited[0][0]) == h_rec_top*w_rec_top*2+h_col_left*(w_rec_top-w_rec_top/3*2)) answer ++;
			}
		}
	}
	printf("%d", answer);
	return 0;
}