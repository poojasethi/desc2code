#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <cassert>
using namespace std;
#define p(x) cout<<#x<<":"<<x<<"\n"
#define lim 100001

int n,i,j,a,b,x,cs,q,z2,z5,z,t;
char c[2];
int A[lim],tree2[lim],tree5[lim],treeadd2[lim],treeadd5[lim];

int read2(int idx){
    int sum = 0,mult=0,tmp=idx;
    while (idx > 0){
        sum += treeadd2[idx];
        mult+=tree2[idx];
        idx -= (idx & -idx);
     }
    return sum+mult*tmp;
}
void update2(int idx ,int val){
    while (idx <= n){
        tree2[idx] += val;
        idx += (idx & -idx);
    }
}
void updateadd2(int idx ,int val){
    while (idx <= n){
        treeadd2[idx] += val;
        idx += (idx & -idx);
    }
}
int read5(int idx){
    int sum = 0,mult=0,tmp=idx;
    while (idx > 0){
        sum += treeadd5[idx];
        mult+=tree5[idx];
        idx -= (idx & -idx);
     }
    return sum+mult*tmp;
}
void update5(int idx ,int val){
    while (idx <= n){
        tree5[idx] += val;
        idx += (idx & -idx);
    }
}
void updateadd5(int idx ,int val){
    while (idx <= n){
        treeadd5[idx] += val;
        idx += (idx & -idx);
    }
}
int main()
{
  scanf("%d",&cs);
  while(cs--)
  {
    memset(tree2,0,sizeof tree2);
    memset(tree5,0,sizeof tree5);
    memset(treeadd2,0,sizeof treeadd2);
    memset(treeadd5,0,sizeof treeadd5);
    scanf("%d%d",&n,&q);
    for(i=1;i<=n;i++)
    {

      scanf("%d",&z);
      if(!z)
        continue;
      z2=0;
      while(!(z%2))
      {
        z/=2;
        z2++;
      }
      z5=0;
      while(!(z%5))
      {
        z/=5;
        z5++;
      }
      update2(i,z2);
      update2(i+1,-z2);
      updateadd2(i,-(i-1)*z2);
      updateadd2(i+1,i*z2);
      update5(i,z5);
      update5(i+1,-z5);
      updateadd5(i,-(i-1)*z5);
      updateadd5(i+1,i*z5);
    }
    while(q--)
    {
      scanf("%d%d%d",&t,&a,&b);
      if(t==1)
        printf("%d\n",min(read2(b)-read2(a-1),read5(b)-read5(a-1)));
      else
      {
        scanf("%d",&z);
        if(!z)
          continue;
         z2=0;
         while(!(z%2))
         {
           z/=2;
           z2++;
         }
         z5=0;
         while(!(z%5))
         {
           z/=5;
           z5++;
         }
         update2(a,z2);
         update2(b+1,-z2);
         updateadd2(a,-(a-1)*z2);
         updateadd2(b+1,b*z2);
         update5(a,z5);
         update5(b+1,-z5);
         updateadd5(a,-(a-1)*z5);
         updateadd5(b+1,b*z5);
      }
    }
  }
  return 0;
}
