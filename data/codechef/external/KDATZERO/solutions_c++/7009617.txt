#include <bits/stdc++.h>
#define lli int
#define s(x) scanf("%d", &x)
#define MAXX 100010

using namespace std;

// 1 based indexing

lli bit2[2][MAXX], bit5[2][MAXX];
lli n;

lli cfm[2005][2];

lli cal(lli val, lli a)
{
    lli ans = 0;

    while ((val > 0) && (val % a == 0)) {
        val = val / a;
        ++ans;
    }

    return ans;
}

/*
lli query(lli *arr, lli a)
{
    if (a > 0)
        return (arr[a] + query(arr, a-(a&(-a))));
    else
        return 0;
}*/


lli qur2_0(lli a)
{
    lli ans = 0;

    while (a > 0) {
        ans += bit2[0][a];
        a = a-(a&(-a));
    }

    return ans;
}

lli qur5_0(lli a)
{
    lli ans = 0;

    while (a > 0) {
        ans += bit5[0][a];
        a = a-(a&(-a));
    }

    return ans;
}

void update(lli *arr, lli a, lli val)
{
    while (a <= n) {
        arr[a] += val;
        a = a+(a&(-a));
    }
}

void rg_upd(lli a, lli b, lli val)
{
    lli i = cfm[val][0];

    update(bit2[0], a, i);
    update(bit2[0], b+1, -i);

    update(bit2[1], a, i*(a-1));
    update(bit2[1], b+1, -i*(b));

    i = cfm[val][1];

    update(bit5[0], a, i);
    update(bit5[0], b+1, -i);

    update(bit5[1], a, i*(a-1));
    update(bit5[1], b+1, -i*(b));
}

lli subqur2(lli b, lli a)
{
    lli ans = bit2[1][b];
    lli x = b - (b&-b);
    lli y = a;

    while (1)
    {
        if (x == y)
            break;

        if (x > y) {
            ans += bit2[1][x];
            x = x - (x & (-x));
        } else {
            ans -= bit2[1][y];
            y = y - (y & (-y));
        }
    }

    return ans;
}

lli subqur5(lli b, lli a)
{
    lli ans = bit5[1][b];
    lli x = b - (b&-b);
    lli y = a;

    while (1)
    {
        if (x == y)
            break;

        if (x > y) {
            ans += bit5[1][x];
            x = x - (x & (-x));
        } else {
            ans -= bit5[1][y];
            y = y - (y & (-y));
        }
    }

    return ans;
}

lli rg_qury(lli a, lli b)
{
    lli p,q,i,j;

    /*p = query(bit2[0], b) * b - query(bit2[1], b);
    q = query(bit2[0], a-1) * (a-1) - query(bit2[1], a-1);

    p = p - q;*/

    p = qur2_0(b)*b - qur2_0(a-1)*(a-1) + subqur2(a-1, b);

    /*i = query(bit5[0], b) * b - query(bit5[1], b);
    j = query(bit5[0], a-1) * (a-1) - query(bit5[1], a-1);

    i = i - j;*/

    i = qur5_0(b)*b - qur5_0(a-1)*(a-1) + subqur5(a-1, b);
  //  cout << p << " " << i << endl;

   return (min(p, i));
}

int main()
{
    lli i,j,k,a,b,c,d,m,tcase,cnt;

   // freopen("inp.txt", "r", stdin);

    for (i = 0; i <= 2000; ++i) {
        cfm[i][0] = cal(i, 2);
        cfm[i][1] = cal(i, 5);
    }

    s(tcase);

    while (tcase--) {
        s(n);
        s(m);

        //memset(bit2, 0, sizeof(bit2));
       // memset(bit5, 0, sizeof(bit5));

        i = 0;

        for (i = 0; i < n+1; ++i)
            bit2[0][i] = bit2[1][i] = bit5[0][i] = bit5[1][i] = 0;

        for (i = 1; i <= n; ++i) {
            s(j);

            rg_upd(i, i, j);
        }

        for (i = 0; i < m; ++i) {
            s(a);

            if (a == 1) {
                s(b);
                s(c);

                printf("%d\n", rg_qury(b, c));
            } else {
                s(b);
                s(c);
                s(d);

                rg_upd(b, c, d);
            }
        }
    }

    return 0;
}
