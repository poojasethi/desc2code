#include <cstdio>
#include <cmath>
#include <vector>
#include <iostream>
#include <cstring>
#define MAX 500100
#define maxnum(a,b) a>b?a:b
using namespace std;
int sva[600002],flag2,appzer[400002];
long int ans[400002];
vector<long long> primes;
struct exponent
{
 long long ctr;
};
typedef struct exponent EXP;
EXP ex[600002];
inline long long Scan_f()
{
    long long noRead=0;
    register char p=getchar_unlocked();
    //register char p=getc(stdin);
    for(;p<48 || p>57;p=getchar_unlocked());
    //for(;p<48 || p>57;p=getc(stdin));
    while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getchar_unlocked();}
    //while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getc(stdin);}
    return noRead;
};



long int power(long long base,int exp,int mod)
{
     long long result = 1;
     while(exp > 0)
     {
      if(exp %2 == 1)
      {
       result = (result *base);
       if(result > 9999)
       {
        result = result%mod;
        flag2 = 1;
       }
      }
       exp=exp>>1;
      base = (base*base);
      if((base > 9999))
      {
       base = base%mod;
       if(exp)
       flag2 = 1;
      }
     }
   return result;
}

void sieve(long long n)
{
 long long  i,j;
 for(j=4;j<=n;j+=2)
    sva[j] = 1;
 for(i=3; i<=n; i+=2)
 {
    if(sva[i] == 0)
    {
        for(j=i; (i*j)<=n; j+=2)
        {
            sva[i*j] = 1;
        }
    }
 }
 for(i=2;i<=n;i++)
 {
  if(sva[i] == 0)
    primes.push_back(i);
 }
}


int main()
{
//    freopen("input.txt","r",stdin);
//    freopen("output.txt","w",stdout);
    int flag;
    long int sol;
    long long d,i,T,tc,n,j,temp;
    sieve(500001);
    memset(appzer,0,sizeof(appzer));
    T = Scan_f();
    tc = 0;
    while(T>0)
    {
              sol = 1;
              d=1;
              flag2 = 0;
              n=Scan_f();
              temp = n;
              for(i=0;(i<primes.size()&&primes[i]<n);i++)
              {
                flag = 0;
                j = primes[i];
                ex[j].ctr = 0;
                while(temp%j==0 && j>0)
                {
                 flag = 1;
                 ex[j].ctr++;
                 temp = temp/j;
                }
                if(flag)
                {
                 d = d*(ex[j].ctr+1);
                }
                if(temp <= 1)
                    break;
                if(sva[temp] == 0)
                {
                 d = d*2;
                 break;
                }
               }
               if(d > 1)
               {
                if((long long)sqrt(n)*(long long)sqrt(n) == n)
                 sol = power(sqrt(n),d-2,10000);
                else
                 sol = power(n,(d-2)/2,10000);
               }
               ans[tc] = sol;
               if(flag2)
                appzer[tc] = 1;

    T--;
    tc++;
 }
    for(i=0;i<tc;i++)
    {
     if(appzer[i])
        printf("%04ld\n",ans[i]);
     else
        printf("%ld\n",ans[i]);
    }
    return 0;

}
