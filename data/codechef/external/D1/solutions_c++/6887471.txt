#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cstring>
#include <cctype>
#include <set>
#include <map>
#include <utility>
 
using namespace std;
 
#define PB push_back
#define MP make_pair
#define FOR(i, a, b) for(int i=int(a); i<=int(b); i++)
#define RFOR(i, a, b) for(int i=int(a); i>=int(b); i--)
#define FORN(i, n) for(int i=0; i<int(n); i++)
 
typedef long long ll;
typedef unsigned long ul;
typedef pair<int, int> pii;
 
const int MAX = 500000, MOD = 10000;
bool isNotPrime[MAX+1];
 
/* Store the primes already generated, faster instead of computing again */
int primes[169][50] =
{
{1},
{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144},
{1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147}, {1, 5, 25, 125, 625, 3125, 15625, 78125, 390625},
{1, 7, 49, 343, 2401, 16807, 117649}, {1, 11, 121, 1331, 14641, 161051},
{1, 13, 169, 2197, 28561, 371293}, {1, 17, 289, 4913, 83521}, {1, 19, 361, 6859, 130321},
{1, 23, 529, 12167, 279841}, {1, 29, 841, 24389}, {1, 31, 961, 29791}, {1, 37, 1369, 50653},
{1, 41, 1681, 68921}, {1, 43, 1849, 79507}, {1, 47, 2209, 103823}, {1, 53, 2809, 148877}, {1, 59, 3481, 205379},
{1, 61, 3721, 226981}, {1, 67, 4489, 300763}, {1, 71, 5041, 357911}, {1, 73, 5329, 389017}, {1, 79, 6241, 493039},
{1, 83, 6889}, {1, 89, 7921}, {1, 97, 9409}, {1, 101, 10201}, {1, 103, 10609}, {1, 107, 11449}, {1, 109, 11881}, {1, 113, 12769},
{1, 127, 16129}, {1, 131, 17161}, {1, 137, 18769}, {1, 139, 19321}, {1, 149, 22201}, {1, 151, 22801}, {1, 157, 24649}, {1, 163, 26569}, {1, 167, 27889},
{1, 173, 29929}, {1, 179, 32041}, {1, 181, 32761}, {1, 191, 36481}, {1, 193, 37249}, {1, 197, 38809}, {1, 199, 39601}, {1, 211, 44521}, {1, 223, 49729},
{1, 227, 51529}, {1, 229, 52441}, {1, 233, 54289}, {1, 239, 57121}, {1, 241, 58081}, {1, 251, 63001}, {1, 257, 66049}, {1, 263, 69169}, {1, 269, 72361},
{1, 271, 73441}, {1, 277, 76729}, {1, 281, 78961}, {1, 283, 80089}, {1, 293, 85849}, {1, 307, 94249}, {1, 311, 96721}, {1, 313, 97969}, {1, 317, 100489},
{1, 331, 109561}, {1, 337, 113569}, {1, 347, 120409}, {1, 349, 121801}, {1, 353, 124609}, {1, 359, 128881}, {1, 367, 134689}, {1, 373, 139129},
{1, 379, 143641}, {1, 383, 146689}, {1, 389, 151321}, {1, 397, 157609}, {1, 401, 160801}, {1, 409, 167281}, {1, 419, 175561}, {1, 421, 177241},
{1, 431, 185761}, {1, 433, 187489}, {1, 439, 192721}, {1, 443, 196249}, {1, 449, 201601}, {1, 457, 208849}, {1, 461, 212521}, {1, 463, 214369},
{1, 467, 218089}, {1, 479, 229441},  {1, 487, 237169}, {1, 491, 241081}, {1, 499, 249001}, {1, 503, 253009}, {1, 509, 259081}, {1, 521, 271441},
{1, 523, 273529}, {1, 541, 292681}, {1, 547, 299209}, {1, 557, 310249}, {1, 563, 316969}, {1, 569, 323761}, {1, 571, 326041}, {1, 577, 332929},
{1, 587, 344569}, {1, 593, 351649}, {1, 599, 358801}, {1, 601, 361201}, {1, 607, 368449}, {1, 613, 375769}, {1, 617, 380689}, {1, 619, 383161},
{1, 631, 398161}, {1, 641, 410881}, {1, 643, 413449}, {1, 647, 418609}, {1, 653, 426409},  {1, 659, 434281},{1, 661, 436921},{1, 673, 452929},
{1, 677, 458329},{1, 683, 466489},{1, 691, 477481},{1, 701, 491401},
};
 
int n_primes = 126;
 
int s[] = {0, 18, 11, 8, 6, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
 
int N;
bool Wflag = false;
 
/* To compute a^p in log_2(p) time... Repeated Squaring */
inline int power(const int &a, const int &p) {
    if(p==0) return 1;
    if(p==1) return (a);
 
    int tmp = power(a, p/2);
    tmp = tmp*tmp; if(tmp>=MOD) { Wflag = true; tmp = tmp%MOD; }
    if(p&1) tmp = tmp*a; if(tmp>=MOD) { Wflag = true; tmp = tmp%MOD; }
    return tmp;
}
 
/* To do Fast Input/Output, with the help of Yash :) */
char outfile[10300000] , infile[10300000],D[20],*opos,*ipos;
int input()
{
    while(*ipos <= 32) ++ipos;
    int x=0;char c;
    while  ( true ) {
        c=*ipos++;
        if (c<=32) return x;
        x=(x<<1)+(x<<3)+c-'0';
    }
    return x;
}
 
void output(int x)
{
    int y,dig=0;
    while (x||!dig) {
        y=x/10;
        D[dig++]=x-(10*y)+'0';x=y;
    }
    if(Wflag) FORN(i,4-dig) *opos++='0';
    while (dig--)*opos++=D[dig];
    *opos++='\n';
}
 
 
int main() {
    opos = outfile;
    ipos = infile;
    fread_unlocked(infile,20000000,1,stdin);
 
    FOR(i, 2, MAX) {
        if(!isNotPrime[i]) {
            int j = i+i;
            while(j <= MAX) {
                isNotPrime[j] = true;
                j += i;
            }
        }
    }
 
    int T; T = input();
    int ndiv;
 
    while(T--) {
        N = input();
        Wflag = false;
        int Ncopy = N;
 
        ndiv = 1;
        FOR(i, 1, n_primes) {
            if(N == 1) break;
 
            if(!isNotPrime[N]) {
                N = 1;
                ndiv *= 2;
                break;
            }
 
            if( N % (primes[i][1]) ) continue;
 
            int lb = 1, ub = s[i]+1, mid;
            while((ub-lb) > 1) {
                mid = (lb + ub)/2;
                if( !(N % (primes[i][mid])) ) lb = mid;
                else ub = mid;
            }
            N = N/primes[i][lb];
            ndiv = ndiv * (lb+1);
        }
 
        if(N > 1) ndiv = ndiv*2;
 
        ndiv -= 2;
 
        if(ndiv >= 2 && Ncopy >= MOD) Wflag = true;
 
        int ans = power(Ncopy%MOD, ndiv/2);
 
        if(ndiv & 1) {
            int lb = 1, ub = 1000, mid;
            while((ub-lb) > 1) {
                mid = (lb+ub)/2;
                if(mid*mid <= Ncopy) lb = mid;
                else ub = mid;
            }
            ans = (ans * lb);
            if(ans >= MOD) { Wflag = true; ans%=MOD;}
        }
 
        ans %= MOD;
        output(ans);
    }
 
    fwrite_unlocked(outfile,opos-outfile,1,stdout);
    return 0;
} 