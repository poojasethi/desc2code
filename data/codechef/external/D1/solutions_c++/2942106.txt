#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 #define N 500010
 #define M 10000
 int fac[N], rank[N], c[N]; bool of;
 int ModPow(int n, int k)
 {    
 int r = 1;    
 of = false;    
 if(k == 0) return 1;    
 if(n >= M) 
 {        n %= M;        of = true;    }    
 for(int i = 0x40000000; i > 0; i >>= 1) 
 {        
 r *= r;      
 if(r >= M) {            r %= M;            of = true;        }  
 if(k & i)
 {            r *= n;           
 if(r >= M) 
 {              r %= M;              of = true;            }    
 }  
 }   
 //return of ? (0x8000 | r) : r;} 
 return r;
 }
 int main()
 {    int t, n, v;   
 memset(fac, 0, sizeof(fac));   
 fac[1] = 1; rank[1] = 0; c[1] = 1;    
 for(int i = 2; i < N; i++) 
 {        
 if(fac[i]) 
 {            int j = i / fac[i];       
 if(fac[j] == fac[i])
 {                rank[i] = rank[j] + 1;        
 c[i] = c[j]/rank[i]*(rank[i]+1);       
 }
 else 
 {                
 rank[i] = 1;           
 c[i] = c[j] * 2;         
 }      
 continue;     
 }      
 fac[i] = i; rank[i] = 1; c[i] = 2;     
 if(i < 32768)      
 for(int j = i * i; j < N; j += i)       
 if(fac[j]==0)                fac[j] = i;    }  
 memset(fac, 0, sizeof(fac));  
 for(int i = 0; i * i <= N; i++)  
 fac[i*i] = i;    scanf("%d", &t);    
 while(t--)
 {        scanf("%d", &n);       
 if(n <= 1) { printf("1\n"); continue; }      
 if(fac[n]) {            v = ModPow(fac[n], c[n]-2);        } 
 else {            v = ModPow(n, c[n]/2-1);        }    
 //if(v & 0x8000) printf("%04d\n", v&0x7fff);  
if(of)printf("%04d\n",v); 
 else printf("%d\n", v);    }    
 return 0;
 }