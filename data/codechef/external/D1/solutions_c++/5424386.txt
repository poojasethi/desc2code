#include<iostream>
#include<stdio.h>
#include<math.h>
#define gc getchar_unlocked
#define mod 10000
using namespace std;
int div[500005]={};
bool flag;

void fastin(int &x)
{
	register int a=gc();
	x=0;
	for(;a<48 || a>57;a=gc());
	for(;a>47 && a<58;a=gc())
		x=(x<<1)+(x<<3)+a-48;	
}
void fastin(long long int &x)
{
	register int a=gc();
	x=0;
	for(;a<48 || a>57;a=gc());
	for(;a>47 && a<58;a=gc())
		x=(x<<1)+(x<<3)+a-48;	
}

unsigned long long int power(unsigned long long int base,unsigned long long int exp)
{
	if(exp==0) return 1;
	else if(exp&1) 
	{
		unsigned long long ot=power(base,exp-1);
		if(base*ot>=10000)
		flag=1;
		return ((base%mod)*(ot%mod))%mod;
	}
	else
	{
		unsigned long long int half=power(base,exp/2);
		if(half*half>=10000) 
		flag=1;
		return ((half%mod)*(half%mod))%mod;
	}

}
void divp()
{
	div[1]=0;
	int i,j;
	for(i=2;i<=sqrt(500000);i++)
	{
		for(j=i+1;i*j<=500000;j++)
		div[i*j]++;
	}
}

int main()
{
	divp();
	int t,n,root;
	unsigned long long int divisors;
	fastin(t);
	while(t--)
	{
			flag=0;
			fastin(n);
			root=sqrt(n);
			if(root*root==n)
			{
				divisors=power(n,div[n]);
				divisors=((divisors)*root)%mod;
				if(flag==1)
				printf("%04llu\n",divisors%mod);
				else
				printf("%llu\n",divisors%mod);
			}
			else
			{
				divisors=power(n,div[n]);
				if(flag==1)
				printf("%04llu\n",divisors%mod);
				else
				printf("%llu\n",divisors%mod);
			}
		}
		
	return 0;
}

