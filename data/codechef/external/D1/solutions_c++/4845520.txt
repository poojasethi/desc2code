#include <cstdio>
using namespace std;
 
int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701};
int squares[500001] = {0};
bool fourdigits;
 
int readInt()
{
	char c = getchar_unlocked();
	int x = 0;
	while(!(c >= '0' && c <= '9'))
	{
		c = getchar_unlocked();
	}
	while(c >= '0' && c <= '9')
	{
		x = x*10 + c-'0';
		c = getchar_unlocked();
	}
	return x;
}
 
void printInt(int a)
{
	char c[5];
	int index = 0;
	while(a)
	{
		c[index] = a%10 + 48;
		a /= 10;
		index++;
	}
	while(index--)
	{
		putchar_unlocked(c[index]);
	}
}
 
int exp(int n, int power)
{
	if(power<2)
	{
		if(power)
		{
			return n;
		}
		return 1;
	}
	else
	{
		int temp = exp(n, power/2);
		temp *= temp;
		if(temp >= 10000)
		{
			fourdigits = true;
			temp %= 10000;
		}
		if(power%2)
		{
			temp *= n;
			if(temp >= 10000)
			{
				fourdigits = true;
				temp %= 10000;
			}
		}
		return temp;
	}
}
 
int main()
{
	int t = readInt(), n;
	for(int i = 1; i <= 707; i++)
	{
		squares[i*i] = i;
	}
	while(t--)
	{
		n = readInt();
		int count = 1, tempn = n;
		fourdigits = false;
		for(int i = 0; i < 126; i++)
		{
			int multiplier = 1;
			while(!(tempn%primes[i]))
			{
				multiplier++;
				tempn /= primes[i];
			}
			count *= multiplier;
			if(primes[i]*primes[i] > tempn)
			{
				break;
			}
		}
		if(tempn > 1)
		{
			count *= 2;
		}
		count -= 2;
		if(count%2)
		{
			n = squares[n];
		}
		else
		{
			count /= 2;
		}
		if(n >= 10000 && count)
		{
			fourdigits = true;
		}
		n = exp(n%10000, count);
		if(fourdigits)
		{
			putchar_unlocked(n/1000+48);
			putchar_unlocked((n/100)%10+48);
			putchar_unlocked((n/10)%10+48);
			putchar_unlocked(n%10+48);
		}
		else
		{
			printInt(n);
		}
		putchar_unlocked('\n');
	}
    return 0;
} 