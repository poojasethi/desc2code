#include<stdio.h>
#include<math.h>
#include<string.h>

#define getchar_unlocked getchar
#define putchar_unlocked putchar

unsigned store_ans[500002];

unsigned readUint()
{
	register unsigned i = 0;
	register int c;
	do c = getchar_unlocked(); while(c < '0');
	
	do{
		i = (i << 3) + (i << 1) + c - '0';
		c = getchar_unlocked();	
	}while(c >= '0');
	return i;
}

char display4;

unsigned power(unsigned b,unsigned e)
{
	if(e == 0)return 1;

	unsigned long long i = power(b,(e >> 1));

	if(i >= 10000)
	{
		display4 = 't';
		i %= 10000;
	}

	i = i * i;

	if(i >= 10000)
	{
		display4 = 't';
		i %= 10000;
	}

	if(e & 1)
	{
		i = i * b;

		if(i >= 10000)
		{
			display4 = 't';
			i %= 10000;
		}
	}
	return i;
}
char is_done[500002];
char df[500002];

int main()
{
	register unsigned t,n,rootn,counti,X,i,j,k;
	unsigned prod;
	unsigned long long nfac;
	unsigned int primes[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,
		103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,
		233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,
		379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,
		523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,
		677,683,691,701,709};


		
	//store

	memset(is_done,'f',sizeof is_done);
	memset(df,'f',sizeof df);
	//
		
	//sieve
	char cc[500001];
	
	//for(i = 2;i <= 500000;i++)cc[i] = 't';
	memset(cc,'t',sizeof cc);
	cc[0] = 'f';
	cc[1] = 'f'; 

	for(i = 2; i <= 708; i++)
	{
		if(cc[i] == 't')
		{
			j = i * i;

			while( j <= 500000 )
			{
				cc[j] = 'f';
				j += i;
			}
		}
	}
	//sieve ends
	
	t = readUint();

	while(t--)
	{
		display4 = 'f';
		n = readUint();

		if(n == 1 || cc[n] == 't')
		{
			if(n == 1)putchar_unlocked('1');
			else putchar_unlocked('1');
			putchar_unlocked('\n');
			continue;
		}
		
		if(is_done[n] == 't')
		{
			if(df[n] == 't')printf("%04u\n",store_ans[n]);
			else printf("%u\n",store_ans[n]);
			continue;
		}

		X = n;
		rootn = sqrt(n);
		nfac = 1,counti=1;

		k = 0;
		i = primes[0];
		while(i <= rootn)
		{
			counti = 1;
			while(X % i == 0)
			{
				X /= i;
				counti++;
			}
			nfac *= counti;
			i = primes[++k];
		}

		if(X > 2)nfac = (nfac << 1);

		if(n == (rootn * rootn))prod = rootn;
		else prod = 1;

		nfac = (nfac >> 1);
		nfac--;

		prod = prod * power(n,nfac);
		if(prod >= 10000)
		{
			display4 = 't';
			prod %= 10000;
		}
		
		is_done[n] = 't';
		store_ans[n] = prod;

		if(display4 != 't')printf("%u\n",prod);
		else{ df[n] = 't'; printf("%04u\n",prod); }
	}
	return 0;
}