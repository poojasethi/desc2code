#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <bitset>
#include <fstream>
#include <iomanip>
#include <set>
#include <stack>
#include <sstream>
#include <cstdio>
#include <map>
#include <cmath>
#include <cstring>
#include <ctime>
 
using namespace std;

typedef unsigned long long ull;

const int modulo = 8388608;

/*
	exponentiation squaring O(log N)
*/
ull power(ull a, ull p) {
	ull x = 1;
	ull y = a;

	while (p > 0) {
		if (p % 2 == 1) {
			x = (x * y) % modulo;
		}

		y = (y * y) % modulo;
		p /= 2;
	}

	return x % modulo;
}

/*
	http://oeis.org/search?q=1%2C7%2C31%2C111&sort=&language=english&go=Search
	Bjorner-Welker sequence:
		2^(n-3) *(n^2 - 5*n + 8) - 1

	1, 7, 31, 111, 351, 1023, 2815, 7423, 18943, 47103, 
	114687, 274431, 647167, 1507327, 3473407, 7929855, 17956863, 
	40370175, 90177535, 200278015, 442499071, 973078527, 2130706431, 4647288831, 10099884031, 21877489663
*/
ull summing_subset(ull n) {
	n += 2;
	return (power(2, n - 3) * (n*n - 5*n + 8) - 1) % modulo;
}

void inout_summing_subsets() {
	int test_cases;
	cin >> test_cases;

	int n;
	while (test_cases--) {
		cin >> n;
		cout << summing_subset(n) << '\n';
	}
}

int main() {
	inout_summing_subsets();	
	return 0;
}  