#include <iostream>
#include <iomanip>
 
using namespace std;
 
long double dp[2503][2503];
 
long double find(long double n, long double k)
{
	if(n < 0 || k < 0 || n < k) return 0;
	int p = n, q = k;
	if(dp[p][q] != -1) return dp[p][q];
	long double a = (k*find(n - 1, k - 1) + (n-k)*find(n - 1, k + 1))/n;
	long double b = (n - k)*((n-k-2)*find(n - 2, k + 2) + find(n - 2, k) + k*(1 + find(n - 2, k))) / (n * (n - 1))
	+ k*(min(find(n - 1, k - 1), ((k - 1)*(2 + find(n - 2, k - 2)) + (n - k)*(1 + find(n - 2, k)))/(n - 1))) / n;
	dp[p][q] = 1 + min(a, b);
	return dp[p][q];
}
 
int main()
{
	for(int i = 0; i <= 2500; i++)
	{
		for(int j = 0; j <= 2500; j++)
		{
			dp[i][j] = -1;
		}
	}
 
	dp[0][0] = 0;
	dp[1][1] = dp[2][0] = 1;
 
	while(!cin.eof())
	{	
		int n, m;
		cin >> n >> m;
		if(cin.eof()) break;
		cout << fixed << setprecision(4) << find(n*m, 0) << '\n';
	}
}
