import java.io.OutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author karan173
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		FastReader in = new FastReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		STANDUP solver = new STANDUP();
		solver.solve(1, in, out);
		out.close();
	}
}

class STANDUP
{
    static final int MAXN = 2500;
    double[][] dp;
    //dp[x][y] = expected value with x net and y seen. All y are from distinct countries
    public void solve(int testNumber, FastReader in, PrintWriter out)
    {
        dp = new double[MAXN+1][MAXN+1];
        for (int i = 0; i < dp.length; i++)
        {
            Arrays.fill (dp[i], -1);
        }
        dp[0][0] = 0;
        double num, den;
        /*
        Note we only iterate on valid states
         */
        /*
        verification idea is correct->
        sum of probabilities of cases is 1
         */
        for (int x = 2; x < MAXN+1; x+=2) //we only iterate on even states
        {
            for (int y = MAXN; y >= 0; y--)
            {
                if (x < 2 * y)   //we require x>=2*y [see definition of dp state]
                {
                    continue;
                }
                //x>=2y
                double ans = 0;
                double yy = y;
                double xx = x;

                if (isValid (x - 2, y - 1))      //choose first from seen, optimally we choose next from seen set
                {
                    num = yy * (1.0 + dp[x - 2][y - 1]);
                    den = xx - yy;
                    ans += num / den;
                }
                if (isValid (x - 2, y))
                {
                    //choose first not seen
                    //next matching
                    num = (xx - 2 * yy) * (1 + dp[x - 2][y]);
                    den = (xx - yy) * (xx - yy - 1);
                    ans += num / den;

                    //choose first not seen
                    //next not matching but seen
                    num = (xx - 2 * yy) * (yy) * (2.0 + dp[x - 2][y]);
                    den = (xx - yy) * (xx - yy - 1);
                    ans += num / den;
                }
                if (isValid (x, y + 2))
                {
                    //choose first not seen
                    //next not matching not seen
                    num = (xx - 2 * yy) * (xx - 2 * yy - 2) * (1.0 + dp[x][y + 2]);
                    den = (xx - yy) * (xx - yy - 1);
                    ans += num / den;
                }

                dp[x][y] = ans;
            }
        }
        while (!in.eof ())
        {
            int n = in.ni ();
            int m = in.ni ();
            out.printf ("%.4f\n", dp[n * m][0]);
        }
    }

    private boolean isValid(int x, int y)
    {
        return x >= 0 && y >= 0 && y <= MAXN && dp[x][y] != -1;
    }
}

class FastReader
{

    public InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastReader(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
        {
            throw new InputMismatchException ();
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                throw new InputMismatchException ();
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int peek()
    {
        if (numChars == -1)
        {
            return -1;
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                return -1;
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar];
    }

    public int ni()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read ();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
            {
                throw new InputMismatchException ();
            }
            res *= 10;
            res += c - '0';
            c = read ();
        } while (!isSpaceChar (c));
        return res * sgn;
    }

    public boolean isSpaceChar(int c)
    {
        if (filter != null)
        {
            return filter.isSpaceChar (c);
        }
        return isWhitespace (c);
    }

    public static boolean isWhitespace(int c)
    {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public boolean eof()
    {
        int value;
        while (isSpaceChar (value = peek ()) && value != -1)
            read ();
        return value == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}
