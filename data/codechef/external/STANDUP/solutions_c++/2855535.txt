#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<sstream>

#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef vector<string> vs; 
typedef pair<int,int> ii;
typedef long long int LLI;
typedef unsigned long long int ULLI;

#define sz(a)                        int((a).size()) 
#define pb                           push_back 
#define mp                           make_pair
#define F                            first
#define S                            second
#define present(c,x)                 ((c).find(x) != (c).end()) 
#define cpresent(c,x)                (find(all(c),x) != (c).end())
#define tr(c,i)                      for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define all(c)                       (c).begin(),(c).end()
#define si(n)                        scanf("%d",&n)
#define sl(n)                        scanf("%lld",&n)
#define sf(n)                        scanf("%f",&n)
#define sd(n)                        scanf("%lf",&n)
#define ss(n)                        scanf("%s",n)

#define abs(x)                       ((x)<0?-(x):(x))
#define fill(a,v)                    memset((a),(v),sizeof (a))
#define INF                          INT_MAX
#define LINF                         (long long)1e18
#define EPS                          1e-9
#define MAX 2502

double dp[MAX][MAX];

void fill_dp()
{
	for(int i=0; i<MAX; ++i)
		for(int j=0; j<MAX; ++j)
			dp[i][j] = -1;
}

double f(int t, int k)
{
	if(t <= 0 || k < 0 || t < k)
		return 0;
	if(t <= 2*k)
		return (t / (double)2.0);
	if(dp[t][k] != -1)
		return dp[t][k];

	double p1, p2, p3, p4;
	p1 = p2 = p3 = p4 = 0;

	p1 = k / (double)(t - k);
	if(t - k - 1 != 0)
	{
		p2 = (1 - p1) / (double)(t - k - 1); 
		p3 = p2 * k; 
	}
	p4 = (1 - p1 - p2 -p3);
	
	dp[t][k] = p1 * (1 + f( t-2, k-1 )) +
		   p2 * (1 + f( t-2, k   )) +
		   p3 * (2 + f( t-2, k   )) +
		   p4 * (1 + f(   t, k+2 ));

	return dp[t][k];
}

int main()
{
	int n, m;

	fill_dp();
	while(scanf("%d%d", &m, &n) != EOF)
		printf("%0.4lf\n", f(n*m, 0));
	return 0;
}
