#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <queue>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define INF 1000000000
#define FOR(i, a, b) for(int i=int(a); i<int(b); i++)
#define FORC(cont, it) for(typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); it++)
#define pb push_back

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;

#define maxN 1251

int n, m;
long double dp[maxN][maxN];

long double solve(int p, int f) {
	if (!p) return 0.0;
	if (f < 0) return 0.0;
	if (f > p) return 0.0;
	if (f == p) return p;
	if (dp[p][f] != -1.0) return dp[p][f];
	dp[p][f] = 0.0;
	long double prob;
	long double div = (2 * p - f) * (2 * p - f - 1);
	// NN
	prob = ((2 * (p - f)) * (2 * (p - f - 1))) / div;
	dp[p][f] += (solve(p, f + 2) + 1.0)*prob;
	// NS
	prob = ((2 * (p - f)) * f) / div;
	dp[p][f] += (solve(p - 1, f) + 2.0)*prob;
	// NE
	prob = (2 * (p - f)) / div;
	dp[p][f] += (solve(p - 1, f) + 1.0)*prob;
	// S
	prob = ((long double)f) / ((long double)(2 * p - f));
	dp[p][f] += (solve(p - 1, f - 1) + 1.0)*prob;
	return dp[p][f];
}

int main() {
	cout << fixed << setprecision(4);
	FOR(i, 0, maxN) {
		FOR(j, 0, maxN) {
			dp[i][j] = -1.0;
		}
	}
	while (cin >> n >> m) {
		n *= m;
		n >>= 1;
		cout << solve(n, 0) << endl;
	}
	return 0;
}
