/***********Template Starts Here***********/
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <deque>
#include <functional>
#include <string>
#include <iostream>
#include <cctype>
#include <set>
#include <climits>

#define pb push_back
#define nl puts ("")
#define sp printf ( " " )
#define phl printf ( "hello\n" )
#define ff first
#define ss second
#define POPCOUNT __builtin_popcountll
#define RIGHTMOST __builtin_ctzll
#define MP make_pair
#define FOR(i,x,y) for(int i = (x) ; i <= (y) ; ++i)
#define ROF(i,x,y) for(int i = (y) ; i >= (x) ; --i)
#define CLR(x,y) memset(x,y,sizeof(x))
#define UNIQUE(V) (V).erase(unique((V).begin(),(V).end()),(V).end())
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define NUMDIGIT(x,y) (((int)(log10((x))/log10((y))))+1)
#define SQ(x) ((x)*(x))
#define ABS(x) ((x)<0?-(x):(x))
#define FABS(x) ((x)+eps<0?-(x):(x))
#define modularInv(a,m,x,y) ext_gcd((a),(m),(x),(y))
#define ALL(x) (x).begin(),(x).end()
#define LCM(x,y) (((x)/gcd((x),(y)))*(y))


using namespace std;

typedef long long vlong;
typedef unsigned long long uvlong;
typedef pair < int, int > pii;
typedef pair < vlong, vlong > pll;

const vlong inf = 2147383647;
const double pi = 2 * acos ( 0.0 );
const double eps = 1e-9;

//int knightDir[8][2] = { {-2,1},{-1,2},{1,2},{2,1},{2,-1},{-1,-2},{1,-2},{-2,-1} };

vlong gcd ( vlong a, vlong b ) {
    a = ABS ( a ); b = ABS ( b );
    while ( b ) { a = a % b; swap ( a, b ); } return a;
}

int ext_gcd (int a,int b,int &x,int &y) {
    if (a == 0) { x = 0; y = 1; return b;}
    int x1, y1; int d = ext_gcd (b%a, a, x1, y1);
    x = y1 - (b / a) * x1; y = x1; return d;
}

vlong power ( vlong a, vlong p ) {
    vlong res = 1, x = a;
    while ( p ) {
        if ( p & 1 ) res = ( res * x );
        x = ( x * x ); p >>= 1;
    }
    return res;
}

vlong bigmod ( vlong a, vlong p, vlong m ) {
    vlong res = 1, x = a % m;
    while ( p ) {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m; p >>= 1;
    }
    return res;
}

/***********Template Ends Here***********/

double memo[2510][2510];
char done[2510][2510];
double dp ( int t, int k ) {
    if ( t == 0 ) return 0;
    if ( k >= t ) return 0;
    if ( done[t][k] ) return memo[t][k];

    double u = t - k;
    int v = t - k;

    double res = 0;
    if ( k && v ) res += (k/u) * ( 1 + dp ( t - 2, k - 1 ) );
    if ( v && v-1 &&  v-k>0 && k )res += ( (u-k)/u * (k/(u-1)) ) * ( 2 + dp ( t - 2, k ) );
    if ( v && v-1 && v-k >0 && v-2-k >0 )res += (u-k)/u * (u-1-k-1)/(u-1) * ( 1 + dp ( t, k + 2 ) );
    if ( v && v-1 && v-k >0 )res += (u-k)/u * (1.0/(u-1)) * ( 1 + dp ( t - 2 , k ) );

    done[t][k] = 1;
    return memo[t][k] = res;
}

int main () {
    CLR(done,0);
    #ifdef forthright48
    //freopen ( "input.txt", "r", stdin );
    //freopen ( "output.txt", "w", stdout );
    #endif // forthright48

    int n, m;
    while ( scanf ( "%d %d", &n, &m ) != EOF ) {

        double res = dp ( n * m, 0 );

        printf ( "%.4lf\n", res + eps );
    }

    return 0;
}
