// ROH.cpp : Defines the entry point for the console application.
//


#include<iostream>
#include<vector>
#include<stdio.h>
#include<cstdio>
#include<map>
#include<stdlib.h>
#include<algorithm>
#include<queue>
#include<bitset>
#include<fstream>
#include<set>
#include<stack>
#include<utility>
#include<string>
#include<cstring>
#include<math.h>
using namespace std;

#define scan scanf
#define sscan sscanf_s
#define get gets
#define print printf 
#define mod 1000000007
#define ll long long
#define init ll i,j,k,l,m,n,test
#define pause system("pause")
#define inf 1000000000

char s[21000],s2[21000],s3[1000];
ll power(ll k)
{
	ll i,j;
	if(k==0)
		return 1;
	i=power(k/2);
	if(k%2)
		return i*i*2;
	else return i*i;

}
ll check(ll i,ll n, ll l)
{
	int j,k;
	k=l-1-i;
	if(k>62)
	{
		//make it one in any case
		return -1;
	}
	else
	{
		j=power(k);
		if(n>j)
			return j;
		else return -1;
	}
}
void binary(ll num)
{
    ll rem;
 
    if (num <= 1)
    {
        printf("%lld", num);
        return;
    }
    rem = num % 2;
    binary(num / 2);
    printf("%lld",rem);
}
string str;
void binary_save(ll num)
{
    ll rem;
 
    if (num <= 1)
    {
        if(num==1)
			str+='1';
		else str+='0';
        return;
    }
    rem = num % 2;
    binary_save(num / 2);
   if(rem==1)
			str+='1';
		else str+='0';
}
void add(vector<int> a,vector<int> b)
{
	vector<int> c;
	int l1,l2;
	int i,j,k,l;
	l1=a.size();
	l2=b.size();
	if(l1>l2)
	{
		for(i=0;i<l1-l2;i++)
			b.push_back(0);
	}
	else if(l2>l1)
	{
		
			for(i=0;i<l2-l1;i++)
				a.push_back(0);
		
	}
	l=a.size();
	if(l!=b.size())
		cout<<"ERROR"<<endl;
	k=0;
	for(i=0;i<l;i++)
	{
		j=k+a[i]+b[i];
		c.push_back(j%2);
		k=j/2;
	}
	c.push_back(k);
	l=0;
	for(i=c.size()-1;i>=0;i--)
	{
		if(c[i]==0 && l==0);
		else{cout<<c[i];l=1;}
	
	}
	cout<<endl;
}
int main()
{
	init;
	scan("%lld",&test);
	
	while(test--)
	{
		get(s);
		get(s);
		scan("%lld",&n);
		ll p=0;
		l=strlen(s);
		//if(l<=62)
		//{
		//	//convert to long long
		//	for(i=l-1;i>=0;i--)
		//		p=p+(ll)(s[i]-'0')*power(l-1-i);
		//	p=p+n;
		//	binary(p);
		//	printf("\n");

		//	continue;

		//}
		str="";
		binary_save(n);
		vector<int> a,b;
		for(i=l-1;i>=0;i--)
			a.push_back(s[i]-'0');
		for(i=str.length()-1;i>=0;i--)
			b.push_back(str[i]-'0');
		add(a,b);
		
		
	}
	
}