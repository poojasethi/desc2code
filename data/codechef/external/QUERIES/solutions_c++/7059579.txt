#include<bits/stdc++.h>
#define scl(x) scanf("%lld",&x)
#define sci(x) scanf("%d",&x)
#define M(a,x) memset(a,x,sizeof(a))
using namespace std;
typedef long long ll;
ll tree[1500000];
ll lazy[1500000];
inline void refresh(int node,int rs,int re) {
        if(lazy[node]) {
                tree[node]+=(re-rs+1)*lazy[node];
                if(rs!=re) {
                        lazy[2*node]+=lazy[node];
                        lazy[2*node+1]+=lazy[node];
                }
                lazy[node]=0;
        }
}
inline void update(int node,int rs,int re,int qs,int qe,ll val) {

        if(qs<=rs && re<=qe) {
                lazy[node]+=val;
                refresh(node,rs,re);
                return ;
        }
        if(rs>qe || re<qs) {
                refresh(node,rs,re);
                return ;
        }
        refresh(node,rs,re);
        update( 2*node,rs,(rs+re)/2,qs,qe,val);
        update( 2*node+1,(rs+re)/2+1,re,qs,qe,val);
        tree[node]=tree[2*node]+tree[2*node+1];
}
ll query(int node,int rs,int re, int qs, int qe) {
        if(rs>qe || re<qs) {
                return 0;
        }
        refresh(node,rs,re);
        if(qs<=rs && re<=qe) {
                return tree[node];
        }
        ll temp1=query(2*node,rs,(re+rs)/2,qs,qe);
        ll temp2=query(2*node+1,(rs+re)/2+1,re,qs,qe);
        return temp1+temp2;
}
int main()
{
        int t;scanf("%d",&t);
        while(t--)
        {
                M(tree,0);M(lazy,0);
                long long n,c;
                scanf("%lld%lld",&n,&c);
                long long p,q,d,val;
                while(c--)
                {
                        scl(d);
                        if(d==0)
                        {
                                scl(p);scl(q);scl(val);
                                update(1,0,n-1,p-1,q-1,val);
                        }
                        else
                        {
                                scl(p);scl(q);
                                printf("%lld\n",query(1,0,n-1,p-1,q-1));
                        }
                }
        }
        return 0;
}
