#include<bits/stdc++.h>
using namespace std;

#define FORI(i,b,e) for(int i=b; i<=e; i++)
#define FORD(i,b,e) for(int i=b; i>=e; i--)
#define FILL(a, v) memset(a, v, sizeof(a))
#define FOREACH(it,c) for(__typeof((c).begin()) it=((c).begin());it!=(c).end();++it)
#define mp make_pair
#define mod 1000000007
#define INF 1000000001
#define sz 100001

typedef long long LL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef pair<int, int> PII;
typedef map<int, int> MII;
typedef set<int> SI;

//**************************************** <global variable> *********************************
int tree[4*sz+1];
int arr[sz+1], n;
//******************************************* <main code> ************************************
void update(int node, int a, int b, int i, int j, int val)
{
    if(a>b || a>j || b<i)
        return ;
    if(a==b)
    {
        arr[a]+=val;
        tree[node]=arr[a];
        return ;
    }
    update(2*node, a, (a+b)/2, i, j, val);
    update(2*node+1, 1+(a+b)/2, b, i, j, val);
    tree[node]=tree[2*node]+tree[2*node+1];
}
int query(int node, int a, int b, int i, int j)
{
    if(a>b || a>j || b<i)
        return 0;
    if(a>=i && b<=j)
    {
        return tree[node];
    }
    int left=query(2*node, a, (a+b)/2, i, j);
    int right=query(2*node+1, 1+(a+b)/2, b, i, j);
    return (left+right);
}
void solve()
{
    int q;
    scanf("%d", &q);
    if(q==0)
    {
        int x, y, val;
        scanf("%d %d %d", &x, &y, &val);
        update(1, 0, n-1, x-1, y-1, val);
    }
    else
    {
        int x, y;
        scanf("%d %d", &x, &y);
        int ans=query(1, 0, n-1, x-1, y-1);
        printf("%d\n", ans);
    }
}

int main()
{
    int tc=1;
    scanf("%d", &tc);
    while(tc--)
    {
        int c;
        scanf("%d %d", &n, &c);
        while(c--)
        {
            solve();
        }
    }
}


