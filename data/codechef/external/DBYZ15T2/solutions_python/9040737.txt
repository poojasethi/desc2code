#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pi pair<int,int>
#define pl pair<long long,long long>
#define pb push_back
#define eps 1e-12
using namespace std;
ll mod=1000000007;
string s;
struct pree
{
	int nextlet[26];
	int len,sufflink;
};
int num,suff;
pree tree[100009];
vector<int> g[100009];
inline bool add_letter(int pos)
{
	int cur=suff,curlen=0;
	int let=s[pos]-'a';
	while(1)
	{
		curlen=tree[cur].len;
		if(pos-1-curlen>=0&&s[pos-1-curlen]==s[pos])
		{
			break;
		}
		cur=tree[cur].sufflink;
	}
	if(tree[cur].nextlet[let])
	{
		suff=tree[cur].nextlet[let];
		return false;
	}
	num++;
	suff=num;
	tree[num].len=tree[cur].len+2;
	tree[cur].nextlet[let]=num;
	if(tree[num].len==1)
	{
		tree[num].sufflink=2;
		g[suff].pb(tree[suff].sufflink);
		return true;
	}
	cur=tree[cur].sufflink;
	while(1)
	{
		curlen=tree[cur].len;
		if(pos-1-curlen>=0&&s[pos-1-curlen]==s[pos])
		{
			tree[num].sufflink=tree[cur].nextlet[let];
			break;
		}
		cur=tree[cur].sufflink;
	}
	g[suff].pb(tree[suff].sufflink);
	return true;
}
inline void initialize()
{
	suff=num=2;
	tree[1].len=-1;
	tree[2].len=0;
	tree[1].sufflink=1;
	tree[2].sufflink=1;
	g[1].pb(1);
	g[2].pb(1);
}
bool reached[100009];
ll ans=0,cnt[100009],sub[100009];
inline void dfs(int pos)
{
	reached[pos]=true;
	sub[pos]=cnt[pos];
	for(int i=0;i<g[pos].size();i++)
	{
		if(!reached[g[pos][i]])
		{
			dfs(g[pos][i]);
		}
		sub[pos]=sub[pos]+sub[g[pos][i]];
		if(sub[pos]>=mod)
		{
			sub[pos]=sub[pos]-mod;
		}
	}
	ll x=sub[pos]-cnt[pos];
	if(x<0)
	{
		x=x+mod;
	}
	x=(x*cnt[pos])%mod;
	ans=ans+x;
	if(ans>=mod)
	{
		ans=ans-mod;
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin>>s;
	initialize();
	for(int i=0;i<s.size();i++)
	{
		add_letter(i);
		cnt[suff]++;
	}
	for(int i=num;i>=1;i--)
	{
		cnt[g[i][0]]=cnt[g[i][0]]+cnt[i];
		if(cnt[g[i][0]]>=mod)
		{
			cnt[g[i][0]]=cnt[g[i][0]]-mod;
		}
	}
	cnt[2]=cnt[1]=0;
	for(int i=1;i<=num;i++)
	{
		if(!reached[i])
		{
			dfs(i);
		}
	}
	cout<<ans<<"\n";
}