//compile c++11 with -std=c++0x in g++
#include<bits/stdc++.h>
using namespace std;
typedef long long int LL;
#define pb push_back
#define mp make_pair
#define f first
#define sc second
#define pii pair<int,int>
#define M 1000000007
#define inf (int)(2e+9)
#define all(o) (o).begin(), (o).end()
/*#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;*/
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * (b / gcd(a, b))); }
LL max(LL a,LL b,LL c){return max(a,max(b,c));}
inline LL power(LL x,LL y)
{
    LL ans=1;
    while(y>0){
        if(y&1)
            ans=(ans*x)%M;
        x=(x*x)%M;
        y/=2;
    }
    return ans;
}
inline int read()
{
	int ret = 0,temp=1;
	int c = getchar_unlocked();
	while(c<'0' || c>'9'){
		c = getchar_unlocked();
	}
	while(c>='0' && c<='9')
	{
		ret = (ret<<3) + (ret<<1) + c - '0';
		c = getchar_unlocked();
	}
        return ret;
}
LL mulmod(LL a,LL b) {
   long double res = a;
   res *= b;
   LL c = (LL)(res / M);
   a *= b;
   a -= c * M;
   a %= M;
   if (a < 0) a += M;
   return a;
}
const int N=100005;
struct node
{
    int next[26];
    int len;
    int sufflink;
    int num;
    int sum;
};
node tree[N];
char str[N];
int num;
int suff;
LL n;
void init()
{
    suff=2;num=2;
    tree[1].len=-1;tree[1].sufflink=1;
    tree[2].len=0;tree[2].sufflink=1;
}
bool addLetter(int pos)
{
    int cur=suff,curlen=0;
    int let=str[pos]-'a';
    while(true){
        curlen=tree[cur].len;
        if(pos-1-curlen>=0 && str[pos-1-curlen]==str[pos]) break;
        cur=tree[cur].sufflink;
    }

    if (tree[cur].next[let]) {
    suff = tree[cur].next[let];
    return false;
    }

    num++;
    suff=num;
    tree[num].len=tree[cur].len+2;
    tree[cur].next[let]=num;

    if(tree[num].len==1){
      tree[num].sufflink=2;
      return true;
    }

    while(true){
      cur=tree[cur].sufflink;
      curlen=tree[cur].len;
      if(pos-1-curlen>=0 && str[pos-1-curlen]==str[pos]){
        tree[num].sufflink=tree[cur].next[let];
        break;
      }
      //printf("hello");
    }
   // tree[num].num=tree[tree[num].sufflink].num+1;
    return true;
}
int main()
{
    scanf("%s",str);
    n=strlen(str);
    init();
    LL ans=0;
    for(int i=0;i<n;i++){
      addLetter(i);
      tree[suff].num++;
    }
    for(int i=num;i>2;i--){
      tree[tree[i].sufflink].num+=tree[i].num;
    }
    for(int i=3;i<=num;i++){
      tree[i].sum=tree[i].num;
      if(tree[i].sufflink>2){
      tree[i].sum=tree[i].sum+tree[tree[i].sufflink].sum;  
      if(tree[i].sum>=M) tree[i].sum-=M;
      }
    }
    for(int i=3;i<=num;i++){
      ans=(ans+tree[i].num*1LL*tree[tree[i].sufflink].sum)%M;
    }
    printf("%lld\n",ans);
    return 0;
}
