import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;

class T22 {
	InputStream is;
	PrintWriter out;
	String INPUT = "";
	
	void solve()
	{
		PalindromicTree pt = PalindromicTree.build(ns().toCharArray());
		int mod = 1000000007;
		long[] dp = new long[pt.nodes.length];
		long ret = 0;
		long big = 8L*mod*mod;
		for(int i = pt.nodes.length-1;i >= 2;i--){
			ret += (long)pt.nodes[i].freq * dp[i];
			if(ret >= big)ret -= big;
			dp[i] += pt.nodes[i].freq;
			if(dp[i] >= mod){
				dp[i] -= mod;
			}
			dp[pt.nodes[i].link.id] += dp[i];
			if(dp[pt.nodes[i].link.id] >= mod){
				dp[pt.nodes[i].link.id] -= mod;
			}
		}
		out.println(ret%mod);
	}
	
	public static class PalindromicTree {
		public Node[] nodes; // [0]=len0, [1]=hell
		
		public static class Node
		{
			public int id, first, len, freq;
			
			public char c;
			public Node firstChild;
			public Node sibling;
			
			public Node link;

			private Node(int first, int len, char c, int id) {
				this.first = first;
				this.len = len;
				this.c = c;
				this.id = id;
				this.freq = 0;
			}
			
			public Node next(char x)
			{
				for(Node ch = this.firstChild;ch != null;ch = ch.sibling){
					if(ch.c == x)return ch;
				}
				return null;
			}
			
			public void add(Node x)
			{
				Node ch = this.firstChild;
				this.firstChild = x;
				x.sibling = ch;
			}

			@Override
			public String toString() {
				return "Node [id=" + id + ", first=" + first + ", len=" + len + ", freq=" + freq + ", c=" + c
						+ ", firstChild=" + (firstChild != null ? firstChild.id : null) + ", sibling=" + (sibling != null ? sibling.id : null)
						+ ", link=" + (link != null ? link.id : null) + "]";
			}
		}
		
		public static PalindromicTree build(char[] s)
		{
			int n = s.length;
			Node zero = new Node(-1, 0, (char)0, 1);
			Node hell = new Node(-1, -1, (char)0, 0);
			zero.link = hell;
			hell.link = hell;
			hell.add(zero);
			
			Node[] nodes = new Node[n+2];
			int p = 0;
			nodes[p++] = hell;
			nodes[p++] = zero;
			
			Node cur = zero; // current suffix palindrome
			for(int i = 0;i < n;i++){
				char x = s[i];
				while(i-cur.len-1 < 0 || s[i-cur.len-1] != x)cur = cur.link; // find xAx
				Node xax = cur.next(x); // already exists
				if(xax == null){
					// new subpalindrome
					xax = new Node(i-cur.len-1, cur.len+2, x, p);
					nodes[p++] = xax;
					cur.add(xax);
					
					// make suffix link
					if(xax.len == 1){
						xax.link = zero;
					}else{
						Node b = cur.link;
						while(true){
							while(i-b.len-1 < 0 || s[i-b.len-1] != x)b = b.link; // find xBx
							Node xbx = b.next(x);
							if(xbx != null){
								xax.link = xbx;
								break;
							}
						}
					}
				}
				xax.freq++; // increment regardless new or not
				
				cur = xax;
			}
			
			for(int i = p-1;i >= 2;i--){
				nodes[i].link.freq += nodes[i].freq;
			}
			
			PalindromicTree pt = new PalindromicTree();
			pt.nodes = Arrays.copyOf(nodes, p);
			return pt;
		}
	}
	
	void run() throws Exception
	{
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		long s = System.currentTimeMillis();
		solve();
		out.flush();
		if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
	}
	
	public static void main(String[] args) throws Exception { new T22().run(); }
	
	private byte[] inbuf = new byte[1024];
	private int lenbuf = 0, ptrbuf = 0;
	
	private int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private double nd() { return Double.parseDouble(ns()); }
	private char nc() { return (char)skip(); }
	
	private String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}
