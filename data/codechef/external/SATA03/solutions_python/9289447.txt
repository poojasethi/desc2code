#include <assert.h>
#include <memory.h>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

struct Point {
  int x, y;
  double p;
  Point() {
    x = y = 0;
    p = 0.0;
  }
  Point(int xx, int yy, int pp) {
    x = xx;
    y = yy;
    p = pp / 100.0;
  }
};

bool operator<(Point a, Point b) { return a.x * b.y < b.x * a.y; }

Point tab[1000007];

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  int n;
  scanf("%d", &n);
  rep(i, n) {
    int p1, p2, p3;
    scanf("%d%d%d", &p1, &p2, &p3);
    tab[i] = Point(p1, p2, p3);
  }

  sort(tab, tab + n);

  double area = 0;
  double ox = 0, oy = 0;
  rep(i, n) {
    area += tab[i].p * (ox * tab[i].y - oy * tab[i].x);
    ox += tab[i].p * tab[i].x;
    oy += tab[i].p * tab[i].y;
  }

  printf("%.9lf\n", -area);

#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
