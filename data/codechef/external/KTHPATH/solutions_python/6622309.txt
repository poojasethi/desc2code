#include <cstdio>
#include <cassert>
#include <vector>
#include <algorithm>

#define maxN 100010

using namespace std;

vector<int> t[maxN];
vector<int> ans;

int nC[maxN], Parent[maxN];

bool found;

void record( int s ) {
    
    while( s != -1 ) {
        ans.push_back(s);
        s = Parent[s];
    }
}


void getPath( int s, int rem, int par ) {
    rem--;

    Parent[s] = par;

    if( rem == 0 ) {
        record(s);
        found = true;
        return;
    }

    nC[s] = 0;
    for( int i = 0; i < t[s].size(); i++ ) {
        int u = t[s][i];

        if( u != par ) {
            getPath(u, rem, s);
            
            if( found ) return;
            else rem -= nC[u] + 1;

            nC[s] += nC[u] + 1;
        }
    }
}

int main( void ) {
    int T;
    scanf("%i", &T);

    while( T-- ) {
        long long N, Q;
        scanf("%lld %lld", &N, &Q);

        for( int i = 1; i <= N; i++ ) {
            t[i].clear();
            Parent[i] = -1;
            nC[i] = 0;
        }
        
        ans.clear();
        found = false;

        for( int i = 1; i <= N-1; i++ ) {
            int u, v;
            scanf("%i %i", &u, &v);

            t[u].push_back(v);
            t[v].push_back(u);
        }

        for( int i = 1; i <= N; i++ )
            sort(t[i].begin(), t[i].end());
        
        for( int i = 1; i <= N; i++ ) {

            if( Q - N <= 0 ) {
                getPath(i, Q, -1);
                break;
            }
            
            Q -= N;
        }

        for( int i = ans.size()-1; i >= 0; i-- )
            printf("%i%c", ans[i], (i == 0) ? '\n' : ' ');
    }

    return 0;
}
