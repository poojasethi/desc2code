#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <bitset>

using namespace std;


#define INF 1000000000
typedef long long int ll;
typedef vector<ll> vi;
typedef vector<vi> vii;
typedef pair<ll,ll> ii;

#define inchar getchar_unlocked
inline ll inp() {
      ll n=0, ch;
      while((ch = inchar()) < '0');
      n=(ch-'0');
      while((ch=inchar())>='0') n=(n<<3)+(n<<1)+(ch-'0');
      return n;
}


ll test,p,u,n,q;
vi child;
vector<bool> visited;
vii adj;

void dfs(ll x)
 {
   ll count = 0;
   visited[x] = true;
   for(ll i=0;i<adj[x].size();i++)
    {
      ll v = adj[x][i];
      if(!visited[v])
       {
         dfs(v);
         count += child[v];              
       }       
    }
   child[x] = count+1;    
 }
 
 void printans(ll v,ll parent)
  {
    printf(" %lld",v);
    if(p==1) return;
    p--;
    for(ll i=0;i<adj[v].size();i++)
     {
        ll x = adj[v][i];
        if(x == parent) continue;
        if(child[x] >= p)
         {
           printans(x,v);
           break;           
         }
         else
          p -= child[x];  
               
     }    
  }
 


int main() {
	
    //scanf("%lld",&test);
    test = inp();
    while(test--)
     {
          // scanf("%lld %lld",&n,&q);
           n =  inp();
           q =  inp();
           adj.assign(n+1,vi());
           for(ll i=1;i<n;i++)
            {
              ll a,b;
              //scanf("%lld %lld",&a,&b);
              a = inp();
              b = inp();
              adj[a].push_back(b);
              adj[b].push_back(a);        
            }
           for(ll i=1;i<=n;i++)
             sort(adj[i].begin(),adj[i].end()); 
           u = (q-1)/n + 1;
           p = q - (u-1)*n;   
           printf("%lld",u);
           if(p == 1)
            {
                printf("\n");
                continue;    
            }
           child.assign(n+1,0);
           visited.assign(n+1,false);
           p--;
           visited[u] = true;
           for(ll j=0;j<adj[u].size();j++)
            {
               ll v = adj[u][j];
               dfs(v);
               if(p<=child[v])
                {
                  printans(v,u);
                  printf("\n");
                  break;              
                }   
               p -= child[v];          
            }            
                  
     }
	
    //getchar();
    //getchar();
	return 0;
} 

