#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<vector>
#include<map>
#include<queue>
#include<set>
using namespace std;
typedef long long LL;
#define FOR(i,a,n) for((i)=(a);(i)<=(n);(i)+=1)
#define refresh(a) memset((a),0,sizeof(a))
#define SS(x) scanf("%s",(x))
#define p_S(x) printf("%s\n",x)
#define SI(x) scanf("%d",&(x))
#define p_I(x) printf("%d\n",x)
#define SD(x) scanf("%llf",&(x))
#define p_D(x) printf("%llf\n",x)
#define SL(x) scanf("%lld",&(x))
#define p_L(x) printf("%lld\n",x)
#define p_NL printf("\n")
#define read() freopen("input.txt","r",stdin)
#define write() freopen("output.txt","w",stdout)
#define INF 100000000
#define mod 1000000007
#define maxn 300009//3x10^5
int nChildren[maxn];
bool visited[maxn];
vector<int> adj[maxn];
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};

/*DEBUGGING FUNCTIONS*/

bool isValid(int x,int y,int n,int m){
	return x>=0 && y>=0 && x<n && y<m;
}

void debugMatrix(int X[][maxn],int n,int m)
{
	int i,j;
	FOR(i,0,n-1){
		FOR(j,0,m-1)
			printf("%3d ",X[i][j]);
		cout<<endl;
	}
}

void debugArray(int X[],int n)
{
	int i;
	FOR(i,1,n)
		cout<<X[i]<<" ";
	cout<<endl;
}

void debugVar(string preFix,int x)
{
	cout<<preFix<<" "<<x<<endl;
}
/*END OF DEBUGGING FUNCTIONS*/

void INIT(LL n){
	LL i;
	FOR(i,0,n) {
        adj[i].clear();
        nChildren [i] = 1;
        visited [i] = false;
	}
}

void sortAdjList( LL N ) {
    LL i;
    FOR(i,1,N)
        sort(adj[i].begin(), adj[i].end());
}

void DFS ( LL v ) {
    //cout<<v<<" : "<<endl;
    visited[v] = true;
    LL i, SIZE = adj[v].size();
    FOR (i, 0, SIZE - 1 ) {
        if (!visited[adj[v][i]]) {
            DFS ( adj[v][i] );
            nChildren[v] += nChildren[adj[v][i]] ;
        }
    }
}

void printPath ( LL v, LL remaining) {
    LL i, SUM = 0;
    cout<<v<<" ";
    visited[v] = true;
    if ( remaining ==0 )
        return;

    for (i=0; SUM<remaining; i++)
        SUM += (visited[adj[v][i]]) ? 0 : nChildren[adj[v][i]];

    printPath( adj[v][i-1], remaining - (SUM - nChildren[ adj[v][i-1] ] ) - 1 );
}

void SOLVE(LL N, LL Q) {
    LL i,ans=0,j, startVertex;
    startVertex = Q/N;
    if( Q%N > 0 )
        startVertex += 1;
    //cout<<startVertex<<endl;
    sortAdjList(N);
    DFS(startVertex);
    //debugArray(nChildren,N);
    LL remaining = (Q%N == 0) ? (Q - (N*(Q/N - 1)) - 1 ) : (Q - (N*(Q/N)) - 1 );
    refresh( visited );
    printPath(startVertex,remaining);
    cout<<endl;
}

int main()
{
	LL max_cases,N,Q,i,m,k,j,u,v;
	cin>>max_cases;
	while(max_cases--){
        	cin>>N>>Q;
        	INIT(N);
        	FOR(i,1,N-1) {
            		cin>>u>>v;
            		adj[u].push_back(v);
            		adj[v].push_back(u);
        	}
        	SOLVE(N,Q);
	}
	return 0;
}
