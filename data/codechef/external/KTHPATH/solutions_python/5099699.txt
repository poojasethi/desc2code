#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<string>
#include<cstring>
#include<sstream>
#include<cmath>
#include<climits>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<iterator>
#include<cassert>
 
using namespace std;
 
vector<int> graph[112345],ans;
long long int dp[112345];
int visited[112345];
 
void dfs(int v)
{
	assert(visited[v] == 0);
	visited[v]=1;
	long long int count=1LL;
 
	for(int i=0;i<graph[v].size();++i){
		if(!visited[graph[v][i]])
		{
			dfs(graph[v][i]);
			count+=dp[graph[v][i]];
			visited[graph[v][i]] = 1;
		}
	}
	dp[v]=count;
}
 
void print(int v,long long int k)
{
	printf("%d ",v);
	k--;
	visited[v]=1;
	if(k==0)
		return ;
	for(int i=0;i<graph[v].size();++i){
		if(!visited[graph[v][i]]){
			if(dp[graph[v][i]]>=k){
				print(graph[v][i],k);
				return ;
			}
			k-=dp[graph[v][i]];
		}
	}
}
 
int main()
{
	int t,n,x,y;
	long long int q;
	scanf("%d",&t);
	while(t--){
		memset(visited,0,sizeof(visited));
		ans.clear();
		scanf("%d %lld",&n,&q);
		for(int i=0;i<=n;i++){
			graph[i].clear();
			dp[i]=0;
		}
		for(int i=0;i<n-1;i++){
			scanf("%d %d",&x,&y);
			graph[x].push_back(y);
			graph[y].push_back(x);
		}
		for(int i=1;i<=n;i++)
			sort(graph[i].begin(),graph[i].end());
		int start = ceil((double)q/(double)n);
		q-=(long long int)n*(start-1);
		dfs(start);
		//ans.push_back(start);
		//printf("%d ",start);
		memset(visited,0,sizeof(visited));
		print(start,q);
		printf("\n");
	}
} 