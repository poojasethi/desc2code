#include<cstring>
#include<cstdio>
#include<vector>
#include<algorithm>     //sort
#define SIZE 100003
using namespace std;
long long int q;
long long int visited[SIZE];
vector<long long int>grid[SIZE];
vector<long long int>ans;
inline long long int scan()
{
    long long int n=0;
    char ch=getchar_unlocked();
    while(ch<'0'||ch>'9')
        ch=getchar_unlocked();
    while(ch>='0'&&ch<='9')
    {
        n=(n<<3)+(n<<1)+ch-'0';
        ch=getchar_unlocked();
    }
    return n;
}
void print(long long int n)
{
    int i=0;
    char num[20];
    do
    {
        num[i++]=n%10+'0';
        n/=10;
    }while(n);
    i--;
    while(i>=0)
        putchar_unlocked(num[i--]);
    putchar_unlocked(' ');
}
int dfs(long long int node)
{
    long long int i;
    ans.push_back(node);
    visited[node]=1;
    q--;
    if(!q)
        return 1;
    for(i=0;i<grid[node].size();i++)
        if(!visited[grid[node][i]])
            if(dfs(grid[node][i]))
                return 1;
    ans.pop_back();
    return 0;
}
int main()
{
    long long int t;
    t=scan();
    while(t--)
    {
        long long int n,i,x,y,node;
        n=scan();
        q=scan();
        memset(visited,0, sizeof(visited));
        ans.clear();
        for(i=0;i<n-1;i++)
        {
            x=scan();
            y=scan();
            grid[x].push_back(y);
            grid[y].push_back(x);
        }
        for(i=0;i<=n;i++)
            sort(grid[i].begin(),grid[i].end());
        node=(q-1)/n+1;
        q=q%n?q%n:n;
        dfs(node);
        for(i=0;i<ans.size();i++)
            print(ans[i]);
        putchar_unlocked('\n');
        for(i=0;i<=n;i++)
            grid[i].clear();
    }
    return 0;
}