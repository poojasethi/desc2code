#include<cstdio>
#include<cassert>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<vector>
#define getchar_unlocked() getc(stdin)
using namespace std;
vector<int> v[100001];
vector< pair<int,int> > e;
int sub[100001];

inline int inp()
{
    register int noRead=0;
    register char p=getchar_unlocked();
    for(;p<48 || p>57;p=getchar_unlocked());
    while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getchar_unlocked();}
    return noRead;
}

bool comp(pair<int,int> a,pair<int,int> b)
{
    if(a.first==b.first)
        return a.second<b.second;
    return a.first<b.first;
}

void reset(int n)
{
    e.clear();
    memset(sub,0,sizeof(sub));
    for(int i=1;i<=n;i++)
        v[i].clear();
}
void build_tree(int r,int pre)
{
    int i,x;
    sub[r]=1;
    for(i=0;i<v[r].size();i++)
    {
        x=v[r][i];
        if(pre!=x)
        {
            build_tree(x,r);
            sub[r]+=sub[x];
        }
    }
}

void find_path(int x,long long k,int pre)
{
    printf("%d ",x);
    k--;
    if(!k)
        return;
    int i;
    for(i=0;i<v[x].size();i++)
    {
        if(v[x][i]==pre)
            continue;
 //       printf("k=%d v=%d s=%d\n",k,v[x][i],sub[v[x][i]]);
        if(sub[v[x][i]]>=k)
        {
            find_path(v[x][i],k,x);
            return;
        }
        k-=sub[v[x][i]];
    }
}

int main()
{
    int i,j,t,n,x,y;
    long long k,r,p;
    //scanf("%d",&t);
    t=inp();
    while(t--)
    {
      // scanf("%d%d",&n,&k);
       n=inp();
       scanf("%lld",&k);
       reset(n);
       for(i=1;i<n;i++)
       {
           //scanf("%d%d",&x,&y);
           x=inp();
           y=inp();
           if(x>y)
            swap(x,y);
           e.push_back(make_pair(x,y));
       }
       sort(e.begin(),e.end(),comp);
       for(i=0;i<e.size();i++)
       {
           v[e[i].first].push_back(e[i].second);
           v[e[i].second].push_back(e[i].first);
       }
       r=ceil(k/(float)n);
       p=k-(r-1)*n;
       build_tree(r,0);
       find_path(r,p,0);
       printf("\n");
    }
    return 0;
}
