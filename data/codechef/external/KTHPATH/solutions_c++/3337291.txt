#include <iostream>
#include<vector>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#define max 100001
#define gc getchar_unlocked
#define pb push_back
#define lli long long int
using namespace std;
vector<int> adj[max];
vector<int> ans;
bool visited[max];
lli q;
inline lli scan_ll()
{
	lli n=0;char c=gc();
	while(c<'0' || c>'9')c=gc();
	while(c<='9' && c>='0')n=(n<<3)+(n<<1)+c-'0',c=gc();
	return n;
}
inline int scan()
{
	register int n=0,c=gc();
	while(c<'0' || c>'9')c=gc();
	while(c<='9' && c>='0')n=(n<<3)+(n<<1)+c-'0',c=gc();
	return n;
}
void dfs(lli u)
{	visited[u]=true;
	int l=adj[u].size();
	q--;
	for(int i=0;i<l;i++)
	{	lli v=adj[u][i];
		if(!visited[v] && q>0)dfs(v);
		if(!q){ans.pb(u+1);return;}
	}
	if(!q){ans.pb(u+1);return;}
}
int main() {
	int t,i,u,v;
	lli node,n;
	t=scan();
	while(t--)
	{	
		ans.clear();
		n=scan();q=scan_ll();
		for(i=0;i<n;i++)adj[i].clear(),visited[i]=false;
		for(i=0;i<n-1;i++)
		{	u=scan()-1;v=scan()-1;
			adj[u].pb(v),adj[v].pb(u);
		}
		for(i=0;i<n;i++)sort(adj[i].begin(),adj[i].end());
		//for(i=0;i<n;i++){for(int j=0;j<adj[i].size();j++)printf("%d ",adj[i][j]);printf("\n");}
		node=((q-1)/n)+1;
		q-=((node-1)*n);
		dfs(node-1);
		for(i=ans.size()-1;i>=0;i--)printf("%d ",ans[i]);
		printf("\n");
	}
	return 0;
}