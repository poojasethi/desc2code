#include <bits/stdc++.h>
using namespace std;
const int MAXSIZE = 1e5+8;
vector<int> g[MAXSIZE],ans;
bool visited[MAXSIZE];
int numpath[MAXSIZE];

void dfs(int u){
	if(visited[u])
		return;
	else{
		visited[u] = true;
		int size = g[u].size();
		for(int i=0;i<size;i++){
			int v = g[u][i];
			if(!visited[v]){
				dfs(v);
				numpath[u] += numpath[v];
			}
		}
	}
} 	

void generatePath(int u,int q,vector<int> &ans){
	//cout<<"u: "<<u<<" q: "<<q<<endl;
	if(visited[u])
		return;
	else if(q == 1){
		ans.push_back(u);
		return;
	}
	else{
		visited[u] = true;
		int size = g[u].size();
		int cur = 1;
		for(int i=0;i<size;i++){
			int v = g[u][i];
			if(!visited[v]){
				if(cur + numpath[v] < q)
					cur += numpath[v];
				else{
					ans.push_back(u);
					generatePath(v,q-cur,ans);
					break;
				}
			}
		}
	}
}
int main(int argc, char const *argv[])
{
	int T;
	scanf("%d",&T);
	while(T-- > 0){
		int n;
		long long q;
		scanf("%d%lld",&n,&q);
		for(int i=1;i<=n-1;i++){
			int a,b;
			scanf("%d%d",&a,&b);
			g[a].push_back(b);
			g[b].push_back(a);
		}
		for(int i=1;i<=n;i++)
			sort(g[i].begin(),g[i].end());

		long long start = (q-1)/n+1;
		long long remq = (q-1)%n+1;
		//cout<<start<<" hh "<<remq<<endl;
		for(int i=1;i<=n;i++)
			numpath[i] = 1;
		memset(visited,0,sizeof visited);
		dfs((int)start);

		// for(int i=1;i<=n;i++)
		// 	cout<<numpath[i]<<" \n"[i == n];
		memset(visited,0,sizeof visited);
		generatePath((int)start,(int)remq,ans);

		int size = ans.size();
		for(int i=0;i<size;i++)
			printf("%d ",ans[i]);
		printf("\n");

		ans.clear();
		for(int i=0;i<=n;i++)
			g[i].clear();
	}
	return 0;
}