#include<bits/stdc++.h>

using namespace std;
typedef long long LL;

int n, root;
long long Q;
vector<int> gr[100009];
LL ans[100009];
bool vis[100009];
void dfs(int curr) {
	vis[curr] = true;
	ans[curr] = 1LL;
	int adj = gr[curr].size();

	for (int i = 0; i < adj; i ++) {
		int nex = gr[curr][i];
		if (!vis[nex]) {
			dfs(nex);
			ans[curr] += ans[nex];
		}
	}
}


void solve() {
	dfs(root);

	int curr = root;

	int fin[n];
	int ind = 0;
	for (int i = 0; i <= n; i ++) {
		vis[i] = false;
	}
	LL found = 0LL;

	vis[curr] = true;
	while (true) {
		fin[ind ++] = curr;
		Q -= 1L;
		if (Q == 0)
			break;
		int adj = gr[curr].size();
		int nex = 0;
		for (int i = 0; i < adj; i ++) {
			int at = gr[curr][i];
			if (!vis[at]) {
				vis[at] = true;
				if (ans[at] < Q) {
					Q -= ans[at];
				}
				else {
					vis[at] = true;
					curr = gr[curr][i];
					break;
				}
			}
		}
		if (Q == 0)
			break;
	}

	/*for (int i = 1; i <= n; i ++)
		printf("%d = %lld\n", i, ans[i]);*/
	for (int i = 0; i < ind; i ++) {
		printf("%d ", fin[i]);
	}
	printf("\n");
}


int main() {
	int t;
	int x, y;

	scanf("%d", &t);

	while (t--) {
		scanf("%d%lld", &n, &Q);
		for (int i = 0; i <= n; i ++) {
			gr[i].clear();
			vis[i] = false;
			ans[i] = 0;
		}
		for (int i = 1; i < n; i ++) {
			scanf("%d%d", &x, &y);
			gr[x].push_back(y);
			gr[y].push_back(x);
		}
		root = Q / (LL)n;
		if (Q % (LL)n != 0LL)
			root ++;
		//printf("ROOT = %d\n", root);
		for (int i = 0; i <= n; i ++) {
			sort(gr[i].begin(), gr[i].end());
		}
		Q -= ( (LL)(root - 1) * (LL)(n) );
		solve();
	}
}