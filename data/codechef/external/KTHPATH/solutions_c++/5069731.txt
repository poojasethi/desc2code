#include<bits/stdc++.h>
#define pb(a) push_back(a)
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define ll long long
using namespace std;
vector <int> g[100001];

int stree[100001];
bool visited[100001];
vector <int> pth;
vector <pii> edges;

void dfs(int u) {
	stree[u]=1;
	visited[u]=true;
	int i,v;
	for (i=0;i<g[u].size();i++) {
		v=g[u][i];
		if (visited[v]==false) {
			dfs(v);
			stree[u]+=stree[v];
		}
	}
}

void dfs2(int u,long long req) {
	visited[u]=true;
	pth.pb(u);
	int i,v;
	ll done=0;
	req-=1;
	if (req==0) return ;
	for (i=0;i<g[u].size();i++) {
		v=g[u][i];
		if (visited[v]==false) {
			if (done+stree[v]<req) {
				done+=stree[v];
			}
			else {
				req=req-done;
				dfs2(v,req);
				break;
			}
		}
	}
}
int main() {
	int t,u,v,i,j,k,y,n;
	ll x;
	scanf("%d",&t);
	while (t--) {
		scanf("%d %lld",&n,&x);
		edges.clear();
		for (i=0;i<n-1;i++) {
			scanf("%d %d",&u,&v);
			edges.pb(mp(min(u,v),max(u,v)));
		}
		sort(edges.begin(),edges.end());
		for (i=0;i<n-1;i++) {
			u=edges[i].first;
			v=edges[i].second;
			g[u].pb(v);
			g[v].pb(u);
		}
		memset(visited,false,sizeof(visited));
		ll st=(x-1);
		st/=n;
		st+=1;
		dfs((int)st);
		pth.clear();
		memset(visited,false,sizeof(visited));
		x=x%n;
		if (x==0) x+=n;
		dfs2((int)st,x);
		y=pth.size();
		for (i=0;i<y-1;i++) printf("%d ",pth[i]);
		printf("%d\n",pth[y-1]);
		for (i=1;i<=n;i++) g[i].clear();
	}
	return 0;
}




