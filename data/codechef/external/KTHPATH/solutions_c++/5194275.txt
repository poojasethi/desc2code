#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

#define maxn 100005
#define fr first
#define se second
#define gc getchar_unlocked
#define pc putchar_unlocked

typedef pair<int,int> ii;
typedef long long ll;

vector<int> graph[maxn];
int visited[maxn],parent[maxn],lexic[maxn];
int path=2;

inline ll scan_ll()
{
	ll n=0;char c=gc();
	while(c<'0' || c>'9')c=gc();
	while(c<='9' && c>='0')n=(n<<3)+(n<<1)+c-'0',c=gc();
	return n;
}
inline int scan()
{
	register int n=0,c=gc();
	while(c<'0' || c>'9')c=gc();
	while(c<='9' && c>='0')n=(n<<3)+(n<<1)+c-'0',c=gc();
	return n;
}
inline void print(int a)
{
	char s[20];int i=0;
	do{
		s[i++]=a%10+'0';
		a/=10;
	}while(a);
	i--;
	while(i>=0)
		pc(s[i--]);
	pc(' ');
}
void dfs(int node)
{
	visited[node]=1;
	for(int i=0;i<graph[node].size();i++)
	{
		int child = graph[node][i];
		if(visited[child]==0)
		{
			parent[child]=node;
			lexic[path++]=child;
			dfs(child);
		}
	}
}
int main()
{
	int tc;
	//scanf("%d",&tc);
	tc=scan();
	while(tc--)
	{
		int n,a,b;
		ll q;
		
		path = 2;
		n=scan();
		q=scan_ll();
		for(int i=0;i<=n;i++)
		{
			graph[i].clear();
			parent[i]=0;
			visited[i]=0;
			lexic[i]=0;
		}
		//scanf("%d %lld",&n,&q);
		//vector<pair<int,int> > edges;
		vector<int> v1;
		for(int i=1;i<n;i++)
		{
			//scanf("%d %d",&a,&b);
			a=scan();
			b=scan();
			graph[a].push_back(b);
			graph[b].push_back(a);
			/*if(a<b)
			edges.push_back(ii(a,b));
			else
			edges.push_back(ii(b,a));*/
		}

		//sort(edges.begin(),edges.end());
		for(int i=1;i<=n;i++)
		{
			sort(graph[i].begin(),graph[i].end());
		}
		int start;
		if(q%n==0)
		start = q/n;
		else
		start = (q/n)+1;	
		ll k = q - (start-1)*n;
		/*int start=(q+(n-1))/n;
    ll k=q-(ll)(start-1)*n;*/
		parent[start]=0;
		lexic[1]=start;
		dfs(start);
		int end = lexic[k];
		while(end!=0)
		{
			v1.push_back(end);
			end = parent[end];
		}	
		//cout<<start<<" "<<end<<endl;
		for(int i=v1.size()-1;i>=0;i--)
		print(v1[i]);
		//printf("\n");
		pc('\n');
	}
	return 0;
}