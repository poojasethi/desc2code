#include<cstdio>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<map>
#include<limits.h>

#define il(n) scanf("%lld",&n)
#define i(n) scanf("%d",&n)
#define infy INT_MAX
#define vv vector<int>
#define pp pair<int,int>

using namespace std;
int arr[100005];
int c[100005],c1[100005],p[100005],crr[100005],z;
vector<int> v[100005];
stack<int> q1;
long long  ans[100005];

int dfs(int x,int a)
{
	int i;
	if(a<=z)
	{
		q1.push(x);
	}
	for(i=0;i<v[x].size();i++)
	{
		if(c1[v[x][i]]==0)
		{
			c1[v[x][i]]=1;
			a=dfs(v[x][i],a+1);
		}
	}
	if(a<z)
	{
		q1.pop();
	}
	return (a);
}

int main()
{
int tc;
i(tc);
while(tc--)
{
long long q2;
int i,n,a,b,x,p1,xxx=0,j;
queue<int> q;
i(n);il(q2);
p1=n; x=1;
for(i=0;i<=n;i++)
{
	v[i].clear();
	c[i]=0;c1[i]=0;
	p[i]=0;ans[i]=0;
	crr[i]=0;
}
for(i=1;i<n;i++)
{
	i(a);i(b);
	v[a].push_back(b);
	v[b].push_back(a);
}
for(i=1;i<=n;i++)
{
	sort(v[i].begin(),v[i].end());
}
c[1]=1;
q.push(1);
while(!q.empty())
{
	x=q.front();
	for(i=0;i<v[x].size();i++)
	{
		if(c[v[x][i]]==0)
		{
			c[v[x][i]]=1;
			p[v[x][i]]=x;
			q.push(v[x][i]);
		}
	}
	q.pop();
	arr[p1]=x;
	p1=p1-1;
}
for(i=1;i<=n;i++)
{
	x=arr[i];
	if((v[x].size()==1)&&(x!=1))
		ans[x]=1;
	else
	{
		long long val=0;
		for(j=0;j<v[x].size();j++)
			val+=ans[v[x][j]];
		    ans[x]=val+1;
	}
}
x=q2/ans[1];
if(q2%ans[1]!=0)
x=x+1;
z=q2%ans[1];
if(z==0)
z=ans[1];
c1[x]=1;
dfs(x,1);
int as=1;
while(!q1.empty())
{
	x=q1.top();
	crr[as]=x;
	as=as+1;
	q1.pop();
}
for(i=as-1;i>=1;i--)
cout<<crr[i]<<" ";
cout<<"\n";
}
return 0;
}


