#include <iostream>
#include <cassert>
#include <vector>
#include <cstdio>
#include <algorithm>
using namespace std;

#define maxn 100005

vector<int>v[maxn];
int st[maxn],sp,u[maxn],N,T,i,j,x,y,was[maxn],avail;
long long K;

bool dfs(int k){
	st[++sp]=k;u[k]=1;--K;
	if(!K){
		for(int i=1;i<sp;i++)printf("%d ",st[i]);
		printf("%d\n",st[sp]);
		return true;
	}else for(int j=0;j<v[k].size();j++)if(!u[v[k][j]]&&dfs(v[k][j]))break;
	--sp;
	return false;
}

void DFS(int k){
	was[k]=1;
	++avail;
	for(int j=0;j<v[k].size();j++)
		if(!was[v[k][j]])
			DFS(v[k][j]);
}

int main (int argc, char * const argv[]) {
	ios_base::sync_with_stdio(0);
	cin>>T;
	for(;T;T--){
		for(avail=0,i=1;i<=N;i++)u[i]=was[i]=0,v[i].clear();
		cin>>N>>K;
		for(i=1;i<N;i++){
			cin>>x>>y;
			v[x].push_back(y);
			v[y].push_back(x);
			assert(1<=x&&x<=N&&1<=y&&y<=N);
		}
		DFS(1);
		assert(avail==N);
		for(i=1;i<=N;i++)sort(v[i].begin(),v[i].end());
		for(i=1;i<=N;i++)if(K>N)K-=N;else{
			dfs(i);
			break;
		}
		sp=0;
	}
    return 0;
}