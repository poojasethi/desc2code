#include<bits/stdc++.h>
 
using namespace std;
 
 
int cnt=0;
void computeLPSArray(char *pat, int M, int *lps);
 
void KMPSearch(char *pat, char *txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
 
    // create lps[] that will hold the longest prefix suffix
    // values for pattern
    int *lps = (int *)malloc(sizeof(int)*M);
    int j  = 0;  // index for pat[]
 
    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);
 
    int i = 0;  // index for txt[]
    while (i < N)
    {
        if (pat[j] == txt[i])
        {
            j++;
            i++;
        }
 
        if (j == M)
        {
            //printf("Found pattern at index %d \n", i-j);
            cnt++;
            j = lps[j-1];
        }
 
        // mismatch after j matches
        else if (i < N && pat[j] != txt[i])
        {
            // Do not match lps[0..lps[j-1]] characters,
            // they will match anyway
            if (j != 0)
                j = lps[j-1];
            else
                i = i+1;
        }
    }
    free(lps); // to avoid memory leak
}
 
void computeLPSArray(char *pat, int M, int *lps)
{
    int len = 0;  // length of the previous longest prefix suffix
    int i;
 
    lps[0] = 0; // lps[0] is always 0
    i = 1;
 
    // the loop calculates lps[i] for i = 1 to M-1
    while (i < M)
    {
        if (pat[i] == pat[len])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else // (pat[i] != pat[len])
        {
            if (len != 0)
            {
                // This is tricky. Consider the example
                // AAACAAAA and i = 7.
                len = lps[len-1];
 
                // Also, note that we do not increment i here
            }
            else // if (len == 0)
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
 
// Driver program to test above function
int main()
{
    char A[100007], B[100007];
    int kase;
    scanf("%d",&kase);
 
    gets(A);
 
    for (int kk=1; kase--; ++kk)
    {
        cnt=0;
 
        gets(A);
        gets(B);
 
        int x = 0;
        for ( int i=0; A[i]; ++i )
        {
            if ( A[i] == ' ' )
            {
 
            }
            else
            {
                A[x++] = A[i];
            }
        }
        A[x++] = '\0';
 
        x = 0;
        for ( int i=0; B[i]; ++i )
        {
            if ( B[i] == ' ' )
            {
 
            }
            else
            {
                B[x++] = B[i];
            }
        }
        B[x++] = '\0';
        char *txt, *pat;
        txt=A, pat=B;
        KMPSearch(pat, txt);
 
        printf("Case %d: %d\n",kk,cnt);
    }
    return 0;
}
 