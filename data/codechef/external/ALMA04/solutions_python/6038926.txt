import java.util.Random;
import java.util.Scanner;

public class Main {
    static long mod = 1000000007;

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int T = input.nextInt();
        for (int t=0; t<T; t++) {
//Random random = new Random();
//int N = random.nextInt(10000)+5;
//long a = random.nextInt(2000000000)-1000000000;
//long b = random.nextInt(2000000000)-1000000000;
//long c = random.nextInt(2000000000)-1000000000;
//long d = random.nextInt(2000000000)-1000000000;
//long e = random.nextInt(2000000000)-1000000000;
//long t1 = random.nextInt(2000000000)-1000000000;
//long t2 = random.nextInt(2000000000)-1000000000;
//long t3 = random.nextInt(2000000000)-1000000000;
//long t4 = random.nextInt(2000000000)-1000000000;
            int N = input.nextInt();
            if (N < 5) throw new RuntimeException();
            long a = input.nextInt();
            long b = input.nextInt();
            long c = input.nextInt();
            long d = input.nextInt();
            long e = input.nextInt();
            long t1 = input.nextInt();
            long t2 = input.nextInt();
            long t3 = input.nextInt();
            long t4 = input.nextInt();
            long t5 = (a*t4+b*t3+c*t2+d*t1+e)%mod;
            long[][] A = new long[][] {
                {a+1, b-a, c-b, d-c, -d},
                {1, 0, 0, 0, 0},
                {0, 1, 0, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 1, 0}
            };
            long[][] B = pow(A, N-5);
            long answer = B[0][0]*t5;
            answer %= mod;
            answer += B[0][1]*t4;
            answer %= mod;
            answer += B[0][2]*t3;
            answer %= mod;
            answer += B[0][3]*t2;
            answer %= mod;
            answer += B[0][4]*t1;
            answer %= mod;
            if (answer < 0) {
                answer += mod;
            }
//if (answer != solve(a,b,c,d,e,t1,t2,t3,t4,N)) {
//    System.out.println("BUG");
//    System.out.println(answer);
//    System.out.println(solve(a,b,c,d,e,t1,t2,t3,t4,N));
//}
            System.out.println(answer);
        }
    }

    static long solve(long a, long b, long c, long d, long e, long t1, long t2, long t3, long t4, long N) {
        for (int n=5; n<=N; n++) {
            long t5 = ((a*t4)%mod+(b*t3)%mod+(c*t2)%mod+(d*t1)%mod+e)%mod;
            t1 = t2;
            t2 = t3;
            t3 = t4;
            t4 = t5;
        }
        if (t4 < 0) {
            t4 += mod;
        }
        return t4;
    }

    static long[][] pow(long[][] A, int exp) {
        long[][] result = {
            {1,0,0,0,0},
            {0,1,0,0,0},
            {0,0,1,0,0},
            {0,0,0,1,0},
            {0,0,0,0,1}
        };
        long[][] pow = A;
        while (exp > 0) {
            if ((exp&1) != 0) {
                result = multiply(result, pow);
            }
            pow = multiply(pow, pow);
            exp >>= 1;
        }
        return result;
    }

    static long[][] multiply(long[][] A, long[][] B) {
        long[][] C = new long[5][5];
        for (int x=0; x<5; x++) {
            for (int y=0; y<5; y++) {
                for (int k=0; k<5; k++) {
                    C[x][y] += A[x][k]*B[k][y];
                    C[x][y] %= mod;
                }
            }
        }
        return C;
    }

}
