// All important imports
 
import static java.lang.System.in;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Queue;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.Vector;
 
 
/**
 * 
 * @author Mustafa Filmwala
 * Built using Netbeans IDE 8.0.1
 */
 
 
public class Main{
    
        public static int MOD=1000000007;
        public static void solve(int tc) throws IOException
        {  
            long a,b,c,n,k,d,e,t,s,ff,f;
            long temp;
            long ans[]=new long[5];
            n=nl();
            a=nl();b=nl();c=nl();d=nl();e=nl();ans[1]=nl();ans[2]=nl();ans[3]=nl();ans[4]=nl();
            if(n<=4)out.println(ans[(int)n]);
            else out.println((nth(n,d,c,a,b,e,ans)+MOD)%MOD);
            
        }
        
     public static long[][] multiply(long[][] a , long[][] b)
{
    long[][] temp=new long[5][5];
    for(int i = 0 ; i < 5 ; i++)
        for(int j = 0 ; j < 5 ; j++)
        {
            temp[i][j] = 0;
            for(int k = 0 ; k < 5 ; k++){
                temp[i][j] = (temp[i][j] + a[i][k] *b[k][j]%MOD)%MOD;
                
            }
        }
    return temp;
}
     
    public static long nth(long n,long d,long c,long ae,long b,long e,long ans[])
{
    
    long[][] a=new long[5][5];
    a[0][0] = ae ; a[0][1] = b ; a[0][2] =c ; a[0][3]= d; a[0][4]= e;
    a[1][0] = 1 ; a[1][1] = 0 ; a[1][2] = 0 ; a[1][3]= 0;
    a[2][0] = 0 ; a[2][1] = 1 ; a[2][2] =0 ; a[2][3]= 0;
    a[3][0] = 0 ; a[3][1] = 0 ; a[3][2] = 1 ; a[3][3]= 0;
    a[4][4]=1;
    n-=4;
    if(n>1)
    a=matexpo(a,n-1);
    //out.println(Arrays.deepToString(a));
    return ((a[0][0]*ans[4])%MOD+(a[0][1]*ans[3]%MOD)+(a[0][2]*ans[2])%MOD+(a[0][3]*ans[1])%MOD + (a[0][4])%MOD)%MOD;
}
      public static long[][] matexpo(long mat[][], long exponent) {
		long result[][] =mat;
		while (exponent > 0) {
			if ((exponent % 2) == 1) {
			result = multiply(result,mat);
			}
			mat = multiply(mat,mat);
			exponent = exponent >> 1;
		}
		return result;
	}
 
        
    
  
        static String TESTCASES;
        static PrintWriter out;
	public static void main(String[] args) throws Exception {
                long endTime,startTime=System.currentTimeMillis();
                
                out=new PrintWriter(System.out);
                InputStream myinp=System.in;
                init(myinp);
                int tc=ni();
                for(int testno=1;testno<=tc;testno++)
                {
                   solve(testno); 
                }
               
                out.close();
                endTime=System.currentTimeMillis();
                
                  }
        
        static InputStream is;
        static BufferedReader brr;
        public static void init(InputStream input) {
        is=input;
        brr=new BufferedReader(new InputStreamReader(input));
        }
    	
	
	protected static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	protected static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
        
        protected static String readline() throws IOException
        {
            return brr.readLine();
        }
                
	
	
	// extras
	protected static double nd() { return Double.parseDouble(ns()); }
	protected static char nc() { return (char)skip(); }
	protected static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	protected static int skip() { 
            int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; 
        }
        
        
	protected static String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	protected static char[] nca(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	
	protected static int[] nia(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
        
        protected static int[][] niaindex(int n)
        {
                int ea[][]=new int[n][2];
                for(int i=0;i<n;i++)
                {
                    ea[i][0]=ni();
                    ea[i][1]=i;
                }
                return ea;
        }
        
        protected static long[] nla(int n)
	{
		long[] a = new long[n];
		for(int i = 0;i < n;i++)a[i] = nl();
		return a;
	}
        
        protected static long[][] nlaindex(int n)
        {
                long ea[][]=new long[n][2];
                for(int i=0;i<n;i++)
                {
                    ea[i][0]=ni();
                    ea[i][1]=i;
                }
                return ea;
        }
        
        protected static String[] nsa(int n)
	{
		String[] a = new String[n];
		for(int i = 0;i < n;i++)a[i] = ns();
		return a;
	}
        
        protected static double[] nda(int n)
	{
		double[] a = new double[n];
		for(int i = 0;i < n;i++)a[i] = nd();
		return a;
	}
	
	protected static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
        
	
	protected static long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
        
        
        // Outputs
        public static void pln(){out.println();}
        public static void ps(String s){out.print(s);}
        public static void pi(int s){out.print(s);}
        public static void pl(long s){out.print(s);}
        public static void pd(double s){out.print(s);}
        public static void psp(){out.print(" ");}
        public static void parr(int s[]){out.println(Arrays.toString(s));}
        public static void parr(String s[]){out.println(Arrays.toString(s));}
        public static void parr(long s[]){out.println(Arrays.toString(s));}        
        public static void parr2(int s[][]){for(int i=0;i<s.length;i++)out.println(Arrays.toString(s[i]));}
        public static void parr2(long s[][]){for(int i=0;i<s.length;i++)out.println(Arrays.toString(s[i]));}
        public static void parr2(String s[][]){for(int i=0;i<s.length;i++)out.println(Arrays.toString(s[i]));}
 
}
   