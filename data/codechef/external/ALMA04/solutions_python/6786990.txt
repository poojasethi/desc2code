import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.InputMismatchException;


class ChotaBheemandSequence {
	void matrix_multi(long temp[][],long ans[][],long pow[][]){
		int i,j,k;
		for(i=0;i<5;i++){
			for(j=0;j<5;j++){
				temp[i][j]=0;
				for(k=0;k<5;k++){
					temp[i][j]+=ans[i][k]*pow[k][j];
					temp[i][j]%=1000000007;
				}
			}
		}
		for(i=0;i<5;i++) for(j=0;j<5;j++) ans[i][j]=temp[i][j];
	}
	
	long fibo(long n,long a,long b,long c,long d,long e,long t1,long t2,long t3,long t4){
		n-=4;
		long pow[][]={{a,b,c,d,1},{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,0,1}};
		long ans[][]={{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,1}};
		long temp[][]=new long[5][5];
		while(n>0){
			if((n&1)==1) matrix_multi(temp,ans,pow);
			matrix_multi(temp,pow,pow);
			n/=2;
		}
		return (t4*ans[0][0]%1000000007+t3*ans[0][1]%1000000007+t2*ans[0][2]%1000000007+t1*ans[0][3]%1000000007+e*ans[0][4]%1000000007)%1000000007;
	}
	
	
	public static void main(String arg[])throws Exception{
		PrintWriter pr=new PrintWriter(System.out,true);
		InputReader in=new InputReader(System.in);
		ChotaBheemandSequence ob=new ChotaBheemandSequence();
	int t=in.readInt(),m=1000000007;
	while(t-->0) pr.println(ob.fibo(in.readInt(),(m+in.readInt())%m,(m+in.readInt())%m,(m+in.readInt())%m,(m+in.readInt())%m,(m+in.readInt())%m,(m+in.readInt())%m,(m+in.readInt())%m,(m+in.readInt())%m,(m+in.readInt())%m));
	}
}
class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[102400];
    private int curChar;
    private int numChars;
   
    public InputReader(InputStream stream) {
            this.stream = stream;
    }
    public final int read() {
            if (numChars == -1)
                    throw new InputMismatchException();
            if (curChar >= numChars) {
                    curChar = 0;
                    try {
                            numChars = stream.read(buf);
                    } catch (IOException e) {
                            throw new InputMismatchException();
                    }
                    if (numChars <= 0)
                            return -1;
            }
            return buf[curChar++];
    }
    public final int readInt() {
            int c = read();
            while (isSpaceChar(c))
                    c = read();
            int sgn = 1;
            if (c == '-') {
                    sgn = -1;
                    c = read();
            }
            int res = 0;
            do {
                    if (c < '0' || c > '9')
                            throw new InputMismatchException();
                    res *= 10;
                    res += c - '0';
                    c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
    }
    public final long readLong() {
            int c = read();
            while (isSpaceChar(c))
                    c = read();
            int sgn = 1;
            if (c == '-') {
                    sgn = -1;
                    c = read();
            }
            long res = 0;
            do {
                    if (c < '0' || c > '9')
                            throw new InputMismatchException();
                    res *= 10;
                    res += c - '0';
                    c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
    }
    public final String readString() {
            int c = read();
            while (isSpaceChar(c))
                    c = read();
            StringBuilder res = new StringBuilder();
            do {
                    res.appendCodePoint(c);
                    c = read();
            } while (!isSpaceChar(c));
            return res.toString();
    }
    public final  static boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    public final String next() {
            return readString();
    }
}