#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
#include <set>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <sstream>
#include <ctime>
#include <iomanip>
#include <complex>
#include <utility>
#include <numeric>
#include <bitset>
#include <functional>
#include <cassert>
#include <string>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <algorithm>

using namespace std;

typedef long long LL;
typedef vector < int > vi;
typedef vector < vi > vvi;
typedef vector < LL > vLL;

#define fastcpp ios_base::sync_with_stdio(false); cin.tie(0);
#define gc getchar_unlocked
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define tr(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define SET(A,x) memset(A,x,sizeof(A))
#define sz(a) (int)(a.size()) 
#define s(a) scanf("%d",&a)

const int MAXN = (int)(1e5 + 9);
const int MOD  = (int)(1e9 + 7);
const int INF  = 0x3f3f3f3f;
const LL INFL  = 0x3f3f3f3f3f3f3f3fLL;

/* inline int inp(){
	int n = 0;
	int c = gc();
	int sign = 1;

	while(c != '-' && (c < '0' || c > '9')){
		c = gc();
	}

	if(c == '-') {
	   sign = -1;
	   c = gc();
	}

	while( c >= '0' && c <= '9' ){
		n = (n << 3) + (n << 1) + (c - '0');
		c = gc();		
	}

	return (n * sign);
} */

int N,tc;
int a,b,c,d,e;
int f1,f2,f3,f4;
LL base[5][5];
LL A[5][5];

inline void init(){
	memset(base,0LL,sizeof(base));
	base[0][0] = a;
	base[0][1] = b;
	base[0][2] = c;
	base[0][3] = d;
	base[0][4] = 1LL;

	base[1][0] = base[2][1] = base[3][2] = base[4][4] = 1LL; 
}

inline void mul(LL A[5][5],LL B[5][5]){
	LL res[5][5];
	memset(res,0LL,sizeof(res));

	for(int i = 0;i < 5;++i){
		for(int j = 0;j < 5;++j){
			LL sum = 0LL;
			for(int k = 0;k < 5;++k){
				sum = sum + ( ((A[i][k] % MOD) * (B[k][j] % MOD)) % MOD );
				if(sum >= MOD) sum = sum % MOD;
			}
			res[i][j] = sum;
		}
	}


	for(int i = 0;i < 5;++i){
		for(int j = 0;j < 5;++j){
			A[i][j] = (res[i][j] % MOD);
		}
	}
}

inline void unity(LL A[5][5]){
	for(int i = 0;i < 5;++i){
		for(int j = 0;j < 5;++j){
			A[i][j] = (i == j) ? 1LL : 0LL;
		}
	}
}

inline void POW(LL A[5][5],int exp){
	LL res[5][5];
	unity(res);

	while(exp){
		if(exp & 1) mul(res,base);
		mul(base,base);
		exp = exp >> 1;
	}

	for(int i = 0;i < 5;++i){
		for(int j = 0;j < 5;++j){
			A[i][j] = (res[i][j] % MOD);
		}
	}
}

inline void input(){
	s(N);
	s(a); s(b); s(c); s(d); s(e);
	if(a < 0) a = (a + MOD) % MOD;
	if(b < 0) b = (b + MOD) % MOD;
	if(c < 0) c = (c + MOD) % MOD;
	if(d < 0) d = (d + MOD) % MOD;
	if(e < 0) e = (e + MOD) % MOD;   
	s(f1); s(f2); s(f3); s(f4);	
	
	if(f1 < 0) f1 = (f1 + MOD) % MOD;
	if(f2 < 0) f2 = (f2 + MOD) % MOD;
	if(f3 < 0) f3 = (f3 + MOD) % MOD;
	if(f4 < 0) f4 = (f4 + MOD) % MOD;
	init();
}

inline LL addmod(LL A,LL B){
	LL ans = ((A % MOD) + (B % MOD)) % MOD;
	return ans;
}

inline void go(){
	POW(A,N - 4);
	LL ans = 0LL;
	ans = addmod(f4 * A[0][0],f3 * A[0][1]);
	ans = addmod(ans,f2 * A[0][2] * 1LL);
	ans = addmod(ans,f1 * A[0][3] * 1LL);
	ans = addmod(ans,e * A[0][4] * 1LL);
	while(ans >= MOD) ans = ans % MOD;
	printf("%lld\n",ans);  
}

int main(){
	s(tc);
	while(tc--){
		input();
		go();
	}
	return 0;
}
