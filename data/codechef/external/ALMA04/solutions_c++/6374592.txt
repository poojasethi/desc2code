//CodeChef--ALMA04--MatrixExponentiation
#include<bits/stdc++.h>
#define MAX 7
#define MOD 1000000007

using namespace std;

typedef long long int lli;

class Matrix{
	
	private :
		
	lli mat[MAX][MAX];
	lli row,col;
	
	public :
		
	Matrix(lli row,lli col){
		
		memset(mat,0,sizeof mat);
		this->row=row;
		this->col=col;
		
	}	
	
	Matrix(lli arr[MAX][MAX],lli row,lli col){
		
		lli i,j;
	
		
		this->row=row;
		this->col=col;
		
		memset(mat,0,sizeof mat);
		
		for(i=0;i<row;i++)
		  for(j=0;j<col;j++)
		    this->mat[i][j]=(arr[i][j]);
		
	}	
	
	Matrix mult(Matrix B){
		
		Matrix ans(this->row,B.col);
		
		lli i,j,k;
		for(i=0;i<this->row;i++)	
			for(j=0;j<B.col;j++)
			  for(k=0,ans.mat[i][j]=0;k<this->col;k++)
			    ans.mat[i][j]=((ans.mat[i][j]+this->mat[i][k]*B.mat[k][j])%MOD+MOD)%MOD;
			    
		return ans;	    
				  		
	}
	
	Matrix fast_expo(lli expo){
		
		if(expo==1) return *this;
		
		Matrix ans=fast_expo(expo/2);
		
		ans=ans.mult(ans);
		
	    if(expo%2==0)
	      return ans;
	      
	    else{
	    	
	    	ans=ans.mult(*this);
	    	return ans;
	    	
		}  
			
	}	
	
	lli get(lli x,lli y){ return (mat[x][y]+MOD)%MOD; }

    void display(){
    	
    	/*
		to be used for debugging purpose only
		*/
		
		cout<<"\nMatrix is as follows :- \n";
		for(lli i=0;i<row;i++){
			
			for(lli j=0;j<col;j++)
			  cout<<mat[i][j]<<" ";
			  
			cout<<"\n";	
			
		}
		
    	
	}

};  

int main(void){
	
    lli testCases,temp1[MAX][MAX],query,i,temp2[MAX][MAX];
    
    lli F[6],constant[6];
    
    scanf("%lld",&testCases);
    while(testCases--){
    	
    	scanf("%lld",&query);
    
        for(i=0;i<5;i++){
        
		  scanf("%lld",&constant[i]);      
		  constant[i]=(constant[i]+MOD)%MOD; 
		   
		}
		
		for(i=0;i<4;i++)
		  scanf("%lld",&F[i]);  
        
        if(query<=4)
         printf("%lld\n",F[query-1]);
         
        else{	
			
			memset(temp1,0,sizeof temp1);
			memset(temp2,0,sizeof temp2);			        	
        	
        	for(i=0;i<4;i++)
        	  temp1[0][i]=constant[i];
        	  
        	temp1[0][4]=1;  
        	
        	for(i=1;i<4;i++)
        	  temp1[i][i-1]=1;
        	
        	temp1[4][4]=1;
        	
        	for(i=0;i<4;i++)
        	  temp2[i][0]=F[3-i];
        	  
        	temp2[4][0]=constant[4]; 
							          	
        	Matrix transformationMatrix(temp1,5,5),knownMatrix(temp2,5,1);
        	query-=4;
                			    	
        	transformationMatrix=transformationMatrix.fast_expo(query);
        				
			transformationMatrix=transformationMatrix.mult(knownMatrix);
        	
        	printf("%lld\n",transformationMatrix.get(0,0));
        	        	
		}   
		    	
	}
	
	return 0;
	
}