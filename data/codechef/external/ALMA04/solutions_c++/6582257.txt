#include<stdio.h>
#define MOD 1000000007
typedef long long ll;
void multiply(ll a[5][5],ll b[5][5],ll c[5][5])
{
	ll d[5][5];
	for(int i=0;i<5;i++)
	for(int j=0;j<5;j++)
	{
		d[i][j]=0;
		for(int k=0;k<5;k++)
		{
			d[i][j]=d[i][j]+a[i][k]*b[k][j];
			d[i][j]%=MOD;
			d[i][j]+=MOD;
			d[i][j]%=MOD;
		}
	}
	for(int i=0;i<5;i++)
	for(int j=0;j<5;j++)
		c[i][j]=d[i][j];
}
void exponent(ll result[5][5],ll trans[5][5],ll power)
{
	while(power)
	{
		if(power&1)
		{
			multiply(result,trans,result);		//Multiply result with transformation matrix and store it in result
		//	power--;
		}


			multiply(trans,trans,trans);		//Multiply result with result (result square) and store it in result
			power/=2;

	}
}
int main()
{
	ll test,a,b,c,d,e,t0,t1,t2,t3,n,ans;
	scanf("%lld",&test);
	while(test--)
	{
		ans=0;
		scanf("%lld",&n);
		scanf("%lld%lld%lld%lld%lld%lld%lld%lld%lld",&a,&b,&c,&d,&e,&t0,&t1,&t2,&t3);

		a=(a+MOD)%MOD;
		b=(b+MOD)%MOD;
		c=(c+MOD)%MOD;
		d=(d+MOD)%MOD;
		e=(e+MOD)%MOD;
		t0=(t0+MOD)%MOD;
		t1=(t1+MOD)%MOD;
		t2=(t2+MOD)%MOD;
		t3=(t3+MOD)%MOD;
/*
		if(n<=4)
		{
			if(n==1)
				printf("%lld\n",t0);
			else if(n==2)
				printf("%lld\n",t1);
			else if(n==3)
				printf("%lld\n",t2);
			else if(n==4)
				printf("%lld\n",t3);
			continue;
		}
		*/
		ll trans[5][5]= {
					{a,b,c,d,1},
					{1,0,0,0,0},
					{0,1,0,0,0},
					{0,0,1,0,0},
					{0,0,0,0,1},
				};
		ll result[5][5]={
					{1,0,0,0,0},
					{0,1,0,0,0},
					{0,0,1,0,0},
					{0,0,0,1,0},
					{0,0,0,0,1},
				};
		ll initial[5]={t3,t2,t1,t0,e};
		exponent(result,trans,n-4);		//Tried with n-4 as well and with n-2
		for(int i=0;i<5;i++)
		{
			ans=ans+(result[0][i]*initial[i])%MOD;
			ans%=MOD;
			//ans+=MOD;
			//ans%=MOD;
		}
		if(ans<0)
			ans+=MOD;
		printf("%lld\n",ans);
	}
}
