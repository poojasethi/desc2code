#include <iostream>
using namespace std;
void swap(long int* a,long  int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
 
/* This function takes last element as pivot, places the pivot element at its
   correct position in sorted array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right of pivot */
int partition (long int arr[],long  int l,long int h)
{
    int x = arr[h];    // pivot
    int i = (l - 1);  // Index of smaller element
 
    for (int j = l; j <= h- 1; j++)
    {
        // If current element is smaller than or equal to pivot 
        if (arr[j] <= x)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);  // Swap current element with index
        }
    }
    swap(&arr[i + 1], &arr[h]);  
    return (i + 1);
}
 
/* arr[] --> Array to be sorted, l  --> Starting index, h  --> Ending index */
void quickSort(long int arr[], long int l,long int h)
{
    if (l < h)
    {
        int p = partition(arr, l, h); /* Partitioning index */
        quickSort(arr, l, p - 1);
        quickSort(arr, p + 1, h);
    }
}
int main() {
	// your code goes here
	int t;
	long int *a,i,n,*b;
	cin>>t;
	while(t-->0)
	{
	    cin>>n;
	    a=new long int[n];
	    b=new long int[n];
	    for(i=0;i<n;i++)
	    cin>>a[i];
	    quickSort(a,0,n-1);
	    for(i=0;i<n/2;i++)
	    cout<<a[i]<<" "<<a[n-1-i]<<" ";
	    if(n%2!=0)
	    cout<<a[n/2];
	    cout<<endl;
	}
	return 0;
}
