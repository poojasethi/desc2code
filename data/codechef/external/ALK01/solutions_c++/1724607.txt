#include <iostream>
#include <cmath>
#include <algorithm>
#include <limits>
#include <vector>
#include <bitset>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <time.h>
#include <map>
#include <stack>
#include <string>
using namespace std;
#define LL long long
#define ULL unsigned long long
#define LD long double
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(x) ((x)<0?-(x):(x))
#define si(n) scanf("%d",&n)
#define sf(n) scanf("%f",&n)
#define ss(n) scanf("%s",n)
#define pnl printf("\n")
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define FORR(i,n) for(int i=(n);i>=0;i--)
#define DB(x) cout<<"\n"<<#x<<" = "<<(x)<<"\n";
#define CL(a,b) memset(a,b,sizeof(a))
#define GOLD ((1+sqrt(5))/2)
const double PI=3.14159265358979323846264338327950288419716939937510582097494459230;
void swaps (char *x,char *y){char temp;temp=*x;*x=*y;*y=temp;}
void swapi(int *a,int *b){int temp;temp=*a;*a=*b;*b=temp;}
ULL gcd(ULL a,ULL b){if(a==0)return b;if(b==0)return a;if(a==1||b==1)return 1;
if(a==b)return a;if(a>b)return gcd(b,a%b);else return gcd(a,b%a);}
LL cnt;
void merge(int x[],int l,int m,int r)
{
	int size=r-l+1;
	int tmp[size];
	int left_end=l;
	int right_end=m+1;
	int j=0;
	while(left_end<=m&&right_end<=r)
	{
		if(x[left_end]<=x[right_end])
		{
			tmp[j++]=x[left_end];
			left_end++;
		}
		
		else
		{
			cnt+=m-left_end+1;
			tmp[j++]=x[right_end];
			right_end++;
		}
	}
	FOR(i,left_end,m+1)
	{
		tmp[j++]=x[i];
	}
	FOR(i,right_end,r+1)
	{
		tmp[j++]=x[i];
	}
	FOR(i,0,j)
	{
		x[l+i]=tmp[i];
	}
}
void mergesort(int x[],int l,int r)
{
	if(l<r)
	{
		int m=(l+r)/2;
		mergesort(x,l,m);
		mergesort(x,m+1,r);
		merge(x,l,m,r);
	}
}
int main()
{
   int a;
   si(a);
   while(a--)
   {
	   int n;
	   si(n);
	   int b[n+1];
	   int a[n+1];
	   int tmp;
	   FOR(i,0,n)
	   {
		   si(a[i]);
		   b[a[i]]=i+1;
	   }
	   cnt=0;
	   FOR(i,0,n)
	   {
		si(tmp);
		a[i]=b[tmp];
	   }
	   mergesort(a,0,n-1);
	   cout<<cnt<<endl;
   }
   return 0;
}