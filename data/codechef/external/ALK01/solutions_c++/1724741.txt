#include <iostream>
#include <cmath>
#include <algorithm>
#include <limits>
#include <vector>
#include <bitset>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <time.h>
#include <map>
#include <stack>
#include <string>
using namespace std;
#define LL long long
#define ULL unsigned long long
#define LD long double
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(x) ((x)<0?-(x):(x))
#define si(n) scanf("%d",&n)
#define sf(n) scanf("%f",&n)
#define ss(n) scanf("%s",n)
#define pnl printf("\n")
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define FORR(i,n) for(int i=(n);i>=0;i--)
#define DB(x) cout<<"\n"<<#x<<" = "<<(x)<<"\n";
#define CL(a,b) memset(a,b,sizeof(a))
#define GOLD ((1+sqrt(5))/2)
const double PI=3.14159265358979323846264338327950288419716939937510582097494459230;
void swaps (char *x,char *y){char temp;temp=*x;*x=*y;*y=temp;}
void swapi(int *a,int *b){int temp;temp=*a;*a=*b;*b=temp;}
ULL gcd(ULL a,ULL b){if(a==0)return b;if(b==0)return a;if(a==1||b==1)return 1;
if(a==b)return a;if(a>b)return gcd(b,a%b);else return gcd(a,b%a);}
using namespace std;
inline int inp()
    {
    int noRead=0;
    char p=getchar_unlocked();
    for(;p<33;){p=getchar_unlocked();};
    while(p>32)
    {
    noRead = (noRead << 3) + (noRead << 1) + (p - '0');
    p=getchar_unlocked();
    }
    return noRead;
    };
LL cnt;
void merge(int x[],int low,int middle,int high)
{
    int i=low,j=0,k=middle+1,temp[high-low+1];
    while(i<=middle && k<=high)
    {
        if(x[i]<=x[k])
        {
            temp[j++]=x[i];
            i++;
        }
        else
        {
            cnt+=middle-i+1;
            temp[j++]=x[k];
            k++;
        }
    }
    for(;i<=middle;i++)
        temp[j++]=x[i];
    for(;k<=high;k++)
        temp[j++]=x[k];
    for(i=0;i<j;i++)
        x[i+low]=temp[i];
}
void merge_sort(int x[],int low,int high)
{
    int middle;
    if(low<high)
    {
        middle=(low+high)/2;
        merge_sort(x,low,middle);
        merge_sort(x,middle+1,high);
        merge(x,low,middle,high);
    }
}
int main()
{
   int a;
   si(a);
   while(a--)
   {
	   int n;
	   n=inp();
	   int b[n+1];
	   int a[n+1];
	   int tmp;
	   FOR(i,0,n)
	   {
		   a[i]=inp();
		   b[a[i]]=i+1;
	   }
	   cnt=0;
	   FOR(i,0,n)
	   {
		tmp=inp();
		a[i]=b[tmp];
	   }
	   merge_sort(a,0,n-1);
	   printf("%lld\n",cnt);
   }
   return 0;
}
