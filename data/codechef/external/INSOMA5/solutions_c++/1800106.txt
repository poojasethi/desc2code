#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define _AND 0
#define _OR 1
#define _XOR 2

char s[100];
int len, n, t;
int dp[100][100];
int _t[100][100], _f[100][100];
int lit[100];
int op[100];

int F(int, int);

int T(int l, int r) {
	if (r-l==1) {
		return lit[l];
	}
	if (_t[l][r]>=0) return _t[l][r];
	_t[l][r] = 0;
	for (int i=l+1; i<r; i++) {
		if (op[i-1]==_AND) {
			_t[l][r] += T(l,i)*T(i,r);
		} else if (op[i-1]==_XOR){
			_t[l][r] += T(l,i)*F(i,r);
			_t[l][r] += F(l,i)*T(i,r);
		} else {
			_t[l][r] += T(l,i)*F(i,r);
			_t[l][r] += F(l,i)*T(i,r);
			_t[l][r] += T(l,i)*T(i,r);
		}
	}
	return _t[l][r];
}

int F(int l, int r) {
	if (r<l) return 0;
	if (r-l==1) {
		return 1-lit[l];
	}
	if (_f[l][r]>=0) return _f[l][r];
	_f[l][r] = 0;
	for (int i=l+1; i<r; i++) {
		if (op[i-1]==_AND) {
			_f[l][r] += F(l, i)*T(i,r);
			_f[l][r] += F(l, i)*F(i,r);
			_f[l][r] += T(l, i)*F(i,r);
		} else if (op[i-1]==_XOR){
			_f[l][r] += T(l, i)*T(i,r);
			_f[l][r] += F(l, i)*F(i,r);
		} else {
			_f[l][r] += F(l, i)*F(i,r);
		}
	}
	return _f[l][r];
}

int main() {
	scanf("%s", s);
	len = strlen(s);
	n = 0;
	for (int i=0; i<len; i++) {
		if (s[i]=='T')
			lit[n] = 1;
		else if (s[i]=='F')
			lit[n] = 0;
		else if (s[i]=='.')
			op[n++]=_AND;
		else if (s[i]=='*')
			op[n++]=_XOR;
		else
			op[n++]=_OR;
	}
	n++;
	memset(dp, 255, sizeof dp);
	memset(_t, 255, sizeof _t);
	memset(_f, 255, sizeof _f);
	int ans = T(0, n);
	printf("%d\n", ans);
}