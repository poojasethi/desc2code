#include <stdio.h>
#include <cstring>
#include <map>

using namespace std;

int true_ways(int, int);
int false_ways(int, int);

map<pair<int, int>, int> true_ways_map;
map<pair<int, int>, int> false_ways_map;

char exp[30];

int main(void)
{
    int length;
    scanf("%s", exp);
    length = strlen(exp);

    printf("%d\n", true_ways(0, length-1));
}

int true_ways(int s, int e)
{
    if(true_ways_map.find(make_pair(s,e)) != true_ways_map.end()) {
        return true_ways_map[make_pair(s, e)];
    }

    if(s == e) {
        if(exp[s] == 'T')
            return 1;
        else
            return 0;
    }
    else {
        int i, count = 0;
        for (i = s; i <= e; i++) {
            if(exp[i] == '.') {
                count += true_ways(s, i-1) * true_ways(i+1, e);
            }
            else if(exp[i] == '+') {
                count += (true_ways(s, i-1) * true_ways(i+1, e)) + (true_ways(s, i-1) * false_ways(i+1, e)) + (false_ways(s, i-1) * true_ways(i+1, e));
            }
            else if(exp[i] == '*') {
                count += (true_ways(s, i-1) * false_ways(i+1, e)) + (false_ways(s, i-1) * true_ways(i+1, e));
            }
        }
        true_ways_map[make_pair(s, e)] = count;
        return count;
    }
}

int false_ways(int s, int e)
{   
    if(false_ways_map.find(make_pair(s,e)) != false_ways_map.end()) {
        return false_ways_map[make_pair(s, e)];
    }

    if(s == e) {
        if(exp[s] == 'T')
            return 0;
        else
            return 1;
    }
    else {
        int i, count = 0;
        for (i = s; i <= e; i++) {
            if(exp[i] == '.') {
                count += (true_ways(s, i-1) * false_ways(i+1, e)) + (false_ways(s, i-1) * true_ways(i+1, e)) + (false_ways(s, i-1) * false_ways(i+1, e));
            }
            else if(exp[i] == '+') {
                count += false_ways(s, i-1) * false_ways(i+1, e);
            }
            else if(exp[i] == '*') {
                count += (true_ways(s, i-1) * true_ways(i+1, e)) + (false_ways(s, i-1) * false_ways(i+1, e)) ;
            }
        }
        false_ways_map[make_pair(s, e)] = count;
        return count;
    }
}
