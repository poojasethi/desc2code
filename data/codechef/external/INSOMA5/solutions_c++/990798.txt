#include <algorithm>
#include <vector>
#include <limits>
#include <sstream>
#include <iostream>
#include <map>

int all[] = {1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012,742900};
std::map<std::pair<int, int>, int > numtrues;

int getnumpars(std::vector<int> &literals, std::vector<char> &ops, int from, int to)
{
    if(from==to)
        return literals[from];

    int ret = 0;
    for(int i=from;i<to;i++)
    {
        int leftt = 0;
        int rightt = 0;
        std::pair<int, int> posl = std::make_pair(from, i);
        std::pair<int, int> posr = std::make_pair(i+1, to);
        if(numtrues.find(posl) != numtrues.end())
        {
            leftt = numtrues[posl];
        }
        else
        {
            leftt = getnumpars(literals, ops, from, i);
            //numtrues.insert(std::make_pair(posl, leftt));
        }

        if(numtrues.find(posr) != numtrues.end())
        {
            rightt = numtrues[posr];
        }
        else
        {
            rightt = getnumpars(literals, ops, i+1, to);
            //numtrues.insert(std::make_pair(posr, rightt));
        }        
        if(ops[i] == '*')
        {
            ret += leftt*(all[to-i-1]-rightt) + (all[i-from]-leftt)*rightt;
        }
        else if(ops[i] == '.')
        {
            ret += leftt*rightt;
        }
        else
        {
            ret += leftt*all[to-i-1] + rightt*all[i-from] - leftt*rightt;
        }
    }
    numtrues.insert(std::make_pair(std::make_pair(from, to),  ret));
    return ret;
}

std::vector<int> literals;
std::vector<char> ops;

int main()
{
    char buf[100];
    scanf("%s", buf);
    int i=0;
    char *p = buf;
    while(*p)
    {
        if(i%2==0)
        {
            bool val = *p == 'T' ? true : false;
            literals.push_back(val);
        }
        else
            ops.push_back(*p);
        p++;
        i++;
    }
    int res = getnumpars(literals, ops, 0, literals.size()-1);

    printf("%d\n", res);
    return 0;

}