#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<string>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<cstdio>
#include<cmath>
#include<limits.h>
#include<cstring>
#include<cstdlib>
#include<cfloat>
#include<cassert>
#define maxm(a,b) a>b?a:b;
#define minm(a,b) a<b?a:b;
using namespace std;
//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
typedef map<int,int> mp;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)
#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
#define traverse_map(a,b) for(mp::iterator it=a;it!=b;++it)
#define MOD 1000000007
#define MAX 1000001
#define cases() int t; cin>>t; while(t--)
// fast input function
#define getcx getchar_unlocked
// fast input function
#ifdef ONLINE_JUDGE
 inline void inp( int &n )
 {
    n=0;
    int ch=getcx();int sign=1;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

    while(  ch >= '0' && ch <= '9' )
            n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    n=n*sign;
  }
#else
inline void inp(int &n){
 cin>>n;
}
#endif

int CountBooleanExpression(int *exp,char *optr,int n){
 int T[n+1][n+1],F[n+1][n+1];
 memset(T,0,sizeof(T));;
 memset(F,0,sizeof(F));;
 for(int i=1;i<=n;i++){
  if(exp[i-1])
  {
		T[i][i]=1;
		F[i][i]=0;
  }
  else
  {     T[i][i]=0;
		F[i][i]=1;
  }
 }

 for(int i=2;i<=n;i++){// ntimes

	   int r=1;
	for(int c=i;c<=n;c++,r++){ 
			 T[r][c]=0;
			 F[r][c]=0;

		   for(int k=r;k<c;k++){

     	  		  switch(optr[k-1]){

		    	     case '.': T[r][c]+=T[r][k]*T[k+1][c];
			     	 		   F[r][c]+=(T[r][k]+F[r][k])*(T[k+1][c]+F[k+1][c])-T[r][k]*T[k+1][c];
					     	   break;
                     case '+':  T[r][c]+=(T[r][k]+F[r][k])*(T[k+1][c]+F[k+1][c])-F[r][k]*F[k+1][c];
				 	    		F[r][c]+=(F[r][k]*F[k+1][c]);
						    	break;
                     case '*': T[r][c]+=T[r][k]*F[k+1][c]+T[k+1][c]*F[r][k];
                               F[r][c]+=T[r][k]*T[k+1][c]+F[r][k]*F[k+1][c];
						       break;
			      }
		   }		  // T[r][c]=sum;
	}
 }
 
  return T[1][n];
}
int main(){

 char str[50],optr[50];
 int exp[50];
 
   cin>>str;
 
    int i=0,k=0,j=0;

   while(str[i]!='\0'){
	  if(i%2==0)
	  {

			exp[k++]=str[i]=='T'?1:0;
	  }
	  else{

		  optr[j++]=str[i];
	  }
	  i++;
   }
 
   cout<<CountBooleanExpression(exp,optr,k)<<endl;

 return 0;
}
