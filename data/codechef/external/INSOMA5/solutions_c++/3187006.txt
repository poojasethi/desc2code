//T.F+T*F
#include<stdio.h>
 
int getData(char *str, char *bools, char *signs)	{
	int i, j=1, k=1;
	for(i=0;str[i]!='\n'&&str[i]!='\0';i++)	{
		switch(str[i])	{
			case 't':
			case 'T':
				bools[j++] = 1;
				break;
			case 'f':
			case 'F':
				bools[j++] = 0;
				break;
			case  '.':
			case  '+':
			case  '*':
				signs[k++] = str[i];
				break;
		}
	}
	return j-1;
}
 
 
int main()	{
	char bools[20];
	char signs[20];
	char str[35];
	int i,j,size,bp;
	gets(str);
	
	
	int countOfBools = getData(str, bools, signs);
	int tc[countOfBools+1][countOfBools+1];
	int fc[countOfBools+1][countOfBools+1];
	for(i=1;i<=countOfBools;i++)	{
		if(bools[i]==0)	{
			tc[i][i]=0;
			fc[i][i]=1;
		}
		else	{
			tc[i][i]=1;
			fc[i][i]=0;
		}	
	}
	//printf("point 1\n");
	for(size=2;size<=countOfBools;size++)	{
		for(i=1,j=size;j<=countOfBools;i++,j++)	{
			tc[i][j]=0;
			fc[i][j]=0;
			for(bp=i;bp<j;bp++)	{
				switch(signs[bp])	{
					case '.':
						tc[i][j] += tc[i][bp]*tc[bp+1][j];
						fc[i][j] += tc[i][bp]*fc[bp+1][j] + fc[i][bp]*tc[bp+1][j] + fc[i][bp]*fc[bp+1][j];
						break;
					case '+':
						tc[i][j] += tc[i][bp]*tc[bp+1][j] + tc[i][bp]*fc[bp+1][j] + fc[i][bp]*tc[bp+1][j];
						fc[i][j] += fc[i][bp]*fc[bp+1][j];
						break;
					case '*':
						tc[i][j] += tc[i][bp]*fc[bp+1][j] + fc[i][bp]*tc[bp+1][j];
						fc[i][j] += fc[i][bp]*fc[bp+1][j] + tc[i][bp]*tc[bp+1][j];
						break;
				}
			}
		}		
	}
	
	printf("%d", tc[1][countOfBools]);
} 