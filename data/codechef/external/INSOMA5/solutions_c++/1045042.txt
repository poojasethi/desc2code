#include <stdio.h>
#include <string.h>

#define MaxLiterals 15
void FindNumberOfTrueSolutions(int booleanExpression[], int leftPointer, int rightPointer, int& numberOfTrueSolutions, int& numberOfFalseSolutions);

int main()
{
	char inputExpression[(MaxLiterals*2 - 1) + 1];
	scanf("%s", inputExpression);
	
	int booleanExpression[MaxLiterals*2 - 1];
	/* An F will be represented by 0, a T by 1, an AND by 2, an OR by 3, and an XOR by 4. */
	int i;
	for(i = 0; i < (MaxLiterals*2 - 1); i++)
	{
		switch(inputExpression[i])
		{
			case 'F':
				booleanExpression[i] = 0;
				break;
			case 'T':
				booleanExpression[i] = 1;
				break;
			case '.':
				booleanExpression[i] = 2;
				break;
			case '+':
				booleanExpression[i] = 3;
				break;
			case '*':
				booleanExpression[i] = 4;
		}
	}
	int numberOfTrueSolutions;
	int numberOfFalseSolutions;
	FindNumberOfTrueSolutions(booleanExpression, 0, strlen(inputExpression) - 1, numberOfTrueSolutions, numberOfFalseSolutions);
	printf("%d", numberOfTrueSolutions);
	
	return 0;
}

void FindNumberOfTrueSolutions(int booleanExpression[], int leftPointer, int rightPointer, int& numberOfTrueSolutions, int& numberOfFalseSolutions)
{
	if(leftPointer == rightPointer)
	{
		numberOfTrueSolutions = booleanExpression[leftPointer];
		numberOfFalseSolutions = !numberOfTrueSolutions;
	}
	else if((rightPointer - leftPointer) == 2)
	{
		switch(booleanExpression[leftPointer + 1])
		{
			case 2:
				numberOfTrueSolutions = booleanExpression[leftPointer] & booleanExpression[rightPointer];
				numberOfFalseSolutions = !numberOfTrueSolutions;
				break;
			case 3:
				numberOfTrueSolutions = booleanExpression[leftPointer] | booleanExpression[rightPointer];
				numberOfFalseSolutions = !numberOfTrueSolutions;
				break;
			default:
				numberOfTrueSolutions = booleanExpression[leftPointer] ^ booleanExpression[rightPointer];
				numberOfFalseSolutions = !numberOfTrueSolutions;
		}
	}
	else
	{
		numberOfTrueSolutions = 0;
		numberOfFalseSolutions = 0;
		int i;
		for(i = leftPointer + 1; i <= rightPointer - 1; i += 2)
		{
			int numberOfTrueSolutionsLeft, numberOfFalseSolutionsLeft, numberOfTrueSolutionsRight, numberOfFalseSolutionsRight;
			FindNumberOfTrueSolutions(booleanExpression, leftPointer, (i - 1), numberOfTrueSolutionsLeft, numberOfFalseSolutionsLeft);
			FindNumberOfTrueSolutions(booleanExpression, (i + 1), rightPointer, numberOfTrueSolutionsRight, numberOfFalseSolutionsRight);
			
			if(booleanExpression[i] == 2)
			{
				numberOfTrueSolutions += numberOfTrueSolutionsLeft*numberOfTrueSolutionsRight;
				numberOfFalseSolutions += numberOfTrueSolutionsLeft*numberOfFalseSolutionsRight + numberOfFalseSolutionsLeft*numberOfTrueSolutionsRight + numberOfFalseSolutionsLeft*numberOfFalseSolutionsRight;
			}
			else
			{
				if(booleanExpression[i] == 3)
				{
					numberOfTrueSolutions += numberOfTrueSolutionsLeft*numberOfTrueSolutionsRight + numberOfTrueSolutionsLeft*numberOfFalseSolutionsRight + numberOfFalseSolutionsLeft*numberOfTrueSolutionsRight;
					numberOfFalseSolutions += numberOfFalseSolutionsLeft*numberOfFalseSolutionsRight;
				}
				else
				{
					numberOfTrueSolutions += numberOfTrueSolutionsLeft*numberOfFalseSolutionsRight + numberOfFalseSolutionsLeft*numberOfTrueSolutionsRight;
					numberOfFalseSolutions += numberOfTrueSolutionsLeft*numberOfTrueSolutionsRight + numberOfFalseSolutionsLeft*numberOfFalseSolutionsRight;
				}
			}
		}
	}
}