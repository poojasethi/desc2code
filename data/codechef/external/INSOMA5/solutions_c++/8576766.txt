#include <iostream>
#include <cstring>

using namespace std;

int bool_paranth(char *sym, char *op, int n)
{
	int T[n][n], F[n][n];
	
	//Base case: expression of size 0
	for(int i=0; i<n; i++)
	{
		T[i][i] = (sym[i] == 'T')? 1 : 0;
		F[i][i] = (sym[i] == 'F')? 1 : 0;
	}

	// Solve subprobmes of size 2, 3, ..., n
	for(int s=1; s<n; s++)
	{
		// Try for all possible locations i,i+s i+1,i+s+1, ... ,
		for(int i=0, j=s; j<n; i++, j++)
		{
			T[i][j] = F[i][j] = 0;
			// Try seperating at middle operators
			for(int k=i; k<j; k++)
			{
				int tot_ik = T[i][k] + F[i][k];
				int tot_kj = T[k+1][j] + F[k+1][j];
				
				if(op[k] == '&')
				{
					T[i][j] += T[i][k] * T[k+1][j];
					F[i][j] += tot_ik*tot_kj - T[i][k]*T[k+1][j];
				}
				else if(op[k] == '|')
				{
					T[i][j] += tot_ik*tot_kj - F[i][k]*F[k+1][j];
					F[i][j] += F[i][k] * F[k+1][j];
				}
				else	// op is ^
				{
					T[i][j] += T[i][k]*F[k+1][j] + F[i][k]*T[k+1][j];
					F[i][j] += T[i][k]*T[k+1][j] + F[i][k]*F[k+1][j];
				}
			}	
		}	
	}
	return T[0][n-1];
}

#define SIZE 1001

int main()
{
	int t = 1;
	while(t--)
	{
		char sym[SIZE], op[SIZE], inp[10000];
		cin >> inp;
		int i, j, len;
		i = j = 0;
		len = strlen(inp);
		for(int k=0; k<len; k++)
		{
			if(inp[k] == 'T')
				sym[i++] = 'T';
			else if(inp[k] == 'F')
				sym[i++] = 'F';
			else if(inp[k] == '.')
				op[j++] = '&';
			else if(inp[k] == '+')
				op[j++] = '|';
			else if(inp[k] == '*')
				op[j++] = '^';
			else
			{}
		}		
		cout << bool_paranth(sym, op, i) << endl;
	}
	return 0;
}
