#include <iostream>
#include <string.h>
using namespace std;

struct choice{
    int t;
    int f;
    choice()
    {
        t=0;
        f=0;
    }

    void updateT(int nt)
    {
        t += nt;
    }
    void updateF(int nf)
    {
        f += nf;
    }


};
choice dp[15][15];

int main()
{
    char buffer[100];

    scanf("%s", buffer);

    int len = (strlen(buffer)>>1)+1;

    for (int j = 0 ; j < len; j++)
    {
        choice newc;
        if(buffer[j*2] == 'T')
        {
                newc.t=1;
                newc.f=0;

        }
        else 
            if(buffer[j*2] == 'F')
            {
                newc.t=0;
                newc.f=1;

            }

        dp[j][j] = newc;

    }


    for (int l = 1 ; l < len; l++)
        for (int j = 0 ; j < len - l; j++)
        {
            choice sumc;

            for(int k = j; k <j+l; k++ )
            {
                choice newc;
   
                if(buffer[k*2+1] == '.')
                {
                    newc.t = dp[j][k].t * dp[k+1][j+l].t;

                    newc.f = dp[j][k].f * dp[k+1] [j+l].t 
                            + dp[j][k].f * dp[k+1][j+l].f
                            + dp[j][k].t * dp[k+1][j+l].f;

                }else if (buffer[k*2+1] == '+')
                {

                    newc.t = dp[j][k].f * dp[k+1] [j+l].t 
                        + dp[j][k].t * dp[k+1][j+l].t
                        + dp[j][k].t * dp[k+1][j+l].f;


                    newc.f = dp[j][k].f * dp[k+1][j+l].f;

                }else if(buffer[k*2+1] == '*')
                {
                    newc.t = dp[j][k].f * dp[k+1] [j+l].t 
                        + dp[j][k].t * dp[k+1][j+l].f;

                    newc.f = dp[j][k].t * dp[k+1][j+l].t
                        + dp[j][k].f * dp[k+1][j+l].f;
                    
                }              

                sumc.updateT(newc.t);
                sumc.updateF(newc.f);


            } // for(int k = j; k <j+l; k++ )

                            
            dp[j][j+l] = sumc;

        } // for (int j = 0 ; j <= len - l; j++)

            printf("%d\n", dp[0][len-1].t );


   return 0;

}