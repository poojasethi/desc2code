/*
ID: nihalb
PROG: insoma5
LANG: C++
*/

#include<stdio.h>
#include<iostream>
#define FOR(i,v) for(int i=0; i<v; ++i)
#define debug(x) cerr<<#x<<" = "<<x<<endl

using namespace std;

int catalan[20];

inline int complement(int i, int N)
{
    return catalan[N-1] - i;
}

inline bool determine(char op, bool first, bool second)
{
    bool result;
    if(op == '.') result = first && second;
    else if(op == '+') result = first || second;
    else result = (first != second);
    return result;
}

void compute(int n)
{
    catalan[0] = 1;
    for(int i=1; i<=n; ++i) catalan[i] = (2*(2*i-1)*catalan[i-1])/(i+1);
}

int PT[20][20];

int main()
{
	char str[35];
	scanf("%s",str);
	int N=0,j;
	char temp;
	for(int i=0; str[i] != '\0'; ++i) if(str[i] == 'T' || str[i] == 'F') N++;
	compute(N);
	j = 0;
	FOR(i,N)
	{
	    PT[i][i] = (str[j] == 'T')?1:0;
	    j += 2;
	}
	for(int d=1; d<N; ++d)
	{
	    for(int i=0; i<N-d; ++i)
	    {
	        PT[i][i+d] = 0;
	        for(int k=i; k<i+d; ++k)
	        {
	            temp = str[2*k+1];
	            if(determine(temp,true,true)) PT[i][i+d] += PT[i][k]*PT[k+1][i+d];
	            if(determine(temp,true,false)) PT[i][i+d] += PT[i][k]*complement(PT[k+1][i+d],i+d-k);
	            if(determine(temp,false,true)) PT[i][i+d] += complement(PT[i][k],k-i+1)*PT[k+1][i+d];
	            if(determine(temp,false,false)) PT[i][i+d] += complement(PT[i][k],k-i+1)*complement(PT[k+1][i+d],i+d-k);
	        }
	    }
	}
	printf("%d\n",PT[0][N-1]);
	return 0;
}
