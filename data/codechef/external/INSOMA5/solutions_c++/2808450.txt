#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

const int max_n=35;

int n;
char s[max_n];
int dp[max_n][max_n][2];

int main()
{
	gs(s); slenn(s,n);
	assert(n%2);

	for(int l=1; l<=n; l+=2)
	{
		for(int i=0; i+l-1<n; i+=2)
		{
			int j=i+l-1;

			if(l==1)
			{
				if(s[i]=='T') { dp[i][j][0]=0; dp[i][j][1]=1; }
				else { dp[i][j][0]=1; dp[i][j][1]=0; }
			}
			else
			{
				dp[i][j][0]=0;
				dp[i][j][1]=0;
				for(int k=i+1; k<j; k+=2)
				{
					if(s[k]=='.')
					{
						dp[i][j][0]+=dp[i][k-1][0]*dp[k+1][j][0];
						dp[i][j][0]+=dp[i][k-1][0]*dp[k+1][j][1];
						dp[i][j][0]+=dp[i][k-1][1]*dp[k+1][j][0];
						dp[i][j][1]+=dp[i][k-1][1]*dp[k+1][j][1];
					}
					else if (s[k]=='+')
					{
						dp[i][j][0]+=dp[i][k-1][0]*dp[k+1][j][0];
						dp[i][j][1]+=dp[i][k-1][0]*dp[k+1][j][1];
						dp[i][j][1]+=dp[i][k-1][1]*dp[k+1][j][0];
						dp[i][j][1]+=dp[i][k-1][1]*dp[k+1][j][1];
					}
					if(s[k]=='*')
					{
						dp[i][j][0]+=dp[i][k-1][0]*dp[k+1][j][0];
						dp[i][j][1]+=dp[i][k-1][0]*dp[k+1][j][1];
						dp[i][j][1]+=dp[i][k-1][1]*dp[k+1][j][0];
						dp[i][j][0]+=dp[i][k-1][1]*dp[k+1][j][1];
					}
				}
			}
		}
	}

	pin(dp[0][n-1][1]);
	
	return 0;
}