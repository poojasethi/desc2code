
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
#define debug(args...) dbg(),args
const double pi=acos(-1.0);
const double eps=1e-11;
#define S(N) scanf("%d", &N)
#define SL(N) scanf("%lld", &N)
#define SF(N) scanf("%lf", &N)
#define SC(N) scanf("%c", &N)
#define SS(N) scanf("%s", N)
#define SIZE(X) ((int)((X).size()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define FORL(A,B,C) for(ll A=B;A<C;A++)
#define EFORL(A,B,C) for(ll A=B;A<=C;A++)
#define RFORL(A,B,C) for(ll A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX(A,B) ((A > B) ? A : B)
#define MIN(A,B) ((A < B) ? A : B)
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define MOD 1000000007LL
#define LIM 1000002 
#define INF 10000
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

char str[35];
int m[35][35][2];

void solve(int i,int j,int k)
	{
		//finding true parenthizations
		switch(str[k])
		{
			case '*':
				m[i][j][1] += m[i][k-1][1]*m[k+1][j][0] + m[i][k-1][0]*m[k+1][j][1];
				break;
			case '.':
				m[i][j][1] += m[i][k-1][1]*m[k+1][j][1];
				break;
			case '+':
				m[i][j][1] +=  m[i][k-1][1]*m[k+1][j][1] + m[i][k-1][0]*m[k+1][j][1] + m[i][k-1][1]*m[k+1][j][0];
				break;
		}
		
		//finding false parenthizations
		switch(str[k])
		{
			case '*':
				m[i][j][0] += m[i][k-1][1]*m[k+1][j][1] + m[i][k-1][0]*m[k+1][j][0];
				break;
			case '.':
				m[i][j][0] += m[i][k-1][0]*m[k+1][j][0] + m[i][k-1][1]*m[k+1][j][0] + m[i][k-1][0]*m[k+1][j][1];
				break;
			case '+':
				m[i][j][0] +=  m[i][k-1][0]*m[k+1][j][0];
				break;
		}
	}

int main(int argc,char* argv[]){
	DBGCHECK;
	/*int t;
	S(t);
	while(t-- > 0){*/
		MEM(m,0);
		SS(str);
		int len = strlen(str),j;
		for(int i=0;i < len;i+=2)
			if(str[i] == 'T')
				m[i][i][1] = 1;
			else
				m[i][i][0] = 1;	
		for(int l=2;l <= (len+1)/2;l++)
		{
			for(int i=0;i <= (len - 2*l + 1);i+=2)
				{
					j = i + 2*(l-1);
					for(int k = i+1;k <= j-1;k+=2)
					{
						solve(i,j,k);
						debug(i,j,k,m[i][j][0],m[i][j][1]);
					}
				}
		}	
		printf("%d\n",m[0][len-1][1]);
	//}
}
