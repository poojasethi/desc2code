//      @author anks

#include <string>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) ((S&two(X))>0)
#define containL(S,X) ((S&twoL(X))>0)
typedef pair<int,int> ipair;
int countbit(int n) {return (n==0)?0:(1+countbit(n&(n-1)));}
int lowbit(int n) {return (n^(n-1))&n;}
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> T sqr(T x) {return x*x;}
template<class T> void checkmin(T &a,T b) {if (b<a) a=b;}
template<class T> void checkmax(T &a,T b) {if (b>a) a=b;}
#define SIZE(X) ((int)((X).size()))
#define LENGTH(X) ((int)((X).length()))
#define MP(A,B) make_pair(A,B)
#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define IFOR(A,B,C,D) for(int A=B;A<C;A+=D)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define MAX 29
int parenthesize(string e, int n) {
	 
	int m[n][n][2], count = 0, c;
		
	IFOR(i, 0, n, 2) {
		c = ((e[i] == 'T') ? 1 : 0);
		m[i][i][c] = 1;
		m[i][i][!c] = 0;
	}
		
	IFOR(l, 2, n, 2) {								
		IFOR(i, 0, n - l, 2) {
			int j = i + l;
			m[i][j][0] = 0;
			m[i][j][1] = 0;
			int q;
			IFOR(k, i, j, 2) {
				//cout << i << " " << k << " " << m[i][k][0] << " " << m[i][k][1] << m[k + 2][j][0] << " "  << m[k + 2][j][1] << endl;			
				FOR(t1, 0, 2) {
					int mik = m[i][k][t1];
					if (mik == 0) continue;
					FOR(t2, 0, 2) {
						int mkj = m[k + 2][j][t2];
						if (mkj == 0) continue;
						switch(e[k + 1]) {					
							case '.' :
								q = t1 && t2;
								break;
							case '*' :
								q = t1 ^ t2;
								break;
							case '+' :
								q = t1 || t2;
								break;
						}
						m[i][j][q] += mik * mkj;						
						// cout << i << " " << j << " "  << m[i][j][0] << " " << m[i][j][1] << endl;	
					}
				}
			}						
		}		
	}
	
	/*
	IFOR(i, 0, n, 2) {
		IFOR(j, i, n, 2) {
			FOR(t, 0, 2)
				cout << m[i][j][t] << " ";
			cout << endl;
		}
		cout << endl; 
	}
	*/ 
	
	return m[0][n - 1][1];
}	

int main (int argc, char *argv[]) {
	
	string exp;
	cin >> exp;
	
	int n = exp.length();
	cout << parenthesize(exp, n) << endl;
	
	return 0;	
}
