#include<cstring>
#include<iostream>

using namespace std;

long int dp[100][100][2];

long int parenthesize(string expression,int start,int end,char result)
{
	if(dp[start][end][result] != -1)
	return dp[start][end][result];
	
	if(start == end)
	{
		if(expression[start] == result)
		return 1;
		
		else
		return 0;
	}
	
	char c;
	int i;
	long int num=0;
	
	for(i=start + 1;i<=end;i+=2)
	{
		// the operator. It can be . oR * oR |
		c=expression[i];
		
		if(result == 'T')
		{
			// AND
			if(c == '.')
			{
				num+=parenthesize(expression,start,i-1,'T') * parenthesize(expression,i+1,end,'T');
			}
			
			// OR
			else if(c == '+')
			{
				num+=parenthesize(expression,start,i-1,'T') * parenthesize(expression,i+1,end,'T');
				num+=parenthesize(expression,start,i-1,'T') * parenthesize(expression,i+1,end,'F');
				num+=parenthesize(expression,start,i-1,'F') * parenthesize(expression,i+1,end,'T');
			}
			
			// XOR
			else
			{
				num+=parenthesize(expression,start,i-1,'T') * parenthesize(expression,i+1,end,'F');
				num+=parenthesize(expression,start,i-1,'F') * parenthesize(expression,i+1,end,'T');
			}
		}
		
		else
		{
			// AND
			if(c == '.')
			{
				num+=parenthesize(expression,start,i-1,'T') * parenthesize(expression,i+1,end,'F');
				num+=parenthesize(expression,start,i-1,'F') * parenthesize(expression,i+1,end,'T');
				num+=parenthesize(expression,start,i-1,'F') * parenthesize(expression,i+1,end,'F');
			}
			
			// OR
			else if(c == '+')
			{
				num+=parenthesize(expression,start,i-1,'F') * parenthesize(expression,i+1,end,'F');
			}
			
			// XOR
			else
			{
				num+=parenthesize(expression,start,i-1,'F') * parenthesize(expression,i+1,end,'F');
				num+=parenthesize(expression,start,i-1,'T') * parenthesize(expression,i+1,end,'T');
			}	
		}
	}
	
	dp[start][end][result]=num;
	return num;
}

int main()
{
	string expression;
	
	cin>>expression;
	
	memset(dp,-1,sizeof(dp));
	printf("%ld\n",parenthesize(expression,0,expression.size() - 1,'T'));
	
	return 0;	
}