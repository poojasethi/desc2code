#include<bits/stdc++.h>
#define MAX 200

using namespace std;

typedef pair<int,int> pii;//first stores number of ways to get true for a given range

pii Table[MAX][MAX];

char operator_[MAX];
char operand[MAX],input[MAX];

pii findWays(int ,int );

int main(void){
	
	int testCases,i,j,count1,count2;
	
	while(scanf("%s",input)!=EOF){	
	
	
	   
		//reset the Table
		for(i=0;i<MAX;i++)
		   for(j=0;j<MAX;j++){
		   	
		   	Table[i][j].first=-1;
			Table[i][j].second=-1;
		   	
		   }
		
	//	gets(input);
	    
	//	scanf("%s",input);
			
		int length=strlen(input);
		
		if(length==1&&input[0]=='T'){
			
			printf("1\n");
			
		}
		
		else{
		count1=count2=0;//count1 mantains a count on total number of T or F's in input;
		 //count2 mantains a count on total number of operators
				
	//	cout<<"\nYour Input is :- "<<input<<"\n";		
		for(i=0;i<length;i++){
			
		   if(input[i]=='T'||input[i]=='F')	
		   	  operand[count1++]=input[i];   		   
		   
		   else{
		   	
		   	if(input[i]=='*')
		   	   operator_[count2++]='^';
		   	   
			else if(input[i]=='.')
			   operator_[count2++]='&';
			
			else if(input[i]=='+')
			   operator_[count2++]='|';		      
		   	
		   }
		   
	    }

       //   cout<<"\nValue of count1 and count2 is :- "<<count1<<" and "<<count2;
	    
	    findWays(0,count1-1);
		int ans=0;
		pii rightValue,leftValue;		
				
		for(i=0;i<count1-1;i++){
			
		   leftValue=Table[0][i];
		   rightValue=Table[i+1][count1-1];	
		   				
		   if(operator_[i]=='|')				
			  ans+=(leftValue.first*rightValue.first+leftValue.first*rightValue.second+leftValue.second*rightValue.first);
		
		   else if(operator_[i]=='&')			
			  ans+=(leftValue.first*rightValue.first);
		
		   else if(operator_[i]=='^')			
			  ans+=(leftValue.first*rightValue.second+leftValue.second*rightValue.first);			
	
		}
		
		printf("%d\n",ans);
	    
		}
    
	}
	
	return 0;
	
}

pii findWays(int start,int end){
	
	if(start>end)
	   return pii(0,0);
	
	if(start==end){
		
		pii returnValue;
        if(operand[start]=='T')
		   returnValue=pii(1,0);		
		
		else returnValue=pii(0,1);
		
		Table[start][end]=returnValue;
		
		return returnValue;
		
	}
	
	if(Table[start][end].first!=-1)
	    return Table[start][end];
	    
	int i;
	pii leftValue=pii(0,0),rightValue=pii(0,0);
	pii actualValue=pii(0,0);	
	
	//T F
	for(i=start;i<end;i++){
		
		leftValue=findWays(start,i);
		rightValue=findWays(i+1,end);
		
		if(operator_[i]=='|'){
			
			//first  --> True
			//second --> False
			//True can be obtained only if one of them is True :- 
			
//			cout<<"\nHi i came over here\n";
			
			// 1 1 - 1
			// 1 0 - 1
			// 0 1 - 1
			// 0 0 - 0			
//		    cout<<"\nAs of now pair is :- "<<actualValue.first<<" and "<<actualValue.second;
			actualValue.first+=(leftValue.first*rightValue.first+leftValue.first*rightValue.second+leftValue.second*rightValue.first);
			actualValue.second+=(leftValue.second*rightValue.second);			
			
//			 cout<<"\nAs of now pair is :- "<<actualValue.first<<" and "<<actualValue.second;
			
		}
		
		else if(operator_[i]=='&'){
			
			// 1 1 - 1
			// 1 0 - 0
			// 0 1 - 0 
			// 0 0 - 0
		//	cout<<"\nDid i came here?";
			actualValue.first+=(leftValue.first*rightValue.first);
			actualValue.second+=(leftValue.first*rightValue.second+leftValue.second*rightValue.first+leftValue.second*rightValue.second);			
			
		}
		
		else if(operator_[i]=='^'){
			
			//0 0 - 0
			//1 1 - 0
			//0 1 - 1
			//1 0 - 1
		//	cout<<"\nDid i came here?";
			actualValue.first+=(leftValue.first*rightValue.second+leftValue.second*rightValue.first);
			actualValue.second+=(rightValue.first*leftValue.first+rightValue.second*leftValue.second);			
			
		}
		
	}	
	
	Table[start][end]=actualValue;
//	cout<<"\nOk then im returning "<<actualValue.first<<" and "<<actualValue.second;
	return actualValue;
	
}