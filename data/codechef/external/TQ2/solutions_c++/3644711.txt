#include<iostream>
#include<cstdlib>
#include<cstring>
using namespace std;

typedef struct nd
{
	int n;
	int d;
} M;

M foo(char dec[], int num)
{
	int a[num + 1], b[10];
	int L = strlen(dec);
	long long i = L - 1, temp = 0;
	int f = num - 1;

	while (1)
	{
		a[f--] = dec[i] - '0';
		i--;
		temp++;
		if (temp == num)
			break;
	}
	// printf("%d %d",a[0], a[1]);
	i = 0;
	while (dec[i] != '.')
		i++;
	i++;
	temp = 0;
	while (dec[i] != '\0')
	{
		b[temp] = dec[i] - '0';
		i++;
		temp++;
	}
	temp = temp - num;

	double add = 0, v;
	int k = 0;
	i = 10;

	for (int j = 0; j < temp; j++)
	{
		v = (double)1 / i;
		v *= b[j];
		add += v;
		i = i * 10;
	}

	for (int j = 0; j < 6 * num; j++)
	{
		v = (double)1 / i;
		v *= a[k];
		add += v;
		i = i * 10;
		k++;
		if (k == num)
			k = 0;
	}

	if (num > 2)
	{
		temp = 1000 - num;
	}
	else
	{
		if (num == 0)
			temp = 1000;
		else if (num == 1)
			temp = 1000 - 100;
		else if (num == 2)
			temp = 1000 - 10;
	}

	add = add * temp;

	M T;
	T.d = temp;
	T.n = (int)(add + 0.5);

	return T;
}

int gcd(int a, int b)
{
	if (b == 0)
		return a;

	gcd(b, a % b);
}

int main(void)
{
	int num;
	char dec[100];
	M ND;
	int cases = 1;

	while (1)
	{
		scanf("%d", &num);

		if (num == -1)
		{
			break;
		}

		scanf("%s", dec);

		ND = foo(dec, num);

		int c = gcd(ND.n, ND.d);

		int N, D;
		N = ND.n / c;
		D = ND.d / c;

		printf("Case %d: %d/%d\n", cases, N, D);

		cases++;

	}

	return 0;
}