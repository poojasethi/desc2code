#include<bits/stdc++.h>
#include<iostream>
const int MAXN=1e6+1;
using namespace std;
#define ll long long int
#define tr(c,it) for(typeof(c.begin()) it=c.begin();it!=c.end();it++)
#define sz(c) c.size()
#define all(c) c.begin(),c.end()

bool composite[MAXN]={0};
vector<int> primes;
void sieve()
{
    composite[0]=composite[1]=1;
    for(int i=2;i<MAXN;i++)
    {
        if(!composite[i])
        {
            primes.push_back(i);
        for(int j=2*i;j<MAXN;j+=i)
        composite[j]=1;
    }

}
}



int main()
{

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int T;
    int N;
    sieve();
    cin>>T;
    while(T--)
    {
        cin>>N;
        ll ans=0;
        vector<int> temp(primes.begin(),lower_bound(all(primes),N));
        //temp.resize(temp[sz(temp)-1]<N?sz(temp):sz(temp)-1);
        ans=accumulate(all(temp),(ll)0);
        cout<<ans<<endl;
    }
    return 0;
}
