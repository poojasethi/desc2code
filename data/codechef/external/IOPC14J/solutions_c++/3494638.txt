#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

bool graph[111][111];
char s[111][111];

int n, root;
vector<int> adj[200];
int mate[200];
bool v1[200], v2[200];

template<typename T> int size(const T& c) { return int(c.size()); }
template<typename T> T sqr(T x) { return x*x; }
template<typename T> bool remin(T& x, T y) { if (x <= y) return false; x = y; return true; }
template<typename T> bool remax(T& x, T y) { if (x >= y) return false; x = y; return true; }

#define FOR(i, a, b) for (int i(a), _b(b); i <= _b; ++i)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define REP(i, n) for (int i(0), _n(n); i < _n; ++i)
#define REPD(i, n) for (int i((n) - 1); i >= 0; --i)

bool dfs(int x) {
  if (v1[x]) return false;
  v1[x] = v2[x] = true;
  REP(z, size(adj[x])) {
    int y = adj[x][z];
    if (y != root && mate[y] == -1) {
      mate[x] = y;
      mate[y] = x;
      return true;
    }
  }
  REP(z, size(adj[x])) {
    int y = adj[x][z];
    if (y != root && !v2[y] && dfs(mate[y])) {
      mate[x] = y;
      mate[y] = x;
      return true;
    }
  }
  v2[x] = false;
  return false;
}

int solve() {
  int res = 0;
  REP(z, 13) {
    REP(i, n) random_shuffle(adj[i].begin(), adj[i].end());
    REP(i, n) mate[i] = -1;
    vector<int> order(n);
    REP(i, n) order[i] = i;
    random_shuffle(order.begin(), order.end());
    int cur = 0;
    REP(i, n) {
      root = order[i];
      if (mate[root] != -1) continue;
      REP(i, n) v1[i] = v2[i] = false;
      if (dfs(root)) ++cur;
    }
    remax(res, cur);
  }
  return res;
}

int main() {
    // freopen("J.in", "r", stdin);
    // memset(matchL, -1, sizeof(matchL));
    //     memset(matchR, -1, sizeof(matchR));
    //     int matched = 0;
    //     for (int i = 0; i < n; i++) {
    //         memset(seen, false, sizeof(seen));
    //         if (bpm(i)) matched++;
    //     }

    int T;

    for (int T = 1;; T++) {
        int m;
        scanf("%d%d", &n, &m);
        if (n + m == 0) break;
        for (int i = 0; i < n; i++) scanf("%s", s[i]);

        memset(graph, false, sizeof(graph));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (s[i][j] == '.') {
                    graph[i][j] = true;
                    graph[j][i] = true;
                }
        for (int i = 0; i < n; i++) adj[i].clear();
        for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) if (graph[i][j]) adj[i].push_back(j);

        bool ok = true;
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) if (graph[i][j]) cnt++;
            if (cnt == 0) ok = false;
        }

        printf("Case#%d: ", T);

        if (ok == false) { printf("IMPOSSIBLE\n"); continue; }

        printf("%d\n", (n - solve()) * m);
    }
    return 0;
}