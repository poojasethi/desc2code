#include<bits/stdc++.h>
using namespace std;
#define ll long long 
typedef pair<ll, ll>pll;
int dp[100005][20];
vector<int> vec[100005];
int n, k;
int dp1[100005][20];
void dfs(int node, int parent)
{
    dp[node][0] = 1;
    for (int i = 0; i < vec[node].size(); i++)
    {
        int child_node = vec[node][i];
        if (child_node != parent)
        {
            dfs(child_node, node);
            for (int j = 1; j <= k; j++)
            {
                dp[node][j] += dp[child_node][j - 1];
            }
        }
 
    }
}
void solve(int node, int parent)
{
    if (parent != 0)
    {
        dp1[node][0] = 1;
        dp1[node][1] = dp[node][1] + 1;
        for (int i = 2; i <= k; i++)
        {
            if (dp1[parent][i - 1] != 0)
                dp1[node][i] = dp[node][i] + (dp1[parent][i - 1] - dp[node][i - 2]);
        }
    }
    for (int i = 0; i < vec[node].size(); i++)
    {
        int child_node = vec[node][i];
        if (child_node != parent)
        {
            solve(child_node, node);
        }
    }
}
int main()
{
	scanf("%d",&n);
    k = 15;
    for (int i = 0; i < n - 1; i++)
    {
        int a, b;
        scanf("%d%d",&a,&b);
        vec[a].push_back(b);
        vec[b].push_back(a);
    }
    dfs(1, 0);
    for (int i = 0; i <= k  ; i++)
    {
        dp1[1][i] = dp[1][i];
    }
    solve(1, 0);
    int q;
    scanf("%d",&q);
    for (int i = 0, node, xx; i < q; i++)
    {
        scanf("%d%d",&node,&xx);
        ll ans = 0;
        for (int j = 0; j <= xx; j++)
        {
            ans += dp1[node][j];
        }
        cout << ans << endl;
    }
    return 0;
} 