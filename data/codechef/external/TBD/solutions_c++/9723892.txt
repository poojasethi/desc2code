    //Author : Kipawa
	//You can still hail MEGATRON

using namespace std;

#include<bits/stdc++.h>

#define wl(n) while(n--)
#define fl(i,a,b) for(i=a; i<b; i++)
#define rev(i,a,b) for(i=a; i>=b; i--)
#define scan(n) scanf("%d", &n)
#define scans(s) scanf("%s", s)
#define scanc(c) scanf("%c", &c)
#define scanp(f) scanf("%f", &f)
#define scanll(l) scanf("%lld", &l)
#define scanllu(u) scanf("%llu", &u)
#define print(n) printf("%d\n", n)
#define prints(s) printf("%s\n", s)
#define printc(c) printf("%c\n", c)
#define printp(f) printf("%f\n", f)
#define printll(l) printf("%lld\n", l)
#define printllu(u) printf("%llu\n", u)
#define nline printf("\n")
#define mclr(strn) strn.clear()
#define ignr cin.ignore()
#define MOD 1000000007
#define ll long long int
#define u64 unsigned long long int
#define PB push_back

ll n;
vector<ll> v[100005];
bool vis[100005];
ll dp[100005][20], par[100005], ans[100005][20];

void dfs(ll x)
{
	vis[x] = 1;
	dp[x][0] = 1;
	ll i,j;
	fl(i,0,v[x].size())
	{
		if(!vis[v[x][i]])
		{
			par[v[x][i]] = x;
			dp[x][1]++;
			dfs(v[x][i]);
			fl(j,2,20)
			{
				dp[x][j]+=dp[v[x][i]][j-1];
			}
		}
	}
}

void foo(ll x)
{
	vis[x] = 1;
	ll i;
	if(par[x]!=0)
	{
		fl(i,2,20)
			ans[x][i]+=(ans[par[x]][i-1]-dp[x][i-2]);
		ans[x][1]++;
	}

	fl(i,0,v[x].size())
	{
		if(!vis[v[x][i]])
			foo(v[x][i]);
	}
}

int main()
{
	scanll(n);
	ll i,x,y,j,q;
	fl(i,0,n-1)
	{
		scanll(x);	scanll(y);
		v[x].PB(y);
		v[y].PB(x);
	}

	dfs(1);
	fl(i,1,n+1)
		fl(j,0,20)
			ans[i][j] = dp[i][j];
		
	memset(vis,0,sizeof(vis));
	foo(1);
	
	fl(i,1,n+1)
	{
		fl(j,1,20)
			ans[i][j]+=ans[i][j-1];
		//nline;
	}

	scanll(q);
	wl(q)
	{
		scanll(x);scanll(y);
		printll(ans[x][y]);
	}
	return 0;
}
