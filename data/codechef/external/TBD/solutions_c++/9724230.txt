#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5 + 10;
vector< vector<int> > grf(MAXN);
int dp[16][MAXN];
int parent[MAXN];
void make_rooted(int node, int par){
	parent[node] = par;
	int sz = grf[node].size();
	for(int i = 0;i < sz;++i){
		int next = grf[node][i];
		if(next != par){
			make_rooted(next, node);
		}
	}
}
void get_initial_ans(int node){
	int sz = grf[node].size();
	for(int i = 0;i < sz;++i){
		int next = grf[node][i];
		if(next != parent[node]){
			get_initial_ans(next);
		}
	}
	dp[0][node] = 1;
	for(int k = 1;k <= 15;++k){
		dp[k][node] = 0;
		for(int i = 0;i < sz;++i){
			int next = grf[node][i];
			if(next != parent[node]){
				dp[k][node] += dp[k - 1][next];
			}
		}
	}
}
void get_final_ans(int node){
	int sz = grf[node].size();
	for(int i = 0;i < sz;++i){
		int next = grf[node][i];
		if(next != parent[node]){
			get_final_ans(next);
		}
	}
	for(int k = 15;k >= 1;--k){
		int u = node;
		int cnt = 1;
		while(parent[u] != -1 && k >= cnt){
			dp[k][node] += dp[k - cnt][parent[u]];
			if(k >= cnt + 1)
				dp[k][node] -= dp[k - cnt - 1][u];

			u = parent[u];
			++cnt;
		}
	}
}
int main(){
	int N;
	scanf("%d", &N);
	for(int i = 0;i < N - 1;++i){
		int u, v;
		scanf("%d%d", &u, &v);
		grf[u].push_back(v);
		grf[v].push_back(u);
	}
	make_rooted(1, -1);
	get_initial_ans(1);
	get_final_ans(1);
	// for(int i = 1;i <= N;++i){
	// 	cout << i << " " << dp[1][i] << "\n";
	// }
	for(int i = 1;i <= N;++i){
		for(int k = 1;k <= 15;++k){
			dp[k][i] += dp[k - 1][i];
		}
	}
	int q;
	cin >> q;
	while(q--){
		int U, k;
		scanf("%d%d", &U, &k);
		printf("%d\n", dp[k][U]);;
	}
	return 0;
}