// created by: Prashant Kumar Singh :)
#include<iostream>
#include<algorithm>
#include<utility>
#include<cstring>
#include<string.h>
#include<set>
#include<map>
#include<math.h>
#include<stdio.h>
#include<vector>
#include<functional>
#include<bitset>
#include<iomanip>
#define ll long long
#define gr greater<ll>()
#define pi acos(-1.0)
#define pb push_back
#define MS0(ar) memset(ar,0,sizeof ar)
#define f first
#define s second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ind(a) scanf("%d",&a)
#define inf(a) scanf("%lf",&a)
#define inl(a) scanf("%lld",&a)
#define ins(a) scanf("%s",a)
#define pd(a) printf("%d\n",a)
#define pl(a) printf("%lld\n",a);
#define bitcnt(x) __builtin_popcountll(x)
using namespace std;
ll k, n, q, node;
vector<int>vec[200010];
int dp[100010][16], dp1[100010][16];
void dfs(int node, int parent)
{
	dp[node][0] = 1, dp1[node][0] = 1;
	for (int i = 0; i < vec[node].size(); i++)
	{
		int child_node = vec[node][i];
		if (child_node != parent)
		{
			dfs(child_node, node);
			/*for (int k = 1; k <= 15; k++)
			{
				for (int j = 0; j < k; j++)
				{
					dp1[node][k] += (1LL * dp[node][j] * dp[child_node][k - j - 1]);
				}
			}*/
			for (int j = 1; j <= 15; j++)
			{
				dp[node][j] += dp[child_node][j - 1];
			}
		}
	}
}
inline void rec(int node, int parent)
{
	if (parent != 0)
	{
		dp1[node][0] = 1;
		dp1[node][1] = dp[node][1] + 1;
		for (int i = 2; i <= 15; i++)
		{
			if (dp1[parent][i - 1] != 0)
				dp1[node][i] = dp[node][i] + (dp1[parent][i - 1] - dp[node][i - 2]);
		}
	}
	for (int i = 0; i < vec[node].size(); i++)
	{
		int child_node = vec[node][i];
		if (child_node != parent)
		{
			rec(child_node, node);
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	cin >> n;
	for (ll i = 0; i < n - 1; i++)
	{
		int a, b;
		cin >> a >> b;
		vec[a].push_back(b);
		vec[b].push_back(a);
	}
	dfs(1, 0);
	//cout << "the demo is endl\n";
	/*for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= 15; j++)
			dp[i][j] += dp[i][j - 1];
		//cout << endl;
	}*/
	for (int i = 0; i <= 15  ; i++)
	{
		dp1[1][i] = dp[1][i];
	}
	rec(1, 0);
	cin >> q;
	while (q--)
	{
		cin >> node >> k;
		int ans = 0;
		for (int i = 0; i <= k; i++)
		{
			//int child_node = vec[node][i];
			//	cout << "@@@ " << child_node << "%%% " <<dp[child_node][k - 1]<<endl;
			ans += dp1[node][i];
		}
		//ans++;
		cout << ans << endl;
	}
	return 0;
}