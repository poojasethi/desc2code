#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5 + 10;
vector<pair<int, int> > edges;
int dp[16][MAXN];
int up[2][MAXN];
int down[2][MAXN];
vector<vector< pair<int, int> > > grf(MAXN);
int main(){
	edges.push_back(make_pair(0, 0));
	int N;
	cin >> N;
	for(int i = 1;i < N;++i){
		int x, y;
		scanf("%d%d", &x, &y);
		edges.push_back(make_pair(x, y));
		grf[x].push_back(make_pair(i, y));
		grf[y].push_back(make_pair(-i, x));
	}

	memset(dp, 0, sizeof(dp));
	memset(up, 0, sizeof(up));
	memset(down, 0, sizeof(down));
	for(int i = 1;i <= N - 1;++i){
		dp[0][i] = 1;
		up[0][i] = 1;
		down[0][i] = 1;
	}
	for(int k = 1;k <= 15;++k){
		for(int i = 1;i <= N - 1;++i){
			up[k&1][i] = 0;
			down[k&1][i] = 0;
		}
		for(int i = 1;i <= N;++i){
			int sz = grf[i].size();
			for(int j = 0;j < sz;++j){
				int next = grf[i][j].second;
				int edId = grf[i][j].first;
				if(edId < 0){
					dp[k][next] += up[(1 - (k&1))][-edId];
				} else{
					dp[k][next] += down[(1 - (k&1))][edId];
				}
			}
		}
		for(int i = 1;i <= N - 1;++i){
			int u = edges[i].first;
			int v = edges[i].second;
			up[k&1][i] += dp[k][v] - down[(1 - (k&1))][i];
			down[k&1][i] += dp[k][u] - up[(1 - (k&1))][i];
		}
		// cout << "K :" << k << "\n";
		// for(int i = 1;i <= N;++i){
		// 	cout << i << " " << dp[k][i] << "\n";
		// }
		// for(int i = 1;i <= N - 1;++i){
		// 	cout << i << " " << up[(k&1)][i] << " " << down[k&1][i] << "\n";
		// }
		// cout << "\n";
	}
	for(int i = 1;i <= N;++i){
		for(int k = 1;k <= 15;++k){
			dp[k][i] += dp[k - 1][i];
		}
	}
	int q;
	cin >> q;
	while(q--){
		int u, k;
		scanf("%d%d", &u, &k);
		printf("%d\n", dp[k][u]);
	}
	return 0;
}