#include<bits/stdc++.h>
using namespace std;
vector<long >v[1000005];
long  dp[1000005][20];
long dp1[1000005][20];
long  p[1000005];
void dfs(long  src)
{


    //dp[src][0]=1;
    for(long  i=0;i<v[src].size();i++)
    {
        long temp=v[src][i];

        if(temp!=p[src])
        {
               p[temp]=src;
        dfs(v[src][i]);
        for(long  j=1;j<=15;j++)
        {
            dp[src][j]+=dp[v[src][i]][j-1];
        }
        }
    }

    dp[src][0]=1;
}
void dfs1(long  src)
{
   if(src!=1)
   {
       long  x=p[src];
       dp1[src][1]++;
       for(long  i=2;i<=15;i++)
       {

           dp1[src][i]=dp1[src][i]+dp1[x][i-1]-dp[src][i-2];

       }
   }
   for(long  i=0;i<v[src].size();i++)
   {
       if(v[src][i]!=p[src])
       dfs1(v[src][i]);
   }
   return;
}
int  main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(false);
    long  n;
    cin>>n;
    for(long  i=0;i<n-1;i++)
    {
        long  a,b;
        cin>>a>>b;
        v[a].push_back(b);
        v[b].push_back(a);

    }

    dfs(1);
    for(int i=1;i<=n;i++)
    {
        for(int j=0;j<=15;j++)
        {
           dp1[i][j]=dp[i][j];
        }
    }
    dfs1(1);

    long  q;
    cin>>q;
    for(long  i=0;i<q;i++)
    {
        long  n,k;
        cin>>n>>k;
        long  sum=0;
        for(long  i=0;i<=k;i++)
        {
            sum=sum+dp1[n][i];
        }
        cout<<sum<<"\n";
    }
    return 0;

}
