Aditya is playing a game with Dhivya. There is a weighing scale with 2 pans. There are also N weights numbered from 1 to N in a queue, owned by Dhivya. Aditya initially has no weights with him. Aditya processes the weights owned by Dhivya one-by-one. At any point of time, he weighs the weights that he owns against the next weight in queue.
For example, if after 2 iterations, Aditya somehow owned the weights numbered 1 and 2 of weight 30 and 50 respectively, and the weights with Dhivya (numbered 3,4 and 5) are 90,80, and 100, then in the next iteration Aditya weighs his weights (30+50=80) against the next weight in queue (90). So in this iteration, Aditya loses to Dhivya
Aditya does not want to lose to Dhivya in any iteration. That is, in every iteration, he always wants that the total weights with him outweighs the next weight in queue. In iterations when this is not possible, he pays Dhivya the amount for the next weight in queue and adds that weight to his collection; then both agree that Aditya won that iteration. He has the option to buy the next weight in queue from Dhivya, even if he can win that iteration. Obviously, he must buy the first weight, since initially he has no weights with him.
Find out the minimum money he needs to spend such that he wins all the iterations.
 
Input
The first line will contains the number of weights N, all of which are with Dhivya in the beginning.
The subsequent N lines contain 2 integers each : the price for that weight (Pi) and the weight (Wi).
 
Output
Print one integer - the minimum amount Aditya needs to pay to Dhivya.
 
Constraints
1<=N<=100
1<=Pi<=10
1<=Wi<=1,000,000,000
 
Example
Input :
3
3 10
1 5
8 12
Output :
4
Explanation :
Aditya has to buy the first weight (total sum payable = 3). He can win the next iteration, but then he will have to buy the 3rd weight to win the game (total sum payable =3+8 =13). Instead he could have bought the second weight and then he would have won the game with total sum payable = 3+1 =5.
