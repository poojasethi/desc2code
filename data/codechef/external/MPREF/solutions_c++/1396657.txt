#include <iostream>
#include <stdio.h>
#include <limits.h>

using namespace std;

#define MAXN 20
#define MAXP 10000
#define INF INT_MAX

int arr[MAXP], b[MAXP + 1];
int Left[MAXP], Right[MAXP];
long long int inversions;

void merge(int p, int q, int r){
	int i, j, L, R, K;
	
	L = R = 0;
    K = p;
	
    while(p <= q) {
		Left[L++] = arr[p];
		p++;
	}
	
	q = q + 1;
	while(q <= r) {
		Right[R++] = arr[q];
		q++;
	}
	
	i = j = 0;
	while(i < L && j < R) {
		if(Left[i] <= Right[j])
			arr[K++] = Left[i++];
			
		else {
			arr[K++] = Right[j++];
			inversions += (L - i);
		}
	}
	
	while(i < L)
		arr[K++] = Left[i++];
		
	while(j < R)
  		arr[K++] = Right[j++];
}

void mergesort(int p, int r){
	int q;
	if(p < r){
		q = (p + r) / 2;
		mergesort(p, q);
		mergesort(q + 1, r);
		merge(p, q, r);
	}
}

int pref[MAXN][MAXP];

int main(){
	int N, M;
    long long int ans;
	
	ans = INF;
	scanf("%d %d", &N, &M);
	
	for(int i = 0; i < N; i++) {
    	for(int j = 0; j < M; j++)
    		scanf("%d", &pref[i][j]);
    }
	
    for(int i = 0; i < N; i++) {
            for(int k = 0; k < M; k++) 
                    b[pref[i][k]] = k + 1;
            
            inversions = 0;
            for(int j = 0; j < N; j++) {
                    for(int k = 0; k < M; k++) 
                            arr[k] = b[pref[j][k]];
                    mergesort(0, M - 1);
            }
            
            ans = min(ans, inversions);
    }
    	
	printf("%lld\n", ans);
	return 0;
}
