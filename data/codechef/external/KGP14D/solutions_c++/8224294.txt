/*****************************************************************************************/
/*																		     			 */
/*  					Adarsh Pugalia 										 			 */
/*																			 			 */
/*****************************************************************************************/

#include <iostream>
#include <stdio.h>
#include <vector>
#include <math.h>
#include <set>
#include <queue>
#include <algorithm>
#include <stack>
#include <cmath>
#include <cassert>
#include <map>
#include <limits>
#include <cassert>
 
#define ll long long int
#define vi vector <int>
#define vl vector <ll> 
#define pii pair<int, int>
#define pll pair<ll, ll>
#define vpii vector <pii >
#define vpll vector <pll >
 
 
#define f first
#define s second
 
#define sd(n) scanf("%d", &n)
#define sl(n) scanf("%lld", &n)
#define slf(n) scanf("%lf", &n)

#define pd(n) printf("%d", n);
#define pl(n) printf("%lld", n);
#define ps printf(" ")
#define pe printf("\n")

#define rep(i,j,k) for(int i=j; i<=k; i++)
#define repd(i,j,k) for(int i=j; i>=k; i--)

#define sz(n) (int)n.size()-1 
#define pb push_back
#define pob pop_back
#define mp make_pair
 
#define max_size 5005
#define max_capacity INT_MAX
#define max_string_size 1000
#define max_node_size 340
#define max_power 26
#define max_log 17
#define max_sieve_size 1005

#define INF 1000000000
#define MOD 1000000007
 
using namespace std;

string tolower(string w) {
	rep(i,0,w.length()) {
		if(w[i]>='A' && w[i]<='Z')
			w[i] = 'a' + w[i] - 'A';
	}

	return w;
}

vpll a;
ll dp[max_size][max_size];

/* variables */

void preprocess(){
	
}

void init(){
	a.clear();
	rep(i,0,max_size-1)
		rep(j,0,max_size-1)
			dp[i][j] = INF;
}

bool comp(pll i, pll j) {
	if(i.s==j.s)
		return i.f<j.f;

	return i.s<j.s;
}

void solve(int test_case){
	init();

	int n;
	sd(n);

	rep(i,1,n) {
		ll num;
		sl(num);

		a.pb(mp(num, 0));
	}

	rep(i,1,n) {
		ll num;
		sl(num);

		if(num==-1)
			num = INF;
		else
			num -= 30;

		a[i-1].s = num;
	}

	sort(a.begin(), a.end(), comp);

	dp[0][0] = 0;

	rep(i,1,n) {
		rep(j,1,i) {
			dp[i][j] = dp[i-1][j];

			if(dp[i-1][j-1]+a[i-1].f<=a[i-1].s)
				dp[i][j] = min(dp[i][j], dp[i-1][j-1]+a[i-1].f);
		}
	}

	repd(i,n,1) {
		if(dp[n][i]!=INF) {
			pd(n-i); pe;
			return;
		}
	}

	cout<<n<<endl;
}

int main(){
	preprocess();

	int t=1;
	cin>>t;
	rep(i,1,t){
		cout<<"Case "<<i<<": ";
		solve(i);
	}
	return 0;
}