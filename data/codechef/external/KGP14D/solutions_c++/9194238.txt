#define ll long long
#include<algorithm>
#include<iostream>
#include<cstdio>
using namespace std;
int n;
ll inf=1000000000000ll;
ll mdp[104][104];
struct inter
{
	ll st, dur;
};
bool operator < (inter i1, inter i2)
{
	if(i1.st !=i2.st)return i1.st< i2.st;
	return i1.dur < i2.dur;
}
inter arr[104];

ll dp(int i, int k)
{
	if(k<0)return -inf;
	if(i==n)
	{
		if(k==0)return inf;
		return -inf;
	}
	if(mdp[i][k]!=-inf-1)return mdp[i][k];
	ll ans=dp(i+1, k-1);
	for(int j=i+1;j<=n;++j)
	{
		int rem=j-i-1;
		if(dp(j, k-rem)-arr[i].dur >=0)
		{
			ll now = dp(j, k-rem)-arr[i].dur;
			ans=max(ans, min(arr[i].st, now));
		}
	}
	return mdp[i][k]=ans;
}
ll doit()
{
	for(int i=0;i<104;++i)
		for(int j=0;j<104;++j)
			mdp[i][j]=-inf-1;
	scanf("%d", &n);
	ll ans=n;
	int nn=0;
	ll qwer=0;
	ll ax[104], bx[104];
	for(int i=0;i<n;++i)scanf("%lld", &ax[i]);
	for(int i=0;i<n;++i)scanf("%lld", &bx[i]);
	for(int i=0;i<n;++i)
	{
		ll a=ax[i],b=bx[i];
		if(b!=-1)
		{
			if(b-30-a<0)
			{
				qwer++;
			}
			else
			{
				arr[nn].st=b-30-a;
				arr[nn].dur=a;
				nn++;
			}
		}
	}
	n=nn;
	if(n==0)
	{
		return qwer;
	}
	sort(arr, arr+n);
	for(int k=0;k<=n;++k)
	{
		if(dp(0, k)>=0)ans=min(ans, (ll)k);
	}
	return ans+qwer;
}
int main()
{
	int t;
	scanf("%d", &t);
	int i=1;
	while(t--)
	{
		printf("Case %d: %lld\n", i, doit());
		i++;
	}
	return 0;
}
