# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,PII> TRI;
typedef vector<string> VS;

#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define mt(a,b,c) mp(a,mp(b,c))
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)

inline int inp()
{
 register int r=0,c;
 for(c=getchar_unlocked();c<=32;c=getchar_unlocked());
 if(c=='-')
  return -inp();
 for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
 return r;
}
struct node
{
    int req;
    int dep;
}edge[104];
bool compare(const node&i,const  node &j)
{
    if(i.dep==j.dep)
        return i.req<j.req;
    return i.dep<j.dep;
}
int dp[104][10000],k,ct,ans,a[104],b[104];
int main()
{

 int t,X=0,i,j,m;
 t = inp();
 while(t--) {
        X++;
        m=0;
  k=inp();
  ct=0;
  memset(dp,0,sizeof(dp));
  for(i=0;i<k;i++)
    a[i]=inp();
  for(i=0;i<k;i++)
    {
   b[i]=inp();
    if(b[i]!=-1)
    {
        edge[ct].req=a[i];
        edge[ct++].dep=b[i];
        m=max(m,b[i]);
    }
    }
    std::sort(edge,edge+ct,compare);

    for(i=0;i<ct;i++)
        dp[i][0]=0;
    for(i=0;i<ct;i++)
    {
        for(j=1;j<=m;j++)
        {
            if(i==0)
            {
                if(((j-edge[i].req)>=0 )&& ((j+30)<=edge[i].dep))
                    dp[i][j]=1;
                else
                    dp[i][j]=0;
            }
            else
            {
                dp[i][j]=dp[i-1][j];
                 if(((j-edge[i].req)>=0 )&& ((j+30)<=edge[i].dep))
                   {
                       for(k=0;k<=(j-edge[i].req);k++)
                        dp[i][j]=max(dp[i][j],dp[i-1][k]+1);
                   }
            }
        }
    }

    ans=0;
    for(i=0;i<=m;i++)
        ans=max(ans,dp[ct-1][i]);
    printf("Case %d: %d\n",X,ct-ans);
    }
 return 0;
}
