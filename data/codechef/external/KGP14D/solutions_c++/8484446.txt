# include <iostream>
# include <stdio.h>
# include <math.h>
# include <list>
# include <algorithm>
# include <limits>
#include <vector>
#include <ctype.h> // for isupper function
#include <string>      
#include <sstream> 
#include <bits/stdc++.h>
using namespace std;

#define pb(x) push_back(x)
#define ppb pop_back
#define mp(x,y) make_pair((x),(y))
//#define sd(n) scanf("%d" , &n);
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define mod 1000000007
#define maX(a,b)   ( (a) > (b) ? (a) : (b))
#define miN(a,b)   ( (a) < (b) ? (a) : (b))
#define bitcount   __builtin_popcount
#define mset(a,x) memset(a,x,sizeof(a)) //set elements of array to some value
#define char2Int(c) (c-'0')
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define forit(it, s) for(typeof((s).begin()) it = (s).begin(); it != (s).end(); ++it) 
#define F first
#define S second
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define LEN(X) strlen(X)

const double pi = acos(-1.0);

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pair<int,int> > vpii;
typedef vector<long long> vl;
typedef pair<long long,long long> pll;
typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs;
typedef long double ld;
typedef  long long ll;
typedef unsigned long long ull;
string NumberToString ( ll Number )
{
	stringstream ss;
	ss << Number;
	return ss.str();
}


ll StringToNumber ( const string &Text )//Text not by const reference so that the function can be used with a 
{                               //character array as argument
	stringstream ss(Text);
	ll result;
	return ss >> result ? result : 0;
}

void solve(){
	
}
int main(){
	std::ios::sync_with_stdio(false);  
	// uncomment it or use scanf and printf
	//cout << "Minimum value for long long int(or other datatype): " << std::numeric_limits<long long int>::min() << '\n';
	// instead of min() use max() to get the maximum value in the previous case
	//scanf returns the number of items succesfully converted  or EOF on error
	
    int n;
    cin>>n;
    for(int a =1; a<=n; a++){
		int k;
		cin>>k;
		vector< pair<int, int> > sched;
		vector<int> dur, dep;
		for(int i=0; i<k; i++){
			int x;
			cin>>x;
			dur.pb(x);
		}
		for(int i=0; i<k; i++){
			int x;
			cin>>x;
			dep.pb(x);
		}
		for(int i=0; i<k; i++){
			if(dep[i]!=-1) 	sched.push_back(make_pair(dep[i]-30, dur[i]));
		}
		
		sort(sched.begin(), sched.end());
		/*for(int i=0; i<sched.size(); i++){
			cout<<sched[i].first<<" "<<sched[i].second<<endl;
		}*/
		
		int maxDepTime = 0;
		int sz = sched.size();
		for(int i=0; i<sz; i++){
			maxDepTime = max(maxDepTime, sched[i].first);
		}
		
		int dp[sz][maxDepTime+2];
		for(int i=0; i<sz; i++){
			dp[i][maxDepTime+1]=0;
		}
		for(int i=sz-1; i>=0; i--){
			for(int j=maxDepTime; j>=0; j--){
				if((j+sched[i].second)<=sched[i].first){
					int tem = 1;
					if(i<(sz-1) && (j+sched[i].second)<=maxDepTime){
						tem+= dp[i+1][j+sched[i].second];
					} 
					if(i<(sz-1)) dp[i][j] = max( tem, dp[i+1][j]);
					else dp[i][j]=tem;
				}
				else{
					if(i==(sz-1)) dp[i][j]=0;
					else dp[i][j] = dp[i+1][j];
				}
			}
		}
		
		int ans = sz - dp[0][0];
		
		cout<<"Case "<<a<<": "<<ans<<endl;
		
	}

}
