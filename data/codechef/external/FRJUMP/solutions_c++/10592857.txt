#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
#include <cmath>
#include <cstring>
#include <set>
#define MAX 100100
#define MOD 1000000007LL
using namespace std;
 
int sq, v[MAX];
long long resp[MAX];
double logs[MAX];

 
/*Lema para algunos enteros positivos a b, exten euclid regresa
d = gcd(a, b) = x*a+y*b para algunos enteros x e y*/
pair<int, int > ExtendEuclid(int a, int b){
	if(b == 0)
		return make_pair(1, 0);/*(1,0,a)*/
	pair<int, int> resp = ExtendEuclid(b, a%b);/*(x, y, d) = ExtendEuclid(b, a%b)*/
	return make_pair(resp.second, resp.first - ((a/b)*resp.second));/*(y, (x-(a/b)*y), d)*/
}
 
long long inverso(int a){
    return (MOD+ExtendEuclid(a, MOD).first)%MOD;
}

void prec(int n){
    for(int i = 1; i <= sq; i++){
        resp[i] = 1, logs[i] = 0;
        for(int j = 1; j <= n; j+=i){
            resp[i] = (resp[i]*v[j])%MOD;
            logs[i] += log10(v[j]);
        }
//        cout << logs[i] << " " << resp[i] << endl;
    }
    return;
}
 
void update(const int p, int ant){
    int mini = min(sq, p-1);
//    cout << raiz << endl;
    int inv = inverso(ant);
    double dif = log10(v[p])-log10(ant);
    if(p == 1){
        for(int i = 1; i <= sq; i++){
            resp[i] = (resp[i]*inv)%MOD;
            resp[i] = (resp[i]*v[p])%MOD;
            logs[i] += dif;
        }        
    }
    else{
        for(int i = 1; i <= mini; i++){
            if((p-1)%i == 0){
                resp[i] = (resp[i]*inv)%MOD;
                resp[i] = (resp[i]*v[p])%MOD;
                logs[i] += dif;
            }
        }
    }
    return;
}
 
void update_all(int r, int n){
    resp[r] = 1;
    logs[r] = 0;
    for(int i = 1; i <= n; i+=r){
        resp[r] = (resp[r]*v[i])%MOD;
        logs[r] += log10(v[i]);
    }
    return;
}

int main() {
    int n, q, opcion, casos, R, p, f;
    cin >> n;
    sq = sqrt(n+0.0)+1;
    for(int i = 1; i <= n; i++)
        scanf("%d", &v[i]);
    prec(n);
    cin >> q;
    for(int i = 0; i < q; i++){
        scanf("%d", &opcion);
        if(opcion == 1){
            scanf("%d%d", &p, &f);
            int ant = v[p];
            v[p] = f;
            update(p, ant);
        }
        else{
            scanf("%d", &R);
            if(R > sq){
                update_all(R, n);
            }
            int digit = (int)pow(10.0, logs[R]-floor(logs[R])+0.000000001);
            printf("%d %d\n", digit == 10 ? 1 : digit, (int)resp[R]);
        }
    }
    return 0;
} 