import math
import random
M=1000000007
n=int(raw_input())
ap=[int (x) for x in raw_input().split()]
q=int(raw_input())
if n<=10000 or (ap[1]%2==0 and ap[2]%2==1 and ap[3]%2==1 and ap[4]%2==1):
    ap=[0]+ap
    for i in range(q):
        l=[int (x) for x in raw_input().split()]
        if len(l)==2:
            r1=0
            r2=1
            r=l[1]
            i=1
            while i<=n:
                r2=(r2*ap[i])%M
                r1+=math.log10(ap[i])
                i+=r    
            r1=r1-int(r1)
            r1=10**r1
            while r1<1:
                r1*=10
            r1=int(r1+.0000000001)
            print r1,r2
        else:
            ap[l[1]]=l[2]
else:
    # 1 p f
    # 2 R
    M=1000000007
    def ebsmod(a,b):
        i=1
        res=1
        while i<=b:
            if b&i:
                res=(res*a)%M
            i*=2
            a=(a*a)%M
        return res
    ap=[1]+ap
    log_array=[math.log10(i) for i in ap]
    log_sum=[0]*(n+1)
    prod=[1]*(n+1)
    for i in range(2,n+1):
        prod[1]=(prod[1]*ap[i])%M
        log_sum[1]+=log_array[i]
    for i in range(2,n+1):
        j=i+1
        while j<=n:
            prod[i]=(prod[i]*ap[j])%M
            log_sum[i]+=log_array[j]
            j+=i
    a1=ap[1]
    log_a1=math.log10(a1)
    for i in range(q):
        l=[int (x) for x in raw_input().split()]
        if len(l)==2:
            R=l[1]
            first_digit=log_sum[R]+log_a1
            first_digit=first_digit-int(first_digit)
            first_digit=10**first_digit
            while first_digit<1:
                first_digit*=10
            first_digit=int(first_digit+.0000000001)
            product=(prod[R]*a1)%M
            print first_digit,product
        else:
            p=l[1]
            f=l[2]
            if p==1:
                a1=ap[1]=f
                log_a1=math.log10(f)
            else:
                new_log=math.log10(f)
                div=ebsmod(ap[p],M-2)
                upper_limit=int(math.sqrt(p-1))
                for i in range (1,upper_limit+1):
                    if (p-1)%i==0:
                        log_sum[i]=log_sum[i]+new_log-log_array[p]
                        prod[i]=(prod[i]*div)%M
                        prod[i]=(prod[i]*f)%M
                        if i*i!=(p-1):
                            log_sum[(p-1)/i]=log_sum[(p-1)/i]+new_log-log_array[p]
                            prod[(p-1)/i]=(prod[(p-1)/i]*div)%M
                            prod[(p-1)/i]=(prod[(p-1)/i]*f)%M
                log_array[p]=new_log
                ap[p]=f   