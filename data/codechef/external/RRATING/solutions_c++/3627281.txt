#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
vector<long int> mxmn,mintp; 
inline int Scan_f()
{
    register int noRead=0;
    register char p=getchar_unlocked();
    //register char p=getc(stdin);
    for(;p<48 || p>57;p=getchar_unlocked());
    //for(;p<48 || p>57;p=getc(stdin));
    while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getchar_unlocked();}
    //while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getc(stdin);}
    return noRead;
}; 
bool cmp(const long int &a,const long int &b)
{
 return a>b;
}
int main()
{
 long int x,ctr=0,n,pos,T;
 scanf("%ld",&T);
 make_heap(mxmn.begin(),mxmn.end());
 make_heap(mintp.begin(),mintp.end(),&cmp);
 mintp.push_back(0);
 push_heap(mintp.begin(),mintp.end(),&cmp);
 while(T>0)
 {
  n=Scan_f();
  if(n == 1)
  {
   x = Scan_f();
   if(x < mintp.front())
   {
    mxmn.push_back(x);
    push_heap(mxmn.begin(),mxmn.end());
    ctr++;
    if(ctr/3 > mintp.size())
    {
	 mintp.push_back(mxmn.front());
	 push_heap(mintp.begin(),mintp.end(),&cmp);
	 pop_heap(mxmn.begin(),mxmn.end());
	 mxmn.pop_back();
    }
   }
   else
   {
    if(mintp.front() == 0)
    {
     pop_heap(mintp.begin(),mintp.end(),&cmp);
     mintp.pop_back();
    }  
     if(mxmn.size() > 0 && mxmn.front() > x)
     {
      mintp.push_back(mxmn.front());
      push_heap(mintp.begin(),mintp.end(),&cmp);
      pop_heap(mxmn.begin(),mxmn.end());
	  mxmn.pop_back();
	  mxmn.push_back(x);
      push_heap(mxmn.begin(),mxmn.end());
     }
	else
	{  
   	 mintp.push_back(x);
     push_heap(mintp.begin(),mintp.end(),&cmp);
    }
    ctr++;
    if(ctr/3 < mintp.size())
    {
	 mxmn.push_back(mintp.front());
	 push_heap(mxmn.begin(),mxmn.end());
	 pop_heap(mintp.begin(),mintp.end(),&cmp);
	 mintp.pop_back();
    }   
    if(mintp.size() == 0)
    {
	 mintp.push_back(0);
     push_heap(mintp.begin(),mintp.end(),&cmp);				
    }
   }
  }   
  else
  {
   pos = ctr/3;
   if(pos <= 0)
    printf("No reviews yet\n");
   else
    printf("%ld\n",mintp.front()); 	 
  }  	  
  T--;
 } 	
 return 0;
}
 