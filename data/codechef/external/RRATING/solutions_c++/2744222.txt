
/*
 * Author : Karthik Abinav
 */

#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <utility>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <climits>
#include <string.h>
#include <stdint.h>
#include <unistd.h>

using namespace std;

struct node
{
  long key;
  struct node *left;
  struct node *right;
  int height;
  int size;
};

class AVL
{
  public:
  struct node *root;

  AVL()
  {
      root = NULL; 
  }

  int siz(struct node *N)
  {
    if (N == NULL)
      return 0;
    return N->size;
  }
  int height(struct node *N)
  {
    if (N == NULL)
      return 0;
    return N->height;
  }
  struct node* findkthlargest(struct node *t,int k)
  {
    int right_size=siz(t->right);
    if(right_size+1==k)
      return t;
    else if(k<=right_size)
      return findkthlargest(t->right,k);
    else
      return findkthlargest(t->left,k-right_size-1);
  }

  struct node* newNode(long key)
  {
    struct node* node = (struct node*)malloc(sizeof(struct node));
    node->key=key;
    node->left=NULL;
    node->right=NULL;
    node->height=1;  
    node->size=1;
    return node ;
  }

  struct node *rightRotate(struct node *y)
  {
    struct node *x = y->left;
    struct node *T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right))+1;
    y->size = siz(y->left)+siz(y->right)+1;
    x->height = max(height(x->left), height(x->right))+1;
    x->size = siz(x->left) + siz(x->right)+1;

    return x;
  }

  struct node *leftRotate(struct node *x)
  {
    struct node *y = x->right;
    struct node *T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right))+1;
    x->size = siz(x->left) + siz(x->right)+1;
    y->height = max(height(y->left), height(y->right))+1;
    y->size = siz(y->left) + siz(y->right)+1;

    return y;
  }

  int getBalance(struct node *N)
  {
    if (N == NULL)
      return 0;
    return height(N->left) - height(N->right);
  }

  struct node* insert(struct node* node, long key)
  {
    if (node == NULL)
      return(newNode(key));

    if (key < node->key)
      node->left  = insert(node->left, key);
    else
      node->right = insert(node->right, key);

    node->height = max(height(node->left), height(node->right)) + 1;
    node->size = siz(node->left) + siz(node->right) + 1;
    int balance = getBalance(node);


    if (balance > 1 && key < node->left->key)
      return rightRotate(node);

    if (balance < -1 && key >= node->right->key)
      return leftRotate(node);

    if (balance > 1 && key >= node->left->key)
    {
      node->left =  leftRotate(node->left);
      return rightRotate(node);
    }

    return node;
  }


};

int main()
{
    AVL tree;
  int n;
  scanf("%d",&n);
  int num_ins = 0;

  while(n--)
  {

    int a;
    scanf("%d",&a);
    if(a==1)
    {
      long int z;
      scanf("%ld",&z);
      num_ins++;
      tree.root = tree.insert ( tree.root, z ) ;

    }
    else
    {
      if(num_ins>=3)
      {
        struct node *ans = tree.findkthlargest(tree.root,num_ins/3);
        printf("%ld\n",ans->key);
      }
      else
        printf("No reviews yet\n");
    }
  }
  return 0;

}

