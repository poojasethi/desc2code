#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define SIZE 251000
#define MAXI 2100000000
#define MAXL 9100000000000000000L
#define INF 2140000000
#define MOD 1000000007

template <class T>
class my_priority_queue {
	T items[SIZE];
	int heapsize;

	public:
	
	my_priority_queue() {
		heapsize = -1;
	}

	bool empty() {
		return heapsize == -1;
	}

	int size() {
		return heapsize+1;
	}

	void max_heapify(int i) {
		int l = (i << 1) + 1;
		int r = (i << 1) + 2;
		int largest = i;

		if(l <= heapsize && items[i] < items[l])
			largest = l;

		if(r <= heapsize && items[largest] < items[r])
			largest = r;
		
		if(largest != i) {
			swap(items[i],items[largest]);
			max_heapify(largest);
		}	
		return;
	}	

	T top() {
		return items[0];
	}

	T pop() {
		if(heapsize == 0) {
			heapsize--;
			return items[0];
		}
		else {
			T temp1 = items[0], temp2 = items[heapsize];
			items[0] = temp2;
			heapsize--;
			max_heapify(0);
			return temp1;
		}

	}

	void increase_key(T key,int i) {
		if(i > heapsize) {
			cout << "Element do not exist\n";
			return;
		}
		else if(items[i] >= key) {
			cout << "New key is smaller or equal to than current key\n";
			return;
		}
		
		items[i] = key;

		while(i > 0 and items[i] > items[(i-1)/2]) {
			swap(items[i],items[(i-1)/2]);
			i = (i-1)/2;
		}
	}

	void push(T key) {
		items[++heapsize] = -MAXI;
		increase_key(key,heapsize);
	}
};

int main() {
	#ifndef ONLINE_JUDGE
		freopen("in.txt","r",stdin);
	#endif	
	
	int test, q, n = 0, x;
	cin >> test;

	my_priority_queue<int> s1;
	my_priority_queue<int> s2;

	while (test--) {
		scanf("%d",&q);

		if (q == 1) {
			scanf("%d",&x);
			s2.push(x);
			if ((s1.size() + s2.size()) % 3 == 0) {
				s1.push(-s2.top());
				s2.pop();
			}
			else {
				if (!s1.empty() && s2.top() > -s1.top()) {
					int t2 = s2.top();
					int t1 = s1.top();
					s2.pop();
					s1.pop();
					s2.push(-t1);
					s1.push(-t2);
				}
			}
		}
		else {
			if (s1.empty()) {
				printf("No reviews yet\n");
			}
			else {
				printf("%d\n",-s1.top());
			}
		}
	}	

	return 0;
}
