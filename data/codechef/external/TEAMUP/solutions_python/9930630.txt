#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define sc scanf
#define pf printf
ll power(ll a, ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a, b/2);
	temp=(temp*temp);
	if( b&1 )
		temp=(temp*a);
	return temp;
}
class graph
{
	vi * adj;
	public:
		graph(int v)
		{
			adj=new vi[v];
		}
		void add_edge(int u, int v)
		{
			adj[u].pb( v);
			adj[v].pb( u);
		}
		bool dfs(int v, vector<bool>& visited, vi& group)
		{
			visited[v]=true;
			vi::iterator it;
			bool flag=true;
			for(it=adj[v].begin();it!=adj[v].end();it++)
			{
				if(!visited[*it])
				{
					group[*it]=group[v]^1;
					flag=dfs(*it,visited,group);
				}
				else
				{
					if(group[v]==group[*it])
					{
						return false;
					}
				}
			}
			return flag;
		}	
};
int main()
    {
		ios_base::sync_with_stdio(false);
		int i, n, t, k, in, j;
		cin >> t;
		while( t-- )
		{
			cin >> n;
			graph g(n);
			for( i=0;i<n;i++ )
			{
				cin >> k;
				for( j=0;j<k;j++ )
				{
					cin >> in;
					in--;
					g.add_edge(i, in);
				}
			}
			vector<bool> visited(n);
			bool check=true;
			vi group(n);
			for( i=0;i<n;i++ )
			{
				if(!visited[i])
				{
					check=g.dfs(i, visited, group);
					if(!check)
					{
						break;
					}
				}
			}
			if(check)
			{
				for( i=0;i<n;i++ )
				{
					if(!group[i])
						cout << "L";
					else
						cout << "R";
				}
			}
			else
				cout << "-1";
			cout << "\n";
		}
    return 0;
}
