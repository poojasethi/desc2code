#include<bits/stdc++.h>
using namespace std;
char str[100001000];
long long int Idx[100];
char * tostring(int n)
{
    static char str1[100];
    int k =0;
    while(n>0)
    {
        str1[k++] = (n%10)+'0';
        n = n/10;
    }
   // cout<<k<<"\n";
    reverse(str1,str1+k);
    str1[k] = 0;
    return str1;

}
void computeLPSArray(char *pat, int M, int *lps)
{
    int len = 0;  // lenght of the previous longest prefix suffix
    int i;

    lps[0] = 0; // lps[0] is always 0
    i = 1;

    // the loop calculates lps[i] for i = 1 to M-1
    while (i < M)
    {
       if (pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if (len != 0)
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];

           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}

int counter = 0;
void KMPSearch(char *pat, char *txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
    // create lps[] that will hold the longest prefix suffix values for pattern
    int *lps = (int *)malloc(sizeof(int)*M);
    int j  = 0;  // index for pat[]

    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);

    int i = 0;  // index for txt[]
    while (i < N)
    {
      if (pat[j] == txt[i])
      {
        j++;
        i++;
      }

      if (j == M)
      {
        counter++;
        j = lps[j-1];
      }

      // mismatch after j matches
      else if (i < N && pat[j] != txt[i])
      {
        // Do not match lps[0..lps[j-1]] characters,
        // they will match anyway
        if (j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
    free(lps); // to avoid memory leak
}
int main()
{
    int n,k,i,t,j,len;
    char *temp;
    cin>>t;
    while(t--)
    {
        counter =0;

        cin>>n>>k;
        str[0] = 0;
        len = 0;
        for(i=1;i<=n;i++)
        {
            temp = tostring(i);
            for(j=0;temp[j] !=0;j++)
            {
                str[len + j] = temp[j];
            }
            len = len +j;
        }
        str[len] = 0;
        char *str2 = tostring(k);
        KMPSearch(str2,str);
        cout<<counter<<"\n";
    }
	return 0;
}
