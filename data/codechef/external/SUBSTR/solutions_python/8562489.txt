#include<bits/stdc++.h>

#define _ ios::sync_with_stdio(false);
#define INF (1 << 30)
#define ll_INF (1ll << 60)
#define ll long long
#define mp make_pair
#define pb push_back
#define eb emplace_back
#define mt make_tuple
#define pii pair<int,int>
#define mem(x,a) memset(x, a, sizeof(x))
#define SWAP(a,b) tie(a,b) = mt(b,a)
#define rep(i, begin, endd) for (__typeof(endd) i = (begin) - ((begin) > (endd)); i != (endd) - ((begin) > (endd)); i += 1 - 2 * ((begin) > (endd)))
inline ll Power(int b, int p) { ll ret = 1; for ( int i = 1; i <= p; i++ ) ret *= b; return ret; }

#define N 100005
/*sort(begin(t), end(t), [](pii a, pii b){
  if(a.first < b.first) return true;
  if(a.first == b.first) return(a.second < b.second);
  return false; 
});*/
using namespace std;
int cnt = 0;
void kmp(const string &needle, const string &haystack) {
  int m = needle.size();
  vector<int> border(m + 1);
  border[0] = -1;
  for (int i = 0; i < m; ++i) {
    border[i+1] = border[i];
    while (border[i+1] > -1 and needle[border[i+1]] != needle[i]) {
      border[i+1] = border[border[i+1]];
    }
    border[i+1]++;
  }
 
  int n = haystack.size();
  int seen = 0;
  for (int i = 0; i < n; ++i){
    while (seen > -1 and needle[seen] != haystack[i]) {
      seen = border[seen];
    }
    if (++seen == m) {
      cnt++;
  seen = border[m]; // There are no more characters in needle, so with the next input character let's try with the border of the whole needle.
    }
  }
}
int main()
{_
    int t;
    cin>>t;
    while(t--)
    {
      int n,k;
      cin>>n>>k;
      string txt;
      for(int i=1; i<=n; i++)
      {
        stack<char> tem;
        int z = i;
        while(z)
        {
          tem.push((z%10+'0'));
          z/=10;
        }
        while(!tem.empty())
        {
          txt+=tem.top();
          tem.pop();
        }
      }

      string pat;
      stack<char> tem;
      while(k)
      {
        tem.push((k%10)+'0');
        k/=10;
      }
      while(!tem.empty())
      {
        pat+=tem.top();
        tem.pop();
      }
      kmp(pat,txt);
      cout<<cnt<<"\n";
      cnt = 0;
    }

}




