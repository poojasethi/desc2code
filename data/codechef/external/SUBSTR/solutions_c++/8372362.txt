#include<bits/stdc++.h>
#define rep(i,x,y) for(i=x;i<y;i++)
#define rrep(i,x,y) for(i=x;i>=y;i--)
#define trv(y,x) for(typeof(x.begin())y=x.begin();y!=x.end();y++)
#define trvr(y,x) for(typeof(x.rbegin())y=x.rbegin();y!=x.rend();y++)
#define pb(f) push_back(f)
#define pi(a) printf("%d\n",a)
#define pil(a) printf("%lld\n",a)
#define pi_ printf("\n")
#define pil(a) printf("%lld\n",a)
#define sc(a) scanf("%d",&a)
#define ll long long
#define scl(a) scanf("%lld",&a)
#define scs(a) scanf("%s",a)
#define mp make_pair
#define fi first
#define se second
#define maxn 2000005
using namespace std;
//#include<windows.h>
//FILE *fin = freopen("nice.in","r",stdin);
//FILE *fout = freopen("nice.out","w",stdout);
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector< pii > vpii;
void preprocessing(char* pat,int M,int *lps);
char a[10000008],b[10];
int KMPsearch(char* pat)
{
	int cnt=0;
	char *txt=a;
	int M=strlen(pat);
	int N=strlen(txt);
	int *lps=(int *)malloc(M*sizeof(int));
	preprocessing(pat,M,lps);
	int i=0; //index for txt
	int j=0; //index for pat
	while(i<N)
	{
		if(pat[j]==txt[i])
		{
			j++;
			i++;
		}
		else
		{
			//i will only increase
			if(j!=0)
			j=lps[j-1];
			else
			i++;
		}
		if(j==M)
		{
			//pattern found
			cnt++;
			j=lps[j-1];
		}
	}
	free(lps);
	return cnt;
}
void preprocessing(char* pat,int M,int *lps)
{
	int len=0;//length of previous maximum match
	int i=1; //pat fix var
	lps[0]=0;
	while(i<M)
	{
		if(pat[i]==pat[len])
		{
			lps[i]=++len;
			i++;
		}
		else if (len==0)
		{
			lps[i]=0;
			i++;
		}
		else
		{
			//main case
			len=lps[len-1];
			// This is tricky. Consider the example AAACAAAA and i = 7.
		}
	}
}

int main()
{
	int n,m,i,j,k;
	int t;
	sc(t);

	while(t--)
	{
		sc(n);sc(k);
		int cnt=0;
		rep(i,1,n+1)
		{
			sprintf(a+cnt,"%d",i);
			cnt+=strlen(a+cnt);
		}
	//	printf("%s",a);
		
		sprintf(b,"%d",k);
		pi(KMPsearch(b));
		
	}
}