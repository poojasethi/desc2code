#include <iostream>
#include <cstdio>

using namespace std;

const int N = 111;
char s[N][N];
int n, m, p, magnitude[N][N];

int modPow(int a, int b, int c) {
    if (b == 0) return 1 % c;
    if (b == 1) return a % c;
    int res = modPow(a, b / 2, c);
    res = (res * res) % c;
    if (b % 2 == 1) res = (res * a) % c;
    return res;
}

void solve(int testNumber) {
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i) {
        scanf("%s", s[i]);
    }
    scanf("%d", &p);

    int ice = 0, fire = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (s[i][j] == 'I') {
                ++ice;
                magnitude[i][j] = modPow(ice, i + j, p);
            }
            else {
                ++fire;
                magnitude[i][j] = -modPow(fire, i + j, p);
            }
        }
    }
    for (int j = 0; j < m; ++j) {
        for (int i = 1; i < n; ++i) {
            magnitude[i][j] += magnitude[i - 1][j];
        }
    }
    int area = 0, maxSum = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = i; j < n; ++j) {
            int lastPos = -1, globalMinSum = 0, curMaxSum = 0;
            for (int k = 0; k < m; ++k) {
                int val = magnitude[j][k] - (i > 0 ? magnitude[i - 1][k] : 0);
                curMaxSum += val;
                if (maxSum < curMaxSum - globalMinSum || maxSum == curMaxSum - globalMinSum && area < (j - i + 1) * (k - lastPos)) {
                    maxSum = curMaxSum - globalMinSum;
                    area = (j - i + 1) * (k - lastPos);
                }
                if (curMaxSum < globalMinSum) {
                    globalMinSum = curMaxSum;
                    lastPos = k;
                }
            }
        }
    }

    printf("%d\n", area);
}

int main() {
    int testCount;
    scanf("%d", &testCount);
    for (int testNumber = 1; testNumber <= testCount; ++testNumber) {
        solve(testNumber);
    }
    return 0;
}

