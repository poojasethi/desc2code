
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <string>
#include <bitset>
#include <cmath>
#include <list>
#include <cstdlib>
#include <map>
#include <cstring>
#include <set>
#include <stack>
#include <sstream>
#include <queue>
#include <ctime>

using namespace std;

#define debug(x) cout<<#x<<" = "<<x<<"\n"
#define FOR(i,a,b)  for(int (i) = (a);(i)<(b);(i)++)
#define   REP(i,n) FOR(i,0,n)
#define  INF (1<<29)
#define         pb push_back
#define 	     sz size()
#define         mp make_pair
#define all(a) a.begin(),a.end()
#define SI(n)               scanf("%d",&n);
#define SL(n)               scanf("%lld",&n);
#define fill(ar,val) memset(ar,val,sizeof ar)
#define FORE(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define fi first
#define se second
typedef long long ll;
typedef pair<int,int>  pii;
typedef vector<string> vs;
ll s2i(string s) { istringstream iss(s); ll x;iss>>x; return x;}
string i2s(ll x) { ostringstream oss; oss<<x; return oss.str();}
/* Main code begins now */



long long mod;

long long powz( long long a, long long b)
{

	if( b == 0)
		return 1;	

	if ( b & 1)
		return a* (powz(a,b-1))%mod;
	else {
	       long long k = powz(a,b/2);
       		return k*k%mod;
 	}
}	






long long an[102][102];
long long colsum[102][102];
long long v[102];
long long a[101];
long long ans ;
long long sum;
long long area  ;
void calculate_max_array( long long a[] , long long n, long long r)
{

//	for ( int i = 0; i < n; i++)
//		cout << a[i]<<" ";
//	cout << endl;
	int dp[n];
	dp[0] = a[0];
	v[0] = 0;
	if ( dp[0] == ans)
		area = max(area,1*r);
	else if( dp[0] > ans) {
		area = 1*r;
		ans = dp[0];
	}
	long long maxi = a[0];
	long long colwidth = 1;

	for ( int i = 1; i < n; i++) {
		int k = dp[i-1] + a[i];
		if ( k >= a[i]) {
			v[i] = v[i-1];
			dp[i] = k;
		}	
		else {
			v[i] = i;
			dp[i] = a[i];
		}
		if ( ans  == dp[i]  ) {

			colwidth = max(colwidth,i - v[i]+1);
			area = colwidth*r;
			ans = dp[i];
		}
		else if ( ans < dp[i]) {
			colwidth = i - v[i] + 1;
			area = colwidth*r;
			ans = dp[i];
		}	
	}	
}	
	
int main()
{
//	freopen("","r",stdin);
//	freopne("","w",stdout);

	int t;
	scanf("%d",&t);

	while ( t-- ) {
		int n,m;
		string s;
		ans = -1000000;
		scanf("%d%d",&n,&m);
		vector < string > v;
		for ( int i = 0; i < n; i++){
			cin >> s;
			v.pb(s);
		}
		cin >> mod;
		int F = 0;
		int I = 0;
		area = 1;
		for ( int i = 0; i < n; i++) {
			for ( int j = 0; j < m; j++) {
				colsum[i][j] = 0;
				if( v[i][j] == 'I') {


					an[i][j] = (int )powz((++I),i+j);	
				}
				else {
					an[i][j] = - (int)powz((++F),i+j);
					
				}
//				cout << an[i][j]<<" ";
			}
//			cout << endl;
			
		}
//		cout<<"S"<< endl;
		for ( int i = 0; i < m; i++) {
			colsum[0][i] =an[0][i];
//			cout << colsum[0][i]<<" ";
		 	for ( int j = 1; j < n; j++) {
			 
				colsum[j][i] += colsum[j-1][i] + an[j][i];
//				cout<< colsum[j][i] << " ";

			}
//			cout << endl;
		}
	//	 cout <<"as" <<endl;
		for ( int i = 0; i < n; i++) {
			for ( int j = i; j < n; j++) {
				for ( int k = 0; k < m; k++) {
					
				       	if ( i != 0 )
						a[k] = colsum[j][k] - colsum[i-1][k];
					else
						a[k] = colsum[j][k];	
						
				}
				 calculate_max_array(a,m,j-i+1);
			      
		       		
			}
		}	
		cout << area << endl;

	}	
			
	
	return 0;
}














