/* Author : RISHAV GOYAL */

#include <bits/stdc++.h>

using namespace std;

#define LL long long int
#define UL unsigned long long int
#define FOR(i,a,b) for(int i= (int)a; i<= (int)b; i++)
#define pr() printf("Reached here...\n");
#define gc getchar_unlocked
#define po(a) printf("%d\n",a);
#define poo(a) printf("%lld\n",a);
#define si(a) scanf("%d",&a);
#define str strlen
#define pb(x) push_back(x)
#define FORd(i,a,b,d) for(int i=(int)a; i<= (int)b; i+=(int)d)

int gcd ( int a, int b ){int c;while(a!= 0){c=a;a=b%a;b=c;}return b;}
LL powmod(LL a,int b,int n){LL rm=1;while (b){if (b % 2) { rm = (rm * a) % n; }a = (a * a) % n;b /= 2;}return rm;}

void sint(int &x)
{
	register int c = gc();
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

void sll(LL &x)
{
	register LL c = gc();
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

int xyz[3][400040]={0},layer[3][400040]={0};

void update(int n,int it,int f,int q1,int q2,int id){
	if( it==q1 && f==q2){
		layer[id][n] = !layer[id][n];
		xyz[id][n] = f-it+1-xyz[id][n];
		return ;
	}
	int m=(it+f)/2;
	if( q2<=m) update(n*2,it,m,q1,q2,id);
	else if(q1>m) update(n*2+1,m+1,f,q1,q2,id);
	else{
		update(n*2,it,m,q1,m,id);
		update(n*2+1,1+m,f,m+1,q2,id);
	}
	xyz[id][n] = xyz[id][n*2] + xyz[id][n*2+1];
	if( layer[id][n]) xyz[id][n] = f-it+1-xyz[id][n];
}

int query(int n,int it,int f,int q1,int q2,int id,int ct){
	if( it==q1 && f==q2){ if(ct%2) return (f-it+1-xyz[id][n]); else return xyz[id][n];}
	int m=(it+f)/2;
	
	if(q2<=m) return query(n*2,it,m,q1,q2,id,(ct+layer[id][n]));
	if(q1>m) return query(n*2+1,m+1,f,q1,q2,id,ct+layer[id][n]);
	return query(n*2,it,m,q1,m,id,ct+layer[id][n]) + query(n*2+1,m+1,f,m+1,q2,id,ct+layer[id][n]);
}

int main()
{
	int Q,Nxyz[3],i,otype,l,r,T,v;
	LL x1,x2,y1,y2,z1,z2,xred,yred,zred,plane,tot;
	sint(T);
	while(T--){
		sint(Nxyz[0]);sint(Nxyz[1]);sint(Nxyz[2]);sint(Q);
		FOR(i,0,2)Nxyz[i]--;
		FOR(i,1,Q){
			sint(otype);
			if(!otype){
				sint(l);sint(r);
				update(1,0,Nxyz[0],l,r,0);
			}
			else if(otype==1){
				sint(l);sint(r);
				update(1,0,Nxyz[1],l,r,1);
			}
			else if(otype==2){
				sint(l);sint(r);
				update(1,0,Nxyz[2],l,r,2);
			}
			else{
				sint(v);x1=v;sint(v);y1=v;sint(v);z1=v;
				sint(v);x2=v;sint(v);y2=v;sint(v);z2=v;
				xred = query(1,0,Nxyz[0],x1,x2,0,0);
				yred = query(1,0,Nxyz[1],y1,y2,1,0);
				zred = query(1,0,Nxyz[2],z1,z2,2,0);
				plane = xred *( ( y2-y1+1) - yred) + yred * ( (x2-x1+1)-xred) ;
				tot = plane * (z2-z1+1-zred) + ((x2-x1+1)*(y2-y1+1) - plane)*zred;
				poo(tot);
			}
		}
		if(T){
			memset(layer,0,sizeof(layer));
			memset(xyz,0,sizeof(xyz));
		}
	}
	return 0;
}
