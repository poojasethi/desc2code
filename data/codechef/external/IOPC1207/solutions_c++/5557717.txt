#include <bits/stdc++.h>
using namespace std;
#define MAXN 100005

int treeX[4 * MAXN] = { 0 }, treeY[4 * MAXN] = { 0 }, treeZ[4 * MAXN] = { 0 };
bool lazyX[4 * MAXN] = { 0 }, lazyY[4 * MAXN] = { 0 }, lazyZ[4 * MAXN] = { 0 };

#define gc getchar
void read(int &n) {
    n = 0;
    char ch = gc();
    while ( !isdigit(ch) ) ch=gc();
    while ( isdigit(ch) ) {
        n = n*10 + ch-48;
        ch=gc();
    }
}

int query(int node, int start, int end, int left, int right, int tree[], bool lazy[])
{
	if (lazy[node]) {
		tree[node] = (end - start + 1) - tree[node];
		if (start != end) {
			lazy[node << 1] ^= true;
			lazy[(node << 1) + 1] ^= true;
		}

		lazy[node] = false;
	}

	if (end < left || start > right)
		return 0;

	if (start >= left && end <= right)
		return tree[node];

	int mid = (start + end) >> 1;
	return query(node << 1, start, mid, left, right, tree, lazy) + query((node << 1) + 1, mid + 1, end, left, right, tree, lazy);
}

void update(int node, int start, int end, int left, int right, int tree[], bool lazy[])
{
	if (lazy[node]) {
		tree[node] = (end - start + 1) - tree[node];
		if (start != end) {
			lazy[node << 1] ^= true;
			lazy[(node << 1) + 1] ^= true;
		}

		lazy[node] = false;
	}

	if (end < left || start > right || start > end)
		return;

	if (start >= left && end <= right) {
		tree[node] = (end - start + 1) - tree[node];
		if (start != end) {
			lazy[node << 1] ^= true;
			lazy[(node << 1) + 1] ^= true;
		}
		return;
	}

	int mid = (start + end) >> 1;
	update(node << 1, start, mid, left, right, tree, lazy);
	update((node << 1) + 1, mid + 1, end, left, right, tree, lazy);

	tree[node] = tree[node << 1] + tree[(node << 1) + 1];
}

int main()
{
	int t;
	//scanf("%d", &t);
	read(t);
	while (t--) {
		memset(treeX, 0, sizeof treeX);
		memset(treeY, 0, sizeof treeY);
		memset(treeZ, 0, sizeof treeZ);
		memset(lazyX, 0, sizeof lazyX);
		memset(lazyY, 0, sizeof lazyY);
		memset(lazyZ, 0, sizeof lazyZ);

		int nx, ny, nz, q;
		//scanf("%d %d %d %d", &nx, &ny, &nz, &q);
		read(nx); read(ny); read(nz); read(q);

		while (q--)	{
			int op, i, j;
			//scanf("%d", &op);
			read(op);
			if (op == 0) {
				//scanf("%d %d", &i, &j);
				read(i); read(j);
				update(1, 0, nx - 1, i, j, treeX, lazyX);
			}
			else if (op == 1) {
				//scanf("%d %d", &i, &j);
				read(i); read(j);
				update(1, 0, ny - 1, i, j, treeY, lazyY);
			}
			else if (op == 2) {
				//scanf("%d %d", &i, &j);
				read(i); read(j);
				update(1, 0, nz - 1, i, j, treeZ, lazyZ);
			}
			else {
				int x1, y1, z1, x2, y2, z2;
				//scanf("%d %d %d %d %d %d", &x1, &y1, &z1, &x2, &y2, &z2);
				read(x1); read(y1); read(z1); read(x2); read(y2); read(z2);
				long long X = (long long)query(1, 0, nx - 1, x1, x2, treeX, lazyX);
				long long Y = (long long)query(1, 0, ny - 1, y1, y2, treeY, lazyY);
				long long Z = (long long)query(1, 0, nz - 1, z1, z2, treeZ, lazyZ);
				long long gx = (x2 - x1 + 1) - X;
				long long gy = (y2 - y1 + 1) - Y;
				long long gz = (z2 - z1 + 1) - Z;

				long long ans = (X*Y*Z) + (gx*gy*Z) + (gx*Y*gz) + (X*gy*gz);

				printf("%lld\n", ans);
			}
		}
	}
}
