#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<string>
//#include<debugger>
 
using namespace std;
 
#define s(n)					scanf("%d",&n)
#define sl(n) 					scanf("%lld",&n)
#define sf(n) 					scanf("%lf",&n)
#define ss(n) 					scanf("%s",n)
#define INF						(int)1e9
#define LINF					(long long)1e18
#define EPS						1e-9
#define maX(a,b)				((a)>(b)?(a):(b))
#define miN(a,b)				((a)<(b)?(a):(b))
#define abS(x)					((x)<0?-(x):(x))
#define FOR(i,a,b)				for(int i=a;i<b;i++)
#define REP(i,n)				FOR(i,0,n)
#define foreach(v,c)            for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define mp						make_pair
#define FF						first
#define SS						second
#define tri(a,b,c)				mp(a,mp(b,c))
#define XX						first
#define YY						second.first
#define ZZ						second.second
#define pb						push_back
#define fill(a,v) 				memset(a,v,sizeof a)
#define all(x)					x.begin(),x.end()
#define SZ(v)					((int)(v.size()))
#define DREP(a)					sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())
#define debug(args...)			{dbg,args; cerr<<endl;}
#define dline					cerr<<endl	
 
void sc(char &c){
	char temp[4];	ss(temp);	
	c=temp[0];
}
 
struct debugger
{
	template<typename T> debugger& operator , (const T& v)
	{	
		cerr<<v<<" ";	
		return *this;	
	}
} dbg;
 
 
 
 
typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
typedef pair<int,PII> TRI;
 
typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;
typedef vector<TRI> VT;
 
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;
typedef vector<VT> VVT;
 
 
/*Main code begins now */
 
int testnum;
 
 
const int BASE = 1<<17;
int r[3][BASE+BASE];
int f[3][BASE+BASE];
 
int lo,hi,mode;
void update(int ind,int beg,int end)
{
	if(beg>hi || end<lo) return;
	if(lo<=beg && end<=hi)
	{
		r[mode][ind] = end-beg+1 - r[mode][ind];
		f[mode][ind] = 1-f[mode][ind];
		
		int len = end-beg+1;
		for(ind>>=1,len<<=1; ind; ind>>=1,len<<=1)
		{
			r[mode][ind] = r[mode][ind+ind] + r[mode][ind+ind+1];
			if(f[mode][ind])
				r[mode][ind] = len - r[mode][ind];
		}
		return;
	}
	
	int twice=ind<<1;
	int mid = (beg+end)>>1;
	
	update(twice,beg,mid);
	update(twice+1,mid+1,end);
}
 
void updatex(int _lo,int _hi,int _mode)
{
	lo=_lo;
	hi=_hi;
	mode=_mode;
	update(1,0,BASE-1);
}
 
int query(int ind,int beg,int end,int flip)
{
	if(beg>hi || end<lo) return 0;
	if(lo<=beg && end<=hi) return flip ? end-beg+1 - r[mode][ind] : r[mode][ind];
	
	int twice=ind<<1;
	int mid = (beg+end)>>1;
	flip = flip^f[mode][ind];
	
	return query(twice,beg,mid,flip) + query(twice+1,mid+1,end,flip);
}
 
int query(int _lo,int _hi,int _mode)
{
	lo=_lo;
	hi=_hi;
	mode=_mode;
	return query(1,0,BASE-1,0);
}
 
void init()
{
	fill(r,0);
	fill(f,0);
}
	
int NX,NY,NZ,Q;
 
 
 
void preprocess()
{
 
}
 
void solve()
{
	init();
	for(int i=0;i<Q;i++)
	{
		int k; s(k);
		if(k==3)
		{
			int x1,x2,y1,y2,z1,z2;
			s(x1); s(y1); s(z1); s(x2); s(y2); s(z2);
			LL a = query(x1,x2,0); LL na = x2-x1+1-a;
			LL b = query(y1,y2,1); LL nb = y2-y1+1-b;
			LL c = query(z1,z2,2); LL nc = z2-z1+1-c;
			LL ans = a*b*c + a*nb*nc + na*b*nc + na*nb*c;
			//debug(a,na," ",b,nb," ",c,nc);
			printf("%lld\n",ans);
		}
		else
		{
			int c1,c2; 
			s(c1); s(c2);
			updatex(c1,c2,k);
		}
	}
			
		
}
 
 
 
bool input()
{
	s(NX); s(NY); s(NZ); s(Q);
	return true;
}
 
 
int main()
{
	preprocess();
	int T; s(T);
	for(testnum=1;testnum<=T;testnum++)
	{
		if(!input()) break;
		solve();
	}
}