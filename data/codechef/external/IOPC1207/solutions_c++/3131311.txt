#include <iostream>
#include <cmath>
#include <string>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,PII> TRI;
typedef vector<string> VS;

#define GI ({int t;scanf("%d",&t);t;})
#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define mt(a,b,c) mp(a,mp(b,c))
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)

#define MAX 131072

int arr[3][2*MAX];
int flip[3][2*MAX];
int n[3];

void update(int k,int lo,int hi,int beg,int en,int node)
{
    if(en <lo || beg > hi)
        return;
    if(lo <= beg && en <= hi)
    {
        int len = en - beg + 1;
        arr[k][node] = len - arr[k][node];
        flip[k][node] = 1 - flip[k][node];
        for(node = node / 2,len = len * 2;node > 0;node = node / 2,len = len*2)
        {
            arr[k][node] = arr[k][2*node] + arr[k][2*node+1];
            if(flip[k][node])
                arr[k][node] = len - arr[k][node];
        }
        return;
    }
    update(k,lo,hi,beg,(beg+en)/2,2*node);
    update(k,lo,hi,(beg+en)/2+1,en,2*node+1);
}

int query(int k,int lo,int hi,int beg,int en,int node,int flipbit)
{
    if(en <lo || beg > hi)
        return 0;
    if(lo <= beg && en <= hi)
    {
        if(flipbit)
            return en - beg + 1 - arr[k][node];
        else
            return arr[k][node];
    }
    flipbit = flipbit ^ flip[k][node];
    return query(k,lo,hi,beg,(beg+en)/2,2*node,flipbit) + query(k,lo,hi,(beg+en)/2+1,en,2*node+1,flipbit);
}

int main()
{
	int t,q,k;
	scanf("%d",&t);
	while(t--)
    {
        scanf("%d %d %d %d",&n[0],&n[1],&n[2],&q);
        memset(arr,0,sizeof(arr));
        memset(flip,0,sizeof(flip));
        while(q--)
        {
            scanf("%d",&k);
            if(k<3)
            {
                int i,j;
                scanf("%d %d",&i,&j);
                update(k,i,j,0,MAX - 1,1);
            }
            else
            {
                int x1,y1,z1,x2,y2,z2;
                scanf("%d %d %d %d %d %d",&x1,&y1,&z1,&x2,&y2,&z2);
                LL r1,r2,r3,g1,g2,g3;
                r1 = query(0,x1,x2,0,MAX - 1,1,0);
                r2 = query(1,y1,y2,0,MAX - 1,1,0);
                r3 = query(2,z1,z2,0,MAX - 1,1,0);
                g1 = x2 - x1 + 1 - r1;
                g2 = y2 - y1 + 1 - r2;
                g3 = z2 - z1 + 1 - r3;
                LL ans;
                ans = r1*r2*r3 + r1*g2*g3 + g1*r2*g3 + g1*g2*r3;
                printf("%lld\n",ans);
            }
        }
    }
	return 0;
}
