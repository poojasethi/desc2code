#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<string>
#include<cstring>
#include<sstream>
#include<cmath>
#include<climits>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<iterator>
#include<numeric>
#include<assert.h>
using namespace std;
 
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})
#define clear(c,v) memset(c,v,sizeof(c))
#define SET(c) memset(c,-1,sizeof(c))
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%ld",&n)
#define sll(n) scanf("%lld",&n)
 
#define sstr(str) scanf ("%s", str); 
 
#define p(n) printf("%d ",n)
#define pl(n) printf("%ld ",n)
#define pll(n) printf("%lld ",n)
 
#define pf(n) printf("%f\n",n)
#define pd(n) printf("%lf\n",n)
 
#define pnl(n) printf("%d\n",n)
#define plnl(n) printf("%ld\n",n)
#define pllnl(n) printf("%lld\n",n)
 
#define ll long long
#define MAX(a,b) a>b?a:b
#define all(c) c.begin(), c.end()
#define rall(c) c.rbegin(), c.rend()    // reverse all 
#define pb push_back
#define loop(i,a,n) for(int i=a;i<n;i++)
#define MALLOC(n,T) (T*)malloc(n*sizeof(T))

typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<long long> vll;
typedef vector< vector<int> > vvi;
typedef vector< vector<char> > vvc;
typedef vector<string> vstr;
typedef map<int,int> mapii;
typedef pair<int,int> pii;
typedef std::vector<pii> vpii;
 
#define sz(a) int((a).size()) 
#define szar(ar) int(sizeof(ar)/sizeof(ar[0]))
#define osit ostream_iterator 

#define mod 1000000007LL

void print1Dvec(const vi & v, char* msg)
{
  printf("%s\n",msg );
  for (int i = 0; i < sz(v); ++i)
  {
    printf("%d ",v[i] );
  }
  printf("\n");
}

long long Choose(long long n, long long r)
{
  if(r>n) return 0;
  /* nCr = nCn-r 
     very important -> reduces lot of time of computation */
  r = min(r,n-r);
 
  if(r==0) return 1;
 
  // nCr = (n * n-1Cr-1)/r
  long long a = n-r;
  long long b = 0;
 
  long long ans = 1;
  while(a<n)
  {
    ans *= a+1;
    ans /= b+1;
    a += 1;
    b += 1;
  }
  return ans;
}

ll power(ll a, ll b)
{
  ll result = 1;
 
  while (b){
    if (b&1){                  // if(b%2 == 1)
      result = ((result % mod) * (a % mod)) % mod;
    }
    b >>=1 ;              // b = b/2 
    a = (a*a) % mod;
  }
 
  return result;
}


string bin(unsigned n, int& msb)
{
  msb = 0;
  string b;
  b.resize(32);
  int i;
  for (i = 31; i >= 0; --i)
  {
    if(n&(1<<i)) {
      b[31-i] = '1';
      if(!msb) msb = i;
    }
    else {
      b[31-i] = '0';
    }
  }
  return b;    
}

vi ones(32,0);

int getNumberOfWeeks(int msb , int i) {
  int aliceweeks = msb + (ones[0] - ones[i]) - 1;
  int bobweeks = 31 - i;
  int remOnes = ones[i] - 1;
  if(remOnes <= (aliceweeks - bobweeks)) return aliceweeks;
  else {
    remOnes -= aliceweeks - bobweeks;
    if(remOnes&1) return aliceweeks + (remOnes/2) + 1;
    else return aliceweeks + (remOnes/2);
  }
}

int getans(int n) {
  fill(all(ones),0);
  int msb;
  string b = bin(n,msb);
  // cout << b << endl;
  // printf("msb is %d\n",msb );

  if(b[31] == '1') ones[31] = 1;
  for(int i = 30; i >= 0; --i)
  {
    if(b[i] == '1') {
      //printf("b[%d] = 1\n",i );
      ones[i] = ones[i+1] + 1;
    }
    else ones[i]=ones[i+1];
  }

  // print1Dvec(ones,"ones vector :");
  if(ones[0] == 1) return msb-1;

  int minweeks = INT_MAX;
  for (int i = (31-msb)+1; i < 32; ++i)
  {
    if(b[i] == '1') {
      int number = getNumberOfWeeks(msb,i);
      // printf("got %d at %d\n",number,i );
      minweeks = min(minweeks, number);
    }
  }
  return minweeks;
}


int main()
{  
  
  int t;
  s(t);

  while(t--) {
    int n;
    s(n);

    pnl(getans(n));

  }

  


  



  return 0;
  
  
}