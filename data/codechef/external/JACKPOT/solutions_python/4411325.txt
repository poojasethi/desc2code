#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int N = 65;
const int inf = (int)1e9;

vi digs;
int dp[N][2][N][N]; // pos, carry at pos, cost of a, cost of b

int go(int pos, int carry, int a, int b) {
    if(pos == sz(digs)) {
        return carry ? inf : max(a, b);
    }

    int & ret = dp[pos][carry][a][b];
    if(ret != -1) return ret;
    ret = inf;

    if(digs[pos] == 0) {
        if(carry) {
            // (11, 0)
            ret = min(ret, go(pos + 1, 0, a + 2, b + 2));
            // (10, 1)
            ret = min(ret, go(pos + 1, 1, a + 2, b ? b + 1 : 0));
            // (01, 1)
            ret = min(ret, go(pos + 1, 1, a ? a + 1 : 0, b + 2));
        } else {
            // (00, 0)
            ret = min(ret, go(pos + 1, 0, a ? a + 1: 0, b ? b + 1 : 0));
        }
    } else if(digs[pos] == 1) {
        if(carry) {
            // (11, 1)
            ret = min(ret, go(pos + 1, 1, a + 2, b + 2));
        } else {
            // (00, 1)
            ret = min(ret, go(pos + 1, 1, a ? a + 1 : 0, b ? b + 1 : 0));
            // (01, 0)
            ret = min(ret, go(pos + 1, 0, a ? a + 1 : 0, b + 2));
            // (10, 0)
            ret = min(ret, go(pos + 1, 0, a + 2, b ? b + 1 : 0));
        }
    }
    return ret;
}

int main() {
    int T; gi(T);
    rep(z, T) {
        fill(dp, -1);
        digs.clear();
        int n; gi(n);
        while(n > 0) {
            digs.pb(n & 1);
            n >>= 1;
        }
        reverse(all(digs));
        int ans = go(0, 0, false, false);
        pin(ans - 2);
    }
    return 0;
}