#include <iostream>
#include <vector>
#include <climits>
#include <algorithm>

using namespace std;

struct triple{
	int type; // 0-5
	int price;
	int quality;
};
int N, T;
bool mycomp(triple  a, triple  b){
	return (a.quality > b.quality);
}

vector<vector<triple> > A;

int recur(int abtak, int index, int minq){
	if(abtak > T)
		return 0;
	if(index == 6)
		return minq;
	int temp;
	if(A[index].size() == 0){
		temp = recur(abtak, index+1, minq);
		if(temp != 0)
			return temp;
	}
	else{
		for(int i=0;i<A[index].size();i++){
			temp = recur(abtak+A[index][i].price,index+1,min(minq,A[index][i].quality));
			if(temp != 0)
				return temp;
		}
	}
	return 0;
}

int main(){
	triple z;
	A.assign(6,vector<triple>(0,z));
	cin >> N >> T;
	for(int i=0;i<N;i++){
		triple n;
		cin >> n.type;
		cin >> n.price;
		cin >> n.quality;
		n.type--;
		A[n.type].push_back(n);
	}
	for(int i=0;i<6;i++)
		sort(A[i].begin(), A[i].end(), mycomp);
	cout<< recur(0,0,INT_MAX)<<endl;

	return 0;
}