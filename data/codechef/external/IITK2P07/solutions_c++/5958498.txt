#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
#define s(n) scanf("%d",&n)
#define s2(n,m) scanf("%d%d",&n,&m)
#define s3(n,m,l) scanf("%d%d%d",&n,&m,&l)
#define rep(i,n) for(int i=0;i<n;++i)
ll pwr(ll a,ll b,ll mod) {ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;


int sx[300001];
int sy[300001];
int K,L;
int f[300001];

map<int,set<pii> > X,Y;
int DP[300001];
int dp(int n)
{
    if(n==1)
      return DP[n]=0;
    if(DP[n]!=-1)
    return DP[n];    
    int o1=-1e9;
    int o2=-1e9;
    int x=sx[n];
    int y=sy[n];

    set<pii>::iterator newY=upper_bound(X[x].begin(),X[x].end(),pii(y,n));
    set<pii>::iterator newX=upper_bound(Y[y].begin(),Y[y].end(),pii(x,n));

    if(newY!=X[x].end())
    {
      int idx=(*newY).second;
      int dist=abs(y-(*newY).first);

      int availFuel=dp(idx)+f[idx];
      if(dist<=L && availFuel>=K)
        o1=availFuel-K;
    }

    if(newX!=Y[y].end())
    {
      int idx=(*newX).second;
      int dist=abs(x-(*newX).first);

      int availFuel=dp(idx)+f[idx];
      if(dist<=L && availFuel>=K)
        o2=availFuel-K;
    }

    return DP[n]=max(o1,o2);

}
int main()
{
  std::ios::sync_with_stdio(false);
  int n;  
  cin>>n>>K>>L;
  memset(DP,-1,sizeof DP);
  for(int i=1;i<=n;++i)
    {
      int x,y,z;
      cin>>x>>y>>z;
      x=-x;
      y=-y;
      X[x].insert(pii(y,i));
      Y[y].insert(pii(x,i));
      sx[i]=x;
      sy[i]=y;
      f[i]=z;
    }

    // cout<<dp(5)<<endl;
  int x=dp(n);

  // for(int i=1;i<=n;++i)
  // {
  //   // if(DP[i]==-1)
  //     // DP[i]=-1e9;
  //   cout<<i<<" "<<dp(i)<<endl;
  // }
  if(x<0)
  {
    cout<<"NO\n";
    return 0;
  }
  cout<<"YES\n";
    
  vector<int> ans;
  while(n!=1)
  {
    ans.pb(n);

    int x=sx[n];
    int y=sy[n];

    set<pii>::iterator newY=upper_bound(X[x].begin(),X[x].end(),pii(y,n));
    set<pii>::iterator newX=upper_bound(Y[y].begin(),Y[y].end(),pii(x,n));

    if(newY!=X[x].end())
    {
      int idx=(*newY).second;
      int dist=abs(y-(*newY).first);
      int availFuel=DP[idx]+f[idx];

      if(dist<=L && availFuel>=K)
        {
          if(availFuel-K==DP[n])
            {
              n=idx;
              continue;
            }
        }
    }


    if(newX!=Y[y].end())
    {
      int idx=(*newX).second;
      int dist=abs(x-(*newX).first);
      int availFuel=DP[idx]+f[idx];

      if(dist<=L && availFuel>=K)
        {
          if(availFuel-K==DP[n])
            {
              n=idx;
              continue;
            }
        }
    }
    

    assert(false);

  }
  ans.pb(1);
  reverse(ans.begin(),ans.end());
  cout<<ans.size()<<"\n";
  for(int i=0;i<ans.size();++i)
  {
    cout<<-sx[ans[i]]<<" "<<-sy[ans[i]]<<"\n";
  }

  cout<<x<<"\n";
}