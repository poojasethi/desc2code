#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=(int)1e9+7,maxn=505,ln=17;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define forall(itr,x)	for( __typeof((x).begin()) itr=(x).begin(); itr!=(x).end(); itr++)
#define Ss(x) scanf("%s",x)
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
//#define getcx getchar_unlocked
#define getcx getchar
/*inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}*/
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define modulo(x,y,z) (x+y)<0?x+y+z:((x+y>=z)?x+y-z:x+y)
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(ij,0,n) cout<<ij<<". "<<x[ij]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(ij,0,m) {F(jk,0,n) cout<<x[ij][jk]<<" "; cout<<endl;} cout<<endl
#define pii pair<LL,int>
#define Fi first
#define Se second
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int shift=30,etf=mod-1,LIM=(int)1e9;

const LL inf=(LL)1e18+1;

const double PI=(double)3.141592653589793238,EPSILON=1e-10;

unsigned long long int dp[maxn][(maxn*maxn)/64];

void _clear()
{
    memset(dp,0,sizeof(dp));
}
int a[maxn],b[maxn];

int solve(int arr[],int sz)
{
    _clear();
    int sum=0,tot;
    F(i,1,sz)
    sum+=arr[i];
    tot=sum;
    sum/=2;
    //Debug(sum);
    dp[0][0]=1;
    //Debug(dp[0][0]);

    F(i,1,sz)
    {
        F(j,0,(sum+64)/64)
        {
            dp[i][j]=dp[i-1][j];
        }
        int d=(sum-arr[i])/64,cnt=0;
        //Debug(d);
        F(j,0,d)
        {
            unsigned long long int num=dp[i-1][j];
            while(num)
            {
                if(num&1)
                {
                    int jump=cnt+arr[i];
                    if(jump<=sum)
                    dp[i][jump/64]|=((unsigned long long int)1<<(jump%64));
                }
                cnt++;
                num>>=1;
            }
            cnt=(j+1)*64;
        }
        unsigned long long int num=dp[i-1][d];
        //Debug(num);
        while(num)
        {
            if(num&1)
            {
                int jump=cnt+arr[i];
                if(jump<=sum)
                dp[i][jump/64]|=((unsigned long long int)1<<(jump%64));
            }
            cnt++;
            num>>=1;
        }
    }
    int ret=0,cnt;
    I(i,(sum)/64,0)
    {
        cnt=(i)*64;
        unsigned long long int num=dp[sz-1][i];
        while(num)
        {
            if(num&1)
            {
                ret=max(ret,cnt);
            }
            cnt++;
            num>>=1;
        }
    }
    //Debugarr(dp[sz-1],4);
    //Debug(ret);
    return tot-2*ret;
}

int main()
{
    int t;
    S(t);
    while(t--)
    {
        int n;
        S(n);
        int pos1=1,pos2=1;
        int num;
        S(num);
        a[pos1++]=num;
        F(i,1,n+1)
        {
            char ch;
            getchar();
            scanf("%c%d",&ch,&num);
            if(i&1)
            {
                b[pos2++]=num;
            }
            else
            {
                a[pos1++]=num;
            }
        }
        if(n<3)
        {
            printf("NO\n");
            continue;
        }
        /*Debug(pos1);
        Debug(pos2);
        Debugarr(a,pos1);
        Debugarr(b,pos2);*/
        int ans=solve(a,pos1)+solve(b,pos2);
        cout<<ans<<endl;
    }
    return 0;
}
