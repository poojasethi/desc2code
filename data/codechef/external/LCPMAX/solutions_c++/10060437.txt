#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).end()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,b) REPN(x, 0, b)

const int MAX = 125010;
const int HB = 7;
const int MOD = 1000000009;
const int C = 10;
int powers[MAX];

char P[MAX], Q[MAX];
int n;
int hashes[2][11][MAX]; //hashes of P
int PS[11], QS[11]; //hashes of substrings
bool vis[11];
string Perm; //here we save our permutations
int character_hashes[2][C + 1];

void initHash(char * S, int M[][MAX]) {
    REP(i, 10) M[i][0] = 0;
    REP(i, n) {
        REP(j, 10) {
            M[j][i+1] = M[j][i];
            if (S[i] == 'a'+j) {
                M[j][i+1] += powers[i];
                if (M[j][i+1] >= MOD) M[j][i+1] -= MOD;
            }
        }
    }
}

int get_hash(int n, int hashes[], int l, int r) {
  return ((hashes[r] - hashes[l - 1] + MOD) * 1ll * powers[n - r]) % MOD;
}


bool check_substrings(int n, int l_1, int r_1, int l_2, int r_2) {
  for (int i = 0; i < C; i++) {
    character_hashes[0][i] = get_hash(n, hashes[0][i], l_1, r_1);
    character_hashes[1][i] = get_hash(n, hashes[1][i], l_2, r_2);
  }

  sort(character_hashes[0], character_hashes[0] + C);
  sort(character_hashes[1], character_hashes[1] + C);

  for (int i = 0; i < C; i++) {
    if (character_hashes[0][i] != character_hashes[1][i]) {
      return false;
    }
  }

  return true;
}

bool character_is_taken[C + 1];

int eval(int px, int qx, char permutation[] ) {
    int l = 1, r = min(n-px+2, n-qx+2);
    while (l + 1 < r) {
        int m = (l + r)/2;
        if (check_substrings(n, px, px+m-1, qx, qx+m-1)) l = m;
        else r = m;
    }

    int prefix_length = l;


      memset(character_is_taken, false, sizeof(character_is_taken));
      for (int i = 0; i < C; i++) {
        int hash = get_hash(n, hashes[0][i], px, px + prefix_length - 1);
        for (int j = 0; j < C; j++) {
          if (!character_is_taken[j] && hash == get_hash(n, hashes[1][j], qx, qx + prefix_length - 1)) {
            character_is_taken[j] = true;
            permutation[i] = 'a' + j;
            break;
          }
        }
      }

      permutation[C] = '\0';
    return l;
}

char resulting_permutation[11];

int main() {

    powers[0] = 1;
    REPN(i, 1, MAX) {
        powers[i] = (powers[i-1]*1ll*HB)%MOD;
//        printf("%d\n", powers[i]);
    }

    int T, q;
    scanf("%d", &T);

    REP(tc, T) {
        scanf("%d %d", &n, &q);

        scanf("%s", P);
        scanf("%s", Q);

        initHash(P, hashes[0]);
        initHash(Q, hashes[1]);

        REP(i, q) {
            int px, qx;
            scanf("%d %d", &px, &qx);
            printf("%d %s\n", eval(px, qx, resulting_permutation), resulting_permutation);
        }
    }

    return 0;
}
