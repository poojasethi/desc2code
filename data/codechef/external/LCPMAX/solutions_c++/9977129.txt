#include <algorithm>
using namespace std;
#include <stdio.h>
#include <memory.h>

#define min(a, b) (a < b ? a : b)
typedef long long ll;
const int MAX = 125010;
const int BASE = 349;
int test, n, q, u, v, nearest[10][MAX], mp[10];
ll baseT[MAX], baseS[10][MAX], powBase[MAX], ind[10];
char s[MAX], t[MAX];
bool pos[10], val[10];

struct cmp{
    int k;
    cmp(int _k) : k(_k) {}
    bool operator () (const int& i, const int& j){
        return nearest[i][k] < nearest[j][k];
    }
};

ll getHashT(const int& u, const int& v){
    return baseT[v] - baseT[u - 1] * powBase[v - u + 1];
}

ll getHashS(const int& u, const int& v){
    ll res = 0;
    for (int i = 0; i < 10; ++i)
        res += (baseS[i][v] - baseS[i][u - 1] * powBase[v - u + 1]) * (mp[i] + 'a');
    return res;
}

int main(){
    //freopen("in.txt", "r", stdin);
    powBase[0] = 1;
    for (int i = 1; i < MAX; ++i)
        powBase[i] = powBase[i - 1] * BASE;
    scanf("%d", &test);
    while (test--){
        scanf("%d %d %s %s", &n, &q, s + 1, t + 1);

        for (int i = 0; i < 10; ++i)
            nearest[i][n] = n + 1;
        nearest[s[n] - 'a'][n] = n;
        for (int i = n - 1; i >= 1; --i){
            for (int j = 0; j < 10; ++j)
                nearest[j][i] = nearest[j][i + 1];
            nearest[s[i] - 'a'][i] = i;
        }

        for (int i = 1; i <= n; ++i){
            baseT[i] = baseT[i - 1] * BASE + t[i];
            for (int j = 0; j < 10; ++j)
                baseS[j][i] = baseS[j][i - 1] * BASE;
            ++baseS[s[i] - 'a'][i];
        }

        while (q--){
            scanf("%d %d", &u, &v);

            for (int i = 0; i < 10; ++i){
                ind[i] = i;
                mp[i] = 97;
            }
            sort(ind, ind + 10, cmp(u));

            memset(val, false, sizeof(val));
            for (int i = 0; i < 10 && nearest[ind[i]][u] <= n && v + nearest[ind[i]][u] - u <= n; ++i)
            if (!val[t[v + nearest[ind[i]][u] - u] - 'a'])
                val[mp[ind[i]] = t[v + nearest[ind[i]][u] - u] - 'a'] = true;
            else
                break;

            int lef = 0, rig = min(n - u, n - v), res = -1;
            while (lef <= rig){
                int mid = (lef + rig) >> 1;
                if (getHashT(v, v + mid) == getHashS(u, u + mid))
                    lef = (res = mid) + 1;
                else
                    rig = mid - 1;
            }

            printf("%d ", res + 1);
            memset(pos, false, sizeof(pos));
            memset(val, false, sizeof(val));
            for (int i = 0; i < 10; ++i)
            if (nearest[i][u] <= u + res){
                pos[i] = true;
                val[mp[i]] = true;
            }

            int j = 0;
            for (int i = 0; i < 10; ++i)
            if (!pos[i]){
                while (val[j])
                    ++j;
                mp[i] = j;
                ++j;
            }

            for (int i = 0; i < 10; ++i)
                printf("%c", mp[i] + 'a');
            printf("\n");
        }
    }
    return 0;
}
