#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <cmath>
#include <climits>
#include <sstream>
#include <numeric>
#include <iomanip>

#define pb push_back
#define ill long long int
#define ull unsigned long long int
#define pii pair<int,int>
#define s(n) scanf("%d", &n)
#define gc getchar_unlocked
#define ss(n) scanf("%s", n)
#define sl(n) scanf("%lld", &n)
#define pb push_back
#define F(i,a,b) for(int i=(a); i<(b); i++)
#define mem(a, v) memset(a, v, sizeof(a))
#define all(v) v.begin(),v.end()
#define fr first
#define sc second
#define mp make_pair
#define deb cout <<"coink" <<endl
#define mod 1000000007
#define MAX 500100
#define inf (int)1e9
#define sq(x) ((x)*(x))
#define sqrtsum(x, y) sqrt((x)*(x)+(y)*(y))
#define abs(x) (x>=0?(x):-(x))
#define prin(v) forall(i, 0, v.size()) cout << v[i] <<" ";cout <<endl;
#define input freopen("in","r", stdin)
#define output freopen("out","w", stdout)
#define iost ios_base::sync_with_stdio(false)
using namespace std;

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, -1 ,1};
void swap(int &a, int &b) {int t = a;a = b;b = t;}
char str[10005][25];
struct state {
    state *  a[20];
    bool flag;
};
state *  createNode() {
    state * res = (state * ) malloc(sizeof(state));
    F(i, 0, 10) res->a[i] = NULL;
    res->flag = false;
    return res;
}
state * root = NULL;
void add(state * r, char st[100], int id) {
    
    if(st[id] == '\0') {
        r->flag = true;
        return ;
    }
    
    if(r->a[st[id]-'0'] == NULL)
        r->a[st[id]-'0'] = createNode();
    
    add(r->a[st[id]-'0'], st, id+1);
    
}

int dp[2000];
map<char, int> m;
int aa[2000];
int la ;
int traverse(state * r, int idx) {
    
    int ans = inf;

    if(r->flag){
        ans = min(ans, dp[idx]+1);
    }
    if(idx == la) {
        return ans;
    }
    if(r->a[aa[idx]] == NULL) return ans;
    // cout <<"hello" <<(r->a[aa[idx]])->flag <<endl;
    return min(ans, traverse(r->a[aa[idx]], idx+1));
}
void tra(state * r) {
    F(i,0, 10) {
        if(r->a[i]) cout << i <<" ";
    }
    cout << endl;
    F(i, 0, 10) {
        if(r->a[i]) {
            tra(r->a[i]);
        }
    }
}
int main() {
    // input;
    int t, n,a, b;
    s(t);
    int tt = 1;
    while(t-- ) {
        m.clear();
        s(n);
        root = createNode();

        F(i, 0, n) {
            ss(str[i]);
            // printf("%s\n", str[i]);
        }
        F(i, 0, 10) {
            int l;
            char st[5];
            int ii;
            s(ii);
            s(l);
            F(j, 0,l) {
                ss(st);
                m[st[0]] = ii;
                // printf("%s %d\n", st, ii);
            }
        }
        F(i, 0, n) {
            for(int j = 0; str[i][j] != '\0'; j++)
                str[i][j] = m[str[i][j]]+'0';
            // printf("%s\n", str[i]);
            add(root, str[i], 0);
        }
        // tra(root);
        s(la);
        F(i, 0, la) {
            s(aa[i]);
        }
        dp[la] = 0;
        for(int i = la-1; i>=0; i--) {
            
            dp[i] = traverse(root, i);
            // cout << i << " " << dp[i]  <<endl;
            
        }
        if(dp[0] >= inf) {
            dp[0] = -1;
        }
        cout << "Case " <<tt++ <<": " ;
        cout << dp[0] <<endl;
    }

    return 0;
}