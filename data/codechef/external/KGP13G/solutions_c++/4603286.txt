#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <bitset>

using namespace std;


#define INF 1000000000

char dict[10010][22],str[2];
int mapping[130],test,num=0,table[1005],n,k,m,d;

class Trie {
    public:
        int words;
        Trie* edges[10];
        Trie();
        void addWord(char* word,int ind);
        int countWords(char* word,int ind,int len);
        
};

Trie::Trie() {
    words = 0;
    for(int i=0;i<10;++i)
        edges[i] = NULL;
}

void Trie::addWord(char* word,int ind) {
    if (strlen(word+ind)==0) 
    {
        words = words+1;
    }
    else {
        char k = word[ind];
        if (edges[k-'0']==NULL) {
            edges[k-'0'] = new Trie;
        }
        edges[k-'0']->addWord(word,ind+1);
    }
}

int Trie::countWords(char* word,int ind,int g) {
    if (g ==0)
        return words;
    else {
        g--;
        char k = word[ind];
        if (edges[k-'0']==NULL)
            return 0;
        else {
            return edges[k-'0']->countWords(word,ind+1,g);
        }
    }
}




int main() {
    
    scanf("%d",&test);
    while(test--)
     {
       num++;
       scanf("%d",&k);
       for(int i=1;i<=k;i++)
        {
          scanf("%s",dict[i]+1);       
        }
        for(int i=0;i<10;i++)
         {
           scanf("%d",&d);
           scanf("%d",&m);
           while(m--)
            {
              scanf("%s",str);         
              mapping[str[0]] = d;
            }       
         }
        scanf("%d",&n);
        char digit[1010];
       // digit.push_back(0);
        for(int i=1;i<=n;i++)
         {
           scanf("%d",&d);
           digit[i] = d+'0';       
         }
         
        Trie root;
        for(int i=1;i<=k;i++)
         {
           int len = strlen(dict[i]+1);
           //cout<<len<<"\n";
           char s[1010];
           for(int j=1;j<=len;j++)
             s[j-1] = '0'+mapping[dict[i][j]];
           s[len] = '\0';
           //cout<<len<<" "<<s<<"\n";
           root.addWord(s,0);        
         }
         
        table[0] = 0;
        for(int i=1;i<=n;i++)
         {
            int minsofar = INF;
            for(int j=0;j<i;j++)
             {
               if(root.countWords(digit+j+1,0,i-j))
                 minsofar = min(minsofar,table[j]+1);       
             }
            table[i] = minsofar;          
         } 
          
        printf("Case %d: %d\n",num,table[n]!=INF?table[n]:-1);           
  
     }
    
    
    return 0;
}
