#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int N = 1010;
const int M = 10010;
const int inf = (int)1e9;
vector <string> v;
int digs[N];
int hash[26], dp[N];

int go(int pos, int n) {
    if(pos == n) {
        return 0;
    }
    int & ret = dp[pos];
    if(ret != -1) return ret;
    ret = inf;
    rep(i, sz(v)) {
        string & s = v[i];
        if(pos + sz(s) <= n) {
            bool ok = true;
            rep(j, sz(s)) {
                if(hash[s[j] - 'a'] != digs[pos + j]) {
                    ok = false;
                    break;
                }
            }
            if(ok) ret = min(ret, go(pos + sz(s), n) + 1);
        }
    }
    return ret;
}

int main() {
    int T; gi(T);
    rep(z, T) {
        int k; gi(k);
        v.resize(k);
        rep(i, k) cin >> v[i];
        rep(i, 10) {
            int d, n; gi(d), gi(n);
            char buf[5];
            rep(i, n) {
                scanf("%s", buf);
                hash[buf[0] - 'a'] = d;
            }
        }
        int n; gi(n);
        rep(i, n) gi(digs[i]);
        fill(dp, -1);
        int ans = go(0, n);
        if(ans == inf) ans = -1;
        printf("Case %d: %d\n", z + 1, ans);
    }
    return 0;
}