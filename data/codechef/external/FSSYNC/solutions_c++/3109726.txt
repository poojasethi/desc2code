/*	Template by
	Ashwin Kumar
	IIT Delhi */
#include<algorithm>		//min(), max(), reverse(), sort(), next_permutation(), prev_permutation(), swap()
#include<iostream>
#include<cassert>		//assert()
#include<cmath>			//cos(in radians), sin(), tan(), acos(), asin(), atan(), modf(break into frac and inte parts)
						//log(), log10(), log2(), pow(), sqrt(), cbrt(), ceil(), floor(), fmod(), abs()  
#include<cstdio>		//fclose(), fopen(), fprintf(), fscanf(), printf(), scanf(), gets(), puts()
#include<cstdlib>		//srand(time(NULL)), rand()
#include<cstring>		//memcpy(), strcpy(), strcat(), strcmp(), memset(), strlen(), strtok(), strrchr()
#include<sstream>
#include<string>		//to_string(any numerical value), stoi(), stoll()
#include<ctime>   
#include<deque>			//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back() 
						//modifiers: push_back(), push_front(), pop_back(), pop_front(), erase(), clear()
#include<map>			//begin(), end(), rbegin(), rend(), operator[], at(), clear(), find()
						//priority_queue:  top(), push(), pop()
#include<queue>			//front(), back(), push(), pop()
#include<set>			//begin(), end(), rbegin(), rend(), insert(), erase(), clear(), find()
#include<stack>			//top(), push(), pop()
#include<vector>		//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back()
						//modifiers: push_back(), pop_back(), erase(), clear() 
using namespace std;

typedef pair<int, int> pii;
typedef long long LL;
#define MOD 1000000007
#define INF 1000000000

vector<int> adj[100000];
int dead[100000];
int x[100000];
double ans;

void dfs(int i, int par)
{
	if (par == -1)
		x[i] = 0;
	else
		x[i] = x[par]+dead[par];
	ans -= 1.0/(x[i]+1);
	for (int j = 0; j < adj[i].size(); j++)
		if (adj[i][j] != par)
			dfs(adj[i][j], i);
}

int main()
{
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		int N;
		scanf("%d", &N);
		for (int i = 0; i < N; i++)
			adj[i].clear();
		for (int i = 0; i < N-1; i++)
		{
			int u, v;
			scanf("%d %d", &u, &v);
			adj[u-1].push_back(v-1);
			adj[v-1].push_back(u-1);
		}
		int M;
		scanf("%d", &M);
		memset(dead, 0, N*sizeof(int));
		for (int i = 0; i < M; i++)
		{
			int u;
			scanf("%d", &u);
			dead[u-1] = 1;
		}
		ans = (double)N;
		dfs(0, -1);
		printf("%0.8lf\n", ans);
	}
	return 0;
}
