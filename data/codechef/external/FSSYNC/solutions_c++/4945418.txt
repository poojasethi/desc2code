#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int N = 1000100;

int was[N], isDead[N], deadAncs[N];
vi adj[N];

void dfs(int u, int par) {
    was[u] = true;
    deadAncs[u] = (par == -1) ? 0 : deadAncs[par] + isDead[par];
    foreach(adj[u], it) if(!was[*it]) {
        dfs(*it, u);
    }
}

int main() {
    int T; gi(T);
    rep(z, T) {
        int n; gi(n);
        rep(i, n) adj[i].clear(), was[i] = 0, isDead[i] = 0, deadAncs[i] = 0;
        rep(i, n - 1) {
            int u, v;
            gi(u), gi(v); --u; --v;
            adj[u].pb(v);
            adj[v].pb(u);
        }
        int m; gi(m);
        rep(i, m) {
            int u; gi(u); --u;
            isDead[u] = true;
        }
        dfs(0, -1);

        double ans = 0.0;
        rep(i, n) {
            ans += (1.0 - 1.0 / (deadAncs[i] + 1));
        }
        printf("%.10lf\n", ans);
    }
    return 0;
}