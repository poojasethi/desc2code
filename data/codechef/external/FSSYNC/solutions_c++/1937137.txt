#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>

using namespace std;

const int max_n=100010;

int T;
int n,m;
vector<int> adjl[max_n];
bool dead[max_n];

double res;
bool visited[max_n];
int ndeadanc[max_n];
void DFS(int vt)
{
	visited[vt]=true;
	res += ( (double(1))-(double(1))/(double(ndeadanc[vt]+1)) );
	
	int vtnbr;
	for(int i=0; i<adjl[vt].size(); ++i)
	{
		vtnbr=adjl[vt][i];
		if(not visited[vtnbr])
		{
			ndeadanc[vtnbr]=ndeadanc[vt]+(int(dead[vt]));
			DFS(vtnbr);
		}
	}
}

int main()
{
	scanf("%d",&T);
	
	for(int z=0; z<T; ++z)
	{
		scanf("%d",&n);
		
		for(int i=0; i<n; ++i)
			adjl[i].resize(0);
		
		int u,v;
		for(int i=0; i<n-1; ++i)
		{
			scanf("%d%d",&u,&v);
			--u; --v;
			
			adjl[u].push_back(v);
			adjl[v].push_back(u);
		}
		
		scanf("%d",&m);
		
		fill(dead,dead+n,false);
		for(int i=0; i<m; ++i)
		{
			scanf("%d",&u);
			--u;
			dead[u]=true;
		}
		
		fill(visited,visited+n,false);
		res=(double(0));
		ndeadanc[0]=0;
		DFS(0);
		
		printf("%.8f\n",res);
	}
	
	return 0;
}