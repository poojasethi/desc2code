// 线性关系

#include<cstdio>
#include<set>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<vector>
#include<cstdlib>
using namespace std;

void Get(int &T)
{
	char C;bool F=0;
	for(;C=getchar(),C<'0'||C>'9';)if(C=='-')F=1;
	for(T=C-'0';C=getchar(),C>='0'&&C<='9';T=T*10+C-'0');
	F&&(T=-T);
}

int N,M;

struct E
{
	int V,Next;
}Edge[1000005];
int EdgeTop;
int Head[1000005];

void Add(int U,int V)
{
	Edge[++EdgeTop]=(E){V,Head[U]};
	Head[U]=EdgeTop;
}

int Dead[1000005];

void Init()
{
	memset(Dead,0,sizeof Dead);
	EdgeTop=0;
	memset(Head,0,sizeof Head);
	
	Get(N);
	for(int i=1,U,V;i<N;i++)
	{
		Get(U);Get(V);
		Add(U,V);
		Add(V,U);
	}
	Get(M);
	for(int j=1,U;j<=M;j++)
	{
		Get(U);
		Dead[U]=1;
	}
}


int Fa[1000005];
int Depth[1000005];
double Ans;

void DFS(int X)
{
	Ans+=(1.0-1.0/(Depth[X]+1));
	for(int i=Head[X];i;i=Edge[i].Next)
	{
		if(Fa[X]!=Edge[i].V)
		{
			Fa[Edge[i].V]=X;
			Depth[Edge[i].V]=Depth[X]+Dead[X];
			DFS(Edge[i].V);
		}
	}
}

void Work()
{
	memset(Fa,0,sizeof Fa);
	Ans=0;
	Depth[1]=0;
	DFS(1);
}

void Output()
{
	printf("%.8lf\n",Ans);
}

int main()
{
	int Case;
	Get(Case);
	for(int i=1;i<=Case;i++)
	{
		Init();
		Work();
		Output();
	}
	return 0;
}