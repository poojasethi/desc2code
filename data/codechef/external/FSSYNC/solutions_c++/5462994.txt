#include<iostream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<cstring>
#include<cmath>
#include<queue>
#include<map>
#include<vector>
#include<stack>
#include<set>
#include<fstream>
#include<iomanip>
#define pb push_back
#define mp make_pair
#define M 1000000
#define limit 150000
#define Inf 1e6+1
#define accr 1e-6
#define PI 3.141592653589793238462643383279502884197
#define ll (long long)
#define ld long double
using namespace std;

vector<int> graph[M];
bool dead[M],done[M];

long double DFS(int node,int d)
{
    done[node]=true;
    int i,child;
    long double ans,h;
    h=d;
    ans=(long double)1/(h+(long double)1);
    for(i=0;i<graph[node].size();i++)
    {
        child=graph[node][i];
        if(!done[child])
        {
            if(dead[node])
            {
                ans+=DFS(child,d+1);
            }
            else
            {
                ans+=DFS(child,d);
            }
        }
    }
    return ans;
}

int main()
{
    int i,j,k,t;
    scanf("%d",&t);
    while(t--)
    {
        int m,n,x,y;
        scanf("%d",&n);
        for(i=0;i<n-1;i++)
        {
            scanf("%d %d",&x,&y);
            x--;
            y--;
            graph[x].pb(y);
            graph[y].pb(x);
        }
        scanf("%d",&m);
        fill(dead,dead+n,false);
        for(i=0;i<m;i++)
        {
            scanf("%d",&x);
            x--;
            dead[x]=true;
        }
        fill(done,done+n,false);
        long double ans;
        ans=DFS(0,0);
        ans=(long double)n-ans;
        cout<<setprecision(10)<<ans<<endl;
        for(i=0;i<n;i++) graph[i].clear();
    }
}
