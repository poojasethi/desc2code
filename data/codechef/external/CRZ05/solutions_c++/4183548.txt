#include <iostream>
#include <vector>
#include <stdio.h>
#include <limits.h>

using namespace std;

int countInv = 0;

void Merge( vector<int>& A, int p, int q, int r ) {
	
	int n1, n2, i, j, k;
	
	n1 = q - p + 1;
	n2 = r - q;
	
	vector<int> L( n1 + 2 ), R( n2 + 2 );
	
	for( i = 1;i <= n1;i++ )
		L[ i ] = A[ p + i - 1 ];
	L[ n1 + 1 ] = INT_MAX;
	
	for( j = 1;j <= n2;j++ )
		R[ j ] = A[ q + j ];
	R[ n2 + 1 ] = INT_MAX;
	
	i = j = 1;
	
	for( k = p;k <= r;k++ ) {
		
		if( L[ i ] <= R[ j ] ) {
			
			A[ k ] = L[ i ];
			i++;
		}
		else {
			
			A[ k ] = R[ j ];
			j++;
			countInv += ( n1 - i + 1 );
		}
	}
}

void MergeSort( vector<int>& A, int p, int r ) {
	
	int q;
	
	if( p < r ) {
		
		q = ( p + r ) >> 1;
		MergeSort( A, p, q );
		MergeSort( A, q + 1, r );
		Merge( A, p, q, r );
	}
}

int main() {
	
	int n, i;
	
	scanf("%d", &n );
	
	vector<int> A( n );
	for( i = 0;i < n;i++ )
		scanf("%d", &A[ i ] );
	
	MergeSort( A, 0, n - 1 );
	
	printf("Number of inversions are %d\n", countInv );
	
	return 0;
}