// Program for the HCAKE problem
// Longest Increasing Subsequence

#include <iostream>
#include <string.h>
#include <stdio.h>

using namespace std;

#define ARRAY_SIZE(A) sizeof(A)/sizeof(A[0])

// Fast IO function
int input() 
{
  int p = 0;
  char c;

  c = getchar_unlocked();
  while(c < '0' || c > '9')
   c = getchar_unlocked();
  while(c >= '0' && c <= '9')
  {
    p = (p << 3) + (p << 1) + c - '0';
    c = getchar_unlocked();
  }

  return p;
}

int CeilIndex(int A[], int l, int r, int key) 
{
  int m;
  while(r - l > 1) 
  {
    m = l + (r - l) / 2;
    (A[m] >= key ? r : l) = m;
  }

  return r;
}

// Find LIS Length
int LISLength(int A[], int size) 
{
  int *tailTable = new int[size];
  int len;

  memset(tailTable, 0, sizeof(tailTable[0]) * size);
  tailTable[0] = A[0];
  len = 1;
  for(int i = 1; i < size; i++) 
  {
    if(A[i] < tailTable[0])
     tailTable[0] = A[i];
    else if(A[i] > tailTable[len - 1])
     tailTable[len++] = A[i];
    else
     tailTable[CeilIndex(tailTable, -1, len - 1, A[i])] = A[i];
  }

  delete[] tailTable;
  return len;
}

int main() 
{
  int t;
  t = input();

  while(t--) 
  { 
    int l;
    l = input();
    int A[l], B[l];

    for(int i = 0; i < l; i++) 
    {
      A[i] = input();
      B[l - 1 - i] = A[i];
    }

    int n = l;
    printf("%d\n", LISLength(B, n));
  }

  return 0;
} 