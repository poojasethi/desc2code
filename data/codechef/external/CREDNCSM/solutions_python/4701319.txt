#include <bits/stdc++.h>
using namespace std;
#define lld long long
#define pb(x) push_back(x)
int tmp;
struct trie{

	trie* node[10];
	int val;


};
trie* insert(trie* t, int idx, string s){
	int let=s[idx]-'0';
	if(idx == s.size()){
		t-> val = tmp;
		return t;
	}
	if(t->node[let] == NULL){
		t->node[let] = new trie();
	}
	t->node[let] = insert(t->node[let], idx+1, s);
	//t-> val = 0;
	return t;
}

int find(trie* t,string s, int idx){
	 int dig =s[idx]-'0';
	 int new_dig = -1, ans = -1;
	for(int i = 0; i <= 9; i++){
		if(t->node[i] != NULL){
			if(((dig+i) % 10) >= ans){
				ans = ((dig+i) % 10);
				new_dig = i;
			}
		}
	}
	//cout<<s[idx]<<' '<<new_dig<<endl;
	if(new_dig == -1){
		return t->val;
	}
	return find(t->node[new_dig],s,idx+1);
}
lld nsum(lld  a, lld b){
	vector<int> num;
	if(a < b){
		swap(a,b);
	}
	while(a>0){
		int v = ((a%10)+(b%10))%10;
		num.pb(v);
		a/=10;
		b/=10;
	}
	int sz = num.size();
	lld ret = 0;
	for(int i = sz-1; i >= 0; i--){
		ret = ret*10 + num[i];
	}
	return ret;
}
string toStr(int n){
	string s = "0000000000";
	char ch;
	for(int i = 9; i >= 0; i--){
		ch = (n%10)+'0';
		n/=10;
		s[i] = ch;
	}
	return s;
}

int main(){
	//freopen("test.txt","r",stdin);
	int n;
	lld ans=0;
	cin >> n;
	trie* root = new trie();
	string s;
	for(int i = 0; i < n; i++){
		cin >> tmp;
		s = toStr(tmp);
		lld xyz=find(root,s,0);
		if(i != 0)
			ans = max(ans, nsum(xyz,tmp));
		//cout<<tmp<<' '<<xyz<<' '<<nsum(xyz,tmp)<<endl;
		root = insert(root,0,s);
		//cout<<endl;
	}
	cout << ans;
	return 0;
}