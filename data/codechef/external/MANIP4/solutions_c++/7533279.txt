#include<cstdio>
#include<cmath>
#include<algorithm>
#include<vector>
#include<set>
#include<string>
using namespace std;
class point{
 public:
    int x;
    int y;
    point(){}
    point(int a,int b){
        x=a;y=b;
    }
void    print(){printf("(%d,%d)\n",x,y);}
    bool operator<(const point &p)const{
        return x<p.x||(x==p.x&&y<p.y);
    }
};

class line{
public:
    point p;
    point q;
    float icap;
    float jcap;
    float length;
    float sq;
    line(){}
    line(point a,point b){
        p=a<b?a:b;
        q=a<b?b:a;
        sq=(pow(p.x-q.x,2)+pow(p.y-q.y,2));
        length=sqrt(sq);
        icap=b.x-a.x;
        jcap=b.y-a.y;
    }
    int dot(const line &l){
         return icap*l.icap +jcap*l.jcap;
    }
    int cross(const line&l){
         return icap*l.jcap-jcap*l.icap;
    }
    void print(){printf("(%d,%d)<--->(%d,%d)\n",p.x,p.y,q.x,q.y);}
    bool operator!=(const line &l){return length!=l.length;}
    bool operator==(const line &l){return length==l.length;}
    bool operator>(const line &l){return length>l.length;}
    bool operator<(const line &l){return length<l.length;}
};

class triangle{
    public:
     point a;line a_;
     point b;line b_;
     point c;line c_;
     line *longest;
     line *adj;
     line *opp;
     string dim_type;
     string angle_type;
     string TYPE;
     char *str;
     bool not_tri;
     bool scalene;
     bool right;
     bool acute;
     triangle(){};
     triangle(int x[3],int y[3]){
          int i;
          point p[3];
          for(i=0;i<3;i++)
            p[i]=point(x[i],y[i]);
         create(p);
     }
     triangle(point p[3]){
         create(p);
     }
     triangle(point p,point q,point r){
         point x[3];
         x[0]=p;x[1]=q;x[2]=r;
         create(x);
     }
     void create(point x[3]){

         a=x[0],b=x[1],c=x[2];

         a_=line(b,c);
         b_=line(a,c);
         c_=line(a,b);

         longest=a_>b_?(a_>c_?&a_:&c_):(b_>c_?&b_:&c_);
         adj=&a_!=longest?&a_:&b_;
         opp=&a_==adj?(&b_==longest?&c_:&b_):&c_;

         not_tri=a_.cross(b_)==0;

         scalene=(a_!=b_)&&(b_!=c_)&&(c_!=a_);

         right=longest->sq==adj->sq+opp->sq;
         acute=!right&&longest->sq<adj->sq+opp->sq;
         dim_type=scalene?"scalene ":"isosceles ";
         angle_type=right?"right ":acute?"acute ":"obtuse ";
         TYPE=not_tri?"not a triangle\n":dim_type+angle_type+"triangle\n";
         str=(char *)TYPE.c_str();
     }
};

int main(){
int n,i,j,x[3],y[3];
point p[3];

triangle t;

scanf("%d",&n);
for(j=0;j<n;j++){
    for(i=0;i<3;i++){
        scanf("%d%d",&x[i],&y[i]);
        p[i]=point(x[i],y[i]);

    }
    sort(p,p+2);
    t=triangle(p);
    printf("Case #%d: ",j+1);
    printf("%s",t.str);


}
}
