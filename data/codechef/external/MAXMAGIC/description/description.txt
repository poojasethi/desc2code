Given is an undirected weighted graph with n vertices and m edges. There may be self loops and/or multiple edges in the graph.

A u-v walk is defined as a sequence of vertices starting at u and ending at v, where consecutive vertices in the sequence are adjacent vertices in the graph i.e. consecutive vertices are connected by some edge.


An arbitary walk of length k+1 is, V1,E1,V2,E2,V3,...,Vk,Ek,V(k+1). where Vi and V(i+1) are connected by edge Ei with weigth Ci.

 In simpler informal words, walk is a path in a graph with no restriction
on the number of times you can visit a vertex or edge. 

For such walk we define magic to be, 
magic(walk) = (C1 & C2) ^ (C2 & C3) ^ ... ^ (C(k-1) & C(k)) if k â‰¥ 2
magic(walk) = 0 if k < 2

Note: Here Ci (1 <= i <= k) are the corresponding edge weights.


We love magic, don't we? Hence we always want to maximize it. But for a given graph, there are infinite different walks possible. So, you need to think smart and write a program which prints the maximum magic which can be achieved for some walk in the given graph.


Here, ' & ' is Binary AND Operator, ' ^ ' is Binary XOR Operator.


Input
First line contains two integers n and m. 
Next m lines, each contain three space separated integers u,v and c denoting an undirected edge in graph between vertices u and v with weight c. 

Output
Print the maximum magic that can be achieved for some walk in the graph.

Constraints

1 <= n <= 100 
1 <= m <= 150 
0 <= c <= 100 
1 <= u,v <= n 


Sample Input 1:
2 1
1 2 5
Sample Output 1:
5

Explanation:
Let the walk be 1->2->1
For this walk, magic = (5 & 5) = 5

Sample Input 2:
4 4
1 2 1
2 4 3
3 1 4
4 3 2

Sample Output 2:
7

Explanation: 
Number the 4 vertices in input as 1,2,3,4.
Number the 4 edges in input as a,b,c,d.
Let weight of any edge x be |x|.
For walk = {1,c,3,c,1,a,2,b,4,d,3}
magic = (|c| & |c|) ^ (|c| & |a|) ^ (|a| ^ |b|) ^ (|b| ^ |d|) 


It can be proven that 7 is maximum value magic can take for this input.
