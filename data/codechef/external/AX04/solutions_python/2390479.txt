#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b)
{
	return *(int *)a - *(int *)b;
}

int max(int a, int b)
{
	return a > b ? a : b;
}

int all(int a[], int k)
{
	int score = 0, i;
	for (i = 0; i < 5; ++i)
		score += (a[i] == k);
	return score * k;
}

int allEven(int a[])
{
	int score = 0, i;
	for (i = 0; i < 5; ++i)
		if (a[i] % 2 == 0)
			score += a[i];
	return score;
}

int allOdd(int a[])
{
	int score = 0, i;
	for (i = 0; i < 5; ++i)
		if (a[i] % 2 != 0)
			score += a[i];
	return score;
}

int fullHouse(int a[])
{
	if (a[0] == a[1] && a[2] == a[4])
		return 15;
	if (a[0] == a[2] && a[3] == a[4])
		return 15;
	return 0;
}

int contains(int a[], int k)
{
	int i;
	for (i = 0; i < 5; ++i)
		if (a[i] == k)
			return 1;
	return 0;
}

int small(int a[])
{
	if (contains(a, 3) && contains(a, 4))
		if (contains(a, 2))
			if (contains(a, 1) || contains(a, 5))
				return 20;
			else
				return 0;
		else if (contains(a, 5) && contains(a, 6))
			return 20;
		else
			return 0;
	else
		return 0;
}

int large(int a[])
{
	int i;
	for (i = 0; i < 5; ++i)
		if (a[i] != i + 1)
			break;
	if (i == 5)
		return 30;
	for (i = 0; i < 5; ++i)
		if (a[i] != i + 2)
			return 0;
	return 30;
}

int yahtzee(int a[])
{
	if (a[0] == a[4])
		return 40;
	else
		return 0;
}

int main()
{
	int t;
	int a[5], i;
	int maxScore;
	scanf("%d", &t);
	while (t--)
	{
		for (i = 0; i < 5; ++i)
			scanf("%d", &a[i]);
		qsort(a, 5, sizeof(i), compare);
		maxScore = 0;
		maxScore = max(maxScore, all(a, 1));
		maxScore = max(maxScore, all(a, 2));
		maxScore = max(maxScore, all(a, 3));
		maxScore = max(maxScore, all(a, 4));
		maxScore = max(maxScore, all(a, 5));
		maxScore = max(maxScore, all(a, 6));
		maxScore = max(maxScore, allEven(a));
		maxScore = max(maxScore, allOdd(a));
		maxScore = max(maxScore, fullHouse(a));
		maxScore = max(maxScore, small(a));
		maxScore = max(maxScore, large(a));
		maxScore = max(maxScore, yahtzee(a));
		printf("%d\n", maxScore);
	}
	return 0;
}