#include<bits/stdc++.h>
using namespace std;
long long adj[101][101],n,m,cost[101],shortest[101][101],minv[101];
bool visited[101];
struct edge
{
	long long u,v,weight,serial;
};
deque<edge> deq;
deque<long long>ans;
struct pa
{
	long long x,y;
};
class cmp
{
	public:
	bool operator()(pa a,pa b)
	{
		return a.y>b.y;
	}
}; 
pa va,node;
edge e;
bool nec(long p,long q,long wei)
{
    if(shortest[p][q]==wei)
	return 1;
	else
	return 0;
}
int main()
{
	priority_queue<pa,deque<pa>,cmp> pq;
	long long int s,a,b,w,t;
	cin>>t;
	while(t--)
	{
	cin>>n>>m;
	for(int i=1;i<=100;i++)
	{
		for(int j=1;j<=100;j++)
		adj[i][j]=1000000000;
	}
	for(int i=1;i<=m;i++)
	{
		cin>>a>>b>>w;
		a++;
		b++;
		adj[a][b]=min(w,adj[a][b]);
		adj[b][a]=min(w,adj[b][a]);
		e.serial=i-1;
		e.u=a;
		e.v=b;
		e.weight=w;
		deq.push_back(e);
	}
	for(int s=1;s<=n;s++)
	{
	for(int i=1;i<=100;i++)	
	{
	cost[i]=100000000000000;
	visited[i]=0;
	minv[i]=cost[i];
	}
	va.x=s;
	va.y=0;
	cost[s]=0;
	minv[s]=0;
	pq.push(va);
	while(!pq.empty())
	{
	    node=pq.top();
	    pq.pop();
	    long long u=node.x;
	    long long v=node.y;
	    for(int i=1;i<=n;i++)
	    {
	    	if(adj[u][i]==-1)
	    	continue;
	    	if(!visited[i] && cost[u]+adj[u][i]<cost[i])
	    	{
	    		va.x=i;
	    		cost[i]=cost[u]+adj[u][i];
	    		va.y=cost[i];
	    		minv[i]=min(minv[i],cost[i]);
	    		pq.push(va);
			}
		}
		visited[u]=1;
	}
	for(int i=1;i<=n;i++)
	shortest[s][i]=shortest[i][s]=cost[i];
}
     for(int i=0;i<deq.size();i++)
     {
     	long long up=deq[i].u;
     	long long vp=deq[i].v;
     	long long wp=deq[i].weight;
     	if(!nec(up,vp,wp))
     	ans.push_back(deq[i].serial);
	 }
	 cout<<ans.size()<<endl;
	 for(int i=0;i<ans.size();i++)
	 cout<<ans[i]<<endl;
	 deq.clear();
	 ans.clear();
}
}
