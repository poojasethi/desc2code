//Aayush Agarwal

#include<bits/stdc++.h>
using namespace std;

#define fOr(i,n) for(int i=0;i<n;i++)
#define For(i,n) for(int i=1;i<=n;i++)
#define ss(a) scanf("%s",a)
#define si(a) scanf("%d",&a)
#define sl(a) scanf("%lld",&a)
#define pi(a) printf("%d ",a)
#define pl(a) printf("%lld ",a)
#define ps(a) printf("%s ",a)
#define nl    printf("\n")
#define ll long long int
#define ull unsigned long long int
#define MOD 1000000007
#define INF 2000000000
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
const double eps=1e-9;
const double PI=2*acos(0.0);
#define pb(a) push_back(a)
#define mp(a,b) make_pair(a,b)

const int N=1e6+10;
const ll L=2000000000000000000LL;
ll dp[N],dp2[N],sum[N],sum2[N];
int cnt=1,cnt2=1;

void pre()
{ 
  dp[0]=1;sum[0]=1;
  dp2[0]=0;sum2[0]=0;
  for(ll i=3;i<=1000000;i+=2)
  {
    if((L-(i*i*i))>=dp[cnt-1])
    {
      dp[cnt]=dp[cnt-1]+(i*i*i);
      sum[cnt]=sum[cnt-1]+i;
      cnt++;
    }
    else
    break;
  }
  for(ll i=2;i<=1000000;i+=2)
  {
    if((L-(i*i*i))>=dp2[cnt2-1])
    {
      dp2[cnt2]=dp2[cnt2-1]+(i*i*i);
      sum2[cnt2]=sum2[cnt2-1]+i;
      cnt2++;
    }
    else 
    break;
  }
}

int main()
{
  
  pre();
  /*for(int i=0;i<10;i++)
  {
    pl(dp[i]);
  }
  nl;
  for(int i=0;i<10;i++)
  {
    pl(sum[i]);
  }
  nl;
  for(int i=0;i<10;i++)
  {
    pl(dp2[i]);
  }
  nl;
  for(int i=0;i<10;i++)
  {
    pl(sum2[i]);
  }
  nl;*/
  int t;
  si(t);
  while(t--)
  {
    ll n,ans;
    sl(n);
    ll pos=lower_bound(dp,dp+cnt,n)-dp;
    ll pos2=lower_bound(dp2,dp2+cnt2,n)-dp2;
    if(dp[pos]==n)
    {
      ans=sum[pos];
    }
    else if(dp2[pos2]==n)
    {
      ans=sum2[pos2];
    }
    printf("%lld",ans);nl;
  }
}