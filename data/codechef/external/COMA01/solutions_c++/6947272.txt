#include<bits/stdc++.h>
using namespace std;
struct g {
    long long gmax,gmin;
};
struct g tree[1000005];
long long a[1000005];
inline void build(int node,int rs,int re) {
    if(rs>re)
        return ;
    if(rs==re) {
        tree[node].gmax=tree[node].gmin=a[rs];
        return ;
    }
    build(2*node,rs,(rs+re)/2);
    build(2*node+1,((rs+re)/2)+1,re);
    tree[node].gmax=max(tree[2*node].gmax,tree[2*node+1].gmax);
    tree[node].gmin=__gcd(tree[2*node].gmin,tree[2*node+1].gmin);
}
struct g query(int node,int rs, int re,int qs,int qe){
    if(rs>=qs && re<=qe) {
        return tree[node];
    }
    if(qs>re || qe<rs) {
        struct g temp;
        temp.gmax=0;temp.gmin=0;
        return temp;
    }
    struct g temp1,temp2,temp;
    temp1=query(2*node,rs,(rs+re)/2,qs,qe);
    temp2=query(2*node+1,((rs+re)/2)+1,re,qs,qe);
    temp.gmin=__gcd(temp1.gmin,temp2.gmin);
    temp.gmax=max(temp1.gmax,temp2.gmax);
    return temp;
}
int main()
{
    int n,q;
    cin>>n>>q;
    for(int i=0;i<n;i++) {
        cin>>a[i];
    }
    build(1,0,n-1);
    while(q--) {
        int l,r;cin>>l>>r;
        struct g temp;
        temp=query(1,0,n-1,l-1,r-1);
        cout<<temp.gmax<<" "<<temp.gmin<<endl;
    }
return 0;
}
