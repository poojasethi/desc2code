#include<bits/stdc++.h>
using namespace std;
struct segment{
	int gmax;
	int gmin;
};
struct segment  gcd_final;
int mini(int a,int b)
{
	return a<b?a:b;
}
int minimu(int a,int b,int c)
{
	int p=mini(b,c);
	return a<p?a:p;
}
int maxi(int a,int b)
{
	return a>b?a:b;
}
int gcd_find(struct segment a,struct segment b)
{
	int i,l,h,temp;
	if(a.gmin>b.gmin)
	{
		l=b.gmin;
		h=a.gmin;
	}
	else
	{
		l=a.gmin;
		h=b.gmin;
	}
	while((h%l)!=0)
	{
		temp=h%l;
		h=l;
		l=temp;
		
	}
	return l;
}
struct segment segment_build(int a[],struct segment gcd[],int l,int h,int k)
{
	if(l==h)
	{
		gcd[k].gmax=a[l];
		gcd[k].gmin=a[l];
		return gcd[k];
	}
	int mid=(l+h)/2;
	struct segment left=segment_build(a,gcd,l,mid,2*k+1);
	struct segment right=segment_build(a,gcd,mid+1,h,2*k+2);
	gcd[k].gmax=maxi(left.gmax,right.gmax);
	gcd[k].gmin=gcd_find(left,right);
	return gcd[k];
}
struct segment query(struct segment gcd[],int l,int h,int a,int b,int k)
{
	if(a<=l&&b>=h)
	{
		return gcd[k];
	}
	else if(h<a||l>b)
	{
		struct segment temp;
		temp.gmax=-1;
		return temp;
	}
	int mid=(l+h)/2;
	struct segment left=query(gcd,l,mid,a,b,2*k+1);
	struct segment right=query(gcd,mid+1,h,a,b,2*k+2);
	if(left.gmax==-1)
	return right;
	else if(right.gmax==-1)
	return left;
	else
	{
		gcd_final.gmax=maxi(left.gmax,right.gmax);
		gcd_final.gmin=gcd_find(left,right);
	}
	return gcd_final;
}
int main()
{
	int t,n,q,l,r,i;
		scanf("%d%d",&n,&q);
		int a[n+5];
		for(i=0;i<n;i++)
		{
			scanf("%d",&a[i]);
		}
		int size=2*pow(2,ceil(log2(n)))-1;
		struct segment gcd[size+5];
		struct segment makhan=segment_build(a,gcd,0,n-1,0);
		for(i=0;i<q;i++)
		{
			scanf("%d%d",&l,&r);
			struct segment result=query(gcd,0,n-1,l-1,r-1,0);
			printf("%d %d\n",result.gmax,result.gmin);
		}
}