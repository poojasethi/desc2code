#include<bits/stdc++.h>
using namespace std;
struct node{
	 int maxi;
	 int mini;
};
struct node arr1[10000000];
	int arr[10000000];
int maximum(int a,int b)
{
	return a>b?a:b;
}
int gcd1(int a,int b)
{
	if(b==0)
	{
		return a;
	}
	
	
	gcd1(b,a%b);
}
struct node query(int l,int h,int low,int high,int k)
{
	if(l>high||h<low)
	{
		struct node c;
		c.maxi=-1;
		c.mini=-1;
		return c;
	}
	if(low<=l&&high>=h)
	{
		return arr1[k];
	}
	int mid=(l+h)/2;
	struct node a=query(l,mid,low,high,k*2+1);
	struct node b=query(mid+1,h,low,high,k*2+2);
	struct node temp;
	if(a.maxi==-1)
	{
		return b;
	}
	else if(b.maxi==-1)
	{
		return a;
	}
	else
	{
		temp.mini=gcd1(a.mini,b.mini);
	temp.maxi=maximum(a.maxi,b.maxi);
	return temp;
	}
	
}

struct node create_tree(int l,int h,int k)
{
	if(l==h)
	{
		
		arr1[k].maxi=arr[l];
		arr1[k].mini=arr[l];
		return arr1[k];
	}
	int mid=(l+h)/2;
	struct node a=create_tree(l,mid,2*k+1);
	struct node b=create_tree(mid+1,h,2*k+2);
	
	arr1[k].mini=gcd1(a.mini,b.mini);
	arr1[k].maxi=maximum(a.maxi,b.maxi);
	return arr1[k];
}
int main()
{
	int n,q,i,s,d;
	scanf("%d %d",&n,&q);

	for(i=0;i<n;i++)
	{
		scanf("%d",&arr[i]);
	}
	int size=2*pow(2,ceil(log2(n)))-1;
	
	create_tree(0,n-1,0);
	struct node a;
	for(i=0;i<q;i++)
	{
	scanf("%d %d",&s,&d);
     a=query(0,n-1,s-1,d-1,0);
	printf("%d %d\n",a.maxi,a.mini);
     }
}