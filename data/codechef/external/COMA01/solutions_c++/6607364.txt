// Program to show segment tree operations like construction, query and update
#include <stdio.h>
#include <math.h>
int ans;
// A utility function to get the middle index from corner indexes.

int getMid(int s, int e) {  return s + (e -s)/2;  }


// A utility function to get minimum of two numbers
int minVal(int x, int y) { return (x > y)? x: y; }

// A utility function to get the middle index from corner indexes.

/*  A recursive function to get the minimum value in a given range of array
    indexes. The following are parameters for this function.

    st    --> Pointer to segment tree
    index --> Index of current node in the segment tree. Initially 0 is
             passed as root is always at index 0
    ss & se  --> Starting and ending indexes of the segment represented by
                 current node, i.e., st[index]
    qs & qe  --> Starting and ending indexes of query range */
int RMQUtil(int *st, int ss, int se, int qs, int qe, int index)
{
    // If segment of this node is a part of given range, then return the
    // min of the segment
    if (qs <= ss && qe >= se)
        return st[index];

    // If segment of this node is outside the given range
    if (se < qs || ss > qe)
        return -12423315;

    // If a part of this segment overlaps with the given range
    int mid = getMid(ss, se);
    return minVal(RMQUtil(st, ss, mid, qs, qe, 2*index+1),
                  RMQUtil(st, mid+1, se, qs, qe, 2*index+2));
}

// Return minimum of elements in range from index qs (quey start) to
// qe (query end).  It mainly uses RMQUtil()
int RMQ(int *st, int n, int qs, int qe)
{
    // Check for erroneous input values
    if (qs < 0 || qe > n-1 || qs > qe)
    {
        printf("Invalid Input");
        return -1;
    }

    return RMQUtil(st, 0, n-1, qs, qe, 0);
}

// A recursive function that constructs Segment Tree for array[ss..se].
// si is index of current node in segment tree st
int constructSTUtil1(int arr[], int ss, int se, int *st, int si)
{
    // If there is one element in array, store it in current node of
    // segment tree and return
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }

    // If there are more than one elements, then recur for left and
    // right subtrees and store the minimum of two values in this node
    int mid = getMid(ss, se);
    st[si] =  minVal(constructSTUtil1(arr, ss, mid, st, si*2+1),
                     constructSTUtil1(arr, mid+1, se, st, si*2+2));
    return st[si];
}

/* Function to construct segment tree from given array. This function
   allocates memory for segment tree and calls constructSTUtil() to
   fill the allocated memory */
int *constructST1(int arr[], int n)
{
    // Allocate memory for segment tree
    int x = (int)(ceil(log2(n))); //Height of segment tree
    int max_size = 2*(int)pow(2, x) - 1; //Maximum size of segment tree
    int *st = new int[max_size];

    // Fill the allocated memory st
    constructSTUtil1(arr, 0, n-1, st, 0);

    // Return the constructed segment tree
    return st;
}











int gcd(int a,int b)
{
return b == 0 ? a : a > b ? gcd(b, a%b) : gcd(a, b%a);
}



int getSumUtil(int *st, int ss, int se, int qs, int qe, int index)
{
    int a,b;
    if (qs <= ss && qe >= se)
        {
            ans=gcd(ans,st[index]);
            return st[index];
        }
    if (se < qs || ss > qe)
        return 0;


        int mid = getMid(ss, se);

          getSumUtil(st, ss, mid, qs, qe, 2*index+1) ;
          getSumUtil(st, mid+1, se, qs, qe, 2*index+2);

return 0;


}

int getSum(int *st, int n, int qs, int qe)
{
    // Check for erroneous input values
    if (qs < 0 || qe > n-1 || qs > qe)
    {
        printf("Invalid Input");
        return -1;
    }

    return getSumUtil(st, 0, n-1, qs, qe, 0);
}

int constructSTUtil(int arr[], int ss, int se, int *st, int si)
{
    // If there is one element in array, store it in current node of
    // segment tree and return
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }
    int a,b;

    // If there are more than one elements, then recur for left and
    // right subtrees and store the sum of values in this node
    int mid = getMid(ss, se);
    a= constructSTUtil(arr, ss, mid, st, si*2+1);
         b=     constructSTUtil(arr, mid+1, se, st, si*2+2);
  st[si]=gcd(a,b);
    return st[si];
}

int *constructST(int arr[], int n)
{
    int x = (int)(ceil(log2(n)));
    int max_size = 2*(int)pow(2, x) - 1;
    int *st = new int[max_size];
    constructSTUtil(arr, 0, n-1, st, 0);

    return st;
}

int main()
{
    int i;
    int arr[100005] ;

    int n,q;
    scanf("%d%d",&n,&q);
    for(i=0;i<n;i++)
    scanf("%d",&arr[i]);

    int *st = constructST(arr, n);
int *st1=constructST1(arr,n);


  while(q--)
  {
      int l,r;
      scanf("%d%d",&l,&r);
         l--;r--;
      ans=arr[l];
     getSum(st, n, l, r);
      printf("%d %d\n",RMQ(st1,n,l,r),ans);

  }

    return 0;
}
