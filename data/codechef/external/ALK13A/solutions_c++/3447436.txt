#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <cstdlib>
#include <string>
#include <list>
#include <bitset>
#include <iomanip>
#include <cmath>
#include <sstream>
#include <deque>
#include <climits>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ll long long
#define Max(x,y) ((x)>(y)?(x):(y))
#define Min(x,y) ((x)<(y)?(x):(y))
#define Sl(x) scanf("%lld",&x)
#define Su(x) scanf("%llu",&x)
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define S(x) scanf("%d",&x)
#define IS(x) cin>>x
#define ISF(x) getline(cin,x)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define mii map<int,int>
#define pps pair<ll,pll>
#define ppf pair<pll,ll>
#define psi pair<string,int>
#define pis pair<int,string>
#define fr first
#define se second
#define p(x) cout<<(x)
#define MOD 1000000007
#define eps 1e-7
#define V(x) vector<x>
#define pb(x) push_back(x)
#define mem(x,i) memset(x,i,sizeof(x))
#define fori(i,s,n) for(i=(s);i<(n);i++)
#define ford(i,s,n) for(i=(n);i>=(s);--i)
#define INF 8944674407370955161LL
#define debug(i,st,arr) fori(i,0,st){cout<<arr[i]<<" ";}cout<<endl;
#define forci(i,sw) for((i)=(sw).begin();(i)!=(sw).end();(i)++)
#define forcd(i,sw) for((i)=(sw).rbegin();(i)!=(sw).rend();(i)++)

int abs(int x) {if(x < 0) return -x; return x;}

V(int) v[10004], vv[10004];
ll dist[10004], d[10004];
int n, k, m, x, y;

int main()
{
    ios_base::sync_with_stdio(false);
    int t;
    IS(t);

    while(t--) {
        IS(n>>k);

        int i;

        fori(i,0,n) {
            IS(d[i]);
            v[i].clear();
            vv[i].clear();
        }

        IS(m>>x>>y);
        x--, y--;
        fori(i,0,m) {
            int v1, v2, v3;
            IS(v1>>v2>>v3);
            v1--,v2--;
            v[v1].pb(v2);
            v[v2].pb(v1);
            vv[v1].pb(v3);
            vv[v2].pb(v3);
        }
        if(x == y) {
            p(0), p(endl);
            continue;
        }
        ll low, high, mid;

        low = 0;
        high = 10000000000000000LL;
        ll ans = high;

        while(low <= high) {
            mid = (low+high)/2;
            if(mid < d[x]) {
                low = mid+1;
                continue;
            }
            mem(dist,-1);
            dist[x] = 0;
            priority_queue<pii, V(pii), greater<pii> > pq;
            pq.push(pii(0,x));

            while(!pq.empty()) {
                int pos = pq.top().second;
                pq.pop();
                if(pos == y) break;
                fori(i,0,v[pos].size()) {
                    if(d[v[pos][i]] <= mid)
                    if(dist[v[pos][i]] == -1 || (dist[v[pos][i]] > dist[pos]+vv[pos][i])) {
                        dist[v[pos][i]] = dist[pos]+vv[pos][i];
                        pq.push(pii(dist[v[pos][i]], v[pos][i]));
                    }
                }
            }

            if(dist[y] == -1 || dist[y] > k) {
                low = mid+1;
            }
            else {
                high = mid-1;
                ans = min(ans, mid);
              //  p(ans), p(endl);
            }
        }

        if(ans == 10000000000000000LL) {
            p(-1), p(endl);
        }
        else {
            p(ans), p(endl);
        }
    }
}
