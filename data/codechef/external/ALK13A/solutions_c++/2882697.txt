#include<cstdio>
#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstdlib>
#include<climits>
#include<cstring>
using namespace std;

#define CLR(a,x) memset(a,x,sizeof(a))
#define PB push_back
#define INF 1000000000
#define MOD 1000000007
#define MP make_pair
#define tr(container , it) for(typeof(container.begin()) it=container.begin() ; it!=container.end() ; it++)
#define FOR(i,a,b) for(i=a;i<b;i++)
#define REP(i,a) FOR(i,0,a)
#define LL long long
#define VI vector < int >
#define PII pair < int , int >


void precompute(void) {
}
LL d[1024];
vector < vector < PII > > edge;
int n,x,y,m,k;
int dis[1024];
set < pair < int , int > > S;
bool pos(LL mid) {
  int u,v,cdis,ndis;
  S.clear();
  S.insert(MP(0,x));
  if(d[x] > mid)return false;
  fill(dis, dis+n, INF);
  dis[x] = 0;
  PII top;
  while(!S.empty()) {
    top = *(S.begin());
    S.erase(S.begin());
    u = top.second;
    cdis = dis[u];
    if(u == y) {
      return cdis<=k;
    }
    int sz = edge[u].size();
    for(int i=0;i<sz;i++) {
      v = edge[u][i].first;
      ndis = cdis + edge[u][i].second;
      if(d[v] > mid)
        continue;
      if(dis[v] > ndis) {
        S.erase(MP(dis[v],v));
        dis[v] = ndis;
        S.insert(MP(dis[v],v));
      }
    }
  }
  return false;
}



int main() {
	int t,u,v,c;
	precompute();
	
	while(scanf("%d",&t)!=EOF) {
		while(t--) {
		  scanf("%d%d",&n,&k);
      for(int i=0;i<n;i++) {
        scanf("%lld",&d[i]);
      }
      scanf("%d%d%d",&m,&x,&y);
      x--;y--;
      edge.clear();
      edge.resize(n);
      for(int i=0;i<m;i++) {
        scanf("%d%d%d",&u,&v,&c);
        u--;v--;
        edge[u].PB(MP(v,c));
        edge[v].PB(MP(u,c));
      }
      LL ans = -1,low,high,mid;
      low = 0;
      high = 1000000000000000LL;
      while(low<=high) {
        mid = (low + high)/2;
        if(pos(mid)) {
          ans = mid;
          high = mid-1;
        } else {
          low = mid+1;
        }
      }
      cout<<ans<<endl;
    }
    break;
	}
	return 0;
}
