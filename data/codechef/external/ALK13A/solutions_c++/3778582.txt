#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility> //pair
#include <cstring>
using namespace std;
long long n,k,d,a,b,c,m,src,dest;
long long danger[1005],dan[1005];
bool visited[1005];
long long maxi,low,high;
vector<pair<long,long> > adj[1005];
bool dfs(long long node,long long dist,long long maximum){
   if(dist>k)
    return false;
   if(maximum > maxi)
    return false;
   if(node == dest){
    maxi=min(maxi,maximum);
    return true;
   }
   for(int i=0;i<adj[node].size();i++){
    if(!visited[adj[node][i].first]){
        visited[adj[node][i].first]=true;
        bool flag=dfs(adj[node][i].first,dist+adj[node][i].second,max(danger[adj[node][i].first],maximum));
        visited[adj[node][i].first]=false;
        if(flag)
        return true;
    }
   }
   return false;
}
void solve(){
    low=0;
    high=n-1;
    for(int i=0;dan[i]<maxi;i++){
        low++;
        //printf("aditya\n");
    }
    //printf("%lld\n",low);
    while(low<high){
      maxi=dan[(high+low)/2];
      visited[src]=true;
      bool flag=dfs(src,0,max(danger[src],danger[dest]));
      if(flag){
        high=(low+high)/2;
      }
      else{
        low=(low+high)/2 +1;
      }
    visited[src]=false;
    }
    //printf("%lld\n",low);
}
int main(){
int t;
scanf("%d",&t);
while(t--){
memset(visited,false,sizeof visited);
scanf("%lld%lld",&n,&k);
for(int i=0;i<n+5;i++)
    adj[i].clear();
for(int i=0;i<n;i++){
 scanf("%lld",&danger[i]);
 dan[i]=danger[i];
}
sort(dan,dan+n);
scanf("%lld%lld%lld",&m,&src,&dest);
src--;dest--;
maxi=max(danger[src],danger[dest]);
while(m--){
    scanf("%lld%lld%lld",&a,&b,&c);
    a--;b--;
    adj[a].push_back(make_pair(b,c));
    adj[b].push_back(make_pair(a,c));
}
solve();
//printf("%lld\n",low);
maxi=dan[low];
//printf("%lld\n",maxi);
visited[src]=true;
bool flag=dfs(src,0,max(danger[src],danger[dest]));
if(!flag)
    printf("-1\n");
else
    printf("%lld\n",maxi);
}
return 0;
}
