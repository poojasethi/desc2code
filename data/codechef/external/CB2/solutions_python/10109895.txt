#include<stdio.h>
void printArray(int A[], int size);
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
 
    /* create temp arrays */
    int L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there
       are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there
       are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the
   sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = l+(r-l)/2;
 
        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
 
        merge(arr, l, m, r);
    }
}
 
/* UTILITY FUNCTIONS */
/* Function to print an array */
void printArray(int A[], int size)
{
    int i;
    for (i=size-1; i >= 0; i--)
        printf("%d ", A[i]);
         printf("\n");
}
 
/* Driver program to test above functions */
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
	int arr[500],i,arr_size,n,g[500],k,u,c[500],a[500],j,h;
	static int w[500];
	//printf("enter size of array");
	scanf("%d",&arr_size);
	for(i=0;i<arr_size;i++)
	scanf("%d",&arr[i]);
    //printf("Given array is \n");
   // printArray(arr, arr_size);
 
    mergeSort(arr, 0, arr_size - 1);
 
    //printf("\nSorted array is \n");
    //printArray(arr, arr_size);
   n=arr_size;
    for(i=0;i<n;i++)
    {
    	g[n-i-1]=arr[i];
	}
	
	//for(i=0;i<n;i++)
	//printf("%d ",g[i]);
	k=(n+1)/2;
	u=(n-1)/2;
	for(i=0;i<k;i++)
    	a[i]=g[i];	
    	//	for(i=0;i<k;i++)
//	printf(" a is %d \n ",a[i]);
	   for(i=0;i<=u;i++)
	   w[i]=g[n-i-1];
	  // 	for(i=0;i<=u;i++)
	//printf("w is %d\n ",w[i]);
	i=0,j=0;h=0;
	   while(i<n&&j<k||h<u)
      {
	   	c[i]=a[j];
	   	c[i+1]=w[h];
	   	i=i+2;
	   	j++;
	   	h++;
	   }
	   	for(i=0;i<n;i++)
	printf("%d ",c[i]);
	printf("\n");
	
}
    return 0;
}