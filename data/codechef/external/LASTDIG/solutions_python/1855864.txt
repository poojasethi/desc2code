import sys
import math

def last_digit_sum_helper(range_of_nums):
    """Helper function to calculate over intervals smaller than 10"""
    sum_d = 0
    for num in xrange(int(range_of_nums[0]), int(range_of_nums[1]) + 1, 1):
        sum_s = 0
        for digit in str(num):
            if (int(digit) % 2) == 0:
                sum_s += (int(digit)*2 % 10)
            else:
                sum_s += (int(digit) % 10)
        sum_d += (sum_s % 10)
    return sum_d

def last_digit_sum(range_of_nums):
    """Does most of the heavy lifting of numbers from xxx0 to yyy0"""
    # Get the smallest multiple of ten
    bottom_10 = int(math.ceil(float(range_of_nums[0])/10.)*10)
    # Get the largest multiple of ten
    top_10 = int(math.floor(float(range_of_nums[1])/10.)*10)
    # First grab all the multiples of ten
    if top_10 > bottom_10:
        sum_d = ((top_10 - bottom_10) / 10) * 45
        # Then calculate everything below
        sum_d += last_digit_sum_helper([range_of_nums[0], bottom_10 - 1])
        # Then calculate everything above
        sum_d += last_digit_sum_helper([top_10, range_of_nums[1]])
    else:
        # Otherwise just calculate over an interval less than 10
        sum_d = last_digit_sum_helper([int(range_of_nums[0]),
                                       int(range_of_nums[1])])
    return sum_d

if __name__ == "__main__":
    sys.stdin.next()
    for line in sys.stdin:
        line = line.rstrip()
        nums = line.split(" ")
        print last_digit_sum(nums[0:2])
