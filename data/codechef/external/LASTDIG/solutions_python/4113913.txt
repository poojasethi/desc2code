#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random


# choisi k nombre parmis n
def choose(n, k):
    """
    A fast way to calculate binomial coefficients by Andrew Dalke (contrib).
    """
    if 0 <= k <= n:
        ntok = 1
        ktok = 1
        for t in xrange(1, min(k, n - k) + 1):
            ntok *= n
            ktok *= t
            n -= 1
        return ntok / ktok
    else:
        return 0


# return list of factors of n (without 1) eg . factors(20) = [2, 2, 5]
def factors(n):
    gaps = [1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6]
    length, cycle = 11, 3
    f, fs, next = 2, [], 0
    while f * f <= n:
        while n % f == 0:
            fs.append(f)
            n /= f
        f += gaps[next]
        next += 1
        if next == length:
            next = cycle
    if n > 1: fs.append(n)
    return fs


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(A, B):
    def S(N):
        ret_sum = 0
        for c in str(N):
            digit = int(c)
            if digit % 2 == 0:
                ret_sum += 2*digit
            else:
                ret_sum += digit
        return ret_sum

    def D(N):
        return int(str(N)[-1])

    ret = 0
    for i in xrange(A, B + 1):
        ret += D(S(i))

    return ret


def alg2(A, B):
    if A == 0:
        mod_b = (B + 1) % 10
        if mod_b == 0:
            return 45 * (B + 1) / 10
        else:
            return alg2(0, B - mod_b) + alg(B - mod_b + 1, B)
    else:
        # remove last digit
        return alg2(0, B) - alg2(0, A - 1)


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())

    def D(N):
        return int(str(N)[-1])

    def S(N):
        ret_sum = 0
        for c in str(N):
            digit = int(c)
            if digit % 2 == 0:
                ret_sum += 2*digit
            else:
                ret_sum += digit
        return ret_sum
    #for i in xrange(50):
    #    print i, D(S(i))

    #comp(alg, alg2, 0, 9)
    #comp(alg, alg2, 10, 19)
    #comp(alg, alg2, 10, 29)
    #comp(alg, alg2, 0, 99)
    #comp(alg, alg2, 100, 199)
    #comp(alg, alg2, 1000, 1999)
    #comp(alg, alg2, 97621050, 97621999)
    #comp(alg, alg2, 0, 123)
    #comp(alg, alg2, 123, 456)
    #comp(alg, alg2, 0, 122)
    #comp(alg, alg2, 0, 456)
    #comp(alg, alg2, 0, 449)
    #comp(alg, alg2, 0, 119)
    #comp(alg, alg2, 450, 456)
    #comp(alg, alg2, 120, 123)

    for icase in xrange(nb):
        A, B = map(int, data.readline().split())  # int
        #L = map(float, data.readline().split())  # float
        #L = data.readline().split()  # string
        #s = data.readline().strip()
        #i = int(data.readline().strip())
        #comp(alg, alg2, A, B)
        res = alg2(A, B)
        print res


if __name__ == "__main__":
    main()
