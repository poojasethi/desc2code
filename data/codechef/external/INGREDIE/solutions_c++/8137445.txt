// Type: Dynamic Programming with bitmasking

#include <algorithm>
#include <vector>
#include <cstdio>
#include <cstring>
#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;
const int INF = 1000000009;
const int MX = 101;
vector<int> set1,set2;
int dp[MX][MX];
int arr[MX][MX];
int shop[10];
int n,m,a,b,c,s,p1,p2;

inline void pre(){
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
          if(i==j)
           arr[i][j]=0;
          else
           arr[i][j]=INF;
        }
    }
}

inline void init(){
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
        dp[i][j]=arr[i][j];
}

inline void floyd_warshall(){
    for(int k=0;k<n;k++)
      for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
         dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]);
}

int main(){
scanf("%d%d",&n,&m);
int i,j;
pre();
while(m--){
    scanf("%d%d%d",&a,&b,&c);
    arr[a][b]=arr[b][a]=c;
}
    init();
    floyd_warshall();
    scanf("%d",&s);
    for(int i=0;i<s;i++)
        scanf("%d",&shop[i]);
    sort(shop,shop+s);
    scanf("%d%d",&p1,&p2);
    LL ans=INF;
    for(int mask=0;mask<(1<<s);mask++){
        set1.clear();set2.clear();
        set1.push_back(p1);
        set2.push_back(p2);
        for(int j=0;j<s;j++){
          if(1<<j & mask)
          {
            set1.push_back(shop[j]);
          //  cout<<"1 mask "<<mask<<" j "<<j<<" "<<shop[j]<<endl;
        }
          else
        {
            set2.push_back(shop[j]);
          //  cout<<"2 mask "<<mask<<" j "<<j<<" "<<shop[j]<<endl;
        }
        }
       LL ans1=INF;
       LL ans2=INF;
       do{
           LL cost1=0;
           for(int i=1;i<set1.size();i++)
             cost1+=dp[set1[i-1]][set1[i]];
           ans1=min(ans1,cost1);

       }while(next_permutation(set1.begin()+1,set1.end()));
       do{
           LL cost2=0;
           for(int i=1;i<set2.size();i++)
             cost2+=dp[set2[i-1]][set2[i]];
           ans2=min(ans2,cost2);

       }while(next_permutation(set2.begin()+1,set2.end()));
       ans=min(ans,ans1+ans2);
    }
    printf("%lld\n",ans);
return 0;
}
