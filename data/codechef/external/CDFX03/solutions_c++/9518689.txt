// A C++ program to find maximal Bipartite matching.
#include <iostream>
#include <string.h>
using namespace std;
 
// M is number of applicants and N is number of jobs
 
// A DFS based recursive function that returns true if a
// matching for vertex u is possible
int M , N;
bool bpm(bool bpGraph[124][124], int u, bool seen[124], int matchR[124])
{
    // Try every job one by one
    for (int v = 0; v < N; v++)
    {
        // If applicant u is interested in job v and v is
        // not visited
        if (bpGraph[u][v] && !seen[v])
        {
            seen[v] = true; // Mark v as visited
 
            // If job 'v' is not assigned to an applicant OR
            // previously assigned applicant for job v (which is matchR[v]) 
            // has an alternate job available. 
            // Since v is marked as visited in the above line, matchR[v] 
            // in the following recursive call will not get job 'v' again
            if (matchR[v] < 0 || bpm(bpGraph, matchR[v], seen, matchR))
            {
                matchR[v] = u;
                return true;
            }
        }
    }
    return false;
}
 
// Returns maximum number of matching from M to N
int maxBPM(bool bpGraph[124][124])
{
    // An array to keep track of the applicants assigned to
    // jobs. The value of matchR[i] is the applicant number
    // assigned to job i, the value -1 indicates nobody is
    // assigned.
    int matchR[124];
 
    // Initially all jobs are available
    memset(matchR, -1, sizeof(matchR));
 
    int result = 0; // Count of jobs assigned to applicants
    for (int u = 0; u < M; u++)
    {
        // Mark all jobs as not seen for next applicant.
        bool seen[124];
        memset(seen, 0, sizeof(seen));
 
        // Find if the applicant 'u' can get a job
        if (bpm(bpGraph, u, seen, matchR))
            result++;
    }
    return result;
}
 
// Driver program to test above functions
int main()
{
    // Let us create a bpGraph shown in the above example
    int u , v , test;
    scanf("%d",&test);

    while(test--)
    {
    scanf("%d %d",&M,&N);
    bool bpGraph[124][124];

    memset(bpGraph , false , sizeof(bpGraph));
    scanf("%d",&u);
    while(u!=-1)
    {
        scanf("%d",&v);
        bpGraph[u-1][v-1]  = 1;
        scanf("%d",&u);
    }
    cout << maxBPM(bpGraph) << endl;
    }
    return 0;
}