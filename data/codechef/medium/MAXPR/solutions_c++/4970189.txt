//..........@@   Avneet Singh   @@...........//
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define MAX 100
#define mx 100
#define pb push_back
#define gc getchar
#define mp make_pair
#define mod 1000000007

//.............Functions......................///
bool isDigit(char xx) {return ('0' <= xx && xx <= '9');}
inline int string_to_int(string s){stringstream ss ;ss<<s; int x; ss >> x;return x;}
inline string int_to_string(int x){stringstream ss ;ss<<x; string s ; ss >> s;return s;}

bool issubsequence(const char *A, const char *B)
{
  while(*A)
  {
	if(*B==*A)
	B++;
	A++;
  }
  return !*B;
}
ll modulo(ll a,ll b,ll c)
{
	long long x=1,y=a;
	while(b > 0)
	{
	  if(b%2 == 1){
      x=(x*y)%c;
	}
	y = (y*y)%c; 
	b /= 2;
	}
  return x%c;
}
ll mulmod(ll a,ll b)
{ 
	long long x = 0,y=a;
	while(b > 0)
	{
		if(b%2 == 1){
		x = (x+y);
	}
	y = (y*2);
	b /= 2;
	}
	return x;
}
double comb[MAX][MAX];
void ncr() // function to pre process ncr
{
	for(int i=0;i<MAX;i++)
	{
		comb[i][0]=comb[i][i]=1.0;
		for(int j=0;j<i;j++)
		{
			comb[i][j]= comb[i-1][j-1] + comb[i-1][j];
		}
	}
}
//take fast input with sign
int read() {
  char c = gc();
  int sign = 1;
  while((c<'0' || c>'9') && c!='-') c = gc();
  if(c=='-') {
    sign = -1;
    c = gc();
  }
  int ret = 0;
  while(c>='0' && c<='9' ) {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret*sign;
} 
//........@@ To merge ranges  @@ .................//
struct node{
	ll start;
	ll last;
};
inline bool comp(node a, node b)
{
	return a.start<b.start;
}
vector<node>ranges;
void merge_ranges(vector<node> &range)
{
	if(range.size()<=0)
	 return;
	stack<node> merge;
	merge.push(range[0]);
	for(int i=1;i<range.size();i++)
	{
		node top = merge.top();
		if(top.last < range[i].start)
		{
			merge.push(range[i]);
		}
		else if(top.last < range[i].last)
		{
			top.last = range[i].last;
			merge.pop();
			merge.push(top);
		}
	}
	while(!merge.empty())
	{
		node temp = merge.top(); 
		ranges.pb((node){temp.start,temp.last});
		merge.pop();
	}
	return;
}
ll DP[mx+1][2*mx+1];
ll cd[mx+1];
int a[200001];
int main()
{
    int t,n;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        for(int i=0;i<n;i++)scanf("%d",&a[i]);
        ll res=0;
        memset(DP,0,sizeof(DP));
        memset(cd,0,sizeof(cd));
        for(int i=0;i<n;i++)
        {
           for(int j=1;j<=mx;j++)
           {
            if(a[i]-j== 0)
                DP[a[i]][a[i]-j+mx]=((2*DP[a[i]][a[i]-j+mx])+1)%mod;
            else
                DP[a[i]][a[i]-j+mx]=((DP[a[i]][a[i]-j+mx]+DP[j][a[i]-j+mx])+cd[j])%mod;
           }
           cd[a[i]]++;
        }
        /*explanation of 39 lines 
        DP[a[i]][a[i]-j+mx] means that the number of subsequences starting from a[i] and having difference
        a[i]-j+mx is equal to possible all numbers( starting from j) and having same difference
        ans also includes the no of occurences  with jth number which is store in cd[j]
        
        */
        for(int i=0;i<2*mx+1;i++)
		 for(int j=0;j<mx+1;j++)
            res=(res+DP[j][i])%mod;
         res=(modulo(2,n,mod)-1-res)%mod;
         res=res+mod;
         res=res%mod;
         printf("%lld\n",res);
      }
}
