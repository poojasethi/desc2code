#include<bits/stdc++.h>
#define mod 1000000007
using namespace std;
inline int mul(int a, int b) 
{
    return (long long int)a*b%mod;
}
int _pow(int x, int n) 
{
    int res=1;
    while(n) {
        if(n & 1) res=mul(res, x);
        x=mul(x, x);
        n>>=1;
    }
    return res;
}
long long int power(int n)
{
	long long int temp=1;
	if(n == 0)
	   return 1;
	temp = power(n/2);
	temp = (temp*temp)%mod;
	if(n & 1)
	{
		return (2*temp)%mod;
	}
	else
	    return temp;
}
main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n;
		scanf("%d",&n);
		int a[n+1];
		for(int i=1;i<=n;i++)
		   scanf("%d",&a[i]);
		int answer=0;
		int dp[n+1];
		memset(dp,0,sizeof(dp));
		for(int difference = -100;difference <= 100;difference++)
		{
			int sum[101],current=0;
			memset(sum,0,sizeof(sum));
			for(int i=1;i<=n;i++)
			{
				dp[i]=1;
				if(a[i] - difference >=1 && a[i]-difference <= 100)
				   dp[i] = (sum[a[i] - difference] + dp[i]);
				sum[a[i]] = (sum[a[i]] + dp[i]);
				if(sum[a[i]] >= mod)
				   sum[a[i]] -= mod;
				current = (current + dp[i]);
				if(current>=mod)
				  current -= mod;
			}
		//	current = (current - n)%mod;
			answer = (answer + current);
			if(answer >= mod)
			   answer -= mod;
			answer = (answer + mod - n);
			if(answer>=mod)
			  answer -= mod;
		}
		answer = answer + n;
		if(answer>mod)
		  answer -= mod;
		long long int res=0;
		res = (res + _pow(2,n));
		if(res>=mod)
		   res -= mod;
		res = (res + mod - 1);
		if(res>=mod)
		res -= mod;
		res = (res + mod - answer);
		if(res>=mod)
		  res -= mod;
		//answer = (((long long int)power(2))%mod - 1 - answer)%mod;
		
		printf("%d\n",res);
	}
}