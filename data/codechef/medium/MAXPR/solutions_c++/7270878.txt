#include <bits/stdc++.h>
using namespace std;
#define ll  long long int
#define mod 1000000007

int  arr[200010],dp[200010];//,sum[300];

ll exponentiation(ll base,ll exp)
{
    ll ans=1;
    while(exp>0)
    {
        if(exp%2)   ans=(ans*base)%mod;
        base=(base*base)%mod;
        exp/=2;
    }
    return ans%mod;
}


int  main()
{
    int t;
   // cin>>t;
    scanf("%d",&t);
    while(t--)
    {
        int maxi=INT_MIN,n,i,j,ans=0,temp=0,curi=0,mini=INT_MAX,diff=0,piku=0;
        int sum[110]={0};
        //memset(arr,0,sizeof(arr));
        memset(dp,0,sizeof(dp));
        //memset(sum,0,sizeof(sum));

        //cin>>n;
        scanf("%d",&n);
        for(i=1;i<=n;i++)
        {
            scanf("%d",&arr[i]);
           // cin>>arr[i];
            if(maxi<arr[i])
                maxi=arr[i];

            if(mini>arr[i])
                mini=arr[i];
        }
        // dp[i] denotes total AP's till ith as end elemment


        diff=maxi-mini;

        for(i=-maxi;i<=maxi;i++)
        {
            curi=0;

            memset(sum,0,sizeof(sum));
            for(j=1;j<=n;j++)
            {
                temp=arr[j]-i;
                if(temp>=1 &&  temp<=100)
                {
                    dp[j]=sum[arr[j]-i]+1;

                    if(dp[j]>=mod)  dp[j]-=mod;
                }
                else
                    dp[j]=1;        // considering n=1 ke liye bhi AP hai

                sum[arr[j]]=sum[arr[j]]+dp[j];

                if(sum[arr[j]]>=mod)    sum[arr[j]]-=mod;

                curi=curi+dp[j];

                if(curi>=mod)   curi-=mod;
            }
            curi=curi-n+mod;
            if(curi>=mod)
                curi-=mod;

            ans=ans+curi;
            //ans+=mod;
            if(ans>=mod)
                ans-=mod;
           // if(ans<0)
             //   ans+=mod;

            //ans=ans%mod;
        }

        ans=ans+n+1;
        if(ans>=mod)    ans-=mod;
        piku=exponentiation(2,n)-ans;
        piku+=mod;
        if(piku>=mod)
            piku-=mod;

    printf("%d\n",piku);
    }
    return 0;
}
