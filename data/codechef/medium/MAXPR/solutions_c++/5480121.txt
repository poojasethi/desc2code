#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <deque>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <string>
#include <stack>
#include <sstream>
#include <vector>
#include <numeric>

#define FOR(i, a, b) for(int i = a; i <= b; ++i)
#define FRD(i, a, b) for(int i = a; i >= b; --i)
#define FR(i, a) for(int i = 0; i < a; ++i)
#define REP(i, a) for(int i = 0; i <= a; ++i)
#define pb push_back
#define sz(x) (int)x.size()
#define reset(a, b) memset(a, b, sizeof a)
#define bug(x) cout << #x << " = " << x << endl
#define bg(a, m, n) FOR(i, m, n) cout << a[i] << " "; cout << endl
using namespace std;

typedef long long ll;
typedef unsigned long long qword;

const int maxN = 2e5 + 5;
const ll base = 1e9 + 7;

int n;
int a[maxN];
int dp[maxN];
int sum[101];

int Pow(int p) {
    if (p == 0) return 1;
    int t = Pow(p >> 1);
    t = ((ll)t * t) % base;
    if (p & 1) t = ((ll)t * 2) % base;
    return t;
}

inline int Read() {
    char ch; int num = 0;
    do {
        ch = getchar();
    } while (!isdigit(ch));
    do {
        num = num * 10 + ch - '0';
        ch = getchar();
    } while (isdigit(ch));
    return num;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("TEST.INP", "r", stdin);
#else
    ios_base::sync_with_stdio(false);
#endif // ONLINE_JUDGE
    int nTests = 0;
    nTests = Read();
    while (nTests--) {
        n = Read();
        FOR(i, 1, n) a[i] = Read();
        int res = (Pow(n) - 1 + base * base) % base;
        FOR(d, -99, 99) {
            FOR(i, 1, n) dp[i] = 0;
            reset(sum, 0);
            FOR(i, 1, n) {
                if (a[i] - d >= 1 && a[i] - d <= 100)
                    dp[i] = (sum[a[i] - d] + 1) % base;
                else
                    dp[i] = 1;
                sum[a[i]] = (sum[a[i]] + dp[i]) % base;
                res = res - dp[i];
                if (res < 0) res = res + base;
            }
            res = res + n;
            if (res > base) res -= base;
        }
        res = res - n;
        if (res < 0) res = res + base;
        printf("%d\n", (int)res);
    }
    return 0;
}

