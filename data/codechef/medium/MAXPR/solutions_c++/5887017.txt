#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <math.h>
#include <cstring>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>

using namespace std;

inline void FINT(int &x)
{
register int c = getchar_unlocked();
x = 0;
int neg = 0;
for(; ((c<48 || c>57) && c != '-'); c = getchar_unlocked());
if(c=='-') {
neg = 1;
c = getchar_unlocked();
}
for(; c>47 && c<58 ; c = getchar_unlocked()) {
x = (x<<1) + (x<<3) + c - 48;
}
if(neg)
x = -x;
}

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back
#define MOD 1000000007
#define MAX 200002

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;


int a[MAX];
//LL dp[MAX];

LL power(LL b , LL e)
{

LL r=1;

while(e)
{

if(e&1) {   r = r*b;  if(r>MOD) r %= MOD; }
e >>= 1;
b = b*b;
b %= MOD;

}

return r;

}
int temp[MAX];

int main()
{

temp[0] = 1;
FOR(i,1,MAX)
{
    temp[i] = temp[i-1]*2;
     if(temp[i]>MOD) temp[i] %= MOD;
}

int test; FINT(test);

while(test>0)
{

	--test;

	int n; FINT(n);
    int max1 = 0;
    int min1 = 105;
	FOR(i,1,n+1)
    {
        FINT(a[i]);
       if(a[i]>max1) max1 = a[i];
       if(a[i]<min1) min1 = a[i];
    }

	LL ans=0;
	//CLR(dp);

    int sum[105];
    int val=1;
    int curr=0;
	FOR(diff,min1-max1,max1-min1+1)
	{

        CLR(sum);
		curr=0;
		FOR(i,1,n+1)
		{
             val=1;
			if(a[i]-diff>0 && a[i]-diff<=100)
			{
				val = 1 + sum[a[i] - diff];
				if(val>MOD) val %= MOD;
			}

                sum[a[i]] += val;
				if(sum[a[i]]>MOD) sum[a[i]] %= MOD;
				curr += val;
                if(curr>MOD) curr %= MOD;

		}

		ans += curr;
		ans -= n;

		while(ans<0)
			ans += MOD;

	}


	ans += n;
	if(ans>MOD) ans %= MOD;


	int ans1 = temp[n] -1 - ans;

	while(ans1<0) ans1 += MOD;

	printf("%d\n",ans1);
}


return 0;
}
