#include <iostream>
#include <cstdio>
#include <cstring>
#define FOR(i,m,n) for(i=m;i<n;i++)
#define MAX 200000
#define min_ele 1
#define max_ele 100
#define mod 1000000007

using namespace std;

const int zero_ele_ap=1;
long int two_ele_ap[max_ele+10][2*max_ele+10],visited_count[max_ele+10];
int A[MAX+10];

bool valid_num(int a)
{
    return a>=min_ele && a<=max_ele;
}

long long int fast_exp(long long int base,long int exp)
{
    if(!exp) return 1;
    long long int new_base = (base * base) % mod;
    if(exp & 1) return (base*fast_exp(new_base,exp>>1))%mod;
    else return fast_exp(new_base,exp>>1);
}

int main()
{
int i,t,diff,pre_ele,cur_ele;long int j,n,one_ele_ap;
long long int ans,temp;

scanf("%i",&t);

FOR(i,0,t)
{
scanf("%ld",&n);
ans=0;

FOR(j,0,n) scanf("%i",&A[j]);

one_ele_ap = n;

ans = fast_exp(2,n) - one_ele_ap - zero_ele_ap;
if(ans < 0) ans=ans+mod;

memset(two_ele_ap,0,sizeof(two_ele_ap));
memset(visited_count,0,sizeof(visited_count));

FOR(j,0,n)
    {
        cur_ele=A[j];
        FOR(diff,-max_ele,max_ele)
            {
                    pre_ele = cur_ele - diff;
                    if(valid_num(pre_ele))
                    {
                        temp = two_ele_ap[pre_ele][diff + max_ele] + visited_count[pre_ele];
                        if(temp >= mod) temp = temp - mod;
                        two_ele_ap[cur_ele][diff + max_ele] = temp + two_ele_ap[cur_ele][diff + max_ele];
                        if(two_ele_ap[cur_ele][diff + max_ele] >=mod) two_ele_ap[cur_ele][diff + max_ele] =two_ele_ap[cur_ele][diff + max_ele]-mod;
                        ans = ans - temp;
                        if(ans < 0) ans = ans + mod;
                    }
            }
        visited_count[cur_ele]++;
    }

printf("%lld\n",ans);
}

return 0;
}
