//dark_9
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
#include <vector>
#include <math.h>
#include <stack>
#include <queue>
#include <ctype.h>
#include <map>
#include <bitset>
#include <limits>
typedef long long ll;
#define filla(x,y) memset(x,y,sizeof(x))
#define pb push_back
#define mp make_pair
#define INF 0x3f3f3f3f
#define F first
#define S second
#define gc getchar
#define MOD 1000000000
using namespace std;
long long choose(int n,int k)
{
    if(k==0)
        return 1;
    else
    {
        long long f=1;
        if(k>n-k)
            k=n-k;
        int p=1;
        while(p<=k)
        {
            f*=n--;
            f/=p++;
        }
        return f;
    }
}
/*ll power(int a,int b)
{
    ll ret;
    if(b==0)
        return 1;
    if(b==1)
        return a;
    ret=power(a,b/2);
    ret=(ret*ret);
    if(b&1)
        ret=(ret*a);
    return ret;
}*/
ll dp[2005][2005];
ll c[4050][4050];
ll s[2005][2005];
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
/*bool cmp(int a,int b)
{
    return a>b;
}*/
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
        int i,j;
        for(i=0;i<4050;i++)
            c[i][0]=1;
        for(i=1;i<4002;i++)
        {
            for(j=1;j<=i;j++)
            {
                if(i==j)
                    c[i][j]=1;
                else
                    c[i][j]=(c[i-1][j-1]+c[i-1][j])%MOD;
            }
        }
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,m;
        memset(dp,0,sizeof(dp));
        memset(s,0,sizeof(s));
        scanint(n);scanint(m);
        dp[1][0]=1;
        s[1][0]=1;
        for(i=1;i<=m;i++)
        {
            dp[1][i]=c[i+m-1][m-1];
            s[1][i]=(s[1][i-1]%MOD+dp[1][i]%MOD)%MOD;
        }
        for(i=2;i<=n;i++)
        {
            for(j=0;j<=m;j++)
            {
                dp[i][j]=((s[i-1][j])*(c[j+m-1][m-1]))%MOD;
                s[i][j]=(s[i][j-1]+dp[i][j]%MOD)%MOD;
            }
        }
        printf("%lld\n",s[n][m]);
    }
    return 0;
}  