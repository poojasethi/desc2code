//Amit Gupta              
#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<int,int> II;
#define REP(i,i1,n) for(int i=i1;i<n;i++)
#define REPB(i,i1,n) for(int i=i1;i>=n;i--)
#define PB push_back
#define MP make_pair
#define ALL(c) (c).begin(),(c).end()
#define F first
#define S second
#define SZ(a) (LL)a.size()
#define EPS 1e-12
#define MOD 1000000000
#define TR1(x) cerr<<#x<<" : "<<x<<endl
#define TR2(x,y) cerr<<#x<<" : "<<x<<" | "<<#y<<" : "<<y<<endl
#define FAST_IO ios_base::sync_with_stdio(false);cin.tie(NULL)
#define SI(c) scanf("%d",&c)
#define SII(c,d) scanf("%d%d",&c,&d)
#define SLL(c) scanf("%lld",&c)
#define PIN(c) printf("%d\n",c)
#define PLLN(c) printf("%lld\n",c)
#define N 2010
#define endl '\n'
#define FILL(ar,vl) for(int i=0;i<N;i++)ar[i]=vl
#define FILL2(ar,vl) for(int i=0;i<N;i++)for(j=0;j<N;j++)ar[i][j]=vl
//--------------------------MAIN CODE STARTS HERE----------------
LL dp[N][N],C[2*N][2*N];//fact[10*N],ifact[10*N];;
LL powmod(LL a,LL b)
{
    if(b==0)return 1;
    LL x=powmod(a,b/2);
    LL y=(x*x)%MOD;
    if(b%2)
        return (a*y)%MOD;
    return y%MOD;
}
void cal() {
/*    fact[0]=1;
    REP(i,1,10*N)
        fact[i]=(1LL*fact[i-1]*i)%MOD;
    REP(i,0,10*N)
        ifact[i]=powmod(fact[i],MOD-2);*/
    REP(i,0,2*N)
        C[i][0]=1;
    REP(i,0,2*N)
        C[0][i]=0;
    C[0][0]=1;
    REP(i,1,2*N)
        REP(j,1,2*N) {
            C[i][j]=(C[i-1][j-1]+C[i-1][j])%MOD;
        }
}

LL cal1(int n1,int n2) {
    return C[n1][n2];
  //  LL vl=(fact[n1]*ifact[n2])%MOD;
  //  vl=(vl*ifact[n1-n2])%MOD;
  //  TR1(vl);
  //  return vl;
}

int main() {
    int t;
    SI(t);
    cal();
    while(t--) {
        memset(dp,0,sizeof(dp));
        int n,m;
        SII(n,m);
        REP(i,0,n+1)
            dp[i][0]=1;
        REP(i,0,m+1)
            dp[0][i]=1;
        REP(i,1,n+1) {
            REP(j,1,m+1) {
               LL val=(cal1(j+m-1,m-1)*dp[i-1][j])%MOD;
               dp[i][j]=(val+dp[i][j-1])%MOD;
            }
        }
        PLLN(dp[n][m]);
    }
    return 0;
}
