#include <cstdio>
#include <iostream>
#include <algorithm>

#define MOD 1000000000

using namespace std;


/*int fast_pow(long long base, long long n,long long M)
  {
  if(n==0)
  return 1;
  if(n==1)
  return base;
  long long halfn=fast_pow(base,n/2,M);
  if(n%2==0)
  return ( halfn * halfn ) % M;
  else
  return ( ( ( halfn * halfn ) % M ) * base ) % M;
  }*/

int A[3000][3000], B[3000][3000];
/*long long int comb(int n, int r)
  {
  long long int ans=1;
  r = min(r,n-r);

  for(int j=1; j<=r; j++, n--)
  {
  if(n%j == 0)
  ans = (ans%MOD * (n/j)%MOD) % MOD;
  else if(ans%j == 0)
  ans = ((ans/j)%MOD * n%MOD) % MOD;
  else
  ans = ((ans%MOD*n%MOD)%MOD)/j;
  }
  return ans;
  }*/

/*long long int comb(int n, int r)
{
	long long int i,j;
	return B[r-1][n];
}*/

int main()
{
	int t,n,m,i,j;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d %d",&n,&m);
		//long long int A[n][m+1];
		long long int temp;
		for(i=0;i<m;i++)
		{
			for(j=0;j<=m;j++)
			{
				if(i == 0)
				{
					B[i][j] = 1;
				}
				else
				{
					if(j == 0)
						B[i][j] = B[i-1][j];
					else
						B[i][j] = (B[i-1][j] + B[i][j-1]) % MOD;
				}
			}
		}

		for(i=0;i<=m;i++)
		{
			temp = B[m-1][i];
			//printf("%lld\n",temp);
			for(j=0;j<n;j++)
			{
				if(i==0)
					A[j][i]=1;
				else
				{
					if(j==0)
						A[j][i] = ((A[j][i-1]%MOD) +(temp%MOD) );
					else
						A[j][i] = (((A[j-1][i]%MOD)*(temp%MOD))%MOD + A[j][i-1]%MOD);
				}
			}
		}
		printf("%d\n",A[n-1][m]%MOD);
	}
	return 0;
}
