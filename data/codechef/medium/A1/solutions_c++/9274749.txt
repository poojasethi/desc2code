#include <iostream>
#include <cstdio>
#include <iomanip>
#include <cmath>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>

#include <set>

#include <map>
#include <stdlib.h>



#define ll long long int
#define ull unsigned long long int
#define fsentak for(int i=0;i<n;i++)
#define fsentak1 for(int i=0;i<(n-1);i++)
#define f(a,z,b) for(int a=z;a<b;a++)
#define s(t) scanf("%d",&t)
#define sc(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sa(my) scanf("%d",&my[i])
#define nlc cout <<endl;
#define nl printf("\n");

#define MAX_INT 99999
#define MIN_INT -99999
#define inf 999999
#define MOD 1000000007

#include <exception>

using namespace std;
using std::string;

/*
 
 
 static struct IO {
 char tmp[1 << 10];
 
 // fast input routines
 char cur;
 
 //#define nextChar() (cur = getc_unlocked(stdin))
 //#define peekChar() (cur)
 inline char nextChar() { return cur = getc_unlocked(stdin); }
 inline char peekChar() { return cur; }
 
 inline operator bool() { return peekChar(); }
 inline static bool isBlank(char c) { return (c < '-' && c); }
 inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
 inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
 inline IO& operator >> (char * buf) {
 if (skipBlanks()) {
 if (peekChar()) {
 *(buf++) = peekChar();
 while (!isBlank(nextChar())) *(buf++) = peekChar();
 } *(buf++) = 0; } return *this; }
 
 inline IO& operator >> (string & s) {
 if (skipBlanks()) {	s.clear(); s += peekChar();
 while (!isBlank(nextChar())) s += peekChar(); }
 return *this; }
 
 inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
 #define defineInFor(intType) \
 inline IO& operator >>(intType & n) { \
 if (skipBlanks()) { \
 int sign = +1; \
 if (peekChar() == '-') { \
 sign = -1; \
 n = nextChar() - '0'; \
 } else \
 n = peekChar() - '0'; \
 while (!isBlank(nextChar())) { \
 n += n + (n << 3) + peekChar() - 48; \
 } \
 n *= sign; \
 } \
 return *this; \
 }
 
 defineInFor(int)
 defineInFor(unsigned int)
 defineInFor(long long)
 
 // fast output routines
 
 //#define putChar(c) putc_unlocked((c), stdout)
 inline void putChar(char c) { putc_unlocked(c, stdout); }
 inline IO& operator << (char c) { putChar(c); return *this; }
 inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
 inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
 char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
 inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
 #define defineOutFor(intType) \
 inline char * toString(intType n) { \
 char * p = (tmp + 30); \
 if (n) { \
 bool isNeg = 0; \
 if (n < 0) isNeg = 1, n = -n; \
 while (n) \
 *--p = (n % 10) + '0', n /= 10; \
 if (isNeg) *--p = '-'; \
 } else *--p = '0'; \
 return p; \
 } \
 inline IO& operator << (intType n) { return (*this) << toString(n); }
 
 defineOutFor(int)
 defineOutFor(long long)
 
 #define endl ('\n')
 #define cout __io__
 #define cin __io__
 } __io__;
 
 
 */

bool subset(int total,int values[],int n)
{
   if(total==0)
    return true;
    
    else if(total!=0 && n==0)
    return false;
    
    else
    {
        if(values[n-1]>total)
        {
            return subset(total,values,n-1);
            
        }
    }
    
    return subset(total,values,n-1) || subset(total-values[n-1],values,n-1);
    
    
    
    
}

int main()
{
    
    int t;
    cin >>t;
    int n,m;
    
    while(t--)
    {
        cin >>n >>m;
        int my[n];
        
        fsentak
        {
            cin >>my[i];
 
        }
        int size=sizeof(my)/sizeof(my[0]);
        
        if(subset(m,my,size))
        {
            cout <<"Yes\n";
            
        }
        else
        cout <<"No\n";
        
        
    }
    
}
