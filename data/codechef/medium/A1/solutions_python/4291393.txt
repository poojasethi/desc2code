#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


# decorator to memoized a function
class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}

    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value

    def __repr__(self):
        return self.func.__doc__

    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


# works for positive numbers
def subset_sum(list_num, wished_sum):
    # http://stringarray.net/?p=172
    length = len(list_num)

    # return a tuple saying if we can, and if we used the last_index
    @memoized
    def dp(last_index, sum_):
        assert(last_index < length)
        if sum_ == 0:
            return True, False
        if last_index < 0:
            return False, False

        # there are two cases:
        # we can do it if:
        # 1) we can do the sum of the wished_sum-value of i
        # 2) or we can simply do it with the smaller subset
        case1 = dp(last_index - 1, sum_ - list_num[last_index])[0]
        if case1:
            return True, True
        case2 = dp(last_index - 1, sum_)[0]
        if case2:
            return True, False
        return False, False

    # return indices used
    def used_items(sum_):
        s = sum_
        for i in xrange(length - 1, -1, -1):
            if dp(i, sum_)[1]:
                yield i
                sum_ -= list_num[i]

    return dp(length - 1, wished_sum)


def alg(notes, asked_money):
    res = subset_sum(notes, asked_money)
    print res
    return "Yes" if res[0] else "No"


# works for positive numbers
def subset_sum2(list_num, wished_sum):
    # http://stringarray.net/?p=172
    length = len(list_num)

    # dp[i, s] => i in 0..20, s in 0..wished_sum
    # first param: if possible to get sum s with first items up to i
    # 2nd param: if we need to take us (item i) to get it
    nb_notes = length
    dp = [list([None] * (wished_sum + 1)) for i in xrange(nb_notes)]

    for sum_ in xrange(wished_sum + 1):
        for last_index in xrange(nb_notes):
            if sum_ == 0:
                # possible to do 0, no need to get the item
                v = True, False
            else:
                if last_index == 0:
                    # we have only one value, it's easy
                    if list_num[last_index] == sum_:
                        v = True, True
                    else:
                        v = False, False
                else:
                    # there are two cases:
                    # we can do it if:
                    # 1) we can do the sum of the wished_sum-value of i
                    # 2) or we can simply do it with the smaller subset
                    sum_to_look = sum_ - list_num[last_index]
                    case1 = False
                    v = False, False
                    if sum_to_look >= 0:
                        case1 = dp[last_index - 1][sum_to_look][0]
                    if case1:
                        v = True, True
                    else:
                       case2 = dp[last_index - 1][sum_][0]
                       if case2:
                           v = True, False

            #print "can i do %d with values %s? %s (do we take us: %s)" % (sum_, list_num[:last_index + 1], "Yes" if v[0] else "No", "Yes" if v[1] else "No")
            dp[last_index][sum_] = v

    # return indices used
    def used_items(sum_):
        for i in xrange(length - 1, -1, -1):
            if dp[i][sum_][1]:
                yield i
                sum_ -= list_num[i]

    return dp[length - 1][wished_sum]


def alg2(notes, asked_money):
    res = subset_sum2(notes, asked_money)
    return "Yes" if res[0] else "No"


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        nb_notes, asked_money = map(int, data.readline().split())  # int
        notes = []
        for i in xrange(nb_notes):
            notes.append(int(data.readline()))
        res = alg2(notes, asked_money)
        print res


if __name__ == "__main__":
    main()
