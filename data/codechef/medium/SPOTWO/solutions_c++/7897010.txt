#include <stdio.h>
#include <stdlib.h>
#include <iostream>

using namespace std;

int input()
{
    int n=0;
    char c=getchar_unlocked();
    while(c < '0' || c >'9') {c=getchar_unlocked();}
    while(c>='0' && c<='9')
    {
        n=(n<<3)+(n<<1)+c-'0';
        c=getchar_unlocked();
    }
    return n;
}

long long P[600000];
int M = 1000000007;
long long num[20];
string curr_str;

long long poww(long long w){
	if(w == 1)
		return 2;
	long long temp;
	if(w%2 == 0){
		temp = poww(w/2);
		return (temp*temp)%M;
	}
	else{
		temp = poww((w-1)/2);
		return (temp*temp*2)%M;
	}
}

void pre_process(){
	num[0] = 2;
	long long ret = 9;
	for(int i = 1; i < 20; i++){
		num[i] = poww(ret);
		//cout << num[i] << " ";
		ret = 10*ret-1;
	}
	//cout << endl;
}

int binary_inc(){
	int count = 0;
	if(curr_str[0] == '0'){ 
		curr_str[0] = '1';
		return 0;
	}
	else{
		curr_str[0] = '0';
	}
	count = 1;
	for(int i = 1; i < curr_str.size(); i++){
		if(curr_str[i] == '0'){
			curr_str[i] = '1';
			return count;
		}	
		else{
			curr_str[i] = '0';
			count++;
		}
	}
	curr_str += "1";
	return count;
}

void process(){
	P[0] = 2;
	int count;
	for(int i = 1; i < 600000; i++){
		count = binary_inc();
		//cout << "count " << count << endl;
		P[i] = (P[i-1]*num[count])%M;
	}
}

int main(){
	int T;
	T = input();
	curr_str = "1";
	pre_process();
	process();
	long long temp;
	while(T--){
		temp = P[input()-1];
		cout << (temp*temp)%M << endl;
	}
}




