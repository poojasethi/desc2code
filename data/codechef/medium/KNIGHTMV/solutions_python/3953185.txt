#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args)
    t2 = time()
    r2 = f2(*args)
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__, r1, t2 - t1, f2.__name__, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(s):
    if len(s) != 5:
        return "Error"
    if s[2] != '-':
        return "Error"
    row_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
    col_list = ['1', '2', '3', '4', '5', '6', '7', '8']
    try:
        r1 = row_list.index(s[0])
        c1 = col_list.index(s[1])
        r2 = row_list.index(s[3])
        c2 = col_list.index(s[4])
    except:
        return "Error"
    dr = abs(r1-r2)
    dc = abs(c1-c2)
    if dr == 1 and dc == 2:
        return "Yes"
    if dc == 1 and dr == 2:
        return "Yes"
    return "No"



def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        #lint = map(int, data.readline().split())
        #lfloat = map(float, data.readline().split())
        #lstring = data.readline().split()
        string = data.readline().strip('\n')
        res = alg(string)
        print res


if __name__ == "__main__":
    main()
