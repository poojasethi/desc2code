//author - techaddict
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cstring>
using namespace std;

#define S(n) scanf("%d",&n)
#define P(n) printf("%d ",n)
#define SL(n) scanf("%lld",&n)
#define PL(n) printf("%lld\n",n)
#define SF(n) scanf("%lf",&n)
#define PF(n) printf("%lf ",n)
#define SS(n) scanf("%s",n)
#define INF (int)1e9
#define LINF (long long int)1e18
#define EPS 1e-11
const double PI=acos(-1.0);
#define two(X) (1<<x)
#define twoL(X) (((LL)(1))<<(X))
#define contain(S,X) (((S)&two(x))!=0)
#define containL(S,X) (((S)&twoL(x))!=0)
#define maX(a,b) ((a)>(b)?(a):(b))
#define miN(a,b) ((a)<(b)?(a):(b))
#define abs(a) ((a)<0?-(a):(a))
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define foreach(v,c) for(typeof((c).begin()) v=(c).begin(); v!=(c).end(); ++v)
#define MP make_pair
#define FR first
#define SE second
#define tri(a,b,c) MP(a,MP(b,c))
#define fill(a,v) memset(a,v,sizeof a)
#define ALL(c) (c).begin(), (c).end() 
#define SZ(v) ((int)(v.size()))
#define DREP(a) sort(ALL(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind) (lower_bound(all(arr),ind)-arr.begin())
#define PB(X) push_back(X)
#define dump(x)  cerr << #x << " = " << (x) << endl

#ifndef ONLINE_JUDGE
#define DEBUG
#endif

#ifdef DEBUG
#define cvar(x) cerr << "<" << #x << ": " << x << ">"
#define evar(x) cvar (x) << endl
template<class T> void debug(T a,T b){ for(;a!=b;++a) cerr<<*a<<' ';cerr<<endl;}
#else
#define cvar(...) ({})
#define evar(...) ({})
template<class T> void debug(T a,T b){}
#endif

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef pair<int, PII> TRI;

typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;
typedef vector<TRI> VT;

typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;
typedef vector<VT> VVT;

inline LL power(LL a,LL b,LL m){LL _r=1;while(b){if(b%2==1)_r=(_r*a)%m;a=(a*a)%m;b>>1;}return _r;} //a^b%m

//Main code starts

//Fast I/O starts here
#define BUFFERSIZE 3000000
char *ipos, *opos, InpFile[BUFFERSIZE], OutFile[BUFFERSIZE], DIP[20];
char * inputEnd;

inline bool eof()
{
	while( ipos < inputEnd && *ipos <= 32) ipos++;
	return ipos >= inputEnd;
}
inline char nc() {
	while(*ipos <= 32) ++ipos;
	return *ipos++;
}
inline int ni(int flag=0) {
	while(*ipos <= 32) ++ipos;
	if(flag) return (*ipos++ - '0'); /* For getting single digit/binary digit */
	int x=0, neg = 0;char c;
	while( true ) {
		c=*ipos++; if(c == '-') neg = 1;
		else {
			if (c<=32) return neg?-x:x;
			x=(x<<1)+(x<<3)+c-'0';
		}
	}
}
inline long long nll() {
	while(*ipos <= 32) ++ipos;
	long long x=0, neg = 0;char c;
	while( true ) {
		c=*ipos++; if(c == '-') neg = 1;
		else {
			if (c<=32) return neg?-x:x;
			x=(x<<1)+(x<<3)+c-'0';
		}
	}
}
inline void pi(int x,int flag = 1) {
	int y,dig=0;
	if(x<0) { *opos++ = '-';  x=-x;};
	while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
	while (dig--) *opos++=DIP[dig];
	*opos++= ' ';
}
inline void pll(long long x,int flag = 1) {
    long long y,dig=0;
    if(x<0) { *opos++ = '-';  x=-x;};
    while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
    while (dig--) *opos++=DIP[dig];
    *opos++= flag ? '\n' : ' ';
}
inline void ps(string str,int flag = 1) {
	int len=str.length();
	for(int i=0;i<len;i++)	*opos++=str[i];
	*opos++= flag ? '\n' : ' ';
}
inline void pws(int flag = 1) {
	*opos++= flag ? '\n' : ' ';
}
inline void InitFASTIO() {
	ipos = InpFile; opos = OutFile;
	inputEnd = InpFile + fread(InpFile,1,BUFFERSIZE,stdin);
}
inline void FlushFASTIO() {
	fwrite(OutFile,opos-OutFile,1,stdout);	
}
//Fast I/O ends here

vector<LL> ans;

void dfs(LL cur, int a, int b, int c, int cnt){
	if(ans.size()>=50000)return;
	if(a+b+c==cnt){
		if(a>=b&&b>=c)ans.PB(cur);
		return;
	}
	dfs(cur*10+3,a,b,c+1,cnt);
	dfs(cur*10+5,a,b+1,c,cnt);
	dfs(cur*10+8,a+1,b,c,cnt);
}

int main(){
	InitFASTIO();
	//ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
	freopen("input", "r", stdin);
	//freopen("output", "w", stdout);
	#endif
	int t,a,b,c,d,n,m,x,y;
	int cnt=0;
	while(ans.size()<50000){
		cnt++;
		dfs(0,0,0,0,cnt);
	}
	for(int i=0;i<50000;i++)pll(ans[i],0);
	FlushFASTIO();
}