#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define P printf
#define PN printf("\n");
#define PR(a) printf("%d",a);
#define PRN(a) printf("%d\n",a);

using namespace std;

#define ll long long
#define X first
#define Y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a)*(a))
#define FR(i,n) for (int i = 0; i < (n); i++)
#define DN(i,a) for(int i = (a)-1; i >= 0; i--)
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define DOWN(i,a,b) for(int i = (a); i >= (b); i--)
#define FORV(i,a) for(typeof(a.begin()) i = a.begin(); i != a.end(); i++)
#define Set(a,c) memset(a, c, sizeof(a))
#define INF 1000000000
#define MAXN 100005
#define S(a) scanf("%d",&a);
#define SN(a) printf("%d\n",a);
#define SORT(a) sort(a.begin(),a.end());
#define RSORT(a) sort(a.rbegin(),a.rend());
#define print_array(a,i,n) for(i=0;i<n;i++)cout<<a[i]<<" "; cout<<"\n";
#define print_matrix(a,i,j,row,col)FOR(i,0,row-1){FOR(j,0,col-1)cout<<a[i][j];cout<<"\n";}
#define sz(a) a.size()
#define mem(a,val) memset(a,val,sizeof(a));typedef pair<int, int> PII;
#define MOD 1000000007

typedef vector<int> VI;
typedef vector < VI > VII;
VII g;
VI gr[10];
VI ::iterator up,low;
set<int>sety;
map<int , int>mapp;
map<int , int>::iterator it;
set<int>::iterator its;
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

#define LENGTH 50000
char str[65];
int total_numbers=0;
// i ==3's   j==5's   k==8's
void REC(int i,int j,int k,int len , int required)
{
	if(total_numbers>=50000) return ;
	if(len-1 >= required)
		{
			if(k>=j&&j>=i)// is good 8's > 5's > 3's
		    {
		      	FOR(l,1,len-1)
			    cout<<str[l];
			    cout<<"\n";

			    total_numbers++;

		     }
		return ;
		}

	str[len]='3';REC(i+1,j,k,len+1,required);
	str[len]='5';REC(i,j+1,k,len+1,required);
	str[len]='8';REC(i,j,k+1,len+1,required);

return ;
}

int main ()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
string str;
int t,i,j,k,n,m,val,row,col;

//str 1 based
FOR(i,1,50000)
  REC(0,0,0,1,i);

 return 0;
}
