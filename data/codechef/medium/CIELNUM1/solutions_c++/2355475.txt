#pragma comment(linker, "/stack:64000000")
#define _CRT_SECURE_NO_DEPRECATE
 
#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <ctime>
#include <cmath>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>
 
#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define X first
#define Y second
 
using namespace std;
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
 
const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;
 
const int N = 100;
 
int n;
char buf[N + 3];
 
void solve(int idx, int a, int b, int c, bool is)
{
	if (n == 0)
		return;
		
	if (max(c - a, 0) + max(c - b, 0) > N - idx)
		return;
		
	if (max(b - a, 0) > N - idx)
		return;
		
	if (idx == N)
	{
   		assert(a >= b && b >= c);
   		
		if (is)
		{
			forn(i, N)
				if (buf[i] != '0')
					putchar(buf[i]);
			puts("");
			
    		n--;
    	}
    		
		return;
	}
	
	if (!is)
	{
		buf[idx] = '0';
		solve(idx + 1, a, b, c, false);
	}
	
	{
		buf[idx] = '3';
		solve(idx + 1, a, b, c + 1, true);
	}
	
	{
		buf[idx] = '5';
		solve(idx + 1, a, b + 1, c, true);
	}
	
	{
		buf[idx] = '8';
		solve(idx + 1, a + 1, b, c, true);
	}
}
 
int main()
{
    //freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);
    
    n = 50 * 1000;
    
    solve(0, 0, 0, 0, false);
    
    return 0;
}