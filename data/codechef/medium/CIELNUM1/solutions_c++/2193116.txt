#include <iostream>
#include <string>
#include <algorithm>
#include <cstdio>
#include <map>
#include <vector>
#include <iomanip>
#include <cstring>
#include <bitset>
#include <set>
#include <cstdlib>
#include <sstream>
#include <fstream>
#include <list>
#include <queue>
#include <cassert>
#include <deque>
#include <stack>
#include <ctime>
#include <cmath>

using namespace std;

#define FOR(i, a, b) for(int i = a; i < b; i++)
#define FORN(i, a, b) for (int i = a; i >= b; i--)
#define REP(i, a) FOR(i, 0, a)
#define REPN(i, a) FORN(i, a, 0)
#define FOREACH(it, c) for (typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define CLEAR(b) memset((b), 0, sizeof(b))
#define SET(a, b) memset((a), (b), sizeof(a))
#define setmax(a, b) if (a < b) {a = b;}
#define setmin(a, b) if (a > b) {a = b;}
#define ub(V, x) upper_bound((V).begin(), (V).end(), x)
#define lb(V, x) lower_bound((V).begin(), (V).end(), x)
#define pb push_back
#define mp make_pair

const int INF = 0x3f3f3f3f;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int u32;

void f_open() {
    freopen("ques.txt", "r", stdin);
    freopen("ans.txt", "w", stdout);
}

ll q[1000001];
int n3[1000001], n5[1000001], n8[1000001];
int q_st, q_size;

int main() {
  //  f_open();

    n3[q_st + q_size] = 1; n5[q_st + q_size] = 0; n8[q_st + q_size] = 0;
    q[q_st + q_size++] = 3;
    n3[q_st + q_size] = 0; n5[q_st + q_size] = 1; n8[q_st + q_size] = 0;
    q[q_st + q_size++] = 5;
    n3[q_st + q_size] = 0; n5[q_st + q_size] = 0; n8[q_st + q_size] = 1;
    q[q_st + q_size++] = 8;

    int res_size = 0;
    while(res_size < 50000) {
        int i = n3[q_st], j = n5[q_st], k = n8[q_st];
        ll n = q[q_st++]; q_size--;
        if (i <= j && j <= k) { res_size++; printf("%lld\n", n);}

        n3[q_st + q_size] = i + 1; n5[q_st + q_size] = j; n8[q_st + q_size] = k;
        q[q_st + q_size++] = 10 * n + 3;
        n3[q_st + q_size] = i; n5[q_st + q_size] = j + 1; n8[q_st + q_size] = k;
        q[q_st + q_size++] = 10 * n + 5;
        n3[q_st + q_size] = i; n5[q_st + q_size] = j; n8[q_st + q_size] = k + 1;
        q[q_st + q_size++] = 10 * n + 8;
    }

    return 0;
}
