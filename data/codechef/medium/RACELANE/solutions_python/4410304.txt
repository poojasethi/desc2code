#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random
import bisect


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(bubbles):
    nb_lines = 10
    nb_lanes = 9

    not_valid = 0
    for m in xrange(1, 501):
        line_has_paint = [True] * nb_lines
        for start, end, line in bubbles:
            if m >= start and m <= end:
                line_has_paint[line] = False
        for l in xrange(nb_lanes):
            if not line_has_paint[l] and not line_has_paint[l + 1]:
                not_valid += 1
                break

    return 500 - not_valid


def main():
    #import cProfile
    #cProfile.runctx('alg()', globals(), locals())
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        nb_bubbles = int(data.readline())
        bubbles = []
        for ib in xrange(nb_bubbles):
            bubbles.append(map(int, data.readline().split()))
        res = alg(bubbles)
        print res


if __name__ == "__main__":
    main()
