def CountInversions(A,left,right):
	inversions = 0
	if left < right:
		mid = left + (right - left)/2
		inversions = CountInversions(A,left,mid)
		inversions+=CountInversions(A,mid+1,right)
		inversions+=CountSplitInversions(A,left,mid+1,right)
	return inversions
def CountSplitInversions(A,left,mid,right):
	m,n = mid - left,right - mid + 1
	L = [A[i] for i in range(left,mid)]
	R = [A[i] for i in range(mid,right+1)]
	i,j,k,inversions = 0,0,left,0
	while i < m and j < n:
		if L[i] < R[j]: A[k] = L[i]; i+=1
		else: inversions += (mid - (left + i)); A[k] = R[j]; j+=1
		k+=1
	while i < m: A[k] = L[i]; i+=1; k+=1
	while j < n: A[k] = R[j]; j+=1; k+=1
	return inversions
def localinversions(A):
	localinversions = 0
	for i in range(0,len(A)-1):
		if A[i] > A[i+1]: localinversions+=1
	return localinversions
def LEPERMUT():
	t = int(raw_input())
	while t:
		n = int(raw_input())
		L = [int(i) for i in raw_input().split()]
		if localinversions(L) is CountInversions(L,0,len(L)-1): print 'YES'
		else: print 'NO'
		t-=1
if __name__ == '__main__': LEPERMUT()
