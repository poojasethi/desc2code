#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import random
import string


# choisi k nombre parmis n
def choose(n, k):
    """
    A fast way to calculate binomial coefficients by Andrew Dalke (contrib).
    """
    if 0 <= k <= n:
        ntok = 1
        ktok = 1
        for t in xrange(1, min(k, n - k) + 1):
            ntok *= n
            ktok *= t
            n -= 1
        return ntok / ktok
    else:
        return 0


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(rules, S):
    r = ''
    for c in S:
        if ord(c) not in xrange(33, 126 + 1):
            raise Exception("Invalid char %s" % c)
        if c in rules:
            r += rules[c]
        else:
            r += c
    r = r.lstrip('0')
    if '.' in r:
        r = r.rstrip('0').rstrip('.')
    if len(r) == 0:
        return '0'

    return r


def alg_solution(rules, S) :
    encrypted = S
    for i in range(len(encrypted)) :
        if encrypted[i] != '0' :
            ans = encrypted[i:]
            break
    has_point = False
    for ch in ans :
        if ch == '.' :
            has_point = True
            break
    if has_point :
        end = len(ans)
        while ans[end - 1] == '0' :
            end -= 1
        if ans[end - 1] == '.' :
            end -= 1
        ans = ans[:end]
    if len(ans) == 0 :
        ans = "0"
    return ans



def main():
    data = sys.stdin
    nb = int(data.readline())

    #for ic in xrange(33, 126 + 1):
    #    s = "%s %s" % (chr(ic), chr(ic))
    #    split = s.split()
    #    assert(len(split) == 2)
    #    assert(split[0]==split[1])
    #    assert(split[0]==chr(ic))

    #for il in xrange(4):
    #    for ir in xrange(4):
    #        sl = list("000")
    #        if il != 3:
    #            sl[il] = '1'
    #        sr = list("000")
    #        if ir != 3:
    #            sr[ir] = '1'
    #        s = ''.join(sl + ['.'] + sr)
    #        print s, alg({}, s), alg_solution({}, s)

    #print alg({}, "100")

    #for i in xrange(100):
    #    S = [str(random.randint(0, 9)) for i in xrange(10)]
    #    if random.randint(1,2) == 1:
    #        S[random.randint(0, len(S) - 1)] = '.'
    #    S = ''.join(S)
    #    a = alg({}, S)
    #    b = alg_solution({}, S)
    #    if a != b:
    #        print a, b, S

    for icase in xrange(nb):
        nb_rules = int(data.readline())
        rules = {}
        for r in xrange(nb_rules):
            split = data.readline().split()
            assert(split[0] not in rules)
            rules[split[0]] = split[1]
        S = data.readline().strip()
        res = alg(rules, S)
        print res


if __name__ == "__main__":
    main()
