#include<cstring>
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstdlib>
#include<climits>

// char -> no of chars till index i
int save[30][10005];
char string[10005];
int hashes[10005];

void init() {
  int i;
  for(i=0; i<30; i++) {
    save[i][0] = 0;
  }
}

void update_save(int count, char ch) {

  if(count == 0 && ch != '#') {
    save[ch-97][count] = 1;
  }

  else {
    int i;
    // check?
    // add previous ones
    for(i=0; i<26; i++) {
      save[i][count] = save[i][count-1];
    }
    if (ch != '#') {
      // add one more for the current char
      save[ch-97][count] += 1;
    }
  }
}

int find_max(int i, int j) {
  // maximum among all chars b/w two indexes
  int max = INT_MIN;
  int val, k;
  for(k=0; k<26; k++) {
    if (i == -1) {
      // from start
      val = save[k][j];
    } else {
      val = save[k][j] - save[k][i];
    }
    if (val >= max) {
      max = val;
    }
  }
  return max;
}

int main() {
  int T, i;
  scanf("%d", &T);
  getchar();
  char ch;
  int count, last, first, saw, fh, sh, th, ans;
  int max1, max2, max3, max4, val;
  while(T--) {
    init();
    ans = INT_MIN;
    count = 0;
    last = -1;
    first = -1;
    while((ch = getchar())!='\n') {
      if (ch == '#') {
        if (last == -1) first = count;
        else hashes[last] = count;
        last = count;
      }
      update_save(count, ch);
      string[count++] = ch;
    }
    hashes[last] = -1;
    saw = 0;
    for(i=0; i<count; i++) {
      if(string[i] == '#') {
        // update flag if you see a '#'
        saw = 1;
      }
      else {
        // encountered a non hash
        if (saw) {
          // the prev one is a hash
          saw = 0;
          // first hash
          fh = --i;
          sh = hashes[fh];
          th = hashes[sh];
          // no three hashes
          if (sh == -1 || th == -1) {
            // end ? no need to process more ?
            break;
          }
          if (th == sh+1) {
            // invalid, no point checking
            // jump straight to this third hash.
            i = th;
            // we saw the third hash
            saw = 1;
          }
          else {
            // first one zero ?
            // last one zero ?
            // we have valid three hashes, a possible W string, find max subsequence
            max1 = find_max(-1, fh);
            if (max1 == 0) {
              // invalid;
              continue;
            }
            max2 = find_max(fh, sh);
            max3 = find_max(sh, th);
            max4 = find_max(th, count-1);
            if (max4 == 0) {
              // invalid;
              continue;
            }
            // add check
            val = max1 + max2 + max3 + max4;
            if (val >= ans) {
              ans = val;
            }
          } 
        }
        // end of else
      }
      // end of for
    }
    if (ans == INT_MIN) printf("0\n");
    else printf("%d\n", ans+3);
  }
  return 0;
}
