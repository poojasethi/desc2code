#include<cstdio>
#include<algorithm>
using namespace std;

inline int FAST_IO()
{	int x=0;
	char ch;
	int Negativity=0;
	while (((ch=getchar_unlocked()) < 48 || ch > 57) && ch != '-');		// ASCII value 0->9
	if (ch == '-')
		Negativity=1;
	else 
		x = ch-48;
	while ((ch=getchar_unlocked()) >= 48 && ch <= 57)
		x=x*10+ch-48;
	return (Negativity) ? -x : x;
}

int main()
{	int t;
	scanf("%d",&t);	//t=FAST_IO();
	while(t--> 0 )
	{	char ch[10009];
		int ct[10000][28]={0},i,j, mx[10000]={0}, max_val=0, ct_till_l[28]={0}, ct_till_r[28]={0}, max_l[10000]={0}, max_r[10000]={0};	// ct max 5000
		scanf("%s",ch);
		for ( i=0, j=0; ch[i] != '\0'; i++)
		{	if ( ch[i] == '#' )		// CHECK J FOR ENDING AT #
				j++;
			else
			{	ct[j][ch[i]-'a']++;
				mx[j]= max (mx[j], ct[j][ch[i]-'a']);		// max occurence in that portion. j- no. of strings b/w #'s
			}
		}
		for ( int i1=0, k1=j; i1<=j; i1++, k1-- )
		{	int mx1=0, mx2=0;
			for ( int l=0; l<26; l++ )
			{	ct_till_l[l] += ct[i1][l];
				mx1 = max ( mx1, ct_till_l[l]);
				ct_till_r[l] += ct[k1][l];
				//printf("yo: %d %d %d \n", l, k1, ct[k1][l]);
				mx2 = max ( mx2, ct_till_r[l]);
			}
			//printf("mx2: %d k1:%d\n",mx2,k1);
			if ( i1 != 0 )
				max_l[i1]= max (max_l[i1-1], mx1);
			else
				max_l[i1]= mx1;
			if ( k1 != j )
				max_r[k1]= max (max_r[k1+1], mx2);
			else
				max_r[k1]= mx2;
		}
		// total no. of sequences = j (empty + non-empty)
		i--;
		while( ch[i--] == '#' )			// _#_#_#_###
			j--;
		/*printf("max till l\n");
		for ( int k=0; k<= j; k++ )
			printf("%d\n", max_l[k]);
		
		printf("max till r\n");
		for ( int k=j; k>=0; k-- )
			printf("%d\n", max_r[k]);
		*/
		for ( int k=0; k+3 <= j; k++ )
		{	int val;
			// check its implications
			if ( ( max_l[k] != 0 && mx[k+1] != 0) && ( mx[k+2] != 0 && max_r[k+3] != 0 ) )
			{	val = max_l[k]+mx[k+1]+mx[k+2]+max_r[k+3];
				/*precalculate
				int tmp[28]={0}, k0=k+3, mx1=0;
				while ( k0 <= j )			// for extra strings!! s1#s2#s3#s4 extra- #s4#s5 (include s4 and s5)
				{	for ( int i=0; i<26;i++ )
					{	tmp[i]+= ct[k0][i];
						mx1= max (mx1, tmp[i]);
					}
					k0++;
				}
				val += mx1;
				*/
			}
			else
				val=0;
			//printf("%d %d %d %d\n",max_l[k],mx[k+1],mx[k+2],max_r[k+3]);
			//printf("val: %d\n", val);
			//printf("k: %d val: %d\n",k,val);
			max_val= max(max_val, val);
			/* precalculate
			for(int i=0; i<26; i++ )			// prepare for next
			{	ct[k+1][i] += ct[k][i];
				mx[k+1]= max(mx[k+1], ct[k+1][i]);
			}*/
		}
		if ( max_val != 0 )
			printf("%d\n", max_val+3);
		else
			printf("0\n");
	}
	return 0;
}