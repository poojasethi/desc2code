#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <climits>
#include <sstream>
#include <functional>
#include <complex>

using namespace std;

#define len(array)  (sizeof (array) / sizeof *(array))
#define rep(i, s, e) for(int i = s;i < e;i++)
#define Rep(i, e) for(int i = 0;i < e;i++)
#define rrep(i, e, s) for(int i = e;s <= i;i--)
#define Rrep(i, e) for(int i = e;0 <= i;i--)
#define mrep(i, e, t1, t2) for(map<t1, t2>::iterator i = e.begin(); i != e.end(); i++)
#define vrange(v) v.begin(), v.end()
#define vrrange(v) v.rbegin(), v.rend()
#define vsort(v) sort(vrange(v))
#define vrsort(v) sort(vrrange(v))
#define arange(a) a, a + len(a)
#define asort(a) sort(arange(a))
#define arsort(a, t) sort(arange(a), greater<t>())
#define afill(a, v) fill(arange(a), v)
#define afill2(a, v, t) fill((t *)a, (t *)(a + len(a)), v)
#define fmax(a, b) (a < b? b : a)
#define fmin(a, b) (a > b? b : a)
#define fabs(a) (a < 0? -a : a)
#define pb push_back
#define rg(i, s, t) s <= i && i < t
//#define X real()
//#define Y imag()
//typedef unsigned int ui;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> P;
//typedef complex<double> p;
const int INF = (int)2e9;
const int MOD = (int)1e9 + 7;
const double EPS = 1e-10;
//const int dx[] = {1, -1, 0, 0, 1, -1, -1, 1};
//const int dy[] = {0, 0, 1, -1, -1, -1, 1, 1};
//const int weight[] = {0,1,10,100,1000,10000,100000,1000000,10000000};
//priority_queue< int, vector<int>, greater<int> > q;
#define MAX_N 10002

void doIt(){
  int t, dp[MAX_N][5], alpha[26], mmax, alphas[MAX_N][26];
  string s;
  cin >> t;
  while(t--){
    cin >> s;
    int prev = 0;
    int ans = 0;
    int n = s.length();

    dp[0][0] = 0;
    dp[0][1] = dp[0][2] = dp[0][3] = dp[0][4] = -1;
    afill(alpha, 0);
    afill(alphas[0], 0);
    Rep(i, n){
      Rep(j, 26){
        alphas[i+1][j] = alphas[i][j];
      }
      if(s[i] != '#'){
        alphas[i+1][s[i] - 'a']++;
      }
    }
    rep(i, 0, n){
      if(s[i] == '#'){
        //for 1
        mmax = 0;
        Rep(j, 26){
          mmax = max(mmax, alphas[i+1][j] - alphas[0][j]);
        }
        if(mmax) dp[i+1][1] = mmax;
        else dp[i+1][1] = -1;
        //for 2~
        mmax = *max_element(alpha, alpha+26);
        dp[i+1][0] = 0;
        rep(j, 2, 4){
          // if(dp[prev][j] != -1 && mmax) dp[i+1][j] = max(dp[prev][j], dp[prev][j-1] + mmax);
          if(dp[prev][j-1] != -1 && mmax) dp[i+1][j] = dp[prev][j-1] + mmax;
          else dp[i+1][j] = -1;
        }
        //for 4(last)
        if(dp[i+1][3] != -1){
          mmax = 0;
          Rep(j, 26){
            mmax = max(mmax, alphas[n][j] - alphas[i+1][j]);
          }
          if(mmax) ans = max(ans, dp[i+1][3] + mmax);
        }
        prev = i+1;
        afill(alpha, 0);
      }
      else{
        alpha[s[i] - 'a']++;
      }
    }
    // mmax = *max_element(alpha, alpha+26);
    // if(dp[prev][3] != -1 && mmax) ans = dp[prev][3] + mmax;
    // ans = max(ans, dp[prev][4]);
    cout << (ans == 0? 0 : ans + 3) << endl;

  }
}

int main() {
  doIt();
  return 0;
}
