#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>

#include<algorithm>
#include<string>
#include<vector>

using namespace std;
#define MAX 11234
#define ss(n) scanf("%s",n)
#define pb push_back 
char a[MAX];
int cnt[MAX][26];
int main()
{
   int cases;
   int i,j,n;
   for(scanf("%d",&cases);cases;cases--){
      ss(a+1);
      n=strlen(a+1);
      vector < int > hashes;
      vector < int > freq,freq2;
      memset(cnt[0],0,sizeof(cnt[0]));
      for(i=1;i<=n;++i)
      {
         for(j=0;j<26;++j)
            cnt[i][j]=cnt[i-1][j];//cnt[i][j] = frequency of jth character from 0 to ith position
         if(a[i]=='#')
	 {
            hashes.pb(i);//store position of hashes
            int lmax=0;
            for(int k=0;k<26;++k)
               lmax=max(lmax,cnt[i][k]);//find maximum frequency in the left part of the 1st hash
            freq.pb(lmax);
            lmax=0;
            if(hashes.size()>1)
               for(int k=0;k<26;++k)
                  lmax=max(lmax,cnt[i][k]-cnt[hashes[hashes.size()-2]][k]);//find the maximum frequency between current hash and previous hash
            freq2.pb(lmax);
         }
         else cnt[i][a[i]-'a']++;//update frequency
      }
      int m=hashes.size();
      int ans=0;
      for(i=0;i<m-2;++i){
         //pick i as the first hash
         if(freq[i]==0)    continue;//if any one substring is null than continue
         if(freq2[i+1]==0) continue;
         if(freq2[i+2]==0) continue;
         int lmax=0;
         for(int k=0;k<26;++k)
            lmax=max(lmax,cnt[n][k]-cnt[hashes[i+2]][k]);//find frequency in the right part of the 3rd hash
         if(lmax==0) continue;
         ans=max(ans, freq[i]+freq2[i+1]+freq2[i+2]+lmax+3);//find maximum length
      }
      printf("%d\n",ans);
   }
}
