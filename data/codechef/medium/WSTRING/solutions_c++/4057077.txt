#include <bits/stdc++.h>
#include <string.h>
using namespace std;
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
typedef unsigned long long ull;
typedef long long int lli;
typedef unsigned int ui;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long double ld;
#define var(a,b)  __typeof(b) a = b
#define rep(i,n)  for(int i = 0; (i) < (n); ++i)
#define rept(i,a,b) for(var(i,a); i < (b); ++i)
#define tr(v,it)  for(var(it,v.begin());it!=v.end();++it)
#define fill(a,val) memset(a,val,sizeof(a))
#define gi(n) scanf("%d",&n);
#define all(v) v.begin(),v.end()
#define iinp() input<int>()
#define linp() input<lli>()
#define uinp() input<ull>()
#include <string.h>

#define get getchar
vector<pii> v;
vector<int> color;
struct mysort{
bool operator()(const pii &a, const pii &b){
return(a.first<b.first);
}
};

//fast function to scan various integer data types
template <typename T>
inline T input() {
T n = 0;
int s = 1;
char p = get();

while((p < '0' || p > '9') && p != EOF && p != '-')
p = get();

if(p == '-'){ s = -1, p = get(); }

while(p >= '0' && p <= '9') {
n = (n << 3) + (n << 1) + (p - '0');
p = get();
}
return n*s;
}

int main(int argc, char** argv) {
#ifdef LOCAL
    freopen("in", "r", stdin);
#endif
//ios_base::sync_with_stdio(false);

int t = iinp();

while(t--){
	int maxlen=0;
char is[10000+9];
string s;
cin >> s;
int length=s.size();
int hash[10000+9];
int count=0;
int q=0;


rep(i,length){
is[i]=s[i];
if(is[i]=='#'){
	hash[q++]=i;
	count ++;
}
}

int dp[26][10000+9];

rep(i,length){
int p=(int)(is[i]-'a');
rep(k,26){
	if(i!=0){
		if(k==p)
			dp[p][i]=dp[p][i-1]+1;
		else
			dp[k][i]=dp[k][i-1];
	}
	else{
		if(k==p)
			dp[p][0]=1;
		else
			dp[k][0]=0;
		}
	}
}

for(int i=0;i<count-2;i++){
	int a=0,b=0,c=0,d=0;
rep(j,26){
int atemp=dp[j][hash[i]];
if(atemp>a)
	a=atemp;

int btemp= dp[j][hash[i+1]]-dp[j][hash[i]];
if(btemp>b)
	b=btemp;

int ctemp=dp[j][hash[i+2]]-dp[j][hash[i+1]];
if(ctemp>c)
	c=ctemp;

int dtemp=dp[j][length-1]-dp[j][hash[i+2]];
if(dtemp>d)
	d=dtemp;
}

int max=a+b+c+d+3;
if(max>maxlen && a!=0 && b!=0 && c!=0 && d!=0){
maxlen=max;
}
}
cout << maxlen << endl;
}

return 0;
}