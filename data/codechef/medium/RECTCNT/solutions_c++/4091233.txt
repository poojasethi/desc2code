#include <stdio.h>
#include <stdlib.h>
struct point {
	int x;
	int y;
};
point p[100000];
point q[100000];
 void merge(int,int,int);
void merge_sort(int low,int high){ int mid;
 if(low<high) {  mid=(low+high)/2;
  merge_sort(low,mid);
  merge_sort(mid+1,high);
  merge(low,mid,high);
 }}void merge(int low,int mid,int high){ int h,i,j,k;
  h=low;
 i=low;
 j=mid+1;
  while((h<=mid)&&(j<=high)) {  if(p[h].x < p[j].x || p[h].x == p[j].x && p[h].y < p[j].y )  {   q[i]=p[h];
   h++;
  }  //else if (p[h].x == p[j].x && p[h].y == p[j].y)	  abort();
  else  {   q[i]=p[j];
   j++;
  }  i++;
 } if(h>mid) {  for(k=j;
k<=high;
k++)  {   q[i]=p[k];
   i++;
  } } else {  for(k=h;
k<=mid;
k++)  {   q[i]=p[k];
   i++;
  } } for(k=low;
k<=high;
k++) p[k]=q[k];
}
 int main(){ 	int i,j, n;
	int res;
	scanf("%d", &n);
	int count = 0;
	while(n) {
		for (i = 0;
 i < n;
 i++) {			scanf("%d %d", &p[i].x, &p[i].y);
		}		merge_sort(0, n-1);
		j = 0;
		for (i = 1;
 i < n;
 i++) {			if (p[i].x == p[i-1].x) {
				p[j].x = p[i - 1].y;
				p[j].y = p[i].y;

				j++;
			}		}		merge_sort(0, j-1);
		res = 0;
		unsigned count = 1;
		for (i = 1;
 i < j;
 i++) {			if (p[i].x == p[i-1].x && (p[i].y == p[i-1].y))				count++;
			else {				res = res + (count * (count - 1))/2;
				count = 1;
			}		}		res = res + (count * (count - 1))/2;
	    scanf("%d", &n);
		printf("%d\n", res);
	}	return 0;
 }
