
      #include<iostream>
      #include<algorithm>
      #include<vector>
      #include<queue>
      #include<map>
      #include<utility>
      #include<cstdio>
       
      using namespace std;
      inline void fastRead_int(int &x) {
      register int c = getchar_unlocked();
      x = 0;
      int neg = 0;
      for(; ((c<48 || c>57) && c != '-'); c = getchar_unlocked());
      if(c=='-') {
      neg = 1;
      c = getchar_unlocked();
      }
      for(; c>47 && c<58 ; c = getchar_unlocked()) {
      x = (x<<1) + (x<<3) + c - 48;
      }
      if(neg)
      x = -x;
      }
       
      struct Point
      {
      int x;
      int y;
      };

      bool comp(Point p1,Point p2)
      {
      if(p1.x!=p2.x)
      return (p1.x)<(p2.x);
      else
      return (p1.y)<(p2.y);
      }
      int main()
      {
      int n;
      Point p[100010],rec[100010];
      while(1)
      {
      map<pair<int,int>, long long> vert;
      //map<pair<int,int>, bool> inc;
      vector<pair<int,int> >arr;
       
      long long int c=0,sum=0;
      cin>>n;
      if(n==0)
      break;
      for(int i=0;i<n;i++)
      {
      fastRead_int(p[i].x);
      fastRead_int(p[i].y);
      }
      sort(p,p+n,comp);
      for(int i=0;i<n;i++)
      {
      if((i+1)<n && p[i].x==p[i+1].x)
      {
      pair<int,int> yy=make_pair(p[i].y,p[i+1].y);
      if(vert[yy]==0)
      arr.push_back(yy);
      vert[yy]++;
      }
      }
      for(unsigned int i=0;i<arr.size();i++)
      {
      c=vert[arr[i]];
      if(c & 1)
      sum+=c*((c-1)/2);
      else
      sum+=(c/2)*(c-1);
      }
      cout<<sum<<"\n";
      }
      } 