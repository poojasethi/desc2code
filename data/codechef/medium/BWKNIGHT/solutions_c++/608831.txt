#include <cstdio>
#include <vector>
#include <string>
#include <cstring>

using namespace std;

const int MAX=32;
class ValueError
{
};

class BigInteger
{
public:
    BigInteger() : number() {}
    BigInteger(char *n) : number(n) {}
    BigInteger(int n)
    {
        if (n == 0)
            number.push_back('0');
        else
            for(;n > 0; n/=10)
                number.push_back(n%10+'0');
    }
    BigInteger(long long n)
    {
        if (n == 0)
            number.push_back('0');
        else
            for(;n > 0; n/=10)
                number.push_back(n%10+'0');
    }
    const BigInteger operator=(const BigInteger &rhs)
    {
        number = rhs.number;
        return *this;
    }
    const BigInteger operator*(const BigInteger &rhs)
    {
        int i, j, r, c;
        char result[MAX];
        memset(result, '0', MAX);
        for(c=0, i=0; i<number.length(); i++)
        {
            for(j=0; j<rhs.number.length(); j++)
            {
                r = (number[i] - '0')  * (rhs.number[j] - '0') + 
                    (result[i + j] - '0') + c;
                c = r / 10;
                result[i+j] = (r % 10) + '0';
            }
            for(; c > 0; c/=10, j++)
            {
                r = (c % 10) + (result[i+j] - '0');
                result[i+j] = r + '0';
            }
        }
        result[i+j-1] = '\0';
        return BigInteger(result);
    }
    const BigInteger operator-(const BigInteger &rhs)
    {
        if(number.length() < rhs.number.length())
            throw ValueError();
        else if (number.length() == rhs.number.length())
        {
            int c;
            if ( (c=strTo().compare(rhs.strTo())) < 0)
                throw ValueError();
            else if (c == 0)
                return BigInteger(0);
        }
        int i, j, b, d, r;
        char result[MAX];
        memset(result, '0', MAX);
        for(b=0, i=0; i<number.length(); i++)
        {
            if (i >= rhs.number.length())
                r = 0;
            else
                r = rhs.number[i] - '0';
            d = (number[i] - '0') - (r + b);
            if (d < 0)
            {
                b = 1;
                result[i] = (10 + d) + '0';
            }
            else
            {
                b = 0;
                result[i] = d + '0';
            }
        }
        for(i=number.length()-1; i>= 0 && result[i] == '0'; i--)
            ;
        result[i+1] = '\0';
        return BigInteger(result);
    }
    string strTo() const
    {
        size_t len = number.length();
        char *cstr = new char[len+1];
        int i;
        for(i=0; i < len; i++)
            cstr[i] = number[len-1-i];
        cstr[i] = '\0';
        string tmp(cstr);
        delete cstr;
        return tmp;
    }
private:
    string number;
};

int main()
{
    int T;
    long long N, M;
    scanf("%d", &T);
    while (T-- > 0)
    {
        scanf("%lld%lld", &M, &N);
        BigInteger r(N*M);
        r = r * (r - 1);
        if (N-2>0 && M-1>0)
            r = r - BigInteger((N-2) * (M-1) * 4);
        if (N-1>0 && M-2>0)
            r = r - BigInteger((N-1) * (M-2) * 4);
        printf("%s\n", r.strTo().c_str());
    }
    return 0;
}
