#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <climits>

#define ULL unsigned long long

using namespace std;

// MAXD: Maximum number of Digits in Number
const int MAXD=1005,DIG=9,BASE=1000000000;
const ULL BOUND=ULLONG_MAX-(ULL)(BASE*BASE);

struct bignum
{
	/* digits: Stores the digits in reverse Order
	 * D: Stores the number of elements in digits[] */
	int D,digits[MAXD/DIG+2];

	inline void trim()
	{
		while(D>1 && digits[D-1]== 0)
			D--;
	}

	inline void init(long long x)
	{
		memset(digits,0,sizeof(digits));
		D=0;

		do
		{
			digits[D++]=x%BASE;
			x/=BASE;
		} while(x>0);
	}

	inline bignum(long long x)
	{
		init(x);
	}

	inline bignum(int x=0)
	{
		init(x);
	}

	inline bignum(char *s)
	{
		memset(digits,0,sizeof(digits));
		int len=strlen(s),first=(len+DIG-1)%DIG+1;
		D=(len+DIG-1)/DIG;

		for(int i=0;i<first;i++)
			digits[D-1]=digits[D-1]*10+s[i]-'0';

		for(int i=first,d=D-2;i<len;i+=DIG,d--)
			for(int j=i;j<i+DIG;j++)
				digits[d]=digits[d]*10+s[j]-'0';

		trim();
	}

	inline char *toStr()
	{
		trim();
		char *buf=new char[DIG*D+1];
		int pos=0,d=digits[D-1];

		do
		{
			buf[pos++]=d%10+'0';
			d/=10;
		} while(d>0);

		reverse(buf,buf+pos);

		for(int i=D-2;i>=0;i--,pos+=DIG)
			for(int j=DIG-1,t=digits[i];j>=0;j--){
				buf[pos+j]=t%10+'0';
				t/=10;
			}

		buf[pos]='\0';
		return buf;
	}

	inline bool operator < (const bignum &o) const
	{
		if(D!=o.D)
			return D<o.D;

		for(int i=D-1;i>=0;i--)
			if(digits[i]!=o.digits[i])
				return digits[i]<o.digits[i];

		return false;
	}

	inline bool operator == (const bignum &o) const
	{
		if(D!=o.D)
			return false;

		for(int i=0;i<D;i++)
			if(digits[i]!=o.digits[i])
				return false;

		return true;
	}

	inline bignum operator << (int p) const
	{
		bignum temp;
		temp.D=D+p;

		for(int i=0;i<D;i++)
			temp.digits[i+p]=digits[i];

		for(int i=0;i<p;i++)
			temp.digits[i]=0;

		return temp;
	}

	inline bignum operator >> (int p) const
	{
		bignum temp;
		temp.D=D-p;

		for(int i=0;i<D-p;i++)
			temp.digits[i]=digits[i+p];

		for(int i=D-p;i<D;i++)
			temp.digits[i]=0;

		return temp;
	}

	inline bignum range(int a,int b) const
	{
		bignum temp=0;
		temp.D=b-a;

		for(int i=0;i<temp.D;i++)
			temp.digits[i]=digits[i+a];

		return temp;
	}

	inline bignum operator + (const bignum &o) const
	{
		bignum sum=o;
		int carry=0;

		for(sum.D=0;sum.D<D || carry>0;sum.D++){
			sum.digits[sum.D]+=(sum.D<D?digits[sum.D]:0)+carry;

			if(sum.digits[sum.D]>=BASE){
				sum.digits[sum.D]-=BASE;
				carry=1;
			} else
				carry=0;
		}

		sum.D=max(sum.D,o.D);
		sum.trim();
		return sum;
	}

	inline bignum operator - (const bignum &o) const
	{
		bignum diff=*this;

		for(int i=0,carry=0;i<o.D || carry>0;i++){
			diff.digits[i]-=(i<o.D?o.digits[i]:0)+carry;

			if(diff.digits[i]<0){
				diff.digits[i]+=BASE;
				carry=1;
			} else
				carry=0;
		}

		diff.trim();
		return diff;
	}

	inline bignum operator * (const bignum &o) const
	{
		bignum prod=0;
		ULL sum=0,carry=0;

		for(prod.D=0;prod.D<D+o.D-1 || carry>0;prod.D++){
			sum=carry%BASE;
			carry/=BASE;

			for(int j=max(prod.D-o.D+1,0);j<=min(D-1,prod.D);j++){
				sum+=(ULL)digits[j]*o.digits[prod.D-j];

				if(sum>=BOUND){
					carry+=sum/BASE;
					sum%=BASE;
				}
			}

			carry+=sum/BASE;
			prod.digits[prod.D]=sum%BASE;
		}

		prod.trim();
		return prod;
	}

	inline double double_div(const bignum &o) const
	{
		double val=0,oval=0;
		int num=0,onum=0;

		for(int i=D-1;i>=max(D-3,0);i--,num++)
			val=val*BASE+digits[i];

		for(int i=o.D-1;i>=max(o.D-3,0);i--,onum++)
			oval=oval*BASE+o.digits[i];

		return val/oval*(D-num>o.D-onum?BASE:1);
	}

	inline pair<bignum,bignum> divmod(const bignum &mod) const
	{
		bignum quot=0,rem=*this,temp;

		for(int i=D-mod.D;i>=0;i--){
			temp=rem.range(i,rem.D);
			int div=(int)temp.double_div(mod);
			bignum mult=mod*div;

			while(div>0 && temp<mult)
			{
				mult=mult-mod;
				div--;
			}

			while(div+1<BASE && !(temp<mult+mod))
			{
				mult=mult+mod;
				div++;
			}

			rem=rem-(mod*div << i);

			if(div>0){
				quot.digits[i]=div;
				quot.D=max(quot.D,i+1);
			}
		}

		quot.trim();
		rem.trim();
		return make_pair(quot,rem);
	}

	inline bignum operator / (const bignum &divisor) const
	{
		return divmod(divisor).first;
	}

	inline bignum operator % (const bignum &mod) const
	{
		return divmod(mod).second;
	}

	inline bignum power(int exp) const
	{
		bignum value=1,temp=*this;

		while(exp>0)
		{
			if(exp & 1)
				value=value*temp;
			if(exp>1)
				temp=temp*temp;
			exp>>=1;
		}

		return value;
	}
};

inline bignum gcd(bignum a,bignum b)
{
	bignum t;

	while(!(b==0))
	{
		t=a%b;
		a=b,b=t;
	}
	return a;
}
long long int n1,m1;
void swap1(long long int n,long long int m)
{
    n1=min(n,m);
    m1=max(n,m);
}
int main()
{
    int t;
    cin>>t;
    bignum ans;
    //long long int ans;
    while(t--)
    {
        cin>>n1>>m1;
        swap1(n1,m1);
        bignum n=n1;
        bignum m=m1;
        if(n==1||(n==2&&m==2))
            ans=(n*m)*((n*m)-1);
        else if(n==2)
        {
            if(m==3)
                ans=26;
            else if(m==4)
                ans=(n*m)*((n*m)-1)-8;
            else
                ans=(n*m)*(n*m-1)-8-(m-4)*2*2;
        }
        else if(n==3)
        {
            if(m==3)
                ans=((n*m)*((n*m)-1))-16;
            else if(m==4)
                ans=((n*m)*((n*m)-1))-28;
            else
                ans=((n*m)*((n*m)-1))-28-((m*n)-12)*4;
        }
        else if(n==4)
        {
            if(m==4)
                ans=((n*m)*((n*m)-1))-48;
            else
                ans=((n*m)*((n*m)-1))-48-(m-4)*2*4-((m-4)*(n-2))*6;
        }
        else
            ans=((n*m)*((n*m)-1))-48-(n-4)*(m-4)*8-(m-4)*2*6-(n-4)*2*6-(m-4)*2*4-(n-4)*2*4;
            printf("%s\n",ans.toStr());
    }
    return 0;
}
