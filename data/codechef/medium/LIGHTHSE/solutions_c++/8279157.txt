#include <iostream>
#include <map>
#include <stdio.h>
#include <algorithm>
#define gc getchar_unlocked
using namespace std;

typedef long long int ll;

typedef struct
{
    ll x;
    ll y;
} Points;
ll readL(void)
{
    register int c = gc();
    ll x = 0;
    for(; (c<48 || c>57); c = gc());
    for(; c>47 && c<58; c = gc()) {
        x = (x<<1) + (x<<3) + c - 48;
    }
    return x;
}
bool operator<(const Points p1, const Points p2)
{
    if (p1.x < p2.x)
        return true;
    else if (p1.x == p2.x)
        return p1.y<p2.y;
    else
        return false;
}

int main()
{
    ll t, n, min_x, min_y, max_x, max_y;
#ifndef ONLINE_JUDGE
    freopen("i_p","r",stdin);
#endif
     t=readL();
    map<Points, ll> locate;
    map<Points, ll>::iterator mp;
    while (t--)
    {
        n=readL();
        Points p;
        locate.clear();
        cin >> p.x;
        cin >> p.y;
        locate.insert(make_pair<Points, ll>(p, 1));

        min_x = max_x = p.x;
        min_y = max_y = p.y;
        for (ll i=2; i<=n; i++)
        {
            cin >> p.x;
            cin >> p.y;
            min_x = min(min_x, p.x);
            min_y = min(min_y, p.y);
            max_x = max(max_x, p.x);
            max_y = max(max_y, p.y);
            locate.insert(make_pair<Points, ll>(p, i));
        }

        if (n==1)
        {
            cout << "1\n";
            cout <<"1 NE\n";
            continue;
        }
        mp=locate.begin();
        /*while(pLoc!=loc.end())
        {
            cout << pLoc->second << " ," << pLoc->first.x << ", "<< pLoc->first.y << "\n";
            ++pLoc;
        }*/
        // search for a point at bottom right
        p.x = max_x;
        p.y = min_y;
        mp = locate.find(p);
        if (mp != locate.end())
        {
            // Found point at bottom right!
            cout << "1\n";
            cout << mp->second <<" NW\n";
            continue;
        }

        // search for a point at bottom left
        p.x = min_x;
        p.y = min_y;
        mp = locate.find(p);
        if (mp != locate.end())
        {
            // Found point at bottom left!
           cout << "1\n";
            cout << mp->second <<" NE\n";
            continue;
        }

        // search for a point at top right
        p.x = max_x;
        p.y = max_y;
        mp = locate.find(p);
        if (mp != locate.end())
        {
            // Found point at top right!
            cout << "1\n";
           cout << mp->second <<" SW\n";
            continue;
        }

        // search for a point at top left
        p.x = min_x;
        p.y = max_y;
        mp = locate.find(p);
        if (mp!= locate.end())
        {
            // Found point at top left
            cout << "1\n";
            cout << mp->second <<" SE\n";
            continue;
        }

        // Choose two leftmost points
        map<Points, ll>::iterator left1, left2;

        mp = locate.begin();
        left1 = mp;
        ++mp;
        left2 = mp;
        cout << "2\n";
        if (left1->first.y > left2->first.y)
        {
            cout << left1->second <<" SE\n";
            cout << left2->second <<" NE\n";
        }
        else
        {
            cout << left1->second <<" NE\n";
            cout << left2->second <<" SE\n";
        }
    }
    return 0;
}
