#include<bits/stdc++.h>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#define all(c) c.begin(),c.end()
#define gc() getchar_unlocked()
using namespace std;
typedef long long int ll;
typedef pair<ll,ll> pii;
const ll inf = 1e10+1;
 
/* AUTHOR :- DIPJAL CHHETRI 
   INSTITUTION :- Jaypee Institute of Information Technology,Noida */
 
inline void scan( ll &n )//fast input function
{
   n=0;
   int ch=gc();int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=gc();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=gc();
   n=n*sign;
}
inline ll min1(ll x,ll y)
{
    return(x<y?x:y);
}
inline ll max1(ll x,ll y)
{
    return(x>y?x:y);
}
int main()
{
    ll n;
    ll tt;
    scan(tt);
    while(tt--){
    scan(n);
    map<pair<ll,ll>,int> freq;
    map<pair<ll,ll>,int> mtp;
    ll x,y;
    ll xmin=inf,ymin=inf;
    ll xmax=-inf,ymax=-inf;
    pair<ll,ll> great=make_pair(5,-inf);
    pair<int,int> creat=make_pair(5,inf);
    for(int i=0;i<n;i++){
            scan(x);scan(y);
            freq[make_pair(x,y)]++;
            if(y>great.second)
            {
                great=make_pair(x,y);
            }
            if(y<creat.second)
            {
                creat=make_pair(x,y);
            }
 
    xmin=min1(xmin,x);
    xmax=max1(xmax,x);
    ymin=min1(ymin,y);
    ymax=max1(ymax,y);
    mtp[make_pair(x,y)]=i+1;
}
pii top_left,top_right,bottom_left,bottom_right;
top_left=make_pair(xmin,ymax);
top_right=make_pair(xmax,ymax);
bottom_left=make_pair(xmin,ymin);
bottom_right=make_pair(xmax,ymin);
int t1=freq[top_left];
int t2=freq[top_right];
int t3=freq[bottom_left];
int t4=freq[bottom_right];
if(t1){
    printf("1\n");
    printf("%d SE\n",mtp[top_left]);
    continue;
}
if(t2){
        printf("1\n");
        printf("%d SW\n",mtp[top_right]);
        continue;
}
if(t3){
        printf("1\n");
        printf("%d NE\n",mtp[bottom_left]);
        continue;
}
if(t4){
        printf("1\n");
        printf("%d NW\n",mtp[bottom_right]);
        continue;
}
printf("2\n");
if(great.first<creat.first)
{
    printf("%d SE\n",mtp[great]);
    printf("%d NW\n",mtp[creat]);
    continue;
}
printf("%d SW\n",mtp[great]);
printf("%d NE\n",mtp[creat]);
}
return 0;}  