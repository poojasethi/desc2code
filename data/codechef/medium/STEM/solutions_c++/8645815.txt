#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
typedef map<int, int> mii;

#define in(a) scanf("%d",&a)
#define out(a) printf("%d",a)

#define pb push_back
#define len length()
#define sz size()

#define gc getchar_unlocked
#define pc putchar_unlocked
#define pn printf("\n")
#define ps printf(" ")

#define rep(i,a,b) for(int i=a;i<b;i++)
#define repn(i,n) rep(i,0,n)
#define W(a) while(a--)

/*======================================Templates Ends========================*/
/* Main Code Starts from here */
int main()
{
    int i,j,k,x,y,z;
    int t,n;
    int m,s,p,q;
    string result;
    
    in(t);
    W(t)
    {
        in(n);
        vs str(n);
        x=25;

        repn(ii,n)
        {
            cin>>str[ii];
            if(str[ii].len<x)
            {
                x=str[ii].len;
                y=ii;
            }
                
        }

        //all words entered
        swap(str[0],str[y]);


        //generate substrings of str[0]
        vs subs;
        for(i=1;i<=str[0].len;i++)
        {
            for(j=0;j<str[0].len-i+1;j++)
            {
                //store substring in the vector
                subs.pb(str[0].substr(j,i));
            }
        }

        //all substrings generated
        //now, find a substring that is substing in all the strings
        bool found=false;
        for(i=subs.sz-1;i>=0&&found==false;i--)
        {
           //check the presence of this substring in all the words
           bool found2=true;
           for(j=1;j<n&&found2==true;j++)
           {
                if(str[j].find(subs[i])==string::npos)
                    found2=false;
           }

           if(found2==true)
           {
                found=true;
                x=i;
                y=subs[i].len;
                result=subs[i];
           }

        }

        //solution found here
        //make sure it is also lexicographically smallest of this length
        //using x and y
        for(i=x-1;i>=0&&subs[i].len==y;i--)
        {
            //check whether subs[i] is present in all the words
            bool found2=true;
            for(j=1;j<n&&found2==true;j++)
            {
                if(str[j].find(subs[i])==string::npos)
                {
                    found2=false;
                }
            }

            if(found2==true)
            {
                if(subs[i]<result)
                    result=subs[i];
            }

        }

        cout<<result<<endl;

        
        //while loop for test cases ends here
    }

    
    return 0;
}
