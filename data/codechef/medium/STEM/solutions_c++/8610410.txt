#include <iostream>
#include <fstream>
#include <string>
#include <set>
#include <vector>
#include <algorithm>
#include <stdio.h>
using namespace std;

struct compare{
	bool operator() ( const string& a , const string& b ) const{
		return a.size() < b.size ();
	}
};

/*
class compare{
public:
	bool operator()( const string& a , const string& b){
		return a.size() < b.size();
	}
};

*/

bool check( string str , multiset<string>::iterator p , int size ){
	int len = str.length();
	bool flag ;
	while ( size-- ){
		int currLen = (*p).length();
		int j = 0;
		for ( int i = len ; i <= currLen ; i++ ){
			//cout << (*p).substr( j , i ) << " " << str << " " << currLen <<  endl;
			if ( (*p).substr( j , i-j ) == str ){
				
				flag = true;
				break;
			}
			else{
				flag = false;
			}

			j++;
		}

		if ( flag ){
			p++;
			continue;
		}
		else{
			break;
		}
		
	}

	

	return flag ;
}

int main(){
	//ifstream cin("input.txt");
	multiset<string , compare> stg;
	multiset<string>::iterator mulIter;
	int test_cases , n ;
	string word;
	//cin >> test_cases ;
    scanf("%d",&test_cases);

	while( test_cases-- ){
		//cin >> n ;
		scanf("%d",&n);
		for ( int i = 0 ; i < n ; i++ ){
			cin >> word;
			//scanf("%s",&word);
			stg.insert( word );
			//leng.insert( word.length());
		}
		

		// above this is the insertion part 

		//copy( stg.begin() , stg.end() , ostream_iterator<string> (cout , " ")); 
		mulIter = stg.begin();
		int l = (*mulIter).length();
		int j , i = 0;
		bool flag = false;
		while ( l ){
			l = l - 1;
			for ( int i = 0 ; i < (*mulIter).length() - l ; i++ ){
				j = l + 1;
				string newString = (*mulIter).substr( i , j);
				//cout << newString  << endl;
				if ( check( newString , mulIter , stg.size())  ){
					cout << newString << endl;
					flag = true;
					break;
				}


			}

			if ( flag ){
				flag = false;
				break;
			}
			
		}
		
		stg.clear();
	}


}
