/* Have courage and be kind*/
#include<bits/stdc++.h>
#include<stdlib.h>
//#include<iostream>
//#include<cstdio>
//#include<math.h>
//#include<algorithm>
//#include<vector>
//#include<map>
//#include<cstring>
using namespace std;
#define inf (1<<29)
#define SET(a) memset(a,-1,sizeof(a))
#define all(a) a.begin(),a.end()
#define CLR(a) memset(a,0,sizeof(a))
#define FILL(a,v) memset(a,v,sizeof(a))
#define PB push_back
#define MP make_pair
#define FOR0(i,n) for(int i = 0;i<n;i++)
#define FOR1(i,n) for(int i = 1;i<=n;i++)
#define ABS(x) ((x)<0?-(x):(x))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define pi ((double)2*acos(0.0))
#define PI acos(-1.0)
#define sq(x) ((x)*(x))
#define EPS 1e-9
#define UNIQUE(V) (V).erase(unique((V).begin(),(V).end()),(V).end())//vector must be sorted
#define min3(a,b,c) min(a,min(b,c))
#define maxx3(a,b,c) maxx(a,maxx(b,c))
#define NUMDIGIT(x,y) (((int)(log10((x))/log10((y))))+1)
#define LCM(x,y) (((x)/gcd((x),(y)))*(y))
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define lol long long
#define ulol unsigned long long
#define pf printf
#define sf scanf
#define bin2dec(b,d) for(int i=0,d=0;b[i];d=(d<<1)|(b[i++]-48));
#define dec2bin(d,b) int nnn=d;while(nnn){if(nnn%2)b+="1";else b+="0";nnn>>=1;}reverse(ALL(b));
#define fast_add(x,y) while(y){typeof(x) carry = x & y;x=x^y;y=carry<<1;} //answer is x
#define sz 100000
#define mod 1000000007 //10^9+7
#define pause system("pause")

///int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1}; //4 Direction
///int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};//8 direction
///int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
///int rrr[]={2,1,-1,-2,-1,1};int ccc[]={0,1,1,0,-1,-1}; //Hexagonal Direction
///int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; //month
///string monthArray[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
///string dayArray[]={"Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};//Day
/// for(map<int,int>::iterator i=mp.begin();i!=mp.end();i++)cout<<i->first<<" "<<i->second<<endl;
/// vector< pair<string,string> > result;  result.push_back(make_pair(words[i].word, words[j].word));
///nCr[0][0]=1; for(int i=1;i<1002005;i++){ nCr[i][0]=1; for(int j=1;j<=i;j++) nCr[i][j]=nCr[i-1][j]+nCr[i-1][j-1];}
///Check wheather the bit is on or not if(!(no & (1<<i)))
/// Turn on the bit (no | (1<<i))
///Check wheather bit is 1 or not if(((a&k)>>i)==1LL) where k=(1<<i)
///No. of 1 __builtin_popcount(mask)
/// 2^k = 1<<k
///str.substr(i,j);

lol mod_v(lol num)
{
    if(num>=0)
      return(num%mod);
    else
     return(num%mod+mod)%mod;
}

lol bigmod ( lol b, lol p, lol m ) {
    lol res = 1 % m, x = b % m;
    while ( p ) {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m;
        p >>= 1;
    }
    return res;
}

int countBits(int n)
{
    int sum=0;
    while(n>0)
    {
        if(n & 1 == 1) sum++;
        n=n>>1;
    }
    return sum;
}
lol gcd(lol a, lol b)
{
    a=abs(a);b=abs(b);
    while(b)
    {
        a=a%b;
        swap(a,b);
    }
    return a;
}

/********** Solution ***************/
class node
{
    public:
    string str;
    node(){};
    node(string str)
    {
        this->str=str;
    }
};
vector<node>v;
bool cmp(node a, node b)
{
    if(a.str.size()>b.str.size())
     return true;
    if(a.str.size()==b.str.size() && a.str<b.str)
     return true;
    return false;
}

string arr[12];
map<string,bool>mp;

bool check(string str,string word)
{
   string temp;
   int len=word.size();
   for(int j=0;j<len;j++)
   {
       temp="";
       for(int k=j;k<len;k++)
       {
            temp+=word[k];
            if(temp==str)
            {
                return true;
            }
       }
   }
   return false;
}
int main()
{
   int test,n,len;
   string temp;
   sf("%d",&test);
   FOR1(t,test)
   {
       v.clear();
       mp.clear();
       sf("%d",&n);
       FOR0(i,n)
        cin>>arr[i];
       for(int i=0;i<n;i++)
       {
           len=arr[i].size();
           for(int j=0;j<len;j++)
           {
               temp="";
               for(int k=j;k<len;k++)
               {
                    temp+=arr[i][k];
                    if(mp[temp]==0)
                    {
                        mp[temp]=1;
                        v.PB(node(temp));
                    }
               }
           }
       }
       sort(all(v),cmp);
       len=v.size();
       bool flag=false;
       for(int i=0;i<len;i++)
       {
           int cnt=0;
           for(int j=0;j<n;j++)
           {
               if(check(v[i].str,arr[j]))
                 cnt++;
              else break;
           }
           if(cnt==n)
           {
               temp=v[i].str;
               flag=true;
               break;
           }
       }
       if(flag)
        cout<<temp<<endl;
   }
   return 0;
}
