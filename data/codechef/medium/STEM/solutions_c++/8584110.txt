#include <iostream>
#include <map>
#include <algorithm>
#include <set>
#include <cstdio>
using namespace std;

int main() {
  int t, n;
  string s, substring, best, curr;
  scanf("%d", &t);
  while(t--) {
    scanf("%d", &n);
    map<string, set<string> > m;
    for(int i = 0; i < n; ++i) {
      cin >> curr;
      //cerr << "CURRENT WORD: <" << curr << ">\n";
      for(int j = 0, curr_size = curr.size(); j < curr_size; ++j) {
        for(int k = 0;  k <= curr_size - j - 1; ++k) {
          substring = curr.substr(j, k + 1);
          //cerr << "\tCURRENT SUBSTRING: <" << substring << ">\n";
          m[substring].insert(curr);
        }
      }
    }
    best = "";
    for(map<string, set<string> >::iterator it = m.begin(); it != m.end(); ++it) {
      curr = it -> first;
      //cerr << "CURR: " << curr << ", ";
      set<string> ss = it -> second;
      //cerr << "INCLUDED IN: " << ss.size() << " STRINGS\n";
      if(ss.size() == n) {
        if(curr.size() > best.size()) best = curr;
        else if(curr.size() == best.size()) best = min(best, curr);
      }
    }
    cout << best << endl;
  }
  return 0;
}
