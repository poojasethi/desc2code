#include <iostream>
#include <string>
#include <sstream>
#include <cstdlib>
// #include <queue>
#include <stack>

using namespace std;

struct list
{
	int length;
	string element;
};

int compare(const void* a,const void* b)
{
	list *a1 = (list*)a;
	list *b1 = (list*)b;
	int c1 = a1->length;
	int d1 = b1->length;
	return (c1-d1);
}

int main()
{
	int testcases;
	cin>>testcases;
	for(int counter=0;counter<testcases;counter++)
	{
		int len;
		cin>>len;
		string input;
		getline(cin,input);
		getline(cin,input);
		stringstream ss(input);
		// int length = count(input.begin(),input.end(),' ');
		// length++;
		list* A = new list[len];
		string elem;
		int i= 0;
		if(len == 1)
		{
			cout<<input<<endl;
			continue;
		}
		while(i<len)
		{
			ss>>elem;
			A[i].element = elem;
			A[i].length = elem.size();
			i++;
		}
		//qsort(A,len,sizeof(list),compare);
		
		string a =A[0].element;
		string b =A[1].element;
		int a1 = A[0].length;
		int b1 = A[1].length;
		
		// queue<string> q;
		stack<string>q;
		for(int i=0; i<a1;i++){
			for(int j=0; j+i<a1;j++){
				string temp = a.substr(j,i+1);
				if( b.find(temp)!=string::npos){
					q.push(temp);
				}
			}
		}
		if(q.empty())
		{
			cout<<'\n';
		}
		else if(len == 2)// && !q.empty())
		{
			cout<<q.top()<<endl;
		}
		else
		{
			while(!q.empty())
			{
				string check = q.top();
				for(i=2;i<len;i++)
				{
					string check1 = A[i].element;
					if(check1.find(check) == string::npos)
					{
						break;
					}
				}
				q.pop();
				if(i == len)
				{
					cout<<check<<endl;
					break;
				}
			}
		}
		
	}
	return 0;
}