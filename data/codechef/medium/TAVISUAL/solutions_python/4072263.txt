#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random


# choisi k nombre parmis n
def choose(n, k):
    """
    A fast way to calculate binomial coefficients by Andrew Dalke (contrib).
    """
    if 0 <= k <= n:
        ntok = 1
        ktok = 1
        for t in xrange(1, min(k, n - k) + 1):
            ntok *= n
            ktok *= t
            n -= 1
        return ntok / ktok
    else:
        return 0


# return list of factors of n (without 1) eg . factors(20) = [2, 2, 5]
def factors(n):
    gaps = [1,2,2,4,2,4,2,4,6,2,6]
    length, cycle = 11, 3
    f, fs, next = 2, [], 0
    while f * f <= n:
        while n % f == 0:
            fs.append(f)
            n /= f
        f += gaps[next]
        next += 1
        if next == length:
            next = cycle
    if n > 1: fs.append(n)
    return fs


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


'''
si la balle est pile au milieu : pas de changement
sinon ,la balle est mirorÃ©e par le milieu:
    si
'''
def alg(nb_cups, initial_pos, operations):
    # 0-based index
    ball_pos = initial_pos - 1
    for start, end in operations:
        # segment_length = end - start + 1
        # modulo 2, move it
        # a b c d e f
        # si L=ib et R = id
        # center = c = (L+R) / 2
        # newi = - (i - center) + center = 2 * center - i

        # case where center is not exact:
        # L = ib et R = ie
        # same algo!
        # center=2.5:
        # 1 devient 4
        #
        # au final : newi = (L + R) - i
        start -= 1
        end -= 1
        if ball_pos >= start and ball_pos <= end:
            ball_pos = start + end - ball_pos

    # 1-based index
    return ball_pos + 1



def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        nb_cups, initial_pos, nb_operations = map(int, data.readline().split())  # int
        operations = []
        for i in xrange(nb_operations):
            operations.append(map(int, data.readline().split()))
        res = alg(nb_cups, initial_pos, operations)
        print res


if __name__ == "__main__":
    main()
