from heapq import *
from math import * 

#young => max heap (by using -ve)
#old => min heap (by default)

young_team = []
young_score = 0

older_team = []
older_score = 0

counter = 1 
temp = []

a = int(raw_input())
for c in range(a):
    k = raw_input().split(" ")
    age = int(k[0])
    rate = int(k[1])
    
    new_entry = [age,rate]

    if counter > 2 : 
        if len(young_team) == len(older_team):
            if older_team[0][0] < age : 
                current = heappop(older_team)
                older_score = older_score - current[1]
                
                current[0] = current[0] * -1
                heappush(young_team,current)
                young_score = young_score + current[1]

                heappush(older_team,new_entry)
                older_score = older_score + rate
                #print '=', young_team, older_team

            else :
                new_entry[0] = new_entry[0]* -1  ## added -ve value
                heappush(young_team,new_entry)
                young_score = young_score + rate
                #print '==', young_team, older_team

        elif len(young_team) > len(older_team) : 
            if ((young_team[0][0]*-1) > age) :
                current = heappop(young_team)
                young_score = young_score - current[1]
                current[0] = current[0] * -1 ##again maken +ve

                heappush(older_team,current)
                older_score = older_score + current[1]

                new_entry[0] = new_entry[0] * -1 ## added -ve 
                heappush(young_team,new_entry)
                young_score = young_score + rate 
                #print '===', young_team, older_team

            else :
                heappush(older_team,new_entry)
                older_score = older_score + rate
                #print '====', young_team, older_team

        print abs(older_score-young_score)

    else : 
        if counter == 1 :
            temp.append(new_entry)
            print new_entry[1]
        else :
            temp.append(new_entry)
            temp.sort()
            print abs(temp[0][1]-temp[1][1])
            temp_add_by_neagting = temp[0]
            temp_add_by_neagting[0] = temp_add_by_neagting[0] * -1 # add by -ve so it will become max heap 
            heappush(young_team ,temp_add_by_neagting)
            young_score = young_score + temp_add_by_neagting[1]
            heappush(older_team ,temp[1])
            older_score = older_score + temp[1][1]

    counter  = counter + 1
