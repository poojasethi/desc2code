#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string>
#include<string.h>
#include<vector>
#include<queue>
#define FOR(i,n) for((i)=0;(i)<(n);(i)++)
#define IT(i,j,n) for((i)=(j);(i)<(n);(i)++)

using namespace std;


typedef long long ll;
typedef unsigned long long llu;

struct chef
{
    ll age;
    int rating;
};

class compare1
{

public:

    bool operator()(chef a,chef b)
    {
        if( a.age < b.age)
            return true;
        else
            return false;
    }

};


class compare2
{

public:

    bool operator()(chef a,chef b)
    {
        if( a.age > b.age)
            return true;
        else
            return false;
    }

};


int main()
{

    int n ,i ;

    chef A[100000];

    priority_queue<chef,vector<chef>,compare1> q1;
    priority_queue<chef,vector<chef>,compare2> q2;

    scanf("%d",&n);

    FOR(i,n)
    {
        scanf("%lld %d",&A[i].age,&A[i].rating);
    }

    ll rating1=0,rating2=0;
    int minage,maxage;
    chef temp;

    FOR(i,n)
    {
        if(q1.size() <= i/2)
        {

            if(q2.size()>0 && A[i].age>maxage)
            {
                temp=q2.top();
                q2.pop();
                rating2-=temp.rating;
                q1.push(temp);
                rating1+=temp.rating;
                minage=temp.age;
                q2.push(A[i]);
                rating2+=A[i].rating;
                temp=q2.top();
                maxage=temp.age;
            }
            else
            {
                q1.push(A[i]);
                rating1+=A[i].rating;
                temp=q1.top();
                minage=temp.age;
            }


        }
        else
        {
            if(A[i].age<minage)
            {
                temp=q1.top();
                q1.pop();
                rating1-=temp.rating;
                q1.push(A[i]);
                q2.push(temp);
                rating1+=A[i].rating;
                rating2+=temp.rating;
                temp=q1.top();
                minage=temp.age;
                temp=q2.top();
                maxage=temp.age;
            }
            else
            {
                q2.push(A[i]);
                rating2+=A[i].rating;
                temp=q2.top();
                maxage=temp.age;
            }
        }


        printf("%lld\n",max(rating1-rating2,rating2-rating1));
    }

    return 0;

}
