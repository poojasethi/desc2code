#include<iostream>
#include<cstdio>
#include<queue>
#include<algorithm>
using namespace std;
 
 
typedef long long LL; typedef unsigned long long ULL;
typedef long double LD;
const int INF = 1000000001; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
inline bool myisspace(char c) { return c>=0 && c<=' '; }
 
class INPUT {
  static const int BUFSIZE = 1<<16;
  static char buffer[];
  char *bufpos;
  char *bufend;
  void grabBuffer();
 public:
  INPUT() { grabBuffer(); }
  bool eof() { return bufend==buffer; }
  char nextChar() { return *bufpos; }
  inline char readChar();
  inline void skipWS();
  inline unsigned readUnsigned();
  inline int readInt();
  inline ULL readULL();
  inline LL readLL();
  inline void readString(char *p);
  inline string readString(int maxlen=100);
};
 
char INPUT::buffer[INPUT::BUFSIZE];
 
void INPUT::grabBuffer() {
  bufpos = buffer;
  bufend = buffer + read(0, buffer, BUFSIZE);
}
 
char INPUT::readChar() {
  char res = *bufpos++;
  if(bufpos==bufend) grabBuffer();
  return res;
}
 
void INPUT::skipWS() {
  while(!eof() && myisspace(nextChar())) readChar();
}
 
unsigned INPUT::readUnsigned() {
  skipWS();
  unsigned res = 0;
  while(!eof() && isdigit(nextChar())) {
    res = 10u * res + (readChar()-'0');
  }
  return res;
}
 
int INPUT::readInt() {
  skipWS();
  bool neg = false;
  if(!eof() && nextChar()=='-') { neg=true; readChar(); }
  int res = static_cast<int>(readUnsigned());
  if(neg) res = -res;
  return res;
}
 
ULL INPUT::readULL() {
  skipWS();
  ULL res = 0;
  while(!eof() && isdigit(nextChar())) {
    res = 10u * res + (readChar()-'0');
  }
  return res;
}
 
LL INPUT::readLL() {
  skipWS();
  bool neg = false;
  if(!eof() && nextChar()=='-') { neg=true; readChar(); }
  LL res = static_cast<LL>(readUnsigned());
  if(neg) res = -res;
  return res;
}
 
void INPUT::readString(char *p) {
  skipWS();
  while(!eof() && !myisspace(nextChar())) *p++ = readChar();
  *p = 0;
}
 
string INPUT::readString(int maxlen) {
  char buf[maxlen+1];
  readString(buf);
  return string(buf);
}
 
class OUTPUT {
  static const int BUFSIZE = 1<<16;
  static char buffer[];
  char *bufpos;
  char *BUFLIMIT;
  void flushBuffer();
 public:
  OUTPUT():bufpos(buffer),BUFLIMIT(buffer+BUFSIZE-100) {}
  ~OUTPUT() { flushBuffer(); }
  inline void operator()(char c);
  inline void operator()(unsigned x);
  inline void operator()(int x);
  inline void operator()(ULL x);
  inline void operator()(LL x);
  inline void operator()(const char*s);
  void operator()(const string&s) { operator()(s.c_str()); }
  inline void print(double d, int prec);
  template<class A,class B>
  void operator()(const A& a,const B& b) {
    operator()(a); operator()(b);
  }
  template<class A,class B,class C>
  void operator()(const A& a,const B& b,const C&c) {
    operator()(a); operator()(b); operator()(c);
  }
  template<class A,class B,class C,class D>
  void operator()(const A& a,const B& b,const C&c,const D&d) {
    operator()(a); operator()(b); operator()(c); operator()(d);
  }
  template<class A,class B,class C,class D,class E>
  void operator()(const A& a,const B& b,const C&c,const D&d,const E&e) {
    operator()(a); operator()(b); operator()(c); operator()(d); operator()(e);
  }
  template<class A,class B,class C,class D,class E,class F>
  void operator()(const A& a,const B& b,const C&c,const D&d,const E&e,const F&f) {
    operator()(a); operator()(b); operator()(c); operator()(d); operator()(e); operator()(f);
  }
};
 
char OUTPUT::buffer[OUTPUT::BUFSIZE];
 
void OUTPUT::flushBuffer() {
  char *p = buffer;
  while(p < bufpos) {
    p += write(1, p, bufpos-p);
  }
  bufpos = buffer;
}
 
void OUTPUT::operator()(char c) {
  *bufpos = c;
  ++bufpos;
  if(bufpos >= BUFLIMIT) flushBuffer();
}
 
void OUTPUT::operator()(unsigned x) {
  char *old = bufpos;
  do {
    *bufpos = char('0' + x % 10u);
    x /= 10u;
    ++bufpos;
  } while(x);
  reverse(old, bufpos);
  if(bufpos >= BUFLIMIT) flushBuffer();
}
 
void OUTPUT::operator()(int x) {
  if(x<0) { operator()('-'); x = -x; }
  operator()(static_cast<unsigned>(x));
}
 
void OUTPUT::operator()(ULL x) {
  char *old = bufpos;
  do {
    *bufpos = char('0' + x % 10u);
    x /= 10u;
    ++bufpos;
  } while(x);
  reverse(old, bufpos);
  if(bufpos >= BUFLIMIT) flushBuffer();
}
 
void OUTPUT::operator()(LL x) {
  if(x<0) { operator()('-'); x = -x; }
  operator()(static_cast<ULL>(x));
}
 
void OUTPUT::operator()(const char*s) {
  while(*s) operator()(*s++);
}
 
void OUTPUT::print(double d, int prec) {
  char buf[100];
  sprintf(buf, "%.*f", prec, d);
  operator()(buf);
}
 
INPUT input;
OUTPUT output;
 
int abs(int x){
	if(x>0){
		return x;
	}else{
		return -x;
	}
}
 
 
struct node{
	int age;
	int rating;
};
 
struct compare
{
  bool operator()(const node& l, const node& r)
  {
      return l.age < r.age;
  }
};
 
 
struct compare1
{
  bool operator()(const node& l, const node& r)
  {
      return l.age > r.age;
  }
};
 
int main()
{
	//InitFASTIO();
	node a;
	priority_queue<node,vector<node>, compare > younger;
    priority_queue<node,vector<node>, compare1 > older;
 
    int n,age_val,rating_val,count=0,count1=0,q;
    //n=ni();
    n=input.readInt();
    age_val=input.readInt();
    rating_val=input.readInt();
    //age_val=ni();
    //rating_val=ni();
    //scanf("%d%d%d",&n,&age_val,&rating_val);
    count=rating_val;
    if(n==1){
    	//printf("%d\n",rating_val);
    	//pi(rating_val);
    	output(rating_val,"\n");
    	return 0;
    }
    //printf("%d\n",rating_val);
    //pi(rating_val);
    output(rating_val,"\n");
    a.age=age_val;
    a.rating=rating_val;
    younger.push(a);
    age_val=input.readInt();
    rating_val=input.readInt();
    //age_val=ni();
    //    rating_val=ni();
    //scanf("%d%d",&age_val,&rating_val);
    if(n==2){
    	q=abs(rating_val-count);
    	output(q,"\n");
    	//pi(q);
    	return 0;
    }
    //printf("%d\n",abs(rating_val-count));
    q=abs(rating_val-count);
    output(q,"\n");
    //pi(q);
    if((younger.top().age)>age_val){
    	count1=younger.top().rating;
    	//count=0;
    	a.age=younger.top().age;
    	a.rating=count1;
    	older.push(a);
    	younger.pop();
    	a.age=age_val;
    	a.rating=rating_val;
    	younger.push(a);
    	count=rating_val;
    }else{
    	a.age=age_val;
    	a.rating=rating_val;
    	count1=rating_val;
    	older.push(a);
    }
 
    for(int i=0;i<n-2;i++){
    	age_val=input.readInt();
    	rating_val=input.readInt();
    	//age_val=ni();
    	  //  rating_val=ni();
    	//scanf("%d%d",&age_val,&rating_val);
    	if(i%2==0){
    		if((older.top().age)>age_val){
    			a.age=age_val;
    			a.rating=rating_val;
    			younger.push(a);
    			count+=rating_val;
    		}else{
    			count1-=older.top().rating;
    			count+=older.top().rating;
    			a.age=older.top().age;
    			a.rating=older.top().rating;
    			younger.push(a);
    			older.pop();
    			a.age=age_val;
    			a.rating=rating_val;
    			older.push(a);
    			count1+=rating_val;
    		}
    	}else{
    		if((younger.top().age)<age_val){
    			a.age=age_val;
    			a.rating=rating_val;
    			older.push(a);
    			count1+=rating_val;
    		}else{
    			count1+=younger.top().rating;
    			count-=younger.top().rating;
    			a.age=younger.top().age;
    			a.rating=younger.top().rating;
    			older.push(a);
    			younger.pop();
    			a.age=age_val;
    			a.rating=rating_val;
    			younger.push(a);
    			count+=rating_val;
    		}
    	}
    	q=abs(count1-count);
    	output(q,"\n");
    	//    	pi(q);
    	//printf("%d\n",abs(count1-count));
 
    	//cout<<younger.top().age<<" "<<older.top().age<<endl;
 
    }
    //FlushFASTIO();
 
    return 0;
   // cin.get();
}
 