#include <iostream>
#include <limits>
#include <algorithm>
#include <queue>
#include <stdio.h>

using namespace std;
struct chef{
	int age;
	int star;
};
struct comp1{
bool operator()(const chef& a, const chef& b)
       {
          return a.age<b.age?false:true;
       }
};
struct comp2{
       
bool operator()(const chef& a, const chef& b)
       {
          return a.age>b.age?false:true;
       }
};

/*void minPush(vector<chef>& heap, chef val) {
    heap.push_back(val);
    push_heap(heap.begin(), heap.end(),comp1);
    //printf("min push val %d %d\n",val,heap.front());
}
void minPop(vector<chef>& heap) {
    //chef val = heap.front();
    //printf("min pop val %d\n",heap.front());
    //This operation will move the smallest element to the end of the vector
    pop_heap(heap.begin(), heap.end(), comp1);
 
    //Remove the last element from vector, which is the smallest element
    heap.pop_back(); 
    
    //return val;
}
void maxPush(vector<chef>& heap, chef val) {
    heap.push_back(val);
    push_heap(heap.begin(), heap.end(), comp2);
    //printf("max push val %d %d\n",val,heap.front());
}
void maxPop(vector<chef>& heap) {
    //chef val = heap.front();
    //printf("max pop val %d\n",heap.front());
    //This operation will move the smallest element to the end of the vector
    pop_heap(heap.begin(), heap.end(), comp2);
 
    //Remove the last element from vector, which is the smallest element
    heap.pop_back(); 
    
    //return val;
}*/


int main()
{
    //priority_queue<int, vector<long long>, comparator1> minHeap;
    //priority_queue<int, vector<long long>, comparator2> maxHeap;
    priority_queue<chef,vector<chef>,comp1> minHeap;
    priority_queue<chef,vector<chef>,comp2> maxHeap;
    //vector<chef> minHeap;
    //vector<chef> maxHeap;
    int n,age,star;
    scanf("%d",&n);
    //chef junior_max,seior_min;
    //map <int, long long> chef;
    chef senior_min,junior_max;
    int arr[10009];
    junior_max.age = 0;
    junior_max.star = 0;
    senior_min.age = 1000000009;
    senior_min.star = 0;
    int junior_count=0;
    int senior_count=0;
    int juniortotal = 0;
    int seniortotal = 0;
    //minPush(minHeap,senior_min);
    //maxPush(maxHeap,junior_max);
    //maxHeap.push();
    for(int i = 0;i < n; i++)
    {
    	chef c;
        scanf("%d %d",&c.age,&c.star);
        //arr[age]=star;
        //junior_max=maxHeap.front();
        //senior_min=minHeap.front();
        
        if(junior_count == senior_count)
        {
            junior_count++;
            if(senior_min.age < c.age)
            {
                //minHeap.push(star)
                /**transfer one from senior group to junior group**/
                //printf("DEBUG1 %d\n",senior_min.age);
                juniortotal+=senior_min.star;
                seniortotal-=senior_min.star;
                seniortotal+=c.star;
                maxHeap.push(senior_min);//maxPush(maxHeap,senior_min);
                minHeap.pop();
                minHeap.push(c);
                //minPush(minHeap,c);
                
                senior_min=minHeap.top();//minPop(minHeap);//search(arr,senior_min,star,-1);
                junior_max = maxHeap.top();//maxHeap.front();
                //senior_min = minHeap.front();
                //minHeap.pop();
                //minHeap.push(star);
                //if(senior_min)
                //printf("DEBUGGING %d\t%d\n",junior_max.age,senior_min.age);
                
            }
            
            else
            {
                //printf("DEBUG2\n");
                /**add in the junior group**/
                juniortotal+=c.star;
                maxHeap.push(c);//maxPush(maxHeap,c);
                junior_max=maxHeap.top();
                //junior_max=maxHeap.front();
                //maxHeap.pop();
                //printf("DEBUGGING %d\t%d\n",junior_max.age,senior_min.age);
            }
        }
        else if(junior_count>senior_count)
        {
            senior_count++;
            /**shift the max of the minimum array to the maximum array**/
            if(c.age < junior_max.age)
            {
                //printf("DEBUG3\n");
                juniortotal-=junior_max.star;
                juniortotal+=c.star;
                seniortotal+=junior_max.star;
                minHeap.push(junior_max);
                maxHeap.pop();
                maxHeap.push(c);
                junior_max=maxHeap.top();
                senior_min=minHeap.top();
                //printf("DEBUGGING %d\t%d\n",junior_max.age,senior_min.age);
                
                
            }
            else
            {
                //printf("DEBUG4\n");
                /**add in the senior group**/
                seniortotal+=c.star;
                minHeap.push(c);
                //minPush(minHeap,c);
                senior_min=minHeap.top();
                //senior_min=minPop(minHeap);
                //minHeap.minpop();
                //printf("DEBUGGING %d\t%d\n",junior_max.age,senior_min.age);
            }
        }
        //maxPush(maxHeap,junior_max);
        //minPush(minHeap,senior_min);
        //printf("%d %d\n",juniortotal,seniortotal);
        printf("%d\n",abs(juniortotal-seniortotal));
        
    }
    
    return 0;
}
