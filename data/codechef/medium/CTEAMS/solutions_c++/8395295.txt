#include <cstdlib>
#include<iostream>
#include<algorithm>
#include<stdio.h>
#include <vector>
 
using namespace std;
struct chef
{
    int age;
    int rating;
};

inline bool compare2(chef &c1,chef &c2)
{
    if(c1.age>c2.age)
        return true;
    return false;
}
inline bool compare1(chef &c1,chef &c2)
{
    if(c1.age<c2.age)
        return true;
    return false;
}
vector<chef>young;
vector<chef>old;
inline chef extractMax()
{
    chef top;
    top=young.front();
    pop_heap(young.begin(),young.end(),compare1);
    young.pop_back();
    return top;
}
inline chef extractMin()
{
    chef top;
    top=old.front();
    pop_heap(old.begin(),old.end(),compare2);
    old.pop_back();
    return top;
}
inline void pushOld(chef &add)
{
    old.push_back(add);
    push_heap(old.begin(),old.end(),compare2);
}
inline void pushYoung(chef &add)
{
    young.push_back(add);
    push_heap(young.begin(),young.end(),compare1);
}
inline int mod(int a)
{
    if(a<0)
        return -a;
    else
        return a;
}
/*
 * 
 */
int main() 
{
    int n,i;
    int ry=0,ro=0;//ratings of both teams are 0 initially
    int age,r;
    chef top,add;
    cin>>n;
    for(i=0;i<n;i++)
    {
        scanf("%d%d",&age,&r);
        add.age=age;
        add.rating=r;
        if(old.empty() || age<old.front().age)
        {
            pushYoung(add);
            ry+=r;
        }
        else
        {
            pushOld(add);
            ro+=r;
        }
           if(young.size()>old.size()+1)
           {
             top=extractMax();
             ry-=top.rating;
             pushOld(top);
             ro+=top.rating;
           }
              
        
           else if(old.size()>young.size())
            {
                top=extractMin();
                ro-=top.rating;
                pushYoung(top);
                ry+=top.rating;
            }
            
        
        printf("\n%d",mod(ro-ry));
    }
 
    return 0;
} 