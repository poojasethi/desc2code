#include<cstdio>
#include<iostream>
#define parent(x) x/2
#define left(x) x*2
#define right(x) x*2+1
using namespace std;
int readlong()
{
	char temp;
	int x=0;
	temp=getchar_unlocked();
	while(temp<48)temp=getchar_unlocked();
	x+=(temp-'0');
	temp=getchar_unlocked();
	while(temp>=48){
		x=x*10;
		x+=(temp-'0');
		temp=getchar_unlocked();
	}
	return x;

}
struct chef
{
       int age, rating;
};
int abs(int x)
{
    if(x>0)
           return x;
    return -x;
}
class MaxHeap
{
      chef *a;
      int length;
      public:
             MaxHeap(int n)
             {
                   a=new chef[n];
                   length=0;
             }
             void insert(chef i)
             {
                  a[++length]=i;
                  int pos=length;
                  while(pos>1 && a[parent(pos)].age<i.age)
                  {
                         a[pos]=a[parent(pos)];
                         pos=parent(pos);
                  }
                  a[pos]=i;
             }
             void heapify(int i)
             {
                  int largest=i;
                  if(left(i)<=length && a[left(i)].age>a[largest].age)
                        largest=left(i);
                  if(right(i)<=length && a[right(i)].age>a[largest].age)
                        largest=right(i);
                  if(largest!=i)
                  {
                          chef temp=a[i];
                          a[i]=a[largest];
                          a[largest]=temp;
                          heapify(largest);
                  }
             }
             chef top()
             {
                 return a[1];
             }
             void pop()
             {
                  a[1]=a[length];
                  length--;
                  heapify(1);
             }
             bool isEmpty()
             {
                  if(length==0)
                               return true;
                  return false;
             }
             void print()
             {
                  for(int i=1; i<=length; i++)
                          cout<<a[i].age<<" ";
                  cout<<endl;
             }
};
class MinHeap
{
      chef *a;
      int length;
      public:
             MinHeap(int n)
             {
                      a=new chef[n];
                   length=0;
             }
             void insert(chef i)
             {
                  a[++length]=i;
                  int pos=length;
                  while(pos>1 && a[parent(pos)].age>i.age)
                  {
                         a[pos]=a[parent(pos)];
                         pos=parent(pos);
                  }
                  a[pos]=i;
             }
             void heapify(int i)
             {
                  int largest=i;
                  if(left(i)<=length && a[left(i)].age<a[largest].age)
                        largest=left(i);
                  if(right(i)<=length && a[right(i)].age<a[largest].age)
                        largest=right(i);
                  if(largest!=i)
                  {
                          chef temp=a[i];
                          a[i]=a[largest];
                          a[largest]=temp;
                          heapify(largest);
                  }
             }
             chef top()
             {
                 return a[1];
             }
             void pop()
             {
                  a[1]=a[length];
                  length--;
                  heapify(1);
             }
             bool isEmpty()
             {
                  if(length==0)
                               return true;
                  return false;
             }
             void print()
             {
                  for(int i=1; i<=length; i++)
                          cout<<a[i].age<<" ";
                  cout<<endl;
             }
};
main()
{
     int n;
     n=readlong();
     MinHeap max(n);
     MaxHeap min(n);
     int brat=0;
     int srat=0;
     for(int i=0; i<n; i++)
     {
             chef temp;
             temp.age=readlong();
             temp.rating=readlong();
             if(i%2==0)
             {
                       if(i==0)
                       {
                               srat+=temp.rating;
                               min.insert(temp);
                       }
                       else
                       {
                       if(temp.age<max.top().age)
                       {
                               srat+=temp.rating;
                               min.insert(temp);
                       }
                       else
                       {
                           min.insert(max.top());
                           srat+=max.top().rating;
                           brat-=max.top().rating;
                           max.pop();
                           max.insert(temp);
                           brat+=temp.rating;
                       }
                       }
             }
             else
             {
                 if(temp.age>min.top().age)
                 {
                      brat+=temp.rating;
                      max.insert(temp);
                 }
                 else
                 {
                     max.insert(min.top());
                     brat+=min.top().rating;
                     srat-=min.top().rating;
                     min.pop();
                     min.insert(temp);
                     srat+=temp.rating;
                 }
             }
             printf("%d\n", abs(srat-brat));
     }
}
