#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <bitset>
#include <fstream>
#include <iomanip>
#include <set>
#include <stack>
#include <sstream>
#include <cstdio>
#include <map>
#include <cmath>
#include <queue>
#include <cstring>

using namespace std;

typedef unsigned long long ull;
const ull MAX_RATING = 1000000001LL;

struct ar {
	ull age;
	ull rating;

	ar(ull a = 0, ull r = 0) 
		:age(a), rating(r) {
	}

	bool operator <(const ar& o) const {
		return age < o.age;
	}

	bool operator >(const ar& o) const {
		return age > o.age; 
	}
};


void inout_chef_team() {
	int chefs;
	long long max_sum = 0;
	long long min_sum = 0;
	ull median = MAX_RATING;
	int k;
	ar pp;

	// store greater
	priority_queue<ar, vector<ar>, greater<ar> > min_heap;
	// store smaller
	priority_queue<ar, vector<ar>, less<ar> > max_heap;

	scanf("%d", &chefs);
	for (int i = 1; i <= chefs; ++i) {
		scanf("%lld %lld", &pp.age, &pp.rating);
		if (i % 2) {
			k = i/2 + 1;
		} else {
			k = i/2;
		}
		
		if (pp.age < median) {
			max_heap.push(pp);
			max_sum += pp.rating;
		} else {
			min_heap.push(pp);
			min_sum += pp.rating;
		}

		while (max_heap.size() > k) {
			min_heap.push(max_heap.top());
			min_sum += max_heap.top().rating;
			max_sum -= max_heap.top().rating;
			max_heap.pop();
		}

		while (max_heap.size() < k) {
			max_heap.push(min_heap.top());
			max_sum += min_heap.top().rating;
			min_sum -= min_heap.top().rating;
			min_heap.pop();
		}

		median = max_heap.top().age;

		if (max_sum > min_sum) {
			printf("%lld\n", max_sum - min_sum);
		} else {
			printf("%lld\n", min_sum - max_sum);
		}
	}	
}

int main() {
	inout_chef_team();	
	return 0;
}  