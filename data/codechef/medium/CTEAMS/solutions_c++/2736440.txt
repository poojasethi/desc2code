#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>
#include<functional>
using namespace std;
class Chef
{
	public:
	int age;
	int rating;
	Chef(){rating=age=0;}
};
class mycomparison
{
	bool reverse;
	public:
	mycomparison(bool revparam = true)
	{
		reverse=revparam;
	}
	bool operator()(Chef &lhs,Chef &rhs)
	{
		if(reverse)
		return (lhs.age)>(rhs.age);
		else
		return (lhs.age)<(rhs.age);
	}
};
int abs(int x,int y)
{
	if(x>=y)
	return x-y;
	else
	return y-x;
}
int main()
{
	typedef std::priority_queue<Chef,std::vector<Chef>,mycomparison> priority;
	priority old;
	priority young(mycomparison(false));
	int n,i,sum1,sum2;
	Chef c; 
	scanf("%i",&n);
	scanf("%i %i",&(c.age),&(c.rating));
	printf("%i\n",c.rating);
	sum1=c.rating;
	sum2=0;
	young.push(c);
	for(i=1;i<n;i++)
	{
		Chef c;
		scanf("%i %i",&(c.age),&(c.rating));
		if(i%2)
		{
			if(young.top().age>c.age)
			{
				Chef temp;
				temp.age=young.top().age;
				temp.rating=young.top().rating;
				young.pop();
				young.push(c);
				old.push(temp);
				sum1-=temp.rating;
				sum1+=c.rating;
				sum2+=temp.rating;
				
			}
			else
			{
				old.push(c);
				sum2+=c.rating;
				
			}
		}
		else
		{
			if(old.top().age<c.age)
			{
				Chef temp;
				temp.age=old.top().age;
				temp.rating=old.top().rating;
				old.pop();
				old.push(c);
				young.push(temp);
				sum1+=temp.rating;
				sum2-=temp.rating;
				sum2+=c.rating;
				
			}
			else
			{
				young.push(c);
				sum1+=c.rating;
			}
		}
		printf("%i\n",abs(sum1,sum2));
	}
	return 0;
}

