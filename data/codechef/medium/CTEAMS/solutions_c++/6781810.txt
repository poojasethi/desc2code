/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mkp make_pair
#define mod 1000000007
#define ff first
#define ss second
typedef vector<LL> row;
typedef vector<row> matrix;

#define get getchar_unlocked
/*inline int scan()
{
    int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n*s;
}

void print(int X)
{
  if(X<0) { putchar_unlocked('-');  X=-X;  }
  int Len=0,Data[10];
  while(X) { Data[Len++]=X%10; X/=10; }
  if(!Len) Data[Len++]=0;
  while(Len--) putchar_unlocked(Data[Len]+48);
}*/

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}
#define pii pair<int, int>
void solve()
{
	priority_queue<pii, vector< pii >, less< pii > >y;
	priority_queue<pii, vector< pii >, greater< pii > >o;
	int n, ysum = 0, osum = 0;
	s(n);
	for(int i = 1; i <= n; i++) {
		int age, rank;
		s(age); s(rank);
		if(o.empty() || o.top().ff > age) {
			//push into young
			y.push(mkp(age, rank));
			ysum += rank;	
		}
		else {
			//push into older
			o.push(mkp(age, rank));
			osum += rank;
		}
		//rearranging
		if(y.size() - 1 > o.size()) {
			pii temp = y.top();
			y.pop();
			o.push(temp);
			ysum -= temp.ss;
			osum += temp.ss;
		}
		else if(o.size() > y.size()) {
			pii temp = o.top();
			o.pop();
			y.push(temp);
			osum -= temp.ss;
			ysum += temp.ss;
		}
		pi(abs(ysum - osum)); pn;
	}
}
int main()
{
	int t = 1;
	//scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
