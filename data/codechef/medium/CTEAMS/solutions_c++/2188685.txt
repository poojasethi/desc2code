#include <stdio.h>
#include <set>

#define getcx getchar
typedef unsigned int uint;

inline void s( int &n )
{
    n=0;
    int ch=getcx();
    while( ch < '0' || ch > '9' ) ch=getcx();
    while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
}


struct chef
{
    int age;
    int rating;
};

struct chef_comp
{
    bool operator()(const chef& first, const chef& second) const
    {
        return first.age < second.age;
    }
};

using namespace std;

int main()
{


    set<chef,chef_comp> low, high;
    set<chef, chef_comp>::iterator lowIt, highIt;
    set<chef, chef_comp>::reverse_iterator lowRevIt, highRevIt;
    uint ratingLow=0, ratingHigh=0;

    int n;
    s(n);
    while(n--)
    {
        chef ch;
        s(ch.age);
        s(ch.rating);

        if(low.size() == high.size())
        {
            if(low.size() == 0)
            {
                low.insert(ch);
                ratingLow += ch.rating;
            }
            else
            {
                highIt = high.begin();
                if((*highIt).age < ch.age)
                {
                    // insert highIt in low
                    low.insert(*highIt);
                    ratingLow += (*highIt).rating;

                    // Remove highIt from high
                    ratingHigh -= (*highIt).rating;
                    high.erase(highIt);

                    // Insert ch in high
                    high.insert(ch);
                    ratingHigh += ch.rating;
                }
                else
                {
                    low.insert(ch);
                    ratingLow += ch.rating;
                }
            }
        }
        else if(low.size() > high.size())
        {
            lowRevIt = low.rbegin();
            if((*lowRevIt).age < ch.age)
            {
                high.insert(ch);
                ratingHigh += ch.rating;
            }
            else
            {
                // Insert lowRevIt in high
                high.insert(*lowRevIt);
                ratingHigh += (*lowRevIt).rating;

                // Remove lowRevIt from low
                ratingLow -= (*lowRevIt).rating;
                low.erase(*lowRevIt);

                // Insert ch in low
                low.insert(ch);
                ratingLow += ch.rating;
            }
        }
        int diff = ratingHigh - ratingLow;
        if(diff < 0)
        {
            diff = diff * (-1);
        }
        printf("%d\n", diff);
    }

    return 0;
}

