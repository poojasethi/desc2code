
/*  Shubhanshu Agrawal */

#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<string>
#include<sstream>

using namespace std;

#define s(n)					scanf("%d",&n)
#define sl(n) 					scanf("%lld",&n)
#define INF						(int)1e9
#define LINF					(long long)1e18
#define FOR(i,a,b)				for(int i=a;i<=(int)b;i++)
#define REP(i,n)				FOR(i,0,n-1)
#define foreach(v,c)            for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define mp						make_pair
#define let(x,a) __typeof(a) x(a)
#define pb						push_back
#define fill(a,v) 				memset(a,v,sizeof a)
#define all(x)					x.begin(),x.end()
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())
#define debugger cerr
#define debug(args...)			{mdbg,args; debugger<<endl;}
#define PRINT_CONTAINER(o,v)    {if(v.size()==0) return o<<"{}"; o<<"{"; foreach(it,v) o<<*it<<" "; return o<<"\b}";}


struct multidebug {template<typename T> multidebug& operator , (const T &v) {debugger<<v<<" "; return *this;}} mdbg;
	template<class T> ostream& operator << (ostream& o,const vector<T> &v) PRINT_CONTAINER(o,v)
	template<class T> ostream& operator << (ostream& o,const set<T> &v) PRINT_CONTAINER(o,v)
	template<class A,class B> ostream& operator << (ostream& o,const map<A,B> &v) PRINT_CONTAINER(o,v)
	template<class A,class B> ostream& operator << (ostream& o,const pair<A,B> &p) {o<<"("<<p.first<<","<<p.second<<")"; return o;}
	template<class T> void debugarr(T* v,int n) {debugger<<"{"; for(int i=0;i<n;i++) debugger<<v[i]<<" "; debugger<<"\b}"<<endl;}



typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;

typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;

typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;

typedef vector<string> VS;
typedef vector<VS> VVS;






int main()
{
	int n;
	s(n);

	priority_queue<PII> low,high;

	int low_sum=0, high_sum=0;
	REP(i,n)
	{
		int a,r;
		s(a);s(r);
		
		if(low.size()==0 || a<=low.top().first) {
			low.push(mp(a,r));
			low_sum+=r;
		} else {
			high.push(mp(-a,r));
			high_sum+=r;
		}

		if(high.size()>low.size()) {
			PII ex=high.top();
			high.pop();
			high_sum-=ex.second;

			ex.first=-ex.first;
			low.push(ex);
			low_sum+=ex.second;
		}

		if(low.size()>high.size()+1) {
			PII ex=low.top();
			low.pop();
			low_sum-=ex.second;

			ex.first=-ex.first;
			high.push(ex);
			high_sum+=ex.second;
		}


		printf("%d\n", abs(high_sum-low_sum));
	}

	return 0;
}

