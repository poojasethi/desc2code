#include<iostream>
#include<queue>
#include<utility>
#include <vector>
#include <math.h>

using namespace std;

class CompareDist
{
public:
    bool operator()(pair<long long int,long long int> n1,pair<long long int,long long int> n2)
    {

      if(n1.first<n2.first)
      return true;
      else
      return false;

    }
};


class CompareDistt
{
public:
    bool operator()(pair<long long int,long long int> n1,pair<long long int,long long int> n2)
    {

      if(n1.first>n2.first)
      return true;
      else
      return false;

    }
};

priority_queue<pair<long long int,long long int>,vector<pair<long long int,long long int> >,CompareDist> pq;
priority_queue<pair<long long int,long long int>,vector<pair<long long int,long long int> >,CompareDistt> pqr;

long long int abss (long long int x) {
	if (x < 0) {
		return -1 * x;
	}
	return x;
}


int main()
{
	
	long long int n, i, p, q, sumy, l , x, sumo, y, r;
	
	sumo = 0;
	sumy = 0;
	
	scanf ("%lld", &n);
	
	for (i = 0; i < n; i++) {
		scanf ("%lld%lld", &p, &q);
		
		if (i == 0) {
			pq.push( pair<int, int>( p, q) );		
			sumy = sumy + q;		
			printf ("%lld\n", abss (sumo - sumy));
		} else if (i == 1) {
			l = pq.top ().first;
			if (l > p) {
				x = pq.top ().second;
				pq.pop ();
				pqr.push( pair<int, int>( l, x) );
				pq.push( pair<int, int>( p, q) );
				sumy = q;
				sumo = x;
				printf ("%lld\n", abss (sumo - sumy));
			} else {
				pqr.push( pair<int, int>( p, q) );
				sumo = q;
				printf ("%lld\n", abss (sumo - sumy));
			}
		} else {
			l = pq.top ().first;
			r = pqr.top ().first;
			
			if (i % 2 == 0) {
				if (p <= r) {
					pq.push( pair<int, int>( p, q) );
					sumy = sumy + q;	
				} else {
					x = pqr.top ().first;
					y = pqr.top ().second;
					pqr.pop ();
					sumo = sumo - y;
					pq.push( pair<int, int>( x, y) );
					pqr.push( pair<int, int>( p, q) );
					sumy = sumy + y;
					sumo = sumo + q;
				}
			} else {
				if (p < l) {
					x = pq.top ().first;
					y = pq.top ().second;
					pq.pop ();
					sumy = sumy - y;
					pqr.push( pair<int, int>( x, y) );
					pq.push( pair<int, int>( p, q) );
					sumo = sumo + y;
					sumy = sumy + q;
				} else {
					pqr.push( pair<int, int>( p, q) );
					sumo = sumo + q;
				}
			}
			printf ("%lld\n", abss (sumo - sumy));
		}
	}

    //priority_queue<pair<int,int>,vector<pair<int,int> >,CompareDist> pq;
    
    //pq.push( pair<int, int>( 2, 0) );
    
     //while ( !pq.empty() )  
    //{  
      //  cout << pq.top().first << endl;  
        //pq.pop();  
    //}  
    
    return 0;
}