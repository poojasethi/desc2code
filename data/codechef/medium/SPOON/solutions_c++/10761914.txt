/*
	               _            .                                 .x+=:.
	              u            @88>                              z`    ^%    .uef^"
	             88Nu.   u.    %8P      u.    u.                    .   <k :d88E
	      u     '88888.o888c    .     x@88k u@88c.       u        .@8Ned8" `888E
	   us888u.   ^8888  8888  .@88u  ^"8888""8888"    us888u.   .@^%8888"   888E .z8k
	.@88 "8888"   8888  8888 ''888E`   8888  888R  .@88 "8888" x88:  `)8b.  888E~?888L
	9888  9888    8888  8888   888E    8888  888R  9888  9888  8888N=*8888  888E  888E
	9888  9888    8888  8888   888E    8888  888R  9888  9888   %8"    R88  888E  888E
	9888  9888   .8888b.888P   888E    8888  888R  9888  9888    @8Wou 9%   888E  888E
	9888  9888    ^Y8888*""    888&   "*88*" 8888" 9888  9888  .888888P`    888E  888E
	"888*""888"     `Y"        R888"    ""   'Y"   "888*""888" `   ^"F     m888N= 888>
	 ^Y"   ^Y'                  ""                  ^Y"   ^Y'               `Y"   888
	                                                                             J88"
	                                                                             @%
	                                                                           :"
*/
#include <bits/stdc++.h>
using namespace std;
#define rep(i,a,b) for(int i=(a);i<(b);++i)

typedef long long int ll;

#ifdef __WIN32__
#define getchar_unlocked getchar
#define putchar_unlocked putchar
#endif

inline ll inp(){ ll n=0, sg=1; register int c=getchar_unlocked(); if(c=='-') sg=-1; while(c<'0' || c>'9')
c=getchar_unlocked(); while(c>='0' && c<='9'){n = (n<<3) + (n<<1) + c-48; c=getchar_unlocked();} return n*sg;}


string s[101];

int main() {
	int t, r, c;
	string pat = "spoon";
	t=inp();
	while(t--){
		r=inp();
		c=inp();
		rep(i,0,r) { cin >> s[i]; }
		bool found = false;
		rep(i,0,r){
			rep(j,0,c-4){
				int flag=0;
				rep(k,0,5){
					if((s[i][j+k] != pat[k]) && (s[i][j+k] != toupper(pat[k]))){
						flag = 1;
						break;
					}
				}
				if(!flag) { 
					found = true;
					break;
				}
			}
			if(found) break;
		}

		if(!found){
			rep(i,0,c){
				rep(j,0,r-4){
					int flag=0;
					rep(k,0,5){
						if((s[j+k][i] != pat[k]) && (s[j+k][i] != toupper(pat[k]))){
							flag = 1;
							break;
						}
					}
					if(!flag){
						found = true;
						break;
					}
				}
				if(found) break;
			}
		}

		if(found) puts("There is a spoon!");
		else puts("There is indeed no spoon!");
	}
	return 0;
}
