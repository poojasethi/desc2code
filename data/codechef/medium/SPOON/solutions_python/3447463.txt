cases = int(raw_input())


def foundspoon(r, c, M):
    if len(M[r]) - 1 >= c + 4:
        row = M[r]
        horizontal = row[c] == 's' and row[c + 1] == 'p' \
            and row[c + 2] == 'o' and row[c + 3] == 'o' and row[c + 4] == 'n'
        if horizontal:
            return True

    if (len(M) - 1) < r + 4:
        return False

    vertical = M[r][c] == 's' and M[r + 1][c] == 'p' and M[r + 2][c] == 'o' \
        and M[r + 3][c] == 'o' and M[r + 4][c] == 'n'
    return vertical


def compute(M):
    for i in xrange(len(M)):
        for j, c in enumerate(M[i]):
            if c == 's':
                if foundspoon(i, j, M):
                    return 'There is a spoon!'

    return 'There is indeed no spoon!'

for _ in xrange(cases):
    R, C = map(int, raw_input().split())
    M = []
    for _ in xrange(R):
        row = raw_input().lower()
        M.append([c for c in row])

    print compute(M)
