#!/usr/bin/python
# coding=utf8
import sys
import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


def main():
    data = sys.stdin
    nb = int(data.readline())
    for icase in xrange(nb):
        row, col = map(int, data.readline().split())
        text = []
        for r in xrange(row):
            text.append(data.readline().strip().lower())
        has_spoon = False
        for r in text:
            if "spoon" in r:
                has_spoon = True
                break
        if not has_spoon:
            reverse = [''.join([text[i][j] for i in xrange(len(text))]) for j in xrange(col)]
            for r in reverse:
                if "spoon" in r:
                    has_spoon = True
                    break
        #lfloat = map(float, data.readline().split())
        #lstring = data.readline().split()
        #string = data.readline().strip()
        print "There is a spoon!" if has_spoon else "There is indeed no spoon!"


if __name__ == "__main__":
    main()
