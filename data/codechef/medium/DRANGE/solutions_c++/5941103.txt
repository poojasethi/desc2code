//LIVE. LET LIVE.
#include<iostream>
#include<istream>
#include<cstdio>
#include<malloc.h>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<math.h>
#include<cmath>
#include<string>
#include<string.h>
#include<iomanip>
using namespace std;
#define tk(a) cin>>a;
#define tk2(a,b) cin>>a >>b;
#define tk3(a,b,c) cin>>a >>b >>c;
#define tk4(a,b,c,d) cin>>a >>b >>c >>d;
#define f(i,n) for(i=0; i< n; i++)
#define fj(i,a,n) for( i=0; i<n; i+=a)
#define fa(i,a,n) for( i=a; i < n ; i ++)
#define rfa(i,a) for( i=a; i >0; i--)
#define rfaz(i,a) for(i=a; i>=0; i--)
#define fab(i,a,b) for(i=a; i <b; i++)
#define rfab(i,a,b) for(i=a; i >b; i--)
#define fij(i,j,n,m) for(i=0, j=0; i < n, j < m; ++i, ++j);
#define frs(i,s) for(i=0; i< s.length(); i+=0 )
#define frss(i,j,s1,s2) for(i=0,j=0; i< s1.length() && j< s2.length(); i+=0,j+=0 )
#define walk(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();++i)
#define init(x,n) int *x=(int*)malloc(sizeof(int)*n)
#define cha(x,n) int *x=(int*)malloc(sizeof(char)*n)
#define r0 return 0;
#define p(x) cout<<x<<endl;
#define ps(x) cout<<x <<;
#define p2(a,b) cout<<a<<" "<<b<<endl;
#define pr(x) {cout<<x<<endl; break;} 
#define c continue;
#define r return;
typedef long long int lli;
typedef long int li;
typedef unsigned long intulli;
typedef map<string ,char> msc;
typedef map<int,int> mi;
typedef map<string,string> mss;
typedef vector<lli> vlli;
typedef vector<li> vli;
typedef vector<int> vi;
typedef vector<string> vs;
typedef set<lli> slli;
typedef set<li> sli;
typedef set<int> si;
typedef set<string> ss;
typedef multiset<lli> mlli;
typedef multiset<li> msli;
typedef multiset<int> msi;
typedef vector<string> vs;
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int d[1000010];
int main()
{
	
	int t;
	scanf("%d", &t);
	while(t--)
	{

		int ind=0, l=1000000009, h=-1000000009;
		int n,i,m,w,x,y,z,j,k;
		scanf("%d %d", &n, &m);
		memset(d,0,sizeof(d));
		f(i,m) 
		{
				scanf("%d %d %d %d", &w, &x, &y, &z);
				if(w==1)
				{
					d[x-1]+=z;
					d[y]-=z;
				}
				else
				{
					d[x-1]-=z;
					d[y]+=z;
				}
				
		}
		/*a[1]=first;
		//f(i,n) p(d[i]);
		fa(i,2,n+1)
		{
			a[i]=a[i-1]+d[i-1];
		}
		//f(i,n+1) p(a[i]);
		sort(a+1,a+n);
		p(a[n]-a[1]);*/
		f(i,n)
		{
			ind+=d[i];
			l=min(l,ind+i+1);
			h=max(h,ind+i+1);
		}
		p(h-l);
	}
	r0;
}