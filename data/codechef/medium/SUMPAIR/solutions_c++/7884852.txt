
// #include<abhi.944>

#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;

#ifndef ONLINE_JUDGE
	#define TRACE
#endif

inline int two(int n) { return 1 << n; }
inline int test(int n, int b) { return (n>>b)&1; }
inline void set_bit(int & n, int b) { n |= two(b); }
inline void unset_bit(int & n, int b) { n &= ~two(b); }
inline int last_bit(int n) { return n & (-n); }
inline int ones(int n) { int res = 0; while(n && ++res) n-=n&(-n); return res; }

//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << fixed << setprecision (4) << f << endl; Prints x.xxxx

const long double PI=3.1415926535897932384626;
const ll MAX=1000000000+7;

#define ps printf(" ")
#define pn printf("\n")
#define sc(n) scanf("%lld",&n)
#define pf(n) printf("%lld",n)
#define fora(it, x) for(__typeof((x).begin()) it=(x).begin();it!=(x).end();it++)
#define sz size()
#define ff first
#define ss second
#define pb push_back //pop_back
#define mp make_pair
#define fill(a,val) memset(a,val,sizeof(a))

#ifdef TRACE
    #define trace(x)            cerr<<"--hai--"<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
#endif

bool cmp(int x,int y)
{
	return x > y;
}

int main()
{
	ll t;
	sc(t);
	while(t--)
	{
		ll n,d;
		sc(n); sc(d);

		int *a=(int*)malloc((n+3)*sizeof(int));

		for(ll i=0;i<n;i++)
		{
			cin >> a[i];
		}

		sort(a,a+n,cmp);

		ll sum=0;
		for(ll i=1;i<n;)
		{
			if((a[i-1]-a[i])<d)
			{
//				trace2(d,a[i]-a[i-1]);
				sum+=a[i]+a[i-1];
				i+=2;
			}
			else
			i++;
		}

		pf(sum);
		pn;
	}
		
	return 0;
}