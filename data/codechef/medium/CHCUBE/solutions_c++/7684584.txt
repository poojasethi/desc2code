#include <bits/stdc++.h>

#define fr(i,a,b) for(int i = a; i<b; i++)
#define fo(i,b) fr(i,0,b)
#define ford(i,a,b) for(int i = a; i>b; i--)
#define wh(T) while((T--)>0)
#define ulli unsigned long long int
#define gc getchar_unlocked
#define pc putchar_unlocked
#define max(a,b) a>b?a:b
#define min(a,b) a<b?a:b
using namespace std;

int readInt()
{
	int n = 0;
	char c = gc();
// 	if(c < 0 || c=='\n')
// 		return -1;
	while(c < '0' || c > '9')
	{
		c = gc();
		continue;
	}
		
	while(c >= '0' && c <= '9')
	{
		n = (n*10)+c-'0';
		c = gc();
	}
	return n;
}

char * readword()
{
	char *c = (char *)malloc(6*sizeof(char));
	int p = 0;
	char ch = gc();
	while(ch < 'a' || ch > 'z')
		ch = gc();
	while(ch >= 'a' && ch <= 'z')
	{
		c[p++] = ch;
		ch = gc();
	}
	return c;
}

char *colors[6];
int adj[8][3];

// void test(char c[])
// {
// 	printf("%d\n", (c[0]-'a')+(c[2]-'a'));
// }
int assign(char *co)
{
	return (co[0]-'a') + (co[2]-'a');
}
// 	if(co[0] == 'b')
// 	{
// 		if(co[2] == 'a')
// 			return 1;
// 		return 2;
// 	}
// 	
// 	if(co[0] == 'g')
// 		return 3;
// 	if(co[1] == 'y')
// 		return 4;
// 	if(co[0] == 'r')
// 		return 5;
// 	return 6;

	
void find_Adjascency()
{
	int loop = 0;
	fo(i,2)
	{
		fo(j,2)
		{
			fo(k,2)
			{
				adj[loop][0] = assign(colors[i]);
				adj[loop][1] = assign(colors[2+j]);
				adj[loop++][2] = assign(colors[4+k]);
				
// 				printf("%d %d %d\n", i, 2+j, 4+k);
			}
		}
	}
}
				
int main()
{
	int T = readInt();
	wh(T)
	{
		fo(i,6)
			colors[i] = readword();
			
		find_Adjascency();
		bool possible = false;
		
		fo(i,8)
		{
			if(adj[i][0] == adj[i][1] && adj[i][1] == adj[i][2])
			{
				possible = true;
				break;
			}
		}
		
		if(possible)
			printf("YES\n");
		else
			printf("NO\n");
	}
	
// 	char cha[] = "black";
// 	test(cha);
// 	char cha1[] = "blue";
// 	test(cha1);
// 	char cha2[] = "orange";
// 	test(cha2);
// 	char cha3[] = "red";
// 	test(cha3);
// 	char cha4[] = "green";
// 	test(cha4);
// 	char cha5[] = "yellow";
// 	test(cha5);
	return 0;
}