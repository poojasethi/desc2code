#include <iostream>
#include <queue>
#include <vector>
#define MaxN ((long)1e5 + 10)
using namespace std;
string s;
int d[MaxN], direction[2] = {-1, 1};
bool visited[MaxN], in[10];
queue <int> q;
vector <int> p[10];
int toInt(char c) { return c - '0'; }
void bfs() {
	int u, v;
	q.push(0); visited[0] = true;
	while (!q.empty()) {
		u = q.front(); q.pop();
		if (u == s.length() - 1) {
			cout << d[u];
			return;
		}
		for (int i = 0; i < 2; i++) {
			v = u + direction[i];
			if (0 <= v && v < s.length() && !visited[v]) {
				d[v] = d[u] + 1; visited[v] = true;
				q.push(v);
			}
		}
		if (!in[toInt(s[u])]) {
            in[toInt(s[u])] = true;
            for (unsigned i = 0; i < p[toInt(s[u])].size(); i++) {
                v = p[toInt(s[u])][i];
                if (!visited[v]) {
                    d[v] = d[u] + 1; visited[v] = true;
                    q.push(v);
                }
            }
		}
	}
}
int main() {
    ios::sync_with_stdio(0); cin.tie(); cout.tie();
	cin >> s;

	for (int i = 0; i < s.length(); i++) p[toInt(s[i])].push_back(i);
	bfs();
	return 0;
}
