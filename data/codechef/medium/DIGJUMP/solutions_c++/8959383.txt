/* Author : Anurag El Dorado */

/* Libraries */
#include <bits/stdc++.h>
#include <time.h>
#include <math.h>
using namespace std;

//MACRO DEFINITIONS
/* Data Types */
#define lld long long int
#define llu unsigned long long int

/* Input */
#define sd(var) scanf("%d", &var)
#define slld(var) scanf("%lld", &var)
#define sllu(var) scanf("%llu", &var)

/* Output */
#define print_arr(a, n) cout << #a << " : "; for (int I = 0; I < n; I++) { cout << a[I] << " "; } cout << endl;	//Array till n elements
#define print_v(v) 	cout << #v << " : "; for (long long int I = 0; I != v.size(); I++) { cout << v[I] << " "; } cout << endl;	//Vector
#define p2d(a, r, c) cout << #a << endl; for (int I = 0; I < r; I++) {	for (int J = 0; J < c; J++) {	cout << a[I][J] << " ";	} cout << endl;	} cout << endl;

/* File Input */
#define FILE_INPUT freopen("input.txt", "r", stdin);

/* File Output */
#define FILE_OUTPUT freopen("output.txt", "w", stdout);

//Single Variables
#define pr(x) cout << x << endl;
#define pdln(x) printf("%d\n", x);	//printf with new line
#define pd(x) printf("%d ", x);	//printf without new line

/* Output and Debugging */
#define deb(x) cout << #x << " = " << x << endl;
#define debb(x, y) cout << #x << " = " << x << "\t" << #y << " = " << y << endl;
#define debbb(x, y, z) cout << #x << " = " << x << "\t" << #y << " = " << y << "\t" << #z << " = " << z << endl;

/* MOD  value*/
#define MOD 1000000007

/* Timing */
#define TIMEIT cout << "TIME VARIABLE REINITIALISED\n"; clock_t start_time_ = clock();
#define TIMEUP cout << "Time: " << (clock() - start_time_) / (double)(CLOCKS_PER_SEC) << "s" << endl;

int vis[100005];
int d[100005];
queue<int> Q;
vector<int> a[10];

int main() {

	int i, j, k, l;
	int count, sum;
	int n, m, p, t;
	int maxi, mini;
	int tc;
	string s, r;
	int lens, lenr;
	
//	lld i, j, k;
//	lld count, sum;
//	lld n, m, p, t;
//	vector<lld> v;
//	lld maxi, mini;
//	lld tc;
//	string s, r;
//	lld lens, lenr;

//	FILE_INPUT;
	
	cin >> s;
	lens = s.length();

	for (i = 0; i < lens; i++) {
		a[s[i] - '0'].push_back(i);
		d[i] = 0;
	}

	d[0] = 0;
	vis[0] = 1;
	Q.push(0);

	while (!Q.empty()) {
		p = Q.front();
		Q.pop();

		if (p == lens - 1) {
			break;
		}

		vector<int> cv = a[s[p] - '0'];
		for (j = 0; j < cv.size(); ++j) {
			if (!vis[cv[j]]) {
				vis[cv[j]] = true;
				Q.push(cv[j]);
				d[cv[j]] = d[p] + 1;
			}
		}
		a[s[p] - '0'].clear();

		if (p - 1 >= 0 && !vis[p - 1]) {
			vis[p - 1] = true;
			Q.push(p - 1);
			d[p - 1] = d[p] + 1;
		}

		if (p + 1 < lens && !vis[p + 1]) {
			vis[p + 1] = true;
			Q.push(p + 1);
			d[p + 1] = d[p] + 1;
		}

	}

	cout << d[lens - 1] << endl;

	return 0;
}
