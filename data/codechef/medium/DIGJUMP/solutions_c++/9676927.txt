#include <bits/stdc++.h>
using namespace std;


vector<int> _index[10]; 
pair<int, int> tpair, tpair2;

int visited[100000];

int bfs(string s,int n)
{
	if(n == 1)
		return 0;
	//start from first letter position
	int temp = 0,i,len;
	queue<int> _queue;
	//add the first letter to a queue
	_queue.push(0);
	int distance = 0;
	visited[0] = 1;
	while(!_queue.empty())
	{
		len = _queue.size();
		distance++;
		while(len--)
		{
			temp = _queue.front();
			_queue.pop();
			for(int i = 0;i < _index[s[temp] - '0'].size();i+=1)
			{
				if(!visited[_index[s[temp] - '0'][i]])
				{
					visited[_index[s[temp] - '0'][i]] = 1;
					_queue.push(_index[s[temp] - '0'][i]);
					if(_index[s[temp] - '0'][i] == n-1)
						return distance;
				}
			}
			//int k = _index[s[temp] - '0'].size();
			//_index[s[temp] - '0'].erase(_index[s[temp] - '0'].begin(),_index[s[temp] - '0'].begin() + k);
			  _index[s[temp]-'0'].clear();
			if(temp > 0 && !visited[temp-1])
            {
                visited[temp - 1] = true;
                _queue.push(temp - 1);
                if(temp - 1 == n - 1)
                    return distance;
            }
            if(temp < n - 1 && !visited[temp + 1])
            {
                visited[temp + 1]=true;
                _queue.push(temp + 1);
                if(temp + 1 == n - 1)
                    return distance;
            }
		}
	}
}
	
int main()
{
	string s;
	cin >> s;
	int n = s.length();
	for(int i = 0;i < n;i++)
	{
		visited[i] = 0;
	}
	for(int i = 0;i < n;i++)
	{
		_index[s[i] - '0'].push_back(i);
		
	}
	cout << bfs(s,n) << "\n";
	
}