#include<iostream>
#include<vector>
#include<list>
#include<cstring>
#include<queue>
using namespace std;

pair<bool,int> visited[100001];
vector<int> graph[10];
string str;

int bfs(){
	int n=str.length();

	visited[0].first=true;
	visited[0].second=0;
	queue<int> Q;

	Q.push(0);

	while(!Q.empty()){
		int u=Q.front();
		if(u==n-1)
			break;
		Q.pop();
		int val=str[u]-'0';
		for(vector<int>::iterator it=graph[val].begin();it!=graph[val].end();it++){
			int v=*it;
			if(!visited[v].first){
				visited[v].first=true;
				visited[v].second=visited[u].second+1;
				Q.push(v);
			}
		}
		graph[val].clear();
		if(u-1>=0 && !visited[u-1].first){
			visited[u-1].first=true;
			visited[u-1].second=visited[u].second+1;
			Q.push(u-1);
		}

		if(u+1<n && !visited[u+1].first){
			visited[u+1].first=true;
			visited[u+1].second=visited[u].second+1;
			Q.push(u+1);
		}

			
	}

	return visited[n-1].second;

	
}

int main(){
	cin>>str;
	for(int i=0;str[i]!='\0';i++){
		int val=str[i]-'0';
		graph[val].push_back(i);
	}
	cout<<bfs()<<endl;
	
	return 0;
}
