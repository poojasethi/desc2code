#include<iostream>
#include<string>
#include<vector>
#include<queue>
#include<cstring>

using namespace std;

queue<int> Q;
vector<int> V[10];
bool isvisted[100005];
int d[100005];

int main(){
  
      
      string s;
      cin >> s;
      memset(isvisted, false, sizeof isvisted);
 
      int sz = s.size();

      for(int i=0;i<sz;i++){
	int val = s[i]-'0';
	V[val].push_back(i);
	
      }
      

      
      d[0]=0;
      Q.push(0);
      isvisted[0]=true;
      
      while(!Q.empty()){
	
	int idx = Q.front();
	if(idx==sz-1){break;}
	
	Q.pop();
	
	int val = s[idx]-'0';
	int size = V[val].size();
	
	for(int i=0;i<size;i++){
	  
	  int cidx = V[val][i];
	  if(isvisted[cidx] != true){
	    Q.push(cidx);
	    d[cidx] = d[idx]+1;
	    isvisted[cidx] = true;
	  }  
	}
	V[val].clear();
	
	if(idx-1 >= 0 && isvisted[idx-1]!=true){
	  d[idx-1] = d[idx]+1;
	  isvisted[idx-1] = true;
	  Q.push(idx-1);
	}
	
	if(idx+1 < sz && isvisted[idx+1]!=true){
	  
	  d[idx+1] = d[idx]+1;
	  isvisted[idx+1]  = true;
	    Q.push(idx+1);
	}
	
   }
   
   cout << d[sz-1] << "\n";
return 0; 
}