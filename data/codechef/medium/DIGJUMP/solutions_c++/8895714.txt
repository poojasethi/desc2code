
//code chef digit and jump
#include <vector>
#include <iostream>
#include <queue>
#include <string>
using namespace std;

int bfs(vector<int> digit[], int arr[],int n){
	int src=0,dst=n-1;
	queue<int> q;
	vector<bool> visited(n,false);
	vector<int> level(n,-1);
	q.push(src);
	level[src]=0;
	visited[src]=true;
	// bool found=false;
	while(!q.empty()){
		int node=q.front();
		q.pop();
		if(node==dst){return level[dst];}
		// else if(node+1==dst){level[node+1]=level[node]+1; break;}
		// else if(node-1==dst){parent[node-1]=node; break;}
		if(node>0 && !visited[node-1]){
			visited[node-1]=true;
			level[node-1]=level[node]+1;
			q.push(node-1);
		}

		if(node<n-1 && !visited[node+1]){
			visited[node+1]=true;
			level[node+1]=level[node]+1;
			q.push(node+1);
		}
		// int d=int(s[node]-'0');
		for(int i=0;i<digit[arr[node]].size();i++){
			int v=digit[arr[node]][i];
			// if(v==dst){parent[v]=node; found=true;break;}
			if(!visited[v]){
				visited[v]=true;
				level[v]=level[node]+1;
				q.push(v);
			}
		}
		digit[arr[node]].clear();
	}
	return -1;
	// int level=0, node=dst;
	// while(node!=src){ 
	// 	node=parent[node];
	// 	level++;
	// }
	// return level;
	
}

int main(){
	string s;
	cin>>s; 
	int arr[s.length()];
	vector<int> digit[10];
	for(int i=0;i<s.length();i++){
		arr[i]=int(s[i]-'0');
		digit[arr[i]].push_back(i);
	}
	cout<<bfs(digit,arr, s.length())<<endl;
}