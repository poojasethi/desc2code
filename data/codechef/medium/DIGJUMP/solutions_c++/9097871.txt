#include <bits/stdc++.h>

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef long long ll;

#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,it) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++) 
#define present(c,val) ((c).find(val) != (c).end()) 
#define cpresent(c,val) (find(all(c),val) != (c).end()) 
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define FOR(i, x, y) for(int i= (x); i<= (y); ++i)
#define FORR(i, x, y) for(int i= (y); i>= (x); --i)

#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
#define dmax numeric_limits<double>::max()
#define dmin numeric_limits<double>::min()
#define fmax numeric_limits<float>::max()
#define fmin numeric_limits<float>::min()
#define sqr(x) (x)*(x)

bool vis[100005]={false};
bool dig[10]={false};
int main() {
	string seq;cin>>seq;
	vector<int> adj[10];
	rep(i,seq.size()) {
		adj[seq[i]-'0'].pb(i);
	}
	queue<int> q;
	int dist[100005];
	q.push(0);
	vis[0]=true;
	dist[0]=0;
	while(!vis[seq.size()-1]) {
		int x=q.front();q.pop();
		if(!dig[seq[x]-'0']) { 
		tr(adj[seq[x]-'0'],it) {
			if(!vis[*it]) {
				q.push(*it);
				vis[*it]=true;
				dist[*it]=dist[x]+1;
			}
		} dig[seq[x]-'0']=true;}
		if(x<seq.size()-1 && !vis[x+1]) {
				q.push(x+1);
				vis[x+1]=true;
				dist[x+1]=dist[x]+1;
		}
		if(x>0 && !vis[x-1]) {
				q.push(x-1);
				vis[x-1]=true;
				dist[x-1]=dist[x]+1;
		}
	}
	cout<<dist[seq.size()-1]<<endl;
	return 0;
}