#include<bits/stdc++.h>
using namespace std;

vector<pair<float,int> > graph[200002];
float _distance[200002];
pair<float,int> tpair,tpair1,tpair2,tpair3;
int main(){
	
	for (int i=0;i<200002;i++) _distance[i]=FLT_MAX;
	int arr[100000];
	char inp[100001];
	scanf("%s",inp);
	int i;
	for (i=0; inp[i]!= '\0';i++)
	arr[i]= inp[i]-48;
	
	int n=i;
	
	//for(int j=0;j<n;j++) printf ("%d",arr[j]);
	
	for (int k=0;k<n;k++){
		if (k-1 >=0) graph[k].push_back(make_pair(1,k-1));
		if (k+1<=n) graph[k].push_back(make_pair(1,k+1));
		graph[k].push_back(make_pair(0.5,arr[k]+n));
		graph[arr[k]+n].push_back(make_pair(0.5,k));
		
	
	
	}
		
		int currentnode; float currentd;	
		priority_queue<pair< float,  int>, vector<pair <float,int> >, greater<pair<float,int> > > q;
        tpair.first=0;
        tpair.second=0;
		_distance[0]=0;
        q.push(tpair);
        while(!q.empty()){
            tpair3=q.top();
            q.pop();
            
            currentnode=tpair3.second;
            currentd=_distance[currentnode];
            //cout << currentnode << ' ' << _distance[currentnode]<< endl;
            for (int k=0;k<graph[currentnode].size();k++){
                float nextd=(currentd+graph[currentnode][k].first);
                if (nextd<_distance[graph[currentnode][k].second]){
                    _distance[graph[currentnode][k].second]=nextd;
                    q.push(make_pair(nextd,graph[currentnode][k].second));
                    
                    
                }
                
                
            }  
            
          
            
            
        }
		
		printf ("%d", (int)_distance[n-1]);
	return 0;
	}

