from heapq import *

S = raw_input().strip()
N = len(S)
graph = [[] for i in range(N + 12)]

for i in range(N):
    if i == 0:
        graph[i].append((1, i + 1))
    elif i == N - 1:
        graph[i].append((1, i - 1))
    else:
        graph[i].append((1, i + 1))
        graph[i].append((1, i - 1))

    # make dummy connections
    dummy_node = N + int(S[i])
    graph[i].append((0.5, dummy_node))
    graph[dummy_node].append((0.5, i))

def dijkstra(s):
    q = [(0, s)]
    dist[s] = 0

    while q:
        d, u = heappop(q)
        if d <= dist[u]:
            for w, v in graph[u]:
                if dist[v] > dist[u] + w:
                    dist[v] = dist[u] + w
                    heappush(q, (dist[v], v))

inf = 1 << 64 - 1
dist = [inf for _ in range(N + 12)]
dijkstra(0)
print int(dist[N - 1])
