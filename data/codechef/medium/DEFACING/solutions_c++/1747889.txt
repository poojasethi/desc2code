#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cctype>
#include <vector>
#include <set>
#include <bitset>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <complex>
#include <algorithm>
using namespace std;

const int MAX_INPUT = 5000 * 1024;
char buff[MAX_INPUT];
int bp;

int lcd[] = {63, 6, 91, 79, 102, 109, 125, 7, 127, 111, 0};

//0111111 -> 0
//0000110 -> 1
//1011011 -> 2
//1001111 -> 3
//1100110 -> 4
//1101101 -> 5
//1111101 -> 6
//0000111 -> 7
//1111111 -> 8
//1101111 -> 9

int A[10];
int B[10];
int sa, sb, S, M;
int get_max(int pos, int na, int nb)
{
  if (pos == sb) {
    int n = 0;
    for (int i = 0; i < sa; i++)
      n = n * 10 + A[i];
    
    return (n <= M) ? n : -1;
  }

  if (na > nb) return -1;
  int maxx = 0, l;
  for (int d = 9; d >= 0; d--) {
    l = lcd[A[pos]];
    if (lcd[d] == (lcd[d] | l)) {
      int tmp = A[pos];
      A[pos] = d;
      if ((maxx = get_max(pos + 1, na * 10 + d, nb * 10 + B[pos])) != -1) {
        A[pos] = tmp;
        return maxx;
      }
      A[pos] = tmp;
    }
  }

  return -1;
}


inline void next_int(int &n)
{
  while (!isdigit(buff[bp])) bp++;
  n = 0;
  while (isdigit(buff[bp])) {
    n = n * 10 + buff[bp++] - '0';
  }
}

int main(int argc, char *argv[])
{
  int t, i, j, diff, ans, a, b, tmp;

  fread(buff, 1, MAX_INPUT, stdin);


  //scanf("%d", &t);
  next_int(t);
  
  while (t--) {
    next_int(S);
    next_int(M);
    //scanf("%d %d", &S, &M);

    a = S;
    b = M;
    sb = 0;
    while (b) {
      B[sb++] = b%10;
      b /= 10;
    }

    if (sb == 0)
      B[sb++] = 0;

    reverse(B, B + sb);

    sa = 0;
    while (a) {
      A[sa++] = a%10;
      a /= 10;
    }
    
    if (sa == 0)
      A[sa++] = 0;

    diff = sb - sa;
    while (sa < sb)
      A[sa++] = 10;

    reverse(A, A + sa);

    tmp = get_max(0, 0, 0);
    ans = max(S, tmp);
    for (i = 0; i < diff; i++) {
      for (j = 0; j + 1 < sa; j++)
        A[j] = A[j+1];
      A[j] = -1;
      tmp = get_max(0, 0, 0);
      ans = max(tmp, ans);
    }
    
    printf("%d\n", ans);
  }

  return EXIT_SUCCESS;
}

