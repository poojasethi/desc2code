#include <cstdio>
#include <cstring>

#include <algorithm>

using namespace std;

int mlen, slen;
int valid[10][10];

int solve(char *M, char *S, int k)
{
    int pref_less = -1;
    int pref_eq = 0;
    int next_less, next_eq;
    int res = 0;

    for (int i = 0; i < mlen; ++i) {
        next_less = next_eq = -1;

        for (int d = 0; d < 10; ++d) {
            if (i >= k && i <= k + slen - 1 && !valid[S[i - k]][d])
                continue;

            if (next_less < pref_less * 10 + d)
                next_less = pref_less * 10 + d;
            if (d < M[i] && next_less < pref_eq * 10 + d)
                next_less = pref_eq * 10 + d;
            if (d == M[i] && next_eq < pref_eq * 10 + d)
                next_eq = pref_eq * 10 + d;
        }
        pref_eq = next_eq;
        pref_less = next_less;

        if (i - k >= slen - 1 && res < pref_eq) res = pref_eq;
        if (i - k >= slen - 1 && res < pref_less) res = pref_less;
    }
    
    return res;
}

int main()
{
    for (int i = 0; i < 10; ++i)
        valid[i][i] = 1;
    valid[0][8] = 1;
    valid[1][0] = valid[1][3] = valid[1][4] = valid[1][7] 
                = valid[1][8] = valid[1][9] = 1;
    valid[2][8] = 1;
    valid[3][8] = valid[3][9] = 1;
    valid[4][8] = valid[4][9] = 1;
    valid[5][6] = valid[5][8] = valid[5][9] = 1;
    valid[6][8] = 1;
    valid[7][0] = valid[7][3] = valid[7][8] = valid[7][9] = 1;
    valid[9][8] = 1;

    char Mstr[20], Sstr[20];
    int m, s;

    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d %d", &s, &m);
        sprintf(Mstr, "%d", m);
        sprintf(Sstr, "%d", s);
        slen = strlen(Sstr);
        mlen = strlen(Mstr);
        for (int i = 0; i < slen; ++i) 
            Sstr[i] -= '0';
        for (int i = 0; i < mlen; ++i) 
            Mstr[i] -= '0';

        int res = s;
        for (int k = 0; k < mlen - slen + 1; ++k) {
            res = max(res, solve(Mstr, Sstr, k));
        }
        printf("%d\n", res);
    }

    return 0;
}
