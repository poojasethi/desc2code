
#include<bits/stdc++.h>
using namespace std;

#define CLR(a,x) memset(a,x,sizeof(a))
#define PB push_back
#define INF 1000000000
#define MOD 1000000007
#define MP make_pair
#define tr(container , it) for(typeof(container.begin()) it=container.begin() ; it!=container.end() ; it++)
#define FOR(i,a,b) for(i=a;i<b;i++)
#define REP(i,a) FOR(i,0,a)
#define LLD long long
#define VI vector < int >
#define PII pair < int , int >
#define MAX 1000000000

//_____starts____here_______

char M[20],S[20];
bool poss[20][20];
int l1, l2;
int solve(int idx) {
	int l = -1, e = 0;
	for(int i=0;i<l1;i++)
	{
		if(l==-1 && e==-1)
			return -1;
		int newl = -1;
		for(int d = 9; d>=0; d--) {
			if(i>=idx && i<=idx+l2-1 && !poss[S[i-idx]][d])
				continue;
			if(i==0)
			{
				if(idx>0)
					newl = max(newl, M[i]-1);
				else
					if(d<M[i])
					newl = max(newl, d);
				continue;
			}
			if(d>=M[i])
			{
				if(l!=-1) newl = max(newl, l*10+d);
			}
			else if(max(l, e) != -1)
			{
				newl = max(newl, max(l,e)*10 + d);
			}
		}
		l = newl;

		if((i>=idx && i<=idx+l2-1 && !poss[S[i-idx]][M[i]]) || e==-1)
			e = -1;
		else
			e = e*10 + M[i];
	}
	return max(l,e);
}
void gen()
{
	memset(poss,false,sizeof poss);
	poss[0][0] = poss[0][8] = true;
	poss[1][0] = poss[1][1] = poss[1][3] = poss[1][4] = poss[1][7] = poss[1][8] = poss[1][9] = true;
	poss[2][2] = poss[2][8] = true;
	poss[3][3] = poss[3][8] = poss[3][9] = true;
	poss[4][4] = poss[4][8] = poss[4][9] = true;
	poss[5][5] = poss[5][6] = poss[5][8] = poss[5][9] = true;
	poss[6][6] = poss[6][8] = true;
	poss[7][0] = poss[7][3] = poss[7][7] = poss[7][8] = poss[7][9] = true;
	poss[8][8] = true;
	poss[9][9] = poss[9][8] = true;
}
int main()
{
	gen();
	int T;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%s%s",S,M);
		l1 = strlen(M);
		l2 = strlen(S);
		for(int i=0;i<l2;i++) S[i] = S[i]-'0';
		for(int i=0;i<l1;i++) M[i] = M[i]-'0';
		int ans = 0;
		for(int idx = 0; idx<=l1-l2; idx++)
			ans = max(ans, solve(idx));
		int tmp = 0;
		for(int i=0;i<l2;i++) tmp = tmp*10 + S[i];
		ans = max(tmp, ans);
		printf("%d\n",ans);
	}

    return 0;
}
