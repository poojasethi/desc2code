#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
 
using namespace std;
 
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
typedef vector<string> vs;
 
// Basic macros
 
#define st first
#define se second
#define all(x) (x).begin(), (x).end()
#define ini(a, v) memset(a, v, sizeof(a))
#define re(i,s,n) for(int i=s;i<(n);++i)
#define fr(i,n) re(i,0,n)
#define tr(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();++i)
#define pu push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define inf 2000000009
 
// I/O shortcuts
#define ssi(x) scanf("%d", &x)
#define ssa(n, x) {ssi(n); fr(i, n) ssi(x[i]);}
 
char can[][11] = {
"1000000010",
"1101100111",
"0010000010",
"0001000011",
"0000100011",
"0000011011",
"0000001010",
"1001000111",
"0000000010",
"0000000011",
"1111111111"};
int valid[11][11];
char m[10], s[10];
 
int n, ns;
 
int main() {
fr(i, 11) fr(j, 10) valid[i][j] = can[i][j] - '0';
int t;
ssi(t);
while(t--) {
scanf("%s %s", s, m);
n = strlen(m); ns = strlen(s);
int eq, le, ans;
ans = -1;
fr(start, n) if(start + ns <= n) {
le = -1;
eq = 0;
 
fr(i, n) {
 
if(le != -1) {
if(i < start || i >= start + ns) {
le = le * 10 + 9;
} else {
for(int d = 9; d >= 0; --d) if(valid[s[i - start] - '0'][d]) {
le = le * 10 + d;
break;
}
}
}
 
if(eq != -1) {
if(i < start || i >= start + ns) {
if(m[i] != '0') le = eq * 10 + (m[i] - '0' - 1);
eq = eq * 10 + (m[i] - '0');
} else {
for(int d = m[i] - '0' -1; d >= 0; --d) if(valid[s[i - start] - '0'][d]) {
le = eq * 10 + d;
break;
}
if(valid[s[i - start] - '0'][m[i] - '0']) eq = eq * 10 + (m[i] - '0');
else eq = -1;
}
}
//cerr << i << " " << le << " " << eq << endl;
}
 
ans = max(ans, max(eq, le));
}
printf("%d\n", ans);
}
 
return 0;
}