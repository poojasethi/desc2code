#include<iostream>
#include<vector>
#include<math.h>
#include<stdio.h>
using namespace std;

vector< vector<int> > V;  
vector<int> Mvec;
vector<int> Svec;

int solve ( int pos, int digS ){

  int prevnum = 0, postnum = 0;
  int lessthanprevnum = 0;
  int k;

  for(int j=Svec.size()-1; j>=0; j--, pos-- ){
      
    k = 0;
    while( k<V[Svec[j]].size() && V[Svec[j]][k]<=Mvec[pos])
      k++;

    if( k == 0 ){
       	
      for(int l=j; l>=0; l-- )
	postnum = postnum*10 + V[Svec[l]][V[Svec[l]].size()-1];
       
      return  (lessthanprevnum)*(int)pow(10,j+1) + postnum;

   
    }

    if( V[Svec[j]][k-1] < Mvec[pos] ){

      postnum = postnum*10 + V[Svec[j]][k-1];
      for(int l=j-1; l>=0; l-- )
	postnum = postnum*10 + V[Svec[l]][V[Svec[l]].size()-1];
 
      return (prevnum)*(int)pow(10,j+1) + postnum;

    }
      
    if( k-2>=0 )
      lessthanprevnum = prevnum*10 + V[Svec[j]][k-2];
    else
      lessthanprevnum = lessthanprevnum*10 + V[Svec[j]][V[Svec[j]].size()-1];

    prevnum = prevnum*10 + Mvec[pos];

  }

  return  prevnum;
  
}





int main()
{


  int T, M, S, tempS, tempM, digS, digM, prev;
  int post, exp, expdigs, num, max, ans, cmpM;  

  V.push_back(vector<int>());
  V[0].push_back(0);
  V[0].push_back(8);
  V.push_back(vector<int>());
  V[1].push_back(0);
  V[1].push_back(1);
  V[1].push_back(3);
  V[1].push_back(4);
  V[1].push_back(7);
  V[1].push_back(8);
  V[1].push_back(9);
  V.push_back(vector<int>());
  V[2].push_back(2);
  V[2].push_back(8);
  V.push_back(vector<int>());
  V[3].push_back(3);
  V[3].push_back(8);
  V[3].push_back(9);
  V.push_back(vector<int>());
  V[4].push_back(4);
  V[4].push_back(8);
  V[4].push_back(9);
  V.push_back(vector<int>());
  V[5].push_back(5);
  V[5].push_back(6);
  V[5].push_back(8);
  V[5].push_back(9);
  V.push_back(vector<int>());
  V[6].push_back(6);
  V[6].push_back(8);
  V.push_back(vector<int>());
  V[7].push_back(0);
  V[7].push_back(3);
  V[7].push_back(7);
  V[7].push_back(8);
  V[7].push_back(9);
  V.push_back(vector<int>());
  V[8].push_back(8);
  V.push_back(vector<int>());
  V[9].push_back(8);
  V[9].push_back(9);


  cin>>T;    
		       
  for( int i=0;i<T;i++){
    
    cin>>S;
    cin>>M;
    Mvec.clear();
    Svec.clear();
    tempS = S;
    tempM = M;
    digS = 0;
    digM = 0;

    while( tempS>0 ){
      Svec.push_back( tempS%10 );
      tempS/=10;
      digS++;
    }

    while( tempM>0 ){
      Mvec.push_back( tempM%10 );
      tempM/=10;
      digM++;
    }

    if( M==0 ){
      Mvec.push_back( 0 );
      digM++;
    }
    
    if( S==0 ){
      Svec.push_back( 0 );
      digS++;
    }

    prev = M/(int)pow( 10, digS ) ;
    post = 0;
    exp = 1;
    expdigs = (int)pow(10,digS);
    max = 0;
    tempM = M;
    

    for(int j=digS-1; j<=digM-1; j++ ){
     
      ans = solve( j, digS );
      cmpM = tempM%expdigs;
      if( ans == cmpM ){
	max = M;
	break;
      }

      if( ans < cmpM ){
	num = ( prev * expdigs + ans)*exp + post;
      }

      if( ans > cmpM ){
	num = ((prev-1) * expdigs + ans)*exp + post;
      }

      exp*=10;
      post = post*10 + 9;
      prev = prev/10;
      tempM/=10;
      
      //      cout<<num<<endl;
      if( max < num && max <= M  )
	max = num;
    }
    
    cout<<max<<endl;

  }
  return 0;
}

    
    
    
    
    
    
      
  
    
