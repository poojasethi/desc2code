#include <cstdio>
#include <cstring>
const int maxL = 8;
int max_digit[10];
int mark_digits[10][10];
int max_smaller_digit[10][10];
void precalc() {
int cover[10][10]={
{0, 8, -1},
{0, 1, 3, 4, 7, 8, 9, -1},
{2, 8, -1},
{3, 8, 9, -1},
{4, 8, 9, -1},
{5, 6, 8, 9, -1},
{6, 8, -1},
{0, 3, 7, 8, 9,-1},
{8, -1},
{8, 9, -1}
};
for (int d1 = 0; d1 < 10; ++d1) {
for (int i = 0; ; ++i) {
int d2 = cover[d1][i];
if (d2 < 0) {
break;
}
mark_digits[d1][d2] = 1;
}
max_digit[d1] = mark_digits[d1][9] ? 9 : 8;
max_smaller_digit[d1][0] = -1;
for (int d2 = 1; d2 < 10; ++d2) {
if (mark_digits[d1][d2-1]) {
max_smaller_digit[d1][d2] = d2-1;
} else {
max_smaller_digit[d1][d2] = max_smaller_digit[d1][d2-1];
}
}
}
}
 
int solve(char *a, char *b) {
int k = strlen(a);
int n = strlen(b);
int ans = 0;
for (int p = 0; p <= n-k; ++p) {
int max_dig[maxL];
bool can_eq[maxL];
int max_smaller_dig[maxL];
for (int i = 0; i < n; ++i) {
int db = b[i] - '0';
if (0 <= i-p && i-p < k) {
int da = a[i-p] - '0';
max_dig[i] = max_digit[da];
can_eq[i] = mark_digits[da][db];
max_smaller_dig[i] = max_smaller_digit[da][db];
} else {
max_dig[i] = 9;
can_eq[i] = true;
max_smaller_dig[i] = db-1;
}
}
int j = -1;
for (int i = 0; i <= n && (i == 0 || can_eq[i-1]); ++i) {
if (i == n || max_smaller_dig[i] >= 0) {
j = i;
}
}
if (j < 0) {
continue;
}
int cur = 0;
for (int i = 0; i < j; ++i) {
cur = 10 * cur + (b[i] - '0');
}
if (j < n) {
cur = 10 * cur + max_smaller_dig[j];
for (int i = j + 1; i < n; ++i) {
cur = 10 * cur + max_dig[i];
}
}
if (ans < cur) {
ans = cur;
}
}
return ans;
}
int main() {
precalc();
int T;
scanf("%d", &T);
for (int t = 0; t < T; ++t) {
char S[maxL + 1], M[maxL + 1];
scanf("%s%s", S, M);
int ans = solve(S, M);
printf("%d\n", ans);
}
return 0;
}