/*
 * 2013-01-21  Martin  <Martin@Martin-desktop>

 * 
 */
#include <cstdio>
#include <cstring>
#include <cctype>
#include <climits>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstdarg>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <exception>
#include <stdexcept>
#include <memory>
#include <locale>
#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#include <iterator>
#include <functional>
#include <string>
#include <complex>
#include <valarray>

using namespace std;

template <class T> inline T checkmin(T &a, T b)
{
	return (a < b) ? a : a = b;
}

template <class T> inline T checkmax(T &a, T b)
{
	return (a > b) ? a : a = b;
}

template <class T> T GCD(T a, T b)
{
	if (a < 0)
		return GCD(- a, b);
	if (b < 0)
		return GCD(a, - b);
	return (a == 0) ? b : GCD(b % a, a);
}

template <class T> T LCM(T a, T b)
{
	if (a < 0)
		return LCM(- a, b);
	if (b < 0)
		return LCM(a, - b);
	return (a == 0 || b == 0) ? 0 : a / GCD(a, b) * b;
}

template <class T> inline T sqr(T X)
{
	return X * X;
}

#define tr(i, x) for (typeof(x.begin()) i = x.begin(); i != x.end(); ++ i)
#define rep(i, n) for (int i = 0; i < n; ++ i)
#define pii pair <int, int>
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define ll long long
#define cmplxd complex <double>
#define pi 3.14159265358979323846264338327950288

namespace Poor
{
	const int MaxiN = 222222;
	
	int Trans[10][10];
	
	int Solve(int S, int M)
	{
		if (S == 0 && M == 0)
			return 0;
		if (S == M)
			return M;
		int Base = 1, Dig = 0;
		for (; M / Base > 0; ++ Dig, Base *= 10);
		if (S / Base > 0)
			return - 1;
		int Result = 0;
		int Min = 0;
		for (int t = Base / 10; t > 0; t /= 10)
		{
			int v = (S / t) % 10;
			int u = v;
			rep (k, 10)
				if (Trans[v][k])
					checkmin(u, k);
			if (S / t == 0 && t > 1)
				u = 0;
			Min += u * t;
		}
		if (Min > M)
			return - 1;
		while (Dig > 0)
		{
			Base /= 10;
			int v = (S / Base) % 10;
			int u = - 1;
			rep (k, 10)
				if (Trans[v][k] || (S / Base == 0 && Base > 1))
				{
					if (Result + k * Base + (Min % Base) <= M)
						u = k;
				}
			//~ if (u == - 1)
				//~ cerr << "oops" << endl;
			Result += u * Base;
			-- Dig;
		}
		if (S <= M)
		{
			int Tmp = Solve(S, M / 10) * 10;
			if (Tmp > 0)
			{
				rep (k, 9)
					if (Tmp + 1 <= M)
						++ Tmp;
				return max(Result, Tmp);
			}
		}
		return Result;
	}
	
	void Run()
	{
		rep (i, 10)
			rep (j, 10)
				Trans[i][j] = (i == j);
		Trans[0][8] = 1;
		Trans[1][0] = 1;
		Trans[1][3] = 1;
		Trans[1][4] = 1;
		Trans[1][7] = 1;
		Trans[1][8] = 1;
		Trans[1][9] = 1;
		Trans[2][8] = 1;
		Trans[3][8] = 1;
		Trans[3][9] = 1;
		Trans[4][8] = 1;
		Trans[4][9] = 1;
		Trans[5][6] = 1;
		Trans[5][8] = 1;
		Trans[5][9] = 1;
		Trans[6][8] = 1;
		Trans[7][0] = 1;
		Trans[7][3] = 1;
		Trans[7][8] = 1;
		Trans[7][9] = 1;
		Trans[9][8] = 1;
		
		int TestCase = 0;
		scanf("%d", &TestCase);
		rep (i, TestCase)
		{
			int S, M;
			scanf("%d%d", &S, &M);
			printf("%d\n", Solve(S, M));
		}
		//~ rep (t, 1000000)
		//~ {
			//~ int a = rand() % 201301 + 1;
			//~ int b = rand() % 201301 + 1;
			//~ if (a <= b)
			//~ {
				//~ int c = Solve(a, b);
				//~ if (c > b)
					//~ cerr << " " << a << " " << b << " " << c << endl;
			//~ }
		//~ }
	}
}

int main()
{
	//~ FILE *fp = fopen("DEFACING.in", "w");
	//~ fprintf(fp, "%d\n", 1000000);
	//~ rep (t, 1000000)
	//~ {
		//~ for (; ; )
		//~ {
			//~ int a = rand() % 201301 + 1;
			//~ int b = rand() % 201301 + 1;
			//~ if (a <= b)
			//~ {
				//~ fprintf(fp, "%d %d\n", a, b);
				//~ break;
			//~ }
		//~ }
	//~ }
	//~ fclose(fp);
	#ifndef ONLINE_JUDGE
	freopen("DEFACING.in", "r", stdin);
	freopen("DEFACING.out", "w", stdout);
	#endif
	Poor::Run();
	return 0;
}
