import heapq

from math import ceil

t = int(raw_input())

def test(L):
    fault = True
    for x in range(len(L) - 1):
        if L[x] != L[x + 1]: fault = False
    return fault
    
##
##def processor(L):
##    S = sum(L)
##    if S % len(L) != 0: print -1
##    elif test(L): print 0
##    else:
##        acc = 0
##        small = []
##        large = []
##        for x in L:
##            heapq.heappush(small, x)
##            heapq.heappush(large, int(-1 * x))
##        while True:
##            s = heapq.heappop(small)
##            l = int(-1 * heapq.heappop(large))
##            
##            if s == l: break
##            else:
##                val = ceil((l - s)/ 2.0)
##                s_mod = s + val
##                l_mod = l - val
##                #go in small and find l. replace that with l_mod. heapify
##                for x in range(len(small)):
##                    if small[x] == l:
##                        small[x] = l_mod
##                        break
##                heapq.heapify(small)
##                heapq.heappush(small, s_mod)
##                #go in large and find s. replace that with s_mod. heapify
##                for x in range(len(large)):
##                    if int(-1 * large[x]) == s:
##                        large[x] = int( -1 * s_mod)
##                        break
##                heapq.heapify(large)
##                heapq.heappush(large, int(-1 * l_mod))
##                acc += 1
##        print acc
##

            
                
def processor(L):
    S = sum(L)
    if S % len(L) != 0: print -1
    elif test(L): print 0
    else:
        acc = 0
        small = []
        large = []
        needs = S / len(L)
        for x in L:
            if x < needs: heapq.heappush(small, x)
            else: heapq.heappush(large, int(-1 * x))
        fault = False
        while True:
            if len(small) == 0 and len(large) != 0:
                l = int(-1 * heapq.heappop(large))
                if l == needs: break
                else:
                    fault = True
                    break
            if len(small) != 0 and len(large) == 0:
                s = heapq.heappop(small)
                if s == needs: break
                else:
                    fault = True
                    break
            s = heapq.heappop(small)
            l = int(-1 * heapq.heappop(large))
            if s == l: break
            else:
                val = ceil((l - s)/2.0)
                l_mod = l - val
                s_mod = s + val
                if l_mod > needs: heapq.heappush(large, int(-1 * l_mod))
                else: heapq.heappush(small, l_mod)
                if s_mod > needs: heapq.heappush(large, int(-1 * s_mod))
                else: heapq.heappush(small, s_mod)
                acc += 1
        if fault: print -1
        else: print acc
            

for i in range(t):
    raw_input()
    processor([int(x) for x in raw_input().split()])
        
        
