#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sstream>
#include <math.h>
#include <limits.h>
#include <time.h>
#include <vector>
#include <utility>
#include <list>
#include <stack>
#include <queue>
#include <map>
#include <set>
using namespace std;

#define LIM_I INT_MAX
#define LIM_UL ULLONG_MAX
#define MAX 11

//iterations
#define repi(i,a,b) for(int i=a;i<=b;++i)
#define repd(i,a,b) for(int i=a;i>=b;--i)

inline bool exists(string& text,string& pattern){
	int n = text.length();
	int m = pattern.length();
	if(n<m)
		return false;
	int i=0;
	int j=0;
	while(i<n && j<m && text[i]==pattern[j]){
		++i;++j;
	}
	if(j==m)
		return true;
	return false;
}
int main(){
	vector<pair<string,int> > recipe;
	int t;
	cin>>t;
	int n=t;
	while(t--){
		string s;
		int p;
		cin>>s>>p;
		recipe.push_back(make_pair(s,p));
	}
	int m;
	cin>>m;
	while(m--){
		string tab;
		cin>>tab;
		int index = -1;
		int priority = -LIM_I;
		repi(i,0,n-1){
			bool match = exists(recipe[i].first,tab);
			//cout<<"matching "<<recipe[i].first<<" with "<<tab<<" result: "<<match<<endl;
			if(match && recipe[i].second>priority){
				index=i;
				priority=recipe[i].second;
			}
		}
		if(index==-1)
			cout<<"NO\n";
		else
			cout<<recipe[index].first<<"\n";
	}
	return 0;
}