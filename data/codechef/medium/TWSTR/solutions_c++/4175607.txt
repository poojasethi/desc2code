#include <cstdio>
#include <iostream>
#include <string>
using namespace std;
#define MAX 27

typedef struct node Node;
struct node
{
	int val;
	long long int pr;
	int index;
	Node *children[27];
	
	
};
struct trie
{
	int count;
	Node *root;
	void initialize()
	{
		
		root = getNode(-1,-1);
		count = 0;
	}
	Node * getNode(long long int priority,int ind)
	{
		node *n  = new Node;
		n->val = 0;
		n->pr  = priority;
		n->index  = ind; 
		int i;
		for(i=0;i<MAX;i++)
		   n->children[i] = NULL;
		return n;
		   
	}
	void insert(string str,long long int priority,int ind)
	{
	     if(str.empty())
		  return;
		Node *crawl = root;int i,len = str.length(),flag=0;
		for(i=0;i<str.length();i++)
		{
			int idx = (str[i]=='-'?26:str[i]-'a');
			 
			if(!crawl->children[idx])
			{
				crawl->children[idx]= getNode(priority,ind);
			}
			crawl = crawl->children[idx];
			if(crawl->pr<priority)
			{
			crawl->pr =priority;crawl->index=ind;
		    }
		}
		if(crawl->val==0)
		{
		    count++;crawl->val = count;
	    }
	
   }
	int search(string str)
	{
	      if(str.empty())
		     return -1;
		  int len = str.length(),i;
		  Node *crawl = root;
		  for(i=0;i<str.length();i++)
		  {
		  	   int idx = (str[i]=='-'?26:str[i]-'a');
				 if(!(crawl->children[idx]))
				 {
				     
		  	         return -1;
		  	     }
		  	   crawl = crawl->children[idx];   
		  }
		  return(crawl->index);	 	
	}
};
int main(void)
{
	int n,i;
	scanf("%d",&n);
	
	struct trie T ;
	T.root = NULL;
	T.initialize();
	string str1[n];
	for(i=0;i<n;i++)
	{
		string str;long long int pr;
		
		cin>>str;
		str1[i] = str;
		scanf("%lld",&pr);
		T.insert(str,pr,i);
	}
	int q;
	scanf("%d",&q);
	
	for(i=0;i<q;i++)
	{
		string str;
		cin>>str;
		int ind = T.search(str);
		if(ind==-1)
		  printf("NO\n");
		else
		  cout<<str1[ind]<<endl ;
	}
	
	
	
	
	
	return 0;
}