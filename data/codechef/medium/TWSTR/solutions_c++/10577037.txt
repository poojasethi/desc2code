#include<iostream>
#include<vector>
#define pb push_back
#define idx(x) (x=='-'?26:(x-'a'))
#define maxn 1001
#define inf 2000000000
#define rep(i, n) for(int i=0;i<n;i++)
using namespace std;

int N, Q;
vector<string> s;

struct trie{
    int pos, pri;
    trie * ch[30];
    trie(int po, int pr){pos=po; pri=pr; rep(i,30)ch[i]=NULL;};
    trie(){rep(i,30)ch[i]=NULL;};
};

int c_i, c_p;
string str;

trie* insert(trie* node, size_t p){
    if(p==str.size())
        return NULL;
    int index = idx(str[p]);
    if(!node->ch[index])
        node->ch[index] = new trie(c_i, c_p);
    else if(node->ch[index]->pri < c_p){
        node->ch[index]->pos = c_i;
        node->ch[index]->pri = c_p;
    }
    node->ch[index]=insert(node->ch[index], p+1);
    return node;
}

char _s[maxn];

int query(trie* root, size_t p=0){
    int le = str.size();
    if(p>le || !root)
        return -1;
    if(p==le){
        return root->pos;
    }
    int index = idx(str[p]);
    return query(root->ch[index], p+1);
}

int main()
{
    scanf("%d", &N);
    trie* root = new trie(-1, -1);
    for(c_i = 0; c_i<N; c_i++){
        scanf("%s%d", _s, &c_p);
        str = _s;
        s.pb(str);
        insert(root, 0);
    }
    scanf("%d", &Q);
    while(Q--){
        scanf("%s", _s);
        str = _s;
        int ret = query(root);
        puts(ret==-1?"NO":s[ret].c_str());
    }
    return 0;
}



