#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define getmax(a,b) ((a)>(b)?(a):(b))
struct trie{
    long v;
    bool b;
    struct trie *edge[27];
}*root;
typedef struct trie node;

node* init(){
    node *p;
    p=(node *)malloc(sizeof(node));
    p->v=0;
    p->b=false;
    for(int i=0;i<27;i++)
        p->edge[i]='\0';
    return p;
}

void _add(char s[],long a){
    int l=strlen(s),k;
    node *p=root;
    for(int i=0;i<l;i++){
        if(s[i]=='-')
            k=26;
        else k=s[i]-97;
        if(p->edge[k]=='\0'){
            p->edge[k]=init();
        }
        p=p->edge[k];
        p->v=getmax(p->v,a);
    }
    p->b=true;
}

void _trvs(node *p,long a){
    int x=-1;
    for(int i=0;i<27;i++){
        if(p->edge[i] && p->edge[i]->v==a){
            x=i;
            if(i==26)
                printf("-");
            else
            printf("%c",i+97);
            break;
        }
    }
    if(x==-1)
        return;
    else _trvs(p->edge[x],a);
}

void _find(char s[]){
    int l=strlen(s),k;
    node *p=root;
    for(int i=0;i<l;i++){
        if(s[i]=='-')
            k=26;
        else k=s[i]-97;
        if(p->edge[k]=='\0'){
            printf("NO");
            return;
        }
        else
        p=p->edge[k];
    }
    printf("%s",s);
    long a=p->v;
    _trvs(p,a);
}

int main(){
    int n,q;
    long a;
    char s[1002];
    root=init();
    scanf("%d",&n);
    while(n--){
        scanf("%s%ld",s,&a);
        _add(s,a);
    }
    scanf("%d",&q);
    while(q--){
        scanf("%s",s);
       // printf("%s",s);
        _find(s);
        printf("\n");
    }
    return 0;
}
