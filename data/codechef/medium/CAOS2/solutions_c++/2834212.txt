#include <algorithm>
#include <limits>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#define BUFFER_SIZE 750
#define MAX_R 500
#define MAX_C 500
#define MAX_PRIME 500

using namespace std;

char str[BUFFER_SIZE + 10];
int grid[MAX_R][MAX_C];
int monster[MAX_R][MAX_C];
int dp[MAX_R][MAX_C][4];
bool prime[MAX_PRIME + 1];
int less_prime[MAX_PRIME + 1];

char *trim_line(char *str)
{
	return strtok(str, "\r\n");
}

void build_prime_table()
{
	prime[0] = prime[1] = false;
	fill(prime + 2, prime + MAX_PRIME + 1, true);
	for (int i = 4; i <= MAX_PRIME; i += 2)
		prime[i] = false;
	for (int i = 3; i * i <= MAX_PRIME; i += 2)
		if (prime[i]) {
			for (int j = i * i; j <= MAX_PRIME; j += i)
				prime[j] = false;
		}
	for (int i = 1; i <= MAX_PRIME; i++)
		less_prime[i] = less_prime[i - 1] + prime[i];
}

int solve_problem()
{
	int r, c;

	if (fgets(str, sizeof(str), stdin) == NULL)
		return 1;
	trim_line(str);

	char *p = strtok(str, " ");
	r = atoi(p);
	p = strtok(NULL, " ");
	c = atoi(p);

	for (int i = 0; i < r; i++) {
		if (fgets(str, sizeof(str), stdin) == NULL)
			return 1;
		trim_line(str);
		for (int j = 0; j < c; j++)
			grid[i][j] = (str[j] == '#');
	}

	for (int i = 0; i < r; i++) {
		dp[i][0][0] = 0;
		for (int j = 1; j < c; j++)
			if (grid[i][j - 1] == 0)
				dp[i][j][0] = dp[i][j - 1][0] + 1;
			else
				dp[i][j][0] = 0;
		dp[i][c - 1][1] = 0;
		for (int j = c - 2; j >= 0; j--)
			if (grid[i][j + 1] == 0)
				dp[i][j][1] = dp[i][j + 1][1] + 1;
			else
				dp[i][j][1] = 0;
	}

	for (int j = 0; j < c; j++) {
		dp[0][j][2] = 0;
		for (int i = 1; i < r; i++)
			if (grid[i - 1][j] == 0)
				dp[i][j][2] = dp[i - 1][j][2] + 1;
			else
				dp[i][j][2] = 0;
		dp[r - 1][j][3] = 0;
		for (int i = r - 2; i >= 0; i--)
			if (grid[i + 1][j] == 0)
				dp[i][j][3] = dp[i + 1][j][3] + 1;
			else
				dp[i][j][3] = 0;
	}

	int result = 0;
	for (int i = 2; i + 2 < r; i++) {
		for (int j = 2; j + 2 < c; j++)
			if (grid[i][j] == 0) {
				int min_value = min(min(dp[i][j][0], dp[i][j][1]), min(dp[i][j][2], dp[i][j][3]));
				result += less_prime[min_value];
			}
	}
	printf("%d\n", result);

	return 0;
}

int main()
{
	int num_tests;

	build_prime_table();

	if (fgets(str, sizeof(str), stdin) == NULL)
		return 1;
	trim_line(str);

	num_tests = atoi(str);
	for (int i = 0; i < num_tests; i++)
		solve_problem();

	return 0;
}
