#include<iostream>
using namespace std;

unsigned short primes[] = {0,0,1,2,2,3,3,4,4,4,4,5,5,6,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,10,11,11,11,11,11,11,12,12,12,12,13,13,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,17,17,18,18,18,18,18,18,19,19,19,19,20,20,21,21,21,21,21,21,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,26,26,27,27,27,27,28,28,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,32,32,32,32,32,32,33,33,34,34,34,34,34,34,34,34,34,34,35,35,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,41,41,42,42,42,42,42,42,42,42,42,42,43,43,44,44,44,44,45,45,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,49,49,50,50,50,50,51,51,51,51,51,51,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,55,55,55,55,55,55,56,56,56,56,56,56,57,57,58,58,58,58,58,58,59,59,59,59};

int min(int x,int y)
{
	if(x<y)
		return x;
	return y;
}

int min(int a,int b,int c,int d)
{
	return min(min(a,b),min(c,d));
}

int main()
{
	char grid[501][501];
	int L[501][501] = {0},R[501][501] = {0},T[501][501] = {0},B[501][501] = {0};
	int l,r,t,b,monsters,tCases,minimum,row,col,k;
	cin>>tCases;
	while(tCases--)
	{
		cin>>row>>col;
		for(int i = 1;i <= row;i++)
		{
			for(int j = 1;j <= col;j++)
			{
				cin>>grid[i][j];
				L[i][j] = R[i][j] = T[i][j] = B[i][j] = 0;
			}
		}
		if((row <= 4) && (col <= 4))
		{
			cout<<"0"<<endl;
			continue;
		}

                for(int i = 1;i <= row;i++)
                {
                        for(int j = 1;j <= col;j++)
                        {
                          	if(grid[i][j-1] == '^')
					L[i][j] = L[i][j-1] + 1;
				if(grid[i-1][j] == '^')
					T[i][j] = T[i-1][j] + 1;
			}
		}
	
	        for(int i = row-1;i >= 0;i--)
                {
                        for(int j = col-1;j >= 0;j--)
                        {
                                if(grid[i][j+1] == '^')
                                        R[i][j] = R[i][j+1] + 1;
                                if(grid[i+1][j] == '^')
                                        B[i][j] = B[i+1][j] + 1;
                        }
                }

		monsters = 0;
		for(int i = 1;i <= row;i++)
		{
			for(int j = 1;j <= col;j++)
			{
				if(grid[i][j] != '^')
					continue;

				minimum = min(L[i][j],R[i][j],T[i][j],B[i][j]);
				//cout<<minimum<<" ";
				monsters += primes[minimum];
			}
		}
		cout<<monsters<<endl;
		//cout<<L[5][8]<<" "<<R[5][8]<<" "<<T[5][8]<<" "<<B[5][8]<<endl;

	}
	return 0;
}
