#include <algorithm>
#include <cctype>
#include <cstdio>
#include <cstring>
#include <functional>
#include <iostream>
#include <unistd.h>
#include <utility>
#include <vector>
#include <map>

#define getw getchar_unlocked
#define iterate(n) for(int i=0;i<n;i++)
#define d_iterate(p,q) for(int i=p;i<=q;i++)
#define r_iterate(n,z) for(int i=n-1;i>=n-z;i--) /* z number of elements to the left of n */
#define p(n) printf("%d\n",n);
#define get(n) n = scan2();
// #define sort(k,q) qsort(k,q,sizeof(*k),comp);
#define print_array(k,n) iterate(n){ p(k[i]);}
#define ps(s) printf("%s\n",s);
#define repeat(n) for (int i = (0); i < n; i++)
#define ZERO(v) memset((v), 0, sizeof (v))
#define ALL(x) (x).begin(), (x).end()
#define mp make_pair;
#define pb push_back;
// int comp(const void *e1,const void *e2){ return *((const lld *)e1) - *((const lld *)e2);}

typedef unsigned long long int lld;
typedef unsigned long int ld;
using namespace std;

inline lld scan2(){
	lld n=0,s=1;
	char p=getw();
	if(p=='-') s=-1;
	while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=getw();
	if(p=='-') s=-1,p=getw();
	while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=getw(); }
	return n*s;
}

int primes[95] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499};
int frequency[501] = {0};


char str[501][501];
int solve(){
 	int rows,cols;
	
	get(rows);
	get(cols);

	iterate(rows){
		scanf("%s",str[i]);
	}
	int i,j;

	int left = 0,right = 0,top = 0,bottom = 0;
	int monstercount = 0;
	int count = 0;
	for(i=2;i<=rows-2;i++ ){
		for(j=2;j<=cols-2;j++){
			if(str[i][j] == '^'){
				

				count  = 0;
				int p,q;

				int upto = 0;

				upto = min(j,cols-j-1);
				upto = min(upto,i);
				upto = min(upto,rows-i-1);


				for(p=1;p<=upto;p++){
					if( 
						str[i-p][j] == '^' &&
						str[i+p][j] == '^' &&
						str[i][j-p] == '^' &&
						str[i][j+p] == '^'
					  )
						count++;
					 else{
					 	 break;
					 }
				}
					// printf("i = %d ,j = %d , upto = %d\n",i,j,upto);
					// printf("min of all sides = %d\n",count);
					monstercount +=  frequency[count];
				
			
			}
		}
	}

	return monstercount;

}

int main(){
	lld i,z,n,j,k,t,h,ans = 0;
	lld f = 0;
	lld p_index = 0;
	
	iterate(501){
		if(i<primes[p_index]){
			frequency[i] = f;
		}else{
			f++;
			p_index++;
			frequency[i] = f;
		}
	}



	// iterate(500){
	// 	printf("number of primes upto %d = %d\n",i,frequency[i]);
	// }


	get(t);
	while(t--){
			p(solve());

	}

	return 0;
}
 
 