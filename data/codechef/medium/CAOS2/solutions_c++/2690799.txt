#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>
#include<list>
#include<string>
#include<utility>
#include<numeric>
#include<iterator>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<climits>
#include<ctime>
#include<cstring>

#define ALL(c)  c.begin(), c.end()
#define TR(c, it)   for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define MAX(a, b)   ((a) > (b) ? (a) : (b))
#define MIN(a, b)   ((a) < (b) ? (a) : (b))
#define MIN3(a, b, c)   ((MIN((a), (b)) > (c)) ? (c) : MIN((a), (b)))
#define gc  getchar_unlocked
#define lli long long int
#define inf INT_MAX
#define mininf INT_MIN
#define pb push_back
#define mp  make_pair

using namespace std;

//inline void scanstr(char *str)
//{
//    register char c = 0;
//    register int i = 0;
//    while (c < 33)
//        c = gc();
//
//    while(c != '\n')
//    {
//        str[i] = c;
//        c = gc();
//        i = i + 1;
//    }
//    str[i] = '\0';
//}

int primes[] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
                 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
                 211, 223, 227, 229, 233, 239, 241, 251, 257, 510 };

int main()
{
    int t, row, col;

    scanf("%d", &t);
    while(t--)
    {
        scanf("%d %d", &row, &col);
        string str[row];
        int left[row][col], right[row][col], bottom[row][col], top[row][col];
        FOR(i, 0, row)
        {
//            scanstr(str);
            cin >> str[i];
        }

        FOR(i, 0, row)
        {
            left[i][0] = (str[i][0] == '^');
            FOR(j, 1, col)
                left[i][j] = (str[i][j] == '^') ? left[i][j-1] + 1 : 0;

            right[i][col-1] = (str[i][col-1] == '^');
            for(int j = col-2; j >= 0; j--)
                right[i][j] = (str[i][j] == '^') ? right[i][j+1] + 1 : 0;
        }
        FOR(j, 0, col)
        {
            top[0][j] = (str[0][j] == '^');
            FOR(i, 1, row)
                top[i][j] = (str[i][j] == '^') ? top[i-1][j] + 1 : 0;

            bottom[row-1][j] = (str[row-1][j] == '^');
            for(int i = row-2; i >= 0; i--)
                bottom[i][j] = (str[i][j] == '^') ? bottom[i+1][j] + 1 : 0;
        }

        int count = 0, p;
        FOR(i, 1, row-1)
            FOR(j, 1, col-1)
            {
                if(str[i][j] == '^')
                {
                    p = MIN(MIN(left[i][j-1], right[i][j+1]), MIN(top[i-1][j], bottom[i+1][j]));
                    for(int pr = 0; p >= primes[pr]; pr++)
                        count++;
                }
            }

        printf("%d\n", count);
    }
    return 0;
}
