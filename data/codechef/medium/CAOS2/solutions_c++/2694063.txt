#include <iostream>
#include <stdio.h>
#include <limits.h>
// #include <time.h>
#include <vector>
using std::vector;
using std::string ;
using namespace std ;

#define MAX_CHAR 502

#define min(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a < _b ? _a : _b; })

int rows ;
int columns ;
int nOfMonsters ;
bool grid[MAX_CHAR][MAX_CHAR] ;
int primesCount[MAX_CHAR] ;

bool isPrime( int number)
{
    if(number < 2) return false;
    if(number == 2) return true;
    if(number % 2 == 0) return false;
    for( int i=3; (i*i)<=number; i+=2)
    {
        if(number % i == 0 )
        	return false;
    }
    
    return true;
}

void calculateVariablesForLocation( int i ,  int j ,  int &L ,  int &R ,  int &T ,  int &B)
{
	L = 0 ;
	
	int index =  j + 1 ;
	while (index < columns && grid[i][index] == 1) index++ ;
	R = index - j - 1 ;
	
	index =  i - 1 ;
	while (index >= 0 && grid[index][j] == 1) index-- ;
	T = i - index - 1 ;
	
	index =  i + 1 ;
	while (index < rows && grid[index][j] == 1) index++ ;
	B = index - i - 1 ;
}

void processGrid()
{
	// iterate over grids
	int L, R, T, B, minimum ;
		
	for (int i = 0 ; i < rows ; i++ )
	{
		L = -1 ;
		for (int j = 0 ; j < columns ; j++ )
		{
			if ( grid[i][j] != 0 )
			{
				if ( L < 0 )
					calculateVariablesForLocation( i , j , L , R , T , B ) ;
				else
				{
					L++ ;
					R-- ;
					
					int index =  i - 1 ;
					while (index >= 0 && grid[index][j] == 1) index-- ;
					T = i - index - 1 ;
	
					index =  i + 1 ;
					while (index < rows && grid[index][j] == 1) index++ ;
					B = index - i - 1 ;
					
					minimum = min( L , min( R , min( T , B) ) ) ;
					
					nOfMonsters += primesCount[minimum] ;
				}
			}
			else
				L = -1 ;
		}
	}
	
	printf("%d\n", nOfMonsters) ;
}

void readInput()
{
	int numberOfGrids = 0 ;
	int numberOfRows = 0 ;
	int numberOfCols = 0 ;
	char line[MAX_CHAR] ;
	
	scanf("%d",&numberOfGrids);
				
	for ( int i = 0 ; i < numberOfGrids ; i++ )
	{
		scanf("%d %d", &numberOfRows , &numberOfCols) ;
		rows = numberOfRows ;
		columns = numberOfCols ;
		nOfMonsters = 0 ;
		
		for ( int j = 0 ; j < numberOfRows ; j++ )
		{
			scanf("%s",line);
			for ( int k = 0 ; k < numberOfCols ; k++ )
			{
				grid[j][k] = ((line[k]=='^')? 1 : 0) ;
			}
		}
		
		processGrid() ;
	}
}

int main()
{
	int countOfPrimes = 0 ;
	
	for ( int i = 0 ; i < MAX_CHAR ; i++ )
	{
		if ( isPrime ( i ) )
			countOfPrimes++ ;
			
		primesCount[i] = countOfPrimes ;
	}
	
	readInput() ;
}