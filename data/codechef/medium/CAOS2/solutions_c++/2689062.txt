#include <cstdio>
#include <algorithm>
 
using namespace std;
 
int t, r, c;
 
int p[] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499};
 
int grid[512][512], up[512][512], down[512][512], left[512][512], right[512][512], mi[512][512];
 
void f(int &a) {
int i = 0;
while(a >= p[i]) {
++i;
}
a = i;
}
 
void upq() {
for(int i = 0; i < r; ++i) {
for(int j = 0; j < c; ++j) {
int key = grid[i][j];
if(key == '#' || i == 0) up[i][j] = 0;
else if(grid[i-1][j] != '#') up[i][j] = up[i-1][j] + 1;
else up[i][j] = 0;
//up[i][j] = f(up[i][j]);
}
}
}
 
void downq() {
for(int i = r-1; i >= 0; --i) {
for(int j = 0; j < c; ++j) {
int key = grid[i][j];
if(key == '#' || i == r-1) down[i][j] = 0;
else if(grid[i+1][j] != '#') down[i][j] = down[i+1][j] + 1;
else down[i][j] = 0;
//down[i][j] = f(down[i][j]);
}
}
}
 
void leftq() {
for(int i = 0; i < r; ++i) {
for(int j = 0; j < c; ++j) {
int key = grid[i][j];
if(key == '#' || j == 0) left[i][j] = 0;
else if(grid[i][j-1] != '#') left[i][j] = left[i][j-1] + 1;
else left[i][j] = 0;
//left[i][j] = f(left[i][j]);
}
}
}
 
void rightq() {
for(int i = 0; i < r; ++i) {
for(int j = c-1; j >= 0; --j) {
int key = grid[i][j];
if(key == '#' || j == c-1) right[i][j] = 0;
else if(grid[i][j+1] != '#') right[i][j] = right[i][j+1] + 1;
else right[i][j] = 0;
}
}
}
 
void compute() {
for(int i = 0; i < r; ++i) {
for(int j = 0; j < c; ++j) {
mi[i][j] = min(min(right[i][j], left[i][j]), min(up[i][j], down[i][j]));
f(mi[i][j]);
}
}
}
 
int main() {
scanf("%d", &t);
getchar();
while(t--) {
scanf("%d%d", &r, &c);
getchar();
for(int i = 0; i < r; ++i) {
for(int j = 0; j < c; ++j) {
grid[i][j] = getchar();
}
getchar();
}
upq();
downq();
leftq();
rightq();
compute();
int ans = 0;
for(int i = 0; i < r; ++i) {
for(int j = 0; j < c; ++j) {
ans += mi[i][j];
}
}
printf("%d\n", ans);
}
return 0;
}