#include <iostream>

bool is_prime(int n);

int main()
{
	using namespace std;
	
	const int rmax = 500, cmax = 500;
	int tests;
	std::cin >> tests;
	
	char Grid[rmax][cmax];
	int RL[rmax][cmax];
	int UD[rmax];
	
	const int N = (rmax < cmax) ? cmax : rmax;
	int primes_upto[N];

	for(int i = 0; i < N; i++)
	{
		primes_upto[i] = -1;
	}
	
	for(int i = 0; i < tests; i++)
	{
		int rows, cols;
		std::cin >> rows;
		std::cin >> cols;
		
		for(int i = 0; i < rows; i++)
		{
			for(int j = 0; j < cols; j++)
			{
				cin >> Grid[i][j];
			}
		}
		/*
		cout << endl;
		for(int i = 0; i < rows; i++)
		{
			for(int j = 0; j < cols; j++)
			{
				cout << Grid[i][j];
			}
			cout << endl;
		}
		//*/
		
		
		//for left and right
		for(int i = 0; i < rows; i++)
		{
			RL[i][0] = 0;
			for(int j = 1; j < cols; j++)
			{
				int left = 0;
				if(Grid[i][j-1] == '^')
				{
					 left = RL[i][j-1] + 1;
				}
				else
				{
					left = 0;
				}
				RL[i][j] = left;
			}
			
			RL[i][cols-1] = 0;
			for(int j = cols - 2; j >= 0; j--)
			{
				int right;
				if(Grid[i][j+1] == '^')
				{
					right = RL[i][j+1] + 1;
				}
				else
				{
					right = 0;
				}
				
				RL[i][j] = (right < RL[i][j]) ? right : RL[i][j];
			}
		}
		/*
		for(int i = 0; i < rows; i++)
		{
			for(int j = 0; j < cols; j++)
			{
				cout << RL[i][j];
			}
			cout << endl;
		}
		cout << endl;
		//*/
		
		//for top and bottom
		for(int j = 0; j < cols; j++)
		{
			UD[0] = 0;
			for(int i = 1; i < rows; i++)
			{
				int top;
				if(Grid[i-1][j] == '^')
				{
					top = UD[i-1] + 1;
				}
				else
				{
					top = 0;
				}
				UD[i] = top;
			}
			
			RL[rows-1][j] = UD[rows-1] = 0;
			for(int i = rows - 2; i >= 0; i--)
			{
				int bottom;
				if(Grid[i+1][j] == '^')
				{
					bottom = UD[i+1] + 1;
				}
				else
				{
					bottom = 0;
				}
				UD[i] = (bottom < UD[i]) ? bottom : UD[i];
				RL[i][j] = (UD[i] < RL[i][j]) ? UD[i] : RL[i][j];
			}
		}
		
		/*
		for(int i = 0; i < rows; i++)
		{
			for(int j = 0; j < cols; j++)
			{
				cout << RL[i][j];
			}
			cout << endl;
		}
		//*/
		
		int monsters = 0;
		for(int i = 0; i < rows; i++)
		{
			for(int j = 0; j < cols; j++)
			{
				if(Grid[i][j] == '^')
				{
					const int n = RL[i][j];
					if(primes_upto[n] == -1)
					{
						int pcount = 0;
						for(int k = 2; k <= n; k++)
						{
							if(is_prime(k))
							{
								++pcount;
							}
						}
						primes_upto[n] = pcount;
					}
					monsters += primes_upto[n];
				}
				
			}
		}
		cout << monsters << endl;
	}
	return 0;
}

bool is_prime(int n)
{
	switch(n)
	{
	case 2:		case 3:		case 5:		case 7:		case 11:	case 13:	case 17:
	case 19:	case 23:	case 29:	case 31:	case 37:	case 41:	case 43:
	case 47:	case 53:	case 59:	case 61:	case 67:	case 71:	case 73:
	case 79:	case 83:	case 89:	case 97:	case 101:	case 103:	case 107:
	case 109:	case 113:	case 127:	case 131:	case 137:	case 139:	case 149:
	case 151:	case 157:	case 163:	case 167:	case 173:	case 179:	case 181:
	case 191:	case 193:	case 197:	case 199:	case 211:	case 223:	case 227:
	case 229:	case 233:	case 239:	case 241:	case 251:
		return true;
	default:
		return false;
	}
}