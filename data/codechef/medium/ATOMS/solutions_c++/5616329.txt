#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<set>
using namespace std;
int visited[105];
vector<int> v[105];
set<int> s[35];

void dfs(int cur)
{
	int i,j;
	if(visited[cur]==1)
		return;
	visited[cur]=1;
	for(i=0;i<v[cur].size();i++)
	{
		if(visited[v[cur][i]]==0)
		{
			dfs(v[cur][i]);
		}
	}
}

int comp(int n,int m)
{
	int ans=0,i;
	for(i=0;i<n;i++)
	{
		if(visited[i]==0)
		{
			ans++;
			dfs(i);
		}
	}
	return ans;
}

int main()
{
	int t,n,m,i,j,k,f;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d %d",&n,&m);
		for(i=0;i<m;i++)
		{
			s[i].clear();
			scanf("%d",&f);
			while(f--)
			{
				scanf("%d",&j);
				s[i].insert(j);
			}
		}
		for(i=0;i<n;i++)
		{
			visited[i]=0;
			v[i].clear();
		}
		
		for(i=0;i<n;i++)
		{
			for(j=i+1;j<n;j++)
			{
				f=0;
				for(k=0;k<m;k++)
				{
					if((s[k].find(i)!=s[k].end() && s[k].find(j)==s[k].end()) || (s[k].find(i)==s[k].end() && s[k].find(j)!=s[k].end()))
					{
						f=1;
						break;
					}
				}
				if(f==0)
				{
					v[i].push_back(j);
					v[j].push_back(i);
				}
			}
		}
				
		printf("%d\n",comp(n,m));
	}
	return 0;
}