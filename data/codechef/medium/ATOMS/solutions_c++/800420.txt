#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <cassert>

#define MOD 	       	1000000007
#define LU             	long long unsigned int
#define LL             	long long int

#define REP(i,n)        for(int i = 0; i < n; i++)
#define FOR(i,a,b,k)    for(int i = a; i < b; i+=k)

using namespace std;

int ni(){
    int v;
    scanf("%d", &v);
    return v;
}

set<int> s[20000];
int N,M;

void solve(){
    bool done = false;
    int count;
    while(!done){
        count = M;
  //      cout << count << endl;
        REP(i,M){
            FOR(j,i+1,M,1){
                set<int>::iterator it,it1;
                for(it = s[i].begin(); it != s[i].end(); it++){
                    if(s[j].count(*it) > 0){
                        s[count].insert(*it);
                    }
                }

                if(s[count].size() > 0){
                    //cout << "vals ";
                    for(it = s[count].begin(); it != s[count].end(); it++){
                      //  cout << *it <<" ";
                        it1 = s[i].find(*it);
                        s[i].erase(it1);
                        it1 = s[j].find(*it);
                        s[j].erase(it1);
                    }
//                    cout << endl;
                    count++;
                }

            }
        }
        if(M == count){
            done = true;
        }
        else{
            M = count;
            int idx = 0;
            REP(i,M){
                if(s[i].size() != 0){
                    if(i != idx){
                        s[i].swap(s[idx]);
                    }
                    idx++;
                }
            }
            M = idx;
        }
    }
}

int main(){
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    int t = ni();
    while(t--){
        N = ni();
        M = ni();

        REP(i,M){
            int sz = ni();
            REP(j,sz){
                s[i].insert(ni());
            }
        }
        solve();
        int ans = 0;
        REP(i,M){
            if(s[i].size() > 0){
                ans++;
            }
        }
        printf("%d\n",ans);

        REP(i,M){
            s[i].clear();
        }
    }

}
