#include<map>
#include<set>
#include<list>
#include<cmath>
#include<queue>
#include<stack>
#include<bitset>
#include<cstdio>
#include<string>
#include<vector>
#include<climits>
#include<complex>
#include<cstdlib>
#include<cstring>
#include<numeric>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<functional>

#define	pb			push_back
#define	rep(i,n)	for(int i=0;i<n;i++)

using namespace std;

typedef	vector<bool>		vb;
typedef	vector<int>			vi;
typedef	vector<vb>			vvb;
typedef	vector<vi>			vvi;

vvi toConnectedComponents(const vvb &adj){
	int n=adj.size();
	vvi res;
	vb visited(n);
	rep(i,n)if(!visited[i]){
		vi comp;
		queue<int> qu; qu.push(i); visited[i]=true;
		while(!qu.empty()){
			int u=qu.front();	qu.pop();
			comp.pb(u);
			rep(v,n)if(adj[u][v] && !visited[v]){ qu.push(v); visited[v]=true; }
		}
		res.pb(comp);
	}
	return res;
}

int main(){
	int T;	scanf("%d",&T);
	while(T--){
		int m,n;	scanf("%d%d",&n,&m);
		bool S[30][100]={};
		rep(i,m){
			int sz;	scanf("%d",&sz);
			rep(j,sz){
				int x;	scanf("%d",&x);
				S[i][x]=true;
			}
		}

		vvb adj(n,vb(n));
		rep(x,n)rep(y,x){
			bool b=true;
			rep(i,m)if(S[i][x]^S[i][y]){ b=false; break; }
			adj[x][y]=adj[y][x]=b;
		}

		printf("%d\n",toConnectedComponents(adj).size());
	}

	return 0;
}
