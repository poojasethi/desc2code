#include <cstdio>
#include <iostream>
#include <algorithm>

using namespace std;

const int MaxN = 122;

int rank[MaxN], pa[MaxN], mask[MaxN];
int t, n, m;

inline void init_sets()
{
    for (int i = 0; i < MaxN; i++) {pa[i] = i; rank[i] = 0; mask[i] = 0;}
}

int ds_find(int v)
{
    int path_compress = v;
    while (pa[v] != v) v = pa[v];

    while (path_compress != v)
    {
        int tmp = pa[path_compress];
        pa[path_compress] = v;
        path_compress = tmp;
    }
    return v;
}

void ds_union(int a, int b)
{
    a = ds_find(a);
    b = ds_find(b);

    if (a == b) return;

    if (rank[b] > rank[a]) swap(a, b);
    else if (rank[a] == rank[b]) rank[a]++;

    pa[b] = a;
}

int main()
{
    cin.sync_with_stdio(0);
    cin >> t;

    while (t--)
    {
        init_sets();
        cin >> n >> m;

        for (int i = 0; i < m; i++)
        {
            int k, x;
            cin >> k;

            while (k--)
            {
                cin >> x;
                mask[x] |= (1 << i);
            }
        }

        for (int i = 0; i < n - 1; i++)
            for (int j = i + 1; j < n; j++) if (mask[i] == mask[j]) ds_union(i, j);

        int Ans = 0;
        for (int i = 0; i < n; i++) if (ds_find(i) == i) Ans++;

        printf("%d\n", Ans);
    }
    return 0;
}
