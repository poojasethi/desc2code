#include<cstdio>
#include<algorithm>
#include <cstring>
#include <vector>
#define MAX_BUF 1024

char buf_in[MAX_BUF],*next_in,buf_out[MAX_BUF],*next_out;

void read_buf() {
  buf_in[fread(buf_in,1,MAX_BUF-1,stdin)]=0;
  next_in=buf_in;
}

void read_char() {
  next_in++;
  if (!*next_in)
    read_buf();
}

bool read_eof() {
  return !*next_in;
}

int read_int() {
  int x=0;

  while (*next_in<'0' || *next_in>'9')
    read_char();
  while (*next_in>='0' && *next_in<='9') {
    x=10*x+*next_in-'0';
    read_char();
  }

  return x;
}

double read_double() {
  double x=0.0,p=1.0;

  while ((*next_in<'0' || *next_in>'9') && *next_in!='-')
    read_char();
  if (*next_in=='-')
    return -read_double();
  while (*next_in>='0' && *next_in<='9') {
    x=10*x+*next_in-'0';
    read_char();
  }
  if (*next_in=='.') {
    read_char();
    while (*next_in>='0' && *next_in<='9') {
      x=10*x+*next_in-'0';
      p*=10.0;
      read_char();
    }
  }

  return x/p;
}

void write_buf() {
  fwrite(buf_out,1,next_out-buf_out,stdout);
  next_out=buf_out;
}

void write_char(char c) {
  *next_out++=c;
  if (next_out-buf_out==MAX_BUF)
    write_buf();
}

void _write_int(int x) {
  if (x) {
    _write_int(x/10);
    write_char('0'+x%10);
  }
}

void write_int(int x) {
  if (x<0) {
    write_char('-');
    x=-x;
  }
  if (!x)
    write_char('0');
  else
    _write_int(x);
}

void write_string(const char *c) {
  while (*c)
    write_char(*c++);
}

void init() {
  read_buf();
  next_out=buf_out;
}

void deinit() {
  write_buf();
}


using namespace std;

vector<int> groups[111];
int group_cnt;
int s[111];
int temp;

bool ex(int i) {
    int t = s[groups[i][0]];
    int len = groups[i].size();
    for (int j=0; j<len; j++) {
        if (s[groups[i][j]] != t)
            return false;
    }
    return true;
}

void split(int i) {
    int t = s[groups[i][0]];
    int len = groups[i].size();
    for (int j=0; j<len; j++) {
        if (s[groups[i][j]] != t) {
            groups[group_cnt].push_back(groups[i][j]);
            swap(groups[i][j], groups[i][len-1]);
            groups[i].pop_back();
            len--;
            j--;
        }
    }
    group_cnt++;
}

void print_g() {
    for (int i=0; i<group_cnt; i++) {
        printf("group no. %d\n", i);
        for (int j=0; j<groups[i].size(); j++)
            printf("%d ", groups[i][j]);
        printf("\n");
    }
}

int main()
{
    //freopen("in.txt", "r", stdin);
    int t, n, m, v, temp;
    scanf("%d", &t);
    while (t--) {
        for (int i=0; i<111; i++) groups[i].clear();
        scanf("%d %d", &n, &m);
        for (int i=0; i<n; i++)
            groups[0].push_back(i);
        group_cnt = 1;
        for (int i=0; i<m; i++) {
            scanf("%d", &v);
            memset(s, 0, sizeof s);
            for (int k=0; k<v; k++) {
                scanf("%d", &temp);
                s[temp] = 1;
            }
            //print_g();
            temp = group_cnt;
            for (int j=0; j<temp; j++) {
                if (!ex(j)) {
                    split(j);
                }
            }
            //print_g();
        }
        printf("%d\n", group_cnt);
    }
    return 0;
}
