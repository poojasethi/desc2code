#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<map>
#include<math.h>
#include<algorithm>
#define LL long long
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define pb push_back
int p[102]={0};
int set_rel[102]={0};
using namespace std;

int root(int v)
{
    if(v==p[v]) return v;
    else
        p[v] = root(p[v]);
}
main()
{
    int test_cases,n,m,i,j,size_of_set,node,cnt,root1,root2;
    S(test_cases);
    while(test_cases--)
    {
        S(n);
        S(m);

        //initialize the parents of each node by itself. That is, each is discconnected

        for(i=0;i<n;i++)
        {
            p[i]=i; //parent of i is i
            set_rel[i]=0;
        }
        for(i=0;i<m;i++)
        {
            S(size_of_set);
            while(size_of_set--)
            {
                S(node);
                set_rel[node]= set_rel[node] | (1<<i);
            }
        }

        // till now we build the graph
        // find the number of connected components of the graph using union find

        for(i=0;i<n;i++)
        {
            for(j=0;j<i;j++)
            {
                if(set_rel[i]==set_rel[j]) // they r related
                {
                    //union find
                    root1=root(i); //find
                    root2=root(j); //find
                    p[root2]=root1; // union
                }
            }
        }
        cnt=0;
        // number of connected compontents
        for(i=0;i<n;i++)
        {
            if(p[i]==i)
                cnt++;
        }
        P(cnt);
    }

return 0;
}
