#include <cstdio>
#include <cctype>
#include <map>
#include <cstring>

using namespace std;

const int BUFSIZE = 4096;

char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;

int readint()
{
    int n;
    for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    }
    n = 0;
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - '0';
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - '0';
    }
    return n;
}

const int MAX=100;
int numbers[MAX];
map<int, bool> values;

int main()
{
    int t, n, m, v, s;
    int tmax;
    int so_far_max;
    t = readint();
    for(; t > 0; t--)
    {
        memset(numbers, 0, sizeof(int) * MAX);
        values.clear();
        
        n = readint();
        m = readint();

        so_far_max = 0;
        for(int i=0; i<m; i++)
        {
            v = readint();
            tmax = - 1;
            for(int j=0; j<v; j++)
            {
                s = readint();
                numbers[s] += (so_far_max + 1);
                if (numbers[s] > tmax)
                    tmax = numbers[s];
            }
            so_far_max = tmax;
        }
        for(int i=0; i < n; i++)
            values[numbers[i]] = true;

        printf("%d\n", (int)values.size());
    }
    return 0;
}
