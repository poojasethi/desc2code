#include <cctype>
#include <cstdio>
#include <cstring>
#include <map>

using namespace std;

const int MAXSIZE=100;
const int BUFSIZE = 4096;

char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;

int readint()
{
    int n;
    for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    }
    n = 0;
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - '0';
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - '0';
    }
    return n;
}

int main()
{
    int t, n, m, v, s;
    int nextmax;
    int currmax;
    int X[MAXSIZE];
    map <int, bool> atoms;
    pair <int, bool> atom;
    t = readint();
    for(; t > 0; t--)
    {
        n = readint();
        m = readint();
        currmax = 0;
        nextmax = 0;
        memset(X, 0, sizeof(int) * MAXSIZE);
        atoms.clear();
        for(int i=0; i < m; i++)
        {
            v = readint();
            for(int j=0; j < v; j++)
            {
                s = readint();
                X[s] += (currmax + 1);
                if (X[s] > nextmax)
                    nextmax = X[s];
            }
            currmax = nextmax;
        }
        for(int i=0; i < n; i++)
            atoms.insert(pair<int, bool>(X[i], true));
        printf("%lu\n", atoms.size());
    }
    return 0;
}

