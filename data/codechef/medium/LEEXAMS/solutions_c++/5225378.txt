#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<cstdio>
#include<stack>
#include<cstring>
#include<iterator>
#include<climits>
#include<cmath>
#include<string>
#include<functional>
#include<sstream>
#include<bitset>
#include<map>
#include<set>
using namespace std;
#define     For(i,a,b)        for (int i=a; i<b; i++)
#define     Rep(i,a)          for (int i=0; i<a; i++)
#define     Rev(i,a,b)        for (int i=a; i>=b ; i--)
#define     ALL(v)            (v).begin(),(v).end()
#define     Set(a,x)          memset((a),(x),sizeof(a))
#define     Sort(x)           sort(ALL(x))
#define     SF                scanf
#define     PF                printf
#define     Dbug              cerr<<"";
#define     EPS               1e-15
#define     sz(x)             ((int)(x.size()))
typedef long long ll;
typedef vector <ll> vi;
typedef pair<ll,ll> pii;

const int MAXN = 200005;
const ll  INFI = (1<<28);
const ll MOD = 1000000007;

int n;
pii num[52];
double prob[52];
bool vis[52][1<<17];
double dp[52][1<<17];
double rec(int pos,int mask)
{
	if(pos == n) {
		return 1;
	}
	if(vis[pos][mask] == true) return dp[pos][mask];
	vis[pos][mask]=true;
	double a=0,b=0;
	int x=num[pos].first;
	int y=num[pos].second;
	if(!(mask & (1 << x))) {
		a= prob[pos] * rec(pos + 1, mask | (1 << x));
	}
	if(!(mask & (1 << y))) {
		b= (100-prob[pos]) * rec(pos + 1, mask | (1 << y));
	}
	a = a /(double)(100);
	b = b /(double)(100);
	return dp[pos][mask]=a + b;
}

int main() {
#ifdef HOMEPC
	freopen("a.in","r",stdin);
	//freopen("output.txt","w",stdout);
#endif
	ios::sync_with_stdio(false);

	int t; cin >> t;
	while(t--) {
		cin >> n;
		Rep(i, n) cin >> prob[i] >> num[i].first >> num[i].second;
		Set(vis, false);
		Set(dp, 0);
		double ans=rec(0, 0);
		PF("%0.12lf\n",ans);
	}

	return 0;
}