#include <iostream>
#include <bitset>
#include <stdio.h>
using namespace std;
int N;
struct node
{
    int a,b;
    double p;
}a[51];
bool flag;
double getans(bitset<17> temp,int i)
{
    if(i==N)
    {
        return 1;
    }
    if(temp[a[i].a]==0 && temp[a[i].b]==0)
    {
        bitset<17> temp1(temp);
        temp1[a[i].a]=1;
        bitset<17> temp2(temp);
        temp2[a[i].b]=1;
        return a[i].p*getans(temp1,i+1) + (1-a[i].p)*getans(temp2,i+1);
    }
    else if(temp[a[i].a] == 0)
    {
        temp[a[i].a]=1;
        return a[i].p*getans(temp,i+1);
    }
    else if(temp[a[i].b] == 0)
    {
        temp[a[i].b]=1;
        return (1-a[i].p)*getans(temp,i+1);
    }
    //flag = false;
    return 0;
    
}
int main() {
	int T;
	cin>>T;
	while(T--)
	{
	    cin>>N;
	    flag = true;
	    for(int i=0;i<N;i++)
	    {
	        cin>>a[i].p>>a[i].a>>a[i].b;
	        a[i].p/=100;
	    }
	    bitset<17> temp;
	    double ans = getans(temp,0);
	    if(flag)
	    {
	        printf("%0.10lf\n",ans);
	    }
	    else
	    {
	        cout<<"0"<<endl;
	    }
	}
	return 0;
}
