#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cassert>
#include <cstdlib>
#include <cmath>
#include <utility>
#include <algorithm>
#include <map>
#include <climits>
#include <string>
#include <cstring>
using namespace std;
 
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<ULL> VULL;
typedef vector<LL> VLL;
 
#define MX 100000001
#define MN -1
#define SZ 55
#define A 0
#define B 1
#define REP(i, s, e) for(int i = (s); i <= (e); ++i)
#define FOR(i, s, n) for(int i = (s); i < (n); ++i)
#define FORALL(i, n) for(int i = 0; i < (n); ++i)
#define ZERO(box) memset(box, 0, sizeof(box))
#define pushb push_back
#define MOD 1000000007

int a[SZ], b[SZ], h[SZ];
double p[SZ];
bool done;

int inline scan() {
    int N = 0;
    char C;
    C = getchar_unlocked();
    while (C < '0' || C > '9') C = getchar_unlocked();
    while (C >= '0' && C <= '9') {
        N = (N<<3) + (N<<1) + C - '0';
        C = getchar_unlocked();
    }
    return N;
}

void solve(double *prob, double pr, int i, int tic, int which, int n) {
	h[tic] = 1;
	(pr) = (pr) * ((which == A)?p[i]:(1-p[i]));
	if (i+1 < n && !h[a[i+1]]) solve(prob, pr, i+1, a[i+1], A, n);
	if (i+1 < n && !h[b[i+1]]) solve(prob, pr, i+1, b[i+1], B, n);
	h[tic] = 0;
	if (i == n-1) (*prob) = (*prob) + (pr);
}

int main() {
	int t;
	cin >> t;
	while (t--) {
		ZERO(p); ZERO(a); ZERO(b); ZERO(h);
		int n;
		cin >> n;
		FORALL(i, n) {
			cin >> p[i] >> a[i] >> b[i];
			p[i] /= 100;
		}
		if (n > 16) {
			cout << 0 << endl;
			continue;
		}
		double *prob = new double;
		*prob = 0.0;
		solve(prob, 1.0, 0, a[0], A, n);
		solve(prob, 1.0, 0, b[0], B, n);
		cout << *prob << endl;
	}
	return 0;
} 