#include <iostream>   
#include <sstream>   
#include <cstdio>   
#include <cstdlib>   
#include <cmath>   
#include <memory.h>   
#include <cctype>   
#include <string>   
#include <vector>   
#include <list>   
#include <queue>   
#include <deque>   
#include <stack>   
#include <map>   
#include <set>   
#include <algorithm>   
using namespace std;  
   
#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define CLEAR(a) memset((a),0,sizeof(a))  
#define INF 1000000000
#define PB push_back  
#define ALL(c) (c).begin(), (c).end()  
#define pi 2*acos(0.0)  
#define SQR(a) (a)*(a)  
#define MP make_pair  
#define MAX 64
   
typedef long long Int;  

int T, n;
// arrays for the input
int P[MAX];
int A[MAX], B[MAX];
// array for the DP
double R[MAX][1 << 16];
double solve (int i,int mask,double pr){
	if(i==n){
		R[i][mask]=pr;
		return pr;
	}
	if(R[i][mask]>0.0){
		return R[i][mask];
	}
	double ans=0.0;
	if((mask&(1<<A[i]))==0){
		ans+=solve(i+1,mask|(1<<A[i]),(pr*P[i])/100.0);
	}
	if((mask&(1<<B[i]))==0){
		ans+=solve(i+1,mask|(1<<B[i]),(pr*(100-P[i]))/100.0);
	}
	R[i][mask]=ans;	
	return ans;
	
}
int main()
{
	// read the number of test cases
	cin >> T;
	FOR (t,0,T)
	{
		// read the number of tickets n
		cin >> n;
		FOR (i,0,n)
		{
			// read probability and numbers
			cin >> P[i] >> A[i] >> B[i];
			A[i]--;
			B[i]--;
		}
		// clear array R
		CLEAR(R);
		
		R[0][0] = 1.0;
		// Two main DP loops
		
		FOR (i,0,n)
			FOR (j,0,(1 << 16))
			{
				// First case (with number A[i] and probability P[i] percents)
				if ((j & (1 << A[i])) == 0)
					R[i+1][j + (1 << A[i])] += R[i][j]*P[i]/100.0;
				// Second case (with number B[i] and probability (100.0 - P[i]) percents)
				if ((j & (1 << B[i])) == 0)
					R[i+1][j + (1 << B[i])] += R[i][j]*(100.0-P[i])/100.0;
			}

		// The result is the sum over all possible masks
		double res = 0.0;
		FOR (i,0,(1 << 16))
			res += R[n][i];
		
		/*
		double res;
		if(n<=16){
			res=solve(0,0,1.0);
		}else{
			res=0.0;
		}
		*/
		
		
		// Print the result
		printf("%0.9f\n", res);
	}

		

	return 0;
} 
 