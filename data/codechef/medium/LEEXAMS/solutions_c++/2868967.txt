#include <algorithm>
#include <cstdio>

#define MAX_N 50
#define MAX_VALUE 16
#define pow2i(x) (1 << (x))

using namespace std;

int a[MAX_N];
int b[MAX_N];
int p[MAX_N];
double dp[MAX_N][1 << MAX_VALUE];

int skip_whitespace()
{
	int ch;
	while (true) {
		ch = getchar_unlocked();
		if (ch != ' ' && ch != '\n')
			break;
	}
	return ch;
}

template<typename T>
T read_unsigned_integer()
{
	T result = (T) 0;
	int ch = skip_whitespace();
	while (ch >= '0' && ch <= '9') {
		result = 10 * result + (ch - '0');
		ch = getchar_unlocked();
	}
	return result;
}

template<typename T>
T read_signed_integer()
{
	T result = (T) 0;
	bool flip = false;
	int ch = skip_whitespace();
	if (ch == '-') {
		flip = true;
		ch = skip_whitespace();
	}
	while (ch >= '0' && ch <= '9') {
		result = 10 * result + (ch - '0');
		ch = getchar_unlocked();
	}
	return flip ? -result : result;
}

int solve_problem()
{
	int n;

	n = read_unsigned_integer<int>();
	for (int i = 0; i < n; i++) {
		p[i] = read_unsigned_integer<int>();
		a[i] = read_unsigned_integer<int>() - 1;
		b[i] = read_unsigned_integer<int>() - 1;
	}

	double result = 0.0;
	if (n <= 16) {
		int max_mask = pow2i(n);
		for (int i = 0; i < max_mask; i++) {
			double prob = 1.0;
			int mask = 0;
			bool valid = true;
			for (int j = 0, k = i; j < n; j++, k >>= 1)
				if (k & 1) {
					int pos_mask = pow2i(a[j]);
					if ((mask & pos_mask) == 0) {
						mask |= pos_mask;
						prob *= (double) p[j] / 100;
					} else {
						valid = false;
						break;
					}
				} else {
					int neg_mask = pow2i(b[j]);
					if ((mask & neg_mask) == 0) {
						mask |= neg_mask;
						prob *= (double) (100 - p[j]) / 100;
					} else {
						valid = false;
						break;
					}
				}
			if (valid)
				result += prob;
		}
	}

	printf("%lf\n", result);

	return 0;
}

int main()
{
	int num_tests;

	num_tests = read_unsigned_integer<int>();
	for (int i = 0; i < num_tests; i++)
		solve_problem();

	return 0;
}
