from operator import mul    # or mul=lambda x,y:x*y
from fractions import Fraction

def nCk(n,k): 
  return int( reduce(mul, (Fraction(n-i, i+1) for i in range(k)), 1) )

a=raw_input()
b=a.split(' ')
b[0]=int(b[0])
b[1]=int(b[1])
s = [[0 for x in range(54)] for x in range(b[1])]
for i in range(b[1]):
    l=raw_input()
    for j in range(54):
        s[i][j]=int(l[j])
temp=0
for i in range(b[1]):
    for j in range(9):
        main_comp=s[i][4*j:(4*j)+4]
        if j==0:
            main_comp.extend(s[i][-2:])
        else:
            main_comp.extend(s[i][(-2*(j+1)):(-2*(j+1))+2])
        if sum(main_comp)<=(6-b[0]):
            temp=temp+nCk(6-sum(main_comp),b[0])
print temp
    