#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<vector>
typedef long int ll;

char alt[2][100005];
ll count[2];
char string[100005];
ll curcount;

ll stack[100005];
ll top;
int type;

void push(ll val) {
  stack[++top] = val;
}

ll pop() {
  ll temp = stack[top--];
  return temp;
}

// 0 => starts with g, b
// 1 => starts with b, g
char getit(ll idx, ll ccount) {
  if (ccount == 0) return alt[idx][ccount];
  if (alt[idx][ccount-1] == 'G') return 'B';
  if (alt[idx][ccount-1] == 'B') return 'G';
}

long long int findout(int idx) {
  top = -1;
  ll i;
  char t = '-';
  ll last, removed, diff;
  long long int cost;
  long long int ans;
  ans = 0;
  for(i=0; i<curcount; i++) {
    if (alt[idx][i] != string[i]) {
      // different chars
      if (t == '-') {
        t = string[i];
        // push to stack
        push(i);
      } else if (string[i] == t) {
        // keep pushing
        push(i);  
      } else if (string[i] != t) {
        if (top == -1) {
          t = string[i];
          push(i);
        } else {
          // remove and calc
          removed = pop();
          diff = i - removed;
          if (type == 0) cost = 1;
          else if (type == 1 || type == 2) cost = diff;
          //else if (type == 2) cost = diff * diff;
          ans += cost; 
        }
      }
    }
  }
  return ans;
};

int main() {
  ll T;
  scanf("%ld", &T);
  getchar();
  char ch, ch1, ch2;
  ll nog, nob;
  long long int ans1, ans2;
  while(T--) {
    top = -1;
    nog = nob = curcount = count[0] = count[1] = 0;
    scanf("%d", &type);
    getchar();
    alt[0][0] = 'G';
    alt[1][0] = 'B';
    while((ch=getchar())!='\n') {
      alt[0][curcount] = getit(0, curcount);
      alt[1][curcount] = getit(1, curcount);
      if (ch == 'G') nog++;
      else nob++;
      string[curcount++] = ch;
    }
    if (curcount % 2 == 0) {
      // if even, no of g and b should be same
      if (nog != nob) {
        printf("-1\n");
        continue; 
      } else {
        // check with both alt[0] and alt[1]
        ans1 = findout(0);
        ans2 = findout(1);
        if (ans1 < ans2) printf("%lld\n", ans1);
        else printf("%lld\n", ans2);
      } 
    } else {
      // not even
      // difference should only be one
      if (abs(nog-nob) != 1) {
        printf("-1\n");
        continue;
      }
      if (nob > nog) {
        // check with alt[1]
        ans1 = findout(1);
        printf("%lld\n", ans1);
      }
      else {
        // check with alt[0]
        ans1 = findout(0);
        printf("%lld\n", ans1);
      }
    }
  }
  return 0;
}
