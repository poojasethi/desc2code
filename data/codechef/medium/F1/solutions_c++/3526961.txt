#define NDEBUG
    
    #include <algorithm>
    #include <cassert>
    #include <cstdio>
    #include <cstdlib>
    #include <cctype>
    #include <cmath>
    #include <string>
    #include <utility>
    #include <vector>
    #include <cassert>
    #include <ctime>
    using namespace std;
    #define VAR(a,b) __typeof(b) a=(b)
    #define REP(i,n) for(int _n=n, i=0;i<_n;++i)
    #define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
    #define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
    #define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
    #define ALL(c) (c).begin(),(c).end()
    typedef long long LL;
    const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
    template<class T> inline int size(const T&c) { return c.size(); }
    class INPUT {
    static const int BUFSIZE = 1<<16;
    static char buffer[];
    char *bufpos;
    char *bufend;
    void grabBuffer();
    public:
    INPUT() { grabBuffer(); }
    bool eof() { return bufend==buffer; }
    char nextChar() { return *bufpos; }
    inline char readChar();
    inline void skipWS();
    inline unsigned readUnsigned();
    inline int readInt();
    };
    char INPUT::buffer[INPUT::BUFSIZE];
    void INPUT::grabBuffer() {
    bufpos = buffer;
    bufend = buffer + read(0, buffer, BUFSIZE);
    }
    char INPUT::readChar() {
    char res = *bufpos++;
    if(bufpos==bufend) grabBuffer();
    return res;
    }
    inline bool myisspace(char c) { return c<=' '; }
    void INPUT::skipWS() {
    while(!eof() && myisspace(nextChar())) readChar();
    }
    unsigned INPUT::readUnsigned() {
    skipWS();
    unsigned res = 0;
    while(!eof() && isdigit(nextChar())) {
    res = 10u * res + (readChar()-'0');
    }
    return res;
    }
    int INPUT::readInt() {
    skipWS();
    bool neg = false;
    if(!eof() && nextChar()=='-') { neg=true; readChar(); }
    int res = static_cast<int>(readUnsigned());
    if(neg) res = -res;
    return res;
    }
    class OUTPUT {
    static const int BUFSIZE = 1<<16;
    static char buffer[];
    char *bufpos;
    char *BUFLIMIT;
    void flushBuffer();
    public:
    OUTPUT():bufpos(buffer),BUFLIMIT(buffer+BUFSIZE-100) {}
    ~OUTPUT() { flushBuffer(); }
    inline void operator()(char c);
    inline void operator()(unsigned x);
    inline void operator()(int x);
    inline void operator()(const char*s);
    void operator()(const string&s) { operator()(s.c_str()); }
    template<class A,class B>
    void operator()(const A& a,const B& b) {
    operator()(a); operator()(b);
    }
    template<class A,class B,class C>
    void operator()(const A& a,const B& b,const C&c) {
    operator()(a); operator()(b); operator()(c);
    }
    template<class A,class B,class C,class D>
    void operator()(const A& a,const B& b,const C&c,const D&d) {
    operator()(a); operator()(b); operator()(c); operator()(d);
    }
    template<class A,class B,class C,class D,class E>
    void operator()(const A& a,const B& b,const C&c,const D&d,const E&e) {
    operator()(a); operator()(b); operator()(c); operator()(d); operator()(e);
    }
    template<class A,class B,class C,class D,class E,class F>
    void operator()(const A& a,const B& b,const C&c,const D&d,const E&e,const F&f) {
    operator()(a); operator()(b); operator()(c); operator()(d); operator()(e); operator()(f);
    }
    };
    int waitTime(double t) {
    int res = 0;
    while(clock() < t * CLOCKS_PER_SEC) {
    REP(i,1000000) res += i;
    }
    return res;
    }
    char OUTPUT::buffer[OUTPUT::BUFSIZE];
    void OUTPUT::flushBuffer() {
    char *p = buffer;
    while(p < bufpos) {
    p += write(1, p, bufpos-p);
    }
    bufpos = buffer;
    }
    void OUTPUT::operator()(char c) {
    *bufpos = c;
    ++bufpos;
    if(bufpos >= BUFLIMIT) flushBuffer();
    }
    void OUTPUT::operator()(unsigned x) {
    char *old = bufpos;
    do {
    *bufpos = char('0' + x % 10u);
    x /= 10u;
    ++bufpos;
    } while(x);
    reverse(old, bufpos);
    if(bufpos >= BUFLIMIT) flushBuffer();
    }
    void OUTPUT::operator()(int x) {
    if(x<0) { operator()('-'); x = -x; }
    operator()(static_cast<unsigned>(x));
    }
    void OUTPUT::operator()(const char*s) {
    while(*s) operator()(*s++);
    }
    INPUT input;
    OUTPUT output;
    // }}}
    class Maximizer {
    vector<pair<int,int> > st;
    int pos;
    public:
    explicit Maximizer(int maxsize) {
    st.reserve(maxsize);
    pos = 0;
    }
    void add(pair<int,int> v) {
    while(size(st)>pos && st.back().first<v.first) st.pop_back();
    if(size(st)>pos && st.back().first == v.first)
    st.back().second += v.second;
    else
    st.push_back(v);
    }
    void remove(pair<int,int> v) {
    if(size(st)<=pos || st[pos].first > v.first) return;
    assert(st[pos].first == v.first);
    st[pos].second -= v.second;
    if(st[pos].second == 0) ++pos;
    }
    pair<int,int> maximum() {
    assert(size(st)>pos);
    return st[pos];
    }
    };
    const int MAXSIZE = 500;
    int SX, SY, SS;
    int tab[MAXSIZE][MAXSIZE];
    vector<Maximizer*> columnMaximizers(SX);
    void printElem(pair<int,int> p) {
    output(p.first);
    if(p.second>1) output('(', p.second, ')');
    }
    void goRow() {
    Maximizer m(SX);
    REP(x, SS) {
    m.add(columnMaximizers[x]->maximum());
    }
    printElem(m.maximum());
    FOR(x, SS, SX-1) {
    m.add(columnMaximizers[x]->maximum());
    m.remove(columnMaximizers[x-SS]->maximum());
    output(' ');
    printElem(m.maximum());
    }
    output('\n');
    }
    void go() {
    columnMaximizers.resize(SX);
    REP(x, SX) columnMaximizers[x] = new Maximizer(SY);
    REP(y, SS) {
    REP(x,SX) columnMaximizers[x]->add(make_pair(tab[y][x], 1));
    }
    goRow();
    FOR(y, SS, SY-1) {
    REP(x, SX) {
    columnMaximizers[x]->add(make_pair(tab[y][x], 1));
    columnMaximizers[x]->remove(make_pair(tab[y-SS][x], 1));
    }
    goRow();
    }
    REP(x, SX) delete columnMaximizers[x];
    columnMaximizers.clear();
    }
    int main() {
    int ntc = input.readInt();
    REP(tc,ntc) {
    SY = input.readInt();
    SX = input.readInt();
    SS = input.readInt();
    REP(y,SY) REP(x,SX) tab[y][x] = input.readInt();
    output("Case ", tc+1, ":\n");
    go();
    output('\n');
    }
    }  