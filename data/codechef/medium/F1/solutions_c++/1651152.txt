#include <cstdio>
#include <cstring>
#include <queue>
#include <utility>
using namespace std;
const int MAXN = 501;
 
int data[MAXN][MAXN];
int temp[10001];
pair<int, int> right[MAXN][MAXN], all[MAXN][MAXN];
 
int main()
{
	int T;
	scanf("%d", &T);
	for (int t = 1; t <= T; t++)
	{
		int N, M, K;
		priority_queue<pair<int, int> > Q;
		scanf("%d%d%d", &N, &M, &K);
		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= M; j++)
				scanf("%d", &data[i][j]);
		for (int i = 1; i <= N; i++)
		{
			memset(temp, 0, sizeof temp);
			while (!Q.empty()) Q.pop();
			for (int j = 1; j < K; j++)
			{
				Q.push(make_pair(data[i][j], -j));
				temp[data[i][j]]++;
			}
			for (int j = 1; j+K-1 <= M; j++)
			{
				Q.push(make_pair(data[i][j+K-1], -(j+K-1)));
				temp[data[i][j+K-1]]++;
				while (-Q.top().second < j || -Q.top().second > j+K-1)
				{
					temp[Q.top().first]--;
					Q.pop();
				}
				right[i][j] = make_pair(Q.top().first, temp[Q.top().first]);
			}
		}
		for (int j = 1; j+K-1 <= M; j++)
		{
			while (!Q.empty()) Q.pop();
			memset(temp, 0, sizeof temp);
			for (int i = 1; i < K; i++)
			{
				Q.push(make_pair(right[i][j].first, -i));
				temp[right[i][j].first] += right[i][j].second;
			}
			for (int i = 1; i+K-1 <= N; i++)
			{
				Q.push(make_pair(right[i+K-1][j].first, -(i+K-1)));
				temp[right[i+K-1][j].first] += right[i+K-1][j].second;
				while (-Q.top().second < i || -Q.top().second > i+K-1)
				{
					temp[Q.top().first] -= right[-Q.top().second][j].second;
					Q.pop();
				}
				all[i][j] = make_pair(Q.top().first, temp[Q.top().first]);
			}
		}
		if (t > 1)
			printf("\n");
		printf("Case %d:\n", t);
		for (int i = 1; i+K-1 <= N; i++)
			for (int j = 1; j+K-1 <= M; j++)
			{
				printf("%d", all[i][j].first);
				if (all[i][j].second > 1)
					printf("(%d)", all[i][j].second);
				if (j+K-1 == M)
					printf("\n");
				else
					printf(" ");
			}
	}
}