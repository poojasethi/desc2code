// Golf Course
// Source: CodeChef August 2009 Algorithm Challenge
// CodeChef ID: F1
// Date: 02-08-2009
// Author: Mark Greve
 
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
 
// FAST IO
char *start;
const int MAXBUF=10000000;
char buf[MAXBUF];
char outbuf[MAXBUF];
int outat;
void skip() {
	while (*start != 0  && !('0' <= *start && *start <= '9')) start++;
}
void GETNUM(int& n){
	skip();
	n=0;
	while ('0' <= *start && *start <= '9') {
		n = n*10 + *start-'0', ++start;
	}
}
void take_input() { // Take input using fast I/O
	int sz=fread(buf, sizeof(char), MAXBUF, stdin);
	buf[sz]=0;
	start=buf;
	outat=0;
}
 
void outc(char c) { outbuf[outat++] = c; }
void out(int x) {
	char s[100]; int at = 0;
	do { s[at++] = x%10, x/=10; } while(x>0);
	for (int i=at-1;i>=0;--i) outbuf[outat++] = s[i]+'0';
}
void flushoutbuf() {
	outbuf[outat++]='\0';
	printf("%s", outbuf);
}
// END FAST IO
 
 
typedef pair<int,int> pii;
#define MP make_pair
 
const int INF=1<<28;
const int MAX=501;
int A[MAX][MAX];
pii input[MAX][MAX];
pii input2[MAX][MAX];
pii ansl[MAX], ansr[MAX];
 
pii combine(const pii& a, const pii& b) {
	//printf("COMBINE (%d, %d) and (%d, %d)\n", a.first, a.second, b.first, b.second);
	if (a.first!=b.first) return max(a,b);
	return MP(a.first,a.second+b.second);
}
 
void solve(pii A[MAX][MAX], int M, int N, int K, pii ans[MAX][MAX]) {
	// Precompute row values.
	
	/*
	for (int i=0;i<M;++i) {
		for (int j=0;j<N;++j) {
			printf("[%d, %d] ", A[i][j].first, A[i][j].second);
		}
		printf("\n");
	}
	*/
	
	for (int i=0;i<M;++i) {
		int maxv = -INF, cnt = 0;
		for (int j=0;j<N-K+1;j+=K+1) {
 
			int maxv = -INF, cnt = 0;
			for (int k=j+K;k<min(j+2*K,N);++k) {
				if (A[i][k].first > maxv) maxv = A[i][k].first, cnt = 0;
				if (A[i][k].first == maxv) cnt += A[i][k].second;
				ansr[k] = MP(maxv,cnt);
				//printf("ANSR[%d]: %d %d\n", k, ansr[k].first, ansr[k].second);
			}
 
			maxv = -INF, cnt = 0;
			for (int k=j+K-1;k>=j;--k) {
				if (A[i][k].first > maxv) maxv = A[i][k].first, cnt = 0;
				if (A[i][k].first == maxv) cnt += A[i][k].second;
				ansl[k] = MP(maxv,cnt);
				//printf("ANSL[%d]: %d %d\n", k, ansl[k].first, ansl[k].second);
			}
 
			for (int k=j;k<min(j+K+1,N-K+1);++k) {
				if (k==j) ans[i][k] = ansl[k];
				else if (k==j+K) ans[i][k] = ansr[k+K-1];
				else ans[i][k] = combine(ansl[k], ansr[k+K-1]);
 
				//printf("ROW[%d][%d]: (%d, %d)\n", i,k, ans[i][k].first, ans[i][k].second);
			}
		}
	}
}
 
int main() {
	take_input();
 
	int NCASES;
	GETNUM(NCASES);
	for (int z=1;z<=NCASES;++z) {
		int M,N,K;
		GETNUM(M);
		GETNUM(N);
		GETNUM(K);
 
		for (int i=0;i<M;++i) {
			for (int j=0;j<N;++j) {
				GETNUM(A[i][j]);
				input[i][j] = MP(A[i][j],1);
			}
		}
 
		/*
		printf("-------\n");
		for (int i=0;i<M;++i) { 
			for (int j=0;j<N;++j) {
				printf("%d ", A[i][j]);
			}
			printf("\n");
		}
		printf("-------\n");
		*/
		
		// Solve on the rows and compress.
		solve(input,M,N,K,input2);
 
		// Transpose
		for (int i=0;i<M;++i) {
			for (int j=0;j<N-K+1;++j) {
				input[j][i] = input2[i][j];
				//printf("(%d, %d) ", input2[i][j].first, input2[i][j].second);
			}
			//printf("\n");
		}
		/*
		printf("xxxxxxxxxxxxxxx\n");
		for (int i=0;i<N-K+1;++i) {
			for (int j=0;j<M;++j) {
				printf("(%d, %d) ", input[i][j].first, input[i][j].second);
			}
			printf("\n");
		}
		*/
 
		// Solve the remaining problems on the columns
		//printf("DIMS %d %d\n", N-K+1,M);
		solve(input,N-K+1,M,K,input2);
 
		outc('C');
		outc('a');
		outc('s');
		outc('e');
		outc(' ');
		out(z);
		outc(':');
		outc('\n');
 
		for (int i=0;i<M-K+1;++i) {
			for (int j=0;j<N-K+1;++j) {
				if (j!=0) outc(' ');
				out(input2[j][i].first);
				if (input2[j][i].second!=1)
					outc('('), out(input2[j][i].second), outc(')');
			}
			outc('\n');
		}
		outc('\n');
	}
	flushoutbuf();
}