#include <cstdio>

using namespace std;

const int MAX = 500;
int rowmax[MAX][MAX];
int rowcnt[MAX][MAX];
int colmax[MAX][MAX];
int colcnt[MAX][MAX];
int temp[MAX+1];

int main()
{
    int t; // number of tests
    int m, n, k; // row, col, square width
    int i, j, x;
    int max_val, max_cnt;
    scanf("%d", &t);
    for (int c = 1; c <= t; c++)
    {
        scanf("%d%d%d", &m, &n, &k);
        for (i = 1; i <= m; i++)
        {
            // read initial k elements
            for (j = 1, max_val=0, max_cnt=0; j <= k; j++)
            {
                scanf("%d", &temp[j]);
                if (temp[j] > max_val)
                {
                    max_val = temp[j];
                    max_cnt = 1;
                }
                else if (temp[j] == max_val)
                    max_cnt += 1;
            }
            rowmax[i][1] = max_val;
            rowcnt[i][1] = max_cnt;
            // scan row
            for (j = k+1 ; j <= n; j++)
            {
                scanf("%d", &temp[j]);
                int in = temp[j];
                int out = temp[j-k];
                if (in > max_val)
                {
                    max_val = in;
                    max_cnt = 1;
                }
                else if (in == max_val && out < max_val)
                    max_cnt += 1;
                else if (in < out && out == max_val)
                {
                    max_cnt -= 1;
                    if (max_cnt == 0)
                    {
                        // scan
                        for (x=j-k+1, max_val=0, max_cnt=0; x <=j; x++)
                        {
                            if (temp[x] > max_val)
                            {
                                max_val = temp[x];
                                max_cnt = 1;
                            }
                            else if (temp[x] == max_val)
                                max_cnt += 1;
                        }
                    }
                }
                rowmax[i][j-k+1] = max_val;
                rowcnt[i][j-k+1] = max_cnt;
            }
        } // Row End

        /*
        for(i = 1; i <= m; i++)
        {
            for(j = 1; j <= n-k+1; j++)
                printf("%d(%d) ", rowmax[i][j], rowcnt[i][j]);
            printf("\n");
        }
        */

        // process by column
        for (j = 1; j <= n; j++)
        {
            // read initial k elements
            for (i = 1, max_val = 0, max_cnt = 0; i <= k; i++)
            {
                if (rowmax[i][j] > max_val)
                {
                    max_val = rowmax[i][j];
                    max_cnt = rowcnt[i][j];
                }
                else if (rowmax[i][j] == max_val)
                    max_cnt += rowcnt[i][j];
            }
            colmax[1][j] = max_val;
            colcnt[1][j] = max_cnt;
            // process rest
            for (i = k+1; i <= m; i++)
            {
                int in = rowmax[i][j];
                int out = rowmax[i-k][j];
                if (in > max_val)
                {
                    max_val = in;
                    max_cnt = rowcnt[i][j];
                }
                else if (in == max_val && out < max_val)
                    max_cnt += rowcnt[i][j];
                else if (in < out && out == max_val)
                {
                    max_cnt -= rowcnt[i-k][j];
                    if (max_cnt == 0)
                    {
                        // scan
                        for (x = i-k+1, max_val = 0, max_cnt = 0;
                                x <= i; x++)
                        {
                            if (rowmax[x][j] > max_val)
                            {
                                max_val = rowmax[x][j];
                                max_cnt = rowcnt[x][j];
                            }
                            else if (rowmax[x][j] == max_val)
                                max_cnt += rowcnt[x][j];
                        }
                    }
                }
                else if (in == max_val && out == max_val)
                {
                    max_cnt -= rowcnt[i-k][j];
                    max_cnt += rowcnt[i][j];
                }
                colmax[i-k+1][j] = max_val;
                colcnt[i-k+1][j] = max_cnt;
            }
        }

        printf("Case %d:\n", c);
        for(i = 1; i <= m-k+1; i++)
        {
            for(j = 1; j < n-k+1; j++)
            {
                if (colcnt[i][j] > 1)
                    printf("%d(%d) ", colmax[i][j], colcnt[i][j]);
                else
                    printf("%d ", colmax[i][j]);
            }
            if (colcnt[i][j] > 1)
                printf("%d(%d)\n", colmax[i][j], colcnt[i][j]);
            else
                printf("%d\n", colmax[i][j]);
        }
        printf("\n");
    }
    return 0;
}

