
#include <iostream>

using namespace std;

const int MAX_H = 10000;
const int MAX_M = 500;

struct Height
{
public:
    Height()
    {}
    
    Height(int _height, int _freq)
        : height(_height)
        , freq(_freq)
    {}
    
    int height;
    int freq;
};

class World
{
public:
    World(int _M, int _N, int _K)
        : M(_M)
        , N(_N)
        , K(_K)
    {}
    
    void read()
    {
        for (int row = 0; row < M; ++row)
            for (int col = 0; col < N; ++col)
                cin >> heights[row][col];
    }
    
    void init()
    {
        for (int row = 0; row <= M - K; ++row)
            for (int col = 0; col < N; ++col)
                initColumn(row, col);
        //print();
    }
    
    Height getMax(int row, int col) const
    {
        int max = -1;
        int freq = 0;
        for (int i = 0; i < K; ++i)
        {
            if (colMax[row][col + i].height > max)
            {
                max = colMax[row][col + i].height;
                freq = colMax[row][col + i].freq;
            }
            else if (colMax[row][col + i].height == max)
            {
                freq += colMax[row][col + i].freq;
            }
        }
        return Height(max, freq);
    }
    
    int getM() const {
        return M;
    }
    
    int getN() const {
        return N;
    }
    
    int getK() const {
        return K;
    }

private:
    void initColumn(int row, int col)
    {
        int max = -1;
        int freq = 0;
        for (int i = 0; i < K; ++i)
        {
            if (heights[row+i][col] > max)
            {
                max = heights[row+i][col];
                freq = 1;
            }
            else if (heights[row+i][col] == max)
            {
                freq++;
            }
        }
        colMax[row][col] = Height(max, freq);
    }
    
    void print()
    {
        for (int row = 0; row <= M - K; ++row)
        {
            for (int col = 0; col < N; ++col)
                cout << colMax[row][col].height << ' ';
            cout << endl;
        }
    }

    int M, N, K;
    Height colMax[MAX_M+1][MAX_M+1];
    int heights[MAX_M+1][MAX_M+1];
};

class Solver
{
public:
    Solver(World& _world)
        : world(_world)
    {}
    
    void solve()
    {
        world.init();
        for (int i = 0; i <= world.getM() - world.getK(); ++i)
        {
            //cout << "solve row: " << i << endl;
            solve(i);
        }
        cout << endl;
    }
    
private:
    void solve(int row)
    {
        for (int i = 0; i <= world.getN() - world.getK(); ++i)
        {
            const Height& h = world.getMax(row, i);
            print(h);
            cout << ' ';
        }    
        cout << endl;
    }
    
    void print(const Height& h)
    {
        cout << h.height;
        if (h.freq > 1)
            cout << '(' << h.freq << ')';
    }
    
    World& world;
};

int main()
{
    ios_base::sync_with_stdio(0);
    int T; cin >> T;
    for (int i = 0; i < T; ++i)
    {
        cout << "Case " << i+1 << ":" << endl;
        int M, N, K;
        cin >> M >> N >> K;
        World world(M, N, K);
        world.read();
        Solver solver(world);
        solver.solve(); 
    }
    return 0;
}
