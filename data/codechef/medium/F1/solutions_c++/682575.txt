#include <cstdio>

using namespace std;

const int MAX = 501;
int matrix[MAX][MAX];
int colmax[MAX][MAX];
int colcnt[MAX][MAX];

int main()
{
int t,m,n,k,max_val, max_cnt,in, out,c=1;
scanf("%d",&t);
while(t)
{
  printf("Case %d:\n", c);
  c++;
  scanf("%d %d %d",&m,&n,&k);
  for (int i=1;i<=m;i++)
  {
    for (int j=1;j<=n;j++)
    {
      scanf("%d",&matrix[i][j]);
    }
  }
  // compress by row
  for (int j = 1; j <= n; j++)
  {
    max_val = 0;
    max_cnt = 0;
    for (int i = 1; i <= k; i++)
    {
      if (matrix[i][j] > max_val)
      {
	max_val = matrix[i][j];
	max_cnt = 1;
      }
      else if (matrix[i][j] == max_val)
	max_cnt += 1;
    }
    colmax[1][j] = max_val;
    colcnt[1][j] = max_cnt;
    for (int i=k+1;i<=m;i++)
    {
      in = matrix[i][j];
      out = matrix[i-k][j];
      if (in > max_val)
      {
	max_val = in;
	max_cnt = 1;
      }
      else if (in == max_val && out < max_val)
	max_cnt += 1;
      else if (in < out && out == max_val)
      {
	max_cnt -= 1;
	if (max_cnt == 0)
	{
	  max_val = 0;
	  for (int x = i-k+1; x <= i; x++)
	  {
	    if (matrix[x][j] > max_val)
	    {
	      max_val = matrix[x][j];
	      max_cnt = 1;
	    }
	    else if (matrix[x][j] == max_val)
	      max_cnt += 1;
	  }
	}
      }
      colmax[i-k+1][j] = max_val;
      colcnt[i-k+1][j] = max_cnt;
    }
  }

  // compress by column
  for (int i = 1; i <= m - k + 1; i++)
  {
    max_val = 0;
    max_cnt = 0;
    for (int j = 1; j <= k; j++)
    {
      if (colmax[i][j] > max_val)
      {
	max_val = colmax[i][j];
	max_cnt = colcnt[i][j];
      }
      else if (colmax[i][j] == max_val)
	max_cnt += colcnt[i][j];
    }
    if (max_cnt > 1)
      printf("%d(%d) ", max_val, max_cnt);
    else
      printf("%d ", max_val);
    for (int j = k + 1; j <= n; j++)
    {
      in = colmax[i][j];
      out = colmax[i][j-k];
      if (in > max_val)
      {
	max_val = in;
	max_cnt = colcnt[i][j];
      }
      else if (in == max_val && out < max_val)
	max_cnt += colcnt[i][j];
      else if (in < out && out == max_val)
      {
	max_cnt -= colcnt[i][j-k];
	if (max_cnt == 0)
	{
	  max_val = 0;
	  for (int x = j-k+1; x <= j; x++)
	  {
	    if (colmax[i][x] > max_val)
	    {
	      max_val = colmax[i][x];
	      max_cnt = colcnt[i][x];
	    }
	    else if (colmax[i][x] == max_val)
	      max_cnt += colcnt[i][x];
	  }
	}
      }
      else if ( in == max_val && out == max_val)
      {
	max_cnt -= colcnt[i][j-k];
	max_cnt += colcnt[i][j];
      }
      if (max_cnt > 1)
	printf("%d(%d) ", max_val, max_cnt);
      else
	printf("%d ", max_val);
    }
    printf("\n");
  }
  t--;
}
return 0;
}