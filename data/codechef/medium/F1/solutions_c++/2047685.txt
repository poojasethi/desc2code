// code chef - easy - golf course - f1.cpp
 
#include <cstdio>
 
using namespace std;
 
const int maxN = 500;
int g[maxN][maxN];
int g1[maxN][maxN][2];
 
 
void scoreStrip(int grid[maxN][maxN], int x0, int y0, int x1, int y1, int &best, int& count)
{
    best = 0;
    count = 0;
    for (int x=x0; x<x1; x++) {
        for (int y=y0; y<y1; y++) {
            if (grid[x][y] > best) {
                best = grid[x][y];
                count = 1;
	    } else if (grid[x][y] == best) {
                count ++;
	    }
	}
    }
}
 
 
 
// find peak value in grid from x0<=x<x1, y0<=y<y1
// return peak and number of times found
void score(int grid[maxN][maxN][2], int x0, int y0, int x1, int y1, int &best, int& count)
{
    best = 0;
    count = 0;
    for (int x=x0; x<x1; x++) {
        for (int y=y0; y<y1; y++) {
            if (grid[x][y][0] > best) {
                best = grid[x][y][0];
                count = grid[x][y][1];
	    } else if (grid[x][y][0] == best) {
                count += grid[x][y][1];
	    }
	}
    }
}
 
void printPeak(int peak, int count)
{
    printf("%d", peak);
    if (count>1)
        printf("(%d)", count);
}
 
int main()
{
    int t;
    scanf("%d", &t);
 
    for (int iter=1; iter<=t; iter++) {
        printf("Case %d:\n", iter);
 
	int m,n,k;
	scanf("%d%d%d", &m,&n,&k);
 
        // m rows, n cols,   golf course is k x k
 
        for (int i=0; i<m; i++) {
	  for (int j=0; j<n; j++) {
	    scanf("%d", &g[i][j]);
	  }
	}
 
 
        // evaluate vertical k-strips at each possible location
        for (int col=0; col< n; col++) {
	  int peak, count;
          scoreStrip( g, 0,col, k, col+1, peak, count );
	  g1[0][col][0] = peak;
	  g1[0][col][1] = count;
	  for (int row=1; row<m-k+1; row++) {
                // this k-strip goes from row,col to row+k, col+1
                int leftPeak = g[row-1][col];
                int leftCount = 1;
                int rightPeak = g[row+k-1][col];
                int rightCount = 1;
                if (rightPeak>peak) {
                    // if new col is bigger, that is answer
                    peak = rightPeak;
                    count = rightCount;
		} else {
                    // otherwise, update current peak count
                    if (leftPeak==peak) {
                        count -= leftCount;
		    }
                    if (rightPeak==peak) {
                        count += rightCount;
		    }
                    if (count==0) {
                        // oops- all peak values fell off left edge
                        // and right column didn't replace them
                        // need to reevaluate whole square
			scoreStrip( g, row,col, row+k, col+1, peak, count);
		    }
		}
		g1[row][col][0] = peak;
		g1[row][col][1] = count;		
	  }
	}
 
        for (int row=0; row< m-k+1; row++ ) {
            // evaluate first position
	    int peak, count;
	    score(g1, row,0, row+1, k, peak, count);
            printPeak(peak,count);
 
            for (int col=1; col< n-k+1; col++ ) {
                // k x k square contains k  k-strips
                //   from row,col to < row+1, col+k
                int leftPeak = g1[row][col-1][0];
                int leftCount = g1[row][col-1][1];
                int rightPeak = g1[row][col+k-1][0];
                int rightCount = g1[row][col+k-1][1];
                if (rightPeak>peak) {
                    // if new col is bigger, that is answer
                    peak = rightPeak;
                    count = rightCount;
		} else {
                    // otherwise, update current peak count
                    if (leftPeak==peak) {
                        count -= leftCount;
		    }
                    if (rightPeak==peak) {
                        count += rightCount;
		    }
                    if (count==0) {
                        // oops- all peak values fell off left edge
                        // and right column didn't replace them
                        // need to reevaluate whole square
                        score(g1, row,col, row+1, col+k, peak, count);
		    }
		}
		printf(" ");
                printPeak(peak,count);
	    }
            printf("\n");
	}
	printf("\n");
    }
    return 0;
}