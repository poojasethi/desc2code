#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<stack>
using namespace std;

typedef long long int LL;
#define SIZE 2010
char line[SIZE];
int XX[100], YY[100];
int N, K, x, y;
#define LL '('
#define RR ')'

#define ASSERT(x) if((x) == false){exit(1);}
bool myComp2(const pair<int, int>&A, const pair<int, int>&B) {
    int diff = A.second - A.first;
    int diff2 = B.second - B.first;
    if (diff < diff2) {
        return true;
    }

    return A.first <= B.first;
}
bool myComp(const pair<int, int>&A, const pair<int, int>&B) {
    if (B.first > A.second) {
        return true;
    }
    if (A.first > B.second) {
        return false;
    }
    int diff = A.second - A.first;
    int diff2 = B.second - B.first;
    if (diff < diff2) {
        return true;
    }

    return A.first <= B.first;
}
void balance(int l, int r) {
    int start = 0;
    for (int i = l; i < r; i++) {
        if (line[i] == '\0') {
            if (start > 0) {
                line[i] = RR;
                start--;
            } else {
                line[i] = LL;
                start++;
            }
        } else {
            if (line[i] == LL) {
                start++;
            } else {
                start--;
            }
        }
    }
}
bool verify(string s) {
    for (int ii = 0; ii < K; ii++) {
        int l = XX[ii];
        int r = YY[ii];
        int start = 0;
        for (int i = l; i <= r; i++) {
            if (start < 0) {
                return false;
            }
            if (line[i] == LL) {
                start++;
            } else if (line[i] == RR) {
                start--;
            } else {
                ASSERT(false);
            }
        }
        if (start != 0) {
            return false;
        }
    }
    return true;
}
string get1() {
    memset(line, '\0', sizeof(line));
    vector<pair<int, int> > arr;
    for (int i = 0; i < K; i++) {
        int x = XX[i];
        int y = YY[i];
        arr.push_back(make_pair(x, y));
        line[x] = LL;
        line[y] = RR;
    }
    if (N <= 16) {

    } else {
        sort(arr.begin(), arr.end(), myComp);
    }
    for (int i = 0; i < arr.size(); i++) {
        balance(arr[i].first, arr[i].second);
    }
    bool leftAdded = false;
    for (int i = 0; i < N; i++) {
        if (line[i] == '\0') {
            if (leftAdded == false) {
                line[i] = LL;
            } else {
                line[i] = RR;
            }
            leftAdded ^= true;
        }
    }
    return string(line);
}

string get2() {
    memset(line, '\0', sizeof(line));
    vector<pair<int, int> > arr;
    for (int i = 0; i < K; i++) {
        int x = XX[i];
        int y = YY[i];
        arr.push_back(make_pair(x, y));
        line[x] = LL;
        line[y] = RR;
    }
    if (N <= 16) {

    } else {
        //sort(arr.begin(), arr.end(), myComp);
    }
    for (int i = 0; i < arr.size(); i++) {
        balance(arr[i].first, arr[i].second);
    }
    bool leftAdded = false;
    for (int i = 0; i < N; i++) {
        if (line[i] == '\0') {
            if (leftAdded == false) {
                line[i] = LL;
            } else {
                line[i] = RR;
            }
            leftAdded ^= true;
        }
    }
    return string(line);
}

string get3() {
    memset(line, '\0', sizeof(line));
    vector<pair<int, int> > arr;
    for (int i = 0; i < K; i++) {
        int x = XX[i];
        int y = YY[i];
        arr.push_back(make_pair(x, y));
        line[x] = LL;
        line[y] = RR;
    }
    //if (N <= 16) {

    //} else {
        sort(arr.begin(), arr.end(), myComp2);
    //}
    for (int i = 0; i < arr.size(); i++) {
        balance(arr[i].first, arr[i].second);
    }
    bool leftAdded = false;
    for (int i = 0; i < N; i++) {
        if (line[i] == '\0') {
            if (leftAdded == false) {
                line[i] = LL;
            } else {
                line[i] = RR;
            }
            leftAdded ^= true;
        }
    }
    return string(line);
}
void doThis() {
    scanf("%d %d", &N, &K);
    ASSERT(N>1 &&N < SIZE);

    for (int i = 0; i < K; i++) {
        scanf("%d %d", &x, &y);
        ASSERT(x >= 0 && x < N);
        ASSERT(y >= 0 && y < N);
        XX[i] = x;
        YY[i] = y;
    }

    /*    stack<int>st;
     for(int i=0;i<N;i++){
     if(line[i] == LL){
     st.push(i);
     }else if(line[i] == RR){
     arr.push_back(make_pair(st.top(),i));
     //printf("%d %d\n",st.top(),i);
     st.pop();
     }
     }*/
    string ans1 = get1();
    if (verify(ans1)) {
        printf("%s\n", ans1.c_str());
        return;
    }
    string ans2 = get2();
    if(verify(ans2)){
        printf("%s\n", ans2.c_str());
        return;
    }
    string ans3 = get3();
        //if(verify(ans3)){
            printf("%s\n", ans3.c_str());
            return;
        //}

//#ifndef LOCAL

//#endif
}

int main() {
#ifdef LOCAL
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
#endif
    int t = 1;
    scanf("%d", &t);
    while (t--) {
        doThis();
    }
    return 0;
}