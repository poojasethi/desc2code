from __future__ import print_function, division
import sys

# input format The first line of the input is a positive integer N indicating 
# the length of the permutation. The next line contains N integers and is a
# permutation of 1,2,...,N.  You may assume that N <= 1000.  
# Output format The
# first line of the output must contain a single integer k denoting the number 
# of cycles in the permutation. Line 2 should describe the first cycle, line 3 
# the second cycle and so on and line k+1 should describe the kth cycle.


def list_of_cycles(li_permutation):
    '''Returns a list of list where each list is a cycle. The input
    is a permutation of the integers 1,..,N where N <= 1e3'''
   

    list_cycles = []
    VISITED = False
    list_visited = [VISITED for _ in xrange(len(li_permutation))]
    for nxt_number, is_visited in enumerate(list_visited):
        
        if is_visited == True: continue
        li_cycle = []
        
        while is_visited == False:
            li_cycle.append(nxt_number+1)
            list_visited[nxt_number] = True

            nxt_number = li_permutation[nxt_number] - 1
            is_visited = list_visited[nxt_number]

        li_cycle.append(nxt_number+1)
        list_cycles.append(li_cycle)

    return list_cycles


# Run program
f = sys.stdin
if len(sys.argv) > 1:
    # python life_and_everything.py infile.txt returns 
    # ['life_and_everything.py', 'infile.txt']
    f = open(sys.argv[1])


# Remove irrelevant line    
f.readline()
li_permutation = map(int, f.readline().split())
f.close()

list_cycles = list_of_cycles(li_permutation)
cycle_output = map(lambda cycle: ' '.join(map(str, cycle)), list_cycles)
cycle_output = '\n'.join(cycle_output)

str_output = '{n_cycles}\n{list_cycles}'.format(
        n_cycles=len(list_cycles),
        list_cycles=cycle_output)
print(str_output)
