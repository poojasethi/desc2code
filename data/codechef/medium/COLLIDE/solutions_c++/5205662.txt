#include<iostream>
#include<math.h>
#include<cstdio>
#define gc getchar_unlocked
using namespace std;
float constant_equal=1111.111;

void fastin(int &x)
{
	register int a=gc();
	int sign=1;
	x=0;
	for(;a<48 || a>57;a=gc())
	{
		if(a=='-')
		sign=-1;
	}
	for(;a>47 && a<58;a=gc())
		x=(x<<1)+(x<<3)+a-48;	
	x=x*sign;
}

float solve_for_x(int a,int b,int c,int d)
{
	if(c!=d)
	{
		if(d==1)
		{
			if(c==0)
			return (float)a-(float)b;
			else 
			return ((float)a-(float)b)/2.0;
		}
		else if(d==-1)
		{
			if(c==0)
			return (float)b-(float)a;
			else 
			return ((float)b-(float)a)/2.0;
		}
		else
		{
			if(c==1)
			return (float)b-(float)a;
			else if(c==-1)
			return (float)a-(float)b;
		}
	}
	else if(c==0 && d==0) 
	{
		if(b==a)
		return constant_equal;
		else
		return 0;
	}
	else return 0;
}

float solve_for_y(int a,int b,int c,int d)
{
	if(c!=d)
	{
		if(d==1)
		{
			if(c==0)
			return (float)a-(float)b;
			else 
			return ((float)a-(float)b)/2.0;
		}
		else if(d==-1)
		{
			if(c==0)
			return (float)b-(float)a;
			else 
			return ((float)b-(float)a)/2.0;
		}
		else
		{
			if(c==1)
			return (float)b-(float)a;
			else if(c==-1)
			return (float)a-(float)b;
		}
	}
	else if(c==0 && d==0) 
	{
		if(b==a)
		return constant_equal;
		else
		return 0;
	}
	else return 0;
}

int main()
{
	int t,earth_x,earth_y,aster_x,aster_y,aster_total;
	int num_col,cons_xa,cons_ya,coef_xa,coef_ya;
	float min_collison,tx_col,ty_col;
	int cons_x,cons_y,coef_x,coef_y;
	char direction;
	fastin(t);
	while(t--)
	{
		num_col=0;
		min_collison=1000000000;
		fastin(earth_x);fastin(earth_y);
		scanf("%c",&direction);
		
		if ( direction == 'U' )
		{
			cons_x=earth_x; coef_x=0; coef_y=1; cons_y=earth_y;
		}
		else if ( direction == 'D' )
		{
			cons_x=earth_x; coef_x=0; coef_y=-1; cons_y=earth_y;
			
		}
		else if ( direction == 'R' )
		{
			cons_x=earth_x; coef_x=1; coef_y=0; cons_y=earth_y;
		}
		else 
		{
			cons_x=earth_x; coef_x=-1; coef_y=0; cons_y=earth_y;
		}
		
		fastin(aster_total);
		while(aster_total--)
		{
			fastin(aster_x);fastin(aster_y);
			scanf("%c",&direction);
			if ( direction == 'U' )
			{
				cons_xa=aster_x; coef_xa=0; coef_ya=1; cons_ya=aster_y;
			}
			else if ( direction == 'D' )
			{
				cons_xa=aster_x; coef_xa=0; coef_ya=-1; cons_ya=aster_y;
			}
			else if ( direction == 'R' )
			{
				cons_xa=aster_x; coef_xa=1; coef_ya=0; cons_ya=aster_y;
			}
			else
			{
				cons_xa=aster_x; coef_xa=-1; coef_ya=0; cons_ya=aster_y;
			}		
			
			tx_col=solve_for_x(cons_xa,cons_x,coef_xa,coef_x);
			ty_col=solve_for_y(cons_ya,cons_y,coef_ya,coef_y);
			//cout<<tx_col<<"= x time "<<ty_col<<"= y time\n";

		if(tx_col>0 && ty_col>0)
		{
			if(tx_col==ty_col)
			{
				if(tx_col<min_collison) min_collison=tx_col;
				num_col++;
			}
			else if(tx_col==constant_equal)
			{
				if(ty_col<min_collison) min_collison=ty_col;
				num_col++;
			}
			else if(ty_col==constant_equal)
			{
				if(tx_col<min_collison) min_collison=tx_col;
				num_col++;
			}
		}
		
		}
		if(num_col>0)
		printf("%.1f\n",min_collison);
		else
		printf("SAFE\n");
	}
	return 0;
}


