
// in the name of god
#include <bits/stdc++.h>
using namespace std;
#define     all(v)            (v).begin(),(v).end()
#define     Set(a,x)          memset((a),(x),sizeof(a))
#define     eps               1e-15
#define     sz(x)             (int)((x).size())
#define 	Sort(x)			  (sort(all(x)))

typedef long long ll;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef pair<int, int> pii;

const int MAXN = 2015;

vector <pii> arr;
map <int,char> mapp;
double bfs(pii s) {
	double ret=0.0;

	while(1) {
		//cout << "source is here : " << s.first << ' ' << s.second << endl;
		//cout << "asteroid is here : " << arr[0].first << ' ' << arr[0].second << endl;
		if(ret > 1000.) return 0.0;
		char edir = mapp[0];
		for(int i=0 ; i<sz(arr) ; i++) {
			char dir = mapp[i + 1];
			if(s == arr[i]) return ret;
			if(edir == 'r' && dir == 'l' && s.second == arr[i].second && arr[i].first == s.first+1){
				return ret + 0.5;
			}
			else if(edir == 'l' && dir == 'r' && s.second == arr[i].second && arr[i].first+1 == s.first){
				return ret + 0.5;
			}
			else if(edir == 'd' && dir == 'u' && s.first == arr[i].first && s.second-1 == arr[i].second){
				return ret + 0.5;
			}
			else if(edir == 'u' && dir == 'd' && s.first == arr[i].first && s.second == arr[i].second-1){
				return ret + 0.5;
			}
		}
		ret += 1.;
		if(edir == 'r') {
			s.first++;
		}
		else if(edir == 'l') {
			s.first--;
		}
		else if(edir == 'u') {
			s.second ++;
		}
		else {
			s.second --;
		}
		for(int i=0 ; i<sz(arr) ; ++i) {
			char dir = mapp[i + 1];
			if(dir == 'r') {
				arr[i].first++;
			}
			else if(dir == 'l') {
				arr[i].first--;
			}
			else if(dir == 'u') {
				arr[i].second ++;
			}
			else {
				arr[i].second --;
			}
		}
	}
}

int main() {
	//freopen("a.in","r",stdin);
	int t; cin >> t;
	while(t--) {
		arr.clear();
		mapp.clear();
		pii e;
		int n;
		char d;
		cin >> e.first >> e.second >> d;
		d=tolower(d);
		mapp[0]=d;
		cin >> n;
		arr.resize(n);
		for(int i=0 ; i<n ; ++i) {
			cin >> arr[i].first >> arr[i].second >> d;
			d=tolower(d);
			mapp[i + 1] = d;
		}

		double ans=bfs(e);
		if(ans == 0.0) {
			printf("SAFE\n");
		}
		else {
			printf("%.1lf\n",ans);
		}

	}
	return 0;
}
/*

 *
 *
 */
