#include<iostream>
#include<math.h>
#include<algorithm>
#include<stdio.h>
#include<string.h>
#include<set>
#include<map>
#include<vector>
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORL(i,a,b) for(int i=a;i<=b;i++)
#define FORI(i,a,b,inc) for(int i=a;i<b;i=i+inc)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define LL long long
#define MAX 100010
#define INF 1000000010
#define MOD 1000000007
#define pb push_back
using namespace std;
struct node
{
       int x,y;
       char dir;
};
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
              vector<node> v;
              int eX,eY;
              char eDir;
              cin>>eX>>eY>>eDir;
              int n;
              scanf("%d",&n);
              FOR(i,0,n)
              {
                        node temp;
                        cin>>temp.x>>temp.y>>temp.dir;
                        v.pb(temp);
                        
              }
              int dis = INF;
              if(eDir == 'L')
              {
                   FOR(i,0,v.size())
                   {
                         if(v[i].x < eX)
                         {
                               if(v[i].y > eY && v[i].dir == 'D' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eX-v[i].x)));
                               if(v[i].y < eY && v[i].dir == 'U' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eX-v[i].x)));   
                               if(v[i].y == eY && v[i].dir == 'R')
                                         dis = min(dis,(abs(eX-v[i].x)));   
                         }           
                   }   
              }
              if(eDir == 'R')
              {
                   FOR(i,0,v.size())
                   {
                         if(v[i].x > eX)
                         {
                               if(v[i].y > eY && v[i].dir == 'D' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eX-v[i].x)));
                               if(v[i].y < eY && v[i].dir == 'U' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eX-v[i].x)));   
                               if(v[i].y == eY && v[i].dir == 'L')
                                         dis = min(dis,(abs(eX-v[i].x)));   
                         }           
                   }   
              }
              if(eDir == 'D')
              {
                   FOR(i,0,v.size())
                   {
                         if(v[i].y < eY)
                         {
                               if(v[i].x > eX && v[i].dir == 'L' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eY-v[i].y)));
                               if(v[i].x < eX && v[i].dir == 'R' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eY-v[i].y)));   
                               if(v[i].x == eX && v[i].dir == 'U')
                                         dis = min(dis, abs(eY-v[i].y));   
                         }           
                   }   
              }
              if(eDir == 'U')
              {
                   FOR(i,0,v.size())
                   {
                         if(v[i].y > eY)
                         {
                               if(v[i].x > eX && v[i].dir == 'L' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eY-v[i].y)));
                               if(v[i].x < eX && v[i].dir == 'R' && abs(eX-v[i].x) == abs(v[i].y-eY))
                                         dis = min(dis,2*(abs(eY-v[i].y)));   
                               if(v[i].x == eX && v[i].dir == 'D')
                                         dis = min(dis,abs(eY-v[i].y));   
                         }           
                   }   
              }
              if(dis == INF)
                     printf("SAFE\n");
              else
                     printf("%0.1lf\n",(double)dis/2.0);
    }
    //system("pause");
    return 0;
}
