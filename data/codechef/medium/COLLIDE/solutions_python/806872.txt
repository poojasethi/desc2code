from __future__ import division

class Point:
    def __init__(self, x, y, a, b):
        self.x = x
        self.y = y
        self.a = a
        self.b = b


def nub(xs): return [x for x in xs if x > 0]

def create_line(x, y, direction):
    x, y = map(int, [x, y])
    if direction == 'L': a, b = -1, 0
    elif direction == 'R': a, b = 1, 0
    elif direction == 'U': a, b = 0, 1
    else: a, b = 0, -1
    return Point(x, y, a, b)

def collision_time(earth, asteroid):
    collide = (asteroid.x - earth.x) * (earth.b - asteroid.b) == (asteroid.y - earth.y) * (earth.a - asteroid.a)
    time1 = (asteroid.x - earth.x) / (earth.a - asteroid.a) if (earth.a != asteroid.a) else False
    time2 = (asteroid.y - earth.y) / (earth.b - asteroid.b) if (earth.b != asteroid.b) else False
    return (time1 or time2) if collide else False

def test_case(earth, asteroids):
    lines = nub([collision_time(earth, ast) for ast in asteroids])
    if not lines: return "SAFE"
    time = min(lines)
    return "%.1f" % time

def main():
    ncases = int(raw_input())
    for i in range(ncases):
        earth = create_line(*raw_input().strip().split())
        ast = int(raw_input())
        asteroids = [create_line(*raw_input().strip().split()) for k in range(ast)]
        print test_case(earth, asteroids)

if __name__ == '__main__':
    main()

