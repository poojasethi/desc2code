#-*- coding:utf-8 -*-

import sys


# class Point:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

#     def mul(self, k):
#         return Point(k * self.x, k * self.y)

#     def __add__(self, other):
#         return Point(self.x + other.x, self.y + other.y)

#     def __sub__(self, other):
#         return self + (-other)

#     def __neg__(self):
#         return Point(-self.x, -self.y)

#     def __eq__(self, other):
#         return self.x == other.x and self.y == other.y

#     def __getitem__(self, index):
#         return (self.x, self.y)[index]

#     def __str__(self):
#         return "(%d;%d)" % (self.x, self.y)


DIRS = dict(
    U=(0, 1),
    D=(0, -1),
    R=(1, 0),
    L=(-1, 0)
)
KOEF = 0.2


def div(a, b):
    return round(float(a) / b, 1)


# class Moving:
#     def __init__(self, x, y, dir):
#         self.p = Point(x, y)
#         self.dir = Point(*DIRS[dir.upper()])

#     def collide(self, other):
#         times = []
#         for coord in range(2):
#             d = abs(self.p[coord] - other.p[coord])
#             d2 = abs((self.p + self.dir.mul(KOEF) - other.p)[coord])
#             d3 = abs((other.p + other.dir.mul(KOEF) - self.p)[coord])
#             d_next = abs((self.p + self.dir.mul(KOEF) - (other.p + other.dir.mul(KOEF)))[coord])
#             if d2 > d or d3 > d:
#                 return None

#             speed = abs(d_next - d)
#             if speed == 0:
#                 if self.p[coord] != other.p[coord]:
#                     return None
#                 continue
#             times.append( div(d, speed / KOEF) )

#         if len(times) == 2 and times[0] != times[1]:
#             return
#         return times[0]


def collide_coord(ex, edx, x, dx):
    d = abs(ex - x)
    d2 = abs(ex + edx - x)
    d3 = abs(ex - x - dx)
    if d2 > d or d3 > d:
        return False

    d_next = abs(ex + edx * KOEF - x - dx * KOEF)
    speed = abs(d_next - d)
    if speed == 0:
        if ex != x:
            return
        return "all"  # all
    else:
        return div(d, speed / KOEF)


def main():
    t = int(raw_input())
    for _ in range(t):
        ex, ey, dir = sys.stdin.readline().strip().split()
        ex = int(ex)
        ey = int(ey)
        edx, edy = DIRS[dir]

        n = int(sys.stdin.readline())
        min_time = float("+inf")
        for _ in range(n):
            x, y, dir = sys.stdin.readline().strip().split()
            x = int(x)
            y = int(y)
            dx, dy = DIRS[dir]

            tx = collide_coord(ex, edx, x, dx)
            if tx is False:
                continue
            ty = collide_coord(ey, edy, y, dy)
            if ty is False:
                continue

            if tx == "all":
                min_time = min(min_time, ty)
            elif ty == "all":
                min_time = min(min_time, tx)
            elif tx == ty:
                min_time = min(min_time, tx)

        print min_time if min_time < 1000000 else "SAFE"


if __name__ == '__main__':
    main()
