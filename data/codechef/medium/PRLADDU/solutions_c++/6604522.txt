#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#ifndef ONLINE_JUDGE
#define gc() getchar()
#define pc(x) putchar(x)
#else
#define gc() getchar_unlocked()
#define pc(x) putchar_unlocked(x)
#endif

/*
#ifndef ONLINE_JUDGE
#define pc(x) putchar(x)
#else
#define pc(x) putchar_unlocked(x)
#endif
*/

template <typename DataType>
void fastread_custom ( DataType * a)
{
    char c=0;
    *a=0;

    while(c<33)
    {
        c=gc();
    }
    while(c>33)
    {
        *a=(*a<<3)+(*a<<1)+c-'0';
        c=gc();
    }
}

void fastread_int (int * a)
{
    char c=0;
    *a=0;  //first flush all previous data

    // now we shall eat all spaces before the actual num
    //as it would also count otherwise (remember ' ' has
    // also got an ASCII value, i guess 32
    while(c<33)
    {
        c=gc();
    }

    //now we shall manipulate the number. i hope
    //you know the math
    while(c>33)
    {
        *a=(*a<<3)+(*a<<1)+c-'0'; //why? :D
        c=gc();
    }
}

void writeInt (int n)
{
    if(n!=0)
    {
        int N = n, rev, count = 0;
        rev = N;
        if (N == 0)
        {
            pc('0');
            pc('\n');
            return ;
        }
        while ((rev % 10) == 0)
        {
            count++;    //obtain the count of the number of 0s
            rev /= 10;
        }
        rev = 0;
        while (N != 0)
        {
            rev = (rev<<3) + (rev<<1) + N % 10;    //store reverse of N in rev
            N /= 10;
        }
        while (rev != 0)
        {
            pc(rev % 10 + '0');
            rev /= 10;
        }
        while (count--) pc('0');
    }
    else
        printf("0");
}

//fastread input for negative integers
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

#include <cstdio>
#include <iostream>
using std::string;

static struct IO {
	char tmp[1 << 10];

	// fast input routines
	char cur;

//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }

	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

	inline IO& operator >> (char & c) { c = nextChar(); return *this; }

	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }

	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }

	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}

defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)

	// fast output routines

//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }


#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }

defineOutFor(int)
defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;


int main()
{
    int t,n,i,a,j;
    long long count=0;
    //fastread_int(&t);
    cin>>t;
    vector<pair<int,int> > v1,v2;
    while(t--)
    {
        //fastread_int(&n);
        cin>>n;
        v1.clear();
        v2.clear();
        count=0;
        for(i=0; i<n; i++)
        {
            //fastread_int(&a);
            //scanf("%d",&a);
            //scanint(a);
            cin>>a;
            if(a>=0)
                v1.push_back(pair<int ,int>(a,i));
            else v2.push_back(pair<int ,int>(abs(a),i));
        }
        /*for(i=0; i<v1.size(); i++)
            cout<<v1[i].first<<" "<<v1[i].second<<endl;
            cout<<endl;
        for(i=0; i<v2.size(); i++)
            cout<<v2[i].first<<" "<<v2[i].second<<endl;
            cout<<endl;
            */
        for(i=0,j=0; i<v1.size()&&j<v2.size();)
        {
            if(v1[i].first==v2[j].first)
            {
                count+=(v1[i].first)*abs(v1[i].second-v2[j].second);
                //cout<<count<<endl;
                i++;
                j++;
            }
            else if(v1[i].first>v2[j].first)
            {
                count+=(v2[j].first)*abs(v1[i].second-v2[j].second);
                //cout<<count <<endl;
                v1[i].first-=v2[j].first;
                j++;
            }
            else if(v1[i].first<v2[j].first)
                {
                count+=(v1[i].first)*abs(v1[i].second-v2[j].second);
                //cout<<count <<endl;
                v2[j].first-=v1[i].first;
                //cout<<v2[j].first<<endl;
                i++;
            }
        }
        //printf("%lld\n",count);
        cout<<count<<"\n";
    }
}