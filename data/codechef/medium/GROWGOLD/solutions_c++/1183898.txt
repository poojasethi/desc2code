/*
 	Team Proof
	IIT Delhi
 
	C++ Template
 */


#include <iostream>
#include <cstdio>
#include <cstring>
//#include <cmath>
#include <cassert>
#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
using namespace std;

#define s(T) scanf("%d", &T)
#define sl(T) scanf("%lld", &T)
#define fill(a, val) memset(a, val, sizeof(a))
#define mp make_pair

const int PRIME = 100000007;

int totalCases, testNum;
int init, slot1, slot2, K, N;

vector <vector <int> > mult(const vector <vector<int> > &A, const vector <vector<int> > &B, int MOD)
{
	//int P = A.size(); int Q = A[0].size(); int R = B[0].size();
	int P, Q, R;
	P = Q = R = K;
	//vector <vector <int> > ret(K, K);
	vector <vector <int> > ret;
	ret.resize(P);
	for(int i = 0; i < P; i++)
	{
		ret[i].resize(R);
		for(int j = 0; j < R; j++)
		{	
			long long sum = 0;
			for(int k = 0; k < Q; k++)
				sum += A[i][k] * 1ll * B[k][j];
			ret[i][j] = (sum >= MOD ? sum % MOD : sum);
//			ret[i][j] = sum % MOD;
		}
	}
	return ret;
}

 vector <vector<int> > pow(const vector <vector<int> > &A, int exp, int MOD)
{
	int N = A.size();
	vector <vector <int> > ret;
	if(exp == 1)
		return A;
	
	vector <vector <int> > rec;
	rec = pow(mult(A, A, MOD), exp>>1, MOD);
	if(exp & 1)
		return mult(A, rec, MOD);
	else 
		return rec;
}

int pow(int a, int exp, int MOD)
{
	if(exp == 0)
		return 1;
	if(exp & 1)
		return ( a * 1ll * pow((a*1ll*a)%MOD, exp>>1, MOD)) % MOD;
	else 
		return pow((a*1ll * a)%MOD, exp>>1, MOD);
}


void preprocess()
{
	
}

bool input()
{
	s(init);
	s(slot1);
	s(slot2);
	s(K);
	s(N);
	return true;
}

void solve()
{
	vector <int> initial;
	initial.push_back(init);
	for(int i = 0; i < slot1; i++)
		initial.push_back(initial[i] + 1);
	for(int i = slot1; i < slot1+slot2; i++)
		initial.push_back(initial[i]*2 % PRIME);
	if(N <= slot1 + slot2 + 1)
	{
		printf("%d\n", initial[N-1]);
		return;
	}
	
	vector <vector <int> > T;
	T.resize(K);
	for(int i = 0; i < K; i++)
	{
		T[i].resize(K);
		for(int j= 0; j < K; j++)
			T[i][j] = 0;
		if(i > 0)
			T[i][i-1] = 1;
		else 
			for(int j = 0; j < K; j++)
				T[i][j] = 1;
	}
		
	T = pow(T, N - (slot1 + slot2 + 1), PRIME-1);
	
	int ans =1 ;
	for(int i = 0; i < K; i++)
		ans = (ans * 1ll * pow(initial[slot1 + slot2-i], T[0][i], PRIME)) % PRIME;
	printf("%d\n", ans);
}

int main()
{
	preprocess();
	s(totalCases);
	for(testNum = 1; testNum <= totalCases; testNum++)
	{
		if( !input())
			break;
		solve();
	}
}
