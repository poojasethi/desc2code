//author:jzj
#define ONLINE_JUDGE
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
#include <cassert>
//#include <tuple>
#include <climits>
using namespace std;

#define PB push_back
#define MP make_pair
#define MT make_tuple

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(auto it=(c).begin(); it!=(c).end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;
const int P = 100000007;
const int maxk=120;
int initTax,slot1,slot2,K,N;
int64 gold[maxk];

struct Matrix{
	int height, width;
    int **data;
    
    Matrix(int _height, int _width) : height(_height), width(_width){
        data = new int*[height];
        rep(i,height) data[i] = new int[width], memset(data[i], 0, sizeof(int) * width);
    }
    
	static Matrix id(int num)
	{
		Matrix res(num,num);
		rep(i,num) res.data[i][i] = 1;
		return res;
	}
    
	Matrix multiply(const Matrix &b)
	{
		Matrix res(height, b.width);
		rep(i,height) rep(j,b.width)
		{
            int64 tmp = 0;
            rep(k,width) tmp += int64(data[i][k]) * b.data[k][j]; 
			res.data[i][j] = tmp % (P - 1);
		}
		return res;
	}
    
	Matrix pow(int exp)
	{
		if(!exp)
		{
			return id(height);
		}
		Matrix res = pow(exp/2);
		res = res.multiply(res);
		if(exp&1) res=res.multiply(*this);
		return res;
	}
    

};

int64 powMod(int64 a,int64 b,int64 mod)
{
	if (b == 0) {
        return 1;
    }
    int64 result = powMod(a, b >> 1, mod);
    result = (result * result) % mod;
    if (b % 2 == 1) {
        result = (result * a) % mod;
    }
    return result;
}

int main(void)
{
#ifndef ONLINE_JUDGE
	cout<<fixed<<setprecision(6);
#endif
	int T; cin>>T;
	while(T--)
	{
		cin>>initTax>>slot1>>slot2>>K>>N; --N;
		gold[0]=initTax; 
		FOR(i,1,slot1) gold[i]=(gold[i-1]+1)%P;
		FOR(i,slot1+1,slot1+slot2) gold[i] = (gold[i - 1] * 2) % P;
		if (N <= slot1 + slot2) {
            cout<<gold[N]<<endl;
            continue;
        }
		int PP = slot1 + slot2;
		Matrix mat(K,K);
		rep(i,K) mat.data[0][i] = 1;
		rep(i,K-1) mat.data[i+1][i] =1;
		Matrix exps = mat.pow(N-PP);
		int64 res = 1;
		rep(i,K) res=(res*powMod(gold[PP-i],exps.data[0][i],P))%P;
		cout<<res<<endl;
	}
	return 0;
} 
