#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <list>
#include <map>
#include <set>
#include <utility>
#include <iostream>
#include <iomanip>
#include <string.h>

using namespace std;

typedef long long ll;
#define debug(args...) dbg(),args
#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define S(N) scanf("%d", &N)
#define PB(A,B) A.push_back(B);
#define ALL(A) A.rbegin(),A.rend()
#define MEM(A,B) memset(A,B,sizeof(A))
#define MAX(A,B) (A > B) ? A : B
#define MIN(A,B) (A < B) ? A : B
#define DBGCHECK if (argc > 1) DBG = ((*argv[1] == '0') ? 0 : 1)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define LIM 105
#define MOD 100000007
#define MOD2 100000006
bool DBG;
struct dbg { template<typename T> dbg& operator , (const T& v) { if (DBG) cerr << v << " "; return *this; } ~dbg() { if (DBG) cerr << endl; } };

int init,slot1,slot2,k,n;
int tax[LIM] , Amat[105][105], Cmat[105][105], Rmat[105][105];

/* MATRIX EXPONENTIATION
 * Amat is k x k matrix raised to power p
 * Cmat gives the final ans
 * Rmat stores intermediate matrices
 *
*/

void mulmat(int A[105][105], int B[105][105])
{
    //(a^x) % Mod == (a^(x % (Mod - 1)) % Mod
    MEM(Rmat,0);
    for (int i = 0; i < LIM; i++)
        for (int j = 0; j < LIM; j++){
            ll x = 0;
            for (int t = 0; t < LIM; t++)
                x += 1ll*A[i][t] * B[t][j];
            if(x >= MOD2) x %= MOD2;
            Rmat[i][j] = x;
            }
}

void pow_matrix(int p)
{
    MEM(Cmat,0);
    for (int i = 0; i < LIM; ++i)
        Cmat[i][i] = 1;

    while (p > 0)
    {
        if (p%2 == 1){
             mulmat(Cmat, Amat);
             memcpy(Cmat, Rmat, sizeof(Rmat));
        }
        p /= 2;
        mulmat(Amat, Amat);
        memcpy(Amat, Rmat, sizeof(Rmat));
    }
}

int powmod(ll a,ll P){
    ll r = 1;
    for(;P>0;P>>=1)
    {
        if(P&1) r = (r*a)%MOD;
        a = (a*a)%MOD;
    }
    return r;
}

int main()
{
    int t;
    S(t);
    while(t--){
        scanf("%d %d %d %d %d", &tax[0], &slot1, &slot2, &k, &n);
        --n;
        int m = slot1 + slot2;
        EFOR(i,1,slot1)
            tax[i] = tax[i-1] + 1;
        EFOR(i,slot1 + 1,m)
            tax[i] = (2*tax[i-1])%MOD;
        if(n<=m)
            printf("%d\n",tax[n]);
        else
        {
            MEM(Amat,0);
            FOR(i,0,k){
                Amat[0][i] = 1;
                Amat[i+1][i] = 1;
            }
            pow_matrix(n-m);
            ll ans = 1;
            FOR(i,0,k)
                ans = ( ans * powmod(tax[m-i],Cmat[0][i]) ) % MOD;
            printf("%lld\n",ans);
        }
    }
    return 0;
}
