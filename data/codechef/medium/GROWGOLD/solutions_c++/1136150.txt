#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <set>
#include <map>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#define ldb long double
#define ll long long
#define fi first
#define se second
#define fill(a, c) memset(a, c, sizeof(a))
#define sqr(a) ((a) * (a))
#define nextLine() {int c = 0; while((c = getchar()) != 10 && c != EOF);}
#define getBit(mask, k) (((mask) / pw[k]) % pw[1])
#define setBit(mask, k, l) (((mask) / pw[k + 1] * pw[1] + (l)) * pw[k] + ((mask) % pw[k]))
#define debug(a) cerr << #a << " = " << a << " ";
#define debugl(a) cerr << #a << " = " << a << "\n";
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define ff first
#define ss second 
const int inf = 1 << 28;
using namespace std;

const ll mod = 100000000 + 7;
int g;
int M;
int A, S1, S2, K, N;
ll a[254], v[254], b[254];
ll m[103][103];
ll mt[103][103];
ll t[103][103];
ll d[103][103];

void load()
{
	cin >> A >> S1 >> S2 >> K >> N;
}

ll fastPow(ll a, int p)
{
	ll d = 1;
	while (p)
	{
		if (p & 1)
			d = (d * a) % mod;
		a = (a * a) % mod;
		p >>= 1;
	}
	return d;
}

void solve()
{
	N--;
	a[0] = A % mod;
	for (int i = 1; i <= S1; i++)
		a[i] = (a[i - 1] + 1) % mod;
	for (int i = S1 + 1; i <= S1 + S2; i++)
		a[i] = (a[i - 1] * 2) % mod;
	if (N <= S1 + S2)
	{
		cout << a[N] << "\n";
		return;
	}
	for (int i = 0; i < K; i++)
		b[i] = 1;
	memset(m, 0, sizeof m);
	memset(d, 0, sizeof d);
	for (int i = 0; i + 1 < K; i++)
		m[i][i + 1] = 1;
	for (int i = 0; i < K; i++)
	{
		m[K - 1][i] = 1;
		d[i][i] = 1;
	}

	N -= S1 + S2;
	N += K - 1;
	while (N)
	{
		if (N & 1)
		{
			for (int i = 0; i < K; i++)
				for (int j = 0; j < K; j++)
				{
					t[i][j] = 0;
					for (int k = 0; k < K; k++)
						t[i][j] += d[i][k] * m[k][j];
					t[i][j] %= mod - 1;
				}
			for (int i = 0; i < K; i++)
				memcpy(d[i], t[i], sizeof(ll) * K);
		}
		for (int i = 0; i < K; i++)
				for (int j = 0; j < K; j++)
				{
					t[i][j] = 0;
					for (int k = 0; k < K; k++)
						t[i][j] += m[i][k] * m[k][j];
					t[i][j] %= mod - 1;
				}
			for (int i = 0; i < K; i++)
				memcpy(m[i], t[i], sizeof(ll) * K);
		N >>= 1;
	}
	ll res = 1;
	for (int i = 0; i < K; i++)
	{
		res = (res * fastPow(a[S1 + S2 - (K - i) + 1], d[0][i])) % mod;
	}
	cout << res << "\n";
}

#define file "a"
int main()
{
	#ifndef ONLINE_JUDGE
//		freopen(file".in", "rt", stdin);
//		freopen(file".out", "wt", stdout);
	#endif
	int T;
	cin >> T;
	for (int i = 0; i < T; i++)
	{
		load();
		solve();
	}
	return 0;
}
