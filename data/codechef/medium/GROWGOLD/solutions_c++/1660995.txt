#include<iostream>
#include<cassert>
#include<cstdio>
#include<cstdlib>
using namespace std;

const int MOD = 100000007;
const int ms1 = 50;
const int ms2 = 50;
long long f[2+ ms1+ ms2];

int powerMod(int a, int pow, int m)
{
    assert(pow>0);
    if(pow == 1)
    return a;
    if(pow%2 == 1)
    {
     long long tmp = (long long)powerMod(a, pow-1, m)*a ;
      if(tmp>=m) tmp%= m;
      //cout<<tmp<<" "<<pow<<endl;
      return tmp;
    }
    long long x, tmp;
    x = powerMod(a, pow/2, m );
    tmp = (long long) x*x;
    if(tmp>=m)
    tmp %= m;
    //cout<<tmp<<" "<<pow<<endl;
    return tmp;


}
//Matrix exponentiation is used for recurrence relation here
struct matrix
{
  int row, col;
  long long **arr;
};

matrix matrixNew(int row, int col)
{
    matrix res;
    res.row = row;
    res.col = col;
    res.arr = new long long*[row];
    for(int i=0; i<row; i++)
    res.arr[i] = new long long[col];

    return res;
}
matrix matrixInit(matrix* m)
{
    for(int i=0; i<m->row; i++)
    for(int j=0; j<m->col; j++)
    m->arr[i][j] = 0;
}

void matrixPrint(matrix m)
{
    for(int i=0; i<m.row; i++)
    {
        for(int j=0; j<m.col; j++)
        cout<<m.arr[i][j]<<" ";
        cout<<endl;
    }
}
void matrixDelete(matrix *m)
{
    free(m->arr);
}
void  matrixMultMod(matrix a, matrix b, matrix* ans,  int m)
{
    assert((ans->col == b.col && ans->row == a.row));
    assert(a.col == b.row);
    matrixInit(ans);
    for(int i=0; i<a.row; i++)
    {
        for(int j=0; j<b.col; j++)
        {
            for(int k =0; k<a.col; k++)
            {
                if(a.arr[i][k])
                {
                    ans->arr[i][j]+= a.arr[i][k] * b.arr[k][j];
                }
            }
            if(ans->arr[i][j]>=m)
            ans->arr[i][j] %= m;
            //can do this outside loop as 8 + 8 + 2 less than 19 (log(base 10) 2 ^ 64)
        }
    }

}

void matrixPowMod(matrix a, matrix* ans, int pow,  int m)
{
    assert(pow>0);
    assert(a.row == a.col && ans->row == ans->col && ans->row == a.row );
    if(pow == 1)
    {

        for(int i=0; i<a.row; i++)
        for(int j=0; j<a.col; j++)
        ans->arr[i][j] = a.arr[i][j];
        return;
    }
    //returns m^pow in log(pow) time
    if(pow%2 == 1)
    {
        matrix temp = matrixNew(a.row, a.col);
        matrixPowMod(a, &temp, pow-1, m);
        matrixMultMod(a, temp, ans, m);
        matrixDelete(&temp);
    }
    else
    {
        matrix x = matrixNew(a.row, a.col);
        matrixPowMod(a, &x, pow/2, m);
        matrixMultMod(x, x, ans, m);
        matrixDelete(&x);
    }
}


void print(long long d[], int size )
{
    for(int i=0; i<size; i++)
    cout<<d[i]<<" ";
    cout<<endl;
}

int main()
{
    int t;
    int initTax, slot1, slot2, K, N;
    int p;
    long long tax;
    scanf("%d", &t);
    assert(1<=t && t<=3);
    //cout<<powerMod(57, 255, MOD)<<endl;
    while(t--)
    {
        assert(scanf("%d%d%d%d%d", &initTax, &slot1, &slot2, &K, &N) == 5);
        assert(1<= initTax && initTax<=50);
        assert(1<= slot1 && slot1<= 50);
        assert(1<= slot2 && slot2<= 50);
        assert(1<= K && K<= 1+ slot1+ slot2);
        assert(1<= N && N<= 1000000000);


        //for first year
        f[0] = initTax;

        //for next slot 1 years

        for(int i=1; i<slot1+1; i++)
        {
            f[i] = 1+ f[i-1];
        }
       // print(f, 1+slot1);
        //for next slot 2 years
        for(int i = slot1+1; i<1+slot1+slot2; i++ )
        {
            f[i] = 2*f[i-1];
            if(f[i]>=MOD) f[i]%= MOD;
        }
        //print(f, 1+slot1+ slot2);
        if(N<= 1 + slot1 + slot2)
        {
            printf("%lld\n", f[N-1]);
        }
        else
        {
        p = N- slot1- slot2 - 1;//raise it to this power
        tax = 1;
        matrix A = matrixNew(K, K);
        matrix res = matrixNew(K, K);
        matrixInit(&A);

        for(int i=0; i<K; i++)
        A.arr[0][i] = 1;
        for(int i=1; i<K; i++)
        A.arr[i][i-1] = 1;

        //cout<<p<<endl;
       // matrixPrint(A);
        matrixPowMod(A, &res, p, MOD-1);
        //matrixPrint(res);
        for(int i = 0; i<K; i++)
        {
          tax*= powerMod(f[slot1+slot2-i], res.arr[0][i], MOD);
          if(tax>= MOD)
          tax %= MOD;
         // cout<<i<<endl;
         // cout<<res.arr[0][i]<<" "<<f[slot1+slot2-i]<<endl;
          //cout<<powerMod(f[slot1+slot2-i], res.arr[0][i], MOD)<<endl;
          //cout<<tax<<endl;
        }
        printf("%lld\n", tax);

        }

}
}
