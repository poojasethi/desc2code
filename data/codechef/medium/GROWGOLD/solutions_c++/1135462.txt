#include <iostream>
#include <cstring>
using namespace std;

typedef long long LL;
const int Maxy=101;
const LL Mod1=(LL)1e8+7;
const LL Mod2=(LL)1e8+6;

int T,S1,S2,K,N,yn;
LL yt[Maxy],mst[Maxy][Maxy],mre[Maxy][Maxy],hlp[Maxy][Maxy];

void matmul(LL R[Maxy][Maxy],const LL A[Maxy][Maxy],int K){
    for(int i=0; i<K; i++){
        for(int j=0; j<K; j++){
            LL tm=0;
            for(int k=0; k<K; k++) tm+=R[i][k]*A[k][j];
            if(tm >= Mod2) tm%=Mod2;
            hlp[i][j]=tm;
        }
    }
    for(int i=0; i<K; i++) for(int j=0; j<K; j++) R[i][j]=hlp[i][j];
}

void matpow(LL R[Maxy][Maxy],LL S[Maxy][Maxy],int P,int K){
    fill(R[0],R[0]+Maxy*Maxy,0);
    for(int i=0; i<K; i++) R[i][i]=1;
    for(; P>0; P>>=1){
        if(P&1) matmul(R,S,K);
        matmul(S,S,K);
    }
}

LL numpow(LL A,LL P){
    LL re=1;
    for(; P>0; P>>=1){
        if(P&1) re=(re*A)%Mod1;
        A=(A*A)%Mod1;
    }
    return re;
}

int main(int argc, char const *argv[]) {
    ios::sync_with_stdio(false);   
    cin >> T;
    for(int ca=0; ca<T; ca++){
        cin >> yt[0] >> S1 >> S2 >> K >> N;
        yn=1;
        for(int i=0; i<S1; i++){
            yt[yn]=yt[yn-1]+1;
            ++yn;
        }
        for(int i=0; i<S2; i++){
            yt[yn]=(2*yt[yn-1])%Mod1;
            ++yn;
        }
        if(N > yn){
            fill(mst[0],mst[0]+Maxy*Maxy,0);
            for(int i=0; i<K; i++) mst[0][i]=1;
            for(int i=0; i<K-1; i++) mst[i+1][i]=1;
            matpow(mre,mst,N-yn,K);
            LL so=1;
            for(int i=0; i<K; i++) so=(so*numpow(yt[yn-1-i],mre[0][i]))%Mod1;
            cout << so << endl;
        }else cout << yt[N-1] << endl;
    }
    return 0;
}
