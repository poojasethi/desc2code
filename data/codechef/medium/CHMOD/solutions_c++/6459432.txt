#include <memory.h>
#include <iostream>
#include <bitset>
#include <stdio.h>
using namespace std;

#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked

 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}

int prime[25],a[100010],dp[102][100010],m;
bitset<102> visited;

void buildseive(int n)
{
int i,j,x,y;
  for(i = 2;i<=n;i++)
    visited[i] = 0;
    j = 0;
    for(i = 2;i<=n;i++)
    {
      if(visited[i] == 0)
      {
       prime[j] = i;
       j++;
      }
      x = 2;
      y = x*i;
      while(y<=n)
      {
        visited[y] = 1;
        x++;
        y = x*i;
      }
    }
    

}

void primefactor(int n,int pos)
 {
    int idx = 0 , pf = prime[idx];
    while(n != 1 && (pf*pf<=n))
     {
        if(n % pf == 0)
         {
           int c = 0;  
           while(n % pf == 0)
            {
              c++;
              n /= pf;       
            }
          dp[pf][pos] = c;
                 
         }
         pf = prime[++idx];      
     }
     if(n != 1)
      {
         dp[n][pos] = 1;     
      } 
       
 }


 
ll po(ll a, ll b){
  ll r;
  if(b==0) return 1;
  r = po(a,b/2);
  r = (r*r)%m;
  if(b%2) r = (r*a)%m;
  return r;
}
  

int main() {
	// your code goes here
	visited.reset();
	buildseive(100);
	
	int n;
	inp(n);
	for(int i=1;i<=n;i++)
	 inp(a[i]);
	
	memset(dp,0,sizeof dp);
	for(int i=1;i<=n;i++)
	 primefactor(a[i],i);
	
	for(int i=2;i<=n;i++)
	 {
	     for(int j=0;j<25;j++)
	      {
	          int pf = prime[j];
	          dp[pf][i] += dp[pf][i-1];
	      }
	 }
	
	int l,r,test;
    
    inp(test);
    while(test--)
     {
         inp(l);inp(r);inp(m);
         
         ll ans = 1;
         
         for(int j=0;j<25;j++)
          {
              ll pf = (ll)prime[j];
              ll power = (ll)(dp[pf][r] - dp[pf][l-1]);
              ans = (ans*po(pf,power))%m;
          }
         
         printf("%lld\n",ans);
     }
	
	
	return 0;
}
