#include<fstream>
#include<iostream>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<cstdlib>
#include<cctype>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
using namespace std;

typedef long long int lli;

#define modu 1000000007
#define inp_s ios_base::sync_with_stdio(false)
#define gcd(a,b) __gcd(a,b)
#define vi vector<int>
#define vlli vector<lli>

lli BigMod(int a,int b,lli mod)
{
      if(!b) return 1;
      lli x = BigMod(a,b/2,mod);
      lli temp = (x*x)%mod;
      if(b%2) temp = (temp*a)%mod;
      return temp;
}

vector<int> primes;

void precomp()
{
      for(int i=2;i<=100;i++)
      {
            int f = 0;
            for(int j=2;j*j<=i && !f;j++)
            {
                  if(i%j == 0)
                  {
                        f=1;break;
                  }
            }
            if(!f)
                  primes.push_back(i);
      }
}
int arr[101][30] = {0};

void c()
{
      for(int i=2;i<=100;i++)
      {
            int num = i;
            int j = 0;
            int ctr = 0;
            while(num>1 && j<primes.size())
            {
                  while(num>1 && num%primes[j] == 0)
                  {
                        ctr++;
                        num /= primes[j];
                  }
                  arr[i][j] = ctr;
                  ctr = 0;
                  j++;
            }
      }
}

int calc[100001][30] = {0};

int main()
{
      precomp();
      c();
      int n;
      scanf("%d",&n);
      for(int i=1;i<=n;i++)
      {
            int num;
            scanf("%d",&num);
            for(int j=0;j<primes.size();j++)
                  calc[i][j] = arr[num][j];
      }
      for(int i=1;i<=n;i++)
            for(int j=0;j<primes.size();j++)
                  calc[i][j] += calc[i-1][j];
      int t;
      scanf("%d",&t);
      while(t--)
      {
            int l,r;
            lli m;
            lli ans=1;
            scanf("%d%d%lld",&l,&r,&m);
            for(int i=0;i<primes.size() && ans;i++)
            {
                  int cnt = (calc[r][i]-calc[l-1][i]);
                  if(!cnt) continue;
                  ans = (ans*BigMod(primes[i],cnt,m))%m;
            }
            printf("%lld\n",ans);
      }
	return 0;
}
