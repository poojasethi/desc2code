#include<iostream>
#include<cstring>
#include<string>
#include<cstdio>
#include<vector>
#include<map>
#include<climits>
#include<queue>
#include<algorithm>
#define lld long long
#define MOD 1000000007
#define pf printf
#define sf scanf
//#include "../../Utilities/Utilities.h"
//#include "../../Utilities/Utilities.cpp"

using namespace std;

int A[100000];
//lld prod[100000];
lld freq[101][26], cumFreq[101][26];
typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;
int tree[25][100005];

inline lld bigmod(lld a, lld b, lld m)
{
	if(b == 0) return 1 % m;

	lld x = a, ans = 1;

	while(b)
	{
		if(b&1) ans = (ans * x)%m;
		b >>= 1;
		x = (x*x)%m;
	}

	return ans;
}

vector<PII> V[102];

int main()
{
    int T, N;
    int a, i, j, cnt, p;
    lld L, R, prod, ans;
    lld M;
    sf("%d", &N);
    int primeArr[]={2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
    int primeSize = 25;//primeArr.size();


   //Generating prime factors
	for(i = 2; i <= 100; i++)
	{
		a = i;
		for(j = 0; j < primeSize; j++)
		{
			cnt = 0;
			while(a % primeArr[j] == 0)
				cnt++, a /= primeArr[j];

			if(cnt)
				V[i].push_back( PII(j, cnt) );

			if(a == 1)
				break;
		}

	}

   //tree is an array which stores cumulative sum of prime powers for each prime\
	//using the pregenerated prime factor table
	//int a;
	for(i = 1; i <= N; i++)
	{
		cin >> a;
		for(j = V[a].size() - 1; j >= 0; j--)
			tree[V[a][j].first][i] += V[a][j].second;

		for(j = 0; j < primeSize; j++)
			tree[j][i] += tree[j][i - 1];
	}

    sf("%d", &T);
    //lld cnt, ans;
    for(int t = 1; t <= T; t++)
    {
        sf("%lld %lld %lld", &L, &R, &M);
        ans = 1 % M;
        for(p = 0; p < primeSize; p++)
        {
            cnt = tree[p][R] - tree[p][L-1];
			if(cnt) ans = (ans * bigmod(primeArr[p], cnt, M))%M;
			if(ans == 0) break;
        }
        pf("%lld\n", ans);
    }
    return 0;
}
