#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


# choisi k nombre parmis n
def choose(n, k):
    """
    A fast way to calculate binomial coefficients by Andrew Dalke (contrib).
    """
    if 0 <= k <= n:
        ntok = 1
        ktok = 1
        for t in xrange(1, min(k, n - k) + 1):
            ntok *= n
            ktok *= t
            n -= 1
        return ntok / ktok
    else:
        return 0


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args)
    t2 = time()
    r2 = f2(*args)
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__, r1, t2 - t1, f2.__name__, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(s):
    count = 0
    if len(s) == 0:
        return 0
    elif len(s) == 1:
        return 1 if s[0] == '0' else 0
    if s[0] == '1' or s[1] == '1':
        #print "bomb at =0"
        count += 1
    if s[-1] == '1' or s[-2] == '1':
        #print "bomb at -1"
        count += 1
    for i in xrange(1, len(s) - 1):
        if s[i - 1] == '1' or s[i] == '1' or s[i + 1] == '1':
            #print "bomb at ", i
            count += 1
    return len(s) - count


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        data.readline()
        s = data.readline().strip()
        res = alg(s)
        print res


if __name__ == "__main__":
    main()
