#include <iostream>
#include<cstdio>
#include<queue>

using namespace std;

int main() 
{
	std::ios_base::sync_with_stdio(false);

	int n,k;
	cin>>n>>k;
	int arr[n];
	for(int i=0;i<n;i++)
	cin>>arr[i];
	deque<int>  Qi(k),Qj(k);
 
    /* Process first k (or first window) elements of array */
    int i,maxi[n-k+1],mini[n-k+1];
    for (i = 0; i < k; ++i)
    {
            while ( (!Qi.empty()) && arr[i] >= arr[Qi.back()])
            Qi.pop_back();
        Qi.push_back(i);
        while ( (!Qj.empty()) && arr[i] <= arr[Qj.back()])
            Qj.pop_back();
        Qj.push_back(i);
    }
 int j=0;
    for ( ; i < n; ++i)
    {
       
        maxi[j]=arr[Qi.front()];
        mini[j]=arr[Qj.front()];
        while ( (!Qi.empty()) && Qi.front() <= i - k)
            Qi.pop_front();  
        while ( (!Qj.empty()) && Qj.front() <= i - k)
            Qj.pop_front(); 
       
        while ( (!Qi.empty()) && arr[i] >= arr[Qi.back()])
            Qi.pop_back();
        while ( (!Qj.empty()) && arr[i] <= arr[Qj.back()])
            Qj.pop_back();
 
         // Add current element at the rear of Qi
        Qi.push_back(i);
         Qj.push_back(i);
         j++;
    }
    maxi[j]=arr[Qi.front()];
        mini[j]=arr[Qj.front()];

  int count=0;
    for(int p=0;p<n-k+1;p++)
    {
    	//cout<<maxi[p]<<" "<<mini[p]<<endl;
    	if(maxi[p]-mini[p]==k-1)
    	count++;
    }
    cout<<count;
	return 0;
}