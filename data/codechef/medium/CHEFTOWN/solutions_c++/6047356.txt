#include<bits/stdc++.h>
using namespace std;
/// THIRD APPROACH , IMPLEMENTING A QUEUE SUCH THAT 
// POP,PUSH , FIND MIN
// ALL THE ABOVE IN O(1)
// similarly another queue for MAXIMUM too

static struct IO {
    char tmp[1 << 10];

    
	
	// fast input routines
    char cur;

    //#define nextChar() (cur = getc_unlocked(stdin))
    //#define peekChar() (cur)
    inline char nextChar() { return cur = getc_unlocked(stdin); }
    inline char peekChar() { return cur; }

    inline operator bool() { return peekChar(); }
    inline static bool isBlank(char c) { return (c < '-' && c); }
    inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

    inline IO& operator >> (char & c) { c = nextChar(); return *this; }

    inline IO& operator >> (char * buf) {
        if (skipBlanks()) {
            if (peekChar()) {
                *(buf++) = peekChar();
                while (!isBlank(nextChar())) *(buf++) = peekChar();
            } *(buf++) = 0; } return *this; }

    inline IO& operator >> (string & s) {
        if (skipBlanks()) {     s.clear(); s += peekChar();
            while (!isBlank(nextChar())) s += peekChar(); }
        return *this; }

    inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }

#define defineInFor(intType) \
    inline IO& operator >>(intType & n) { \
        if (skipBlanks()) { \
            int sign = +1; \
            if (peekChar() == '-') { \
                sign = -1; \
                n = nextChar() - '0'; \
            } else \
            n = peekChar() - '0'; \
            while (!isBlank(nextChar())) { \
                n += n + (n << 3) + peekChar() - 48; \
            } \
            n *= sign; \
        } \
        return *this; \
    }

    defineInFor(int)
        defineInFor(unsigned int)
        defineInFor(long long)

        // fast output routines

        //#define putChar(c) putc_unlocked((c), stdout)
        inline void putChar(char c) { putc_unlocked(c, stdout); }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

    inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }

   

#define defineOutFor(intType) \
    inline char * toString(intType n) { \
        char * p = (tmp + 30); \
        if (n) { \
            bool isNeg = 0; \
            if (n < 0) isNeg = 1, n = -n; \
            while (n) \
            *--p = (n % 10) + '0', n /= 10; \
            if (isNeg) *--p = '-'; \
        } else *--p = '0'; \
        return p; \
    } \
    inline IO& operator << (intType n) { return (*this) << toString(n); }

    defineOutFor(int)
        defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
typedef long long ll;
int in[400005];
// inc. order queue
deque <int> minQ,maxQ;
 
int main()
{
	int i,c=0,n,w;
	
	cin>>n>>w;
	for(i=1;i<=n;i++) cin>>in[i];
	
	if(w==1){cout<<n<<endl;return 0;
	}
	
	for(i=1;i<w;i++)
	{                
	               
					while( !minQ.empty() && minQ.back()>in[i]) minQ.pop_back();
		            minQ.push_back(in[i]);
		            
		            while(!maxQ.empty() && maxQ.back()<in[i]) maxQ.pop_back();
		            maxQ.push_back(in[i]);
		           
				  

	}
	
	 
	                while( !minQ.empty() && minQ.back()>in[i]) minQ.pop_back();
		            minQ.push_back(in[i]);
		            
		            while(!maxQ.empty() && maxQ.back()<in[i]) maxQ.pop_back();
		            maxQ.push_back(in[i]);
	                 
	                 if (maxQ.front()-minQ.front() == w-1 ) c++;
	
	
	for(i=i+1;i<=n;i++){
	
                	if(minQ.front()==in[i-w]) minQ.pop_front();
	                else if(maxQ.front()==in[i-w]) maxQ.pop_front();
    
	                while( !minQ.empty() && minQ.back()>in[i]) minQ.pop_back();
		            minQ.push_back(in[i]);
		            
		            while(!maxQ.empty() && maxQ.back()<in[i]) maxQ.pop_back();
		            maxQ.push_back(in[i]);
	                 
	                 if (maxQ.front()-minQ.front() == w-1 ) c++;
	}	
	
	
	cout<<c<<endl;
	
	
	return 0;
}
