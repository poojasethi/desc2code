/// BY NK
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>
#include<cstring>
using namespace std;
#define ll long long int
#define MEM(a,b) memset(a,(b),sizeof(a))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define Fill(s,v) memset(s,v,sizeof(s))
#define pb push_back
#define for_a_to_b(i,a,b) for(int i=a; i<b; ++i)
#define for_b_to_a(i,a,b) for(int i=a; i>b; --i)
#define for_0_to_a(i,a) for(int i=0; i<a; ++i)


#define d_for_a_to_b(i,a,b) for(i=a; i<b; ++i)
#define d_for_b_to_a(i,a,b) for( i=a; i>b; --i)
#define d_for_0_to_a(i,a) for( i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define scanf_d(x) scanf("%d",&x)
#define cin_l(x) cin>>x
#define scanf_f(x) scanf("%lf",&x)
#define scanf_ld(x) scanf("%ld",&x)
#define scanf_lld(x) scanf("%lld",&x)
#define scanf_ull(x) scanf("%llu",&x)
#define scanf_s(x) scanf("%s",x)
#define scanf_c(x) scanf("%c",x)
#define printf_d(x) printf("%d ",x)
#define printf_ld(x) printf("%ld ",x)
#define printf_lld(x) printf("%lld ",x)
#define printf_lld_n(x) printf("%lld\n",x)
#define printf_ull(x) printf("%llu ",x)
#define printf_ull_n(x) printf("%llu\n",x)
#define printf_d_n(x) printf("%d\n",x)
#define printf_s(x) printf("%s",x)
#define printf_s_n(x) printf("%s\n",x)
#define printf_c(x) printf("%c",x);
#define printf_c_n(x) printf("%c\n",x);
#define cout_ls(x) cout<<x<<" "
#define cout_ls_n(x) cout<<x<<"\n"
ll gcd(ll a,ll b) {if(a%b==0) return b;else return gcd(b,a%b);}
void MaxHeapy(int A[],int index,int n)
{
    int li=2*index;
    int ri=li+1;
    int large=index;
    if(ri<=n and A[ri]>A[large]) large=ri;
    if(li<=n and A[li]>A[large]) large=li;
    if(large!=index)
    {
        swap(A[index],A[large]);
        MaxHeapy(A,large,n);
    }
    else return;
}
void BuildMaxHeap(int A[],int n)
{
    for(int i=n/2;i>=1;i--) MaxHeapy(A,i,n);
}
void InsertMaxHeap(int A[],int index)
{
    int p=index/2;
    if(p<1) return;
    if(A[p]<A[index])
    {
        swap(A[p],A[index]);
        InsertMaxHeap(A,p);
    }
    else return;

}
void MinHeapify(int index,int A[],int n)
{
    int li=2*index;
    int ri=li+1;
    int small=index;
    if(ri<=n and A[ri]<A[index]) small=ri;
    if(li<=n and A[li]<A[small]) small=li;
    if(small!=index)
    {
        swap(A[small],A[index]);
        MinHeapify(small,A,n);
    }
}
void BuildMinHeap(int A[],int n)
{
    for(int i=n/2;i>=1;i--) MinHeapify(i,A,n);
}
void InsertMinHeap(int A[],int index)
{
    int p=index/2;
    if(p<1) return;
    if(A[p]>A[index])
    {
        swap(A[p],A[index]);
        InsertMinHeap(A,p);
    }
    else return;
}
int Mip[400004];
int Map[400004];
int A[400004];
int B[400004];
int main()
{

    int n,w;
    scanf_d(n); //cin>>n>>w;
    scanf_d(w); //cin>>n>>w;

    for(int i=1;i<=n;i++)
    {
        scanf_d(A[i]); //cin>>A[i];
        B[i]=1;
    }
    if(w==1)
    {
        cout<<n<<endl;
        return 0;
    }
    int minlen=w;
    int maxlen=w;
    for(int i=1;i<=w;i++)
    {
        Mip[i]=A[i];
        Map[i]=A[i];
    }
    int nk=0;
    BuildMaxHeap(Map,maxlen);
    BuildMinHeap(Mip,minlen);
    for(int i=1;i<=n-w+1;i++)
    {
        int mini=Mip[1];
        int maxi=Map[1];
        while(B[mini]==0)
        {
            Mip[1]=Mip[minlen];
            minlen--;
            MinHeapify(1,Mip,minlen);
            mini=Mip[1];
        }
        while(B[maxi]==0)
        {
            Map[1]=Map[maxlen];
            maxlen--;
            MaxHeapy(Map,1,maxlen);
            maxi=Map[1];
        }
        if(maxi-mini==w-1) nk++;
        if(A[i]==mini)
        {
            Mip[1]=Mip[minlen];
            minlen--;
            MinHeapify(1,Mip,minlen);
        }
        if(A[i]==maxi)
        {
            Map[1]=Map[maxlen];
            maxlen--;
            MaxHeapy(Map,1,maxlen);
        }
        if(i+w<=n)
        {
            B[A[i]]=0;
            minlen++;
            Mip[minlen]=A[i+w];
            InsertMinHeap(Mip,minlen);
            maxlen++;
            Map[maxlen]=A[i+w];
            InsertMaxHeap(Map,maxlen);
        }


    }
    printf_d_n(nk); //cout<<nk<<endl;
}
