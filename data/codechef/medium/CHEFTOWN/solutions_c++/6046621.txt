#include<bits/stdc++.h>
using namespace std;

long long in[400005],sum[400005],sqsum[400005] ;
  static struct IO {
    char tmp[1 << 10];

    
	
	// fast input routines
    char cur;

    //#define nextChar() (cur = getc_unlocked(stdin))
    //#define peekChar() (cur)
    inline char nextChar() { return cur = getc_unlocked(stdin); }
    inline char peekChar() { return cur; }

    inline operator bool() { return peekChar(); }
    inline static bool isBlank(char c) { return (c < '-' && c); }
    inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

    inline IO& operator >> (char & c) { c = nextChar(); return *this; }

    inline IO& operator >> (char * buf) {
        if (skipBlanks()) {
            if (peekChar()) {
                *(buf++) = peekChar();
                while (!isBlank(nextChar())) *(buf++) = peekChar();
            } *(buf++) = 0; } return *this; }

    inline IO& operator >> (string & s) {
        if (skipBlanks()) {     s.clear(); s += peekChar();
            while (!isBlank(nextChar())) s += peekChar(); }
        return *this; }

    inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }

#define defineInFor(intType) \
    inline IO& operator >>(intType & n) { \
        if (skipBlanks()) { \
            int sign = +1; \
            if (peekChar() == '-') { \
                sign = -1; \
                n = nextChar() - '0'; \
            } else \
            n = peekChar() - '0'; \
            while (!isBlank(nextChar())) { \
                n += n + (n << 3) + peekChar() - 48; \
            } \
            n *= sign; \
        } \
        return *this; \
    }

    defineInFor(int)
        defineInFor(unsigned int)
        defineInFor(long long)

        // fast output routines

        //#define putChar(c) putc_unlocked((c), stdout)
        inline void putChar(char c) { putc_unlocked(c, stdout); }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

    inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }

   

#define defineOutFor(intType) \
    inline char * toString(intType n) { \
        char * p = (tmp + 30); \
        if (n) { \
            bool isNeg = 0; \
            if (n < 0) isNeg = 1, n = -n; \
            while (n) \
            *--p = (n % 10) + '0', n /= 10; \
            if (isNeg) *--p = '-'; \
        } else *--p = '0'; \
        return p; \
    } \
    inline IO& operator << (intType n) { return (*this) << toString(n); }

    defineOutFor(int)
        defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
typedef long long ll;
// APPROach 2 , uniqueness of sum and Square sums
int main()
{
	
	// x + (x+1)+....(x+w-1) = (w/2)*(2*x+w-1) = sum
	
	// x = ((sum*2/w)+1-w)/2
	
	// x^2 + (x+1)^2 + (x+2)^2..... (x+(w-2))^2 + (x+(w-1))^2 = (x+w-1)*(x+w)*(2*(x+w)-1)/6 = sqsum
	if(2!=2.0000)cout<<"hi";
	int w,n,i,counter=0;
	double x;
	cin>>n>>w;
	cin>>in[1];
	
	sum[1]=in[1];sqsum[1]=in[1]*in[1];
	sum[0]=sqsum[0]=0;
	
	for(i=2;i<=n;i++) {
                     	cin>>in[i] ;  sum[i]=sum[i-1] + in[i];  sqsum[i]  = sqsum[i-1] +in[i]*in[i]; } 
                     	
	for(i=w;i<=n;i++){
		                x= ( ( (double)(sum[i]-sum[i-w])*2 ) / w+1-w )/2;
		               
					    if(floor(x)==x){
					    	               if((sqsum[i] - sqsum[i-w]) == ((x+w-1)*(x+w)*(2*(x+w)-1)/6) - (x-1)*(x)*(2*x-1)/6 ) counter++;
		                	
		                }
		                
	}
	
	
	
	
	cout<<counter<<endl;
	
	
	
	
	return 0;
}
