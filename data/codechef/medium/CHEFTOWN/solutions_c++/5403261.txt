#include <bits/stdc++.h>
#define MAX 400005

using namespace std;

int n,k;
int A[MAX];
int tree[1000005];
int LIM;
// fast input
template<typename T>
inline void fi(T *a)
{
 register char c=0;
 while (c<33) c=getchar();//_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar();//_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}

void update(int idx, int val)
{
    while ( idx <= LIM+1 ) {
        tree[idx] += val;
        idx += (idx & (-idx));
    }
    return;
}

int query(int idx)
{
    int ans = 0;
    while ( idx > 0 ) {
        ans += tree[idx];
        idx -= (idx & (-idx));
    }
    return ans;
}

int main()
{
    int cnt,L,ans,val,M,mask;
    cnt = 0;
    fi(&n), fi(&k);
    LIM = (int)log2(n)+1;
    LIM = (1<<LIM);
    for ( int i = 1; i <= n; i++ ) fi(&A[i]);
    for ( int i = 1; i <= k-1; i++ ) update(A[i],1-(query(A[i])-query(A[i]-1)));
    for ( int i = k; i <= n; i++ ) {
        if ( i-k >= 1 ) update(A[i-k],-(query(A[i-k])-query(A[i-k]-1)));
        update(A[i],1-(query(A[i])-query(A[i]-1)));
        L = 0, ans = -1, val = k, mask = LIM;
        while ( mask != 0 && L <= n ) {
            M = L+mask;
            if ( val == tree[M] ) ans = M;
            else if ( val > tree[M] ) {
                val -= tree[M];
                L = M;
            }
            mask >>= 1;
        }
        if ( ans == -1 ) continue;
        if ( query(ans)-query(ans-k) == k ) cnt++;
    }
    printf("%d\n", cnt);
    return 0;
}
