#!/usr/bin/python3
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import operator
#import random (not working in python3)
import bisect


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print("%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time))
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print(res)
    return r1 if r1 == r2 else None


def alg():
    return 0


def main():
    #import cProfile
    #cProfile.runctx('alg()', globals(), locals())
    data = sys.stdin

    def deal_num(num):
        if len(num) > 0:
            flag = 0
            res = ""
            for item in num:
                if len(item) == 0:
                    continue
                if item[0] != '0':
                    continue
                if item == "0":
                    flag = "1"
                elif item == "00":
                    flag = "0"
                else:
                    res += flag * (len(item) - 2)
            if len(res) == 0:
                print(0)
            else:
                print(int(res, 2))
            # do it

    quit = False
    num = []
    while True:
        r = data.readline().split()
        for item in r:
            if item == '~' or item == '#':
                deal_num(num)
                num = []
            else:
                num.append(item)
            if item == '~':
                quit = True
        if quit:
            break


if __name__ == "__main__":
    main()
