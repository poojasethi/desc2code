from itertools import product
from operator import mul
mod = 10**9+7
def initialize(n):
	return range(n), [1]*n
	
def root(parent, x):
	i = x
	while (parent[i]!=i):
		#parent[i] = parent[parent[i]]
		i = parent[i]
	return i
	
def weighted_union(parent,a,b):
	ra = root(parent, a)
	rb = root(parent, b)
	if (ra != rb):
		if (size[ra]<size[rb]):
			parent[ra] = rb
			size[rb] += size[ra]
			size[ra] = 0
		else:
			parent[rb] = ra
			size[ra] += size[rb]
			size[rb] = 0
	else:
		pass
		
for t in xrange(int(raw_input())):
	n, m = map(int, raw_input().split())
	parent, size = initialize(n)
	for i in range(m):
		a,b = map(int, raw_input().split())
		weighted_union(parent, a-1, b-1)
	size=filter(None,size)
	res=reduce(mul,size)    
	print len(size),res%((10**9) + 7)