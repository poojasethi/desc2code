import pdb
def main():
    t_case_num = raw_input();
    case_num = map(int,t_case_num.split());
    ans = [[] for i in range(case_num[0])];
    for i in range(case_num[0]):
      t_params = raw_input();
      params = map(int,t_params.split());
      N = params[0];
      M = params[1];
      f_list = [[] for j in range(N)];
      for j in range(M):
          t_F = raw_input();
          F = map(int,t_F.split());
          f_list[F[0]-1].append(F[1]-1);
          f_list[F[1]-1].append(F[0]-1);
      group_num = 0;
      vis = [0]*N;
      groups = [];

      
      for j in range(N): #do a dfs at j:
          if vis[j] == 1:
              continue;
          else: #do a dfs at j
              groups.append(0);
              stack = [j];
              while stack:
                  #pdb.set_trace();
                  node = stack.pop();
                  if vis[node] == 1:
                      continue
                  else:
                      groups[-1]+=1;
                      vis[node] = 1;
                      for k in range(len(f_list[node])):
                          stack.append(f_list[node][k]);

      types = 1;
      for j in range(len(groups)):
          #pdb.set_trace();
          types= types*groups[j] % 1000000007;
      ans[i] = [len(groups),types];
    for i in range(case_num[0]):
        print ans[i][0],ans[i][1];
      
main()
