# https://www.hackerrank.com/challenges/kruskalmstrsub

parent, elems, rank = [], [], []
MOD = int(1e9 + 7)

def makeset(x):
	global parent, rank, elems
	parent[x] = x
	rank[x] = 0
	elems[x] = 1

def findset(x):
	global parent
	if parent[x] != x:
		parent[x] = findset(parent[x])
	return parent[x]

def union(x, y):
	link(findset(x), findset(y))

def link(x, y):
	global parent, rank, N
	if x == y:
		pass
	elif rank[x] > rank[y]:
		parent[y] = parent[x]
		elems[x] += elems[y]
		elems[y] = 1
		N -= 1
	else: # rank[y] > rank[x]
		parent[x] = parent[y]
		if rank[x] == rank[y]:
			rank[y] += 1
		elems[y] += elems[x]
		elems[x] = 1
		N -= 1

def product(lst):
	prod = 1
	for l in lst:
		if l != 1:
			prod = (prod * l) % MOD
	return prod


def inputs():
	global parent, rank, elems, N
	N, M = map(int, raw_input().split())
	parent = [i for i in xrange(N+1)]
	rank = [0 for _ in xrange(N+1)]
	elems = [1 for _ in xrange(N+1)]

	for _ in xrange(M):
		x, y = map(int, raw_input().split())
		union(x, y)
	print N, product(elems)

T = int(raw_input())
while(T > 0):
	T -= 1
	inputs()