#include<bits/stdc++.h>
using namespace std;
#define ll long long
const ll mod=1000000007;
ll *id, cnt, *sz;
map<ll,ll> mp;  //use this map to map indexes with data.
set <ll> s;
set <ll> :: iterator it;
void init(ll N)
{
    cnt = N;
	id = new ll[N+1];
	sz = new ll[N+1];
    for(ll i=1; i<=N; i++)
    {
        id[i] = i;
	    sz[i] = 1;
	}
}

ll find(ll p)
{
    ll root = p;
    while (root != id[root])
        root = id[root];
    while (p != root) {
        ll newp = id[p];
        id[p] = root;
        p = newp;
    }
    return root;
}
// Replace sets containing x and y with their union.
void merge(ll x, ll y)
{
    ll i = find(x);
    ll j = find(y);
    if (i == j) return;
    // make smaller root point to larger one
    if(sz[i]<sz[j])
    {
        id[i] = j;
        sz[j] += sz[i];
    }
    else
    {
        id[j] = i;
        sz[i] += sz[j];
    }
    cnt--;
}
// Are objects x and y in the same set?
bool connected(ll x, ll y)
{
    return find(x) == find(y);
}
// Return the number of disjoint sets.
ll count()
{
    return cnt;
}
void destroy()
{
    delete []id;
	delete []sz;
}
int main()
{
    ll n,q,i,j,t,m,x,y;
    cin>>t;
    
    while(t--)
    {
        cin>>n>>m;
        init(n);
        
        for(i=0;i<m;i++)
        {
            cin>>x>>y;
            merge(x,y);
        }
        
        for(i=1;i<=n;i++)
            s.insert(find(i));
        
        cout<<s.size()<<" ";
        ll ways=1;
        
        for(it=s.begin();it!=s.end();it++)
        {
            ways=(ways%mod*sz[find(*it)]%mod)%mod;
        }
        cout<<ways<<"\n";
        s.clear();
        destroy();
    }
    return 0;
}
