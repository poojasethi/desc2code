#include<bits/stdc++.h>
using namespace std;
class node{
    public:
        long long parent;
        long long n;
};
int find(node *array,int i){
    if(array[i].parent==i){
        return i;
    }
    else{
        return find(array,array[i].parent);
    }
}
void union1(node *array,int i,int j){
        int iroot=find(array,i);
        int jroot=find(array,j);
        if(iroot<jroot){
            array[jroot].parent=iroot;
            array[iroot].n+=array[jroot].n;
        }
        else{
            array[iroot].parent=jroot;
            array[jroot].n+=array[iroot].n;
        }
        
    
}
int main(){
    int t;
    cin>>t;
    while(t--){
        long long n,m;
        cin>>n>>m;
        node *array=new node[n+1];
        for(int i=1;i<=n;i++){
            array[i].parent=i;
            array[i].n=1;
        }
        for(int i=0;i<m;i++){
            long long k,j;
            cin>>k>>j;
            if(find(array,k)!=find(array,j)){
                union1(array,k,j);
            }
        }
        long long number=0;
        long long ways=1;
        for(int i=1;i<n+1;i++){
            if(find(array,i)==i){
                number=number+1;
                ways=(ways*((array[i].n)%1000000007))%1000000007;
            }
        }
        cout<<number<<" "<<ways<<endl;
    }
}