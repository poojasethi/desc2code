#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll *id, cnt, *sz;
map<ll,ll> mp;  //use this map to map indexes with data.
void init(ll N)
{
    cnt = N;
	id = new ll[N+1];
	sz = new ll[N+1];
    for(ll i=1; i<=N; i++)
    {
        id[i] = i;
	    sz[i] = 1;
	}
}
ll find(ll p)
{
    if(id[p]==p)
        return p;
    else
    {
        id[p]=find(id[p]);
        return id[p];
    }
}
// Replace sets containing x and y with their union.
void merge(ll x, ll y)
{
    ll i = find(x);
    ll j = find(y);
    if (i == j) return;
    // make smaller root point to larger one
    if(sz[i]<sz[j])
    {
        id[i]=j;
        sz[j]+=sz[i];
    }
    else
    {
        id[j]=i;
        sz[i]+=sz[j];
    }
    cnt--;
}
// Are objects x and y in the same set?
bool connected(ll x, ll y)
{
    return find(x) == find(y);
}
// Return the number of disjoint sets.
ll count()
{
    return cnt;
}
void destroy()
{
    delete []id;
	delete []sz;
}
int main()
{
    ll t,n,cap,m,i,x,y;
    set<ll> s;
    cin>>t;
    while(t--)
    {
        cap=1;
        cin>>n>>m;
        init(n);
        for(i=1;i<=m;i++)
        {
            cin>>x>>y;
            merge(x,y);
        }
        for(i=1;i<=n;i++)
        {
            s.insert(find(i));
        }
        for(set<ll> ::iterator it=s.begin();it!=s.end();it++)
        {
            cap=((cap%1000000007)*(sz[*it]%1000000007))%1000000007;
        }
        cout<<s.size()<<" "<<cap<<"\n";
        destroy();
        s.clear();
    }
    return 0;
}

