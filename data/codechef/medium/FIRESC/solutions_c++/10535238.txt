#include<iostream>

#include<map>
#define MOD 1000000007
using namespace std;
int find(int root[],int i)
{
	while(i!=root[i])
	{
		i=root[i];
	}
	return i;
}
void unionset(int root[],int rank[],int a,int b)
{
	if(rank[a]>rank[b])
	{
		root[b]=a;
	}
	else
	{
		root[a]=b;
	}
	if(rank[a]==rank[b])
	{
		rank[b]=rank[b]+1;
	}
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m;
		cin>>n>>m;
		int root[n+1],rank[n+1];
		for(int i=1;i<=n;i++)
		{
			root[i]=i;
			rank[i]=0;
		}
		while(m--)
		{
			int i,j;
			cin>>i>>j;
			int a=find(root,i);
			int b=find(root,j);
			if(a!=b)
			unionset(root,rank,a,b);
			
		}
		int count=0;
		long long int ans=1;
		map<int,int> mp;
		for(int i=1;i<=n;i++)
		{
			int x=find(root,i);
			mp[x]++;
		}
		map<int,int>::iterator it;
		for(it=mp.begin();it!=mp.end();it++)
		{
			count++;
			ans=(ans*(it->second))%MOD;
		}
		cout<<count<<" "<<ans<<"\n";
		
	}
}