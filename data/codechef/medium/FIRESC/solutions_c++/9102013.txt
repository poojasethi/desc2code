#include<iostream>
#include<string>
#include<cstring>
#include<cstdlib>
using namespace std;
struct edge
{
	int src,dest;
};
struct subset{
	int parent;
	int rank;
};
struct graph
{
	int v,e;
	struct edge *array;
};

struct graph * createGraph(int v,int e)
{
	struct graph *g=(struct graph *)malloc(sizeof(struct graph));
	g->v=v;g->e=e;
	g->array=(struct edge *)malloc(sizeof(struct edge)*g->e);
	return g;
}
int find(struct subset subsets[],int i)
{
	if(subsets[i].parent!=i)
	subsets[i].parent=find(subsets,subsets[i].parent);
	return subsets[i].parent;
}

void Union(struct subset subsets[],int x,int y)
{
	if(subsets[x].rank>subsets[y].rank)
	subsets[y].parent=x;
	else
	if(subsets[x].rank<subsets[y].rank)
	subsets[x].parent=y;
	else
	{
		subsets[y].parent=x;
		subsets[x].rank++;
	}
}

void no_of_routes(struct graph *g,int &p,long long int &leader)
{
 p=g->v;
	struct subset *sub=(struct subset *)malloc(sizeof(struct subset)*g->v);
	for(int i=0;i<g->v;i++)
	{
		sub[i].parent=i;
		sub[i].rank=0;
	}
	for(int i=0;i<g->e;i++)
	{
	int x=find(sub,g->array[i].src);
	int y=find(sub,g->array[i].dest);
	if(x!=y)
	{
	Union(sub,x,y);
	p--;
	}
	}
	int array1[g->v];
	for(int i=0;i<g->v;i++)
	array1[i]=0;
for(int i=0;i<g->v;i++)
{
array1[find(sub,i)]++;
}

for(int i=0;i<g->v;i++)
{
if(array1[i]>0)
leader=(leader%1000000007) * (array1[i]%1000000007);
}

}

int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
	int v,e;
	scanf("%d %d",&v,&e);
	struct graph *g=createGraph(v,e);
	for(int i=0;i<e;i++)
	{
	scanf("%d %d",&g->array[i].src,&g->array[i].dest);
	}
	long long int leader=1;
	int n;no_of_routes(g,n,leader);
	cout<<n<<" "<<leader%1000000007<<endl;
	}
	return 0;
}