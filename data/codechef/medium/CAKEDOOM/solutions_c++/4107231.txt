#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#define fo(i,a,b) dfo(int,i,a,b)
#define fr(i,n) dfr(int,i,n)
#define fe(i,a,b) dfe(int,i,a,b)
#define fq(i,n) dfq(int,i,n)
#define nfo(i,a,b) dfo(,i,a,b)
#define nfr(i,n) dfr(,i,n)
#define nfe(i,a,b) dfe(,i,a,b)
#define nfq(i,n) dfq(,i,n)
#define dfo(d,i,a,b) for (d i = (a); i < (b); i++)
#define dfr(d,i,n) dfo(d,i,0,n)
#define dfe(d,i,a,b) for (d i = (a); i <= (b); i++)
#define dfq(d,i,n) dfe(d,i,1,n)
#define ffo(i,a,b) dffo(int,i,a,b)
#define ffr(i,n) dffr(int,i,n)
#define ffe(i,a,b) dffe(int,i,a,b)
#define ffq(i,n) dffq(int,i,n)
#define nffo(i,a,b) dffo(,i,a,b)
#define nffr(i,n) dffr(,i,n)
#define nffe(i,a,b) dffe(,i,a,b)
#define nffq(i,n) dffq(,i,n)
#define dffo(d,i,a,b) for (d i = (b)-1; i >= (a); i--)
#define dffr(d,i,n) dffo(d,i,0,n)
#define dffe(d,i,a,b) for (d i = (b); i >= (a); i--)
#define dffq(d,i,n) dffe(d,i,1,n)
#define ll long long
#define alok(n,t) ((t*)malloc((n)*sizeof(t)))
#define pf printf
#define sf scanf
#define pln pf("\n")
#include <map>
#include <algorithm>
#include <vector>
#include <set>
#include <iostream>
using namespace std;

char *s = alok(11111, char);
int main() {
	int z;
	sf("%d", &z);
	fq(cas,z) {
		int k;
		sf("%d%s", &k, s);
		int n = strlen(s);
		int succ = n == 1 or s[0] != s[n-1] or s[0] == '?';
		if (succ) {
			fo(i,1,n) {
				if (s[i] == s[i-1] and s[i] != '?') {
					succ = 0;
					break;
				}
			}
			if (succ) {
				if (n == 1) {
					if (s[0] == '?') s[0] = '0';
				} else if (k == 1) {
					succ = 0;
				} else if (k == 2) {
					if (n & 1) {
						succ = 0;
					} else {
						fr(i,n) {
							if (s[i] == (1 - (i & 1)) + '0') {
								succ = 0;
								break;
							}
						}
						if (succ) {
							fr(i,n) {
								s[i] = (i & 1) + '0';
							}
						} else {
							succ = 1;
							fr(i,n) {
								if (s[i] == (i & 1) + '0') {
									succ = 0;
									break;
								}
							}
							if (succ) {
								fr(i,n) {
									s[i] = (1 - (i & 1)) + '0';
								}
							}
						}
					}
				} else {
					if (s[0] == '?') s[0] = s[1] != '0' and s[n-1] != '0' ? '0' : s[1] != '1' and s[n-1] != '1' ? '1' : '2';
					fo(i,1,n-1) {
						if (s[i] == '?') s[i] = s[i-1] != '0' and s[i+1] != '0' ? '0' : s[i-1] != '1' and s[i+1] != '1' ? '1' : '2';
					}
					if (s[n-1] == '?') s[n-1] = s[n-2] != '0' and s[0] != '0' ? '0' : s[n-2] != '1' and s[0] != '1' ? '1' : '2';
				}
			}
		}
		if (succ) {
			pf("%s\n", s);
		} else {
			pf("NO\n");
		}
	}	
}
