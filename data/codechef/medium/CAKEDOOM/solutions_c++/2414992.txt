/*
 Anton Gulikov
*/
#pragma comment(linker,"/STACK:300000000")
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <list>
#include <math.h>
#include <string>
#include <stdlib.h>

#define gcd(a,b) __gcd((a),(b))
#define sqr(a) ((a)*(a))
#define odd(a) ((a)&1)
#define foru(i,n) for (int i=0;i<(n);i++)
#define ford(i,n) for (int i=(n)-1;i>=0;i--)
#define forab(i,l,r) for (int i=(l);i<=(r);i++)
#define forabd(i,r,l) for (int i=(r);i>=(l);i--)
#define fillchar(a,b) memset((a),(b),sizeof((a)))
#define pb push_back
#define F first
#define S second
#define all(x) x.begin,x.end
#define pw2(x) (1ull<<(x))
#define mp make_pair

const long double eps=1e-20;
const long double pi=acos(-1.0);
const long long inf=1000*1000*1000*1000*1000*1000;
const long long base=1000*1000*1000+7;

using namespace std;

string s;
int a[1111];
int n,k,test;

bool fl=false;

bool good(int n,int k){
	foru(i,n) if (a[i]>=k) return false;
	foru(i,n) if (a[i]!=-1 && ( a[i]==a[(i+1)%n]  ||  a[i]==a[(i+n-1)%n])) return false;
	return true;
}

void find_(int pos){
	if (pos==n){
		fl=true;
		foru(i,n)cout<<a[i];
		cout<<endl;
		return;
	}
	if (fl) return;
	if (a[pos]!=-1) find_(pos+1); else{
		foru(i,k){
			a[pos]=i;
			if ( a[pos]!=a[(pos+1)%n]  &&  a[pos]!=a[(pos+n-1)%n]) find_(pos+1);
			if (fl) return;
		}
		a[pos]=-1;
	}
	if (fl) return;
}

int main(){
	cin>>test;
	while (test--){
		cin>>k;
		cin>>s;		
		n=s.size();	
		foru(i,n) if (s[i]=='?') a[i]=-1; else a[i]=(int)(s[i]-'0');
		if (n==1){
			if (a[0]==-1) a[0]=0;
			if (a[0]<k) cout<<a[0]; else cout<<"NO";
			cout<<endl;
			continue;
		}
		if (!good(n,k)){
			cout<<"NO"<<endl;
			continue;
		}
		fl=false;
		find_(0);
		if (!fl) cout<<"NO"<<endl;
	}
	return 0;
}		