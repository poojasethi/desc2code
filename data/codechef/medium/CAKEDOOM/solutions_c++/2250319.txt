#include"stdio.h"
char inp[100001];
int n, k;
#define ok(x, y) (x!=y || x=='?')
#define GOOD 1
bool solve(int i) {
  if (i==n) return inp[n-1]!=inp[0] || n==1;
  if(inp[i]!='?') return solve(i+1);
  for(char j='0'; j-'0'<k; j++) {
#if GOOD
    if(      (inp[i?i-1:n-1]==j || j==inp[i==n-1?0:(i+1)])) continue;
#else
    if(i and (inp[i?i-1:n-1]==j || j==inp[i==n-1?0:(i+1)])) continue;
#endif
//  current code(GOOD=1) runs in 0.15 sec on CC.
//  if I make GOOD=0, the code TLEs, whereas, provably the code cant take more than twice the time.
//  Of course either version takes no time on my test data
//  which is just annoying x-(
    inp[i] = j;
    if(solve(i+1)) return 1;
  }
  inp[i]='?';
  return 0;
}
int conflict() {
  for(int i=0;i<n-1;i++)
    if(! ok(inp[i], inp[i+1])) return 1;
  return n>1 && ! ok(inp[n-1], inp[0]);
}
int main () {
  int t;
  scanf("%d", &t);
  while(t--) {
    scanf("%d%s", &k, inp);
    n = -1;
    while(inp[++n]);
    if((!conflict()) && solve(0))
      printf("%s\n", inp);
    else printf("NO\n");
  }
}
