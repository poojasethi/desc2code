#pragma comment(linker,"/stack:16777216");
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <iostream>
#include <string>
using namespace std;

#define PB push_back
#define FOR(i,a,b) for(int i=(a);(i)<(b);(i)++)
#define assert(f) { if(!(f)) { fprintf(stderr,"Assertion failed: "); fprintf(stderr,#f); fprintf(stderr,"\n"); exit(1); } }


typedef unsigned int UI;
typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;

int rand15() { return rand()%(1<<15); }
int rand30() { return rand15()*(1<<15)+rand15(); }
int rand(int L,int R)
{
	assert(L<=R);
	return rand30()%(R-L+1)+L;
}
LL RAND(){return LL(rand30())*(1<<30)+rand30();}
LL RAND(LL L,LL R)
{
	assert(L<=R);
	return RAND()%(R-L+1)+L;
}

const int maxT=4000;
const int maxK=10;
const int maxN=100;
const int FILE_COUNT=7;
FILE* out;

struct Tsingle_test // struct of single test
{
	int K;
	string s;
};

string solve(Tsingle_test a)
{
	string ss=a.s;
	int n=ss.size();
	int k=a.K;

	char p;

	FOR(r,'0','0'+k)
	{
	string s=ss;
	if (s[0]=='?') s[0]=r;

	bool ok=true;

		FOR(i,0,n)
		{
			if (s[i]!='?')
			{
				if ((i>0 && s[i-1]==s[i]) 
				|| (i<n-1 && s[i]==s[i+1])
				|| (i==n-1 && s[i]==s[0] && n!=1)
				|| (s[i]>='0'+k))
				{
					ok=false;
					break;
				}
			}
			else
			{
			p='0';
			   while (p<'0'+k && 
				  ((i>0 && s[i-1]==p) 
				 || (i<n-1 && s[i+1]==p)
		  		 || (i==0 && s[n-1]==p) 
				 || (i==n-1 && s[0]==p))
				 )
		   		   p++;

				   if (p=='0'+k) 
				   {
					   ok=false;
					   break;
				   }
			   s[i]=p;
			}
		}
	if (ok) return s;
	}
	return "NO";
}

void write(int file_test,vector< Tsingle_test > test)
{
	fprintf(stderr,"file_test=%d\n",file_test);
	char name[11];
	sprintf(name,"%d.in",file_test);
	freopen(name,"wb",stdout);
	sprintf(name,"%d.out",file_test);
	out=fopen(name,"wb");
	
	int T=test.size();
	assert(1<=T && T<=maxT);
	printf("%d\n",T);
	for(int t=0;t<T;t++)
	{
		char inp[maxN+7];
		//strcpy(inp, test[t].s.c_str());
		printf("%d\n%s\n",test[t].K,inp);

		char sol[maxN+7];
		//strcpy(sol, solve(test[t]).c_str());
		fprintf(out,"%s\n",sol);
	}
}

void gen0(int file_test)
{
	vector< Tsingle_test > test;
	Tsingle_test single_test;
	
	FOR(K,1,5)
	{		
	vector <string> sk;
	sk.push_back("");
			
	single_test.K=K+1;
			
		FOR(N,1,9-K-2*(K==1))
		{
			vector<string> sk_new;
			FOR(i,0,sk.size())
			{
				for (char ch='0';ch<='0'+K;ch++)
				{
					string s=sk[i]+ch;
					sk_new.PB(s);		
					
					single_test.s=s;		
					test.PB(single_test);
				}
			}
			sk=sk_new;
		}

	}

write(file_test,test);
}

void (*gen[])(int)={gen0};//,gen1,gen2,gen3,gen4,gen5,gen6,gen7};

int main()
{
	
	//FOR(i,0,1)//FILE_COUNT)
	//	gen[i](i);


	Tsingle_test a;


	int t;
	cin >> t;
	while (t>0) 
	{
	t--;

	cin >> a.K >> a.s;

	cout << solve(a) << endl;
	}
	

	return 0;
}