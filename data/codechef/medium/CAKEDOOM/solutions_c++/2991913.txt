// Name:- Kunal Sheth

// Problem:- Doom Bakes Cakes

// Link:- http://www.codechef.com/problems/CAKEDOOM

// Site:- CodeChef



//header files

#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
#include<cstring>
using namespace std;

//end of header files


//definitions

#define MOD 1000000007
#define llu long long unsigned
#define lld long long
#define ld long

//end of definitions


//fast input

int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lld scan_lld()    {int ip=getchar_unlocked(),flag=1;lld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scan_llu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}

//end of fast input

//fast output

//no line break
void print_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void print_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void print_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void print_llu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}

//new line
void println_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void println_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
void println_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
void println_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}

//special char
char sp;
void printsp_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void printsp_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
void printsp_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
void printsp_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}

//end of fast output


//extra functions

//end of extra fnctions


//main

int main()
{
    int t=scan_d();
    char s[102];
    while(t--)
    {
        int k=scan_d();
        scanf("%s",s);
        int len=strlen(s);
        if(k==1&&len>1)
        {
        	printf("NO\n");
    		continue;
        }
        bool flag=0;
        for(int i=0;i<len-1;i++)
        {
        	if(s[i]==s[i+1]&&s[i]!='?')
        	{
        		flag=1;
        		break;
        	}
        }
        if(len==1)
    	{
    		if(s[0]=='?')
    			printf("0\n");
    		else
    			printf("%s\n",s);
    		continue;
    	}
    	if(flag||(s[0]==s[len-1]&&s[0]!='?')||(k==2&&len&1))
    	{
    		printf("NO\n");
    		continue;
    	}
    	if(k==2)
    	{
    		bool all=1;
    		for(int i=0;i<len;i++)
    		{
    			if(s[i]!='?')
    				all=0;
    		}
    		if(all)
    		{
    			for(int i=0;i<len;i++)
    				putchar_unlocked('0'+(i&1));
    			putchar_unlocked('\n');
    			continue;
    		}
    		int i;
    		for(i=0;i<len;i++)
    		{
    			if(s[i]!='?')
    				break;
    		}
    		bool zero_pos;
    		if(s[i]=='1')
    			zero_pos=!(i&1);
    		else
    			zero_pos=i&1;
    		bool fl=0;
    		for(i=0;i<len;i++)
    		{
    			if((s[i]=='1'&&((i&1)==zero_pos))||(s[i]=='0'&&((i&1)!=zero_pos)))
    			{
    				fl=1;
    				break;
    			}
    		}
    		if(!fl)
    		{
    			string s1;
    			for(int i=0;i<len;i++)
    			{
    				if((i&1)==zero_pos)
    					s1+='0';
    				else
    					s1+='1';
    			}
    			cout<<s1<<endl;
    		}
    		else
    			printf("NO\n");
    		continue;
    	}
    	for(int i=0;i<len;i++)
    	{
    		if(s[i]=='?')
    		{
    			if(!i)
    			{
    				for(int j=0;j<k;j++)
    				{
    					if(s[1]!=(char)(j+'0')&&s[len-1]!=(char)(j+'0'))
    					{
    						s[0]=(char)(j+'0');
    						break;
    					}
    				}
    			}
    			else if(i==len-1)
    			{
    				for(int j=0;j<k;j++)
    				{
    					if(s[len-2]!=(char)(j+'0')&&s[0]!=(char)(j+'0'))
    					{
    						s[len-1]=(char)(j+'0');
    						break;
    					}
    				}
    			}
    			else
    			{
    				for(int j=0;j<k;j++)
    				{
    					if(s[i+1]!=(char)(j+'0')&&s[i-1]!=(char)(j+'0'))
    					{
    						s[i]=(char)(j+'0');
    						break;
    					}
    				}
    			}
    		}
    	}
	    printf("%s\n",s);
    }
    return 0;
}

//end of main