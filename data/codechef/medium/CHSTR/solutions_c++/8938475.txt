#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define N 5100

char str[N]; //input
int rank[N], pos[N]; //output
int cnt[N], next[N]; //internal
bool bh[N], b2h[N];
long long mod=1000000007LL;
long long ans[N],fact[N],inv[N],freq[N];

// Compares two suffixes according to their first characters
bool smaller_first_char(int a, int b){
  return str[a] < str[b];
}

void suffixSort(int n){
  //sort suffixes according to their first characters
  for (int i=0; i<n; ++i){
    pos[i] = i;
  }
  sort(pos, pos + n, smaller_first_char);
  //{pos contains the list of suffixes sorted by their first character}

  for (int i=0; i<n; ++i){
    bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
    b2h[i] = false;
  }

  for (int h = 1; h < n; h <<= 1){
    //{bh[i] == false if the first h characters of pos[i-1] == the first h characters of pos[i]}
    int buckets = 0;
    for (int i=0, j; i < n; i = j){
      j = i + 1;
      while (j < n && !bh[j]) j++;
      next[i] = j;
      buckets++;
    }
    if (buckets == n) break; // We are done! Lucky bastards!
    //{suffixes are separted in buckets containing strings starting with the same h characters}

    for (int i = 0; i < n; i = next[i]){
      cnt[i] = 0;
      for (int j = i; j < next[i]; ++j){
        rank[pos[j]] = i;
      }
    }

    cnt[rank[n - h]]++;
    b2h[rank[n - h]] = true;
    for (int i = 0; i < n; i = next[i]){
      for (int j = i; j < next[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0){
          int head = rank[s];
          rank[s] = head + cnt[head]++;
          b2h[rank[s]] = true;
        }
      }
      for (int j = i; j < next[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0 && b2h[rank[s]]){
          for (int k = rank[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
        }
      }
    }
    for (int i=0; i<n; ++i){
      pos[rank[i]] = i;
      bh[i] |= b2h[i];
    }
  }
  for (int i=0; i<n; ++i){
    rank[pos[i]] = i;
  }
}
// End of suffix array algorithm


// Begin of the O(n) longest common prefix algorithm
// Refer to "Linear-Time Longest-Common-Prefix Computation in Suffix
// Arrays and Its Applications" by Toru Kasai, Gunho Lee, Hiroki
// Arimura, Setsuo Arikawa, and Kunsoo Park.
int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n){
  for (int i=0; i<n; ++i) rank[pos[i]] = i;
  height[0] = 0;
  for (int i=0, h=0; i<n; ++i){
    if (rank[i] > 0){
      int j = pos[rank[i]-1];
      while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
      height[rank[i]] = h;
      if (h > 0) h--;
    }
  }
}

int check(int n){
    int ans=0;
    for(int i=1;i<n;i++)
        if(height[i]>=height[ans])
            ans=i;
    if(height[ans]==0)
        return -1;
    return ans;
}

long long ncr(int n,int r){
    long long ans=fact[n];
    ans*=inv[r];
    ans%=mod;
    ans*=inv[n-r];
    ans%=mod;
    return ans;
}

long long pow(long long a,long long e,long long m){
    long long ans=1LL;
    while(e>0){
        if(e&1){
            ans*=a;
            ans%=mod;
        }
        a*=a;
        a%=mod;
        e>>=1;
    }
    return ans;
}

int main(){
    fact[0]=1LL;
    for(int i=1;i<=5000;i++)
        fact[i]=(fact[i-1]*i)%mod;
    for(int i=0;i<=5000;i++)
        inv[i]=pow(fact[i],mod-2,mod);
    int t;
    scanf("%d",&t);
    while(t--){
        int n,q,temp;
        scanf("%d%d",&n,&q);
        for(int i=1;i<=n;i++)
            freq[i]=ans[i]=0;
        scanf("%s",&str);
        suffixSort(n);
        getHeight(n);
        height[n]=0;
        for(int i=0;i<n;i++)
            freq[1]+=n-pos[i]-max(height[i],height[i+1]);
        int in1=check(n),in2;
        while(in1!=-1){
            for(int i=in1-1;i>=0;i--){
                if(height[i]!=height[in1]){
                    in2=i;
                    break;
                }
            }
            temp=height[in1]-max(height[in2],height[in1+1]);
            freq[in1-in2+1]+=temp;
            for(int i=in1;i>in2;i--)
                height[i]-=temp;
            in1=check(n);
        }
        for(int i=1;i<=n;i++){
            for(int j=i;j<=n;j++){
                ans[i]+=(ncr(j,i)*freq[j])%mod;
                if(ans[i]>=mod)
                    ans[i]-=mod;
            }
        }
        while(q--){
            scanf("%d",&temp);
            if(temp>n)
                printf("0\n");
            else
                printf("%lld\n",ans[temp]);
        }
    }
}
















