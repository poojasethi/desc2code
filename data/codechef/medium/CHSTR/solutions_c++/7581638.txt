#include <string.h>
#include <stdio.h>
#include <math.h>
#define MOD 1000000007
#define MAX 5000


long long int Bio[MAX][MAX];
long long int ans[MAX];

void ZFunction(char* s, int* z, int N){
	int i;
	int l = 0;
	int r = 0;
	z[0] = N;
	for(i = 1;i<N;i++){
		if(i>r){
			int j = i;
			while(j<N && s[j]==s[j-i]){
				j++;
			}
			z[i] = j-i;
			l = i;
			r = j-1;
		}else{
			if(z[i-l]<r-i+1){
				z[i] = z[i-l];
			}else{
				z[i] = r-i+1;
				int j = r+1;
				while(j<N && s[j]==s[j-i]){
					j++;
					z[i]++;
				}
				l = i;
				r = j-1;
			}

		}

	}
}

void cnt(int* c,int k, int* z, int N){
	int j;
	int d[N+1];
	for(j=0;j<N+1;j++){
		d[j] = 0;
	}
	for(j=k;j<N;j++){
		d[z[j]]++;
	}
	for(j=N-1;j>=0;j--){
		d[j] = d[j] + d[j+1];
	}
	for(j = 0;j<N-k;j++){
		c[d[j+1]-1]++;
	}
}
//
//long long int fact (long long int j){
//	if(j<=1){
//		return 1;
//	}
//	return j*(fact(j-1)%MOD);
//}
//long long int choose(int i, int j){
//	long long int tmp1 = fact(j)%MOD;
//	long long int tmp2 = fact(i-j)%MOD;
//	return fact(i)/(tmp1*tmp2);
//}

//void initBio(int rows, int colunms, long long int *Bio){
//
//}
int main(){
	int T;
	scanf("%d",&T);
	int i;
	int k;


	for(i=1;i<MAX;i++){
		Bio[0][i] = 0;

	}
	for(i=0;i<MAX;i++){
		Bio[i][0] = i+1;

	}

	for(i = 1;i<MAX;i++){
		for(k=1;k<MAX;k++){
			Bio[i][k] = (Bio[i-1][k-1] + Bio[i-1][k])%MOD;
		}
	}
	for(i = 0;i < T; i++){
		int m;
		for(m=0;m<MAX;m++){
			ans[m] = -1;
		}
		int N;
		long int Q;
		scanf("%d %li",&N,&Q);
		char s[N];
		int z[N];


		scanf("%s",s);
		int c[N];

		for(m = 0;m<N;m++){
			c[m] = 0;
		}

		for(k = 0;k<N;k++){
			ZFunction(&s[k],&z[k],N-k);
			cnt(c,k,z,N);

		}
		for(k = 0;k<N-1;k++){
			c[k] = c[k] - c[k+1];

		}
		for(k = 0; k<Q ;k++){
			long long int l;
			scanf("%lli",&l);
			int j;
			long long int res = 0;
			if(l<=MAX){
				if(ans[l-1]==-1){
					for(j=l-1;j<N;j++){
						res = (res + (c[j]*Bio[j][l-1]));
						if(res>=MOD){
							res-=MOD;
						}
//						res = (res + (2*3))%MOD;
					}
					ans[l-1] = res;
				}else{
					res=ans[l-1];
				}
			}

			printf("%lli\n",res);
		}

	}
}
