#include<bits/stdc++.h>
using namespace std;

const int N=5123;
const int mod=1e9+7;
const int TN=14000000;
const int K=26;

long long fact[N], finv[N], cnt[N], f[N];
int t_next[TN][K], t_cnt[TN];
char s[N];

// cnt[i] says that no. of string which comes i times
long long _pow(long long a, long long n) {
    long long res=1;
    while(n) {
        if(n & 1) {
            res=(res*a)%mod;
        }
        a=(a*a)%mod;
        n>>=1;
    }
    return res;
}

void process() {
    fact[0]=fact[1]=finv[0]=finv[1]=1;
    for(int i=2;i<N;i++) {
        fact[i]=(fact[i-1]*i)%mod;
        finv[i]=_pow(fact[i], mod-2);
    }
}

void buildTrie() {
    int len=strlen(s);
    for(int i=0;i<len;i++) {
        s[i]-='a';
    }
    int enode=1; //end of the trie node
    memset(t_next[1], 0, sizeof(t_next[1]));
    for(int i=0;i<len;i++) {
        for(int node=1, j=i;j<len;j++) {
            if(!t_next[node][s[j]]) {
                enode++;
                memset(t_next[enode], 0, sizeof(t_next[enode]));
                t_cnt[enode]=0;
                t_next[node][s[j]]=enode;
            }
            node=t_next[node][s[j]];
            t_cnt[node]++;
        }
    }
    memset(cnt, 0, (len+1)*sizeof(long long));
    for(int i=2;i<=enode;i++) {
        cnt[t_cnt[i]]++;
    }
}

int main() {
    int test=1;
    scanf("%d", &test);
    while(test--) {
        int n, q;
        scanf("%d %d", &n, &q);
        scanf("%s", s);
        int len=strlen(s);
        process();
        buildTrie();
        memset(f, -1, (len+1)*sizeof(long long));
        while(q--) {
            int k;
            scanf("%d", &k);
            if(k>len) {
                puts("0");
            } else if(f[k]>=0) {
                printf("%lld\n", f[k]);
            } else {
                f[k]=0;
                for(int i=k;i<=len;i++) {
                    if(cnt[i]==0) {
                        continue;
                    }
                    long long temp=(fact[i]*finv[i-k])%mod;
                    temp=(temp*cnt[i])%mod;
                    f[k]+=temp;
                    if(f[k]>=mod) {
                        f[k]-=mod;
                    }
                }
                f[k]=(f[k]*finv[k])%mod;
                printf("%lld\n", f[k]);
            }
        }
    }
}


