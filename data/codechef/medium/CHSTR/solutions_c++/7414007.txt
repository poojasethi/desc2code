#include<stdio.h>
#include<iostream>
#define M 1000000007
using namespace std;
 
 
 
int combine[5002][5002];
int ans[5002];
int Z[5002];
int useful[5002];
 
void solve(string str,int n)
{
    int L,R,i,j,use,inc=0;
    for(j=0;j<n;j++)
    {
    for(i=0;i<=n;i++)
    {
        Z[i]=0;
        useful[i]=0;
    }
    L=R=-1;
    Z[0]=n-j;
    for(i=1+inc;i<n;i++)
    {
        if(i>R)
        {
            L=R=i;
            while(R<n && str[R-L+inc]==str[R])
                R++;
            Z[i-inc]=R-L;
            R--;
        }
        else
        {
            use=i-L;
            if(Z[use]<(R-i+1))
                Z[i-inc]=Z[use];
            else
            {
                L=i;
                while(R<n && str[R-L+inc]==str[R])
                    R++;
                Z[i-inc]=R-L;
                R--;
            }
        }
    }
    inc++;
    for(i=0;i<n;i++)
    {
        useful[Z[i]]++;
    }
    for(i=n-1;i>0;i--)
        {useful[i]+=useful[i+1];
        ans[useful[i]]++;
    }
    i=n;
        ans[useful[i]]++;
    }
}
 
int main()
{
    int t,n;
    int q,save,i,j;
    int k;
    int l;
    scanf("%d",&t);
    for(i=0;i<=5000;i++)
    {
        for(j=0;j<=i;j++)
        {
            if(j==0 || j==i)
                combine[i][j]=1;
            else
            {
                combine[i][j]=(combine[i-1][j]+combine[i-1][j-1])%M;
            }
        }
    }
    while(t--)
    {
        scanf("%d %d",&n,&q);
        for(i=1;i<=n;i++)
    {
        ans[i]=0;
    }
        string str;
        cin>>str;
        solve(str,n);
        for(i=1;i<n;i++)
            ans[i]-=ans[i+1];
        for(i=1;i<=n;i++)
        {
            save=ans[i];
            for(j=i;j<=n;j++)
            {
                l=(ans[j]*1ll*combine[j][i])%M;
                ans[i]=(ans[i]+l)%M;
            }
            ans[i]=(ans[i]-save+M)%M;
        }
        while(q--)
        {
            scanf("%d",&k);
            if(k>n)
                printf("0\n");
            else
                printf("%d\n",ans[k]);
        }
    }
    return 0;
} 