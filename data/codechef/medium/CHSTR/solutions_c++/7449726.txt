#include<bits/stdc++.h>
using namespace std;
#define N 10001
#define ll long long
#define mod 1000000007LL
#define MOD 1000000007LL
#define mod1 33
#define mp make_pair
#define s second
#define f first
#define pb push_back
//#define gc getchar_unlocked
#define gc getchar
#define pii pair<int,int>
int str[N]; //input
int rank[N], pos[N]; //output
int cnt[N], c[N],a[N],next[N]; //internal
bool bh[N], b2h[N];
ll fact[5010],invfact[5010];
ll ans[5010];
//int half[5010][5010];
//rank[i] 'i' in unsorted and rank[i] in sorted
//pos[i] 'i' in sorted and pos[i] in unsorted
// Compares two suffixes according to their first characters
bool smaller_first_char(int a, int b)
{
    return str[a] < str[b];
}
//inline void printint(int a)
//{
//	char s[11];
//	int t = -1;
//
//	do{
//		s[++t] = a % 10 + '0';
//		a /= 10;
//	}while(a > 0);
//
//	while(t >= 0)putchar_unlocked(s[t--]);
//	putchar_unlocked('\n');
//}
ll modulo(ll a,ll b,ll c)
{
    ll x=1LL,y=a;
    while(b > 0LL)
    {
        if(b%2LL == 1LL)
        {
            x=(x*y)%c;
        }
        y = (y*y)%c;
        b /= 2LL;
    }
    return x%c;
}
void suffixSort(int n)
{
    //sort suffixes according to their first characters
    for (int i=0; i<n; ++i)
    {
        pos[i] = i;
    }
    sort(pos, pos + n, smaller_first_char);
    //{pos contains the list of suffixes sorted by their first character}

    for (int i=0; i<n; ++i)
    {
        bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
        b2h[i] = false;
    }

    for (int h = 1; h < n; h <<= 1)
    {
        //{bh[i] == false if the first h characters of pos[i-1] == the first h characters of pos[i]}
        int buckets = 0;
        for (int i=0, j; i < n; i = j)
        {
            j = i + 1;
            while (j < n && !bh[j]) j++;
            next[i] = j;
            buckets++;
        }
        if (buckets == n) break; // We are done! Lucky bastards!
        //{suffixes are separted in buckets containing strings starting with the same h characters}

        for (int i = 0; i < n; i = next[i])
        {
            cnt[i] = 0;
            for (int j = i; j < next[i]; ++j)
            {
                rank[pos[j]] = i;
            }
        }

        cnt[rank[n - h]]++;
        b2h[rank[n - h]] = true;
        for (int i = 0; i < n; i = next[i])
        {
            for (int j = i; j < next[i]; ++j)
            {
                int s = pos[j] - h;
                if (s >= 0)
                {
                    int head = rank[s];
                    rank[s] = head + cnt[head]++;
                    b2h[rank[s]] = true;
                }
            }
            for (int j = i; j < next[i]; ++j)
            {
                int s = pos[j] - h;
                if (s >= 0 && b2h[rank[s]])
                {
                    for (int k = rank[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
                }
            }
        }
        for (int i=0; i<n; ++i)
        {
            pos[rank[i]] = i;
            bh[i] |= b2h[i];
        }
    }
    for (int i=0; i<n; ++i)
    {
        rank[pos[i]] = i;
    }
//  for(int i=0;i<n;i++)
//    printf("%d ",rank[i]);
//printf("\n");
//  for(int i=0;i<n;i++)
//    printf("%d ",pos[i]);
//printf("\n");


}
inline int getn()
{
    int n = 0, c = gc();
    while(c < '0' || c > '9') c = gc();
    while(c >= '0' && c <= '9')
        n = (n<<3) + (n<<1) + c - '0', c = gc();
    return n;
}
int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n)
{
    for (int i=0; i<n; ++i) rank[pos[i]] = i;
    height[0] = 0;
    for (int i=0, h=0; i<n; ++i)
    {
        if (rank[i] > 0)
        {
            int j = pos[rank[i]-1];
            while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
            height[rank[i]] = h;
            if (h > 0) h--;
        }
    }
//  for(int i=0;i<n;i++)
//    printf("%d ",height[i]);
//printf("\n");
}
int main()
{
    int t;
    fact[0]=1LL;
    for(int i=1; i<=5001; i++)
        fact[i]=(fact[i-1]*(ll)i)%mod;
    for(int i=0; i<=5001; i++)
        invfact[i]=modulo(fact[i],mod-2LL,mod);
    cin>>t;
    while(t--)
    {
        string s;
        int n,m;
        cin>>n>>m;
        cin>>s;
        int k;

        for(int i=0; i<s.size(); i++)
            str[i]=s[i];
        suffixSort(s.size());
        getHeight(s.size());
        int i,j;
        for(i=0;i<=n;i++)
                c[i]=0;
        for(i=0; i<n; i++)
        {
            a[i+1]=height[i+1];
            for(j=i+2; j<n; j++)
                a[j]=min(a[j-1],height[j]);
            int q=n-1,p=pos[i];
            for(j=p+height[i]; j<n; j++)
            {
                while(q>i)
                {
                    if(a[q]>=j-p+1)
                        break;
                    q--;
                }
                c[q-i+1]++;
            }
        }

//        for(i=0; i<=n; i++)
//            printf("%d ",c[i]);
//        printf("\n");
        for(i=1; i<=n; i++)
        {
            ans[i]=-1LL;
        }
        for(i=0; i<m; i++)
        {
            k=getn();
            if(k>n)
                //printint(0);
                printf("%lld\n",0LL);
            else if(ans[k]!=-1LL)
                //printint((int)ans[k]);
                printf("%lld\n",ans[k]);
            else
            {
                ans[k]=0LL;
                for(j=n; j>=k; j--)
                {
                    ll ncr=(((fact[j]*invfact[k])%mod)*invfact[j-k])%mod;
                    ans[k]=(ans[k]+(((ll)c[j]*ncr)%mod));
                    if(ans[k]>=mod)
                        ans[k]-=mod;
                }
                printf("%lld\n",ans[k]);
                //printint((int)ans[k]);
            }
        }
        if(t>=1)
            for(i=0; i<=n; i++)
                c[i]=0;
    }
    return 0;
}
