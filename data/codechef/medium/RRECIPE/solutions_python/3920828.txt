#!/usr/bin/python
# coding=utf8
import sys
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


def brut(s):
    length = len(s)
    odd = (length % 2 == 1)
    hl = length / 2
    opposite_idx = length - 1
    poss = 1
    for i in xrange(hl):
        #print i, opposite_idx, string[i], string[opposite_idx]
        c1 = s[i]
        c2 = s[opposite_idx]
        if c1 != '?' and c2 != '?':
            if c1 != c2:
                poss = 0
                break
        elif c1 == '?' and c2 == '?':
            poss *= 26
    odd_pos = hl
    if length == 1:
        odd_pos = 0
    if odd and s[odd_pos] == '?':
        poss *= 26

    return poss


def fast(s):
    res = 1
    for i in range((len(s)+1)/2):
        if s[i] == '?' and s[-i-1] == '?':
            res = res * 26 % 10000009
        elif s[i] != '?' and s[-i-1] != '?' and s[i] != s[-i-1]:
            return 0
    return res


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        string = data.readline().strip()
        #t1 = time()
        #print brut(string)
        #t2 = time()
        print fast(string)
        #t3 = time()
        #print t2 - t1, t3 - t2


if __name__ == "__main__":
    main()
