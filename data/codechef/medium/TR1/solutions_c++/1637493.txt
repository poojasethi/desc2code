#include "iostream"
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include "vector"
#include "queue"
#include "stack"
#define max 10001
#define swap(x,y,t) 	{ t=x;x=y;y=t;	}
#define mod(x)	{	if(x  >= 1000000007)  x  %= 1000000007;		}
using namespace std;

vector<int>  input[max];
int temp[max];
int numelSubtree[max];
int n;
unsigned long long sum,prod,sum1,sum2;

//


class FastInput {
	public:
		FastInput() {
			m_dataOffset = 0;
			m_dataSize = 0;
			m_v = 0x80000000;
		}
		uint32_t ReadNext() {
			if (m_dataOffset == m_dataSize) {
				int r = read(0, m_buffer, sizeof(m_buffer));
				if (r <= 0) return m_v;
				m_dataOffset = 0;
				m_dataSize = 0;
				int i = 0;
				if (m_buffer[0] < '0') {
					if (m_v != 0x80000000) {
						m_data[m_dataSize++] = m_v;
						m_v = 0x80000000;
					}
					for (; (i < r) && (m_buffer[i] < '0'); ++i);
				}
				for (; i < r;) {
					if (m_buffer[i] >= '0') {
						m_v = m_v * 10 + m_buffer[i] - 48;
						++i;
					} else {
						m_data[m_dataSize++] = m_v;
						m_v = 0x80000000;
						for (i = i + 1; (i < r) && (m_buffer[i] < '0'); ++i);
					}
				}
			}
			return m_data[m_dataOffset++];
		}
	public:
		uint8_t m_buffer[32768];
		uint32_t m_data[16384];
		size_t m_dataOffset, m_dataSize;
		uint32_t m_v;
};
class FastOutput {
	public:
		FastOutput() {
			m_dataOffset = 0;
		}
		~FastOutput() {
		}
		void Flush() {
			if (m_dataOffset) {
				if (write(1, m_data, m_dataOffset));
				m_dataOffset = 0;
			}
		}
		void PrintUint(uint32_t v, char d) {
			if (m_dataOffset + 11 > sizeof(m_data)) Flush();
			if (v < 100000) {
				if (v < 1000) {
					if (v < 10) {
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 1;
					} else if (v < 100) {
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 2;
					} else {
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 3;
					}
				} else {
					if (v < 10000) {
						m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;		
						m_dataOffset += 4;
					} else {
						m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 5;
					}
				}
			} else {
				if (v < 100000000) {
					if (v < 1000000) {
						m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 6;
					} else if (v < 10000000) {
						m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 7;
					} else {
						m_data[m_dataOffset + 7] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 8;
					}
				} else {
					if (v < 1000000000) {
						m_data[m_dataOffset + 8] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 7] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 9;
					} else {
						m_data[m_dataOffset + 9] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 8] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 7] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 6] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 5] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 4] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 3] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 2] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 1] = v - v / 10 * 10 + 48; v /= 10;
						m_data[m_dataOffset + 0] = v + 48;
						m_dataOffset += 10;
					}
				}
			}
			m_data[m_dataOffset++] = d;
		}
		void PrintChar(char d) {
			if (m_dataOffset + 1 > sizeof(m_data)) Flush();
			m_data[m_dataOffset++] = d;
		}
		void ReplaceChar(int offset, char d) {
			m_data[m_dataOffset + offset] = d;
		}
	public:
		uint8_t m_data[32768];
		size_t m_dataOffset;
};
 
FastInput in;
FastOutput out;


//

void readInput(){
	int a,b,i;
	for(i=0;i<=n;i++){	
		input[i].resize(0);	
		input[i].push_back(0);
	}
	for(i=0;i<n-1;i++){
		a=in.ReadNext();
		b=in.ReadNext();
		input[a][0]++;
		input[a].push_back(b);
		input[b][0]++;
		input[b].push_back(a);
	}
}

void makeTree(){
	int top,i,j,k;
	for(i=1;i<=n;i++)	temp[i]=0;
	temp[1]=1;
	queue<int> q;
	q.push(1);
	while(!q.empty()){
		top = q.front();
		q.pop();
		i=1;
		k=input[top][0];
		while(i<=k){
			if(temp[input[top][i]] == 0){
				temp[input[top][i]] =  1;
				q.push(input[top][i]);
				i++;
			}
			else{
					swap(input[top][i],input[top][k],j);
					k--;
					input[top][0]--;
			}
		}
	}
}

void calculateSum(){
	int top,i,j;
	stack<int> s;
	s.push(1);
	numelSubtree[1]=1;
	sum =  0;
	while(!s.empty()){
		top = s.top();
		if(numelSubtree[top] > input[top][0]){
			temp[top]=0;prod=sum1=sum2=0;
			for(i=1;i<=input[top][0];i++){
				temp[top] += (temp[input[top][i]]+1);
				prod += (temp[input[top][i]]+1)*(temp[input[top][i]]+1);
			}
			sum1= temp[top]*temp[top];
			sum2= sum1-prod;
			sum2 += 2*temp[top]+1;
			mod(sum2);
			//printf("%d -- %llu\n",top,sum2);
			sum += top*sum2;
			mod(sum);
			s.pop();
		}
		else{
			j=input[top][numelSubtree[top]];
			s.push(j);
			numelSubtree[j] = 1;
			numelSubtree[top]++;
		}
	}
}

int main(){
	int t,i,j;
	t= in.ReadNext();
	while(t--){
		n=in.ReadNext();
		readInput();
		makeTree();
		/*for(i=0;i<=n;i++){
			for(j=0;j<=n;j++) printf("%d  ",input[i][j]);
			printf("\n");
		}*/
		calculateSum();
		 out.PrintUint((int)sum,'\n');
	}
	out.Flush();
	return 0;
}