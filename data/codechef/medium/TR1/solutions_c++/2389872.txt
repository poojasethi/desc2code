#include <cstdio>
#include <cmath>
#include <iostream>
#include <fstream>
#include <string>
#include <cassert>
#include <cstring>
#include <limits>
#include <vector>
#include <queue>
#include <deque>

using namespace std;

const int MAX_VERTEX = 10001;
std::vector<int> graph[MAX_VERTEX];
bool visited[MAX_VERTEX];
uint64_t im[MAX_VERTEX];
const uint64_t MOD = 1000000007;

int dfs(int u) {
	if (visited[u]) {
		return 0;
	} 
	visited[u] = true;
	int v;
	int children_of_v;
	int children = 1;
	std::vector<int> aux;
	for (int i = 0; i < graph[u].size(); i++) {
		v = graph[u][i];
		children_of_v = dfs(v);
		children += children_of_v;
		aux.push_back(children_of_v);
	}
	im[u] = 2*(children - 1) + 1;
	for (int i = 0; i < aux.size(); ++i) {
		im[u] = im[u] + (aux[i] * (children - aux[i] - 1));
	}
	return children;
}

uint64_t compute_answer(int vertices) {
	uint64_t ans = 0;	
	for (int i = 0; i < vertices; ++i) {
		ans = (ans + im[i]*(i + 1)) % MOD;
		im[i] = 0;
	}
	return ans;
}

void reset(int vertices) {
	for (int i = 0; i < vertices; ++i) {
		graph[i].clear();
		im[i] = 0;
	}
	memset(visited, false, sizeof(visited));
}

void inout_rendezvous() {
	int vertices;
	int u, v;
	int test_cases;
	scanf("%d", &test_cases);
	while (test_cases--) {
		scanf("%d", &vertices);
		for (int i = 1; i < vertices; ++i) {
			scanf("%d %d", &u, &v);
			graph[u - 1].push_back(v - 1);
			graph[v - 1].push_back(u - 1);
		}
		dfs(0);
		printf("%llu\n", compute_answer(vertices));
		reset(vertices);
	}
}

int main() {
	inout_rendezvous();
	return 0;
}
