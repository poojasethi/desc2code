#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <cstring>
#include <cctype>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <complex>

using namespace std;

#define s(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)

#define pb push_back
#define mp make_pair
#define gcd __gcd
#define bitcount __builtin_popcount

#define rep(i, n) for(int i=0;i<(n);i++)
#define forall(i,a,b) for(int i=(a);i<(b);i++)
#define foreach(it,c) for(typeof((c).begin()) it=(c).begin() ;it!=(c).end();++it)
#define all(a) (a).begin(), (a).end()
#define in(a,b) ((b).find(a) != (b).end())
#define fill(a,v) memset((a), (v), sizeof (a))
#define sz(a) ((int)((a).size()))

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef vector<string> vs;
typedef pair<int,int> ii; 

#define BIG 10001
#define MOD 1000000007

int visited[BIG];
vector<ull> kids[BIG];
vi edges[BIG];

int dfs(int v){
  visited[v] = 1;
  int ret, t;
  ret = 0;
  foreach(x, edges[v]){
    if (!visited[*x]){
      t = dfs(*x);
      kids[v].pb(t);
      ret += t;
    }
  }
  return ret + 1;
}

int main(void)
{
  int t, n, len;
  ii e;
  ull sum, p;
  s(t);
  while(t--){
    s(n);
    forall(i, 1, n + 1){
      visited[i] = 0;
      kids[i].clear();
      edges[i].clear();
    }
    rep(i, n - 1){
      s(e.first);
      s(e.second);
      edges[e.first].pb(e.second);
      edges[e.second].pb(e.first);
    }
    dfs(1);
    sum = 0;
    forall(i, 1, n + 1){
      len = kids[i].size();
      p = 1;
      forall(j, 0, len){
	p = (((kids[i][j] * 2) % MOD) + p) % MOD;
	forall(k, j + 1, len){
	  p = (((((kids[i][j] * kids[i][k]) % MOD) * 2) % MOD) + p) % MOD;
	}
      }
      sum = (((i * p) % MOD) + sum) % MOD;
    }
    printf("%llu\n", sum);
  }

  return 0;
}
