#define DEBUG 0
#define MOD 1000000007
#define MAX 10001

#include <stdio.h>
#include <string.h>
#include <vector>
using namespace std;

int n;
vector<int> adj[MAX];
bool visited[MAX];
long long unsigned Im[MAX];

long long unsigned tree(int node) {
  long long unsigned ans=1, x, k;
  vector<int>::iterator it;
  visited[node]=true;
  if(DEBUG)
    printf("tree %d\n", node);
  for(it=adj[node].begin();it!=adj[node].end();it++)
    if(!visited[*it]) {
      x=tree(*it);
      Im[node]=(Im[node]+ans*x)%MOD;
      ans=(ans+x)%MOD;
    }
  Im[node]=2*Im[node]+1;
  visited[node]=false;
  return ans;
}

long long unsigned build_sum(void) {
  int i;
  long long unsigned ans=0;
  for(i=1;i<=n;i++) {
    if(DEBUG)
      printf("Im[%d]=%llu\n", i, Im[i]);
    ans=(ans+(i*Im[i])%MOD)%MOD;
  }
  return ans;
}

int main(void) {
  int tc, s, u, v, i, j;

  scanf("%d", &tc);
  while(tc--) {
    scanf("%d", &n);

    memset(Im,0,sizeof(Im));
    for(i=1;i<=n;i++) {
      adj[i].clear();
      visited[i]=false;
    }
    for(i=0;i<n-1;i++) {
      scanf("%d%d", &u, &v);
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
    tree(1);
    printf("%llu\n", build_sum());
  }
  return 0;
}
