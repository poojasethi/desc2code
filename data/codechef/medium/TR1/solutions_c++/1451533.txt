#include <stdio.h>
#include <string>
#include <iostream>
#include <vector>

using namespace std;

vector<vector<int> > route(10001, vector<int>());
int	numCities = 0;
long long result;
int visited[10001];
long long num[10001];
unsigned long long numChildren[10001];
//long long temp = 0;
long long level = 0;
int previous = 0;

long long findCommon(int root)
{
	visited[root] = 1;
	long long count = 1;
	previous = 0;
	for(int k = 0; k < route[root].size(); k++)
	{
		if(visited[route[root].at(k)] == 0)
		{
			long long temp = findCommon(route[root].at(k));
			result += (2 * root * (count - 1) * temp);
			result %= 1000000007;
			count += temp;
			numChildren[root] += numChildren[route[root].at(k)] + 1;
			temp += num[previous] - 1;
			num[root] -= temp;
			//cout << root << temp << endl;;
		}
	}
 	num[root] += ((numChildren[root] * (numChildren[root] + 1)) + 1);
	result += ((2 * count - 1) % 1000000007 * root);
	result %= 1000000007;
	return count;
	
}


int main()
{
	int numCases;
    
	
	cin >> numCases;
	int c1, c2;
		
	for(int i = 0; i < numCases; i++)
	{
		cin >> numCities;
		
		//Clearing the route info from previous test cases
		for(int j = 1; j <= numCities; j++)
		{
			route[j].clear();
			visited[j] = 0;
			num[j] = 0;
			numChildren[j] = 0;
		}
		num[0] = 0;
		previous = 0;
		result = 0;
		//temp = 0;
		level = 0;
		
		for(int j = 0; j < numCities - 1; j++)
		{
			cin >> c1 >> c2;
			route[c1].push_back(c2);
			route[c2].push_back(c1);
		}
		findCommon(1);
		
		//for(int n = 1; n <= numCities; n++)
		//{
		//	result += (n * num[n]);
		//	result %= 1000000007;
		//	cout << n << " is " << num[n] <<" with " << numChildren[n] << endl;
		//}
		//cout << result << endl;
		printf("%lld\n", result);
		
	}
	
	return 0;
}


