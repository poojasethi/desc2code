#include <cstdio>
#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include <cstring>


using namespace std;


typedef long long ll;


vector<int> G[10001];

FILE *ifp;
FILE *ofp;
ll res=0;
const ll mod=1000000007;
bool passed[10001];

ll dfs(ll s,int par){
    if(passed[s])return 0;
    passed[s]=true;
    ll m=0;
    // 現在のノードで出会う回数を登録
    m=1;
    //if(G[s].size()==1){
    //    res+=m*s;
    //    res%=mod;
    //    return 1;
    //}
    ll sum=0;
    ll size=0;
    //int tmp[10001];
    vector<int> tmp;
    for(int i = 0; i < G[s].size(); i++){
        int to=G[s][i];
        ll a=dfs(to,s);
        //tmp[size]=a;
        tmp.push_back(a);
        size++;
        m+=a;
    }
    // 現在のノードと、子ノードに出現したノードそれぞれとペアを作ってカウント
    //m+=sum*2;
    //m%=mod;
    ll pls=0;
    // 子の組み合わせ
    for(int i = 0; i < size; i++){
        for(int j = i+1; j < size; j++){
            pls+=((tmp[i]%mod)*(tmp[j]%mod))%mod;
            //m%=mod;
            pls%=mod;
        }
    }
    pls*=2;
    pls%=mod;
    res+=(((pls+1LL+(m-1)*2)%mod)*s)%mod;
    res%=mod;
    return m;
}

void solve(){
    ifp=stdin;
    //ifp=fopen("input.txt","r");
    ofp=stdout;
    //ofp=fopen("output.txt","w");
    int t;
    fscanf(ifp,"%d",&t);
    //scanf("%d",&t);
    while(t--){
        memset(passed,0,sizeof(passed));
        int n;
        res=0;
        fscanf(ifp,"%d",&n);
        for(int i = 0; i <= 10000; i++){
            G[i].clear();
        }
        for(int i = 0; i < n-1; i++){
            int a,b;
            fscanf(ifp,"%d %d",&a,&b);
            G[a].push_back(b);
            G[b].push_back(a);
        }
        int a=dfs(1,-1);
        ll sum=res%mod;
        fprintf(ofp,"%lld\n",sum);
    }
}
int main(){

    solve();

    return 0;
}
