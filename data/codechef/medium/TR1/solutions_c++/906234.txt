
#include<stdio.h>
const long long int mod=1000000007;
class node
{
      public:
             node *next;
             long long int ans,sig,sqsig;
             int value;
             node()
             {
                  // parent=0;
                   sig=0;
                   sqsig=0;
             }
};
class lst
{
      public:
             node *head,*tail;
             lst()
             {
                   head=0;
                   tail=0;
             }
             void initialize(int x)
             {
                  node *tmp=new node();
                  tmp->next=0;
                  tmp->value=x;
                  head=tmp;
                  tail=tmp;
             }
             void create(int val)
             {
                  node *temp=new node();
                  temp->value=val;
                 // temp->parent=prnt;
                  temp->next=0;
                  tail->next=temp;
                  tail=temp;
             }
             
};
//int cnt=0;
long long int k1,k2;
bool ck[10002];
void dfs(lst list[],int x,int pt)
{
     if(ck[x])
     return;
     //cnt++;
     ck[x]=true;
     node *i=list[x].head;
     node *p=list[pt].head; /* djidjfidrjf djseijf */
     if(i->next==0)
     {
                    i->ans=1;
                    p->sig=(p->sig+1)%mod;
                    p->sqsig=(p->sqsig+1)%mod;
                    return;
     }
     for(node *mv=i->next;mv!=0;mv=mv->next)
     {
              dfs(list,mv->value,x);
             // i->ans=(((1+(2*(i->sig))%mod)%mod)+((i->sig)*(i->sig))%mod)%mod-i->sqsig)%mod;
               k1=(2*(i->sig))%mod;
               k2=((i->sig)*(i->sig))%mod;
               k2=(k1+k2)%mod;
               i->ans=(1+k2)%mod;
               i->ans=(i->ans)-(i->sqsig);
              if(i->ans<0)
              i->ans=i->ans+mod;
     }
              if(i->value!=0)
              {
              p->sig=((p->sig)+(i->sig)+1)%mod;
              p->sqsig=(p->sqsig+((i->sig+1)*(i->sig+1))%mod)%mod;
             // cout<<i->value<<" "<<p->value<<" "<<p->sig<<" "<<p->sqsig<<endl;
              }
}
void swap(int &x,int &y)
{
     int temp=x;
     x=y;
     y=temp;
}
int main()
{
    int t,n,m,u,v;
    long long int answer,tmp;
    scanf("%d",&t);
    for(int i=0;i<t;i++)
    {
            scanf("%d",&n);
            lst list[n];
            for(int i=0;i<n;i++)
            {
                    ck[i]=false;
                    list[i].initialize(i);
            }
           // ck[0]=true;
            for(int i=0;i<n-1;i++)
            {
                  scanf("%d%d",&u,&v);
                 // if(ck[v-1])
                 // {ck[u-1]=true;swap(u,v);}
                  list[u-1].create(v-1);
                 list[v-1].create(u-1);
                 // list[v-1].head->parent=u-1;  
            }
            dfs(list,0,0);
            answer=0;tmp=0;
          for(int i=0;i<n;i++)
          {
                  tmp=((i+1)*(list[i].head->ans))%mod;
                  answer=(answer+tmp)%mod;
          }
        //  cout<<"cnt: "<<cnt<<endl;
          printf("%lld\n",answer);
    }
//system("pause");
return 0;
}
