#include      <iostream>
#include      <list>
#define endl '\n'
#define each(c, e, s) for (typeof(c.begin()) e = c.begin(); e != c.end(); ++e) if (*e != s)
using namespace std;
typedef long long ll;
const ll PRIME = 1000000007;
struct Node {
	list<int> childs;
	int treeSize;
	ll sum;
};
Node nodes[10002];
void dfs(int from, int cameFrom) {
	nodes[from].treeSize = 1;
	each(nodes[from].childs, child, cameFrom) dfs(*child, from), nodes[from].treeSize += nodes[*child].treeSize;
	nodes[from].sum = nodes[from].treeSize;
	ll cst = 1;
	each(nodes[from].childs, child, cameFrom) {
		cst += nodes[*child].treeSize;
		nodes[from].sum = (nodes[from].sum + nodes[*child].treeSize * (nodes[from].treeSize - cst)) % PRIME;
	}
	nodes[from].sum = (2 * nodes[from].sum - 1) % PRIME;
}
int main(int argc, char **argv) {
	ios_base::sync_with_stdio(false), cin.tie(0);
	int n, i, from, to, t;
	ll res;
	cin >> t;
	while (t--) {
		cin >> n;
		for (i = 1; i <= n; i += 1) nodes[i].childs.clear();
		for (i = 0; i < n - 1; i += 1) {
			cin >> from >> to;
			nodes[from].childs.push_back(to);
			nodes[to].childs.push_back(from);
		}
		dfs(1, 0);

		res = 0;
		for (i = 1; i <= n; i += 1) res = (res + i * nodes[i].sum) % PRIME;
		cout << res << endl;
	}
	return 0;
}
