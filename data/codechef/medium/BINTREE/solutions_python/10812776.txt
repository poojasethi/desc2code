def find_level(node):
    count = 0
    val = 1
    while node >= val:
        val *= 2
        count += 1
    return count - 1


def balance(node1, node2, node1_level, node2_level):
    while node1_level != node2_level:
        node1_level -= 1
        node1 /= 2
    return node1, node2, node1_level, node2_level


def lca(n1, n2, n1_level, n2_level):
    # Left tilt
    if n1_level > n2_level:
        n1, n2, n1_level, n2_level = balance(n1, n2, n1_level, n2_level)
    elif n1_level < n2_level:
        # Right tilt
        n2, n1, n2_level, n1_level = balance(n2, n1, n2_level, n1_level)
    # Common ancestor finding
    while n1 != n2:
        n1 /= 2
        n2 /= 2
    return n1


for _ in xrange(input()):
    m, n = map(int, raw_input().split())
    m_level = find_level(m)
    n_level = find_level(n)
    print m_level + n_level - 2 * find_level(lca(m, n, m_level, n_level))