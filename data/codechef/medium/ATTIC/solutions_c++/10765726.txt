#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
using namespace std;

#define s(T) scanf("%d", &T)
#define sl(T) scanf("%lld", &T)
#define fill(a, val) memset(a, val, sizeof(a))
#define mp make_pair
#define pb push_back
#define all(x) x.begin(), x.end()
#define DREP(x) sort(all(x)); x.erase(unique(all(x)), x.end())
#define INDEX(a, val) (lower_bound(all(a), val) - a.begin())

const int maxlen = 1000000;
const int maxtotlen = 5000000;

int totalCases, testNum;
//char passage[maxlen + 1];
string passage;
int len;
int totlen;

void preprocess()
{
	totlen = 0;
}

bool input()
{
//	scanf("%s", passage);
	cin >> passage;
//	len = strlen(passage);
	len = passage.length();
	assert(len <= maxlen);
	totlen += len;
	assert( totlen <= maxtotlen);
	for(int i = 0; i < len; i++)
		assert(passage[i] == '.' || passage[i] == '#');
	assert(passage[0] == '#' && passage[len-1] == '#');
	return true;
}

void solve()
{
	int ans = 0, L = 1;			// L = maxjumplength currently
	int cur = 0;
	for(int i = 0, j = 0; i < len; i=j)
	{
		//finds next # position from i => length to jump
		for(j = i+1; j < len; j++)
			if(passage[j] == '#')
				break;
		if(j-i > L)
		{
			ans ++;
			L = j-i;
		}
	}
	//printf("%d\n", ans);
	cout << ans << endl;
}

int main()
{
	preprocess();
	s(totalCases);
	for(testNum = 1; testNum <= totalCases; testNum++)
	{
		if( !input())
			break;
		solve();
	}
}