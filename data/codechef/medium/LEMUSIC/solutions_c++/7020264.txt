#include<iostream>
using namespace std;
class node
{
   long long int L;
   long long int B;
public:
   bool operator<(node n);
   friend void merg(int,int);
   friend void mergesort(int,int);
   friend int main();
};
node *song;
bool node::operator<(node n)
{
   if(B<n.B)
      return true;
   if(B>n.B)
      return false;
   if(L<n.L)
      return true;
   return false;
}
void merg(int first,int last)
{
   int i,j,k,mid;
   i=first;
   mid=(first+last)/2;
   j=mid+1;
   k=0;
   node s[last-first+1];
   for(;i<=mid&&j<=last;)
   {
      if(song[i]<song[j])
         s[k++]=song[i++];
      else
         s[k++]=song[j++];
   }
   for(;i<=mid;)
      s[k++]=song[i++];
   for(;j<=last;)
      s[k++]=song[j++];
   for(i=0;i<=last-first;i++)
      song[first+i]=s[i];
}
void mergesort(int first,int last)
{
   if(last<=first)
      return ;
   mergesort(first,(first+last)/2);
   mergesort((first+last)/2+1,last);
   merg(first,last);
}
int main()
{
   int T,N,i,k;
   long long int ans;
   cin>>T;
   while(T--)
   {
      cin>>N;
      song=new node[N+1];
      for(i=1;i<=N;i++)
         cin>>song[i].B>>song[i].L;
      mergesort(1,N);
      song[0].B=song[0].L=-1;
      for(k=0,i=1,ans=0;i<=N;i++)
      {
         if(song[i].B!=song[i-1].B)
         {
               song[k].L=song[i].B;
               song[k++].B=song[i].L;
         }
         else
            ans+=song[i].L;
      }
      ans*=k;
      mergesort(0,k-1);
      for(i=0;i<k;i++)
         ans+=song[i].B*(i+1);
      cout<<ans<<endl;
   }
   return 0;
}