#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)<(y)?(x):(y))
 
using std::sort;
 
#define IS_DIGIT(x) ((x) >= '0' && (x) <= '9')
 
static int parse_uint()
{
  int i = 0;
  char c = getchar_unlocked();
  while(!IS_DIGIT(c)) c = getchar_unlocked();
  do {
    i = (i*10) + c-'0';
    c = getchar_unlocked();
  }while(IS_DIGIT(c));
  return i;
}
 
typedef struct {
  unsigned int k;
  int v;
} kv_t;
 
static inline kv_t *kv_probe(int n, kv_t *kv, unsigned int key)
{
  kv_t *cur = &kv[key % n];
  while(1){
    for(; cur != kv+n; cur++){
      if(cur->k == key || cur->k == -1){
	return cur;
      }
    }
    cur = kv;
  }
}
 
kv_t *kv_alloc(int n)
{
  kv_t *kv = (kv_t*)malloc(n * sizeof(kv_t));
  memset(kv, -1, n * sizeof(kv_t));
  return kv;
}
 
static inline kv_t *kv_find(int n, kv_t *kv, int key)
{
  kv_t *slot = kv_probe(n, kv, key);
  return slot->k == key ? slot : NULL;
}
 
void do_it()
{
  int64_t tail = 0, sweetness = 0;
  unsigned int i, n, n_bands = 0;
  int *min_val;
 
  n = parse_uint();
 
  min_val = (int*)malloc(n*sizeof(int));
  int n_kv = 1 + n*2.5;
  kv_t *kv = kv_alloc(n_kv);
 
  for(i = 0; i < n; i++){
    int b, l;
    b = parse_uint();
    l = parse_uint();
 
    kv_t *slot = kv_probe(n_kv, kv, b);
    if(slot->k != b){
      slot->k = b; slot->v = n_bands;
      min_val[n_bands] = l;
      n_bands++;
    }
    else{
      int idx = slot->v;
      tail += MAX(min_val[idx], l);
      min_val[idx] = MIN(min_val[idx], l);
    }
  }
 
  sort(min_val, min_val + n_bands);
 
  for(i = 0; i < n_bands; i++){
    sweetness += (i+1)*((int64_t)min_val[i]);
  }
  sweetness += tail*n_bands;
 
  printf("%lli\n", sweetness);
  free(kv);
  free(min_val);
}
 
int main(int argc, char **argv)
{
  int n_test, i;
 
  n_test = parse_uint();
  for(i = 0; i < n_test; i++){
    do_it();
  }
  return 0;
}