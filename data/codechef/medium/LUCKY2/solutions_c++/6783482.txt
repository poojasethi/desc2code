/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define ff first
#define ss second
#define mkp make_pair
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

#define get getchar_unlocked
/*inline int scan()
{
    int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n*s;
}

void print(int X)
{
  if(X<0) { putchar_unlocked('-');  X=-X;  }
  int Len=0,Data[10];
  while(X) { Data[Len++]=X%10; X/=10; }
  if(!Len) Data[Len++]=0;
  while(Len--) putchar_unlocked(Data[Len]+48);
}*/

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}
LL dp[1005][800];
LL lucky[1005];
char A[1005];
char B[1005];

void addOne()
{
	char rev[1005];
	int len = strlen(B);
	for (int i = 0; i < len; ++i) {
		rev[(len - 1) - i] = B[i];
	}
	rev[len] = '\0';

	//	cout<< "rev => " << rev <<"\n"; 

	int carry = 1;
	for (int i = 0; i < len; ++i) {
		int dig = rev[i] - '0';
		dig += carry;
		rev[i] = (dig % 10) + 48;
		carry = dig / 10;
	}
	if (carry)
		rev[len++] = (carry)+48;
	for (int i = 0; i < len; ++i)
		B[i] = rev[(len - 1) - i];
}

void pre()
{
    for(int i = 4; i <= 777; i++)
    {
        int j = i;
        while(j)
        {
            if(j%10 != 4 && j%10 != 7) break;
            j /= 10;
        }
        if(j == 0) lucky[i] = 1;
    }
}

LL rec(LL rem, LL cnt)
{
	if(rem == 0) {
		return lucky[cnt];
	}
	if(cnt > 777) {
		return 0LL;
	}
	if(dp[rem][cnt] != -1) {
		return dp[rem][cnt];
	}
	LL ans = 0;
	ans += (rec(rem - 1, cnt) << 3) + (rec(rem - 1, cnt + 1) << 1); 
	if(ans >= mod) {
		ans %= mod;
	}
	/*for(int i = 0; i <= 9; i++) {
		if(i == 4 || i == 7) {
			ans += rec(rem - 1, cnt + 1);
			if(ans >= mod) {
				ans %= mod;
			}
		}
		else {
			ans += rec(rem - 1, cnt);
			if(ans >= mod) {
				ans %= mod;
			}
		}
	}*/
	return dp[rem][cnt] = ans;
}

LL solve1(char *str)
{
	LL l = strlen(str);
	LL rem = l;
	LL cnt = 0;
	LL ans = 0;
	for(LL i = 0; i < l; i++) {
		LL dig = str[i] - '0';
		rem--;
		for(LL j = 0; j < dig; j++) {
			if(j == 4 || j == 7) {
				ans += rec(rem, cnt + 1);
				if(ans >= mod) {
					ans %= mod;
				}
			}
			else {
				ans += rec(rem, cnt);
				if(ans >= mod) {
					ans %= mod;
				}
			}
		}
		if(dig == 4 || dig == 7)
			cnt++;
	}
	return ans;
}

void solve()
{
	memset(dp, -1, sizeof(dp));
	scanf("%s%s", A, B);
	addOne();
	LL bb = solve1(B);
	LL aa = solve1(A);
	LL ans = bb - aa;
	if (ans < 0)
		ans += mod;
	printf("%lld\n", ans);	
}

int main()
{
	pre();
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
