#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<map>
using namespace std;

#define NN 1005
#define MOD 1000000007
#define LL 14

typedef long long ll;



ll fm[NN], fmi[NN], pow2[NN], pow8[NN], lucky[LL], ansL, ansR;

char l[NN], r[NN];
int L[NN], R[NN];
int modL, modR;

ll mpow(ll a, int p)
{
    ll ans = 1;
    while(p)
    {
        if(p&1)ans = (ans*a)%MOD;
        a = (a*a)%MOD;
        p >>= 1;
    }
    return ans;
}

ll mi(ll a)
{
    return mpow(a, MOD-2);
}

bool islucky(ll n)
{
    ll a;
    while(n)
    {
        a = n%10;
        if(a!=4 && a!=7)return 0;
        n/=10;
    }
    return 1;
}

void precompute()
{
    fm[0]=1, fmi[0] = 1, pow2[0]=1, pow8[0] = 1;
    for(ll i=1; i<NN; i++)
    {
        pow2[i] = mpow((ll)2, i);
        pow8[i] = mpow((ll)8, i);
        fm[i] = (fm[i-1]*i)%MOD;
        fmi[i] = (fmi[i-1]*mi(i))%MOD;
    }
    int k=0;
    for(ll i=1; i<NN; i++)
    {
        if(islucky(i))lucky[k++]=i;
    }
}

ll nCr(int n, int r)
{
    ll ans;
    if(n<r || n==0)ans = 0;
    else
    {
        ans = (fm[n]*fmi[r])%MOD;
        ans = (ans*fmi[n-r])%MOD;
    }
    return ans;
}


ll getfree(int len, int pre)//already pre lucky numbers present
{
    ll res =0;
    for(int i=0; i<LL; i++)
    {
        if(lucky[i]-pre >=0)
        {
            res+= (((nCr(len, lucky[i]-pre)*pow2[lucky[i]-pre])%MOD)*pow8[len-lucky[i]+pre])%MOD;
            res%= MOD;
        }

    }
    return res;
}

void getL(int start, int s, int pre)
{
    if(s==1)
    {
        for(int i=0; i<LL; i++)
        {
            for(int k=0; k<=L[start]; k++)
            {
                if(k==4 || k==7)
                {
                    if(pre+1 == lucky[i])ansL = (ansL+1)%MOD;
                }
                else
                {
                    if(pre == lucky[i])ansL = (ansL+1)%MOD;
                }
            }
        }
    }

    else
    {
    if(L[start] == 4 || L[start] == 7)
    {
       getL(start+1, s-1, pre+1);
    }
    else
    {
        getL(start+1, s-1, pre);
    }
    for(int k=0; k<L[start]; k++)
    {
        if(k == 4 || k== 7)
        {
            ansL+= getfree(s-1, pre+1);
            ansL%=MOD;
        }
        else
        {
            ansL+=getfree(s-1, pre);
            ansL%=MOD;
        }
    }
    }

}
void getR(int start, int s, int pre)
{
    if(s==1)
    {
        for(int i=0; i<LL; i++)
        {
            for(int k=0; k<=R[start]; k++)
            {
                if(k==4 || k==7)
                {
                    if(pre+1 == lucky[i])ansR = (ansR+1)%MOD;
                }
                else
                {
                    if(pre == lucky[i])ansR = (ansR+1)%MOD;
                }
            }
        }
    }

    else
    {
    if(R[start] == 4 || R[start] == 7)
    {
       getR(start+1, s-1, pre+1);
    }
    else
    {
        getR(start+1, s-1, pre);
    }
    for(int k=0; k<R[start]; k++)
    {
        if(k == 4 || k== 7)
        {
            ansR+= getfree(s-1, pre+1);
            ansR%=MOD;
        }
        else
        {
            ansR+=getfree(s-1, pre);
            ansR%=MOD;
        }
    }
    }

}

bool isLLucky()
{
    int nluck=0;

    for(int i=0; i<modL; i++)
    {
        if(L[i] == 4 || L[i] == 7)nluck++;
    }
    for(int i=0;i<LL; i++)
    {
        if(nluck == lucky[i])return 1;
    }
    return 0;
}


void solve()
{
    ll res;
    ansL=0, ansR=0;
    scanf("%s%s", l, r);
    modL = strlen(l), modR= strlen(r);
    for(int i=0; i<strlen(l); i++)
    {
        L[i] = l[i]-'0';
    }
    for(int i=0; i<strlen(r); i++)
    {
        R[i] = r[i]-'0';
    }
    getL(0, modL, 0);
    if(isLLucky())
    {
        ansL--;
        if(ansL<0)ansL+=MOD;
    }
    getR(0, modR, 0);
    res = ansR - ansL;
    if(res<0)res+= MOD;
    printf("%lld\n", res);
}


int main()
{
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin);
   freopen("output.txt","w",stdout);
   #endif

    precompute();

    int t;
    scanf("%d", &t);
    while(t--)
    {
        solve();
    }





}

