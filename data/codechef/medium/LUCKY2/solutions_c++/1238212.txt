#include <cstdio>
#include <algorithm>
#include <cstring>
#include <utility>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <iostream>
#include <set>
#include <cmath>

using namespace std;

#define Fr(i,a,b) for(int i=a;i<b;++i)
#define F first
#define S second
#define INF 0x3f3f3f3f
typedef pair<int,int> pii;
typedef vector<pii> vpii;
typedef vector<int> vi;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
#define MOD 1000000007


int t;
string a, b;
string alvo;

int luck[20];
int nluck = 0;
int dp[1001][1001][2];
int casos[1001][1001][2];
int cas = 1;



bool ehLucky(int a){
	while(a){
		int x = a%10;
		if(x == 4 || x == 7) a /= 10;
		else return false;
	}
	return true;
}
int go(int tam, int qtdDig, int c){
	if(tam == 0){
		if(qtdDig == 0) return 1;
		return 0;
	}
	if(qtdDig > tam) return 0;
	if(qtdDig < 0) return 0;
	if(c == 0){
		if(casos[tam][qtdDig][0] != INF) return dp[tam][qtdDig][0];
		else{
			casos[tam][qtdDig][0] = t;
			return dp[tam][qtdDig][0] = ((2*go(tam-1, qtdDig-1, c))%MOD + (8LL*go(tam-1, qtdDig, c))%MOD)%MOD;
		}
	}
	else{
		if(casos[tam][qtdDig][1] == cas) return dp[tam][qtdDig][1];
		casos[tam][qtdDig][1] = cas;
		int& ref = dp[tam][qtdDig][1];
		ref = 0;
		if(alvo[alvo.size()-tam] == '4' || alvo[alvo.size()-tam] == '7') ref = (ref + go(tam-1, qtdDig-1, 1))%MOD;
		else ref = (ref + go(tam-1, qtdDig, 1))%MOD;
		Fr(i,0,alvo[alvo.size()-tam]-'0'){
			if(i == 4 || i == 7) ref = (ref + go(tam-1, qtdDig-1, 0))%MOD;
			else ref = (ref + go(tam-1, qtdDig, 0))%MOD;
		}
		return ref;
	}
}

void subtrai(){
	int cont = a.size()-1;
	if(a.size() == 1 && a[0] == '0') return;
	while(a[cont] == '0') a[cont] = '9', cont--;
	a[cont]--;
}


int main(){
	cin.sync_with_stdio(false);
	cin>>t;
	Fr(i,1,1000){
		if(ehLucky(i)) luck[nluck++] = i;
	}
	memset(casos, 0x3f, sizeof casos);
	while(t--){
		cin>>a>>b;
		subtrai();
		int resp = 0;
		Fr(i,0,nluck){
			alvo = b;
			cas++;
			resp += go(b.size(), luck[i], 1);
			cas++;
			alvo = a;
			resp -= go(a.size(), luck[i], 1);
			resp %= MOD;
			resp += MOD;
			resp %= MOD;
		}
		printf("%d\n",resp);
	}
	return 0;
}
























