#include <cstring>
#include<iostream>
#include<stdio.h>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <cmath>
using namespace std;
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)
#define mod 1000000007
#define MAXN 1000010
#define ll long long
#define get getchar//_unlocked
inline ll inp()
{
    ll n=0,s=1;
    char p=get();
    if(p=='-')
    s=-1;
    while((p<'0'||p>'9')&&p!=EOF)
    p=get();
    while(p>='0'&&p<='9')
    {
    n = (n<< 3) + (n<< 1) + (p - '0');
    p=get();
    };
    return n*s;
}
ll fact[1005],invfact[1005],pow2[1005],pow8[1005];
ll a[]={4,7,44,47,74,77,444,447,474,477,744,747,774,777};
long long power(long long a,long long b)
{
    long long r=1,x=a;
    while(b>0)
    {
        if(b&1)r=(r*x)%mod;
        x=(x*x)%mod;
        b>>=1;
    }
    return r;
}
void factorial()
{
    long long i;
    fact[0]=1;
    for(i=1;i<1002;i++)
    fact[i]=((i*fact[i-1])%mod);
    pow2[0]=pow8[0]=1;
    for(i=1;i<1002;i++)
    {pow2[i]=(pow2[i-1]<<1)%mod;
     pow8[i]=(pow8[i-1]<<3)%mod;
    }
}
void inv()
{
    long long i;
    invfact[1001]=power(fact[1001],mod-2);
    for(i=1000;i>=0;i--)
    invfact[i]=((((i+1))%mod)*(invfact[i+1])%mod)%mod;
}
ll comb(ll n,ll r)
{
    if(r>n)return 0;
    ll res=1,p;
    res*=fact[n];
    p=(invfact[r]*invfact[n-r])%mod;
    res=(res*p)%mod;
    return res;
}
ll cal(char s[],ll l)
{
    ll luc=0,i,j,k,c,m,n,res=0,x;
    for(i=0;i<l;i++)
    {
        if(i>0)
        luc+=(s[i-1]=='4'||s[i-1]=='7');//printf("%lld\n",luc);
        k=s[i]-'0'+(i==l-1);
        for(j=0;j<k;j++)
        {
            c=luc+(j==4||j==7);//printf("c=%lld\n",c);
            for(m=0;m<14;m++)
            {
                n=a[m];
                if(n<c||(n-c)>(l-i-1))continue;
                x=comb(l-i-1,n-c);
                x=(x*pow2[n-c])%mod;//printf("%lld\n",x);
                x=(x*pow8[(l-i-1)-(n-c)])%mod;
                res=(res+x)%mod;
            }
        }
    }
    return res;
}
int main()
{
    ll i,n,j,k,l,m,t,c=0,l1,ans;
    char s[1005],s1[1005];
    factorial();
    inv();
     t=inp();
    while(t--)
    {
    scanf("%s%s",s,s1);
     l=strlen(s);l1=strlen(s1);
     if(s[l-1]!='0')
     s[l-1]--;
     else
     {
     for(i=l-1;i>0;)
     if(s[i]=='0')
     s[i]='9',i--;
     else break;
     if(i==0&&s[i]=='1')
     for(j=0;j<l;j++)
     s[j]=s[j+1];
     else s[i]--;
     }
     l=strlen(s);
     ans=(cal(s1,l1)-cal(s,l)+mod)%mod;

     //printf("%lld %lld\n",cal(s1,l1),cal(s,l));
     printf("%lld\n",ans);
    }
    return 0;
}
