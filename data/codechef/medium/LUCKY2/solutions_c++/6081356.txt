#include <bits/stdc++.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // __builtin_popcountll for LL
#define SZ(v) (int)(v.size())
#define eps 1e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
template <class T> T sqr(T a){return a * a;}
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> void extract(string s, T &ret) {stringstream ss(s); ss >> ret;}
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}
//struct fast{fast(){ios_base::sync_with_stdio(0);cin.tie(0);}}cincout;

#define MAX 1005
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/

LL dp[MAX][MAX][2], mod = 1000000007;
int visited[MAX][MAX][2], cur, n;
bool lucky[MAX];
char s[MAX];

LL call(int indx, int ldigit, int chhoto)
{
    if(ldigit > 777) return 0;
    if(indx >= n)
        return lucky[ldigit];
    LL &ret = dp[indx][ldigit][chhoto];
    int &visit = visited[indx][ldigit][chhoto];
    if(visit == cur) return ret;
    visit = cur;
    ret = 0;
    if(chhoto)
    {
        ret += 2 * call(indx+1, ldigit+1, chhoto);
        ret += 8 * call(indx+1, ldigit, chhoto);
        if(ret >= mod)
            ret %= mod;
        return ret;
    }
    int lim = s[indx] - '0';
    if(lim <= 4)
        ret += lim * call(indx+1, ldigit, 1);
    else if(lim <= 7)
    {
        ret += call(indx+1, ldigit+1, 1);
        ret += (lim - 1) * call(indx+1, ldigit, 1);
    }
    else
    {
        ret += 2*call(indx+1, ldigit+1, 1);
        ret += (lim-2)*call(indx+1, ldigit, 1);
    }
    ret += call(indx+1, ldigit + (lim == 4 || lim == 7), 0);
    if(ret >= mod)
        ret %= mod;
    return ret;
}

bool islucky(int n)
{
    if(n == 0) return 0;
    while(n)
    {
        if(!(n % 10 == 4 || n % 10 == 7))
            return false;
        n /= 10;
    }
    return true;
}
bool islucky()
{
    int cnt = 0, i;
    for(i = 0; i < n; i++)
    {
        if(s[i] == '4' || s[i] == '7')
            cnt++;
    }
    return lucky[cnt];
}

int main()
{
    #ifdef Evan
//        in;
//        out;
    #endif
    int test, add;
    LL res;
    for(test = 1; test < MAX; test++)
        lucky[test] = islucky(test);
    scanf("%d", &test);
    while(test--)
    {
        scanf(" %s", s);
        n = strlen(s);
        add = islucky();
        ++cur;
        res = -call(0, 0, 0);
        scanf(" %s", s);
        n = strlen(s);
        ++cur;
        res += call(0, 0, 0) + mod + add;
        res %= mod;
        printf("%lld\n", res);
    }
    return 0;
}

