#include <iostream>
#include <cstdio>
#include <string>
#include <fstream>

#define MOD 1000000007

typedef long long ll;

using namespace std;

ll calcAns(string numb);
ll combination(int n, int k);
ll pow(ll n, int k);

int luckyNum[14] = {4, 7, 44, 47, 74, 77, 444, 447, 474, 477, 744, 747, 774, 777};
int comb[1001][1001];

string num1, num2;
ll res1, res2;
int T;

int main(void){ 
   //freopen("test_luckyNumber.txt", "r", stdin);   
   
   int i, j, l;
   
   for(i=0; i<1001; i++){
      comb[i][0] = 1;
      for(j=1; j<=i; j++){
         comb[i][j] = (comb[i-1][j] + comb[i-1][j-1])%MOD;
      }
   }
   int count = 0;
   scanf("%d", &T);
   
   while(T--){
      
      count = 0;
      cin >> num1 >> num2;     
      //cout << num1 << "\n" << num2 << "\n";
      res1 = calcAns(num1);
      /*for(i=0; i<num1.size(); i++)
         count += (num1[i]=='4' || num1[i]=='7');
      for(l=0; l<14; l++){
         if(count == luckyNum[l]){
            res1 += (res1+1)%MOD;
            break;
         }
      }*/
      //cout << "res1: " << res1 << "\n";
      count = 0;
      res2 = calcAns(num2);
      for(i=0; i<num2.size(); i++)
         count += (num2[i]=='4' || num2[i]=='7');
      for(l=0; l<14; l++){
         if(count == luckyNum[l]){
            res2 = (res2+1)%MOD;
            break;
         }
      }
      //cout << "res2: " << res2 << "\n";
      
      printf("%lld\n", (res2-res1+MOD)%MOD);
   }
   return 0;
}

ll calcAns(string numb){
   ll res = 0, ans;
   int fl = 0, i, j, l;
   for(l=0; l<14; l++){
      if(luckyNum[l] > numb.size())
         break;
      fl = 0;
      for(i=0; i<numb.size(); i++){
         //ans = 0;
         if(luckyNum[l]-fl > numb.size()-i || luckyNum[l] < fl)
               break;
         for(j='0'; j<numb[i]; j++){
            ans = combination(numb.size()-i-1, luckyNum[l]-fl-(j == '4' || j == '7'));
            ans = (ans*pow(2, luckyNum[l]-fl-(j == '4' || j == '7')))%MOD;
            ans = (ans*pow(8, numb.size()-i-1 - (luckyNum[l]-fl-(j == '4' || j == '7'))))%MOD;
            res = (res+ans)%MOD;
            //res += (((combination(numb.size()-i-1, luckyNum[l]-fl-(j == '4' || j == '7')) * pow(2, luckyNum[l]-fl-(j == '4' || j == '7')))%MOD) * pow(8, numb.size()-i-1 - (luckyNum[l]-fl-(j == '4' || j == '7'))))%MOD;
         }
         
         fl += (numb[i]=='4' || numb[i]=='7');
      }  
      
   }
   //cout << "res: " << res << "\n";
   return res;
}

ll combination(int n, int k){
   //printf("n k ans: %d %d %lld\n", n, k, 0);
   if(k > n){
      return 0;
   }
   
   
   if(n == 0 && k==0)
      return 1;
   
   /*if(k > n/2)
      k = n-k;
   ll res = 1;
   int i, j;
   
   for(i=n, j=2; i>n-k && j>0; i--){
      res *=i;
      
      while(res%j == 0 && j <= k){
         res /= j;
         j++;
      }
   }
   
   while(i > n-k){
      res = (res*i)%MOD;
      i--;
   }
   
   res = res%MOD;
   
     
   return res;*/
   
   return ll(comb[n][k]);
   
   
}

ll pow(ll n, int k){
   ll res = 1;
   
   while(k){
      if(k%2)
         res = (res*n)%MOD;
       n = (n*n)%MOD;
       k /=2;
   } 
   return res;
}
         
   
      
         