#include <iostream>
#include <string>
using namespace std;
#define MOD 1000000007
long long comb[1001][1001], pow2[1001], pow8[1001];
long long allowed[14] = {4,7, 44,47,74,77, 444,447,474,477,744,747,774,777};
long long doit(const string& N) {
	long long ret = 0;
	for (long long i = 0; i < N.size(); i++) {
		long long lucky = 0;
		for (long long j = 0; j < i; j++) lucky += (N[j]=='4' || N[j]=='7');
		long long lim = N[i]-'0' + (i==N.size()-1);
		for (long long dig = 0; dig < lim; dig++) {
			long long cur = lucky + (dig == 4 || dig == 7);
			for (long long alln = 0; alln < 14; alln++) {
				long long all = allowed[alln];
				if (all < cur || all-cur > N.size()-i-1) continue;
				long long v = comb[N.size()-i-1][all-cur];
				v = (v * (long long)pow2[all-cur]) % MOD;
				v = (v * (long long)pow8[(N.size()-i-1) - (all-cur)]) % MOD;
				ret = (ret + v) % MOD;
      }
		
   }
  }
	return ret;
}
int main() {
	long long i;
	for ( i = 0; i <= 1000; i++) {
		comb[i][0] = 1;
		for (long long j = 1; j <= i; j++)
			comb[i][j] = (comb[i-1][j] + comb[i-1][j-1]) % MOD;
  }
	pow2[0] = pow8[0] = 1;
	for (i = 1; i <= 1000; i++) pow2[i] = (pow2[i-1]*2) % MOD;
	for (i = 1; i <= 1000; i++) pow8[i] = (pow8[i-1]*8) % MOD;
	long long T;
	for (cin >> T; T--;) {
		string L, R;
		cin >> L >> R;
		L = string(R.size()-L.size(), '0') + L;
		for (i = L.size()-1; ; i--) {
			if (--L[i] < '0') L[i] = '9'; else break;
    }
		long long ret = (doit(R) - doit(L) + MOD) % MOD;
		cout << ret << endl;
  }
	return 0;
} 