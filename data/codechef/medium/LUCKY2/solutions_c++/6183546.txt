//Chef loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.
//
//Let F(X) equals to the number of lucky digits in decimal representation of X. Chef wants to know the number of such integers X, that L <= X <= R and F(X) is a lucky number. Help him and calculate that number modulo 10^9+7.
//
//Input
//
//First line contains one integer T, the number of test cases. Each of the following T lines contains two space separated positive integers L and R.
//
//Output
//
//For each of the T test cases print one integer, the number of such X, that L <= X <= R and F(X) is a lucky number, modulo 1000000007.
//
//Constraints
//
//1 <= T <= 10
//
//1 <= L <= R <= 101000
//
//Example
//
//Input:
//4
//1 100
//1 10000
//1 100000
//4444 4447
//
//Output:
//0
//16
//640
//2
//Notes
//
//First test case: of course, any number of less than 4 digits can't contain lucky number of lucky digits, so the answer is 0.
//
//Second test case: 16 required numbers are 4444 4447 4474 4477 4744 4747 4774 4777 7444 7447 7474 7477 7744 7747 7774 7777.
//
//Third test case: there are 640 required lucky numbers. Some of them are 4474, 14747, 41474, 77277, 44407, 74749.
//
//Fourth test case: the only two required numbers are 4444 and 4447.

//C headers
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>
//cpp headers
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
//#include <bits/stdc++.h>
//#include <bitset>
using namespace std;
//typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef char C;
typedef string S;
typedef unsigned long long UNL;

//some constants
const double PI = 2.0 * acos(0.0);
//always useful
#define gcd(a,b) __gcd(a,b)
#define clr(a) memset(a, 0, sizeof(a))
#define mem(a,b) memset(a, b, sizeof(a))
#define LOG(x,BASE) (log10(x)/log10(BASE))
#define rep(i, a, n) for(int i = a; i < n; ++i)
#define rrep(i, a, n) for(int i = a; i > n; --i)
#define repe(i, a, n) for(int i = a; i <= n; ++i)
#define rrepe(i, a, n) for(int i = a; i >= n; --i)
//useful with graphs
#define fr first
#define sc second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define IT iterator
#define all(v) v.begin(), v.end()
#define ssort(v) stable_sort(v.begin(), v.end())
#define LB(v, x) lower_bound(v.begin(), v.end(), x)
#define UB(v, x) upper_bound(v.begin(), v.end(), x)
#define loop(i, x) for(__typeof((x).begin()) i=(x.begin()); i!=(x).end(); ++i)
#define rloop(i, x) for(__typeof((x).rbegin()) i=(x.rbegin()); i!=(x).rend(); ++i)
#define sz(a) (int)a.size()
#define sf scanf
#define pf printf
#define NL pf("\n")
#define sf1(a) scanf("%d",&a)
#define sf2(a,b) scanf("%d %d",&a,&b)
#define sf3(a,b,c) scanf("%d %d %d", &a,&b, &c)
#define sf4(a,b,c,d) scanf("%d%d%d%d",&a,&b,&c,&d)
#define sf5(a,b,c,d,e) scanf("%d%d%d%d%d",&a,&b,&c,&d,&e)
#define sf6(a,b,c,d,e,f) scanf("%d%d%d%d%d%d",&a,&b,&c,&d,&e,&f)
#define __ freopen("in.in", "r", stdin)
#define ___ freopen("out.out", "w", stdout)
#define oo 1000000000
#define ____ freopen("in.in", "w", stdout)
/*--------------------------------------------------------------------------------------------------*/


const double EPS = 1e-9;
//ll Pow(ll B,ll P){  ll R=1; while(P>0)  {if(P%2==1) R=(R*B);P/=2;B=(B*B);}return R;}

//ll extGcd(ll a, ll b, ll& x, ll& y){if (b == 0){x = 1;y = 0;return a;}else{ll g = extGcd(b, a % b, y, x);y -= a / b * x;return g;}}
//ll modInv(ll a, ll m){ll x, y; extGcd(a, m, x, y); x %= m; while (x < 0){x += m;} return x;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//ll BigMod(ll B,ll P,ll M){ ll R=1%M; while(P>0) {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} ret urn R;} /// (B^P)%M

//template <class T> inline T gcd(T a, T b){if(b == 0) return a;return gcd(b,a%b);}
//template <class T> inline T lcm(T a, T b){return (a/gcd(a,b)) * b;}

//int x[] = {0,0,-1,1};//4-way
//int y[] = {-1,1,0,0};//4-way
//ll x[] = {-1,-1,-1,0,0,1,1,1};//8-way
//ll y[] = {-1,0,1,-1,1,-1,0,1};//8-way
//int dx[] = {+1,+1,+2,+2,-1,-1,-2,-2}; //knight moves
//int dy[] = {+2,-2,+1,-1,+2,-2,+1,-1}; // knight moves
//inline long FastMax(long x, long y) { return (((y-x)>>(32-1))&(x^y))^y; }
//inline long FastMin(long x, long y) { return (((y-x)>>(32-1))&(x^y))^x; }
//inline long FastMin(long x, long y) { return (((y-x)>>(32-1))&(x^y))^x; }
//v.resize( unique(all(v)) - v.begin() );

//#include<conio.h>
//#define wait getch()

//if (N mod 2) = 0
//  if (N mod 4) = 0 then r = N else r = N+1
//else
//  if (N mod 4) = 1 then r = 1 else r = 0

int cases = 1;

double getdist(ii a, ii b)
{
    return sqrt(pow((double)a.fr - b.fr, 2) + pow((double)a.sc - b.sc, 2));
}

C str[1005];
ll dp[1005][800][2];
int vis[1005][800][2];
const int mod = 1000000007;
bool Lucky[1005];
int N;

bool isLucky(int n)
{
    while(n)
    {
        if(n % 10 != 4 and n % 10 != 7)
            return 0;
        n /= 10;
    }
    return true;
}

void read(void)
{

    return ;
}

ll rec(int indx, int ldigit, int chhoto)
{
    if(ldigit > 777) return 0;
    if(indx >= N)
        return Lucky[ldigit];
    ll &ret = dp[indx][ldigit][chhoto];
    int &visit = vis[indx][ldigit][chhoto];
    if(visit == cases) return ret;
    visit = cases;
    ret = 0;
    if(chhoto)
    {
        ret += 2 * rec(indx+1, ldigit+1, chhoto);
        ret += 8 * rec(indx+1, ldigit, chhoto);
        if(ret >= mod)
            ret %= mod;
        return ret;
    }
    int lim = str[indx] - '0';
    if(lim <= 4)
        ret += lim * rec(indx+1, ldigit, 1);
    else if(lim <= 7)
    {
        ret += rec(indx+1, ldigit+1, 1);
        ret += (lim - 1) * rec(indx+1, ldigit, 1);
    }
    else
    {
        ret += 2*rec(indx+1, ldigit+1, 1);
        ret += (lim-2)*rec(indx+1, ldigit, 1);
    }
    ret += rec(indx+1, ldigit + (lim == 4 || lim == 7), 0);
    if(ret >= mod)
        ret %= mod;
    return ret;
}


int main()
{
    for(int i = 1; i < 1005; i++) Lucky[i] = isLucky(i);
    int test;
    sf1(test);
    while(test--)
    {
        sf(" %s", str);
        int add, c=0;
        N = strlen(str);
        rep(i, 0, N) if(str[i] == '4' or str[i] == '7') c++;
        add = Lucky[c];
        cases++;
        ll ans = -rec(0, 0, 0);
        cases++;
        sf(" %s", str);
        N = strlen(str);
        ans += rec(0, 0, 0) + add + mod;
        pf("%d\n", ans%mod);
    }
    return 0;
}
















