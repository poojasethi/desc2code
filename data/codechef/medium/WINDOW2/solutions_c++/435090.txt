


#include<stdio.h>
#include<stdlib.h>
#include <iostream>
#include <stack>
#include <vector>
#include<list>
#include <algorithm>
#include <map>
#include<stdio.h>
#include<stdlib.h>
#define INF 222222
#define pri(v) cout<<" "<<v<<" ";
#define pris(s)	cout<<s;
#define forr(i,n)  for(i=0;i<n;i++)
#define dbg(v) cout<<endl<<" debug: "<<v<<endl;
#define hi cout<<" hi "<<endl;
#define dem(a,n) a=(char**)malloc(sizeof(char*)*n);
#define dem_s(a,n)=(char(***)malloc(sizeof(char**)*n);
#define dems(a,n) a=(char*)malloc(sizeof(char)*n);
#define decs(a,n) a=(char*)calloc(sizeof(char),n);
#define space cout<<endl;

using namespace std;
long long int MOD=1000000080798150871LL;
int x,y,z;
long long int nr[1002][1002];

int counts=0;
int i, j, k;




int ones(int a,int b,int c,char**buf,int n){

	counts=0;
	
	forr(i,n){
	
		x=buf[i][0]-48; y=buf[i][1]-48; z=buf[i][2]-48;		
	
		if( !(a && (!x)) &&  !(b && (!y))  &&  !(c && (!z))  )
		{	
			counts++;
		}
	}

		
	return counts;

}



void compute(){

	int i, r;
	
	for(i=1;i<1001;i++)
	{
		nr[i][0]=1;
		nr[i][1]=i;
	}

	for(i=2;i<1001;i++)
		for(r=1;r<=i;r++)
			nr[i][r]=(nr[i-1][r-1]+nr[i-1][r])%MOD;
		
}





int main()
{
	int nn,i,ii, j,k;
	long long int sum;
	int n ,m, l;
	int a, b, c;
	char **buf;
	dem(buf, 1002);

	int row;

	compute();

	
	forr(i,1002)
		dems(buf[i],4);

	cin>>nn;
	
	forr(ii, nn){
	
		cin>>n;
		cin>>m; cin>>l; cin>>k;


		
		forr(i,n)
			cin>>buf[i];

		sum=0;

		if(l==0|| n==0){
			cout<<sum<<endl;
			continue;
		}
		
		if(m==1)	
			{
			   a=1;b=0;c=0;
			   row=ones(a,b,c,buf,n);
				if(row>=l)
			   sum=(sum+nr[row][l])%MOD;
			}
		else if(m==2){;
			if(k==1){

			   	a=0;b=1;c=0;
			   	row=ones(a,b,c,buf,n);
				if(row>=l)
				sum=(sum+nr[row][l])%MOD;
				
			   	a=1;b=0;c=0;
			   	row=ones(a,b,c,buf,n);
				if(row>=l)
				sum=(sum+nr[row][l])%MOD;
			}
			else if(k==2){ 
			   	a=1;b=1;c=0;
			   	
			   	row=ones(a,b,c,buf,n);
				if(row>=l)
				sum=(sum+nr[row][l])%MOD;
			}	
		}
		else if(m==3){
			if(k==1){

				a=1;b=0;c=0;
			   	row=ones(a,b,c,buf,n);
			   	if(row>=l)
				sum=(sum+nr[row][l])%MOD;

				a=0;b=1;c=0;
			   	row=ones(a,b,c,buf,n);
			   	if(row>=l)
				sum=(sum+nr[row][l])%MOD;

				a=0;b=0;c=1;
			   	row=ones(a,b,c,buf,n);
			   	if(row>=l)
				sum=(sum+nr[row][l])%MOD;


			}	
			else if(k==2){
				a=1;b=1;c=0;
			   	row=ones(a,b,c,buf,n);
			   	if(row>=l)
					sum=(sum+nr[row][l])%MOD;

				a=0;b=1;c=1;
			   	row=ones(a,b,c,buf,n);
			   	if(row>=l)
				sum=(sum+nr[row][l])%MOD;

				a=1;b=0;c=1;
			   	row=ones(a,b,c,buf,n);
			   	if(row>=l)
				sum=(sum+nr[row][l])%MOD;

			}
			else if(k==3){
				a=1;b=1;c=1;
			   	row=ones(a,b,c,buf,n);
			   	if(row>=l)
				sum=(sum+nr[row][l])%MOD;

			}	
		}

		cout<<sum<<endl;

	}

	
	return 0;
}


