#if 1
// Utility functions. Scroll down to solution
#pragma comment(linker, "/STACK:36777216")
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <ios>
#include <iostream>
#include <sstream>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <list>
#include <algorithm>
#include <utility>
#include <string>
using namespace std;

typedef pair<int, int> ii;

#define mp(x, y) make_pair(x, y)
#define sz(v) (int) ((v).size())

#define rep(i, n) for (int i = 0; i < n; i++)
#define repb(i, n) for (int i = n; i >= 0; i--)
#define fori(i, b, e) for (int i = b; i < e; i++)
#define forb(i, b, e) for (int i = b; i >= e; i--)


void solve();

int main()
{
#ifdef __USER_HOME__
    freopen("1.txt", "r", stdin);
    //freopen("1.out", "w", stdout);
#endif
    ios::sync_with_stdio(0);
    solve();
    return 0;
}

#endif

// Solution

inline
int bitCount(unsigned int v)
{
    v = v - ((v >> 1) & 0x55555555);                    // reuse input as temporary
    v = (v & 0x33333333) + ((v >> 2) & 0x33333333);     // temp
    return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24; // count
}

typedef long long LL;
const LL MOD = 1000000080798150871LL;

int A[1001];
LL dp[1001][1001];
char s[10];

void solve()
{
    dp[0][0] = 1;
    rep(i, 1001)
    {
        dp[i][0] = dp[i][i] = 1;
        for (int j = 1; j < i; j++)
            dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % MOD;
    }

    int T;
    scanf("%d", &T);
    rep(tc, T)
    {
        int N, M, L, K;
        scanf("%d%d%d%d", &N, &M, &L, &K);
        int MM = 1 << M;

        rep(i, N)
        {
            scanf("%s", s);

            int v = 0;
            rep(j, M)
            {
                v <<= 1;
                if (s[j] == '1')
                    ++v;
            }
            A[i] = v;
        }

        LL ans = 0;
        rep(mask, MM)
        {
            if (bitCount(mask) == K)
            {
                int cnt = 0;
                rep(i, N)
                {
                    if ((mask & A[i]) == mask)
                        ++cnt;
                }

                ans = (ans + dp[cnt][L]) % MOD;
            }
        }
        printf("%lld\n", ans);
    }
}
