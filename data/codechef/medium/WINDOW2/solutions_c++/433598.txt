// topcoder.cpp : ?R???\?[?? ?A?v???P?[?V?????̃G???g?? ?|?C???g???`???܂??B
//

#include <stdio.h>
#include <string.h>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <assert.h>
#include <iomanip>
#include <bitset>

using namespace std;
typedef unsigned long long ll;

static const double EPS = 1e-6;
int ROUND(double x) { return (int)(x+0.5); }
bool ISINT(double x) { return fabs(ROUND(x)-x)<=EPS; }
bool ISEQUAL(double x,double y) { return fabs(x-y)<=EPS*max(1.0,max(fabs(x),fabs(y))); }
double SQSUM(double x,double y) { return x*x+y*y; }	
#define PI	(3.14159265358979323846)
template<class T> bool INRANGE(T x,T a,T b) { return a<=x&&x<=b; }
#define NG (-1)
#define SZ(a) ((int)a.size()) 

#define BIG (987654321)


#if 1

// ?g?ݍ??킹
// mod???f???łȂ??Ă??Ή??ł????[
const int COMB_MAX_N =   1100;
const int COMB_MAX_K =   1110;
static ll combi[COMB_MAX_N][COMB_MAX_K];
void init_combination(ll MOD)
{
	memset(combi,0,sizeof(combi));
	combi[0][0]=1LL;
	for(int i=1;i<COMB_MAX_N;i++)
	{
		for(int k=1;k<COMB_MAX_K;k++)
		{
			combi[i][k]=(combi[i-1][k]+combi[i-1][k-1])%MOD;
		}
	}
}

ll get_combination(int n, int r)
{
	if(r>n)
	{
		return 0;
	}

	if(r>n/2)
	{
		r = n-r;
	}

	return combi[n+1][r+1];
}



// ?g?ݍ??킹
// O(n^2)??????s64?܂Ōv?Z?\
// u64?ɂ??????Ƃ???ll??unsigned long long?ɂ??ĂˁB
// 
// ?ő???񐔁i???[?N???b?h?̌ݏ??@?j
ll gcd(ll x, ll y)
{
	ll t;

	while(y!=0)
	{
		t = x%y;
		x = y;
		y = t;
	}
	return x;
}

ll s64comb(ll n, ll r)
{
	if(r>n)
	{
		return 0;
	}

	ll ret=1LL;
	if(r>n/2)
	{
		r = n-r;
	}


	vector <ll> div;
	for(ll i=0;i<r;i++)
	{
		div.push_back(i+1);
	}

	for(ll i=0;i<r;i++)
	{
		ll multi = (n-i);

		bool divided;
		do
		{
			divided = false;
			for (ll k=0;k<r;k++)
			{
				ll g = gcd(multi,div[k]);
				if(g>=2)
				{
					multi /= g;
					div[k] /= g;
					divided = true;
					break;
				}
			}
		} while(divided);

		ret *= multi;
	}
	return ret;
}

int main()
{
	// ???I ??o?O?ɏ????I
//	freopen("input.txt","r",stdin);

	int T;
	scanf("%d ",&T);

	const unsigned int BITS=3;
	const ll MOD = 1000000080798150871LL;

	init_combination(MOD);

	for(int i=0;i<T;i++)
	{
		int N,M,L,K;
		scanf("%d %d %d %d ",&N,&M,&L,&K);

		vector < bitset <BITS> > vb;
		for(int n=0;n<N;n++)
		{
			char str[10000];
			scanf("%s ",str);

			bitset <BITS> tmp;
			for(int m=0;m<M;m++)
			{
				if(str[m]=='1')
				{
					tmp.set(m,true);
				}
			}
			vb.push_back(tmp);
		}

		ll res = 0LL;
	

		for(int i=1;i<1<<BITS;i++)
		{
			bitset <BITS> tmp(i);
			if(tmp.count()==K)
			{
				ll num_bits = 0LL;
				for(int n=0;n<N;n++)
				{
					if( (tmp&vb[n]) == tmp) num_bits++;
				}

				res += get_combination(num_bits, L) % MOD;
				res %= MOD;
			}

//			cout << " i=" << i << " tmp=" << tmp << " num_bits[i]=" << num_bits[i] << endl;
		}

		cout << res << endl;
	}
}





#elif 0

int main()
{
	// ???I ??o?O?ɏ????I
//	freopen("input.txt","r",stdin);

	int T;
	cin >> T;

	for(int i=0;i<T;i++)
	{
		string s;
		cin >> s;


		const int hole[26]=
		{
			1, // A
			2, // B
			0, // C
			1, // D
			0, // E
			0, // F
			0, // G
			0, // H
			0, // I
			0, // J
			0, // K
			0, // L
			0, // M
			0, // N
			1, // O
			1, // P
			1, // Q
			1, // R
			0, // S
			0, // T
			0, // U
			0, // V
			0, // W
			0, // X
			0, // Y
			0, // Z
		};

		int ret=0;
		for(int i=0;i<SZ(s);i++)
		{	
			ret += hole[s[i]-'A'];
		}
		cout << ret << endl;
	}
}

#else

// ?g?ݍ??킹
// mod???f???łȂ??Ă??Ή??ł????[
const int COMB_MAX_N = 100100;
const int COMB_MAX_K =    110;
static ll combi[COMB_MAX_N][COMB_MAX_K];
void init_combination(ll MOD)
{
	memset(combi,0,sizeof(combi));
	combi[0][0]=1LL;
	for(int i=1;i<COMB_MAX_N;i++)
	{
		for(int k=1;k<COMB_MAX_K;k++)
		{
			combi[i][k]=(combi[i-1][k]+combi[i-1][k-1])%MOD;
		}
	}
}

ll get_combination(int n, int r)
{
	if(r>n)
	{
		return 0;
	}

	if(r>n/2)
	{
		r = n-r;
	}

	return combi[n+1][r+1];
}


// ?ő???񐔁i???[?N???b?h?̌ݏ??@?j
ll gcd(ll x, ll y)
{
	ll t;

	while(y!=0)
	{
		t = x%y;
		x = y;
		y = t;
	}
	return x;
}

ll comb(ll n, ll r)
{
	if(r>n)
	{
		return 0;
	}

	ll ret=1LL;
	if(r>n/2)
	{
		r = n-r;
	}


	vector <ll> div;
	for(ll i=0;i<r;i++)
	{
		div.push_back(i+1);
	}

	for(ll i=0;i<r;i++)
	{
		ll multi = (n-i);

		bool divided;
		do
		{
			divided = false;
			for (ll k=0;k<r;k++)
			{
				ll g = gcd(multi,div[k]);
				if(g>=2)
				{
					multi /= g;
					div[k] /= g;
					divided = true;
					break;
				}
			}
		} while(divided);

		ret *= multi;
	}
	return ret;
}

int main()
{
#if 0
	comb(43,21);

	init_combination(1000000000000000LL);
	for(ll n=0;n<10000;n++)
	{
		for(ll r=0;r<100;r++)
		{
			int correct = 1;
			if(get_combination(n,r)!=comb(n,r))
			{
				correct = 0;
			}

			cout << " n=" << n << " r=" << r << " correct=" << correct << endl;
		}
	}
#endif

	// ???I ??o?O?ɏ????I
//	freopen("input.txt","r",stdin);

	int T;
	cin >> T;

	for(int i=0;i<T;i++)
	{
		ll N,K,ret;
		cin >> N >> K;
		ret = comb(N,K);
		cout << ret << endl;
	}
}

#endif