/* Author:Akshay*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
using namespace std;
#define sqr(x) x*x
typedef pair<int,int> ii;
/* Function for string split . If string starts with de-lim then call split(s.substr(1,s.length()),DELIM);
   else call split(s,DELIM);*/
std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {
	std::stringstream ss(s);
	std::string item;
	while(std::getline(ss, item, delim)) {
		elems.push_back(item);
	}
	return elems;
}
std::vector<std::string> split(const std::string &s, char delim) {
	std::vector<std::string> elems;
	return split(s, delim, elems);
}
const long long MOD =1000000080798150871LL;
long long dp[1010][1010];
int tc,N,M,K,L;
char inp[1010][5];
void init(void)
{
	memset(dp,0,sizeof(dp));
	for(int i=0;i<1001;i++)
	{
		dp[i][0] = dp[i][i] = 1;
		for(int j=1;j<i;j++)
		{
			dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
			if(dp[i][j]>=MOD) dp[i][j]-=MOD;
		}
	}
}
void input(void)
{
	scanf("%d%d%d%d",&N,&M,&L,&K);
	for(int i=0;i<N;i++) scanf("%s",inp[i]);
}
void solve(void)
{
	if( L > N || K > M )
	{
		puts("0");
		return ;
	}
	long long ret=0;
	if( K ==1 )
	{
		for(int j=0;j<M;j++)
		{
			int c = 0; 
			for(int i=0;i<N;i++) if(inp[i][j]=='1') c++;
			ret+=dp[c][L];
			if(ret>=MOD) ret-=MOD;
		}
		printf("%lld\n",ret);
	}
	else if( K == 2 )
	{
		int c = 0;
		for(int i=0;i<N;i++) if(inp[i][0]=='1' && inp[i][1]=='1') c++;
		long long ret = dp[c][L];
		if(M==3)
		{
			c = 0;
			for(int i=0;i<N;i++) if(inp[i][0]=='1' && inp[i][2]=='1') c++;
			ret += dp[c][L]; 
			if(ret >=MOD) 
				ret-=MOD;
			c = 0;
			for(int i=0;i<N;i++) if(inp[i][1]=='1' && inp[i][2]=='1') c++;
			ret += dp[c][L]; 
			if(ret>=MOD) 
				ret-=MOD;
		}
		printf("%lld\n",ret);
	}
	else
	{
		int c=0;
		for(int i=0;i<N;i++) {if(inp[i][0] =='1' && inp[i][1]=='1' && inp[i][2] =='1' ) c++;}
		ret = dp[c][L];
		printf("%lld\n",ret);
	}
}
int main()
{
	init();
	scanf("%d",&tc);
	while(tc--)
	{
		input();
		solve();
	}
	return 0;
}



