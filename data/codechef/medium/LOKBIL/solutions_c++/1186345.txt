#include<iostream>
#include<algorithm>  
#include<vector>
#include<cstdlib>
#include<cstdio>
#include<string>
#include<queue>
using namespace std; 
#define tr(container, it)  for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define REP(i,b)  for(i=0;i<b;++i)
typedef vector<int> vi;
typedef vector<vi> vvi; 
vvi W(101);

int bfs(int start_vertex,int N)
{
		vi V(N+1,false);
		vi D(N+1,0);
		queue<int> Q;
		Q.push(start_vertex);
		V[start_vertex] = true;
		D[start_vertex] = 0; 
		int sum = 0;
		while(!Q.empty())
		{
			int i = Q.front();
			Q.pop();
			tr(W[i],it)
			{
				if(!V[*it])			
				{
					V[*it] = true;
					D[*it] = D[i] + 1;
					sum+=D[*it];
					 Q.push(*it);
				}	
			}
		}
		return sum;
}
int main()
{
	string s;
	int n,i,j,k,number_group,sum,result,temp,pos;
	scanf("%d",&n);
	
	while(n--)
	{	
		scanf("%d",&number_group);
		getline(cin,s);
		for(j=1;j<=number_group;++j)
		{
			getline(cin,s);
			k=0;
			sum=0;
			while(s[k] != '\0')
			{
			
				if(s[k]!=' ' && s[k]!='\0')
				{
					sum = sum*10 + (int)s[k]-48;
					
				}
				else{
					W[j].push_back(sum);
				//	printf("%d\n",sum);
			    	sum = 0;
			    }
			    k++;
			    if(s[k]=='\0')
			    {
			    	W[j].push_back(sum);
			    	//printf("%d\n",sum);
				}
			}
		}
		result = bfs(1,number_group);
		pos = 1; 
		for(j=2;j<=number_group;++j)
		{
			temp = bfs(j,number_group);
			if(temp < result)
			{
				result = temp;
				pos = j;
			}
			
		}	
		printf("%d %.6lf\n",pos,(double)result/number_group);
		for(j=1;j<=number_group;++j)
			W[j].clear();
	}
	return 0;
}