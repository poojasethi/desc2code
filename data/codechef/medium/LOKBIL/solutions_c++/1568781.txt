/* 
 * File:   main.cpp
 * Author: anurag
 *
 */

#include <stdio.h>
#include<list>
#include<queue>
#include <stdlib.h>
#define SZ 103
#define inf 1000000007
using namespace std;
list<int> graph[SZ];
bool visited[SZ];
int n;
/*
 * 
 */

void getgraph()
{
    int i,val=0;
    char ch;
    scanf("%d",&n);
    getchar();
    for(i=1;i<=n;i++)
    {
        graph[i].clear();
        
        while(true)
        {
            ch=getchar();
            if(ch=='\n')
            {
                graph[i].push_back(val);
                
                val=0;
                break;
            }
            if(ch==' ')
            {
                graph[i].push_back(val);
               
                   val=0;
            }
            else
            {
              val=val*10+ch-'0';
              
            }
        }
    }
    
}
void print()
{
    printf("\nPrinting");
    int i;
    list<int>::iterator it;
    for(i=1;i<=n;i++)
    {
        printf("\n");
        for(it=graph[i].begin();it!=graph[i].end();it++)
        {
            printf("%d ",*it);
        }
    }
}
int calc_value(int s)
{
    //printf("\nSource:%d",s);
    int p;
    list<int>Q;
    list<int>tmp;
    Q.push_back(s);
    tmp.push_back(s);
    visited[s]=true;//s is processed
    int val=0,ctr=0;
    list<int>::iterator it;
    while(!Q.empty())
    {
        
        while(!tmp.empty())
        {
            p=Q.front();
            Q.pop_front();
            tmp.pop_front();
            
            val+=ctr;
            for(it=graph[p].begin();it!=graph[p].end();it++)
            {
                //printf("\nPushed: %d",*it);
               if(!visited[*it]) 
               {
                   Q.push_back(*it);
                   visited[*it]=true;//*it is now in Q
               }
            }
        }
        for(it=Q.begin();it!=Q.end();it++)
            tmp.push_back(*it);
        ctr++;
    }
    return val;
}

void getMin()
{
    int min=inf,minind=-1,c;
    int i,j;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
            visited[j]=false;
        c=calc_value(i);
        if(c<min)
        {
            min=c;
            minind=i;
        }
    }
    double val;
    val=(double)min/n;
    printf("\n%d %.6f",minind,val);
}

int main() 
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
       
        getgraph();
        //print();
        getMin();
    }
    return 0;
}

/*
2
6
3
5
1 4
3 5 6
2 4 6
4 5
4 
2 3 4  
1 3 
1 2 
1

o/p: 
4.1666667 
0.7500000 
 
 
 
 
 
 
 
 
 
 
 
 
 
 */