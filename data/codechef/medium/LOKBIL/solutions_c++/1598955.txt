#include <algorithm>
#include <cstdio>
#include <climits>

#define N 101
#define BUF 1000

int toint(char *s, int &i)
{
    int ret = 0;
    while (s[i] == ' ')
        i++;
    if (s[i] == '\n')
        return 0;
    for (; s[i] <= '9' && s[i] >= '0'; i++)
        ret = ret*10 + (s[i] - '0');
    return ret;
}

int main()
{
    //freopen("in", "r", stdin);
    int t, n, i, j, x, p, a[N][N], minsum, cursum;
    char s[BUF];
    double res;
    fgets(s, BUF, stdin);
    p = 0;
    t = toint(s, p);

    while (t--)
    {
        fgets(s, BUF, stdin);
        p = 0;
        n = toint(s, p);
        for (i = 1; i <= n; i++)
        {
            for (j = 1; j <= n; j++)
                a[i][j] = INT_MAX;
            a[i][i] = 0;
            fgets(s, BUF, stdin);
            p = 0;
            while (x = toint(s, p))
            {
                a[i][x] = 1;
            }
        }
        for (int k = 1; k <= n; k++)
            for (i = 1; i <= n; i++)
                for (j = 1; j <= n; j++)
                {
                    if (a[i][k] != INT_MAX && a[k][j] != INT_MAX)
                        a[i][j] = std::min(a[i][j], a[i][k] + a[k][j]);
                }
        minsum = INT_MAX;
        x = 0;
        for (i = 1; i <= n; i++)
        {
            for (j = 1, cursum = 0; j <= n; j++)
                cursum += a[i][j];
            if (cursum < minsum)
            {
                minsum = cursum;
                x = i;
            }
        }
        printf("%d %f\n", x, (double)minsum/n);
    }
    return 0;
}
