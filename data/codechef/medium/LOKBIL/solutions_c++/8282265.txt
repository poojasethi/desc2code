#include <vector>
#include <algorithm>
#include <cstdio>
#include <string.h>
#include <queue>
#include <iostream>
 #include <sstream>
#define ll long long
using namespace std;
#define M 500
char buff[M];
vector <int> adjlist[M];
char visited[M];
int users;
int val[M];
int distant[M];
int bfs(int u){
     int sumd=0;
    memset(visited,0, sizeof visited);// marked all visited as zero
    memset(distant,-1,sizeof distant);
    distant[u]=0;
    visited[u]=1;
    queue<int> bfsq;
    bfsq.push(u);
    while(!bfsq.empty()){
        int v=bfsq.front();
        bfsq.pop();
        // looking at neighbours of v
        for(int i=0;i<adjlist[v].size();i++)
        {
            int k=adjlist[v][i];
            if(!visited[k]){
                visited[k]=1;
                distant[k]=distant[v]+1;
                sumd+=distant[k];
                bfsq.push(k);
            }
        }

    }
    return sumd;
}
int main()
{
int t;
cin.getline(buff,M);
sscanf(buff,"%d",&t);
while(t--){
    for(int i=0;i<M;i++)
      adjlist[i].clear();

    int users;
    cin.getline(buff,M);
    sscanf(buff,"%d",&users);
    for(int i=1;i<=users;i++)
{
    cin.getline(buff,M);
    istringstream in(buff);
    int v;
    while(in>>v){
        adjlist[i].push_back(v);
         adjlist[v].push_back(i);
    }
}

    for(int i=1;i<=users;i++)
    {
        int j=bfs(i);
          val[i]=j;
    }
    int minv=val[1];
    int loc=1;
    for(int i=1;i<=users;i++){
        if(minv>val[i]){
            minv=val[i];
            loc=i;
    }
    }
     double res=(double)minv/users;
printf("%d %.6lf\n",loc,res);

    }
return 0;
    }
