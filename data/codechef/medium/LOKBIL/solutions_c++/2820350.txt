/*
author :  R Anirudh 
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;
#define SIZE(A) ((int)(A.size()))
#define MSET(A,x) memset(A,x,sizeof(A));
#define FILL(A,x) fill(A.begin(),A.end(),x)
#define REP(i,N) for(int i=0;i<(int)(N);i++)
#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)
#define REV(i,a,b) for(int i=(int)(a);i>=(int)(b);i--)
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define ALL(x) x.begin(),x.end()
#define INF (INT_MAX/2)
#define LLINF (LONG_LONG_MAX/2LL)
#define EPS 1e-12
#define GI ({int t;scanf("%d",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GF ({double t;scanf("%lf",&t);t;})
#define bitCount(n) __builtin_popcount(n)
#define MOD 1000000007
#define MAX 1000005
#define FIX(a) (((a)%MOD+MOD)%MOD)
typedef long long LL;
typedef unsigned long long ULL;
#define pb push_back
typedef pair< LL, LL > pLL; // pair of long long 
typedef pair< LL, pLL > edge;
#define N 101
#define BUF 1000


int toint(char *s, int &i)
{
int ret = 0;
while (s[i] == ' ')
i++;
if (s[i] == '\n')
return 0;
for (; s[i] <= '9' && s[i] >= '0'; i++)
ret = ret*10 + (s[i] - '0');
return ret;
}

int main()
{
int t, n, i, j, x, p, dp[N][N], minsum, cursum;
char s[BUF];
double res;
fgets(s, BUF, stdin);
p = 0;
t = toint(s, p);
 
while (t--)
{
fgets(s, BUF, stdin);
p = 0;
n = toint(s, p);
for (i = 1; i <= n; i++)
{
for (j = 1; j <= n; j++)
dp[i][j] = INT_MAX;
dp[i][i] = 0;
fgets(s, BUF, stdin);
p = 0;
while (x = toint(s, p))
{
dp[i][x] = 1;
}
}
for (int k = 1; k <= n; k++)
for (i = 1; i <= n; i++)
for (j = 1; j <= n; j++)
{
if (dp[i][k] != INT_MAX && dp[k][j] != INT_MAX)
dp[i][j] = std::min(dp[i][j], dp[i][k] + dp[k][j]);
}
minsum = INT_MAX;
x = 0;
for (i = 1; i <= n; i++)
{
for (j = 1, cursum = 0; j <= n; j++)
cursum += dp[i][j];
if (cursum < minsum)
{
minsum = cursum;
x = i;
}
}
printf("%d %f\n", x, (double)minsum/n);
}
return 0;
}

