/*
 	Team Proof
	IIT Delhi
 
	C++ Template
 */


#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
using namespace std;

#define s(T) scanf("%d", &T)
#define sl(T) scanf("%lld", &T)
#define fill(a, val) memset(a, val, sizeof(a))
#define mp make_pair

int totalCases, testNum;

int F[105];
int N;
int adjl[105][105];
int deg[105];

int visit[105];
int dist[105];

void preprocess()
{
	
}

bool input()
{
	fill(deg, 0);
	fill(F, -1);
	
	cin >> N;
	
	char inp[505];
	cin.getline(inp, 10);
	
	for(int i = 1; i <= N; i++)
	{
		cin.getline(inp, 500);
		
		int num, j, l;
		for(num = 0, j = 0, l = strlen(inp); j < l; j++)
		{
			if(inp[j] == ' ')
			{
				adjl[i][deg[i]++] = num;
				num = 0;
			}
			else 
				num = 10 * num + inp[j] - '0';
		}
		
		adjl[i][deg[i]++] = num;
	}
	
	return true;
}

void bfs(int s)
{
	int Q[105];
	int qf, qb;
	
	int nxt, cur;
	
	qf = qb = 0;
	dist[s] = 0;
	Q[qb++] = s;
	
	
	while(qf < qb)
	{
		cur = Q[qf++];
		visit[cur] = 2;
		for(int i = 0; i < deg[cur]; i++)
		{	
			nxt = adjl[cur][i];
			if(visit[nxt] == 0)
			{
				dist[nxt] = 1 + dist[cur];
				Q[qb++] = nxt;
				visit[nxt] = 1;
			}
		}
	}
	
}

void solve()
{
	int ans = 100*100*2;
	int mloc = -1;
	
	for(int i = 1; i <= N; i++)
	{
		fill(visit, 0);
		bfs(i);
		int sum = 0;
		for(int j = 1; j <= N; j++)
			sum += dist[j];

		if(ans > sum)
		{
			mloc = i;
			ans = sum;
		}
	}
	
	printf("%d %.6lf\n", mloc, ans*1.0/N);
}

int main()
{
	preprocess();
	s(totalCases);
	for(testNum = 1; testNum <= totalCases; testNum++)
	{
		if( !input())
			break;
		solve();
	}
}
