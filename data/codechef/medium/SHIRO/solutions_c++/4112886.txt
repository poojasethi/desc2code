#include <bits/stdc++.h>

typedef long long lld;
typedef unsigned long long llu;
#define rep(i,x,y) for(i=x;i<y;i++)
#define rrep(i,x,y) for(i=x;i>=y;i--)
#define trv(y,x) for(typeof(x.begin())y=x.begin();y!=x.end();y++)
using namespace std;

double *A,*P,*Sum;
vector<vector<double> > Memo;
int n;

/* Memo[i][j] stores the information for the stage:
 Index: i and onwards
 Current number of flags = j (till i-1)*/

double DP(int idx,int flags)
{
    if(idx==n)
    {
        if((2*flags)>=Sum[n-1])
            return 1;
        return 0;
    }
    if(Memo[idx][flags]!=-1)
        return Memo[idx][flags];
    return Memo[idx][flags] = ((P[idx] * DP (idx+1,flags + A[idx]))/100) + (((100-P[idx]) * DP (idx+1,flags)))/100;
}


int main()
{
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	//freopen("input.txt","r",stdin);
	//freopen("input2.txt","r",stdin);
	int t,i,j;
	cin>>t;
	while(t--)
    {
        cin>>n;
        A=new double[n];
        P=new double[n];
        Sum=new double[n];
        Memo=vector<vector<double> >(n,vector<double>(10001,-1));
        cin>>A[0];
        Sum[0]=A[0];
        rep(i,1,n)
            {
                cin>>A[i];
                Sum[i]=Sum[i-1]+A[i];
            }
        rep(i,0,n)
            cin>>P[i];
        cout.setf(ios::fixed);
        cout<<setprecision(7)<<DP(0,0)<<"\n";
        delete[] A;
        delete[] P;
        Memo.clear();
    }

    return 0;
}
