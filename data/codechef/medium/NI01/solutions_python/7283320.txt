// Headers
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cassert>
#include<cstdlib>
#include<vector>
#include<map>
#include<fstream>
#include<list>
#include<stack>
#include<queue>
#include<algorithm>
#include<bitset>
#include<set>
using namespace std;
// Global declarations
typedef long long int ll;
typedef vector<int> vi;
typedef vector<char> vc;
typedef pair<int, int> pi;
const int mod = 1e9 + 7;
const int INF = 1 << 25;
// Macros
#define mp make_pair
#define el putchar('\n')
#define sp putchar(' ')
#define Fill(a,val) memset(a,val,sizeof a)
#define ff first
#define ss second
#define pb push_back
#define ppb pop_back
#define gcd __gcd
#define all(a) a.begin(),a.end()

int const NN = 1e4 + 4;
int PassengerTime[NN], CarDepartureTime[NN], CarTime[NN];

int main(){
	int t;
	cin >> t;
	while (t--){
		int n, m, q, p, r, k;
		cin >> n >> m >> q >> p >> r >> k;		
		int extra = min(m, k / r);
		int PassengerWaiting = q + extra;
		int PassengerWandering = m - extra;
		if (n == 0){
			cout << 0 << ' ' << 0 << ' ' << PassengerWandering << ' ' << PassengerWaiting; el;
			continue;
		}
		for (int i = 1; i <= PassengerWaiting; ++i){
			if (i <= q){
				PassengerTime[i] = 0;
			}
			else {
				PassengerTime[i] = (i-q)*r;
			}
		}
		for (int i = 1; i <= n; ++i){
			CarDepartureTime[i] = -1;
		}
		int HighestPassengerNumber = PassengerWaiting;
		for (int i = 1; i <= PassengerWaiting; ++i){
			int CarAssigned = i%n;
			if (CarAssigned == 0)
				CarAssigned += n;
			int AssignedTime;
			if (CarDepartureTime[CarAssigned] == -1) {
				AssignedTime = PassengerTime[i];
			}
			else {
				AssignedTime = max(CarDepartureTime[CarAssigned] + p, PassengerTime[i]);
			}
			if (AssignedTime > k){
				HighestPassengerNumber = i-1;
				break;
			}
			CarDepartureTime[CarAssigned] = AssignedTime;
			CarTime[i] = CarDepartureTime[CarAssigned];
		}
		int PassengerLeft = 0;
		for (int i = 1; i <= HighestPassengerNumber; ++i){
			int UnloadTime = CarTime[i] + p;
			if (UnloadTime > k)
				break;
			++PassengerLeft;
		}
		PassengerWaiting -= HighestPassengerNumber;
		int CarWaiting = 0;
		for (int i = 1; i <= n; ++i){
			if (CarDepartureTime[i] == -1)
				++CarWaiting;
			else{
				int ArrivalTime = CarDepartureTime[i] + p;
				if (ArrivalTime <= k)
					++CarWaiting;
			}
		}
		cout << CarWaiting << ' ' << PassengerLeft << ' ' << PassengerWandering << ' ' << PassengerWaiting; el;
	}
	return 0;
}