#include<cstdio>
#include<iostream>
#include<cstring>
#include<string>
#include<malloc.h>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<queue>
#include<map>
#include<set>
#include<vector>
#include<deque>
#include<list>
#include<utility>
#include<stack>
#include<climits>
#include<cctype>
#define get getchar//_unlocked
#include<cassert>
#define s(x) scanf("%d",&x)
#define p(x) printf("%d\n",x)
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld\n",x)
#define pb push_back
#define ll long long
#define max(a,b) a>b?a:b
#define min(a,b) a<b?a:b
#define INF 747474747
#define MOD 1000000007
#define clean(a) memset(a,0,sizeof(a));
#define fill(a,val) memset(a,val,sizeof(a);
using namespace std;
inline ll inp()
{
    ll n=0,s=1;
    char p=get();
    if(p=='-')
    s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-')
    p=get();
    if(p=='-')
    s=-1,p=get();
    while(p>='0'&&p<='9')
    {
    n = (n<< 3) + (n<< 1) + (p - '0');
    p=get();
    };
    return n*s;
}
long long power(ll a,ll b)
{
    long long r=1,x=a;
    /*if(a==0)
    return 0;*/
    while(b)
    {
        if(b&1)r=(r*x)%MOD;
        x=(x*x)%MOD;
        b>>=1;
    }
    return r%MOD;
}

/*ll board[11][11],a[11][11];
ll spot[11];
void solve(ll row,ll tmp,ll *ans)
{
    if(row==10){
            if(tmp>*ans)
              *ans=tmp;
        return;}
    for(ll i=0;i<11;i++)
    {
        if(a[row][i]==0)
            continue;
        if(spot[i])
            continue;
        spot[i]=1;
        tmp+=a[row][i];
        solve(row+1,tmp,ans);
        spot[i]=0;
        tmp-=a[row][i];
    }
    return;
}*/
int main()
{
    ll i,j,k,t,r,w,x,y,z,ans=0,n=0,m,sum=0,test,l,p,q,max=-1,c=0;
    ll ncars, npasszero, nready,nwander;
    ll cars[100000];
    t=inp();
    while(t--){
    scanf("%lld %lld %lld %lld %lld %lld",&ncars,&nwander,&nready,&p,&r,&k);
    ll ncount=0;
    memset(cars,0,ncars*sizeof(ll));
    for(i=0;i<=k;i++)
    {
        if(i>=r&&i%r==0&&nwander>0)
        {
            nready++;
            nwander--;
        }
        if(i>=p)
        {
            ncars+=cars[i-p];
            ncount+=cars[i-p];

        }
        if(ncars>nready)
        {
            cars[i]=nready;
            ncars-=nready;
            nready=0;
        }
        else
        {
            cars[i]=ncars;
            nready-=ncars;
            ncars=0;
        }
         //printf("%lld %lld %lld %lld %lld\n",i,ncars,ncount,nwander,nready);

    }
    printf("%lld %lld %lld %lld\n",ncars,ncount,nwander,nready);

    }
return 0;
}
