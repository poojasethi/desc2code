//
//  main.cpp
//
//  Created by Prateek Sachdev 
//  Copyright (c) 2013 Prateek Sachdev. All rights reserved.
//
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iterator>
#include <utility>

using namespace std;

typedef vector<int > vd;
typedef vector<long long int > vl;

#define sd(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sf(n) scanf("%f",&n)
#define ss(n) scanf("%s",n)
#define pd(n) printf("%d\n",n)
#define pb push_back

#define LL long long 

#define ALL(c) c.begin(), c.end()
#define UB(s, e, x) upper_bound(s, e, x)
#define LB(s, e, x) lower_bound(s, e, x)
#define REV(s, e) reverse(s, e);
#define SZ(c) c.size()
#define SET(p) memset(p, -1, sizeof(p))
#define CLR(p) memset(p, 0, sizeof(p))
#define MEM(p, v) memset(p, v, sizeof(p))

#define SIEVE(a) ({int b=ceil(sqrt(a));vd d(a,0);vd e;int f=2;e.pb(2);e.pb(3);for(int x=1;x<b+1;x++){for(int y=1;y<b+1;y++){int n=(4*x*x)+(y*y);if(n<=a&&(n%12==1||n%12==5)){d[n]^=1;}n=(3*x*x)+(y*y);if(n<=a&&n%12==7){d[n]^=1;}n=(3*x*x)-(y*y);if(x>y&&n<=a&&n%12==11){d[n]^=1;}}}for(int r=5;r<b+1;r++){if(d[r]){for(int i=r*r;i<a;i+=(r*r)){d[i]=0;}}}for(int c=5;c<a;c++){if(d[c]){e.pb(c);}}e;})
template<class T> inline vector<pair<T,int> > FACTORISE(T n){vector<pair<T,int> >R;for (T i=2;n>1;){if (n%i==0){int C=0;for (;n%i==0;C++,n/=i);R.push_back(make_pair(i,C));}i++;if (i>n/i) i=n;}if (n>1) R.push_back(make_pair(n,1));return R;}
template<class T> inline T TOTIENT(T n) {vector<pair<T,int> > R=FACTORISE(n);T r=n;for (int i=0;i<R.size();i++)r=r/R[i].first*(R[i].first-1);return r;}

//initialize parent[i]=i for dsu
//int find(int x) {return parent[x]==x?parent[x]:parent[x]=find(parent[x]);}
//void merge(int x, int y) {parent[find(x)]=find(y);}

// vd v=SIEVE(2100);
// int n=TOTIENT(num);
struct state
{
	int row, col, val;
	state(int _r, int _c, int _v) : 
		row(_r), col(_c), val(_v) {}
	bool operator < (const state &s) const {
		return val>s.val;
	}
};
int c[55];

int added[200005];
int main()
{
	int tt;
	sd(tt);

	while(tt--)
	{
	int n,m,q,p,r,k;
	CLR(c);

	CLR(added);
	
	int cpm;
	
	int completed;
	int wandering;
	int qwaiting=0;
	sd(n);sd(m);sd(q);sd(p);sd(r);sd(k);
	int cwaiting=n;
	cpm=m;
	int cq=q;
	int t=0;


	while(1)
	{
		if( t && t%r==0 )
		{
			if(m>0)
			{
				q++;
				m--;
			}
		}
		

		cwaiting+=added[t];
		if(cwaiting>0)
		{
			if(q>=cwaiting)
			{
				
				added[t+p]=cwaiting;
				q-=cwaiting;
				cwaiting=0;
			}
			else
			{
				added[t+p]=q;
				
				cwaiting-=q;
				q=0;
			}

		}
		
		t+=1;
		if(t==k+1)
			break;
		

	}
	
	qwaiting=q;
	completed=cpm-m-q-(n-cwaiting) + cq;
	printf("%d %d %d %d\n",cwaiting,completed,m,qwaiting );


}


	return 0;
}



