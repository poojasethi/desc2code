#include <iostream>
#include <queue> 

using namespace std;

class event {
	public:
	int time, eventID;
	event(int t, int eId) {
		time = t;
		eventID = eId;
	}
	bool operator> (const event &ev2) const {
		return (time < ev2.time);
	}
	bool operator< (const event &ev2) const {
		return (time > ev2.time);
	}
};

int main() {
	int numberCases, nCars, nWanderers, nRide, tRide, rideFlow, simTime;
	cin >> numberCases;
	for (int i = 0; i < numberCases; i++) {
		cin >> nCars >> nWanderers >> nRide >> tRide >> rideFlow >> simTime;
		int curTime = 0;
		priority_queue<event> eventQueue;
		for (int j = 0; j < nCars; j++) {
			eventQueue.push(event(0, 0));
		}
		int noRidden = -nCars;
		nCars = 0;
		if (nWanderers > 0) {
			eventQueue.push(event(rideFlow, 1));
			nWanderers--;
		}
		while (!eventQueue.empty()) {
			event curEvent = eventQueue.top();
			eventQueue.pop();
			curTime = curEvent.time;
			if (curTime > simTime) {
				if (curEvent.eventID == 1) {
					nWanderers++;
				}
				break;
			}
			if (curEvent.eventID == 0) {
				nCars++;
				noRidden++;
				if (nRide > 0) {
					nCars--;
					nRide--;
					eventQueue.push(event(curTime + tRide, 0));
				}
			}
			if (curEvent.eventID == 1) {
				nRide++;
				if (nWanderers > 0) {
					nWanderers--;
					eventQueue.push(event(curTime + rideFlow, 1));
				}
				if (nRide > 0 && nCars > 0) {
					nRide--;
					nCars--;
					eventQueue.push(event(curTime + tRide, 0));
				}
			}
		}
		while (!eventQueue.empty()) {
			event curEvent = eventQueue.top();
			eventQueue.pop();
			if (curEvent.eventID == 1) {
				nWanderers++;
			}
		}
		cout << nCars << " " << noRidden << " " << nWanderers << " " << nRide << endl;
	}
	return 0;
}
