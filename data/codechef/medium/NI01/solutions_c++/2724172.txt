#include<iostream>
#include<set>
#include<algorithm>
#include<cmath>
#include<cstdio>
#include<iterator>
using namespace std;
int main()
{ int t,cars,wandering,ready,p,r,k;//pass-passengers in museum
 //ready_pass-passengers in ready queue
 //p is busy time of car
 //r is time after which a person enters the ready q
 
 scanf("%d",&t);
 
 while(t--){
 
 scanf("%d%d%d%d%d%d",&cars,&wandering,&ready,&p,&r,&k);
 multiset< pair<int,int> >heap;//the first int is the timestamp.The second int is 0(denotes a car arriving) or 1(denotes a person arriving in the ready queue).
 multiset< pair<int,int> >::iterator it;
 int completed=0;
 //So the event of the car returning back will be done before the person entering the ready queue when the first of both pairs is same.
 int m=min(cars,ready);//m the number of  cars which will take the passengers
 for(int i=1;i<=m;i++)//inserting the events related to the cars going away for time p
 	heap.insert(make_pair(p,0));
 cars-=m;//No of cars left which are ready to take people	
 ready-=m;
 for(int i=1;i<=wandering;i++)//inserting events related to the arrival of person from wandering to ready
 	heap.insert(make_pair(i*r,1));
 while(!heap.empty())
 {it=heap.begin();//event with minimum timestamp
  pair<int,int>e=*it;
  if(e.first>k)
  	break;
  heap.erase(it);	
  if(e.second==0)//a car has returned back after completing trip
  	{cars++;
  	 completed++;}
  else
  	ready++,wandering--;
  it=heap.begin();	 	
  while((it=heap.begin())!=heap.end()&&it->first==e.first)
  {if(it->second==0)//if u find another car returning back at the same time
  	{cars++;
  	 completed++;
  	}
   else//when the event is person entering to ready queue
   	{ready++;
   	 wandering--;
   	}
   heap.erase(it);	
   	
  }
  m=min(cars,ready);
  for(int i=1;i<=m;i++)
  	heap.insert(make_pair(e.first+p,0));
  cars-=m;
  ready-=m;}
 printf("%d %d %d %d\n",cars,completed,wandering,ready); 	
  }
return 0;
}