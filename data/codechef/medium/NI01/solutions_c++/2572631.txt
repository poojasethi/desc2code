#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<cstdlib>
#include<sstream>
#include<string.h>
#include<set>
#include<map>
#include<ctime>
#include<queue>
#include<vector>
#include<stack>
#include<list>
#include<math.h>
using namespace std;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int,int> pii;
typedef long long int lli;
typedef pair<int,int> ii; 
#define MAXN 1000005
#define INF 2147483647
#define gc getchar_unlocked
#define pc putchar_unlocked
#define sz(a) int((a).size()) 
#define pb push_back 
#define FOR(x,a,b) for(int (x) = (a);(x)<=(b);(x)++)
#define rep(x,n)   for(int (x)=0;(x)<(n);(x)++)
#define tr(c,it) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define all(c) c.begin(),c.end()
using namespace std;

queue<int> C;
int P;

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int i,n,m,q,p,r,k;
        scanf("%d%d%d%d%d%d",&n,&m,&q,&p,&r,&k);
        int passengersReady=q;
        int carsReady=n;
        int passengersWandering=m;
        int passengerCompleteRide=0;
        queue<int> carRiding;

        for(i=0;i<k;i++)
        {
            if(carsReady>=passengersReady)
            {
                carsReady=carsReady-passengersReady;
                rep(j,passengersReady)
                carRiding.push(i);
                passengersReady=0;
            }
            else
            {
                passengersReady=passengersReady-carsReady;
                rep(j,carsReady)
                carRiding.push(i);
                carsReady=0;
            }

            
            while(carRiding.front()+p-1==i && !carRiding.empty())
            {
                carRiding.pop();
                carsReady++;
                passengerCompleteRide++;
            }
            if((i+1)%r==0)
            {
                if(passengersWandering>0){
                passengersWandering--;
                passengersReady++;
                }
            }
            //printf("%d %d %d %d\n",i,carsReady,passengersWandering,passengersReady);
        }
        if(passengersReady>0&&carsReady>0)
        {
            if(passengersReady>carsReady)
                {
                    passengersReady=passengersReady-carsReady;
                    carsReady=0;
                }
            else
            {
                carsReady=carsReady-passengersReady;
                passengersReady=0;
            }

        }
    printf("%d %d %d %d\n",carsReady,passengerCompleteRide,passengersWandering,passengersReady);
    }
    return 0;
}
