

def AND(a,b):
	return a & b

def OR(a,b):
	return a | b

def XOR(a,b):
	return a ^ b

def F(N, K, Answer, Operator, A):
	for i in xrange(K):
		for j in xrange(N):
			Answer = Operator(Answer, A[j])
	return Answer

"""
def smart_F(N, K, Answer, Operator, A):
	if K==0:
		return Answer
	M = Answer
	for j in xrange(N):
		M = Operator(M, A[j])
	for i in xrange(K):
		Answer = Operator(Answer, M)
	return Answer
"""

def FFast(N, K, Ans, op, A):
	if op == XOR:
		K = K%2
	else:
		K = min(K,1)
	return F(N, K, Ans, op, A)


op_to_func = {}
op_to_func["AND"] = AND
op_to_func["OR"] = OR
op_to_func["XOR"] = XOR


T = int(raw_input())

while T>0:
	T-=1
	N, K, Answer = map(int, raw_input().split())
	A = map(int, raw_input().split())
	Operator = raw_input()
	if Operator[-1] == "\r":
		Operator = Operator[:-1]
	Operator = op_to_func[Operator]
	Answer = FFast(N, K, Answer, Operator, A)
	print(Answer)
