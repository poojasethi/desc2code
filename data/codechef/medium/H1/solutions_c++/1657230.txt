#include <iostream>
#include <cstdio>
#include <queue>
#include <map>

using namespace std;

const int dx[] = {1, 0};
const int dy[] = {0, 1};
const int primetable[] = {2, 3, 5, 7, 11, 13, 17};

struct state
{
    int data[3][3];
};

queue<state> Q;
map<int, int> M;

inline bool in(int x, int y) {return (x >= 0 && x <= 2 && y >= 0 && y <= 2);}

inline int toint(state st)
{
    int res = 0;
    for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++) res = res * 10 + st.data[i][j];

    return res;
}

inline bool isprime(int n)
{
    for (int i = 0; i < 9; i++) if (primetable[i] == n) return true;
    return false;
}

void BFS(state s)
{
    M[toint(s)] = 1;
    Q.push(s);

    while (!Q.empty())
    {
        state curr = Q.front();
        int currint = toint(curr);
        Q.pop();

        for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
        for (int k = 0; k < 2; k++)
        {
            int x = i + dx[k], y = j + dy[k];

            if (in(x, y) && isprime(curr.data[i][j] + curr.data[x][y]))
            {
                state tmp = curr;
                swap(tmp.data[i][j], tmp.data[x][y]);
                int hashval = toint(tmp);

                if (M[hashval]) continue;

                M[hashval] = M[currint] + 1;
                Q.push(tmp);
            }
        }
    }
}

int main()
{
    cin.sync_with_stdio(0);

    int cnt = 1;
    state s;
    for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++) s.data[i][j] = cnt++;
    BFS(s);

    int t;
    cin >> t;

    while (t--)
    {
        for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++) cin >> s.data[i][j];

        printf("%d\n", M[toint(s)] - 1);
    }

    return 0;
}
