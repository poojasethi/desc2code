#
#include <map>
#
#include <cmath>
#
#include <vector>
#
#include <cstring>
#
#include <cstdlib>
#
#include <sstream>
#
#include <iostream>
#
#include <algorithm>
#
typedef long long LL;
#
typedef long double LD;
#
using namespace std;
#
#define REP(x,n) for(int x=0,_n=(n);x<_n;x++)
#
#define FOR(x,a,n) for(int x=(a),_n=(n);x<=_n;x++)
#
#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)
#
#define PRINT(x) cout<<#x<<"= "<<x<<"\n"
#
template<class T> string TOSTR(T x){ string str; stringstream ss; ss<<(x); ss>>str; return str; }
#
/*[defactodeity]*/
#
int A[10];
#
int D[362880];
#
int sizeQ, Q[362880];
#
int g[]={ 0,1, 1,2, 3,4, 4,5, 6,7, 7,8, 0,3, 3,6, 1,4, 4,7, 2,5, 5,8 };
#
int prime[]={ 0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1 };
#
int getID(int A[]){
#
int id=0;
#
REP(i,9){
#
int c=0;
#
FOR(j,i+1,8) if(A[i]>A[j]) c++;
#
id = id*(9-i)+c;
#
}
#
return id;
#
}
#
void addNode(int A[],int d){
#
int id = getID(A);
#
if(D[id]>=0) return;
#
D[id]=d;
#
int state=0;
#
REP(i,9) state=state*10+A[i];
#
Q[sizeQ++]=state;
#
}
#
int main(){
#
memset(D,-1,sizeof D);
#
sizeQ=0;
#
REP(i,9) A[i]=i+1;
#
addNode(A,0);
#
for(int c=0;c<sizeQ;c++){
#
int state=Q[c];
#
for(int i=8;i>=0;i--) A[i]=state%10, state/=10;
#
int id = getID(A);
#
for(int b=0;b<24;b+=2){
#
int i=g[b];
#
int j=g[b+1];
#
if(prime[ A[i]+A[j] ]){
#
swap(A[i],A[j]);
#
addNode(A,D[id]+1);
#
swap(A[i],A[j]);
#
}
#
}
#
}
#
//cout<<sizeQ<<"\n";
#
int tc; scanf("%d",&tc);
#
while(tc--){
#
REP(i,9) scanf("%d",&A[i]);
#
int id = getID(A);
#
printf("%d\n",D[id]);
#
}
#
}
