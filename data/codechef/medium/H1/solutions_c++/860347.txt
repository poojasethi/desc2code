#include<stdio.h>
#include<queue>
#include<string.h>
#include<map>
//#include<conio.h>
using namespace std;
int pr[]={0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0};
int a[50];
int b[50];
 int pos[10];
void rev(int *a)
{
     int i;
     char ch;
     for(i=0;i<4;i++)
     {
                       ch=a[i];
                       a[i]=a[8-i];
                       a[8-i]=ch;
                       }
                       }
void to(int m)
{
     
     int i=0;
     while(1)
     {
             a[i]=m%10;
             
             m/=10;
             i++;
             if(m==0)break;
             
     }
     rev(a);
     for(i=0;i<9;i++)
     pos[a[i]]=i;
   
}
int ex(int *b,int i,int j)
{
  
   
    int f;
    f=b[i];
    b[i]=b[j];
    b[j]=f;
    int sum=0;
    for(i=0;i<9;i++)
    sum=sum*10+b[i];
    return sum;
}
 int is(int i,int j)
 {
     return pr[a[i]+a[j]];
     }    
int main()
{
  queue<int> q;
  int st=123456789;
 // printf("%d",st);
  q.push(st);
  int i,cur;
  int son;
 int j;
  map<int,int> gr;
  map<int,int>::iterator I;
  gr[st]=0;
  int ma=0;
  while(!q.empty())
  {
                   cur=q.front();
                   q.pop();
                   int depth=gr[cur];
                   if(depth>ma)ma=depth;
                  // printf("current is \n",cur);
                  // printf("at %d depth \n",depth+1);
                 to(cur);
                 /*
                 printf("\n");
                 for(i=0;i<9;i++)
                 printf("%d %d\n",a[i],pos[a[i]]);  
                 */
                 
                 
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=0;
                  j=1;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=0;
                  j=3;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=2;
                  j=1;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=4;
                  j=1;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=2;
                  j=5;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=3;
                  j=4;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=3;
                  j=6;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=4;
                  j=5;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=4;
                  j=7;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=5;
                  j=8;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=6;
                  j=7;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                   
                  for(i=0;i<9;i++)
                  b[i]=a[i]; 
                  i=7;
                  j=8;
                  if(is(i,j)){
                   son=ex(b,i,j);
                 // printf("%d\n",son);
                  if(gr.find(son)==gr.end())
                  {
                  q.push(son);gr[son]=depth+1;}
                  }
                
                
                
                   
                   
                   
                   }
 // printf("done\n");
  //printf("maximam depth %d\n",ma);
int t;
scanf("%d",&t);
while(t--)
{
       int   sum=0;
       int depth;
          for(i=0;i<9;i++)
          {scanf("%d",&depth);
          sum=sum*10+depth;
                          }
                          I=gr.find(sum);
                          if(I==gr.end())
                          printf("-1\n");
                          else
                          printf("%d\n",I->second);
               } 
    
}
