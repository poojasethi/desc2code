// Prepend this entire file to main when ready to submit.

#ifndef PROGRAMMING_CONTESTS_H
#define PROGRAMMING_CONTESTS_H

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <typeinfo>
#include <utility>
using namespace std;

typedef long long LL;

#define RI(x) int x; scanf("%i", &x)
#define RLL(x) long long x; scanf("%lli", &x)
#define RS(x) char _buf[2000]; scanf("%s", _buf); string x(_buf)
#define RL(x) string x; getline(cin, x) //Does not include line break at end.
#define FIN(path) freopen(path, "r", stdin)
#define FOUT(path) freopen(path, "w", stdout)

#define IT(c) typeof(c.begin())
#define FOR(i, a, b) for(int i=(a), _b=(b); i<_b; ++i)
#define FORR(i, a, b) for(int i=(b-1), _a=(a); i>=_a; --i)
#define FORE(it, c) for(IT(c) it=c.begin(); it!=c.end(); ++it)
#define ALL(x) x.begin(), x.end()

#define PB push_back
#define MP make_pair
#define SZ(c) ((int)c.size())
#define LEN(a) (sizeof(a)/sizeof(a[0]))
#define END(a) (a+LEN(a))

#define TWO(e) (1<<e)
#define TWOL(e) (1LL<<e)


static const double PI = acos(-1.0);
static const double GOLD = (1+sqrt(5.0))/2;




// Requires that type of v is the type that a contains.
template <typename A, typename V>
static void fillArray(A &a, const V &v) {
  fill((V*)a, (V*)a+sizeof(a)/sizeof(V), v);
}


// Pieces which are the empty string are dropped.
static void split(const string &s, vector<string> &pieces, const string &delim = " ") {
  unsigned int nextI = 0;
    for(unsigned int cutAt = s.find(delim,nextI); cutAt != s.npos; cutAt = s.find(delim,nextI)) {
         if(cutAt > nextI) pieces.push_back(s.substr(nextI,cutAt-nextI));
         nextI = cutAt+delim.length();
    }
    if(nextI < s.length()) {
         pieces.push_back(s.substr(nextI));
  }
}

static string toLower(const string& s) {
  string t = s;
  transform(s.begin(), s.end(), t.begin(), (int (*)(int))tolower);
  return t;
}
static string toUpper(const string& s) {
  string t = s;
  transform(s.begin(), s.end(), t.begin(), (int (*)(int))toupper);  
  return t;
}



static bool isLetter(const char& c) {
  char d = tolower(c);
  return d >= 'a' && d <= 'z';
}
static bool isVowel(const char& c) {
  char d = tolower(c);
  return d=='a'||d=='e'||d=='i'||d=='o'||d=='u'||d=='y';
}
static bool isConsonant(const char& c) {
  return isLetter(c) && !isVowel(c);
}






























// Stuff for debugging.

static void sleep(const int ms) {
    clock_t goal = ms + clock();
    while (goal > clock());
}

template<typename T>
static void print(T x) {
  cout << x << endl;
}

template<typename T>
static void print(T first, const T &last) {
  while(first != last) cout << *(first++) << " ";
  cout << endl;
}

template<typename T, size_t LENGTH>
static void print(const T (&a)[LENGTH]) {
  print(a,a+LENGTH);
}

template<typename T, size_t LENGTH0, size_t LENGTH1>
static void print(const T (&a)[LENGTH0][LENGTH1]) {
  for(int i = 0; i < LENGTH0; ++i) {
    print(a[i]);
  }
}

static double timer() {
  return 1.0*clock()/CLOCKS_PER_SEC;
}

#endif // PROGRAMMING_CONTESTS_H









// Efficient representation of an array in which index i
// can be assigned values 0,...,2^baB[i]-1. Thus baB[i]
// is the number of bits to represent index i.
//MODIFY///////////////////////////////////////////////////////
typedef long long baT; static const size_t baLen = 8*sizeof(baT);
static const int baB[baLen] = {4,4,4,4,4,4,4,4,4}; // Values must be >= 0 and sum to <= baLen.
///////////////////////////////////////////////////////////////
static int baBS[baLen] = {0}; // index i is sum from baB[0] to baB[i-1] 
static int _baBSInit() {
  for(int i = 1; i < baLen; ++i) baBS[i] = baBS[i-1]+baB[i-1];
  return 0;
} static int __baBSInit = _baBSInit();

// Sets value of index i to v.
static void baSet(baT& s, const int& i, const baT& v) {
  // Set bits for index i to 0.
  baT mask = ~((((baT)1 << baB[i])-1) << baBS[i]);
  s &= mask;
  // Set bits for index i to v.
  mask = v << baBS[i];
  s |= mask;
}

// RETURNS: Value of index i.
static baT baGet(const baT& s, const int& i) {
    baT mask = (((baT)1 << baB[i])-1) << baBS[i];
    return (s & mask) >> baBS[i];
}

// Swap values of indices i and j.
static void baSwap(baT& s, const int& i, const int& j) {
  baT temp = baGet(s,i);
  baSet(s,i,baGet(s,j));
  baSet(s,j,temp);
}

static string baToString(const baT& s) {
  stringstream ss;
  ss << "(";
  int i = 0;
  while(true) {
    ss << baGet(s,i++);
    if(i == baLen || baB[i] == 0) break;
    ss << ",";
  }
  ss << ")";
  return ss.str();
}

static baT _baMax() {
  baT res = 0;
  for(int i = 0; i < baLen; ++i) baSet(res,i,((baT)1 << baB[i])-1);
  return res;
} static const baT baMax = _baMax();













typedef baT State;
typedef int Cost;
const Cost INF = 1000000000;
const State NONE = numeric_limits<State>::min();
const int MAX_SUCCS = 40;

bool isGoal(const State &s) {
  return false;
}

static int dr[] = {1,0};
static int dc[] = {0,1};
void getSuccs(const State& curr, State succs[MAX_SUCCS], Cost costs[MAX_SUCCS]) {
  int i = 0;
  FOR(r,0,3) FOR(c,0,3) FOR(j,0,2) {
    int nr = r+dr[j];
    int nc = c+dc[j];
    if(nr >= 0 && nr < 3 && nc >= 0 && nc < 3) {
      int k = 3*r+c;
      int nk = 3*nr+nc;
      LL sum = baGet(curr,k)+baGet(curr,nk);
      if((sum&1)==1 && sum != 9 && sum != 15) {
        State succ = curr;
        baSwap(succ,k,nk);
        succs[i++]=succ;
      }
    }
  }
  succs[i] = NONE;
}










//RETURNS: Cost of path from start to a goal state or INF if no such path exists.
//Cost* costsFromStart = new Cost[baMax+1];
map<State,Cost> costsFromStart;
//State* prev = new State[baMax+1]; //map<State,State,StateComparator> prev;
//vector<State> path;
//Cost maxCost = -1;

Cost bfs(State start) {
  //fill(costsFromStart,costsFromStart+baMax+1,INF);
  costsFromStart.clear();
  //fill(prev,prev+baMax+1,NONE);
  queue<State> q;
  q.push(start);
  costsFromStart[start] = 0;
  while(!q.empty()) {
    const State& curr = q.front();
    if(isGoal(curr)) {
      //path = makePath(curr,prev,path);
      return costsFromStart[curr];
    }
    const Cost& currCost = costsFromStart[curr];
    
    State succs[MAX_SUCCS];
    Cost costs[MAX_SUCCS];
    getSuccs(curr,succs,costs);
    for(int i = 0; succs[i] != NONE; ++i) {
      const State& succ = succs[i];
      if(costsFromStart.count(succ) == 0) {
        q.push(succ);
        //prev[succ] = curr;
        costsFromStart[succ] = currCost+1;
      }
    }
    
    q.pop();
    //if(q.empty()) maxCost = currCost;
  }
  return INF;
}














int main() {
  //FIN("input.txt");
  State goal = 0;
  FOR(i,0,9) {
    baSet(goal,i,i+1);
  }
  bfs(goal);
  RI(t);
  FOR(test,0,t) {
    State start = 0;
    FOR(i,0,9) {
      RI(c);
      baSet(start,i,c);
    }
    if(costsFromStart.count(start) == 0) printf("-1\n");
    else printf("%i\n",costsFromStart[start]);
  }
  return 0;
}
