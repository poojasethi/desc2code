#!/usr/bin/python
"Solve the Poker problem at CodeChef"
order = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K']
order_dict = dict(map(None, order, xrange(len(order))))
suits = ['S', 'H', 'D', 'C']
suits_dict = dict(map(None, suits, xrange(len(suits))))
scoring = [
 ['royal flush', [[rank + suit for rank in ['A', 'T', 'J', 'Q', 'K']] for
   suit in suits]],
 ['straight flush', None],
 ['four of a kind', None],
 ['full house', None],
 ['flush', None],
 ['straight', None],
 ['three of a kind', None],
 ['two pairs', None],
 ['pair', None],
]
scoring_dict = dict(scoring)
def main():
 testcases = int(raw_input())
 for testcase in xrange(testcases):
  hand = raw_input().split()
  hand.sort(lambda a, b: cmp((order_dict[a[0]] << 2) + suits_dict[a[1]], 
   (order_dict[b[0]] << 2) + suits_dict[b[1]]))
  #print hand
  score = 'high card'  # default
  for key in map(lambda h: h[0], scoring):
   if isinstance(scoring_dict[key], list):
    if hand in scoring_dict[key]:
     score = key
     break
    else:
     continue
   elif eval('is_' + key.replace(' ', '_'))(hand):
    score = key
    break
  print score
def is_straight_flush(hand):
 return (is_flush(hand) and is_straight(hand))
def is_flush(hand):
 return hand[0][1] == hand[1][1] == hand[2][1] == hand[3][1] == hand[4][1]
def is_straight(hand):
 return order_dict[hand[0][0]] == order_dict[hand[4][0]] - 4
def is_four_of_a_kind(hand):
 return hand[0][0] == hand[3][0] or hand[1][0] == hand[4][0]
def is_three_of_a_kind(hand):
 return hand[0][0] == hand[2][0] or \
  (len(hand) > 3 and (hand[1][0] == hand[3][0] or \
   (hand[2][0] == hand[4][0])))
def is_full_house(hand):
 return (is_pair(hand[0:2]) and is_three_of_a_kind(hand[2:])) or \
  (is_three_of_a_kind(hand[0:3]) and is_pair(hand[3:]))
def is_two_pairs(hand):
 return (is_pair(hand[0:2]) and is_pair(hand[2:4])) or \
  (is_pair(hand[0:2]) and is_pair(hand[3:5])) or \
  (is_pair(hand[1:3]) and is_pair(hand[3:5]))
def is_pair(hand):
 for index in range(len(hand) - 1):
  if hand[index][0] == hand[index + 1][0]: return True
 return False
if __name__ == '__main__':
 main()
