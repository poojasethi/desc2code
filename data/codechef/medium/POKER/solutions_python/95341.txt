royal = ['A','K','Q','J','T']

esoMin  = {
        'A' : 1,
        '2' : 2 ,
        '3' : 3 ,
        '4' : 4 ,
        '5' : 5,
        '6' : 6,
        '7' : 7,
        '8' : 8,
        '9' : 9,
        'T' : 10,
        'J' : 11,
        'Q' : 12,
        'K' : 13  
        }

esoMax  = {
        '2' : 2 ,
        '3' : 3 ,
        '4' : 4 ,
        '5' : 5,
        '6' : 6,
        '7' : 7,
        '8' : 8,
        '9' : 9,
        'T' : 10,
        'J' : 11,
        'Q' : 12,
        'K' : 13, 
        'A' : 14
        }

def isAllSame(pole):
    if pole == []: return True
    f = pole[0] 
    for m in pole:
        if m != f: return False
    return True

def farba(pole):
    return map(lambda x: x[1], pole)

def hod(pole):
    return map(lambda x: x[0], pole)

def isPostupkaX(pole, mapa):
    return isAllSame( map(lambda x,y: x-y,sorted(map(lambda x:mapa.get(x), pole)),range(0,len(pole))))

def isPostupka(pole):
    return isPostupkaX(pole, esoMin) or isPostupkaX(pole, esoMax)

def isRoyalFlush(pole):
    return isAllSame(farba(pole)) and sorted(royal) == sorted(hod(pole))

def isStraightFlush(pole):
    return isAllSame(farba(pole)) and isPostupka(hod(pole))


def pocitanie(pole, exp):
    di = {}
    for i in hod(pole):
        di[i] = di.get(i,0) + 1
    return sorted(di.values()) == exp

def isFourOfKind(pole):
    return pocitanie(pole, [1,4])

def isFullHouse(pole):
    return pocitanie(pole, [2,3])

def isFlush(pole):
    return isAllSame(farba(pole))

def isStraight(pole):
    return isPostupka(hod(pole))

def isThreeOfKind(pole):
    return pocitanie(pole, [1,1,3])

def isTwoPairs(pole):
    return pocitanie(pole, [1,2,2])

def isPair(pole):
    return pocitanie(pole, [1,1,1,2])

def isHighCard(pole):
    return True

names = ["royal flush", "straight flush", "four of a kind", "full house", "flush", "straight", "three of a kind", "two pairs", "pair", "high card"]
funcs = [isRoyalFlush, isStraightFlush, isFourOfKind, isFullHouse, isFlush, isStraight, isThreeOfKind, isTwoPairs, isPair, isHighCard]

if __name__ == "__main__":    
    lines = int(raw_input())
    for i in range (0,lines):
        data = raw_input().split(' ')
        for j in range(0, 10):
            if funcs[j](data):
                print names[j]
                break
