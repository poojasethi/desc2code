import psyco

psyco.full()


def rank2num(rank):
    if rank == 'A':
        return 1
    elif rank == 'T':
        return 10
    elif rank == 'J':
        return 11
    elif rank == 'Q':
        return 12
    elif rank == 'K':
        return 13
    else:
        return int(rank)


def is_seq(ranks):
    ranks_len = len(ranks)
    if ranks_len < 2:
        return False
    else:
        for idx in range(len(ranks)):
            if idx != 0 and ranks[idx] != ranks[idx-1] + 1:
                return False
        return True


for case in range(int(raw_input())):
    cards = raw_input().split()
    spades = []
    hearts = []
    diamonds = []
    clubs = []
    ranks = []
    for card in cards:
        rank = rank2num(card[0])
        ranks.append(rank)
        if card[1] == 'S':
            spades.append(rank)
        elif card[1] == 'H':
            hearts.append(rank)
        elif card[1] == 'D':
            diamonds.append(rank)
        else:
            clubs.append(rank)
    ranks.sort()
    spades.sort()
    hearts.sort()
    diamonds.sort()
    clubs.sort()
    if [1, 10, 11, 12, 13] in (spades, hearts, diamonds, clubs):
        print 'royal flush'
    elif (len(spades) == 5 or len(hearts) == 5 or len(diamonds) == 5 or
          len(clubs) == 5):
        if (is_seq(spades) or is_seq(hearts) or is_seq(diamonds) or
            is_seq(clubs)):
            print 'straight flush'
        else:
            print 'flush'
    elif ranks[:4].count(ranks[0]) == 4 or ranks[1:].count(ranks[1]) == 4:
        print 'four of a kind'
    elif (ranks[:3].count(ranks[0]) == 3 or ranks[1:4].count(ranks[1]) == 3 or
          ranks[2:].count(ranks[2]) == 3):
        if ((ranks[:3].count(ranks[0]) == 3 and
            ranks[3:].count(ranks[3]) == 2) or
            (ranks[2:].count(ranks[2]) == 3 and
             ranks[:2].count(ranks[0]) == 2)):
            print 'full house'
        else:
            print 'three of a kind'
    elif is_seq(ranks):
        print 'straight'
    elif (ranks[:2].count(ranks[0]) == 2 or ranks[1:3].count(ranks[1]) == 2 or
          ranks[2:4].count(ranks[2]) == 2 or ranks[3:].count(ranks[3]) == 2):
        if ((ranks[:2].count(ranks[0]) == 2 and
             ranks[2:4].count(ranks[2]) == 2) or
            (ranks[1:3].count(ranks[1]) == 2 and
             ranks[3:].count(ranks[3]) == 2) or
            (ranks[:2].count(ranks[0]) == 2 and
             ranks[3:].count(ranks[3]) == 2)):
            print 'two pairs'
        else:
            print 'pair'
    else:
        print 'high card'
