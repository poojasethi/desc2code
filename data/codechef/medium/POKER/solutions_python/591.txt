
# Example

# Input:
# 3
# AH KH QH TH JH
# KH 5S 3C 5C 7D
# QH QD 2S QC 2C

# Output:
# royal flush
# pair
# full house

import copy
class Poker:
    def __init__(self):
        self.suits = {'S':1,
                 'H':2,
                 'D':3,
                 'C':4}

        self.ranks = {'2':2,
                      '3':3,
                      '4':4,
                      '5':5,
                      '6':6,
                      '7':7,
                      '8':8,
                      '9':9,
                      'T':10,
                      'J':11,
                      'Q':12,
                      'K':13,
                      'A':14}

    def segregerateHand(self,cards):
        all_cards = cards.split(' ')
        self.user_suits = [self.suits[each[1]] for each in all_cards]
        self.user_ranks = [self.ranks[each[0]] for each in all_cards]

    def isRoyalFlush(self):
        user_ranks = copy.copy(self.user_ranks) 
        user_ranks.sort()
        if len(set(self.user_suits))==1 and user_ranks == range(10,15):
            return True
        else:
            return False

    def isStraightFlush(self):
        user_ranks = copy.copy(self.user_ranks) 
        user_ranks.sort()
        if len(set(self.user_suits))==1 and self.inOrder(user_ranks):
            return True
        else:
            return False

    def isFourOfAKind(self):
        for each_rank in self.user_ranks:
            if self.user_ranks.count(each_rank)==4:
                return True
        return False

    def isFullHouse(self):
        return self.isThreeOfAKind() and self.isPair()

    def isFlush(self):
        user_ranks = copy.copy(self.user_ranks) 
        user_ranks.sort()
        if len(set(self.user_suits))==1:
            return True
        else:
            return False

    def isStraight(self):
        user_ranks = copy.copy(self.user_ranks) 
        user_ranks.sort()
        return self.inOrder(user_ranks)
           
    def isThreeOfAKind(self):
        for each_rank in self.user_ranks:
            if self.user_ranks.count(each_rank)==3:
                return True
        return False

    def isTwoPair(self):
        count = 0 
        for each_rank in self.user_ranks:
            if self.user_ranks.count(each_rank)==2:
                count = count + 1
        if count == 4:
            return True
        else:
            return False

    def isPair(self):
        for each_rank in self.user_ranks:
            if self.user_ranks.count(each_rank)==2:
                return True
        return False

    def inOrder(self,sorted_rank_list):
        min_range = min(sorted_rank_list)
        max_range = max(sorted_rank_list)+1
        ret_val = False
        if sorted_rank_list == range(min_range,max_range):
            ret_val = True

        if max(sorted_rank_list) == 14:
            sorted_rank_list[sorted_rank_list.index(14)]=1
            sorted_rank_list.sort()
            min_range = min(sorted_rank_list)
            max_range = max(sorted_rank_list)+1
            
            if sorted_rank_list == range(min_range,max_range):
                ret_val = True

        return ret_val
    
    def returnValue(self):
        if self.isRoyalFlush():
            print "royal flush"
        elif self.isStraightFlush():
            print "straight flush"
        elif self.isFourOfAKind():
            print "four of a kind"
        elif self.isFlush():
            print "flush"
        elif self.isFullHouse():
            print "full house"
        elif self.isStraight():
            print "straight"
        elif self.isThreeOfAKind():
            print "three of a kind"
        elif self.isTwoPair():
            print "two pairs"
        elif self.isPair():
            print "pair"
        else:
            print "high card"
    
if __name__ ==  "__main__":
    p = Poker()
    n = int(raw_input())
    l = range(0,n)
    for each in l:
        s = raw_input()
        p.segregerateHand(s.strip())
        p.returnValue()
