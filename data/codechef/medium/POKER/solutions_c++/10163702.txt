#include <stdio.h>
 
const int ABSENT = 0, PRESENT = 1, TRUE = 1, FALSE = 0;
 
char In_Buff[22][20] = {"AH KH QH TH JH", \
								"KH 5S 3C 5C 7D", \
								"QH QD 2S QC 2C", \
								"QH QD QS QC 2C", \
								"6H 2H 3H 4H 5H",\
								"6H 2H KH 4H 5H",\
								"6H 2H 3S 4H 5H",\
								"AH AS 2S AC 5H",\
								"AH AS 3S 8C 8H",\
								"AH KS 3S 8C 8H",\
								"AH KS 3S 6C 8H",\
							  };
 
/*
char In_Buff[22][16] = {"KH AH QH TH JH", \
								"AS KS QS TS JS", \
								"AD KD QD TD JD", \
							  };
*/
const char Result[11][20] = {"royal flush", \
									  "straight flush", \
									  "four of a kind", \
									  "full house", \
									  "flush", \
									  "straight", \
									  "three of a kind", \
									  "two pairs", \
									  "pair", \
									  "high card", \
									 };
char Card_Stack[4][16];
// 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
// A  2  3  4  5  6  7  8  9  T  J   Q   K   A   x   x
 
 
void Calculate_Result(char *cTemp);
void Adjust_Array(char *cTemp);
int Royal_Flush(void);
int Straight_Flush(void);
int Four_Of_A_Kind(void);
int Full_House(void);
int Flush(void);
int Straight(void);
int Three_Of_A_Kind(void);
int Two_Pairs(void);
int Pair(void);
void Debug_Array(void);
 
int main(void){
 int i,j;
 int iInput;
 char Garbage[10];
 //iInput = 11;
 /*--------->>>>>>scan input data <<<<<<------------*/
 scanf("%d",&iInput);
 for(i= 0; i < iInput;i++){
	for(j=0;j<5;j++){
	  scanf("%s",&Garbage);//In_Buff[i][j]);
	  In_Buff[i][0+(j*3)] =  Garbage[0];
	  In_Buff[i][1+(j*3)] =  Garbage[1];
	  In_Buff[i][2+(j*3)] =  ' ';
	}
 }
 /*--------->>>>>>Output data <<<<<<------------*/
 for(i=0; i< iInput; i++){
	Calculate_Result(In_Buff[i]);
//	printf("\n%s",Result[i]);
 }
 /*--------->>>>>>Output data <<<<<<------------*/
 return(0);
}
 
void Calculate_Result(char *cTemp){
 // printf("\n %s",cTemp);
  Adjust_Array(cTemp);
  if(Royal_Flush()){
	 printf("\nroyal flush");
	 return;
  }
  if(Straight_Flush()){
	 printf("\nstraight flush");
	 return;
  }
  if(Four_Of_A_Kind()){
	 printf("\nfour of a kind");
	 return;
  }
  if(Full_House()){
	 printf("\nfull house");
	 return;
  }
  if(Flush()){
	 printf("\nflush");
	 return;
  }
  if(Straight()){
	 printf("\nstraight");
	 return;
  }
  if(Three_Of_A_Kind()){
	 printf("\nthree of a kind");
	 return;
  }
  if(Two_Pairs()){
	 printf("\ntwo pairs");
	 return;
  }
  if(Pair()){
	 printf("\npair");
	 return;
  }
  printf("\nhigh card"); return;
 
}
 
//void Adjust_Array( char *cTemp)
//this array fills the Card_Stack global array with the cards present or not
//at the corresponding location.
void Adjust_Array( char *cTemp){
int i,j;
int tempValue, tempSet, Set;
  for(i=0; i< 4; i++)
	 for(j=0; j< 16; j++)
		Card_Stack[i][j] = ABSENT;
 
  for(i = 0; i<14; i++){
	 tempValue  = cTemp[i];
	 i++; 										//move to next char in string.
	 tempSet = cTemp[i];
//	 printf("[%c%c]",tempValue,tempSet);
	 i++;                              //skip the spaces.
 
	 switch(tempSet){
		case 'S': Set = 0; break;
		case 'H': Set = 1; break;
		case 'D': Set = 2; break;
		case 'C': Set = 3; break;
	 }
	 switch(tempValue){
		case 'A':
					Card_Stack[Set][0]  = 'A';//PRESENT;
					Card_Stack[Set][13] = 'A';//PRESENT;
					break;
		case 'T':
					Card_Stack[Set][9]   = 'T';//PRESENT;
					break;
		case 'J':
					Card_Stack[Set][10]  = 'J';//PRESENT;
					break;
		case 'Q':
					Card_Stack[Set][11]   = 'Q';//PRESENT;
					break;
		case 'K':
					Card_Stack[Set][12]   = 'K';//PRESENT;
					break;
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
					Card_Stack[Set][tempValue - '1']  = tempValue;
					break;
	 }
  }
}
 
int Royal_Flush(void){
int i,j,ser;
ser = 0;
  for(i=0; i< 4; i++){
	 for(j=9; j< 16; j++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
		  else ser = 0;
		  if(ser == 5) return (TRUE);
	 }
  }
  return (FALSE);
}
 
int Straight_Flush(void){
int i,j,ser;
ser = 0;
  for(i=0; i< 4; i++){
	 for(j=0; j< 16; j++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
		  else ser = 0;
		  if(ser == 5) return (TRUE);
	 }
  }
  return (FALSE);
}
int Four_Of_A_Kind(void){
int i,j,ser;
ser = 0;
  for(j=0; j< 16; j++){
	 ser = 0;
	 for(i=0; i< 4; i++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
	 }
	 if(ser == 4) return (TRUE);
  }
  return (FALSE);
}
 
int Full_House(void){
int i,j,ser;
ser = 0;
  for(j=0; j< 16; j++){
	 ser = 0;
	 for(i=0; i< 4; i++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
	 }
	 if(ser == 3) break;
  }
  if(ser != 3)  return (FALSE);
  for(j=0; j< 16; j++){
	 ser = 0;
	 for(i=0; i< 4; i++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
	 }
	 if(ser == 2) return (TRUE);
  }
  return (FALSE);
 
}
int Flush(void){
int i,j,ser;
ser = 0;
  for(i=0; i< 4; i++){
	 ser = 0;
	 for(j=0; j< 13; j++){   //ACE Should not be counted twice!!!!
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
		  if(ser == 5) return (TRUE);
	 }
  }
  return (FALSE);
}
 
int Straight(void){
int i,j,ser;
char Temp_Stack[16];
 
for(j=0; j< 16; j++){
  Temp_Stack[j] = Card_Stack[0][j] | Card_Stack[1][j] | Card_Stack[2][j] | Card_Stack[3][j] ;
}
ser = 0;
for(j=0; j< 16; j++){
  if(Temp_Stack[j] != ABSENT) ser += 1;
  else ser = 0;
  if(ser == 5) return (TRUE);
}
return (FALSE);
}
 
int Three_Of_A_Kind(void){
int i,j,ser;
ser = 0;
  for(j=0; j< 16; j++){
	 ser = 0;
	 for(i=0; i< 4; i++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
	 }
	 if(ser == 3) return (TRUE);
  }
  return (FALSE);
}
int Two_Pairs(void){
int i,j,ser;
ser = 0;
  for(j=0; j< 13; j++){
	 ser = 0;
	 for(i=0; i< 4; i++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
	 }
	 if(ser == 2) break;
  }
  if(ser != 2)  return (FALSE);
  j++;
  for(; j< 13; j++){
	 ser = 0;
	 for(i=0; i< 4; i++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
	 }
	 if(ser == 2) return (TRUE);
  }
 return (FALSE);
 
 
}
int Pair(void){
int i,j,ser;
ser = 0;
  for(j=0; j< 13; j++){
	 ser = 0;
	 for(i=0; i< 4; i++){
		  if(Card_Stack[i][j] != ABSENT) ser += 1;
	 }
	 if(ser == 2) return(TRUE);
  }
 return (FALSE);
 
}
void Debug_Array(void){
int i,j;
  printf("\n********Debug Out**********");
  for(i=0; i< 4; i++){
	 printf("\n %d[  ",i);
	 for(j=0; j< 16; j++){
		  if(Card_Stack[i][j] != ABSENT) printf("%c",Card_Stack[i][j]);
		  else printf("0");
		  if( !((j+1)%5)) printf(" ");
	 }
	 switch(i){
		case 0: printf("  ] SPADE"); break;
		case 1: printf("  ] HEARTS"); break;
		case 2: printf("  ] DIAMONDS"); break;
		case 3: printf("  ] CLUBS"); break;
	 }
  }
  printf("\n******Debug Out***********");
  return ;
} 