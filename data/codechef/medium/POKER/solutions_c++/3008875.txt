#include <iostream>
using namespace std;

enum eSuits
{
    Suits_S = 0,
    Suits_H = 1,
    Suits_D = 2,
    Suits_C = 3,
    Suits_COUNT
};

enum eCards
{
    Cards_A = 0,
    Cards_K = 1,
    Cards_Q = 2,
    Cards_J = 3,
    Cards_T = 4,
    Cards_9 = 5,
    Cards_8 = 6,
    Cards_7 = 7,
    Cards_6 = 8,
    Cards_5 = 9,
    Cards_4 = 10,
    Cards_3 = 11,
    Cards_2 = 12,
    Cards_COUNT
};

eSuits CharToSuitIndex(char c)
{
    eSuits suit = Suits_S;
    switch(c)
    {
    case 'S':
        suit = Suits_S;
        break;
    case 'H':
        suit = Suits_H;
        break;
    case 'D':
        suit = Suits_D;
        break;
    case 'C':
        suit = Suits_C;
        break;
    }
    return suit;
}

eCards CharToCardIndex(char c)
{
    eCards card = Cards_A;
    switch(c)
    {
    case 'A' :
        card = Cards_A;
        break;
    case 'K' :
        card = Cards_K;
        break;
    case 'Q':
        card = Cards_Q;
        break;
    case 'J':
        card = Cards_J;
        break;
    case 'T':
        card = Cards_T;
        break;
    case '9':
        card = Cards_9;
        break;
    case '8':
        card = Cards_8;
        break;
    case '7':
        card = Cards_7;
        break;
    case '6':
        card = Cards_6;
        break;
    case '5':
        card = Cards_5;
        break;
    case '4':
        card = Cards_4;
        break;
    case '3':
        card = Cards_3;
        break;
    case '2':
        card = Cards_2;
        break;
    }
    return card;
}

void Poker()
{
    char* strType[] =
    {
        "royal flush",
        "straight flush",
        "four of a kind",
        "full house",
        "flush",
        "straight",
        "three of a kind",
        "two pairs",
        "pair",
        "high card"
    };

    int T = 0;
    cin >> T;
    for ( int t = 0; t < T; ++t)
    {
        int arrSuit[Suits_COUNT] = {0};
        int arrCards[Cards_COUNT] = {0};
        char cards[5][3] = {{0,0,0}};

        for( int i = 0; i< 5; ++i)
        {
            cin >> cards[i];
            ++arrCards[CharToCardIndex(cards[i][0])];
            ++arrSuit[CharToSuitIndex(cards[i][1])];
        }

        bool bFlush = false;
        bool bStraight = false;
        bool bFourKind = false;
        bool bThreeKind = false;
        bool bTwoPair = false;
        bool bOnepair = false;
        bool bRoyal = false;

        if( arrSuit[Suits_S] == 5 ||
            arrSuit[Suits_H] == 5 ||
            arrSuit[Suits_D] == 5 ||
            arrSuit[Suits_C] == 5 )
        {
            bFlush = true;
        }

        for( int i = 0; i < Cards_COUNT; ++i)
        {
            if(arrCards[i] == 4)
            {
                bFourKind = true;
            }
            else if( arrCards[i] == 3)
            {
                bThreeKind  = true;
            }
            else if(arrCards[i] == 2)
            {
                if(!bOnepair)
                {
                    bOnepair = true;
                }
                else
                {
                    bTwoPair = true;
                }
            }
        }

        if(!bOnepair &&  !bTwoPair && !bThreeKind && !bFourKind)
        {
            if( bFlush)
            {
                if(arrCards[Cards_A] == 1 &&
                    arrCards[Cards_K] == 1 &&
                    arrCards[Cards_Q] == 1 &&
                    arrCards[Cards_J] == 1 &&
                    arrCards[Cards_T] == 1 )
                {
                    bRoyal = true;
                }
            }
            if(!bRoyal)
            {
                /*for( int i = 0; i < Cards_COUNT; ++i)
                {
                    if(arrCards[i] == 1)
                    {
                        int nCont = 1;
                        for( int j = i+1; j < i + 5; ++j )
                        {
                            if( j < Cards_COUNT && arrCards[j] == 1)
                            {
                                ++nCont;
                            }

                        }
                        if(nCont == 5)
                        {
                            bStraight = true;
                            break;
                        }
                    }
                }

                if( arrCards[0] == 1 && arrCards[9] == 1&& arrCards[10] == 1&& arrCards[11] == 1 && arrCards[12] == 1)
                {
                     bStraight = true;
                }*/



                int nStart = -1;
                for( int i = 1; i < Cards_COUNT; ++i) //leave A
                {
                    if(arrCards[i] == 1)
                    {
                        nStart = i;
                        break;
                    }
                }
                if( nStart > 0 && nStart + 3 < Cards_COUNT)
                {
                    bool bFound = true;
                    for( int i = nStart + 1; i <= nStart + 4; ++i )
                    {
                        if(i == Cards_COUNT)
                        {
                            if(arrCards[0] != 1)
                            {
                                bFound = false;
                                break;
                            }
                        }
                        else if(arrCards[i] != 1)
                        {
                            bFound = false;
                            break;
                        }
                    }
                    if(bFound)
                    {
                        bStraight = true;
                    }
                }
            }
        }
        int index = 9;
        if( bRoyal && bFlush)
        {
            index = 0;
        }
        else if( bStraight && bFlush)
        {
            index = 1;
        }
        else if( bFourKind)
        {
            index = 2;
        }
        else if( bThreeKind  && bOnepair)
        {
            index = 3;
        }
        else if(bFlush)
        {
            index = 4;
        }
        else if(bStraight)
        {
            index = 5;
        }
        else if( bThreeKind )
        {
            index = 6;
        }
        else if( bTwoPair )
        {
            index = 7;
        }
        else if( bOnepair )
        {
            index = 8;
        }
        else
        {
            index = 9;
        }
        cout << strType[index]  <<endl;
    }
}


int main()
{
    Poker();
    return 0;
}







