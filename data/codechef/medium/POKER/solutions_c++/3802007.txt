#include <iostream>
#include <map>

using namespace std;

int figures[16];
int colors[4];
int counts[4];

void clear()
{
    for (int i = 2; i < 15; ++i) figures[i] = 0;
    for (int i = 0; i < 4; ++i)
    {
        colors[i] = 0;
        counts[i] = 0;
    }
}

int color(char ch)
{
    switch (ch)
    {
        case 'S': return 0;
        case 'H': return 1;
        case 'D': return 2;
        case 'C': return 3;
    }
    return 0;
}

int figure(char ch)
{
    switch (ch)
    {
        case 'A': return 14;
        case 'K': return 13;
        case 'Q': return 12;
        case 'J': return 11;
        case 'T': return 10;
        default:
            return (ch - '0');
    }
    return 0;
}

void countFigures()
{
    for (int i = 2; i < 15; ++i)
    {
        int count = figures[i];
        if (count > 0)
        {
            counts[count-1]++;
        }
    }
}

bool isFlush()
{
    for (int i = 0; i < 4; ++i)
    {
        if (colors[i] == 5) return true;
    }
    return false;
}

bool isStraight()
{
    int idx = 2;
    while ((figures[idx] == 0) && (idx <= 10))
    {
        idx++;
    }
    if ((figures[idx+1] > 0) && (figures[idx+2] > 0) && (figures[idx+3] > 0) && (figures[idx+3] > 0))
    {
        return true;
    }
    if ((figures[14] > 0) && (figures[2] > 0) && (figures[3] > 0) &&
        (figures[4] > 0) && (figures[5] > 0))
    {
        return true;
    }
    return false;
}

bool isRoyal()
{
    return ((figures[14] > 0) && (figures[10] > 0));
}

string testCase()
{
    clear();
    string card;
    for (int i = 0; i < 5; ++i)
    {
        cin >> card;
        int f = figure(card[0]);
        int c = color(card[1]);
        figures[f]++;
        colors[c]++;
    }

    countFigures();

    if (isFlush())
    {
        if (isStraight())
        {
            if (isRoyal())
            {
                return "royal flush";
            }
            else
            {
                return "straight flush";
            }
        }
        return "flush";
    }
    if (counts[3] > 0)
    {
        return "four of a kind";
    }
    if ((counts[2] > 0) && (counts[1] > 0))
    {
        return "full house";
    }
    if (isStraight())
    {
        return "straight";
    }
    if (counts[2] > 0)
    {
        return "three of a kind";
    }
    if (counts[1] > 1)
    {
        return "two pairs";
    }
    if (counts[1] > 0)
    {
        return "pair";
    }
    return "high card";
}

int main()
{
    int T;
    cin >> T;
    for (int i = 0; i < T; ++i)
    {
        cout << testCase() << endl;
    }
}