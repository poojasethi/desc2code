#include <iostream>
#include <cstring>
using namespace std;
//S<H<D<C

int royalFlush(int rankM[],int suits[])
{
    int i;
    if(suits[0]==5 || suits[1]==5 || suits[2]==5 || suits[3]==5)
    {
        if(rankM[1]==1 && rankM[10]==1 && rankM[11]==1 && rankM[12]==1 && rankM[13]==1)
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

int straightFlush(int rankM[],int suits[])
{
    int i;
    if(suits[0]==5 || suits[1]==5 || suits[2]==5 || suits[3]==5)
    {
        for(i=1;i<=9;i++)
            if(rankM[i]==1 && rankM[i+1]==1 && rankM[i+2]==1 && rankM[i+3]==1 && rankM[i+4]==1)
                return 1;
        return 0;
    }
    else
        return 0;
}

int fourOfAKind(int rankM[])
{
    int i;
    for(i=1;i<14;i++)
        if(rankM[i]==4)
            return 1;
    return 0;
}

int fullHouse(int rankM[])
{
    int i;
    int num2=0,num3=0;
    for(i=0;i<14;i++)
    {
        if(rankM[i]==2)
            num2++;
        if(rankM[i]==3)
            num3++;
    }
    if(num2 ==1 && num3 == 1)
        return 1;
    else
        return 0;

}

int flush(int rankM[],int suits[])
{
    if(suits[0]==5 || suits[1]==5 || suits[2]==5 || suits[3]==5)
        return 1;
    return 0;
}

int straight(int rankM[])
{
    int i;
    for(i=1;i<=9;i++)
        if(rankM[i]==1 && rankM[i+1]==1 && rankM[i+2]==1 && rankM[i+3]==1 && rankM[i+4]==1)
            return 1;
    if(rankM[13]==1)
    {
        for(i=12;i>=10;i--)
        {
            if(rankM[i]!=1)
                break;
        }
        i++;
        int min=i;
        for(i=1;i<=4;i++)
        {
            if(rankM[i]!=1)
                break;
        }
        i--;
        int max=i;
        if((14-min)+max==5)
            return 1;
        else
            return 0;
    }

return 0;
}

int threeOfAKind(int rankM[])
{
    int i;
    for(i=1;i<14;i++)
    {
        if(rankM[i]==3)
            return 1;
    }
    return 0;
}

int twoPairs(int rankM[])
{
    int i;
    int counter=0;
    for(i=0;i<14;i++)
    {
        if(rankM[i]==2)
            counter++;
    }
    if(counter==2)
        return 1;
    else
        return 0;

}

int pairs(int rankM[])
{
    int i;
    for(i=1;i<14;i++)
    {
        if(rankM[i]==2)
            return 1;
    }
    return 0;
}

int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        string str;
        string input[5];
        int rankM[14]={0},suits[4]={0};
        for(int i=0;i<5;i++)
        {
            cin >> str;
            input[i]=str;
            if(str[0]>='2' && str[0]<='9')
                rankM[str[0]-'0']++;
            else if(str[0]=='T')
                rankM[10]++;
            else if(str[0]=='J')
                rankM[11]++;
            else if(str[0]=='Q')
                rankM[12]++;
            else if(str[0]=='K')
                rankM[13]++;
            else
                rankM[1]++;

            if(str[1]=='S')
                suits[0]++;
            else if(str[1]=='H')
                suits[1]++;
            else if(str[1]=='D')
                suits[2]++;
            else
                suits[3]++;
        }
        if(royalFlush(rankM,suits))
            cout << "royal flush\n";
        else if(straightFlush(rankM,suits))
            cout << "straight flush\n";
        else if(fourOfAKind(rankM))
            cout << "four of a kind\n";
        else if(fullHouse(rankM))
            cout << "full house\n";
        else if(flush(rankM,suits))
            cout << "flush\n";
        else if(straight(rankM))
            cout << "straight\n";
        else if(threeOfAKind(rankM))
            cout<< "three of a kind\n";
        else if(twoPairs(rankM))
            cout << "two pairs\n";
        else if(pairs(rankM))
            cout << "pair\n";
        else
            cout << "high card\n";
    }

}
