#include<bits/stdc++.h>
using namespace std;
int main() {
    ios_base::sync_with_stdio(0);
    int t;cin>>t;
    while(t--) {
        string str;
        char a1[] = {'A','2','3','4','5','6','7','8','9','T','J','Q','K'};    //array of ranks
        char a2[] = {'S','H','D','C'};           //array of suits
        int r[13] = {0}; int s[4] = {0};         //r = rank, s = suit
        for(int i=0;i<5;i++) {
            cin>>str;
            for(int j=0;j<13;j++) if(a1[j]==str[0]) r[j]++;
            for(int j=0;j<4;j++)  if(a2[j]==str[1]) s[j]++;
        }
        //for(int j=0;j<13;j++)  cout<<r[j]<<" "; cout<<endl;
        //for(int j=0;j<4;j++)   cout<<s[j]<<" ";cout<<endl;
        //use of count function --> count(first, last, val) where last is exclusive, val is the value to be counted
        //if 5 cards of same suit are found--> royal flush or straight flush or flush
        if(count(s,s+4,5)==1) {
            if(r[0]==1 && r[9]==1 && r[10]==1 && r[11]==1 && r[12]==1) {
                cout<<"royal flush"<<endl; continue;
            }
            if(r[9]==1 && r[10]==1 && r[11]==1 && r[12]==1 && r[0]==1) {        //ace can be used as highest card
                cout<<"straight flush"<<endl; continue;
            }
            int k=0;
            for(int i=0;i<=8;i++) {
                k+=1;
                if(r[i]==1 && r[i+1]==1 && r[i+2]==1 && r[i+3]==1 &&r[i+4]==1) {
                    cout<<"straight flush"<<endl; break;
                }
            }
            if(k==9)
                cout<<"flush"<<endl;
        }
        //for remaining conditions
        else {
            if(count(r,r+13,4)==1) {
                cout<<"four of a kind"<<endl; continue;
            }
            if(count(r,r+13,3)==1 && count(r,r+13,2)==1) {
                cout<<"full house"<<endl; continue;
            }
            int m=0;
            for(int i=0;i<=8;i++) {
                m+=1;
                if(r[i]==1 && r[i+1]==1 && r[i+2]==1 && r[i+3]==1 &&r[i+4]==1) {
                    cout<<"straight"<<endl; break;
                }
            }
            if(r[9]==1 && r[10]==1 && r[11]==1 && r[12]==1 && r[0]==1) {        //ace can be used as highest card
                cout<<"straight"<<endl; continue;
            }
            if(count(r,r+13,3)==1) {
                cout<<"three of a kind"<<endl; continue;
            }
            if(count(r,r+13,2)==2) {
                cout<<"two pairs"<<endl; continue;
            }
            if(count(r,r+13,2)==1){
                cout<<"pair"<<endl; continue;
            }
            if(m==9)
            cout<<"high card"<<endl;
        }
    }
    return 0;
}
