#include<iostream>
using namespace std;

#define NUMCARDS 5

char suite[NUMCARDS];
char card[NUMCARDS];
int sortedCards[NUMCARDS];

void debug()
{
    for ( int i = 0 ; i < NUMCARDS ; i++ )
        cout << sortedCards[i] << " " << endl;
}


void sort ( )
{
    int temp;
    for ( int i = 0 ; i < NUMCARDS; i++ )
    {
        if ( card[i] < 65 )
            sortedCards[i] = card[i]-48;
        else if ( card[i] == 'J' )
            sortedCards[i] = 11;
        else if ( card[i] == 'Q' )
            sortedCards[i] = 12;
        else if ( card[i] == 'K' )
            sortedCards[i] = 13;
        else if ( card[i] == 'T' )
            sortedCards[i] = 10;
        else 
            sortedCards[i] = 14;
    }

    for ( int i = 1 ; i < NUMCARDS; i++ )
    {
        int j = i;
        while ( j > 0 && sortedCards[j-1] > sortedCards[j] )
        {
            temp = sortedCards[j];
            sortedCards[j] = sortedCards[j-1];
            sortedCards[j-1] = temp;
            j--;
        }
    }
}

int checkRoyalFlush()
{
    for ( int i = 0 ; i < NUMCARDS-1 ; i++ )
        if ( suite[i] != suite[i+1] )
            return 0;

    for ( int i = 0 ; i < NUMCARDS ; i++ )
        if ( sortedCards[i] != 10+i )
            return 0;
    return 1;
}

int checkStraightFlush()
{
    for ( int i = 0 ; i < NUMCARDS-1 ; i++ )
        if ( suite[i] != suite[i+1] )
            return 0;

    int temp = sortedCards[0];
    
    if ( sortedCards[0] == 2 && sortedCards[1] == 3 && sortedCards[2] == 4 && sortedCards[3] == 5 && sortedCards[4] == 14 )
        return 1;

    for ( int i = 0 ; i < NUMCARDS ; i++ )
        if ( sortedCards[i] != temp+i )
            return 0;

    return 1;
}

int checkFour()
{
    if ( sortedCards[0] == sortedCards[1] && sortedCards[2] == sortedCards[3] && sortedCards[1] == sortedCards[2] )
        return 1;
    if ( sortedCards[1] == sortedCards[2] && sortedCards[3] == sortedCards[4] && sortedCards[2] == sortedCards[3] )
        return 1;
    return 0;
}

int checkFullHouse()
{
    if ( sortedCards[0] == sortedCards[1] && sortedCards[2] == sortedCards[3] && sortedCards[3] == sortedCards[4] )
        return 1;
    if ( sortedCards[0] == sortedCards[1] && sortedCards[1] == sortedCards[2] && sortedCards[3] == sortedCards[4] )
        return 1;
    return 0;
}

int checkSimpleFlush()
{
    for ( int i = 0 ; i < NUMCARDS-1 ; i++ )
        if ( suite[i] != suite[i+1] )
            return 0;
    return 1;
}

int checkStraight()
{
    int temp = sortedCards[0];
    
    if ( sortedCards[0] == 2 && sortedCards[1] == 3 && sortedCards[2] == 4 && sortedCards[3] == 5 && sortedCards[4] == 14 )
        return 1;

    for ( int i = 0 ; i < NUMCARDS ; i++ )
        if ( sortedCards[i] != temp+i )
            return 0;

    return 1;
}

int checkThree()
{
    if ( sortedCards[0] == sortedCards[1] && sortedCards[1] == sortedCards[2] )
        return 1;
    if ( sortedCards[1] == sortedCards[2] && sortedCards[2] == sortedCards[3] )
        return 1;
    if ( sortedCards[2] == sortedCards[3] && sortedCards[3] == sortedCards[4] )
        return 1;
    return 0;
}

int checkTwoPair()
{
    if ( sortedCards[0] == sortedCards[1] && ( sortedCards[2] == sortedCards[3] || sortedCards[3] == sortedCards[4] ) )
        return 1;
    if ( sortedCards[1] == sortedCards[2] && sortedCards[3] == sortedCards[4] )
        return 1;
    return 0;
}

int checkPair()
{
    for ( int i = 0 ; i < NUMCARDS-1 ; i++ )
        if ( sortedCards[i] == sortedCards[i+1] )
            return 1;
    return 0;
}

int getHand()
{
    int (*foo[9])();
    sort();

    foo[0] = checkRoyalFlush;
    foo[1] = checkStraightFlush;
    foo[2] = checkFour;
    foo[3] = checkFullHouse;
    foo[4] = checkSimpleFlush;
    foo[5] = checkStraight;
    foo[6] = checkThree;
    foo[7] = checkTwoPair;
    foo[8] = checkPair;

    int response = 0;
    for ( int i = 0 ; i < 9 ; i++ )
    {
        response = foo[i]();
        if ( response )
            return i;
    }
    return 9;
}

int main()
{
    int t;
    cin >> t;
    while ( t-- )
    {

        for ( int i = 0 ; i < NUMCARDS ; i++ )
        {
            cin >> card[i];
            cin >> suite[i];
        }

        int result = getHand();
        switch(result)
        {
            case 0:
                cout << "royal flush" << endl;
                break;
            case 1:
                cout << "straight flush" << endl;
                break;
            case 2:
                cout << "four of a kind" << endl;
                break;
            case 3:
                cout << "full house" << endl;
                break;
            case 4:
                cout << "flush" << endl;
                break;
            case 5:
                cout << "straight" << endl;
                break;
            case 6:
                cout << "three of a kind" << endl;
                break;
            case 7:
                cout << "two pairs" << endl;
                break;
            case 8:
                cout << "pair" << endl;
                break;
            case 9:
                cout << "high card" << endl;
                break;
        }
    }
}
