// Name:- Kunal Sheth

// Problem:- Poker

// Link:- http://www.codechef.com/problems/POKER/

// Site:- CodeChef



//header files

#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
#include<cstring>
using namespace std;

//end of header files


//definitions

#define MOD 1000000007
#define llu long long unsigned
#define lld long long
#define ld long

//end of definitions


//fast input

int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lld scan_lld()    {int ip=getchar_unlocked(),flag=1;lld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scan_llu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}

//end of fast input

//fast output

//no line break
void print_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void print_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void print_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void print_llu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}

//new line
void println_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void println_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
void println_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
void println_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}

//special char
char sp;
void printsp_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void printsp_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
void printsp_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
void printsp_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}

//end of fast output


//extra functions

//end of extra fnctions


//main

int main()
{
    int t=scan_d();
    while(t--)
    {
		char str[20],rank[5],suit[5];
		int c[15],sum=0,c2ok=0,c3ok=0,sc=0,dc=0,hc=0,cc=0,num[5];
		gets(str);
		for(int i=0;i<15;i++)
			c[i]=0;
		//cout<<"-----------"<<str<<endl;
        rank[0]=str[0];
        rank[1]=str[3];
        rank[2]=str[6];
        rank[3]=str[9];
        rank[4]=str[12];
        suit[0]=str[1];
        suit[1]=str[4];
        suit[2]=str[7];
        suit[3]=str[10];
        suit[4]=str[13];
        for(int i=0;i<5;i++)
        {
        	switch(rank[i])
			{
				case 'A':
				{
					c[14]++;
                    num[i]=1;
                    break;
				}
				case 'K':
				{
					c[13]++;
                    num[i]=13;
                    break;
				}
				case 'Q':
				{
					c[12]++;
                    num[i]=12;
                    break;
				}
				case 'J':
				{
					c[11]++;
                    num[i]=11;
                    break;
				}
				case 'T':
				{
					c[10]++;
                    num[i]=10;
                    break;
				}
				case '9':
				{
					c[9]++;
                    num[i]=9;
                    break;
				}
				case '8':
				{
					c[8]++;
                    num[i]=8;
                    break;
				}
				case '7':
				{
					c[7]++;
                    num[i]=7;
                    break;
				}
				case '6':
				{
					c[6]++;
                    num[i]=6;
                    break;
				}
				case '5':
				{
					c[5]++;
                    num[i]=5;
                    break;
				}
				case '4':
				{
					c[4]++;
                    num[i]=4;
                    break;
				}
				case '3':
				{
					c[3]++;
                    num[i]=3;
                    break;
				}
				case '2':
				{
					c[2]++;
                    num[i]=2;
                    break;
				}
			}
			switch(suit[i])
			{
				case 'H':
				{
					hc++;
                    break;
				}
				case 'D':
				{
					dc++;
                    break;
				}
				case 'S':
				{
					sc++;
                    break;
				}
				case 'C':
				{
					cc++;
                    break;
				}
			}
			sum+=num[i];
        }
        sort(num,num+5);
        if(sc==5||hc==5||dc==5||cc==5)
        {
        	if(sum==47)
        	{
        		printf("royal flush\n");
        		continue;
        	}
        	else if((num[1]-num[0]==1)&&(num[2]-num[1]==1)&&(num[3]-num[2]==1)&&(num[4]-num[3]==1))
        	{
        		printf("straight flush\n");
        		continue;
        	}
        	else
        	{
        		printf("flush\n");
        		continue;
        	}
        }
        else if((num[1]-num[0]==1)&&(num[2]-num[1]==1)&&(num[3]-num[2]==1)&&(num[4]-num[3]==1))
        {
        	printf("straight\n");
        	continue;
        }
        else
        {
        	bool f4=0;
        	for(int i=2;i<15;i++)
        	{
        		if(c[i]==4)
        		{
        			printf("four of a kind\n");
        			f4=1;
        			break;
        		}
        		else if(c[i]==3)
        			c3ok++;
        		else if(c[i]==2)
        			c2ok++;
        	//	cout<<c[i]<<" ";
        	}
        	//cout<<endl<<"++++"<<c3ok<<" "<<c2ok<<endl;
        	if(f4)
        		continue;
        	else if(c3ok&&c2ok)
        	{
        		printf("full house\n");
        		continue;
        	}
        	else if(c3ok)
        	{
        		printf("three of a kind\n");
        		continue;
        	}
        	else if(c2ok==2)
        	{
        		printf("two pairs\n");
        		continue;
        	}
        	else if(c2ok)
        	{
        		printf("pair\n");
        		continue;
        	}
        	else
        	{
        		printf("high card\n");
        		continue;
        	}
        }
    }
    return 0;
}

//end of main