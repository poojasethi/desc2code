#pragma warning(disable:4786)
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<stack>
#include<assert.h>
using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define S(X) ( (X) * (X) )
#define SZ(V) (int )V.size()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define ALL(V) V.begin(), V.end()

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;

#define IN(A, B, C) assert( B <= A && A <= C)

typedef long long int LL;
//typedef __int64 LL;

LL gcd(LL a, LL b)
{
	if(a % b == 0) return b;
	return gcd(b, a%b);
}

int main()
{
	int T;
	LL n, hor, lob, g, i;

	scanf("%d", &T);
	IN(T, 1, 1000);
	while(T--)
	{
		scanf("%lld", &n);
		IN(n, 1, 1000000000);


		hor = n*n;
		lob = 0;

		for(i = 1; i*i <= n; i++)
			if(i > n/(i+1))
			{
				lob += i*((n/i) - n/(i+1));
			}
			else
			{
				lob += n/i;
				lob += i*((n/i) - n/(i+1));
			}

		g = gcd(lob, hor);

		lob /= g;
		hor /= g;

		printf("%lld/%lld\n", lob, hor);
	}

	return 0;
}
