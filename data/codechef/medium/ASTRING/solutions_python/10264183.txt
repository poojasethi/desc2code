import heapq
    
def solve(s, k):
    res = []
    start_index = -1
    end_index = len(s) - k
    #choose the staring window
    h = [(y, x) for x, y in enumerate(s[:end_index])]
    heapq.heapify(h)

    for _ in range(k):
        # enlarge the window by increamenting one (character, pos_of_haracter) from right
        heapq.heappush(h, (s[end_index], end_index))
        end_index += 1
        # get the min from s[start_index : end_index] by using heappop (O(logN)) 
        while True:
            val, ind = heapq.heappop(h)
            if ind > start_index: break
        # save the min, shorten the window
        res.append(val)
        start_index = ind
    return ''.join(res)

def astring():
    T = int(raw_input())
    for t in range(T):
        s = raw_input()
        k = int(raw_input())
        print solve(s,k)

if __name__ == "__main__":
  astring()