#include<bits/stdc++.h>
#define FOR(i,a,n) for(int i=a;i<n;i++)
#define si(x) scanf("%d",&x)
#define sll(x) scanf("%lld",&x)
#define ss(x) scanf("%s",x)
#define pi(x) printf("%d\n",x)
#define pll(x) printf("%lld\n",x)
#define ps(x) printf("%s\n",ch)
#define all(x) (x).begin(),(x).end()
#define M 1000000003
#define ll long long
#define mp make_pair
#define pb push_back
#define fr first
#define se second
using namespace std;
char arr[100069];
struct segment
{
    int mini,idx;
}tree[400000];
segment build(int in,int l,int r)
{
    if(l==r)
    {
        tree[in].mini=arr[l];
        tree[in].idx=l;
        return tree[in];
    }
    int m=(l+r)/2;
    segment left=build(in*2,l,m);
    segment right=build(in*2+1,m+1,r);
    if(left.mini<=right.mini)
    {
        tree[in]=left;
    }
    else
        tree[in]=right;
    return tree[in];
}
segment query(int in,int l,int r,int x,int y)
{
   // printf("%d %d %d %d\n",l,r,x,y);
    if(l==x&&r==y)
        return tree[in];
    int mid=(l+r)/2;
    if(x>mid)
        return query(in*2+1,mid+1,r,x,y);
    if(y<=mid)
        return query(in*2,l,mid,x,y);
    segment left=query(in*2,l,mid,x,mid);
    segment right=query(in*2+1,mid+1,r,mid+1,y);
    segment ans;
    if(left.mini<=right.mini)
    {
        ans=left;
    }
    else
        ans=right;
    return ans;
}
int main()
{
    int t;
    si(t);
    while(t--)
    {
        int a;
        cin>>(arr+1)>>a;
        int n=strlen(arr+1),st=1;
        build(1,1,n);
        string ans="";
        FOR(i,1,a+1)
        {
            segment x=query(1,1,n,st,n-a+i);
            ans+=(char)x.mini;
            st=x.idx+1;
        }
        cout<<ans<<"\n";
    }
    return 0;
}
