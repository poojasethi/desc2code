#include <iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<cstring>
#include<map>
#include<queue>
#include<set>
#include<math.h>
#include<stack>
#include<cstdlib>

using namespace std;

struct st
{
    int val;
    int flag;
}t[4*1000005];

string s;

void refresh(int node,int i,int j)
{
    if(t[node].flag==1)
    {
        t[node].val=j-i+1-t[node].val;
        t[2*node].flag=(t[2*node].flag+t[node].flag)%2;
        t[2*node+1].flag=(t[2*node+1].flag+t[node].flag)%2;
        t[node].flag=0;
    }
    return;
}

void build(int node,int i,int j)
{
    if(i==j)
    {
        if(s[i]=='R')
        {
            t[node].val=1;
            t[node].flag=0;
        }
        else if(s[i]=='G')
        {
            t[node].val=0;
            t[node].flag=0;
        }
        return;
    }
    int mid;
    mid=(i+j)/2;
    build(2*node,i,mid);
    build(2*node+1,mid+1,j);
    t[node].val=t[2*node].val+t[2*node+1].val;
    t[node].flag=t[2*node].flag+t[2*node+1].flag;
    return;
}

int query(int node,int i,int j,int k)
{
    if(i==j&&i==k)
    {
        refresh(node,i,j);
        return t[node].val;
    }
    refresh(node,i,j);
    int mid;
    mid=(i+j)/2;
    if(k<=mid)
        return query(2*node,i,mid,k);
    else if(k>mid)
        return query(2*node+1,mid+1,j,k);
}

void update(int node,int i,int j,int a,int b)
{
    int mid;
    mid=(i+j)/2;
    if(i>b||j<a)
    {
        refresh(node,i,j);
        return;
    }
    if(i>=a&&j<=b)
    {
        t[node].flag++;
        t[node].flag=t[node].flag%2;
        refresh(node,i,j);
        return;
    }
    refresh(node,i,j);
    update(2*node,i,mid,a,b);
    update(2*node+1,mid+1,j,a,b);
    t[node].val=t[2*node].val+t[2*node+1].val;
    return;
}

int main()
{
    int test,n,k,i,ans;
    scanf("%d",&test);
    while(test--)
    {
        scanf("%d%d",&n,&k);
        cin>>s;
        ans=0;
        build(1,0,n-1);
        int l;
        for(i=0;i<n;i++)
        {
            if(query(1,0,n-1,i)>0)
            {
                ans++;
                l=i+k-1;
                l=min(l,n-1);
                update(1,0,n-1,i,l);
            }
        }
        printf("%d\n",ans);
    }
    return 0;
}
