#include <bits/stdc++.h>

using namespace std;
int T[10000004];
string s;

void update(int node,int l,int r,int lr,int rr)
{
    if(l>=lr&&r<=rr) {
        T[node]=(T[node]+1)%2;
        return ;
    }
    int mid=(l+r)/2;
    if(mid>=rr) update(2*node,l,mid,lr,rr);
    else if(lr>mid) update(2*node+1,mid+1,r,lr,rr);
    else {
        update(2*node,l,mid,lr,rr);
        update(2*node+1,mid+1,r,lr,rr);
    }
}
int read(int node,int l,int r,int id)
{
    if(l==r&&l==id) {
        return T[node];
    }
    int mid=(l+r)/2;
    T[2*node]=(T[2*node]+T[node])%2;
    T[2*node+1]=(T[2*node+1]+T[node])%2;
    T[node]=0;
    if(id>mid) read(2*node+1,mid+1,r,id);
    else read(2*node,l,mid,id);
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        memset(T,0,sizeof(T));
       int n ,k,i,cnt=0;
       cin>>n>>k;
       string s;
       cin>>s;
       for(i=0;i+k-1<n;i++)
       {
           if(s[i]=='R'&&read(1,0,n-1,i)==0) {update(1,0,n-1,i,i+k-1);cnt++;}
           else if(s[i]=='G'&&read(1,0,n-1,i)==1) {update(1,0,n-1,i,i+k-1); cnt++;}
       }
       for(;i<n;i++)
       {
           if(s[i]=='R'&&read(1,0,n-1,i)==0) {
            update(1,0,n-1,i,n-1);cnt++;
           // cout<<i<<endl;
           }
           else if(s[i]=='G'&&read(1,0,n-1,i)==1) {
            update(1,0,n-1,i,n-1);cnt++;
            //cout<<i<<endl;
           }
       }
       cout<<cnt<<endl;
    }
    return 0;
}
