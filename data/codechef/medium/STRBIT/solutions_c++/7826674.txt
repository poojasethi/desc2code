#include<iostream>
#include<cstdio>
using namespace std;
struct node
{
    int sum;
    int lazy;
    
}tree[1<<18];
void build_tree(int i,int a,int b)
{
    if(a>b)
        return ;
    if(a==b)
    {
       tree[i].sum=0;
       tree[i].lazy=0;
      // printf("tree[%d].sum=%d\n",i,tree[i].sum);
       return ;
    }
    build_tree(i*2,a,(a+b)/2);
    build_tree(i*2+1,(a+b)/2+1,b);
    tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;
   //  printf("tree[%d].sum=%d\n",i,tree[i].sum);
    tree[i].lazy=0;
}
void update(int i,int a,int b,int l,int r,int v)
{
    if(tree[i].lazy!=0)
    {
        tree[i].sum+=tree[i].lazy;
        if(a!=b)
        {
            tree[i*2].lazy+=tree[i].lazy;
            tree[i*2+1].lazy+=tree[i].lazy;
            
        }
        tree[i].lazy=0;
    }
    if(a>r||b<l)
        return ;
    if(l<=a&&r>=b)
    {
        tree[i].sum+=v;
        if(a!=b)
        {
            tree[i*2].lazy+=v;
            tree[i*2+1].lazy+=v;
            
        }
        return ;
    }
    update(i*2,a,(a+b)/2,l,r,v);
    update(i*2+1,(a+b)/2+1,b,l,r,v);
    tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;
    
    
    
    
}
int query(int i,int a,int b,int l,int r)
{   
    if(tree[i].lazy!=0)
    {
        tree[i].sum+=tree[i].lazy;
        if(a!=b)
        {
            tree[i*2].lazy+=tree[i].lazy;
            tree[i*2+1].lazy+=tree[i].lazy;
            
        }
        tree[i].lazy=0;
    }
    if(a>r||b<l)
        return -1;
    if(l<=a&&r>=b)
    {
        return tree[i].sum;
    }
   int q1= query(i*2,a,(a+b)/2,l,r);
   int q2=query(i*2+1,(a+b)/2+1,b,l,r);
   if(q1==-1)
    return q2;
   else
    return q1;
   
   
}

int main()
{
    int t,n,k,sum,x,i;
    char s[100005];
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&n,&k);
        scanf("%s",s);
        build_tree(1,0,n-1);
        sum=0;
        for(i=0;i<n;i++)
        {
              if(s[i]=='G')
              {
                  x=query(1,0,n-1,i,i);
                  if(x%2==0)
                  {
                      continue;
                  }
                  else
                  {
                      update(1,0,n-1,i,min(n,i+k-1),1);
                      sum+=1;
                  }
              }
            else
              {
                  x=query(1,0,n-1,i,i);
                  if(x%2!=0)
                  {
                      continue;
                  }
                  else
                  {
                      update(1,0,n-1,i,min(n,i+k-1),1);
                      sum+=1;
                  }
              }
        }
        printf("%d\n",sum);
        
    }
    return 0;
}
