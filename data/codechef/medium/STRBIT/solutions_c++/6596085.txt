#include<bits/stdc++.h>
using namespace std;

#define p(n) printf("%d\n",n)
#define r(n) scanf("%d",&n)
#define rs(n) scanf("%s",n)
#define ps(n) printf("%s\n",n)
#define P printf
#define R scanf
#define F first
#define S second
#define fr(i,a,b) for(int i=(int)a; i <= (int)b; i++)
#define frr(i,a,b) for(int i=(int)a; i >= (int)b; i--)
#define ll long long int
#define us(x) unsigned x
#define pb push_back
#define vi vector<int>
#define ve(x) vector<x>
#define si set<int>
#define itv vi :: iterator
#define ixv(x) vector<x> :: iterator
#define its si :: iterator
#define ixs(x) set<x> :: iterator
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define fill(s,v) memset(s,v,sizeof(s))
#define all(s) s.begin(),s.end()
#define fs(i,s) for(its i = s.begin(); i != s.end(); i++)
#define fv(i,v) for(itv i = v.begin(); i != v.end(); i++)
#define INF INT_MAX
#define MOD 1000000007
#define ii pair<int,int>
#define pa(x) pair<x,x>
#define mp make_pair

ll ipow(ll base, ll exp)
{
    ll result = 1;
    while (exp)
    {
        if (exp & 1)
            {result *= base;result %= MOD;}
        exp >>= 1;
        base *= base;
        base %= MOD;
    }
    return result;
}

main()
{
    int t;
    int n,k;
    char str[100010];
    int dp[100001];
    r(t);
    while(t--)
    {
        r(n);r(k);
        fill(dp,0);
        rs(str);
        int ans = 0;
        if(str[0] == 'R') ans = dp[0] = 1;
        fr(i,1,n)
        {
            int num = dp[i-1];
            if(i >= k)
                num -= dp[i-k];
            if(num&1)
            {
                if(str[i] == 'G')
                {
                    ans++;
                   // P("at %d\n",i);
                    dp[i] = dp[i-1] + 1;
                }
                else
                {
                    dp[i] = dp[i-1];
                }
            }
            else
            {
                if(str[i] == 'R')
                {
                    ans++;
                    //P("at %d\n",i);
                    dp[i] = dp[i-1] + 1;
                }
                else
                {
                    dp[i] = dp[i-1];
                }
            }
        }
        p(ans);

    }
    return 0;
}
