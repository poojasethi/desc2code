// from editorial
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

int max_level(vector<vector<int> >& nums, int P)
{
  vector<vector<vector<vector<int> > > > buffer;
  buffer.resize(nums.size());
  for (size_t row = 0; row < nums.size(); row++) {
    buffer[row].resize(nums[row].size());
    for (size_t col = 0; col < nums[row].size(); col++) {
      buffer[row][col].resize(4);
      for (size_t s = 0; s < 4; s++) {	
	buffer[row][col][s].resize(10, 0);
      }
    }
  }
  
  for (size_t row = 0; row < nums.size(); row++) {
    for (size_t col = 0; col < nums[row].size(); col++) {
      for (size_t s = 0; s < 4; s++) {
	int val = (nums[row][col] + ((s+1)/2) * P) % 10;
	for (int v = 9; v >= 0; v--) {
	  if (v < 9) {
	    buffer[row][col][s][v] = max(buffer[row][col][s][v], buffer[row][col][s][v+1]);
	  }
	  if (row > 0) {
	    buffer[row][col][s][v] = max(buffer[row][col][s][v], buffer[row-1][col][s][v]);
	    buffer[row][col][s][v] = max(buffer[row][col][s][v], buffer[row-1][col][(s+2)%4][v]);
	  }
	  if (col > 0) {
	    buffer[row][col][s][v] = max(buffer[row][col][s][v], buffer[row][col-1][s][v]);
	    buffer[row][col][s][v] = max(buffer[row][col][s][v], buffer[row][col-1][s%2==0?s+1:s-1][v]);
	  }
	  if (val == v)
	    ++buffer[row][col][s][v];
	}
	
	
      }
    }
  }
  int max_level = 0;

  for (size_t s = 0; s < 4; s++) {
    int l =  buffer[buffer.size()-1][buffer[buffer.size()-1].size()-1][s][0];
    max_level = max_level > l ? max_level : l;
  }

  return max_level;
}

int main(int argc, char* argv[])
{
  int nCase;
  cin >> nCase;
  for (int iCase = 0; iCase < nCase; iCase++) {
    int N, M;
    cin >> N >> M;
    vector<vector<int> > nums;
    for (int i = 0; i < N; i++) {
      vector<int> num_row;
      for (int j = 0; j < M; j++) {
	char c;
	cin >> c;
	num_row.push_back(c - '0');
      }
      nums.push_back(num_row);
    }
    int bestresult = 0;

    for (int P = 1; P <= 9; P++) {
      int result = max_level(nums, P);
      if (bestresult < result) {
	bestresult = result;
      }
      if (bestresult == M+N-1) {
	break;
      }
    }
    cout << bestresult << endl;
  }
  return 0;
}
