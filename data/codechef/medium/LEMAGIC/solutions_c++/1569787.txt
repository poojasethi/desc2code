
#include<algorithm>
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<climits>
#include<fstream>
#include<cmath>
#include<cctype>
#include<cstdio>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cmath>
#include<map>
#include<set>
using namespace std;

#define df(i,a,b) for(typeof(b) i=a;i>=b;i--)
#define f(i,a,b) for(typeof(b) i=a;i<=b;i++)
#define fill(x,a) memset(x,a,sizeof(x))
#define Clear(x) memset(x,0,sizeof(x))
#define inf 2147000000
#define pb push_back
#define mp make_pair
#define Y second
#define X first

const double pi     =   acos(-1.0);
const double eps    =   1e-8;

typedef unsigned long long int ull;
typedef long long int ll;
typedef vector<string> VS;
typedef pair<int,int> ii;
typedef vector<int> VI;

int n,m,P;
int dp[105][105][12][2][2],a[105][105];

int call(int x,int y,int value,int op1,int op2)
{  int &ans=dp[x][y][value][op1][op2];
if(ans==-1)
{
     if(x>=n || y>=m)
        return 0;
    int curr=(a[x][y]+op1*P+op2*P)%10;
    ans=max(ans,call(x+1,y,value,0,op2));
    ans=max(ans,call(x+1,y,value,1,op2));
    ans=max(ans,call(x,y+1,value,op1,0));
    ans=max(ans,call(x,y+1,value,op1,1));

    if(curr<=value)
    {
        ans=max(ans,1+call(x+1,y,curr,0,op2));
        ans=max(ans,1+call(x+1,y,curr,1,op2));
        ans=max(ans,1+call(x,y+1,curr,op1,0));
        ans=max(ans,1+call(x,y+1,curr,op1,1));
    }
}
    return ans;
}

int main()
{
  int test;
  scanf("%d",&test);
  while(test--)
{
   scanf("%d %d",&n,&m);
   string str;
   for(int i=0;i<n;i++)
  {
     cin>>str;
     for(int j=0;j<m;j++)
     {
         a[i][j]=str[j]-48;
     }
  }
   int anss=0;
  for(int i=0;i<=9;i++){
    P=i;
    memset(dp,-1,sizeof dp);
    anss=max(anss,call(0,0,9,0,0));
    anss=max(anss,call(0,0,9,0,1));
    anss=max(anss,call(0,0,9,1,0));
    anss=max(anss,call(0,0,9,1,1));
  }
  printf("%d\n",anss);
}
  return 0;
}
