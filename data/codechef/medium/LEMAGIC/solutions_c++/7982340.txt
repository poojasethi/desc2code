#include <bits/stdc++.h>
#define sz 102
using namespace std;

int dp[sz][sz][11][4];
int n, m, arr[sz][sz];

void take_input() {
	scanf("%d%d", &n, &m);
	for(int i=1;i<=n;i++) {
		char ch[sz];
		scanf(" %s", ch);
		for(int j=1;j<=m;j++) {
			arr[i][j] = (ch[j-1]-'0');
		}
	}
}

void solveL(int i, int j) {
	if(j > 1) {
		for(int num=0; num <= 9; num++) {
			// none
			dp[i][j][num][0] = max(dp[i][j][num][0], dp[i][j-1][num][0]);
			dp[i][j][num][0] = max(dp[i][j][num][0], dp[i][j-1][num][2]);
			// row
			dp[i][j][num][1] = max(dp[i][j][num][1], dp[i][j-1][num][1]);
			dp[i][j][num][1] = max(dp[i][j][num][1], dp[i][j-1][num][3]);
			// col
			dp[i][j][num][2] = max(dp[i][j][num][2], dp[i][j-1][num][0]);
			dp[i][j][num][2] = max(dp[i][j][num][2], dp[i][j-1][num][2]);
			// both
			dp[i][j][num][3] = max(dp[i][j][num][3], dp[i][j-1][num][1]);
			dp[i][j][num][3] = max(dp[i][j][num][3], dp[i][j-1][num][3]);
		}
	}
}

void solveD(int i, int j) {
	if(i > 1 && j > 1) {
		for(int num=0; num <= 9; num++) {
			for(int temp = 0; temp <= 3; temp++) {
				dp[i][j][num][temp] = max(dp[i][j][num][temp], dp[i-1][j-1][num][0]);
				dp[i][j][num][temp] = max(dp[i][j][num][temp], dp[i-1][j-1][num][1]);
				dp[i][j][num][temp] = max(dp[i][j][num][temp], dp[i-1][j-1][num][2]);
				dp[i][j][num][temp] = max(dp[i][j][num][temp], dp[i-1][j-1][num][3]);
			}
		}
	}
}

void solveU(int i, int j) {
	if(i > 1) {
		for(int num=0; num <= 9; num++) {
			// none included
			dp[i][j][num][0] = max(dp[i][j][num][0], dp[i-1][j][num][0]);
			dp[i][j][num][0] = max(dp[i][j][num][0], dp[i-1][j][num][1]);
			// row included
			dp[i][j][num][1] = max(dp[i][j][num][1], dp[i-1][j][num][0]);
			dp[i][j][num][1] = max(dp[i][j][num][1], dp[i-1][j][num][1]);
			// col included
			dp[i][j][num][2] = max(dp[i][j][num][2], dp[i-1][j][num][2]);
			dp[i][j][num][2] = max(dp[i][j][num][2], dp[i-1][j][num][3]);
			// both included
			dp[i][j][num][3] = max(dp[i][j][num][3], dp[i-1][j][num][2]);
			dp[i][j][num][3] = max(dp[i][j][num][3], dp[i-1][j][num][3]);
		}
	}
}

int solve() {
	int ret = 0;
	for(int p=1;p<=9;p++) {
		memset(dp, 0, sizeof dp);
		for(int i=1;i<=n;i++) {
			for(int j=1;j<=m;j++) {
				if(!(i == 1 && j == 1)) {
					solveU(i, j);
					solveL(i, j);
					solveD(i, j);
				}
				for(int num=0; num <= 3; num++) {
					int mx = 0;
					if(num == 0) {
						for(int nn=9;nn>=0;nn--) {
							mx = max(dp[i][j][nn][num], mx);
							if(nn == arr[i][j]) {
								dp[i][j][nn][num] = mx + 1;
								break;
							}
						}
					} else if(num == 1 || num == 2) {
						for(int nn=9;nn>=0;nn--) {
							mx = max(dp[i][j][nn][num], mx);
							if(nn == ((arr[i][j]+p)%10)) {
								dp[i][j][nn][num] = mx + 1;
								break;
							}
						}
					} else {
						for(int nn=9;nn>=0;nn--) {
							mx = max(dp[i][j][nn][num], mx);
							if(nn == ((arr[i][j]+p+p)%10)) {
								dp[i][j][nn][num] = mx + 1;
								break;
							}
						}
					}
				}
			}
		}
		for(int i=0;i<=9;i++) {
			for(int j=0;j<=3;j++) {
				ret = max(ret, dp[n][m][i][j]);
			}
		}
	}
	return ret;
}

int main() {
	int t;
	cin>>t;
	while(t--) {
		take_input();
		printf("%d\n", solve());
	}
	return 0;
}