#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>
 
#define PB push_back
#define MP make_pair
# define rep(i,a,b) for(int i=a;i<=b;i++)
# define ren(i,a,b) for(int i=a;i>=b;i--)
using namespace std;
 
typedef unsigned long long ull;
typedef long long ll;
 
 
void matmult(long long  a[][2],long long  b[][2],long long c[][2],long long  M)
{
    int i,j,k;
    for(i=0;i<2;i++)
    {
        for(j=0;j<2;j++)
        {
            c[i][j]=0;
            for(k=0;k<2;k++)
            {
                c[i][j]+=((a[i][k]%M)*(b[k][j])%M)%M;
                c[i][j]=c[i][j]%M;
            }
        }
    }
 
}
void matpow(long long Z[][2],int n,long long ans[][2],long long M)
 
{
 
    long long temp[2][2];
    
    ans[0][0]=1;
    ans[1][0]=0;
    ans[0][1]=0;
    ans[1][1]=1;
    int i,j;
    while(n>0)
    {
        if(n&1)
        {
            matmult(ans,Z,temp,M);
            for(i=0;i<2;i++)
                for(j=0;j<2;j++)
                    ans[i][j]=temp[i][j];
        }
        matmult(Z,Z,temp,M);
        for(i=0;i<2;i++)
            for(j=0;j<2;j++)
                Z[i][j]=temp[i][j];
 
 
        n=n/2;
    }
    return;
     
}
long long findFibonacci(long long n,long long M)
{
     
    long long fib;
    if(n>2)
    {
        long long int Z[2][2]={{1,1},{1,0}},result[2][2];
        matpow(Z,n-2,result,M);
        fib=result[0][0]*1 + result[0][1]*0;    
    }
    else
        fib=n-1;
         
    return fib;
}
 
ll bin(ll x){
  int ans = 0;
  while(x){
    ans += x%2;
    x/= 2;
  }
  return ans;
}
 
 
 
int main()
{ios_base::sync_with_stdio(false);
int t;
ll n,k;
cin>>t;
while(t--)
{cin>>n>>k;
ll x=findFibonacci(n+2,1000000007);
//cout<<x;
	if(bin(x)==k)
	cout<<"CORRECT\n";
	else
	cout<<"INCORRECT\n";
}
return 0;
} 