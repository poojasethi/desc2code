#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cassert>
#include <cstdlib>
#include <cmath>
#include <utility>
#include <algorithm>
#include <map>
#include <climits>
#include <string>
#include <cstring>
using namespace std;
 
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<ULL> VULL;
typedef vector<LL> VLL;
 
#define MX 1000000001
#define MN 1001
#define SZ 1000000
#define REP(i, s, e) for(int i = (s); i <= (e); ++i)
#define FOR(i, s, n) for(int i = (s); i < (n); ++i)
#define FORALL(i, n) for(int i = 0; i < (n); ++i)
#define ZERO(box) memset(box, 0, sizeof(box))
#define pushb push_back
#define MOD 1000000
 
int hash[MOD];
 
long long inline scan() {
    long long N = 0;
    char C;
    C = getchar_unlocked();
    while (C < '0' || C > '9') C = getchar_unlocked();
    while (C >= '0' && C <= '9') {
        N = (N<<3) + (N<<1) + C - '0';
        C = getchar_unlocked();
    }
    return N;
}
 
int main() {
	int t = scan();
	while (t--) {
		long long n = scan(), a = scan(), b = scan(), c = scan(), d = scan();
		LL s = d;
		ZERO(hash);
		stack<int> st;
		VI v;
		hash[s]++;
		st.push(s);
		int reci = n, count = 0, recs = MOD;
		FOR(i, 1, n) {
			s = ((a*((s)*(s)))+ (b*((s))) + c)%MOD;
			if (hash[s]) {
				reci = i;
				recs = s;
				break;
			}
			st.push(s);
			hash[s]++;
		}
		reci = n-reci;
		while (!st.empty()) {
			int top = st.top();
			st.pop();
			count++;
			v.pushb(top);
			if (top == recs) break;
		}
		int adder = 0, rem = 0;
		if (count) adder = reci/count, rem = reci%count;
		for(int i = v.size()-1; i >= 0; i--) {
			hash[v[i]] += adder;
			if (rem) {
				hash[v[i]]++;
				rem--;
			}
		}
		int sum = 0, sign = 1;
		for(int i = MOD-1; i >= 0; i--) {
			if (!hash[i]) continue;
			if (hash[i]%2 == 0) continue;
			sum += sign*i;
			sign *= -1;
		}
		printf ("%d\n", sum);
	}
	return 0;
}   
