#include <iostream>

using namespace std;

typedef long double Double;

struct Prices
{
    Double toPeppers(Double dollars)
    {
        return buyingRate * dollars;
    }
    
    Double toDollars(Double peppers)
    {
        return peppers / sellingRate;
    }
    
    int buyingRate;
    int sellingRate;
};

const int maxT = 1000, maxN = 1000;

class Problem
{
public:
    void read()
    {
        //cout << "read" << endl;
        cin >> N >> T >> D;
        
        prices = new Prices*[T+1];
        maxDollars = new Double*[T+1];
        maxPeppers = new Double*[T+1];
        for (int t = 0; t <= T; ++t)
        {
            prices[t] = new Prices[N];
            maxDollars[t] = new Double[N];
            maxPeppers[t] = new Double[N];
        }
        
        for (int k = 0; k < N; ++k)
        {
            for (int t = 0; t < T; ++t)
                cin >> prices[t][k].sellingRate >> prices[t][k].buyingRate;
        }
    }
    
    void solve()
    {
        //cout << "solve" << endl;
        init();
        for (int t = 1; t <= T; ++t)
            step(t);
        cout << getMaxDollars() << endl;
    }
    
private:
    void init()
    {
        //cout << "init" << endl;
        for (int i = 0; i < N; ++i)
        {
            maxDollars[0][i] = 0;
            maxPeppers[0][i] = D;
        }
    }
    
    void step(int t)
    {
        //cout << "step " << t << endl;
        
        for (int k = 0; k < N; ++k)
        {
            maxDollars[t][k] = max(
                safeGet(maxDollars, t-1, k-1),
                safeGet(maxDollars, t-1, k),
                safeGet(maxDollars, t-1, k+1),
                prices[t-1][k].toDollars(maxPeppers[t-1][k])
            );
            
            maxPeppers[t][k] = max(
                safeGet(maxPeppers, t-1, k-1),
                safeGet(maxPeppers, t-1, k),
                safeGet(maxPeppers, t-1, k+1),
                prices[t-1][k].toPeppers(maxDollars[t-1][k])
            );
            
            if (maxDollars[t][k] > 0.999999e18 || maxPeppers[t][k] > 0.999999e18)
                throw 12345;
        }
    }
    
    Double safeGet(Double **tab, int t, int k)
    {
        if (k < 0)
            return -1.0;
        if (k >= N)
            return -1.0;
        return tab[t][k];
    }
    
    Double max(Double a, Double b)
    {
        return a > b ? a : b;
    }
    
    Double max(Double a, Double b, Double c, Double d)
    {
        return max(max(a, b), max(c, d));
    }
    
    Double getMaxDollars()
    {
        //cout << "getMaxDollars" << endl;
        Double max = -1;
        for (int k = 0; k < N; ++k)
            if (max < maxPeppers[T][k])
                max = maxPeppers[T][k];
        return max;
    }
    
    int N, T;
    Double D;
    Prices **prices;
    Double **maxDollars;
    Double **maxPeppers;
};


int main()
{
    ios_base::sync_with_stdio(0);
    cout.precision(7);
    cout << fixed;
    Problem p;
    p.read();
    try {
        p.solve();
    } catch (...) {
        cout << "Quintillionnaire" << endl;
    }
    return 0;
}

