#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;
 
struct rat{
  long long n,d;
};
 
 
/*
P[i][j]=max P we can have with 1P starting at t=i and kiosk=j
A[i][j]=max P we can get with 1A starting at t=i and kiosk=j
B[i][j]=v => acquire v Ps for 1A
S[i][j]=v => give v Ps for 1A
*/
long long con= (long long) 1e18;
int main(){
  long long n,m,d;
  cin>>n>>m>>d;
  vector<vector<double> > S(m),B(m);
  for(int i=0;i<m;i++){
    S[i].resize(n); B[i].resize(n);
  }
  for(int i=0;i<n;i++){
    for(int j=0;j<2*m;j+=2){
      cin>>S[j/2][i]>>B[j/2][i];
    }
  }
  double conbyd=con/d;
  double k=1;
  vector<vector<double> > P(m+1),A(m+1);
  for(int i=0;i<=m;i++){
    P[i].resize(n,k); A[i].resize(n,0);
  }
  for(int i=m-1;i>=0;i--){
    for(int j=0;j<n;j++){
      P[i][j]=P[i+1][j];
      if(j+1<n)P[i][j]=max(P[i][j],P[i+1][j+1]);
      if(j-1>=0)P[i][j]=max(P[i][j],P[i+1][j-1]);
      P[i][j]=max(P[i][j],(A[i+1][j]/S[i][j]));
      if((P[i][j]) * d > con){
        cout<<"Quintillionnaire"<<endl; return 0;
      }
      A[i][j]=A[i+1][j];
      if(j+1<n)A[i][j]=max(A[i][j],A[i+1][j+1]);
      if(j-1>=0)A[i][j]=max(A[i][j],A[i+1][j-1]);
      A[i][j]=max(A[i][j],(B[i][j])*P[i+1][j]);
    }
  }
 
  double ans=d*P[0][0];
  for(int i=1;i<n;i++){
    if(d*P[0][i]>ans)ans=d*P[0][i];
  }
  //cout<<ans/k<<endl;
  printf("%.10f\n",ans);
  return 0;
}
