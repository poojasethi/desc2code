//Coder: Shailesh Borkar(shaileshpb)
#include <ctype.h>
#include <iostream>
#include <math.h>
#include <string.h>
#include <algorithm>
#include <stdlib.h>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <utility>
#include <assert.h>
#include <sstream>
#define MPI 3.141592653589793238462643
#define eps 1e-8
#define inf ((int)1e9)
#define pb push_back
#define mp make_pair
#define BUF 4096 // block size on my disk is 4KBs
char ibuf[BUF];
int ipt = BUF;
int read_uint()
{
    while (ipt < BUF && ibuf[ipt] < '0') ipt++;
    if (ipt == BUF)
    {
        fread(ibuf, 1, BUF, stdin);
        ipt = 0;
        while (ipt < BUF && ibuf[ipt] < '0')
            ipt++;
    }
    int n = 0;
    while (ipt < BUF && ibuf[ipt] >= '0')
    n = (n*10)+(ibuf[ipt++]-'0');
    if (ipt == BUF)
    {
        fread(ibuf, 1, BUF, stdin);
        ipt = 0;
        while (ipt < BUF && ibuf[ipt] >= '0')
            n = (n*10)+(ibuf[ipt++]-'0');
    }
    return n;
}
using namespace std;
int main()
{
    int n,k,data;
    multimap<int,int> meals;
    cin>>n>>k;
    for(int i=0;i<n;i++)
    {
            data=read_uint();
            meals.insert(pair<int,int>(data,i+1));
    }
    multimap<int,int>::iterator p;
    int counter=0;
    int index;
    p=meals.begin();
    while(p!=meals.end())
    {
        data=p->first;
        index=p->second;
        while(p->first==data)
        {
           if(p->second-index+1<=k)
           {
               if(p->first==data)
                {
                    p++;
                    if(p==meals.end())
                    {
                        p--;
                        if(p->second-index+1>k)
                            counter+=2;
                        else
                            counter++;
                        cout<<counter<<endl;
                        return 0;
                    }
                    if(p->first!=data)
                    {
                        counter++;
                    }
                }
           }
           else
           {
               counter++;
              // cout<<p->first<<" "<<p->second<<" "<<counter<<endl;
               index=p->second;
           }
        }
    }
    cout<<counter<<endl;
    return 0;
}

