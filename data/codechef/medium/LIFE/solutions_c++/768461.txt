#define DEBUG 0

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//compute t for the rest and check against the wraparound
int test(char s[51], char t[51], int n) {
  int i;
  for(i=3;i<n;i++)
    t[i]=(t[i-1]+t[i-2]+s[i-1])%2;
  return((t[n-1]+t[0]+t[1])%2==s[0] && (t[n-2]+t[n-1]+t[0])%2==s[n-1]);
}

void cpy(char f[51], char t[51], int n) {
  int i;
  for(i=0;i<n;i++)
    f[i]=t[i];
}

int main(void) {
  int tc, n;
  char s[51], t[51], f[51];
  long long st, i, limit, found;

  scanf("%d", &tc);
  while(tc--) {
    scanf("%s", &s);
    for(n=0;s[n]!='\0';n++)
      s[n]-='0';
    found=0;
    if(s[1]==0) { //even base number of ones
      t[0]=0;
      t[1]=0;
      t[2]=0;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
      t[0]=0;
      t[1]=1;
      t[2]=1;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
      t[0]=1;
      t[1]=0;
      t[2]=1;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
      t[0]=1;
      t[1]=1;
      t[2]=0;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
    } else { //odd number of ones
      t[0]=0;
      t[1]=0;
      t[2]=1;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
      t[0]=0;
      t[1]=1;
      t[2]=0;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
      t[0]=1;
      t[1]=0;
      t[2]=0;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
      t[0]=1;
      t[1]=1;
      t[2]=1;
      if(test(s, t, n))
        if(++found==1)
          cpy(f, t, n);
    }

    if(found>1)
      printf("Multiple solutions\n");
    else if(found==0)
      printf("No solution\n");
    else {
      for(i=0;i<n;i++)
        printf("%d", f[i]);
      printf("\n");
    }
  }
  return 0;
}
