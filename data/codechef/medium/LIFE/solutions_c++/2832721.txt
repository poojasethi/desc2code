#include <iostream>
#include <cstring>
using namespace std;

const int MAXN = 50;

/**
 * this function gets the original state from the current state after making some assumptions
 * and checks whether the assumptions are correct or not by checking the correctness of the 0th and (n-1)th bits
 */
bool ok(int n, bool *x, bool *y) {
  for (int i = 2; i < n; ++i) y[i] = y[i-2]^y[i-1]^x[i-1];
  // we can check whether the simulation is correct or wrong by checking for correctness of the 0th and (n-1)th bits
  // for 0th bit
  if (y[n-1]^y[0]^y[1]^x[0]) return false;
  // for (n-1)th bit
  if (y[n-2]^y[n-1]^y[0]^x[n-1]) return false;
  return true;
}

int main() {
  int t;
  char str[MAXN+1], ans[MAXN+1];
  bool x[MAXN], y[MAXN];
  cin >> t;
  while (t--) {
    cin >> str;
    int n = strlen(str);
    for (int i = 0; i < n; ++i) x[i] = (str[i] == '1');
    bool a,b;
    int cnt = 0;
    for (int i = 0; i < 4; ++i) {
      // assigning possible combinations to y[0] and y[1]
      y[0] = i>>1;
      y[1] = i&1;
      if (ok(n,x,y)) {
	if(cnt) {
	  ++cnt;
	  break;
	} else {
	  for(int j=0;j<n;++j) ans[j] = y[j]?'1':'0';
	  ans[n] = '\0';
	  ++cnt;
	}
      }
    }
    if (cnt == 0) cout << "No solution" << endl;
    else if (cnt > 1) cout << "Multiple solutions" << endl;
    else cout << ans << endl;
  }    
}