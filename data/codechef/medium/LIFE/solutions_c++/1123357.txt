/*If we choose an arbitrary assignment for any two adjacent cells of the original state, then the entire rest of the state can be determined from the current state. For example, if we choose values for original[0] and original[1], then current[1] is defined as original[0]^original[1]^original[2] (where '^' is exclusive or), thus original[2]=original[0]^original[1]^current[1]. Repeating the process allows us to determine all cells of the original state. Depending on the initial assignment, this may or may not yield a valid solution. There are only 4 initial assignments to try, and we simply count the number that yield valid solutions.
*/
#include<stdio.h>
#include<string.h>
 
int main()
{
    short int test,count=0,n,i,j,t;
    char str[52];
    short int arr[52],arr1[52],sol[52];
    scanf("%hd",&test);
    while(test--)
    {
 
                 if(count>1)
                 printf("Multiple solutions\n");
 
                 scanf("%s",str);
                 n=strlen(str);
                 for(i=0;i<n;i++)
                 arr[i]=str[i]-'0';
                 count=0;
 
                 /* case 1 */
                 arr1[0]=0;
                 arr1[1]=0;
                 for(j=1;j<n;j++)
                 {
                                   if(j!=n-1)
                                   {
                                       arr1[j+1]=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                                   else
                                   {
                                       t=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                 }
                 if(t==arr1[0] && (t+arr1[1]+arr1[n-1])%2==arr[0])
                 {
                 count++;
                 for(j=0;j<n;j++)
                 sol[j]=arr1[j];
                 }
 
                 /* case 2 */
 
                 arr1[0]=0;
                 arr1[1]=1;
                  for(j=1;j<n;j++)
                 {
                                   if(j!=n-1)
                                   {
                                       arr1[j+1]=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                                   else
                                   {
                                       t=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                 }
                 if(t==arr1[0] && (t+arr1[1]+arr1[n-1])%2==arr[0])
                 {
                 count++;
                 if(count>1)
                 continue;
                 for(j=0;j<n;j++)
                 sol[j]=arr1[j];
                 }
 
                 /* case 3 */
 
                 arr1[0]=1;
                 arr1[1]=0;
                  for(j=1;j<n;j++)
                 {
                                  if(j!=n-1)
                                   {
                                       arr1[j+1]=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                                   else
                                   {
                                       t=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                 }
                 if(t==arr1[0] && (t+arr1[1]+arr1[n-1])%2==arr[0])
                 {
                 count++;
                 if(count>1)
                 continue;
                 for(j=0;j<n;j++)
                 sol[j]=arr1[j];
                 }
 
                 /* case4 */
 
                 arr1[0]=1;
                 arr1[1]=1;
                  for(j=1;j<n;j++)
                 {
                                   if(j!=n-1)
                                   {
                                       arr1[j+1]=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                                   else
                                   {
                                       t=(arr1[j-1]+arr1[j]+arr[j])%2;
                                   }
                 }
                 if(t==arr1[0] && (t+arr1[1]+arr1[n-1])%2==arr[0])
                 {
                 count++;
                 if(count>1)
                 continue;
                 for(j=0;j<n;j++)
                 sol[j]=arr1[j];
                 }
 
                 switch(count)
                 {
                              case 0: printf("No solution\n");
                              break;
                              case 1: for(j=0;j<n;j++)
                                      printf("%hd",sol[j]);
                                      printf("\n");
                              break;
                 }
 
    }
    return 0;
}