#include<stdio.h>
//#include<conio.h>
#include<string.h>

#define XOR(a,b) a==b?0:1

int right_neighbour(int i,int n)
{
	if(i==(n-1))
	{
		return 0;
	}
return i+1;
}
int left_neighbour(int i,int n)
{
	if(i==0)
	{
		return n-1;
	}
return i-1;
}
int main()
{
	//clrscr();

	int T;

	scanf("%d",&T);
	while(T>0)
	{
	int n=0,i,j;
	int a[50]={2};			//initialized with 2 it means all cells are empty
	int v[4][50]={2};
	int rejected[4]={0};
	char str[50];
	int count=4;
	scanf("%s",&str);
	n=strlen(str);
		v[0][0]=0;	v[0][n-1]=1;
		v[1][0]=0;      v[1][n-1]=0;
		v[2][0]=1;      v[2][n-1]=0;
		v[3][0]=1;      v[3][n-1]=1;
	for(i=1;i<n-1;i++)
	{
		a[i]=2;
		v[0][i]=2;
		v[1][i]=2;
		v[2][i]=2;
		v[3][i]=2;
	}
	for(i=0;i<n;i++)
	{
		if(str[i]=='0')
			a[i]=0;
		else
			a[i]=1;
	}
	//conways predecessor
	//***************************************************************
	//taking a two dimensional array v[4][50]
	//check
	for(i=0;i<4;i++)
	{
		for(j=0;j<n;j++)
		{
			//check right neighbour is empty or not
			//if empty check xor of j bits
			//if xor=true means diff bits
			//=>right=1-left;
			if(v[i][right_neighbour(j,n)]==2)
			{
				if(XOR(v[i][j],a[j]))
				{
					v[i][right_neighbour(j,n)]=1-v[i][left_neighbour(j,n)];
				}
				else
				{
					v[i][right_neighbour(j,n)]=v[i][left_neighbour(j,n)];
				}
			}
			else
			{
				if(XOR(v[i][j],a[j]))
				{
					if(v[i][right_neighbour(j,n)]==(1-v[i][left_neighbour(j,n)]))
						continue;
					else
					{
						count--;

						rejected[i]=1;
						break;
					}
				}
				else
				{
					if(v[i][right_neighbour(j,n)]==v[i][left_neighbour(j,n)])
						continue;
					else
					{
						count--;
						rejected[i]=1;
						break;
					}
				}
			}

		}
	}
	if(count==0)
		printf("No solution\n");
	else if(count>1)
		printf("Multiple solutions\n");
	else
	{
		for(i=0;i<4;i++)
		{
		     if(rejected[i]!=1)
		     {
			for(j=0;j<n;j++)
			{
				printf("%d",v[i][j]);
			}
		     }
		}
		printf("\n");
	}
	T--;
	}
//getch();
return 0;
}