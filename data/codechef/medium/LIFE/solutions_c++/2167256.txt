

#include <stdio.h>
#include<string>
#include<iostream>
using namespace std ;




void pAry (int* arr, int len){

	int i ;

	for(i=0;i<len;i++)
		printf("%d",arr[i]) ;

	cout << "\n" ;

}


int main(){

	int T ;

	string after , before ;

	int i , j , k , last ;

	int* a , *b , *c , *d , *e ;

	int num ;

	//string ans ;

	bool ans[4] ;
	scanf("%d",&T) ;
	while (T--){
		
		num = 0 ;
		std::cin >> after ;

		ans[0] = false ;
		ans[1] = false ;
		ans[2] = false ;
		ans[3] = false ;

		last = after.length() ;
		a = new int[last] ;
		b = new int[last] ;
		c = new int[last] ;
		d = new int[last] ;
		e = new int[last] ;
		

		for(i=0;i<last;i++)
			a[i] = after[i] - 48 ;

		


		b[0] = a[0] ;
		b[last-1] = a[last-1] ;

		for(i=1;i<last-1;i++)
			b[i] = ((b[i-1]^a[i-1]) ^ b[(i-2+last)%last]) ;

		if (b[last-2] == b[0] && (b[last-2] ^ (b[last-3]^b[last-1]) == a[last-2]) )
			ans[0] = true ;

		c[0] = a[0] ;
		c[last-1] = a[last-1] ^ 1 ;

		for(i=1;i<last-1;i++)
			c[i] = ((c[i-1]^a[i-1]) ^ c[(i-2+last)%last]) ;

		if (c[last-2] != c[0] && (c[last-2] ^ (c[last-3]^c[last-1]) == a[last-2]))
			ans[1] = true ;

		d[0] = a[0] ^ 1 ;
		d[last-1] = a[last-1] ;

		for(i=1;i<last-1;i++)
			d[i] = ((d[i-1]^a[i-1]) ^ d[(i-2+last)%last]) ;

		if ( (d[0] == d[last-2]) && (d[last-2]^(d[last-3]^d[last-1]) == a[last-2]))
			ans[2] = true ;

		e[0] = a[0] ^ 1 ;
		e[last-1] = a[last-1] ^ 1 ;

		for(i=1;i<last-1;i++)
			e[i] = ((e[i-1]^a[i-1]) ^ e[(i-2+last)%last]) ;

		if( (e[0] != e[last-2]) && (e[last-2] ^ (e[last-3]^e[last-1]) == a[last-2]) )
			ans[3] = true ;


		if (!(ans[0] || ans[1] || ans[2] || ans[3]))
			printf("No solution\n") ;
		else {
		
			num = 0 ;

			for(i=0;i<=3;i++)
				if (ans[i])
					num++ ;

			if(num>1)
				printf("Multiple solutions\n") ;
			else{
			
				if(ans[0])
					pAry(b,last) ;

				else if (ans[1])
					pAry(c,last) ;
				else if (ans[2])
					pAry(d,last) ;
				else
					pAry(e,last) ;
			}
		}

	}

}
