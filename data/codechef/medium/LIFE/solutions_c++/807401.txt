#include <iostream> 
#include <sstream> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <memory.h> 
#include <cctype> 
#include <string> 
#include <vector> 
#include <list> 
#include <queue> 
#include <deque> 
#include <stack> 
#include <map> 
#include <set> 
#include <algorithm> 
using namespace std;
 
#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))
#define CLEAR(a) memset((a),0,sizeof(a))
#define INF 1000000000
#define PB push_back
#define ALL(c) (c).begin(), (c).end()
#define pi 2*acos(0.0)
#define SQR(a) (a)*(a)
#define MP make_pair
#define MAX 1 << 16
 
typedef long long Int;

int n, t;
char s[64];
int A[64];
int R[2][2][64][2][2];
string S[2][2][64][2][2];

int F(int a, int b, int c)
{
		if (a + c == 1)
				return (b ^ 1);
		return b;
}

int main()
{
		scanf("%d", &t);
		FOR (tt,0,t)
		{
				scanf("%s", s);
				n = strlen(s);
				FOR (i,0,n)
						A[i] = (s[i]-'0');
				CLEAR(R);

				FOR (i,0,2)
						FOR (j,0,2)
						{
								string s = "";
								s += char('0'+i);
								s += char('0'+j);
								S[i][j][1][i][j] = s;
								R[i][j][1][i][j] = 1;
						}
				FOR (i,1,n-1)
						FOR (j,0,2)
								FOR (k,0,2)
										FOR (l,0,2)
												FOR (q,0,2)
												{
														if (R[j][k][i][l][q] == 0)
																continue;
													//	cout << i << endl;
														string s = S[j][k][i][l][q];
														FOR (r,0,2)
														{
																if (F(l, q, r) != A[i])
																		continue;
																string t = s;
																t += char('0'+r);

																R[j][k][i+1][q][r] += R[j][k][i][l][q];
																S[j][k][i+1][q][r] = t;
														}
												}

				int cnt = 0;
				string res = "";

				FOR (i,0,2)
						FOR (j,0,2)
								FOR (k,0,2)
										FOR (l,0,2)
										{
												int c = R[i][j][n-1][k][l];
												if (c == 0)
														continue;
												if (F(k, l, i) != A[n-1])
														continue;
												if (F(l, i, j) != A[0])
														continue;
												res = S[i][j][n-1][k][l];
												cnt += c;
										}
				if (cnt == 0)
						printf("No solution\n");
				else
				if (cnt > 1)
						printf("Multiple solutions\n");
				else
						cout << res << endl;
		}
		return 0;
} 