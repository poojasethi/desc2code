#include <iostream>
#include <cstdio>
using namespace std;

#include <bitset>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <cstring>

# define FR(i, n)           for( int i = 0; i<=n; i++)
# define FRm(i, m, n)     for( int i = m; i <=n; i++)
# define FRrev(i, n)         for( int i = n; i >= 0; i-- )
# define FRrevm(i,n,m)         for( int i = n; i >= m; i-- )

# define PF       printf
# define PFS PF(" ")
# define PFd(x)   printf("%d" , x )
# define PFdS(x)   printf("%d " , x )
# define PFdN(x)  printf("%d\n" , x )
# define PFN	  printf("\n")
# define SF    scanf
# define SFd(x) scanf("%d",&x)
# define SFd2(x,y) scanf("%d%d",&x,&y)

#define nmax 50

int main()
{
	int t;
	char orig[nmax+1],cur[nmax+1];
	string store[4];
	int cnt=0;
	int temp,len;
	bitset<4> my;
	my.reset();
	
	SFd(t);
	FR(i,nmax)orig[i]='0';
	while(t--)
	{
		cnt=0; my.reset();
		cin>>cur;
		len=strlen(cur);
		orig[len]='\0';
		
		//00
		orig[0]='0'; orig[1]='0';
		
		FRm(i,2,len-1)
		{
			temp=(cur[i-1]-'0')^( orig[i-1]-'0' )^( orig[i-2]-'0' );
			orig[i]=(temp+'0');
		}
		if(  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[1]-'0') )==(cur[0]-'0') &&  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[len-2]-'0') )==(cur[len-1]-'0')     )
			{my[0]=1;cnt++;}
		store[0]=orig;
	//	cout<<my<<endl;
		
		
		
		
		//01
		orig[0]='0'; orig[1]='1';
		
		FRm(i,2,len-1)
		{
			temp=(cur[i-1]-'0')^( orig[i-1]-'0' )^( orig[i-2]-'0' );
			orig[i]=(temp+'0');
		}
		if(  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[1]-'0') )==(cur[0]-'0') &&  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[len-2]-'0') )==(cur[len-1]-'0')    )
			{cnt++; my[1]=1;}
		store[1]=orig;
			
			//cout<<my<<endl;
			
			
			
			
			//10
		orig[0]='1'; orig[1]='0';
		
		FRm(i,2,len-1)
		{
			temp=(cur[i-1]-'0')^( orig[i-1]-'0' )^( orig[i-2]-'0' );
			orig[i]=(temp+'0');
		}
		if(  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[1]-'0') )==(cur[0]-'0') &&  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[len-2]-'0') )==(cur[len-1]-'0')      )
			{my[2]=1;cnt++;}
		store[2]=orig;
		//	cout<<my<<endl;
			
			
			
			//11
		orig[0]='1'; orig[1]='1';
		
		FRm(i,2,len-1)
		{
			temp=(cur[i-1]-'0')^( orig[i-1]-'0' )^( orig[i-2]-'0' );
			orig[i]=(temp+'0');
		}
		if(  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[1]-'0') )==(cur[0]-'0') &&  ( (orig[len-1]-'0') ^ (orig[0]-'0') ^ (orig[len-2]-'0') )==(cur[len-1]-'0')    )
			{my[3]=1;cnt++; 
			 }
		store[3]=orig;
	//	cout<<my<<endl;
		
		
		
		
		
		int ans=0; string pt;
		
		FR(j,3)
		{
			if(!my[j])continue;
			FRm(k,j+1,3)
			{
				if(!my[k] ) continue;
				if(store[k]==store[j])my[j]=0;;
			}
			if(my[j]) {ans++; pt=store[j]; }
		}
		
		
		if(ans>1) printf("%s\n","Multiple solutions");
		else if(ans==0) printf("%s\n","No solution");
		else cout<<pt<<endl;
		
	}
	
	
	return 0;
}
