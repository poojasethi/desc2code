#include <bits/stdc++.h>

using namespace std;

#define ll long long int

typedef pair<int,int> ii;

ll dp[505][100010];
int a[100010],mn[100010];

struct oper
 {
     int l,r,v;
 };

struct oper op[100010];
vector<int> lef[100010],righ[100010];
set<ii> s;

#define inchar getchar_unlocked

inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}

int main() {
	// your code goes here
	
	int test;
	scanf("%d",&test);
	for(int j=0;j<100010;j++)
	 dp[0][j] = 0;
	for(int i=0;i<505;i++)
     dp[i][0] = 0;
	
	while(test--)
	 {
	     int n,k,m;
	     //scanf("%d",&n);scanf("%d",&k);scanf("%d",&m);
	     inp(n);inp(k);inp(m);
	     
	     for(int i=1;i<=n;i++)
	      //scanf("%d",&a[i]);
	        inp(a[i]);
	      
	     for(int i=1;i<=m;i++)
	      {
	          //scanf("%d %d %d",&op[i].l,&op[i].r,&op[i].v);
	          inp(op[i].l); inp(op[i].r);inp(op[i].v);
	          lef[op[i].l].push_back(i);
	          righ[op[i].r].push_back(i);
	      }
	      
	     ll ans = 0;
	     bool flag = true;
	     
	     for(int i=1;i<=n;i++)
	      {
	          if(a[i] < 0)
	           flag = false;
	          ans += a[i];    
	      }
	      
	      if(flag)
	       {
	           printf("%lld\n",ans);
	           continue;
	       }
	     
	     for(int i=1;i<=n;i++)
	      {
	          int siz = lef[i].size();
	          
	          for(int j=0;j<siz;j++)
	           {
	               int ind = lef[i][j];
	               s.insert(ii(op[ind].v,ind));
	           }
	       
	          if(s.size()) mn[i] = s.begin()->first;
	          else mn[i] = 600;
	          siz = righ[i].size();
	          
	          for(int j=0;j<siz;j++)
	           {
	               int ind = righ[i][j];
	               s.erase(ii(op[ind].v,ind));
	           }
	           
	           //cout<<mn[i]<<" ";
	           
	      }
	      
	      // solve the problem as knapsack
	        
	        vector<int> wt,val;
	        wt.push_back(0);val.push_back(0);
	        
	        for(int i=1;i<=n;i++)
	         {
	             if(a[i] < 0)
	              {
	                  wt.push_back(mn[i]);
	                  val.push_back(-a[i]);
	              }
	         }
	      
	      int len = wt.size()-1;
	      
	      for(int i=1;i<=len;i++)
	       {
	           for(int j=1;j<=k;j++)
	            {
	                dp[j][i] = dp[j][i-1];   // exclude the ith element
	                int weight = wt[i];
	                
	                if(j-weight >= 0)
	                 {
	                   ll cost = val[i];
	                   dp[j][i] = max(dp[j][i],dp[j-weight][i-1] + cost);
	                 }
	                
	            }
	       }
	      /* 
	       for(int i=1;i<=k;i++)
	        {
	            for(int j=1;j<=len;j++)
	             cout<<dp[i][j]<<" ";
	             cout<<"\n";
	        }
	       */
	       ll extra = dp[k][len];
	      
	      
	      
	      // clean up
	      for(int i=1;i<=n;i++)
	      {
	       lef[i].clear();
	       righ[i].clear();
	      }
	      
	      s.clear();
	      
	      printf("%lld\n",ans + extra);
	     
	 }
	
	
	return 0;
}
