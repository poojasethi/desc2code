#include<iostream>
#include<set>
#include<vector>
#include<cstdio>

using namespace std;

void print( int *arr,  int size)
{
    for ( int i=0; i<size; i++) cout << arr[i] << " ";
    cout << endl;
}


#define MAX_SIZE 100003
int tc, dishes, judges, budget, cost[MAX_SIZE]; 
long long int rating[MAX_SIZE];
long long int negrating[MAX_SIZE];
int negcost[MAX_SIZE];
long long int dp[MAX_SIZE][505];

struct operation
{
    int left, right, cost;
};

operation op[MAX_SIZE];

inline long long int optimize(int tot, int budget)
{
    long long int a, b;
        for (int i=0; i<=tot; i++) {
            for (int j=0; j<=budget; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                    continue;
                } 
                else if (negcost[i-1] <= j) {
                    a = dp[i-1][j];
                    b = negrating[i-1] + dp[i-1][j-negcost[i-1]];
                    dp[i][j] = (a > b) ? a : b;
                }
                else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[tot][budget];
}

vector<int> Left[MAX_SIZE], Right[MAX_SIZE];

int main()
{
    long long int a, b, totrating;
    int l, r, c;
    set<pair<int, int> > costset;
    scanf("%d", &tc);

    for (int t=0; t<tc; t++) {
        costset.clear();
        scanf("%d %d %d", &dishes, &budget, &judges);

        totrating = 0;
        for (int i=0; i<dishes; i++) {
            scanf("%lld", &rating[i]);
            totrating += rating[i];
        }

        /*for (int i=0; i<dishes; i++) {
            cost[i] = 0;
        }*/

        for (int i=0; i<judges; i++) {
            scanf("%d %d %d", &l, &r, &c);
            l--; r--;
            op[i].left = l; op[i].right = r; op[i].cost = c;
            //scanf("%d %d %d", &op[i].left, &op[i].right, &op[i].cost);
            Left[l].push_back(i);
            Right[r].push_back(i);
        }

        int k;
        for (int i=0; i<dishes; i++) {
            for (int j=0; j<Left[i].size(); j++) {
                k = Left[i][j];
                costset.insert(make_pair(op[k].cost, k));
            }

            if (costset.empty()) {
                cost[i] = 0;
            } else {
                cost[i] = costset.begin()->first;
            }
            //cout << "cost for dish " << i << " is " << cost[i] << endl;

            for (int j=0; j<Right[i].size(); j++) {
                k = Right[i][j];
                costset.erase(make_pair(op[k].cost, k));
            }
            Left[i].clear(); Right[i].clear();
        }

        int tot=0;
        for (int i=0; i<dishes; i++) {
            if (rating[i] < 0 && cost[i] != 0) {
                negrating[tot] = -1 * rating[i];
                negcost[tot] = cost[i];
                tot++;
            }
        }

        printf("%lld\n", totrating + optimize(tot, budget));
    }
    return 0;
}
