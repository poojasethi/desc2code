#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

class VectorNode {
	public:
		int row;
		int col;
		int val;
		VectorNode(int row, int col, int val) {
			this->row = row;
			this->col = col;
			this->val = val;
		}
};

class VectorList {
	public:
		vector<VectorNode> v;
};

bool comparisonMinFunction(VectorNode v1, VectorNode v2) {
	return v1.val <= v2.val; 
}

bool comparisonMaxFunction(VectorNode v1, VectorNode v2) {
	return v1.val >= v2.val;
}

int main() {
	
	int R, C;
	cin >> R >> C;
	int** grid = new int*[R];
	//bool** maxGrid = new bool*[R];
	for(int i=0; i<R; i++) {
		grid[i] = new int[C];
		//maxGrid[i] = new bool[C];
	}
	//VectorList rows[R];// = new VectorList[R];
	//VectorList cols[C];// = new VectorList[C];
	int val;
	int minRows[R];
	int maxCols[C];
	for(int i=0; i<R; i++)
	{
		int minR=100000000;
		for(int j=0; j<C; j++) {
			cin >> grid[i][j];
			if(grid[i][j] <= minR) {
				minR = grid[i][j];
			}
			/*cin >> val;
			maxGrid[i][j] = false;
			VectorNode vn(i, j, val);
			rows[i].v.push_back(vn);
			cols[j].v.push_back(vn);
			*/
		}
		minRows[i] = minR;
	}
	for(int j=0; j<C; j++) {
		int maxC=-1;
		for(int i=0; i<R; i++) {
			if(grid[i][j] >= maxC) {
				maxC = grid[i][j];
			}
		}
		maxCols[j] = maxC;
		
	}
	bool solutionFound = false;
	for(int i =0; i<R; i++) {
		for(int j=0; j<C; j++) {
			if(minRows[i] == maxCols[j]) {
				solutionFound = true;
				cout << minRows[i] << endl;
				break;
			}
		}
		if(solutionFound)
			break;
	}
	/*
	for(int i=0; i<R; i++) {
		sort(rows[i].v.begin(), rows[i].v.end(), comparisonMinFunction);
	}
	for(int j=0; j<C; j++) {
		sort(cols[j].v.begin(), cols[j].v.end(), comparisonMaxFunction);
	}	
	for(int i=0;i<R; i++) {
		
		vector<VectorNode>::iterator it;
		//cout << "Sorted row " << i << " = ";
		for(it = rows[i].v.begin(); it!=rows[i].v.end(); ++it) {
			//cout << (*it).row << "," << (*it).col << " " << (*it).val << endl;
			if((*it).val == (rows[i].v).at(0).val)
			{
				maxGrid[(*it).row][(*it).col] = true;
			}
			else
				break;
		}
		
		for(int j=0; j<C;j++) {
			if(rows[i].v[j].val == rows[i].v[0].val) {
				maxGrid[rows[i].v[j].row][rows[i].v[j].col] = true;
			}
			else 
				break;
		}
	}
	//cout << "Hello" << endl;
	bool solutionFound = false;
	for(int i=0;i<C; i++) {
		
		vector<VectorNode>::iterator it;
		//cout << "Sorted col " << i << " = ";
		for(it = cols[i].v.begin(); it!=cols[i].v.end(); ++it) {
			//cout << (*it).row << "," << (*it).col << " " << (*it).val << endl;
			if((*it).val == cols[i].v.at(0).val)
			{
				maxGrid[(*it).row][(*it).col] = maxGrid[(*it).row][(*it).col] & true;
				if(maxGrid[(*it).row][(*it).col]) {//solution found
					cout <<  (*it).val << endl;
					solutionFound = true;
					break;
				}
			}
			else
				break;
		}
		
		for(int j=0; j<R;j++) {
			if(cols[i].v[j].val == cols[i].v[0].val){
				maxGrid[cols[i].v[j].row][cols[i].v[j].col] = maxGrid[cols[i].v[j].row][cols[i].v[j].col] & true;
				if(maxGrid[cols[i].v[j].row][cols[i].v[j].col]) {
					cout << cols[i].v[j].val << endl;
					solutionFound = true;
					break;
				}
			}
			else 
				break;
		}
		if(solutionFound)
			break;
	}
	*/
	if(!solutionFound)
		cout << "GUESS" << endl;
	return 0;
}