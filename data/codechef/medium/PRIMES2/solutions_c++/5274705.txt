#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}


int prime[100000];
bitset<1000010> visited;
int buildseive(int n)
{
int i,j,x,y;
  for(i = 2;i<=n;i++)
    visited[i] = 0;
    j = 0;
    for(i = 2;i<=n;i++)
    {
      if(visited[i] == 0)
      {
       prime[j] = i;
       j++;
      }
      x = 2;
      y = x*i;
      while(y<=n)
      {
        visited[y] = 1;
        x++;
        y = x*i;
      }
    }
    return j-1;

}

inline int po(int a,int b)
 {
         
 }

int main() {

    int n;
    int nop = buildseive(1000001);
    inp(n);
    while(n)
     {
      int p2 = (int)sqrt(n*1.0) + 1;
      int p3 = (int)cbrt(n*1.0) + 1;
      int p2lb = lower_bound(prime,prime+nop,p2)-prime;
      int p3lb = lower_bound(prime,prime+nop,p3)-prime;
      int a1=0,a2=0,a3=0;
      bool flag = true;
      for(int i=0;i<=p2lb && flag;i++)
       {
            int p2 = prime[i];  
            int psq = p2*p2;  
           for(int j=0;j<=p3lb;j++)
            {
                 int p3 = prime[j];
                 int x = n - psq - p3*p3*p3;
                 if(x<=1) break;
                 if(!visited[x])
                  {
                    flag = false;
                    a1 = x;a2 = p2;a3 = p3;
                    break;              
                  }  
            }   
       }
      printf("%d %d %d\n",a1,a2,a3);      
      inp(n);       
     }
   
    
    
    //getchar();
    //getchar();
	return 0;
} 
