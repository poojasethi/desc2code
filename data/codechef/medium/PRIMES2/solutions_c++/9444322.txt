#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_v) (int)(_v).size()
#define all(_v) (_v).begin(),(_v).end()
#define pii pair<int,int>
typedef long long ll;
const int INF = 1000000000;
const ll MOD = 1e9 + 7;

const int maxn = 1000010;
bool pr[maxn];
vector < int > primes,primes_sq,primes_cb;
vector < int > ans[maxn];

void calc() {
	memset(pr,false,sizeof pr);
	
	for (int i = 2; i * i <= maxn - 10; i ++) {
		if(pr[i]) continue;
		for (int j = i * i; j <= maxn - 10; j += i)
			pr[j] = true;
	}

	for (int i = 2; i <= maxn - 10; i ++) if(!pr[i]) primes.pb(i);

	for (int i = 0; i < sz(primes); i ++) {
		int num = primes[i] * primes[i];
		if(num > maxn - 10) break;
		primes_sq.pb(primes[i]);	
	}

	for (int i = 0; i < sz(primes); i ++) {
		int num = primes[i] * primes[i] * primes[i];
		if(num > maxn - 10) break;
		primes_cb.pb(primes[i]);
	}
}

void solve(int n) {
	
	for (int i = 0; i < sz(primes_sq); i ++) {
		int ii = primes_sq[i] * primes_sq[i];
		for (int j = 0; j < sz(primes_cb); j ++) {
			int jj = primes_cb[j];
			jj *= jj * jj;
			if(ii + jj > n) break;
			int temp = n - (ii + jj);
			if(temp < maxn and !pr[temp]) {
				printf("%d %d %d\n",temp,primes_sq[i],primes_cb[j]);
				return;
			}
		}
	}
	printf("0 0 0\n");
}

int main() {
	//ios_base::sync_with_stdio(false);

	calc();
	int n;
	while (scanf("%d",&n) and n) {
	    solve(n);
	}
	
	return 0;
}
