#include <cstdio>
#include <algorithm>

struct flight {
    int org, orgTime;
    int dest, destTime;

    flight(){}
    flight(int _org, int _orgTime)
        :org(_org), orgTime(_orgTime){}

    void read()
    {
        scanf("%d %d %d %d", &org, &orgTime, &dest, &destTime);
    }

    bool operator<(const flight& a) const
    {
        return ( org<a.org || (org == a.org && orgTime < a.orgTime) );
    }
};

int main()
{
    int t;
    scanf("%d", &t);
    flight flights[10000];
    while(t--) {
        int n, dest, destTime, currTime, currLoc;
        int taken[10000] = {};
        scanf("%d", &n);
        for(int i=0; i<n; i++) flights[i].read();
        scanf("%d %d %d %d", &currLoc, &currTime, &dest, &destTime);

        std::sort(flights, flights+n);

        int numFlights=0;
        int reached=-1;
        while(reached<0) {
            if(currLoc == dest && currTime <= destTime) {
                reached=1;continue;
            }
            int next = std::lower_bound(flights, flights+n, flight(currLoc,currTime)) - flights;
            if(next==n || taken[next] || flights[next].org!=currLoc) {
                reached=0;continue;
            }
            numFlights++;
            taken[next] = 1;
            currLoc = flights[next].dest;
            currTime = flights[next].destTime;
        }
        if(reached)
            printf("Yes %d\n",numFlights);
        else
            puts("No\n");
    }
}
