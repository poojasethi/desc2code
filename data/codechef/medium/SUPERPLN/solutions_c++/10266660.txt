#include <iostream>
#include <cstdio>
#include <set>
#include <cstring>

using namespace std;

struct flight {
  int flightidx, deptime, arrtime, arrcityidx;
  bool operator() (const flight& lhs, const flight& rhs) const {
    return lhs.deptime < rhs.deptime;
  }
};

int main() {
  int t, n;
  bool flights[10005];
  set<flight, flight> cityflights[10005];
  int dt, at, dc, ac;
  int start, stime, end, etime;
  int curcity, curtime, flightstaken;

  scanf("%d", &t);

  while(t--) {
    memset(flights, 0, 10005 * sizeof(bool));

    for (int i = 0; i < 10005; ++i)
    {
      cityflights[i].clear();
    }

    scanf("%d", &n);

    for (int j = 0; j < n; ++j)
    {
      scanf("%d%d%d%d", &dc, &dt, &ac, &at);

      flight f;
      f.flightidx = j;
      f.deptime = dt;
      f.arrtime = at;
      f.arrcityidx = ac;

      cityflights[dc].insert(f);
    }

    scanf("%d%d%d%d", &start, &stime, &end, &etime);

    curcity = start;
    curtime = stime;
    flightstaken = 0;

    /*
    for (int i = 0; i < 5; ++i)
    {
      printf("city: %d\n", i);
      for (set<flight, flight>::iterator itr = cityflights[i].begin(); itr != cityflights[i].end(); ++itr)
      {
        printf("%d ", itr->deptime);
      }
      printf("\n");
    }
    */

    while(true) {
      if(curcity == end && curtime <= etime) {
        printf("Yes %d\n", flightstaken);
        break;
      }

      flight f1;
      f1.deptime = curtime;

      set<flight, flight>::iterator itr = cityflights[curcity].lower_bound(f1);
      if(itr == cityflights[curcity].end() || flights[itr->flightidx] == 1) {
        printf("No\n");
        break;
      }

      curcity = itr->arrcityidx;
      curtime = itr->arrtime;
      flights[itr->flightidx] = 1;
      flightstaken++;
    }
  }
}