    #include <iostream>
    #include <vector>
    #include <sstream>
    #include <cstring>
    #include <string>
    #include <algorithm>
    #include <string>
    using namespace std;
     
    bool cmp (pair <int, pair < pair <int,int> , int > > l , pair <int, pair < pair <int,int> , int > > r)
    {
    if (l.first < r.first) return true;
    return false;
    }
     
    main ()
    {
     
    int t;
    cin >> t;
     
    while (t--)
    {
    int n;
    cin >> n;
     
    vector < pair <int, pair < pair <int,int> , int > > > flights[20000];
     
    for (int i = 0; i < n; i++)
    {
    int c1,t1,c2,t2;
    cin >> c1 >> t1 >> c2 >> t2;
    pair <int,int> p(c2,t2);
    pair <pair <int,int> , int > q(p,i);
    pair < int,pair <pair <int,int> , int > > r(t1,q);
    flights[c1].push_back(r);
    }
     
    for (int i = 0; i < 20000; i++) sort(flights[i].begin(), flights[i].end());
     
    int s,st,f,ft;
    cin >> s >> st >> f >> ft;
     
    int cnt = 0;
    vector < pair <int, pair < pair <int,int> , int > > > :: iterator it;
    bool yes = true;
    int done[n];
    memset(done,0,sizeof(done));
    while (true)
    {
    if (s == f && st <= ft) break;
    if (flights[s].size() == 0) { yes = false; break; }
    if (flights[s][flights[s].size()-1].first < st) { yes = false; break; }
    pair <int,int> tmp(0,0);
    pair < pair <int,int> , int > l(tmp,0);
    pair <int, pair < pair <int,int> , int > > q(st,l);
    it = lower_bound(flights[s].begin(),flights[s].end(),q,cmp);
    cnt++;
    s = (*it).second.first.first;
    st = (*it).second.first.second;
    if (done[(*it).second.second]) { yes = false; break; }
    done[(*it).second.second] = 1;
    }
    if (yes) cout << "Yes " << cnt << "\n";
    else cout << "No\n";
    }
    } 