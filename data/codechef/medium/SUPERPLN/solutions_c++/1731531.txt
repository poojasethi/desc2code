#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;



struct flight
{
int c1;//origin
int c2;//destination
int t1;//departure time
int t2;//arrival time
bool used;
flight(){};
flight(int, int, int, int);
};

int N;
vector<flight>airline;
int start, end, st, pt;

flight::flight(int x, int y, int w, int z)
{
c1 = x;
t1 = y;
c2 = w;
t2 = z;
used = false;
}

inline bool operator<(flight f1, flight f2)
{
if(f1.c1< f2.c1)return 1;
if(f1.c1 == f2.c1 && f1.t1<f2.t1)return 1;
return 0;
}

void printflight(flight f)
{
 cout<<f.c1<<" "<<f.t1<<" "<<f.c2<<" "<<f.t2<<" "<<f.used<<endl;
}

int bsearch(flight f)
{
    int low = 0;
    int high = airline.size() - 1;
    int mid;
    while(low<high)
    {
        mid = (low+high)/2;
        if(airline[mid]<f)low= mid + 1;
        else high = mid;
    }

    if(airline.size() && (airline[high].c1 == f.c1 && airline[high].t1>= f.t1))return high;
    return -1;

}

//find closest flight from the city
int findflight(int origin, int time)
{
    flight f(origin, time, 0, 0);//last 2 are dummy variables
    return bsearch(f);

}
void solve()
{
    int cnt = 0, city=start, time=st;

    while(1)
    {
    //cout<<"city "<<city<<endl;
    //cout<<"time "<<time<<endl;
    if(city == end && time<= pt)
    {
    printf("%s %d\n", "Yes", cnt);
    return;
    }
    else
    {
        int ind = findflight(city, time);
        //cout<<"flight "<<ind<<endl;
        if(ind!= -1 && airline[ind].used== false)
        {
            city = airline[ind].c2;
            time = airline[ind].t2;
            airline[ind].used = true;
            cnt++;
        }
        else
        {
            printf("%s\n", "No");
            return;
        }
    }
    }
}

int main()
{

int t;
scanf("%d", &t);
while(t--)
{

airline.clear();
int x, y, w, z;
flight f;

scanf("%d", &N);
for(int i=0; i<N; i++)
{
    scanf("%d%d%d%d", &x, &y, &w, &z);
    f = flight(x, y, w, z);
    airline.push_back(f);
}
scanf("%d%d%d%d", &start, &st, &end, &pt);
sort(airline.begin(), airline.end());
solve();
}
}
