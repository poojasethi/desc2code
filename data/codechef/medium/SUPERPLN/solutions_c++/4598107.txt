/*
 	C++ Template
	Gaurav Babbar
*/

#include<bits/stdc++.h>
#define MOD 1000000007
#define MAX 10005
#define mp make_pair
#define pb push_back
#define gc getchar
#define pc putchar
#define ll long long
#define llu unsigned long long

ll ABS(ll a){if(a>0) return a; else return (-1*a);}
int gcd(int a,int b){if (b==0) return a;else return gcd(b,a%b);}
llu power(llu b,llu exp,llu m) {llu ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }

using namespace std;

#define DisplayDebuggingInfo 0
#define debug(args...) {dbg,args; if(DisplayDebuggingInfo) cerr<<endl;}
struct debugger
{
      template<typename T> debugger& operator,(const T& v)
      {
          if(DisplayDebuggingInfo)
          {
              cerr<< v <<" ";
              return *this;
          }
      }
}dbg;

inline void inp(ll &n)
{
  n = 0;
  int ch = gc();
  int sign = 1;
  while(ch < '0' || ch > '9') {
    if (ch == '-') sign = -1;
    ch = gc();
  }
  while(ch >= '0' && ch <= '9')
    n = (n<<3) + (n<<1) + ch - '0', ch = gc();
  n = n*sign;
}

inline void outp(ll a)
{
  char snum[25];
  int i=0;
  do
  {
    snum[i++]=a%10+48;
    a=a/10;
  } while(a!=0);
  i=i-1;
  while(i>=0)
    pc(snum[i--]);
  pc('\n');
}

/* Main Code sarts here */

struct flight
{
    ll depCity,depTime,destCity,arrTime;
    flight(){}
    flight(ll x,ll y){depCity = x;depTime = y;}
    void read()
    {
        inp(depCity);inp(depTime);inp(destCity);inp(arrTime);
    }
    bool operator<(const flight&a) const
    {
        return depCity < a.depCity || depCity == a.depCity && depTime < a.depTime;
    }
};

flight v[MAX];
ll n;
ll startPos,endPos,startTime,endTime;
bool visited[MAX];

void reset()
{
    memset(v,0,sizeof(v));
    memset(visited,0,sizeof(visited));
}

void input()
{
    inp(n);
    for(int i=0;i<n;++i)
    {
        v[i].read();
    }
    inp(startPos);inp(startTime);inp(endPos);inp(endTime);
}

void preprocess()
{
    sort(v,v+n);
    //for(int i=0;i<n;++i){cout<<v[i].depCity<<" "<<v[i].depTime<<" "<<v[i].destCity<<" "<<v[i].arrTime<<endl;}
}

void solve()
{
    ll ans = 0,currTime = startTime ,currCity = startPos;
    while(1)
    {
        if(currCity==endPos && currTime<=endTime)
        {
            cout<<"Yes "<<ans<<endl;
            break;
        }
        else
        {
            int i = lower_bound(v,v+n,flight(currCity,currTime))-v;
            //cout<<currCity<<" "<<currTime<<" "<<i<<endl;
            if(i==n || visited[i] || v[i].depCity!=currCity)
            {
                cout<<"No\n";
                break;
            }
            else
            {
                ans++;
                currCity = v[i].destCity;
                currTime = v[i].arrTime;
                visited[i] = 1;
            }
        }
    }
}

int main()
{
//   freopen("input.txt","r",stdin);
//   freopen("output.txt","w",stdout);
   ll t;
   inp(t);
   while(t--)
   {
	   reset();
	   input();
	   preprocess();
	   solve();
   }
   return 0;
}


//
//10000
//5
//1 3 4 3
//1 4 6 3
//4 4 3 5
//6 4 3 2
//3 3 2 0
//1 2 2 1
//2
//1 1 2 1
//2 1 1 1
//1 0 3 -1
//3
//1 3 4 3
//4 4 3 5
//3 10 2 -1
//1 2 2 0
//1
//1 2 3 0
//1 2 2 2
//2
//2 0 2 0
//2 1 4 0
//2 0 4 0
