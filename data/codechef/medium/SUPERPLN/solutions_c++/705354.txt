#include <cstdio>
#include <cctype>
#include <algorithm>
#include <vector>

using namespace std;

const int BUFSIZE = 4096;
const char MINUS = '-';
const char ZEROCHAR = '0';

char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;

int readint()
{
    int sign = 1;
    int n = 0;
    for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != MINUS &&
            !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != MINUS &&
                !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    }
    if (r_buffer[r_bufpos] == MINUS)
    {
        sign = -1;
        r_bufpos += 1;
    }
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - ZEROCHAR;
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - ZEROCHAR;
    }
    return sign * n;
}

const int MAXSIZE = 10001;

struct flight
{
    flight() : t1(-1), c2(-1), t2(-1), taken(false) {}
    flight(int t1, int c2, int t2) : t1(t1), c2(c2), t2(t2), taken(false) {}
    int t1;
    int c2;
    int t2;
    bool taken;
};

bool operator < (const flight &left, const flight &right)
{
    return left.t1 < right.t1;
}

vector<flight> arr[MAXSIZE];

int nextflight(const vector<flight> &schedule, int key)
{
    int lft = 0;
    int rht = schedule.size() - 1;
    int mid;
    if (rht < 0 || schedule[rht].t1 < key)
        return -1;
    else if (key <= schedule[0].t1)
        return 0;
    while (lft < rht)
    {
        mid = (lft + rht) / 2;
        if (schedule[mid].t1 < key)
            lft = mid + 1;
        else
            rht = mid;
    }
    return lft;
}

int main()
{
    int T, N;
    int c1, t1, c2, t2;
    int c0, t0, c3, t3;
    int result;
    int idx;

    T = readint();
    for (; T; T--)
    {
        result = 0;
        for (int i=0; i < MAXSIZE; i++)
            arr[i].clear();

        N = readint();
        for (; N; N--)
        {
            c1 = readint();
            t1 = readint();
            c2 = readint();
            t2 = readint();
            arr[c1].push_back(flight(t1, c2, t2));
        }
        c0 = readint();
        t0 = readint();
        c3 = readint();
        t3 = readint();

        for (int i=0; i < MAXSIZE; i++)
            sort(arr[i].begin(), arr[i].end());

        while (1)
        {
            if (c0 == c3 && t0 <= t3)
            {
                printf("Yes %d\n", result);
                break;
            }
            idx = nextflight(arr[c0], t0);
            if (idx < 0 || arr[c0][idx].taken)
            {
                printf("No\n");
                break;
            }
            else
            {
                arr[c0][idx].taken = true;
                t0 = arr[c0][idx].t2;
                c0 = arr[c0][idx].c2;
                result += 1;
            }
        }
    }

    return 0;
}

