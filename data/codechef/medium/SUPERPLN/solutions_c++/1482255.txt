#include<iostream>
#include<algorithm>
using namespace std;
char buffer[50];
int neg=1;
struct flight
{
   int startcity,starttime,endcity,endtime,visited;
   flight() {}
   void read()
   {
      int i;
      startcity=0,starttime=0,endcity=0,endtime=0;
      gets(buffer);
      for(i=0;buffer[i]!=32;i++)
         startcity=startcity*10+(buffer[i]-'0');
      ++i;
      if(buffer[i]=='-')
      {  neg=-1; ++i; }
      for( ;buffer[i]!=32;i++)
         starttime=starttime*10+(buffer[i]-'0');
      if(neg==-1)
      {
         starttime*=neg;
         neg=1;
      }
      for(++i;buffer[i]!=32;i++)
         endcity=endcity*10+(buffer[i]-'0');
      ++i;
      if(buffer[i]=='-')
      {  neg=-1; ++i; }      
      for(;buffer[i];i++)
         endtime=endtime*10+(buffer[i]-'0');
      if(neg==-1)
      {
         endtime*=neg;
         neg=1;
      }
      //scanf("%d%d%d%d",&startcity,&starttime,&endcity,&endtime);
      //printf("%d %d %d %d\n",startcity,starttime,endcity,endtime);
      visited=0;
   }
   bool operator<(const flight &a) const
   {
        return ( (startcity<a.startcity) || (startcity==a.startcity && starttime<a.starttime));
   }
};
flight arr[10000],temp;
int main()
{
    int t=0,k=0;
    gets(buffer);
    for(k=0;buffer[k];k++)
       t=t*10+(buffer[k]-'0');
    //scanf("%d",&t);
    //printf("%d\n",t);
    while(t--)
    {
      int n=0,i;
      gets(buffer);
      for(i=0;buffer[i];i++)
         n=n*10+(buffer[i]-'0');
      //scanf("%d",&n);
      //printf("%d\n",n);
      for(i=0;i<n;i++)
         arr[i].read();
      sort(arr,arr+n);
      int partycity=0,partytime=0,currentcity=0,currenttime=0;
      gets(buffer);
      for(i=0;buffer[i]!=32;i++)
         currentcity=currentcity*10+(buffer[i]-'0');
      ++i;
      if(buffer[i]=='-')
      {  neg=-1; ++i; }
      for( ;buffer[i]!=32;i++)
         currenttime=currenttime*10+(buffer[i]-'0');
      if(neg==-1)
      {
         currenttime*=neg;
         neg=1;
      }
      for(++i;buffer[i]!=32;i++)
         partycity=partycity*10+(buffer[i]-'0');
      ++i;
      if(buffer[i]=='-')
      {  neg=-1; ++i; }
      for( ;buffer[i];i++)
         partytime=partytime*10+(buffer[i]-'0');
      if(neg==-1)
      {
         partytime*=neg;
         neg=1;
      }
      //scanf("%d%d%d%d",&currentcity,&currenttime,&partycity,&partytime);
      //printf("%d %d %d %d\n",currentcity,currenttime,partycity,partytime);
      int cnt=0,flag=0,st,en,mid;
      while(1)
      {
         if(currentcity==partycity && currenttime<=partytime)
         {
            flag=1;
            break;
         }
         temp.startcity=currentcity;
         temp.starttime=currenttime;
         i=lower_bound(arr,arr+n,temp)-arr;
         if(arr[i].startcity!=currentcity || arr[i].visited==1 || i==n)
         {
            flag=-1;
            break;
         }
         else
         {
             cnt++;
             currentcity=arr[i].endcity;
             currenttime=arr[i].endtime;
             arr[i].visited=1;
         }
      }
      if(flag==1)
        printf("Yes %d\n",cnt);
      else
        printf("No\n");
    }
    return 0;
}
         
