#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_CITY = 10002;
struct Data
{
    Data(int d, int c, int a) : 
        dtime(d), city(c), atime(a), used(false) {}
    int dtime;
    int city;
    int atime;
    bool used;
    bool operator<(const Data &right) const
    {
        return dtime < right.dtime;
    }
};

//bool operator < (const Data &left, const Data &right)
//{
//    return left.dtime < right.dtime;
//}
////
vector<Data> city[MAX_CITY];
//
inline int read_int()
{
    int t;
    scanf("%d", &t);
    return t;
}

//Data *get_next_data(int scity, int t)
//{
//    if (t > city[scity].back().dtime)
//        return NULL;
//    else if (t <= city[scity].front().dtime)
//        return &city[scity][0];
//    else
//    {
//        int left = 0;
//        int right = city[scity].size()-1;
//        while (left < right)
//        {
//            int m = (left + right) / 2;
//            if (t <= city[scity][m].dtime)
//                right = m;
//            else
//                left = m + 1;
//        }
//        return &city[scity][left];
//    }
//}
//
int main()
{
    int T, C1, T1, C2, T2, N;
    int src_city, src_time, dst_city, dst_time; 

    
    T = read_int();
    //scanf("%d", &T);
    for(; T>0; T--)
    {
        for(int i=0; i<MAX_CITY; i++)
            city[i].clear();

        N = read_int();
        //scanf("%d", &N);
        for(int i = 0; i < N; i++)
        {
            C1 = read_int();
            T1 = read_int();
            C2 = read_int();
            T2 = read_int();
            //scanf("%d %d %d %d", &C1, &T1, &C2, &T2);
            city[C1].push_back(Data(T1, C2, T2));
        }
      
        for(int i = 0; i < MAX_CITY; i++)
            sort(city[i].begin(), city[i].end());

        //scanf("%d %d %d %d", &src_city, &src_time, &dst_city, &dst_time);
        src_city = read_int();
        src_time = read_int();
        dst_city = read_int();
        dst_time = read_int();

        Data *n;
        int cnt=0;
        while(true)
        {
            if (src_city == dst_city && src_time <= dst_time)
            {
                printf("Yes %d\n", cnt);
                break;
            }

            vector<Data>::iterator itr = lower_bound(city[src_city].begin(),
                                                     city[src_city].end(),
                                                     Data(src_time, -1, -1));
            if(itr == city[src_city].end() || itr->used)
            {
                printf("No\n");
                break;
            }
 
            src_city = itr->city;
            src_time = itr->atime;
            itr->used = true;
            cnt += 1;
        }
    }
    return 0;
}
