#include <iostream>
#include <map>
#include <stack>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <algorithm>
using namespace std;

#define gc getchar
#define MOD 100000007
#define pc(x) putchar(x);
#define pi(n) printf("%d",n)
#define pll(n) printf("%lld",n)
#define ps printf(" ")
#define pn printf("\n")
#define rep(i,n) for(i=0;i<n;i++)
#define fu(i,a,n) for(i=a;i<=n;i++)
#define fd(i,n,a) for(i=n;i>=a;i--)
#define INV 333333336
#define ll long long
#define EPS 1e-9
#define infi 2000000000

int ctoi()
{
	char c;
	while(c=getchar(),(c<'0'||c>'9')&&(c!='-'));
	bool flag=(c=='-');
	if(flag)
		c=getchar();
	int x=0;
	while(c>='0'&&c<='9'){
		x=x*10+c-48;
		c=getchar();
    }
	return flag?-x:x;
}

inline int sn()
{
    int n=0;
    int ch=gc();
    while( ch <48 )ch=gc();
    while( ch >47 )
    n = (n<<3)+(n<<1) + ch-'0', ch=gc();
        return n;
}

inline void wi(int n)
{
    int N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0');  return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
}

int arr[1000];

void partition(int low,int high);
void mergeSort(int low,int mid,int high);
void partition(int low,int high)
{
    int mid;
    if(low<high){
         mid=(low+high)/2;
         partition(low,mid);
         partition(mid+1,high);
         mergeSort(low,mid,high);
    }
}

void mergeSort(int low,int mid,int high)
{
    int i,m,k,l,temp[1000];
    l=low;
    i=low;
    m=mid+1;
    while((l<=mid)&&(m<=high))
    {
         if(arr[l]<=arr[m])
         {
             temp[i]=arr[l];
             l++;
         }
         else
         {
             temp[i]=arr[m];
             m++;
         }
         i++;
    }
    if(l>mid)
    {
         for(k=m;k<=high;k++)
         {
             temp[i]=arr[k];
             i++;
         }
    }
    else
    {
         for(k=l;k<=mid;k++)
         {
             temp[i]=arr[k];
             i++;
         }
    }

    for(k=low;k<=high;k++)
    {
         arr[k]=temp[k];
    }
}

ll max(ll a,ll b)
{
	if(a>=b) return a;
	else return b;
}

int main()
{
	ll x[21][11][205],i,j,k,l;
	

	fu(i,0,20)
	fu(j,0,9)
	fu(k,0,200) x[i][j][k]=0;
	
	fu(i,0,20)
	fu(j,0,9) x[i][j][0]=1;
	
	/*fu(i,0,9) x[2][i][0]=1;
	fu(i,0,9) x[2][i][1]=2;
	fu(i,0,9) x[2][i][2]=2;
	fu(i,0,9) x[2][i][3]=2;
	fu(i,0,9) x[2][i][4]=2;
	fu(i,0,9) x[2][i][5]=2;
	
	x[2][9][1]=1;
	x[2][0][1]=1;
	
	x[2][9][2]=1;
	x[2][8][2]=1;
	x[2][1][2]=1;
	x[2][0][2]=1;
	
	x[2][9][3]=1;
	x[2][8][3]=1;
	x[2][7][3]=1;
	x[2][2][3]=1;
	x[2][1][3]=1;
	x[2][0][3]=1;
	
	x[2][9][4]=1;
	x[2][8][4]=1;
	x[2][7][4]=1;
	x[2][6][4]=1;
	x[2][3][4]=1;
	x[2][2][4]=1;
	x[2][1][4]=1;
	x[2][0][4]=1;
	
	x[2][9][5]=1;
	x[2][8][5]=1;
	x[2][7][5]=1;
	x[2][6][5]=1;
	x[2][5][5]=1;
	x[2][4][5]=1;
	x[2][3][5]=1;
	x[2][2][5]=1;
	x[2][1][5]=1;
	x[2][0][5]=1;
	
	*/
	
	
	fu(i,2,20)
	{
		fu(j,0,9)
		{
			fu(k,1,200)
			{
				ll ans=0;
				fu(l,0,9)
				{
					if(k>=abs(l-j))
						ans=(ans+x[i-1][l][k-abs(l-j)])%1000007;
				}
				x[i][j][k]=ans;
			}
		}
	}
	
	/*fu(i,0,20)
	{
		fu(j,0,20)
		{
			ll h=0;
			fu(k,1,9)
			{
				h+=x[i][k][j];
			}
			printf("%d %d %d\n",i,j,h);
		}
	}*/
	
	int t=sn();
	while(t--)
	{
		int q,w,h=0;
		q=sn();
		w=sn();
		fu(i,1,9)
		{
			h=(h+x[q][i][w])%1000007;
		}
		pi(h);pn;
	}
    return 0;
}














