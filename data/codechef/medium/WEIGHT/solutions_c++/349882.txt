
using namespace std;
#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>


//CONSTANT
#define INF (1<<31)-1
#define PI 3.1428571428571428571428571428571

//FUNC
#define FASTIO          1
#define MAX(i,j) (i)>(j)?(i):(j)
#define MIN(i,j) (i)<(j)?(i):(j)
#define REP(i,a) for((i)=0;(i)<(a);(i)++)
#define REP_(i,a) for((i)=0;(i)<=(a);(i)++)
#define FOR(i,a,b) for((i)=(a);(i)<(b);(i)++)
#define FOR_(i,a,b) for((i)=(a);(i)<=(b);(i)++)
#define VAR(V,init) __typeof(init) V=(init)
#define FOREACH(I,C) for(VAR(I,(C).begin());I!=(C).end();I++)
#define ALL(x) (x).begin(),(x).end()
#define SIZE(x) ((int)(x.size()))
#define LENGTH(x) ((int)(x.length()))
#define SZ(x) sizeof(x)
#define MEM(m,i) memset((m),(i),SZ(m))
#define PB(x,y) (x).push_back(y)
#define MP(x,y) make_pair(x,y)
#define V(x) vector < x >

//BITWISE
#define LASTSETBIT(x) x & ~(x-1)
#define TRAILZERO(x) __builtin_ctz(x)
#define LEADZERO(x) __builtin_clz(x)
#define COUNTSETBIT(x) __builtin_popcount(x)

typedef pair<int,int>   PII;
typedef pair<char,int>  PCI;
typedef pair<int,PII>   TRI;
typedef V( int )        VI;
typedef V( PII )        VII;
typedef V( TRI )        VTRI;
typedef V( string )     VS;
typedef map<int,VI>     MAP;
typedef long long       LL;
typedef long double     LD;

inline string i2s(int number) { stringstream ss; ss << number; return ss.str(); }
#ifndef FASTIO
char *ipos, *opos, InpFile[20000000], OutFile[20000000], DIP[20];
inline int input(int flag=0) {

	while(*ipos <= 32) ++ipos;
	if ( flag  ) return (*ipos++ - '0'); /* For getting Boolean Characters */
	int x=0, neg = 0;char c;
	while( true ) {
		c=*ipos++; if(c == '-') neg = 1;
		else {
			if (c<=32) return neg?-x:x;
			x=(x<<1)+(x<<3)+c-'0';
		}
	}
}
inline void output(int x,int flag) {
	int y,dig=0;
	while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
	while (dig--) *opos++=DIP[dig];
	*opos++= flag ? '\n' : ' ';
}
inline void InitFASTIO() {
	ipos = InpFile; opos = OutFile;
	fread_unlocked(InpFile,20000000,1,stdin);
}
inline void FlushFASTIO() {
	fwrite_unlocked(OutFile,opos-OutFile,1,stdout);	
}
#endif

int array[21][201];
vector < vector <LL>  > vec;
int index2=0;
void recur (int n, int w) {
    if (n==1 && w>=1)
    return;
    if ( array[n][w]!=-1) 
        return;    
    else {
        vector < LL > v(10,0);
        for (int i=0;i <= w;i++) {
             if (9*(n-1)< i)
                 break;
            if ( array[n-1][i] == -1)
                 recur(n-1,i);
        }
        int size=10;
        for ( int i=0;i <= w; i++) {
            int ind= array[n-1][i];
            if (ind !=-1) {
            for (int k=0; k < size; k++ ) {
            if (vec[ind][k]!=0) {
                  if (i==w) {
                    v[k]+=vec[ind][k];
                     continue;
                    }
                   if (k +w- i <=9) 
                   v[k+w-i]+=vec[ind][k];
                    if (k - w+i >=0)
                    v[k-w+i]+=vec[ind][k];
                    }
                }
            }
        }
       
            vec.push_back(v);
           
            array[n][w]=index2++;
            return ;
           
    }
}        
void cal() {
    int i,j;
    FOR_(i,1,20) {
        FOR_ (j,0,200) {
            if (j > (i-1)*9)
                break;
             recur(i,j);
     
        }
    }
}
int main()
{
   
    MEM(array,-1);
    vector < LL > v(10,1);
    v[0]=0;
    PB(vec,v);
    array[1][0]=index2++;
    cal();
    int test;
    scanf("%d",&test);
    while (test--) {
    int n,w;
    scanf("%d%d",&n,&w);
    int indx=array[n][w];
    if (indx==-1) {
        printf("0\n");
        continue;
    }
    LL ret=0;
    
    for (int i=0;i<10;i++) {
        ret= (ret %1000007 + vec[indx][i]%1000007)%1000007;
       // cout<<vec[indx][i]<<" ";
    }
    printf("%lld\n",ret);
}
//	system("pause"); //Windows Only
	return 0;
}
