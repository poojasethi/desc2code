    #include<bits/stdc++.h>
    #define x first
    #define y second
    using namespace std;
    #define dd long long
    struct Point{
    	dd x,y;
    	bool operator <(const Point &p) const {
    		return x < p.x || (x == p.x && y < p.y);
    	}
    };
    /*bool compare(const Point &p,const Point &q)
    {
    	return (p.x<q.x) || (p.x==q.x && p.y<q.y);
    }*/
    double cross(const Point &O, const Point &A, const Point &B)
    {
    	return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
    }
    void convex_hull(vector<Point> P)
    {
    	dd n = P.size(), k = 0;
    	vector<Point> H(2*n);
    	sort(P.begin(), P.end());
    	for (dd i = 0; i < n; ++i) {
    		while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
    		H[k++] = P[i];
    	}
    	for (dd i = n-2, t = k+1; i >= 0; i--) {
    		while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
    		H[k++] = P[i];
    	}
    	H.resize(k-1);
    	/*for(int i=0;i<H.size();i++)
    		cout<<H[i].x<<" "<<H[i].y<<"\n";*/
    	n=k-1;//cout<<n<<"\n";
    	dd area = 0;
        	dd j = n - 1;
        	for (dd i = 0; i < n; i++)
        	{
            	area += ((dd)H[j].x*(dd)H[i].y)-(dd)H[i].x *((dd)H[j].y);
            	j = i;
        	}
     	cout<<abs(area)<<"\n";
    }
    int main()
    {
    	dd t;
    	scanf("%lld",&t);
    	while(t--)
    	{
    		dd n,i,arr[100005];
    		vector<Point>v;
    		scanf("%lld",&n);
    		for(i=0;i<n;i++)
    		{
    			scanf("%lld",&arr[i]);
    		}
    		dd maxx,minn;
    		maxx=arr[n-1];minn=arr[n-1];
    		Point p;p.x=arr[n-2];p.y=arr[n-1];
    		v.push_back(p);//make_pair(arr[n-2],arr[n-1]));
    		maxx=max(arr[n-1],arr[n-2]);minn=min(arr[n-1],arr[n-2]);
    		for(i=n-3;i>=0;i--)
    		{
    			Point q;p.x=q.x=arr[i];p.y=maxx;q.y=minn;
    			v.push_back(p);
    			v.push_back(q);
    			maxx=max(maxx,arr[i]);minn=min(minn,arr[i]);
    		}
    /*		for(i=0;i<v.size();i++)
    			cout<<v[i].x<<" "<<v[i].y<<"\n";*/
    		convex_hull(v);
    	}
    	return 0;
    } 