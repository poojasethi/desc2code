#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#define pi 3.14159
typedef struct v1
{
    long long int x, y;
}vertex;
vertex p0;
long long int process_vertices(long long int *a, long long int n, vertex *v)
{
    long long int count = 0, i, max = a[0], min = a[0];
    for(i = 1; i < n; i++)
    {
        max = (a[i - 1] > max)? a[i - 1]: max;
        min = (a[i - 1] < min)? a[i - 1]: min;
        v[count].x = min;
        v[count++].y = a[i];
        if(max != min)
        {
            v[count].x = max;
            v[count++].y = a[i];
        }
    }
    return count;
}
void swap(vertex *v1, vertex *v2)
{
    vertex temp = *v1;
    *v1 = *v2;
    *v2 = temp;
}
int orientation(vertex p, vertex q, vertex r)
{
    long long int val = (long long int)(q.y - p.y) * (r.x - q.x) - (long long int)(q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0;  // colinear
    return (val > 0)? 1: 2; // clock or counterclockwise wise
}
long long int distSq(vertex p1, vertex p2)
{
    return (long long int)(p1.x - p2.x)*(p1.x - p2.x) + (long long int)(p1.y - p2.y)*(p1.y - p2.y);
}
int compare(const void *vp1, const void *vp2)
{
   vertex *p1 = (vertex *)vp1;
   vertex *p2 = (vertex *)vp2;
 
   // Find orientation
   long long int o = orientation(p0, *p1, *p2);
   if (o == 0)
     return (distSq(p0, *p2) >= distSq(p0, *p1))? -1 : 1;
 
   return (o == 2)? -1: 1;
}
vertex * Convex_Hull(vertex *v, long long int *count)
{
    long long int n = *count, ymin = v[0].y, min = 0, i;
    for(i = 1; i < n; i++)
    {
        if((v[i].y < ymin) || ((v[i].y == ymin) && (v[i].x < v[min].x)))
        {
            ymin = v[i].y;
            min = i;
        }
    }
    swap(&v[0], &v[min]);
    p0 = v[0];
    if(n > 1)
        qsort(&v[1], n - 1, sizeof(vertex), compare);
    long long int m = 1;
    for(i = 1; i < n; i++)
    {
        while((i < n - 1) && orientation(v[0], v[i], v[i + 1]) == 0)
            i++;
        v[m++] = v[i];
    }
    *count = n = m;
    if(n < 3)
        return v;
    vertex *stack = (vertex *)malloc(n * sizeof(vertex));
    stack[0] = v[0];
    stack[1] = v[1];
    stack[2] = v[2];
    m = 2;
    for(i = 3; i < n; i++)
    {
        while(orientation(stack[m-1], stack[m], v[i]) != 2)
            m--;
        stack[++m] = v[i];
    }
    *count = n = ++m;
    free(v);
    return stack;
}
long long int calculate_area(vertex *v, long long int n)
{
    if(n < 3)
        return 0;
    long long int i;
    long long int area = 0;
    for(i = 0; i < n - 1; i++)
    {
        area += (long long int)v[i].x * v[i + 1].y - (long long int)v[i].y * v[i + 1].x;
    }
    area += (long long int)v[i].x * v[0].y - (long long int)v[i].y * v[0].x;
    return (area >= 0)? area: -area;
}
long long int main()
{
    long long int t, n, i, *a, count;
    long long int area;
    vertex *v;
    scanf("%lld", &t);
    while(t--)
    {
        scanf("%lld", &n);
        a = (long long int *)malloc(n * sizeof(long long int));
        for(i = 0; i < n; scanf("%lld", &a[i]), i++);
        v = (vertex *)malloc(2 * n * sizeof(vertex));
        count = process_vertices(a, n, v);
        free(a);
        v = Convex_Hull(v, &count);
        area = calculate_area(v, count);
        free(v);
        printf("%lld\n", area);
    }
    return 0;
}