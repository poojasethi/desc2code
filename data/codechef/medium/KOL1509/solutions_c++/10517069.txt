#include<bits/stdc++.h>
#define ll long long
using namespace std;

vector<pair<ll, ll> > points;
stack<pair<ll, ll> > hull;
void makeFirstPointBottomMost() {

	ll sz = points.size();
	ll yMin = points[0].second, indMin = 0;
	for(int i=1;i<sz;i++) {

		if( points[i].second < yMin || (points[i].second == yMin && points[i].first < points[indMin].first) ) {
			yMin = points[i].second;
			indMin = i;
		}
	}
	swap(points[0], points[indMin]);
}

ll distPointsSq(pair<ll, ll> point1, pair<ll, ll> point2) {
	return (point1.first - point2.first) * (point1.first - point2.first)
			+ (point1.second - point2.second) * (point1.second - point2.second);
}

ll checkOrientation(pair<ll, ll> point0, pair<ll ,ll> point1, pair<ll, ll> point2) {
	return (point1.second - point0.second) * (point2.first - point1.first)
			-	(point1.first - point0.first) * (point2.second - point1.second);
}
bool comparePoints(pair<ll, ll> point1, pair<ll, ll> point2) {

	ll clockwiseOrientation = checkOrientation(points[0], point1, point2);

	if(clockwiseOrientation == 0) {
		return distPointsSq(points[0], point1) < distPointsSq(points[0], point2);
	}
	return clockwiseOrientation > 0;
}

pair<ll, ll> secondHullTop() {
	pair<ll, ll> currTop = hull.top();
	hull.pop();
	pair<ll, ll> secTop = hull.top();
	hull.push(currTop);
	return secTop;
}
void convexHull() {

	/* First find bottom most point if some points have same y then go for left most point among them. */
	makeFirstPointBottomMost();

	/* Sort points on the basis of their angles with bottom most point, if two points make same angle with bottom most point
		i.e. they are collinear to bottom most point then chose point with max distance.  */
	sort(points.begin() + 1, points.end(), comparePoints);

	vector<pair<ll, ll> > tempPoints;
	ll sz = points.size();
	tempPoints.push_back(points[0]);
	for(int i=1;i<sz;i++) {
		while(i < sz-1 && checkOrientation(points[0], points[i], points[i+1]) == 0) {
			i ++;
		}
		tempPoints.push_back(points[i]);
	}

	if(tempPoints.size() < 3) {
		return ;
	}

	hull.push(tempPoints[0]);
	hull.push(tempPoints[1]);
	hull.push(tempPoints[2]);

	sz = tempPoints.size();

	for(int i=3;i<sz;i++) {

		while(hull.size() > 1 && checkOrientation(secondHullTop(), hull.top(), tempPoints[i]) < 0) {
			hull.pop();
		}
		hull.push(tempPoints[i]);
	}

	return ;
}
ll a[100005];
ll minnTill[100005], maxxTill[100005];
int main() {
	ll t;
	cin>>t;
	while(t--) {
		memset(a, sizeof(a), 0);
		memset(minnTill, sizeof(minnTill), 0);
		memset(maxxTill, sizeof(maxxTill), 0);
		points.clear();
		stack<pair<ll, ll> > empty;
   		swap( hull, empty );
		ll n;
		cin>>n;

		ll currMaxx = 0;
		ll currMinn = INT_MAX;
		for(int i=0;i<n;i++) {
			cin>>a[i];
			currMaxx = max(currMaxx, a[i]);
			currMinn = min(currMinn, a[i]);
			minnTill[i] = currMinn;
			maxxTill[i] = currMaxx;
		}
		for(int i=1;i<n;i++) {
			points.push_back(make_pair(minnTill[i-1], a[i]));
			points.push_back(make_pair(maxxTill[i-1], a[i]));
		}
		// for(int i=0;i<n;i++) {
		// 	ll x, y;
		// 	cin>>x>>y;
		// 	points.push_back(make_pair(x, y));
		// }

		convexHull();

		vector<pair<ll, ll> > v;
		while(hull.size()) {
			pair<ll, ll> pt = hull.top();
			hull.pop();
			//cout<<pt.first<<" "<<pt.second<<"\n";

			v.push_back(make_pair(pt.first, pt.second));
		}

		ll ans = 0;
		ll sz = v.size();
		for(int i=1;i<sz;i++) {
			ans += (v[i-1].first*v[i].second) - (v[i].first*v[i-1].second);
		}
		if(sz != 0) {
			ans += (v[sz-1].first*v[0].second) - (v[sz-1].second*v[0].first);
		}
		cout<<abs(ans)<<"\n";
	}
	return 0;
}