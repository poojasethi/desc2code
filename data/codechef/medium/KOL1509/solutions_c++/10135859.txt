
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Random;

public class Main {
	
	
	public static class Point {
		public int x,y;
		
		public Point (int x, int y) {
			this.x = x;
			this.y = y;
		}
		
		@Override 
		public String toString () {
			return "(" + x + "," + y + ")";
		} 
	}
	
	
	
	public static class PolarAngleComparator implements Comparator<Point>  {
		protected final Point reference;
		
		public PolarAngleComparator (Point ref) {			
			this.reference = ref;
		}
		
		@Override
		public int compare(Point p0, Point p1) {
			//positive if p0 > p1
			//0 p0 = p1
			//negative p0 < p1
			//seems like using tan of the angle can be faster then cos. Let s try
			
			long dx0 = p0.x - reference.x;
			long dx1 = p1.x - reference.x;
			
			long dy0 = p0.y - reference.y;
			long dy1 = p1.y - reference.y;
			
			//case 1 - the points are on different sides from reference.x
			if (dx0 < 0 && dx1 > 0) return 1;
			if (dx0 > 0 && dx1 < 0) return -1;
			
			if (dx0 == 0) {
				//we need the sort to be stable
				if (dy0 == 0) {
					if (dx1 == 0 && dy1 ==0) return 0;
					return -1;
				}
				if (dx1 == 0) {
					if (dy1 == 0) return 1;
					if (dy0 > dy1) return 1;
					if (dy0 < dy1) return -1;
					return 0;
				}
				if (dx1 > 0) return 1;
				if (dx1 < 0) return -1;
				
			}
			if (dx1 == 0) {
				//we need the sort to be stable
				if (dy1 == 0) return 1;
				if (dx0 > 0) return -1;
				if (dx0 < 0) return 1;
			}
			
			//here they are strictly on the same side from reference.x 
			//dx0 > 0 dx1 > 0
			
			//double tg0 = dy0 / dx0;
			//double tg1 = dy1 / dx1;
			
			//if both points are on the right from reference
			//tg0 > tg1 is equivalent to
			long tgdiff = dy0 * dx1 - dy1 * dx0; 
			if (dx0 > 0) {
				if (tgdiff > 0) return 1;
				if (tgdiff < 0) return -1;
				long diff = dx1-dx0; 
				if (diff > 0) return -1;
				else if (diff < 0) return 1;
				
				return 0;
			}
			
			//dx0 < 0 and dx1 < 0
			
			//double tg0 = -dy0 / dx0;
			//double tg1 = -dy1 / dx1;
			
			if (tgdiff > 0) return 1;
			if (tgdiff < 0) return -1;
			
			long diff = dx1-dx0; 
			if (diff > 0) return -1;
			else if (diff < 0) return 1;
									
			return 0;
		}
		
	}
	
		
	public static long ccw (Point p1, Point p2, Point p3) {
		return (((long)p2.x)-((long)p1.x)) * (((long)p3.y)-((long)p1.y)) - (((long)p2.y)-((long)p1.y)) * (((long)p3.x)-((long)p1.x));
	}
		
	public static LinkedList<Point> grahamScan (Point[] points, Point ref) {
		
		PolarAngleComparator comparator = new PolarAngleComparator(ref);
		
		Arrays.sort (points, comparator);
			
		LinkedList<Point> list = new LinkedList<Point> ();
		ListIterator<Point> listIterator = list.listIterator();
		listIterator.add(points[0]);
		listIterator.add(points[1]);
		listIterator.add(points[2]);
		//we keep the iterator always after the top
		
		Point top = points[2];
		Point nextToTop = points[1];
		
		for (int i = 3; i < points.length; i++) {
			//we discard only the right turns
			while (ccw (nextToTop, top, points[i]) <= 0) {
				
				listIterator.previous();
				listIterator.remove ();
				top = listIterator.previous();
				if (listIterator.hasPrevious()) {
					nextToTop = listIterator.previous();
					//return the cursor to the good position after top
					listIterator.next();
					listIterator.next();
				}
				else {
					listIterator.next();
					break;
				}
				//the iterator is still after the top
			}
			listIterator.add(points[i]);
			nextToTop = top;
			top = points[i];			
		}
		
		return list;
	}
	
	public static void swap (Point[] points, int i, int j) {
		Point tmp = points[i];
		points[i] = points[j];
		points[j] = tmp;
	}
	
	public static long makeTest (int N, int[] A) {
		
		if (N <= 2 ) return 0;
		Point[] points = new Point[2 * (N-1)];
		//fill the stack with the potential vertices of the convex hull
		int minx = A[0], maxx = A[0];
		int miny = A[1], maxy = A[1];
		
		Point ref = new Point (A[0], A[1]);
		
		for (int i = 1; i < N; i++) {
			//plant trees from xmin to xmax with y = A[i]
		
			
			points[2*(N-1)-i] = new Point (minx, A[i]);
			points[i-1] = new Point (maxx, A[i]);
			
			
			//update xmin xmax
			if (A[i] > maxy) maxy = A[i];
			else if (A[i] <= miny) {
				miny = A[i];
				//we have just added a point with new miny.
				if (ref.y > miny || ((ref.y == miny) && (minx < ref.x))) {
					ref.x = minx;
					ref.y = miny;		
					swap (points, 0, 2*(N-1)-i);
				}
			}
			if (miny < minx) minx = miny;
			if (maxy > maxx)maxx = maxy;
		}				
	
		
		LinkedList<Point> convexList = grahamScan(points, ref);
		
		//now compute the area		
		long area = 0;
		
		
		Point p0 =  convexList.getFirst();
		Point p1 =  convexList.getLast();		
				
		area += ((long)(((long)p0.x) + ((long)p1.x))) * ((long)(((long)p0.y) - ((long)p1.y)));
				
		ListIterator<Point> listIterator = convexList.listIterator();
		p0 = listIterator.next();
		while (listIterator.hasNext()) {
			p1 = listIterator.next();
			
			area += ((long)(((long)p0.x) + ((long)p1.x))) * ((long)(((long)p1.y) - ((long)p0.y)));
			
			p0 = p1;
		}
	
		return area;
	}
	

	public static void main (String[] args) {
		try {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		
		int nTests = Integer.valueOf(reader.readLine());
		for (int t = 0; t < nTests; t++) {
			int N = Integer.valueOf(reader.readLine());
			int[] A = new int[N];
			String[] strTastes = reader.readLine().split("\\s");
			//read A
			for (int j = 0; j < N; j++) {
				A[j] = Integer.valueOf(strTastes[j]);
			}
		
			long result = makeTest(N, A);
			System.out.println(result);
			
		}
		reader.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}		
	}
}
