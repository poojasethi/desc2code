#include <iostream>
#include <cstdio>
#include <string>
#include <set>
#include <cmath>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>

using namespace std;
 
struct Point
{
    long long x;
    long long y;
    
    bool operator <(const Point &p) const {
        return x < p.x || (x == p.x && y < p.y);
    }
};
 
inline void getInt(long long& a){
	register char c = getchar_unlocked();
	a = 0;
	while( c<48 || c>57 ) c = getchar_unlocked();
	while( c>47 && c<58 ){
		a = (a << 1) + (a << 3) + c - 48;
		c = getchar_unlocked();
	}
}
 
std::vector<Point> getPoints(std::vector<long long>& inputList)
{
    std::vector<Point> pointList;
    for(long long i = 0; i < inputList.size(); i++)
    {
        for(long long j = i + 1; j < inputList.size(); j++)
        {
            Point point;
            point.x = inputList[i];
            point.y = inputList[j];
            pointList.push_back(point);
        }
    }
    return pointList;
}
 
long long getCross(const Point &O, const Point &A, const Point &B)
{
    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}
 
std::vector<Point> convexHull(std::set<Point>& pointList)
{
    long long n = pointList.size(), k = 0;
    std::vector<Point> polygonPoints(2 * n);
    
    //sort points -- already sorted
    // sort(pointList.begin(), pointList.end());
    
    //lower hull
    auto iter = pointList.begin();
    for(long long i = 0; i < n; i++)
    {
        while(k >= 2 && getCross(polygonPoints[k - 2], polygonPoints[k - 1], *iter) <= 0)
        {
            k--;
        }
        
        polygonPoints[k++] = *iter;
        std::advance(iter, 1);
    }
    
    //upper hull
    iter = pointList.end();
    std::advance(iter, -1);
    for(long long i = n - 2, t = k + 1; i >= 0; i--)
    {
        std::advance(iter, -1);
        while(k >= t && getCross(polygonPoints[k - 2], polygonPoints[k - 1], *iter) <= 0)
        {
            k--;
        }
        
        polygonPoints[k++] = *iter;
    }
    
    polygonPoints.resize(k - 1);
    return polygonPoints;
}
 
long long getArea(std::vector<Point>& polygonPoints)
{
    long long area = 0;
    
    if(polygonPoints.size() <= 2)
        return 0;
        
    long long i;
    for(i = 0; i < polygonPoints.size() - 1; i++)
    {
        area += polygonPoints[i].x * polygonPoints[i+1].y - polygonPoints[i].y * polygonPoints[i+1].x;
    }
    area += polygonPoints[i].x * polygonPoints[0].y - polygonPoints[i].y * polygonPoints[0].x;
    
    return area;
}
 
int main() {
    
    int T;
    
    std::cin>>T;
    
    while(T-- > 0)
    {
        long long N, NMin, NMax;
        
        getInt(N);
        
        //get input
        std::vector<long long> inputList;
        std::set<Point> pointList;
        for(long long i = 0; i < N; i++)
        {
            long long value;
            getInt(value);
            inputList.push_back(value);
            
            if(i == 0)
            {
                NMin = value;
                NMax = value;
            } else {
                Point pointA;
                pointA.x = NMin;
                pointA.y = value;
                pointList.insert(pointA);
                
                Point pointB;
                pointB.x = NMax;
                pointB.y = value;
                pointList.insert(pointB);
                
                if(value < NMin)
                {
                    NMin = value;
                } else if(value > NMax)
                {
                    NMax = value;
                }
            }
        }
        
        std::vector<Point> polygonPoints = convexHull(pointList);
        
        std::cout<<getArea(polygonPoints)<<std::endl;
        
    }
}
