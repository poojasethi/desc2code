#include<iostream>
#include<vector>
#include<stdlib.h>
#include<algorithm>
using namespace std;

vector<pair<int,int> > st;
vector<pair<long long,long long> > hull;
long long arr[200000];
long long harr[200000];
long long larr[200000];
long long ans;

struct Point
{
        long long x;
        long long y;
};

Point p0;

// A utility function to find next to top in a stack
Point nextToTop(vector<Point> &S)
{
    Point p = S.back();
    S.pop_back();
    Point res = S.back();
    S.push_back(p);
    return res;
}

// A utility function to swap two points
int swap(Point &p1, Point &p2)
{
    Point temp = p1;
    p1 = p2;
    p2 = temp;
}

// A utility function to return square of distance between p1 and p2
long long dist(Point p1, Point p2)
{
    return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
}

int orientation(Point p, Point q, Point r)
{
    long long val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);

    if (val == 0)
        return 0; // colinear
    return (val > 0) ? 1 : 2; // clock or counterclock wise
}

// A function used by library function qsort() to sort an array of
// points with respect to the first point
int compare(const void *vp1, const void *vp2)
{
    Point *p1 = (Point *) vp1;
    Point *p2 = (Point *) vp2;

    // Find orientation
    int o = orientation(p0, *p1, *p2);
    if (o == 0)
        return (dist(p0, *p2) >= dist(p0, *p1)) ? -1 : 1;

    return (o == 2) ? -1 : 1;
}

// Prints convex hull of a set of n points.
void convexHull(Point points[], int n)
{
    // Find the bottommost point
    long long ymin = points[0].y, min = 0;
    for (int i = 1; i < n; i++)
    {
        long long y = points[i].y;

        // Pick the bottom-most or chose the left most point in case of tie
        if ((y < ymin) || (ymin == y && points[i].x < points[min].x))
            ymin = points[i].y, min = i;
    }

    // Place the bottom-most point at first position
    swap(points[0], points[min]);

    // Sort n-1 points with respect to the first point.  A point p1 comes
    // before p2 in sorted ouput if p2 has larger polar angle (in
    // counterclockwise direction) than p1
    p0 = points[0];
    qsort(&points[1], n - 1, sizeof(Point), compare);

    // Create an empty stack and push first three points to it.
    vector<Point> S;
    S.push_back(points[0]);
    S.push_back(points[1]);
    S.push_back(points[2]);

    // Process remaining n-3 points
    for (int i = 3; i < n; i++)
    {
        // Keep removing top while the angle formed by points next-to-top,
        // top, and points[i] makes a non-left turn
        while (S.size()>1&&orientation(nextToTop(S), S.back(), points[i]) != 2)
            S.pop_back();
        S.push_back(points[i]);
    }

        ans=0;
        int n1=S.size();
        for(int i=0;i<S.size();i++)
        {
            ans+=S[i].x*S[(i+1)%n1].y-S[i].y*S[(i+1)%n1].x;
        }
        if(ans<0)
            cout<<-1*ans<<endl;
        else
            cout<<ans<<endl;

}

Point points[200000];
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        for(int i=0;i<n;i++)
            cin>>arr[i];
        harr[n-2]=arr[n-1];
        larr[n-2]=arr[n-1];

        for(int i=n-3;i>=0;i--)
        {
            larr[i]=min(larr[i+1],arr[i+1]);
            harr[i]=max(harr[i+1],arr[i+1]);
        }

        int n1=0;
        for(int i=0;i<n-1;i++)
        {
            points[2*i].x=arr[i];
            points[2*i].y=larr[i];
            points[2*i+1].x=arr[i];
            points[2*i+1].y=harr[i];
            n1+=2;
        }

        if(n1<=2)
            cout<<0<<endl;
        else
        {
            convexHull(points, n1);
           // cout<<ans<<endl;
        }
    }


    return 0;

}
