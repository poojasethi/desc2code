/* convex hull
 * shoelace formula for area of polygon */
#include<bits/stdc++.h>

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define UB(X,v) upper_bound(X.begin(), X.end(), v)
#define LB(X,v) lower_bound(X.begin(), X.end(), v)

#define RI(a) scanf("%d", &a)
#define RIL(a) scanf("%lld", &a)
#define PI(a) printf("%d\n", a)
#define PIL(a) printf("%lld\n", a)

#define SZ(a) (int)(a.size())
#define CLR(a) a.clear()

#define SET(a,b) memset(a, b, sizeof(a))
#define LET(a,b) __typeof(a.begin()) b;

#define TR(a,it) for(__typeof(a.begin()) it = a.begin(); it != a.end(); it++)

#define REP(i,l,h) for(int i=(l); i <= (h); i++)
#define DEP(i,h,l) for(int i=(h);i >= (l); i--)

#define ALL(a) a.begin(), a.end()

#define TC()  int tc; cin >> tc

#define PRSNT(a, e) (a.find(e) != a.end())

#define MINH priority_queue<int, vector<int>, greater<int> >

#define N 100001
#define MOD 1000000007

using namespace std;

#define DBG(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1) {
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> PII;
typedef vector< vector<int> > VVI;
typedef vector< pair<int, int> > VPII;
typedef vector<int> VI;

struct Point
{
    ULL x, y;
};
 
vector< Point > hull;

// A globle point needed for  sorting points with reference
// to  the first point Used in compare function of qsort()
Point p0;
 
// A utility function to find next to top in a stack
Point nextToTop(stack<Point> &S)
{
    Point p = S.top();
    S.pop();
    Point res = S.top();
    S.push(p);
    return res;
}
 
// A utility function to swap two points
int swap(Point &p1, Point &p2)
{
    Point temp = p1;
    p1 = p2;
    p2 = temp;
}
 
// A utility function to return square of distance
// between p1 and p2
LL distSq(Point p1, Point p2)
{
    return (p1.x - p2.x)*(p1.x - p2.x) +
          (p1.y - p2.y)*(p1.y - p2.y);
}
 
// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are colinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Point p, Point q, Point r)
{
    LL val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
 
    if (val == 0) return 0;  // colinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}
 
// A function used by library function qsort() to sort an array of
// points with respect to the first point
int compare(const void *vp1, const void *vp2)
{
   Point *p1 = (Point *)vp1;
   Point *p2 = (Point *)vp2;
 
   // Find orientation
   int o = orientation(p0, *p1, *p2);
   if (o == 0)
     return (distSq(p0, *p2) >= distSq(p0, *p1))? -1 : 1;
 
   return (o == 2)? -1: 1;
}
 
// Prints convex hull of a set of n points.
int convexHull(vector< Point > points, int n)
{
   // Find the bottommost point
   ULL ymin = points[0].y, min = 0;
   for (int i = 1; i < n; i++)
   {
     LL y = points[i].y;
 
     // Pick the bottom-most or chose the left
     // most point in case of tie
     if ((y < ymin) || (ymin == y &&
         points[i].x < points[min].x))
        ymin = points[i].y, min = i;
   }
 
   // Place the bottom-most point at first position
   swap(points[0], points[min]);
 
   // Sort n-1 points with respect to the first point.
   // A point p1 comes before p2 in sorted ouput if p2
   // has larger polar angle (in counterclockwise
   // direction) than p1
   p0 = points[0];
   qsort(&points[1], n-1, sizeof(Point), compare);
 
   // If two or more points make same angle with p0,
   // Remove all but the one that is farthest from p0
   // Remember that, in above sorting, our criteria was
   // to keep the farthest point at the end when more than
   // one points have same angle.
   int m = 1; // Initialize size of modified array
   for (int i=1; i<n; i++)
   {
       // Keep removing i while angle of i and i+1 is same
       // with respect to p0
       while (i < n-1 && orientation(p0, points[i],
                                    points[i+1]) == 0)
          i++;
 
 
       points[m] = points[i];
       m++;  // Update size of modified array
   }
 
   // If modified array of points has less than 3 points,
   // convex hull is not possible
   if (m < 3) return 0;
 
   // Create an empty stack and push first three points
   // to it.
   stack<Point> S;
   S.push(points[0]);
   S.push(points[1]);
   S.push(points[2]);
 
   // Process remaining n-3 points
   for (int i = 3; i < m; i++)
   {
      // Keep removing top while the angle formed by
      // points next-to-top, top, and points[i] makes
      // a non-left turn
      while (orientation(nextToTop(S), S.top(), points[i]) != 2)
         S.pop();
      S.push(points[i]);
   }
 
   // Now stack has the output points, print contents of stack
   while (!S.empty())
   {
       Point p = S.top();
       hull.PB(p);
       S.pop();
   }
   return 1;
}

LL twiceShoelaceArea(vector< Point > points, int n) {
    LL area=0;
 
    // Calculate value of shoelace formula
    int j = n - 1;
    for (int i = 0; i < n; i++)
    {
        area += (points[j].x*points[i].y) - (points[j].y* points[i].x);
        j = i;  // j is previous vertex to i
    }
    
    // Return absolute value
    return abs(area);
}

int main()
{
    TC();
    ULL a,n,mn,mx;
    while(tc--) {
        vector< Point > points;
        CLR(hull);
        mn=ULLONG_MAX;
        mx=0;
        cin>>n;
        REP(i,0,n-1) {
            cin>>a;
            if(i>0) {
                Point p;
                p.x=mn,p.y=a;
                points.PB(p);
                Point q;
                q.x=mx,q.y=a;
                points.PB(q);
            }
            mn=min(mn,a);
            mx=max(mx,a);
        }
        // TR(points,it) DBG((*it).x,(*it).y);
        if(SZ(points)<3) {
            cout<<0<<endl;
            continue;
        }
        if(convexHull(points, SZ(points))==0) {
            cout<<0<<endl;
        }
        else {
            cout<<twiceShoelaceArea(hull,SZ(hull))<<endl;
        }
    }
    return 0;
}
