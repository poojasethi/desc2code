#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <stack>

#define MAX 100009
#define MOD (int)(1e9 + 7)
#define INF 987654321
//#define scanf scanf_s
using namespace std;

struct vec
{
	long long x, y;
	vec operator-(const vec& r) const { return vec{ x - r.x, y - r.y }; }
	long long norm() { return x*x + y*y; }
	long long cross(const vec& r) const { return x*r.y - y*r.x; }
};

long long ccw(vec a, vec b)
{
	return a.cross(b);
}

long long ccw(vec p, vec a, vec b)
{
	return ccw(a - p, b - p);
}

int N;
int arr[MAX], idx[MAX];
vector<vec> points;

void init()
{
	scanf("%d", &N);
	for (int i = 0; i < N; ++i)
	{
		scanf("%d", &arr[i]);
		idx[i] = i;
	}
}

bool cmp(int a, int b)
{
	return arr[a] < arr[b];
}

bool cmp2(vec& a, vec& b)
{
	long long x = ccw(points[0], a, b);
	if (x == 0)
		return (a - points[0]).norm() < (b - points[0]).norm();
	return x > 0;
}

vector<vec> GrahamScan()
{
	int n = points.size();
	int start = 0;
	for (int i = 0; i < n; ++i)
	{
		if (points[start].y > points[i].y)
			start = i;
		else if (points[start].y == points[i].y && points[start].x > points[i].x)
			start = i;
	}

	swap(points[0], points[start]);
	sort(points.begin() + 1, points.end(), cmp2);

	vector<vec> hull;
	for (int i = 0; i < n; ++i)
	{
		while (hull.size() >= 2 && ccw(hull[hull.size() - 2], hull.back(), points[i]) <= 0)
			hull.pop_back();
		hull.push_back(points[i]);
	}
	return hull;
}

long long area(vector<vec>& points)
{
	int n = points.size();
	long long ret = 0;
	for (int i = 0; i < n; ++i)
	{
		int j = (i + 1) % n;
		ret += points[i].cross(points[j]);
	}
	return abs(ret);
}

void solve()
{
	sort(idx, idx + N, cmp);

	points.clear();
	int l = 0, r = N - 1;
	for (int i = 0; i < N - 1; ++i)
	{
		while (i >= idx[l])
			++l;
		while (i >= idx[r])
			--r;
		points.push_back({ arr[i], arr[idx[l]] });
		if (arr[idx[l]] != arr[idx[r]])
			points.push_back({ arr[i], arr[idx[r]] });
	}

	vector<vec> hull = GrahamScan();
	printf("%lld\n", area(hull));
}

int main()
{
	int tc = 1;
	scanf("%d", &tc);

	for (int i = 0; i < tc; ++i)
	{
		init();
		//printf("Case #%d: ", i + 1);
		solve();
	}
	return 0;
}