// Compute the 2D convex hull of a set of polls using the monotone chain
// algorithm. Eliminate redundant points from the hull if REMOVE_REDUNDANT is
// #defined.
//
// Running time: O(n log n)
//
// INPUT: a vector of input points, unordered.
// OUTPUT: a vector of points in the convex hull, counterclockwise, starting
// with bottommost/leftmost point
#include <cstdio>
#include <cassert>
#include <vector>
#include <algorithm>
#include <cmath>
// BEGIN CUT
#include <map>
// END CUT
#define ll long long
using namespace std;
#define REMOVE_REDUNDANT
typedef ll T;
const T EPS = 1e-7;
struct PT
{
    T x, y;
    PT() {}
    PT(T x, T y) : x(x), y(y) {}
    bool operator<(const PT &rhs) const
    {
        return make_pair(y,x) < make_pair(rhs.y,rhs.x);
    }
    bool operator==(const PT &rhs) const
    {
        return make_pair(y,x) == make_pair(rhs.y,rhs.x);
    }
};
T cross(PT p, PT q)
{
    return p.x*q.y-p.y*q.x;
}
T area2(PT a, PT b, PT c)
{
    return cross(a,b) + cross(b,c) + cross(c,a);
}
#ifdef REMOVE_REDUNDANT
bool between(const PT &a, const PT &b, const PT &c)
{
    return (fabs(area2(a,b,c)) < EPS && (a.x-b.x)*(c.x-b.x) <= 0 && (a.y-b.y)*(c.y-b.y) <= 0);
}
#endif
void ConvexHull(vector<PT> &pts)
{
    sort(pts.begin(), pts.end());
    pts.erase(unique(pts.begin(), pts.end()), pts.end());
    vector<PT> up, dn;
    for (ll i = 0; i < pts.size(); i++)
    {
        while (up.size() > 1 && area2(up[up.size()-2], up.back(), pts[i]) >= 0) up.pop_back();
        while (dn.size() > 1 && area2(dn[dn.size()-2], dn.back(), pts[i]) <= 0) dn.pop_back();
        up.push_back(pts[i]);
        dn.push_back(pts[i]);
    }
    pts = dn;
    for (ll i = (ll) up.size() - 2; i >= 1; i--) pts.push_back(up[i]);
#ifdef REMOVE_REDUNDANT
    if (pts.size() <= 2) return;
    dn.clear();
    dn.push_back(pts[0]);
    dn.push_back(pts[1]);
    for (ll i = 2; i < pts.size(); i++)
    {
        if (between(dn[dn.size()-2], dn[dn.size()-1], pts[i])) dn.pop_back();
        dn.push_back(pts[i]);
    }
    if (dn.size() >= 3 && between(dn.back(), dn[0], dn[1]))
    {
        dn[0] = dn.back();
        dn.pop_back();
    }
    pts = dn;
#endif
}

// This code computes the area or centroid of a (possibly nonconvex)
// polygon, assuming that the coordinates are listed in a clockwise or
// counterclockwise fashion. Note that the centroid is often known as
// the "center of gravity" or "center of mass".
ll ComputeSignedArea(const vector<PT> &p)
{
    ll area = 0;
    for(ll i = 0; i < p.size(); i++)
    {
        ll j = (i+1) % p.size();
        area += p[i].x*p[j].y - p[j].x*p[i].y;
    }
    return area;
}

ll ComputeArea(const vector<PT> &p)
{
    return fabs(ComputeSignedArea(p));
}
// BEGIN CUT
// The following code solves SPOJ problem #26: Build the Fence (BSHEEP)
#define LM 100007
#define pb push_back
#define inf 1e18
ll pnt[LM],Min[LM],Max[LM],n;
vector<PT> h;
int main()
{
    ll t;
    scanf("%lld", &t);
    for (ll caseno = 0; caseno < t; caseno++)
    {
        h.clear();
        scanf("%lld", &n);
        for (ll i = 0; i < n; i++) scanf("%lld",pnt+i);
        ll mn = inf,mx = -inf;
        for(ll i = n-1;i>=0;--i)
        {
            Min[i] = mn;
            Max[i] = mx;
//            printf("%d %d\n",mn,mx);
            mn = min(pnt[i],mn);
            mx = max(pnt[i],mx);
        }

        for(ll i=0;i<n-1;++i)
        {
//            printf("%d %d %d\n",mn,mx,pnt[i]);
            h.pb(PT(pnt[i],Min[i]));
            h.pb(PT(pnt[i],Max[i]));
        }

//        for(int i=0;i<h.size();++i)
//        {
//            printf("%d %d\n",h[i].x,h[i].y);
//        }
//        printf("\n");

        ConvexHull(h);
        printf("%lld\n",ComputeArea(h));
    }
    return 0;
}
// END CUT
