/*
https://www.codechef.com/problems/KOL1509
Tag: Convex Hull
---This Program gives the 2*Area with Minimum Perimeter which covers all the vertices---
Given an array A of size N. Vertices are (A[i],A[j]) such that i<j
Input Format
------------
The first line contains T, the number of test cases to follow.
The first line of each test case contains an integer N, the size of the array.
The second line of the test case contains N space-separated integers.
            ----------------------------------
Output Format
-------------
For each test case, output the value equal to two times the area, rounded to the nearest integer,
surrounded by the fence when using the minimum length of net to surround all the trees.
            ----------------------------------
*/
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#define pi 3.14159
typedef struct v1
{
    long long int x, y;
}vertex;
vertex p0;
//Find left most and right most vertices for each y-coordinate. And collect all such vertices
long long int process_vertices(long long int *a, long long int n, vertex *v)
{
    long long int count = 0, i, max = a[0], min = a[0];
    for(i = 1; i < n; i++)
    {
        max = (a[i - 1] > max)? a[i - 1]: max;
        min = (a[i - 1] < min)? a[i - 1]: min;
        v[count].x = min;
        v[count++].y = a[i];
        if(max != min)
        {
            v[count].x = max;
            v[count++].y = a[i];
        }
    }
    return count;
}
//Swap two vertices
void swap(vertex *v1, vertex *v2)
{
    vertex temp = *v1;
    *v1 = *v2;
    *v2 = temp;
}
// To find orientation of ordered triplet (p, q, r)
int orientation(vertex p, vertex q, vertex r)
{
    long long int val = (long long int)(q.y - p.y) * (r.x - q.x) - (long long int)(q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0;  // colinear
    return (val > 0)? 1: 2; // clock or counterclockwise wise
}
// To find distance between the vertices p1 and p2
long long int distSq(vertex p1, vertex p2)
{
    return (long long int)(p1.x - p2.x)*(p1.x - p2.x) + (long long int)(p1.y - p2.y)*(p1.y - p2.y);
}
// Compare function to be used by built in qsort()
int compare(const void *vp1, const void *vp2)
{
   vertex *p1 = (vertex *)vp1;
   vertex *p2 = (vertex *)vp2;

   // Find orientation
   long long int o = orientation(p0, *p1, *p2);
   if (o == 0)
     return (distSq(p0, *p2) >= distSq(p0, *p1))? -1 : 1;

   return (o == 2)? -1: 1;
}
//Returns the Vertices at Convex Hull and Updates No. of Vertices
vertex * Convex_Hull(vertex *v, long long int *count)
{
    long long int n = *count, ymin = v[0].y, min = 0, i;
	//Finding Bottom Most vertex, In case of tie choose left most vertex
    for(i = 1; i < n; i++)
    {
        if((v[i].y < ymin) || ((v[i].y == ymin) && (v[i].x < v[min].x)))
        {
            ymin = v[i].y;
            min = i;
        }
    }
	//Place that vertex at first
    swap(&v[0], &v[min]);
	//Sort in ascending order of slopes of vertices with respect to the first vertex
    p0 = v[0];
    if(n > 1)
        qsort(&v[1], n - 1, sizeof(vertex), compare); //built in qsort() function
	//Delete other vertices which are not furthest after above step
    long long int m = 1; //Modified size of array
    for(i = 1; i < n; i++)
    {
        while((i < n - 1) && orientation(v[0], v[i], v[i + 1]) == 0)
            i++;
        v[m++] = v[i]; //m is modified size of array
    }
    *count = n = m;
	//If size is less than 3 then no Convex-Hull possible
    if(n < 3)
        return v;
	//Creating Convex-Hull
    vertex *stack = (vertex *)malloc(n * sizeof(vertex));
    stack[0] = v[0];
    stack[1] = v[1];
    stack[2] = v[2];
    m = 2;
    for(i = 3; i < n; i++)
    {
        while(orientation(stack[m-1], stack[m], v[i]) != 2)
            m--;
        stack[++m] = v[i];
    }
    *count = n = ++m;
    free(v);
    return stack;
}
//Calculate 2*area of the polygon given the set of vertices 'v' and count 'n'
long long int calculate_area(vertex *v, long long int n)
{
    if(n < 3)
        return 0;
    long long int i;
    long long int area = 0;
    for(i = 0; i < n - 1; i++)
    {
        area += (long long int)v[i].x * v[i + 1].y - (long long int)v[i].y * v[i + 1].x;
    }
    area += (long long int)v[i].x * v[0].y - (long long int)v[i].y * v[0].x;
    return (area >= 0)? area: -area;
}
long long int main()
{
    long long int t, n, i, *a, count;
    long long int area;
    vertex *v;
    scanf("%lld", &t);
    while(t--)
    {
        scanf("%lld", &n);
        a = (long long int *)malloc(n * sizeof(long long int));
        for(i = 0; i < n; scanf("%lld", &a[i]), i++);
        v = (vertex *)malloc(2 * n * sizeof(vertex));
        count = process_vertices(a, n, v);
        free(a);
        v = Convex_Hull(v, &count);
        area = calculate_area(v, count);
        free(v);
        printf("%lld\n", area);
    }
    return 0;
}

