#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb push_back
#define mp make_pair
#define MOD 1000000007
#define PI 3.1415926535897932
#define pii pair < ll,ll > 
#define fi first
#define se second
const ll inf=1000000000000000009;

struct node
{
	ll xx;
	ll yy;
};
node points[1000009];
node hull[1000009];
ll ar[100009];
ll phull,n;// phull contains the counts of points added in the list of hull
bool cmp(node a,node b)
{
	if(a.xx<b.xx)
	return true;
	else if(a.xx==b.xx)
	{
		if(a.yy<b.yy)
		return true;
		return false;
	}
	return false;
}	
//check for counter clockwise direction
//	   A--->B this means clockwise   :P    Cross product is AO X BA is positive  FOR COUNTER CW= 	
//    /\									( (A.x-O.x)i +(A.y-O.y)j ) X ((B.x-A.x)i +(B.y-A.y)j)
//   O/										(A.x-O.x)*(B.y-A.y) - (A.y-O.y)*(B.x-A.x)   >0  FOR CCW...
ll counter_clockwise_check(node oo,node aa,node bb)
{
	ll ans=(aa.xx-oo.xx)*(bb.yy-aa.yy) - (aa.yy-oo.yy)*(bb.xx-aa.xx);
	return ans;
}
void calculate_hull()
{
	ll i,j,t=2;
	for(i=0;i<n;i++)
	{
		while(phull>=t&&counter_clockwise_check(hull[phull-2],hull[phull-1],points[i])<=0)//lower hull
		{
			phull--;
		}
		hull[phull++]=points[i];
	}
	t=phull+1;
	for(i=n-2;i>=0;i--)
	{
		while(phull>=t&&counter_clockwise_check(hull[phull-2],hull[phull-1],points[i])<=0)//upper hull
		{
			phull--;
		}
		hull[phull++]=points[i];
	}
	phull--;
}
int main()
{   
	int t;
	scanf("%d",&t);
	while(t--)
	{
		ll m;
		phull=0;
		scanf("%lld",&m);
		ll i,j,a,b;
		for(i=0;i<m;i++)
		scanf("%lld",&ar[i]);

		n=0;
		ll maxele=ar[m-1],minele=ar[m-1];
		for(i=m-2;i>=0;i--)
		{
			points[n++].xx=ar[i];
			points[n-1].yy=maxele;
			points[n++].xx=ar[i];
			points[n-1].yy=minele;
			minele=min(minele,ar[i]);
			maxele=max(maxele,ar[i]);
		}
		sort(points,points+n,cmp);
		calculate_hull();
		//Points are in clockwise order: starting from the leftmost bottommost point 
		ll ans=0;
		for(i=0;i<phull-1;i++)
		ans=ans+(hull[i].xx*hull[i+1].yy-hull[i+1].xx*hull[i].yy);
		ans=ans+(hull[i].xx*hull[0].yy-hull[0].xx*hull[i].yy);
		printf("%lld\n",ans);
	}
	return 0;
}