'''
Chef and Integers

Problem code: INTEG

Chef has an array of N integers. He wants to play a special game. In
this game he needs to make all the integers in the array greater or
equal to 0.

Chef can use two types of operations. The first type is to increase
all the integers of the given array by 1, but it costs X coins. The
operation of the second type is to add 1 to only one integer of the
given array and to use this operation you need to pay 1 coin. You need
to calculate the minimal cost to win this game (to make all integers
greater or equal to 0)

Input

The first line of the input contains an integer N denoting the number
of elements in the given array. The second line contains N
space-separated integers A1, A2, ..., AN denoting the given array. The
third line contains number X - cost of the first type operation.

Output

For each test case, output a single line containing minimal cost
required to make all the integers greater than or equal to zero.

Constraints

1 <= N <= 10^5
-10^9 <= Ai <= 10^9
0 <= X <= 10^9

Example

Input:
3
-1 -2 -3
2

Output:
5

Explanation

Example case 1: Use the first type operation twice and the second type
once.

Author:         furko
Tester:         xcwgf666
Editorial       http://discuss.codechef.com/problems/INTEG
Date Added:     18-06-2013
Time Limit:     1 sec
Source Limit:   50000 Bytes
'''

from sys import stdin

#### codechef 2013-09 Challenge Chef and Integers
#
# Given an array which has some negative numbers in it. The goal is to
# make all elements >= 0, with two types of operation:
# 1) increase all elements by 1 at cost of X
# 2) increase 1 element by 1 at cost of 1
# The question asks for the min cost to archieve the goal.
##
def solve(A,X):
    A = sorted(A)
    n = len(A)
    ans = bar = 0; last = n-1
    while True:
        j = None
        for i in xrange(last,-1,-1):
            if A[i] < bar:
                j = i; break
        if j is None:
            break
        if j+1 >= X:            # make sense to use X
            ans += X * (bar-A[j])
            bar -= bar - A[j]   # lower the bar
        else:
            for i in xrange(j+1):
                ans += bar - A[i]
            break
        last = j-1
    return ans

def check_test(A, B, data='', case=[0]):
    print
    print "test %d:" % case[0]
    print A
    if A != B:
        if data:
            print data
        print '>>>', A
        print '<<<', B
        print "!!!!!!!! FAIL !!!!!!!!"
    else:
        print ":::::::) OK"
    case[0] += 1

def unit_test():
    print
    A,X, ans = (-1,-2,-3),2, 5
    check_test(solve(A,X), ans, (A,X))

def output():
    N = int(stdin.next())
    A = [int(i) for i in stdin.next().split()]
    X = int(stdin.next())
    ans = solve(A,X)
    print ans

if __name__ == '__main__':
#    unit_test()
    output()
