#include <iostream>

using namespace std;

long long inp[70][70];
long long xro[71][71];

void fillxr(long long n){
long long i=0,j=0,xr=0;
i=1;
//while(i<(n+1)){
//        xr=xr^inp[i-1][0];
//        xro[i][1]=xr;
//        i++;
//
//}
//xr=0;
//j=1;
//while(j<(n+1)){
//
//        xr=xr^inp[0][j-1];
//        xro[1][j]=xr;
//        j++;
//}
i=0;
while(i<(n+1)){
	xro[0][i]=0;
	xro[i][0]=0;
	i++;
}
i=1,j=1;
while(i<(n+1)){
	j=1;

    while(j<(n+1)){
        xro[i][j]=(xro[i-1][j]^xro[i][j-1])^(xro[i-1][j-1]^inp[i-1][j-1]);
        j++;
    }
    i++;
}

}

long long findxor(long long n, long long x1, long long x2, long long y1, long long y2){
    long long xr;
    xr=(xro[x2][y1]^xro[x1][y2])^(xro[x1][y1]^xro[x2][y2]);
    return xr;

}

int main()
{
    long long i=0,t,n,mx,x1,x2,y1,y2,r,c,temp;
    long long startr,endr,startc,endc,t1,t2;
    cin>>t;
    while(i<t){
        mx=0;
        cin>>n;
        r=0,c=0;
        while(r<n){
                c=0;
            while(c<n){
                cin>>inp[r][c];
                c++;
            }
            r++;
        }
        fillxr(n);
        startr=0;
        while(startr<n){
            endr=startr;
            while(endr<n){
                startc=0;
                while(startc<n){
                    endc=startc;
                    while(endc<n){
                            temp=findxor(n,startr,endr+1,startc,endc+1);
                        if(temp>mx){
                            mx=temp;
                            x1=startr;
                            x2=endr;
                            y1=startc;
                            y2=endc;
                        }
                        endc++;
                    }
                    startc++;
                }
                endr++;
            }
            startr++;
        }
        cout<<"\n"<<mx;
        i++;
    }


    return 0;
}
