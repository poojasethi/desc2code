/*
prob: CHEFTMA
id: amlansaha
lang: C++
algo: Binary Search
*/
#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef unsigned long long LLU;
typedef vector<int> VI;
typedef vector<long long> VLL;
typedef map<int, int> MAPII;
typedef map<string,int> MAPSI;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef pair<double, double> PDD;

#define FOR(i,a,b) for(i=a;i<=b;i++)
#define ROF(i,a,b) for(i=a;i>=b;i--)
#define FR(i,n)	for(i=0;i<n;i++)
#define RF(i,n) for(i=n;i>0;i--)
#define CLR(a) memset ( a, 0, sizeof ( a ) )
#define RESET(a) memset ( a, -1, sizeof ( a ) )
#define PB(a)	push_back ( a )

const LL INF = 2000000000000000009LL;
const LL Max = 1000007;
const double PI = acos(-1.0);

int main ()
{
//	freopen("input.in", "r", stdin);
//	freopen("output.out", "w", stdout);

    LL i, j, k, l, temp, t, n, m, caseno = 0, ans;
    string str;
    scanf ( "%lld", &t );
    VLL a,b;
    priority_queue<LL>todo,buttons;

    while ( t-- )	{
        ans = 0;
        while(!todo.empty())    todo.pop();
        while(!buttons.empty()) buttons.pop();

        scanf ( "%lld %lld %lld", &n,&k,&m);
        a.clear();
        b.clear();


        FR(i,n) {
            cin >> temp;
            a.push_back(temp);
        }
        FR(i,n) {
            cin >> temp;
            b.push_back(temp);
            todo.push(a[i]-b[i]);
        }

        FR(i,k) {
            cin >> temp;
            buttons.push(temp);
        }

        FR(i,m) {
            cin >> temp;
            buttons.push(temp);
        }
        ans = 0;
//        for(i=n-1;i>=0;i--) {
        while(!todo.empty())    {
            k = todo.top();
            todo.pop();
            while(!buttons.empty()) {
                LL p=buttons.top();
                buttons.pop();
                if(p>k) continue;
                k-=p;
                break;
            }
            ans+=k;
        }
        printf("%lld\n",ans);
    }
    return 0;
}
//3
//4 2 2
//5 7 6 1
//3 6 1 1
//6 3
//1 4
//
//4 2 2
//5 7 8 1
//3 6 1 1
//6 3
//1 4
