#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(rpm, minutes, plans):
    best = -1
    best_cost = minutes * rpm
    #print best_cost
    for i, plan in enumerate(plans):
        plan_cost = (plan[2] + plan[1] * plan[0] * minutes) / float(plan[0])
        #print i, plan_cost
        if plan_cost < best_cost:
            best_cost = plan_cost
            best = i

    return best + 1


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        L = data.readline().split()
        rpm, minutes, nb_plans = float(L[0]), int(L[1]), int(L[2])
        plans = []
        for i in xrange(nb_plans):
            months, rpm_, cost = data.readline().split()
            plans.append((int(months), float(rpm_), int(cost)))
        res = alg(rpm, minutes, plans)
        print res


if __name__ == "__main__":
    main()
