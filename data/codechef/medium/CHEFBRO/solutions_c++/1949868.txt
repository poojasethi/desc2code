#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl

int dp[1010][1010];

int grundy(int n,int m) {
	if ( dp[n][m] != -1 ) return dp[n][m];
	bool check[10];
	int i;
	F(i,0,10) check[i]=false;
	int z;
	if ( n+1 <= 1000 )  { z = grundy(n+1,m); if ( z < 10 ) check[z]=true; }
	if ( n+2 <= 1000 ) { z = grundy(n+2,m); if ( z < 10 ) check[z]=true; }
	if ( m+1 <= 1000 ) { z = grundy(n,m+1); if ( z < 10 ) check[z]=true; }
	if ( m+2 <= 1000 ) { z = grundy(n,m+2); if ( z < 10 ) check[z]=true; }
	if ( n+1 <= 1000 && m+1 <= 1000 ) { z = grundy(n+1,m+1); if ( z < 10 ) check[z]=true; }
	if ( n+2 <= 1000 && m+2 <= 1000 ) { z = grundy(n+2,m+2); if ( z < 10 ) check[z]=true; }
	int ans = 0;
	while ( check[ans] ) ans++;
	//if (ans > 2 ) {cout << n <<  " " << m; exit(0); }
	dp[n][m] = ans; dp[m][n] = ans;
	return ans;
}

int main() {
	int i,j,n,m,t;
	F(i,0,1010) F(j,0,1010) dp[i][j]=-1;
	dp[1000][1000] = 0;
	F(i,0,1001) F(j,0,1001) if ( dp[i][j]==-1) dp[i][j] = grundy(i,j);
	// F(i,35,45)  { F(j,0,10) cout << dp[i][j] << " "; cout << endl; }
	S(t);
	while ( t-- ) {
		int x; S(x);
		int ans = 0;
		F(i,0,x) {
			S(n);S(m);
			ans = ans^dp[1001-n][1001-m];
		}
		printf("%s\n", (ans==0?"Football":"MasterChef") );
	}
	return 0;
}