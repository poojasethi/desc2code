#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <numeric>
#include <sstream>
#include <string>
using namespace std;
#define out(X) cerr << #X << ": " << (X) << endl
#define SZ(X) ((int)(X.size()))
#define REP(I,N) for (int I = 0; I < (N); ++I)
#define FOR(I,L,H) for (int I = (L); I < (H); ++I)
#define MP(X,Y) make_pair((X),(Y))
#define PB push_back
#define ALL(X) X.begin(), X.end()
template <typename T> inline bool checkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }
template <typename T> inline bool checkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }
typedef long long lint;

int sg[100][100], N, M;
bool hash[100][100][1000];

const int dx[] = {+1, +2, 0, 0, +1, +2};
const int dy[] = {0, 0, +1, +2, +1, +2};

inline int calc(int x, int y) {
    int &ret = sg[x][y];
    if (ret != -1) return ret;
    if (x == 1 && y == 1) return ret = 0;
    memset(hash[x][y], 0, sizeof(hash[x][y]));
    REP(i, 6) {
        int tx = x - dx[i], ty = y - dy[i];
        if (tx <= 0 || ty <= 0) continue;
        hash[x][y][calc(tx, ty)] = true;
    }
    int p = 0;
    for (; hash[x][y][p]; ++p);
    return ret = p;
}

int main() {
    /*
    memset(sg, -1, sizeof(sg));
    for (int i = 15; i >= 1; --i) {
        for (int j = 15; j >= 1; --j) {
            printf("%d ", calc(i, j));
        }
        puts("");
    }
    */
    int T;
    scanf("%d", &T);
    while (T--) {
        int N, nim = 0;
        scanf("%d", &N);
        REP(i, N) {
            int n, m;
            scanf("%d%d", &n, &m);
            nim ^= (n + m - 2) % 3;
        }
        if (nim) {
            puts("MasterChef");
        } else {
            puts("Football");
        }
    }
    return 0;
}

