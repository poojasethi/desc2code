#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
#include<fstream>
#include<iomanip>
#include<bitset>
#include<deque>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<cstring>
#include<sstream>
#include<cmath>
#include<ctime>
using namespace std;

#define MAX 1000
int grundy[MAX+1][MAX+1];

//#define G(x,y) ((x >= 1 && y >= 1) ? grundy[x][y] : -1)

int grunDP(int i, int j)
{
	if (grundy[i][j] != -1)
		return grundy[i][j];
	set<int> myset;
	if (i-1 >= 1)
		myset.insert(grunDP(i-1,j));
	if (j-1 >= 1)
		myset.insert(grunDP(i,j-1));
	if (i-2 >= 1)
		myset.insert(grunDP(i-2,j));
	if (j-2 >= 1)
		myset.insert(grunDP(i,j-2));
	if (i-1 >= 1 && j-1 >= 1)
		myset.insert(grunDP(i-1,j-1));
	if (i-2 >= 1 && j-2 >= 1)
		myset.insert(grunDP(i-2,j-2));
	int ret = 0;
	while (myset.find(ret) != myset.end())
		ret++;
	grundy[i][j] = ret;
	return ret;
}

int main()
{
	/*
	grundy[1][1] = 0;
	for (int i = 1; i <= MAX; i++)
	{
		for (int j = 1; j <= MAX; j++)
		{
			set<int> myset;
			if (i-1 >= 1)
				myset.insert(grundy[i-1][j]);
			if (j-1 >= 1)
				myset.insert(grundy[i][j-1]);
			if (i-2 >= 1)
				myset.insert(grundy[i-2][j]);
			if (j-2 >= 1)
				myset.insert(grundy[i][j-2]);
			if (i-1 >= 1 && j-1 >= 1)
				myset.insert(grundy[i-1][j-1]);
			if (i-2 >= 1 && j-2 >= 1)
				myset.insert(grundy[i-2][j-2]);
			int ret = 0;
			while (myset.find(ret) != myset.end())
				ret++;
			grundy[i][j] = ret;
		}
	}
	cout << "done" << endl;
	*/
	memset(grundy, -1, sizeof(grundy));
	grundy[1][1] = 0;
	//grunDP(1000, 1000);
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		int C, n, m;
		scanf("%d", &C);
		int ans = 0;
		for (int i = 0; i < C; i++)
		{
			scanf("%d %d", &n, &m);
			ans ^= ((n+m-2)%3);
			//ans ^= grunDP(n,m);
		}
		if (ans == 0)
			printf("Football\n");
		else
			printf("MasterChef\n");
	}
	return 0;
}
