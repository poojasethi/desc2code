#include <cstdio>
#include <cctype>
#include <cstring>
#include <set>

using namespace std;

const int BUFSIZE = 4096;
const char ZEROCHAR = '0';

char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;

char w_buffer[BUFSIZE];
int w_bufpos = 0;

int readint()
{
    int n;
    for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    }
    n = 0;
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - ZEROCHAR;
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - ZEROCHAR;
    }
    return n;
}

void writestr(const char* str)
{
    for (int i=0; i < strlen(str); i++)
    {
        if (w_bufpos == BUFSIZE)
        {
            fwrite(w_buffer, 1, BUFSIZE, stdout);
            w_bufpos = 0;
        }
        w_buffer[w_bufpos++] = *(str + i);
    }
}

const int MAXSIZE = 1001;
bool GRID[MAXSIZE][MAXSIZE];

void initgrid()
{
    int gap = 2;
    set<int> cache;
    GRID[1][2] = true;
    GRID[2][1] = true;
    cache.insert(1);
    cache.insert(2);
    for (int i=3, j=0; ; i++)
    {
        if (cache.find(i) == cache.end())
        {
            j = i + gap;
            if (j >= MAXSIZE)
                break;
            GRID[i][j] = GRID[j][i] = true;
            cache.insert(i);
            cache.insert(j);
            gap += 1;
        }
    }
}

int main()
{
    int T;
    int m, n, p, q;
    initgrid();
    T = readint();
    for(; T > 0; T--)
    {
        m = readint();
        n = readint();
        p = readint();
        q = readint();
        m -= p;
        n -= q;
        if (GRID[m][n])
            writestr("Bob\n");
        else
            writestr("Alice\n");
    }
    fwrite(w_buffer, 1, w_bufpos, stdout);
    return 0;
}

