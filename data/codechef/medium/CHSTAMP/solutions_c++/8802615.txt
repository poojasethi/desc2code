#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<string>
#include<cstring>
#include<vector>
#include<set>
#include<iomanip>
#include<queue>
#include<map>
#include<list>
#include<stack>
#define fl(i,s,n) for(i=s;i<n;i++)
#define flr(i,s,n) for(i=s;i>n;i--)
#define ls(i,s) for(i=0;s[i]!='\0';i++)
#define gi(x) scanf("%lld",&x)
#define pi(x) printf("%lld",x)
#define checkline(x) while(x!='\0' && x!='\n')
#define pt(s) printf(s)
#define PI acos(-1)
#define f_in freopen("input.txt","r",stdin)
#define f_out freopen("output_large.txt","w",stdout)
#define in(i,j,k) ((j<=i) && (i<k))
#define ull unsigned long long int
#define lli long long int
#define ld long double
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define r0 return 0
#define mod 1000000007
using namespace std;
vector<vector<lli > > graph;
lli coins[250005];
lli val[50005];
vector<vector<lli> > days;
lli scan_lli()    {lli ip=getchar(),flag=1;int ret=0;for(;ip<'0'||ip>'9';ip=getchar())if(ip=='-'){flag=-1;ip=getchar();break;}for(;ip>='0'&&ip<='9';ip=getchar())ret=(ret<<3)+(ret<<1)+ip-'0';return flag*ret;}
lli *parent;
lli *sizes;
lli find_root(lli x)
{
    while(parent[x]!=x)
        {
            parent[x]=parent[parent[x]];
            x=parent[x];
        }
    return x;
}
void weighted_union(lli a,lli b)
{
    lli x,y;
    x = find_root(a);
    y = find_root(b);
    if(x==y)
        return;
    if(sizes[x]<sizes[y])
    {
        parent[x]=y;
        sizes[y]+=sizes[x];
    }
    else
    {
        parent[y]=x;
        sizes[x]+=sizes[y];
    }
}
int prog()
{
    lli i,j,k,n,m,x,y,z,a,b,c,nod,ans,temp;
    gi(n);gi(m);
    nod = 0;
    days.clear();
    days.resize(50005);
    parent = new lli[50005];
    sizes = new lli[50005];
    fl(i,0,50005)
    {
        sizes[i]=1;
        parent[i]=i;
    }
    fl(i,0,50005)
        {
            val[i]=i;
        }
    fl(i,0,n)
        {
            gi(coins[i]);
        }
    fl(i,0,m)
    {
        gi(a);gi(b);gi(c);
        nod=max(nod,a);
        days[a].pb(b*1000000 +c);
    }
    flr(i,nod,0)
    {
 
        fl(j,0,days[i].size())
        {
            a = days[i][j]%1000000;
            b = days[i][j]/1000000;
            weighted_union(a,b);
        }
        fl(j,0,days[i].size())
        {
            a = days[i][j]%1000000;
            b = days[i][j]/1000000;
            c = find_root(a);
            val[c]=max(val[c],val[a]);
            c = find_root(b);
            val[c]=max(val[c],val[b]);
        }
        fl(j,0,days[i].size())
        {
            a = days[i][j]%1000000;
            b = days[i][j]/1000000;
            c = find_root(a);
            val[a]=val[c];
            c = find_root(b);
            val[b]=val[c];
        }
        fl(j,0,days[i].size())
        {
            a = days[i][j]%1000000;
            b = days[i][j]/1000000;
            parent[a]=a;parent[b]=b;
            sizes[a]=sizes[b]=1;
        }
        days[i].clear();
    }
    z=0;
    fl(i,0,n)
        {z+=val[coins[i]];}
    pi(z);
    putchar('\n');
    r0;
}
int main()
{
    //f_in;
    lli t;
    gi(t);
    while(t--)
        prog();
    r0;
}
 