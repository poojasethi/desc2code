#include <bits/stdc++.h>
#define MAXN (200000+3) 
#define MAXM (1003)

using namespace std;

int n, m;
int stamps[MAXN];
int ans[MAXN];
int visited[MAXN];
int sizes[50005];

vector<pair<int, int> > vec[MAXN];


int parent[50002];
int val[50002];

int find_root (int x) {
   
   while (x != parent[x]) {
      parent[x] = parent[parent[x]];
      x = parent[x];
   }
   
   
   return x;
}

void weighted_union (int a,int b) {
   
   int x = find_root (a) ;
   int y = find_root (b);
   
   if (x == y ) {
      return ;
   }
   
   if (sizes[x] > sizes[y] ) {
      parent[y] = x;
      sizes[x] += sizes[y];
   } else {
      parent[x] = y; 
      sizes[y] += sizes[x];
   }
   
   
}

int main() {
   
   ios_base::sync_with_stdio(false);
   
   int t;
   scanf("%d", &t);
   
   while (t--) {
      int n, m;
      
      for (int i = 0; i < 50002 ; i++) {
         parent[i] = i ;
         val[i] = i;
         sizes[i] = 1;
      }
      
      scanf("%d %d ", &n,&m );

      
      for (int i = 0; i < n; i++) {
         scanf("%d", &stamps[i]);
      }
      
      int mx_day = INT_MIN;
      
      
      for (int i = 0; i < m; i++) {
         int day, a, b;
         scanf("%d %d %d ", &day, &a, &b);
         
         vec[day].push_back(make_pair(a, b));
         mx_day = max(mx_day , day);
      }
      
      for (int i = mx_day; i >= 1 ; i--) {
           
         for (int j = 0; j < vec[i].size() ; j++) {
            weighted_union(vec[i][j].first, vec[i][j].second);
         }
         
         
         for (int j = 0; j < vec[i].size() ; j++) {
            int a = vec[i][j].first;
            int b = vec[i][j].second;
            
            int c = find_root(a);
            val[c] = max(val[c], val[a]);
            
            c = find_root(b);
            val[c] = max(val[c], val[b]);
         }
         
         for (int j = 0; j < vec[i].size() ; j++) {
            int a = vec[i][j].first;
            int b = vec[i][j].second;
            
            int c = find_root(a);
            val[a] = val[c];
            
            c = find_root(b);
            val[b] = val[c];
         }
         
         
         for (int j = 0; j < vec[i].size() ; j++) {
            int a = vec[i][j].first;
            int b = vec[i][j].second;
            
            parent[a] = a;
            parent[b] = b;
            
         }
      }
      
      
      for (int i = 1; i <= mx_day ; i++) {
         vec[i].clear();
      }
      
      long long sum = 0;
      
      for ( int i = 0 ; i < n  ; i++ ) {
         sum += val[stamps[i]];
      }
      
  
      cout<<sum<<endl;
   }
	return 0;
}
