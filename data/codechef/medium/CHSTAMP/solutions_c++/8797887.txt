#include <bits/stdc++.h>
#define getcx getchar_unlocked
#define putcx putchar_unlocked
using namespace std;
typedef long long lld;
//FAST INPUT
inline void inp( int &n ) {
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
//FAST OUTPUT
inline void outp(lld x) {
    char s[25];
    int i=0;
    do{
        s[i++]=x%10+'0';
        x/=10;
    }while(x);
    --i;
    while(i>=0) {
        putcx(s[i--]);
    }
}

const int N = 200000 + 1;
const int M = 50000 + 1;

vector<pair<int, int> > offers[M];
int sc[M], bp[M], p[M], bst[M];

void initialize() {
    for (int i = 0; i < M; i++) {
        offers[i].clear();
        bp[i] = i;
        sc[i] = 0;
    }
}

int parent(int x) {
    if (p[x] == x) return x;
    else return p[x] = parent(p[x]);
}

void join(int x, int y) {
    int py = parent(y);
    int px = parent(x);
    bst[py] = max(bst[py], bst[px]);
    p[px] = py;
}

int main() {
    int tc;
    inp(tc);
    while (tc--) {
        initialize();
        int n, m;
        scanf("%d%d",&n,&m);
        for (int i = 0; i < n; i++) {
            int x;
            inp(x);
            sc[x]++;
        }
        for (int i = 0; i < m; i++) {
            int t, x, y;
            inp(t); inp(x); inp(y);
            offers[t].push_back(make_pair(x, y));
        }
        for (int i = M - 1; i >= 1; i--) {
            for (int j = 0; j < offers[i].size(); j++) {
                int x = offers[i][j].first;
                int y = offers[i][j].second;
                p[x] = x;
                p[y] = y;
                bst[x] = bp[x];
                bst[y] = bp[y];
            }
            for (int j = 0; j < offers[i].size(); j++) {
                int x = offers[i][j].first;
                int y = offers[i][j].second;
                if (parent(x) != parent(y)) {
                    join(x, y);
                }
            }
            for (int j = 0; j < offers[i].size(); j++) {
                int x = offers[i][j].first;
                int y = offers[i][j].second;
                bp[x] = bst[parent(x)];
                bp[y] = bst[parent(y)];
            }
        }
        lld ans = 0;
        for (int i = 1; i < M; i++) {
            ans += sc[i] * bp[i];
        }
        printf("%lld\n",ans);
    }
}