#include <cstdio>
#include <vector>
#include <map>
#include <algorithm>
#include <cassert>
using namespace std;

struct link{int d,a,b;};
bool fc(const link &x, const link &y) {return x.d>y.d;}

int stamps[200000];
link offers[50000];

int s[50001];
map<int,int> m;
map<int,int>::iterator it;

void set(int s[]) {
	for (int i=1;i<=50000;i++) s[i]=i;
	m.clear();
}

int  find(int x) {
	int p=m[x];
	if (p==0) {m[x]=x;return x;}
	if (p==x) return x;
	m[x] = find(m[x]);
	return m[x];
	//if (s[x]==x) return x;
	//s[x]=find(s[x]);
	//return s[x];
}

void uni(int x, int y) {
	int fx = find(x);
	int fy = find(y);
	//printf("%d->%d[%d], %d->%d[%d]\n",x,fx->second,s[fx->second],y,fy->second,s[fy->second]);
	if (s[fx]>s[fy])
		m[fy] = fx;
	else
		m[fx] = fy;
}

int main() {
	int T;
	scanf("%d",&T);
	while (T--) {
		int N,M;
		scanf("%d%d",&N,&M);
		for (int i=0;i<N;i++) scanf("%d",&stamps[i]);
		for (int i=0;i<M;i++)
			scanf("%d%d%d",&offers[i].d,&offers[i].a,&offers[i].b);
		sort(offers,offers+M,fc);
		//for (int i=0;i<M;i++)			printf("%d %d %d\n",offers[i].d,offers[i].a,offers[i].b);
		set(s);
		int day = 0;
		for (int i=0;i<M;i++) {
			//printf("d=%d a=%d b=%d\n",offers[i].d,offers[i].a,offers[i].b);
			if (day!=offers[i].d) {
				for (it=m.begin();it!=m.end();it++) {
					int p=s[find(it->first)];
					if (p>s[it->first])
						s[it->first]=p;
				}
				day=offers[i].d;
				m.clear();
				//for (int i=1;i<=10;i++) printf("%d:%d, ",i,s[i]);puts("");
			} 
				//printf("%d %d\n",offers[i].a,offers[i].b);
			uni(offers[i].a,offers[i].b);	
			
		}
		for (it=m.begin();it!=m.end();it++) {
			
			int p=s[find(it->first)];
			if (p>s[it->first])
				s[it->first]=p;
		}
		//for (int i=1;i<=10;i++) printf("%d:%d, ",i,s[i]);puts("");
		long long ans=0;
		for (int i=0;i<N;i++)		
			ans += s[stamps[i]];
		printf("%lld\n",ans);
	}
	return 0;
}