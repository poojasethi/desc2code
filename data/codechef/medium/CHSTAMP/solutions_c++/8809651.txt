#include <vector>
#include <list>
#include <set>
#include <stdio.h>
using namespace std;

//typedef __int64 LL;
typedef long long LL;
const int N=50010;
vector< pair<int, int> > exc[N];
int val[N];
int visit[N];
int ar[200010];
vector<int> adj[N];
set< pair<int, int> > vet;
list<int> queue;

int main(int argc, char* argv[])
{
    int h, i, j, t, n, m, d, a, b;
    int prevday=0, maxtype=0;
    scanf("%d", &t);
    for(h=0;h<t;h++)
    {
        for(i=1;i<=prevday;i++)
        {
            exc[i].clear();
        }
        for(i=1;i<=maxtype;i++)
        {
            val[i]=0;
        }
        scanf("%d %d", &n, &m);
        for(i=0;i<n;i++)
        {
            scanf("%d", &ar[i]);
        }
        for(i=0;i<m;i++)
        {
            scanf("%d %d %d", &d, &a, &b);
            exc[d].push_back(make_pair(a,b));
            if(d>prevday) prevday=d;
            if(a>maxtype) maxtype=a;
            if(b>maxtype) maxtype=b;
        }
        int x, y;
        set< pair<int, int> >::reverse_iterator rit;
        for(i=prevday;i>0;i--)
        {
            int size=exc[i].size();
            if(size>0)
            {
                int max=0;
                if(vet.size()>0) vet.clear();
                for(j=0;j<size;j++)
                {
                    x=exc[i][j].first;
                    y=exc[i][j].second;
                    if(val[x]==0) val[x]=x;
                    if(val[y]==0) val[y]=y;
                    vet.insert(make_pair(val[x], x));
                    vet.insert(make_pair(val[y], y));
                    adj[x].push_back(y);
                    adj[y].push_back(x);
                }
                pair<int, int> p1;
                for(rit=vet.rbegin();rit!=vet.rend();++rit)
                {
                    p1=*rit;
                    int idx=p1.second;
                    if(!visit[idx])
                    {
                        max=p1.first;
                        queue.push_back(idx);
                        visit[idx]=1;
                        while(!queue.empty())
                        {
                            x=queue.front();
                            if(max>val[x])
                            {
                                val[x]=max;
                            }
                            visit[x]=1;
                            queue.pop_front();
                            for(j=0;j<adj[x].size();j++)
                            {
                                if(!visit[adj[x][j]])
                                {
                                    queue.push_back(adj[x][j]);
                                }
                            }
                        }
                    }
                }
                for(j=0;j<size;j++)
                {
                    x=exc[i][j].first;
                    y=exc[i][j].second;
                    visit[x]=visit[y]=0;
                    if(adj[x].size()>0) adj[x].clear();
                    if(adj[y].size()>0) adj[y].clear();
                }
            }
        }
        LL ans=0;
        for(i=0;i<n;i++)
        {
            int type=ar[i];
            if(val[type]==0)
            {
                val[type]=type;
            }
            ans+=val[type];
        }
        printf("%lld\n", ans);
    }
    return 0;
}

