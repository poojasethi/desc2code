#include <cstdio>
#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#define pp pair<int, pair<int, int> >
#define px pair<int, int>
#define fi first
#define se second
#define pb push_back
#define mp make_pair
typedef long long ll;
using namespace std;
int a[400200];
vector <px> T[400200];
int lab[400200];
int bet[400200];
int c[400200];
int n, m;
pp q[400200];
/// zip
int b[400200];
int d[400200];
map <int, int> M;
map <int, int> N;

void uni(int r1, int r2) {
    int x = lab[r1] + lab[r2];
    if (lab[r1] < lab[r2]) {
        lab[r2] = r1;
        lab[r1] = x;
        bet[r1] = max(bet[r1], bet[r2]);
    }
    else {
        lab[r1] = r2;
        lab[r2] = x;
        bet[r2] = max(bet[r1], bet[r2]);
    }
}

int get(int x) {
    if (lab[x] < 0) return x;
    lab[x] = get(lab[x]);
    return (lab[x]);
}

int main() {


    memset(lab, -1, sizeof(lab));
    int nt;
    scanf("%d", &nt);

    while (nt--) {
        M.clear();
        N.clear();

        int nd = 0;
        int nb = 0;
        int cnt = 0;

        scanf("%d%d", &n, &m);
        for (int i = 1; i <= m; i++) {
                T[i].clear();
        }

        for (int i = 1; i <= n; i++) {
            scanf("%d", a + i);
            nd++;
            d[nd] = a[i];
        }

        for (int i = 1; i <= m; i++) {
            int u, v, t;
            scanf("%d%d%d", &t, &u, &v);

            q[i] = mp(t, mp(u, v));

            nb++;
            b[nb] = t;
            nd++;
            d[nd] = u;
            nd++;
            d[nd] = v;
        }



        sort(b + 1, b + nb + 1);
        for (int i = 1; i <= nb; i++)
        if (M[b[i]] == 0) {
            cnt++;
            M[b[i]] = cnt;
        }

        sort(d + 1, d + nd + 1);
        int cnt2 = 0;
        for (int i = 1; i <= nd; i++)
        if (N[d[i]] == 0) {
            cnt2++;
            N[d[i]] = cnt2;
        }

        for (int i = 1; i <= n; i++) {
            int t = N[a[i]];
            c[t] = a[i];
            a[i] = t;
        }

        for (int i = 1; i <= m; i++) {
            int tm = M[q[i].fi];

            int u = N[q[i].se.fi];
            int v = N[q[i].se.se];

            c[u] = q[i].se.fi;
            c[v] = q[i].se.se;

            T[tm].pb(mp(u, v));

        }



        for (int i = cnt; i >= 1; i--) {

          //  memset(lab, -1, sizeof(lab));
          //  memset(bet, 0, sizeof(bet));

            for (int j = 0; j < T[i].size(); j++) {
                int u = T[i][j].fi;
                int v = T[i][j].se;
                bet[u] = c[u];
                bet[v] = c[v];
            }

            for (int j = 0; j < T[i].size(); j++) {
                int u = T[i][j].fi;
                int v = T[i][j].se;

                int r1 = get(u);
                int r2 = get(v);

                if (r1 != r2) uni(r1, r2);

            }

            for (int j = 0; j < T[i].size(); j++) {
                int u = T[i][j].fi;
                int v = T[i][j].se;

                int r1 = get(u);
                int r2 = get(v);


                c[u] = max(c[u], bet[r1]);
                c[v] = max(c[v], bet[r2]);

            }

            /// init

            for (int j = 0; j < T[i].size(); j++) {
                int u = T[i][j].fi;
                int v = T[i][j].se;

                lab[u] = -1;
                lab[v] = -1;

            }

        }

        ll tot = 0;
        for (int i = 1; i <= n; i++) {
            tot += c[a[i]];
        }

        printf("%lld\n", tot);
    }
    /**/return 0;
}
