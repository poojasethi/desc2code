#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef vector<int> vi;
typedef pair<int,int> pii;

const int MAXN = 3e5 + 9;
const int  MOD = 1e9 + 7;

#define mp make_pair
#define pb push_back

/*************************** MAIN CODE **********************************/

int tc,N,M;
int stamps[MAXN];
int par[MAXN];
LL bestPrice[MAXN];

vector < pii > g[MAXN];

inline int find(int nodeA){
	if(par[nodeA] == nodeA)
		return nodeA;
	return par[nodeA] = find(par[nodeA]);
}

int main (){
	scanf("%d",&tc);
	
	while(tc--){
		scanf("%d %d",&N,&M);

		for(int i = 0;i < MAXN;++i){
			bestPrice[i] = i;
			stamps[i] = 0;
			g[i].clear();
		}

		for(int i = 0;i < N;++i){
			int x; scanf("%d",&x);
			stamps[x]++;
		}

		int maxDays = 0;

		for(int i = 0;i < M;++i){
			int day,u,v;
			scanf("%d %d %d",&day,&u,&v);
			g[day].pb(mp(u,v));
			maxDays = max(maxDays,day);
		}	
		
		for(int days = maxDays;days >= 0;--days){
			for(int j = 0;j < (int)g[days].size();++j){
				int u = g[days][j].first;
				int v = g[days][j].second;
				
				par[u] = u;
				par[v] = v;				
			}
			for(int j = 0;j < (int)g[days].size();++j){
				int u = g[days][j].first;
				int v = g[days][j].second;
				
				int parU = find(u);
				int parV = find(v);

				if(bestPrice[parU] > bestPrice[parV])
					par[parV] = parU;
				else
					par[parU] = parV;
			}
			for(int j = 0;j < (int)g[days].size();++j){
				int u = g[days][j].first;
				int v = g[days][j].second;
				
				bestPrice[u] = bestPrice[find(u)];
				bestPrice[v] = bestPrice[find(v)];
			}
		}

		LL ret = 0;
		for(int i = 0;i < MAXN;++i){
			ret += bestPrice[i] * 1LL * stamps[i];
		}

		printf("%lld\n",ret);
	}

	return 0;
}
