#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>
 
using namespace std;
 
const double EPS = 1e-10;
 
typedef vector<int> VI;
typedef double T;
typedef vector<T> VT;
typedef vector<VT> VVT;
 
T GaussJordan(VVT &a, VVT &b) 
{
    const int n = a.size();
    const int m = b[0].size();
    VI irow(n), icol(n), ipiv(n);    // These are initialized to zero
    VVT Inv(n);
    
    T A[n];     
    for (int j=0 ; j<n ; j++)
        A[j] = 0.00;
        
    for (int i=0 ; i<n ; i++)
        Inv[i] = VT(A, A + n);
       
    for (int i=0 ; i<n ; i++)
        Inv[i][i] = 1.00;    

    T det = 1;
    for (int i = 0; i < n; i++) 
    {
        int pj = -1, pk = -1;
        for (int j = 0; j < n; j++) if (!ipiv[j])
        for (int k = 0; k < n; k++) if (!ipiv[k])
	    if (pj == -1 || fabs(a[j][k]) > fabs(a[pj][pk])) { pj = j; pk = k; }
        // if (fabs(a[pj][pk]) < EPS) { cerr << "Matrix is singular." << endl; exit(0); }
    
        ipiv[pk]++;
        swap(a[pj], a[pk]);
        swap(Inv[pj], Inv[pk]);
        swap(b[pj], b[pk]);
        
        if (pj != pk) det *= -1;    // Step 1.
          
        irow[i] = pj;
        icol[i] = pk;

        T c = 1.0 / a[pk][pk];
        det *= a[pk][pk];          // Step 2.    Learn Step 1 and 2 to calculate determinant   
        // a[pk][pk] = 1.0;  We can do without extra space also
        for (int p = 0; p < n; p++) a[pk][p] *= c, Inv[pk][p] *= c;
        for (int p = 0; p < m; p++) b[pk][p] *= c;
        for (int p = 0; p < n; p++) 
        {
            if (p != pk) 
            {
               c = a[p][pk];
               // a[p][pk] = 0;   We can do without extra space also
               for (int q = 0; q < n; q++) a[p][q] -= a[pk][q] * c, Inv[p][q] -= Inv[pk][q] * c;
               for (int q = 0; q < m; q++) b[p][q] -= b[pk][q] * c;      
            }
        }
    }
    
    for (int i=0 ; i<n ; i++)
        for (int j=0 ; j<n ; j++)
            a[i][j] = Inv[i][j];
                 
    return det;
}
 
bool IsInteger (double d) {
double cdiff = fabs (ceil (d) - d);
double fdiff = fabs (floor (d) - d);
if (cdiff < fdiff)
return cdiff <= EPS;
return fdiff <= EPS;
}
int abs(int a)
{
if (a<0)
return -a;
else
return a;
}
int main()
{
int t;
scanf("%d", &t);
while (t--)
{
int n;
scanf("%d", &n);
int B[n][1], A[n][n];
for (int i=0 ; i<n ; i++)
{
for (int j=0 ; j<n ; j++)
{
if (i==j)
A[i][j] = -1;
else
A[i][j] = 1;
}
}
for (int i=0 ; i<n ; i++)
{
int c;
B[i][0] = 0;
scanf("%d", &c);
B[i][0] = -c;
}
for (int i=0 ; i<n ; i++)
{
int c;
scanf("%d", &c);
B[i][0] += c;
}
if (n==1)
{
if (B[0][0] <= 0)
printf("%d\n", -B[0][0]);
else
printf("-1\n");
}
else if (n==2)
{
if (B[0][0] == -B[1][0])
printf("%d\n", abs(B[0][0]));
else
printf("-1\n");
}
else
{
VVT a(n), b(n);
for (int i = 0; i < n; i++)
{
a[i] = VT(A[i], A[i] + n);
b[i] = VT(B[i], B[i] + 1);
}
T det = GaussJordan(a, b);
//printf("%lf\n", det);
assert(det != 0.0);
bool flag = false;
double sum = 0.0;
for (int i=0 ; i<n ; i++)
{
sum += b[i][0];
//cout<<(b[i][0] + EPS)<<endl;
//cout<<((!IsInteger(sum)))<<endl;
if ( !IsInteger(b[i][0]) || (b[i][0] + EPS<0))
{
flag = true;
//break;
}
}
if (flag)
printf("-1\n");
else
cout<<sum<<endl;
}
}
return 0;
}