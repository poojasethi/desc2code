#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <set>
#include <map>
#include<list>
 
#define si(n)                       scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
#define pi(n)                       printf("%d\n",n)
#define pc(n)                       printf("%c\n",n)
#define pl(n)                       printf("%lld\n",n)
#define pf(n)                       printf("%lf\n",n)
#define ps(n)                       printf("%s\n",n)
 
// Useful constants
 
#define INF                         (int)1e9
#define EPS                         1e-9
 
// Useful container manipulation / traversal macros
 
#define loop(i,a,b)                 for(int i=a;i<b;i++)
#define foreach(v,c)                for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                   memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define mp                          make_pair
 
// Some common useful functions
 
#define MAX(a,b)                     ( (a) > (b) ? (a) : (b))
#define MIN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
#define SORT(a)                      ( sort(all(a))
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())
 
typedef long long ll;
using namespace std;
 
int main()
{
    int t;
    scanf("%d",&t);
 
    while(t--)
    {
      int size;
      si(size);
      int a[size], b[size];
      double d[size];
      double sum = 0;
      
      loop(i,0,size)
        si(a[i]);
      loop(i,0,size)
        si(b[i]);
      loop(i,0,size)
      {
        d[i] = (b[i]-a[i]);
       // printf("d %lf",d[i]);
        sum += d[i];
      }
//      printf("sum %lf\n",sum);
      if(size==1)
      {
        if(d[0]<=0)
        {
          int s = (int)d[0];
          s = -s;
          pi(s);
        }
        else
          printf("-1\n");
      }
      else if(size==2)
      {
        if(sum==0)
        {
          int ans = (d[0]>=0) ? d[0] : (-d[0]);
          pi(ans);
        }
        else
          printf("-1\n");
      }
      else if(size>=3)
      {
        int n = size;
//        double x = -((n-3)/(n-2))*0.5;
//        double y = (1/(n-2))*0.5;
//        pf(x);
//        pf(y);
        int ans = 0;
        int i;
        for(i=0;i<n;i++)
        {
          int tmp = (sum-d[i]);
          tmp -= ((n-3)*d[i]);
          
//          double y1 = tmp-(int)tmp;
//          pi(tmp);
//          pi(itmp);
          if(tmp<0  || tmp%(2*(n-2))!=0)
            break;
          tmp = tmp/(2*(n-2));
          ans += tmp;
        }
        if(i!=size)
        {
//          printf("sidug\n");
          printf("-1\n");
        }
        else
          pi(ans);
      }
    }
return 0;
}