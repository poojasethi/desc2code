#include<iostream>
#include<vector>
#include<map>
#include<set>
using namespace std;
 
#define max 1000001
 
typedef long long int ll;
vector<ll> v1[max];
bool visit[max];
map<ll,ll> cost;
ll s1[max];

ll n,m,mincost,city,last=0;

void dfs(ll src)
{
visit[src]=1;
int i;

for(i=0;i<(int)v1[src].size();i++)
{
if(visit[v1[src][i]]==0)
dfs(v1[src][i]);

}
city++;
if((cost[src]>=0 && mincost> cost[src])  )   
   mincost=cost[src];
 
}
 
int main()
{
cin>>n>>m;
ll iso=0, a,b,i;
 
for(i=1;i<=n;i++)
{
v1[i].clear();
visit[i]=0;
s1[i]=0;
}

int f=0;

while(m--)
{
cin>>a>>b;
v1[a].push_back(b);
v1[b].push_back(a);
}
 
for(i=1;i<=n;i++)
cin>>cost[i];
 
for(i=1;i<=n;i++)
{
if(visit[i]==0)
{
city=0;
mincost=max;
dfs(i);
if(mincost==max && city<n)
 {
 	cout<<"-1"<<endl;
 	f=1;break;
 }
s1[last++]=mincost;
}
}

if(f!=1)
{
ll sum=0;
mincost=max;

for(i=0;i<last;i++)
{
sum+= s1[i];
if(mincost>s1[i])
 mincost=s1[i];
}

sum+= (last-2)*mincost;
cout<<sum<<endl;
}
return 0;
} 