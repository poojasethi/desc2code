#include<bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define lli long long
#define mp make_pair
 
const int limit = 100005;
const int oo = numeric_limits<int>::max();
vector< vector<int> > cnt(limit);
int par[limit];
int rak[limit];
int cost[limit];
int lowest = oo;
int find(int i){
return (par[i]==i?i:par[i]=find(par[i]));
}
 
void merge(int a,int b){
int pa = find(a);
int pb = find(b);
if(rak[pa] < rak[pb])
par[pa]=pb;
else if(rak[pa] > rak[pb])
par[pb] = pa;
else{
rak[pb]++;
par[pa] = pb;
}
return;
}
 
int main(){
int n,m,a,b;
scanf("%d %d",&n,&m);
for(int i=1;i<=n;i++)
par[i] = i;
memset(rak,0,sizeof(rak));
for(int i=0;i<m;i++){
scanf("%d %d",&a,&b);
int pa = find(a);
int pb = find(b);
if(pa != pb)
merge(a,b);
}
for(int i=1;i<=n;i++)
scanf("%d",&cost[i]);
for(int i=1;i<=n;i++){
int pa = find(i);
cnt[pa].pb(cost[i]);
}
int total = 0;
bool posi = true;
lli ans = 0;
for(int i=1;i<=n;i++){
if(cnt[i].size() > 0){
bool local = false;
total++;
int loc_ans = oo;
for(int j=0;j<cnt[i].size();j++){
if(cnt[i][j] < 0) continue;
local = true;
loc_ans = min(loc_ans,cnt[i][j]);
}
posi = posi&local;
if(total > 1 && !posi) break;
ans += (long long)loc_ans;
lowest = min(lowest,loc_ans);
}
}
if(total==1){
printf("0\n");
return 0;
}
if(!posi){
printf("-1\n");
return 0;
}
ans = ans + (long long)(total-2)*(lowest);
printf("%lld\n",ans);
}
