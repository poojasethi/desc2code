#include<bits/stdc++.h>
#define MAX 100005
#define MOD 1000000007
using namespace std;
int parent[MAX];
int findParent(int i)
{
    if(parent[i]==i)
        parent[i]=i;
    else
        parent[i]=findParent(parent[i]);
    return parent[i];
}
void unionNodes(int a,int b)
{
    int parent_a=findParent(a);
    int parent_b=findParent(b);
    if(parent_a==parent_b)
        return;
    parent[parent_a]=parent[parent_b];
}
int main()
{
    int n,m,a,b,c,i;
    scanf("%d %d",&n,&m);
    for(i=0;i<=n;i++)
        parent[i]=i;
    for(i=0;i<m;i++)
    {
        scanf("%d %d",&a,&b);
        int pa=findParent(a);
        int pb=findParent(b);
        if(pa!=pb)
            unionNodes(pa,pb);
    }
    set<int> noOfConnComp;
    map<int,int> cost;
    map<int,int>::iterator it;
    for(i=1;i<=n;i++)
    {
        int p=findParent(i);
        noOfConnComp.insert(p);
        cost[p]=INT_MAX;
    }

    /* Only 1 connected component */
    if(noOfConnComp.size()==1)
    {
        printf("0\n");
    }
    else
    {
        for(i=1;i<=n;i++)
        {
            scanf("%d",&c);
            if(c<0)
                c=INT_MAX;
            cost[findParent(i)]=min(cost[findParent(i)],c);
        }
        vector<int> v;
        for(it=cost.begin();it!=cost.end();++it)
        {
            /* if any of the component has all -ve,then teleport not possible */
            if(it->second==INT_MAX)
            {
                printf("-1\n");
                return 0;
            }
            v.push_back(it->second);
        }
        sort(v.begin(),v.end());
        int res=0;
        for(i=1;i<v.size();i++)
        {
            res+=v[0];
            res+=v[i];
        }
        printf("%d\n",res);
    }
    return 0;
}
