#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
#include<cmath>
#include<stdio.h>
typedef long long ll;
typedef vector<int> vi;
 ll temp;

#ifndef ONLINE_JUDGE
inline int getchar_unlocked()
{
	return getchar();
}
#endif
inline long long scn()
{
	long long n = 0, c = getchar_unlocked(),t=0;
	while(c < '0' || c > '9')
	{
		if(c==45)t=1;
		c = getchar_unlocked();
	}
	while(c >= '0' && c <= '9')n = (n<<3) + (n<<1) + c - '0', c = getchar_unlocked();

	if(t==0)return n;
	else return -n;
}




vector<vi> graph;
vi mark;
vi val;

int dfs(int i)
{
	mark[i]=1;
	if(val[i]>=0&&val[i]<temp)
	temp=val[i];
	for(vi::iterator v=graph[i].begin();v!=graph[i].end();v++)
	{
		if(!mark[*v])
		{
    	dfs(*v);
		}
	}
}

int main()
{
	ll n=scn(),m=scn();

	graph= vector<vi> (n);
	mark=vi(n,0);
	val=vi(n,0);

	ll min=10000000;
	ll sum=0;
	int cnt=0;
	int flag=0;

	for(int i=0;i<m;i++)
	{
		int u=scn(),v=scn();
		u--;v--;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}

	for(int i=0;i<n;i++)
	{
	val[i]=scn();
	if(val[i]<min&&val[i]>=0)
	{
		min=val[i];
	}
	}

	for(int i=0;i<n;i++)
	{
		  if(!mark[i])
		  {
		  	cnt++;
		  	temp=1000000;

		    dfs(i);

		  if(temp==1000000)
		  {
		  	flag=1;
		  }

		  sum+=temp;
		  }

	}

	if(cnt>2&&flag==0)
	{
		sum+=min*(cnt-2);
	}

	if(cnt==1)
	cout<<0<<endl;
	else if(flag==1&&cnt>1)
	cout<<-1<<endl;
	else
	cout<<sum<<endl;

}
