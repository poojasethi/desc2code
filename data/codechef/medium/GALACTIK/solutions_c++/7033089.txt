#include <bits/stdc++.h>

using namespace std;

#define s(x) scanf("%d", &x)

int INF = INT_MAX;

int find_set(int x, int p[])
{
    if (x != p[x])
        p[x] = find_set(p[x], p);
    return p[x];
}

void _union(int x, int y, int rnk[], int p[])
{
    if (rnk[x] > rnk[y])
        p[y] = x;
    else {
        p[x] = y;
        if (rnk[x] == rnk[y])
            rnk[y]++;
    }
}

int main()
{
    int n, m, i, x, y;
    s(n);
    s(m);
    int p[n];
    int rnk[n];
    int mn[n];
    for (i = 0; i < n; i++) {
        p[i] = i;
        rnk[i] = 0;
    }
    vector < pair <int, int> > v(m);
    for (i = 0; i < m; i++) {
        s(x);
        s(y);
        v[i].first = x-1;
        v[i].second = y-1;
    }
    for (i = 0; i < n; i++)
        s(mn[i]);
    for (i = 0; i < m; i++) {
        x = v[i].first;
        y = v[i].second;
        x = find_set(x, p);
        y = find_set(y, p);
        if (x != y)
            _union(x, y, rnk, p);
    }
    for (i = 0; i < n; i++)
        p[i] = find_set(i, p);
    int mrk[n], mn2[n];
    memset(mrk, 0, sizeof(mrk));
    for (i = 0; i < n; i++) {
        mrk[p[i]] = 1;
        mn2[i] = INF;
    }
    for (i = 0; i < n; i++) {
        x = p[i];
        if (mn[i] >= 0)
            mn2[x] = min(mn2[x], mn[i]);
    }
    int tmp = 0, cnt = 0;
    int ans = 0, mn3 = INF;
    for (i = 0; i < n; i++) {
        if (!mrk[i])
            continue;
        tmp++;
        if (mn2[i] == INF)
            cnt++;
        else
            ans += mn2[i];
        mn3 = min(mn3, mn2[i]);
    }
    if (tmp == 1) {
        cout << "0" << endl;
        return 0;
    }
    if (cnt) {
        cout << "-1" << endl;
        return 0;
    }
    cout << ans + (tmp-2)*mn3 << endl;
    return 0;
}
