//CodeChef--GLACTIK
#include<bits/stdc++.h>
#define MAX 100001

using namespace std;

int Cost[MAX],ComponentCost[MAX],Visited[MAX],global_min=10*MAX;
std::vector<int> adjList[MAX];

inline void fast_read(int *number){
	
	*number=0;
	char currentChar=getchar_unlocked();
	
	while(currentChar<'0'||currentChar>'9')
	    currentChar=getchar_unlocked();
	
	while(currentChar>='0'&&currentChar<='9'){
		
		*number=*number*10+currentChar-'0';
		currentChar=getchar_unlocked();	
		
	}   
		
}

class Graph{
	
	private :
		int Vertices;
		
	public :
	
	  Graph(int Vertices){ this->Vertices=Vertices;  }	
	  
	  void addEdge(int src,int dest){
	  	
	  	adjList[src].push_back(dest);
	  	adjList[dest].push_back(src);
	  	
	  }
	
	  void DFS(int u,int *Visited,int *min){
	  	
	  	Visited[u]=1;
		if((*min) > Cost[u] && Cost[u] >=0 )	
	  		*min=Cost[u];
	  		
	  	if(global_min>*min)
		  	  global_min=*min;		
	  			  	
	  	for(int i=0;i<adjList[u].size();i++)
	  	 if(!Visited[adjList[u][i]])
		    DFS(adjList[u][i],Visited,min); 	
	  	
	  }
	 
	  long long int minCost(int totalGroups){
	 
		long long int totalCost=0;
		
	    for(int i=0;i<totalGroups;i++)	
	    	totalCost+=ComponentCost[i]+global_min;
	    		
 	    return totalCost-2*global_min;
 	    
	  }
	    
	  long long DFS_Util(){
	  	
	  	int grp=0,min,flag=0;	
	  	for(int i=1;i<=Vertices;i++)
            if(!Visited[i]){
	  	    	
	  	    	min=100000;
	  	    	DFS(i,Visited,&min);
	  	    	if(min==100000)   flag=1;
					  	  	    	
	  	    	ComponentCost[grp++]=min;
	  	    		  	    	
	  	    }
	    
	    if(flag&&grp==1) return 0;
	    
	    else if(flag&&grp>1) return -1;
	    
		else if(!flag) return minCost (grp);
			
	  }    
	   
};     

int main(void){
	
	int vertices,edges,src,dest;
		
	scanf("%d%d",&vertices,&edges);
	
	Graph G(vertices);
	
	while(edges--){
		
	//	scanf("%d%d",&src,&dest);
		fast_read(&src);
		fast_read(&dest);		
		G.addEdge(src,dest);		
		
	}
	
	for(int i=1;i<=vertices;i++)
	     scanf("%d",&Cost[i]);
	 
	printf("%lld\n",G.DFS_Util());
	
	return 0;
	
}   