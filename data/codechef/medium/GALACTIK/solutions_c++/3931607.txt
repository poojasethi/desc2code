//
//  GALACTIK.cpp
//  Created by UJJWAL CHHIBBER on 22/5/14.
//  Copyright (c) 2014 UJJWAL CHHIBBER. All rights reserved.
//
#include<bits/stdc++.h>

using namespace std;
int cost[100005];
bool visited[100005] = {false};
#define gc getchar_unlocked
#define rd readInt()
inline int readInt(){
    int n = 0, c = gc(), f = 1;
    while(c != '-' && (c < '0' || c > '9')) c = gc();
    if(c == '-') f = -1, c = gc();
    while(c >= '0' && c <= '9')
        n = (n<<3) + (n<<1) + c - '0', c = gc();
    return n * f;
}
class Graph{
    int V;
    list<int> *adj;
public:
    Graph(int x) {V = x ; adj = new list<int>[V];}
    void addEdge(int u,int v);
    void dfs();
    void   dfsUtil(int i,bool visited[],int &val);
    
};
void Graph::addEdge(int u, int v){
    adj[u].push_back(v);
    adj[v].push_back(u);
}
void Graph::dfsUtil(int i, bool visited[], int &val){
    
    visited[i] = true;
    if(cost[i] >=0 && val >=0 && cost[i] < val) val = cost[i];
    else if(val < 0 && cost[i] >=0 ) val = cost[i];
    
    list<int>:: iterator k;
    
    for(k = adj[i].begin(); k!= adj[i].end();++k)
    {
        if(!visited[(*k)]) dfsUtil((*k), visited, val);
    }
    
}
void Graph::dfs(){
    
  //  bool visited[V];
    int val,i,c = 0,min = 11000;
    int flag= 0;
    long long sum  = 0;
 //   for(i=0;i<V;++i) visited[i] = false;
    
    for(i=0;i<V;++i)
    {  
        if(visited[i] == false)
        {  val = cost[i];
          dfsUtil(i,visited,val);
            c++;
            if(val < 0) { flag = 1;}
            if(val < min) min = val;
            sum += val;
        }
    }
    if(c == 1 ) printf("0\n");
    
    else if(flag) printf("-1\n");
    else
    {
    sum -= min;
    sum = sum + (c-1)*min;
    
    printf("%lld\n",sum);
    }
}
int main()
{
    
    int i,n,m,x,y;
    n = rd;
    m = rd;
    Graph g(n);
    for(i=0;i<m;++i)
    {  x = rd; y = rd; g.addEdge(x-1, y-1);    }
    
    for(i=0;i<n;++i) cost[i] = rd;
    g.dfs();
    return 0;
}