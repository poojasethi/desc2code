#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif
int max(int p,int q)
{
    return (p>q)?p:q;
}

int min(int p,int q)
{
    return (p<q)?p:q;
}

VI head[100005],con[100005];
int n,vis[100005],p[100005],n1,a[100005];

void dfs(int tmp,int j)
{
    int i;
    con[j].PB(tmp);
    vis[tmp]=1;
    for(i=0;i<SZ(head[tmp]);i++)
    {
        if(vis[head[tmp][i]]==0)
        {
            dfs(head[tmp][i],j);
        }
    }
}

int findcon()
{
    int j,i;
    j=0;
    for(i=0;i<n;i++)
    {
        if(vis[i]==0)
        {
            dfs(i,j);
            j++;
        }
    }
    //dout(j);
    return j;
}

int find_set(int tmp1)
{
    if(tmp1==p[tmp1])
    {
        return tmp1;
    }
    return p[tmp1]=find_set(p[tmp1]);
}

void union_set(int tmp1,int tmp2)
{
    tmp1=find_set(tmp1);
    tmp2=find_set(tmp2);
    if(tmp1!=tmp2)
    {
        if(a[tmp1]>=0 && a[tmp2]>=0)
        {
            if(a[tmp1]>a[tmp2])
            {
                p[tmp1]=tmp2;
            }
            else
            {
                p[tmp2]=tmp1;
            }
        }
        else if(a[tmp1]>=0)
        {
            p[tmp2]=tmp1;
        }
        else if(a[tmp2]>=0)
        {
            p[tmp1]=tmp2;
        }
        else
        {
            p[tmp1]=tmp2;
        }
    }
}

int main()
{
    int m,i,tmp1,tmp2,j,tmp,ans;
    si(n);
    si(m);
    SET(vis,0);
    for(i=0;i<m;i++)
    {
        si(tmp1);
        si(tmp2);
        head[tmp1-1].PB(tmp2-1);
        head[tmp2-1].PB(tmp1-1);
    }
    for(i=0;i<n;i++)
    {
        si(a[i]);
        p[i]=i;
    }
    n1=findcon();
   // dout(n1);
    for(i=0;i<n1;i++)
    {
        //cout << con[i][0] << " ";
        for(j=1;j<SZ(con[i]);j++)
        {
            union_set(con[i][j],con[i][j-1]);
          //  cout << con[i][j] << " ";
        }
    //    dout(i);
        //cout << endl;
    }
    ans=0;
    //dout(con[i][0]);
   /* tmp1=find_set(con[0][0]);
  //  dout(tmp1);
    if(a[tmp1]<0)
    {
        ans=-1;
    }
    else
    {
        for(i=1;i<n1;i++)
        {
//            printf("***%d\n",i);
            tmp=find_set(con[i][0]);
            //dout(tmp);
            if(a[tmp]<0)
            {
                ans=-1;
                break;
            }
            else
            {
                tmp1=find_set(tmp1);
                union_set(tmp1,tmp);
                ans+=a[tmp];
                ans+=a[tmp1];
            }
            //cout << i << " " << ans << endl;
        }
    }*/
    int flag=1;
    tmp1=INT_MAX;
    for(i=0;i<n1;i++)
    {
        tmp=find_set(con[i][0]);
        if(a[tmp]<0)
        {
            flag=0;
            ans=-1;
            break;
        }
        else
        {
            ans+=a[tmp];
            tmp1=min(tmp1,a[tmp]);
        }
    }
    if(flag==1)
    {
        ans=ans+(n1-2)*tmp1;
    }
    if(n1==1)
    {
        ans=0;
    }
    dout(ans);
    return 0;
}

