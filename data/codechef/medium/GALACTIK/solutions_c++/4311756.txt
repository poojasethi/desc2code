#include<iostream>
#include<vector>
#include<stdio.h>
#include<map>
#include<set>
using namespace std;
 
#define max 1000001
 
typedef long long int ll;
vector<ll> v1[max];
map<ll,bool> visit;
map<ll,ll> cost;
set<ll> s1;
set<ll> :: iterator it;
 
ll n,m,mincost,idx,city;

void dfs(ll src)
{
visit[src]=1;
int i;
 
for(i=0;i<(int)v1[src].size();i++)
{
if(visit[v1[src][i]]==0)
dfs(v1[src][i]);
 
}
city++;
if((cost[src]>=0 && mincost> cost[src])  )  // finding minimum cost of all the connected components
 {
   mincost=cost[src];
   idx=src;
 }
}
 
int main()
{
scanf("%lld %lld",&n,&m);
ll iso=0, a,b,i;
 
s1.clear();
 
for(i=1;i<=n;i++)
{
v1[i].clear();
visit[i]=0;
}
while(m--)
{
scanf("%lld %lld",&a,&b);
v1[a].push_back(b);
v1[b].push_back(a);
}
 
for(i=1;i<=n;i++)
scanf("%lld",&cost[i]);
 
int ans=0,f=0;
 
for(i=1;i<=n;i++)
{
if(visit[i]==0)
{
city=0;
mincost=max;
dfs(i);
if(mincost==max && city<n)
 {
 	cout<<"-1"<<endl;
 	f=1;
 	break;
 }
s1.insert(idx);
}
}
 
//cout<<" the elements of set are ";
 
ll sum=0;
 
//for(it=s1.begin(); it!=s1.end(); ++it)
 //cout<<*it<<" ";
if(f!=1)
{
 ll min = max;
 
for(it=s1.begin(); it!=s1.end(); ++it)
{
sum+= cost[*it];
if(cost[*it]<min)   // find min of all the min's
 min=cost[*it];
ans++;
}

//cout<<"sum is "<<sum<<endl;
//cout<<"size "<<s1.size();

sum+= (ans-2)*min;
printf("%lld\n", sum);
}
return 0;
}  