#include <iostream>
#include <vector>
#include <cstdio>
#include <memory.h>
 
using namespace std;
 
vector<int> *adj;
int *c;
bool *marked;
 
int dfs(int k,int cost)
{
	marked[k]=1;
	//cout<<"cost n k "<<cost<<" "<<k<<"\n";
	//cout<<c[k]<<"\n";
	if((c[k]>=0)&&(c[k]<cost))
		cost=c[k];
	for(int j=0;j<adj[k].size();j++)
	{	
		int x;
		if(!marked[adj[k][j]])
		{	
			x=dfs(adj[k][j],cost);
			if(x<cost)
				cost=x;
		}
	}	
	return cost;
}
 
int main() {
	cout.sync_with_stdio(false);
	
	cin.sync_with_stdio(false);
	int n,m;
	cin>>n>>m;
	adj=new vector<int>[n]; 
	c=new int[n];
	marked=new bool[n];
	memset(marked,0,n);
 	
	 int ans=0,temp;

	int sets=0,cost,flag=0,min=20000;
 	vector<int> vec;
	int x,y;
	for(int i=0;i<m;i++)
	{
		cin>>x>>y;
		x--;
		y--;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	for(int i=0;i<n;i++)
		cin>>c[i];
	for(int i=0;i<n;i++)
	{
		if(!marked[i])
		{
			sets++;
			cost= dfs(i,20000) ;	
			//cout<<"cost n i "<<cost<<" "<<i<<"\n";
			if(cost<20000)
				vec.push_back(cost);	
			else
			{
				flag=1;
				break;
			}
		}
	}
	if(flag==1)
		ans=-1;
	else
	{
		for(int i=0;i<sets;i++)
		{	
			ans = ans+ vec[i];
	
			if(vec[i]<min)
			min=vec[i];	
		}
	}
	
	
 	if(flag!=1 && sets>=2)
	    ans += (sets-2)*min;
    else if(sets == 1)
    	ans = 0;
   cout<<ans<<"\n";

	return 0;
}    