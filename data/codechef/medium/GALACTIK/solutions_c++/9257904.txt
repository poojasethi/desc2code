#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_v) (int)(_v).size()
#define all(_v) (_v).begin(),(_v).end()
#define pii pair<int,int>
typedef long long ll;
const int INF = 100000000;
const ll mod = 1e9 + 7;

const int maxn = 100010;
int p[maxn],r[maxn];
int min_cost[maxn];
int cost[maxn];

void make_set(int x) {
	p[x] = x;
	r[x] = 0;
}

int find_set(int x) {
	if(x == p[x]) return x;
	return p[x] = find_set(p[x]);
}

void merge_set(int x,int y) {
	x = find_set(x);
	y = find_set(y);

	if(x == y) return;

	if(r[x] > r[y]) p[y] = x;
	else {
		p[x] = y;
		if(r[x] == r[y]) r[y] ++;
	}
}

int main() {
	//ios_base::sync_with_stdio(false);
	int n,m; scanf("%d%d",&n,&m);
	
    for (int i = 0; i <= n; i ++) make_set(i);

	for (int i = 0; i < m; i ++) {
		int x,y; scanf("%d%d",&x,&y);
		merge_set(x,y);
	}

	for (int i = 1; i <= n; i ++) scanf("%d",&cost[i]);

	set < int > sett;
	for (int i = 1; i <= n; i ++) {
		find_set(i);
		sett.insert(p[i]);
		min_cost[p[i]] = INF;
	}

	if(sz(sett) == 1) {
		printf("0\n");
		return 0;
	}
	
	for (int i = 1; i <= n; i ++) {
		if(cost[i] < 0) continue;
		min_cost[p[i]] = min(min_cost[p[i]],cost[i]);
	}

	ll ans = 0;
	int mn = INF;
	for (set < int > :: iterator it = sett.begin(); it != sett.end(); it ++) {
		int node = *it;
		if(min_cost[node] == INF) {
			printf("-1\n");
			return 0;
		}
		mn = min(mn,min_cost[node]);
		ans += min_cost[node];
	}
	
	printf("%lld\n",ans + 1ll * mn * (sz(sett) - 2));
	return 0;
}
