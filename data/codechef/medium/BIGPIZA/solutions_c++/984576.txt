#include <iostream>
#include <cstdio>
using namespace std;

#include <bitset>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <vector>
#include <map>

# define FR(i, n)           for( int i = 0; i<=n; i++)
# define FRm(i, m, n)     for( int i = m; i <=n; i++)
# define FRrev(i, n)         for( int i = n; i >= 0; i-- )
# define FRrevm(i,n,m)         for( int i = n; i >= m; i-- )

# define PF       printf
# define PFS PF(" ")
# define PFd(x)   printf("%d" , x )
# define PFdS(x)   printf("%d " , x )
# define PFdN(x)  printf("%d\n" , x )
# define PFN	  printf("\n")
# define SF    scanf
# define SFd(x) scanf("%d",&x)
# define SFd2(x,y) scanf("%d%d",&x,&y)
# define LL long long

#define mod 1000000007
#define nmax 10000

#define inarrd(arr,n) for(int i=0;i<n;i++)SFd(arr[i]);
#define outarrd(arr,n) for(int i=0;i<n;i++){PFd(arr[i]);PF(" ");}PFN;
#define outarrN(arr,n) for(int i=0;i<n;i++){PFd(arr[i]);PFN;}

int grundy[nmax+1];

void solve(int n)
{
	int temp;
	bitset<nmax> vis;
	
	grundy[0]=grundy[1]=0;// grundy[2]=1;
	FRm(i,2,n){
		//select 2 points from current state
		// n-2 points remain
		vis.reset();
		//x,y such that x+y=(n-2)
		// current state can be derived from grundy[x]^grundy[y]
		//identify such visited states . now grundy value of current state is meq=min. excluded value
		
		for(int x=0,y=i-2 ; x<=i-2 ; x++,y--){
			vis[ grundy[x]^grundy[y] ]=1;
		}
		temp=0;
		while(vis[temp])temp++;
		grundy[i]=temp;
	}
	
}

void show_ans()
{
	int t,temp;
	SFd(t);
	while(t--){
		SFd(temp);
		cout<< ( (grundy[temp]==0) ? "Bhima" : "Arjuna" )<<endl;
	}
	
}


int main()
{
	solve(nmax);
	show_ans();
	
	
return 0;
}
