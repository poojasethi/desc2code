#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <sstream>
#include <set>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <bitset>

#define f(i, n)             for(int i = 0; i < n; i++)
#define s(n)				scanf("%d",&n)
#define sl(n) 				scanf("%lld",&n)
#define sf(n) 				scanf("%lf",&n)
#define sc(n)               scanf("%s", &n)    
#define fill(a,v) 			memset(a, v, sizeof a)
#define ull 				unsigned long long
#define ll 					long long
#define bitcount 			__builtin_popcount
#define all(x) 				x.begin(), x.end()
#define pb          		push_back
#define gcd					__gcd
#define gc getchar
#define pii pair <int, int>
#define mp make_pair
#define inf (int)1e9
#define maxn (int)1e6
using namespace std;

inline void ss(int &n)
{
     n = 0;
     char c = gc();
     while(c < 48 || c > 57) c = gc();
     while(c >= 48 && c <= 57) n = (n << 1) + (n << 3) + c - 48, c = gc();
}

const ll mod = 100000007;
ll R[3][3], T[3][3];

void mul(ll a[3][3], ll b[3][3], ll c[3][3])
{
	ll tmp[3][3]; fill(tmp, 0);
	f(i, 3) 
		f(j, 3)  
			f(k, 3) 
			{
				//tmp[i][j] += a[i][k] * b[k][j];
				tmp[i][j] = (tmp[i][j] + a[i][k] * b[k][j]) % mod;
				if(tmp[i][j] < 0) tmp[i][j] += mod;
			}
	f(i, 3) f(j, 3) c[i][j] = tmp[i][j];
}

void print(ll a[3][3])
{
	f(i, 3) {f(j, 3) cout << a[i][j] << " "; cout << endl;} cout << endl;
}

ll power(ll a, ll n)
{
	if(n < 0) return 0;
	ll ret = 1;
	while(n)
	{
		if(n & 1) ret = (ret * a) % mod;
		a = (a * a) % mod;
		n >>= 1;
	}
	
	return ret;
}

int main()
{
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	int t;
	ll n;
	ll modinv8 = power(8, mod - 2);
	//cout << modinv8 << endl;
	s(t);
	
	while(t--)
	{
		sl(n);
		ll ret1 = 0, ret2 = 0, ret3 = 0;
		
		ll N = n;
		n -= 2;
		if(n < 0) ret1 = 0;
		else
		{
			f(i, 3) f(j, 3) R[i][j] = i == j;
			T[0][0] = 5; T[0][1] = -6; T[0][2] = T[1][0] = T[2][2] = 1;
			T[1][1] = T[1][2] = T[2][0] = T[2][1] = 0;
			
			while(n)
			{
				//cout << "N : " << n << "\nT:\n"; print(T);
				if(n & 1) mul(R, T, R);
				mul(T, T, T);
				//cout << "R:\n"; print(R);
				n >>= 1;
			}
			//print(R);
			fill(T, 0); T[0][0] = T[2][0] = 1;
			mul(R, T, R);
			//print(R);
			ret1 = R[0][0], ret2 = 0;
		
		}
		
		N++;
		ret2 = power(4, N) - (4 * power(3, N)) % mod + (6 * power(2, N)) % mod - 4;
		ret2 %= mod;
		if(ret2 < 0) ret2 += mod;
		ret2 = ( ret2 * modinv8 ) % mod;
		//ret3 = (pow(4., 1. * N) - 4 * pow(3., 1. * N) + 6 * pow(2., 1. * N) - 4) / 8;
		
		cout << ret1 << " " << ret2 << endl;
	}
	
	return 0;
}
