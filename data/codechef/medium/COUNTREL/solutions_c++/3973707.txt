/**
 * For part 1:
 *  Select some i from N and select some j from remaining (N-i).
 *  Result will be number of all such possible combinations,
 *      given by the following formula.
 *  res1 = sum_over_i(C[N,i] * (sum_over_j(C[N-i,j])));
 *      for j=[1,N-i] and i=[1,N-1].
 *  On solving using binomial expansions, we get the following closed form.
 *  res1 = (3^n+1)/2 - 2^n
 *
 * For part 2:
 *  Select some i from N for x.
 *  Let j out of i are same in both x and y.
 *  Now select k from (N-i).
 *  Result will be number of all such possible combinations,
 *      given by the following formula.
 *  res2 = sum_over_i(C[N,i] * (sum_over_j(C[i,j] * (sum_over_k(C[N-i,k])))));
 *      for k=[1,N-i], j=[1,i-1] and i=[2,N-1]
 *  On solving using binomial expansions, we get the following closed form.
 *  res2 = 2*4^(n-1) - 3^n + 2^(n-1) + 2^n - (3^n+1)/2
 *
 * Expansions of the following are used for solving the above relations.
 *  1. (1+x)^N
 *  2. (1+x/2)^N
 *  3. (1+2*x)^N
 *
 * Also note that since we use modular arithmetic,
 *  we cannot directly use division.
 *  So, for 1/2 we calculate powmod(2,MOD-2)
 *  Since, powmod(2,MOD-1)=1 from fermat's theorem.
 */
#include <iostream>
using namespace std;

#define MOD 100000007

int powmod(long long a, long long n) {
    long long res = 1;
    while(n) {
        if ( n & 1 ) res = (res * a)%MOD;
        a = (a * a)%MOD;
        n >>= 1;
    }
    return res;
}

int main() {
    const int by2 = powmod(2, MOD-2);
    int t;
    cin >> t;
    while(t--) {
        long long n;
        cin >> n;
        long long a = powmod(4, n-1);
        long long b = powmod(3, n);
        long long c = powmod(2, n);

        long long r1 = (b + 1)%MOD;
        r1 = (r1 * by2)%MOD;
        r1 = (r1 - c + MOD)%MOD;

        long long r2 = (2 * a)%MOD;
        r2 = (r2 - b + MOD)%MOD;
        r2 = (r2 + (c * by2)%MOD)%MOD;
        r2 = (r2 - r1 + MOD)%MOD;

        cout << r1 << " " << r2 << endl;
    }
    return 0;
}
