#include <cstdio>
#include <cctype>
#include <cstdlib>

const int MOD = 100000007;
const int BUFSIZE = 8192;
char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;
 
unsigned long long read_int();

int pow(int x, unsigned long long n)
{
    unsigned long long tmp = x;
    unsigned long long res = 1;

    while(n)
    {
        if (n & 0x1)
            if ( (res *= tmp) >= MOD )
                res %= MOD;
        if ( (tmp *= tmp) >= MOD )
            tmp %= MOD;
        n >>= 1;
    }
    return (int)res;
}

inline int get_rel1(unsigned long long n)
{
    int r = pow(3, n) - pow(2, n+1) + 1;
    if (r < 0)
        r += MOD;
    return (r % 2 == 0)? r/2 : (r+MOD)/2;
}

inline int get_rel2(unsigned long long n)
{
    int r = pow(4, n) - pow(3, n+1) + (3 * pow(2, n)) % MOD - 1;
    if (r >= MOD)
        r %= MOD;
    else if (r < 0)
        r += MOD;
    return (r % 2 == 0)? r/2 : (r+MOD)/2;
}

int main()
{
    unsigned long long T, n;

    T = read_int();
    for (; T>0; T--)
    {
        n = read_int();
        printf("%d %d\n", get_rel1(n), get_rel2(n));
    }
    return 0;
}

unsigned long long read_int()
{
    unsigned long long n;
    bool sign=true;

    sign = 1;
    for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
            r_buffer[r_bufpos]!='-'; r_bufpos++);
    if (r_buffer[r_bufpos] == '-')
    {
        sign = false;
        r_bufpos += 1;
    }

    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
                r_buffer[r_bufpos]!='-'; r_bufpos++);
        if (r_buffer[r_bufpos] == '-')
        {
            sign = false;
            r_bufpos += 1;
        }
    }

    n = 0;
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - '0';

    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - '0';
    }
    return sign? n: -n;
}

