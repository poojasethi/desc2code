#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define MOD 100000007ll
#define allocate(r) r=(long long int **)calloc(3,sizeof(long long int *))
#define allocate1(r) r=(long long int *)calloc(3,sizeof(long long int ))
typedef long long int ll;
int tc;
ll n,t1,t2,t3,t4,t5,t6;
ll **Matrixmultiply(ll **a,ll **b)
{
	ll **c;
	allocate(c);
	int i,j,k;
	for(i=0;i<3;i++) 
		allocate1(c[i]);
	for( i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			for(k=0;k<3;k++)
				c[i][j] = (c[i][j]%MOD + ((a[i][k]%MOD * b[k][j]%MOD))%MOD)%MOD;
		}
	}
	return c;
}
ll **answer(ll **m ,ll n)
{

	int i;
	ll **r;
	allocate(r);
	for(i=0;i<3;i++) 
		allocate1(r[i]);
	if(n<=1)
		return m;
	r=answer(m,n/2);
	r=Matrixmultiply(r,r);
	if(n%2==1)
		r=Matrixmultiply(r,m);
	return r;
}
ll Pow(int a,ll n)
{
	if( n <= 1 )
		return a%MOD;
	else
	{
		if( n%2 == 0 )
		{
			ll r = Pow(a,n/2)%MOD;
			return (r%MOD*r%MOD)%MOD;
		}
		else
			return (a%MOD*Pow(a,n-1)%MOD)%MOD;
	}
}
template< class ll >
struct Triple
{
	ll d, x, y;
	Triple( ll q, ll w, ll e ) : d( q ), x( w ), y( e ) {}
};
	template< class ll >
Triple<  ll > egcd( ll a, ll b )
{
	if( !b ) return Triple< ll >( a, ll( 1 ), ll( 0 ) );
	Triple< ll > q = egcd( b, a % b );
	return Triple< ll >( q.d, q.y, q.x - a / b * q.y );
}

	template< class ll >
ll inverse( ll a, ll n )
{
	Triple< ll > t = egcd( a, n );
	if( t.d > ll( 1 ) ) return ll( 0 );
	ll r = t.x % n;
	return( r < ll( 0 ) ? r + n : r );
}

int main()
{
	scanf("%d",&tc);
	ll **a;
	allocate(a);
	for(int i=0;i<3;i++)
		allocate1(a[i]);
	while(tc--)
	{
		scanf("%lld",&n);
		a[0][0]=6,a[0][1]=-11,a[0][2]=6;
		a[1][0]=1,a[1][1]=0,a[1][2]=0;
		a[2][0]=0,a[2][1]=1,a[2][2]=0;
		if( n == 1 )
			printf("%lld ",(long long)0);
		else if( n == 2 )
			printf("%lld ",(long long)1);
		else if ( n == 3 )
			printf("%lld ",(long long)6);
		else
		{
			t4 = n-3;	
			a=answer(a,t4);
			t6 = ((a[0][0]%MOD*6)%MOD + (a[0][1]%MOD))%MOD;
			if( t6 < 0 )
				t6 = MOD + t6;
			printf("%lld ",t6);
		}
		n = n + 1;
		t1 = Pow(2,n),t2=Pow(3,n),t3=Pow(t1,2);
		t5 = t3%MOD - (4*t2)%MOD + (6*t1)%MOD - 4 ;
		if( t5 < 0 )
			t5 = MOD + t5 ;
		printf("%lld\n",(t5*inverse((long long)8,MOD))%MOD);
	}
	return 0;
}


