/*
We need to make two sets A and B that satisfy some conditions and we are asked to count the number of ways of making such (A,B).
Imagine it as, having N balls numbered 1, 2, 3, ..., N and we distribute them among some boxes
and we take some particular two boxes for A and B.

R1

For a possible solution (A,B), each of the numbers {1,2,3,...,n} is either in A, or in B or in-neither-of-them (lets call them C).
This is same as dividing the balls 1,2,3,..,N in to 3 boxes A, B, C such that neither A nor B is empty.

R1 = Number of ways of dividing N balls in to 3 boxes A, B and C such that A and B are non-empty

R1 = ( Total ways of dividing N balls in to 3 boxes = 3n ) -  ( Either A or B is empty = ( 2n + 2n - 1 ) < inclusion-exclusion > )

This counts ordered pairs (A,B). We need unordered pairs, so divide by 2. Finally, R1 = ( 3n - 2 x 2n + 1 ) / 2

R2

Similarly we can find R2.
For a possible solution (A,B), each of the numbers {1,2,3,...,n} is either only-in-A, or only-in-B or in-both-A-and-B (C) or in-neither-of-them (D).
This is same as dividing the balls 1,2,3,..,N in to 4 boxes A, B, C, D such that neither A nor B nor C is empty.

Derive it similarly using inclusion-exclusion, you should get this : R2 = ( 4n - 3 x 3n + 3 x 2n - 1  ) / 2

FAST EXPONENTIATION USING MODULUS
ll fast_exp(int base, int exp) {
    ll res=1;
    while(exp>0) {
       if(exp%2==1) res=(res*base)%MOD;
       base=(base*base)%MOD;
       exp/=2;
    }
    return res%MOD;
}

*/

#include <iostream>
using namespace std;
typedef long long LL;
const int MOD = 100000007;
LL mm(LL a,LL b)
{
    LL v;
    v = ((a%MOD)*(b%MOD))%MOD;
    return v;
}
LL ex(LL base,LL power)
{
    LL ans = 1;
    while(power>0)
    {
        if(power%2) ans = mm(ans,base);
        base = mm(base,base);
        power/=2;
    }
    return ans;
}
int main()
{
    LL n,t,r1,r2,p2,p3,p4;
    cin>>t;
    while(t--)
    {
        cin>>n;
        p2 = ex(2,n);
        p3 = ex(3,n);
        p4 = ex(4,n);
        r1 = ((p3-2*p2+1)%MOD+MOD)%MOD;
        r1 = r1*((MOD+1)/2)%MOD;
        r2 = ((p4-3*p3+3*p2-1)%MOD+MOD)%MOD;
        r2 = r2*((MOD+1)/2)%MOD;
        cout<<r1<<" "<<r2<<endl;
    }
    return 0;
}
