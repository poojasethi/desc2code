/**
 * Copied !!!
 * For part 1:
 *  Select some i from N and select some j from remaining (N-i).
 *  Result will be number of all such possible combinations,
 *      given by the following formula.
 *  res1 = sum_over_i(C[N,i] * (sum_over_j(C[N-i,j])));
 *      for j=[1,N-i] and i=[1,N-1].
 *  On solving using binomial expansions, we get the following closed form.
 *  res1 = (3^n+1)/2 - 2^n
 *
 * For part 2:
 *  Select some i from N for x.
 *  Let j out of i are same in both x and y.
 *  Now select k from (N-i).
 *  Result will be number of all such possible combinations,
 *      given by the following formula.
 *  res2 = sum_over_i(C[N,i] * (sum_over_j(C[i,j] * (sum_over_k(C[N-i,k])))));
 *      for k=[1,N-i], j=[1,i-1] and i=[2,N-1]
 *  On solving using binomial expansions, we get the following closed form.
 *  res2 = 2*4^(n-1) - 3^n + 2^(n-1) + 2^n - (3^n+1)/2
 *
 * Expansions of the following are used for solving the above relations.
 *  1. (1+x)^N
 *  2. (1+x/2)^N
 *  3. (1+2*x)^N
 *
 * Also note that since we use modular arithmetic,
 *  we cannot directly use division.
 *  So, for 1/2 we calculate powmod(2,MOD-2)
 *  Since, powmod(2,MOD-1)=1 from fermat's theorem.
 */
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

#define MOD 100000007

ll bigMod(ll a, ll b)
{
    ll res =1;
    while(b)
    {
        if(b&1)
            res=(a*res)%MOD;
        a = (a*a)%MOD;
        b>>=1;
    }
    return res;
}

int main()
{
    ios_base::sync_with_stdio(0);
    //cout<<bigMod(2,10)<<endl;
    const int by2 = bigMod(2, MOD-2);
    int t;
    ll n, a, b, c, r1, r2;
    cin>>t;
    while(t--)
    {
        cin>>n;
        a = bigMod(4, n-1);
        b = bigMod(3, n);
        c = bigMod(2, n);
        
        r1=(b+1)%MOD;
        r1=(r1*by2)%MOD;
        r1=(r1-c+MOD)%MOD;
        
        r2=(2*a)%MOD;
        r2=(r2-b+MOD)%MOD;
        r2=(r2+(c*by2)%MOD)%MOD;
        r2=(r2-r1+MOD)%MOD;
        
        cout<<r1<<" "<<r2<<endl;
    }   
    return 0;
}