#include <cstdio>
#include <iostream>
#include <cassert>
using namespace std;
typedef long long lint;
 
const lint MOD = 100000007;
lint power(lint x, lint n, lint mod=MOD){
  if(n==0) return 1;
  if(n%2) return x*power(x,n-1,mod)%mod;
  lint y = power(x, n/2, mod);
  return y*y%mod;
}
 
//(3^n+1)/2 % MOD
lint h(lint n){
  lint ret = (power(3, n, 2*MOD) + 1)%(2*MOD);
  assert(ret%2 == 0);
  return ret/2;
}
 
lint f(lint n){
  lint ret = h(n) - power(2,n);
  return (ret%MOD + MOD)%MOD;
}
 
lint g(lint n){
  lint ret = (power(2, 2*n-1) - power(3,n) + power ( 2, n-1))%MOD;
  ret = (ret + MOD)%MOD;
  return ret;
}
 
main(){
  int cases;cin>>cases;
  assert(1 <= cases && cases <= 1000);
  while(cases--){
    lint n;
    cin>>n;
    assert(1 <= n && n <= 1000000000000000000LL);
    lint A = f(n);
    lint B = (g(n) - f(n) + MOD)%MOD;
    cout<<A<<" "<<B<<endl;
  }
}
 