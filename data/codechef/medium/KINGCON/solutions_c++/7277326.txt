#include<iostream>
#include <list>
#define NIL -1
#include<stdio.h>
#include<vector>

using namespace std;
vector<int>vec[3003];
int ver;
void APUtil(int u, bool visited[], int disc[], int low[],
                int parent[], bool ap[])
{
    static int time = 0;
    int children = 0,i;

    visited[u] = true;

    disc[u] = low[u] = ++time;

    for (i =0; i<vec[u].size(); ++i)
    {
        int v =vec[u][i];  // v is current adjacent of u

        if (!visited[v])
        {
            children++;
            parent[v] = u;
            APUtil(v, visited, disc, low, parent, ap);

            low[u]  = min(low[u], low[v]);

            // u is an articulation point in following cases

            // (1) u is root of DFS tree and has two or more chilren.
            if (parent[u] == NIL && children > 1)
               ap[u] = true;

            if (parent[u] != NIL && low[v] >= disc[u])
               ap[u] = true;
        }

        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
}


int AP()
{int c=0;

    bool *visited = new bool[ver];
    int *disc = new int[ver];
    int *low = new int[ver];
    int *parent = new int[ver];
    bool *ap = new bool[ver];
    for (int i = 0; i < ver; i++)
    {
        parent[i] = NIL;
        visited[i] = false;
        ap[i] = false;
    }
    for (int i = 0; i < ver; i++)
        if (visited[i] == false)
            APUtil(i, visited, disc, low, parent, ap);


    for (int i = 0; i < ver; i++)
       {if (ap[i] == true)
           c++;
        }
        return c;
}

int main()
{
    int t,edg,v1,v2,i,k;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d %d %d",&ver,&edg,&k);

        for(i=0;i<edg;++i)
        {scanf("%d %d",&v1,&v2);
            vec[v1].push_back(v2);
            vec[v2].push_back(v1);
        }
        //cout << "\nArticulation points in graph \n";
       printf("%d\n",AP()*k);
       for(i=0;i<ver;++i)
        vec[i].clear();

    }
    return 0;
}
