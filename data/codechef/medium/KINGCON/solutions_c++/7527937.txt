#include<bits/stdc++.h>
using namespace std;
typedef long long  ll;
#define rep(i,n) for(i=0;i<n;i++)
#define sl(a) scanf("%lld",&a);
#define mp	make_pair
#define pb push_back
#define MaxM 3010
vector<ll> graph[MaxM];
ll counter,parent[MaxM],start[MaxM],visited[MaxM],depth[MaxM],article[MaxM];
ll dfs(ll root)
{
    visited[root]=1;
    start[root]=++counter;

    ll q=start[root];
    ll child=0;

    for(ll i=0;i<graph[root].size();i++)
    {
        ll v=graph[root][i];
        if(!visited[v])
        {
            child++;
            parent[v]=root;
            ll temp=dfs(v);
            q=min(q,temp);
            if(temp>=start[root])
                article[root]=1;

        }
        else
        {
            q=min(q,start[v]);
        }

    }



    if(root==1)
    {

        if(child>1)
        article[root]=1;
        else
        article[root]=0;

    }
    return q;



}

void solve()
{
    ll n,m,cost,i;
    sl(n);
    sl(m);
    sl(cost);
    rep(i,n)
    {

    visited[i+1]=0;
    graph[i+1].clear();
    article[i+1]=0;
    start[i+1]=0;
    }

    rep(i,m)
    {
        ll x,y;
        sl(x);
        sl(y);
        x++;
        y++;
        graph[x].pb(y);
        graph[y].pb(x);

    }
    counter=0;
    parent[1]=-1;
    depth[1]=1;
    dfs(1);
    ll res=0;
    rep(i,n)
    {
        if(article[i+1])
        res++;

    }
    printf("%lld\n",res*cost);

}
int main()
{

    ll t;
    sl(t);
    while(t--)
    solve();

    return 0;

}
