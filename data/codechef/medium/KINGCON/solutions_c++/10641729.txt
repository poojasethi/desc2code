using namespace std;
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#define ll long long
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
#define input freopen("input.in","r",stdin);
#define output freopen("output.out","w",stdout);
#define e printf("\n");
#define all(it,v) for(it=(v).begin();it!=(v).end();it++)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<ll,ll>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef vector<vector<ll> > mat;
const ll mx=3001;
const ll mod=1000000007;
const ll inf=0x3f3f3f3f;
void solve();
int main()
{
  int t=1;
  scanf("%d",&t);
  while(t--) 
  solve();
  return 0;
}
vector<int> g[mx];
int dfs_low[mx],dfs_num[mx],par[mx],dfs_time=1;
bool vis[mx];
void ae(int u,int v)
{
  g[u].pb(v);
  g[v].pb(u);
}
set<int> s;
void dfs(int u)
{
   dfs_num[u]=dfs_time++;
   dfs_low[u]=dfs_num[u];
   vis[u]=true;
   int ct=0;
   for(int i=0;i<g[u].size();i++)
   {
     int w=g[u][i];
     if(!vis[w])
     {
       ct++;
       par[w]=u;
       dfs(w);
       dfs_low[u]=min(dfs_low[u],dfs_low[w]);
       if(par[u]==-1&&ct>1)
         s.insert(u);
       if(dfs_num[u]<=dfs_low[w]&&par[u]!=-1)
         s.insert(u);
     }
     else
      if(vis[w]&&par[u]!=w)
        dfs_low[u]=min(dfs_low[u],dfs_num[w]);
   }
}
void solve()
{
  int i,j,x,y,n,m,k;
    scanf("%d%d%d",&n,&m,&k);
    for(i=1;i<=n;i++)
     g[i].clear();
     memset(par,0,sizeof par);
     memset(vis,false,sizeof vis);
     memset(dfs_low,0,sizeof dfs_low);
     memset(dfs_num,0,sizeof dfs_num); 
     s.clear();

     while(m--)
     {
      scanf("%d%d",&x,&y);
      ae(x+1,y+1);
     }
     for(i=1;i<=n;i++)
     {
      if(!vis[i])
      {
        par[i]=-1;
        dfs(i);
      }
     } 
     i=s.size();
     printf("%d",i*k);
      e
  return ;
}



























