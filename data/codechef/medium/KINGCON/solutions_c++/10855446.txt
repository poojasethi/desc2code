#include <bits/stdc++.h>

using namespace std;
long long int totalCount = 0;
 
class Graph{
 
	int v;
	int timeCount;
	void ArticulationPoint(int v, bool visited[], int parent[], int low[], int disc[], bool ap[]);
	list<int> *adj;
	public:
   		Graph(int V);
    	void addRoad(int u, int w);
    	void countAP(); 
};
 
Graph::Graph(int n)
{
    timeCount = 0;
    v = n;
    adj = new list<int>[v];
 
}
void Graph::addRoad(int u, int w)
{
    adj[u].push_back(w);
    adj[w].push_back(u);
 
}
 
void Graph::ArticulationPoint(int u, bool visited[], int parent[], int low[], int disc[], bool ap[])
{
    int children = 0;
    visited[u] = true;
 
    list<int>::iterator it;
    disc[u] = low[u] = ++timeCount;
 
 
    for(it = adj[u].begin(); it != adj[u].end(); it++)
    {
 
        int w = *it;
 
        if(!visited[w])
        {
            children++;
            parent[w] = u;
            ArticulationPoint(w, visited, parent, low, disc, ap);
 
            low[u] = min(low[u], low[w]);
 
            if(parent[u] == -1 && children > 1)
                ap[u] = true;
            if(parent[u] != -1 && low[w] >= disc[u])
                ap[u] = true;
 
        }
        else if(w != parent[u])
        {
            low[u] = min(low[u], disc[w]);
        }
    }
}
 
void Graph::countAP()
{
    bool *visited = new bool[v];
    int *parent = new int[v];
    int *disc = new int[v];
    int *low = new int[v];
    bool *ap = new bool[v];
 
 
    for(int i = 0; i < v; i++)
    {
        parent[i] = -1;
        visited[i] = false;
        ap[i] = false;
    }
 
    for(int i = 0; i < v; i++)
    {
        if(!visited[i])
        ArticulationPoint(i, visited, parent, low ,disc, ap);
    }
 
    for(int i = 0; i < v; i++)
    {
        if(ap[i]==true)
        totalCount++; 
    }
}
 
int main()
{
    ios_base::sync_with_stdio(false);
	cin.tie(0);
 
   int t;
   cin >> t;
   while(t--)
   {
       int n,m,k;
       cin >> n >> m >> k;
       Graph g(n);
 
       int u, w;
       for(int i = 0; i < m; i++)
       {
 
           cin >> u >> w;
           g.addRoad(u,w);
 
       }
       g.countAP();
       cout << totalCount*k << endl;
       totalCount = 0;
   }
    return 0;
}
 