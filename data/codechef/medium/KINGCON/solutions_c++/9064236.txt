#include<bits/stdc++.h>
using namespace std;
class graph
{
	int vertex,time;
	vector<int> *adj;
	int *low,*disc,*parent;
	bool *visited,*artp;
	public:
		graph(int v)
		{
			this->vertex=v;
			time=0;
			adj=new vector<int>[v];
			visited=new bool[v];
			low=new int[v];
			artp=new bool[v];
			disc=new int[v];
			parent=new int[v];
			memset(visited,false,v*sizeof(bool));
        	memset(artp,false,v*sizeof(bool));
        	memset(parent,-1,v*sizeof(int));
		}
		void add_edge(int u,int v)
		{
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		void dfs(int u)
		{
			int num=0;
			visited[u]=true;
			disc[u]=low[u]=++time;
			vector<int>::iterator it;
			for(it=adj[u].begin();it!=adj[u].end();it++)
			{
				if(!visited[*it])
				{
					num++;
					parent[*it]=u;
					dfs(*it);
					low[u]=min(low[u],low[*it]);
					if((parent[u]==-1)&&(num>1))
						artp[u]=true;
					else if((parent[u]!=-1)&&(low[*it]>=disc[u]))
						artp[u]=true;
				}
				else if((*it)!=parent[u])
				{
					low[u]=min(low[u],disc[*it]);
				}
			}
		}
		int get_articulation_point()
		{
			dfs(0);
			int i,n=vertex,ans=0;
			for(i=0;i<n;i++)
			{
				if(artp[i])
					ans++;	
			}
			return ans;
		}
};
int main()
{
	int i,n,m,k,t,ans,a,b;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d%d",&n,&m,&k);
		graph g(n);
		while(m--)
		{
			scanf("%d%d",&a,&b);
			g.add_edge(a,b);
		}
		ans=g.get_articulation_point();
		printf("%d\n",ans*k);
	}
	return 0;
}