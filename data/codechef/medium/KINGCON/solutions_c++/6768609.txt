/*
#include<iostream>
#include<string.h>
using namespace std;
void dfs(int j, int n, int block);

int omatrix[3000][3000];
int visited[3000];
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,m,k;
        cin>>n>>m>>k;
        memset(omatrix,0,sizeof(omatrix[0][0])*3000*3000);
        int i,j,a,b;


        for(i=0;i<m;i++)
        {
            cin>>a>>b;
            omatrix[a][b]=1;
            omatrix[b][a]=1;
        }

        memset(visited,0,sizeof(visited[0])*3000);
            visited[1]=1;
            for(j=0;j<n;j++)
            {
                if (j==0||omatrix[1][j]==0)
                    continue;
                else if (visited[j]==1)
                    continue;
                else
                    dfs(j,n,0);

            }
            int sum=0;

            for(j=0;j<n;j++)
                if (visited[j]==1)
                sum=sum+1;
            int totalcount=0;
            if (sum!=n-1)
                totalcount++;

        for(i=1;i<n;i++)
        {
            memset(visited,0,sizeof(visited[0])*3000);
            visited[0]=1;
            for(j=0;j<n;j++)
            {
                if (j==i||omatrix[0][j]==0)
                    continue;
                else if (visited[j]==1)
                    continue;
                else
                    dfs(j,n,i);

            }
            int sum=0;

            for(j=0;j<n;j++)
                if (visited[j]==1)
                sum=sum+1;

            if (sum!=n-1)
                totalcount++;
        }

        cout<<totalcount*k<<'\n';
    }

    return 0;
}

void dfs(int j, int n, int block)
{
    if (visited[j]==1)
        return;
    visited[j]=1;

    int i;
    for(i=0;i<n;i++)
            {
                if (block==i||omatrix[j][i]==0)
                    continue;
                else if (visited[i]==1)
                    continue;
                else
                    dfs(i,n,block);

            }



}
*/

/*
#include<iostream>
#include<string.h>
#include<vector>
using namespace std;
void dfs(int row,int col, int n, int block);

vector < vector<int> > omatrix;
//int omatrix[3000][3000];
int visited[3000];
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,m,k;
        cin>>n>>m>>k;
        //memset(omatrix,0,sizeof(omatrix[0][0])*3000*3000);
        omatrix.clear();
        omatrix.resize(n);
        int i,j,a,b;


        for(i=0;i<m;i++)
        {
            cin>>a>>b;
            omatrix[a].push_back(b);
            omatrix[b].push_back(a);
        }

            memset(visited,0,sizeof(visited[0])*3000);
            visited[1]=1;

            int s=omatrix[1].size();
            for(j=0;j<s;j++)
            {
                if (omatrix[1][j]==0)
                    continue;
                else if (visited[omatrix[1][j]]==1)
                    continue;
                else
                    dfs(1,j,n,0);

            }
            int sum=0;

            for(j=0;j<n;j++)
                if (visited[j]==1)
                sum=sum+1;
            int totalcount=0;
            if (sum!=n-1)
                totalcount++;

        for(i=1;i<n;i++)
        {
            memset(visited,0,sizeof(visited[0])*3000);
            visited[0]=1;
            s=omatrix[0].size();
            for(j=0;j<s;j++)
            {
                if (omatrix[0][j]==i)
                    continue;
                else if (visited[omatrix[0][j]]==1)
                    continue;
                else
                    dfs(0,j,n,i);

            }
            int sum=0;

            for(j=0;j<n;j++)
                if (visited[j]==1)
                sum=sum+1;

            if (sum!=n-1)
                totalcount++;
        }

        cout<<totalcount*k<<'\n';
    }

    return 0;
}

void dfs(int row,int col, int n, int block)
{
    int p=omatrix[row][col];
    if (visited[omatrix[row][col]]==1)
        return;
    visited[omatrix[row][col]]=1;

    int s=omatrix[p].size();
    int i;
    for(i=0;i<s;i++)
            {
                if (block==omatrix[p][i])
                    continue;
                else if (visited[omatrix[p][i]]==1)
                    continue;
                else
                    dfs(p,i,n,block);

            }



}
*/

#include<iostream>
#include<stdio.h>
#include<string.h>
#include<vector>
using namespace std;
vector < vector<int> > mymatrix;
void getarticulationpoints(int u);
int parent[3000];
int apa[3000];
int visited[3000];
int num[3000];
int low[3000];
int ap=0;
int timer=0;
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        //memset(mymatrix,0,sizeof(mymatrix[0][0])*3000*3000);
        ap=0;
        timer=0;
        mymatrix.clear();
        int n;
        int m;
        int k;
        scanf("%d%d%d",&n,&m,&k);
        mymatrix.resize(n);

        int a,b;
        while(m--)
        {
            scanf("%d%d",&a,&b);
            mymatrix[a].push_back(b);
            mymatrix[b].push_back(a);
        }

        memset(visited,0,sizeof(visited[0])*3000);
        memset(parent,-1,sizeof(parent[0])*3000);
        memset(num,0,sizeof(num[0])*3000);
        memset(low,0,sizeof(low[0])*3000);
        memset(apa,0,sizeof(apa[0])*3000);


        //for(i=0;i<n;i++)
          //  if (visited[i]==0)

                getarticulationpoints(0);
                int i;
                for(i=0;i<n;i++)
                    if (apa[i]==1)
                    ap++;
        cout<<ap*k<<'\n';



    }
}


void getarticulationpoints(int u)
{

    visited[u]=1;

    num[u]=timer;
    timer=timer+1;

    low[u]=num[u];
    //cout<<u;

    int dfschild=0;

    int s=mymatrix[u].size();
    int i;
    for(i=0;i<s;i++)
    {
        int to=mymatrix[u][i];
        if (visited[to]==0)
    {
        parent[to]=u;
        getarticulationpoints(to);
      //  cout<<u;
        dfschild=dfschild+1;

        low[u]=min(low[u],low[to]);

        if (low[to]>=num[u]&&dfschild>0&&parent[u]!=-1)
            {apa[u]=1;}

    }
    else if(to!=parent[u])
        low[u]=min(low[u],num[to]);
    }

    if (parent[u]==-1&&dfschild>1)
    {apa[u]=1;}

}
