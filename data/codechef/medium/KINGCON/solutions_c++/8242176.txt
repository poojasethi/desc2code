// By - irajdeep		
#include <bits/stdc++.h>
using namespace std;
#define ios ios_base::sync_with_stdio(false);cin.tie(NULL);
#define infinity (1000000007)
#define eps 1e-12
#define ll long long
#define ull unsigned long long
#define vi vector<int>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
ll pwr(ll a,ll b,ll mod) {a%=mod;if(a<0)a+=mod;ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
string toString(int j){string s = "";while(j){int temp=j%10;s+=temp+'0';j=j/10;}reverse(s.begin(),s.end());return s;}
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;
const int maxn=3003;

vector<int> g[maxn];
bool visited[maxn];
int n,m,k;
set<int> articulation;
int timer;
int start[maxn];
int low[maxn];

void init(){
	memset(visited,false,sizeof(visited));
	timer=0;
	for(int i=0;i<maxn;i++){
		g[i].clear();
	}
	memset(start,0,sizeof(start));
	memset(low,0,sizeof(low));
	articulation.clear();
}

void dfs(int u){
	visited[u]=1;
	bool flag=0;
	int child=0;

	start[u]=low[u]=++timer;

	for(int i=0;i<g[u].size();i++){
		int to=g[u][i];
		if(!visited[to]){
			dfs(to);
			++child;
			low[u]=min(low[u],low[to]);
			if(low[to]>=start[u])
				flag=1;

		}
		else{
			low[u]=min(low[u],start[to]);

		}
		if(u==0 && child>1 || flag && u!=0){
			articulation.insert(u);
		}
	}
}

int main(){
	
	ios;
	int t;
	cin >> t;

	while(t--){
		init();
		cin >> n >> m >> k;

		int a,b;
		for(int i=0;i<m;i++){
			cin >> a >> b;
			g[a].pb(b);
			g[b].pb(a);
		}

		dfs(0);
		// for(int i=0;i<articulation.size();i++){
		// 	cout << articulation[i] << endl;
		// }
		cout << articulation.size()*k << endl;
	}	
	return 0;
}