#include<iostream>
#include <list>
#define NIL -1
using namespace std;
int k;
void fastread(int *a)
{    char c=0;
      while(c<33)
      {c=getchar_unlocked();}
      *a=0;
      while(c>33)
      {
       *a=*a*10+c-'0';
       c=getchar_unlocked();
      }
}
class Graph
{
    int V;
    list<int> *adj;
    void APUtil(int v, bool visited[], int disc[], int low[],int parent[], bool ap[]);
                int count;
public:
    Graph(int V);
    void addEdge(int v, int w);
    void AP();
    void print();
};

Graph::Graph(int V)
{
    count=0;
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);
}
void Graph::APUtil(int u, bool visited[], int disc[],int low[], int parent[], bool ap[])
{
    static int time = 0;
    int children = 0;
    visited[u] = true;
    disc[u] = low[u] = ++time;
    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        int v = *i;
        if (!visited[v])
        {
            children++;
            parent[v] = u;
            APUtil(v, visited, disc, low, parent, ap);
            low[u]  = min(low[u], low[v]);
            if (parent[u] == NIL && children > 1)
               {

                   ap[u] = true;
               }

            if (parent[u] != NIL && low[v] >= disc[u])
               {

                   ap[u] = true;
        }
        }


        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
}

// The function to do DFS traversal. It uses recursive function APUtil()
void Graph::AP()
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    int *disc = new int[V];
    int *low = new int[V];
    int *parent = new int[V];
    bool *ap = new bool[V]; // To store articulation points

    // Initialize parent and visited, and ap(articulation point) arrays
    for (int i = 0; i < V; i++)
    {
        parent[i] = NIL;
        visited[i] = false;
        ap[i] = false;
    }

    // Call the recursive helper function to find articulation points
    // in DFS tree rooted with vertex 'i'
    for (int i = 0; i < V; i++)
        if (visited[i] == false)
            APUtil(i, visited, disc, low, parent, ap);

    // Now ap[] contains articulation points, print them
    for (int i = 0; i < V; i++)
        if (ap[i] == true)
            //cout << i << " ";
            count++;
}
void Graph::print()
{
    cout<<count*k<<endl;
}

// Driver program to test above function
int main()
{
    int t,n,m,a,b;
    fastread(&t);
    while(t--)

    {
        fastread(&n);
        fastread(&m);
       fastread(&k);

    Graph g1(n);
    for(int i=0;i<m;i++)
    {
     fastread(&a);
     fastread(&b);
     g1.addEdge(a,b);
    }

    g1.AP();
   g1.print();
}
}
