#include <iostream>
#include "string.h"
#include <cstdio>
#include <cstdlib>
using namespace std;

#define min(a,b) a < b ? a : b
#define MAX_SIZE 3001
int nAdjMatrix[MAX_SIZE][MAX_SIZE];
struct CityInfo
{
	int bVisited;
	int nDiscoveryTime;
	int nMinTime;
	int nParent;
	bool bArticUlationPt;
};

struct CityInfo stCityInfo[MAX_SIZE];
void ArticulationPoint(int U,int N);
void ResetCityRoadInfo(int nSize);

#define getcx getchar_unlocked
inline void inp( int &n )
{
       n = 0;
       int ch=getcx();
       while(ch<'0'||ch>'9') ch=getcx();
       while(ch>='0'&&ch<='9')n=(n<<3)+(n<<1)+ch-'0',ch=getcx();
}

int ntime = 0;
int nBiconnedComponent = 0;
int main()
{
	int nNofTestCases = 1;
	cin >> nNofTestCases;
	
	int nCities  = 0;
	int nRoads = 0;
	int nCost = 0;

	int nFirstCity = 0;
	int nSecondCity = 0;
	for(int ntest = 1; ntest <= nNofTestCases; ntest++)
	{
		ntime = 0;
	    nBiconnedComponent = 0;

		inp(nCities); inp(nRoads); inp(nCost);
		//cin >> nCities >> nRoads >> nCost;

		ResetCityRoadInfo(nCities);

		for(int l = 0; l < nRoads; l++)
		{			
			//cin >> nFirstCity;
			//cin >> nSecondCity;

			inp(nFirstCity); inp(nSecondCity); 
			nAdjMatrix[nFirstCity][nSecondCity] = 1;
			nAdjMatrix[nSecondCity][nFirstCity] = 1;			
		}

		stCityInfo[0].nParent = -1;
		for(int k = 0; k < nCities; k++)
		{
			if(!stCityInfo[k].bVisited)
				ArticulationPoint(k,nCities);
		}

		/*for(int nCount= 0; nCount < nCities; nCount++)
		{
			if(stCityInfo[nCount].bArticUlationPt)
				nBiconnedComponent++;
		}*/

		std::cout << nBiconnedComponent*nCost;
		cout << endl;
	}

	return 0;
}

void ArticulationPoint(int U,int N)
{
	ntime++;

	stCityInfo[U].nDiscoveryTime = ntime;
	stCityInfo[U].nMinTime = ntime;
	stCityInfo[U].bVisited = 1;

	bool bArticualtionPoint = false;
	int nChildren = 0;
    for(int nCityIndex = 0; nCityIndex < N; nCityIndex++)	
	{
		if(!stCityInfo[nCityIndex].bVisited && nAdjMatrix[U][nCityIndex])
		{
			nChildren++;
			stCityInfo[nCityIndex].nParent = U;
			ArticulationPoint(nCityIndex,N);
			stCityInfo[U].nMinTime = min(stCityInfo[U].nMinTime,stCityInfo[nCityIndex].nMinTime);
			
			if(stCityInfo[U].nParent == -1 && nChildren > 1)
			{
				if(!stCityInfo[U].bArticUlationPt)
					nBiconnedComponent++;
				stCityInfo[U].bArticUlationPt = 1;
			}

			if(stCityInfo[U].nParent != -1 && stCityInfo[nCityIndex].nMinTime >= stCityInfo[U].nDiscoveryTime)
			{
				if(!stCityInfo[U].bArticUlationPt)
					nBiconnedComponent++;
			    stCityInfo[U].bArticUlationPt = 1;
			}

			/*if(stCityInfo[nCityIndex].nMinTime >= stCityInfo[U].nDiscoveryTime))
				bArticualtionPoint = true;
			else
				stCityInfo[U].nMinTime = min(stCityInfo[U].nMinTime,stCityInfo[nCityIndex].nMinTime);*/
		}
		else if(stCityInfo[nCityIndex].bVisited == 1 && nAdjMatrix[U][nCityIndex])
		{
			stCityInfo[U].nMinTime = min(stCityInfo[U].nMinTime,stCityInfo[nCityIndex].nDiscoveryTime);
		}
	}

	stCityInfo[U].bVisited = 2;
	//if((stCityInfo[U].nParent != 0 && bArticualtionPoint) || (stCityInfo[U].nParent == -1 && nChildren > 1))
	//	nBiconnedComponent++;
}

void ResetCityRoadInfo(int nSize)
{
    for(int i = 0; i < nSize; i++)
	{
		/*for(int j = 0; j < nSize; j++)
		{
			nAdjMatrix[i][j] = 0;
		}*/
		stCityInfo[i].bVisited = false;
		stCityInfo[i].nDiscoveryTime = 0;
		stCityInfo[i].nMinTime = 0;
		stCityInfo[i].nParent = 0;
		stCityInfo[i].bArticUlationPt = false;
		memset(nAdjMatrix[i],0,nSize*sizeof(int));
	}

}