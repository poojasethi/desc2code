#include<bits/stdc++.h>
#define ll long long
using namespace std;
vector< int >graph[3005];
list<int>q;
vector<bool>visited(3005);
vector<int>low(3005);
vector<int>disc(3005);
vector<int>parent(3005);
vector<bool>ap(3005);
int cnt,tim;
void dfs(int n)
{
	visited[n]=true;
	int i;
	int children=0;
	disc[n]=low[n]=tim;
	tim++;
	for(i=0;i<graph[n].size();i++)
	{
		if(visited[graph[n][i]]==false)
		{
			children++;
			parent[graph[n][i]]=n;
			dfs(graph[n][i]);
			low[n]=min(low[n],low[graph[n][i]]);
			if(parent[n]!=-1&&low[graph[n][i]]>=disc[n])
				ap[n]=true;
			if(parent[n]==-1&&children>1)
				ap[n]=true;
		}
		else if(graph[n][i]!=parent[n])
			low[n]=min(low[n],disc[graph[n][i]]);
	}
}
int main()
{
	int t,n,m,k,i,a,b;
	scanf("%d",&t);
//	cin>>t;
	while(t--)
	{
		cnt=0;
		tim=1;
		scanf("%d%d%d",&n,&m,&k);
		for(i=0;i<=n;i++)
		{
			visited[i]=false;
		
			graph[i].clear();
			ap[i]=false;
		//	disc[i]=0;
		//	low[i]=0;
		}
//		cin>>n;cin>>m;cin>>k;
		for(i=0;i<m;i++)
		{
//			cin>>a;cin>>b;
			scanf("%d%d",&a,&b);
			graph[a].push_back(b);
			graph[b].push_back(a);
		}
		parent[0]=-1;
		dfs(0);
		for(i=0;i<n;i++)
			if(ap[i]==true)
				cnt++;
		printf("%d\n",cnt*k);
	}
	return 0;
}