/**
 	My standard template
 	Name: Shivam Mishra
 	handle: shivam217
 **/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 3000;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

LL power(LL b,LL e)
{
	if(b==0 && e==0) return 1;
	if(b==0 && e>1)  return 0;	
	if(b>0 && e==0) return 1;
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  r %= MOD; }
		e >>= 1; b = b*b; b %= MOD;
		
	}
return r;
}

LL gcd(LL a, LL b) {  if(b==0) return a;  else return gcd(b,a%b);  }

VI alist[MAX+5];
bool vis[MAX+5];
bool ap[MAX+5]; // true for articulation points
int low[MAX+5];
int dtime[MAX+5];
int parent[MAX+5];

void dfs(int x,int disTime) {

	vis[x] = true;

	dtime[x] = low[x] = disTime;

	int sz = alist[x].size();
	int child=0;

	FOR(i,0,sz) {

		int node = alist[x][i];

		if(!vis[node]) {
			
			parent[node]=x;
			++child;
			dfs(node,disTime+1);

			
			low[x] = min(low[x],low[node]);


			if(parent[x]==-1 && child>1)
				ap[x] = true;

	
			if(parent[x]!=-1 && low[node]>=dtime[x])
				ap[x] = true;
			
		}
		else if(node!=parent[x]) 
			low[x] = min(low[x],dtime[node]);
	

	}


}

int main() {

	int test; INT(test);
	
	while(test--) {
	
		int n,m,k;
		INT(n); INT(m); INT(k);
		int a,b;
		
		FOR(i,0,n+1) {
			alist[i].clear();
			vis[i] = false;
			ap[i] = false;
			parent[i] = -1;
			low[i] = INT_MAX;
			dtime[i] = -1;
		}
		

		FOR(i,0,m) {
			INT(a), INT(b);
			alist[a].PB(b);
			alist[b].PB(a);
		}

		FOR(i,0,n)
			if(!vis[i])
				dfs(i,1);

		int c=0;

		FOR(i,0,n)
			if(ap[i])
				++c;

		LL ans = c*k;
		PLLD(ans);

	}


return 0;
}

