#include<bits/stdc++.h>
#define vi vector<int>
#define pb push_back 
using namespace std;

vector<int> graph[3004];

bool ap[3004];
bool visited[3004];
int low[3004];
int disc[3004];
int parent[3004];

queue<int> q;

void dfs(int src)
{
	static int time=0;
	int v,i,k;
	visited[src]=1;
	low[src]=disc[src]=++time;
	int children=0;
	
	for(i=0;i<graph[src].size();i++)
	{
		v=graph[src][i];
		if(visited[v]==0)
		{
			children++;
			parent[v]=src;
			dfs(v);
			
			low[src]=min(low[src],low[v]);
			
			if(parent[src]==-1 && children>1)//root
			{
				ap[src]=true;
			}
			if(parent[src]!=-1 && low[v]>=disc[src])
			{
				ap[src]=true;
			}
			
		}
		else if(v != parent[src])
		{
			low[src]=min(disc[v],low[src]);
			
		}
		 
		
	}
	
}
int main()
{
	int i,j,n,t,x,y,m,ans=0,k;
	scanf("%d",&t);
	while(t--)
	{
		//min=100001;
		while(!q.empty())
		{
			q.pop();
		}
		
		ans=0;
		scanf("%d%d%d",&n,&m,&k);
		
		for(i=0;i<m;i++)
		{
			scanf("%d %d",&x,&y);
			graph[x].pb(y);
			graph[y].pb(x);
		}
		
		memset(visited,0,sizeof(visited));
		memset(ap,0,sizeof(ap));
		memset(parent,-1,sizeof(parent));
		memset(low,0,sizeof(low));
		memset(disc,0,sizeof(disc));
				
		for(i=0;i<n;i++)
		{
			if(visited[i]==0)
			{
				dfs(i);
			}
		}
		/*for(i=0;i<n;i++)
		{
			printf("%d ",ap[i]);
		}
		printf("\n");
		for(i=0;i<n;i++)
		{
			printf("%d ",parent[i]);
		}
		printf("\n");
*/
		for(i=0;i<n;i++)
		{
			if(ap[i]==1)
			{
				
				ans++;
			}
		}
		printf("%d\n",ans*k);
		for(i=0;i<n;i++)
		{
			graph[i].clear();
			
		}
		
	}
	return 0;
}