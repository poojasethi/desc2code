#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 100006;

int par[MAXN];
int disc[MAXN];
int low[MAXN];
vector<int>gr[MAXN];
bool AP[MAXN];
int tim = 0;

void Initialise()
{
    for(int i = 0; i < MAXN ; i++)
    {
        par[i] = -1;
        disc[i] = -1;
        gr[i].clear();
        AP[i] = false;
    }
}

void DFS_AP(int src)
{
    int num_child = 0;
    disc[src] = ++tim;
    low[src] = tim;

//    int sz = gr[src].size();
    for(int i = 0 ; i < gr[src].size(); i++)
    {
        int dest = gr[src][i];
        if(disc[dest] == -1)
        {
            num_child++;
            par[dest] = src;
            DFS_AP(dest);

            low[src] = min(low[src], low[dest]);

            if(par[src] == -1 && num_child > 1)
                AP[src] = true;
            else if(par[src] != -1 && disc[src] <= low[dest])
                AP[src] = true;
        }
        else if(par[src] != dest)
            low[src] = min(low[src], disc[dest]);
    }
}

int main() 
{
    ios_base::sync_with_stdio(false);

    int N, M, x, y, K, test;

    cin>>test;
    while(test--)
    {
        cin>>N >>M >>K;
        Initialise();

        for(int i = 0; i < M ; i++)
        {
            cin>>x >>y;
            gr[x].push_back(y);
            gr[y].push_back(x);
        }


        for(int i = 0; i < N ; i++)
        {
            if(disc[i] == -1)
            {
                DFS_AP(i);
            }
        }

        int cnt = 0;
        for(int i = 0; i < N ; i++)
            if(AP[i])
                cnt++;

        cout<<cnt*K<<endl;
    }
    return 0;
}
