#include<bits/stdc++.h>
#define MAX 3005

using namespace std;

int timeCounter=0;
class Graph{
	
	private :
		
	vector<int> adjList[MAX];
	int vertices,ans,parent[MAX];
	int Visited[MAX],arrTime[MAX],minTime[MAX],ok[MAX];
	
	public :
	
	Graph(int vertices){
		 
		ans=0; 
		this->vertices=vertices;
		for(int i=0;i<=vertices;i++){		
	      
		  parent[i]=-1;
	      ok[i]=0;
	      minTime[i]=arrTime[i]=0;
	      
		}
		
	}
	
	void addEdge(int src,int dest){
		
		adjList[src].push_back(dest);
		adjList[dest].push_back(src);	
		
	}	
	
	void DFS(int u){
		
		Visited[u]=1;
		
		int i,v,child=0;
		arrTime[u]=minTime[u]=++timeCounter;
		
		for(i=0;i<adjList[u].size();i++){
			
			v=adjList[u][i];
			if(Visited[v]==0){
				
				child++;
				parent[v]=u;
				
				DFS(v);
				minTime[u]=min(minTime[u],minTime[v]);
				
				if(parent[u]==-1&&child>=2)
				 ok[u]=1;
				  
				if(parent[u]!=-1&&arrTime[u]<=minTime[v])
				  ok[u]=1;
								
			}
			
			else minTime[u]=min(minTime[u],arrTime[v]);			
			
		}
	       
		
	}
	
	int solve(){
		
		timeCounter=0;
		memset(Visited,0,sizeof Visited);
		memset(parent,-1,sizeof parent);
		memset(ok,0,sizeof ok);
		ans=0;
		DFS(0);	
		
		for(int i=0;i<vertices;i++) if(ok[i]) ans++;
		
		return ans;
		
	}
	
	void destroy(){
		
		for(int i=0;i<vertices;i++)
		  adjList[i].clear();
		
		
	}
	
};


int main(void){
	
	int testCases,vertices,edges,cost,src,dest;
	
	scanf("%d",&testCases);
	while(testCases--){
		
		scanf("%d%d%d",&vertices,&edges,&cost);
		
		Graph G(vertices);
		
		for(int i=0;i<edges;i++){
			
			scanf("%d%d",&src,&dest);
			G.addEdge(src,dest);
				
		}
		
		cost=cost*G.solve();
		
		printf("%d\n",cost);		
		
		G.destroy();
		
	}

	return 0;
	
}