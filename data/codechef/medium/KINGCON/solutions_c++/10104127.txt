#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e4 + 10;
const int INF = 4000;
vector<vector<int> > grf(MAXN);
bool isArticulate[MAXN];
int low[MAXN];
int visT = 0;
void dfs(int x, int p){
    low[x] = ++visT;
    int sz = grf[x].size();
    int cntTree = 0;
    int minBack = INF;
    for(int i = 0;i < sz;++i){
        if(grf[x][i] == p) continue;
        if(low[grf[x][i]] == 0){
            dfs(grf[x][i], x);
            if(low[grf[x][i]] >= low[x]){
                isArticulate[x] = true;
            }
            ++cntTree;
        }
        minBack = min(minBack, low[grf[x][i]]);
    }
    if(x == 0){
        isArticulate[x] = (cntTree > 1);
        return ;
    }
    low[x] = min(low[x], minBack);
}
int main(){
    int t;
    scanf("%d", &t);
    while(t--){
        int N, M, K;
        scanf("%d%d%d", &N, &M, &K);
        for(int i = 0;i < N;++i){
            grf[i].clear();
        }
        while(M--){
            int A, B;
            scanf("%d%d", &A, &B);
            grf[A].push_back(B);
            grf[B].push_back(A);
        }
        visT = 0;
        for(int i = 0;i < N;++i){
            low[i] = 0;
            isArticulate[i] = false;
        }
        dfs(0, -1);
        int cnt = 0;
        for(int i = 0;i < N;++i){
            if(isArticulate[i]) {
                ++cnt;;
            }
        }
        printf("%d\n", K * cnt);
    }
    return 0;
}
