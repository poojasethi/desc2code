#include<stdio.h>
#include<vector>

using namespace std;

int n,m,k;
int timewa=0;
vector<vector<int> > adj(3002);
int visited[3002],ap[3002],parent[3002];
int disc[3002],low[3002];

void dfs(int s)
{
	int i,sz=adj[s].size(),v;
	int child=0;
	timewa++;
	disc[s]=timewa;
	low[s]=timewa;

	for(i=0;i<sz;i++)
	{
		v=adj[s][i];

		if(!visited[v])
		{
			child++;
			visited[v]=1;
			parent[v] = s;
			dfs(v);

			low[s]=low[s] < low[v] ? low[s] : low[v];

			if(parent[s] == -1 && child > 1)
				ap[s]=1;

			if(parent[s] != -1 && low[v] >= disc[s])
				ap[s]=1;	
		}

		else if(v != parent[s])
			low[s]=low[s] < disc[v] ? low[s] : disc[v];
	}

}

int main()
{
	int t;

	scanf("%d",&t);

	while(t--)
	{
		scanf("%d%d%d",&n,&m,&k);
		int i,x,y;

		for (i = 0; i < n; ++i)
		{
			adj[i].clear();
			visited[i]=0;
			ap[i]=0;
			parent[i]=-1;
		}

		for (i = 0; i < m; ++i)
		{
			scanf("%d%d",&x,&y);

			adj[x].push_back(y);
			adj[y].push_back(x);
		}

		timewa=1;
		
		for(i=0;i<n;i++)
		{
			if(!visited[i])
			{
				visited[i]=1;
				dfs(i);
			}
		}

		int c=0;
		for(i=0;i<n;i++)
		if(ap[i])
		c++;

		printf("%d\n",(c * k));
	}

	return 0;
}