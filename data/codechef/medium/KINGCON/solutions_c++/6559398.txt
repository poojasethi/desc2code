#include<bits/stdc++.h>
using namespace std;

std :: vector < int > v[3010] ;
int low[3010] , arr[ 3010 ] ,  par[3010] , ctr = 0 , ans =0 ;
bool vis[3010],ap[3010] ;

void articulation( int u ){

        int i ;
        int k ;
        int child = 0 ;

       low[u] = arr[u] = ctr++ ;
       vis[u] = true ;

       for( i = 0 ; i < v[u].size() ; ++i ){

            k = v[u][i] ;
            if(!vis[k]){

                par[k] = u ;
                child++ ;
                articulation(k);
                low[u] = min( low[u] , low[k]);

                if( par[u] == -1 && child > 1 )
                    if( !ap[u]) {
                        ap[u] = true ;
                        ans++ ;
                    }
                if( par[u] != -1 && low[k] >= arr[u])
                    if( !ap[u]) {
                        ap[u] = true ;
                        ans++ ;
                    }
            }
            else if ( k != par[u] )
                low[u] = min( low[u] , arr[k]);
        }
}

int main(){

    int test ;
    int x ;
    int y ;
    int e ;
    int n ;
    int c ;
    int i ;
    scanf("%d",&test);
    while( test-- ){

        scanf("%d %d %d",&n ,&e ,&c);
        while( e-- ){

            scanf("%d %d",&x, &y );
            v[x].push_back(y);
            v[y].push_back(x);
        }
        memset(vis , false , sizeof(vis)) ;
        memset(ap , false , sizeof(ap)) ;
        memset(par , -1 , sizeof( par ));
        ans = ctr = 0;
        articulation(0);
        cout<<c*ans<<endl;
        for( i = 0 ; i < n ; i++ ) v[i].clear() ;
    }


}
