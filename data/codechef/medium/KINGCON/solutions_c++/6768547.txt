#include<iostream>
#include<stdio.h>
#include<string.h>
#include<vector>
using namespace std;
vector < vector<int> > mymatrix;
void dfs (int v, int p) ;
int parent[3000];
int apa[3000];
int visited[3000];
int num[3000];
int low[3000];
int ap=0;
int timer=0;
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        //memset(mymatrix,0,sizeof(mymatrix[0][0])*3000*3000);
        ap=0;
        timer=0;
        mymatrix.clear();
        int n;
        int m;
        int k;
        scanf("%d%d%d",&n,&m,&k);
        mymatrix.resize(n);

        int a,b;
        while(m--)
        {
            scanf("%d%d",&a,&b);
            mymatrix[a].push_back(b);
            mymatrix[b].push_back(a);
        }

        memset(visited,0,sizeof(visited[0])*3000);
        memset(parent,-1,sizeof(parent[0])*3000);
        memset(num,0,sizeof(num[0])*3000);
        memset(low,0,sizeof(low[0])*3000);
        memset(apa,0,sizeof(apa[0])*3000);

        int i;

        dfs(0,-1);
        for(i=0;i<n;i++)
                    if (apa[i]==1)
                    ap++;
        cout<<ap*k<<'\n';

    }
}


void dfs (int v, int p) {
	visited[v] = true;
	num[v] = low[v] = timer++;
	int children = 0;
	int i;
	for (i=0; i<mymatrix[v].size(); i++) {
		int to = mymatrix[v][i];
		if (to == p)  continue;
		if (visited[to])
			low[v] = min (low[v], num[to]);
		else {
			dfs (to, v);
			low[v] = min (low[v], low[to]);
			if (low[to] >= num[v] && p != -1)
				{apa[v]=1;}
			++children;
		}
	}
	if (p == -1 && children > 1)
		{apa[v]=1;}
}
