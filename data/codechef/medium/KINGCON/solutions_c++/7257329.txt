#include<bits/stdc++.h>
using namespace std;

const int N=3456;

vector<int> adj[N];
int atime[N], low[N], ctr=0;
bool art_pnt[N];

void dfs(int par, int u) {
    atime[u]=ctr++;
    low[u]=ctr;
    int child=0;
    for(int i=0;i<adj[u].size();i++) {
        int w=adj[u][i];
        if(atime[w]==-1) {
            child++;
            dfs(u, w);
            if(low[u]>low[w]) {
                low[u]=low[w];
            }
            if(par!=-1 && low[w]>=atime[u]) {
                art_pnt[u]=true;
            }
        } else { //condition for back edge
            if(low[u]>atime[w]) {
                low[u]=atime[w];
            }
        }
    }
    if(par==-1 && child>1) {
        art_pnt[u]=true;
    }
}

int main() {
    int test;
    scanf("%d", &test);
    while(test--) {
        int n, m, cost;
        scanf("%d %d %d", &n, &m, &cost);
        for(int i=0;i<m;i++) {
            int u, v;
            scanf("%d %d", &u, &v);
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        memset(atime, -1, sizeof(atime));
        memset(art_pnt, 0, sizeof(art_pnt));
        ctr=0;
        dfs(-1, 0);
        int ans=0;
        for(int i=0;i<n;i++) {
            if(art_pnt[i]) {
                ans++;
            }
            adj[i].clear();
        }
        printf("%d\n", ans*cost);
    }
}
