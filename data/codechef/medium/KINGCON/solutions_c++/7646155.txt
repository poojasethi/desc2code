#include<bits/stdc++.h>
using namespace std;
#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
vector<int>adj[100011];
int visited[100011],low[100011],disc[100011],parent[100011],articulation[100011];
int tym;
void clearing(int n)
{
    n++;
    int i;
    for(i=0; i<=n; i++)
    {
        adj[i].clear();
        low[i]=0;
        disc[i]=0;
        parent[i]=-1;
        articulation[i]=0;
        visited[i]=0;
    }
}
void dfs(int u)
{
    disc[u]=tym;
    tym++;
    low[u]=disc[u];
    visited[u]=1;
    int child=0;
    for(int i=0; i<adj[u].size(); i++)
    {
        int k=adj[u][i];
        if(!visited[k])
        {
            parent[k]=u;
            dfs(k);
            low[u]=min(low[u],low[k]);
            child++;
            if(parent[u]==-1&&child>1)
                articulation[u]=1;
            if(parent[u]!=-1&&low[k]>=disc[u])
                articulation[u]=1;
        }
        else if(k!=parent[u])
            low[u]=min(low[u],disc[k]);
    }
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,m,k;
        scanf("%d %d %d",&n,&m,&k);
        clearing(n);
        tym=0;
        for(int i=0; i<m; i++)
        {
            int u,v;
            scanf("%d %d",&u,&v);
            adj[u].pb(v);
            adj[v].pb(u);
        }
        for(int i=0; i<n; i++)
        {
            if(!visited[i])
                dfs(i);
        }
        int ans=0;
        for(int i=0; i<n; i++)
            if(articulation[i]==1)
                ans++;
        printf("%d\n",ans*k);
    }
    return 0;
}
