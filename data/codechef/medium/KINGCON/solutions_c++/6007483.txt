#include<bits/stdc++.h>
using namespace std;

vector<int> adj[3001];
int n, m, k;
bool articulation[3001];
int low[3001];
int dfsn[3001];
int dfsn_ctr=0;

void dfs( int u, int v )
{
    int child = 0;
    dfsn[v] = ++dfsn_ctr;
    low[v] = dfsn[v];
    for ( int i = 0; i < adj[v].size(); i++ )
    {
        int w = adj[v][i];
        if ( !dfsn[w] )
        {
            child++;
            dfs( v, w );
            if ( low[v] > low[w] )
                low[v] = low[w];
            if ( low[w] >= dfsn[v] && u != v )
                articulation[v] = true;
        }
        else if ( w != u && low[v] > dfsn[w] )
            low[v] = dfsn[w];
    }
    if ( u == v && child > 1 )
        articulation[v] = true;
}

void read()
{
    scanf("%d %d %d", &n, &m, &k);
    int a, b, i;
    for(i=0;i<m;i++)
    {
        scanf("%d %d", &a, &b);
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
}
void solve()
{
    dfsn_ctr=0;
    int i, articulation_points=0;
    for(i=0;i<n;i++)
    {
        articulation[i]=false;
        dfsn[i]=0;
    }
    dfs(0, 0);
    for(i=0;i<n;i++)
    {
        if(articulation[i])
            articulation_points++;
    }
    printf("%d\n", articulation_points*k);
    for(i=0;i<n;i++)
        adj[i].clear();
}
int main()
{
    int test;
    scanf("%d", &test);
    while(test--)
    {
        read();
        solve();
    }
}
