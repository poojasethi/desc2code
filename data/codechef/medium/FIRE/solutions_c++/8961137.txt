#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<string>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<cassert>
using namespace std;

//#define S(n)             scanf("%d",&n)
#define SL(n)            scanf("%lld",&n)
#define SD(n)            scanf("%f",&n)
#define SS(a)            scanf("%s",a)
#define DB(x)            cout<<#x<<" : "<<x<<endl;

typedef long long LL;
typedef unsigned long long ULL;
typedef unsigned int UINT;
int gcd( int a, int b ) {  if( !b ) return a;  return gcd( b, a % b ); }
#define getcx(ch)	(ch=getchar_unlocked())

/*======================================IO OPTIMISED FUNCTIONS===================================*/
int __sign;
int __ch;
inline void S( int &x )
{
			x=0;
			while((__ch<'0' || __ch>'9') && __ch!='-' && __ch!=EOF)	__ch=getchar_unlocked();
			if (__ch=='-')
				__sign=-1 , __ch=getchar_unlocked();
			else
				__sign=1;
			
			do
				x=(x<<3)+(x<<1)+__ch-'0';
			while((__ch=getchar_unlocked())>='0' && __ch<='9');
			x*=__sign;
}
/*===============================================================================================*/



//===========================================================================//
//=============MAIN CODE BEGINS HERE=========================================//
//===========================================================================//

int adj[10007][3] , deg[10007];
int special[10007];
//int visited[10007];
int M[10007];

int N,s,t;
void input()
{
	memset(M,-1,sizeof M);
	memset(special,0,sizeof special);
//	memset(visited,0,sizeof visited);
	S(N) , S(s) , S(t);
	
	int n,x;
	for (int i = 0; i < N; i += 1)
	{		
		S(n);
		deg[i+1]=n;
		for (int j = 0; j < n; j += 1)
		{
			S(x);
			adj[i+1][j] = x;
		}
	}

	for (int i = 0; i < t; i += 1)
	{
		S(x);
		special[x]=1;
	}
}

#define SAVE 1
#define CANT_SAVE 0

int solve(int n, int p)
{
	if (M[n]!=-1) return M[n];
	
	if ( special[n] == 1 ) return M[n]=CANT_SAVE;
	
	int *a = adj[n];
	for (int i = 0; i < deg[n]; i += 1)
		if ( a[i]!= p )
			M[ a[i] ] = solve( a[i] , n );

	if ( deg[n] == 3 )
	{
		if ( a[0] == p )			return M[ a[1] ] | M[ a[2] ];
		else if ( a[1] == p )		return M[ a[0] ] | M[ a[2] ];
		else return M[ a[0] ] | M[ a[1] ];
	}
	else if ( deg[n] == 2 )
	{
		if ( p==0 )	return M[a[0]] | M[a[1]];
		else if ( a[0] == p )	return M[ a[1] ];
		else return M[ a[0] ];
	}
	else
		return SAVE;
}

int main()
{
	int tc;
	S(tc);
	while(tc--)
	{
		input();
		
		if ( solve(s,0)==SAVE )
			puts("yes");
		else
			puts("no");
	}
	return 0;
}