#include <cstdio>
#include <deque>
#include <vector>

using namespace std;

vector <int> adjlist[10005];
int pf[10005];

bool wanted[10005];

int possible_from(int node, int parent){

	if (pf[node]!=-1){
		return pf[node];
	}

	int arr[2];
	int cc=0;
	vector<int>::iterator x;
	for (x=adjlist[node].begin(); x!=adjlist[node].end(); x++){
		if (*x!=parent){
			arr[cc] = *x;
			cc++;
		}
	}

	if (cc<=1){
		return pf[node] = true;
	}

	if (wanted[arr[0]] && wanted[arr[1]]) return pf[node] = false;

	return pf[node] = possible_from(arr[0], node) || possible_from(arr[1], node);
}

int helper(int start){
	if (adjlist[start].size()<=2) return possible_from(start, -1);
	int ww=0;
	ww = wanted[adjlist[start][0]] + wanted[adjlist[start][1]] + wanted[adjlist[start][2]];
	if (ww>1){
		return false;
	}
	ww=possible_from(adjlist[start][0], start) + possible_from(adjlist[start][1], start) + possible_from(adjlist[start][2], start);
	if (ww<2){
		return false;
	}
	return true;
}

int main(){
	int tc;
	scanf("%d", &tc);

	while (tc--){
		int n, s, t;
		scanf("%d %d %d", &n, &s, &t);
		for (int i=1; i<=n; i++){
			int sz;
			scanf("%d", &sz);
			wanted[i]= false;
			pf[i]=-1;
			adjlist[i].clear();
			for (int j=1; j<=sz; j++){
				int c;
				scanf("%d", &c);
				adjlist[i].push_back(c);
			}
		}

		for (int i=1; i<=t; i++){
			int c;
			scanf("%d", &c);
			wanted[c]=true;
		}

		if (!wanted[s] && helper(s)){
			printf("yes\n");
		} else {
			printf("no\n");
		}
	}
	return 0;
}
