 
#include <assert.h>
#include <ctype.h>
#include <float.h>
#include <math.h>
#include <stdio.h>
#include <string>
#include <stdlib.h>
#include <time.h>
#include <algorithm>
#include <numeric>
#include <functional>
#include <utility>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <memory.h>
 
using namespace std;
 
const int MAX_SIZE = 20000;
static char input[MAX_SIZE];
 
struct Scanner
{
Scanner()
{
int sz = fread(input, 1, sizeof(input), stdin);
curPos = input;
}
int nextInt()
{
int gap = input + MAX_SIZE - curPos;
if (gap < 100)
{
memcpy(input, curPos, gap);
fread(input + gap, 1, sizeof(input) - gap, stdin);
curPos = input;
}
 
while (*curPos < '0') curPos++;
int res = 0;
 
while (*curPos >= '0')
{
res = res * 10 + (*curPos) - '0';
curPos++;
}
return res;
}
 char* curPos;
};
 
 
 
 
void tree(int prev,int crt,int * prt,int * bro,int ar[][4])
{
 int x=0,y=0,xx=0,yy=0,yyy=0;
if(ar[crt-1][0]==1)return;
else if(ar[crt-1][0]==2)
{
if(ar[crt-1][1]!=prev)
{
x=1;
*(prt+ar[crt-1][1])=crt;
}
if(ar[crt-1][2]!=prev)
{ 
if(x==1){
         *(bro+ar[crt-1][2])=ar[crt-1][1];
         *(bro+ar[crt-1][1])=ar[crt-1][2];
}  
*(prt+ar[crt-1][2])=crt;
 
}  
if(x==1)tree(crt, *prt+ar[crt-1][1],prt,bro,ar);
tree(crt,*prt+ar[crt-1][2],prt,bro,ar);   
}
else if(ar[crt-1][0]==3)
 {
if(ar[crt-1][1]!=prev)
{
y=1;
*(prt+ar[crt-1][1])=crt;
}
if(ar[crt-1][2]!=prev)
  {
yy=1;
*(prt+ar[crt-1][2])=crt;
if(y==1){
         *(bro+ar[crt-1][2])=ar[crt-1][1];
         *(bro+ar[crt-1][1])=ar[crt-1][2];
}  
} 
if(ar[crt-1][3]!=prev)
{
*(prt+ar[crt-1][3])=crt;
if(y==1)
{
         *(bro+ar[crt-1][1])=ar[crt-1][3];
         *(bro+ar[crt-1][3])=ar[crt-1][1];
}  else if(yy==1){
         *(bro+ar[crt-1][3])=ar[crt-1][2];
         *(bro+ar[crt-1][2])=ar[crt-1][3];
} 
if(y==1)tree(crt, *prt+ar[crt-1][1],prt,bro,ar);
if(yy==1)tree(crt,*prt+ar[crt-1][2],prt,bro,ar);   
tree(crt,*prt+ar[crt-1][3],prt,bro,ar);
}
}
}
 
int main(int argc, char* argv[])
{
#ifndef ONLINE_JUDGE
 
freopen("test.in", "r", stdin);
#endif
 
Scanner sc;
int T = sc.nextInt();
    int  n, s, t, i, j;
    
    while(T--)
    {
    n=sc.nextInt();
    s=sc.nextInt();
    t=sc.nextInt();
    
    int ar[n][4] ,bro[n+1] ,prt[n+1], save[t], status[n+1];
    for(i=0;i<n;i++)
    {
    prt[i]=0;
    bro[i]=0;status[i]=0;
    for(j=0;j<4;j++)
    ar[i][j]=0;
    }//end of for loop : intialise
    status[n]=0;bro[n]=0;prt[n]=0;
    for(i=0;i<n;i++)
    {
    ar[i][0]=sc.nextInt();
    for(j=1;j<=ar[i][0];j++)
    ar[i][j]=sc.nextInt();
    }
    for(i=0;i<t;i++)
    {
    save[i]=sc.nextInt();
    status[save[i]]=1;
    }
    int* a;int * b;int * arr;
    a=prt;b=bro;//arr=ar[i];
    tree(0,s,  a , b, ar);
 
int m;
for(i=0;i<t;i++)
{
m=save[i];
while(status[m]!=0  && status[bro[m]]!=0  )
{
status[bro[m]]=0;
status[m]=0;
status[prt[m]]=-1;
m=prt[m];
if(m==s)break;
}//end while
if(m==s)break;
}//end for
if(m==s)
printf("no\n");
else
printf("yes\n");
}//end while testcase
return 0;
}//end main
    