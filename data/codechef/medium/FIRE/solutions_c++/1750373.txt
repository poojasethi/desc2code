// BushFire.cpp : Defines the entry point for the console application.
//
#include <cstdlib>
#include <iostream>
#include <cstring>


//#include "stdafx.h"


using namespace std;

//int _tmain(int argc, _TCHAR* argv[])
//{
//	return 0;
//}

//#include <cstdlib>
//#include <iostream>
//#include <cstring>



    class Bush
    {
        public:
        Bush** Links;
        int LinksLength;
        bool NeedToSave;
        bool BackLinkRemoved;

		Bush()
		{
			Links = 0;
			LinksLength = 0;
			NeedToSave = false;
			BackLinkRemoved = false;
		}
    };
    
    class BushOnFire
    {
        public:
        Bush* ABush;
        BushOnFire* Next;

        BushOnFire()
        {
			ABush = 0;
			Next = 0;
        }

        BushOnFire(Bush* bush)
        {
            ABush = bush;
			Next = 0;
        }
    };

Bush** bushes;


        void AddBushesOnFire(BushOnFire* &newBushOnFire, Bush *bush)
        {
            if (bush -> Links != 0)
            {
                for (int j = 0; j < bush->LinksLength; j++)
                {
                    if (bush->Links[j] != 0)
                    {
                        BushOnFire* bof = new BushOnFire(bush->Links[j]);
                        bof->Next = newBushOnFire;
                        newBushOnFire = bof;
                    }
                }
            }
        }
        
        void FreeBushesOnFire(BushOnFire *bushesOnFire)
        {
            while (bushesOnFire)
            {
                  BushOnFire *b = bushesOnFire;
                  bushesOnFire = b-> Next;
                  delete b;
            }
         }

        void RemoveParentLink(Bush* parentBush)
        {
            if (!parentBush->BackLinkRemoved && parentBush->Links != 0)
            {
                for (int i = 0; i < parentBush->LinksLength; i++)
                {
                    Bush* child = parentBush->Links[i];
                    if (child != 0 && child->Links != 0)
                    {
                        for (int j = 0; j < child->LinksLength; j++)
                        {
                            if (child->Links[j] == parentBush)
                            {
                                child->Links[j] = 0;
                            }
                        }
                    }
                }
                parentBush->BackLinkRemoved = true;
            }
        }

        Bush* GetBush(int curBushNum)
        {
            Bush* res = bushes[curBushNum];
            if (res == 0)
            {
                bushes[curBushNum] = res = new Bush();
            }
            return res;
        }

        static void ReadRelations(int curBushNum)
        {
            int nr;
			int r[5];
            cin >> nr;
			//scanf("%d %d %d %d %d %d", &nr, &r[0], &r[1], &r[2], &r[3], &r[4]);
            if (nr > 0)
            {
                Bush* curBush = GetBush(curBushNum);
                curBush->Links = new Bush*[nr];
                curBush->LinksLength = nr;
                for (int i = 0; i < nr; i++)
                {                    
                    int rb;// = r[i];
                    cin >> rb;
                    rb--;
                    curBush->Links[i] = GetBush(rb);
                }
            }
        }

        static void ReadBushesToSave(int numSave)
        {
            for (int i = 0; i < numSave; i++)
            {
                int rb;
                cin >> rb;
                rb--;
                GetBush(rb)->NeedToSave = true;
            }
        }

        bool PossibleToSave(BushOnFire* bushesOnFire, Bush* bushToProtect)
        {
            if (bushesOnFire == 0) return true;

            BushOnFire* curBushOnFire = bushesOnFire;
            BushOnFire* newBushesOnFire = 0;
            while (curBushOnFire != 0)
            {
                if (curBushOnFire->ABush != bushToProtect)
                {
                    if (curBushOnFire->ABush->NeedToSave) return false;

                    RemoveParentLink(curBushOnFire->ABush);

                    AddBushesOnFire(newBushesOnFire, curBushOnFire->ABush);
                }
                curBushOnFire = curBushOnFire->Next;
            }

            if (newBushesOnFire == 0) return true;

            BushOnFire* curProtectedBush = newBushesOnFire;
            while (curProtectedBush != 0)
            {
                if (PossibleToSave(newBushesOnFire, curProtectedBush->ABush)) return true;
                
                curProtectedBush = curProtectedBush->Next;
            }

            FreeBushesOnFire(newBushesOnFire);

            return false;
        }

void FreeBushes(int n)
{
        for (int i = 0; i < n; i++)
        {
            if (bushes[i]) delete bushes[i];
        }
        delete bushes;
}

char buf[80];
//int _tmain(int argc, _TCHAR* argv[])
int main(int argc, char *argv[])
{
    int t;
    cin >> t;
	//scanf("%d", &t);

            for (int it = 0; it < t; it++)
            {
                //Console.ReadLine();//Skip blank line
				//gets(buf);
                //scanf(&c);
                int n, start, numSave;
                cin >> n >> start >> numSave;
				//scanf("%d %d %d", &n, &start, &numSave);

                bushes = new Bush*[n];
                for (int i = 0; i < n; i++) bushes[i] = 0;

                for (int i = 0; i < n; i++)
                {
                    ReadRelations(i);
                }

                ReadBushesToSave(numSave);

                BushOnFire* bushesOnFire = new BushOnFire(GetBush(start - 1));
                
                bool possible = PossibleToSave(bushesOnFire, 0);
                
                FreeBushesOnFire(bushesOnFire);
                
                printf(possible ? "yes\n" : "no\n");
                
                FreeBushes(n);
            }
    
    return 0;//EXIT_SUCCESS;
}
