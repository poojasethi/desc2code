#include <stdio.h>
 

struct Bush
{
   int c; 
   int n[3];//neighbors
};

bool isSaved[10002];
bool visited[10002];
int n,s,t;
int c;//number of bushes

Bush In[10002];
bool flag;

inline bool isLeaf(Bush B)
{
    if(B.c==1 || B.c==0)//it's parent is the only neighbor or no neighbors
        return true;
    else
        return false;
}
void burn(int present_bush_index)
{
    visited[present_bush_index]=true;
    if(isSaved[present_bush_index])
        return;//do not burn it...
    if(isLeaf(In[present_bush_index]))
    {
        flag=true;
        return;
    }
    else if(!flag)
    {
        int i;
        for(i=0;i<In[present_bush_index].c;i++)
        {
            if(!visited[In[present_bush_index].n[i]])
                burn(In[present_bush_index].n[i]);
        }
    }
}
int main()
{
    
    int i,test,j,num;
    
    scanf("%d",&test);//test cases
    while(test--)
      {
        scanf("%d",&n);
        scanf("%d",&s);
        scanf("%d",&t);
        
        flag=false;
        
        for(i=1;i<=n;i++)
        {
            scanf("%d",&c);//number of close to bushes
            In[i].c=c;
            for(j=0;j<c;j++)
                scanf("%d",&In[i].n[j]);
        }
        
        for(i=0;i<=n;i++)
        {
            isSaved[i]=false;
            visited[i]=false;
        }
        
        for(i=0;i<t;i++)
        {
            scanf("%d",&num);
            isSaved[num]=true;//save bushes with id num
        }
        
        burn(s);
        
        if(flag)
            printf("\nyes");
        else
            printf("\nno");
      
    }
}