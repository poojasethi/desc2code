#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
using namespace std;

const int maxN = 10005;

int n;//number of bushes indexed 1 to n
int s;//index of bush initially on fire
int t;//number of bushes to save

int savebush[maxN];
bool visited[maxN];
int connect[maxN][3];

struct node
{
    int bushindex;
    node* left;
    node* right;
};

node* addnode(int x)
{
    node* tmp;
    tmp = new node;
    tmp->bushindex = x;
    tmp->left = NULL;
    tmp->right = NULL;
    return tmp;
}
void addleftch(node* n, int x)
{
    if(n == NULL)return;
    else
    n->left = addnode(x);

}
void addrightch(node* n, int x)
{
    if(n == NULL)return;
    else
    n->right = addnode(x);
}
void print(node* root)
{
    if(root == NULL)return;
    cout<<root->bushindex<<" ";
    print(root->left);
    print(root->right);
}


void printg()
{
    cout<<endl<<"The graph is "<<endl;
    for(int i=1; i<=n; i++)
    {
        for(int j=0;j<3; j++)
        cout<<connect[i][j]<<" ";
        cout<<endl;
    }
}

void init()
{
     for(int i=1; i<=n; i++)
    visited[i] = 0;

    for(int i=1; i<=n; i++)
    for(int j=0; j<3; j++)
    connect[i][j] = 0;

}
void buildtree(node* root)
{
 int i= root->bushindex;
 //cout<<i<<endl;
 int j=0;
 while ((connect[i][j]==0 || visited[connect[i][j]] == 1) && j<3)j++;
 //cout<<j<<" left "<<endl;
 if(j<3)
 {
  addleftch(root, connect[i][j]);
  visited[connect[i][j]] = 1;
  buildtree(root->left);
 }
 while ((connect[i][j]==0 || visited[connect[i][j]] == 1) && j<3)j++;
  //cout<<j<<" right"<<endl;
   if(j<3)
 {
    addrightch(root, connect[i][j]);
  visited[connect[i][j]] = 1;
  buildtree(root->right);
 }
 return;
}


int bsearch(int p[], int size, int x)
{
    int low = 0;
    int high = size-1;
    while(low<=high)
    {
        int mid = (low+high)/2;
        if(p[mid] == x)return 1;
        if(p[mid]>x) high = mid-1;
        else
        low = mid+1;

    }
    return 0;
}
bool protect(node *v)
{
    if(bsearch(savebush, t, v->bushindex)== 1)
    return 0;
    if(v->right == NULL)return 1;
    return (protect(v->left)|protect(v->right));
}



int main()
{
    int T;
    scanf("%d", &T);
    while(T--)
    {

    int c;//number of bushes close (0<=c<=3)
    int bush;//a bush
    scanf("%d%d%d", &n, &s, &t);
    init();
    //get in closeness relations
    for(int i=1; i<=n; i++)
    {
        scanf("%d", &c);
        for(int j=0; j<c; j++)
        {
            scanf("%d", &bush);
            connect[i][j] = bush;
        }
    }

    // printg();
    for(int i=0; i<t; i++)
    scanf("%d", savebush+i);



    node *root;
    root = addnode(s);
    visited[s] = 1;

    buildtree(root);
    //cout<<"The tree is "<<endl;
    //print(root);
    //cout<<endl;
    sort(savebush, savebush + t);
    printf("%s\n", !protect(root)?"no":"yes");

    }
}
