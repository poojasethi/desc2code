#include <stdio.h>
//#include <iostream>
//#include <fstream>
//#include <vector>
//#include <map>
using namespace std;

//#define LOCAL_TEST
//#define TRACES_ON

#ifndef LOCAL_TEST
	#define input_stream cin	
#endif

#ifndef TRACES_ON
	#define printf_x
#endif

/*
typedef struct {
	bool save;
	vector<int> children_list;
}children;
*/
//map<int, children> tree;
short tree[11000][5];

void read_forest_attributes(int &bush_count, int& source_bush, int& protect_bush_count){
	scanf("%d", &bush_count);
	scanf("%d", &source_bush);
	scanf("%d", &protect_bush_count);

	printf_x("\n bush_count = %d, source_bush = %d, protect_bush_count = %d",
				bush_count, source_bush, protect_bush_count);
}

#if 0
void print_tree_x(int bush_count){
	for (int node = 1; node <=bush_count ; node++){
		printf_x("\n%d ", node);
		for (std::vector<int>::iterator it = tree[node].children_list.begin() ; it != tree[node].children_list.end(); ++it){
			printf_x("%d ", *it);
		}
		printf_x("\nsave = %d", tree[node].save);
	}
}
#endif

void print_tree(int bush_count){
	for (int node = 1; node <= bush_count ; node++){
		printf_x("\n%d ", node);
		for (int idx = 0; idx < tree[node][0] ; idx++){
			printf_x("%d ", tree[node][idx + 2]);
		}
		printf_x("\nsave = %d", tree[node][1]);
	}
}

#if 0
void create_tree_x(istream& stream, int bush_count, int source_bush, int protect_bush_count){
	children sub_tree;
	int child_idx;
	int children_count;
	for(int bush_idx = 1; bush_idx <= bush_count ; bush_idx++){
		stream >> children_count;
		sub_tree.save = false;
		sub_tree.children_list.clear();		
		for(int child_count = 0; child_count < children_count ; child_count++){
			stream >> child_idx;
			sub_tree.children_list.push_back(child_idx);
		}
		tree[bush_idx] = sub_tree;		
	}

	for(int bush_idx = 0;bush_idx < protect_bush_count; bush_idx++){
		stream >> child_idx;
		tree[child_idx].save = true;
	}

#ifdef TRACES_ON
	print_tree(bush_count);
#endif
}
#endif

void create_tree(int bush_count, int source_bush, int protect_bush_count){
	int child_idx;
	int children_count;
	short* sub_tree;
	//tree = new short*[bush_count + 1];
	for(int bush_idx = 1; bush_idx <= bush_count ; bush_idx++){
		scanf("%d", &children_count);
		//sub_tree = new short[children_count + 2];
		//sub_tree[0] = children_count;
		//sub_tree[1] = false;
		tree[bush_idx][0] = children_count;
		tree[bush_idx][1] = 0;

		for(int child_count = 0; child_count < children_count ; child_count++){
			scanf("%d", &child_idx);
			tree[bush_idx][child_count + 2] = child_idx;
		}
		//tree[bush_idx] = sub_tree;		
	}

	for(int bush_idx = 0;bush_idx < protect_bush_count; bush_idx++){
		scanf("%d", &child_idx);
		tree[child_idx][1] = true;
	}

#ifdef TRACES_ON
	print_tree(bush_count);
#endif
}

#if 0
void dfs_x(int node, int parent){
	int protect_bush_count = 0;

	for (std::vector<int>::iterator it = tree[node].children_list.begin() ; it != tree[node].children_list.end(); ++it){
		if(*it == parent)
			continue;
		dfs(*it, node);
		if(tree[*it].save)
			protect_bush_count++;		
	}

	if(protect_bush_count > 1)
		tree[node].save = true;
}
#endif

void dfs(int node, int parent){
	int protect_bush_count = 0;

	for (int idx = 0; idx < tree[node][0] ; idx++){
		if(tree[node][idx + 2] == parent)
			continue;
		dfs(tree[node][idx + 2], node);
		if(tree[tree[node][idx + 2]][1])
			protect_bush_count++;		
	}

	if(protect_bush_count > 1)
		tree[node][1] = true;
}


bool check(int source_bush){
	dfs(source_bush, source_bush);
	return tree[source_bush][1];
}

int brush_fire_main(int argv, char** argc){
	printf_x("Enter brush_fire_main");
#ifdef LOCAL_TEST
	ifstream input_stream;
	input_stream.open(argc[1], ifstream::in);
#endif
	int num_test_cases = 0;
	int bush_count = 0;
	int source_bush_idx = 0;
	int num_bushes_protect = 0;


	scanf("%d", &num_test_cases);
	printf_x("\nNumber of test cases = %d",num_test_cases);
	while(num_test_cases > 0){
		read_forest_attributes(bush_count, source_bush_idx, num_bushes_protect);
		create_tree(bush_count, source_bush_idx, num_bushes_protect);
		//cout << endl << (check(source_bush_idx)? "no" : "yes");
		printf("\n%s",(check(source_bush_idx)? "no" : "yes"));
		num_test_cases--;
/*
		for(int i = 0; i < bush_count; i++) {
			delete[] tree[i+1];
		}
		delete[] tree;
*/
	}
	printf_x("\nExit brush_fire_main"); 
	return 0;
}

#ifndef LOCAL_TEST
int main(int argv, char** argc){
	return brush_fire_main(argv,argc);
}
#endif