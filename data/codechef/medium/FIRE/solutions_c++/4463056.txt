#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>
 
using namespace std; 
 
const int MAX_SIZE = 20000;
static char input[MAX_SIZE];
 
struct Scanner
{
	Scanner()
	{
		int sz = fread(input, 1, sizeof(input), stdin);
		curPos = input;
	}
	int nextInt()
	{		
		int gap = input + MAX_SIZE - curPos;
		if (gap < 100)
		{
			memcpy(input, curPos, gap);
			fread(input + gap, 1, sizeof(input) - gap, stdin);
			curPos = input;
		}
 
		while (*curPos < '0') curPos++;
 
		int res = 0;
		while (*curPos >= '0') 
		{
			res = res * 10 + (*curPos) - '0';
			curPos++;
		}
		return res;
	}
 
	char* curPos;
};
 
int childCount[11000];
int child[11000][3];
 
bool special[11000];
 
bool canProtect(int s, int p)
{
	if (special[s])
		return false;
 
	int cant = 0;
 
	for (int i = 0; i < childCount[s]; i++)
	{
		int t= child[s][i];
		if (t == p)
			continue;
 
		if (!canProtect(t, s))
			cant++;
	}
	if (cant > 1)
		return false;
	return true;
}
 
int main(int argc, char* argv[])
{
#ifndef ONLINE_JUDGE
	freopen("test.in", "r", stdin);
#endif
 
	Scanner sc;
 
	int T = sc.nextInt();
 
	while (T--)
	{
		int N = sc.nextInt();
		int s = sc.nextInt();
		int t = sc.nextInt();
 
		for (int i = 1; i <= N; i++)
		{
			childCount[i] = sc.nextInt();
 
			for (int j = 0; j < childCount[i]; j++)
				child[i][j] = sc.nextInt();
		}
 
		fill(special, special + N + 1, false);
 
		while (t--)
		{
			int x = sc.nextInt();
			special[x] = true;
		}
 
		printf("%s\n", canProtect(s, s) ? "yes" : "no");
	}
 
	return 0;
} 