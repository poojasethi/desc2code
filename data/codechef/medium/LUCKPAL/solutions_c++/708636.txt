#include<iostream>
#include <string>
#include <algorithm>
using namespace std;

main()
{
	int t;
	cin >> t;
	
	while(t--)
	{
		string s;
		cin >> s;
		
		if (s.size() < 9)
		{
			cout << "unlucky\n";
		} else
		{
			int mi = 100000;
			string ans = "";
			for (int i = 0; i < s.size()-4; i++) //{till the end}
			{
				string p = s;
				int c = 0;
				if (p[i] != 'l') 
				{
					p[i] = 'l';
					c++;
				}
				if (p[i+1] != 'u') 
				{
					p[i+1] = 'u';
					c++;
				}
				if (p[i+2] != 'c') 
				{	
					p[i+2] = 'c';
					c++;
				}
				if (p[i+3] != 'k') 
				{
					p[i+3] = 'k';
					c++;
				}
				if (p[i+4] != 'y') 
				{
					p[i+4] = 'y';
					c++;
				}
				//cout<<p<<endl;
				for (int j = 0, k = s.size()-1; j <= k; j++,k--)
				{
					if (p[j] != p[k]) 
					{
						if (j >= i && j <= i+4) //{inside "lucky"}
						{
							if (k >= i && k <= i+4)//{inside "lucky"}
							{
								c = 100000; //{"terminate -- 1"}
								break;
							} else 
							{
								p[k] = p[j]; // {copy - 'l'|'u'|'c'|'k'|'y'}
								c++;
							}
						} else if (k >= i && k <= i+4)
						{
							if (j >= i && j <= i+4)
							{
								c = 100000; //{"terminate -- 1"}
								break;
							} else
							{
								p[j] = p[k]; // {copy - 'l'|'u'|'c'|'k'|'y'}
								c++;
							}
						} else
						{
							char ch = min(p[j],p[k]);// {copy - lexicographically smaller character}
							p[j] = ch;
							p[k] = ch;
							c++;
						}
					} 
				}
				if (mi > c) //{never reached terminate -- 1 or terminate -- 2}
				{
					mi = c; //{changes same as c}
					ans = p;//{answer same as p}
				} else if (mi == c)//{terminate -- 1}
				{
					if (ans == "") ans = p; //{answer hasn't been set even once} 
					else ans = min(ans,p); //{answer has been set on a previous iteration}
				}
			//cout<<ans<<" "<<mi<<"\n";
            }
			if (ans == "") cout << "unlucky\n";
			else cout << ans << " " << mi << "\n";
		}
	}
}
