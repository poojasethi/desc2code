#define DEBUG 0

#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;

int best, l;
char s[1001], b[1001];

void test_front(int pos, char lucky[]) {
  int ops=0, i;
  char t[1001];
  t[l]='\0';
  if(DEBUG)
    memset(t, '\0', sizeof(t));
  for(i=0;i<pos;i++) {
    if(s[i]!=s[l-i-1])
      ops++;
    t[i]=t[l-i-1]=min(s[i],s[l-i-1]);
  }
  if(DEBUG)
    printf("t now %s\n", t);
  for(i=0;i<5;i++) {
    if(s[pos+i]!=lucky[i])
      ops++;
    t[pos+i]=lucky[i];
    if(s[l-(pos+i)-1]!=lucky[i] && pos+i!=l-(pos+i)-1)
      ops++;
    t[l-(pos+i)-1]=lucky[i];
  }
  if(DEBUG)
    printf("t now %s\n", t);
  for(i=pos+5;i<=(l-1)/2;i++) {
    if(s[i]!=s[l-i-1])
      ops++;
    t[i]=t[l-i-1]=min(s[i],s[l-i-1]);
  }
  if(DEBUG)
    printf("test_front pos=%d t=%s ops=%d\n", pos, t, ops);
  if(ops<best) {
    strcpy(b,t);
    best=ops;
  } else if(ops==best && strcmp(b,t)>0)
    strcpy(b,t);
}
/*
void test_back(int pos, char lucky[]) {
  int ops=0, i;
  char t[1001];
  t[l]='\0';
  if(DEBUG)
    memset(t, '\0', sizeof(t));
  for(i=l/2;i<pos;i++) {
    if(s[i]!=s[l-i-1])
      ops++;
    t[i]=t[l-i-1]=min(s[i],s[l-i-1]);
  }
  if(DEBUG)
    printf("t now %s\n", t);
  for(i=0;i<5;i++) {
    if(s[pos+i]!=lucky[i])
      ops++;
    t[pos+i]=lucky[i];
    if(s[l-(pos+i)-1]!=lucky[i])
      ops++;
    t[l-(pos+i)-1]=lucky[i];
  }
  if(DEBUG)
    printf("t now %s\n", t);
  for(i=pos+5;i<l;i++) {
    if(s[i]!=s[l-i-1])
      ops++;
    t[i]=t[l-i-1]=min(s[i],s[l-i-1]);
  }
  if(DEBUG)
    printf("test_back pos=%d t=%s ops=%d\n", pos, t, ops);
  if(ops<best) {
    strcpy(b,t);
    best=ops;
  } else if(ops==best && strcmp(b,t)>0)
    strcpy(b,t);
}
*/

int main(void) {
  int tc, i;
 
  scanf("%d", &tc);
  while(tc--) {
    scanf("%s", &s);
    l=strlen(s);
    if(DEBUG)
      printf("s=%s l=%d\n", s, l);
    if(l<9) {
      printf("unlucky\n");
      continue;
    }
    best=l+1;    
    for(i=0;i+4<=(l-1)/2;i++) {
      test_front(i,"lucky");
      test_front(i,"ykcul");
    }
/*    for(i=l/2;i+4<l;i++) {
      test_back(i,"lucky");
      test_back(i,"ykcul");
    }*/
    printf("%s %d\n", b, best);
  }
  return 0;
}
