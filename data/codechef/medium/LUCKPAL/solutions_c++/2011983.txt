#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<vector>
#include<utility> 
#include<algorithm>
using namespace std;
#define SORT(a,n) qsort(a,n,sizeof(int),intcmp)
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%I64d",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
#define fill(a,v)                   memset(a, v, sizeof(a))
int intcmp(const void *f,const void *s)
{
   return (*(int *)f -*(int *)s);
}
int gcd(int a,int b){ return ((b==0)?a:gcd(b,a%b));}

#define MAX 1024
#define MODBY 1000000007
#define pb push_back
typedef long long int lld;
typedef long double Lf;
int preprocess()
{
   return 0;
}
int ispalin(char *a,int n)//0 indexed array
{
   int i=0,j=n-1;
   while(i<j){
      if(a[i]!=a[j]) return 0;
      i++;
      j--;
   }
   return 1;
}
int min(int a,int b){ return (a<b)?a:b;}
typedef pair < int, char > pic;
int cmp(vector < pic > &a, vector < pic > &b,char *pal)
{
   uint i=0,j=0;
   while((i<a.size())||(j<b.size())){
      char ca,cb;
      if((i<a.size())&&(j<b.size())){
         if(a[i].first==b[j].first){
            ca=a[i].second;
            cb=b[j].second;
            i++;j++;
         }
         else if(a[i].first<b[j].first){
            ca=a[i].second;
            cb=pal[a[i].first];
            i++;
         }
         else// if(a[i].first>b[j].first)
         {
            cb=b[j].second;
            ca=pal[b[j].first];
            j++;
         }
      }
      else if(i<a.size()){//b is over
         ca=a[i].second;
         cb=pal[a[i].first];
         i++;
      }
      else// if(j<b.size())
      {
         cb=b[j].second;
         ca=pal[b[j].first];
         j++;
      }
      if(ca<cb) return 0;
      else if(ca > cb) return 1;
   }
   return 0;//keep the first
}
int getbest(char *a,char *pal,int n,int *ccost,const char *key,char *res)//everything except key is 1-indexed
{
   int lmid=(n+1)/2;
   int lfrom=lmid-4;
   int i,j;
   int mincost=n*n;
   vector < pair < int,char > > minpriority;
   int pos;
   for(i=1;i<=lfrom;++i){
      int cost=ccost[i-1]+ccost[lmid]-ccost[i+4];
      //printf("for i = %d, fixed cost is %d\n",i,cost)
      vector < pic > priority;
      for(j=0;key[j];++j){//writing key in substring starting at i
         cost+=(a[i+j]!=key[j]);
         priority.pb(pic(i+j,key[j]));
         if((i+j)*2!=n+1){
            cost+=(key[j]!=a[n-(i+j)+1]);
            priority.pb(pic(n-(i+j)+1,key[j]));
         }
      }
      sort(priority.begin(),priority.end());
      if((cost<mincost)||((cost==mincost)&&(cmp(minpriority,priority,pal)))){
         mincost=cost;
         minpriority=priority;
         pos=i;
      }
   }
   strcpy(res+1,a+1);
   for(i=1,j=n;i<=j;++i,--j)
      res[i]=res[j]=min(res[i],res[j]);
   for(i=0;key[i];++i)
      res[pos+i]=res[n-(pos+i)+1]=key[i];
   //printf("%s %d\n",res+1,mincost);
   return mincost;
}
int main()
{
   int cases;
   int i,n;
   char a[MAX],pal[MAX];
   char res1[MAX],res2[MAX];
   int ccost[MAX];
   preprocess();
   a[0]='z';
   for(scanf("%d",&cases);cases;--cases){
      ss(a+1);
      n=strlen(a+1);
      if(n<9){
         printf("unlucky\n");
         continue;
      }
      else if(strstr(a+1,"lucky")&&ispalin(a+1,n)){
         printf("%s %d\n",a+1,0);
         continue;
      }
      int lmid=(n+1)/2;
      ccost[0]=0;
      for(i=1;i<=lmid;++i){
         pal[i]=pal[n-i+1]=min(a[i],a[n-i+1]);
         ccost[i]=ccost[i-1];
         if(a[i]!=a[n-i+1])
            ccost[i]++;
      }
      pal[n+1]='\0';
      int cost1=getbest(a,pal,n,ccost,"lucky",res1);
      int cost2=getbest(a,pal,n,ccost,"ykcul",res2);

      if(cost1<cost2) printf("%s %d\n",res1+1,cost1);
      else if(cost1>cost2) printf("%s %d\n",res2+1,cost2);
      else if(strcmp(res1+1,res2+1)<0) printf("%s %d\n",res1+1,cost1);
      else printf("%s %d\n",res2+1,cost2);
   }
   return 0;
}
