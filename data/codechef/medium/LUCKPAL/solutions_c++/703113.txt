#include<iostream>
#include<cstring>
#include<vector>
using namespace std;

int pal(string &input)
{
    int i, ans=0;
    int l=input.size();
//    cout<<l;
//    cout<<input<<endl;
    for(i=0;i<=l/2;i++)
    {
//        cout<<input[i]<<" "<<input[l-1-i]<<"\n";
        if(input[i]!=input[l-1-i])
        {
           ans++;
           if(input[i]<input[l-1-i])
               input[l-1-i]=input[i];
           else
               input[i]=input[l-1-i];
        }
    }
    return ans;                
}

int lucky(string &a, int i)
{
    int l=a.size();
    int count=0;
    if(a[i]!='l')
    {
       a[i]='l';
       count++;
    }
    if(a[l-1-i]!='l')
    {
       a[l-1-i]='l';
       count++;
    }    
    i++;
    if(a[i]!='u')
    {
       a[i]='u';
       count++;
    }
    if(a[l-1-i]!='u')
    {
       a[l-1-i]='u';
       count++;
    }    
    i++;
    if(a[i]!='c')
    {
       a[i]='c';
       count++;
    }
    if(a[l-1-i]!='c')
    {
       a[l-1-i]='c';
       count++;
    }    
    i++;
    if(a[i]!='k')
    {
       a[i]='k';
       count++;
    }
    if(a[l-1-i]!='k')
    {
       a[l-1-i]='k';
       count++;
    }    
    i++;
    if(a[i]!='y')
    {
       a[i]='y';
       count++;
    }
    if(a[l-1-i]!='y')
    {
       a[l-1-i]='y';
       count++;
    }    
    i++;
    return count;
}

int revlucky(string &a, int i)
{
    int l=a.size();
    int count=0;
    if(a[i]!='y')
    {
       a[i]='y';
       count++;
    }
    if(a[l-1-i]!='y')
    {
       a[l-1-i]='y';
       count++;
    }    
    i++;
    if(a[i]!='k')
    {
       a[i]='k';
       count++;
    }
    if(a[l-1-i]!='k')
    {
       a[l-1-i]='k';
       count++;
    }    
    i++;
    if(a[i]!='c')
    {
       a[i]='c';
       count++;
    }
    if(a[l-1-i]!='c')
    {
       a[l-1-i]='c';
       count++;
    }    
    i++;
    if(a[i]!='u')
    {
       a[i]='u';
       count++;
    }
    if(a[l-1-i]!='u')
    {
       a[l-1-i]='u';
       count++;
    }    
    i++;
    if(a[i]!='l')
    {
       a[i]='l';
       count++;
    }
    if(a[l-1-i]!='l')
    {
       a[l-1-i]='l';
       count++;
    }    
    i++;
    return count;
}

int main()
{
/*    string s="luckycodechef";
        string s1="luckycodykcul";
/*    cout<<lucky(s,0);
    int i;
cin>>i;
*/  
//    cout<<pal(s)<<" fdd";
    int t, i;
    int ans=10000000;
    string a, copy;
    vector<string> result;
    cin>>t;
    while(t--)
    {
        ans=10000000;
        cin>>a;
        copy=a;
//       cout<<copy;
        int len=copy.size();
        if(len<9)
        {
                 result.clear();
                 cout<<"unlucky\n";
                 continue;
        }
        int k=(len+1)%2;
        for(i=0;i<=len/2-4-k;i++)
        {
             copy=a;
             int val1=lucky(copy,i);
//             cout<<val1<<" ";
//               cout<<"lucky:"<<copy<<"%\n";
             int val2=pal(copy);
//               cout<<"pal:"<<copy<<"%\n";
//             cout<<val2<<"\n";
             if(ans>val1+val2)
             {
                 ans=val1+val2;
//                 cout<<"BOOM\n";
                 result.clear();
                 result.push_back(copy);
             }
             else if(ans==val1+val2)
             {
                 result.push_back(copy);
             }
             copy=a;
             val1=revlucky(copy,i);
//             cout<<val1<<" ";
//               cout<<"lucky:"<<copy<<"%\n";
             val2=pal(copy);
//               cout<<"pal:"<<copy<<"%\n";
//             cout<<val2<<"\n";
             if(ans>val1+val2)
             {
                 ans=val1+val2;
//                 cout<<"BOOM\n";
                 result.clear();
                 result.push_back(copy);
             }
             else if(ans==val1+val2)
             {
                 result.push_back(copy);
             }

        }
        string mins=result[0];
//        cout<<mins<<endl;
        for(i=1;i<result.size();i++)
        {
//             cout<<result[i]<<endl;
             if(result[i]<mins)
                 mins=result[i];
        }
        cout<<mins<<" "<<ans<<"\n";
    } 
}
