#include <cstdio>
#include <cstring>
#include <cstdlib>

using namespace std;

inline int get_lucky_cnt(const char *buf, const char *lucky, int i)
{
    int cnt = 0;
    size_t len = strlen(buf);
    for(int j=0; j<5; j++)
    {
        if(buf[i+j] != lucky[j])
            cnt += 1;
        if(i+j < len-1-(i+j) && buf[len-1-(i+j)] != lucky[j])
            cnt += 1;
    }
    return cnt;
}

inline char *make_lucky(char *d, const char *s, const char *lucky, int i)
{
    size_t len = strlen(s);
    strncpy(d, s, len+1);
    for(int j=0; j<5; j++)
    {
        d[i+j] = lucky[j];
        d[len-1-(i+j)] = lucky[j];
    }
    return d;
}

inline void make_pal(const char *in_buf, char *pal_buf, 
                     size_t *cnts, size_t len)
{
    char ci, cj;
    size_t r = len/2 + len%2;

    strncpy(pal_buf, in_buf, len+1);
    for(size_t i=0; i<r; i++)
    {
        if((ci=in_buf[i]) != (cj=in_buf[len-1-i]))
        {
            cnts[i] = i>0 ? cnts[i-1]+1 : 1;
            (ci < cj && (pal_buf[len-1-i] = ci)) || (pal_buf[i] = cj);
        }
        else
            cnts[i] = i>0 ? cnts[i-1] : 0;
    }
}

const int MAX_INPUT=1002;

int main()
{
    char input_buf[MAX_INPUT];
    char pal_buf[MAX_INPUT];
    char buf1[MAX_INPUT];
    char buf2[MAX_INPUT];
    size_t cnts[MAX_INPUT];
    char *lucky_pal;
    char *tmp_buf;
    const char *lucky[2]= {"lucky", "ykcul"};
    size_t cnt;
    size_t len;

    char *t;
    int c;
    int min_c;

    //int T=atoi(fgets(input_buf, MAX_INPUT, stdin));
    int T;
    scanf("%d", &T);
    for(; T>0; T--)
    {
        scanf("%s", input_buf);
        //fgets(input_buf, MAX_INPUT, stdin);
        if ( (len = strlen(input_buf)) < 9) 
            printf("unlucky\n");
        else
        {
            lucky_pal = buf1;
            tmp_buf = buf2;
            //input_buf[--len] = '\0';

            make_pal(input_buf, pal_buf, cnts, len);
            min_c = MAX_INPUT;
            for(int k=0; k<2; k++)
                for(int i=0; i<len/2+len%2-4; i++)
                {
                    c = get_lucky_cnt(input_buf, lucky[k], i) 
                        + cnts[len/2+len%2-1] - cnts[i+4];
                    i > 0 && (c += cnts[i-1]);
                    if((c < min_c 
                        && make_lucky(tmp_buf, pal_buf, lucky[k], i))
                       || (c == min_c 
                           && strcmp(make_lucky(tmp_buf, pal_buf, lucky[k], i), 
                           lucky_pal) < 0))
                    {
                        min_c = c;
                        t = lucky_pal;
                        lucky_pal = tmp_buf;
                        tmp_buf = t; 
                    }
                } 
           printf("%s %d\n", lucky_pal, min_c); 
        }
    }
    return 0;
}
