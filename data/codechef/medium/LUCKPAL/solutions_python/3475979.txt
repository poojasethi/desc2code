import sys, copy

def makeLucky( ss ):
    # return tuple ( lowpal, changecnt ) or (None,None) if unlucky

    s = bytearray( ss )    
    lens = len(s)
    if lens<9:
        return (None,None)
    swaplim = int(lens/2)
    if swaplim*2 == lens:
        # even     
        firstspanx = swaplim - (5-1)  # 1st index of 'lucky' span pal area
        lastspanx  = swaplim - 1      # last such index
    else:
        firstspanx = swaplim - (5-2)  # 1st index of 'lucky' span pal area
        lastspanx  = swaplim - 1      # last such index

    blucky = bytearray( b'lucky' )
    spal = copy.copy( s )
    spchgs = bytearray( lens )  #zeros
    totspchgs = 0
    for i in xrange(lens):
        ii = lens-1-i
        if spal[i] > spal[ii]:
            spal[i] = spal[ii]
            spchgs[i] = 1
            totspchgs += 1
    save1 = bytearray( 5 )
    save2 = bytearray( 5 )

    minchgs = 999999
    bestpal = bytearray( lens )
    for i in xrange(lens-4):
        # complentary slices [i:i+5] and [lens-5-i:lens-i]
        #     calc: [ lens-1-(i+4) = lens-5-i  :  (lens-5-i)+ 5 = lens-i ]        
        if i >= firstspanx and i <= lastspanx:
            # part of 'lucky' is in pal midpoint area; known can't form palindrome
            pass
        else:
            # count changes to get lucky
            chgs = 0
            for k in xrange(i,i+5):
                chgs += (s[k] != blucky[k-i])  # move to put lucky in
                kk = lens-1-k
                if kk != k:
                    chgs += (s[kk] != blucky[k-i]) # copy to match lucky
            # count swaps generally needed less our two uniquely modified areas
            notdone = sum(spchgs[i:i+5]) + sum(spchgs[lens-5-i:lens-i])
            chgs += totspchgs - notdone
            if chgs <= minchgs:
                # construct seq in spal, compare, and remember if it is best
                save1[:] = spal[i:i+5]
                save2[:] = spal[lens-5-i:lens-i]
                spal[i:i+5] = blucky
                for k in xrange(i,i+5):
                    if spal[lens-1-k] != spal[k]:
                        spal[lens-1-k] = spal[k]
                if chgs < minchgs:
                    minchgs = chgs
                    bestpal[:] = spal
                else:
                    if spal < bestpal:
                        bestpal[:] = spal
                if testing:
                    print str(spal), chgs
                spal[i:i+5] = save1
                spal[lens-5-i:lens-i] = save2
    return (str(bestpal),minchgs)
                
def testLucky( s ):
    global testing
    testing = False #True
    print s, '<------ input'
    best, cnt = makeLucky( s )
    print best, cnt, '<------ output'

def testit( ):
    testLucky( 'evenlength' )
    testLucky( 'eventyngth' )
    testLucky( 'yuckykcuy' )
    testLucky( 'ykcuxucky' )
    testLucky( 'yuckxucky' )
    testLucky( 'lzckxucky' )
    testLucky( 'luckxucky' )
    testLucky( 'abcdefyedabc' )
    testLucky( 'abcdefyfedabc' )
    testLucky( 'laubcdkey' )
    testLucky( 'luckycodechef' )
    testLucky( 'aaaaaaaa' )
    testLucky( 'qrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbd' )
    testLucky( 'xrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqb' )
    #testLucky( 'qrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopqrstvwxzqbdefghijmnopqrstvwxzgbdefghijmnopaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' )

def runit():
    global testing
    testing = False
    ncases = int(sys.stdin.readline())
    for cn in xrange(ncases):
        s = sys.stdin.readline().rstrip()
        best, cnt = makeLucky( s )
        if best == None:
            print "unlucky"
        else:
            print best, cnt


runit()
