#include<iostream>
#include<cstring>
using namespace std;
void computeLPSArray(char pat[], int M,char lps[]);
int KMPSearch(char pat[], char txt[],int M,int N)
{

    char lps[M];
    int j  = 0;

    computeLPSArray(pat, M, lps);

    int i = 0;
    while (i < N)
    {
      if (pat[j] == txt[i])
      {
        j++;
        i++;
      }

      if (j == M)
      {
        return 1;
        j = lps[j-1];
      }


      else if (i < N && pat[j] != txt[i])
      {
        if (j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
 return 0;
}

void computeLPSArray(char pat[], int M, char lps[])
{
    int len = 0;
    int i;

    lps[0] = 0;
    i = 1;


    while (i < M)
    {
       if (pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else
       {
         if (len != 0)
         {

           len = lps[len-1];


         }
         else
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}
int main()
{
    int fav,found,i,len,j,flag,ans;
    char find[51];
    cin>>fav>>found;
    char str[fav][51];
    for(i=0;i<fav;++i)
        cin>>str[i];
        for(i=0;i<found;++i)
        {
            cin>>find;
            len=strlen(find);

            if(len>=47)
                cout<<"Good\n";
            else
            {   flag=0;
            for(j=0;j<fav;++j)
            {
                ans=KMPSearch(str[j],find,strlen(str[j]),len);
                if(ans)
                {
                    flag=1;
                    break;
                }
            }
            if(flag)
                cout<<"Good\n";
            else
                cout<<"Bad\n";
            }
        }

}
