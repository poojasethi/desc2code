#!/usr/bin/python
# coding=utf8
import sys
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)

class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args)
    t2 = time()
    r2 = f2(*args)
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__, r1, t2 - t1, f2.__name__, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def brut(N, A, B, C):
    count = 0
    for a in xrange(A + 1):
        for b in xrange(B + 1):
            for c in xrange(C + 1):
                if a + b + c <= N:
                    count += 1
    return count


def clever3(N, A, B, C):
    res = 0
    for a in xrange(A + 1):
        #for b in xrange(B + 1):
        #    max_c = min(N - a - b, C)
        #    if max_c >= 0:
        #        res += max_c + 1
        # first step, when max_c == C, we just add C multiple time (untile b ==
        # N-a-C
        initial_B_when_max_c_is_C = 0
        final_B_when_max_c_is_C = min(N - a - C, B)
        #print "B when max_c == C: ", initial_B_when_max_c_is_C, "to", final_B_when_max_c_is_C
        initial_B_when_using_sequence = max(0, final_B_when_max_c_is_C + 1)
        # final sequence stops when B is so big that sum is above N
        final_B_when_using_sequence = min(B, N - a)
        #print "B when using sequence", initial_B_when_using_sequence, "to", final_B_when_using_sequence

        if final_B_when_max_c_is_C >= initial_B_when_max_c_is_C:
            #print "first part added", (final_B_when_max_c_is_C - initial_B_when_max_c_is_C + 1) * (C + 1)
            res += (final_B_when_max_c_is_C - initial_B_when_max_c_is_C + 1) * (C + 1)

        if final_B_when_using_sequence >= initial_B_when_using_sequence and initial_B_when_max_c_is_C >= 0:
            first_sum = N - a - initial_B_when_using_sequence + 1
            last_sum = N - a - final_B_when_using_sequence + 1
            res += (first_sum + last_sum) * (1 + final_B_when_using_sequence - initial_B_when_using_sequence) / 2
            #print "second part added", (first_sum + last_sum) * (1 + final_B_when_using_sequence - initial_B_when_using_sequence) / 2

    return res


def clever(N, A, B, C):
    res = 0
    for a in xrange(A + 1):
        for b in xrange(B + 1):
            max_c = min(N - a - b, C)
            if max_c >= 0:
                res += max_c + 1
    return res


def clever2(N, A, B, C):
    res = 0
    for a in xrange(A + 1):
        b_first_step = N - a - C
        b_first_step = min(B, b_first_step)
        if b_first_step < 0:
            b_first_step = 0
        res += (C + 1) * b_first_step
        b_second_step_max = min(B, N - a)
        #b_second_step_max = B
        print "first=%d N-a=%d  B=%d" %(b_first_step, N - a, B)
        print b_first_step, b_second_step_max
        if b_second_step_max < b_first_step:
            continue
        first_sum = N - a - b_first_step + 1
        last_sum = N - a - b_second_step_max + 1
        print first_sum, last_sum
        res += (first_sum + last_sum) * (b_second_step_max - b_first_step + 1) / 2
    return res


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        N, A, B, C = map(int, data.readline().split())
        #comp(clever, clever3, N, A, B, C)
        print clever3(N, A, B, C)


if __name__ == "__main__":
    main()
