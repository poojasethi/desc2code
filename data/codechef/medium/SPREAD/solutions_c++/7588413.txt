#include<bits/stdc++.h>
using namespace std;
const double pi=acos(-1.0);
const double eps=1e-11;
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end())
#define ll long long int
//#define scl(x) scanf("%lld",&x)
//#define sc(x) scanf("%d",&x);
#define scs(x) scanf("%s",x)
#define printl(x) printf("%lld\n",x)
#define print(x) printf("%d\n",x)
#define printd(x) printf("%lf\n",x)
#define prints(x) printf("%s\n",x)
#define DEBUG(x) cout<<"Value of "<<#x<<" is "<<x<<endl
#define pc putchar
#define mp(A,B) make_pair(A,B)
#define pb(X) push_back(X)
#define INF 1000000000
#define MOD 1000000007
#define SET(x,y) memset(x,y,sizeof(x));
#define endl "\n"
#define f first
#define s second
#define gc getchar_unlocked
//#define gc getchar
inline void sc(int &x)
{
	register int c = gc();
	x = 0;
	int neg = 0;
    for(; ((c<48 || c>57) && c != '-');c=gc())
		;
	if(c=='-')
	{
		neg = 1;
		c = gc();
	}
	for(; c>47 && c<58 ; c = gc()) {
		x = (x<<1) + (x<<3) + c - 48;
	}
	if(neg)
    	x = -x;
}
#define MAXN 1000003
ll ST[3*MAXN];
inline void scl(long long *a) {
	register char c=0;
	while (c < 33)
		c = gc();
	*a = 0;	
	while (c > 33) {
		*a = *a * 10 + c - '0';
		c = gc();
	}
}
void buildTree(int node, int start, int end, ll c)
{
	ST[node]=0;
	if(start==end)
	{
		ST[node]=c;
		return;
	}
	int mid=(start+end)>>1;
	buildTree(2*node, start, mid, c);
	buildTree(2*node+1, mid+1,end, c);
}
void update(int node, int start, int end, int qs, int qe, ll val)
{
	if(end<qs||start>qe||start>end)
	{
		return;
	}
	if(start>=qs&&end<=qe)
	{
		ST[node]+=val;
		return;
	}
	ll mid=(start+end)>>1;
	update(node*2,start,mid,qs,qe,val);
	update(node*2+1,mid+1,end,qs,qe,val);
}
ll ans;
void query(int node, int start, int end, int que)
{
	if(end<que||start>que||start>end)
		return;
	if(que>=start&&que<=end)
	{
		ans+=ST[node];
		if(start==end)
			return;
	}
	ll mid=(start+end)>>1;
	query(node*2,start,mid,que);
	query(node*2+1,mid+1,end,que);
}
int main()
{
	int n,m,qs,qe,que;
	ll c,val;
	char ch;
	sc(n);sc(m);scl(&c);
	buildTree(1,0,n-1,c);
	while(m--)
	{
		ans=0;
		scanf(" %c", &ch);
		if(ch=='S')
		{
			sc(qs);sc(qe);scl(&val);
			update(1,0,n-1,qs-1,qe-1,val);
		}
		else if(ch=='Q')
		{
			sc(que);
			query(1,0,n-1,que-1);
			printl(ans);
		}
	}
	return 0;
}