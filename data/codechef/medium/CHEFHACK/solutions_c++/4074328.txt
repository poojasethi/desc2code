#include <bits/stdc++.h>
		
using namespace std;
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
typedef unsigned long long ull;
typedef long long int lli;
typedef unsigned int ui;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long double ld;
#define var(a,b)  __typeof(b) a = b
#define rep(i,n)  for(int i = 0; (i) < (n); ++i)
#define rept(i,a,b) for(var(i,a); i < (b); ++i)
#define tr(v,it)  for(var(it,v.begin());it!=v.end();++it)
#define fill(a,val) memset(a,val,sizeof(a))
#define gi(n) scanf("%d",&n)
#define all(v) v.begin(),v.end()
#define iinp() input<int>()
#define linp() input<lli>()
#define uinp() input<ull>()

#define get getchar_unlocked

//fast function to scan various integer data types
template <typename T>
inline T input() {
	T n = 0;
	int s = 1;
	char p = get();

	while((p < '0' || p > '9') && p != EOF && p != '-')
		p = get();

	if(p == '-'){ s = -1, p = get(); }

	while(p >= '0' && p <= '9') {
		n = (n << 3) + (n << 1) + (p - '0');
		p = get();
	}
	return n*s;
}

#define NPRIME 664579
#define MAXN 359


bool arr[10000000];
int primes[NPRIME];
int ccc = 0;
 
// marks all mutiples of 'a' ( greater than 'a' but less than equal to 'n') as 1.
void markMultiples(bool arr[], int a, int d)
{
    int i = 2, num;
    while ( (num = i*a) <= d )
    {
        arr[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}
 
// A function to print all prime numbers smaller than n
void SieveOfEratosthenes(int k)
{
    // There are no prime numbers smaller than 2
    if (k >= 2)
    {
        // Create an array of size n and initialize all elements as 0
        
        memset(arr, 0, sizeof(arr));
 
        /* Following property is maintained in the below for loop
           arr[i] == 0 means i + 1 is prime
           arr[i] == 1 means i + 1 is not prime */
        for (int i=1; i<k; ++i)
        {
            if ( arr[i] == 0 )
            {
                //(i+1) is prime, print it and mark its multiples
                //printf("%d, ", i+1);
                primes[ccc] = i+1;
                ccc++;
                markMultiples(arr, i+1, k);
            }
        }
    }
}


int pwd[MAXN][MAXN];
bool visited[MAXN][MAXN];
int n;


int binarysearch(int key) {
	int l = 0, r = NPRIME-1;
	
	while(l < r) {
		int i = (l+r)>>1;
		//cout << "binary\n";
		if(primes[i] == key)
			return i;

		else if(primes[i] > key)
			r = i-1;

		else
			l = i+1;
	}
	if(primes[l] == key)
		return l;

	else return -1;
}

bool isConnected(pii p1, pii p2) {
	int y1 = p1.ff, x1 = p1.ss, y2 = p2.ff, x2 = p2.ss;
	//cout << "yo" << endl;

	if(y2 < 0 || y2 >= n || x2 < 0 || x2 >= n)
		return false;

	int val1 = pwd[y1][x1], val2 = pwd[y2][x2];
	//cout << val1 << val2 << endl;
	int x = binarysearch(val2);
	//cout << "you\n";
	if(x != -1)
		return false;
	//cout << "haha\n";
	return !((val1 + val2) & 1);

}


void dfs(pii p) {
	stack<pii> s;

	s.push(p);
	visited[p.ff][p.ss] = true;

	while(!s.empty()) {
		//cout << "yy" << endl;
		pii t = s.top();
		s.pop();

		pii surr[4];

		surr[0] = mp(t.ff, t.ss + 1);
		surr[1] = mp(t.ff + 1, t.ss);
		surr[2] = mp(t.ff - 1, t.ss);
		surr[3] = mp(t.ff, t.ss - 1);

		rep(i, 4) {
			if(isConnected(t, surr[i]) && !visited[surr[i].ff][surr[i].ss]) {
				//cout << "t1\n";
				s.push(surr[i]);
				visited[surr[i].ff][surr[i].ss] = true;
			}
		}
	}
	//cout << "ffsfs\n";
	return;
}



int main(int argc, char** argv) {
#ifdef LOCAL
    freopen("in", "r", stdin);
#endif

    int t = iinp();
    //cout << t << endl;
    lli ans;
    SieveOfEratosthenes(10000000);

    while(t--) {
    	
    	ans = 0;
    	n = iinp();

    	rep(i, n) {
    		rep(j, n) {
    			pwd[i][j] = iinp();
    			visited[i][j] = false;
    		}	
    	}

    	int x;

    	rep(i, n) {
    		rep(j, n) {
    			//cout << "yo" << endl;
    			x = pwd[i][j];
    			if(x == 2 || visited[i][j])
    				continue;

    			if(!(x & 1)) { // x is even
    				ans += (x >> 1);
    				//cout << "yo1" << endl;
    				dfs(mp(i, j));
    				//cout << "yo2" << endl;

    			}

    			else { // x is odd
    				int k = binarysearch(x);

    				if(k != -1) { // x is prime
    					ans += k;
    				}
    				else {
    					ans += ((x >> 1) + 2);
    					dfs(mp(i, j));
    				}

    			}
    		}
    	}
    	cout << ans << endl;
    }


	return 0;
}