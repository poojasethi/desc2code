#include<bits/stdc++.h>
#define ll long long
#define MOD 10000007
#define sd(n) scanf("%d",&n);
#define pd(n) printf("%d\n",n);
#define sl(n) scanf("%lld",&n);
#define pl(n) printf("%lld\n",n);
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define pi acos(-1.0)
#define MAX 1000001
#define  pii pair<int,int>
bool chk[10000000];
vector<int> v;
int cost[10000000];
bool mk[351][351];
queue<pii> q;
int i,j,t;
int n;
int a[351][351];

void sieve()
{
    memset(chk,false,sizeof(chk));
    chk[0]=true;
    chk[1]=true;

    for(i=2;i<10000000;i++)
    {
        if(chk[i]==1)
        continue;
        for(j=2*i;j<10000000;j+=i)
            chk[j]=true;

    }
}
void mark(int m,int p,int tp)
{
q.push(make_pair(m,p));
 mk[m][p]=true;

while(q.empty()==0)
{

    pii k=q.front();
    int d1=k.first;
    int d2=k.second;
    q.pop();
    mk[d1][d2]=true;
    if(d1+1<n&&(!mk[d1+1][d2])&&(a[d1+1][d2]%2==tp)&&chk[a[d1+1][d2]]!=0)
    {
        mk[d1+1][d2]=true;
        q.push(make_pair(d1+1,d2));
    }
    if(d1-1>=0&&(!mk[d1-1][d2])&&(a[d1-1][d2]%2==tp)&&chk[a[d1-1][d2]]!=0)
    {
        mk[d1-1][d2]=true;
        q.push(make_pair(d1-1,d2));
    }
    if((d2+1<n)&&(!mk[d1][d2+1])&&(a[d1][d2+1]%2==tp)&&chk[a[d1][d2+1]]!=0)
    {
        mk[d1][d2+1]=true;
        q.push(make_pair(d1,d2+1));
    }
    if((d2-1>=0)&&(!mk[d1][d2-1])&&(a[d1][d2-1]%2==tp)&&chk[a[d1][d2-1]]!=0)
    {
        mk[d1][d2-1]=true;
        q.push(make_pair(d1,d2-1));
    }

}



}
int main()
{
    sieve();
    int t;
    sd(t);
int p=0;
	for (int i = 0; i <10000000; ++i) {
		if (!chk[i]) {
			cost[i] = p++;
		} else {
			cost[i] = i / 2 + (i % 2) * 2;
		}
	}

    while(t--){
sd(n);
memset(mk,false,sizeof(mk));
for(i=0;i<n;i++)
    for(j=0;j<n;j++)
    sd(a[i][j]);
    ll sum=0;

for(i=0;i<n;i++)
{
    for(j=0;j<n;j++)
    {
        if(a[i][j]%2==0&&chk[a[i][j]]!=0)
        {
            if(mk[i][j])
                continue;
            else
            {
                sum+=(cost[a[i][j]]);
                mark(i,j,0);


            }

        }
        else if(a[i][j]%2==1&&chk[a[i][j]]!=0)
        {
            if(mk[i][j])
                continue;
            else
            {
                sum+=(cost[a[i][j]]);
                mark(i,j,1);

            }

        }
        else
        {
            int k;
                 mk[i][j]=true;
         sum+=(cost[a[i][j]]);


        }

    }

}
pl(sum);
    }
return 0;

}
