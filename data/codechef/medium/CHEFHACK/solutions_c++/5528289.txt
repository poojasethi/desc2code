#include <iostream>
#include<cmath>
using namespace std;
bool isprime[10000000];
long int a[351][351];
 int n;
bool visited[351][351];
 long long  int cost[10000000];
 int dx[4]={-1,1,0,0};
 int dy[4]={0,0,-1,1};
 void dfs(int i,int j)
 {
 	visited[i][j]=1;
 	for(int k=0;k<4;k++)
 	{
 		int x=i+dx[k];
 		int y=j+dy[k];
 		
      if(x<0||x>=n||y<0||y>=n)
      continue;
      
      if(visited[x][y])
      continue;
      
      if(isprime[a[x][y]])
      continue;
      if(a[i][j]%2!=a[x][y]%2)
      continue;
      
      dfs(x,y);
 	}
 }
void sieve_of_eratosthenes()
{
	isprime[0]=0;
	isprime[1]=0;
	for(long int i=2;i<10000000;i++)
	 isprime[i]=1;
	for(long int i=2;i<sqrt(10000000);i++)
	{
	 	if(isprime[i])
		{
		for(long int j=2*i;j<10000000;j=j+i)
			{
				isprime[j]=false;
			}
		}
	}

}

int main() {
    int t;
     
    cin>>t;
    sieve_of_eratosthenes();
    long int primeid=0;
    for(long int i=0;i<10000000;i++)
    {
    	if(isprime[i])
    	{
    		cost[i]=primeid;
    		primeid++;
    		
    	}
    	else
    	{
    		cost[i]=i/2+(i%2)*2;
    	}
    
    }
     for(int x=1;x<=t;x++)
     {
    cin>>n;
    for(int i=0;i<n;i++)
    	for(int j=0;j<n;j++)
    		cin>>a[i][j];
    
    
    for(int i=0;i<n;i++)
    {
    	for(int j=0;j<n;j++)
    	{
    		visited[i][j]=false;
    	}
    }
    long long int total_cost=0;
    for(int i=0;i<n;i++)
    {
    	for(int j=0;j<n;j++)
    	{
    	
    		if(visited[i][j]==true)
    		{
    			continue;
    		}
    		else
    		{
    			if(isprime[a[i][j]])
    			{
    				
    			    total_cost+=cost[a[i][j]];	
    			    
    			    
    			}
    			else
    			{
    				total_cost+=cost[a[i][j]];
    				dfs(i,j);
    			}
    		}
    	}
    }
    
    
  
    cout<<total_cost<<endl;
     }
    
	return 0;
}