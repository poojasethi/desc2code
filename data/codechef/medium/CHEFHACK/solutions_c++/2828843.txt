#include<stdio.h>
#include<string.h>
#define ll long long
#define limit (ll)1e7
int p[limit+1];
int arr[352][352];
int n;
ll result=0;
#define FORI(i,a,n) for(int i=a;i<=n;i++)
#define FOR(i,n) FORI(i,0,n-1)
void gen() // used to generate the primes below 10^7 
{
	memset(p,0,sizeof(p));
	p[0]=p[1]=-1;
	ll k=0;
	for(ll i=2;i<=limit;i++)
	{
		if(p[i]==0)
		{   	p[i]=k++;
				for(ll j=i*i;j<=limit;j+=i)
				p[j]=-1;
		}
	}
}
void solve(int i,int j,int k) 
{
    if(i<n && i>=0 && j<n && j>=0) // checking for boundary conditions
    {
        if(arr[i][j]!=-1) 
        {
            if(arr[i][j]%2==k && p[arr[i][j]]==-1) // checking for connected components
            {
                arr[i][j]=-1;
                solve(i-1,j,k); 
                solve(i+1,j,k);
                solve(i,j-1,k);
                solve(i,j+1,k);
            }
        }
    }
}
int main()
{
 
    int t;
    gen();
    scanf("%d",&t);
    while(t--)
    {
        result=0;
        scanf("%d",&n);
        FOR(i,n)
        FOR(j,n)
        scanf("%d",&arr[i][j]); //reading the grid
        FOR(i,n)
        {
            FOR(j,n)
            {
                if(arr[i][j]!=-1) // at first check whether the server is already cracked or not.
                {
                    if(p[arr[i][j]]==-1) 
                    {
                        if(arr[i][j]%2==0) //if the server is even-server.
                        {
                            result+=arr[i][j]/2;
                            solve(i,j,0);
                        }
                        else //if the server is odd-server.
                        {
                            result+=2+arr[i][j]/2;
                            solve(i,j,1);
                        }
                    }
                    else  //if the server is prime-server.
                    {
 
                        result+=p[arr[i][j]]; // No need to check for the connected components if the element is prime.
                        arr[i][j]=-1; 
                    }
                }
            }
        }
        printf("%lld\n",result);
    }
    return 0;
} 