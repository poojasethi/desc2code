#include<cstdio>
#define MAX 10000007
#define pc putchar_unlocked
using namespace std;
 
int prime_arr[10000002],original[351][351];
int prime_arr1[10000002];
char ar[(MAX)>>4];
 
int yoyo_j[]={-1,0,1,0},krug_i[]={0,1,0,-1},n;
 
inline int read_int()
{
    int ret=0;
 
    char ch=0;
 
    while(ch<'0'||ch>'9')
 
    ch=getchar_unlocked();
 
    while(ch>='0'&&ch<='9')
    {
        ret=(ret<<3)+(ret<<1)+ch-'0';
        ch=getchar_unlocked();
    }
    return ret;
}
 
inline void writeInt (long long n)
{
    long long N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0'); pc('\n'); return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;}
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
    pc('\n');
    return ;
}
inline void sieve()
{
    register int i,j,p,q,k;
    int m=MAX/2;
 
    for(i=1,k=3;k*k<=MAX;++i,k+=2)
    {
        p=i>>3;
        if(!( ar[p] & (1 << (i & 7) ) ) )
        {
            for(j=(k*k)>>1;(j<<1)+1<=MAX;j+=k)
            {
                q=j>>3;
                ar[q]|=1<<(j&7);
            }
        }
    }
 
    prime_arr[2]=1;
    k=1;
 
 
    for(i=1;i<=m ;++i)
    {
        p=i>>3;
        if(!(ar[p]& ( 1 << (i&7) ) ) )
        {
            prime_arr[(i<<1)+1]=++k;
        }
    }
}
 
inline void dfs(int i,int j,int even)
{
    if( original[i][j] == -1 )
    {
        return;
    }
 
    original[i][j] = -1;
 
    int fm_i,fm_j;
    for(int k=0;k<4;k++)
    {
        fm_i=i+krug_i[k],fm_j=j+yoyo_j[k];
 
        if( fm_i >= 0 && fm_i<n && fm_j>=0 && fm_j<n )
        {
            if( (original[fm_i][fm_j]&1) == even && prime_arr[original[fm_i][fm_j]] == 0 )
            {
                dfs( fm_i , fm_j , even );
            }
        }
 
    }
}
 
int main()
{
    int t,i,j;
 
    sieve();
 
    long long qwerr;
 
    t=read_int();
 
    while(t--)
    {
        qwerr = 0;
 
        n=read_int();
 
        for(i=0;i<n;++i)
        {
            for(j=0;j<n;++j)
            {
                original[i][j]=read_int();
            }
        }
 
        for(i=0;i<n;++i)
        {
            for(j=0;j<n;++j)
            {
                if(original[i][j]>=0)
                    if(prime_arr[original[i][j]])
                    {
                        qwerr+=prime_arr[original[i][j]]-1;
                        original[i][j]=-1;
                    }
                    else
                    {
                        if(original[i][j]&1)
                        {
                            qwerr+=(original[i][j]>>1)+2;
                            dfs(i,j,1);
                        }
                        else
                        {
                            qwerr+=(original[i][j]>>1);
                            dfs(i,j,0);
                        }
                    }
            }
        }
 
        writeInt(qwerr);
    }
}