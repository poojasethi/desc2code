#include "stdio.h"
#include "stdlib.h"
#include "math.h"
#include "string.h"
#include "stdint.h"
#include "vector"
#include "set"
#include "map"
#include "algorithm"
#define min(a,b) (a)<(b)?(a):(b)
#define max(a,b) (a)>(b)?(a):(b)
#define abso(a) (a)>(0)?(a):(-a)
#define power_of_2(n) ((n & (n-1))||(n==1)) ? (0):(1)
#define VI vector<int>
#define pb push_back
#define all(c) c.begin(), c.end()
#define lli long long int
#define check_even_pwd(x) (x%2==0)&&(x!=2)?(1):(0)
using namespace std;

int inline inp()
{
    int n=0;
    char c=getchar_unlocked();
    while(c < '0' || c >'9') {c=getchar_unlocked();}
    while(c>='0' && c<='9')
    {
        n=(n<<3)+(n<<1)+c-'0';
        c=getchar_unlocked();
    }
    return n;
}
bool isprime[10000010];
void sieve(int k)
{
    memset(isprime, true, sizeof(isprime));
    isprime[0] = false;
    isprime[1] = false;

    for (int i = 2; i <= sqrt(k); ++i)
    {
        if(isprime[i])
        {
            for (int j = i*i; j <= k ; j+=i)
            {
                isprime[j] = false;
            }
        }
    }
}

int A[352][352], cost[10000010], prime_count=0, n;
bool visited[352][352];

void fill()
{
    for (int i = 0; i < 10000000; ++i)
    {
        if(isprime[i])
        {
            cost[i] = prime_count;
            prime_count++;
        }
        else
        {
            cost[i] = (i/2) + (i%2)*2;
//            cost[i] = i>>1 + (i%2)<<1;
        }
    }
}

int dx[4] = {1, -1, 0,  0};
int dy[4] = {0,  0, 1, -1};
void DFS(int i, int j)
{
    visited[i][j] = true;

    for (int k = 0; k < 4; ++k)
    {
        int x = i + dx[k];
        int y = j + dy[k];

        if(x<1 || x>n || y<1 || y>n)
            continue;
        if(visited[x][y])
            continue;
        if(isprime[A[x][y]])
            continue;
        if(A[x][y]%2 != A[i][j]%2)
            continue;

        DFS(x,y);
        
    }
}


int main()
{
    sieve(10000000);
    fill();

	int t, i, j;
	t = inp();
	while(t--)
	{
        n = inp();

        for (i = 1; i <= n; ++i)
        {
            for (j = 1; j <= n; ++j)
            {
                A[i][j] = inp();
            }
        }

        memset(visited, false, sizeof(visited));

        lli total_cost = 0;
        for (i = 1; i <= n; ++i)
        {
            for (j = 1; j <= n; ++j)
            {
                if(visited[i][j])
                    continue;

                total_cost += cost[A[i][j]];
                if(!isprime[A[i][j]])
                    DFS(i,j);
            }
        }
        printf("%lld\n",total_cost );
	}
	return 0;
}