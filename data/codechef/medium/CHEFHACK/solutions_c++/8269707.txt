#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#define ll long long
#define limit (ll) 1e7
#define REP(i,a,n) for(int i=a;i<=n;i++)
#define ZREP(i,n) for(int i=0;i<=n-1;i++)
int arr[352][352];// n<350
int n;
using namespace std;
 int sieve[limit];
 int primeare[limit];

void sieveoferatosthenes(){
    memset(primeare,-1,sizeof primeare);
    ll k=0;
memset(sieve,1,sizeof sieve);// marked all as true
sieve[0]=sieve[1]=0;// marked
for(int i=2;i<=limit;i++){
     if(sieve[i])
        primeare[i]=k++;
        for(int j=2;j*i<limit;j++){
        sieve[i*j]=0;
}
}
}
void solve(int i ,int j,int k){// flood fill 4 way recursive type concept
if(i<n && i>=0&& j<n && j>=0){
    if(arr[i][j]!=-1)// if not cracked
    {
        if(arr[i][j]%2==k && primeare[arr[i][j]]==-1){
           arr[i][j]=-1;
           solve(i-1,j,k);
           solve(i+1,j,k);
           solve(i,j-1,k);
           solve(i,j+1,k);
        }
    }
}






}


int main()
{
   int t;
   sieveoferatosthenes();
   scanf("%d",&t);
   while(t--){
        ll result=0;
    scanf("%d",&n);// size of grid
    ZREP(i,n)
    ZREP(j,n)
    scanf("%d",&arr[i][j]);
    ZREP(i,n)
    {
        ZREP(j,n)
    {
        if(arr[i][j]!=-1)//cracked or not .HERE NOT CRACKED
        {
            if (primeare[arr[i][j]]==-1)// like for 4 or 9
                {
                    if(arr[i][j]%2==0)// even server caught
                    {
                        result+=(arr[i][j])/2;// eg 6/2==3 cost
                        solve(i,j,0);
                    }
                    else
                    {
                        result+=2+arr[i][j]/2;// eg.9's cost ==6
                        solve(i,j,1);
                    }
                }
                    else{
                        result+=primeare[arr[i][j]];
                        arr[i][j]==-1;// cracked now
                    }
            }

        }

    }
    printf("%lld\n",result);
    }
    return 0;
}