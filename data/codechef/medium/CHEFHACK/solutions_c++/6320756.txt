#include<iostream>
#include<string.h>
#include<math.h>
void dfs(int i,int j,int n);
using namespace std;
bool isprime[10000001];
int cost[10000001];

int server[352][352];
int hacked[352][352];
void createprime();
int main()
{

    createprime();

    int i,j;
    int primeid=0;
    for(i=0;i<10000001;i++)
    {
        if (isprime[i])
            {cost[i]=primeid;
            primeid++;}
        else
            {if (i%2==0)
            cost[i]=i/2;
            else
            cost[i]=(i+3)/2;}
    }

    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;

        memset(server,0,sizeof(server[0][0])*352*352);
        memset(hacked,0,sizeof(hacked[0][0])*352*352);
        for(i=1;i<=n;i++)
            for(j=1;j<=n;j++)
            cin>>server[i][j];

        long long int total=0;

        for(i=1;i<=n;i++)
            for(j=1;j<=n;j++)
        {
            if (hacked[i][j]==0)
            {
                total=total+cost[server[i][j]];

                if(isprime[server[i][j]]==0)
                dfs(i,j,n);


            }
        }

        cout<<total<<'\n';


    }

    return 0;
}

void dfs(int i,int j,int n)
{

    if (i<1||i>n||j<1||j>n||hacked[i][j]==1)
        return;

    hacked[i][j]=1;
    if (((server[i][j]%2==0)&&(server[i-1][j]%2==0)&&(isprime[server[i-1][j]]==0))||((server[i][j]%2==1)&&(server[i-1][j]%2==1)&&(isprime[server[i-1][j]]==0)))
        {dfs(i-1,j,n);}
    if (((server[i][j]%2==0)&&(server[i+1][j]%2==0)&&(isprime[server[i+1][j]]==0))||((server[i][j]%2==1)&&(server[i+1][j]%2==1)&&(isprime[server[i+1][j]]==0)))
        {//hacked[i+1][j]=1;
         dfs(i+1,j,n);}
    if (((server[i][j]%2==0)&&(server[i][j-1]%2==0)&&(isprime[server[i][j-1]]==0))||((server[i][j]%2==1)&&(server[i][j-1]%2==1)&&(isprime[server[i][j-1]]==0)))
        {//hacked[i][j-1]=1;
         dfs(i,j-1,n);}
    if (((server[i][j]%2==0)&&(server[i][j+1]%2==0)&&(isprime[server[i][j+1]]==0))||((server[i][j]%2==1)&&(server[i][j+1]%2==1)&&(isprime[server[i][j+1]]==0)))
        {//hacked[i][j+1]=1;
         dfs(i,j+1,n);}




}

void createprime()
{
    int i,j;
    for(i=0;i<=10000000;i++)
        isprime[i]=1;

    isprime[0]=0;
    isprime[1]=0;

    for(i=2;i<=sqrt(10000000);i++)
    {
        if (isprime[i])
        {
            for(j=i*i;j<=10000000;j=j+i)
                isprime[j]=0;
        }
    }

}
