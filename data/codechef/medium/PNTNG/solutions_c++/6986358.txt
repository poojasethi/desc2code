#include<iostream>
using namespace std;
class Paint{
	long long int n,m,h;
	long long int *p[2];
	public:
		Paint()
		{
			cin>>n>>m>>h;
			p[0]=new long long int[h];
			p[1]=new long long int[h];
			for(long long int i=0;i<h;i++)
			cin>>p[0][i]>>p[1][i];
		}
		void solve()
		{
			long long int i,j,ans=0,count=0;
			for(i=0;i<h;i++)
			count+=p[0][i];
			if(count<n*m)
			{
				cout<<"Impossible"<<endl;
				return;
			}
			quicksort(p[0],p[1],0,h-1);
			count=n*m;
		     for(i=0;i<h;i++)
		     {
		     	if(count>=p[0][i])
		     	{
		     	ans+=p[0][i]*p[1][i];
		     	count-=p[0][i];
		        }
		     	else if(count<p[0][i])
		     	{
		     		ans+=count*p[1][i];
		     		break;
		     	}
		     }
		     cout<<ans<<endl;
		}
		void quicksort(long long int *q,long long int *p,long long int l,long long int r)
        {
          if(l<r)
          {
   	          long long int j=position(q,p,l,r);
   	          quicksort(q,p,l,j-1);
   	          quicksort(q,p,j+1,r);
          }	
        }
        void swap(long long int *a,long long int *b)
        {
        	long long int x;
             x=*a;
        	*a=*b;
         	*b=x;
        }
       long long int position(long long int *q,long long int *p,long long int l,long long int r)
       {
	     long long int i,j,pt;
	       i=j=l;
	       pt=p[r];
	     for(j=l;j<r;j++)
	      {
		   if(p[j]<=pt)
		   {
		  	long long int x;
			swap(&p[j],&p[i]);
			swap(&q[j],&q[i]);
			i++;
	   	    }
    	  }
	     swap(&p[i],&p[r]);
	      swap(&q[j],&q[i]);
      	return i;
         }
		
};
int main()
{
	Paint p;
	p.solve();
	return 0;
}