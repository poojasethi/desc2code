#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <limits.h>
#include <algorithm>

using namespace std;

long long input()
{
    long long n=0;
    char c=getchar_unlocked();
    while(c < '0' || c >'9') {c=getchar_unlocked();}
    while(c>='0' && c<='9')
    {
        n=(n<<3)+(n<<1)+c-'0';
        c=getchar_unlocked();
    }
    return n;
}

typedef struct Pair{
	long long a;
	int b;
}two;

long long* T;
long long* C;
two* pairs;

bool myfunction (two i,two j) { return (i.b > j.b);}

int main(){
	long long N,M,total;
	int H;
	N = input();
	M = input();
	cin >> H;
	int start = 0;
	total = N*M;
	pairs = new two[H];
	long long count = 0;
	for(int i = 0; i < H; i++){
		pairs[i].a = input();
		count += pairs[i].a;
		cin >> pairs[i].b;
	}
	if(count < total){
		cout << "Impossible\n";
		return 0;
	}
	sort(pairs, pairs+H, myfunction);
//	for(int i = 0; i < H; i++){
//		cout << pairs[i].a << "\t" << pairs[i].b << endl;
//	}
	start = 0;
	while(count > total){
//		cout << count << endl;
		if((count-pairs[start].a) > total){
			count -= pairs[start].a;
			pairs[start].a = 0;
			start++;
		}
		else{
			pairs[start].a -= (count-total);
			count = total;
		}
	}
	count = 0;
	for(int i = start; i < H; i++){
		count += pairs[i].a * pairs[i].b;
	}
	cout << count << endl;
}


