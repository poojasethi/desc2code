#include<iostream>
#include<cstdio>
using namespace std;
struct Arr{
  long long int t;
  long long int c;
}arr[100001];

void _merge(struct Arr * arr,long long int low, long long int mid, long long int high)
{
   long long int i,j,k;
   struct Arr b[high- low + 1];
   i = low;
   j = mid + 1;
   k = 0;

   while(i<=mid && j<=high)
   {
       if(arr[i].c < arr[j].c)
            b[k++] = arr[i++];
       else
           b[k++] = arr[j++];
   }

   if(i>mid)
   {
       while(j<=high)
        b[k++]=arr[j++];
   }
   else
   {
       while(i<=mid)
        b[k++]=arr[i++];
   }
   for(i=0,j=low;i<k;i++,j++)
      arr[j] = b[i];
}

void merge_sort(struct Arr *arr, long long int low, long long int high)  // where high = n-1;
{
    long long int mid = (low+high)/2;
    if(low < high)
    {
      merge_sort(arr,low,mid);
      merge_sort(arr,mid+1,high);
      _merge(arr,low,mid,high);

    }
}

int main()
{
   long long int n,m,h;
   scanf("%lld%lld%lld",&n,&m,&h);
   for(int i=0; i<h; i++)
    scanf("%lld%lld",&arr[i].t,&arr[i].c);
   merge_sort(arr,0,h-1);
   long long int tot = n*m;
   long long int sm = 0;
   int i=0;
   long long int cost =0;
   while(1)
   {
       if(sm == tot || (i == h))
        break;
       if(sm + arr[i].t <= tot)
       {
           sm += arr[i].t;
           cost += arr[i].t * arr[i].c;
       }
       else
       {
           cost += (tot - sm)*arr[i].c;
           sm = tot;
       }
       i++;
   }
   if(sm == tot)
    printf("%lld\n",cost);
   else
    printf("Impossible\n");
   return 0;
}
