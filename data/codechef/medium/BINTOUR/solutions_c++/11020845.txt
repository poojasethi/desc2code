#pragma warning(disable:4786)
#pragma warning(disable:4996)
#include<list>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<stack>
#include<assert.h>
using namespace std;
 
#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define S(X) ( (X) * (X) )
#define SZ(V) (int )V.size()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define ALL(V) V.begin(), V.end()
#define IN(A, B, C)  ((B) <= (A) && (A) <= (C))
 
typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;
typedef vector<PII > VP;
 
#define AIN(A, B, C) assert(IN(A, B, C))
 
//typedef int LL;
typedef long long int LL;
//typedef __int64 LL;
 
LL MOD = 1000000009;
LL fact[1100000];
 
LL bigmod(LL a, LL b)
{
	if(b == 0) return 1;
	LL x = bigmod(a, b / 2);
	x = (x * x) % MOD;
	if(b & 1) x = (x * a) % MOD;
	return x;
}
 
int main()
{
	LL ans;
	int k, n, i;
 
	scanf("%d", &k);
	n = 1<<k;
 
	fact[0] = 1;
	for(i = 1; i <= n; i++)
		fact[i] = (fact[i - 1] * i) % MOD;
 
	for(i = 1; i <= n; i++)
	{
		if(i < n/2 - 1) 
		{
			printf("0\n");
			continue;
		}
 
		ans = (fact[i - 1] * bigmod(fact[n/2 - 1], MOD - 2)) % MOD;
		ans = (ans * bigmod(fact[i - n/2], MOD - 2)) % MOD;
		ans = (ans * 2) % MOD;
		ans = (ans * fact[n/2]) % MOD;
		ans = (ans * fact[n/2]) % MOD;
 
		printf("%lld\n", ans);
	}
 
	return 0;
}
 