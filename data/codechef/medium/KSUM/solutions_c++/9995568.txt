// #include<abhi.944>

#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;

#ifndef ONLINE_JUDGE
	#define TRACE
#endif

const long double PI=3.1415926535897932384626;
const ll MAX=1000000000+7;
const int INF = 0x3f3f3f3f;

#define ps printf(" ")
#define pn printf("\n")
#define sc(n) scanf("%d",&n)
#define pf(n) printf("%d",n)
#define forall(it, x) for(__typeof((x).begin()) it=(x).begin();it!=(x).end();it++)
#define sz size()
#define ff first
#define ss second
#define pb push_back //pop_back
#define mp make_pair
#define fill(a,val) memset(a,val,sizeof(a))
//#define pii pair <int ,int>

#ifdef TRACE
    #define trace(x)            cerr<<__FUNCTION__<<":"<<__LINE__<<": ERROR---->"<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
#endif

#define N 100005

int a[N+3];
ll sum = 0;

#define pii pair <ll , pair <int , int > >

/*struct cmp {
    bool operator() (const pii &a, const pii &b) const{
        return a.ff > b.ff;
    }
};*/

int main(int argc, char const *argv[])
{
    int n,k;
    sc(n); sc(k);
    set <pii> ms;

    for(int i=0;i<n;i++) {
        sc(a[i]);
        sum += a[i];
    }

    ms.insert(mp(sum,mp(0,n-1)));

    while(!ms.empty()) {
        pii p = *ms.rbegin();
        cout << p.ff << " " ;

        ms.erase(--ms.end());
        if(p.ss.ff != p.ss.ss) {
            ms.insert(mp(p.ff-a[p.ss.ss],mp(p.ss.ff , p.ss.ss-1)));
            ms.insert(mp(p.ff-a[p.ss.ff],mp(p.ss.ff+1 , p.ss.ss)));
        }

        k--;
        if(!k) break;
    }pn;
    return 0;
}