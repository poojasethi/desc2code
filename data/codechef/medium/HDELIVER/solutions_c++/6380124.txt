/**
 	My standard template
 	Name: Shivam Mishra
 	handle: shivam217

 **/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 100;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

LL power(LL b,LL e)
{
	if(b==0 && e==0) return 1;
	if(b==0 && e>1)  return 0;	
	if(b>0 && e==0) return 1;
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  r %= MOD; }
		e >>= 1; b = b*b; b %= MOD;
		
	}
return r;
}

LL gcd(LL a, LL b) {  if(b==0) return a;  else return gcd(b,a%b);  }


VI alist[MAX];
int vis[MAX];
int color[MAX];

void dfs(int node,int col)
{

	int sz = alist[node].size();

	FOR(i,0,sz)
	{
		int t = alist[node][i];
		
		color[t] = col;		
		
		if(!vis[t])
		{
			vis[t]=1;
			dfs(t,col);			
		}

	}


}

int main()
{

int test = 1;

INT(test);  //remove this line

while(test--)
{
	int n,m; INT(n); INT(m);

	CLR(alist);
	
	while(m--)
	{
		int x,y; INT(x); INT(y);
		
		alist[x].PB(y);
		alist[y].PB(x);	
	}

	int c=1;

	CLR(color);
	CLR(vis);

	FOR(i,0,n)
	{
		if(!color[i])
		{
			color[i] = c;
			CLR(vis);
			vis[i]=1;
			dfs(i,c);
			++c;	
		}
	}
	
	int q; INT(q);

	while(q--)
	{
		int x,y; INT(x); INT(y);

		if(x==y)
		{
			printf("YO\n"); continue;
		}

		if(alist[x].size()==0 || alist[y].size()==0)
		{
			printf("NO\n"); continue;
		}
		

		if(color[x]==color[y])
			printf("YO\n");
		else
			 printf("NO\n");	

	}

	

}

//remove testcase line

return 0;
}

