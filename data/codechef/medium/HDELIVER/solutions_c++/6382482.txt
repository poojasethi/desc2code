/**
 	My standard template
 	Name: Shivam Mishra
 	handle: shivam217

 **/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 100;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

LL power(LL b,LL e)
{
	if(b==0 && e==0) return 1;
	if(b==0 && e>1)  return 0;	
	if(b>0 && e==0) return 1;
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  r %= MOD; }
		e >>= 1; b = b*b; b %= MOD;
		
	}
return r;
}

LL gcd(LL a, LL b) {  if(b==0) return a;  else return gcd(b,a%b);  }


struct node
{
	int rank; 
	int parent;	
};

node component[MAX];

int find_parent(int x)
{
	if(component[x].parent!=x)
		component[x].parent = find_parent(component[x].parent);

	return component[x].parent;
}


void combine(int x, int y)
{
	int xp = find_parent(x);
	int yp = find_parent(y);

	if(xp==yp)
		return;
	
	if(component[xp].rank>component[yp].rank)
	{
		component[yp].parent = xp;
	}
	else if(component[xp].rank<component[yp].rank)
	{
		component[xp].parent = yp;
	}
	else
	{
		component[xp].rank += 1;
		component[yp].parent = xp;
	}
	

}


int main()
{

int test = 1;

INT(test);  //remove this line

while(test--)
{
	int n,m; INT(n); INT(m);

	FOR(i,0,n)
	{
		component[i].parent = i;
		component[i].rank = 1;
	}
	
	
	while(m--)
	{
		int x,y; INT(x); INT(y);

		//cout<<" x = "<<x<<" y = "<<y<<endl;

		combine(x,y);	
	}


	//cout<<" going for parent "<<endl;	

	
	int p[MAX];

	FOR(i,0,n)
	{
		p[i] = find_parent(i);

		//cout<<" i = "<<i<<" parent of i = "<<p[i]<<endl;

	}

	int q; INT(q);

	while(q--)
	{
		int x,y; INT(x); INT(y);

		if(p[x]==p[y])
			printf("YO\n");
		else
			printf("NO\n");		

	}
}

//remove testcase line

return 0;
}

