#include<bits/stdc++.h>

using namespace std;

#define ll long long int
#define NN 500005
#define pb push_back
#define mp make_pair
#define INF (((ll)1000000000) * ((ll)1000000000))
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define MOD 1000000007
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i=0;i<N;i++)
#define frep(i,a,b) for(int i=a;i<=b;i++)
#define pii pair<int,int>
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd

struct matrix {
	ll A[2][2];
	int row;
	int column;
	matrix() {
		rep(i,2)
			rep(j,2)
				A[i][j]=0;
	}
	void Print() {
		rep(i,row) {
			rep(j,column)
				cout<<A[i][j]<<" ";
			cout<<"\n";
		}
	}
};

matrix matrix_multiply(matrix a,matrix b) {
	//a.Print();b.Print();
	matrix c;
	c.row=a.row;
	c.column=b.column;
	rep(i,a.row)
		rep(j,b.column)
			rep(k,a.column) {
				c.A[i][j]+=a.A[i][k]*b.A[k][j];
				c.A[i][j]%=MOD;
			}
	//c.Print();
	return c;
}

matrix fexpo(matrix a,int b) {
	if(b==1)
		return a;
	else if(b%2==0)
		return fexpo(matrix_multiply(a,a),b/2);
	else
		return matrix_multiply(a,fexpo(matrix_multiply(a,a),b/2));
}

int main(int argc, char const *argv[])
{
	fast;
	int F[3];
	F[1]=1;
	F[2]=3;
	// F[2]=3 H +HT +HH
	//F[n]=2*(F[n-1]+F[n-2]);
	matrix transition;
	transition.A[0][0]=2;transition.A[0][1]=2;
	transition.A[1][0]=1;transition.A[1][1]=0;

	transition.row=2;transition.column=2;

	matrix initial;
	initial.A[0][0]=3;
	initial.A[1][0]=1;
	initial.row=2;
	initial.column=1;

	int t;
	cin>>t;
	while(t--) {
		int n;
		cin>>n;
		if(n<=2) {
			cout<<F[n]<<"\n";
			continue;
		}
		n-=2;
		matrix final=matrix_multiply(fexpo(transition,n),initial);
		cout<<final.A[0][0]<<"\n";
	}

	return 0;
}