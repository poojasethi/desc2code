#include <stdio.h>
#include <math.h>
#include <string.h>
#include <utility>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

#define MAXN 1000
#define x first
#define y second
#define mp make_pair
#define DEBUG(x) cerr << #x << " = " << (x) << endl;

typedef pair<int,int> pii;

const double inf = 100000000.0;
double D[MAXN];
bool mark[MAXN];
int r,R;
pii obs[MAXN];

double dist(pii a,pii b){
    if(a.x == R && a.y == 0)
    	return (double)R - sqrt((double)(b.x*b.x + b.y*b.y));
	if(b.x == R && b.y == 0)
		return (double)R - sqrt((double)(a.x*a.x + a.y*a.y));
	if(a.x == r && a.y == 0)
		return sqrt((double)(b.x*b.x + b.y*b.y)) - (double)r;
	if(b.x == r && b.y == 0)
		return sqrt((double)(a.x*a.x + a.y*a.y)) - (double)r;
	return sqrt((double)((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y)));
}


double go(int N){
	memset(mark,false,sizeof(mark));
	for(int i =0 ; i< MAXN;i++)
        D[i] = inf;
	D[0] = 0;
	while(true){
	    	int u = -1;
	        double min = 2*inf;
			for(int i = 0; i <= N+1; i++)
				if(!mark[i] && D[i] < min)
					u = i,min = D[i];
	        if(u == -1)
	             break;
	        mark[u] = true;
	 
		for(int i = 0; i <= N+1; i++){
			if(mark[i])
				continue;
			double d = dist(obs[i],obs[u]);
	    		d = max(d,D[u]);
			if(D[i] > d)
				D[i] = d;
		}
	}
	return min(D[1],(double)(R-r));
}

int main(){
	int tt;
	for(scanf("%d",&tt);tt--;){
		int N;
		scanf("%d %d",&r,&R);
		scanf("%d",&N);
		obs[0] = mp(r,0);
		obs[1] = mp(R,0);
		for(int i = 2; i < N+2 ;i++){
			int a,b;
			scanf("%d %d",&a,&b);
			obs[i] = mp(a,b);
		}
		printf("%.3lf\n",go(N));
	}
	return 0;
}
