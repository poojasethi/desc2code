#include <cstdio>
#include <queue>
#include <cctype>
#include <limits>
#include <cmath>
#include <functional>

using namespace std;

const int MAXSIZE = 505;

double dist[MAXSIZE][MAXSIZE];
double key[MAXSIZE];
bool known[MAXSIZE];

int px[MAXSIZE];
int py[MAXSIZE];

int main()
{
    int T, r, R, N, x, y;
    double max, d;
    scanf("%d", &T);
    for (; T > 0; T--)
    {
        priority_queue<pair<double, int>, vector<pair<double, int> >,
                greater<pair<double, int> > > pq;

        scanf("%d %d %d", &r, &R, &N);
        dist[0][N+1] = dist[N+1][0] = R - r;
        for (int i=1; i<=N; i++)
        {
            scanf("%d %d", &px[i], &py[i]);;
            dist[0][i] = dist[i][0] = (d=sqrt(px[i]*px[i] + py[i]*py[i])) - r;
            dist[N+1][i] = dist[i][N+1] = R - d;
            dist[i][i] = 0.0;
        }

        for(int i=1; i<=N; i++)
            for(int j=i+1; j<=N; j++)
                dist[i][j] = dist[j][i] = sqrt((px[i]-px[j])*(px[i]-px[j])
                                               + (py[i]-py[j])*(py[i]-py[j]));
        for(int i=0; i<=N+1; i++)
        {
            key[i] = numeric_limits<double>::max();
            known[i] = false;
        }

        max = numeric_limits<double>::min();
        pq.push(make_pair(0.0, 0));
        key[0] = 0.0;
        while (!pq.empty())
        {
            pair<double, int> p = pq.top();
            pq.pop();
            if (!known[p.second])
            {
                if (p.first > max)
                    max = p.first;
                known[p.second] = true;
                if (p.second == N+1)
                    break;
                for (int i=0; i<=N+1; i++)
                    if (!known[i] && key[i] > dist[p.second][i])
                    {
                        key[i] = dist[p.second][i];
                        pq.push(make_pair(key[i], i));
                    }
            }
        }
        printf("%.3lf\n", max);
    }
    return 0;
}
