#include      <algorithm>
#include      <cmath>
#include      <iomanip>
#include      <iostream>
#define endl '\n'
using namespace std;
inline int sq(int x) { return x * x; }
inline double dist(const pair<int, int> &lhs, const pair<int, int> &rhs) {
	return sqrt(sq(lhs.first - rhs.first) + sq(lhs.second - rhs.second));
}
pair<int, int> cones[500];
double allDist[502][502];
int T, r, R, N;
int queue[502];
bool abVisited[502];
bool bfs(double d) {
	int h = 0, t = 1, i;
	queue[h] = N + 1;
	while (h < t) {
		for (i = 0; i < N + 1; i += 1) {
			if (!abVisited[i] && allDist[queue[h]][i] <= d) {
				if (i == N) return false;
				abVisited[i] = true;
				queue[t++] = i;
			}
		}
		h += 1;
	}
	return true;
}
int main(int argc, char **argv) {
	ios_base::sync_with_stdio(false), cin.tie(0);
	double mid, l, h;
	int i, j;
	cin >> T;
	while (T--) {
		cin >> r >> R >> N;
		for (i = 0; i < N; i += 1) cin >> cones[i].first >> cones[i].second;
		for (i = 0; i < N; i += 1)
			for (j = i + 1; j < N; j += 1) allDist[j][i] = allDist[i][j] = dist(cones[i], cones[j]);
		for (i = 0; i < N; i += 1) {
			allDist[N][i] = allDist[i][N] = R - dist(make_pair(0, 0), cones[i]);
			allDist[N + 1][i] = allDist[i][N + 1] = dist(make_pair(0, 0), cones[i]) - r;
		}
		allDist[N][N + 1] = allDist[N + 1][N] = dist(make_pair(0, R), make_pair(0, r));
		l = 0.00001, h = allDist[N][N + 1];
		while (h - l > 0.00001) {
			fill_n(abVisited, N + 2, false);
			mid = (h + l) / 2;
			if (bfs(mid)) l = mid;
			else h = mid;
		}
		cout << setprecision(3) << fixed << mid << endl;
	}
	return 0;
}
