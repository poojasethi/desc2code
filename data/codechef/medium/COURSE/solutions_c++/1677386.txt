//Using Prim's algorthimt O(N^2)

#include<cstdio>
#include<cmath>
#include<cassert>


const float maxd = 30000;//max edge length in our graph
const int maxv = 503;//max number of vertices in our graph
const int maxcone = 501;//maximum number of cones
//global variables
int v;//number of vertices
float key[maxv];//key value of each vertex
bool mstSet[maxv];//whether vertex belongs in MST or not
int parent[maxv];//parent of each vertex in MST

//adjacency matrix representation of the graph
float graph[maxv][maxv];

//utility functions for Prims algorithm//for Prim
int minkey() //returns vertex(index) with min key value
{
    float min = maxd;//maxd is pseudo infinity
    int minind;

    for(int i=0; i<v; i++)
    {
        if(mstSet[i] == 0 && key[i]<min) //only check those vertices which are not already in MST
        min = key[i], minind = i;

    }
    return minind;
}
//actual Prims algorithm
void primMST()
{
  //initalize all keys to pseudo infinity
  for(int i=0; i<v; i++)
  key[i] = maxd, mstSet[i]= 0;
  //printi(mstSet, v);
  //include first vertex in MST(inner circle)
  key[0] = 0;
  parent[0] = -1;
  //for rest v-1 vertices
  for(int i=0; i<v-1; i++)
  {
      //pick min key from set of vertices not included in mstSet
      int u = minkey();//get vertex with min key value

      //add picked vertex to MST set
      mstSet[u] = 1;

      //update key value and parent index of adjacent vertices of picked vertex. Consider
      //only those vertices which are not in mstSet
      for(int j =0; j<v; j++)
      {
          //graph[u][j] is nonzero only for adjacent vertices of u
          //mstSet[j] is false for vertices not included in MST
          //update key value only if graph[u][j] < key[j]

          if(graph[u][j] && mstSet[j]==0 && graph[u][j]< key[j])
          parent[j] = u, key[j] = graph[u][j];
      }
  }

}

//find the longest edge in the path between inner and outer circle in the MST. this represents the greatest distance between 2 sets of points(inside and outside of the track)
//annd hence is the maximum diameter
void findd()
{
    float m = -1;
    int w = 1;
    int u = parent[w];
    while(u!= -1)
    {
        if(graph[u][w] > m)
        m = graph[u][w];

        w = u;
        u = parent[w];
    }
    printf("%.3f\n", m);
}

int main()
{
    int t;//number of test cases
    int cones;//number of cones
    int xcone[maxcone];//store x coordinate of cones
    int ycone[maxcone];//store y coordinate of cones
    int r, R;//inner and outer radiud

    float tmp;

    assert(scanf("%d", &t)==1);

    while(t--)
    {

    assert(scanf("%d%d", &r, &R)==2); //take in inner and outer radius
    assert(1<=r && r<=R && R<= 25000);

    assert(scanf("%d", &cones)==1);//take in number of cones
    assert(0<=cones && cones<=maxcone);

    v = cones + 2; //inner and outer circle are the remaining 2 vertices

    for(int i=0; i<cones; i++)//take in x and y coords of cones
    {
        assert(scanf("%d%d", xcone+i, ycone+i)==2);
    }

    //initialize graph
    for(int i=0; i<v; i++)
    for(int j=0; j<v; j++)
    graph[i][j] =0;

    //vertex 0 is inner circle
    //vertex 1 is outer circle
    graph[0][1] = (float)R- r;
    graph[1][0] = graph[0][1];

    //filling remaining of first and second row/column(symmetric as undirected graph )
    for(int i=0; i<cones; i++)
    {
        tmp = sqrt((float)(xcone[i]*xcone[i] + ycone[i]*ycone[i]));
        graph[0][i+2] =  tmp - r;
        graph[i+2][0] = graph[0][i+2];

        graph[1][i+2] = R - tmp;
        graph[i+2][1] = graph[1][i+2];
    }
    //filling in rest of graph
    for(int i=0; i<cones-1; i++)
    {
        for(int j= i+1; j<cones; j++)
        {
            graph[i+2][j+2] = sqrt((float)( (xcone[j] - xcone[i])*(xcone[j]- xcone[i]) + (ycone[j] - ycone[i])*(ycone[j]- ycone[i])));
            graph[j+2][i+2] = graph[i+2][j+2];
        }
    }

    primMST();//apply prims algorithm to find MST
    findd();//find max diameter and print it
    }
}
