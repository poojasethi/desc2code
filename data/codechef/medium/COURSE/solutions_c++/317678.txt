#include<stdio.h>
#include<math.h>
#include<vector> 
//#include<conio.h>
using namespace std;
int main()
{
    int a,x[510],y[510],r,R,n,i,j,count,u,t;
    double graph[510][510],dist[510],max;
    scanf("%d",&t);
    while(t--)
    {
                  vector<double> v4;
                  scanf("%d%d",&r,&R);
                  scanf("%d",&n);
                  for(i=0;i<n+2;i++)
                                    dist[i]=1e9;
                  for(i=0;i<n;i++)
                                  scanf("%d%d",&x[i],&y[i]);
                  /*Construction of Adjacency Matrix of the Complete Graph formed by the set of 'n' points & the inner & outer circle as two nodes*/
                  for(i=0;i<n;i++)
                  {
                                  for(j=0;j<n;j++)
                                                  graph[i][j]=sqrt(1.0*(x[i]-x[j])*(x[i]-x[j])+1.0*(y[i]-y[j])*(y[i]-y[j]));
                  }
                  for(i=0;i<n;i++)
                  {
                                  graph[n][i]=graph[i][n]=sqrt(1.0*x[i]*x[i]+1.0*y[i]*y[i])-r;
                                  graph[n+1][i]=graph[i][n+1]=R-sqrt(1.0*x[i]*x[i]+1.0*y[i]*y[i]);
                  }
                  graph[n][n]=graph[n+1][n+1]=0;
                  graph[n][n+1]=graph[n+1][n]=R-r;
                  /*MST Construction through Prim's Algorithm*/
                  u=n;
                  dist[u]=0;
                  count=n+2;
                  x[n]=-1;
                  while(count>0)
                  {
                                for(j=0;j<n+2;j++)
                                {
                                                  if(dist[j]<dist[u])
                                                                     u=j;
                                }
                                if(u==n)
                                        dist[u]=1e9;
                                else
                                        dist[u]*=1e9;
                                for(j=0;j<n+2;j++)
                                                  graph[j][u]=-1;
                                for(j=0;j<n+2;j++)
                                {
                                                  if((graph[u][j]>0)&&(graph[u][j]<dist[j]))
                                                  {
                                                                                            x[j]=u;
                                                                                            dist[j]=graph[u][j];
                                                  }
                                }
                                count--;
                  }
                  /*Computation of path from node "outer circle" to node "inner circle"*/
                  i=n+1;
                  while(i!=n)
                  {
                             v4.push_back(dist[i]/1e9);
                             i=x[i];
                  }
                  /*Extracting the edge of maximum length from the above path*/
                  max=v4[0];
                  for(i=1;i<v4.size();i++)
                  {
                                          if(v4[i]>max)
                                                           max=v4[i];
                  }
                  printf("%.3lf\n",max);
    }
    //getch();
    return 0;
}

