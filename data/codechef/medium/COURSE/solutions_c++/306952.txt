#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <queue>
using namespace std;

const int mxn = 505;
bool vis[mxn];
int X[mxn], Y[mxn], r, R, n;
double dis[mxn][mxn];

double disSq(int x1,int y1,int x2,int y2)
{
	return sqrt( 1.0*(x2-x1)*(x2-x1)+1.0*(y2-y1)*(y2-y1) );
}

bool notPoss(double D)
{
	memset(vis,false,sizeof vis);
	queue<int> Q;
	
	Q.push(0); vis[0]=true;
	
	while(!Q.empty())
	{
		int cn = Q.front(); Q.pop();
		for(int i=0;i<=n+1;i++) if(!vis[i] && dis[cn][i]<D)
		{
			vis[i]=true; if(i==n+1) return true;
			Q.push(i);
		}
	}

	return false;
}

int main()
{
	int t, i, j, a , b;
	double low, high, mid;

	for(scanf("%d",&t);t--;)
	{
		scanf("%d %d %d", &r, &R, &n);
		for(i=1;i<=n;i++) scanf("%d %d", &X[i], &Y[i]);

		for(i=1;i<=n;i++) for(j=1;j<i;j++) dis[i][j] = dis[j][i] = disSq(X[i],Y[i],X[j],Y[j]);
		dis[0][n+1] = dis[n+1][0] = (R-r);
		for(i=1;i<=n;i++) dis[0][i] = dis[i][0] = disSq(X[i],Y[i],0,0) - 1.0*r;
		for(i=1;i<=n;i++) dis[n+1][i] = dis[i][n+1] = 1.0*R - disSq(X[i],Y[i],0,0);

		low = 0.0; high = R-r;
		while(high-low>1e-6)
		{
			mid = (low+high)/2;
			if(notPoss(mid)) high = mid;
			else low = mid;
		}

		printf("%.3lf\n", (low+high)/2.0 );
	}

	return 0;	
}
