//
//AUTHOR: KISLAY
//DATE: Thu Feb 10 14:44:15 IST 2011
#include <vector>
#include <cassert>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <fstream>
#include <sstream>
#include<ctype.h>

#define PI 3.1415926535897932384626433832795028841971693993751058209749Lf
#define INF 2000000000
#define INFI 1e37
#define pb push_back
#define PRINT(x)           cout << #x << "  " << x << endl
#define MAX 500
#define BUF 4096

char ibuf[BUF];
int ipt = BUF;

int readInt() {
	while (ipt < BUF && ibuf[ipt] < '0') ipt++;
	if (ipt == BUF) {
		fread(ibuf, 1, BUF, stdin);
		ipt = 0;
		while (ipt < BUF && ibuf[ipt] < '0') ipt++;
	}
	int n = 0;
	while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
	if (ipt == BUF) {
		fread(ibuf, 1, BUF, stdin);
		ipt = 0;
		while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
	}
	return n;
}
#define SQ(x) ((x)*(x))
#define s1(x) scanf("%d",&x)
using namespace std;
double d[MAX];
double x[MAX],y[MAX];
bool calc[MAX];
int main()
{
	int t,i,n;
	double r,R;
	int cur;
	s1(t);//t=readInt();
	
	while(t--)
	{
		scanf("%lf%lf",&r,&R);//r=readInt();
		//R=readInt();
		s1(n);//n=readInt();
		
		//PRINT(n);
		for(i=0;i<n;i++)
		{
			scanf("%lf%lf",&x[i],&y[i]);//x[i]=readInt();
			//y[i]=readInt();
		}
		for(i=0;i<n;i++)
		{
			d[i]=sqrt((double)(x[i]*x[i]+y[i]*y[i]))-r;
			calc[i]=false;
		}
		calc[n]=false;
		d[n]=R-r;
		//PRINT(n);
		//sort(d,d+n);
		while(true)
		{
			//cout<<"hello\n";
			cur=-1;
			for(i=0;i<=n;i++)
			if(!calc[i]&&(cur==-1||d[cur]>d[i]))
			{
				cur=i;
				//PRINT(cur);
			}
			
			if(cur==n)
				break;
			calc[cur]=true;
			for(i=0;i<n;i++)
			{	
				if(!calc[i])
				{
					d[i]=min(d[i],max(d[cur],sqrt((double)(SQ(x[i]-x[cur])+SQ(y[i]-y[cur])))));
				}
			}
			d[n]=min(d[n],max(d[cur],R-sqrt((double)(x[cur]*x[cur]+y[cur]*y[cur]))));
				
		
		}
		printf("%.3lf\n",d[n]);
	}

	return 0;
}