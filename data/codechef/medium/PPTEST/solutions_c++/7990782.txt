#include<bits/stdc++.h>
using namespace std;

int cp[101];
int t[101];

int max(int a, int b) { return (a > b)? a : b; }
int knapSack(int W, int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (t[i-1] <= w)
                 K[i][w] = max(cp[i-1] + K[i-1][w-t[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}
int main()
{
	int i,l,n,W,c,p,max;
	scanf("%d",&l);
	while(l--)
	{
		max=0;
		scanf("%d%d",&n,&W);
		for(i=0;i<n;i++)
		{
			scanf("%d%d%d",&c,&p,&t[i]);
			cp[i]= c*p;
		}
		max= knapSack(W,n);
	/*	for(i=0;i<n;i++)
		{
			printf("%d %d\n",num[i].cp,num[i].t);
		}*/
		
		printf("%d\n",max);
	}
}