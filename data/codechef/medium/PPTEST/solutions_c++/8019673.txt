#include <cstdio>
#define read(x) scanf("%d",&x)
 
int max(int a, int b)
{
    return (a>b) ? a : b;
}
 
int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
   return K[n][W];
}
 
void get_input(int *c, int *p, int *t, int N)
{
    for(int i = 0; i<N; ++i)
    {
        read(c[i]);
        read(p[i]);
        read(t[i]);
    }
}
 
void solve(int *c, int *p, int *t, int N, int W)
{
    int *cost = new int[N];
    for(int i = 0; i<N; ++i)
    {
        cost[i] = c[i] * p[i];
    }
    printf("%d\n",knapSack(W,t,cost,N));
}
 
int main()
{
    int t;
    read(t);
    while(t--)
    {
        int N,W;
        read(N);
        read(W);
        int *c = new int[N];
        int *p = new int[N];
        int *t = new int[N];
        get_input(c,p,t,N);
        solve(c,p,t,N,W);
        delete []c;
        delete []p;
        delete []t;
    }
    return 0;
}
 