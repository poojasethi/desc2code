#include<iostream>

using namespace std;


int knapsack(int W, int wt[], int val[], int n)  ///dp
{
   int i, w;
   int K[n+1][W+1];

   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }

   return K[n][W];
}

int main()
{

long long int t;
cin>>t;
while(t--)
{

   int n,w1;
   cin>>n>>w1;
   int c[n],p[n],t[n],points[n];

   for(int i=0;i<n;i++)
   {
      cin>>c[i]>>p[i]>>t[i];
      points[i]=c[i]*p[i];
   }

int ans=knapsack(w1,t,points,n);

cout<<ans<<endl;


}

return 0;

}
