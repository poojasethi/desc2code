

///This  code is created by Samar Singh Holkar
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include<list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define sd(x) scanf("%d",&x)
#define sfd(x) scanf("%d",&x)
#define sfld(x) scanf("%lld",&x
#define pf printf

#define LL long long
#define ll long long
#define LD long double
#define ld long double
#define PB push_back
#define pb push_back
#define MP make_pair
#define mp make_pair
#define F first
#define S second

#define pii pair<int,int>
#define vi vector<int>
#define fr(i,n) for( int i=0; i<=n; i++)
#define frm(i,m,n) for(int i=m; i<=n; i++)
#define N 200000



int main(){

    int t; cin>>t;

    while(t--){

        int n,w; cin>>n>>w;

        int dp[n+1][w+1];

        pair<pair<int,int>,int> p[n];

        for(int i=0;i<n;i++) cin>>p[i].first.first>>p[i].first.second>>p[i].second;

        for(int i=0;i<=n;i++) dp[i][0]=0;

        for(int i=0;i<=w;i++) dp[0][w]=0;
        memset(dp,0,sizeof(dp));


        for(int i=1;i<=n;i++){

            for(int j=1;j<=w;j++){

                dp[i][j]=dp[i-1][j];

                if(p[i-1].second<=j){

                    dp[i][j]=max(dp[i][j],dp[i-1][j-p[i-1].second]+p[i-1].first.first*p[i-1].first.second);
                }
            }
        }



        cout<<dp[n][w]<<"\n";
    }
}
