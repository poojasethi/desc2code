#include<bits/stdc++.h>
using namespace std;

int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}

int main()
{
	ios::sync_with_stdio(false);
	int k;
	cin>>k;
	while(k--)
	{
		int n,W;
		cin>>n>>W;
		int c[n],t[n],p[n];
		for(int i=0;i<n;i++)
		{
			cin>>c[i]>>p[i]>>t[i];
		}
		for(int i=0;i<n;i++)
		{
			p[i]*=c[i];
		}
		cout<<knapSack(W,t,p,n)<<"\n";
	}
	return 0;
}