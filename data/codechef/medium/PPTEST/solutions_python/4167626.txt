#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


# decorator to memoized a function
class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}

    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value

    def __repr__(self):
        return self.func.__doc__

    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


def knapsack(benefit, weights, total_weight):
    assert(len(benefit) == len(weights))
    length = len(benefit)
    # http://www.es.ele.tue.nl/education/5MC10/Solutions/knapsack.pdf
    # m[i,w]=m[i-1,w] if w_i > w (the new item is more than the current weight limit)
    # m[i,w]=max(m[i-1,w],m[i-1,w-w_i]+v_i) if w_i <= w.

    # Define m[i,w] to be the maximum value that can be attained with weight less than
    # or equal to w using items up to i (0-based).
    # returns a second parameter: keep[i,w] used to know if the given element
    # is used in this solution
    @memoized
    def m(i, w):
        if i <= -1:
            res_dp = 0
            res_keep = False
        elif w == 0:
            res_dp = 0
            res_keep = False
        elif weights[i] > w:
            res_dp = m(i - 1, w)[0]
            res_keep = False
        else:
            c1 = m(i - 1, w)[0]
            c2 = benefit[i] + m(i - 1, w - weights[i])[0]
            if c2 > c1:
                res_dp = c2
                res_keep = True
            else:
                res_dp = c1
                res_keep = False

        return res_dp, res_keep

    def result_set():
        w = total_weight
        for n in xrange(length - 1, -1, -1):
            keep = m(n, w)[1]
            if keep:
                yield n
                w -= weights[n]

    return m(len(benefit) - 1, total_weight), list(result_set())


def alg(points_per_questions, time_to_learn, total_minutes):
    nb_items = len(points_per_questions)

    return knapsack(points_per_questions, time_to_learn, total_minutes)[0][0]


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        nb_questions, total_minutes = map(int, data.readline().split())  # int
        points_per_questions = []
        time_to_learn = []
        for iq in xrange(nb_questions):
            c, p, t = map(int, data.readline().split())  # int
            points_per_questions.append(c * p)
            time_to_learn.append(t)

        #L = map(float, data.readline().split())  # float
        #L = data.readline().split()  # string
        #s = data.readline().strip()
        #i = int(data.readline().strip())
        res = alg(points_per_questions, time_to_learn, total_minutes)
        print res


if __name__ == "__main__":
    main()
