#include <stdio.h>
#define gc getchar_unlocked
 
int getInt() {
	int x = 0;
	char c = gc();
	while (c<'0'||c>'9') c=gc();
	while (c>='0'&&c<='9') {
		x = (x<<3) + (x<<1) + c-'0';
		c = gc();
	}
	return x;
}
 
typedef struct {
	int R1;
	int R2;
	int used;
} Band;
 
Band band[1000];
int cubes[1000];
 
void sortCubes(int n) {
	for (int i = 0; i < n-1; i++) {
		int min_pos = i;
		for (int j = i+1; j < n; j++) {
			if (cubes[j] > cubes[min_pos])
				min_pos = j;
		}
		if (i != min_pos) {
			int temp = cubes[i];
			cubes[i] = cubes[min_pos];
			cubes[min_pos] = temp;
		}
	}
}
 
void sortBands(int m) {
	for (int i = 0; i < m-1; i++) {
		int min_pos = i;
		for (int j = i+1; j < m; j++) {
			if (band[j].R1 > band[min_pos].R1 || 
					band[j].R1 == band[min_pos].R1 && band[j].R2 < band[min_pos].R2)
				min_pos = j;
		}
		if (1 || i != min_pos) {
			int temp1 = band[i].R1, temp2 = band[i].R2;
			band[i].R1 = band[min_pos].R1, band[i].R2 = band[min_pos].R2;
			band[min_pos].R1 = temp1, band[min_pos].R2 = temp2;
		}
	}
}
 
int packCubes(int n, int m) {
	int packed = 0;
	for (int i = 0; i < n; i++) {
		int l = cubes[i] * 7;
		for (int j = 0; j < m; j++) {
			if (band[j].used || band[j].R1 > l || band[j].R2 < l)
				continue;
			band[j].used = 1;
			//printf("%d %f %d %d\n", cubes[i], l, band[j].R1, band[j].R2);
			packed++;
			break;
		}
	}
	return packed;
}
 
int main() {
	int T = getInt();
	while (T--) {
		int N = getInt();
		for (int i = 0; i < N; i++)
			cubes[i] = getInt();
		sortCubes(N);
		int M = getInt();
		for (int i = 0; i < M; i++) {
			band[i].R1 = getInt() * 11;
			band[i].R2 = getInt() * 11;
			band[i].used = 0;
		}
		sortBands(M);
		printf("%d\n", packCubes(N, M));
	}
	return 0;
}