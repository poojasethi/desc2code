#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<iostream>

using namespace std;
typedef long long ll;
typedef bitset<10005> bs;
typedef vector<int> vi;
#define pb push_back
#define REP(i,a,b) \
    for(int(i)=int(a);i<=int(b);i++)
#define REPC(i,a,b,c) \
    for(int(i)=int(a);i<=int(b);i+=int(c))

bs numbers;
vi primes;
int primeindex[10005];
void sieve(){
    int primeidx = -1;
    numbers.reset();
    numbers.flip();
    numbers.set(0,false);
    numbers.set(1,false);
    primeindex[0]=-1;
    primeindex[1]=-1;
    REP(i,2,10004){
        if(numbers.test(i)){
            REPC(j,i*i,10004,i)
                numbers.set(j,false);
            primes.pb(i);
            primeidx++;
        }
        primeindex[i]=primeidx;
    }
}

int main(){
    int T,N,indx,upctr,downctr;
    ll sum;
    sieve();
    scanf("%d",&T);
    while(T--){
        scanf("%d",&N);
        sum = 0;
        if(N<=3)
            printf("0\n");
        else{
            indx = primeindex[N];
//            cout<<"N is now "<<N<<endl;
//            cout<<"index is now "<<indx<<endl;
            downctr = indx;
            upctr = 0;
            while((upctr <= indx) && (downctr>=0)){
                while((primes[downctr]+(2*primes[upctr])) < N){
//                    cout<<" incrementing upctr for downctr = "<<downctr<<endl;
                    upctr++;
                }
                if((primes[downctr]+ (2*primes[upctr])) == N){
//                    cout<<"Now equal for upctr = "<<upctr<<" and downctr = "<<downctr<<endl;
                    sum++;
                }
//                else
//                    upctr--;
                downctr--;
//                cout<<"downctr is now "<<downctr<<endl;
            }
            printf("%lld\n",sum);
        }
    }
    return 0;
}
