#include<bits/stdc++.h>
using namespace std;
typedef struct square{
      int x;
      int y;
}sq;
sq ar[2002];
void scanint(int &x)
{
    register int c = getchar_unlocked();
    x = 0;
    for(;(c<48 || c>57);c = getchar_unlocked());
    for(;c>47 && c<58;c = getchar_unlocked()) {x = (x<<1) + (x<<3) + c - 48;}
}
//int ar[2001];
int xar[2000010][2];
bool myf(sq a,sq b){
   if(a.x==b.x)
      return a.y<b.y;
      
   return a.x<b.x;
}
int bsearch(int ,int ,int);
int main(){
     int n,i,j,maxsofar=0,ans;
     scanint(n);
     if(n>0)
         maxsofar=1;
     for(i=0;i<n;i++){
        //scanf("%d %d",&ar[i].x,&ar[i].y);
        scanint(ar[i].x);
        scanint(ar[i].y);
     }
     //cout<<"yes"<<endl;
  
     sort(ar,ar+n,myf);
     //cout<<"yes1"<<endl;
     for(i=0;i<n;i++){
        int k,l,m;
        l=i;
        k=ar[i].x;
        while(ar[i].x==k && i<n){
          i++;
          //f=1;
        }
        if(i!=l){
            m=i-1;
            i--;
         }
        else
            m=i;
            
        
        xar[ar[i].x+1000000][0]=l;
        xar[ar[i].x+1000000][1]=m;
     }
     //cout<<"yes2"<<endl;
     for(i=0;i<n;i++){
        for(j=i+1;j<n;j++){
        int maxa1=1,maxa2=1;
           /*if(i!=j){
              float m1,m2;
              if(ar[i].x==ar[j].x && ar[i].y!=ar[j].y){
                  maxa1++;maxa2++;
                  int dist=ar[i].y-ar[j].y;
                  if(ar[i].x+dist>=-1000000 && ar[i].x+dist<=1000000){
                  if(bsearch(xar[ar[i].x+dist+1000000][0],xar[ar[i].x+dist+1000000][1],ar[i].y))
                         maxa1++;
                  if(bsearch(xar[ar[i].x+dist+1000000][0],xar[ar[i].x+dist+1000000][1],ar[j].y))
                         maxa1++;}
                  if(ar[i].x-dist>=-1000000 && ar[i].x-dist<=1000000){
                  if(bsearch(xar[ar[i].x-dist+1000000][0],xar[ar[i].x-dist+1000000][1],ar[i].y))
                         maxa2++;
                  if(bsearch(xar[ar[i].x-dist+1000000][0],xar[ar[i].x-dist+1000000][1],ar[j].y))
                         maxa2++; }
              }
              else if(ar[i].y==ar[j].y && ar[i].x!=ar[i].y){
                  maxa1++;maxa2++;
                  int dist=ar[i].x-ar[j].x;
                  if(bsearch(xar[ar[i].x+1000000][0],xar[ar[i].x+1000000][1],ar[i].y+dist))
                         maxa1++;
                  if(bsearch(xar[ar[i].x+1000000][0],xar[ar[i].x+1000000][1],ar[j].y+dist))
                         maxa1++;
                  if(bsearch(xar[ar[i].x+1000000][0],xar[ar[i].x+1000000][1],ar[i].y-dist))
                         maxa2++;
                  if(bsearch(xar[ar[i].x+1000000][0],xar[ar[i].x+1000000][1],ar[j].y-dist))
                         maxa2++;
              }
              else if(ar[i].x!=ar[j].x && ar[i].y!=ar[j].y){
                     maxa1++;maxa2++;
                     //write from here when thinking completed.....
                     m1=((float)ar[i].y-(float)ar[j].y)/((float)ar[i].x-(float)ar[j].x);
                     m2=((-1)/m1);
                     float dist=sqrt(((float)ar[i].y-(float)ar[j].y)*((float)ar[i].y-(float)ar[j].y)+((float)ar[i].x-(float)ar[j].x)*((float)ar[i].x-(float)ar[j].x));
                     int di=(int)dist;
                     if(m1>0){
						 if(ar[i].x+)
                     if(ar[i].x+dist>=-1000000 && ar[i].x+dist<=1000000){
                     if(bsearch(xar[ar[i].x+dist+1000000][0],xar[ar[i].x+dist+1000000][1],ar[i].y-dist))
                         maxa1++;
                     if(bsearch(xar[ar[i].x+dist+1000000][0],xar[ar[i].x+dist+1000000][1],ar[j].y-dist))
                         maxa1++;}
                      if(ar[i].x-dist>=-1000000 && ar[i].x-dist<=1000000){
                      if(bsearch(xar[ar[i].x-dist+1000000][0],xar[ar[i].x-dist+1000000][1],ar[i].y+dist))
                         maxa2++;
                     if(bsearch(xar[ar[i].x-dist+1000000][0],xar[ar[i].x-dist+1000000][1],ar[j].y+dist))
                         maxa2++;}
                     }
                     else{
						 if(ar[i].x-dist>=-1000000 && ar[i].x-dist<=1000000){
                     if(bsearch(xar[ar[i].x-dist+1000000][0],xar[ar[i].x-dist+1000000][1],ar[i].y+dist))
                         maxa1++;
                     if(bsearch(xar[ar[i].x-dist+1000000][0],xar[ar[i].x-dist+1000000][1],ar[j].y+dist))
                         maxa1++;}
                      if(ar[i].x+dist>=-1000000 && ar[i].x+dist<=1000000){
                      if(bsearch(xar[ar[i].x+dist+1000000][0],xar[ar[i].x+dist+1000000][1],ar[i].y-dist))
                         maxa2++;
                     if(bsearch(xar[ar[i].x+dist+1000000][0],xar[ar[i].x+dist+1000000][1],ar[j].y-dist))
                         maxa2++;}
                     }
              }*/
              //cout<<"yes3"<<endl;
              if(ar[i].x!=ar[j].x || ar[i].y!=ar[j].y){
				  //cout<<"(ar[i].x,ar[i].y)==("<<ar[i].x<<","<<ar[i].y<<endl;
				  //cout<<"(ar[j].x,ar[j].y)==("<<ar[j].x<<","<<ar[j].y<<endl;
				  maxa1++;
				  maxa2++;
				  int ptx,pty,ptx1,pty1,ptx2,pty2,ptx3,pty3;
				  ptx=((-1)*(ar[i].y-ar[j].y))+ar[j].x;
				  pty=(ar[i].x-ar[j].x)+ar[j].y;
				  ptx1=(ar[j].y-ar[i].y)+ar[i].x;
				  pty1=((ar[j].x-ar[i].x)*(-1))+ar[i].y;
				  ptx2=(ar[i].y-ar[j].y)+ar[j].x;
				  pty2=((-1)*(ar[i].x-ar[j].x))+ar[j].y;
				  ptx3=((-1)*(ar[j].y-ar[i].y))+ar[i].x;
				  pty3=(ar[j].x-ar[i].x)+ar[i].y;
				  /*cout<<"ptx=="<<ptx<<endl;
				  cout<<"pty=="<<pty<<endl;
				  cout<<"ptx1=="<<ptx1<<endl;
				  cout<<"pty1=="<<pty1<<endl;
				  cout<<"ptx2=="<<ptx2<<endl;
				  cout<<"pty2=="<<pty2<<endl;
				  cout<<"ptx3=="<<ptx3<<endl;
				  cout<<"pty3=="<<pty3<<endl;
				  //cout<<"ptx=="<<ptx<<endl;*/
				  if(ptx<=1000000 && ptx>=-1000000 && pty<=1000000 && pty>=-1000000){
					  if(xar[ptx+1000000][0]!=0 || xar[ptx+1000000][1]!=0){
						  if(bsearch(xar[ptx+1000000][0],xar[ptx+1000000][1],pty))
						     maxa1++;
						  }
			      }
			      if(ptx1<=1000000 && ptx1>=-1000000 && pty1<=1000000 && pty1>=-1000000){
					  if(xar[ptx1+1000000][0]!=0 || xar[ptx1+1000000][1]!=0){
						  //cout<<"xar[ptx1+1000000][0]=="<<xar[ptx1+1000000][0]<<"    xar[ptx1+1000000][1]=="<<xar[ptx1+1000000][1]<<endl;
						  if(bsearch(xar[ptx1+1000000][0],xar[ptx1+1000000][1],pty1))
						     maxa1++;
						  }
			      }
			      if(ptx2<=1000000 && ptx2>=-1000000 && pty2<=1000000 && pty2>=-1000000){
					  if(xar[ptx2+1000000][0]!=0 || xar[ptx2+1000000][1]!=0){
						  if(bsearch(xar[ptx2+1000000][0],xar[ptx2+1000000][1],pty2))
						     maxa2++;
						  }
			      }
			      if(ptx3<=1000000 && ptx3>=-1000000 && pty3<=1000000 && pty3>=-1000000){
					  if(xar[ptx3+1000000][0]!=0 || xar[ptx3+1000000][1]!=0){
						  if(bsearch(xar[ptx3+1000000][0],xar[ptx3+1000000][1],pty3))
						     maxa2++;
						  }
			      }
			  }
              if(maxsofar<maxa1){maxsofar=maxa1;}
              if(maxsofar<maxa2){maxsofar=maxa2;}
           }
        }
        ans=4-maxsofar;
        printf("%d\n", ans);
     
return 0;}
int bsearch(int p,int q,int fi){
    int mid=p+(q-p)/2;
    if(q>p){
    if(ar[mid].y==fi)
         return 1;
    else if(ar[mid].y<fi)
         return bsearch(mid+1,q,fi);
    else if(ar[mid].y>fi)
         return bsearch(p,mid,fi);
    }
    else if(q==p && ar[mid].y==fi){
		 return 1;
	}
    return 0;
}
