#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cmath>

#define ll long long
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))

using namespace std;

int numofpoints;

//int pointcheck[x][y];

struct Point
{
    ll x;
    ll y;
};

int compare(const void *vp1, const void *vp2)
{
    Point *p1 = (Point *)vp1;
    Point *p2 = (Point *)vp2;

    Point p11 = *p1;
    Point p22 = *p2;
 
   // Find orientation
	if(p11.x == p22.x){
		return p11.y - p22.y;		
	}
	else
		return p11.x - p22.x;  

}

int bin_search(Point arr[], Point p, int start, int end){

	while(end >= start){

		//printf("New start and end- %d %d \n", start, end);

		int mid = (start+end)/2;

//		printf("checking point at %d\n", mid);
		if(arr[mid].x == p.x){
			if(arr[mid].y == p.y)
				return 1;
			else if(arr[mid].y < p.y)
				start = mid+1; 			
			else 
				end = mid-1;
		}
		else if(arr[mid].x < p.x)
			start = mid +1;
		else
			end = mid -1;
	}

	return 0;	

}

int checkforsquare(Point points[]){

	int ans = 2;

	for(int i=0;i<numofpoints-2;i++){
		for(int j = i+1;j<numofpoints-1;j++){

			Point p0 = points[i];
			Point p1 = points[j];
			/*printf("P0 - %lld %lld\n", p0.x, p0.y);
			printf("P1 - %lld %lld\n", p1.x, p1.y);*/
			if(p0.x == p1.x && p0.y == p1.y)
				continue;

			ll dx = p1.x - p0.x; 
			ll dy = p1.y - p0.y;

			Point p2, p3;
			p2.x = p1.x + dy; 
			p2.y = p1.y - dx;
			p3.x = p0.x + dy; 
			p3.y = p0.y - dx;

			Point p4, p5;
			p4.x = p1.x - dy; 
			p4.y = p1.y + dx;
			p5.x = p0.x - dy; 
			p5.y = p0.y + dx;

			/*printf("P2 - %lld %lld\n", p2.x, p2.y);
			printf("P3 - %lld %lld\n", p3.x, p3.y);
			printf("P4 - %lld %lld\n", p4.x, p4.y);
			printf("P5 - %lld %lld\n", p5.x, p5.y);*/

			int sum1 = bin_search(points, p2, 0, numofpoints) + bin_search(points, p3, 0, numofpoints);
			int sum2 = bin_search(points, p4, 0, numofpoints) + bin_search(points, p5, 0, numofpoints);

			//printf("%d %d\n", sum1, sum2);

			if(sum1 == 2 || sum2 == 2){
				return 0;
			}
			if(sum1 == 1 || sum2 == 1){
				ans = 1;
				continue;
			}
			else{
				continue;
			}
							
		}
			
	}

	return ans;
}

int checkdegenerate(Point points[]){

	int max =1, count = 1, min = 2;

	for(int i = 0;i<numofpoints-1;i++){
		if(points[i].x == points[i+1].x && points[i].y == points[i+1].y){
			count += 1;
			if(count > max)
				max = count;
			//printf("Here at point %lld %lld\n", points[i+1].x, points[i+1].y);
		}
		else{
			count = 1;
		}
	}
	//printf("%d\n",  max);
	if(max == 4)
		return 0;
	else if(max == 3)
		return 1;
	else
		return 2;
}

int main(){

	int n;
	long long arrx[2005];
	long long arry[2005];
	Point arr[2005];

	scanf("%d", &n);
	numofpoints = n;

	for(int i=0;i<n;i++){
		scanf("%lld %lld", &arr[i].x, &arr[i].y);
	}

    qsort(&arr, n, sizeof(Point), compare);

    /*for(int i = 0;i<n;i++){
    	printf("(%lld, %lld)\n", arr[i].x, arr[i].y);
    }

    for(int i=0;i<20;i++){
    printf("Enter search query\n");
    Point p;
    scanf("%lld %lld", &p.x, &p.y);

    if(bin_search(arr, p, 0, n))
    	printf("Found\n");
    else
    	printf("Not found\n");
	}*/

	if(n == 0){
		printf("%d\n", 4);
		return 0;
	}

	if(n == 1){
		printf("%d\n", 3);
		return 0;
	}

	if(n == 2){
		printf("%d\n", 2);
		return 0;
	}

	/*if(n == 3){
		if(checkforthree(arrx, arry)){
			printf("%d\n", 1);
		}
		else
			printf("%d\n", 2);
		return 0;
	}*/

	else{

		int res2 = checkdegenerate(arr);
		int res = checkforsquare(arr);
		
		printf("%d\n", MIN(res2, res)) ;

		return 0;
	}

}
