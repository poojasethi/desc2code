#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;
void fastStream(){cin.tie(0);std::ios_base::sync_with_stdio(0);}

int N;
int X[2010],Y[2010];
const double EPS=1e-9;
bool EQ(double a, double b){
  return abs(a-b)<EPS;
}
const ll base = 1000000000LL;

pair<double,double> roundPoint(double x,double y,double a){
  return make_pair(sin(a)*x+cos(a)*y,cos(a)*x-sin(a)*y);
}

bool is_exists(pair<double,double> p, set<ll> &ps){
  const int x = (p.second >= 0 ? p.second + EPS : p.second - EPS) + 10000000;
  const int y = (p.first >= 0 ? p.first + EPS : p.first - EPS) + 10000000;
  return ps.count(y*base+x);
}

bool is_exists(int y,int x,set<ll> &ps){
  y += 10000000;
  x += 10000000;
  return ps.count(y*base+x);
}

bool is_int(double a){
  const int b = (a>=0) ? (a + EPS) : (a-EPS);
  return EQ(a,b);
}

int main(){
  fastStream();
  cin>>N;
  if(N==0){
    cout<<4<<endl;
  }
  else{
    set<ll> ps;
    for(int i=0;i<N;i++){
      cin>>X[i]>>Y[i];
      //ps.insert(pii(Y[i],X[i]));
      int y = Y[i] + 10000000;
      int x = X[i] + 10000000;
      ps.insert(y*base+x);
    }
    int res=3;
    for(int i=0;i<N;i++){
      for(int j=i+1;j<N;j++){
        {
          const double cx = (X[i] + X[j])/2.0;
          const double cy = (Y[i] + Y[j])/2.0;
          const double x1 = X[i] - cx;
          const double y1 = Y[i] - cy;
          pair<double,double> p1 = roundPoint(x1,y1,M_PI/2);
          pair<double,double> p2 = roundPoint(x1,y1,3*M_PI/2);
          p1.first+=cy;p1.second+=cx;
          p2.first+=cy;p2.second+=cx;
        }
        {
          const int dx = X[i] - X[j];
          const int dy = Y[i] - Y[j];
          const int x3 = X[j] - dy;
          const int y3 = Y[j] + dx;
          const int x4 = X[i] - dy;
          const int y4 = Y[i] + dx;
          int cnt=0;
          if(is_exists(y3,x3,ps))cnt++;
          if(is_exists(y4,x4,ps))cnt++;
          res=min(res,2-cnt);
        }

        {
          const int dx = X[i] - X[j];
          const int dy = Y[i] - Y[j];
          const int x3 = X[j] + dy;
          const int y3 = Y[j] - dx;
          const int x4 = X[i] + dy;
          const int y4 = Y[i] - dx;
          int cnt=0;
          if(is_exists(y3,x3,ps))cnt++;
          if(is_exists(y4,x4,ps))cnt++;
          res=min(res,2-cnt);
        }
      }
    }
    cout<<res<<endl;
  }
    
  return 0;
}
