#include <bits/stdc++.h>
#define APPROX 0.000005
using namespace std;
long double x[2001], y[2001];
int binarysearch(long double data, long double yata, int first, int last)
{
	if(first<=last)
	{
		int mid = (first + last)/2;
		if(x[mid] < data + APPROX && x[mid]> data - APPROX)
		{
			int temp = mid;
			while(x[temp] < data + APPROX && x[temp]> data - APPROX && temp<=last)
			{
				if(y[temp] < yata + APPROX && y[temp] > yata - APPROX)
				{
					return 1;
				}
				temp++;
			}
			temp = mid;
			while(x[temp] < data + APPROX && x[temp]> data - APPROX && temp>=first)
			{
				if(y[temp] < yata + APPROX && y[temp] > yata - APPROX)
				{
					return 1;
				}
				temp--;
			}
		}
		else if(x[mid]<data)
		{
			return binarysearch(data, yata, mid+1, last);
		}
		else
		{
			return binarysearch(data, yata, first, mid-1);
		}
	}
	else
	{
		return 0;
	}
	return 0;
}
void quicksort(int first,int last){
    int pivot,j,temp,i;
	 if(first<last){
	     pivot=first;
	     i=first;
	     j=last;
	     while(i<j){
	         while(x[i]<=x[pivot]&&i<last)
	             i++;
	         while(x[j]>x[pivot])
	             j--;
	         if(i<j){
	             temp=x[i];
	              x[i]=x[j];
	              x[j]=temp;
	              temp =y[i];
	              y[i] = y[j];
	              y[j] = temp;
	         }
	     }
	     temp=x[pivot];
	     x[pivot]=x[j];
	     x[j]=temp;
	     temp = y[pivot];
	     y[pivot] = y[j];
	     y[j] = temp;
	     quicksort(first,j-1);
	     quicksort(j+1, last);
    }
}
int main()
{
	int points;
	cin>>points;
	for(int i=0;i<points;i++)
	{
		cin>>x[i]>>y[i];
	}
	if(points==0)
	{
		cout<<"4"<<endl;
		return 0;
	}
	else if(points==1)
	{
		cout<<"3"<<endl;
		return 0;
	}
	else if(points==2)
	{
		cout<<"2"<<endl;
		return 0;
	}
	int min = 4;
	quicksort(0,points-1);
	long double slope;
	long double x1,y1,x2,y2; 
	long double dist;
	for(int i = 0; i < points; i++)
	{
		for(int j = i+1; j < points; j++)
		{
			int ans = 2;
			dist = sqrt((y[j]-y[i])*(y[j]-y[i]) + (x[j]-x[i])*(x[j]-x[i]))/2;
			//cout<<dist<<endl;
			if(x[i]==x[j])
			{
				x1 = dist + ((x[i]+x[j])/2);
				x2 = ((x[i]+x[j])/2) - dist;
				y1 = y2 = (y[i]+y[j])/2;
			}
			else if(y[i]==y[j])
			{
				x1 = x2 = (x[i]+x[j])/2;
				y1 = ((y[i]+y[j])/2) - dist;
				y2 = ((y[i]+y[j])/2) + dist;
			}
			else
			{
				slope = (y[j]-y[i])/(x[j]-x[i]);
				long double temp = dist / sqrt(slope*slope + 1);
				x1 = ((x[i]+x[j])/2) + slope*temp;
				y1 = ((y[i]+y[j])/2) - temp;
				x2 = ((x[i]+x[j])/2) - slope*temp;
				y2 = ((y[i]+y[j])/2) + temp;
			}
			//cout<<x1<<" "<<y1<<endl;
			//cout<<x2<<" "<<y2<<endl;
			//cout<<binarysearch(x1, y1, 0, points-1)<<endl;
			//cout<<binarysearch(x2, y2, 0, points-1)<<endl;
			ans = ans - binarysearch(x1, y1, 0, points-1);
			//cout<<"Ans:"<<ans<<endl;
			ans = ans - binarysearch(x2, y2, 0, points-1);
			//cout<<"Ans:"<<ans<<endl;
			if(ans<min)
				min = ans;
		}
	}
	cout<<min<<endl;
	return 0;
}