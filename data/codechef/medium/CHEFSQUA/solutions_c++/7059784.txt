#include<iostream>
using namespace std;
class point;
point *Point;
class point
{
   int x,y;
public:
   friend int main();
   friend istream& operator>>(istream &p,point &q)
   {
      cin>>q.x>>q.y;
   }
   bool operator<(point &p)
   {
      if(x<p.x)
         return true;
      if(x>p.x)
         return false;
      if(y<p.y)
         return true;
      return false;
   }
   static bool binarySearch(point p,int low,int high)
   {
      int mid;
      for(mid=(low+high)/2;low<=high;mid=(low+high)/2)
      {
         if(Point[mid]<p)
            low=mid+1;
         else if(p<Point[mid])
            high=mid-1;
         else
            return true;
      }
      return false;
   }
   static void merg(int first,int last)
   {
      int i,j,k,mid=(first+last)/2;
      point B[last-first+1];
      i=first;
      j=mid+1;
      k=0;
      for(;i<=mid&&j<=last;)
      {
         if(Point[i]<Point[j])
            B[k++]=Point[i++];
         else
            B[k++]=Point[j++];
      }
      for(;i<=mid;)
         B[k++]=Point[i++];
      for(;j<=last;)
         B[k++]=Point[j++];
      for(i=0;i<last-first+1;i++)
         Point[first+i]=B[i];
   }
   static void mergesort(int first,int last)
   {
      if(first>=last)
         return ;
      mergesort(first,(first+last)/2);
      mergesort((first+last)/2+1,last);
      merg(first,last);
   }
};

int main()
{
   int N,i,j,k,l,minimum;
   point p1,p2;
   bool find1,find2;
   cin>>N;
   Point=new point[N];
   for(i=0;i<N;i++)
      cin>>Point[i];
   point::mergesort(0,N-1);
   minimum=2;
   for(i=0;i<N-1;i++)
   {
      for(j=i+1;j<N;j++)
      {
         p1.x=Point[i].y-Point[j].y+Point[i].x;
         p1.y=Point[i].y+Point[j].x-Point[i].x;
         p2.x=Point[j].x+Point[i].y-Point[j].y;
         p2.y=Point[j].y+Point[j].x-Point[i].x;
         find1=point::binarySearch(p1,0,N-1);
         find2=point::binarySearch(p2,0,N-1);
         if(find1&&find2)
            minimum=0;
         if(minimum&&(find1||find2))
            minimum=1;
         if(!minimum)
         {
            i=N;
            break;
         }
         p1.x=Point[i].x+Point[j].y-Point[i].y;
         p1.y=Point[i].y+Point[i].x-Point[j].x;
         p2.x=Point[j].x+Point[j].y-Point[i].y;
         p2.y=Point[j].y+Point[i].x-Point[j].x;
         find1=point::binarySearch(p1,0,N-1);
         find2=point::binarySearch(p2,0,N-1);
         if(find1&&find2)
            minimum=0;
         if(minimum&&(find1||find2))
            minimum=1;
         if(!minimum)
         {
            i=N;
            break;
         }
      }
   }
   if(N<=2)
      cout<<4-N<<endl;
   else
      cout<<minimum<<endl;
return 0;
}
