#include<iostream>
#include<map>
#include<set>
#include<vector>
#include<map>
#include<utility>
#include<algorithm>
#include<sstream>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<stdlib.h>
using namespace std;
#define mp make_pair
#define s(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define pi(n) printf("%d",n)
#define ps putchar(' ')
#define rep(i,n) for(i=0; i<(n); ++i)                                        //rep      [0,n)
#define repe(i,n) for(i=0; i<=(n); ++i)                                        //repe      [0,n]
#define repd(i,n) for(i=(n); --i>=0;)                                        //repd      [n,0]
#define repab(i,a,b) for(i=(a); i<(b); ++i)                                   //repab [a,b)
#define repeab(i,a,b) for(i=(a); i<=(b); ++i)                              //repeab[a,b]
#define repdab(i,a,b) for(i=(b); --i>=(a); )                              //repdab[b,a]
#define repc(a) for(__typeof((a).begin()) i=(a).begin(); i!=(a).end(); ++i)//repc any container
#define repcd(a) for(__typeof((a).rbegin()) i=(a).rbegin(); i!=(a).rend(); ++i)//repcd any container reverse
#define all(a) a.begin(), a.end()
#define sz(a) int((a).size())
#define mod 1000000009
#define pb push_back
void debug(int i){cout<<i<<endl;}
void sieve(){int i,j,n=100000;bool isPrime[n];memset(isPrime,true,sizeof(isPrime));isPrime[0]=isPrime[1]=false;for(i=2;i<sqrt(n);i++)if(isPrime[i])for(j=i*i;j<n;j+=i)isPrime[j]=false;}
bool asc (int i,int j) { return (i<j); }
bool dec (int i,int j) { return (i>j); }
#define fe(v) for_each(v.begin(),v.end(),debug) //apply func to [it1,it2]
#define pii pair<int,int>
#define pll pair<ll,ll>
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long l;
typedef int I;
/*Vector
 v.insert(itr,val),v.erase(it1,it2)
 MAP
 key-value,insert m[key]=val,sorted on keys,m.insert(pii),m.erase(it1,it2)
 ,m.find(key),
 SET
 sorted on val,do dup vals,val cannot be modified,s.find(val),s.insert(val)
 ,s.insert(it,val)
 Algorithm
 find(it1,it2,val),returns it2 if val not found
 for_each(it1,it2,func) applies func to each el
 sort(it1,it2,func)
 equal(it1,it1end,it2) true if all match
 each below[it1,it2)
 count(it1,it2,val),copy(it1,it1end,it2),fill(it1,it2,val)
 reverse(it1,it2)
 next_permutation(it1,it2)-into the next lexicographically greater permutation(sort before)
 true if could rearrange else false
 */
// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd
pair<int, int>point[2003];
vector<int>point_array[2000004];
bool compare(pair<int, int>a, pair<int, int>b)
{
    return a.first<b.first || (a.first==b.first && a.second<b.second);
}
int find(int x,int y)
{
    x+=1000000;
    if(x<0 || x>2000000)
        return 0;
    int left=0;
    int right = point_array[x].size()-1;
    if(right==-1)
        return 0;
    while(left<right)
    {
        int mid = (left+right)/2;
        if(point_array[x][mid] < y)
            left = mid+1;
        else
            right=mid;
    }
    if(point_array[x][left]==y)
        return 1;
    return 0;
}
int main() {
    int n,i,j,count;
    scanf("%d",&n);
    for(i=1;i<=n;i++){
        scanf("%d%d",&point[i].first,&point[i].second);
    }
    if(n==0){
        printf("4\n");
        return 0;
    }
    if(n==1){
        printf("3\n");
        return 0;
    }
    sort(point+1, point+n+1, compare);
    for(i=1;i<=n;i++)
        point_array[point[i].first+1000000].push_back(point[i].second);
    int ans=0;
    for(i=1;i<=n;i++)
    {
        for(j=i+1;j<=n;j++)
        {
            count=0;
            count += find(point[j].first+point[i].second-point[j].second , point[j].second+point[j].first-point[i].first);
            count += find(point[i].first+point[i].second-point[j].second , point[i].second+point[j].first-point[i].first);
            if(count==2){
                printf("0\n");
                return 0;
            }
            ans = max(ans, count);
        }
    }
    if(ans==1)
        printf("1\n");
    else
        printf("2\n");
    return 0;
}