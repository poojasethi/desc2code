    #include <stdio.h>
    #include<algorithm>
    using namespace std;

    bool searchxy(int ,int );
    int find_first(int );
    int find_last(int );
    bool findy(int ,int ,int );

    struct points{
        int x;
        int y;
    }arr[2003];

    int n;
    int ans = 2;
    int yp1,yn1,yp2,yn2;
    int xp1,xn1,xp2,xn2;

    int main()
    {
    int flag;
    scanf("%d",&n);
    for(int i=0; i<n; i++)
    scanf("%d %d",&arr[i].x,&arr[i].y);
    if(n < 3)
    printf("%d\n",4-n);
    else
    {
 
    for(int i=0; i<n-1; i++)
    {
        flag = 2;
        for(int j =i+1; j<n; j++)
        {
            int x = arr[j].x - arr[i].x;
            int y = arr[j].y - arr[i].y;
            xp1 = arr[i].x - y;     yp1 = arr[i].y + x;
            xp2 = arr[j].x - y;     yp2 = arr[j].y + x;
            xn1 = arr[i].x + y;     yn1 = arr[i].y - x;
            xn2 = arr[j].x + y;     yn2 = arr[j].y - x;
 
            if(searchxy(xp1,yp1))
                flag--;
            if(searchxy(xp2,yp2))
                flag--;
            if(flag < ans)
                ans = flag;
            if(flag == 0)
                break;

            flag = 2;
            if(searchxy(xn1,yn1))
                flag--;
            if(searchxy(xn2,yn2))
                flag--;
            if(flag < ans)
                ans = flag;
            if(flag == 0)
                break;
        }
        if(ans == 0)
        break;
    }
    printf("%d\n",ans);
    }
    return 0;
    }

    bool searchxy(int x,int y)
    {
        int start = find_first(x);
        if(start == -1)
            return false;
        int end = find_last(x);
        if(findy(start,end,y))
            return true;
        return false;
    }
    int find_first(int num)
    {
        int first = -1;
        int low = 0;
        int high = n-1;
        int mid;
        while(low <= high)
        {
            mid = (low+high)/2;
            if(arr[mid].x == num)
            {
                first = mid;
                high = mid - 1;
            }
            else if(arr[mid].x < num)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return first;
    }
 
    int find_last(int num)
    {
        int last = -1;
        int low = 0;
        int high = n-1;
        int mid;
        while(low <= high)
        {
            mid = (low+high)/2;
            if(arr[mid].x == num)
            {
                last = mid;
                low = mid + 1;
            }
            else if(arr[mid].x < num)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return last;
    }
    bool findy(int low,int high,int num)
    {
        int mid;
        while(low <= high)
        {
            mid = (low+high)/2;
            if(arr[mid].y == num)
                return true;
            else if(arr[mid].y < num)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return false;
    }
