#include<cstdio>
#include<cmath>
#include<climits>
#include<algorithm>
#include<set>
#include<iostream>
#include<stdlib.h>

using namespace std;

struct point{
int x;
int y;
};

struct point points[2000];
set<int> y_cord [2000];
int x_cord[2000];

int comp(const void *p1,const void *p2){
    struct point *a=(struct point *)p1;
    struct point *b=(struct point *)p2;

if((*a).x == (*b).x) return (*a).y > (*b).y;else return (*a).x > (*b).x;
}

bool found1 = false, found2 = false;


void checksquare(int n){
for(int i=0;i<n;i++){
for(int j=i+1;j<n;j++){
int diff = x_cord[j] - x_cord[i];
for(set<int>::iterator it = y_cord [i].begin();it!=y_cord [i].end();it++){
int y = *it;
if(y_cord [j].count(y)){
int fi = y_cord [i].count(y+diff);
int fj = y_cord [j].count(y+diff);
if(fi && fj) found1 = true;
if(fi || fj) found2 = true;
//if(found4) return;
}
}
}
}
}


int main(){

int n;
scanf("%d",&n);
for(int i=0;i<n;i++)
scanf("%d%d",&points[i].x,&points[i].y);
if(n<=2){
printf("%d\n",4-n);
return 0;
}

qsort(points,n,sizeof(points[0]),comp);
x_cord[0] = points[0].x;
y_cord [0].insert(points[0].y);
int i = 0;


for(int j=1;j<n;j++){
if(points[j].x == x_cord[i]){
y_cord[i].insert(points[j].y);
} else {
i++;
x_cord[i] = points[j].x;
y_cord [i].insert(points[j].y);
}
}


checksquare(i+1);
if(found1) printf("0\n");
else if(found2) printf("1\n");
else printf("2\n");
return 0;
}
