#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <bitset>
#include <fstream>
#include <iomanip>
#include <set>
#include <stack>
#include <sstream>
#include <cstdio>
#include <map>
#include <cmath>
#include <queue>
#include <cstring>
 
using namespace std;
 
typedef unsigned long long ull;

const int MAX_BIT = 100;
int configuration[MAX_BIT + 1][MAX_BIT + 1];
int current[MAX_BIT + 1];

bool is_same_conf(const int a[], const int b[], int n) {
	for (int i = 0; i < n; ++i) {
		if (a[i] != b[i]) {
			return false;
		}
	}
	return true;
}

void pick_bruteforce(int n) {
	int choice = 0;
	while (choice < n) {
		for (int c = 0; c < n; ++c) {
			if (is_same_conf(configuration[choice], configuration[c], n)) {
				current[c] = 1;
			} else {
				current[c] = 0;
			}
		}

		if (is_same_conf(current, configuration[choice], n)) {
			for (int i = 0; i < n; ++i) {
				if (current[i]) {
					cout << "YES\n";
				} else {
					cout << "NO\n";
				}
			}
			return;
		} 
		choice++;
	}

	for (int i = 0; i < n; ++i) {
		cout << "NO\n";
	}
}

void inout_forced_output() {
	int test_cases;
	string input;
	cin >> test_cases;
	for (int t = 0; t < test_cases; ++t) {
		for (int i = 0; i < test_cases; ++i) {
			cin >> input;
			if (input == "YES") {
				configuration[t][i] = 1;	
			} else {
				configuration[t][i] = 0;	
			}
		}
	}

	pick_bruteforce(test_cases);
}

int main() {
	inout_forced_output();
	return 0;
}    