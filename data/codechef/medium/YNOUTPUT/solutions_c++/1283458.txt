#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

using namespace std;

struct node
{
	int ycount;
	int rep;
	int *loc;
};

struct comparatorForMap
{
	bool operator() (vector<string> v1,vector<string> v2) const
	{
		return v1<v2;
	}
};

bool exists(vector<string> v,map< vector<string>,node*,comparatorForMap > hash)
{
	map< vector<string>,node*,comparatorForMap >::iterator it=hash.begin();
	while(it!=hash.end())
	{
		vector<string> g=it->first;
		if(g==v)
			return true;
		it++;
	}
	return false;
}

int main()
{
	int t,ycount;
	cin>>t;
	map< vector<string>,node*,comparatorForMap > hash;
	for(int f=0;f<t;f++)
	{
		string str;
		vector<string> v;
		ycount=0;
		for(int i=0;i<t;i++)
		{
			cin>>str;
			if(str=="YES")
				ycount++;
			v.push_back(str);
		}
		if(hash.count(v))
		{
			//cout<<"existing node\n";
			node *n=(hash[v]);
			n->rep++;
			n->loc=(int*)realloc(n->loc,n->rep*sizeof(int));
			n->loc[n->rep-1]=f;
			n->ycount=ycount;
			//hash[v]=n;		
		}
		else
		{
			//cout<<"new node\n";
			node *n=new node[1];
			n->rep=1;
			n->loc=new int[1];
			n->loc[0]=f;
			n->ycount=ycount;
			hash[v]=n;
		}
	}
	
	int flag=0;
	map< vector<string>,node*,comparatorForMap >::iterator it=hash.begin(),end=hash.end();
	while(!flag && it!=end)
	{
		vector<string> v=it->first;
		node *n=it->second;
		int i,cnt=0;
		for(i=0;i<v.size();i++)
		{
			//cout<<"="<<i<<" "<<v[i]<<" "<<n->loc[cnt]<<endl;
			if(v[i]=="YES")
			{
				if(n->loc[cnt]==i)
				{
					cnt++;
				}
				else
					break;
			}
			else
			{
				if(n->loc[cnt]==i)
					break;
			}
			
			
		}
		//cout<<cnt<<" "<<n->ycount<<endl;
		if(v.size()>0 && cnt==n->ycount && i==v.size()) //found it
		{
			flag=1;
			for(int j=0;j<v.size();j++)
			{
				cout<<v[j]<<endl;
			}
			//cout<<v[v.size()-1];
		}
		it++;
	}	
	if(!flag)
	{
		for(int i=0;i<t;i++)
			cout<<"NO"<<endl;
	}
}