#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
using namespace std;
long long n , m,p ;
struct query{
    long long row,col;
} Q[100000];
bool order(const query &u,const query &v){
    if(u.row==v.row){
        return u.col<v.col ;
    }
    return u.row<v.row;
}
struct node {
    long long key;
    long long times;
    struct node *link ;
};
class graph{
    public :
        long long siz;
        long long answer[100000];
        struct node head[100000];
        struct node*  tail[100000];
        graph(long long);
        void Add(long long ,long long);
	void print();
        void Ans();
};
graph :: graph(long long num){
    siz=num;
    for(int i=0;i<num;i++){
        head[i].key=i;
        head[i].link=NULL;
        tail[i]=NULL;
        answer[i]=m-1;
    }
}
void graph::Add(long long R,long long C){
    if(tail[R]==NULL){
        struct node *p = new node ;
        p->key=C;
        p->times=1;
        p->link=NULL;
        head[R].link=p;
        tail[R]=p;
        return ;
    }
    if(tail[R]->key==C){
        tail[R]->times++;
        return ;
    }
    struct node *p = new node ;
    p->key=C;
    p->link=NULL;
    p->times=1;
    tail[R]->link=p;
    tail[R]=p;
    return ;
}
void graph::print(){
	for(int i=0;i<siz;i++){
		cout << i << " "  ;
		struct node *p=head[i].link;
		while(p!=NULL){
			cout << p->key << "(" << p->times << ")" << " " ; 
			p=p->link ;
		}
		cout << endl; 
	}
	return ;
}
void graph :: Ans(){
    for(int i=0;i<siz;i++){
        bool hai=true;
        struct node *p= head[i].link ;
        while(p!=NULL){
                if(p->key==0){
                    answer[i]-=(p->times);
                }
                if(p->key==m-1){
                    answer[i]+=(p->times);
                }
                if(p->times>1&&(p->key!=(m-1))){
                        if(tail[i]==p){
                            hai=false;
                            break;
                        }
                        struct node *nex=p->link;
                        if(nex->key!=((p->key)+1)){
                                hai=false;
                                break;
                        }
                        if((nex->key==(p->key)+1)&&((nex->times) <(p->times)-1)){
                            hai=false;break;
                        }
                }
                p=p->link;
        }
        if(!hai){answer[i]=-1;}
        printf("%lld\n",answer[i]);
    }
    //printf("\n") ;
    return ;
}
int main(){
    cin >> n >> m >> p ;
    graph g(n);
    for(int i=0;i<p;i++){
        scanf("%lld" "%lld",&Q[i].row,&Q[i].col);
        Q[i].row--;
        Q[i].col--;
    }
    sort(Q,Q+p,order);
    for(int i=0;i<p;i++){
            g.Add(Q[i].row,Q[i].col);
    }
//    g.print();
    g.Ans();
    return 0 ;
}