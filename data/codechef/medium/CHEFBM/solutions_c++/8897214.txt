#include <stdio.h> // for scanf , printf
#include <bits/stdc++.h> // for map
//#include <stdlib.h> // for malloc,sqrt
//#include <string.h> // for memset,strcmp
 //#include <iostream> // for cout
 //# include <iomanip>
# define limit 100000
#define gc getchar_unlocked
using namespace std;

typedef long long int ull;// has 64 bits
//typedef long double ld;
int l,r,midl,midr,mid;
int m,p,n;
//int P[limit+1][limit+1];
int x[limit][2],temp[limit][2];//,P[limit+1];
//enum STATE{possible,impossible};
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    //printf("dude\n");
}
void copy(int* to, int *from)
{
	to[0]=from[0];
	to[1]=from[1];
}
void merge(int l, int mid, int r)
{
	int i,j,k;// l <= i <= mid, mid+1 <= j <= r
	i=l;
	j=mid+1;
	k=0;
	while(k<r-l+1)
		if(i>mid)
			copy(temp[k++],x[j++]);
		else if(j>r)
			copy(temp[k++],x[i++]);
		else if(x[i][0]<x[j][0])
			copy(temp[k++],x[i++]);
		else if(x[i][0]>x[j][0])
			copy(temp[k++],x[j++]);
		else if(x[i][1]>x[j][1])// x[i][0]==x[j][0]
			copy(temp[k++],x[i++]);
		else
			copy(temp[k++],x[j++]);
	for(k=0,i=l;i<=r;i++,k++)
		copy(x[i],temp[k]);
}
void mergesort(int l,int r)
{
	if(l==r)
		return;
	int mid=(l+r)/2;
	mergesort(l,mid);
	mergesort(mid+1,r);
	merge(l,mid,r);
}
int main()
{
	int i,k;
	ull cost;
	scanint(n);
	scanint(m);
	scanint(p);
	//printf("%d%d%d\n",n,m,p); 
	//cin>>n>>m>>p;
	/*for(i=1;i<=n;i++)
		for(j=1;j<=m;j++)
			P[i][j]=j;*/
	for(k=0;k<p;k++)
	{
		scanint(x[k][0]);
		scanint(x[k][1]);
		//printf("%d%d\n",x[k][0],x[k][1]);
		//cin>>x[k][0]>>x[k][1];
	}
	mergesort(0,p-1);
	/*for(k=0;k<p;k++)
	{
		cout<<x[k][0]<<" , "<<x[k][1]<<"\n";
	}*/
	k=0;
	for(i=1;i<=n;i++)
	{
		/*for(j=1;j<=m;j++)
			P[j]=j;*/
		
		map < int, int > mymap;
		for(;k<p && x[k][0]==i;k++)
		{
			mymap[x[k][1]]++; // insert this 'j' with cost zero
			if(x[k][1]>1 && !mymap.count(x[k][1]-1))// f j>1 and j-1 element absent from map, insert it with zero value
				mymap[x[k][1]-1]=0;
			if(x[k][1]<m && !mymap.count(x[k][1]+1))// f j>1 and j+1 element absent from map, insert it with zero value
				mymap[x[k][1]+1]=0;
		}
		/*for(map<int,int>::iterator it=mymap.begin(); it!=mymap.end(); ++it)
				printf("%d : %d\n",it->first,it->second);*/
		cost=(m*1LL-1);// initiallise cost as if no modification was there
		 for(map<int,int>::iterator it=mymap.begin(); it!=mymap.end(); ++it)
        { // iterate over the map
			if(it->first<m)
				if(mymap.count(it->first+1)>0)// if next element is present in map
					if(it->second>1+mymap[it->first+1])
					{
						cost=-1;
						break;
					}
					else
						cost=cost-(mymap[it->first]-mymap[it->first+1]);
				else // mymap.count(it->first+1)==0
					if(it->second>1)
					{
						cost=-1;
						break;
					}
					else
						cost=cost-(it->second);
		}
		
		/*for(j=1;j<=n;j++)
			cout<<P[j]<<" ";*/
		//cout<<"\n";
		/*for(j=m-1;j>=1;j--)
			if(P[j]<=P[j+1])
				cost+=(P[j+1]-P[j]);
			else
				break;*/
		//cout<<((j==0)?cost:-1)<<"\n";
		printf("%lld\n",((cost!=-1)?cost:-1LL));
	}
	return 0;
}
