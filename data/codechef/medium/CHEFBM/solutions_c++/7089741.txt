#include<iostream>
using namespace std;
class element;
element *Element;
class element
{
public:
   int x,y;
   bool operator>(element e)
   {
      if(x>e.x)
         return true;
      if(x<e.x)
         return false;
      if(y<e.y)
         return true;
      return false;
   }
   friend istream& operator>>(istream &p,element &e)
   {
      p>>e.x>>e.y;
   }
   static void merg(int first,int last)
   {
      int i,j,k,mid;
      mid=(first+last)/2;
      i=first;
      j=mid+1;
      k=0;
      element F[last-first+1];
      for(;i<=mid&&j<=last;)
      {
         if(Element[i]>Element[j])
            F[k++]=Element[j++];
         else
            F[k++]=Element[i++];
      }
      while(i<=mid)
         F[k++]=Element[i++];
      while(j<=last)
         F[k++]=Element[j++];
      for(i=0;i<last-first+1;i++)
         Element[i+first]=F[i];
   }
   static void mergesort(int first,int last)
   {
      if(first>=last)
         return ;
      mergesort(first,(first+last)/2);
      mergesort((first+last)/2+1,last);
      merg(first,last);
   }
};
int main()
{
   int n,m,p,i,j,k,lastValue,previousj,previousValue,thisValue;
   cin>>n>>m>>p;
   Element=new element[p];
   for(i=0;i<p;i++)
      cin>>Element[i];
   element::mergesort(0,p-1);
   for(k=0,i=1;i<=n;i++)
   {
      for(lastValue=m;k<p&&Element[k].x==i&&Element[k].y==m;k++,lastValue++);
      previousj=m;
      thisValue=previousValue=lastValue;
      for(;k<p&&Element[k].x==i;)
      {
         j=Element[k].y;
         for(thisValue=j;k<p&&Element[k].x==i&&j==Element[k].y;k++,thisValue++);
         if(j!=previousj-1)
            previousValue=j+1;
         if(previousValue<thisValue)
         {
            cout<<-1<<endl;
            break;
         }
         previousValue=thisValue;
         previousj=j;
      }
      if(previousValue<thisValue)
      {
         for(;k<p&&Element[k].x==i;k++);
         continue;
      }
      if(previousj==1)
         cout<<lastValue-previousValue<<endl;
      else
         cout<<lastValue-1<<endl;
   }
   return 0;
}
