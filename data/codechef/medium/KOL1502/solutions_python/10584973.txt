#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
const ll MOD = 1e7;

int taste[1000];

int main()
{
	int T, n;
	scanf("%d",&T);

	for(int k=0; k<T; k++)
	{
		scanf("%d", &n);
		ll sum = 0;
		for(int j=0; j<n;j++)
		{
			scanf("%d", &taste[j]);
			sum += taste[j];			
		}

		ll** dp_A = new ll*[sum+1];
		for(int i = 0; i < sum+1; ++i)
    		dp_A[i] = new ll[n+1]();
    	ll** dp_B = new ll*[sum];
		for(int i = 0; i < sum; ++i)
    		dp_B[i] = new ll[n+1]();
		dp_A[0][0] = 1;

		for(int i = 1; i<=n; i++)
		{
			for(int j=-sum; j<=sum; j++)
			{	
				if(j<0) //table B
				{
					if(abs(j-taste[i-1])<=sum && abs(j+taste[i-1])<=sum)
					{
						if(j-taste[i-1]<0 && j+taste[i-1]<0)
							dp_B[abs(j)-1][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + dp_B[abs(j+taste[i-1])-1][i-1])%MOD; 
						if(j-taste[i-1]>=0 && j+taste[i-1]<0)
							dp_B[abs(j)-1][i] = (dp_A[j-taste[i-1]][i-1] + dp_B[abs(j+taste[i-1])-1][i-1])%MOD; 
						if(j-taste[i-1]<0 && j+taste[i-1]>=0)
							dp_B[abs(j)-1][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + dp_A[j+taste[i-1]][i-1])%MOD; 
						if(j-taste[i-1]>=0 && j+taste[i-1]>=0)
							dp_B[abs(j)-1][i] = (dp_A[j-taste[i-1]][i-1] + dp_A[j+taste[i-1]][i-1])%MOD;
					}
					if(abs(j-taste[i-1])>sum && abs(j+taste[i-1])<=sum)
					{
						if(j-taste[i-1]<0 && j+taste[i-1]<0)
							dp_B[abs(j)-1][i] = (0 + dp_B[abs(j+taste[i-1])-1][i-1])%MOD; 
						if(j-taste[i-1]>=0 && j+taste[i-1]<0)
							dp_B[abs(j)-1][i] = (0 + dp_B[abs(j+taste[i-1])-1][i-1])%MOD; 
						if(j-taste[i-1]<0 && j+taste[i-1]>=0)
							dp_B[abs(j)-1][i] = (0 + dp_A[j+taste[i-1]][i-1])%MOD; 
						if(j-taste[i-1]>=0 && j+taste[i-1]>=0)
							dp_B[abs(j)-1][i] = (0 + dp_A[j+taste[i-1]][i-1])%MOD;
					}
					if(abs(j-taste[i-1])<=sum && abs(j+taste[i-1])>sum)
					{
						if(j-taste[i-1]<0 && j+taste[i-1]<0)
							dp_B[abs(j)-1][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + 0)%MOD; 
						if(j-taste[i-1]>=0 && j+taste[i-1]<0)
							dp_B[abs(j)-1][i] = (dp_A[j-taste[i-1]][i-1] + 0)%MOD; 
						if(j-taste[i-1]<0 && j+taste[i-1]>=0)
							dp_B[abs(j)-1][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + 0)%MOD; 
						if(j-taste[i-1]>=0 && j+taste[i-1]>=0)
							dp_B[abs(j)-1][i] = (dp_A[j-taste[i-1]][i-1] + 0)%MOD;
					}
					if(abs(j-taste[i-1])>sum && abs(j+taste[i-1])>sum)
					{
						dp_B[abs(j)-1][i] = 0;
					}	
				}
				else
				{
					if(abs(j-taste[i-1])<=sum && abs(j+taste[i-1])<=sum)
					{
						if(j-taste[i-1]>=0 && j+taste[i-1]>=0)
							dp_A[j][i] = (dp_A[j-taste[i-1]][i-1] + dp_A[j+taste[i-1]][i-1])%MOD;
						if(j-taste[i-1]<0 && j+taste[i-1]>=0)
							dp_A[j][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + dp_A[j+taste[i-1]][i-1])%MOD;
						if(j-taste[i-1]>=0 && j+taste[i-1]<0)
							dp_A[j][i] = (dp_A[j-taste[i-1]][i-1] + dp_B[abs(j+taste[i-1])-1][i-1])%MOD;
						if(j-taste[i-1]<0 && j+taste[i-1]<0)
							dp_A[j][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + dp_B[abs(j+taste[i-1])-1][i-1])%MOD;
					}

					if(abs(j-taste[i-1])>sum && abs(j+taste[i-1])<=sum)
					{
						if(j-taste[i-1]>=0 && j+taste[i-1]>=0)
							dp_A[j][i] = (0 + dp_A[j+taste[i-1]][i-1])%MOD;
						if(j-taste[i-1]<0 && j+taste[i-1]>=0)
							dp_A[j][i] = (0 + dp_A[j+taste[i-1]][i-1])%MOD;
						if(j-taste[i-1]>=0 && j+taste[i-1]<0)
							dp_A[j][i] = (0 + dp_B[abs(j+taste[i-1])-1][i-1])%MOD;
						if(j-taste[i-1]<0 && j+taste[i-1]<0)
							dp_A[j][i] = (0 + dp_B[abs(j+taste[i-1])-1][i-1])%MOD;
					}
					if(abs(j-taste[i-1])<=sum && abs(j+taste[i-1])>sum)
					{
						if(j-taste[i-1]>=0 && j+taste[i-1]>=0)
							dp_A[j][i] = (dp_A[j-taste[i-1]][i-1] + 0)%MOD;
						if(j-taste[i-1]<0 && j+taste[i-1]>=0)
							dp_A[j][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + 0)%MOD;
						if(j-taste[i-1]>=0 && j+taste[i-1]<0)
							dp_A[j][i] = (dp_A[j-taste[i-1]][i-1] + 0)%MOD;
						if(j-taste[i-1]<0 && j+taste[i-1]<0)
							dp_A[j][i] = (dp_B[abs(j-taste[i-1])-1][i-1] + 0)%MOD;
					}
					if(abs(j-taste[i-1])>sum && abs(j+taste[i-1])>sum)
					{
						dp_A[j][i] = 0;
					}
				}
			}
		}

		ll r=0;

		for(ll t = -sum; t<=sum; t++)
		{
			if(t<0)
				r += abs(t)*dp_B[abs(t)-1][n];
			else
				r += abs(t)*dp_A[t][n];
		}
		printf("%lld\n", r%MOD);

		delete dp_A;
		delete dp_B;
	}
	return 0;
}