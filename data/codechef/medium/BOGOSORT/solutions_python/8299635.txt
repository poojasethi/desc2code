def gcd(a, b):

    if(b==0):
        return a
    else:
        return gcd(b, a%b)

class Rational:
    num = 0
    den = 1
    def __init__(self, a, b=1):
        g = gcd(a,b)
        self.num = a/g
        self.den = b/g
    
    def __str__(self):
        if self.den==1:
            return str(self.num)
        else:
            return "%d/%d" %(self.num, self.den)
    
    def add(self, b):
        numm = self.num * b.den + self.den * b.num
        denn = self.den * b.den
        return Rational(numm, denn)

    def mult(self, b):
        return Rational(self.num*b.num, self.den*b.den)
    
    def sub(self, b):
        return self.add(b.mult(Rational(-1)))

    def div(self, b):
        return Rational(self.num*b.den, self.den*b.num)

m = 1
factorial = []
factorial.append(1)
for i in range(1, 200):
    m = m*i
    factorial.append(m)

def q(n):
    if(n>=2):
        return factorial[n-2]*(n-2)*(n-2) + factorial[n-1];
    else:
        return 0

def p(k,n):
    return Rational(q(n-k)*(k+1), factorial[n])

E_dp = [Rational(0)]*200

def E(n):
    if n<=1:
        return Rational(0)
    else:
        if E_dp[n].num > 0:
            return E_dp[n]
        else:
            result = Rational(1)
            for i in range(0,n):
                result = result.add(E(i).mult(p(n-i, n)))
            div = Rational(1)
            div = div.sub(p(0,n))

            result = result.div(div)

            E_dp[n] = result
            
            return result
t = input()
for i in range(t):
    n = input()
    print str(E(n))