#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;
struct point{
    int x,y;
    point(int x, int y){
        this->x = x;
        this->y = y;
    }
    point operator-(const point &p) const{
        return point(x-p.x,y-p.y);
    }
    long long operator*(const point &p) const{
        return x*p.y-y*p.x;
    }
    int sqlength(){
        return x*x+y*y;
    }
};
bool same_side_of(point line1, point line2, point a, point b){
    return ((line2-line1)*(a-line1))*((line2-line1)*(b-line1)) > 0;
}
bool not_intersect(point line1a, point line1b, point line2a, point line2b){
    return same_side_of(line1a, line1b, line2a, line2b) || same_side_of(line2a, line2b, line1a, line1b);
}
int main(){
    int t; scanf("%d", &t);
    while(t--){
        int n; scanf("%d", &n);
        vector<point> points;
        for(int i = 0; i < n; ++i){
            int x,y; scanf("%d%d", &x, &y);
            points.push_back(point(x,y));
        }
        
        //random_shuffle(points.begin(), points.end());
        int longest = 0;
        if(n>4){
            for(int i = 0; i < n; ++i){
                for(int j = 0; j < i; ++j){
                    longest = max(longest, (points[i]-points[j]).sqlength()); 

                    /*bool found = false;
                      for(int a = 0; a < n && !found; ++a){
                      if(a == i || a == j)
                      continue;
                      for(int b = 0; b < a; ++b){
                      if(b == i || b == j)
                      continue;
                      if(not_intersect(points[i], points[j], points[a], points[b])){
                      found = true;
                      longest = (points[i]-points[j]).sqlength();
                      break;
                      }
                      }
                      }*/
                }
            }
        }else{
            for(int i = 0; i < 4; ++i){
                for(int j = 0; j < i; ++j){
                    for(int k = 0; k < 4; ++k){
                        if(k == i || k == j)
                            continue;
                        for(int l = 0; l < k; ++l){
                            if(l == i || l == j)
                                continue;
                            if(not_intersect(points[i], points[j], points[k], points[l])){
                                longest = max(longest, (points[i]-points[j]).sqlength());
                            }
                        }
                    }
                }
            }
        }
        printf("%.6lf\n", sqrt((double)longest));
    }
    return 0;
}
