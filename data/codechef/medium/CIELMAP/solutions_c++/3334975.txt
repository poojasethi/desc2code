#include <cstdio>
#include <cmath>
#include <iostream>
#include <algorithm>
using namespace std;

int x[1005], y[1005];

/**
 * cross product
 */
int outer(int x1, int y1, int x2, int y2) {
    return x1*y2-x2*y1;
}

/**
 * this checks whether points are opposite or not
 * that is why set of diagonal are given
 */
bool iscross(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
    int o1, o2;
    o1 = outer(x2-x1, y2-y1, x3-x1, y3-y1);
    o2 = outer(x2-x1, y2-y1, x4-x1, y4-y1);
    if( (o1<0 && o2>0) || (o1>0 && o2<0) ) return false;
    o1 = outer(x4-x3, y4-y3, x1-x3, y1-y3);
    o2 = outer(x4-x3, y4-y3, x2-x3, y2-y3);
    if( (o1<0 && o2>0) || (o1>0 && o2<0) ) return false;
    return true;
}

int dist(int dx, int dy) {
    return dx*dx+dy*dy;
}

int main() {
    int t, n, k, res;
    scanf("%d",&t);
    while(t--) {
        scanf("%d",&n);
        for(int i=0;i<n;++i) scanf("%d%d",x+i,y+i);
        res = 0;
        if(n==4) {
            int seq[4]={0,1,2,3};
            do {
                if( iscross(x[seq[0]],y[seq[0]],
                            x[seq[2]],y[seq[2]],
                            x[seq[1]],y[seq[1]],
                            x[seq[3]],y[seq[3]])) continue;
                for(int j=0;j<4;++j) {
                    k = dist(x[seq[j]]-x[seq[(j+1)%4]],
                             y[seq[j]]-y[seq[(j+1)%4]]);
                    if(res < k) res = k;
                }
            } while(next_permutation(seq,seq+n));
        } else {
            for(int i=0;i<n;++i) {
                for(int j=i+1;j<n;++j) {
                    k = dist(x[i]-x[j],y[i]-y[j]);
                    if(res<k) res = k;
                }
            }
        }
        printf("%.10f\n", sqrt(res));
    }
    return 0;
}
