#include<stdio.h>
#include<string.h>
#include<math.h>

using namespace std;

struct Point{
    int x,y;
};

bool orientation(Point x1,Point x2,Point x3)
{
    int temp=(x3.y-x2.y)*(x2.x-x1.x) - (x2.y-x1.y)*(x3.x-x2.x);
    if(temp > 0) // counter clock wise
        return true;
    else        // clock wise
        return false;
}

double euclid(Point x1,Point x2)
{
    double temp=(x1.x-x2.x) * (x1.x-x2.x) + (x1.y-x2.y) * (x1.y-x2.y);
    return sqrt(temp);
}

double solve1(Point points[])
{
    int l=0,r=0,l1=-1,r1=-1;
    double maxi=0.0;
    for(int i=0;i<3;i++)
    {
        for(int j=i+1;j<4;j++)
        {
            double temp = euclid(points[i],points[j]);
            if(temp > maxi)
            {
                maxi = temp;
                l=i;r=j;
            }
        }
    }
    bool ind[4];
    memset(ind,false,sizeof ind);
    ind[l] = ind[r] = true;
    for(int i=0;i<4;i++)
    {
        if(!ind[i])
        {
            if(l1 == -1)
                l1=i;
            else
                r1=i;
        }
    }
    if( orientation( points[l] , points[r], points[l1] ) == orientation( points[l] , points[r], points[r1] ))
        return maxi;
    else
    {
        maxi=euclid(points[l],points[l1]);
        double temp1=euclid(points[l],points[r1]);
        if(temp1 > maxi)
            maxi=temp1;
        temp1=euclid(points[r],points[l1]);
        if(temp1 > maxi)
            maxi=temp1;
        temp1=euclid(points[r],points[r1]);
        if(temp1 > maxi)
            maxi=temp1;
        return maxi;
    }
}

double solve2(Point points[],int n)
{
    double maxi=0.0;
    for(int i=0;i < n-1;i++)
    {
        for(int j = i+1 ; j < n; j++)
        {
            double temp1=euclid(points[i],points[j]);
            if(maxi < temp1)
                maxi = temp1;
        }
    }
    return maxi;
}


int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        Point points[n];
        for(int i=0;i<n;i++)
            scanf("%d%d",&points[i].x,&points[i].y);
        if(n==4)
            printf("%lf\n",solve1(points));
        else
            printf("%lf\n",solve2(points,n));

    }
    return 0;
}
