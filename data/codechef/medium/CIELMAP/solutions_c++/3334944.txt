#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<algorithm>

int outer(int x1, int y1, int x2, int y2){
  return x1*y2 - x2*y1;
}

int iscross(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4){
  int o1, o2;
  o1 = outer(x2-x1, y2-y1, x3-x1, y3-y1);
  o2 = outer(x2-x1, y2-y1, x4-x1, y4-y1);
  if( (o1 < 0 && o2 > 0) || (o1 > 0 && o2 < 0) ) return 0;
  o1 = outer(x4-x3, y4-y3, x1-x3, y1-y3);
  o2 = outer(x4-x3, y4-y3, x2-x3, y2-y3);
  if( (o1 < 0 && o2 > 0) || (o1 > 0 && o2 < 0) ) return 0;
  return 1;
}

int dist(int dx, int dy){
  return dx*dx + dy*dy;
}

int main(){
  int i,j,k;
  int T, n, X[1000], Y[1000];
  int d[4];
  int res;
  scanf("%d",&T);
  while(T--){
    scanf("%d",&n);
    for(int i=0;i<n;++i) scanf("%d%d",X+i,Y+i);

    res = 0;
    if(n==4){
      for(int i=0;i<n;++i) d[i] = i;
      do{ /* btute-force (check every tetragons = every permutations of points) */
        if( iscross(X[d[0]], Y[d[0]], X[d[2]], Y[d[2]], X[d[1]], Y[d[1]], X[d[3]], Y[d[3]]) ) continue;
        for(int i=0;i<n;++i) {
          k = dist(X[d[i]]-X[d[(i+1)%4]], Y[d[i]]-Y[d[(i+1)%4]]);
          if(res < k) res = k;
        }
      }while(std::next_permutation(d,d+n)); /* intNextPermutation is the same as next_permutation(d+1, d+N) in C++ */
    } else { /* N >= 5 */
      for(int i=0;i<n;++i) {
        for(int j=i+1;j<n;++j) {
            k = dist(X[i]-X[j], Y[i]-Y[j]);
            if(res < k) res = k;
        }
      }
    }

    printf("%.10f\n", sqrt(res));
  }

  return 0;
}
