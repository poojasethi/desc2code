#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <math.h>
using namespace std;
const double eps=1e-9;
int X[2],Y[2];
bool f(pair <int ,int > x)
{
	if(1.0*(x.first-X[0])*(Y[1]-Y[0])/(X[1]-X[0])+Y[0] > x.second+eps)
		return 1;
	else
		return 0;
}
bool area(pair <int ,int > x,pair <int ,int > y,pair <int ,int > z)
{
	if(x.first*(y.second-z.second)-y.first*(x.second-z.second)+z.first*(x.second-y.second)>0)
		return 1;
	else
		return 0;
}
int main()
{
	//freopen("1.txt","r",stdin);
	int t;
	cin>>t;
	for(int i=0;i<t;i++)
	{
		int n;
		cin>>n;
		vector <pair <int ,int > > v(n),d[2],ans;
		for(int j=0;j<n;j++)
			cin>>v[j].first>>v[j].second;
		sort(v.begin(),v.end());
		X[1]=v.back().first; Y[1]=v.back().second;
		X[0]=v[0].first; Y[0]=v[0].second;
		d[0].push_back(make_pair(X[0],Y[0]));
		d[1].push_back(make_pair(X[0],Y[0]));
		for(int j=1;j<n-1;j++)
			if(f(v[j]))
				d[0].push_back(v[j]);
			else
				d[1].push_back(v[j]);
		d[0].push_back(make_pair(X[1],Y[1]));
		d[1].push_back(make_pair(X[1],Y[1]));
		stack <pair <int ,int > > s;
		s.push(d[0][0]);
		s.push(d[0][1]);
		for(int j=2;j<d[0].size();j++)
		{
			pair <int ,int > a=s.top();
			s.pop();
			if(area(s.top(),a,d[0][j]))
			{
				s.push(a);
				s.push(d[0][j]);
			}
			else
				s.push(d[0][j]);
		}
		while(!s.empty())
		{
			ans.push_back(s.top());
			s.pop();
		}
		s.push(d[1].back());
		s.push(d[1][d[1].size()-2]);
		for(int j=d[1].size()-3;j>=0;j--)
		{
			pair <int ,int > a=s.top();
			s.pop();
			if(area(s.top(),a,d[1][j]))
			{
				s.push(a);
				s.push(d[1][j]);
			}
			else
				s.push(d[1][j]);
		}
		s.pop();
		while(!s.empty())
		{
			ans.push_back(s.top());
			s.pop();
		}
		int mx=0;
		if(n==4)
			for(int j=1;j<ans.size();j++)
			{
				int a=(ans[j].first-ans[j-1].first)*(ans[j].first-ans[j-1].first)+(ans[j].second-ans[j-1].second)*(ans[j].second-ans[j-1].second);
				if(a > mx)
					mx=a;
			}
		else
		{
			ans.pop_back();
			for(int j=0;j<ans.size();j++)
				for(int z=j+1;z<ans.size();z++)
				{
					int a=(ans[j].first-ans[z].first)*(ans[j].first-ans[z].first)+(ans[j].second-ans[z].second)*(ans[j].second-ans[z].second);
					if(a > mx)
						mx=a;
				}
		}
		printf("%.9lf\n",sqrt((double)mx));
	}
}	