/* CPP Tempelate
 * @author Devashish Tyagi
 */

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#include <list>

#define s(a) scanf("%d",&a)
#define ss(a,b) scanf("%d %d",&a,&b)
#define p(a) printf("%d\n",a)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pi pair<int,int>
#define vi vector<int>

#define PB push_back
#define MP make_pair
#define sz(a) (int)(a).size()

#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define CLEAR(a) memset((a),0,sizeof(a))

#define INF 100000000
#define PI 2*acos(0.0)

using namespace std;
typedef long long int LL;

string convertInt(int number)
{
   stringstream ss;//create a stringstream
   ss << number;//add number to the stream
   return ss.str();//return a string with the contents of the stream
}

double dist(pi & a, pi & b){
    return sqrt(pow(a.first-b.first,2)+pow(a.second-b.second,2));
}

int isLeft(pi & a, pi & b, pi & c){
    if (((b.first-a.first)*(c.second-a.second) - (b.second-a.second)*(c.first-a.first))>0)
        return 0;
    else
        return 1;
}

bool tetrahedronincorrect(pi & a, pi & b, pi & c, pi & d){
    if ((isLeft(a,b,c) == isLeft(a,b,d)) && (isLeft(a,d,c) == isLeft(a,d,b)))
        return true;
    return false;
}

int main(void){
    int t,n;
    s(t);
    while(t--){
        s(n);
        vector< pi > points(n);
        for(int i=0; i<n; i++){
            int a,b;
            ss(a,b);
            points[i] = MP(a,b);
        }
        double maxlength = 0;
        if (n == 4){
            for(int i =0; i<n; i++){
                for(int j=0; j<n; j++){
                    for(int k=0; k<n; k++){
                        for(int l=0; l<n; l++){
                            if (i!=j && i!=k && i!=l && j!=k && j!=l && k!=l){ 
                                if (tetrahedronincorrect(points[i],points[j],points[k],points[l])){
                                    maxlength = max(maxlength, dist(points[i],points[j]));
                                    maxlength = max(maxlength, dist(points[j],points[k]));
                                    maxlength = max(maxlength, dist(points[k],points[l]));
                                    maxlength = max(maxlength, dist(points[l],points[i]));
                                }
                            }
                        }
                    }
                }
            }
        }
        else{
            for(int i=0; i<n; i++){
                for(int j=i+1; j<n; j++){
                    double distance = dist(points[i],points[j]);
                    maxlength = max(maxlength, distance);
                }
            }
        }
        printf("%lf\n",maxlength);
    }
}


