
/***** Author : Akshay *****/
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>

#include <cmath>
#include <cstdio>
#include <queue>
#include <list>
#include <stack>
#include <utility>
#include <numeric>
#include <map>
#include <cctype>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <cassert>
#include <iomanip>
#include <set>
#include <fstream>

using namespace std;

#define REP(a,b) for(int a=0;a<b;a++)
#define FOR(a,b,c) for(int a=b;a<c;a++)
#define FORD(a,b,c) for(int a=b;a>=c;a--)


#define LEN(x) ((int)x.length())
#define SZ(x) ((int)x.size())
#define ALL(x) x.begin(), x.end()
#define MP(x,y) make_pair(x,y)
#define PB(x) push_back(x)
#define INF 1000000000
#define MOD 10000007
#define toString(x) #x
#define add(a,b) toString(a##b)
//#define __ONLINE__JUDGE__ 1


typedef long long ll;
typedef pair<int,int> ii;
typedef pair<int, ii> Lii;
typedef vector<int> VI;
typedef vector<bool> VB;
typedef vector<string> VS;

int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

/* Function for string split . If string starts with de-lim then call split(s.substr(1,s.length()),DELIM);
 *    else call split(s,DELIM);*/
std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {
	std::stringstream ss(s);
	std::string item;
	while(std::getline(ss, item, delim)) {
		elems.push_back(item);
	}
	return elems;
}


std::vector<std::string> split(const std::string &s, char delim) 
{
	std::vector<std::string> elems;
	return split(s, delim, elems);
}
int tc,n,X[1004],Y[1004],best;
int tojo( int x1,int y1,int x2,int y2)
{
	return ((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
}
int mojo(int x1,int y1,int x2,int y2)
{
	return x1*y2-x2*y1;
}
int gogo( int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4)
{
	int d1 = mojo(x2-x1,y2-y1,x3-x1,y3-y1);
	int d2 = mojo(x2-x1,y2-y1,x4-x1,y4-y1);

	if( (long long)d1*d2 < 0 ) return false;

	int d3 = mojo(x4-x3,y4-y3,x1-x3,y1-y3);
	int d4 = mojo(x4-x3,y4-y3,x2-x3,y2-y3);
	
	if( (long long)d3*d4 < 0 ) return false;

	return true;
}
int main()
{
	scanf("%d",&tc);
	while( tc-- )
	{
		scanf("%d",&n);
		best=0;
		for(int i=0;i<n;i++) scanf("%d%d",&X[i],&Y[i]);
		if( n==4 )
		{
			vector<int> D(4,0);
			for(int i=0;i<4;i++) D[i]=i;
			do
			{
				bool res = gogo(X[D[0]],Y[D[0]],X[D[2]],Y[D[2]],X[D[1]],Y[D[1]],X[D[3]],Y[D[3]]);
				if( res == false )
				{
					for(int j=0;j<4;j++) best = max ( best , tojo(X[D[j]],Y[D[j]],X[D[(j+1)%4]],Y[D[(j+1)%4]]));
				}
			}while(next_permutation(D.begin(),D.end()));
		}
		else
		{
			for(int i=0;i<n;i++) for(int j=i+1;j<n;j++) best = max( best , tojo(X[i],Y[i],X[j],Y[j]));
		}
		
		printf("%.6f\n", (double) sqrt(best));
	}
	return 0;
}
