/*
ID: abhishe38
PROG:
LANG: C++
*/

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

#define PB push_back
#define MP make_pair
#define MAXIMUM 18446744073709551615ULL
#define MAX 1010

using namespace std;

typedef long long int LL;
typedef unsigned long long int ULL;
typedef unsigned int UI;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector< pair<int,int> > VPI;

VPI c;

int direction (PII a, PII b, PII c)
{
    //x1*y2
    int t1 = (c.first-a.first)*(b.second-a.second);
    //x2*y1
    int t2 = (b.first-a.first)*(c.second-a.second);
return (t1-t2);                 
}

bool intersect(PII a, PII b, PII c, PII d)
{
     int d1 = direction(a,b,c);
     int d2 = direction(a,b,d);
     int d3 = direction(c,d,a);
     int d4 = direction(c,d,b);
     if (((d1>0)&&(d2<0) || (d1<0)&&(d2>0)) && (((d3<0) && (d4>0)) || ((d3>0) && (d4<0))))
     {
         return true;               
     }
return false;
}

int Distance(PII a, PII b)
{
    int xd = abs(a.first-b.first);
    int yd = abs(a.second-b.second);

    return (xd*xd + yd*yd);    
}
double solve()
{
    int ans = -1;
    for (int i=0; i<4; i++)
    {
        for (int j=0; j<4; j++)
        {
            for (int k=0; k<4; k++)
            {
                for (int l=0; l<4; l++)
                {
                    if (i!=j && i!=k && i!=l && j!=k && j!=l && k!=l)
                    {
                       //runs 4! times
                      if (!intersect(c[i],c[j],c[k],c[l]))
                      {
                         ans = max(ans, Distance(c[i],c[j]) );
                         ans = max(ans, Distance(c[k],c[l]) );              
                      }                                     
                    }
                }    
            }    
        }
    }
    return (double)sqrt(ans);    
}

double maxDist (int n)
{
       int dist = -1;
       for (int i=0; i<n-1; i++)
       {
           for (int j=i+1; j<n; j++)    
           {
               int x2 = abs(c[i].first-c[j].first);
               int y2 = abs(c[i].second-c[j].second);
               dist = max(dist,(x2*x2 + y2*y2)); 
           }
       }
return (double)sqrt(dist);;
}

int main()
{
    int t,n,x,y;
    scanf("%d",&t);
    while (t--)
    {
          c.clear();
          scanf("%d",&n);
          for (int i=0; i<n; i++)
          {
              scanf("%d%d",&x,&y);
              c.PB(MP(x,y));
          }                
          cout.precision(11);
          if (n==4)
          {
             cout<<solve()<<"\n";
          }
          else
          {
              cout<<maxDist(n)<<"\n";
          }
    }
   //system("pause");
   return 0;
}
