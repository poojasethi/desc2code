#include <iostream>
#include <math.h>
#include <iomanip>

 
#define INF 10000000

using namespace std;



// Driver program to test methods of graph class
int main()
{
    int t,n,a,b,w,i,j;
    cin>>t;
    double max,dist,m,c;
    pair <double,double> x[1001];



    // Create a graph given in the above diagram
    while(t--){
      cin>>n;
      for(i=0;i<n;++i)
      {
       cin>>x[i].first>>x[i].second;
      }
    max=0.0;
    if(n>4){
      for(i=0;i<n;++i){
        for(j=i+1;j<n;++j){
          dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
          if(max<dist)
            max=dist;
        }
      }
  }
  else{

       max=0.0;
      for(i=0;i<4;i++)
        for(j=i+1;j<4;j++){
            if(x[i].first==x[j].first){
            if(i==0 && j==1){
                if((c-x[2].first)*(c-x[3].first)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==0 && j==2){
                if((c-x[1].first)*(c-x[3].first)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==0 && j==3){
                if((c-x[2].first)*(c-x[1].first)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==1 && j==2){
                if((c-x[0].first)*(c-x[3].first)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==1 && j==3){
                if((c-x[0].first)*(c-x[2].first)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==2 && j==3){
                if((c-x[1].first)*(c-x[0].first)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
    
                continue;
            }
             m=(x[i].second-x[j].second)/(x[i].first-x[j].first);
             c=x[i].second-m*x[i].first;
             if(i==0 && j==1){
                if((m*x[2].first+c-x[2].second)*(m*x[3].first+c-x[3].second)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==0 && j==2){
                if((m*x[1].first+c-x[1].second)*(m*x[3].first+c-x[3].second)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==0 && j==3){
                if((m*x[2].first+c-x[2].second)*(m*x[1].first+c-x[1].second)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==1 && j==2){
                if((m*x[0].first+c-x[0].second)*(m*x[3].first+c-x[3].second)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==1 && j==3){
                if((m*x[2].first+c-x[2].second)*(m*x[0].first+c-x[0].second)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             if(i==2 && j==3){
                if((m*x[0].first+c-x[0].second)*(m*x[1].first+c-x[1].second)>0)
                {
                 dist=sqrt((x[i].first-x[j].first)*(x[i].first-x[j].first)+(x[i].second-x[j].second)*(x[i].second-x[j].second));
                 if(max<dist)
                    max=dist;
                }}
             }

        }
     



   cout<<fixed<<setprecision(10)<<max<<endl;

    }
 
    //cout << "Following is Breadth First Traversal (starting from vertex 2) \n";
    //g.BFS(2);
 
    return 0;
}