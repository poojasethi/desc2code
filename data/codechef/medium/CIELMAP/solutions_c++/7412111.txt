#include<bits/stdc++.h>
using namespace std;

const int N=1234;

struct Point {
    double x, y;
    Point(double x=0, double y=0) : x(x), y(y) {}
    Point operator-(Point b) {
        return Point(x-b.x, y-b.y);
    }
    double operator^(Point b) {
        return (x*b.y-y*b.x);
    }
}p[N];

int links[N];

//p-q/r then 2,  p-q\r then 1,  p-q-r then 0
int orientation(Point p, Point q, Point r) {
    double det=(q-p)^(r-q);
    if(det==0) {
        return 0;
    } else {
        return (det>0) ?2:1;
    }
}

double dist(Point a, Point b) {
    return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);
}

double convexHull(int n) {
    memset(links, -1, sizeof(links));
    int minidx=0;
    for(int i=0;i<n;i++) {  //find leftmost point
        if(p[minidx].x>p[i].x) {
            minidx=i;
        }
    }
    double ans=0;
    int prev=minidx, next; //start from leftmost point and keep moving counterclock wise until reach at start point
    do {
        next=(prev+1)%n;
        for(int i=0;i<n;i++) {
            if(orientation(p[prev], p[i], p[next])==2) {
                next=i;
            }
        }
        ans=max(ans, sqrt(dist(p[prev], p[next])));
        links[prev]=next;
        prev=next;
    } while(prev!=minidx);
    return ans;
}

int main() {
    int test;
    scanf("%d", &test);
    while(test--) {
        int n;
        scanf("%d", &n);
        for(int i=0;i<n;i++) {
            scanf("%lf %lf", &p[i].x, &p[i].y);
        }
        if(n==4) {
            printf("%lf\n", convexHull(n));
        } else {
            double ans=0;
            for(int i=0;i<n;i++) {
                for(int j=i+1;j<n;j++) {
                    ans=max(ans, sqrt(dist(p[i], p[j])));
                }
            }
            printf("%lf\n", ans);
        }
    }
}


