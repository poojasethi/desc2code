#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;

const double eps = 1e-7;

int x[1111], y[1111];
double dist;

bool valid(int a, int b, int c, int d) {
    int x1 = (x[b]-x[a])*(y[c]-y[a])-(y[b]-y[a])*(x[c]-x[a]);
    int x2 = (x[b]-x[a])*(y[d]-y[a])-(y[b]-y[a])*(x[d]-x[a]);
    if (x1*x2<0) return false;
    return true;
    double k1 = (double)(x[a]-x[b])/(y[a]-y[b]);
    double k2 = (double)(x[a]-x[c])/(y[a]-y[c]);
    double k3 = (double)(x[a]-x[d])/(y[a]-y[d]);
    if (k2<k1 && k3<k1)
        return true;
    if (k2>k1 && k3>k1)
        return true;
    return false;
}

int main()
{
    //freopen("in.txt", "r", stdin);
    int t, n;
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &n);
        for (int i=0; i<n; i++)
            scanf("%d %d", &x[i], &y[i]);
        dist = 0;
        if (n==4) {
            /*
            for (int i=0; i<n; i++)
                for (int j=0; j<n; j++) if (j!=i)
                    for (int k=0; k<n; k++) if (j!=k && i!=k)
                        for (int p=0; p<n; p++) if (j!=p && k!=p && i!=p)
                        {
                            double temp = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
                            if (valid(i, j, k, p))
                                dist = max(dist, temp);
                        }
                        */
            for (int i = 0; i < 4; i++)
					for (int j = i + 1; j < 4; j++) {
						int a = y[i] - y[j];
						int b = x[j] - x[i];
						int c = - (x[i] * a + y[i] * b);
						bool posSide = false, negSide = false;
						for (int k = 0; k < 4; k++) {
							int side = a * x[k] + b * y[k] + c;
							posSide |= side > 0;
							negSide |= side < 0;
						}
						if (!posSide || !negSide) {
						    double temp = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
							dist = max(dist, temp);
						}
					}
        } else {
            for (int i=0; i<n; i++)
                for (int j=i+1; j<n; j++) {
                    dist = max(dist, sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])));
                }
        }
        printf("%.10lf\n", dist);
    }
    return 0;
}
