#include<cstdio>
#include<algorithm>
#include<vector>
#include<cmath>
#define MAX 1000000
using namespace std;

int powers[]={1,2,4,6,10,12,16,18,22,28,30,36};
int num_of_primes;
vector<long long int> primes,check;
bool seg[1000010],p[MAX];
int get_count(long long int a,long long int b)
{
    long long int i, j;
    int ct;
    for (i = 0; i < b - a + 1; i++)
        seg[i] = true;

    j = 0;
    while (j < num_of_primes)
    {
        if (a % primes[j] == 0)
            i = a;
        else
            i = a + primes[j] - a % primes[j];

        if (i == primes[j])
            i += primes[j];

        while (i <= b)
        {
            seg[i - a] = false;
            i +=  primes[j];
        }
        j++;
    }

    ct = 0;
    for (i = 0; i < b - a + 1; i++)
    {
        if (seg[i] == true)
        {
            ct++;
            //printf("%d\n", a + i);
        }
    }
    //printf("count = %d\n", ct);
    return ct;
}


void sieve()
{
    int i,j;
    for (i = 0; i < MAX; i++)
        p[i] = false;

    for(i=2;i<=1000;i++)
    {
        if(!p[i])
        {
            for(j=i+i;j<MAX;j+=i)
                p[j]=true;
        }
    }
}

long long int mul(int a,int b)
{
    return pow(a,b);
}

int main()
{
    sieve();
    long long int a,b,x,t,i,j,n,lo,hi,c;

    for(i=2;i<MAX;i++)
    {
        if(!p[i])
            primes.push_back(i);
    }
    num_of_primes=primes.size();
    //printf("num = %d\n", num_of_primes);

    for(i=0;i<num_of_primes;i++)
    {
        x = 12 / log10(primes[i]);
        j = 0;
        while(j<12 && powers[j]<=x)
        {
            if(!j)
                check.push_back(primes[i]);
            else
                check.push_back(mul(primes[i],powers[j]));
            j++;
        }
    }
    //printf("check = %d\n", check.size());
    sort(check.begin(),check.end());
    scanf("%lld",&t);
    while(t--)
    {
        scanf("%lld%lld",&a,&b);
        //a = (a == 1)?2:a;
        lo = lower_bound(check.begin(),check.end(),a) - check.begin();
        hi = upper_bound(check.begin(),check.end(),b) - check.begin();
        c = hi - lo;
        if(b>MAX)
        {
            if(a<MAX)
            {
                a = MAX;
            }
            c +=  get_count(a,b);
        }
        printf("%lld\n", c);
    }
    return 0;
}
