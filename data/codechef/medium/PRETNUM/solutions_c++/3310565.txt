#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#define lli long long
#define MAX 1000000
#define LMT 1000
using namespace std;

bool seg[1000005];
lli p = 0;
lli P[1000005];
bool A[1000005];

void sieve()
{
    for(lli i=3;i<=LMT;i+=2)
    {
        if(!A[(i-3)>>1])
        {
            for(lli j=i*i;j<=MAX;j+=2*i)
                A[(j-3)>>1]=1;
        }
    }
    P[p++] = 2;
    for(lli i=0;i<=MAX/2;i++) {
        if(!A[i]) P[p++]=2*i+3;
    }
    return;
}

bool if_prime(lli x)
{
     if ( x == 2 ) return true;
     if ( x-3 < 0 ) return false;
     if ( (x-3)%2 == 0 ) {
          if ( A[(x-3)/2] ) return false;
          return true;
     }
     return false;
}

void segmented_sieve(lli a, lli b)
{
         memset(seg,0,sizeof(seg));
         for(lli i=0;i<p && P[i]*P[i]<=b;i++)
         {
             lli tmp=a/P[i];
             tmp=tmp*P[i];
            for(lli in=tmp;in<=b;in+=P[i])
            {
                if(in-a<0) continue;
                if(P[i]==in) continue;
                lli in1=in-a;
                seg[in1]=1;
            }
        }
     	for ( lli i = 0; i < p; i++ ) {
		lli tmp = 1;
		lli freq = 0;
		for ( lli in = tmp; in <= b; in*=P[i] ) {
			if ( in-a < 0 ) {
				freq++;
				continue;
			}
			if ( !seg[in-a] ) {
				freq++;
				continue;
			}
			if ( if_prime(freq+1) ) seg[in-a] = 0;
			freq++;
		}
	}
        return;
}

lli fast_pow(lli m, lli n)
{
	lli res = 1;
	while ( n > 0 ) {
		if ( n&1 ) res = res*m;
		m = (m*m);
		n = n/2;	
	}
	return res;
}



int main()
{
	int t,cnt;
	lli a,b;
	sieve();
//	cout << if_prime(6) << endl;
	cin >> t;
	while ( t-- ) {
		cnt = 0;
		cin >> a >> b;
		segmented_sieve(a,b);	;
		for ( int i = 0; i <= b-a; i++ ) {
			if ( i+a == 1 ) continue;
			if ( !seg[i] ) {
				cnt++;
			//	cout << i+a << endl;
			}
		}
		cout << cnt << endl;
	}	
	return 0;
}