#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>
#include<list>
#include<complex>
#include<string>
#include<utility>
#include<numeric>
#include<iterator>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<climits>
#include<ctime>
#include<cstring>

#define ALL(c)  c.begin(), c.end()
#define TR(c, it)   for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define MAX(a, b)   ((a) > (b) ? (a) : (b))
#define gc  getchar_unlocked
#define ll long long int
#define ull unsigned long long int
#define inf INT_MAX
#define mininf INT_MIN
#define pb push_back
#define mp  make_pair
#define time   QueryPerformanceCounter
#define qp  QuadPart
#define LI LARGE_INTEGER
#define PI  3.14159265358979323846264338327950288

using namespace std;

int lim = 10001;
vector<int> temp(lim);
vector<bool> isPrime(lim);
void init()
{
    FOR(i, 0, lim)
        temp[i] = i;
    FOR(i, 2, lim)
        if(temp[i] == i)
            for(int j = 2*i; j < lim; j += i)
                temp[j] = 0;
    int k = 0;
    FOR(i, 2, lim)
        if(temp[i] != 0)
            isPrime[temp[i]] = true;
}

int main()
{
    init();
    int t;
    int *divisors = new int[1000005];
    scanf("%d", &t);
    while(t--)
    {
        ll l, r;
        scanf("%lld %lld", &l, &r);
        for(ll i = l; i <= r; i++)
            divisors[i - l] = 0;
        for(ll i = 1; i*i <= r; i++)
        {
            ll square = i*i;
            for(ll j = ((l - 1) / i + 1) * i; j <= r; j += i)
            {
                if(j < square)
                    continue;
                if(j == square)
                    divisors[j - l] += 1;
                else
                    divisors[j - l] += 2;
            }
        }
        int ans = 0;
        for(ll i = l; i <= r; i++)
            if(isPrime[divisors[i - l]])
                ans++;
        printf("%d\n", ans);
    }
    return 0;
}
