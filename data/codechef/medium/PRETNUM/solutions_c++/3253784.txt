#include<iostream>
#include<vector>
#include<algorithm>
#include<math.h>
#include<string.h>
#define VMAX 1000005
#define PMAX 1000000000000LL
using namespace std;
vector <long long> pm;
char ch;
bool isprime[VMAX];
bool betprime[VMAX];
int pcnt=0;
int primenos[VMAX];
void seiveofe()
{
    long long int i,j;
    isprime[0]=isprime[1]=true;
    for(i=2;i<VMAX;i++)
    {
        if(!isprime[i])
        {
            primenos[pcnt++]=i;
            for(j=i*i;j<VMAX;j+=i)
                  isprime[j]=true;
        }
    }
}
void primul()
{
   long long h;int j,i;
   for(i=0;i<pcnt;i++)
    { h=(long long) primenos[i]*(long long) primenos[i];
    j=2;
       while(h<=PMAX)
       {
           if(!isprime[j+1])
            pm.push_back(h);
           h*=(long long) primenos[i];
           j++;
       }
    }
    sort(pm.begin(),pm.end());
}
int mulprime(long long a,long long b)
{
    int mid,en1=0,en2=pm.size()-1,retl,retr;
    while(en1<=en2)
    {
        mid=(en1+en2)>>1;
        if(pm.at(mid)<=a)
          en1=mid+1;
        else
          en2=mid-1;
         retl=en1;
    }
    en1=0;en2=pm.size()-1;
    while(en1<=en2)
    {
        mid=(en1+en2)>>1;
        if(pm.at(mid)<=b)
          en1=mid+1;
        else
          en2=mid-1;
         retr=en1;
    }
    return retr-retl;
}

int sieveextend(long long a,long long b)
{
   long long l,r,j;int i,pp=0;
    memset(betprime,true,sizeof(betprime));
    for(i=0;i<pcnt;i++)
    {
        if(primenos[i]>b)
            break;
        l=a/primenos[i]*primenos[i];
        r=b/primenos[i]*primenos[i];
        if(l<a)
          l+=primenos[i];
        if(l==primenos[i])
          l=l<<1;
      for(j=l;j<=r;j+=primenos[i])
          betprime[j-a]=false;
    }

     for(j=0;j<=b-a;j++)
          if((betprime[j])&&(a+j>=2))
            pp++;
    return pp;
}
int main()
{
  seiveofe();
  primul();
  int n;
  long long l,r;
  cin>>n;
  while(n--)
  {
    cin>>l>>r;
    cout<<mulprime(l-1,r)+sieveextend(l,r)<<endl;
  }
}
