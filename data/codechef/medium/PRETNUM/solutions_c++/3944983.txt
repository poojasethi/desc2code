#include<bits/stdc++.h>
using namespace std;

#define MAX 10000000
#define MAXN 1000000000000LL
typedef long long int ll;

bool isprime[MAX+10];
bool mapped_ans[MAX+10];
vector<ll> primes;
vector<ll> vec; // prime^(prime-1)

void sieve()
{
    memset(isprime,true,sizeof(isprime));
    ll i,j;
    isprime[0]=false;
    isprime[1]=false;
    for(i=2;i*i<=MAX ;i++)
        if(isprime[i])
        for(j=i*i;j<=MAX;j=j+i)
            isprime[j]=false;
}

void store_primes()
{
    for(ll i=2;i<=MAX;i++)
        if(isprime[i])
            primes.push_back(i);
}

void _init()
{
    sieve();
    store_primes();
    //cout<<primes.size()<<endl;
    for(ll i=0;i<primes.size();i++)
	{
		ll A = primes[i] ;
		for(ll j=0;j<primes.size();j++ )
		{
			ll B = primes[j] ;
			ll C = (ll)pow(A,B-1) ;

			if(C>MAXN || C <= 0)
				break ;

			vec.push_back( C ) ;
		}
	} // Done :D

	sort(vec.begin(),vec.end());
}

int main()
{
    _init();

    int t;
    scanf("%d",&t);
    ll L,R;

    while(t--)
    {
        cin>>L>>R;


        vector<ll> :: iterator x,y;
        x=lower_bound(vec.begin(),vec.end(),L);
        y=upper_bound(vec.begin(),vec.end(),R);

        if(R<=1000000)
            cout<<y-x<<endl;
        else
        {
            ll diff=R-L;
            ll k;

            memset(mapped_ans,true,sizeof(mapped_ans));

            for(ll i=2; i*i<=R;  i++)
            {
                if(isprime[i])
                {
                    k=L/i; // 125/2 = 62
                    k=k*i; // 124
                    if(k<L)
                        k=k+i; // 126

                    if(k==i)
                        k+=i;

                    for(;k<=R; k+=i)
                        mapped_ans[k-L]=false;
                }
            } //

            ll ctr=0;
            for(ll i=0;i<=diff;i++)
                if(mapped_ans[i])
                    ctr++;

            ll add=y-x;
            cout<<add+ctr<<endl;

        } // else

    }

}
