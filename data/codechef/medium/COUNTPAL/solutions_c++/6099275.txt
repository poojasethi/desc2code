#include <bits/stdc++.h>
#define mod 1000000007LL
using namespace std;
typedef long long ll;

string s;
ll dp[1024];
ll P[1024][1024];

void build(){
    int n = (int)s.length();
    for (int i=0; i<n; i++){
        P[i][i] = 1;
    }

    /* L is substring length. Build the solution in bottom up manner by
       considering all substrings of length starting from 2 to n. */
    for (int L=2; L<=n; L++)
    {
        // For substring of length L, set different possible starting indexes
        for (int i=0; i<n-L+1; i++)
        {
            int j = i+L-1; // Set ending index

            // If L is 2, then we just need to compare two characters. Else
            // need to check two corner characters and value of P[i+1][j-1]
            if (L == 2)
                P[i][j] = (s[i] == s[j]);
            else
                P[i][j] = (s[i] == s[j]) && P[i+1][j-1];
        }
    }
}

ll isPalin(int l, int r){
    return P[l][r];
}

ll isPalin1(int l, int r){
    if(l>r){return 0;}
    vector<char> v,vr;
    for (int i=l; i<=r; i++){
        v.push_back(s[i]);
    }
    vr = v;
    reverse(vr.begin(), vr.end());
    for (int i=0; i<v.size(); i++){
        if (v[i]!=vr[i]){
            //cout<<"returned 0"<<endl;
            return 0LL;
        }
    }
    //cout<<"returned 1"<<endl;
    return 1LL;
}

int main(){
    #ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
    #endif // ONLINE_JUDGE
    cin>>s;
    build();
    //cout<<s<<endl;
    int n = (int)s.length();
    dp[0] = 1LL;
    for (int i=1; i<n; i++){
        for (int j=0; j<i; j++){
            dp[i] += (dp[j]*isPalin(j+1,i));
            dp[i]%=mod;
        }
        dp[i]+=isPalin(0,i);
        dp[i]%=mod;
    }
    cout<<dp[n-1]<<endl;
}
