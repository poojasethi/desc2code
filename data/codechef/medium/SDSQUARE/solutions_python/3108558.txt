## Michael Feliciano
## Code Chef November Long 2013 (Practice)
## Square Digit Squares
## http://www.codechef.com/NOV13/problems/SDSQUARE
## 12/17/13
##Objective: Find number of values in a range which meet certain conditions. Simplified by pre-computation

import math
import bisect

##Here we can check if the perfect squares being passed in only
##contains the digits 0 1 4 9 by converting them to sets and checking
##if the set representing the given number is a subset of set([0,1,4,9])
def containsDigits(inputList):
    digits = set('0149')
    perfect = [x for x in inputList if set(str(x)) <= digits]
    return perfect


##We are able to find all perfect squares in a range by finding the
##smallest and largest numbers in the range and returning the squares
##between these
def perfect_squares(mini, maxi):
    lowest = int(math.ceil(math.sqrt(mini)))
    heighest = int(math.sqrt(maxi))
    return (n**2 for n in range(lowest, heighest + 1))

def main():
    #x = perfect_squares(1,(10**10)+1)
    #results = containsDigits(x)

    results = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449L, 4019940409L, 4041144900L, 4199040000L, 4900000000L, 4900140001L, 4901400100L, 4914010000L, 4914991449L, 4941949401L, 4999904100L, 9044010000L, 9409000000L, 9409194001L, 9410940100L, 9900449001L, 9940090000L, 9994000900L, 9999400009L, 10000000000L]

    cases = int(raw_input())

    for i in range(cases):
        lo,hi = map(int,raw_input().split())
        
        #Since our list is sorted we can subtract values of bisection
        #to find number of element in the range

        #left bisection of smaller value to generate inclusisve beginning index value
        lo = bisect.bisect_left(results,lo)

        #right biisection of larger value to generate inclusive ending index value
        hi = bisect.bisect(results,hi)

        print hi - lo
        

main()
