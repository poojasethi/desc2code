#SDSQUARE
#2013-11-16
#http://discuss.codechef.com/problems/SDSQUARE

from math import sqrt

def has_perfect_digits(nb):
    perfect_digit = [0,1,4,9]
    for digit in str(nb):
        if (int(digit) in perfect_digit) == False:
            return False
    return True

def list_sdsquares(a,b):
    sdsquares = []
    for i in range (a,int(sqrt(b))+1):
        sq = i*i
        if has_perfect_digits(sq):
            sdsquares.append(sq)
    return sdsquares

def binary_search(list,value):
    low = 0
    up = len(list)
    while up - low > 1:
        mid = low + (up-low)/2
        if value < list[mid]:
            up = mid
        elif value > list[mid]:
            low = mid
        else:
            return mid
    return low

def count_sdsquares(a,b,list_sdsquares):
    index = 0
    count = 0
    while list_sdsquares[index] < a:
        index += 1
    try:
        while list_sdsquares[index] <= b:
            count += 1
            index += 1
    except IndexError:
        pass
    return count
#A little bit slow, can be improved with binary search

def count_sdsquares_bin(a,b,list_sdsquares):
    low = binary_search(list_sdsquares,a)
    up = binary_search(list_sdsquares,b)
    nb_sdsquares = up-low
    if a == list_sdsquares[low]:
        nb_sdsquares += 1
    return nb_sdsquares


list_sq = list_sdsquares(1,10**10)

t = input()
for case in range(t):
    a,b = map(int,raw_input().split())
    print count_sdsquares_bin(a,b,list_sq)
