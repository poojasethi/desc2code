'''
from collections import Counter
import string,sys
N = int(raw_input()); s = raw_input();
if N == 1: print s; sys.exit(0)
sc = Counter(s)
for i in range(N-1):
    st = raw_input(); stc = Counter(st)
    for i in list(string.ascii_lowercase):
        if sc.get(i) != None and stc.get(i) == None: sc.pop(i,None)
        elif sc.get(i) != None and stc.get(i) != None and sc.get(i) != stc.get(i): sc[i] = abs(sc.get(i) - stc.get(i))
if sc == {}: print 'no such string'; sys.exit(0)
letters = sorted(sc.keys())
print "".join(letters)
from math import sqrt
t = int(raw_input())
fromset = set('0149')
while t:
    a,b = map(int,raw_input().split())
    sa,sb,count = int(sqrt(a)),int(sqrt(b)),0
    if sa ** 2 < a: sa = sa + 1
    for i in range(sa,sb+1):
        s = i * i; st = str(s); stset = set(st) 
        if stset.issubset(fromset): count+=1 
    print count; t-=1
'''
# Second attempt :-) Previous code above...
squares = [i**2 for i in range(1,int(1e5)+1) if set(str(i**2)).issubset(set('0149'))]
def binary_search(A,left,right,key):
    while left < right:
        mid = left + ( right - left ) / 2
        if A[mid] < key: left = mid + 1
        elif A[mid] > key: right = mid
        elif A[mid] == key: return mid
    return left
t = int(raw_input())
l = len(squares)
while t:
    a,b = map(int,raw_input().split()); count = 0
    lower_limit = binary_search(squares,0,l,a)
    upper_limit = binary_search(squares,0,l,b)
    if squares[upper_limit] == b: print upper_limit - lower_limit + 1
    else: print upper_limit - lower_limit
    t-=1


