#include<iostream>

using namespace std;

#define mod 1000000007


long long int mat[60][15][15];
long long int ans[15][15];

long long int sum[15][15];

long long int vec[30];

void calc_mat_square()
{
	for(int i=1; i<60; ++i)
	{
		for(int j=0; j<15; ++j)
		{
			for(int k=0; k<15; ++k)
			{
				long long int su = 0;
				for(int t=0; t<15; ++t)
				{
					su = (su + (mat[i-1][j][t] * mat[i-1][t][k])) % mod;
				}
				mat[i][j][k] = su;
			}
		}
	}
	return ;
}

void mat_mult(long long int a[15][15], long long int b[15][15], long long int c[15][15])
{
	for(int i=0; i<15; ++i)
	{
		for(int j=0; j<15; ++j)
		{
			sum[i][j] = 0;
			for(int k=0; k<15; ++k)
			{
				sum[i][j] = (sum[i][j] + a[i][k] * b[k][j]) % mod;
			}
		}
	}
	for(int i=0; i<15; ++i)
		for(int j=0; j<15; ++j)
			c[i][j] = sum[i][j];
	return ;
}

long long int find(long long int n)
{
	calc_mat_square();
	int rem = n % 15;
	n /= 15;
	long long int sum[15][15];
	for(int i=0; i<15; ++i)
		for(int j=0; j<15; ++j)
			if(i == j)
				sum[i][j] = 1;
			else
				sum[i][j] = 0;
	int i=0;
	while(n != 0)
	{
		if(n%2 == 1)
			mat_mult(sum, mat[i], sum);
		i++;
		n /= 2;
	}
	long long int ans = 0;
	for(int i=0; i<15; ++i)
		ans = (ans + sum[rem][i] * vec[i]) % mod;
	return ans % mod;
}

int calmat[30 * 15];
int fir[15];
void calcorig()
{
	int* start = calmat;
	for(int i=0; i<15; ++i)
		for(int j=0; j<15; ++j)
			if(i == j)
				calmat[i * 15 + j] = 1;
			else
				calmat[i * 15 + j] = 0;
	for(int k=0; k<15; ++k)
	{

		for(int i=0; i<15; ++i)
		{
			long long int su = 0;
			for(int j=0; j<15; ++j)
			{
				su = (su + fir[j] * start[j * 15 + i]) % mod;
			}
			start[15*15 + i] = su;
		}
		start += 15;
	}
	for(int i=0; i<15; ++i)
	{
		for(int j=0; j<15; ++j)
		{
			mat[0][i][j] = start[i * 15 + j];
			//cout<<mat[0][i][j]<<" ";
		}
		//cout<<endl;
	}
	return ;
}


int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		long long int n;
		cin>>n;
		int k;
		cin>>k;
		int vals[15];
		for(int i=0; i<15; ++i)
			fir[i] = 0;
		for(int i=0; i<k; ++i)
		{
			int temp;
			cin>>vals[i];
			fir[15 - vals[i]] = 1;
		}
		vec[0] = 1;
		for(int i=1; i<15; ++i)
		{
			vec[i] = 0;
			for(int j=0; j<k; ++j)
			{
				if(i - vals[j] >= 0)
					vec[i] += vec[i - vals[j]];
			}
			//cout<<vec[i]<<" ";
		}
		//cout<<endl;
		calcorig();
		cout<<find(n)<<endl;
	}
	return 0;
}
