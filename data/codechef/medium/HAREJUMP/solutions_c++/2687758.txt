
/*
author :  R Anirudh 
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;
#define SIZE(A) ((int)(A.size()))
#define MSET(A,x) memset(A,x,sizeof(A));
#define FILL(A,x) fill(A.begin(),A.end(),x)
#define REP(i,N) for(int i=0;i<(int)(N);i++)
#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)
#define REV(i,a,b) for(int i=(int)(a);i>=(int)(b);i--)
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define ALL(x) x.begin(),x.end()
#define INF (INT_MAX/2)
#define LLINF (LONG_LONG_MAX/2LL)
#define EPS 1e-12
#define GI ({int t;scanf("%d",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GF ({double t;scanf("%lf",&t);t;})
#define bitCount(n) __builtin_popcount(n)
#define MOD 1000000007
#define MAXN 1000005
#define FIX(a) (((a)%MOD+MOD)%MOD)
typedef long long LL;
typedef unsigned long long ULL;
#define pb push_back

vector<vector<LL> > multiply_matrix(vector<vector<LL> > , vector<vector<LL> >, LL);

vector<vector<LL> > power(vector<vector<LL> > a , LL p , LL s){
 if(p==1) return a;
 vector<vector<LL> > temp(s,vector<LL> (s));
 temp=power(a,p/2,s);
 if(p%2==0)
  return multiply_matrix(temp,temp,s);
 else
 return multiply_matrix(multiply_matrix(temp,temp,s),a,s);

}

vector<vector<LL> > multiply_matrix(vector<vector<LL> > a, vector<vector<LL> > b , LL s){
vector<vector<LL> > c(s,vector<LL> (s));
FOR(i,0,s){
FOR(j,0,s){
c[i][j]=0;
FOR(k,0,s){
c[i][j]=(c[i][j] + a[i][k] * b[k][j])%MOD;
}
}
}
return c;
}


LL hare(){
	LL moves,distance;
	cin>>distance;
	cin>>moves;
	LL jumps;
	vector<vector<LL> > T(16,vector<LL> (16));
	for(LL i=1;i<16;i++)
	T[i][i-1]=1;
	for (int i = 0; i < moves; i++)
    {
      cin >> jumps;
     T[0][jumps - 1]++;
    }
    T=power(T,distance,16);
    return T[0][0];
	}


int main(){  
int t;
scanf("%d",&t);
while(t--){
cout<<hare()<<endl;
	}
 
return 0;
}


