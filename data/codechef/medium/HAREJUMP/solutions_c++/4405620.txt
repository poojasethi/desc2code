#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>

using namespace std;
typedef long long ll;
#define bignumber 1000000007
#define REP(i,a,b) \
    for(int(i)=int(a);i<=int(b);i++)

ll arr[20],dp[20];

int k;
ll N;
void multiply(ll** rec, ll** M, int maximum){
    ll **res = new ll*[maximum];
    REP(i,0,maximum-1)
        res[i] = new ll[maximum];
    REP(i,0,maximum-1)
        REP(j,0,maximum-1)
            res[i][j]=0;
    REP(i,0,maximum-1)
        REP(j,0,maximum-1)
            REP(k,0,maximum-1)
                res[i][j] = (res[i][j] + (rec[i][k]*M[k][j])%bignumber)%bignumber;
    REP(i,0,maximum-1)
        REP(j,0,maximum-1)
            rec[i][j]=res[i][j];
    REP(i,0,maximum-1)
        delete res[i];
    delete res; 
}


void power(ll** rec, ll n, int maximum){
    int arrctr;
    if(n==0 || n==1)
        return;
    ll **M = new ll*[maximum];
    REP(i,0,maximum-1)
        M[i] = new ll[maximum];
    REP(i,0,maximum-1)
        REP(j,0,maximum-1)
            M[i][j]=0;
    arrctr = 0;
    REP(i,0,maximum-1){
        while((i+1) < arr[arrctr])
            i++;
        if(arr[arrctr]==(i+1)){
//            cout<<"arr of arrctr is "<<arr[arrctr]<<endl;
//            cout<<" i+1 is now "<<(i+1)<<endl;
            M[0][i] = 1;
        }
        else
            M[0][i]=0;
        arrctr++;
    }
    REP(i,1,maximum-1){
//        REP(j,0,max-1){
//            if(i==(j+1))
                M[i][i-1]=1;
//            else
//                M[i][j]=0;
//        }
    }

/*    cout<<"Printing M now "<<endl;
    REP(i,0,max-1){
        REP(j,0,max-1){
            printf("%lld ",M[i][j]);
        }
        printf("\n");
    }*/ 
    power(rec,n/2,maximum);
    multiply(rec,rec,maximum);
    if(n%2!=0)
        multiply(rec,M,maximum);
    REP(i,0,maximum-1)
        delete(M[i]);
    delete M; 
}


void jump(ll **recursive, ll n, int maximum){
//    cout<<"n is now "<<n<<endl;
    if(n==0)
        return;
    power(recursive,n,maximum);
}

int main(){
    int T,maximum,arrctr,dpctr;
    ll **recursive,result;
    scanf("%d",&T);
    while(T--){
        scanf("%lld",&N);
//        cout<<"N is now "<<N<<endl;
        scanf("%d",&k);
//        cout<<"K is now "<<k<<endl;
        maximum = 0;
        REP(i,0,k-1){
            scanf("%lld",&arr[i]);
            if(arr[i]>maximum)
                maximum = arr[i];
        }
        sort(arr,arr+k);
//        cout<<" max is now "<<maximum<<endl;
        recursive = new ll*[maximum];
        REP(i,0,maximum-1)
            recursive[i] = new ll[maximum];
        REP(i,0,maximum-1)
            REP(j,0,maximum-1)
                recursive[i][j]=0;
        arrctr = 0;
        REP(i,0,maximum-1){
            while((i+1) < arr[arrctr])
                i++;
            if(arr[arrctr]==(i+1)){
//                cout<<"arr of arrctr is "<<arr[arrctr]<<endl;
//                cout<<" i+1 is now "<<(i+1)<<endl;
                recursive[0][i] = 1;
            }
            else{
                recursive[0][i]=0;
//                cout<<"i is now "<<i<<endl;
            }
            arrctr++;
        }
        REP(i,1,maximum-1){
//            REP(j,0,max-1){
//                if(i==(j+1))
                    recursive[i][i-1]=1;
//                else
//                    recursive[i][j]=0;
//            }
        }
/*        cout<<"main recursive initialised "<<endl;
        cout<<" printing recursive now "<<endl;
        REP(i,0,max-1){
            REP(j,0,max-1){
                printf("%lld ",recursive[i][j]);
            }
            printf("\n");
        } */
/*        REP(i,0,maximum)
            dp[i]=0;
        REP(i,0,arr[0]-1)
            dp[i]=0;
        dp[arr[0]]=1;
        arrctr = 1;
        dpctr = arr[0]+1;
        while(arrctr<k){
            REP(i,dpctr,arr[arrctr]){
                dp[i]=0;
                REP(j,0,arrctr)
                    dp[i] = (dp[i]+dp[i-arr[j]])%bignumber;
            }
            dp[arr[arrctr]]= (dp[arr[arrctr]]+1)%bignumber;
            dpctr = arr[arrctr]+1;
            arrctr++;
        } */
        REP(i,0,maximum)
            dp[i]=0;
        dp[0] = 1;
        REP(i,1,maximum){
            REP(j,0,k-1)
                if(i - arr[j] >= 0)
                    dp[i] = (dp[i] + dp[i-arr[j]])%bignumber;
        }
        if(N==0)
            printf("1\n");
        else if(N<=maximum)
            printf("%lld\n",dp[N]);
        else{ 
//            cout<<"Dp is now printed now as follows "<<endl;
//           REP(i,0,maximum)
//                printf("%lld ",dp[i]);
//            printf("\n"); 
            jump(recursive,N-maximum,maximum); 
/*            cout<<"Recursive is now "<<endl; 
            REP(i,0,max-1){
                REP(j,0,max-1){
                    printf("%lld ",recursive[i][j]);
                }
                printf("\n");
            } */
            result = 0;
            REP(i,0,maximum-1)
                result = (result + (recursive[0][i]*dp[maximum-i])%bignumber)%bignumber;
            printf("%lld\n",result);
        }
/*        REP(i,0,max-1)
            delete(recursive[i]);
        delete recursive; */
    }   
    return 0;
}
