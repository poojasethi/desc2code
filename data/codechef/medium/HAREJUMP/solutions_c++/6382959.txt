//CodeChef--HareJump
#include<bits/stdc++.h>
#define MAX 17    
#define MOD 1000000007 
    
using namespace std;
    
typedef long long int lli;
    
class Matrix{
	
	private :
		
	lli mat[MAX][MAX],row,col;
	
	public :
		
	Matrix(lli row,lli col){
		
		this->row=row;this->col=col;
		memset(mat,0,sizeof mat);
		
	}	
		
	Matrix(lli arr[MAX][MAX],lli row,lli col){
		
		this->row=row;this->col=col;
		memset(mat,0,sizeof mat);
		
		lli i,j;
		for(i=0;i<row;i++)
		  for(j=0;j<col;j++)
		    mat[i][j]=arr[i][j];
				
	}
	
	Matrix mult(Matrix B){
		
		Matrix ans(this->row,B.col);
		
		lli i,j,k;
		
		for(i=0;i<this->row;i++)
		  for(j=0;j<B.col;j++)
		    for(k=0;k<B.row;k++)
		       ans.mat[i][j]=(ans.mat[i][j]+this->mat[i][k]*B.mat[k][j])%MOD;
			   	
		return ans;
		
	}
	
	Matrix fast_expo(lli expo){
		
		if(expo==1) return *this;
		
		Matrix ans=fast_expo(expo/2);
		
		ans=ans.mult(ans);
		
		if(expo%2==0) return ans;
		
		else{
			
			ans=ans.mult(*this);
			return ans;		
			
		}
		
	}
	
	lli get(lli x,lli y){	return mat[x][y];	}
	
	void display(){
		
		lli i,j;
		
		for(i=0;i<row;i++){
			
			for(j=0;j<col;j++)
			  cout<<mat[i][j]<<" ";
			  
			cout<<"\n";  
			
			
		}		
		
	}
	
};    
    
lli L[MAX],dp[MAX];

lli solve(lli x){
		
	if(x==0) return 1;
	
	if(dp[x]!=-1) return dp[x];
		
	lli i,count=0;
    for(i=1;i<=x;i++)
	  if(L[i-1]) count=(count+solve(x-i))%MOD;
	  	
	return dp[x]=count;

}    
    
int main(void){
	
	lli testCases,query,steps,temp1[MAX][MAX],temp2[MAX][MAX],i,j;
		
	scanf("%lld",&testCases);
	while(testCases--){
		
		scanf("%lld%lld",&query,&steps);
		
		lli mx=16;
		
		memset(L,0,sizeof L);
		for(i=0;i<steps;i++){
		
	      scanf("%lld",&j);
          L[j-1]=1; 
           
		}
		
		memset(dp,-1,sizeof dp);
		
		if(query<=mx)
			printf("%lld\n",solve(query));  
            				
		else{
			
			memset(temp1,0,sizeof temp1);
			memset(temp2,0,sizeof temp2);
			
			for(i=0;i<mx;i++)
			   temp2[i][0]=solve(mx-i);
						
			query-=mx;
             
            for(i=0;i<mx;i++)
			  if(L[i])
			  temp1[0][i]=1; 
            
			for(i=1;i<mx;i++)
			  temp1[i][i-1]=1;;	   
            
			Matrix transformationMatrix(temp1,mx,mx),knownMatrix(temp2,mx,1);
             
           // transformationMatrix.display(); 
             
			transformationMatrix=transformationMatrix.fast_expo(query);
			
			 //transformationMatrix.display(); 
			transformationMatrix=transformationMatrix.mult(knownMatrix);
			printf("%lld\n",transformationMatrix.get(0,0));			
				
		}		
		 
	}    
	
	return 0;
	
}   