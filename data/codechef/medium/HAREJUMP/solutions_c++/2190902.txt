#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>

#define mm 1000000007
#define gc getchar_unlocked()

using namespace std;

typedef long long ll;
typedef vector<ll>row;
typedef vector<row>matrix;

/*inline ll inp()
{
	ll num = 0;
	char p = gc;
	for(;p<33;)p=gc;
	while(p > 33) {
		num = (num << 3) + (num << 1) + (p - '0');
		p = gc;
	}
	return num;
}

matrix mul(matrix a, matrix b)
{
	matrix c = matrix(16,row(16,0));
	int i;
	int j;
	int k;
	for(i = 0; i < c.size(); i++) {
		for( j = 0; j < c[i].size(); j++) {
			for(k = 0; k < a[i].size(); k++) {
				c[i][j] = (c[i][j]+(a[i][k]*b[k][j])%mm)%mm;
			}
		}
	}
	return c;
}

matrix pow(matrix m, ll n)
{
	matrix c;
	if(n == 0 || n == 1 || n < 0)
	   return m;
	 c = pow(m,n/2);
	c = mul(c,c);
	if(n%2 != 0)
	  	c = mul(m,c);
	return c;
}
*/

ll MOD = (ll) 1e9 + 7;

void clear (matrix & A)
{
  for (size_t i = 0; i < A.size (); i++)
    for (size_t j = 0; j < A[i].size (); j++)
      A[i][j] = 0;
}

matrix mul (const matrix & A, const matrix & B)
{
  matrix C = A;
  clear (C);
  for (size_t i = 0; i < C.size (); i++)
    for (size_t j = 0; j < C[i].size (); j++)
      for (size_t k = 0; k < A[i].size (); k++)
	C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
  return C;
}

matrix
pow (const matrix & A, ll p)
{
  if (p == 0)
    {
      matrix C = A;
      clear (C);
      for (size_t i = 0; i < C.size (); i++)
	C[i][i] = 1;
      return C;
    }
  matrix C = pow (A, p / 2);
  C = mul (C, C);
  if (p & 1)
    C = mul (C, A);
  return C;
}

void
solve ()
{
  ll L;
  cin >> L;
  const int nn = 16;
  matrix Z = matrix (nn, row (nn, 0));
  matrix A = Z;
  for (int i = 1; i < nn; i++)
    A[i][i - 1] = 1;
  int k, l;
  cin >> k;
  for (int i = 0; i < k; i++)
    {
      cin >> l;
      A[0][l - 1]++;
    }
  matrix B = pow (A, L);
  cout << B[0][0] << endl;
}


int main()
{
/*	ll n;
	ll p;
	ll l;
	ll test;
	int i;
	int j;
	//test = inp();
	scanf("%lld",&test);
	while(test--) {
	//n = inp();
	scanf("%lld%lld",&n,&p);
//	p = inp();
	matrix m = matrix(16,row(16,0));
	//matrix orig = matrix(16,row(16,0));
	for(i = 1; i < 16; i++){
		  	m[i][i-1] = 1;
		  	//orig[i][j] = m[i][j];
	}
	for(i = 0 ; i < p; i++) {
//		l = inp();
scanf("%lld",&l);
		m[0][l-1]++;
	//	orig[0][l-1]++;
	}
	m =	pow(m,n);
	cout<<m[0][0]<<endl;
}*/
int test;
  cin>>test;
  while(test--)
   solve();
	return 0;
}