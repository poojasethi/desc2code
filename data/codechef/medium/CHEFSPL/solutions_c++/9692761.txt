#include<iostream>
#include<climits>
#include<string>
using namespace std;
 
#define MAX_SIZE 1000000
#define MOD 1000000007
#define HASH 31
 
long long hashTable[MAX_SIZE];
string s;
 
long long applyMod(long long a){
	if(a>=MOD)
		a=a%MOD;
	return a;
}
long long pow(long long a,long long b){
	if(b==0)
		return 1;
	long long ans = pow(a,b/2);
	ans*=ans;
	ans=applyMod(ans);
	if(b%2==1)
		ans=applyMod(ans*a);
	return ans;
}
 
long long modInverse(long long a,long long b){
	return pow(a,b-2);
}
 
 
void prepHash(string s){
	long long tempHash=0;
	int size=s.size();
	for(int i=0;i<size;i++){
		tempHash=applyMod(applyMod(tempHash*HASH)+(s[i]-'a'));
		hashTable[i]=tempHash;
	}
 
}
 
 
long long getHash(int i,int j){
	if(i>j)
		return 0;
	if(i==0)
		return hashTable[j];
	long long ans = applyMod(hashTable[j]-applyMod(pow(HASH,j-i+1)*hashTable[i-1]) + MOD);
	return applyMod(ans/* *modInverse(pow(HASH,j-i),MOD)*/);
}
 
long long sumHash(long long a,int i,long long b){
	return applyMod(b+applyMod(pow(HASH,i)*a));
}
 
 
int main(){
	int T;
	cin>>T;
	while(T--){
		cin>>s;
		bool isYes=false;
		int size=s.size();
		if(size<2){
			cout<<"NO\n";
			continue;
		}
		int i=0;
		prepHash(s);
		if(size%2==0){
			if(getHash(0,size/2-1)==getHash(size/2,size-1))
				isYes=true;
		}else{
			for(int i=0;i<size;i++){
				if( (i==size/2) && (getHash(0,size/2-1)==getHash(size/2+1,size-1)) )
					isYes=true;
				else if( (i<size/2) && sumHash(getHash(0,i-1),size/2-i,getHash(i+1,size/2))==getHash(size/2+1,size-1) )
					isYes=true;
				else if( (i==size-1) && (getHash(0,size/2-1)==getHash(size/2,i-1)) )
					isYes=true;
				else if( (i>size/2) && getHash(0,size/2-1)==sumHash(getHash(size/2,i-1),size-i-1,getHash(i+1,size-1)) )
					isYes=true;
			}
 
		}
		if(isYes)
			cout<<"YES\n";
		else
			cout<<"NO\n";
	}
	return 0;
}
 