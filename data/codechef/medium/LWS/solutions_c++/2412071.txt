#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <climits>
#include <utility>
#include <fstream>
#include <map>
#include <cmath>
#include <functional>
#include <exception>
#include <stdexcept>
#include <sstream>
#include <cassert>
#include <memory>
#include <limits>
#include <deque>
#include <queue>
#include <limits>
#include <climits>
#include <string>
#include <cstring>

const int MAX_S_LENGTH = 2001;
const int CHARACTER_SIZE = 28;
const int oo = 999999999;

/**
 * Let dp[k][i][j] be the length of the longest weird subsequence
 * for the substring s[1..k] such that
 * 		+ the non-decreasing subsequence ends at i
 * 		+ the non-increasing subsequence ends at j
 *
 */
int dp[MAX_S_LENGTH][CHARACTER_SIZE][CHARACTER_SIZE];

void base_cases() {
	memset(dp, 0, sizeof(dp));
	for (int i = 1; i < CHARACTER_SIZE; ++i) {
		for (size_t j = 1; j < CHARACTER_SIZE; ++j) {
			dp[0][i][j] = -oo;
		}
	}
}

int find_lws(const std::string &s) {
	base_cases();
	int length = s.length();
	for (int k = 1; k < length; ++k) {
		for (int i = 0; i < CHARACTER_SIZE; ++i) {
			for (int j = 0; j < CHARACTER_SIZE; ++j) {
				dp[k][i][j] = std::max(dp[k][i][j], dp[k - 1][i][j]);
				int c = s[k] - 'a' + 1;
				if (i <= c) {
					dp[k][c][j] = std::max(dp[k][c][j], dp[k - 1][i][j] + 1);
				}
				if (j >= c) {
					dp[k][i][c] = std::max(dp[k][i][c], dp[k - 1][i][j] + 1);
				}
			}
		}
	}
	int r = -oo;
	for (int i = 0; i < CHARACTER_SIZE; ++i) {
		for (int j = 0; j < CHARACTER_SIZE; ++j) {
			r = std::max(r, dp[length - 1][i][j]);
		}
	}
	return r;
}

void inout_longest_weird_subsequence() {
	int tc;
	std::cin >> tc;
	while (tc--) {
		std::string s;
		std::cin >> s;
		std::cout << find_lws("#" + s) << '\n';
	}
}

int main() {
	inout_longest_weird_subsequence();
	return 0;
}
