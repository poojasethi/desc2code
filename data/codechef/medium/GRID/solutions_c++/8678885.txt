#include<bits/stdc++.h>
#define vi vector<int>
#define vvi vector< vi >
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define rall(c) c.rbegin(),c.rend() 
#define sz(c) c.size()
#define tr(c,it)  for(typeof(c.begin()) it=c.begin();it!=c.end();it++)  
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define present(c,x) find(all(c),x)!=c.end()
#define cpresent(c,x) c.find(x)!=c.end()  
#define permute(c) next_permutation(all(c))
using namespace std;
struct mark{
	int east;
	int south;
}dp[1004][1004];
int main(){
     //freopen("input_file_name.in","r",stdin);
     //freopen("output_file_name.out","w",stdout);
     int T,N,i,j,ans;
     char grid[1004][1004];
     cin>>T;
     while(T--){
     	ans=0;
     	cin>>N;
     	for(i=1;i<=N;i++)
     	  for(j=1;j<=N;j++)
     	    cin>>grid[i][j];
     	for(i=1;i<=N;i++){
     		dp[i][N].east=(grid[i][N]=='.'?1:0);
     		dp[N][i].south=(grid[N][i]=='.'?1:0);
     	}
     	i=N;
     	while(grid[i][N]=='.')
     	  dp[i--][N].south=1;
     	for(;i>=1;i--)
		  dp[i][N].south=0;
		i=N;
     	while(grid[N][i]=='.')
     	  dp[N][i--].east=1;
     	for(;i>=1;i--)
		  dp[N][i].east=0;    
		for(i=N-1;i>=1;i--){
			for(j=N-1;j>=1;j--){
				if(grid[i][j]=='.'){
				    dp[i][j].east=dp[i][j+1].east;
				    dp[i][j].south=dp[i+1][j].south;	
				}
				else
				  dp[i][j].east=0,dp[i][j].south=0;   
			}
		}
		for(i=1;i<=N;i++){
			for(j=1;j<=N;j++){
				if(dp[i][j].east==1&&dp[i][j].south==1)
				   ans+=1;
			}
		}                          
		cout<<ans<<endl;     
		
     }
     return 0;
}