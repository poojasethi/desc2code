#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <math.h>
using namespace std;

typedef long long INT64;
vector<INT64> A[20];
vector<INT64> B[20];
int Qi[20][1000];
int q[20];
int k[20];
set< pair<INT64,int> > s1;
INT64 a[20000];

int main(int argc, char* argv[])
{
	int h,i,j,t;
	scanf("%d", &t);
	for(i=0;i<t;i++)
	{
		scanf("%d %d",&k[i],&q[i]);
		A[i].assign(k[i],0);
		B[i].assign(k[i],0);
		for(j=0;j<k[i];j++) scanf("%lld", &A[i][j]);
		for(j=0;j<k[i];j++) scanf("%lld", &B[i][j]);
		for(j=0;j<q[i];j++) scanf("%d", &Qi[i][j]);
	}
	set< pair<INT64,int> >::iterator it;
	for(h=0;h<t;h++)
	{
		sort(A[h].begin(),A[h].end());
		sort(B[h].begin(),B[h].end());
		int maxq=0;
		for(i=0;i<q[h];i++)
		{
			if(Qi[h][i]>maxq)
			{
				maxq=Qi[h][i];
			}
		}
		if(h) s1.clear();
		int max=sqrt(maxq);
		if(maxq>max*max) max++;
		int end=(k[h]<max) ? k[h] : max;
		for(i=0;i<end;i++)
		{
			for(j=0;j<end;j++)
			{
				s1.insert(make_pair(A[h][i]+B[h][j],i*k[h]+j));
			}
		}
		int idx1=end;
		int idx2=end;
		for(i=end;i<k[h];i++)
		{
			it=--s1.end();
			INT64 last=it->first;
			for(j=0;j<idx1;j++)
			{
				INT64 sum=B[h][i]+A[h][j];
				if(sum>=last)
				{
					idx1=j;
					break;
				}
				else
				{
					s1.erase(--s1.end());
					s1.insert(make_pair(sum,j*k[h]+i));
					it=--s1.end();
					last=it->first;
				}
			}
			for(j=0;j<idx2;j++)
			{
				INT64 sum=A[h][i]+B[h][j];
				if(sum>=last)
				{
					idx2=j;
					break;
				}
				else
				{
					s1.erase(--s1.end());
					s1.insert(make_pair(sum,i*k[h]+j));
					it=--s1.end();
					last=it->first;
				}
			}
		}
		int cnt=0;
		for(it=s1.begin();it!=s1.end();it++)
		{
			a[cnt++]=it->first;
		}
		for(i=0;i<q[h];i++)
		{
			int pos=Qi[h][i];
			printf("%lld\n", a[pos-1]);
		}
	}
	return 0;
}
