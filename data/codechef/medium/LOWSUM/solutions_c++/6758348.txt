#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

typedef unsigned long long ull;

void heap_push(vector< pair< pair<int,int>, ull> > *heap, pair< pair<int,int>, ull> node)
{
  heap->push_back(node);
  int n = heap->size();

  while (n > 1) {
    ull newval = (*heap)[n-1].second;
    ull val = (*heap)[n/2-1].second;

    if (newval < val) {
      swap((*heap)[n-1], (*heap)[n/2-1]);
      n /= 2;
    } else {
      break;
    }
  }
}

pair< pair<int,int>, ull> heap_pop(vector< pair< pair<int,int>, ull> > *heap)
{
  pair< pair<int,int>, ull> ret = (*heap)[0];

  int n = heap->size();
  swap((*heap)[0], (*heap)[n-1]);
  heap->pop_back();
  n--;

  int i=0;
  while (1) {
    ull val = (*heap)[i].second;

    if (2*i+2 < n) { // both l, r child exist
      ull lval = (*heap)[2*i+1].second;
      ull rval = (*heap)[2*i+2].second;
      if (lval <= rval && lval < val) {
        swap((*heap)[i], (*heap)[2*i+1]);
        i = 2*i+1;
      } else if (lval > rval && rval < val) {
        swap((*heap)[i], (*heap)[2*i+2]);
        i = 2*i+2;
      } else {
        break;
      }
    } else if (2*i+1 < n) { // only l exists
      ull lval = (*heap)[2*i+1].second;
      if (lval < val) {
        swap((*heap)[i], (*heap)[2*i+1]);
      }
      break;
    } else { // reached leaf
      break;
    }
  }
  return ret;
}

int main()
{
  int t;

  cin >> t;

  while (t--) {
    int k,q;
    cin >> k >> q;
    vector<ull> m;
    vector<ull> s;
    vector<ull> ms;
    vector< pair< pair<int,int>, ull> > minheap;

    for (int i=0; i<k; i++) {
      ull a;
      cin >> a;
      m.push_back(a); // motivation
    }
    for (int i=0; i<k; i++) {
      ull a;
      cin >> a;
      s.push_back(a); // satisfaction
    }
    sort(m.begin(), m.end());
    sort(s.begin(), s.end());

    for (int i=0; i<k; i++) {
      ull val = m[i]+s[0];
      heap_push(&minheap, make_pair(make_pair(i,0),val));
    }

    int maxqi = k > 100 ? 10000 : k*k;
    for (int i=0; i<maxqi; i++) {
      pair< pair<int,int>, ull> p = heap_pop(&minheap);
      ms.push_back(p.second);
      int mi = p.first.first;
      int si = p.first.second+1;
      if (si < k) {
        ull val = m[mi]+s[si];
        heap_push(&minheap, make_pair(make_pair(mi,si),val));
      }
    }

    while (q--) {
      int x;
      cin >> x;
      cout << ms[x-1] << endl;
    }
  }

  return 0;
}

