#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>


using namespace std;

#define INF 2147483647
#define EL cout<<endl
#define TI freopen("test.inp","rt",stdin)


#define FOR(i,a,b) for(int i=a;i<=b;i++) 
#define FORD(i,a,b) for(int i=a;i>=b;i--) 
#define REP(i,n) for(int i=0;i<n;i++)

int INP,AM;
#define BUFSIZE (1<<10)
char BUF[BUFSIZE+1], *inp=BUF;
#define GETCHAR(INP) {				\
	if(!*inp) {					\
		fread(BUF,1,BUFSIZE,stdin);	\
		inp=BUF;				\
	}						\
	INP=*inp++;					\
}
#define DIG(a) (((a)>='0')&&((a)<='9'))
#define GN(j) {					\
    AM=0;\    
	GETCHAR(INP); while(!DIG(INP) && INP!='-') GETCHAR(INP);\
	if (INP=='-') {AM=1;GETCHAR(INP);} \
	j=INP-'0'; GETCHAR(INP);				\
	while(DIG(INP)){j=10*j+(INP-'0');GETCHAR(INP);}	\
	if (AM) j=-j;\
}

struct info {
       long long int v;
       int i,j;
   bool operator < (const info &o) const
   {
       return (v > o.v); //mac dinh la queue max
   }
};

priority_queue<info> pq;

int q[505],mark[10002];
long long int a[20002],b[20002];
long long int ret[10002];
int K,Q;

void xuly()
{
    GN(K);GN(Q);
    memset(mark,0,sizeof(mark));
    
    for(int i=1;i<=K;i++) GN(a[i]);
    for(int i=1;i<=K;i++) GN(b[i]);
    for(int i=1;i<=Q;i++) {GN(q[i]);mark[q[i]]=1;}
    sort(a+1,a+K+1);
    sort(b+1,b+K+1);
    int maxQ = *max_element(q+1,q+Q+1);
    for(int i=1;i<=K;i++) //khoi tao priority queue bat buoc phai add het vao 
       pq.push((info){a[i]+b[1],i,1});
    
    int cur=0;   
    while(pq.size())
    {
        
         info top = pq.top();pq.pop();   
         
         cur++;
         
         //cout<<cur<<" "<<top.v<<endl;
         if (mark[cur]) ret[cur]=top.v;
         if (cur==maxQ) break;
         if (top.j<K) pq.push((info){a[top.i]+b[top.j+1],top.i,top.j+1});
    } 
    while(pq.size()) pq.pop();
    
    for(int i=1;i<=Q;i++) printf("%lld\n",ret[q[i]]);
    
}

 int main()
{
   
    int t; cin>>t;
    while(t--)     xuly();
    
    return 0;
}
