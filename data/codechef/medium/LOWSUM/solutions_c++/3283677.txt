#include<cstdio>
#include<cstdlib>

void readint(int &a)
{
    register int c; 
	a = 0;
	do c = getchar_unlocked(); while(c < '0');
	do{
		a = (a << 1) + (a << 3) + c - '0';
		c = getchar_unlocked();
	}while(c >= '0');
}

void readllu(long long unsigned* a)
{
	register int c; 
	*a = 0;
	do c = getchar_unlocked(); while(c < '0');
	do{
		*a = (*a << 1) + (*a << 3) + c - '0';
		c = getchar_unlocked();
	}while(c >= '0');
}

void printllu(long long unsigned a)
{
	char s[20];
	int t = -1;
	
	do{
		s[++t] = a % 10 + '0';
		a /= 10;
	}while(a > 0);
	
	while(t >= 0)putchar_unlocked(s[t--]);
	putchar_unlocked('\n');
}

void merge(unsigned long long sum[],int l,int m,int r)
{
	int i = l,j = m + 1,k = 0;
	//unsigned long long temp[20001];
	unsigned long long* temp =(unsigned long long*)malloc((r - l + 1) * sizeof(unsigned long long));

	while(i <= m && j <= r)
		if(sum[i] <= sum[j])temp[k++] = sum[i++];
		else temp[k++] = sum[j++];

	while(i <= m)temp[k++] = sum[i++];
	while(j <= r)temp[k++] = sum[j++];

	k = 0;
	for(i = l; i <= r; i++)sum[i] = temp[k++];
	free(temp);
}

void msort(unsigned long long sum[],int l,int r)
{
	if(l >= r)return;
	int m = (l + r) >> 1;
	msort(sum,l,m);
	msort(sum,m + 1,r);
	merge(sum,l,m,r);
}

void add(unsigned long long heap[],unsigned long long item,int &n)
{
	int p,c;
	unsigned long long temp;

	if(n < 10000)
	{
		c = n;
		p = (c - 1) >> 1;

		while(c != 0 && item > heap[p])
		{
			heap[c] = heap[p];
			c = p;
			p = (c - 1) >> 1;
		}
		heap[c] = item;
		n++;
	}
	else
	{
		p = 0;
		c = (p << 1) + 1;
		temp = heap[n-1];

		while(c < n)
		{
			if(c + 1 < n)if(heap[c] < heap[c + 1])c++;
			if(item >= heap[c])break; 
			if(temp >= heap[c])break;

			heap[p] = heap[c];
			p = c;
			c = (p << 1) + 1;
		}
		if(item >= temp)heap[p] = item;
		else
		{
			heap[p] = temp;
			heap[n-1] = item;
		}
	}
}

int main()
{
	int t,n;
	
	int q,k,Q,i,j;
	unsigned long long a[20001],b[20001];
	unsigned long long sum;
	unsigned long long heap[10001];

	readint(t);//scanf("%d",&t);

	while(t--)
	{
		//scanf("%d%d",&k,&Q);
		readint(k);
		readint(Q);

		for(i = 0; i < k; i++)readllu( (a + i) );
		for(i = 0; i < k; i++)readllu( (b + i) );

		msort(a,0,k-1);
		msort(b,0,k-1);

		n = 0;
		for(i = 0; i < k; i++)
		{
			for(j = 0; j < k; j++)
			{
				sum = a[i] + b[j];
				if(n == 10000 && sum >= heap[0])break;
				add(heap,sum,n);
			}
		}
		msort(heap,0,n-1);
		for(i = 0 ; i < Q; i++)
		{
			readint(q);
			printllu(heap[q-1]);//printf("%llu\n",a[q-1]);
		}
	}
	return 0;
}