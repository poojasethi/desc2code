//Shakim :D
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <utility>
#include <map>
#include <set>
#include <string>
using namespace std;
typedef long long LL;
#define IT iterator
#define getcx getchar
#define INF (int(1e9))
#define INFL (LL(1e18))
#define pii pair< int,int >
#define pil pair< long long int , int >
#define piii pair< pii , int >
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
int main()
{
    int t,k,query,n,i,j,cnt,x;
    long long int p,q,low,mid,high;
    vector<long long int> A,B,ans;

    in(t);
    while(t--)
    {
        A.clear();
        B.clear();
        ans.clear();

        in(k);
        in(query);

        for(i=1; i<=k; i++)
        {
            scanf("%lld",&p);
            A.push_back(p);
        }
        for(i=1; i<=k; i++)
        {
            scanf("%lld",&p);
            B.push_back(p);
        }

        sort(A.begin(),A.end());
        sort(B.begin(),B.end());

        if(k<100)
            n=k*k;
        else
            n=10000;

        low=1;
        high=INFL;
        high*=2;

        while(low<high)
        {
            mid=low+(high-low)/2;
            cnt=0;

            //printf("\nbefore mid is %lld and cnt is %d\n",mid,cnt);
            for(i=0; i<A.size(); i++)
            {
                p=A[i];
                q=mid-p;

                x=lower_bound(B.begin(),B.end(),q)-B.begin();

                cnt+=x;

                if(x<B.size() && A[i]+B[x]==mid)
                    cnt++;
            }

            //printf("\nafter mid is %lld and cnt is %d\n",mid,cnt);

            if(cnt<n)//false
            {
                low=mid+1;
            }
            else
            {
                high=mid;
            }
        }
        //printf("%lld\n",low);

        for(i=0; i<A.size(); i++)
        {
            for(j=0; j<B.size(); j++)
            {
                if(A[i]+B[j]<=low)
                {
                    ans.push_back(A[i]+B[j]);
                }
                else
                {
                    break;
                }
            }
        }
        sort(ans.begin(),ans.end());
        while(query--)
        {
            in(x);
            printf("%lld\n",ans[x-1]);
        }
    }

    return 0;
}
