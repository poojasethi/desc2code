#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#define ll long long
using namespace std;

ll MAX = 1000000001;
ll t,k,q,lefty,righty,mid,rank,n;
ll arr1[20005];
ll arr2[20005];
vector<ll> ff[10005];
pair<ll,ll> query[505];
vector<pair<ll,ll > > v;
ll pnt[20005];

struct Comp
{
   bool operator()(const pair<ll,ll>& s1, const pair<ll,ll>& s2)
   {
       return s1.first < s2.first;
   }
};

int main() {
	
	scanf("%lld",&t);
	MAX *= MAX;
	MAX *= 2;
	
	while(t--){
		scanf("%lld %lld",&k,&q);
		for(ll i=0;i<10004;i++)
			ff[i].clear();
		v.clear();
		
		for(ll i=0;i<k;i++)
			scanf("%lld",arr1+i);
			
		for(ll i=0;i<k;i++)
			scanf("%lld",arr2+i);
		
		sort(arr1,arr1+k);
		sort(arr2,arr2+k);

		for(ll i=0;i<q;i++){
			ll tmp;
			scanf("%lld",&tmp);
			query[i].first = tmp;
			ff[tmp].push_back(i);
		}
		
		for(ll i=0;i<k;i++){
			pnt[i] = 0;
			ll temp = arr1[i]+arr2[pnt[i]];
			v.push_back(make_pair(temp*-1,i));
		}
		make_heap(v.begin(),v.end(),Comp());
		
		ll p1 = k*k<10002 ? k*k : 10002;
		
		for(ll i=1;i<=p1;i++){
			ll q1 = v.front().first;
			ll q2 = v.front().second;
			
			for(ll j=0;j<ff[i].size();j++){
				query[ff[i][j]].second = q1*-1;
			}
			pop_heap (v.begin(),v.end());
			v.pop_back();
			if(pnt[q2]<k-1){
				pnt[q2]++;
				ll k1 = arr1[q2]+arr2[pnt[q2]];
				v.push_back(make_pair(k1*-1,q2)); 
				push_heap (v.begin(),v.end(),Comp());
			}

		}
		
		for(ll i=0;i<q;i++)
			printf("%lld\n",query[i].second);
	}
	
	return 0;
}