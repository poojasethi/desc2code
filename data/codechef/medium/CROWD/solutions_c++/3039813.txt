#include <bits/stdc++.h>
using namespace std;
#define TR(i,v) 		for(__typeof((v).begin())i=(v).begin();i!=(v).end();++i)
#define DEBUG(x) 		cout << #x << " = "; cout << x << endl;
#define SIZE(p) 		(int)(p).size()
#define MP(a, b)		make_pair((a), (b))
#define ALL(p)			(p).begin(), (p).end()
#define rep(i, n)		for(int (i)=0; (i)<(int)(n); ++(i))
#define REP(i, a, n)	for(int (i)=(a); (i)<(int)(n); ++(i))
#define FOR(i, a, b)   	for(int (i)=(int)(a); (i)<=(int)(b); ++(i))
#define FORD(i, b, a)  	for(int (i)=(int)(b); (i)>=(int)(a); --(i)) 
typedef long long LL;
typedef pair<int, int> pii;
const int mod = (int)1e9+7;
inline void mul(int &x, LL y)
{
    x = (LL)(x)*(y)%mod;
}
inline void add(int &x, LL y)
{
    x = (LL)(x+(y)+mod)%mod;
}
struct MatInt
{
	int v[4][4], n;	
	MatInt()	{}
	MatInt(int n, bool f=false)
	{
		this->n = n;
		memset(v, 0, sizeof(v));
		if(f)		rep(i, n)		v[i][i]=1;
	}
	MatInt operator*(const MatInt &a)        const {
        MatInt res(n);
        rep(i, n)
        rep(j, n)
        rep(k, n) {
            int t = v[i][k];
            mul(t, a.v[k][j]);
            add(res.v[i][j], t);
        }
        return res;
    }
    MatInt operator^(LL p) const {
        MatInt res(n, 1);
        MatInt a = *this;
        while (p) {
            if (p&1)            res = res*a;
            a = a*a,   p>>=1;            
        }
        return res;
    }
    void print()
    {
    	rep(i, n)
    	{
    		rep(j, n)
    			printf("%d ", v[i][j]);	puts("");
    	}	puts("");
    }
};
int mypow(LL a, LL p)
{
	LL r=1;
	while(p)
	{
		if(p&1)		r=r*a%mod;
		a=a*a%mod, p>>=1;
	}
	return r;
}
int main(int argc, char const *argv[])
{
	#ifndef ONLINE_JUDGE
    freopen("CROWD.in", "r", stdin);	
    // freopen("out", "w", stdout);
    #endif
	// ios::sync_with_stdio(false);    cin.tie(0);
	int T;			
	scanf("%d", &T);
	int u[] = {1, 0, 0};
	int ans[] = {0, 0, 1, 3, 8, 20, 47, 107, 238, 520, 1121};
	while(T--)
	{
		LL n;		scanf("%lld", &n);		--n;
		if(n<=10)
		{
			printf("%d\n", ans[n]);
			continue;
		}
		++n;
		int res = mypow(2, n);
		n += 3;
		MatInt a(3);
		a.v[0][0]=1, a.v[0][1]=a.v[0][2]=1;		
		FOR(i, 1, 2)	
		rep(j, 3)
			a.v[i][j] = i==j+1;
		MatInt b(3);	
		rep(i, 3)	b.v[i][0]=u[i];		
		a = a^(n-2);
		a = a*b;
		res = (LL)(res-(a.v[0][0])+mod)%mod;
		printf("%d\n", res);
	}
	return 0;
}