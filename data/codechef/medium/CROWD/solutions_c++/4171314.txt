#include <cstdio>
#define ll long long
#define MOD 1000000007

typedef struct{
   ll m[4][4];
} M;

M mult (const M &a, const M &b){
    M aux;
    for (int i = 1; i <= 3; i++)
        for (int j = 1; j <= 3; j++)
            aux.m[i][j] = ((a.m[i][1] * b.m[1][j]) % MOD + (a.m[i][2] * b.m[2][j]) % MOD + (a.m[i][3] * b.m[3][j]) % MOD) % MOD;
    return aux;
}

M powM (const M &m, ll k){
    if (k == 1) return m;
    if (k % 2) return mult (m, powM(m, k - 1));
    M aux = powM(m, k/2);
    return mult (aux, aux);
}

ll pow (ll a, ll k){
    if (k == 1) return a;
    if (k % 2) return ((a * pow (a, k - 1)) % MOD);
    ll aux = pow (a, k / 2) % MOD;
    return (aux * aux) % MOD;
}

int main(){
    M matrix;
    M Mmult;
    matrix.m[1][1] = 0;
    matrix.m[1][2] = 1;
    matrix.m[1][3] = 0;
    matrix.m[2][1] = 0;
    matrix.m[2][2] = 0;
    matrix.m[2][3] = 1;
    matrix.m[3][1] = 1;
    matrix.m[3][2] = 1;
    matrix.m[3][3] = 1;
    int asw[4] = {0, 2, 4, 7};
    int t;
    scanf ("%d", &t);

    while (t--){
        ll n;
        scanf ("%lld", &n);

        ll total = pow (2, n);

        ll resp;

        if (n > 3){
            Mmult = powM(matrix, n - 3);
            resp = (Mmult.m[3][1] * 2 % MOD + Mmult.m[3][2] * 4 % MOD + Mmult.m[3][3] * 7 % MOD) % MOD;
        } else
            resp = asw[n];
        printf ("%lld\n", (total - resp + MOD) % MOD );
    }

    return 0;
}
