#include <iostream>
#include <cstdio>
using namespace std;

#define MOD 1000000007

struct matrix {
  long long a[3][3];
  
  matrix () {
    a[0][0] = a[0][1] = a[0][2] = a[1][0] = a[1][1] = a[1][2] = a[2][0] = a[2][1] = a[2][2] = 0L;
  }
  
  void id_mat() {
    a[0][0] = a[1][1] = a[2][2] = 1;
  }
  
  void unit_mat() {
    a[0][0] = a[0][1] = a[1][0] = a[1][2] = a[2][0] = 1L;
  }
  
  matrix operator * (matrix b) {
    matrix c;
    c.a[0][0] = ((a[0][0]*b.a[0][0])%MOD+(a[0][1]*b.a[1][0])%MOD+(a[0][2]*b.a[2][0])%MOD)%MOD;
    c.a[0][1] = ((a[0][0]*b.a[0][1])%MOD+(a[0][1]*b.a[1][1])%MOD+(a[0][2]*b.a[2][1])%MOD)%MOD;
    c.a[0][2] = ((a[0][0]*b.a[0][2])%MOD+(a[0][1]*b.a[1][2])%MOD+(a[0][2]*b.a[2][2])%MOD)%MOD;
    c.a[1][0] = ((a[1][0]*b.a[0][0])%MOD+(a[1][1]*b.a[1][0])%MOD+(a[1][2]*b.a[2][0])%MOD)%MOD;
    c.a[1][1] = ((a[1][0]*b.a[0][1])%MOD+(a[1][1]*b.a[1][1])%MOD+(a[1][2]*b.a[2][1])%MOD)%MOD;
    c.a[1][2] = ((a[1][0]*b.a[0][2])%MOD+(a[1][1]*b.a[1][2])%MOD+(a[1][2]*b.a[2][2])%MOD)%MOD;
    c.a[2][0] = ((a[2][0]*b.a[0][0])%MOD+(a[2][1]*b.a[1][0])%MOD+(a[2][2]*b.a[2][0])%MOD)%MOD;
    c.a[2][1] = ((a[2][0]*b.a[0][1])%MOD+(a[2][1]*b.a[1][1])%MOD+(a[2][2]*b.a[2][1])%MOD)%MOD;
    c.a[2][2] = ((a[2][0]*b.a[0][2])%MOD+(a[2][1]*b.a[1][2])%MOD+(a[2][2]*b.a[2][2])%MOD)%MOD;
    return c;
  }
  
};

long long power_2(long long n) {
  long long r = 1L;
  long long a = 2L;
  while(n) {
    if(n%2) r=(r*a)%MOD;
    if(n/=2) a=(a*a)%MOD;
  }
  return r;
}

matrix mat_pow(long long n) {
  matrix r, a;
  r.id_mat();
  a.unit_mat();
  while(n) {
    if(n%2) r=r*a;
    if(n/=2) a=a*a;
  }
  return r;
}

int main() {
  int t;
  long long n;
  scanf("%d",&t);
  while(t--) {
    scanf("%lld",&n);
    if(n<=3) {
      if(n==1) printf("0\n");
      else if(n==2) printf("0\n");
      else printf("1\n");
      continue;
    }
    matrix r = mat_pow(n-3);
    long long res = (((7L*r.a[0][0])%MOD+(4L*r.a[1][0])%MOD)%MOD+(2*r.a[2][0])%MOD)%MOD;
    res = (power_2(n)-res+MOD)%MOD;
    printf("%lld\n",res);
  }
  return 0;
}