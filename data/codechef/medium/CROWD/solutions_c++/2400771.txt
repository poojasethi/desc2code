#include<stdio.h>

#define LLI  long long int
int m  = 1000000007;

inline LLI fastread()
{
        LLI noRead=0;
        char p=getchar_unlocked();
        for(; p<33;) {
                p=getchar_unlocked();
        };
        while(p>32) {
                noRead = (noRead << 3) + (noRead << 1) + (p - '0');
                p=getchar_unlocked();
        }
        return noRead;
};

void nth_pow(LLI M[3][3], LLI n)
{
    if(n == 0 || n == 1)
        return;
 
    int temp[3][3] = {{1, 1, 0},{1, 0, 1},{1, 0, 0}};
 
    nth_pow(M, n/2);
 
    LLI a, b, c, d, e, f, g, h, i;
    a = (M[0][0]*M[0][0] + M[0][1]*M[1][0] + M[0][2]*M[2][0]) % m;
    b = (M[0][0]*M[0][1] + M[0][1]*M[1][1] + M[0][2]*M[2][1]) % m;
    c = (M[0][0]*M[0][2] + M[0][1]*M[1][2] + M[0][2]*M[2][2]) % m;
    d = (M[1][0]*M[0][0] + M[1][1]*M[1][0] + M[1][2]*M[2][0]) % m;
    e = (M[1][0]*M[0][1] + M[1][1]*M[1][1] + M[1][2]*M[2][1]) % m;
    f = (M[1][0]*M[0][2] + M[1][1]*M[1][2] + M[1][2]*M[2][2]) % m;
    g = (M[2][0]*M[0][0] + M[2][1]*M[1][0] + M[2][2]*M[2][0]) % m;
    h = (M[2][0]*M[0][1] + M[2][1]*M[1][1] + M[2][2]*M[2][1]) % m;
    i = (M[2][0]*M[0][2] + M[2][1]*M[1][2] + M[2][2]*M[2][2]) % m;
 
    M[0][0] = a;
    M[0][1] = b;
    M[0][2] = c;
    M[1][0] = d;
    M[1][1] = e;
    M[1][2] = f;
    M[2][0] = g;
    M[2][1] = h;
    M[2][2] = i;
 
    if(n % 2 == 1)
    {
        a = (M[0][0]*temp[0][0] + M[0][1]*temp[1][0] + M[0][2]*temp[2][0]) % m;
        b = (M[0][0]*temp[0][1] + M[0][1]*temp[1][1] + M[0][2]*temp[2][1]) % m;
        c = (M[0][0]*temp[0][2] + M[0][1]*temp[1][2] + M[0][2]*temp[2][2]) % m;
        d = (M[1][0]*temp[0][0] + M[1][1]*temp[1][0] + M[1][2]*temp[2][0]) % m;
        e = (M[1][0]*temp[0][1] + M[1][1]*temp[1][1] + M[1][2]*temp[2][1]) % m;
        f = (M[1][0]*temp[0][2] + M[1][1]*temp[1][2] + M[1][2]*temp[2][2]) % m;
        g = (M[2][0]*temp[0][0] + M[2][1]*temp[1][0] + M[2][2]*temp[2][0]) % m;
        h = (M[2][0]*temp[0][1] + M[2][1]*temp[1][1] + M[2][2]*temp[2][1]) % m;
        i = (M[2][0]*temp[0][2] + M[2][1]*temp[1][2] + M[2][2]*temp[2][2]) % m;
 
        M[0][0] = a;
        M[0][1] = b;
        M[0][2] = c;
        M[1][0] = d;
        M[1][1] = e;
        M[1][2] = f;
        M[2][0] = g;
        M[2][1] = h;
        M[2][2] = i;
    }
}
 
LLI mypow(LLI x, LLI n)
{
    if(n == 0)
        return 1;
    else if(n == 1)
        return x % m;
    else if(n % 2 == 0)
        return mypow(x*x % m, n/2) % m;
    else if(n % 2 == 1)
        return (x * mypow(x*x % m, (n-1)/2)) % m ;
}
 
int main()
{
    int t, i;
    LLI n,ans, j;
    t = fastread();
    while(t--)
    {
	    LLI matrix[3][3] = {{1, 1, 0},{1, 0, 1},{1, 0, 0}};
        n = fastread();
        if(n < 3)ans = 0; 
        else 
        {
            nth_pow(matrix, n-2);
            j = (4*matrix[0][0] + 2*matrix[1][0] + matrix[2][0]) % m;
            ans = mypow(2, n) - j;
            if(ans < 0)
                ans+= m;
        }
        printf("%lld\n",ans);
    }
    return 0;
}