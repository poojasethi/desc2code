#include<fstream>
#include<stdio.h>
#include<stdlib.h>
#include<algorithm>
#include<string.h>
#include<vector>
#include<utility>
#include<iostream>
#include<math.h>
#include<stack>
#include<queue>
#include<set>
using namespace std;

#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define INF 1000000000
#define LL long long int
#define EPS 1e-11
#define PI 3.14159265359
#define MOD 1000000007

struct Matrix{
       LL M[12][12];
};

Matrix mulMat(Matrix A,Matrix B)
{
    Matrix R;
    
    for (int row = 1; row<=3; row++)
    for (int col = 1; col<=3; col++)
    {
        LL temp = 0;
        for (int x = 1; x<=3; x++) 
        {
            temp += (A.M[x][row] * B.M[col][x]);
            temp %= MOD;
        }
        R.M[col][row] = temp;
    }
    return R;
}

Matrix powMat(Matrix A, LL p)
{
    if (p==1) return A;
    
    Matrix K = powMat(A,p/2);
    Matrix KK = mulMat(K,K);
    
    if (p%2==0) return KK; else return mulMat(KK,A);
}

LL powInt(LL bil,LL p)
{
    if (p==0) return 1;
    LL K = powInt(bil,p/2);
    LL KK = (K*K)%MOD;
    
    if (p%2==0) return KK; else return (KK*bil)%MOD;
}

int tc;
LL N,BASE[4];

int main(void)
{
    BASE[1] = BASE[2] = 1;
    BASE[3] = 0;
    
    Matrix T;
    T.M[1][1] = T.M[2][1] = T.M[3][1] = T.M[1][2] = T.M[2][3] = 1;
    T.M[2][2] = T.M[3][2] = T.M[1][3] = T.M[3][3] = 0;
    
    scanf("%d",&tc);
    for (int cases = 1; cases<=tc; cases++)
    {
        scanf("%lld",&N);
        if (N==1) printf("0\n"); else
        {
            Matrix HAHA = powMat(T,N-1);
            
            LL benar = 0;
            for (int row = 1; row<=3; row++)
            for (int k = 1; k<=3; k++) 
            {
                benar += (HAHA.M[k][row] * BASE[k]);
                benar %= MOD;
            }
            
            LL p2 = powInt(2,N);
             
            printf("%lld\n",(p2-benar+MOD)%MOD);
        }
    }
}
