#include<cmath>
#include<stack>
#include<queue>
#include<vector>
#include<string>
#include<cstdio>
#include<map>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<numeric>
#include<cstring>

#define ll long long int
#define ull unsigned long int

#define s(i) scanf("%d",&i)
#define ps(i) printf("%d ",i)
#define pa(i) printf("%d\n",i)

#define sl(i) scanf("%lld",&i)
#define psl(i) printf("%lld ",i)
#define pal(i) printf("%lld\n",i)

#define pb push_back
#define fr(i,s,n) for(int i=s;i<n;i++)

#define De_bug 0
#define pdeb(s,i) if(De_bug)cout<<"DEBUG "<<s<<" "<<i<<endl;

#define MOD 1000000007

using namespace std;

int powMod(int a,ll b) {
    if(b==0) return 1;
    int p=powMod(a,b/2);
    p=(long long)(p)*p%MOD;
    if(b&1)
        p=(ll)(a)*p%MOD;
    return p;
}
void matMul(int A[3][3],int B[3][3])
{
    int temp[3][3];
    memset(temp,0,sizeof(temp));
    for(int i=0; i<3; i++)
        for(int j=0; j<3; j++)
            for(int k=0; k<3; k++)
            {
                temp[i][j] += (long long)(A[i][k])*B[k][j]%MOD;
                if(temp[i][j] >= MOD)
                    temp[i][j] -= MOD;
            }
    for(int i=0; i<3; i++)
        for(int j=0; j<3; j++)
            A[i][j] = temp[i][j];
    return;
}

void powMat(int mat[3][3],ll n) {
    if(n==0||n==1) return;

    powMat(mat,n/2);
    matMul(mat,mat);
    int temp[3][3]={{1,1,0},{1,0,1},{1,0,0}};
    if(n&1ll)
        matMul(mat,temp);
    return;
}

int main()
{
    int t;
    ll n;
    s(t);
    while(t--)
    {
        sl(n);
        ll p2n = powMod(2, n);

        int mat[3][3] = {{1,1,0}, {1,0,1}, {1,0,0}};
        powMat(mat, n+1);

        ll correct = mat[0][0];
        ll ans = p2n - correct;

//pdeb("p2n ",p2n);
//pdeb("correct", correct);

        if(ans<0)
            ans += MOD;
        pal(ans);
    }
}
