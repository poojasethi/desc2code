#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <set>
#include <algorithm>

#define MAX_ALIEN 1000000100
#define MAX_INTERVALS 100000
#define MAX_K 20

#define SIZE 500000

using namespace std;

size_t read_count;
size_t pos;
char buffer[SIZE];

void initStream()
{
   read_count = 0;
   pos = 0;
}

inline int getIntFromStream()
{
   int value = 0;
   char ch;
   while (true)
   {
      if (pos >= read_count)
      {
         read_count = fread(buffer, 1, SIZE, stdin);
         pos = 0;
      }
      ch = buffer[pos++];
      if (ch < '0' || ch > '9')
      {
         if (value > 0)
         {
            break;
         }
         continue;
      }
      value = 10 * value + (ch - '0');
   }
   return value;
}

struct Interval
{
    int first;
    int second;
};

bool IntervalCompare(const Interval& i1, const Interval& i2)
{
    return (i1.first < i2.first);
}

Interval intervals[MAX_INTERVALS+1];

int internalNodesCounter = 0;

class InternalTree
{
public:
    int counter;
    int middle;
    int minLeft;
    int maxLeft;
    int minRight;
    int maxRight;

    InternalTree * leftChild;
    InternalTree * rightChild;

    InternalTree(int mid, int N, int indices[]);
    ~InternalTree();

    int count(int K, int group[]);
    int count(int leftAlien, int rightAlien);
};

class SegmentTree
{
public:
    InternalTree * internalTree;
    SegmentTree * rightChild;
    SegmentTree * leftChild;

    SegmentTree(int N, int indices[]);
    ~SegmentTree();

    int count(int K, int group[]);
};

InternalTree::~InternalTree()
{
    if (leftChild != NULL)
    {
        delete leftChild;
    }
    if (rightChild != NULL)
    {
        delete rightChild;
    }
}

SegmentTree::~SegmentTree()
{
    if (leftChild != NULL)
    {
        delete leftChild;
    }
    if (rightChild != NULL)
    {
        delete rightChild;
    }
    if (internalTree != NULL)
    {
        delete internalTree;
    }
}

int InternalTree::count(int K, int group[])
{
    int leftAlien = -1;
    int rightAlien = MAX_ALIEN;
    for (int i = 0; i < K; ++i)
    {
        int alien = group[i];
        if ((alien <= middle) && (alien > leftAlien))
        {
            leftAlien = alien;
        }
        if ((alien >= middle) && (alien < rightAlien))
        {
            rightAlien = alien;
        }
    }
    return count(leftAlien, rightAlien);
}

int InternalTree::count(int leftAlien, int rightAlien)
{
/*
    cout << "INTERNAL COUNT middle: " << middle << " minLeft: " << minLeft << " maxLeft: " << maxLeft;
    cout << " minRight: " << minRight << " maxRight: " << maxRight << endl;
    cout << " left: " << leftAlien << " right: " << rightAlien << endl;
*/
    if ((leftAlien >= maxLeft) || (rightAlien <= minRight))
    {
//        cout << "FOUND: " << counter << endl;
        return counter;
    }
    if ((leftAlien < minLeft) && (rightAlien > maxRight))
    {
//        cout << "SKIP " << endl;
        return 0;
    }
//    cout << "GO TO CHILD: " << endl;
    int cnt = 0;
    if (rightChild != NULL)
    {
//        cout << "RIGHT" << endl;
        cnt += rightChild->count(leftAlien, rightAlien);
    }
    if (leftChild != NULL)
    {
//        cout << "LEFT" << endl;
        cnt += leftChild->count(leftAlien, rightAlien);
    }
    return cnt;
}

int SegmentTree::count(int K, int group[])
{
//    cout << "SEGMENT COUNT" << endl;
    int cnt = 0;
    if (internalTree != NULL)
    {
        cnt += internalTree->count(K, group);
    }
    if (leftChild != NULL)
    {
        cnt += leftChild->count(K, group);
    }
    if (rightChild != NULL)
    {
        cnt += rightChild->count(K, group);
    }
    return cnt;
}

SegmentTree::SegmentTree(int N, int indices[])
{
    int middleIndex = N/2;
    int middle = intervals[indices[middleIndex]].first;
    
    int leftIndicesCnt = 0;
    int rightIndicesCnt = 0;
    int internalIndicesCnt = 0;
    for (int i = 0; i < N; ++i)
    {
        int index = indices[i];
        Interval& interval = intervals[index];
        if (interval.second < middle)
        {
            leftIndicesCnt++;
            continue;
        }
        if (interval.first > middle)
        {
            rightIndicesCnt++;
            continue;
        }
        internalIndicesCnt++;
    }

    int leftIndices[leftIndicesCnt];
    int rightIndices[rightIndicesCnt];
    int internalIndices[internalIndicesCnt];
    leftIndicesCnt = 0;
    rightIndicesCnt = 0;
    internalIndicesCnt = 0;
    for (int i = 0; i < N; ++i)
    {
        int index = indices[i];
        Interval& interval = intervals[index];
        if (interval.second < middle)
        {
            leftIndices[leftIndicesCnt++] = index;;
            continue;
        }
        if (interval.first > middle)
        {
            rightIndices[rightIndicesCnt++] = index;
            continue;
        }
        internalIndices[internalIndicesCnt++] = index;
    }

    leftChild = NULL;
    rightChild = NULL;
    internalTree = NULL;
    if (leftIndicesCnt > 0)
    {
        leftChild = new SegmentTree(leftIndicesCnt, leftIndices);
    }
    if (rightIndicesCnt > 0)
    {
        rightChild = new SegmentTree(rightIndicesCnt, rightIndices);
    }
    if (internalIndicesCnt > 0)
    {
        internalTree = new InternalTree(middle, internalIndicesCnt, internalIndices);
    }
}

InternalTree::InternalTree(int mid, int N, int indices[])
{
    internalNodesCounter++;
    middle = mid;
    counter = N;
   
    minLeft = MAX_ALIEN;
    minRight = MAX_ALIEN;
    maxLeft = -1;
    maxRight = -1;
    for (int i = 0; i < N; ++i)
    {
        int index = indices[i];
        int left = intervals[index].first;
        int right = intervals[index].second;
        minLeft = min(left, minLeft);
        maxLeft = max(left, maxLeft);
        minRight = min(right, minRight);
        maxRight = max(right, maxRight);
    }

    if ((counter < 2) || ((minLeft == maxLeft) && (minRight == maxRight)))
    {
        leftChild = NULL;
        rightChild = NULL;
        return;
    }
    int leftCnt = 0;
    int rightCnt = 0;
    int middleValue;
    if ((maxLeft - minLeft) > (maxRight - minRight))
    {
        middleValue = (maxLeft+minLeft)/2;
        for (int i = 0; i < N; ++i)
        {
            int index = indices[i];
            if (intervals[index].first <= middleValue)
            {
                leftCnt++;
            }
            else
            {
                rightCnt++;
            }
        }    
    }
    else
    {
        middleValue = (maxRight+minRight)/2;
        for (int i = 0; i < N; ++i)
        {
            int index = indices[i];
            if (intervals[index].second <= middleValue)
            {
                leftCnt++;
            }
            else
            {
                rightCnt++;
            }
        }
    }
    int leftChildIndices[leftCnt];
    int rightChildIndices[rightCnt];
    leftCnt = 0;
    rightCnt = 0;
    if ((maxLeft - minLeft) > (maxRight - minRight))
    {
        middleValue = (maxLeft+minLeft)/2;
        for (int i = 0; i < N; ++i)
        {
            int index = indices[i];
            if (intervals[index].first <= middleValue)
            {
                leftChildIndices[leftCnt++] = index;
            }
            else
            {
                rightChildIndices[rightCnt++] = index;
            }
        }    
    }
    else
    {
        middleValue = (maxRight+minRight)/2;
        for (int i = 0; i < N; ++i)
        {
            int index = indices[i];
            if (intervals[index].second <= middleValue)
            {
                leftChildIndices[leftCnt++] = index;
            }
            else
            {
                rightChildIndices[rightCnt++] = index;
            }
        }
    }
/*
    cout << "COUNTER: " << counter << " LCI: " << leftCnt;
    cout << " RCI: " << rightCnt << " MIDDLE: " << middleValue << endl;
    cout << " RIGHT: " << minRight << " " << maxRight << endl;
    cout << " LEFT: " << minLeft << " " << maxLeft << endl;
*/
    leftChild = new InternalTree(middle, leftCnt, leftChildIndices);
    rightChild = new InternalTree(middle, rightCnt, rightChildIndices);
}

void testCase(SegmentTree * tree)
{
    int K;
    int group[MAX_K+1];
    K = getIntFromStream();
    for (int i = 0; i < K; ++i)
    {
        int G;
        G = getIntFromStream();
        group[i] = G;
    }
    printf("%d\n", tree->count(K, group));
}

int main()
{
    int indices[MAX_INTERVALS+1];

    initStream();

    int N;
    N = getIntFromStream();
    for (int i = 0; i < N; ++i)
    {
        intervals[i].first = getIntFromStream();
        intervals[i].second = getIntFromStream();
        indices[i] = i;
    }
    sort(intervals, intervals + N, IntervalCompare);

    SegmentTree * tree = new SegmentTree(N, indices);

    int Q;
    Q = getIntFromStream();
    for (int i = 0; i < Q; ++i)
    {
        testCase(tree);
    }
    
    delete tree;
}
