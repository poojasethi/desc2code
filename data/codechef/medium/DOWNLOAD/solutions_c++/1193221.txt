#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
#include <cassert>
#include <set>

using namespace std;

typedef long long LL;
typedef pair<int,int> PI;

#define MX 100010
#define F first
#define S second
#define MP(x,y) make_pair(x,y);
#define PB(x) push_back(x);

const int lim = 3*MX;
int bit[lim];

void update(int x,int v)
{ 
	for(;x<lim;x+=x&-x) bit[x]+=v; 
}

int prefsum(int x)
{ 
	int r=0;
	for(;x;x-=x&-x) r+=bit[x];
	return r; 
}

int N, Q;
int from[MX], ans[MX], query[5001][21];
vector< pair<int,PI> > A;

void solve()
{
	sort(A.begin(),A.end());

	for(int i=0, compx=1;i<A.size();i++)
	{
		if(i>0 && A[i].F!=A[i-1].F) compx++;

		if(A[i].S.F<-MX) // input [-----
			update( from[-A[i].S.F-MX] = compx , 1 );

		else if( A[i].S.F < 0 ) // query point *
		{
			int qind = -A[i].S.F, qj = A[i].S.S;
			ans[qind] += prefsum(compx);
			query[qind][qj] = compx;
			if(qj>0) ans[qind] -= prefsum( query[qind][qj-1] );
		}

		else // input -----]
			update( from[A[i].S.F] , -1 );
	}
		
}

int main()
{
	scanf("%d",&N);
	for(int i=1;i<=N;i++)
	{
		int x, y;
		scanf("%d %d",&x,&y);
		from[i] = x;
		A.push_back( make_pair( x, make_pair(-MX-i,0) )  );
		A.push_back( make_pair( y, make_pair(i,1) )  );
	}

	scanf("%d",&Q);
	for(int i=1;i<=Q;i++)
	{
		int k;
		scanf("%d",&k);
		for(int j=0;j<k;j++) scanf("%d",&query[i][j]);
		sort(query[i],query[i]+k);
		for(int j=0;j<k;j++) A.push_back(make_pair( query[i][j], make_pair(-i,j)));
	}

	solve();

	for(int i=1;i<=Q;i++)
	{
		printf("%d\n",ans[i]);
	}
	
	return 0;
}