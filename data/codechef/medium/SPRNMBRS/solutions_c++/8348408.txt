/*
You need to know about about two important properties of Euler's Totient Function ?(n).

The function ?(n) is multiplicative i.e. if gcd(m,n)=1, then ?(mn)=?(m)*?(n).
Let's see what is value of ?(pk) where p is a prime and k=1. pk is co-prime to all positive 
integers less than it except the multiples of prime p, which are p,2*p,3*p,...pk-1*p. Therefore, ?(pk)=pk-pk-1.
Using above two properties, we can define ?(n) for a general N=pk11,pk22,...,pknn(where pi are distinct primes). 
We know, using multiplicative property that 
?(N)=?(pk11)*?(pk11)*...*?(pknn) 
which can be written as

?(N)=pk11*(1-1p1)*pk22*(1-1p2)*...*pknn*(1-1pn) 
which is same as 
?(N)=N*(p1-1)*(p2-1)*...*(pn-1)p1*p2*...*pn.

Now, for ?(N) to divide N, (p1-1)*(p2-1)*...*(pn-1) should divide
 p1*p2*...*pn. Let's say we don't include 2 as any of the pi, then of course, 
 its never possible because all primes pi will be odd and pi-1 is even for all primes.

So, we need to include p1=2. So we want (p2-1)*...*(pn-1) to divide 2*p2*...*pn,
 where all p2,p3,...pn are odd. This can happen when

n=0, i.e. N=1.
n=1 and p1=2, i.e N is a power of 2.
n=2 and p1=2 and p2=3, i.e N is product of powers of 2 and 3.
Now, we just have to count numbers of this form in range L to R. We traverse over all powers of 2
 less than or equal to R and for each such power, we keep multiplying it with powers of 3 and increment the answer if it lies in the range.

L, R = input
answer = 0

value = 2
while( value < = R )
    current = value
    while current <= R:
        if L <= current <= R:
            answer ++
        current *= 3
    value *= 2

//we haven't included N=1 in our answer
if L <= 1 <= R:
    answer ++

print answer
COMPLEXITY:
================ 
There are log2R powers of 2 we are considering and for each such power we can 
in worst case consider log3R values. So, an upper bound on complexity can be said as log2R*log3R.
*/

#include<stdio.h>
int main()
{
	int t;
	unsigned long long int L,R,i,j,k=2,l=3,count;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%llu %llu",&L,&R);
		count=0;
		i=2;
		while(i<=R)
		{
			j=i;
			while(j<=R)
			{
				if(L<=j && j<=R ) count++;
				j=j*l;
			}
			
			i=i*k;
			
		}
	if(L<=1 && 1<=R) count++;
	printf("%llu\n",count);
    
	}
	
}