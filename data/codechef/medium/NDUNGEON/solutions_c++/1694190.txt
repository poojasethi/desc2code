//Plan use Djikstra's algorithm
#include<cstdio>

const int maxN = 72;
const int maxM = 72;
const int inf = 1e8;//pseudo infinity
int M, N;
int T,Px, Py;

int dungeon[maxM][maxN];
int dist[maxM][maxN];//distance matrix for djikstra algorithm
int visited[maxM][maxN];

//helper functions

int min(int a, int b){return a<b?a:b;}

void init()
{
    for(int i=0; i<M; i++)
    for(int j=0; j<N; j++)
    dist[i][j] = inf, visited[i][j] = 0;

}
//changes current node to node with least distance (O(n^2)) here can be made better by maintaining alternative data structure

void findmin(int *x, int* y)
{
    int min = inf;

    for(int i=0; i<M; i++)
    for(int j=0; j<N; j++)
    if(min>dist[i][j] && !visited[i][j])min= dist[i][j], *x =i, *y =j;

}
//returns cost of minimum path(we know it exists :D)
int djikstra()
{
    int i=0, j=0;
    dist[i][j] = dungeon[i][j];
    while(!(i== Py-1 && j==Px-1))//while we do not reach Princess' room
    {
            //towards top
            if(i-1>=0 && !visited[i-1][j]) dist[i-1][j] = min(dist[i-1][j], dist[i][j]+ dungeon[i-1][j]);

             //towards bot
            if(i+1<=M-1 && !visited[i+1][j]) dist[i+1][j] = min(dist[i+1][j], dist[i][j]+ dungeon[i+1][j]);

            //towards right
             if(j+1<=N-1 && !visited[i][j+1]) dist[i][j+1] = min(dist[i][j+1], dist[i][j] + dungeon[i][j+1]);

                //towards right
             if(j-1>=0 && !visited[i][j-1]) dist[i][j-1] = min(dist[i][j-1], dist[i][j] + dungeon[i][j-1]);

             visited[i][j] =1;

             findmin(&i, &j);
    }
    return dist[i][j];
}
int main()
{
int rt;
scanf("%d%d", &M, &N);
init();//initialize stuff

//take in the dungeon
for(int i=0; i<M; i++)
for(int j=0; j<N; j++)
scanf("%d", &dungeon[i][j]);

//take in last line
scanf("%d %d %d", &Py, &Px, &T);

rt = djikstra();//get required time

if(rt<=T)//can save :)
{
    printf("%s\n%d\n", "YES", T-rt);//T-rt is time to spare
}
else//cannot save :(
printf("%s\n", "NO");
}
