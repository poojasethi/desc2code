#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <stdarg.h>
#include <cassert>
#include <fstream>

using namespace std;

//make macros available for redefinition.
#undef LOCAL
#undef DEBUG
#undef CONSOLE
#undef INFILE
#undef OUTFILE

#define LOCAL

#ifdef LOCAL
#define INFILE
//#define DEBUG
#define CONSOLE
//#define OUTFILE
#endif

#ifdef ONLINE_JUDGE //enough for codechef and codeforces
#undef LOCAL
#undef INFILE
#undef OUTFILE
#undef CONSOLE
#undef DEBUG
#endif
//otherwise uncomment following lines
/*
#undef LOCAL
#undef INFILE
#undef OUTFILE
#undef CONSOLE
#undef DEBUG
*/


#ifdef LOCAL
#define getcha getchar
#endif
#ifndef LOCAL
#ifdef _MSC_VER
#define getcha getchar
#else
#define getcha getchar_unlocked
#endif
#endif

#define ll long long

#define PR(id) printf("The value of " #id " is %d\n", id)
#define glue(a,b) a ## b

#ifdef CONSOLE
#include<conio.h>
#endif

int scan() {
	int t = 0;
	char c = getcha();
	while(c<'0' || c>'9') c = getcha();
	while(c>='0' && c<='9') {
		t = 10 * t + c - 48;
		c = getcha();
	}
	return t;
}

ll scanl() {
	ll t=0;
	char c = getcha();
	while(c<'0' || c>'9') c = getcha();
	while(c>='0' && c<='9') {
		t = 10 * t + c - 48;
		c = getcha();
	}
	return t;
}

/* ADD PROGRAM LOGIC HERE */

#define max_int 1000000000

int board[72][72];
int ans[72][72];
void go() {
	int n=scan(),m=scan();
	for(int i=1; i<=n; i++) {
		for(int j=1; j<=m; j++) {
			board[i][j] = scan();
		}
	}
	for(int i=0; i<=n+1; i++) {
		for(int j=0; j<=m+1; j++) {
			ans[i][j] = max_int;
		}
	}
	ans[1][1] = board[1][1];
	for(int i=0; i<=100; i++) {
		for(int i=1; i<=n; i++) {
			for(int j=1; j<=m; j++) {
				int a = min(ans[i-1][j],ans[i+1][j]);
				a = min(a,ans[i][j-1]);
				a = min(a,ans[i][j+1]);
				ans[i][j] = min(a+board[i][j],ans[i][j]);
			}
		}
	}
	int x=scan(),y=scan(),t=scan();
	if(ans[x][y]<=t) {
		printf("YES\n");
		printf("%d\n",t-ans[x][y]);
	}
	else printf("NO\n");
}
	

/*  */

int main() {

#ifdef INFILE
	freopen("in.txt","r",stdin);
#endif
#ifdef OUTFILE
	freopen("out.txt","w",stdout);
#endif

	//call function here.
	go();


#ifdef DEBUG
	printf("\nEND\n");
#endif
#ifdef CONSOLE
	_getch();
#endif

	return 0;
}