#include <cstdio>
#include <queue>
#include <climits>

using namespace std;

typedef struct node {
	int i;
	int j;
	int w;
} node;

bool operator<(const node& l, const node& r){
	return l.w > r.w;
}

int w[71][71];
int d[71][71];
int m, n;

bool valid(int x, int y){
	if (x>=1 && x<=m && y>=1 && y<=n) return true;
	return false;
}


int main(){
	
	scanf("%d %d", &m, &n);
	for (int i=1; i<=m; i++){
		for (int j=1; j<=n; j++){
			scanf("%d", &w[i][j]);
			d[i][j]=INT_MAX;
		}
	}

	int ex, ey, t;
	scanf("%d %d %d", &ex, &ey, &t);

	priority_queue<node> q;
	node s;
	s.i= s.j = 1;
	s.w=w[1][1];
	d[1][1]=s.w;
	q.push(s);
	int ans;
	while (!q.empty()){
		node e = q.top();
		//
		if (e.i==ex && e.j==ey){
			ans = e.w;
			break;
		}
		q.pop();
		for (int i=-1; i<=1; i++){
			for (int j=-1; j<=1; j++){
				if ((i==0 && j==0) || i*j!=0) continue;
				int x=e.i+i; int y=e.j+j;
				if (!valid(x,y)) continue;
				if (d[x][y] > e.w+w[x][y]){
					d[x][y] = e.w+w[x][y];
					node c;
					c.i=x;
					c.j=y;
					c.w=d[x][y];
					q.push(c);
				}
			}
		}
	}

	if (d[ex][ey]<t){
		printf("YES\n%d", t-d[ex][ey]);
	} else {
		printf("NO");
	}
	return 0;
}