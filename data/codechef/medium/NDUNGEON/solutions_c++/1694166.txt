#include<cstdio>


//int maxN = 72;
//int maxM = 72;
const int maxN = 72;
const int maxM = 72;
const int inf = 1e8;
int M, N;
int T,Px, Py;

int dungeon[maxM][maxN];
int dist[maxM][maxN];
int visited[maxM][maxN];

int min(int a, int b){return a<b?a:b;}
void init()
{
    for(int i=0; i<M; i++)
    for(int j=0; j<N; j++)
    dist[i][j] = inf, visited[i][j] = 0;

}
void print()
{
    for(int i=0; i<M; i++)
    {
        for(int j=0; j<N; j++)
        printf("%d ", dist[i][j]);
        printf("\n");
    }
}
void printin()
{
    for(int i=0; i<M; i++)
    {
        for(int j=0; j<N; j++)
        printf("%d ", dungeon[i][j]);
        printf("\n");
    }
}
void findmin(int *x, int* y)
{
    int min = inf;

    for(int i=0; i<M; i++)
    for(int j=0; j<N; j++)
    if(min>dist[i][j] && !visited[i][j])min= dist[i][j], *x =i, *y =j;

}

int djikstra()
{
    int i=0, j=0;
    dist[i][j] = dungeon[i][j];
    while(!(i== Py-1 && j==Px-1))
    {
            //towards top
            if(i-1>=0 && !visited[i-1][j]) dist[i-1][j] = min(dist[i-1][j], dist[i][j]+ dungeon[i-1][j]);

             //towards bot
            if(i+1<=M-1 && !visited[i+1][j]) dist[i+1][j] = min(dist[i+1][j], dist[i][j]+ dungeon[i+1][j]);

            //towards right
             if(j+1<=N-1 && !visited[i][j+1]) dist[i][j+1] = min(dist[i][j+1], dist[i][j] + dungeon[i][j+1]);

                //towards right
             if(j-1>=0 && !visited[i][j-1]) dist[i][j-1] = min(dist[i][j-1], dist[i][j] + dungeon[i][j-1]);

             visited[i][j] =1;

             findmin(&i, &j);
    }
    return dist[i][j];
}
/*int solve(int i, int j)
{
    int u=max, d=max, l=max, r=max;
    visited[i][j] = 1;

    if(quest[i][j]!= -1)
    return quest[i][j];





    if(i == Py- 1 && j== Px - 1)
    {
    quest[i][j] = dungeon[i][j];
    return quest[i][j];
    }
    //towards top
    if(i-1>=0 && !visited[i-1][j]) u = solve(i-1, j);
    //towards bot
    if(i+1<=M-1 && !visited[i+1][j]) d = solve(i+1, j);
    //towards right
    if(j+1<=N-1 && !visited[i][j+1]) r = solve(i, j+1);
    //towards left
    if(j-1>= 0 && !visited[i][j-1])l = solve(i, j-1);


    quest[i][j] = dungeon[i][j]+ min(u,d,l,r);
    printf("%d %d\n", i , j);
    print();
    return quest[i][j];


}
*/
int main()
{
int rt;
scanf("%d%d", &M, &N);
init();
for(int i=0; i<M; i++)
for(int j=0; j<N; j++)
scanf("%d", &dungeon[i][j]);


scanf("%d %d %d", &Py, &Px, &T);
rt = djikstra();
if(rt<=T)
{
    printf("%s\n%d\n", "YES", T-rt);
}
else
printf("%s\n", "NO");
}
