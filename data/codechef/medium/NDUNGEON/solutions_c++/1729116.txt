/*-->>Light Cavalry<<--*/

//Imp header files
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <set>
#include <vector>
#include <stack>
#include <queue>
#include <sstream>
#include <map>
#include <list>
#include <deque>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iomanip>
#include <sstream>
#include <ctime>
#include <cassert>
#include <climits>
using namespace std;

//defined I/O
#define si(n) scanf("%d",&n)
#define sli(n) scanf("%ld",&n)
#define slli(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define GetLine(n) getline(cin,n);
#define ss(n) scanf("%s",n)
#define pi(n) printf("%d",n)
#define pli(n) printf("%ld",n)
#define plli(n) printf("%lld",n)
#define pf(n) printf("%lf",n)
#define ps(n) printf("%s",n)
#define newLine printf("\n")
#define space printf(" ")
#define SWAP(a,b,t) t=a,a=b,b=t
#define Loop(i,a,n) for(__typeof(n) i(a); i<n; i++)
#define ULL unsigned long long int
#define LL long long int 

#define MOD 1000000007
//Imp functions
int max(int x,int y){ return (x>y)?x:y;};
int min(int x,int y){ return (x<y)?x:y;};
int gcd(int a, int b){if(b == 0)return a;else return gcd(b,a % b);}

//Fast IO
int read()
{
int n = 0;
char c;
 
while(!isdigit(c = getchar()));
while(isdigit(c))
{
n = n * 10 + c - '0';
c = getchar();
}
 
return n;
}


int main()
{
	
	int n,m;
	n=read();
	m=read();
	
	multimap<int,int> mp;
	multimap<int,int>::iterator it;
	    std::pair <std::multimap<int,int>::iterator, std::multimap<int,int>::iterator> ret;
	int dist[n*m];
	
	Loop(i,0,m*n)
	dist[i]=-1;
	
	int a[n][m];
	int pos[n][m];
	int k=0;
	Loop(i,0,n)
	{
		Loop(j,0,m){
		a[i][j]=read();
		pos[i][j]=k++;
		}
		
	}
	int x,y,t;
	x=read();y=read();t=read();
	dist[0]=a[0][0];
	
	mp.insert ( std::pair<int,int>(a[0][0],0) );
	
	int v=0,w=0;
	while(!mp.empty())
	{
		it=mp.begin();
		v=(*it).second;
		mp.erase(it);
		int i=v/m;//3
		int j=v%m;//2
		//cout<<v<<endl;
		int d=0;
		if(i+1<n)
		{
			d=dist[v]+a[i+1][j];
			w=v+m;
			if(dist[w]==-1)
			{
				dist[w]=d;
				mp.insert ( std::pair<int,int>(dist[w],w ));
			}
			
			if(dist[w]>d)
			{
				ret = mp.equal_range(dist[w]);
				for (std::multimap<int,int>::iterator it=ret.first; it!=ret.second; ++it)
				{
					if((*it).second==w)
					{
						mp.erase(it);
						mp.insert ( std::pair<int,int>(dist[w],w ));	
					}
					
				}
				dist[w]=d;
				

				
			}
			
//cout<<v<<" "<<w<<" "<<i+1<<" "<<j<<" "<<d<<endl;
		}
		
		if(i-1>=0)
		{
			 d=dist[v]+a[i-1][j];
			w=v-m;
			if(dist[w]==-1)
			{
				dist[w]=d;
				mp.insert ( std::pair<int,int>(dist[w],w ));
			}
			
			if(dist[w]>d)
			{
				ret = mp.equal_range(dist[w]);
				for (std::multimap<int,int>::iterator it=ret.first; it!=ret.second; ++it)
				{
					if((*it).second==w)
					{
						mp.erase(it);
						mp.insert ( std::pair<int,int>(dist[w],w ));	
					}
					
				}
				dist[w]=d;
				

				
			}
//cout<<v<<" "<<w<<" "<<i-1<<" "<<j<<" "<<d<<endl;
		}
		
		if(j+1<m)
		{
			 d=dist[v]+a[i][j+1];
			w=v+1;
			if(dist[w]==-1)
			{
				dist[w]=d;
				mp.insert ( std::pair<int,int>(dist[w],w ));
			}
			
			if(dist[w]>d)
			{
				dist[w]=d;
				mp.insert ( std::pair<int,int>(dist[w],w ));	
			}			if(dist[w]>d)
			{
				ret = mp.equal_range(dist[w]);
				for (std::multimap<int,int>::iterator it=ret.first; it!=ret.second; ++it)
				{
					if((*it).second==w)
					{
						mp.erase(it);
						mp.insert ( std::pair<int,int>(dist[w],w ));	
					}
					
				}
				dist[w]=d;
				

				
			}
		//	cout<<v<<" "<<w<<" "<<i<<" "<<j+1<<" "<<d<<endl;
		}
		
		if(j-1>=0)
		{
			 d=dist[v]+a[i][j-1];
			w=v-1;
			if(dist[w]==-1)
			{
				dist[w]=d;
				mp.insert ( std::pair<int,int>(dist[w],w ));
			}
			
						if(dist[w]>d)
			{
				ret = mp.equal_range(dist[w]);
				for (std::multimap<int,int>::iterator it=ret.first; it!=ret.second; ++it)
				{
					if((*it).second==w)
					{
						mp.erase(it);
						mp.insert ( std::pair<int,int>(dist[w],w ));	
					}
					
				}
				dist[w]=d;
				

				
			}
		//	cout<<v<<" "<<w<<" "<<i<<" "<<j-1<<" "<<d<<endl;
		}
		
		
	}
	
	if(dist[pos[x-1][y-1]]<=t)
	{
		printf("YES\n%d",t-dist[pos[x-1][y-1]]);
	}
	else
	printf("NO\n");
	
	
	
	return 0;
}


