#include <iostream>
#include <cstdio>
#include <set>
#include <algorithm>
#include <vector>
using namespace std;

const int INF = 1000000000;
int t, n, m, x, y;
int a[77][77];
int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};
int visited[77][77];
int d[77][77];

int main()
{
    //freopen("in.txt", "r", stdin);
    scanf("%d%d", &n, &m);
    for (int i=0; i<n; i++) for (int j=0; j<m; j++) {
        scanf("%d", &a[i][j]);
        visited[i][j] = 0;
        d[i][j] = INF;
    }
    scanf("%d%d%d", &x, &y, &t);
    x--; y--;
    set<pair<int, pair<int, int> > > q;
    q.insert(pair<int, pair<int, int> > (a[0][0], pair<int,int>(0,0)));
    while (!q.empty()) {
        pair<int, pair<int, int> > now = *q.begin();
        q.erase(now);
        int i = now.second.first;
        int j = now.second.second;
        int dist = now.first;
        visited[i][j] = 1;
        d[i][j] = dist;
        if (i==x && j==y) break;
        for (int k=0; k<4; k++) {
            if ((i+dx[k])>=0 && (i+dx[k])<n && (j+dy[k])>=0 && (j+dy[k])<m) {
                if (!visited[i+dx[k]][j+dy[k]]) {
                    q.insert(pair<int, pair<int, int> > (dist+a[i+dx[k]][j+dy[k]], pair<int,int>(i+dx[k], j+dy[k])));
                }
            }
        }
    }
    if (d[x][y]<=t) {
        printf("YES\n%d\n", t-d[x][y]);
    } else
        printf("NO\n");
    return 0;
}
