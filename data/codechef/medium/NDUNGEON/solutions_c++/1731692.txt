#include<cstdio>
#include<iostream>
#include<queue>
#include<utility>
#define INF 20000001
#define P pair<int,int>
#define Node pair<int,P>
#define X second.first
#define Y second.second
#define V first
using namespace std;
int A[ 1001 ][ 1001 ] ;
int D[ 1001 ][ 1001 ] ;
class compare {
  public:
  bool operator() (const Node& lhs, const Node&rhs) const
  {
   return (lhs.V > rhs.V);
  }
};
Node f(int i, int j, int x, int y ) {

 int v = D[i][j] + A[x][y];
 Node node;
 node.X = x;
 node.Y = y;
 node.V = -1;
 if( v < D[x][y] ) {
   D[x][y] = v;
   node.V = v;
   return node;
  }
  return node;
}
int main() {
  int T;
  int n,m;
  //scanf("%d",&T);
  T =1;
  while(T--) {
   scanf("%d %d",&m,&n);
   priority_queue<Node, vector<Node>, compare > pq;
   for (int i = 0 ; i < m; i++) {
     for (int j = 0; j < n; j++ ) {
       scanf("%d", &A[i][j]);
       D[i][j] = INF;
     }
   }
   D[0][0] = A[0][0];
   Node p;
   p.X = 0;
   p.Y = 0;
   p.V = A[0][0];
   pq.push(p);
   int sx, sy, y;
   scanf("%d %d %d",&sx,&sy,&y);
   sx--;
   sy--;
   while( !pq.empty()) {
     Node top = pq.top();
     pq.pop();
     int i = top.X;
     int j = top.Y;
     if(top.V > D[i][j]) continue; 
     if(i == sx && j == sy) break; 
     Node node;
     if( i != 0 ) {
       node = f(i,j,i-1,j);
       if( node.V != -1) pq.push(node);
     }
     if( j != 0 ) {
       node = f(i,j,i,j-1);
       if( node.V != -1) pq.push(node);
     }
     if( i != m-1 ) {
       node = f(i,j,i+1,j);
       if( node.V != -1) pq.push(node);
     } 
     if( j != n-1 ) {
       node = f(i,j,i,j+1);
       if( node.V != -1) pq.push(node);
     }
   }
   /*for (int i = 0; i < m; i++ ) {
    for(int j = 0; j < n; j++ ) {
     printf("%d ",D[i][j]);
    }
    printf("\n");
   }*/
   if( D[sx][sy] <= y ) {
     printf("YES\n%d\n",y-D[sx][sy]);
   }
   else {
     printf("NO\n");
   }
  }
  return 0;
}
