#include<iostream>
//#include<fstream>
#include<stdio.h>
using namespace std;
#define INF 2000000000
typedef struct cell
{
    long long int x,y,d;
}cell;
cell h[5000],tmp;
long long int s=0,p[73][73],m,n;
void print_heap()
{
    long long int i=0;
    while(i<=s)
        cout<<h[i++].d<< " ";
    cout<<endl;
}
bool inbound(long long int i,long long int j)
{
    if(i>=1 && i<=m && j>=1 && j<=n)
        return 1;
    return 0;
}
void cell_cpy(cell *a,cell *b)
{
    a->d=b->d;
    a->x=b->x;
    a->y=b->y;
}
void update_heap(long long int dis,long long int i,long long int j)
{
    long long int k,b,t1;
    cell t;
    k=p[i][j];
    h[k].d=dis;
  if(k!=0)
  {
      if(k%2==0)
            b=(k-1)/2;
        else
            b=k/2;
    while(k>0 && h[b].d>h[k].d)
    {
        p[h[b].x][h[b].y]=k;
        p[h[k].x][h[k].y]=b;
        cell_cpy(&t,&h[k]);
        cell_cpy(&h[k],&h[b]);
        cell_cpy(&h[b],&t);

        k=b;
        if(k%2==0)
            b=(k-1)/2;
        else
            b=k/2;

    }
  }
}
void top_heap()
{

    cell_cpy(&tmp,&h[0]);
    cell_cpy(&h[0],&h[s]);
    cell_cpy(&h[s],&tmp);
    s--;
    long long int k=0,t;
    cell m;
    while(k*2+2<=s && !(h[k].d<h[k*2+1].d && h[k].d<h[k*2+2].d))
    {

        if(h[k*2+1].d>h[k*2+2].d)
        {
            p[h[k*2+2].x][h[k*2+2].y]=k;
            p[h[k].x][h[k].y]=k*2+2;
            cell_cpy(&m,&h[k*2+2]);
            cell_cpy(&h[k*2+2],&h[k]);
            cell_cpy(&h[k],&m);
            k=k*2+2;
        }
        else
        {
            p[h[k*2+1].x][h[k*2+1].y]=k;
            p[h[k].x][h[k].y]=k*2+1;
             cell_cpy(&m,&h[k*2+1]);
             cell_cpy(&h[k*2+1],&h[k]);
             cell_cpy(&h[k],&m);
             k=k*2+1;
        }

    }
    if(k*2+1<=s && h[k*2+1].d<h[k].d)
    {
             p[h[k*2+1].x][h[k*2+1].y]=k;
             p[h[k].x][h[k].y]=k*2+1;
             cell_cpy(&m,&h[k*2+1]);
             cell_cpy(&h[k*2+1],&h[k]);
             cell_cpy(&h[k],&m);
    }

}
int main()
{
    //ifstream in ("test.txt");
    long long int c[73][73],i,j,k,cx,cy,t;
    bool v[73][73];
    scanf("%lld%lld",&m,&n);
   for(i=1;i<=m;i++)
        for(j=1;j<=n;j++)
        {
            scanf("%lld",&c[i][j]);
            h[s].d=INF;
            h[s].x=i;
            h[s].y=j;
            p[i][j]=s;
            s++;
            v[i][j]=0;
        }
        s--;
        update_heap(c[1][1],1,1);
        scanf("%lld%lld%lld",&cx,&cy,&t);
        while(!v[cx][cy])
        {
            top_heap();
            //cout<<" 88\n";
            //print_heap();
            v[tmp.x][tmp.y]=1;
            for(i=-1;i<=1;i++)
                for(j=-1;j<=1;j++)
                    if(i*j==0 && i!=j && inbound(tmp.x+i,tmp.y+j) && v[tmp.x+i][tmp.y+j]==0 && h[p[tmp.x+i][tmp.y+j]].d>tmp.d+c[tmp.x+i][tmp.y+j])
                        update_heap(tmp.d+c[tmp.x+i][tmp.y+j],tmp.x+i,tmp.y+j);
           // print_heap();
        }
        if(t>=tmp.d)
        printf("YES\n%lld",t-tmp.d);
        else
            printf("NO");
return 0;
}
