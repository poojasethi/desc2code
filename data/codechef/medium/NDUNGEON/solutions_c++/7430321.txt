#include <iostream>
#include <cstring>
#define MAX 70

using namespace std;
struct coordinates{
    int x;
    int y;
    int weight;
};

coordinates heap[5000];
bool flag[MAX][MAX];
int arr[MAX][MAX];
int size = 0;

void insert_heap(int x,int y,int weight)
{
    int i;
    coordinates temp;
    heap[++size].x = x;
    heap[size].y = y;
    heap[size].weight = weight;
    i = size;
    while(i>1)
    {
        if(heap[i].weight<heap[i/2].weight)
        {
            temp = heap[i];
            heap[i] = heap[i/2];
            heap[i/2] = temp;
            i/=2;
        }
        else
           break;
    }
}

coordinates remove_heap()
{
    int i = 1,loc,min;
    coordinates mincoordinate = heap[1],temp;
    heap[1] = heap[size--];

    while(i<size)
    {
        loc = i;
        min = heap[i].weight;
        if(2*i<=size)
        {
            if(heap[2*i].weight< min)
            {
                loc = 2*i;
                min = heap[2*i].weight;
            }
        }
        if(2*i+1<=size)
        {
            if(heap[2*i+1].weight< min)
            {
                loc = 2*i+1;
            }
        }

        if(loc!=i)
        {
            temp = heap[i];
            heap[i] = heap[loc];
            heap[loc] = temp;
            i = loc;
        }
        else
           break;
    }

    return mincoordinate;

}

int main(){
    int m,n;
    int px,py,pTime;
    int i,j;

    cin>>m>>n;
    for(i = 0;i<m;++i)
        for(j = 0;j<n;++j)
            cin>>arr[i][j];
    cin>>px>>py>>pTime;

    memset(flag,0,sizeof(flag));
    int hflag[70][70];
    memset(hflag,0,sizeof(hflag));

    coordinates X[MAX*MAX],t1,t2,t3,t4;
    int sizeX = 0;
    X[sizeX].x = 0; X[sizeX].y = 0; X[sizeX].weight = arr[0][0];
    flag[0][0] = 1;
    ++sizeX;

    insert_heap(0,1,X[0].weight + arr[0][1]);
    insert_heap(1,0,X[0].weight + arr[1][0]);
    hflag[0][1] = 1; hflag[1][0] = 1;

    int calculatedTime;

    while(sizeX!=m*n){
        X[sizeX] = remove_heap();
        hflag[X[sizeX].x][X[sizeX].y] = -1;
        flag[X[sizeX].x][X[sizeX].y] = 1;
       // cout<<X[sizeX].x<<" "<<X[sizeX].y<<" "<<X[sizeX].weight<<endl;

        if(X[sizeX].x==px-1 && X[sizeX].y == py-1)
            calculatedTime = X[sizeX].weight;

        if(X[sizeX].x==0 && X[sizeX].y == n-1){
                t1.x = 0; t1.y = n-2; t1.weight = arr[0][n-2] + X[sizeX].weight;
                t2.x = 1; t2.y = n-1; t2.weight = arr[1][n-1] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
            }

            else if(X[sizeX].x==0){
                t1.x = 0; t1.y = X[sizeX].y - 1; t1.weight = arr[0][X[sizeX].y - 1] + X[sizeX].weight;
                t2.x = 0; t2.y = X[sizeX].y + 1; t2.weight = arr[0][X[sizeX].y + 1] + X[sizeX].weight;
                t3.x = 1; t3.y = X[sizeX].y ; t3.weight = arr[1][X[sizeX].y] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
                if(flag[t3.x][t3.y]==0 && hflag[t3.x][t3.y]==0){
                    hflag[t3.x][t3.y]=1;
                    insert_heap(t3.x,t3.y,t3.weight);
                }
            }

            else if(X[sizeX].x== m-1 && X[sizeX].y == 0){
                t1.x = m-2; t1.y = 0; t1.weight = arr[m-2][0] + X[sizeX].weight;
                t2.x = m-1; t2.y = 1; t2.weight = arr[m-1][1] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
            }

            else if(X[sizeX].x== m-1 && X[sizeX].y == n-1){
                t1.x = m-2; t1.y = n-1; t1.weight = arr[m-2][n-1] + X[sizeX].weight;
                t2.x = m-1; t2.y = n-2; t2.weight = arr[m-1][n-2] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
            }

            else if(X[sizeX].y==0){
                t1.x = X[sizeX].x - 1; t1.y = 0; t1.weight = arr[X[sizeX].x - 1][0] + X[sizeX].weight;
                t2.x = X[sizeX].x + 1; t2.y = 0; t2.weight = arr[X[sizeX].x + 1][0] + X[sizeX].weight;
                t3.x = X[sizeX].x; t3.y = 1; t3.weight = arr[X[sizeX].x][1] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
                if(flag[t3.x][t3.y]==0 && hflag[t3.x][t3.y]==0){
                    hflag[t3.x][t3.y]=1;
                    insert_heap(t3.x,t3.y,t3.weight);
                }
            }

            else if(X[sizeX].x==0){
                t1.x = 0; t1.y = X[sizeX].y - 1; t1.weight = arr[0][X[sizeX].y - 1] + X[sizeX].weight;
                t2.x = 0; t2.y = X[sizeX].y + 1; t2.weight = arr[1][X[sizeX].y + 1] + X[sizeX].weight;
                t3.x = 1; t3.y = X[sizeX].y ; t3.weight = arr[1][X[sizeX].y] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
                if(flag[t3.x][t3.y]==0 && hflag[t3.x][t3.y]==0){
                    hflag[t3.x][t3.y]=1;
                    insert_heap(t3.x,t3.y,t3.weight);
                }
            }
            else if(X[sizeX].x== m-1){
                t1.x = m-1; t1.y = X[sizeX].y - 1; t1.weight = arr[m-1][X[sizeX].y - 1] + X[sizeX].weight;
                t2.x = m-1; t2.y = X[sizeX].y + 1; t2.weight = arr[m-1][X[sizeX].y + 1] + X[sizeX].weight;
                t3.x = m-2; t3.y = X[sizeX].y ; t3.weight = arr[m-2][X[sizeX].y] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
                if(flag[t3.x][t3.y]==0 && hflag[t3.x][t3.y]==0){
                    hflag[t3.x][t3.y]=1;
                    insert_heap(t3.x,t3.y,t3.weight);
                }
            }

            else if(X[sizeX].y== n-1){
                t1.x = X[sizeX].x-1; t1.y = n-1; t1.weight = arr[X[sizeX].x-1][n-1] + X[sizeX].weight;
                t2.x = X[sizeX].x+1; t2.y = n-1; t2.weight = arr[X[sizeX].x+1][n-1] + X[sizeX].weight;
                t3.x = X[sizeX].x;   t3.y = n-2; t3.weight = arr[X[sizeX].x][n-2] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
                if(flag[t3.x][t3.y]==0 && hflag[t3.x][t3.y]==0){
                    hflag[t3.x][t3.y]=1;
                    insert_heap(t3.x,t3.y,t3.weight);
                }
            }
            else{
                t1.x = X[sizeX].x; t1.y = X[sizeX].y-1; t1.weight = arr[t1.x][t1.y] + X[sizeX].weight;
                t2.x = X[sizeX].x; t2.y = X[sizeX].y+1; t2.weight = arr[t2.x][t2.y] + X[sizeX].weight;
                t3.x = X[sizeX].x-1; t3.y = X[sizeX].y; t3.weight = arr[t3.x][t3.y] + X[sizeX].weight;
                t4.x = X[sizeX].x+1; t4.y = X[sizeX].y; t4.weight = arr[t4.x][t4.y] + X[sizeX].weight;

                if(flag[t1.x][t1.y]==0 && hflag[t1.x][t1.y]==0){
                    hflag[t1.x][t1.y]=1;
                    insert_heap(t1.x,t1.y,t1.weight);
                }
                if(flag[t2.x][t2.y]==0 && hflag[t2.x][t2.y]==0){
                    hflag[t2.x][t2.y]=1;
                    insert_heap(t2.x,t2.y,t2.weight);
                }
                if(flag[t3.x][t3.y]==0 && hflag[t3.x][t3.y]==0){
                    hflag[t3.x][t3.y]=1;
                    insert_heap(t3.x,t3.y,t3.weight);
                }
                if(flag[t4.x][t4.y]==0 && hflag[t4.x][t4.y]==0){
                    hflag[t4.x][t4.y]=1;
                    insert_heap(t4.x,t4.y,t4.weight);
                }
            }
    ++sizeX;
    }

    if(calculatedTime<=pTime){
        cout<<"YES\n"<<pTime-calculatedTime;
    }
    else
        cout<<"NO\n";
return 0;
}
