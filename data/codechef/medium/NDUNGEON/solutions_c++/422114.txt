#include<iostream>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>
#include<malloc.h>
#include<vector>
#include<algorithm>
#include<queue>

#define min(a,b) (a>b?b:a)
#define max(a,b) (a>b?a:b)
#define correct(a,b) ((a>=1 && a<=m && b>=1 && b<=n)?1:0)
#define INF 10e7


using namespace std;

char inp[10000000];
char *ptr;

inline int SCAN_INT(void)
{
    while(!(*ptr<='9' && *ptr>='0'))
        ptr++;
    int  ret=0;
    while(*ptr<='9' && *ptr>='0')
        ret=ret*10+(*(ptr++))-'0';
    return ret;
}

int arr[100][100];
int dist[100][100];
int m,n;

int main()
{
   // freopen("input.txt","r", stdin);
	fread(inp, sizeof(char), 10000000, stdin);
	ptr = inp;

	m=SCAN_INT();
	n=SCAN_INT();
	for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            arr[i][j]=SCAN_INT();
            dist[i][j]=INF;
        }
	}
	int a,b,T;
	a=SCAN_INT();
	b=SCAN_INT();
	T=SCAN_INT();
	queue< pair<int,int> > q;
	dist[1][1]=arr[1][1];
	q.push(make_pair(1,1));
	while(!q.empty()){
        pair<int,int> t=q.front();
        q.pop();
        int i=t.first,j=t.second;
        if(correct(i+1,j) && dist[i][j]+arr[i+1][j] < dist[i+1][j]){
            dist[i+1][j]=dist[i][j]+arr[i+1][j];
            q.push(make_pair(i+1,j));
        }
        if(correct(i-1,j) && dist[i][j]+arr[i-1][j] < dist[i-1][j]){
            dist[i-1][j]=dist[i][j]+arr[i-1][j];
            q.push(make_pair(i-1,j));
        }
        if(correct(i,j+1) && dist[i][j]+arr[i][j+1] < dist[i][j+1]){
            dist[i][j+1]=dist[i][j]+arr[i][j+1];
            q.push(make_pair(i,j+1));
        }
        if(correct(i,j-1) && dist[i][j]+arr[i][j-1] < dist[i][j-1]){
            dist[i][j-1]=dist[i][j]+arr[i][j-1];
            q.push(make_pair(i,j-1));
        }
	}
	if(dist[a][b] > T){
        cout<<"NO\n";
	}
	else{
        cout<<"YES\n"<<T-dist[a][b]<<endl;
	}
}
