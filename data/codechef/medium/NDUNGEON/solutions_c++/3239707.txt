#include <iostream>
#include <utility>
#include <queue>
using namespace std;

priority_queue<pair<long long,pair<int,int> > > heap;
int weights[71][71];
long long minsofar[71][71];
bool processed[71][71];
int dx[] = {-1, 0, 0, 1};
int dy[] = {0, -1, 1, 0};

int main() {
    int n, m, a, b, t;
    cin >> n >> m;
    for(int i=0;i<n;++i) {
        for(int j=0;j<m;++j) {
            cin >> t;
            weights[i][j] = -t;
            processed[i][j] = false;
            minsofar[i][j] = -1e18;
        }
    }
    cin >> a >> b >> t;
    --a;--b;
    heap.push(make_pair(weights[0][0],make_pair(0,0)));
    minsofar[0][0] = weights[0][0];

    bool reachable = false;
    long long res;
    while(!heap.empty()) {
        pair<int,pair<int,int> > obj = heap.top();
        heap.pop();
        int x, y;
        long long count;
        count = obj.first;
        x = obj.second.first;
        y = obj.second.second;
        // cout << "path: [" << x << "," << y << "]: " << -count << endl;
        processed[x][y] = true;
        if(count>t) {
            reachable = false;
            break;
        }
        if(x==a && y==b) {
            reachable = true;
            res = t+count;
            break;
        }
        for(int i=0;i<4;++i) {
            int c = x+dx[i];
            int d = y+dy[i];
            if(c>=0 && c<n && d>=0 && d<m && !processed[c][d] && (count+weights[c][d])>minsofar[c][d]) {
                heap.push(make_pair(count+weights[c][d],make_pair(c,d)));
                minsofar[c][d] = count+weights[c][d];
                // cout << "pushed: [" << c << "," << d << "]: " << -(count+weights[c][d]) << endl;
            }
        }
    }
    if(reachable) {
        cout << "YES" << endl;
        cout << res;
    } else cout << "NO" << endl;
    return 0;
}
