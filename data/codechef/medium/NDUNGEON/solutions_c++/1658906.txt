#include <iostream>
#include <cstdio>
#include <map>

using namespace std;

const int MaxN = 100;
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

multimap<int, pair<int, int> > H;
int n, m;
int a[MaxN][MaxN], dist[MaxN][MaxN];

inline bool in(int x, int y) {return (x >= 0 && x < n && y >= 0 && y < m);}

void dijkstra()
{
    for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++) dist[i][j] = -1;
    dist[0][0] = a[0][0];

    H.insert(make_pair(a[0][0], make_pair(0, 0)));

    while (!H.empty())
    {
        multimap<int, pair<int, int> >::iterator it = H.begin();
        int d = (*it).first, x = (*it).second.first, y = (*it).second.second;
        H.erase(it);

        for (int k = 0; k < 4; k++)
        {
            int i = x + dx[k], j = y + dy[k];
            if (in(i, j) && (dist[i][j] < 0 || d + a[i][j] < dist[i][j]))
                {dist[i][j] = a[i][j] + d; H.insert(make_pair(dist[i][j], make_pair(i, j)));}
        }
    }
}

int main()
{
    cin.sync_with_stdio(0);

    cin >> n >> m;
    for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++) cin >> a[i][j];

    dijkstra();

    int T, px, py;
    cin >> px >> py >> T;
    px--; py--;

    if (dist[px][py] > T) {cout << "NO" << endl; return 0;}
    else {cout << "YES" << endl << T - dist[px][py] << endl;}
    return 0;
}
