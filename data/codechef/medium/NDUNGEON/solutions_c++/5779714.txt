#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;
 
template<class A, class B> A cvt(B x) {stringstream s;s<<x;A r;s>>r;return r;}
 
#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i)
#define REV(i,a,b) for(int i= (int )a ; i > (int )b ; --i)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define PP pop()
#define EM empty()
#define INF 1000000000
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x) cout << #x << " " << x << endl
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#define PRESENT(c,x) ((c).find(x) != (c).end())
#define SZ(x) x.size();
#define CPRESENT(c,x) (find(c.begin(),c.end(),x) != (c).end())
#define D(N) int N
#define S(N) scanf("%d",&N)
 
#define CREATE_CLOCK() clock_t ____start, ____diff = 0 ;
#define START_CLOCK() ____start = clock() ;
#define REPORT_CLOCK() ({float f = (((float)clock()) - ____start)/((float)CLOCKS_PER_SEC);printf ("Time = %.6f\n" , f);})
 
typedef pair<int,int> PI;
typedef pair<int,PI> TRI;
typedef V( int ) VI;
typedef V( PI ) VII;
typedef V( string ) VS;
typedef long long LL;
 
int cost[70][70], v[70][70], n, m, xx[4]={-1, 1, 0, 0}, yy[4]={0, 0, -1, 1};
 
struct pto{
int a;
int b;
};
 
struct compare{
bool operator()(pto p, pto q) {
return cost[p.a][p.b]>cost[q.a][q.b];
}
};
 
inline int dijkstra(int fx, int fy)
{
int i, c, d;
pto p, q;
priority_queue <pto, vector <pto>, compare> pq;
p.a=0;
p.b=0;
memset(cost, 0x3f3f3f3f, sizeof cost);
cost[0][0]=v[0][0];
pq.push(p);
while(!pq.empty()) {
p=pq.top();
pq.pop();
if (p.a==fx && p.b==fy) {
return cost[fx][fy];
}
for (i=0; i<4; i++) {
c=p.a+xx[i];
d=p.b+yy[i];
if (c>=0 && c<n && d>=0 && d<m) {
if (cost[p.a][p.b]+v[c][d]<cost[c][d]) {
cost[c][d]=cost[p.a][p.b]+v[c][d];
q.a=c;
q.b=d;
pq.push(q);
}
}
}
}
}
 
int read()
{
int n=0;
char c;
while(!isdigit(c=getchar()));
while(isdigit(c)) {
n=n*10+c-'0';
c=getchar();
}
return n;
}
 
int main()
{
int i, j, fx, fy, mm, temp;
n=read();
m=read();
for (i=0; i<n; i++) {
for (j=0; j<m; j++) {
v[i][j]=read();
}
}
fx=read();
fy=read();
mm=read();
temp=dijkstra(fx-1, fy-1);
if (temp<=mm) {
printf("YES\n%d\n", mm-temp);
}
else {
puts("NO");
}
return 0;
}
