#include <iostream>
#include <cstring>
#include <queue>
using namespace std;
 
int cost[70][70], v[70][70], n, m, xx[4] = {-1, 1, 0, 0}, yy[4] = {0, 0, -1, 1};
 
struct pto
{
 int a;
 int b;
};
 
struct compare
{
  bool operator()(pto p, pto q) 
  {
    return cost[p.a][p.b] > cost[q.a][q.b];
  }
};
 
inline int dijkstra(int fx, int fy)
{
  int i, c, d;
  pto p, q;
  priority_queue <pto, vector <pto>, compare> pq;
  p.a = 0;
  p.b = 0;
  memset(cost, 0x3f3f3f3f, sizeof cost);
  cost[0][0] = v[0][0];
  pq.push(p);
  
  while(!pq.empty()) 
  {
    p = pq.top();
    pq.pop();
    if(p.a == fx && p.b == fy) 
     return cost[fx][fy];

    for(i = 0; i < 4; i++) 
    {
      c = p.a + xx[i];
      d = p.b + yy[i];
      if(c >= 0 && c < n && d >= 0 && d < m) 
      {
        if(cost[p.a][p.b] + v[c][d] < cost[c][d]) 
        {
          cost[c][d] = cost[p.a][p.b] + v[c][d];
          q.a = c;
          q.b = d;
          pq.push(q);
        }
      }
    }
  }
}

// Fast IO function
int read()
{
  int n = 0;
  char c;

  while(!isdigit(c = getchar()));
  while(isdigit(c)) 
  {
    n = n * 10 + c - '0';
    c = getchar();
  }

  return n;
}
 
int main()
{
  int i, j, fx, fy, mm, temp;

  n = read();
  m = read();
  for(i = 0; i < n; i++) 
   for(j = 0; j < m; j++) 
    v[i][j] = read();

  fx = read();
  fy = read();
  mm = read();
  temp = dijkstra(fx - 1, fy - 1);
  if(temp <= mm) 
   printf("YES\n%d\n", mm-temp);
  else 
   puts("NO");

  return 0;
}