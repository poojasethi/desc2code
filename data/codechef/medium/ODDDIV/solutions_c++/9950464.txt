#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstdio>
#define MAX 100005
#define ll long long int

using namespace std;
ll S[MAX];

ll square(ll  x){
	return x*x;
}

ll logpow(int a,int b){
	if(b == 0) return 1ll;
	if(b == 1) return ((ll)a);
	ll res = square(logpow(a,b >> 1));	
	if(b&1 == 1) res *= ((ll)a);	
	return res;
}


ll get_sum_odd_divisors(int a){
	/*int A[a + 1];
	memset(A,0,sizeof A);
	
	while(P[a] != -1){
		A[P[a]]++;
		a /= P[a];
	}
	
	A[a]++;
	ll tot = 1ll;
	for(int i = 3;i <= a;i += 2){
		if(P[i] == -1 && A[i] != 0){
			tot *= (logpow(i,A[i] + 1) - 1ll)/((ll)(i - 1));
		}
	}
	return tot;*/
	//printf("%d",a);
	a /= (a&(-a)); // deleting all pair divisors
	int i = 3;
	ll res = 1ll;
	while(i*i <= a){
		int cont = 0;
		while(a % i == 0){
			a /= i;
			cont++;
		}
		res *= (logpow(i,cont + 1) - 1)/((ll)(i - 1));
		i += 2;
	}
	if(a != 1) res *= ((ll)(a + 1));
	//printf(" sum of odd divisors = %lld\n",res);
	return res;
}

void get_total_sum_odd_divisors(){
	memset(S,0,sizeof S);
	S[0] = 0;
	for(int i = 1;i < MAX;i++){
		S[i] = get_sum_odd_divisors(i) + S[i - 1];
	}
}

int main(){
	int t,l,r;
	scanf("%d",&t);
	//get_primes();
	get_total_sum_odd_divisors();
	
	while(t--){
		scanf("%d %d",&l,&r);
		printf("%lld\n",S[r] - S[l - 1]);
	}
	return 0;
}
