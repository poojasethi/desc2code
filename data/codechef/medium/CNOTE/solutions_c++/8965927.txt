#include <iostream>
#include <cstdio>
#include <iomanip>
#include <cmath>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>

#include <set>

#include <map>


#define ll long long int
#define ull unsigned long long
#define fsentak for(int i=0;i<n;i++)
#define fsentak1 for(int i=0;i<(n-1);i++)
#define s(t) scanf("%d",&t)
#define sc(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sa(my) scanf("%d",&my[i])
#define nlc cout <<endl;
#define nl printf("\n");

#define MAX_INT 99999
#define MIN_INT -99999
#define inf 999999

using namespace std;
using std::string;



/*

static struct IO {
    char tmp[1 << 10];
    
    // fast input routines
    char cur;
    
    //#define nextChar() (cur = getc_unlocked(stdin))
    //#define peekChar() (cur)
    inline char nextChar() { return cur = getc_unlocked(stdin); }
    inline char peekChar() { return cur; }
    
    inline operator bool() { return peekChar(); }
    inline static bool isBlank(char c) { return (c < '-' && c); }
    inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
    
    inline IO& operator >> (char & c) { c = nextChar(); return *this; }
    
    inline IO& operator >> (char * buf) {
        if (skipBlanks()) {
            if (peekChar()) {
                *(buf++) = peekChar();
                while (!isBlank(nextChar())) *(buf++) = peekChar();
            } *(buf++) = 0; } return *this; }
    
    inline IO& operator >> (string & s) {
        if (skipBlanks()) {	s.clear(); s += peekChar();
            while (!isBlank(nextChar())) s += peekChar(); }
        return *this; }
    
    inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
    
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
    
    defineInFor(int)
    defineInFor(unsigned int)
    defineInFor(long long)
    
    // fast output routines
    
    //#define putChar(c) putc_unlocked((c), stdout)
    inline void putChar(char c) { putc_unlocked(c, stdout); }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
    
    inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
    
    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }
    
    
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
    
    defineOutFor(int)
    defineOutFor(long long)
    
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;


*/
inline int lcs(char *a,char *b,int m,int n)
{
    int my[m+1][n+1];
    for(int i=0;i<=m;i++)
    {
        for(int j=0;j<=n;j++)
        {
            if(i==0 || j==0)
                my[i][j]=0;
            else if(a[i-1]==b[j-1])
                my[i][j]=my[i-1][j-1]+1;
            else
                my[i][j]=max(my[i-1][j],my[i][j-1]);
            
        }
    }
    
    return my[m][n];
    
}

ull gcd(ull a,ull b)
{
    if(b==0)
        return a;
    else return gcd(b,a%b);
    
}

int BinarySearch(int arr[],int l,int r,int x)
{
    if(l<=r)
    {
        int m=(l+r)/2;
        
        
        if(arr[m]==x)
            return m;
        if(arr[m]>x)
            return BinarySearch(arr, 0, m, x);
        return BinarySearch(arr,m+1, r, x);
        
        
        
    }
    return -1;
    
}

void printArray(int arr[],int n)
{
    fsentak
    
    {
        cout <<arr[i] <<endl;
        
    }
}


bool Palcheck(int n)
{
    int temp=n;
    
    int rev=0;
    
    while(n>0)
    {
        rev=rev*10 + n%10;
        n/=10;
        
    }
    if(temp==rev)
        return true;
    else
        return false;
    
}

ull ncr(ull n,ull r)
{
    
    
    if(n<r)
        return 0;
    if(r>n/2)
        r=n-r;
    
    
    ull result=1;
    
        for(ull i=1;i<=r;i++)
        {
            ull divider=gcd(result,i);
            result/=divider;
            result*=(n-i+1)/(i/divider);
            
        }
    
    
    
    return result;
    
}

int main(){
    int T, Y, X, K, N, P, C;
    int ok;
    
    scanf("%d",&T);
    while(T--){
        scanf("%d%d%d%d",&X,&Y,&K,&N);
        
        ok = 0;
        while(N--){
            scanf("%d%d",&P,&C);
            if(K >= C && P >= X-Y) ok = 1;
        }
        if(ok==1)
        {
            printf("LuckyChef");
            nl;
            
        }
        else
        {
            printf("UnluckyChef");
            nl;
            
        }
        
    }
    
    return 0;
}
