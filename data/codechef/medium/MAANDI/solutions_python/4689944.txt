#-*- coding:utf-8 -*-


import math
from itertools import product


primes = {1: False}
SIZE1 = 10 ** 3
SIZE2 = 10 ** 5
for p in [2] + range(3, SIZE1, 2):
    if not primes.get(p, True):
        continue
    for n in xrange(p + p, SIZE2, p):
        primes[n] = False


def main():
    t = int(raw_input())
    for _ in xrange(t):
        n = int(raw_input())
        print check_n(n)


def check_n(n):
    limit = int(math.sqrt(n) + 1)
    # if "4" in str(n) or "7" in str(n):
    #     return n
    # if n % 4 == 0:
    #     return 4
    # if n % 7 == 0:
    #     return 7

    n_orig = n
    factors = {}
    for p in xrange(2, limit):
        # if "4" in str(p) or "7" in str(p):
        #     if n % p == 0:
        #         return p
        if primes.get(p, True):
            e = 0
            while n % p == 0:
                e += 1
                n //= p
            if e:
                factors[p] = e
    # if "4" in str(n) or "7" in str(n):
    #     return n
    if n > 1:
        factors[n] = 1

    count = 0
    ps = factors.keys()
    ranges = [range(factors[p] + 1) for p in ps]
    for powers in product(*ranges):
        d = 1
        for p, e in zip(ps, powers):
            d *= p ** e
        if "4" in str(d) or "7" in str(d):
            count += 1
        #print d, powers, ps
    return count

# for n in range(1, 100000):
#     d = check_n(n)

#     assert (n % d == 0) if d else True
# print "OK"
#print check_n(105612312329)
#quit()

if __name__ == '__main__':
    main()
