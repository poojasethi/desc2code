#include <string.h>
#include <algorithm>
#include <iostream>
#include <stdio.h>

using namespace std;

const int N = 200010;
const int mod = 1e9 + 7;

int n, b, q, nt[N];

struct Seg{
	int l, r, s;
}tree[N * 4];

void BTree(int l, int r, int idx){
	tree[idx].l = l;
	tree[idx].r = r;
	tree[idx].s = 0;

	if(l == r) return ;

	int mid = (l + r) >> 1;

	BTree(l, mid, idx << 1);
	BTree(mid + 1, r, idx << 1 | 1);
}

void Insert(int id, int x, int idx){
	if(tree[idx].l == tree[idx].r){
		tree[idx].s = (tree[idx].s + x) % mod;
		return ;
	}

	int mid = (tree[idx].l + tree[idx].r) >> 1;

	if(id <= mid) Insert(id, x, idx << 1);
	else Insert(id, x, idx << 1 | 1);
	tree[idx].s = (tree[idx << 1].s + tree[idx << 1 | 1].s) % mod;
}

int Query(int l, int r, int idx){
	if(r < l) return 0;
	if(tree[idx].l == l && tree[idx].r == r)
		return tree[idx].s;
	int mid = (tree[idx].l + tree[idx].r) >> 1;
	if(r <= mid) return Query(l, r, idx << 1);
	else if(l > mid) return Query(l, r, idx << 1 | 1);
	return (Query(l, mid, idx << 1) + Query(mid + 1, r, idx << 1 | 1)) % mod;
}

int ans[N];

int main(){
	scanf("%d%d", &n, &b);
	BTree(1, n, 1);
	for(int i = 1; i <= n; i++)
		scanf("%d", &nt[i]);
	Insert(b, 1, 1);
	for(int i = b - 1; i >= 1; i--){
		int t = Query(i + 1, i + nt[i], 1);
		Insert(i, t, 1);
		ans[i] = t;
	}
	scanf("%d", &q);
	for(int i = 0; i < q; i++){
		int x;
		scanf("%d", &x);
		printf("%d\n", ans[x]);
	}
	return 0;
}