#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>
 
using namespace std;
 
/*typedef long long int64;
typedef unsigned long long uint64;*/
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
/*template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}*/
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
#define ll long long int
#define Si(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define Pi(x) printf("%d",x);
#define nl printf("\n");
#define Pl(x) printf("%lld",x);
#define mod 1000000007
 
int a[300000],n;
ll st[600000],dp[300000];
int getMid(int s,int e){
return (s+(e-s)/2);
}
ll make_query(ll st[],int ss,int se,int qs,int qe,int index)
{
if(qs<=ss&&qe>=se) return st[index];
if(se<qs||ss>qe) return 0;
int mid=getMid(ss,se);
return (make_query(st,ss,mid,qs,qe,2*index+1)+make_query(st,mid+1,se,qs,qe,2*index+2))%mod;
}
 
void update(ll st[],int ss,int se,int i,int x,int index)
{
if(i<ss||i>se)return;
st[index]+=x;
if(se!=ss)
{
int mid=getMid(ss,se);
update(st,ss,mid,i,x,2*index+1);
update(st,mid+1,se,i,x,2*index+2);
}
}
int main()
{
int q,l,x,tar;
a[0]=0;
Si(n);Si(tar);
for(int i=0;i<500000;i++)st[i]=0;
for(int i=1;i<=n;i++)
{
Si(x);
a[i]=min(tar-i,x);
}
dp[tar]=1;
update(st,0,n,tar,dp[tar],0);
for(int i=tar-1;i>=1;i--)
{
if(a[i]>0) dp[i]=make_query(st,0,n,i+1,i+a[i],0),update(st,0,n,i,dp[i],0);
}
Si(q);
while(q--)
{
Si(l);
if(l<tar){
Pl(dp[l]);nl;}
else printf("0\n");
}
} 