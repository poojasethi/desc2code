#include<bits/stdc++.h>
using namespace std;
#define SF(x)	scanf("%d", &x)
#define PF(x)	printf("%d", x)
#define psp     printf(" ")
#define pnl     printf("\n")
#define charint(c) ((c)-'0')
#define pii pair< int, int >
#define pb(x) push_back(x)
#define test int t; scanf("%d",&t);while(t--)
#define forall(a,b) for(long long i=a;i<=b;i++)
#define abs(a) ((a)>(0)?(a):(-a))
#define bit(x,i)          (x&(1<<i))  //select the bit of position i of x
#define lowbit(x)         ((x)&((x)^((x)-1))) 
#define higbit(x)         (1 << ( int) log2(x) )
#define countleadzero(x)  __builtin_ctz(x) //in its binary representation ex. when x=8 answer is 3
#define countsetbits(x)   ____builtin_popcount(x) //count no of setbits
#define gcd(a,b)   __gcd(a,b)
#define bss binary_search
#define esort(x)        (sort((x).begin(), (x).end()))
#define ersort(x)       (sort((x).rbegin(), (x).rend()))
#define MAX		100050
#define INF		1e9
#define mod    1000000007
#define fi first
#define se second
typedef long long 		ll;
typedef unsigned long long	ull;
ll dp[1000000],fwick[1000000];
void update(int n,int in,int v){
	int i=in;
	while(i<=n){
		fwick[i]+=v;
		i+=i&(-i);
	}
}
ll gsum(int in){
	ll s=0;
	while(in>0){
		s+=fwick[in];
		in -=in&(-in);
	}
	return s;
}
int main(){
int n,b;
SF(n);SF(b);
int cnt[n+1];
forall(1,n){
	SF(cnt[i]);
	if(i+cnt[i]>=b&&i<b){
		dp[i]++;
	update(n,i,1);}
}
for(int i=b-1;i>0;i--){
	ll sum=(gsum(i+cnt[i])-gsum(i))%mod;
//	cout<<gsum(i+cnt[i])<<" "<<gsum(i)<<endl;
	dp[i]=(dp[i]+sum)%mod;
	update(n,i,sum);
}
int q;
SF(q);
while(q--){
	int k;
	SF(k);
	printf("%lld\n",dp[k]);
}
}