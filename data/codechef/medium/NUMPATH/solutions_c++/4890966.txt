//Author: Aman Choudhary
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <map>
#include <cassert>
#define mod  1000000007 
#define PHI 1000000006
#define ull unsigned long long
#define ill long long int
#define pii pair<long long int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define S1(x) scanf("%llu",&x)
#define MAX 100001
#define NIL 0
#define INF (1<<28)
using namespace std;

int n,tar;
int a[200009];
int ans[200009];

int s[1000009];

void update (int node, int x, int y, int ii, int value)
{
    if (x > y) return;
    if (x == y) {
        s[node] = value;
        if (s[node] >= mod) s[node] = s[node]%mod;
        return;
    }
    int mid = (x+y)/2;
    if (ii <= mid) update (node*2, x, mid, ii, value);
    else update (node*2 +1, mid+1, y, ii, value);

    s[node] = s[node*2] + s[node*2 +1];
    if (s[node] >= mod) s[node] = s[node]%mod;
}

int get (int node, int x, int y, int sx, int sy)
{
    if (x > y || sx > sy || sx > y || sy < x) return 0;
    if (sx <= x && sy >= y) return s[node];
    int mid = (x+y)/2;
    int val = get(node*2, x, mid, sx, sy)+get(node*2 +1, mid+1, y, sx, sy);
    if (val >= mod) val = val%mod;
    return val;
}

void process()
{
    memset (ans, 0, sizeof(ans));
    int i;
    //for (i = n-1; i >= tar; i--) ans[i] = 0;
    for (i = tar-1; i >= 0; i--) {
        int x = i+a[i];
        x = min(x, tar-1);
        ans[i] = get(1, 0, n-1, i+1, x);
        if (i+a[i] >= tar) {
            ans[i]++;
            ans[i] = ans[i]%mod;
        }
        update (1, 0, n-1, i, ans[i]);
    }

}

int main()
{
  //  freopen ("input.txt", "r", stdin);

    S (n);
    S (tar);    tar--;
    int i;
    F (i, 0, n) S (a[i]);

    process();

    int q;
    S (q);
    while (q--) {
        int x;
        S (x);
        x--;
        printf ("%d\n", ans[x]);

    }
    return 0;
}
