#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <fstream>
#include <stack>
#include <string>
#include <vector>
#include <list>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
 
 
// Compiler utility
#define int_msb(x) ((31) - __builtin_clz(x))
 
#define sf(a) scanf("%d",&a)
#define ssf(a,b) scanf("%d %d",&a,&b)
#define pf(a) printf("%d\n",a)
#define foreach(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pi pair<int,int>
#define vi vector<int>
#define all(v) v.begin(),v.end()
 
#define pb push_back
#define mp make_pair
#define sz(a) (int)(a).size()
 
#define forn(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define rforn(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define init0(a) memset((a),0,sizeof(a))
 
#define INF 1000000000
#define MOD 1000000007
#define PI 3.1415926535897932
 
using namespace std;
typedef long long LL;
 
 
int main()
{
	int n, b;
	scanf("%d %d", &n, &b);
	vector<int> ni(n);
	for(int i = 0; i < n; i++)
		scanf("%d", &ni[i]);
	
	long long length[n+1];
	long long sum[n+1];
	memset(length, 0, sizeof length);
	memset(sum, 0, sizeof sum);
 
	length[b-1] = 1;
	sum[b-1] = 1;
 
	for(int i = b-2; i >= 0; i--) {
		int start = i+1;
		int end = min(i+ni[i], b-1);
		length[i] = (sum[start] - sum[end+1] + MOD)%MOD;
		sum[i] = (sum[i+1] + length[i])%MOD;
	}
 
	int q;
	cin>>q;
	for(int i = 0; i < q; i++) {
		int v;
		scanf("%d", &v);
		printf("%lld\n", length[v-1]);
	}
 
	return 0;
}