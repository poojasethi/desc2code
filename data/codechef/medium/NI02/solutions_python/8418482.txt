//joyneel
#include<bits/stdc++.h>

using namespace std;

typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);
const LL inf = 2e18;
VII g;
set< pair<LL,int> > s;
set<int> s1;
LL d[3000];

int main(){
	int t;
	si(t);
	while(t--){
		int n,a,b,c,de;
		si(n);
		for(int i=0;i<n;i++){
			si(a);si(b);
			g.PB(MP(a,b));
		}
		si(a);si(b);//src
		si(c);si(de);//dest
		g.PB(MP(c,de));
		int l = SZ(g);
		for(int i=0;i<l;i++){
			LL xd = g[i].F-a;
			LL yd = g[i].S-b;
			LL cst = xd*xd + yd*yd;
			d[i]=cst;
			s.insert(MP(cst,i));
			s1.insert(i);
		}
		while(!s.empty()){
			for(auto it=s.begin();it!=s.end();++it){
				//trace(it->F,it->S);
			}
			II tp = *s.begin();
			s.erase(s.begin());
			LL dist = tp.F;
			int idx = tp.S;
			s1.erase(idx);
			//trace(dist,idx);
			for(auto it=s1.begin();it!=s1.end();++it){
				int i = (*it);
				LL xd = g[i].F-g[idx].F;
				LL yd = g[i].S-g[idx].S;
				LL cst = xd*xd + yd*yd;
				if(d[i] > dist + cst){
					s.erase(s.find(MP(d[i],i)));
					//trace(SZ(s));
					d[i] = dist + cst;
					s.insert(MP(d[i],i));
					//trace(SZ(s));
				}
			}
		}
		lldout(d[l-1]);
		g.clear();
		s.clear();
		s1.clear();
	}
	return 0;
}
