#include<stdio.h>			//Here I used a popular shotest path algorithm.
int main()
{
	int t,nT,i,j,h,Min_Dis,tmp;
	scanf("%d",&t);
	int X[2502],Y[2502]; 		//X,Y:array for x-coordinate and y-coordinate repectively for trees,room and class.
	int Eul_Dis[2502];	   	//This array store minimum Eular distance to reach to any tree/class from any other tree or room.
	while(t--)
	{
		int mark[2502]={0};	//Keep track of points which we had crossed.
		scanf("%d",&nT);
		for(i=1;i<=nT;i++)
			scanf("%d %d",&X[i],&Y[i]);
		scanf("%d %d",&X[0],&Y[0]);	//Coordinates of room.
		scanf("%d %d",&X[i],&Y[i]);	//Coordinates of class.
			Min_Dis=1000000000;
		for(i=1;i<=nT+1;i++) 
		{
			Eul_Dis[i]=((X[i]-X[0])*(X[i]-X[0])+(Y[i]-Y[0])*(Y[i]-Y[0])); //Finding Eular distance from room.
			if(Eul_Dis[i]<=Min_Dis)
			{
				Min_Dis=Eul_Dis[i];					//Finding which place is nearest to room.
				h=i;
			}
		}
		mark[0]=1;							//We had moved out of room.
		j=h;								//Point(class or tree) which is nearest from room.
		while(j!=nT+1)							//When we reach class loop breaks.
		{
			Min_Dis=1000000000;
			if(mark[j]==0)
			{
				mark[j]=1;					//Marked the tree which we had crossed.
				for(i=1;i<=nT+1;i++)
				{
					if(mark[i]==0)
					{
						tmp=((X[i]-X[j])*(X[i]-X[j])+(Y[i]-Y[j])*(Y[i]-Y[j]))+Eul_Dis[j];			//Finding minimum distance of a point from previously selected point.
						if(tmp<Eul_Dis[i])
							Eul_Dis[i]=tmp;
						if(Eul_Dis[i]<=Min_Dis)
						{
							Min_Dis=Eul_Dis[i];
							h=i;
						}
					}
				}
				j=h;						//Again moved to a point which is shortest to previously selected point.
			}
		}
		printf("%d\n",Eul_Dis[nT+1]);
	}
	return 0;
}
