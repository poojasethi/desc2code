#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<cmath>
#include<climits>
#include<cstdio>
using namespace std;
int dist[2501];
vector<pair<int,int> > vec;
struct cmp
{
    bool operator()(const pair<int,pair<int,int> >&a,const pair<int,pair<int,int> >&b)
    {
         return a.first>b.first;
        /*if(a.first<=b.first)
        {
            return true;
        }
        else
        {
            return false;
        }*/
    }
};
int distance1(pair<int,int> &p1,pair<int,int> &p2)
{
    int h=p2.second-p1.second;
    int b=p2.first-p1.first;
    h=h*h;
    b=b*b;
    h=h+b;
    return h;
}

void dijkstra(int n)
{
    dist[n]=0;
    priority_queue<pair<int,pair<int,int> >,vector<pair<int,pair<int,int> > >,cmp>q;
    q.push(make_pair(0,vec[n]));
    while(!q.empty())
    {
        pair<int,pair<int,int> >p=q.top();
        q.pop();
        if(p.second.first==vec[n+1].first&&p.second.second==vec[n+1].second)
        {
            break;
        }
        for(int i=0;i<n+2;++i)
        {
            if(dist[i]>(p.first)+distance1(p.second,vec[i]))
            {


                dist[i]=(p.first)+distance1(p.second,vec[i]);
                q.push(make_pair(dist[i],vec[i]));
            }
        }

    }
}
int main()
{
  int t;
  //cin>>t;
  scanf("%d",&t);
  while(t>0)
  {
      t--;

      int n;
      scanf("%d",&n);
      //cin>>n;

      int c=0;
      while(c<n+2)
      {

          pair<int,int>p;
          scanf("%d",&p.first);
          scanf("%d",&p.second);
          //cin>>p.first>>p.second;
          vec.push_back(p);
          c++;
      }
      for(int i=0;i<n+2;++i)
      {
          dist[i]=INT_MAX;
      }
      dijkstra(n);
      cout<<dist[n+1]<<endl;
      vec.clear();



  }
}
