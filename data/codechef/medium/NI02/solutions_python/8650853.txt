#include<bits/stdc++.h>

#define PB push_back
#define MP make_pair
#define F first
#define S second

#define RI(a) scanf("%d",&a);
#define PI(a) printf("%d",a);

#define SZ(a) (int)(a.size())

#define SET(a,b) memset(a,b,sizeof(a))

#define TR(a,t) for(__typeof(a.begin()) t=a.begin();t!=a.end();t++)

#define REP(i,l,h) for(int i=(l); i<=(h);i++)
#define REPD(i,h,l) for(int i=(h);i>=(l);i--)

#define ALL(a) a.begin(),a.end()

#define DRT()  int t; cin>>t; while(t--)

#define PRSNT(a,e) (a.find(e) != a.end())

#define MINH priority_queue<int, vector<int>, greater<int> >

#define trace1(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define N 3000
#define MOD 1000000007

#define parent(i) ((i-1)/2)
#define left(i) (2*i+1)
#define right(i) (2*i+2)

typedef long long LL;
using namespace std;

int dist[N];
int visited[N];
int n,m;

vector< pair< int, int> > v[N]; 
set< pair<int, int> > s;

pair<int, int> pts[N];

void dijkstra(int c, vector< pair< int, int> > a[], int dist[] ) {
        
        int sz=n;       
        pair<int, int> temp = *(s.begin());
        s.erase(s.begin());
        visited[c]=1;
        while(!s.empty())
        {
                TR(a[c], it) {
                        if(visited[(*it).F]==0)
                        {
                                if(dist[(*it).F]>dist[c]+(*it).S) {
                                        s.erase(MP(dist[(*it).F], (*it).F));
                                        dist[(*it).F]=dist[c]+(*it).S;
                                        s.insert(MP(dist[(*it).F], (*it).F));
                                }
                        }
                }
                temp = *(s.begin());
                s.erase(s.begin());
                visited[(temp.S)] = 1;
                c = temp.S;
        }

}


void init(int src, int dist[], vector< pair< int, int> > a[]) {
        s.clear();
        
        REP(i,1,n) {
                a[i].clear();
                dist[i]=INT_MAX;
                visited[i]=0;
        }
        dist[src]=0;
        REP(i,1,n) s.insert(MP(dist[i], i));
}

LL sqdist(int x1, int x2, int y1, int y2) {
        return ((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
}



int main()
{

        int k, quer, house, mx=INT_MAX;
        DRT() {
                
                int trees;
                cin>>trees;
                n=trees+2;
                init(trees+1, dist, v);
                REP(i,1,trees+2) {
                        cin>>pts[i].F>>pts[i].S;

                }
                REP(i,1,trees + 2) 
                        REP(j,i+1,trees + 2) 
                {
                
                LL w = sqdist(pts[i].F, pts[j].F, pts[i].S, pts[j].S);
                v[i].PB(MP(j, w));
                v[j].PB(MP(i, w));
                
                }

                dijkstra(trees+1, v, dist);
                cout<<dist[trees+2]<<endl;        
        }

        return 0;
}
