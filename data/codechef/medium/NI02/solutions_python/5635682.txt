#include<stdio.h>
#define ll long long int
#define INF 10000000000

ll Graph[10000][10000],Dist[10000],SptSet[10000],n;

struct cordinate
{
    ll x,y;
    ll mark;
}start,end,a[10000];

ll dist(ll x1,ll y1,ll x2,ll y2)
{
    return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}

ll MinDistance()
{
    ll i,min=INF,ind;
    for(i=0;i<n;i++)
    {
        if(!SptSet[i] && min>Dist[i])
        min=Dist[i],ind=i;
    }
    return ind;
}

void Dijkstra(ll scr)
{
    ll i,j;
    for(i=0;i<n;i++)
    SptSet[i]=0,Dist[i]=INF;

    Dist[scr]=0;

    ll Mind;

    for(j=0;j<n-1;j++)
    {
        Mind=MinDistance();
        SptSet[Mind]=1;
        for(i=0;i<n;i++)
        {
            if(!SptSet[i] && Graph[Mind][i] && Dist[i]>Graph[Mind][i]+Dist[Mind])
            {//printf("yes%lld\n",i);
                Dist[i]=Graph[Mind][i]+Dist[Mind];
            }
        }
    }
}

int main()
{
    ll t;
    scanf("%lld",&t);
    while(t--)
    {
        ll i,j,k;
        scanf("%lld",&n);
        n+=2;
        for(i=0;i<n;i++)
        scanf("%lld%lld",&(a[i].x),&(a[i].y));

        for(i=0;i<n;i++)
        for(j=0;j<n;j++)
        {
            Graph[i][j]=dist(a[i].x,a[i].y,a[j].x,a[j].y);
        }
        Dijkstra(n-2);
        printf("%lld\n",Dist[n-1]);
    }
    return 0;
}
