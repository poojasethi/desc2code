#include<vector>
#include<iostream>
#include<stdio.h>
#include<queue>
#include<set>
using namespace std;

struct Comparator
{
  	bool operator()(const pair<int,int>& a, const pair<int,int>& b)
  	{
  		if(a.second==b.second)
  		{
  			return a.first<b.first;
  		}
    	return a.second<b.second;
 	}
};

int dijkstra(vector<vector<pair<int,int> > >G,int u,int target,int n)
{
	vector<int> D(n,987654321);
	int v,v2,cost,d;
	pair<int,int> top;
	set< pair<int,int>,Comparator > s;
	set< pair<int,int> >::iterator it;
	D[u] = 0;
	s.insert(make_pair(u,0));
	while(!s.empty()){
		top = *s.begin();
		s.erase(s.begin());
		v = top.first;
		d = top.second;
		if(v==target)
			return d;
		for(int i=0;i<G[v].size();i++)
		{
			v2 = G[v][i].first;
			cost = G[v][i].second;
			if(D[v2]>D[v]+cost)
			{
				if(D[v2]!=987654321)
				{
					it = s.find(make_pair(v2,D[v2]));
					if(it == s.end())
					{
						cout << v2 << v ;
						cout<< "ERROR"<<endl;
					}
					s.erase(it);
				}				
				D[v2] = D[v]+cost;
				s.insert(make_pair(v2,D[v2]));
			}
		}
	}
	return D[target];
}

int main()
{
	int num;
	int count,ex,ey,sx,sy,x,y,dist,distx,disty;
	scanf("%d",&num);
	vector<pair<int,int> >vert;
	vector<vector<pair<int,int> > >G;	
	while(num!=0)
	{
		scanf("%d",&count);
		while(count!=0)
		{
			scanf("%d %d",&x,&y);
			vert.push_back(make_pair(x,y));
			count--;
		}
		scanf("%d %d",&sx,&sy);
		vert.push_back(make_pair(sx,sy));
		scanf("%d %d",&ex,&ey);
		vert.push_back(make_pair(ex,ey));
		G.resize(vert.size());
		for(int i=0;i<vert.size();i++)
		{
			for(int j=0;j<i;j++)
			{
				distx = vert[i].first-vert[j].first;
				disty = vert[i].second-vert[j].second;
				dist = distx*distx+disty*disty;
				G[i].push_back(make_pair(j,dist));
				G[j].push_back(make_pair(i,dist));
			}
		}
		num--;
		dist = dijkstra(G,int(vert.size())-2,int(vert.size())-1,int(vert.size()));
		for(int i=0;i<vert.size();i++)
		{
			//printf("\n%d %d %d",i,vert[i].first,vert[i].second);
			for(int j=0;j<G[i].size();j++)
			{
				//printf("   %d %d %d %d",j,vert[G[i][j].first].first,vert[G[i][j].first].second,G[i][j].second);
			}
		}
		printf("%d\n",dist);
		G.clear();
		vert.clear();
	}
}