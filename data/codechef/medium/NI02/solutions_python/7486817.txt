#include<iostream>
#include<queue>
#include<vector>
#include<stdio.h>
#include<math.h>
#include<cmath>
using namespace std;
bool sync_with_ios (bool sync = false);
const int INF = 1000000000;
int x[2503],y[2503];
int dist(int i,int j)
{
    int d;
    d=pow(abs(x[i]-x[j]),2)+pow(abs(y[i]-y[j]),2);
    return d;
}
int main()
{
    int n,i,j,t,n_prev;
    cin>>t;
    while(t--)
    {
    cin>>n;
    n_prev=n;
    n=n+2;
    vector < vector < pair<int,int> > > g (n);
    for(i=0;i<n;i++)
        cin>>x[i]>>y[i];
       for(i=0;i<n;i++)
        for(j=i+1;j<n;j++)
    {
        g[i].push_back(make_pair(j,dist(i,j)));
        g[j].push_back(make_pair(i,dist(j,i)));
    }
    vector<int> d (n, INF);
    priority_queue < pair<int,int> > q;
    int s=n_prev;
    d[s]=0;
    q.push (make_pair (0, s));
	while (!q.empty())
   {
		int v = q.top().second,  cur_d = -q.top().first;
		q.pop();
		if (cur_d > d[v])
            continue;

		for (size_t j=0; j<g[v].size(); ++j)
        {
			int to = g[v][j].first,
				len = g[v][j].second;
			if (d[v] + len < d[to])
            {
				d[to] = d[v] + len;
				//p[to] = v;
				q.push (make_pair (-d[to], to));
			}
		}
	}
	cout<<d[n-1]<<endl;

    }
    return 0;
}

