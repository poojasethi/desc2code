#include<bits/stdc++.h>
using namespace std;

int n;
vector<pair<int, long long> > gr[3000];
int arr[3000][2];

long long INF;

void dijkstra() {
	INF = numeric_limits<long long>::max();
	vector<long long> dis(n + 2, INF);
	set< pair<long long, int> > pq;

	pq.insert(pair<long long, int>(0LL, 0));
	dis[0] = 0LL;

	while (!pq.empty()) {
		pair<long long, int> curr = *(pq.begin());
		int at = curr.second;
		long long base = curr.first;
		
		pq.erase(pq.begin());

		dis[at] = base;
		
		int adj = gr[at].size();

		for (int i = 0; i < adj; i ++) {
			int nex = gr[at][i].first;
			long long wt = gr[at][i].second;
			
			if (dis[nex] > dis[at] + wt) {
				if (dis[nex] != INF)
					pq.erase(pq.find(pair<long long, int>(dis[nex], nex) ) );

				dis[nex] = dis[at] + wt;
				pq.insert(pair<long long, int>(dis[nex], nex) );
			}

		}
	}
	printf("%lld\n", dis[n + 1]);
}
int main() {
	int t;
	scanf("%d", &t);

	while (t --) {
		scanf("%d", &n);
		int x, y;

		gr[0].clear();
		for (int i = 1; i <= n; i ++) {
			scanf("%d%d", &arr[i][0], &arr[i][1]);
			gr[i].clear();
		}
		gr[n + 1].clear();

		scanf("%d%d", &arr[0][0], &arr[0][1]);
		scanf("%d%d", &arr[n + 1][0], &arr[n + 1][1]);

		for (int i = 0; i <= n + 1; i ++) {
			for (int j = 0; j < i; j ++) {
				long long dis = (long long)(arr[i][0] - arr[j][0]) * (long long)(arr[i][0] - arr[j][0]) + (long long)(arr[i][1] - arr[j][1]) * (long long)(arr[i][1] - arr[j][1]);
				gr[i].push_back(pair<int, long long>(j, dis));
				gr[j].push_back(pair<int, long long>(i, dis));
			}
		}

		/*for (int i = 0; i <= n + 1; i ++) {
			printf("%d -> ", i);
			for (int j = 0; j < gr[i].size(); j ++) 
				printf("%d[%lld] ", gr[i][j].first, gr[i][j].second);
			printf("\n");
		}*/

		dijkstra();
	}
	return 0;
}