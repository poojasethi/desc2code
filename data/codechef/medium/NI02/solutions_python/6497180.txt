#include<bits/stdc++.h>
using namespace std;
int d[2510][2510];
int dist[2510];
int mark[2510];
vector<int> graph[2510];
vector<int> w[2510];

void dijkstra(int n)
{
	priority_queue<pair<int,int>,vector<pair<int,int> >,greater< pair<int,int> > >q;
	
	q.push(make_pair(0,n));
	dist[n]=0;
	while(!q.empty())
	{
		pair<int,int>p=q.top();
		q.pop();
		int weight=p.first;
		int num=p.second;
		if(dist[num]<weight)continue;
		//if(num==n+1)break;
		//dist[num]=weight;
		for(int i=0;i<graph[num].size();i++)
		{
			if(dist[graph[num][i]]>weight+w[num][i])
			{
				dist[graph[num][i]]=weight+w[num][i];
		    
				q.push(make_pair(dist[graph[num][i]],graph[num][i]));
		    }
		/*	if(mark[graph[num][i]]==0)
				{
				q.push(make_pair(dist[graph[num][i]],graph[num][i]));
				mark[graph[num][i]]=1;}*/
			
			
		}
	}
}
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n;
		scanf("%d",&n);
		//int d[n+2][n+2];
		int x[n+2],y[n+2];
		//vector<int> graph[n+3];
		//vector<int> weight[n+3];
		for(int i=1;i<=n;i++)
		{
			scanf("%d%d",&x[i],&y[i]);
			
		}
		scanf("%d%d%d%d",&x[0],&y[0],&x[n+1],&y[n+1]);
		for(int i=0;i<2510;i++)
		{
			graph[i].clear();
	    	w[i].clear();
		}
		for(int i=0;i<n+2;i++)
		{
			for(int j=0;j<n+2;j++)
			{
				d[i][j]=(x[j]-x[i])*(x[j]-x[i])+(y[j]-y[i])*(y[j]-y[i]);
				
				graph[i].push_back(j);
				graph[j].push_back(i);
				w[i].push_back(d[i][j]);
				w[j].push_back(d[i][j]);
			}
		}
		
	
		for(int i=0;i<2510;i++)
		{
			dist[i]=INT_MAX;
			mark[i]=0;
		}
		dijkstra(0);
		printf("%d\n",dist[n+1]);
	
	}
}