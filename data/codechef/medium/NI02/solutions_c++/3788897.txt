#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
#include<set>
#include<climits>
#define ll long long int
#define max1 1000000000000000000LL
#include<stdio.h>
using namespace std;

ll dijkstra(ll src,ll destination,ll distTo[],vector<vector<pair<ll,ll> > > graph,ll visited[])
{
    ll i,j;
    for(i=0;i<=destination;i++)
    {
        distTo[i]=max1;
        visited[i]=0;
    }
    distTo[src]=0;
    visited[src]=1;
    set<pair<ll,ll> > st;
    st.insert(make_pair(distTo[src],src));
    while(!st.empty())
    {
        ll parent=(st.begin())->second;
        ll distOfParent=(st.begin())->first;
        visited[parent]=1;
        st.erase(st.begin());
        vector<pair<ll, ll> > ::iterator it;
        for(it=graph[parent].begin();it!=graph[parent].end();it++)
        {
            if(visited[it->first]==0)
            {
                distTo[it->first]=distOfParent+it->second;
                st.insert(make_pair(distTo[it->first],it->first));
                visited[it->first]=1;
            }
            else if(distTo[it->first]>(distOfParent+it->second))
            {
                st.erase(st.find(make_pair(distTo[it->first],it->first)));
                distTo[it->first]=distOfParent+it->second;
                st.insert(make_pair(distTo[it->first],it->first));
            }
        }
    }

    return distTo[destination];
}

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        vector<vector<pair<ll,ll> > > graph;
        ll distTo[3000],visited[3000];
        ll n,i,j,k,l,m,a[3000],b[3000];
        scanf("%lld",&n);
        for(i=2;i<=n+1;i++)
        {
            scanf("%lld %lld",&a[i],&b[i]);
        }
        scanf("%lld %lld",&a[1],&b[1]);
        scanf("%lld %lld",&a[n+2],&b[n+2]);
        graph.resize(n+5);
        for(i=1;i<=n+2;i++)
        {
            for(j=i+1;j<=n+2;j++)
            {
                ll temp=(b[i]-b[j])*(b[i]-b[j])+(a[i]-a[j])*(a[i]-a[j]);
                graph[i].push_back(make_pair(j,temp));
                graph[j].push_back(make_pair(i,temp));
            }
        }
        cout<<dijkstra(1,n+2,distTo,graph,visited)<<"\n";
    }
    return 0;
}
