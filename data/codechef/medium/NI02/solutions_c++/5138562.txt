#include <bits/stdc++.h>
using namespace std;
#define nmax 2600
#define inf 2000000000

int n, t, xarr[nmax], yarr[nmax], cur[nmax], visited[nmax];
vector<int> tb[nmax], wt[nmax];

inline int dist(int sx, int sy, int ex, int ey){
	return (ex-sx)*(ex-sx) + (ey-sy)*(ey-sy);
}

inline void djikstra(){
	for(int i=0;i<=n+1;i++) cur[i]=inf, visited[i]=0;
	cur[n+1]=0;
	for(int i=0;i<=n+1;i++){
		int mn=inf, mni=-1;
		for(int j=0;j<=n+1;j++) if(visited[j]==0 && cur[j]<mn) mn=cur[j], mni=j;
		visited[mni]=1;
		for(int j=0;j<tb[mni].size();j++){
			int o=tb[mni][j];
			if(visited[o]==0) cur[o]=min(cur[o],cur[mni]+wt[mni][j]);
		}
	}
}

int main(){
	scanf("%d",&t);
	while(t--){
		scanf("%d",&n);
		for(int i=0;i<=n+1;i++) tb[i].clear(), wt[i].clear();
		for(int i=0;i<n;i++) scanf("%d %d",&xarr[i],&yarr[i]);
		scanf("%d %d",&xarr[n],&yarr[n]);
		scanf("%d %d",&xarr[n+1],&yarr[n+1]);
		for(int i=0;i<=n+1;i++){
			for(int j=i+1;j<=n+1;j++){
				int d=dist(xarr[i],yarr[i],xarr[j],yarr[j]);
				tb[i].push_back(j), tb[j].push_back(i), wt[i].push_back(d), wt[j].push_back(d);
			}
		}
		djikstra();
		printf("%d\n",cur[n]);
	}
	return 0;
}