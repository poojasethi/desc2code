#include <bits/stdc++.h>
#include <queue>
using namespace std;
struct node{
		int id,dist;
};
bool operator <(node a,node b)
{
return a.dist>b.dist;
}
#define inf 10000000
int dist[3000];
int dis[3000][3000];
int x[3000];
int y[3000];
int visited[3000];
int main()
{
	int t,n,x1,y1;
	scanf("%d",&t);
	while(t--)
	{
		memset(visited,0,sizeof(visited));
		scanf("%d",&n);
		vector< node > vec[n+2];
		for(int i=1;i<=n;i++)
		{
			scanf("%d %d",x+i,y+i);
		}
		scanf("%d %d",x,y);
		scanf("%d %d",x+n+1,y+n+1);
		for(int i=0;i<n+2;i++)
		{
			for(int j=i;j<n+2;j++)
			{
				dis[i][j]=dis[j][i]=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);
			}
			
		}
	//memset(dist,inf,sizeof(dist));
		for(int i = 0; i <= n+1; i++) dist[i]=inf;
		priority_queue<node> q;
		q.push((node) {0,0});
		dist[0]=0;
		int count=0;
		while(!q.empty())
		{
			count++;
			node s=q.top();
			q.pop();
			//printf("%d  %d %d\n",s.id,dist[s.id],visited[s.id]);
			while(visited[s.id] && !q.empty())
			{
				s=q.top();
				q.pop();
			}
			visited[s.id]=1;
			for(int i=0;i<n+2;i++)
			{
				if(dist[s.id]+dis[s.id][i]<dist[i])
				{
					dist[i]=dist[s.id]+dis[s.id][i];
					q.push((node) {i,dist[i]});
				}
			}
	 
		}	
		if(dist[n+1]!=inf) cout<<dist[n+1]<<"\n";
		else cout<<"-1\n";
 
 
	}
return 0;
}