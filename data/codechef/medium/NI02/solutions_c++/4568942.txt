#include<map>
#include<set>
#include<ctime>
#include<cmath>
#include<queue>
#include<stack>
#include<bitset>
#include<vector>
#include<cstdio>
#include<string>
#include<cassert>
#include<cstring>
#include<numeric>
#include<sstream>
#include<iterator>
#include<iostream>
#include<algorithm>

using namespace std;
typedef unsigned long long LL;

#define MOD7 1000000007
#define MOD9 1000000009

#define pb push_back
#define mp make_pair


#define MM(a,x) memset(a, x, sizeof(a))
#define P(x) cout<<#x<<" = "<<x<<endl;
#define P2(x,y) cout<<#x<<" = "<<x<<", "<<#y<<" = "<<y<<endl;
#define PV(a,n) for(int i=0;i<n;i++) cout<<#a<<"[" << i <<"] = "<<a[i]<<endl;
#define TM(a,b) cout<<#a<<"->"<<#b<<": "<<1.*(b-a)/CLOCKS_PER_SEC<<"s\n";

#define all(X) (X).begin(), (X).end ()
#define for_each(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define DEBUG if(0)
#define pii pair< int, int >
#define MX 2551
#define INF (1<<20)

struct comp {
    bool operator() (const pii &a, const pii &b) {
        return a.second > b.second;
    }
};


int dist(pair<int,int> A, pair<int,int> B)
{
	return (B.first - A.first)*(B.first - A.first) + (B.second - A.second)*(B.second - A.second);
}

int main()
{
    cin.sync_with_stdio ( 0 );
    cout.sync_with_stdio ( 0 );
	int T;
	cin>>T;
	while(T--)
	{
		int n;
		cin>>n;
		pair<int,int> vertex[n];

		for(int i=0 ; i< n ;  i++)
			cin>>vertex[i].first>> vertex[i].second;
		pair<int,int> A,B;
		cin>>A.first>>A.second;
		cin>>B.first>>B.second;
		vector< pair<int, int> > Graph[n+5];
		for(int i=0 ; i< n ; i++)
		{
			for(int j=0 ; j < n ; j++)
			{
				int d = dist(vertex[i],vertex[j]);
				Graph[i].push_back(mp(j,d));
				Graph[j].push_back(mp(i,d));
			}
		}
		for(int i=0 ; i< n ; i++)
		{
			int d = dist(A,vertex[i]);
			Graph[i].push_back(mp(n,d));
			Graph[n].push_back(mp(i,d));
		}
		for(int i=0 ; i< n ; i++)
		{
			int d = dist(B,vertex[i]);
			Graph[i].push_back(mp(n+1,d));
			Graph[n+1].push_back(mp(i,d));
		}
		int d = dist(A,B);
		Graph[n].push_back(mp(n+1,d));
		Graph[n+1].push_back(mp(n,d));		
		int starting = n;
		int D[n+10];
		bool F[n+10];
		for(int i=0 ; i< n+7 ; i++)
			F[i] = false;
	 	for(int i=0; i<=n+1; i++) 
				D[i] = INF;
    		D[starting] = 0;
		priority_queue< pii, vector< pii >, comp > Q;
		Q.push(pii(starting, 0));
		 while(!Q.empty()) 
		{
        int u = Q.top().first;
        Q.pop();
        if(F[u]) continue;
        int sz = Graph[u].size();
        DEBUG printf("visiting from %d:", u);
        for(int i=0; i<sz; i++) {
            int v = Graph[u][i].first;
            int w = Graph[u][i].second;
            if(!F[v] && D[u]+w < D[v]) {
                DEBUG printf(" %d,", v);
                D[v] = D[u] + w;
                Q.push(pii(v, D[v]));
            }
        }
        DEBUG printf("\n");
        F[u] = 1; // done with u
   	 }
	cout<<D[n+1]<<endl;
	}
	return 0;
}















