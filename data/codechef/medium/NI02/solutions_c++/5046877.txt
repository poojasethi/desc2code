#include<stdio.h>
#define MAX -1000000000
#include<queue>
#include<iostream>
 
using namespace std;
int n;
int a[2505][2505];
 
int d[2505];
bool vis[2505];
int x[2505],y[2505];
struct node
{
	int x,dist;
	node(){}
	node(int px,int pd)
	{
		x=px;
		dist=pd;
	}
};
bool operator<(node a,node b)
{
	return a.dist>b.dist;
}
int main()
{
	int t,i;
	scanf("%d",&t);
	while(t--)
	{
		
		scanf("%d",&n);
		for(i=0;i<=n+5;i++)
			{
				d[i]=MAX;
				vis[i]=0;
			}
			//scanf("%d",&n);
  for(i=1;i<n+1;i++)
  {
	  scanf("%d",&x[i]);
	  scanf("%d",&y[i]);
  }
    scanf("%d",&x[0]);
	 scanf("%d",&y[0]);
	 scanf("%d",&x[n+1]);
	 scanf("%d",&y[n+1]);
  
  int j;
  for(i=0;i<n+2;i++)
  {
 	for(j=i+1;j<n+2;j++)
 	{
 		a[j][i]=a[i][j]=(x[j]-x[i])*(x[j]-x[i])+(y[j]-y[i])*(y[j]-y[i]);
 		
	}
  }		
		
	
		
		priority_queue<node> q;
		q.push(node(0,0));
		d[0]=0;
		while(q.empty()==false)
		{
			node top=q.top();
			q.pop();
			
			if(vis[top.x]==0)
			{
			for(i=0;i<n+2;i++)
			{
					
					
					if(d[i]>top.dist+a[top.x][i] || d[i]==MAX)
					{
						//printf("\nworking");	
						d[i]=top.dist+a[top.x][i];
						q.push(node(i,d[i]));
					}
				
							
			}
			}
			vis[top.x]=1;
		}
		printf("\n%d",d[n+1]);
	}
	return 0;
} 