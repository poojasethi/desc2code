#include <stdio.h>
#include <iostream>
#include <limits.h>
#include <math.h>
#include <vector>
#include <utility>
using namespace std;
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
long cost[2505][2505];
bool visited[2501];
int n;
int dist(pii x,pii y)
{
	int d=0;
	d=(x.first-y.first)*(x.first-y.first)+(x.second-y.second)*(x.second-y.second);
	return d;
}
long long node_cost[2505];
void dijkstra(int index)
{
	//cout<<index<<" ";
	if(index==-1)return;
	visited[index]=1;
	int idx=-1;
	long long val=1000000000;
	for(int i=0;i<=n+1;i++)
	{
		if(!visited[i])
		{
			node_cost[i]=min(node_cost[i],cost[index][i]+node_cost[index]);
			if(node_cost[i]<val)
			{
				idx=i;
				val=node_cost[i];
			}
		}
	}
	dijkstra(idx);
}
int main()
{
	int test;
	cin>>test;
	while(test--)
	{
		vector<pii> cood;
		int y,x;
		scanf("%d",&n);
		for(int i=0;i<=n+1;i++)
		{
			node_cost[i]=1000000000;
			visited[i]=false;
		}
		for(int i=1;i<=n;i++)
		{
			scanf("%d%d",&x,&y);
			pii tmp=mp(x,y);
			for(int j=0;j<cood.size();j++)
			{
				cost[i][j+1]=cost[j+1][i]=dist(tmp,cood[j]);
			}
			cood.pb(tmp);
		}
		scanf("%d%d",&x,&y);
		pii source=mp(x,y);
		for(int j=0;j<cood.size();j++)
		{
			cost[0][j+1]=cost[j+1][0]=dist(source,cood[j]);
		}
		scanf("%d%d",&x,&y);
		pii sink=mp(x,y);
		for(int j=0;j<cood.size();j++)
		{
			cost[n+1][j+1]=cost[j+1][n+1]=dist(sink,cood[j]);
		}
		cost[0][n+1]=cost[n+1][0]=dist(source,sink);
		node_cost[0]=0;
		//cout<<"source-sink "<<cost[0][7]<<"\n";
		dijkstra(0);
		//printf("%ld\n",node_cost[n+1]);
		//cout<<"\n";
		cout<<node_cost[n+1]<<"\n";
	}
	
	//system("pause");
	return 0;
}