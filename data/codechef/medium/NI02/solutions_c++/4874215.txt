//ACM-Kharagpur--Online
#include<bits/stdc++.h>
#define MAX 6001

using namespace std;

typedef pair<int,int> pii;
typedef pair<long long int ,int >ppii;

vector<pii> coordinates;
int vertices;

	
long long int dijkstra(int src,int dest){
	  	
	std::priority_queue<ppii,vector<ppii>,greater<ppii> > minHeap;
	int i;
	long long int dist[MAX];
	  	
	minHeap.push(pii(0,src));
	for(i=0;i<MAX;i++) 
	  dist[i]=INT_MAX;
	  	
	dist[src]=0;
	  	
	while(minHeap.size()){
	  		
	   ppii front=minHeap.top();
	  		
	   if(front.second==dest) return dist[dest];
	  		
	   minHeap.pop();
	  		
	   if(dist[front.second]==front.first)
       for(i=0;i<vertices+2;i++){
	  			 
	  			if(i==front.second) continue;
				
				int x1=coordinates[i].first,y1=coordinates[i].second; 
				int x2=coordinates[front.second].first,y2=coordinates[front.second].second; 
				    			
	  			int curr_dist=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
                if(curr_dist+dist[front.second]<dist[i]){
	  				
	  				dist[i]=curr_dist+dist[front.second];
	  				minHeap.push(pii(curr_dist+dist[front.second],i));
	  				
	  			}  
	  			
	 	}		
	  		
    }
	  	
	return dist[dest];
	  	
}	   
	
int main(void){
	
	int i,testCases,count=0,edges,src,dest;
	int src1,src2,dest1,dest2;
	
	scanf("%d",&testCases);
	while(testCases--){
		
		scanf("%d",&edges);
		count=0;
		vertices=edges;
		
		for(i=0;i<edges;i++){
			
			scanf("%d%d",&src,&dest);
			coordinates.push_back(pii(src,dest));
								
		}		
		
		scanf("%d%d",&src1,&src2);
		scanf("%d%d",&dest1,&dest2);
		
		coordinates.push_back(pii(src1,src2));
		coordinates.push_back(pii(dest1,dest2));					
				    
	    printf("%lld\n",dijkstra(edges,edges+1));	
					
		if(testCases)
	      coordinates.clear(); 
	    
	}
	
	return 0;
	
}