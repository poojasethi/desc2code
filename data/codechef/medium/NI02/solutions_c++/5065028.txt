#include<bits/stdc++.h>
#include<string>
using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;

#define s(n)                        scanf("%d",&n)
#define s2(q,w)                        scanf("%d %d",&q,&w)
#define s3(q,w,e)                        scanf("%d %d %d",&q,&w,&e)

#define INF                         (int)1e9
#define EPS                         1e-9

#define checkbit(n,b)                ( (n >> b) & 1)

long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}


int n;
int x[2600],y[2600];
int dist[2600][2600];

long long diz(int src,int des)
{
	vector<ll>d(2600,INF);
	d[src]=0;

	priority_queue<ii> Q;

	Q.push(ii(0,src));
	while(!Q.empty())
	{
		int u=Q.top().second;
		int dd = -Q.top().first;
		Q.pop();

		if(dd > d[u])
			continue;

		if(u == des)
			return d[u];

		for (int i = 0; i<n+2; ++i)
		{
			if(i==u)
				continue;
			if(d[i] > dd + dist[i][u])
			{
				d[i]=dd+dist[i][u];
				Q.push(ii(-d[i],i));
			}
		}

	}


}



int main()
{
	int t;
	cin>>t;

	while(t--)
	{
		s(n);
		for (int i = 0; i < n; ++i)
		{
			s2(x[i],y[i]);
		
		}
		s2(x[n],y[n]);
		s2(x[n+1],y[n+1]);


		for (int i = 0; i < n+2; ++i)
		{
			for (int j = 0; j < n+2; ++j)
			{
				dist[i][j] = (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]); 
				if(i==j)
					dist[i][j]=INF;

			}
		}

cout<<diz(n,n+1)<<endl;


	}
	







	return 0;
}