//KGP SUMMERS THROUGH dijkstra ALGORITHM
#include<iostream>
#include<cstdio>
#include<list>
#include<vector>
#include<algorithm>
#include<math.h>
#define M 2505
#include<utility>

using namespace std;

int tres;
int key[M];
int visit[M];

int min1()
{
    int m=1000000000,index;
    for(int i=0;i<tres+2;i++)
    {
        if((m>key[i])&&(visit[i]==0))
         {m=key[i];index=i;}
     }
     return index;
}                


vector<pair<int,int> > dist[M];



int main()
{
    int t,n,a,b,c,i,j,k;
    
    scanf("%d",&t);
    
    while(t--)
    {
        scanf("%d",&tres);
        int x[M];
        int y[M];
       
        for(i=0;i<tres+2;i++)
        {
            visit[i]=0;
            dist[i].clear();
            key[i]=1000000000;
        }    
        for(i=0;i<tres;i++)
        {
            scanf("%d%d",&x[i],&y[i]);
        
          //  printf("mayank %d %d %d\n",i,x[i],y[i]);
        }        
        
        scanf("%d %d",&x[i],&y[i]); 
          // printf("mayank %d %d %d\n",i,x[i],y[i]);
        i=i+1;
        scanf("%d %d",&x[i],&y[i]); 
      //     printf("mayank %d %d %d\n",i,x[i],y[i]);
       
        for(i=0;i<tres+2;i++)
        { 
       
            for(j=i+1;j<tres+2;j++)
            {
        //        printf("x[i]   %d x[j] %d  %d  %d \n\n",x[i],x[j],y[i],y[j]);
                int d=((x[i]-x[j])*(x[i]-x[j]))+((y[i]-y[j])*(y[i]-y[j]));
              dist[i].push_back(make_pair(j,d));
              dist[j].push_back(make_pair(i,d));
          //      printf("%d    %d   dist[i][j]  %d\n",i,j,dist[i][j]);
            }
        }
        key[tres]=0;
        
        for(i=0;i<tres+2;i++)
        {
            int u=min1();
            visit[u]=1;
          //  printf("mk %d   %d\n",u,key[u]);
            vector<pair<int,int> >::iterator jt;
            for(jt=dist[u].begin();jt!=dist[u].end();jt++)
            { 
                // printf("hi mauan this isme   %d    %d     %d\n",u,jt->first);
                if((visit[jt->first]==0)&&(key[jt->first]>(jt->second)+key[u]))
                {key[jt->first]=(jt->second)+key[u];
               // printf("mdaasd   %d   %d    %d\n",u,jt->first,key[jt->first]);
                }    
            }    
       
      
        }                    
        
        printf("%d\n",key[tres+1]);
      //  system("pause");
       }
      
  
   
}            
