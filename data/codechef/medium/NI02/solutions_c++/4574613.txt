#include<cstdio>
#include<iostream>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
 
using namespace std;
 
typedef pair< int, int > P;
#define INF 1000000000
#define MAX 2500
#define DIST( a, b ) ( ( a.first - b.first )*( a.first - b.first ) + ( a.second - b.second )*( a.second - b.second ) )
 
P points[MAX+10];
int mapping[MAX+10];
P heap[MAX+10];
int heapsize = 0;
 
void swap( int a, int b ){
    P temp = heap[a];
    heap[a] = heap[b];
    heap[b] = temp;
}
 
void insert( int idx, int D )
{
    int pos = heapsize;
    heap[ heapsize++ ] = make_pair( D, idx );
    mapping[idx] = heapsize - 1;
    while( pos > 0 && heap[pos].first < heap[ (pos - 1)/2 ].first )
    {
            swap( pos, ( pos - 1 )/2 );
            mapping[ heap[pos].second ] = pos;
            pos = ( pos - 1 )/2;
            mapping[ heap[pos].second ] = pos;
    }
}
 
void heapify( int idx ){
    int min_idx = idx;
    if( 2*idx + 1 < heapsize && heap[2*idx+1].first < heap[idx].first )
        min_idx = 2*idx + 1;
    if( 2*idx + 2 < heapsize && heap[2*idx+2].first < heap[min_idx].first )
        min_idx = 2*idx + 2;
    if( min_idx != idx )
    {
        swap( min_idx, idx );
        mapping[ heap[idx].second ] = idx;
        mapping[ heap[min_idx].second ] = min_idx;
        heapify( min_idx );
    }
}
 
P extract( )
{
    P ret = heap[0];
    mapping[ ret.second ] = -1;
    heap[0] = heap[ heapsize - 1 ]; heapsize--;
    mapping[ heap[0].second ] = 0;
    heapify( 0 );
    return ret;
}
 
void update( int pos, int D )
{
    //printf( "Called with %d\n", D );
    heap[pos].first = D;
    while( pos > 0 && heap[pos].first < heap[ (pos - 1)/2 ].first )
    {
        swap( pos, ( pos - 1 )/2 );
        mapping[ heap[pos].second ] = pos;
        pos = ( pos - 1 )/2;
        mapping[ heap[pos].second ] = pos;
    }
}
 
void performtest()
{
    int N; heapsize = 0;
    memset( mapping, -1, sizeof( mapping ) );
    scanf( "%d", &N );
    for( int i=1; i<=N; i++ )
    {
        scanf( "%d %d", &points[i].first, &points[i].second );
    }
    scanf( "%d %d %d %d", &points[0].first, &points[0].second, &points[N+1].first, &points[N+1].second );
 
    insert( 0, 0 );
    for( int i=1; i<=N+1; i++ )
        insert( i, INF );
    while( heapsize > 0 )
    {
        P u = extract();
        //printf( "Extracted ( %d, %d )\n", u.first, u.second );
        if( u.second == N + 1 )
        {
            printf( "%d\n", u.first );
            return;
        }
        for( int i=1; i<=N+1; i++ )
            if( DIST( points[u.second], points[i] ) + u.first < heap[ mapping[i] ].first )
            {
                update( mapping[i], DIST( points[u.second], points[i] ) + u.first );
            }
    }
}
 
int main(){
    int T;
    scanf( "%d", &T );
    while( T-- )
        performtest();
    return 0;
}