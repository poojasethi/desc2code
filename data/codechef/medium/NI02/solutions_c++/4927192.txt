/*tyrion*/
#include <bits/stdc++.h>
#define pri(a) printf("%d",a)
#define prl(a) printf("%lld",a)
#define nl printf("\n")
#define sp printf(" ")
#define prs(str) printf("%s", str)
#define pb push_back
#define mem(a,b) memset(a, b, sizeof(a))
#define pi pair<int, int>
#define ll long long
#define rep(i,j,k) for(i = j; i < k; i++)
#define nrep(i,j,k) for(i = j; i >= k; i--)
#define scs(str) scanf("%s", str)
#define sci(a) scanf("%d",&a)
#define scl(a) scanf("%lld",&a)

using namespace std;

const int INF = 100000010;
struct node {
    int first;
    int second;
    int flag;
    int d;
}v[2600];
bool b[10001];

int dist(int x, int y)
{
    return (v[x].first - v[y].first)*(v[x].first - v[y].first) + (v[x].second - v[y].second)*(v[x].second - v[y].second);
}

/*int readint() {
    int n = 0;
    char c = getchar_unlocked();
    while ( !( '0' <= c && c <= '9' ) ) {
        c = getchar_unlocked();
    }
    while ( '0' <= c && c <= '9' ) {
        n = n * 10 + c - '0';
        c = getchar_unlocked();
    }
    return n;
}*/

int main()
{
    int t;
    sci(t);
    while (t--) {
        int n, i, k;
        sci(n);
        n += 2;
        mem(b, 0);
        int x, y;
        rep(i,1,n) {
            sci(x); sci(y);
            v[i].first = x; v[i].second = y;
            v[i].flag = 1;
        }
        int x1,y1,x2,y2;
        sci(x1); sci(y1); //sci(x2); sci(y2);
        v[0].first = x1; v[0].second = y1;
        v[0].d=0;
        int minpt;
        int min = INF;
        for(i=1;i<n;i++) {
            v[i].d=dist(0,i);
            if(min>v[i].d) {
                min=v[i].d;
                minpt=i;
            }
        }
        v[minpt].flag  = 0;
        while(v[n-1].flag) {
            int minm = INF;
            int l = minpt;
            for(i = 1; i < n; i++) {
                if(v[i].flag) {
                    if(v[l].d + dist(l,i) < v[i].d) v[i].d = v[l].d + dist(l,i);
                    if(v[i].d < minm) {
                        minm = v[i].d;
                        minpt = i;
                    }
                }
            }
             v[minpt].flag = 0;
        }
        cout << v[n-1].d << endl;
    }
    return 0;
}
