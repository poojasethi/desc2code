    #include <cstdio>
    #include <cstring>
    #include <cstdlib>
     
    using namespace std;
     
    typedef struct countries
    {
    	char name[20];
    	int votes;
     
    }countries;
     
    typedef struct chefs
    {
    	char name[20];
        char cname[20];
    	int votes;
    	struct countries* c;
     
    }chefs;
     
    int compcon(const void* c1, const void* c2)
    {
        return strcmp(((chefs*)c1)->cname,((chefs*)c2)->cname);
    }
     
    int compn(const void* c1, const void* c2)
    {
        return strcmp(((chefs*)c1)->name,((chefs*)c2)->name);
    }
     
    inline void scanString(char str[])
    {
        register char c;
        register int i = 0;
        while((c = getchar_unlocked()) == '\n' || c == ' '){}
        while(c != '\n' && c != ' ' && (int)c != EOF)
        {
            str[i++] = c;
            c = getchar_unlocked();
        }
            
        str[i] = '\0';
    }
     
    int main()
    {	
    	int N,M,i,cosiz = 0;
    	scanf("%d %d",&N,&M);
     
    	chefs ch[N];
        countries co[N];
     
        for(i = 0; i < N; i++)
        {
        	scanString(ch[i].name);
            scanString(ch[i].cname);
        	ch[i].votes = 0;
            co[i].votes = 0;
            ch[i].c = NULL;
        }
     
        qsort(ch,N,sizeof(chefs),compcon);
     
        strcpy(co[0].name,ch[0].cname);
        ch[0].c = &co[0];
     
        for(i = 1; i < N; i++)
        {
            if(strcmp(co[cosiz].name, ch[i].cname))
                strcpy(co[++cosiz].name, ch[i].cname);
            
            ch[i].c = &co[cosiz];
        }
     
        qsort(ch,N,sizeof(chefs),compn);
     
        int maxchi,maxchv = 0,maxcv = 0, maxci;
     
        while(M--)
        {
            char str[20];
            scanString(str);
            int low = 0;
            int high = N-1;
            while(low <= high)
            {
                int mid = (low+high)>>1, c = strcmp(str,ch[mid].name);
                if(!c)
                {
                    ch[mid].votes++;
                    ((ch[mid].c)->votes)++;
                    break;
                }
                else if(c < 0)
                    high = mid - 1;
                else low = mid + 1;
            }
        }
     
        for(i = 0; i <= cosiz; i++)
            if(co[i].votes > maxcv) {maxcv = co[i].votes; maxci = i;}
     
        printf("%s\n",co[maxci].name);
     
        for(i = 0; i < N; i++)
            if(ch[i].votes > maxchv) {maxchv = ch[i].votes; maxchi = i;}
     
        printf("%s\n", ch[maxchi].name);
     
    	return 0;
    } 