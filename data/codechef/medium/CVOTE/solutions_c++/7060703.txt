#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <complex>
#include <cassert>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<double> VD;
typedef pair<double,double> PDD;

const int inf=1000000000;
const LL INF=LL(inf)*inf;
const double eps=1e-9;
const double PI=2*acos(0.0);
#define bit(n) (1<<(n))
#define bit64(n) ((LL(1))<<(n))
#define pb push_back
#define sz size()
#define mp make_pair
#define cl clear()
#define all(a) (a).begin(),(a).end()
#define fill(ar,val) memset((ar),(val),sizeof (ar))
#define MIN(a,b) {if((a)>(b)) (a)=(b);}
#define MAX(a,b) {if((a)<(b)) (a)=(b);}
#define sqr(x) ((x)*(x))
#define X first
#define Y second

//clock_t start=clock();
//fprintf(stderr,"time=%.3lfsec\n",0.001*(clock()-start));

const int maxT = 5;
const int maxN = 10000;
const int maxM = 100000;
const int maxL = 100;

char s[maxL+2];
string read()
{
	assert(scanf("%101s",s)==1);
	int i;
	for(i=0;s[i];i++)
	{
		char c=s[i];
		assert('A'<=c && c<='Z' || 'a'<=c && c<='z');
	}
	assert(1<=i && i<=maxL);
	return s;
}

int main()
{
	int T=1;
	for(int t=0;t<T;t++)
	{
		int n,m,i;
		assert(scanf("%d%d",&n,&m)==2);
		assert(1<=n && n<=maxN);
		assert(1<=m && m<=maxM);
		string countries[maxN];
		pair<string,string> chefs[maxN];
		for(i=0;i<n;i++)
		{
			string chef = read();
			string country = read();
			chefs[i] = mp(chef,country);
			countries[i]  = country;
		}
		sort(chefs,chefs+n);
		for(i=1;i<n;i++)
			assert(chefs[i].X!=chefs[i-1].X);
		sort(countries,countries+n);
		int cn=unique(countries,countries+n)-countries;
		int chef_votes[maxN]={0};
		int country_votes[maxN]={0};
		for(i=0;i<m;i++)
		{
			string chef=read();
			int chef_id = lower_bound(chefs,chefs+n,mp(chef,string()))-chefs;
			assert(chef_id<n && chefs[chef_id].X==chef);
			chef_votes[chef_id]++;
			string country = chefs[chef_id].Y;
			int country_id = lower_bound(countries,countries+cn,country)-countries;
			country_votes[country_id]++;
		}
		int mini=0;
		for(i=0;i<cn;i++)
			if(country_votes[mini]<country_votes[i])
				mini=i;
		printf("%s\n",countries[mini].c_str());

		mini=0;
		for(i=0;i<n;i++)
			if(chef_votes[mini]<chef_votes[i])
				mini=i;
		printf("%s\n",chefs[mini].X.c_str());
	}
	{char c;assert(scanf("\n%c",&c)==-1);}
	return 0;
}