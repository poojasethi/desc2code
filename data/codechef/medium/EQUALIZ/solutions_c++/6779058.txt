#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<vector>
using namespace std;
#define EPS 0.000000001



bool isPrime(int n)
{
    bool found=false;
    for(int i=2;i<=sqrt(n);i++)
    {
        if(n%i==0) return false;
    }
    return true;
}

double calculateAvg(int start,int endd,double A[])
{
    int n=endd-start+1;
    double sum=0;
    for(int i=start;i<=endd;i++) sum+=A[i];

    sum/=n;

    return sum;

}

void prime_factorize(int n,vector<int> &pr)
{
    if(isPrime(n))
    {
        pr.push_back(n);
        return;
    }
   for(int i=2;i<=(n/2);i++)
   {
       if(isPrime(i) && n%i==0) pr.push_back(i);

   }
}

bool isEqualized(double A[],int n)
{
    double s=A[1];
    bool f=true;
    for(int i=2;i<=n;i++)
    {
        if(fabs(A[i]-s)>EPS) return false;

    }
    return true;
}

/*void show(double A[],int n)
{

    for(int i=1;i<=n;i++) cout<<A[i]<<" ";
    cout<<endl;
}*/

int main()
{
    int T,no,N,mark[1001],A[32];
    scanf("%d",&T);
    while(T--)
    {
        bool ans=false;
        for(int i=1;i<=1000;i++) mark[i]=0;
        scanf("%d",&N);
        for(int i=1;i<=N;i++)
        {
            scanf("%d",&A[i]);
            mark[A[i]]++;
            if(mark[A[i]]==N) ans=true;
        }
        if(ans) printf("0\n");
        else
        {
            if(isPrime(N))
            {
                printf("1\n");
                printf("%d",N);
                for(int i=1;i<=N;i++) printf(" %d",i);
                printf("\n");
            }
            else
            {
                vector<int> pr1;
                prime_factorize(N,pr1);
                //find the largest prime factor of N,L
                int L=pr1[pr1.size()-1];//5
                no=N/L;//  no of groups //3
                vector<int> indices[1000];

                double temp[32],avg;
                int start,endd,k,cnt;
                start=1,endd=L,k=cnt=0;
                for(int i=1;i<=N;i++) temp[i]=A[i];


                while(cnt!=no)
                {
                        avg=calculateAvg(start,endd,temp);
                        // indices[k].push_back(L);//store the no of indices involved in the cnt-th operation
                        for(int i=start;i<=endd;i++)
                        {
                            temp[i]=avg;
                            indices[k].push_back(i); //store the indices
                        }
                         start+=L;
                         endd+=L;
                         k++,cnt++;  //no of indices involved in the k-th operation:indices[k].size()-2, k:total no of operations

                 }

                 int prevL;
                 while(!isEqualized(temp,N))
                 {
                        // show(temp,N);
                         //  cnt=0;
                         //now there exist "no" different values, so if u take avg of "no" differ values, "N/no" differ new groups will form
                        //1st check if "no" is prime
                         if(isPrime(no))
                         {
                              prevL=L;//5,6
                              int L2=no;//3,2
                              start=1,avg=0;
                              for(int j=start;j<=prevL;j++)
                              {
                                    if(j==start)
                                    {
                                        for(int m=start;m<=(start+(prevL*(L2-1)));m+=prevL) avg+=temp[m];
                                        avg/=L2;
                                    }
                                    for(int m=j;m<=(j+(prevL*(L2-1)));m+=prevL)
                                    {
                                        temp[m]=avg;
                                        indices[k].push_back(m);
                                    }
                                    k++;
                               }
                             // no=L2,L=N/L2;
                         }
                         else
                         {
                             prevL=L; //3,2
                             vector<int>pr2;
                             prime_factorize(no,pr2);//no=4,6
                             int L2=pr2[pr2.size()-1];//L2=2, take L2 values from L2 groups, starting from the leftmost grp
                            // no=N/L2;// new no of groups
                            start=1,no=0;
                            while(start<N)
                            {
                                avg=0;
                                no++;
                                for(int j=start;j<=start+prevL-1;j++)
                                {
                                    if(j==start)
                                    {
                                        for(int m=j;m<=j+(prevL*(L2-1));m+=prevL) avg+=temp[m];
                                        avg/=L2;
                                    }
                                    for(int m=j;m<=j+(prevL*(L2-1));m+=prevL)
                                    {
                                        temp[m]=avg;
                                        indices[k].push_back(m);
                                    }
                                    k++;
                                }
                                start+=(prevL*L2);
                                //if(start>N) break;
                             }
                            L=N/no; //no=2,L=6
                          }
                   }
                  // show(temp,N);
                    printf("%d\n",k);
                    for(int i=0;i<k;i++)
                    {
                        printf("%d",indices[i].size());
                        for(int j=0;j<indices[i].size();j++) printf(" %d",indices[i][j]);
                        printf("\n");
                    }
                    //printf("\n");

                 }



        }


    }

    return 0;
}
