#include <iostream>
#include <vector>
using namespace std;

bool prime[31];
int arr[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
vector<int> v[1010];
int k;

void fun(int i, int j, int len) {
  if(prime[len]) {
    v[k].push_back(len);
    for(int p=i; p<=j; ++p) v[k].push_back(p);
    ++k;
  } else {
    if(!(len%2)) {
      fun(i,i+len/2-1,len/2);
      fun(i+len/2,j,len/2);
      for(int p=i;p<(i+len/2);++p,++k) {
	v[k].push_back(2);
	v[k].push_back(p);
	v[k].push_back(p+len/2);
      }
    } else if(!(len%3)) {
      fun(i,i+len/3-1,len/3);
      fun(i+len/3,i+2*len/3-1,len/3);
      fun(i+2*len/3,j,len/3);
      for(int p=i; p<(i+len/3); ++p,++k) {
	v[k].push_back(3);
	v[k].push_back(p);
	v[k].push_back(p+len/3);
	v[k].push_back(p+2*len/3);
      }
    } else { // the only possibility is it is divisible by 5 for n<30 for higher values len can be checked for further prime numbers with iteration than this hard code
      fun(i,i+len/5-1,len/5);
      fun(i+len/5,i+2*len/5-1,len/5);
      fun(i+2*len/5,i+3*len/5-1,len/5);
      fun(i+3*len/5,i+4*len/5-1,len/5);
      fun(i+4*len/5,j,len/5);
      for(int p=i; p<(i+len/5); ++p,++k) {
	v[k].push_back(5);
	v[k].push_back(p);
	v[k].push_back(p+len/5);
	v[k].push_back(p+2*len/5);
	v[k].push_back(p+3*len/5);
	v[k].push_back(p+4*len/5);
      }
    }
  }
}

int main() {
  for(int i=0; i<10; ++i) prime[arr[i]] = true;
  int t;
  cin >> t;
  while(t--) {
    k=0;
    int n, a;
    cin >> n;
    for(int i=0;i<n;++i) cin >> a;
    fun(1,n,n);
    cout << k << endl;
    for(int i=0;i<k;++i) {
      for(int j=0;j<v[i].size();++j) cout << v[i][j] << " ";
      cout << endl;
      v[i].clear();
    }
  }
  return 0;
}