#include <iostream>
#include <string>
#include <sstream>
using namespace std;
void equalize(int *a, int length, int start )		;	//length no. of elements starting from strat eg. length = 2 start = 0 means index 0, 1
bool isPrime(int a);
string itos(int a)
{
	stringstream s;
	s << a;
	return s.str();
}
int steps;
string ans;

int main()
{
	int t, length, i;
	int *a;
	cin >> t;
	while (t > 0)
	{
		steps = 0;
		ans = "";
		cin >> length;
		a = new int[length];
		for (i = 0; i < length; ++i)
		{
			cin >> a[i];
		}
		equalize(a, length, 0 )	;
		--t;
		delete[] a;
		cout << steps << "\n";
		if (ans.length())
			cout << ans;

	}
}
bool isPrime(int a)
{
	for (int i = 2; i < a; ++i)
	{
		if (a % i == 0)
			return false;
	}
	return true;
}
void equalize(int *a, int length, int start )
{
	int n = a[start];
	bool isEqual = true;
	int i,j,k;
	for (i = start + 1; i < start + length; ++i)
	{
		if (a[i] != a[i - 1])
		{
			isEqual = false;
			break;
		}
	}
	if (isEqual)
	{
		//cout << "All elements r equal" << "\n";
		//return
	}
	else if (isPrime(length))
	{
		++steps;
		int s = 0;
		ans += itos(length);
		ans += " ";
		for (i = 0; i < length ; ++i)
		{
			ans += itos(start + i + 1);
			ans += " ";
			s += a[start + i];
		}
		//ans += itos(start + i + 1);
		ans += "\n";
		//s += a[start + i];
		s /= length;
		for (i = start; i < start + length; ++i)
		{
			a[i] = s;
		}
	}
	else
	{
		for (i = 2; i < length; ++i)
		{
			if (length % i == 0)	//clearly i will b a prime factor of length since v break out of loop as soon as v get 1st factor
			{
				break;
			}
		}
		for (j = 0; j < i; ++j)
		{
			equalize (a, length / i, start + (length/i) * j);
		}
		for (k = 0; k < length / i; ++k)
		{
			/*isEqual = true;
			for (j = 1; j < i; ++j)
			{
				if (a[start + (length / i) * j + k] != a[start + (length / i) * (j - 1) + k])
				{
					isEqual = false;
					break;
				}
			}
			if (isEqual)	//if the nos. r equal fr one value of k, dey will b equal fr all k
			{
				break;
			}*/
			++steps;
			int s = 0;
			ans += itos(i);
			ans += " ";
			for (j = 0; j < i ; ++j)
			{
				ans += itos(start + (length / i) * j + k  + 1);
				ans += " ";
				s += a[start + (length / i) * j + k];
			}
			//ans += itos(start + (length / i) * j + k  + 1);
			ans += "\n";
			//s += a[start + (length / i) * j + k];
			s /= i;													//since v r picking i prime no.
			for (j = 0; j < i; ++j)
			{
				a[start + (length / i) * j + k] = s;
			}
		}
	}			
}