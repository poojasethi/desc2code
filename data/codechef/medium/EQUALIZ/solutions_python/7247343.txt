#include <iostream>
#include <stdio.h>
#include <math.h>
#include <string>
#include <queue>
#include <sstream>
using namespace std;

queue<string> to_print ;

int gpf(int number){
    if(number >= 29 && number % 29 == 0)
        return 29;
    else if(number >= 23 && number % 23 == 0)
        return 23;
    else if(number >= 19 && number % 19 == 0)
        return 19;
    else if(number >= 17 && number % 17 == 0)
        return 17;
    else if(number >= 13 && number % 13 == 0)
        return 13;
    else if(number >= 11 && number % 11 == 0)
        return 11;
    else if(number >= 7 && number % 7 == 0)
        return 7;
    else if(number >= 5 && number % 5 == 0)
        return 5;
    else if(number >= 3 && number % 3 == 0)
        return 3;
    else
        return 2;
}

int func(int no_elements, int no_groups){
	if(no_groups == 1)
	  return 0;
// 	cout << no_groups;
    int div = gpf(no_groups);
    int elements_per_group = no_elements/no_groups;
    int new_no_group = no_elements/(elements_per_group*div);
	int no_operations = 0;
    for(int i = 1; i <= new_no_group; i++){
        int start_index = 1 + (i-1)*(no_elements/new_no_group);
		stringstream out;
		out << div;
        for(int j = 0; j < elements_per_group; j++){
            string s = out.str();
            int curr_place = start_index+j;
			no_operations++;
            while(curr_place <= i*(no_elements/new_no_group)){
            	s = s + " ";
				stringstream o;
// 				cout << "curr " << curr_place;
				o << curr_place;
            	s = s + o.str();
            	curr_place += elements_per_group;
// 				cout << "s " << s << endl;
            }
            to_print.push(s);
// 			cout << s << endl;
        }
    }
    return no_operations + func(no_elements, new_no_group);
}

int main() {
    
    int no_cases;
    cin >> no_cases;
    while(no_cases--){
        int no_elements, temp;
        cin >> no_elements;
        for(int i = 0; i < no_elements; i++)
            cin >> temp;
// 		cout << no_elements << endl;
        int val = func(no_elements,no_elements);
        cout << val << endl ;
		while(!to_print.empty()){
		  cout << to_print.front() << endl;
		  to_print.pop();
		}
    }
	// your code goes here
	return 0;
}

