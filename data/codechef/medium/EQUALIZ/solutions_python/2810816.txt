#include <stdio.h>
#include <iostream>
#include <sstream>

int PRIMES[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
int NUM_PRIMES = 10;
int IS_PRIME[31] = {0};
//bool SKIP[30] = {false};

#define LOOP_2(L1, L2) for (int i = 0; i < (L1); i++)for(int j = 0; j < (L2); j++)
#define LOOP_3(L1, L2, L3) 2_LOOP(L1, L2) for (int k = 0; k < L3; k++)

int largest_prime_factor(int n) {
	for (int i = NUM_PRIMES - 1; i >= 0; i--)
		if (n % PRIMES[i] == 0)
			return PRIMES[i];
	return 1;
}

int num_ops = 0;

float avg(float *arr, int len) {
	float a = 0;
	for (int i = 0; i < len; i++)
		a += arr[i];
	return a / len;
}

// bool all_equal(float *arr, int len) {
// 	float first = arr[0];
// 	for (int i = 0; i < len; i++) 
// 		if (arr[i] != first)
// 			return false;
// 	return true;
// }

void average(int len, int offset, std::stringstream& output) {
	if (len == 1)
		return;
	if (IS_PRIME[len]) {
		num_ops++;
		output << len << " ";
		for (int i = 0; i < len; i++) {
			output << offset + i + 1;
			if (i != len - 1)
				output << " ";
		}
		output << "\n";
	}
	else {
		int factor = largest_prime_factor(len);
		int sub_arr_width = len / factor;
		for (int i = 0; i < factor; i++)
			average(sub_arr_width, offset + (i * sub_arr_width), output);
		for (int i = 0; i < sub_arr_width; i++) {
			num_ops++;
			output << factor << " ";
			for (int j = 0; j < factor; j++) {
				output << offset + i + (j * sub_arr_width) + 1;
				if (j != factor - 1)
					output << " ";
			}
			output << "\n";
		}
	}
}

void work() {
	int N;
	scanf("%d", &N);
	num_ops = 0;
	std::stringstream output;
	int waste;
	for (int i = 0; i < N; i++)
		scanf("%d", &waste);
	average(N, 0, output);
	printf("%d\n", num_ops);
	printf("%s", output.str().c_str());
}

int main() {
	for(int i = 0; i < NUM_PRIMES; i++) IS_PRIME[PRIMES[i]] = 1;
	int T;
	scanf("%d", &T);
	while(T--) {
		work();
	}
	// for (int i = 1; i <= 30; i++) {
	// 	num_ops = 0;
	// 	std::stringstream output;
	// 	average(i, 0, output);
	// 	printf("i = %d, avg(i) = %d\n", i, num_ops);
	// }
	return 0;
}
