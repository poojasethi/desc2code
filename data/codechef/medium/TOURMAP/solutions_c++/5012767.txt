#include <iostream>
#include <map>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <list>

using namespace std;


typedef struct city_s{
	city_s* prev;
	city_s* next;
	char name[51];
	int fare;
	int id ;
}city;

city *arrCities = NULL;

int main()
{
	int T, N;
	
	scanf("%d",&T);
	for(int i = 0 ;i<T;i++)
	{
		scanf("%d",&N);
		arrCities = new city[N];
		char cA[51];
		
		
		char cB[51];
		char C[6];
		int counter = 0 ;
		map<string,int> listOfCities ;
		list<int> nodes ;
		for(int j=1;j<N;j++)
		{
	
			scanf("%s",cA);
			scanf("%s",cB);
			scanf("%s",C);
			string A(cA),B(cB);
			int l = strlen(C);
			strncpy(C,C,l-1);
			int fare = atoi(C);
			
			map<string,int>::iterator itrA = listOfCities.find(A) ;
			if( itrA == listOfCities.end())
			{
				//arrCities[counter] = new city();
				arrCities[counter].prev = NULL ;
				arrCities[counter].fare = fare;
				arrCities[counter].id = counter ;
				strcpy(arrCities[counter].name,A.c_str());

				listOfCities.insert(pair<string,int>(A,counter));
				itrA = listOfCities.find(A) ;
				nodes.push_back(counter);
				counter++;

			}
			else
				nodes.remove(itrA->second);
			
			map<string,int>::iterator itrB = listOfCities.find(B) ;

			if( itrB == listOfCities.end())
			{
				//arrCities[counter] = new city();				
				arrCities[counter].fare = 0;
				arrCities[counter].id = counter ;
				arrCities[counter].next = NULL;
				strcpy(arrCities[counter].name,B.c_str());

				listOfCities.insert(pair<string,int>(B,counter));
				itrB = listOfCities.find(B) ;
				nodes.push_back(counter);
				counter++ ;
			}
			else
				nodes.remove(itrB->second);

			arrCities[itrB->second].prev = &arrCities[itrA->second] ;
			arrCities[itrA->second].next = &arrCities[itrB->second];
			arrCities[itrA->second].fare = fare;
		}
		list<int>::iterator itr = nodes.begin();
		while(itr != nodes.end())
		{
			if(arrCities[*itr].prev == NULL)
				break;
			itr++;
		}
		city *pCurrent = &arrCities[*itr];
		int totalFare = 0 ;
		while(pCurrent)
		{
			if(pCurrent->next)
				cout << pCurrent->name << " " << pCurrent->next->name << " " << pCurrent->fare << "$" << endl;
			totalFare += pCurrent->fare;
			pCurrent= pCurrent->next ;
		}
		cout << totalFare << "$" << endl;
		delete[] arrCities;
	}
}