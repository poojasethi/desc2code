
/* Come on Code on!!!!
TEAM:     iitbhu_tesserect
College:  IIT(BHU), Varanasi
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <ctime>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;

typedef vector <int> vi;
typedef pair< int ,int > ii;

#define S(a) scanf("%d",&(a))
#define P(a) printf("%d",(a))
#define PS printf(" ")
#define NL printf("\n")
#define SL(a) scanf("%lld",&(a))
#define PL(a) printf("%lld",(a))
#define LL long long int
#define FOR(I,A,B) for(int I= (A); I<(B); ++I)
#define all(c) c.begin(), c.end()
#define stop system("pause")
#define pb push_back
#define mp make_pair
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())


#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

map< string,int > LEFT;
map<string, int> RIGHT;
map< string, pair<string,int> > hash;

int main(){
    
    int t;
    S(t);
    while(t--){
        
        LEFT.clear();
        RIGHT.clear();
        hash.clear();
        
        int n;  //number of cities
        S(n);
        
        FOR(i,1,n){
            char a[100],b[100];
            string aa,bb;
            int c;
            scanf("%s %s %d$",a,b,&c);
            aa = a;
            bb = b;
            LEFT[aa]++;
            RIGHT[bb]++;
            hash[aa] = pair<string,int>(bb,c);
        }
        
        string start;
         
        map<string,int>::iterator it;
        for(it = LEFT.begin();it!=LEFT.end();it++){
            if(!RIGHT[it->first]){
                start = it->first;
                break;
            }
        }
        
        
        int cost = 0;
        int total_cost = 0;
        
        string a = start;
        string b;
        n--;
        while(n--){
            
            cost = (hash[a]).second;
            total_cost+=cost;
            b = hash[a].first;
            
            cout<<a<<" "<<b<<" "<<cost<<"$"<<endl;
            a = b;
            
        }
        cout<<total_cost<<"$"<<endl;
    }
    return 0;
}
        
        
        
        
            
            
