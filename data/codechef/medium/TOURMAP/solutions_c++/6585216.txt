/**
 	My standard template
 	Name: Shivam Mishra
 	handle: shivam217
 **/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 100005;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

LL power(LL b,LL e)
{
	if(b==0 && e==0) return 1;
	if(b==0 && e>1)  return 0;	
	if(b>0 && e==0) return 1;
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  r %= MOD; }
		e >>= 1; b = b*b; b %= MOD;
		
	}
return r;
}

LL gcd(LL a, LL b) {  if(b==0) return a;  else return gcd(b,a%b);  }

set<string> f,s;
int alist[5005];
int cost[5005];
bool vis[5005];
map<string,int> mapp;
map<int,string> rmapp;
int n;
void dfs(int x) {

	vis[x] = true;

	int des = alist[x];

	if(n>1) {
		cout<<rmapp[x]<<" "<<rmapp[des];
		printf(" %d$\n",cost[x]);
	}
			

	if(!vis[des] && cost[des]!=0){
		
		dfs(des);
	}

}


int main() {

	int test; INT(test);

	while(test--) {

		INT(n);

		char a[55],b[55],c[20];		

		s.clear();
		f.clear();
		CLR(alist);
		CLR(cost);
		mapp.clear();
		rmapp.clear();
		CLR(vis);

		int stringmap=0;
		int totalcost = 0;

		FOR(i,0,n-1) {
			
			STR(a); STR(b); STR(c);
			f.insert(a); 
			s.insert(b);			
			
			int c1=0;

			for(int k=0;c[k]!='$';++k)
				c1 = c1*10 + (c[k] - '0');

			totalcost += c1;
		
			if(mapp[a]==0) {
				mapp[a] = ++stringmap;
				rmapp[stringmap] = a;
				
			}
			if(mapp[b]==0) {
				mapp[b] = ++stringmap;
				rmapp[stringmap] = b;
			}

			alist[mapp[a]] = mapp[b]; 
			cost[mapp[a]] = c1;							
			
		}

		string root="";
		for(set<string>::iterator it=f.begin();it!=f.end();++it) {

			if(s.count(*it)==0) {			
				root = *it;

				//cout<<"root  = "<<root<<endl;

				break;
			}
		}

		
		dfs(mapp[root]);

		printf("%d$\n",totalcost);
	}


return 0;
}
