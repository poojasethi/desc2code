    #include <string>
    #include <algorithm>
    #include <stdio.h>
    #include <set>
    #include <iostream>
    #include <vector>
    #include <cmath>
    #include <sstream>
    #include <cstring>
    #include <list>
    #include <map>
    using namespace std;
     
    /*USE 2 MAPS TO SOLVE THE PROBLEM:
    mapa - mapping between city 1 and city 2;
    mapa2 - mapping between any city (1 chosen) and cost of travel;
    */
     
    struct travel
    {
    string c1;
    string c2;
    int money;
    };
     
    int binary_search(vector<string> v, string s)
    {
    int high = v.size()-1;
    int low = 0;
    if(v[low] == s)
    return low;
    else if(v[high] == s)
    return high;
    else
    {
    while(high-low > 0){
    int mid = (high+low)/2;
    if(s == v[mid])
    {return mid;
    }
    else if(s < v[mid])
    {
    high = mid;
    }
    else
    low = mid;}
    }
    return -1;
    }
     
    int main()
    {
    int t; // test cases
    scanf("%d", &t);
     
    for(int k = 0; k < t; k++)
    {
    int N; // num of cities
    scanf("%d", &N);
     
    if(N == 1)
    cout << "0$" << endl;
    else
    {
    vector<travel> v(N-1);
    vector<int> m;
    vector<string> first;
    vector<string> second;
    map<string, string> mapa;
    map<string, int> mapa2;
     
    for(int j = 0; j < N-1; ++j)
    {
    string c1,c2;
    int money;
    char dollar;
    cin >> c1 >> c2 >> money >> dollar;
     
    mapa[c1] = c2;
    mapa2[c1] = money;
     
    first.push_back(c1);
    second.push_back(c2);
    m.push_back(money);
    }
     
    make_heap(first.begin(), first.end());
    sort_heap(first.begin(), first.end());
    make_heap(second.begin(), second.end());
    sort_heap(second.begin(), second.end());
     
    // Use of difference function, very useful
    vector<string> difference;
    set_difference(first.begin(),first.end(),second.begin(), second.end(),inserter(difference, difference.begin()));
     
    //OMG SO KEWL THIS WORKS!!!
    int x = mapa.size();
    long int cost=0;
    int i = 0;
    string k = difference[0];
    string aux = mapa[k];
    int aux2 = mapa2[k];
    while(i < x)
    {
    cout << k << " " << aux << " " << aux2<<"$" << endl;
    cost+=aux2;
    k = mapa[k];
    aux = mapa[k];
    aux2 = mapa2[k];
    i=i+1;
    }
    cout << cost << "$" << endl;
    }
    }
    return 0;
    } 