#include<stdio.h>
#include<iostream>
#include<math.h>
#include<vector>
#include<map>
#include<string>
#include<string.h>
#include<algorithm>
#define PI acos(-1.0)
#define SZ 1000
#define Fi(a,n) for(int i=a;i<n;i++)
#define Fj(a,n) for(int j=a;j<n;j++)
#define Fk(a,n) for(int k=a;k<n;k++)
#define ri(a) scanf("%d",&a)
#define pb push_back
using namespace std;
typedef vector<int> vi;
vi start;
vector< pair<string, string> > paths;
vi money;
char s[57],t[57];
int m, cityc,totalMoney;
map<string, int> cityMap, pathMap;
vector<string> cityList;
int main()
{
 int N,T;
 ri(T);
 while(T--)
 {
 	ri(N);
 	start.clear();
 	start.assign(N+1,1);
 	paths.clear();
 	money.clear();
 	cityc = 1;
	totalMoney = 0;
	cityMap.clear();
	pathMap.clear();
	cityList.clear();
	Fi(0,N-1)
 	{
 		scanf("%s %s %d$",s,t,&m);
		paths.pb(make_pair(string(s),string(t)));
		money.pb(m);
		totalMoney += m;
		if(cityMap[string(s)] == 0)
		{
			cityMap[string(s)] = cityc++;
			cityList.pb(string(s));	
		}
		if(cityMap[string(t)] == 0)
		{
			cityMap[string(t)] = cityc++;
			cityList.pb(string(t));	
		}
		pathMap[string(s)] = i;
		start[cityMap[string(t)]] = 0;
 	}
 	int startingCity = 0;
 	vi next(N+1,0);
 	Fi(0,N)
 	{
 		if(start[cityMap[cityList[i]]])startingCity = cityMap[cityList[i]];
 		if(i<N-1)
 		{
 			next[cityMap[paths[i].first]] = cityMap[paths[i].second]; 
 		}
 	}
 	Fi(0,N-1)
 	{
 		int j = pathMap[cityList[startingCity-1]];
		printf("%s %s %d$\n",paths[j].first.c_str(), paths[j].second.c_str(),money[j]);
		startingCity = next[startingCity];
 	}
 	printf("%d$\n",totalMoney);
 }
}
