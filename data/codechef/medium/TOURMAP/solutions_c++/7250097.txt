// {{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <unistd.h>
#include <cstring>
using namespace std;
#define VAR(a,b) __typeof(b) a=(b)
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define mp(A,B) make_pair(A,B)
#define pb(X) push_back(X)
typedef long long LL; typedef unsigned long long ULL;
typedef long double LD;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
template<class T> inline T sqr(T x) { return x*x; }
int rint() { int x; int ret=scanf("%d", &x); assert(ret==1); return x; }
LL rLL() { LL x; int ret=scanf("%lld", &x); assert(ret==1); return x; }

// }}}

#define maxn 5555

int ind[maxn], n, c[maxn], C, ans;
map<string, int> cmap, fidx;
string A, B;
char a[maxn][55], b[maxn][55];

int main() {
	int nt = rint();
    while(nt--) {
        n = rint();
        memset(ind, 0, n*sizeof(int));
        cmap.clear();
        fidx.clear();
        int idx = 0;
        ans = 0;
        REP(i, n-1) {
            assert(scanf("%s%s%d$",a[i],b[i],&c[i])==3);
            A = a[i], B = b[i];
            C = c[i];
            if(cmap.find(A)==cmap.end())cmap[A]=idx++;
            if(cmap.find(B)==cmap.end())cmap[B]=idx++;
            fidx[A] = i;
            ind[cmap[B]]++;
            ans +=C;
        }
        map<string, int>::iterator it;
        for(it=cmap.begin();it!=cmap.end();it++) {
            if(ind[it->second] == 0) {
                A = it->first;
                break;
            }
        }
        while(fidx.find(A)!=fidx.end()) {
            int idx = fidx[A];
            printf("%s %s %d$\n", a[idx], b[idx], c[idx]);
            A = b[idx];
        }
        printf("%d$\n", ans);
    }
    return 0;
}