
//package tournam;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;

public class Main
{

	/**
	 * @param args
	 * @throws IOException
	 * @throws NumberFormatException
	 */
	public static void main(String[] args) throws NumberFormatException, IOException
	{
		// TODO Auto-generated method stub
		//System.setIn(new FileInputStream("input.txt"));
		InputReader in = new InputReader(System.in);
		int t = in.nextInt();
		int i, c, j;
		for (c = 0; c < t; c++)
		{
			int n = in.nextInt();

			int rounds = (int) (Math.log((double) n) / Math.log(2.0));
			int m = in.nextInt();
			int pt = in.nextInt();
			double p = pt / 100.0;
			ArrayList<Double> prob = new ArrayList<Double>();
			ArrayList<Integer> players = new ArrayList<Integer>();
			int inp[] = in.nextInts(m);
			for (i = 0; i < m; i++)
			{

				players.add(inp[i]);
				prob.add(1.0);
			}

			Collections.sort(players);
			int curr_index_max;
			int next_index_max = m;
			for (i = 1; i < rounds + 1; i++)
			{
				int nextplayer = (int) Math.pow(2.0, i - 1);

				if (i == 1)
					curr_index_max = m;// for first round
				else
					curr_index_max = next_index_max;
				ArrayList<Double> next_prob = new ArrayList<Double>();
				ArrayList<Integer> next_players = new ArrayList<Integer>();

				for (j = 0; j < curr_index_max; j++)
				{
					int thisplayer = players.get(j);
					int a, b;
					if ((thisplayer + (nextplayer - 1)) % (2 * nextplayer) == 0)
					{
						b = thisplayer;
						a = b - nextplayer;

					}
					else
					{
						a = players.get(j);
						b = a + nextplayer;
					}

					if ((j + 1) != players.size())
					{

						if (players.get(j + 1) == b)
						{
							next_index_max--;
							next_players.add(a);
							double x = prob.get(j);
							double y = prob.get(j + 1);
							double newprob = x * y + (1 - x) * y * p + x * (1 - y) * p;
							next_prob.add(newprob);

							j++; // move 1 more position ahead

						}
						else
						{
							// b is not type 1 player or maybe b is second
							// player to a
							next_players.add(a);
							double x = prob.get(j);
							double y = 0;
							double newprob = x * y + (1 - x) * y * p + x * (1 - y) * p;
							next_prob.add(newprob);

						}
					}
					else
					{
						next_players.add(a);
						double x = prob.get(j);
						double y = 0;
						double newprob = x * y + (1 - x) * y * p + x * (1 - y) * p;
						next_prob.add(newprob);
					}
				}
				players = new ArrayList<>(next_players);
				prob = new ArrayList<>(next_prob);
			}
			// System.out.println(prob.size());
			// System.out.println();
			System.out.println(prob.get(0) * 100);

		}

	}

}

class InputReader
{

	private InputStream	stream;
	private byte[]		buf	= new byte[1024];
	private int			curChar;
	private int			numChars;

	public InputReader(InputStream stream)
	{
		this.stream = stream;
	}

	public int read()
	{
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars)
		{
			curChar = 0;
			try
			{
				numChars = stream.read(buf);
			}
			catch (IOException e)
			{
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public int nextInt()
	{
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-')
		{
			sgn = -1;
			c = read();
		}
		int res = 0;
		do
		{
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		}
		while (!isSpaceChar(c));
		return res * sgn;
	}

	public String nextString()
	{
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do
		{
			res.appendCodePoint(c);
			c = read();
		}
		while (!isSpaceChar(c));
		return res.toString();
	}

	public boolean isSpaceChar(int c)
	{
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public int[] nextInts(int size)
	{
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = nextInt();
		return array;
	}
}
