
//package tournam;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;

public class Main
{

	/**
	 * @param args
	 * @throws IOException 
	 * @throws NumberFormatException 
	 */
	public static void main(String[] args) throws NumberFormatException, IOException
	{
		// TODO Auto-generated method stub
		//System.setIn(new FileInputStream("input.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int t = Integer.parseInt(br.readLine());
		int i, c, j;
		for (c = 0; c < t; c++)
		{
			String inp[] = (br.readLine().split(" "));
			int n = Integer.parseInt(inp[0]);

			int rounds = (int) (Math.log((double) n) / Math.log(2.0));
			int m = Integer.parseInt(inp[1]);
			int pt = Integer.parseInt(inp[2]);
			double p = pt / 100.0;
			ArrayList<Double> prob = new ArrayList<Double>();
			ArrayList<Integer> players = new ArrayList<Integer>();
			inp=br.readLine().split(" ");
			for (i = 0; i < m; i++)
			{
				
				players.add(Integer.parseInt(inp[i]));
				prob.add(1.0);
			}

			Collections.sort(players);
			int curr_index_max;
			int next_index_max = m;
			for (i = 1; i < rounds + 1; i++)
			{
				int nextplayer = (int) Math.pow(2.0, i - 1);

				if (i == 1)
					curr_index_max = m;// for first round
				else
					curr_index_max = next_index_max;
				ArrayList<Double> next_prob = new ArrayList<Double>();
				ArrayList<Integer> next_players = new ArrayList<Integer>();

				/*
				 * Iterator<Integer> it = players.iterator(); while
				 * (it.hasNext()) { System.out.print(it.next() + " "); }
				 */
				for (j = 0; j < curr_index_max; j++)
				{
					int thisplayer = players.get(j);
					int a, b;
					if ((thisplayer + (nextplayer - 1)) % (2 * nextplayer) == 0)
					{
						b = thisplayer;
						a = b - nextplayer;

					}
					else
					{
						a = players.get(j);
						b = a + nextplayer;
					}

					if ((j + 1) != players.size())
					{

						if (players.get(j + 1) == b)
						{
							next_index_max--;
							next_players.add(a);
							double x = prob.get(j);
							double y = prob.get(j + 1);
							double newprob = x * y + (1 - x) * y * p + x * (1 - y) * p;
							next_prob.add(newprob);

							j++; // move 1 more position ahead

						}
						else
						{
							// b is not type 1 player or maybe b is second
							// player to a
							next_players.add(a);
							double x = prob.get(j);
							double y = 0;
							double newprob = x * y + (1 - x) * y * p + x * (1 - y) * p;
							next_prob.add(newprob);

						}
					}
					else
					{
						next_players.add(a);
						double x = prob.get(j);
						double y = 0;
						double newprob = x * y + (1 - x) * y * p + x * (1 - y) * p;
						next_prob.add(newprob);
					}
				}
				players = new ArrayList<>(next_players);
				prob = new ArrayList<>(next_prob);
			}
			// System.out.println(prob.size());
			// System.out.println();
			System.out.println(prob.get(0) * 100);

		}

	}

}
