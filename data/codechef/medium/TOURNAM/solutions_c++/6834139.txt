import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Main {
	
	private static class NeverMan implements Comparable<NeverMan> {
		public NeverMan(int position, double probability) {
			this.position = position;
			this.probability = probability;
		}
		public int position;
		public double probability;
		
		@Override
		public int compareTo(NeverMan o) {
			return position - o.position;
		} 
	}
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		Scanner reader = new Scanner(new InputStreamReader(System.in));
		int T = Integer.parseInt(reader.nextLine());
		for (int t = 0 ; t < T ; ++t) {
			String[] params = reader.nextLine().split(" ");
			int N = Integer.parseInt(params[0]);
			int M = Integer.parseInt(params[1]);
			double P = (double)Integer.parseInt(params[2]) / 100;
			
			int K = (int) (Math.log(N) / Math.log(2));
			
			NeverMan[] neverPeople = new NeverMan[M];
			for (int i = 0 ; i < M ; ++i) {
				neverPeople[i] = new NeverMan(reader.nextInt() - 1, 1.0);
			}
			
			Arrays.sort(neverPeople);
			reader.nextLine();
			ArrayList<NeverMan> probabilities = new ArrayList<NeverMan>();
			for (int i = 0 ; i < neverPeople.length ; ++i) {
				probabilities.add(neverPeople[i]);
			}
			
			for (int i = 0 ; i < K ; ++i) {
				probabilities = nextRound(probabilities, P);
			}
			System.out.println(probabilities.get(0).probability * 100);
		}
		reader.close();
	}

	private static ArrayList<NeverMan> nextRound(ArrayList<NeverMan> probabilities, double p) {
		ArrayList<NeverMan> next = new ArrayList<NeverMan>();
		int i = 0; 
		while (i < probabilities.size()) {
			int step = 1;
			double p1 = probabilities.get(i).probability;
			double p2 = 0;
			int firstPosition = probabilities.get(i).position;
			if (firstPosition % 2 == 0 && i < probabilities.size() -1 && firstPosition == probabilities.get(i + 1).position - 1) {
				p2 = probabilities.get(i + 1).probability;
				++step;
			}
			next.add(new NeverMan(firstPosition / 2, p1*p2 + p * (p2 - 2*p2*p1 + p1)));
			i += step;
		}
		return next;
	}
}