#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
#include<stack>
#include<list>
#include<cstring>
#include<algorithm>
#include<cmath>
 
using namespace std;
 
struct node
{
       int x;
       double p;
};
 
bool compare(node a,node b)
{
     return a.x < b.x;
}
 
typedef long long ll;
typedef list<int> li;
typedef stack<int> si;
typedef queue<int> qi;
typedef priority_queue<int> pqi;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,string> pis;
typedef pair<string,int> psi;
 
#define MXM  10010 
 
int main()
{
    int test=1,i,n,m,k,tmp;
    node nd;
    double prob,pr;
    cout.precision(13);
    cout.setf(ios::fixed,ios::floatfield);   // floatfield set to fixed
    list<node> l;
    scanf("%d",&test);
    while(test--)
    {
         scanf("%d%d%d",&n,&m,&tmp);
         k=0;
         while(n)
         {
                 ++k;
                 n>>=1;
         }
         pr=((double)(tmp)*1.0)/100.0;
         nd.p=1.0;
         //cout<<"pr: "<<pr<<endl;
         for(i=0;i<m;++i)
         {
              scanf("%d",&nd.x);
              l.push_back(nd);
         }
         l.sort(compare);
         list<node>::iterator itr,itr1,itr2;
         while(--k)
         {
           //     cout<<"**k: "<<k<<"**"<<endl;   
                itr1=l.end();
                --itr1;
                itr=l.begin();
                while(true)
                {    
                       if((itr->x) & 1)
                       {
             //               cout<<"itr->x: "<<itr->x<<" itr->p: "<<itr->p;       
                            itr2=itr;
                            ++itr2;
                            if(itr2->x == itr->x + 1)
                            {
               //                     cout<<" : with itr2->x: "<<itr2->x<<" itr2->p: "<<itr1->p<<endl;   
                                    nd.x=(itr->x + 1)>>1;
                                    nd.p=((itr->p * (1.0-itr2->p)) + (itr2->p * (1.0-itr->p)))*pr;
                                    nd.p+=((itr->p)*(itr2->p));
                                    l.push_back(nd);
                                    itr2=itr;
                                    ++itr;
                                    l.erase(itr2);
                            }
                            else
                            {
                                   nd.x=(itr->x + 1)>>1;
                                   nd.p=(itr->p * pr);
                                   l.push_back(nd);
                            }
                       }
                       else
                       {
                                   nd.x=(itr->x)>>1;
                                   nd.p=(itr->p * pr);
                                   l.push_back(nd);
                       }
                       if(itr==itr1) 
                       {
                           l.erase(itr);
                           break;
                       }
                       itr2=itr;
                       ++itr;
                       l.erase(itr2);
                }
         }
                cout<<(l.begin())->p * 100.0<<endl;
                l.erase(l.begin());
               /* cout<<"list now: "<<endl;
                for(itr=l.begin();itr!=l.end();++itr)
                    cout<<"itr->x: "<<itr->x<<" itr->p: "<<itr->p <<endl;
         */
    }
}         
         
