#include <stdio.h>
 
typedef unsigned int  uint;
 
inline uint read_uint()
{
  uint  n = 0, c;
 
  for (c = getchar_unlocked(); c < '0' || '9' < c; c = getchar_unlocked());
 
  do
  {
    n = (n << 3) + (n << 1) + c - '0';
    c = getchar_unlocked();
  }
  while ('0' <= c && c <= '9');
 
  return n;
}
 
#include <algorithm>
 
const uint  MAX_M = 10000;
 
struct posprob
{
  uint    pos;
  double  prob;
  
  posprob() {}
  posprob(const posprob& o) : pos(o.pos) {} // sufficient for the sort
  void operator=(const posprob& o) {pos = o.pos;}
  bool operator <(const posprob& o) const {return pos < o.pos;}  
};
 
int main()
{
  for (uint T = read_uint(); T; --T)
  {
    uint     N = read_uint(), M = read_uint(), P = read_uint();   
    double   d = P * 0.01;
    posprob  begin[MAX_M], *end = begin + M;
    
    for (posprob* p = begin; p != end; ++p)
    {
      p->pos = (read_uint() - 1) >> 1;
      p->prob = 1.;
    }
    
    std::sort(begin, end);
    
    for (; N != 1; N = N >> 1)
    {
      posprob  *p = begin, *o = begin;
      
      do
      {
	posprob*  q = p + 1;
	
        if (q != end && p->pos == q->pos)
        {
          o->pos = p->pos >> 1;
          (o++)->prob = p->prob * q->prob * (1 - 2 * d) + (p->prob + q->prob) * d;
          p += 2;
        }
        else
        {
          o->pos = p->pos >> 1;
          (o++)->prob = p->prob * d;
	  ++p;
        }
      }
      while (p != end);
      
      end = o;
    }
    
    printf("%.14f\n", begin->prob * 100);
  }
  
  return 0;
}