#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <cctype>
#define SZ(x) ( (int) (x).size() )
#define me(x,a) memset(x,a,sizeof(x))
#define FN(a,n) for(int a=0;a<n;a++)
#define FOR(a,ini,fin) for(int a=(ini);a<(fin);a++)
#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d %d",&x,&y)
#define sc3(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define F first
#define S second
#define endl "\n"
#define MOD 1000000007
#define MAXN 100005
#define MAXLOG 20

typedef long long LL;
typedef unsigned long long ULL;
using namespace std;

int val[MAXN];

struct LazyNode{
	LazyNode()
	{
	}
	void operator +=(const LazyNode &nl)
	{
	}
};

struct Node{
    LL bl, br, bt, sum;
    Node(){
        //elemento neutro:
        bl = br = bt = LONG_MIN;
        sum = 0;
    }
	void operator +=(const LazyNode &nl) 
	{
	}
	Node operator+( const Node &r) const {
	    Node c;
	    c.bl = bl;
	    if (r.bl != LONG_MIN) c.bl = max(c.bl, sum + r.bl);
	    
	    c.br = r.br;
	    if (br != LONG_MIN) c.br = max(r.br, r.sum + br);
	    
	    c.bt = max(r.bt, bt);
	    if (r.bl != LONG_MIN && br != LONG_MIN) c.bt = max(c.bt, r.bl + br);
	    
	    c.sum = sum + r.sum;
	    return c;
	}
	static Node getInitNode(int i) {
		Node c;
		int v = val[i];
		c.bl = v;
		c.br = v;
		c.bt = v;
		c.sum = v;
		return c;
	}
};

//notese la diferencia con BIT en el cual para consultar un rango (no solo acumulados) se requiere de la operacion resta, en cambio en ST no.
struct ST{
    Node T[ MAXN * 4 ];
    LazyNode LazyT[ MAXN * 4 ];
    int n;
    ST(){}
    ST( int tam ){
        n = tam;
        build_tree( 0 , 0 , n - 1 );
    }
    void setSizeAndBuild( int tam ){
        n = tam;
        build_tree( 0 , 0 , n - 1 );
    }
    void build_tree( int node , int a , int b ){
        if( a == b ){
            LazyT[ node ] = LazyNode();
            
            //inicializando el elemento 'a'
            T[ node ] = Node::getInitNode(a);
            return;
        }
        build_tree( ((node<<1) + 1) , a , ((a+b)>>1) ) , build_tree( ((node<<1) + 2) , ((a+b)>>1) + 1  , b );
        T[ node ] = T[ ((node<<1) + 1) ] + T[ ((node<<1) + 2) ];
    }
    void push( int node , int a , int b ){
        T[ node ] += LazyT[ node ];
        if( a != b ){
            LazyT[ node*2 + 1 ] += LazyT[ node ];
			LazyT[ node*2 + 2 ] += LazyT[ node ];
        }

        LazyT[ node ] = LazyNode();
    }
    Node query( int node , int a , int b , int lo , int hi ){
        push( node , a , b );
        if( lo > b || a > hi ) return Node();
        if( a >= lo && hi >= b ) return T[ node ];
        return query( ((node<<1) + 1) , a , ((a+b)>>1) , lo , hi ) + query( ((node<<1) + 2) , ((a+b)>>1) + 1  , b , lo , hi );
    }
    void update( int node , int a , int b , int lo , int hi, const LazyNode& val){
        push( node , a , b );
        if( lo > b || a > hi ) return ;
        if( a >= lo && hi >= b ) {
            LazyT[ node ] = val;
            push( node , a , b );
            return;
        }
        update( ((node<<1) + 1) , a , ((a+b)>>1) , lo , hi , val);
        update( ((node<<1) + 2) , ((a+b)>>1) + 1  , b , lo , hi , val);
        T[ node ] = T[ ((node<<1) + 1) ] + T[ ((node<<1) + 2) ] ;
    }
    Node query( int lo , int hi ){
        return query( 0 , 0 , n - 1 , lo , hi );

    }
    void update( int lo , int hi ,const LazyNode& val){
        update( 0 , 0 , n - 1 , lo , hi , val );
    }
}st;

void showNode(Node node) {
		cout << " bl: " << node.bl << " br: " << node.br << " bt: " << node.bt << " sum: " << node.sum << endl;
}

int main()
{
	int tc;
	sc1(tc);
	while (tc--) {
		int n, k;
		sc2(n, k);
		FN (i, n) {
			sc1(val[i]);
		}
		st.setSizeAndBuild(n);
		LL big = LONG_MIN;
		FOR (i, 1, n - k) {
			LL cur;
			Node nl = st.query(0, i - 1);
			Node nr = st.query(i + k, n - 1);
			// cout << "nl: " ;showNode(nl);
			// cout << "nr: " ;showNode(nr);
									
			cur = nl.bt + nr.bt;
			big = max(big, cur);
		}
		cout << big << endl;
	}
}