#include <cstdio>
#include <climits>
#include <new>
#include <algorithm>
using namespace std;
int pros[100005];
long long best_forward[100005];
long long best_backward[100005];
long long cumulative_best_forward[100005];
long long cumulative_best_backward[100005];
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n,k;
		scanf("%d %d",&n,&k);
		for (int i=0;i<n;i++)
		{
			scanf("%d",&pros[i]);
		}
		best_forward[0] = (long long)pros[0];
		for (int i=1;i<n;i++)
		{
			best_forward[i] = max((long long)pros[i],best_forward[i-1]+(long long)pros[i]);
		}
		cumulative_best_forward[0] = best_forward[0];
		for(int i=1;i<n;i++)
		{
			cumulative_best_forward[i] = max(cumulative_best_forward[i-1],best_forward[i]);
		}
		best_backward[n-1] = (long long)pros[n-1];
		for(int i=n-2;i>=0;i--)
		{
			best_backward[i] = max((long long)pros[i],(best_backward[i+1]+(long long)pros[i]));
		}
		cumulative_best_backward[n-1] = best_backward[n-1];
		for(int i=n-2;i>=0;i--)
		{
			cumulative_best_backward[i] = max(cumulative_best_backward[i+1],best_backward[i]);
		}
		long long maxSoFar = (long long)INT_MIN;
		for(int j=k+1;j<n;j++)
		{
			if ((cumulative_best_forward[j-k-1] + cumulative_best_backward[j]) > maxSoFar)
			{
				maxSoFar = cumulative_best_forward[j-k-1] + cumulative_best_backward[j];
			}
		}
		printf("%lld\n",maxSoFar);
	}
	return 0;
}
