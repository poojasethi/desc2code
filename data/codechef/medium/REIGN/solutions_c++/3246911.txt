// Author: Tusshar Singh
#include<cstdio>
#include<vector>
#include<cmath>
#include<string>
#include<cstring>
#include<algorithm>
#include<queue>
#include<set>
#include<stack>
#include<map>
#include<sstream>
#include<bitset>
#include<deque>
#include<utility>
#include<cstdlib>
#include<iomanip>
#include<cctype>
#include<climits>
#include<iostream>

using namespace std;

#define mod 1000000007
#define inf 2147483647
#define ninf -2147483648
#define FOR(i,a,b) for(i=a;i<b;i++)
#define s(a) scanf("%d",&a)
#define lls(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define p(a) printf("%d",a)
#define llp(a) printf("%lld",a)
#define sp(a) printf("%s",a)
#define cp(a) printf("%c",a)
#define nline printf("\n")
#define space printf(" ")
#define ll long long
#define gcd __gcd

string tostr(long long x) { stringstream ss; ss << x; return ss.str(); }
long long toint(const string &s) { stringstream ss; ss << s; long long x; ss >> x; return x; }


void kadane(int arr[100010],int size,ll kmax[100010],int n)
{
    ll max_so_far  = arr[0], max_ending_here = arr[0],i;
    kmax[0]=max_so_far;
    for(i=1;i<n;i++)
        {
                if(max_ending_here < 0)
                {
                        max_ending_here = arr[i];
                }
                else
                {
                        max_ending_here += arr[i];
                }
                if(max_ending_here >= max_so_far )
                {
                        max_so_far  = max_ending_here;
                }
                kmax[i]=max_so_far;
        }
}

int main() {
    //freopen ("input.txt","r",stdin);
    //freopen ("output.txt","w",stdout);
    int t;
    s(t);
    while(t--)
    {
        int n;
        int i,j,k;
        int arr[100010];
        ll rmax[100010],kmax[100010];
        s(n);
        s(k);
        FOR(i,0,n)
        {
            s(arr[i]);
        }
        ll ans=-10000000000ll;
        kadane(arr,n,kmax,n);
        reverse(arr,arr+n);
        kadane(arr,n,rmax,n);
        reverse(rmax,rmax+n);
        for(i=0;i<(n-k-1);i++)
        {
            ans=max(ans,kmax[i]+rmax[i+k+1]);
        }
        printf("%lld\n",ans);
    }

    return 0;
}
