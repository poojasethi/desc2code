#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <vector>

using namespace std;

typedef long long LL;
typedef vector <int> VI;
typedef pair <int, int> PI;
typedef vector <string> VS;

#define all(x) (x).begin(), (x).end()
#define fill(a, v) memset(a, v, sizeof(a))
#define for(i, s, n) for(int i = (s); i < (n); i++)
#define fore(i, s, n) for(int i = (s); i <= (n); i++)
#define foro(i, x) for(typeof(x.begin()) i = x.begin(); i != x.end(); i++)
#define push push_back
#define mp make_pair
#define sz(x) (int)(x.size())

const double eps = 1e-6;

int main () {
	int t;
	scanf ("%d", &t);
	while (t--) {
		int n;
		scanf ("%d", &n);
		int num = 0;
		double den = n*(n-1)*(n-2)*(n-3)/6;
		int x[n], y[n];
		for(i, 0, n) scanf ("%d %d", x+i, y+i);
		for(i, 0, n) for(j, i+1, n) for(k, j+1, n) {
			double drden = x[i]*(y[j]-y[k])-y[i]*(x[j]-x[k])+(x[j]*y[k]-x[k]*y[j]);
			double area = drden/2;
			if (fabs(area) > 0) {
				for(l, 0, n) {
					if (l != i && l != j && l != k) {
						double d1 = -(x[i]*x[i]+y[i]*y[i]);
						double d2 = -(x[j]*x[j]+y[j]*y[j]);
						double d3 = -(x[k]*x[k]+y[k]*y[k]);
						double A = (d1*(y[j]-y[k])-y[i]*(d2-d3)+(d2*y[k]-d3*y[j]))/drden;
						double B = (x[i]*(d2-d3)-d1*(x[j]-x[k])+(x[j]*d3-x[k]*d2))/drden;
						double C = (x[i]*(y[j]*d3-y[k]*d2)-y[i]*(x[j]*d3-x[k]*d2)+d1*(x[j]*y[k]-x[k]*y[j]))/drden;
						if ((double)(x[l]*x[l]+y[l]*y[l]+A*x[l]+B*y[l]+C) < eps) num++;
					}
				}
			}
		}
		printf ("%.18lf\n", (double)num/den);
	}
	return 0;
}