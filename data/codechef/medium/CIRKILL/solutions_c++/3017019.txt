#include <cstdio>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <iostream>

using namespace std;

class pt {
public:
	double x, y;
};

#define Point pt

bool eq(double a, double b) {
	a = b-a;
	return fabs(a) <= 1e-8;
}

//distance between two points
double length(pt a, pt b) {
	double xx = (a.x-b.x);
	xx *= xx;
	double yy = (a.y-b.y);
	yy*=yy;
	return sqrt(xx+yy);
}


//Circle class supporting 3 point form of a circle
class Circle {
public:
	double GetRadius();
	Point GetCenter();
	Circle(Point p1, Point p2, pt p3);
	Circle();
	double CalcCircle(pt p1, pt p2, pt p3);
	bool isPerp(pt p1, pt p2, pt p3);
	double m_rad;
	pt m_cent;
};

Circle::Circle() {
	this->m_rad = -1;
}

Circle::Circle(pt p1, pt p2, pt p3) {
	this->m_rad = -1;
	pt pt1, pt2, pt3;
	pt1 = p1, pt2 = p2, pt3 = p3;
	if(!this->isPerp(pt1, pt2, pt3)) this->CalcCircle(pt1, pt2, pt3);
	else if(!this->isPerp(pt1, pt3, pt2)) this->CalcCircle(pt1, pt3, pt2);
	else if(!this->isPerp(pt2, pt1, pt3)) this->CalcCircle(pt2, pt1, pt3);
	else if(!this->isPerp(pt2, pt3, pt1)) this->CalcCircle(pt2, pt3, pt1);
	else if(!this->isPerp(pt3, pt2, pt1)) this->CalcCircle(pt3, pt2, pt1);
	else if(!this->isPerp(pt3, pt1, pt2)) this->CalcCircle(pt3, pt1, pt2);
	else {
		this->m_rad = -1;
	}
	return;
}

bool Circle::isPerp(pt pt1, pt pt2, pt pt3) {
	double yda = pt2.y - pt1.y;
	double xda = pt2.x - pt1.x;
	double ydb = pt3.y - pt2.y;
	double xdb = pt3.x - pt2.x;
	if(eq(xda, 0.0) && eq(ydb,0.0)) return false;
	else if(eq(yda, 0.0)) return true;
	else if(eq(ydb, 0.0)) return true;
	else if(eq(xda, 0.0)) return true;
	else if(eq(xdb, 0.0)) return true;
	else return false;
}

double Circle::CalcCircle(pt pt1, pt pt2, pt pt3) {
	double yda = pt2.y - pt1.y;
	double xda = pt2.x - pt1.x;
	double ydb = pt3.y - pt2.y;
	double xdb = pt3.x - pt2.x;
	if(eq(xda, 0.0) && eq(ydb,0.0)) {
		this->m_cent.x = 0.5*(pt2.x + pt3.x);
		this->m_cent.y = 0.5*(pt1.y + pt2.y);
		this->m_rad = length(m_cent, pt1);
		return this->m_rad;
	}
	double aS = yda/xda;
	double bS = ydb/xdb;
	if(eq(aS-bS, 0.0)) {
		//collinear
		return -1;
	}
	pt p;
	p.x = (aS*bS*(pt1.y-pt3.y) + bS*(pt1.x+pt2.x)
			- aS*(pt2.x+pt3.x))/(2 * (bS - aS) );
	p.y = -1*(p.x - (pt1.x+pt2.x)/2)/aS + (pt1.y+pt2.y)/2;
	this->m_cent = p;
	this->m_rad = length(m_cent, pt1);
	return this->m_rad;
}

pt Circle::GetCenter() {
	return this->m_cent;
}

double Circle::GetRadius() {
	return this->m_rad;
}

void print(pt a) {
	cout << a.x << " " << a.y << endl;
}


vector < pt > v;

#define rep(i, a, b) for(int i=a; i<b;i++)

int main() {
	int nt;
	scanf ("%d", &nt);
	while(nt--) {
		int n; v.clear();
		scanf("%d",&n);
		for(int i=0; i<n;i++) {
			pt p;
			scanf("%lf%lf", &p.x, &p.y);
			v.push_back(p);
		}
		int total = 0, pos = 0;
		//brute forcing for all 4-tuples of points
		rep(i,0,n) rep(j,i+1, n) rep(k, j+1, n) rep(l, 0, n) {
			if(l==i || l==j || l==k) continue;
			total++;
			Circle c = Circle(v[i], v[j], v[k]);
			if(c.m_rad < 0.0) continue;
			//check if point lies in the center
			double R = length(c.m_cent, v[l]);
			if(R < c.m_rad || eq(R, c.m_rad)) {
				pos++;
			}
		}
		double ans = (double) pos/ total;
		printf("%.6lf\n", ans);
	}
	return 0;
}