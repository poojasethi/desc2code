#include <cstdio>
int tile[30][2];
int determinant(
		int a1, int b1,
		int a2, int b2){
	return a1*b2-a2*b1;
}
int determinant(
		int a1, int b1, int c1,
		int a2, int b2, int c2,
		int a3, int b3, int c3){
	return a1*determinant(
			b2, c2,
			b3, c3)
		-b1*determinant(
			a2, c2,
			a3, c3)
		+c1*determinant(
			a2, b2,
			a3, b3);
}


int main(){
	int T;
	scanf("%d", &T);
	while(T--){
		int N;
		scanf("%d", &N);
		for(int i = 0; i < N; ++i){
			scanf("%d%d", &tile[i][0], &tile[i][1]);
		}
		int total = 0;
		int amount = 0;
		for(int i = 0; i < N; ++i){
			for(int j = 0; j < i; ++j){
				for(int k = 0; k < j; ++k){
					int a1 = tile[i][0]-tile[j][0];
					int b1 = tile[i][1]-tile[j][1];
					int a2 = tile[i][0]-tile[k][0];
					int b2 = tile[i][1]-tile[k][1];
					int det = a1*b2-a2*b1;
					for(int l = 0; l < N; ++l){
						if(l == i || l == j || l == k)
							continue;
						++total;
						if(det == 0)
							continue;
						int Adet = -determinant(
								tile[i][0]*tile[i][0]+tile[i][1]*tile[i][1], tile[i][1], 1,
								tile[j][0]*tile[j][0]+tile[j][1]*tile[j][1], tile[j][1], 1,
								tile[k][0]*tile[k][0]+tile[k][1]*tile[k][1], tile[k][1], 1);
						int Bdet = determinant(
								tile[i][0]*tile[i][0]+tile[i][1]*tile[i][1], tile[i][0], 1,
								tile[j][0]*tile[j][0]+tile[j][1]*tile[j][1], tile[j][0], 1,
								tile[k][0]*tile[k][0]+tile[k][1]*tile[k][1], tile[k][0], 1);
						int Cdet = -determinant(
								tile[i][0], tile[i][1], tile[i][0]*tile[i][0]+tile[i][1]*tile[i][1],
								tile[j][0], tile[j][1], tile[j][0]*tile[j][0]+tile[j][1]*tile[j][1],
								tile[k][0], tile[k][1], tile[k][0]*tile[k][0]+tile[k][1]*tile[k][1]);
						int result = det*(tile[l][0]*tile[l][0]+tile[l][1]*tile[l][1])+Adet*tile[l][0]+Bdet*tile[l][1]+Cdet;
						if(det<0 && result >= 0)
							++amount;
						if(det>0 && result <= 0)
							++amount;
					}
				}
			}
		}
		printf("%lf\n", (double)amount/(double)total);
	}
	return 0;
}
