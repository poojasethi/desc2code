#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <deque>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>
#include <cassert>

using namespace std;

#define FOR(i,a,b)				for (i=a;i<b;i++)
#define s(n)					scanf("%d",&n)
#define p(n)					printf("%d\n",n)
#define pl(n)					printf("%lld\n",n)
#define sd(n)					int n;scanf("%d",&n)
#define sl(n)					scanf("%lld",&n)
#define sld(n)					long long int n;scanf("%lld",&n)
#define pb(n)                                   push_back(n)
#define all(c)                                  (c).begin(),(c).end()
#define tr(container,it)                        for (typeof(container.begin()) it=container.begin();it!=container.end();it++ )
#define sz(a)                                   int((a).size())
#define clr(a)                                  memset(a,0,sizeof(a))
#define mp(a,b)                                 make_pair(a,b)

#define INF                                     LONG_MAX
#define UINF                                    ULONG_MAX
#define INF_LL                                  LLONG_MAX
#define UINF_LL                                 ULLONG_MAX

typedef long long ll;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vstr;

//double dist2(double x1,double y1,double x2,double y2)
//{
//    double dx=x1-x2,dy=y1-y2;
//    return (dx*dx+dy*dy);
//}

ll dist2(int x1,int y1,int x2,int y2)
{
    ll dx=(ll)x1-x2;
    ll dy=(ll)y1-y2;
    return (dx*dx+dy*dy);
}

bool beKilled(int x,int y,int x1,int y1,int x2,int y2,int x3,int y3)
{
    //check whether the 3 points are collinear
    if ((x3-x2)*(y2-y1)==(y3-y2)*(x2-x1)) return false;
    int d=2*(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));
    int cx_nr=(x1*x1+y1*y1)*(y2-y3)+(x2*x2+y2*y2)*(y3-y1)+(x3*x3+y3*y3)*(y1-y2);
    int cy_nr=(x1*x1+y1*y1)*(x2-x3)+(x2*x2+y2*y2)*(x3-x1)+(x3*x3+y3*y3)*(x1-x2);
    cy_nr*=-1;
    ll r2=dist2(cx_nr,cy_nr,d*x1,d*y1);
//    printf("Center and radius of circumcircle of (%d,%d), (%d,%d) and (%d,%d) is (%f,%f) and %f.\n",x1,y1,x2,y2,x3,y3,(double)cx_nr/d,(double)cy_nr/d,sqrt((double)r2/(d*d)));
    if (dist2(d*x,d*y,cx_nr,cy_nr)<=r2) return true;
    return false;
}

int main()
{
    sd(T);
    int t;
    int i,j,k,l;
    FOR(t,0,T)
    {
        sd(n);
        vi x(n),y(n);
        FOR(i,0,n)
        {
            s(x[i]);
            s(y[i]);
        }
        int favWays=0,tot=0;
        FOR(i,0,n)
        {
            FOR(j,i+1,n)
            {
                FOR(k,j+1,n)
                {
                    FOR(l,0,n)
                    {
                        if (l!=i&&l!=j&&l!=k)
                        {
                            int x1=x[i],y1=y[i];
                            int x2=x[j],y2=y[j];
                            int x3=x[k],y3=y[k];
                            int xa=x[l],ya=y[l];
                            if (beKilled(xa,ya,x1,y1,x2,y2,x3,y3))
                            {
//                                printf("(%d,%d) (%d,%d) (%d,%d) (%d,%d)\n",xa,ya,x1,y1,x2,y2,x3,y3);
                                favWays++;
                            }
                            tot++;
                        }
                    }
                }
            }
        }
        int totWays=(n*(n-1)*(n-2)*(n-3))/6;
        assert(tot==totWays);
        double ans=(double)favWays/totWays;
        printf("%.9f\n",ans);
    }
}

//avoiding floating point calculations
//changed return type of dist2 to ll
//added an assertion to check whether totWays is being calculated correctly - it is. which means there's something wrong with calculation of favWays
//added another assertion to check whether the calculation of circumcentre is being done correctly - it isn't! 
//just made the implementation of dist2 a bit cleaner (to overrule any possibility of an ll error). Cleaned up beKilled a bit too.
//POST CONTEST
//changed diff2 back, to check where the problem was in the earlier solutions - didn't work
//changed diff2 back to the accepted one, and changed beKilled back instead