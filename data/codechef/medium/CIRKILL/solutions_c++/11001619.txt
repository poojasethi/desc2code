
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;
 
//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)
 
#define gi(n) scanf("%d",&n)
#define gd(n) scanf("%lf",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
#define INF double(imax)
#define EPS 10e-8
typedef pair< double, double> pdd;
int x[40],y[40];
pdd getcenter(pdd a,pdd b,pdd c) {
	//pdd -> pair <double , double>
	//Given 3 points as input returns center of circle formed by 3 on circumfrence 
	// printf("%lf %lf | %lf %lf | %lf %lf\n",a.ff,a.ss,b.ff,b.ss,c.ff,c.ss);
	double a1 = b.ss-a.ss , b1 = a.ff-b.ff ,c1;
	double a2 = c.ss-b.ss , b2 = b.ff-c.ff ;
	// printf("%lf %lf %lf %lf\n",a1,b1,a2,b2);
	double mx = (a.ff+b.ff)*.5 ,my = (a.ss+b.ss)*.5;
	double d1 = a1*my-b1*mx;
	mx= (b.ff+c.ff)*.5; my = (b.ss+c.ss)*.5;
	double d2 = a2*my-b2*mx;
	c1=a1; a1=-b1; b1=c1; 
	c1=a2; a2=-b2; b2=c1;
	// printf("%lf %lf %lf %lf\n",a1,b1,a2,b2);
	double det = a1*b2 - b1*a2;
	if(det==0) return mp(INF,INF);
	// b2 -b1 | c1
	// -a2 a1 | c2
	double x1=b2*d1-b1*d2,y1=a1*d2-a2*d1;
	return mp(x1/det,y1/det);
}
 
double getdist(pdd a, pdd b) {
	return (double)(a.ff-b.ff)*(a.ff-b.ff) + (a.ss-b.ss)*(a.ss-b.ss);
}
 
int main() {
	int t,n;
	gi(t);
	while(t--) {
		gi(n);
		rep(i,n) { gi(x[i]); gi(y[i]); }
		int num=0,den=0;
		fu(i,0,n-1) fu(j,i+1,n-1) fu(k,j+1,n-1) {
			pdd center = getcenter( mp(x[i],y[i]), mp(x[j],y[j]), mp(x[k],y[k]) );
			double radius = getdist( mp(x[i],y[i]), center);
			int valid = center.ff > INF-10 && center.ss > INF-10;
			if(x[i]==x[j] && y[i]==y[j]) valid=1;
			if(x[j]==x[k] && y[j]==y[k]) valid=1;
			if(x[i]==x[k] && y[i]==y[k]) valid=1;
			// printf("%d %d %d %lf %lf %lf %d\n",i,j,k,center.ff,center.ss,radius,valid);
			rep(l,n) if(l!=i && l!=j && l!=k) {
				den++;
				if(valid) continue;
				if( getdist(mp(x[l], y[l]), center) > radius+EPS) continue;
				num++;
			}
		}
		// pi(num); ps; pi(den); pn;
		printf("%.10lf\n",double(num)/den);
	}
	return 0;
} 

