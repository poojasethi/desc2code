#include <cstdio>
#define MAX 30
using namespace std;

int determinant(int A[][3],int size)
{
	    int i,j,det=0,sign=1,B[3][3];
	    if(size==1)
	        return A[0][0];
	    for(i=1;i<size;i++)
	        for(j=1;j<size;j++)
                B[i-1][j-1]=A[i][j];
        for(i=0;i<size-1;i++)
        {
            det+=sign*A[0][i]*determinant(B,size-1);
            sign*=-1;
            for(j=1;j<size;j++)
                B[j-1][i]=A[j][i];
        }
        det+=sign*A[0][size-1]*determinant(B,size-1);
        return det;
}

struct point
{
    int x,y,square_of_distance_from_origin;
    void fill_point()
    {
        scanf("%i%i",&x,&y);
        square_of_distance_from_origin = x*x + y*y;
    }
};

point tiles[MAX+5];

struct triangle
{
    point points[3];int det[4],sign;
    void fill_triangle(point a,point b,point c)
    {
        int i,mat[3][3];
        points[0]=a;   points[1]=b;  points[2]=c;
        for(i=0;i<3;i++)
        {
            mat[i][0]=points[i].x;
            mat[i][1]=points[i].y;
            mat[i][2]=1;
        }
        det[0]=determinant(mat,3);
        for(i=0;i<3;i++) mat[i][0]=points[i].square_of_distance_from_origin;
        det[1]=determinant(mat,3);
        for(i=0;i<3;i++) mat[i][1]=points[i].x;
        det[2]=determinant(mat,3);
        for(i=0;i<3;i++) mat[i][2]=points[i].y;
        det[3]=determinant(mat,3);
        if(det[0]>0) sign=-1;
        else if(det[0]==0) sign=0;
        else sign=1;
    }
};

int count_unsafe(int n,triangle t)
{
    int i,counter=0;
    if(!t.sign) return 0;
    for(i=0;i<n;i++)
    counter+=(t.sign*(tiles[i].square_of_distance_from_origin*t.det[0]-tiles[i].x*t.det[1]+tiles[i].y*t.det[2]-t.det[3])>=0);
    return counter-3;
}

long int add_unsafe_count(int n)
{
    int i,j,k; long int counter=0; triangle t;
    for(i=0;i<n;i++)
        for(j=i+1;j<n;j++)
            for(k=j+1;k<n;k++)
               { t.fill_triangle(tiles[i],tiles[j],tiles[k]); counter+=count_unsafe(n,t); }
    return counter;
}

int main() {

		int i,t,n;
		double prob;long int total_possibilities;
		scanf("%i",&t);
		while(t--)
		{
		    scanf("%i",&n);
		    for(i=0;i<n;i++)
                tiles[i].fill_point();
            total_possibilities = (n*(n-1)*(n-2)/6)*(n-3);
            prob=(double)add_unsafe_count(n)/(double)total_possibilities;
            printf("%0.9lf\n",prob);
		}
    return 0;
}