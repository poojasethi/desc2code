# codechef easy - exploding search - insoma2.py

import copy

"""
This gets Time Limit

my soln is O( len(target) * n^2 )

n^2 in example is wasting time looking at "X" cells
   that aren't in string.  Could make a list of cells with each
   letter and go through the appropriate list at stage k

maybe could do some kind of bifurcation on target string.

E.g. score1[x][y] = ways to find 0..L/2 string ending at x,y
     score2[x][y] = ways to find L/2+1..L-1 starting at x,y
     total score = score1*score2

     not sure there is anything here, though


     Try list thing.
     UGH.  I still need n^2 time to zero the current array

     re-examine bifurcation:

     hypothetical function:
         ways(i,k):
             returns w[][] = nxn array where
                     w[x][y] = ways to find string s[i:i+k] starting at x,y

                bottom case:
               if k==2:
                   w[x][y] = 0 if g[x][y] != s[i]
                           else = number of adjacent cells with g[x1][y1]=s[i+1]


               

               else:

               l1 = k/2+1
               w1 = ways1(i,l1)
                   ways1 returns ways to find string ENDing at x,y
               w2 = ways(i+k/2, k-l1+1)

               w[x][y] = w1[x]*w2[x]


New new think.

At end of iteration k,
   score[x][y] =  if g[x][y]==s[k-1],
                       #ways to make k-len string ending at x y
                   else:
                        invalid value

"""

TESTING = False

if not TESTING:
    n = int(raw_input())
else:
    n = 5

empty = [' ']*(n+2)
grid = [ empty ]


inp = [
"B X A X X",
"X A X X X",
"X B B X X",
"X A X A X",
"X X B X X"]

for nn in xrange(n):
    if not TESTING:
        line = [' '] + raw_input().split() + [' ']
    else:
        line = [' '] + inp[nn].split() + [' ']
    
    grid.append( line )
grid.append(empty)

##for line in grid:
##    print line

# using buffer around grid to save work with edge effects

if not TESTING:
    target = raw_input().strip()
else:
    target = "ABA"



"""
initialize:

k=1
set score[x][y] =1 if grid[x][y] = target[0], 0 otherwise

This will always represent the number of strings of length k that end
   at x,y

for each iteration
   k+=1
   for each x,y
       score1[x][y] = 0
       for each adjacent square to x,y
           score1[x][y] += score[x][y]


"""

# create score arrays filled with zero
zero = []
for nn in xrange(n+2):
    zero.append( [0]*(n+2) )

score  = copy.deepcopy(zero)    
score1 = copy.deepcopy(zero)    


##def start_ways(i,k):
##    """ return ways to make string target[i:i+k] starting at each x,y """
##    if k==2:
##        score = copy.deepcopy(zero)
##        return score
##
##    else:
##        L = k//2+1
##        w1 = end_ways(i, L)
##        w2 = start_ways(i+L-1, k-L+1)
##        for x in xrange(1,n+1):
##            for y in xrange(1,n+1):
##                w1[x][y] *= w2[x][y]
##        return w1

    




# create letter lists:
loc = {}
for c in target:
    loc[c] = []
##print loc

# initialize score
k=0
for x in xrange(1,n+1):
    for y in xrange(1,n+1):
        if target[k]==grid[x][y]:
            score[x][y] = 1
        if grid[x][y] in loc:
            loc[ grid[x][y] ] += [(x,y)]

##for c in loc:
##    print c, loc[c]

##print
##for line in score:
##    print line
##print


# at start of each iteration k, score[] is valid for k-length strings,
#     score1 will be k+1 level score being constructed

# note : they only want diagonals, not verts/horiz

# score array is only valid where grid[x][y]==c0

c0 = target[0]
for c in target[1:]:
    score1 = copy.deepcopy(zero)
    for x,y in loc[c]:
        score1[x][y] = 0
        for x1 in xrange(x-1,x+2,2):
            for y1 in xrange(y-1,y+2,2):
                if grid[x1][y1]==c0:
                    score1[x][y] += score[x1][y1]

    # now score1 is complete, make it the new score
    t = score
    score = score1
    score1 = t
    c0 = c

##for c in target[1:]:
##    for x in xrange(1,n+1):
##        for y in xrange(1,n+1):
##            score1[x][y] = 0
##            if c==grid[x][y]:
##                for x1 in xrange(x-1,x+2,2):
##                    for y1 in xrange(y-1,y+2,2):
##                        score1[x][y] += score[x1][y1]
##    # now score1 is complete, make it the new score
##    t= score
##    score = score1
##    score1 = t            # don't need these values, but need structure
####    print
####    for line in score:
####        print line
####    print    

count = 0
for x,y in loc[c0]:
    count += score[x][y]
print count
                        





    
