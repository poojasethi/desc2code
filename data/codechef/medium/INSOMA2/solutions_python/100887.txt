
def initialArray(matrix, n, letter):
    for i in xrange(0,n):
        for j in xrange(0,n):
            if matrix[i][j] == letter:
                yield (i,j)

def nextMove(matrix, n, pos, letter):
    for d in diagonals:
        nm = nextMove1(matrix, n, pos, letter, d)
        if nm != None: 
            yield nm

def nextMove1(matrix, n, pos, letter, delta):
    x,y = pos[0]+delta[0], pos[1]+delta[1]
    if 0 <= x < n and  0 <= y < n and letter == matrix[x][y]: 
        return (x,y)

def flatten(lst):
    for elem in lst:
        for i in elem:
            yield i

if __name__ == "__main__":
    n = int(raw_input())

    matrix = []
    diagonals = [(-1,-1),(1,-1),(-1,1),(1,1)]

    for i in xrange(0,n):
        matrix.append(raw_input().strip().split(' '))

    hladaj = raw_input().strip()
   
    l = []
    for i in xrange(0,len(hladaj)):
        if i==0:
            l = list(initialArray(matrix, n, hladaj[i]))
        else:
            l = list(flatten(nextMove(matrix, n, pos, hladaj[i]) for pos in l))

    print len(l)