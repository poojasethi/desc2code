#include <iostream>
#include <cstring>
#include <stdlib.h>

static const int MAX_WIDTH = 1024;


char puzzle[MAX_WIDTH][MAX_WIDTH];

typedef long long Num;

Num paths[2][MAX_WIDTH][MAX_WIDTH];



void printPuzzle(int n){
  std::cout << "Puzzle lines:" << n << std::endl;
  for(int i = 1; i <= n; i++){
    for(int j = 1; j <= n; j++){
      std::cout << puzzle[i][j];
    }
    std::cout << std::endl;
  }
}

void make_puzzle(int n, std::string find, std::string chars){
  //Make a random puzzle
  std::cout << n << std::endl;
  int c;
  
  for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){    
      if (j > 0) std::cout  << " ";      
      c = rand() % chars.size();
      std::cout << chars[c];
    }
    std::cout << std::endl;
  }
  std::cout << find << std::endl;
  return;
}


Num countSearch(int n, const char * c){
  //Count how many searches.
  //Create a map of active cells - ie. the cells that match first letter. Assign 1 to each.
  //These will be kept in a map based on cell's index.
  //for each letter in the search string, find all cells that match and set them to the sum of the neighbours.
  //Total of cells at the end is the total number of paths.
  
  int frame = 0;
  Num total = 0;
 
  for(int i = 0; i <= n; i++){  
    for(int j = 0; j <= n; j++){
      if (puzzle[i][j] == *c) {
        paths[frame][i][j] = 1;        
      }
      else paths[frame][i][j] = 0;      
       
    }
  }
  //std::cout << " combos up to " << *c << " : " << total << std::endl ;

  int prev_frame = frame;
  c++;  
  while (*c){    
    frame ^= 1;
    //total = 0;
    for(int i = 1; i <= n; i++){  
      for(int j = 1; j <= n; j++){                

        if (puzzle[i][j] == *c){
          paths[frame][i][j] = 
                        paths[prev_frame][i-1][j-1] + 
                        paths[prev_frame][i+1][j-1] + 
                        paths[prev_frame][i-1][j+1] + 
                        paths[prev_frame][i+1][j+1];
          //total += paths[frame][i][j];                        
        }
        else paths[frame][i][j] = 0;
      }
    }
    //std::cout << " combos up to " << *c << " : " << total << std::endl ;
    prev_frame = frame;

    c++;
  } 
  total = 0;
  for(int i = 1; i <= n; i++){  
      for(int j = 1; j <= n; j++){        
        total += paths[frame][i][j];
      }
  } 
  return total;
}

int loadPuzzle(){
  //Load the puzzle
  int n;
  char c;
  memset(puzzle,0x00,sizeof(char)*MAX_WIDTH*MAX_WIDTH);
  
  std::cin >> n;
  std::string text;

  for(int i = 1; i <= n; i++){
    for(int j = 1; j <= n; j++){
      std::cin >> text;
      puzzle[i][j] = text[0];
    }
    //std::cout << std::endl;
  }
  return n;
}


int main(int argc, char ** argv){
  if(argc > 3){
    //if parameters are passed, make a puzzle.
    make_puzzle(atoi(argv[1]), argv[2],argv[3]);
    return 0;
  }
  
  int n;
  std::string findText;
  n = loadPuzzle();
  //printPuzzle(n);

  std::cin >> findText;  
  
  Num total = 0; 
  total = countSearch(n,findText.c_str());
  std::cout << total << std::endl;  
  
  
  return 0;
}
