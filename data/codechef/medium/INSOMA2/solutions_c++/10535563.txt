#include <bits/stdc++.h>
#define pp pair < int  , int >
using namespace std;

const int N = 1e3 + 5;

char mat [N][N];

pp getNull(){
    return make_pair(-1 , -1);
}
bool isNull(pp k){
    return k == getNull();
}
int n;
void recur(int i , int j , int pos , string pat , long long & cur)
{
    if(pos == pat.size() - 1){
       // cout << "Pattern matched" << endl;
        ++cur;
        return;
    }
    if(i - 1 >= 1 && j - 1 >= 1 && mat[i - 1][j - 1] == pat[pos + 1]){
        recur(i - 1 , j - 1 , pos + 1 , pat , cur);
    }
    if(i - 1 >= 1 && j + 1 <= n && mat[i - 1][j + 1] == pat[pos + 1]){
        recur(i - 1 , j + 1 , pos + 1 , pat , cur);
    }
    if(i + 1 <= n && j - 1 >= 1 && mat[i + 1][j - 1] == pat[pos + 1]){
        recur(i + 1 , j - 1 , pos + 1 , pat , cur);
    }
    if(i + 1 <= n && j + 1 <= n && mat[i + 1][j + 1] == pat[pos + 1]){
        recur(i + 1 , j + 1 , pos + 1 , pat , cur);
    }
}
int main(){
    long long ans , cur;
    string pat;
    cin >> n;
    // Grid size
    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= n; ++j){
            cin >> mat[i][j];
        }
    }
    cin >> pat;
    /* here goes the
    solving
    part
    */
    ans = 0;
    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= n; ++j){
            cur = 0;
            if(mat[i][j] == pat[0]){
              recur(i , j , 0 , pat , cur);
            }
            ans += cur;
        }
    }
    cout << ans;
    return 0;
}
