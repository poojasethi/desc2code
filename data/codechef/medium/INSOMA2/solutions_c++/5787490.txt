#include <iostream>
#include <cstdio>
#include <map>
#include <string>
using namespace std;

typedef struct triplet
{
    int x;
    int y;
    int ind;

} tri;

struct comp {
  bool operator() (const tri&a, const tri& b) const
  {
    if (a.x != b.x) {
        return a.x < b.x;
    }
    if (a.y != b.y) {
        return a.y < b.y;
    }
    return (a.ind < b.ind);
  }
};

char a[1001][1001];
string s;
int len;
int N;

map<tri, int, comp> M;


int dfs(int i, int j, int index)
{
    if (index == len - 1) {
        return 1;
    }

    tri A;
    A.x = i;
    A.y = j;
    A.ind = index;
    if (M.count(A) == 1) {
        return M[A];
    }

    if (i - 1 >= 0 && j - 1 >= 0 && a[i - 1][j - 1] == s[index + 1]) {
        M[A] += dfs(i - 1, j - 1, index + 1);
    }
    if (i - 1 >= 0 && j + 1 < N && a[i - 1][j + 1] == s[index + 1]) {
        M[A] += dfs(i - 1, j + 1, index + 1);
    }
    if (i + 1 < N && j - 1 >= 0 && a[i + 1][j - 1] == s[index + 1]) {
        M[A] += dfs(i + 1, j - 1, index + 1);
    }
    if (i + 1 < N && j + 1 < N && a[i + 1][j + 1] == s[index + 1]) {
        M[A] += dfs(i + 1, j + 1, index + 1);
    }
    return M[A];
}

int main()
{
    scanf("%d", &N);

    for(int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cin >> a[i][j];
        }
    }


    cin >> s;
    len = s.size();

    int cntr = 0;
    for(int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (a[i][j] == s[0]) {
                cntr += dfs(i, j, 0);
            }
        }
    }

    cout << cntr << endl;
    return 0;
}
