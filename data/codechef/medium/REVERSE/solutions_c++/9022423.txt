#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define INF 100007
#define f(i,n) for(int i=0;i<n;i++)
const int max_size=100005;
vector<pair<int,int> > a[max_size];
int dis[max_size];
bool visited[max_size]={0};
bool comp(pair<int,int> p1,pair<int,int> p2){
	return p1.second>p2.second;
}
typedef bool(*CompareType)(pair<int,int>,pair<int,int>);
void djikstra(int source,int n){
	f(i,n+1){
		dis[i]=INF;
	}
	dis[source]=0;
	//class prioritize{ public:bool operator() (pair<int,int>&p1,pair<int,int>&p2){return p1.second>p2.second;}};
	priority_queue<pair<int,int> ,vector<pair<int,int> > ,CompareType> pq(&comp);
	pq.push(make_pair(source,0));
	while(!pq.empty())
	{
		pair<int,int> curr=pq.top();
		pq.pop();
		int currV=curr.first,currW=curr.second;
		if(visited[currV]){
			continue;
		}
		for(int i=0;i<a[currV].size();i++){
			if(!visited[a[currV][i].first]&&dis[a[currV][i].first]>a[currV][i].second+currW){
				dis[a[currV][i].first]=a[currV][i].second+currW;
				pq.push(make_pair(a[currV][i].first,dis[a[currV][i].first]));
			}
		}
	}
}
int main()
{
	int n,m,x,y;
	cin>>n>>m;
	for(int i=0;i<m;i++){
		cin>>x>>y;
		a[x].push_back(make_pair(y,0));
		a[y].push_back(make_pair(x,1));
	}
	djikstra(1,n);
	if(dis[n]==INF){
		cout<<-1<<endl;
	}else{
		cout<<dis[n]<<endl;
	}
}