#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
#include<queue>
using namespace std;
const int INF = 1000000000;
typedef pair<int,int> pa;
int main()
{
	int n,m,a,b,i;
	cin>>n>>m;
	vector < vector < pa > >g (n+1);
	vector < pa > edge;
	map<pair<int,int>,int > mark;
	int s =1;
	vector<int> d (n+1, INF),  p (n+1);
	d[s] = 0;
	priority_queue<pa> q;
	/*q.push(make_pair(-1,4));
	q.push(make_pair(-6,5));
	//q.push(make_pair(3,3));
	pa x=q.top();
	cout<<x.first<<" "<<x.second<<endl;
	*/
	for(i=0;i<m;i++)
    {
        cin>>a>>b;
        if(a==b)
            continue;

        if(mark.find(make_pair(a,b))==mark.end());
        {
            //cout<<"fuck";
            mark[make_pair(a,b)]=1;
            //cout<<"suck";
            edge.push_back(make_pair(a,b));
            //cout<<"duck";
            g[a].push_back(make_pair(0,b));
            //cout<<"yuck\n";
        }
    }
    int y=edge.size();
    /*for(i=0;i<y;i++)
    {
        cout<<edge[i].first<<" "<<edge[i].second<<endl;
    }*/
    for(i=0;i<y;i++)
    {
        pa p=edge[i];

        if(mark.find(make_pair(p.second,p.first))==mark.end())
            g[p.second].push_back(make_pair(1,p.first));
    }
    /*for(i=1;i<=7;i++)
    {
        for(int j=0;j<g[i].size();j++)
        {
            cout<<g[i][j].second<<" "<<g[i][j].first<<" && ";
        }
        cout<<endl;
    }*/
	q.push (make_pair (0,s));
    while(!q.empty())
    {
        //cout<<"a";
        pa z=q.top();
        int dis=-1*z.first;
        int node=z.second;
        //cout<<dis<<" "<<node<<endl;
        q.pop();
        if(dis>d[node])
            continue;
        for(int j=0;j<g[node].size();j++)
        {
            int len=g[node][j].first;
            int to=g[node][j].second;
            //cout<<len<<" "<<to<<endl;
            if(d[node]+len<d[to])
            {
                d[to]=d[node]+len;
                //p[to]=node;
                q.push(make_pair((-1)*d[to],to));
            }

        }
    }
	/*while (!q.empty())
        {
            //cout<<"a";
            int v = q.top().second,  cur_d = -q.top().first;
            cout<<"&&&& "<<v<<" "<<cur_d<<endl;
            q.pop();
            if (cur_d > d[v])  continue;

            for (size_t j=0; j<g[v].size(); j++)
                {
                    int to = g[v][j].first;
                    int len = g[v][j].second;
                    if (d[v] + len < d[to])
                    {
                        d[to] = d[v] + len;
                        p[to] = v;
                        q.push (make_pair (-d[to], to));
                    }
                }
	}*/
	//for(i=1;i<=n;i++)
      //  cout<<d[i]<<endl;
      if(d[n]==INF)
        cout<<"-1"<<endl;
      else
        cout<<d[n]<<endl;
	//cout<<d[n]<<endl;

	return 0;
}