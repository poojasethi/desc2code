#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e6 + 10;
const int INF = 1e8;
vector<vector<int> > grf(MAXN);
vector<vector<int> > rev(MAXN);
set<pair<int, int> > qq;
bool vis[MAXN];
int val[MAXN];
void dfs(int x){
    if(vis[x]) return ;
    vis[x] = true;
    qq.insert(make_pair(0, x));
    val[x] = 0;
    int sz = grf[x].size();
    for(int i = 0;i < sz;++i){
        dfs(grf[x][i]);
    }
}
int main(){
    int N, M;
    scanf("%d%d", &N, &M);
    while(M--){
        int a, b;
        scanf("%d%d", &a, &b);
        if(a != b){
            grf[a].push_back(b);
            rev[b].push_back(a);
        }
    }
    for(int i = 1;i <= N;++i){
        val[i] = INF;
    }
    memset(vis, 0, sizeof vis);
    dfs(1);
    while(!qq.empty()){
        int node = qq.begin()->second;
        int curVal = qq.end()->first;
        qq.erase(qq.begin());
        int sz = rev[node].size();
        for(int i = 0;i < sz;++i){
            int next = rev[node][i];
            if(val[next] > val[node] + 1){
                val[next] = val[node] + 1;
                qq.insert(make_pair(val[next], next));
            }
        }
        sz = grf[node].size();
        for(int i = 0;i < sz;++i){
            int next = grf[node][i];
            if(val[next] > val[node]){
                val[next] = val[node];
                qq.insert(make_pair(val[next], next));
            }
        }
    }
    if(val[N] == INF){
        printf("-1\n");
    } else{
        printf("%d\n", val[N]);
    }
    return 0;
}
