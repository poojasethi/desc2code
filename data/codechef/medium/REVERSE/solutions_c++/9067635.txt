#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<climits>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#define HODOR unsigned long long
#define ll pair<int, int>
#define INF (int(1e9))
#define si(a)			scanf("%d", &a)
#define sl(a)			scanf("%lld", &a)
#define pi(a)			printf("%d", a)
#define pl(a)			printf("%lld", a)
#define pn 				printf("\n")

#define rep(i,a,b) for(int i=(a);i<(b);i++)
#define dwn(i,a,b) for(int i=(a);i>=(b);i--)

/* The Game is about Glory */
using namespace std;

#define gc getchar_unlocked
#define pc putchar_unlocked

#define MAX 100005
int cost[MAX];
bool visited[MAX];
vector<ll> arr[MAX];

struct comp{
 bool operator()(const ll &a,const ll &b)
 {

     return a.second>b.second;
 }

};



int main()
{


 int n,m;
 cin>>n>>m;


 int l,r;
 int target=n;
 int source=1;
for(int i=0;i<=n;i++)
    arr[i].clear();

int temp=m;
 while(temp--)
 {
cin>>l>>r;

arr[l].push_back(make_pair(r,0));
arr[r].push_back(make_pair(l,1));


 }

memset(visited,0,sizeof visited);
fill(cost,cost+n+5,INF);

priority_queue<ll,vector<ll> , comp > que;

cost[source]=0;

que.push(make_pair(source,0));
while(!que.empty() )
{

    ll p=que.top();
    que.pop();
    int curr_node=p.first;
    if(curr_node==target)
        break;

    if(visited[curr_node])
        continue;

    int curr_cost=p.second;

    visited[curr_node]=1;

    for(int i=0;i<arr[curr_node].size();i++)
    {
       // cout<<"hello world";

        p=arr[curr_node][i];
        int next_node=p.first;
        int next_cost=p.second;
        if(!visited[next_node] && cost[next_node]>cost[curr_node]+ next_cost)
            cost[next_node]=next_cost+cost[curr_node   ];
        que.push(ll(next_node,cost[next_node]));
    }
}

if(cost[target ]==INF  )
    cout<<"-1"<<endl;
else cout<<cost[target]<<endl;




return 0;
}
