// AUTHOR : Dipjal Chhetri
// Institution : Jaypee Institute of Information Technology

#include<bits/stdc++.h>
#include<algorithm>
#include<stack>
#include<queue>
#include<string.h>
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define tr(c,it) for(typeof(c.begin()) it = c.begin();it!=c.end();it++)
#define sz(c) c.size()
#define rep(i,n) for(typeof(n) i = 0;i<n;i++)
#define range(i,a,b) for(typeof(b) i = a;i<=b;i++)
#define setbits(x) __builtin_popcount(x)
#define gcd(x,y) __gcd(x,y)
#define x first
#define y second
#define author dipjal
using namespace std;
typedef long long int ll;
typedef vector<int> vii;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef map<int,int> mii;
const int SIZE = 1e5+5;
const ll mod = 1e9+7;
const ll epf = -1e5+9;
const ll inf = 0x7fffffff;
int N,M;
bool vis[SIZE];
int minDist[SIZE];
vector<pair<int,int> > graph[SIZE];


int dijkstra(int node){
    minDist[node]=0;
    priority_queue<pii,vpii,greater<pii> > pq;
    pq.push(pii(0,node));
    while(!(pq.empty())){
            pii top = pq.top();
            pq.pop();
    int u = top.second;
    if(u==N) break;
    if(vis[u]) continue;
    for(int i = 0;i<graph[u].size();i++){
            int v = graph[u][i].first;
            int mst = minDist[u]+graph[u][i].second;
            minDist[v]=min(minDist[v],mst);
    pq.push(pii(minDist[v],v));
    }
    vis[u]=true;
    }
    if(minDist[N]==INT_MAX)
        minDist[N]=-1;
    return minDist[N];
    }






int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int tt;
    int u,v;
    cin>>N>>M;
    while(M--){
            cin>>u>>v;
            graph[u].push_back(make_pair(v,0));
            graph[v].push_back(make_pair(u,1));
    }

    for(int i = 1;i<=N;i++){
            minDist[i]=INT_MAX;
            vis[i]=false;
    }
    cout<<dijkstra(1)<<endl;
return 0;
}
