#include<iostream>
#include<stdio.h>
#include<limits.h>
#include<algorithm>
#include<vector>
#include<string.h>
#include<math.h>
#include<set>
#include<map>
#include<string>
#include<queue>
#include<deque>
#include<assert.h>
#define ones(A) memset(A,-1,sizeof(A))
#define zeros(A) memset(A,0,sizeof(A))
#define SZ size()
#define mii map<int,int>
#define mli map<long long int,int>
#define mil map<int,long long int>
#define mll map<long long int,long long int>
#define msi map<string,int>
#define mis map<int,string>
#define si(x) scanf("%d",&x)
#define s2i(x,y) scanf("%d%d",&x,&y)
#define sll(x) scanf("%lld",&x)
#define s2ll(x,y) scanf("%lld%lld",&x,&y)
#define pi(x) printf("%d\n",x)
#define pll(x) printf("%lld\n",x)
#define ss(s) scanf("%s",&s)
#define ps(s) printf("%s\n",s)
#define FOR(i,n) for(int i=0;i<n;i++)
#define FOR2(i,start,end,inc) for(int i=start;i<=end;i+=inc)
#define DEC(i,start,end,inc) for(int i=start;i>=end;i-=inc)
#define vi vector<int>
#define ub upper_bound
#define lb lower_bound
#define bs binary_search
#define vll vector<long long int>
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
typedef long long int ll;
typedef unsigned long long int ull;
using namespace std;
vi v[100005];
int included[100005];
int dist[100005];
map<pii,int> wts,exists;
set<pair<int,int> > heap;
int djikstra(int n){
	FOR(i,n+1)dist[i]=INT_MAX,included[i]=0;
	dist[1]=0;
	heap.insert(mp(0,1));
	while(!heap.empty()){
		int d=((heap.begin())->first);
		int u=((heap.begin())->second);
		heap.erase(heap.begin());
		if(included[u])continue;
		included[u]=1;
		int sz=v[u].SZ;
		FOR(j,sz){
			int f=v[u][j];
			if(d+wts[mp(u,f)]<dist[f]){
				dist[f]=d+wts[mp(u,f)];
				heap.insert(mp(dist[f],f));
			}
		}
	}
	return dist[n];
}
int main(){
	int n,m,a,b;
	s2i(n,m);
	FOR(i,m){
		s2i(a,b);
		if(a==b)continue;
		if(exists[mp(a,b)]){
			wts[mp(a,b)]=0;
			continue;
		}
		v[a].pb(b);
		v[b].pb(a);
		exists[mp(a,b)]=1;
		pii p=mp(b,a);
		exists[p]=1;
		wts[p]=1;
	}
	int ans=djikstra(n);
	if(ans!=INT_MAX)pi(ans);
	else pi(-1);
	return 0;
}
