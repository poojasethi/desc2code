#include <iostream>
#include <stdio.h>
#include <vector>
#include <set>

using namespace std;

#define N 100010
#define INF 10000000

vector<pair<int,int> > adj[N];
vector<int> min_distance;
set<pair<int,int> > priority_q;

int n,m;

inline int readInt(){
	int num=0;
	char c=getchar_unlocked();
	while(c<33)
		c=getchar_unlocked();
	while(c>33){
		num=(num<<1)+(num<<3)+c-'0';
		c=getchar_unlocked();
	}
	return num;
}

void dijkstra(int cur){
	min_distance.clear();
	min_distance.resize(n+2,INF);
	priority_q.clear();
	min_distance[cur]=0;
	priority_q.insert(make_pair(cur,min_distance[cur]));
	while(!priority_q.empty()){
		int u=priority_q.begin()->first;
		int dist=priority_q.begin()->second;
		priority_q.erase(make_pair(u,dist));
		for(int i=0;i<adj[u].size();i++){
			int v=adj[u][i].first;
			int uv=adj[u][i].second+dist;
			if(min_distance[v]>uv){
				priority_q.erase(make_pair(v,min_distance[v]));
				min_distance[v]=uv;
				priority_q.insert(make_pair(v,min_distance[v]));
			}
		}
	}


}

int main(){
	n=readInt();
	m=readInt();
	int u,v;
	for(int i=0;i<m;i++){
		u=readInt();
		v=readInt();
		adj[u].push_back(make_pair(v,0));
		adj[v].push_back(make_pair(u,1));
	}
	dijkstra(1);
	//cout<<dist[n]<<endl;
	if(min_distance[n]==INF)
		printf("-1\n");
	else
	printf("%d\n",min_distance[n]);
}