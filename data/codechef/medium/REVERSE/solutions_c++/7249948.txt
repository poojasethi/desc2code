    #include <queue>
    #include <vector>
    #include <cstdio>
    #include <utility>
    #define INF 1000000000
    using namespace std;
    typedef pair <int, int> ii;
    typedef vector < ii > vii;
    typedef struct N{
    int dist;
    vector<ii> vertices;
    }Nodo;
    Nodo nodos[100005];
    void limpia(int N){
    for(int i = 0; i <= N; i++){
    nodos[i].dist = INF;
    nodos[i].vertices.clear();
    }
    }
    void dijkstra (int s, int e) {
    nodos[s].dist = 0;
    priority_queue < ii, vector<ii>, greater<ii> > pq;
    pq.push(ii(0, s));
    while(!pq.empty()){
    ii front = pq.top();
    pq.pop();
    int d = front.first;
    int u = front.second;
    if (nodos[u].dist == d) {
    for (int i = 0; i < nodos[u].vertices.size(); i++) {
    ii v = nodos[u].vertices[i];
    if (nodos[u].dist + v.second < nodos[v.first].dist) {
    nodos[v.first].dist = nodos[u].dist + v.second;
    pq.push(ii(nodos[v.first].dist, v.first));
    }
    }
    }
    }
    nodos[e].dist == INF ? printf("-1\n") : printf("%d\n", nodos[e].dist);
    }
    int main () {
    int T;
    int N, M;
    int a, b, c;
    int A, B;
    scanf("%d%d", &N, &M);
    limpia(N);
    while (M--) {
    scanf("%d%d", &a, &b);
    nodos[a].vertices.push_back( ii(b, 0) );
    nodos[b].vertices.push_back( ii(a, 1) );
    }
    //scanf("%d%d", &A, &B);
    dijkstra(1, N);
    return 0;
    } 