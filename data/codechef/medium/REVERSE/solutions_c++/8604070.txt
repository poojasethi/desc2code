#include<bits/stdc++.h>

#define in(n) scanf("%d",&(n))
#define out(n) printf("%d",(n))
#define inl(n) scanf( "%lld",&(n))
#define outl(n) printf("%lld",(n))
#define SP printf(" ")
#define NL printf("\n")
#define MP make_pair
#define PB push_back

#define FOR(i,n) for(i=0;i<n;i++)
#define FOR1(i,n) for(i=1;i<=n;i++)
#define ff first
#define ss second
#define debug(a) cout<<#a<<" --> "<<a<<endl;
#define debug1(a) cout<<#a<<" --> "<<a<<" ";
#define INF 1000000000

using namespace std;

typedef long long ll;
typedef vector<vector<pair<int,bool> > > GRAPH;

int test_no;

class COMP{

    public:

    bool operator()(const pair<int,int> &a,const pair<int,int> &b){

        return a.second>b.second;

    }

};

int main() {

    int n,m;
    in(n);in(m);

    GRAPH g(n);
    while(m--){

        int v1,v2;
        in(v1);in(v2);
        v1--;v2--;

        g[v1].push_back(make_pair(v2,0));
        g[v2].push_back(make_pair(v1,1));

    }

    //Augment the graph
//    for(int i=0;i<n;i++){
//
//        for(int j=0;j<(int)g[i].size();j++){
//
//            if(!g[i][j].second){
//
//                g[g[i][j].first].push_back(make_pair(i,1));
//
//            }
//
//        }
//
//    }

    //Perform Dijkstras

    vector<int> dist(n,INF);
    priority_queue< pair<int,int>, vector< pair<int,int> >,COMP> pq;

    dist[0]=0;
    pq.push(make_pair(0,0));

    while(!pq.empty()){

        pair<int,int> temp=pq.top();pq.pop();
        int src=temp.first;

        if(dist[src]<temp.second) continue;

        for(int i=0;i<(int)g[src].size();i++){

            if(dist[g[src][i].first]>dist[src]+g[src][i].second){

                dist[g[src][i].first]=dist[src]+g[src][i].second;
                pq.push(make_pair(g[src][i].first,dist[g[src][i].first]));

            }

        }

    }

    if(dist[n-1]==INF) cout<<-1<<endl;
    else cout<<dist[n-1]<<endl;

    return 0;

}
