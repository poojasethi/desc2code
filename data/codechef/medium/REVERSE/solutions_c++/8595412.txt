#include <iostream>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <queue>

using namespace std;

#define pb push_back
#define clr(a) memset(a, 0, sizeof(a))
#define forl(i,l,u) for(int i=(l);i<(u);i++)
#define forn(i,n) forl(i,0,n)

typedef pair<int, int> ii;

const int maxn=100000+11;
const int maxc=1000+11;
const int maxd=maxn*maxc;

vector<ii> G[maxn];

int minDist[maxn];
int prev[maxn];
bool vis[maxn];

void djInit(int n, int (&minDist)[maxn], int (&prev)[maxn]){
	forn(i,n){
		minDist[i]=maxd;
		prev[i]=-1;
	}
	clr(vis);
}

int dijsktras(int s, int t, int n,const vector<ii> (&gr)[maxn], int (&minDist)[maxn]){
	djInit(n, minDist, prev);
	minDist[s]=0;
	priority_queue<ii, vector<ii>, greater<ii> > pq;
	pq.push(ii(0, s));
	while(!pq.empty()){
		ii top=pq.top();
		pq.pop();
		int u=top.second;
		if(u==t)	break;
		if(vis[u]) continue;
		forn(i, gr[u].size()){
			int v=gr[u][i].first;
			int alt= minDist[u]+gr[u][i].second;
			if(minDist[v]>alt){
				minDist[v]=alt;
				prev[v]=u;
			}
			pq.push(ii(minDist[v], v));
		}
		vis[u]=true;
	}
	if(minDist[t]==maxd)
		return -1;
	return minDist[t];
}
int main(){
	ios::sync_with_stdio(false);
	int n, m;
	cin>>n>>m;
	for(int i=0; i< m; i++){
		int u, v, cost;
		cin>>u>>v;
		G[u].pb(ii(v,0));
		G[v].pb(ii(u,1));	
	}
	cout<<dijsktras(1, n, n+1, G, minDist)<<endl;
}