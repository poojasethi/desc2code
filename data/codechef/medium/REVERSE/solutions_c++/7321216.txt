#include<iostream>
#include<vector>
#include<stdio.h>
#include<queue>
#include<limits.h>
using namespace std;

struct node
{
	int b;
	int wt;
};
bool operator <(struct node a,struct node b)
{
	return a.wt>b.wt;
}
int dfs(vector<node> v1[100005],int n,int e)
{
	int vis[100005]={0};
	int i,j;
	int dis[100005];
	for(i=1;i<=n;i++)
	dis[i]=INT_MAX;
	priority_queue<node> pq;
	pq.push((node){1,0});
	dis[1]=0;
	while(!pq.empty())
	{
		node f=pq.top();
		pq.pop();
		vis[f.b]=1;
		if(f.b==n)
		{
			return f.wt;
		}
		for(j=0;j<v1[f.b].size();j++)
		{
			if(!vis[v1[f.b][j].b])
			{
				if(dis[v1[f.b][j].b]>dis[f.b]+v1[f.b][j].wt)
				{
					dis[v1[f.b][j].b]=dis[f.b]+v1[f.b][j].wt;
					pq.push((node){v1[f.b][j].b,dis[v1[f.b][j].b]});
					
				}
			}
		}
	}
	return -1;
}
int main()
{
	int n,e,i,a,b;
	scanf("%d %d",&n,&e);
	vector<node> v1[100005];
	for(i=0;i<e;i++)
	{
		scanf("%d %d",&a,&b);
		if(a==b)
		continue;
		v1[a].push_back((node){b,0});
		v1[b].push_back((node){a,1});
	}
	int ans=dfs(v1,n,e);
	printf("%d",ans);
	return 0;
}