#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <queue>
#define INT_MAX 100001

using namespace std;

int* dist;
int N,M;
bool* sptSet;
vector<pair<int, int> >* mat;

class comp {
	public:
    bool operator() (pair<int, int>& a, pair<int, int>& b) {
        return a.second > b.second;
    }
};

priority_queue<pair<int, int>, vector<pair<int, int> >, comp> pq;

//int minDistance()
//{
//   int min = INT_MAX, min_index,v;
//	 
//	for (v = 0; v < N; v++){
//		if (!sptSet[v] && dist[v] <= min){
//    		min = dist[v];
//    		min_index = v;
//    	}
//    }
//	return min_index;
//}

//int check_val(int a, int b){
//	int ret = 3;
//	for(int i = 0; i < mat[a].size(); i++){
//		if(mat[a][i].first == b)
//			ret = min(ret, mat[a][i].second);
//	}
//	return ret;
//}

int main(){
	int u,v,i;
	int a,b;
	scanf("%d %d", &N, &M);
	dist = new int[N];
	sptSet = new bool[N];
	mat = new vector<pair<int, int> >[N];
	for(i = 0; i < N; i++){
		dist[i] = INT_MAX;
		sptSet[i] = false;
	}
	for(i = 0; i < M; i++){
		scanf("%d %d", &a, &b);
		mat[a-1].push_back(make_pair(b-1, 0));
		mat[b-1].push_back(make_pair(a-1, 1));
	}
	dist[0] = 0;
	pq.push(make_pair(0,0));
	while(!pq.empty()){
		u = pq.top().first;
		pq.pop();
		if(sptSet[u])
			continue;
		sptSet[u] = true;
		for (v = 0; v < mat[u].size(); v++){
//			if(sptSet[mat[u][v].first] == true)
//				continue;
		    if (!sptSet[mat[u][v].first] && dist[u] + mat[u][v].second < dist[mat[u][v].first]){
				dist[mat[u][v].first] = dist[u] + mat[u][v].second;
				pq.push(make_pair(mat[u][v].first,dist[mat[u][v].first]));
			}
		}
	}
    if(dist[N-1] == INT_MAX)
    	cout << "-1" << endl;
    else
    	cout << dist[N-1] << endl;
	delete(dist);
	delete(sptSet);
}



