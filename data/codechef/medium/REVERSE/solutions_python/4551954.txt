n, m = map(int, raw_input().split()) # verticies, edges
g = dict(zip((i for i in xrange(n)), ([] for i in xrange(n))))
anti_g = dict(zip((i for i in xrange(n)), ([] for i in xrange(n))))
for _ in xrange(m):
    a, b = map(int, raw_input().split())
    a, b = a-1, b-1
    g[a].append(b)
    anti_g[b].append(a)

# find minimum number of edges to reverse to complete a path from 1 to n
dp = [100001 for _ in xrange(n)]
dp[0] = 0
q = [0]
aq = []
visited = [False for _ in xrange(n)]
while q or aq:
    if q:
        node = q.pop(0)
    else:
        node = aq.pop(0)
    if visited[node]: continue
    visited[node] = True
    for k in g[node]:
        dp[k] = min(dp[k], dp[node])
        q.append(k)
    for ak in anti_g[node]:
        dp[ak] = min(dp[ak], dp[node]+1)
        aq.append(ak)

if dp[n-1] == 100001:
    print '-1'
else:
    print dp[n-1]
