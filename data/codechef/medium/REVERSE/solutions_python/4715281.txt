import collections
import heapq
import sys

def shortest_path(graph, a, b):

    if a not in graph or b not in graph:
        return -1

    visited = set()
    heap = [ (0, a) ]  # (dist, node)
    while len(heap) > 0:
        dist, node = heapq.heappop(heap)
        if node == b:
            return dist

        if node not in visited:
            visited.add(node)
            for neighbor, edge_cost in graph.get(node, set()):
                heapq.heappush(heap, (dist + edge_cost, neighbor))

    return -1


def ingest():

    n, m = map(int, sys.stdin.readline().split(' '))

    graph = collections.defaultdict(set)
    for _ in xrange(m):
        v1, v2 = map(int, sys.stdin.readline().split(' '))
        graph[v1].add((v2, 0))
        graph[v2].add((v1, 1))

    print shortest_path(graph, 1, n)


if __name__ == '__main__':
    ingest()