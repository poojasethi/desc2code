#!/usr/bin/python
# coding=utf8
import sys
import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


def main():
    data = sys.stdin
    mimes, files = map(int,data.readline().split())
    m = {}
    for imime in xrange(mimes):
        ext, mime = data.readline().split()
        m[ext] = mime
    for ifile in xrange(files):
        s = data.readline().strip()
        if '.' in s:
            ext = s.split('.')[-1]
        else:
            ext = None
        if ext in m:
            print m[ext]
        else:
            print "unknown"


if __name__ == "__main__":
    main()
