#include <cstdio>

using namespace std;

const int MOD = 1000000007;
const int N = 3;

typedef long long ll;

struct matrix
{
    ll m[N][N];
};

matrix multiply(const matrix &a, const matrix &b)
{
    matrix c;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            c.m[i][j] = 0;
            for (int k = 0; k < N; k++) {
                c.m[i][j] += a.m[i][k]*b.m[k][j];
            }
            c.m[i][j] %= MOD;
        }
    }
    return c;
}

matrix pow(matrix a, int n)
{
    if (n == 1)
        return a;
    matrix b = multiply(a, a);
    b = pow(b, n/2);
    if (n & 1)
        return multiply(b, a);
    return b;
}

int main()
{
    int t, n;
    ll base[] = {1, 5, 11}, o;
    matrix a, b;
    a.m[0][0] = a.m[1][0] = a.m[2][1] = 1;
    a.m[0][1] = 4;
    a.m[0][2] = 2;
    a.m[1][1] = a.m[1][2] = a.m[2][0] = a.m[2][2] = 0;
    scanf("%d", &t);
    while (t--)
    {
        scanf("%d", &n);
        if (n <= N)
            o = base[n-1];
        else
        {
            b = pow(a, n - N);
            o = b.m[0][0]*base[2] + b.m[0][1]*base[1] + b.m[0][2]*base[0];
        }
        printf("%lld\n", o % MOD);
    }
    return 0;
}
