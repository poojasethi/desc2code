#include <iostream>
#include <stdio.h>
#define DIVI 1000000007

typedef unsigned long long int Lint;

using namespace std;

Lint **mult( Lint  **A, Lint **B ) {

	Lint **E, i, j, k;
	E = new Lint*[ 3 ];
	for(  i = 0;i< 3;i++ )
		E[ i ] = new Lint[ 3 ];
		
	for( i = 0;i < 3;i++ )
		for( j = 0;j < 3;j++ ) {
			E[ i ][ j ] = 0;
			
			for( k = 0;k < 3;k++ )
				E[ i ][ j ] = ( ( E[ i ][ j ] % DIVI ) + ( ( A[ i ][ k ] % DIVI ) * ( B[ k ][ j ] % DIVI ) ) % DIVI ) % DIVI;
		}
	return E;
		
}

Lint** raise( Lint **A, Lint n ){

	Lint i;
	
	if( n == 1 ) {
	
		return A; 
	}
	else {
		
		if( ( n % 2 ) == 0 ) {
			
			Lint **C;
			C = new Lint*[ 3 ];
		
			for( i = 0; i < 3;i++ )
				C[ i ] = new Lint[ 3 ];
			C = raise( A, n/2 );
			
			return mult( C, C );		
					
		}
		else {
		
			Lint **C;
			C = new Lint*[ 3 ];
		
			for( i = 0; i < 3;i++ )
				C[ i ] = new Lint[ 3 ];
			C = raise( A, ( n - 1 ) / 2 );
			
			return mult( A, mult( C, C ) );		

		}
		return A;
			
	}
}

int main() {

	Lint t, n, i;

	scanf("%llu", &t );
	
	while( t-- ) {
	
		Lint **A, **D;
		A = new Lint*[ 3 ];
		D = new Lint*[ 3 ];
		for( i = 0;i < 3;i++ ) {
			A[ i ] = new Lint[ 3 ];
			D[ i ] = new Lint[ 3 ];
		}
			 
		A[ 0 ][ 0 ] = 1;
		A[ 0 ][ 1 ] = 4;
		A[ 0 ][ 2 ] = 2;
		A[ 1 ][ 0 ] = 1;
		A[ 1 ][ 1 ] = 0;
		A[ 1 ][ 2 ] = 0;
		A[ 2 ][ 0 ] = 0;
		A[ 2 ][ 1 ] = 1;
		A[ 2 ][ 2 ] = 0;

		scanf("%llu", &n );
		
		if( n == 1 )
			printf("1\n");
		else if( n == 2 )
			printf("5\n");
		else if( n == 3 )
			printf("11\n");
		else{
		
			D = raise( A, n );
			printf("%llu\n", D[ 0 ][ 0 ]);
			
		}
	}
	
	return 0;

}
