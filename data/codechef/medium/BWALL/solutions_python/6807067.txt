import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	
	private static long[][] matrix = new long[3][3];
	private static long[][] init = new long[3][1];
	private static int module = 1000000007;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(reader.readLine());
		
		matrix[0][0] = 0;
		matrix[0][1] = 1;
		matrix[0][2] = 0;
		matrix[1][0] = 0;
		matrix[1][1] = 0;
		matrix[1][2] = 1;
		matrix[2][0] = 2;
		matrix[2][1] = 4;
		matrix[2][2] = 1;
		
		init[0][0] = 1;
		init[1][0] = 1;
		init[2][0] = 5;
		
		for (int t = 0 ; t < T ; ++t) {
			int length = Integer.parseInt(reader.readLine().trim());
			System.out.println(build(length));
		}
	}
	
	private static long[][] mult(long[][] A, long[][] B) {
		long[][] C = new long[A.length][B[0].length];
		for (int i = 0 ; i < C.length ; ++i) {
			for (int j = 0 ; j < C[0].length ; ++j) {
				for (int k = 0 ; k < A[0].length ; ++k) {
					C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % module;
				}
			}
		}
		return C;
	}
	
	private static long[][] pow(long[][] A, int pow) {
		if (pow == 1) {
			return A;
		}
		
		if (pow % 2 == 1) {
			return mult(A, pow(A, pow - 1));
		}
		
		long[][] X = pow(A, pow / 2);
		return mult(X, X);
	}

	private static long build(int length) {
		if (length < 3) {
			return init[length][0];
		}
		
		long[][] result = mult(pow(matrix, length - 2), init);
		return result[2][0];
	}
}