#include <iostream>
#include <ios>
#include <vector>
//#include <cstdio>
using namespace std;
//int mat_ini[3][3]={1,4,2,1,0,0,0,1,0};
#define prime 1000000007
#define type mat
struct mat
{
	int vals[3][3];
	mat(){
		for(int i=0;i<3;i++)
			for(int j=0; j<3; j++)
				vals[i][j]=i==j;
	}
};

mat operator*(const mat& lhs, const mat& rhs)
{
	mat res;
	//long long sum=0;
	for(int i=0;i<3;i++)
		for(int j=0; j<3; j++)
		{
			long long sum=0;
			for(int k=0;k<3;k++)
				//sum = sum + ((long long)lhs.vals[i][k]*rhs.vals[k][j])%prime;
				sum += (long long)lhs.vals[i][k]*rhs.vals[k][j];
			//cout<<sum<<'\t';
			res.vals[i][j] = sum % prime;
		}
	return res;
}

/*type pow(const type& val, int exp)
{
	type res=val;									//initialised as multiplicative identity (for eg. 1 for integers and I for matrices)
	/*type res;
	if(n==1)
		return val;
	type temp=pow(val, n/2);
	res = temp * temp;		// * operator is overloaded where required.
	if(n&1)
	{
		//cout<<"sdasd";
		res=res*val;
	}
	while(exp>1)
	{
		res=res*res;
		if(exp&1)
			res=res*val;
		exp>>=1;
	}
	return res;
}*/
mat pow(const mat &base, int exp){
mat res;
mat sq(base);
for(; exp; exp>>=1){
if(exp&1)
res=res*sq;
sq=sq*sq;
}
return res;
}

int m[3][3]={
	1,4,2,
	1,0,0,
	0,1,0};

int main()
{
	ios::sync_with_stdio(0);
	//cout<<"1"<<endl;
	int T=0;
	int n;
	//int limit=3;
	long long sum;
	//int *dp= new int[100000000]();
	//vector<int> dp(4,0);
	//cout<<"2"<<endl;
//	dp[0]=1;
//	dp[1]=1;
//	dp[2]=5;
//	dp[3]=11;
	//cout<<"oye"<<endl;
	//int count;
	cin>>T;
	//scanf("%ld",&T);
	mat base;
    for(int i=0;i<3;i++)
        for(int j=0;j<3;j++)
            base.vals[i][j]=m[i][j];
	for(int i=0; i<T; i++)
	{
		//scanf("%ld",&n);
		cin>>n;
        cout<<pow(base, n).vals[0][0]<<'\n';		
	}
}
