#include<stdio.h>
#define SIZE 3
void one(long long int a[SIZE][SIZE])
{int i, j; 
    for (i = 0; i < SIZE; i++)
        for (j = 0; j < SIZE; j++)
            a[i][j] = (i == j);
}

void mul(long long int a[SIZE][SIZE], long long int b[SIZE][SIZE])
{
    int i, j, k;
    long res[SIZE][SIZE] = {{0}};

    for ( i = 0; i < SIZE; i++)
        for ( j = 0; j < SIZE; j++)
            for ( k = 0; k < SIZE; k++)
            {
                res[i][j] = (res[i][j] + (a[i][k] * b[k][j]) % 1000000007) % 1000000007;
            }

    for (i = 0; i < SIZE; i++)
        for (j = 0; j < SIZE; j++)
            a[i][j] = res[i][j];
}

//Caluclate a^n and print result into matrix res
void pow(long long int a[SIZE][SIZE], long long int n, long long int  res[SIZE][SIZE])
{
    one(res);

    while (n > 0) {
        if (n % 2 == 0)
        {
            mul(a, a);
            n /= 2;
        }
        else {
            mul(res, a);
            n--;
        }
    }
}

int main() {

	int t;
	scanf("%d\n", &t);
	long long int a[] = {11, 5, 1};
	while(t--) {
		long long int l;
        long long int ans[SIZE][SIZE];
		long long int mat[SIZE][SIZE] = 
		{ {1, 1, 0},
		  {4, 0, 1},
		  {2, 0, 0}
		}; 
		scanf("%lld", &l);
		if(l <=3 ) {
			printf("%llu\n", a[3-l]);
			continue;
		}
		pow(mat, l-3, ans);
		printf("%llu\n", (a[0] * ans[0][0] + a[1] * ans[1][0] + a[2] * ans[2][0]) % 1000000007);
	}

}
