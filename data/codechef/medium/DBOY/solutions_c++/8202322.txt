#include<iostream>
#include<stack>
#include<map>
#include<vector>
#include<queue>
#include<set>
#include<algorithm>
#include<string>
#include<iomanip>
#include<stdio.h>
#include<math.h>
#include<ctype.h>
using namespace std;
#define inf 1000000000

long long t,n,i,j,maxh,minFuel;
vector<long long> h,k;
long long dp[1002][501];

long long ways(long long dist, long long index)
{
    if(!dist)
        return 0;
    if(index<1)
        return inf;
    if(dist>=k[index])
        return min( 1+ways(dist-k[index],index), ways(dist,index-1));
    return ways(dist,index-1);
}

void waysDP(long long dist)
{
    long long i,j;
    
    dp[0][0]=0;
    for(i=1;i<=dist;i++)
        dp[i][0]=inf;
    
    for(i=1;i<=dist;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(i-k[j]>=0)
                dp[i][j]=min(1+dp[i-k[j]][j], dp[i][j-1]);
            else
                dp[i][j]=dp[i][j-1];
        }
    }
}
int main()
{
    cin>>t;
    while(t--)
    {
        cin>>n;
        h.resize(n+1);
        k.resize(n+1);
        maxh=-1;
        for(i=1;i<=n;i++)
        {
            cin>>h[i];
            if(h[i]>maxh)
                maxh=h[i];
        }
        for(i=1;i<=n;i++)
        {
            cin>>k[i];
        }
        
        waysDP(maxh*2);
        
        minFuel=0;
        for(i=1;i<=n;i++)
        {
            //cout<<ways(h[i]*2,n)<<" "<<dp[h[i]*2][n]<<endl;
            minFuel+=dp[h[i]*2][n];
        }
        cout<<minFuel<<endl;
    }
}







