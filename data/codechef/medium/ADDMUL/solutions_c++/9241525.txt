#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define si(n) scanf("%d", &n);
#define s(n) scanf("%lld", &n);
#define MOD 1000000007
#define mp make_pair
#define pb push_back
ll segtree[400069], lazy[400069], lazy2[400069], lazy3[400069];
void buildTree(ll input[],ll low, ll high, ll pos)
{
	if(low == high)
	{
		segtree[pos] = input[low];
		return;
	}
	ll mid = (low+high)/2;
	buildTree(input,low, mid, 2*pos+1);
	buildTree(input,mid+1, high, 2*pos+2);
	segtree[pos] = (segtree[2*pos+1] + segtree[2*pos+2])%MOD;
}

void updateRange(ll type, ll qlow, ll qhigh, ll v, ll low, ll high, ll pos)
{
	
	if(low>high)
		return;
	if(lazy3[pos] != 0)			//check if any updates from previous query are left to be done
	{
		segtree[pos] = ((high-low+1)*lazy3[pos])%MOD;
		if(low!=high)
		{
			lazy3[2*pos+1] = lazy3[pos];
			lazy3[2*pos+2] = lazy3[pos];
			lazy[2*pos+1] = lazy[2*pos+2] = 0;
			lazy2[2*pos+1] = lazy2[2*pos+2] = 1;
		}
		lazy3[pos]=0;
	}
	if(lazy2[pos]!=1)
	{
		segtree[pos] = (segtree[pos]*lazy2[pos])%MOD;
		if(low!=high)
		{
			lazy2[2*pos+1] = (lazy2[2*pos+1] * lazy2[pos])%MOD;
			lazy2[2*pos+2] = (lazy2[2*pos+2] * lazy2[pos])%MOD;
			lazy[2*pos+1] = (lazy2[pos]*lazy[2*pos+1])%MOD;
			lazy[2*pos+2] = (lazy2[pos]*lazy[2*pos+2])%MOD;
		}
		lazy2[pos]=1;
		
	}
	if(lazy[pos] != 0)			//check if any updates from previous query are left to be done
	{
		segtree[pos] = (segtree[pos]+((high-low+1)*lazy[pos])%MOD)%MOD;
		if(low!=high)
		{
			lazy[2*pos+1] = (lazy[2*pos+1] + lazy[pos])%MOD;
			lazy[2*pos+2] = (lazy[2*pos+2] + lazy[pos])%MOD;
		}
		lazy[pos]=0;
	}
	
	if(qlow>high || qhigh<low)			//no overlap
		return;
	if(qlow<=low && qhigh>=high)		//total overlap
	{
		if(type==1)
			segtree[pos] = (segtree[pos] + ((high-low+1)*v)%MOD)%MOD;
		else
		if(type==2)
			segtree[pos] = (segtree[pos]*v)%MOD;
		else
			segtree[pos] = ((high-low+1)*v)%MOD;
		if(low!=high)
		{
			if(type==1)
			{
				lazy[2*pos+1] = (lazy[2*pos+1] + v)%MOD;
				lazy[2*pos+2] = (lazy[2*pos+2] + v)%MOD;
			}
			else
			if(type==2)
			{
				lazy2[2*pos+1] = (lazy2[2*pos+1] * v)%MOD;
				lazy2[2*pos+2] = (lazy2[2*pos+2] * v)%MOD;
				/**************************************/
				lazy[2*pos+1] = (v*lazy[2*pos+1])%MOD;
				lazy[2*pos+2] = (v*lazy[2*pos+2])%MOD;
				/*************************************/
			}
			else
			{
				lazy3[2*pos+1] = v;
				lazy3[2*pos+2] = v;
				/****************************************/
				lazy[2*pos+1]=lazy[2*pos+2]=0;
				lazy2[2*pos+1]=lazy2[2*pos+2]=1;
				/****************************************/
				
			}
		}
		return;
	}
	ll mid= (low+high)/2;
	updateRange(type,qlow,qhigh,v,low,mid,2*pos+1);
	updateRange(type,qlow,qhigh,v,mid+1,high,2*pos+2);
	
	segtree[pos] = (segtree[2*pos+1] + segtree[2*pos+2])%MOD;
}
ll RangeSumQuery(ll qlow, ll qhigh, ll low, ll high, ll pos)
{
	if(low > high)
		return 0;

	if(lazy3[pos] != 0)			//check if any updates from previous query are left to be done
	{
		segtree[pos] = ((high-low+1)*lazy3[pos])%MOD;
		if(low!=high)
		{
			lazy3[2*pos+1] = lazy3[pos];
			lazy3[2*pos+2] = lazy3[pos];
			lazy[2*pos+1] = lazy[2*pos+2] = 0;
			lazy2[2*pos+1] = lazy2[2*pos+2] = 1;
		}
		lazy3[pos]=0;
	}
	if(lazy2[pos]!=1)
	{
		segtree[pos] = (segtree[pos]*lazy2[pos])%MOD;
		if(low!=high)
		{
			lazy2[2*pos+1] = (lazy2[2*pos+1] * lazy2[pos])%MOD;
			lazy2[2*pos+2] = (lazy2[2*pos+2] * lazy2[pos])%MOD;
			lazy[2*pos+1] = (lazy2[pos]*lazy[2*pos+1])%MOD;
			lazy[2*pos+2] = (lazy2[pos]*lazy[2*pos+2])%MOD;
		}
		lazy2[pos]=1;
		
	}
	if(lazy[pos] != 0)			//check if any updates from previous query are left to be done
	{
		segtree[pos] = (segtree[pos]+((high-low+1)*lazy[pos])%MOD)%MOD;
		if(low!=high)
		{
			lazy[2*pos+1] = (lazy[2*pos+1] + lazy[pos])%MOD;
			lazy[2*pos+2] = (lazy[2*pos+2] + lazy[pos])%MOD;
		}
		lazy[pos]=0;
	}
	

	if(qhigh<low || qlow>high)
		return 0;					//no overleap
	if(qlow<=low && qhigh>=high)
		return segtree[pos];			//total overlap
	ll mid = (low+high)/2;
	return (RangeSumQuery(qlow,qhigh,low,mid,2*pos+1) + RangeSumQuery(qlow,qhigh,mid+1,high,2*pos+2))%MOD;
}

int main()
{
	ll v,q,x,y,n,t,tq,i,j,a[100005];
	scanf("%lld", &n);
	s(q);
	for(i=0;i<n;i++)
		s(a[i]);	
	buildTree(a,0,n-1,0);
	
	memset(lazy,0,sizeof(lazy));
	memset(lazy3,0,sizeof(lazy3));
	for(i=0;i<4*n+5;i++)
		lazy2[i]=1;
//	for(i=0;i<50;i++)
//		printf("%lld ", lazy2[i]);
	while(q--)
	{
		s(tq);
		if(tq==1 || tq==2 || tq==3)
		{
			s(x)s(y)s(v);
			updateRange(tq,x-1,y-1,v,0,n-1,0);
		}
		else
		{
			s(x)s(y);
			printf("%lld\n", RangeSumQuery(x-1,y-1,0,n-1,0));
		}
	}
	return 0;
}