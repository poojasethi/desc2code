#include <bits/stdc++.h>

using namespace std;
#define MOD 1000000007
#define ll long long
ll st[500005],lazy_add[500005],lazy_mul[500005];
int a[100005];

int get_mid(int u,int v)
{
    return u+(v-u)/2;
}
void build_tree(int ss,int se,int ci)
{
    if(ss==se)
    {
        st[ci]=a[ss];
        lazy_mul[ci]=1;
        return;
    }
    int mid=get_mid(ss,se);
    build_tree(ss,mid,2*ci+1);
    build_tree(mid+1,se,2*ci+2);
    st[ci]=st[2*ci+1]+st[2*ci+2];
    st[ci]%=MOD;
    lazy_mul[ci]=1;

}

void lazy(int ss,int se,int ci)
{
    if(lazy_mul[ci]==1&&lazy_add[ci]==0)
        return;
    st[ci]*=lazy_mul[ci];
    st[ci]%=MOD;
    st[ci]+=(se-ss+1)*lazy_add[ci];
    st[ci]%=MOD;
    if(ss!=se)
    {
        lazy_mul[2*ci+1]*=lazy_mul[ci];
        lazy_mul[2*ci+1]%=MOD;
        lazy_add[2*ci+1]*=lazy_mul[ci];
        lazy_add[2*ci+1]%=MOD;
        lazy_add[2*ci+1]+=lazy_add[ci];
        lazy_add[2*ci+1]%=MOD;

        lazy_mul[2*ci+2]*=lazy_mul[ci];
        lazy_mul[2*ci+2]%=MOD;
        lazy_add[2*ci+2]*=lazy_mul[ci];
        lazy_add[2*ci+2]%=MOD;
        lazy_add[2*ci+2]+=lazy_add[ci];
        lazy_add[2*ci+2]%=MOD;
    }
    lazy_add[ci]=0;
    lazy_mul[ci]=1;
}
void update(int type,int ss,int se,int qs,int qe,int ci,int v)
{
    lazy(ss,se,ci);
    if(ss>qe||se<qs)
        return;
    if(ss>=qs&&se<=qe){
        if(type==1)
        {
            lazy_add[ci]=v;
            lazy_mul[ci]=1;
        }
        else if(type==2)
        {
            lazy_add[ci]=0;
            lazy_mul[ci]=v;
        }
        else
        {
            lazy_add[ci]=v;
            lazy_mul[ci]=0;
        }
        lazy(ss,se,ci);
        return;
    }
    int mid=get_mid(ss,se);
    update(type,ss,mid,qs,qe,2*ci+1,v);
    update(type,mid+1,se,qs,qe,2*ci+2,v);
    st[ci]=st[2*ci+1]+st[2*ci+2];
    st[ci]%=MOD;

}
int query(int ss,int se,int qs,int qe,int ci)
{
    lazy(ss,se,ci);
    if(ss>qe||se<qs){
        return 0;
    }
    if(ss>=qs&&se<=qe)
        return (int)st[ci];
    int mid=get_mid(ss,se);
    ll q1=query(ss,mid,qs,qe,2*ci+1);
    ll q2=query(mid+1,se,qs,qe,2*ci+2);
    return (q1+q2)%MOD;

}
int main()
{
    int n,q;
    scanf("%d%d",&n,&q);
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    build_tree(0,n-1,0);
    int type,l,r,v;
    while(q--)
    {
        scanf("%d%d%d",&type,&l,&r);
        l--;r--;
        if(type==4)
        {
            printf("%d\n",query(0,n-1,l,r,0));
        }
        else
        {
            scanf("%d",&v);
            update(type,0,n-1,l,r,0,v);
        }
    }
    return 0;
}
