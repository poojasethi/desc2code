#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
const int mod = 1e9 + 7;
inline long long add(long long u , long long v , long long mod){
    long long ret = u;
    ret += v;
    if(ret >= mod) ret -= mod;
    return ret;
}
inline long long mul(long long u , long long v , long long mod){
    return ( u * v ) % mod;
}
inline long long sub(long long u , long long v , long long md){
    return(u - v + md) % md;
}
int n , q , u , v , val , type;
int a[N];
long long tree[N << 2LL];
long long lazyAdd[N << 2LL];
long long lazyMul[N << 2LL];
inline void build(int node , int u , int v){
    if(u > v) return;
    if(u == v){
        tree[node] = a[u];
        return;
    }
    build(2 * node , u , (u + v) / 2 );
    build(1 + (2 * node) , 1 + (u + v) / 2 , v);
    tree[node] = add(tree[node * 2] , tree[1 + (2 * node)] , mod);
}
inline void update_add(int node , int u , int v , int l , int r , int val){
    // check previous update
    if(lazyAdd[node] || lazyMul[node] > 1){
        tree[node] = add(mul(tree[node] , lazyMul[node] , mod) , mul((v - u + 1) * 1LL , lazyAdd[node] , mod) , mod);
        if(u != v){
            lazyMul[2 * node] = mul(lazyMul[2 * node] , lazyMul[node] , mod);
            lazyMul[1 + (2 * node)] = mul(lazyMul[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = mul(lazyAdd[2 * node] , lazyMul[node] , mod);
            lazyAdd[1 + (2 * node)] = mul(lazyAdd[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = add(lazyAdd[2 * node] , lazyAdd[node] , mod);
            lazyAdd[1 + (2 * node)] = add(lazyAdd[1 + (2 * node)] , lazyAdd[node] , mod);
        }
        lazyAdd[node] = 0;
        lazyMul[node] = 1;
    }
    if(u > v || u > r || v < l) return;
    if(u >= l && v <= r){
        tree[node] = add(tree[node] , mul(1LL * (v - u + 1) , val * 1LL , mod) , mod);
        if(u != v){
            lazyAdd[2 * node] = add(lazyAdd[2 * node] , 1LL * val , mod);
            lazyAdd[1 + (2 * node)] = add(lazyAdd[1 + (2 * node)] , 1LL * val , mod);
        }
        return;
    }
    update_add(2 * node , u , (u + v) / 2 , l , r , val);
    update_add(1 + (2 * node) , 1 + (u + v) / 2 , v , l , r , val);
    tree[node] = add(tree[2 * node] , tree[1 + (2 * node)] , mod);
}
inline void update_mul(int node , int u , int v , int l , int r , int val){
    if(lazyAdd[node] || lazyMul[node] > 1){
        tree[node] = add(mul(tree[node] , lazyMul[node] , mod) , mul((v - u + 1) * 1LL , lazyAdd[node] , mod) , mod);
        if(u != v){
            lazyMul[2 * node] = mul(lazyMul[2 * node] , lazyMul[node] , mod);
            lazyMul[1 + (2 * node)] = mul(lazyMul[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = mul(lazyAdd[2 * node] , lazyMul[node] , mod);
            lazyAdd[1 + (2 * node)] = mul(lazyAdd[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = add(lazyAdd[2 * node] , lazyAdd[node] , mod);
            lazyAdd[1 + (2 * node)] = add(lazyAdd[1 + (2 * node)] , lazyAdd[node] , mod);
        }
        lazyAdd[node] = 0;
        lazyMul[node] = 1;
    }
    if(u > v || u > r || v < l) return;
    if(u >= l && v <= r){
        tree[node] = mul(tree[node] , 1LL * val , mod);
        if(u != v){
            lazyMul[2 * node] = mul(lazyMul[2 * node] , 1LL * val , mod);
            lazyMul[1 + (2 * node)] = mul(lazyMul[1 + (2 * node)] , 1LL * val , mod);
            lazyAdd[2 * node] = mul(lazyAdd[2 * node] , 1LL * val , mod);
            lazyAdd[1 + (2 * node)] = mul(lazyAdd[1 + (2 * node)] , 1LL * val , mod);
        }
        return;
    }
    update_mul(2 * node , u , (u + v) / 2 , l , r , val);
    update_mul(1 + (2 * node) , 1 + (u + v) / 2 , v , l , r , val);
    tree[node] = add(tree[2 * node] , tree[1 + (2 * node)] , mod);
}
inline void update_modify(int node , int u , int v , int l , int r , int val){
    if(lazyAdd[node] || lazyMul[node] > 1){
        tree[node] = add(mul(tree[node] , lazyMul[node] , mod) , mul((v - u + 1) * 1LL , lazyAdd[node] , mod) , mod);
        if(u != v){
            lazyMul[2 * node] = mul(lazyMul[2 * node] , lazyMul[node] , mod);
            lazyMul[1 + (2 * node)] = mul(lazyMul[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = mul(lazyAdd[2 * node] , lazyMul[node] , mod);
            lazyAdd[1 + (2 * node)] = mul(lazyAdd[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = add(lazyAdd[2 * node] , lazyAdd[node] , mod);
            lazyAdd[1 + (2 * node)] = add(lazyAdd[1 + (2 * node)] , lazyAdd[node] , mod);
        }
        lazyAdd[node] = 0;
        lazyMul[node] = 1;
    }
    if(u > v || u > r || v < l) return;
    if(u >= l && v <= r){
        tree[node] = mul(1LL * (v - u + 1) , val * 1LL , mod);
        if(u != v){
            lazyAdd[2 * node] = val;
            lazyAdd[1 + (2 * node)] = val;
            lazyMul[2 * node] = 0;
            lazyMul[1 + (2 * node)] = 0;
        }
        return;
    }
    update_modify(2 * node , u , (u + v) / 2 , l , r , val);
    update_modify(1 + (2 * node) , 1 + (u + v) / 2 , v , l ,r , val);
    tree[node] = add(tree[2 * node] , tree[1 + (2 * node)] , mod);
}
inline long long query(int node , int u , int v , int l , int r){
    if(lazyAdd[node] || lazyMul[node] > 1){
        tree[node] = add(mul(tree[node] , lazyMul[node] , mod) , mul((v - u + 1) * 1LL , lazyAdd[node] , mod) , mod);
        if(u != v){
            lazyMul[2 * node] = mul(lazyMul[2 * node] , lazyMul[node] , mod);
            lazyMul[1 + (2 * node)] = mul(lazyMul[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = mul(lazyAdd[2 * node] , lazyMul[node] , mod);
            lazyAdd[1 + (2 * node)] = mul(lazyAdd[1 + (2 * node)] , lazyMul[node] , mod);
            lazyAdd[2 * node] = add(lazyAdd[2 * node] , lazyAdd[node] , mod);
            lazyAdd[1 + (2 * node)] = add(lazyAdd[1 + (2 * node)] , lazyAdd[node] , mod);
        }
        lazyAdd[node] = 0;
        lazyMul[node] = 1;
    }
    if(u > v || u > r || v < l) return 0;
    if(u >= l && v <= r){
        return tree[node];
    }
    return add(query(2 * node , u , (u + v) / 2 , l , r ) , query(1 + (2 * node) , 1 + (u + v) / 2 , v , l , r) , mod);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> q;
    for(int i = 0; i < n; ++i){
        cin >> a[i];
    }
    memset(lazyAdd , 0 , sizeof lazyAdd);
    for(int i = 0; i < (N << 2LL); ++i){
        lazyMul[i] = 1;
    }
    build(1 , 0 , n - 1);
    while(q--){
        cin >> type;
        if(type != 4){
            cin >> u >> v >> val;
            --u , --v;
            if(type == 1){
                update_add(1 , 0 , n - 1 , u , v , val);
            }else if(type == 2){
                update_mul(1 , 0 , n - 1 , u , v , val);
            }else{
                update_modify(1 , 0 , n - 1 , u , v , val);
            }
        }else{
            cin >> u >> v;
            --u , --v;
            cout << query(1 , 0  , n - 1 , u , v ) << endl;
        }
    }
    return 0;
}
