#include<iostream>
#include<cstdio>
#define ll long long
#define mod 1000000007
using namespace std;

long long  tree[2000008],lazy[2000008],lazy1[2000008],lazy3[2000008];

ll arr[1000002];
ll se,hi,diff;

void create_tree(ll low,ll high,ll i)
{
	if(low>high)
	return;
	if(low==high)
	{
		tree[i]=arr[low];
		//tree[i]%=mod;
		return;
	}
	ll mid=(low+high)/2;
	create_tree(low,mid,2*i);
	create_tree(mid+1,high,2*i+1);
	tree[i]=tree[2*i]+tree[2*i+1];
	tree[i]%=mod;
}



void check(int i,int low,int high)
{	
     if(lazy3[i]!=0)
      {
        tree[i]=(high-low+1)*lazy[i];
        tree[i]%=mod;
        
        
        lazy1[i]=1;
		if(low!=high)
		{
			lazy3[2*i]=1;
			lazy3[2*i+1]=1;
			lazy[2*i]=lazy[i];
			lazy[2*i+1]=lazy[i];
		}	
		lazy3[i]=0;
		lazy[i]=0;
		return;
      }  		
	 
	if(lazy1[i]!=1)
    {
    
        tree[i]*=lazy1[i];
        tree[i]%=mod;
		if(low!=high)
		{
			lazy1[2*i]=lazy1[2*i]*lazy1[i];
			lazy1[2*i]%=mod;
			
			lazy1[2*i+1]*=lazy1[i];
			lazy1[2*i+1]%=mod;
			
			lazy[2*i]*=lazy1[i];
			lazy[2*i]%=mod;
			
			lazy[2*i+1]*=lazy1[i];
			lazy[2*i+1]%=mod;
		}	
		lazy1[i]=1;
    }
    if(lazy[i]!=0)
	 {
	 
		tree[i]+=(high-low+1)*lazy[i];
		tree[i]%=mod;
		
		if(low!=high)
		{
			lazy[2*i]+=lazy[i];
			lazy[2*i]%=mod;
			
			lazy[2*i+1]+=lazy[i];
			lazy[2*i+1]%=mod;
		}
		lazy[i]=0;
	}  
}


void update_tree(ll i,ll low,ll high)
{
	check(i,low,high);
    if(low>high||se>high||low>hi)
    return;
    
    if(se<=low && high<=hi)
    {
    	tree[i]+=(high-low+1)*diff;
    	tree[i]%=mod;
    	
    	if(low!=high)
    	{
    		lazy[2*i]+=diff;
    		lazy[2*i]%=mod;
    		
    		lazy[2*i+1]+=diff;
			lazy[2*i+1]%=mod;   		
    	}
    	return;
    }
    
    ll mid=(low+high)/2;
    update_tree(2*i,low,mid);
    update_tree(2*i+1,mid+1,high);
    
    tree[i]=tree[2*i]+tree[2*i+1];
    tree[i]%=mod;
}


void update_tree_m(ll i,ll low,ll high)
{
	check(i,low,high);
    if(low>high||se>high||low>hi)
    return;
    
   
    if(se<=low && high<=hi)
    {
    	tree[i]=tree[i]*diff;
    	tree[i]%=mod;
    
    	if(low!=high)
    	{
    		lazy1[2*i]*=diff;
    		lazy1[2*i]%=mod;
    		
    		lazy1[2*i+1]*=diff;
    		lazy1[2*i+1]%=mod;
    		
    		lazy[2*i]*=diff;
    		lazy[2*i]%=mod;
    		
    		lazy[2*i+1]*=diff;
    		lazy[2*i+1]%=mod;
    	}
    	return;
    }
    ll mid=(low+high)/2;
    update_tree_m(2*i,low,mid);
    update_tree_m(2*i+1,mid+1,high);
    tree[i]=tree[2*i]+tree[2*i+1];
    tree[i]%=mod;
}

void update_tree_e(ll i,ll low,ll high)
{
	check(i,low,high);
	if(low>high)
	return;
    if(low>high||se>high||low>hi)
    return;
    
    if(se<=low && high<=hi)
    {
    	tree[i]=(high-low+1)*diff;
    	tree[i]%=mod;
    	if(low!=high)
    	{
    		lazy3[2*i]=1;
    		lazy[2*i]=diff;
    		lazy3[2*i+1]=1;
    		lazy[2*i+1]=diff;
    		
    	}
    	return;
    }
    ll mid=(low+high)/2;
    update_tree_e(2*i,low,mid);
    update_tree_e(2*i+1,mid+1,high);
    tree[i]=tree[2*i]+tree[2*i+1];
    tree[i]%=mod;
}

ll getsum(ll i,ll low,ll high)
{
	 check(i,low,high);
     //if(low>high)
	 //return 0;
	 		
	if(low>high||low>hi||se>high)
	return 0;
	
	if((low>=se && hi>=high))
	return tree[i];
	ll mid=(low+high)/2;
	return ((getsum(2*i,low,mid))+(getsum(2*i+1,mid+1,high)))%mod;
}

int main()
{
	ll t,n,c,num,p,q,v,x;
	ll k,i;
	for(i=0;i<=2000007;i++)
	{
	lazy[i]=0,lazy1[i]=1;
	lazy3[i]=0;
    }
	
	cin>>n>>k;
	
	for(i=0;i<n;i++)
	scanf("%lld",&arr[i]);
	
	create_tree(0,n-1,1);
	while(k--)
	{
		scanf("%lld",&num);
		if(num==1)
		{
			scanf("%lld%lld%lld",&se,&hi,&diff);
			se--;
			hi--;
			update_tree(1,0,n-1);
		}
		if(num==2)
		{
			scanf("%lld%lld%lld",&se,&hi,&diff);
			se--;
			hi--;

			update_tree_m(1,0,n-1);
						
		}
		if(num==3)
		{
			scanf("%lld%lld%lld",&se,&hi,&diff);
			se--;
			hi--;
			update_tree_e(1,0,n-1);
		}
		if(num==4)
		{
			scanf("%lld%lld",&se,&hi);
			se--;
			hi--;
			ll x=getsum(1,0,n-1);
			printf("%lld\n",x);
		}
		
	}
	return 0;
}