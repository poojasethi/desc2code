//solving with lazy propagation

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define MAX 1000005
#define MOD 1000000007

ll arr[MAX], tree[2*MAX], lazysum[2*MAX], lazyprod[2*MAX];

//build tree
void build_tree(int node, int a, int b)
{
  	if(a > b)
        return; // Out of range

  	if(a == b)
    { // Leaf node
    		tree[node] = arr[a]; // Init value
		return;
	}

	build_tree(node*2, a, (a+b)/2); // Init left child
	build_tree(node*2+1, 1+(a+b)/2, b); // Init right child

	tree[node] = (tree[node*2]%MOD+ tree[node*2+1]%MOD)%MOD;    //depending on query
}

//updating tree
void update_tree(int node, int a, int b, int i, int j, ll value, int flag)
{

  	if(lazysum[node] != 0 || lazyprod[node]!=1)
    { // This node needs to be updated
   		tree[node]= (b-a+1)*lazysum[node]+tree[node]*lazyprod[node]; // Update it
        tree[node]%=MOD;
		if(a != b)
        {
			lazysum[node*2]=((lazysum[node*2]*lazyprod[node])%MOD+lazysum[node])%MOD;
			//lazysum[node*2]%=MOD;
            //lazysum[node*2]+=lazysum[node];
            //lazysum[node*2]%=MOD;

            lazysum[node*2+1]=((lazysum[node*2+1]*lazyprod[node])%MOD+lazysum[node])%MOD;
			//lazysum[node*2+1]%=MOD;
            //lazysum[node*2+1]+=lazysum[node];
            //lazysum[node*2+1]%=MOD;

            lazyprod[node*2]*=lazyprod[node];
            lazyprod[node*2]%=MOD;

            lazyprod[node*2+1]*=lazyprod[node];
            lazyprod[node*2+1]%=MOD;
		}

   		lazysum[node] = 0; // Reset it
   		lazyprod[node]=1;
  	}

	if(a > b || a > j || b < i) // Current segment is not within range [i, j]
		return;

  	if(a >= i && b <= j)
    { // Segment is fully within range
        if(flag==1) //adding
        {
            tree[node] += (b-a+1)*value;
            tree[node]%=MOD;
            if(a != b)
            { // Not leaf node
                lazysum[node*2] += value;
                lazysum[node*2]%=MOD;
                lazysum[node*2+1] += value;
                lazysum[node*2+1]%=MOD;
            }
    		return;
        }
        else if (flag==2)   //multiplying
        {
            tree[node] *= value;
            tree[node]%=MOD;
            if(a != b)
            { // Not leaf node
                lazyprod[node*2] *= value;
                lazyprod[node*2]%=MOD;

                lazyprod[node*2+1] *= value;
                lazyprod[node*2+1]%=MOD;

                lazysum[node*2] *= value;
                lazysum[node*2]%=MOD;

                lazysum[node*2+1] *= value;
                lazysum[node*2+1]%=MOD;
            }
    		return;
        }
        else
        {
            tree[node] =(b-a+1)* value;
            tree[node]%=MOD;
            if(a != b)
            { // Not leaf node
                lazysum[node*2] = value;
                lazysum[node*2+1] = value;
                lazyprod[node*2]=0;
                lazyprod[node*2+1]=0;
            }
    		return;
        }
    }
	update_tree(node*2, a, (a+b)/2, i, j, value, flag); // Updating left child
	update_tree(1+node*2, 1+(a+b)/2, b, i, j, value, flag); // Updating right child

	tree[node] = (tree[node*2]%MOD+ tree[node*2+1]%MOD)%MOD; // Updating root
}

long long int query_tree(int node, int a, int b, int i, int j)
{
	if(a > b || a > j || b < i)
        return 0; // Out of range

	if(lazysum[node] != 0 || lazyprod[node]!=1)
    { // This node needs to be updated
		tree[node]= (b-a+1)*lazysum[node]+tree[node]*lazyprod[node]; // Update it
		tree[node]%=MOD;
		if(a != b)
        {
			lazysum[node*2]*=lazyprod[node];
			lazysum[node*2]%=MOD;
            lazysum[node*2]+=lazysum[node];
            lazysum[node*2]%=MOD;

            lazysum[node*2+1]*=lazyprod[node];
			lazysum[node*2+1]%=MOD;
            lazysum[node*2+1]+=lazysum[node];
            lazysum[node*2+1]%=MOD;

            lazyprod[node*2]*=lazyprod[node];
            lazyprod[node*2]%=MOD;

            lazyprod[node*2+1]*=lazyprod[node];
            lazyprod[node*2+1]%=MOD;
		}
		lazysum[node] = 0;
		lazyprod[node]=1;
	}

	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];

	ll q1 = query_tree(node*2, a, (a+b)/2, i, j); // Query left child
	ll q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j); // Query right child
	ll res=(q1%MOD+q2%MOD)%MOD;
	return res;
}


int main()
{
	int N, Q;
	cin>>N>>Q;
	for(int i = 0; i < N; i++)
        cin>>arr[i];

	build_tree(1, 0, N-1);
	for(int i=0; i<2*MAX; i++)
    {
        lazysum[i]=0;
        lazyprod[i]=1;
    }

    while(Q--)
	{
	    int type, x, y, v;
	    cin>>type;
	    if(type==1) //adding v
        {
            cin>>x>>y>>v;
            update_tree(1, 0, N-1, x-1, y-1, v, 1);
        }
	    else if (type==2)   //multiplying v
        {
            cin>>x>>y>>v;
            update_tree(1, 0, N-1, x-1, y-1, v, 2);

        }
	    else if (type==3)   //initializing v
        {
            cin>>x>>y>>v;
            update_tree(1, 0, N-1, x-1, y-1, v, 3);
        }
        else if (type==4)
        {
            cin>>x>>y;
            cout<<query_tree(1, 0, N-1, x-1, y-1)<<endl;
        }
	}
	return 0;
}
