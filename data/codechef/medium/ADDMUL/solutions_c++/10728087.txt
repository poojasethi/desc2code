#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif
/*
ll max(ll p,ll q)
{
    return (p>q)?p:q;
}
ll min(ll p,ll q)
{
    return (p<q)?p:q;
}

vector< pair<ll,ll> > c;
ll a[100005],b[400005],mod=1000000007;

void buildsegtree(ll i,ll rl,ll rr)
{
    if(rr<rl)
    {
        return;
    }
    if(rl==rr)
    {
        b[i]=a[rl];
    }
    else
    {
        ll rm=(rl+rr)/2;
        buildsegtree(2*i,rl,rm);
        buildsegtree(2*i+1,rm+1,rr);
        b[i]=(b[2*i]+b[2*i+1])%mod;
    }
    //printf("%lld %lld\n",i,b[i]);
}

void query(ll i,ll l,ll r,ll reql,ll reqr,ll qn,ll val)
{
    if(c[i].F!=1)
    {
        b[i]=(b[i]*c[i].F)%mod;
        if(l!=r)
        {
            c[2*i].F=(c[2*i].F*c[i].F)%mod;
            c[2*i+1].F=(c[2*i+1].F*c[i].F)%mod;
        }
    }
    if(c[i].S!=0  || c[i].F!=1)
    {
        b[i]=(b[i]+(c[i].S*(r-l+1))%mod)%mod;
        if(l!=r)
        {
            c[2*i].S=((c[2*i].S*c[i].F)%mod+c[i].S)%mod;
            c[2*i+1].S=((c[2*i+1].S*c[i].F)%mod+c[i].S)%mod;
        }
    }
    c[i].S=0;
    c[i].F=1;
    if(l>r || l>reqr || r<reql)
    {
        return;
    }
    if(l>=reql && r<=reqr)
    {
        if(qn==1)
        {
            c[i].S=val;
        }
        else if(qn==2)
        {
            c[i].F=(val);
            c[i].S=0;
        }
        else if(qn==3)
        {
            c[i].F=0;
            c[i].S=val;
        }
        if(c[i].F!=1)
        {
            b[i]=(b[i]*c[i].F)%mod;
            if(l!=r)
            {
                c[2*i].F=(c[2*i].F*c[i].F)%mod;
                c[2*i+1].F=(c[2*i+1].F*c[i].F)%mod;
            }
        }
        if(c[i].S!=0 || c[i].F!=1)
        {
            b[i]=(b[i]+(c[i].S*(r-l+1))%mod)%mod;
            if(l!=r)
            {
                c[2*i].S=((c[2*i].S*c[i].F)%mod+c[i].S)%mod;
                c[2*i+1].S=((c[2*i+1].S*c[i].F)%mod+c[i].S)%mod;
            }
        }
        c[i].S=0;
        c[i].F=1;
    }
    else
    {
        ll m=(r+l)/2;
        query(2*i,l,m,reql,reqr,qn,val);
        query(2*i+1,m+1,r,reql,reqr,qn,val);
        b[i]=(b[2*i]+b[2*i+1])%mod;
    }
}

ll givesum(ll i,ll l,ll r,ll reql,ll reqr)
{
    if(c[i].F!=1)
    {
        b[i]=(b[i]*c[i].F)%mod;
        if(l!=r)
        {
            c[2*i].F=(c[2*i].F*c[i].F)%mod;
            c[2*i+1].F=(c[2*i+1].F*c[i].F)%mod;
        }
    }
    if(c[i].S!=0  || c[i].F!=1)
    {
        b[i]=(b[i]+(c[i].S*(r-l+1))%mod)%mod;
        if(l!=r)
        {
            c[2*i].S=((c[2*i].S*c[i].F)%mod+c[i].S)%mod;
            c[2*i+1].S=((c[2*i+1].S*c[i].F)%mod+c[i].S)%mod;
        }
    }
    c[i].S=0;
    c[i].F=1;
    if(reql>reqr || l>r || l>reqr || r<reql)
    {
        return 0;
    }
    if(l>=reql && r<=reqr)
    {
        return b[i]%mod;
    }
    else
    {
        ll m=(l+r)/2;
        return (givesum(2*i,l,m,reql,reqr) + givesum(2*i+1,m+1,r,reql,reqr))%mod;
    }
}


int main()
{
    ll t,n,q,i,left,right,temp1,ans,val;
    sll(n);
    sll(q);
    for(i=0;i<n;i++)
    {
        sll(a[i]);
    }
    for(i=0;i<4*n+5;i++)
    {
        c.PB(MP(1,0));
    }
    buildsegtree(1,0,n-1);
    while(q--)
    {
        sll(temp1);
        if(temp1==4)
        {
            sll(left);
            sll(right);
            ans=givesum(1,0,n-1,left-1,right-1);
            lldout(ans);
        }
        else
        {
            sll(left);
            sll(right);
            sll(val);
            query(1,0,n-1,left-1,right-1,temp1,val);
        }
    }
    return 0;
}

*/
ll max(ll p,ll q)
{
    return (p>q)?p:q;
}
ll min(ll p,ll q)
{
    return (p<q)?p:q;
}

vector< pair<ll,ll> > c;
ll a[100005],b[400005],mod=1000000007;

void buildsegtree(ll i,ll rl,ll rr)
{
    if(rl==rr)
    {
        b[i]=a[rl];
    }
    else
    {
        ll rm=(rl+rr)/2;
        buildsegtree(2*i,rl,rm);
        buildsegtree(2*i+1,rm+1,rr);
        b[i]=(b[2*i]+b[2*i+1])%mod;
    }
    //printf("%lld %lld\n",i,b[i]);
}

void query(ll i,ll l,ll r,ll reql,ll reqr,ll qn,ll val)
{
    if(c[i].F!=1)
    {
        b[i]=(b[i]*c[i].F)%mod;
        if(l!=r)
        {
            c[2*i].F=(c[2*i].F*c[i].F)%mod;
            c[2*i+1].F=(c[2*i+1].F*c[i].F)%mod;
        }
    }
    if(c[i].S!=0 || c[i].F!=0)
    {
        b[i]=(b[i]+(c[i].S*(r-l+1))%mod)%mod;
        if(l!=r)
        {
            c[2*i].S=((c[2*i].S*c[i].F)%mod+c[i].S)%mod;
            c[2*i+1].S=((c[2*i+1].S*c[i].F)%mod+c[i].S)%mod;
        }
    }
    c[i].S=0;
    c[i].F=1;
    if(reql>reqr)
    {
        return;
    }
    if(l==reql && r==reqr)
    {
        if(qn==1)
        {
            c[i].S=(c[i].S+val)%mod;
        }
        else if(qn==2)
        {
            c[i].F=(c[i].F*val)%mod;
            c[i].S=(c[i].S*val)%mod;
        }
        else if(qn==3)
        {
            c[i].F=0;
            c[i].S=val;
        }
        if(c[i].F!=1)
        {
            b[i]=(b[i]*c[i].F)%mod;
            if(l!=r)
            {
                c[2*i].F=(c[2*i].F*c[i].F)%mod;
                c[2*i+1].F=(c[2*i+1].F*c[i].F)%mod;
            }
        }
        if(c[i].S!=0 || c[i].F!=0)
        {
            b[i]=(b[i]+(c[i].S*(r-l+1))%mod)%mod;
            if(l!=r)
            {
                c[2*i].S=((c[2*i].S*c[i].F)%mod+c[i].S)%mod;
                c[2*i+1].S=((c[2*i+1].S*c[i].F)%mod+c[i].S)%mod;
            }
        }
        c[i].S=0;
        c[i].F=1;
    }
    else
    {
        ll m=(r+l)/2;
        query(2*i,l,m,reql,min(reqr,m),qn,val);
        query(2*i+1,m+1,r,max(m+1,reql),reqr,qn,val);
        b[i]=(b[2*i]+b[2*i+1])%mod;
    }
}

ll givesum(ll i,ll l,ll r,ll reql,ll reqr)
{
    if(reql>reqr)
    {
        return 0;
    }
    if(c[i].F!=1)
    {
        b[i]=(b[i]*c[i].F)%mod;
        if(l!=r)
        {
            c[2*i].F=(c[2*i].F*c[i].F)%mod;
            c[2*i+1].F=(c[2*i+1].F*c[i].F)%mod;
        }
    }
    if(c[i].S!=0 || c[i].F!=0)
    {
        b[i]=(b[i]+(c[i].S*(r-l+1))%mod)%mod;
        if(l!=r)
        {
            c[2*i].S=((c[2*i].S*c[i].F)%mod+c[i].S)%mod;
            c[2*i+1].S=((c[2*i+1].S*c[i].F)%mod+c[i].S)%mod;
        }
    }
    c[i].S=0;
    c[i].F=1;
    if(l==reql && r==reqr)
    {
        return b[i]%mod;
    }
    else
    {
        ll m=(l+r)/2;
        return (givesum(2*i,l,m,reql,min(reqr,m)) + givesum(2*i+1,m+1,r,max(reql,m+1),reqr))%mod;
    }
}


int main()
{
    ll t,n,q,i,left,right,temp1,ans,val;
    sll(n);
    sll(q);
    for(i=0;i<n;i++)
    {
        sll(a[i]);
    }
    for(i=0;i<4*n+5;i++)
    {
        c.PB(MP(1,0));
    }
    buildsegtree(1,0,n-1);
    while(q--)
    {
        sll(temp1);
        if(temp1==4)
        {
            sll(left);
            sll(right);
            ans=givesum(1,0,n-1,left-1,right-1);
            lldout(ans);
        }
        else
        {
            sll(left);
            sll(right);
            sll(val);
            query(1,0,n-1,left-1,right-1,temp1,val);
        }
    }
    return 0;
}
