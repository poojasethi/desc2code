
#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi  vector<int>
#define pb  push_back
#define mp  make_pair
#define M(a,x) memset(a,x,sizeof(a))
#define sci(x) scanf("%d",&x);
#define scl(x) scanf("%lld",&x);
#define scs(x) scanf("%s",x);
#define print(x) printf("%d",x);
#define nl printf("\n")
#define printl(x) printf("%lld",x)
#define F(i,a,n) for(int i=a;i<n;i++)
#define INF 100000000000000000LL
#define LL long long

const int N = 1e5+5;
int A[N];
struct node {
    LL sum,add,mul;
};
node tree[5*N];

void add(int n,int b,int e,int x,int y,int v);
void mul(int n,int b,int e,int x,int y,int v);

void build(int n,int b,int e) {
    tree[n].mul=1;
    if(b==e) {
	tree[n].sum=A[b];
	return ;
    }
    int m = (b+ e)/2;
    build(2*n,b,m);
    build(2*n+1,m+1,e);
    tree[n].sum=tree[2*n].sum+tree[2*n+1].sum;
    if(tree[n].sum>=MOD) {
	tree[n].sum-=MOD;
    }
}
void add(int n,int b,int e,int x,int y,int v) {
    int m = (b+e)/2;
    if(b==x && e==y) {
	tree[n].sum+=(e-b+1)*1LL*v;
	tree[n].sum%=MOD;
	tree[n].add+=v;
	tree[n].add%=MOD;
	return ;
    }
    if(tree[n].mul!=1 && b!=e) {
	mul(2*n,b,m,b,m,tree[n].mul);
	mul(2*n+1,m+1,e,m+1,e,tree[n].mul);
	tree[n].mul=1;
    }
    if(tree[n].add>0 && b!=e) {
	add(2*n,b,m,b,m,tree[n].add);
	add(2*n+1,m+1,e,m+1,e,tree[n].add);
	tree[n].add=0;
    }
    if(y<=m) {
	add(2*n,b,m,x,y,v);
    }
    else if(x>m) {
	add(2*n+1,m+1,e,x,y,v);
    }
    else {
	add(2*n,b,m,x,m,v);
	add(2*n+1,m+1,e,m+1,y,v);
    }
    tree[n].sum=tree[2*n].sum+tree[2*n+1].sum;
    if(tree[n].sum>=MOD) {
	tree[n].sum-=MOD;
    }
}
void mul(int n,int b,int e,int x,int y,int v) {
    if(b==x && e==y) {
	tree[n].sum*=v;
	tree[n].sum%=MOD;
	tree[n].add*=v;
	tree[n].add%=MOD;
	tree[n].mul*=v;
	tree[n].mul%=MOD;
	return ;
    }
    int m = (b + e)/2;
    if(tree[n].mul!=1 && b!=e) {
	mul(2*n,b,m,b,m,tree[n].mul);
	mul(2*n+1,m+1,e,m+1,e,tree[n].mul);
	tree[n].mul=1;
    }
    if(tree[n].add>0 && b!=e) {
	add(2*n,b,m,b,m,tree[n].add);
	add(2*n+1,m+1,e,m+1,e,tree[n].add);
	tree[n].add=0;
    }
    if(y<=m) {
	mul(2*n,b,m,x,y,v);
    }
    else if(x>m) {
	mul(2*n+1,m+1,e,x,y,v);
    }
    else {
	mul(2*n,b,m,x,m,v);
	mul(2*n+1,m+1,e,m+1,y,v);
    }
    tree[n].sum=tree[2*n].sum+tree[2*n+1].sum;
    if(tree[n].sum>=MOD) {
	tree[n].sum-=MOD;
    }
}
LL query(int n,int b,int e,int x,int y) {
    int m = (b+e)/2;
    if(b==x && e==y) {
	return tree[n].sum;
    }
    if(tree[n].mul!=1 && b!=e) {
	mul(2*n,b,m,b,m,tree[n].mul);
	mul(2*n+1,m+1,e,m+1,e,tree[n].mul);
	tree[n].mul=1;
    }
    if(tree[n].add>0 && b!=e) {
	add(2*n,b,m,b,m,tree[n].add);
	add(2*n+1,m+1,e,m+1,e,tree[n].add);
	tree[n].add=0;
    }
    LL ans = 0;
    if(y<=m) {
	ans+=query(2*n,b,m,x,y);
    }
    else if(x>m) {
	ans+=query(2*n+1,m+1,e,x,y);
    }
    else {
	ans+=query(2*n,b,m,x,m);
	ans+=query(2*n+1,m+1,e,m+1,y);
    }
    tree[n].sum=tree[2*n].sum+tree[2*n+1].sum;
    if(tree[n].sum>=MOD) {
	tree[n].sum-=MOD;
    }
    return ans%MOD;
}
    int main() {
	int n,q;
	sci(n);sci(q);
	F(i,1,n+1) {
	    sci(A[i]);
	}
	build(1,1,n);
	while(q--) {
	    int type;
	    sci(type);
	    if(type == 1) {
		int x,y,v;
		scanf("%d%d%d",&x,&y,&v);
		add(1,1,n,x,y,v);
	    } else if(type == 2) {
		int x,y,v;
		scanf("%d%d%d",&x,&y,&v);
		mul(1,1,n,x,y,v);
	    } else if(type == 3) {
		int x,y,v;
		scanf("%d%d%d",&x,&y,&v);
		mul(1,1,n,x,y,0);
		add(1,1,n,x,y,v);
	    } else {
		int x,y;
		scanf("%d%d",&x,&y);
		printf("%lld\n",query(1,1,n,x,y));
	    }
	}
	return 0;
    } 
