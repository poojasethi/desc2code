#include <bits/stdc++.h>
using namespace std;
const int N = 100000;
const int M = 1000000007;
typedef long long ll;
 
int n, h;
ll t[N<<1], a[N], m[N];
 
void apply(int p, ll vA, ll vM, ll k) {
    t[p] = t[p] * vM + vA * k;
    t[p] %= M;
    
    if(p < n) {
        m[p] = m[p] * vM % M;
        a[p] = a[p] * vM + vA;
        a[p] %= M;
    }
}
 
void build(int p) {
    ll k = 1;
    while(p > 1) {
    	p >>= 1, k <<= 1;
    	t[p] = t[p << 1] + t[p << 1|1];
        t[p] = t[p] * m[p] + a[p] * k;
        t[p] %= M;
    }
}
 
void push(int p) {
    ll k = 1 << (h-1);
    
    for(int s = h; s > 0; --s, k >>= 1) {
        int i = p >> s;
        if(a[i] || m[i] - 1) {
            apply(i << 1, a[i], m[i], k);
            apply(i << 1|1, a[i], m[i], k);
            a[i] = 0; m[i] = 1;
        }
    }
}
 
void update(int l, int r, ll v, bool isAdd) {
    l += n; r += n;
    push(l); push(r - 1);
    int st = l, rt = r;
    ll k = 1, vM = 1, vA = 0;
    
    if(isAdd) vA = v; 
    else vM = v;
    
    for(; l < r; l >>= 1, r >>= 1, k <<= 1) {
        if(l & 1) apply(l++, vA, vM, k);
        if(r & 1) apply(--r, vA, vM, k);
    }
    
    build(st); build(rt-1);
}
 
ll query(int l, int r) {
    
    l += n; r += n;
    push(l); push(r - 1);
    ll res = 0;
    
    for(; l < r; l >>= 1, r >>= 1) {
        if(l & 1) res += t[l++];
        if(r & 1) res += t[--r];
    }
 
    return res % M;
}
 
int main() {
    int q, l, r, qt, i; ll v;
    scanf("%d %d", &n, &q);    
 
    for(i = 1; i<=n; i <<= 1) h++;

    for(i = 0; i < n; i++) {
    	a[i] = 0, m[i] = 1;
    	scanf("%lld", t + n + i);
    }
 
    for(i = n - 1; i > 0; i--){
    	t[i] = t[i << 1] + t[i << 1|1];
        t[i] %= M;
    }
 
    while(q--) {
        scanf("%d %d %d", &qt, &l, &r);
        if(qt == 1) {
            scanf("%lld", &v);
            update(l-1, r, v, 1); // do add
        }
        else if(qt == 2) {
            scanf("%lld", &v);
            update(l-1, r, v, 0); // do mul
        }
        else if(qt == 3) {
            scanf("%lld", &v);
            update(l-1, r, 0, 0);
            update(l-1, r, v, 1); // do assignment
        }
        else printf("%lld\n", query(l-1, r));
    }
    return 0;
} 