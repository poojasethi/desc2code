#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <deque>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>

using namespace std;
/*========================================Templates=============================================*/
// datatypes
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef double db;
typedef unsigned int uint;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
int gcd( int a, int b ) {  if( !b ) return a;  return gcd( b, a % b ); }

#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define tr(i,x)     for(typeof(x.begin()) i=x.begin();i!=x.end();++i)
#define tests(tc) int tc;scanf("%d",&tc);while(tc--)
#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<=(b);++i)
#define FOR1(i,a,b) for(int i=(a);i<(b);++i)
#define FORN(i,a,b,n) for(int i=(a);i<=(b);i+=n)
#define FORR(i,a,b) for(int i=(a);i>=(b);--i)
#define FORRN(i,a,b,n) for(int i=(a);i>=(b);i-=n)
#define CLEAR(arr,v)        memset(arr,v,sizeof(arr))
#define INF ((1<<30)-1)

#define DBG
#ifdef DBG
#define DB(x) cerr<<#x<<" : "<<x<<endl<<flush;
#define DB2(x,y) cerr<<#x<<" : "<<x<<" "<<#y<<" : "<<y<<endl<<flush;
#define DB3(x,y,z) cerr<<#x<<" : "<<x<<" "<<#y<<" : "<<y<<" "<<#z<<" : "<<z<<endl<<flush;
#define DB4(w,x,y,z) cerr<<#w<<" : "<<w<<" "<<#x<<" : "<<x<<" "<<#y<<" : "<<y<<" "<<#z<<" : "<<z<<endl<<flush;
#define DB5(v,w,x,y,z) cerr<<#v<<" : "<<v<<" "<<#w<<" : "<<w<<" "<<#x<<" : "<<x<<" "<<#y<< \
" : "<<y<<" "<<#z<<" : "<<z<<endl<<flush;
#define DBAR(arr,a,b) cerr<<#arr<<" : ";FOR(dbar,a,b) cerr<<arr[dbar]<<" ";cerr<<endl;
#define DBAR2(arr,a,b,x,y) cerr<<#arr<<endl;FOR(dbar,a,b){ FOR(dbar2,x,y)cerr<< arr[dbar][dbar2]<<" ";cerr<<endl;}

#else
#define DB(x)
#define DB2(x,y)
#define DB3(x,y,z)
#define DB4(w,x,y,z)
#define DB5(v,w,x,y,z)
#define DBAR(arr,a,b)
#define DBAR2(arr,a,b,x,y)
#endif


const int MAX_N = 100000;
const int MODULE = 1000000007;

int n;
int a[MAX_N];
bool lazy[MAX_N<<2];
int lazy_init[MAX_N<<2];
int lazy_mult[MAX_N<<2];
int lazy_add[MAX_N<<2];
int sum[MAX_N<<2];

#define gc getchar_unlocked

int read_int() {
    char c = gc();
    while (!isdigit(c)) c = gc();
    int ret = 0;
    while (isdigit(c)) {
        ret = 10*ret + (c&15);
        c = gc();
    }
    return ret;
}

void build(int v, int tl, int tr) {
    if (tl == tr) {
        sum[v] = a[tl];
    }
    else {
        int tm = (tl+tr)>>1;
        build(v<<1, tl, tm);
        build(v<<1|1, tm+1, tr);
        sum[v] = sum[v<<1]+sum[v<<1|1];
        if (sum[v] >= MODULE) {
            sum[v] -= MODULE;
        }
    }
}

int get(int v, int tl, int tr) {
    if (lazy[v]) {
        int s = lazy_init[v] != 0 ? (long long) lazy_init[v]*(tr-tl+1)%MODULE : sum[v];
        if (lazy_mult[v] != 1) s = (long long) s*lazy_mult[v]%MODULE;
        if (lazy_add[v] != 0) s = (s + (long long) lazy_add[v]*(tr-tl+1))%MODULE;
        return s;
    }
    else {
        return sum[v];
    }
}

void update(int v, int tl, int tr) {
    int tm = (tl+tr)>>1;
    sum[v] = get(v<<1, tl, tm) + get(v<<1|1, tm+1, tr);
    if (sum[v] >= MODULE) {
        sum[v] -= MODULE;
    }
}

void push(int v) {
    if (lazy[v]) {
        lazy[v<<1] = lazy[v<<1|1] = true;
        if (lazy_init[v] != 0) {
            lazy_init[v<<1] = lazy_init[v<<1|1] = lazy_init[v];
            lazy_mult[v<<1] = lazy_mult[v<<1|1] = lazy_mult[v];
            lazy_add[v<<1] = lazy_add[v<<1|1] = lazy_add[v];
        }
        else {
            lazy_mult[v<<1] = (long long) lazy_mult[v<<1]*lazy_mult[v]%MODULE;
            lazy_mult[v<<1|1] = (long long) lazy_mult[v<<1|1]*lazy_mult[v]%MODULE;
            lazy_add[v<<1] = ((long long) lazy_add[v<<1]*lazy_mult[v] + lazy_add[v])%MODULE;
            lazy_add[v<<1|1] = ((long long) lazy_add[v<<1|1]*lazy_mult[v] + lazy_add[v])%MODULE;
        }
        lazy_init[v] = 0;
        lazy_mult[v] = 1;
        lazy_add[v] = 0;
        lazy[v] = false;
    }
}

void add(int v, int tl, int tr, int l, int r, int value) {
    if (l > r) return;
    if (tl == l && tr == r) {
        lazy[v] = true;
        lazy_add[v] += value;
        if (lazy_add[v] >= MODULE) {
            lazy_add[v] -= MODULE;
        }
    }
    else {
        push(v);
        int tm = (tl+tr)>>1;
        add(v<<1, tl, tm, l, min(tm, r), value);
        add(v<<1|1, tm+1, tr, max(l, tm+1), r, value);
        update(v, tl, tr);
    }
}

void add(int l, int r, int v) {
    add(1, 0, n-1, l, r, v);
}

void mult(int v, int tl, int tr, int l, int r, int value) {
    if (l > r) return;
    if (tl == l && tr == r) {
        lazy[v] = true;
        lazy_mult[v] = (long long) lazy_mult[v]*value%MODULE;
        lazy_add[v] = (long long) lazy_add[v]*value%MODULE;
    }
    else {
        push(v);
        int tm = (tl+tr)>>1;
        mult(v<<1, tl, tm, l, min(tm, r), value);
        mult(v<<1|1, tm+1, tr, max(l, tm+1), r, value);
        update(v, tl, tr);
    }
}

void mult(int l, int r, int v) {
    mult(1, 0, n-1, l, r, v);
}

void init(int v, int tl, int tr, int l, int r, int value) {
    if (l > r) return;
    if (tl == l && tr == r) {
        lazy[v] = true;
        lazy_init[v] = value;
        lazy_mult[v] = 1;
        lazy_add[v] = 0;
    }
    else {
        push(v);
        int tm = (tl+tr)>>1;
        init(v<<1, tl, tm, l, min(tm, r), value);
        init(v<<1|1, tm+1, tr, max(l, tm+1), r, value);
        update(v, tl, tr);
    }
}

void init(int l, int r, int v) {
    init(1, 0, n-1, l, r, v);
}

int query(int v, int tl, int tr, int l, int r) {
    if (l > r) return 0;
    if (tl == l && tr == r) {
        return get(v, tl, tr);
    }
    else {
        push(v);
        int tm = (tl+tr)>>1;
        int ret = query(v<<1, tl, tm, l, min(tm, r)) + query(v<<1|1, tm+1, tr, max(tm+1, l), r);
        update(v, tl, tr);
        return ret >= MODULE ? ret-MODULE : ret;
    }
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("sample.in", "r", stdin);
#endif
    n = read_int();
    int q = read_int();
    for (int i = 0; i < n; ++i) {
        scanf("%d", a+i);
    }
    build(1, 0, n-1);
    memset(lazy, 0, n<<2);
    memset(lazy_init, 0, n<<4);
    memset(lazy_add, 0, n<<4);
    fill(lazy_mult, lazy_mult+(n<<2), 1);
    while (q--) {
        int t = read_int();
        int x = read_int()-1;
        int y = read_int()-1;
        switch (t) {
            case 1:
                add(x, y, read_int());
                break;
            case 2:
                mult(x, y, read_int());
                break;
            case 3:
                init(x, y, read_int());
                break;
            default: 
                printf("%d\n", query(1, 0, n-1, x, y));
        }
    }
    return 0;
}


