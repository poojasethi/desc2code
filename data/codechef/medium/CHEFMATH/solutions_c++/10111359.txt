/**
     Name: Shivam Mishra
     handle: shivam217
**/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

const int INF = INT_MAX;
const int MAX = 100000;
const int MOD = 1e9 + 7;

set<int> fibNumSet;
int fibNum[50];
int fibNumSize;
int Memo[MAX][11][43];
int fibWays[45][11];
map<PII,int> mapp;

int foo(int x,int k,int idx)
{
    if(x==0 && k==0)
        return 1;

    if(x!=0 && k==0)
        return 0;
    if(x<0 || k<0)
        return 0;

     if(x<MAX && k<=10 && k>=1 && x>0)
    {
        if(Memo[x][k][idx] > -1 )
           return Memo[x][k][idx];
    }

    LL temp1 = (LL)((LL)fibNum[idx]*(LL)k);
    if(temp1<x)
        return 0;

       int sum=0;

        FORR(i,idx,0)
        {
            if(x-fibNum[i]>=0)
            {

                int temp1 = foo(x-fibNum[i],k-1,i);
                if(temp1>=1)
                {
                    sum += temp1;
                }
            }

        }

       if(x<MAX && k<=10 && k>=1 && x>=1)
           Memo[x][k][idx] = sum;

         return sum;

}

void init()
{
    FOR(i,0,MAX)
        FOR(j,0,11)
         {
             FOR(k,0,44)
                Memo[i][j][k] = -1;
         }

    fibNum[0]=1;
    fibNum[1]=2;
    fibNumSet.insert(1);
    fibNumSet.insert(2);

    FOR(i,2,50)
    {
        LL temp = (LL)((LL)fibNum[i-1]+(LL)fibNum[i-2]);
        if(temp>1000000000)
            break;
        else
        {
            fibNum[i]=(int)temp;
            fibNumSet.insert((int)temp);

        }

    }

    fibNumSize = fibNumSet.size();

}



int main()
{
 
    init();
    int startIdx = fibNumSet.size() - 1;

    FOR(i,0,fibNumSize)
    {
      FOR(j,1,11)
     {
         if(i>=17)
         {
             fibWays[i][j] = fibWays[i-1][j];
             mapp[PII(fibNum[i],j)] = fibWays[i][j];
             continue;
         }
         fibWays[i][j] = foo(fibNum[i],j,0);
         mapp[PII(fibNum[i],j)] = fibWays[i][j];

     }
}

int test; INT(test);

int sz  = fibNumSet.size();
while(test--)
{
    int x,k;
    INT(x); INT(k);
    LL t1 = (LL)((LL)k*(LL)fibNum[sz-1]);
    if(x>t1)
    {
        PINT(0);
        continue;
    }

    if(x>=1 && x<MAX)
    {
        if(Memo[x][k][startIdx]>-1)
        {
            PINT(Memo[x][k][startIdx]);
            continue;
        }
    }

    int ans = foo(x,k,startIdx);
    PINT(ans);

}

return 0;
}
