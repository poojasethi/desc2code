#include<bits/stdc++.h>
#define MOD 1000000007
using namespace std;
 
long long cfib[44];
 
void gen()
{
	cfib[0]=1;
	cfib[1]=2;
	for(long long i=2; i<44; i++)
	{
		cfib[i]=cfib[i-1]+cfib[i-2];
	}
}
 
long long bsrc(long long x)
{
	long long beg=0,end=43,mid=(beg+end)/2;
	while(beg<=end)
	{
		if(cfib[mid]<x && cfib[mid+1]>=x) return mid+1;
		if(cfib[mid]<x) beg=mid+1;
		else end=mid-1;
		mid=(beg+end)/2;
	}
	return 0;
}
 
long long bs(long long x, long long i)
{
	long long beg=0,end=i,mid=(beg+end)/2;
	while(beg<=end)
	{
		if(cfib[mid]==x) return 1;
		if(cfib[mid]<x) beg=mid+1;
		else end=mid-1;
		mid=(beg+end)/2;
	}
	return 0;
}
 
long long dp(long long x, long long k, long long i)
{
	//cout<<" enter "<<x<<" "<<k<<" "<<i<<endl;
	if(k==1) {
		//if(bs(x,i)) cout<<"   found"<<endl;
		return bs(x,i);
	}
	if(x==0 && k==0) {
		//cout<<"   found"<<endl;
		return 1;
	}
	if(cfib[i]*k<x) return 0;
	if(x<k) return 0;
	if(x<0 || k<0) return 0;
	if(x==0 || k==0) return 0;
	if(i==-1) return 0;
	
	long long q=0;
	for(long long j=1; j<=10; j++)
	{
		if(cfib[i]*j>x) break;
		if(j>k) break;
		q+=dp(x-cfib[i]*j,k-j,i-1);
	}
	q+=dp(x,k,i-1);
	q%=MOD;
	return q;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	gen();
	long long t,k,x,index;
	cin>>t;
	while(t--)
	{
		cin>>x>>k;
		index=bsrc(x);
		cout<<dp(x,k,index)<<endl;
	}
	return 0;
} 