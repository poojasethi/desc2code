#include<bits/stdc++.h>
#include<iostream>
#include<algorithm>
using namespace std;
#define pc(x) putchar_unlocked(x)
#define gc() getchar_unlocked()
typedef long long int ll;



//const ll mod = 1e9+7;
const ll SIZE = 1e5+1;
const ll MAXSIZE = 1e7+1;
ll X;

#include <stdio.h>
#include<stdbool.h>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define lli long long int
int arr[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};


inline lli modmul(lli a,lli b,lli mod)//O(1) for (a*b)%mod
{
	a%=mod;b%=mod;//long long int 8bytes
	long double res=a;//long double 16bytes
	res*=b;
	lli c=(lli)(res/mod);
	a*=b;//overflow wrap round.
	a-=c*mod;
	a%=mod;
	if(a<0)a+=mod;
	return a;
}
inline lli fastexpo(lli a,lli b,lli mod)
{	lli result=1;
	while(b)
	{
		if(b&1)result=modmul(result,a,mod);
		a=modmul(a,a,mod);
		b>>=1;
	}
	return result;
}
inline bool MillerRabinTest(lli p,int iteration)
{	int i,d=0,j;
	if(p<2)return false;
	if(p!=2 && !(p&1))return false;//if p is even
	for(i=0;i<25;i++)
		if(p==arr[i])return true;
		else if(p%arr[i]==0)return false;
	lli s=p-1; //factor p-1 into 2^d*s where s is odd
	while(!(s&1))
		s/=2,d++;
	for(i=0;i<iteration;i++)
	{	//Fermat's Little theorem a^p-1=1(mod p)
		lli a=rand()%(p-1)+1,temp=s;//check if a is witness or a strong liar
		lli mod=fastexpo(a,temp,p);
		if(mod==1 || mod==p-1) continue;
		int flag=0;
		//keep taking square roots of a^nÃ¢ï¿½ï¿½1, we will get either 1 or Ã¢ï¿½ï¿½1. If we get Ã¢ï¿½ï¿½1 then the second equality holds and it is done
		for(j=1;j<d;j++)
		{
			mod=modmul(mod,mod,p);
			if(mod==1)return false;
			if(mod==p-1)
			{	flag=1;
				break;
			}
		}
		if(flag)continue;
		return false;
	}
	return true;
}




bool prime(ll X)
{
    if(X==2||X==3||X==5||X==7||X==11)
    return 1;
    if(X==1||!(X%2)||!(X%3)||!(X%5)||!(X%7)||!(X%11))
        return 0;
    if(!(!((X-1)%6)||!((X+1)%6)))
        return 0;
    for(int i=13;i<=(int)(sqrt(X));i+=2)
    {

        if(!(X%i))
            return 0;
    }
    return 1;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int tt;
    cin>>tt;
    while(tt--)
    {
        cin>>X;
        while(X>2&&!(MillerRabinTest(X,3)))
            --X;
        cout<<X<<endl;
    }
    return 0;
}
