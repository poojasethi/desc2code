 #include <bits/stdc++.h>
using namespace std;
long long int mulmod(long long int a,long long int b,long long int modulus) {
// return by (a*b)%modulus
// good for |a|,|b|,|m| < 2^63
unsigned long long int result=0,res,M;
int sign=0;
if(modulus<0) modulus=-modulus;
M=(unsigned long long int) modulus;
if(a<0) a=-a,sign++;
if(b<0) b=-b,sign++;
a%=M;
b%=M;
res=b;
while(a) {
if(a&1) {
result+=res;
if(result>=M) result-=M;
}
res<<=1;
if(res>=M) res-=M;
a>>=1;
}
if(sign&1) result=M-result;
if(result==M) result=0;
return result;
}
unsigned long long modulo(unsigned long long a, unsigned long long b, unsigned long long c){
unsigned long long x=1,y=a;
while(b > 0){
if(b&1){
x = mulmod(x,y,c);;
}
y = mulmod(y,y,c);
b=(b>>1);
}
return x%c;
}
/* Miller-Rabin primality test, iteration signifies the accuracy of the test */
bool Miller(long long p){
if(p<2){
return false;
}
if(p!=2 && !(p&1)){
return false;
}
long long s=p-1;
while(!(s&1)){
s/=2;
}
for(int i=0;i<=2;i++){
long long a=rand()%(p-1)+1,temp=s;
long long mod=modulo(a,temp,p);
while(temp!=p-1 && mod!=1 && mod!=p-1){
mod=mulmod(mod,mod,p);
temp =(temp<<1);
}
if(mod!=p-1 && (temp&1)==0){
return false;
}
}
return true;
}
int main() {
long long int t,n,j;
cin>>t;
while(t--)
{
cin>>n;
while(!Miller(n))
n--;
cout<<n<<endl;
}
	// your code goes here
	return 0;
}