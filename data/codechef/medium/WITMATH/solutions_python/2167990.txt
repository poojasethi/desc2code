import random

x = {}

def modular_exponentiation(a, b, n):
    c = 0
    d = 1
    k = ""
    while b > 0:
        if b & 1 == 0:
            k += "0"
        else:
            k += "1"
        b >>= 1
    for i in range(len(k)):
        c = 2 * c
        d = (d * d) % n
        if k[len(k) - i - 1] == '1':
            c = c + 1
            d = (d * a) % n
    return d

def witness(a, n):
    var = n - 1
    t = 0
    while var >= 1 and var & 1 == 0:
        t += 1
        var >>= 1
    u = (n - 1) / (1 << t)
    x[0] = modular_exponentiation(a, u, n)
    for i in range(1, t + 1):
        x[i] = x[i - 1] * x[i - 1] % n
        if x[i] == 1 and x[i - 1] != 1 and x[i - 1] != n - 1:
            return True
    if x[t] != 1:
        return True
    return False


def miller_rabin(n, s):
    for j in range(1, s + 1):
        a = random.randint(1, n - 1)
        if witness(a, n):
            return "COMPOSITE"      # Definitely.
    return "PRIME"                  # Almost surely.

def main():
    t = int(raw_input())
    for i in range(t):
        n = int(raw_input())
        while n >= 3 and (n & 1 == 0 or miller_rabin(n, 20) == "COMPOSITE"):
            n -= 1
        print n

main()
