#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

const int N = 50050;
const int mod = (int)1e9 + 7;

int a[N], b[N];

int f[N];

int main() {
    int T; gi(T);
    rep(tt, T) {
        fill(f, 0);
        int n; gi(n);
        rep(i, n) {
            gi(a[i]), gi(b[i]);
            f[a[i]] += 1;
            f[b[i] + 1] -= 1;
        }
        fore(i, 1, n) f[i] += f[i - 1];

        set <int> valid;
        fore(i, 0, n) {
            if(f[i] == i) valid.insert(i);
        }

        assert(sz(valid));

        int nans = sz(valid);
        string ans;
        rep(i, n) {
            if(*valid.begin() < a[i] or *valid.rbegin() > b[i]) {
                ans.pb('0');
                if(*valid.rbegin() < a[i]) continue;
                int v = *valid.lower_bound(a[i]);
                while(v <= b[i]) {
                    valid.erase(v);
                    set <int>::iterator it = valid.upper_bound(v);
                    if(it == valid.end()) break;
                    v = *it;
                }
            } else {
                while(*valid.begin() < a[i]) {
                    assert(sz(valid));
                    valid.erase(valid.begin());
                }
                while(*valid.rbegin() > b[i]) {
                    assert(sz(valid));
                    valid.erase(--valid.end());
                }
                ans.pb('1');
            }
        }
        pin(nans);
        puts(ans.c_str());
    }
    return 0;
}