#include <algorithm>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstring>
#include <fstream>
#include <iostream>
#include <iterator>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAXN = 50000;

const int INPUT_MAXCHARS = 1<<16;
char buffer[INPUT_MAXCHARS];
struct FastReader {
    char *p;

    FastReader(): p(buffer) {
        fread(buffer, 1, sizeof buffer, stdin);
    }
    int next_int() {
        int remchars = INPUT_MAXCHARS - (p-buffer);
        if (remchars < 25) {
            memcpy(buffer, p, remchars);
            size_t cnt = fread(buffer+remchars, 1, sizeof buffer - remchars, stdin);
            if (remchars + cnt < sizeof buffer) { // assume EOF
                buffer[remchars + cnt] = 0; // make the value determinate
            }
            p = buffer;
        }
        while (*p < '0') {
            p++;
        }
        int val = 0;
        while (*p >= '0') {
            val = val*10 + (*p - '0');
            ++p;
        }
        return val;
    }
};

int A[MAXN], B[MAXN];
int nstart[MAXN+1], nend[MAXN+1];
char solbuff[MAXN+1];

struct Tournament {
    int n, l, r;
    vector<int> T;
    Tournament(int N) {
        for (n=1; n<N; n*=2) ;
        T.assign(2*n, 0);
    }
    void set(int at, int val) {
        T[at+=n] = val;
        for (at/=2; at>0; at/=2) {
            T[at] = T[2*at] + T[2*at+1];
        }
    }
    void kill(int a, int b) {
        //cerr << "killing " << a << ' ' << b << '\n';
        l = a;
        r = b;
        return kill(1, 0, n);
    }
    void kill(int x, int a, int b) {
        if (b<=l || a>=r) return;
        if (l<=a && b<=r) {
            T[x] = 0;
        } else {
            kill(2*x, a, (a+b)/2);
            kill(2*x+1, (a+b)/2, b);
            T[x] = min(T[x], T[2*x] + T[2*x+1]);
        }
    }
    int get_sum(int a, int b) {
        l = a;
        r = b;
        //int sum = get_sum(1, 0, n);
        //cerr << "sum " << l << ' ' << r << " => " << sum << '\n';
        return get_sum(1, 0, n);
    }
    int get_sum(int x, int a, int b) {
        if (b<=l || a>=r || T[x]==0) return 0;
        if (l<=a && b<=r) return T[x];
        return get_sum(2*x, a, (a+b)/2) + get_sum(2*x+1, (a+b)/2, b);
    }
};
int main() {
    cin.sync_with_stdio(false);
    FastReader reader;
    int ntestcases = reader.next_int();
    for (int testcase=0; testcase<ntestcases; ++testcase) {
        memset(nstart, 0, sizeof nstart);
        memset(nend, 0, sizeof nend);
        int n = reader.next_int();
        for (int i=0; i<n; ++i) {
            A[i] = reader.next_int();
            B[i] = reader.next_int();
            ++nstart[A[i]];
            ++nend[B[i]];
        }
        Tournament T(n+1);
        int truthy = 0;
        for (int i=0; i<=n; ++i) {
            truthy += nstart[i];
            if (truthy == i) {
                //cerr << i << '\n';
                T.set(i, 1);
            }
            truthy -= nend[i];
        }
        //cerr << '\n';

        printf("%d\n", T.get_sum(0, n+1));
        for (int i=0; i<n; ++i) {
            if ((A[i]>0 && T.get_sum(0, A[i])>0) || (B[i]<n && T.get_sum(B[i]+1, n+1)>0)) {
                solbuff[i] = '0';
                T.kill(A[i], B[i]+1);
            } else {
                solbuff[i] = '1';
                T.kill(0, A[i]);
                T.kill(B[i]+1, n+1);
            }
        }
        solbuff[n] = '\0';
        puts(solbuff);
    }

	return 0;
}
