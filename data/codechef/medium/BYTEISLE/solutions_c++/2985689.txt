#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>
#include <set>
#include <assert.h>

#define MAX_N 50000

#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)<(y)?(x):(y))

typedef struct {
	int l, u;
} range_t;

bool is_k_valid(int k, int n, range_t *r)
{
	int n_true = 0;
	int n_false = 0;

	for(int i = 0; i < n; i++){
		if(r[i].l <= k && r[i].u >= k){
			n_true++;
		}
		else {
			n_false++;
		}
	}

	return n_true == k;
}

int make_bitstring(int k, int n, range_t *r, char *str)
{
	int n_true = 0;
	for(int i = 0; i < n; i++){
		if(r[i].l <= k && k <= r[i].u){
			n_true++;
			str[i] = '1';
		}
		else {
			str[i] = '0';
		}
	}
	return n_true;
}

class String_patch {
public:
	std::set<int> to_set;
	std::set<int> to_clear;

	void reset() {
		to_set.clear();
		to_clear.clear();
	}

	String_patch() {
		reset();
	}

	void add_set(int k){
		to_set.insert(k);
	}

	void add_clear(int k){
		if(0 == to_set.erase(k)){
			to_clear.insert(k);
		}
	}

	void apply(char *str){
		std::set<int>::const_iterator i;
		for(i = to_set.begin(); i != to_set.end(); i++){
			str[*i] = '1';
		}
		for(i = to_clear.begin(); i != to_clear.end(); i++){
			str[*i] = '0';
		}
		reset();
	}

	bool decreases_cost() {
		if(to_set.size() == 0)
			return to_clear.size() != 0;
		if(to_clear.size() == 0)
			return false;
		return *to_clear.begin() < *to_set.begin();
	}
};

int find_solution(int n, range_t *r, char *result_str)
{
	int n_solutions = 0;
	std::vector<std::pair<int, int> > l, u;
	int cur_l = 0, cur_u = 0;
	String_patch p;
	int n_active = 0;

	// Init result string.
	memset(result_str, '0', n);
	result_str[n] = 0;

	// Construct and sort lower and upper limits per answer.
	for(int i = 0; i < n; i++){
		l.push_back(std::make_pair(r[i].l, i));
		u.push_back(std::make_pair(r[i].u, i));
	}
	std::sort(l.begin(), l.end());
	std::sort(u.begin(), u.end());
	l.push_back(std::make_pair(MAX_N+1, -1)); // Sentinel.
	u.push_back(std::make_pair(MAX_N+1, -1)); // Sentinel.

	// Main loop.
	for(int i = 0; i <= n; i++){
		while(l[cur_l].first <= i){
			p.add_set(l[cur_l].second);
			cur_l++;
			n_active++;
		}
		while(u[cur_u].first < i){
			p.add_clear(u[cur_u].second);
			cur_u++;
			n_active--;
		}

		if(n_active == i){
			if(n_solutions == 0){
				p.apply(result_str);
			}
			else if(p.decreases_cost()){
				p.apply(result_str);
			}
			n_solutions++;
		}
	}

	return n_solutions;
}

int brute_force(int n, range_t *r, char *best)
{
	int n_solutions = 0;
	char cur[50001];
	memset(best, '1', n);
	for(int i = 0; i <= n; i++){
		int n_ones = make_bitstring(i, n, r, cur);
		if(n_ones == i){
			n_solutions++;
			if(memcmp(cur, best, n) < 0){
				memcpy(best, cur, n);
			}
		}
	}
	best[n] = 0;
	return n_solutions;
}

void run_test()
{
	range_t r[MAX_N];
	char str[MAX_N+1];
	int n;

	scanf("%i", &n);
	for(int i = 0; i < n; i++){
		scanf("%i %i", &r[i].l, &r[i].u);
	}

	int n_solutions = find_solution(n, r, str);
#ifndef ONLINE_JUDGE
	/* Verify with brute force solver */
	char str2[MAX_N+1];
	int n_solutions2 = brute_force(n, r, str2);
	assert(n_solutions == n_solutions2);
	if(n_solutions){
		if(0 != strcmp(str, str2)){
			printf("brute: %s\n", str2);
			printf("solve: %s\n", str);
		}
		for(int i = 0; i < n; i++){
			if(str[i] != str2[i]){
				printf("Differs at: %d\n", i);
			}
		}
	}
#endif

	printf("%i\n", n_solutions);
	puts(str);
}

int main(int argc, char **argv)
{
	int n_test, i;

#ifndef ONLINE_JUDGE
	freopen("byteisle_big.in","r",stdin);
#endif

	scanf("%i", &n_test);
	for(i = 0; i < n_test; i++){
		run_test();
	}
	return 0;
}
