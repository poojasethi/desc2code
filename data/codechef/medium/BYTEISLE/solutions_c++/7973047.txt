#include<bits/stdc++.h>
using namespace std;
#define ll  int
#define in(a)  cin>>a
#define out(a)  cout<<a
#define br cout<<endl
#define loop(i,k,n) for(int i=k;i<n;i++)
#define loopr(i,k,n) for(int i=k;i>=n;i--)
#define max(a,b) ( a>b ? a : b )
#define min(a,b) ( a>b ? b : a )
#define arrin(arrname,size) loop(i,0,size) cin>>arrname[i]
#define fastinput ios_base::sync_with_stdio(false)
#define mapiter(mymap,it) for(it=mymap.begin();it!=mymap.end();it++)
#define gc getchar_unlocked
#define MAXL 1000006
void scnum(ll &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
 
 }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ll arr[MAXL];
ll ai[MAXL];
ll bi[MAXL];
ll pos[MAXL];
ll neg[MAXL];
ll sc[MAXL];
ll l[MAXL];
ll r[MAXL];
bool lazy[MAXL];
ll val[MAXL];
char res[MAXL];

void make_tree(ll ind,ll a, ll b)
{
    l[ind]=a;
    r[ind]=b;
    lazy[ind]=0;
   if(a==b)
   { val[ind]=(sc[a]==a); return ;}
   
   ll mid=a+((b-a)/2);
   make_tree(2*ind+1,a,mid);
   make_tree(2*ind+2,mid+1,b);
   val[ind]= (val[2*ind+1]+val[2*ind+2]);
}


void check_lazy(ll ind)
{   
    ll a=l[ind];
    ll b=r[ind];
    if(lazy[ind])
    {
       val[ind]=0;
       if(a!=b)
        {
           lazy[2*ind+1]=1;
           lazy[2*ind+2]=1;
        }
       lazy[ind]=0;
    }
}

ll query(ll ql,ll qr,ll ind)
{
    ll a=l[ind];
    ll b=r[ind];
   
   if(ql > b || qr < a)
     return 0;

    check_lazy(ind);

    if(a>=ql && b<=qr)
    return val[ind];
    
    
     return query(ql,qr,2*ind+1)+query(ql,qr,2*ind+2);
    
}

void update(ll ql,ll qr,ll ind)
{
    ll a=l[ind];
    ll b=r[ind];
    
    check_lazy(ind);

    if(ql>b || qr < a)
     return ;

   if(a>=ql && b<=qr)
     {
         val[ind]=0;
         if(a!=b)
         {
            lazy[2*ind+1]=1;
            lazy[2*ind+2]=1;
         }
         return ;
     }

 
  update(ql,qr,2*ind+1);
  update(ql,qr,2*ind+2);
  val[ind]=(val[2*ind+1]+val[2*ind+2]);
  
}


int main()
{fastinput;
  ll t;
  scnum(t);
  while(t--)
  {
      
    ll n;
 
    scnum(n);
    loop(i,0,n+2)
     {sc[i]=0;}

    loop(i,0,n)   
      {
        scnum(ai[i]); scnum(bi[i]);
        sc[ai[i]]++;
        sc[bi[i]+1]--;
      }

   ll ct=0;
    loop(i,0,n+1)
     {
        if(i)
         sc[i]=sc[i-1]+sc[i];
        if(sc[i]==i)
        ct++;
      // cout<<sc[i]<<endl;
     }

    
    printf("%d\n",ct);

    make_tree(0,0,n);
    
    loop(i,0,n)
    {  
       if(query(ai[i],bi[i],0)!=val[0])
        {  res[i]='0';
           update(ai[i],bi[i],0);
        }
       else
           res[i]='1';
      // 
    }  
    
     res[n]='\0';
     puts(res);
    // br;
    
  }
  return 0;
}
