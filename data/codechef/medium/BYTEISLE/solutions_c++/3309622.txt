#include<stdio.h>
#include<iostream>
#include<cstring>
#define N 1000000007
#define M 60001
#ifndef ONLINE_JUDGE
#include<conio.h>
#endif
int arr[M],a[M],b[M],tree[4*M],dirty[4*M];


int val(int j,int low,int high)
{return (dirty[j]?(0):(tree[j]));}





void insert(int j,int low,int high,int i)
{if(low==high)
{tree[j]=1;return;}
int mid=(low+high)/2;
tree[j]+=1;
if(i>mid)
insert(2*j+2,mid+1,high,i);
else
insert(2*j+1,low,mid,i);    
}

void update(int low,int high,int l,int h,int j)
{int mid=(low+high)/2;
/*if(low==high){tree[j]=0;return;}
if(val<=mid)
{update(low,mid,val,2*j+1);tree[j]=tree[2*j+2]+tree[2*j+1];}
else
{update(mid+1,high,val,2*j+2);tree[j]=tree[2*j+2]+tree[2*j+1];}
*/
if((low==l)&&(high==h)){
    dirty[j]=1;         
return;}

if(dirty[j]==1)
{
dirty[j]=0;
if(low!=high){
dirty[2*j+1]=1;
dirty[2*j+2]=1;

}
            
}

//int mid=(low+high)/2;
if((l<=mid)&&(h<=mid))
{update(low,mid,l,h,2*j+1);tree[j]=val(2*j+1,low,mid)+val(2*j+2,mid+1,high);}

else if((l>mid)&&(h>mid))
{update(mid+1,high,l,h,2*j+2);tree[j]=val(2*j+1,low,mid)+val(2*j+2,mid+1,high);}
else
{
    update(low,mid,l,mid,2*j+1);
    update(mid+1,high,mid+1,h,2*j+2);
    tree[j]=val(2*j+1,low,mid)+val(2*j+2,mid+1,high);
}





     
}

/*void update(int low,int high,int l,int h,int j)
{
if((low==l)&&(high==h)){dirty[j]=1;return;}
int mid=(low+high)/2;
if((l<=mid)&&(h<=mid))
{update(low,mid,l,h,2*j+1);tree[j]=tree[2*j+2];}

else if((l>mid)&&(h>mid))
{update(mid+1,high,l,h,2*j+2);tree[j]=tree[2*j+1];}
else
{
    update(low,mid,l,mid,2*j+1);
    update(mid+1,high,mid+1,h,2*j+2);
    tree[j]=tree[2*j+2]+tree[2*j+1];
}}*/

int query(int low,int high,int l,int h,int j)
{
 int r;   
if((low==l)&&(high==h)){return val(j,low,high);}
if(dirty[j]==1)
{
dirty[j]=0;
if(low!=high){
dirty[2*j+1]=1;
dirty[2*j+2]=1;
}                
}
int mid=(low+high)/2;
if((l<=mid)&&(h<=mid))
{ r= query(low,mid,l,h,2*j+1);

}

else if((l>mid)&&(h>mid))
{ r= query(mid+1,high,l,h,2*j+2);}
else
{
 r=(query(low,mid,l,mid,2*j+1)
    +query(mid+1,high,mid+1,h,2*j+2));
   
}
tree[j]=val(2*j+1,low,mid)+val(2*j+2,mid+1,high);
return r;
}





int main()
{int t,sol,n,sum,flag,m=0,aa,final,lw,up;long count;
#ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin);
#endif
scanf("%d",&t);
while(t--)
{sum=0;count=0;flag=0;m=0;
memset(arr,0,sizeof(int)*M);
memset(tree,0,sizeof(int)*4*M);
memset(dirty,0,sizeof(int)*4*M);
scanf("%d",&n);
   
for(int i=0;i<n;++i)
{scanf("%d%d",&a[i],&b[i]);
//if(m<b[i]){m=b[i];

arr[a[i]]++;arr[b[i]+1]--;        
} 
for(int i=0;i<=n;++i)
{
sum+=arr[i];
if(sum==i)
{count++;
insert(0,0,n,i);          
}        
}

printf("%ld\n",count%N);
//for(int i=0;i<7;++i)printf("%d ",tree[i]);printf("\n");
//int sol;
if(count!=0){
for(int i=0;i<n;++i)
{
sol=query(0,n,a[i],b[i],0);
if(sol<tree[0])
{printf("0");
//for(int j=a[i];j<=b[i];++j)
update(0,n,a[i],b[i],0);

}    
else
printf("1");  
//printf("%d\n",tree[0]);  
//for(int i=0;i<9;++i)printf("%d ",tree[i]);printf("\n");
}}
else
{
for(int i=0;i<n;++i)printf("0");    
}
    
    


printf("\n");



 
}//t
#ifndef ONLINE_JUDGE
getch();
#endif
//system("PAUSE");
return 0;
}
