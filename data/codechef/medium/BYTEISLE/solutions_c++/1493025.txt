#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<string>

using namespace std;

#define s(n)					scanf("%d",&n)
#define sl(n) 					scanf("%lld",&n)
#define sf(n) 					scanf("%lf",&n)
#define ss(n) 					scanf("%s",n)
#define INF						(int)1e9
#define LINF					(long long)1e18
#define EPS						1e-9
#define maX(a,b)				((a)>(b)?(a):(b))
#define miN(a,b)				((a)<(b)?(a):(b))
#define abS(x)					((x)<0?-(x):(x))
#define FOR(i,a,b)				for(int i=a;i<b;i++)
#define REP(i,n)				FOR(i,0,n)
#define foreach(v,c)            for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define mp						make_pair
#define FF						first
#define SS						second
#define tri(a,b,c)				mp(a,mp(b,c))
#define XX						first
#define YY						second.first
#define ZZ						second.second
#define pb						push_back
#define fill(a,v) 				memset(a,v,sizeof a)
#define all(x)					x.begin(),x.end()
#define SZ(v)					((int)(v.size()))
#define DREP(a)					sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())
#define debug(args...)			{dbg,args; cerr<<endl;}
#define dline					cerr<<endl	

typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
typedef pair<int,PII> TRI;

typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VII;
typedef vector<PLL> VLL;
typedef vector<TRI> VT;

typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VII> VVII;
typedef vector<VLL> VVLL;
typedef vector<VT> VVT;

typedef pair<int,pair<double,double> > IDD;


void sc(char &c){
	char temp[4];	ss(temp);	
	c=temp[0];
}

struct debugger
{
	template<typename T> debugger& operator , (const T& v)
	{	
		cerr<<v<<" ";	
		return *this;	
	}
} dbg;

LL pow(LL base, LL exp, LL mod){
	if(exp == 0){
		return 1;
	}
	LL result = 1;
	while(exp >= 1 ){
		if(exp % 2 == 1){
			result = (result*base)%mod;
		}
		base = (base*base)%mod;
		exp = exp >> 1;
	}
	return result;
}



/*Main code begins now */


int testnum;
int n;
VII holder;
struct node{
	int s,e,no;
	node* left;
	node* right;
};



node* newNode(int s, int e, int no){

	node *temp = new node;
	temp->s = s;
	temp->e = e;
	temp->no = no;
	temp->left = NULL;
	temp->right = NULL;
	return temp;
}
node *head;
void enter(node *base, PII x){
	if(x.FF == base->s && x.SS == base->e){
		base->no++;
		return;
	}
	int mid = (base->s+base->e)/2;
	if(x.SS <= mid){
		if(base->left == NULL){
			base->left = newNode(base->s,mid,0);
		}
		enter(base->left,x);
	}else if(x.FF > mid){
		if(base->right == NULL){
			base->right = newNode(mid+1,base->e,0);
		}
		enter(base->right,x);
	}else{
		PII a,b;
		a = mp(x.FF,mid);
		b = mp(mid+1,x.SS);
		if(base->left == NULL){
			base->left = newNode(base->s,mid,0);
		}
		if(base->right == NULL){
			base->right = newNode(mid+1,base->e,0);
		}
		enter(base->left,a);
		enter(base->right,b);
	}
}

int findNum(int num, node *base,int sum){
	if(base == NULL){
		return sum;
	}
	sum += base->no;
	if(num <= (base->s+base->e)/2){
		return (findNum(num,base->left,sum));
	}else{
		return (findNum(num,base->right,sum));
	}
}

void preprocess()
{
	head = newNode(0,n,0);
	REP(i,n){
		enter(head,holder[i]);
	}
}

void solve()
{
	set<int> k;

	REP(i,n+1){
		if(findNum(i,head,0) == i){
			k.insert(i);
		}
	}
	printf("%d\n",k.size());
	REP(i,n){
		PII a = holder[i];
		set<int>::iterator itb,ite;
		itb = k.lower_bound(a.FF);
		ite = k.upper_bound(a.SS);
		if(itb == k.begin() && ite == k.end()){
			printf("%d",1);
		}else{
			k.erase(itb,ite);
			printf("%d",0);
		}
	}
	printf("\n");
		
}

bool input()
{
	head = NULL;
	holder.clear();
	n = 0;	
	s(n);
	REP(i,n){
		PII a;
		int x,y;
		s(x),s(y);
		a = mp(x,y);
		holder.pb(a);
	}
	return true;
}


int main()
{
	
	int T; s(T);
	for(testnum=1;testnum<=T;testnum++)
	{
		if(!input()) break;
		preprocess();
		solve();
	}
}
