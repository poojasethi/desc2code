#include <sstream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

// Answers
vector<int> a;
vector<int> b;

// |i| is inside this |solutions| set when |i| equals to the number of knights which said there are i knights (knights[i] == i)
set<int> solutions;

vector<int> diff;

void solveCase(istream& istr, ostream& ostr) {
   int numPeople = 0;
   istr >> numPeople;

   // Read solutions from stream
   a.resize(numPeople);
   b.resize(numPeople);
   for (int i = 0; i < numPeople; ++i) {
      istr >> a[i] >> b[i];
   }

   // Build diff array
   diff.resize(numPeople + 2);
   std::fill(diff.begin(), diff.end(), 0);
   for (int i = 0; i < numPeople; ++i) {
      ++diff[a[i]];
      --diff[b[i] + 1];
   }

   // Find solutions
   solutions.clear();
   int val = 0;
   for (int i = 0; i <= numPeople; ++i) {
      val += diff[i];
      if (val == i) {
         solutions.insert(i);
      }
   }

   ostr << solutions.size() << endl;

   // Find the first solution lexicographically
   int min = solutions.empty() ? 0 : *solutions.begin();
   int max = solutions.empty() ? 0 : *solutions.rbegin();
   for (int i = 0; i < numPeople; ++i) {
      if (solutions.empty()) {
         ostr << "0";
         continue;
      }

      if (a[i] <= min && max <= b[i]) {
         // All possible solution are within the answer this bytelandian gave
         ostr << "1";
      } else {
         solutions.erase(solutions.lower_bound(a[i]), solutions.upper_bound(b[i]));
         min = *solutions.begin();
         max = *solutions.rbegin();
         ostr << "0";
      }
   }
   ostr << endl;
}

void Solve(istream& istr, ostream& ostr) {
   int casesCount = 0;
   istr >> casesCount;
   for (int i = 0; i < casesCount; ++i) {
      solveCase(istr, ostr);
   }
}

int main()
{
   /*
   string test01 = 
      "3\n"

      "1\n"
      "0 1\n"

      "4\n"
      "1 4\n"
      "2 4\n"
      "3 4\n"
      "4 4\n"

      "3\n"
      "1 2\n"
      "0 0\n"
      "1 3\n";
   */
   /*
   1
   1
   5
   0000
   1
   101
   */

   /*
   string expected01 = 
      "1\n1";

   stringstream result;
   Solve(stringstream(test01), result);
   expected01 = result.str();
   */
   Solve(cin, cout);
   return 0;
}

