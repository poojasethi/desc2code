#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<sstream>
#include<bitset>
#include<vector>
#include<algorithm>

using namespace std;
typedef vector<int> vi;
#define pb push_back
#define REP(i,a,b)\
    for(int(i)=int(a);i<=int(b);i++)
#define REPMIN(i,a,b) \
    for(int(i)=int(a);i>=int(b);i--)
#define REPC(i,a,b,c)\
    for(int(i)=int(a);i<=int(b);i+=int(c))

vi primes;
bitset<55> bs;
void sieve(){
    bs.reset();
    bs.flip();
    bs.set(0,false);
    bs.set(1,false);
    REP(i,2,54){
        if(bs.test(i)){
            REPC(j,i*i,54,i)
                bs.set(j,false);
        }
        primes.pb(i);
    }
}

int ip[55][55],leftc[55][55],rightc[55][55],top[55][55],down[55][55];
int main(){
    int T,R,C,totalcount,val;
    string line,input;
    bool flag;
    sieve();
    scanf("%d",&T);
    while(T--){
        scanf("%d",&R);
        scanf("%d",&C);
        getline(cin,line);
        REP(i,0,R-1){
//            getline(cin,line);
//            stringstream ss(line);
            REP(j,0,C-1){
//                ss >> input;
//                cout<<input<<" ";
//                ip[i][j]=atoi(input.c_str());
                ip[i][j]=getchar();
//                cout<<ip[i][j]<<" ";
                leftc[i][j]=0;
                rightc[i][j]=0;
                top[i][j]=0;
                down[i][j]=0;
//                printf("%d ",ip[i][j]);
            }
//            printf("\n");
            getline(cin,line);
        }
        REP(i,0,C-1){
            if(ip[0][i]=='#')
                top[0][i]=-1;
            if(ip[R-1][i]=='#')
                down[R-1][i]=-1;
        }
        REP(i,0,R-1){
            if(ip[i][0]=='#')
                leftc[i][0]=-1;
            if(ip[i][C-1]=='#')
                rightc[i][C-1]=-1;
        }
        REP(i,0,R-1){
            REP(j,1,C-1){
                if(ip[i][j]=='^')
                    leftc[i][j]=leftc[i][j-1]+1;                     
                else
                    leftc[i][j]=-1;
                    
//                printf("%d ",leftc[i][j]);
            }
//            printf("\n");
        }
        REP(i,0,C-1){
            REP(j,1,R-1){
                if(ip[j][i]=='^')
                    top[j][i]=top[j-1][i]+1;
                else
                    top[j][i]=-1;
//                printf("%d ",top[i][j]);
            }
//            printf("\n");
        }
        REP(i,0,R-1){
            REPMIN(j,C-2,0){
                if(ip[i][j]=='^')
                    rightc[i][j]=rightc[i][j+1]+1;
                else
                    rightc[i][j]=-1;
//                printf("%d ",rightc[i][j]);
            }
//            printf("\n");
        }
        REP(i,0,C-1){
            REPMIN(j,R-2,0){
                if(ip[j][i]=='^')
                    down[j][i]=down[j+1][i]+1;
                else
                    down[j][i]=-1;
//                printf("%d ",down[i][j]);
            }
//            printf("\n");
        }
        totalcount = 0;
        REP(i,0,R-1){
            REP(j,0,C-1){
                flag = false;
                if(ip[i][j]=='^'){
                    val = min(min(leftc[i][j],rightc[i][j]),min(top[i][j],down[i][j]));
//                    cout<<val<<" ";
                    REP(k,0,primes.size()-1){
                        if(primes[k]>val)
                            break;
                        else
                            flag = true;
                    }
                }
                if(flag)
                    totalcount++;
            }
//            cout<<endl;
//            if(flag)
//                totalcount++;
        }
        printf("%d\n",totalcount);
    }
    return 0;
}
