#include<iostream>
#define N 51
using namespace std;
bool prime[N];
char grid[51][51];
int minn(int a,int b ,int c , int d)
{
    int minnn=a;
    if(b<minnn) minnn=b;
    if(c<minnn) minnn=c;
    if(d<minnn) minnn=d;
        return minnn;
}
void fill_prime(void)
{
    prime[0]=false;
    prime[1]=false;
    for(int i=2;i<N;++i) prime[i]=true;
    for(int i=2;i<N;++i)
    {
        if(prime[i]==true)
        {
            for(int j=2*i;j<N;j+=i)
            {
                prime[i]=false;
            }
        }
    }
}
int countleft(int i , int j)
{
    int cnt=0;
    while(i>=1)
    {
        if(grid[i][j]=='^' && grid[i][j-1]=='^') {cnt++;
        j=j-1;}
        else break;
    }
    return cnt;
}
int countright(int i , int j,int c)
{
    int cnt=0;
    while(j<c-1)
    {
        if(grid[i][j]=='^' && grid[i][j+1]=='^') {cnt++;
        j+=1;}
        else break;
    }
    return cnt;
}
int counttop(int i , int j)
{
    int cnt=0;
    while(i>=1)
    {
        if(grid[i-1][j]=='^' && grid[i][j]=='^')
        {cnt++;
        i=i-1;}
        else break;
    }
    return cnt;
}
int countbottom(int i , int j,int r)
{
    int cnt=0;
    while(i<r-1)
    {
        if(grid[i+1][j]=='^' && grid[i][j]=='^'){ cnt++;
        i+=1;}
        else break;
    }
    return cnt;
}
bool isPrime(int n)
{
    for(int i=0;i<N;++i)
    {
        if (prime[i]<=n) return true;
    }
    return false;
}
int main()
{
    fill_prime();
    int cas,row,c,cnt;
    int l,r,t,b;

    char cpc[51][51];
    cin>>cas;
    while(cas--)
    {
        cnt=0;
        cin>>row>>c;
        l=r=t=b=0;
        for(int i=0;i<row;++i)
        {
            for(int j=0;j<c;++j)
               {
                   cin>>grid[i][j];
                   cpc[i][j]=0;
               }
        }
        for(int i=2;i<row-2;++i)
        {
            for(int j=2;j<c-2;++j)
            {
                l=countleft(i,j);
                r=countright(i,j,c);
                b=countbottom(i,j,row);
                t=counttop(i,j);
                cpc[i][j]=minn(l,b,r,t);
            }
        }
        for(int i=2;i<row-2;++i)
        {
            for(int j=2;j<c-2;++j)
            {
                if(isPrime(cpc[i][j]) && (cpc[i][j]>1)) cnt++;
            }
        }
        cout<<cnt<<endl;




    }
}
