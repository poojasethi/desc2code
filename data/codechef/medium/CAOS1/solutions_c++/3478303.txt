#include <algorithm>
#include <cctype>
#include <cstdio>
#include <cstring>
#include <functional>
#include <iostream>
#include <unistd.h>
#include <utility>
#include <vector>
#include <map>

#define getw getchar_unlocked
#define iterate(n) for(int i=0;i<n;i++)
#define d_iterate(p,q) for(int i=p;i<=q;i++)
#define r_iterate(n,z) for(int i=n-1;i>=n-z;i--) /* z number of elements to the left of n */
#define p(n) printf("%d\n",n);
#define get(n) n = scan2();
// #define sort(k,q) qsort(k,q,sizeof(*k),comp);
#define print_array(k,n) iterate(n){ p(k[i]);}
#define ps(s) printf("%s\n",s);
#define repeat(n) for (int i = (0); i < n; i++)
#define ZERO(v) memset((v), 0, sizeof (v))
#define ALL(x) (x).begin(), (x).end()
#define mp make_pair;
#define pb push_back;
// int comp(const void *e1,const void *e2){ return *((const lld *)e1) - *((const lld *)e2);}

typedef unsigned long long int lld;
typedef unsigned long int ld;
using namespace std;

inline lld scan2(){
	lld n=0,s=1;
	char p=getw();
	if(p=='-') s=-1;
	while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=getw();
	if(p=='-') s=-1,p=getw();
	while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=getw(); }
	return n*s;
}






//Calculating exact values of l,r,t,b











// int solve(){
// 	//this method will have all the inputs for a single test case
// 	int rows,cols;
// 	string str[51];
// 	get(rows);
// 	get(cols);

// 	iterate(rows){
// 		cin >> str[i];
// 	}
// 	int i,j,k;
// 	int monstercount = 0;
// 	for(i=2;i<rows-2;i++){
// 		for(j=2;j<cols-2;j++){

// 			// cout << str[i][j];

// 			if(str[i][j] == '^'){
// 				//checking for left maximum consequetive "^"

// 				int p,q;
// 				int lflag = 0;
// 				int rflag = 0;
// 				int tflag = 0;
// 				int bflag = 0;
// 				for(p = j-1;p>=1;p--){
// 					if(str[i][p] == '^' && str[i][p-1] == '^'){
// 						lflag = 1;
// 						break;
// 					}
// 				}
// 				if(lflag == 0)
// 					continue;

// 				//checking for right

// 				for(p=j+1;p<=cols-1;p++){
// 					if(str[i][p] == '^' && str[i][p+1] == '^'){
// 						rflag = 1;
// 						break;
// 					}
// 				}
// 				if(rflag == 0)
// 					continue;
// 				// checking for top


// 				for(q = i-1;q>=1;q--){
// 					if(str[q][j] == '^' && str[q-1][j] == '^'){
// 						tflag = 1;
// 						break;
// 					}
// 				}
// 				if(tflag == 0)
// 					continue;


// 				for(q=i+1;q<=rows-1;q++){
// 					if(str[q][j] == '^' && str[q+1][j] == '^'){
// 						bflag = 1;
// 						break;
// 					}
// 				}
// 				if(bflag == 0)
// 					continue;


// 				if( (lflag == 1) && (rflag == 1) && (tflag == 1) && (bflag == 1)){
// 					monstercount++;
// 					// printf("i = %d ,j = %d\n",i,j);
// 				}

// 			}
// 		}
// 	}

// 	return monstercount;


// }



int solve(){
//this method will have all the inputs for a single test case
	int rows,cols;
	string str[51];
	get(rows);
	get(cols);

	iterate(rows){
		cin >> str[i];
	}

	int i,j;
	int monstercount = 0;
	for(i=2;i<=rows-2;i++ ){
		for(j=2;j<=cols-2;j++){
			if(str[i][j] == '^'){
			
				if(
					str[i-1][j] == '^' &&
					str[i-2][j] == '^' &&
					str[i+1][j] == '^' &&
					str[i+2][j] == '^' &&
					str[i][j-1] == '^' &&
					str[i][j-2] == '^' &&
					str[i][j+1] == '^' &&
					str[i][j+2] == '^'
					)
					monstercount++;
			
			}
		}
	}

	return monstercount;

}


int main(){
	lld i,z,n,j,k,t,h,ans = 0;

	get(t);
	while(t--){
			p(solve());

	}

	return 0;
}
 
 