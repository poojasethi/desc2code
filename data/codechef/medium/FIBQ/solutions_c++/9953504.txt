#include <bits/stdc++.h>
#define gc getchar_unlocked
#define ll long long
const int M = 1000000007;
const int N = 100001;
void addI(ll A[2][2]){
  A[0][0]= (A[0][0] + 1) % M; A[1][1]= (A[1][1] + 1) % M;
}
void matrixeq(ll A[2][2], ll B[2][2]){
  A[0][0]=B[0][0], A[1][0]=B[1][0], A[0][1]=B[0][1], A[1][1]=B[1][1];
}
void multiply(ll A[2][2], ll B[2][2], char ch='R'){
  if(ch=='L'){
    ll T[2][2];
    matrixeq(T,B); multiply(T,A); matrixeq(A,T);
    return;
  }
  ll x =  A[0][0] * B[0][0] % M + A[0][1] * B[1][0] % M;
  ll y =  A[0][0] * B[0][1] % M + A[0][1] * B[1][1] % M;
  ll z =  A[1][0] * B[0][0] % M + A[1][1] * B[1][0] % M;
  ll w =  A[1][0] * B[0][1] % M + A[1][1] * B[1][1] % M;
  A[0][0] = x%M;
  A[0][1] = y%M;
  A[1][0] = z%M;
  A[1][1] = w%M;
}
void power(ll A[2][2], ll n){
  ll R[2][2]={{1,0},{0,1}};
  while(n){
    if(n&1) multiply(R,A);
    multiply(A,A);
    n>>=1;
  }
  matrixeq(A,R);
}
void scan(int *n){
    register int c; *n=0;
    while((c=gc())<=' ');
    if(c=='-') {scan(n); *n = -*n; return;}
    for(; c>' '; c=gc()) 
    *n = (*n<<1) + (*n<<3) + c - '0';
}
void scan(long long *n){
    register int c; *n=0;
    while((c=gc())<=' '); if(c=='-') {scan(n), *n = -*n; return;}
    for(; c>' '; c=gc())
    *n = (*n<<1) + (*n<<3) + c - '0';
}
ll I[2][2]={{1,0},{0,1}};
ll F[2][2]={{1,1},{1,0}};
ll tree[N<<2][2][2];
void build(int L,int R,int v){
    if(L == R){
        ll x;
        scan(&x);
        matrixeq(tree[v],F);
        power(tree[v],x);
        addI(tree[v]);
        return;
    }
    int mid = (L + R)>>1;
    build(L,mid,v<<1);
    build(mid+1,R,v<<1|1);
 
    matrixeq(tree[v],tree[v<<1]);
    multiply(tree[v],tree[v<<1|1]);
}
void update(int L,int R,int lt,int rt,ll val,int v){
    if(lt <= L && rt >= R) {
        matrixeq(tree[v],F);
        power(tree[v],val);
        addI(tree[v]);
        return;
    }
    int mid = (L + R)>>1;
    if(lt <= mid) update(L,mid,lt,rt,val,v<<1);
    if(rt > mid) update(mid+1,R,lt,rt,val,v<<1|1);
    
    matrixeq(tree[v],tree[v<<1]);
    multiply(tree[v],tree[v<<1|1]);
}
void query(int L,int R,int lt,int rt,int v, ll A[2][2], char ch='R'){
    if(lt <= L && rt >= R) {
        multiply(A,tree[v],ch);
        return;
    }
    int mid = (L + R)>>1;
    if(lt <= mid) query(L,mid,lt,rt,v<<1,A,'L');
    if(rt > mid) query(mid+1,R,lt,rt,v<<1|1,A,'R');
}
int main(){
  int n,q,a; ll b, R[2][2]; char ch;
  scan(&n); scan(&q);  
  build(1,n,1);
  while(q--){
    scanf(" %c",&ch); scan(&a); scan(&b);
    if(ch=='Q') {
        matrixeq(R,I);
        query(1,n,a,b,1,R);
        printf("%lld\n",R[0][1]);
    }
    if(ch=='C') {
        update(1,n,a,a,b,1);
    }
  }
  return 0;    
}  