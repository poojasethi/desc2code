#include<bits/stdc++.h>
using namespace std;
#define D 1000000007
#define pb push_back
#define mp make_pair
#define maxn 100010
//Algo- Segment tree+ Fibonacci properties
int n,gl_idx;
vector<int> arr;
int segtree[3][4*maxn];
pair<long long,long long> temp;
pair<int, pair<int,int> > idx[4*maxn];
 
inline int inp()
{
    register int r=0,c;
    for(c=getchar_unlocked(); c<=32; c=getchar_unlocked());
    if(c=='-')
        return -inp();
    for(; c>32; r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
    return r;
}
void nthfib(int n,pair<long long,long long>& ans)
{
    long long a,b,c,d;
    if(n == 0)
    {
        ans.first=0; ans.second=1;
        return;
    }
    nthfib(n>>1,ans);
    a = ans.first; b=ans.second;
    c = 2*b - a;
    if(c < 0)
        c += D;
    c=(a * c)%D; d = (a*a + b*b)%D;
 
    if(n&1)
    {
      ans.first=d; ans.second=c+d;
    }
    else
    {
       ans.first=c; ans.second=d;
    }
}
 
void updatetree(int node, int st, int en, int idx, int val)
{
    if(st == en)
    {
       temp.first=0; temp.second=0;
       nthfib(val-1,temp);
       segtree[0][node]=temp.first;
 
       temp.first=0; temp.second=0;
       nthfib(val,temp);
       segtree[1][node]=temp.first;
 
       segtree[2][node] = (segtree[0][node]+segtree[1][node])%D;  // No need to calculate this
    }
    else
    {
        int mid = (st + en)>>1;
        if(st <= idx and idx <= mid)
        {
            updatetree(2*node, st, mid, idx, val);
        }
        else
        {
            updatetree(2*node+1, mid+1, en, idx, val);
        }
        //Formula
        segtree[0][node] = (1LL*(1+segtree[0][2*node])*(1+segtree[0][2*node+1])-1+1LL*segtree[1][2*node+1]*segtree[1][2*node]+D)%D;
        segtree[1][node] = (1LL*segtree[1][2*node+1]*(1+segtree[0][2*node]) + 1LL*segtree[1][2*node]*(1+segtree[2][2*node+1]))%D;
        segtree[2][node] = (segtree[0][node]+segtree[1][node])%D;   // No need to calculate this
    }
}
 
 
int query(int node, int st, int en, int l, int r)
{
    gl_idx++;
    int temp_idx=gl_idx;
 
    if(r < st or en < l)
    {
        idx[temp_idx]=mp(-1,mp(-1,-1));
        return temp_idx;
    }
    if(l <= st and en <= r)
    {
        idx[temp_idx]=mp(segtree[0][node],mp(segtree[1][node],segtree[2][node]));
        return temp_idx;
    }
    int mid = (st+ en)>>1;
    int i1 = query(2*node, st, mid, l, r);
    int i2 = query(2*node+1, mid+1, en, l, r);
    //Three cases
    if(idx[i1].first==-1)
    idx[temp_idx]=idx[i2];
 
    else if(idx[i2].first==-1)
    idx[temp_idx]=idx[i1];
    else
    {
	    idx[temp_idx].first =  (1LL*(1+idx[i1].first)*(1+idx[i2].first)-1+1LL*idx[i1].second.first*idx[i2].second.first+D)%D;
	    idx[temp_idx].second.first =  (1LL*idx[i2].second.first*(1+idx[i1].first)+1LL*idx[i1].second.first*(1+idx[i2].second.second))%D;
	    idx[temp_idx].second.second = (idx[temp_idx].first+idx[temp_idx].second.first)%D;  // No need to calculate this
    }
    return temp_idx;
}
 
void buildtree(int node, int st, int en)
{
    if(st==en)
    {
       temp.first=0; temp.second=0;
       nthfib(arr[st]-1,temp);
       segtree[0][node]=temp.first;
 
       temp.first=0; temp.second=0;
       nthfib(arr[st],temp);
       segtree[1][node]=temp.first;
 
       segtree[2][node] = (segtree[0][node]+segtree[1][node])%D;  // No need to calculate this
    }
    else
    {
        int mid = (st + en)>>1;
        buildtree(2*node, st, mid);
        buildtree(2*node+1, mid+1, en);
        //Formula
        segtree[0][node] = (1LL*(1+segtree[0][2*node])*(1+segtree[0][2*node+1])-1+1LL*segtree[1][2*node+1]*segtree[1][2*node]+D)%D;
        segtree[1][node] = (1LL*segtree[1][2*node+1]*(1+segtree[0][2*node]) + 1LL*segtree[1][2*node]*(1+segtree[2][2*node+1]))%D;
        segtree[2][node] = (segtree[0][node]+segtree[1][node])%D;   // No need to calculate this
    }
}
 
int main()
{
    int m,x,i,ii,y,l,r;
	char ch;
	n=inp(); m=inp();
 
	for(i=0;i<n;i++)
	{
		x=inp();
		arr.pb(x);
	}
     //Its time to build the tree
     buildtree(1,0,n-1);
 
	for(i=0;i<m;i++)
	{
		ch=getchar_unlocked();
 
		if(ch=='C')
		{
			ii=inp(); y=inp();
			ii--;
 
			updatetree(1,0,n-1,ii,y);
		}
		else
		{
			gl_idx=0;
			l=inp(); r=inp();
			l--,r--;
           printf("%d\n",idx[query(1,0,n-1,l,r)].second.first);
		}
	}
}
 