#include <bits/stdc++.h>
#define lli long long
#define M 1000000007
#define MAX 100005

using namespace std;

int B[MAX];

struct matrix {
	lli	P[2][2];
	
	matrix operator * (const matrix &A) {
		matrix answer;
		for ( int i = 0; i < 2; i++ ) {
			for ( int j = 0; j < 2; j++ ) {
				answer.P[i][j] = 0;
				for ( int k = 0; k < 2; k++ ) {
					answer.P[i][j] += (A.P[i][k]*P[k][j])%M;
					if ( answer.P[i][j] >= M ) answer.P[i][j] -= M;
				}
			}
		}
		return answer;
	}
	
	matrix operator + (const matrix &A) {
		matrix answer;
		for ( int i = 0; i < 2; i++ ) {
			for ( int j = 0; j < 2; j++ ) {
				answer.P[i][j] = A.P[i][j] + P[i][j];
				if ( answer.P[i][j] >= M ) answer.P[i][j] -= M;
			}
		}
		return answer;
	}
	
}tree[4*MAX], identity, null, fib;

void init()
{
	for ( int i = 0; i < 2; i++ ) {
		for ( int j = 0; j < 2; j++ ) {
			null.P[i][j] = 0;
			fib.P[i][j] = 1;
			if ( i == j ) identity.P[i][j] = 1;
			else identity.P[i][j] = 0;
		}
	}
	fib.P[1][1] = 0;
	return;
}

matrix fast_pow(int x)
{
	matrix res = identity, A = fib;
		
	while ( x > 0 ) {
		if ( x & 1 ) res = (res * A);
		A = (A * A);
		x >>= 1;
	}
	return res;
}

matrix combine(matrix A, matrix B)
{
	matrix res = A + B + (A*B);
	return res;
}

void build(int where, int left, int right)
{
	if ( left > right ) return;
	if ( left == right ) {
		tree[where] = fast_pow(B[left]);
		return;
	}
	int mid = (left + right)/2;
	build(where*2, left, mid);
	build(where*2 + 1, mid + 1, right);
	tree[where] = combine(tree[where*2], tree[where*2 + 1]);
}

void update(int where, int left, int right, int idx, matrix A)
{
	if ( left > right || left > idx || right < idx ) return;
	if ( left == right ) {
		tree[where] = A;
		return;
	}
	int mid = (left + right)/2;
	update(where*2, left, mid, idx, A);
	update(where*2 + 1, mid + 1, right, idx, A);
	tree[where] = combine(tree[where*2], tree[where*2 + 1]);
}

matrix query(int where, int left, int right, int i, int j)
{
	if ( left > right || left > j || right < i ) return null;
	if ( left >= i && right <= j ) return tree[where];
	int mid = (left + right)/2;
	return combine(query(where*2, left, mid, i, j), query(where*2 + 1, mid + 1, right, i, j));
}

int main()
{
	int n,m,x,y;
	char c;
	init();
	
	cin >> n >> m;
	for ( int i = 0; i < n; i++ ) cin >> B[i];
	
	build(1, 0, n - 1);
	
	while ( m-- ) {
		cin >> c >> x >> y;	
		if ( c == 'Q' ) {
			matrix ans = query(1, 0, n - 1, x - 1, y - 1);
			cout << ans.P[1][0] << endl;
		}
		else update(1, 0, n - 1, x - 1, fast_pow(y));
		
	}
	return 0;
}
