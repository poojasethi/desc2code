#include <stdio.h>
#include <iostream>
#include <cmath>
#include <vector>
#include <stdlib.h>
#include <string>
using namespace std;



//constructs DP solution
int max_score(int***array, int N)
{
	int D[N][N];
    D[0][0] = (*array)[0][0];

    for(int i = 1; i < N; ++i)
		D[i][0] = D[i-1][0]+(*array)[i][0];

    for(int i = 1; i < N; ++i)
		D[0][i] = D[0][i-1]+(*array)[0][i];

    for(int i = 1; i < N; ++i)
	{
		for(int j = 1; j < N; ++j)
		{
			D[i][j] = max(D[i-1][j], D[i][j-1]) + (*array)[i][j];
			//printf("%d ",D[i][j]);
		}
		//printf("\n");
    }
    return D[N-1][N-1];
}

int main()
{
    int M;
    cin >> M;
    for(int x = 0; x < M; ++x)
    {
		int N;
		cin >> N;
		//allocates memory to matrix
		int** array = (int**)malloc(N*sizeof(int*));
		for(int i = 0; i < N; ++i)
		{
			array[i] = (int*)malloc(N*sizeof(int*));
		}
		for(int x = 0; x < N; ++x)
		{
			for(int y = 0; y < N; ++y)
			{
				int elem;
				cin >> elem;
				array[x][y] = elem;
			}
		}
		if((max_score(&array,N)) >= 0 )
		printf("%.6lf\n",double(max_score(&array,N))/(2*N-3.0));
		else
		printf("Bad Judges\n");
    }
    return 0;
    }
