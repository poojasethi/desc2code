#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random
import bisect


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


# decorator to memoized a function
class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}

    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value

    def __repr__(self):
        return self.func.__doc__

    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


# return distance between start and all other nodes
# uses get_neighbors(start) to get list of neighbors with distances (can be a
# generator)
# e.g: get_neighbors(start) = [(1, 2), (5, 2), (3, 4)] means the neighboards
# or 1, 5, 3 with distances 2, 2 and 4 respectively
# node ids are from 0 to nb_nodes-1
# max path nodes is used to optimize the algo
def bellman_ford(start, end, nb_nodes, get_neighbors, max_path_nodes=None):
    # http://en.wikipedia.org/wiki/Bellman-Ford_algorithm
    MAX_INT = 9999999
    if max_path_nodes is None:
        max_path_nodes = nb_nodes - 1

    # Initialize graph
    weights = [MAX_INT] * nb_nodes
    weights[start] = 0
    #predecessors = [None] * nb_nodes

    # pre compute neighbors
    nb = [(u, v, w) for u in xrange(nb_nodes) for v, w in get_neighbors(u)]

    # relax nodes
    for i in xrange(max_path_nodes):
        for u, v, w in nb:
            if weights[u] + w < weights[v]:
                weights[v] = weights[u] + w

    # check for negative cycles
    #for u in xrange(nb_nodes):
    #    for v, w in nb[u]:
    #        if weights[u] + w < weights[v]:
    #            raise Exception("Negative weight cycle!")

    return weights  # , predecessors


def alg(S):
    N = len(S)
    def get_neighbors(i):
        x, y = divmod(i, N)
        nb = []
        # return negative values because we want the biggest
        if x < N - 1:
            nb.append([(x + 1) * N + y, -S[x + 1][y]])
        if y < N - 1:
            nb.append([x * N + y + 1, -S[x][y + 1]])
        return nb
    w = bellman_ford(0, N * N - 1, N * N, get_neighbors, 2 * N)
    # invert the negation
    sum_ = -w[N * N - 1]
    if sum_ < 0:
        return "Bad Judges"
    else:
        return sum_ / float((N) * 2 - 3)


def alg2(S):
    # pure dp
    # dp(x, y) is max score to go there
    length = len(S)

    @memoized
    def dp(x, y):
        if x == 0:
            if y == 0:
                return 0
            else:
                return dp(x, y - 1) + S[x][y - 1]
        elif y == 0:
            return dp(x - 1, y) + S[x - 1][y]
        else:
            return max(dp(x - 1, y) + S[x - 1][y], dp(x, y - 1) + S[x][y - 1])

    sum_ = dp(length - 1, length - 1)
    if sum_ < 0:
        return "Bad Judges"
    else:
        return sum_ / float(length * 2 - 3)


def alg3(S):
    # go in order
    N = len(S)
    r = [list([None] * N) for i in xrange(N)]

    for x in xrange(N):
        for y in xrange(N):
            if y == 0:
                if x == 0:
                    r[x][y] = 0
                else:
                    r[x][y] = r[x - 1][y] + S[x - 1][y]
            elif x == 0:
                r[x][y] = r[x][y - 1] + S[x][y - 1]
            else:
                r[x][y] = max(r[x - 1][y] + S[x - 1][y], r[x][y - 1] + S[x][y - 1])

    sum_ = r[N - 1][N - 1]
    if sum_ < 0:
        return "Bad Judges"
    else:
        return sum_ / float(N * 2 - 3)


def main():
    #N = 100
    #random.seed(0)
    #T = [list([random.randint(-2500, 2500) for i in xrange(N)]) for i in xrange(N)]
    #T[0][0] = T[N-1][N-1] = 0
    #comp(alg3, alg, T)
    ##import cProfile
    ##cProfile.runctx('alg(T)', globals(), locals())
    ###timed(alg)(T)

    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        N = int(data.readline().strip())
        S = []
        for i in xrange(N):
            S.append(map(int, data.readline().split()))
        #L = map(float, data.readline().split())  # float
        #L = data.readline().split()  # string
        #s = data.readline().strip()
        #i = int(data.readline().strip())
        res = alg3(S)
        print res


if __name__ == "__main__":
    main()
