/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define ff first
#define ss second
#define mkp make_pair
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

#define get getchar_unlocked
/*inline int scan()
{
    int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=get(); }
    return n*s;
}

void print(int X)
{
  if(X<0) { putchar_unlocked('-');  X=-X;  }
  int Len=0,Data[10];
  while(X) { Data[Len++]=X%10; X/=10; }
  if(!Len) Data[Len++]=0;
  while(Len--) putchar_unlocked(Data[Len]+48);
}*/

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}


char a1[20002], a2[20002];
void solve()
{
	int a[15] = {0}, t, i;
	int b[15] = {0};
	int l, u = 0, v = 0, p, q, r, s;
	u = 0; v = 0;
 	scanf("%s", a1);
 	l = strlen(a1);
 	for(i = 0; i < l; i++)
 		a[a1[i] - 48]++;
 	scanf("%s", a2);
 	for(i = 0; i < l; i++)
 		b[a2[i] - 48]++;
 	p = a[7];
 	q = a[4];
 	r = b[7];
 	s = b[4];
 	//increase 7s by seeing 0 to 6 except 4
 	for(i = 6; i >= 0; i--)
 	{
   		while(b[i] > 0 && p > 0 && i != 4)
   		{
    		p--;
    		u++;
    		b[i]--;
   		}
   		while(a[i] > 0 && r > 0 && i != 4)
   		{
    		r--;
    		u++;
    		a[i]--;
   		}
 	}
 	//increase 7 using 4s
 	while(p > 0 && s > 0)
 	{
    	i = 4;
     	p--;
     	b[i]--;
     	u++;
     	s--;
 	}
 	while(r > 0 && q > 0)
 	{
     	i=4;
     	r--;
     	u++;
     	a[i]--;
     	q--;
 	}
 	//new values of 4
 	q = a[4];
 	s = b[4];
 	//increase 7 using 7s
 	while(p > 0 && r > 0)
 	{
     	p--;
     	r--;
     	u++;
 	}
 	//increase 4 using 0 to 3
  	for(i = 3; i >= 0; i--)
 	{
   		while(b[i] > 0 && q > 0)
   		{
    		q--;
    		v++;
    		b[i]--;
   		}
   		while(a[i] > 0 && s > 0)
   		{
    		s--;
    		v++;
    		a[i]--;
   		}
 	}
 	//increase 4 using 4s
 	while(q > 0 && s > 0)
 	{
     	q--;
     	s--;
     	v++;
 	}
  	for(i = 0; i < u; i++)
  		printf("7");
  	for(i = 0; i < v; i++)
 	 	printf("4");
  	pn;
}

int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
