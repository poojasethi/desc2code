#include <iostream>
#include <string>
#include <cmath>
#include <cassert>
#include <algorithm>

using namespace std;

typedef enum {
    LessThan4 = 0,
    EqualTo4,
    Between4And7,
    EqualTo7,
    GreaterThan7,
    DigitTypeSize
} digitType;

void doTest() {
    string A;
    getline(cin, A);
    size_t ALen = A.size();
    //cerr << " A= " << A << " leng = " << ALen << endl;
    string B;
    getline(cin, B);
    size_t BLen = B.size();
    //cerr << " B= " << B << " leng = " << BLen << endl;
    assert(ALen == BLen);
    int ii;

    int ADigTypeCounts[DigitTypeSize];
    int BDigTypeCounts[DigitTypeSize];
    for (ii=LessThan4; ii<DigitTypeSize; ++ii) {
        ADigTypeCounts[ii] = BDigTypeCounts[ii] = 0;
    }
    for (ii=LessThan4; ii<ALen; ++ii) {
        if (A[ii] < '4') {
            ++ADigTypeCounts[LessThan4];
        } else if (A[ii] == '4') {
            ++ADigTypeCounts[EqualTo4];
        } else if (A[ii] < '7') {
            ++ADigTypeCounts[Between4And7];
        } else if (A[ii] == '7') {
            ++ADigTypeCounts[EqualTo7];
        } else {
            ++ADigTypeCounts[GreaterThan7];
        }
        if (B[ii] < '4') {
            ++BDigTypeCounts[LessThan4];
        } else if (B[ii] == '4') {
            ++BDigTypeCounts[EqualTo4];
        } else if (B[ii] < '7') {
            ++BDigTypeCounts[Between4And7];
        } else if (B[ii] == '7') {
            ++BDigTypeCounts[EqualTo7];
        } else {
            ++BDigTypeCounts[GreaterThan7];
        }
    }
    //cerr << " A digit counts: " << endl;
    //for (ii=LessThan4; ii<DigitTypeSize; ++ii) {
    //    cerr << ii << " : " << ADigTypeCounts[ii] << endl;
    //}
    //cerr << " B digit counts: " << endl;
    //for (ii=LessThan4; ii<DigitTypeSize; ++ii) {
    //    cerr << ii << " : " << BDigTypeCounts[ii] << endl;
    //}

    int numSevens=0;
    int numFours=0;
    int currCount;

    // Sevens from A
    currCount = std::min(ADigTypeCounts[EqualTo7], BDigTypeCounts[Between4And7]);
    numSevens+=currCount;
    ADigTypeCounts[EqualTo7] -= currCount;
    BDigTypeCounts[Between4And7] -= currCount;

    currCount = std::min(ADigTypeCounts[EqualTo7], BDigTypeCounts[LessThan4]);
    numSevens+=currCount;
    ADigTypeCounts[EqualTo7] -= currCount;
    BDigTypeCounts[LessThan4] -= currCount;

    currCount = std::min(ADigTypeCounts[EqualTo7], BDigTypeCounts[EqualTo4]);
    numSevens+=currCount;
    ADigTypeCounts[EqualTo7] -= currCount;
    BDigTypeCounts[EqualTo4] -= currCount;

    currCount = std::min(ADigTypeCounts[EqualTo7], BDigTypeCounts[EqualTo7]);
    numSevens+=currCount;
    ADigTypeCounts[EqualTo7] -= currCount;
    BDigTypeCounts[EqualTo7] -= currCount;

    // Sevens from B
    currCount = std::min(BDigTypeCounts[EqualTo7], ADigTypeCounts[Between4And7]);
    numSevens+=currCount;
    BDigTypeCounts[EqualTo7] -= currCount;
    ADigTypeCounts[Between4And7] -= currCount;

    currCount = std::min(BDigTypeCounts[EqualTo7], ADigTypeCounts[LessThan4]);
    numSevens+=currCount;
    BDigTypeCounts[EqualTo7] -= currCount;
    ADigTypeCounts[LessThan4] -= currCount;

    currCount = std::min(BDigTypeCounts[EqualTo7], ADigTypeCounts[EqualTo4]);
    numSevens+=currCount;
    BDigTypeCounts[EqualTo7] -= currCount;
    ADigTypeCounts[EqualTo4] -= currCount;

    currCount = std::min(BDigTypeCounts[EqualTo7], ADigTypeCounts[EqualTo7]);
    numSevens+=currCount;
    BDigTypeCounts[EqualTo7] -= currCount;
    ADigTypeCounts[EqualTo7] -= currCount;

    // Fours from A
    currCount = std::min(ADigTypeCounts[EqualTo4], BDigTypeCounts[LessThan4]);
    numFours+=currCount;
    ADigTypeCounts[EqualTo4] -= currCount;
    BDigTypeCounts[LessThan4] -= currCount;

    currCount = std::min(ADigTypeCounts[EqualTo4], BDigTypeCounts[EqualTo4]);
    numFours+=currCount;
    ADigTypeCounts[EqualTo4] -= currCount;
    BDigTypeCounts[EqualTo4] -= currCount;

    // Fours from B
    currCount = std::min(BDigTypeCounts[EqualTo4], ADigTypeCounts[LessThan4]);
    numFours+=currCount;
    BDigTypeCounts[EqualTo4] -= currCount;
    ADigTypeCounts[LessThan4] -= currCount;

    currCount = std::min(BDigTypeCounts[EqualTo4], ADigTypeCounts[EqualTo4]);
    numFours+=currCount;
    BDigTypeCounts[EqualTo4] -= currCount;
    ADigTypeCounts[EqualTo4] -= currCount;

    //cerr << " numSevens = " << numSevens << " numFours = " << numFours << endl;

    for (ii=0; ii<numSevens; ++ii) {
        cout << "7";
    }
    for (ii=0; ii<numFours; ++ii) {
        cout << "4";
    }
    cout << endl;
}

int main() {
    int T;
    cin >> T;
    string dummy;
    getline(cin, dummy);
    for (int tt=0; tt<T; ++tt) {
        doTest();
    }
    return 0;
}

