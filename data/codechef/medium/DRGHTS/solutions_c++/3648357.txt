#include<stdio.h>
#include<iostream>
#include<vector>
using namespace std;
#define MAX 50005
bool *open,*visited;
vector< vector<int> > v(MAX);
#define int long long
#define in int
bool dfs(int x,int & cnt,int &cnt1) {
    //cout<<x<<" ";
    if(visited[x]) return open[x];
    if(open[x])
        cnt++;
    visited[x]=true;
    bool qq=false;
    for(int i=0;i<v[x].size();i++) {
        if(!visited[v[x][i]]) {
            bool xx=dfs(v[x][i],cnt,cnt1);
            qq=qq|xx;
        }
    }
    if(!open[x])
    open[x]=qq;
    if(open[x]==true) cnt1++;
    return open[x];
}
main() {
    int n,m,x,y;
    scanf("%lld%lld",&n,&m);
    open=new bool[n];
    visited=new bool[n];
    for(int i=0;i<n;i++) {
        scanf("%lld",&x);
        open[i]=(x==1)?true:false;
        visited[i]=false;
    }
    for(int i=0;i<m;i++) {
        scanf("%lld%lld",&x,&y);
        x--;y--;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    /*dfs(0,cnt,cnt1);
    cout<<(cnt*(cnt-1))/2<<" "<<cnt1<<endl;*/
    int cnt=0,ans=0,cnt1=0,p;
    for(int i=0;i<n;i++) {
        cnt=0;p=0;
        if(!visited[i]  && open[i]) {
            dfs(i,cnt,p);
            if(cnt>1)
            {
                ans+=(cnt*(cnt-1))/2;
                cnt1+=p;
            }
        }
    }
    cout<<ans<<" "<<cnt1;
    return 0;
} 