#include<cstdio>
#include<cstdlib>
#define FOR(i,a,b) for(int i=a;i<b;i++)

typedef struct element
{
	int val;
	int dra;
	struct element *next;
}element;

typedef struct graph
{
	int no;
	element *vert[50000];
}graph;

graph *g=(graph*)malloc(sizeof(graph));
int visited[50010]={0},I[50010],c=0;
long long va=0,vn;

element* create(element*,int,int);
void link(int,int);
void dfs(int);
void do_d(int);
void pair(int,int);

element* create(element* temp,int n,int v)
{
	temp->val=n;
	temp->dra=v;
	temp->next=NULL;
	return temp;
}

void do_d(int n)
{
	int i;
	FOR(i,0,n)
	{
		if(visited[i]==0 && g->vert[i]->dra==1)
		{
			dfs(i);
			vn=vn+(va*(va-1))/2;
			va=0;
			pair(n,i);
		}
	}
	return;
}

void pair(int n,int k)
{
	int flag=0;
	int y=I[k];
	FOR(i,0,n)
	{
		if(visited[i]==1)
		{
			int d,max=0;
			element* temp=g->vert[i];
			int r=temp->val;
			d=I[temp->val -1];
			if(0 < d && d<y)
			{
				++c;
			}
			else if(temp->dra==1 && d >1)
			{
				++c;
			}
			else
			{
				temp=temp->next;
				while(temp!=NULL)
				{
					if(I[temp->val -1]>0)
					{
						//printf("%d %d\n",temp->val,r);
						++max;
					}
					temp=temp->next;
				}
				if(max>=2)
					++c;
			}
			visited[i]=2; 
		}
	}
	return;
}

void link(int p,int v)
{
	element* temp=(element*)malloc(sizeof(element));
	temp=create(temp,v,g->vert[v-1]->dra);
	element* temp2;
	temp2=g->vert[p-1];
	while(temp2->next!=NULL)
		temp2=temp2->next;
	temp2->next=temp;
	temp2=temp;
	temp2->next=NULL;
	return;
}

void dfs(int start)
{
	I[start]=g->vert[start]->dra;
	visited[start]=1;
	element* temp=g->vert[start];
	if(temp->dra==1)
		++va;	
	while(1)
	{
		temp=temp->next;
		if(temp!=NULL)
		{
		if(visited[(temp->val)-1]==0)
		{
			dfs((temp->val)-1);
			I[start]+=I[(temp->val)-1];
		}
		}
		else
			break;
	}
	return;
}

int main()
{
	int m,v,p,n,max=0,i;
	scanf("%d%d",&n,&m);
	g->no=n;
	FOR(i,0,n)
	{
		scanf("%d",&v);
		element* temp=(element*)malloc(sizeof(element));
		temp=create(temp,i+1,v);
		g->vert[i]=temp;
	}
	FOR(i,0,m)
	{
		scanf("%d%d",&p,&v);
		link(p,v);
		link(v,p);
	}
	/*FOR(i,0,n)
	{
		element* temp=g->vert[i];
		while(temp!=NULL)
		{
			printf("|%d %d|->",temp->val,temp->dra);
			temp=temp->next;
		}
		printf("NULL\n");
	}*/
	//printf("%d\n",i);
	do_d(n);
	max=c;
	printf("%lld %d\n",vn,max);
	return 0;
}
