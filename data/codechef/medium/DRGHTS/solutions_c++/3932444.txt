#include<bits/stdc++.h>
#define max(a,b) a>b?a:b
typedef long long int ll;
using namespace std;
vector<ll>rooms[50002];
int arr[50002];
bool visited[50002]={false};
ll M[50002],id[50002],root_id[50002];

long long k,c; ll rubik,flag,rm;

void dfs(int i){
int j;;
if(M[i]){
c++;
}
id[i]=M[i];
visited[i]=true;
root_id[i]=rm;

for(j=0;j<rooms[i].size();j++){
if(!visited[rooms[i][j]])
{

dfs(rooms[i][j]);


id[i]+=id[rooms[i][j]];

}
}

/*if(i==root_id[i]){
        k=0;
for(j=0;j<rooms[i].size();j++){
if(id[rooms[i][j]])
k+=1;
}
if(k>1)
arr[i]=1;
}*/

}

int main(){
ll i,m,n,furik=0;
cin>>n>>m;
for(i=1;i<=n;i++)
cin>>M[i];

for(i=1;i<=m;i++)
{
ll a,b;
cin>>a>>b;
rooms[a].push_back(b);
rooms[b].push_back(a);
}
for(i=1;i<=n;i++){
if(!visited[i] && M[i]){
c=0;
k=-1;
rm=i;
dfs(i);
furik+=((c-1)*c)/2;


}


}

for(i=1;i<=n;i++){
ll p=root_id[i];
/*if(p==i){
    if(M[i] && id[i]>1)
    rubik++;
else if(arr[i] && M[i]==0)
     rubik++;
//cout<<i<<" "<<arr[i]<<endl;

continue;
}*/
if(id[i]>0 && id[p]>id[i]){
rubik++;
continue;
}
if(id[i]>1 && M[i]){
rubik++;
continue;
}
if(id[p]>1 && M[i])
{rubik++;
continue;}
if(id[i]>1)
rubik++;
}
/*cout<<endl;
for(i=1;i<=n;i++)
cout<<id[i]<<" "<<root_id[i]<<endl;*/
cout<<furik<<" "<<rubik<<endl;

return 0;
}
