#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define sf scanf
#define pf printf
#define frii(i,a) for(i = a.begin(); i != a.end(); i++)
#define fr(i,n,m) fri(i,n,m,1)
#define frm(t,i,n,m) frim(t,i,n,m,1)
#define fre(i,n,m) fri(i,n,m+1,1)
#define frem(t,i,n,m) frim(t,i,n,m+1,1)
#define fri(i,n,m,l) frim(int,i,n,m,l)
#define frim(t,i,n,m,l) for(t i = n; i < m; i+=l)
#define frie(i,n,m,l) fri(i,n,m+1,l)
#define friem(t,i,n,m,l) frim(t,i,n,m+1,l)
#define frr(i,n,m) frrd(i,n,m,1)
#define frrm(t,i,n,m) frrdm(t,i,n,m,1)
#define frre(i,n,m) frrd(i,n,m-1,1)
#define frrem(t,i,n,m) frrdm(t,i,n,m-1,1)
#define frrd(i,n,m,l) frrdm(int,i,n,m,l)
#define frrdm(t,i,n,m,l) for(t i = n; i > m; i-=l)
#define frrde(i,n,m,l) frrd(i,n,m-1,l)
#define frrdem(t,i,n,m,l) frrdm(t,i,n,m-1,l)
#define all(a) a.begin(),a.end()
#define mset(a,n) memset(a, n, sizeof(a))
#define mllc(a,t) ((t*)malloc((a)*sizeof(t)))
#define pl() pf("\n")
using namespace std;
ll open[50010];
bool atleast[50010];
ll ctr;
bool done[50010];
vector <ll> adj[50010];
 
inline void readInt(int &x) {
    register int c = getchar();
    x = 0;
    int neg = 0;
    for(; ((c<48 || c>57) && c != '-'); c = getchar());
    if(c=='-') {
    	neg = 1;
    	c = getchar();
    }
    for(; c>47 && c<58 ; c = getchar()) {
    	x = (x<<1) + (x<<3) + c - 48;
    }
    if(neg)
    	x = -x;
}
 
void dfs(ll f){
	done[f] = true;
	ll counter = ctr;
	if(open[f] == 1)
		ctr++;
	fr(i,0,adj[f].size())
		if(!done[adj[f][i]])
			dfs(adj[f][i]);
	if(ctr != counter && ctr > 1)
		atleast[f] = true;
}
 
 
int main(){
	mset(done, false);
	mset(atleast, false);
	ll n, m;
	sf("%lld  %lld", &n, &m);
	fr(i,0,n)
		sf("%lld", &open[i]);
	
	fr(i,0,m){
		ll f,t;
		sf("%lld %lld", &f, &t);
		//readInt(f);
		//readInt(t);
		adj[f-1].push_back(t-1);
		adj[t-1].push_back(f-1);
	}
	ll ans = 0;
	fr(i,0,n){
		if(!done[i] && open[i] == 1){
			ctr = 0;
			dfs(i);
			if(ctr != 0)
				ans += ctr*(ctr-1)/2;
		}
	}
	
	ll count2 = 0;
	fr(i,0,n)
		if(atleast[i])
			count2++;
	pf("%lld %lld\n", ans, count2);
	
	return 0;
} 