#include<bits/stdc++.h>
using namespace std;
int visited[50005];
int mark[50005];
std::vector<int>adj[50005];

int dfs(int x)
{
    int ans=0;
    visited[x]=1;
    for(int i=0; i<adj[x].size(); i++)
    {
        if(!visited[adj[x][i]])
            ans+=dfs(adj[x][i]);
    }
    if(ans>0)
        return ans+1;
    if(mark[x])
        return 1;
    return 0;
}

int DFS(int x)
{
    if(visited[x])
        return 0;
    int ans=0;
    visited[x]=1;
    for(int i=0;i<adj[x].size();i++)
    {
        ans+=DFS(adj[x][i]);
    }
    if(mark[x])
        ans+=1;
    return ans;
}

int main()
{
    int n,m,cnt,pos,i,x,y;
    scanf("%d %d",&n,&m);
    cnt=0;
    pos=-1;
    for(i=0; i<n; i++)
    {
        scanf("%d",&mark[i]);
    }

    for(i=0; i<m; i++)
    {
        scanf("%d %d",&x,&y);
        x--;
        y--;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }

    if(n==1 || m==0)
    {
        printf("0 0\n");
        return 0;
    }
        int ans=0,ans1=0;

        for(i=0; i<n; i++)
        {
            int temp;
            if(mark[i] && !visited[i])
            {
                temp=dfs(i);
                ans+=(temp>1)?temp:0;
            }
        }
        memset(visited,0,sizeof(visited));
        for(i=0;i<n;i++)
        {
            if(!visited[i])
            {
            cnt=DFS(i);
            long long int val=cnt;
            val=(val*(val-1))/2;
            ans1+=val;
            }
        }

        printf("%d %d\n",ans1,ans);
    return 0;
}
