#include <iostream>
#include <vector>
#include <set>
using namespace std;

#define lim 50001
bool wind[lim], isvisited[lim];
vector<int> adj[lim];

long long dfs1(int n) {
    if ( adj[n].empty() ) {
        if ( wind[n] ) return 1;
        else return 0;
    }
    long long sum;
    if ( wind[n] ) sum = 1;
    else sum = 0;
    for(vector<int>::iterator it=adj[n].begin(); it!=adj[n].end();++it) {
        long long n1 = *it;
        if(!isvisited[n1]) {
            isvisited[n1] = true;
            sum = sum+dfs1(n1);
        }
    }
    return sum;
}

long long dfs2(int n) {
    if ( adj[n].empty() ) {
        if ( wind[n] ) return 1;
        else return 0;
    }
    long long sum=1;
    bool flag = false;
    for(vector<int>::iterator it=adj[n].begin(); it!=adj[n].end();++it) {
        int n1 = *it;
        if(!isvisited[n1]) {
            flag = true;
            isvisited[n1] = true;
            sum = sum+dfs2(n1);
        }
    }
    if ( !flag ) {
        if ( wind[n] ) return 1;
        else return 0;
    }
    if ( sum == 1 ) {
        if ( wind[n] ) return 1;
        else return 0;
    }
    return sum;
}

int main() {
    int n, m, t, a, b;
    cin >> n >> m;
    for(int i=1;i<=n;++i) {
        cin >> t;
        wind[i] = t;
    }

    set<int> node;
    while(m--) {
        cin >> a >> b;
        node.insert(a);
        node.insert(b);
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    for(int i=1;i<=n;++i) isvisited[i] = false;
    long long f=0;
    for(set<int>::iterator it=node.begin();it!=node.end();++it) {
        if ( !isvisited[*it] && wind[*it] ) {
            isvisited[*it] = true;
            long long num = dfs1(*it);
            f = f+(num*(num-1))/2;
        }
    }

    for(int i=1;i<=n;++i) isvisited[i] = false;
    long long r = 0;
    for(set<int>::iterator it=node.begin();it!=node.end();++it) {
        if ( !isvisited[*it] && wind[*it] ) {
            isvisited[*it] = true;
            long long num = dfs2(*it);
            if ( num != 1 ) r = r+num;
        }
    }
    cout << f << " " << r << endl;
    return 0;
}
