#include<iostream>
#include<vector>
using namespace std;
vector<int>graph[50004];
int visited[50004];
int window[50004];
long long coun;
long long pairs;
int draughts;
void count_pair(int curr)
{
    int i;
    if(visited[curr])
        return;
    visited[curr]=1;
    if(window[curr])
        coun++;
    for(i=0;i<graph[curr].size();i++)
    {
        count_pair(graph[curr][i]);
    }
    return;
}
int divide_graph(int curr)
{
    int i,ans;
    if(visited[curr]!=0)
        return (0);
    visited[curr]=1;
    ans=window[curr];
    for(i=0;i<graph[curr].size();i++)
    {
        ans+=divide_graph(graph[curr][i]);
    }
    window[curr]=ans;
    return (window[curr]>0);
}
void step1(int curr,int decision)
{
    int i;
    decision=max(decision,window[curr]);
    if(visited[curr])
        return;
    visited[curr]=1;
    if(window[curr]>=1&&decision>=2)
        draughts++;
    for(i=0;i<graph[curr].size();i++)
    {
        step1(graph[curr][i],decision);
    }
    return;
}
int main()
{
    int i,j,n,m,u,v;
    cin>>n>>m;
    for(i=1;i<=n;i++)
        visited[i]=0;
    for(i=1;i<=n;i++)
        cin>>window[i];
    pairs=0;
    for(i=0;i<m;i++)
    {
        cin>>u>>v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    for(i=1;i<=n;i++)
    {
        coun=0;
        if(visited[i]==0)
        count_pair(i);
        pairs+=(coun*(coun-1))/2;
    }
    for(i=1;i<=n;i++)
        visited[i]=0;
    for(i=1;i<=n;i++)
    {
        if(visited[i]==0)
            divide_graph(i);
    }
    for(i=1;i<=n;i++)
        visited[i]=0;
    draughts=0;
    //for(i=1;i<=n;i++)
      //  cout<<window[i]<<" ";
    //cout<<endl;
    for(i=1;i<=n;i++)
    {
        if(visited[i]==0)
        {
            step1(i,0);
        }
    }
    cout<<pairs<<" "<<draughts<<endl;
    return 0;
}
