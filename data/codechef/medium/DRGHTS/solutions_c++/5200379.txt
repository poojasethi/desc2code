#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <algorithm>
 


using namespace std;

int max(int a, int b){if (a >= b) return a; return b;}
int min(int a, int b){if (a >= b) return b; return a;}

#define ll long long
#define llu unsigned long long

#define M 1000000007
#define N 1000000009
#define pin(ans) printf("%d\n", ans);
#define pin2(ans1, ans2) printf("%d %d\n", ans1, ans2);
#define pstr(str) printf("%s\n", str);
#define pll(ans) printf("%lld\n", ans);
#define pll2(ans1, ans2) printf("%lld %lld\n", ans1, ans2);
#define pllu(ans) printf("%lld\n", ans);
#define loop(j,n) for (int i = j; i < n; i++)


inline int getint(){
int t=0,sign=1;
char c;
c=getchar_unlocked();
if(c==45){c=getchar_unlocked();sign=-1;}
while(c<'0' || c>'9')
c=getchar_unlocked();
if(c==45){c=getchar_unlocked();sign=-1;}
while(c>='0' && c<='9'){
t=(t<<3)+(t<<1)+c-'0';
c=getchar_unlocked();
}
return t*sign;
}

vector<int> adj[50000 + 10];
bool visited[50000 + 10];
int window[50000 + 10];


void dfs(int i, ll* furik, ll* rubik, ll* tfurik, ll* trubik)
{
	vector<int>::iterator itr = adj[i].begin();
	while(itr != adj[i].end())
	{
		if (!visited[*itr])
		{
			visited[*itr] = true;
			if (window[*itr] == 0) {(*trubik)++; dfs(*itr, furik, rubik, tfurik, trubik);}
			else {(*rubik) += (*trubik); (*tfurik)++; (*trubik) = 0; dfs(*itr, furik, rubik, tfurik, trubik);}
			if (*trubik > 0) (*trubik)--;
		}
		itr++;
	}
}
 
int main()
{
	int n, m, u, v;
	ll furik = 0, rubik = 0, tfurik = 0, trubik = 0;
	//scanf("%d %d", &n, &m);
	n = getint();
	m = getint();

	loop(0,n) window[i] = getint();
		//scanf("%d", &window[i]);

	loop(0,m)
	{
		//scanf("%d %d", &u, &v);
		u = getint();
		v = getint();
		u--; v--;
		adj[u].push_back(v); adj[v].push_back(u);
	}

	//connected(n, &furik, &rubik, &tfurik, &trubik);
	loop(0, n)
	{
		if ((!visited[i]) && (window[i] == 1))
		{
			visited[i] = true;
			tfurik = 1; trubik = 0;
			dfs(i, &furik, &rubik, &tfurik, &trubik);
			//printf("* %d %lld\n", i, tfurik);
			if (tfurik > 1) rubik += tfurik;
			furik += ((tfurik * (tfurik - 1)) / 2);
		}
	}

	pll2(furik, rubik);	
}