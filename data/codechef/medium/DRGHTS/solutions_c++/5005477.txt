#include<iostream>
#include<stdio.h>
#include<vector>
#include<iterator>
using namespace std;
vector< vector<int> >graph;
vector<bool>visited;
int a[50001],I[50001];
int id=-1;
int root_id[50001];
int parent[50001];
long long int pr;
void dfs(int u)
{
    if(a[u]==1)
    pr++;
    visited[u]=true;
    root_id[u]=id;
    I[u]=a[u];
    for(vector<int>::iterator i=graph[u].begin();i!=graph[u].end();i++)
    {
        if(!visited[*i])
            {

                parent[*i]=u;
                dfs(*i);
                I[u]+=I[*i];
            }
    }
}

int main()
{
    int n,m,flag=0,i;
    long long int ans1=0,ans2=0;
    cin>>n>>m;
    graph=vector< vector<int> > (n);
    for(int i=0;i<n;i++)
        {
            cin>>a[i];
        }
    for(int i=0;i<m;i++)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        u--;
        v--;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    if(n==1)
    {
        printf("0 0\n");
        return 0;
    }
    visited=vector<bool> (n,0);
    for(int i=0;i<n;i++)
    {
        if(visited[i]==true)
            continue;
        pr=0;
        id=i;
        dfs(i);
        if(pr!=0)
            ans1+=(long long)(pr*(pr-1))/2;
    }
    for(i=0;i<n;i++)
    {
        if((I[i]>0&&I[root_id[i]]>I[i])||(a[i]==1&&I[i]>1))
            ans2++;
        else
        {
            flag=0;
            for(vector<int>::iterator it=graph[i].begin();it!=graph[i].end();it++)
            {
                if(*it!=parent[i])
                {
                    if(I[*it]>0)
                        flag++;
                }
            }
            if(flag>=2)
                ans2++;
        }
    }
    printf("%lld %lld\n",ans1,ans2);
    return 0;
}
