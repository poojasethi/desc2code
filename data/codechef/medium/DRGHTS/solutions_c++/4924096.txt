#include<iostream>
#include<vector>
#include<stdio.h>
using namespace std;
#define MAX 50005
#define ll long long

ll openW, rooms;
bool room[MAX];
bool visited[MAX];
vector<int> forest[MAX];

bool dfs(int x)
{
    visited[x]=true;

    if(room[x])
        openW++;

    bool children = false;
    for(int i=0;i<forest[x].size();i++)
        if(visited[ forest[x][i] ]==false)
        {
            if(dfs( forest[x][i] ))
                children = true;
        }

    if( room[x] or children )
    {
        rooms++;
        return true;
    }

    return false;
}

int main()
{
        int n, m;
        cin >> n >> m;

        for(int i=0;i<n;i++)
        {
            forest[i].resize(0);
            visited[0]=false;
        }

        for(int i=0;i<n;i++)
            cin >> room[i];

        while(m--)
        {
            int x, y;
            scanf("%d %d", &x, &y);
            // cin >> x >> y;
            x--, y--;
            forest[x].push_back(y);
            forest[y].push_back(x);
        }

        ll ans1 = 0, ans2 = 0;
        for(int i=0;i<n;i++)
        {
            openW = rooms = 0;
            if( visited[i]==false and room[i]==true)
                dfs(i);

            if(openW>1)
                ans1 += openW*(openW-1)/2, ans2 += rooms;
        }

        cout << ans1 << " " << ans2;

}
