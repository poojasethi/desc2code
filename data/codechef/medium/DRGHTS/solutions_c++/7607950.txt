#include<bits/stdc++.h>
using namespace std;
vector<int>G[50001];
//int p,count_zero,count_one,ans,pre;
#define lld long long int
lld p;
int ans=0,count_zero,count_one;
void DFS_util(int src,int visited[],int ar[])
{
visited[src]=1;
if(ar[src]==1)
	p++;
for(int i=0;i<G[src].size();i++)
{
	if(!visited[G[src][i]])
	{
		if(ar[G[src][i]]==1)
			{count_one++;ans=ans+count_zero+count_one;count_zero=0;count_one=0;DFS_util(G[src][i],visited,ar);}
		else
			{count_zero++;DFS_util(G[src][i],visited,ar);}
	}
}
if(count_zero>0) count_zero--;
}

void DFS(int n,int ar[])
{
  int visited[n+1],i;
  lld count=0;
  for(i=0;i<n;i++)
  	{visited[i]=0;}
  for(i=0;i<n;i++)
  {
  	if(!visited[i] && ar[i]==1)
  	{
  		count_zero=0;count_one=1;
  		DFS_util(i,visited,ar);
  		count=count+(p*(p-1))/2;
  		p=0;
  	}
  }
  if(ans==1)
  	ans=ans-1;
  printf("%lld %d\n",count,ans);
}

int main()
{
	int n,m;
	scanf("%d %d",&n,&m);
	int ar[n+2],i,count=0;
	for(i=0;i<n;i++)
	{
		scanf("%d",&ar[i]);
        if(count==1) count++;
	}
	for(i=0;i<m;i++)
	{
		int a,b;
		scanf("%d %d",&a,&b);
		G[a-1].push_back(b-1);
		G[b-1].push_back(a-1);
	}
	DFS(n,ar);
	return 0;
}