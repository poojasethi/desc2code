#include<stdlib.h>
#include<stdio.h>
#define gc() getchar_unlocked();
 
bool white=1;
bool black=0;
int rubik=0;
 
struct list
{
    int adjacent;
    struct list *ptr;
};
 
typedef struct node
{
    bool open;
    bool color;
    struct list *adj;
    struct list *last;
}node;
 
 inline int read_int() {
  register char c = gc();
  while(c<'0' || c>'9') c = gc();
  int ret = 0;
  while(c>='0' && c<='9') {
    ret = 10 * ret + c - 48;
    c = gc();
  }
  return ret;
}
 
 
int DFS(node a[],int i)
{
    a[i].color=black;
 
    int value=0;
 
 
    if(a[i].open==1)
        value++;
 
    struct list *point;
    point=a[i].adj;
 
    while(point!=NULL)
    {
        if(a[point->adjacent].color==white)
        {
            //printf("yes--%d\n",point->adjacent);
            value+=DFS(a,point->adjacent);
        }
        point=point->ptr;
    }
 
    if(value>0)
        rubik++;
 
    return value;
}
 
void master(node a[],int n)
{
    long long int s,farak=0;
    for(int i=1;i<=n;i++)
    {
        if(a[i].color==white && a[i].open==1)
        {
 
           s=DFS(a,i);
           farak+=((s)*(s-1))/2;
 
           if(s==1)
            rubik--;
        }
    }
    printf("%lld ",farak);
    printf("%d\n",rubik);
}
 
void put_edge(node a[],int i,int j)
{
 
    if(a[i].last==NULL)
    {
        struct list *temp;
        temp=(list*)(malloc(sizeof(list)));
 
        temp->adjacent=j;
        temp->ptr=NULL;
 
        a[i].adj=temp;
        a[i].last=temp;
    }
 
    else
    {
       struct list *temp;
       temp=(list*)(malloc(sizeof(list)));
 
       temp->adjacent=j;
       a[i].last->ptr=temp;
       temp->ptr=NULL;
       a[i].last=temp;
    }
 
 
}
 
int main()
{
    int n,m,edge1,edge2;
    node a[50001];
    n=read_int();
    m=read_int();
 
    for(int i=1;i<=n;i++)
    {
        a[i].open=read_int();
        a[i].adj=NULL;
        a[i].last=NULL;
        a[i].color=white;
    }
 
    for(int i=1;i<=m;i++)
    {
        edge1=read_int();
        edge2=read_int();
        put_edge(a,edge1,edge2);
        put_edge(a,edge2,edge1);
    }
 
    /*for(int i=1;i<=n;i++)
    {
        struct list *ptr2=a[i].adj;
        for(;ptr2!=NULL;ptr2=ptr2->ptr)
            //printf("%d -->",ptr2->adjacent);
        //printf("\n");
    }*/
    master(a,n);
 
    return 0;
}   