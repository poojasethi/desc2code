#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
int n,m,c,d;
vector < int> f, s[50005];
vector <int> a,visited;
vector <long long> ans;
long long ans1 = 0, ans2= 0;
long long solve(long long x);
long long solve2(long long x);
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;
	a.resize(n), ans.resize(n,0), visited.resize(n,false);
	for(int i = 0; i < n; i++)
		cin >> a[i];
	f = a;
	for(int i = 0; i < m; i++){
		cin >> c >> d;
		--c,--d;
		s[c].push_back(d);
		s[d].push_back(c);
	}
	for(int i = 0; i < n; i++)
		if(!visited[i] && a[i]){
		ans[i] = solve(i);
		ans1+=((ans[i]*(ans[i]-1))/2);
		}
		else ans[i] = 0;
	for(int i = 0; i < n; i++)
		visited[i] = false;
	for(int i = 0; i < n; i++)
		if(ans[i] >=2 && visited[i] == false){
			 ans2 =solve2(i);
		}
		ans2 = 0;
    for(int i = 0; i < n; i++)
		if(f[i] >=2)
			ans2++;
	cout << ans1 << " " << ans2 << "\n";
	return 0;
}
long long solve(long long x){
	if(visited[x] == true)
		return 0;
	visited[x] = true;
	int r = a[x];
	for(int i = 0; i <s[x].size(); i++)
		r+=solve(s[x][i]);
	return r;
}
long long solve2(long long x){
	if(visited[x] == true)
		return 0;
	visited[x] = true;
	int l = f[x];
	if(a[x] == 1)
		f[x]++;
	for(int i = 0; i < s[x].size(); i++){
		if(f[x] && !visited[s[x][i]])
			f[s[x][i]]++;
		f[x]+=solve2(s[x][i]);
	}
	if(f[x] - l || a[x])
		return true;
	else return false;
}