#include<cstdio>



inline void readint(int &a)
{
    register int c;
	bool sign = false;
    a = 0;
    do c = getchar_unlocked(); while(c < '-');
	if(c == '-'){ sign = true; c = getchar_unlocked(); }
    do{
		a = (a << 1) + (a << 3) + c - '0';
		c = getchar_unlocked();
	}while(c >= '0');
	if(sign)a = -a;
}

inline void readL(long long &a)
{
    register int c; 
    a = 0;
    do c = getchar_unlocked(); while(c < '0');
    do{
		a = (a << 1) + (a << 3) + c - '0';
		c = getchar_unlocked();
	}while(c >= '0');
}

inline void printL(long long a)
{
	int s[22],t = -1;
	do
	{
		s[++t] = a % 10 + '0';
		a /= 10;
	}while(a > 0);

	while(t >= 0)putchar_unlocked(s[t--]);
	putchar_unlocked('\n');
}

inline void printint(int a)
{
	int s[13],t = -1;
	do
	{
		s[++t] = a % 10 + '0';
		a /= 10;
	}while(a > 0);

	while(t >= 0)putchar_unlocked(s[t--]);
	putchar_unlocked('\n');
}

int main()
{
	int t;
	int next[401][401];
	int no_order[401];

	readint(t);

	while(t--)
	{
		int n,m,c;
		int slot[401];
		int q[401];
		int nextp[401];

		readint(n);
		readint(m);

		for(int i = 1; i <= 400; i++)
		{
			no_order[i] = 0;
			slot[i] = -1;
			nextp[i] = 0;
		}

		for(int i = 1; i <= m; i++)
		{
			int c;
			readint(c);
			q[i] = c;
			next[c][no_order[c]++] = i;
		}

		for(int i = 1; i <= 400; i++)next[i][no_order[i]] = 401;

		int no_cleans = 0;

		for(int i = 1; i <= m; i++)
		{
			int cur_cust = q[i];
			nextp[cur_cust]++;
			int j;
			
			for(j = 1; j <= n; j++)
				if(slot[j] == cur_cust)
				{
					//printf("%d : already p\n",i);
					break;
				}

			if(j > n)
			{
				for(j = 1; j <= n; j++)
					if(slot[j] == -1)
					{
						slot[j] = cur_cust;
						no_cleans++;
						//printf("%d : free_slot\n",i);
						break;
					}
				if(j > n)
				{
					int farthest = 0;
					int victim = -1;
					for(j = 1; j <= n; j++)
					{
						//printf("next[slot[j]][nextp[slot[j]]] = %d\n");
						if(next[slot[j]][nextp[slot[j]]] > farthest)
						{
							farthest = next[slot[j]][nextp[slot[j]]];
							victim = j;
						}
					}
						//printf("replace %d by %d at slot %d\n",slot[victim],cur_cust,victim);
						slot[victim] = cur_cust;
						no_cleans++;
				}
			}
		}
		printint(no_cleans);
	}
	return 0;
}