#include<bits/stdc++.h>

using namespace std;
#define MAX_SIZE 1000
long long int orders[MAX_SIZE];
vector <long long int> tables;
vector <long long int> lutime;
vector <long long int> visited;
long long int n=MAX_SIZE;
long long int m=MAX_SIZE;

long long int findlu(long long int s)
{
	long long int customer;
	long long int checking;
	long long int checkingpos;
	long long int i,j;

	//if(visited.size()!=0)
		visited.clear();
	//if(lutime.size()!=0)
		lutime.clear();
	
	for(i=0;i<n;i++)
	{
		lutime.push_back(-1);
	}

	for(j=s+1;j<m;j++)
	{
		checking=orders[j];
		
		if(find(tables.begin(),tables.end(),checking)!=tables.end())
		{
			checkingpos=find(tables.begin(),tables.end(),checking) - tables.begin();
			//printf("Position = %lld\n",checkingpos);
			if(find(visited.begin(),visited.end(),checking)==visited.end())
			{
				lutime[checkingpos]=j-s;
				visited.push_back(checking);
			}
		}
	}

	long long int max=-1;
	long long int maxpos=-1;
	long long int maxorder=-1;
//	printf("Lutime size : %lu\n",lutime.size());
	for(i=0;i<lutime.size();i++)
	{
		if(lutime[i]==-1)
		{
	//		printf("Found element that does not occer after this : %lld at pos %lld\n",tables[i],i);
			return i;
		}
		else
		{
			if(lutime[i]>max){
				max=lutime[i];
				maxpos=i;
				//maxorder=tables[i];
			}
		}
	}
//	printf("returning pos %lld with order %lld\n",i,tables[i]);
	return maxpos;
}



int main()
{
	long long int t,i,j,k,orderval,temporder,tableorder,order,changetable,clean,dist;
	scanf("%lld",&t);
	while(t--)
	{

		tables.clear();
		lutime.clear();
		visited.clear();
		clean=0;
		dist=0;
		
		scanf("%lld %lld",&n,&m);

		for(i=0;i<m;i++)
			scanf("%lld",&orders[i]);

		for(i=0;i<m;i++)
		{
			order=orders[i];
			/*
			printf("\n\n\n\n\nProcessing order:%lld\n",order);
			
			printf("TABLE:----------------------------------\n");
			
			for(j=0;j<tables.size();j++)
			{
				printf("%lld ",tables[j]);
			}	
			printf("\n--------------------------------------\n");
			*/
			if(tables.size()<n)
			{

				if(find(tables.begin(),tables.end(),order)==tables.end())
				{
					tables.push_back(order);
					
					clean++;
			//		printf("Tables not full yet . adding %lld and cleanval=%lld\n",order,clean);

				}
				else
				{
			//		printf("Tables not full yet. Order already exists. Do nothing\n");
				}
			}
			else
			{
				if(find(tables.begin(),tables.end(),order)!=tables.end())
				{
				//	printf("TAbles full. order already there on table. don't do anything\n");
				}
				else
				{
					//printf("Table")
					changetable=findlu(i);
				//	printf("found rep position %lld with value %lld\n",changetable,tables[changetable]);
					long long int reporder=tables[changetable];
					//tables.erase(remove(tables.begin(),tables.end(),changetable),tables.end());
					//tables.push_back(order);
					tables[changetable]=order;
					clean++;
				//	printf("TAbles full. order not found swapping %lld for %lld and cleanval = %lld\n",reporder,order,clean);
				}
			}
		}
			printf("%lld\n",clean);
	}
	return 0;
}