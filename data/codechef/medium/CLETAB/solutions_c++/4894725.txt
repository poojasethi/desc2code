#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<vector>
#define gc getchar_unlocked
#define pc putchar_unlocked
using namespace std;
inline long long readInt(){
long long n = 0, c = gc(), f = 1;
while(c != '-' && (c < '0' || c > '9')) c = gc();
if(c == '-') f = -1, c = gc();
while(c >= '0' && c <= '9')
n = (n<<3) + (n<<1) + c - '0', c = gc();
return n * f;
}

inline void writeInt(long long a)
{
    char snum[20];
    int i=0;
    do  {
        snum[i++]=a%10+48;
        a=a/10;
    }while(a!=0);
    i=i-1;
    while(i>=0)
    pc(snum[i--]);
    pc('\n');
}

int checkFarthest(int *a , vector<int> per , int s , int m )
{
	int i , far= -1 , farp,j;
	bool flag = false;
	for(j = 0;j< per.size() ; j++)
	{
		for(i = s ; i < m ; i++ )
		{
			if(per[j] == a[i] )
			{
				if(far < i )
				{
					far = i;
					farp = j;
				}
				break;
			}			
		}
		if(i==m)
			break;
	}
	if(i==m)
	{
	//	cout<<"\nFarthest vallue is "<<per[j]<<endl;
		return j;
	}
	//cout<<"\nFarthest vallue is "<<per[farp]<<endl;
	return farp;
}

int main()
{
	int t , m , n ,*a,c;
	bool *sitting;
	vector<int> per;
	t = readInt();
	while(t--)
	{
		int cleaning = 0;
		n = readInt();
		m = readInt();
		a = (int*)calloc(m,sizeof(int));
		sitting = (bool*)calloc(401,sizeof(bool));
		for(int i=0;i<m;i++)
			a[i] = readInt();
		for(int i=0;i<m;i++)
		{
			if(sitting[a[i]]==false )
			{
				if( per.size() < n )
				{
					sitting[a[i]] = true;
					per.push_back(a[i]);
					cleaning++;
				}
				else
				{
					//pc('a');
					c = checkFarthest(a,per,i+1,m);
					sitting[per[c]] = false;
					per[c] = a[i];			
					sitting[a[i]] = true;
					cleaning++;
				}
			}
		}
		writeInt(cleaning);
		per.clear();
		free(a);
		free(sitting);
	}
	return 0;
}
