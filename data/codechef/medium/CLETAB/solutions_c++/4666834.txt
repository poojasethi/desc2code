#include <bits/stdc++.h>
 
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
#define p(n)                        printf("%d",n)
#define pc(n)                       printf("%c",n)
#define pl(n)                       printf("%lld",n)
#define pln(n)                      printf("%lld\n",n)
#define pf(n)                       printf("%lf",n)
#define ps(n)                       printf("%s",n)
#define pn(n)                       printf("%d\n",n)
 
 
#define forall(i,a,b)               for(i=a;i<=b;i++)
#define pb                          push_back
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())
 
 
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
 
using namespace std;
 
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map <string, int> msi;
 
 
 
int main()
{
	 #ifndef ONLINE_JUDGE
     //freopen("in.txt","r",stdin);
     #endif
	int t;
	s(t);
	int page[2000],frame[2000];
	while(t--)
	{
		int n,m,count=0,p,max;
		int i,j,s,k;		
		s(m);s(n);
		//int frame[n+1],page[m+1];
		forall(i,0,n-1)s(frame[i]);
		forall(j,0,m-1)page[j]=-1;
		
		forall(i,0,n-1)
		{
						
			forall(k,0,m-1)
			if(page[k]==frame[i])goto exit;
			
			forall(j,0,m-1) 
			{
				if(page[j]==-1)
				{
					page[j]=frame[i];
					count++;
					goto exit;
				}
			}
			if(j==m)
			{
				int idx=i+1;
				max=0;
				forall(j,0,m-1)
				{
					forall(s,idx,n-1)
					{
						if(frame[s]==page[j])
						{
							if(s>max)
							{
								max=s;
								p=j;
							}break;
						}
					}
					if(s==n)
					{max=s;p=j;}
				}
			}
			page[p]=frame[i];
			count++;
			
			exit :
			bool shit=true;
																	
		}
		
pn(count);
}
	return 0;
}
 
 