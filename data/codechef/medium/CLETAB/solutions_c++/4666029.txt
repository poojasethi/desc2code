#include<iostream>
#include<cstdio>
#include<map>
#include<vector>
using namespace std;
int main()
{
          int t,n,m,count,c,a,flag,max,k,ver,verM;
          scanf("%d",&t);
          while(t--)
          {
          	        flag=0;
          	        max=0;
                    count=0;//no. of times haku has to clean the tables
                    c=0;//count of no. of tables filled
          
                    map< int , vector<int> >z;//customer no. and its positions
                    map< int , vector<int> >::iterator it,it2;
                    map<int,int> z1;          //1 if customer with same no. is sitting else 0
                    scanf("%d%d",&n,&m);     //n=no. of tables; m=no. of customers
                    int arr[m];
                  //  cout<<n<<" "<<m<<endl;
                    for(int i=0;i<m;i++)
                    {
                            scanf("%d",&arr[i]);
                            z[arr[i]].push_back(i);
                            z1[arr[i]]=0;
                    }
                   /* for(it=z.begin();it!=z.end();it++)
                    {
                    	cout<<it->first<<"-- ";
                    	for(int p=0;p<(it->second).size();p++)
                    	cout<<it->second[p]<<" ";
                    	cout<<endl;
                    }*/
          
                    for( int i=0;i<m;i++)
                    {
                     	//cout<<i<<"  "<<arr[i]<<endl;
                    	flag=0;
                      //tables are empty and not present already                            
                            if(c< n && z1[arr[i]]==0)
                             {
                                    z1[arr[i]]=1;
                                   //a[c]=arr[i];
                                   c++;
                                   count++;
                              //     cout<<"%";
                             }
                     //tables are empty and already present
                         //    else if(c < n && z1[i]==1)
                          //   continue;
                     //tables are full                                       
                            else if(c==n && z1[arr[i]]==0)
                            {
                            	max=0;
                            //	cout<<"&";
                                         //if(z1[i]==1)//if customer with same no. is already sitting
                                         //continue;
                                         //else        //if not
                                        // {
                     //if the last index of some customer is less than index i,replace it
                                   for(it2=z.begin();it2!=z.end();it2++)
                                   {
                                   	      int j=it2->first;
                                           if(z[j].back()<i && z1[j]==1)
                                                  {
                                                       z1[j]=0;
                                                       z1[arr[i]]=1;
                                                      
                                                       flag=1;
                                                       break;
                                                  }
                                   }
//if no such customer exits which is not going to come again,replace the one whose 1st occurrence after i is last
                                   for(it2=z.begin();it2!=z.end() && flag!=1;it2++)
                                   {
                                   	
                                   	 k=it2->first;
                                         if(z1[k]==1)     //sitting person
                                         {
                                                          for(int j=0;j<z[k].size();j++)
                                                          {
                                                                  if(z[k][j]>i) 
                                                                  {
                                                                                ver=k;
                                                                                a=z[k][j];
                                                                                break;
                                                                  }
                                                                  
                                                          }                                           
                                          if(a>max)
                                          { verM=ver;
                                           max=a;
                                          }
                                         }
                                   }
                               if(flag!=1)
                               { 
                                          z1[verM]=0;
                                          z1[arr[i]]=1;
                                         
                               }
                               
                               
                             count++;
                            
                             }
                             //cout<<"flag "<<flag<<endl;
                             //cout<<count<<endl;
                    }
                    cout<<count<<endl;
          }
          return 0;
}