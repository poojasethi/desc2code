/*
http://codingaquarium.wordpress.com/
Shaikh shiam Rahman
Khunla University of Engineering and Technology(KUET)

*/

#include <bits/stdc++.h>
using namespace std;

/*** typedef ***/

#define MEMSET_INF 127
#define MEMSET_HALF_INF 63
#define stream istringstream
#define rep(i,n) for(__typeof(n) i=0; i<(n); i++)
#define repl(i,n) for(__typeof(n) i=1; i<=(n); i++)
#define FOR(i,a,b) for(__typeof(b) i=(a); i<=(b); i++)
#define INF (1<<30)
#define PI acos(-1.0)
#define pb push_back
#define ppb pop_back
#define all(x) x.begin(),x.end()
#define mem(x,y) memset(x,y,sizeof(x))
#define memsp(x) mem(x,MEMSET_INF)
#define memdp(x) mem(x,-1)
#define memca(x) mem(x,0)
#define eps 1e-9
#define ii pair<int,int>
#define pmp make_pair
#define ft first
#define sd second
#define vi vector<int>
#define vii vector<ii>
#define si set<int>
#define msi map<string , int >
#define mis map<int , string >
typedef long long i64;
typedef unsigned long long ui64;

/** function **/

#define SDi(x) sf("%d",&x)
#define SDl(x) sf("%lld",&x)
#define SDs(x) sf("%s",x)
#define SD2(x,y) sf("%d%d",&x,&y)
#define SD3(x,y,z) sf("%d%d%d",&x,&y,&z)
#define pf printf
#define sf scanf
#define pfcas(x) pf("Case %d: ",x)

#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define MAX 402

int main () {
#ifndef ONLINE_JUDGE
    READ("in.txt");
//    cout<<"hello world!"<<endl;
#endif
    vector<int> v[MAX];
    int tc,n,m,c[MAX],table[202];
    bool hastable[MAX];
    SDi(tc);
    while(tc--){
        SD2(n,m);
        rep(i,m){
            SDi(c[i]);
            v[c[i]].pb(i);
        }
        repl(i,400){
            if(v[i].size()){
//                printf("v[%d]: %u\n",i,v[i].size());
                sort(all(v[i]),greater<int>());
//                rep(j,v[i].size()) printf("%d ",v[i][j]);
//                puts("");
            }
        }
        memca(table);
        memca(hastable);
        int emptyTable = n,clean=0,targetTable,calltime;
        rep(i,m){
            if(hastable[c[i]]){
//                printf("block1\n");
                v[c[i]].pop_back();
                continue;
            }
            else if(emptyTable>0){
                rep(j,n){
                    if(table[j]==0){
                        table[j] = c[i];
                        hastable[c[i]] = true;
                        v[c[i]].pop_back();
                        break;
                    }
                }
                emptyTable--;
                clean++;
//                printf("block2\n");
            } else {
                calltime = INT_MIN;
                rep(j,n){
                    if(v[table[j]].size()==0){
                        targetTable = j;
                        break;
                    } else if(v[table[j]].back()>calltime) {
                        calltime = v[table[j]].back();
                        targetTable = j;
                    }
                } clean++;
                hastable[table[targetTable]] = false;
                table[targetTable] = c[i];
                hastable[c[i]] = true;
                v[c[i]].pop_back();
//                printf("block3\n");
            }
        }
        printf("%d\n",clean);
        repl(i,400) v[i].clear();
    }
    return 0;
}
