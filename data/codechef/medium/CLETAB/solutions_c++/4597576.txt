#include<bits/stdc++.h>
using namespace std;

#define mp(x,y) make_pair(x,y)
#define pb(x) push_back(x)
#define vi vector<int>
#define vs vector<string>
#define For(i,s,e) for(int i=s;i<=e;i++)
#define ForD(i,s,e) for(int i=s;i>=e;i--)
#define ull unsigned long long
#define ll long long
#define imax INT_MAX
#define imin INT_MIN
#define sz(x) (int)x.size()
#define ppb pop_back
#define all(x) x.begin(),x.end()
#define MAX 100010
#define mem(x,y) memset(x,y,sizeof(x));
#define pp pair<int,int>
#define psi pair<string,int>
#define in(c,x) scanf("%"#c,&x)
#define out(c,x) printf("%"#c" ",x)
#define aa first
#define bb second
#define s(a) scanf("%d",&a)
#define lls(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define p(a) printf("%d",a)
#define llp(a) printf("%lld",a)
#define sp(a) printf("%s",a)
#define cp(a) printf("%c",a)
#define nline printf("\n")
#define space printf(" ")
#define ll long long
#define gcd __gcd
#define UPD(a,b) { a = max(a,(b)); }
#define Fill(a,b) memset(a,b,sizeof(a))
#define gc getchar_unlocked
#define scanint sc

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

int FindNext(int arr[],int n,int tables[],int idx,int &s,int m)
{
    map<int,int>minIdx;
    For(i,0,s-1)
    {
        if(arr[idx]==tables[i])
            return 0;
    }
    if(s<n)
    {
        tables[s] = arr[idx];
        s++;
        return 1;
    }
    For(i,idx+1,m)
    {
        if(minIdx.count(arr[i])==0)
        {
            minIdx[arr[i]] = i;   
        }
    }
    int maxi = 0,ridx;
    For(i,0,s-1)
    {
        if(minIdx.count(tables[i])==0)
        {
            tables[i] = arr[idx];
            return 1;
        }
        if(minIdx[tables[i]] > maxi)
        {
            maxi = minIdx[tables[i]];
            ridx=i;
        }
    }
    tables[ridx] = arr[idx];
    return 1;
}

int main()
{
    int t,n,m,arr[401],tables[401],s,ans;
    scanint(t);
    while(t--)
    {
        s=0;
        ans=0;
        scanint(n);
        scanint(m);
        For(i,0,m-1)
        {
            scanint(arr[i]);
        }
        For(i,0,m-1)
        {
             ans+=FindNext(arr,n,tables,i,s,m);
        }
        cout<<ans<<endl;
    }
	return 0;
}
