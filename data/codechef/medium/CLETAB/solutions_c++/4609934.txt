#define _USE_MATH_DEFINES
#include <fstream>
#include <iostream>
#include <vector>
#include <list>
#include <stack>
#include <map>
#include <algorithm>
#include <utility>
#include <cassert>
#include <math.h>
#include <string>
#include <set>
#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <ctime>
#include <functional>
#include <cstring>
using namespace std;

#pragma warning(disable: 4996)


struct pint{ int x, y; pint(){}; pint(int a, int b) :x(a), y(b){} };
bool operator<(const pint&a, const pint&b)
{
	if (a.x != b.x)return a.x<b.x; return a.y<b.y;
}

bool operator==(const pint&a, const pint&b)
{
	return (a.x == b.x && a.y == b.y);
}

typedef long long ll;
typedef long long int64;
typedef unsigned long long ull;
typedef unsigned char uchar;
typedef pair<int, int> ipair;
typedef vector<int> vi;

#define _CRT_SECURE_NO_WARNINGS

#define Foru(i,a,b) for (i=(a),_b(b); i <= _b; ++i)
#define Fordu(i,a,b) for (i=(a),_b(b); i >= _b; --i)
#define repu(i,n) for (i=(0); i < (n); ++i)
#define repdu(i,n) for (i=((n)-1); i >= 0; --i)
#define fstru(i,str) for(i=(0);str[i]!=0; i++)


#define For(i,a,b) for (int i(a),_b(b); i <= _b; ++i)
#define Ford(i,a,b) for (int i(a),_b(b); i >= _b; --i)
#define rep(i,n) for (int i(0),_n(n); i < _n; ++i)
#define repd(i,n) for (int i((n)-1); i >= 0; --i)
#define fstr(i,str) for(int i(0);str[i]!=0; i++)
#define Fill(a,c) memset(&a, c, sizeof(a))
#define MP(x, y) make_pair((x), (y))
#define All(v) (v).begin(), (v).end()


int main()
{
	//freopen("out.txt", "w", stdout);
	//freopen("in.txt", "r", stdin);
	int T;
	int ord[500];


	cin >> T;
	rep(tt, T)
	{
		int n, m;
		cin >> n >> m;
		vi cust[500];
		int pos[500] = { 0 };
		rep(j, m)
		{
			cin >> ord[j];
			cust[ord[j]].push_back(j);
		}
		

		vi sittingCusts;
		int ans = 0;
		rep(j, m)
		{
			int customer = ord[j];
			if (find(All(sittingCusts), customer) == sittingCusts.end())
			{
				if (sittingCusts.size() < n)
				{
					sittingCusts.push_back(customer);
				}
				else
				{
					int loc = 0;
					int farthest = -1;
					rep(i, sittingCusts.size())
					{
						int c = sittingCusts[i];
						if (cust[c].size() <= pos[c])
						{
							loc = i;
							break;
						}
						else if (cust[c][pos[c]]>farthest)
						{
							loc = i;
							farthest = cust[c][pos[c]];
						}
					}

					sittingCusts[loc] = customer;
				}
				ans++;
			}

			pos[customer]++;
		}
		cout << ans << endl;
	}
	return 0;
}
