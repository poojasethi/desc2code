// Recursive C++ program to check if a string is subsequence of another string
#include<iostream>
#include<cstring>
#include<bits/stdc++.h>
using namespace std;

// Returns true if str1[] is a subsequence of str2[]. m is
// length of str1 and n is length of str2
bool isSubSequence(string s1 ,string s2, int m, int n)
{
    // Base Cases
    if(m==0)
        return true;
    if(n==0)
        return false;
    int j = 0; // For index of str1 (or subsequence

   // Traverse str2 and str1, and compare current character
   // of str2 with first unmatched char of str1, if matched
   // then move ahead in str1
   for (int i=0; i<n&&j<m; i++)
       if (s1[j] == s2[i])
         j++;

   // If all characters of str1 were found in str2
   return (j==m);
}

// Driver program to test methods of graph class
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string s1,s2;
        cin>>s1>>s2;
        int m= s1.size();
        int n=s2.size();
        if(m>n)
        {
            if(isSubSequence(s2,s1,n,m))
            {
                cout << "YES "<<endl;
            }
            else
                cout << "NO"<<endl;
        }
        else
        {
            if(isSubSequence(s1,s2,m,n))
            {
                cout << "YES "<<endl;
            }
            else
                cout << "NO"<<endl;
        }

    }

return 0;
}
