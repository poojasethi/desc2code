#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <string.h>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>

#define    V        100010
#define     E        400040
 
using namespace std;
 
int tree[V];
int rank[V];
 
struct edge
{
    int from, to;
    long long weight;
    bool operator < (const edge &other) const
    {
        return weight < other.weight;
    }
};
 
vector<edge> edges;
 
void initialize(int nodes)
{
    int i;
    for(i = 0; i <= nodes; i++)
    {
        tree[i] = i;
        rank[i] = 1;
    }
    edges.clear();
}
 
int find_set(int element)
{
    if(element != tree[element])
        tree[element] = find_set(tree[element]);
    return tree[element];
}
 
void union_sets(int x, int y)
{
    int rx, ry;
    rx = find_set(x);
    ry = find_set(y);
    if(rx == ry)
        return;
    if(rank[rx] > rank[ry])
    {
        rank[rx] += rank[ry];
        tree[ry] = rx;
    }
    else
    {
        rank[ry] += rank[rx];
        tree[rx] = ry;
    }
}
 
long long kruskal()//returns the MST weight
{
    long long total; //the weight of MST
    int u, v; //vertices in each edge
    int i;
    sort(edges.begin(), edges.end());
    total = 0;
    
    
    for(i = 0; i < edges.size(); i++)
    {
        u = find_set(edges[i].from);
        v = find_set(edges[i].to);
        if(u != v  || edges[i].weight < 0)
        {
            union_sets(u,v);
            total += edges[i].weight;
        }
    }
    return total;
}
 
void read_graph(int number_of_edges)
{
    int i;
    edge e;
    for(i = 0; i < number_of_edges; i++)
    {
        scanf("%d %d %lld", &e.from, &e.to, &e.weight);
        edges.push_back(e);
    }
 
}
 
int main()
{
    int nodes;
    int number_of_edges;
    
    int t;
    scanf("%d", &t);
    char desc[V];
    int i = 0;
    while(t--){
        
    	scanf("%d %d %s", &nodes, &number_of_edges,  desc);
    	
    	initialize(nodes);
    	read_graph(number_of_edges);
    	
    	for(i = 0; i < nodes; i++){
    		if(desc[i] == 'R')
    			union_sets(0, i+1);
    	}
    	
    	
    	
    	printf("%lld\n", kruskal());
    	
    }
    return 0;
}
