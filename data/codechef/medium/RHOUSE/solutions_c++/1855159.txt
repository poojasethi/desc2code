#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#include<string.h>

using namespace std;

#define MAXN 100009
#define MAXM 400009
#define ll long long

struct st {
	int a,b,c;
}edge[MAXM];

int N,par[MAXN],r[MAXN],M;
char s[MAXN+10];
bool rest[MAXN];

void Read() {
	scanf("%d%d ",&N,&M);
	scanf("%s",s);
	
	for (int i=0;i<N;i++) {
		if (s[i]=='R')
			rest[i+1]=true;
		else
			rest[i+1]=false;
	}
		
	
	for (int i=1;i<=M;i++) {	
		scanf("%d%d%d",&edge[i].a,&edge[i].b,&edge[i].c);
	}
}

bool cmp (st a,st b) {
	return a.c<b.c;
}

int FindSet(int a) {
	if (par[a]!=a)
		par[a]=FindSet(par[a]);
	return par[a];
}

void Link(int a,int b) {
	par[b]=a;
	if (rest[a]||rest[b])
		rest[a]=true;
}

void Solve() {
	
	for (int i=1;i<=N;i++) {
		par[i]=i;
		r[i]=1;
	}
	
	sort(edge+1,edge+1+M,cmp);
	
	ll cost=0;
	
	for (int i=1;i<=M;i++) {
		int a=FindSet(edge[i].a);
		int b=FindSet(edge[i].b);
		
		if (edge[i].c<=0 ) { 
			Link(a,b);
			cost+=(ll)edge[i].c;
			continue;
		}
		if ( a==b ) continue;
		if ( !(rest[a] && rest[b]) ) {
			Link(a,b);
			cost+=(ll)edge[i].c;
		}
		
	}
	
	printf("%lld\n",cost);
}

void Init() {
	for (int i=0;i<N;i++)
		s[i]=0;
}

int main () {
	//freopen("rhouse.in","r",stdin);
	//freopen("rhouse.out","w",stdout);
	
	int t;
	scanf("%d",&t);
	
	while (t--) {
		Read();
		Solve();
		Init();
	}
	return 0;
}
