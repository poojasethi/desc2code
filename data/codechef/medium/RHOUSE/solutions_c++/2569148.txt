#include <cstdio>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

vector < pair <long long,pair <int,int> > > EdgeWeights;
int parent[100005][2];
char graph[1000005];

int Find(int vertex)
{
	if(parent[vertex][0]==vertex)
		return vertex;
	parent[vertex][0]=Find(parent[vertex][0]);
	return parent[vertex][0];
}

void Union(int x,int y)
{
	if(parent[x][1]<parent[y][1])
	{
		parent[x][0]=parent[y][0];
		parent[y][1]+=parent[x][1];
		parent[x][1]=0;
	}
	else
	{
		parent[y][0]=parent[x][0];
		parent[x][1]+=parent[y][1];
		parent[y][1]=0;
	}
}

void init(int n)
{
	for(int i=0;i<=n;i++)
	{
		parent[i][0]=i;
		parent[i][1]=1;
	}
}

long long MST(int n,int m)
{
	init(n);
	long long ret=0;
	sort(EdgeWeights.begin(),EdgeWeights.end());
	for(int i=0;i<EdgeWeights.size();i++)
	{
		int x=EdgeWeights[i].second.first,y=EdgeWeights[i].second.second;
		int ParentX=Find(x),ParentY=Find(y);
		if(ParentX!=ParentY ||  EdgeWeights[i].first < 0)
		{
			ret+=EdgeWeights[i].first;
			Union(ParentX,ParentY);
		}
	}
	return ret;
}

int main()
{
	int T,n,m,x,y;
	long long weight;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d %d",&n,&m);
		getchar();
		scanf("%s",graph);
		EdgeWeights.clear();
		for(int i=0;i<m;i++)
		{
			scanf("%d %d %lld",&x,&y,&weight);
			EdgeWeights.push_back(make_pair(weight,make_pair(x-1,y-1)));
		}
		for(int i=0;i<n;i++)
			if(graph[i]=='R')
				EdgeWeights.push_back(make_pair(0,make_pair(i,n)));
		printf("%lld\n",MST(n,m));
	}
	return 0;
}