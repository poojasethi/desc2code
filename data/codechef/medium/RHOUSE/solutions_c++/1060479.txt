#include<iostream>
#include<cstdlib>
#include<algorithm>
int rank[100009],parent[100009],res[100009],edge[400009][3];
static int comp(const void* p1, const void* p2) {
  int* arr1 = (int*)p1;
  int* arr2 = (int*)p2;
  return arr1[2] - arr2[2];
}
void link(int x,int y)
{
     if(rank[x]>rank[y])
     {
        parent[y]=x;
     }
     else parent[x]=y;
     if(rank[x]==rank[y])
     rank[y]=rank[y]+1;
}
int find( int x)
{
     if(x!=parent[x])
     {
         parent[x]=find(parent[x]);
     }
     return parent[x];
}
bool uni(int x,int y)
{
     if(x==y)return false;
     x=find(x);y=find(y);if(x==y)return false;
     link(x,y);return true;
}                           
main()
{
      int t,n,m,x,y,w,j,k,i;char build[100009];
      scanf("%d",&t);
      while(t--)
      {
          scanf("%d%d%*c",&n,&m);long long cost=0;
          scanf("%s",build);
          for(i=0;i<=n;i++)
          {
             parent[i]=i;
             rank[i]=0;
          }            
          for(i=0;i<m;i++)
          {
              scanf("%d%d%d",&x,&y,&w);
              
                 edge[i][0]=x;edge[i][1]=y;edge[i][2]=w;
          }  
          qsort(edge, m, 3*sizeof(int), comp);   
          for(i=0;i<m;i++)
          {
               x=edge[i][0];y=edge[i][1];w=edge[i][2];           
               if(build[edge[i][0]-1]=='R')x=0;if(build[edge[i][1]-1]=='R')y=0;           
               if(w<=0)
              {
                cost+=w;
                uni(x,y);
              }  else{         
               if(uni(x,y))
               {
                    cost+=edge[i][2];
               }}
          }
          printf("%lld\n",cost);
      }
      //system("pause");
}                                                                  
