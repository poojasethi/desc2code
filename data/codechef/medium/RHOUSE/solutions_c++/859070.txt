#include<cstdio>
#include<algorithm>
#define f first
#define s second
using namespace std;
char str[100001];
pair<int,pair<int,int> > edge[400001];
int setOf[100001],rank[100001];
int findSet(int u)
{
  if(setOf[u]==u)return u;
  setOf[u]=findSet(setOf[u]);
  return setOf[u];
}
void doUnion(int u,int v)
{
  int tmp;
  if(rank[u]>rank[v])
    {
      tmp=u;u=v;v=tmp;
    }
  setOf[u]=v;
  if(rank[u]==rank[v])
    rank[v]++;
}
int merge(int u,int v)
{
  u=findSet(u);
  v=findSet(v);
  if(u==v)
    return 0;
  doUnion(u,v);
  return 1;
}
int main()
{
  int t,n,m,u,v,w,i;
  long long ans;
  scanf("%d",&t);
  while(t--)
    {
      scanf("%d %d",&n,&m);
      scanf("%s",str);
      for(i=0;i<m;i++)
	{
	  scanf("%d %d %d",&u,&v,&w);
	  if(str[u-1]=='R')
	    u=0;
	  if(str[v-1]=='R')
	    v=0;
	  edge[i]=make_pair(w,make_pair(u,v));
	}
      for(i=0;i<=n;i++)
	{
	  setOf[i]=i;rank[i]=0;
	}
      sort(edge,edge+m);
      ans=0;
      for(i=0;i<m;i++)
	{
	  if(edge[i].f<=0)
	    {
	      merge(edge[i].s.f,edge[i].s.s);
	      ans+=edge[i].f;
	    }
	  else
	    {
	      if(merge(edge[i].s.f,edge[i].s.s))
		ans+=edge[i].f;
	    }
	}
      printf("%lld\n",ans);
    }
  return 0;
}
