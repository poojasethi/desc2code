#include "bits/stdc++.h"
#include<cstdio>
#include<algorithm>

using std::sort;
using std::string;
#define GC getc_unlocked(stdin)
struct IO{

	char cur;
	char tmp[1>>10];
	inline char nextChar(){ return cur=GC ;}
	inline char peekChar() { return cur; }
	inline operator bool() { return peekChar() ; }
	
	inline static bool isblank(char c) { return (c<'-' && c) ;}
	inline bool skipBlanks() { while (isblank(nextChar())); return peekChar() != 0; }
	
	inline IO& operator >> (char &c ) { c=nextChar(); return *this; }
	
	inline IO& operator >> (char *buf)
	 {
		if(skipBlanks())
		{
			if(peekChar())
			{
				*(buf++)=peekChar();
				while(!isblank(nextChar()))
				*(buf++)=peekChar();
			}
					*(buf++) = 0; 
		}
	
	return *this;
	}
	
		
		inline IO& operator >> (string & s){
		
		if(skipBlanks())
		{
			if(peekChar())
			{
				s.clear();
				s+=peekChar();
				while(!isblank(nextChar()))
					{
					s+=peekChar();
					}
			}

		}
			return *this;
		}
		
		inline IO& operator >> (double d)
		{
			*this >> tmp;
			sscanf(tmp,"%lf",&d);
			return *this;
		}
		
		#define defineInFor(intType) \
    inline IO& operator >>(intType & n) { \
    if (skipBlanks()) { \
    int sign = +1; \
    if (peekChar() == '-') { \
    sign = -1; \
    n = nextChar() - '0'; \
    } else \
    n = peekChar() - '0'; \
    while (!isblank(nextChar())) { \
    n += n + (n << 3) + peekChar() - 48; \
    } \
    n *= sign; \
    } \
    return *this; \
    }
     
    defineInFor(int)
    defineInFor(unsigned int)
    defineInFor(long long)
    
    // fast output routines
     
    //#define putChar(c) putc_unlocked((c), stdout)
    inline void putChar(char c) { putc_unlocked(c, stdout); }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
     
    inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
     
    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }
     
     
    #define defineOutFor(intType) \
    inline char * toString(intType n) { \
    char * p = (tmp + 30); \
    if (n) { \
    bool isNeg = 0; \
    if (n < 0) isNeg = 1, n = -n; \
    while (n) \
    *--p = (n % 10) + '0', n /= 10; \
    if (isNeg) *--p = '-'; \
    } else *--p = '0'; \
    return p; \
    } \
    inline IO& operator << (intType n) { return (*this) << toString(n); }
     
    defineOutFor(int)
    defineOutFor(long long)
     
    #define endl ('\n')
    #define cout __io__
    #define cin __io__
    } __io__;
    
    
    /*struct node{
    int cost;
    int x,y;
    };
    typedef struct node Node;
    Node N[400005];
    bool B[100005];
    bool cmp(Node n1,Node n2)
    {
    	return n1.cost<n2.cost;
    }
    unsigned int T,n,m,size;
    string str;
    int P[100005],SZ[100005];
		 typedef long long LL;
    
    int root(int a)
     {	
    if(P[a] == a)	return a;
    int p = root(P[a]);
    return P[a] = p;
    }
     
    bool find(int p,int q)
    {
    	return root(p)==root(q);
    }
    
    void uni(int p,int q)
    {
    	int rp=root(p);
    	int rq=root(q);
    //	cout<<"\n "<<p<<"'s root is "<<rp<<" and "<<q<<" 's root is "<<rq<<"\n";
    	B[p]=B[q]=B[p]||B[q];
    	if(SZ[rp]>=SZ[rq])
    	{
    		P[rq]=rp;
    		SZ[rp]=SZ[rp]+SZ[rq];
    		SZ[rq]=0;
    	}
    	else
    	{
    		P[rp]=rq;
    		SZ[rq]=SZ[rp]+SZ[rq];
    		SZ[rp]=0;
    	}
    }*/
       
    typedef long long LL;
     
    struct node
    {
    int x,y,cost;
    };
     
    typedef struct node Node;
     
    Node N[400005];
     
    bool cmp(Node N1 , Node N2)
    {
    return N1.cost < N2.cost;
    }
     
    int n,m;
     
    bool B[100005];
     
    int P[100005];
    int SZ[100005];
     
    int find(int a)
    {	
    if(P[a] == a)	return a;
    int p = find(P[a]);
    return P[a] = p;
    }
     
    bool issame(int a , int b)
    {
    return find(a) == find(b);
    }
    void uni(int a , int b)
    {
    int p1 = find(a);
    int p2 = find(b);
    B[p1] = B[p2] = B[p1] || B[p2] ;
    if(SZ[p1] > SZ[p2])
    {	
    P[p2] = p1;
    SZ[p1] += SZ[p2];
    SZ[p2] = 0;
    }
    else
    {
    P[p1] = p2;
    SZ[p2] += SZ[p1];
    SZ[p1] = 0;
    }
    }
    
    
    /*int main()
    {
    	unsigned int T;
    	int x,y,z,i,j,tr1,tr2,FLAGH=0,FLAGR=0;
    	cin>>T;
    	int ans[T],k=0;;
    	long long res;
    	while(T--)
    	{
    		res=0;
    		cin>>n;// number of houses 
    		cin>>m;// number of roads
    		cin>>str;
    		size=str.size();
    		for(i=0;i<m;i++)
    		{
    			cin>>x;
    			cin>>y;
    			cin>>z;
    			N[i].x=x-1;
    			N[i].y=y-1;
    			N[i].cost=z;
    		} // done with inputing the N;
    		sort(N,N+m,cmp);
    		cout<<"\n the N now is \n";
    		for(i=0;i<m;i++) // delete this line later
    		cout<<N[i].x+1<<" "<<N[i].y+1<<" "<<N[i].cost<<"\n";
    		
    		for(i=0;i<n;i++)
    			{
    				P[i]=i;
    				SZ[i]=1;
    				if(str[i]=='H')
    				{
    					B[i]=false;
    	
    				}
    				else
    				{
    					B[i]=true;
    					
    				}
    			}
    			for(i=0;i<m;i++)
    			{
    				z=N[i].cost;
    				x=N[i].x;
    				y=N[i].y;
    				if(z<0)
    				{
    					res+=z;
    					union1(x,y);
    				}
    				else
    				{
    				
									if(!find(x,y))
									{
										tr1=root(x);
										tr2=root(y);
										if(!B[tr1] || !B[tr2])
										{
										//	cout<<"\n now sending "<<x<<"("<<tr1<<")"<<" and "<<y<<"("<<tr2<<")"<<"\n";
											union1(x,y);
											res+=z;
										}
									}
							
    				}
    				
    			}
    			
    		cout<<res<<"\n";
    							
    	}
    	return 0;
    }*/
    long long re;
      int main()
    {
    int t;
    cin >> t;
    while(t--)
    {	
    string str;
    cin >> n >> m;
    cin >> str;
    for(int i = 0 ; i < n ; ++i)	
    {
    if(str[i] == 'R')	B[i] = true;
    else	B[i] = false;
    }
    for(int i = 0 ; i < m ; ++i)
    {
    cin >> N[i].x >> N[i].y >> N[i].cost;
    N[i].x--;
    N[i].y--;
    }
    sort(N,N+m,cmp);
    for(int i = 0 ; i < n ; ++i)	P[i] = i;
    for(int i = 0 ; i < n ; ++i)	SZ[i] = 1;
     
    LL re = 0;
     
    for(int i = 0 ; i < m ; ++i)
    {
    if(N[i].cost <= 0)	uni(N[i].x,N[i].y) , re += N[i].cost;
    else
    {
    if(!issame(N[i].x,N[i].y))
    {
    int p1 = find(N[i].x);
    int p2 = find(N[i].y);
    if(!B[p1] || !B[p2])	uni(N[i].x,N[i].y) , re += N[i].cost;
    }
    }
    }
    cout << re << endl;
    }
    return 0;
    } 
    
    