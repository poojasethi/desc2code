#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define P printf
#define PN printf("\n");
#define PR(a) printf("%d",a);
#define PRN(a) printf("%d\n",a);

using namespace std;

#define ll long long
#define X first
#define Y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a)*(a))
#define FR(i,n) for (int i = 0; i < (n); i++)
#define DN(i,a) for(int i = (a)-1; i >= 0; i--)
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define DOWN(i,a,b) for(int i = (a); i >= (b); i--)
#define FORV(i,a) for(typeof(a.begin()) i = a.begin(); i != a.end(); i++)
#define Set(a,c) memset(a, c, sizeof(a))
#define INF 1000000000
#define MAXN 100005
#define S(a) scanf("%d",&a);
#define SN(a) printf("%d\n",a);
#define SORT(a) sort(a.begin(),a.end());
#define RSORT(a) sort(a.rbegin(),a.rend());
#define print_array(a,i,n) for(i=0;i<n;i++)cout<<a[i]<<" "; cout<<"\n";
#define print_matrix(a,i,j,row,col)FOR(i,0,row-1){FOR(j,0,col-1)cout<<a[i][j];cout<<"\n";}
#define sz(a) a.size()
#define mem(a,val) memset(a,val,sizeof(a));typedef pair<int, int> PII;
#define MOD 1000000007


#define LIM 500000
typedef vector<int> VI;
typedef vector < VI > VII;
typedef pair<int , int > pi;
int isR[LIM],par[LIM],sizee[LIM];
string str;
vector< pair< int , pair<int,int> > >con;

int find(int a)
{
	if(par[a]!=a)
	   par[a]=find(par[a]);
    return par[a];
}

void union_(int a , int b)
{
	if(sizee[a]>=sizee[b])
	{
		par[b]=par[a];
		sizee[a]+=sizee[b];
        // if b had any R , so now a will also have
		isR[a]=isR[a]|isR[b];
	}
	else
	{
		par[a]=par[b];
		sizee[b]+=sizee[a];

		isR[b]=isR[b]|isR[a];
	}
}

int main ()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
int t,i,j,k,n,m,val,row,col,a,b,from,to;
ll cost,ans;
scanf("%d",&t);
// isR ==1 if the conected component contains atleast 1 Resturant
while(t--)
{
  con.clear();
 // mem(isR,0);
//mem(sizee,1);
  ans=0;
  scanf("%d %d",&n,&m);
  cin>>str;
  str="a"+str;// make 1 based

  FOR(i,1,n){
    par[i]=i;
    isR[i]=0;
    sizee[i]=1;
  }

  FOR(i,0,m-1){
  	scanf("%d %d %lld",&a,&b,&cost);

   if(str[a]=='R') isR[a]=1;
   if(str[b]=='R') isR[b]=1;

   con.pb(mp(cost, mp(a,b)));
  }

  // sort by cost
  SORT(con);

  if(con.size()>0)
  FOR(i,0,con.size()-1)
  {
  	cost=con[i].first;
  	pi hi = con[i].second;
  	from = hi.first;
  	to= hi.second;

    //cout<<from <<" "<<to<<" "<<cost<<"\n";

    int X=find(from);
    int Y=find(to);
  	if(X!=Y && ((isR[X]&isR[Y])==0))
	{
		//union_(X,Y);
		par[X]=Y;
		isR[Y] |= isR[X];
		ans+=cost;
	}
	else if(cost<0)ans+=cost;
  }
printf("%lld\n",ans);
}
 return 0;
}
