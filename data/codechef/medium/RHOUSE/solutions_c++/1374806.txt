    #include <vector>
    #include <list>
    #include <map>
    #include <set>
    #include <queue>
    #include <deque>
    #include <stack>
    #include <bitset>
    #include <algorithm>
    #include <functional>
    #include <numeric>
    #include <utility>
    #include <sstream>
    #include <iostream>
    #include <iomanip>
    #include <cstdio>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
     
    #define Si(a) scanf("%d",&(a))
    #define F(i,a,b) for(int i=a;i<b;i++)
    #define S scanf
    #define L long
     
    int n;
     
    int P[100005];
    int R[100005];
    char typ[100005];
    void init() {
    for(int i=0;i<n;i++) {
    P[i]=i;
    if(typ[i]=='R')
    R[i]=1000000;
    else
    R[i]=0;
    }
    }
     
    int find(int a) {
    if(P[a] == a) return a;
    return P[a] = find(P[a]);
    }
     
     
    void join(int a, int b) {
    a=find(a);
    b=find(b);
    if(R[a]<R[b]) P[a] = b;
    else {
    P[b] = a;
    if(R[a] == R[b]) R[a]++;
    }
    }
     
     
    using namespace std;
    //////global
     
     
    /////func
     
     
    int main(){
     
    int t;
    pair< int ,pair< int ,int > > edge[400005];
    int m;
     
    Si(t);
    while(t--){
    
    long long int sum=0;
    
    Si(n);
     
    Si(m);
    S("%s",typ);
     
    int u, v,c;
    F(i,0,m){
    S("%d %d %d",&u,&v,&c );
    edge[i].first= c;
    edge[i].second.first= u-1;
    edge[i].second.second= v-1;
    }
    sort(edge,edge+m);
    
    init();
     
    int a,b;

    F(i,0,m){
    if(edge[i].first<0)
    {
    sum+=edge[i].first;
join(edge[i].second.first,edge[i].second.second);    
}
else{
    if(typ[edge[i].second.first]=='R' && typ[edge[i].second.second]=='R')
    continue;
    a=find( edge[i].second.first);
    b=find(edge[i].second.second);
    if(a==b)
    continue;
    if(typ[a]=='R'&& typ[b]=='R')
    continue;
    join( a,b);
    sum+=edge[i].first;
    }}
    printf("%lld\n",sum);
    }
    return 0;
    }
