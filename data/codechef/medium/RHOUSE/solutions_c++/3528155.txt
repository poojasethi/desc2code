#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;
 
typedef long long ll;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vs;
typedef pair< int ,int > pii;
typedef vector <ll> vll;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)
 
#define S 6*100000*2*10
char IN[S],*iptr;
 
struct fastIO
{
	fastIO()
	{
		fread(IN,1,S,stdin);
		iptr=IN;
	}
	void check()
	{
		int size=IN+S-iptr;
		if(size<200)
		{
			memcpy(IN,iptr,size);
			fread(IN+size,1,S-size,stdin);
			iptr=IN;
		}
	}
	
	int sc()
	{
		check();
		while(*iptr<=32) iptr++;
		int x=0,sign;
		if(*iptr=='-') {
			sign=1; iptr++;
		} else sign = 0;
		while(*iptr>32) x= x*10 + *iptr++ -'0';
		return sign?-x:x;
	}
	void ssc(char *s) {
		check();
		while(*iptr<=32) iptr++;
		int i=0;
		while(*iptr>32) *(s+i) = *iptr++, i++;
		*(s+i) = '\0';
	}
};
fastIO io;
 
#define N 100020
#define M N*4
 
class disSet {
	// Disjoint Set Data Structure With Path Decompression and Rank Heuristics 
	public:
	int rank[N],p[N],n,nn;
	disSet() { }
	disSet( int n ) { init(n); }
	void init(int _n) { n=nn=_n; rep(i,n) rank[i]=0,p[i]=i; }
	int find( int a ) { if(p[a]!=a) p[a]=find(p[a]); return p[a]; }
	void join(int a,int b) {
		int pa=find(a),pb=find(b);
		if(pa != pb) {
			nn--;
			if( rank[pa] > rank[pb] ) p[pb] = pa;
			else p[pa] = pb;
			if(rank[pa] == rank[pb]) rank[pb]++;
		}
	}
};
 
struct edge {
	int u,v,c;
	edge() { }
	edge(int u, int v, int c) : u(u), v(v), c(c) { }
}el[M];
 
bool cmp_c(edge a, edge b) {
	return a.c<b.c;
}
	
char s[N];
int ma[N];
void testcase() {
	int n,m,c=0,e=0,u,v,co,i;
	ll ans=0;
	n = io.sc(); m = io.sc();
	io.ssc(s);
	rep(i,n) if(s[i]=='H') ma[i]=c++;
	disSet d(c+1);
	rep(i,m) {
		u = io.sc()-1;
		v = io.sc()-1;
		if(s[u]=='R') u=c;
		else u = ma[u];
		if(s[v]=='R') v=c;
		else v = ma[v];
		co = io.sc();
		if(co<=0) {
			d.join(u,v);
			ans += co;
			continue;
		}
		if(u==c && v==c) continue;
		el[e++] = edge(u,v,co);
	}
	sort(el,el+e,cmp_c); i = 0; edge cur;
	while(d.nn && i<e) {
		cur = el[i++];
		if(d.find(cur.u) != d.find(cur.v)) {
			d.join(cur.u,cur.v);
			ans += cur.c;
			co--;
		}
	}
	printf("%lld\n",ans);
}
 
int main() {
	int t=io.sc();
	while(t--) testcase();
	return 0;
} 