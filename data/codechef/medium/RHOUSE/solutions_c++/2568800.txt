#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef long long LL;
typedef long double LD;
typedef vector <int> VI;
typedef vector <double> VD;
typedef vector <VI> VVI;
typedef pair <int,int> PII;
typedef vector <PII > VPII;
typedef pair <double, double> PDD;
typedef vector <PDD> VPDD;

#define SZ(a) int((a).size())
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define PRESENT(c,x) ((c).find(x) != (c).end())
#define NOT_PRESENT(c,x) (find(all(c),x) != (c).end())
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define FI first
#define SE second
#define INPUT(a) freopen (a, "r", stdin)
#define OUTPUT(a) freopen (a, "w", stdout)
#define MAXN 100000

/* Main Code Starts Now 
 * Author : Praveen Dhinwa
 * Handle : 	Spoj, praveen123
 * 		Topcoder, praveen123
 * 		Codeforces, MohallaBoy
 * College : IIT Kanpur.
 * Email id : praveendhinwa@gmail.com  
 */

const int N = 100000 + 5;

char s[N];

int parent [N], rank[N];

void createSet (int n)
{
    for (int i = 0; i < n; i++)
    {
        parent[i] = i;
        rank[i] = 0;
    }
}

int findSet (int u)
{
    if (parent[u] == u) return u;
    return parent[u] = findSet (parent[u]);
}

void mergeSet (int u, int v)
{
    if (findSet (u) == findSet (v))
        return;
    int pu = findSet (u);
    int pv = findSet (v);

    if (rank[pu] > rank[pv])
    {
        parent[pv] = pu;    
    }
    else
    {
        parent[pu] = pv;
    }

    if (rank[pu] == rank[pv])
    {
        rank[pv] ++;
    }
}

struct edge 
{
    int x, y, cost;

    edge (int _x, int _y, int _cost)
    {
        x = _x;
        y = _y;
        cost = _cost;
    }

    bool operator < (const edge &rhs) const
    {
        return cost < rhs.cost;
    }
};

int main()
{
    int T;
    scanf ("%d", &T);
    while (T--)
    {
        int n, m;
        scanf ("%d %d", &n, &m);
        scanf ("%s", &s);
        
        vector <edge> E;

        for (int i = 0; i < m; i++)
        {
            int x, y, cost;
           
            scanf ("%d %d %d", &x, &y, &cost);

            x --;
            y --;
            
            E.push_back (edge (x, y, cost));
        }

        for (int i = 0; i < n; i++)
        {
            if (s[i] == 'R')
            {
                E.push_back (edge (n, i, 0));
            }
        }

        sort (E.begin(), E.end());

        createSet (n + 1);

        long long ans = 0;

        for (int i = 0; i < E.size(); i++)
        {
            int u = E[i].x;
            int v = E[i].y;
            int cost = E[i].cost;

            if (cost < 0 || (findSet (u) != findSet(v)))
            {
                mergeSet (u, v);
                ans += cost;
            }
        }

        printf ("%lld\n", ans);
    }

    return 0;
}
