#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
typedef long long ll;
typedef pair<int,int> ii;

const int MAXN = 100005;
const int MAXM = 400005;

int n, m, t;
pair<int, ii> z[MAXM];
char building[MAXN];

int a[MAXN];

int find(int i) {
	if (a[i]==i) return i;
	a[i]=find(a[i]);
	return a[i];
}

void merge(int i, int j) {
	a[find(i)] = find(j);
}

bool canMerge(int i, int j) {
	if (find(i) != find(j)) return true;
	return false;
}

int main() {
	//freopen("in.txt", "r", stdin);
	scanf("%d", &t);
	while (t--) {
		scanf("%d%d", &n, &m);
		scanf("%s", building);
		for (int i=0; i<n; i++) {
			a[i] = i;
		}
		ll ans = 0;
		int price, l, r;
		for (int i=0; i<m; i++) {
			scanf("%d %d %d", &l, &r, &price);
			l--; r--;
			z[i] = pair<int, ii>(price, ii(l,r));
		}
		sort(z, z+m);

		int i;
		for (i = 0; i<n; i++) if (building[i]=='R') break;
		for (int j=i+1; j<n; j++) if (building[j]=='R') merge(i, j);

		for (i=0; i<m; i++) {
			l = z[i].second.first;
			r = z[i].second.second;
			price = z[i].first;
			if (price<=0 || canMerge(l, r)) {
				merge(l,r);
				ans = ans+price;
			}
		}
		printf("%lld\n", ans);
	}
	return 0;
}