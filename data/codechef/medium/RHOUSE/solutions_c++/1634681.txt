/* 
 * File:   main.cpp
 * Author: anurag
 *
 *
 */

#include <stdio.h>
#include<algorithm>

#define SIZE 410005

using namespace std;



char type_arr[SIZE];

int start[SIZE];
int end[SIZE];

pair<int,int>road[SIZE];

int T,N,M;


/* Union-find*/
int parent[SIZE];
int size[SIZE];
int nrest[SIZE];



int find(int x)
{
    if(x==parent[x])
        return x;
    else
    {
        return parent[x]=find(parent[x]);
    }
}

inline void attach(int x,int y)
{
    int a=find(x);
    int b=find(y);
    if(a!=b)
    {
        if(size[a]>=size[b])
        {
            size[a]+=size[b];
            nrest[a]+=nrest[b];
            parent[b]=a;
        }
        else
        {
            size[b]+=size[a];
            nrest[b]+=nrest[a];
            parent[a]=b;
        }
    }   
    
}

inline void initialize(int v)
{
    int i;
    for(i=1;i<=v;i++)
    {
        parent[i]=i;
        size[i]=1;
        if(type_arr[i-1]=='R')//if the i-th building is a restaurant
           nrest[i]=1;
        else
            nrest[i]=0;
    }
}
/*End of union find*/
/*
 * 
 */







int main() 
{
    int i,a,b;
    long long netcost;
    int ctr;
    int s,e,c,x,y;
    scanf("%d",&T);
    
    
    while(T--)
    {
        netcost=0;
        ctr=0;
        scanf("%d%d",&N,&M);
        
        
        //scanf("%s",type_arr);
        gets(type_arr);
        gets(type_arr);
        initialize(N);
        
        for(i=0;i<M;i++)
        {
           scanf("%d%d%d",&s,&e,&c);
           if(c<=0)//must include all profitable edges!
             {
               netcost+=c;
               attach(s,e);
             }
           else
           {
               road[ctr].first=c;
               road[ctr].second=ctr;
               start[ctr]=s;
               end[ctr]=e;
               ctr++;
           }
        }
        
        //sort the edges in non-decreasing order
        sort(road,road+ctr);
        
        for(i=0;i<ctr;i++)
        {
            x=start[road[i].second];
            y=end[road[i].second];
            a=find(x);
            b=find(y);
            
            if(a!=b && (nrest[a]==0 || nrest[b]==0))//belong to different sets
            {
                  attach(x,y);
                  netcost+=road[i].first;
            }
        }
        
        printf("\n%lld",netcost);
    }
    return 0;
}

/*
6 
10 12 
HHHHRRRHHH
1 2 3 
1 3 -1 
1 4 4 
4 5 -6
5 7 10 
5 6 15 
6 7 -10 
7 8 7 
8 9 8 
9 10 3 
10 6 9 
2 3 2 
3 5
HHR
1 2 3
1 2 5
1 3 10
3 2 -1
3 1 7
2 2
RR
1 2 1
2 1 2
3 3
HRR
1 2 1
1 3 2
2 3 3 
3 3
HRH
1 2 20000
1 3 20000
2 3 20000
4 6 
RRRH
1 2 0
2 3 0
1 4 8
2 3 0
1 2 0
2 4 0

7 
2 
0 
1
40000 
10 
*/