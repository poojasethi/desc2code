/* bhupkas */

using namespace std;

#include "bits/stdc++.h"



using std::string;

static struct IO {
	char tmp[1 << 10];

	// fast input routines
	char cur;

//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }

	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

	inline IO& operator >> (char & c) { c = nextChar(); return *this; }

	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }

	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }

	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}

defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)

	// fast output routines

//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }


#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }

defineOutFor(int)
defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;






typedef long long LL;

struct node
{
	int x,y,cost;
};

typedef struct node Node;

Node N[400005];

bool cmp(Node N1 , Node N2)
{
	return N1.cost < N2.cost;
}

int n,m;

bool B[100005];

int P[100005];
int SZ[100005];

int find(int a)
{	
	if(P[a] == a)	return a;
	int p = find(P[a]);
	return P[a] = p;
}

bool issame(int a , int b)
{
	return find(a) == find(b);
}
void uni(int a , int b)
{
	int p1 = find(a);
	int p2 = find(b);
	B[p1] = B[p2] = B[p1] || B[p2] ;
	if(SZ[p1] > SZ[p2])
	{	
		P[p2] = p1;
		SZ[p1] += SZ[p2];
		SZ[p2] = 0;		
	}
	else
	{
		P[p1] = p2;
		SZ[p2] += SZ[p1];
		SZ[p1] = 0;
	}
}

int main()
{
	int t;
	cin >> t;
	while(t--)
	{	
	
		string str;
		cin >> n >> m;
		cin >> str;
		
		for(int i = 0 ; i < n ; ++i)	
		{
			if(str[i] == 'R')	B[i] = true;
			else	B[i] = false;
		}
		
		for(int i = 0 ; i < m ; ++i)
		{
			cin >> N[i].x >> N[i].y >> N[i].cost;
			N[i].x--;
			N[i].y--;	
		}
		
		sort(N,N+m,cmp);
		
		for(int i = 0 ; i < n ; ++i)	P[i] = i;
		for(int i = 0 ; i < n ; ++i)	SZ[i] = 1;

		LL re = 0;

		for(int i = 0 ; i < m ; ++i)
		{
			if(N[i].cost <= 0)	uni(N[i].x,N[i].y) , re += N[i].cost;
			else
			{
				if(!issame(N[i].x,N[i].y))
				{
					int p1 = find(N[i].x);
					int p2 = find(N[i].y);
					if(!B[p1] || !B[p2])	uni(N[i].x,N[i].y) , re += N[i].cost; 
				}
			}
		}
		cout << re << endl;
	}
	return 0;
}