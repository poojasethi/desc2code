#include <bits/stdc++.h>
#define maxn 100001
#define maxm 400001

using namespace std;
typedef long long lint;
typedef pair<int,int> II;
typedef pair<int,II> III;

int n, m;
III edge[maxm];
int loai[maxn], lt[maxn], sol[maxn];

int tim(int u) {
    if (lt[u]==u) return u;
    lt[u]=tim(lt[u]);
    return lt[u];
}

void nhap(int u,int v) {
    u=tim(u); v=tim(v);
    if (u!=v) {
        if (sol[u]<sol[v]) {
            sol[v]+=sol[u];
            lt[u]=v;
            loai[v]=(loai[v] | loai[u]);
        } else {
            sol[u]+=sol[v];
            lt[v]=u;
            loai[u]=(loai[u] | loai[v]);
        }
    }
}

void read_in() {
    scanf("%d%d\n",&n,&m);
    for(int i=1;i<=n;i++) {
        char c; scanf("%c",&c);
        if (c=='R') loai[i]=1; else loai[i]=0;
    } scanf("\n");
    for(int i=1;i<=m;i++) {
        int u,v,w; scanf("%d%d%d\n",&u,&v,&w);
        edge[i]=III(w,II(u,v));
    }
}

void solve() {
    sort(edge+1,edge+m+1);
    for(int i=1;i<=n;i++) {lt[i]=i; sol[i]=1;}
    lint ds=0;
    for(int i=1;i<=m;i++) {
        int u=edge[i].second.first, v=edge[i].second.second;
        int w=edge[i].first;
        if (w<0) {
            ds+=w;
            nhap(u,v);
        } else {
            u=tim(u); v=tim(v);
            if (u!=v && (loai[u]==0 || loai[v]==0)) {
                ds+=w;
                nhap(u,v);
            }
        }
    }
    printf("%lld\n",ds);
}

int main() {
    //freopen("inp.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int T; scanf("%d\n",&T);
    while (T--) {
        read_in();
        solve();
    }
}
