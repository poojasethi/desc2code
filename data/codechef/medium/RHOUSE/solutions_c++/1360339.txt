#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 400010;

int pre[N],flag[N];
char s[N];

int find(int x)
{
	if(pre[x] == -1) return x;
	return pre[x] = find(pre[x]);
}

struct point
{
	int x,y,z;
	point() {}
	point(int x,int y,int z):x(x),y(y),z(z) {}
	friend bool operator < (const point &p,const point &q) {
		return p.z < q.z;
	}
}a[N];

int main()
{
	int t,n,m,x,y,z;
	scanf("%d",&t);
	while(t --) {
		scanf("%d%d",&n,&m);
		fill(pre,pre + n + 10,-1);
		fill(flag,flag + n + 10,0);
		scanf("%s",s + 1);
		for(int i = 1; i <= n; i ++)
			if(s[i] == 'R') flag[i] = 1;
		int tot = 0;
		for(int i = 1; i <= m; i ++) {
			scanf("%d%d%d",&x,&y,&z);
			a[++ tot] = point(x,y,z);
		}
		sort(a + 1,a + tot + 1);
		long long ans = 0;
		for(int i = 1; i <= tot; i ++) {
			x = find(a[i].x);
			y = find(a[i].y);
			if(a[i].z <= 0) {
				ans += a[i].z;
				if(x != y) {
					pre[x] = y,flag[y] |= flag[x];
				}
			}
			else {
				if(flag[x] && flag[y]) continue;
				if(x == y) continue;
				ans += a[i].z;
				pre[x] = y,flag[y] |= flag[x];
			}
		}
		cout << ans << endl;
	}
	return 0;
}


