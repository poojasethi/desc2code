#include<bits/stdc++.h>
#include<algorithm>
#include<cstdio>

using namespace std;

#define maxV 100005
#define maxE 400005
#define gc getchar_unlocked

vector < pair<int , pair<int,int> > > V;
int parent[maxV],rank[maxV],vis[maxV];
int A[maxE][3];
char str[maxV];



//UNION BY RANK AND PATH COMPRESSION
int find(int a)
{
if(a!=parent[a])
parent[a]=find(parent[a]);

return parent[a];
}

void Union(int x,int y)
{
if(rank[x]>rank[y])	//distance of node x to root is more
parent[y]=x;
else if( rank[x]==rank[y] )
{
parent[x]=y;
rank[y]++;	
}
else
parent[x]=y;
}



int main()
{
int N,i,M;
//cin>>vertex_count;
int T;
scanf("%d",&T);


while(T--)
{
long long int weight=0;
scanf("%d%d%s",&N,&M,str);
for(i=0;i<=N;i++)
{
parent[i]=i;	
rank[i]=0;
vis[i]=0;
}



for(i=0;str[i]!='\0';i++)
if(str[i]=='R')
break;

int r1=i+1;

for(i=r1;str[i]!='\0';i++)
if(str[i]=='R')
{
int p1=find(r1);
int p2=find(i+1);
Union(p1,p2);
}

V.clear();

for(i=0;i<M;i++)
{
scanf("%d%d%d",&A[i][1],&A[i][2],&A[i][0]);
//cout<<A[i][1]<<A[i][2]<<A[i][0]<<endl;

if(A[i][0] < 0)
{
weight+=A[i][0];
int p1=find(A[i][1]);
int p2=find(A[i][2]);
Union(p1,p2);
}
else
{
V.push_back ( make_pair(A[i][0],make_pair(A[i][1],A[i][2] ) ) );
V.push_back ( make_pair(A[i][0],make_pair(A[i][2],A[i][1] ) ) );
}

}

//cout<<"weight "<<weight<<endl;

vector < pair<int , pair<int,int> > > :: iterator it;

sort(V.begin(),V.end() );


for(it=V.begin();it!=V.end();it++)
{

int p1=find( it->second.first);
int p2=find( it->second.second);
if( p1!=p2)
{
weight+=it->first;
Union(p1,p2);
}

}

printf("%lld\n",weight);
}

return 0;
}


