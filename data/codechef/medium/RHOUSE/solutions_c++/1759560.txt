#include <cstring>
#include <string>
#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
 
using namespace std;
typedef long long int64;
struct edge {
  int u,v,cost;
 
  bool operator<(const edge & other) const {
     return cost<other.cost;
  }
};
 
#define MAX 100005
#define MAXN  400005
char info[MAX];
int tcase,n,m,par[MAX];
edge E[MAXN];
 
int findpar(int v){
  if(par[v]==v) return par[v];
  par[v] = findpar(par[v]); return par[v];
}
 
int main(){
  for(scanf("%d",&tcase); tcase; tcase-=1){
    scanf("%d%d",&n,&m); scanf("%s",info);
    for(int i=0; i<m; ++i){
      scanf("%d%d%d",&E[i].u,&E[i].v,&E[i].cost); E[i].u -= 1; E[i].v -= 1;
    }
    sort(E,E+m);
    for(int i=0; i<n; ++i)
      if(info[i]=='R') par[i]=n; else par[i]=i;
    par[n] = n;
    int64 res = 0;
    for(int i=0; i<m; ++i){
      int u = E[i].u; int v = E[i].v; 
      int pu = findpar(u); int pv = findpar(v);
      if(pu==pv && E[i].cost<0) res += E[i].cost;
      if(pu!=pv) { par[min(pu,pv)] = max(pu,pv); res += E[i].cost; }
    }
    printf("%lld\n",res);
  }
  return 0;
} 