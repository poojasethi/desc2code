#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>


using namespace std;
typedef pair<int,int> II;
    vector<int>parent;
    vector<int>rank;

    void make_set(int i)
    {
        parent.push_back(i);
        rank.push_back(0);
    }
int findset(int x)
{
	if(parent[x]!=x)
		parent[x]=findset(parent[x]);
	return parent[x];
}
bool merge(int x,int y)
{
	x=findset(x);
	y=findset(y);
	if(x!=y)
	{
		if(rank[y]>rank[x])
			parent[x]=y;
		else
		{
			if(rank[x]==rank[y])
				rank[x]++;
			parent[y]=x;
		}
		return true;
	}
	else
		return false;
}


int main()
{
    ios::sync_with_stdio(false);
    int t;
    cin>>t;
    while(t--)
    {
        parent.clear();
        rank.clear();
        int n,m;cin>>n>>m;
        char s[100010];
        cin>>s;
        int pos=-1;
        for(int i=0;i<n&&pos==-1;i++)
            if(s[i]=='R')
                pos=i;
        for(int i=0;i<n;i++)
           {
               make_set(i);
           }
        for(int i=0;i<n;i++)
            {
                if(s[i]=='R')
                 if(findset(i)!=findset(pos))
                 {
                    merge(i,pos);
                 }
            }
        vector< pair<int,II > >v;
        long long int ans=0;
        for(int i=0;i<m;i++)
        {
            int a,b,c;cin>>a>>b>>c;
            a--;b--;
            v.push_back(make_pair(c,make_pair(a,b)));//cost,edges
            if(c<=0)
            {
                ans+=c;
                if(findset(a)!=findset(b))
                    merge(a,b);
            }
        }
        sort(v.begin(),v.end());
        for(int x=0;x<m;x++)
        {
            if(v[x].first<=0)continue;
            int k=findset(v[x].second.first);
            int l=findset(v[x].second.second);
            if(k!=l)
            {
                if(s[k]==s[l]&&s[k]=='R'){continue;}
                if(s[k]==s[l]&&s[k]=='H')
                {
                    ans+=v[x].first;
                    merge(v[x].second.first,v[x].second.second);
                }
                else
                {
                    ans+=v[x].first;
                    merge(v[x].second.first,v[x].second.second);
                    s[k]=s[l]='R';
                }
            }
        }
        cout<<ans<<"\n";
    }
    return 0;
}