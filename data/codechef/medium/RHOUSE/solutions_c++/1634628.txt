#include <vector>
#include <list>
#include <map>
#include <set>
#include <numeric>
#include <utility>
#include <sstream>
#include <cstring>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <sstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <deque>
#include <stack>
#include <climits>
#include <algorithm>
#include <cassert>
using namespace std;

//disjoint set ds
vector<int>parent;
vector<int>rank;
char s[100009];
int n,j;

#define GETC getchar
#define GETF(a) a=getint();
#define NS string::npos
int getint() {
char c = 'a',c2 ;
while (!isdigit(c) && c != '-') c = GETC();
c2 = c;
bool minus=0;
if(c2=='-'){minus=1;c2=GETC();}
int res = 0;
while (isdigit(c2)) {
res = (res << 3) + (res << 1) + (c2 - '0');
c2 = GETC();
}
return (minus==1)?-res:res;
}

void make_set(int i)
{
    parent.push_back(i);
    rank.push_back(0);
}
int findset(int x)
{
    if(parent[x]!=x)
   	 parent[x]=findset(parent[x]);
    return parent[x];
}
bool merge(int x,int y)
{
    x=findset(x);
    y=findset(y);
    if(x!=y)
    {
   	 if(rank[y]>rank[x])
   		 parent[x]=y;
   	 else
   	 {
   		 if(rank[x]==rank[y])
   			 rank[x]++;
   		 parent[y]=x;
   	 }
   	 return true;
    }
    else
   	 return false;
}


int main()
{
    int t,m,x,y,z,u,w;
    t=getint();
    long long ans;
    while(t--)
    {
        parent.clear();
        rank.clear();
        ans=0;
        n=getint(),m=getint();
        scanf("%s",s);
        vector<pair<int,pair<int,int> > >v;
        int pos=-1;
        for(int i=0;i<n&&pos==-1;i++)
            if(s[i]=='R')
                pos=i;
        for(int i=0;i<n;i++)
               make_set(i);
        for(int i=0;i<n;i++)
                if(s[i]=='R')
                 if(findset(i)!=findset(pos))
                    merge(i,pos);
        for(int i=0;i<m;i++)
        {
            x=getint(),y=getint(),z=getint();
            v.push_back(make_pair(z,make_pair(x-1,y-1)));
        }
        sort(v.begin(),v.end());
        int k=v.size();
        for(int i=0;i<k;i++)
        {
            //cout<<v[i].second.first<<" and "<<v[i].second.second<<endl;
            int u=findset(v[i].second.first),w=findset(v[i].second.second);
            if(v[i].first<=0)
            {
                ans+=v[i].first;
                if(u!=w)
                    merge(u,w);
                if(s[v[i].second.first]=='R'||s[v[i].second.second]=='R')
                s[v[i].second.first]=s[v[i].second.second]='R';
            }
            else
            {
                if(s[v[i].second.first]=='R'&&s[v[i].second.second]=='R') continue;
                if(s[v[i].second.first]=='R'||s[v[i].second.second]=='R')
                    s[v[i].second.first]=s[v[i].second.second]='R';
                if(u!=w)
                {
                    ans+=v[i].first;
                    merge(u,w);
                }
            }
        }
        printf("%lld\n",ans);
    }
    return 0;
}
