#include <stdio.h>
#include <math.h>
#include <string.h>
#define ll long long
ll dig_array[20];
ll cumulative[20];
ll fact[10];
int isDel(ll R)
{
	int hash[10],f=1,x;
	memset(hash,0,sizeof(hash));
	while(R>0)
	{
		x=R%10;
		if(hash[x]==1)
		{
			f=0;
			break;
		}
		hash[x]=1;
		R=R/10;
		
	}
	if(f==1)
	return 1;
	else 
	return 0;
}
void precompute()
{
	dig_array[1]=9;
	ll f,k;
	int i,j;
	for(i=2;i<=10;i++)
	{
		f=9;
		k=9;
		for(j=1;j<=i-1;j++)
		{
			f=f*k;
			k--;
		}
		dig_array[i]=f;
	}
	
	for(i=1;i<=19;i++)
	{
      cumulative[i]=dig_array[i]+cumulative[i-1];
	}
	fact[0]=1;
	fact[1]=1;
	for(i=1;i<=9;i++)
	fact[i]=i*fact[i-1];
	
	
}
ll compute1(ll R)
{
	if(R==0)
	return 0;
	else
	{
	int idx=log10(R);
	return cumulative[idx];
    }
	
}
ll compute2(ll R)
{
	if(R==0)
	return 0;
	else
	{
	int idx=1,i,cnt,k=9,j;
	ll num_array[20];
	int hash[10];
	memset(hash,0,sizeof(hash));
	ll sum=0,R1=R;
	while(R>0)
	{
		num_array[idx++]=R%10;
		R=R/10;
	}
	if((idx-1)>10)
	return 0;
	else
	{
		sum=sum+(num_array[idx-1]-1)*(fact[9]/fact[9-idx+2]);
	    hash[num_array[idx-1]]=1;
	    k=9;
	    for(i=idx-2;i>=1;i--)
	    {
	    	k=k-1;
	    	cnt=0;
	    	for(j=0;j<=num_array[i]-1;j++)
	    	{
	    		if(hash[j]==1)
	    		cnt+=1;
	    	}
	    		    	
	    	
	    	sum=sum+(num_array[i]-cnt)*(fact[k]/fact[k-i+1]);
	        if(hash[num_array[i]]==1)
	    	break;
	    	hash[num_array[i]]=1;

	    	
	   }
	   R=R1;
	   if(isDel(R))
	   sum+=1;
	   
		return sum;
		
	}
    }
    
	
	
}
int main()
{
	int i;
	precompute();
	int t;
	ll sum1,L,R,sum2;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%lld %lld",&L,&R);
		sum1=compute1(R)-compute1(L-1);
		sum2=compute2(R)-compute2(L-1);
		printf("%lld\n",sum2+sum1);
	}
    return 0;	
}