#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cassert>
using namespace std;


vector<long long>dn;
long long L, R;

int build(int len, long long a, bool m[10])
{
    bool mcopy[10];
    long long  acopy;
    if(len == 0)dn.push_back(a);
    else
    {
        for(int i=0; i<10; i++)
        {

            if(m[i]== 0)
            {
                for(int j=0; j<10; j++)
                {
                mcopy[j] = m[j];
                }
                mcopy[i] = 1;
                acopy= a*10 + i;
                build(len-1, acopy, mcopy);
            }
        }
    }
}
void print()
{
    for(int i=0; i<dn.size(); i++)
    {
        cout<<dn[i]<<endl;
    }
}

void precompute()
{
    dn.clear();
    bool mark[10];
    for(int i=0; i<10; i++)
        mark[i] = 0;
    bool markcopy[10];

   for(int k=0; k<10; k++)
   {

        for(long long i=1; i<10; i++)
        {
            for(int j=0; j<10; j++)
            markcopy[j] = mark[j];

            markcopy[i] = 1;
            build(k, i, markcopy);
        }
   }
  // print();
   //cout<<endl;
   //sort(dn.begin(), dn.end());

   //print();
}
int getr(long long n){
  int a, b, c;
  a = 0; b = dn.size();
  while(a<b){
    c = (a+b)/2;
    if(dn[c] <= n) a = c+1; else b = c;
  }
  return a;
}
void solve()
{
    long long one = 1;
    scanf("%lld%lld", &L, &R);
    int ans = lower_bound(dn.begin(), dn.end(), R+one) - lower_bound(dn.begin(), dn.end(), L);
  //  cout<<lower_bound(dn.begin(), dn.end(), R+one)- dn.begin()<<" "<<lower_bound(dn.begin(), dn.end(), L)- dn.begin()<<endl;
    printf("%d\n", ans);
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output1.txt","w",stdout);
    #endif
    precompute();
    int t;
    scanf("%d", &t);

    while(t--)
    {
        solve();
    }
}
