#include <iostream>
#include <cstdio>

#define LIMIT 10000000000ULL

using namespace std;

int delcount[11];
int comb[9][9];

int count(unsigned long long n) {
  if (n == 0) return 0;

  int cnt = 0;
  int nd[20];
  unsigned long long x = n;
  while (x > 0) {
    nd[cnt++] = x % 10;
    x /= 10;
  }

  if (cnt > 10)
    return delcount[10];

  int res = delcount[cnt-1];

  int seen = 0;
  for (int i = cnt-1; i >= 0; i--) {
    int d = nd[i];
    for (int k = (i == cnt-1) ? 1 : 0; k < d; k++) {
      if ((seen & (1 << k)) == 0) {
        res += comb[10-(cnt-i)][i];
      }
    }
    if ((seen & (1 << d)) != 0)
      return res;
    seen |= 1 << d;
  }
  res++;  // n is del itself (otherwise not counted) 

  return res;
}

int main() {
  // # of del num: [#digits]
  delcount[0] = 0;
  delcount[1] = 9;
  int p = 9;
  for (int i = 2; i <= 10; i++) {
    p *= 11 - i;
    delcount[i] = p + delcount[i-1];
  }

  // # of del num: [#availabledigits][#openpositions]
  // d >= p (otherwise there would be no del numbers)
  for (int d = 0; d <= 9; d++) {
    comb[d][0] = 1;
    for (int p = 1; p <= d; p++) {
      comb[d][p] = (d-(p-1)) * comb[d][p-1];
    }
  }

  int tc;
  cin >> tc;
  
  while (tc--) {
    unsigned long long l, r;
	scanf("%llu %llu", &l, &r);
	printf("%d\n", count(r) - count(l-1));
  }
  
  return 0;
}

