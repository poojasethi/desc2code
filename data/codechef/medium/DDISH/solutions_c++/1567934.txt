#include <stdio.h>
#include <assert.h>
#include <algorithm>

unsigned int generate_delicious(unsigned long long* p,size_t size)
{
	// 显然不存在大于等于10^10的ANS数,因为不同的数字最多10个,可以通过动态规划计算出个数
	static const size_t max_digit_count = 10;
	static const unsigned int counts[max_digit_count+1] = { 1,10,91,739,5275,32491,168571,712891,2345851,5611771,8877691 };			// counts[i]表示小于10^i的ANS数的个数
	static const unsigned long long exps[max_digit_count+1] = { 1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,10000000000LL };

	if(NULL == p || size < counts[max_digit_count]) return counts[max_digit_count];

	size = counts[max_digit_count];
	unsigned int* masks = new unsigned int[size];
	unsigned int* bits = new unsigned int[size];

	unsigned int inp = 0,outp = 0;
	for(unsigned int i = 0;i < max_digit_count;++i,++inp)
	{
		p[inp] = i;
		masks[inp] = (1 << i);
		bits[inp] = 1;
	}
	outp = 1;						// 首位不可能是0
	for(;outp < inp;++outp)
	{
		if(bits[outp] >= max_digit_count) break;
		unsigned long long x = p[outp];
		unsigned int xmask = masks[outp],xbit = bits[outp];
		for(unsigned int i = 0;i < max_digit_count;++i)
		{
			if(0 != (xmask&(1<<i))) continue;
			unsigned long long t = x;
			t *= 10;t += i;

			bits[inp] = xbit + 1;
			masks[inp] = xmask|(1<<i);
			p[inp] = t;++inp;
		}
	}

	delete[] masks;delete[] bits;

	assert(inp == size);
	return inp;
}

unsigned int count_atmost(const unsigned long long* p,size_t size,unsigned long long v)
{
	if(0 == size || v < p[0]) return 0;
	if(v > p[size-1]) return size;

	size_t begin = 0,end = size;
	for(;begin < end;)					// p[begin] <= v < p[end]
	{
		size_t mid = (begin+end)/2;
		unsigned long long x = p[mid];
		if(v == x) return mid + 1;
		if(v > x) begin = mid + 1;
		else end = mid;
	}
	return end;
}

int main()
{
	// ANS数:其十进制表示的数字完全不同,问题实际上即计算[L,R]之间ANS数的个数
	unsigned int size = generate_delicious(NULL,0);
	unsigned long long* p = new unsigned long long[size];
	generate_delicious(p,size);

	unsigned int nCases = 0;scanf("%d",&nCases);							// 1 <= nCases <= 200000
	for(unsigned int iCases = 0;iCases < nCases;++iCases)
	{
		unsigned long long left = 0,right = 0;
		//scanf("%I64d %I64d",&left,&right);
		scanf("%lld%lld",&left,&right);
		printf("%u\n",count_atmost(p,size,right)-count_atmost(p,size,left-1));
	}

	delete[] p;
	return 0;
}
