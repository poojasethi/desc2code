#include<cstdio>
#include<set>

using namespace std;

int single[10];
int digit[50];

int isok(long long n)
{
  set<int> digits;
  while(n > 0)
  {
    int t = n % 10;
    if(digits.find(t) == digits.end()) digits.insert(t);
    else return 0;
    n /= 10;
  }
  return 1;
}

int getcount(int n, int k)
{
  if(n > k) return 0;
  if(n == 0 && k > 0) return 1;
  int total = 1;
  for(int i = 0; i < n; i++) total *= (k--);
  return total;
}

int getcount(int n)
{
  if(single[n] != 0) return single[n];
  if(n == 0) return 1;
  if(n == 1) return 10;
  int total = 9, t = 9;
  for(int i = 1; i < n; i++) total *= (t--);
  return total + getcount(n-1);
}

int getlength(long long n)
{
  long long m = n;
  int l = 0, i = 0;
  while(m > 0)
  {
    m /= 10;
    l++;
  }

  i = l-1;
  while(n > 0)
  {
    digit[i--] = n % 10;
    n /= 10;
  }
  return l;
}


int totalcount(long long n, int l)
{
  if(n >= 10000000000ULL) return getcount(10);
  set<int> dist;
  int total = getcount(l-1);
  total += (digit[0] - 1) * getcount(l-1, 9);

  dist.insert(digit[0]);
  for(int i = 1; i < l; i++)
  {
    int distcount = 0;
    for(int j = 0; j < digit[i]; j++)
    {
      if(dist.find(j) != dist.end()) continue;
      distcount++;
    }
    total += distcount * getcount(l-i-1, 9 - dist.size());
    if(dist.find(digit[i]) != dist.end()) break;
    dist.insert(digit[i]);
  }

  return isok(n) ? total + 1 : total;
}

int main()
{
  int n;
  scanf("%d", &n);
  while(n--)
  {
    long long a, b;
    scanf("%lld%lld", &a, &b);
    int na = totalcount(a, getlength(a));
    int nb = totalcount(b, getlength(b));
    //printf("%d %d %d\n", na, nb, isok(a) ? (nb-na+1) : (nb-na));
    printf("%d\n", isok(a) ? (nb-na+1) : (nb-na));
  }
  return 0;
}
