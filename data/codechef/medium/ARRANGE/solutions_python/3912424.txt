#!/usr/bin/python
# coding=utf8
import sys
import time
from numpy import cross, dot, multiply, add, subtract
from numpy.linalg import norm
from itertools import permutations, combinations
import collections
import functools


class memoized(object):
    '''Decorator. Caches a function's return value each time it is called.
    If called later with the same arguments, the cached value is returned
    (not reevaluated).
    '''
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        '''Return the function's docstring.'''
        return self.func.__doc__
    def __get__(self, obj, objtype):
        '''Support instance methods.'''
        return functools.partial(self.__call__, obj)


def main():
    data = sys.stdin
    nb = int(data.readline())
    #nb = 16
    for icase in xrange(nb):
        k, string = data.readline().strip().split()
        #k, string = icase + 1, ""
        k = int(k)
        letters = 2 ** k
        #while(len(string) < letters):
        #    from string import ascii_lowercase
        #    import random
        #    string += random.choice(ascii_lowercase)
        #print string

        # brute force
        res = ''
        for i in xrange(letters):
            bi = bin(i)[2:]
            bi = '0' * (k - len(bi)) + bi
            bi = bi[::-1]
            v = int(bi, 2)
            res += string[v]

        print res


if __name__ == "__main__":
    main()
