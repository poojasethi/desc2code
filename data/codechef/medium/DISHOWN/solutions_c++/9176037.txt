#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll *id, cnt, *sz;
const ll MAX=100000;
map<ll,ll> mp;  //use this map to map indexes with data.
ll score[MAX];
void init(ll N)
{
    cnt = N;
	id = new ll[N+1];
	sz = new ll[N+1];
    for(ll i=1; i<=N; i++)
    {
        id[i] = i;
	    //sz[i] = 1;
	}
}

ll find(ll p)
{
    ll root = p;
    while (root != id[root])
        root = id[root];
    while (p != root) {
        ll newp = id[p];
        id[p] = root;
        p = newp;
    }
    return root;
}
// Replace sets containing x and y with their union.
void merge(ll x, ll y)
{
    ll i = find(x);//owner of dish x
    ll j = find(y); //owner of dish y
    if (i == j) {printf("Invalid query!\n");return;}
    // make smaller root point to larger one
    if(score[i]==score[j])
        return;
    
    if(score[i]<score[j])
    {
        id[i]=j;
        //sz[j] += sz[i];
    }
    else
    {
        id[j] = i;
        //sz[i] += sz[j];
    }
    //cnt--;
}
// Are objects x and y in the same set?
bool connected(ll x, ll y)
{
    return find(x) == find(y);
}
// Return the number of disjoint sets.
ll count()
{
    return cnt;
}
void destroy()
{
    delete []id;
	delete []sz;
}

int main()
{
    ll n,q,i,j,t,type;
    scanf("%lld",&t);
    while(t--)
    {
    scanf("%lld",&n);
    init(n);
    for(i=1;i<=n;i++)
        scanf("%lld",&score[i]);
    
    scanf("%lld",&q);
    
    while(q--)
    {
        scanf("%lld",&type);
        
        if(!type)//type=0
        {
            scanf("%lld %lld",&i,&j);
            merge(i,j); //compare the scores of dish i and dish j and change the owners accordingly
        }
        else
        {
            scanf("%lld",&i);
            printf("%lld\n",find(i));
        }
    }
    destroy();
    }
    
    return 0;
}
