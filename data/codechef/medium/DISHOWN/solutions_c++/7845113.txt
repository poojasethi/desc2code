    #include<iostream>
    #include<algorithm>
    using namespace std;
     
    int find_set(int x,int *parent)
    {
    if(parent[x]==x)
    return x;
    int temp=find_set(parent[x],parent);
    parent[x]=temp;
    return temp;
    }
     
    int union_set(int x,int y,int *parent,int *a)
    {
    int xset=find_set(x,parent);
    int yset=find_set(y,parent);
    if(xset==yset)
    return -1;
    if(a[xset]>a[yset])
    parent[yset]=xset;
    else if(a[xset]<a[yset])
    parent[xset]=yset;
    return 0;
    }
     
     
    int main()
    {
    ios_base::sync_with_stdio(false);
    int t;
    cin>>t;
    while(t--)
    {
    int n;
    cin>>n;
    int a[n+1],parent[n+1];
    //fill(parent,parent+n+1,-1);
    for(int i=1;i<=n;i++)
    {
    cin>>a[i];
    parent[i]=i;
    }
    int q;
    cin>>q;
    while(q--)
    {
    int w,x,y;
    cin>>w;
    if(w==0)
    {
    cin>>x>>y;
    if(union_set(x,y,parent,a)==-1)
    cout<<"Invalid query!"<<endl;
    }
    else if(w==1)
    {
    cin>>x;
    cout<<find_set(x,parent)<<endl;
    }
    }
    }
    return 0;
    } 