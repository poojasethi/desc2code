#include<bits/stdc++.h>
using namespace std;
	struct node{
		int data;
		int parent;
		int max;
	};

	void makeSet(int d,int s,map<int,node*> &m){
		struct node *x= new node();
		x->data=d;
		x->parent=d;
		x->max=s;
		m[d]=x;
	}
	
	int finds(int c,map<int,node*> &m){
		node *x=m[c];
		if(x->data==x->parent){
	
			return x->parent;
		
		}
		x->parent=finds(x->parent,m);
	
		return x->parent;
	}
	void unions(int x,int y,map<int,node*> &m){
		struct node *p=m[finds(x,m)];
		
		struct node *q=m[finds(y,m)];
		
		
		if(finds(x,m)==finds(y,m)){
			printf("Invalid query!\n");
		}
		else{
			if(p->max>q->max){
				
				q->parent=p->parent;
				//q->max=p->max;
	
			}
			else if(q->max>p->max){
				p->parent=q->parent;
				//p->max=q->max;
			}
		}
	}
	 
	
int main(){
	int t,n,q,s[100000],f,x,y,p;
	scanf("%d",&t);
	
	while(t--){
			map<int,node*> m;
		m.clear();
		scanf("%d",&n);
		for(int i=1;i<=n;i++){
			scanf("%d",&f);
			makeSet(i,f,m);
		}
	
		scanf("%d",&q);
		while(q--){
			scanf("%d",&p);
			if(p==0){
				scanf("%d %d",&x,&y);
				unions(x,y,m);
			}
			else{
				scanf("%d",&x);
				printf("%d\n",finds(x,m));
			}
		}
	}
}