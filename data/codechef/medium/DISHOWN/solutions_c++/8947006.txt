/*_______SHREY MANIK______*/
#include <iostream>
#include <string>
#include <climits>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>
#include <utility>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstring>
#include <iomanip>
#include <list>
#include <bitset>
#define ff first
#define ss second
#define mod 1000000007
#define SET(a) memset(a,-1,sizeof(a))
#define CLEAR(a) memset(a,0,sizeof(a))
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)
using namespace std;
typedef long long LL;
typedef pair< int , int > pii;
typedef pair< int , LL> pil;
typedef pair< LL, int>pli;
typedef pair< LL, LL> pll;
typedef vector< LL >vl;
typedef vector< int > vi;
template<class T>T gcd(T a,T b){return (b==0)?a:gcd(b,a%b);}
template<class T>T lcm(T a,T b){return (a*b)/gcd(a,b);}
template<class T>T powmod(T a,T b) {T res=1;if(a>=mod)a%=mod;for(;b;b>>=1){if(b&1)res=res*a;if(res>=mod)res%=mod;a=a*a;if(a>=mod)a%=mod;}return res;}


#define gc getchar_unlocked

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
inline void printint(int a)
  {
  char s[11];
  int t = -1;
  do{
  s[++t] = a % 10 + '0';
  a /= 10;
  }while(a > 0);
  while(t >= 0)putchar_unlocked(s[t--]);
  putchar_unlocked('\n');
  }
int t,n,s[10005],anc[10005],q,c,a,b;
int find(int x)
{
	if(x==anc[x])return x;
	return (anc[x]=find(anc[x]));
}
void Union(int x,int y)
{
	int a=find(x);
	int b=find(y);
	if(a==b)
	{
		cout<<"Invalid query!\n";
		return;
	}
	if(s[a]<s[b])
	{
		anc[a]=b;
	}
	else if(s[a]>s[b])
		anc[b]=a;
	
}
int main()
{
  cin>>t;
  /*ios::sync_with_stdio(0);
  cin.tie(0);*/
  while(t--)
  {
  		cin>>n;
  		for(int i=1;i<=n;i++)
  		{
  			  anc[i]=i;
			  scanint(s[i]);	
		}
		scanint(q);
		while(q--)
		{
			scanint(c);
			if(c==0)
			{
				scanint(a);scanint(b);
			    Union(a,b);
							
			}
			else
			{
				scanint(a);
				printint(find(a));
			}
		}
  }
  return 0;
}


