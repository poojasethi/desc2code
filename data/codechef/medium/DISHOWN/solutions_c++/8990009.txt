#include<bits/stdc++.h>
using namespace std;
int readint() {
    char c=getchar_unlocked();
    while(c<'0' || c>'9')
    c=getchar_unlocked();
    int ret=0;
    while(c>='0'&& c<='9')
    {
    ret=10*ret+c-48;
    c=getchar_unlocked();
    }
    return ret;
    }
int parent[100005];
int score[100005];
map< int, set<int> > m;
set<int>::iterator it;
int ancestor(int a)
{
	if(parent[a]!=a)
	parent[a]=ancestor(parent[a]);
	return parent[a];
}
void find(int u,int v)
{
	if(score[u]==score[v])
	return ;
	if(score[u]>score[v])
	{
		parent[v]=u;
	}
	else
	{
		parent[u]=v;
	}
}
int main()
{
	int t;
	t=readint();
	//scanf("%d",&t);
	while(t--)
	{
		int n;
		n=readint();
		//scanf("%d",&n);
		int i,j;
		
		for(i=1;i<=n;i++)
		{
			score[i]=readint();
			//scanf("%d",&score[i]);
		}
		for(i=1;i<=n;i++)
		{
			parent[i]=i;
		}
		int q;
		int u,v;
		int x,y,z;
		q=readint();
		//scanf("%d",&q);
		while(q--)
		{
			x=readint();
			//scanf("%d",&x);
			if(x==1)
			{
				y=readint();
				//scanf("%d",&y);
				int ans=ancestor(y);
				printf("%d\n",ans);
			}
			else
			{
				y=readint();
				z=readint();
				//scanf("%d %d",&y,&z);
				u=ancestor(y);
				v=ancestor(z);
				if(u==v)
				printf("Invalid query!\n");
				else
				{
					find(u,v);
				}
			}
		}
	}
}