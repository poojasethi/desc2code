#include <bits/stdc++.h>
using namespace std;

struct Subset{
	int parent;
	int rank;
};

inline int findParent(struct Subset subsets[],int val){
	if(subsets[val].parent!=val)
		subsets[val].parent = findParent(subsets,subsets[val].parent);
	return subsets[val].parent;
}

inline void Union(struct Subset subsets[],int s[],int par1,int par2){
	if(s[par1]<s[par2]){
		subsets[par1].parent = par2;
	}else if(s[par1]>s[par2]){
		subsets[par2].parent = par1;
	}
}

int main()
{
	int t;
	scanf("%d",&t);
	while(t--){
		int n;
		scanf("%d",&n);
		int s[n];
		for(int i=0;i<n;i++) scanf("%d",&s[i]);
		
		//subsets creation
		struct Subset *subsets = (struct Subset *)malloc(n*sizeof(struct Subset));
		for(int i=0;i<n;i++){
			subsets[i].parent = i;
			subsets[i].rank = 0;
		}

		int q;
		scanf("%d",&q);
		while(q--){
			int temp;
			scanf("%d",&temp);
			if(temp==0){
				//union
				int num1,num2;
				scanf("%d",&num1);
				scanf("%d",&num2);
				num1--;num2--;
				//finding parents of both numbers
				int par1 = findParent(subsets,num1);
				int par2 = findParent(subsets,num2);
				if(par1==par2){
					printf("Invalid query!\n");//cout<<"Invalid query!"<<endl;
				}else{
					if(s[par1]!=s[par2]) Union(subsets,s,par1,par2);
				}
			}else{
				//find and cout
				int num1;
				scanf("%d",&num1);
				num1--;
				printf("%d\n",findParent(subsets,num1)+1);//cout<<findParent(subsets,num1)+1<<endl;
			}
		}
	}
    return 0;
}