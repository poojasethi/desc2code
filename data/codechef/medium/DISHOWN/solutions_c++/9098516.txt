#include <bits/stdc++.h>
#define lli long long
#define MAX 10004

using namespace std;

lli S[MAX];
int par[MAX];
lli val[MAX];

void create_set(int x)
{
	par[x] = x;
	val[x] = S[x];
	return;
}
//Code for FAST INPUT :)
template <typename T>
inline void fi(T *a)
{
    register char c=0;
    while (c<33) c=getchar_unlocked();
    *a=0;
    int tmp = 0;
    while (c>33)
    {
        if ( c == 45 ) tmp = 1;
        else *a=*a*10+c-'0';
        c=getchar_unlocked();
    }
    if ( tmp == 1 ) *a = 0-(*a);
}

int find_set(int x)
{
	if ( par[x] == x ) return x;
	par[x] = find_set(par[x]);
	return par[x];
}

void merge(int x, int y)
{
	if ( val[x] == val[y] ) return;
	else if ( val[x] > val[y] ) par[y] = x;
	else par[x] = y;
	return;
}

int main()
{
	int t,n,q,type,root_x,root_y,x,y;
	
	fi(&t);
	
	while ( t-- ) {
	
		fi(&n);
		
		for ( int i = 1; i <= n; i++ ) fi(&S[i]);
		for ( int i = 1; i <= n; i++ ) create_set(i);
		
		fi(&q);
		
		while ( q-- ) {
			fi(&type);
			if ( type == 0 ) {
				fi(&x), fi(&y);
				root_x = find_set(x);
				root_y = find_set(y);
				if ( root_x == root_y ) puts("Invalid query!");
				else merge(root_x,root_y);
			}
			else {
				fi(&x);
				printf("%d\n", find_set(x));
			}
		}
	}
	return 0;
}