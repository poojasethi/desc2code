#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif
int max(int p,int q)
{
    return (p>q)?p:q;
}
int min(int p,int q)
{
    return (p<q)?p:q;
}

int t,tmp,one,two,i,n,rank[10005],p[10005],a[10005],q,ans;
int find_set(int x)
{
    if(x==p[x])
    {
        return x;
    }
    return p[x]=find_set(p[x]);
}

void union_set(int x,int y)
{
    x=find_set(x);
    y=find_set(y);
    /*dout(x);
    dout(y);*/
    if(x==y)
    {
        printf("Invalid query!\n");
    }
    else
    {
        if(a[x]>a[y])
        {
            p[y]=x;
        }
        else if(a[x]<a[y])
        {
            p[x]=y;
        }
    }
}

int main()
{
    si(t);
    while(t--)
    {
        si(n);
        for(i=0;i<n;i++)
        {
            si(a[i]);
            p[i]=i;
            rank[i]=0;
        }
        si(q);
        while(q--)
        {
            si(tmp);
            if(tmp==0)
            {
                si(one);
                si(two);
                union_set(one-1,two-1);
            }
            else if(tmp==1)
            {
                si(one);
                ans=find_set(one-1);
                ans++;
                dout(ans);
            }
        }
    }
    return 0;
}

