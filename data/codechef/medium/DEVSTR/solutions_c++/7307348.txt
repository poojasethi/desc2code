//akartik80

#include <iostream>
#include <cstdio>
#include <vector>

#define get getchar_unlocked
#define put putchar//_unlocked
#define li long int
#define ll long long int
#define pb push_back
#define mp make_pair
#define pd(x) printf("%d", x)
#define pdn(x) printf("%d\n", x)
#define pld(x) printf("%ld", x)
#define pldn(x) printf("%ld\n", x)
#define plld(x) printf("%lld", x)
#define plldn(x) printf("%lld\n", x)
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%ld", &x)
#define slld(x) scanf("%lld", &x)
#define ss(x) scanf("%s", x)
#define sc(x) scanf("%c", &x)
#define pc(x) printf("%c", x)
#define ps(x) printf("%s", x)
#define psn(x) printf("%s\n", x)

using namespace std;

inline int scan()
{
	int n = 0, sign = 1, ch = get();

	while (ch < 48 || ch > 57) {
		if (ch == '-') {
			sign = -1;
		}

		ch = get();
	}

	while (ch >= 48 && ch <= 57) {
		n = (n << 3) + (n << 1) + ch - 48;
		ch = get();
	}

	return n * sign;
}

int main()
{
	int t, n, k, i, count, count0, count1, j;
	char temp;
	bool a[100001], flag, temp1;
	vector<int> v;

	t = scan();

	while (t--) {
		n = scan();
		k = scan();

		v.clear();

		for (i = 0; i < n; i++) {
            sc(temp);
            a[i] = temp - '0';
		}

		count = count0 = count1 = 0;

		if (k == 1) {
            flag = 0;

            for (i = 0; i < n; i++) {
                count += flag ^ a[i];
                flag = !flag;
            }

            pdn(min(count, n - count));

            if (count < n - count) {
                flag = 0;

                for (i = 0; i < n; i++) {
                    pd(flag);
                    flag = !flag;
                }
            } else {
                flag = 1;

                for (i = 0; i < n; i++) {
                    pd(flag);
                    flag = !flag;
                }
            }

            printf("\n");
		} else {
            for (i = 0; i < n - 1; i++) {
                if (count0 == k || count1 == k) {


                    if (count0 == k && a[i] == 0) {
                        count++;

                        if (a[i + 1] == 1) {
                            count0 = 1;
                            count1 = 0;
                            v.pb(i - 1);
                        } else {
                            count1 = 1;
                            count0 = 0;
                            v.pb(i);
                        }

                        continue;
                    }

                    if (count1 == k && a[i] == 1) {
                        count++;

                        if (a[i + 1] == 0) {
                            count1 = 1;
                            count0 = 0;
                            v.pb(i - 1);
                        } else {
                            count0 = 1;
                            count1 = 0;
                            v.pb(i);
                        }

                        continue;
                    }
                }

                if (a[i] == 0) {
                    count0++;
                    count1 = 0;
                } else {
                    count1++;
                    count0 = 0;
                }
            }

            if (count0 == k && a[n - 1] == 0) {
                count++;
                v.pb(n - 1);
            }

            if (count1 == k && a[n - 1] == 1) {
                count++;
                v.pb(n - 1);
            }

            pdn(count);
            j = 0;

            for (i = 0; i < n; i++) {
                if (j < v.size() && i == v[j]) {
                    pd(!a[i]);
                    j++;
                } else {
                    pd(a[i]);
                }
            }

            /*for (i = 0; i < v.size(); i++) {
                cout << v[i] << " ";
            }
            cout << endl;*/

            printf("\n");
		}
	}
}
