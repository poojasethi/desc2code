#include <bits/stdc++.h>

using namespace std;

char a[100010];
int n,k;

#define inchar getchar_unlocked

inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}


void method1()
 {
     int cnt = 0;
     
     int cur = 0; // start with 0101010..
     
     for(int i=1;i<=n;i++)
      {
          if(a[i]-'0' != cur )
           cnt++;
          cur = 1 - cur; 
      }
      
     int ret = cnt;
     cnt = 0;cur = 1;
     
     for(int i=1;i<=n;i++)
      {
          if(a[i]-'0' != cur )
           cnt++;
          cur = 1 - cur; 
      }
     
     printf("%d\n",min(ret,cnt));

     if(ret < cnt)
      {
        int cur = 0;
          
        for(int i=1;i<=n;i++)
         {
            a[i] = cur + '0';
            cur = 1 - cur;
         }
        
        
        printf("%s\n",a+1); 
         
      }
      else
      {
        int cur = 1;
          
        for(int i=1;i<=n;i++)
         {
            a[i] = cur + '0';
            cur = 1 - cur;
         }
        
        
        printf("%s\n",a+1);  
      }
     
 }

void flip(int ind)
 {
     if(a[ind] == '0')
      a[ind] = '1';
      else
      a[ind] = '0';
 }

void method2()
 {
     int l= 1,r = 2;
     int len,cnt = 0;
     
     while(l <= n)
      {
          char x = a[l];
          while(r <=n && a[r] == x)
           r++;
          
          len = r - l; 
          
          int times = len/(k+1);
          cnt = cnt + times; 
          
          int next = l;
          for(int i=1;i<=times;i++)
           {
               next = next + k;
               if(next == r -1)
                next--;
               
               flip(next);
               next++;
                   
           }
          
          l = r;
          r++;
          
          
      }
     
     printf("%d\n",cnt);
     printf("%s\n",a+1);
 }

int main() {
	// your code goes here
	
	int test;
	inp(test);
	while(test--)
	 {
	     
	     inp(n);inp(k);
	     
	     scanf("%s",a+1);
	     
	     if(k == 1)
	      method1();
	     else
	      method2();
	     
	     
	 }
	
	return 0;
}
