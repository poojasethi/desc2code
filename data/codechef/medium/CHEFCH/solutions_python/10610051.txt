'''
from operator import itemgetter
N,M,H = map(int,raw_input().split()); residual = N * M; cost = 0
L = sorted([tuple(map(int,raw_input().split())) for i in range(H)],key=itemgetter(1))
for pair in L:
    if pair[0] <= residual: cost += (pair[0] * pair[1]); residual -= pair[0]
    elif pair[0] > residual: cost += (residual * pair[1]); residual = 0
    if residual == 0: print cost; break
else: print 'Impossible'
N,M = map(int,raw_input().split())
L = [int(i) for i in raw_input().split()]; ns = 0
for i in range(M):
    O,S = raw_input().split(); S = int(S)
    if O == 'R': print L[(S-1+ns)%N]
    elif O == 'C': ns += S; ns %= N
    else: ns += (N - S); ns %= N
from collections import Counter
T = int(raw_input())
while T:
    N = int(raw_input()); L = [int(i) for i in raw_input().split()]
    C = Counter(L); print N - C.most_common(1)[0][1]; T -= 1
'''
T = int(raw_input())
odd = lambda x: x % 2 == 1
even = lambda x: x % 2 == 0
while T:
    s = raw_input(); count1,count2,l = 0,0,len(s)
    for i in range(l):
        if odd(i) and s[i] == '+': count1 += 1
        elif even(i) and s[i] == '-': count1 += 1
        if odd(i) and s[i] == '-': count2 += 1
        elif even(i) and s[i] == '+': count2 += 1
    print min(count1,count2); T -= 1

