/*-----DP: bottom up iterative-----*/
#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=105;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
//#define S(x) scanf("%d",&x)
#define getcx getchar
inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%lld\n",x)
typedef long long int LL;
#define Bug(x) cout << #x << "=" << x << endl
#define Bugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(i,0,n) cout<<i<<". "<<x[i]<<endl; cout<<endl
#define pii pair<int,int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit

LL dp[maxn][maxn];
int a[maxn];
vector<int> vec[maxn];
map<int,int> mapping;

LL cal(int i,int j)
{
    if(i>j)
        return 0;
    return dp[i][j];
}

int main()
{
    int n,num=1,sn;
    S(n);
    F(i,1,n+1)
    {
        S(a[i]);
        if(a[i]<0)
            sn=-1;
        else
            sn=1;
        int temp=abs(a[i]);
        map<int,int>::iterator it=mapping.find(temp);
        if(it!=mapping.end())
        {
            a[i]=sn*(it->second);
        }
        else
        {

            mapping[temp]=num;
            a[i]=sn*num;
            num++;
        }
    }
    F(i,1,n+1)
    {
        if(a[i]<0)
            vec[-1*a[i]].push_back(i);
    }

    //Bugarr(a,n+1);

    F(i,1,n)
    {
       F(j,1,n-i+1)
       {
            int last=j+i,start=j;
            dp[start][last]=dp[start][last-1];
            if(a[last]>0)
            {
                F(k,0,vec[a[last]].size())
                {
                    if(vec[a[last]][k]>=start&&last>=vec[a[last]][k])
                    {
                        dp[start][last]=(dp[start][last]+(cal(vec[a[last]][k]+1,last-1)+1)*(cal(start,vec[a[last]][k]-1)+1))%mod;
                    }
                }
            }
       }
    }

    P(dp[1][n]+1);
    return 0;
}
