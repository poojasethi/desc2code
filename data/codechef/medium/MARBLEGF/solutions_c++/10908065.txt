#include<bits/stdc++.h>
using namespace std;
#define sc(a) scanf("%lld",&a)
#define scc(a) scanf("%c",&a)
#define sc2(a,b) scanf("%d%d",&a,&b)
typedef long long ll;

ll tree[4000004];
ll a[1000000];

void buildTree(int ss,int se,int si)
{
	if(ss==se)
	{
		tree[si] = a[se];
		return;
	}	
	int mid = (ss+se)/2;
	buildTree(ss,mid,2*si+1);
	buildTree(mid+1,se,2*si+2);
	tree[si] = tree[2*si+1] + tree[2*si+2];
}

ll query(int ss,int se,int si,int l,int r)
{
	if(l>r || l>se || r<ss)
		return 0;
	if(l<=ss && r>=se)
		return tree[si];
	int mid=(ss+se)/2;
	ll left=query(ss,mid,2*si+1,l,r);
	ll right=query(mid+1,se,2*si+2,l,r);
	return (left+right);
}

void update(int ss,int se,int si,int pos,int val,char c)
{
	if(ss==se)
	{
		if(c=='G')
		{
			a[pos] += val;
			tree[si] = a[pos];
		}
		if(c=='T')
		{
			a[pos] -= val;
			tree[si] = a[pos];
		}
		return ;		
	}
	int mid = (ss + se)/2;
	if(pos<=mid)
		update(ss,mid,2*si+1,pos,val,c);
	else
		update(mid+1,se,2*si+2,pos,val,c);
	tree[si] = tree[2*si+1] + tree[2*si+2];
}

int main()
{
	int n,q,i,j,num;
	char c;
	sc2(n,q);
	memset(a,0,sizeof(a));
	for(i=0;i<n;i++)
		sc(a[i]);
	buildTree(0,n-1,0);
	/*for(i=1;i<=4*n;i++)
		cout<<tree[i]<<" ";*/
	while(q--)
	{
		cin>>c;
		if(c=='S')
		{
			sc2(i,j);
			ll x = query(0,n-1,0,i,j);
			cout<<x<<endl;
		}
		if(c=='G' || c=='T')
		{
			sc2(i,num);
			update(0,n-1,0,i,num,c);
		}
	}
	return 0;
}