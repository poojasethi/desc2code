
#include <iostream>
typedef long long ll;
using namespace std;

ll getSum(ll BITree[], ll n, ll index)
{
    ll sum = 0;
    index = index + 1;
    while (index>0)
    {

        sum += BITree[index];
        index -= index & (-index);
    }
    return sum;
}

void updateBIT(ll *BITree, ll n, ll index, ll val)
{
    index = index + 1;

    // Traverse all ancestors and add 'val'
    while (index <= n)
    {
       // Add 'val' to current node of BI Tree
       BITree[index] += val;

       // Update index to that of parent
       index += index & (-index);
    }
}

ll *constructBITree(ll arr[], ll n)
{
    // Create and initialize BITree[] as 0
    ll *BITree = new ll[n+1];
    for (ll i=1; i<=n; i++)
        BITree[i] = 0;

    // Store the actual values in BITree[] using update()
    for (ll i=0; i<n; i++)
        updateBIT(BITree, n, i, arr[i]);

    return BITree;
}

int main()
{
    ll n,q,i,j;
    char ch;
    cin>>n>>q;
    ll freq[n];
    for(i=0;i<n;i++)
        cin>>freq[i];
    ll *BITree = constructBITree(freq, n);
    while(q--)
    {
        cin>>ch;
        if(ch=='S')
        {
            cin>>i>>j;
            if(i==0)
                cout<<getSum(BITree, n, j)<<endl;
            else
                cout<<getSum(BITree, n, j)-getSum(BITree, n, i-1)<<endl;
        }
        else if(ch=='G')
        {
            cin>>i>>j;
            updateBIT(BITree, n, i, j);
        }
        else if(ch=='T')
        {
            cin>>i>>j;
            j*=-1;
            updateBIT(BITree, n, i, j);
        }
    }
    return 0;
}
