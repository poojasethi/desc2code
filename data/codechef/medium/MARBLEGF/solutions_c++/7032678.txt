#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
/* range sum segtree */
ll query(ll *st,ll s,ll e,ll x,ll y,ll ind){
   if(s>=x && e<=y)
       return st[ind];
   if(e<x || s>y)
       return 0;
   ll mid=s+(e-s)/2;
   return (query(st,s,mid,x,y,2*ind+1)+query(st,mid+1,e,x,y,2*ind+2)); 
}
void update(ll *st,ll s,ll e,ll diff,ll arrindex,ll ind){
   if(arrindex<s || arrindex>e){
       return; 
   } 
   st[ind]+=diff; 
   if(s!=e){
      ll mid=s+(e-s)/2;
      update(st,s,mid,diff,arrindex,2*ind+1);
      update(st,mid+1,e,diff,arrindex,2*ind+2);
   }
   
}
ll buildst(ll *st,ll a[],ll s,ll e,ll ind){
   if(s==e){
       st[ind]=a[s];
       return st[ind];
   }
   ll mid=s+(e-s)/2;
   st[ind]=(buildst(st,a,s,mid,2*ind+1)+buildst(st,a,mid+1,e,2*ind+2));
   return st[ind];
}
ll* build(ll a[],ll n){
  ll x=ceil(log2(n));
  ll size=pow(2,x+1)-1;
  ll *st=new ll[size];
  buildst(st,a,0,n-1,0);
 /* for(int i=0;i<size;i++)
     cout<<st[i]<<" ";
  cout<<endl;*/
  return st;
}
/********* end *********/

int main(){
    ll i,n,q,x,y;
    char c;
    ll a[1000000];
    cin>>n>>q;
    for(i=0;i<n;i++)
       cin>>a[i];          
    // Build segment tree from given array
    ll *st = build(a, n);
    while(q--){
       cin>>c>>x>>y; 
       switch(c){
           case 'S': cout<<query(st,0,n-1,x,y,0)<<endl;
                     break;
           case 'G': update(st,0,n-1,y,x,0);
                     break;
           default:  update(st,0,n-1,-y,x,0);
                     break;
       }
    } 
    return 0;
}