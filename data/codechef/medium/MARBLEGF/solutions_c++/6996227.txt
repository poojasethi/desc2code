#include<iostream>
using namespace std;
class Marbal{
	long long int *p;
	long long int *arr;
	long long int n,i,q,mid,j,ans;
	char ch;
	public:
		Marbal()
		{
			cin>>n>>q;
			p=new long long int[n];
			arr=new long long int[2*n];
			for(i=0;i<n;i++)
			cin>>p[i];
			segmentTree(1,0,n-1);
			while(q--)
			{
				cin>>ch>>i>>j;
				if(ch=='G')
				update(1,0,n-1,i,j);
				else if(ch=='T')
				update(1,0,n-1,i,-j);
				else
				{
					long long int ans=getValue(1,0,n-1,i,j);
					cout<<ans<<endl;
				}
			}
			
		}
		void segmentTree(long long int pos,long long int l,long long int r)
		{
			if(l>r)
			return ;
			if(l==r)
			{
				arr[pos]=p[l];
				return;
			}
			segmentTree(2*pos,l,(l+r)/2);
			segmentTree(2*pos+1,(l+r)/2+1,r);
			arr[pos]=arr[2*pos]+arr[2*pos+1];
		}
		void update(long long int pos,long long int L,long long int R,long long int index,long long int val)
		{
			if(L==R)
			{
				arr[pos]+=val;
				return;
			}
			mid=(L+R)/2;
			if(mid>=index)
			update(2*pos,L,mid,index,val);
			else
			update(2*pos+1,mid+1,R,index,val);
			arr[pos]=arr[pos*2]+arr[pos*2+1];
		}
		long long int getValue(long long int pos,long long int L,long long int R,long long int l,long long int r)
		{
			if(L>r||R<l||L>R)
			return 0;
			if(L>=l&&r>=R)
			return arr[pos];
			return getValue(2*pos,L,(L+R)/2,l,r)+getValue(2*pos+1,(L+R)/2+1,R,l,r);
			
		}
};
int main()
{
	Marbal M;
	return 0;
}