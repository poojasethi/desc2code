#include <cstdlib>
#include <iostream>

using namespace std;

/*
	+-+-+-+-+-+-+-+ +-+-+-+-+ +-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+ +-+-+-+-+
	|F|e|n|w|i|c|k| |T|r|e|e| |o|r| |B|i|n|a|r|y| |I|n|d|e|x|e|d| |T|r|e|e|
	+-+-+-+-+-+-+-+ +-+-+-+-+ +-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+ +-+-+-+-+
 */

/**
 * To get parent, set rightmost 1 bit to 0. e.g. parent of 10 (1010) is 8 (1000)
 * 1) 2's complement to get minus of index
 * 2) AND this with index
 * 3) Subtract that from index
 */

int getParent(int index)
{
	return index - (index & -index);
}

/**
 * To get next
 * 1) 2's complement of get minus of index
 * 2) AND this with index
 * 3) Add it to index
 */
int getNext(int index)
{
	return index + (index & -index);
}

/**
 * Start from index+1 if you want prefix sum 0 to index. Keep adding value
 * till you reach 0
 */
long long getSum(long long tree[], int index)
{
	long long sum = 0;
	/* Since the tree is started from index 1. Index 0 is dummy node */
	index = index + 1;

	while(index > 0)
	{
		sum = sum + tree[index];
		index = getParent(index);
	}
	return sum;
}

/**
 * Start from index+1 if you updating index in original array. Keep adding this value 
 * for next node till you reach outside range of tree
 */
void updateTree(long long tree[], int treeSize, int index, int val)
{
	while(index < treeSize)
	{
		tree[index] = tree[index] + val;
		index = getNext(index);
	}
}

/**
 * Creating tree is like updating Fenwick tree for every value in array
 */
long long * createTree(int input[], int inputSize)
{
	int i;
	//all tree nodes must be initialized to 0
	long long *tree = (long long *)calloc((inputSize + 1),sizeof(long long));

	for(i=0;i<inputSize;i++)
		updateTree(tree, inputSize+1,i+1,input[i]);

	return tree;
}

int main()
{
	int n,q,i,x,y;
	char type;
	int input[1000000];
	long long *tree;
	cin >> n >> q;
	for(i=0;i<n;i++)
		cin >> input[i];

	tree = createTree(input,n);

	for(i=0;i<q;i++)
	{
		cin >> type >> x >> y;

		switch(type)
		{
			case 'S' : cout << getSum(tree,y) - getSum(tree,x-1) << endl;
						break;
			case 'G' : updateTree(tree, n+1,x+1,y);
						break;
			case 'T' : updateTree(tree, n+1,x+1,-1*y);
						break;						
		}
	}

	return 0;
}