#include <vector>
#include <string>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <ctype.h>
#include <bitset>
#include <assert.h>
using namespace std;

#define REP(i, n) for(int i=0; i<(n); i++)
#define FOR(i, a, b) for(int i=(a); i<(b); i++)
#define IFOR(i, a, b) for(int i=(a); i>=(b); i--)
#define FORD(i, a, b, c) for(int i=(a); i<(b); i+=(c))

#define SS ({int x;scanf("%d", &x);x;})
#define SI(x) ((int)x.size())
#define PB(x) push_back(x)
#define MP(a,b) make_pair(a, b)
#define SORT(a) sort(a.begin(),a.end())
#define ITER(it,a) for(typeof(a.begin()) it = a.begin(); it!=a.end(); it++)
#define ALL(a) a.begin(),a.end()
#define INF 1000000000
#define V vector
#define S string
#define FST first
#define SEC second

typedef V<int> VI;
typedef V<S> VS;
typedef long long LL;
typedef pair<int, int> PII;

/*int TT(char c)
{
    if(c=='U') return 0;
    if(c=='R') return 1;
    if(c=='D') return 2;
    if(c=='L') return 3;
    return 0;
}*/
int T[1000][1000];
int main()
{
    int t;
    S dir;
    int dirx[4]= {0,1,0,-1};
    int diry[4]= {1,0,-1,0};
    t=SS;
    while(t--)
    {
        int n,m,x,y,l,k=1,xinc,yinc,i;
        scanf("%d%d%d%d%d",&n,&m,&x,&y,&l);
        for(i=0;i<n;i++)
            memset(T[i],0,4*m);
        cin>>dir;
        x--;
        y--;
        T[x][y]=1;
        REP(i,l-1)
        {
            xinc=0;
            yinc=0;
            if(dir[i]=='R')
                xinc=1;
            else if(dir[i]=='L')
                xinc=-1;
            else if(dir[i]=='U')
                yinc=1;
            else if(dir[i]=='D')
                yinc=-1;
            x+=xinc;
            y+=yinc;
            T[x][y]=i+2;
        }
        /*char ch=dir[l-2];
        xinc=dirx[xinc];
        yinc=diry[yinc];
        /*x+=xinc;
        y+=yinc;
        while(x>0 && y>0 && x<=n && y<=m && T[x][y]<=k)
        {
            x+=xinc;
            y+=yinc;
            k++;
        }*/
        for(k=1;;k++)
	{
			x+=xinc;
			y+=yinc;
			if(!(x>=0 && x<n && y>=0 && y<m)) break;
			if(T[x][y]>k) break;
	}
        if(!(0<=x && x<n && 0<=y && y<m))
            printf("WALL %d\n",k-1);
        else
            printf("BODY %d\n",k-1);
    }
    return 0;
}
