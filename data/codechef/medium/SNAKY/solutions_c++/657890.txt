#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 1000;
struct Link
{
    Link(int _x, int _y, int _c) : 
        x(_x), y(_y), c(_c) {}
    int x;
    int y;
    int c;
};

char movs[MAX*MAX+1];

bool lessThanX(const Link &l, const Link &r)
{
    return l.x < r.x;
}

bool lessThanY(const Link &l, const Link &r)
{
    return l.y < r.y;
}

vector<vector<Link> > rows(MAX+1);
vector<vector<Link> > cols(MAX+1);

int main()
{
    int T, N, M, x, y, L, len, c, i;
    char m;

    scanf("%d", &T);
    while(T-- > 0)
    {
        for(i=0; i<MAX+1; i++)
        {
            rows[i].clear();
            cols[i].clear();
        }

        scanf("%d %d %d %d %d", &N, &M, &x, &y, &L);
        scanf("%s", movs);

        rows[y].push_back(Link(x, y, 0));
        cols[x].push_back(Link(x, y, 0));

        for(i=0, c=1; i < L-1; i++, c++)
        {
            m = movs[i];
            if (m == 'R')
                x++;
            else if (m == 'L')
                x--;
            else if (m == 'U')
                y++;
            else if (m == 'D')
                y--;
            rows[y].push_back(Link(x, y, c));
            cols[x].push_back(Link(x, y, c));
        }

        bool found = false;
        int min = MAX + 1;
        if (m == 'U')
        {
            for(vector<Link>::iterator itr=cols[x].begin(); 
                itr != cols[x].end(); itr++)
            {
                if ((*itr).y > y && (*itr).c >= (*itr).y - y)
                {
                    if ((*itr).y - y < min)
                        min = (*itr).y - y;
                    found = true;
                }
            }
            if(!found)
                printf("WALL %d\n", M - y);
            else
                printf("BODY %d\n", min - 1);

        }
        else if (m == 'D')
        {
            for(vector<Link>::iterator itr=cols[x].begin(); 
                itr != cols[x].end(); itr++)
            {
                if ((*itr).y < y && (*itr).c >= y - (*itr).y)
                {
                    if(y - (*itr).y < min)
                        min = y - (*itr).y;
                    found = true;
                }
            }
            if(!found)
                printf("WALL %d\n", y - 1);
            else
                printf("BODY %d\n", min - 1);

        }
        else if (m == 'R')
        {
            for(vector<Link>::iterator itr=rows[y].begin(); 
                itr != rows[y].end(); itr++)
            {
                if (x < (*itr).x  && (*itr).c >= (*itr).x - x )
                {
                    if((*itr).x - x < min)
                        min = (*itr).x - x;
                    found = true;
                }
            }
            if(!found)
                printf("WALL %d\n", N - x);
            else
                printf("BODY %d\n", min - 1);
        }
        else
        {
            for(vector<Link>::iterator itr=rows[y].begin(); 
                itr != rows[y].end(); itr++)
            {
                if (x > (*itr).x  && (*itr).c >= x - (*itr).x)
                {
                    if( x-(*itr).x < min)
                        min = x -(*itr).x;
                    found = true;
                }
            }
            if(!found)
                printf("WALL %d\n", x - 1);
            else
                printf("BODY %d\n", min - 1);
        }
    }
    return 0;
}
