#include <stdio.h>
#include <vector>

#define MAX(x,y) ((x)>(y)?(x):(y))

#define BIG 1000000

void gen_seq(int n, int *x, int a, int b)
{
  std::vector<char> invalid;
  std::vector<int> a_seq, b_seq;
  int l = 1;

  if(n == 0)
    return;

  a_seq.reserve(n+1);
  b_seq.reserve(n+1);

  invalid.resize(200*n);

  x[0] = 1;
  l = 2;
  a_seq.push_back(-BIG); // Sentinel.
  a_seq.push_back(a*1);
  b_seq.push_back(-b*1);
  b_seq.push_back(-BIG); // Sentinel.

  for(int k = 1; k < n; k++){
    // Update invalid flags.
    // valid if x[k] != a*x[i] - b*x[j]
    int u = a*x[k-1]-b;
    while(u > 0 && u > invalid.size()){
      invalid.resize(invalid.size()*2);
    };

    // Flag invalid
    int j = a_seq.size()-1;
    int o = -b*x[k-1];
    while(o + a_seq[j] >= x[k-1]){
      invalid[o+a_seq[j]] = 1;
      j--;
    }

    j = 0;
    o = a*x[k-1];
    while(o+b_seq[j] >= l){
      invalid[o+b_seq[j]] = 1;
      j++;
    }

    // Compute next value in sequence.
    for(int j = l; j < invalid.size(); j++){
      if(!invalid[j]){
        x[k] = j;
	l = j+1;
	break;
      }
    }
    
    a_seq.push_back( a*x[k]);
    b_seq.back() = -b*x[k];
    b_seq.push_back(-BIG); // Sentinel
  }
}

void brute_force(int n, int *x, int a, int b)
{
  int valid;
  int i, j, k;
  x[0] = 1;
  for(k = 1; k < n; k++){
    x[k] = x[k-1];
    do{
      x[k]++;
      valid = 1;
      for(i = 0; i < k; i++){
	for(j = 0; j < k; j++){
	  if(x[k] == a*x[i] - b*x[j]){
	    valid = 0;
	  }
	}
      }
    }while(!valid);
  }
}

void do_it()
{
  int a, b, n, k;
  int x[1000];
  scanf("%i %i %i", &a, &b, &n);

// #define DEBUG
#ifdef DEBUG
  printf("%i %i %i\n", a, b, n);
  brute_force(n, x, a, b);
  for(k = 0; k < n; k++){
    printf("%i ", x[k]);
  }
  printf("\n");
#endif

  gen_seq(n, x, a, b);

  for(k = 0; k < n; k++){
    printf("%i ", x[k]);
  }
  printf("\n");
}

int main(int argc, char **argv)
{
  int n_test, i;
  scanf("%i", &n_test);
  for(i = 0; i < n_test; i++){
    do_it();
  }
  return 0;
}
