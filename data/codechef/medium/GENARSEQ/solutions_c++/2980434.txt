#include <stdio.h>
#include <vector>
#include <assert.h>

#define MAX(x,y) ((x)>(y)?(x):(y))

#define BIG 1000000

char digit_lut[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";

static char *fmt_uint(unsigned int x, char *s){
  char b[16], *p = b+16;

  if(x < 100){  
    if(x < 10) { s[0] = '0' + x;                                 s[1] = 0; return s+1; }
    else       { s[0] = digit_lut[x*2]; s[1] = digit_lut[x*2+1]; s[2] = 0; return s+2; }
  }

  do {
    char *d = digit_lut + (x%100)*2;
    *(--p) = d[1]; *(--p) = d[0];
    x /= 100;
  } while(x >= 10);

  if(x){ *(s++) = '0' + x; }
  while(p != b+16){ *(s++) = *(p++); *(s++) = *(p++);  }

  *s = 0;
  return s;
}

void print_uints(int n, unsigned int *x)
{
  char buf[1000], *ptr;
  int min_buf_req = 20;
  int i;

  ptr = buf;
  for(i = 0; i < n; i++){
    ptr = fmt_uint(x[i], ptr);
    *ptr = ' '; ptr++;
    if((buf+1000)-ptr < min_buf_req){
      *ptr = 0;
      fputs(buf, stdout);
      ptr = buf;
    }
  }
  *ptr = 0;
  fputs(buf, stdout);
  fputs("\n", stdout);
  fflush(stdout);
}

void gen_seq(int n, int *x, int a, int b)
{
  std::vector<char> invalid;
  std::vector<int> a_seq, b_seq;

  if(n == 0)
    return;

  a_seq.reserve(n+1);
  b_seq.reserve(n+1);

  invalid.resize(200*n);

  x[0] = 1;
  a_seq.push_back(-BIG); // Sentinel.
  a_seq.push_back(a*1);
  b_seq.push_back(-b*1);
  b_seq.push_back(-BIG); // Sentinel.

  for(int k = 1; k < n; k++){
    // Make room for more flags if needed.
    int u = a*x[k-1]-b;
    while(u > 0 && u > invalid.size()){
      invalid.resize(invalid.size()*2);
    };

    // Flag invalid values.
    // Valid if x[k] != a*x[i] - b*x[j]
    int j = a_seq.size()-1;
    int o = -b*x[k-1];
    while(o + a_seq[j] > x[k-1]){
      invalid[o+a_seq[j]] = 1;
      j--;
    }

    j = 0;
    o = a*x[k-1];
    while(o+b_seq[j] > x[k-1]){
      invalid[o+b_seq[j]] = 1;
      j++;
    }

    // Compute next value in sequence.
    for(int j = x[k-1]+1; j < invalid.size(); j++){
      if(!invalid[j]){
        x[k] = j;
	break;
      }
    }
    
    a_seq.push_back(a*x[k]);
    b_seq.back() = -b*x[k];
    b_seq.push_back(-BIG); // Sentinel
  }
}

void brute_force(int n, int *x, int a, int b)
{
  int valid;
  int i, j, k;
  x[0] = 1;
  for(k = 1; k < n; k++){
    x[k] = x[k-1];
    do{
      x[k]++;
      valid = 1;
      for(i = 0; i < k; i++){
	for(j = 0; j < k; j++){
	  if(x[k] == a*x[i] - b*x[j]){
	    valid = 0;
	  }
	}
      }
    }while(!valid);
  }
}

void do_it()
{
  int a, b, n;
  unsigned int x[1000];
  scanf("%i %i %i", &a, &b, &n);

  // #define DEBUG
#ifdef DEBUG
  printf("%i %i %i\n", a, b, n);
  unsigned int x_ref[1000];
  brute_force(n, (int*)x_ref, a, b);
#endif

  gen_seq(n, (int*)x, a, b);

  print_uints(n, x);

#ifdef DEBUG
  for(int i = 0; i < n; i++){
    if(x_ref[i] != x[i]){
      printf("Mismatch at %d, %d != %d\n", i, x_ref[i], x[i]);
      assert(0);
    }
  }
#endif
}

int main(int argc, char **argv)
{
  int n_test, i;
  scanf("%i", &n_test);
  for(i = 0; i < n_test; i++){
    do_it();
  }
  return 0;
}
