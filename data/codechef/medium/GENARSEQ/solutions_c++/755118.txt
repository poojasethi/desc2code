#include <stdio.h>
#include <string.h>
#include <bitset>

std::bitset<600000> existent;

// bool existent[600000];

int seq[2001];
int seqlen = 0;
int maxelem = 0;

void add_existent_element(int a, int b, int xi, int xj)
{
	int val = a * xi - b * xj;
	if(val > 0)
// 		existent[val] = true;
		existent.set(val);
}

void add_sequence_element(int a, int b, int x)
{
	seq[seqlen++] = x;

	add_existent_element(a, b, x, x);
	for(int i = 0; i < seqlen; i++)
	{
		add_existent_element(a, b, seq[i], x);
		add_existent_element(a, b, x, seq[i]);
	}
}

void handle_testcase(int a, int b, int n)
{
// 	memset(existent, 0, sizeof(existent));
	existent.reset();
	seqlen = 0;
	int xk = 1;
	add_sequence_element(a, b, xk);
	for(int num_found = 1; num_found < n; num_found++)
	{
		int newxk = xk + 1; // must be more
// 		while(existent[newxk])
		while(existent.test(newxk))
			newxk++;
			
		xk = newxk;
		add_sequence_element(a, b, xk);
	}
}

int main()
{
	int T;
	scanf("%d", &T);
	for(int i = 0; i < T; i++)
	{
		int a, b, n;
		scanf("%d %d %d", &a, &b, &n);
		handle_testcase(a, b, n);
		for(int i = 0; i < seqlen; i++)
			printf("%d ", seq[i]);
		printf("\n");
	}
	return 0;
}
