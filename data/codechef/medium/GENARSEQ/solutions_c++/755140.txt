#include <stdio.h>
#include <string.h>

bool existent[512 * 1024 + 128 * 1024];

int seq[2001];
int seqlen = 0;
int maxelem = 0;

void add_existent_element(int a, int b, int xi, int xj)
{
	int val = a * xi - b * xj;
	if(val > 0)
		existent[val] = true;	
}

void add_sequence_element(int a, int b, int x)
{
	seq[seqlen++] = x;

	add_existent_element(a, b, x, x);
	for(int i = 0; i < seqlen; i++)
	{
		add_existent_element(a, b, seq[i], x);
		add_existent_element(a, b, x, seq[i]);
	}
}

void handle_testcase(int a, int b, int n)
{
	memset(existent, 0, sizeof(existent));
	
	maxelem = 0;
	seqlen = 0;
	int xk = 1;
	add_sequence_element(a, b, xk);
	for(int num_found = 1; num_found < n; num_found++)
	{
		int newxk = xk + 1; // must be more
		while(existent[newxk])
			newxk++;
			
		xk = newxk;
		add_sequence_element(a, b, xk);
	}
}

char output[50 * 1000 * 8];

int main()
{
// 	output[0] = 0;
	char* outputp = output;
	int T;
	scanf("%d", &T);
	for(int i = 0; i < T; i++)
	{
		int a, b, n;
		scanf("%d %d %d", &a, &b, &n);
		handle_testcase(a, b, n);
		for(int i = 0; i < seqlen; i++)
		{
// 			char buf[16];
			sprintf(outputp, "%d ", seq[i]);
			outputp = (char*)rawmemchr(outputp, '\0');
// 			size_t len = strlen(buf);
// 			memcpy(outputp, buf, len);
// 			outputp += len;
		}
		*outputp++ = '\n';
// 		strcat(output, "\n");
// 			printf("%d ", seq[i]);
// 		printf("\n");
	}
	*outputp = '\0';
	printf(output);
	return 0;
}
