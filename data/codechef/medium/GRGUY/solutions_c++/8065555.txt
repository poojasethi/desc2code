#include <iostream>
#include<cstring>
#include<string>
#include<cstdio>
#include<vector>
#include<map>
#include<climits>
#include<queue>
#include<algorithm>
#define lld long long
#define MOD 1000000007
#define NIL -1


using namespace std;

#define pf printf
#define sf scanf
#define forN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;

lld minU(lld a, lld b)
{
    if(a > b)
    {
        return b;
    }
    return a;
}

lld findMinJump(string L1, string L2, int currL)
{
    int i, j;
    int len = L1.size();
    lld dp[len];//dp[i] denotes going from index 0 to the ith index
    dp[0] = 0;
    //decide curr Lane

    //start from j = 1
    for(j = 1; j < len; j++)
    {
        if(currL == 1)
        {
            if(L1[j] == '.')
            {
                dp[j] = dp[j - 1];
            }
            else if(L1[j] == '#' && L2[j] == '.')
            {
                dp[j] = dp[j - 1] + 1;
                currL = 2;
            }
            /*else if(L1[j] == '#' && L2[j - 1] == '.')
            {
                dp[j - 1]++;
                currL = 2;
            }*/
            else if(L1[j] == '#' && L2[j] == '#')
            {
                //pf("No\n");
                return -1;
            }
        }
        else
        {
            if(L2[j] == '.')
            {
                dp[j] = dp[j - 1];
            }
            else if(L2[j] == '#' && L1[j] == '.')
            {
                dp[j] = dp[j - 1] + 1;
                currL = 1;
            }
            /*else if(L2[j] == '#' && L1[j - 1] == '.')
            {
                dp[j - 1]++;
                currL = 1;
            }*/
            else if(L2[j] == '#' && L1[j] == '#')
            {
                //pf("No\n");
                return -1;
            }
        }

    }

    return dp[len - 1];
    //return;
}

int main()
{
    int T, t, i, j, currL;
    lld ans;
    bool flag;
    string L1, L2;
    sf("%d", &T);
    for(t = 1; t <= T; t++)
    {
        cin >> L1 >> L2;
        ans = INT_MAX;
        flag = 0;
        if(L1[0] == '.')
        {
            currL = 1;
            ans = minU(ans, findMinJump(L1, L2, currL));
        }
        if(L2[0] == '.')
        {
            currL = 2;
            ans = minU(findMinJump(L1, L2, currL), ans);
        }
        else if(L1[0] == '#' && L2[0] == '#')
        {
            pf("No\n");
            flag = 1;
            //return;
        }
        if(flag == 0)
        {
            if(ans == -1)
            {
                pf("No\n");
            }
            else
            {
                pf("Yes\n%lld\n", ans);
            }
        }

    }
    return 0;
}
