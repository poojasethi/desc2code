/**
                                                ooooooo
                                                o         ooooooo   ooooooo   o ooooo  ooooooo
                                                ooooooo    oooooo    oooooo    o    o  o
                                                      o    o    o    o    o    o    o  o
                                                ooooooo    ooooooo   ooooooo   o    o  ooooooo
*/

#include<bits/stdc++.h>
using namespace std;
#define loop(i,n) for(i=0;i<n;i++)
#define loop1(i,n) for(i=1;i<=n;i++)
#define loop3(i,n,k) for(i=n;i<=k;i++)
#define loopr(i,n,k) for(i=n;i>=k;i--)
#define pvn(n) cout<<n<<"\n"
#define pvw(n) cout<<n<<" "
#define pvpn(n,x) cout<< std::fixed;cout<< std::setprecision(x)<<n<<"\n"
#define pvpw(n,x) cout<< std::fixed;cout<< std::setprecision(x)<<n<<" "
#define pw cout<<" "
#define pn cout<<"\n"
#define TZ(n) __builtin_ctz(n)
#define LZ(n) __builtin_clz(n)
#define CSB(n) __builtin_popcount(n)

#define MAX 1000000007
#define pi  3.1415926535
#define exp  2.7182818284

typedef long long int LL;
typedef long int L;
typedef long double LD;
typedef unsigned long long int ULL;
typedef vector<LL> VLL;
typedef vector<L> VL;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<string> VS;
typedef vector<float> VF;
typedef vector<double> VD;
typedef pair<LL,LL> PLL;


LL mod(LL m,LL c)
{
    if(m>=c||m<0)
    return (m%c+c)%c;
    return m;
}

LL power(LL m,LL n)
{
    LL temp=m,ans=1;
    while(n>0)
    {
        if(n%2==0){temp=mod(temp*temp,MAX);n/=2;}
        else
            {ans=mod(ans*temp,MAX);n-=1;}
    }
    return mod(ans,MAX);
}



int main()
{
    std::ios::sync_with_stdio(false);
    LL i,j,t,k,l,x,y,ans,n;
   cin>>t;
   while(t--)
   {
       cin>>n>>k;
       LL f[n+1][k+1];
       loop(i,n+1)
       loop(j,k+1)
       f[i][j]=0;

       f[0][0]=1;
       loop1(i,n)
       {
           loop(j,k+1)
           {
               loop(l,k+1)
               {
                   if(j!=l)
                   {f[i][j]+=f[i-1][l];
                   f[i][j]=mod(f[i][j],MAX);}
//                   pvn(f[i][j]);
               }
           }
       }
       pvn(f[n][0]);
   }
    return 0;
}
