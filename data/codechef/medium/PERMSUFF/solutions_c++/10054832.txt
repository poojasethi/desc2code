#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e6 + 10;
int A[MAXN];
int leftEdge[MAXN];
int rightEdge[MAXN];
vector<pair<int, int> > pairs;
int main(){
    int t;
    cin >> t;
    while(t--){
        int N, M;
        scanf("%d%d", &N, &M);
        for(int i = 1;i <= N;++i){
            scanf("%d", &A[i]);
        }
        pairs.clear();
        for(int i = 1;i <= M;++i){
            int x, y;
            scanf("%d%d", &x, &y);
            pairs.push_back(make_pair(x, y));
        }
        for(int i = 1;i <= N;++i){
            leftEdge[i] = rightEdge[i] = i;
        }
        for(int i = 0;i < M;++i){
            rightEdge[pairs[i].first] = max(rightEdge[pairs[i].first], pairs[i].second);
            leftEdge[pairs[i].second] = min(leftEdge[pairs[i].second], pairs[i].first);
        }
        for(int i = 2;i <= N;++i){
            rightEdge[i] = max(rightEdge[i], rightEdge[i - 1]);
        }
        for(int i = N;i >= 1;--i){
            rightEdge[i] = rightEdge[rightEdge[i]];
        }
        for(int i = N - 1;i >= 1;--i){
            leftEdge[i] = min(leftEdge[i], leftEdge[i + 1]);
        }
        for(int i = 1;i <= N;++i){
            leftEdge[i] = leftEdge[leftEdge[i]];
        }
        bool is = true;
        for(int i = 1;i <= N;++i){
            is &= (leftEdge[i] <= A[i] && A[i] <= rightEdge[i]);
        }
        if(is){
            printf("Possible\n");
        } else printf("Impossible\n");
    }
    return 0;
}
