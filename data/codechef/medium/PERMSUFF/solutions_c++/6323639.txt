#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 100000;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

LL power(LL b,LL e)
{
	if(b==0 && e==0) return 1;
	if(b==0 && e>1)  return 0;	
	if(b>0 && e==0) return 1;
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  r %= MOD; }
		e >>= 1; b = b*b; b %= MOD;
		
	}
return r;
}

LL gcd(LL a, LL b) {  if(b==0) return a;  else return gcd(b,a%b);  }


int arr[MAX+1];
int mark[MAX+1];
PII p[MAX+1];
PII newp[MAX+1];
int pos[MAX+1];
int pairmark[MAX+1];

int main()
{

int test; INT(test);

while(test--)
{
	
	int n,m; INT(n); INT(m);

	CLR(arr);
	CLR(pos);	

	FOR(i,1,n+1)
	{
		INT(arr[i]);
		pos[arr[i]] = i;
	}


	CLR(p);

	//cout<<" pair are = "<<endl;

	FOR(i,0,m)
	{

		int l,r;
		INT(l); INT(r);

		//cout<<" l = "<<l<<" r = "<<r<<endl;

		p[i] = PII(l,r);
	}

	sort(p,p+m);

	int curr=0;

	newp[0] = PII(p[0].F,p[0].S);

	int prevlp = p[0].S;
	int prevsp = p[0].F;

	FOR(i,1,m)
	{
		
		int sp = p[i].F;
		int lp = p[i].S;

		if(sp>prevlp)
		{
			newp[++curr] = PII(sp,lp);
			
			prevsp = sp;
			prevlp = lp;
		
		}
		else
		{
			prevlp = max(prevlp,lp);
			newp[curr].S = prevlp;
		}
		
	}


	//cout<<" disjoint pair = "<<endl;

	//FOR(i,0,curr+1)
		//cout<<" sp = "<<newp[i].F<<" lp = "<<newp[i].S<<endl;



	CLR(mark);	

	bool notpos=false;

	FOR(i,0,curr+1)
	{

		FOR(j,newp[i].F,newp[i].S+1)
		{
			int sp = newp[i].F;
			int lp = newp[i].S;

			if(pos[j]>=sp && pos[j]<=lp)
			{
				mark[pos[j]]=1;
				
			}
			else
			{
				notpos=true;
				break;
			}			
		}
		if(notpos)
			break;
	}


	if(notpos)
		printf("Impossible\n");
	else
	{

		FOR(i,1,n+1)
		{
			if(mark[i]==0 && arr[i]!=i)
			{
				notpos=true;
				break;
			}


		}

			
		if(notpos)
			printf("Impossible\n");
		else printf("Possible\n");	

	}		



}



return 0;
}
