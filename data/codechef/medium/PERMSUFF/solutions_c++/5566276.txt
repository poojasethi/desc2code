#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <cstring>
#include <climits>
#include <algorithm>
#include <utility> 

using namespace std;
 
#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))
 
#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define pb push_back
#define mp make_pair
#define Pi 3.14159265358979

typedef long long ll;
typedef unsigned long long ull;
typedef vector <int> VI;
typedef pair <int, int> PII;
typedef vector<int>::iterator VII;

const int MAX = 100005;
int P[MAX];
PII A[MAX];

int main () {
	
	int tc;
	scanf ("%d", &tc);

	while (tc--) {
		int n, m;
		scanf ("%d %d", &n, &m);

		FOR(i, 0, n)
		{
			scanf ("%d", &P[i]);
			P[i]--;
		}

		FOR(i, 0, m)
		{
			int l, r;
			scanf ("%d %d", &l, &r);
			l--, r--;

			A[i] = mp (l, r);
		}

		sort (A, A + m);
		int l = A[0].first;
		int r = A[0].second;
		FOR(i, 1, m)
		{
			if (A[i].first > r)
			{
				sort (P + l, P + r + 1);
				l = A[i].first;
				r = A[i].second;
			}
			else
			{
				r = max (A[i].second, r);
			}
		}
		sort (P + l, P + r + 1);

		bool possible = true;

		FOR(i, 0, n)
		{
			if (i != P[i]) 
			{
				possible = false;
				break;
			}
		}

		printf ("%s", possible ? "Possible\n" : "Impossible\n");
	}
	return 0;
}