#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>
#include <stdlib.h>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
 #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
/* 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}
*/
typedef pair<int,int> ii;

vector<ii> vec;
int fin[100010];
ii a[100010];

bool comp(ii a,ii b)
 {
  if(a.first!=b.first) return a.first<b.first;
  return a.second<b.second;    
 }

int main() {

    int test,n,m;
    inp(test);
    bool flag;
    while(test--)
     {
         flag = true;
         inp(n);inp(m);
         FOR(i,1,n)
          inp(fin[i]);
          vec.clear();
         FOR(i,1,m)
          {
            int x,y;       
            inp(x);inp(y);
            a[i] = ii(x,y);         
          }
          
          sort(a+1,a+m+1,comp);     
         // FOR(i,1,m)
         //  cout<<a[i].first<<" "<<a[i].second<<"\n";
          int l = a[1].first;
          int r = a[1].second;
          
          FOR(i,2,m)
           {
             if(a[i].first <= r)
              r = max(a[i].second,r);
             else
              {
                vec.push_back(ii(l,r));
                l = a[i].first;
                r = a[i].second;    
              }          
           }
           vec.push_back(ii(l,r));
           //FOR(i,0,vec.size()-1)
           // cout<<vec[i].first<<" "<<vec[i].second<<"\n";
          int ind = 0;     
          int i=1;
          while(i<=n)
           {
             if(i!=vec[ind].first)
              {
                if(i!=fin[i])
                 {
                   flag = false;break;            
                 }
                 i++;                    
              }
             else
              {
               int l = vec[ind].first;
               int r = vec[ind].second;
               FOR(j,l,r)
                {
                  if(fin[j]<=r && fin[j]>=l) continue;
                  else
                   {
                     flag = false;break;            
                   }         
                }
                if(!flag) break;
                else 
                 {
                   ind++;
                   i = r+1;    
                 }                           
              
              }           
           }     
          flag?printf("Possible\n"):printf("Impossible\n");  
     }
   
    
    
    //getchar();
    //getchar();
	return 0;
} 
