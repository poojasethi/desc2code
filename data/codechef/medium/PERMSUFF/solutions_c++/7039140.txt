#include<iostream>
using namespace std;
class perm{
	int n,m;
	int *p,*r,*s,*pr,*f;
	public:
		perm();
		void initi();
		void solve();
		int leader(int*,int);
};
perm::perm()
{
	cin>>n>>m;
}
void perm::initi()
{
	int i,x;
	p=new int[n+1];
	pr=new int[n+1];
	r=new int[m];
	s=new int[m];
	f=new int[n+1];
	pr[0]=f[0]=0;
	for(i=1;i<=n;i++)
	{
		pr[i]=i;
		cin>>p[i];
		f[i]=0;
	}
	for( i=0;i<m;i++)
	 {
	 	int y;
	   cin>>s[i]>>r[i];
	   x=leader(pr,r[i]);
	   y=leader(pr,s[i]);
	   if(x>y)
	   pr[y]=x;
	   else
	   pr[x]=y;
     }
}
void perm::solve()
{
	  int i,j,x,k,y,temp=0;;
	  for(i=1;i<=n;i++)
	  f[i]=leader(pr,i);
	  
	  y=f[0];
	  k=1;
	  for(i=1;i<=n;i++)
	  {
	  	x=f[i];
	  	while(1)
	  	{
	  		y=x;
	     	for(;i<=x;i++)
	     	{
	  	    	if(x<f[i])
	  	     	x=f[i];
	     	}
	     	i--;
	      	if(y==x)
	     	break;
	    }
	    //cout<<k<<" u "<<x<<endl;
	    for(j=k;j<=x;j++)
	    {
	    	if(p[j]>x)
	    	{  //cout<<p[j]<<endl;
	    		temp=1;
	    		break;
	    	}
	    }
	  	k=x;
	  	if(temp==1)
	  	break;
	  }
    if(temp==1)
       cout<<"Impossible"<<endl;
    else
       cout<<"Possible"<<endl;
}
int perm::leader(int *p,int l)
{
	if(p[l]==l)
	  return l;
	p[l]=leader(p,p[l]);
	  return p[l];
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		perm p;
		p.initi();
		p.solve();
	}
	return 0;
}