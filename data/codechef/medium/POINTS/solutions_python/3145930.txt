from operator import itemgetter
import math

def main():

    cases = int(raw_input())

    for i in range(cases):

        blank_line = raw_input()
        numPoints = int(raw_input())
        point_dict = {}
        distance = 0

        #Read data into dictionary data structure
        for j in range(numPoints):
            point = map(int,raw_input().split())
            if(point[0] in point_dict):
                point_dict[point[0]].append(point[1])
            else:
                point_dict[point[0]] = [point[1]]

        #Sort dictionary by key to ensure smallest X first   
        sorted(point_dict)

        #Within each dictionary entry sort Y values descending
        for k,v in point_dict.items():
            point_dict[k] = sorted(v,reverse=True)

        #print point_dict

        point_list = []
        #Enumerate organized coordinates 
        for k,v in point_dict.items():
            for Y in v:
                point_list.append((k,Y))

        #print point_list
        
        prev = point_list[0]
        for ii in range(1,len(point_list)):
            curr = point_list[ii]
            distance+=euclid_dist(prev[0],prev[1],curr[0],curr[1])
            prev = curr

        print("%.2f" % round(distance,2))
            

def euclid_dist(X1,Y1,X2,Y2):
    return math.sqrt((X1-X2)**2+(Y1-Y2)**2)
    
main()