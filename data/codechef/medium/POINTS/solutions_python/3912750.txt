#!/usr/bin/python
# coding=utf8
import sys
import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd
from math import sqrt


def subtract(p1, p2):
    assert(len(p1) == len(p2))
    r = [p1[x] - p2[x] for x in xrange(len(p1))]
    return r

def norm(p):
    r = sum(p[x] * p[x] for x in xrange(len(p)))
    return sqrt(r)


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


def main():
    data = sys.stdin
    nb = int(data.readline())
    for icase in xrange(nb):
        data.readline()
        nb_points = int(data.readline())
        lpoints = []
        for p in xrange(nb_points):
            x, y = map(int, data.readline().split())
            lpoints.append((x, y))

        def cmp_points(p1, p2):
            if p1[0] < p2[0]:
                return -1
            elif p1[0] > p2[0]:
                return 1
            else:
                if p1[1] > p2[1]:
                    return -1
                elif p1[1] < p2[1]:
                    return 1
            return 0

        lpoints.sort(cmp=cmp_points)

        res = 0
        for i in xrange(len(lpoints) - 1):
            p1 = lpoints[i]
            p2 = lpoints[i + 1]
            dif = subtract(p2, p1)
            res += norm(dif)

        print "%.02f" % res


if __name__ == "__main__":
    main()
