#!/usr/bin/python
import math

# read number of testcases
testcases = int(raw_input())

# for each testcase, read the points
for i in range(0, testcases):
        # read blank line
        raw_input()
        # read number of points in the testcase
        numpoints = int(raw_input())
        # create empty dictionary for x coordinates
        xordinate = {}
        # read numpoints number of points
        for j in range(0, numpoints):
                # read coordinates in 2D plane
                point = map(int, str(raw_input()).split())
                # create empty list if X coordinate not in dictionary
                if point[0] not in xordinate:
                        xordinate[point[0]] = []
                # add Y coordinate to dictionary entry of X
                xordinate[point[0]].append(point[1])
        # get all the x coordinates from dictionary
        xlist = xordinate.keys()
        # sort the coordinates
        xlist.sort()
        # total distance computed
        distance = 0
        # compute xlen
        xlen = len(xlist)
        # dempty lists for accessing y coordinates
        ylist1 = []
        ylist2 = xordinate[xlist[0]]
        ylist2.sort()
        # iterate from smallest X to largest X
        for j in range(0, xlen - 1):
                # get the corrosponding Y coordinates
                ylist1 = ylist2
                ylist2 = xordinate[xlist[j + 1]]
                # get number of coordinates with same X
                ylen1  = len(ylist1)
                ylen2  = len(ylist2)
                # check if ylen greater than one
                if ylen1 > 1:
                        # compute the distance from moving along straight line
                        distance += (ylist1[-1] - ylist1[0])
                # check if ylen2 is greater than one
                if ylen2 > 1:
                        # sort y coordinates
                        ylist2.sort()
                # compute distance between current node and the next
                distance += math.sqrt((xlist[j + 1] - xlist[j])**2 + (ylist2[-1] - ylist1[0])**2)

        # if max X coordinate has more than one Y coordinate
        distance += (ylist2[-1] - ylist2[0])
        # print distance
        print("%.2f" % round(distance, 2))
