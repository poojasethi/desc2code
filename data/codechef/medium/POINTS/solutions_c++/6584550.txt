#include<iostream>
#include<algorithm>
#include<utility>
#include<vector>
#include<cmath>
#include<iomanip>

using namespace std;
typedef std::pair<long int, long int> my_pair;

bool sort_pred(const my_pair& left, const my_pair& right)
{
    return left.second > right.second;
}
    
int main()
{
	int t;
	cin>>t;
	
	while(t--)
	{
		long int n;
		cin>>n;
		
		vector <pair <long int, long int> > points;
		
		for(long int i=0 ; i<n ; i++)
		{
			long int a,b;
			cin>>a>>b;
			points.push_back(make_pair(a,b));
		}
		
		
		sort(points.begin(),points.end());
		
		points.push_back(make_pair(-1,-1));
/*		
		for (long int i=0 ;  i<n ; i++)
		{
			cout<<points[i].first<<" "<<points[i].second<<endl;
		}
*/		
		long int beg=points[0].first;
		long int count=1;
		long int i=0;
		
		long int a[2*n+1];
		a[0]=0;
		
		for(i=1;i<n+1;i++)
		{
			if(points[i].first==beg)
			{
				
			}
			else
			{
				a[count++]=i;
				
				a[count++]=i;
				beg=points[i].first;
			}
		}
		
/*		
		for(i=0;i<count;i++)
		{
			cout<<a[i]<<" ";
			if(i%2!=0)
				cout<<"\n";
		}
*/		
		count--;
		
		for(i=0;i<count;i=i+2)
		{
//			cout<<"Sorting from "<<a[i]<<" "<<a[i+1]<<endl;
			sort(points.begin()+a[i],points.begin()+a[i+1],sort_pred);
		}
		
/*		cout<<"\nFinal \n";
	
		for (long int i=0 ;  i<n ; i++)
		{
			
			cout<<points[i].first<<" "<<points[i].second<<endl;
		}
*/
		
		double s1=points[0].first;
		double e1=points[0].second;
		double ans=0;
		
		for(long int i=1;i<n;i++)
		{
			double s2=points[i].first;
			double e2=points[i].second;
			
			double diff1= s2-s1;
			diff1=diff1*diff1;
			
			double diff2=e2-e1;
			diff2=diff2*diff2;
			
			double sum=diff1+diff2;
			
			ans=ans+sqrt(sum);
			
			s1=s2;
			e1=e2;
		}
		
		cout<<fixed<<setprecision(2)<<ans<<endl;
	}
}