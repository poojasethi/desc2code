#include <iostream>
#include <map>
#include <math.h>
#include <bitset>
using namespace std;
int a[100001];
map<int,int> mymap;
void primeFactors(int n)
{
    if(n==1)
    {
        return;
    }
    // Print the number of 2s that divide n
    int two=0;
    while (n%2 == 0)
    {
        n = n/2;
        ++two;
    }
    if(mymap[2]<two)
    {
        mymap[2]=two;
    }
 
    // n must be odd at this point.  So we can skip one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        int coun=0;
        while (n%i == 0)
        {
            n = n/i;
            ++coun;
        }
        if(mymap[i]<coun)
        {
            mymap[i]=coun;
        }
    }
 
    // This condition is to handle the case when n is a prime number
    // greater than 2
    if (n > 2)
    {
        if(mymap[n]>1)
        {
            
        }
        else
        {
            mymap[n]=1;
        }
    }
 
}
 
 
int main()
{
    int T,N,tot;
    long long int ans;
    cin>>T;
    while(T--)
    {
        cin>>N;
        ans=1;
        mymap.clear();
        bitset<100001> vis;
        vis.reset();
        int cycles[100001];
        tot=0;
        for(int i=0;i<N;i++)
        {
            cin>>a[i];
        }
 
        for(int i=0;i<N;i++)
        {
            if(vis[i+1]==0)
            {
                int pos = i;
                int count=0;
                do
                {
                    pos=a[pos]-1;
                    ++count;
                    vis[pos+1]=1;
 
                }while(pos!=i);
                cycles[tot]=count;
                ++tot;
            }
        }
        for(int i=0;i<tot;i++)
        {
            primeFactors(cycles[i]);
        }
        for (map<int,int>::iterator it=mymap.begin(); it!=mymap.end(); ++it)
        {
            ans = (( ans%1000000007 * ((long long int)pow(it->first,it->second)%1000000007))%1000000007);
        }
        cout<<ans<<endl;
    }
 
    return 0;
}