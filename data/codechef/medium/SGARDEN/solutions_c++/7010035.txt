#include <iostream>
#include <cstring>
using namespace std;
int a[100002];
int f[100002];
int c[100002] = {0};
int dp[100002] = {0};
#define MOD 1000000007
int gcd(int x, int y)
{
	if (x % y == 0) return y;
	return gcd(y, x % y);
}
void seive()
{
	for (int i = 2; i < 100002; i++) {
		if (!dp[i]) {
			for (int j = i; j < 100002; j += i) {
				if (!dp[j])
				dp[j] = i;
			}
		}
	}
}

long long int power(long long a, long long b)
{
	if (b == 0) return 1;
	if (b == 1) return a;
	if (b % 2 == 0) {
		long long x = power(a, b / 2) * power(a, b / 2);
		return x % MOD;
	} else {
		long long ans = a * power(a, (b - 1) / 2) * power(a, (b - 1) / 2);
		return ans % MOD;
	}
}

int main()
{
	seive();
	int t;
	cin >> t;
	while (t--) {
		int n;
		cin >> n;
		memset(f, 0, sizeof(f));
		memset(c, 0, sizeof(c));

		for (int i = 1; i <= n; i++) {
			cin >> a[i];
		}
		int k = 0;
		for (int i = 1; i <= n; i++) {
			if (f[i] == 1) continue;
			int x = i;
			int cnt = 0;
			while (1) {
				if (f[x]) break;
				cnt++;
				f[x] = 1;
				x = a[x];
			}
			//LCM of all cnts (max of each prime power)
			while (cnt > 1) {
				int yy = dp[cnt];
				int ccc = 0;
				while (cnt % yy == 0) {
					ccc++;
					cnt /= yy;
				}
				c[yy] = max(c[yy], ccc);
			}
		}
		long long ans = 1;
		for (int i = 0; i < 100002; i++) {
			if (c[i]) {
				ans = ans * power(i, c[i]) % MOD;
			}
		}
		cout << ans  % MOD << endl;
	}
	return 0;
}