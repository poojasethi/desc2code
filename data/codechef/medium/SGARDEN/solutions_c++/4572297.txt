#include<cstdio>
#include<cmath>
#define mod 1000000007
 
void readint(int &a)
{
    register int c; 
    a = 0;
    do c = getchar_unlocked(); while(c < '0');
    do{
		a = (a << 1) + (a << 3) + c - '0';
		c = getchar_unlocked();
	}while(c >= '0');
}
 
int power(int b,int e)
{
	if(e == 0)return 1;
	
	long long i = power(b, e >> 1);
	i = (i * i) % mod;
 
	if(e & 1)i = (i * b) % mod;
	return i;
}
 
bool check[100001];
unsigned int primes[9593];
int p;
 
void sieve()
{
	//sieve of erasthosthenes
	int l;
	for(l = 2; l < 317; l++)
	{
		if(!check[l])
		{
			p = l * l;
			while(p <= 100000)
			{
				check[p] = true;
				p += l;
			}
		}
	}
	p = 0;
	for(l = 2; l <= 100000; l++)
		if(!check[l])primes[p++] = l;
	//sieve ends
}
 
int main()
{
	int t;
	scanf("%d",&t);
	sieve();
 
	while(t--)
	{
		int n;
		int a[100001];
		bool vis[100001];
		scanf("%d",&n);
 
		for(int i = 1; i <= n; i++)
		{
			scanf("%d",&a[i]);
			vis[i] = false;
		}
 
		int pp[9593];
		for(int i = 0; i < 9593; i++)pp[i] = 0;
 
		for(int i = 1; i <= n; i++)
		{
			if(vis[i])continue;
			int cnt = 1;
			int st = i;
			i = a[i];
			while(i != st)
			{
				vis[i] = true;
				cnt++;
				i = a[i];
			}
 
			int rcnt = sqrt((double)cnt);
			int j = primes[0];
			int k = 0;
			while(j <= rcnt)
			{
				int jc = 0;
				while(cnt % j == 0)
				{
					cnt /= j;
					jc++;
				}
				pp[k] = jc > pp[k] ? jc : pp[k];
				j = primes[++k];
			}
			if(cnt >= 2)
			{
				int f = 0,l = 9591;
 
				while(f <= l)
				{
					int m = (f + l) >> 1;
 
					if(primes[m] == cnt)
					{
						pp[m] = pp[m] < 1 ? 1 : pp[m];
						break;
					}
					else if(cnt < primes[m])l = m - 1;
					else f = m + 1;
				}
			}
			i = st;
		}
		int ans = 1;
		for(int i = 0; i < 9593; i++)
			ans = ((long long)ans * power(primes[i],pp[i])) % mod;
		printf("%d\n",ans);
	}
	return 0;
}