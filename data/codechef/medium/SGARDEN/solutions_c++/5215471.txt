#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}

int visited[100010],prime[10000],a[100010],factor[100010];
vector<int> vec;

int buildseive(int n)
{
int i,j,x,y;
  for(i = 2;i<=n;i++)
    visited[i] = 0;
    j = 0;
    for(i = 2;i<=n;i++)
    {
      if(visited[i] == 0)
      {
       prime[j] = i;
       j++;
      }
      x = 2;
      y = x*i;
      while(y<=n)
      {
        visited[y] = 1;
        x++;
        y = x*i;
      }
    }
    return j-1;

}


void primefactor(int n)
 {
    int idx = 0 , pf = prime[idx];
    while(n != 1 && (pf*pf<=n))
     {
        if(n % pf == 0)
         {
           int c = 0;  
           while(n % pf == 0)
            {
              c++;
              n /= pf;       
            }
          // cout<<pf<<" "<<c<<"\n";
           if(factor[pf] == 0)
            vec.push_back(pf);
           factor[pf] = max(factor[pf],c);      
         }
         pf = prime[++idx];      
     }
     if(n != 1)
      {
        if(factor[n] == 0)
         vec.push_back(n);
        factor[n] = max(1,factor[n]);     
      } 
       
 }

int main() {

    int test,n;
    inp(test);
    int nop = buildseive(100010);
    while(test--)
     {
       inp(n);
       FOR(i,1,n)
        inp(a[i]);
       memset(visited,0,sizeof visited);
       vector<int> alllen;
       
       // find cycle lengths
       for(int i=1;i<=n;i++)
        {
           int len;
           if(visited[i] == 0)
            {
               len = 1;
               visited[i] = 1;      
               int x = a[i];
               while(x != i)
                {
                  visited[x] = 1;
                  x = a[x];
                  len++;       
                }
               if(len != 1) alllen.push_back(len);         
            }       
        }
        
       
        
        // factorize all lengths
        vec.clear();    
        memset(factor,0,sizeof factor); 
       for(int i=0;i<alllen.size();i++)
         primefactor(alllen[i]);
       //cout<<vec.size()<<" "<<alllen.size()<<"\n";
       ll ans = 1;
       for(int i=0;i<vec.size();i++)
        {
          ll x = (ll)vec[i];
          ll count = factor[x];
         // cout<<x<<" "<<count<<"\n";
          while(count--)
           ans *= x;
          ans %= mod;        
        }
       ans %= mod;
       printf("%lld\n",ans);           
                    
     }
    
    
    //getchar();
    //getchar();
	return 0;
} 
