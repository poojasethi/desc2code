#include <iostream>
#include <algorithm>
#include <math.h>
#include <string.h>
#include <vector>

using namespace std;
const int maxn = 1e5 + 9;
typedef long long ll;
ll mod = 1e9 + 7;

int n;
ll num[maxn];
bool mk[maxn];
vector<ll>lista;
ll primos[maxn];

ll gcd(ll a, ll b)
{
	while(b)
	{
		ll aux = a % b;
		a = b;
		b = aux;
	}
	return a;
}

int main()
{
	int t = 0;
	cin >> t;

	while(t--)
	{
		cin >> n;
		for(int i = 1 ;i <= n; i++)
			cin >> num[i];

		for(int i = 1; i <= n; i++)
		{
			if(!mk[i])
			{
				int cant = 1;
				mk[i] = 1;
				int v = num[i];
				while(!mk[v])
				{
					mk[v] = 1;
					v = num[v];
					cant++;
				}
				lista.push_back(cant);
			}
		}

		ll res = 1;


		for(int i = 0; i < (int)lista.size(); i++)
		{
			for(int j = 2; j*j <= lista[i]; j++)
			{
				ll cant = 1;
				while(lista[i]%j == 0)
				{
					cant *= j;
					lista[i]/=j;
				}
				primos[j] = max(primos[j],cant);
			}
			if(lista[i] != 1)primos[lista[i]] = max(primos[lista[i]],lista[i]);
		}
		for(int i = 2; i < maxn; i++)
		{
			if(primos[i])res = (res*primos[i])%mod;
		}
		cout << res << endl;

		lista.clear();
		fill(mk,mk + maxn,0);
		fill(primos,primos + maxn,0);
	}


	return 0;
}
