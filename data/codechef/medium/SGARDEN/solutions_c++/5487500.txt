#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <sstream>

using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define SZ(x) ((int)(x).size())
#define FORV(i,x) FOR(i,0,SZ(x))
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define MP make_pair
#define PB push_back
#define ALL(x) x.begin(),x.end()
#define ULL unsigned long long
#define LL long long
#define MOD 1000000007

ULL gcd( ULL a , ULL b )
{
	if( a == 0 ) return b;
	else return gcd( b % a , a );
}

int main()
{
	
	int t , n , cpos[100010] , p[100010]; 
	bool mark[100010] ;
	vector <ULL> v;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		FOR( i , 0 , n ) 
		{
			scanf("%d",&cpos[i]);
			cpos[i]--;
		}
		memset( mark , 0 , sizeof mark );
		memset( p , 0 , sizeof p );
		v.clear();
		FOR( i , 0 , n )
		{
			if( mark[i] ) continue;
			else
			{
				int x = cpos[i] ;
				ULL cnt = 1;
				while( true )
				{
					if( x == i  ) 
					{
						v.PB(cnt);
						mark[x] = true;
						break;
					}
					else
					{
						mark[x] = true;
						x = cpos[x];
						cnt++;
					}
				}
			}
		}
		ULL ans = 1;
		FORV( i , v )
		{
			for( int j = 2 ; (j * j) <= v[i] ; j++ )
			{
				int cnt = 0;
				while( ! (v[i] % j) )
				{
					cnt++;
					v[i] /= j;
				}
				p[j] = max( p[j] , cnt );
			}
			if( v[i] != 1 ) p[v[i]] = max(p[v[i]] , 1);
		}
		FOR( i , 0 , n )
		{
			if( p[i] ) ans = ( ans * (ULL)pow( i , p[i] ) ) % MOD;
		}
		printf("%llu\n",ans);
	}
	return 0;
}
