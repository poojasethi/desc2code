
#include<map>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<iostream>
#define MAX 100009
#define MOD 1000000007

using namespace std;
typedef long long int LLD;

vector<int> primes;
int n;

LLD cal(int a,int b){
if(b==0)
    return 1LL;
LLD temp;

    if(b%2==0)
    {
        temp=cal(a,b/2);
        return (temp*temp)%MOD;

    }
    else
    {
        temp=cal(a,(b-1)/2);
        return (temp*temp*(LLD)a)%MOD;
    }

}

void sieve(){
int i,j;
int temp[MAX+1];
memset(temp,0,sizeof(temp));

for(i=2;i<=sqrt(MAX);i++){
    if(temp[i]==0)
    {
        for(j=i*i;j<=MAX;j+=i)
            temp[j]=1;
        primes.push_back(i);
    }
}

}

int main(){

 int tst,c,arr[MAX],visited[MAX],i,j,k,idx,pw;
 LLD ans;
cin>>tst;

sieve();
map<int,int> maxPw;
map<int,int>::iterator it;

while(tst--){
    cin>>n;
    ans=1;
    for(i=1;i<=n;i++)
    {
        cin>>arr[i];
    }
    memset(visited,0,sizeof(visited));

    for(i=1;i<=n;i++){
        if(visited[i]==0){
            idx=arr[i];visited[i]=1;
            c=1;
            while(idx!=i){
                visited[idx]=1;idx=arr[idx];c++;
            }
          //the length of the cycle is now taken
          //cout<<"length"<<c<<endl;
           
          for(k=0;k<primes.size()&& primes[k]*primes[k]<=c;k++)
          {  pw=0;
              int pr=primes[k];
              while(c%pr==0)
              {
                  c=c/pr;
                  pw++;
              }
              if(pw!=0)
              maxPw[pr]=max(maxPw[pr],pw);//update with maximum powwer
              //cout<<"prime"<<pr<<" "<<"power"<<" "<<pw<<endl;
              if(c==1)
                    break;
          }
          
          if(c!=1)
          maxPw[c]=max(maxPw[c],1);
     }
        
 }

    for(it=maxPw.begin();it!=maxPw.end();it++)
        {   long long int t=cal(it->first,it->second);//multiply using exponentiation by squaring method
            //cout<<"cal :"<<t<<endl;
            ans=(ans*t)%MOD;
        }
        printf("%lld\n",ans);


    maxPw.clear();
}
return 0;

}