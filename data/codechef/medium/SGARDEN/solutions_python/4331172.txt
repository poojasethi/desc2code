def gcd(a, b):
	"""
	Compute the GCD of 2 numbers.
	"""
	while b:
		a, b = b, a % b
	return a

def _lcm(a, b):
	"""
	Compute the LCM of 2 numbers.
	"""
	return (a * b) / gcd(a, b)

def lcm(*args):
	"""
	Compute the LCM of arbitrary amount of numbers.
	"""
	return reduce(_lcm, args)

def garden_game():
	# Get the number of test cases.
	n = int(raw_input())

	# Loop for the required testcases.
	for _ in xrange(n):
		# Get the number of bandits and the order.
		bandits = int(raw_input())
		order = map(lambda x: int(x) - 1, raw_input().split())

		# The number of moves required. (unique)
		moves = set()

		# For detecting cycles.
		cycles = [0] * bandits
		curr_cycl = 0

		for i in xrange(bandits):
			# Already a part of a cycle which has been found earlier.
			# Don't compute.
			if cycles[i]:
				continue

			# Initialise the length of cycle (count), the current cycle
			# the next position and make sure that i is a part of the 
			# current cycle.
			count = 1
			curr_cycl += 1
			curr_pos = order[i]
			cycles[i] = curr_cycl

			# Loop until we reach a point which is a part of our current cycle.
			while curr_cycl != cycles[curr_pos]:
				# Increment the length of the cycle.
				count += 1
				# The item at curr_pos is a part of curr_cycl.
				cycles[curr_pos] = curr_cycl
				# Move on to the next position.
				curr_pos = order[curr_pos]

			moves.add(count)

		print lcm(*moves) % 1000000007

if __name__ == "__main__":
	garden_game()



