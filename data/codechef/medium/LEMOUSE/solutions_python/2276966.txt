#! /usr/bin/python

MAX_M = 100000

def xdiff(i, j, matrix, isYflow):
	""" coming to i,j position in the matrix from x direction. 
	isYflow states the direction of second last move considering this as last,
	0 represents from left, 1 from top and -1 for the case when both are possible.
	Returns the additional affected mice because of this x shift"""

	psum = get(i, j+1, matrix) + get(i+1, j, matrix)
	return psum if isYflow else psum + get(i-1, j, matrix)

def ydiff(i, j, matrix, isYflow):
	""" Read xdiff """

	psum = get(i+1, j, matrix) + get(i, j+1, matrix)
	return psum + get(i, j-1, matrix) if isYflow == 1 else psum

def get(i, j, matrix):
	""" returns matrix[i][j]. For the cases where i, j is not in matrix	returns 0. """

	n, m = len(matrix), len(matrix[0])
	if i < 0 or i >= n or j <  0 or j >= m:
		return 0
	else:
		return matrix[i][j]

def get_affected(i, j, matrix):
	""" Returns number of the affected mice for a given point """

	return (get(i+1, j, matrix) + get(i, j-1, matrix) + get(i, j+1, matrix) + get(i-1, j, matrix) + get(i, j, matrix))

l = int(raw_input()) # number of test cases
for x in xrange(0, l):
	input = raw_input().split(' ')
	n, m = int(input[0]), int(input[1])
	matrix = []  # matrix for each test case
	for y in xrange(0, n):
		matrix.append([int(c) for c in raw_input()])
	matrix_soln = []	# matrix_soln[i][j] = (least number of mice touched from 0,0 to i-1,j-1 in matrix, 0 or 1 based on last move from x or y position)
	# dynamic approach
	for i in xrange(0, n+1):
		current_row_soln = []
		for j in xrange(0, m+1):
			if i == 0: # initialization, for first column assume that the last move was from x direction i.e. coming from out of the box hence a 0
				current_row_soln.append((MAX_M, 0))
			elif j == 0: # coming from out of box from y direction hence a 1
				current_row_soln.append((MAX_M, 1))
			elif i == 1 and j == 1:
				current_row_soln.append((get_affected(i-1, j-1, matrix), 0))
			else:
				from_up = matrix_soln[i-1][j][0] + ydiff(i-1,j-1,matrix, matrix_soln[i-1][j][1])
				from_left = current_row_soln[j-1][0] + xdiff(i-1,j-1,matrix, current_row_soln[j-1][1])
				if from_up < from_left:
					soln = (from_up, 1)
				elif from_up > from_left:
					soln = (from_left, 0)
				else:
					soln = (from_up, -1)
				current_row_soln.append(soln)
		matrix_soln.append(current_row_soln)
#	for sol in matrix_soln:
#		print sol
	print matrix_soln[n][m][0]

