/*
Author :  ARVIND PANDEY
 */
#include <iostream>
#include <cstdio>
#include <climits>
#include <cstring>
#include <algorithm>
#include <string.h>
#include <stdlib.h>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <map>
#include <set>
using namespace std;

struct _ {
    ios_base::Init i;

    _() {
        cin.sync_with_stdio(0);
        cin.tie(0);
    }
} _;

#define FOR(i,a,b) for(i=a;i<b;i++)
#define pb(x) push_back(x)
#define ll long long
#define mp make_pair

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii> vii;
typedef vector<vii> vvii;

ll power(ll a, ll n)//////             O(log n)
{
    ll ans = 1;
    while (n) {
        if (n % 2 == 1)
            ans *= a;
        a *= a;
        n /= 2;
    }
    return ans;
}

ll gcd(ll a, ll b)////                 O(log(a+b))
{
    if (b==0)
        return a;
    return gcd(b,a%b);
}
////////////////////////////////////////////////////////////////////////////////////CODE BEGINS/////////////////////////////////////////////////////////

int main() 
{
    #ifndef ONLINE_JUDGE
    freopen("inp.txt","r",stdin);
    #endif
      
    int t,i,j,dp[105][105][2],n,m;
    cin>>t;
    string s;
    while(t--)
    {   
        cin>>n>>m;
        int v[n+5][m+5];
        FOR(i,0,n+5)
        {
            FOR(j,0,m+5)
            v[i][j] = 0;
        }
        FOR(i,0,n)
        {
            cin>>s;
            FOR(j,0,m)
            {
                v[i][j] = s[j] - '0';
                dp[i][j][0] = 0;
                dp[i][j][1] = 0;
            }
        }
        
        
        dp[0][0][0] = v[0][0] + v[0][1] + v[1][0];
        dp[0][0][1] = v[0][0] + v[0][1] + v[1][0];
        FOR(i,1,n)
        {
            dp[i][0][1] = dp[i-1][0][1] + v[i+1][0] + v[i][1];
            dp[i][0][0] = 100000;
            
            
        }
        FOR(i,1,m)
        {
            dp[0][i][0] = dp[0][i-1][0] + v[0][i+1] + v[1][i];
            dp[0][i][1] = 100000;
            
        }
        FOR(i,1,n)
        {
            FOR(j,1,m)
            {
              
                dp[i][j][0] = min(dp[i][j-1][0] + v[i][j+1] + v[i-1][j] + v[i+1][j], dp[i][j-1][1] + v[i][j+1] + v[i+1][j]);
                dp[i][j][1] = min(dp[i-1][j][0] + v[i][j+1] + v[i+1][j], dp[i-1][j][1] + v[i][j-1] + v[i][j+1] + v[i+1][j]);
                
           }
        }
        cout<<min(dp[n-1][m-1][0],dp[n-1][m-1][1])<<"\n";
    }

    return 0;
}