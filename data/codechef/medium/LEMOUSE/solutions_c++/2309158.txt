#include<cstdio>
#include<algorithm>
#include<string>
#include<iostream>

#define INF 1000000007

using namespace std;

int n, m;
int dp_left[101][101], dp_top[101][101];
int grid[101][101];

bool exists(int row, int col)
{
    return (row<n && row>=0 && col<m && col>=0);
}

int main()
{
    int testcases;
    char temp[101];
    scanf("%d", &testcases);

    while(testcases--)
    {
        int i, j;
        scanf("%d %d", &n, &m);

        for(i=0; i<n; i++)
        {
            scanf("%s", temp);
            for(j=0; j<m; j++)
                grid[i][j] = (temp[j]-'0');
        }

        for(i=0; i<n; i++)
        {
            for(j=0; j<m; j++)
            {
                dp_left[i][j] = INF;
                dp_top[i][j] = INF;
            }
        }

        dp_left[0][0] = 0;
        dp_top[0][0] = 0;

        if(grid[0][0]==1)
        {
            dp_left[0][0]++;
            dp_top[0][0]++;
        }

        if(grid[0][1]==1)
        {
            dp_left[0][0]++;
            dp_top[0][0]++;
        }

        if(grid[1][0]==1)
        {
            dp_left[0][0]++;
            dp_top[0][0]++;
        }

        for(i=0; i<n; i++)
        {
            for(j=0; j<m; j++)
            {
                if(i==0 && j==0)
                    continue;

                else
                {
                    int l=0, r=0, t=0, b=0;

                    if(exists(i+1, j) && grid[i+1][j])
                        b++;
                    if(exists(i, j+1) && grid[i][j+1])
                        r++;
                    if(exists(i-1, j) && grid[i-1][j])
                        t++;
                    if(exists(i, j-1) && grid[i][j-1])
                        l++;

                    if(exists(i-1, j))
                    {
                        dp_top[i][j] = min( dp_top[i][j], dp_top[i-1][j] + r + l + b);
                        dp_top[i][j] = min( dp_top[i][j], dp_left[i-1][j] + r + b);
                    }

                    if(exists(i, j-1))
                    {
                        dp_left[i][j] = min( dp_left[i][j], dp_left[i][j-1] + r + t + b);
                        dp_left[i][j] = min( dp_left[i][j], dp_top[i][j-1] + r + b);
                    }
                }
            }
        }
        printf("%d\n", min(dp_left[n-1][m-1], dp_top[n-1][m-1]));
    }

    return 0;
}
