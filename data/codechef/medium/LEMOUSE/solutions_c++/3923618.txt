#include <bits/stdc++.h>
using namespace std;
#define N 110
int sombra[N][N];
bool mapa[N][N];
int dp[N][N][2];
int n, m;
int f(int x, int y, bool dir) {
	if( x == n && y == m ) return sombra[n][m];
	int &ans = dp[x][y][dir];
	if( ans != -1 ) return ans;
	ans = (1<<30);
	if( x + 1 <= n ) {
		if( dir && mapa[x + 1][y - 1] ) 
			ans = min(ans, f(x + 1, y, false) - 1);
		else ans = min(ans, f(x + 1, y, false));
	}
	if( y + 1 <= m ) {
		if( !dir && mapa[x - 1][y + 1] ) 
			ans = min(ans, f(x, y + 1, true) - 1);
		else ans = min(ans, f(x, y + 1, true));
	}
	ans += (sombra[x][y] - mapa[x][y]);
	return ans;
}
int main() {
	int T;
	char s[N];
	scanf("%d", &T);
	while( T-- ) {
		memset(sombra, 0, sizeof(sombra));
		memset(mapa, false, sizeof(mapa));
		memset(dp, -1, sizeof(dp));
		scanf("%d %d", &n, &m);
		for(int i=1 ; i<=n ; i++) {
			scanf("%s", s);
			for(int k=1 ; k<=m ; k++) {
				if( s[k - 1] == '1' ) {
					mapa[i][k] = true;
					if( (i == 1 && k == 1) || (i == n && k == m) ) {}
					else {
						sombra[i - 1][k]++;
						sombra[i][k + 1]++;
						sombra[i + 1][k]++;
						sombra[i][k - 1]++;
					}
				}
			}
		}
		int tmp = mapa[1][1] + mapa[n][m];
		mapa[1][1] = mapa[n][m] = false;
		printf("%d\n", f(1, 1, true) + tmp);
	}
	return 0;
}