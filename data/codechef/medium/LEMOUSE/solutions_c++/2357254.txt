#include<iostream>
#include<cstdio>
using namespace std;


#define NN 105
#define MM 105
#define inf 100000

int n,m;
char board[NN][MM];
int dp[NN][MM][2];
int dx1[2] = {1, 0};
int dy1[2] = {0, 1};
int dx2[3] = {0, 1, 0};
int dy2[3] = {-1, 0, 1};
int dx3[3] = {-1, 0, 1};
int dy3[3] = {0, 1, 0};

int min(int a, int b)
{return a<b?a:b;}

void getinput()
{
    scanf("%d%d", &n, &m);
    for(int i=0; i<n; i++)
    {        
        scanf("%s", board[i]);
         
    }
}

//initialize dp
void init()
{
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            for(int k=0; k<2; k++)
            {
                dp[i][j][k] = inf;                
            }
        }
    }    
    
}

int check1(int x_old, int y_old)
{
    int c = 0,x,y;
    for(int i=0; i<2; i++)
    {
        x = x_old+dx1[i];
        y = y_old+dy1[i];
        if(x>=0 && x<n && y>=0 && y<m && board[x][y] == '1')c++;        
    }
    
    return c;
}
int check2(int x_old, int y_old)
{
    int c = 0,x,y;
    for(int i=0; i<3; i++)
    {
        x = x_old+dx2[i];
        y = y_old+dy2[i];
        if(x>=0 && x<n && y>=0 && y<m && board[x][y] == '1')c++;        
    }
    return c;
}

int check3(int x_old, int y_old)
{
    int c = 0,x,y;
    for(int i=0; i<3; i++)
    {
        x = x_old+dx3[i];
        y = y_old+dy3[i];
        if(x>=0 && x<n && y>=0 && y<m && board[x][y] == '1')c++;        
    }
    return c;
}

void solve()
{
    //the origin
    dp[0][0][0] = check1(0,0);
    if(board[0][0] == '1')dp[0][0][0]+=1;
    dp[0][0][1] = dp[0][0][0];
    
    //first column
    for(int i=1; i<n; i++)
    {        
        dp[i][0][0] = dp[i-1][0][0] + check2(i,0);                  
    }
    
    //first row
    for(int j=1; j<m; j++)
    {        
        dp[0][j][1] = dp[0][j-1][1] + check3(0,j);
               
    }
    for(int i=1; i<n; i++)
    {
        
        for(int j=1; j<m; j++)
        {
            dp[i][j][0] = min(dp[i][j][0], dp[i-1][j][0] +check2(i,j));
            dp[i][j][0] = min(dp[i][j][0], dp[i-1][j][1] +check1(i,j));
            
            dp[i][j][1] = min(dp[i][j][1], dp[i][j-1][1] +check3(i,j));
            dp[i][j][1] = min(dp[i][j][1], dp[i][j-1][0] +check1(i,j));            
        }
    }
    int ans = min(dp[n-1][m-1][0], dp[n-1][m-1][1]);
    printf("%d\n", ans);
}


int main()
{
    int t;
    scanf("%d", &t);
    while(t--)
    {
       getinput();
       init();
       solve();       
    }   
    
}