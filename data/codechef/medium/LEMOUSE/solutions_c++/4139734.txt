#include <stdio.h>
#include <iostream>


#define MOD 1000000007
#define LL long long
#define ULL unsigned long long
#define INF 1000000000

using namespace std;
int getchar_unlocked( void );
//inline int getchar_unlocked() { return getchar(); }
inline void fastRead_int(int &x) {
    register int c = getchar_unlocked();
    x = 0;
    int neg = 0;

    for(; ((c<48 || c>57) && c != '-'); c = getchar_unlocked());

    if(c=='-') {
    	neg = 1;
    	c = getchar_unlocked();
    }

    for(; c>47 && c<58 ; c = getchar_unlocked()) {
    	x = (x<<1) + (x<<3) + c - 48;
    }

    if(neg)
    	x = -x;
}



inline void fastRead_string(char *str)
{
    register char c = 0;
    register int i = 0;

    while (c < 33)
        c = getchar_unlocked();

    while (c != '\n') {
        str[i] = c;
        c = getchar_unlocked();
        i = i + 1;
    }

    str[i] = '\0';
}



int main()
{
    int test;
    fastRead_int(test);

    while(test--)
    {
        int n,m;
        fastRead_int(n);fastRead_int(m);

        int mouse[n][m];
         int shadow[n][m];

        for(int i=0;i<n;++i)
        {
            char s[m+10];
            cin>>s;
            for(int j=0;j<m;++j)
            {
                mouse[i][j]=s[j]-48;
                shadow[i][j]=0;
            }
        }



        for(int i=0;i<n;++i)
        {
            for(int j=0;j<m;++j)
            {
                if(mouse[i][j]==1)
                {
               if(i-1>=0)
                ++shadow[i-1][j];

               if(i+1<=n-1)
               ++shadow[i+1][j];

               if(j-1>=0)
                 ++shadow[i][j-1];

               if(j+1<=m-1)
                    ++shadow[i][j+1];



                }
            }
        }

/*
        for(int i=0;i<n;i++)
        {

         for(int j=0;j<m;j++)
         {
             cout<<shadow[i][j]<<" ";
         }
         cout<<endl;
        }

        */
        int dp[n][m][2];

        dp[0][0][0]=shadow[0][0]-mouse[0][0];
        dp[0][0][1]=shadow[0][0]-mouse[0][0];



        for(int j=1;j<m;++j) {
            dp[0][j][0] = dp[0][j-1][0]+shadow[0][j]-mouse[0][j];
            dp[0][j][1] = INF;
        }
        for(int i=1;i<n;++i) {
            dp[i][0][0] = INF;
            dp[i][0][1] = dp[i-1][0][1]+shadow[i][0]-mouse[i][0];
        }



        for(int i=0;i<n;++i)
        {
            for(int j=0;j<m;++j)
            {

               if(j-1>=0 && i-1 >=0) {
                    dp[i][j][0] = shadow[i][j]-mouse[i][j] + min(dp[i][j-1][0],dp[i][j-1][1]-mouse[i-1][j]);
                    dp[i][j][1] = shadow[i][j]-mouse[i][j] + min(dp[i-1][j][1],dp[i-1][j][0]-mouse[i][j-1]);

               }

            }
        }

      //cout<< dp[n-1][m-1][0]<<" "<<dp[n-1][m-1][1]<<" "<<mouse[0][0]<<"  "<<mouse[n-1][m-1]<<endl;



    int ans = min(dp[n-1][m-1][0],dp[n-1][m-1][1]) + mouse[0][0]+mouse[n-1][m-1];

    printf("%d\n",ans);


    }

    return 0;
}
