#include <cstdio>
#include <vector>
#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <sstream>
#include<string.h>
#include <set>
#include <cassert>
#include <map>
#include <set>
#include<limits.h>
#include <queue>
#include <stack>
using namespace std;
typedef long long ll;
#define in(a) scanf("%lld",&a)
#define F(i,a,b) for(ll i=a;i<=b;i++)
#define mp make_pair
#define pb push_back 
#define X first
#define Y second
#define MOD (ll)1000000007
 
#define gc getchar_unlocked
 
/*void in(ll &x)
{
    register ll c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
*/

int main(){	 
ll t,n,m;
char s[110][110];
ll dpleft[110][110];
ll dpup[110][110];

in(t);

while(t--){
	in(n); in(m);
	
	memset(dpleft,0,sizeof(dpleft));
	memset(dpup,0,sizeof(dpup));
	
	F(i,0,m)
	s[n][i]='0';
	
	F(i,0,n-1)
	{scanf("%s",s[i]);
	 s[i][m]='0';
	}
	
	F(i,0,n-1)
	F(j,0,m-1)
	if(i!=0 && j!=0){
	 	dpup[i][j]=s[i][j+1]-'0' + s[i+1][j]-'0' + min(dpup[i-1][j]+s[i][j-1]-'0',dpleft[i-1][j]);
	 	dpleft[i][j]=s[i][j+1]-'0' + s[i+1][j]-'0' + min(dpleft[i][j-1]+s[i-1][j]-'0',dpup[i][j-1] );
	}
	else if(i==0 && j!=0){
			dpup[i][j]=INT_MAX;
	 	    dpleft[i][j]=s[i][j+1]-'0' + s[i+1][j]-'0' + dpleft[i][j-1];
		}
		else if(i!=0 && j==0){
			dpup[i][j]=s[i][j+1]-'0' + s[i+1][j]-'0' + dpup[i-1][j];
	 	    dpleft[i][j]=INT_MAX  ;}
		else{
			dpup[i][j]=s[i][j+1]-'0' + s[i+1][j]-'0' + s[i][j]-'0';
	 	    dpleft[i][j]=s[i][j+1]-'0' + s[i+1][j]-'0' + s[i][j]-'0';
		}
	
	printf("%lld\n", min(dpleft[n-1][m-1],dpup[n-1][m-1]) );
}
return 0;
}