#include <iostream>
#include <stdio.h>
#include <string.h>
#include <math.h>

using namespace std;
#define maxn 109
#define oo 1000000000
typedef long long ll;

#define debug(a,j,n) for(int i = 1; i <= n; i++)cout << a[i][j] << " "; cout << endl;

int n,m;
int num[maxn][maxn];
int aux[maxn][maxn];
int dp[maxn][maxn][2];
char line[maxn];

bool near(int i, int j, bool fromup)
{
	if(aux[i][j] > 1)return 1;
	if(aux[i][j] == 0)return 0;

	if(num[i][j] == 1)
	{
		if(fromup)
		{
			if(aux[i - 1][j] > 1)return 1;
			return 0;
		}
		else
		{
			if(aux[i][j - 1] > 1)return 1;
			return 0;
		}
	}
	if(num[i - 1][j] == 1 || num[i][j - 1] == 1)return 0;
	return 1;
}

void apply(int i, int j)
{
	if(num[i][j] == 0)return;
	if(j > 1)
		aux[i][j - 1]++;
	if(j < m)
		aux[i][j + 1]++;
	if(i > 1)
		aux[i - 1][j]++;
	if(i < n)
		aux[i + 1][j]++;
}

void solve()
{
	for(int i = 0; i <= m; i++)
		dp[0][i][0] = dp[0][i][1] = 100000;
	for(int i = 0; i <= n; i++)
		dp[i][0][0] = dp[i][0][1] = 100000;
	dp[1][1][0] = dp[1][1][1] = aux[1][1] + num[1][1];

	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			if(j > 1)
			{
				dp[i][j][0] = aux[i][j];

				int a = dp[i][j - 1][0] - num[i][j - 1];
				int b = dp[i][j - 1][1] - num[i][j - 1] - num[i - 1][j];
				dp[i][j][0] += min(a,b);
			}
			if(i > 1)
			{
				dp[i][j][1] = aux[i][j];

				int a = dp[i - 1][j][1] - num[i - 1][j];
				int b = dp[i - 1][j][0] - num[i - 1][j] - num[i][j - 1];
				dp[i][j][1] += min(a,b);
			}
			if(j == 1)
				dp[i][j][0] = dp[i][j][1];
			if(i == 1)
				dp[i][j][1] = dp[i][j][0];

		}
	}
}

void reset()
{
	for(int i = 0; i <= n + 2; i++)
	{
		for(int j = 0; j <= m + 2; j++)
			dp[i][j][0] = dp[i][j][1] = aux[i][j] = 0;
	}
	/*for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			cout << num[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			cout << dp[i][j][0] << " ";
		}
		cout << endl;
	}*/
	//dp[i][j] = 0;
}

int main()
{
	int t;
	cin >> t;

	while(t--)
	{
		cin >> n >> m;

		for(int i = 1; i <= n; i++)
		{
			cin >> line;
			for(int j = 1; j <= m; j++)
			{
				num[i][j] = line[j - 1] - '0';
				apply(i,j);
			}
		}

		solve();
		cout << min(dp[n][m][0],dp[n][m][1])<< endl;
		reset();
	}
	return 0;
}
