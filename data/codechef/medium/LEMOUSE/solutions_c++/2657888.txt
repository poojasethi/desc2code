/***********Template Starts Here***********/
#pragma comment (linker,"/STACK:16777216")
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <deque>
#include <functional>
#include <string>
#include <iostream>
#include <cctype>

#define pb push_back
#define nl puts ("")
#define sp printf ( " " )
#define phl printf ( "hello\n" )
#define all(c) (c).begin(),(c).end()
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define sz(a) int((a).size())

using namespace std;

typedef long long vlong;
typedef unsigned long long uvlong;
typedef vector < int > vi;
typedef pair < int, int > ii;
typedef vector < ii > vii;


const vlong inf = 2147383647;
const double pi = 2 * acos ( 0.0 );
const double eps = 1e-9;
const vlong maxint = 2147483647;
const vlong minint = -2147483648;

/***********Template Ends Here***********/

char grid[110][110];
int row, col;

int memo[110][110][3][3], done[110][110][3][3], cc = 1;

int dp ( int r, int c, int last, int last2 ) {

    int res;
    if ( last == 0 && last2 == 0 ) res = grid[r][c-1] + grid[r][c+1] + grid[r+1][c];
    else if ( last == 0 && last2 == 1 ) res = grid[r][c+1] + grid[r+1][c];
    else if ( last == 1 && last2 == 0 ) res = grid[r+1][c] + grid[r][c+1];
    else res = grid[r-1][c] + grid[r+1][c] + grid[r][c+1];

    if ( r == row && c == col ) return res;
    if ( r > row || c > col ) return inf;
    if ( done[r][c][last][last2] == cc ) return memo[r][c][last][last2];

    int a = dp ( r, c + 1, 1, last );
    int b = dp ( r + 1, c, 0, last );

    done[r][c][last][last2] = cc;
    memo[r][c][last][last2] = min ( a, b ) + res;
    return min ( a, b ) + res;
}

int main () {
    //freopen ( "input.txt", "r", stdin );
    //freopen ( "output.txt", "w", stdout );

    int kase;
    scanf ( "%d", &kase );

    while ( kase-- ) {
        scanf ( "%d %d", &row, &col );

        int i;
        memset ( grid, 0, sizeof grid );
        for ( i = 1; i <= row; i++ ) scanf ( "%s", &grid[i][1] );

        int j;
        for ( i = 1; i <= row; i++ ) {
            for ( j = 1; j <= col; j++ ) {
                grid[i][j] -= '0';
            }
        }

        int res = grid[1][1] + dp ( 1, 1, 0, 0 );
        cc++;

        printf ( "%d\n", res );
    }

    return 0;
}
