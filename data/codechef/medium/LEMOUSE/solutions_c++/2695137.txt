#include <iostream>
#include <cstring>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
#define INF 10000000 
#define min(a,b) (a<b?a:b)
#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  

using namespace std;
int A[102][102];
int Shadow[102][102];
int dp[102][102][2];
int n,m;
int val(int i,int j)
{
    if(i>=0 && i<n && j>=0 && j<m)
       return A[i][j];
    else
       return 0;
}
//void debug(int (*B)[102][2],int n,int m)
//{
//      for(int i=1;i<=n;i++)
//      {
//            for(int j=1;j<=m;j++)
//            {
//                  cout<<B[i][j][1]<<" ";
//            }
//            cout<<endl;
//      }
//      for(int i=1;i<=n;i++)
//      {
//            for(int j=1;j<=m;j++)
//            {
//                  cout<<B[i][j][0]<<" ";
//            }
//            cout<<endl;
//      }
     
//}

int main()
{
      int t;
      cin>>t;
      while(t--)
      {
            memset(A,0,sizeof(A));
            memset(Shadow,0,sizeof(Shadow));
            memset(dp,0,sizeof(dp));
            string s;
            
            cin>>n>>m;
            for(int i=0;i<n;i++)
            {
                  cin>>s;
                  for(int j=0;j<m;j++)
                  {
                        if(s[j]=='1')
                        A[i][j]=1;
                        else
                        A[i][j]=0;
                  }
            }
            
//            for(int i=0;i<n;i++)
//            {
//                  for(int j=0;j<m;j++)
//                  {
//                  Shadow[i][j]=A[i][j];
//                  }
//            }
//           
//            for(int i=0;i<n;i++)
//            {
//                  for(int j=0;j<m;j++)
//                  {
//                        if(A[i][j]==1)
//                        {
//                              Shadow[i-1][j]++;
//                              Shadow[i+1][j]++;
//                              Shadow[i][j-1]++;
//                              Shadow[i][j+1]++;
//                        }
//                  }
//            }
   
	      dp[0][0][0]=dp[0][0][1]=A[0][0]+A[0][1]+A[1][0];
             for(int i=1;i<m;i++)
              {
                  assert(i>=1);
                  dp[0][i][0]=dp[0][i-1][0]+A[0][i+1]+A[1][i];
                  dp[0][i][1]=dp[0][i-1][1]+A[0][i+1]+A[1][i];
              }
              for(int i=1;i<n;i++)
              {
                  assert(i>=1);
                  dp[i][0][0]=dp[i-1][0][0]+A[i+1][0]+A[i][1];
                  dp[i][0][1]=dp[i-1][0][1]+A[i+1][0]+A[i][1];
              }
            for(int i=1;i<n;i++)
            {
                  for(int j=1;j<m;j++)
                  {
                        dp[i][j][0] = min(dp[i][j-1][0]+val(i-1,j) + val(i+1,j) +val(i,j+1),dp[i][j-1][1]+val(i+1,j)+val(i,j+1));
                        dp[i][j][1] = min(dp[i-1][j][0]+val(i+1,j)+val(i,j+1),dp[i-1][j][1]+val(i,j-1)+val(i,j+1)+val(i+1,j));
                  }
            }
            int res = min(dp[n-1][m-1][0],dp[n-1][m-1][1]); 
            cout<<res<<endl;
      }
      return 0;
}