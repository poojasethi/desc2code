#include <iostream>
using namespace std;

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

int partition (int arr[], int l, int h)
{
    int x = arr[h];  
    int i = (l - 1);  
 
    for (int j = l; j <= h- 1; j++)
    { 
        if (arr[j] <= x)
        {
            i++;    
            swap(&arr[i], &arr[j]);  
        }
    }
    swap(&arr[i + 1], &arr[h]);  
    return (i + 1);
}

void quickSort(int arr[], int l, int h)
{
    if (l < h)
    {
        int p = partition(arr, l, h);
        quickSort(arr, l, p - 1);
        quickSort(arr, p + 1, h);
    }
}

int binarySearch(int A[], int s, int l, int key)
{
	int index = (s+l)/2;
		if(A[index] == key)
			return index;
		else if(A[index]<key)
			return binarySearch(A, index+1, l, key);
		else
			return binarySearch(A, s, index-1, key);
}

int main()
{
	int N, K, P, x, y;
	cin>>N>>K>>P;
	
	int A[N],B[P][2], C[N], D[N];
	for(int i=0; i<N; i++)
	{
		cin>>A[i];
		D[i] = A[i];
	}
	for(int i=0; i<P; i++)
	cin>>B[i][0]>>B[i][1];
	quickSort(A, 0, N-1);
	C[N-1] = A[N-1];
	for(int i=N-1; i>0; i--)
	{
		if(A[i]-A[i-1]<=K)
		{
			C[i-1] = C[i];
		}
		else
			C[i-1] = A[i-1];
	}
	
	for(int i=0; i<P; i++)
	{
	 	x = binarySearch(A, 0, N-1, D[B[i][0]-1]);
		y = binarySearch(A, 0, N-1, D[B[i][1]-1]);
		
		if(C[x] == C[y])
		{
			cout<<"Yes\n";
		}
		else 
			cout<<"No\n";
	}
	
	return 0;
}