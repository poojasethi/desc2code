#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<climits>
#include<vector>
#include<algorithm>
#include<string>

#define MOD 1000003
#define HODOR unsigned long long
#define ll long long

#define rep(i,a,b) for(int i=(a);i<(b);i++)
#define dwn(i,a,b) for(int i=(a);i>=(b);i--)
using namespace std;
 int arr[100001]={0};
ll int brr[100001]={0};

int fact[MOD+5], a, b, ans, num, den;

long long mpow(int a, int b) /* This function calculates (a^b)%MOD (taken from open source) */
{
    long long x=1,y=a;
    while(b>0)
    {
        if(b%2==1)
        {
            x=(x*y);
            if(x>MOD)
                x%=MOD;
        }
        y=(y*y);
        if(y>MOD)
            y%=MOD;
        b=b/2;
    }
    return x;
}




void pre_cal() {
	fact[0] = fact[1] = 1;
	rep(i, 2, MOD+5)
		fact[i] = (1ULL * fact[i-1] * i)%MOD;
}

int exp(int a, int n) {
	int res = 1;
	while ( n ) {
		if ( n&1 ) res=(1LL*res*a)%MOD;
		a = (1LL*a*a)%MOD;
		n >>= 1;
	}
	return res;
}

int binomialCoeff(HODOR y, HODOR x) {
	ans = 1;
	while( y ) {
		a = y%MOD, y /= MOD;
		b = x%MOD, x /= MOD;
		if ( b > a )
			return MOD-1;
		num = fact[a];
		den = ( 1ULL * fact[a-b] * fact[b] )%MOD;
		ans = ( 1ULL * ans * ( 1ULL * num * exp(den, MOD-2) )%MOD)%MOD;
	}
	return (ans+MOD-1)%MOD;
}



#define gc getchar_unlocked
#define pc putchar_unlocked
void fastwrite(ll int inp)
{
ll int a=(inp<0)?-inp:inp;
char snum[20];
ll int i=0;
do
{
snum[i++]=a%10+48;
a=a/10;
}while(a!=0);
if(inp<0)
snum[i++]='-';
i--;
while(i>=0)
pc(snum[i--]);
pc('\n');
}


int fastread()
{
char sign='\0',c=gc();
ll int ret=0;
while((c<'0'||c>'9')&&c!='-'){c=gc();}
if(c=='-'){
sign='1';
c=gc();
}
while(c>='0'&&c<='9'){
ret=10*ret+c-48;
c=gc();
}
if(sign)ret=-ret;
return ret;
}




int main()
{


int n,k,p;
scanf("%d%d%d",&n,&k,&p);

pair<ll,ll> vec[100001];

int temp;

for(int i=0;i<n;i++)
{
  scanf("%d",&temp);
  vec[i].first=temp;
  vec[i].second=i+1;


}

sort(vec,vec+n);


arr[vec[0].second]=vec[0].first+k;
for(int i=1;i<n;i++)
{
  if(vec[i].first-vec[i-1].first<=k)
     arr[vec[i].second]=arr[vec[i-1].second];
     else
     arr[vec[i].second]=vec[i].first+k;


}




while(p--)
{

int f1,f2;
scanf("%d%d",&f1,&f2);
if(arr[f1]==arr[f2])
printf("Yes\n");
else printf("No\n");


}






    return 0;
}
