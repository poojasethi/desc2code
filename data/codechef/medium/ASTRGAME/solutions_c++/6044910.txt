#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <sstream>
#include <string>
#include <set>
#include <map>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<ll> vi;
typedef pair<ll, ll> pii;
typedef vector<pii> vp;
typedef vector<vi> vvi;
typedef vector<string> vs;

const int N = 110;
const ll M = 1000000009LL;
const int K = 3;
const int LIT = 2500;
const int INF = 1 << 30;
const double eps = 1e-6;
const ll MOD = 1000000007LL;
const int dir[][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

#define mp make_pair
#define pb push_back
#define fst first
#define snd second

int n;
string s;
vs v;
map<string, int> m;

void init() {
  cin >> s >> n;
  v = vs(n);
  for (int i = 0; i < n; i++) cin >> v[i];
}

int SG(string ss) {
  if (!ss.size()) {
    return 0;
  }
  
  if (m.find(ss) != m.end()) {
    return m[ss];
  }
  
  set<int> have;
  for (int i = 0; i < n; i++) {
    int pre = 0;
    while (true) {
      size_t found = ss.find(v[i], pre);
      if (found == string::npos) {
        break;
      }
      string s1 = ss.substr(0, found);
      string s2 = ss.substr(found + v[i].size());
      // cout << "Case" << endl;
      // cout << ss << " " << v[i] <<endl;
      // cout << s1 << " * " << s2 << endl;
      int sg = SG(s1) ^ SG(s2);
      have.insert(sg);
      pre = found + 1;
    }
  }
  for (int i = 0; i <= 10000000; i++) {
    if (!have.count(i)) {
      return m[ss] = i;
    }
  }
}

void solve() {
  m.clear();
  int res = SG(s);
  printf("%s\n", res ? "Teddy" : "Tracy");
}

int main() {
  int T;
  cin >> T;
  for (int tcase = 1; tcase <= T; tcase++) {
  // while (cin >> n >> m >> k) {
    init();
    solve();
  }
}