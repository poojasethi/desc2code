/* Arrived at Spragueâ€“Grundy theorem after a bit of googling - Every impartial game is equivalent to a number.
    http://sbjoshi.wordpress.com/tag/grundy-number/
    Grundy number (G) of a subgame decides winning or losing position.
    Losing position:  G = 0
    Winning position: G != 0
    Subproblems are identified as substrings - so DP can be applied on these subproblems. If G of string is 0, I die (losing position)
*/
#include <string>
#include <vector>
#include <iostream>
#include <cstring>
using namespace std;

int n;                  /* size of dict */
string str;             /* word */
vector<string> dict;    /* dict */
int DP[100][100];       /* auxilary space for memoization */

bool same(const string& s, int off, const string& t)    /* checks whether T starts in S at index 'off' */
{
    for(size_t j=0 ; j<t.length() ; j++)
        if(s[off+j] != t[j])
            return false;
    return true;
}

int grundy(int first, int last)     /* Grundy number of string between index first and last */
{
    if(first > last) return 0;  /* No string left, losing position */
    
    if(DP[first][last] == -1)   /* If not calculated already */
    {
        bool have[100];
        memset(have, false, 100);
        
        for(int i=0 ; i<n ; i++)    /* For all strings in dict */
            for(int j=first ; j < last-(int)dict[i].length()+2 ; j++)   /* Check all alignments of dict word */
                if(same(str, j, dict[i]))   /* If dict is a substring starting at index j */
                {
                    int g = grundy(first, j-1) ^ grundy(j+dict[i].length(), last); /* G of Union of two subgames is nothing but XOR of their G (see blog link) */
                    if(g <= 100) have[g] = true;
                }

        for(int i=0 ; i<100 ; i++)
            if(have[i] == false)
            {
                DP[first][last] = i;
                break;
            }
    }

    return DP[first][last];
}

int main()
{
    int tc;

    cin >> tc;
    while(tc--)
    {
        cin >> str >> n;
        dict.resize(n);

        for(int i=0 ; i<n ; i++)
            cin >> dict[i];

        for(size_t i=0 ; i<100 ; i++)
            for(size_t j=0 ; j<100 ; j++)
                DP[i][j] = -1;

        if( !grundy(0, str.length()-1) )
            cout << "Tracy" << endl;
        else
            cout << "Teddy" << endl;
    }
}
