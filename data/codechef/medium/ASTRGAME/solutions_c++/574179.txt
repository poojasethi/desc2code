
/***** Author : Akshay *****/
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>

#include <cmath>
#include <cstdio>
#include <queue>
#include <list>
#include <stack>
#include <utility>
#include <numeric>
#include <map>
#include <cctype>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <cassert>
#include <iomanip>
#include <set>
#include <fstream>

using namespace std;

#define REP(a,b) for(int a=0;a<b;a++)
#define FOR(a,b,c) for(int a=b;a<c;a++)
#define FORD(a,b,c) for(int a=b;a>=c;a--)

#define S scanf
#define P printf

#define LEN(x) ((int)x.length())
#define SZ(x) ((int)x.size())
#define ALL(x) x.begin(), x.end()
#define MP(x,y) make_pair(x,y)
#define PB(x) push_back(x)
#define INF 1000000000

typedef long long ll;
typedef pair<int,int> ii;
typedef pair<int, ii> Lii;
typedef vector<int> VI;
typedef vector<bool> VB;
typedef vector<string> VS;

int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

/* Function for string split . If string starts with de-lim then call split(s.substr(1,s.length()),DELIM);
 *  *    else call split(s,DELIM);*/
std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems)
{
        std::stringstream ss(s);
        std::string item;
        while(std::getline(ss, item, delim))
                elems.push_back(item);
        return elems;
}
std::vector<std::string> split(const std::string &s, char delim)
{
        std::vector<std::string> elems;
        return split(s, delim, elems);
}
string tostring(int n)
{
        stringstream ss ; ss<<n; return ss.str();
}
#ifndef FASTIO
char *ipos, *opos, InpFile[20000000], OutFile[20000000], DIP[20];
inline int input(int flag=0) {

        while(*ipos <= 32) ++ipos;
        if ( flag  ) return (*ipos++ - '0'); /* For getting Boolean Characters */
        int x=0, neg = 0;char c;
        while( true ) {
                c=*ipos++; if(c == '-') neg = 1;
                else {
                        if (c<=32) return neg?-x:x;
                        x=(x<<1)+(x<<3)+c-'0';
                }
        }
}
inline void output(int x,int flag) {
        int y,dig=0;
        while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
        while (dig--) *opos++=DIP[dig];
        *opos++= flag ? '\n' : ' ';
}
inline void InitFASTIO() {
        ipos = InpFile; opos = OutFile;
        fread_unlocked(InpFile,20000000,1,stdin);
}
inline void FlushFASTIO() {
        fwrite_unlocked(OutFile,opos-OutFile,1,stdout);
}
#endif
int tc,n,len[52],dp[52][52];
char inp[32],match[52][32];
bool tojo(int cur,int high,int idx)
{
        if(cur+len[idx] > high ) return false;
        for(int j=0;j<len[idx];j++) if( match[idx][j]!=inp[cur+j]) return false;
        return true;
}
int gogo(int l,int h)
{
        if(l>=h) return 0;
        if(dp[l][h]!=-1) return dp[l][h];
        int grundy[52];
        memset(grundy,0,sizeof(grundy));
        for(int i=l;i<h;i++)
        {
                for(int j=0;j<n;j++)
                {
                        if(tojo(i,h,j))
                                grundy[gogo(l,i)^gogo(i+len[j],h)]=1;
                }
        }
        int K=0;
        while(grundy[K]) K++;
        return dp[l][h]=K;
}
int main()
{
        scanf("%d",&tc);
        while(tc--)
        {
                scanf(" %s%d",inp,&n);
                REP(i,n) {scanf(" %s",match[i]);len[i]=strlen(match[i]);}
                memset(dp,-1,sizeof(dp));
                puts(!gogo(0,strlen(inp))?"Tracy":"Teddy");
        }
        return 0;
}
