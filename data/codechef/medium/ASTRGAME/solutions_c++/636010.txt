                                                                     
                                                                     
                                                                     
                                             
                                                                     
                                                                     
                                                                     
                                             
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <string>
using namespace std;

int grundy[50][50];
char W[50];
char buf[50];
//char dict[30][31];
map <string, int> dict;

void solve(int n)
{
    int j;
    int Wlen = strlen(W);
    for (int len=1; len <= Wlen; len++)
    {
        for (int i=1; i<=Wlen - len + 1; i++)
        {
            vector<int> mex(1000, 0);
            j = i + len - 1;
            for (int k=i; k<=j; k++)
            {
                // find word starts with W[k] and k + strlen(w) - 1 <= j
                map <string, int>::iterator itr;
                for(itr=dict.begin(); itr != dict.end(); itr++)
                {
                    const char *word = (*itr).first.c_str();
                    int wordlen = (*itr).second;

                    if (k + wordlen - 1 > j)
                        continue;

                    if (!memcmp(&W[k-1], word, wordlen))
                        mex[grundy[i][k-1]^grundy[k+wordlen][j]] = 1;
                }
            }
            int g=0;
            for(; mex[g]; g++)
                ;
            grundy[i][j] = g;
        }
    }
    if (grundy[1][strlen(W)])
        printf("Teddy\n");
    else
        printf("Tracy\n");
}

int main()
{
    int T, N;
    // init grundy table
    for (int i=1; i<=50; i++)
        grundy[i][i-1] = 0;
    scanf("%d", &T);
    for (; T > 0; T--)
    {
        scanf("%s", W);
        scanf("%d", &N);
        dict.clear();
        for (int i=0; i < N; i++)
        {
            scanf("%s", buf);
            dict[string(buf)] = strlen(buf);
        }
        solve(N);
    }
    return 0;
}