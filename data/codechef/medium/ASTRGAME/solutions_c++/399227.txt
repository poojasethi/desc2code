#include <string>
#include <set>
#include <vector>
#include <iostream>
#include <map>

using namespace std;

map<string, int> _g;
vector<string> words;
string s;

int g(const int start, const int end) {
	if(start > end) return 0;

	string str = s.substr(start, end-start+1);
	//cout << "'" << str << "'" << endl;

	map<string, int>::iterator it = _g.find(str);
	if(it != _g.end())
		return it->second;

	set<int> gnos;
	for(vector<string>::iterator word = words.begin(); word != words.end(); word++) {
		int pos = str.find(*word);
		while(pos != string::npos) {
			int wsize = word->size();

			string s1 = str.substr(0, pos), s2 = str.substr(pos+wsize); 
			//cout << wsize << " " << pos << ": " << s1 << " " << s2 << endl;

			gnos.insert(g(start, start+pos-1) ^ g(start+pos+wsize, end));
			pos = str.find(*word, pos+1);
		}
	}

	int g = 0;

	while(gnos.count(g) > 0)
		g++;

	_g[str] = g;
	return g;
}	

void main2() {
	string w;
	int N;
	cin >> s >> N;

	words.clear();
	for(int i = 0; i < N; i++) {
		cin >> w;
		words.push_back(string(w));
	}

	_g.clear();

	cout << ((g(0, s.size()-1) > 0) ? "Teddy" : "Tracy") << std::endl;
}

int main() {
	int T;

	cin >> T;

	for(int i = 0; i < T; i++)
		main2();

	return 0;
}
