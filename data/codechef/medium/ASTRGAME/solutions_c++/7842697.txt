// main.cpp
/*
ID: tiendao1
LANG: C++
TASK: theme
*/
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
 #include <vector>
// #include <sstream>
 #include <map>
 #include <set>
//#include <deque>
#include <queue>
#include <stack>
// #include <cstdlib>
// #include <climits>
// #include <functional>
// #include <ctime>
// #include <cmath>
 //#include <bitset>
// #include <utility>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
#define inf 1e9 + 1
#define linf 1e18
#define BASE 1000000
#define EPS 1e-10
#define PI acos(-1)
#define pii pair<int,int>
#define fi first
#define se second
#define ALL(x) (x).begin(), (x).end()
#define ms(x,val) memset(x, val, sizeof(x))
#define pb(x) push_back(x)
#define make_unique(x) sort(ALL(x)) ; x.erase( unique(ALL(x)), x.end()) ;
#define dbg(x) do { cout << #x << " = " << x << endl; } while(0)
#define mp(x, y) make_pair(x, y)

/*** IMPLEMENTATION ***/
bool exitInput = false;
int ntest = 1, itest = 1 ;

const int dx[4] =
{
    0, 0, -1, 1
};
const int dy[4] =
{
    1, -1, 0, 0
};
// const int dx[8] = {-2, -1, -1, +0, +0, +1, +1, +2};
// const int dy[8] = {+0, -1, +1, -2, +2, -1, +1, +0};

/** Knight Move **/
// const int dx[8] = {+1, +2, +2, +1, -1, -2, -2, -1};
// const int dy[8] = {+2, +1, -1, -2, -2, -1, +1, +2};

const char * directions[4] =
{
    "NE", "SE", "Sw", "Nw"
};
const ll Mod = 1000000000LL + 7;
const int maxn = 30 + 5;
const int maxv = 2000 + 5;
const int maxe = 400000 + 5;
//const int root = 1;

int n, m;
char s[maxn], dict[maxn][maxn];
int f[maxn][maxn], len[maxn];

int calc_nimber(int L, int R)
{
    int &ref = f[L][R];
    if(ref != -1)
        return ref;
    ref = 0;

    int i, j, k, t;
    set<int> mex;
    for(i = L; i <= R; ++i)
    {
        for(k = 1; k <= R - i + 1; ++k)
        {
            for(j = 0; j < m; ++j)
            {
                if(len[j] == k)
                {
                    for(t = 0; t < k; ++t)
                    {
                        if(dict[j][t] != s[i + t])
                        {
                            break;
                        }
                    }
                    if(t == k)
                    {
                        int p1 = calc_nimber(L, i - 1);
                        int p2 = calc_nimber(i + k, R);
                        int p = p1 ^ p2;
                        mex.insert(p);
                    }
                }
            }
        }
    }
    for(i = 0; mex.count(i) > 0; ++i);
    ref = i;

    return ref;
}

int main()
{
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    //time_t t1, t2; t1 = clock();
#else
    //freopen("theme.in","r",stdin) ; freopen("theme.out", "w", stdout);
#endif
    int i, j, k;

    scanf("%d", &ntest);
    for(itest = 1; itest <= ntest; ++itest)
    {
        scanf("%s", s);
        n = strlen(s);

        scanf("%d", &m);
        for(i = 0; i < m; ++i)
        {
            scanf("%s", dict[i]);
            len[i] = strlen(dict[i]);
        }

        ms(f, -1);
        k = calc_nimber(0, n-1);
        if(k == 0)
        {
            puts("Tracy");
        }
        else
        {
            puts("Teddy");
        }
    }

    return 0;
}
