#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
#include<fstream>
#include<iomanip>
#include<bitset>
#include<deque>
#include<queue>
#include<string>
#include<map>
#include<cstring>
#include<sstream>
#include<cmath>
#include<ctime>
using namespace std;

int N;
string diction[30];
string word;
int grun[30][30];

int grundy(int s, int e)
{
	if (e < s)
		return 0;
	if (grun[s][e] != -1)
		return grun[s][e];
	vector<int> mex;
	for (int i = 0; i < N; i++)
	{
		if (diction[i].size() > e-s+1)
			continue;
		for (int j = s; j <= e-diction[i].size()+1; j++)
		{
			bool b = true;
			for (int k = 0; k < diction[i].size(); k++)
			{
				if (word[j+k] != diction[i][k])
				{
					b = false;
					break;
				}
			}
			if (b)
			{
				int g1 = grundy(s, j-1);
				int g2 = grundy(j+diction[i].size(), e);
				mex.push_back(g1^g2);
			}
		}
	}
	int res = 0;
	while (find(mex.begin(), mex.end(), res) != mex.end())
		res++;
	grun[s][e] = res;
	return res;
}

int main()
{
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		memset(grun, -1, sizeof(grun));
		cin >> word;
		scanf("%d", &N);
		for (int i = 0; i < N; i++)
			cin >> diction[i];
		if (grundy(0, word.size()-1) == 0)
			cout << "Tracy\n";
		else
			cout << "Teddy\n";
	}
	return 0;
}
