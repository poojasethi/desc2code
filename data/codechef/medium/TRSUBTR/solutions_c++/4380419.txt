#include <iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#include<string>
#include<string.h>
#define vr vector
#define nil -1
using namespace std;
string first_path,second_path;
struct chef
{
int age;
int m_child;
int e_child;
};
void init(vr<chef>&arr)
{

for(vr<chef>::iterator it=arr.begin(); it!=arr.end(); it++)
{
    it->age=nil;
    it->m_child=nil;
    it->e_child=nil;
}
}
void get_age(vr<chef>&arr)
{
for(vr<chef>::iterator it=arr.begin(); it!=arr.end(); it++)
scanf("%d",&(it->age));
}

void get_relation(vr<chef>&arr)
{
int parent,child;char type;
for(int i=1; i<arr.size(); i++)
{
    scanf("%d %d %c",&parent,&child,&type);
    if(type=='M')
        arr[parent-1].m_child=child-1;
    else
        arr[parent-1].e_child=child-1;
    //arr[child-1].parent=parent-1;
}

}

void dfs1(vr<chef>&arr,int index)
{
chef curr=arr[index];
char *str1=(char*)malloc(10);
sprintf(str1,"%d",curr.age);
string age(str1);
first_path+=age;
if(curr.m_child!=nil)
{
    first_path+=string("M");
    dfs1(arr,curr.m_child);
    first_path+=string("M");
    first_path+=age;
}
if(curr.e_child!=nil)
{
    first_path+=string("E");
    dfs1(arr,curr.e_child);
    first_path+=string("E");
    first_path+=age;
}
}
void dfs2(vr<chef>&arr,int index)
{
chef curr=arr[index];
char *str1=(char*)malloc(10);
sprintf(str1,"%d",curr.age);
string age(str1);
second_path+=age;
if(curr.m_child!=nil)
{
    second_path+=string("M");
    dfs2(arr,curr.m_child);
    second_path+=string("M");
    second_path+=age;
}
if(curr.e_child!=nil)
{
    second_path+=string("E");
    dfs2(arr,curr.e_child);
    second_path+=string("E");
    second_path+=age;
}
}
bool determine(string str1,string str2)
{
size_t found = str1.find(str2);
return ((found!=string::npos)?true:false);
}
void print(vr<chef>&arr)
{
for(int i=0;i<arr.size();i++)
    cout<<arr[i].age<<" "<<arr[i].m_child<<" "<<arr[i].e_child<<endl;
}

int main()
{
int num_chefs1,num_queries,num_chefs2;
char *str1;
cin>>num_chefs1;
vr<chef> arr1(num_chefs1);
init(arr1);
get_age(arr1);
get_relation(arr1);
dfs1(arr1,0);
//cout<<first_path<<endl;
cin>>num_queries;
while(num_queries--)
{
    cin>>num_chefs2;
    vr<chef>arr2(num_chefs2);
    init(arr2);
    get_age(arr2);
    get_relation(arr2);
    second_path.clear();
    dfs2(arr2,0);
    //cout<<second_path<<endl;
    cout<<(determine(first_path,second_path)?"YES":"NO")<<endl;

}
return 0;
}
