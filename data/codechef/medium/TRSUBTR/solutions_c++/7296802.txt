// Headers
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cassert>
#include<cstdlib>
#include<vector>
#include<map>
#include<fstream>
#include<list>
#include<stack>
#include<queue>
#include<algorithm>
#include<bitset>
#include<set>
using namespace std;
// Global declarations
typedef long long int ll;
typedef vector<int> vi;
typedef vector<char> vc;
typedef pair<int, int> pi;
const int mod = 1e9 + 7;
const int INF = 1 << 25;
// Macros
#define mp make_pair
#define el putchar('\n')
#define sp putchar(' ')
#define Fill(a,val) memset(a,val,sizeof a)
#define ff first
#define ss second
#define pb push_back
#define ppb pop_back
#define gcd __gcd
#define all(a) a.begin(),a.end()

int const NN = 1e5 + 5;
int Age1[NN], Age2[NN];
int M1[NN], E1[NN], M2[NN], E2[NN];
int Parent1[NN], Parent2[NN];
int NodeCounter[NN];
int root1, root2;
pi pp[NN];
map<int, vi>AgeToChef;

int getRoot(int N, int Parent[]){
	int i;
	for (i = 1; i <= N; ++i){
		if (Parent[i] == -1)
			return i;
	}
	assert(i != N + 1), "no root detected";
}

void countNodes(int root){
	if (root == -1)
		return;
	countNodes(M1[root]);
	countNodes(E1[root]);
	NodeCounter[root] = 1 + (M1[root] == -1 ? 0 : NodeCounter[M1[root]]) + (E1[root] == -1 ? 0 : NodeCounter[E1[root]]);
}

bool ifMatch(int r1, int r2){
	if (r1 == -1 && r2 == -1)
		return true;
	if (r1 == -1 || r2 == -1)
		return false;
	if (Age1[r1] != Age2[r2])
		return false;
	return ifMatch(M1[r1], M2[r2]) && ifMatch(E1[r1], E2[r2]);
}

void solve(int N, int n){
	int age2 = Age2[root2];
	vi vv = AgeToChef[age2];
	int nn = vv.size();
	int lo = 0, hi = nn - 1, mid;
	while (lo <= hi){
		mid = (lo + hi) >> 1;
		int node = vv[mid];
		int count = NodeCounter[node];
		if (count >= n){
			hi = mid - 1;
		}
		else if (count < n) {
			lo = mid + 1;
		}
	}
	int node = vv[mid];
	int count = NodeCounter[node];
	if (count < n)
		mid += 1;
	if (mid >= nn || NodeCounter[vv[mid]] > n){
		cout << "NO\n"; return;
	}
	for (int i = mid; i < nn; ++i){
		int node = vv[i];
		int count = NodeCounter[node];
		if (count > n)
			break;
		bool YES = ifMatch(node, root2);
		if (YES) {
			cout << "YES\n"; return;
		}
	}
	cout << "NO\n"; return;
}

int main(){
	int N;
	cin >> N;
	for (int i = 1; i <= N; ++i){
		cin >> Age1[i];
		M1[i] = E1[i] = -1;
		Parent1[i] = -1;
	}
	for (int i = 1; i < N; ++i){
		int A, B;
		char C;
		cin >> A >> B >> C;
		Parent1[B] = A;
		(C == 'M' ? M1[A] : E1[A]) = B;
	}
	root1 = getRoot(N, Parent1);
	countNodes(root1);
	for (int i = 1; i <= N; ++i){
		pp[i] = mp(NodeCounter[i], i);
	}
	sort(pp + 1, pp + N + 1);
	for (int i = 1; i <= N; ++i){
		int node = pp[i].ss;		
		int age = Age1[node];
		AgeToChef[age].pb(node);
	}
	int Q;
	cin >> Q;
	while (Q--){
		int n;
		cin >> n;
		for (int i = 1; i <= n; ++i){
			cin >> Age2[i];
			Parent2[i] = -1;
			M2[i] = E2[i] = -1;
		}
		for (int i = 1; i < n; ++i){
			int A, B;
			char C;
			cin >> A >> B >> C;
			Parent2[B] = A;
			(C == 'M' ? M2[A] : E2[A]) = B;
		}
		root2 = getRoot(n, Parent2);
		solve(N, n);
	}
	return 0;
}