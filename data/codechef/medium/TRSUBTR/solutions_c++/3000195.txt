#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <complex>
#include <utility>
#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cctype>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>

using namespace std;


typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef pair<int,int> PII;

#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
#define REV(i,a,b) for(int i=a-1;i>=b;i--)
#define rev(i,n) REV(i,n,0)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define GI ({ int x; scanf("%d",&x); x; })
#define ALL(v) v.begin(),v.end()
#define PB push_back
#define MP make_pair
#define PQ priority_queue
#define inf (int)(1e9)
#define linf (LL)(1e18)
#define eps (double)(1e-9)
#define leps (LD)(1e-18)
#define PI (double)(3.141592653589793238)


int age[100005],l[100005],r[100005],in[100005];
string s,p;
int f[200005];

int root(int n)
{
	REP(i,1,n+1)
		cin>>age[i];
	memset(l,-1,sizeof l);
	memset(r,-1,sizeof r);
	memset(in,0,sizeof in);
	int a,b;
	char c;
	rep(i,n-1)
	{
		cin>>a>>b>>c;
		if(c=='M')
			l[a]=b;
		if(c=='E')
			r[a]=b;
		in[b]++;
	}
	REP(i,1,n+1)
		if(in[i]==0)
			return i;
	return -1;
}

void build(string &s,int i)
{
	if(i==-1)
		return;
	s.PB(char(age[i]+30));
	s.PB((char)27);
	build(s,l[i]);
	s.PB((char)26);
	build(s,r[i]);
}

void fail()
{
	int m=p.length();
	int i=0,j=-1;
	f[i++]=j++ + 1;
	while(i<m)
	{
		if(p[i]==p[j])
			f[i++]=j++ + 1;
		else if(j>0)
			j=f[j-1];
		else
			f[i++]=0;
	}
}

bool kmp()
{
	int n=s.length(),m=p.length();
	int i=0,j=0;
	while(i<n)
	{
		if(s[i]==p[j])
		{
			i++,j++;
			if(j==m)
				return 1;
		}
		else if(j>0)
			j=f[j-1];
		else
			i++;
	}
	return 0;
}

int main()
{
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	int n,q,m;
	cin>>n;
	int st=root(n);
	s="";
	build(s,st);
	//cout<<s<<'\n';
	cin>>q;
	rep(i,q)
	{
		cin>>m;
		st=root(m);
		p="";
		build(p,st);
		//cout<<p<<'\n';
		fail();
		cout<<(kmp()?"YES\n":"NO\n");
	}
	return 0;
}
