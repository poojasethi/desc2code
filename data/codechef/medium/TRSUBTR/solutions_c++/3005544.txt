#include <stdio.h>
#include <algorithm>
#define MOD 1000000007

using namespace std;

struct SN{
  int M, E, par;
  int age;
  long long hash;
};
struct SD{
  int id;
  long long hash;
};

int N;
SN node1[100010], node2[1010];
SD dict[100010];

char kal[10];

bool f1(SD a, SD b){
  return a.hash < b.hash;
}

long long DFS(int id, SN *node){
  if(id == -1) return 987654321; 
  
  long long M = 1000003 * DFS(node[id].M, node);
  long long E = 1009 * DFS(node[id].E, node);
  node[id].hash = (M+E+node[id].age)%MOD;
  return node[id].hash;
}

bool CompareTree(int id1, int id2){
  if(id1 == -1){
    if(id2 == -1) return true;
    else return false;
  }
  if(id2 == -1) return false;
  
  if(node1[id1].hash == node2[id2].hash){
    return (CompareTree(node1[id1].M, node2[id2].M) && CompareTree(node1[id1].E, node2[id2].E));
  }
  else return false;
}

bool Find(long long hash, int id){
  int lo = 0, hi = N-1, mid;
  
  while(lo <= hi){
    mid = (lo+hi)/2;
    if(dict[mid].hash == hash){
      for(int i=mid; i>=0; i--){
        if(dict[i].hash != hash) break;
        if(CompareTree(dict[i].id, id)) return true;
      }
      for(int i=mid+1; i<N; i++){
        if(dict[i].hash != hash) break;
        if(CompareTree(dict[i].id, id)) return true;
      }
      return false;
    }
    else{
      if(dict[mid].hash > hash) hi = mid-1;
      else lo = mid+1;
    }
  }
  return false;
}

int main(){
  int a, b;
  int Q, M;
  
  scanf("%d", &N);
  for(int i=0; i<N; i++){
    scanf("%d", &node1[i].age);
    node1[i].M = node1[i].E = -1;
    node1[i].par = -1;
  }
  for(int i=0; i<N-1; i++){
    scanf("%d %d %s", &a, &b, kal);
    if(kal[0] == 'M') node1[a-1].M = b-1;
    else node1[a-1].E = b-1;
    node1[b-1].par = a-1;
  }
  
  for(int i=0; i<N; i++){
    if(node1[i].par == -1) DFS(i, node1);
  }
  for(int i=0; i<N; i++){
    dict[i].id = i;
    dict[i].hash = node1[i].hash;
  }
  sort(dict, dict+N, f1);
  
  scanf("%d", &Q);
  for(int i=0; i<Q; i++){
    scanf("%d", &M);
    for(int j=0; j<M; j++) {
      scanf("%d", &node2[j].age);
      node2[j].M = node2[j].E = -1;
      node2[j].par = -1;
    }
    for(int j=0; j<M-1; j++){
      scanf("%d %d %s", &a, &b, kal);
      if(kal[0] == 'M') node2[a-1].M = b-1;
      else node2[a-1].E = b-1;
      node2[b-1].par = a-1;
    }
    
    for(int j=0; j<N; j++){
      if(node2[j].par == -1){
        long long hash = DFS(j, node2);
        //printf("hash = %lld\n", hash);
        if(Find(hash, j)) printf("YES\n");
        else printf("NO\n");
        break;
      }
    }
  }
  return 0;
}
