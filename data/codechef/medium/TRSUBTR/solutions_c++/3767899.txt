#include <stdio.h>
#include <string.h>
 
struct Tree
{
public:
	char age;
	int M;
	int E;
};
 
Tree MainRestChefs[100000];
char txt[400000];
char pat[4000];
int lps[4000];

void computeLPSArray(int M);

bool KMPSearch(int M, int N)
{
	// create lps[] that will hold the longest prefix suffix values for pattern
	int j = 0;  // index for pat[]

	// Preprocess the pattern (calculate lps[] array)
	computeLPSArray(M);

	int i = 0;  // index for txt[]
	while (i < N)
	{
		if (pat[j] == txt[i])
		{
			j++;
			i++;
		}

		if (j == M)
		{
			return true;
		}

		// mismatch after j matches
		else if (pat[j] != txt[i])
		{
			// Do not match lps[0..lps[j-1]] characters,
			// they will match anyway
			if (j != 0)
				j = lps[j - 1];
			else
				i = i + 1;
		}
	}
	return false;
}

void computeLPSArray(int M)
{
	for (int x=0; x<M; x++)
		lps[x] = 0;

	int len = 0;  // lenght of the previous longest prefix suffix
	int i;

	lps[0] = 0; // lps[0] is always 0
	i = 1;

	// the loop calculates lps[i] for i = 1 to M-1
	while (i < M)
	{
		if (pat[i] == pat[len])
		{
			len++;
			lps[i] = len;
			i++;
		}
		else // (pat[i] != pat[len])
		{
			if (len != 0)
			{
				// This is tricky. Consider the example AAACAAAA and i = 7.
				len = lps[len - 1];

				// Also, note that we do not increment i here
			}
			else // if (len == 0)
			{
				lps[i] = 0;
				i++;
			}
		}
	}
}

void createPattern(int root, char* buffer, int& i)
{
	if (root >= 0)
	{
		buffer[i++] = MainRestChefs[root].age;
		createPattern(MainRestChefs[root].M, buffer, i);
		createPattern(MainRestChefs[root].E, buffer, i);
	}
	buffer[i++] = ')';
}
 
 void createTree()
 {
	int N, A, B, age;
	char C;
	scanf("%d", &N);
	
	for (int i = 0; i < N; i++)
	{
		MainRestChefs[i].M=-1;
		MainRestChefs[i].E=-1;
		scanf("%d",&age);
		MainRestChefs[i].age = age;
	}
 
	for (int j = 0; j < N - 1; j++)
	{
		scanf("%d %d %c", &A, &B, &C);
		if (C=='M')
		{
			MainRestChefs[A - 1].M = B - 1;
		}
		else
		{
			MainRestChefs[A - 1].E = B - 1;
		}
	}
 }
 
int main()
{
	createTree();
	int n = 0;
	createPattern(0, txt, n);
	txt[n] = '\0';
	int Q;
	scanf("%d", &Q);
 
	for (int q = 0; q < Q; q++)
	{
	    createTree();
		int m = 0; 
		createPattern(0, pat, m);
		pat[m] = '\0';
 
		if (KMPSearch(m, n) == NULL)
			 printf("NO\n");
		else
			printf("YES\n");
	}
	return 0;
}