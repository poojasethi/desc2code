#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ll long long int
#define s(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define mod 1000000007
#define get getchar_unlocked

int a[100005];
int l[100005];
int r[100005];
string X, Y;
int tA[100005];
int tL[100005];
int tR[100005];
int P[100005];

void dfs(int i)
{
    X.pb('(');
    int tmp = a[i];
    while (tmp) {
        X.pb(tmp%10+48);
        tmp /= 10;
    }
    if (l[i]) {
        X.pb('L');
        dfs(l[i]);
    }
    if (r[i]) {
        X.pb('R');
        dfs(r[i]);
    }
    X.pb(')');
}

void dfs2(int i)
{
    Y.pb('(');
    int tmp = tA[i];
    while (tmp) {
        Y.pb(tmp%10+48);
        tmp /= 10;
    }
    if (tL[i]) {
        Y.pb('L');
        dfs2(tL[i]);
    }
    if (tR[i]) {
        Y.pb('R');
        dfs2(tR[i]);
    }
    Y.pb(')');
}

void precompute()
{
    P[1] = 0;
    int i, k = 0;
    for (i = 2; i <= Y.size(); ++i) {
        while (k && Y[i-1] != Y[k])
            k = P[k];
        if (Y[i-1] == Y[k])
            ++k;
        P[i] = k;
    }
}

bool KMP()
{
    precompute();
    int i, k = 0;
    for (i = 1; i <= X.size(); ++i) {
        while (k && Y[k] != X[i-1])
            k = P[k];
        if (Y[k] == X[i-1])
            ++k;
        if (k+1 == Y.size())
            return true;
    }
    return false;
}

int main()
{
    int n, i, x, y, q, m;
    char ch;
    s(n);
    for (i = 1; i <= n; ++i)
        s(a[i]);
    for (i = 1; i < n; ++i) {
        s(x);
        s(y);
        scanf(" %c", &ch);
        if (ch == 'M')
            l[x] = y;
        else
            r[x] = y;
    }
    dfs(1);
    s(q);
    while (q--) {
        Y.clear();
        s(m);
        for (i = 1; i <= m; ++i) {
            s(tA[i]);
            tL[i] = tR[i] = 0;
        }
        for (i = 1; i < m; ++i) {
            s(x);
            s(y);
            scanf(" %c", &ch);
            if (ch == 'M')
                tL[x] = y;
            else
                tR[x] = y;
        }
        dfs2(1);
        //cout << X << " " << Y << endl;
        //cin >> X >> Y;
        printf(KMP() ? "YES\n" : "NO\n");
    }
    return 0;
}
