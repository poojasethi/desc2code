#include<stdio.h>
using namespace std;

int max_ab(int a, int b)
{
	if(a > b)
		return a;
	else 
		return b;
}

int HeightSubTree(int ** tree, int root)
{
	if (root == -1)
		return 0;
	else
	{
		return tree[root][3] = max_ab(HeightSubTree(tree, tree[root][1]), HeightSubTree(tree, tree[root][2])) + 1;
	}
}

int CompareTree(int ** tree, int startTree, int ** subTree, int startSubTree)
{
	if(startTree == -1 && startSubTree == -1)
		return 1;		
	if (
		(startTree != -1 && startSubTree == -1)
		|| (startTree == -1 && startSubTree != -1)
	)
		return 0;
	if(tree[startTree][0] == subTree[startSubTree][0])
		return CompareTree(tree, tree[startTree][1], subTree, subTree[startSubTree][1]) && CompareTree(tree, tree[startTree][2], subTree, subTree[startSubTree][2]);
	else
		return 0;
}

int IsSubTree(int ** tree, int startTree, int ** subTree, int startSubTree)
{
	if (startTree == -1 && startSubTree == -1)
		return 1;
	if (
		(startTree != -1 && startSubTree == -1)
		|| (startTree == -1 && startSubTree != -1)
	)
		return 0;
	if (	// Age is same and height of tree is also same.
		tree[startTree][0] == subTree[startSubTree][0] 
		&& tree[startTree][3] == subTree[startSubTree][3]
	)
		return CompareTree(tree, startTree, subTree, startSubTree);
	else if (tree[startTree][3] < subTree[startSubTree][3]) // Height of sub tree is more than current tree.
		return 0;
	else
		return IsSubTree(tree, tree[startTree][1], subTree, startSubTree) || IsSubTree(tree, tree[startTree][2], subTree, startSubTree);
	return 0;
}

int main()
{
	int N, Q, M, A, B;
	char C;
	int startTree = 0, startSubTree = 0;
	int i = 0;
	int ** tree, ** subTree;
	
	scanf("%d", &N);
	tree = new int * [N + 1];
	for (i = 1; i <= N; i++)
	{
		tree[i] = new int[4];
		int temp = 0;
		scanf("%d", &temp);
		tree[i][0] = temp;
		tree[i][1] = -1;
		tree[i][2] = -1;
		tree[i][3] = 0;
	}
	for (i = 1; i < N; i++)
	{
		scanf("%d %d %c", &A, &B, &C);
		if (C == 'M' || C == 'm')
			tree[A][1] = B;
		else
			tree[A][2] = B;			
		if (i == 1)
			startTree = A;
	}
	HeightSubTree(tree, startTree);
	
	scanf("%d", &Q);
	for (i = 0; i < Q; i++)
	{
		scanf("%d", &M);
		subTree = new int * [M + 1];
		for (int j = 1; j <= M; j++)
		{
			subTree[j] = new int[4];
			int temp = 0;
			scanf("%d", &temp);
			subTree[j][0] = temp;
			subTree[j][1] = -1;
			subTree[j][2] = -1;
			subTree[j][3] = 0;
		}
		
		for (int j = 1; j < M; j++)
		{
			scanf("%d %d %c", &A, &B, &C);
			if (C == 'M' || C == 'm')
				subTree[A][1] = B;
			else
				subTree[A][2] = B;
				
			if (j == 1)
				startSubTree = A;
		}
		HeightSubTree(subTree, startSubTree);

		if(IsSubTree(tree, startTree, subTree, startSubTree))
			printf("YES\n");
		else
			printf("NO\n");
			
		delete subTree;
	}	
	delete tree;
	return 0;
}