#include <iostream>
#include<vector>
#include<cstring>
using namespace std;

typedef struct node
{
	unsigned short age;
	struct node* left;
	struct node* right;
}NODE;

NODE tree[100001];
NODE subtree[1001];

bool bsubtree[201];
bool match(NODE *tree1,NODE *tree2)
{
    if(!tree1 || !tree2) return false;
	if(tree1->age!=tree2->age) return false;

	if((tree1->left && !tree2->left) || (!tree1->left && tree2->left)) return false;

	if((tree1->right && !tree2->right) || (!tree1->right && tree2->right)) return false;

	bool leftmatch=true;
	if(tree1->left && tree2->left) {leftmatch= match(tree1->left,tree2->left); }

	bool rightmatch=true;

	if(tree1->right && tree2->right) {rightmatch=match(tree1->right,tree2->right); }

	return leftmatch&&rightmatch;
}

int main()
{
	int n;
	int m;
	int q;
	cin >> n; // number of chefs

	memset(tree,0,sizeof(tree));

	for(int i=1;i<=n;i++)
		cin >> tree[i].age;

	for(int i=1;i<=n-1;i++)
	{
		int a,b; char m;
		cin>>a>>b>>m;

		if(m=='M')
		{
			tree[a].left=&tree[b];
		}
		else
		{
			tree[a].right=&tree[b];
		}
	}

	cin>>q;

	for(int i=1;i<=q;i++)
	{
		cin >>m; // no of chefs in new restra

		memset(subtree,0,sizeof(subtree));

		for(int j=1;j<=m;j++)
			cin >> subtree[j].age;

		for(int j=1;j<=m-1;j++)
		{
			int a,b; char m;
			cin>>a>>b>>m;

			if(m=='M')
			{
				subtree[a].left=&subtree[b];
			}
			else
			{
				subtree[a].right=&subtree[b];
			}
		}

		int j=1;
		for(j=n;j>=1;j--)
		{
			if(tree[j].age)
			{
				if(match(&tree[j],&subtree[1]))
				{
					bsubtree[i]=1;
					break;
				}
			}
		}

		if(j>n) bsubtree[i]=0;


	}
	for(int i=1;i<=q;i++)
	{
		if(bsubtree[i]) cout<<"YES"<<endl;
		else cout<<"NO"<<endl;
	}

}
