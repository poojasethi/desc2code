#include<iostream>
//#include<conio.h>
using namespace std;



struct tree{
       int data;
       tree *lchild;
       tree *rchild;
       tree *parent;
};


//functions used
bool isSubTree(tree *T,tree *t);
bool check(tree *T,tree *t);
void inorder(tree *t);



int main()
{
    int N;
    cin>>N;
    tree *T[N];
    for(int i=0;i<N;i++)
    {
            T[i]=new tree;
            cin>>T[i]->data;
            T[i]->lchild=T[i]->rchild=T[i]->parent=NULL;
    }
    int baap,beta;
    char side;
    for(int i=0;i<N-1;i++)
    {
            cin>>baap>>beta>>side;
            if(side=='M') T[baap-1]->lchild=T[beta-1];
            else T[baap-1]->rchild=T[beta-1];
            T[beta-1]->parent=T[baap-1];
    }
    // main tree is created till this point
    int no_of_q;
    cin>>no_of_q;
    while(no_of_q--)
          {
               int n;
               cin>>n;
               tree *t[n];
               for(int i=0;i<n;i++)
               {
                       t[i]=new tree;
                       cin>>t[i]->data;
                       t[i]->lchild=t[i]->rchild=NULL;
               }
               int bap,bet;
               char sid;
               for(int i=0;i<n-1;i++)
               {
                       cin>>bap>>bet>>sid;
                       if(sid=='M') t[bap-1]->lchild=t[bet-1];
                       else t[bap-1]->rchild=t[bet-1];
                       t[bet-1]->parent=t[bap-1];
               }
               // sub tree is created till this point
               tree *mainbaap,*subbaap;
               while(T[0]->parent!=NULL) T[0]=T[0]->parent;
               mainbaap=T[0];
               while(t[0]->parent!=NULL) t[0]=t[0]->parent;
               subbaap=t[0];
               if(isSubTree(mainbaap,subbaap))
               cout<<"YES\n";
               else 
               cout<<"NO\n";
          }
    //getch();
    return 0;
}


bool isSubTree(tree *T,tree *t)
{
     if(t==NULL) return 0;
     if(T==NULL) return 0;
     if(check(T,t)) return 1;
     return (isSubTree(T->lchild,t)||isSubTree(T->rchild,t));
}
     
     
     
bool check(tree *T,tree *t)
{
     if(T==NULL&&t==NULL) return 1;
     if(T==NULL||t==NULL) return 0;
     if(T->data==t->data)
     return(check(T->lchild,t->lchild)&&check(T->rchild,t->rchild));
     else return 0;
}
