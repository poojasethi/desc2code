#include<bits/stdtr1c++.h>
using namespace std;
class kmp
{
    const vector<int> *text, *pattern;
    vector<int> fail;
    int tsz,psz;
public:
    kmp(const vector<int> &t,const vector<int> &p)
    {
        text=&t;
        pattern=&p;
        fail.resize((*pattern).size(),0);
        tsz=(*text).size();
        psz=(*pattern).size();
        Build_fail();
        
    }
    vector<int> get_fail()
    {
        return fail;
    }
    bool find_pattern()
    {
        return(match_v(0).size());
    }
    vector<int> find_all()
    {
        return(match_v(1));
    }
    
private:
    
    int next_state(int pos,char c)
    {
        if(pos==psz)
            pos=fail[pos-1];
        
        while(pos>0 && pattern[0][pos]!=c)
            pos=fail[pos-1];
        
        return pos+(int)(c==pattern[0][pos]);
    }
    void Build_fail()
    {
        fail[0]=0;
        for(int i=1;i<psz;i++)
        {
            fail[i]=next_state(fail[i-1],pattern[0][i]);
        }
    }
    vector<int> match_v( bool all)
    {
        vector<int> ret;
        int pi=0;
        int ti=0;
        while(ti<tsz)
        {
            pi=next_state(pi,text[0][ti]);
            ti++;
            if(pi==psz)
            {
                ret.push_back(ti-psz);
                if(!all)
                    break;
            }
        }
        
        return ret;
    }

};

int n;
struct node
{
    int age;
    int left,right;
    node(){left=-1;right=-1;}
   
};
vector<node> v,vq;

bool parent[100004],qparent[2009];

vector<int> in1,inq,pre,pre1;

void inOrder(int root,vector<int> &in,vector<node> &vv)
{
    if(root==-1)
    {
        in.push_back(root);
        return ;
    }
    
    inOrder(vv[root].left,in,vv);
    in.push_back(vv[root].age);
    inOrder(vv[root].right,in,vv);
    
}

void preOrder(int root,vector<int> &in,vector<node> &vv)
{
    if(root==-1)
    {
        in.push_back(root);
        return ;
    }
    in.push_back(vv[root].age);
    preOrder(vv[root].left,in,vv);
    preOrder(vv[root].right,in,vv);
    
}


int main()
{
    #ifndef ONLINE_JUDGE
        freopen("2.in","r",stdin);
        
    #endif // ONLINE_JUDGE
    
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin>>n;
    v.resize(n+4);
    for(int i=0;i<n;i++)
    {
        cin>>v[i+1].age;
    }
    for(int i=1;i<n;i++)
    {
        int a,b;
        char c;
        
        cin>>a>>b>>c;
        parent[b]=1;
        if(c=='E')
            v[a].right=b;
        else
            v[a].left=b;
    }
    
    int root;
    for(int i=1;i<=n;i++)
    {
        if(!parent[i])
            root=i;
    }
    inOrder(root,in1,v);
    preOrder(root,pre1,v);
    /*for(int i=0;i<in1.size();i++)
        cout<<in1[i]<< " ";
        cout<<endl;
    */
    int q;
    int m;
    cin>>q;
    while(q--)
    {
        inq.clear();
        pre.clear();
        memset(qparent,0,sizeof qparent);
        cin>>m;
        vq.clear();
        vq.resize(m+4);
        for(int i=0;i<m;i++)
        {
            cin>>vq[i+1].age;
        }
        for(int i=1;i<m;i++)
        {
            int a,b;
            char c;
            
            cin>>a>>b>>c;
            qparent[b]=1;
            if(c=='E')
                vq[a].right=b;
            else
                vq[a].left=b;
        }
        
        int rootq;
        for(int i=1;i<=m;i++)
        {
            if(!qparent[i])
                rootq=i;
        }
        //cout<<rootq<<endl;
        inOrder(rootq,inq,vq);
        preOrder(rootq,pre,vq);
        /*for(int i=0;i<inq.size();i++)
            cout<<inq[i]<< " ";
            cout<<endl;
        */
        kmp k(in1,inq);
        kmp k2(pre1,pre);
        if(k.find_pattern() && k2.find_pattern())
        {
            cout<<"YES"<<endl;
        }
        else
            cout<<"NO"<<endl;
        
        
    }
    return 0;
    
}
