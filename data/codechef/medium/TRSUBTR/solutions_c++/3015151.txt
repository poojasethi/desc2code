#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int num;
	int age;
	node* parent;
	node* lt;
	node* rt;
	bool isroot;
	node(){
		parent=NULL;
		lt=NULL;
		rt=NULL;
		isroot=true;
	}
};
/*
void print_tree(node T){
	if(T.lt==NULL && T.rt==NULL) {cout<<"<"<<T.age<<","<<T.num<<">"<<endl;cout<<"...NO LT..."<<endl<<"...NO RT..."; return;}
	else if(T.lt==NULL) {cout<<"<"<<T.age<<","<<T.num<<">"<<endl<<"...NO LT..."<<endl<<"...RT...:"<<endl;print_tree(*(T.rt));}
	else if(T.rt==NULL) {cout<<"<"<<T.age<<","<<T.num<<">"<<endl<<"...LT...:"<<endl;print_tree(*(T.lt));cout<<endl<<"...NO RT...";}
	else{cout<<"<"<<T.age<<","<<T.num<<">"<<endl<<"...LT..."<<endl;print_tree(*(T.lt));cout<<endl<<"...RT...:"<<endl;print_tree(*(T.rt));}
} */
bool check_sub(node * a, node * b){
	if(a->isroot==true) return false;
	else{
		if(b->age!=a->age) return false;
		else{
		if(b->lt==NULL && b->rt==NULL) return true;
		else if(b->lt==NULL){
			if(a->rt==NULL) return false;
			else return check_sub(a->rt,b->rt);
		}
		else if(b->rt==NULL){
			if(a->lt==NULL) return false;
			else return check_sub(a->lt,b->lt);
		}
		else{
			if(a->lt==NULL || a->rt==NULL) return false;
			else return (check_sub(a->lt,b->lt)*check_sub(a->rt,b->rt));
		}
	}
}
}
int main(){
int n;
cin>>n;
vector<node> T;
vector<vector<int> > v(101);
for(int i=0;i<n;i++){
	node temp;
	int y;
	cin>>y;
	temp.age=y;
	temp.num = i;
	T.push_back(temp);
	
	//cout<<"t ni size: "<<T.size()<<" ";
	
	
	v[y].push_back(i);
	//cout<<"v[y] ni size: "<<v[y].size()<<" ";
	//cout<<"["<<y<<"]["<<v[y].size()-1<<"] : "<<v[y][v[y].size()-1]->num<<"..........."<<endl;
	//cout<<"THIS MAN: "<<v[1][0]->num<<endl;
}
int parentz;
//cout<<T[v[1][0]].age<<" "<<T[v[1][0]].num<<endl;

/*
for(int i=0;i<101;i++){
	
	if(v[i].size()!=0){
		cout<<i<<": ";
		int dd;
		for(dd=0;dd<v[i].size();dd++){
			cout<<T[v[i][dd]].num<<" ";
		}
		cout<<endl;
	}
	
}

*/
//cout<<endl<<endl<<endl;
for(int g=0;g<n-1;g++){
	int a,b;
	char c;
	cin>>a>>b>>c;
	T[b-1].isroot=false;
	T[b-1].parent=&(T[a-1]);
	if(c=='M'){
		T[a-1].lt=&(T[b-1]);
	}
	else if(c=='E'){
		T[a-1].rt=&(T[b-1]);
	}
}
for(int i=0;i<n;i++){
	if(T[i].isroot==true) parentz=i;
}
//print_tree(T[parentz]);
//cout<<T[parentz].age<<" "<<T[parentz].rt->lt->age<<endl;
//cout<<endl<<endl<<endl;
int t;
cin>>t;
bool arr[t];
for(int h=0;h<t;h++){
	int m;
	cin>>m;
	vector<node> O(m);
	for(int j=0;j<m;j++){
		int f;
		cin>>f;
		O[j].age=f;
		O[j].num=j;
	}
	//cout<<"HIIIIIIIIIII";
	int par;
	for(int q=0;q<m-1;q++){
		int a,b;
	char c;
	cin>>a>>b>>c;
	//cout<<a<<" "<<b<<" "<<c<<endl;
	O[b-1].isroot=false;
	O[b-1].parent=&(O[a-1]);
	if(c=='M'){
		O[a-1].lt=&(O[b-1]);
	}
	else if(c=='E'){
		O[a-1].rt=&(O[b-1]);
	}
	
	//if(O[a-1].isroot==true){par=a-1;}
	}
	//cout<<endl;
	//cout<<"BLAAAAAAAAAAAH"<<endl;
	//print_tree(O[par]);
	//cout<<endl;
	for(int l=0;l<m;l++){
		if(O[l].isroot==true){par=l;break;}
	}
	//cout<<par;
	//cout<<endl;
		//print_tree(O[par]);

	int headage=O[par].age;
	
	for(int k=0;k<v[headage].size();k++){
		if(check_sub(&T[v[headage][k]], &O[par])) {arr[h]=true;break;}
		arr[h]=false;	
	}
	
}
for(int g=0;g<t;g++){
	if(arr[g]==false) cout<<"NO"<<endl;
	else cout<<"YES"<<endl;
}
}
