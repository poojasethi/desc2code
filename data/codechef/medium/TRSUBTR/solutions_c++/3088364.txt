#include<iostream>
using namespace std;

struct node{
int data;
node *left;
node *right;
};

node* getnode(int num)
{
node *p;
p=new node;
p->data=num;
p->left=NULL;
p->right=NULL;
return p;
}

bool compare(node* p, node* s){
if (p==NULL || s==NULL)
	if(p==s)
		return true;
	else
		return false;
else
	return (p->data==s->data && compare(p->left, s->left) && compare(p->right, s->right));
}

int main()
{
int N;
cin>>N;
node **p_tree=new node*[N];

int i;

//first N lines
for(i=0;i<N;i++){
	int t;
	cin>>t;
	p_tree[i]=getnode(t);
	}
	
//next N-1 lines
for(i=0;i<N-1;i++){
	int s,j;
	char t;
	cin>>s>>j>>t;
	if(t=='M'){
		p_tree[s-1]->left=p_tree[j-1];
		continue;
		}
	else
		p_tree[s-1]->right=p_tree[j-1];
	}

int Q;
cin>>Q;

for(i=0;i<Q;i++){
	int M;
	cin>>M;
	node **s_tree=new node*[M];

	int k;
	//next M lines
	for(k=0;k<M;k++){
		int t;
		cin>>t;
		s_tree[k]=getnode(t);
		}
	
	//next M-1 line
	for(k=0;k<M-1;k++){
		int s,j;
		char t;
		cin>>s>>j>>t;
		if(t=='M'){
			s_tree[s-1]->left=s_tree[j-1];
			continue;
			}
		else
			s_tree[s-1]->right=s_tree[j-1];
		}
		
	//comparison
	for(k=0;k<N;k++){
		bool b;
		b=compare(p_tree[k],s_tree[0]);
		if(b==true){
			cout<<"YES"<<endl;
			break;
			}
		}
	if(k==N){
		cout<<"NO"<<endl;
		}
	for(k=0;k<M;k++)
		delete s_tree[k];
	delete [] s_tree;
}
return 0;
}