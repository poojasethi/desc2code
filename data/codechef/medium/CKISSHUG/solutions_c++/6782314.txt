#include<iostream>
#include<vector>
using namespace std;
#include<math.h>
#define ull unsigned long long
#define ll long long
#define D 3

template <class T>
class matrix
{
//	private:
//		vector<vector<T> >M;
	public:
		vector<vector<T> >M;
		matrix(){}
		
		matrix(int r,int c){
			M.assign(r,vector<T>(c));
		}
		
		int rowSize(){
			return M.size();
		}
		int colSize(){
			if(M.size()==0)
			return 0;
			
			return M[0].size();
		}
		
		matrix<T> operator*(matrix<T> B){
					
			matrix<T> &A=*this;				//& to reflect back changes
			int r=A.rowSize();
			int c=B.colSize();
			
		//	if(A.colSize()==B.rowSize()){
			matrix<T> F(A.rowSize(),B.colSize());
			
			for(int i=0;i<r;i++){
				for(int j=0;j<c;j++){
					for(int k=0;k<A.colSize();k++)
					F.M[i][j]+=A.M[i][k]*B.M[k][j];
				}
			}
			return F;
			/*}
			else
			{
				matrix<T>obj(1,1);
				return obj;
			
				//null matrix
			}*/
		}
		matrix<T> operator%(int m){
			matrix<T> &A=*this;	
			int r=A.rowSize();
			int c=A.colSize();
			
			matrix<T> F(r,c);
			
			for(int i=0;i<r;i++)
				for(int j=0;j<c;j++)
					F.M[i][j]=A.M[i][j]%m;
			return F;
		}
		
		void identity(){
			for(int i=0;i<(*this).rowSize();i++)
					(*this).M[i][i]=1;
		}	
		void printMatrix(){
			matrix<T> &A=(*this);
			for(int i=0;i<A.rowSize();i++)				//(*this)
			{
				for(int j=0;j<A.colSize();j++)
				cout<<(*this).M[i][j]<<" ";
				cout<<endl;
			}
//			A.M[0][0]=100;
		}
};
//non-member function
template<class T>
matrix<T> power(matrix<T>& a,ll n,int modulo){
	matrix<T>R(a.rowSize(),a.colSize());
	
	R.identity();
	
	while(n){
		if(n&1)
			R=(R*a)%modulo;
	
		a=(a*a)%modulo;
		n/=2;
		
	}
	return R;
}

int main(){
	
	ll n;
	int test;
	int t[][D]={{0,1,0},{0,0,1},{-2,2,1}};
	ll m=1000000007;
	int a,b;

	cin>>test;
	for(int pp=1;pp<=test;pp++){
		
		//cin>>a>>b>>n>>m;
		cin>>n;	
		matrix<ll>T(D,D);
		matrix<ll>mat(D,1);
	
		for(int i=0;i<D;i++)
		for(int j=0;j<D;j++)
			T.M[i][j]=t[i][j] ;
			
		mat.M[0][0]=2;mat.M[1][0]=4;mat.M[2][0]=6;
			
		if(n<=D)
		cout<<(mat.M[n-1][0]&m+m)%m<<endl;
		else{
		
		T=power<ll>(T,(ll)(n-(D)),m);
		mat=(T*mat)%m;
		cout<<(mat.M[D-1][0]%m+m)%m<<endl;
		}
	}	
}
//Kisses
