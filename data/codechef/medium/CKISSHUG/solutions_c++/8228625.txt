#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <unistd.h>
 
#include <iostream>
#include <algorithm>
using namespace std;
 
class IO {
	private:
		static const int size = 128;
		int offset, index;
		char buffer[ size ];
		
	public:
		inline char read_char(FILE *fp){
			return getc(fp);
			if( ! ( offset ^ index ) ){
				index = fread( buffer, sizeof(char), size, fp );
				offset = 0;
			}
			return buffer[ offset++ ];
		}
		
		inline int read_int(FILE *fp = stdin){
			char t = read_char(fp);
			while( t < 48 ) t = read_char(fp);
			
			int N = t-48;
			t = read_char(fp);
			while( t > 47 ){
				N = N*10 + t - 48;
				t = read_char(fp);
			}
			
			return N;
		}
};
 
IO io;
 
#define MOD 1000000007
 
int compare( const void *a, const void *b ){
	return ( *(int*)a - *(int*)b );
}
 
long long mod_pow(long long b, long long e, long long m = MOD){
	long long r = 1L;
	//printf("MOD_POW b=%ld e=%ld r=%ld\n", b, e, r);fflush(stdout);
	while( e > 0 ){
		if( e & 0x1 )
			r = r*b % m;
		e >>= 1;
		b = b*b % m;
		//printf("MOD_POW b=%ld e=%ld r=%ld\n", b, e, r);fflush(stdout);
	}
	return r;
}
 
int main( int argc, char **argv ){
	int N=0, i=0, j=0;
	long long tmp;
	
	int TC = io.read_int();
	while( TC-- ){
		N = io.read_int();
		i = N/2; j = N - i;
		tmp = mod_pow( 2L, N / 2 + 1 ) + mod_pow( 2L, (N - 1) / 2 + 1 ) - 2;
		printf("%d\n", (int) (tmp % MOD ));
	}
	
	return 0;
}
 