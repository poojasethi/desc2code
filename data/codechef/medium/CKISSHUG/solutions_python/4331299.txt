#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random
import bisect


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(i):
    # pour chaque guest, c'est H ou K
    # sauf si il y a un K deux fois avant
    # 0000
    # 0001
    # 0010
    # 0011
    # 0101
    # 0111
    # 1010
    # 1011
    # 1111

    # il y a maximum 2 kiss-start
    # le nombre de chiffres possibles est le nombre de positions de kissstart
    # ksp et ksi (kiss start pair et kiss start impair)
    # N = 3
    """
        N = 3
        HHH
        HHK
        HKH
        HKK
        KHK
        KKK
        # ki = 1/None
        # kp = 0/2/None

        N = 4
        # ki = 1/3/None
        # kp = 0/2/None
        HHHH
        HHHK
        HHKH
        HHKK
        HKHK
        HKKK
        KHKH
        KHKK
        KKKH
        KKKK

        N = 5
        HHHHH
        HHHHK
        HHHKH
        HHHKK
        HHKHK
        HHKKK
        HKHKH
        HKHKK
        HKKKH
        HKKKK
        KHKHK
        KHKKK
        KKKHK
        KKKKK

    """
    N = i
    hl = N / 2

    count = 1  # case no ks
    for ks in xrange(N):

        # remaining bits after first ks
        min_k2 = ks + 1
        max_k2 = N - 1
        nb_k2 = (max_k2 - min_k2 + 2)
        nb_k2 /= 2
        count += 2 ** nb_k2

    return count % 1000000007



def alg2(i):
    N = i
    hl = N / 2

    # only from teh first she kiss for the compulsion
    # so we need to know if first she kisses is pair or impair

    # un kissstart qui bouge, puis on bouche les trous restant
    # N = 3:
    """
        ks = None, 0, 1, 2
        k2 = NA  ,
        # possibilité pour k2: un index sur deux à partir de N-ks + 1

    """
    #count = 2  # case no ks
    loop_length = (N - 1) / 2
    #for loop in xrange(2, loop_length + 2):
    #    print "loop", loop, loop_length
    #    count += 2**(loop)
    #    count %= 1000000007

    # y'a 2**2 + 2**3 + 2**4 ... 2**(loop_length+2)
    # donc c'est comme 2**(loop_length+3) - 1 - 2**0 - 2**1 - 2**2
    mod = 1000000007
    count = pow(2, loop_length + 2, mod) - 2

    if N % 2 == 0:
        count += pow(2, loop_length + 1, mod)

    return count % 1000000007



def main():
    #comp(alg2, alg, 10000)
    #comp(alg2, alg, 6)
    #comp(alg2, alg, 20000)
    #print timed(alg2)(1000000000)
    #import cProfile
    #cProfile.runctx('alg()', globals(), locals())
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        #L = map(int, data.readline().split())  # int
        #L = map(float, data.readline().split())  # float
        #L = data.readline().split()  # string
        #s = data.readline().strip()
        i = int(data.readline().strip())
        res = alg2(i)
        print res


if __name__ == "__main__":
    main()
