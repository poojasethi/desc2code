#include <iostream>
#include <cstdio>
#include <map>
using namespace std;
int a[50005];
int heapsize=0;
void exchange(int &a,int &b)
{
    int temp=a;
    a=b;
    b=temp;
}
void maxheapify(int i)
{
    int l=i*2;
    int r=i*2+1;
    int largest=i;
    if(l<=heapsize && a[l]>a[largest])
        largest=l;
    if(r<=heapsize && a[r]>a[largest])
        largest=r;
    if(largest!=i)
    {
        exchange(a[i],a[largest]);
        maxheapify(largest);
    }
}
void insert(int key)
{
    heapsize++;
    a[heapsize]=key;
    int i=heapsize;
    while(i/2>=1 && a[i/2]<a[i])
    {
        exchange(a[i],a[i/2]);
        i/=2;
    }
}
int extractmax()
{
    int max=a[1];
    a[1]=a[heapsize];
    heapsize--;
    maxheapify(1);
    return max;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        scanf("%d",&n);
        int temp;
        map<int,int> m;
        for(int i=0;i<n;i++)
        {
            scanf("%d",&temp);
            m[temp]++;
        }
        map<int,int>::iterator it=m.begin();
        for(it=m.begin();it!=m.end();it++)
        {
            temp=it->second;
            insert(temp);
        }
        long long int sum=0;
        while(heapsize)
        {
            int x=extractmax();
            if(heapsize)
            {
                int y=extractmax();
                x--;
                y--;
                if(x)
                    insert(x);
                if(y)
                    insert(y);
                sum++;
            }
            else
                sum+=x;
        }
        printf("%lld\n",sum);
    }
    return 0;
}
