#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define MAX 100010
#define mp(i,j) make_pair(i,j)
#define pb(x) push_back(x)

pair<pair<ll,ll> ,ll> query[MAX];
vector <pair<pair<ll,ll> ,ll > > parts;

vector <ll> factors[MAX];
ll a[MAX];

ll ans[MAX];
ll done[MAX];

int main()
{
	ll m,n,q,i,j,l,r,k,mi,sz,qz;

	for(i=1;i<MAX;i++) {
		for(j=i;j<MAX;j+=i) {
			factors[j].push_back(i);
		}
	}
	
	scanf("%lld%lld", &n,&q);

	for(i=1;i<=n;i++) {
		scanf("%lld", &a[i]);
	}

	memset(done,0,sizeof(done));
	memset(ans,0,sizeof(ans));

	m = 1;
	for(i=1;i<=q;i++) {
		scanf("%lld%lld%lld", &l,&r,&k);

		parts.pb(mp(mp(l-1,k),i));
		parts.pb(mp(mp(r,k),i));

		m = max(m,k);
	}
		
	ll cnt[m+1];

	memset(cnt,0,sizeof(cnt));

	sort(parts.begin(),parts.end());

	k = 0;
	qz = parts.size();

	while(k<qz && parts[k].first.first==0) {
		done[parts[k].second] = 1;
		k++;
	}

	for(i=1;i<=n;i++) {
		sz = factors[a[i]].size();
		for(j=0;j<sz;j++) {
			if(factors[a[i]][j]<=m) cnt[factors[a[i]][j]]++;
		}
		while(k<qz && parts[k].first.first==i) {
			if(done[parts[k].second] == 0) {
				done[parts[k].second] = 1;
				ans[parts[k].second] = -cnt[parts[k].first.second];
			} else {
				done[parts[k].second] = 2;
				ans[parts[k].second] += cnt[parts[k].first.second];
			}
			k++;
		}
	}

	for(i=1;i<=q;i++) {
		printf("%lld\n", ans[i]);
	}
	return 0;
}
