/*Author: Rishul Aggarwal*/

#include<bits/stdc++.h>

#define mod 1000000007
#define ll long long
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define in(type,x) scanf("%" #type,&x)
#define debug(args...) {dbg,args; cerr<<endl;}
#define test int t;\
			 in(d,t);\
			 while(t--)

using namespace std;

struct debugger
{template<typename T> debugger& operator,(const T& v)
 {cerr<< v <<" ";
  return *this;
 }
}dbg;

ll gcd(ll a,ll b) {if(b==0) return a; return gcd(b,a%b);}

ll power(ll b,ll exp,ll m) {ll ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }

vector<vector<int> >factor;

int main()
{
 int n,q;
 in(d,n),in(d,q);
 int x;
 factor.resize(100002);
 int max=-1;
 rep(i,1,n)
 {
 	in(d,x);
 	if(x>max) max=x;
 	for(int j=1;j*j<=x;j++)
 	{
 		if(x%j==0)
 		{
 			if(j*j==x)
 			 factor[j].push_back(i);
 			else
			 {factor[j].push_back(i);
			  factor[x/j].push_back(i);
		     }
		}
	}
 }
 
/* for(int i=1;i<=max;i++)
  {for(int j=0;j<factor[i].size();j++)
    cout<<factor[i][j]<<" ";
   cout<<endl;
 }*/
 
 while(q--)
 {
 	int l,r,k;
 	in(d,l),in(d,r),in(d,k);
 	vector<int>::iterator lb,ub;
 	lb = lower_bound(factor[k].begin(),factor[k].end(),l);
    ub = upper_bound(factor[k].begin(),factor[k].end(),r);
    printf("%d\n",ub-lb);
 }
    
    
return 0;
}

