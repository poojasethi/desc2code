/*MD SHAKIM
  B.TECH 2ND YEAR
  CSE
  MNNIT ALLAHABAD*/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>
#include <map>
#include <string>
#include <climits>
#include <set>
#include <string>
#include <sstream>
#include <ctime>
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
#define getcx getchar
#define SIZE(A) ((int)A.size())
#define PB push_back
#define ALL(c) c.begin(), c.end()
#define INF (int(1e9))
#define INFL (LL(1e18))
#define F(i, a, n) for(int i = a; i < n; i++)
#define FE(i, a, n) for(int i = a; i <= n; i++)
#define R(i, a, n) for(int i = a; i > n; i--)
#define RE(i, a, n) for(int i = a; i >= n; i--)
#define loop(n) F(i, 0, n)
#define loop1(n) FE(i, 1, n)
#define TR(c,i) for(VI::iterator i = (c).begin(); i != (c).end(); i++)
#define pii pair< int,int >
#define piii pair< pii , int >
#define temp 0
#define wait 1
#define perm 2
struct comp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.second>b.second;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first<b.first;
  }
} myobject;
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define V 100000
vector<int> f[100005],cnt[100005];
int main()
{
    int n,q,l,r,k,lim,i,j,ans,x,y,a;
    for(i=2; i*i<=V; i++)
    {
        for(j=i*i; j<=V; j+=i)
        {
            x=i;
            y=j/i;
            if(x<y)
            {
                f[j].push_back(x);
                f[j].push_back(y);
            }
            else
            {
                f[j].push_back(x);
            }
        }
    }
    in(n);
    in(q);
    for(i=1; i<=n; i++)
    {
        in(a);
        lim=f[a].size();
        for(j=0; j<lim; j++)
        {
            cnt[f[a][j]].push_back(i);
        }
        if(1!=a)
            cnt[1].push_back(i);
        cnt[a].push_back(i);
    }
    int low,high;
    while(q--)
    {
        in(l);
        in(r);
        in(k);
        low=lower_bound(cnt[k].begin(),cnt[k].end(),l)-cnt[k].begin();
        high=upper_bound(cnt[k].begin(),cnt[k].end(),r)-cnt[k].begin();

        ans=high-low;

        printf("%d\n",ans);
    }
    return 0;
}
