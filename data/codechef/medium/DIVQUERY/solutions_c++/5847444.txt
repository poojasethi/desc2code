#include<iostream>
#include<vector>
using namespace std;

#define pb push_back
#define maxn 100000
#define maxd 100000
#define maxq 100000

typedef long long  LL;
typedef pair<int,int> pi;
typedef pair<int,pi> pii;

vector<int> divs[maxd+1],bucket[maxd+1];
vector<pii> qs[maxq+1];
int arr[maxn+1];
int ans[maxn+1];
int tree[maxn+1];

int read(int idx)
{
	int sum=0;
	while(idx>0)
	{
		sum+=tree[idx];
		idx-=(idx & -idx);
	}
	return sum;
}
void update(int idx,int val)
{
	while(idx<=maxn)
	{
		tree[idx]+=val;
		idx+= (idx & -idx);
	}
}

int main()
{
	int n,q,i,j;
	for(i=1;i<=maxd;i++)
      for(j=i;j<=maxd;j+=i)
        divs[j].pb(i);
        scanf("%d %d",&n,&q);
	  for(i=1;i<=n;i++)
	  {
	  	scanf("%d",&arr[i]);
	  	
	  	for(j=0;j<divs[arr[i]].size();j++)
	  	{
	  	   int d=divs[arr[i]][j];
	  	   bucket[d].pb(i);
		}
	  }
	  
	  	  
	for(j=0;j<q;j++)
	{
		int a,b,k;
		scanf("%d %d %d",&a,&b,&k);
		qs[k].pb(make_pair(j,make_pair(a,b)));
		
	}
	
	for(i=1;i<=maxd;i++)
	{
		for(j=0;j<bucket[i].size();j++)
		 update(bucket[i][j],+1);
		 
		 for(j=0;j<qs[i].size();j++)
		 {
		 	int id=qs[i][j].first;
		 	int x=qs[i][j].second.first;
		 	int y=qs[i][j].second.second;
		 	int h=read(y);
		 	int w=read(x-1);
		 	ans[id]=h-w;
		 	
		}
		
		for(j=0;j<bucket[i].size();j++)
		 update(bucket[i][j],-1);
		
	}
	
	
	for(j=0;j<q;j++)
	printf("%d\n",ans[j]);
	
}
