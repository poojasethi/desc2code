//Offline Query Processing 
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<utility>
#include<cstring>
#include<cmath>
#define LL long long int
#define mod 1000000007
#define vi vector<int>
#define vvi vector < vi >
#define pii pair<int,int>
#define all(c) c.begin(),c.end()
#define sf(x) scanf("%d",&x);
#define sf2(x,y) scanf("%d%d",&x,&y);
#define mem(a,val) memset(a,val,sizeof(a))
#define nl printf("\n");
#define pb push_back
#define mp make_pair
#define f first
#define s second
using namespace std;
int a[100005];
int cnt[100005];
pair<int,pair<int,int> >low[100005];
pair<int,pair<int,int> >high[100005];
struct node
{	int l;
	int h;
}query[100005];
int main()
{	int t,i,j,N,Q,L,R,K,ptr1,ptr2;
	sf(N);sf(Q);
	for(i=0;i<N;i++) sf(a[i]);
	for(i=0;i<Q;i++)
	{	sf2(L,R);sf(K);
		L--;R--;
		low[i]=mp(L-1,mp(i,K));
		high[i]=mp(R,mp(i,K));
	}
	sort(low,low+Q);
	sort(high,high+Q);
	mem(cnt,0);
	ptr1=0;ptr2=0;
	for(i=0;i<N;i++)
	{	for(j=1;j*j<a[i];j++)
		{	if(a[i]%j==0)
			{	cnt[j]++;
				cnt[a[i]/j]++;
			}
		}
		if(j*j==a[i]) cnt[j]++;
		while(low[ptr1].f<0) ptr1++;
		while(low[ptr1].f==i)
		{	query[low[ptr1].s.f].l=cnt[low[ptr1].s.s];
			ptr1++;
		}
		while(high[ptr2].f==i)
		{	query[high[ptr2].s.f].h=cnt[high[ptr2].s.s];
			ptr2++;
		}
	}
	for(i=0;i<Q;i++)
		printf("%d\n",query[i].h-query[i].l);
	return 0;
}
