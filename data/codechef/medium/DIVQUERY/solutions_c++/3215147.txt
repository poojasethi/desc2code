// DIVQUERY
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<string>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<cstdio>
#include<cmath>
#include<limits.h>
#include<cstring>
#include<cstdlib>
#include<cfloat>
#include<cassert>
#define maxm(a,b) a>b?a:b;
#define minm(a,b) a<b?a:b;
using namespace std;
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
typedef map<int,int> mp;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)
#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
#define traverse_map(a,b) for(mp::iterator it=a;it!=b;++it)
#define MOD 1000000007
#define MAX 1000001
#define cases() int t; cin>>t; while(t--)
// fast input function
#define getcx getchar_unlocked
// fast input function
#ifdef ONLINE_JUDGE
 inline void inp( int &n )
 {
    n=0;
    int ch=getcx();int sign=1;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

    while(  ch >= '0' && ch <= '9' )
            n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
    n=n*sign;
  }
#else
inline void inp(int &n){
 cin>>n;
}
#endif
#ifdef ONLINE_JUDGE
inline long long inp(){
	char c = getchar_unlocked();
	long long n = 0;
	while(c < '0' || c > '9') c = getchar_unlocked();
	while(c >= '0' && c <= '9')
		n = (n<<3) + (n<<1) + c - '0', c = getchar_unlocked();
	return n;
}
#else
inline long long inpll()
{
	ll x;
	cin>>x;
	return x;
}
#endif

vi pre[100001],ans[100001],arr;
/*
int search(int left,int right,int key,int k)
{     int mid;
    while(left<right)
    {
	mid=(left+right)/2;
	if(ans[k][mid]>key)
	  right=mid-1;
	else if(ans[k][mid]<key)
	  left=mid+1;
	else
	 break;
    }
    return mid+1;
}
*/

int search(int left,int right,int key,int k)
{
	if(left>right)
	 return 0;
	int mid=(left+right)/2;

	if(ans[k][mid]<=key&&(ans[k][mid+1]>key))
	 return mid+1;
	 
	 if(ans[k][mid]<key)
	 return search(mid+1,right,key,k);
	 else 
	 {return search(left,mid-1,key,k);
	 }
}
int bts(int key,int k)
{
	if(ans[k].size()==0||key<ans[k][0])
	 return 0;
	 
	 if(ans[k][ans[k].size()-1]<=key)
	 return ans[k].size();
	 
	 return search(0,ans[k].size()-1,key,k);
}
int main(){
 
 int n,query;
 inp(n);
 inp(query);
 int i;
 int max=-1;

 rep(i,n){
  int x;
  inp(x);
  arr.pb(x);
  if(max<x)
   max=x;
 }
 int j;
 for(i=1;i<=max;i++)
   for(j=i;j<=max;j+=i)
   {
		pre[j].pb(i);
   }
 
 rep(i,n)
 {
		for(j=0;j<pre[arr[i]].size();j++)
		{
			ans[pre[arr[i]][j]].pb(i+1);

		}
 }
 int l,r,k,count=0;

 while(query--)
 {
   inp(l);
   inp(r);
   inp(k);
   count=bts(r,k)-bts(l-1,k);

   cout<<count<<endl;
 }
 return 0;
}
