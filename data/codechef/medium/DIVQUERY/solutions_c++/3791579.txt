#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

#define X first
#define Y second

#define MP make_pair

#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


typedef pair<int,int> pint;
typedef map<int,int> mint;

#define SIZE 100100

int n;
int arr[SIZE];

struct xx{
    int le,k;
}res[2*SIZE];
int cnt = 0;

bool cmp( const xx&a,const xx&b ){
    if ( a.le!= b.le )return a.le<b.le;
    else return a.k<b.k;
}

struct tt{
    int le,ri,k;
}given[SIZE];
int q;

int ans[SIZE];

map< pint,int > mp;

int main(){

    scanf("%d %d",&n,&q);

    for (int i=1;i<=n;++i){
        scanf("%d",&arr[i]);
    }

    for (int i=0;i<q;++i){
        scanf("%d %d %d",&given[i].le,&given[i].ri,&given[i].k);

        res[cnt].le = given[i].le-1;
        res[cnt].k = given[i].k;
        cnt++;

        res[cnt].le = given[i].ri;
        res[cnt].k = given[i].k;
        cnt++;
    }

    sort( res,res+cnt,cmp );

    int now = 0;

    while ( now<cnt &&  res[now].le == 0 ){
        mp[ MP( res[now].le , res[now].k ) ] = 0;
        now++;
    }


    for (int i=1;i<=n;++i){
        for (int j=1;j*j<=arr[i];++j){
            if ( arr[i] %j == 0 ){
                ans[ j ]++;
                if ( j!= arr[i]/j )
                    ans[ arr[i]/j ]++;
            }
        }
        while ( now<cnt &&  res[now].le == i ){
            mp[ MP( res[now].le , res[now].k ) ] = ans[ res[now].k ];
            now++;
        }
    }

    for (int i=0;i<q;++i){
        printf("%d\n",mp[ MP(given[i].ri,given[i].k) ] - mp[ MP(given[i].le-1,given[i].k ) ] );
    }
    return 0;
}
