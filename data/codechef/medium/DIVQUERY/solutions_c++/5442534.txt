#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>
#include <stdlib.h>
#include <assert.h>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}

typedef vector<int> vi;
typedef pair<int,int> ii;

int prime[10000],a[100010];
vector<ii> vec;
bitset<100010> visited;
vector<int> factors ;
vector<vi> occur;

int buildseive(int n)
{
int i,j,x,y;  
    j = 0;
    for(i = 2;i<=n;i++)
    {
      if(visited[i] == 0)
      {
       prime[j] = i;
       j++;
      }
      x = 2;
      y = x*i;
      while(y<=n)
      {
        visited[y] = 1;
        x++;
        y = x*i;
      }
    }
    return j-1;

}

int po(int a, int b){
  int r;
  if(b==0) return 1;
  r = po(a,b/2);
  r = (r*r);
  if(b%2) r = (r*a);
  return r;
}


// this routine stores all the factors of a number whose prime factors and their occurences have been stores in vector vec

void back(int ind,int prod)
 {
   
   if(ind == vec.size())
    {
     factors.push_back(prod);return;
    }
   int num = vec[ind].first;
   for(int i=0;i<=vec[ind].second;i++)
    {
      back(ind+1,prod*po(num,i));
    }
  
 }

void findfactor(int x,int pos)
 {
    // find primefactors and their no of occurences
    
    vec.clear();factors.clear();
    int idx = 0 , pf = prime[idx];
    while(x != 1 && (pf*pf<=x))
     {
        if(x % pf == 0)
         {
           int c = 0;
           while(x % pf == 0)
            {
              x /= pf;
              c++;       
            }
          vec.push_back(ii(pf,c));        
         }
         pf = prime[++idx];      
     }
     if(x != 1)
      {
         vec.push_back(ii(x,1));   
      }
      
     // find factors and store it in vector factors  
     
     back(0,1);
     
     // store position of occurences of each factors
     
     for(int i=0;i<factors.size();i++)
      occur[factors[i]].push_back(pos);       
      
 }




int main() {

    int n,q;
    buildseive(100010);
    occur.assign(100010,vi());
    inp(n);inp(q);
    FOR(i,1,n)
     {
       int x;
       inp(x);
       findfactor(x,i);         
     }
    FOR(i,1,q)
     {
      int l,r,k;
      inp(l);inp(r);inp(k);
      int lh = lower_bound(occur[k].begin(),occur[k].end(),l)-occur[k].begin();
      int rh = upper_bound(occur[k].begin(),occur[k].end(),r)-occur[k].begin();
      printf("%d\n",rh-lh);         
     }
         
   
	return 0;
} 
