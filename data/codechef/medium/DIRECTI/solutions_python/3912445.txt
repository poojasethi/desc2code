#!/usr/bin/python
# coding=utf8
import sys
import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        nb_instr = int(data.readline())
        instr = []
        for iinstr in xrange(nb_instr):
            instr.append(data.readline().strip().split(" on "))
        for i in xrange(0, len(instr)):
            reverse_i = len(instr) - 1 - i
            if i == 0:
                verb = "Begin"
            else:
                idx_to_check = reverse_i + 1
                verb = "Left" if instr[idx_to_check][0] == "Right" else "Right"
            road = instr[reverse_i][1]
            print verb + " on " + road
        print

        #lint = map(int, data.readline().split())
        #lfloat = map(float, data.readline().split())
        #lstring = data.readline().split()
        #string = data.readline().strip()


if __name__ == "__main__":
    main()
