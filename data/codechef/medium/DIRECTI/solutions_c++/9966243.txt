/**
 * December Cook-Off 2012 at Codechef
 *
 * Problem:     DIRECTI - Reversing directions
 * Author:      Anton Lunyov (Tester)
 * Complexity:  O(input size)
 * Timing:      0.00 out of 1
 *
 * Description:
 * We split each instruction into the direction part and the road part,
 * where string " on " is included to the road part.
 * For example, for instruction "Begin on Road A" we have
 * dir = "Begin" and road = " on Road A".
 * Now we have arrays dirs[] and roads[] of size N.
 * To produce the output we need to reverse the part of dirs[] array
 * except the first element and change each "Left" command to
 * "Right" and vice-versa. For example,
 * {"Begin", "Left", "Left", "Right"}
 * becomes at first
 * {"Begin", "Right", "Left", "Left"}
 * and then becomes
 * {"Begin", "Left", "Right", "Right"}.
 * Also we need to reverse the whole array roads[].
 * After that we simply output concatenations
 * of dirs[i] and roads[i] for all i.
 */
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

const int maxN = 40;

int main() {
	// input number of tests
	int T;
	cin >> T;
	for (int t = 0; t < T; ++t) {
		// input number of instructions
		int N;
		cin >> N;

		// dirs[i] will contain "Begin", "Left" or "Right"
		string dirs[maxN];

		// roads[i] will contain the remaining part of instruction
		string roads[maxN];
		// so for "Begin on Road A" we have
		// dirs[i] = "Begin" and roads[i] = " on Road A"

		// input instructions
		for(int i = 0; i < N; ++i) {
			cin >> dirs[i];
			// getline will read all remaining characters on the line including spaces
			getline(cin, roads[i]);
		}

		// reversing and inverting Left/Right directions 
		reverse(dirs + 1, dirs + N);
		for (int i = 1; i < N; ++i) {
			if (dirs[i] == "Left") {
				dirs[i] = "Right";
			} else if (dirs[i] == "Right") {
				dirs[i] = "Left";
			}
		}

		// reversing roads
		reverse(roads, roads + N);

		// output the result
		for (int i = 0; i < N; ++i) {
			cout << dirs[i] << roads[i] << endl;
		}
		cout << endl;
	}
	return 0;
}
