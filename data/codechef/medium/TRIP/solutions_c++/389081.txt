#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <cmath>
#include <iomanip>
#include <cstdio>

using namespace std;

#define PRINT(x) cout << "DEBUG " << #x << " = " << x <<  endl;

#define all(x) (x).begin(),(x).end()
#define sz(x) ((int)(x).size())
#define pb push_back
#define mp make_pair
#define fr(i, n) for(i = 0; i < (n); i++)
#define frr(i, n) for(int i = 0; i < (n); i++)
#define _cl(x) memset(x, 0, sizeof(x))
#define _rs(x) memset(x, -1, sizeof(x))

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef istringstream ISS;
typedef ostringstream OSS;
typedef long long ll;

const int MAXN = 1000010;
const ll mod = 1000000007LL;


int N, M;

int A[MAXN];
int S[MAXN];
int E[MAXN];

ll T[MAXN];

int step;

void read()
{
 scanf("%d%d", &N, &M);
 frr (i, N)
  scanf("%d", &A[i]);
}


void greedy() {
 int i=0;
 int last = A[0];

 step = 0;
 while (i<N) {
  if (A[i]-last > M) {
   if (A[i-1] == last)
    exit(1);

   E[step++] = i-1;
   last = A[i-1];
  }
  ++i;
 }
 if (A[N-1]-last > M)
  exit(1);

 i = N-1;
 last = A[N-1];
 step = 0;
 while (i>=0) {
  if (last - A[i] > M) {
   if (A[i+1] == last)
    exit(0);
   S[step++] = i+1;
   last = A[i+1];
  } else
   --i;
 }
 if (last-A[0] > M)
  exit(0);

 reverse(S, S+step);
}


void proc()
{
 greedy();
 for (int i=E[step-1]; i>=S[step-1]; --i)
  T[i] = (T[i+1] + 1LL)%mod;

 for (int i=step-2; i>=0; --i) {
  int j = E[i+1];

  for (int k=E[i]; k>=S[i]; --k) {
   while (j>=S[i+1] && A[j]-A[k] > M) --j;

   T[k] = ((T[S[i+1]] - T[j+1] + mod) % mod + T[k+1]) % mod;
  }
 }
 ll ans;
 ans = (T[S[0]] - T[E[0]+1] + mod ) % mod;
 printf("%d %d\n", step, (int)ans);
}

int main()
{
	int T=1;

//	cin >> T;

	frr(i, T)
	{
		read();
		proc();
	}

	return 0;
}

