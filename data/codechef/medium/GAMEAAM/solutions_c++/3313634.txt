#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 51;

int t, n, a, b;
int dp[N][N];

int rec(int x, int y) {
	if (dp[x][y] != -1) return dp[x][y];
	if (x == y) return dp[x][y] = 0;
	int a = x, b = y;
	if (x > y) swap(x, y);
	bool flag[N + 1] = {0};
	while (y > x) {
		y -= x;
		flag[rec(x, y)] = true;
	}
	for (int i = 0; i <= N; i++)  
		if (!flag[i]) {
			dp[a][b] = dp[b][a] = i;
			break;
		} 
	return dp[a][b];
}

int grundy(int a, int b) {
    if (a > b) swap(a, b);
    if (!(b % a)) return b / a - 1;
	if (!a) return 0;
	return b / a + (grundy(b % a, a) < b / a) - 1; 
}

int main() {
	/*memset(dp, -1, sizeof dp);
	for (int i = 1; i < N; i++, puts("")) 
        for (int j = 1; j < N; j++) 
            printf("%2d ", rec(i, j));
    int cnt = 0;
	for (int i = 1; i < N; i++) 
	   for (int j = 1; j < N; j++)
	       if (dp[i][j] == grundy(i, j)) cnt++;
    printf("%d\n", cnt);   
    printf("DP %d\n", dp[9][38]);
    printf("GRUNDY %d\n", grundy(9, 38));*/
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &n);
        int sol = 0;
        while (n--) {
            scanf("%d%d", &a, &b);
            sol ^= grundy(a, b);
        }
        puts(sol ? "YES" : "NO");
    }
	return 0;
}

