#include<stdio.h>
#include<bits/stdc++.h>
using namespace std;
long long int add[100007];
long long int data[1000007];
long long int lp[100007];
vector<long long int>dv[100007];
int prime()
{
	long long int i,j;
	for(i=2;i<100000;i++)
	{
		if(lp[i])
			continue;
		for(j=1;j*i<=100000;j++)
			{
				dv[i*j].push_back(i);
				if(lp[i*j]==0)
					lp[i*j]=i;
			}
	}
	return 0;
}
int precompute()
{
	long long int i;
	for(i=2;i<=100000;i++)
	{
		char mt[100007]={0};
		long long int tem=i;
		long long int tot=1;
		long long int it=0;
		while(tem!=1)
		{
			if(tem%(lp[tem]*lp[tem])==0)
				break;
			else
			{
				tot=tot*(lp[tem]+1);
				int lm=dv[lp[tem]+1].size();
				long long int j;
				for(j=0;j<lm;j++)
				{
					if(!mt[dv[lp[tem]+1][j]])
						{
							it++;
							mt[dv[lp[tem]+1][j]]=1;
						}
				}
				tem=tem/lp[tem];
			}
		}
		if(tem!=1||lp[it]!=it)
			add[i]=0;
		else
			add[i]=tot;
	}
	return 0;
}
int build(int id,int l,int r)
{
	if(l==r)
	{
		data[id]=add[l];
		return 0;
	}
	int mid=(l+r)/2;
	build(2*id,l,mid);
	build(2*id+1,mid+1,r);
	data[id]=data[2*id]+data[2*id+1];
	return 0;
}
long long int query(int id,int l,int r,int ql,int qr)
{
	if(l>qr||r<ql)
		return 0;
	if(l>=ql&&r<=qr)
		return data[id];
	int mid=(l+r)/2;
	return query(2*id,l,mid,ql,qr)+query(2*id+1,mid+1,r,ql,qr); 
}
int main()
{
	prime();
	precompute();
	build(1,1,1e5);
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int l,r;
		scanf("%d %d",&l,&r);
		long long int ans=query(1,1,1e5,l,r);
		printf("%lld\n",ans);
	}
	return 0;
}