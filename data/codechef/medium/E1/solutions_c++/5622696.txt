// URL :: http://www.codechef.com/problems/E1

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

#define M 1009

char board[M][M];
int pawn_cap[M][M];

// 4 Possible moves towards the right
int mv_x[] = {-2, 2, -1, 1};
int mv_y[] = {1, 1, 2, 2};

void init()
{
	 memset(board, 0, sizeof(board));
	 memset(pawn_cap, 0, sizeof(pawn_cap));
}
int main()
{
	int tc;
	cin >> tc;
	
	while(tc--)
 	{
	   int n; // Square Board Dimensions
	   cin >> n;
	   init();
	   for(int i = 0; i < n; ++i)scanf("%s",&board[i]);

	   for(int i = 0; i < n; ++i)
	   for(int j = 0; j < n; ++j){
	     if(board[i][j] == 'P')pawn_cap[i][j] = 1;
	     else pawn_cap[i][j] = 0;
	   }
	   // Dynamic programming to get the maximum pawn captured
	   int i = 0, j = 0;
	   for(j = n - 1; j >= 0; --j) // Moving from right colomn to left and keep track of max
	   {
		 for(i = 0; i < n; ++i)
		 {
			int x = 0;
			if(i + 1 < n && j + 2 < n)x = max(x, pawn_cap[i + 1][j + 2]);
			if(i - 1 >= 0 && j + 2 < n)x = max(x, pawn_cap[i - 1][j + 2]);
			if(i + 2 < n && j + 1 < n)x = max(x, pawn_cap[i + 2][j + 1]);
			if(i - 2 >= 0 & j + 1 < n)x = max(x, pawn_cap[i - 2][j + 1]);
			pawn_cap[i][j] += x;
			if(board[i][j] == 'K')break;
		 }
		 if(i < n)break;// Break if reached to White Knight's Position
	   }
	   cout << pawn_cap[i][j] << endl;
 	}
 	
	//system("pause");
	return 0;
}
