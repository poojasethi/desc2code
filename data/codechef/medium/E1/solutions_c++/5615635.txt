#include<iostream>
using namespace std;

int maxPossible;
int maxSeen;

bool isValid(int x, int y, int N) {
	if(x >= 0 && y >= 0 && x < N && y < N)
		return true;
	return false;
}
void knightTour(char** board, int N, int x, int y, int pawns) {
	if(board[x][y] == 'P') {
		pawns++;
	}
	if(y == N-1) {
		if(pawns > maxSeen) {
			maxSeen = pawns;
		}
		return;
	}
	if(isValid(x-1, y+2, N)) {//move right 2, top = 1
		knightTour(board, N, x-1, y+2, pawns);
	}
	if(isValid(x+1, y+2, N)) {//move right 2, bottom = 1
		knightTour(board, N, x+1, y+2, pawns);
	}
	if(isValid(x-2, y+1, N)) {//move right 1, top = 2
		knightTour(board, N, x-2, y+1, pawns);
	}
	if(isValid(x+2, y+1, N)) {//move right 1, bottom = 2
		knightTour(board, N, x+2, y+1, pawns);
	}
}

int main() {
	int t;
	cin >> t;
	int N;
	string line;
	while(t--) {
		cin >> N;
		char** board = new char*[N];
		int** res = new int*[N];
		for(int i=0;i<N;i++) {
			board[i] = new char[N];
			res[i] = new int[N];
		}
		int i,l,x,y;
		for(i=0; i<N;i++) {
			cin >> line;
			for(l=0;l<N;l++){
				if(line[l] == 'K') {
					x = i;
					y = l;
				}
				board[i][l] = line[l]; 
				res[i][l] = 0;
			}
		}
		//Recursive Solution - BAD!
		//int pawns = 0;
		//maxSeen = 0;
		//knightTour(board, N, x, y, pawns);
		//cout <<  maxSeen << endl;
		int found = false;
		for(y=N-1; y>=0;y--) {
			for(int x=0;x<N;x++) {
				int r = 0;
				if(isValid(x-1, y+2, N)) {//move right 2, top = 1
					r = max(r, res[x-1][y+2]);
				}
				if(isValid(x+1, y+2, N)) {//move right 2, bottom = 1
					r = max(r, res[x+1][y+2]);
				}
				if(isValid(x-2, y+1, N)) {//move right 1, top = 2
					r = max(r, res[x-2][y+1]);
				}
				if(isValid(x+2, y+1, N)) {//move right 1, bottom = 2
					r = max(r, res[x+2][y+1]);
				}
				res[x][y] = r + (board[x][y] == 'P'?1:0);
				if(board[x][y] == 'K')
				{
					cout << res[x][y] << endl;
					found = true;
					break;
				}
			}
			if(found){
				break;
			}
		}
	}
	return 0;
}