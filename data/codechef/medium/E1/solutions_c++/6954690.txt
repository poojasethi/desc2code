#include <iostream>
using namespace std;

class block
{
public:
char c;
int value;
};

#define m 1004

block b[m][m];

int max (int a, int b)
    {
    if (a>b) return a;
    else return b;
    }

int max (int a, int b, int c, int d)
    {
    int x= max(a,b);
    int y= max(c,d);
    return max(x,y);
    }

int main()
{
    int t; cin>>t;
    while (t--)
    {
      int N,row=0,col=0;
      scanf("%d",&N);
      for (int i=0; i<N; i++)
          {
          for (int j=0; j<N; j++)
              {
              cin>>b[i][j].c;
              if (b[i][j].c=='P') b[i][j].value=1;
              else if (b[i][j].c=='K') {row=i; col=j; b[i][j].value=0;}
              else b[i][j].value=0;
              }
          }
          
      b[0][N-2].value = b[0][N-2].value + b[2][N-1].value;
      b[1][N-2].value = b[1][N-2].value + b[3][N-1].value;      
      for (int i=2; i<N-3; i++)
          {
          b[i][N-2].value = b[i][N-2].value + max(b[i+2][N-1].value,b[i-2][N-1].value);
          }
      b[N-2][N-2].value = b[N-2][N-2].value + b[N-4][N-1].value;
      b[N-1][N-2].value = b[N-1][N-2].value + b[N-3][N-1].value; 
                
      for (int j=N-3; j>=col; j--)
          {
          b[0][j].value = b[0][j].value + max(b[2][j+1].value, b[1][j+2].value);
          b[1][j].value = b[1][j].value + max(b[3][j+1].value, b[2][j+2].value);
          for (int i=2; i<N-3; i++)
              {
              b[i][j].value = b[i][j].value + max(b[i+2][j+1].value,b[i-2][j+1].value,b[i+1][j+2].value, b[i-1][j+2].value);
              }
          b[N-2][j].value = b[N-2][j].value + max(b[N-4][j+1].value, b[N-3][j+2].value);
          b[N-1][j].value = b[N-1][j].value + max(b[N-3][j+1].value, b[N-2][j+2].value);
          }
    cout<<b[row][col].value<<endl;
    }
return 0;
}
