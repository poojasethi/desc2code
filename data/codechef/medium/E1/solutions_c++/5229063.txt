#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<cstdio>
#include<stack>
#include<cstring>
#include<iterator>
#include<climits>
#include<cmath>
#include<string>
#include<functional>
#include<sstream>
#include<bitset>
#include<map>
#include<set>
using namespace std;
#define     For(i,a,b)        for (int i=a; i<b; i++)
#define     Rep(i,a)          for (int i=0; i<a; i++)
#define     Rev(i,a,b)        for (int i=a; i>=b ; i--)
#define     ALL(v)            (v).begin(),(v).end()
#define     Set(a,x)          memset((a),(x),sizeof(a))
#define     Sort(x)           sort(ALL(x))
#define     SF                scanf
#define     PF                printf
#define     Dbug              cerr<<"";
#define     EPS               1e-15
#define     sz(x)             ((int)(x.size()))
typedef long long ll;
typedef vector <ll> vi;
typedef pair<ll,ll> pii;

const int MAXN = 200005;
const ll  INFI = (1<<28);
const ll MOD = 1000000007;

const int dx[]={-2,-1,+2,+1};
const int dy[]={+1,+2,+1,+2};
bool vis[1005][1005];
char bo [1005][1005];
int dp[1005][1005];
set <pii> black;
int n; 
inline bool inside(int r,int c) {
	return r>=0 && r<n && c>=0 && c<n ;
}

//void dfs(int r,int c) {
//	vis[r][c]=true;
//	if(bo[r][c] == 'P') black.insert(pii(r, c));
//	Rep(i, 4) {
//		int x=r+dx[i];
//		int y=c+dy[i];
//		if(inside(x, y) && !vis[x][y]) 
//			dfs(x, y);
//	}
//}

int rec(int r,int c) {
	if(c == n-1) return 0;
	if(~dp[r][c]) return dp[r][c];

	int ret=0;
	Rep(i, 4) {
		int x=r + dx[i];
		int y=c + dy[i];
		if(inside(x, y)) {
			int cnt=bo[x][y] == 'P' ? 1 : 0;
			ret=max(ret , rec(x, y) + cnt);
		}
	}
	return dp[r][c]=ret;
}

int main() {
#ifdef HOMEPC
	freopen("a.in","r",stdin);
	//freopen("output.txt","w",stdout);
#endif
	ios::sync_with_stdio(false);
	
	int t;cin >> t;
	while(t--) {
		Set(dp, -1);
		cin >> n;
		pii so;
		Rep(i, n) Rep(j, n)
		{
			cin >> bo[i][j];
			if(bo[i][j] == 'K') so=pii(i, j);
		}
		cout << rec(so.first,so.second) << endl;
	}


	return 0;
}