/* Author : Anurag El Dorado */

/* Libraries */
#include <bits/stdc++.h>
#include <time.h>
#include <math.h>
using namespace std;

//MACRO DEFINITIONS
/* Data Types */
#define lld long long int
#define llu unsigned long long int

/* Input */
#define sd(var) scanf("%d", &var)
#define slld(var) scanf("%lld", &var)
#define sllu(var) scanf("%llu", &var)

/* Output */
#define print_arr(a, n) cout << #a << " : "; for (int I = 0; I < n; I++) { cout << a[I] << " "; } cout << endl;	//Array till n elements
#define print_v(v) 	cout << #v << " : "; for (long long int I = 0; I != v.size(); I++) { cout << v[I] << " "; } cout << endl;	//Vector
#define p2d(a, r, c) cout << #a << endl; for (int I = 0; I < r; I++) {	for (int J = 0; J < c; J++) {	cout << a[I][J] << " ";	} cout << endl;	} cout << endl;

/* File Input */
#define FILE_INPUT freopen("input.txt", "r", stdin);

/* File Output */
#define FILE_OUTPUT freopen("output.txt", "w", stdout);

//Single Variables
#define pr(x) cout << x << endl;
#define pdln(x) printf("%d\n", x);	//printf with new line
#define pd(x) printf("%d ", x);	//printf without new line

/* Output and Debugging */
#define deb(x) cout << #x << " = " << x << endl;
#define debb(x, y) cout << #x << " = " << x << "\t" << #y << " = " << y << endl;
#define debbb(x, y, z) cout << #x << " = " << x << "\t" << #y << " = " << y << "\t" << #z << " = " << z << endl;

/* MOD  value*/
#define MOD 1000000007

/* Timing */
#define TIMEIT cout << "TIME VARIABLE REINITIALISED\n"; clock_t start_time_ = clock();
#define TIMEUP cout << "Time: " << (clock() - start_time_) / (double)(CLOCKS_PER_SEC) << "s" << endl;

char chars[1001][1001];
int board[1001][1001];

int main(){
	//FILE_INPUT;
	int T;
	scanf("%d",&T);
	for(int t=0;t<T;++t){
		int N;
		scanf("%d\n",&N);

		for(int i=0;i<N;i++) gets(chars[i]);
		bool knightFound = false;

		for(int c=N-1;c>=0;--c){
			for(int r=0;r<N;++r){
				int best = 0, curVal = (chars[r][c]=='P'?1:0);
				if (r-2>=0 && c+1<N) best = max(best, board[r-2][c+1]);
				if (r-1>=0 && c+2<N) best = max(best, board[r-1][c+2]);
				if (r+1<N && c+2<N) best = max(best, board[r+1][c+2]);
				if (r+2<N && c+1<N) best = max(best, board[r+2][c+1]);
				board[r][c] = curVal + best;

				if (chars[r][c]=='K'){
					printf("%d\n",board[r][c]);
					knightFound = true;
					break;
				}
			}
			if (knightFound) break;
		}

		//p2d(chars, N, N);
		//p2d(board, N, N);

	}
	return 0;
}
