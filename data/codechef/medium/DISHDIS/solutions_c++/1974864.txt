#include <stdio.h>
#include <map>
#ifndef ONLINE_JUDGE
	#include <windows.h>
	inline int getchar_unlocked() { return getchar(); }
#endif
#include <hash_map>
#include <vector>
#include <algorithm>
using namespace std;

#ifndef ONLINE_JUDGE
	#define TEST_PRINT printf
#else
	#define TEST_PRINT //
#endif

inline int getn()
{
	int n=0, c=getchar_unlocked();
	while(c < '0' || c > '9') c = getchar_unlocked();
	while(c >= '0' && c <= '9')
		n = (n<<3) + (n<<1) + c - '0', c = getchar_unlocked();
	return n;
}

int main(int argc, char *argv[])
{
	#ifndef ONLINE_JUDGE
	DWORD start = GetTickCount();
	#endif
	
	unsigned int num = getn();
	
	for (int i = 0; i < num; i++)
	{
		int n = getn(), m = getn();
		
		vector< pair<int,int> > chefs(m);
		
		unsigned long min_sum = 0, sum = 0;
		
		for (int j = 0; j < m; j++)
		{
			unsigned int xi = getn(), yi = getn();
			
			chefs[j] = make_pair(xi, yi);
			
			min_sum += xi;
			sum += yi;
		}
		
		if (sum < n || min_sum > n)
		{
			printf("0\n");
		}
		else
		{
			vector< vector<unsigned long> > s(m + 1, vector<unsigned long>(n+1, 0) );
			
			s[0][0] = 1;
							
			int max_v = 0;
			int min_v = 0;
			
			for (int k = 1; k <= m; k++)
			{
				const pair<int,int> &chef = chefs[k-1];

				for (int x = max_v; x >= min_v; x--)
				{
					if (s[k-1][x] != 0)
					{
						for (int j = min(n-x, chef.second); j >= chef.first; j--)
								s[k][x+j] = (s[k][x+j] + s[k-1][x]) % 1000000007;
					}
				}
				
				min_v = min_v + chef.first;
				max_v = min(max_v + chef.second, n);
			}
			
			printf("%u\n", s[m][n]);
		}
	}
	
	#ifndef ONLINE_JUDGE
	DWORD diff = GetTickCount() - start;
	
	printf("Took %.3f seconds\n", (float)diff / 1000.0);
	#endif
}