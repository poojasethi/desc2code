/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}

inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}

//n = number of dishes m = no of cooks

/*LL rec(int pos, int tot)
{
	if(pos == m + 1) {
		return (tot == 0);
	}	
	if(dp[pos][tot] != -1) {
		return dp[pos][tot];
	}
	int ans = 0;
	for(int k = x[pos]; k <= y[pos]; k++) {
		if(k <= tot) {
			ans += rec(pos + 1, tot - k);
			if(ans >= mod) {
				ans %= mod;
			}
		}
	}
	return dp[pos][tot] = ans;
}*/

void solve()
{
	int x[105], y[105];
	int dp[105][105] = {0};
	int n, m;
	n = scan();
	m = scan();
	for(int i = 1; i <= m; i++) {
		x[i] = scan();
		y[i] = scan();
	}
	dp[0][0] = 1;
	for(int i = 1; i <= m; i++) {
		for(int j = 0; j <= n; j++) {
			for(int k = x[i]; k <= y[i]; k++) {
				if(j - k >= 0) {
					dp[i][j] += dp[i - 1][j - k];
					if(dp[i][j] >= mod) {
						dp[i][j] %= mod;
					}
				}
			}
		}
	}
	//int ans = rec(1, n);
	pi(dp[m][n]); pn;
}

int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
