#include <cstdio>
#include <algorithm>
#include <cstring>

using namespace std;

const int MOD   = 1000000007;
const int MAX_N = 100;

typedef unsigned long long ULL;

int capapcity[MAX_N+1];
ULL dp[MAX_N+1][MAX_N+1];
ULL partial_sum[MAX_N+1][MAX_N+1];

int main()
{
    int T;
    scanf("%d", &T);
    for(; T>0; T--)
    {
        memset(capapcity  , 0, sizeof(capapcity));
        memset(dp         , 0, sizeof(dp));
        memset(partial_sum, 0, sizeof(partial_sum));
        int n, m, dishes;
        scanf("%d %d", &n, &m);
        dishes = n;
        for(int i=0; i<m; i++)
        {
            int xi, yi;
            scanf("%d %d", &xi, &yi);
            capapcity[i] = yi - xi;
            dishes -= xi;
        }

        for(int k=0; k<=dishes; k++)
        {
            if (k>capapcity[0])
                partial_sum[0][k] = partial_sum[0][k-1];
            else
            { 
                dp[0][k] = 1;
                if  (k-1>=0)
                    partial_sum[0][k] = partial_sum[0][k-1] + dp[0][k];
                else 
                    partial_sum[0][k] = dp[0][k];
            }
        }  

        for(int i=1; i<m; i++)
        {
            for(int j=0; j<=dishes; j++)
            {
                int from = j-capapcity[i];
                int to   = j;

                if (from > 0)
                    dp[i][j] = partial_sum[i-1][to] - partial_sum[i-1][from-1];
                else
                    dp[i][j] = partial_sum[i-1][to]; 

                dp[i][j] %= MOD;

                if (j > 0)
                    partial_sum[i][j] = (partial_sum[i][j-1]+dp[i][j]);
                else
                    partial_sum[i][j] = dp[i][j];
            }
        }
        printf("%lld\n", dp[m-1][dishes]);
    }
}
