#include <bits/stdc++.h>
using namespace std;
struct pai{
	int v1;
	int v2;
	pai(){}
	pai(int a,int b){
		v1 = a;
		v2 = b;
		}
	};

struct compare{
	bool operator()(const pai p1,const pai p2)const{
		if(p1.v1==p2.v1) return p1.v2<p2.v2;
		return p1.v1<p2.v1;
		}
	};

int main(){
	int T;
	cin>>T;
	for(int t=0;t<T;t++){
	int n,m;
	cin>>n>>m;
	map<pai,int,compare> mem;
	vector<int> edges[n+1];
	int val[n+1];
	int incount[n+1];
	int visited[n+1];
	for(int i=1;i<n+1;i++){
		incount[i] = 0;
		visited[i] = 0;
		val[i] = 0;
		}
	for(int i=0;i<m;i++){
		int v1,v2;
		cin>>v1>>v2;
		if(mem.count(pai(v1,v2))>0) continue;
		mem[pai(v1,v2)] = 1;
		edges[v1].push_back(v2);
		incount[v2]++;
		}
	queue<int> q;
	bool found = false;
	for(int i=1;i<n+1;i++){
		if(incount[i]==0){
			val[i] = 1;
			q.push(i);
			found = true;
			}
		}
	int ans = 0;
	while(!q.empty() && found){
		int top = q.front();
		if(visited[top]==1){
			found = false;
			break;
			}
		q.pop();
		for(int i=0;i<edges[top].size();i++){
			q.push(edges[top][i]);
			val[edges[top][i]] = max(val[edges[top][i]] , val[top] + 1);
			ans = max(ans,val[edges[top][i]]);
			}
		visited[top] = 1;
		}
	for(int i=1;i<=n;i++){
		if(visited[i]!=1){
			found =false;
			break;
			}
		}
	if(!found){
		cout<<"IMPOSSIBLE"<<endl;
		}
	else{
		cout<<ans<<endl;
		}
	}
}
