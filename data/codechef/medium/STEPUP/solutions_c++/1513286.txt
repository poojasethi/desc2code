#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>
#include <cstring>

#define INF 100000000
using namespace std;

typedef long long int LL;

int n , m;

int visited[10005];
int D[10005];
int deg[10005];
vector<vector<int> > adjlist(10005);
int ok;

void solve (int source) {
    queue<int> Q;
    D[source] = 1;
    visited[source] = true;
    Q.push(source);
    while (!Q.empty()) {
        int from = Q.front(); Q.pop();
        for (int i = 0; i < adjlist[from].size(); i++) {
            int to = adjlist[from][i];
            D[to] = D[from] + 1;
            if (visited[to]){
                ok = false;
                return;
            }
            visited[to] = true;
            Q.push(to);
        }
    }
}

int main() {
    //freopen("input.txt" , "r" , stdin);

    int T;
    scanf ("%d" , &T);
    while (T--) {
        scanf ("%d %d" , &n , &m);
        memset(deg , 0 , sizeof(deg));
        for (int i = 0; i < m; i++) {
            int x , y;
            scanf("%d %d" , &x , &y);
            x --; y --;
            adjlist[x].push_back(y);
            //adjlist[y].push_back(x);
            deg[y] ++;
        }
        //visited[i] = true;
        ok = true;
        memset(visited , 0 , sizeof(visited));
        memset(D , -1 , sizeof(D));

        int has = false;
        for (int i = 0; i < n; i++) {
            if (deg[i] == 0) {
                solve (i);
                has = true;
            }
        }
        if (!has) ok = false;
        if (!ok) printf("IMPOSSIBLE\n");
        else {
            int ans = 0;
            for (int i = 0; i < n; i++)
                ans = max (ans , D[i]);
            printf("%d\n" , ans);
        }

        for (int i = 0; i < n; i++)
            adjlist[i].clear();
    }
    return 0;
}
