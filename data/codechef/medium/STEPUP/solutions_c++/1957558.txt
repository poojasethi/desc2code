#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <cstring>
#include <cctype>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <complex>

using namespace std;

#define s(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)

#define pb push_back
#define mp make_pair
#define gcd __gcd
#define bitcount __builtin_popcount

#define rep(i, n) for(int i=0;i<(n);i++)
#define forall(i,a,b) for(int i=(a);i<(b);i++)
#define foreach(it,c) for(typeof((c).begin()) it=(c).begin() ;it!=(c).end();++it)
#define all(a) (a).begin(), (a).end()
#define in(a,b) ((b).find(a) != (b).end())
#define fill(a,v) memset((a), (v), sizeof (a))
#define sz(a) ((int)((a).size()))

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef vector<string> vs;
typedef pair<int,int> ii; 

#define NODES 10001
#define EDGES 200000

vi edges[NODES];
int visited[NODES];
int post[NODES];
int c, h, max_h;

void dfs(int v){
  visited[v] = 1;
  h++;
  max_h = max_h > h ? max_h : h;
  foreach(x, edges[v]){
    if (!visited[*x])
      dfs(*x);
  }
  h--;
  post[v] = c++;
}

int main(void)
{
  int t, n, m;
  ii e;
  s(t);
  while(t--){
    s(n); s(m);
    rep(i, n + 1){
      edges[i].clear();
      visited[i] = 0;
      post[i] = 0;
    }
    c = 0;
    h = 0;
    max_h = 0;
    rep(i, m){
      s(e.first);
      s(e.second);
      edges[e.first].pb(e.second);
    }
    forall(i, 1, n + 1)
      if (!visited[i])
	dfs(i);
    int flag = 0;
    forall(i, 1, n + 1){
      foreach(x, edges[i])
	if (post[i] < post[*x]){
	  flag = 1;
	  break;
	}
      if (flag)
	break; 
    }
    if (flag)
      printf("IMPOSSIBLE\n");
    else
      printf("%d\n", max_h);
  }

  return 0;
}
