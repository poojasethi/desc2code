//problema A
#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <numeric>
#include <utility>
 
#include <deque>
#include <stack>
#include <bitset>
#include <map>
#include <set>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <list>
 
#include <sstream>
#include <iostream>
#include <iomanip>
 
using namespace std;
 
typedef  long long int64;
 
#define forn(i, n) for(int64 i = 0; i < (int)(n); i++)
#define fore(i, a, n) for(int64 i = a; i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) (a).size()
#define all(a) a.begin(), a.end()
#define VI vector<int>
#define PII vector<pair<int,int> >
#define iss istringstream //>>
#define MAX 105
#define MOD 1000000007
const long double EPS = 1E-9;
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double PI = 2 * acos(.0);

VI gr[10005];
int lens[10005];
bool visited[10005];
int value[10005];
int dfs(int now, int val){
	if(lens[now] == 0) return val;
	int &maxi = value[now];
	if(maxi != -1) return val + maxi - 1;
	maxi = - 1;
	visited[now] = true;
	forn(i, lens[now]){
		if(visited[gr[now][i]])	return INF;
		maxi = max(maxi, dfs(gr[now][i], val + 1) );
	}
	visited[now] = false;
	return maxi;
}

int main(){
	int t, n, edges, u, v;
	scanf("%d", &t);
	while(t--){
		scanf("%d%d", &n , &edges);
		fill(lens, lens + n + 1, 0);
		fill(value, value + n + 1, -1);
		fill(visited, visited + n + 1, false);
		forn(i, edges){
			scanf("%d%d", &u, &v);
			gr[u].pb(v);
			lens[u] ++;
		}
		int maxi = 0;
		fore(i, 1, n + 1){
			if(value[i] == -1) maxi = max(maxi, dfs(i, 1));
		}
		if(maxi >= INF ) printf("IMPOSSIBLE\n");
		else printf("%d\n", maxi);
		fore(i, 1, n + 1) gr[i].clear();
	}
	return 0;
}


