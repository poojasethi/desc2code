#include <iostream>
#include <cstdio>
#include <vector>

#define REP(i,n)        for(int i = 0; i < n; i++)
#define FOR(i,a,b,k)    for(int i = a; i < b; i+=k)
#define SIZE 10000
using namespace std;

int ni(){
    int v;
    scanf("%d", &v);
    return v;
}

vector<int> v[SIZE];
bool visited[SIZE];
int indegree[SIZE];
bool processed[SIZE];
int parent[SIZE];
int depth[SIZE];
bool cycle, finished;
int N,M;

void DFS(int u){
    if(finished) return;
    visited[u] = 1;
    int d = 0;

    for(int i = 0; i < v[u].size(); i++){
        int next = v[u][i];
        if(!visited[next]){
            parent[next] = u;
            DFS(next);
        }
        else if(!processed[next]){
            if(parent[u] != next){
                cycle = true;
                finished = true;
            }
        }
        d = max(d, depth[next]);
        if(finished) return;
    }

    processed[u] = true;
    depth[u] = d+1;
}

void solve(){
    int ans = 0;
    REP(i,N){
        if(indegree[i] == 0){
            DFS(i);
            ans = max(ans,depth[i]);
        }
    }

    REP(i,N){
        if(!visited[i]){
            cycle = true;
            break;
        }
    }
    if(cycle){
        printf("IMPOSSIBLE\n");
    }
    else{
        printf("%d\n", ans);
    }
}

int main(){
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    int t = ni();
    while(t--){
        N = ni();
        M = ni();

        REP(i,N){
            indegree[i] = 0;
            visited[i] = false;
            processed[i] = false;
            parent[i] = -1;
            v[i].erase(v[i].begin(), v[i].end());
        }
        cycle = false;
        finished = false;

        REP(i,M){
            int a = ni()-1;
            int b = ni()-1;
            v[a].push_back(b);
            indegree[b]++;
        }
        solve();
    }
}
