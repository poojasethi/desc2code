#include<cstdio>
#include<vector>
#include<queue>
#define MAX_SIZE 10100
#include<iostream>
#include<cstring>


using namespace std;
vector<vector<int> > vec(MAX_SIZE);
int indeg[MAX_SIZE];
int value[MAX_SIZE];

queue<int> q;
int main()
{
	int T;
	scanf("%d",&T);
	
	int m,n,i,u,v,max;
	bool has_cycle;

	while(T--)
	{
		has_cycle = false;
		max = 0;
		for(i=1;i<MAX_SIZE;++i){
			vec[i].clear();
		}
		
		memset(indeg,0,sizeof(indeg));
		memset(value,0,sizeof(value));
		
		scanf("%d%d",&n,&m);
		if(n>0)
			max = 1;
		
		for(i=0;i<m;++i)
		{
			scanf("%d%d",&u,&v);
			if(u == v)
			{
				has_cycle = true;
			}
			vec[u].push_back(v);
			indeg[v]+=1;	
		}
		
		if(has_cycle == true)
			printf("IMPOSSIBLE\n");
		
		else
		{
			for(i=1;i<=n;++i)
			{
				if(indeg[i] == 0)
				{
					q.push(i);
					value[i] = 1;
				}	
			}	
			
			while(q.empty() == false)	
			{
				u = q.front();
				q.pop();
				
				vector<int> :: iterator it;
				for(it = vec[u].begin(); it != vec[u].end();it++)
				{
					v = *it;
					indeg[v] = indeg[v] - 1;
					
					if(indeg[v] == 0)
					{
						q.push(v);
						value[v] = value[u] + 1;
						max = max<value[v]?value[v]:max;
					}	
				}	
			}
			
			for(i=1;i<=n;++i){
				if(indeg[i] != 0)
				{
					has_cycle = true;
				}
			}
			if(has_cycle == true)
				printf("IMPOSSIBLE\n");
				
			else
				printf("%d\n",max);	
		}	
	}
	
	return 0;
}
