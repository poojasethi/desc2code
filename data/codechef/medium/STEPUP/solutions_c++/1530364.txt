 
#include <cstdlib>
#include<stdio.h>
#include<list>
#include<map>
#include<algorithm>
 
#define MIN -1;
using namespace std;
 
 
int value[10002];
list<int> start;//start vertex list
list<int> vertices[10002];
map<int,bool> adj_chosen;
 
int indegree[10002];
/*
*
*/
void initialize(int n)
{
	int i;
	start.clear();
	for(i=1;i<=n;i++)
	{
		indegree[i]=0;
		value[i]=1;
		start.push_back(i);
		vertices[i].clear();
	}
}

bool cyclePresent(int n)
{
	int s,i;
	list<int> zin;
	list<int> processed;
	list<int>::iterator it;
	for(i=1;i<=n;i++)
	{
		if(indegree[i]==0)
			zin.push_back(i);
	}
	while(!zin.empty())//as long as list of 0 in-degree vertices is not empty
	{
		s=zin.front();
		zin.pop_front();
		processed.push_back(s);
		for(it=vertices[s].begin();it!=vertices[s].end();it++)
		{
			indegree[*it]--;
			if(indegree[*it]==0)
				zin.push_back(*it);
		}
	}
	if(processed.size()==n)//all vertices have been processed
		return false;
	else
		return true;
}

void print(int n)
{
	int i;
	for(i=1;i<=n;i++)
	{
		printf("\n%d %d",i,value[i]);
	}
}

int main()
{
	int t,n,val,m,i,a,b,s;
	list<int>::iterator it;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&n,&m);
		initialize(n);
		for(i=0;i<m;i++)
		{
			scanf("%d%d",&a,&b);
			vertices[a].push_back(b);
			indegree[b]+=1;
		}
		if(cyclePresent(n))
		{
			printf("\nIMPOSSIBLE");
		}
		else
		{
			while(!start.empty())//if there are no cycles
			{
				s=start.front();
				start.pop_front();
				for(it=vertices[s].begin();it!=vertices[s].end();it++)
				{
					if(!adj_chosen[*it])//adjacent but not yet chosen
					{
						value[*it]=max(value[*it],value[s]+1);
						adj_chosen[*it]=true;
					}
				}

				adj_chosen.clear();
			}

			val=MIN;
			for(i=1;i<=n;i++)
			{
				if(value[i]>val)
				{
					val=value[i];
				}
			}

			printf("\n%d",val);
			// print(n);
		}
	}
 
}
 
/*
4
11 9
1 2
2 3
5 6
5 4
6 7
6 8
6 9
9 10
9 11
ans->4
9 13
1 4
4 7
7 8
8 9
5 7
4 5
1 2
1 3
3 4
3 5
4 5
2 5
4 5
ans->7
 
11 14
1 2
2 3
3 4
5 4
5 6
6 9
9 10
9 11
8 10
7 8
4 7
9 4
6 8
6 7
ans->7
4 5
1 2
2 3
3 4
2 4
4 1
ans->IMPOSSIBLE
*/ 