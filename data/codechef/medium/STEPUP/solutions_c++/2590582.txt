#include <iostream>
#include <cstdio>
using namespace std;

#include <bitset>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cassert>

# define fr(i, n)           for( int i = 0; i<=n; i++)
# define frm(i, m, n)     for( int i = m; i <=n; i++)
# define pf printf
# define sf scanf
# define sfd(x) scanf("%d",&x)
# define ll long long
# define pb push_back
# define pii pair<int,int>
# define F first
# define S second
# define mp make_pair

# define nmax 10000

set<int> edges[nmax+1];
int n,m;

void in()
{
     sfd(n); sfd(m); int a,b;
     fr(i,m-1){
          sfd(a); sfd(b); --a; --b;
          edges[a].insert(b);
     }
}

int state[nmax+1]={0};
int vals[nmax+1]={0};
bool cycle=0;

void dfs(int cur)
{
     vals[cur]=1; int next;
     if(cycle)return;
     set<int>::iterator it;
     for(it=edges[cur].begin();it!=edges[cur].end() && (!cycle);it++){
          next=*it;
          if(state[next]==1){
               cycle=1; return;
          }
          if(state[next]==0){
               state[next]=1;
               dfs(next);
          }
          vals[cur]=max(vals[cur],vals[next]+1);
     }
     state[cur]=2;
}

void solve()
{

}

int main()
{
     //freopen("input.txt","r",stdin);
     int t; sfd(t);
     while(t--){
          cycle=0;
          for(int i=0;i<n;i++)edges[i].clear();
           in();
          for(int i=0;i<n;i++){state[i]=0; vals[i]=0;}

          for(int i=0;i<n;i++){
               if(state[i]==0){
                    state[i]=1;
                    dfs(i);
               }
          }
          int ans=0;
          for(int i=0;i<n;i++)ans=max(ans,vals[i]);

          if(!cycle)cout<<ans<<endl;
          else cout<<"IMPOSSIBLE"<<endl;
     }

     return 0;
}
