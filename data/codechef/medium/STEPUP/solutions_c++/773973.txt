#define DEBUG 0

#include <stdio.h>
#include <string.h>
#include <list>
#include <queue>
#include <algorithm>
using namespace std;

int f[10001], nv, big;
list<int> e[10001];
list<int> s;

void dfs(int v) {
  if(DEBUG)
    printf("dfs %d\n", v);
  if(big==-1)
    return;
  list<int>::iterator it, it2;
  for(it=e[v].begin();it!=e[v].end();it++)
    if(f[*it]==0) {
      f[*it]=f[v]+1;
      big=max(big,f[*it]);
      s.push_back(v);
      dfs(*it);
    } else {
      for(it2=s.begin();it2!=s.end();it2++)
        if(*it2==*it) {
          big=-1;
          return;
        }
      if(f[*it]<f[v]+1) {
        f[*it]=f[v]+1;
        big=max(big,f[*it]);
        s.push_back(v);
        dfs(*it);
      }
    }
}

int main(void) {
  int tc, ne, i, a, b;
  bool notroot[10001];

  scanf("%d", &tc);
  while(tc--) {
    memset(f, 0, sizeof(f));
    memset(notroot, false, sizeof(notroot));
    big=-1;
    scanf("%d%d", &nv, &ne);
    for(i=1;i<nv;i++)
      e[i].clear();
    for(i=0;i<ne;i++) {
      scanf("%d%d", &a, &b);
      notroot[b]=true;
      e[a].push_back(b);
    }
    for(i=1;i<=nv;i++)
      if(notroot[i]==false) {
 	big=max(big,1);
        f[i]=1;
	s.clear();
	dfs(i);
        if(big==-1)
          break;
      }
    if(big==-1)
      printf("IMPOSSIBLE\n");
    else
      printf("%d\n", big);
  }
  return 0;
}
