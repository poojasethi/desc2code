#include<iostream>
#include<algorithm>
#include<cstring>
#include <vector>
#define SC(t) scanf("%d",&t);
using namespace std;
int A[10005];
 
bool isCyclicUtil(vector <int> adj[], int v, bool visited[], bool recStack[])
{
    if(visited[v] == false)
    {
        visited[v] = true;
        recStack[v] = true;
 
        vector<int>::iterator i;
        for(i = adj[v].begin(); i != adj[v].end(); ++i)
        {
            if ( !visited[*i] && isCyclicUtil(adj, *i, visited, recStack) )
                return true;
            else if (recStack[*i])
                return true;
        }
 
    }
    recStack[v] = false;
    return false;
}

bool func(vector <int> adj[], int n)
{
    bool visited[n+2];
    bool recStack[n+2];
    for(int i = 0; i <= n; i++)
    {
        visited[i] = false;
        recStack[i] = false;
    }
 
    for(int i = 1; i <= n; i++)
        if (isCyclicUtil(adj, i, visited, recStack))
            return true;
 
    return false;
}

int dfs(int i,vector<int> v[]){
    int mx=0;
    for(int j=0;j<v[i].size();j++)
    {
            if(A[v[i][j]]==-1)
                              mx=max(mx,dfs(v[i][j],v));
            else mx=max(mx,A[v[i][j]]);
    }
    A[i]=mx+1;
    return A[i];
}
            
int main()
{
    int t;
    SC(t);
    while(t--)
    {
              int n,m;
              SC(n);SC(m);
              vector<int>v[n+1];
              while(m--)
              {
                        int a,b;
                        SC(a);SC(b);
                        //a--;b--;
                        v[a].push_back(b);
              }
              if (func(v,n)){
                 printf("IMPOSSIBLE\n");
                 continue;
              }
              memset(A,-1,sizeof(A));
              int mx = -1;
              for(int i=1;i<n+1;i++)
              {
                      int tmp;
                      if (A[i] == -1)
                          tmp=dfs(i,v);
                      else tmp = dfs(i,v);
                      mx = max(mx,tmp);
              }
              printf("%d\n",mx);
    }
              
    return 0;
}
                      
