#include <cstdio>
const int INF = 1000;
int ways[11][11], dist[11][11];
int N;
void floyd_warshall()
{
	for(int k = 1; k <= N; k++) 
		for(int i = 1; i <= N; i++)
			for(int j = 1; j <= N; j++) 
			{
      			if(i == k || j == k) 
					continue;
      			if(dist[i][k] + dist[k][j] < dist[i][j]) 
				{
        			dist[i][j] = dist[i][k] + dist[k][j];
        			ways[i][j] = ways[i][k] * ways[k][j];
      			} 
				else if (dist[i][j] == dist[i][k] + dist[k][j]) 
				{
        			ways[i][j] += ways[i][k] * ways[k][j];
      			}
			}
}

int main() 
{
	int T;
	scanf("%d", &T);
  	while(T--) 
	{
    	int M;
    	scanf("%d %d", &N, &M);
    	for(int i = 1; i <= N; i++)
			for(int j = 1; j <= N; j++)
		 		(i == j) ? (dist[i][j] = 0, ways[i][j] = 1) : (ways[i][j] = 0, dist[i][j] = INF);
    	for(int i = 1; i <= M; ++i) 
		{
      		int a, b, c;
	      	scanf("%d %d %d", &a, &b, &c);
     	 	dist[a][b] = dist[b][a] = c;
     	 	ways[a][b] = ways[b][a] = 1;
    	}
		floyd_warshall();
    	printf("%d\n", ways[1][N]);
	}
	return 0;
}
