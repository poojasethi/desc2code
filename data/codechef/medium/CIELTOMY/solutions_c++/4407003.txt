#include <iostream>
#include <stdio.h>
#include <cstring>
#include <vector>
#include <queue>
#include <map>
#include <stdlib.h>

#define pii pair<int,int>
#define INF 1000000000

using namespace std;

int main()
{
int test;
cin>>test;

while(test--)
{


int n,m1;
cin>>n>>m1;

if(n==1){ cout<<"0\n"; continue;}



priority_queue<pii,vector<pii>,std::greater<pii> > pq;

while(!pq.empty()){pq.pop();}

int m[11][11];

memset(m,0,sizeof(m));

int dist[11];

memset(dist,INF,sizeof(dist));
/** Source  is node 1**/
dist[1] = 0;
pq.push(pii(0,1));




for(int i=2;i<=n;++i)
{
	dist[i]=INF;
	pq.push(pii(dist[i],i));

}


int F[11]={0};
memset(F,0,sizeof(F));

F[1] = 1;
for(int i=0;i<m1;++i)
{
int a,b,c;
cin>>a>>b>>c;

m[a][b] = c;
m[b][a] = c;

}

int visited[11]={0};
memset(visited,0,sizeof(visited));

while(!pq.empty())
{


	pii top1 = pq.top();

	pq.pop();

	int edge = top1.first;
	int vertex  = top1.second;


	//cout<<"vertex = "<<vertex<<" edge = "<<edge<<endl;

             if(visited[vertex]==0){

                for(int i=1;i<=n;++i){
                    if(m[vertex][i]>0 && visited[i]==0 )
        {
	       	int tempdist = dist[vertex] + m[vertex][i];

		//cout<<" edge = "<<edge <<"  tempdist = "<<tempdist<<endl;

                if(tempdist < dist[i])
                {
                    dist[i] = tempdist;

                    pq.push(pii(tempdist,i));

                    F[i]=F[vertex];


                 }
	         	else if(tempdist == dist[i])
                     {

		     	F[i] += F[vertex];

		             }
            }
        }
		visited[vertex]=1;


	}



}

/**

for(int i=1;i<=n;++i)
{
cout<<"MIN distance b/t 1 and "<<i<< " =  "<<dist[i]<<endl;
}

**/

cout<<F[n]<<endl;

}

return 0;
}
