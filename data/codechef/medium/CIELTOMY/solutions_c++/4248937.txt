#include <stdio.h>
#include <vector>

using namespace std;

int N, M, cnt, minDist;
int vis[11], adj[11][11], cost[11][11];

void back(int node, int C) {
    if (node == N) { //one more path finished
        if (C < minDist) {
            minDist = C;
            cnt = 0;
        }
        if (C == minDist)
            ++cnt;
        return ;
    }
    vis[node] = 1;
    //find the next vertex of current path ending in node
    for (int i = 1; i <= adj[node][0]; ++i) {
        int son = adj[node][i];
        if (vis[son])
            continue;
        int supply = cost[node][i];
        back(son, C + supply);
    }
    vis[node] = 0;
}

void solveTest() {
    scanf("%d%d", &N, &M);
    cnt = 0; //number of shortest paths
    minDist = 1 << 30; //big value
    for (int i = 1; i <= N; ++i) {
        adj[i][0] = 0; //adj[i][0] is number of neighbours in adjacency list of node i
        vis[i] = 0; //vis[i] is 1 if node i is visited in a path and 0 otherwise
    }
    for (int i = 1; i <= M; ++i) {
        int xx, yy, cc;
        scanf("%d%d%d", &xx, &yy, &cc);
        adj[xx][++adj[xx][0]] = yy;
        cost[xx][adj[xx][0]] = cc;
        adj[yy][++adj[yy][0]] = xx;
        cost[yy][adj[yy][0]] = cc;
    }
    back(1, 0);
    printf("%d\n", cnt);
}

int main() {
    int T;
    scanf("%d", &T);
    for (int test = 1; test <= T; ++test)
        solveTest();
    return 0;
}
