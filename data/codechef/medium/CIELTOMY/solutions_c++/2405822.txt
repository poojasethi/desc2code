#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
using namespace std;

struct node{
	int dist;
	int ways;
};


int INF = 1000000000;

int main(){
	int T,t,i,j,k,N,M,A,B,C;
	const int MAXN = 10;

	scanf("%d",&T);

	for(t = 0; t < T; ++t){
		
		scanf("%d%d",&N,&M);
		struct node streets[MAXN+1][MAXN+1];

		for (i=1;i<=N;++i)
			for (j=1;j<=N;++j)
				if (i==j) {
					streets[i][j].dist = 0;
					streets[i][j].ways = 1;
				}
				else {
					streets[i][j].dist = INF;
					streets[i][j].ways = 0;
				}

		for(i=0;i<M;++i){
			scanf("%d%d%d",&A,&B,&C);
			streets[A][B].dist = streets[B][A].dist = C;	
			streets[A][B].ways = streets[B][A].ways = 1;	
		}

		for (k=1; k<=N; ++k)
			for (i=1;i<=N;++i)
				for (j=1;j<=N;++j){
					if (i==k || j==k) continue;
         			if (streets[i][k].dist + streets[k][j].dist < streets[i][j].dist) {
						streets[i][j].dist = streets[i][k].dist + streets[k][j].dist;
						streets[i][j].ways = streets[i][k].ways * streets[k][j].ways;
					}else if ((streets[i][k].dist + streets[k][j].dist) == streets[i][j].dist)
						streets[i][j].ways += streets[i][k].ways * streets[k][j].ways;
            	}

		printf("%d\n",streets[1][N].ways);
	}

	return 0;
}