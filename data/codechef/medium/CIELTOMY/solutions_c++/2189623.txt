#include<iostream>
#include<vector>
#include<stdlib.h>
#include<queue>
using namespace std;
const int INF = 2000000000;
typedef struct node
{
    int vertex;
    int distance;
}node;
struct sortByPropRev
{
    bool operator()(const node a, const node b) const
    {
        return a.distance > b.distance;
    }
};
int * dp;
int count( int end , int start , vector<int> dis , vector<vector<node> > adjacency);
int main(){
    int n , e , i , starting_point , ending_point , weight , s , t , j , test_case;
    cin>>test_case;
    while( test_case -- ){

        cin>> n >> e ;
        vector<vector<node> >arr(n+1);

        for( i = 0 ; i < e ; i++ ){
            cin>> starting_point >> ending_point >> weight ;
            node q;
            q.vertex = ending_point ;
            q.distance = weight;
            arr[starting_point].push_back(q);

            q.vertex = starting_point ;
            arr[ending_point].push_back(q);
        }

        vector<int > dis(n+1,INF );

        priority_queue <node , vector<node> ,  sortByPropRev> Q;
        dis[1] = 0;
        node temp;
        temp.vertex = 1;
        temp.distance = 0;
        Q.push( temp );

        while( !Q.empty() )
        {
            node top_element = Q.top();
            Q.pop();

            for( i = 0 ; i < arr[top_element.vertex].size(); i++ ){
                if ( dis[ top_element.vertex ] + arr[top_element.vertex][i].distance < dis[ arr[top_element.vertex][i].vertex] )
                {
                    dis[ arr[top_element.vertex][i].vertex ] = dis[ top_element.vertex ] + arr[top_element.vertex][i].distance ;
                    temp.vertex = arr[top_element.vertex][i].vertex;
                    temp.distance = dis[ arr[top_element.vertex][i].vertex ] ;

                    Q.push( temp );
                }
            }
        }

        dp = (int *)malloc( (n+1)*sizeof(int));
        for( i = 1 ; i <= n ; i ++)
            dp[i] = 0;
        int ans = count( n , 1 ,dis ,arr);
        cout << ans <<"\n";
    }
    return 0;
}
int count( int end , int start , vector<int> dis , vector<vector<node> > adjacency){

    if( dp[end] != 0 )
        return dp[end];

    if( end == start )
        return 1;

    int ans = 0 , i ;
    for( i = 0 ; i < adjacency[end].size(); i++ ){
        if( dis[adjacency[end][i].vertex] == dis[end] -  adjacency[end][i].distance )
            ans += count( adjacency[end][i].vertex , start , dis , adjacency);
    }
    dp[end] = ans;
    return dp[end];
}
