#include<iostream>
using namespace std;
#define gc getchar_unlocked
inline int readInt(){
	int n=0, c=gc();
	while(c < '0' || c > '9') c = gc();
	while(c >= '0' && c <= '9')
		n = (n<<3) + (n<<1) + c - '0', c = gc();
	return n;
}

void depthFirst(int noOfIntersections,int edges[10][10], int visited[10],int &minimumDistance,int i,int current,int &noOfShortestPaths)
{
    visited[i] = 1;
    if(i == noOfIntersections-1)
    {
        if(current < minimumDistance)
        {
            minimumDistance = current;
            noOfShortestPaths = 1;
        }
        else if(current == minimumDistance)
        {
            noOfShortestPaths++;
        }
        visited[i] = 0;
        return;
    }
    for(int j = 0; j < noOfIntersections ; j++ )
    {
        if(edges[i][j] != 0 && visited[j]== 0)
        {
            depthFirst(noOfIntersections,edges,visited,minimumDistance,j,current+edges[i][j],noOfShortestPaths);
        }
    }
    visited[i] = 0;
}
int main()
{
    int testCases;
    int noOfIntersections;
    int noOfDoubleWays;
    int dist;
    int vertex1,vertex2;
    testCases = readInt();
    while(testCases--)
    {
        noOfIntersections = readInt();
        noOfDoubleWays = readInt();
        int edges[10][10] = {0};
        int visited[10] = {0};
        for(int i = 0 ; i < noOfDoubleWays ; i++ )
        {
            vertex1 = readInt();
            vertex2 = readInt();
            dist = readInt();
            vertex1--;
            vertex2--;
            edges[vertex1][vertex2] = dist;
            edges[vertex2][vertex1] = dist;
        }
        int minimumDistance = 100000000;
        int noOfShortestPaths = 0;
        depthFirst(noOfIntersections,edges,visited,minimumDistance,0,0,noOfShortestPaths);
        cout << noOfShortestPaths << endl;
    }
    return 0;
}
