#include<iostream>
#include<cstdio>
#include<cstring>
#include<climits>
#define gc() getchar_unlocked()

using namespace std;
inline int isSpaceChar(char c) {
            return c == ' ' || c == '\n' || c == '\r' ;
}

inline int FAST_IO()
{
    char ch;
    int val=0;
    ch=gc();
    while(isSpaceChar(ch))
            ch=gc();
    val=0;
    while(!isSpaceChar(ch))
    {
       val=(val*10)+(ch-'0');
       ch=gc();
    }
    return val;
}
inline char getnextchar()
{
    char ch;
    ch=gc();
    while(isSpaceChar(ch))
            ch=gc();
    return ch;

}

const int MaxW=11;
const int MaxH=46;

bool visited[MaxW];
int arrayTemp[MaxW][MaxH];

void countPath(int &pathCount,int &maxPathLength,int i,int N,int pathLength)
{
    if(i==N)
    {
        if(pathLength<maxPathLength)
        {
            maxPathLength=pathLength;
            pathCount=1;
        }
        else
        {
            pathCount++;
        }
    }
    else
    {
        //search all values corresponding to an intersection
        for(int j=1;j<=N;j++)
        {
            if(i==j)
                continue;
            if(!visited[j]&&(arrayTemp[i][j]!=0))
            {
                if(pathLength+arrayTemp[i][j]<=maxPathLength)
                {
                     visited[j]=true;
                     countPath(pathCount,maxPathLength,j,N,pathLength+arrayTemp[i][j]);
                     visited[j]=false;
                }
            }
        }
    }
}

int main()
{
    int T,N,M,A,B,C;
    T=FAST_IO();
    while(T--)
    {
        memset(visited,false,sizeof(visited));
        memset(arrayTemp,0,sizeof(arrayTemp));
        N=FAST_IO();
        M=FAST_IO();
        for(int i=0;i<M;i++)
        {
            A=FAST_IO();
            B=FAST_IO();
            C=FAST_IO();
            arrayTemp[A][B]=C;
            arrayTemp[B][A]=C;
        }
        int totalPath=0;
        int maxPathLength=INT_MAX;
        visited[1]=true;
        countPath(totalPath,maxPathLength,1,N,0);
        printf("%d\n",totalPath);

    }
    return 0;
}
