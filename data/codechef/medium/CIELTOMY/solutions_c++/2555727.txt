#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>
#include<list>
#include<string>
#include<utility>
#include<numeric>
#include<iterator>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<climits>
#include<cstring>

#define ALL(c)  c.begin(), c.end()
#define TR(c, it)   for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define MAX(a, b)   ((a) > (b) ? (a) : (b))
#define gc  getchar_unlocked
#define lli long long int
#define inf INT_MAX
#define mininf INT_MIN
#define pb push_back
#define mp make_pair

using namespace std;

inline void si(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(; ((c<48 || c>57) && c != '-'); c = gc());
    if(c=='-')
    {
        neg = 1;
        c = gc();
    }
    for(; c>47 && c<58 ; c = gc())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
    if(neg)
        x = -x;
}

int AdjMat[11][11];
bool visited[11];
int n, m, l, num;

void init()
{
    l = inf;
    num = 0;
    FOR(i, 0, 11)
        visited[i] = false;
    FOR(i, 0, 11)
    {
        AdjMat[i][i] = 0;
        FOR(j, 0, 11)
            AdjMat[i][j] = 0;
    }
}

void go(int k, int len)
{
    if(len > l)
        return ;
    if(k == n)
    {
        if(len < l)
        {
            l = len;
            num = 1;
        }
        else if(len == l)
            num++;
        return ;
    }
    visited[k] = true;
    for(int i = 1; i <= n; i++)
    {
        if(!visited[i] && AdjMat[k][i] > 0)
            go(i, len + AdjMat[k][i]);
    }
    visited[k] = false;
}

int main()
{
    int a, b, c, t;
    scanf("%d", &t);
    while(t--)
    {
//        scanf("%d %d", &n, &m);
        si(n);
        si(m);
        init();
        FOR(i, 0, m)
        {
//            scanf("%d %d %d", &a, &b, &c);
            si(a);
            si(b);
            si(c);
            AdjMat[a][b] = c;
            AdjMat[b][a] = c;
        }
        go(1, 0);
        printf("%d\n", num);
    }
    return 0;
}
