#include<cstdio>
#include<vector>
#include<climits>
#include<iomanip>
#include<queue>
#include<memory.h>
using namespace std;
#define MAX 100
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef vector<vii> vvii;
const int INF = INT_MAX;
vvii G(MAX);
vi Dist(MAX);
vi D(MAX);
vi F(MAX);
int n,m;

void Dijkstra(int s)
{
    for(int u = 0; u < MAX; u++)
    {
        Dist[u] = INF;
        F[u] = 0;
    }
    F[s] = 1;
    Dist[s] = 0;

    priority_queue< ii,vector<ii>,greater<ii> > Q;
    Q.push(ii(Dist[s],s));
    while(!Q.empty())
    {
        ii top = Q.top();
        Q.pop();
        int u = top.second;
        int d = top.first;

        if(d <= Dist[u])
        {
            for(vii::const_iterator it = G[u].begin(); it != G[u].end(); ++it)
            {
                int v = it->first;
                int w = it->second;

                if(Dist[v] > Dist[u] + w)
                {
                    Dist[v] = Dist[u] + w;
                    F[v] = F[u];
                    Q.push(ii(Dist[v],v));
                }
                else if(Dist[v] == Dist[u] + w)
                {
                    F[v] = F[v] + F[u];
                }
            }
        }
    }
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d %d",&n,&m);
        int u,v,w;
        for(int u = 0; u < MAX; u++)
            G[u].clear();
   
        for(int i = 0; i < m; i++)
        {
            scanf("%d %d %d",&u,&v,&w);
            G[u].push_back(ii(v,w));
            G[v].push_back(ii(u,w));
        }
        Dijkstra(1);
        printf("%d\n",F[n]);
    }
    return 0;
}
