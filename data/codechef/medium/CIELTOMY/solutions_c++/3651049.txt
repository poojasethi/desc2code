//author : @kcahdog
#include <bits/stdc++.h>
using namespace std;
/* General Declarations */
#define INF	        1000000007
#define LL	        long long
#define INFL	    (LL)1000000007
//INTEGERS
#define si(n)		scanf("%d",&n)
#define s2i(n,m)	scanf("%d %d",&n,&m)
#define s3i(m,n,k)	scanf("%d %d %d",&m,&n,&k)
#define pi(n)		printf("%d\n",n);
#define pis(n)		printf("%d ",n);
#define pb(a)       push_back(a)
#define pline()		printf("\n");
LL gcd(LL a, LL b){ LL temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}

#define FOR(x,a,b)	    for( x=a;x<b;x++)
#define fr(i,n)	        for( i=0;i<n;i++)

int arr[11][11];
int visited[11];
int ways=0;
int n,ans=0;
vector <int> v[11];
void solve( int root, int curr )
{
    if( curr > ans )  //terminating recursion early
        return;

    visited[root]=1;

    if(root==n)     //final case
    {

        if( curr < ans )
            {
            ans=curr;
            ways=1;
            }
        else
        {
            if(curr == ans)
            {
                ways++;
            }
        }
    //printf("3 : root = %d, curr = %d , ans = %d, ways = %d\n", root ,curr , ans, ways);
    visited[root]=0;
    return;
    }

    for(int i=0 ; i < v[root].size() ; i++ )
    {
    //printf("\n1 : root = %d,called = %d, curr = %d , ans = %d\n", root,v[root][i] ,curr , ans);
        if( visited[ v[root][i] ] == 0 )
            {
                //printf("2 : root = %d,called = %d, curr = %d , ans = %d\n", root,v[root][i] ,curr , ans);
                solve( v[root][i] , curr + arr[root][v[root][i]]);
            }
    }
    visited[root]=0;
}
int main()
{
int i,j,m,a,b,c,t;
si(t);					//NO OF TEST CASES
while(t--)
{
//v.resize(12);
ways=0;
ans=10000;
fr(i,11)
    visited[i]=0;
fr(i,11)
    fr(j,11)
        arr[i][j]=0;
s2i(n,m);
for(i=0 ; i< m; i++)
{
    s3i(a,b,c);
    arr[a][b]=c;
    arr[b][a]=c;
    v[a].pb(b);
    v[b].pb(a);
}
/*for(i=1 ; i<= n; i++)
    {
    for(j=1 ; j<= n; j++)
        pis(arr[i][j]);
    pline();
    }
for(int i=0 ; i < v[1].size() ; i++ )
{
    if( visited[ v[1][i] ] == 0 )
            solve(v[1][i],arr[1][v[1][i]]);
}*/
solve(1,0);
printf("%d\n",ways);

//clear vector
fr(i,11)
    {
        visited[1]=1;
        while( v[i].size() > 0 )
            v[i].pop_back();
    }
}	//end of t loop
return 0;
}