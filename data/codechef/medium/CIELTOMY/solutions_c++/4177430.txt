#include<stdio.h>
#include<iostream>
#include<stdlib.h>
#include<limits.h>
#include<list>
#include<string.h>
#define MAX 1000010
using namespace std;
int value[MAX],auxheap[MAX];
int dist[1000][1000];
list<int> nodes[MAX];
int visited[MAX];
int N,n;
int leftchild(int i)
{
    if(2*i>N)return -1;
    return 2*i;
}
int rightchild(int i)
{
    if(2*i+1>N)return -1;
    return 2*i+1;
}
int parent(int i)
{
    if(i/2<1)
    return -1;
    return i/2;

}
void min_heapify(int i)
{
    int l,r,mine;
    l=leftchild(i);
    r=rightchild(i);

    if(l==-1)
        return;

    else if(l!=-1&&r!=-1)
    {
        if(value[auxheap[i]]<=value[auxheap[l]]&&value[auxheap[i]]<=value[auxheap[r]])
        return;
        else
        {
            if(value[auxheap[l]]<value[auxheap[r]])
                mine=l;
            else
                mine=r;
            swap(auxheap[i],auxheap[mine]);
            min_heapify(mine);

        }
    }
    else
    {
        if(value[auxheap[l]]<value[auxheap[i]])
            swap(auxheap[i],auxheap[l]);
    }

}
/*void buildmax_heap()
{
    int i;
    for(i=N/2;i>0;i--)
        max_heapify(i);
}*/
int extract_min()
{
    int temp=value[auxheap[1]];
    auxheap[1]=auxheap[N];
    N--;
    min_heapify(1);
    //return temp;
}
int empty()
{
    if(N<1)
        return 0;
    else
        return 1;
}
/*void insert(int value)
{
    N++;
    heap[N]=value;
    int i=N/2,j=N;
    while(i>=1&&value>heap[i])
    {
        heap[j]=heap[i];
        i=i/2;
        j=j/2;
    }
    heap[j]=value;
}*/
int get_min()
{
    return auxheap[1];
}


void relax(int u,int v)
{
    if(value[u] + dist[u][v]<value[v])
        value[v]=value[u] + dist[u][v];

}
int dijkstra(int src)
{
    int v;
    list<int>::iterator it;
    while(empty())
    {
       // cout<<"d";
        v=get_min();

        visited[v]=1;
        for(it=nodes[v].begin();it!=nodes[v].end();it++)
        {
            if(visited[*it]==0)
                relax(v,*it);
        }
        extract_min();
    }
    //cout<<"i";
}
int count,mindist;
void dfs(int i,int d)
{
    if(d==mindist)
    {
        if(i==n)
        count++;


    }
    visited[i]=1;

    list<int>::iterator ii;
    for(ii=nodes[i].begin();ii!=nodes[i].end();ii++)
    {
        if(!visited[*ii])
        {
            dfs(*ii,d+dist[i][*ii]);
        }
    }
    visited[i]=0;

}

int main()
{
    int i,j,k,l,src,dest,M,a,b,c;
    int t;
    cin>>t;
    while(t--)
    {
        cin>>n>>M;
        count=0;
        for(i=0;i<M;i++)
        {
            cin>>a>>b>>c;
            nodes[a].push_back(b);
        nodes[b].push_back(a);
        dist[a][b]=c;
        dist[b][a]=c;
        }

    value[1]=0;
    auxheap[0]=0;
    auxheap[1]=1;
    memset(visited,0,sizeof(visited));
    //cin>>n;
    N=n;
    src=1;
    dest=n;
    for(i=2;i<=n;i++)
        {value[i]=INT_MAX;
        auxheap[i]=i;
        }
        dijkstra(1);
        memset(visited,0,sizeof(visited));
          mindist=value[n];
            dfs(1,0);
    //cout<<value[n]<<endl;
    cout<<count<<endl;

for(i=0;i<=n;i++)
    nodes[i].clear();


    }

    return 0;
}
