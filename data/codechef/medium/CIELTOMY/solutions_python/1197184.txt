NumOfTests = int(raw_input())

for test in range(NumOfTests):
    N, M = map(lambda s: int(s), raw_input().split())

    # n: min_distance, is_visited, num_of_paths
    D = {}
    # paths {vertex: [(neighb_vertex, length), ...], ...}
    P = {}
    for i in range(1, N+1):
        D[i]=[float("inf"), None, 0]
        P[i] = []
        
    D[1] = [0, None, 1]
    
    for m_th in range(M):
        A, B, C = map(lambda s: int(s), raw_input().split())
        
        P[A].append((B, C))
        P[B].append((A, C))

    ################
    while True:
        vertex = min(filter(lambda v: v[1][1]==None, D.items()), key=lambda x: x[1][0])
        vertex = vertex[0] 
        if vertex == N:
            break
        for nv in P[vertex]:
            if not D[nv[0]][1]:
                if D[vertex][0] + nv[1] < D[nv[0]][0]:
                    D[nv[0]][0] = D[vertex][0] + nv[1]
                    D[nv[0]][2] = D[vertex][2]
                elif D[vertex][0] + nv[1] == D[nv[0]][0]:
                    D[nv[0]][2] += D[vertex][2]
                
        D[vertex][1] = True
        
    print D[vertex][2]