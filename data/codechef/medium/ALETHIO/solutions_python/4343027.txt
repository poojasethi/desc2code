#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random
import bisect


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(S):
    # there can be only one change of letters
    # we should change with a 9
    # we should change to create the largest set

    # on avance, on note la lettre du milieu, quand on trouve une autre lettre,
    # on regarde combien ca fait et on update Ã  la lettre d'apres

    def is_letter(i):
        if ord(i) >= ord('A') and ord(i) <= ord('Z'):
            return True
        return False

    middle_letter_idx = -1
    first_number_idx = 0
    best = 0
    def gen(i):
        num_str = S[first_number_idx:middle_letter_idx] + '9' + S[middle_letter_idx + 1:i]
        num = int(num_str)
        #print "%d:%d:%d => %s (%d)" % (first_number_idx, middle_letter_idx, i, num_str, num)
        return num

    for i, c in enumerate(S):
        if is_letter(c):
            # ok, check the prev number
            if middle_letter_idx != -1:
                # not first letter, compute the value and update
                # we check the number starting at nfirst_number_idx up to us by
                # replacing the middle_letter with 9
                best = max(gen(i), best)
                first_number_idx = middle_letter_idx + 1
                # middle_letter_idx
            middle_letter_idx = i
    # also check the end element
    if middle_letter_idx == -1:
        best = int(S)
    else:
        best = max(best, gen(len(S)))

    return best


def main():
    #import cProfile
    #cProfile.runctx('alg()', globals(), locals())
    data = sys.stdin
    S = data.readline().strip()
    res = alg(S)
    print res


if __name__ == "__main__":
    main()
