

/* Solution involves having correct number comparison functions,
 * Then storing positions of all alphabets,
 * And finding maximal length strings that involve exactly one alphabet in them as candidates
 * Also, we always flip a character to the digit '9'
 */

#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
using namespace std;

#define s(T) scanf("%d", &T)
#define sl(T) scanf("%lld", &T)
#define fill(a, val) memset(a, val, sizeof(a))
#define mp make_pair
#define pb push_back
#define all(x) x.begin(), x.end()
#define DREP(x) sort(all(x)); x.erase(unique(all(x)), x.end())
#define INDEX(a, val) (lower_bound(all(a), val) - a.begin())

const int maxlen = 1000;


int totalCases, testNum;
string S;
int len;

bool nonleading(string A, string B)		//returns true if A and B, as numbers with no leading zeroes has A < B: 0 = ""
{
	if(A.length() < B.length())
		return true;
	if(A.length() > B.length())
		return false;
	return A < B;
}

bool comp(string A, string B)
{
	int ai, bi;			// ai, bi find positions in A, B where there are no leading 0's. 
	for(ai = 0; ai < A.length(); ai++)
		if(A[ai] != '0')
			break;
	for(int i = ai; i < A.length(); i++)		//this for-loop Assumes that only one character is present
		if(A[i] >= 'A' && A[i] <= 'Z')
			A[i] = '9';
	for(bi = 0; bi < B.length(); bi++)
		if(B[bi] != '0')
			break;
	for(int i = bi; i < B.length(); i++)
		if(B[i] >= 'A' && B[i] <= 'Z')
			B[i] = '9';	
	return nonleading(A.substr(ai), B.substr(bi));
}

void preprocess()
{
	
}

bool input()
{
	cin >> S;
	
	len = S.length(); assert(1 <= len && len <= maxlen);
	for(int i = 0; i < len; i++)
		assert((S[i] >= '0' && S[i] <= '9') || (S[i] >= 'A' && S[i] <= 'Z'));
	return true;
}

void output(string ans)
{
	int nonleading;
	for(nonleading = 0; nonleading < ans.length(); nonleading++)
		if(ans[nonleading] != '0')
			break;
	for(int i = nonleading; i < ans.length(); i++)
		if(ans[i] >= 'A' && ans[i] <= 'Z')
			ans[i] = '9';
	if(nonleading == ans.length())			// finds the answer is actually 00000000
		printf("0\n");
	else 
		printf("%s\n", ans.substr(nonleading).c_str());
}

string mysub(string univ, int i, int j)		//returns string univ[i, i+1, ..., j)
{
	return univ.substr(i, j-i);
}

void solve()
{
	string best = "";
	
	vector <int> alphpos;		
	alphpos.push_back(-1);				//assume there is a character just before the string, as a delimiter
	for(int i = 0; i < len; i++)
		if(S[i] >= 'A' && S[i] <= 'Z')
			alphpos.push_back(i);
	alphpos.push_back(len);				//assume there is a character at the end of the string, again as a delimiter	
	if(alphpos.size() == 2)		
		best = S;		//no character in S, so whole string is answer
	else 
	{
		string cons;
		for(int i = 1; i < alphpos.size()-1; i++)		//consider flipping alphpos[i]. You can't choose first and last "dummy" positions to flip
		{	
			cons = mysub(S, alphpos[i-1]+1, alphpos[i+1]);
			if(comp(best, cons))
				best = cons;
		}
	}
	output(best);
}

int main()
{
	preprocess();
	//s(totalCases);
	totalCases = 1;
	for(testNum = 1; testNum <= totalCases; testNum++)
	{
		if( !input())
			break;
		solve();
	}
}
