#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <climits>
#include <utility>
#include <fstream>
#include <map>
#include <cmath>
#include <functional>
#include <exception>
#include <stdexcept>
#include <sstream>
#include <cassert>
#include <memory>
#include <limits>
#include <deque>
#include <queue>
#include <limits>
#include <climits>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>


namespace common {
	template <class T>
	T distance(const T x0, const T y0, const T x1, const T y1) {
		return sqrt(static_cast<double>((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1)));
	}
}

template <class T>
struct point {
	T x;
	T y;

	point(const T &x = T(), const T &y = T()) :
		x(x), y(y) {
	}

	T distance(const point<T> &p) const {
		return common::distance(x, y, p.x, p.y);
	}

	bool operator <(const point<T> &p) const {
		if (x < p.x) {
			return true;
		} else if (x > p.x) {
			return false;
		} else {
			return y < p.y;
		}
	}
};

template <class T>
struct line {
	T a;
	T b;
	T c;

	line(const T &a = T(), const T &b = T(), const T &c = T()) :
		a(a), b(b), c(c) {
	}

	T distance(const point<T> &p) const {
		return abs(a * p.x + b * p.y + c) / (a*a + b*b);
	}

	T dy() const {
		return a/-b;
	}

	/**
	 *  ax + by + c = 0
	 */
	T fx(T x) const {
		return (a*x + c)/-b;
	}
};

static const double EPSILON = 5.0e-7;
static const double LOWER_BOUND = -5.0e+3;
static const double UPPER_BOUND = 5.0e+3;

class plant_locations {
private:
	std::vector<point<double> > locations;
	const line<double> highway;

public:
	plant_locations(const std::vector<point<double> > locations, const line<double> &highway) :
		locations(locations), highway(highway) {

	}

	double newton(double left, double right) const {
		double middle = left + (right - left)/2;
		double r;
		while (fabs(r = dx(middle)) >= EPSILON) {
			if (r < 0) {
				left = middle;
			} else {
				right = middle;
			}
			middle = left + (right - left)/2;
		}
		return middle;
	}

	double dx(double x) const {
		point<double> p(x, highway.fx(x));
		double dy = highway.dy();
		double d = 0;
		for (int i = 0; i < locations.size(); ++i) {
			d += ((p.x - locations[i].x) + (p.y - locations[i].y) * dy) / p.distance(locations[i]);	
		}
		return d;
	}

	double distance_to_all(double x) const {
		point<double> p(x, highway.fx(x));
		double d = 0.0;
		for (int i = 0; i < locations.size(); ++i) {
			d += p.distance(locations[i]);
		}
		return d;
	}
};

void find_closest(const std::vector<point<double> > &points, const line<double> &highway) {
	plant_locations pl(points, highway);
	point<double> p;
	double a;
	double b;
	for (a = -1.0; pl.dx(a) > 0; a *= 2);
	for (b = +1.0; pl.dx(b) < 0; b *= 2);
	double x = pl.newton(a, b);
	if (x < LOWER_BOUND || x > UPPER_BOUND) {
		printf("NO\n");
	} else {
		printf("%.6f\n", pl.distance_to_all(x));
	}
}

void inout_plant_location() {
	int tc;
	std::cin >> tc;
	point<double> p;
	line<double> highway;
	std::vector<point<double> > locations;
	int n;
	while (tc--) {
		std::cin >> n;
		std::cin >> highway.a >> highway.b >> highway.c;	
		for (int i = 0; i < n; ++i) {
			std::cin >> p.x >> p.y;
			locations.push_back(p);
		}
		find_closest(locations, highway);
		locations.clear();
	}
}

int main() {
	inout_plant_location();
	return 0;
}
