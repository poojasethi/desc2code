#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <cstring>
#include <cmath>
#include <climits>
#include <cstdio>
using namespace std;

typedef unsigned long long ULL;
typedef long long LL;

#define s(n)          scanf("%d",&n)
#define sl(n)         scanf("%lld",&n)
#define sf(n)         scanf("%lf",&n)
#define pb 	          push_back
#define mp 	          make_pair
#define MOD 	        1000000007
#define INF	          (int)1e9
#define EPS	          1e-9
#define TR(a,it)      for(typeof((a).begin()) it = (a).begin(); it!=(a).end(); ++it)

int a, b, c, n;
int x[2005], y[2005];

long double distance (long double x1, long double y1, long double x2, long double y2)
{
    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

long double dist_from_warehouses(long double x1)
{
    long double y1 = -c - a * x1;
    y1 /= b;

    long double sum = 0;
    for (int i=0; i<n; i++)
        sum += distance(x1, y1, x[i], y[i]);
    return sum;
}

long double ternary_search(long double left,long double right)
{
    //cout << left << " " << right << endl;
    long double left_third, right_third;
    while (right - left > 0.00001)
    {
        left_third = (2 * left + right) / 3;
        right_third = (left + 2 * right) / 3;

        if (dist_from_warehouses(left_third) > dist_from_warehouses(right_third))
            left = left_third;
        else
            right = right_third;

        //cout << left << " " << right << endl;
    }

    return (left + right) / 2;
}

int main()
{
   // freopen("input.txt", "r", stdin);
   // freopen("output.txt", "w", stdout);

	int T;
	scanf("%d", &T);
	while (T--)
	{
        scanf("%d", &n);
        scanf("%d %d %d", &a, &b, &c);

        for (int i=0; i<n; i++)
        {
            scanf("%d %d", &x[i], &y[i]);
            //cout << x[i] << " " << y[i] << endl;
        }

        long double mini = 1000000, maxi = -1000000;
        for (int i=0; i<n; i++)
        {
            maxi = max(maxi, (long double)x[i]);
            mini = min(mini, (long double)x[i]);
        }
        printf("%.6lf\n", (double)dist_from_warehouses( ternary_search(mini, maxi)));
        //cout << dist_from_warehouses( ternary_search(mini, maxi)) << endl;
	}
	return 0;
}
