#include <cstdio>
#include <cmath>
#include <algorithm>

using namespace std;

typedef struct point {
	double x;
	double y;
} point;

bool operator< (const point& l, const point& r){
	return (l.x == r.x)? (l.y<r.y) : (l.x<r.x);
}

point pts[2004];
int n;
int a, b, c;

inline void rotate(point& p, double t){
	double temp = (p.x*cos(t) - p.y*sin(t));
	p.y = (p.x*sin(t) + p.y*cos(t));
	p.x = temp;
}

double dist(double x){
	double ans = 0;
	double y = (-c-a*x)/b;
	for (int i=0; i<n; i++){
		ans += sqrt( (x-pts[i].x)*(x-pts[i].x) + (y-pts[i].y)*(y-pts[i].y) );
	}
	return ans;
}

int main(){
	int tc;
	scanf("%d", &tc);
	while (tc--){
		
		scanf("%d %d %d %d", &n, &a, &b, &c);
		double yn=-c/b;
		double theta = atan(-a/b);
		for (int i=0; i<n; i++){
			scanf("%lf %lf", &(pts[i].x), &(pts[i].y));
			//pts[i].y += yn;
			//rotate(pts[i], -theta);
		}

		//find min max
		double l, r;
		l = r = pts[0].x;
		for (int i = 1; i<n; i++){
			if (pts[i].x < l){
				l = pts[i].x;
			}
			if (pts[i].x > r){
				r = pts[i].x;
			}
		}

		//ternary search
		double h1, h2;
		for (int i=0; i<100; i++){
			h1 = (l*2+r)/3;
			h2 = (l+2*r)/3;
			if (dist(h1) < dist(h2)){
				r = h2;
			} else {
				l = h1;
			}
		}

		printf("%0.6lf\n", dist((l+r)/2));
	}
	return 0;
}