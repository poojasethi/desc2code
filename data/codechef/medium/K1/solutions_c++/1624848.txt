// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

//M lazy ;)
typedef vector <int> vi;
typedef vector <string> vs;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define S 1024*1024*4
char IN[S],*iptr;
struct fastIO
{
	fastIO()
	{
		fread(IN,1,S,stdin);
		iptr=IN;
	}
	void check()
	{
		int size=IN+S-iptr;
		if(size<200)
		{
			memcpy(IN,iptr,size);
			fread(IN+size,1,S-size,stdin);
			iptr=IN;
		}
	}
	int sc()
	{
		check();
		while(*iptr<=32) iptr++;
		int x=0,sign=0;
		if( *iptr == '-' ) sign=1,iptr++;
		while(*iptr>32) x= x*10 + *iptr++ -'0';
		return sign?-x:x;
	}
};

int a,b,c;
int x[2020],y[2020],k;

double get( double &x1 ) {
	//ax+by=c
	// y = (-c - ax)/b
	double y1 = -c;
	if(!b) {
		y1=x1;
		x1=-c/((double)a);
		return y1;
	}
	return (y1 - (x1*a))/b;
}

double dist(double x1,double y1) {
	double rett=0;
	rep(i,k) {
		rett += sqrt( (x1-x[i]) * (x1-x[i]) + (y1-y[i]) * (y1-y[i]) );
	}
	return rett;
}
	
int main() {
	int t,i,j;
	fastIO io;
	t = io.sc();
	while( t-- ) {
		k = io.sc();
		a = io.sc(); b = io.sc(); c = io.sc();
		// printf("%d %d %d\n",a,b,c);
		rep( i , k ) { x[i] = io.sc(); y[i] = io.sc(); }
		double L=-50000,R=50000;
		double v1,v2;
		rep(tim,60) {
			double x1 = ((double)(L*2.+R))/3.,x2 = ((double)(L+R*2))/3.,tx1=x1,tx2=x2;
			double y1 = get(x1), y2 = get(x2);
			// printf("%lf %lf %lf %lf\n",x1,y1,x2,y2);
			v1 = dist(x1,y1), v2 = dist(x2,y2);
			if( v1 > v2 ) L = tx1; else R = tx2;
		}
		printf("%.6lf\n",v1);
	}
	return 0;
}