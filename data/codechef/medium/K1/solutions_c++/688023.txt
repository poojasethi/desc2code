#include <cctype>
#include <cstdio>
#include <cmath>
using namespace std;

const int BUFSIZE = 4096;
const char MINUS = '-';
const char ZERO = '0';

char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;

int readint()
{
    int sign = 1;
    int n = 0;
    for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != MINUS &&
            !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != MINUS &&
                !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    }
    if (r_buffer[r_bufpos] == MINUS)
    {
        sign = -1;
        r_bufpos += 1;
    }
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - ZERO;
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - ZERO;
    }
    return sign * n;
}

const int MAX = 2000;
const double LEFT = -5000.0;
const double RIGHT = 5000.0;

int px[MAX];
int py[MAX];
int T, N, A, B, C;
double EPSILON = 0.00000005;

double binsearch(double left, double right);
double tenary(double left, double right);
double f(double x);
double diff(double x);

int main()
{
    double r;
    T = readint();
    for(; T > 0; T--)
    {
        N = readint();
        A = readint();
        B = readint();
        C = readint();
        for(int i=0; i < N; i++)
        {
            px[i] = readint();
            py[i] = readint();
        }
        double LEFTMIN, RIGHTMAX;
        for( LEFTMIN=-1.0; diff(LEFTMIN) > 0; LEFTMIN *= 2);
        for( RIGHTMAX=1.0; diff(RIGHTMAX) < 0; RIGHTMAX *= 2);
        r = binsearch(LEFTMIN, RIGHTMAX);
        //if ( fabs(LEFT-r) < EPSILON || fabs(RIGHT-r) < EPSILON )
        if ( r < LEFT || r > RIGHT )
            printf("NO\n");
        else
            printf("%.6f\n", f(r));
        //printf("%.6f\n", f(r));
    }
    return 0;
}

double binsearch(double left, double right)
{
    double res;
    double mid = left + (right - left) / 2;
    while (fabs(res=diff(mid))>=EPSILON)
    {
        if (res < 0)
            left = mid;
        else
            right = mid;
        mid = left + (right - left) / 2;
    }
    return mid;
}

double tenary(double left, double right)
{
    double left_third;
    double right_third;
    while (1)
    {
        if (right - left < EPSILON)
            return (left + right) / 2;

        left_third = (2 * left + right)/3;
        right_third = (left + 2 * right)/3;
    
        if (f(left_third) < f(right_third))
            right = right_third;
        else
            left = left_third;
    }
}

inline double f(double x)
{
    double y = -(A*x+C)/B;
    double dist = 0.0;
    for (int i=0; i < N; i++)
        dist += sqrt(pow(px[i]-x, 2) + pow(py[i]-y,2));
    return dist;
}

inline double diff(double x)
{
    // SUM ( 2(x-x0) + 2(y-y0) y') / 2sqrt( (x-x0)^2 + (y-y0)^2 ))
    double y = -(A*x+C)/B;
    double dy = -(double)A/B;
    double res = 0.0;
    for (int i=0; i < N; i++)
        res += (x-px[i]+(y-py[i])*dy)/(sqrt(pow(x-px[i], 2) + pow(y-py[i],2)));
    return res;
}
