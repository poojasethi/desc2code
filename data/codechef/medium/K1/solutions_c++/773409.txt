#define DEBUG 0
#define EPS 0.00000001

//never need to print no!

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <algorithm>
using namespace std;

double dist(double x1, double y1, double x2, double y2) {
  return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
}

int a, b, c, n, w[2000][2];

double eval(double x, double y) {
  int i;
  double ans=0.0;
  for(i=0;i<n;i++)
    ans+=dist(x,y,w[i][0],w[i][1]);
  return ans;
}

double tsearchx(double left, double right) {
  double leftThird=(2.0*left+right)/3.0, rightThird=(left+2.0*right)/3.0;

  if(right-left<EPS)
    return (left+right)/2.0;

  if(eval(leftThird,(a*leftThird+c)/-b)>eval(rightThird,(a*rightThird+c)/-b))
    return tsearchx(leftThird, right);
  else
    return tsearchx(left, rightThird);
}

int main(void) {
  int tc, i;
  double high, low, mid, rhigh, rlow, rmid, minx, maxx, miny, maxy;

  scanf("%d", &tc);
  while(tc--) {
    scanf("%d%d%d%d", &n, &a, &b, &c);
    maxx=-5000, maxy=-5000, minx=5000, miny=5000;
    for(i=0;i<n;i++) {
      scanf("%d%d", &w[i][0], &w[i][1]);
      maxx=max(maxx,(double)w[i][0]);
      minx=min(minx,(double)w[i][0]);
      maxy=max(maxy,(double)w[i][1]);
      miny=min(miny,(double)w[i][1]);
    }
    if(b!=0) { //y=mx+b equation valid
      mid=tsearchx(minx, maxx);
      printf("%lf\n", eval(mid, (a*mid+c)/-b));

    } else { //use x=my+b equation instead
      //this not tested in sample i/o?
/*      low=miny;
      rlow=eval((b*low+c)/-a, low, w, n);
      high=maxy;
      rhigh=eval((b*high+c)/-a, high, w, n);

      while(high-low>EPS) {
        mid=(high+low)/2.0;
        rmid=eval((b*mid+c)/-a, mid, w, n);

        if(DEBUG)
          printf("low=%.2lf r=%lf high=%.2lf r=%lf mid_y=%lf r=%lf ", low, rlow, high, rhigh, mid, rmid);

        if(rmid>eval((b*(mid+EPS)+c)/-a,mid+EPS,w,n)) {
          if(DEBUG)
            printf("is left\n");
          low=mid;
          rlow=rmid;
        } else {
          if(DEBUG)
            printf("is right\n");
          high=mid;
          rhigh=rmid;
        }
      }
      printf("%lf\n", rmid);
*/
    }
  }
  return 0;
}
