// PlantLocationCPP.cpp : Defines the entry point for the console application.
//
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <cmath>
#include <algorithm>

//#include "stdafx.h"


using namespace std;

#define X 0
#define Y 1
int n;
#define decimal double

int a, b, c;
int x[2000][2];
decimal eps = (decimal) 1e-10;
decimal epsS = (decimal) 1e-8;


        decimal GetSumDist(decimal xp, decimal yp)
        {
            decimal s = 0;
            for (int i = 0; i < n; i++)
            {
                decimal rx = x[i][X] - xp;
                decimal ry = x[i][Y] - yp;
                s += (decimal) sqrt((double) (rx * rx + ry * ry));
            }
            return s;
        }

        decimal GetSumDistByXY(decimal xyp, int XY)
        {
            decimal xp, yp;
            if (XY == X)
            {
                xp = xyp;
                yp = -(a * xp + c) / b;
            }
            else
            {
                yp = xyp;
                xp = -(b * yp + c) / a;
            }
            return GetSumDist(xp, yp);
        }

        decimal GetMinDist()
        {
            int stepDiv = 100;
            int XYmode = abs(b) > abs(a) ? X : Y;

            //Go by x
            decimal avg = 0;
            for (int i = 0; i < n; i++)
            {
                avg += x[i][XYmode];
            }
            avg /= n;


            decimal minX = x[0][XYmode], maxX = x[0][XYmode];
            for (int i = 1; i < n; i++)
            {
                minX = min(minX, (double)x[i][XYmode]);
                maxX = max(maxX, (double)x[i][XYmode]);
            }

            decimal curX = avg;
            decimal curS = GetSumDistByXY(curX, XYmode);
            decimal newS = curS + 1;
            decimal curStep = (maxX - minX)/stepDiv;
            int curDir = 1;

            while (abs(curStep) > eps/* || Math.Abs(newS - curS) > epsS*/)
            {
                decimal newX = curX - curDir*curStep;
                newS = GetSumDistByXY(newX, XYmode);
                if (newS >= curS)
                {
                    curStep /= 2;
                    curDir = -curDir;
                    continue;
                }
                curX = newX;
                curS = newS;
            }

            return curS;
        }


int main(int argc, char *argv[])
{
	        int t; cin >> t;

            for (int it = 0; it < t; it++)
            {
                cin >> n;
				cin >> a >> b >> c;

				for (int i = 0; i < n; i++)
                {
                    cin >> x[i][X] >> x[i][Y];
                }

				printf("%f\n", GetMinDist());
                //Console.WriteLine(GetMinDist().ToString("0.000000", CultureInfo.InvariantCulture));
            }

	return 0;
}
