#include <cctype>
#include <cstdio>
#include <cmath>
using namespace std;

const int BUFSIZE = 4096;

char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;

int readint()
{
    for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != '-' &&
                                 !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && r_buffer[r_bufpos] != '-' &&
                                     !isdigit(r_buffer[r_bufpos]); r_bufpos++);
    }
    
    int sign = 1;
    if (r_buffer[r_bufpos] == '-')
    {
        sign = -1;
        r_bufpos += 1;
    }

    int n = 0;
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - '0';
    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - '0';
    }
    return sign * n;
}

const int MAX = 2000;
const double LEFTMIN = -5000.0;
const double RIGHTMAX = 5000.0;

int px[MAX];
int py[MAX];
int T, N, A, B, C;
double EPSILON = 0.00000005;

double tenary(double left, double right);
double f(double x);

int main()
{
    double r;
    T = readint();
    for(; T > 0; T--)
    {
        N = readint();
        A = readint();
        B = readint();
        C = readint();
        for(int i=0; i < N; i++)
        {
            px[i] = readint();
            py[i] = readint();
        }
        r = tenary(LEFTMIN, RIGHTMAX);
        if ( fabs(LEFTMIN-r) < EPSILON || fabs(RIGHTMAX-r) < EPSILON )
            printf("NO\n");
        else
            printf("%.6f\n", f(r));
    }
    return 0;
}

double tenary(double left, double right)
{
    if (right - left < EPSILON)
        return (left + right) / 2;

    double left_third = (2 * left + right)/3;
    double right_third = (left + 2 * right)/3;

    if (f(left_third) < f(right_third))
        return tenary(left, right_third);
    return tenary(left_third, right);
}

double f(double x)
{
    double y = -(A*x+C)/B;
    double dist = 0.0;
    for (int i=0; i < N; i++)
        dist += sqrt(pow(px[i]-x, 2) + pow(py[i]-y,2));
    return dist;
}

