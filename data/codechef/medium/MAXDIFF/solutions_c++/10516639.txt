#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<string>
#include<utility>
#include<cmath>
#include<cstring>
#include<cassert>
using namespace std;

#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define ll long long

ll read_int(ll mn, ll mx, char next){
  int c, fg = 1, res = 0;
  c=getchar();
  if(c=='-') fg = -1, c = getchar();
  assert('0'<=c && c<='9');
  res = c - '0';
  for(;;){
    c = getchar();
    if(c==next) break;
    assert(res!=0);
    assert('0'<=c && c<='9');
    res = res * 10 + (c - '0');
  }
  res *= fg;
  assert(mn<=res && res<=mx);
  return res;
}


void read_int_arr(int n, int res[], ll mn, ll mx){
  int i;
  rep(i,n-1) res[i] = read_int(mn, mx, ' ');
  res[n-1] = read_int(mn, mx, '\n');
}

int main(){
  int T, N, K, W[10001];
  int i;
  int res;

  T = read_int(1, 100, '\n');
  while(T--){
    N = read_int(1, 100, ' ');
    K = read_int(1, N-1, '\n');
    read_int_arr(N, W, 1, 100000);

    K = min(K, N-K); // The kid will carry min(K, N-K) items
    sort(W, W+N); // W[i] <= W[i+1], The kid will carry the lightest min(K, N-K) items

    res = 0;
    rep(i,K) res -= W[i];   // these items will carries by kid
    REP(i,K,N) res += W[i]; // these items will carries by Chef

    printf("%d\n",res);
  }

  assert( scanf("%*c")==EOF );
  return 0;
}
