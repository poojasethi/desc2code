# code chef - easy - count squares  -  countsquares.py

nCases = int(raw_input())

for case in range(nCases):
    nPoints = int(raw_input())
    pointList = []
    for k in range(nPoints):
        point = map(int, raw_input().split())
        pointList.append(point)
    pointList.sort()

    # I believe this is now sorted by x coord low to high,
    #    and by y coord low to high if x is equal

    # define ordering for points in a square:
    # point0 is always smallest x value.
    # if two points have same smallest x value,
    #         then point0.y is smallest y value
    #         points are x0,y0,  x0,y0+s, x0+s,y0, x0+s,y0+s
    #         point1 is x0,y0+s

    # for non-aligned squares
    #      point0 is at bottom.
    #      point 1 is in northeast direction
    #

    offset = 50    # points from -50 to +50
    gridSize = 2*50+1
    grid = []
    empty = [False]*gridSize
    for i in range(gridSize):
        grid.append(empty[:])

    for p in pointList:
        x,y = p
        grid[offset+x][offset+y] = True

    count = 0
    for pos in range(nPoints):
        x,y = pointList[pos]
        for pos2 in range(pos+1, nPoints):
            x2,y2 = pointList[pos2]
            if (x2<x):
                q = 1/0
                print "oops"
            # because of sort, we have either:
            #    x2 > x1 or   x2==x1 and y2>y1
            if x2==x:
                # square aligned with axes, found potential p2
                side = y2-y
                x3 =x+side
                y3 = y
                if  -50<=x3<=50 and -50<=y3<=50 and grid[x3+offset][y3+offset]:
                    x4 = x+side
                    y4 = y+side
                    if  -50<=x4<=50 and -50<=y4<=50 and grid[x4+offset][y4+offset]:
                        count +=1
            elif y2>y:
                # for non-aligned squares,
                # <  I am requiring for diagonal squares that p0 is at bottom
                #    and p2 is to northeast, so x2>x and y2>y
                a = x2-x
                b = y2-y
                x3 = x+a-b
                y3 = y+a+b
                if -50<=x3<=50 and -50<=y3<=50 and grid[x3+offset][y3+offset]:
                    x4 = x-b
                    y4 = y+a
                    if -50<=x4<=50 and -50<=y4<=50 and grid[x4+offset][y4+offset]:
                        count +=1
    print count
                
                
                
                
