class CountSquares(object):

    def __call__(self, points):
        N = len(points)
        nsq = 0
        s = {}
        i = 0
        for p in points:
            s[p] = i
            i += 1
            
        seen = set()
        for i in xrange(N-1):
            pi = points[i]
            x1, y1 = pi
            for j in xrange(i+1, N):
                pj = points[j]
                if ((j, i)) in seen: continue
                x2, y2 = pj
                dx = x2 - x1
                dy = y2 - y1
                dist = dx*dx + dy*dy
                if dist%2: continue
                p1 = (x1 + x2 + dy) // 2, (y1 + y2 - dx) // 2
                if p1 not in s: continue
                p2 = (x1 + x2 - dy) // 2, (dx + y1 + y2) // 2
                if p2 not in s: continue
                seen.add((i, j))
                seen.add((j, i))
                i1 = s[p1]
                i2 = s[p2]
                seen.add((i1, i2))
                seen.add((i2, i1))
                nsq += 1
        return nsq
            
                
def run():
    import sys
    
    cs = CountSquares()
    nextline = sys.stdin.readline
    numsets = int(nextline())
    for i in xrange(numsets):
        numpoints = int(nextline())
        points = []
        for j in xrange(numpoints):
            x, y = nextline().split()
            points.append((int(x), int(y)))
        print cs(points)
        
run()
