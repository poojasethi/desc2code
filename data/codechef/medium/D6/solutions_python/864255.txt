from collections import defaultdict

def solve(points):
    z = defaultdict(lambda:defaultdict(lambda:False))    
    for p in points:
        z[p[0]][p[1]] = True
    _points = []
    for k in sorted(z.keys()):
        for m in sorted(z[k].keys()):
            _points.append((k, m))
    count = 0
    for i in xrange(len(_points) - 1):
        a, b = _points[i][0], _points[i][1]
        for j in xrange(i + 1, len(_points)):
            c, d = _points[j][0], _points[j][1]
            if d <= b: continue
            q1, q2 = (a + d - b, b - c + a), (c + d - b, d - c + a)
            if z[q1[0]][q1[1]] and z[q2[0]][q2[1]]: 
                count += 1
    return count
 
cases = []
tests_num = int(raw_input())
for t in xrange(tests_num):
    n = int(raw_input())
    points = []
    for n in xrange(n):
        points.append(tuple([int(v) for v in raw_input().split()]))
    cases.append(points)

for case in cases:
    print solve(case)    
