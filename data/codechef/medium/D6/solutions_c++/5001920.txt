#include<cstdio>
#include<vector>
#include<utility>
#include<set>
#include<map>
#define ll long long

using namespace std;

int main()
{
	int T;
	scanf("%d",&T);
	while(T--){
		int n;
		scanf("%d",&n);
		set< pair<ll,ll> > points;
		for(int i = 0; i < n; ++i){
			ll a, b;
			scanf("%lld %lld",&a,&b);
			// shift ahead by 10^6 to avoid negatives
			//a += 1000000;
			//b += 1000000;
			points.insert(make_pair(a,b));
		}
		ll flag=0 , ans=0;
		for(set< pair<ll,ll> >::iterator it = points.begin(); it != points.end(); ++it){
			for(set< pair<ll,ll> >::iterator it2 = it; it2 != points.end(); ++it2){
				if(it2 == it)
					continue;
				double c_x = (it->first + it2->first + it->second - it2->second)/2.0 , c_y = (it->second + it2->second - it->first + it2->first)/2.0;
				double d_x = (it->first + it2->first - it->second + it2->second)/2.0, d_y = (it->second + it2->second + it->first - it2->first)/2.0;
				if((c_x != (long long)c_x) || (d_x != (long long)d_x) || (c_y != (long long)c_y) || (d_y != (long long)d_y))
					continue;
				pair<ll,ll> c(c_x,c_y), d(d_x,d_y);
				int c_found = 0;
				if(points.find(c) != points.end()){
					flag = 2;
					c_found = 1;
				}
				if(points.find(d) != points.end()){
					flag = 2;
					if(c_found){
						++ans;
						//printf("Square found!!\n  (%lld,%lld)   (%lld,%lld)   (%lld,%lld)   (%lld,%lld)  \n", it->first,it->second,it2->first,it2->second,c.first,c.second,d.first,d.second);
					}
				}
			}
		}
		printf("%lld\n",ans/2);
	}
	return 0;
}