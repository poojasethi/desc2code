#include<stdio.h>
#include<math.h>
#include<string.h>

void readint(int &a)
{
    register int c;
	char sign = 'f';
    a = 0;
	do c = getchar_unlocked(); while(c < '-');

	if(c == '-'){ sign = 't'; c = getchar_unlocked(); }

	do{
		a = (a << 1) + (a << 3) + c - '0';
		c = getchar_unlocked();
	}while(c >= '0');

	if(sign == 't')a = -a;
}

void printint(unsigned a)
{
	char s[20];
	int t = -1;
	
	do{
		s[++t] = a % 10 + '0';
		a /= 10;
	}while(a > 0);
	
	while(t >= 0)putchar_unlocked(s[t--]);
	putchar_unlocked('\n');
}

typedef struct
{
	int x;
	int y;
}point;

void swap(point *p,point *q)
{
    point t = *p;
	*p = *q;
	*q = t;
}

int partition(point a[],int l,int r)
{
	int p = a[l].x;
	int i = l,j = r + 1;
	
	do{
		do i++; while(i < r && a[i].x < p );
		do j--; while(a[j].x > p );
		swap(a+i,a+j);	
	}while(i < j);
	
	swap(a+i,a+j);
	swap(a+l,a+j);	
	return j;
}

void qs(point a[],int l,int r)
{
	if(l >= r)return;
	
	int j = partition(a,l,r);
	
	qs(a,l,j-1);
	qs(a,j+1,r);
}

int main()
{
	int t,n;
	char g[101][101];
	point pt[500];
	register int i,j;
	int x,y,dx,dy,xj,yj;
	register unsigned cnt;

	readint(t);

	while(t--)
	{
		memset(g,'f',sizeof g);
		readint(n);

		for(i = 0; i < n; i++)
		{
			readint(x);
			readint(y);
			g[x+50][y+50] = 't';
			(pt+i)->x = x+50;
			(pt+i)->y = y+50;
		}
		qs(pt,0,n-1);

		cnt = 0;
		for(i = 0; i < n - 1; i++)
		{
			x = (pt+i)->x;
			y = (pt+i)->y;

			for(j = i + 1; j < n; j++)
			{
				xj = (pt+j)->x;
				yj = (pt+j)->y;

				dx = xj - x;
				dy = yj - y;

				if(dy >= 0)
				{
					if( (x + dy) <= 100 && (y - dx) >= 0 && (xj + dy) <= 100 && (yj - dx) >= 0)
					if(g[x + dy][y - dx] == 't' && g[xj + dy][yj - dx] == 't')cnt++;
				}
				else
				{
					dy = -dy;
					if( (x + dy) <= 100 && (y + dx) <= 100 && (xj + dy) <= 100 && (yj + dx) <= 100)
					if(g[x + dy][y + dx] == 't' && g[xj + dy][yj + dx] == 't')cnt++;
				}
			}
		}
		printint(cnt>>1);
	}
	return 0;
}