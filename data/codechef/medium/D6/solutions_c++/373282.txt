#include <iostream>
#include <complex>
#include <set>
#include <cmath>
#include <algorithm>
using namespace std;
const int MAXN = 520;
typedef complex<double> point;
typedef pair<double, double> PD;
set< pair<double, double> > myset;
point a[MAXN];
int n;
int ans;

void find_rect(point a, point b) {
	if (b.imag() < a.imag() || b.real() < a.real())
		swap(a,b);
	PD t1, t2;
	point temp;
    temp = point(0,1) * (b-a) + a;
	t1 = make_pair(temp.real(),temp.imag());
	temp  = point (1,1) * (b-a) + a;
	t2 = make_pair(temp.real(), temp.imag());
	
	if (myset.find(t1) != myset.end() && myset.find(t2) != myset.end())
		ans++;
	
	    temp = point(0,-1) * (b-a) + a;
	t1 = make_pair(temp.real(),temp.imag());
	temp  = point (1,-1) * (b-a) + a;
	t2 = make_pair(temp.real(), temp.imag());
	
	if (myset.find(t1) != myset.end() && myset.find(t2) != myset.end())
		ans++;
	temp = point(1,1);
	temp *= b - a;
	temp /= sqrt(2);
	temp += a;
		t1 = make_pair(temp.real(),temp.imag());
	temp = point(1,-1);
	temp *= b - a;
	temp /= sqrt(2);
	temp += a;
		t2 = make_pair(temp.real(),temp.imag());
	if (myset.find(t1) != myset.end() && myset.find(t2) != myset.end())
		ans++;
//	cerr << "(<"<<a.real()<<","<<a.imag()<<">,<"<<b.real()<<","<<b.imag()<<">) : " << ans << endl;
}
	
		
void solve() {
	ans = 0;
	myset.clear();
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		double x, y;
		cin >> x >> y;
		a[i] = point(x,y);
		myset.insert(make_pair(x,y));
	}
	for (int i = 0; i < n; i++)
		for (int j = i + 1; j < n; j++)
			find_rect(a[i],a[j]);
	cout << ans / 4 << endl;
}


int main() {
	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
		solve();
	return 0;
}
