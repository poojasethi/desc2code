#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long ll;
typedef unsigned long long ull;
using namespace std;

typedef pair<int, int> P;
#define X first
#define Y second


P p[500];
int f[101][101];
int n;
set<set<P> > res;
P rot(const P& a, const P& b, double c)
{
	c = M_PI - c;
	complex<double> A(a.X, a.Y);
	complex<double> B(b.X, b.Y);
	complex<double> t = (B - A) * complex<double>(cos(c), sin(c));
	t = t + B;
	return P((int)(t.real()+1e-9), (int)(t.imag()+1e-9));
}
void func(int i, int j, double c)
{
	set<P> s;
	P x = rot(p[i], p[j], c);
	if (x.X < 0 || x.Y < 0 || x.X > 100 || x.Y > 100) return;
	if (x != p[i] && x != p[j] && f[x.X][x.Y]) {
		P y = rot(p[j], x, c);
		if (y.X < 0 || y.Y < 0 || y.X > 100 || y.Y > 100) return;
		if (y != p[i] && y != p[j] && y != x && f[y.X][y.Y]) {
			s.insert(p[i]);
			s.insert(p[j]);
			s.insert(x);
			s.insert(y);
			res.insert(s);
			/*
			cout << "("<<p[i].X<<","<<p[i].Y<<") "
				 << "("<<p[j].X<<","<<p[j].Y<<") "
				 << "("<<x.X<<","<<x.Y<<") "
				 << "("<<y.X<<","<<y.Y<<")" << endl;
				 */
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(0);
	int T; cin >> T;
	while (T--) {
		res.clear();
		memset(f, 0, sizeof(f));
		cin >> n;
		rep(i, n) {
			int x, y; cin >> x >> y;
			p[i] = P(x+50, y+50);
			f[x+50][y+50] = 1;
		}
		rep(i, n) REP(j, i+1, n) {
			func(i, j, M_PI/2);
			func(i, j, -M_PI/2);
		}
		cout << res.size() << endl;
	}
	return 0;
}
