#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <sys/time.h>
#include <stdio.h>
#include <string.h>

using namespace std;

typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
typedef unsigned long long ULL;
typedef unsigned char BYTE;

#define FOR(i, n) for (int i = 0; i < (n); ++i)
#define FORU(i, s, e) for (int i = (s); i <= (e); ++i)
#define FORD(i, s, e) for (int i = (s); i >= (e); --i)
#define ALL(x) (x).begin(),(x).end()
#define FOREACH(i, v) for(__typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)
#define SIZE(x) ((int)(x).size())
#define MP make_pair
#define BIT(x, b) (((x) >> (b)) & 1)
#define DEBUG(x) cerr << #x << " = " << x << " at line " << __LINE__ << endl;
#define INF 1000000000
#define MAX_TIME 5
#define TIME_LEFT_UNTIL(end) ((curTime=getTime()-startTime) < (end))
#define TIME_LEFT() TIME_LEFT_UNTIL(MAX_TIME)
#define INIT_TIME() startTime = getTime();
//#define cerr while (0) cerr

double startTime, curTime;

inline double getTime () {
  timeval tv;
  gettimeofday(&tv, 0);
  return tv.tv_sec + tv.tv_usec * 1e-6;
}

#define OFF 100 
int x[505], y[505];
int pt[OFF<<1][OFF<<1];
int N;

int main () {
  int cases, tx, ty;
  scanf("%d", &cases);
  FOR(i, OFF<<1)
    FOR(j, OFF<<1)
      pt[i][j] = 0;
  FORU(c, 1, cases) {
    scanf("%d", &N);
    FOR(i, N) {
      scanf("%d%d", &tx, &ty);
      x[i] = tx+OFF;
      y[i] = ty+OFF;
      pt[x[i]][y[i]] = c;
    }

    int out = 0;
    FOR(i, N)
      FORU(j, 0, i-1) {
        int x1 = (x[i]+x[j]) + (y[i]-y[j]);
        int x2 = (x[i]+x[j]) + (y[j]-y[i]);
        int y1 = (y[i]+y[j]) + (x[j]-x[i]);
        int y2 = (y[i]+y[j]) + (x[i]-x[j]);
        if (!(x1&1) && !(x2&1) && !(y1&1) && !(y2&1) && pt[x1>>1][y1>>1] == c && pt[x2>>1][y2>>1] == c)
          ++out;
      }
    printf("%d\n", out>>1);
  }
  return 0;
}
