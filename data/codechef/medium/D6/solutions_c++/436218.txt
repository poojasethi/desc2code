#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;

int N;
struct point{
    int x;
    int y;
}pts[500];

bool cmp(point p1, point p2){
    if(p1.x < p2.x) return true;
    if(p1.x > p2.x) return false;
    if(p1.y < p2.y) return true;
    else return false;
}

bool bSearch(point p){
    int high = N-1;
    int low = 0;
    int mid;

    while(low <= high){
        mid = (high + low)/2;
        if((pts[mid].x == p.x) && (pts[mid].y == p.y)){
            return true;
        }
        else if(cmp(pts[mid], p)) low = mid+1;
        else high = mid-1;
    }
    return false;
}

bool can(int i, int j){
    int dx = (pts[j].x - pts[i].x);
    int dy = (pts[j].y - pts[i].y);

    point p3, p4;
    p3.x = pts[j].x - dy;
    p3.y = pts[j].y + dx;
    p4.x = p3.x - dx;
    p4.y = p3.y - dy;

    if(bSearch(p3) & bSearch(p4)) return true;
    else return false;
}

int main(){
    //freopen("input.txt", "r", stdin);
    int T, count;
    scanf("%d", &T);

    while(T--){
        count = 0;
        scanf("%d", &N);
        for(int i = 0 ; i < N; i++){
            scanf("%d %d", &pts[i].x, &pts[i].y);
        }
        sort(pts, pts+N, cmp);

        for(int i = 0; i < N; i++){
            for(int j = i+1; j < N; j++){
                    if(can(i,j)) count++;

            }
        }

        printf("%d\n", count/2);
    }
}
