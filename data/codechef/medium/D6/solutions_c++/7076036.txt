#include<iostream>
using namespace std;
class point;
point *P;
int N;
class point
{
public:
   int x,y;
   friend istream& operator>>(istream &p,point &q)
   {
      cin>>q.x>>q.y;
   }
   friend ostream& operator<<(ostream &p,point &q)
   {
      p<<q.x<<" "<<q.y<<endl;
   }
   bool operator>(point &p)
   {
      if(x>p.x)
         return true;
      if(p.x>x)
         return false;
      if(y>p.y)
         return true;
      return false;
   }
   static bool binarySearch(point &p)
   {
      int low=0,high=N,mid=N/2;
      for(;low<=high;mid=(low+high)/2)
      {
         if(P[mid]>p)
            high=mid-1;
         else if(p>P[mid])
            low=mid+1;
         else
            return true;
      }
      return false;
   }
   static void merg(int first,int last)
   {
      int i,j,k;
      int mid=(first+last)/2;
      point Q[last-first+1];
      i=first;
      j=mid+1;
      k=0;
      for(;i<=mid&&j<=last;)
      {
         if(P[i]>P[j])
            Q[k++]=P[j++];
         else
            Q[k++]=P[i++];
      }
      for(;i<=mid;)
         Q[k++]=P[i++];
      for(;j<=last;)
         Q[k++]=P[j++];
      for(i=0;i<last-first+1;i++)
         P[first+i]=Q[i];
   }
   static void mergesort(int first,int last)
   {
      if(first>=last)
         return ;
      mergesort(first,(first+last)/2);
      mergesort((first+last)/2+1,last);
      merg(first,last);
   }
};
int main()
{
   int T,i,j,k,ans;
   point p,q;
   bool findP,findQ;
   cin>>T;
   while(T--)
   {
      cin>>N;
      P=new point[N];
      for(i=0;i<N;i++)
         cin>>P[i];
      point::mergesort(0,N-1);
      for(ans=i=0;i<N-1;i++)
      {
         for(j=i+1;j<N;j++)
         {
           p.x=P[i].x+P[i].y-P[j].y;
           p.y=P[i].y+P[j].x-P[i].x;
           q.x=P[j].x+P[i].y-P[j].y;
           q.y=P[j].y+P[j].x-P[i].x;
           findP=point::binarySearch(p);
           findQ=point::binarySearch(q);
           if(findP&&findQ)
               ans++;

           p.x=P[i].x+P[j].y-P[i].y;
           p.y=P[i].y+P[i].x-P[j].x;
           q.x=P[j].x+P[j].y-P[i].y;
           q.y=P[j].y+P[i].x-P[j].x;
           findP=point::binarySearch(p);
           findQ=point::binarySearch(q);
           if(findP&&findQ)
              ans++;
         }
      }
      cout<<ans/4<<endl;
   }
return 0;
}
