#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
#include<fstream>
#include<iomanip>
#include<bitset>
#include<deque>
#include<queue>
#include<string>
#include<map>
#include<cstring>
#include<sstream>
#include<cmath>
#include<ctime>
using namespace std;

typedef struct point
{
	int x;
	int y;
};

vector<point> set;

typedef struct lessThan
{
	inline bool operator() (const point& p1, const point& p2)
	{
		if (p1.x < p2.x)
			return true;
		else if (p1.x == p2.x)
		{
			if (p1.y < p2.y)
				return true;
			else
				return false;
		}
		else
			return false;
	}
};

bool bsearch(point p)
{
	int s = 0, e = set.size()-1, mid;
	bool flag = false;
	while (s <= e)
	{
		mid = (s+e)/2;
		if (set[mid].x == p.x)
		{
			flag = true;
			break;
		}
		else if (set[mid].x < p.x)
			s = mid+1;
		else
			e = mid-1;
	}
	if (!flag)
		return false;
	int i = mid;
	while (i < set.size() && set[i].x == p.x)
	{
		if (set[i].y == p.y)
			return true;
		i++;
	}
	i = mid-1;
	while (i >= 0 && set[i].x == p.x)
	{
		if (set[i].y == p.y)
			return true;
		i--;
	}
	return false;
}

int main()
{
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		set.clear();
		int N;
		scanf("%d", &N);
		point p;
		for (int i = 0; i < N; i++)
		{
			scanf("%d %d", &p.x, &p.y);
			set.push_back(p);
		}
		sort(set.begin(), set.end(), lessThan());
		int count = 0;
		for (int i = 0; i < N-1; i++)
		{
			for (int j = i+1; j < N; j++)
			{
				int a = set[i].x;
				int b = set[i].y;
				int c = set[j].x;
				int d = set[j].y;
				point p1, p2, p3, p4;
				p1.x = c+d-b; p1.y = d+a-c;
				p2.x = a+d-b; p2.y = b+a-c;
				p3.x = a+b-d; p3.y = b+c-a;
				p4.x = c+b-d; p4.y = d+c-a;
				if (bsearch(p1) && bsearch(p2))
					count++;
				if (bsearch(p3) && bsearch(p4))
					count++;
			}
		}
		printf("%d\n", count/4);
	}
	return 0;
}
