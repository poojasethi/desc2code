#define DEBUG 0

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct {
  int x;
  int y;
} point;

int is_square(point a, point b, char g[101][101]) {
  int x1, y1, x2, y2;
  x1=a.x-(b.y-a.y)+50;
  if(x1<0 || x1>100)
    return 0;
  y1=a.y+(b.x-a.x)+50;
  if(y1<0 || y1>100 || !g[x1][y1])
    return 0;
  x2=b.x-(b.y-a.y)+50;
  if(x2<0 || x2>100)
    return 0;
  y2=b.y+(b.x-a.x)+50;
  if(y2<0 || y2>100)
    return 0;
  if(DEBUG && g[x2][y2])
    printf("square at %d,%d %d,%d %d,%d %d,%d\n", x1-50, y1-50, x2-50, y2-50, a.x, a.y, b.x, b.y);
  return g[x2][y2];
}

int compare(const void *a, const void *b) {
  point *pa=(point *)a;
  point *pb=(point *)b;

  if(pa->x==pb->x)
    return (pa->y - pb->y);
  return (pa->x - pb->x);
}

int main(void) {
  int tc, n, i, j, ans;
  point p[500];
  char g[101][101];

  scanf("%d", &tc);
  while(tc--) {
    scanf("%d", &n);
    memset(g, 0, sizeof(g));
    for(i=0;i<n;i++) {
      scanf("%d%d", &p[i].x, &p[i].y);
      g[p[i].x+50][p[i].y+50]=1;
    }
    qsort(p, n, sizeof(p[0]), compare);
    for(i=0,ans=0;i<n-1;i++)
      for(j=i+1;j<n;j++)
	if(is_square(p[i], p[j], g))
	  ans++;
    printf("%d\n", ans/2);
  }
  return 0;
}
