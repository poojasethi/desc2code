#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(t1, t2, dist):
    # work in seconds
    dist = int(dist) * 60
    t1 = (int(''.join(t1[:2])) * 60 + int(''.join(t1[3:]))) * 60
    t2 = (int(''.join(t2[:2])) * 60 + int(''.join(t2[3:]))) * 60
    # t2 < t1
    r1 = t1 - t2 + dist
    chef_at_home = t2 + dist
    chef_back_at_station = chef_at_home + dist
    gf_at_station = t1
    gf_at_home = t1 + dist

    if chef_back_at_station < gf_at_station:
        r2 = t1 - t2
    elif chef_at_home > gf_at_home:
        r2 = chef_at_home - t2
    else:
        # case where chef go back at station
        # gf had time to move
        # two equations:
        # chef_at_home + t = gf_at_station + u
        # t + u = dist
        # t = gf_at_station + dist - t - chef_at_home
        # t = (gf_at_station + dist - chef_at_home)/2
        t = (gf_at_station + dist - chef_at_home)/2.0
        r2 = chef_at_home + t - t2

    #else:
    #    print chef_at_home, gf_at_home, chef_at_station, gf_at_station


    return "%0.1f %0.1f" % (r1/60.0, r2/60.0)


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        t1 = data.readline().strip()
        t2 = data.readline().strip()
        dist = data.readline().strip()
        #L = map(float, data.readline().split())  # float
        #L = data.readline().split()  # string
        #s = data.readline().strip()
        #i = int(data.readline().strip())
        res = alg(t1, t2, dist)
        print res


if __name__ == "__main__":
    main()
