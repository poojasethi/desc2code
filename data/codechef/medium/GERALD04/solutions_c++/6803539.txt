#include<bits/stdc++.h>
#define gc getchar_unlocked // for linux
//#define gc getchar        // for windows
#define LL long long
using namespace std;

int inp()   //Signed long long data type
{
	int n=0;
	int ch=gc();int sign=1;
	while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=gc();}
	while( ch >= '0' && ch <= '9' )
	n = (n<<3)+(n<<1) + ch-'0', ch=gc();
	return(n*sign);
}
void scanint(int &x)  // Unsigned int data type
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
void scanlong(long long &x)     //Unsigned long long data type
{
    register long long c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

int main()
{
	int t;
	char time1[10],time2[10];
	int dist;
	scanint(t);
	while(t--)
	{
		scanf("%s", time1);
		scanf("%s", time2);
//		int min=0;
//		int hour=0;
//		int carry=0;
//		if(time1[4]<time2[4])
//		{
//			min= (10+(time1[4]-48)) - (time2[4]-48);
//			carry=1;
//		}
//		else
//		{
//			min=(time1[4]-48)-(time2[4]-48);
//			carry=0;
//		}
//		if(((time1[3]-48)-carry) < (time2[3]-48))
//		{
//			min = min + 10*(6+((time1[3]-48)-carry) - (time2[3]-48));
//			carry=1;
//		}
//		else
//		{
//			min=min+10*(((time1[3]-48)-carry)-(time2[3]-48));
//			carry=0;
//		}
////		printf("%d\n", min);
//		if(((time1[1]-48)-carry) < (time2[1]-48))
//		{
//			hour=(10+((time1[1]-48)-carry)) - (time2[1]-48);
//			carry=1;
//		}
//		else
//		{
//			hour=((time1[1]-48)-carry) - (time2[1]-48);
//			carry=0;
//		}
////		printf("%d\n", hour);
//		hour=hour + 10*(((time1[0]-48)-carry)-(time2[0]-48));
//		min = min +60*hour;
		scanint(dist);
		float min1=60*(10*(time1[0]-48)+(time1[1]-48));
		min1=min1+(10*(time1[3]-48)+(time1[4]-48));
		float min2=60*(10*(time2[0]-48)+(time2[1]-48));
		min2=min2+(10*(time2[3]-48)+(time2[4]-48));
//		printf("%d.0\n", min+dist);
//		printf("%0.1f \n", min1-min2+dist);
		
		float gap=min1-min2;
		if(2*dist<=gap)
			printf("%0.1f %0.1f\n", gap+dist, gap);
		else
		{
			printf("%0.1f %0.1f\n", gap+dist, (gap/2)+dist);
		}
	}
	return 0;
}
