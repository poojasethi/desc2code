#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<cstdio>
#include <ctime>
#include<cassert>

using namespace std;

#define MEM(a,b) memset(a,(b),sizeof(a))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define MIN(a,b) ((a) < (b) ? (a) : (b))

#define MP make_pair
#define pb push_back


typedef long long  LL;
typedef pair<int,int> pi;
typedef vector<int> vi;

int main()
{
   int i,j,k,T,n,m,cs=0;

   scanf("%d",&T);
   assert(T>=1 && T<=10000);
   while(T--)
   {
      int h1,m1,h2,m2,dist;
      scanf("%d:%d",&h1,&m1);
      scanf("%d:%d",&h2,&m2);
      scanf("%d",&dist);

      assert(0<=h1 && h1<24 && 0<=m1 && m1<60);
      assert(0<=h2 && h2<24 && 0<=m2 && m2<60);
      int t1=h1*60 + m1;
      int t2=h2*60 + m2;
      assert(t2<t1);

      int td = h1*60 + m1 - h2*60 - m2;

      double ans1 = td + dist;
      double ans2;
      if(dist<td) // can arive home earler
      {
         int ntd = MAX(2*dist - td,0);
         ans2 = 2*td + ntd;
         ans2/=2.0;
      }
      else if(dist>=td) // arrives at home late
      {
         int ntd = 2*dist - td;
         ans2 = 2*td + ntd;
         ans2 /= 2.;
      }

      printf("%.1lf %.1lf\n",ans1,ans2);

   }

	return 0;
}


