#include<iostream>
#include<cstdio>
 
#define RANGE(N,var) for(typeof(N) var=0;var < (N);var++)

typedef long long longInt;
const longInt MAXPEOPLE = 10000;
const longInt unit = 1000000;

longInt pos[MAXPEOPLE]; //position of the people in 1/unit units; 
using namespace std;

bool checkGreedy(longInt maxShift,longInt N,longInt D)
{	
	//Check if maxShift is able to seperate everyone by D
	if(N<=1)
		return true;  
	longInt best_of_last=max(longInt(0),pos[0]-maxShift);//start from last=0
	longInt best_of_current; 
	for(longInt i = 1;i<N;i++)
	{
		best_of_current = max(best_of_last + D,pos[i]-maxShift);
		if(best_of_current > pos[i]+ maxShift)
			return false;
		best_of_last = best_of_current;
	}
	return true;
}

longInt flushot(longInt N,longInt D)
{
	//Do a binary search to find the first integral value of d satisfying checkGreedy()
	if(checkGreedy(0,N,D))
		return 0;

	longInt lb=0,ub=1;
	while(!checkGreedy(ub,N,D)){
		lb=ub;
		ub=ub<<1;
	}
	while(ub-lb > 1){ // Note ub satsifies check while lb does not
		longInt mid = (ub + lb) / 2;
		if(checkGreedy(mid,N,D))
			ub = mid;
		else
			lb = mid;
	}
	return ub;
}

int main()
{
    longInt Cases;
    cin>>Cases;
    RANGE(Cases,c)
    {
        longInt N,D;
        long double D_raw,tmp;
        cin>>N>>D_raw;
        D = longInt(D_raw * unit);
        RANGE(N,i)
        {
			cin>>tmp;
			pos[i] = longInt(tmp * unit); 
		}
        printf("%.4Lf\n",((long double)flushot(N,D))/unit);
    }
    return 0;
}
