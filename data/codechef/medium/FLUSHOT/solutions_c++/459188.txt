#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <cstring>
using namespace std;
const int MAXCASES = 30;
const int MAXN = 10000;
const long long MAXT = 10000000000LL;
const long long MAXX = 10000000000LL;
 
void verifyNumber(char *buf){
}
 
void normalize(char *buf){
  int l = strlen(buf);
  bool found = false;
  for(int i=0;i<l;++i) if(buf[i]=='.'){
    found = true;
    buf[i+4] = 0;
    for(int j=i+1;j<i+4;++j) if(j >= l) buf[j] = '0';
    break;
  }
 
  if(!found) {
    buf[l] = '.';
    buf[l+4] = 0;
    for(int i=1;i<=3;++i) buf[l+i] = '0';
  }
}
 
long long readNumber(){
  int temp1=0,temp2=0;
  char buf[20];
  scanf(" %[^\n]",buf);
  verifyNumber(buf);
  normalize(buf);
  int readNow  = sscanf(buf,"%d.%d",&temp1,&temp2);
  long long ret = temp1*10000LL + temp2*10;
  assert(readNow==2 || temp2==0);
  return ret;
}
 
long long X[MAXN];
 
void printNumber(long long x){
  cout<<(x/10000);
  printf(".%.4d\n",(int) (x%10000));
}
bool canMove(long long D, int n, long long T, long long X[]){
  long long P = -T-1;
  for(int i=0;i<n;++i){
    if(P + T > X[i] + D) return false;
    long long cur = max(P + T, X[i] - D);
    cur = max(cur, 0LL);
    P = cur;
  }
  return true;
}
 
void doSolve(int n, long long T, long long X[]){
  static long long HI = 10*MAXT*MAXN;
  long long lo = -1, hi = HI; //1e14 (MAXT*MAXN)
  long long ret = HI;
  while(hi-lo > 1){
    long long mid = (hi + lo)/2;
    if(canMove(mid, n, T, X)) hi = mid, ret = mid;
    else lo = mid;
  }
  printNumber(ret);
}
 
void solveCase(){
  int n; cin>>n;
  assert(1 <= n && n <= MAXN);
  long long t = readNumber();
  assert(0 <= t && t <= MAXT);
 
//  cout<<t<<endl;
 
  for(int i=0;i<n;++i){
    X[i] = readNumber();
    assert(0 <= X[i] && X[i] <= MAXX);
    assert(i == 0 || X[i] >= X[i-1]);
//    cout<<X[i]<<endl;
  }
  doSolve(n, t, X);
//  cout<<endl<<endl;
}
main(){
  int cases; 
  cin>>cases;
  assert(0 <= cases && cases <= MAXCASES);
  while(cases--)
    solveCase();
}
 