# include <iostream>
using namespace std;
# define MOD 1000000007

long long int power (long long int base, long long int exp)
{
	long long int powgen;
	if ( exp == 0)
		return 1;
	else if (exp % 2)
		return (base * (power (base, exp -1)%MOD )% MOD);
	else {
		 powgen = (power (base, exp /2)) % MOD;
		return ((powgen * powgen)% MOD);
	     }
}



long long int invese (long long int x) {
	return (power(x, MOD -2)) % MOD;
}
void fact (long long int ar[] ) {
	
	ar[0] = 1;
	for (int i = 1; i <= 5000; i++)
		ar[i] = (i * ar[i-1]) % MOD;
}

void inverse ( long long int fact[], long long int ar[]) {
	long long int inverse = invese(fact[5000]);
	ar[5000] = inverse;
	for (long long int i = 5000; i >  0; i--)
		ar[i-1]  = (ar[i] * i) % MOD;
}

long long int c(int n, int r, long long int fact[], long long int inverse[] ){
	return ((fact[n] * inverse[r]) % MOD *inverse[n-r])% MOD;
}

int main () {
long long int t;
long long int n, k ;
long long int factorial[5001];
long  long int inverse1[5001];

fact (factorial);
inverse(factorial, inverse1);

cin >> n >> k;
long long int result, path;
while (n != 0 && k != 0) {
	n--;
	if (k%2) {
	 path =( k + 1) /2;
	result = c(n - path  + path - 1, path - 1, factorial,inverse1);
	cout << ((result * result) % MOD * 2 ) % MOD << endl;
	}
	else {
	path = (k) / 2;
	result = c (n- path + path - 1, path - 1, factorial, inverse1) % MOD;
	path ++;
	result = (result * c (n-path+path-1,path-1, factorial, inverse1)% MOD)%MOD; 
	cout <<(result *2 ) % MOD << endl;
	}
	
	cin >> n >> k;
	}
	return 0;
}	




	
