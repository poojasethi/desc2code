#include <cstdio>

using namespace std;
const int N_MAX = 5000;
unsigned long long MAX = 1000000007;
unsigned long long fact[N_MAX+1];
unsigned long long mul_inv[N_MAX+1];

inline unsigned long long combi(int n, int r)
{
    return (((fact[n] * mul_inv[r]) % MAX) * mul_inv[n-r]) % MAX;
}

inline unsigned long long exp_mod(int x, int y)
{
    unsigned long long term = x;
    unsigned long long prod = 1;

    while (y != 0)
    {
        if (y & 0x1)
            prod = (prod * term) % MAX;
        term = (term * term) % MAX;
        y >>= 1;
    }
    return prod;
}

int main()
{

    fact[0]     = fact[1]    = 1;
    mul_inv[0]  = mul_inv[1] = 1;

    for(int i=2; i<=N_MAX; i++)
    {
        fact[i]    = (fact[i-1] * i) % MAX;
        mul_inv[i] = exp_mod(fact[i], MAX-2);
    }

    while (true)
    {
        int N, K;
        scanf("%d %d", &N, &K);
        if (N == 0 && K == 0)
            break;

        unsigned long long position_ways, direction_ways, total_ways;
        position_ways  = combi(N-2, K/2) % MAX;
        direction_ways = combi(N-2, N-1-K/2-(K&0x1)) % MAX;
        total_ways = (2 * (position_ways * direction_ways) % MAX) % MAX;
        printf("%lld\n", total_ways);
    }
    return 0;
}
