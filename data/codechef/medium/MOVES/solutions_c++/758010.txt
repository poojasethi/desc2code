#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>

using namespace std;

typedef long long ll;

#define MOD 1000000007

#define N 5001


#define BSIZE (4096 * 16)

char buf[BSIZE];
int bs = 0; //buf size
int bi = 0; //buf index

#define ISCHAR(c) ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
#define ISDIG(c) (c >= '0' && c <= '9')

void readbuf() {
	if (!bs || bi == bs) {
		bs = fread(buf, 1, BSIZE, stdin);
		bi = 0;
	}
}

char nextChar() {
	char c = 0;
	while (!c) {
		readbuf();
		while(bi < bs && !ISCHAR(buf[bi])) {
			bi++;
		}
		c = bi < bs ? buf[bi++] : 0;
	}
	return c;
}

ll nextNum() {
	ll num = 0;
	while (true) {
		readbuf();
		while(bi < bs && !ISDIG(buf[bi])) {
			bi++;
		}
		if (bi < bs) break;
	}
	while (true) {
		readbuf();
		while (bi < bs && ISDIG(buf[bi])) {
			num *= 10;
			num += buf[bi] - '0';
			bi++;
		}
		if (bi < bs) break;
	}

	return num;
}

int powmod(ll a, ll b, ll m) {

	ll res = 1;

	while (b > 0) {
		if (b & 1) {
			res = (res * a) % m;
		}
		a = (a * a) % m;
		b = b >> 1;
	}

	return res;
}

int main() {


	ll fac[N], ifac[N];
	fac[0] = 1;
	ifac[0] = 1;
	for(int i = 1; i < N; i++) {
		fac[i] = (i * fac[i-1]) % MOD;
		ifac[i] = powmod(fac[i], MOD-2, MOD);
	}

	while(true) {
		int n, k;
		n = nextNum(); k = nextNum();
		if (n == 0 && k == 0) break;

		int m1 = (k+1)/2;
		int m2 = m1 + ( (k+1) % 2);

		int l = n-1; //elements total
		int l1 = l-m1;
		int l2 = l-m2;

		ll w1 = (fac[l - 1] * ( (ifac[l-m1] * ifac[m1-1]) % MOD) ) % MOD;
		ll w2 = (fac[l - 1] * ( (ifac[l-m2] * ifac[m2-1]) % MOD) ) % MOD;

		ll w = (((w1*w2) % MOD) * 2) % MOD;
		printf("%ld\n", w);
	}

	return 0;
}
