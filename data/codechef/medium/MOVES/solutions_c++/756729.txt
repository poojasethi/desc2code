#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
/*********************/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <cctype>
#include <utility>
#include <sstream>
 
/*********************/
#define FOR(i,a,n) for(i=(a);i<(n);++i)
#define FORE(i,a,n) for(i=(a); i<=(n); ++i)
#define FORD(i,a,n) for(i=(a); i>=0; i--)
#define FORIT(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
 
/*********************/
#define _bc(i) __builtin_popcount(i)
#define all(v) (v).begin(),(v).end()
#define sz size()
#define PB push_back
#define MP make_pair
#define FI first
#define SE second
#define BE begin()
#define EN end()
#define IT iterator
 
/**********************/
using namespace std;
template<class T> string i2s(T x) { ostringstream o; o<<x; return o.str(); }
int s2i(string x) {int r=0;istringstream sin(x);sin>>r;return r; }
 
typedef vector <int> VI;
typedef vector<string> VS;
typedef pair<int,int> II;
typedef vector<II > VII;
typedef map<int,int> MII;
typedef long long lint;
 
/*********************/
#define SS ({int x;scanf("%d",&x);x;})
#define SSL ({lint x;scanf("%lld", &x);x;})
#define sci(a) scanf("%d",&a)
#define scc(a) scanf("%c",&a)
#define scl(a) scanf("%lld",&a)
#define scf(a) scanf("%lf",&a)
#define scs(a) scanf("%s",a)
 
/**********************************/
#define INF (1<<30) //or 0x7ffffff0 for 2^31-16 = 2147483647
#define MINF 0x80000000 //-2^31
#define INFLL (1LL<<62)
#define mod 1000000007
#define NMX 5001
/**********************************/
 
lint f[NMX];
void getfact()
{
f[0]=f[1]=1;
for (int i=2; i<=NMX;i++)
f[i]= (f[i-1]*i)%mod;
}
lint pow(int a, int b)
{
lint x=1,y=a;
while(b > 0)
{
if(b%2 == 1)
{
x=(x*y);
if(x>mod) x%=mod;
}
y = (y*y);
if(y>mod) y%=mod;
b /= 2;
}
return x;
}
long long InverseEuler(int a, int m)
{
return pow(a,m-2);
}
long long C(int n, int r, int MOD)
{
return (f[n]*((InverseEuler(f[r],mod) * InverseEuler(f[n-r],mod)) %mod)) %mod;
}
int solve(int n,int k)
{
int l,d,x,y;
if(k==1)
return 2;
if(k&1)
{
//parts:(k+1)/2
x=C(n-2,(k)/2,mod);
y=x;
}
else
{
//parts:k/2 and k/2+1
x=C(n-2,k/2 -1,mod);
y=C(n-2,k/2,mod);
}
return (2*(lint)x*y)%mod;
}
int main()
{
int n,k,i,j;
getfact();
while(1)
{
sci(n);sci(k);
if(n==0 && k==0)
break;
printf("%d\n",solve(n,k));
}
return 0;
}
