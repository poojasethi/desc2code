#include<iostream>
using namespace std;
long long int f[5001];

// This function calculates (a^b)%MOD
long long pow(int a, int b, long long int MOD)
{
	long long x=1,y=a;
	while(b > 0)
	{
		if(b%2 == 1)
		{
			x=(x*y);
			if(x>MOD) x%=MOD;
		}
		y = (y*y);
		if(y>MOD) y%=MOD;
		b /= 2;
	}
	return x;
}

/* 	Modular Multiplicative Inverse
	Using Euler's Theorem
	a^(phi(m)) = 1 (mod m)
	a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(int n, long long int MOD)
{
	return pow(n,MOD-2,MOD);
}

long long C(int n, int r, long long int MOD)
{
	return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}


main()
{
    int n,k;
    long long int t,t1,ans;
    long long int MOD=1000000007ll;
    int i;
    f[0]=1ll;f[1]=1ll;
    for(i=2;i<=5000;i++)
    {
        f[i]=(f[i-1]*i);
        if(f[i]>MOD)
        f[i]%=1000000007;
    }
    cin>>n>>k;
    while(n&&k)
    {
        if((k%2)!=0)
        {
            t=C(n-2,(k-1)/2,MOD);
            ans=(2*t*t)%MOD;
        }
        else
        {
             t=C(n-2,k/2-1,MOD);
             t1=C(n-2,k/2,MOD);
            ans=(2*t*t1)%MOD;
        }
      cout<<ans<<endl;
      cin>>n>>k;
    }
}
