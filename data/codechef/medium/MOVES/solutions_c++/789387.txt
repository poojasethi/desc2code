#include <vector>
#include <numeric>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <limits>
#include <iomanip>

using namespace std;

#define FOR(i,a,b)		for(int i=(a),_b=(b);i<(_b);++i)
#define FORD(i,a,b)		for(int i=(a),_b=(b);i>(_b);--i)
#define pb			push_back
#define mp			make_pair
#define	all(c)			(c).begin(),(c).end()
#define	tr(c,i)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define	present(c,x)		((c).find(x) != (c).end())
#define	cpresent(c,x)		(find(all(c),x) != (c).end())

typedef long long			ll;
typedef unsigned long long	ull;
typedef unsigned char	 	byte;
typedef vector<int>			vi;
typedef pair<int, int>		pii;
typedef pair<ll, ll>		pll;
typedef vector<pii>			vpii;

const int N = 5000+5;
const int MOD = 1000000007;

int factorial[N],factorial_inv[N];
 
int euclid_ext(int a,int b,int &x,int &y)
{
	if (b == 0) {
		x = 1;
		y = 0;
		return a;
	}
	int d = euclid_ext(b,a%b,x,y);
	int t = x;
	x = y;
	y = t - (a/b)*y;
	return d;
}

int inverse(int s)
{
	int x,y;
	euclid_ext(s,MOD,x,y);
	return (x%MOD + MOD)%MOD;
}

#define	MUL(a,b)	((int)((ll)a*(ll)b%MOD))

int choose(int a,int b)
{
	if (a < 0 || b < 0 || b > a)
		return 0;
	return MUL(factorial[a],MUL(factorial_inv[b],factorial_inv[a-b]));
}
 
int main(int argc, char *argv[])
{
#ifndef ONLINE_JUDGE
	freopen(argv[1],"r",stdin);
#endif
#if 0
	ofstream cout(argv[2]);
#endif
	int n,k;
	FOR(i,0,N) factorial[i]=(i==0)?1:MUL(factorial[i-1],i);
	FOR(i,0,N) factorial_inv[i]=inverse(factorial[i]);
	while (true) {
		scanf("%d%d",&n,&k);
		if (n == 0)
			break;
		int ans = MUL(choose(n-2,(k+1)/2-1),choose(n-2,k+1-(k+1)/2-1));
		ans = MUL(ans,2);
		printf("%d\n",ans);
	}
	return 0;
}
