#include <cstdio>

#define maxn 5001
#define MOD 1000000007
long long fact[maxn], invfact[maxn];

long long powmod(long long a, int n) {
    long long res=1;
    while(n) {
        if ( n&1 ) res = (res*a)%MOD;
        a = (a*a)%MOD;
        n >>= 1;
    }
    return res;
}

long long inverse(int a) {
    return powmod(a,MOD-2); // from Fermat's theorem
}

void init() {
    fact[0] = 1;
    for(int i=1;i<maxn;++i) fact[i] = (i*fact[i-1])%MOD;
    invfact[maxn-1] = inverse(fact[maxn-1]);
    for(int i=maxn-1;i>0;--i) invfact[i-1] = (1LL*i*invfact[i])%MOD;
}

/**
 * Here c[n,r] is calculated in O(n),
 *  whereas c[n,r] is calculated in O(n*n) time
 *  when c[n,r] = c[n-1,r]+c[n-1,r-1] is used
 */
int ncr(int n, int r) {
    if ( n<r || r<0 ) return 0;
    return (1LL*((1LL*fact[n]*invfact[r])%MOD)*invfact[n-r])%MOD;
}

int main() {
    init();
    int n, k;
    while(1) {
        scanf("%d%d",&n,&k);
        if ( !n && !k ) break;
        long long res = (1LL*ncr(n-2,k/2)*ncr(n-2,(k-1)/2))%MOD;
        res = (2LL*res)%MOD;
        printf("%d\n",res);
    }
    return 0;
}
