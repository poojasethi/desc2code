//CODER: Balajiganapathi
#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
typedef vector<string> vs;

#define st          first
#define se          second
#define all(x)      (x).begin(), (x).end()
#define ini(a, v)   memset(a, v, sizeof(a))
#define re(i,s,n)  	for(int i=s;i<(n);++i)
#define fr(i,n)     re(i,0,n)
#define tr(i,x)     for(typeof(x.begin()) i=x.begin();i!=x.end();++i)
#define pu          push_back
#define mp          make_pair
#define sz(x)       (int)(x.size())
#define inf			2000000009

#define gc getchar_unlocked
inline void fps(int &x)
{
    register int c = gc();
    x = 0;
    //int neg = 0;
    for(;((c<48 || c>57) /*&& c != '-'*/);c = gc());
    //if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    //if(neg) x=-x;
}

#define mod 1000000007
#define mul(a, b) ( (int)( (ll)a * b % mod ) )

int expo(int x, int p) {
	int ret = 1;
	for(; p; x = mul(x, x), p /= 2) if(p & 1) ret = mul(ret, x);
	return ret;
}

//Only if mod is prime
int inverse(int x) {
	return expo(x, mod - 2);
}

#define mx 5003
int fact[mx], invFact[mx];
int choose(int n, int k) {
	if(n < 0 || k < 0 || n < k) return 0;
	int ret = mul(fact[n], invFact[n - k]);
	return mul(ret, invFact[k]);
}



char out[1000006], *buf;

int main() {
	buf = out;
	fact[0] = 1;
	re(i, 1, mx) fact[i] = mul(fact[i - 1], i);
	fr(i, mx) invFact[i] = inverse(fact[i]);
	
	int t, n, k;

	while(1) {
		fps(n); fps(k);
		if(n == 0) break;
		int ret = mul(choose(n - 2, k / 2), choose(n - 2, (k - 1) / 2));
		ret = (ret + ret); if(ret >= mod) ret -= mod;
		
		buf += sprintf(buf, "%d\n", ret);
	}
	printf("%s", out);
	return 0;
}
