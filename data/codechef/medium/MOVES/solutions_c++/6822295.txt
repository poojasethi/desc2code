#include <stdio.h>
#define MOD 1000000007
#define max_size 5000

long long int factorial[max_size+10],inverse_factorial[max_size+10];

long long int inverse(long long int num,long long int mod)
{
    if(num>mod) return inverse(num%mod,mod);
    if(num==1) return 1;
    long long int r = mod % num,a;
    a=inverse(r,num);
    return ((1-r*a)/num -a*(mod/num)+mod)%mod;
}

void fill_fact()
{
    inverse_factorial[0]=factorial[0]=1;
    int i;
    for(i=1;i<=max_size;i++)
        {
            inverse_factorial[i]=(inverse_factorial[i-1]*inverse(i,MOD))%MOD;
            factorial[i]=(factorial[i-1]*i)%MOD;
        }
}

long long int nCr(int n,int r)
{
    if(r>n || r<0) return 0;
    return (factorial[n]*inverse_factorial[n-r])%MOD *inverse_factorial[r] % MOD;
}

long long int ways(int n,int k)
{
    return (2*nCr(n-2,k/2))%MOD * nCr(n-2,(k-1)/2) % MOD;
}

int main()
{
    fill_fact();
    int n,k;
    while(1)
    {
    scanf("%i %i",&n,&k);
    if(n || k) printf("%lld\n",(long long int) ways(n,k));
    else break;
    }
    return 0;
}
