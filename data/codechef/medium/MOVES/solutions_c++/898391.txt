#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1000000000
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define ull unsigned long long
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define IN(x,y) ((y).find((x))!=(y).end())
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));

// T <= 5000
// 3 <= N <= 5000
// 0 < K < 2*N - 2

#define MAX_N 5010
#define MAX_K 5010
#define MOD 1000000007

int B[MAX_N + 10][MAX_K + 10];

void compute_binomials()
{
   FOR(i, MAX_N)
   {
      FOR(j, i + 1)
      {
         if(j == 0 || j == i)
         {
            B[i][j] = 1;
         }
         else
         {
            B[i][j] = (B[i - 1][j - 1] + B[i - 1][j]) % MOD;
         }
      }
   }
}
int main()
{
   int t, n, k;
   ull res;
   compute_binomials();
   while(1)
   {
      cin >> n >> k;
      if(n == 0 && k == 0)
      {
         return 0;
      }
      res = (2 * B[n - 2][(int) floor(k / 2.0)]) % MOD;
      res = (res * B[n - 2][(int) (ceil(k / 2.0)) - 1]) % MOD;
      cout << res << endl;      
   }

   return 0;
}
