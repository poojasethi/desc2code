#include<stdio.h>

typedef long long ll ;

#define mod 1000000007

ll powMod ( int x , int p ){

	if(p == 1)
		return x ;

	else{
	
		ll sqrtpw = powMod( x , p/2 ) ;

		ll ans = ( sqrtpw * sqrtpw )%mod ;

		if( p&1 )
			ans = (ans*x)%mod ;
		
		return ans ;
	}
}
/*
ll invrsMultModMGroup( ll x , int M ){
	return (powMod( x , M-2 ))%mod ;
}*/

ll fact[5001] ;
ll invFact[5001] ;

void initializeFact(){

	fact[0] = 1 ;
	fact[1] = 1 ;
	for( int i = 2 ; i<=5000 ; i++)
		fact[i] = (fact[i-1]*i)%mod ;
}

void intializeInvFact(){

	invFact[5000] = powMod( fact[5000] , mod-2 ) ;

	for(int i = 4999 ; i>=0 ; i--)
		invFact[i] = ((i+1) * invFact[i+1])%mod ;

}

int readInt(){

	char c ;
	int n = 0 ;
	c = getchar() ;
	while( c<48 || c>57 )
		c = getchar() ;

	while( c>=48 && c<=57 ){
	
		n = (n<<3) + (n<<1) + (c-48) ;
		c = getchar() ;
	}
	return n ;
}

int main(){

	int n , k ;

	n = readInt() ;
	k = readInt() ;

	int tot , p1 , p2 ;
	ll a1 , a2 ;

	initializeFact() ;
	intializeInvFact() ;

	while( n!=0 || k!=0 ){
	
		tot = k+1 ;
		
		p1 = (tot>>1) ;
		p2 = tot - p1 ;
	
		n-=2 ;
		p1-- ;
		p2-- ;

		a1 = (((fact[n]*invFact[p1])%mod)*invFact[n-p1])%mod ;

		if(p1 == p2)
			a2 = a1 ;
		else
			a2 = (((fact[n]*invFact[p2])%mod)*invFact[n-p2])%mod ;

		a1 = (((a1*a2)%mod)*2)%mod ;

		printf("%lld\n",a1) ;
	
	//	a1 = (((fact[n]*invFact[k])%mod)*invFact[n-k])%mod ;

//		printf("%lld\n",a1) ;
		
		n = readInt() ;
		k = readInt() ;
	}

	return 0 ;
}