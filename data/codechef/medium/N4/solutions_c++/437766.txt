#include<iostream>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>
#include<malloc.h>
#include<vector>
#include<algorithm>
#include<stack>
#include<queue>
#include<list>
#include<string>
#include<map>


#define min(a,b) (a>b?b:a)
#define max(a,b) (a>b?a:b)
#define PB(x) push_back(x)
#define MP(x,y) make_pair(x,y)
#define F first
#define S second
#define P(x) push(x)
typedef long long LL;
using namespace std;

map< string,vector< pair<int,int> > > mp;
struct type{
    string s;
    vector< pair<int,int> > v;
};

void initialise()
{
    string s="0001001011000";
    struct type t1,t2;
    t1.s=s;
    t1.v.clear();
    queue< struct type > q;
    q.P(t1);
    while(!q.empty()){
        t1=q.front();
       // cout<<t1.s<<" "<<mp[t2.s].size()<<endl;
        q.pop();
        //////////////////
        t2=t1;
        t2.v.PB(MP(0,0));
        t2.s[0]=t1.s[2];t2.s[3]=t1.s[0];t2.s[6]=t1.s[3];t2.s[8]=t1.s[6];t2.s[5]=t1.s[8];t2.s[2]=t1.s[5];
        if(t2.s!=s && mp[t2.s].size()==0){
            q.P(t2);
            mp[t2.s]=t2.v;
        }
        ///////////////////////
        t2=t1;
        t2.v.PB(MP(0,1));
        t2.s[0]=t1.s[3];t2.s[2]=t1.s[0];t2.s[5]=t1.s[2];t2.s[8]=t1.s[5];t2.s[6]=t1.s[8];t2.s[3]=t1.s[6];
        if(t2.s!=s && mp[t2.s].size()==0){
            q.P(t2);
            mp[t2.s]=t2.v;
        }
        ////////////////////////////////
        t2=t1;
        t2.v.PB(MP(1,0));
        t2.s[1]=t1.s[3];t2.s[4]=t1.s[1];t2.s[7]=t1.s[4];t2.s[9]=t1.s[7];t2.s[6]=t1.s[9];t2.s[3]=t1.s[6];
        if(t2.s!=s && mp[t2.s].size()==0){
            q.P(t2);
            mp[t2.s]=t2.v;
        }
        ////////////////////////////////
        t2=t1;
        t2.v.PB(MP(1,1));
        t2.s[1]=t1.s[4];t2.s[4]=t1.s[7];t2.s[7]=t1.s[9];t2.s[9]=t1.s[6];t2.s[6]=t1.s[3];t2.s[3]=t1.s[1];
        if(t2.s!=s && mp[t2.s].size()==0){
            q.P(t2);
            mp[t2.s]=t2.v;
        }
        ////////////////////////////////
        t2=t1;
        t2.v.PB(MP(2,0));
        t2.s[6]=t1.s[8];t2.s[9]=t1.s[6];t2.s[11]=t1.s[9];t2.s[12]=t1.s[11];t2.s[10]=t1.s[12];t2.s[8]=t1.s[10];
        if(t2.s!=s && mp[t2.s].size()==0){
            q.P(t2);
            mp[t2.s]=t2.v;
        }
        ////////////////////////////////
        t2=t1;
        t2.v.PB(MP(2,1));
        t2.s[6]=t1.s[9];t2.s[9]=t1.s[11];t2.s[11]=t1.s[12];t2.s[12]=t1.s[10];t2.s[10]=t1.s[8];t2.s[8]=t1.s[6];
        if(t2.s!=s && mp[t2.s].size()==0){
            q.P(t2);
            mp[t2.s]=t2.v;
        }
        ////////////////////////////////
    }
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    initialise();
    int t;
    cin>>t;
    while(t--){
        string s;
        cin>>s;
        vector< pair<int,int> > v;
        v=mp[s];
        cout<<v.size()<<endl;
        for(int i=v.size()-1;i>=0;i--){
            cout<<v[i].F<<" "<<v[i].S<<endl;
        }
    }
}
