#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <cassert>

#define MOD	       	    1000007
#define LU             	long long unsigned int
#define LL             	long long int

#define REP(i,n)        for(int i = 0; i < n; i++)
#define FOR(i,a,b,k)    for(int i = a; i < b; i+=k)

using namespace std;

int ni(){
    int v;
    scanf("%d", &v);
    return v;
}

int steps[1<<13];
int visited[1<<13];
int parent[1<<13];
int rot[1<<13];
int direction[1<<13];

int goal = 0x258; //0001001011000
int r[3][6] = {{12,9,6,4,7,10},{11,8,5,3,6,9},{6,3,1,0,2,4}};

int Rotate(int curr, int rn, int dr){
    dr = 2*dr-1;
    int ret = curr;
    REP(i,6){
        int bit = r[rn][i];
        int nbit = r[rn][(i+6+dr)%6];
        int mask = -1;
        mask &= ~(1 << bit);
        ret &= mask;
        if(curr & (1 << nbit)){
            ret |= (1 << bit);
        }
    }
    return ret;
}

void preProcess(){
    queue<int> q;
    q.push(goal);
    visited[goal] = 1;
    steps[goal] = 0;
    parent[goal] = -1;

    int a[6];
    while(!q.empty()){
        int curr = q.front();
        q.pop();

        REP(i,6){
            a[i] = Rotate(curr,i/2, i%2);
            if(!visited[a[i]]){
                q.push(a[i]);
                visited[a[i]] = 1;
                parent[a[i]] = curr;
                rot[a[i]] = i/2;
                direction[a[i]] = i%2;
                steps[a[i]] = steps[curr]+1;
            }
        }
    }
}

int getNumber(char* s){
    int ret = 0;
    int i = 0;
    while(s[i]){
        ret = 2*ret + (s[i] - '0');
        i++;
    }
    return ret;
}

int main(){
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    preProcess();
    char s[14];

    int t = ni();

    while(t--){
        scanf("%s", s);
        int state = getNumber(s);
        printf("%d\n", steps[state]);
        while(state != goal){
            //printf("%d %d\n", state, parent[state]);
            printf("%d %d\n", rot[state], direction[state]);
            state = parent[state];
        }
    }
}
