#include <stdio.h>
#define MAX_STATES 715
#define VERTICES 13
int states[MAX_STATES], moves[MAX_STATES], previousState[MAX_STATES], last=1;
int rotations[6][7]={{0,3,6,8,5,2,0},{0,2,5,8,6,3,0},{1,4,7,9,6,3,1},{1,3,6,9,7,4,1},{6,9,11,12,10,8,6},{6,8,10,12,11,9,6}};
int bits[]={1,2,4,8,16,32,64,128,256,512,1024,2048,4096};

int moveHex(int kind, int state)
{
    int newState=state, i=0;
    for(; i++<6; newState=((state&bits[VERTICES-rotations[kind][i]-1]))?(newState|bits[VERTICES-rotations[kind][i-1]-1]):(newState&(~bits[VERTICES-rotations[kind][i-1]-1])));
    return newState;
}

int searchState(int state)
{
    for(signed int i=last-1; i>=0; i--)
        if(state==states[i])
            return i;
    return -1;
}

int transformToNumber(char stateStr[])
{
    int stateNumber=0;
    for(int i=0; i<VERTICES; stateNumber=(stateStr[i]=='1')?(stateNumber|bits[VERTICES-i-1]):stateNumber, i++);
    return stateNumber;
}

void printSolution(int initialState)
{
    int answer[12], j=0, i, viewed;
    for(i=0, viewed=searchState(initialState); viewed; answer[i++]=moves[viewed], viewed=previousState[viewed]);
    for(printf("%d\n",i); j++<i; printf("%d %d\n",(answer[j-1]>>1),((answer[j-1]%2)^1)));
}

int main()
{
    int newState=0, times;
    states[0]=600;
    char initialState[VERTICES+1];
    for(int current=0; current < last; current++)
        for(int j=0; j<6; j++)
            if(searchState(newState=moveHex(j,states[current]))==-1)
            {
                states[last]=newState;
                moves[last]=j;
                previousState[last++]=current;
            }
    for(scanf("%d",&times);times--;)
    {
        scanf("%s", initialState);
        printSolution(transformToNumber(initialState));
    }
    return 0;
}
