#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <list>

using namespace std;

const int goalState = 0x258;
bool visited[8192] = {false};

struct Node {
    
    //int* pattern;
    int string;
    bool cw;
    int hexIndex;
    Node* parent;
    
    Node()
    {
        //pattern = NULL;
        parent = NULL;
        cw = false;
        hexIndex = -1;
    }
};

void printString(int value)
{
    int divResult = 0;
    string result = "";
    for(int z = 0; z < 13; ++z) {
        divResult = value%2;
        value /= 2;
        char c[10];
        snprintf(c, sizeof(c),"%d", divResult);
        result = c + result;
    }
    cout << result << endl;
}

void shift(int v0, int v1, int v2, int v3, int v4, int v5, int& string);

bool readInput();

int numOfPuzzles = 0;
int** puzzles;
 
int main(int argc, char**argv) {
    
        readInput();
        
        //Loop over each puzzle and solve 
        for(int i = 0; i < numOfPuzzles; ++i)
        {
            //add initial state as the parent node
            Node* root = new Node();
            //root->pattern = puzzles[i];
            root->parent = NULL;
            
            int startState = 0;
            for(int z = 0; z < 13; ++z) {
                startState += puzzles[i][z]*pow(2,(12-z));
            }
            
            root->string = startState;
            
            
            list<Node*> queue;
            list<Node*> closed;
            visited[startState] = true;
            queue.push_back(root);
                
            bool solution = false;
            
            Node* current = NULL;
            bool first = true;
            while(queue.size() > 0)
            {
                current = queue.front();
                queue.pop_front();
                closed.push_back(current);
                
                //Check if we found the solution
                int total = current->string;
               
               
                if(!first)
                {
                    if (total == startState)
                    {
                        continue;
                    }
                }
                else
                {
                    first = false;
                }
                    
                if(current->parent != NULL) {
                    int parentTotal = current->parent->string;
                        
                    if(total == parentTotal)
                    {
                        continue;
                    }
                }
                
                if(total == goalState) {
                    solution = true;
                    break;
                }
               
              // cout << "queue size " << queue.size() << endl;
                
                //Apply all possible rotations and add a node for each 
                Node* h1acw = new Node();
                int value = current->string;
                //h1acw->pattern = 
                shift(3, 6, 8, 5, 2, 0, value);
                h1acw->string = value;
                h1acw->cw = false;
                h1acw->hexIndex = 0;
                h1acw->parent = current;
                
                if(!visited[value])
                {
                    queue.push_back(h1acw);
                    visited[value] = true;
                    //printString(h1acw->string);
                }
                
                
                Node* h1cw = new Node();
                value = current->string;
                //h1cw->pattern = 
                shift(0, 2, 5, 8, 6, 3, value);
                h1cw->string = value;
                h1cw->cw = true;
                h1cw->hexIndex = 0;
                h1cw->parent = current;
                
                if(!visited[value])
                {
                    queue.push_back(h1cw);
                    visited[value] = true;
                    //printString(h1cw->string);
                }
                
                Node* h2acw = new Node();
                value = current->string;
                //h2acw->pattern = 
                shift(4, 7, 9, 6, 3, 1, value);
                h2acw->string = value;
                h2acw->cw = false;
                h2acw->hexIndex = 1;
                h2acw->parent = current;
                
                if(!visited[value])
                {
                    queue.push_back(h2acw);
                    visited[value] = true;
                    //printString(h2acw->string);
                }
                
                Node* h2cw = new Node();
                value = current->string;
                //h2cw->pattern = 
                shift(1, 3, 6, 9, 7, 4, value);
                h2cw->string = value;
                h2cw->cw = true;
                h2cw->hexIndex = 1;
                h2cw->parent = current;
                
                if(!visited[value])
                {
                    queue.push_back(h2cw);
                    visited[value] = true;
                    //printString(h2cw->string);
                }
                
                Node* h3acw = new Node();
                value = current->string;
                //h3acw->pattern = 
                shift(9, 11, 12, 10, 8, 6, value);
                h3acw->string = value;
                h3acw->cw = false;
                h3acw->hexIndex = 2;
                h3acw->parent = current;
                
                if(!visited[value])
                {
                    queue.push_back(h3acw);
                    visited[value] = true;
                    //printString(h3acw->string);
                }
                
                Node* h3cw = new Node();
                value = current->string;
                //h3cw->pattern = 
                shift(6, 8, 10, 12, 11, 9, value);
                h3cw->string = value;
                h3cw->cw = true;
                h3cw->hexIndex = 2;
                h3cw->parent = current;
                
                if(!visited[value])
                {
                    queue.push_back(h3cw);
                    visited[value] = true;
                    //printString(h3cw->string);
                }
                
            }
            
            //solution or no solution
            if(solution)
            {
                int numRotations = 1;
                string result = "";
                char c[10];
                snprintf(c, sizeof(c),"%d", current->hexIndex);
                result += c;
                result += " ";
                result += (current->cw ? "1" : "0");
                result += "\n";
                //rewind the result
                Node* root = current->parent;
                if( root != NULL) //The input string is the solution
                {
                    while(root->parent != NULL) {
                        snprintf(c, sizeof(c),"%d", root->hexIndex);
                        string tempOut = c;
                        tempOut += " ";
                        tempOut += (root->cw ? "1" : "0");
                        tempOut += "\n";
                        //printString(root->string);
                        result = tempOut + result;
                        root = root->parent;
                        ++numRotations;
                    }
                }
                else
                    numRotations = 0;
                    
                //Write result to the output file
                cout << numRotations << "\n";
                if(numRotations > 0)
                    cout << result;
            }
            
            list<Node*>::iterator it = closed.begin();
            for(it; it != closed.end(); ++it)
            {
                visited[(*it)->string] = false;
                delete (*it);
            }
            
            for(it = queue.begin(); it != queue.end(); ++it)
            {
                visited[(*it)->string] = false;
                delete (*it);
            }    
        }
    
    for(int i = 0; i < numOfPuzzles; ++i)
    {
        delete[] puzzles[i];        
    }
    
    delete[] puzzles;
    
    return 0;
}


bool readInput() {
    
        string line = "";
         cin >> line;
            
        numOfPuzzles = atoi(line.c_str());
        puzzles = new int*[numOfPuzzles];
        
        int i = 0;
        while(i < numOfPuzzles)
        {
            cin >> line;
            puzzles[i] = new int[13];
            for(int j = 0; j < 13; ++j){
               puzzles[i][j] = (line[j] == '1' ? 1 : 0);
            }
            
            i++;
        }
        
    return true;    
}

void shift(int v0, int v1, int v2 , int v3 , int v4, int v5, int& string)
{
   int* puzzle = new int[13];
   int tempValue = string;
   for(int i = 0; i < 13; ++i) {
        puzzle[12-i] = tempValue%2;
        tempValue/=2;
   }
    
   // cout << "string before shift" << endl;
//printString(string);
   string = string - (puzzle[v0]*pow(2,(12-v0))) - (puzzle[v1]*pow(2,(12-v1))) - (puzzle[v2]*pow(2,(12-v2))) - (puzzle[v3]*pow(2,(12-v3))) - (puzzle[v4]*pow(2,(12-v4))) - (puzzle[v5]*pow(2,(12-v5)));
   string = string + (puzzle[v0]*pow(2,(12-v5))) + (puzzle[v1]*pow(2,(12-v0))) + (puzzle[v2]*pow(2,(12-v1))) + (puzzle[v3]*pow(2,(12-v2))) + (puzzle[v4]*pow(2,(12-v3))) + (puzzle[v5]*pow(2,(12-v4)));
   
   delete[] puzzle;
        
}