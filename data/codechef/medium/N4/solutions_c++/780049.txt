#define DEBUG 0
#define MAX_MOVES 20

#include <stdio.h>
#include <string.h>
#include <queue>
using namespace std;

typedef struct {
  bool s[13];
  int m;
  bool h[MAX_MOVES][2];
  bool dir[MAX_MOVES];
} node;

/*
 0 0
0 1 0
0 1 0
 1 1
 0 0
  0
*/

int solved(bool s[13]) {
  if(s[3]&&s[6]&&s[8]&&s[9])
    return 1;
  return 0;
}

void print(node n) {
  int i;
  printf("%d\n", n.m);
  for(i=0;i<n.m;i++)
    printf("%d %d\n", n.h[i][1]*2+n.h[i][0], n.dir[i]);
}

void bfs(bool s[13]) {
  queue<node> q;
  node n;
  int i;
  while(!q.empty())
    q.pop();
  n.m=0;
  for(i=0;i<13;i++)
    n.s[i]=s[i];
  if(solved(n.s)) {
    print(n);
    return;
  }
  q.push(n);

  while(!q.empty()) {
    n=q.front();
    q.pop();
    for(i=0;i<13;i++) {
      if(DEBUG)
	printf("%d", n.s[i]);
      s[i]=n.s[i];
    }
    if(DEBUG) {
      printf(" moves=%d\n", n.m);
      printf(" %d %d\n", n.s[0], n.s[1]);
      printf("%d %d %d\n", n.s[2], n.s[3], n.s[4]);
      printf("%d %d %d\n", n.s[5], n.s[6], n.s[7]);
      printf(" %d %d\n", n.s[8], n.s[9]);
      printf(" %d %d\n", n.s[10], n.s[11]);
      printf("  %d\n", n.s[12]);
    }
    n.m++;

    //upper left hexagon, counter clockwise
    n.h[n.m-1][1]=false;
    n.h[n.m-1][0]=false;
    n.dir[n.m-1]=false;
    for(i=0;i<13;i++)
      n.s[i]=s[i];
    n.s[0]=s[3];
    n.s[3]=s[6];
    n.s[6]=s[8];
    n.s[8]=s[5];
    n.s[5]=s[2];
    n.s[2]=s[0];
    if(solved(n.s)) {
      print(n);
      return;
    }
    q.push(n);
    
    //upper left hexagon, clockwise
    n.h[n.m-1][1]=false;
    n.h[n.m-1][0]=false;
    n.dir[n.m-1]=true;
    for(i=0;i<13;i++)
      n.s[i]=s[i];
    n.s[0]=s[2];
    n.s[3]=s[0];
    n.s[6]=s[3];
    n.s[8]=s[6];
    n.s[5]=s[8];
    n.s[2]=s[5];
    if(solved(n.s)) {
      print(n);
      return;
    }
    q.push(n);
    
    //upper right hexagon, counter clockwise
    n.h[n.m-1][1]=false;
    n.h[n.m-1][0]=true;
    n.dir[n.m-1]=false;
    for(i=0;i<13;i++)
      n.s[i]=s[i];
    n.s[1]=s[4];
    n.s[4]=s[7];
    n.s[7]=s[9];
    n.s[9]=s[6];
    n.s[6]=s[3];
    n.s[3]=s[1];
    if(solved(n.s)) {
      print(n);
      return;
    }
    q.push(n);
    
    //upper right hexagon, clockwise
    n.h[n.m-1][1]=false;
    n.h[n.m-1][0]=true;
    n.dir[n.m-1]=true;
    for(i=0;i<13;i++)
      n.s[i]=s[i];
    n.s[1]=s[3];
    n.s[4]=s[1];
    n.s[7]=s[4];
    n.s[9]=s[7];
    n.s[6]=s[9];
    n.s[3]=s[6];
    if(solved(n.s)) {
      print(n);
      return;
    }
    q.push(n);
    
    //lower hexagon, counter clockwise
    n.h[n.m-1][1]=true;
    n.h[n.m-1][0]=false;
    n.dir[n.m-1]=false;
    for(i=0;i<13;i++)
      n.s[i]=s[i];
    n.s[6]=s[9];
    n.s[9]=s[11];
    n.s[11]=s[12];
    n.s[12]=s[10];
    n.s[10]=s[8];
    n.s[8]=s[6];
    if(solved(n.s)) {
      print(n);
      return;
    }
    q.push(n);
    
    //lower hexagon, clockwise
    n.h[n.m-1][1]=true;
    n.h[n.m-1][0]=false;
    n.dir[n.m-1]=true;
    for(i=0;i<13;i++)
      n.s[i]=s[i];
    n.s[6]=s[8];
    n.s[9]=s[6];
    n.s[11]=s[9];
    n.s[12]=s[11];
    n.s[10]=s[12];
    n.s[8]=s[10];
    if(solved(n.s)) {
      print(n);
      return;
    }
    q.push(n);    
  }
}


int main(void) {
  int tc, i;
  char st[14];
  bool s[13];

  scanf("%d", &tc);
  while(tc--) {
    scanf("%s", &st);
    for(i=0;i<13;i++)
      if(st[i]=='0')
	s[i]=false;
      else
	s[i]=true;
    bfs(s);    
  }
  return 0;
}
