#include <iostream>
#include <cassert>
#include <queue>

using namespace std;

int mapid[] = {
  1, 3, 0, 2, 4, 5, 7, 9, 6, 8, 10, 12, 11
};

int sol[1<<13][2];
int dots[][6] = {
  {0, 1, 2, 7, 6, 5},
  {2, 3, 4, 9, 8, 7},
  {6, 7, 8, 12, 11, 10}
};

const int FINAL = 0x01C4;

int twist(int curr, int h[], int dir) {
  int add = (dir==0?1:5);
  int next = 0;
  for (int i = 0; i < 13; ++i) {
    int m, bit;
    for (m = 0; m < 6 && h[m] != i; ++m);

    if (m < 6) bit = (curr>>h[(m+add)%6])&1;
    else bit =  (curr>>i)&1;

    next |= (bit<<i);
  }
  return next;
}

int moves(int s) {
  int m = 0;
  while (s != FINAL) {
    s = twist(s, dots[sol[s][0]-1], 1-sol[s][1]);
    ++m;
  }
  return m;
}

void search() {
  queue<int> q;
  q.push(FINAL);
  
  sol[FINAL][0] = 1;
  
  int k = 0;
  while (!q.empty()) {
    int curr = q.front();

    q.pop();
    for (int i = 0; i < 3; ++i)
      for (int j = 0; j < 2; ++j) {
	int next = twist(curr, dots[i], j);
	if (sol[next][0]) continue;
	sol[next][0] = i+1;
	sol[next][1] = j;
	q.push(next);
      }
  }
}

int main() {
  search();

  for (int i = 0; i < (1<<13); ++i) {
    int hw = 0, tmp = i;
    while (tmp) {
      tmp &= (tmp-1);
      ++hw;
    }
    assert(hw != 4 || sol[i][0] != 0);
  }

  int t, s;
  cin >> t;
  while (t--) {
    s = 0;
    for (int i = 0; i < 13; ++i) {
      char tmp;
      cin >> tmp;
      if (tmp == '1') s |= (1<<mapid[i]);
    }

    int k = 0;
    cout << moves(s) << endl;
    while (s != FINAL && ++k < 10) {
      cout << sol[s][0]-1 << ' ' << 1-sol[s][1] << endl;
      s = twist(s, dots[sol[s][0]-1], 1-sol[s][1]);
    }
  }
}
