//#include<iostream>
#include<stdio.h>
#include<string.h>
//#include<string>
#include<algorithm>
//#include<stdlib.h>
//#include<cmath>
//#include<vector>
//#include<list>
//#include<map>
#define ll long long
#define N 100006
#define inf (1000000000)
#define mp make_pair
#define pb push_back
#define X first
#define Y second
//using namespace std;
#define M 715
char puzzle[14];
int b[]={1,2,4,8,16,32,64,128,256,512,1024,2048,4096};
int move[6][7]={{10,12,9,6,4,7,10},{10,7,4,6,9,12,10},{5,3,6,9,11,8,5},
{5,8,11,9,6,3,5},
{4,6,3,1,0,2,4},
{4,2,0,1,3,6,4}};
int state[M],p[M],path[M];
const int goal=0x258;
int getchild(int mov,int parent)
{
 int i,child=parent;
 for(i=0;i<6;i++)
 {
  if((parent&b[move[mov][i+1]])!=0)
  child|=b[move[mov][i]];
  else child&=(~b[move[mov][i]]);
 }
 return child;
}
int count;
int findindex(int child)
{
 for(int i=count-1;i>=0;i--)
 if(state[i]==child)return i;
 return -1;
}
void init()
{
 int ptr,child,mov;
 count=1;ptr=0;
 state[0]=goal;
 while(ptr<count)
 {
  for(mov=0;mov<6;mov++)
  {
   	child=getchild(mov,state[ptr]);
   	if(findindex(child)==-1)
   	{
   	 state[count]=child;
   	 p[count]=ptr;
   	 path[count++]=mov^0x1;
	}
  }
  ptr++;
 }
}
int convert(char puzzle[])
{
 int state=0,i;
 for(i=0;i<13;i++)
 if(puzzle[i]=='1')state|=b[13-i-1];
 return state;
}
void findpath(int state)
{
 int i=0,j,way[12],index=findindex(state);
 while(index!=0)
 {
  way[i++]=path[index];
  index=p[index];
 }
 printf("%d\n",i);
 for(j=0;j<i;j++)
 printf("%d %d\n",way[j]>>1,way[j]%2);
}
int main()
{
  //freopen("in.txt","r",stdin);
  init();
  int t;
  scanf("%d",&t);
  while(t--)
  {
   scanf("%s",puzzle);
   findpath(convert(puzzle));
  }
  return 0;
}
