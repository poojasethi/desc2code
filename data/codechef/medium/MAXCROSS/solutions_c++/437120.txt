//zanjeer sone di- karan jasbir & honey singh
#include <iostream>
#include <cstdio>
#include <cstring>

using namespace std;

int n;
int grid[1000][1000];
int ans[1000][1000];

void solveRow(){
    for(int i = 0; i < n; i++){
        int j = 0;
        while(j < n){
            while(j < n && grid[i][j] == 0 )  j++;
            int count = 0;
            int index = j;
            while(index < n && grid[i][index] == 1 ){count++;index++;}
            for(int k = j; k < index; k++)
                ans[i][k] = max(count, ans[i][k]);
            j = index;
        }
    }
}

void solveCol(){
    for(int j = 0; j < n; j++){
        int i = 0;
        while(i < n){
            while(i < n && grid[i][j] == 0 )  i++;
            int count = 0;
            int index = i;
            while(index < n && grid[index][j] == 1 ){count++;index++;}
            for(int k = i; k < index; k++)
                ans[k][j] = max(count, ans[k][j]);
            i = index;
        }
    }
}

void solveD1(){
    for(int k = n-1; k >= 0; k--){
        int j = (n-1) - k;
        int i = n-1;
        while(j >= 0){
            while(j >= 0 && grid[i][j] == 0 ){i--;j--;}
            int count = 0;
            int i1 = i, j1 = j;
            while(j1 >=0 && grid[i1][j1] == 1 ){count++;i1--;j1--;}
            while(j > j1){
                ans[i][j] = max(count, ans[i][j]);
                i--;j--;
            }
        }
    }
    for(int k = 0; k < n-1; k++){
        int j = (n-1) - k;
        int i = 0;
        while(j < n){
            while(j < n && grid[i][j] == 0 ){i++;j++;}
            int count = 0;
            int i1 = i, j1 = j;
            while(j1 < n && grid[i1][j1] == 1 ){count++;i1++;j1++;}
            while(j < j1){
                ans[i][j] = max(count, ans[i][j]);
                i++;j++;
            }
        }
    }
}

void solveD2(){
    for(int k = 0; k < n; k++){
        int j = 0;
        int i = k;
        while(i >= 0){
            while(i >= 0 && grid[i][j] == 0 ){i--;j++;}
            int count = 0;
            int i1 = i, j1 = j;
            while(i1 >=0 && grid[i1][j1] == 1 ){count++;i1--;j1++;}
            while(i > i1){
                ans[i][j] = max(count, ans[i][j]);
                i--;j++;
            }
        }
    }

    for(int k = n-1; k >= 0; k--){
        int j = (n-1);
        int i = k;
        while(i < n){
            while(i < n && grid[i][j] == 0 ){i++;j--;}
            int count = 0;
            int i1 = i, j1 = j;
            while(i1 < n && grid[i1][j1] == 1 ){count++;i1++;j1--;}
            while(i < i1){
                ans[i][j] = max(count, ans[i][j]);
                i++;j--;
            }
        }
    }
}

int main(){
    //freopen("input.txt", "r", stdin);
    char s[1001];
    scanf("%d", &n);

    for(int i = 0; i < n; i++){
        scanf("%s", s);
        for(int j = 0; j < n; j++)
            grid[i][j] = ((s[j] == 'X') ? 1:0);
    }
    solveRow();
    solveCol();
    solveD1();
    solveD2();

    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            printf("%d ", ans[i][j]);
        }
        printf("\n");
    }
}
