#include <cstdio>
#include <algorithm>

using namespace std;

const int maxN = 1100;
const int NO_RUN = -maxN;

char a[maxN][maxN];
int b[maxN][maxN];

int main()
{
	int n;

	fill(&a[0][0], &a[0][0]+sizeof(a), '.');

	scanf("%d", &n);
	for (int i=1; i<=n; i++) {
		scanf("%s", &a[i][1]);
	}
	
	// scan rows
	for (int row=1; row<=n; row++) {
		int start = NO_RUN;
		int run = 0;
		for (int col=1; col<=n+1; col++) {
			if (a[row][col]=='X') {
				run++;
				if (start==NO_RUN) {
					start = col;
				}
			} else {
				if (start!=NO_RUN) {
					for (int c1=start; c1<col; c1++) {
						b[row][c1] = max(b[row][c1], run);
					}
					start = NO_RUN;
					run = 0;
				}
			}
		}
	}

	// scan columns
	for (int col=1; col<=n; col++) {
		int start = NO_RUN;
		int run = 0;
		for (int row=1; row<=n+1; row++) {
			if (a[row][col]=='X') {
				run++;
				if (start==NO_RUN) {
					start = row;
				}
			} else {
				if (start!=NO_RUN) {
					for (int r1=start; r1<row; r1++) {
						b[r1][col] = max(b[r1][col], run);
					}
					start = NO_RUN;
					run = 0;
				}
			}
		}
	}



	// scan first diagonal,  r+c==CONST
	for (int rc=2; rc<=2*n; rc++) {
		int start = NO_RUN;
		int run = 0;
		for (int row=max(1,rc-n-1); row<=min(rc,n+1); row++) {
			int col = rc-row;
			if (a[row][col]=='X') {
				run++;
				if (start==NO_RUN) {
					start = row;
				}
			} else {
				if (start!=NO_RUN) {
					for (int r1=start; r1<row; r1++) {
						int c1 = rc-r1;
						b[r1][c1] = max(b[r1][c1], run);
					}
					start = NO_RUN;
					run = 0;
				}
			}
		}
	}


	// scan second diagonal, r-c = CONST
	for (int rc=-n; rc<=n; rc++) {
		int start = NO_RUN;
		int run = 0;
		for (int row=max(1,rc); row<=min(rc+n+1,n+1); row++) {
			int col = row-rc;
			if (a[row][col]=='X') {
				run++;
				if (start==NO_RUN) {
					start = row;
				}
			} else {
				if (start!=NO_RUN) {
					for (int r1=start; r1<row; r1++) {
						int c1=r1-rc;
						b[r1][c1] = max(b[r1][c1], run);
					}
					start = NO_RUN;
					run = 0;
				}
			}
		}
	}



	for (int row=1; row<=n; row++) {
		int start = NO_RUN;
		int run = 0;
		for (int col=1; col<=n+1; col++) {
			if (a[row][col]=='X') {
				run++;
				if (start==NO_RUN) {
					start = col;
				}
			} else {
				if (start!=NO_RUN) {
					for (int c1=start; c1<col; c1++) {
						b[row][c1] = max(b[row][c1], run);
					}
					start = NO_RUN;
					run = 0;
				}
			}
		}
	}

	for (int row=1; row<=n; row++) {
		for (int col=1; col<=n; col++) {
			printf("%d ", b[row][col]);
		}
		printf("\n");
	}

	return 0;

}





