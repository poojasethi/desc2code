#include <cstdio>
#include <cstdlib>
#include <cstring>
using namespace std;
const unsigned int N=1000;

int hdp1[N+2][N+2];
int hdp2[N+2][N+2];
int vdp1[N+2][N+2];
int vdp2[N+2][N+2];
int ldp1[N+2][N+2];
int ldp2[N+2][N+2];
int rdp1[N+2][N+2];
int rdp2[N+2][N+2];

char board[N][N+5];
char buf[16];

int main()
{
    int n, max, v;
    fgets(buf, 16, stdin);
    n = atoi(buf);
    for(int i=0; i<n; i++)
        fgets(board[i], N+5, stdin);

    for(int i=n; i>=1; i--)
        for(int j=n; j>=1; j--)
            if (board[i-1][j-1] == 'X')
            {
                hdp2[i][j] = hdp2[i][j+1] + 1;
                vdp2[i][j] = vdp2[i+1][j] + 1;
                ldp2[i][j] = ldp2[i+1][j+1] + 1;
                rdp2[i][j] = rdp2[i+1][j-1] + 1;
            }

    for(int i=1; i<=n; i++)
    {
        for(int j=1; j<=n; j++)
        {
            if (board[i-1][j-1] == 'X')
            {
                hdp1[i][j] = hdp1[i][j-1] + 1;
                max = hdp1[i][j] + hdp2[i][j] - 1;

                vdp1[i][j] = vdp1[i-1][j] + 1;
                if (max < (v = vdp1[i][j] + vdp2[i][j] - 1))
                    max = v;

                ldp1[i][j] = ldp1[i-1][j-1] + 1;
                if (max < (v = ldp1[i][j] + ldp2[i][j] - 1))
                    max = v;

                rdp1[i][j] = rdp1[i-1][j+1] + 1;
                if (max < (v = rdp1[i][j] + rdp2[i][j] - 1))
                    max = v;
                printf("%d ", max);
            }
            else
                printf("0 ");
        }
        printf("\n");
    }
    return 0;
}
