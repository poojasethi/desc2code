//problema A
#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <numeric>
#include <utility>
 
#include <deque>
#include <stack>
#include <bitset>
#include <map>
#include <set>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <list>
 
#include <sstream>
#include <iostream>
#include <iomanip>
 
using namespace std;
 
typedef long long int64;
 
#define forn(i, n) for(int64 i = 0; i < (int)(n); i++)
#define fore(i, a, n) for(int64 i = a; i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) (a).size()
#define all(a) a.begin(), a.end()
#define VI vector<int>
#define PII vector<pair<int,int> >
#define iss istringstream //>>
#define MAX 1005
#define MOD 1000000007
const long double EPS = 1E-9;
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double PI = 2 * acos(.0);

bool mark[MAX][MAX][4];
int B[MAX][MAX];
char A[MAX][MAX];
int main(){
	int n ;
	cin >> n;
	forn(i, n) {
		scanf("%s", A[i]);
		forn(j, n){	
			B[i][j] = 0;
			forn(k, 4) mark[i][j][k] = false;
		}
	}
	/*forn(i, n) {
		forn(j, n) cout << A[i][j] << " " ;
		cout << endl;
	}*/
	int tmp = 0 , r ,c;
	forn(i, n){	
		forn(j, n){
			if(A[i][j] == 'X'){
				if(!mark[i][j][0]){
					c = 1;
					tmp = 1;
					while(j + c < n && A[i][j + c] == 'X'){ tmp ++; c++;}
					c --;
					while(c >= 0) {
						B[i][j + c] = max(tmp, B[i][j + c]);
						mark[i][j + c][0] = true;
						c--;
					}
					//cout << i << " " << j << " " << B[i][j] << endl;
				}
				if(!mark[i][j][1]){
					c = 1;
					tmp = 1;
					while(i + c < n && A[i + c][j] == 'X'){ tmp ++; c++;}
					c --;
					while(c >= 0) {
						B[i + c][j] = max(tmp, B[i + c][j]);
						mark[i + c][j][1] = true;
						c--;
					}
				}
				if(!mark[i][j][2]){
					c = 1;
					r = 1;
					tmp = 1;
					while(j + c < n && i + r < n && A[i+r][j + c] == 'X'){tmp ++; c++; r++;}
					c --;
					r--;
					while(c >= 0) {
						B[i + r][j + c] = max(tmp, B[i + r][j + c]);
						mark[i + r][j + c][2] = true;
						c--;
						r--;
					}
				}
				if(!mark[i][j][3]){
					c = 1;
					r = 1;
					tmp = 1;
					while(j - c >=0 && i + r < n && A[i+r][j - c] == 'X'){tmp ++; c++; r++;}
					c --;
					r--;
					while(c >= 0) {
						B[i + r][j - c] = max(tmp, B[i + r][j - c]);
						mark[i + r][j - c][3] = true;
						c--;
						r--;
					}
				}
			}
			 printf("%d " , B[i][j]);
		}
		printf("\n");
	}
	return 0;
}
