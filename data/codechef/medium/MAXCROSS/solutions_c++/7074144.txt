#include <bits/stdc++.h>

#define FILE        0
#define INPUT       "input"
#define OUTPUT      "output"

#define MP          make_pair
#define MT          make_tuple
#define PB          push_back
#define FI          first
#define SE          second

#define MAX_GRID    int(30)
#define MAX         int( 1100000 )
#define MAXN        int( 1100 )
#define MAXC        int(12000)
#define INF         INT_MAX
#define EPS         int(1e-7)
#define MOD         int(1e7+7)
#define PI          acos(-1)

#define ll          long long

using namespace std;

int N;
char board[ MAXN ][ MAXN ];

int main( ) {

    if( FILE & 1 ) freopen( INPUT , "r", stdin  );
    if( FILE & 2 ) freopen( OUTPUT, "w", stdout );

    scanf( "%d", &N );
    for( int i = 0; i < N; i++ )
        scanf( "%s", board[ i ] );
    for( int i = 0; i < N; i++ ) {
        for( int j = 0; j < N; j++ ) {
            int ans = 0, cur;
            if( board[ i ][ j ] == 'X' ) {
                cur = -1;
                for( int x = i; x < N  && board[ x ][ j ] == 'X'; x++ ) cur++;
                for( int x = i; x >= 0 && board[ x ][ j ] == 'X'; x-- ) cur++;
                ans = max( ans, cur );
                cur = -1;
                for( int y = j; y < N  && board[ i ][ y ] == 'X'; y++ ) cur++;
                for( int y = j; y >= 0 && board[ i ][ y ] == 'X'; y-- ) cur++;
                ans = max( ans, cur );
                cur = -1;
                for( int x = i, y = j; x < N  && y >= 0 && board[ x ][ y ] == 'X'; x++, y-- ) cur++;
                for( int x = i, y = j; x >= 0 && y < N  && board[ x ][ y ] == 'X'; x--, y++ ) cur++;
                ans = max( ans, cur );
                cur = -1;
                for( int x = i, y = j; x < N  && y < N  && board[ x ][ y ] == 'X'; x++, y++ ) cur++;
                for( int x = i, y = j; x >= 0 && y >= 0 && board[ x ][ y ] == 'X'; x--, y-- ) cur++;
                ans = max( ans, cur );
            }
            if( j ) printf( " " );
            printf( "%d", ans );
        }
        printf( "\n" );
    }

    return 0;
}
