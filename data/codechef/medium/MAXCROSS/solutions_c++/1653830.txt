#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <stdarg.h>
#include <cassert>
#include <fstream>

using namespace std;

//make macros available for redefinition.
#undef LOCAL
#undef DEBUG
#undef CONSOLE
#undef INFILE
#undef OUTFILE

#define LOCAL

#ifdef LOCAL
#define INFILE
//#define DEBUG
#define CONSOLE
//#define OUTFILE
#endif

#ifdef ONLINE_JUDGE //enough for codechef and codeforces
#undef LOCAL
#undef INFILE
#undef OUTFILE
#undef CONSOLE
#undef DEBUG
#endif
//otherwise uncomment following lines
/*
#undef LOCAL
#undef INFILE
#undef OUTFILE
#undef CONSOLE
#undef DEBUG
*/


#ifdef LOCAL
#define getcha getchar
#endif
#ifndef LOCAL
#ifdef _MSC_VER
#define getcha getchar
#else
#define getcha getchar_unlocked
#endif
#endif

#define ll long long

#define PR(id) printf("The value of " #id " is %d\n", id)
#define glue(a,b) a ## b

#ifdef CONSOLE
#include<conio.h>
#endif

int scan() {
	int t = 0;
	char c = getcha();
	while(c<'0' || c>'9') c = getcha();
	while(c>='0' && c<='9') {
		t = 10 * t + c - 48;
		c = getcha();
	}
	return t;
}

ll scanl() {
	ll t=0;
	char c = getcha();
	while(c<'0' || c>'9') c = getcha();
	while(c>='0' && c<='9') {
		t = 10 * t + c - 48;
		c = getcha();
	}
	return t;
}

/* ADD PROGRAM LOGIC HERE */

char board[1002][1002];
int c[8][1002][1002];

void go() {
	int n;
	scanf("%d",&n);
	//getline(cin,board[0]);
	gets(board[0]);
	for(int i=1; i<=n; i++) {
		//getline(cin,board[i]);
		//board[i]= " "+board[i];
		gets(board[i]+1);
	}
	for(int i=1; i<=n; i++) {
		for(int j=1; j<=n; j++) {
			if(board[i][j]=='.') continue;
			c[0][i][j] = c[0][i-1][j-1]+1;
			c[1][i][j] = c[1][i-1][j]+1;//editorial is wrong
			c[2][i][j] = c[2][i-1][j+1]+1;
			c[7][i][j] = c[7][i][j-1]+1;
		}
	}
	for(int i=n; i>0; i--) {
		for(int j=n; j>0; j--) {
			if(board[i][j]=='.') continue;
			c[3][i][j] = c[3][i][j+1]+1;
			c[4][i][j] = c[4][i+1][j+1]+1;
			c[5][i][j] = c[5][i+1][j]+1;
			c[6][i][j] = c[6][i+1][j-1]+1;
		}
	}
	for(int i=1; i<=n; i++) {
		for(int j=1; j<=n; j++) {
			int a=0;
			if(board[i][j]!='.') {
				a = max(c[0][i][j]+c[4][i+1][j+1],c[1][i][j]+c[5][i+1][j]);
				a = max(a,c[2][i][j]+c[6][i+1][j-1]);
				a = max(a,c[3][i][j]+c[7][i][j-1]);
			}
			printf("%d ",a);
		}
		printf("\n");
	}
}	

/*  */

int main() {

#ifdef INFILE
	freopen("in.txt","r",stdin);
#endif
#ifdef OUTFILE
	freopen("out.txt","w",stdout);
#endif

	//call function here.
	go();


#ifdef DEBUG
	printf("\nEND\n");
#endif
#ifdef CONSOLE
	_getch();
#endif

	return 0;
}