/* 
 * File:   main.cpp
 * Author: jom
 *
 * Created on 3 de julio de 2010, 20:41
 */

#include <iostream>
#include <vector>
#include <sstream>
#include <cstring>
//
#define pb push_back

using namespace std;

/*
 * 
 */

//vector<string> vs;
char vs[1300][1300];
int B[1001][1001];
int visited[1001][1001];
int n;

int sumarh(int i, int j, int sum){
	if(j < n){
			if (vs[i][j] != 'X') {
				return sum;
			}
	}else return sum;
	
	sum = sumarh(i, j+1, sum+1);
	if (sum > B[i][j]) {
		B[i][j] = sum;
	}
	
	return sum;
}


int sumarv(int i, int j, int sum){
	if(i < n){
		if (vs[i][j] != 'X') {
			return sum;
		}
	}else return sum;
	
	sum = sumarv(i+1, j, sum+1);
	if (sum > B[i][j]) {
		B[i][j] = sum;
	}
	
	return sum;
}


int sumard(int i, int j, int sum){
	if(i >= n || j >= n) return sum;
	
		if (vs[i][j] != 'X') 
			return sum;
	sum = sumard(i+1, j+1, sum+1);
	if (sum > B[i][j]) {
		B[i][j] = sum;
	}
	visited[i][j] = true;
	return sum;
}

int sumardd(int i, int j, int sum){
	if(i >= n || j < 0) return sum;
	if (vs[i][j] != 'X') 
		return sum;
	sum = sumardd(i+1, j-1, sum+1);
	if (sum > B[i][j]) {
		B[i][j] = sum;
	}
	visited[i][j] = true;
	return sum;
}

int main(int argc, char** argv) {

   // char c[1001];
    cin >> n;
    cin.ignore();
    memset(B, 0, sizeof(B));
	memset(visited, false, sizeof(visited));
    for(int i = 0; i < n; i++){
        //cin.getline(c,1002);
		scanf("%s",vs[i]);
		//vs.pb(c);
    }	
	
/*
 * Solve Problem starts
 */
	//Check for Horizontal
	for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
			if(vs[i][j] != 'X') continue;
			
			int sum = sumarh(i,j+1,1);
			if(sum > B[i][j]) B[i][j] = sum;
			j += sum;
			
		}
            
    }
	
	//Check for vertical
	for(int j = 0; j < n; j++){
        for(int i = 0; i < n; i++){
			if(vs[i][j] != 'X') continue;
			
			int sum = sumarv(i+1,j,1);
			if(sum > B[i][j]) B[i][j] = sum;
			i += sum;
			
		}
		
    }
	
	//Check for diagonal derecha
	for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
			if(vs[i][j] != 'X') {
				visited[i][j] = true;	
				continue;
			}
			if (visited[i][j]) continue;
			
			int sum = sumard(i+1,j+1,1);
			if(sum > B[i][j]) B[i][j] = sum;
			//j += sum;
			
		}
		
    }
	
	
	//Check for diagonal izquierda
	memset(visited, false, sizeof(visited));
	
	for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
			if(vs[i][j] != 'X') {
				visited[i][j] = true;	
				continue;
			}
			if (visited[i][j]) continue;
			
			int sum = sumardd(i+1,j-1,1);
			if(sum > B[i][j]) B[i][j] = sum;
			//j += sum;
			
		}
		
    }
	
	
/*
 * PRINT ANSWER
 */
	
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) 
				printf("%d ", B[i][j]);
		printf("\n");
	
	}
		
	
	return 0;	
    
}
