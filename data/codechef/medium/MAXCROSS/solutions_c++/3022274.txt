#include <bits/stdc++.h>

using namespace std;

#define 	pii 	pair<int, int>
#define 	pb 		push_back
#define 	s(e)	scanf("%d", &e)

char grid[1000][1000];

short int dpl[1000][1000];
short int dpr[1000][1000];
short int dpu[1000][1000];
short int dpd[1000][1000];
short int dpde[1000][1000];
short int dpue[1000][1000];
short int dpuw[1000][1000];
short int dpdw[1000][1000];
short int B[1000][1000];

int n;

void f();
void g();
void construct();

int main()
{
	s(n);

	for (int i = 0; i < n; i++) {
		scanf("%s", grid[i]);
	}

	g();
	f();

	construct();

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			printf("%d ", B[i][j]);
		}
		printf("\n");
	}
}

void construct()
{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (grid[i][j] == 'X') {
				int maximum = 0;

				int horizontal = dpl[i][j] + dpr[i][j] - 1;
				int vertical = dpu[i][j] + dpd[i][j] - 1;
				maximum = max(horizontal, vertical);

				int diagonal1 = dpuw[i][j] + dpde[i][j] - 1;
				maximum = max(maximum, diagonal1);

				int diagonal2 = dpue[i][j] + dpdw[i][j] - 1;
				maximum = max(maximum, diagonal2);

				B[i][j] = maximum;
			}
		}
	}
}

void g()
{
	for (int j = 0; j < n; j++) {
		if (grid[0][j] == 'X') 
			dpuw[0][j] = dpue[0][j] = dpu[0][j] = 1;
		
		if (grid[j][0] == 'X') 
			dpuw[j][0] = dpdw[j][0] = dpl[j][0] = 1;
		
		if (grid[n-1][j] == 'X') 
			dpdw[n-1][j] = dpde[n-1][j] = dpd[n-1][j] = 1;
		
		if (grid[j][n-1] == 'X') 
			dpue[j][n-1] = dpde[j][n-1] = dpr[j][n-1] = 1;
		
	}

	// dpuw[i][j] = contigous X's in upper west diagonal
	for (int i = 1; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (j != 0) if (grid[i][j] == 'X') dpuw[i][j] = dpuw[i-1][j-1] + 1;
			if (j != n-1) if (grid[i][j] == 'X') dpue[i][j] = dpue[i-1][j+1] + 1;
		}
	}


	// dpdw[i][j] = contigous X's in down west diagonal
	for (int i = n-2; i >= 0; i--) {
		for (int j = 1; j < n; j++) {
			if (grid[i][j] == 'X') dpdw[i][j] = dpdw[i+1][j-1] + 1;
		}
	}


	// dpde[i][j] = contigous X's in down east diagonal
	for (int i = n-2; i >= 0; i--) {
		for (int j = n-2; j >= 0; j--) {
			if (grid[i][j] == 'X') dpde[i][j] = dpde[i+1][j+1] + 1;
		}
	}

}

void f()
{
	for (int i = 0; i < n; i++) {
		for (int j = 1; j < n; j++) {
			if (grid[i][j] == 'X') dpl[i][j] = dpl[i][j-1] + 1;
			if (grid[j][i] == 'X') dpu[j][i] = dpu[j-1][i] + 1;
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = n-2; j >= 0; j--) {
			if (grid[i][j] == 'X') dpr[i][j] = dpr[i][j+1] + 1;
			if (grid[j][i] == 'X') dpd[j][i] = dpd[j+1][i] + 1;
		}
	}
}