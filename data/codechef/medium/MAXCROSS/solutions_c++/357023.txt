#include<iostream>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>
#include<malloc.h>
#include<vector>
#include<algorithm>
#include<stack>
#include<queue>
#include<list>


#define min(a,b) (a>b?b:a)
#define max(a,b) (a>b?a:b)


using namespace std;

char inp[10000000];
char *ptr;

inline long long SCAN_INT(void)
{
    while(!(*ptr<='9' && *ptr>='0'))
        ptr++;
    long long ret=0;
    while(*ptr<='9' && *ptr>='0')
        ret=ret*10+(*(ptr++))-'0';
    return ret;
}

inline char SCAN_CHAR(void)
{
    while(!(*ptr<='Z' && *ptr>='A') && !(*ptr<='9' && *ptr>='0')  && *ptr!='.')
        ptr++;
    return *ptr++;
}
/////////////////////////////////////////////////////
#define C(k,i,j) ((i>=0 && j>=0 && i<n && j<n)?c[k][i][j]:0)
int n;
char arr[1000][1000];
int ans[1000][1000];
int c[8][1000][1000];

inline int maximum(int a,int b,int c,int d)
{
    int t1,t2;
    t1=max(a,b);
    t2=max(c,d);
    return max(t1,t2);
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r", stdin);
    #endif
	fread(inp, sizeof(char), 10000000, stdin);
	ptr = inp;
	n=SCAN_INT();
	for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            arr[i][j]=SCAN_CHAR();
        }
    }
    //2-north,3-north east,4-east,5-south-e,6-s,7-south-west,0-wes,1-north-w
    //0,1,2,3
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<n ; j++){
                if(arr[i][j]=='.')
                    for(int k=0 ; k<8 ; k++)
                        c[k][i][j]=0;
                else{
                    c[0][i][j]=C(0,i,j-1) + 1;
                    c[1][i][j]=C(1,i-1,j-1) + 1;
                    c[2][i][j]=C(2,i-1,j) + 1;
                    c[3][i][j]=C(3,i-1,j+1) + 1;
                }
            }
        }
    //4,5,6,7
        for(int i=n-1 ; i>=0 ; i--){
            for(int j=n-1 ; j>=0 ; j--){
                if(arr[i][j]=='.')
                    continue;
                else{
                    c[4][i][j]=C(4,i,j+1) + 1;
                    c[5][i][j]=C(5,i+1,j+1) + 1;
                    c[6][i][j]=C(6,i+1,j) + 1;
                    c[7][i][j]=C(7,i+1,j-1) + 1;
                }
            }
        }
    //ans
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<n ; j++){
                if(arr[i][j]=='.'){
                    ans[i][j]=0;
                    printf("%d ",ans[i][j]);
                    continue;
                }
                int e,f,g,h;
                e = c[0][i][j] + c[4][i][j] - 1;
                f = c[1][i][j] + c[5][i][j] - 1;
                g = c[2][i][j] + c[6][i][j] - 1;
                h = c[3][i][j] + c[7][i][j] - 1;
                ans[i][j]=maximum(e,f,g,h);
                printf("%d ",ans[i][j]);
            }
            printf("\n");
        }
}
