/****************************************************************
   â��â��    â��â��       â��â��â��â��â��â��â��â��â��    â��â��â��â��â��â��â��â��â��  â��â��  â��â��â��â��â��â��â��â��â��â��â��
  â��â��â��    â��â��â��     â��â��â��    â��â��â��   â��â��â��    â��â��â�� â��â��â��    â��â��â��    â��â��â��
  â��â��â��    â��â��â��     â��â��â��    â��â��â��   â��â��â��    â��â��  â��â��â��   â��â��â��    â��â��â��
 â��â��â��â��â��â��â��â��â��â��â��â��â��   â��â��â��    â��â��â��   â��â��â��        â��â��â��  â��â��â��â��â��â��â��â��â��â��
â��â��â��â��â��â��â��â��â��â��â��â��â��  â��â��â��â��â��â��â��â��â��â��â��â�� â��â��â��â��â��â��â��â��â��â��â��â�� â��â��â�� â��â��â��â��â��â��â��â��â��â��â��
  â��â��â��    â��â��â��     â��â��â��    â��â��â��          â��â��â�� â��â��â��    â��â��â��    â��â��â��
  â��â��â��    â��â��â��     â��â��â��    â��â��â��    â��â��    â��â��â�� â��â��â��    â��â��â��    â��â��â��
  â��â��â��    â��â��      â��â��â��    â��â��   â��â��â��â��â��â��â��â��â��â��  â��â��   â��â��â��â��â��â��â��â��â��â��â��
****************************************************************/
 
 
 
#include<bits/stdc++.h>
 
 
#define FOR(i, s, e) for(int i=s; i<e; i++)
#define loop(i, n) FOR(i, 0, n)
#define sf scanf
#define pf printf
#define pb push_back
#define MP make_pair
#define fr first
#define sc second
#define ll long long
#define dd double
#define all(v) v.begin(), v.end()
#define PI acos(-1.0)
#define mem(ara, value) memset(ara, value, sizeof(ara))
#define paii pair<int, int>
#define pall pair<ll, ll>
#define SZ(a) int(a.size())
#define read(nm) freopen(nm, "r", stdin)
#define write(nm) freopen(nm, "w", stdout)
 
#define take(args...) asdf,args
#define dump(x) cerr<<#x<<" = "<<x<<endl
#define debug(args...) cerr,args; cerr<<endl;
using namespace std;
 
 
template<typename T>
ostream& operator<<(ostream& output, vector<T>&v)
{
    output<<"[ ";
    if(SZ(v))
    {
        output<<v[0];
    }
    FOR(i, 1, SZ(v))
    {
        output<<", "<<v[i];
    }
    output<<" ]";
    return output;
}
 
template<typename T1, typename T2>
ostream& operator<<(ostream& output, pair<T1, T2>&p)
{
    output<<"( "<<p.fr<<", "<<p.sc<<" )";
    return output;
}
 
 
 
 
template<typename T>
ostream& operator,(ostream& output, T x)
{
    output<<x<<" ";
    return output;
}
 
 
 
struct ASDF{
    ASDF& operator,(int &a) {
        sf("%d", &a);
        return *this;
    }
    ASDF& operator,(long int &a){
        sf("%ld", &a);
        return *this;
    }
    ASDF& operator,(long long int &a){
        sf("%lld", &a);
        return *this;
    }
    ASDF& operator,(char &c){
        sf("%c", &c);
        return *this;
    }
    ASDF& operator,(double &d){
        sf("%lf", &d);
        return *this;
    }
 
    template<typename T>
    ASDF& operator,(T &a){
        cin>>a;
        return *this;
    }
}asdf;
 
 
 
//Header ends here
 
 
 
vector<int>primes;
 
void generatePrimes()
{
	int N = sqrt(1e9) + 7;
 
	int root = sqrt(N) + 7;
 
	bool isPrime[N];
 
	mem(isPrime, 1);
 
	for(int i=3; i<root; i+=2)
	{
		if(isPrime[i])
		{
			for(int j=i*i; j<N; j+=(2*i) )
			{
				isPrime[j] = false;
			}
		}
	}
 
	primes.pb(2);
 
	for(int i=3; i<N; i+=2)
	{
		if(isPrime[i])
		{
			primes.pb(i);
		}
	}
}
 
 
 
 
 
 
ll solve(ll N)
{
	ll ret = 1;
 
	int root = sqrt(N) + 7;
 
	for(int i=0; i<SZ(primes) && primes[i] <= root; i++)
	{
		if( (N % primes[i]) == 0 )
		{
			ll tmp = primes[i];
 
			while( (N % primes[i] ) == 0)
			{
				tmp *= primes[i];
 
				N /= primes[i];
 
				//dump(tmp);
			}
 
			root = sqrt(N);
 
			ret *= ((tmp - 1)/(ll)(primes[i]-1));
		}
	}
 
 
	if(N != 1)
	{
		ret *= (N+1);
	}
 
 
	return ret;
 
 
 
}
 
 
int main()
{
	generatePrimes();
 
	int kases;
 
	ll N;
 
	cin>>kases;
 
	while(kases--)
	{
		cin>>N;
 
		cout<<solve(N)<<endl;
	}
 
 
 
} 