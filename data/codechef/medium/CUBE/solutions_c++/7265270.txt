#include <stdio.h>
#include <stdlib.h>
#include <string.h>

class cube_cake {
	private:
		int N, P, S, NLM, res_len;
		char Sa[65536], Sb[65536];
		int ***num_matches;
		char res[64][64];
		int find_match(int,int,int,int);
	public:
		void init_res(int, int);
		void record_input();
		void find_matches();
		void save_result();
		void print_results(int);
};

void cube_cake::record_input()
{
	int i, j, k;

	scanf("%d %d", &N, &P);
	scanf("%s", Sa);
	scanf("%s", Sb);
//printf("\n\n =========== INPUTS REGISTERED =========== \n\n");
//printf("\n\n N = %d, P = %d, Sa = %s, Sb = %s \n\n", N, P, Sa, Sb);

	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			for (k = 1; k <= N; k++)
			{
				num_matches[i][j][k] = num_matches[i-1][j][k] + num_matches[i][j-1][k] - num_matches[i-1][j-1][k]
					+ (num_matches[i][j][k-1] - num_matches[i-1][j][k-1] - num_matches[i][j-1][k-1]
					+ num_matches[i-1][j-1][k-1]);
				num_matches[i][j][k] += ((Sa[(i-1)*N*N + (j-1)*N + (k-1)] == Sb[(i-1)*N*N + (j-1)*N + (k-1)])) ? 1 : 0;
			}
		}
	}
//printf("\n\n =========== INPUTS RECORDED =========== %d %c %c\n\n", num_matches[N][N][N], Sa[N*N+N+1], Sb[N*N+N+1]);
}

int cube_cake::find_match(int i, int j, int k, int size)
{
	int val;

	val = num_matches[i+size-1][j+size-1][k+size-1] - num_matches[i-1][j+size-1][k+size-1]
		- num_matches[i+size-1][j-1][k+size-1] + num_matches[i-1][j-1][k+size-1]
		- (num_matches[i+size-1][j+size-1][k-1] - num_matches[i-1][j+size-1][k-1] - num_matches[i+size-1][j-1][k-1]
		+ num_matches[i-1][j-1][k-1]);

	return val;
}

void cube_cake::find_matches()
{
	int size, total, i, j, k, total_max;

	S = N;
	if (!P)
	{
		NLM = 1;
		return;
	}
	NLM = 0;
//printf("\n\n =========== ABOUT TO CALL FIND MATCH =========== \n\n");

	total = find_match(1, 1, 1, S);
//printf("\n\n =========== FIRST LEVEL DONE total = %d, size = %d, P = %d %d %d =========== \n\n", total, size, P, cc[0][1][0], cc[1][1][1]);
	while ((S > 0) && (total*100/(S*S*S) < P))
		S--;
	if (S == N)
	{
		NLM = 1;
		return;
	}

//printf("\n\n =========== FIRST LEVEL DONE =========== \n\n");
	for (; S > 0; S--)
	{
		total_max = 0;
//printf("\n\n =========== CHECKING SIZE %d =========== \n\n", size + 1);
		for (i = 1; i <= N - S + 1; i++)
		{
			for (j = 1; j <= N - S + 1; j++)
			{
				for (k = 1; k <= N - S + 1; k++)
				{
					total = find_match(i, j, k, S);
					if ((total*100)/(S*S*S) >= P)
						NLM++;
					else if (total > total_max)
						total_max = total;
				}
			}
		}
		if (NLM)
			break;
		else
		{
			while ((S > 1) && (total_max*100/((S-1)*(S-1)*(S-1)) < P))
				S--;
		}
	}
//printf("\n\n =========== MATCHES FOUND =========== \n\n");
}

void cube_cake::init_res(int T, int max_N)
{
	int i, j;

	num_matches = (int ***) malloc((max_N+1)*sizeof(int **));
	for (i = 0; i <= max_N; i++)
	{
		num_matches[i] = (int **) malloc((max_N+1)*sizeof(int *));
		for (j = 0; j <= max_N; j++)
			num_matches[i][j] = (int *) calloc(max_N+1, sizeof(int));
	}
	
	res_len = 0;
}

void cube_cake::save_result()
{
	if (NLM)
		sprintf(res[res_len++], "%d %d", S, NLM);
	else
		sprintf(res[res_len++], "-1");
}

void cube_cake::print_results(int T)
{
	int i;

	for (i = 0; i < T; i++)
		printf("%s\n", res[i]);
}

int main(int argc, char **argv)
{
	cube_cake cc;
	int T, i;

	scanf("%d", &T);

	cc.init_res(T, 40);
	for (i = 0; i < T; i++)
	{
		cc.record_input();
		cc.find_matches();
		cc.save_result();
	}
	cc.print_results(T);

	return 0;
}
