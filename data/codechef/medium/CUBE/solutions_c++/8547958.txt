#include<stdio.h>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<set>
#include<cmath>
#include<bitset>
#include<map>
#include<list>
#include<stack>
#define max(a,b)(a>b?a:b)
using namespace std;
char str1[64010];
char str2[64010];
bool mark[41][41][41];
char cube1[41][41][41];
char cube2[41][41][41];
int dp[41][41][41];
int main()
{
	
	int t,n,p,i,j,k,s;
	scanf("%d",&t);
	while(t--)
	{
		memset(mark,false,sizeof(mark));
		memset(dp,0,sizeof(dp));
		scanf("%d%d",&n,&p);
		getchar();
		for(i=1;i<=n*n*n;++i)
		scanf("%c",&str1[i]);
		getchar();
		for(i=1;i<=n*n*n;++i)
		scanf("%c",&str2[i]);
		int count=1;
	    
		for(k=1;k<=n;++k)
		{
			for(j=1;j<=n;++j)
			{
				for(i=1;i<=n;++i)
				{
					cube1[i][j][k]=str1[count];
					cube2[i][j][k]=str2[count];
					count++;
				}
			}
		}
		for(i=1;i<=n;++i)
		{
			for(j=1;j<=n;++j)
			{
				for(k=1;k<=n;++k)
				{
				//	printf("%c %c\n",cube1[i][j][k],cube2[i][j][k]);
					if(cube1[i][j][k]==cube2[i][j][k])
					mark[i][j][k]=true;
				}
			}
		}
		for(i=1;i<=n;++i)
		{
			for(j=1;j<=n;++j)
			{
				for(k=1;k<=n;++k)
				{
					if(mark[i][j][k]==true)
					{
						dp[i][j][k]=1+dp[i-1][j][k]+dp[i][j-1][k]+dp[i][j][k-1]-dp[i-1][j-1][k]-dp[i][j-1][k-1]-dp[i-1][j][k-1]+dp[i-1][j-1][k-1];
					}
					else
					dp[i][j][k]=dp[i-1][j][k]+dp[i][j-1][k]+dp[i][j][k-1]-dp[i-1][j-1][k]-dp[i][j-1][k-1]-dp[i-1][j][k-1]+dp[i-1][j-1][k-1];
				}
			}
		}
		double temp;
		double res;
		int ct=0;
		for(s=n;s>=1;s--)
		{
 
			for(i=1;i<=n-s+1;i++)
			{
				for(j=1;j<=n-s+1;j++)
				{
					for(k=1;k<=n-s+1;k++)
					{
		        res=dp[i+s-1][j+s-1][k+s-1]-dp[i-1][j+s-1][k+s-1]-dp[i+s-1][j-1][k+s-1]-dp[i+s-1][j+s-1][k-1]+dp[i-1][j-1][k+s-1]+dp[i+s-1][j-1][k-1]+dp[i-1][j+s-1][k-1]-dp[i-1][j-1][k-1];
		        temp=(double)(p*s*s*s)/100;
		        //printf("%lf %lf\n",res,temp);
		            if(res>=temp)
		                {
		                	ct++;
		                }
                	}
				}
			}
			if(ct>0)
			{
				break;
			}
		}
		 if(ct>0)
		 {
		 	printf("%d %d\n",s,ct);
		 }
		 else
		 printf("-1\n");
		
	}
	
	
	return 0;
	
}