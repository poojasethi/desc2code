/*its not mine code,its copied code that is used for testing purpose*/


#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <utility>
#include <sstream>
#include <map>
#include <set>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PI;

const int inf=2000000000;
const LL INF=LL(inf)*inf;
const LL mod=1000000007LL;
double eps=1e-8;

#define F first
#define S second
#define mp make_pair
#define pb push_back	
#define sc(x) scanf("%d",&(x))

int C[41][41][41];
int main()
{
	int t,n,i,j,x,k,idx,size,num,sim;
	double p;
	char A[41][41][41],B[41][41][41];
	char* str1=new char[41*41*41];
	char* str2=new char[41*41*41];
	scanf("%d",&t);
	while(t--)
	{
		sc(n);sc(x);
		p=(double)x/100;
		scanf("%s %s",str1,str2);
		if(x==0)
            {printf("%d %d\n",n,1);continue;}
		for(i=1;i<=n;i++)
		{
			for(j=1;j<=n;j++)
			{
				idx=(i-1)*n*n+(j-1)*n;
				for(k=1;k<=n;k++)
				{
					A[i][j][k]=str1[idx+k-1];
					B[i][j][k]=str2[idx+k-1];
					C[i][j][k]=C[i][j][k-1]+C[i-1][j][k]+C[i][j-1][k]-C[i-1][j-1][k]-C[i-1][j][k-1]-C[i][j-1][k-1]+C[i-1][j-1][k-1]+(str1[idx+k-1]==str2[idx+k-1]);//(A[i][j][k]==B[i][j][k]);//C[i-1][j-1][k-1]=0;
				}
			}
		}
		/*for(i=1;i<=n;i++)
			for(j=1;j<=n;j++)
				for(k=1;k<=n;k++)
					C[i][j][k]=C[i][j][k-1]+C[i-1][j][k]+C[i][j-1][k]-C[i-1][j-1][k]-C[i-1][j][k-1]-C[i][j-1][k-1]+C[i-1][j-1][k-1]+(A[i][j][k]==B[i][j][k]);*/
		num=0;
		for(size=n;size>=1 && num==0;size--)
		{
			x=size*size*size;
			for(i=1;i+size-1<=n;i++)
			{
				for(j=1;j+size-1<=n;j++)
				{
					for(k=1;k+size-1<=n;k++)
					{
						sim=C[i+size-1][j+size-1][k+size-1]-C[i+size-1][j+size-1][k-1]-C[i+size-1][j-1][k+size-1]-C[i-1][j+size-1][k+size-1]+C[i-1][j-1][k+size-1]+C[i-1][j+size-1][k-1]+C[i+size-1][j-1][k-1]-C[i-1][j-1][k-1];
						//cout<<sim<<endl;
						if((double)sim/x > p-eps)
							num++;
					}
				}
			}
		}
		if(num==0)
			printf("%d\n",-1);
		else
			printf("%d %d\n",size+1,num);
	}	
}