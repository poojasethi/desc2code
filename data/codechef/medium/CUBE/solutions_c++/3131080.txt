#include <cstdio>
#include <iostream>

using namespace std;

void updatez(int ***bit, int n, int i, int j, int k) {
  while(k <= n) {
    bit[i][j][k] += 1;
    k += k&(-k);
  }
}

void updateyz(int ***bit, int n, int i, int j, int k) {
  while(j <= n) {
    updatez(bit, n, i, j, k);
    j += j&(-j);
  }
}

void update(int ***bit, int n, int i, int j, int k) {
  while(i <= n) {
    updateyz(bit, n, i, j, k);
    i += i&(-i);
  }
}

int query(int ***bit, int i, int j, int k) {
  int result = 0;
  int copyj = j, copyk = k;
  while(i > 0) {
    j = copyj;
    while(j > 0) {
      k = copyk;
      while(k > 0) {
        result += bit[i][j][k];
        k -= k&(-k);
      }
      j -= j&(-j);
    }
    i -= i&(-i);
  }
  return result;
}

int matches[42][42][42] = {0};
int main() {
  int t, n, p, cube, tmp, count, size, tmp2;
  int d1, e1, f1, d2, e2, f2;
  bool flag;
  int equal[42][42][42] = {0};
  int count1 = 0;
  // t = 40;
  scanf("%d", &t);
  while(t--) {
    flag = false;
    count = 0;
    count1 = 0;
    // n = 40;
    // p = 100;
    scanf("%d%d", &n, &p);
    cube = n*n*n;
    char *cube1 = new char[cube + 1];
    char *cube2 = new char[cube + 1];
    /*int ***bit = new int**[n + 1];*/
    for (int i = 0; i < 42; ++i) {
      for (int j = 0; j < 42; ++j) {
        for (int k = 0; k < 42; ++k) {
          equal[i][j][k] = 0;
          matches[i][j][k] = 0;
        }
      }
    }
    
    scanf("%s", cube1);
    scanf("%s", cube2);


    for (int i = 0; i < cube; ++i) {
      if (cube1[i] == cube2[i]) {
        count1++;
        equal[ ((i/n)/n) + 1 ][ ((i/n) % n) + 1 ][ (i % n) + 1 ] = 1;
        // update( bit, n, ((i/n)/n) + 1, ((i/n) % n) + 1 , (i % n) + 1 );
      } else {
        equal[ ((i/n)/n) + 1 ][ ((i/n) % n) + 1 ][ (i % n) + 1 ] = 0;
      }
    }

    for (int i = 1; i <= n; ++i) {
      for (int j = 1; j <= n; ++j) {
        for (int k = 1; k <= n; ++k) {
          matches[i][j][k] = matches[i-1][j][k] + matches[i][j][k-1] + matches[i][j-1][k] + matches[i-1][j-1][k-1] - matches[i-1][j][k-1] - matches[i-1][j-1][k] - matches[i][j-1][k-1] + equal[i][j][k];
        }
      }
    }

    if(count1*100 >= n*n*n*p) {
      printf("%d 1\n", n);
      continue;
    }
    if(count1 == 0 && p > 0) {
      printf("-1\n");
      continue;
    }
    for(int i = n-1; i >= 2 && !flag; --i) {

      count = 0;
      // flag = false;
      tmp = n - i + 1;
      tmp2 = i*i*i*p;
      for(int j = 1; j <= tmp; ++j) {
        d1 = j-1;
        d2 = d1 + i;
        for (int k = 1; k <= tmp; ++k) {
          e1 = k-1;
          e2 = e1 + i;
          for (int m = 1; m <= tmp; ++m) {
            f1 = m-1;
            f2 = f1 + i;
            if(
                (
                  (
                  matches[d2][e2][f2]
                  - (
                    matches[d2][e2][f1]
                    + matches[d1][e2][f2]
                    + matches[d2][e1][f2]
                    )
                  + (
                    matches[ d1][e1][f2]
                    + matches[ d2][e1][f1]
                    + matches[ d1][e2][f1]
                    )
                  - matches[ d1][e1][f1]
                  )
                )
              * 100
              >= tmp2) {
              flag = true;
              size = i;
              count++;
            }
          }
        }
      }
    }
    if(flag) {
      printf("%d %d\n", size, count);
    } else {
      printf("%d %d\n", 1, count1);
    }
  }
}