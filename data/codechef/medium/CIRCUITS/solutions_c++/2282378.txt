#include <algorithm>
#include <iostream>
#include <vector>
#include <cmath>
#include <cstdio>
#include <ctime>

using namespace std;

const double TL = 0.979*CLOCKS_PER_SEC;

struct node
{
    int g, i1, i2;
    node()
    {
        i1 = i2 = g = 0;
    }
};

class Circuit
{
    vector<node> v;
    int n;
public:
    Circuit() : v(101)
    {

    }
    void read();
    double solve();
};

void Circuit::read()
{
    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        cin >> v[i].g;
        if (v[i].g)
        {
            cin >> v[i].i1 >> v[i].i2;
        }
    }
}

inline bool isEqual(double x, double y)
{
    const double epsilon = 0.00000001;
    return fabs(x - y) <= epsilon;
}

inline double AND(double x, double y)
{
    return x*y;
}

inline double OR(double x, double y)
{
    return x + y - x*y;
}

double Circuit::solve()
{
    double a = 0.0, b = 1.0;
    double p = (a+b)/2;
    vector<double> d(n+1);
    while (!isEqual(d[n], 0.5))
    {
        p = (a+b)/2;
        for (int i = 1; i <= n; i++)
        {
            switch (v[i].g)
            {
                case 0: d[i] = p; break;
                case 1: d[i] = OR(d[v[i].i1], d[v[i].i2]); break;
                case 2: d[i] = AND(d[v[i].i1], d[v[i].i2]); break;
            }
        }
        if (d[n] < 0.5)
            a = p;
        else
            b = p;
    }
    return p;
}

int main()
{
    double tt = clock();
#ifndef ONLINE_JUDGE
    freopen("CIRCUITS.in", "r", stdin);
#endif
    int t, i;
    cin >> t;
    while (t--)
    {
        Circuit c;
        c.read();
        //cout << fixed << c.solve() << '\n';
        printf("%.5lf\n", c.solve());
    }
    while (clock()-tt <= TL);
}
