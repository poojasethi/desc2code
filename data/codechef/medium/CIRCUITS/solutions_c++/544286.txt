//problema A
#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <numeric>
#include <utility>
 
#include <deque>
#include <stack>
#include <bitset>
#include <map>
#include <set>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <list>
 
#include <sstream>
#include <iostream>
#include <iomanip>
 
using namespace std;
 
typedef  long long int64;
 
#define forn(i, n) for(int64 i = 0; i < (int)(n); i++)
#define fore(i, a, n) for(int64 i = a; i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) (a).size()
#define all(a) a.begin(), a.end()
#define VI vector<int>
#define PII vector<pair<int,int> >
#define iss istringstream //>>
#define MAX 105
#define MOD 1000000007
const long double EPS = 1E-9;
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double PI = 2 * acos(.0);

int t, n;
short nodes[MAX][3];
long double mid;
long double value[MAX];
long double solve(){
	forn(i, n){
		if(nodes[i][0] == 0) value[i] = mid;
		else if(nodes[i][0] == 2) value[i] = value[nodes[i][1]] * value[nodes[i][2]];
		else{
			long double p = value[nodes[i][1]], q = value[nodes[i][2]];
			value[i] = p * q + p * ( 1.0 - q) + q * (1.0 - p);
		}
	}
	return value[n - 1];
}
int main(){
	cin >> t;
	while(t --){
		cin >> n;
		forn(i, n){
			cin >> nodes[i][0];
			if(nodes[i][0]){
				cin >> nodes[i][1] >> nodes[i][2];
				nodes[i][1] --;
				nodes[i][2] --;
			}
		}
		long double low = 0.0 , high = 1.0 ;
		while(high - low > EPS){
			mid = (high + low) / 2.0;
			long double pp = solve();
			if(pp > 0.5) high = mid - EPS;
			else low = mid + EPS;
		}
		cout  << setprecision(5) << fixed << mid << endl;
	}
	
	return 0;
}


