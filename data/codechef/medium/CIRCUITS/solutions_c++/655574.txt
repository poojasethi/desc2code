//#include "programming_contests.h"


#ifndef PROGRAMMING_CONTESTS_H
#define PROGRAMMING_CONTESTS_H
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <tr1/unordered_map>
#include <tr1/unordered_set>
#include <typeinfo>
#include <utility>
#include <vector>
#ifdef LOCAL
static FILE* _freopen = freopen("input.txt", "r", stdin);
#else
#define NDEBUG
#endif
#include <cassert>
using namespace std;
using namespace std::tr1;







typedef long long LL;

#define RI(x) {int _res=scanf("%i ", &(x)); assert(_res);}
#define RLL(x) {int _res=scanf("%lli ", &(x)); assert(_res);}
#define RS(x) {char _buf[2000]; int _res=scanf("%s ", _buf); assert(_res); x = string(_buf);}
#define RL(x) getline(cin, x) //Consumes and discards line break at end of line.
#define FOUT(path) freopen(path, "w", stdout)

#define FOR(i, a, b) for(int i=(a), _b=(b); i<_b; ++i)
#define FORR(i, a, b) for(int i=(b-1), _a=(a); i>=_a; --i)
#define IT(c) typeof(c.begin())
#define FORE(it, c) for(IT(c) it=c.begin(); it!=c.end(); ++it)
#define ALL(x) x.begin(), x.end()

#define PB push_back
#define MP make_pair
#define SZ(c) ((int)c.size())
#define LEN(a) (sizeof(a)/sizeof(a[0]))
#define END(a) (a+LEN(a))

#define TWO(e) (1<<e)
#define TWOL(e) (1LL<<e)


static const double PI = acos(-1.0);
static const double GOLD = (1+sqrt(5.0))/2;

#endif // PROGRAMMING_CONTESTS_H







int tests,n;
int type[105];
int in1[105];
int in2[105];

//Returns: Pr(node no outputs 1 | p)
double eval(int no, double p) {
  if(type[no]==0) return p;
  else if(type[no]==1) {
    //OR
    return 1-(1-eval(in1[no],p))*(1-eval(in2[no],p));
  } else {
    //AND
    return eval(in1[no],p)*eval(in2[no],p);
  }
}

int main() {
  RI(tests);
  FOR(test,0,tests) {
    RI(n);
    FOR(i,1,n+1) {
      RI(type[i]);
      if(type[i] != 0) {
        RI(in1[i]); RI(in2[i]);
      }
    }
    
    
    double low = 0, high = 1;
    while(high-low >= 1e-8) {
      double mid = low+(high-low)/2;
      if(eval(n,mid) <= 0.5) low = mid;
      else high = mid;
    }
    printf("%.5f\n",low);
  }
  return 0;
}
