/* CPP Tempelate
 * @author Devashish Tyagi
 */

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#include <list>
#include <bitset>

#define sf(a) scanf("%d",&a)
#define ssf(a,b) scanf("%d %d",&a,&b)
#define pf(a) printf("%d\n",a)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pi pair<int,int>
#define vi vector<int>
#define all(v) v.begin(),v.end()

#define PB push_back
#define MP make_pair
#define sz(a) (int)(a).size()

#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define CLEAR(a) memset((a),0,sizeof(a))

#define INF 1000000000
#define EPS 0.0000001
#define PI 2*acos(0.0)

using namespace std;
typedef long long ll;

string convertInt(int number)
{
   stringstream ss;//create a stringstream
   ss << number;//add number to the stream
   return ss.str();//return a string with the contents of the stream
}

int convertString(string s){
    int num;
    stringstream sstr(s); // create a stringstream
    sstr>>num; // push the stream into the num
    return num;
}

int modulo (int m, int n) { return m >= 0 ? m % n : ( n - abs ( m%n ) ) % n; }

vector< vector<int> > graph(101, vector<int>());
int nodetype[101];
double dp[101];

double solve(int i, double p){
    if (nodetype[i] == 0)
	return p;
    if (dp[i] >= 0.0)
	return dp[i];
    double x = solve(graph[i][0]-1, p);
    double y = solve(graph[i][1]-1, p);
    if (nodetype[i] == 1){
	dp[i] = x+y - x*y;
    }
    else{
	dp[i] = x*y;
    }
    return dp[i];
}

int main(void){
    int t;
    sf(t);
    while(t--){
	int n;
	sf(n);
	CLEAR(nodetype);
	FOR(i,0,n){
	    graph[i].clear();
	    int x,y,z;
	    sf(x);
	    if (x == 0){
		nodetype[i] = 0;
	    }
	    else{
		sf(y); sf(z);
		nodetype[i] = x;
		graph[i].push_back(y);
		graph[i].push_back(z);
	    }
	}
	double l = 0.0, r = 1.0;
	while(abs(r-l) > EPS){
	    double mid = (r+l)/2.0;
	    memset(dp, -1, sizeof dp);
	    double p = solve(n-1, mid);
	    if (p > 0.5){
		r = mid;
	    }
	    else if (p < 0.5){
		l = mid;
	    }
	    else{
		break;
	    }
	}
	printf("%.5f\n",(l+r)/2.0);
    }
    return 0;
}

