#include <cstdio>
#include <cstring>
#include <algorithm>

typedef struct node {
	bool input;
	bool andgate;
	int pl;
	int pr;
} node;

node ics[101];
int n;
float mem[101];

float eval(float p, int gate){
	if (ics[gate].input) return p;
	if (mem[gate] >=0) return mem[gate];
	if (ics[gate].andgate){
		return mem[gate]=eval(p, ics[gate].pl) * eval(p, ics[gate].pr);
	} else {
		return mem[gate]= 1 - (1-eval(p, ics[gate].pl)) * (1-eval(p, ics[gate].pr));
	}
}

int main(){
	int tc;
	scanf("%d", &tc);
	while (tc--){
		scanf("%d", &n);
		for (int i=1; i<=n; i++){
			int x;
			scanf("%d", &x);
			if (x==0){
				ics[i].input=true;
			} else if (x==1) {
				ics[i].input=false;
				ics[i].andgate=false;
				scanf("%d %d", &(ics[i].pl), &(ics[i].pr));
			} else if (x==2) {
				ics[i].input=false;
				ics[i].andgate=true;
				scanf("%d %d", &(ics[i].pl), &(ics[i].pr));
			}
		}
		float h,l,m;
		l=0; h=1;
		for (int i=0; i<100; i++){
			m=(l+h)/2;
			std::fill(mem, mem+n+1, -0.5);
			float ans = eval(m, n);
			//printf(">>%f\n", ans);
			if (ans>0.5){
				h=m;
			} else {
				l=m;
			}
			//printf(">>m=%f\n", m);
		}
		printf("%0.5f\n", m);
	}
	return 0;
}