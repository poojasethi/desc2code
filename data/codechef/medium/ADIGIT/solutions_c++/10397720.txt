#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

std::vector<int> digitPositions[10];
int siz,q;
int inp[100000];
char tmp[100000];
	
void populatePositionData(int inp[], int siz)
{
	for(int i=0; i<siz; i++){
		digitPositions[inp[i]].push_back(i);
	}
}

int getSum(int index, int pos)
{
	vector<int>::iterator it = lower_bound(digitPositions[index].begin(),
		digitPositions[index].end(), pos);
	int count = (it - digitPositions[index].begin());
	if(count <= 0)
		return 0;

	int sum = count*(inp[pos] - index); 
	return sum;
}

void readInp()
{
	cin>>siz>>q;
	cin>>tmp;
	for(int i=0; i<siz; i++)
		inp[i] = tmp[i] - '0';
}


void calc()
{
	populatePositionData(inp, siz);

	for(int i=0; i<q; i++){
		int pos;
		cin>>pos;
		pos--;
		int totalLower = 0, totalHigher = 0;
		int digit = inp[pos];
		for(int d=0; d<digit; d++){
			totalLower += getSum(d,pos);
		}
		for(int d=digit+1; d<=9; d++){
			totalHigher += getSum(d,pos);
		}
		int ans = totalLower - totalHigher;
		cout<<ans<<endl;
	}
}
int main()
{
	readInp();
	calc();
}