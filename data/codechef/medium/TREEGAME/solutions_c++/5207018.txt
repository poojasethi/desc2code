#include <bits/stdc++.h>

using namespace std;



#define ull 						unsigned long long
#define ll 							long long
#define V(x)						vector<x>
#define pii 						pair<int,int>
#define rep(i,n)					for(int i=0;i<n;i++)
#define F(i,a,b)               		for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ((b).find(a) != (b).end())
#define pb(x)                        push_back(x)
#define fill(a,v)                   memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define mp                          make_pair
#define fi                           first
#define se                           second
#define s(n)                        scanf("%d",&n)
#define sl(n)                       scanf("%lld",&n)
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define N 10005

V(int)graph[N];
int level[N];

int dfs(int node,int l,int par){
	level[l]++;
	rep(i,sz(graph[node])){
		if(par!=graph[node][i])
			dfs(graph[node][i],l+1,node);
	}
}



int main(){
	int t;
	s(t);
	while(t-->0){
		int n;
		s(n);
		rep(i,N){graph[i].clear();}
		fill(level,0);
		rep(i,n-1){
			int a,b;														
			s(a);s(b);
			graph[a].pb(b);
			graph[b].pb(a);
		}
		
		dfs(1,1,-1);
		int height=1;
		while(level[height])height++;
		height--;
		bool alice=true;
		int L=1,R=height;
		int ans=0;
		while(L<=R){
			if(alice){
				L++;
			}
			else{
				level[R]--;
				if(level[R]==0)R--;
			}
			ans++;
			alice=!alice;
		}
		cout<<ans<<endl;
	}
	return 0;
}