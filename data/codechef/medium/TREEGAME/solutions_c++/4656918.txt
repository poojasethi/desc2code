#include<vector>
#include<cstring>
#include<algorithm>
#include<stdio.h>
#include<climits>
#include<set>
#include<fstream>
#include<cmath>
#include<bitset>
#include<map>
#include<iostream>
#include<queue>
#define test(t) while(t--)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)

#define p(n) printf("%lld\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>
#define pb push_back
#define inf 1000000000LL
#define mp make_pair
#define MOD 1000000007LL

//#define inf 100000000
#define ll  long long
#include<stack>
using namespace std;
int maxlev;
vector<int>v[100005];
int le[100005],le1[100005];
int mark[100005];
void bfs(int sr)
{
priority_queue<int>pq;
int i;
 memset(mark,0,sizeof(mark));
 le1[sr]=1;
 mark[sr]=1;
 pq.push(sr);
 while(!pq.empty())
 {
  int tmp=pq.top();

  pq.pop();
  for(i=0;i<v[tmp].size();++i)
  {
    if(mark[v[tmp][i]]==0)
    {
    mark[v[tmp][i]]=1;
    le1[v[tmp][i]]=le1[tmp]+1;
    pq.push(v[tmp][i]);
    }
    else
    {
      le1[v[tmp][i]]=min(le1[v[tmp][i]],le1[tmp]+1);
    }
  }
 }
}
int main()
{
int t,n,n1,n2,i;
s(t);
while(t--)
{
s(n);
maxlev=0;
memset(le,0,sizeof(le));
for(i=1;i<=n;++i)
v[i].clear();
memset(le1,0,sizeof(le1));
for(i=1;i<=n-1;++i)
{
s(n1);s(n2);
v[n1].pb(n2);
v[n2].pb(n1);
}
bfs(1);
for(i=1;i<=n;++i)
{
 int level=le1[i];
 le[level]++;
 maxlev=max(maxlev,level);
}
/*for(i=1;i<=maxlev;++i)
cout<<le[i]<<" ";
cout<<endl;*/
int ans=0;
int ler=0;
int leaf=maxlev;
while(1)
{
 if(ler==leaf)
 {
  if(le[leaf]==0)
  break;
  else
  {
  ans++;
  break;
  }
 }
 else
 {
 ler++;
 le[ler]=0;
 ans++;
 if(ler==leaf)
 break;
 le[leaf]--;
 if(le[leaf]==0)
 leaf--;
 ans++;
 }
}
printf("%d\n",ans);
}
 return 0;
}
