//Common headers
#include<iostream>
#include<vector>
#include<utility>
#include<algorithm>

//Common functions
#define max(i,j)	(( i > j )? i : j);
#define min(i,j)	(( i < j )? i : j);

#include<map>


#define ipair std::pair< int, int >


#define _MAX 10001

using namespace std;

int nodesAt[_MAX];	//nodes at this height. 1 is at height 0
int maxHeight = 0;

multimap< int,int > edges;
	
int play(){
	int aliceLevel = 0, bobLevel = maxHeight;
	
	int turns =0;
	while(aliceLevel <= bobLevel){
		nodesAt[aliceLevel] =0;
		aliceLevel++;
		turns++;
		
		if(aliceLevel>bobLevel)
			break;
			
		nodesAt[bobLevel]--;
		turns++;
		
		if(nodesAt[bobLevel]<=0)
			bobLevel--;
		
	}
	return turns;
}


int DFS(int k, int parent, int height){	
	maxHeight = max(height,maxHeight);
	
	nodesAt[height]++;
	map< int,int >::iterator it = edges.lower_bound(k);
	map< int,int >::iterator end = edges.upper_bound(k);
	
	while(it!=end){
		//if(height == 0)			cout<<"At hieght 0\n";		cout << " (" << k << ", " << it->second << ") ";
		if( it->second != parent)
			DFS( it->second , k, height+1);
		
		it++;
	}
	
}

int main(){
	
	int testCases= 0;
	cin>>testCases;
	
	
	int n, ni;
	ipair p,prev;
	
	while(testCases--){
		cin >> n;
		ni = n-1;
		edges.clear();
		for(int i=0;i<n; nodesAt[i++]=0);
		
		while(ni--){
			cin >> p.first >> p.second;
			edges.insert(p);
			prev.first = p.second;
			prev.second = p.first;
			edges.insert(prev);
		}
		//Build the height array with a DFS
		maxHeight =0;
		DFS(1,0,0);
		
		//Play
		cout << play() << '\n';
	}
	
	
	return 0;
}