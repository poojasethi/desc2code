#include<iostream>
    #include<vector>
    #include<queue>
    #include<algorithm>
    #include<map>
    #include<string>
    #include<sstream>
    #include<numeric>
    #include<stack>
    #include<cstdio>
    #include<cstdlib>
    #include<cmath>
    #include<cstring>
    #include<algorithm>
    #include<queue>
     
    using namespace std;
    static struct IO {
    char tmp[1 << 10];
    // fast input routines
    char cur;
    //#define nextChar() (cur = getc_unlocked(stdin))
    //#define peekChar() (cur)
    inline char nextChar() { return cur = getc_unlocked(stdin); }
    inline char peekChar() { return cur; }
    inline operator bool() { return peekChar(); }
    inline static bool isBlank(char c) { return (c < '-' && c); }
    inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
    inline IO& operator >> (char & c) { c = nextChar(); return *this; }
    inline IO& operator >> (char * buf) {
    if (skipBlanks()) {
    if (peekChar()) {
    *(buf++) = peekChar();
    while (!isBlank(nextChar())) *(buf++) = peekChar();
    } *(buf++) = 0; } return *this; }
    inline IO& operator >> (string & s) {
    if (skipBlanks()) {	s.clear(); s += peekChar();
    while (!isBlank(nextChar())) s += peekChar(); }
    return *this; }
    inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }
    #define defineInFor(intType) \
    inline IO& operator >>(intType & n) { \
    if (skipBlanks()) { \
    int sign = +1; \
    if (peekChar() == '-') { \
    sign = -1; \
    n = nextChar() - '0'; \
    } else \
    n = peekChar() - '0'; \
    while (!isBlank(nextChar())) { \
    n += n + (n << 3) + peekChar() - 48; \
    } \
    n *= sign; \
    } \
    return *this; \
    }
    defineInFor(int)
    defineInFor(unsigned int)
    defineInFor(long long)
    // fast output routines
    //#define putChar(c) putc_unlocked((c), stdout)
    inline void putChar(char c) { putc_unlocked(c, stdout); }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
    inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }
    #define defineOutFor(intType) \
    inline char * toString(intType n) { \
    char * p = (tmp + 30); \
    if (n) { \
    bool isNeg = 0; \
    if (n < 0) isNeg = 1, n = -n; \
    while (n) \
    *--p = (n % 10) + '0', n /= 10; \
    if (isNeg) *--p = '-'; \
    } else *--p = '0'; \
    return p; \
    } \
    inline IO& operator << (intType n) { return (*this) << toString(n); }
    defineOutFor(int)
    defineOutFor(long long)
    #define endl ('\n')
    #define cout __io__
    #define cin __io__
    } __io__;
     
     
     
     
    long long int n;
    vector<int> graph[10005];
    int levels[10005],lvl;
    void bfs(int r)
    {
    vector<bool> visited(10005 , false);
    queue<pair<int,int> > q;
    q.push(make_pair(r,1));
    lvl = 1;
    visited[r] = true;
    while(!q.empty())
    {
    pair<int,int> cur = q.front();
    lvl = cur.second;
    levels[lvl]++;
    q.pop();
    for(int i = 0; i < graph[cur.first].size(); i++)
    {
    if(!visited[graph[cur.first][i]])
    {
    visited[graph[cur.first][i]] = true;
    q.push(make_pair(graph[cur.first][i] , lvl+1));
    }
    }
    }
    }
     
    int main()
    {
    int t;
    cin>>t;
    while(t--)
    {
    int n,a,b;
    cin>>n;
    int turns = 0;
    for(int i = 0 ; i<n+1; i++)
    {
    graph[i].clear();
    levels[i] = 0;
    }
    for(int i = 0; i < n-1; i++)
    {
    cin>>a>>b;
    graph[a].push_back(b);
    graph[b].push_back(a);
    //yes[b]=1;
    }
    int root=1;
    bfs(root);
    int ch=0;
    for(int i = 1,j=lvl; i <= j;)
    {
    if(ch == 0)
    {
    if(levels[i])
    {
    turns+=1;
    levels[i] = 0;
    i++;
    }
    else
    break;
    }
    else
    {
    if(levels[j] > 0)
    {
    levels[j]--;
    turns++;
    }
    else if(j-1 >= i)
    {
    if(levels[j-1] > 0)
    {
    j = j-1;
    levels[j]--;
    turns++;
    }
    else
    break;
    }
    else
    break;
    }
    ch = 1-ch;
    }
    cout<<turns<<endl;
    }
    return 0;
    }  