// codeforces
#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<queue>
#include<math.h>
#include<algorithm>
#define LL long long
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define SL(N) scanf("%d",&N);
#define pb push_back
#define mp make_pair
using namespace std;
int gcd(int a, int b){ int temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
vector<int>adj[10005];
vector<int>level[10005];
int lev[10005];

void solve(int maxm)
{
    int turns=1;
    int first=1;
    int sec=maxm;
    while(1)
    {
        if(turns%2)
        {
           if(level[first].size()>0)
           {
               level[first].clear();
               first++;
           }
           else break;
        }
        else
        {
            if(level[sec].size()>0)
            {
                int x= level[sec].size()-1;
                level[sec].erase(level[sec].begin()+x);
            }
            else if(level[sec-1].size()>0)
            {
                sec--;
                int x= level[sec].size()-1;
                level[sec].erase(level[sec].begin()+x);
            }
            else break;
        }
        turns++;
    }
    P(--turns)
    return;
}
void bfs(int no)
{
    int top,i,node,j;
    queue<int>que;
    bool vis[10005];
    memset(vis,false,sizeof(vis));
    memset(lev,0,sizeof(lev));
    que.push(no); vis[no]=true;
    level[1].pb(no);
    lev[no]=1;
    int maxm=1;
    while(!que.empty())
    {
        top= que.front();que.pop();
        vis[top]=true;
        int s= adj[top].size();
        for(i=0;i<s;i++)
        {
            node= adj[top][i];
            if(!vis[node])
            {
                lev[node]=lev[top]+1;
                maxm= max(lev[node],maxm);
                level[lev[node]].pb(node);
                vis[node]=true;
                que.push(node);
            }
        }
    }
    solve(maxm);
    return;
}
int main()
{
      //  freopen("C:\\Users\\hp pc\\Desktop\\coding\\input.txt", "r", stdin);
       // freopen("C:\\Users\\cyber\\Desktop\\codechef\\output.txt", "w", stdout);
    int t,N,u,v,i;
    S(t)
    while(t--)
    {
        S(N)
        for(i=0;i<=N+2;i++){adj[i].clear(); level[i].clear();}
        while(N-->1)
        {
            S(u)S(v)
            adj[u].pb(v); adj[v].pb(u);
        }
        bfs(1);
    }
return 0;
}
