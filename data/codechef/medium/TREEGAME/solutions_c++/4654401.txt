// codersan
#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define init(a,b) memset(a,b,sizeof(a))
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define pi(n) printf("%d",n)
#define piw(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define pnl() printf("\n")
#define sortv(a) sort(a.begin(),a.end())
#define go()  int t; cin>>t; while(t--)
#define DRI(n)  int n; cin>>n;
#define DRII(n,m)  int n,m; cin>>n>>m;
#define LL long long int
using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef vector< PII > VPII;
void trimstring(string str)
{
    VI form;
    string te="";
    for(int i=0;i<str.size();i++)
     {
        if(str[i]=='-'){
            form.pb(atoi(te.c_str()));
            te="";
        }
        else te += str[i];
    }
}
bool visited[10004];
int tree_depth;
int depth[10004];
VI adj[10004];

void dfs(int cur,int dep)
{
    vector <int> ::iterator it;// first try ;)
    visited[cur]=1;
    depth[dep]++;//update count

    for(it=adj[cur].begin();it!=adj[cur].end();it++)
    {
        if(visited[*it]==0)
            dfs(*it,dep+1);
    }
    tree_depth=max(tree_depth,dep);//update max
}

int main()
{
   // freopen("C:\\Users\\codersan\\Desktop\\Coding\\SPOJ.txt", "r", stdin);
   go()
   {
       init(depth,0);
       init(visited,0);

       DRI(n);
       if(n==1)
       {
           printf("1\n");
           continue;
       }

       for(int i=0;i<10003;i++)
        adj[i].clear();


       for(int i=0;i<(n-1);i++)
       {
           DRII(a,b);
           adj[a].pb(b);
           adj[b].pb(a);
       }

       tree_depth=0;
       dfs(1,0);
       int start=0,ans=0;
       /*for(int i=0;i<6;i++)
        piw(depth[i]);
       pnl();
       pin(tree_depth);*/
       while(depth[start]!=0)
       {
          ans++;//Alice :)
          if(tree_depth==start)
            break;
          start++;//go down level


          depth[tree_depth]--;//bob :)
          ans++;
          if(depth[tree_depth]==0)
            tree_depth--;

       }

        pin(ans);
   }
   return 0;
}
