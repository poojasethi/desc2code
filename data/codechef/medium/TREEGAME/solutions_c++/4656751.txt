#include<iostream>
#include<vector>
using namespace std;
long long int height[100005],visited[100005],maxlevel;
vector<long long int> graph[100005];
void dfs(long long int i,long long int level)
{
    if(visited[i]==true)
        return ;
    visited[i]=true;
    vector<long long int>::iterator it;
    height[level]++;
    maxlevel=max(maxlevel,level);
    for(it=graph[i].begin();it!=graph[i].end();it++)
    {
        dfs(*it,level+1);
    }
}
int main()
{
    long long int t,n,i,u,v,start,last,cnt;
    cin>>t;
    while(t--)
    {
        cin>>n;
        for(i=1;i<=n;i++)
        {
            graph[i].clear();
            height[i]=0;
            visited[i]=false;
        }
        for(i=0;i<n-1;i++)
        {
            cin>>u>>v;
            graph[u].push_back(v);
            graph[v].push_back(u);
        }
        maxlevel=1;
        dfs(1,1);
        start=1;
        cnt=0;
        last=maxlevel;
        while(1)
        {
            if(start>last)
                break;
            start++;
            cnt++;
            if(start>last)
                break;
            height[last]--;
            if(height[last]==0)
            {
                last--;
            }
            cnt++;
            if(start>last)
                break;
        }
        cout<<cnt<<endl;
    }
}
