#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>

using namespace std;


void dfs(int node,vector<int> graph[],int parent,int depth[],int deep)
{
	int i;
	int ans=0;
	int flag=1;
	depth[deep]++;
	for(i=0;i<graph[node].size();i++)
		if(graph[node][i]!=parent)
			dfs(graph[node][i],graph,node,depth,deep+1);
	return ;
}

int main()
{
	int t;
	scanf("%d",&t);
	int i,j,u,v;
	while(t--)
	{
		int n;
		scanf("%d",&n);
		vector < int > graph[n+1];
		for(i=0;i<n-1;i++)
		{
			scanf("%d%d",&u,&v);
			graph[u].push_back(v);
			graph[v].push_back(u);
		}
		int depth[n];
		memset(depth,0,sizeof(depth));
		dfs(1,graph,-1,depth,0);
		int sum=0;
		int alice,bob;
		for(i=n;i>=1;i--)
		{
			if(depth[i-1]==0)continue;
			sum=sum+depth[i-1];
			if(sum>=i-1)
			{
				
				if(sum==i-1)
					alice=bob=i-1;
				if(sum>i-1)
				{
					alice=i;
					bob=i-1;
				}
				break;
			}
		}
		cout<<alice+bob<<endl;
	}
	return 0;
}
