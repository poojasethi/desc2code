#include<bits/stdc++.h>
using namespace std;
queue<int>q;
vector<int>adj[10001],child[10001],level[10001];
int parent[10001],mark[10001];
int main()
{
	int t,n,j,i,k,x,y,temp,ans,fl;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		for(i=0;i<n-1;i++)
		{
			scanf("%d %d",&x,&y);
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		for(i=0;i<=n;i++)
		{
			mark[i]=0;
			parent[i]=-1;
		}
		q.push(1);
		mark[1]=1;
		q.push(-1);
		int c=1;
		level[c].push_back(1);
		c=2;
		while(!q.empty())
		{
			temp=q.front();
			q.pop();
			if(temp==-1)
			{
				if(!q.empty())
				{
					q.push(-1);
				}
				c++;
			}
			for(i=0;i<adj[temp].size();i++)
			{
				if(!mark[adj[temp][i]])
				{
					q.push(adj[temp][i]);
					mark[adj[temp][i]]=1;
					parent[adj[temp][i]]=temp;
					child[temp].push_back(adj[temp][i]);
					level[c].push_back(adj[temp][i]);
				}
			}
		//	cout<<temp<<" "<<child[temp].size()<<endl;
		}
		for(i=0;i<=n;i++)
		{
			mark[i]=0;
		}
		q.push(1);
		q.push(-1);
		ans=0;
	//	cout<<leaf.front()<<" ";
		while(1)
		{
		//	cout<<ans<<" ";
			if(q.empty() && c==0)
			{
				break;
			}
			fl=0;
			while(!q.empty())
			{
				temp=q.front();
				q.pop();
				if(temp==-1)
				{
					if(!q.empty())
					{
						q.push(-1);
					}
				//	cout<<endl;
					break;
				}
			//	cout<<temp<<" ";
				if(mark[temp]==0 && fl==0)
				{
					ans++;
					fl=1;
				}
				mark[temp]=1;
				for(i=0;i<child[temp].size();i++)
				{
					if(!mark[child[temp][i]])
					{
						q.push(child[temp][i]);
					}
				}
			}
			fl=0;
			while(c>=1)
			{
				for(j=0;j<level[c].size();j++)
				{
					if(!mark[level[c][j]])
					{
						mark[level[c][j]]=1;
						fl=1;
						ans++;
						break;
					}
				}
				if(fl==1)
				{
					break;
				}
				else
				{
					c--;
				}
			}
		}
		printf("%d\n",ans);
		for(i=1;i<=n;i++)
		{
			adj[i].clear();
			child[i].clear();
			level[i].clear();
		}
	}
	return 0;
}