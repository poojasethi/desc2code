#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);
using namespace std;
typedef long long int LL;
std::vector<int > adjList[1000010];
std::vector< pair<int , int > > V;
int depth[100010];


void dfs(int curr_vertex , int parent)
{
	std::vector<int >::iterator it = adjList[curr_vertex].begin();
	while(it!=adjList[curr_vertex].end())
	{
		if((*it)!=parent)
		{
			depth[(*it)] = depth[curr_vertex] +  1;
			dfs((*it) , curr_vertex);
		}
		it++;
	}
}

int main()
{
int test , N , u , v;
si(test);
while(test--)
{
	si(N);
	for(int i=0;i<N+4;i++)
		adjList[i].clear();

	for(int i=1;i<=N-1;i++){
		si(u);si(v);
		adjList[u].pb(v);
		adjList[v].pb(u);
	}

	depth[1] = 1;
	dfs(1 ,  -1);

	int left , right;
	left = 0;
	right = N-1;

	V.clear();
	for(int i=1;i<=N;i++)
		V.pb(mp(depth[i] , i));
	sort(V.begin() , V.end());

	int ans = 0 , flag = 0 , curr;

	while(left <= right)
	{
		if(flag == 0)
		{
			curr = left;
			while((V[left].first == V[curr].first) && left<=right)
				left++;
		}
		else
		{
			right--;
		}
		flag = 1 - flag;
		ans++;
	}
	printf("%d\n", ans);

}

return 0;
}










