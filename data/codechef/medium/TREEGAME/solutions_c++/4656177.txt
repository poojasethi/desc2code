#include <iostream>
#include <stdio.h>
#include <list>
using namespace std;

class Graph
{
	int V;
	list<int> *adj;
public:
	Graph(int V);
	void addEdge(int x,int y);
	void BFS(int s,list<int> *adj,int &end);
};

inline Graph::Graph(int V)
{
	this->V=V;
	adj=new list<int>[V];
}

inline void Graph::addEdge(int x,int y)
{
	adj[x].push_back(y);
	adj[y].push_back(x);
}

inline void Graph::BFS(int s,list<int> * ans,int &j)
{
	bool *visited= new bool[V];
	for(j=0;j<V;j++)
	{
		visited[j]=false;
	}
	list<int> cur,next;
	cur.push_back(s);
	visited[s]=true;
	j=0;
	while(!cur.empty())
	{
		s=cur.front();
		ans[j].push_back(s);
		cur.pop_front();
		list<int>::iterator i,iend;
		iend=adj[s].end();
		for(i=adj[s].begin();i!=iend;++i)
		{
			if(!visited[*i])
			{
				visited[*i]=true;
				next.push_back(*i);
			}
		}
		if(cur.empty())
		{
			cur=next;
			j++;
			next.clear();
		}
	}
	
}
int main(int argc, char **argv)
{
	
	int t;
	list<int> *ans;
	scanf("%d",&t);
	while(t--)
	{
		int n;
		scanf("%d",&n);
		Graph g(n);
		int x,y;
		int end=0;
		for(int i=0;i<n-1;++i)
		{
			scanf("%d %d",&x,&y);
			--x;
			--y;
			g.addEdge(x,y);
		}
		ans = new list<int>[n];
		g.BFS(0,ans,end);
		int i=0;
		int j=end-1;
		int count=0;
		while(true)
		{
			ans[i++].clear();
			count++;
			if(i>j)
				break;
			if(ans[j].size())
			{
				ans[j].pop_back();
				if(ans[j].size()==0)
				{
					j--;
				}
				count++;
			}
			if(j<i)
				break;
		}
		printf("%d\n",count);
	}
	return 0;
}

