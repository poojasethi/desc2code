#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<climits>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
 
typedef long long int lli;
typedef long int li;
 
	
 
#define F(i, n) for(i = 0;i < n; ++i)
#define FI(i, st, ft) for(i = st;i <= ft; ++i)
#define FD(i,n) for(i=n-1; i>=0; i--)
#define pb(a, b) a.push_back(b)
#define M 1000000
#define inf -1000000000
#define rep(i,n) for(int i=0;i<n;i++)
 vector<int>adj[10005];
 int j,i,res[10005];

 void dfs(int curr,int prev,int depth)
 {res[curr] = depth;
	
 
	rep(i, adj[curr].size())
	if(adj[curr][i] != prev)
	{
		
		dfs(adj[curr][i], curr, depth+1);
	}
		}
int main()
{int t;
cin>>t;
while(t--)
{int n;
cin>>n;
int a,b;
F(i,n+10)
adj[i].clear();

F(i,n-1)
{cin>>a>>b;
adj[b-1].push_back(a-1);
adj[a-1].push_back(b-1);
	
}
/*for( i=0;i<n;i++)
 {
		for( j=0;j<adj[i].size();j++)
		cout<<adj[i][j]<<" ";
		cout<<"\n";}*/
dfs(0,-1,0);

vector<int>vec;
//F(i,n)
//cout<<res[i]<<" ";
F(i,n)
vec.push_back(res[i]);
sort(vec.begin(),vec.end());
int ans=0;

i=0,j=vec.size()-1;


while(1)
{
	if(i>j)
	break;
	ans++;
	int x=vec[i];
	while(i<=j&&x==vec[i])
	i++;
	if(i>j)
	break;
	ans++;
	j--;
	
}
cout<<ans<<"\n";
	}return 0;
	}