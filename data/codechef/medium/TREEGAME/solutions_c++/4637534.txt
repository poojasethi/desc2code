#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<climits>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
 

 
	
 
#define F(i, n) for(i = 0;i < n; ++i)
#define FI(i, st, ft) for(i = st;i <= ft; ++i)
#define FD(i,n) for(i=n-1; i>=0; i--)

#define M 1000000
#define inf -1000000000

 
//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)
 
#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
 
#define N 11111
 
vi adj[N];
int d[N], reduce[N];
bool leaf[N];
 
void dfs(int cur, int prev, int depth)
{
	d[cur] = depth;
	leaf[cur] = true;
 
	rep(i, adj[cur].sz)
	if(adj[cur][i] != prev)
	{
		leaf[cur] = false;
		dfs(adj[cur][i], cur, depth+1);
	}
}
int main()
{
	int t;
	gi(t);
 
	while(t--)
	{
		int n;
		gi(n);
 
		rep(i, n+10)
			adj[i].clear();
 
		rep(i, n-1)
		{
			int u, v;
			gi(u); gi(v);
			u--; v--;
 
			adj[u].pb(v);
			adj[v].pb(u);
		}
 
		dfs(0, -1, 0);
		memset(reduce, 0, sizeof reduce);
 
		vector < int > x;
 
		rep(i, n)
		{
			x.pb( d[i] );
		}
 
		vector < int > y;
 //for(int i=0;i<n;i++)
 //cout<<d[i]<<" ";
	/*	rep(i, n)
		if(leaf[i])
		{
			y.pb( d[i] );
		}*/
 
		sort(all(x));
	/*	y = x;
		reverse(all(y));*/
 
		int i = 0, steps = 0;
		int j = x.sz - 1;
		while(1)
		{
			if(i > j)
				break;
			steps++;
			int top = x[i];
			while(i <= j && x[i] == top)
				i++;
			if(i > j)
				break;
			steps++;
			j--;
		}
 
		printf("%d\n", steps);
	}
} 