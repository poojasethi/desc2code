#include <iostream>
#include <string>
#include <algorithm>
#include <cstdio>
#include <map>
#include <vector>
#include <iomanip>
#include <cstring>
#include <bitset>
#include <set>
#include <cstdlib>
#include <sstream>
#include <fstream>
#include <list>
#include <queue>
#include <cassert>
#include <deque>
#include <stack>
#include <ctime>
#include <cmath>

using namespace std;

#define FOR(i, a, b) for(int i = a; i < b; i++)
#define FORN(i, a, b) for (int i = a; i >= b; i--)
#define REP(i, a) FOR(i, 0, a)
#define REPN(i, a) FORN(i, a, 0)
#define FOREACH(it, c) for (typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define CLEAR(b) memset((b), 0, sizeof(b))
#define SET(a, b) memset((a), (b), sizeof(a))
#define setmax(a, b) if (a < b) {a = b;}
#define setmin(a, b) if (a > b) {a = b;}
#define ub(V, x) upper_bound((V).begin(), (V).end(), x)
#define lb(V, x) lower_bound((V).begin(), (V).end(), x)
#define pb push_back
#define mp make_pair

const int INF = 0x3f3f3f3f;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int u32;
#define DEBUG 0

const ll MOD = 1000000007LL;
map<int, ll> m;

ll power(ll a, int b) {

    if (b == 1)
        return ((a % MOD + MOD)) % MOD;
    else if (b == 0)
        return 1LL;
    map<int, ll>::const_iterator mitr = m.find(b);
    if (mitr != m.end())
        return m[b];
    else if (b & 1) {
        m[b] = power(a, b / 2) * power(a, b / 2) * a;
        m[b] = ((m[b] % MOD) + MOD) % MOD;
        return m[b];
    }
    else {
        m[b] = power(a, b / 2) * power(a, b / 2);
        m[b] = ((m[b] % MOD) + MOD) % MOD;
        return m[b];
    }
}

ll solve(int n) {

    m.clear();
    ll temp = power(3LL, n);
    temp = ((temp % MOD) + MOD) % MOD;
    if (n & 1) temp -= 3;
    else temp += 3;
    return ((temp % MOD) + MOD) % MOD;
}

int main() {
#if DEBUG
    freopen("ques.txt", "r", stdin);
    freopen("ans.txt", "w", stdout);
#endif
    int T, N;
    scanf("%d", &T);
    REP(t, T) {
        scanf("%d", &N);
        printf("%lld\n", solve(N));
    }
    return 0;
}
