/*Linear homogenous Recurrence relation
Matrix Exponentiation 

 A(N)        2 3               1
 A(N-1)   =  1 0 ^ (n-2)  *    0

*/

#include<iostream>
#include<cstdio>
#define LL long long int
#define mod 1000000007
using namespace std;
LL temp[2][2]={{1,0},{0,1}};

//Repeated squaring Mat power calc usng mat expon 
void mat_power(LL mat[2][2],LL num)
{	LL a,b,c,d;
	while(num>0)
	{	if(num%2==0)
		{	//mat=(mat%mod*mat%mod)%mod;
		
			a=((mat[0][0]%mod*mat[0][0]%mod)%mod + (mat[0][1]%mod*mat[1][0]%mod)%mod)%mod ;
			b=((mat[0][0]%mod*mat[0][1]%mod)%mod + (mat[0][1]%mod*mat[1][1]%mod)%mod)%mod;
			c=((mat[1][0]%mod*mat[0][0]%mod)%mod + (mat[1][1]%mod*mat[1][0]%mod)%mod)%mod;
			d=((mat[1][0]%mod*mat[0][1]%mod)%mod + (mat[1][1]%mod*mat[1][1]%mod)%mod)%mod;
			
			mat[0][0]=a;
			mat[0][1]=b;
			mat[1][0]=c;
			mat[1][1]=d;
			//printf("A %lld %lld %lld %lld\n",a,b,c,d);
			
			num/=2;
		}
		else
		{	//ans=(ans%mod*temp%mod)%mod;
			
			a=((mat[0][0]%mod*temp[0][0]%mod)%mod + (mat[0][1]%mod*temp[1][0]%mod)%mod)%mod ;
			b=((mat[0][0]%mod*temp[0][1]%mod)%mod + (mat[0][1]%mod*temp[1][1]%mod)%mod)%mod;
			c=((mat[1][0]%mod*temp[0][0]%mod)%mod + (mat[1][1]%mod*temp[1][0]%mod)%mod)%mod;
			d=((mat[1][0]%mod*temp[0][1]%mod)%mod + (mat[1][1]%mod*temp[1][1]%mod)%mod)%mod;
			
			temp[0][0]=a;
			temp[0][1]=b;
			temp[1][0]=c;
			temp[1][1]=d;
			//printf("A %lld %lld %lld %lld\n",a,b,c,d);
			num--;
		}
	}
}
int main()
{
	int t;
	LL n,val,mat[2][2]={{2,3},{1,0}};
	scanf("%d",&t);
	while(t--)
	{	mat[0][0]=2; mat[0][1]=3; mat[1][0]=1; mat[1][1]=0;
		temp[0][0]=1; temp[0][1]=0; temp[1][0]=0; temp[1][1]=1;
		scanf("%lld",&n);
		mat_power(mat,n-2);
		val=(12*temp[0][0])%mod;
		printf("%lld\n",val);
	}
	return 0;
}