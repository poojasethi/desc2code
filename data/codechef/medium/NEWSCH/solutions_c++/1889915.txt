#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <deque>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>

#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define pb push_back
#define mp make_pair
#define sq(x) ((x)*(x))
#define INF 1e9
#define EPS 1e-8
#define PI 3.1415926535897932384626433832795
#define _USE_TESTSYS 0
#define y1 asdf_1
#define y0 asdf_2
typedef unsigned int uint32_t;

using namespace std;

#define MOD (1000000007LL)

struct matr{
	long long m[2][2];
	matr(){
		memset(m,0,sizeof(m));
	}
	void mult(matr *b)
	{
		matr c;
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
				for(int k=0;k<2;k++)
					c.m[i][j]=(c.m[i][j] + (this->m[i][k]*b->m[k][j])%MOD)%MOD;
		(*this)=c;
	}
	void square()
	{
		matr c;
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
				for(int k=0;k<2;k++)
					c.m[i][j]=(c.m[i][j] + (this->m[i][k]*this->m[k][j])%MOD)%MOD;
		(*this)=c;
	}
};

void binpow(matr *m, long long k)
{
	matr t;
	t.m[0][0]=1;
	t.m[0][1]=0;
	t.m[1][0]=0;
	t.m[1][1]=1;
	while(k)
	{
		if(k&1) t.mult(m);
		m->square();
		k>>=1;
	}
	(*m)=t;
}

void solve2()
{
	matr ans;
	ans.m[0][0]=1;
	ans.m[0][1]=0;
	ans.m[1][0]=1;
	ans.m[1][1]=0;
	matr f;
	f.m[0][0]=0;
	f.m[0][1]=1;
	f.m[1][0]=3;
	f.m[1][1]=2;
	int n;
	cin>>n;
	if(n==1) {
		cout<<4;
		return;
	}
	binpow(&f,n);
	ans.mult(&f);
	cout<<(((ans.m[1][0])*4)%MOD);
}

int solve() 
{
    #ifdef _MY_DEBUG
    	#if _USE_TESTSYS
          	ifstream ifs("input.txt", ifstream::in);
        	ofstream ofs("output.txt", ofstream::out|ofstream::trunc);
        	cin.rdbuf(ifs.rdbuf());
        	cout.rdbuf(ofs.rdbuf());
    	#else
        	freopen("input.txt","rt", stdin);
        	freopen("output.txt","wt", stdout);
    	#endif
    #endif
	
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	{
		solve2();
		cout<<endl;
	}

    #if _USE_TESTSYS
        ifs.close();
        ofs.close();
    #endif
    return 0;
}

int main() 
{
    #if _USE_TESTSYS
        ifstream ifs;
        ofstream ofs;
		ofs.open("input.txt", ofstream::out|ofstream::trunc);
		
		ofs.close();
		solve();
	    //ifs.open("output.txt", ifstream::in);
        //ofs.open("input.txt", ofstream::out|ofstream::trunc);
        //ifs.close;
        //ofs.close;
    #else
		solve();
    #endif
    return 0;
}