#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef long double real;
typedef vector<vector<ll> > matrix;

///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR(v) memset(v, 0, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define MOD 1000000007
#define INCMOD(a,b) a = (a+b)%MOD
#define DECMOD(a,b) a = (a+MOD-b)%mod
#define ROUNDINT(a) (int)((double)a + 0.5)
#define INF 2000000000
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
//scanf(" %d ", &t);

const int K = 2;
	 
// computes A * B
matrix mul(matrix A, matrix B)
{
    matrix C(K, vector<ll>(K));
    REP(i, K) REP(j, K) REP(k, K)
        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
    return C;
}
	 
// computes A ^ p
matrix pow(matrix A, int p)
{
    if (p == 1)
        return A;
    if (p % 2)
        return mul(A, pow(A, p-1));
    matrix X = pow(A, p/2);
    return mul(X, X);
}
 
// returns the N-th term of Fibonacci sequence
int rec(int N)
{
    // create vector F1
    vector<ll> F1(K);
    F1[0] = 0;
    F1[1] = 1;
	 
    // create matrix T
    matrix T(K, vector<ll>(K));
    T[0][0] = 0, T[0][1] = 1;
    T[1][0] = 3, T[1][1] = 2;

    ll res = 0;
    // raise T to the (N-1)th power
    if (N <= 2) res = F1[N-1];
    else{
    	T = pow(T, N-1);
 
    	// the answer is the first row of T . F1
    	REP(i, K)
        	res = (res + T[0][i] * F1[i]) % MOD;
    	if(res < 0) res += MOD;
    }
    res = (res*12)%MOD;
    return res;
}

int main(){
	int t, x;
	scanf(" %d ", &t);
	while(t--){
		scanf(" %d ", &x);
		printf("%d\n", rec(x));
	}
}