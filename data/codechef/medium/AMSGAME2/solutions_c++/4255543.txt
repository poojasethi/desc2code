#include <cstdio>
#include <algorithm>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <utility>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cctype>
#include <climits>
#include <string.h>
#include <stdint.h>
#include <unistd.h>
 
using namespace std;
 
int gcd(int a,int b)
{
    if(b>a)
    {
      int temp = a;
      a = b;
      b = temp;
    
    }
    while(b!=0)
    {
      int temp = b;
      b = a%b;
      a = temp;
    }
    return a;
}
class FastInput {
public:
    FastInput() {
        m_dataOffset = 0;
        m_dataSize = 0;
        m_v = 0x80000000;
    }
	
    uint32_t ReadNext() {
        if (m_dataOffset == m_dataSize) {
            int r = read(0, m_buffer, sizeof(m_buffer));
            if (r <= 0) return m_v;
            m_dataOffset = 0;
            m_dataSize = 0;
            int i = 0;
            if (m_buffer[0] < '0') {
                if (m_v != 0x80000000) {
                    m_data[m_dataSize++] = m_v;
                    m_v = 0x80000000;
                }
                for (; (i < r) && (m_buffer[i] < '0'); ++i);
            }
            for (; i < r;) {
                if (m_buffer[i] >= '0') {
                    m_v = m_v * 10 + m_buffer[i] - 48;
                    ++i;
                } else {
                    m_data[m_dataSize++] = m_v;
                    m_v = 0x80000000;
                    for (i = i + 1; (i < r) && (m_buffer[i] < '0'); ++i);
                }
            }
        }
        return m_data[m_dataOffset++];
    }
	
public:
    uint8_t m_buffer[32768];
    uint32_t m_data[16384];
    size_t m_dataOffset, m_dataSize;
    uint32_t m_v;
};
 
 
 
/* End of fast IO*/
 
int main()
{
  int t;
  FastInput obj;
  t = obj.ReadNext();
  while(t--)
  {
    int n;
    n = obj.ReadNext();
    
    int a[1005];
 
    int i,j,k;
    for(i=0;i<n;i++)
      a[i] = obj.ReadNext();
    
    sort(a,a+n);
    
 
    long long dp[10004];
    for(i=0;i<10004;i++)
      dp[i] = 0;
    for(j=0;j<n;j++)
    {
      dp[a[j]] = 1;
    }
    
    for(j=0;j<n;j++)
    {
             
        for(i=1;i<=a[j];i++) 
        {
              if(dp[i]!=0)
              dp[gcd(i,a[j])]+=dp[i];
        
        }
    }
    long long ans = 0;
    ans=dp[1];
    
    printf("%lld\n",ans/2);
  }
 
}
 