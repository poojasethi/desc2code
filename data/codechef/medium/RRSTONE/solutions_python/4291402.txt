#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random
import bisect


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(A, K):
    if K == 0:
        return A
    elif K % 2 == 0 and K != 0:
        K = 2
    else:
        K = 1
    for ia in xrange(K):
        max_ = max(A)
        A = [max_ - i for i in A]

    return A


def main():
    #timed(alg)([random.randint(-2000000000, 2000000000) for i in xrange(100001)], 100000001)
    data = sys.stdin
    N, K = map(int, data.readline().split())  # int
    A = map(int, data.readline().split())  # int
    #L = map(float, data.readline().split())  # float
    #L = data.readline().split()  # string
    #s = data.readline().strip()
    #i = int(data.readline().strip())
    res = alg(A, K)
    print ' '.join(str(a) for a in res)


if __name__ == "__main__":
    main()
