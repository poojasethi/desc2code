#include <bits/stdc++.h>
#define LL long long
using namespace std;

long long a[100004];

struct node{
    LL val,sum ,prefix, suffix,maxsum;
}tree[400005];

void buildtree(int node, int beg,int endd){
    int mid = (beg+endd)/2;
    if(beg==endd){
        tree[node].val=a[beg];
        tree[node].sum = a[beg];
        tree[node].prefix=a[beg];
        tree[node].suffix=a[beg];
        tree[node].maxsum=a[beg];
        return;
    }
    buildtree(node*2,beg,mid);
    buildtree(node*2+1,mid+1,endd);
    tree[node].sum = tree[node*2].sum +tree[node*2+1].sum;

    tree[node].prefix = max(tree[node*2].prefix,tree[node*2].sum+tree[node*2+1].prefix);

    tree[node].suffix = max(tree[node*2].suffix+tree[node*2+1].sum,tree[node*2+1].suffix);

    tree[node].maxsum = max(tree[node*2].suffix+tree[node*2+1].prefix,max(tree[node*2].maxsum,tree[node*2+1].maxsum));
    tree[node].maxsum = max(tree[node].suffix,tree[node].maxsum);
    tree[node].maxsum = max(tree[node].prefix,tree[node].maxsum);
}

void updatetree(int node,int beg, int endd,int idx,LL value){
    int mid = (beg+endd)/2;
    if(idx < beg or idx > endd) return;
    if(beg==endd){
        tree[node].val=value;
        tree[node].sum=value;
        tree[node].prefix=value;
        tree[node].suffix=value;
        tree[node].maxsum=value;
        return;
    }
    updatetree(node*2,beg,mid,idx,value);
    updatetree(node*2+1,mid+1,endd,idx,value);
    tree[node].sum = tree[node*2].sum +tree[node*2+1].sum;
    tree[node].prefix = max(tree[node*2].prefix,tree[node*2].sum+tree[node*2+1].prefix);
    tree[node].suffix = max(tree[node*2].suffix+tree[node*2+1].sum,tree[node*2+1].suffix);
    tree[node].maxsum = max(tree[node*2].suffix+tree[node*2+1].prefix,max(tree[node*2].maxsum,tree[node*2+1].maxsum));

    tree[node].maxsum = max(tree[node].suffix,tree[node].maxsum);
    tree[node].maxsum = max(tree[node].prefix,tree[node].maxsum);
}


LL querytree(int node, int beg, int endd,int left,int right){
    int mid = (beg+endd)/2;
    if(endd < left or beg > right) return -100000000000000000LL;
    if(beg >= left and endd <= right) return tree[node].maxsum;
    if(beg==endd) return tree[node].maxsum;
    LL l = querytree(node*2,beg,mid,left,right);
    LL r = querytree(node*2+1,mid+1,endd,left,right);
    return max(l,r);
}


int main(){
    int T;
    long long N, mx, mex, sum;
    bool pos = false;
    scanf("%d",&T);
    for(int t = 1; t<= T; t++){
        scanf("%lld",&N);
        sum = 0;
        pos = false;
        mex = -100000000000000000LL;
        for(int i = 0; i < N; i++){
            scanf("%lld",&a[i]);
            if(a[i]>= 0) pos=true;
            mex = max(mex,a[i]);
            sum += a[i];
        }
        if(pos==false){
            printf("%lld\n",mex);
        }
        else{
        buildtree(1,0,N-1);
        mx = tree[1].maxsum;
        for(int i = 0; i < N; i++){
            updatetree(1,0,N-1,i,0);
            mx = max(mx,tree[1].maxsum);
            updatetree(1,0,N-1,i,a[i]);
        }
        printf("%lld\n",mx);
        }
    }
    return 0;
}
