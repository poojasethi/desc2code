#include<iostream>
#include<cstring>
#include<cstdio>

using namespace std;

void mergesort(int a[], char c[],int l,int r,int n)
{
   //cout << l << " " << r << endl; 
   if(r-l<=1){
	if(a[l]>a[r]){
	    int t = a[r];
	    a[r] = a[l];
	    a[l] = t;
	    char tc = c[r];
	    c[r] = c[l];
	    c[l] = tc;
	}
	else if(a[l]==a[r])
	{
	    if(c[l]>c[r]){
		char tc = c[r];
		c[r] = c[l];
		c[l] = tc;
	    }
	}
	return;
    }

    int mid  = (l+r)/2;
    mergesort(a,c,l,mid,n);
    mergesort(a,c,mid+1,r,n);
    int temp[n];
    char tempc[n];
    std::fill_n(temp, n, 0);

    int i = l;
    int j = mid+1;
    int k = l;
    while(true)
    {
	if(i>mid || j>r)
	    break;
	if(a[i]<a[j]){
	    temp[k]=a[i];
	    tempc[k]=c[i];
	    k++;
	    i++;
	}
	else if(a[i]==a[j]){
	    temp[k]=a[i];
	    if(c[i]<c[j])
		tempc[k]=c[i++];
	    else
		tempc[k]=c[j++];
	    k++;
	}
	else if(a[i]>a[j]){
	    temp[k]=a[j];
	    tempc[k]=c[j];
	    k++;
	    j++;
	}
    }
    while(k<=r)
    {
	if(i<=mid){
	    temp[k] = a[i];
	    tempc[k]=c[i];
	    k++;
	    i++;
	}
	else if(j<=r){
	    temp[k] = a[j];
	    tempc[k]=c[j];
	    k++;
	    j++;
	}
    }
    k=l;
    while(k<=r)
    {
	a[k]=temp[k];
	c[k]=tempc[k];
	k++;
    }
    return;
}

int main()
{
    int N;
    cin >> N;
    char w[150003];
    while(N--){
	char c[] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	int n=26,i,j,k,l;
	char s[27];
	
	scanf("%s\n",s);
	gets(w);
	int h[26]={0},ind[26]={0};
	//populate hash table
	for(i=0;w[i]!='\0';i++)
	    if(w[i]-0>=65 && w[i]-0<=90)
		h[w[i]-'A']++;
	    else if(w[i]-0>=97 && w[i]-0<=122)
		h[w[i]-'a']++;
	//sort according to freq
	mergesort(h,c,0,n-1,n);

	//find the starting point
	//for(k=0;h[k]!=0;k++);
	for(l=0;l<26;l++){
	    ind[c[l]-'a'] = l;
	}

	for(i=0;w[i]!='\0';i++){
	    if(w[i]-0>=65 && w[i]-0<=90)
		cout << (char)(s[ind[w[i]-'A']]-' ');
	    else if(w[i]-0>=97 && w[i]-0<=122)
		cout << s[ind[w[i]-'a']];
	    else
		cout << w[i];
	}
	cout << endl;
    }
    return 0;
}
