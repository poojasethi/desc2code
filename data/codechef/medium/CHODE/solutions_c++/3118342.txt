#include <stdio.h>
#include <stdlib.h>
#include<string.h>


struct cipher
{
    int index;
    int freq;
};

/**the comparison function required for qsort library function.**/
int comp(const void *a, const void *b)
{
    if(((struct cipher*) a)->freq < ((struct cipher*) b)->freq)
        return -1;
    else if(((struct cipher*) a)->freq > ((struct cipher*) b)->freq)
        return 1;
    else if(((struct cipher*) a)->index <((struct cipher*) b)->index)
        return -1;
    else if(((struct cipher*) a)->index >((struct cipher*) b)->index)
        return 1;
    else
        return 0;

}

int main()
{
    int t,i;
    char ciphertext[150005];
    struct cipher c[26];        //To store frquency of all 26 letters.
    char s[27];

    scanf("%d", &t);        //no of testcases.
    //printf("%d", sizeof(struct cipher));
while(t--){
    scanf("%s\n",s);

    fgets(ciphertext, 150005, stdin);
    int l=strlen(ciphertext);
    //printf("%d", l) ;
    ciphertext[l-1]='\0';  //Putting null character at the end of the cipher.

    for(i=0;i<26;i++)  //Initializing the sequence for the cipher.
      {
            c[i].index=i;
            c[i].freq=0;
      }

     char *ptr = ciphertext;    //set a pointer to the ciphertext

     //Iteration to find the frequency of individual letters and store in the array of structure defined b4hand.
     while(*ptr!='\0')
      {
            if((*ptr)>='a' && (*ptr)<='z')
            {
              (c[(*ptr)-'a'].freq)+=1;
            }

            else if(((*ptr)>='A' && (*ptr)<='Z'))
            {
               (c[(*ptr)-'A'].freq)+=1;
            }
            ptr++;
        }

     char ans[26];   //a character array.

     qsort(c,26,sizeof(struct cipher),comp);    //C library function to sort the array c

     for(i=0;i<26;i++)
     {
      ans[c[i].index]=i;  //updating the character array ans.
     }

     ptr=ciphertext;   //make ptr point to ciphertext again.

     /****printing the decrypted string****/
     while(*ptr!='\0')
      {
            if(*ptr>='a' && *ptr<='z')
            {
            printf("%c",s[ans[*ptr-'a']]);
            }

            else if(*ptr>='A' && *ptr<='Z')
            {
            printf("%c",s[ans[*ptr-'A']]-'a'+'A');
            }

            else
            printf("%c",*ptr);

            ptr++;
       }
      printf("\n");

    //scanf("%d");
}
//endof all testcases.
    return 0;
}
