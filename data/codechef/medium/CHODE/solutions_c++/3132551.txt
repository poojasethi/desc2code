#include <iostream>
#include <cstdio>
#include <algorithm>
#include <memory.h>
#include <cstring>

#define SIZE 150001
#define SIZE2 26

using namespace std;

int orig_freq[SIZE2];
char freq_string[SIZE], enc_string[SIZE];

struct gp {
	char c;
	int freq;
} enc_freq[SIZE2];

bool comp(const gp &a, const gp &b) {
	return (a.freq < b.freq);
}

void init_struct(void) {
	for(char c='a'; c<='z'; c++) {
		enc_freq[c-'a'].c = c;
		enc_freq[c-'a'].freq = 0;
	}
}

int main() {
	int T, i, n;

	scanf("%d\n", &T);

	while(T--) {
		scanf("%s\n", freq_string);
		fgets(enc_string, SIZE, stdin);
		//n = i;
		n = strlen(enc_string);
		//printf("%s\n%s\n", freq_string, enc_string);
		//printf("%d\n", n);

		memset(orig_freq, 0, sizeof(orig_freq));
		for(i=0; i<SIZE2; i++)
			orig_freq[freq_string[i]-97] = i;
		/*for(i=0; i<SIZE2; i++)
			printf("%d ", orig_freq[i]);
		printf("\n");*/

		init_struct();
		for(i=0; i<n; i++) {
			char c = enc_string[i];
			if(c >= 65 && c <= 90)
				enc_freq[c-65].freq++;
			else if(c >= 97 && c <= 122)
				enc_freq[c-97].freq++;
		}
		stable_sort(enc_freq, enc_freq+SIZE2, comp);
		/*for(i=0; i<SIZE2; i++)
			printf("%c ", enc_freq[i].c);
		printf("\n");*/

		for(i=0; i<SIZE2; i++)
			orig_freq[enc_freq[i].c-97] = i;
		/*for(i=0; i<SIZE2; i++)
			printf("%d ", orig_freq[i]);
		printf("\n");*/

		for(i=0; i<n; i++) {
			char c = enc_string[i];
			if(c >= 65 && c <= 90)
				enc_string[i] = freq_string[orig_freq[c-65]]-32;
			else if(c >= 97 && c <= 122)
				enc_string[i] = freq_string[orig_freq[c-97]];
		}

		printf("%s", enc_string);
	}
	return 0;
}