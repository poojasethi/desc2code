#include<iostream>
#include <stdio.h>
#include<string>
#include <map>
#include <algorithm>

using namespace std;

#define SIZE 27
#define LEN_S 150001

class stack { 
public:
  int topOfStack;              // index of top-of-stack
  char stackData[SIZE];        // holds the stack
  stack() { topOfStack = 0; }
  void push(char ch)
  {
    stackData[topOfStack] = ch;
    topOfStack++;
  }

  char pop()
  {
    if(topOfStack==0) {
      return 0;                // return null on empty stack 
    }
    topOfStack--;
    return stackData[topOfStack];
  }
  
  int empty(){
    if(topOfStack==0) {
      return 1;                // return null on empty stack 
    }
	return 0;  	
  }
};

bool wayToSort(int i, int j) { return i > j; }

int main(){
	int t;
	string fs, c;
	char ch;

	scanf("%d ", &t);
	while(t--){
		string d;
		long int freq[125] = {0};
		int pushed[125] = {0};
		map<long int, stack> hash1;
		map<char, char> hash2;

		std::getline(std::cin, fs);
		std::getline(std::cin, c);
		
		long int len = c.length();
		int len2 = fs.length();
		int len3 = 0;

		for(int i=0; i<len; i++){
			if(isalpha(c[i])){
				d += tolower(c[i]);
			}
		}
	
		len3=d.length();
	
		for(int i=0; i<len3; i++){
			freq[d[i]] += 1;
		}

		for(int i=0; i<len3; i++){
			if(!pushed[d[i]]){
				hash1[freq[d[i]]].push(d[i]);
				pushed[d[i]] = 1;
			}
		}
//
//		for (std::map<long int, stack>::reverse_iterator iter = hash1.rbegin(); iter != hash1.rend(); ++iter)
//		{
//			sort(iter->second.stackData, iter->second.stackData+iter->second.topOfStack, wayToSort);
//			printf("%d => ", iter->first);
//			while(!iter->second.empty()){
//				printf("%c ", iter->second.pop());
//			}
//		}

		for (std::map<long int, stack>::reverse_iterator iter = hash1.rbegin(); iter != hash1.rend(); ++iter)
		{
			sort(iter->second.stackData, iter->second.stackData+iter->second.topOfStack);
//			printf("%ld", iter->first);
			while(!iter->second.empty()){
//				printf("%c %d\n", fs[len2-1], len2-1);
				hash2[iter->second.pop()] = fs[len2-1];
				len2--;
			}
		}

//		for (std::map<char, char>::reverse_iterator iter = hash2.rbegin(); iter != hash2.rend(); ++iter)
//		{
//			printf("%c => %c", iter->first, iter->second);
//		}
//		printf("\n");
//
		for(int i=0; i<len; i++){
			if(isalpha(c[i])){
				if(isupper(c[i])){
					printf("%c", toupper(hash2[tolower(c[i])]));
				}else{
					printf("%c", hash2[c[i]]);
				}
			}else{
				printf("%c", c[i]);
			}
		}
		printf("\n");

//		for(int i=LEN_S-1; i>=0; i--){
//			if(hash[i].empty()){
//				continue;
//			}else{
//				while(!hash[i].empty()){
//					len2--;
//					sol[hash.pop()]	= fs[len2];
//				}
//			}
//		}
	}
}