
    #include <iostream>
     
    #define MAX_INPUT_VALUE 100000
    int cumm_diffs[MAX_INPUT_VALUE + 1];
    int solutions[MAX_INPUT_VALUE + 1];
     
    inline int get_diff_4_7(int number)
    {
    int current_diff = 0;
    while(number)
    {
    switch(number % 10)
    {
    case 4:
    current_diff++;
    break;
    case 7:
    current_diff--;
    break;
    }
    number /= 10;
    }
    return current_diff;
    }
     
    inline int build_diffs()
    {
    int max_diff = 0;
    int current_diff = 0;
    for(int i = 0; i <= MAX_INPUT_VALUE; i++)
    {
    current_diff += get_diff_4_7(i);
    cumm_diffs[i] = current_diff;
    if(current_diff > max_diff)
    max_diff = current_diff;
     
    if(current_diff < 0)
    std::cout << "wtf?";
    }
    return max_diff;
    }
     
    inline void build_solutions(const int & max_diff)
    {
    int * diff_occurences_count = new int[max_diff + 1];
    int current_solution_count = 0;
    for(int i = 0; i <= MAX_INPUT_VALUE; i++)
    {
    int current_diff = cumm_diffs[i];
    current_solution_count += diff_occurences_count[current_diff];
    diff_occurences_count[current_diff] += 1;
    solutions[i] = current_solution_count;
    }
    delete [] diff_occurences_count;
    }
     
    void read_and_process()
    {
    int n;
    std::cin >> n;
    for(int i = 0; i < n; i++)
    {
    int value;
    scanf("%d", &value);
    // std::cin >> value;
    std::cout << solutions[value] << std::endl;
    }
    }
     
    int main()
    {
    int max_diff = build_diffs();
    build_solutions(max_diff);
    read_and_process();
    }
