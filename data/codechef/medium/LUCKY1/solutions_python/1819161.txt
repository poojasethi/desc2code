# for each number calculate #4 and #7
# for each number calculate #4 - #7
# for each number calculate Sn = sum(1-n)(#4 - #7)
# for k, l are a solution when Sk = Sl 
#
# naive solution:
# for each L and R

import sys
from datetime import datetime

def read_int():
	return int(sys.stdin.readline())

def count_digits(number):
	digit_counters = [0 for i in range(10)]
	
	# if zero is ever important, add this:
	# if number == 0: digit_counters[0] = 1
	
	while number > 0:
		digit = number % 10
		digit_counters[digit] += 1
		number /= 10
	
	return digit_counters

def diff_number_of_digits(number, digit1, digit2):
	digit_counters = count_digits(number)
	return digit_counters[digit1] - digit_counters[digit2]
	
def build_diff_list(max):
	# if zero is ever important, handle here (this won't be zero in this case)
	
	current_diff = 0
	diff_list = [0]
	
	for i in xrange(max):
		current_diff += diff_number_of_digits(i + 1, 4, 7)
		diff_list.append(current_diff)
		
		# if current_diff < 0: raise IndexError("Negative diffs not allowed!")
		
	return diff_list

def count_solutions_naive(diff_list):
	"For each x + 1, the S(x+1) = S(x) + number of k < x that diff_list[k] == diff_list[x]"
	
	solution_count_list = []
	current_count = 0
	
	for i in xrange(len(diff_list)):
		current_diff = diff_list[i]
		new_solutions = 0
		
		# New solutions will have R == i and diff_list[L] == diff_list[R]
		for j in xrange(i):
			if diff_list[j] == current_diff:
				new_solutions += 1
		
		current_count += new_solutions
		solution_count_list.append(current_count)
		
	return solution_count_list

def count_solutions_fast(diff_list):
	"Like naive version, but caches the number of k so far for each value of diff_list[x]"
	"Makes the assumption that the first special digit is smaller than the second one"
	
	solution_count_list = []
	current_count = 0
	
	diff_occurences_count = [0 for i in xrange(max(diff_list) + 1)]
	
	for i in xrange(len(diff_list)):
		current_diff = diff_list[i]
		new_solutions = diff_occurences_count[current_diff]
		current_count += new_solutions
		solution_count_list.append(current_count)

		diff_occurences_count[current_diff] += 1
		
	return solution_count_list
	
def real_main():
	diff_list = build_diff_list(100000)
	fast_solution_count_list = count_solutions_fast(diff_list)

	num_numbers = read_int()
	for i in xrange(num_numbers):
		number = read_int()
		print fast_solution_count_list[number]

def test_main():
	diff_list = build_diff_list(100000)
	# naive_solution_count_list = count_solutions_naive(diff_list)
	fast_solution_count_list = count_solutions_fast(diff_list)
	naive_solution_count_list = fast_solution_count_list 

	num_numbers = read_int()
	for i in xrange(num_numbers):
		number = read_int()
		digit_counters = count_digits(number)
		print "{number:>6}:  4s: {number_of_4s} 7s: {number_of_7s}  total diff: {cumm_digit_diff:>6}  total solutions (naive): {cumm_solutions_naive:>10}  total solutions (fast): {cumm_solutions_fast:>10}".format(
			number=number, 
			number_of_4s = digit_counters[4], 
			number_of_7s = digit_counters[7],
			cumm_digit_diff = diff_list[number],
			cumm_solutions_naive = naive_solution_count_list[number],
			cumm_solutions_fast = fast_solution_count_list[number])
			
def test_run():
	start_time = datetime.now()
	print "Starting at " + str(start_time)
	print

	test_main()

	finish_time = datetime.now()
	print
	print "Finished at " + str(finish_time)
	print "Execution time: " + str(finish_time - start_time)
	
#test_run()
real_main()