#include <stdio.h>
#include <string.h>
#define fmin(a,b)(a<b?a:b)
#define MOD 1000000007
 
/*
f(a, e, v)
1 0 1 = 1
0 1 0 = 1
2 0 v = f(1, 0, v-2) * g()
f(a, e, v) = SIGMA f(i, (a+e)/2-i, v-a) * g(a-i, e-..., v-a-1))
g(a, e, v) = SIGMA f(a, e, i..v)
*/
 
int dpF[51][51][1001];
int dpG[51][51][1001];
 
int F(int a, int e, int v);
int G(int a, int e, int v);
 
int F(int a, int e, int v){
  if(v<0) return 0; //sentinel
  if(a == 0) return v == 0; //if a is 0, v must be 0
  if((a+e == 1)&&(v>1)) return 0; //only 1 char, cannot split
  if(v > 153) return 0; //there's NO WAY a<=50 && e<=50 will produce v > 152
  if(dpF[a][e][v] != -1) return dpF[a][e][v];
  
  int ans = 0;
  
  int k = (a+e)/2; //split the string
  int maxa = fmin(a, k); //max A in the left string
  
  for(int i=0; i<=maxa; i++){
    if((k-i < 0)||(e-k+i < 0)) continue;
    //left string value is v-a, right string less than it
    int temp = (long long)F(i, k-i, v-a) * G(a-i, e-k+i, v-a-1) % MOD;
    ans += temp;
    ans %= MOD;
    //right string value is v-a, left string less than it
    temp = (long long)G(i, k-i, v-a-1) * F(a-i, e-k+i, v-a) % MOD;
    ans += temp;
    ans %= MOD;
    //both left and right string value is v-a
    temp = (long long)F(i, k-i, v-a) * F(a-i, e-k+i, v-a) % MOD;
    ans += temp;
    ans %= MOD;
  }
  
  dpF[a][e][v] = ans;
  //printf("F %d %d %d = %d\n", a, e, v, ans);
  return ans;
}
 
int G(int a, int e, int v){
  if(v < 0) return 0;
  if(dpG[a][e][v] != -1) return dpG[a][e][v];
  
  int ans = 0;
  for(int i=0; i<=v; i++){
    ans += F(a, e, i);
    ans %= MOD;
  }
  
  dpG[a][e][v] = ans;
  //printf("G %d %d %d = %d\n", a, e, v, ans);
  return ans;
}
 
int main(){
  memset(dpF, -1, sizeof(dpF));
  memset(dpG, -1, sizeof(dpG));
  
  dpF[0][0][0] = 1;
  dpF[0][0][1] = 0;
  dpF[0][1][0] = 1;
  dpF[0][1][1] = 0;
  dpF[1][0][0] = 0;
  dpF[1][0][1] = 1;
  
  int a, e, v;
  int jcase;
  
  scanf("%d", &jcase);
  for(int icase=0; icase<jcase; icase++){
    scanf("%d %d %d", &a, &e, &v);
    printf("%d\n", F(a, e, v));
  }
  return 0;
}