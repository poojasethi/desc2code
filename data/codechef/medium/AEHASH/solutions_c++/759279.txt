#include <cstdio>
#include <algorithm>

using namespace std;

// TODO: use buffered input
// TODO: use buffered output

const int MOD = 1000000007;
const int ASIZE = 50;
const int ESIZE = 50;
const int VSIZE = 1000;

unsigned long long dp[ASIZE+1][ESIZE+1][VSIZE+1];
int acc_sum[ASIZE+1][ESIZE+1][VSIZE+1];

void calculate()
{
    dp[1][0][0] = 0;

    acc_sum[1][0][1] = dp[1][0][1] = 1;
    acc_sum[0][0][0] = dp[0][0][0] = 1;

    for(int v=2; v<=152; v++)
	acc_sum[1][0][v] = acc_sum[1][0][v-1];

    for(int v=1; v<=152; v++)
	acc_sum[0][0][v] = acc_sum[0][0][v-1];

    for(int e=1; e<=ESIZE; e++)
    {
        acc_sum[0][e][0] = dp[0][e][0] = 1;
        for(int v=1; v<=152; v++)
            acc_sum[0][e][v] = acc_sum[0][e][v-1] + dp[0][e][v];
    }

    int N, lsize, rsize, maxv;
    for (int a=1; a<=ASIZE; a++)
        for (int e=0; e<=ESIZE; e++)
        {
            N = a + e, lsize = N/2, rsize = N - lsize;
            for(int v=1; N>=2 && v<=152; v++)
            {
                maxv = v - a;  
                for(int i=0; i<=min(a, lsize); i++)
                {
                    if (lsize-i<=e) 
                    {
                        dp[a][e][v] += (dp[i][lsize-i][maxv]
					* dp[a-i][e-(lsize-i)][maxv]);
                        dp[a][e][v] += (dp[i][lsize-i][maxv] 
				        * acc_sum[a-i][e-(lsize-i)][maxv-1]);
                        dp[a][e][v] += (acc_sum[i][lsize-i][maxv-1] 
					* dp[a-i][e-(lsize-i)][maxv]);
                        dp[a][e][v] %= MOD;
                    }
                }
                acc_sum[a][e][v] = acc_sum[a][e][v-1] + dp[a][e][v];
                acc_sum[a][e][v] %= MOD;
            }
        }
}

int main()
{
    int T, A, E, V;
    calculate();
    scanf("%d", &T);
    for (; T > 0; T--)
    {
        scanf("%d%d%d", &A, &E, &V);
        printf("%lld\n", dp[A][E][V]);
    }
    return 0;
}
