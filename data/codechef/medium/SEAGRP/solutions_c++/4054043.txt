#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
vector<int>G[107];
int vis[107],P[107];
int n;
bool dfs(int in)
{
    vis[in]=1;
    int mt=0;
    for(int i=0;i<G[in].size();i++)
    {
        if(vis[G[in][i]]==1) continue;
        if(P[G[in][i]]==-1)
        {
            mt=1;P[G[in][i]]=in;P[in]=G[in][i];
        }
        else
        {
            vis[G[in][i]]=1;
            if(dfs(P[G[in][i]]))
            {
                mt=1;P[G[in][i]]=in;P[in]=G[in][i];
            }
            vis[G[in][i]]=0;
        }
        if(mt==1) break;
    }
    vis[in]=0;
    return mt;
}
void kuhn_s()
{
    memset(P,-1,sizeof(P));
    memset(vis,-1,sizeof(vis));
    int fl,ans=0;
    do
    {
        fl=0;
        for(int i=1;i<=n;i++)
        {
            if(P[i]==-1)
            {
                if(dfs(i))
                {
                    fl=1;
                    ans++;
                    break;
                }
            }
        }
    }while(fl!=0);
    if(ans*2==n) cout<<"YES\n";
    else cout<<"NO\n";
}     
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        for(int i=0;i<107;i++) G[i].clear();
        int m;
        cin>>n>>m;
        while(m--)
        {
            int x,y;
            cin>>x>>y;
            G[x].push_back(y);
            G[y].push_back(x);
        }
        kuhn_s();
    }
    return 0;
}
