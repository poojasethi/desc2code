#include <iostream>
#include <cstring>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <iomanip>
#include <algorithm>
#include <memory>

using namespace std; 

const int MAXN = 111;

int n;
vector<int> g[MAXN];
int match[MAXN], p[MAXN], base[MAXN], q[MAXN];
bool used[MAXN], blossom[MAXN];

int lca (int a, int b) {
	bool used[MAXN] = { 0 };
	for (;;) {
		a = base[a];
		used[a] = true;
		if (match[a] == -1)  break; // ????? ?? ?????
		a = p[match[a]];
	}
	for (;;) {
		b = base[b];
		if (used[b])  return b;
		b = p[match[b]];
	}
}

void mark_path (int v, int b, int children) {
	while (base[v] != b) {
		blossom[base[v]] = blossom[base[match[v]]] = true;
		p[v] = children;
		children = match[v];
		v = p[match[v]];
	}
}

int find_path (int root) {
	memset (used, 0, sizeof used);
	memset (p, -1, sizeof p);
	for (int i=0; i<n; ++i)
		base[i] = i;

	used[root] = true;
	int qh=0, qt=0;
	q[qt++] = root;
	while (qh < qt) {
		int v = q[qh++];
		for (size_t i=0; i<g[v].size(); ++i) {
			int to = g[v][i];
			if (base[v] == base[to] || match[v] == to)  continue;
			if (to == root || (match[to] != -1 && p[match[to]] != -1)) {
				int curbase = lca (v, to);
				memset (blossom, 0, sizeof blossom);
				mark_path (v, curbase, to);
				mark_path (to, curbase, v);
				for (int i=0; i<n; ++i)
					if (blossom[base[i]]) {
						base[i] = curbase;
						if (!used[i]) {
							used[i] = true;
							q[qt++] = i;
						}
					}
			}
			else if (p[to] == -1) {
				p[to] = v;
				if (match[to] == -1)
					return to;
				to = match[to];
				used[to] = true;
				q[qt++] = to;
			}
		}
	}
	return -1;
}


int main() {
	int T,i,ok;
	cin >> T;
	while (T){
		T--;
		int m, xx, yy;
		cin >> n >> m;
		if (n > 100) exit(0); 
		for (i=0;i<n;i++){
			g[i].clear();
		}
		for (i=1;i<=m;i++){
			cin >> xx >> yy;
			xx--;yy--;
			g[xx].push_back(yy);
			g[yy].push_back(xx);
		}


		memset (match, -1, sizeof match);
		for (i=0; i<n; ++i)
			if (match[i] == -1) {
				int v = find_path (i);
				while (v != -1) {
					int pv = p[v],  ppv = match[pv];
					match[v] = pv,  match[pv] = v;
					v = ppv;
				}
			}
		ok = 1;
		for (i=0;i<n;i++)
			if (match[i] == -1) ok = 0;
		if (ok) cout << "YES\n"; else cout << "NO\n";    
	}
}

