#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <algorithm>

using namespace std;

vector<int> adj[1005];
int Partner[1005], Parent[1005], Base[1005];
bool Used[1005], blossom[1005];
int AugmentingPath(int , int);
int FindHead(int , int);
void TrackPath(int , int , int);


void Solve(int n)
{
    int GParent,GGParent;
    for (int i=0; i<n; i++)
    {
        if (Partner[i]==-1)
        {
            int v=AugmentingPath(i,n);
            while(v!=-1)
            {
                GParent=Parent[v];
                GGParent=Partner[GParent];
                Partner[v]=GParent;
                Partner[GParent]=v;
                v=GGParent;
            }
        }
    }
    return ;
}

int main()
{
    int t,n,m,x,y,ok;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d %d",&n,&m);

        for (int i=0; i<n; i++)
        {
            adj[i].clear();
            Partner[i]=-1;
        }

        for (int i=1; i<=m; i++)
        {
            scanf("%d %d",&x,&y);
            x--;
            y--;
            adj[x].push_back(y);
            adj[y].push_back(x);
        }

        Solve(n);

        ok = 1;
        for (int i=0;i<n;i++)
        {
            if(Partner[i]==-1)
            {
                ok=0;
            }
        }
        if (ok) cout << "YES\n"; else cout << "NO\n";
    }//end of test cases
}//end of main
int AugmentingPath(int root , int n)
{
	//memset (Used, 0, sizeof(Used));
	//memset (Parent, -1, sizeof(Parent));

	for(int i=0; i<=1000; i++)
    {
        Used[i]=false;
        Parent[i]=-1;
    }
	for (int i=0; i<n; i++)
    {
		Base[i]=i;
    }
    queue<int> Q;
    Q.push(root);
	Used[root]=true;
	while(!(Q.empty()))
	{
		int v=Q.front();
		Q.pop();
		for (int i=0; i<adj[v].size(); i++)
        {
			int node=adj[v][i];
			if (Base[v]==Base[node] || Partner[v]==node)
            {
                continue;
            }
			if (node==root || Partner[node]!=-1 && Parent[Partner[node]]!=-1)
            {
				int Temp=FindHead(v,node);
				memset(blossom,0,sizeof(blossom));
				TrackPath(v,Temp,node);
				TrackPath(node,Temp,v);
				for(int i=0; i<n; ++i)
				{
					if (blossom[Base[i]])
                    {
						Base[i]=Temp;
						if(Used[i]==false)
						{
							Used[i]=true;
							Q.push(i);
						}
					}
				}
			}
			else if(Parent[node]==-1)
            {
				Parent[node]=v;
				if(Partner[node]==-1)
				{
					return node;
				}
				node=Partner[node];
				Used[node]=true;
				Q.push(node);
			}
		}
	}
	return -1;
}
int FindHead(int x , int y)
{
    bool Track[1005];
	for(int i=0; i<=1000; i++)
    {
        Track[i]=0;
    }
	while(1)
    {
		x=Base[x];
		Track[x]=true;
		if (Partner[x]==-1)
		{
		    break;
		}
		x=Parent[Partner[x]];
	}
	while(1)
    {
		y=Base[y];
		if(Track[y]==true)
		{
		    return y;
		}
		y=Parent[Partner[y]];
	}
}
void TrackPath(int v, int b, int children)
{
	while (Base[v]!=b)
    {
		blossom[Base[v]]=true;
        blossom[Base[Partner[v]]]=true;

		Parent[v]=children;
		children=Partner[v];

		v=Parent[Partner[v]];
	}
	return ;
}
