#include<bits/stdc++.h>
using namespace std;
int SET[101];
int T,src, dest, V, E;
class Graph
{
    int V;
    list<int> *garray;
public:
    Graph(int x);
    void addEdge(int src, int dest);
    bool bruteforceBip();
    void show();
};
void Graph::show()
{
    for(int i = 1;i<=V;i++)
    {
        list<int>::iterator it;
        for(it = garray[i].begin();it!=garray[i].end();it++)
            cout<<*it<<" ";
        cout<<endl;
    }
}
Graph::Graph(int x)
{
    this->V = x;
    garray = new list<int>[V+1];
}
void Graph::addEdge(int src, int dest)
{
    garray[src].push_back(dest);
    garray[dest].push_back(src);
}
bool Graph::bruteforceBip()
{
    for(int i = 1;i<=V;i++)
    {
        if(SET[i]==0)
        {
            list<int>::iterator it;
            for(it = garray[i].begin();it!=garray[i].end();it++)
            {
                if(SET[*it]==0)
                {
                    SET[*it] = 1;SET[i] = 1;
                    if(bruteforceBip()==true)return true;
                    SET[*it] = 0;SET[i] = 0;
                }
            }
            return false;
        }
    }
    return true;
}
int main()
{
    cin>>T;
    while(T--)
    {
        cin>>V>>E;
        Graph G(V);
        for(int i = 0;i<=100;i++)SET[i] = 0;
        while(E--)
        {
            cin>>src>>dest;
            G.addEdge(src,dest);
        }
        if(G.bruteforceBip()==true)cout<<"YES\n";else cout<<"NO\n";
    }
    return 0;
}
