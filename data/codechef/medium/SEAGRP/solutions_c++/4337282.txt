#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<climits>
#include<queue>
#include<math.h>
#include<algorithm>
#define LL long long int
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define SL(N) scanf("%lld",&N);
#define pb push_back
#define mp make_pair
#define pnl printf("\n");
#define FOR(i,a,b) for (i=a;i<=b;i++)
#define mem(a,val) memset(a,val,sizeof(a))
using namespace std;
int gcd(int a, int b){ int temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
vector<int>cap[104];
int matched[104];
bool vis[104];
int V,E,src,dest,path_cap;

bool bpm(int node)
{
    int x;
    vis[node]=true;
    for(int i=0;i<cap[node].size();i++)
    {
        x= cap[node][i];
        if(vis[x]==false)
        {
            vis[x]=true;
            if(matched[x]==0 || ( bpm(matched[x])==true)) // i is not matched yet or another match of i exists
            {
                matched[x]=node;
                matched[node]=x;
                return true;
            }
        }
    }
    return false;
}
main()
{
 //       freopen("C:\\Users\\sanjeev1779\\Desktop\\codechef\\input.txt", "r", stdin);
      // freopen("C:\\Users\\sanjeev1779\\Desktop\\codechef\\output.txt", "w", stdout);
      int i,j,t,u,v,wt;
      S(t);
      while(t--)
      {
            S(V) S(E)
            for(i=0;i<=102;i++)cap[i].clear();
            for(i=0;i<E;i++)
            {
                S(u) S(v)
            //    cap[u][v]=1; cap[v][u]=1;
                cap[u].pb(v);
                cap[v].pb(u);
            }
            bool flag=true,x;
            mem(matched,0);

            for(v=1;v<=V;v++)
            {
                if(matched[v]==0)
                {
                    mem(vis,false);
                    x=bpm(v);
                    if(x==false)// unmatched
                    {
                        flag=false;
                        break;
                    }
                }
            }

            if(flag==false)
                printf("NO\n");
            else printf("YES\n");
      }
return 0;
}
