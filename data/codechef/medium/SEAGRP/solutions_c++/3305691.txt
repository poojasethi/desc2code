#include<iostream>
#include<cstdlib>
using namespace std;

typedef struct node
{
	int v;
	node* next;
}node;

bool v[102];
node* a[102];

node* addatbeg(node* head, node* temp)
{
	temp->next=head;
	return temp;
}

bool perfect_match(int n,int c)
{
	if(c==n)	return true;

	int i;
	node* ptr;

	for(i=0;i<n;i++)
	{
		if(!v[i])
		{
			ptr=a[i];

			while(ptr!=NULL){
				if(!v[ptr->v]){
					v[i]=v[ptr->v]=true;
					c+=2;
					if(perfect_match(n,c))	return true;

					v[i]=v[ptr->v]=false; c-=2;
				}//end of if
				ptr=ptr->next;
			}//end of while
			return false;
		}

	}
	return false;

}


bool solve(int n)
{
	int c=0;
	if(n&1) return false;

	return perfect_match(n,c);
}


int main()
{
	int t,n,i,m,start,end;
	node *temp;
	cin>>t;

	while(t--)
	{
		cin>>n>>m;

		for(i=0;i<n;i++)
		{
			v[i]=false;
			a[i]=NULL;
		}

		for(i=0;i<m;i++)
		{
			cin>>start>>end;
			temp=new node;
			temp->v=end-1;
			a[start-1]=addatbeg(a[start-1],temp);
			temp=new node;
			temp->v=start-1;
			a[end-1]=addatbeg(a[end-1],temp);
		}

		if(solve(n))	cout<<"YES\n";
		else cout<<"NO\n";
	}

	return 0;
}
