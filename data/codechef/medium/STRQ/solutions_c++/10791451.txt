//Amit Gupta              
#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<int,int> II;
#define REP(i,i1,n) for(int i=i1;i<n;i++)
#define REPB(i,i1,n) for(int i=i1;i>=n;i--)
#define PB push_back
#define MP make_pair
#define ALL(c) (c).begin(),(c).end()
#define F first
#define S second
#define SZ(a) (LL)a.size()
#define EPS 1e-12
#define MOD 1000000007
#define TR1(x) cerr<<#x<<" : "<<x<<endl
#define TR2(x,y) cerr<<#x<<" : "<<x<<" | "<<#y<<" : "<<y<<endl
#define FAST_IO ios_base::sync_with_stdio(false);cin.tie(NULL)
#define SI(c) scanf("%d",&c)
#define SII(c,d) scanf("%d%d",&c,&d)
#define SLL(c) scanf("%lld",&c)
#define PIN(c) printf("%d\n",c)
#define PLLN(c) printf("%lld\n",c)
#define N 1000010
#define endl '\n'
#define FILL(ar,vl) for(int i=0;i<N;i++)ar[i]=vl
#define FILL2(ar,vl) for(int i=0;i<N;i++)for(j=0;j<N;j++)ar[i][j]=vl
//--------------------------MAIN CODE STARTS HERE----------------
char s[N];int q,l,r;
LL ans[N][4][4],cnt[N][4];

void build() {
    int len=strlen(s);
    REP(i,0,len) {
        if(s[i]=='c')s[i]='a';
        if(s[i]=='e')s[i]='b';
        if(s[i]=='f')s[i]='c';
        if(s[i]=='h')s[i]='d';
    }
    REPB(i,len-1,0) {
        REP(j,0,4)
            cnt[i][j]=cnt[i+1][j];
        cnt[i][s[i]-'a']++;
        REP(j,0,4)
            REP(k,0,4)
                ans[i][j][k]=ans[i+1][j][k];
        REP(j,0,4) {
            ans[i][s[i]-'a'][j]+=cnt[i][j];
        }
    }
 //   REPB(i,len,0) 
   //    TR1(ans[i][0][2]);
}


int main()
{	
    scanf("%s",s);
    build();
    SI(q);
    while(q--) {
        char c1,c2,str[2],str1[2];
        scanf("%s%s",str,str1);
        c1=str[0];c2=str1[0];
        if(c1=='c')c1='a';
        if(c1=='e')c1='b';
        if(c1=='f')c1='c';
        if(c1=='h')c1='d';
        if(c2=='c')c2='a';
        if(c2=='e')c2='b';
        if(c2=='f')c2='c';
        if(c2=='h')c2='d';
        SII(l,r);
        l--;r--;
        LL nm1=cnt[l][c1-'a'],nm2=cnt[r+1][c1-'a'];
        LL nm3=cnt[l][c2-'a'],nm4=cnt[r+1][c2-'a'];
        LL vl=(nm1-nm2)*(nm4);
        PLLN(ans[l][c1-'a'][c2-'a']-vl-ans[r+1][c1-'a'][c2-'a']);
    }
    return 0;
}
