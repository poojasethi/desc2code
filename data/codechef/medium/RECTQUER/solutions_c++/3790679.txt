#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <set>

using namespace std;

const int maxSiz=300;
int t,n,q;

struct single_Dig
{
	set<long> Matrix[maxSiz];
	bool k_appear(int start_r, int end_r,int pos,int range)
	{ 
		bool found=false;
		for(int i=start_r-1; i<end_r; i++)
		{
			set<long>::iterator itr;
			itr=Matrix[i].lower_bound(pos);
			if(itr!=Matrix[i].end())
			{
				if(*itr<=range)
				{
					found=true;
					break;
				}
			}
		}
		return found;
	}
};

single_Dig allDig[10];

int main()
{
	scanf("%d", & n);
	for(int i=0; i<n; i++)
	{
		for(int j=0; j<n; j++)
		{
			int a;
			scanf("%d", &a);
			allDig[a%10].Matrix[i].insert(j+1);
		}
	}
	scanf("%d",& q);
	for(int i=0; i<q; i++)
	{
		int x1,y1,x2,y2;
		
		scanf("%d", & x1);
		scanf("%d", & y1);
		scanf("%d", & x2);
		scanf("%d", & y2);
		
		int count=0;
		for(int j=0; j<10; j++)
		{
			bool found=allDig[j].k_appear(x1,x2,y1,y2);
			if(found) count++;
		}
		printf("%d\n",count);
	}
}
