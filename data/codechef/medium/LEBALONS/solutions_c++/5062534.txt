#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}

ll dp1[50][50],dp2[50][50];

int main() {

    int test,a,b,n,m,color[50],cost[50],k;
    inp(test);
    while(test--)
     {
         inp(n);
         inp(m);
         memset(color,0,sizeof color);
         memset(cost,0,sizeof cost);
         k = 41;
         FOR(i,1,n)
          {       
            inp(a);
            inp(b);
            color[a]++;
            cost[a]+=b;
                     
          }
         dp1[0][0] = 1.0;
         //dp2[1][1] = cost[1];
         
         FOR(i,1,k)
          {
          dp1[i][0]=1.0;
            FOR(j,1,i)
             {
               if(color[i]>0)
               {       
                 dp1[i][j] = dp1[i-1][j] + dp1[i-1][j-1] * ((1LL<<color[i])-1); 
                 dp2[i][j] = dp2[i-1][j] + dp2[i-1][j-1] * ((1LL<<color[i])-1) + dp1[i-1][j-1]*cost[i]*(1LL<<(color[i]-1));         
               }
               else
                {
                  dp1[i][j] = dp1[i-1][j];    
                  dp2[i][j] = dp2[i-1][j];        
                }
             
             }         
          }
         ll num=0,den=0; 
         FOR(i,m,k)
          {
            if(color[i]>=0)
            {       
              num += dp2[k][i];
              den += dp1[k][i]; 
            }        
          }
          double ans = (num*1.0)/(den*1.0);
          printf("%.9lf\n",ans);   
                   
     }
    
    
    //getchar();
    //getchar();
	return 0;
} 
