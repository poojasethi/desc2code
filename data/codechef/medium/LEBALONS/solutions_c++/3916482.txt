#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

vector<pair<int,int> > v;
vector<int> v1;
int n,m,price[45],ccnt[45];

long long pow2[45],cnt[45][45],dp[45][45];

bool cmp(pair<int,int>a,pair<int,int>b)
{
	if(a.first<b.first) return true;
	
	return false;
}

/*
long long getcount(int idx,int prev,int l)
{
	//printf("Here\n");
	long long int i,j,k,ans=0;
	
	if(idx==n)
	{
		ans=0;
		if(l>=m) ans=1;
		cnt[idx][prev][l]=ans;
	//	printf("cnt[%d][%d][%d]=%lld\n",idx,prev,l,cnt[idx][prev][l]);
			return ans;
			
	}
	if(cnt[idx][prev][l]==-1)
	{
		ans = getcount(idx+1,prev,l);
		ans+=getcount(idx+1,v[idx].first,(prev != v[idx].first)?l+1:l);
		
		cnt[idx][prev][l]=ans;
	}
//	printf("cnt[%d][%d][%d]=%lld\n",idx,prev,l,cnt[idx][prev][l]);
	return cnt[idx][prev][l];
	
}
*/
/*
int solve(int idx,int prev,int l,int sum)
{
	int i,j,k,ans=0;
	if(idx == n) 
	{	ans=0;
		if(l>=m) ans=sum;
		dp[idx][prev][l]=ans;
	//	printf("cnt[%d][%d][%d]=%lld\n",idx,prev,l,cnt[idx][prev][l]);
			return ans;
	
	}
	if(dp[idx][prev][l]==-1)
	{
		ans += solve(idx+1,prev,l,sum);
		ans=ans+(cnt[idx+1][v[idx].first][(prev != v[idx].first)?l+1:l]>0)*(solve(idx+1,v[idx].first,(prev != v[idx].first)?l+1:l,sum+v[idx].second));
		dp[idx][prev][l]=ans;
	}
	//	printf("dp[%d][%d][%d]=%d\n",idx,prev,l,dp[idx][prev][l]);
	return dp[idx][prev][l];
	
}
*/

int main()
{
	int i,j,k,t,c,p;
	long long sum,total;
	double ans;
	scanf("%d",&t);
	
	pow2[0]=1;
	for(i=1;i<=42;i++)
		pow2[i]=pow2[i-1]*2;
		
	while(t!=0)
	{
		scanf("%d%d",&n,&m);
		v.clear();
		v1.clear();
		
		for(i=0;i<=40;i++)
			price[i]=ccnt[i]=0;
			
		for(i=0;i<n;i++)
		{
			scanf("%d%d",&c,&p);
			pair<int,int>pp(0,0);
			pp.first = c;
			pp.second = p;
			v.push_back(pp);
			price[c]+=p;
			ccnt[c]+=1;
		}
		
		std::sort(v.begin(),v.end(),cmp);
		
		for(i=0;i<=41;i++)
			for(j=0;j<=41;j++){
				dp[i][j]=cnt[i][j]=0;
		}
		
			
		//total = getcount(0,41,0);
		
		int prev = -1;
			for(i=0;i<n;i++)
			if(v[i].first!=prev)
			{
				v1.push_back(v[i].first);
				prev=v[i].first;
			}
			int nn = v1.size();
			
			for(i=0;i<=41;i++)
				{cnt[0][i]=dp[0][i]=dp[i][0]=0;
					cnt[i][0]=1;
				}
				
			dp[0][1]=price[v1[0]]*pow2[ccnt[v1[0]]-1];
			cnt[0][1]=1*(pow2[ccnt[v1[0]]]-1);
			cnt[0][0]=1;
			
			
			//for(i=0;i<nn;i++) printf("%d %d ",v1[i],price[v1[i]]);
		//	printf("\n");
			
			
			for(j=1;j<=nn;j++)
			{
				for(i=1;i<nn;i++)
				{
				    if(j<=i+1){
					dp[i][j] = dp[i-1][j];
					cnt[i][j]=cnt[i-1][j];
					int color = v1[i];
					dp[i][j]+=(dp[i-1][j-1]*(pow2[ccnt[color]]-1)+(long long)cnt[i-1][j-1]*pow2[ccnt[color]-1]*price[color]);
					cnt[i][j]+=(cnt[i-1][j-1]*(pow2[ccnt[color]]-1));
					//printf("cnt[%d][%d]=%lld\n",i,j,cnt[i][j]);
				//	printf("dp[%d][%d]=%lld\n",i,j,dp[i][j]);
				     }
				}
			}
			
			 sum = total= 0;
			for(i=m;i<=nn;i++)
				{sum+=dp[nn-1][i];
					total+=cnt[nn-1][i];
				}
				
		
	//	int sum = solve(0,41,0,0);
		//printf("total=%lld sum=%lld nn=%d\n",total,sum,nn);
		ans = (double)sum/total;
		
		printf("%.6lf\n",ans);
		t--;
	}
	
	return 0;
}