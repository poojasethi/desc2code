#include <vector>
#include <queue>
#include <deque>
#include <bitset>
#include <stack>
#include <list>
#include <set>
#include <map>
#include<iostream>
#include<stdio.h>


using namespace std ;

#define FOR(i,a,b)         	for(int i = (a); i <  (b) ; i++)
#define FOE(i,a,b)         	for(int i = (a); i <= (b) ; i++)
#define FOED(i,a,b)			for(int i = (a); i >= (b) ; i--)
#define ITR(v,it) 			for( typeof(v.begin()) it=v.begin();it!=v.end();it++)
#define REP(i,n)			FOR(i,0,n)
#define ALL(a) 				a.begin(),a.end()
#define SORT(a) 			sort(ALL(a))
#define SZ(a)				((int)a.size())
#define SQR(x)				((x)*(x))
#define BS(i) 				__builtin_popcount(i)
#define LZ(i)				__clz
#define RE 					return
#define FI 					first
#define SD 					second
#define PB					push_back
#define MP(x,y)				make_pair(x,y)
#define SET(a,v)			memset(&a[0],v, sizeof(a[0])*SZ(a) )
#define POW2(i)				( 1LL << (i) )


//Typedefs
typedef long long ll ;
typedef pair<int,int> pii ;
typedef pair<string,string> pss ;
typedef vector<int> vi ;
typedef vector<ll> vl ;
typedef vector<vi> vvi ;
typedef vector<vl> vvl ;
typedef vector<bool> vb ;
typedef vector<vb> vvb ;
typedef vector<string> vs ;
typedef vector<pii> vpii ;

int main(){
	int t,n,m;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		vvl DP1(45,vl(45,0)),DP2(45,vl(45,0));
		int dcol = 0,x,y;
		vi colors(45,0),cst(45,0);

		for (int i = 0; i < n; i++) {
			cin >> x >> y;
			if (!colors[x]) dcol++;
			colors[x]++;
			cst[x] += y;
		}

		for (int i = 0; i <= 40; i++)
            DP1[i][0] = 1;

		for (int i = 1; i <= 40; i++)
            for (int j = 1; j <= dcol; j++)
                DP1[i][j] = DP1[i-1][j] + DP1[i-1][j-1] * ((1LL << colors[i]) - 1);

		for (int i = 1; i <= 40; i++)
            for (int j = 1; j <= dcol; j++)
                DP2[i][j] = DP2[i-1][j] + DP2[i-1][j-1] * ((1LL << colors[i]) - 1) + DP1[i-1][j-1] * cst[i] * (1LL << (colors[i] - 1));

		ll num,den;
		num = den = 0;

		for (int i = m; i <= dcol; i++) {
			num += DP2[40][i];
			den += DP1[40][i];
		}

		printf("%.7f\n",1.*num/den);
	}

}
