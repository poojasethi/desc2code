#include <string>
#include <vector>
#include <map>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <iomanip>      // std::setprecision
using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for (int i = (b - 1); i >= a; --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A, value) memset(A, value, sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair<int, int> PII;
typedef vector< pair<int, int> > VPII;

const int INF = 1000000000;
const int MAX1 = 307;
const int MAX2 = 100007;
const int BASE = 1000000000;

int m;
int color[45];
int cost[45];
UINT sets[45], price[45];

void solve()
{
	FILL(sets, 0);
	FILL(price, 0);
	sets[0] = 1;
	price[0] = 0;
	int i, col = 0;

	FOR(i, 1, 41) {
		if (color[i]) {
			++col;
			int j;
			UINT s = (1 << color[i]) - 1;
			UINT p = (1 << (color[i] - 1)) * cost[i];
			RFOR(j, col + 1, 1) {
				sets[j] += sets[j - 1] * s;
				price[j] += price[j - 1] * s + p * sets[j - 1];
			}
		}
	}
	UINT tsets = 0, tprice = 0;
	FOR(i, m, 41) {
		tsets += sets[i];
		tprice += price[i];
	}
	printf("%0.9f\n",(double)(tprice)/tsets);
}

int main()
{
	int t;
	int i;
	cin >> t;
	FOR(i, 0, t) {
		FILL(color, 0);
		FILL(cost, 0);
		int n;
		cin >> n >> m;
		int j;
		FOR(j, 0, n) {
			int c, p;
			cin >> c >> p;
			++color[c];
			cost[c] += p;
		}
		solve();
	}
	return 0;
}