#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility> 
using namespace std;
 
#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))
 
#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979
 
typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;
 
const int INF = 1000000000;
const int MAX = 307;
const int MAX2 = 100007;
const int BASE = 1000000000;
 
struct Test
{
	vector <PII> A;
	int m;
};
 
double R[MAX][MAX];
double P[MAX];
 
double Solve(Test test)
{
	int n = SZ(test.A);
	sort(ALL(test.A));
	int i = 0;
	vector < pair<int, double> > Q;
	VI C;
	while (i < n)
	{
		int j = 0;
		while (i+j < n && test.A[i].first == test.A[i+j].first)
			++ j;
		double sum = 0;
		FOR (k,0,j)
			sum += 0.5 * test.A[i+k].second;
		Q.PB(MP(j, sum));
		C.PB(test.A[i].first);
		i += j;
	}
	P[0] = 1.0;
	FOR (i,1,MAX)
		P[i] = P[i-1] * 2;
	FILL(R, 0);
	R[0][0] = 1.0;
	FOR (i,0,SZ(Q))
		FOR (j,0,i+1)
		{
			R[i+1][j] += R[i][j];
			R[i+1][j+1] += R[i][j] * (P[Q[i].first] - 1.0);
		}
	double total = 0.0;
	FOR (i,test.m,SZ(Q)+1)
		total += R[SZ(Q)][i];
	double res = 0.0;
	FOR (pos,0,n)
	{
		int color = test.A[pos].first;
		int val = test.A[pos].second;
		FILL(R, 0);
		R[0][0] = 1.0;
		FOR (i,0,SZ(Q))
			FOR (j,0,i+1)
			{
				if (C[i] == color)
				{
					R[i+1][j+1] += R[i][j] * P[Q[i].first-1];
				}
				else
				{
					R[i+1][j] += R[i][j];
					R[i+1][j+1] += R[i][j] * (P[Q[i].first] - 1.0);
				}
			}
		double p = 0.0;
		FOR (i,test.m,SZ(Q)+1)
			p += R[SZ(Q)][i];
		res += val * p / total;
	}
	return res;
}
 
double SolveBrute(Test test)
{
	int n = SZ(test.A);
	double res = 0;
	int cnt = 0;
	FOR (mask,0,(1 << n))
	{
		set <int> S;
		int sum = 0;
		FOR (i,0,n)
			if ((mask & (1 << i)) != 0)
			{
				sum += test.A[i].second;
				S.insert(test.A[i].first);
			}
		if (SZ(S) >= test.m)
		{
			++ cnt;
			res += sum;
		}
	}
	return res / cnt;
}
 
int Rand()
{
	int res = 0;
	FOR (i,0,6)
		res = (res * 10 + rand() % 10);
	return res;
}
 
Test GetRandom(int N, int P)
{
	int n = rand() % N + 1;
	set <int> S;
	vector <PII> A;
	FOR (i,0,n)
	{
		int color = rand() % n + 1;
		int cost = Rand() % P +1;
		A.PB(MP(color, cost));
		S.insert(color);
	}
	int m = rand() % (SZ(S)+1);
	Test res;
	res.A = A;
	res.m = m;
	return res;
}
 
Test ReadTest()
{
	Test res;
	int n;
	cin >> n >> res.m;
	FOR (i,0,n)
	{
		int a, b;
		cin >> a >> b;
		res.A.PB(MP(a, b));
	}
	return res;
}
 
void OpenInputFile(int test)
{
	char buf[1024];
	sprintf(buf, "D:\\witua\\CodeChef\\LEBALONS\\%d.in", test);
	freopen(buf, "wb", stdout);
}
 
void OpenOutputFile(int test)
{
	char buf[1024];
	sprintf(buf, "D:\\witua\\CodeChef\\LEBALONS\\%d.out", test);
	freopen(buf, "wb", stdout);
}
 
void WriteTest(Test test)
{
	cout << SZ(test.A) << ' ' << test.m << endl;
	FOR (i,0,SZ(test.A))
		cout << test.A[i].first << ' ' << test.A[i].second << endl;
}
 
void WriteAnswer(Test test)
{
	printf("%0.9f\n", Solve(test));
}
 
int main()
{
	int T;
	cin >> T;
	FOR (t,0,T)
	{
		Test test;
		test = ReadTest();
		WriteAnswer(test);
	} 
	return 0;
} 