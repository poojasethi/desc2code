#include <algorithm>
#include <numeric>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <complex>
#include <cassert>
#include <bitset>
#include <cstring>
using namespace std;
 
 
#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define si(c) ((int)(c).size())
#define forsn(i,s,n) for(int i = (int)(s); i<((int)n); i++)
#define dforsn(i,s,n) for(int i = (int)(n)-1; i>=((int)s); i--)
#define decl(v, c) typeof(c) v = c
#define forall(i, c) for(decl(i, c.begin()); i!=c.end(); ++i)
#define dforall(i, c) for(decl(i, c.rbegin()); i!=c.rend(); ++i)
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define D(a) cerr << #a << "=" << a << endl;
#define pb push_back
#define mp make_pair
 
 
typedef long long int tint;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<tint> vt;
typedef vector<vt> vvt;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<string> vs;
typedef pair<int,int> pii;
 
const int MAXN = 40 + 5;
 
int cnt[MAXN], price[MAXN];
tint cant[2][MAXN];
long double sum[2][MAXN];
 
int main() {
        //freopen("in.txt","r",stdin);
        //freopen("out.txt","w",stdout);
 
        
        int ncas; cin >> ncas;
        forn(cas, ncas) {
        	fill(cnt, cnt+MAXN, 0);
        	fill(price, price+MAXN, 0);
        	int n,m; cin >> n >> m;
        	forn(i,n) {
        		int c,p; cin >> c >> p;
        		cnt[c]++;
        		price[c] += p;
        	}
 
        	
        	int act = 0, next = 1;
        	fill(cant[act], cant[act]+MAXN, 0); cant[act][0] = 1;
        	fill(sum[act], sum[act]+MAXN, 0.0);
        	forn(i,MAXN) if (cnt[i]) {
        		copy(cant[act], cant[act] + MAXN, cant[next]);
        		copy(sum[act], sum[act] + MAXN, sum[next]);
        		forn(j,MAXN-1) {
        			tint num = 1LL<<(cnt[i]-1), den = (1LL<<cnt[i])-1;
        			cant[next][j+1] += den * cant[act][j];
        			sum[next][j+1] += double(den)*sum[act][j] + cant[act][j]*double(num)*price[i];
        		}
        		swap(act, next);
        	}
 
        	double num = 0;
        	tint den = 0;
        	forsn(i,m,n+1) {
        		num += sum[act][i];
        		den += cant[act][i];
        	}
        	cout << fixed << setprecision(8) << num / den << endl;
        }
 
 
        return 0;
}
 