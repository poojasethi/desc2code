/*----- DP: bottom-up iterative (expected value) -----*/
#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=45;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
//#define S(x) scanf("%d",&x)
#define getcx getchar
inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define Bug(x) cout << #x << "=" << x << endl
#define pii pair<int,int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit

LL dp1[maxn][maxn],dp2[maxn][maxn],pwr[maxn],p_sum[maxn ];


vector<int> price[maxn],col;

void pre()
{
    pwr[0]=1;
    F(i,1,maxn)
    pwr[i]=2*pwr[i-1];
}

void reset()
{
    col.clear();
    F(i,0,maxn)
    price[i].clear();
    F(i,0,maxn)
    p_sum[i]=0;
}

void _solvenum()
{
    F(i,1,col.size()+1)
    {
        F(j,i,col.size()+1)
        {
            dp2[i][j]=dp2[i][j-1]+dp2[i-1][j-1]*(pwr[price[col[j-1]].size()]-1)+dp1[i-1][j-1]*pwr[price[col[j-1]].size()-1]*p_sum[col[j-1]];
        }
    }
}

void _solvedeno()
{
    F(i,1,col.size()+1)
    {
        F(j,i,col.size()+1)
        {
            dp1[i][j]=dp1[i][j-1]+dp1[i-1][j-1]*(pwr[price[col[j-1]].size()]-1);
        }
    }
}

int main()
{
    pre();
    int t;
    S(t);
    while(t--)
    {
        int m,n;
        S(n);
        S(m);
        F(i,0,n)
        {
            int c,p;
            S(c);
            S(p);
            price[c].push_back(p);
        }
        F(i,0,maxn)
        {
            if(price[i].size())
                col.push_back(i);
        }
        F(i,0,col.size()+1)
        dp1[0][i]=1;

        F(i,0,maxn)
        {
            F(j,0,price[i].size())
            {
                p_sum[i]+=price[i][j];
            }
        }

        _solvedeno();

        _solvenum();

        LL num=0,deno=0;

        F(i,m,col.size()+1)
        deno+=dp1[i][col.size()];

        F(i,m,col.size()+1)
        num+=dp2[i][col.size()];

        printf("%.10f\n",(1.0*num)/deno);

        reset();
    }
    return 0;
}
