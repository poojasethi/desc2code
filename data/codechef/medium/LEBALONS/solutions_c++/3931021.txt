#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <iomanip>

using namespace std;

typedef long long ll;

// We are using DP approach to solve this problem to find the average cost of the set containing atleast
// M colors.
// Now we must understand that it works out in this way.First I am calculating the numerator i.e. the no of 
// subsets for each color.
// How can we do so? -> Either we can not select and move on or if we select it then we can select j-1 distinct colors from i-1 colors
// If we store the state of colors DP1[i][j] -> the no of subsets for color i with j distinct colors
// DP1[i][j] = DP[i-1][j] (We don't select it)  +
//			   DP[i-1][j-1]*(2^colors[i] - 1)        (Now I am multiplying (2^colors[i] - 1) because that is the number of non-empty subsets for color i
// Now I am storing the cost for each color i the if we need atleast j distinct colors in DP2[i][j]
// It follow same logic as DP1 but now we also need to add the cost of selecting the present color
// Therefore DP2[i][j] = DP2[i-1][j]  (If we dont select color i) + 
//						 DP2[i-1][j-1]*(2^(colors)-1)
//                       DP1[i-1][j-1]*(2^(colors-1))

void solve()
{
	int color[42] = {0};
	int cost[42]  = {0};
	int N, M, c, p;
	
	cin >> N >> M;

	for(int i = 0; i < N; i++)
	{
		cin >> c >> p;
		color[c] += 1;
		cost[c] += p;
	}

	ll DP1[42][42] = {{0}};

	for(int i = 0; i < 42; i++)		DP1[0][i] = 0;
	for(int i = 0; i < 42; i++)		DP1[i][0] = 1;

	for(int i = 1; i < 41; i++)
		for(int j = 1; j < 41; j++)
			DP1[i][j] = DP1[i-1][j]  +							// We dont select color i -> Now we have to select atleast j colors from i-1 ballons
					   DP1[i-1][j-1] * ((1 << color[i]) - 1) ;	// We select color i -> Now we have to select j-1  colors from i-1 balloons 						

	ll DP2[42][42] = {{0}};

	for(int i = 1; i < 41; i++)
		for(int j = 1; j < 41; j++)
			DP2[i][j] = DP2[i-1][j]  +							// We dont select color i -> Now we have to select atleast j colors from i-1 ballons
					   DP2[i-1][j-1] * ((1 << color[i]) - 1) +	// We select color i -> Now we have to select j-1  colors from i-1 balloons 
					   DP1[i-1][j-1] * cost[i] * (1 << (color[i] - 1)); // We also add the total cost of selecting i * No of ways of selecting j-1 colors from i-1 balloons


	ll Num = 0, Den = 0;
	for(int i = M; i < 41; i++)
	{
		Num += DP2[40][i];       // This is the numerator(Total Expected Cost)
		Den += DP1[40][i];		 // This is the denominator(Total No of subsets having atleast M colors)
	}

	cout << fixed << setprecision(6) << double(Num) / double(Den) << endl;
	return ;
}

int main()
{
	int t;

	ios_base::sync_with_stdio(false);

	cin >> t;
	while(t--)
	{
		solve();
	}
	return 0;
}