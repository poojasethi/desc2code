#include<iostream>
#include<algorithm>
#include<vector>
#include<cassert>
#include<cstring>
#include<ctime>
#include<math.h>

#pragma warning(disable: 4996)
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef unsigned char uchar;
typedef pair<int, int> ipair;
typedef vector<ipair> vp;
typedef vector<int> vi;
typedef vector<ll> vll;

#define For(i,a,b) for (int i(a),_b(b); i <= _b; ++i)
#define Ford(i,a,b) for (int i(a),_b(b); i >= _b; --i)
#define rep(i,n) for (int i(0),_n(n); i < _n; ++i)
#define repd(i,n) for (int i((n)-1); i >= 0; --i)
#define fstr(i,str) for(int i(0);str[i]!=0; i++)
#define Fill(a,c) memset(&a, c, sizeof(a))
#define MP(x, y) make_pair((x), (y))
#define All(v) (v).begin(), (v).end()

#define MAX 1123456
#define MOD 1000000007 


vi nums[100];
ll pow2[100];
int n, m,maxCol;
ll cache[100][100];
ll subsets(int start, int m) //number of subsets from nums where colors>=m
{
	if (m < 0) m = 0;
	if (start >= maxCol)
		return m==0?1:0;
	int sz = nums[start].size();

	if (cache[start][m] != -1)
		return cache[start][m];
	if (sz==0)
		return cache[start][m]=subsets(start + 1, m);

	ll a = subsets(start + 1, m);
	ll b = (m==0)?a:(subsets(start + 1, m - 1));
	return cache[start][m]= ( (pow2[sz] - 1)*b + a);
}
int getVal(int perm, vp list)
{
	int numCol = 0;
	int lastCol = -1;
	int sum = 0;
	rep(i, n)
	{
		if (perm & (1 << i))
		{
			sum += list[i].second;
			if (list[i].first != lastCol)
			{
				numCol++;
				lastCol = list[i].first;
			}
		}
	}
	if (numCol < m)
		return -1;
	else
		return sum;
}
int main()
{
	//time_t t = clock();
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	int T;
	pow2[0] = 1;
	rep(i, 80)
		pow2[i + 1] = pow2[i] * 2;
	cin >> T;

	For(tt, 1, T)
	{
		cin >> n >> m;
		maxCol = 0;
		rep(i, 50)
			nums[i].clear();
		//vp list;
		rep(i, n)
		{
			int c, p;
			cin >> c >> p;
			nums[c - 1].push_back(p);
			maxCol = max(maxCol, c);
			//list.push_back(MP(c, p));
		}
		/*sort(All(list));
		double nu = 0;
		int d = 0;
		
		rep(i, (pow2[n]))
		{
			int v = getVal(i, list);
			if (v != -1)
			{
				d++;
				nu += v;
			}
		}
		printf("%f %d %.6f\n", nu, d, nu / d);
		*/

		ll den = 0;
		ll num = 0;
		rep(i, 40) if (nums[i].size() > 0)
		{
			Fill(cache, 255);

			vi temp;
			int sz = nums[i].size();
			double sum = 0;
			rep(j, sz)
			{
				temp.push_back(nums[i][j]);
				sum += nums[i][j];
			}
			nums[i].clear();
			
			ll s = subsets(0, m - 1);
			num += s*pow2[sz - 1]*sum;
			rep(j, sz)
				nums[i].push_back(temp[j]);
		}
		Fill(cache, 255);
		den = subsets(0, m);
		//printf("%lld %lld %.6f\n", num, den, (num*1.0) / den);
		printf("%.6f\n", (num*1.0) / den);
	}
	//cout << clock() - t;
	return 0;
}
