#include <bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define PB push_back
#define S(n)	scanf("%d",&n)
#define Sd(n)	scanf("%lf",&n)
#define P(n)	printf("%d\n",n)
#define mp make_pair
#define ll long long

ll dp1[45][45];
ll dp2[45][45];
ll colors[45];
ll cost[45];
int main()
{

	int t,m,n,c,p;
	cin>>t;
	while(t--)
	{
		cin>>n>>m;
		memset(cost, 0 , sizeof(cost));
		memset(colors,0, sizeof(colors));
		int ncolors=0;
		vector< pair <int, int > > v;
		FOR(i,0,n)
		{
			cin>>c>>p;
			v.PB(mp(c,p));
			// colors[c]++;
			// cost[c]+=p;
		}
		sort(v.begin(), v.end());
		ncolors=1;
		int cnt=1;
		colors[1]=1;
		cost[1]=v[0].second;
		FOR(i,1,v.size())
		{
			if(v[i].first!=v[i-1].first)
				ncolors++;

			colors[ncolors]++;
			cost[ncolors]+=v[i].second;
		}
		memset(dp1, 0 , sizeof(dp1));
		memset(dp2, 0 , sizeof(dp2));
		FOR(i,0,ncolors+1)
			dp1[i][0]=1;

		FOR(i,1,ncolors+1)
		{
			FOR(j,1,ncolors+1)
			{
				dp1[i][j]=dp1[i-1][j]+dp1[i-1][j-1]*(pow(2,colors[i]) -1);
				dp2[i][j]=dp2[i-1][j]+dp1[i-1][j-1]*(pow(2,colors[i] -1))*cost[i]+dp2[i-1][j-1]*(pow(2,colors[i]) -1);
				
			}
		}
		double num=0;
		double den=0;

		FOR(i,m, ncolors+1)
		{
			num+=dp2[ncolors][i];
			den+=dp1[ncolors][i];
		}
		//cout<<num<<" "<<den<<"\n";
		//cout<<num/den<<"\n";
		printf("%.8lf\n",num/den);



	}
	return 0;
}