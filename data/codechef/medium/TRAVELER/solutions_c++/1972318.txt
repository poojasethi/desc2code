#include<stdio.h>
#include<iostream>
#include<vector>
#include<set>
#include<map>
using namespace std;
int find_vector(vector<vector<string> > a, string val1 , string val2);

int main()
{
		int n;
		int m;
		int temp3;
		char temp[25],temp1[25];
		
		set <string> cities;
		
		// Inserting cities
		scanf("%d",&n);
		for(int i=0; i < n; i++)
		{
			scanf("%s",temp);
			cities.insert(string(temp));
		}
		
		//City Cost
		scanf("%d",&m);
		map < vector<string>, int> city_cost;
		for(int i=0; i <m ; i++)
		{
			
 			vector<string> temp4;
 			
 			scanf("%s",temp);
			scanf("%s",temp1);
			scanf("%d",&temp3);
			
			temp4.push_back(temp);
			temp4.push_back(temp1);
			city_cost.insert( pair< vector <string>, int>(temp4,temp3));
		}
		
		//Cases
		int t;
		scanf("%d",&t);
		for(int i=0; i<t ;i ++)
		{
			int k;
			scanf("%d",&k);
			vector<string> path;
			set	 <string> duplicate;
			int error = 1;			//No error
			for(int j=0; j <k; j++ )
			{
					scanf("%s",temp);
					path.push_back(string(temp));
			//		duplicate.insert(string(temp)); 
			//		if(cities.find(string(temp)) == cities.end())
			//			error = 0;
			}
			int counter = 1;
			set <string> :: iterator city_end = cities.end();
			for(vector<string> :: iterator it = path.begin(); it!= path.end(); ++it)
			{
				duplicate.insert(*it);
				if(  (counter != duplicate.size() )|| (cities.find(*it) == city_end))
				{
						error = 0;
						break;
				}
				counter++;
			}
			/*if(duplicate.size() != path.size())
			{
				printf("ERROR\n");
				continue;
			}*/
			if(error== 0)
			{
				printf("ERROR\n");
				continue;
			}
			int total_cost = 0;
			for(int j=0; j<path.size()-1; j++)
			{
				vector<string> lolz;
				lolz.push_back(path[j]);
				lolz.push_back(path[j+1]);
				
				map < vector<string>, int> ::iterator xx = city_cost.find(lolz);
				if( xx == city_cost.end())
				{
					error = 0;
					break;
				}else
				{
					total_cost += xx->second;
				}
			}
			if(error== 0)
			{
				printf("ERROR\n");
				continue;
			}
			printf("%d\n",total_cost);
			
			
		}
		
}	

int find_vector(vector<vector<string> > a, string val1 , string val2)
{
	vector<vector<string> >::iterator it;
	int count = 0;
	for(it = a.begin(); it!= a.end(); ++it)
	{
			if( ( *it)[0] == val1 && ( *it)[1] == val2)
				return count;
			count++;
	}
	return -1;
}
