#include <bits/stdc++.h>
using namespace std;
struct pai{
	int city;
	int dist;
	pai(){}
	pai(int s,int d){
		city = s;
		dist = d;
		}
	};

struct compare{
	bool operator()(const pai p1,const pai p2)const{
		return p1.dist>p2.dist;
		}
	};
void bfs(int dist[][51],int start,vector<pai> graph[],int n){
	int visited[n];
	for(int i=0;i<n;i++){
		visited[i] = 0;
		}
	priority_queue<pai,vector<pai>,compare> q;
	q.push(pai(start,0));
	while(!q.empty()){
		pai top = q.top();
		q.pop();
		if(visited[top.city]==1) continue;
		for(int i=0;i<graph[top.city].size();i++){
			int curr = graph[top.city][i].city;
			if(visited[curr]==1) continue;
			dist[start][curr] = min(dist[start][curr] , dist[start][top.city] + graph[top.city][i].dist);
			q.push(pai(curr,dist[start][curr]));
			}
		visited[top.city] = 1;
		}	
	}	
int main(){
	int n;
	cin>>n;
	string city[n];
	map<string,int> decode;
	int visited[n];
	for(int i=0;i<n;i++){
		cin>>city[i];
		decode[city[i]] = i;
		visited[i] = 0;
		}
	int m;
	cin>>m;
	vector<pai> graph[n];
	int dist[51][51];
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(i==j) dist[i][j] = 0;
			else dist[i][j] = -1;
			}
		}
	for(int i=0;i<m;i++){
		string s1,s2;
		int d;
		cin>>s1>>s2>>d;
		graph[decode[s1]].push_back(pai(decode[s2],d));
		dist[decode[s1]][decode[s2]] = d;
		}
	
		/*
	for(int i=0;i<n;i++){
		bfs(dist,i,graph,n);
		}*/
	int T;
	cin>>T;
	for(int t=0;t<T;t++){
		int k;
		cin>>k;
		string curr;
		cin>>curr;
		int visited[51]={0};
		bool found = false;
		int prev = -1;
		if(decode.count(curr)>0){
			prev = decode[curr];
			visited[prev] = 1;
			found = true;
			}
		int start = prev;		
		long long int ans = 0;
		for(int i=1;i<k;i++){
			cin>>curr;
			
			if(!found) continue;
			int temp = -1;
			if(decode.count(curr)>0 && visited[decode[curr]]==1){
				found = false;
				continue;
				}
			if(decode.count(curr)>0){
				temp = decode[curr];
				visited[temp] = 1;
				}
			else{
				found = false;
				continue;
				}
			if(dist[prev][temp]!=-1){
				ans += dist[prev][temp];
				}
			else{
				found = false;
				continue;
				}
			prev = temp;
			}
		if(!found){
			cout<<"ERROR"<<endl;
			}
		else{
			cout<<ans<<endl;
			}
		}
	}
