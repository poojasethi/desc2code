#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <iterator>
#include <set>

using namespace std;
int solve(map<string, int>& cities, map<pair<int, int>, int>& roads, const vector<string>& route);
int main() {
int N;
    cin >> N;
map<string, int> cities;
for(int n = 0; n < N; ++n) {
string city;
    cin >> city;
    cities[city] = n + 1;
}
int M;
    cin >> M;
map<pair<int, int>, int> roads;
for(int i = 0; i < M; ++i) {
string From, To;
int length;
    cin >> From >> To >> length;
    roads[make_pair(cities[From], cities[To])] = length;
}
int T;
    cin >> T;
for(int t = 0; t < T; ++t) {
int K;
cin >> K;
vector<string> route(K);
    for(int k = 0; k < K; ++k) {
    string city;
	cin >> city;
	route[k] = city;
    }
int length = solve(cities, roads, route); 
    if(length >= 0) {
	cout <<  length << endl;
    } else {
	cout << "ERROR" << endl;
    }
}
}
int solve(map<string, int>& cities, map<pair<int, int>, int>& roads, const vector<string>& route) {
const int ERROR = -1;
vector<int> route_num(route.size());
{
    map<string, int>::iterator it;
    for(int i = 0; i < route.size(); ++i) {
	if((it = cities.find(route[i])) == cities.end()) {
	    return ERROR;
	} else {
	    route_num[i] = (*it).second;
	}
    }
}
set<int> path;
{
    set<int>::iterator it;;
    map<pair<int, int>, int>::iterator itr;
    int length = 0;
    int prev = 0;
    int current = 0;
    for(int i = 0; i < route_num.size(); ++i) {
	it = path.find((current = route_num[i]));
	if(it != path.end())
	    return ERROR;
	path.insert(current);
    	if(prev > 0) {
    		itr = roads.find(make_pair(prev, current));
    		if(itr == roads.end()) {
		    return ERROR;
		} else {
		    length += (*itr).second;
    		}
    	}
    	prev = current;
    }
    return  length;
}
}
