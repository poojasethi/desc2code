#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#include <queue>
#include <bitset>		//UWAGA - w czasie kompilacji musi byc znany rozmiar wektora - nie mozna go zmienic
#include <cassert>
#include <iomanip>		//do setprecision
#include <ctime>
#include <complex>
using namespace std;

#define FOR(i,b,e) for(int i=(b);i<(e);++i)
#define FORQ(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b)-1;i>=(e);--i)
#define REP(x, n) for(int x = 0; x < (n); ++x)

#define ST first
#define ND second
#define PB push_back
#define MP make_pair
#define LL long long
#define ULL unsigned LL
#define LD long double

const double pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342;

#define MR 60

map < string, int > M;
int t[MR][MR];

int main()
{
	int n;
	cin >> n;
	assert(n > 0 && n < 51);
	REP(i,n)
	{
		string s;
		cin >> s;		
		M[s] = i;		
	}
	int m;
	cin >> m;
	REP(i,m)
	{
		string s1, s2; int D;
		cin >> s1 >> s2 >> D;				
		t[M[s1]][M[s2]] = D;		
	}
	int k;
	cin >> k;	
	set < string > S;		
	REP(i,k)
	{
		cin >> n;		
		int dl = 0;
		string s;		
		cin >> s;			
		if(M.find(s) == M.end())
			dl = -1;
		S.insert(s);		
		REP(i,n-1)
		{
			string s1;
			cin >> s1;			
			if(M.find(s1) == M.end())
				dl = -1;
			if(S.find(s1) != S.end())
				dl = -1;
			S.insert(s1);
			if(dl != -1 && !t[M[s]][M[s1]])
				dl = -1;
			if(dl != -1)
				dl += t[M[s]][M[s1]];
			s = s1;
		}		
		if(dl == -1)
			cout << "ERROR\n";
		else
			cout << dl << "\n";
		S.clear();
	}
	return 0;
}