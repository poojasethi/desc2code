#include<bits/stdc++.h>
using namespace std;

#define FRE(i,a,b)  for(int i = a; i <= b; i++)
#define FRL(i,a,b)  for(int i = a; i < b; i++)
#define BWE(i,a,b)  for(i = a; i >= b; i--)
#define BWL(i,a,b)  for(i = a; i > b; i--)
#define mem(t, v)   memset ((t) , v, sizeof(t))
#define sqr(x)      ((x)*(x))
#define all(x)      x.begin(),x.end()
#define un(x)       x.erase(unique(all(x)), x.end())
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define Fout        freopen("out.txt","w",stdout)
#define Finp        freopen("in.txt","r",stdin)
#define D(x)        cout<<#x " = "<<(x)<<endl
#define pf          printf
#define vi          vector <int>
#define pii         pair <int, int>
#define pll         pair <LL, LL>
#define pb          push_back
#define mp          make_pair
#define pi          acos(-1.00)
#define DBG         pf("Hi\n")
#define sz          size()
#define ins         insert
#define xx          first
#define yy          second
#define inf         (1<<29)
#define MOD         100007
#define eps         1e-9
#define MAX         1440
#define AND(a,b)    ((a) & (b))
#define OR(a,b)     ((a)  (b))
#define XOR(a,b)    ((a) ^ (b))

typedef long long int LL;
typedef double db;

/* Min Priority queue
   priority_queue<int, vector<int>, greater <int> > q;
*/

//int dx[] = {+0,+1,+0,-1};
//int dy[] = {+1,+0,-1,+0};
//int dx[] = {-1,-1,-1,+0,+0,+1,+1,+1};
//int dy[] = {-1,+0,+1,-1,+1,-1,+0,+1};
//int dx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knight's Move
//int dy[]={-1,  1, -2,  2, -2,  2, -1,  1};  // Knight's Move
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int on(int n, int pos) {return n | (1<<pos); }
//int off(int n, int pos) {return n & ~(1<<pos); }
//bool comp(pii a, pii b) { return a.xx < b.xx;}
//int gcd(int a,int b) {return b==0?a:gcd(b,a%b);}
//int lcm(int a,int b) {return ((a*b)/gcd(a,b));}
//bool operator < (Pair a, Pair b) {return a.second < b.second;} ///Only Comparing the second element
//bool operator < (Pair a, Pair b) ///Pair comparison on the basis of first element prioritized
//{if(a.first < b.first) return true;else if(a.first == b.first){if(a.second > b.second) return true;else return false;}

string cityn[50], city, from, to;
int n, m, dist[50][50], route[50], t, k;
bool flag[50], error;


int main()
{
	sf(n);
	FRL(i,0,n)
		cin >> cityn[i];
	sf(m);
	FRL(i,0,m)
	{
		cin >> from >> to;
		int f=0;
		int j=0;
		int r,c;
		while(f!=2)
		{
			if(cityn[j]==from)
			{
				f++;
				r=j;
			}
			else if(cityn[j]==to)
			{
				f++;
				c=j;
			}
			j++;
		}

		sf(dist[r][c]);
	}
	sf(t);
	while(t--)
	{
		error=0;
		sf(k);
		LL s=0;
		FRL(i,0,k)
		{
			cin >> city;
			int f=0;
			for(int j=0;j<n;j++)
			{
				if(cityn[j]==city)
				{
					if(flag[j])
						error=1;

					flag[j]=1;
					route[i]=j;
					f=1;
					break;
				}
			}
			if(!f)
				error=1;

		}
		if(!error)
		{
			FRL(i,1,k)
			{
				int r=route[i-1];
				int c=route[i];
				if(r==c)
				{
					error=1;
					break;
				}
				if(dist[r][c])
					s += dist[r][c];
				else
				{
					error=1;
					break;
				}
			}
		}
		if(error)
			printf("ERROR\n");
		else
			printf("%lld\n",s);
		mem(flag,false);
	}
	return(0);
}
