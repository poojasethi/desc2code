#include<stdio.h>
#include<ctype.h>
#include<string.h>
#include<limits.h>

#include<iostream>
#include<cmath>
#include<limits>
#include<map>
#include<set>
#include<queue>
#include<list>
#include<string>
#include<map>

using namespace std;

#define FOR(I,N) for(I = 0 ; I < N ; I++)
#define FOR2(I,K,N) for(I = K ; I < N ; I++)
#define RFOR(I,N) for(I = N ; I >= 0 ; I--)
#define RFOR2(I,K,N) for(I = N ; I >= K ; I--)
#define isend(C) (C == '\n' || C == '\r' || C == EOF)
#define iswhitespace(C) (C == '\t' || C ==' ' || C == '\n' || C == '\r' || C == EOF)

#define ll long long
#define ull unsigned long long

#define MOD 1000000007

// #define FASTIO

// FASTIO BEGIN

#ifdef FASTIO

#define FASTIO_INSIZE 1000000
#define FASTIO_OUTSIZE 1000000

char inputBuf[FASTIO_INSIZE];
char *inptr = inputBuf;

char outputBuf[FASTIO_OUTSIZE];
char *outptr = outputBuf;

#define consumewhite {while(iswhitespace(*inptr)) inptr++;}

inline unsigned long long get_ulonglong()
{
	unsigned long long ans = 0;
	while(isdigit(*inptr))
	{
		ans = ((ans*10) + (*inptr - '0'));
		inptr++;
	}

	consumewhite;

	return ans;
}

inline long long get_longlong()
{
	long long ans=0;
	int flag = 1;
	if(*inptr == '-')
	{
		flag = -1;
		inptr++;
	}
	
	while(isdigit(*inptr))
	{
		ans = ((ans*10) + (*inptr - '0'));
		inptr++;
	}

	consumewhite;

	return flag*ans;
}

inline int get_string(char *s,int mode)
{
	// mode = 1 for gets, 0 for scanf("%s")

	int len = 0;
	while((mode && !isend(*inptr)) || (!mode && !iswhitespace(*inptr)))
	{
		s[len++] = *inptr++;
	}

	consumewhite;

	s[len] = '\0';
	return len;
}


#define printf(...) outptr+= sprintf(outptr, __VA_ARGS__)

#define GETINTANDSPACE(N) { N = (int) get_longlong(); }
#define GETINT(N) { N = (int) get_longlong(); }
#define GETUINT(N) { N = (unsigned int) get_ulonglong(); }
#define GETLONG(N) { N = (long) get_longlong(); }
#define GETULONG(N) { N = (unsigned long) get_ulonglong(); }
#define GETLONGLONG(N) { N = (long long) get_longlong(); }
#define GETULONGLONG(N) { N = get_ulonglong(); }
#define gets(S) get_string(S,1)
#define GETSTRING(S) get_string(S,0)
#define getchar() (*inptr++)

#define takeInput fread_unlocked(inputBuf,sizeof(char),FASTIO_INSIZE,stdin);
#define printOutput fwrite_unlocked(outputBuf,sizeof(char),outptr-outputBuf,stdout);

#else // NORMAL IO PATH

#define GETINTANDSPACE(N) {scanf("%d\n",& N);}
#define GETINT(N) {scanf("%d",& N);}
#define GETUINT(N) {scanf("%u",& N);}
#define GETLONG(N) {scanf("%ld",& N);}
#define GETULONG(N) {scanf("%lu",& N);}
#define GETLONGLONG(N) {scanf("%lld",& N);}
#define GETULONGLONG(N) {scanf("%llu",& N);}
#define GETSTRING(S) {scanf("%s", S);}
#define gets(S) (gets(S) != NULL ? strlen(S) : 0)

#define takeInput
#define printOutput
#define consumewhite scanf("\n")

#endif // END FASTIO

// END FASTIO


main()
{
	takeInput; // FASTIO

	map<string, int> map;

	int N,M;
	int i,j;

	int A[60][60] = {0};

	GETINTANDSPACE(N);

	FOR(i,N)
	{
		char str[30];
		GETSTRING(str);
		consumewhite;
		map[string(str)] = i;
	}

	GETINTANDSPACE(M);

	FOR(i,M)
	{
		char str1[30],str2[30];
		int index1,index2,D;
		GETSTRING(str1);
		GETSTRING(str2);
		GETINTANDSPACE(D);
		index1 = map[string(str1)];
		index2 = map[string(str2)];
		A[index1][index2] = D;
	}

	int T;
	GETINTANDSPACE(T);
	while(T--)
	{
		int k;
		int visited[60] = {0};
		ll len = 0;

		GETINT(k);

		int cur = -1, flag = 1;

		while(k--)
		{
			char str[30];
			GETSTRING(str);
	
			if(flag)
			{
				if(map.count(string(str)) == 0)
				{
					flag = 0;
					continue;
				}

				int next = map[string(str)];
				
				if(cur != -1)
				{
					if(A[cur][next] == 0 || visited[next])
						flag = 0;
					else
						len += A[cur][next];
				}
			
				visited[cur] = 1;	
				cur = next;
			}

		}

		if(flag)
			printf("%lld\n",len);
		else
			printf("ERROR\n");

		consumewhite;
	}
	
	printOutput; // FASTIO
	return 0;
}
