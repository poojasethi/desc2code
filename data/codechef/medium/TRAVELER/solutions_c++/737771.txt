// vin_74
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <string>
#include <bitset>
#include <cmath>
#include <list>
#include <cstdlib>
#include <map>
#include <cstring>
#include <set>
#include <stack>
#include <sstream>
#include <queue>
#include <ctime>

using namespace std;

#define debug(x) cout<<#x<<" = "<<x<<"\n"
#define   REP(i,n) for((i)=0;(i)<(n);(i)++)
#define  INF (1<<29)
#define         pb push_back
#define 	     sz size()
#define         mp make_pair
#define 	all(a) a.begin(),a.end()
#define fill(ar,val) memset(ar,val,sizeof ar)
#define       min(a,b) ((a)<(b)?(a):(b))
#define         max(a,b) ((a)>(b)?(a):(b))
#define FORE(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;

int ar[55][55];

int main()
{
	int n, m , k, i, j;
	map<string,int> m1;
	scanf("%d",&n);
	REP(i,n) {
		string s;
		cin >> s;
		m1[s] = i;
	}
	scanf("%d",&m);
	REP(i, m) {
		string c1, c2;
		int d;
		cin >> c1 >> c2 >> d;
		ar[m1[c1]][m1[c2]] = d;
	}
	int T;
	scanf("%d",&T);
	while(T--) {
		int dist = 0, flag = 0;
		string s;
		scanf("%d",&k);
		vector<string> v;
		REP(i,k) {
			cin >> s;
			v.pb(s);
		}
		if(m1.find(v[0]) == m1.end()) flag = 1;
		for(i=1;i<k;i++) {
			if(find(v.begin(), v.begin()+i, v[i]) != v.begin()+i){ flag = 1; break; }
			if(m1.find(v[i-1]) == m1.end() || m1.find(v[i]) == m1.end()) { flag = 1; break; }
			if(ar[m1[v[i-1]]][m1[v[i]]] == 0) {
				flag = 1; break; 
			}
			dist += ar[m1[v[i-1]]][m1[v[i]]];
		}
		if(flag) printf("ERROR\n");
		else printf("%d\n",dist);
	}
	return 0;
}

