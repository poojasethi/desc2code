/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <cstdlib>

using namespace std;

int n,e,T;
int mark[100];
int cost[100][100];
map <string,int> mip;

int main(){
	
	ios_base::sync_with_stdio(false);
	
	cin >> n;
	for (int i=1; i<=n; i++){
		string s; cin >> s;
		mip[s] = i;
	}
	cin >> e;
	for (int i=1; i<=e; i++){
		string a,b; cin >> a >> b;
		int w; cin >> w;
		cost[mip[a]][mip[b]] = w; 
	}

	cin >> T;
	for (int i=1; i<=T; i++){
		vector <int> Q;
		int N; cin >> N;
		bool bad = false;
		for (int j=1; j<=N; j++){
			string tmp; cin >> tmp;
			if (mip.find(tmp)==mip.end()){
				bad = true;
				Q.push_back (-1);
			}
			else
				Q.push_back (mip[tmp]);
		}
		if (bad){
			cout << "ERROR" << endl;
			continue;
		}
		int ret=0;
		mark[Q[0]] = i;
		for (int j=1; j<(int)Q.size(); j++){
			if (cost[Q[j-1]][Q[j]]==0){
				ret = -1;
				break;
			}
			if (mark[Q[j]]==i){
				ret = -1;
				break;
			}
			mark[Q[j]] = i;
			ret+= cost[Q[j-1]][Q[j]];
		}
		if (ret==-1)
			cout << "ERROR" << endl;
		else
			cout << ret << endl;
	}

	return 0;
}
