#include <iostream>
#include <cstdio>
#include <string>
#include <map>
#include <vector>
using namespace std;

int main()
{
    int N,M,K,T;
    cin>>N;
    int a[N][N];
    for(int i = 0 ; i < N ; i++)
    {
        for(int j = 0 ; j<N ; j++)
            a[i][j]= -1; //note for same i,j
    }

    string city,from,to;
    map<string, int> citymap;
    map<string, int> :: iterator it;
    for(int i = 0 ; i<N ; i++)
    {
        cin>>city;
        citymap[city] = i;
    }
    //////////////////////////////
//    for(int i = 0 ; i< 5 ; i++)
//    {
//        cin>>city;
//        cout<<citymap[city];
//    }
    cin>>M;
    ////
    int x,y;
    for(int i = 0 ; i<M ; i++)
    {

      cin>>from>>to;//>>a[citymap[from]][citymap[to]];
      x =citymap[from];
      y = citymap[to];
      cin>>a[x][y];
       // cin>>from>>to>>a[i][0];
     //   cout<<" distance from "<<from<<citymap[from]<<" to "<<to<<citymap[to]<<a[citymap[from]][citymap[to]]<<endl;
  //   cout<<" distance from "<<from<<citymap[from]<<" to "<<to<<citymap[to]<<a[x][y]<<endl;
    }
    //////////////////////////////
//    for(int i = 0 ; i < N ; i++)
//    {
//        for(int j = 0 ; j<N ; j++)
//            cout<<a[i][j]<<" "; //note for same i,j
//        cout<<endl;
//    }
    cin>>T;
    int ans,dist;
    bool breaked;
    vector<string> citylist;
    bool visitedcity[N];
    while(T--)
    {
        for(int i = 0 ; i < N ;i++)
            visitedcity[i] = false;
        ans = 0;
        breaked = false;
        cin>>K;
        for(int i = 0 ;i<K; i++)
        {
            cin>>city;
            citylist.push_back(city);
        }
        for(int i = 0 ; i<K ; i++)
        {
            it = citymap.find(citylist[i]);
            if(it != citymap.end())
            {
                visitedcity[citymap[citylist[0]]] = true;
                if(i>0)
                {
                    if(visitedcity[citymap[citylist[i]]])
                    {
                        breaked = true; //for  alreadyvisited
                        break;
                    }
                    else
                    {
                        visitedcity[citymap[citylist[i]]] = true;
                        dist = a[citymap[citylist[i-1]]][citymap[citylist[i]]];
                        if( dist != -1)
                        {
                            ans+= dist;
                        }
                        else //noroute present
                        {   breaked = true;
                            break;
                        }
                    }
                }
            }
            else
            {
                breaked = true; //for not city match
                break;
            }
        } //FIND ROUTE LOOP
        if(breaked)
        {
            printf("ERROR\n");
        }
        else
        {
            printf("%d\n",ans);
        }
        citylist.clear();
    }
    return 0;
}
