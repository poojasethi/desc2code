#pragma comment(linker,"/STACK:300000000")
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <deque>
#include <ctime>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <complex>
#include <memory.h>
using namespace std;
//#pragma hdrstop
#define forn(i,n) for(int i=0;i<(n);++i)
#define forv(i,v) forn(i,(int)(v).size())
#define iinf 1000000000
#define lng long long
#define ulng unsigned long long
#define linf 1000000000000000000LL
#define pb push_back
#define mp make_pair
#define all(a) a.begin(), a.end()
#define PII pair<int, int>
#define PI 3.1415926535897932384626433832795
#define SQR(a) ((a)*(a))
#define mset(a, val) memset(a, val, sizeof(a))
#define eps 1e-8
#define taska "crc"

map<string, int> city;
int g[60][60];
bool mark[60];

int check(){
	int k, v, cur;
	string str;

	mset(mark, 0);

	int len=0;
	cur=-1;

	cin>>k;
	forn(i, k){
		cin>>str;

		if(len==-1) continue;
		if(city.count(str)==0) {len=-1; continue;}
		v=city[str];

		if(cur!=-1){
			if(g[cur][v]==0 || mark[v]) {len=-1; continue;}
			len+=g[cur][v];
		}

		mark[v]=true;
		cur=v;
	}

	return len;
}

int main(){
#ifdef __ASD__
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#else
	//freopen(taska".in","r",stdin);freopen(taska".out","w",stdout);
#endif
	ios_base::sync_with_stdio(false);

	int n, m, t;

	string name;

	cin>>n;
	forn(i, n){
		cin>>name;
		city[name]=i;
	}

	mset(g, 0);

	cin>>m;
	forn(i, m){
		int u, v, c;
		cin>>name;
		u=city[name];
		cin>>name>>c;
		v=city[name];
		
		g[u][v]=c;
	}

	cin>>t;
	forn(i, t){
		int res=check();

		if(res==-1) cout<<"ERROR"<<endl;
		else cout<<res<<endl;
	}
	

	return 0;
}

