#include <cstdio>
#include <cctype>
#include <cstring>
#include <climits>
#include <cassert>
#include <algorithm>
 
using namespace std;
 
int R[1<<10], P[1<<10];
void initAll() {
    for(int i = 0; i < (1<<10); i++) {
        R[i] = 0;
        P[i] = i;
    }
}
void join(int a, int b) {
    if(R[a] < R[b]) {
        P[a] = b;
    } else {
        P[b] = a;
        if(R[a] == R[b]) R[a]++;
    }
}
int find(int n) {
    if(P[n] == n) return P[n];
    return P[n] = find(P[n]);
}
 
struct edge {
    int u;
    int v;
    int w;
} ed[1<<20], ma[1<<10];
 
int cnt[1<<10];
int gr[1<<10][1<<10];
int wt[1<<10][1<<10];
 
int res[1<<10][1<<10];
int vis[1<<10];
 
int Q[1<<10], rd, wr;
void fillIt(int p) {
    rd = wr = 0;
    res[p][p] = INT_MAX;
    vis[p] = 1;
    Q[wr++] = p;
    while(rd < wr) {
        int u = Q[rd++];
        for(int i = 0; i < cnt[u]; i++) {
            int v = gr[u][i];
            if(!vis[v]) {
                res[p][v] = min(res[p][u], wt[u][i]);
                vis[v] = 1;
                Q[wr++] = v;
            }
        }
    }
}
 
bool mcmp(const edge a, const edge b) {
    return a.w > b.w;
}
 
bool misspace(int c) {
    return (c == ' ' || c == '\n');
}
 
int getNumber() {
    int c, n=0;
    while (c = getchar_unlocked()) {
        if(misspace(c)) break;
        n *= 10;
        n += (c-'0');
    }
    return n;
}
 
char pbuf[1<<20];
int plen;
 
void putNumber(int n) {
    if(n == 0) {
        pbuf[plen++] = '0';
    } else {
        char tbuf[16];
        int le = 0;
        while(n) {
            tbuf[le] = '0' + (n%10);
            le++;
            n /= 10;
        }
        while(le) {
            pbuf[plen++] = tbuf[le-1];
            le--;
        }
    }
}
 
int main() {
    int V, E;
    V = getNumber();
    assert(V >= 2 && V <= 1000);
    E = getNumber();
    assert(E >= V-1 && E <= (V*(V-1))/2);
    for(int i = 0; i < E; i++) {
        ed[i].u = getNumber();
        assert(ed[i].u >= 0 && ed[i].u < V);
        ed[i].v = getNumber();
        assert(ed[i].v >= 0 && ed[i].v < V);
        assert(ed[i].u != ed[i].v);
        ed[i].w = getNumber();
        assert(ed[i].w >= 0 && ed[i].w <= 100000000);
    }
    sort(ed, ed+E, mcmp);
    initAll();
    int opc = 0;
    for(int i = 0; i < E && opc < V-1; i++) {
        int p = find(ed[i].u), q = find(ed[i].v);
        if(p != q) {
            join(p, q);
            ma[opc].u = ed[i].u;
            ma[opc].v = ed[i].v;
            ma[opc].w = ed[i].w;
            opc++;
        }
    }
    assert(opc == V-1);
    for(int i = 0; i < V; i++) cnt[i] = 0;
    for(int i = 0; i < opc; i++) {
        int u = ma[i].u, v = ma[i].v, w = ma[i].w;
        gr[u][cnt[u]] = v;
        wt[u][cnt[u]] = w;
        cnt[u]++;
        gr[v][cnt[v]] = u;
        wt[v][cnt[v]] = w;
        cnt[v]++;
    }
    for(int i = 0; i < V; i++) {
        for(int t = 0; t < V; t++) vis[t] = 0;
        fillIt(i);
    }
    for(int i = 0; i < V; i++) res[i][i] = 0;
    for(int i = 0; i < V; i++) {
        plen = 0;
        putNumber(res[i][0]);
        for(int j = 1; j < V; j++) {
            pbuf[plen++] = ' '; putNumber(res[i][j]);
        }
        pbuf[plen] = 0;
        puts(pbuf);
    }
    return 0;
}