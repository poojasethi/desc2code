#include<stdio.h>
#include<limits.h>
#include<list>
#include<string.h>
#include<algorithm>

using namespace std;

class Graph
{
private:
    int n;
    list<pair<int,int> > *adj;
public:
    Graph(int n)
    {
        this -> n = n;
        adj = new list<pair<int,int> >[n];
    }
    void addEdge(int u,int v,int w)
    {
        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }

    void DFSutil(int v, bool visit[],int sum, int res[])
    {
        visit[v]=true;
        res[v] = sum;
        for(list<pair<int,int> >::iterator it = adj[v].begin();it != adj[v].end(); it++)
        {
            if( !visit[it->first] )
                DFSutil( it->first, visit, min(sum , it -> second), res);
        }
    }


    void prims()
    {
        bool added[n];
        memset(added,false,sizeof added);
        int arr[n], maxi = 0 , maxv = 0, par[n];
        arr[0] = 0;
        memset(par, 0, sizeof par);
        for(int i = 1; i < n; i++)
        {
            arr[i] = INT_MIN;
        }
        for(int i = 0; i < (n-1); i++)
        {
            added[maxi] = true;
            for(list<pair<int,int> >::iterator it = adj[maxi].begin(); it != adj[maxi].end(); it++ )
            {
                if( !added[it->first] && arr[it -> first] < it -> second)
                {
                    arr[it -> first] = (it -> second);
                    par[it -> first] = maxi;
                }
            }
            maxv = INT_MIN;
            for(int i = 0; i < n; i++)
            {
                if(!added[i] && arr[i] >= maxv)
                {
                    maxi = i;
                    maxv = arr[i];
                }
            }
        }

        // main work

        Graph g1(n);
        for(int i = 1; i < n; i++)
        {
            g1.addEdge(i, par[i], arr[i]);
        }
        for(int i = 0;i < n;i++)
        {
            bool visit[n];
            memset(visit,false,sizeof(visit) );
            int res[n];
            g1.DFSutil(i,visit,INT_MAX,res);

            res[i] = 0;
            for(int j=0;j<n;j++)
                printf("%d ",res[j]);
            printf("\n");
        }



       // for(int i = 0; i < n; i++)
          //  printf("%d ",par[i]);

    }



};


int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    Graph g(n);
    for(int i=0;i<m;i++)
    {
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        g.addEdge(u,v,w);
    }
    g.prims();
    return 0;
}
