	#include <stdio.h>
	#include <string.h>
	#include <algorithm>

	using namespace std;

	typedef struct 
	{
	unsigned short u; 	unsigned short v;
	unsigned int weight;
	} edge;

	typedef struct vertex
	{
	vertex* h;
	vertex* n;
	} vertex;

	vertex* findhead(vertex* v)
	{
		if(v->h == NULL) return v;
		return findhead(v->h);
	}

	void append(vertex* l1, vertex* l2)
	{
		vertex *head = findhead(l1);

		l1->n = l2;

		l2->h = head;

	}


	bool compare(edge t1, edge t2)
	{
		return t1.weight > t2.weight;
	}

	

	char digit_lut[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";

	static char *fmt_uint(int x, char *s){
	char b[16], *p = b+16;
	if(x < 100){
	if(x < 10) { s[0] = '0' + x; s[1] = 0; return s+1; }
	else { s[0] = digit_lut[x*2]; s[1] = digit_lut[x*2+1]; s[2] = 0; return s+2; }
	}
	do {
	char *d = digit_lut + (x%100)*2;
	*(--p) = d[1]; *(--p) = d[0];
	x /= 100;
	} while(x >= 10);
	if(x){ *(s++) = '0' + x; }
	while(p != b+16){ *(s++) = *(p++); *(s++) = *(p++); }
	*s = 0;
	return s;
	}


	void mat_print(int A[1000][1000], int n, int m)
	{
	int i, j;
	char buf[20000];
	for(i = 0; i < n; i++){
	char *ptr = buf;
	for(j = 0; j < m; j++){
	if(j != 0){
	*ptr = ' ';
	ptr++;
	}
	
	ptr = fmt_uint(A[i][j], ptr);
	}
	*ptr = 0;
	printf("%s\n", buf);
	}
	}


	
	int main(int argc, char **argv)
	{

		int V=0, E =0;

		vertex vertices[1000] = {};	
		int flwr[1000][1000] = {};

		char c = getchar_unlocked();
		while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

		while(c >='0' && c <='9')
			{
				V = (V<<3) + (V<<1) + c-'0';
				c=getchar_unlocked(); 
			}


		while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

		while(c >='0' && c <='9')
			{
				E = (E<<3) + (E<<1) + c-'0';
				c=getchar_unlocked(); 
			}

		edge edges[E];
		
		for(int i = 0; i < E ; i++)
		{
			int j=0,k=0; long int weight=0;

			while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

			while(c >='0' && c <='9')
			{
				j = (j<<3) + (j<<1) + c-'0';
				c=getchar_unlocked(); 
			}

			while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();
			
			while(c >= '0' && c<='9')
			{
				k = (k<<3) + (k<<1) + c-'0';
				c=getchar_unlocked(); 
			}
		

			while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

			while(c >= '0' && c<='9')
			{
				weight = (weight<<3) + (weight<<1) + c-'0';
				c=getchar_unlocked(); 
			}
			
			edges[i].u = j;
			edges[i].v = k;
			edges[i].weight = weight;
		}

		sort(edges, edges + E , compare);

		for(int i=0; i<E ; i++)
		{
			int u = edges[i].u;
			int v  = edges[i].v;
			int weight = edges[i].weight;

			vertex* h1 = findhead(&vertices[u]);
			vertex* h2= findhead(&vertices[v]);

			if(h1 == h2) continue;
		
			vertex* cur1 = h1;
			vertex* cur2 = h2;
			flwr[u][v] = flwr[v][u] = weight;
		
			while(1)
			{
				int v1 = cur1 - vertices;
				cur2 = h2;
				while(cur2!=NULL)
				{
					
					int v2 = cur2 - vertices;

					flwr[v2][v1] = flwr[v1][v2] = weight;

					

					cur2 = cur2->n;
				}


				if(cur1->n == NULL){ 
					append(cur1, h2);
					break;
				}
				cur1 = cur1->n;
			}

		}	

		
		mat_print(flwr,V,V);

		return 0;
	}