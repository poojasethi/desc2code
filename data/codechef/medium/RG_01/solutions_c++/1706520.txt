#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<cctype>
#include<algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
#define cin(n) scanf("%d",&n)
#define gc getchar_unlocked
typedef vector<int> VI;
typedef pair<int, pair<int,int>  > PIP ;
int fcin(){register int c = gc();int x = 0;for(;(c<48 || c>57);c = gc());for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}return x;}
vector< VI > arr,adj;
vector<PIP> edges; 
bool comp(PIP a,PIP b){
	return a.first>b.first; 
}
VI parent; 
int Parent(int x){
	if(parent[x]==x)return x;
	return parent[x]=Parent(parent[x]);
}
void kruskal(int V,int E)
{
	sort(edges.begin(),edges.end(),comp);
	int x,y;
	for(int i=0;i<E;i++){
		x=edges[i].second.first;
		y=edges[i].second.second; 
		if(Parent(x)==Parent(y))continue; 
		else 
		{
			parent[parent[x]]=parent[y];
			arr[x][y]=arr[y][x]=edges[i].first;
			adj[x].pb(y);
			adj[y].pb(x);
		}
	}
}
void dfs(int p,int x,int baap)
{
	arr[baap][x]=arr[x][baap]=min(arr[baap][p],arr[p][x]);
	for(int i=0;i<adj[x].size();i++){
		if(adj[x][i]!=p)dfs(x,adj[x][i],baap);
	}
}
int main(){
	int V=fcin(),E=fcin(),u,v,w;
	arr.resize(V);
	adj.resize(V);
	parent.resize(V);
	for(int i=0;i<V;i++){
		arr[i].resize(V),parent[i]=i;
		for(int j=0;j<V;j++)arr[i][j]=(int)1e9;
	} 
	for(int i=0;i<E;i++){
		u=fcin();v=fcin();w=fcin();
		edges.pb(mp(w,mp(u,v)));
	}
	kruskal(V,E);
	for(int i=0;i<V;i++)dfs(i,i,i); 
	for(int i=0;i<V;i++){
		for(int j=0;j<V;j++)
			printf("%d ",(i==j)?0:arr[i][j]);
		printf("\n");
	}
	return 0;
}