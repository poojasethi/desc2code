#include <cstdio>
#include <algorithm>
using namespace std;
struct edge{
    int u;
    int v;
    int w;
};
bool operator <(const edge &a,const edge &b){
    return a.w < b.w;
}
bool operator >(const edge &a,const edge &b){
    return a.w > b.w;
}
bool operator ==(const edge &a,const edge &b){
    return a.w == b.w;
}
int v,e;
edge edges[1000000];
edge elegi[1000];
int nelegi;
int padre[1000];
int ancestro(int a){
    while(padre[a] != a){
        padre[a] =  padre[padre[a]];
        a = padre[a];
    }
    return a;
}
struct elem{
    int nodo;
    int w;
    int sig;
};
elem lista[2001];
int nlista;
int arista[1000];
void inserta(int a,int b,int w){
    nlista++;
    lista[nlista].nodo = b;
    lista[nlista].w = w;
    lista[nlista].sig = arista[a];
    arista[a] = nlista;
}
void agrega(int i){
    elegi[nelegi] = edges[i];
    int pa, pb;
    pa = ancestro(elegi[nelegi].u);
    pb = ancestro(elegi[nelegi].v);

    padre[pa] = pb;

    inserta(elegi[nelegi].u,elegi[nelegi].v,elegi[nelegi].w);
    inserta(elegi[nelegi].v,elegi[nelegi].u,elegi[nelegi].w);

    nelegi++;
}
int visi[1000];
int calo[1000];
int comex;
void marca(int nodo,int ant){
    visi[nodo] = comex;
    calo[nodo] = ant;
    int p = arista[nodo];
    while(p!=0){
        if( visi[lista[p].nodo] != comex ){
            int sig = ant < lista[p].w ? ant: lista[p].w;
            marca(lista[p].nodo,sig);
        }
        p = lista[p].sig;
    }
}
void busca(int nodo){
    comex++;
    calo[nodo] = 0;
    visi[nodo] = comex;
    int p = arista[nodo];
    while(p !=0){
        if( visi[lista[p].nodo] != comex){
            marca(lista[p].nodo,lista[p].w);
        }
        p = lista[p].sig;
    }
}
int main(){
    //lee entrada
    scanf("%d%d",&v,&e);
    for(int i=0;i<e;i++){
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        edges[i].u = a;
        edges[i].v = b;
        edges[i].w = c;;
    }
    //ordena aristas
    sort(edges,edges+e);

    //encuentra arbol de expansion maxima
    for(int i=0;i<v;i++){
        padre[i] = i;
    }
    for(int i = e -1;i>=0;i--){
        int pa,pb;
        pa = ancestro(edges[i].u);
        pb = ancestro(edges[i].v);
        if( pa!= pb){
            agrega(i);
        }
    }

    for(int i=0;i<v;i++){
        busca(i);
        for(int i=0;i<v;i++){
            printf("%d ",calo[i]);
        }
        printf("\n");
    }

    return 0;
}
