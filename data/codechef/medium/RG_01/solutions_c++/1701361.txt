    #include <iostream>
    #include <cstdio>
    #include <algorithm>
    #include <vector>
    #include <cstring>
    using namespace std;
    struct edge
    {
    int w, u, v;
    edge() {}
    edge(int a, int b, int c) {w = a; u = b; v = c;}
    bool operator<(const edge& other) const {return (w > other.w);}
    };
    const int MaxN = 1224;
    const int INF = 2000224224;
    vector<edge> V;
    vector<pair<int, int> > E[MaxN];
    int n, m;
    int dist[MaxN][MaxN];
    int rank[MaxN], pa[MaxN];
    inline void ds_make(int v)
    {
    pa[v] = v;
    rank[v] = 0;
    }
    inline int ds_find(int v)
    {
    int tmp = v;
    while (v != pa[v]) v = pa[v];
    while (tmp != v)
    {
    int path_compress = pa[tmp];
    pa[tmp] = v;
    tmp = path_compress;
    }
    return v;
    }
    inline void ds_union(int u, int v)
    {
    u = ds_find(u);
    v = ds_find(v);
    if (rank[v] > rank[u]) swap(u, v);
    else if (rank[u] == rank[v]) rank[u]++;
    pa[v] = u;
    }
    bool mark[MaxN];
    void dfs(int curr, int currmin, int idx)
    {
    mark[curr] = true;
    if (curr != idx) dist[idx][curr] = currmin;
    for (int i = 0; i < E[curr].size(); i++) if (!mark[E[curr].at(i).first])
    dfs(E[curr].at(i).first, min(currmin, E[curr].at(i).second), idx);
    }
    inline void read_int(int& n)
    {
    n = 0;
    char ch = getchar_unlocked();
     
    while (ch < '0' || ch > '9') {ch = getchar_unlocked();}
    while (ch >= '0' && ch <= '9')
    {n = n * 10 + ch - '0'; ch = getchar_unlocked();}
    }
    int main()
    {
    cin.sync_with_stdio(0);
    V.reserve(2000000);
    read_int(n); read_int(m);
    for (int i = 0; i < n; i++) ds_make(i);
    while (m--)
    {
    int u, v, w;
    read_int(u); read_int(v); read_int(w);
    V.push_back(edge(w, u, v));
    }
    sort(V.begin(), V.end());
    for (int i = 0; i < V.size(); i++)
    {
    int u = V[i].u, v = V[i].v, w = V[i].w;
    if (ds_find(u) != ds_find(v))
    {
    E[u].push_back(make_pair(v, w));
    E[v].push_back(make_pair(u, w));
    ds_union(u, v);
    }
    }
    for (int i = 0; i < n; i++)
    {
    memset(mark, 0, sizeof(mark));
    dfs(i, INF, i);
    }
    for (int i = 0; i < n; i++)
    {
    for (int j = 0; j < n; j++) printf("%d ", dist[i][j]);
    printf("\n");
    }
    return 0;
    } 