    #include <algorithm>
    #include <stdio.h>
    
    #include <string.h>

    using namespace std;

    typedef struct {
    unsigned short v1, v2;
    unsigned int w;
    } edge;

    typedef struct vertex {
    vertex *head;
    vertex *next;
    } vertex;


   vertex* findhead(vertex* v)
    {
        if(v->head == NULL) return v;
        return findhead(v->head);
    }

    void append(vertex* l1, vertex* l2)
    {
        vertex *head = findhead(l1);

        l1->next = l2;

        l2->head = head;

    }

    
    bool edge_cmp_max(edge t1, edge t2)
    {
        return t1.w > t2.w;
    }
    
    
    
    char digit_lut[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";

    static char *fmt_uint(int x, char *s){
        char b[16], *p = b+16;
        if(x < 100){
        if(x < 10) { s[0] = '0' + x; s[1] = 0; return s+1; }
        else { s[0] = digit_lut[x*2]; s[1] = digit_lut[x*2+1]; s[2] = 0; return s+2; }
        }
        do {
        char *d = digit_lut + (x%100)*2;
        *(--p) = d[1]; *(--p) = d[0];
        x /= 100;
        } while(x >= 10);
        if(x){ *(s++) = '0' + x; }
        while(p != b+16){ *(s++) = *(p++); *(s++) = *(p++); }
        *s = 0;
        return s;
    }


    void mat_print(int A[1000][1000], int n, int m)
    {
        int i, j;
        char buf[20000];
        for(i = 0; i < n; i++){
        char *ptr = buf;
        for(j = 0; j < m; j++){
        if(j != 0){
        *ptr = ' ';
        ptr++;
        }

        ptr = fmt_uint(A[i][j], ptr);
        }
        *ptr = 0;
        printf("%s\n", buf);
        }
    }


    
    int main(int argc, char **argv)
    {
        int i;
        int V = 0;
        int E = 0;
       
        vertex vertices[1000]= {};
   
        int A[1000][1000] = {};
       
        char c = getchar_unlocked();
        while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

        while(c >='0' && c <='9')
            {
                V = (V<<3) + (V<<1) + c-'0';
                c=getchar_unlocked(); 
            }


        while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

        while(c >='0' && c <='9')
            {
                E = (E<<3) + (E<<1) + c-'0';
                c=getchar_unlocked(); 
            }
       
    
       edge edges[E];
       
        for(i = 0; i < E; i++){
            int j=0,k=0; long int weight=0;

            while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

            while(c >='0' && c <='9')
            {
                j = (j<<3) + (j<<1) + c-'0';
                c=getchar_unlocked(); 
            }

            while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();
            
            while(c >= '0' && c<='9')
            {
                k = (k<<3) + (k<<1) + c-'0';
                c=getchar_unlocked(); 
            }
        

            while(c==' ' || c== '\n' || c=='\t') c=getchar_unlocked();

            while(c >= '0' && c<='9')
            {
                weight = (weight<<3) + (weight<<1) + c-'0';
                c=getchar_unlocked(); 
            }
            
            edges[i].v1 = j;
            edges[i].v2 = k;
            edges[i].w = weight;
        }

        int j;

        sort(edges, edges+E, edge_cmp_max);
        
        j = 0;
        for(i = 0; i < E; i++){
        
            int v1 = edges[i].v1;
            int v2 = edges[i].v2;
            int w = edges[i].w;
            vertex *h1 = findhead(&vertices[v1]);
            vertex *h2 = findhead(&vertices[v2]);
        
            if(h1 == h2)
                continue;
        
            A[v1][v2] = A[v2][v1]=w;
        
            vertex *cur1 = h1;
            vertex *cur2 = h2;
            while(1){
        
                cur2 = h2;
                int i1 = cur1 - vertices;
                while(cur2){
               
                    int i2 = cur2 - vertices;
                    
                                            
                    A[i1][i2] = A[i2][i1]=w;
                
                    cur2 = cur2 -> next;
            }
            
            if(cur1->next==NULL){
                append(cur1, h2);
                break;
            }
            cur1 = cur1 ->next;
        }
             
    }    
        
        
        mat_print(A, V, V);
    
        return 0;
    } 