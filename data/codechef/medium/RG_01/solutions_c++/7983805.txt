#include <algorithm>
#include <stdio.h>
#include <assert.h>
#include <string.h>
 
#define MIN(a,b) ((a)<(b) ? (a) : (b))
#define MAX(a,b) ((a)>(b) ? (a) : (b))
 
using std::sort;
 
// #define ASSERT(x) assert(x)
#define ASSERT(x)
 
typedef struct {
  unsigned short v1, v2;
  unsigned int w;
} edge_t;
 
typedef struct node_t {
  node_t *head;
  node_t *next;
} node_t;
 
node_t *node_head(node_t *node){
  if(node->head == NULL){
    return node;
  }
  node->head = node_head(node->head);
  return node->head;
}
 
node_t *node_append(node_t *head_last, node_t *tail_first){
  node_t *head_head = node_head(head_last);
 
  ASSERT(tail_first->head == NULL);
  ASSERT(head_head->head == NULL);
  ASSERT(head_last->next == NULL);
 
  tail_first->head = head_head;
  head_last->next = tail_first;
 
  return head_head;
}
 
bool edge_cmp_max(const edge_t &a, const edge_t &b)
{
  return a.w > b.w;
}
 
void C_set(int C[1000][1000], int i, int j, int w)
{
  C[i][j] = C[j][i] = w;
}
 
#define IS_DIGIT(x) ((x) >= '0' && (x) <= '9')
 
char digit_lut[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
 
static char *fmt_uint(int x, char *s){
  char b[16], *p = b+16;
 
  if(x < 100){  
    if(x < 10) { s[0] = '0' + x;                                 s[1] = 0; return s+1; }
    else       { s[0] = digit_lut[x*2]; s[1] = digit_lut[x*2+1]; s[2] = 0; return s+2; }
  }
 
  do {
    char *d = digit_lut + (x%100)*2;
    *(--p) = d[1]; *(--p) = d[0];
    x /= 100;
  } while(x >= 10);
 
  if(x){ *(s++) = '0' + x; }
  while(p != b+16){ *(s++) = *(p++); *(s++) = *(p++);  }
 
  *s = 0;
  return s;
}
 
#define IS_DIGIT(x) ((x) >= '0' && (x) <= '9')
 
static int parse_uint()
{
  int i = 0;
  char c = getchar_unlocked();
  while(!IS_DIGIT(c)) c = getchar_unlocked();
  do {
    i = (i*10) + c-'0';
    c = getchar_unlocked();
  }while(IS_DIGIT(c));
  return i;
}
 
void mat_print(int A[1000][1000], int n, int m)
{
  int i, j;
  char buf[20000];
  for(i = 0; i < n; i++){
    char *ptr = buf;
    for(j = 0; j < m; j++){
      if(j != 0){
	*ptr = ' ';
	ptr++;
      }
      ptr = fmt_uint(A[i][j], ptr);
    }
    *ptr = 0;
    printf("%s\n", buf);
  }
}
 
void max_score_pairs(int n_nodes, node_t *nodes, int n_edges, edge_t *edges, 
		     int C[1000][1000])
{
  int i, j;
 
  sort(edges, edges+n_edges, edge_cmp_max);
 
  j = 0;
  for(i = 0; i < n_edges; i++){
    int v1 = edges[i].v1;
    int v2 = edges[i].v2;
    int w = edges[i].w;
    node_t *n1 = &nodes[v1];
    node_t *n2 = &nodes[v2];
    node_t *h1 = node_head(n1);
    node_t *h2 = node_head(n2);
 
    if(h1 == h2){
      // Ignore edge.
      ASSERT(C[v1][v2] != 0 && "Should be initialized, at least for our tests!");
      continue;
    }
 
    C_set(C, v1, v2, w);
 
    // Connect nodes in h1 to h2 and join them.
    node_t *cur1 = h1;
    while(1){
      node_t *cur2 = h2;
      while(cur2){
	int i1 = cur1 - nodes;
	int i2 = cur2 - nodes;
	int c;
 
	if(i1 != v1 || i2 != v2){
	  c = w;
	  if(i1 != v1){
	    ASSERT(C[i1][v1] != 0 && "Should be non-zero for our tests.");
	    c = MIN(c, C[i1][v1]);
	  }
	  if(i2 != v2){
	    ASSERT(C[i2][v2] != 0 && "Should be non-zero for our tests.");
	    c = MIN(c, C[i2][v2]);
	  }
	  C_set(C, i1, i2, c);
	}
 
	cur2 = cur2->next;
      }
      if(!cur1->next)
	break;
 
      cur1 = cur1->next;
    }
 
    // Find cur1 is the last node in h1 list
    node_append(cur1, h2);
  }
}
 
void brute_force(int n_vert, int n_edges, edge_t *edges, int A[1000][1000])
{
  int e, i, j, k;
 
  for(e = 0; e < n_edges; e++){
    int v1 = edges[e].v1;
    int v2 = edges[e].v2;
    int w  = edges[e].w;
 
    A[v2][v1] = A[v1][v2] = MAX(A[v1][v2], w);
 
    // Check all possible combinations.
    for(i = 0; i < n_vert; i++){
      for(j = 0; j < n_vert; j++){
	if(i == j)
	  continue;
	// Try to find better path via k.
	for(k = 0; k < n_vert; k++){
	  if(i == k || j == k){
	    continue;
	  }
	  A[i][j] = MAX(A[i][j], MIN(A[i][k], A[k][j]));
	}
      }
    }
  }
}
 
int main(int argc, char **argv)
{
  int i;
  int n_vert = 0;
  int n_edge = 0;
  edge_t *edges;
  node_t nodes[1000]= {};
  int A[1000][1000] = {};
 
  n_vert = parse_uint();
  n_edge = parse_uint();
 
  edges = (edge_t*)malloc(n_edge * sizeof(edge_t));
  for(i = 0; i < n_edge; i++){
    edges[i].v1 = parse_uint();
    edges[i].v2 = parse_uint();
    edges[i].w  = parse_uint();
  }
 
  //brute_force(n_vert, n_edge, edges, A);
  max_score_pairs(n_vert, nodes, n_edge, edges, A);
 
  mat_print(A, n_vert, n_vert);
 
  free(edges);
  return 0;
}  