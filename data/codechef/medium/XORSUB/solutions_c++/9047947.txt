#include<iostream>
#include<cmath>
#include<cstdio>
#include<climits>
#include<set>
#include <algorithm>
using namespace std;
#define gc getchar_unlocked

inline unsigned long long uscan()
{
    register unsigned long long n=0,c=gc();
	while(c<'0'||c>'9')
	c=gc();
	while(c<='9'&&c>='0'){
	n=n*10+c-'0';
	c=gc();}
	return n;
}

const unsigned int b[] = {0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000};
const unsigned int S[] = {1, 2, 4, 8, 16};

inline long long length(long long x){
register unsigned int r = 0; // result of log2(v) will go here
/*
	while (x) {
 		++r;	x>>=1;
	 }
	return r;
*/
	if(x==0)
		return 0;

//	return log2(x);

for (register int i = 4; i >= 0; i--) // unroll for speed...
{
  if (x & b[i])
  {
    x >>= S[i];
    r |= S[i];
  } 
}
return r;
}




struct compare {
    bool operator()(pair<long long,int> a,pair<long long,int> b ) const {
        return (a.second > b.second)||((a.second==b.second)&&(a.first>b.first));
    }
};

void eliminate(set<pair<long long,int>,compare> & vec){
	for(set<pair<long long,int>,compare>::iterator it1=vec.begin();it1!=vec.end();it1++){
		int l=it1->second;
		long long f=it1->first;
	//	cout<<f<<' ';
		if(l==0)
			break;

		set<pair<long long,int>,compare>::iterator it2=it1;
			it2++;
        while(it2!=vec.end() && l==it2->second){
			
			long long temp=f^(it2->first);
			vec.erase(it2);
			if(temp!=0)
				vec.insert(make_pair(temp,length(temp)));
			it2=it1;
			it2++;
		}

	}
}
			


int main(){
	int n,t;
	long long a,k;
	cin>>t;
	while(t--){
	cin>>n>>k;
	set<pair<long long,int>,compare> vec;
	for(int i=0;i<n;i++){
		a=uscan();
		vec.insert(make_pair(a,length(a)));
	}


	eliminate(vec);
	long long ans=k;
	for(set<pair<long long,int>,compare>::iterator it=vec.begin();it!=vec.end();it++){
	//	cout<<it->first<<' ';
		long long temp=ans^(it->first);
		if(ans<temp)
			ans=temp;
	}
	cout<<ans<<endl;
	}
	return 0;
}


