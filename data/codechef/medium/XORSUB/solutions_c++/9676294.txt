//#include<bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <set>
using namespace std;
#define w(t) while(t--)
#define S(x) scanf("%d",&x)
#define SLL(x) scanf("%lld",&x)
#define P(x) printf("%d\n",x)
#define fl(i , a, b) for(i = (int)a; i<(int)b; i++)
#define mem(a , value) memset(a , value , sizeof(a))
#define tr(c, itr) for(itr = (c).begin(); itr != (c).end(); itr++)
#define MOD 1000000007
#define MAX 1000000010
#define ll long long
#define all(v) v.begin(),v.end()
#define mp make_pair
#define pb push_back
#define f first
#define s second
typedef pair<int,int> pp;
ll a[1234567];
ll ans[102]; 
std::vector<ll> buckets[100];
int fun(ll x)
{
	int r=0 ;
	while(x > 0 )
	{
		x=x/2;
		r++;
	}
	return r;
}
int main()
{
	//std::ios_base::sync_with_stdio(false);
	/*
	The main idea is to maximise the msb and take only one number among all the k no's that have 
	the most signifacnt bit and iterate it for (k-1) msb and so on ... 
	and then maximise over taking all the numbers. if(taking numbers makes ans > curr_ans) then take it ;
	*/
	int n ,i, j , k ;
	int t;
	S(t); 
	w(t)
	{
		S(n); S(k);
		fl(i,0,n) SLL(a[i]); 
		fl(i ,0 , 65)
		buckets[i].clear(); 
		fl(i,0,n)
		{
			int len = log2(a[i]) + 1;
			buckets[len].pb(a[i]);  
		}
		int cnt = 0 ; 
		for(i = 64; i>0; i--)
		{
			if(buckets[i].size() > 0 )
			{	
				ans[cnt++] = buckets[i][0]; 
				for(j = 1 ; j < (int)buckets[i].size() ; j++)
				{
					ll tmp = buckets[i][0] ^ buckets[i][j];
					if(tmp!=0)
					{
						int len = log2(tmp) + 1;
						buckets[len].pb(tmp); 
					}
				}
			}
		}
		ll final = k ; 
		for(i =0 ;i < cnt ; i++)
		{
			if(final < (final ^ ans[i]))
				final = final ^ ans[i]; 
		} 
		printf("%lld\n", final);
	}
	return 0; 
}