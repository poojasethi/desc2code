def ContainsBit(mask, i):
  return mask & (1 << i) > 0

def GaussianElimination(values, n):
  values.sort(reverse=True)
  bit = max(i if ContainsBit(values[0], i) else 0 for i in xrange(11))
  start = 0
  for b in xrange(bit, -1, -1):
    j = -1
    for i in xrange(start, n):
      if ContainsBit(values[i], b):
        j = i
        break
    if j == -1:
      continue
    values[start], values[j] = values[j], values[start]
    for i in xrange(start+1, n):
      if ContainsBit(values[i], b):
        values[i] ^= values[start]
#    print values
    start += 1
    if start >= n:
      break
  return values
       
for _ in xrange(int(raw_input())):
  n, k = map(int, raw_input().split())
  values = map(int, raw_input().split())
  values = GaussianElimination(values, n)
  for v in values:
    k = max(k, k^v)
  print k
