import math

alph = 26
modnum = 1000000007
def egcd(a , b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def main():

	global alph
	t = int(raw_input())
	invnum = modinv(alph-1 , modnum)
	for i in range(t):
		n = int(raw_input())
		# num = (n-1)/2 + 1
		evnum = (n+1)/2 - 1
		# 
		# 2(alph^1 + alph^2 ... alph^evnum)
		#
		sumtillnow = ((pow(alph , evnum , modnum) - 1)*alph) % modnum
		# print sumtillnow
		sumtillnow = (sumtillnow * invnum * 2) % modnum 
		if n%2 == 0:
			tobeadded = 2 * pow(alph , evnum+1 , modnum)
			sumtillnow = (sumtillnow + tobeadded) % modnum
		else:
			tobeadded = pow(alph , evnum+1 , modnum)
			sumtillnow = (sumtillnow + tobeadded) % modnum

		print sumtillnow

if __name__ == '__main__':
	main()