#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define ll  long long int


void matmult(ll  a[][3],ll  b[][3],ll c[][3])//multiply matrix a and b. put result in c
{
    int i,j,k;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            c[i][j]=0;
            for(k=0;k<3;k++)
            {
                c[i][j]+=(a[i][k]*b[k][j]);
                c[i][j]=c[i][j]%mod;
            }
        }
    }

}
void matpow(ll Z[][3],ll n,ll ans[][3]) //find ( Z^n )% M and return result in ans
{
    ll temp[3][3];
    //assign ans= the identity matrix
    ans[0][0]=1;
    ans[1][0]=0;
    ans[0][1]=0;
    ans[1][1]=1;
    ans[0][2]=0;
    ans[2][0]=0;
    ans[2][2]=1;
    ans[2][1]=0;
    ans[1][2]=0;
    int i,j;
    while(n>0)
    {
        if(n&1)
        {
            matmult(ans,Z,temp);
            for(i=0;i<3;i++)
                for(j=0;j<3;j++)
                    ans[i][j]=temp[i][j];
        }
        matmult(Z,Z,temp);
        for(i=0;i<3;i++)
            for(j=0;j<3;j++)
                Z[i][j]=temp[i][j];

        n=n/2;
    }
    return;
}


int main()
{
    int t;
    cin>>t;

    while(t--)
    {
        ll n;
        ll M[3][3]={{1,26,-26},{1,0,0},{0,1,0}},ans[3][3]={{0,0,0},{0,0,0}},res=0;
        cin>>n;
        if(n<4)
        {
            if(n==1)    res=26;
            else if(n==2)   res=52;
            else if(n==3)   res=728;
            cout<<res<<"\n";
        }
        else
        {
            matpow(M,n-2,ans);
            res=(ans[0][0]*52)%mod;
            ll res2=ans[0][1]*26%mod;
            res=(res+res2)%mod;
            if(res<=0)
                res+=mod;
            cout<<res<<"\n";
        }
    }
    return 0;
}
