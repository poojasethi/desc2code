#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <stack>
#include <list>
#include <vector>
#include <queue>
#include <deque>
#include <ctype.h>

using namespace std;

#define PI acos(-1)
#define MP make_pair
#define PB push_back
#define VI vector <int>
#define PII pair <int, int>
#define LL long long
#define SET(v,i) memset(v, i, sizeof(v))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORD(i,a,b) for (int i = (a); i >= (b); i--)
#define FORN(i,a,b) for (int i = (a); i < (b); i++)
#define DOWN(i,b) for (int i = 0; i > (b); i--)
#define FIT(it,v) for (typeof(v.begin()) it = v.begin(); it != v.end(); it++)
#define FITD(it,v) for (typeof(v.rbegin()) it = v.rbegin(); it != v.rend(); it++)
#define FREOPEN freopen("a.in", "r", stdin); freopen("a.out", "w", stdout)

long long const mod = 1000000007;


struct matrix {
    long long a[2][2];

    matrix() {
        SET (a, 0);
    }

    void unit_matrix() {
        a[0][0] = 26; a[0][1] = 0;
        a[1][0] = 1 ; a[1][1] = 1;
    }

	//use this operator to calculate the product of two matrix
    matrix operator * (matrix b) {
        matrix c;
        SET (c.a, 0);

        FOR (k, 0, 1)
            FOR (i, 0, 1)
                FOR (j, 0, 1)
                    c.a[i][j] = (c.a[i][j] + a[i][k] * b.a[k][j]) % mod ;
        return c;
    }
};

long long pow (int x, long long n) {//calculate x^n
    if (n == 0) return 1;

    long long res = pow (x, n / 2);

    res = (res * res) % mod;
    if (n % 2) res = (res * x ) % mod;

    return res;
}

matrix pow_matrix(matrix a, long long n) {//calculate the matrix a to the power of n
    if (n == 1) return a;

    matrix b = pow_matrix(a, n / 2);
    b = b * b;

    if (n % 2) b = b * a;

    return b;
}

int main() {

    int test;
    cin >> test;
    long long n;
    matrix a;

    while (test --) {
        scanf("%lld", &n);
        a.unit_matrix();
        a = pow_matrix (a, (n + 1) / 2);

        long long res = (a.a[1][0] * 26) % mod;

        res = (res * 2) % mod;

        if (n % 2) res = (res - pow(26, (n + 1) / 2)) % mod;
        res = (res + mod) % mod;

        printf("%lld\n", res);
    }
    return 0;
}
