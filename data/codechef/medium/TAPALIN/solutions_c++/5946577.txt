/*
***************************************************************************************************************

							Author : Yash Sadhwani

**************************************************************************************************************
*/
#include<stdio.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<functional>
using namespace std;
#define ll long long
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define sc(x) scanf("%c",&x)
#define vl vector<ll>
#define vi vector<int>
#define vvl vector< vl >
#define vvi vector< vi >
#define pb push_back
#define mod 1000000007
#define mem(x,y) memset(x,y,sizeof(x))
#define f(i,a,b) for(int i=(a);i<(b);i++)
#define max_int_value 2147483647
#define max_long_value 9223372036854775807



//qsort(ww,cc,sizeof(tp),compare);
/*int compare(const void *a,const void *b){
	ll y=((((tp*)a)->w)-(((tp*)b)->w));
	if(y>0)return 1;
	else if(y==0)return 0;
	else return -1;
}
bool way(ii x,ii y){
	return x.first<y.first or x.first==y.first and x.second<y.second;
}
*/


#define MAXN 1010
#define ls (node<<1)
#define rs ((node<<1)+1)
#define ii pair<int,int>

struct matrix{
	ll mat[4][4];
};

matrix mul(matrix A,matrix B){
	matrix ret;
	for(int i=0;i<3;i++){
		for(int j=0;j<3;j++){
			ret.mat[i][j]=0;
			for(int k=0;k<3;k++){
				ret.mat[i][j]+=(A.mat[i][k]*B.mat[k][j]);
				ret.mat[i][j]%=mod;
			}
		}
	}
	return ret;
}

matrix pow(matrix A,ll p){
	if(p==1)return A;
	matrix ret=pow(A,p/2);
    ret=mul(ret,ret);
	if(p&1)return mul(A,ret);
	return ret;
}

matrix transition;

inline void CreateTransitionMatrix(){
	transition.mat[0][0]=transition.mat[0][2]=transition.mat[1][1]=transition.mat[1][2]=transition.mat[2][1]=0;
	transition.mat[0][1]=transition.mat[2][0]=transition.mat[2][2]=1;
	transition.mat[1][0]=26;
}

ll N;

inline void ReadInput(void){
	sl(N);
}

inline void solve(void){
	if(N==1 || N==2){
		printf("%d\n",26*N );
		return;
	}
	matrix ans=pow(transition,N-2);
	ll ret=0;
	for(int i=0;i<3;i++){
		for(int j=0;j<2;j++){
			ret+=ans.mat[i][j];
			ret%=mod;
		}
	}
	ret=(ret*26)%mod;
	printf("%lld\n",ret );
}

inline void Refresh(void){

}

int main()
{
    ios_base::sync_with_stdio(false);
    CreateTransitionMatrix();
    int t; si(t);
    while(t--){
    	ReadInput();
    	solve();
    }
	return 0;
}