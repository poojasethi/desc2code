#include <cstdio>

typedef long long LL;

const int MOD = 1000000007;

// returns a^n % MOD
// exponentiation by squaring
int powmod(int a,int n)
{
	int p=1;
	for(;n;)
	{
		if(n%2) p=LL(p)*a%MOD;
		if(n/=2) a=LL(a)*a%MOD;
	}
	return p;
}

// returns the answer for the problem
// it is 2*(26+...+26^k), k = (n+1)/2
// minus 26^k for odd n
// 2*(26+...+26^k) = 52*(26^k-1)/25
int calc(int n)
{
	// inv25 is the inverse residue of 25 modulo MOD:
	// 25 * inv25 % MOD = 1
	int inv25 = powmod(25, MOD-2);
	int k = (n+1)/2;
	int p26 = powmod(26,k); // 26^k % MOD
	int ans = 52LL * (p26 - 1) % MOD * inv25 % MOD; // 52 * (26^k-1) / 25 % MOD
	if(n%2)
		ans = (ans + MOD - p26) % MOD; // subtract 26^k for odd n
	return ans;
}

int main()
{
	int T;
	scanf("%d",&T);
	for(int t=0;t<T;t++)
	{
		int n;
		scanf("%d",&n);
		int ans = calc(n);
		printf("%d\n",ans);
	}
	return 0;
}