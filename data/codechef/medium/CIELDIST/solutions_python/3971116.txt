#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd
import string


# choisi k nombre parmis n
def choose(n, k):
    """
    A fast way to calculate binomial coefficients by Andrew Dalke (contrib).
    """
    if 0 <= k <= n:
        ntok = 1
        ktok = 1
        for t in xrange(1, min(k, n - k) + 1):
            ntok *= n
            ktok *= t
            n -= 1
        return ntok / ktok
    else:
        return 0


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args)
    t2 = time()
    r2 = f2(*args)
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__, r1, t2 - t1, f2.__name__, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(ds, dt, d):
    if d >= ds + dt:
        #print "case a)b) far away"
        return d - ds - dt
    elif d < abs(ds - dt):
        #print "case d) inside"
        # dist between circles: D
        # radius of circle ds, dt
        # find the small circle
        small_circle = min([ds, dt])
        big_circle = max([ds, dt])
        # cs = center small, cb = center big
        # A--B--cs--C--cb-----------D
        # smallest dist is between A and B
        # if cb is at center
        # A = big_circle
        # B = d+small_circle
        return big_circle - d - small_circle
    else:
        #print "dist to S", ds
        #print "dist to T", dt
        #print "dist between markets:", d
        #print "case c) collision"
        return 0

    return Exception("Invalid case")


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        ds, dt, d = map(int, data.readline().split())
        #lfloat = map(float, data.readline().split())
        #lstring = data.readline().split()
        #s= data.readline().strip()
        # different cases:
        # a) les cercles de rayon dt et ds autour de T et S se croisent: on
        # emts le restau sur un des criosements
        # b) les cercles se touchent : pareil que a
        # c) les cercles ne se touchent pas: on let mes le plus proch possible
        # de l'autre
        # d) les cercles sont l'un dans l'autre
        #print max(0, d - dt - ds)
        print float(alg(ds, dt, d))


if __name__ == "__main__":
    main()
