/** Stacks.cpp **/

#include <bits/stdc++.h>
#define LL long long int
using namespace std;

/*bool flag = false;


int first(LL arr[], int low, int high, LL x, int n)
{
  if(high >= low)
  {
    int mid = (low + high)/2;  /*low + (high - low)/2;
    if( ( mid == 0 || x > arr[mid-1]) && arr[mid] == x)
      return mid;
    else if(x > arr[mid])
      return first(arr, (mid + 1), high, x, n);
    else
      return first(arr, low, (mid -1), x, n);
  }
  return -1;
}

int ceilSearch(LL arr[], int low, int high, LL x,int size)
{
  int mid;    
 
  /* If x is smaller than or equal to the first element,
    then return the first element */
	
	/* If x is greater than the last element, then return -1 
  if(x >= arr[high])
    return -1;


  if(x <= arr[low])
  {
		if(arr[low] == x)
		{
			int temp = first(arr,0,size-1,x+1,size);
			if(temp == -1)
			{
				return ceilSearch(arr,0,size-1,x+1,size);
			}
			else
			{
				return temp;
			}
		}
		
		else
		{
			return low;
		}
  }
   
 
    
 
  /* get the index of middle element of arr[low..high]
  mid = (low + high)/2;  /* low + (high - low)/2 */
 
  /* If x is same as middle element, then return mid 
  if(arr[mid] == x)
  {
    return first(arr,0,size-1,x+1,size);
  }  
  /* If x is greater than arr[mid], then either arr[mid + 1]
    is ceiling of x or ceiling lies in arr[mid+1...high]
  else if(arr[mid] < x)
  {
    if(mid + 1 <= high && x <= arr[mid+1])
	{
		if(x == arr[mid+1])
		{
			int temp = first(arr,0,size-1,x+1,size);
			if(temp == -1)
			{
				return ceilSearch(arr,0,size-1,x+1,size);
			}
			else
			{
				return temp;
			}
		}
		else
		{
			return mid+1;
		}
	}
      
    else
      return ceilSearch(arr, mid+1, high, x,size);
  }
 
  /* If x is smaller than arr[mid], then either arr[mid] 
     is ceiling of x or ceiling lies in arr[mid-1...high]  
  else
  {
    if(mid - 1 >= low && x > arr[mid-1])
      return mid;
    else    
      return ceilSearch(arr, low, mid - 1, x,size);
  }
}

*/

int ceilSearch(LL arr[],int size,LL x)
{
	int lo = 0;
	int hi = size-1;
	int ans = -1;
	
	while(lo <= hi)
	{
		int mid = (lo+hi)/2;
		
		if(arr[mid] > x)
		{
			ans = mid;
			hi = mid-1;
		}
		else
		{
			lo = mid+1;
		}
		
	}
	return ans;
}

int main()
{
		int T,N,count;
		scanf("%d",&T);
		LL arr[100000];
		LL arr2[100000];
		while(T--)
		{

			scanf("%d",&N);
			//LL arr[N];
			
			for(int i=0;i<N;i++)
			{
				scanf("%lld",&arr[i]);
			}
			
			//LL arr2[N];
			count = 0;
			
			arr2[0] = arr[0];
			count++;
			//flag = false;
			for(int i=1;i<N;i++)
			{
				//flag = false;
				int index = ceilSearch(arr2,count,arr[i]);
				//printf("%d\n",index);
				if(index == -1)
				{
					arr2[count++] = arr[i]; 
				}
				else
				{
					arr2[index] = arr[i];
				}
				
			}
			printf("%d ",count);
			for(int i=0;i<count;i++)
			{
				printf("%lld ",arr2[i]);
			}
			printf("\n");
		}
}