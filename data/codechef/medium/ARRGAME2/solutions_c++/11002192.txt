#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;

const int maxT = 5;
const int maxn = 100000;
const int threshold = 10;

int n, a[maxn];

int main()
{
	int T;
	assert(scanf("%d", &T) == 1);
	assert(1 <= T <= maxT);
	for (; T --;) {
		assert(scanf("%d", &n) == 1);
		assert(1 <= n <= maxn);
		for (int i = 0; i < n; ++ i) {
			assert(scanf("%d", &a[i]) == 1);
			assert(1 <= a[i] <= 1000000000);
		}
		vector<int> b;
		int cnt[threshold + 1];
		for (int i = 1; i <= threshold; ++ i) {
            cnt[i] = 0;
		}
		for (int i = 0, x; i < n; ++ i) 
		{
			assert(scanf("%d", &x) == 1);
			assert(1 <= x <= 1000000000);
			if (x <= threshold) {
				++ cnt[x];
			} else {
                b.push_back(x);
			}
		}
		sort(b.begin(), b.end());
		double answer = 0;
		for (int  i = 0; i < n; ++ i) {
			//a ^ b > b ^ a
			// b ln a > a ln b
			// b / ln b > a / ln a, try to plot this function :D
			if (a[i] == 1) {
				continue; // none
			}
			double loga = log(a[i]);
			for (int j = 1; j <= threshold; ++ j) {
                if (j * loga > a[i] * log(j)) {
                    answer += cnt[j];
                }
			}
			int bigger = b.end() - upper_bound(b.begin(), b.end(), a[i]);
			answer += bigger;
		}
		printf("%.10f\n", answer / n);
	}
	return 0;
}
