#include<stdio.h>
long long a[100001];
long long n;
long long scan_int()
{
    long long r=0,c;
    do {
        c=getc(stdin);
        if(c>=48&&c<=57)
            r=r*10+(c-48);
        else if(c=='\n'||c==' ')
            return r;
    }while(1);
}
 
long long binsearch(long long elem,long long x)
{
    long long f,l,m; f=0; l=x-1; m=(f+l)/2;
    if(elem<=a[0])
        return 0;
    else if(elem>a[l])
        return x;
    while(f!=m)
    {
        if(elem>a[m])
        {
            f=m; m=(f+l)/2;
        }
        else if(elem<=a[m])
        {
            l=m; m=(f+l)/2;
        }
    }
    return f+1;
}
 
void merge(long long * list,long left_start, long left_end, long right_start, long right_end)
{
	/* calculate temporary list sizes */
	long left_length = left_end - left_start;
	long right_length = right_end - right_start;
    
	/* declare temporary lists */
	long left_half[left_length];
	long right_half[right_length];
    
	long r = 0; /* right_half index */
	long l = 0; /* left_half index */
	long i = 0; /* list index */
    
	/* copy left half of list into left_half */
	for (i = left_start; i < left_end; i++, l++)
	{
		left_half[l] = list[i];
	}
    
	/* copy right half of list into right_half */
	for (i = right_start; i < right_end; i++, r++)
	{
		right_half[r] = list[i];
	}
    
	/* merge left_half and right_half back into list */
	for ( i = left_start, r = 0, l = 0; l < left_length && r < right_length; i++)
	{
		if ( left_half[l] < right_half[r] ) { list[i] = left_half[l++]; }
		else { list[i] = right_half[r++]; }
	}
    
	/* Copy over leftovers of whichever temporary list hasn't finished */
	for ( ; l < left_length; i++, l++) { list[i] = left_half[l]; }
	for ( ; r < right_length; i++, r++) { list[i] = right_half[r]; }
}
void mergesort_r(long left, long right, long long * list)
{
	/* Base case, the list can be no simpiler */
	if (right - left <= 1)
	{
		return;
	}
    
	/* set up bounds to slice array into */
	long left_start  = left;
	long left_end    = (left+right)/2;
	long right_start = left_end;
	long right_end   = right;
    
	/* sort left half */
	mergesort_r( left_start, left_end, list);
	/* sort right half */
	mergesort_r( right_start, right_end, list);
    
	/* merge sorted halves back together */
	merge(list, left_start, left_end, right_start, right_end);
}
void mergesort(long long *list, long long length)
{
	mergesort_r(0, length, list);
}
 
int main()
{
    long long i,j,a1,a2,a3,b1,b2,b3,b4,k,t;
    long long ans,elem;
    scanf("%lld",&t);
    while(t--)
    {
        ans=0;
        b1=b2=b3=b4=a1=a2=a3=0;
        scanf("%lld",&n);
        getchar();
        k=0;
        for(i=0;i<n;i++)
        {
            elem=scan_int();
            if(elem>3)
                a[k++]=elem;
            else if(elem==1)
                a1++;
            else if(elem==2)
                a2++;
            else
                a3++;
        }
        mergesort(a,k);
        for(i=0;i<n;i++)
        {
            elem=scan_int();
            if(elem>4)
            {
                ans=ans+binsearch(elem,k);
            }
            else if(elem==1)
                b1++;
            else if(elem==2)
                b2++;
            else if(elem==3)
                b3++;
            else
                b4++;
        }
        ans=ans+(n-a1)*b1+a2*(n-b1-b2-b3-b4)+a3*(n-b1-b3);
        printf("%.6lf\n",(double)ans/n);
    }
    return 0;
} 