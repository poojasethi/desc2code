#include<iostream>
#include<algorithm>
using namespace std; 
long long int count(long long int x, long long int Y[],long long  int n,long long  int NoOfY[])
{
    if (x == 0) return 0;
    if (x == 1) return NoOfY[0];
 
    long long int* idx = upper_bound(Y, Y + n, x);
    long long int ans = (Y + n) - idx;
 
        ans += (NoOfY[0] + NoOfY[1]);
    if (x == 2)  ans -= (NoOfY[3] + NoOfY[4]);
 
   
    if (x == 3)  ans += NoOfY[2];
 
    return ans;
}
 
long long int countPairs(long long int X[], long long int Y[],long long  int m,long long int n)
{
    long long int NoOfY[5] = {0};
    for (long long int i = 0; i < n; i++)
        if (Y[i] < 5)
            NoOfY[Y[i]]++;
 
       sort(Y, Y + n);
 
       long long int total_pairs = 0;
    
        for (long long int i=0; i<m; i++)
        total_pairs += count(X[i], Y, n, NoOfY);
 
        return total_pairs;
}
int main()
{
    long long  int X[100000] ;
    long long int Y[100000] ;
    long long int t,m;
    cin>>t;
while(t--)
{
  cin>>m;
  for(long long int i=0;i<m;i++)
  cin>>X[i];
  cout.setf(ios::fixed,ios::floatfield);
  for(long long int i=0;i<m;i++)
  cin>>Y[i];
  long long int n=m;
    long long int f= countPairs(X, Y, m,m);
    //cout<<f;
    std::cout.precision(5);
 double d=f/ float(n);
 std::cout.precision(6);
 cout<<d;
 cout<<'\n';
 }
    return 0;
}
