#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;


#define ll long long
#define ff first
#define ss second
#define mpa make_pair
#define MOD 1000000007
#define pb push_back
#define lld I64d
#define MXN 1000000

int bitcnt(int mask){return __builtin_popcount(mask);}
int SET(int N,int pos){	return N=N | (1<<pos);}
int RESET(int N,int pos){	return N= N & ~(1<<pos);}
int check(int N,int pos){	return (N & (1<<pos));}
int toggle(int N,int pos){if(check(N,pos))return N=RESET(N,pos);return N=SET(N,pos);}
void PRINTBIT(int N){	printf("("); for(int i=6;i>=1;i--)	{bool x=check(N,i);cout<<x;}	puts(")");}
int mod(int a, int b) { return a - a/b * b;}

int Sum;
bool vis[14][14];
int dist[14][14];
int Zero_to_T[14];
int All_T_to_End[14];
int All_T[14][14];
int dp[14][1 << 14];
char gra[14][14];
int N;
pair<int, int> kon[14];

void inp()
{
	scanf("%d", &N);
	
	for(int i = 0; i < N; ++i) {
		scanf("%s", gra[i]);
	}
	
	Sum = 0;
	int pos = 0;
	for(int i = 0; i < N; ++i) {
		for(int j = 0; j < N; ++j) {
			if(gra[i][j] == '*') {
				Sum++;
				kon[pos++] = mpa(i, j);
			}
		}
	}
}

bool is_range(int x, int y)
{
	if(x < 0 || y < 0 || x >= N || y >= N || gra[x][y] == '#')
		return false;
	return true;
}

void rec()
{
	return ;
}

int dij(int x1, int y1, int x2, int y2)
{
	for(int i = 0; i < N; ++i) {
		for(int j = 0; j < N; ++j) {
			vis[i][j] = false;
			dist[i][j] = 1e9;
		}
	}
	
	dist[x1][y1] = 0;
	
	queue<pair<int, int> > Qe;
	Qe.push(mpa(x1, y1));
	
	while(!Qe.empty()) {
		pair<int, int> u = Qe.front();
		Qe.pop();
		
		if(vis[u.ff][u.ss])
			continue;
		
		int x = u.ff;
		int y = u.ss;
		
		if(is_range(x + 1, y) && dist[x + 1][y] > dist[x][y] + 1) {
			dist[x + 1][y] = dist[x][y] + 1;
			Qe.push(mpa(x + 1, y));
		}
		
		if(is_range(x, y + 1) && dist[x][y + 1] > dist[x][y] + 1) {
			dist[x][y + 1] = dist[x][y] + 1;
			Qe.push(mpa(x, y + 1));
		}
		
		if(is_range(x - 1, y) && dist[x - 1][y] > dist[x][y] + 1) {
			dist[x - 1][y] = dist[x][y] + 1;
			Qe.push(mpa(x - 1, y));
		}
		
		if(is_range(x, y - 1) && dist[x][y - 1] > dist[x][y] + 1) {
			dist[x][y - 1] = dist[x][y] + 1;
			Qe.push(mpa(x, y - 1));
		}
		
		vis[x][y] = true;
		if(vis[x2][y2])
			break;	
	}
	
	return dist[x2][y2] == 1e9 ? -1 : dist[x2][y2]; 
}

int rec(int prev, int mask)
{
//	cout<<"prev => " << prev << " mask => " << mask <<"\n";
	
	if(bitcnt(mask) == Sum) {
//		cout<<"yaha aa rha h kya??\n";
		return All_T_to_End[prev];
	}
	
	if(dp[prev][mask] != -1)
		return dp[prev][mask];
	
//	cout<<"prev => " << prev << " mask => " << mask <<"\n";
	
	int ans = 1e9;
	for(int i = 0; i < Sum; ++i) {
		if((mask&(1 << i)) == 0) {
			ans = min(ans, All_T[prev][i] + rec(i, mask |(1 << i)));
		}
	}
	
	return dp[prev][mask] = ans;
}

void print()
{
	puts("graph as follow");
	for(int i = 0; i < N; ++i) {
		for(int j = 0; j < N; ++j) {
			cout<< gra[i][j];
		}
		puts("");
	}
}

void solve()
{
	
	//print();
	
//	puts("(0,0) => T");
	
	// (0, 0) => All treasures :D
	 for(int i = 0; i < Sum; ++i) {
	 	Zero_to_T[i] = dij(0, 0, kon[i].ff, kon[i].ss);
	 	if(Zero_to_T[i] == -1) {
	 		
	 		//cout<< " 0,0 wale me\n";
			 
			puts("-1");
	 		return ;
	 	}
	 	
//	 	cout<< Zero_to_T[i] << " ";
	 }
//	 puts("");
	 
	 
//	 puts("T => T");
	 // between all Treasures :)
	 for(int i = 0; i < Sum; ++i) {
	 	for(int j = i + 1; j < Sum; ++j) {
	 		int dis = dij(kon[i].ff, kon[i].ss, kon[j].ff, kon[j].ss);
	 		if(dis == -1) {
	 		//	cout<< "all wale me\n";
	 			
	 			puts("-1");
	 			return ;
	 		}
	 		All_T[i][j] = dis;
	 		All_T[j][i] = dis;
//	 		cout<< All_T[i][j] << " ";
		 }
	 }
//	 puts("");
	 
	 
//	 puts("T => End");
	 // All Treasures => (N - 1, N - 1) ;)
	 for(int i = 0; i < Sum; ++i) {
	 	All_T_to_End[i] = dij(kon[i].ff, kon[i].ss, N - 1, N - 1);
	 	if(All_T_to_End[i] == -1) {
	 		//cout<< "End wale me\n";
	 		
			puts("-1");
	 		return;
	 	}
	 	
//	 	cout<< All_T_to_End[i] << " ";
	 }
//	 puts("");
	 
	 memset(dp, -1, sizeof dp);
	 int ans = 1e9;
	 for(int i = 0; i < Sum; ++i) {
	 	ans = min(ans, Zero_to_T[i] + rec(i, (1 << i)));
//	 	puts("hahahahah bc");
	 }
	 printf("%d\n", ans);
}

int main()
{
	int T;
	scanf("%d", &T);
	
	while(T--) {
		inp();
		solve();
	}
	
	return 0;
}
