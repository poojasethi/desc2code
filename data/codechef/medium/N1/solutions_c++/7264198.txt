#include <iostream>
#include<queue>
#include<utility>
#include<stdio.h>

using namespace std;

typedef pair<int,int> info;
int x[]={-1,1,0,0};
int y[]={0,0,1,-1};
int***visit;
char usermap[14][14];
int treasuremap[14][14];
int treasurenum,startx,starty,tryx,tryy,stepstaken,chestfound;

bool solution;




int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
      int sizee;
      solution=false;
      treasurenum=1;
       scanf("%d",&sizee);

       for(int i=0;i<sizee;i++)
       {
           scanf("%s",usermap[i]);

           for(int j=0;j<sizee;j++)
           {
               if(usermap[i][j]=='*')
               {
                   treasuremap[i][j]=treasurenum;
                   treasurenum++;
               }
           }

       }
       visit= new int **[sizee];
       for(int i=0;i<sizee;i++)
       {
           visit[i]=new int*[sizee];
           for(int j=0;j<sizee;j++)
           {
               visit[i][j]= new int [1<<treasurenum];
               for(int k=0;k < (1<<treasurenum);k++)
                visit[i][j][k]=0;
           }
       }
       queue < pair<info,info> > q;
       pair <info,info> attempt;
       startx=0;
       starty=0;
       q.push(make_pair(info(0,0),info(startx,starty)));
       visit[startx][starty][0]=1;
       while(!q.empty())
       {
           attempt=q.front();

           q.pop();
           stepstaken=attempt.first.first;
           chestfound=attempt.first.second;
           startx=attempt.second.first;
           starty=attempt.second.second;

           if(startx==(sizee-1) && starty==(sizee-1) && (chestfound==((1 << (treasurenum-1))-1)))
           {
               solution=true;
               break;
           }


               for(int i=0;i<4;i++)
               {
                   tryx=startx+x[i];
                   tryy=starty+y[i];

                   if(tryx>=0 && tryx<sizee && tryy>=0 && tryy<sizee && visit[tryx][tryy][chestfound]==0 && usermap[tryx][tryy]!='#')
                   {
                       visit[tryx][tryy][chestfound]=1;
                       if(usermap[tryx][tryy]=='*')
                       {
                           q.push(make_pair(info(stepstaken+1,(chestfound |(1<<(treasuremap[tryx][tryy]-1)))),info(tryx,tryy)));
                       }
                       else
                       {
                           q.push(make_pair(info(stepstaken+1,chestfound),info(tryx,tryy)));
                       }


                   }



           }


       }

       if(solution==false)
        printf("-1\n");
       else
        printf("%d\n",stepstaken);


    }
    return 0;
}
