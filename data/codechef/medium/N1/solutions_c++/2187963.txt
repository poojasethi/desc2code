//http://www.codechef.com/problems/N1
#include <cstdio>
#include <cstring>
#include <algorithm>
#define MAXNODE 13

using namespace std;


int dp[1<<MAXNODE][MAXNODE+1];
int pi[MAXNODE+1];
int pj[MAXNODE+1];
int qi[(MAXNODE+1) * (MAXNODE+1)];
int qj[(MAXNODE+1) * (MAXNODE+1)];
int ql[(MAXNODE+1) * (MAXNODE+1)];
bool done[MAXNODE+1][MAXNODE+1];
char map[MAXNODE+2][MAXNODE+3];
int dist[MAXNODE+2][MAXNODE+3];
int N,T;

inline void push(int i,int j,int l,int &cnt)
{
	qi[cnt]=i;
	qj[cnt]=j;
	ql[cnt++]=l;
	done[i][j]=true;
}

int call_dist(int s,int d)
{
	int i,j,x,y;
	int head,l,cnt;
	
	for(i=0;i<=MAXNODE;i++)
	{
		for(j=0;j<=MAXNODE;j++)
		{
			done[i][j]=false;
		}
	}
	
	i=pi[s];	j=pj[s];
	x=pi[d];	y=pj[d];
	//printf("x= %d,y= %d \n",x,y);
	head=0;
	l=0;
	cnt=1;
	qi[head]=i;
	qj[head]=j;
	ql[head]=l;
	done[i][j]=true;
	while(head < cnt && (qi[head] != x || qj[head] != y))
	{
		i=qi[head];
		j=qj[head];
		l=ql[head];
		if(i-1 >= 0 && (!done[i-1][j] && map[i-1][j] != '#'))
			push(i-1,j,l+1,cnt);
		if(i+1 < N && (!done[i+1][j] && map[i+1][j] != '#'))
			push(i+1,j,l+1,cnt);
		if(j-1 >= 0 && (!done[i][j-1] && map[i][j-1] != '#'))
			push(i,j-1,l+1,cnt);
		if(j+1 < N && (!done[i][j+1] && map[i][j+1] != '#'))
			push(i,j+1,l+1,cnt);
		head+=1;
	}
	return ((qi[head] == x && qj[head] == y) ? ql[head] : -1);
}

int main()
{
	int d,i,tr,j,k,temp;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d",&N);
		for(i=0;i<N;i++)
		{
			scanf("%s",map[i]);
		}
		tr=0;
		pi[tr]=0;
		pj[tr++]=0;
		for(i=0;i<N;i++)
		{
			for(j=0;j<N;j++)
			{
				if(map[i][j] == '*')
				{
					pi[tr]=i;
					pj[tr++]=j;
				}
			}
		}
		pi[tr]=N-1;
		pj[tr]=N-1;
		//printf("$$ %d\n",tr);
		for(i=0;i<=tr;i++)
		{
			dist[i][i]=10000;
			for(j=i+1;j<=tr;j++)
			{
				//printf("%d %d ",i,j);
				if((d=call_dist(i,j)) < 0)
				{
					printf("-1\n");
					goto next;
				}
				dist[i][j]=dist[j][i]=d;
			}
		}
		memset(dp,0X01,sizeof(dp));
		tr-=1;
		for(i=0;i<tr;i++)
		{
			dp[1<<i][i+1]=dist[0][i+1];
		}
		
		for(i=1;i<(1<<tr);i++)
		{
			for(j=0;j<tr;j++)
			{
				if((1<<j)&i)
				{
					for(k=0;k<tr;k++)
					{
						if(((1<<k) & i) == 0)
						{
							
							dp[((1<<k)|i)][k+1]=min(dp[((1<<k)|i)][k+1],dp[i][j+1]+dist[j+1][k+1]);
							//printf("%d %d %d \n",((1<<k)|i),k+1,dp[((1<<k)|i)][k+1]);
						}
					}
					//printf("\n");
				}
			}
		}
		temp=10000;
		//printf("hello %d ",tr);
		for(i=1;i<=tr;i++)
		{
			//printf("%d %d\n",temp,dp[(1<<tr)-1][i]);
			temp=min(temp,dp[(1<<tr)-1][i]+dist[i][tr+1]);
			
		}
		printf("%d\n",temp);
		next:;
	}
	return 0;
}
