#include<cstdio>
#include<iostream>
#include<stdlib.h>
#include<queue>
using namespace std;

struct node{
	int i;
	int j;
};

queue<node> q;

char t_map[13][14];
int N, graph[15][15], memo[20000][14];

int isValid(int x, int y)
{
	if(x < 0 || y < 0 || x >= N || y >= N || t_map[x][y]=='#')
	return 0;
	
	return 1;
}

void bfs(int sx, int sy, int u)
{
	int dis[N][N];
	for(int i = 0; i < N; i++)
	for(int j = 0; j < N; j++)
	dis[i][j] = 500;

	
	dis[sx][sy] = 0;
	graph[u][u] = 0;
	
	int next_x[4] = {1, -1, 0 , 0};
	int next_y[4] = {0, 0, 1, -1};
	
	struct node *A = new node;
	A -> i = sx;
	A -> j = sy;
	q.push(*A);
	
	
	while(!q.empty())
	{
		*A = q.front();
		int x = A -> i;
		int y = A -> j;
		q.pop();
		
		for(int k = 0; k < 4; k++)
		{
			int X = x + next_x[k];
			int Y = y + next_y[k];
			
			if(isValid(X,Y) && dis[X][Y] > dis[x][y] + 1)
			{
				dis[X][Y] = dis[x][y] + 1;
				A -> i = X;
				A -> j = Y;
				q.push(*A);
				
				if(t_map[X][Y] != '.' && t_map[X][Y] != '#')
				{
					int v = t_map[X][Y] - 48;
					graph[u][v]= dis[X][Y];
				}
			}
		}
	}
}

int find(int prev, int vis, int set, int count)
{
	if(set == count - 1)
	return graph[prev][count];
	
	if(memo[vis][prev] != -1)
	return memo[vis][prev];
	
	int values[count - 1];
	for(int i = 0; i < count - 1; i++)
	values[i] = 500;
	
	for(int i = 1; i < count; i++)
	if(!(vis&(1<<i)))
	values[i - 1] = find(i, vis|(1<<i), set + 1, count) + graph[prev][i];
	
	int min = values[0];
	for(int i = 1; i < count - 1; i++)
	if(values[i] < min)
	min = values[i];
	
	return memo[vis][prev]=min;
	
	
}

int main()
{
	int test;
	cin>>test;
	while(test--)
	{	
		cin>>N;
		for(int i = 0; i < N; i++)
		cin>>t_map[i];
		
		for(int i = 0; i < 15; i++)
		for(int j = 0; j < 15; j++)
		graph[i][j] = 500;
		
		for(int i = 0; i < 20000; i++)
		for(int j = 0; j < 14; j++)
		memo[i][j] = -1;
		
		int count = 0;
		t_map[0][0] = '0';
		for(int i = 0; i < N; i++)
			for(int j = 0; j < N; j++)
				if(t_map[i][j] == '*')
					t_map[i][j] = ++count + 48;
		t_map[N - 1][N - 1] = ++count + 48;
		
		/*for(int i = 0; i < N; i++)
		{
			//for(int j = 0; j <= count; j++)
			cout<<t_map[i]<< endl;
			
			//cout<<'\n';
		}*/
		
		for(int i = 0; i < N; i++)
		for(int j = 0; j < N; j++)
		if(t_map[i][j] != '.' && t_map[i][j] != '#')
		bfs(i, j, t_map[i][j] - 48);
		
		/*for(int i = 0; i <=count; i++)
		{
			for(int j = 0; j <= count; j++)
			cout<<graph[i][j]<< ' ';
			
			cout<<'\n';
		}*/
		
		int values[count - 1];
		for(int i = 0; i < count - 1; i++)
		values[i] = 500;
		
		int vis = 1;
		for(int i = 1; i < count; i++)
		values[i - 1] = find(i, (vis|(1<<i)), 1, count) + graph[0][i];
		
		int min = values[0];
		for(int i = 0; i < count - 1; i++)
		//cout<<values[i]<<' ';
		//cout<<"\n!!!\n";
		if(values[i] < min)
		min = values[i];
		
		if(min > 500)
		min = -1;
		cout<<min<<endl;
	}
}
