#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<queue>
#include<deque>
#include<map>
#include<cstdlib>
#include<cmath>
#include<utility>
#include<cstring>
#include<stack>
#include<set>
#include<limits.h>
using namespace std;

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define PI pair<int,int>
#define SZ(x) x.size()
#define SORT(x) sort(x.begin(),x.end())
#define READ() freopen("input.txt","r",stdin)
#define WRITE() freopen("output.txt","w",stdout)
#define FOR(i,x,y) for(int i=x;i<y;i++)
#define MODM 1000000007
#define lli unsigned long long int
#define toint(s,i) (s[i]-'0')

int main()
{
    int t;
    lli i;
    string s;
    scanf("%d",&t);

    lli fact[19];
    fact[0]=1;
    fact[1]=1;
    for(i=2;i<19;i++)
    {
        fact[i] = fact[i-1]*i;
    }

    while(t--)
    {
        cin>>s;
        lli len = s.length();
        string sbck = s;
        SORT(sbck);
        lli rnk = 0;
        int hsh[10],newhsh[10];
        for(lli j=0;j<len-1;j++)
        {
            memset(hsh,0,sizeof(hsh));
            memset(newhsh,0,sizeof(newhsh));
            for(i=0;i<sbck.length();i++)
                hsh[toint(sbck,i)]++;

            /**for(i=0;i<10;i++)
                printf("%d\t",hsh[i]);
            printf("\n");**/

            for(i=0;i<sbck.length();i++)
            {
                lli x;
                if(!newhsh[toint(sbck,i)])
                {
                    if(sbck[i]!=s[j])
                        x=fact[sbck.length()-1];
                    else    break;

                    for(int k=0;k<10;k++)
                    {
                        if(k==toint(sbck,i))
                            x/=fact[hsh[k]-1];
                        else
                            x/=fact[hsh[k]];
                    }
                    rnk+=x;
                }
                newhsh[toint(sbck,i)] = 1;
            }
            sbck.erase(sbck.begin()+i);

            ///cout<<"rank="<<rnk<<endl;
        }

        cout<<rnk+1<<endl;
    }
    return 0;
}
