//MD SHAKIM-MNNIT ALLAHABAD
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>
#include <map>
#include <string>
#include <climits>
#include <set>
#include <string>
#include <sstream>
#include <ctime>
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
#define iterator IT
#define getcx getchar
#define SIZE(A) ((int)A.size())
#define pb push_back
#define ALL(c) c.begin(), c.end()
#define INF (int(1e9))
#define INFL (LL(1e18))
#define F(i, a, n) for(int i = a; i <= n; i++)
#define R(i, a, n) for(int i = a; i >= n; i--)
#define loop(n) F(i, 0, n-1)
#define loop1(n) F(i, 1, n)
#define TR(c,i) for(VI::iterator i = (c).begin(); i != (c).end(); i++)
#define pii pair< int,int >
#define piii pair< pii , int >
#define temp 0
#define wait 1
#define perm 2
struct comp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.second>b.second;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first<b.first;
  }
} myobject;
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
int main()
{
    string s;

    int t,i,j,pos,f[15]={0};
    LL sum,num,den,ans,fact[20];

    fact[0]=1;
    for(i=1; i<=19; i++)
        fact[i]=fact[i-1]*i;

    in(t);
    while(t--)
    {
        for(i=0; i<=9; i++)
            f[i]=0;
        ans=0;

        cin>>s;
        for(i=0; i<s.size(); i++)
            f[s[i]-48]++;

        //for(i=0; i<=9; i++)
          //  printf("aa %d %d\n",i,f[i]);

        pos=0;
        for(i=0; i<=9; i++)
        {
            if(f[i] && s[pos]-48==i)
            {
                pos++;
                f[i]--;
                i=-1;
            }
            else if(f[i])
            {
                //numbers that can be formed with i as starting digit
                sum=0;
                for(j=0; j<=9; j++)
                {
                    sum=sum+f[j];
                }
                sum--;
                num=fact[sum];

                den=1;
                for(j=0; j<=9; j++)
                {
                    if(j==i)
                        den=den*fact[f[j]-1];
                    else
                        den=den*fact[f[j]];
                }
                //printf("%lld %lld %lld\n",sum,num,den);
                ans=ans+num/den;
            }
        }
        printf("%lld\n",ans+1);
    }
    return 0;
}
