#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<vector>
#include<cmath>
using namespace std;
#define x getchar_unlocked()
#define y putchar_unlocked
//Fast input
inline void read(int & num){
	num=0;
	char ch=x;int sign=1;
	while(ch<'0' || ch>'9'){if(ch=='-') sign=-1; ch=x;}
	while(ch>='0' && ch<='9'){
		num = num*10 + ch-'0';
		ch =x;
	}
	num*=sign;
}

//Fast output
inline void out(int k) {
	int n=k,i=0;
	char ch[15];
	if(n<=0) {
		if(n==0) y('0');		
		else 	y('-');
		n=n*-1;
		}
	while(n>0) {
		ch[i]=(n%10)+'0';
		n=n/10;
		i++;
		}
	while(i>0) {
		y(ch[i-1]);
		i--;
		}
	y('\n');
	}

int main(){
	
	int T,N,M,K,t_max,max_point,count,unp,col;
	read(T);
	while(T--){
		max_point=0;

		read(N),read(M),read(K);
		int vv[1005]={0};
		for(int i=0;i<N;i++) read(vv[i]);
		
		int **p_r = new int*[N];					//To store points recieved for each repainting
		for(int i=0;i<N;i++) p_r[i] = new int[M];
		
		int **p_g = new int*[N];					//To store points deducted for each repainting
		for(int i=0;i<N;i++) p_g[i] = new int[M];
		
		vector<int> best(N);		//To store best offer on each position
		
		//Inputs points
		for(int i=0;i<N;i++)
			for(int j=0;j<M;j++)
				read(p_r[i][j]);
		//Inputs costs
		for(int i=0;i<N;i++)
			for(int j=0;j<M;j++)
				read(p_g[i][j]);
		
		for(int i=0;i<N;i++){
			col = vv[i];
			unp = p_r[i][col-1];
			max_point+=unp;
			t_max = p_r[i][0]-p_g[i][0]-unp;
			for(int j=1;j<M;j++){
				int d = p_r[i][j]-p_g[i][j]-unp;
				if(t_max < d)
					t_max = d;
			}
			//cout<<t_max<<" ";
			best[i] = t_max;
		}
		//cout<<endl;

		sort(best.begin(),best.end());
		/*for(int i=0;i<N;i++)
			cout<<best.at(i)<<" ";
		cout<<endl;*/

		for(int i=N-1;K>0;K--,i--){
			int b = best.at(i);
			if(b <= 0)
				break;
			max_point+=b;
		}
		
		out(max_point);

		for ( int i = 0; i < N; i++ )
		{
			delete [] p_r[i];
			delete [] p_g[i];
		}
		delete[] p_r;
		delete[] p_g;

	}
	return 0;
}
