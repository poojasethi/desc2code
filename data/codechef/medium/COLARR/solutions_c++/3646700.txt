#include <stdio.h>
#include <vector>
using namespace std;

const int ERROR_CODE = 1001;
class Heap
{
private:
	vector<int> heap;
	int size;
	void heapify(int i)
	{
		int l = 2*i+1;
		int r = 2*i+2;
		int max = i;
		if(l<size && heap[max]<heap[l])
		{
			max = l;
		}
		if(r<size && heap[max]<heap[r])
		{
			max = r;
		}
		if(max!=i)
		{
			swap(i,max);
			heapify(max);
		}
	}

	inline int swap(int i,int j)
	{
		int t = heap[i];
		heap[i] = heap[j];
		heap[j] = t;
	}

public:
	Heap(vector<int> heap_):
	heap(heap_),
	size(heap.size())
	{
		buildHeap();
	}
	void buildHeap()
	{
		int i = (size-1)/2;
		while(i>=0)
		{
			heapify(i);
			i--;
		}
	}
	int delMax()
	{
		if(size==0)
			return ERROR_CODE;

		swap(0,size-1);
		int min = heap[size-1];
		heap.pop_back();
		size--;
		heapify(0);
		
		return min;
	}
	int getMax()
	{
		if(size>0)
			return heap[0];
		else
			return ERROR_CODE;
	}
	void printHeap()
	{
		for(int i=0;i<size;i++)
		{
			printf("Heap Item: %d\n",heap[i]);
		}
	}
};

int getMaximalPoints(const int &n,const int &m,const int &k,int *a,int **b,int **c);
vector<int> getMaximums(int** a,const int &n,const int &m,const int &k);

int main()
{
	int t,n,m,k,*a,**b,**c;
	scanf("%d",&t);

	while(t--)
	{
		scanf("%d %d %d",&n,&m,&k);
		a = new int[n];
		b = new int*[n];
		c = new int*[n];
		for(int i=0;i<n;i++)
		{
			scanf("%d",&a[i]);
		}
		for(int i=0;i<n;i++)
		{
			b[i] = new int[m];
			for(int j=0;j<m;j++)
			{
				scanf("%d",&b[i][j]);
			}
		}
		for(int i=0;i<n;i++)
		{
			c[i] = new int[m];
			for(int j=0;j<m;j++)
			{
				scanf("%d",&c[i][j]);
			}
		}
		printf("%d\n",getMaximalPoints(n,m,k,a,b,c));
	}

	delete [] a;
	delete [] b;
	delete [] c;
	return 0;
}

int getMaximalPoints(const int &n,const int &m,const int &k,int *a,int **b,int **c)
{
	int points = 0;
	int** gain = new int*[n];

	for(int i=0;i<n;i++)
	{
		points += b[i][a[i]-1];
		gain[i] = new int[m];
		for(int j=0;j<m;j++)
		{
			gain[i][j] = (b[i][j]-c[i][j]-b[i][a[i]-1]);
		}
	}
	vector<int> max = getMaximums(gain,n,m,k);
	int maxSize = max.size();
	for(int i=0;i<maxSize;i++)
	{
		points += max[i];
	}
	return points;
}

vector<int> getMaximums(int** a,const int &n,const int &m,const int &k)
{
	vector<int> maxCandis;
	vector<int> maximums;
	int max = 0;

	for(int i=0;i<n;i++)
	{
		max = a[i][0];
		for(int j=1;j<m;j++)
		{
			if(a[i][j]>max)
				max = a[i][j];
		}
		maxCandis.push_back(max);
	}

	Heap h = Heap(maxCandis);
	for(int i=0;i<k;i++)
	{
		max = h.delMax();
		if(max>0)
			maximums.push_back(max);
		else
			break;
	}
	return maximums;
}
