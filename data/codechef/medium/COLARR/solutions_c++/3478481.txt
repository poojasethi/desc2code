#include<iostream>
#include<vector>
#include<algorithm>
#include<stdio.h>
#include<limits.h>
#include<functional>
#include<string.h>
using namespace std;
int scr[1001][1001];
int cost[1001][1001];
int arr[1001];
struct node
{
	int scr;
	int cost;
	int val;
	int index;
};
bool func(node a,node b)
{
	if(a.val > b.val)
		return true;
	else
		return false;
}
int main()
{
	int t,n,m,k;
	scanf("%d",&t);
	while(t--) {
		memset(scr,0,sizeof(scr));
		memset(cost,0,sizeof(cost));
		memset(arr,0,sizeof(arr));
		scanf("%d%d%d",&n,&m,&k);
		for(int i=1;i<=n;i++)
			scanf("%d",&arr[i]);

		for(int i=1;i<=n;i++)
			for (int j = 1; j <= m; j++)
				scanf("%d",&scr[i][j]);
		for(int i=1;i<=n;i++)
			for (int j = 1; j <= m; j++)
				scanf("%d",&cost[i][j]);

		int ans;
		int res=0;
		int pos;
		vector<node>alt;
		vector<bool>check(n+1,0);
		for(int i=1;i<=n;i++)
		{
			int maxi=INT_MIN;
			for (int j = 1; j <= m; j++)
			{
				if(arr[i]==j)
					ans = scr[i][j];
				else
					ans = scr[i][j] - cost[i][j];

				if(ans>maxi)
				{
					maxi=ans;
					pos=j;
				}
			}
			if(maxi==scr[i][arr[i]])
			{
				res += maxi;
				check[i]=1;
			}
			else if(maxi>0)
			{
				node n;
				n.scr=scr[i][pos];
				n.cost=cost[i][pos];
				n.val=maxi - scr[i][arr[i]];
				n.index=i;
				alt.push_back(n);
			}
		}
		if(alt.size()<=k) {
			for (int i = 0; i < alt.size(); i++)
			{
				res += alt[i].scr - alt[i].cost;
				check[alt[i].index]=1;
			}
		}
		else {
			sort(alt.begin(),alt.end(),func);
			for (int i = 0; i < k; i++)
			{
				res += alt[i].scr - alt[i].cost;
				check[alt[i].index]=1;
			}
		}

		for(int i=1;i<=n;i++)
		{
			if(!check[i])
				res += scr[i][arr[i]];
		}
		printf("%d\n",res);	
			
	}
	return 0;

}