#include<stdio.h>
#include<assert.h>
#define limit 1001
#define MOD 1000000007
using namespace std;
long long int pow[1001],f,ans;
typedef long long ll;
ll powe(int b,int p)
{
   if(p&1)
   {
          if(p==1)  return b;
          ll c=powe(b,p/2);
          return ( (((c*c)%MOD)*b)%MOD );
   }
   else
   {
       if(p==0)  return 1;
       ll c=powe(b,p/2);
       return ( (c*c)%MOD );
   }            
}
int main()
{
    long long int factorial_of[limit],inverse_modulo_of[limit],inverse_modulo_of_i_factorial[limit],i;

    {               //factorial
        factorial_of[0]=1;
        for(i=1;i<limit;++i)
            factorial_of[i]=(ll)((ll)factorial_of[i-1]*(ll)i)%MOD;
    }
    {               //inverse_modulo
        inverse_modulo_of[1]=1;
        for(i=2;i<limit;++i)
            inverse_modulo_of[i]=(ll)((ll)(MOD - MOD/i)*(ll)inverse_modulo_of[MOD%i])%MOD;
    }
    {               //inverse_modulo_of n!
        inverse_modulo_of_i_factorial[0]=inverse_modulo_of_i_factorial[1]=1;
        for(i=2;i<limit;++i)
            {
                            inverse_modulo_of_i_factorial[i]=(ll)((ll)inverse_modulo_of_i_factorial[i-1]*(ll)inverse_modulo_of[i])%MOD;
                            //printf("%lld\n",inverse_modulo_of_i_factorial[i]);
            }
    }


    int j;
    pow[0]=1;
    pow[1]=2;
    for(j=2;j<1001;j++)
    {
    pow[j]=(2*pow[(j-1)])%MOD;
     }
    int t; 
    scanf("%d",&t);
    while(t--)
    {
              int n,w;
              scanf("%d",&n);
              for(j=0;j<n;j++)
              scanf("%d",&w);
              if(n%2==0)
              {
                        f=(ll) ( ( ((ll)factorial_of[n]*(ll)inverse_modulo_of_i_factorial[n/2])%MOD)*(ll)inverse_modulo_of_i_factorial[n/2])%MOD   ;
                       // printf("%lld %lld f is %lld\n",factorial_of[n],inverse_modulo_of_i_factorial[n/2],f);
                        
                     }
              else
              f=0;
              ans=(pow[n]-f);
              if(ans<0)
              ans=ans+MOD;
              ans=(ans*powe(2,MOD-2))%MOD;
              printf("%lld\n",ans);
              }
    return 0;
}
                                                
