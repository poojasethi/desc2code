#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>
#include <stdlib.h>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}


typedef vector<int> vi;
int n,m,k,conflict[25],maxfar=0;
vector<vi> vec;


void dfs(int i,int mask,int sum)
 {
     if(i == m) return;
     dfs(i+1,mask,sum);
     if(!(mask>>i & 1))
      {
         maxfar = max(maxfar,sum+1);
         dfs(i+1,mask|conflict[i],sum+1);            
      }   
     
 }

int main() {

    
    inp(n);inp(m);
    vec.assign(n+1,vi());
    memset(conflict,0,sizeof conflict);
    FOR(i,0,m-1)
     {
       inp(k);
       FOR(j,1,k)
        {
          int x;       
          inp(x);
          vec[x].push_back(i);         
        }                     
     }
    
    FOR(i,1,n)
     {
        int mask = 0;
        for(int j=0;j<vec[i].size();j++)
          {
            mask |= 1<<vec[i][j];      
          }
        for(int j=0;j<vec[i].size();j++)
          {
            conflict[vec[i][j]] |= mask;      
          }              
     } 
    
    maxfar = 0;
    dfs(0,0,0);
    printf("%d\n",maxfar); 
    //getchar();
    //getchar();
	return 0;
} 
