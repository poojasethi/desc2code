#include <iostream>
using namespace std;
int arr[20][20001],clash[21][21],collide[21];
int recurse(int m,int n,int row)
{
	if(row>=m)
		return 0;
	if(collide[row]==1)
		return recurse(m,n,row+1);
	else
	{
		int case1,case2;
		case1=recurse(m,n,row+1);
		int i,change[m];
		for(i=0;i<m;i++)
			change[i]=0;
		for(i=0;i<m;i++)
		{
			if(clash[row][i]==1)
			{
				if(collide[i]!=1)
				{
					collide[i]=1;
					change[i]=1;
				}
			}
		}
		collide[row]=1;
		case2=1+recurse(m,n,row+1);
		for(i=0;i<m;i++)
		{
			if(change[i]==1)
				collide[i]=0;
		}
		collide[row]=0;
		if(case1>case2)
			return case1;
		else
			return case2;
	}
}
int main()
{
	int m,n;
	cin>>n>>m;
	n++;
	int i,j,k,inpt;
	for(i=0;i<m;i++)
		for(j=0;j<n;j++)
			arr[i][j]=0;
	for(i=0;i<m;i++)
	{
		cin>>k;
		arr[i][0]=k;
		for(j=1;j<=k;j++)
		{
			cin>>inpt;
			arr[i][inpt]=1;
		}
	}
	for(i=0;i<m;i++)
	{
		for(j=0;j<m;j++)
			clash[i][j]=0;
	}
	int l;
	for(i=0;i<m;i++)
	{
		for(j=(i+1);j<m;j++)
		{
			for(l=1;l<=n;l++)
			{
				if(arr[i][l]==1 && arr[j][l]==1)
				{
					clash[i][j]=1;
					clash[j][i]=1;
					break;
				}
			}
		}
	}
	for(i=0;i<21;i++)
		collide[i]=0;
	int offer=recurse(m,n,0);
	cout<<offer<<"\n";
	return 0;
}