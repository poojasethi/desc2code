#include<bits/stdc++.h>

using namespace std;

bool is_disjoint(bool a[],bool b[],int n)
{
    bool res=false;
    for(int i=1;i<=n;i++)
        res=res || (a[i] & b[i]);
    return (!res);
}

bool sett(int j,int i)
{
    int p=(1 << j);
    return p & i;
}



int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    int sub=pow(2,m);
    bool input[m][n+1];
    memset(input,false,sizeof input);
    for(int i=0;i<m;i++)
    {
        int k,temp;
        scanf("%d",&k);
        for(int j=0;j<k;j++)
        {
            scanf("%d",&temp);
            input[i][temp]=true;
        }
    }

    bool is_edge[m][m];
    for(int i=0;i<m;i++)
    {
        for(int j=i;j<m;j++)
        {
            is_edge[i][j]=is_disjoint(input[i],input[j],n);
            is_edge[j][i]=is_edge[i][j];
        }
    }

    vector<int> vect;
    bool res=true;
    int maxi=0;
    for(int i=1;i<sub;i++)
    {
        vect.clear();
        res=true;
        for(int j=0;j<m && res;j++)
        {
            if(sett(j,i))
            {
                for(int k=0;k<vect.size();k++)
                {
                    res=res && is_edge[j][vect[k]];
                    if(!res)
                        break;
                }
                vect.push_back(j);
            }
        }
        if(res)
        {
            if(vect.size()>maxi)
                maxi=vect.size();
        }
    }

    printf("%d",maxi);

    return 0;
}
