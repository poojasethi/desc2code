#include<list>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<cmath>
#include<stack>
#include<bitset>
using namespace std;
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define FORN(i, n) for(i = 0; i < n; i++)
#define RFORN(i, n) for(i = n-1; i >= 0; i--)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define CLR(a) memset(a, 0, sizeof(a))
#define SINT(a) scanf("%d",&a);
#define SLINT(a) scanf("%lld",&a);
#define PINT(a) printf("%d\n",a);
#define PLINT(a) printf("%lld\n",a);
typedef long long int LL;
bitset<20001> mark[21];
int conflict[21][21];
int combine[21];
int main()
{
    int n,m,i,j,k,ans=-1,idx,l;
    SINT(n);
    SINT(m);
    FORN(i,m)
    {
        SINT(idx);
		FORN(j,idx)
		{
			SINT(l);
			mark[i].set(l);
		}
    }
    FORN(i,m)
    {
        FORAB(j,i+1,m)
        {
            if((mark[i]&mark[j])!=0)
            conflict[i][j]=conflict[j][i]=1;
        }
    }
    FORAB(i,1,1<<m)
    {
        j=i;
        l=idx=0;  //idx ->denotes the number of offer
        while(j>0)
        {
          if(j&1)  //Execute only if rightmost bit is set 1
          {
              //Main algo to generate results
              RFORN(k,l)
              {
                  if(conflict[combine[k]][idx])
                  break;
              }
              combine[l++]=idx;
              if(k>=0)
              {
                  l=0;
                  break;
              }
          }
          j=j>>1;  //Shift bit to right one by one
          idx++;   //Increase the value of offer
        }
        ans=MAX(l,ans);
    }
    PINT(ans);
    return 0;
}
