#include <iostream>
#include <vector>
using namespace std;

#define maxn 20001
#define maxm 21
vector<int> ids[maxn];
long long conflict[maxm];
int n, m;

void find_conflict() {
    for(int i=0;i<m;++i) conflict[i] = 0;
    for(int i=1;i<=n;++i) {
        long long mask = 0;
        for(vector<int>::iterator id=ids[i].begin(); id!=ids[i].end(); ++id)
            mask |= 1<<(*id);
        for(vector<int>::iterator id=ids[i].begin(); id!=ids[i].end(); ++id)
            conflict[*id] |= mask;
    }
}

int dfs(int i, int mask, int sum) {
    if ( i==m ) return sum;
    int ret = dfs(i+1, mask, sum);
    if ( !(mask>>i & 1) )
        ret = max(ret, dfs(i+1, mask|conflict[i], sum+1));
    return ret;
}

int main() {
    int ki, ai;
    cin >> n >> m;
    for(int i=0;i<m;++i) {
        cin >> ki;
        for(int j=1;j<=ki;++j) {
            cin >> ai;
            ids[ai].push_back(i);
        }
    }
    find_conflict();
    cout << dfs(0,0,0) << endl;
    return 0;
}
