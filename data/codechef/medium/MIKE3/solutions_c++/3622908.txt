#include<cstdio>
#include<vector>
#include<algorithm>
#include<cstring>
#include<climits>

using namespace std;

#ifdef ONLINE_JUDGE
    #define gc getchar_unlocked
#else
    #define gc getchar
#endif
#define MEM(a,b) memset(a,(b),sizeof(a))
#define s(a) fastRead_INT(a)
#define maxn 20001

typedef long long LL;

inline void fastRead_INT(int &x) {
    register int c = gc();
    x = 0;
    int neg = 0;

    for(; ((c<48 || c>57) && c != '-'); c = gc());

    if(c=='-') {
    	neg = 1;
    	c = gc();
    }

    for(; c>47 && c<58 ; c = gc()) {
    	x = (x<<1) + (x<<3) + c - 48;
    }

    if(neg)
    	x = -x;
}

vector<int> adj[22];
vector<bool> visited(22,false);
vector<int> v,map(22),sets;

int countSetBits(int n)
{
    unsigned int count = 0;
    while (n)
    {
      n &= (n-1) ;
      count++;
    }
    return count;
}

void dfs(int u) {
    visited[u]=true;
    v.push_back(u);
    map[u]=v.size()-1;
    for(int i=0; i<adj[u].size(); i++) {
        int v=adj[u][i];
        if(visited[v]) continue;
        dfs(v);
    }
}

bool check(int mask,int l){
    for(int i=0;i<l;i++) if(mask&1<<i){
        int u=v[i],t;
        for(int j=0;j<adj[u].size();j++){
            t=map[adj[u][j]];
            if(t<l && (mask&1<<t)) return false;
        }
    }
    return true;
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
    #endif
    int n,m;
    scanf("%d%d",&n,&m);//s(n); s(m);

    vector< vector<int> > off(m, vector<int>(maxn,0));
    for(int i=0; i<m; i++) {
        int k;
        scanf("%d",&k);//s(k);
        for(int j=0; j<k; j++) {
            int a;
            scanf("%d",&a);//s(a);
            off[i][a] = 1;
        }
    }

    for(int i=0; i<m-1; i++) {
        for(int j=i+1; j<m; j++) {
            for(int k=1; k<maxn; k++) {
                if(off[i][k] == off[j][k] && off[i][k] == 1) {
                    adj[i+1].push_back(j+1);
                    adj[j+1].push_back(i+1);
                    break;
                }
            }
        }
    }

    LL ans = 0;
    vector<int> g;
    for(int i=1; i<=m; i++) {
        if(!visited[i]) {
            v.clear(), sets.clear();
            dfs(i);

            int c=v.size();
            //printf("v = %d",v.size());
            for(int j=0; j<(1<<c); j++) {
                if(!check(j,c))
                    continue;
                else
                    sets.push_back(j);
            }
            int mx = INT_MIN;
            for(int i=0; i<sets.size(); i++) {
                int t = countSetBits(sets[i]);
                if(t > mx)
                    mx = t;
                //printf("%d ",sets[i]);
            }
            //printf("max %d",mx);
            ans += mx;
        }
    }

    printf("%d\n",ans);
    return 0;
}
