#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;

#define FOR(i,a,n) for (int i = (a); i < (n); ++i)
#define FORE(i,a,n) for (int i = (a); i <= (n); ++i)
#define FORD(i,a,b) for (int i = (a); i >= (b); --i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define LL long long
#define FIR(n) REP(i,n)
#define FJR(n) REP(j,n)
#define ALL(v) v.begin(), v.end()

#define FI FIR(n)
#define FJ FJR(n)
#define FR(i,a) FOR(i,a,n)
#define REPN(i) REP(i,n)

#define GI(n) scanf("%d", &n)
#define GI2(n,m) scanf("%d %d", &n, &m)

int ok[22][22];

VI dem[22];

int f[1 << 20];

int bc(int n) {
	int res = 0;
	while (n) {
		++res;
		n &= n-1;
	}
	return res;
}

int main() {
#ifdef LOCALF
freopen("input.txt", "rt", stdin);
#endif
	
	int N, n;
	GI2(N, n);
	FI {
		int len; GI(len); dem[i].resize(len);
		FJR(len) cin >> dem[i][j];
	}

	FI FOR(j, i+1, n) {
		bool f = true;
		int p1 =0 , p2 =0;
		while (p1 < dem[i].size() && p2 < dem[j].size()) {
			if (dem[i][p1] == dem[j][p2]) {
				f = false; break;
			}

			if (dem[i][p1] < dem[j][p2]) ++p1; else ++p2;
		}

		ok[i][j] = ok[j][i] = f;
	}
	
	f[0] = 1;
	FOR(mask, 1, 1 << n) {
		int first = -1;
		while (! (mask &(1 << first))) ++first;

		if (!f[mask & (mask-1)]) {
			f[mask] = 0; continue;
		}

		f[mask] = true;
		FOR(i, first+1, n) if (mask & (1 << i))
			if (!ok[first][i])
				f[mask] = 0;
	}
	
	int res = 0;
	FOR(mask, 1, 1 << n) if (f[mask])
		res = max(res, bc(mask));

	cout << res << endl;

}
