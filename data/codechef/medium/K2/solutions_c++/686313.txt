#include <iostream>
#include <vector>
 
typedef unsigned long Uint32;
typedef unsigned long long Uint64;
 
const Uint32 MAXVECTORSIZE = 35; //Enough to hold 10^10 in binary
 
std::vector<Uint32> digits;
 
bool IsPalindromeInBase(Uint64 n, Uint32 base)
{
digits.clear();
 
if (n % base == 0) {return false;}
 
while (n>0)
{
digits.push_back( n % base );
n /= base;
}
 
for (int i=0; i < (digits.size() - i - 1); ++i)
{
if (digits[i] != digits[digits.size() - i - 1])
{
return false;
}
}
 
return true;
}
 
Uint64 GetSmallestBase (Uint64 n)
{
Uint32 base;
 
//Edge cases
if (n==1) {return 2;}
if (n==2) {return 3;}
 
for (base = 2; ((Uint64) base) * base < n; ++base)
{
if (IsPalindromeInBase(n,base))
{
return base;
}
}
 
--base;
if ( ((Uint64) base) * (base + 1) >= n)
{
--base;
}
 
 
for (Uint32 a = base; a>= 2; --a)
{
if (n % a == 0)
{
return n/a - 1;
}
}
 
return n - 1;
}
 
int main()
{
int numtests;
 
digits.reserve(MAXVECTORSIZE);
 
std::cin >> numtests;
 
for (int i=0;i<numtests;++i)
{
Uint64 nexttest;
std::cin >> nexttest;
std::cout << GetSmallestBase(nexttest) << '\n';
}
}