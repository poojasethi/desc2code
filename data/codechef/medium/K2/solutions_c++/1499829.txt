#include <iostream>
#include <cstdio>
#include <cmath>
using namespace std;

typedef unsigned long long ull;

int toBase(unsigned b, ull n, unsigned digits[50]) {
    unsigned *p = digits;
    while(n) { *p++ = n%b; n/=b; }
    return p - digits;
}

bool palindrome(unsigned digits[50], int ndigits) {
    int lim = ndigits/2;
    for (int i=0; i<lim; i++) {
        if (digits[i]!=digits[ndigits-i-1])
            return false;
    }
    return true;
}

unsigned solve(ull n) {
    unsigned base;
    unsigned digits[50];
    unsigned lim = (unsigned)sqrt(n);
    for (base=2;base <= lim;++base) {
        int ndigits = toBase(base, n, digits);
        if (ndigits<3) break;
        if (palindrome(digits, ndigits))
            return base;
    }
    for (int a=base-1; a>=1; a--) {
        if (n%a!=0) continue;
        unsigned b = n/a;
        if (b>a+1) return b-1;
    }
    return n+1;
}

int main()
{
    int t;
    ull n;
    scanf("%d", &t);
    while (t--) {
        scanf("%llud", &n);
        unsigned ans = solve(n);
        printf("%u\n", ans);
    }
    return 0;
}
