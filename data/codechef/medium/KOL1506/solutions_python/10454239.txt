/* binomial */
#include<bits/stdc++.h>

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define UB(X,v) upper_bound(X.begin(), X.end(), v)
#define LB(X,v) lower_bound(X.begin(), X.end(), v)

#define RI(a) scanf("%d", &a)
#define RIL(a) scanf("%lld", &a)
#define PI(a) printf("%d\n", a)
#define PIL(a) printf("%lld\n", a)

#define SZ(a) (int)(a.size())
#define CLR(a) a.clear()

#define SET(a,b) memset(a, b, sizeof(a))
#define LET(a,b) __typeof(a.begin()) b;

#define TR(a,it) for(__typeof(a.begin()) it = a.begin(); it != a.end(); it++)

#define REP(i,l,h) for(int i=(l); i <= (h); i++)
#define DEP(i,h,l) for(int i=(h);i >= (l); i--)

#define ALL(a) a.begin(), a.end()

#define TC()  int tc; cin >> tc

#define PRSNT(a, e) (a.find(e) != a.end())

#define MINH priority_queue<int, vector<int>, greater<int> >

#define N 100011

using namespace std;

#define DBG(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1) {
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

typedef long long LL;
typedef pair<int, int> PII;
typedef vector< vector<int> > VVI;
typedef vector< pair<int, int> > VPII;
typedef vector<int> VI;

LL MOD=1000000007;

/* This function calculates (a^b)%MOD */
long long pow(LL a, LL b, LL MOD)
{
        long long x=1,y=a; 
        while(b > 0)
        {
                if(b%2 == 1)
                {
                        x=(x*y);
                        if(x>MOD) x%=MOD;
                }
                y = (y*y);
                if(y>MOD) y%=MOD; 
                b /= 2;
        }
        return x;
}

/*  Modular Multiplicative Inverse
 *      Using Euler's Theorem
 *          a^(phi(m)) = 1 (mod m)
 *              a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(LL n, LL MOD)
{
        return pow(n,MOD-2,MOD);
}
long long C(LL n, LL r, LL MOD)
{
        vector<long long> f(n + 1,1);
        for (int i=2; i<=n;i++)
                f[i]= (f[i-1]*i) % MOD;
        return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}

LL a[N],p[111],c[111],ans,fac[111][111];

int main()
{
    TC();
    REP(i,0,100) REP(j,0,i) fac[i][j]=C(i,j,MOD);
    while(tc--) {
        ans=0;
        LL n,k;
        cin>>n>>k;
        REP(i,1,n) {
            cin>>a[i];
        }
        sort(a+1,a+1+n);
        SET(c,0);
        SET(p,0);
        REP(i,1,n) {
            LL pwr=1;
            REP(aa,0,k) {
                p[aa]=pwr;
                pwr=(pwr*a[i])%MOD;
            }
            REP(aa,0,k) 
                ans=(ans+(((fac[k][aa]*c[aa])%MOD)*p[aa])%MOD)%MOD;
            pwr=1;
            REP(aa,0,k) {
                p[aa]=pwr;
                pwr=(pwr*-a[i])%MOD;
                pwr+=MOD;
            }
            REP(aa,0,k) 
                c[aa]=(c[aa]+p[k-aa])%MOD;
        }
        cout<<(2*ans)%MOD<<endl;
    }
    return 0;
}
