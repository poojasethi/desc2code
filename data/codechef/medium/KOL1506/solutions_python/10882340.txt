#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <stack>

#define MAX 100009
#define MOD (int)(1e9 + 7)
#define INF 987654321
//#define scanf scanf_s
using namespace std;

int N, K;
int arr[MAX];
int c[109][109];
long long p1[MAX][109], p2[MAX][109];

int combination(int n, int r)
{
	r = min(r, n - r);
	return c[n][r];
}

void preCalc()
{
	c[0][0] = 1;
	for (int i = 1; i < 109; ++i)
	{
		c[i][0] = 1;
		for (int j = 1; j <= i / 2; ++j)
		{
			c[i][j] = combination(i - 1, j - 1) + combination(i - 1, j);
			c[i][j] %= MOD;
		}
	}
}

void init()
{
	scanf("%d %d", &N, &K);
	for (int i = 0; i < N; ++i)
		scanf("%d", &arr[i]);
}

void solve()
{
	sort(arr, arr + N);

	for (int i = 0; i < N; ++i)
	{
		p1[i][0] = 1;
		for (int j = 1; j <= K; ++j)
		{
			p1[i][j] = p1[i][j - 1] * arr[i];
			p1[i][j] %= MOD;
		}
	}

	for (int i = 1; i < N; ++i)
	{
		for (int j = 0; j <= K; ++j)
		{
			int sign = (K - j) % 2 ? -1 : 1;
			p2[i][j] = p2[i - 1][j] + sign * p1[i - 1][K - j];
			p2[i][j] %= MOD;
		}
	}

	int ret = 0;
	for (int i = 0; i < N; ++i)
	{
		for (int j = 0; j <= K; ++j)
		{
			long long temp = (combination(K, j) * p1[i][j]) % MOD;
			temp = (temp * p2[i][j]) % MOD;
			ret = (ret + temp) % MOD;
		}
	}
	printf("%d\n", ((2 * ret) % MOD + MOD) % MOD);
}

int main()
{
	int tc = 1;
	scanf("%d", &tc);
	preCalc();

	for (int i = 0; i < tc; ++i)
	{
		init();
		//printf("Case #%d: ", i + 1);
		solve();
	}
	return 0;
}
