#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const LL MOD = 1e9 + 7;
const int MAXN = 1e5 + 10;
LL A[MAXN];
LL power(LL A, LL B){
	LL ans = 1LL;
	while(B > 0){
		if(B&1LL) ans = (ans * A);
		A = (A * A);
		if(ans >= MOD) ans %= MOD;
		if(A >= MOD) A %= MOD;
		B >>= 1;
	}
	return ans;
}
LL p[200];
LL C[200];
LL inv[200];
int main(){
	int t;
	scanf("%d", &t);
	for(int i = 1;i < 200;++i){
		inv[i] = power(i, MOD - 2);
	}
	while(t--){
		int N, K;
		scanf("%d%d", &N, &K);
		for(int i = 1;i <= N;++i){
			scanf("%lld", &A[i]);
		}
		sort(A + 1, A + 1 + N);
		memset(C, 0, sizeof C);
		LL ans = 0;
		for(int i = 1;i <= N;++i){
			//calculate powers
			p[0] = 1;
			for(int j = 1;j <= K;++j){
				p[j] = (p[j - 1] * A[i]) % MOD;
			}

			//calculate answer for i;
			LL ncr = 1;
			for(int r = 0;r <= K;++r){
				ans = (ans + (ncr * ((p[r] * C[r]) % MOD))%MOD);
				while(ans >= MOD) ans -= MOD;
				ncr = (ncr * (K - r)) % MOD;
				ncr = (ncr * inv[r + 1]) % MOD;
			}

			//calculate  C
			for(int r = 0;r <= K;++r){
				if((K - r)&1){
					C[r] = (C[r] + MOD - p[K - r]);
				} else{
					C[r] = (C[r] + p[K - r]);
				}
				while(C[r] >= MOD) C[r] -= MOD;
			}
		}
		ans <<= 1;
		while(ans >= MOD)ans %= MOD;
		printf("%lld\n", ans);
	}
	return 0;
}
/**
1
2 3
7 2
*/