//
//  main.cpp
//  KOL1506
//
//  Created by Bhargav Reddy Godala on 27/05/16.
//  Copyright Â© 2016 Bhargav Reddy Godala. All rights reserved.
//

#include <stdio.h>
#include <algorithm>


#define MOD 1000000007

//int mod_pow(int base, int index, int mod_with);
//int mod_pow_recur(int base, int index, int mod_with);
//void build_pascals_triangle(int A[][101],int stride);

#define ABS(X) (X)>0?(X):-(X)

long long int A[100005];
long long int a[105];
long long int an[105];
long long int c[105];
long long int binom_coeff[105][105];

int main(int argc, const char * argv[]) {
    
    //memset(&binom_coeff[0][0], '\0', sizeof(int)*101*101);
    //build_pascals_triangle(binom_coeff,101);
    int i=0;
    int j=0;
    
    for(i=0;i<105;i++){
        binom_coeff[i][0]=1;
        binom_coeff[i][i]=1;
    }
    for(i=1;i<105;i++){
        for(j=1;j<i;j++){
            binom_coeff[i][j]=(binom_coeff[i-1][j-1]+binom_coeff[i-1][j])%MOD;
        }
    }
    int T;

    scanf("%d",&T);
    while(T--){
        int n,k;
        scanf("%d",&n);
        scanf("%d",&k);
        long long int res=0;
        for(i=0;i<n;i++){
            scanf("%lld",&A[i]);
        }
        for(i=0;i<=k;i++)
            c[i]=0;
        std::sort(A,A+n);
        for(i=0;i<n;i++){
            a[0]=1;
            an[0]=1;
            for(j=1;j<=k;j++){
                a[j]=(a[j-1]*A[i])%MOD;
                //printf("a[j] is %ld\n",a[j]);
                an[j]=(((an[j-1]*(A[i])*(-1))%MOD)+MOD)%MOD;
                //printf("an[j] is %ld\n",an[j]);
            }
            for(j=0;j<=k;j++){
                //printf("bin coff is %ld\n",binom_coeff[k][j]);
                //printf("c[j] is %ld\n",c[j]);
                res+=((binom_coeff[k][j]*c[j])%MOD)*a[j];
                res = res % MOD;
                
                c[j]+=an[k-j];
                c[j]=c[j]%MOD;
            }
        }
        res = (res*2) % MOD;
        printf("%lld\n",res);
    }
    return 0;
}

/*
 int mod_pow(int base, int index, int mod_with){
 if(base == 0)
 return 0;
 if(index == 0)
 return 1;
 long res=1;
 for(int i=0;i<index;i++){
 res = res*base;
 res = res%mod_with;
 if(res<0)
 res+=mod_with;
 }
 return (int)res;
 }
 
 int mod_pow_recur(int base, int index, int mod_with){
 if(base == 0)
 return 0;
 if(index == 0)
 return 1;
 long res=1;
 res = mod_pow_recur(base,index/2,mod_with);
 if(res<0){
 res+=mod_with;
 }
 res = (res*res) % mod_with;
 if(index%2!=0){
 res=res*base;
 if(res<0)
 res+=mod_with;
 }
 res = res%mod_with;
 return (int)res;
 }
 
 void build_pascals_triangle(int A[][101], int stride){
 for(int i=0;i<101;i++){
 A[i][0]=1;
 A[i][i]=1;
 }
 for(int i=1;i<101;i++){
 for(int j=1;j<i;j++){
 A[i][j]=(A[i-1][j-1]+A[i-1][j])%MOD;
 }
 }
 
 
 for(int i=100;i<101;i++){
 for(int j=0;j<=i;j++){
 cout<<A[i][j]<<",";
 }
 cout<<endl;
 }
 
 
 
 }
 */