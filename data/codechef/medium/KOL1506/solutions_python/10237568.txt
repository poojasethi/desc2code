//
//  main.cpp
//  KOL1506
//
//  Created by Bhargav Reddy Godala on 27/05/16.
//  Copyright Â© 2016 Bhargav Reddy Godala. All rights reserved.
//

#include <iostream>
#include <string.h>
#include <cstdlib>
//#include <algorithm>


#define MOD 1000000007

int mod_pow(int base, int index, int mod_with);
int mod_pow_recur(int base, int index, int mod_with);
void build_pascals_triangle(long long  A[][101],int stride);

using namespace std;
#define ABS(X) (X)>0?(X):-(X)

int dec_order(const void * a,const void *b){
    return *(int *)a - *(int *)b;
}

int main(int argc, const char * argv[]) {
    long long binom_coeff[101][101];
    memset(&binom_coeff[0][0], '\0', sizeof(int)*101*101);
    build_pascals_triangle(binom_coeff,101);
    int T;
    long long A[100000];
    long long a[101];
    long long c[101];
    scanf("%d",&T);
    while(T--){
        int n,k;
        cin>>n>>k;
        long long res=0;
        long long power=0;
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        memset(c,'\0',sizeof(long long)*101);
        qsort(A, n, sizeof(long long), dec_order);
        for(int i=0;i<n;i++){
            power=1;
            for(int j=0;j<=k;j++){
                a[j]=power;
                power*=A[i];
                power=power%MOD;
            }
            for(int j=0;j<=k;j++){
                res+=((binom_coeff[k][j]*c[j])%MOD)*(long long)a[j];
                res = res % MOD;
            }
            power=1;
            for(int j=0;j<=k;j++){
                a[j]=power;
                power*=(-A[i]);
                power=power%MOD;
                if(power<0){
                    power+=MOD;
                }
            }
            for(int j=0;j<=k;j++){
                c[j]+=a[k-j];
                c[j]=c[j]%MOD;
            }
        }
        res = (res*2) % MOD;
        cout<<res<<endl;
    }
    return 0;
}


int mod_pow(int base, int index, int mod_with){
    if(base == 0)
        return 0;
    if(index == 0)
        return 1;
    long res=1;
    for(int i=0;i<index;i++){
        res = res*base;
        res = res%mod_with;
        if(res<0)
            res+=mod_with;
    }
    return (int)res;
}

int mod_pow_recur(int base, int index, int mod_with){
    if(base == 0)
        return 0;
    if(index == 0)
        return 1;
    long res=1;
    res = mod_pow_recur(base,index/2,mod_with);
    if(res<0){
        res+=mod_with;
    }
    res = (res*res) % mod_with;
    if(index%2!=0){
        res=res*base;
        if(res<0)
            res+=mod_with;
    }
    res = res%mod_with;
    return (int)res;
}

void build_pascals_triangle(long long A[][101], int stride){
    for(int i=0;i<101;i++){
        A[i][0]=1;
        A[i][i]=1;
    }
    for(int i=1;i<101;i++){
        for(int j=1;j<i;j++){
            A[i][j]=(A[i-1][j-1]+A[i-1][j])%MOD;
        }
    }
    /*
    
     for(int i=100;i<101;i++){
        for(int j=0;j<=i;j++){
            cout<<A[i][j]<<",";
        }
        cout<<endl;
    }
     */
    
    
}
