/**
     Name: Shivam Mishra
     handle: shivam217
**/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

const int INF = INT_MAX;
const int MAX = 1005;
const int MOD = 1e9 + 7;

int A[MAX];
int dp[2][MAX];
int main()
{

int test;
INT(test);

while(test--)
{
    int N,M,starting;
    INT(N); INT(M); INT(starting);
    FOR(i,1,M+1)
        INT(A[i]);

    CLR(dp);

    FOR(i,1,N+1)
    {
        if(i==starting)
            dp[0][i]=1;
        else
            dp[0][i]=0;
    }

    int rowParity = 1;

    FOR(i,1,M+1)
    {
        int x = A[i];
        FOR(j,1,N+1)
        {

                if(j+x>=1 && j+x<=N)
                 {
                     LL temp = (LL)((LL)dp[rowParity][j+x] + (LL)dp[1-rowParity][j]);
                     if(temp>=MOD)
                        temp -= MOD;

                      dp[rowParity][j+x] = temp;
                 }
                if(j-x>=1 && j-x<=N)
                 {
                     LL temp = (LL)((LL)dp[rowParity][j-x] + (LL)dp[1-rowParity][j]);
                     if(temp>=MOD)
                        temp -= MOD;

                      dp[rowParity][j-x] = temp;
                 }

                 dp[1-rowParity][j] = 0;
        }
        rowParity = 1- rowParity;
    }

    rowParity = 1-rowParity;

    FOR(i,1,N+1)
    {
        if(i==N)
            PINT(dp[rowParity][i]);
        else
            printf("%d ",dp[rowParity][i]);
    }


}

return 0;
}
