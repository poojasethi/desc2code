#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcount(x)
#define print(A,j,k) for(int ii=j;ii<=k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int N = 5e5 + 5;
const ll MOD = 1e9 + 7;
const ll INV2 = 500000004;

int n , m , start;
vii V[1004];
int dp[1004][1004];
int A[1004];

ll solve(int dog , int passcount) {
    
    if (passcount >= m)
        return 0;

    int &x = dp[dog][passcount];
    if (x != -1)
        return x;
    x = 0;
    int l = dog - A[passcount];
    if (l >= 1) {

    }
    return x;
}

int main(int argc, char const *argv[])
{
    fast;

    CASES {
        cin >> n >> m >> start;

        rep(i , n)
            V[i + 1].clear();

        rep(i , m) {
            cin >> A[i + 1];
            // V[i + A[i]].pb(i);
            // if (i - A[i] >= 0)
            //     V[i - A[i]].pb(i);
        }

        rep(i , n + 1) {
            rep(j , m + 1) {
                dp[i][j] = 0;
            }
        }

        dp[start][0] = 1;
        for(int pass = 1;pass <= m;pass++) {

            for(int dog = 1;dog <= n;dog++)
                V[dog].clear();
           
            for(int dog = 1;dog <= n;dog++) {
                int l = dog - A[pass];
                if (l >= 1) {
                    V[l].pb(dog);
                }
                int r = dog + A[pass];
                if (r <= n)
                    V[r].pb(dog);
            }

            for(int dog = 1;dog <= n;dog++) {
                for(int j = 0;j < V[dog].size();j++) {
                    dp[dog][pass] += dp[V[dog][j]][pass - 1];
                    if (dp[dog][pass] >= MOD)
                        dp[dog][pass] %= MOD;
                }
            }
        }

        rep(i , n)
            cout << dp[i + 1][m] << ' ';
        cout << '\n';

    }

    return 0;
}