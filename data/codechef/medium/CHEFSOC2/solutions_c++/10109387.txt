// #include<abhi.944>

#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef double ld;

#ifndef ONLINE_JUDGE
	#define TRACE
#endif

const long double PI=3.1415926535897932384626;
const ll MAX=1000000000+7;
const int INF = 0x3f3f3f3f;

#define ps printf(" ")
#define pn printf("\n")
#define sc(n) scanf("%d",&n)
#define pf(n) printf("%d",n)
#define forall(it, x) for(__typeof((x).begin()) it=(x).begin();it!=(x).end();it++)
#define sz size()
#define ff first
#define ss second
#define pb push_back //pop_back
#define mp make_pair
#define fill(a,val) memset(a,val,sizeof(a))
#define pii pair <int ,int>

#ifdef TRACE
    #define trace(x)            cerr<<__FUNCTION__<<":"<<__LINE__<<": ERROR---->"<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
#endif

#define N 1001

int n,m,s;
int dp[N+1][N+1];
int a[N+1];

inline ll add(ll a,ll b,ll mod){ll c=(ll)((ll)(a)+(ll)(b));while(c>=mod){c-=mod;};while(c<0){c+=mod;};return c;}
inline ll sub(ll a,ll b,ll mod){return add(a,mod-b,mod);}
inline ll mul(ll a,ll b,ll mod){ll c=(ll)((ll)(a)*(ll)(b));c%=mod;while(c<0){c+=mod;};return c;}
inline ll mod_pow(ll a,ll n,ll b){ll res=1;while(n){if(n&1) {res=mul(res,a,b);}a=mul(a,a,b);n>>=1;}return add(res,0,b);}
inline ll mod_div(ll a,ll b,ll mod){ll ans=mul(a,mod_pow(b,mod-2,mod),mod);return ans;}

int recur(int pos,int idx) {
    
    if(pos < 0 or pos >= n) return 0;

    if(idx == -1) {
        if(pos!=s) return 0;
        return 1;
    }

    if(dp[pos][idx]!=-1) {
        return dp[pos][idx];
    }

    int res = 0;

    res = add(res,recur(pos+a[idx],idx-1),MAX);
    res = add(res,recur(pos-a[idx],idx-1),MAX);

    return dp[pos][idx] = res;
}

int main(int argc, char const *argv[])
{
    int t;
    sc(t);
    while(t--) {
        sc(n); sc(m); sc(s);
        s--;
        for(int i=0;i<m;i++) {
            sc(a[i]);
        }

        fill(dp,-1);
        for(int i=0;i<n;i++) {
            pf(recur(i,m-1)); ps;
        }
        pn;
    }
    return 0;
}