
#include<iostream>
#include<vector>
#include<ctime>
#include<iomanip>
#include<cstdio>
#include<cstring>
using namespace std;
#define max  2000
double PreProcess(double **dp, int i, int j){
	if(dp[i][j] != -1)
		return dp[i][j];
	else if(!i &&  !j)
		return 1;
	else if( (i==0 && j == 1) ||(i == 1 && j == 0) || (i == 1 && j == 1) )
		return 0.50;
	else if(i == 0 && j >= 2)
		return 0.50 + PreProcess(dp, 0, j-2)/4.0;
	else if(i >= 2 && j == 0)
		return 0.50 + PreProcess(dp, i-2, 0)/4.0;
	else if( i == 1 && j >= 2)
		return PreProcess(dp, 0, j-1)/2.0 + PreProcess(dp, 1, j-2)/4.0;
	else if( i >= 2 && j == 1)
		return PreProcess(dp, i-1, 0)/2.0 + PreProcess(dp, i-2, 1)/4.0;
	//else if(i >= 2 && j >= 2)
	else
		return (PreProcess(dp, i, j-2)+ 2.0*PreProcess(dp, i-1, j-1) + PreProcess(dp, i-2, j))/4.0;

}
int main(){
	//clock_t  start = clock();
	vector<double> Result;
	Result.reserve(500);
	int T;
	double **dp = new double*[max];
	for(int i=0; i<max; ++i)
		dp[i] = new double[max];
	for(int i=0; i<max; ++i)
		for(int j=0; j<max; ++j)
			dp[i][j] = -1;
	for(int i=0; i<max; ++i)
		for(int j=0; j<max; ++j)
			dp[i][j] = PreProcess(dp, i, j);
	//for(int i=0; i<max; ++i){
	//	for(int j=0; j<max; ++j)
	//		cout << dp[i][j] << " ";
	//	cout << endl;
	//}
	//cout << "PreProcessing Done!\n";
	scanf( "%d", &T );
	while(T--){
		int N;
		scanf( "%d", &N );
		double V[N];
		double sum = 0.0;
		for(int i=0; i<N; ++i)
			scanf( "%lf", &V[i] );
		//cin >> V[i];
		for(int i=0; i<N; ++i)
			sum += (dp[i][N-i-1] * V[i]);
		printf("%lf\n", sum);
		//cout << setprecision (7) << sum << endl;
		//Result.push_back(sum);
	}
	//for(vector<double>::iterator it = Result.begin(); it != Result.end(); ++it)
	//	cout << setprecision(7) << *it << endl;
	//cout << double(clock() - start)/(double)CLOCKS_PER_SEC << " seconds\n";
	for(int i=0; i<max; ++i)
		delete[] dp[i];
	delete[] dp;
	return 0;
}