#include <bits/stdc++.h>
#define snd(a) scanf("%d",&(a))
#define snlld(a) scanf("%lld",&(a))
#define rep(i,n) for((i)=0;(i)<(n);(i)+=1)
#define reps(i,s,n) for((i)=(s);(i)<(n);(i)+=1)
#define tr(container,it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pb push_back
#define pf push_front
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define fill(a,v) memset((a),(v),sizeof(a))
#define sz size()
#define mp make_pair
#define mod  1000000007
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
template<class T> inline T poww(T b,T p){ll a=1;while(p){if(p&1){a=(a*b);}p>>=1;b=(b*b);}return a;}
template<class T> inline T poww2(T b,ll p){T a=1;while(p){if(p&1){a=(a*b);}p>>=1;b=(b*b);}return a;}
template<class T> inline T modpoww(T b,T p,T mmod){ll a=1;while(p){if(p&1){a=(a*b)%mmod;}p>>=1;b=(b*b)%mmod;}return a%mmod;}
template<class T>  inline T gcd(T a,T b){ if(b>a)return gcd(b,a);return ((b==0)?a:gcd(b,a%b));}
template<class T> inline void scan(vector<T>& a,int n){T b;int i; rep(i,n){cin>>b;a.pb(b);}}
inline void scand(vector<int>& a,int n){int b;int i; rep(i,n){snd(b);a.pb(b);}}
#define pii pair<int,int>
#define vpii vector<pii >
#define vi vector<int>
#define vvi vector<vi >
#define vl vector<long long>
#define vs vector<string>
#define fr first
#define sd second

int a[2010];
double dp[2010][2010];//probab dp: dp[i][j]: probability of the number of times the jth number will be taken by ist player in case thre are total i numbers= count*(0.5)^((n+1)/2)
double pre_solve(int i,int j){
    int k;
    if(j>=i)return 0;

    if(i==0||j<0){
        return 0;
    }
    double &ans =dp[i][j];
    if(ans>=0)return ans;
    ans=0;
    ans=0.5*(1-pre_solve(i-1,j))/*pick last diamond. so (1-..) is prob that 2nd player doesn't get j th diamond*/+0.5*(1-pre_solve(i-1,j-1))/*pick ist diamond*/;
    /*
    editorial comment by paragme:
     with 0.5 prob you pick the first diamond, and are left with (1 - prob other player gets the j-1'th diamond),
      or with prob 0.5 you pick the last diamond and are left with (1 - prob other player gets the j'th diamond).
    So, you are really left with C[N][j] = 0.5 * (1 - C[N-1][j] + 1 - C[N-1][j-1]).
    */
    return ans;
}
int main(){
    int i,j,k,n,t;
    rep(i,2010)rep(j,2010)dp[i][j]=-1;
    //reps(i,1,2002)rep(j,i)pre_solve(i,j);
   // pre_solve()
    snd(t);
    while(t--){
        snd(n);
        double ans=0;
        rep(i,n){
            snd(k);
            ans=ans+k*pre_solve(n,i);
        }
        printf("%lf\n",ans);


    }

}




















