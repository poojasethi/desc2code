#include <iostream>
#include <vector>
using namespace std;

void cleanTheJobs(int n, int m){

	vector<int> Jobs;
	vector<int> JobsFinished;

	for (int i = 1; i <= n; i++){
		Jobs.push_back(0);
	}

	for (int i = 1; i <= m; i++){		
		int jobsIndex;
		cin >> jobsIndex;
		Jobs[jobsIndex - 1] = 1;
	}

	bool isChefDoTheJob = true;
	vector<int> JobsDoneByChef;
	vector<int> JobsDoneByAsst;
	int chefIndex = 0;

	int assistantIndex = n % 2 == 0 ? (n - m) / 2 : (n - m) / 2 + 1;

	for (int i = 1; i <= n; i++){

		if (Jobs[i - 1] == 1){
			continue;
		}
		else{
			if (isChefDoTheJob == true){
				JobsDoneByChef.push_back(i);
				isChefDoTheJob = false;
			}
			else{
				JobsDoneByAsst.push_back(i);
				isChefDoTheJob = true;
			}
		}
	}

	//Print jobs;
	if (JobsDoneByChef.begin() == JobsDoneByChef.end()){
		cout << "\n";
	}
	else{
		for (std::vector<int>::iterator it = JobsDoneByChef.begin(); it != JobsDoneByChef.end(); ++it)
			std::cout << *it << ' ';
	}

	cout << "\n";
	if (JobsDoneByAsst.begin() == JobsDoneByAsst.end()){
		cout << "\n";
	}
	else{
		for (std::vector<int>::iterator it = JobsDoneByAsst.begin(); it != JobsDoneByAsst.end(); ++it)
			std::cout << *it << ' ';
	}
}
	void cleaningUpBanquet(){
		int n, m;
		cin >> n >> m;
		if (n >= m){
			cleanTheJobs(n, m);
		}
	}


	int main(){
		int T;
		cin >> T;

		for (int i = 1; i <= T; i++){
			cleaningUpBanquet();
		}
		return 0;
	}