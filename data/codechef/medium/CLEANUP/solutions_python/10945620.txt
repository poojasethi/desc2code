class Solution():
    # Using Ditionaries of Arrays
    def __init__(self):
        """

        :rtype: object
        """
        self.maxJobs = {}

        self.chefDict = {}
        self.AsstDict = {}
        self.pendingTasks = {}

    def initjobsindex(self, index, maxTasks, completedTasks):
        self.maxJobs[index] = maxTasks
        self.chefDict[index] = []
        self.AsstDict[index] = []
        self.pendingTasks[index] = [x for x in range(1, maxTasks+1) if x not in completedTasks]


    def allocateJobs(self, index):
        #print chefAssign
        toggle = True

        for mytask in self.pendingTasks[index]:
            toggle = not toggle
            if (toggle == False):
                self.chefDict[index].insert(len(self.chefDict[index]), mytask)
            else:
                self.AsstDict[index].insert(len(self.AsstDict[index]), mytask)

    def Output(self, NoOftestCases):
        for testCase in range(1, NoOftestCases+1):
            if self.chefDict[testCase] != []:
                print " ".join(str(x) for x in self.chefDict[testCase])
            else:
                print ""
            if self.AsstDict[testCase] != []:
                print " ".join(str(x) for x in self.AsstDict[testCase])
            else:
                print ""

#@profile
def test():
    NoOfTestCasesStr = raw_input()
    NoOfTestCases = int(NoOfTestCasesStr)
    mySol = Solution()

    for TC in range(1, int(NoOfTestCases + 1)):
        # For each test-case.. toggle and drive for maxJobs
        stringInput = raw_input()

        totalTasks = int(stringInput.split()[0])
        pendingTasks = int(stringInput.split()[1])

        completedStr = raw_input()

        completeArray = [int(x) for x in completedStr.split()]
        toggleChef = True

        mySol.initjobsindex(TC, totalTasks, completeArray)

        mySol.allocateJobs(TC)
        #print mySol.chefDict
    mySol.Output(NoOfTestCases)

test()
