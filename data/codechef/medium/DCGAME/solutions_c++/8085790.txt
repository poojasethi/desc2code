#include <bits/stdc++.h>

using namespace std;

#define ll long long int
typedef pair<ll,ll> ii;

ll n,m,l[1000010],r[1000010];
ii a[1000010];


int find(int low,int high,ll x)
 {
     while(low<=high)
      {
          int mid = (low + high) / 2;
          
          if(a[mid].first <= x && (mid == n || a[mid+1].first > x))
           return mid;
          
          if(a[mid].first <= x) 
           low = mid + 1;
          
          else
           high = mid -1;
           
      }
 }

int main() {
	// your code goes here
	
	scanf("%lld %lld",&n,&m);
	
	map<char,char> mp;
	mp['D'] = 'C';
	mp['C'] = 'D';
	
	for(int i=1;i<=n;i++)
	 scanf("%lld",&a[i].first);
	 
	stack<int> s;
	
	l[1] = 1;
	
	s.push(1);
	
	for(int i=2;i<=n;i++)
	 {
	     ll x = a[i].first;
	     while(!s.empty() && a[s.top()].first<x)
	      s.pop();
	      
	     l[i] = i - (s.empty()?0:s.top());
	     //cout<<l[i]<<" ";
	     s.push(i);
	     
	 }
	
	r[n] = 1; 
	while(!s.empty())
	  s.pop();
	
	s.push(n);
	
	for(int i=n-1;i>=1;i--)
	 {
	     ll x = a[i].first;
	     while(!s.empty() && a[s.top()].first <= x)
	       s.pop();
	     
	     r[i] = (s.empty()?n+1:s.top()) - i;
	     
	     s.push(i);  
	 }
	 
	for(int i=1;i<=n;i++)
	 a[i].second = (l[i] * r[i]) & 1;
	
	sort(a+1,a+n+1);

	for(int i=2;i<=n;i++)
	 a[i].second = (a[i].second + a[i-1].second ) & 1;
    	
    char sign[10],first[10];
    ll x;
    
    for(int i=1;i<=m;i++)
     {
         scanf("%s %lld %s",sign,&x,first);
         
         ll num;
         
         if(*sign == '<')
          {
              int ind = find(1,n,x-1);
              num = a[ind].second;
              
          }
         else if(*sign == '=')
          {
              int ind = find(1,n,x);
              num = a[ind].second;
              
              ind = find(1,n,x-1);
              num = (num - a[ind].second + 2 ) % 2;
              
          }
          else
          {
              int ind = find(1,n,x);
              num = a[ind].second;
              ll tot = ((n+1)*n)/2;
              num = (tot-num) & 1;
              
          }
          
          if(num & 1) // odd
               printf("%c",*first);
          else
               printf("%c",mp[*first]);
     }
     printf("\n");
    	
	return 0;
}