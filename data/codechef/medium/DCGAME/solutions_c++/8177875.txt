#include <iostream>
#include<stack>

using namespace std;

void merge(long *,long long*,long,long,long);
void merge_sort(long *,long long *,long,long);
long bin_src(long *,long,long,long);

stack <long> stk;
long a[1000002];
long prev[1000002];
long next[1000002];
long long count[1000002];
long l;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    long n,m,i,k,m1,m2,j,res;
    char s,p;
    cin>>n>>m;
    for(i=0;i<n;i++)
        cin>>a[i];
    stk.push(0);
    for(i=1; i<n; ++i)
    {
        while(!stk.empty() && a[i]>a[stk.top()])
        {
            next[stk.top()]=i;
            stk.pop();
        }
        stk.push(i);

    }
    while(!stk.empty())
    {
        next[stk.top()]=-1;
        stk.pop();
    }
    stk.push(n-1);
    for(i=n-1; i>-1; --i)
    {
        while(!stk.empty() && a[i]>=a[stk.top()])
        {
            prev[stk.top()]=i;
            stk.pop();
        }
        stk.push(i);

    }
    while(!stk.empty())
    {
        prev[stk.top()]=-1;
        stk.pop();
    }

    for(i=0; i<n; i++)
    {
        if(prev[i]!=-1)
            m1=i-prev[i];
        else
            m1=i+1;
        if(next[i]!=-1)
            m2=next[i]-i;
        else
            m2=n-i;
        count[i]=(long long)m1*m2;
    }
    merge_sort(a,count,0,n-1);
    j=0;
    for(i=0;i<n;)
    {
        count[j]=count[i];
        a[j]=a[i];
        i++;
        while(a[j]==a[i]&&i<n)
        {
            count[j]+=count[i];
            i++;
        }
        j++;
    }
    for(i=1;i<j;i++)
        count[i]+=count[i-1];
    while(m--)
    {
        res=0;
        cin>>s>>k>>p;
        i=bin_src(a,0,j-1,k);
        if(s=='=')
        {
            if(i!=-1 && a[i]==k)
            {
                if(i==0)
                   res=count[i];
                else
                   res=count[i]-count[i-1];
            }
        }
        else if(s=='>')
        {
            if(i!=-1)
            {
                if(a[i]==k)
                    res=count[j-1]-count[i];
                else if(i!=0)
                    res=count[j-1]-count[i-1];
            }
        }
        else
        {
            if(i==-1)
                res=count[j-1];
            else if(i!=0)
                res=count[i-1];
        }

        if(res%2!=0)
            cout<<p;
        else
        {
            if(p=='C')
                cout<<"D";
            else
                cout<<"C";
        }

    }
    return 0;
}

void merge(long *a,long long *c,long low,long mid,long high)
{
    long i,j,n,k;
    i = low;
    j = mid+1;
    n = high-low+1;
    k = 0;
    long b[n],d[n];
    while(i<=mid && j<=high)
    {
        if(a[i]<a[j])
        {
            b[k]=a[i];
            d[k++]=c[i++];
        }
        else
        {
            b[k]=a[j];
            d[k++]=c[j++];
        }
    }
    while(i<=mid)
    {
        b[k]=a[i];
        d[k++]=c[i++];
    }
    while(j<=high)
    {
        b[k]=a[j];
        d[k++]=c[j++];
    }
    i=low;
    k=0;
    while(i<=high)
    {
        a[i]=b[k];
        c[i++]=d[k++];
    }
}
void merge_sort(long *a,long long*c,long low,long high)
{
    long mid;
    if(low<high)
    {
        mid=(low+high)/2;
        merge_sort(a,c,low,mid);
        merge_sort(a,c,mid+1,high);
        merge(a,c,low,mid,high);
    }
}

long bin_src(long *arr,long low,long high,long k)
{
    long mid;
    while(low<=high)
    {
        mid= (high+low)/2;
        if(a[mid]==k)
            return mid;
        if(a[mid]>k)
        {
            if(a[mid-1]<k&&mid-1>=low)
                return mid;
            else
                high=mid-1;
        }
        else
        {
            if(a[mid+1]>k&&mid+1<=high)
                return mid+1;
            else
                low=mid+1;
        }
    }
    return -1;

}
