#include<bits/stdc++.h>
using namespace std;
struct tree
{
     int l;
     int r;
     int a;
     long long int value;
};
struct t2
{
    int num;
    long long int corr;
};

bool key(const tree &i,const tree &j)
{
    return (i.a < j.a);
}

bool comp(const t2 &i,const t2 &j)
{
    return (i.num < j.num);
}
long long int searchequal(t2 sam[],int low,int high,int k)
{
    long long int  res=0;
    int mid = (low + high)/2;
    if(low <= high){

    if(k == sam[mid].num)
    {
        if(mid == 0)
            res = sam[mid].corr;
        else
        res = sam[mid].corr - sam[mid-1].corr;
        return res;
    }

    else if(sam[mid].num > k)
    res = searchequal(sam,low,mid-1,k);
    else
    res =  searchequal(sam,mid+1,high,k);
    return res;
    }
    else
    return res;
}
long long int searchgreater(t2 sam[],int low,int high,int n,int k)
{
    long long int res=0;
    int mid = (low + high)/2;
    if(low <= high)
    {
    if(sam[mid].num > k && sam[mid-1].num <= k)
    {
        res = sam[n].corr - sam[mid-1].corr;
        return res;
    }
    if(sam[mid].num > k)
        res = searchgreater(sam,low,mid-1,n,k);
    else
        res =  searchgreater(sam,mid+1,high,n,k);
    }
    return res;
}
long long int searchsmaller(t2 sam[],int low,int high,int n,int k)
{
    long long int res=0;
    int mid = (low + high)/2;
    if(low<=high)
    {
    if(sam[mid].num < k && sam[mid+1].num >= k)
        {
            res = sam[mid].corr;
            //cout<<"Here"<<res<<"\n";
        }
    else if(sam[mid].num >= k)
        res =  (searchsmaller(sam,low,mid-1,n,k));
    else
        res =  (searchsmaller(sam,mid+1,high,n,k));
    }
    return res;
}
tree node[1000020];
t2 sam[1000020];
char ans[1000020];
int main()
{
    int pqr = 0;
    int n,m,i,j,k,mini=0,maxi=0;
    deque<int>great;
    deque<int>small;
    deque<int>::iterator itr = great.begin();
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++)
        {
            //node[i].l=node[i].r=node[i].value=0;
            scanf("%d",&node[i].a);
        }
    great.push_front(i-1);
    node[i-1].l=i-1;
    for(i=n-2;i>=0;i--)
    {
        while(!great.empty()&&node[i].a>node[great.front()].a)
            great.pop_front();
            if(great.empty())
                node[i].l = n-1;
            else
                node[i].l = great.front()-1;
        great.push_front(i);
    }
    small.push_front(0);
    node[0].r=0;
    for(i=1;i<n;i++)
    {
        while(!small.empty()&&node[i].a >= node[small.front()].a)
            small.pop_front();
            if(small.empty())
                node[i].r = 0;
            else
                node[i].r = small.front() + 1;
        small.push_front(i);
    }
    /*for(i=0;i<n;i++)
        printf("%d ",node[i].l);
        cout<<endl;
    for(i=0;i<n;i++)
        printf("%d ",node[i].r);
*/
    for(i=0;i<n;i++)
    {
        long long int p;
        node[i].value=abs(i-node[i].l) + abs(node[i].r-i) +1;
        p = (i - node[i].l);
        p = p * (node[i].r-i);
        //if(abs(i-l[i])&&abs(r[i]-i))
        node[i].value = node[i].value + p;
           // node[i].value+=(i-node[i].l)*(node[i].r-i);
    }
    //cout<<endl;
    /*for(i=0;i<n;i++)
        printf("%d %d \n",node[i].value,node[i].l);
        cout<<endl;
       */
        //cout<<"\nBefore Sorting\n";

   /* for(i=0;i<n;i++)
        {
        printf("%d %d %d %d\n",node[i].a,node[i].l,node[i].r,node[i].value);
        }
    cout<<"\nAfter Sorting\n";
    */
    sort(node,node+n,key);
   /* for(i=0;i<n;i++)
        {
        printf("%d %d %d %d \n",node[i].a,node[i].l,node[i].r,node[i].value);
        }
*/
    j=0;
    int v;
    int flag=0;
    for(i=0;i<n;++i)
    {

         v=i+1;
        sam[j].num=node[i].a;
        //sam[j].corr=node[i].value;
        long long int p=node[i].value;
        //cout<<sam[j].corr<<"\n";
        while(v<n&&(node[v].a==node[i].a))
        {
             p += node[v].value;
                v++;

            //cout<<sam[j].corr<<"\n";
        }
        //cout<<"asdjflasdkf"<<p<<"\n";

        sam[j].corr = p ;
        i=v-1;
        j++;
}
    sort(sam,sam+n,comp);
     i = 1;
     for(i=1;i<n;i++)
        sam[i].corr = sam[i].corr + sam[i-1].corr;
//    sort(sam,sam+n,comp);
    /*for(i=0;i<n;i++)
    {
        printf("%d %lld\n",sam[i].num,sam[i].corr);
    }
*/
    for(i=1;i<=m;i++)
    {
        long long int res = 0;
        char ch[3],x[3];
         int k;
        scanf("%s",ch);
        scanf("%d",&k);
        scanf("%s",x);
        //cout<<"entered"<<ch[0]<<"awhat";
       // %d %c",&c,&k,&x);
        if(ch[0] == 61)
        {
            //cout<<"google\n";
            res = searchequal(sam,0,n-1,k);
        }
        //cout<<"closed\n";
        else if(ch[0] == '>')
        {
            if(k >= sam[n-1].num)
                res = 0;
            else if(k < sam[0].num)
                res =sam[n-1].corr;
            else
            res = searchgreater(sam,0,n-1,n-1,k);
        }
        else
        {
            if(k <= sam[0].num)
                res=0;
            else if(k > sam[n-1].num)
                res = sam[n-1].corr;
            else
            res = searchsmaller(sam,0,n-1,n-1,k);
        }
    //    cout<<res<<"\n";
        if(x[0]=='D')
        {
            if(res%2==1)
                ans[pqr++] = 'D';
            else
               ans[pqr++] = 'C';
        }
        else
        {
            if(res%2==1)
                ans[pqr++] = 'C';
            else
                ans[pqr++] = 'D';
        }

       // cout<<endl;
    }
    ans[pqr]='\0';
    printf("%s",ans);
    return 0;
}
