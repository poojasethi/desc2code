#include <bits/stdc++.h>
 
#define llu unsigned long long
 
using namespace std;
 
int A[1000000];
 
vector< pair<int,llu> > count1,count_equal,count_less,count_greater;
 
llu search_equal(int low,int high,int K)
{
	int mid;
	
	while(low<=high)
	{
		mid=(low+high)/2;
		if(count_equal[mid].first==K)
		{
			return count_equal[mid].second;
		}
		else if(count_equal[mid].first<K)
		{
			low=mid+1;
		}
		else
		{
			high=mid-1;
		}
	}
	
	return 0;
}
 
llu search_less(int low,int high,int K)
{
	int mid;
	int found=-1;
	while(low<=high)
	{
		mid=(low+high)/2;
		if(count_less[mid].first<K)
		{
			found=mid;
			low=mid+1;
		}
		else
		{
			high=mid-1;
		}
	}
	
	if(found==-1) return 0;
	else return count_less[found].second+count_equal[found].second;
}
 
llu search_greater(int low,int high,int K)
{
	int mid;
	int found=-1;
	while(low<=high)
	{
		mid=(low+high)/2;
		if(count_greater[mid].first>K)
		{
			found=mid;
			high=mid-1;
		}
		else
		{
			low=mid+1;
		}
	}
	
	if(found==-1) return 0;
	else return count_greater[found].second+count_equal[found].second;
}
 
int main(int argc, char **argv)
{
	int N,M,K,i,j,leftpos,rightpos;
	llu ans,cur,x;
	char op[2],player[2];
	
	scanf("%d%d",&N,&M);
	for(i=0;i<N;i++)
	{
		scanf("%d",&A[i]);
	}
	
	for(i=0;i<N;i++)
	{
		for(j=i-1;j>=0;j--)
		{
			if(A[j]>=A[i]) break;
		}
		leftpos=j+1;
		for(j=i+1;j<N;j++)
		{
			if(A[j]>A[i]) break;
		}
		rightpos=j-1;
		cur=(i-leftpos+1)+(rightpos-i)+((i-leftpos)*(rightpos-i));
		count1.push_back(make_pair(A[i],cur));
	}
	
	sort(count1.begin(),count1.end());
	
	int size=count1.size();
	count_equal.push_back(count1[0]);
	
	for(i=1,j=0;i<size;i++)
	{
		if(count1[i].first==count_equal[j].first)
		{
			count_equal[j].second+=count1[i].second;
		}
		else
		{
			count_equal.push_back(count1[i]);
			j++;
		}
	}
	
	count_less.push_back(count_equal[0]);
	count_less[0].second=0;
	x=count_equal[0].second;
	count_greater.push_back(count_equal[0]);
	size=count_equal.size();
	for(i=1;i<size;i++)
	{
		count_less.push_back(count_equal[i]);
		count_less[i].second=x;
		x+=count_equal[i].second;
		count_greater.push_back(count_equal[i]);
	}
	
	count_greater[size-1].second=0;
	x=count_equal[size-1].second;
	for(i=size-2;i>=0;i--)
	{
		count_greater[i].second=x;
		x+=count_equal[i].second;
	}
	
	while(M--)
	{
		scanf("%s%d%s",op,&K,player);
		ans=0;
		if(op[0]=='<')
		{
			ans=search_less(0,size-1,K);
		}
		else if(op[0]=='=')
		{
			ans=search_equal(0,size-1,K);
		}
		else if(op[0]=='>')
		{
			ans=search_greater(0,size-1,K);
		}
		
		if(ans%2==1)
		{
			printf("%c",player[0]);
		}
		else if(player[0]=='C') printf("D");
		else printf("C");
	}
	
	return 0;
}
 