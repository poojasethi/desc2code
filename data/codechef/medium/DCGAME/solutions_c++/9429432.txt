#include <bits/stdc++.h>
#define maxn 1000000+3
using namespace std;

typedef long long ll;

int A[1000000];
int bf[1000000], nxt[1000000];
int val[2000010], sum[2000010];
int K[1000000];

char X[1000010], C[1000010] ;

int compressCoordinates(int *arr, int n, int *karr, int m,  void *mem) {
   pair<int, int> *p =  (pair<int, int> * )mem;
   for (int i = 0; i < n; i++) {
      p[i].first = arr[i];
      p[i].second = i;
   }
   
   for(int i = 0; i < m; i++) {
      p[i+n].first = karr[i];
      p[i+n].second = i+n;
   }
   
   sort(p, p+n+m);
   int k = 0; 
   
   for (int i = 0; i < n+m; i++) {
      if(i && p[i].first != p[i-1].first) {
         k++;
      }
      
      if(p[i].second < n ) {
         arr[p[i].second] = k;
      } else {
         karr[p[i].second - n] = k;
      }
   }
   
   return k;
}

void computeStockSpan(int n) {
   bf[0] = -1;
	for(int i = 1; i < n; i++) {
	    bf[i] = i-1;
	    while(bf[i] >= 0 && A[i] >= A[bf[i]]) {
	        bf[i] = bf[bf[i]];
	    }
	}
	
	nxt[n-1] = n;
	for(int i = n-2; i >= 0 ; i--) {
	    nxt[i] = i+1;
	    while(nxt[i] < n && A[i] > A[nxt[i]]) {
	        nxt[i] = nxt[nxt[i]];
	    }
	}
	
}

char memarr[37000000]; void *mem = memarr;

int main() {

   int n, m;
	scanf("%d %d ",&n, &m);
	for(int i =0; i<n; i++) {
		scanf("%d", &A[i]);
	}
	
	for(int i = 0; i < m; i++) {
	   scanf(" %s %d %s ", X+i,  K+i, C+i);
	}
	
	computeStockSpan(n);
	
	int compressedIndex = 1 + compressCoordinates(A, n, K, m, mem);
	for(int i = 0; i < n; i++) {
	   val[A[i]] ^=  ((i-bf[i])&1) * ((nxt[i] - i)&1);
	}
	
	for(int i = 0 ; i < compressedIndex; i++) {
	   sum[i+1] = sum[i]^val[i] ;
	}
	
	int ans ;
	for (int i = 0 ;i < m; i++) {
	   if(X[i] == '=' ) {
	      ans = val[K[i]];
	   } else if(X[i] == '>') {
	      ans = sum[compressedIndex]^sum[K[i] + 1];
	   } else if(X[i] == '<') {
	      ans = sum[K[i]];
	   }
	   
	   if(C[i] == 'D') {
	      ans ^= 1;
	   }
	   
	   putchar(ans?'C':'D');
	}
	
	
	return 0;
}