#include<bits/stdc++.h>
 
using namespace std;
 
#define 	SZ(A) 		((int)A.size())
#define 	LEN(A) 		((int)A.length())
#define 	MS(A) 		memset(A, 0, sizeof(A))
#define 	MSV(A,a) 	memset(A, a, sizeof(A))
#define 	mp(x,y)		make_pair((x),(y))
#define 	pb(x) 		push_back(x)
#define		F 			first
#define 	S 			second
#define 	INF 		(ll(1e9))
#define 	INFL 		(ll(1e18))
#define 	EPS 		1e-12
 
#define 	chkbit(s, b) 	(s & (1<<b))
#define 	setbit(s, b) 	(s |= (1<<b))
#define 	clrbit(s, b) 	(s &= ~(1<<b))
 
#define 	swap(x,y)  		{x=x+y-(y=x);}
#define 	FOUND(A, x) 	(A.find(x) != A.end())
 
#define 	s(x) 			scanf("%d",&x);
#define 	s2(x,y) 		scanf("%d%d",&x,&y);
#define 	p(x) 			printf("%d\n",x);
#define 	p1d(a,n)        for(int i = 0; i < n; i++) printf("%d ",a[i]); printf("\n");
 
 
#define 	rep(i, n) 		for(i = 0; i < (n); i++)
#define 	FOR(i, a, n) 	for(i = a; i < n; i++)
#define 	rev(i, a, n) 	for(i = a; i >= n; i--)
#define 	FORALL(itr, c) 	for(itr = (c).begin(); itr != (c).end(); itr++)
#define 	ALL(A) 			A.begin(), A.end()
#define 	LLA(A) 			A.rbegin(), A.rend()
#define 	print(a,n)		REP(int i = 0; i < (n) ; i++)	pl(a[i]);
 
#define 	MOD	        1000000007
 
#define gc getchar//_unlocked
 
#define 	DEBUG 		1
#define 	TRACE 		1
 
#pragma comment(linker, "/STACK:16000000")
 
#ifdef TRACE
    #define trace(x)            cerr<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
    #define trace5(a,b,c,d,e)   cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<" | "#e" = "<<e<<endl;
    #define trace6(a,b,c,d,e,f) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<" | "#e" = "<<e<<" | "#f" = "<<f<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
    #define trace5(a,b,c,d,e)
    #define trace6(a,b,c,d,e,f)
#endif
 
typedef long long ll;
typedef unsigned long long ull;
 
typedef vector<int> VI;
typedef pair<int, int> pii;
typedef vector<long long> VLL;
typedef vector<bool> VB;
 
#define N	1000010
 
ll a[N],next[N],prev[N],copyA[N],A[N],arr[N],pre[N];
 
int binary_search( int st , int en , int val ){
	int mid = (st + en)/2;
	if( A[mid] == val )	return mid;
	if( A[mid] < val )	return binary_search( mid + 1 , en , val );
	return binary_search( st , mid - 1 , val );
}
 
int binary_search_equal_to_k( int st , int en , int val ){
	int mid = st + (en - st)/2;
	if( en < st )	return -1;
	if( A[mid] == val )	return mid;
	if( A[mid] > val ){
		return binary_search_equal_to_k( st , mid - 1 , val );
	}
	else{
		return binary_search_equal_to_k( mid + 1 , en , val );
	}
}
 
int main(){
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
	#endif
	int n,m,i,j,K;
	char type,FirstPlayer;
	scanf("%d%d",&n,&m);
	rep(i,n){
		scanf("%d",&a[i]);
		copyA[i] = a[i];
	}
	
	stack<int>s;
	rep( i,n ){
		if( s.empty() ){
			s.push(i);
		}
		else{
			int cur = a[i];
			int atTop = a[s.top()];
			if( cur > atTop ){
				while( cur > atTop ){
					next[s.top()] = i;
					s.pop();
					if( s.empty() )	break;
					atTop = a[s.top()];
				}
				s.push(i);
			}
			else{
				s.push(i);
			}
		}
	}
	while(!s.empty()){
		int cur = s.top();
		next[cur] = n;
		s.pop();
	}
	
	rep(i,n)	next[i]--;
	
	for(i = n-1 ; i>=0 ; i--){
		if( s.empty() ){
			s.push(i);
		}
		else{
			int cur = a[i];
			int atTop = a[s.top()];
			if( cur >= atTop ){
				while( cur >= atTop ){
					prev[s.top()] = i;
					s.pop();
					if( s.empty() )	break;
					atTop = a[s.top()];
				}
				s.push(i);
			}
			else{
				s.push(i);
			}
		}
	}
	while(!s.empty()){
		int cur = s.top();
		prev[cur] = -1;
		s.pop();
	}
	
	rep(i,n)	prev[i]++;
	
	sort(copyA , copyA + n);
	j = 0;
	A[j++] = copyA[0];
	FOR( i,1,n ){
		if( copyA[i] == copyA[i-1] )	continue;
		A[j++] = copyA[i]; 
	}
	int nn = j;
	rep( i,n ){
		ll c1 = next[i] - i;
		ll c2 = i - prev[i];
		ll countToBeAdded = c1 + c2 + c1 * c2 + 1;
		int searchFor = a[i];
		int pos = binary_search( 0 , nn-1 , searchFor );
		arr[pos] += countToBeAdded;
	}
	/*rep(i,nn)	cout<<arr[i]<<" ";
	cout<<endl;	*/
	pre[0] = arr[0];
	FOR( i,1,nn ){
		pre[i] = pre[i-1] + arr[i];
	}
	string ans = "";
	int idx = 0;
	rep(i,m){
		char ch;
		scanf("%c%c %d %c",&ch,&type,&K,&FirstPlayer);
		ll cnt;
		if( type == '>' ){
			idx = upper_bound(A , A + nn , K) - A;
			if( A[idx] <= K )	cnt = 0;
			else{
				if( idx > 0 ){
					cnt = pre[nn-1] - pre[idx-1];
				}
				else	cnt = pre[nn-1];
			}
		}
		else if( type == '=' ){
			idx = binary_search_equal_to_k( 0 , nn-1 , K );
			if( idx >= 0 ){
				if( A[idx] == K ){
					cnt = arr[idx];
				}
				else{
					cnt = 0;
				}
			}
			else{
				cnt = 0;
			}
		}
		else{
			idx = lower_bound(A , A + nn , K) - A;
			if( A[idx] < K )	cnt = pre[idx];
			else{
				if( idx > 0 ){
					cnt = pre[idx-1];
				}
				else	cnt = 0;
			}
		}
		if( FirstPlayer == 'C' ){
			if( cnt & 1 ){
				ans += 'C';
			}
			else{
				ans += 'D';
			}
		}
		else{
			if( cnt & 1 ){
				ans += 'D';
			}
			else{
				ans += 'C';
			}
		}
	}
	int l = ans.length();
	rep( i,l )	printf("%c",ans[i]);
	printf("\n");
	return 0;
} 