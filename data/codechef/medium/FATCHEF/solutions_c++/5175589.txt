#include <stdio.h>
#include <stdlib.h>
void quicksort(char*,int*,int p,int);
int partition(char*,int*,int,int);

int main()
{
int i,j,M,N;
int T,k;
long long int z;
for(scanf("%d",&T);T>0;T--)
{
z=1;
k=0;
scanf("%d%d",&N,&M);
getchar();
char a[M];
int b[M];

for(i=0;i<M;i++)
{

scanf(" %c %d",&a[i],&b[i]);
getchar();
}

//sorting
int r=0;
int l=M-1;
quicksort(a,b,r,l);

for(i=0;i<M-1;i++)
{
if(a[i]!=a[i+1])
{

k=(b[i+1]-b[i]);
z=(z*k)%1000000009;
}}
printf("%lld\n",z);

}
return 0;
}

void quicksort(char c[],int d[],int p,int r)
{
if(p<r)

{int q=partition(c,d,p,r);
quicksort(c,d,p,q-1);
quicksort(c,d,q+1,r); }
}

int partition(char c[],int d[],int p,int r)
{
int D=d[r];
int i=p-1,j=0;
for(j=p;j<=r-1;j++)
{
if(d[j]<D)
{
i=i+1;
int s=d[i]; char t=c[i];
d[i]=d[j]; c[i]=c[j];
d[j]=s; c[j]=t;
}
}
int s=d[i+1]; char t=c[i+1];
d[i+1]=d[r]; c[i+1]=c[r];
d[r]=s; c[r]=t;
return (i+1);
}
