#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#ifndef ONLINE_JUDGE
#define gc() getchar()
#define pc(x) putchar(x)
#else
#define gc() getchar_unlocked()
#define pc(x) putchar_unlocked(x)
#endif

/*
#ifndef ONLINE_JUDGE
#define pc(x) putchar(x)
#else
#define pc(x) putchar_unlocked(x)
#endif
*/

void fastread_int (int * a)
{
    char c=0;
    *a=0;  //first flush all previous data

    // now we shall eat all spaces before the actual num
    //as it would also count otherwise (remember ' ' has
    // also got an ASCII value, i guess 32
    while(c<33)
    {
        c=gc();
    }

    //now we shall manipulate the number. i hope
    //you know the math
    while(c>33)
    {
        *a=(*a<<3)+(*a<<1)+c-'0'; //why? :D
        c=gc();
    }
}


template <typename DataType>
void fastread_custom ( DataType * a)
{
    char c=0;
    *a=0;

    while(c<33)
    {
        c=gc();
    }
    while(c>33)
    {
        *a=(*a<<3)+(*a<<1)+c-'0';
        c=gc();
    }
}

//char arr[100000];

int main()
{
    int t,n,m,y,p=1000000009,flag=0;
    long long count=1;
    char x;
    fastread_int(&t);
    map<int ,char> mymap;
    map<int ,char>::iterator it,it1;
    while(t--)
    {
        fastread_int(&n);
        fastread_int(&m);
        flag=0;
        count=1;
        mymap.clear();
        if(n==m||m==1)
        {
            while(m--){
            fastread_custom<char>(&x);
            fastread_int(&y);
            }
            printf("1\n");
        }
        else
        {
            while(m--)
            {
                //fastread_custom<char>(&x);
                //cin>>x;
                //fflush(stdin);
                x=gc();
                //cout<<x<<endl;
                fastread_int(&y);
                mymap[y]=x;
            }
            //for(it=mymap.begin(); it!=mymap.end(); it++)
              //  cout<<it->first<<" "<<it->second<<endl;
            //it1=mymap.begin();
            //it1++;
            it=mymap.begin();
            it1=mymap.begin();
            it1++;
            while(it1!=mymap.end())
            {
                if(it->second!=it1->second)
                {
                    count*=(it1->first)-(it->first);
                    count%=p;
                }
                it++;
                it1++;
                //it1=it;
            }
            printf("%lld\n",count);
        }
    }
}
