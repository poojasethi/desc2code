#include <iostream>
using namespace std;

#define MAX_INT   999999
#define MAX_SIZE 251
int nADJMatrix[MAX_SIZE][MAX_SIZE];
int nNoOstreets = 0;

void ResetMatrix(int nSize)
{
	for(int i = 0; i < nSize; i++)
	{
		for(int j = 0; j < nSize; j++)
		{
			nADJMatrix[i][j] = MAX_INT;
		}
	}
}

void FloydWarshell()
{
    for(int k = 0; k < nNoOstreets; k++)
	{
		 for(int  i = 0; i < nNoOstreets; i++)
		 {
			 for(int j = 0; j < nNoOstreets; j++)
			 {
				 if(nADJMatrix[i][k] + nADJMatrix[k][j] < nADJMatrix[i][j])
				 {
					 /*nADJMatrix[j][i] =*/ nADJMatrix[i][j] = nADJMatrix[i][k] + nADJMatrix[k][j];
				 }
			 }
		 }
	}
}

int main()
{
	cin >> nNoOstreets;
	ResetMatrix(nNoOstreets);

	int nDistance = 0;
	for(int i = 0; i < nNoOstreets; i++)
	{
		for(int j = 0; j < nNoOstreets; j++)
		{
			cin >> nDistance;
			nADJMatrix[i][j] = nDistance;
		}
	}
	
	FloydWarshell();

	int nNoOfScenrio = 0;
	cin >> nNoOfScenrio;

	int nRestUrt=0;
	int nGas = 0;
	int nDelStation = 0;
	int TotalDelTime = 0;
	for(int i = 0; i < nNoOfScenrio; i++)
	{
		cin >> nRestUrt >> nGas >> nDelStation;
		TotalDelTime = nADJMatrix[nRestUrt][nGas] + nADJMatrix[nGas][nDelStation];
		cout << TotalDelTime << " ";
		cout << TotalDelTime - nADJMatrix[nRestUrt][nDelStation];
		cout << endl;
	}

	return 0;
}