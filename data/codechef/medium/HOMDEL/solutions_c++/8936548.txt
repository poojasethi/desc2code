/* Author : Anurag El Dorado */

/* Libraries */
#include <bits/stdc++.h>
#include <time.h>
#include <math.h>
using namespace std;

//MACRO DEFINITIONS
/* Data Types */
#define lld long long int
#define llu unsigned long long int

/* Input */
#define sd(var) scanf("%d", &var)
#define slld(var) scanf("%lld", &var)
#define sllu(var) scanf("%llu", &var)

/* Output */
#define print_arr(a, n) cout << #a << " : "; for (int I = 0; I < n; I++) { cout << a[I] << " "; } cout << endl;	//Array till n elements
#define print_v(v) 	cout << #v << " : "; for (long long int I = 0; I != v.size(); I++) { cout << v[I] << " "; } cout << endl;	//Vector
#define p2d(a, r, c) cout << #a << endl; for (int I = 0; I < r; I++) {	for (int J = 0; J < c; J++) {	cout << a[I][J] << " ";	} cout << endl;	} cout << endl;

/* File Input */
#define FILE_INPUT freopen("input.txt", "r", stdin);

/* File Output */
#define FILE_OUTPUT freopen("output.txt", "w", stdout);

//Single Variables
#define pr(x) cout << x << endl;
#define pdln(x) printf("%d\n", x);	//printf with new line
#define pd(x) printf("%d ", x);	//printf without new line

/* Output and Debugging */
#define deb(x) cout << #x << " = " << x << endl;
#define debb(x, y) cout << #x << " = " << x << "\t" << #y << " = " << y << endl;
#define debbb(x, y, z) cout << #x << " = " << x << "\t" << #y << " = " << y << "\t" << #z << " = " << z << endl;

/* MOD  value*/
#define MOD 1000000007

/* Timing */
#define TIMEIT cout << "TIME VARIABLE REINITIALISED\n"; clock_t start_time_ = clock();
#define TIMEUP cout << "Time: " << (clock() - start_time_) / (double)(CLOCKS_PER_SEC) << "s" << endl;

#define INF 9999999

int n;
int graph[300][300];
bool vis[300];
int dist[300];

int dijkstra(int s, int d) {
	
	memset(vis, false, sizeof vis);
	for (int i = 0; i < n; i++) {
		dist[i] = 9999999;
	}
	
	dist[s] = 0;
	
	for (int i = 0; i < n; i++) {
		int min = INT_MAX, min_index;
 
 		int v;
		for (v = 0; v < n; v++) {
			if (!vis[v] && dist[v] <= min) {
	        	min = dist[v];
				min_index = v;
	   		}
		}
		
		v = min_index;
		vis[v] = true;
		
		int u;
		for (u = 0; u < n; u++) {
			if (!vis[u] && graph[v][u] && dist[v] + graph[v][u] < dist[u]) {
				dist[u] = dist[v] + graph[v][u];
			}
		}
//		
//		print_arr(vis, n);
//		print_arr(dist, n);
	}
	
//	print_arr(dist, n);
	
	return dist[d];
}

int main() {

	int i, j, k;
	int count, sum;
	int m, p, t, s, g, d;
	vector<int> v;
	int maxi, mini;
	int tc;
	string r;
	int lens, lenr;
	
//	lld i, j, k;
//	lld count, sum;
//	lld n, m, p, t;
//	vector<lld> v;
//	lld maxi, mini;
//	lld tc;
//	string s, r;
//	lld lens, lenr;

//	FILE_INPUT;
	
	cin >> n;
	
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			cin >> graph[i][j];
		}
	}
	
	int fw[300][300];
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			fw[i][j] = graph[i][j];
		}
	}	
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			for (k = 0; k < n; k++) {
				fw[j][k] = min(fw[j][k], fw[j][i] + fw[i][k]);
			}
		}
	}
	
	cin >> m;
	
	while (m--) {
		cin >> s >> g >> d;
//		
//		int dsg = dijkstra(s, g);
//		int dgd = dijkstra(g, d);
//		int dsd = dijkstra(s, d);
		
		cout << (fw[s][g] + fw[g][d]) << " " << (fw[s][g] + fw[g][d] - fw[s][d]) << endl;
		
	}
	

	return 0;
}
