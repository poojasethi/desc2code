#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll a[100005],n,k;
bool isint(float d)
{
	ll i=d;
	return (d==i);
}
ll k_count(ll e ,ll d)
{
	ll c=0,i;
	for(i=0;i<n;++i)
	{
		if(e!=a[i])
		c++;
		
		e+=d;
	}
	/*
	ll c=i,d=(a[j]-a[i])/(j-i);
	ll a0=a[i] -i*d;
	for(j=i+1;j<n;++j)
	{
		x=a0 + i*d;
		if(x!=a[j])
		c++;
		if(c>k)
		return c;
	}*/
	return c;
}
int find_d()
{
	std::map<int,int> mymap;
	int d,c,i;
	std::map<int,int>::iterator it;
	for(i=1;i<n;++i)
	{
		d=a[i]-a[i-1];
		it=mymap.find(d);  // finding if that diff is already inserted or not
		if(it!=mymap.end())
		{
			c= it->second;
			c++;
			mymap.erase(it); // if present delete that and insert again with count increased by 1
		}
		else
		c=1;  // if not present then insert it with count =1;
		
		 mymap.insert ( std::pair<int,int>(d,c) );
	}
	
	it=mymap.begin();
	map<int,int>::iterator lst=mymap.end();
	c=INT_MIN;
	d=0;
	for( ; it!=lst ;++it)
	{
		if(it->second > c)
		{
			c=it->second;
			d=it->first;
		}
	}
	
return d;	
}
void large()
{
	int d=find_d();
	//cout<<d;
	int i,j,a0,c,x,min_a=INT_MAX,p=-1;
	bool visited[100005]={0};
	for(i=0;i<n-1;++i)
	{
		if(visited[i])
		continue;
		
		a0=a[i]-i*d;
		if(a0<min_a || p==-1)
		{
			c=i;          // as all the elemnts before it are an error as otherwise it must have been marked visited
			              // so we are starting from j=i+1;
			x=a[i]+d;
			for(j=i+1;j<n;++j)
			{
				if(c>k)
				break;
				
				if(x==a[j])          // OR HERE WE CAN KEEP A COUNT OF ALL THE
				visited[j]=true;
				else
				c++; // as it is an error
				
				x=x+d;
			}
			
			if(c<=k)
			min_a=a0;
		}
	}
	//cout<<"\n "<<min_a<<"\n";
	for(i=0;i<n;++i)
	{
		cout<<min_a<<" ";
		min_a=min_a + d;
	}
	
}
 
int main()
{
	std::ios_base::sync_with_stdio(0);
	float d,a0;
	ll i,j,c,min_d=INT_MAX,min_a=INT_MAX,pos=-1;
	cin>>n>>k;
	for(i=0;i<n;++i)
	cin>>a[i];
	
	
	if(n>45)
	{
		large();
		return 0;
	}
	
	for(i=0;i<n-1;++i)
	{
		for(j=i+1;j<n;++j)
		{
			d=(a[j]-a[i])/((double)(j-i));
			if(!isint(d))
			continue;
			
			a0=a[i]-i*d;
			
			if( (a0<min_a) || ( (a0==min_a)&&(d<min_d) ) || (pos==-1) )
			{
				c=k_count(a0,d);
				//cout<<"\n might chamging value to "<<a0<<" "<<d<<" "<<i<<" "<<j<<" and k is "<<c;
				if(c<=k)
				{
				//	cout<<"\n chamging value to ";
					min_a=a0;
					min_d=d;
					pos=i;
				}
			}
		}
	}
	//cout<<"\n"<<min_d<<"\n";
	//cout<<"\n the array is\n";
	a[0]=min_a;
	cout<<a[0]<<" ";
	for(i=1;i<n;++i)
	{
		a[i]=a[i-1]+min_d;
		cout<<a[i]<<" ";
	}
	
	
}