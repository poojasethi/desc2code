#include <bits/stdc++.h>

using namespace std;

# define g getchar
# define o(x) printf("%d ",x) 


int inline scan()
	{
	int N = 0;
	char C;
	C=g();
	while (C < '0' || C>'9') C=g();
	while (C >= '0' && C <= '9')
	{
		N = (N<<3) + (N<<1) + C - '0';
		C=g();
	}
	return N;
}




int seq(int*A,int size,int a0, int d){
int temp,c;
temp=0;
c=0;
while(c!=size){
if(A[c]==a0+c*d){
temp++;
}
c++;
}
return temp;
}
int seq1(int*A,int size,int a0, int d){
int temp,c;
temp=0;
c=0;
while(c!=size&&temp!=15&&c-temp!=15){
if(A[c]==a0+c*d){
temp++;
}
c++;
}
return (c-temp==15)? 0:temp;
}
struct ap{
int a0;
int d;
};
bool better(ap ap1,ap ap2){
int a0=ap1.a0;
int d=ap1.d;
int i_a0=ap2.a0;
int i_d=ap2.d;
if(a0<i_a0){return 1;}
return (d<i_d);
}
int main(){
int size,alter,prim,sec,llimit,seqsize;
int i,j;
ap ans;
srand (time(NULL));
seqsize=0;
int A[100000];
vector<ap> B;
//input
int temp;
size=scan();
alter=scan();
int k=0;
while(k!=size){
A[k]=scan();
k++;
}
llimit=size-alter;
if(size>40){
while(seqsize==0){
prim=rand()%size;
sec=rand()%size;
seqsize=seq1(A,size,A[prim]-prim*((A[prim]-A[sec])/(prim-sec)),(A[prim]-A[sec])/(prim-sec));
}
ans.a0=A[prim]-prim*((A[prim]-A[sec])/(prim-sec));
ans.d=(A[prim]-A[sec])/(prim-sec);
}
else{
i=0;
j=1;
while(i!=size-1){
while(j!=size){
seqsize=seq(A,size,A[i]-i*((A[i]-A[j])/(i-j)),(A[i]-A[j])/(i-j));
if (seqsize>=llimit){
ap temp;
temp.a0=A[i]-i*((A[i]-A[j])/(i-j));
temp.d=(A[i]-A[j])/(i-j);
B.push_back(temp);
}
j++;
}
i++;
j=i+1;
}
i=0;
ans=B[0];
while(i!=B.size()){
if(better(B[i],ans)){
ans=B[i];
}
i++;
}
}
//ans is the answere
k=0;
int z=ans.a0;
int x=ans.d;
while(k!=size){
o(z+x*k);
k++;
}
return 0;
} 