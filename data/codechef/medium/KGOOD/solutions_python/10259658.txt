#top down dp
# def function(b,i,j,matrix):
# 	if i>=j:
# 		return 0
# 	if b[j]-b[i]<=k:
# 		return 0
# 	if matrix[i][j]!=-1:
# 		return matrix[i][j]
# 	#matrix[i][j]=min(b[i]+matrix[i+1][j],matrix[i][j-1]+b[j]-b[i]-k)
# 	m1=b[i]+function(b,i+1,j,matrix)
# 	m2=b[j]-b[i]-k+function(b,i,j-1,matrix)
# 	matrix[i][j]=min(m1,m2)
# 	return matrix[i][j]

#bottom up dp
def function(b,n):
	matrix=[[0 for x in xrange(n)]for x in xrange(n)]
	for i in xrange(n-1,-1,-1):
		for j in xrange(0,n):
			if i>=j:
				matrix[i][j]=0
			elif b[j]-b[i]<=k:
				matrix[i][j]=0
			else:
				matrix[i][j]=min(b[i]+matrix[i+1][j],matrix[i][j-1]+b[j]-b[i]-k)
	return matrix[0][n-1]				

def get_k_good(word,k):
	a={}
	for i in word:
		if i in a:
			a[i]+=1
		else:
			a[i]=1
	b=sorted([a[i]for i in a])
	n=len(b)
	#matrix=[[-1 for i in xrange(n)] for i in xrange(n)]
	#return function(b,0,n-1,matrix)
	return function(b,n)

t=input()
while(t>0):
	word,k=raw_input().strip().split()
	k=int(k)
	print get_k_good(word,k)
	t-=1
