#include <iostream>
#include <algorithm>
#include <cstdio>
#include <string>
#include <cstring>

using namespace std;

int main() {
  int t;
  int count[27];
  int top[100005], bottom[100005];
  string w;
  int k, len;
  int kgood, mincount, maxcount;

  scanf("%d", &t);

  while(t--) {
    // reinit count
    memset(count, 0, 27 * sizeof(int));
    memset(top, 0, 100005 * sizeof(int));
    memset(bottom, 0, 100005 * sizeof(int));

    cin >> w >> k;

    len = w.size();

    for (int i = 0; i < len; ++i)
    {
      count[w[i] - 97]++;
    }

    sort(count, count + 26);

    /*
    //** replace with fake data for testing
    count[25] = 9;
    count[24] = 9;
    count[23] = 7;
    count[22] = 6;
    count[21] = 5;
    count[20] = 5;
    count[19] = 2;
    count[18] = 2;
    count[17] = 2;
    count[16] = 1;
    count[15] = 1;
    
    for (int i = 0; i < 15; ++i)
    {
      count[i] = 0;
    }

    count[26] = 0;
    //** end of replace with fake data
    */

    // mincount = count[0];
    maxcount = count[25];

    int startidx = 0;

    for (int i = 0; i < 26; ++i)
    {
      if(count[i] != 0) {
        startidx = i;
        mincount = count[i];
        break;
      }
    }

    kgood = maxcount - mincount;

    if(k >= kgood) {
      printf("0\n");
      continue;
    }

    int prev = count[startidx];
    int curcount = 0;
    int index = kgood - 1;

    /*
    cout << "count[] array: "<< endl;
    for (int i = 0; i < 27; ++i)
    {
      cout << count[i] << endl;
    }
    */

    // cout << "kgood: " << kgood << endl;

    // top
    for (int i = startidx; i < 27; ++i)
    {
      if(count[i] == 0) {
        break;
      }

      if(count[i] != prev) {
        top[index] = top[index + 1] + curcount * prev;
        curcount = 1;
        
        index--;
      } else {
        curcount++;
      }

      if(count[i] - prev > 1) {
        for (int j = 0; j < count[i] - prev - 1 ; ++j)
        {
          top[index - j] = top[index + 1];
        }

        index = index - (count[i] - prev - 1);
      }

      prev = count[i];
    }

    prev = count[25];
    curcount = 0;
    index = kgood - 1;

    //bottom
    for (int i = 25; i >= startidx; --i)
    {
      if(count[i] != prev) {

        for (int j = 0; j < prev - count[i] ; ++j)
        {
          bottom[index - j] = bottom[index - j + 1] + curcount;
        }
                
        index = index - (prev - count[i]);
      }

      curcount++;

      prev = count[i];
    }

    /*
    for (int i = 10; i >= 0; --i)
    {
      cout << top[i] << " | " << i << endl;
    }

    for (int i = 10; i >= 0; --i)
    {
      cout << bottom[i] << " | " << i << endl;
    }
    */
    

    int toremove = kgood - k;
    int minremove = 100005;
    int fromtop, frombottom;

    for (int i = toremove - 1; i >= -1; --i)
    {
      fromtop = top[kgood - 1 - i];
      frombottom = bottom[kgood - toremove + i + 1];

      if(frombottom + fromtop < minremove) {
        minremove = frombottom + fromtop;
      }
    }

    printf("%d\n", minremove);
  }
	return 0;
}