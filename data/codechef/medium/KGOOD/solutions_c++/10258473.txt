#include <iostream> 
#include <stdio.h>
#include <string>
#include <vector>
#include <ctype.h>
#include <algorithm>
using namespace std; 
 
int minRemovals(int freq[],int start,int end);

int** memo;
int* ff;
int k;
int main() {
	int t;
	cin >> t;
	while(t){
		char* input = new char[100000];
		
		scanf("%s",input);
		scanf("%d",&k);
		string word(input);

		int occur[26];
		for(int i=0;i<26;i++){
			occur[i] = 0;
		}
		for(int i=0;i<word.length();i++){
			occur[word[i] - 'a']++;
		}
		vector<int> occur2;
		for(int i=0;i<26;i++){
			if(occur[i] != 0){
				occur2.push_back(occur[i]);
			}
		}
		sort (occur2.begin(), occur2.end());
		int n = occur2.size();
		int freq[n];
		copy(occur2.begin(), occur2.end(), freq);
		
		ff = new int[n];
		int i = 0;
		int num = freq[i];
		int count = 0;
		while(i < n){
			count = 0;
			num = freq[i];
			while(freq[i+count] == num){
				count++;
			}
			for(int j=i;j<(i+count);j++){
				ff[j] = count;
			}
			i = i + count;	
		}
		
		memo = new int*[n];
		for(int i = 0; i < n; ++i)
		    memo[i] = new int[n];

		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				memo[i][j] = -1;
			}
		}	
		cout << minRemovals(freq,0,n-1) << "\n";
		occur2.clear();
		t--;
	}
}
int minRemovals(int freq[],int start,int end){
	if(start >= end){
		memo[start][end] = 0;
		return 0;
	}
	else if(memo[start][end] != -1){
		return memo[start][end];
	}
	else{
		if(freq[end] - freq[start] <= k){
			memo[start][end] = 0;
			return 0;
		}
		else{
			int a = minRemovals(freq,start+ff[start],end) + (ff[start]*freq[start]);
			int b = minRemovals(freq,start,end-ff[end]) + (ff[end]*(freq[end] - freq[start] - k));
			memo[start][end] = min(a,b);
			return memo[start][end];
		}
	}

}