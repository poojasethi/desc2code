#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<cstring>
#include<string>
#include<cstdlib>
#include<math.h>
#include<cctype>
#include<iomanip>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<cassert>
#include<sstream>
using namespace std;
#define L long
#define LL long long
#define ULL unsigned long long
//#define D double
#define LD long double
#define G getchar
#define MOD 1000000007
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ULL unsigned long long
#define pll pair <L,L>
#define INF ((1<<30)+(1<<29))
LL gcd(LL a,LL b){return (b)?gcd(b,a%b):a;}
LL lcm(LL a,LL b){return a*b/gcd(a,b);}
LL modpow(LL n ,LL k,LL mod)
{LL ans=1;while(k>0){if(k&1)ans=(ans*n)%mod;k>>=1;n=(n*n)%mod;}return ans%mod;}
LL max(LL a,LL b){return (a>b)?a:b;}
LL min(LL a,LL b){return (a<b)?a:b;}
LL ab(LL a){return (a>0)?a:-a;}
LL poww(LL n,LL k){LL ans=1;while(k>0){if(k&1)ans*=n;k>>=1;n*=n;}return ans;}
L max(L a,L b){return (a>b)?a:b;}
L min(L a,L b){return (a<b)?a:b;}
L ab(L a){return (a>0)?a:-a;}


LL x1,x2,x3,Y1,Y2,Y3;

double d(LL x,LL y)
{return sqrt(x*x+y*y);}
double area()
{
    double S=d(x1-x2,Y1-Y2)+d(x2-x3,Y2-Y3)+d(x3-x1,Y3-Y1);
    S/=2.0;
    return sqrt(S*(S-d(x1-x2,Y1-Y2))*(S-d(x2-x3,Y2-Y3))*(S-d(x3-x1,Y3-Y1)));
}



int main()
{
    ios::sync_with_stdio(false);
    vector< pair<double,long long> >A;
    long long n,i,a1=-1,a2=-1;
    double ma=0.0,mi=10000000.0;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>x1>>Y1>>x2>>Y2>>x3>>Y3;
        A.pb(mp(area(),i+1));
        if(A[i].f>=ma)ma=A[i].f,a1=i+1;
        if(A[i].f<=mi)mi=A[i].f,a2=i+1;
    }
    //sort(A.begin(),A.end());
    
    //cout<<A[0].s<<" "<<A[n-1].s<<endl<<A[0].f<<" "<<A[n-1].f<<endl;
    cout<<a2<<" "<<a1<<endl;
    return 0;
}
