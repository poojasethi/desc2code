#!/usr/bin/python
# coding=utf8
import sys
import math
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd, Fraction
import string
import random


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret


def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args) if f1 is not None else None
    t2 = time()
    r2 = f2(*args) if f2 is not None else None
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg():
    return 0


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    smallest_idx, smallest_size = -1, 0
    largest_idx, largest_size = -1, 0
    for icase in xrange(nb):
        Ax, Ay, Bx, By, Cx, Cy = map(int, data.readline().split())  # int
        area = abs(Ax*(By-Cy)+Bx*(Cy-Ay)+Cx*(Ay-By))
        if icase == 0:
            smallest_size = largest_size = area
            smallest_idx = largest_idx = 0
        else:
            if area <= smallest_size:
                smallest_size = area
                smallest_idx = icase
            if area >= largest_size:
                largest_size = area
                largest_idx = icase
    print smallest_idx + 1, largest_idx + 1

        #L = map(float, data.readline().split())  # float
        #L = data.readline().split()  # string
        #s = data.readline().strip()
        #i = int(data.readline().strip())


if __name__ == "__main__":
    main()
