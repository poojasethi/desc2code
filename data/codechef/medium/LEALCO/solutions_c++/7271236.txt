// Headers
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cassert>
#include<cstdlib>
#include<vector>
#include<map>
#include<fstream>
#include<list>
#include<stack>
#include<queue>
#include<algorithm>
#include<bitset>
#include<set>
using namespace std;
// Global declarations
typedef long long int ll;
typedef vector<int> vi;
typedef vector<char> vc;
typedef pair<int, int> pi;
const int mod = 1e9 + 7;
const int INF = 1 << 25;
// Macros
#define mp make_pair
#define el putchar('\n')
#define sp putchar(' ')
#define Fill(a,val) memset(a,val,sizeof a)
#define ff first
#define ss second
#define pb push_back
#define ppb pop_back
#define gcd __gcd
#define all(a) a.begin(),a.end()

bool valid(vi v, int k, int m){
	int n = v.size();
	int mx = 0, cnt = 0;
	for (int i = 0; i<k; ++i){
		mx = max(v[i], mx);
	}
	for (int i = 0; i<k; ++i){
		cnt += v[i] == mx;
	}
	if (cnt >= m)
		return false;
	int prevcnt = cnt;
	int curcnt = prevcnt;
	for (int i = k; i<n; ++i){
		curcnt -= v[i - k] == mx;
		if (curcnt){
			if (v[i] > mx){
				mx = v[i];
				curcnt = 1;
			}
			else{
				curcnt += v[i] == mx;
			}
		}
		else{
			mx = 0;
			curcnt = 0;
			for (int j = i - k + 1; j <= i; ++j){
				mx = max(mx, v[j]);
			}
			for (int j = i - k + 1; j <= i; ++j){
				curcnt += v[j] == mx;
			}
		}
		if (curcnt >= m)
			return false;
	}
	return true;
}

int main(){
	int t;
	cin>>t;
	while (t--){
		int n, k, m;
		cin>>n>>k>>m;
		vi r(n), R(n);
		for (int i = 0; i<n; ++i)
			cin>>r[i];
		int answer = INF;
		int nn = 1 << n;
		for (int i = 0; i<nn; ++i){
			R = r;
			int cnt = 0;
			for (int j = 0; j<n; ++j){
				if ((1 << j)&i){
					++R[j]; ++cnt;
				}
			}
			if (valid(R, k, m)) {
				answer = min(answer, cnt);
			}
		}
		printf("%d\n", (answer == INF ? -1 : answer));
	}
	return 0;
}
