
#include <iostream>
#include <vector>
using namespace std;

// check that array is bad (see editorial)
bool isBad(vector<int> R, int K, int M) {
	// the size of the array
	int N = R.size();
	// loop over required values of i
	for (int i = 0; i <= N - K; ++i) {

		// finding maximum, since R[i] >= 1 we could init it by 0
		int maxR = 0;
		for (int j = i; j < K + i; ++j) {
			maxR = max(maxR, R[j]);
		}

		// count the number of elements equal to maximum
		int count = 0;
		for (int j = i; j < K + i; ++j) {
			if(R[j] == maxR) {
				++count;
			}
		}

		// if we found at least M such elements, the array is bad
		// and we could not check other values of i
		if (count >= M) {
			return true;
		}
	}
	return false;
}

// count the number of ones in binary form of x
int popcount(int x) {
	int res = 0;
	while (x > 0) {
		x -= x & -x;
		++res;
	}
	return res;
}

int main() {
	// input number of tests
	int T;
	cin >> T;

	// loop over tests
	for (int t = 0; t < T; ++t) {

		// input numbers N, K, M
		int N, K, M;
		cin >> N >> K >> M;

		// creating and input array R[]
		vector<int> R(N);
		for (int i = 0; i < N; ++i) {
			cin >> R[i];
		}

		// we init res by N + 1 since it is strictly larger
		// than the size of any subset
		int res = N + 1;

		// loop over subsets, we call them masks
		for (int mask = 0; mask < (1<<N); ++mask) {

			// we at first count the size of the subset
			// it is just the number of ones in binary form of mask
			int size = popcount(mask);

			// if the size appears to be not less than res
			// then there is no sense to check this subset
			// so we skip it
			if (res <= size) {
				continue;
			}

			// create new array after increasing by 1 elements
			// of the subset mask in the initial array
			vector<int> newR(N);
			for (int i = 0; i < N; ++i) {
				// check that R[i] belongs to the subset
				if (mask & 1<<i) {
					newR[i] = R[i] + 1;
				} else {
					newR[i] = R[i];
				}
			}

			// if array is not bad then the subset is a candidate for the answer
			if (!isBad(newR, K, M)) {
				// but actually we know already that size < res
				// so this subset is indeed better than the previous candidate
				res = size;
			}
		}

		// we adjust result to conform the output format
		// res equals N+1 if we did not find any proper subset
		// hence we should set the answer to -1 in this case
		if (res == N + 1) {
			res = -1;
		}

		// output the result
		cout << res << endl;
	}
}

