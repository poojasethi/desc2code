/*
	Bitmasking (LEALCO) JAN 13
*/
#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
#define vec vector<int>
#define in(a) scanf("%d",&a)
#define out(a) printf("%d\n",a)


int check(vec arr,int k,int m)
{
	int l=arr.size(),maxi,i,j,cnt;
	
	for(i=0;i<=l-k;i++)
	{
		maxi=0;
		
		//calculate maximum in this subset
		for(j=i;j<k+i;j++)
			maxi=max(maxi,arr[j]);
		//cout<<maxi;
		cnt=0;
		
		for(j=i;j<k+i;j++)
			if(arr[j]==maxi)
				cnt++;
		//	cout<<"  "<<cnt<<endl;
		if(cnt>=m)
			return 0;
	}
	
	return 1;
}

int onecnt(int x)
{
	int cnt=0;
	
	while(x>0)
	{
		x=x-(x&-x);
		cnt++;
	}
	
	return cnt;
}

int main()
{
	int t,n,k,m,i,size,mask,temp;
	in(t);
	
	while(t--)
	{
		in(n);  in(k);  in(m);
		
		vec arr(n);
		
		for(i=0;i<n;i++)
			cin>>arr[i];
		
		temp=n+1;
		
		//We use bitmasks to represent subsets
		
		for(mask=0;mask<(1<<n);mask++)
		{
			size=onecnt(mask);
		
			if(size>=temp)	
				continue;
			
			vec narr(n);
			
			for(i=0;i<n;i++)
				narr[i]=(mask & 1<<i) ? arr[i]+1 : arr[i];
			 
			
			if(check(narr,k,m))
				temp=size;
			
			//cout<<temp<<"  ";
		}
		
		if(temp==n+1)
			printf("-1\n");
		
		else
			out(temp);
			
	}
}
