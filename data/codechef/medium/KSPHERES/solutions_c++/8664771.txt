#include<iostream>
const int MOD = 1000000007;
const int RAD = 1001;//max C
long long hs1[RAD], hs2[RAD];
long long spheres[RAD];
long long result[RAD];
long long power(int i, int pow)
{
    if(pow==1) return i;
    if(pow==0)  return 1;

    int p;
    long long res = i;
    for(p=1; (1<<p)<=pow; ++p)
            res = (res*res)%MOD;
    return (res*power(i, pow-(1<<(p-1))))%MOD;
}
int main()
{
    int N, M, C;
    std::cin>>N>>M>>C;
    for(int i=0; i<N; ++i)
    {
        int r;
        std::cin>>r;
        ++hs1[r];
    }
    for(int i=0; i<M; ++i)
    {
        int r;
        std::cin>>r;
        ++hs2[r];
    }
    for(int j=1; j<=C; ++j)
    {
        long long a = (hs1[j]*hs2[j])%MOD;
        spheres[0] = (spheres[0]+a)%MOD;
        long long b = a;
        for(int i=1; i<=C; ++i)
        {
            b = (b*a)%MOD;
            spheres[i] = (spheres[i]+b)%MOD;
        }
    }
    result[0] = 1;
    result[1] = spheres[0];
    for(int i=2; i<=C+1; ++i)
    {
        for(int j=0; j<i; ++j)
        {
            if(j%2) result[i] = (result[i] - (result[i-j-1]*spheres[j])%MOD + MOD)%MOD;
            else    result[i] = (result[i] + result[i-j-1]*spheres[j])%MOD;
        }
        result[i] = (result[i]*power(i, MOD-2))%MOD;
        std::cout<<result[i]<<" ";
    }
    std::cout<<"\n";
    return 0;
}
