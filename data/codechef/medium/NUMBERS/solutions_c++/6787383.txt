#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;
#define llu long long unsigned
#define lld long long
#define ld long

inline int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
inline ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}

struct input
{
    char name[10];
    ld num;
};
//Sort
void merge(struct input arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
 
    /* create temp arrays */
    struct input L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i].num <= R[j].num)
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the sub-array
  of arr to be sorted */
void mergeSort(struct input arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2; //Same as (l+r)/2, but avoids overflow for large l and h
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
//END


int main()
{
    int T=scan_d(),N,i;
    while(T--)
    {
        N=scan_d();
        struct input ob[N];
        for(i=0;i<N;i++)
        {
            scanf("%s",&ob[i].name);
            ob[i].num=scan_ld();
            
        }
        mergeSort(ob,0,N-1);
        if(ob[0].num!=ob[1].num)
        {
            printf("%s\n",ob[0].name);
        }
        else
        {
            int flag=1;
            for(i=1;i<N-1;i++)
            {
                if(ob[i].num!=ob[i-1].num&&ob[i].num!=ob[i+1].num)
                {
                    printf("%s\n",ob[i].name);
                    flag=0;
                    break;
                }
            }
            if(flag)
            {
                if(ob[N-1].num!=ob[N-2].num)
                {
                   printf("%s\n",ob[N-1].name);
                   flag=0;
                }
                else
                {
                    printf("Nobody wins.\n");
                }   
            }
        }
    }
    return 0;
}