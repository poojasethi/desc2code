#include<bits/stdc++.h>
#define ll unsigned long long
//#define MOD 1000000007
using namespace std ;
/*
ll C(ll n , ll r)
{
	if(n<r)
		return 0 ;
	if(r==0 || n==r)
		return 1 ;
	if(r==1)
		return n ;
	if(n-r < r)
		r = n-r ;
	ll a = 1 ;
	ll b = 1 ;
	while(r>0)
	{
		a = (a*n) ;
		if( a > MOD)
			a = ((a%MOD)+MOD)%MOD ;
		cout << a << endl ;
		b = (b*r) ;
		if( b > MOD)
			b = ((b%MOD)+MOD)%MOD ;
		n-- ;
		r-- ;
	}
	return a/b ;
	//return ((C(n-1,r-1)%MOD) + (C(n-1,r)%MOD))%MOD ;
}

*/
long long int  pow(long long int a,long long  int b,long long  int MOD)
{
    long long int x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD; 
        b /= 2;
    }
    return x;
}
long long int InverseEuler(long long int n,long long  int MOD)
{
    return pow(n,MOD-2,MOD);
}
long long int com1(long long int  n,long long  int r,long long  int MOD)
{
long long int i;
    vector<long long int> f(n + 1,1);
    for ( i=2; i<=n;i++)
        f[i]= (f[i-1]*i) % MOD;
    return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}
long long int  Lucas(long long int n,long long int m,long long  int p)
{
    if (n==0 && m==0) return 1;
   long long  int ni = n % p;
   long long  int mi = m % p;
    if (mi>ni) return 0;
    return Lucas(n/p, m/p, p) * com1(ni, mi, p);
}
long long int com(long long int n,long long int r,long long int MOD)
{
    return Lucas(n, r, MOD);
}

int main()
{
	ios_base::sync_with_stdio(false) ;
	ll n ;
	cin >> n ;
	ll p = 1000000007 ;
	if(n<13)
		cout << 0 ;
	else if(n==13)
		cout << 1 ;
	else
	{
	ll a = com(n/2-1,n/2-7,p) ;
	if(n%2 == 0)
	{
		cout << a ;
	}
	else
	{
		ll k1 = n/2 - 6 ;
		cout << (com(k1+5,k1,p) + a) ;
	}
	}
}