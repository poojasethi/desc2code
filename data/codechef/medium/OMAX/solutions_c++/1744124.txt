#include <cstdio>

int matrix[77][77];
int sums[78][78];
int subMatrixes[77][77][77][77];

int rectTotal(int, int, int, int);
int min(int, int);
int main()
{
    int m, n;
    int tmp_max;
    int x0, y0, x1, y1;
    int max;
    int i, j;
    int lengthx, lengthy, length;
    int limit;

    while (true) {
        scanf("%d %d", &m, &n);
        if (m == 0 && n == 0) {break;}
        for (i = 0 ; i < m ; i++) {
            for (j = 0 ; j < n ; j++) {
                scanf("%d", &matrix[i][j]);
                sums[i+1][j+1] = matrix[i][j] + sums[i][j+1] + sums[i+1][j] - sums[i][j];
                subMatrixes[i][j][i][j] = matrix[i][j];
            }
        }
        //Precalculate Mins for each subset of mxn matrix
        limit = m;
        if (n>m){limit = n;}
        for(j = 1; j < limit - 1 ; j++) {
            for (length = 1 ; length < limit - 2 ; length++) {
                for (i = 1 ; i < limit - length - 1 ; i++) {
                    if (i + length < m - 1 && j < n) {
                        subMatrixes[i][j][i+length][j] = min(min(
                                                                matrix[i+length][j],
                                                                subMatrixes[i][j][i+length-1][j]),
                                                                rectTotal(i,j,i+length,j));
                    }
                    if (i + length < n - 1 && j < m ) {
                        subMatrixes[j][i][j][i+length] = min(min(
                                                                matrix[j][i+length],
                                                                subMatrixes[j][i][j][i+length-1]),
                                                                rectTotal(j,i,j,i+length));
                    }
                }
            }
        }
        for (lengthx = 1 ; lengthx < limit - 1 ; lengthx++) {
            for (lengthy = lengthx; lengthy < limit - 1 ; lengthy++) {
                for (i = 1; i < limit - lengthx - 1; i++) {
                    for (j = 1 ; j < limit - lengthy - 1; j++) {
                        if (j + lengthy < n - 1 && i + lengthx < m - 1 ){
                            subMatrixes[i][j][i+lengthx][j+lengthy] = min(min(min(min(
                                                                subMatrixes[i+1][j][i+lengthx][j+lengthy],
                                                                subMatrixes[i][j+1][i+lengthx][j+lengthy]),
                                                                subMatrixes[i][j][i+lengthx-1][j+lengthy]),
                                                                subMatrixes[i][j][i+lengthx][j+lengthy-1]),
                                                                rectTotal(i,j,i+lengthx,j+lengthy));
                        }
                        if (j+lengthy < m - 1 && i+lengthx < n - 1) {
                            subMatrixes[j][i][j+lengthy][i+lengthx] = min(min(min(min(
                                                                subMatrixes[j+1][i][j+lengthy][i+lengthx],
                                                                subMatrixes[j][i+1][j+lengthy][i+lengthx]),
                                                                subMatrixes[j][i][j+lengthy-1][i+lengthx]),
                                                                subMatrixes[j][i][j+lengthy][i+lengthx-1]),
                                                                rectTotal(j,i,j+lengthy,i+lengthx));
                        }
                    }
                }
            }
        }
        //Get difference for every region, find maximum
        max = -100000000;
        for (x0 = 0 ; x0 < m - 2 ; x0 ++) {
            for (y0 = 0 ; y0 < n - 2 ; y0 ++) {
                for (x1 = 2 + x0 ; x1 < m ; x1++) {
                    for (y1 = 2 + y0; y1 < n ; y1 ++) {
                        tmp_max = rectTotal(x0,y0,x1,y1) - subMatrixes[x0+1][y0+1][x1-1][y1-1];
                        //printf("%d %d %d %d = %d\n", x0, y0, x1, y1,rectTotal(x0,y0,x1,y1) );
                        if (tmp_max > max) {max = tmp_max;}
                    }
                }
            }
        }
        printf("%d\n", max);
    }
    return 0;
}
int rectTotal(int a, int b, int c, int d) {
    return sums[c+1][d+1] + sums[a][b] - sums[a][d+1] - sums[c+1][b];
}
int min(int a, int b) {
    if (a < b) {return a;}
    return b;
}
