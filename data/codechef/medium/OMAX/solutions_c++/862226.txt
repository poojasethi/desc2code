#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <algorithm>

//DS
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>

#define LL          long long int
#define UL          unsigned long long int
#define MAX_INT     0x7fffffff
#define MOD         1000000007
#define LOCAL       0
#define DEBUG       0
#define REP(i,n)    for(int i = 0; i < (n); i++)
#define FOR(i,a,b,k)for(int i = (a); i < (b); i+=k)

using namespace std;

int mat[80][80];
int sum[80][80];
int dp[80][80][80][80];
int m,n;

int ni(){
    int v;
    scanf("%d", &v);
    return v;
}

void preprocess(){
    REP(i,80){
        REP(j,80){
            sum[i][j] = 0;
        }
    }
}

bool input(){
    m = ni();
    n = ni();
    if(m + n == 0) return false;
    FOR(i,1,m+1,1){
        FOR(j,1,n+1,1){
            mat[i][j] = ni();
            sum[i][j] = mat[i][j];
        }
    }
    return true;
}

void solve(){
    FOR(i,1,m+1,1){
        FOR(j,1,n+1,1){
            sum[i][j] += sum[i][j-1];
        }
    }

    FOR(i,1,m+1,1){
        FOR(j,1,n+1,1){
            sum[i][j] += sum[i-1][j];
        }
    }

    FOR(sx,1,m-1,1){
        FOR(sy,1,n-1,1){
            FOR(i,2,m+1-sx,1){
                FOR(j,2,n+1-sy,1){
                    int k = i + sx - 1;
                    int l = j + sy - 1;
                    int val = sum[k][l] + sum[i-1][j-1] - sum[k][j-1] - sum[i-1][l];
                    if(k >= i+1){
                        val = min(val, dp[i][j][k-1][l]);
                        val = min(val, dp[i+1][j][k][l]);
                    }
                    if(l >= j+1){
                        val = min(val, dp[i][j][k][l-1]);
                        val = min(val, dp[i][j+1][k][l]);
                    }
                    dp[i][j][k][l] = val;

                    #if DEBUG
                        printf("(%d %d) - (%d %d) -> %d\n", i,j,k,l,val);
                    #endif
                }
            }
        }
    }
    int ans = 0x80000000;
    FOR(i,1,m-1,1){
        FOR(j,1,n-1,1){
            FOR(sx,3,m+2-i,1){
                FOR(sy,3,n+2-j,1){
                    int k = i + sx - 1;
                    int l = j + sy - 1;
                    int s = sum[k][l] + sum[i-1][j-1] - sum[k][j-1] - sum[i-1][l];
                    ans = max(ans,s-dp[i+1][j+1][k-1][l-1]);
                }
            }
        }
    }
    printf("%d\n", ans);
}

int main(){
    #if LOCAL
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    preprocess();
    int t = MAX_INT;
    while(t && input()){
        solve();
        t--;
    }
    return 0;
}
