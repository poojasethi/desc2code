#include <iostream>
#include <vector>
#include <algorithm>
#include <string.h>
#include <string>
#include <set>
#include <queue>
#include <map>
#include <algorithm>
#include <iomanip>
#include <math.h>
using namespace std;

const int inf = 1119999999;
const int maxn = 80;

int h,w;
int mat[maxn][maxn];
int ss[maxn][maxn];

inline int rectsum( int r1, int c1, int r2, int c2 ){
    int ret = ss[r2][c2];
    if( r1 && c1 ) ret += ss[r1-1][c1-1];
    if( r1 ) ret -= ss[r1-1][c2];
    if( c1 ) ret -= ss[r2][c1-1];
    return ret;
}

int dp[maxn][maxn][maxn][maxn];
bool visi[maxn][maxn][maxn][maxn];

int solve( int r1, int c1, int r2, int c2 ){
    if( r1 > r2 || c1 > c2 ) return inf;

    int &sol = dp[r1][c1][r2][c2];
    if( visi[r1][c1][r2][c2] ) return sol;
    visi[r1][c1][r2][c2] = 1;

    int s;
    sol = rectsum(r1,c1,r2,c2);
    if( sol > (s=solve(r1+1,c1,r2,c2)) ) sol = s;
    if( sol > (s=solve(r1,c1+1,r2,c2)) ) sol = s;
    if( sol > (s=solve(r1,c1,r2-1,c2)) ) sol = s;
    if( sol > (s=solve(r1,c1,r2,c2-1)) ) sol = s;

    return sol;
}

int main(){
  //  freopen("Ulaz.txt","r",stdin);

    while( scanf("%d%d",&h,&w) ){
        if( h == 0 && w == 0 ) break;

        for( int i = 0; i < h; ++i )
            for( int j = 0; j < w; ++j )
                scanf("%d",&mat[i][j]);

        for( int i = 0; i < h; ++i )
            for( int j = 0; j < w; ++j )
                ss[i][j] = (j?ss[i][j-1]:0) + mat[i][j];

        for( int i = 0; i < w; ++i )
            for( int j = 1; j < h; ++j )
                ss[j][i] += ss[j-1][i];

        for( int i = 0; i < h; ++i )
            for( int j = 0; j < w; ++j )
                for( int k = 0; k < h; ++k )
                    for( int l = 0; l < w; ++l )
                        visi[i][j][k][l] = 0;

        solve( 0 , 0 , h-1, w-1 );

        int sol = -inf;
        for( int r1 = 0; r1 < h; ++r1 ){
            for( int c1 = 0; c1 < w; ++c1 ){
                for( int r2 = r1+2; r2 < h; ++r2 ){
                    for( int c2 = c1+2; c2 < w; ++c2 ){
                        int curr = rectsum(r1,c1,r2,c2) - dp[r1+1][c1+1][r2-1][c2-1];
                        sol = max( sol, curr );
                    }
                }
            }
        }

        printf("%d\n",sol);
    }


    return 0;
}
