#include <cstdio>
#include <climits>
#include <algorithm>
#include <cctype>

using namespace std;

const int BUFSIZE = 4096;
char r_buffer[BUFSIZE];
int r_bufpos = BUFSIZE;

int read_int()
{
    int n;
    bool sign=true;

    sign = 1;
    for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
            r_buffer[r_bufpos]!='-'; r_bufpos++);
    if (r_buffer[r_bufpos] == '-')
    {
        sign = false;
        r_bufpos += 1;
    }

    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && !isdigit(r_buffer[r_bufpos]) &&
                r_buffer[r_bufpos]!='-'; r_bufpos++);
        if (r_buffer[r_bufpos] == '-')
        {
            sign = false;
            r_bufpos += 1;
        }
    }

    n = 0;
    for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
        n = 10 * n + r_buffer[r_bufpos] - '0';

    if (r_bufpos == BUFSIZE)
    {
        r_bufpos = 0;
        fread(r_buffer, 1, BUFSIZE, stdin);
        for (; r_bufpos < BUFSIZE && isdigit(r_buffer[r_bufpos]); r_bufpos++)
            n = 10 * n + r_buffer[r_bufpos] - '0';
    }
    return sign? n: -n;
}

int mat[77][77];
int sum[78][78]; 
int dp[77][77][77][77];

int main()
{

    int M, N;
    int i, j, di, dj;
    int ans, s, res, l, m;

    while(1)
    {
        M = read_int();
        N = read_int();
        if (M == 0 && N == 0)
            break;
     
        for(i=0; i<M; i++)
            for(j=0; j<N; j++)
            {
                dp[i][j][i][j] = mat[i][j] = read_int();
                sum[i+1][j+1] = sum[i][j+1] + sum[i+1][j]
                                - sum[i][j] + mat[i][j];

            }

        for(dj=1; dj<N; dj++)
            for(j=0; j<N-dj; j++)
                for(i=0; i<M; i++)
                {
                    s = sum[i+1][j+dj+1] - sum[i+1][j] - sum[i][j+dj+1] + sum[i][j];
                    l = dp[i][j][i][j+dj-1];
                    m = dp[i][j+1][i][j+dj];
                    dp[i][j][i][j+dj] = min(s, min(l, m));
                }

        for(di=1; di<M; di++)
            for(i=0; i<M-di; i++)
                for(j=0; j<N; j++)
                {
                    s = sum[i+di+1][j+1] - sum[i+di+1][j] - sum[i][j+1] + sum[i][j];
                    l = dp[i][j][i+di-1][j];
                    m = dp[i+1][j][i+di][j];
                    dp[i][j][i+di][j] = min(s, min(l, m));
                }

        ans = INT_MIN;
        for(di=1; di<M; di++)
            for(dj=1; dj<N; dj++)
                for(i=0; i<M-di; i++)
                    for(j=0; j<N-dj; j++)
                    {
                        s = sum[i+di+1][j+dj+1] - sum[i][j+dj+1]
                                - sum[i+di+1][j] + sum[i][j];
                        res = min(dp[i][j][i+di-1][j+dj], s);
                        res = min(res, dp[i+1][j][i+di][j+dj]);
                        res = min(res, dp[i][j+1][i+di][j+dj]);
                        res = min(res, dp[i][j][i+di][j+dj-1]);
                        dp[i][j][i+di][j+dj] = res;
                        if(di > 1 && dj > 1)
                            ans = max(ans, s - dp[i+1][j+1][i+di-1][j+dj-1]);
                    }
        printf("%d\n", ans);
    }
    return 0;
}

