#!/usr/bin/python
# coding=utf8
import sys
from time import time
from itertools import permutations, combinations
import collections
import functools
from fractions import gcd


class memoized(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


class timed(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args):
        t1 = time()
        ret = self.func(*args)
        dif_time = time() - t1
        print "%s: returned %s in %f seconds" % (self.func.__name__, ret, dif_time)
        return ret

def comp(f1, f2, *args):
    t1 = time()
    r1 = f1(*args)
    t2 = time()
    r2 = f2(*args)
    t3 = time()
    res = "%5s: %s in %f\n%5s: %s in %f" % (f1.__name__, r1, t2 - t1, f2.__name__, r2, t3 - t2)
    if r1 != r2:
        dr = "!! DIFFERENT RESULTS !!"
        res = dr + "\n" + res + "\n" + dr
    print res


def alg(salaries):
    # manual algo : increase the biggest one until it works
    count = 0
    nb_sal = len(salaries)
    while True:
        max_sal = max(salaries)
        min_sal = min(salaries)
        if min_sal == max_sal:
            break
        else:
            idx_max = salaries.index(max_sal)
            salaries = [salaries[i] + 1 if i != idx_max else salaries[i] for i in xrange(nb_sal)]
            count += 1
    return count


def alg2(salaries):
    # chaque coup, le min se rapproche du max
    # mais reste Ã  la meme distance d'un second max
    # il faut donc que min augmente d'autre moins le max
    # monter tout le monde revient Ã  descendre un gars de 1?
    # donc algo final revient Ã  descrndre tout le monde jusqu'Ã  min
    # donc le resultat est la somme de toutes les diff entre min et tous les
    # autres
    count = 0
    salaries = sorted(salaries)
    nb_sal = len(salaries)
    moves = sum(salaries[i] - salaries[0] for i in xrange(1, nb_sal))
    return moves


def main():
    data = sys.stdin
    nb = int(data.readline())
    #a, b = map(int,data.readline().split())
    for icase in xrange(nb):
        data.readline()
        salaries = map(int, data.readline().split())
        res = alg2(salaries)
        print res
    #print alg2(range(1, 10000, 10000/100))


if __name__ == "__main__":
    main()
