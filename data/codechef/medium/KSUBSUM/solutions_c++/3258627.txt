#include <iostream>
#include <queue>
#include <cstdio>
#include <set>
#include <algorithm>
 
using namespace std;
 
void read(int *a)
{
	int sign=1;
	char c=0;
	while(c < 33)
	{
		c=fgetc_unlocked(stdin);
	}
	*a=0;
	if(c == '-')
	{
		sign=-1;
		c=fgetc_unlocked(stdin);
	}
	while(c > 33)
	{
		*a=*a *10+c-'0';
		c=fgetc_unlocked(stdin);
	}
	*a=*a*sign;
}
 
int main()
{
	int T,N,K1,K2,K3,i,temp,r1,r2,r3,l;
	int c[10002],val,d;
	c[0]=0;
	read(&T);
	while(T--)
	{
		priority_queue<int,vector<int>,greater<int> > pqueue;
		multiset<int> set;
		multiset<int>::iterator it;
		read(&N);
		read(&K1);
		read(&K2);
		read(&K3);
		for(i=0;i<N;i++)
		{
			read(&temp);
			c[i+1]=c[i]+temp;
		}
		set.insert(0);
		l=1;
		for(i=0;i<N;i++)
		{
			val=c[i+1];
			for(it=set.begin();it != set.end();it++)
			{
				d=val-*it;
				if(pqueue.size() < K3)
				{
					pqueue.push(d);
				}
				else if(pqueue.top() < d)
				{
					pqueue.pop();
					pqueue.push(d);
				}
				else
					break;
			}
			if(i == N-1)
				break;
			if(l<K3)
			{
				set.insert(val);
				l++;
			}
			else
			{
				temp=*(set.rbegin());
				if(val < temp)
					set.insert(val);
			}
		}
		l=pqueue.size();
		for(i=0;!pqueue.empty();i++)
		{
			val=pqueue.top();
			pqueue.pop();
			if((l-K1) == i) r1=val;
			if((l-K2) == i) r2=val;
			if((l-K3) == i) r3=val;
		}
		printf("%d %d %d\n",r1,r2,r3);
	}
	return 0;
}