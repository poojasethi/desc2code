/* adijimmy COMPETITIVE CODING TEMPLATE ADITYA DEEPAK NIT-ROURKELA
apna template khud banao :P */

#include <algorithm>
#include <cstdlib>
#include <vector>
#include <bitset>
#include <map>
#include <set>
#include <cmath>
#include <iostream>
#include <cstdio>
using namespace std;

#define pi 2*acos(0)
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define CLR(a,n) memset(a,n,sizeof a)
#define debug(arr,a,b) for(int i=a;i<=b;i++) printf("%d ",arr[i])
#define rep(i,a,n) for(int i=a;i<n;i++)
#define repi(i,a,n) for(int i=a;i<=n;i++)
#define repd(i,a,n) for(int i=a;i>=n;i--)
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define sorta(a) sort(a.begin(),a.end())
#define sortd(a) sort(a.rbegin(),a.rend())

typedef long long int ll;
typedef unsigned long long int ull;
const int mod = 1e9+7;
const int MAX = 1e5+5;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector< PII > VPII;

int X[] = {1,0,-1,0};
int Y[] = {0,-1,0,1};

ll power(ll a,ll b){
 ll res = 1;
 while(b){
  if(b&1) res = (res*a)%mod;
  a = (a*a)%mod;
  b >>= 1;
 }
 return res;
}

#define MY_LOVE

VI vec;
pair<int,int> P[10005];
int arr[10005];
multiset<int> st;

int main(){
 //ios_base::sync_with_stdio(0);
 #ifndef MY_LOVE
   freopen("qns.txt","r",stdin);
   freopen("ans.txt","w",stdout);
 #endif
 int t,n,k1,k2,k3;
 scanf("%d",&t);
 while(t--){
   scanf("%d %d %d %d",&n,&k1,&k2,&k3);
   vec.clear();
   st.clear();
   for(int i=0;i<n;i++){
    scanf("%d",&arr[i]);
    P[i].S = i;
   }
   P[0].F = arr[0];
   for(int i=1;i<n;i++){
    P[i].F = max(P[i-1].F+arr[i],arr[i]);
   }
   sort(P,P+n,greater<pair<int,int> >());
   for(int i=0;i<n;i++){
    if(st.size() >= k3 && P[i].first <= *st.begin()) break;
    int sum = 0;
    for(int j=P[i].second;j>=0;j--){
        sum += arr[j];
        if(st.size()<k3 || sum> *st.begin()){
          st.insert(sum);
          if(st.size()>k3) st.erase(st.begin());
        }
    }
   }
   for(multiset<int>::iterator it = st.begin();it!=st.end();it++) vec.PB(*it);
   reverse(vec.begin(),vec.end());
   printf("%d %d %d\n",vec[k1-1],vec[k2-1],vec[k3-1]);
 }
 return 0;
}
// hope it gets AC :P
