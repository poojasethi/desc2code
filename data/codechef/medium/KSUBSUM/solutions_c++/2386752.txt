// CodeChef - KSUBSUM
// Maths
// Prefix sums
// Find top K subarray sums

#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

#define MAXN 30004
#define MAXK 2022

int n, k1, k2, k3;
int values[MAXN], minPrefixSums[MAXK];
int currentAns[MAXK], bestAnswer[MAXK];
int temp[MAXK];

// Merge two sorted arrays
void merge(int *a, int n1, int *b, int n2)
{
  int p1 = 1, p2 = 1, p3 = 0;
  while(p3 < k3 && p1 <= n1 && p2 <= n2)
  {
    if(a[p1] > b[p2]) temp[++p3] = a[p1++];
    else temp[++p3] = b[p2++];
  }
  while(p3 < k3 && p1 <= n1) temp[++p3] = a[p1++];
  while(p3 < k3 && p2 <= n2) temp[++p3] = b[p2++];
  for(int i = 1; i <= p3; i++) a[i] = temp[i];
}

void solve()
{
  int p1 = 0, p2 = 0, f, sum = 0;
  minPrefixSums[++p1] = 0;
  
  for(int i = 0; i < n; i++)
  {
    sum = sum + values[i];
    for(int j = 1; j <= p1; j++) 
     currentAns[j] = sum - minPrefixSums[j];
    merge(bestAnswer, p2, currentAns, p1);
    p2 = min(k3, p2 + p1);

    for(f = p1 + 1; f > 1 && sum < minPrefixSums[f - 1]; f--) 
     minPrefixSums[f] = minPrefixSums[f - 1];
    minPrefixSums[f] = sum;
    p1 = min(k3, p1 + 1);
  }
}

int main()
{
  int t;

  scanf("%d", &t);
  while(t--)
  {
    scanf("%d %d %d %d",&n, &k1, &k2, &k3);
    for(int i = 0; i < n; i++) 
     scanf("%d", &values[i]);
    solve();
    printf("%d %d %d\n", bestAnswer[k1], bestAnswer[k2], bestAnswer[k3]);
  }
  
  return 0;
}
