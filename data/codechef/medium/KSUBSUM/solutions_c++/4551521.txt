/* @author Ishita Gupta*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <string>
#include <cstring>
#include <queue>
#include <ctime>
#define mp(x,y) make_pair(x,y)
#define pb(x) push_back(x)
#define vi vector<int>
#define vvi vector< vi >
#define vs vector<string>
#define rep(i,s,e) for(int i=s;i<=e;i++)
#define fori(s,e) for(int i=s;i<=e;i++)
#define forj(s,e) for(int j=s;j<=e;j++)
#define fork(s,e) for(k=s;k<=e;k++)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define ull unsigned long long
#define ll long long
#define imax INT_MAX
#define imin INT_MIN
#define mem(x,y) memset(x,y,sizeof(x));
#define pii pair<int,int>
#define aa first
#define bb second
using namespace std;
int readint()
{
    int t=0;
    char c,ch;
    ch=getchar();
    if ( ch=='-' )
    {
        c=getchar();
    }
    else
    {
        c=ch;
    }
    while ( c<'0' || c>'9' )
    {
        c=getchar();
    }
    while ( c>='0' && c<='9' )
    {
        t= ( t<<3 )+ ( t<<1 )+c-'0';
        c=getchar();
    }
    if ( ch=='-' )
    {
        return -t;
    }
    else
    {
        return t;
    }
}
int main()
{
    ios::sync_with_stdio ( false );
    int t,i,j,k,m,n,x,y,k1,k2,k3,l;
    cin>>t;
    while ( t-- )
    {
        cin>>n;
        cin>>k1>>k2>>k3;
        int arr[n];
        fori ( 0,n-1 ) cin>>arr[i];
        k=max ( max ( k1,k2 ),k3 );
        int sum[k+1], curr=arr[0], best[k+1], bt[k];
        fori ( 0,k-1 ) sum[i]=imax,best[i]=imin;
        sum[0]=arr[0];
        best[0]=arr[0];
        fori ( 1,n-1 )
        {
            curr+=arr[i];
            j=0,l=0,m=0;
            //cout<<"merge   ";
            while ( m<k )
            {
                if ( j>=k )
                {
                    bt[m++]=best[l++];
                }
                else if ( l>=k )
                {
                    bt[m++]=curr-sum[j];
                    j++;
                }
                else if ( sum[j]==imax )
                {
                    bt[m++]=best[l++];
                }
                else if (best[l]==imin)
                {
                    bt[m++]=curr-sum[j];
                    j++;
                }
                else if ( curr-sum[j]<best[l] )
                {
                    bt[m++]=best[l++];
                }
                else
                {
                    bt[m++]=curr-sum[j], j++;
                }
                //cout<<m<< " "<<bt[m-1]<<endl;
            }
            //cout<<endl<<endl;
            forj(0,k-1) best[j]=bt[j];

            best[k]=curr;
            j=k;
            while ( j>0&&best[j-1]<best[j] )
            {
                swap ( best[j],best[j-1] );
                j--;
            }

            sum[k]=curr;
            j=k;
            while ( j>0&&sum[j-1]>sum[j] )
            {
                swap ( sum[j],sum[j-1] );
                j--;
            }
//            cout<<"sum  ";
//            forj(0,k-1) cout<<sum[j]<< " ";
//            cout<<endl;
//
//            cout<<"best  ";
//            forj(0,k-1) cout<<best[j]<< " ";
//            cout<<endl;

        }
        cout<<best[k1-1]<<" "<<best[k2-1]<<" "<<best[k3-1]<<endl;
    }
    return 0;
}
