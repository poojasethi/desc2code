#include<iostream>
#include<stdio.h>
#include<algorithm>
using namespace std;

void merge(int a[], int an, int b[], int bn, int k3)
{
  int i=0,j=0,c=0;
  int tmp[30000];
  
  while((i<an) && (j<bn) && (c<k3))
  {
    if(a[i] > b[j])
    {
      tmp[c] = a[i];
      i++;
    }
    else
    {
      tmp[c] = b[j];
      j++;
    }    
    c++;
  }

  while(j<bn && c<k3)
  {
    tmp[c] = b[j];
    c++;
    j++;
  }
  while(i<an && c<k3)
  {
    tmp[c] = a[i];
    c++;
    i++;
  }

  for(i=0;i<c;i++)
    a[i] = tmp[i];
}


int main()
{
  int t;
  scanf("%intd",&t);

  while(t--)
  {
    int n,k1,k2,k3;
    scanf("%d %d %d %d",&n,&k1,&k2,&k3);
    int a[n+1];
    for(int i=0;i<n;i++)
      scanf("%d",&a[i]);
    
    int curr_sum[30004], best_sum[30004], prev_sum[30004], sum = 0;
    int p1 = 1, p2 = 0;
    
    prev_sum[0] = 0;

    for(int i=0;i<n;i++)
    {
      sum += a[i];
      
      for(int j=0;j<p1;j++)
        curr_sum[j] = sum - prev_sum[j];
      
      merge(best_sum,p2,curr_sum,p1,k3);
      p2 = min(k3,p1+p2);
      int x;
      
      for(x=p1-1;x>=0;x--)
      {
        if(sum < prev_sum[x])
          prev_sum[x+1] = prev_sum[x];
        else
          break;
      }
      
      prev_sum[x+1] = sum;
      p1 = min(k3,p1+1);
    }
    printf("%d %d %d\n",best_sum[k1-1],best_sum[k2-1],best_sum[k3-1]);
  }
return 0;
}
