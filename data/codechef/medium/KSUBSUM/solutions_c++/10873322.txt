

#include <cstdio>
#include <memory.h>
#include <algorithm>
using namespace std;
const int M1=111000000;
int t,n,m,k1,k2,k3,i,cur,sum[10010],s[10010],a[10010];
void inc(int i) {
  for (int j=i; j<=m; j=(j<<1)-(j&(j-1))) s[j]++;
}
int findsum(int i) {
//printf("findsum %d\n",i);
  int r=0;
  for (int j=i; j>0; j&=j-1) r+=s[j];
  return r;
}
int solve(int k) {
  int l,r,h,mid,rs;
  l=0; r=2*M1;
  while (l<r) {
    mid=(l+r)/2+1; h=mid-M1;
    //printf("%d %d %d\n",l,r,h);
    memset(s,0,sizeof(s));
    inc((lower_bound(sum,sum+m,0)-sum)+1);
    for (rs=cur=i=0; i<n; i++) {
    //printf("%d %d\n",i,n);
      cur+=a[i];
      //printf("%d\n",cur-h);
      rs+=findsum(upper_bound(sum,sum+m,cur-h)-sum);
      //printf("%d\n",rs);
      inc((lower_bound(sum,sum+m,cur)-sum)+1);
      //for (int i=1; i<=m; i++) printf("%d ",s[i]);puts("~~");
    }
    if (rs<k) r=mid-1; else l=mid;
  }
  return r-M1;
}
int main() {
  scanf("%d",&t);
  while (t--) {
    scanf("%d%d%d%d",&n,&k1,&k2,&k3);
    sum[0]=0;
    for (i=0; i<n; i++) {
      scanf("%d",&a[i]);
      sum[i+1]=sum[i]+a[i];
    }
    m=n+1;
    sort(sum,sum+m);
    m=unique(sum,sum+m)-sum;
    printf("%d %d %d\n",solve(k1),solve(k2),solve(k3));
  }
  return 0;
}
 

