#include <cstring>
#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <cmath>
using namespace std;
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define MAXN 1000010
#define ff first
#define ss second
#define pr(x) printf("%d",x);
#define get getchar_unlocked
inline int inp()
{
    int n=0,s=1;
    char p=get();
    if(p=='-')
    s=-1;
    while((p<'0'||p>'9')&&p!=EOF)
    p=get();
    while(p>='0'&&p<='9')
    {
    n = (n<< 3) + (n<< 1) + (p - '0');
    p=get();
    };
    return n*s;
}

int a[10005],s[10005],curans[2015],minprefix[2015],bestans[2015],temp[2015];
int k1,k2,k3;


void mergearr(int a[],int m,int b[],int k)
{
    int i=1,j=1,l=0;
    while(l<k3&&i<=m&&j<=k)
    {
        if(a[i]>b[j])
            temp[++l]=a[i++];
        else temp[++l]=b[j++];
    }
    while(l<k3&&i<=m)temp[++l]=a[i++];
    while(l<k3&&j<=k)temp[++l]=b[j++];
    for(i=1;i<=l;i++)
        a[i]=temp[i];
}


int main()
{
    int i,n,j,k,t,c=0,l,m;
    t=inp();
    while(t--)
    {
       n=inp();k1=inp();k2=inp();k3=inp();
       k=0,m=0;
       minprefix[++k]=0;
       for(i=1;i<=n;i++)
       {
           a[i]=inp();
           s[i]=s[i-1]+a[i];
           for(j=1;j<=k;j++)
            curans[j]=s[i]-minprefix[j];
           mergearr(bestans,m,curans,k);
           m=min(k3,m+k);
           for(j=k+1;j>1&&s[i]<minprefix[j-1];j--)
            minprefix[j]=minprefix[j-1];
            minprefix[j]=s[i];
            k=min(k3,k+1);
       }
       printf("%d %d %d\n",bestans[k1],bestans[k2],bestans[k3]);
    }
    return 0;
}
