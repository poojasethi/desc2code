#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
#include <map>

using namespace std;

int input()
{
    int n=0;
    char c=getchar_unlocked();
    while(c < '0' || c >'9') {c=getchar_unlocked();}
    while(c>='0' && c<='9')
    {
        n=(n<<3)+(n<<1)+c-'0';
        c=getchar_unlocked();
    }
    return n;
}

typedef struct Cust{
	int stime;
	int etime;
	int pref;
}cust;

bool func(cust a, cust b){
	return (a.stime < b.stime);
}

int main(){
	int T,N,K,count,curr_endtime;
	map<int, int> occ;
	T = input();
	cust* customers;
	while(T--){
		N = input();
		K = input();
		customers = new cust[N];
		for(int i = 0; i < N; i++){
			customers[i].stime = input();
			customers[i].etime = input();
			customers[i].pref = input();
			occ[customers[i].pref] = 0;
		}
		sort(customers, customers+N, func);
		count = 0;
		curr_endtime = 0;
		for(int i = 0; i < N; i++){
			curr_endtime = occ[customers[i].pref];
			if(customers[i].stime >= curr_endtime){
				count++;
				occ[customers[i].pref] = customers[i].etime;
			}
			else if(customers[i].stime < curr_endtime && customers[i].etime < curr_endtime){
				occ[customers[i].pref] = customers[i].etime;
			}
		}
		cout << count << endl;
		delete(customers);
		occ.clear();
	}
}



