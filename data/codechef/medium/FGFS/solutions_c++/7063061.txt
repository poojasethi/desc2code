#include<stdint.h>
#include<unistd.h>
#include<iostream>
#include<algorithm>
#include<stdio.h>
#define gc getchar_unlocked
/*void scanint(int &x)
{
	register int c=gc();
	x=0;
	for(;(c<48 || c>57);c=gc());
	for(;c>47 && c<58;c=gc()){x=(x<<1)+(x<<3)+c-48;}
}*/
    class FastInput {
    public:
    FastInput() {
    m_dataOffset = 0;
    m_dataSize = 0;
    m_v = 0x80000000;
    }
    uint32_t ReadNext() {
    if (m_dataOffset == m_dataSize) {
    int r = read(0, m_buffer, sizeof(m_buffer));
    if (r <= 0) return m_v;
    m_dataOffset = 0;
    m_dataSize = 0;
    int i = 0;
    if (m_buffer[0] < '0') {
    if (m_v != 0x80000000) {
    m_data[m_dataSize++] = m_v;
    m_v = 0x80000000;
    }
    for (; (i < r) && (m_buffer[i] < '0'); ++i);
    }
    for (; i < r;) {
    if (m_buffer[i] >= '0') {
    m_v = m_v * 10 + m_buffer[i] - 48;
    ++i;
    } else {
    m_data[m_dataSize++] = m_v;
    m_v = 0x80000000;
    for (i = i + 1; (i < r) && (m_buffer[i] < '0'); ++i);
    }
    }
    }
    return m_data[m_dataOffset++];
    }
    public:
    uint8_t m_buffer[32768];
    uint32_t m_data[16384];
    size_t m_dataOffset, m_dataSize;
    uint32_t m_v;
    };
    FastInput fi;
using namespace std;
struct node{
	int f;
	int s;
	int k;
	}arr[100005];
//comparator function to be used while sorting the array of stuctures 

 bool operator<(node const &a,node const &b)
    {
    return (a.k!=b.k)?(a.k<b.k):(a.f<b.f);
    }
    
main()
{
	long long con=-1,ans=0,i,j;
	int b,c,d,t,n,a;
	//scanint(t);
	t=fi.ReadNext();
	while(t--)
	{	con=-1;
		//scanint(n);
		//scanint(a);
		n=fi.ReadNext();
		a=fi.ReadNext();
		for(i=0;i<n;i++)
		{
			//scanint(arr[i].s);
			//(arr[i].s)=b;
			//scanint(arr[i].f);
			//(arr[i].f)=c;
			//scanint(arr[i].k);
			arr[i].s=fi.ReadNext();
			arr[i].f=fi.ReadNext();
			arr[i].k=fi.ReadNext();
		}
		sort(arr,arr+n);
		ans=0;
		for(i=0;i<n;i++)
		{
			//cout<<(arr[i].f)<<" "<<(arr[i].s)<<" "<<(arr[i].k)<<"\n";
			if(con<arr[i].k)
			{
				con=arr[i].k;
				b=arr[i].f;
				ans++;
			}
			else
			{
				if(b<=arr[i].s)
				{
					b=arr[i].f;
					ans++;
				}
			}
		}
		cout<<ans<<"\n";
	}
}			
			
