#include<stdio.h>
#include<stdlib.h>
#include<cstdlib>
#include<string.h>
#include<math.h>
#include<time.h>
#include<algorithm>
#include<vector>
#include<map>
#include<iostream>
#include<functional>
#include<utility>
using namespace std;

#define gc getchar_unlocked
typedef unsigned long long ull;

void scanint(int &x);
void scanlong(ull &x);

typedef struct time 
{
	int start;
	int end;
}TIME;

void quickSort(vector<TIME>&,int,int);

int main()
{
    int noOfTestCase;
    scanint(noOfTestCase);
    for(int i=0; i<noOfTestCase; ++i)
    {
        int nVal,kVal;
        scanint(nVal);scanint(kVal);
        map<int,vector<TIME> > input;
        ull res = 0;
        int temp;
        TIME process; 
        for(int i=0;i<nVal;++i)
        {
            scanint(process.start);scanint(process.end);scanint(temp);
            input[temp].push_back(process);
        }
        map<int,vector<TIME> >::iterator iter= input.begin();
        for(;iter!=input.end();++iter)
        {
            vector<TIME> vec = (*iter).second;
            quickSort(vec,0,vec.size()-1);
            //for(int j=0;j<vec.size();++j)
            //    printf("%d %d\n",vec[j].start,vec[j].end);
            //printf("\n");
            res++;
            int start = vec[0].start;
            int end = vec[0].end;
            for(int i=1;i<vec.size();++i)
            {
                if(vec[i].start >= end)
                {
                        res++;
                        start=vec[i].start;
                        end=vec[i].end;
                }
            }
        }
        printf("%lld\n",res);
    }
                
    return 0;
}

void quickSort(vector<TIME> &arr,int left,int right)
{
        int i = left, j = right;
        int tmp;
        int pivot = arr[(left + right) / 2].end;
 
        while (i <= j) 
        {
            while (arr[i].end < pivot)
                i++;
            while (arr[j].end > pivot)
                j--;
            if (i <= j) 
            {   
                tmp = arr[i].start;
                arr[i].start = arr[j].start;
                arr[j].start = tmp;
                tmp = arr[i].end;
                arr[i].end = arr[j].end;
                arr[j].end = tmp;
                i++;
                j--;
            }
          }
        if (left < j)
            quickSort(arr, left, j);
        if (i < right)
            quickSort(arr, i, right);
}

void scanint(int &x)
{
        int flag=0;
        register int c = gc();
        if(c == '-') flag=1;
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
        if(flag == 1)x=-x;
}

void scanlong(ull &x)
{
        int flag=0;
        register int c = gc();
        if(c == '-') flag=1;
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
        if(flag == 1)x=-x;
}

