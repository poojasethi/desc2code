 /* Author: happywu 
 *  File: FGFS.cpp
 *  Create Date: 2015-08-23
 */
#include<cstdio>
#include<iostream>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<queue>
#include<vector>
#include<cstdlib>
#include<time.h>
#include<map>
#include<set>
using namespace std;
typedef long long LL;
const int maxn = 200010;
set<int> y2;
set<int>::iterator it;
map<int,int> dic2;
map<int,int> ::iterator it2;
int n,m,T,k;
struct node{
	int l,r,p;
	bool operator<(const node&rhs)const{
		return r<rhs.r;
	}
}a[maxn];
vector<node> b[100010];
int Do(int x){
	sort(b[x].begin(),b[x].end());
	int ans=0,now=0;
	for(int i=0;i<b[x].size();i++){
		if(b[x][i].l>=now){
			ans++;
			now=b[x][i].r;
		}
	}
	return ans;
}

inline int read(){
	static int r, sign;
	static char c;
	r = 0, sign = 1;
	do c = getchar(); while(c != '-' && (c < '0' || c > '9'));
	if( c == '-')sign = -1, c = getchar();
	while( c >= '0' && c <='9') r = r*10 +(int)(c - '0'), c = getchar();
	return sign * r;
}

int main(int argc, char* argv[]){
	T=read();
	while(T--){
		n=read();k=read();
		y2.clear();dic2.clear();
		for(int i=0;i<n;i++){
			a[i].l=read();a[i].r=read();a[i].p=read();
			y2.insert(a[i].p);
		}
		int totp=0;
		for(it=y2.begin();it!=y2.end();it++)
			dic2[(*it)]=++totp;
		for(int i=1;i<=totp;i++)b[i].clear();
		for(int i=0;i<n;i++)
			b[dic2[a[i].p]].push_back(a[i]);
		int ans=0;
		for(int i=1;i<=totp;i++){
			ans+=Do(i);
		}
		printf("%d\n",ans);
	}
	return 0;
}




