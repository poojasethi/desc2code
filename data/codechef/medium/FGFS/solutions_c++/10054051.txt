#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e6 + 10;
const int INF = 1e8;
int s[MAXN];
int f[MAXN];
int p[MAXN];
vector<vector<int> > compart(MAXN);
int main(){
    int t;
    cin >> t;
    while(t--){
        int N, K;
        scanf("%d%d", &N, &K);
        set<int> Ks;
        for(int i = 1;i <= N;++i){
            compart[i].clear();
            scanf("%d%d%d", &s[i], &f[i], &p[i]);
            Ks.insert(p[i]);
        }
        map<int, int> revKs;
        int _i = 1;
        for(set<int> :: iterator it = Ks.begin();it != Ks.end();++it){
            revKs[*it] = _i;
            _i += 1;
        }
        for(int i = 1;i <= N;++i){
            p[i] = revKs[p[i]];
            compart[p[i]].push_back(i);
        }
        int ans = 0;
        K = Ks.size();
        for(int i = 1;i <= K;++i){
            vector<pair<int, int> > inout;
            int sz = compart[i].size();
            for(int j = 0;j < sz;++j){
                 inout.push_back(make_pair(f[compart[i][j]], s[compart[i][j]]));
            }
            sort(inout.begin(), inout.end());
            vector<int> curAns(inout.size(), 0);
            for(int j = 0;j < sz;++j){
                pair<int, int> pp = make_pair(inout[j].second, INF);
                int x = lower_bound(inout.begin(), inout.end(), pp) - inout.begin();
                int val = (x == 0?0:curAns[x - 1]);
                curAns[j] = max((j == 0?0:curAns[j - 1]), val + 1);
            }
            if(sz > 0)
                ans += curAns[sz - 1];
        }
        printf("%d\n", ans);
    }
    return 0;
}
