//
//  Gerald03.cpp
//  CodeChef
//
//  Created by b1tchacked on 19/01/14.
//  Copyright (c) 2014 b1tchacked. All rights reserved.
//

#include <iostream>
#include <cstdio>
#include <fstream>
#include <string>
//STD to Files
#ifndef ONLINE_JUDGE
//FILE *fo = freopen("input.txt","r",stdin);
//FILE *fw = freopen("output.txt","w",stdout);
#endif

using namespace std;

int x[1000];
int y[1000];
string result="";
int modulusCust ( int a )
{
    if ( a > 0 )
        return a;
    else
        return -a;
}
void shift ( int l , int r , int l1 , int r1 )
{
    bool left = false , right = false , inside = false , outside = false;
    if ( r1 == r && l1 == l )
        return;
    if ( r1 >= r && l1 >= l )
        right = true;
    else if ( r1 <= r && l1 <= l )
        left = true;
    else if ( r1 >=r && l1 <= l )
        inside = true;
    else
        outside = true;
    if ( right )
    {
        //Print lexicographical order
        while ( l < r-1 && l < l1 )
        {
            result += "L+";
            l++;
        }
        while ( r < r1 )
        {
            result += "R+";
            if ( l < l1 )
            {
                result += "L+";
                l++;
            }
            r++;
        }
    }
    else if ( left )
    {
        while ( l > l1 )
        {
            result += "L-";
            l--;
        }
        while ( r > r1 )
        {
            result += "R-";
            r--;
        }
    }
    else if ( inside )
    {
        while ( l > l1 )
        {
            result += "L-";
            l--;
        }
        while ( r < r1 )
        {
            result += "R+";
            r++;
        }
    }
    else
    {
        while ( l < l1 )
        {
            result += "L+";
            l++;
        }
        while ( r > r1 )
        {
            result += "R-";
            r--;
        }
    }
}
int main()
{
    int T;
    //cin >> T;
    scanf("%d",&T);
    
    int noOfOps = 0;
    while ( T-- )
    {
        int N;
        //cin >> N;
        scanf("%d",&N);
        
        for ( int i=0; i<N; i++)    scanf("%d %d",&x[i],&y[i]);
        for ( int i=0; i<N-1; i++)  noOfOps += modulusCust(x[i+1]-x[i]) + modulusCust(y[i+1]-y[i]);
           
        printf("%d\n",noOfOps);
        //cout << noOfOps<<endl;
        noOfOps = 0;
        result  = "";
        for ( int i=0; i<N-1; i++)
            shift ( x[i],y[i] , x[i+1],y[i+1] );
        
        printf("%s\n",result.c_str());
    }
    return 0;
}