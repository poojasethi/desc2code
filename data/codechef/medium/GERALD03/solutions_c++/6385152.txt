/**
 	My standard template
 	Name: Shivam Mishra
 	handle: shivam217

 **/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

const int INF = INT_MAX;
const int MAX = 1000;
const int MOD = 1e9 + 7;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

LL power(LL b,LL e)
{
	if(b==0 && e==0) return 1;
	if(b==0 && e>1)  return 0;	
	if(b>0 && e==0) return 1;
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  r %= MOD; }
		e >>= 1; b = b*b; b %= MOD;
		
	}
return r;
}

LL gcd(LL a, LL b) {  if(b==0) return a;  else return gcd(b,a%b);  }

int seg[MAX][2];

int main()
{

int test = 1;

INT(test);  //remove this line

while(test--)
{
	int n; INT(n);

	FOR(i,0,n)
	{
		int l,r;
		INT(l); INT(r);
	
		seg[i][0] = l;
		seg[i][1] = r;
	}	

	int ans=0;

	FOR(i,1,n)
	{
		ans += abs(seg[i][0] - seg[i-1][0]) + abs(seg[i][1]-seg[i-1][1]);
	}

	PINT(ans);


	FOR(i,1,n)
	{	
		
		int l1 = seg[i-1][0];
		int r1 = seg[i-1][1];
		int l2 = seg[i][0];
		int r2 = seg[i][1];


		//cout<<" i = "<<i<<endl;
		//cout<<" l2 = "<<l2<<" r2 = "<<r2<<endl;
		

		while(!(l1==l2 && r1==r2))
		{
			if(l2>l1 && r1-l1!=1)
			{
				++l1;
				//anss += "L+";

				printf("L+");
			}
			else if(l1>l2)
			{
				--l1;
				//anss += "L-";
				 printf("L-");
			}
			else if(r2>r1)
			{
				r1++;
				//anss += "R+";
				printf("R+");
			}
			else if(r2<r1 && r1-l1!=1)
			{
				--r1;
				//anss += "R-";
				printf("R-");
			}

		}
		
		assert(l1==l2 && r1==r2);
		

	}

	printf("\n");
	

	
}

//remove testcase line

return 0;
}

