#include <bits/stdc++.h>
 
#define MOD 1000000007
 
using namespace std;
typedef long long int ll;
 
inline ll fastmod (ll x,ll mod)
{
    if (x<mod)
        return x;
    else
        return x%mod;
}   
  
inline ll readll()
{
    register int c = getchar_unlocked();
    ll x = 0;
	for(;(c<48 || c>57);c = getchar_unlocked());
	for(;c>47 && c<58;c = getchar_unlocked()) {x = (x<<1) + (x<<3) + c - 48;}
	return x;
}
 
int *dp[24];

int main()
{
    ll *A;
    ll N,K,Q,a,b,c,d,e,f,r,s,t,m,L1,La,Lc,Lm,D1,Da,Dc,Dm,L,R,tm,sum,pro;
    sum=0;
    pro=1;
    N=readll();
    K=readll();
    Q=readll();
    A = (ll*)(malloc((N+1)*sizeof(ll)));    
    a=readll();
    b=readll();
    c=readll();
    d=readll();
    e=readll();
    f=readll();
    r=readll();
    s=readll();
    t=readll();
    m=readll();
    A[0]=readll();
    L1=readll();
    La=readll();
    Lc=readll();
    Lm=readll();
    D1=readll();
    Da=readll();
    Dc=readll();
    Dm=readll();
    
	int p=t;

    for (int x=2;x<=N;x++)
    {
		p=fastmod(p*t,s);
        if (p<=r)
        {
            A[x-1]=fastmod(fastmod(fastmod(a*A[x-2],m)*A[x-2],m) + fastmod(b*A[x-2],m) + c, m);
        }
        else
        {
            A[x-1]=fastmod(fastmod(fastmod(d*A[x-2],m)*A[x-2],m) + fastmod(e*A[x-2],m) + f, m);
        }
    }
 
    for (int i=0;i<24;i++)
    {
        dp[i] = (int*)malloc((N+5)*sizeof(int));
        if (dp[i]==NULL)
        {
            printf("problem with DP allocation!!!!");
            exit(1);
        }
    }
    for(int i=0;i<N;i++) dp[0][i]=A[i];
     
    ll _t;
    for (int j=1;(1<<j)<=N;j++)
    {
        _t = (1<<(j-1));
        for (int i=0;i<N;i++)
        {
            if (dp[j-1][i]<dp[j-1][i+_t])
                dp[j][i]=dp[j-1][i];
            else
                dp[j][i]=dp[j-1][i+_t];
        }
    }
    ll k,tk;
    for (int i=0;i<Q;i++)
    {
        L1 = fastmod(fastmod(La*L1,Lm) + Lc,Lm);
        D1 = fastmod(fastmod(Da*D1,Dm) + Dc,Dm);
        L = L1 + 1;
        
        p=(L+K-1+D1);
        R = (p)<(N)?(p):(N);       
        L--; R--;
        
        k = 31-__builtin_clz(R-L+1);
        tk = 1<<k;
        if (dp[k][L]<dp[k][R-tk+1])
            tm = dp[k][L];
        else
            tm = dp[k][R-tk+1];
 
        sum+=tm;
        pro = fastmod(pro*tm,MOD);
    }
    printf("%lld\n%lld\n",sum,pro);
} 
 
