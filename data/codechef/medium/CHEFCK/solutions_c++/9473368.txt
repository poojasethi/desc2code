    #include <bits/stdc++.h>
    using namespace std;
    const int N = 1e7 + 5;
    const int mod = 1e9 + 7;
    int a, b, c, d, e, f, r, s, t, m;
    int L1, La, Lc, Lm, D1, Da, Dc, Dm;
    int A[N];
    long long mini[N];
    int n , k , q;
    inline long long mul(long long x , long long y, long long md){
        x = (x * y) % md;
        return x;
      //  return ( (x % md) * (y % md)) % md;
    }
    inline long long add(long long x , long long y, long long md){
        long long ret = x;
        ret += y;
        if(ret >= md) ret -= md;
        return ret;
    }
    inline void presolve(){
        list < int > increasingList;
        for(int i = 0; i < n; ++i){
            if(i >= k) mini[i - k] = increasingList.front();
            while(!(increasingList.empty()) && increasingList.back() > A[i]) increasingList.pop_back();
            increasingList.push_back(A[i]);
            if(i >= k && A[i - k] == increasingList.front()) increasingList.pop_front();
        }
        long long mn = 1e10;
        for(int i = n - k; i < n; ++i) mn = min(mn , 1LL * A[i]);
        for(int i = n - k; i < n; ++i) mini[i] = mn;
    }

    inline long long queryO_1(int l , int r){
        return (min(mini[l] , mini[r - k + 1]));
    }
    int main(){
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cin >> n >> k >> q;
        cin >> a >> b >> c >> d >> e >> f >> r >> s >> t >> m >> A[0];
        cin >> L1 >> La >> Lc >> Lm >> D1 >> Da >> Dc >> Dm;
        long long cur = t;
        for(int i = 1; i < n; ++i){
            cur = mul(cur , t , s);
            long long acoeff = mul(A[i - 1] , A[i - 1] , m);
            if(cur <= r){
                A[i] = add(add(mul(a , acoeff , m) , mul(b , A[i - 1] , m), m) , c , m);
            }else{
                A[i] = add(add(mul(d , acoeff , m) , mul(e , A[i - 1] , m), m) , f , m);
            }
        }
        // building of segment tree for A[0 .. n - 1]
        //build(1 , 0 , n - 1);
        // generation of Q dishes
        presolve();
        long long sum = 0LL;
        long long prod = 1LL;
        int l , r;
        for(int i = 0; i < q; ++i){
            L1 = add(mul(La , L1 , Lm) , Lc , Lm);
            D1 = add(mul(Da , D1 , Dm) , Dc , Dm);
            l = L1 + 1;
            r = min(l + k - 1 + D1 , n);
            long long ans = queryO_1(l - 1, r - 1);
            sum += ans;
            prod = mul(prod , ans , mod);
        }
        cout << sum << " " << prod << endl;
        return 0;
    }

