#include<bits/stdc++.h>
using namespace std;
int main()
{
	long long t;
	scanf("%lld",&t);
	while(t--)
	{
		long long n,i, input[50000];
		long long max2;
		long long rightmax[50000];
		long long leftmin[50000];
		long long findk1[50000];
		long long max1;		
		long long rightmin[50000];
		long long leftmax[50000];
		long long findk2[50000]; //for a given j; k>=j+1 such that sum(k,l) is max. these findarrays end at n-1 as maximum possible    							value of j can be n-1
		scanf("%lld",&n);
		for(i=1;i<=n;i++)
		{
			scanf("%lld",&input[i]);
		}
		//calculating rightmax array for case 1 when sum(i,j) > sum(k,l)
		//
		rightmax[1] = input[1];
		for(i=2;i<=n;i++)
		{
			if(rightmax[i-1]<=0)
			{
				rightmax[i] = input[i];
			}
			else
			{
				rightmax[i] = rightmax[i-1] + input[i];
			}
		}
		//calculating leftmin array
		leftmin[n] = input[n];
		for(i=n-1;i>=1;i--)
		{
			if(leftmin[i+1]<=0)
			{
				leftmin[i] = input[i] + leftmin[i+1];
			}
			else
			{
				leftmin[i] = input[i];	
			}
		}
		//calculating findk1 array that is for case 1 , for a given j , find k>=j+1 such that leftmin[k] is min
		findk1[n-1]= input[n];
		for(i=n-2;i>=1;i--)
		{
			findk1[i] = min(leftmin[i+1],findk1[i+1]);	
		}
		//
		max1 = abs(rightmax[1]-findk1[1]);
		for(i=2;i<=n-1;i++)
		{
			max1 = max(max1, abs(rightmax[i]-findk1[i]));
		}		//so max1 is maximum possible answer for case 1 .
		
		//case2
		
		rightmin[1] = input[1];
		for(i=2;i<=n;i++)
		{
			if(rightmin[i-1]<=0)
			{
				rightmin[i] = rightmin[i-1] + input[i];
			}
			else
			{
				rightmin[i] = input[i];
			}
		}
		leftmax[n] = input[n];
		for(i=n-1;i>=1;i--)
		{
			if(leftmax[i+1]>=0)
			{
				leftmax[i] = leftmax[i+1] + input[i];
			}
			else
			{
				leftmax[i] = input[i];
			}
		}	
		//	
		findk2[n-1] = input[n];
		for(i=n-2;i>=1;i--)
		{
			findk2[i] = max(leftmax[i+1],findk2[i+1]);
		}
		
		max2 = abs(rightmin[1]-findk2[1]); //
		for(i=2;i<=n-1;i++)
		{
			max2 = max(max2, abs(rightmin[i]-findk2[i])); //logic of naming array : right->j rightmin-> sum(i,j) is min.
		} 
		printf("%lld\n",max(max1,max2));
	}
 return 0;
}
