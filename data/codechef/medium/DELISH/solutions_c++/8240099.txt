#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <math.h>
#include <limits>
using namespace std;

int input()
{
    int n=0;
    char c=getchar_unlocked();
    while(c < '0' || c >'9') {c=getchar_unlocked();}
    while(c>='0' && c<='9')
    {
        n=(n<<3)+(n<<1)+c-'0';
        c=getchar_unlocked();
    }
	return n;
}

long long max_check(long long a, long long b){
	if(a > b)
		return a;
	else 
		return b;
}

long long min_check(long long a, long long b){
	if(a < b)
		return a;
	else
		return b;
}

int main(){
	int T,N;
	long long* leftmin;
	long long* leftmax;
	long long* rightmin;
	long long* rightmax;
	int* A;
	long long res, temp;
	T = input();
	while(T--){
		scanf("%d", &N);
		leftmin = new long long[N];
		leftmax = new long long[N];
		rightmin = new long long[N];
		rightmax = new long long[N];
		A = new int[N];
		for(int i = 0; i < N; i++){
			scanf("%d",&A[i]);
		}
		leftmin[0] = A[0];
		leftmax[0] = A[0];
		rightmin[N-1] = A[N-1];
		rightmax[N-1] = A[N-1];
		res = numeric_limits<long long>::min();
		for(int i = 1; i < N; i++){
			leftmin[i] = min_check(A[i], A[i]+leftmin[i-1]);
			leftmax[i] = max_check(A[i], A[i]+leftmax[i-1]);
			rightmin[N-i-1] = min_check(rightmin[N-i]+A[N-i-1], A[N-i-1]);
			rightmax[N-i-1] = max_check(rightmax[N-i]+A[N-i-1], A[N-i-1]);
		}
		for(int i = 1; i < N; i++){
			temp = max_check((leftmax[i-1]-rightmin[i]), (rightmax[i]-leftmin[i-1]));
			res = max_check(res, temp);
		}
		cout << res << endl;
		delete(rightmax);
		delete(rightmin);
		delete(leftmin);
		delete(leftmax);
		delete(A);
	}
}





