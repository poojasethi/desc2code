#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>
#include <stdlib.h>
#include <cassert>
 
using namespace std;
 
#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
#define mx 100010
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}
 
typedef struct event
 {
   int st,fin,cost;  
 }event;
 
bool comp(event a,event b)
 {
     return a.fin<b.fin;
 }
 
 
 bool upcomp(int b,event a)
  {
      return a.fin <= b;
  }
 
int main() {
 
    int test,n,dp[2005],f[2005];
    event a[2005];
    inp(test);
    while(test--)
     {
        int st,fin,cost;
        inp(n);
        assert(n<=2001);
        for(int i=1;i<=n;i++)
         {
             inp(st);inp(fin);inp(cost);
             a[i].st = st;
             a[i].fin = fin;
             a[i].cost = cost;
         }
        sort(a+1,a+n+1,comp);
        for(int i=1;i<=n;i++)
         f[i] = a[i].fin;
         for(int i=0;i<=n;i++)
         dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
			int L = 0;
			int R = i;
			while (L + 1 < R) {
				int M = (L + R) / 2;
				if (a[M].fin <= a[i].st) {
					L = M;
				} else {
					R = M;
				}
			}
			dp[i]= max(dp[i-1],dp[L]+a[i].cost);
        }
        printf("%d\n",dp[n]);
        
     }
    
    
    
    //getchar();
    //getchar();
	return 0;
} 