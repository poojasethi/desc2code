#include<stdio.h>
 
#define MAX(a,b)  (((a)>(b))?(a):(b))
 
void interchange(int * a , int * b)
{
        *a=*a+*b;
        *b=*a-*b;
        *a=*a-*b;
}
 
void interchange1(long long int * a , long long int * b)
{
        *a=*a+*b;
        *b=*a-*b;
        *a=*a-*b;
}
 
long long int solutions[2005],c[2005];
int s[2005],f[2005],p[2005];
int n;
 
long long int computeOpt(int j)
{
        if (j==0)
            return 0;
 
        if (solutions[j] != -1)
        {
            return solutions[j];
        }
 
        solutions[j] = MAX(c[j] + computeOpt(p[j]),computeOpt(j - 1));
            return solutions[j];
 
}
 
int jobsearch(int start,int high)
{
        if (high == -1)
           return -1;
 
        int low = 1;
        int best = -1;
        int mid;
        int finish;
 
        while (low <= high)
        {
 
            mid = (low + high) /2 ;
            finish = f[mid];
 
            if (finish > start)
            {
                high = mid-1;
            }
 
            else
            {
                best = mid;
                low = mid + 1;
            }
        }
 
        return best;
}
 
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int i,j;
        scanf("%d",&n);
        for(i=1;i<=n;i++)
            scanf("%d %d %lld",&s[i],&f[i],&c[i]);
 
 
      for(i=1;i<=n;i++)
        for(j=1;j<=n-i;j++)
          {
              if(f[j+1]<f[j])
                {
                    interchange(&f[j],&f[j+1]);
                    interchange(&s[j],&s[j+1]);
                    interchange1(&c[j],&c[j+1]);
                }
          }
 
        int best;
        for (i=1;i<=n;i++)
        {
            solutions[i] = -1;
            best=jobsearch(s[i],i-1);
 
            if (best != -1)
                p[i] = best;
            else
                p[i] = 0;
        }
 
 
      long long int res =computeOpt(n);
      printf("%lld\n",res);
 
 
    }
 
    return 0;
}
 