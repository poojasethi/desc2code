#include<iostream>
#define ld long int
#define lld long long int
using namespace std;
 
//IO function
inline int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
inline ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
//end
 
ld maxL=1000000001;
struct polygon
{
    ld diff_x;
    ld diff_y;
    ld index;
    ld count;
};
 
inline void merge1(polygon arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    polygon L[n1], R[n2];
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i].diff_x > R[j].diff_x&&L[i].diff_y > R[j].diff_y)
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
void mergeSort1(polygon arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        mergeSort1(arr, l, m);
        mergeSort1(arr, m+1, r);
        merge1(arr, l, m, r);
    }
}
 
inline void merge2(polygon arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    polygon L[n1], R[n2];
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i].index < R[j].index)
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort2(polygon arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        mergeSort2(arr, l, m);
        mergeSort2(arr, m+1, r);
        merge2(arr, l, m, r);
    }
}
 
int main()
{
    int T,i,j,N,M;
    ld X,Y,min_x,min_y,max_x,max_y;
    T=scan_d();
    while(T--)
    {
        N=scan_d();
        polygon P[N];
        for(i=0;i<N;i++)
        {
            M=scan_d();
            min_x=maxL;
            min_y=maxL;
            max_x=-1*maxL;
            max_y=-1*maxL;
            for(j=0;j<M;j++)
            {
                X=scan_ld();
                Y=scan_ld();
                if(X<min_x) min_x=X;
                if(Y<min_y) min_y=Y;
                if(X>max_x) max_x=X;
                if(Y>max_y) max_y=Y;
            }
            P[i].diff_x=max_x-min_x;
            P[i].diff_y=max_y-min_y;
            P[i].index=i;
        }
        mergeSort1(P,0,N-1);
        for(i=0;i<N;i++) P[i].count=N-i-1;
        mergeSort2(P,0,N-1);
        for(i=0;i<N;i++) printf("%ld ",P[i].count);
    }
    return 0;
} 