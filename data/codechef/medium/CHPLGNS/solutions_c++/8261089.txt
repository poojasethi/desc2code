#include <iostream>
 
using namespace std;
 
void merge(long long int*,int, int , int ,int *);
void mergesort(long long int *a, int low, int high,int *b);
 
int main() {
 
	long long int t,n;
	cin>>t;
	for(int j=0;j<t;j++)
	{
		cin>>n;
		int m[n];
 
		long long int area[100001]={};
		int order[100001]={};
		int out[100001]={};
 
		for(int i=0;i<n;i++)
		{
			cin>>m[i];//cout<<m[i]<<" ..... ";
 
			long long int temp;
 
			cin>>area[i];cin>>temp;
			for(int k=1;k<m[i];k++)
			{
				cin>>temp;
				if(temp>area[i])area[i]=temp;
				cin>>temp;
			}
 
		//	area[i]=max;
			order[i]=i;
		//	cout<<area[i]<<" ... "<<i<<endl;
		}
		mergesort(area,0,n-1,order);
 
		for(int i=0;i<n;i++)
		{
			out[order[i]]=i;
		}
 
		for(int i=0;i<n;i++)
		{
			cout<<out[i]<<" ";
		}
	}
 
	return 0;
}
 
 
void mergesort(long long int *a, int low, int high, int *b)
{
    int mid;
    if (low < high)
    {
        mid=(low+high)/2;
        mergesort(a,low,mid,b);
        mergesort(a,mid+1,high,b);
        merge(a,low,high,mid,b);
    }
    return;
}
void merge(long long int *a, int low, int high, int mid, int *b)
{
    int i, j, k, c[500001], d[500001];
    i = low;
    k = low;
    j = mid + 1;
    while (i <= mid && j <= high)
    {
        if (a[i] < a[j])
        {
            c[k] = a[i];
            d[k] = b[i];
            k++;
            i++;
        }
        else
        {
            c[k] = a[j];
            d[k] = b[j];
            k++;
            j++;
        }
    }
    while (i <= mid)
    {
        c[k] = a[i];
        d[k] = b[i];
        k++;
        i++;
    }
    while (j <= high)
    {
        c[k] = a[j];
        d[k] = b[j];
        k++;
        j++;
    }
    for (i = low; i < k; i++)
    {
        a[i] = c[i];
        b[i] = d[i];
    }
} 
