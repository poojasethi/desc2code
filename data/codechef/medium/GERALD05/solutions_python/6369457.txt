import sys
mod = 1000000007
def F(N, A0, A1, A2, A3):
    return A0 + A1 * N + A2 * N ** 2 + A3 * N ** 3
 
combinatorics = {(0, 0) : 1}
 
 
def factorial(N):
    return reduce(lambda x,y:x*y, range(1, N+1), 1)
    
def count_multisets(S, N):
    #thisF = lambda N:F(N, A0, A1, A2, A3)
    if S == 0:
        return 1
    if N == 0:
        return 0
    if (S, N) in ans: return ans[(S, N)]
    count = 0
    for c in xrange(S/N, -1, -1):
        multiplier = combinatorics[(Fcnt[N] + c - 1, c)]#factorial(thisF(N) + c - 1) / factorial(c) / factorial(thisF(N) - 1)
        count +=  count_multisets(S - N * c, N - 1) * multiplier
    count %= mod
    ans[(S, N)] = count
    return count
    
if __name__ == '__main__':
    input = sys.stdin.readlines()
    ntestcase = int(input[0])
    for i in range(ntestcase):
        coeff = [int(item ) for item in input[i * 2 + 1].split()]
        S = int(input[i * 2 + 2])
        thisF = lambda N:F(N, coeff[0], coeff[1], coeff[2], coeff[3])
        Fcnt = {}
        ans = {}
        for N in range(1, S+1):
            nsets = thisF(N) % mod
            Fcnt[N] = nsets
            combinatorics[(nsets, 1)] = nsets
            combinatorics[(nsets - 1, 0)] = 1
            for c in xrange(2, S/N + 1):
                combinatorics[(nsets + c - 1, c)] = combinatorics[(nsets + c - 2, c-1)] * (nsets + c - 1) / c
        print count_multisets(S, S)