mod = 1000000007
F = []
combinations = {}
meal = {}
def cook(N, S):
   if S == 0: return 1
   if N == 0: return 0
   key = (N, S)
   if key in meal: return meal[key]
   food = 0
   for rank in xrange(N, 0, -1):
      for count in xrange(S // rank, 0, -1):
         cooked = cook(rank - 1, S - (rank * count))
         if cooked: food += combinations[(F[rank] + count - 1, count)] * cooked
   food %= mod
   meal[key] = food
   return food
 
for _ in xrange(int(raw_input())):
   A0, A1, A2, A3 = map(int, raw_input().split())
   S = int(raw_input())
   F = [0]
   for N in xrange(1, S + 1):
      sets = (((A3 * N + A2) * N + A1) * N + A0) % mod
      F.append(sets)
      combinations[(sets, 1)] = sets
      for i in xrange(2, S // N + 1):
         combinations[(sets + i - 1, i)] = ((sets + i - 1) * combinations[(sets + i - 2, i - 1)]) // i
   meal = {}
   cook(S, S)
   print cook(S, S)

'''
Problem Statement

Chef studies combinatorics. He tries to group objects by their rang (a positive integer associated with each object). He also gives the formula for calculating the number of different objects with rang N as following:
 
the number of different objects with rang N = F(N) = A0 + A1 * N + A2 * N2 + A3 * N3.
 
Now Chef wants to know how many different multisets of these objects exist such that sum of rangs of the objects in the multiset equals to S. You are given the coefficients in F(N) and the target sum S. Please, find the number of different multisets modulo 1,000,000,007.
You should consider a multiset as an unordered sequence of integers. Two multisets are different if and only if there at least exists one element which occurs X times in the first multiset but Y times in the second one, where (X ≠ Y).
Input

The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. 

The first line of each test case contains four integers A0, A1, A2, A3. The second line contains an integer S.
Output

For each test case, output a single line containing a single integer - the answer to the test case modulo 1,000,000,007.
Constraints

1 ≤ T ≤ 500
1 ≤ S ≤ 100
0 ≤ Ai ≤ 1000
Sum of all S for all test cases is not greater than 500. It's guaranteed that at least one Ai is non-zero.
Example

Input:
4
1 0 0 0
1
1 0 0 0
3
0 1 0 0
2
2 3 1 4
10

Output:
1
3
3
213986343
Explanation

Example case 2. 

In the second example function looks as follows F(N) = 1. So for each rang there is a single object of the rang. To get multiset with sum of rangs equal to 3, you can pick: three objects of rang 1, or one object of rang 1 and one of rang 2, or only one object of rang 3. 

Example case 3. 

In the third example function looks as follows F(N) = N. So, you have one distinct object of rang 1, two distinct objects of rang 2, three distinct objects of rang 3 and so on. To get
multiset with sum of rangs equal to 2, you can pick: two objects of rang 1, one of objects of rang 2 (two ways).
'''
