mod = 1000000007
comb_cache = {}
def combinations(n, r):
   if r < (n // 2): r = n - r
   if (n, r) in comb_cache: return comb_cache[(n, r)]
   comb = 1
   for i in xrange(r + 1, n + 1): comb *= i
   for i in xrange(2, n - r + 1): comb /= i
   comb_cache[(n, r)] = comb % mod
   return comb

F_cache = {}
A0, A1, A2, A3 = (0, 0, 0, 0)
def F(N):
   if N not in F_cache: 
      F_cache[N] = (((A3 * N + A2) * N + A1) * N + A0) % mod
   return F_cache[N]
   
meal = {}
def cook(N, S):
   if S == 0: return 1
   if N == 0: return 0
   if (N, S) in meal: return meal[(N, S)]
   food = 0
   for rank in xrange(N, 0, -1):
      for count in xrange(S // rank, 0, -1):
         food += combinations(F(rank) + count - 1, count) * cook(rank - 1, S - (rank * count))
   food %= mod
   meal[(N, S)] = food
   return food
   
for _ in xrange(int(raw_input())):
   A0, A1, A2, A3 = map(int, raw_input().split())
   S = int(raw_input())
   F_cache = {}
   meal = {}
   print cook(S, S)
