/*

*/

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>

const int kModuloVal = 1000000007;

inline int ScanInt(void)
{
	register int retVal = 0, c;
	while ((c = getchar_unlocked()) <= ' ');
	do
    {
		retVal = (retVal << 3) + (retVal << 1) + c - '0';
	}while ((c = getchar_unlocked()) > ' ');
	return retVal;
}

int i,T,A[4],CmbCache[101][101],powcache[102],fcache[102],N,reqdRang;

inline int F(int N)
{
	long long retVal = (((((A[3] * N)%kModuloVal + A[2]) * N)%kModuloVal + A[1]) * N)%kModuloVal + A[0];
	return (int)retVal;
}

int modPow(int num, int pow)
{
	int result = 1;
	long long N = num;
	while (pow)
		if (pow&1)
        {
			result = (result * N) % kModuloVal;
			pow -= 1;
		}
		else
        {
			N = (N * N) % kModuloVal;
			pow >>= 1;
		}
	return result;
}

int Comb()
{
	if (!reqdRang)
		return 1;
	if (N > reqdRang)
		return 0;
	if (N == reqdRang)
		return fcache[N];
	if (CmbCache[N][reqdRang] >= 0)
		return CmbCache[N][reqdRang];
	N++;
	long long combCount = Comb();
	N--;
	long long distinctChoices = fcache[N];
	int takenThisLevel = 1;
    reqdRang -= N;
	for (takenThisLevel = 1; reqdRang >= 0; takenThisLevel++, reqdRang -= N)
    {
		N++;
		combCount = (combCount + (distinctChoices * Comb())%kModuloVal) % kModuloVal;
		N--;
		distinctChoices = (distinctChoices * (fcache[N] + takenThisLevel)) % kModuloVal;
		distinctChoices = (distinctChoices * powcache[takenThisLevel + 1]) % kModuloVal;
	}
	reqdRang += N*takenThisLevel;
	return (CmbCache[N][reqdRang]=(int)combCount);
}

int main(int argc, const char * argv[])
{
	for(i=1;i<=101;++i)
		powcache[i]=modPow(i,kModuloVal-2);
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d %d %d %d", &A[0], &A[1], &A[2], &A[3]);
		for (int i = 1; i <= 100; ++i)
			fcache[i] = F(i);
		memset(CmbCache, -1, sizeof(CmbCache));
		N = 1;
		scanf("%d", &reqdRang);
		printf("%d\n", Comb());
	}
    return 0;
}
