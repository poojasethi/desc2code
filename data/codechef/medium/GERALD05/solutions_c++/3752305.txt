#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

/*typedef long long int64;
typedef unsigned long long uint64;*/
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
/*template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}*/
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
#define ll long long int
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define pi(x) printf("%d",x)
#define nl printf("\n")
#define pl(x) printf("%lld",x)
#define mod 1000000007

ll A[500];

long long int repeat(ll a,ll b)
{
    long long int x=1,y=a; 
    while(b > 0)
    {
        if(b%2 == 1)
        { 
            x=(x*y)%mod;
        } 
        y = (y*y)%mod;
        b /= 2; 
    } 
    return x;
}
ll compute(int a,int b)
{
	ll sum1=1,f=1;
	for(int i=a;i>(a-b);i--)
	{
		sum1=(sum1*i)%mod;
	}
	for(int i=1;i<=b;i++)f=(f*i)%mod;
	ll r=repeat(f,mod-2);
	sum1=(sum1*r)%mod;
	return sum1;
}
int main()
{
	int T,s;
	ll dp[500][500],inp[4];
	si(T);
	while(T--)
	{
		for(int i=0;i<4;i++)sl(inp[i]);
		si(s);
		for(int i=1;i<=s;i++)
		{
			A[i]=inp[0]+(inp[1]*i)+(inp[2]*(i*i))+(inp[3]*(i*i*i));
		}
		for(int i=0;i<=s;i++)
		{
			for(int j=0;j<=s;j++)dp[i][j]=0;
		}
		for(int i=1;i<=s;i++)
		{
			for(int j=1;j<=i;j++)
			{
				for(int k=j;k<i;k+=j)
				{
					dp[i][j]=(dp[i][j]+((dp[i-k][min(j-1,i-k)]*compute((k/j)+A[j]-1,(k/j)))%mod))%mod;
				}
				if(i%j==0)dp[i][j]=(dp[i][j]+compute((i/j)+A[j]-1,(i/j)))%mod;
				dp[i][j]=(dp[i][j]+dp[i][j-1])%mod;
			}
		}//printf("%lld %lld %lld %lld\n",dp[4][1],dp[4][2],dp[4][3],dp[4][4]);
		printf("%lld\n",dp[s][s]);
	}
}