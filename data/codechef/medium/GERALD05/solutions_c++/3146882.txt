#include <iostream>
#include <cstring>
#include <algorithm>
#define M 1000000007

using namespace std;

long long a,b,c,d,s,val[102],dp[120][120],invModFact[105];;

long long modpow(long long a, long long b) 
{
    long long ans = 1;
    while(b > 0){
        if(b & 1){
            ans = (ans * a) % M;
        }
        a = (a * a) % M;
        b >>= 1;
    }
    return ans;
}
     
long long modInverse(long long a, long long m) {
    return modpow(a,m-2);
}

void pre() {
    invModFact[0] = 1;
    for ( long long i = 1; i < 105; i++ ) {
        invModFact[i] = (invModFact[i-1]*modInverse(i,M)) % M;
    }
    return;
}

long long func(long long n,long long k) {
    if ( n == 0 && k == 0 ) return 1;
    if ( n == 0 ) return 0;
    if ( k == 0 ) return 1;
    long long x = 1;
    for ( long long i = 0; i < k; ++i ) {
        x = (x*((n-i)%M)) % M;
    }
    return ((x*invModFact[k])%M);
}

long long f(long long idx, long long sum)
{
     if ( idx == s+1 ) {
          if ( sum == s ) return 1;
          return 0;
     }
     long long &ans = dp[idx][sum];
     if ( ans != -1 ) return ans;
     ans = 0;
     for ( long long i = 0;; i++ ) {
         if ( sum + i*idx <= s ) {
            ans += (func(i+val[idx]-1,i)*(f(idx+1, sum + i*idx)%M))%M;
            ans %= M;
            if ( ans < 0 ) ans += M;
         }
         else break;
     }
     return ans;
}

int main()
{
    int t,i,j;
    pre();
    ios_base::sync_with_stdio(0);
    cin >> t;
    while ( t-- ) {
          cin >> a >> b >> c >> d >> s;
          for ( i = 1; i <= s; i++ ) {
              val[i] = a + b*i + c*i*i + d*i*i*i;
          }
          memset(dp, -1 ,sizeof(dp));
          long long ans = f(1,0)%M;
          cout << ans << endl;
    }    
    return 0;
}
