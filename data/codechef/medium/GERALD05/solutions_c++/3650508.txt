#include <cassert>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <climits>
#include <cstddef>
#include <cctype>
#include <cmath>
#include <cstring>
#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <numeric>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
#include <list>
#include <string>
#include <functional>
#include <utility>
using namespace std;
typedef long long llint;
int const S = 100;
int const P = 4;
int const MOD = 1000000007;
int a[P];
int s;
int f[S + 1];
int fact[S + 1];
int fact_inv[S + 1];
int dp[S + 1][S + 1];
int add(int x, int y)
{
    return (x + y) % MOD;
}
int mult(int x, int y)
{
    return static_cast <int>(llint(x) * y % MOD);
}
int pow_(int x, int y)
{
    int ret = 1;
    while (y != 0)
    {
        if (y % 2 != 0)
        {
            ret = mult(ret, x);
        }
        x = mult(x, x);
        y /= 2;
    }
    return ret;
}
void init()
{
    fact[0] = 1;
    fact_inv[0] = pow_(fact[0], MOD - 2);
    for (int i = 1; i <= S; ++i)
    {
        fact[i] = mult(fact[i - 1], i);
        fact_inv[i] = pow_(fact[i], MOD - 2);
    }
}
int comb(int cnt, int fv)
{
    int ret = 1;
    for (int i = fv; i <= cnt + fv - 1; ++i)
    {
        ret = mult(ret, i);
    }
    ret = mult(ret, fact_inv[cnt]);
    return ret;
}
bool readin()
{
    for (int i = 0; i < P; ++i)
    {
        scanf("%d", &a[i]);
    }
    scanf("%d", &s);
    return true;
}
int eval(int n)
{
    int ret = a[P - 1];
    for (int i = P - 2; i >= 0; --i)
    {
        ret = (ret * n) + a[i];
    }
    return ret;
}
void solve()
{
    for (int i = 1; i <= s; ++i)
    {
        f[i] = eval(i);
    }
    memset(dp, 0, sizeof(dp));
    for (int j = 0; j <= s; ++j)
    {
        dp[0][j] = 1;
    }
    for (int i = 1; i <= s; ++i)
    {
        for (int j = 1; j <= i; ++j)
        {
            if (f[j] == 0)
            {
                continue;
            }
            int k = i - j;
            int cnt = 1;
            while (k >= 0)
            {
                dp[i][j] = add(dp[i][j],
                        mult(dp[k][j - 1], comb(cnt, f[j])));
                k -= j;
                ++cnt;
            }
        }
        partial_sum(dp[i], dp[i] + (s + 1), dp[i], add);
    }
    printf("%d\n", dp[s][s]);
}
int main()
{
    int tc;
    scanf("%d", &tc);
    init();
    while (tc--)
    {
        readin();
        solve();
    }
    return 0;
}
