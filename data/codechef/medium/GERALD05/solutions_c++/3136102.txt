#include<algorithm>
#include<iostream>
#include<cassert>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<sstream>
#include<string>
#include<ctime>
#include<deque>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<vector>	
using namespace std;
 
typedef pair<int, int> pii;
typedef long long LL;
#define MOD 1000000007
 
int rang[101];
LL dp[100][101];
LL inv[102];
 
LL fpow(LL A, LL B) {
	LL C = 1;
	while (B > 0) {
		if ((B&1) == 1)
			C = (C*A)%MOD;
		A = (A*A)%MOD;
		B >>= 1;
	}
	return C;
}
 
void precompute(void) {
	for (LL i = 1; i <= 101; i++)
		inv[i] = fpow(i, MOD-2);
}
 
LL runDP(int i, int S) {
	if (S == 0)
		return 1;
	if (i+1 > S)
		return 0;
	if (dp[i][S] != -1)
		return dp[i][S];
	LL ans = runDP(i+1, S);
	if (i+1 <= S) {
		int maxPos = S/(i+1);
		LL choose = rang[i+1]%MOD;
		for (int j = 1; j <= maxPos; j++) {
			ans = (ans+(choose*runDP(i+1, S-j*(i+1)))%MOD)%MOD;
			choose = (choose*(LL)(rang[i+1]+j))%MOD;
			choose = (choose*inv[j+1])%MOD;
		}
	}
	dp[i][S] = ans;
	return ans;
}
 
int main() {
	precompute();
	int T;
	scanf("%d", &T);
	while (T--) {
		int A0, A1, A2, A3;
		scanf("%d %d %d %d", &A0, &A1, &A2, &A3);
		int S;
		scanf("%d", &S);
		for (LL i = 1; i <= 100; i++)
			rang[i] = A0+(A1+(A2+A3*i)*i)*i;
		memset(dp, -1, sizeof dp);
		printf("%d\n", (int)runDP(0, S));
	}
	return 0;
} 