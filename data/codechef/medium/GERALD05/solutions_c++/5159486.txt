#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
 
#define MOD 1000000007
 
using namespace std;
 
long long getPow(long long a, long long b) {
    if ( b == 0 ) return 1;
    long long x = getPow(a, b / 2) % MOD;
    x = (x * x) % MOD;
    if (b & 1) x = (x * a) % MOD;
    return x;
}
 
vector<long long> num_obj;
long long getComb(long long N, long long R) {
    if (N < R) return 0;
    if (R > N - R) R = N - R;
    if (R == 0) return 1;
    long t = (N * getComb(N - 1, R - 1)) % MOD;
    long long Rinv = getPow(R, MOD - 2);
    return (t * Rinv) % MOD;
}
 
long long mem[105][105];
long long getVal(int S, int from) {
    long long &ans = mem[S][from];
    if ( S == 0 ) ans = 1;
    else if (from > S) ans = 0;
    else if (ans == -1) {
        ans = 0;
        int used = -1;
        while (from * used <= S && S - from * used >= from) {
            used ++;
            long long next_comp = getVal(S - from * used, from + 1);
            long long current_choosing = getComb(used + num_obj[from] - 1, used);
            ans = (ans + (next_comp * current_choosing) % MOD) % MOD;
        }
    }
    return ans;
}
 
int main() {
    int T;
    scanf("%d", &T);
    while(T--) {
        memset(mem, -1, sizeof(mem));
        int A[4];
        for (int i = 0 ; i < 4; ++i) scanf("%d", &A[i]);
        int S; scanf("%d", &S);
        num_obj.clear();
        num_obj.push_back(0);
        for (int i = 0; i < S; i++) {
            long long t = i+1ll;
            num_obj.push_back(A[0] + A[1]*t + A[2]*t*t + A[3] * t * t * t);
        }
        cout << getVal(S, 1) << endl;
    }
}
  