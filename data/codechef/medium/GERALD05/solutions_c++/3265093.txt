//#undef _GLIBCXX_DEBUG

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <valarray>
#include <vector>

using namespace std;

#define foreach(iter,cont) for(typeof((cont).begin()) iter = (cont).begin(); iter != (cont).end(); ++iter)
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define inf 1000000008
#define eps 1.0e-10L
#define divisible(a, b) (((a) / (b)) * (b) == (a))
static const long long p = 1000000007;
__attribute__((unused)) static bool eq(long double a, long double b)  { return (a == b ? true : (a * b == 0 ? abs(a - b) < eps : abs(a - b) / (abs(a) + abs(b)) < eps));  }
__attribute__((unused)) static long long modp(long long n, long long m) { long long r = n % m; return r >= 0 ? r : r + m; }
__attribute__((unused)) static long long gcd(long long a, long long b) { return (a < 0 ? gcd(-a, b) : (b < 0 ? gcd(a, -b) : (!a && !b ? 1 : (b ? gcd(b, a % b) : a)))); }
template<class T> static int len(const T& cont) { return (int) cont.size(); }

// BEGIN CUT HERE
template<class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) { return os << "(" << p.first << ", " << p.second << ")"; }
template<class T> ostream &operator<<(ostream& os, const vector<T> &vec) { os << "[ "; for(size_t i = 0; i < vec.size(); i++) { os << vec[i]; if(i != vec.size() - 1) { os << ", "; } } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const list<T> &l) { os << "[ "; bool first = true; for(typename list<T>::const_iterator lstIt = l.begin(); lstIt != l.end(); ++lstIt) { if(!first) { os << ", "; } first = false; os << *lstIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const deque<T> &d) { os << "[ "; bool first = true; for(typename deque<T>::const_iterator dIt = d.begin(); dIt != d.end(); ++dIt) { if(!first) { os << ", "; } first = false; os << *dIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const vector<vector<T> > &mat) { for(size_t i = 0; i < mat.size(); i++) { if(i) os << endl; os << mat[i]; } return os; }
template<class T> ostream &operator<<(ostream &os, const set<T> &s) { os << "{ "; bool first = true; for(typename set<T>::const_iterator setIt = s.begin(); setIt != s.end(); ++setIt) { if(!first) { os << ", "; } first = false; os << *setIt; } return os << " }"; }
template<class T, class U> ostream &operator<<(ostream &os, const map<T, U> &m) { os << "{ "; bool first = true; for(typename map<T, U>::const_iterator mapIt = m.begin(); mapIt != m.end(); ++mapIt) { if(!first) { os << ", "; } first = false; os << mapIt->first << " = " << mapIt->second; } return os << " }"; }
enum CONSOLE_FG { FG_BLACK, FG_RED, FG_GREEN, FG_YELLOW, FG_BLUE, FG_MAGENTA, FG_CYAN, FG_WHITE };
enum CONSOLE_STYLE { STYLE_NONE, STYLE_BOLD };
ostream& operator<<(ostream &os, CONSOLE_FG color) { return os << "\x1b[" << ((int) color + 30) << "m"; }
ostream& operator<<(ostream &os, CONSOLE_STYLE style) { return os << "\x1b[" << (style == STYLE_NONE ? 0 : 1) << "m"; }
// END CUT HERE

pair<long long, long long> euclid(long long a, long long b) {
	long long xSign = (a < 0 ? -1 : 1);
	long long ySign = (b < 0 ? -1 : 1);
	
	a = abs(a);
	b = abs(b);
	
	long long x = 0;
	long long y = 1;
	long long prevX = 1;
	long long prevY = 0;
	while(b) {
		long long q = a / b;
		long long tmp = a;
		a = b;
		b = (tmp % b);
		
		tmp = x;
		x = prevX - q * x;
		prevX = tmp;
		
		tmp = y;
		y = prevY - q * y;
		prevY = tmp;
	}
	
	return make_pair(prevX * xSign, prevY * ySign);
}

long long modInverse(long long a, long long m) {
	return modp(euclid(a, m).first, m);
}

long long modDiv(long long a, long long b, long long m) {
	return ((a * modInverse(b, m)) % m);
}

long long bincoeff(int n, int k) {
	if(n < 0 || k < 0) return 0;	   
	if(k > n) return 0;
	
	k = min(k, n - k);
	
	long long numer = 1;
	long long denom = 1;
	while(n >= 1 && k >= 1) {
		numer = numer * (long long) n % p;
		denom = denom * (long long) k % p;
		n--;
		k--;
	}
	
	return modp(numer * modInverse(denom, p), p);
}

int t, s, a0, a1, a2, a3;
long long numWays[101], rang[101];

int main(__attribute__((unused)) int argc, __attribute__((unused)) char **argv) {
	scanf("%d", &t);
	while(t--) {
		scanf("%d %d %d %d %d", &a0, &a1, &a2, &a3, &s);

		for(int i = 1; i <= s; i++) {
			rang[i] = a0 + a1 * i + a2 * i * i + a3 * i * i * i;
			numWays[i] = 0;
#ifdef DEBUG
			cout << i << ": " << rang[i] << endl;
#endif
		}

		numWays[0] = 1;
		for(int val = s; val >= 1; val--) {
			for(int start = s; start >= 0; start--) {
				for(int cnt = s; cnt >= 1; cnt--) {
					if(start + cnt * val <= s && numWays[start]) {
#ifdef DEBUG
						cout << "From " << start << " = " << numWays[start] << ", can pick "
						     << cnt << " of " << val << " with " << rang[val] << " rang in "
						     << bincoeff(cnt + rang[val] - 1, cnt) << " ways to make "
						     << start + val * cnt << ": " << numWays[start + val * cnt] 
						     << " -> " << (numWays[start + val * cnt] + 
						                   bincoeff(cnt + rang[val] - 1, cnt) * numWays[start] % p) % p << endl;
#endif
						numWays[start + val * cnt] = 
							modp(numWays[start + val * cnt] + 
							     bincoeff(cnt + rang[val] - 1, cnt) * numWays[start] % p, p);
					}
				}
			}
		}

		printf("%lld\n", numWays[s]);
	}	

	return 0;
}
