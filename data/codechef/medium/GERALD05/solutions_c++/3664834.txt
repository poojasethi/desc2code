#include <bits/stdc++.h>
using namespace std;

const long long mod = 1000000007;

long long pow(long long a,long long b)
{
    long long ans = 1;
    a %= mod;
    while(b) {
        if(b & 1) ans = ans * a % mod;
        a = a * a % mod;
        b >>= 1;
    }
    return ans;
}

long long rev[110];
long long dp[110][110],f[110][110];

long long com(long long n,long long m)
{
    long long ans = 1;
    for(int i = 1; i <= m; i ++) {
        ans = ans * (n - m + 1) % mod;
    }
    ans = ans * rev[m] % mod;
    return ans;
}

void solve()
{
    memset(dp,0,sizeof(dp));
    int a0,a1,a2,a3;
    int n;
    scanf("%d%d%d%d%d",&a0,&a1,&a2,&a3,&n);
    dp[0][0] = 1;
    for(int i = 1; i <= n; i ++) {
        int tot = a0 + a1 * i + a2 * i * i + a3 * i * i * i;
        int m = n / i;
        for(int j = 0; j <= m; j ++)
            for(int k = 0; k <= m && k <= tot; k ++)
                f[j][k] = 0;
        f[0][0] = 1;
        for(int j = 1; j <= m; j ++)
            for(int k = 1; k <= j && k <= tot; k ++)
                f[j][k] = (f[j - 1][k] + f[j - 1][k - 1] * (tot - (k - 1))) % mod;
        for(int j = 1; j <= m; j ++)
            for(int k = 1; k <= m && k <= tot; k ++)
                f[j][k] = (f[j][k] * rev[k] + f[j][k - 1]) % mod;
        for(int j = 0; j <= n; j ++) {
            int x;
            for(int k = 0; i * k <= j; k ++) {
                if(!k) x = 1;
                else x = f[k][min(m,tot)];
                dp[i][j] = (dp[i][j] + x * dp[i - 1][j - i * k]) % mod;
            }
        }
    }
    cout << dp[n][n] << endl;
}

int main()
{
    rev[0] = rev[1] = 1;
    for(long long i = 2; i < 110; i ++) rev[i] = rev[i - 1] * pow(i,mod - 2) % mod;
    int t;
    scanf("%d",&t);
    while(t --) solve();
    return 0;
}
    
