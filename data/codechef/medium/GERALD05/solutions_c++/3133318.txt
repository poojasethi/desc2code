//
//  main.cpp
//  Combinatorics
//
//  Created by Antarpreet Singh on 25/12/13.
//  Copyright (c) 2013 Antarpreet Singh. All rights reserved.
//

#include <cstdio>
#include <cstdlib>
#include <cstring>

const int kModuloVal = 1000000007;

inline int ScanInt(void) {
	register int retVal = 0, c;
	
	while ((c = getchar_unlocked()) <= ' ');
	
	do {
		retVal = (retVal << 3) + (retVal << 1) + c - '0';
	} while ((c = getchar_unlocked()) > ' ');
	
	return retVal;
}

int A[4];
int CmbCache[101][101];

inline int F(int N) {
	long long retVal = (((((A[3] * N)%kModuloVal + A[2]) * N)%kModuloVal + A[1]) * N)%kModuloVal + A[0];
	
	return (int)retVal;
}

static int powcache[101] = {0};
int modInv(int num) {
	if (powcache[num] > 0)
		return powcache[num];
	
	int pow = kModuloVal - 2;
	int result = 1;
	long long N = num;

	while (pow) {
		if (pow&1) {
			result = (result * N) % kModuloVal;
			pow -= 1;
		}
		else {
			N = (N * N) % kModuloVal;
			pow >>= 1;
		}
	}
	return powcache[num] = result;
}
int reqdRang; // Making it global to reduce stack requirement for recursive calls
int Comb(int N) {
	if (N == 0) {
		return reqdRang > 0?0 : 1;
	}
	if (reqdRang <= 0) {
		return reqdRang == 0? 1 : 0;
	}
	if (CmbCache[N][reqdRang] >= 0) {
		return CmbCache[N][reqdRang];
	}

	long long combCount = Comb(N - 1); // Initialized to no rang selected here
	int fVal = F(N);
	long long distinctChoices = fVal;
	int takenThisLevel;
	
	reqdRang -= N;
	for (takenThisLevel = 1; reqdRang >= 0; takenThisLevel++, reqdRang -= N) {
		combCount = (combCount + (distinctChoices * Comb(N - 1))%kModuloVal) % kModuloVal;
		distinctChoices = (distinctChoices * (fVal + takenThisLevel)) % kModuloVal;
		distinctChoices = (distinctChoices * modInv(takenThisLevel + 1)) % kModuloVal;
	}
	reqdRang += N * takenThisLevel;

	return (CmbCache[N][reqdRang] = combCount%kModuloVal);
}

int main(int argc, const char * argv[])
{
	int T = ScanInt();
	
	while (T --> 0) {
		// Read four params
		A[0] = ScanInt();
		A[1] = ScanInt();
		A[2] = ScanInt();
		A[3] = ScanInt();

		memset(CmbCache, -1, sizeof(CmbCache));

		reqdRang = ScanInt();

		printf("%d\n", Comb(reqdRang));
	}
    return 0;
}

