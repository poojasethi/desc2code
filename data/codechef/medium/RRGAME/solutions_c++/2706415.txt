#include <iostream>
#include <list>
#include <fstream>
#include <cmath>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <deque>
#include <map>
#include <complex>
#include <ctime>
#include <cctype>
#include <iomanip>
#include <sstream>

using namespace std;

#define FORALL(i,a,b) for(int i=(a);i<=(b);++i)
#define FOR(i,n) for(int i=0;i<(n);++i)
#define FORB(i,a,b) for(int i=(a);i>=(b);--i)

typedef long long ll;
typedef long double ld;
typedef complex<ld> vec;

typedef pair<int,int> pii;
typedef map<int,int> mii;

#define pb push_back
#define mp make_pair

#define MAXN 100010
ll A[MAXN];
ll D[MAXN];

ll odds(ll a, ll b) {
	if (a==0) return (b+1)/2;
	else return odds(0,b) - odds(0,a-1);
}

ll evens(ll a, ll b) {
	if (a==0) return (b+2)/2;
	else return evens(0,b) - evens(0,a-1);
}

int main() {
	int N;
	ll M,K;
	cin >> N >> M >> K;
	ll y;
	FOR(i,N) scanf("%Ld",&y), A[i] =y;
	FOR(i,N) D[i] = (M-A[i])/K + 1;
	sort(D,D+N);
	reverse(D,D+N);
	
	ll s = 0;
	FOR(i,N) s += D[i];
		
	ll ans = 0;
	// decrease d1
	if (D[0] <= (s-D[0])){
		ll x = min((s-D[0])-D[0],D[1]);
		if (s%2) ans = max(ans,odds(0,x));
		else ans = max(ans,evens(0,x));
	}
	
	{
		ll low = max(0ll,D[0] -(s-D[0]));
		if (low <= D[0]-D[1]) {
			ll sumd1 = s-(D[0]-D[1]);
			ll x = min(D[1],sumd1-D[1]);
			assert(x >= 0);
			x += (D[0]-D[1]);
			
			ll high = x;
			if (s%2) ans = max(ans,odds(low,high));
			else ans = max(ans,evens(low,high));
		}
	}
	
	cout << ans%(1000000007) << endl;
	return 0;
}











