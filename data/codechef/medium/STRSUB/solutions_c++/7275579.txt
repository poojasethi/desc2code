#include<cstdio>
#include<vector>
#include<cstring>
using namespace std;
char strr[101000];
int a[101000];
int b[101000];
long long tree[4 * 101000];
long long lazy[4 * 101000];
long long ans[101000];
vector<pair<int, int> > q[101000];
int s, d;
void adaug(int nod, int l, int r){
	if (lazy[nod] != 0){
		tree[nod] += (r - l + 1)*lazy[nod];
		if (l != r) lazy[nod<<1] += lazy[nod],lazy[(nod<<1) + 1] += lazy[nod];
		lazy[nod] = 0;
	}
	if (s > r || d<l || l>r)return;
	if (l >= s && r <= d){
		tree[nod] += (r - l + 1);
		if (l != r)lazy[nod<<1]++,lazy[(nod<<1) + 1]++;
		return;
	}
	int m = (l + r) >> 1;
	adaug(nod<<1, l, m);
	adaug((nod<<1) + 1, m + 1, r);
	tree[nod] = tree[nod<<1] + tree[(nod<<1) + 1];
}
long long suma(int nod, int l, int r){
	if (d < l || s > r)return 0;
	if (lazy[nod] != 0){
		tree[nod] += (r - l + 1)*lazy[nod];
		if (l != r) lazy[nod<<1] += lazy[nod],lazy[(nod<<1) + 1] += lazy[nod];
		lazy[nod] = 0;
	}
	if (s <= l && d >= r) return tree[nod];
	int m = (l + r)>>1;
	return suma(nod<<1, l, m) + suma((nod<<1) + 1, m + 1, r);
}
int main(){
	int t, i, j, k, n, m, g, x, y, zero, unu; char c;
	scanf("%d", &t);
	for (; t; --t){
		scanf("%d%d%d", &n, &k, &g); scanf("%c", &c); gets(strr);
		for (i = 0; i <= 4 * n; ++i) tree[i] = 0,lazy[i] = 0;
		for (i = 0; i < n; ++i) a[i+1] = int(strr[i] - '0');
		for (i = 1; i <= g; ++i){
			scanf("%d%d", &x, &y);
			q[x].push_back(make_pair(y, i));
		}
		zero = 0; unu = 0; j = n;
		for (i = n; i >= 1; --i){
			b[i] = 0;
			if (a[i] == 0) zero++;
			else unu++;
			while ((zero>k) || (unu>k)){
				if (a[j] == 0) zero--;
				else unu--;
				j--;
			}
			b[i] = j;
		}
		for (i = n; i >= 1; --i){
			s = i; d = b[i];
			adaug(1, 1, n);
			for (j = 0; j < q[i].size(); ++j){
				s = i; d = q[i][j].first;
				ans[q[i][j].second] = suma(1, 1, n);
			}
		}
		for (i = 1; i <= g; ++i) printf("%lld\n", ans[i]);
		for(i=0; i<=n; ++i) q[i].clear();
	}
}
