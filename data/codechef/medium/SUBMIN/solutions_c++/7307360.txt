#include<bits/stdc++.h>
using namespace std;
long coun[1000005];
long countKMin(long arr[],int n,int k,int l)
{
    deque<int>  Qi(k);
    long coun1=0;
    /* Process first k (or first window) elements of array */
    int i;
    for (i = 0; i < k; ++i)
    {
        // For very element, the previous smaller elements are useless so
        // remove them from Qi
        while ( (!Qi.empty()) && arr[i] <= arr[Qi.back()])
            {
			Qi.pop_back();			
			}  // Remove from rear
 
        // Add new element at rear of queue
        Qi.push_back(i);
    }
 
    // Process rest of the elements, i.e., from arr[k] to arr[n-1]
    for ( ; i < n; ++i)
    {
        // The element at the front of the queue is the largest element of
        // previous window, so print it
       if((Qi.front())==l)
        coun1++;
 
        // Remove the elements which are out of this window
        while ( (!Qi.empty()) && Qi.front() <= i - k)
          {
   		    Qi.pop_front();  // Remove from front of queue
     }
        // Remove all elements smaller than the currently
        // being added element (remove useless elements)
        while ( (!Qi.empty()) && arr[i] <= arr[Qi.back()])
            {
            Qi.pop_back();
        }
         // Add current element at the rear of Qi
        Qi.push_back(i);
    }
      if((Qi.front())==l)
      coun1++;
      return coun1;
}
int main()
{
	int n,q;
	long k;
	long a[55];
	cin>>n;
	for(int i=0;i<n;i++)
	cin>>a[i];
	for(int i=0;i<1000005;i++)
	coun[i]=0;
	for(int i=0;i<n;i++)
	{
		for(int j=1;j<=n;j++)
		coun[a[i]]+=countKMin(a,n,j,i);
	}
	cin>>q;
	while(q--)
	{
		cin>>k;
		cout<<coun[k]<<endl;
	}
}