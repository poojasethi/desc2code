#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<sstream>
#include<limits>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include<utility>
#include<map>
#include<sstream>
 
#define gi(x) scanf("%d",&x)
#define pi(x) printf("%d",x)
#define pin(x) printf("%d\n",x)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
 
using namespace std;
 
const int lim = 15;
typedef long long LL;
typedef pair<int,int> pii;
 
int n;
 
vector<int> adjl[lim];
string s;
 
string DFS(int u, int si)
{
	
	if(si == s.size())
		return "";
	if(s[si] - 'A' != u%5)
		return "-";
	string b = "";
	stringstream ss;
	ss << u;
	string res = ss.str();
	//cout << "#" << res << endl;
	bool found = false;
	for(int i=0;i<adjl[u].size();i++)
	{	
		b =  DFS(adjl[u][i],si+1);
		//cout << b << endl;
		if(b != "-")
		{
			found = true;
			res += b;
			//cout << res << endl;
		}	
	}
	if(found)
		return res;
	else
		return "-";
}


string BFS(int u)
{	
	queue<pii> q;
	q.push(mp(u,0));
	string res="";
	while(!q.empty())
	{
		pii cusi = q.front();
		q.pop();
		int cu = cusi.fi;
		
		int csi = cusi.se;
		if(csi >= s.size())
			break;
		if(cu%5 == s[csi]-'A')
		{
			//cout << "$" << cu << endl;
			stringstream ss("");
			ss << cu;
			res += ss.str();
			for(int i=0;i<adjl[cu].size();i++)
				q.push(mp(adjl[cu][i],csi+1));
		}
	}
	if(res.size() == s.size())
		return res;
	return "-";
}
 
string walk()
{
	string res="";
	for(int i=0;i<10;i++)
	{
		res = BFS(i);
		//cout << i << " " << res<<"\n";
		if(res != "-")
			return res;
	}
	return "-1";
}
 
void fill_adjl()
{
	adjl[0].pb(1);
	adjl[0].pb(4);
	adjl[0].pb(5);
	adjl[1].pb(0);
	adjl[1].pb(2);
	adjl[1].pb(6);
	adjl[2].pb(1);
	adjl[2].pb(7);
	adjl[2].pb(3);
	adjl[3].pb(2);
	adjl[3].pb(4);
	adjl[3].pb(8);
	adjl[4].pb(3);
	adjl[4].pb(0);
	adjl[4].pb(9);
	adjl[5].pb(0);
	adjl[5].pb(7);
	adjl[5].pb(8);
	adjl[6].pb(8);
	adjl[6].pb(9);
	adjl[6].pb(1);
	adjl[7].pb(2);
	adjl[7].pb(5);
	adjl[7].pb(9);
	adjl[8].pb(3);
	adjl[8].pb(5);
	adjl[8].pb(6);
	adjl[9].pb(4);
	adjl[9].pb(6);
	adjl[9].pb(7);
}
 
int main()
{	
	fill_adjl();
	gi(n);
	for(int i=0;i<n;i++)
	{
		cin >> s;
		cout << walk() << "\n";
	}
	return 0;
} 
