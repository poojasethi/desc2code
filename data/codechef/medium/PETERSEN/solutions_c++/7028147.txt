#include <bits/stdc++.h>
#define F first
#define S second
using namespace std;
int mat[10][10];
map< char,pair<int,int> > node;
void build(int i,int j)
{	
	mat[i][j]=1;
	mat[j][i]=1;
}	
void pre()
{
	node['A']=make_pair(0,5);
	node['B']=make_pair(1,6);
	node['C']=make_pair(2,7);
	node['D']=make_pair(3,8);
	node['E']=make_pair(4,9);
	
	int i;
	memset(mat,0,sizeof(mat));
	build(0,1);
	build(0,4);
	build(2,1);
	build(2,3);
	build(4,3);
	for(i=0;i<5;i++) build(i,i+5);
	build(5,7);
	build(5,8);
	build(6,8);
	build(6,9);
	build(7,9);
}
void solve()
{
	string walk;
	cin>>walk;
	int i;
	i=0;
	string ans="";
	ans+='0'+node[walk[i]].F;
	int cur = node[walk[i]].F;
	i++;
	while(walk[i]!='\0')
	{
		if(mat[cur][node[walk[i]].F])
		{
			cur=node[walk[i]].F;
			ans+='0'+cur;
			i++;
		}
		else if(mat[cur][node[walk[i]].S])
		{
			cur=node[walk[i]].S;
			ans+='0'+cur;
			i++;
		}
		else
			break;
	}
	if(walk[i]=='\0') { cout<<ans<<endl; return;}
	
	i=0;
	 ans="";
	ans+='0'+node[walk[i]].S;
	cur = node[walk[i]].S;
	i++;
	while(walk[i]!='\0')
	{
		if(mat[cur][node[walk[i]].F])
		{
			cur=node[walk[i]].F;
			ans+='0'+cur;
			i++;
		}
		else if(mat[cur][node[walk[i]].S])
		{
			cur=node[walk[i]].S;
			ans+='0'+cur;
			i++;
		}
		else
			break;
	}
	if(walk[i]=='\0') { cout<<ans<<endl; return;}
	cout<<"-1"<<endl;
	return;


}
int main() {
	ios_base::sync_with_stdio(false);
	int t;
	cin>>t;
	pre();
	while(t--){
		solve();
	
	}
	
	return 0;
}