#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<queue>
#include<utility>
#include<cstring>
#include<cmath>
#define LL long long int
#define mod 1000000007
#define vi vector<long long int>
#define vvi vector < vector<LL> >
#define pii pair<int,int>
#define all(c) c.begin(),c.end()
#define pb push_back
#define f first
#define s second
using namespace std;
vi v[10];
char str[100005],s[15];
int arr[6][3],walk[100005],len;
queue<int> q;
bool visited[15];
void prec()
{	v[0].pb(1);v[0].pb(4);v[0].pb(5);
	v[1].pb(0);v[1].pb(2);v[1].pb(6);
	v[2].pb(1);v[2].pb(3);v[2].pb(7);
	v[3].pb(2);v[3].pb(4);v[3].pb(8);
	v[4].pb(0);v[4].pb(3);v[4].pb(9);
	v[5].pb(0);v[5].pb(7);v[5].pb(8);
	v[6].pb(1);v[6].pb(8);v[6].pb(9);
	v[7].pb(2);v[7].pb(5);v[7].pb(9);
	v[8].pb(3);v[8].pb(5);v[8].pb(6);
	v[9].pb(4);v[9].pb(6);v[9].pb(7);
	
	arr[0][0]=0;arr[0][1]=5;
	arr[1][0]=1;arr[1][1]=6;
	arr[2][0]=2;arr[2][1]=7;
	arr[3][0]=3;arr[3][1]=8;
	arr[4][0]=4;arr[4][1]=9;
	
	s[0]=s[5]='A';s[1]=s[6]='B';
	s[2]=s[7]='C';s[3]=s[8]='D';
	s[4]=s[9]='E';
}
int BFS(int src)
{	int dis=1,x,flag,i;
	while(!q.empty())
	{	x=q.front();
		//printf("x%d %d\n",x,v[x].size());
		flag=0;
		for(i=0;i<v[x].size();i++)
		{	//printf("%d  %c %c\n",visited[v[x][i]],str[dis],s[v[x][i]]);
			if(str[dis]==s[v[x][i]]&&flag==0)
			{	//printf("ver %d ",v[x][i]);
				q.push(v[x][i]);
				//visited[v[x][i]]==1;
				walk[dis]=v[x][i];
				dis++;
				flag=1;
			}
			/*else if(visited[v[x][i]]==0)
			{	visited[v[x][i]]==1;
			}*/
		}
		q.pop();
		if(flag==0)
			return 0;
		if(dis==len)
			return 1;
	}
	return 1;
}
int main()
{	int t,i,j,n,ans;
	prec();
	scanf("%d",&t);
	while(t--)
	{	scanf("\n");
		gets(str);
		len=strlen(str);
		while(!q.empty())
			q.pop();
		q.push(arr[str[0]-'A'][0]);
		walk[0]=arr[str[0]-'A'][0];
		if(len==1)
		{	printf("%d\n",walk[0]);
			continue;
		}
		ans=BFS(arr[str[0]-'A'][0]);
		//printf("ans%d",ans);
		if(ans==1)
		{	for(i=0;i<len;i++)
				printf("%d",walk[i]);
			printf("\n");	
		}
		else
		{	while(!q.empty())
				q.pop();
			memset(visited,0,sizeof(visited));
			q.push(arr[str[0]-'A'][1]);
			walk[0]=arr[str[0]-'A'][1];
			ans=BFS(arr[str[0]-'A'][1]);
			if(ans==1)
			{	for(i=0;i<len;i++)
					printf("%d",walk[i]);
				printf("\n");	
			}
		}
		if(ans==0)
				printf("-1\n");
	}
	return 0;
}
