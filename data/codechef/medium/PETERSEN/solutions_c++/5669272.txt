#include <cstdio>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <vector>
#include <limits.h>  
#include <stack>
#include <queue>
#include <list>
#include <set>
#include <deque>
#include <map>
#include <assert.h>
#include <utility>
#include <string.h>
#include <cstring>
#include <cstdlib>

#define FOR(A, B, C) for(int A = B; A < C; A++)
#define EFOR(A, B, C) for(int A = B; A <= C; A++)
#define RFOR(A, B, C) for(int A = B; A >= C; A--)
#define MAX 100003
#define SC(A) scanf("%d", &A)
#define PF(A) printf("%d\n", A)

using namespace std;

typedef long long int lint;
typedef vector<bool> VB;
typedef pair<int,int> PI;
typedef vector<int> VI;
typedef vector<lint> VLI;
typedef vector<PI> VPI;
typedef vector<VI> VVI;
typedef map<int,int> MP;

void initalizeEdgelits(VVI &edgeList) {
	edgeList[0].push_back(4); edgeList[0].push_back(5); edgeList[0].push_back(1);
	edgeList[1].push_back(0); edgeList[1].push_back(6);	edgeList[1].push_back(2);
	edgeList[2].push_back(1); edgeList[2].push_back(7);	edgeList[2].push_back(3);
	edgeList[3].push_back(2); edgeList[3].push_back(8);	edgeList[3].push_back(4);
	edgeList[4].push_back(9); edgeList[4].push_back(0);	edgeList[4].push_back(3);
	edgeList[5].push_back(0); edgeList[5].push_back(7);	edgeList[5].push_back(8);
	edgeList[6].push_back(1); edgeList[6].push_back(9);	edgeList[6].push_back(8);
	edgeList[7].push_back(2); edgeList[7].push_back(5);	edgeList[7].push_back(9);
	edgeList[8].push_back(3); edgeList[8].push_back(6); edgeList[8].push_back(5);
	edgeList[9].push_back(4); edgeList[9].push_back(6); edgeList[9].push_back(7);
}

void initalizeAlphabetIndex(VVI &A) {
	A[65].push_back(0); A[65].push_back(5);
	A[66].push_back(1); A[66].push_back(6);
	A[67].push_back(2); A[67].push_back(7);
	A[68].push_back(3); A[68].push_back(8);
	A[69].push_back(4); A[69].push_back(9);
}

int BFS(const VVI &edgeList, int source, VI &storePath, char *str, char A[], int len) {
	VB check(len, false);
	storePath.push_back(source);
	int counter = 0;
	queue<int> Q;
	Q.push(source);
	while(!Q.empty()) {
		int u = Q.front();
		Q.pop();
		check[counter] = true;
		counter += 1;
		char C = str[counter];
		int flag = 0;
		FOR(i, 0, edgeList[u].size()) {
			if(C == A[edgeList[u][i]]) {
				Q.push(edgeList[u][i]);
				storePath.push_back(edgeList[u][i]);
				flag = 1;
			}
		}
		if(check[len - 1] == true)
			return 1;
		if(!flag) {
			return 0;
		}
	} 
}

int main () {
    VVI edgeList(10), alphabetIndex(72);
    initalizeEdgelits(edgeList);
    initalizeAlphabetIndex(alphabetIndex);
    char A[] = "ABCDEABCDE"; 
    int T;
    SC(T);
    while(T--) {
    	char Str[MAX];
    	scanf("%s", Str);
    	int len = strlen(Str), flag = 0;
    	FOR(i, 0, alphabetIndex[Str[0]].size()) {
    		VI storePath;
    		if(BFS(edgeList, alphabetIndex[Str[0]][i], storePath, Str, A, len)) {
    			FOR(j, 0, storePath.size()) {
    				printf("%d", storePath[j]);
    			}
    			printf("\n");
    			flag = 1;
    			break;
    		} 
    	}
    	if(!flag) {
    		printf("-1\n");
    	}
    }
    return 0;
}
