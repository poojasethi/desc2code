#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <queue>
#include <algorithm>
#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif
#define ll long long
#define nl() printf ("\n")
#define pi(x) printf ("%d",x)
#define pl(x) printf ("%lld",x)
#define pc(x) printf ("%c",x)
#define ps(x) printf ("%s",x)
#define pb(x) push_back(x)
#define repu(i,n,step) for (;i<n;i+=step)
#define repd(i,n) for (;i>=0;i--)
using namespace std;
int readi () {
	int n=0;
	char c=gc();
	while (c<48) c=gc();
	while (c>47) {
		n=n*10+c-'0';
		c=gc();
	}
	return n;
}
ll readl () {
	ll n=0;
	char c=gc();
	while (c<48) c=gc();
	while (c>47) {
		n=n*10+c-'0';
		c=gc();
	}
	return n;
}
int edges[10][10] = {{1,4,5},{0,2,6},{1,3,7},{2,4,8},{0,3,9},{0,7,8},{1,8,9},{2,5,9},{3,5,6},{4,6,7}};
char graph[10] = {'A','B','C','D','E','A','B','C','D','E'};
queue <int> q;
int main() {
        /*int i=0,j;
        repu(i,10,1) q.push(i);
        i=0;
        repu(i,10,1) {
                cout<<q.front()<<" ";
                q.pop();*/
        string s;
        int x,i,j,k=1,len,si,t;
        t=readi();
        while (t--) {
        cin>>s;
        char ans1[100000],ans2[100000];

        len = s.length();
        k=1;
        si = s[0]-'A';
         {
                q.push(si);
                ans1[0]=si+'0';
                while (!q.empty()) {
                        x = q.front();
                        q.pop();
                        i=0;
                        j=x;
                        //cout<<s[k]<<"\t";
                        while (i<3 && k<len) {
                                if (graph[edges[j][i]]==s[k]) {
                                        q.push(edges[j][i]);
                                //        cout<<edges[j][i]<<" ";
                                        ans1[k] = edges[j][i]+'0';
                                        k++;
                                        break;
                                }
                                else i++;
                        }
                }
                ans1[k]='\0';
                if (k==len) cout<<ans1<<"\n";

                else  {
                        //while (!q.empty()) q.pop();
                        //if (q.empty()) cout<<"CASE@";
                        q.push(si+5);
                        ans2[0]=(si+5)+'0';
                        k=1;
                while (!q.empty()) {
                        x = q.front();
                        q.pop();
                        i=0;
                        j=x;
                        //cout<<x<<" "<<s[k]<<"\t";
                        while (i<3 && k<len) {
                                if (graph[edges[j][i]]==s[k]) {
                                        q.push(edges[j][i]);
                                        //cout<<edges[j][i]<<" ";
                                        ans2[k]=edges[j][i]+'0';
                                        k++;
                                        break;
                                }
                                else i++;
                        }
                }
                ans2[k]='\0';
                if (k==len)
                cout<<ans2<<endl;
                else cout<<"-1"<<endl;
                }
        }
        }
return 0;
}
