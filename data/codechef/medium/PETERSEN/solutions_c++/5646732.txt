#include<bits/stdc++.h>
#define pb push_back
#define inp(var) scanf("%d",&var)
using namespace std;

vector<int> graph[10];
char str[100008];
queue <int> q;
int arr[10][2];
int visit[11]={0};

char s[10]={'A','B','C','D','E','A','B','C','D','E'};

int walk[100001];

void mkgr()
{
	graph[0].pb(1); 	graph[0].pb(4);  graph[0].pb(5); 
	graph[1].pb(0);     graph[1].pb(2);  graph[1].pb(6); 
	graph[2].pb(3);     graph[2].pb(7);  graph[2].pb(1); 
	graph[3].pb(4); 	graph[3].pb(8);  graph[3].pb(2); 
	graph[4].pb(0);     graph[4].pb(9);  graph[4].pb(3); 
	
graph[5].pb(0); 	graph[5].pb(7); 	graph[5].pb(8); 
graph[6].pb(1); 	graph[6].pb(8);     graph[6].pb(9); 
graph[7].pb(2); 	graph[7].pb(5);     graph[7].pb(9); 
graph[8].pb(3); 	graph[8].pb(5);     graph[8].pb(6);
graph[9].pb(4); 	graph[9].pb(6);     graph[9].pb(7);  
	
	arr[0][0]=0; arr[0][1]=5;
	arr[1][0]=1; arr[1][1]=6;
	arr[2][0]=2; arr[2][1]=7;
	arr[3][0]=3; arr[3][1]=8;
	arr[4][0]=4; arr[4][1]=9;
	
}
int n;
int trav(int src)
{
	int cur=1;
	int nodes,i;
	//q.push(src);
	
	int flag=0;
	while(!q.empty())
	{
		nodes=q.front();
		flag=0;
		for(i=0;i<graph[nodes].size();i++)
		{
			if(str[cur]==s[graph[nodes][i]])
			{
				flag=1;
				walk[cur]=graph[nodes][i];
				q.push(graph[nodes][i]);
				cur++;
			}
			
			
			
			if(flag==1)
			break;
		}
		
		q.pop();
		if(flag==0)
		{
			//printf("hi\n");
			return 0;
			
			
		}
		if(cur==n)
			return 1;
		
		
	}
	return 1;
	
	
}
int main()
{
	int t,i,j,k,src;
	int flag;
	
	mkgr();
	
	scanf("%d",&t);
	
	while(t--)
	{
		while(!q.empty())
		{
			q.pop();
		}
		flag=0;
			scanf("%s",str);
			//printf("%s",str);
		n=strlen(str);
		
		src=str[0]-'A';
		
		
		q.push(arr[src][0]);
		walk[0]=arr[src][0];
		
		if(n==1)
		{
			printf("%d\n",walk[0]);
			continue;
		}
		
		
		flag=trav(arr[src][0]);
		
		
		
		if(flag==1)
		{
			for(i=0;i<n;i++)
			{
				printf("%d",walk[i]);
			}
			printf("\n");
			continue;
			
		}
		
		else
		{
			while(!q.empty())
			q.pop();
			
			//SRC=
		//	q.push(arr[src][0]);
		//walk[0]=arr[src][0];
		
			memset(walk,0,sizeof(walk));
			
			q.push(arr[src][1]);
			walk[0]=arr[src][1];
			flag=trav(arr[src][1]);
			if(flag==0)
			{
				printf("-1\n");
			}
			else
			{
				for(i=0;i<n;i++)
				{
					printf("%d",walk[i]);
				}
				printf("\n");
				
			}
			
			
			
		}
		
		
		
		
		
	
		

	
	
	}
	return 0;
	
	
}