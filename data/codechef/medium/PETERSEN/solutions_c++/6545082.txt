#include<bits/stdc++.h>
#define pii pair<int,int>
#define Min(a,b) ((a<b) ? a:b)
#define Max(a,b) ((a > b) ? a:b)
#define Swap(a,b) (a=b+a-(b=a))
#define sn(n) scanf("%d",&n)
#define schr(n) scanf("%c",&n)
#define ss(n) scanf("%s",n)
#define p(n) printf("%d",n)
#define el putchar("\n");
#define sp putchar('')
#define Fill(a,val) memset(a,val,sizeof(a))
#define pb push_back
#define INFN 123456789
#define ll long long
#define si short int
#define vi vector<int>
#define vvi vector<vvi>
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)
#define _I int
#define _D double
#define _L long long
using namespace std;
int gcd(int a,int b){
	return (!b) ? a:gcd(b,a%b);
}

char arr[102];
char s[100010];
map<char,pair<int,int> > mp,m;
_I graph[10][10];
_I path[100010];

int walk(int node){
		_I i,j,k=0;
		_I len = strlen(s);
		_I flag = 0;
		path[0] = node;
		for(i=1;i < len;i++){
				if(graph[node][s[i]-'A'] == 1){
					node = s[i]-'A';
					path[i]= node;
				}
				else if(graph[node][s[i]-'A'+5]){
					node = s[i]-'A' + 5;
					path[i] = node;
				}
				else{
					return 0;
				}
		}
		return 1;
}
_I main(){
	_I n,t;
	memset(graph,0,sizeof(graph));
	graph[0][1] = graph[1][0] = graph[0][4] = graph[4][0] = graph[0][5] = graph[5][0] = 1;
	graph[1][2] = graph[2][1] = graph[1][6] = graph[6][1] = 1;
	graph[2][3] = graph[3][2] = graph[2][7] = graph[7][2] = 1;
	graph[3][4] = graph[4][3] = graph[3][8] = graph[8][3] = 1;
	graph[4][9] = graph[9][4] = 1;
	graph[5][7] = graph[7][5] = graph[5][8] = graph[8][5] = 1;
	graph[6][8] = graph[8][6] = graph[6][9] = graph[9][6] = 1;
	graph[7][9] = graph[9][7] = 1;
	
	mp['A'] = make_pair(0,5);arr[0]='A',arr[5]='A';
	mp['B'] = make_pair(1,6);arr[1]='B',arr[6]='B';
	mp['C'] = make_pair(2,7);arr[2]='C',arr[7]='C';
	mp['D'] = make_pair(3,8);arr[3]='D',arr[8]='D';
	mp['E'] = make_pair(4,9);arr[4]='E',arr[9]='E';
	
 	cin >> t;
 	_I i;
	for(_I test = 0;test < t;test++){
		cin >> s;
		_I len = strlen(s);
		int nod = mp[s[0]].first;
		if(walk(nod) || walk(mp[s[0]].second)){
			vector<int>::iterator it;
			for(i=0; i < len;i++){
				cout << path[i] ;
			}
		}
		else{
			cout << "-1" ;
		}
		cout << endl;
	}
	return 0;
}