
/* Author:
 * Rohit Laddha */
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <stack>
#include <set>
#include <queue>
#include <limits.h>
#include <math.h>
#include <deque>
#include <list>
#include<tr1/unordered_map>
using namespace std;
using namespace std::tr1;
vector<int>charInt[5];
unordered_map<char,int>intChar;
vector<int>graph[10];
int ans[100050];

bool dfs(string s, int k, int ans[], int node){

	bool found1=false, found2=true;
	for(int i=0;i<s.size();i++){
		if(found2==false){
			break;
		}
		ans[i]=node;
		if(i==s.size()-1){
			found1=true;
			break;
		}
		found2=false;
		for(int j=0;j<graph[node].size();j++){
			if(s[i+1]==intChar[graph[node][j]]){
				found2=true;
				node=graph[node][j];
				break;
			}
		}
	}
	if(found1){
		for(int i=0;i<s.size();i++){
			cout << ans[i];
		}
		cout << endl;
	}
	return found1;

}

int main(){
	for(int i=0;i<5;i++){
		charInt[i].push_back(i);
		charInt[i].push_back(i+5);
		intChar.insert(make_pair<int,char>(i,'A'+i));
		intChar.insert(make_pair<int,char>(i+5,'A'+i));
	}

	for(int i=0;i<5;i++){
		graph[i].push_back((i+1)%5);
		graph[(i+1)%5].push_back(i);
		graph[i].push_back(i+5);
		graph[i+5].push_back(i);
	}
	for(int i=5;i<7;i++){
		graph[i].push_back(i+2);
		graph[i].push_back(i+3);
		graph[i+2].push_back(i);
		graph[i+3].push_back(i);
	}
	graph[7].push_back(9);
	graph[9].push_back(7);
	int t;
	cin >> t;
	while(t--){
		string s;
		cin >> s;
		int found=false;
		for(int i=0;i<2;i++){
			if(dfs(s, 0, ans, charInt[s[0]-'A'][i])){
				found=true;
				break;
			}
		}
		if(found==false){
			cout << "-1\n";
		}
	}

	return 0;
}
