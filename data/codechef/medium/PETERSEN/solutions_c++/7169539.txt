#include<bits/stdc++.h>
using namespace std;
class Graph {
	public :
		int V; // no of vertices;
		Graph(int v);
		vector< pair<int,char> > *adj;
		void addedge(pair<int,char>,pair<int,char>);		
		string ans(string st,int a);
};

Graph :: Graph(int x) {
	V = x;
	adj = new vector<pair<int,char> > [V];
}

void Graph :: addedge(pair<int,char> a,pair<int,char> b) {
	adj[a.first].push_back(b);
	adj[b.first].push_back(a);
}
string Graph :: ans(string st,int a) {
//	cout << a;
	string st1;
	st1 += (a+48);
	int i,j;
	for(i=1;i<st.size();i++) {
		for(j=0;j<adj[a].size();j++) {
//			cout << adj[a][j].second<<"\n";
			if(adj[a][j].second == st[i]) {
				
				a = adj[a][j].first;
				st1 += (a+48);
				break;
			}
		}
		if(j == adj[a].size())
		return "null";
	}
	return st1;
}
int main() {
	Graph g(10);
	g.addedge(make_pair(0,'A'),make_pair(5,'A'));
	g.addedge(make_pair(0,'A'),make_pair(4,'E'));
	g.addedge(make_pair(0,'A'),make_pair(1,'B'));
	g.addedge(make_pair(5,'A'),make_pair(7,'C'));
	g.addedge(make_pair(5,'A'),make_pair(8,'D'));
	g.addedge(make_pair(1,'B'),make_pair(6,'B'));
	g.addedge(make_pair(1,'B'),make_pair(2,'C'));
	g.addedge(make_pair(2,'C'),make_pair(7,'C'));
	g.addedge(make_pair(2,'C'),make_pair(3,'D'));
	g.addedge(make_pair(3,'D'),make_pair(8,'D'));
	g.addedge(make_pair(3,'D'),make_pair(4,'E'));
	g.addedge(make_pair(4,'E'),make_pair(9,'E'));
	g.addedge(make_pair(6,'B'),make_pair(9,'E'));
	g.addedge(make_pair(6,'B'),make_pair(8,'D'));
	g.addedge(make_pair(7,'C'),make_pair(9,'E'));
	int n;
	cin >> n;
	while(n--) {
		string st;
		cin >> st;
		string st1="ABCDEABCDE";
		int i;
		for(i=0;i<10;i++) {
			if(st1[i] == st[0])
			break;
		}
		if(i==10)
		cout <<"-1\n";
		else {
			string st2 = g.ans(st,i);
			i++;
			for(;i<10;i++) {
				if(st1[i] == st[0])
				break;
			}
			string st3 = g.ans(st,i);
			if(st2 =="null" && st3 =="null")
			cout << "-1\n";
			else if(st2 =="null")
			cout << st3 <<"\n";
			else if(st3 == "null")
			cout << st2 <<"\n";
			else
			cout << (st2 < st3 ? st2 :st3)<<"\n";
		}
	}
	return 0;
}