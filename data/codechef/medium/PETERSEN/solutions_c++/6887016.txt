#include <cstdio>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <utility>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <iterator>

#define MOD 1000000007
#define INF 1000000000000000000
#define PI acos(-1)

using namespace std;

int GCD (int a,int b) {
	if (b == 0) return a;
	return(a % b == 0 ? b : GCD(b,a % b));
}

long long int POW (long long int base,long long int exp) {
	long long int val;
	val = 1;
	while (exp > 0) {
		if (exp % 2 == 1) {
			val = (val * base) % MOD;
		}
		base = (base * base) % MOD;
		exp = exp / 2;
	}
	return val;
}

struct node {
	char ch;
	int id;
	vector <int> adj;
};

int n;
char s[100010];
vector <node> v(15);
string ans,str;

void init () {
	int i;
	for (i = 0; i < 5; i++) {
		v[i].ch = 'A' + i;
		v[i + 5].ch = 'A' + i;
		v[i].id = i;
		v[i + 5].id = i + 5;
		v[i].adj.push_back(i + 5);
		v[i + 5].adj.push_back(i);
	}
	v[0].adj.push_back(1);
	v[0].adj.push_back(4);
	v[1].adj.push_back(0);
	v[1].adj.push_back(2);
	v[2].adj.push_back(1);
	v[2].adj.push_back(3);
	v[3].adj.push_back(2);
	v[3].adj.push_back(4);
	v[4].adj.push_back(3);
	v[4].adj.push_back(0);
	v[5].adj.push_back(7);
	v[5].adj.push_back(8);
	v[6].adj.push_back(8);
	v[6].adj.push_back(9);
	v[7].adj.push_back(9);
	v[7].adj.push_back(5);
	v[8].adj.push_back(5);
	v[8].adj.push_back(6);
	v[9].adj.push_back(6);
	v[9].adj.push_back(7);
}

void solve (int idx,int id) {
	int i,sz;
	if (idx == n) {
		if (ans[0] == '#') {
			ans = str;
		} else {
			if (str < ans) {
				ans = str;
			}
		}
	} else {
		sz = v[id].adj.size();
		for (i = 0; i < sz; i++) {
			if (v[v[id].adj[i]].ch == s[idx]) {
				str.push_back('0' + v[v[id].adj[i]].id);
				solve(idx + 1,v[v[id].adj[i]].id);
			}
		}
	}
}

int main()
{
	int t;
	scanf("%d",&t);
	init();
	while (t --) {
		int i;
		scanf("%s",s);
		n = strlen(s);
		ans.clear();
		ans.push_back('#');
		for (i = 0; i < 10; i++) {
			if (s[0] == v[i].ch) {
				str.clear();
				str.push_back('0' + v[i].id);
				solve(1,v[i].id);
			}
		}
		if (ans[0] == '#') {
			printf("-1\n");
		} else {
			cout << ans << endl;
		}
	}
	return 0;
}