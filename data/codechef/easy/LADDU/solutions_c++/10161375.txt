#include<iostream>
#include<string>
#include<map> 

typedef unsigned long int whole;
typedef signed long int integer;
typedef float decimal;
typedef double exponential;

using namespace std;

int main(int argc, char* argv[]){
   
    enum denominations { CONTEST_WON,
                         TOP_CONTRIBUTOR,
                         CONTEST_HOSTED,
                         BUG_FOUND };

    map<string, whole> denominator;    
    denominator["CONTEST_WON"] = CONTEST_WON;
    denominator["TOP_CONTRIBUTOR"] = TOP_CONTRIBUTOR;
    denominator["CONTEST_HOSTED"] = CONTEST_HOSTED;
    denominator["BUG_FOUND"] = BUG_FOUND;
    whole test_case_count;
    cin>>test_case_count;

    for (whole i = 0; i < test_case_count; i++){
        whole activities_count;
        string origin;
        cin>>activities_count>>origin;
        whole minimum_amount_redeemable = ((origin == "INDIAN") ? 200 : 400);
        int laddoos = 0;        
        for(whole j = 0; j < activities_count; j++){
            string denomination;

            cin>>denomination;
            switch (denominator[denomination]){
            case CONTEST_WON:
                whole rank;
                cin>>rank;
                if (rank > 20) {
                    laddoos += 300;
                } else {
                    laddoos += 300 + (20 - rank);
                }
                break;
            case TOP_CONTRIBUTOR:
                laddoos += 300;
                break;
            case CONTEST_HOSTED:
                laddoos += 50;
                break;
            case BUG_FOUND:
                whole bug_count;
                cin>>bug_count;
                laddoos += bug_count;
                break;
            default:
                laddoos += 0;
            }
        }
        whole redeem_count = laddoos/minimum_amount_redeemable;
        cout<<redeem_count<<endl;
    }
    return 0;
}
