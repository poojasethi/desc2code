#include <stdio.h>
//#include <stdbool.h>
//#include <string.h>
#include <stdlib.h>
//#include<math.h>
void merge(int a[],int ,int ,int);
void mergeSort(int a[],int ,int);


int main()
{
    int T,N,count,i;
    
    
    scanf("%d ",&T);
    
    while(T--){
        count=1;
      // commonPresent=0;
    
        //commonNotPresent=0;
     
        scanf("%d",&N);
      
        
        int * a=(int *)malloc(sizeof(int)*N);
      //  int * b=(int *)malloc(sizeof(int)*K);
        
        
        for (int  i=0; i<N; i++) {
            scanf("%d",&a[i]);
        }
        mergeSort(a,0,N-1);
        for ( i=0; i<N;) {
            if (a[i]==a[i+1]) {
                count++;
            
            if (count==2) {
                i=i+2;
                count=1;
            }
            }
            else
                break;
            
        }
        printf("%d",a[i]);
        
        //              commonNotPresent=N-((M-commonPresent)+ (K-commonPresent)+ commonPresent);
        
       // printf("%d %d",commonPresent,commonNotPresent);
//
        
        printf("\n");
        
        
    }
    
    // your code goes here
    
    return 0;
}
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    
    /* create temp arrays */
    int L[n1], R[n2];
    
    /* Copy data to temp arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    /* Copy the remaining elements of L[], if there are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    /* Copy the remaining elements of R[], if there are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

/* l is for left index and r is right index of the sub-array
 of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2; //Same as (l+r)/2, but avoids overflow for large l and h
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
