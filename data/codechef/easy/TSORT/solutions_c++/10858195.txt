#include <iostream>
using namespace std;

int partition(int *a, int left, int right);
void exchange(int *a, int i, int j);

void quicksort(int *a, int left, int right)
{
	if (right <= left) return;
	int m = partition(a, left, right);
	quicksort(a, left, m-1);
	quicksort(a, m+1, right);
}

void exchange(int *a, int i, int j)
{
	int tmp;
	tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
}

int partition(int *a, int left, int right)
{
	int i = left - 1;
	int j = right;
	while (true)
	{
		while (a[++i] < a[right]) // find item on left to swap
			if (i == right) break;
		while (a[right] < a[--j]) // find item on right to swap
			if (j == left) break;
		if (i >= j) // check if pointers cross
			break;
		exchange(a, i, j); // swap
	}
	exchange(a, i, right); // swap with partitioning element
	return i; // return index where crossing occurs
}

void merge(int *a, int *aux, int left, int m, int right)
{
	for (int k = left; k < right; k++) 
		aux[k] = a[k];
	int i = left, j = m;
	for (int k = left; k < right; k++)
	{
		if (i >= m)
			a[k] = aux[j++];
		else if (j >= right)
			a[k] = aux[i++];
		else if (aux[j] < aux[i])
			a[k] = aux[j++];
		else
			a[k] = aux[i++];
	}
}

void mergesort(int *a, int *aux, int left, int right)
{
	if (right <= left + 1) return;
	int m = left + (right - left)/2;
	mergesort(a, aux, left, m);
	mergesort(a, aux, m, right);
	merge(a, aux, left, m, right);
}

void mergesort(int *a, int t)
{
	int *aux = new int[t];
	mergesort(a, aux, 0, t);
}


void print(int *a, int t)
{
	for (int i = 0; i < t; i++)
		cout << a[i] << endl;
}

int main()
{
	int t, n;
	cin >> t;

	static int *a = new int[t];

	for (int i = 0; i < t; i++)
		cin >> a[i];

	// quicksort(a, 0, t-1);
	mergesort(a, t);
	print(a, t);

	return 0;
}