#include <iostream>
#include <stdio.h>
using namespace std;

int heapsize,N;

int parent(int i){
	return (i-1)/2;
}

int left(int i){
	return (2*i + 1);
}

int right(int i){
	return 2*(i+1);
}

void swap(int * &A, int i, int j){
	int x = A[i];
	A[i] = A[j];
	A[j] = x;
}

void max_heapify(int * A, int i){
	int l,r,largest;
	l = left(i);
	r = right(i);
	if(l<heapsize && A[l]>A[i]){
		largest = l;
	}
	else largest = i;
	if(r<heapsize && A[r]>A[largest]){
		largest = r;
	}
	if(largest != i){
		swap(A,i,largest);
		max_heapify(A,largest);
	}
}

void heapsort(int * A, int N){
    for(int i= (N-1)/2; i>=0; --i){
		max_heapify(A,i);
	}
	for(int i=N-1 ; i>0; i--){
		swap(A,i,0);
		--heapsize;
		max_heapify(A,0);
	}
}

int main(){
	int i;
	int * A = new int[1000001];
	cin>>N;
	heapsize = N;
	for(i=0;i<N;++i)
		scanf("%d",&A[i]);
    heapsize = N;
	heapsort(A,N);
	for(i=0 ; i<N; ++i){
		cout<<A[i]<<"\n";
	}
}
