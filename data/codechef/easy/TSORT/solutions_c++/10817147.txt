#include<iostream>
#define MAX 1000001
using namespace std;
int heap[MAX];
void Swap(int heap[], int i, int j)
{
	int temp = heap[i];
	heap[i] = heap[j];
	heap[j] = temp;
}
void ReHeapUp(int heap[], int newNode)
{
	if (newNode != 0)
	{
		int parent = (newNode - 1) / 2;
		if (heap[parent] < heap[newNode])
		{
			Swap(heap, parent, newNode);
			ReHeapUp(heap, parent);
		}
	}
	return;
}
void ReHeapDown(int heap[], int root, int length)
{
	int leftValue, rightValue, largestValue, largestIndex;
	if ((root * 2 + 1) <= length)
	{
		leftValue = heap[root * 2 + 1];
		if ((root * 2 + 2) <= length)
		{
			rightValue = heap[root * 2 + 2];
		}
		else
		{
			rightValue = -1;
		}

		if (leftValue > rightValue)
		{
			largestValue = leftValue;
			largestIndex = root * 2 + 1;
		}
		else
		{
			largestValue = rightValue;
			largestIndex = root * 2 + 2;
		}

		if (heap[root] < largestValue)
		{
			Swap(heap, root, largestIndex);
			ReHeapDown(heap, largestIndex, length);
		}
	}
	return;
}
void PrintArray(int heap[], int size)
{
	for (int i = 0; i < size; i++)
		cout << heap[i] <<endl;
}
static int get_i() {
	int c;
	while (((c = getchar())) < '0') {}
	int n = c - '0';
	while (((c = getchar())) >= '0') {
		// if (c>'9') return n;
		n = n * 10 + c - '0';
	}
	return n;
}
int main()
{
	/*int heap[] = { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
	int size = sizeof(heap) / sizeof(heap[0]);
	for (int i = 1; i < size; i++)
		ReHeapUp(heap, i);
	int length = size - 1;
	while (length>0)
	{
		Swap(heap, 0, length);
		length--;
		ReHeapDown(heap, 0, length);
	}

	PrintArray(heap, size);*/

	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
	{
		//cin >> heap[i];
		heap[i] = get_i();
	}
	for (int i = 1; i < t; i++)
		ReHeapUp(heap, i);
	int length = t - 1;
	while (length>0)
	{
		Swap(heap, 0, length);
		length--;
		ReHeapDown(heap, 0, length);
	}

	PrintArray(heap, t);
	return 0;
}