#include <iostream>
#include <stack>
#include <string>

using namespace std;

bool isOperator(char x)
{
    if(x=='+'||x=='-'||x=='/'||x=='*'||x=='^')
    {
        return(true);
    }
    else
    {
        return(false);
    }
}
int operatorPriority(char x)
{
    if(x=='^')
    {
        return(3);
    }
    else if(x=='*'||x=='/')
    {
        return(2);
    }
    else if(x=='+'||x=='-')
    {
        return(1);
    }
    else
    {
        return 0;
    }
}
string infixToPostfix(string exp)
{
    stack<char> S;
    string result="";
    for(unsigned int i=0;i<exp.length();i++)
    {
        if(isalpha(exp[i]))
        {
            result=result+exp[i];
        }
        else if(isOperator(exp[i]))
        {
            while(!S.empty()&&S.top()!='('&&(operatorPriority(S.top())>=operatorPriority(exp[i])))
            {
                result=result+S.top();
                S.pop();
            }
            S.push(exp[i]);
        }
        else if(exp[i]=='(')
        {
            S.push(exp[i]);
        }

        else if(exp[i]==')')
        {
           while(!S.empty()&& S.top()!='(')
                 {
                     result=result+S.top();
                     S.pop();
                 }
                 S.pop();
        }
    }
    while(!S.empty())
    {
        result=result+S.top();
        S.pop();
    }
    return(result);
}


int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    string exp, res;
    cin>>exp;
    res=infixToPostfix(exp);
    cout<<res<<endl;
    }


    return 0;
}
