#include<iostream>
#include<cctype>
#include<string>
#include<cmath>

using namespace std;
void postfix(char str[100]);
int priority(char c);


template<class T>
class Node {
	public:
		T data;
		Node *next;
};

template<class Q>
class StackImp {
	Node<Q> *top;
	public:
		StackImp() {
			top=NULL;
		}
		void push(Q data);
		Q pop();
		int isempty();
};

template<class Q>
void StackImp<Q>::push(Q data) {
	if(top==NULL) {
		top=new Node<Q>;
		top->data=data;
		top->next=NULL;
	}
	else {
		Node<Q> *tempn;
		tempn=new Node<Q>;
		tempn->data=data;
		tempn->next=top;
		top=tempn;
	}
}

template<class Q>
Q StackImp<Q>::pop() {
	Node<Q> *tempn;
	if(isempty()) {
		return Q(0);
	}
	Q temp;
	tempn=top->next;
	temp=top->data;
	delete top;
	top=tempn;
	return temp;
}

template<class Q>
int StackImp<Q>::isempty() {
	if(top==NULL)
		return 1;
	return 0;
}
char out[401];
int main() {
	char str[401];
	int t;
	ios_base::sync_with_stdio(false);
	cin>>t;
	for(;t>0;--t) {
		cin>>str;
		postfix(str);
	}
	
	
}

void postfix(char str[401]) {
	int i=0,j=0;
	char temp;
	StackImp<char> s;
	while(str[i]!='\0') {
		if(isalnum(str[i])) {
		    out[j]=str[i];
		    j++;
		}
		else if(str[i]=='(')
			s.push(str[i]);
		else if(str[i]==')') {
			while((temp=s.pop())!='(') {
				out[j]=temp;
				j++;
			}
		}
		else {
			while(1) {
				if(priority(str[i])<=priority(temp=s.pop())) {
					out[j]=temp;
					j++;
				}
				else {
					s.push(temp);
					s.push(str[i]);
					break;
				}
			}
		}
		i++;
	}
	while(!s.isempty()) {
		temp=s.pop();
		if(temp!='('&&temp!=')') {
			out[j]=temp;
			j++;
		}
	}
	out[j]='\0';
	cout<<out<<"\n";
	return;
}

int priority(char c) {
	if(c=='+'||c=='-')
		return 1;
	else if(c=='*'||c=='/')
		return 2;
	else if(c=='^')
		return 3;
	else
		return 0;
}
