//divesh uttamchandani
#include<iostream>
#include<stack>
#include<string>
using namespace std;

int precedence(char ch);
string polish(string infix);

int main()
{
    int t,i;
    cin>>t;

    string infix;

    for(i=0;i<t;++i)
    {
        cin>>infix;
        infix.insert(infix.begin(),'(');
        infix.append(")");
        cout<<polish(infix)<<"\n";
    }
    return 0;
}

string polish(string infix)
{
    char q;
    int i;
    int j=0,pre1,pre2;
    string postfix;
    stack<char> temp;
    for(i=0;infix[i]!='\0';++i)
    {
        if(precedence(infix[i])==0)
        {
            postfix.push_back(infix[i]);
        }
        else if(infix[i]=='(')
        {
            temp.push(infix[i]);
        }

        else if(infix[i]==')')
        {
            while(temp.top()!='(')
            {
                postfix.push_back(temp.top());
                temp.pop();
            }
            temp.pop();
        }

        else
        {
            pre1=precedence(infix[i]);
            pre2=precedence(temp.top());
            while(pre2>=pre1 && pre2!=6)
            {
                postfix.push_back(temp.top());
                temp.pop();
                if(temp.empty())
                    break;
                pre2=precedence(temp.top());
            }
                temp.push(infix[i]);
        }

    }
    while(!(temp.empty()))
    {
        postfix.push_back(temp.top());
        temp.pop();
    }
    return postfix;
}

int precedence(char ch)
{
    switch(ch)
    {
        case '(': return 6;
        case ')': return 6;
        case '^': return 5;
        case '/': return 4;
        case '*': return 4;
        case '+': return 3;
        case '-': return 3;
        default : return 0;
    }
}
