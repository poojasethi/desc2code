#include <cstdio>
#include <cmath>
#include <iostream>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include <stack>

#define ll long long int
#define vcll vector<long long int>

using namespace std;

string toPostfix(string);
int getOperatorWeight(char);
bool isOpeningParanthesis(char);
bool isClosingParanthesis(char);
bool isOperator(char);
bool isOperand(char);
int eval(string);//This function works for single digit numbers onlu non-decimal numbers
bool isRightAssociative(char);

int main()
{
	int t;
	cin >> t;
	while (t--) 
	{
		string exp;
		cin >> exp;
		exp = toPostfix(exp);
		cout << exp << endl;
	}
	return 0;
}

string toPostfix(string exp)
{
	stack<char> s;
	string res;
	int OpWt1, OpWt2;
	for (int i = 0;i<exp.length();i++)
	{
		char c = exp[i];
		OpWt1 = OpWt2 = 0;
		if (isOperand(c))
			res += c;
		else if (isOpeningParanthesis(c))
			s.push(c);
		else if (isOperator(c))
		{
			if (s.empty())
				s.push(c);
			else
			{
				OpWt1 = getOperatorWeight(c);
				if (getOperatorWeight(s.top()) >= OpWt1 && isRightAssociative(s.top()))
					s.push(c);
				else if (getOperatorWeight(s.top()) >= OpWt1)
				{
					while (!s.empty() && getOperatorWeight(s.top()) >= OpWt1)
					{
						res += s.top();
						s.pop();
					}
					s.push(c);
				}
				else
				{
					s.push(c);
				}
			}
		}//End of else if
		else//only closing paranthesis is left
		{
			while (!s.empty() && !isOpeningParanthesis(s.top()))
			{
				if (!isOpeningParanthesis(s.top()))//skip the paranthesis addition
					res += s.top();
				s.pop();
			}
			if (!s.empty() && isOpeningParanthesis(s.top()))
				s.pop();//pop out opening paranthesis
		}
	}
	while (!s.empty())
	{
		if (isOperator(s.top()))
			res += s.top();
		s.pop();
	}
	return res;
}

int getOperatorWeight(char c)
{
	switch (c)
	{
	case '+':
	case'-':
		return 1;
	case '*':
	case'/':
	case '%':
		return 2;
	case '^':
		return 3;
	default:
		return 0;
	}
}

bool isOpeningParanthesis(char c)
{
	if (c == '{' || c == '[' || c == '(')
		return true;
	else
		return false;
}

bool isClosingParanthesis(char c)
{
	if (c == '}' || c == ']' || c == ')')
		return true;
	else
		return false;
}

bool isOperand(char c)
{
	if (c >= 'A'&&c <= 'Z')  return true;
	if (c >= 'a'&&c <= 'z')  return true;
	if (c >= '0'&&c <= '9')  return true;
	return false;
}

bool isOperator(char c)
{
	switch (c)
	{
	case '+':
	case '-':
	case '/':
	case '*':
	case '%':
	case '^':
		return true;
	}
	return false;
}

bool isRightAssociative(char c)
{
	if (c == '^')
		return true;
	else
		return false;
}

int eval(string exp)
{
	stack<int> s;
	int x, y;
	for (int i = 0;i<exp.length();i++)
	{
		x = y = 0;
		if (exp[i] >= 'a' && exp[i] <= 'z')   return 0;
		else if (exp[i] >= 'A' && exp[i] <= 'Z') return 0;
		else if (isOperand(exp[i]))
			s.push(exp[i] - '0');
		else
		{
			x = s.top();
			s.pop();
			y = s.top();
			s.pop();
			//Return y Operator x
			switch (exp[i])
			{
			case '+':
				s.push(y + x);
				break;
			case '-':
				s.push(y - x);
				break;
			case '*':
				s.push(y*x);
				break;
			case '/':
				s.push(y / x);
				break;
			case '%':
				s.push(y%x);
				break;
			case '^':
				s.push((int)pow(y, x));
				break;
			}
		}
	}
	return s.top();
}
