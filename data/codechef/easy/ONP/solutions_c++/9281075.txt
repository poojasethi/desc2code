#include<bits/stdc++.h>
using namespace std;
#define max 401
char infix[max],postfix[max];
int top;
void infix_to_postfix();
int isempty();
int white_space(char);
void push(long int );
long int pop();
int priority(char);
char Stack[max];
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	 long int value;
	 top=-1;
	 cin>>infix;
	 infix_to_postfix();
	 puts(postfix);
	}
	return 0;
}
//start of function to convert infix to postfix expression
void infix_to_postfix()
{
	unsigned int i,p=0;
	char symbol;
	char next;
	for(i=0;i<strlen(infix);i++)
	{
		symbol=infix[i];
		if(!white_space(symbol))
		{
			switch(symbol)
			{
				case '(':
					push(symbol);
					break;
				case ')':
					while((next=pop())!='(')	
					postfix[p++]=next;
					break;
				case '+':	
				case '-':
				case '*':
				case '/':
				case '%':
				case '^':
						while(!isempty()&&priority(Stack[top])>=priority(symbol))
							postfix[p++]=pop();
							push(symbol);
							break;
					default:
						postfix[p++]=symbol;
			}
		}
	}
	while(!isempty())
		postfix[p++]=pop();
	postfix[p]='\0';
}
//End


//start of priority function
int priority(char a)
{
	switch(a)
	{
		case '(':
			return 0;
		case '+':
		case '-':
			return 1;
		case '*':
		case '/':
		case '%':
			return 2;
		case '^':
			return 3;
		default:
			return 0;
	}
}
//end

//start of push function
void push(long int item)
{
	if(top>max)
	{
		exit(1);
	}
	else
	Stack[++top]=item;
}
//end



//start of pop function
long int pop()
{
	if(isempty())
	{
		exit(1);
	}
	return (Stack[top--]);
}
//end

//start of white space function
int white_space(char c)
{
	if(c==' '||c=='\t')
	return 1;
	else
	return 0;
}
//end


//start of isempty()
int isempty()
{
	if(top==-1)
	return 1;
	else
	return 0;
}
//end


