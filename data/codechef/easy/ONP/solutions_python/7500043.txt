# Assumes each expression have atleast a set of 
# enclosing parens.

def parse(expr, index):
	index += 1 # because first index is '('
	
	if expr[index] == '(':
		# recursively calculate first operand
		op1, index = parse(expr, index)
	else:
		# if current value is not '(', it is the
		# first operand.
		op1 = expr[index]
		index += 1
	# current value is always the operator	
	opt = expr[index]
	index += 1
	
	# calculate 2nd operand same as the first
	if expr[index] == '(':
		op2, index = parse(expr, index)
	else:
		op2 = expr[index]
		index += 1 
	
	index += 1
	
	return op1 + op2 + opt, index

T = int(raw_input())
for i in range(T):
	expr = raw_input()
	rpn, index = parse(expr, 0)
	print rpn
	