lassoc = 0
rassoc = 1
operators = {
    '+' : (0,lassoc),
    '-' : (0,lassoc),
    '*' : (5,lassoc),
    '/' : (5,lassoc),
    '^' : (10,rassoc)
}
def isoperator(l):
    return l in operators
def isassociative(l,assoc):
    return operators[l][1] == assoc
def cmpprecedence(l1,l2):
    return operators[l1][0]-operators[l2][0]
def infixtoRPN(s):
    out = []
    stack = []
    for i in s:
        if isoperator(i):
            while len(stack)!=0 and isoperator(stack[-1]):
                if ((isassociative(i,lassoc) and cmpprecedence(i,stack[-1])<=0) or(isassociative(i,rassoc) and cmpprecedence(i,stack[-1])<0)):
                    out.append(stack.pop())
                    continue
                break
            stack.append(i)
        elif i=='(':stack.append(i)
        elif i==')':
            while stack[-1]!='(' and len(stack)!=0:
                out.append(stack.pop())
            stack.pop()
        else:
            out.append(i)
    while len(stack)!=0:
        out.append(stack.pop())
    return out

t = input()
while t:
    t-=1
    s = raw_input()
    a = infixtoRPN(s)
    x=""
    for i in a:x+=i
    print x
