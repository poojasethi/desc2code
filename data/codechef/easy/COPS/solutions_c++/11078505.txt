#include<iostream>

using namespace std;

int partition( int*A, int p, int r);
void q_sort( int*A, int p, int r);

int main ()
{
	int T,i,j,k,X,Y,M,Safe_houses;

	//cout << "write total no. of test cases\n";
	cin >> T;

	for (i=0;i<T;i++)
	{
		//cout << "write the M, X &Y respectively\n";
		cin >> M >> X >> Y;

		int Cops[M];
		Safe_houses = 0;
			
		//cout << "fill the array for cops' address\n";
		for (j=0;j<M;j++)
		{
			cin >> Cops[j];
		}

		q_sort ( Cops, 0, M-1);

		if (Cops[0]-1-X*Y > 0)
		{
			Safe_houses += Cops[0]-1-X*Y;
		 	//cout << Safe_houses << "erya" <<endl;
		}
		for (j=0;j<M-1;j++)
		{
			if (Cops[j+1]-Cops[j]-1 > 2*X*Y)
			{
				Safe_houses += Cops[j+1]-Cops[j]-1-2*X*Y;
				 //cout << Safe_houses << "retgaerhy" << endl;
			}
		}
		if (100-Cops[M-1] > X*Y)
		{
			Safe_houses += 100-Cops[M-1]-X*Y;
			//cout << Safe_houses << "xxxxxxxxxxx" << endl;
		}
		
		cout << Safe_houses << endl;
	}

	return 0;
}
			
int partition( int*A, int p, int r)
{
    int x = A[r];
    int j,i = p - 1;
    for (j=p; j<r; j++)
    {
        if (A[j]<=x)
        {
            i = i + 1;
            int temp=A[i];
            A[i]=A[j];
            A[j]=temp;
        }
    }
    int temp=A[i+1];
    A[i+1]=A[r];
    A[r]=temp;

    return i+1;
}

void q_sort( int*A, int p, int r)
{

       // qsort_comp++;
    if (p<r)
    {
        int q = partition(A, p, r);
        q_sort(A, p, q-1);
        q_sort(A, q+1, r);
    }
}
				  
		
 
 
