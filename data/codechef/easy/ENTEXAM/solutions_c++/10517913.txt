#include<stdio.h>
long long int sum[10005]={0},brr[10005];
void merge(long long int b[],int start,int mid ,int end)
{
    int lctr=start,rctr=mid,k=0;
    for(k=start;lctr<mid&&rctr<end;k++)
    {
        if(b[lctr]<b[rctr])
        {
            brr[k]=b[lctr];
            lctr++;
        }

        else
        {
            brr[k]=b[rctr];
            rctr++;
        }
    }
    while(lctr<mid)
    {
        brr[k]=b[lctr];
        lctr++;
        k++;
    }

    while(rctr<end)
    {
        brr[k]=b[rctr];
        rctr++;
        k++;
    }

    for(int i=start;i<end;i++)
    {
        b[i]=brr[i];
    }
}
void mergesort(long long int ar[],int start, int end)
{
    int size=end-start;

    if(size==1)
    return;

    int mid=size/2;

    //printf("Sizesssss %d %d %d\n",start,mid,end);
    //getchar();
    mergesort(ar,start,start+mid);
    mergesort(ar,start+mid,end);
    merge(ar,start,start+mid,end);
}
int main()
{
    int t,n,k,e;
    long long int m;

    scanf("%d",&t);

    while(t--)
    {
        scanf("%d %d %d %lld",&n,&k,&e,&m);
        long long int c;

        for(int i=0;i<n;i++)
        {
            if(i!=n-1)
            {
                for(int j=0;j<e;j++)
                {
                    scanf("%lld",&c);
                    sum[i]=sum[i]+c;
                }
            }

            else
            {
                for(int j=0;j<e-1;j++)
                {
                    scanf("%lld",&c);
                    sum[i]=sum[i]+c;
                }
            }
        }

        mergesort(sum,0,n-1);

        /*for(int i=0;i<n;i++)
        {
            printf("%lld ",sum[i]);
        }
        printf("\n");

        printf("%lld %lld\n",sum[n-k-1],sum[n-1]);*/

        long long int temp=sum[n-k-1]-sum[n-1]+1;

        if(temp<=m)
        {
            if(temp>=0)
            printf("%lld\n",temp);

            else
            printf("0\n");
        }

        else
        {
            printf("Impossible\n");
        }

        for(int i=0;i<n;i++)
        {
            sum[i]=0;
        }
    }
    return 0;
}
