class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        self.count=1
class tree:
    def __init__(self,root):
        self.root=root
def insert(root,val):
    if(val==root.data):
        root.count+=1
        return
    if(val>root.data):
        if(root.right is None):
            root.right=Node(val)
        else:
            insert(root.right,val)
    else:
        if(root.left is None):
            root.left=Node(val)
        else:
            insert(root.left,val)
class values:
    def __init__(self):
        self.ma=-1
        self.maCount=0
        self.sma=-1
        self.smaCount=0
def reverseTrav(root,v):
    if(root is None):
        return
    reverseTrav(root.right,v)
    if(root.count>=2):
        if(root.data>v.ma):
            v.ma=root.data
            v.maCount=root.count
        elif(root.data>v.sma):
            v.sma=root.data
            v.smaCount=root.count
    reverseTrav(root.left,v)
t=int(raw_input())
for i in range(t):
    n=int(raw_input())
    arr=[int(num) for num in raw_input().strip().split()]
    t=tree(Node(arr[0]))
    for j in range(1,n):
        insert(t.root,arr[j])
    v=values()
    reverseTrav(t.root,v)
    if(v.maCount>=4):
        ans=v.ma*v.ma
    elif(v.maCount>=2 and v.smaCount>=2):
        ans=v.ma*v.sma
    else:
        ans=-1
    print(ans)
