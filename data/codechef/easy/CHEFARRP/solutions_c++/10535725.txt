/***********Template Begins ***********/

#include<bits/stdc++.h>
using namespace std;


typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
typedef vector<pii > vii;
typedef vector<pair<int, pair<int, int> > > viii;
typedef pair<ll,ll> pll;
typedef vector<string> vs;
typedef vector<vii> vvii;

#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define all(a) a.begin(),a.end()
#define loop(x,a,b) for(int (x) = (a);(x)<(b);(x)++)
#define rep(i,n)   for(int (i)=0;(i)<(n);(i)++)
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define ain(a,n) int ((a)[(n)]); for(int i=0; i<(n); i++) cin>>((a)[i])  
#define md 1000000007
#define _ "\n" 
#define bit(n) (1<<(n))
#define bit64(n) ((LL(1))<<(n))
#define sz size()
#define cl clear()
#define fill(ar,val) memset((ar),(val),sizeof (ar))
#define MIN(a,b) {if((a)>(b)) (a)=(b);}
#define MAX(a,b) {if((a)<(b)) (a)=(b);}
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define sqr(x) ((x)*(x))
#define FOR(i,x,y) for(ll i = (x) ; i <= (y) ; ++i)
#define ROF(i,x,y) for(ll i = (y) ; i >= (x) ; --i)
#define UNIQUE(V) (V).erase(unique((V).begin(),(V).end()),(V).end())
#define NUMDIGIT(x,y) (((vlong)(log10((x))/log10((y))))+1)
#define abs(x) ((x)<0?-(x):(x))
#define fabs(x) ((x)+eps<0?-(x):(x))
#define lcm(x,y) (((x)/gcd((x),(y)))*(y))
#define norm(x) if(x>=mod)x-=mod;
#define odd(x) (((x)&1)==0?(0):(1))
#define mod 1000000007

const double eps=1e-9;
const long inf = 2147383647;
const double pi = 2 * acos ( 0.0 );
ll x2,y2,fact[2000000], inv[2000000];                    // factors of extended gcd 
ll gcd(ll a,ll b)  // euclids algorithm 
{
	int t;
	while(b!=0)
	{
		t=b;
		b=a%b;
		a=t;
	}
	return a;
}
ll ext_gcd ( ll A , ll B)   // extended euclids theorem gives factors also 
{
    ll x1, y1, x, y, r2, r1, q, r;
    x2 = 1; y2 = 0;
    x1 = 0; y1 = 1;
    for (r2 = A, r1 = B; r1 != 0; r2 = r1, r1 = r, x2 = x1, y2 = y1, x1 = x, y1 = y ) 
	{
        q = r2/r1;
        r = r2 % r1;
        x = x2 - (q * x1);
        y = y2 - (q * y1);
    }
    return r2;
}
ll modInvco ( ll a, ll m )         //  works when a and m is co prime  //Inline function instruct compiler 
{                                //to insert complete body of the function wherever that function got used in code.
    ext_gcd( a, m);
    if ( x2<0 )                  // x2,y2 declared gloabally  
	  x2+=m;                     //modInv is never negative
    return x2;
}
ll modInv(ll a, ll m)           
{
    a = a%m;
    for (ll x=1; x<m; x++)
     if ((a*x) % m == 1)
        return x;
}
inline ll power ( ll a, ll p ) 
{
    ll res = 1, x = a;
    while ( p ) 
	{
        if ( p & 1 ) res = ( res * x );
        x = ( x * x ); p >>= 1;
    }
    return res;
}
inline ll bigmod ( ll a, ll p, ll m )   // for ex: (5946 ^ 968725 ) % 5
 {
    ll res = 1 % m, x = a % m;
    while ( p )
	 {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m; p >>= 1;
    }
    return res;
}
void precal() 
{
    fact[0] = 1;
    FOR(i,1,1000000) 
	{
        fact[i] = fact[i-1] * i;
        fact[i] %= mod;
    }

    FOR(i,0,1000000) 
	{
        inv[i] = modInv( fact[i], mod );
    }
}
ll combo (ll n, ll k )
{
    if ( n == k ) return 1;
    if ( n == 0 ) return 0;
    if ( k == 0 ) return 0;

    ll x = n - 1;
    ll y = k - 1;

    ll res = ( inv[x-y] * inv[y] ) % mod;    //Calculate nck(x,y)
    res *= fact[x];
    res %= mod;
    
    return res;
}
ll fast_pow(long long base, long long n,long long M)
{
    if(n==0)
       return 1;
    if(n==1)
    return base;
    long long halfn=fast_pow(base,n/2,M);
    if(n%2==0)
        return ( halfn * halfn ) % M;
    else
        return ( ( ( halfn * halfn ) % M ) * base ) % M;
}
ll findMMI_fermat(ll n,ll M)
{
    return fast_pow(n,M-2,M);
}

/***********Template Ends Here***********/

int check(string a)
{
	int f=0;
	FOR(i,0,a.size())
	{
		if(a[i]=='N')
		 f=1;
		 if(f==1 && a[i]=='O')
		  return 0;
	}
	return 1;
}
int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	clock_t h;
    h=clock();
    
    int t;
    cin>>t;
    while(t--)
    {
    	int n;
    	cin>>n;
    	int a[n+1],s=0,p=0,ans=0;
    	FOR(i,0,n-1)
    	{
    		cin>>a[i];
    	}
    	FOR(i,0,n-1)
    	{
    		s=a[i];
    		p=a[i];
    		ans++;
    		FOR(j,i+1,n-1)
    	    {
    		   s+=a[j];
    		   p*=a[j];
    		   if(s==p)
    		    ans++;
    	    }
    	}
    	cout<<ans<<endl;
    }
  
    h=clock()-h;
   // cout<<((float)h/CLOCKS_PER_SEC);
	return 0;
}