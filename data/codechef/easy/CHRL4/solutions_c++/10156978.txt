#include <bits/stdc++.h>
using namespace std;
 
#define MOD 1000000007
 
long long A[100005], dp[100005];
long double fp[100005];
pair<long double, int> tree[400005];
 
pair<long double, int> get_min(int left, int right, int L, int R, int root)
{
  if(left>right || left>R || right<L)
    return make_pair((long double)1e18, 0);
 
  if(left>=L && right<=R)
    return tree[root];
 
  int mid = (left+right)/2;
 
  pair<long double, int> x = get_min(left, mid, L, R, root*2);
  pair<long double, int> y = get_min(mid+1, right, L, R, root*2+1);
 
  if(x.first<=y.first)
    return x;
 
  return y;
}
 
void update(int left, int right, int x, long double val, int root)
{
  if(left>right || left>x || right<x)
    return;
 
  if(left==right && right==x)
  {
    tree[root].first = val;
    tree[root].second = x;
    return;
  }
 
  int mid = (left+right)/2;
 
  update(left, mid, x, val, root*2);
  update(mid+1, right, x, val, root*2+1);
 
  if(tree[root*2].first<=tree[root*2+1].first)
    tree[root] = tree[root*2];
  else
    tree[root] = tree[root*2+1];
}
 
int main()
{
  int N, K;
  scanf("%d %d", &N, &K);
 
  for(int i=1; i<=N; i++)
    scanf("%lld", &A[i]);
 
  dp[1] = A[1];
  fp[1] = (long double)log(A[1]);
  update(1, N, 1, fp[1], 1);
 
  for(int i=2; i<=N; i++)
  {
    pair<long double, int> x = get_min(1, N, i-K, i-1, 1);
    fp[i] = x.first + (long double)log(A[i]);
    dp[i] = dp[x.second]*A[i]%MOD;
    update(1, N, i, fp[i], 1);
  }
  
  printf("%lld\n", dp[N]);
  
  return 0;
} 
