"""
P[Y] = min{P[Y-r]*A[Y]} where 1<=Y-r<=K
"""
# Keep track of minimum value within a window of size K
# update minimum when previous min is popped out
from collections import deque
from heapq import heappop, heappush
import math


def computeProduct(K, A):
    N = len(A)
    P = [0]*N
    P[0]=A[0]
    min_q = list()
    heappush(min_q, (math.log(P[0]),0))

    for r in range(1, N):
        #print 'r: {}'.format(r)
        val, ind = heappop(min_q)
        #print 'val: {}, ind: {}'.format(val, ind)

        while(r-ind > K):
            val, ind = heappop(min_q)
            #print 'val: {}, ind: {}'.format(val, ind)

        P[r]=(A[r]*P[ind])%(10**9+7)


        heappush(min_q, (val, ind))
        heappush(min_q, (math.log(A[r])+ val, r))

        #print min_q
        #print P




    print P[N-1]

    return

if __name__ == '__main__':
    #computeProduct(2,[1,2,3,4])
    #computeProduct(4,[1,2,3,4,5,6,1,2])

    line = raw_input()
    X = line.split(" ")
    N = int(X[0]); K = int(X[1])
    A = raw_input().split(" ")
    A = [int(el) for el in A]
    computeProduct(K, A)
