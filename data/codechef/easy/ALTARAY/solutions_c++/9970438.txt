#include<iostream>
#include<vector>

//-----------------------------------------------------------------------------
class Array {

  public:
    Array(unsigned int n) {
      m_vals.reserve(n);
      m_longestAltArrLens.reserve(n);
    }

    void addValue(int val) {
      m_vals.push_back(val);
      m_longestAltArrLens.push_back(0);
    }
    unsigned int getLongestAltArrLength(unsigned int index) {
      unsigned int len = m_longestAltArrLens[index];
      if ( len != 0 ) {
        return len;
      }

      unsigned int maxIndex = m_vals.size();
      for ( unsigned int i = maxIndex-- ; i-- > index ; ) {
        if ( i == maxIndex ) {
          m_longestAltArrLens[i] = 1;
        } else {
          int val1 = m_vals[i];
          int val2 = m_vals[i+1];
          if ( oppSign(val1, val2) ) {
            m_longestAltArrLens[i] = m_longestAltArrLens[i+1] + 1;
          } else {
            m_longestAltArrLens[i] = 1;
          }
        }
      }

      return m_longestAltArrLens[index];
    }

  private:

    inline bool oppSign(int val1, int val2) const {
      return ((val1 > 0) ^ (val2 > 0));
    }

  private:
    std::vector<int> m_vals;
    std::vector<unsigned int> m_longestAltArrLens;

};
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
class TestCase
{
  public:
    void run() {
      unsigned int n;
      std::cin >> n;
      Array a(n);
      for ( unsigned int i = 0 ; i < n ; ++i ) {
        int val;
        std::cin >> val;
        a.addValue(val);
      }
      for ( unsigned int i = 0 ; i < n ; ++i ) {
        std::cout << a.getLongestAltArrLength(i);
        if ( i != (n-1) ) {
          std::cout << " ";
        }
      }
      std::cout << std::endl;
    }

  private:

  private:

};
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
class TestCaseList
{
  public:
    static void run() {
      unsigned short int numTCs;
      std::cin >> numTCs;
      for (unsigned short int i = 1 ; i <= numTCs ; ++i ) {
        TestCase T;
        T.run();
      }
    }

  private:
  private:

};
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
int main()
{
  TestCaseList::run();
  return 0;
}
//-----------------------------------------------------------------------------
