#include<iostream>
#include<stdlib.h>
#include<string.h>
using namespace std;

const int MAX_SIZE  = 1e5+10;
const int MAX_VALUE = 1e9+7;

int* _allocator(int N){
	int *temp = (int *)malloc(sizeof(int)* N);
	memset(temp,0,sizeof(int)* N);
	return temp;
}

void dump(int *list, int len){
    cout << "dumper" <<endl;
    for(int i=0; i<len; i++)
        cout << list[i] << " " ;
	cout << endl;
}

int main(){
	int t=0;
	int *a = NULL;
	int N = 0;
	int *suffix;
	int power_2=0;
	int sum=0;
	int tmp_product=0;

	cin >> t;
	while(t--){
		cin >> N;
		N++;
		//allocate spaces
		a = _allocator(N);
		suffix = _allocator(N);
		for(int i=0;i<N;i++)
		    cin >> a[i];
		
		power_2 = 1;
		//Suffix creation Loop
		for(int i=N-1; i>=0; i--){
			tmp_product = (1ll *a[i] * power_2) % MAX_VALUE;
			suffix[i] = ((i<N-1) ? tmp_product + suffix[i+1] : tmp_product) % MAX_VALUE;
			power_2 = (power_2 * 2) % MAX_VALUE;
		}

		//#define DEBUG
		#ifdef DEBUG
		    dump(a,N);
			dump(suffix,N);
		#endif

		//Sum loop
		power_2=1;
		for (int i=0;i<N-1;i++){
		    sum = (sum + (((1ll *a[i]*power_2) % MAX_VALUE)* 1ll * suffix[i+1])) % MAX_VALUE; 
			//To handle cases where i=0,1
			if(i>=1)
			    power_2 = (power_2 * 2) % MAX_VALUE;
		}

		cout << (2*1ll*sum) % MAX_VALUE <<endl;
		free(a);free(suffix);sum=0;
	}
}

