#include<iostream>
#include<stdlib.h>
#include<string.h>

using namespace std;


const int MAX_SIZE =1e5+10;
const int MOD=1e9+7;


void dump(int *list, int len){
    cout << "dumper" <<endl;
    for(int i=0; i<len; i++)
        cout << list[i] << " " ;
	cout << endl;
}


int main(){
	int t=0;
	int N = 0;
	int a[MAX_SIZE], suffix[MAX_SIZE];
	int power_2=0;
	int sum=0;
	int tmp_product=0;

	//Total cases
	cin >> t;

	while(t--){

		//Total entries per case
		cin >> N;
		//Acccording to the Problem Statement we incr N by 1
		N++;

		//Input for entries
		for(int i=0;i<N;i++)
		    cin >> a[i];
		
		//Suffix product creation Loop
		power_2 = 1;
		for(int i=N-1; i>=0; i--)
		{
			tmp_product = (1ll *a[i] * power_2) % MOD ;
			suffix[i] = ((i<N-1) ? tmp_product + suffix[i+1] : tmp_product) % MOD;
			power_2 = (power_2 * 2) % MOD;
		}

		//Prints the arrays
		//#define DEBUG
		#ifdef DEBUG
		    dump(a,N);
		    dump(suffix,N);
		#endif

		//Sum loop
		power_2=1;
		for (int i=0;i<N-1;i++)
		{
		    sum = (sum + (  ( (1ll * power_2 * a[i])  %  MOD ) * 1ll * suffix[i+1])) % MOD; 
			
			//To handle cases where i=0,1	
			if (i >=1)	
			    power_2  = (power_2*2) % MOD;
			
		}
		
		//Twice because a[i] can come on right 
		//as well as on the left side.
		cout <<(2 * sum * 1ll) % MOD <<endl;
		sum=0;
	}
}

