#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
using namespace std;
typedef pair<int,int> info;
typedef long long LL;
const int N=105000;
int T,ans,pr[11000],tot=0;
LL n,k;
int pn[N+5],an;
info pi[N+5][8],a[20];

inline void update(LL c,LL d) {
	if (d>=k-n||c>d) return;
	ans+=1+(c<d);
}

void init() {
	static bool flag[N+5];
	for (int i=2;i<=N;i++)
		if (!flag[i]) {
			pr[++tot]=i;
			for (int j=min(LL(i)*i,N+1LL);j<=N;j+=i)
				flag[j]=true;
		}
	for (int i=1;i<=N;i++) {
		int x=i;
		for (int j=1;pr[j]*pr[j]<=x;j++)
			if (x%pr[j]==0) {
				int cnt=1;
				for (x/=pr[j];x%pr[j]==0;x/=pr[j]) cnt++;
				pi[i][++pn[i]]=info(pr[j],cnt);
			}
		if (x>1) pi[i][++pn[i]]=info(x,1);
	}
}

void merge(int x,int y) {
	an=0;
	int i=1,j=1;
	while (i<=pn[x]&&j<=pn[y]) {
		if (pi[x][i].first==pi[y][j].first) {
			a[++an]=info(pi[x][i].first,pi[x][i].second+pi[y][j].second);
			i++;
			j++;
			continue;
		}
		if (pi[x][i].first<pi[y][j].first)
			a[++an]=pi[x][i++];
		else
			a[++an]=pi[y][j++];
	}
	while (i<=pn[x]) a[++an]=pi[x][i++];
	while (j<=pn[y]) a[++an]=pi[y][j++];
}

void dfs(int idx,LL now,int c) {
	if (idx>an) {
		if ((now+n)%c==0)
			update(c,n*(c+n-1)/now);
		return;
	}
	for (int i=0;i<=a[idx].second;i++) {
		dfs(idx+1,now,c);
		now*=a[idx].first;
	}
}

int main() {
	init();
	for (cin>>T;T;T--) {
		cin>>n>>k;
		if (n==0) {
			const int L=1000000000;
			LL a=(k-1)/L,b=(k-1)%L,res[4]={b*b,2*b*a,a*a,0};
			for (int i=0;i+1<4;i++)
				res[i+1]+=res[i]/L,
				res[i]%=L;
			int p=3;
			while (p>0&&!res[p]) p--;
			printf("%d",res[p--]);
			while (p>=0) printf("%09d",res[p--]);
			puts("");
			continue;
		}
		ans=0;
		for (int c=1;c<=2.42*n&&c<k-n;c++) {//1+sqrt(2)
			if (c>4000) {
				LL cur=n*(c+n-1);
				for (LL now=(n/c+1)*c-n;c*now<=cur;now+=c)
					if (cur%now==0)
						update(c,cur/now);
			}
			else {
				merge(n,c+n-1);
				dfs(1,1,c);
			}
		}
		cout<<ans<<endl;
	}
	return 0;
}