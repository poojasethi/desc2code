#include <vector>
#include <cstdio>
#include <set>
#include <map>
#include <algorithm>
#include <cstdlib>
#include <sstream>
#include <numeric>
#include <queue>
#include <iostream>
#include <string>
#include <cstring>
#include <utility>
#define sz(a) ((int)(a).size())
#define pb push_back
#define mk make_pair
#define fi first
#define se second
#define Rep(i,j,k) for (int i=(j); i<=(k); i++)
#define Repd(i,j,k) for (int i=(j); i>=(k); i--)
#define ALL(c) (c).begin(),(c).end()
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define SUM(a) accumulate(all(a),string())
#define online1
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> II;
typedef long long LL;

const int MOD=1000000007;
const int Max=1010;
const int MaxC=3000000;

inline void update(int &x, int y){
	x+=y;
	if (x>=MOD)
		x-=MOD;
	if (x<0)
		x+=MOD;
}

int fac[MaxC],inv[MaxC];

int T, k;
struct TT{
	int x,y;
	
	TT(int _x=0, int _y=0):
		x(_x), y(_y){}
		
	void cin(){
		scanf("%d%d",&x,&y);
	}
	
	bool valid(){
		return abs(x)<=Max && abs(y)<=Max;
	}
	
	void write(int o=0){
		cout<<x<<","<<y<<" ";
		if (o==1) cout<<endl;
	}
		
} blo[20],A,B,tar;
bool exist_block[Max*2+20][Max*2+20];

TT operator+(TT a, TT b){
	return TT(a.x+b.x, a.y+b.y);
}

TT operator-(TT a, TT b){
	return TT(a.x-b.x, a.y-b.y);
}

TT operator*(TT a, int k){
	return TT(a.x*k, a.y*k);
}

bool operator==(TT a, TT b){
	return a.x==b.x && a.y==b.y;
}

bool operator<(TT a, TT b){
	return a.x<b.x || a.x==b.x && a.y<b.y;
}

int operator/(TT a, TT b){
	if (b==TT()) return -1;
	if (a==TT()) return 0;
	if (b.x){
		int ret=a.x/b.x;
		if (b*ret==a)
			return ret;
	}else{
		int ret=a.y/b.y;
		if (b*ret==a)
			return ret;
	}
	return -1;
}

bool reachable[Max*2+20][Max*2+20];
int tot_reachable;

queue<TT> Q;

void set_reach(TT a){
	if (!a.valid() || exist_block[a.x+Max][a.y+Max] || reachable[a.x+Max][a.y+Max])
		return;
	reachable[a.x+Max][a.y+Max]=1;
	Q.push(a);
}

void reverse_bfs(){
	memset(reachable,0,sizeof reachable);
	while(!Q.empty()) Q.pop();
	set_reach(tar);
	while(!Q.empty()){
		set_reach(Q.front()-A);
		set_reach(Q.front()-B);
		Q.pop();
	}
}

bool in_queue[Max*2+20][Max*2+20];
int in_queue_times[Max*2+20][Max*2+20];
int f[Max*2+20][Max*2+20], g[Max*2+20][Max*2+20];

void put_in_queue(TT now, TT pre){
	if (!now.valid() || !reachable[now.x+Max][now.y+Max])
		return;
	update(g[now.x+Max][now.y+Max], g[pre.x+Max][pre.y+Max]);
	if (!in_queue[now.x+Max][now.y+Max]){
		in_queue[now.x+Max][now.y+Max]=1;
		Q.push(now);
		in_queue_times[now.x+Max][now.y+Max]++;
	}
}

bool SPFA_find_circle(){
	tot_reachable=0;
	Rep(i,0,Max*2) Rep(j,0,Max*2)
		if (reachable[i][j])
			tot_reachable++,
			in_queue_times[i][j]=0,
			in_queue[i][j]=0,
			f[i][j]=0,
			g[i][j]=0;

	while(!Q.empty()) Q.pop();
	put_in_queue(TT(),TT());
	g[0+Max][0+Max]=1;
	
	while(!Q.empty()){
		in_queue[Q.front().x+Max][Q.front().y+Max]=0;
		if (in_queue_times[Q.front().x+Max][Q.front().y+Max]>tot_reachable)
			return 1;
		put_in_queue(Q.front()+A, Q.front());
		if (!(A==B))
			put_in_queue(Q.front()+B, Q.front());
		update(f[Q.front().x+Max][Q.front().y+Max], g[Q.front().x+Max][Q.front().y+Max]);
		g[Q.front().x+Max][Q.front().y+Max]=0;
		Q.pop();
	}
	
	return 0;
}

vector<TT> find_path(TT tar){
	vector<TT> ret;
	int x=B.x*A.y-B.y*A.x,	
		y=tar.x*A.y-tar.y*A.x;
	if (x==0){
		Rep(i,0,500){
			int j=tar/B;
			if (j>=0)
				ret.pb(TT(i,j));
			tar=tar-A;			
		}
		return ret;
	}
	int j=y/x, i;
	if (A.x) i=(tar.x-j*B.x)/A.x;
	if (A.y) i=(tar.y-j*B.y)/A.y;
	if (i>=0 && j>=0 && A*i+B*j==tar)
		ret.pb(TT(i,j));
	return ret;
}

int Combination(int n, int m){
	return (LL)fac[n]*inv[m]%MOD*inv[n-m]%MOD;
}

int walk(TT b, TT a){
	a=a-b;
	if (a.x<0 || a.y<0)
		return 0;
	return Combination(a.x+a.y,a.x);
}
	
pair<TT,int> q[20*1500];
int ff[20*1500];

void DP(){	
	blo[0]=TT();
	blo[k+1]=tar;
	
	int tot=0;	
	Rep(i,0,k+1){
		vector<TT> now=find_path(blo[i]);
		while (i==k+1 && A==B && now.size()>1)
			now.pop_back();
		TR(now,e)
			q[++tot]=mk(*e,i);
	}
	
	sort(q+1,q+tot+1);
	
	Rep(i,1,tot){
		//q[i].fi.write(0); cout<<" id:"<<q[i].se<<endl;
		ff[i]=0;
		update(ff[i],walk(TT(),q[i].fi));
		Rep(j,2,i-1)
			update(ff[i],-((LL)ff[j]*walk(q[j].fi,q[i].fi)%MOD));
		//cout<<"f: "<<ff[i]<<endl;
	}
	
	int ans=0;
	Rep(i,1,tot)
		if (q[i].se==k+1)
			update(ans,ff[i]);
	cout<<ans<<endl;
}

int main(){
	
	fac[0]=1,inv[0]=1,fac[1]=1,inv[1]=1;
	Rep(i,2,MaxC-1)
		fac[i]=(LL)fac[i-1]*i%MOD,
		inv[i]=-((LL)inv[MOD%i]*(MOD/i)%MOD)+MOD;
	Rep(i,1,MaxC-1)
		inv[i]=(LL)inv[i-1]*inv[i]%MOD;
	//cout<<clock()-tt<<endl;
	
	cin>>T;
	Rep(_,1,T){	
		tar.cin(); scanf("%d",&k);
		A.cin(), B.cin();
		Rep(i,1,k)
			blo[i].cin();
			
		bool linearly_dependent=0;
		Rep(i,0,250000) if (!linearly_dependent){
			int j=1;
			if (B.x) j=(-A.x*i)/B.x;
			if (B.y) j=(-A.y*i)/B.y;
			if (j>=0)
			if (i || j)
			if (A*i+B*j==TT())
				linearly_dependent=1;
		}
		
		if (!linearly_dependent){
			DP();			
			continue;
		}
		
		memset(exist_block,0,sizeof exist_block);
		Rep(i,1,k)
			exist_block[blo[i].x+Max][blo[i].y+Max]=1;
		
		reverse_bfs();
		
		if (SPFA_find_circle()){
			puts("-1");
			continue;
		}
		
		cout<<f[tar.x+Max][tar.y+Max]<<endl;
	}
	
	//cout<<clock()-tt<<endl;
	
    return 0;
}
