#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = 202;
const int maxm = 2000002;
const int mod = (int)1e9 + 7;
char aa[maxn],bb[maxm],cc[maxn];
char a[5 * maxn],b[5 * maxm],c[5 * maxn];
int n,m;
struct node {
	int len,score;
	node *go[2],*fail;
	node() {
		go[0] = go[1] = fail = NULL;
		len = score = 0;
	}
};
void decode(char *tt, char *t, int len) {
	for (int i = 0; i < len; i++) {
		int x;
		if ('a' <= tt[i] && tt[i] <= 'z') {
			x = tt[i] - 'a';
		} else {
			x = tt[i] - 'A' + 26;
		}
		for (int j = 4; j >= 0; j--) {
			t[5 * i + j] = (x & 1) + '0';
			x >>= 1;
		}
	}
	t[5 * len] = '\0';
}
void buildTrie(node *v, int p, int k = 0) {
	for (int i = p; i < n; i++) {
		if (c[i] == '1' && k < 2) {
			for (int ch = 0; ch < 2; ch++) {
				v -> go[ch] = new node();
				v -> go[ch] -> len = v -> len + 1;
				buildTrie(v -> go[ch],i + 1,k + (ch == a[i] - '0' ? 0 : 1));
			}
			break;
		} else {
			int ch = a[i] - '0';
			v -> go[ch] = new node();
			v -> go[ch] -> len = v -> len + 1;
			v = v -> go[ch];
		}
	}
}
int solve() {
	node *root = new node();
	buildTrie(root,0);
	queue<node*> q;
	q.push(root);
	while(!q.empty()) {
		node *v = q.front();
		q.pop();
		v -> score = sqr(v -> len);
		if (v -> fail) v -> score += v -> fail -> score;
		for (int ch = 0; ch < 2; ch++) {
			if (!v -> go[ch]) continue;
			node *up = v -> fail;
			while(up && !up -> go[ch]) up = up -> fail;
			v -> go[ch] -> fail = up ? up -> go[ch] : root;
			q.push(v -> go[ch]);
		}
	}
	node *v = root;
	int res = 0;
	for (int i = 0; i < m; i++) {
		int ch = b[i] - '0';
		if (v -> go[ch]) {
			v = v -> go[ch];
		} else {
			v = v -> fail;
			while(v && !v -> go[ch]) v = v -> fail;
			v = v ? v -> go[ch] : root;
		}
		res += v -> score;
		res %= mod;
	}
	return res;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	gets(aa);
	gets(bb);
	gets(cc);
	n = strlen(aa);
	m = strlen(bb);
	decode(aa,a,n);
	decode(bb,b,m);
	decode(cc,c,n);
	n *= 5;
	m *= 5;
	printf("%d\n",solve());
	return 0;
}
