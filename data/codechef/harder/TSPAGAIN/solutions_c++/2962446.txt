#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <algorithm>
#include <utility>
using namespace std;

typedef pair<int, int> PII;
#define INF 1000000000

PII p[10000];
int dp[1000][1000];
int d[1000][1000];

int main() {
	int tc, n, m, num;
	char line[100], *ptr;
	scanf("%d", &tc);
	while(tc--) {
		scanf("%d %d", &n, &m);
		gets(line);
		for (int i=0; i<m; ++i) {
			gets(line);
			num = 0;
			ptr = line;
			while(*ptr != ' ')
				num = num * 10 + *ptr++ - '0';
			p[i].second = -num;
			num = 0;
			++ptr;
			while(*ptr)
				num = num * 10 + *ptr++ - '0';
			p[i].first = num;
		}
		sort(p, p + m);
		int ps = 0, ii = n-1;
		int j = 0;
		while(j < m && p[j].first == 0) {
			while(ii > -p[j].second)
				d[ii--][0] = ps;
			++ps;
			++j;
		}
		while(ii >= 0)
			d[ii--][0] = ps;
		int tcost;
		dp[0][0] = 0;
		for (int i=1; i<n; ++i) {
			// update cost array d1
			ps = 0;
			ii = n-1;
			while(j < m && p[j].first == i) {
				while(ii > -p[j].second) {
					d[ii][i] = d[ii][i-1] + ps;
					--ii;
				}
				++ps;
				++j;
			}
			while(ii >= 0) {
				d[ii][i] = d[ii][i-1] + ps;
				--ii;
			}
			int &a = dp[i][i-1];
			int &b = dp[i-1][i];
			a = b = INF;
			for (int j=max(0,i-2); j>=0; --j) {
				dp[i][j] = dp[i-1][j] + d[i-1][i];
				dp[j][i] = dp[j][i-1] + d[i][i-1];
				tcost = dp[j][i-1] + d[j][i];
				if (tcost < a)
					a = tcost;
				tcost = dp[i-1][j] + d[i][j];
				if (tcost < b)
					b = tcost;
			}
		}
		int res = INF;
		for (int i=n-2; i>=0; --i)
			res = min(res, min(dp[n-1][i] + d[n-1][i], dp[i][n-1]+d[i][n-1]));
		printf("%d\n", res);
	}
	return 0;
}