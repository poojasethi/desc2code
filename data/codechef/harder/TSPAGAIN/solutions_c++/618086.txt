#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <iterator>
#include <limits>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;


/* Prewritten code begins */
#define SCI(x)      scanf("%d",&x)
#define REP(i,n)    for(int i=0; i<(n); ++i)
#define FOR(i,a,b)  for(int i=(a); i<=(b); ++i)
/* Prewritten code ends */

const int maxN = 1000;
int a[maxN+1][maxN+1];
int mem[maxN][maxN], n;
inline int cnt(int x1, int y2) {
	++y2;
	return a[n][y2]-a[x1][y2];
}
int f(int x, int y) {
	int &res = mem[x][y];
	if(res >= 0) return res;
	int nxt = max(x,y)+1;
	if(nxt == n-1) return res = cnt(x,nxt)+cnt(nxt,y);
	return res = min(cnt(x,nxt)+f(nxt,y), f(x,nxt)+cnt(nxt,y));
}
char ch;
inline void read(int &x) {
	SCI(x); return;
	while(!isdigit(ch = getchar()));
	x = ch-'0';
	while( isdigit(ch = getchar())) x *= 10, x += ch-'0';
}
int main() {
	int T, k, x, y;
	read(T);
	while(T--) {
		read(n); read(k);
		REP(i,n+1) memset(a[i], 0, (n+1)*sizeof(a[0][0]));
		REP(i,k) {
			read(x); read(y);
			++a[++x][++y];
		}
		FOR(i,1,n) FOR(j,1,n) a[i][j] += a[i-1][j]+a[i][j-1]-a[i-1][j-1];
		REP(i,n) memset(mem[i],  0xFF, n*sizeof(mem[0][0]));
		printf("%d\n", f(0,0));
	}
	return 0;
}
