/***** Author : Kunal *****/
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>

#include <cstdio>
#include <cstring>

using namespace std;

#define REP(a,b) for(int a=0;a<b;a++)
#define FOR(a,b,c) for(int a=b;a<c;a++)
#define FORD(a,b,c) for(int a=b;a>=c;a--)

#define INF 1000000000


int n;
int k;
//int A[10005][2];
int cost[1001][1001];
int c[1001][1001];
int dp[1001][1001];
int main()
{
//	freopen("TSPAGAIN.cppin", "r", stdin);
	int x,y;
	int t; scanf("%d", &t );
	while( t-- )
	{
		memset(c,0,sizeof(c));
		scanf("%d%d", &n, &k );
		REP(i, k ){
			scanf("%d%d", &x, &y );
			c[y][x] += 1;
		}
//		REP(i,n) { REP(j,n) P("%d ", cost[i][j]); puts(""); }
		REP(i,n)
			FORD(j, n-1, 0 )
				cost[i][j] = (i-1>=0?cost[i-1][j]:0) + (j+1<n?cost[i][j+1]:0) - ((i-1>=0 && j+1<n)?cost[i-1][j+1]:0) + c[i][j];
		REP(i,n) REP(j,n) dp[i][j] = INF;
		REP(i,n) dp[i][i] = 0;
		REP(i, n)cost[i][i] = 0;
		FORD( i, n-1, 0 ){
			FORD(j, n-1, 0 ){
				int xk = max( i, j ) + 1;
				if( xk < n ){
					dp[i][j] = min( cost[xk][i] + dp[xk][j], cost[j][xk]+ dp[i][xk] );
				}
				else
					dp[i][j] = cost[n-1][i] + cost[j][n-1];
			}
		}
		//REP(i,n) { REP(j,n) P("%d ", cost[i][j]); puts(""); }
	//	REP(i,n) { REP(j,n) P("%d\n", dist(i,j)); puts(""); }
		printf("%d\n", dp[0][0] );
	}	
	return 0;
}

