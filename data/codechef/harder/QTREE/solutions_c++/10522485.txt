#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <algorithm>
using namespace std;
#define N 100050
#define INF 0x3f7f7f7f
int fi[N],c[N*2][3],fa[N],rf[N],sg[N],wei[N],li[N],wz[N];
int h[N],val[N],nd[N],cl[N],ss=1,n,m,st,Cnt;
bool vis[N],_vis[N];
struct Node
 {
 	int lma,rma,sma,sum,lmi,rmi,smi;bool fz;
 	void Rev() {swap(lma,rma);swap(lmi,rmi);return;}
 	void Get(int x)
 	 {lma=rma=sma=sum=lmi=rmi=smi=x;return;}
 	void Put()
 	 {cout <<lma<<' '<<rma<<' '<<sma<<' '<<lmi<<' '<<rmi<<' '<<smi<<' '<<sum<<endl;}
 } a[N*4],b[N*4],Emp;
Node operator+ (const Node &x,const Node &y)
 {
 	static Node z;
 	z.lma=max(x.lma,y.lma+x.sum);
 	z.rma=max(y.rma,x.rma+y.sum);
 	z.sma=max(x.rma+y.lma,max(x.sma,y.sma));
 	z.sum=x.sum+y.sum;
 	z.lmi=min(x.lmi,y.lmi+x.sum);
 	z.rmi=min(y.rmi,x.rmi+y.sum);
 	z.smi=min(x.rmi+y.lmi,min(x.smi,y.smi));
 	return z;
 }
inline int Read()
 {
 	int x=0;char y;bool z=false;
 	do y=getchar(),z|=y=='-'; while (y<'0'||y>'9');
 	do x=x*10+y-'0',y=getchar(); while (y>='0'&&y<='9');
 	return z?-x:x;
 }
inline void Line(int z,int y,int x)
 {
 	c[++ss][0]=y;c[ss][1]=fi[x];fi[x]=ss;c[ss][2]=z;
 	c[++ss][0]=x;c[ss][1]=fi[y];fi[y]=ss;c[ss][2]=z;
 	return;
 }
bool _DFS(int x,int y)
 {
 	vis[x]=true;li[y]=x;
 	for (int i=fi[x];i;i=c[i][1])
 	 if (vis[c[i][0]]&&c[i][0]!=li[y-1])
 	  {
 	  	 int k=true;
 	  	 while (li[k]!=c[i][0]) k++;Cnt=y-k+1;
 	  	 for (int j=k;j<=y;j++) swap(li[j],li[j-k+1]);
 	  	 return true;
 	  } else
 	 if (!vis[c[i][0]]&&_DFS(c[i][0],y+1)) return true;
 	return false;
 }
void DFS(int x,int y)
 {
 	wei[x]=true;h[x]=h[fa[x]]+1;cl[x]=y;
 	for (int i=fi[x];i;i=c[i][1])
 	 if (c[i][0]!=fa[x]&&!vis[c[i][0]])
 	   fa[c[i][0]]=x,DFS(c[i][0],y),
 	   wei[x]+=wei[c[i][0]],val[c[i][0]]=c[i][2];
 	return;
 }
void DSF(int x,int y)
 {
 	int k=false;rf[x]=y;nd[sg[x]=++st]=x;
 	for (int i=fi[x];i;i=c[i][1])
 	 if (c[i][0]!=fa[x]&&!vis[c[i][0]]&&wei[c[i][0]]>wei[k])
 	   k=c[i][0];
 	if (k) DSF(k,y);
 	for (int i=fi[x];i;i=c[i][1])
 	 if (c[i][0]!=fa[x]&&!vis[c[i][0]]&&c[i][0]!=k)
 	   DSF(c[i][0],c[i][0]);
 	return;
 }
void Set_up(Node* a,int x,int y,int z,bool flag)
 {
 	int mid = x + y >> true, j = z << true;
 	if (x==y)
 	 {a[z].Get(flag?val[li[x]]:val[nd[x]]);return;}
 	Set_up(a,x,mid,j,flag);Set_up(a,mid+1,y,j+1,flag);
 	a[z]=a[j]+a[j+1];
 	return;
 }
void Pretreat()
 {
 	Emp.lma=Emp.rma=Emp.sma=-INF;
 	Emp.lmi=Emp.rmi=Emp.smi=INF;
 	_DFS(1,1);memset(vis,false,sizeof vis);
 	for (int i=1;i<=Cnt;i++) vis[li[i]]=true,wz[li[i]]=i;
 	for (int i=1;i<Cnt;i++)
 	 for (int j=fi[li[i]];j;j=c[j][1])
 	  if (c[j][0]==li[i+1]) val[li[i]]=c[j][2];
 	for (int j=fi[li[Cnt]];j;j=c[j][1])
 	 if (c[j][0]==li[1]) val[li[Cnt]]=c[j][2];
 	for (int i=1;i<=Cnt;i++)
 	  DFS(li[i],i),DSF(li[i],li[i]);
 	Set_up(a,1,n,1,false);Set_up(b,1,Cnt,1,true);
 	return;
 }
void fzj(Node* a,int z,bool flag)
 {
 	if (!a[z].fz) return;
 	a[z].fz=false;a[z].sum=-a[z].sum;
 	a[z].lmi=-a[z].lmi;a[z].lma=-a[z].lma;
 	a[z].rmi=-a[z].rmi;a[z].rma=-a[z].rma;
 	a[z].smi=-a[z].smi;a[z].sma=-a[z].sma;
 	swap(a[z].lmi,a[z].lma);
 	swap(a[z].rmi,a[z].rma);
 	swap(a[z].smi,a[z].sma);
 	if (flag)
 	 for (int i=0;i<2;i++) a[z*2+i].fz=!a[z*2+i].fz;
 	return;
 }
void Modify(Node* a,int x,int y,int z,int o,int p)
 {
 	int mid = x + y >> true, j = z << true;fzj(a,z,x!=y);
 	if (x==o&&y==p) {a[z].fz=!a[z].fz;fzj(a,z,x!=y);return;}
 	if (p<=mid) Modify(a,x,mid,j,o,p),fzj(a,j+1,mid+1!=y); else
 	 if (o>mid) Modify(a,mid+1,y,j+1,o,p),fzj(a,j,x!=mid); else
 	   Modify(a,x,mid,j,o,mid),Modify(a,mid+1,y,j+1,mid+1,p);
 	a[z]=a[j]+a[j+1];
 	return;
 }
Node Query(Node* a,int x,int y,int z,int o,int p)
 {
 	int mid = x + y >> true, j = z << true;fzj(a,z,x!=y);
 	if (x==o&&y==p) return a[z];
 	if (p<=mid) return Query(a,x,mid,j,o,p); else
 	 if (o>mid) return Query(a,mid+1,y,j+1,o,p); else
 	   return Query(a,x,mid,j,o,mid)+
 	   Query(a,mid+1,y,j+1,mid+1,p);
 }
void __Modify(int x,int y)
 {
 	while (rf[x]!=rf[y])
 	 {
 	 	if (h[rf[x]]<h[rf[y]]) swap(x,y);
 	 	Modify(a,1,n,1,sg[rf[x]],sg[x]);
 	 	x=fa[rf[x]];
 	 }
 	if (h[x]>h[y]) swap(x,y);
 	if (x!=y) Modify(a,1,n,1,sg[x]+1,sg[y]);
 	return;
 }
void ___Modify(int x,int y)
 {
 	if (x>y) swap(x,y);
 	if (y-x<=Cnt/2) Modify(b,1,Cnt,1,x,y-1); else
 	 {
 	 	if (x-1) Modify(b,1,Cnt,1,1,x-1);
 	 	Modify(b,1,Cnt,1,y,Cnt);
 	 }
 	return;
 }
void _Modify(int x,int y)
 {
 	if (cl[x]==cl[y]) __Modify(x,y); else
 	  __Modify(x,li[cl[x]]),__Modify(y,li[cl[y]]),
 	  ___Modify(cl[x],cl[y]);
 	return;
 }
Node __Query(int x,int y)
 {
 	static Node k,l;k=Emp,l=Emp;bool flag=false;
 	while (rf[x]!=rf[y])
 	 {
 	 	if (h[rf[x]]<h[rf[y]])
 	 	  swap(x,y),swap(k,l),flag^=true;
 	 	k=Query(a,1,n,1,sg[rf[x]],sg[x])+k;
 	 	x=fa[rf[x]];
 	 }
 	if (h[x]>h[y]) swap(x,y),swap(k,l),flag^=true;
 	if (x!=y) l=Query(a,1,n,1,sg[x]+1,sg[y])+l;
 	if (flag) swap(k,l);
 	return k.Rev(),k+l;
 }
Node ___Query(int x,int y)
 {
 	bool flag=x>y;static Node k;
 	if (flag) swap(x,y);
 	if (y-x<=Cnt/2) k=Query(b,1,Cnt,1,x,y-1); else
 	 {
 	 	k=Query(b,1,Cnt,1,y,Cnt);
 	 	if (x-1) k=k+Query(b,1,Cnt,1,1,x-1);
 	 	flag ^= true;
 	 }
 	if (flag) k.Rev();
 	return k;
 }
int _Query(int x,int y)
 {
 	if (x==y) return false;
 	if (cl[x]==cl[y]) return __Query(x,y).sma;
 	Node k=__Query(x,li[cl[x]]),l=__Query(li[cl[y]],y);
 	return (k+___Query(cl[x],cl[y])+l).sma;
 }
int main()
 {
 	//freopen("input.txt","r",stdin);
 	n=Read();
 	for (int i=1;i<=n;i++) Line(Read(),Read(),Read());
 	Pretreat();m=Read();
    while (m--)
     {
     	static char ch[20];scanf("%s",ch+1);
     	if (ch[1]=='f') _Modify(Read(),Read()); else
     	  printf("%d\n",max(_Query(Read(),Read()),0));
     }
    return 0;
 }
