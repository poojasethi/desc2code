#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
using namespace std;
typedef vector<int> vi; 
typedef vector<vi> vvi; 

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 

const long long mod = (long long)(1e9 + 9);
long long a[10], b[10], x[10];
long long dp[55][1 << 10];
long long calced[55][1 << 10];
int n;

int calc(int p, int mask) {
	if (p == -1)
		return 1;
		
	if (calced[p][mask])
		return dp[p][mask];
	calced[p][mask] = 1;
	long long &res = dp[p][mask];
	res = 0;
					
	int m1 = mask;
	for (int i = 0; i < n; ++i) if (x[i] & (1LL << p))
		m1 |= (1 << i);
	
	for (int i = 0; i < n; ++i) {
		if (m1 & (1 << i))
			res = (res + calc(p - 1, mask | (m1 ^ (1 << i)))) % mod;
	}
	
	res = (res + calc(p - 1, m1)) % mod;
	return res;		
}

long long get() {
	for (int i = 0; i < n; ++i) if (x[i] < 0)
		return 0;
	memset(calced, 0, sizeof(calced));
	long long res = calc(54, 0);
	return res;
}

int main() {
	int tests;
	for (scanf("%d", &tests); tests > 0; --tests) {
		cin >> n;
		for (int i = 0; i < n; ++i)
			cin >> a[i];
		for (int i = 0; i < n; ++i)
			cin >> b[i];
		
		long long res = 0;
		for (int mask = 0; mask < (1 << n); ++mask) {
			int m = 1;
			for (int i = 0; i < n; ++i) {
				if (mask & (1 << i)) {
					x[i] = a[i] - 1;
					m *= -1;
				}			
				else {
					x[i] = b[i];
				}		
			}
			res = (res + get() * m + mod) % mod;
		}
		cout << res << endl;					
	}
	return 0;		
}
