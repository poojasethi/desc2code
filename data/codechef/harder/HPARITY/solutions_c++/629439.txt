#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
using namespace std;
typedef vector<int> vi; 
typedef vector<vi> vvi; 

#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 

const long long mod = (long long)(1e9 + 9);

long long a[10], b[10], x[10], dp[55][512];
int color[55][512], cc;
int n;

long long calc(int j, int mask) {
	//printf("%d %d\n", j, mask);
	if (j == -1) return 1;
	if (color[j][mask] == cc) return dp[j][mask];
	color[j][mask] = cc;
	long long &ans = dp[j][mask];
	ans = 0;
	
	int m1 = 0;
	for (int i = 0; i < n; ++i) if (x[i] & (1LL << j))
		m1 ^= (1 << i);
	
	for (int i = 0; i < n; ++i) {
		if (m1 & (1 << i)) {
			(ans += calc(j - 1, mask | (m1 ^ (1 << i)))) %= mod;
		}
		else if (mask & (1 << i)) {
			(ans += calc(j - 1, mask | m1)) %= mod;
		}
	}		
	(ans += calc(j - 1, mask | m1)) %= mod;	
	
	return ans;
}

long long get() {
	for (int i = 0; i < n; ++i)
		if (x[i] < 0) return 0;
	++cc;		
	//puts("oops");
	return calc(54, 0);		
}

int main() {
	int tests;
	for (scanf("%d", &tests); tests; --tests) {
		scanf("%d", &n);
		for (int i = 0; i < n; ++i)
			cin >> a[i];
		for (int i = 0; i < n; ++i)
			cin >> b[i];
					
		long long res = 0;
		for (int mask = 0; mask < (1 << n); ++mask) {
			int m = 1;
			for (int j = 0; j < n; ++j) {
				if (mask & (1 << j)) {
					x[j] = a[j] - 1;
					m *= -1;
				}
				else 
					x[j] = b[j];
			}
			res = (res +  get() * m + mod) % mod;
		}	
		cout << res << endl;
	}
	return 0;		
}

