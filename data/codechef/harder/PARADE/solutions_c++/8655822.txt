#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
using namespace std;
typedef long long LL;
const int SIZEN=510;
const LL INF=1e18;
int n,m,K;
LL dis[SIZEN][SIZEN];
int S,T;
class Edge{
public:
	int from,to,cap,flow;
	LL cost;
};
vector<Edge> edges;
vector<int> c[SIZEN];
void addedge(int from,int to,int cap,LL cost){
	edges.push_back((Edge){from,to,cap,0,cost});
	edges.push_back((Edge){to,from,0,0,-cost});
	int tot=edges.size()-2;
	c[from].push_back(tot);
	c[to].push_back(tot+1);
}
void make_graph(void){
	S=0,T=2*n+1;
	for(int i=1;i<=n;i++) addedge(S,i,1,0);
	for(int i=1;i<=n;i++) addedge(i+n,T,1,0);
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			if(dis[i][j]!=INF){
				addedge(i,j+n,1,dis[i][j]);
			}
		}
	}
}
LL anscost=0;
LL f[SIZEN];
int father[SIZEN];
bool inq[SIZEN];
queue<int> Q;
bool SPFA(int S,int T){//?￥μ?0~T,á÷á?+1
	for(int i=0;i<=T;i++) f[i]=INF;
	memset(inq,0,sizeof(inq));
	while(!Q.empty()) Q.pop();
	f[S]=0;inq[S]=true;Q.push(S);
	while(!Q.empty()){
		int x=Q.front();Q.pop();inq[x]=false;
		for(int i=0;i<c[x].size();i++){
			Edge &e=edges[c[x][i]];
			if(e.cap<=e.flow) continue;
			if(f[x]+e.cost<f[e.to]){
				f[e.to]=f[x]+e.cost;
				father[e.to]=c[x][i];
				if(!inq[e.to]){
					inq[e.to]=true;
					Q.push(e.to);
				}
			}
		}
	}
	if(f[T]==INF) return false;
	anscost+=f[T];
	int x=T;
	while(x!=S){
		edges[father[x]].flow++;
		edges[father[x]^1].flow--;
		x=edges[father[x]].from;
	}
	return true;
}
int mxf=0;
LL dcost[SIZEN]={0};//?óμúi??μ￥??á÷á?Dèòaμ?o?·?
LL scost[SIZEN]={0};//?ó?°i??μ￥??á÷á??ùDèòaμ?o?·?
void answer(void){
	LL tc;
	for(int i=1;i<=K;i++){
		scanf("%lld",&tc);
		int p=upper_bound(dcost,dcost+mxf+1,tc)-dcost-1;//×￠òatc>0,1êp>=0
		printf("%lld\n",scost[p]+tc*(n-p));
	}
}
void MCMF(void){
	while(SPFA(S,T)){
		mxf++;
		dcost[mxf]=f[T];
		scost[mxf]=anscost;
	}
}
void floyd(void){
	for(int k=1;k<=n;k++){
		for(int i=1;i<=n;i++){
			for(int j=1;j<=n;j++){
				dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);
			}
		}
	}
}
void read(void){
	scanf("%d%d%d",&n,&m,&K);
	for(int i=1;i<=n;i++) for(int j=1;j<=n;j++) dis[i][j]=INF;
	int a,b;LL tmp;
	for(int i=1;i<=m;i++){
		scanf("%d%d",&a,&b);
		scanf("%lld",&tmp);
		dis[a][b]=min(dis[a][b],tmp);
	}
}
int main(){
	read();
	floyd();
	make_graph();
	MCMF();
	answer();
	return 0;
}