#include <algorithm>
#include <numeric>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <list>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cmath>
using namespace std;
// }}}
// pre-written code {{{
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define RREP(i,a,b) for(int i=(int)(a);i<(int)(b);++i)
#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)
#define LET(x,a) __typeof(a) x(a)
//#define IFOR(i,it,c) for(__typeof((c).begin())it=(c).begin();it!=(c).end();++it,++i)
#define ALL(c) (c).begin(), (c).end()
#define MP make_pair
 
#define EXIST(e,s) ((s).find(e)!=(s).end())
 
#define RESET(a) memset((a),0,sizeof(a))
#define SET(a) memset((a),-1,sizeof(a))
#define PB push_back
#define DEC(it,command) __typeof(command) it=command
 
const int INF=0x3f3f3f3f;
 
typedef long long Int;
typedef unsigned long long uInt;
#ifdef __MINGW32__
typedef double rn;
#else
typedef long double rn;
#endif
 
typedef pair<int,int> pii;
 
/*
#ifdef MYDEBUG
#include"debug.h"
#include"print.h"
#endif
*/
// }}}
 
//{{{ io
FILE *file_in=stdin,*file_out=stdout;
#define fin normal_in
#define fout normal_out
//const char fname[]="";
//FILE *fin=fopen(fname,"r"),*fout=fopen(fname,"w");
#ifdef __MINGW32__
#define LLD "%I64d"
#define LLU "%I64u"
#else
#define LLD "%lld"
#define LLU "%llu"
#endif
struct NORMAL_IN{
	bool cnt;
	NORMAL_IN():cnt(true){}
	operator int() const {return cnt;}
#define endl "\n"
	NORMAL_IN& operator>>(int &n){cnt=fscanf(file_in,"%d",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(unsigned int &n){cnt=fscanf(file_in,"%u",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(long long &n){cnt=fscanf(file_in,LLD,&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(unsigned long long &n){cnt=fscanf(file_in,LLU,&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(double &n){cnt=fscanf(file_in,"%lf",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(long double &n){cnt=fscanf(file_in,"%Lf",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(char *c){cnt=fscanf(file_in,"%s",c)!=EOF;return *this;}
	NORMAL_IN& operator>>(string &s){
		s.clear();
		for(bool r=false;;){
			const char c=getchar();
			if(c==EOF){ cnt=false; break;}
			const int t=isspace(c);
			if(!r and !t)r=true;
			if(r){
				if(!t)s.push_back(c);
				else break;
			}
		}
		return *this;
	}
	template<class T>
		NORMAL_IN& operator>>(vector<T> &v){
			int n;fscanf(file_in,"%d",&n);
			REP(i,n){
				T t;*this>>t;
				v.push_back(t);
			}
		}
} normal_in;
 
struct NORMAL_OUT{
	NORMAL_OUT& operator<<(const int &n){fprintf(file_out,"%d",n);return *this;}
	NORMAL_OUT& operator<<(const unsigned int &n){fprintf(file_out,"%u",n);return *this;}
	NORMAL_OUT& operator<<(const long long &n){fprintf(file_out,LLD,n);return *this;}
	NORMAL_OUT& operator<<(const unsigned long long &n){fprintf(file_out,LLU,n);return *this;}
	NORMAL_OUT& operator<<(const double &n){fprintf(file_out,"%lf",n);return *this;}
	NORMAL_OUT& operator<<(const long double &n){fprintf(file_out,"%Lf",n);return *this;}
	NORMAL_OUT& operator<<(const char c[]){fprintf(file_out,"%s",c);return *this;}
	NORMAL_OUT& operator<<(const string &s){fprintf(file_out,"%s",s.c_str());return *this;}
} normal_out;
//}}}
 
const Int mod =  1000003;
 
//{{{ mod function
inline Int normalize(const Int &a, const Int &m=mod){
	return (a%m+m)%m;
}
 
#define NORMALIZE
 
inline Int sum(const Int &a, const Int &b, const Int &m=mod){
	Int r = (a+b)%m;
#ifdef NORMALIZE
	return normalize(r);
#else
	return r;
#endif
}
inline Int diff(Int a,Int b,const Int &m=mod){
	Int r = (a-b+m)%m;
#ifdef NORMALIZE
	return normalize(r);
#else
	return r;
#endif
}
 
inline Int mul(Int a, Int b, const Int &m=mod){
	Int r = a*b%m;
#ifdef NORMALIZE
	return normalize(r);
#else
	return r;
#endif
}
//}}}
//{{{ pow
/* (x^k)%m */
inline Int powMod(Int x, Int k, Int m=mod){
	Int res;
	if(k==0) return 1;
	res = powMod(x,k/2,m);
	res = mul(res,res,m);
	if(k%2) res = mul(res,x,m);
	return res;
}
//}}}
 
int n;
char p[110];
int val[4];
Int ans[2][2][2][2];
Int ans2[2][2][2][2];
 
// priority
// 0: ()
// 1: !
// 2: v ^ \
 
pii expr(int), term(int), fact(int);
 
int operate(int l, int r, char c){
	if(c=='v'){
		return l or r;
	}else if(c=='^'){
		return l and r;
	}else if(c=='\\'){
		return l and !r;
	}else{
		assert(false);
	}
}
 
pii expr(int i=0){
	pii t = term(i);
	i = t.first;
	int r = t.second;
	char c = p[i];
	while(c=='v' or c=='^' or c=='\\'){
		i++;
		pii t0 = term(i);
		r = operate(r,t0.second,c);
		i = t0.first;
		c = p[i];
	}
	return MP(i,r);
}
 
pii term(int i=0){
	int r = 0;
	if(p[i]=='!'){
		i++;
		pii t = term(i);
		r = !t.second;
		i = t.first;
	}else{
		pii t = fact(i);
		r = t.second;
		i = t.first;
	}
	return MP(i,r);
}
 
pii fact(int i=0){
	int r;
	if(p[i]=='('){
		i++;
		pii t = expr(i);
		r=t.second;
		i = t.first;
		assert(p[i]==')');
		i++;
	}else{
		if(p[i]=='Z'){
			r = val[0];
		}else if(p[i]=='P'){
			r = val[1];
		}else if(p[i]=='D'){
			r = val[2];
		}else if(p[i]=='A'){
			r = val[3];
		}else{
			assert(false);
		}
		i++;
	}
	return MP(i,r);
}
 
void main2(){
	fin>>p;
	Int S=0;
	REP(b,(1<<4)){
		REP(i,4)val[i]=(b&(1<<i))?1:0;
		pii s = expr();
		Int d=ans[val[0]][val[1]][val[2]][val[3]];
 
		/*
		REP(i,4)cout<<val[i]<<" ";
		cout<<endl;
 
		cout<<s.first<<" "<<s.second<<endl;
		cout<<d<<endl;
		cout<<endl;
		*/
		if(s.second)S=sum(S,d,mod);
	}
	fout<<S<<endl;
}
 
vector<vector<Int> > calc(Int da,Int d, Int a, Int all){
	vector<vector<Int> > ret(2,vector<Int>(2));
	ret[1][0]=diff(d,da,mod);
	ret[0][1]=diff(a,da,mod);
	ret[1][1]=da;
	ret[0][0]=diff(all,sum(ret[1][1],sum(ret[0][1],ret[1][0],mod),mod),mod);
	/*
	cout<<"input: ";
	cout<<da<<" "<<a<<" "<<d<<" "<<all<<endl;
	cout<<"result: "<<endl;
	REP(i,2){
		REP(j,2)cout<<ret[i][j]<<" ";
		cout<<endl;
	}
	cout<<endl;
	*/
	return ret;
}
 
void init(){
	memset(ans,0,sizeof(ans));
	vector<vector<Int> > all,z,zp;
	all=calc(
			powMod(2,n,mod),
			powMod(2,powMod(2,n-1,mod-1),mod),
			powMod(2,n+1,mod),
			powMod(2,powMod(2,n,mod-1),mod)
			);
	z=calc(
			powMod(2,n-1,mod),
			powMod(2,diff(powMod(2,n-1,mod-1),1,mod-1),mod),
			powMod(2,n,mod),
			powMod(2,diff(powMod(2,n,mod-1),1,mod-1),mod)
		  );
	zp=calc(
			powMod(2,n-1,mod),
			powMod(2,diff(powMod(2,n-1,mod-1),1,mod-1),mod),
			powMod(2,n-1,mod),
			powMod(2,diff(powMod(2,n,mod-1),2,mod-1),mod)
		   );
	REP(d,2)REP(a,2){
		vector<vector<Int> > v = calc(zp[d][a],z[d][a],z[d][a],all[d][a]);
		REP(i,2)REP(j,2)ans[i][j][d][a]=v[i][j];
	}
	//REP(i,2)REP(j,2)REP(d,2)REP(a,2)cout<<i<<" "<<j<<" "<<d<<" "<<a<<" "<<ans[i][j][d][a]<<endl;
}
 
bool is_Z(const vector<int> &v){
	return v[0]==0;
}
bool is_P(const vector<int> &v){
	return v[(1<<n)-1]==1;
}
bool is_D(const vector<int> &v){
	REP(b,(1<<n)){
		int bn=(1<<n)-1-b;
		if(v[b]!=1-v[bn])return false;
	}
	return true;
}
bool is_A(const vector<int> &v){
	REP(i,n){
		REP(a,(1<<i))REP(a2,(1<<(n-1-i))){
			int A1 = (a2<<(i+1))+a;
			int A2 = (a2<<(i+1))+(1<<i)+a;
			if(v[A1]!=v[A2])continue;
			REP(b,(1<<i))REP(b2,(1<<(n-1-i))){
				int B1 = (b2<<(i+1))+b;
				int B2 = (b2<<(i+1))+(1<<i)+b;
				if(v[B1]!=v[B2])return false;
			}
		}
	}
	return true;
}
 
void calc(){
	const int B=(1<<n);
 
	/*
	int s=0;
	REP(t,1<<B){
		vector<int> v(B);
		REP(b,B){
			v[b]=(t&(1<<b))?1:0;
		}
		if(is_A(v))s++;
	}
	cout<<s<<endl;
	return;
	*/
 
	memset(ans2,0,sizeof(ans2));
	REP(p,1<<4){
		int i = (p&(1<<0))?1:0;
		int j = (p&(1<<1))?1:0;
		int k = (p&(1<<2))?1:0;
		int l = (p&(1<<3))?1:0;
		REP(t,1<<B){
			vector<int> v(B);
			REP(b,B){
				v[b]=(t&(1<<b))?1:0;
			}
			bool valid=true;
			if(i){
				if(!is_Z(v))valid=false;
			}else{
				if(is_Z(v))valid=false;
			}
			if(j){
				if(!is_P(v))valid=false;
			}else{
				if(is_P(v))valid=false;
			}
			if(k){
				if(!is_D(v))valid=false;
			}else{
				if(is_D(v))valid=false;
			}
			if(l){
				if(!is_A(v))valid=false;
			}else{
				if(is_A(v))valid=false;
			}
			if(valid)ans2[i][j][k][l]++;
		}
	}
	REP(i,2)REP(j,2)REP(k,2)REP(l,2){
		cout<<i<<" "<<j<<" "<<k<<" "<<l<<" "<<ans[i][j][k][l]<<" "<<ans2[i][j][k][l]<<endl;
	}
}
 
//{{{ main function
int main() {
	fin>>n;
	init();
//	calc();
//	return 0;
	int T;fin>>T;
	REP(ct, T){
		//		fout<<"Case "<<ct+1<<": ";
		main2();
	}
	return 0;
} 