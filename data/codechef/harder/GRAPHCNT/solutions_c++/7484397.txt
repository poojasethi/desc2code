#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#include<iostream>
#define pb push_back
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
#define min(a,b) ((a)<(b)?(a):(b))
using namespace std;
typedef long long LL;
typedef double db;
const int N=110000;
vector<int> p[N];
vector<int> to[N];
vector<int>gua[N];
int semi[N],dom[N];
int flag[N];
vector<int> son[N];
int size[N];
int n,m;
int fa[N],dfn[N],id[N],gt;
void dfs(int x){
	dfn[x]=++gt;id[gt]=x;
	rep(i,0,p[x].size()-1)if(!dfn[p[x][i]]){
		fa[p[x][i]]=x;dfs(p[x][i]);
	}
}
int bfa[N],best[N];
int get(int x){
	if(bfa[x]==x)return x;
	int gg=get(bfa[x]);
	if(dfn[semi[best[bfa[x]]]]<dfn[semi[best[x]]]){
		best[x]=best[bfa[x]];
	}
	bfa[x]=gg;
	return gg;
}
void DD(int x){
	size[x]=1;
	rep(i,0,son[x].size()-1){
		int y=son[x][i];
		DD(y);
		size[x]+=size[y];
	}
}
void doit(){
	rep(i,2,n)son[dom[i]].pb(i);
	DD(1);
	LL ans=0;
	int pre=1;
	rep(i,0,son[1].size()-1){
		int x=son[1][i];
		ans+=pre*1ll*size[x];
		pre+=size[x];
	}
	cout<<ans<<endl;
}
int main(){
	scanf("%d%d",&n,&m);
	rep(i,1,m){
		int a,b;scanf("%d%d",&a,&b);
		p[a].pb(b);to[b].pb(a);
	}
	dfs(1);
	rep(i,1,gt){
		semi[id[i]]=id[i];
		bfa[id[i]]=id[i];
		best[id[i]]=id[i];
	}
	per(xu,gt,2){
		int y=id[xu];
		int temp=1e9;
		rep(i,0,to[y].size()-1){
			int x=to[y][i];
			if(!dfn[x])continue;
			get(x);
			temp=min(temp,dfn[semi[best[x]]]);
		}
		semi[y]=id[temp];
		gua[semi[y]].pb(y);
		rep(i,0,gua[fa[y]].size()-1){
			int x=gua[fa[y]][i];
			get(x);
			int gg=best[x];
			if(semi[gg]==semi[x])dom[x]=semi[x];
			else flag[x]=gg;
		}
		
		bfa[y]=fa[y];
		
		
	}
	
	rep(i,2,gt)if(flag[id[i]])dom[id[i]]=dom[flag[id[i]]];
	
	//rep(i,1,n)printf("sem[%d]=%d\n",i,semi[i]);
	doit();
	return 0;
}
