#include <iostream>
#include <vector>
#include <stdio.h>
using namespace std;
typedef pair<int,int> pii;

const int Nmax=200000;
vector<int> g[Nmax],rG[Nmax],bct[Nmax],tree[Nmax];
int idom[Nmax],sdom[Nmax],us[Nmax],id[Nmax],rId[Nmax],par[Nmax],mn[Nmax],anc[Nmax],st[Nmax];
vector<pii> g2[Nmax];
const int Mmax=200000;
bool useful[Mmax];

void Init(int n,int m){
	for(int i=0;i<n;i++){
		g[i].clear();
		rG[i].clear();
		bct[i].clear();
		tree[i].clear();
		idom[i]=-1;
		sdom[i]=i;
		id[i]=-1;
		mn[i]=i;
		anc[i]=-1;
		g2[i].clear();
		st[i]=0;
	}
	for(int i=0;i<m;i++)
		useful[i]=false;
}

void AddEdge(int a,int b){
	g[a].push_back(b);
	rG[b].push_back(a);
}

int Find(int v){
	if(anc[v]==-1)
		return v;
	int a=Find(anc[v]);
	if(id[sdom[mn[anc[v]]]]<id[sdom[mn[v]]])
		mn[v]=mn[anc[v]];
	return anc[v]=a;
}

void Link(int c,int p){
	anc[c]=p;
}

void Dfs(int v,int p,int& i){
	if(id[v]!=-1)
		return;
	id[v]=i;
	rId[i++]=v;
	par[v]=p;
	for(int ii=0;ii<g[v].size();ii++){

		int c=g[v][ii];
		Dfs(c,v,i);
	}
}

void Calc(){
	int n=0;
	Dfs(0,-1,n);
	for(int i=n-1;i>0;i--){
		int w=rId[i];
		for(int ii=0;ii<rG[w].size();ii++){
			int v=rG[w][ii];
			if(id[v]==-1)
				continue;
			Find(v);
			if(id[sdom[mn[v]]]<id[sdom[w]])
				sdom[w]=sdom[mn[v]];
		}
		bct[sdom[w]].push_back(w);
		for(int i=0;i<bct[par[w]].size();i++){
			int v=bct[par[w]][i];
			Find(v);
			us[v]=mn[v];
		}
		bct[par[w]].clear();
		Link(w,par[w]);
	}
	for(int i=1;i<n;i++){
		int w=rId[i];
		if(sdom[w]==sdom[us[w]])
			idom[w]=sdom[w];
		else
			idom[w]=idom[us[w]];
	}
}
int sm[110110];
void Dfs2(int v){
	sm[v]=1;
	for(int i=0;i<tree[v].size();i++){
		int ch=tree[v][i];
		Dfs2(ch);
		sm[v]+=sm[ch];
	}
}

int main(){
	int n,m;
	while(scanf("%d%d",&n,&m)==2){
		Init(n,m);
		for(int i=0;i<m;i++){
			int s,t;
			scanf("%d%d",&s,&t);
			AddEdge(--s,--t);
			g2[s].push_back(make_pair(t,i));
		}
		Calc();
		long long sol=0;
		for(int i=1;i<n;i++)
			if(id[i]!=-1){
				sol++;
				//cout<<i<<" "<<idom[i]<<endl;
				tree[idom[i]].push_back(i);
			}
		Dfs2(0);
		long long curr=0;
		for(int i=0;i<tree[0].size();i++){
			int ch=tree[0][i];
			sol+= sm[ch]*curr;
			curr+=sm[ch];
		}
		cout<<sol<<endl;
		break;
	}
}