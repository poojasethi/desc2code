//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define vt(a) vector <ll> a
#define st(a) set <ll> a
#define sti(a) set <ll>::iterator a
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%lld",&a)
#define sm(a,b) scanf("%lld%lld", &a, &b)
#define pr(a) printf("%d\n", a)
#define pm(a,b) printf("%lld %lld\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define PI 3.14159265359
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
using namespace std;
typedef complex<double> base;
void fft (vector<base> & a, bool invert) {
	int n = (int) a.size();
 
	for (int i=1, j=0; i<n; ++i) {
		int bit = n >> 1;
		for (; j>=bit; bit>>=1)
			j -= bit;
		j += bit;
		if (i < j)
			swap (a[i], a[j]);
	}
 
	for (int len=2; len<=n; len<<=1) {
		double ang = 2*PI/len * (invert ? -1 : 1);
		base wlen (cos(ang), sin(ang));
		for (int i=0; i<n; i+=len) {
			base w (1);
			for (int j=0; j<len/2; ++j) {
				base u = a[i+j],  v = a[i+j+len/2] * w;
				a[i+j] = u + v;
				a[i+j+len/2] = u - v;
				w *= wlen;
			}
		}
	}
	if (invert)
		for (int i=0; i<n; ++i)
			a[i] /= n;
}

void multiply (const vector<int> & a, const vector<int> & b, vector<int> & res) {
	vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
	size_t n = 1;
	while (n < max (a.size(), b.size()))  n <<= 1;
	n <<= 1;
	fa.resize (n),  fb.resize (n);
 
	fft (fa, false),  fft (fb, false);
	for (size_t i=0; i<n; ++i)
		fa[i] *= fb[i];
	fft (fa, true);
 
	res.resize (n);
	for (size_t i=0; i<n; ++i)
		res[i] = (int) (fa[i].real() + 0.5);
}

set<ll> S;
set<ll> ::iterator it;
ll nums[500000], cumulative[500000];
int hash[30000000];
vector<int> product;
int main()
{
	ll i, j, t, n, m, k, l, r, mini, maxi, temp, flag = 0LL, result;
	int cnt;
	sc(n);
	cumulative[0] = 0LL;
	fre(i, 1, n)
	{
		sc(nums[i]);
		cumulative[i] = cumulative[i-1] + nums[i];
		if(nums[i]==0)
			flag = 1LL;
	}
	if(n<=2000)
	{	
		fre(i, 0, n)
			fre(j, i+1, n)
				S.insert(cumulative[j] - cumulative[i]);
		pr((int)S.sz() - 1);
	}
	else if(2000 < n && n <=20000)
	{
		fre(i, 0, n)
			fre(j, i+1, n)
				hash[cumulative[j] - cumulative[i]] = 1;
		cnt = 0;
		fr(i, 0, 30000000)
			cnt = cnt + (int)hash[i];
		pr(cnt - 1);
	}
	else
	{
		cnt = 0;
		maxi = cumulative[n];
		vector<int> num1(maxi+10, 0);
		vector<int> num2(maxi+10, 0);
		fre(i, 0, n)
			num1[cumulative[i]] = num2[maxi - cumulative[i]] = 1;
		multiply(num1, num2, product);
		m = min(2*maxi + 1, (ll)product.sz());
		fr(i, maxi+1, m)
			cnt = cnt + min(1, product[i]);
		cnt = cnt + flag;
		pr(cnt - 1);
	}
return 0;
}
