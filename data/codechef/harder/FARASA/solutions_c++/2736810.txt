#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>
#include<list>
#include<complex>
#include<string>
#include<utility>
#include<numeric>
#include<iterator>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<climits>
#include<ctime>
#include<cstring>

#define ALL(c)  c.begin(), c.end()
#define TR(c, it)   for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define MAX(a, b)   ((a) > (b) ? (a) : (b))
#define gc  getchar_unlocked
#define lli long long int
#define inf INT_MAX
#define mininf INT_MIN
#define pb push_back
#define mp  make_pair
#define time   QueryPerformanceCounter
#define qp  QuadPart
#define LI LARGE_INTEGER
#define PI  3.14159265358979323846264338327950288

using namespace std;

typedef complex<double> base;

lli A[200100], max_sum = 20000000 ;
int N, lookup_table[20000010] = {0};

inline void scanint(lli &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(; ((c<48 || c>57) && c != '-'); c = gc());
    if(c=='-')
    {
        neg = 1;
        c = gc();
    }
    for(; c>47 && c<58 ; c = gc())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
    if(neg)
        x = -x;
}



void fft (vector<base> & a, bool invert)
{
	int n = (int) a.size();

	for (int i=1, j=0; i<n; ++i) {
		int bit = n >> 1;
		for (; j>=bit; bit>>=1)
			j -= bit;
		j += bit;
		if (i < j)
			swap (a[i], a[j]);
	}

	for (int len=2; len<=n; len<<=1) {
		double ang = 2*PI/len * (invert ? -1 : 1);
		base wlen (cos(ang), sin(ang));
		for (int i=0; i<n; i+=len) {
			base w (1);
			for (int j=0; j<len/2; ++j) {
				base u = a[i+j],  v = a[i+j+len/2] * w;
				a[i+j] = u + v;
				a[i+j+len/2] = u - v;
				w *= wlen;
			}
		}
	}
	if (invert)
		for (int i=0; i<n; ++i)
			a[i] /= n;
}

void multiply (const vector<int> & a, const vector<int> & b, vector<int> & res)
{
	vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
	size_t n = 1;
	while (n < max (a.size(), b.size()))  n <<= 1;
	n <<= 1;
	fa.resize (n),  fb.resize (n);

	fft (fa, false),  fft (fb, false);
	for (size_t i=0; i<n; ++i)
		fa[i] *= fb[i];
	fft (fa, true);
	res.resize (n);
	for (size_t i=0; i<n; ++i)
		res[i] = int (fa[i].real() + 0.5);
}

int main()
{
    int ans = 0, i , j;
    lli size = 0;
    scanf("%d",&N);
    for( i = 1 ;i <= N; i++ )
    {
        //scanf("%lld",&A[i]);
		scanint(A[i]);
		size += A[i];
    }
    if(N <= 2000)
    {
        set<lli>sums;
        for( i = 1 ; i <= N; i++ )
        {
            lli value = 0;
            for( j = i ; j <= N ; j++)
            {
                value += A[j];
                sums.insert(value);
            }
        }
        printf("%d",(sums.size()-1));
    }

    else if(N <= 20000)
    {
        for( i = 1;i <= N; i++ )
        {
            lli value = 0;
            for( j = i ; j <= N ; j++)
            {
                value += A[j];
                lookup_table[value] = 1;
            }
        }
        ans = 0;
        for( i = 1 ;i <= max_sum ; i++ )ans += lookup_table[i];
        printf("%d",ans-1);
    }
    else
    {

        vector<int> B(size+1),C(size+1),res;
        lli s = 0,t = 0;
        //for(i = 0;i < size+1 ; i++)B[i] = C[i] = 0;
        B[0] = C[size] = 1;
        for(i = 1; i <= N ; i++ )
        {
            s = t + A[i];
            B[s] = 1;
            C[size-s] = 1;
            t = s;
        }
        multiply(B,C,res);
        for( i = size+1 ; i < res.size() ; i++)ans += (res[i]>0);
        printf("%d",ans-1);
    }
    return 0;
}
