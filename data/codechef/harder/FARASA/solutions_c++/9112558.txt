//BISMILLAHIR RAHMANIR RAHIM
//SPOJ-POLYMUL
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>
#include<queue>
#include<set>
#include <iostream>
#include<stack>
#include<map>
#include<string>
#include<vector>
#include<algorithm>

#define sn scanf
#define pf printf
#define pb push_back
#define mp make_pair

using namespace std;
const double PI= 2*acos(0);
typedef long long int ll;


#define FOR(i,a,b) for(int i=(a);i<(b);i++)
//fast fft;


struct complex{
	double r,v;
	complex(double a=0,double b=0):r(a),v(b){}
	inline complex operator+(const complex& b){return complex(r+b.r,v+b.v);}
	inline complex operator-(const complex& b){return complex(r-b.r,v-b.v);}
	inline complex operator*(const complex& b){return complex(r*b.r-v*b.v,v*b.r+r*b.v);}
};
typedef complex base;
inline void swap(complex& a,complex& b){complex t(a);a=b;b=t;}

void fft (vector<base> & a, bool invert) {
	int n = (int) a.size();

	for (int i=1, j=0; i<n; ++i) {
		int bit = n >> 1;
		for (; j>=bit; bit>>=1)
			j -= bit;
		j += bit;
		if (i < j)
			swap (a[i], a[j]);
	}

	for (int len=2; len<=n; len<<=1) {
		double ang = 2*PI/len * (invert ? -1 : 1);
		base wlen (cos(ang), sin(ang));
		for (int i=0; i<n; i+=len) {
			base w (1);
			for (int j=0; j<len/2; ++j) {
				base u = a[i+j],  v = a[i+j+len/2] * w;
				a[i+j] = u + v;
				a[i+j+len/2] = u - v;
				w =w* wlen;
			}
		}
	}
	if (invert)
		for (int i=0; i<n; ++i)
			a[i].r =a[i].r / n;
}
void multiply (const vector<int> & a, const vector<int> & b, vector<int> & res) {
	vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
	size_t n = 1;
	while (n < max (a.size(), b.size()))  n <<= 1;
	n <<= 1;
	fa.resize (n),  fb.resize (n);

	fft (fa, false),  fft (fb, false);
	for (size_t i=0; i<n; ++i)
		fa[i] = fa[i]*fb[i];
	fft (fa, true);

	res.resize (n);
	for (size_t i=0; i<n; ++i)
		res[i] = (int) (fa[i].r + 0.5);
}
int N;
vector<int>ar1,ar2,resx;
ll A[3000005],sum[3000005];
int method3()
{
    int i,j,k,n,m;
    memset(sum,0,sizeof(sum));
    m=0;
    for(i=1;i<=N;i++)
    {
        m=m+A[i];
        sum[m]=1;
    }
    sum[0]=1;
    for(i=0;i<=m;i++)
    {
        ar1.pb(sum[i]);
    }
    n=ar1.size();
    for(i=n-1;i>=0;i--)
    {
        ar2.pb(ar1[i]);
    }
    int res=0;
    multiply(ar1,ar2,resx);
    for(i=n;i<(int)resx.size();i++)
    {
        if(resx[i]>0)res++;
    }
    return res;
}
int method2() {
    int *s = new int[20010];
    bool *t = new bool[20000010];
    s[0] = 0;
    s[1] = A[1];
    FOR(i,2,N+1) s[i] = s[i-1] + A[i];
    FOR(i,1,20000001) t[i] = 0;
    FOR(i,1,N+1) FOR(j,0,i) t[s[i]-s[j]] = 1;
    int res = 0;
    FOR(i,1,20000001) res += t[i];
    delete []s;
    delete []t;
    return res;
}

int method1() {
    ll *s = new ll[2010];
    ll *t = new ll[2001000];
    s[0] = 0;
    s[1] = A[1];
    FOR(i,2,N+1) s[i] = s[i-1] + A[i];
    int k = 0;
    FOR(i,1,N+1) FOR(j,0,i) t[k++] = s[i]-s[j];
    sort(t,t+k);
    int res = unique(t,t+k)-t;
    delete[] s;
    delete[] t;
    return res;
}
int main() {
    scanf("%d",&N);
    long long t = N, s = 0;
    FOR(i,1,N+1) {
        scanf("%lld",&A[i]);
        s += A[i];
    }

    int res;
    if(N <= 2000) res = method1();
    else if(N <= 20000) res = method2();
    else res = method3();
    printf("%d\n",res-1);

  return 0;
}
