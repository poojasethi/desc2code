#include<cmath>
#include<queue>
#include<complex>
#include<utility>
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
using namespace std;
#define _mp make_pair
#define _f first
#define _s second
#define MAX 200008
#define LL  long long int
#define MOD 1000000007 
#define PI acos(-1)
/* Thank's to e-maxx.ru for makes my life easy */
typedef complex<double> base;
void FFT(vector<base> &a,bool invert)
{
	int n=a.size();
	if(n==1)
	  return ;
    vector<base> a0(n/2),a1(n/2);
    for(int i=0,j=0;i<n;i+=2,++j)
    {
    	a0[j]=a[i];
    	a1[j]=a[i+1];
    }
    FFT(a0,invert);
    FFT(a1,invert);
    double ang=2*PI/n*(invert?-1:1);
    base w(1),wn(cos(ang),sin(ang));
    for(int i=0;i<n/2;i++)
    {
    	a[i]=a0[i]+w*a1[i];
    	a[i+n/2]=a0[i]-w*a1[i];
    	if(invert)
    	  a[i]/=2,a[i+n/2]/=2;
  	    w=w*wn;
    }
}
void Polynomial_multiply(vector<int> &a,vector<int> &b,vector<int> &res)
{
   vector<base> fa(a.begin(),a.end()),fb(b.begin(),b.end());
   size_t n=1;
   while(n<max(a.size(),b.size())) n<<=1;
   n<<=1;
   fa.resize(n),fb.resize(n);
   FFT(fa,false);
   FFT(fb,false);
   for(size_t i=0;i<n;i++)
      fa[i]*=fb[i];
   FFT(fa,true);
   res.resize(n);
   for(size_t i=0;i<n;i++)
     res[i]=int(fa[i].real()+0.5);
}

/*FFT end's */
vector<int> diffsum;
vector<int>::iterator it;
int A[MAX];
int SUMHASH[20000005]={0};
int main()
{
    	int n,value;
    	cin>>n;
    	for(int i=0;i<n;i++)
    	  scanf("%d",&A[i]);
  	    if(n<=2000)
  	    {
  	    
  	    	for(int i=0;i<n;i++)
  	    	{
   		       value=0;
			  for(int j=i;j<n;j++)
  	    	  {
	    	     value+=A[j];
				 diffsum.push_back(value);	
    	      }
    	    }
    	    sort(diffsum.begin(),diffsum.end());
    	    it=unique(diffsum.begin(),diffsum.end());
    	    diffsum.resize(distance(diffsum.begin(),it));
    	    printf("%d\n",diffsum.size()-1);
    	    return 0;
  	    }
  	    if(n<=20000)
  	    {
  	    	int MAX_SUM=0;
   		      for(int i=0;i<n;i++)
  	    	   {
   		        value=0;
			      for(int j=i;j<n;j++)
  	    	      {
	    	       value+=A[j];
			       SUMHASH[value]=1;	
    	          }
    	          if(MAX_SUM<value)
    	             MAX_SUM=value;
    	       }
    	       int ans=0;
    	      for(int i=0;i<=MAX_SUM;i++)
			    if(SUMHASH[i])
				   ans++;
			  printf("%d\n",ans-1);
			  return 0;      
 	  	}
 	  	vector<int> a,b;
 	  	int sum=0;
 	  	for(int i=0;i<n;i++)
 	  	   sum+=A[i];
 	    a.resize(sum+1);
 	    b.resize(sum+1);
 	    int newsum=sum;
 	    sum=0;
 	    a[0]=1;
 	    b[newsum]=1;
 	    for(int i=0;i<n;i++)
 	    {
    	  sum+=A[i];
    	  a[sum]=1;
    	  b[newsum-sum]=1;
   	    }
   	     vector<int> c;
   	     Polynomial_multiply(a,b,c);
   	     int x=c.size();
   	     int ans=0;
   	     for(int i=sum+1;i<x;i++)
   	       if(c[i])
   	         ans++;
        printf("%d\n",ans-1);
}

