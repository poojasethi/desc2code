#include <stdio.h>


int n,nc;
short a[1000001];
short b[1000001];
short fin[1000001];
int c[10];

inline void readNo(short* num) {
    register int d,no=n-1;
    while((d=getchar())<'0');
    num[no]=d-'0';
    while(no --> 0)
        num[no]=getchar()-'0';
}

inline int scanInt() {
      register int retInt = 0,d;
      while((d=getchar())<'0');
      do {
            retInt = (retInt<<3) + (retInt<<1) + (d-'0');
      }while ((d = getchar()) >= '0');
      return retInt;
}

bool isBigger(short *a,short *b) {
    for(int x=nc-1;x>=0;x--){
        if(a[x]!=b[x]) {
            if(a[x]>b[x])
                return true;
            return false;
        }
    }
    return false;
}
bool isRevSmaller(short *a,short *b) {
    for(int x=0;x<nc;x++){
        if(a[x]!=b[x]) {
            if(a[x]<b[x])
                return true;
            return false;
        }
    }
    return false;
}

// Lower limit, for reverse number calcs
int l;

// Fill the remaining digits to get the minimum possible number after the left and right sides have been properly adjusted ;)
inline void addFiller(){
    int st=0;
    for(int i=n;i>=l;i--) {
        while(c[st]==0) st++;
        c[st]--;
        fin[i]=st;
    }
}

short *mn,*mx;
short chMax;

// Adjust the digits of the number from the right so that it is smaller in the reversed world
bool compRevSol(){
    // if left meets right ... see if its a solution
    if(l>n)
        return isRevSmaller(fin,mn);

    short x=mn[l];

    if(c[x]!=0) {
        if(l>0) {
            if(x<chMax) {
                short y=chMax;
                do { y--;
                }
                while(y>=0 && c[y]==0);
                if(y>x)
                    return false;
                if(y==x){
                    y=chMax;
                    do {
                        y++;
                    } while(y<10 && c[y]==0);
                    if(y<10)
                        return false;
                }
            }
        }
        else
            chMax=0;
        fin[l++]=x;
        if(x>chMax)
            chMax=x;
        c[x]--;
        if(compRevSol())
            return true;
        c[x]++;
        l--;
        if(chMax==x){
            chMax=fin[0];
            for(int i=1;i<l;i++)
                if(chMax<fin[i])
                    chMax=fin[i];
        }
    }
    do {
        x--;
    }while(x>=0 && c[x]==0);
    if(x<0)
        return false;
    if(l>0) {
            if(x<chMax) {
                short y=chMax;
                do { y--;
                }
                while(y>=0 && c[y]==0);
                if(y>x)
                    return false;
                if(y==x){
                    y=chMax;
                    do {
                        y++;
                    } while(y<10 && c[y]==0);
                    if(y<10)
                        return false;
                }
            }
        }
    fin[l++]=x;
    c[x]--;
    addFiller();
    return true;
}

// Adjust the digits from the left so that the no is greater than both the numbers
bool compSol(){

    short x=mx[n];//the n'th digit of the larger number

    while(c[x]!=0 && n>0){
        fin[n]=x;
        c[x]--;
        n--;
        x=mx[n];
    }

    do {
        do {
            x++;
        }while(x<10 && c[x]==0);
        while(x<10) {
            fin[n]=x;
            c[x]--;
            n--;
            if(compRevSol())
                return true;
            c[x]++;
            n++;
            do {
                x++;
            }while(x<10 && c[x]==0);
        }
        n++;
        c[fin[n]]++;
        x=mx[n];
    } while(n<nc);
    return false;
}

inline void printNo(short *num){
    for(int x=nc-1;x>=0;x--){
        printf("%c",num[x]+'0');
    }
    printf("\n");
}


int main()

{
    int t=scanInt();
    while(t --> 0) {
        l=0;
        nc=n=scanInt();
        readNo(a);
        readNo(b);
        if(isBigger(a,b))
            mx=a;
        else
            mx=b;

        if(isRevSmaller(a,b))
            mn=a;
        else
            mn=b;
        //printf("Max=");printNo(mx);
        //printf("Min=");printNo(mn);
        int d;
        while((d=getchar())<'0');
        c[d-'0']++;
        int no=n-1;
        while(no --> 0)
            c[getchar()-'0']++;

        n--;
        if(compSol()){
            printNo(fin);
        } else {
            printf("-1\n");
        }
        for(int x=0;x<10;x++)
            c[x]=0;

    }
    return 0;

}

