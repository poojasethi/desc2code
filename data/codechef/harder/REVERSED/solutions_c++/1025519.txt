#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <cstring>
#include <fstream>
using namespace std;
#define all(x) (x).begin(),(x).end()
 
#define vs vector <string>
#define vi vector <int>
#define p(X) push_back((X))
 
#define fir(i,j,n) for(int (i)=(j);(i)<(n);(i)++)
#define fire(i,j,n) for(int (i)=(j);(i)<=(n);(i)++)
#define firr(i,j,n) for(int (i)=(j);(i)>(n);(i)--)
#define firre(i,j,n) for(int (i)=(j);(i)>=(n);(i)--)
#define tr(v,it) for(typeof(v.begin()) it=v.begin();it!=v.end();it++)
 
#define srt(v) sort((v).begin(),(v).end())
#define srtc(v) sort(v.begin(),v.end(),cmp)
 
#define _bc(i) __builtin_popcount(i)
 
string lower(string s) {for(int i=0;i<s.size();i++) s[i]=tolower(s[i]);return s;}
vector<string> sep(string s,char c) { string temp;vector<string> res;for(int i=0;i<s.size();i++) { if (s[i]==c) {if (temp!="") res.push_back(temp);temp="";continue;}temp=temp+s[i];}if (temp!="") res.push_back(temp);return res;}
template<class T> T toint(string s)
{
	stringstream ss(s);
	T ret;
	ss>>ret;
	return ret;
}
template<class T> string tostr(T inp)
{
	string ret;
	stringstream ss;ss<<inp;
	ss>>ret;
	return ret;
}
template<class T> void D(T A[],int n) {for(int i=0;i<n;i++) cout<<A[i]<<" ";cout<<endl;}
template<class T> void D(vector<T> A,int n=-1) {if (n==-1) n=A.size();for(int i=0;i<n;i++) cout<<A[i]<<" ";cout<<endl;}
char buf[2][1000003];
char C[1000003];
char *P[2];
int len;
int cnt[10];
int rle[2][1000003][2];
int size[2];
char op[1000003];
int si;
int ei;
bool anse;
bool gr;
int sn;
 
bool check(int ind) {
	int fnd=0;
	int tmp=si;
	if (!gr) {
		firre(i,9,0) {
			if (cnt[i]<=0) continue;
			if (i>rle[1][tmp][0]) {fnd=1;break;}
			if (i<rle[1][tmp][0]) {fnd=-1;break;}
			if (rle[1][tmp][1]==cnt[i]) {tmp++;continue;}
			if (rle[1][tmp][1]>cnt[i]) {fnd=-1;break;}
			if (i<rle[1][tmp+1][0]) {fnd=-1;break;}
			fnd=1;break;
		}
		if (fnd<=0) return false;
	}
	fnd=0;
	tmp=size[0]-1;
	fir(i,0,10) {
		if (cnt[i]<=0) continue;
		if (i<rle[0][tmp][0]) {fnd=-1;break;}
		if (i>rle[0][tmp][0]) {fnd=1;break;}
		if (rle[0][tmp][1]==cnt[i]) {tmp--;continue;}
		if (rle[0][tmp][1]>cnt[i]) {fnd=1;break;}
		if (i<rle[0][tmp-1][0]) {fnd=-1;break;}
		fnd=1;break;
	}
	if (fnd>0) return false;
	if (fnd<0) return true;
	return sn<0;
}
 
int main() {
	int tc;scanf("%d",&tc);
	while(tc--) {
		memset(cnt,0,sizeof(cnt));size[1]=size[0]=0;
		scanf("%d",&len);
		scanf("%s",&buf[0]);
		scanf("%s",&buf[1]);
		int cmp=strcmp(buf[0],buf[1]);
		if (cmp>0) {P[1]=buf[0];}
		else {P[1]=buf[1];}
		P[0]=buf[0];
		int ti=len;
		while(ti>0) {
			ti--;
			if (buf[0][ti]==buf[1][ti]) continue;
			if (buf[1][ti]<buf[0][ti]) P[0]=buf[1];
			break;
		}
		scanf("%s",&C);
		fir(i,0,len) cnt[C[i]-'0']++;
		fir(ind,0,2){
			int ccnt=0;
			fir(i,0,len) {
				if (i==0 || P[ind][i]==P[ind][i-1]) ccnt++;
				else {rle[ind][size[ind]][0]=P[ind][i-1]-'0';rle[ind][size[ind]][1]=ccnt;ccnt=1;size[ind]++;}
			}
			rle[ind][size[ind]][0]=P[ind][len-1]-'0';
			rle[ind][size[ind]][1]=ccnt;
			size[ind]++;
		}
		si=0;ei=0;
		anse=1;
		gr=0;
		sn=0;
		fir(i,0,len) {
			anse=0;
			rle[1][si][1]--;
			rle[0][ei][1]--;
			if (rle[1][si][1]==0) si++;
			if (rle[0][ei][1]==0) ei++;
			int psn=sn;
			fir(dg,0,10) {
				if (cnt[dg]<=0) continue;
				if (!gr && dg+'0' < P[1][i]) continue;
				if (dg+'0' > P[1][i]) gr=1;
				if (dg+'0' < P[0][i]) sn=-1;
				if (dg+'0' == P[0][i]) sn=psn;
				if (dg+'0' >P[0][i]) sn=1;
				cnt[dg]--;
				if (!check(i+1)) {cnt[dg]++;continue;}
				anse=1;
				op[i]='0'+dg;
				break;
			}
			if (!anse) break;
		}
		
		op[len]='\0';
		if (!anse) puts("-1");
		else puts(op);
	}
    return 0;
}
