#include <cstdio>
#include <cstdlib>
#include <algorithm>
using namespace std;

typedef int cType;

struct Point {
	cType x, y;

	bool operator <(const Point &p) const {
		return x < p.x || (x == p.x && y < p.y);
	}
};

cType cross(const Point &O, const Point &A, const Point &B)
{
	return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}

int convexHull(Point H[], Point P[], int n)
{
	int k = 0;
	sort(P, P + n);
	for (int i = 0; i < n; i++) {
		while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}
	for (int i = n-2, t = k+1; i >= 0; i--) {
		while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
		H[k++] = P[i];
	}
	return k;
}

cType area(const Point &O, const Point &A, const Point &B)
{
	cType res = O.x*A.y - O.y*A.x + A.x*B.y - A.y*B.x + B.x*O.y - B.y*O.x;
	return (res < 0)?-res:res;
}

cType area(Point H[], int k)
{
	int a = 0, b = 1, c = 2, temp;
	int res = area(H[a],H[b],H[c]);
	do
	{
		do
		{
			while(area(H[a],H[b],H[c]) < area(H[a],H[b],H[(c+1)%k]))
			{
				c++;
				c %= k;
			}
			if(area(H[a],H[b],H[c]) < area(H[a],H[(b+1)%k],H[c]))
			{
				b++;
				b %= k;
				continue;
			}
			else break;
		} while(true);
		temp = area(H[a],H[b],H[c]);
		if(res< temp)
            res = temp;
		//res >?= temp;
		a++;
		a %= k;
		b = (a==b)?b+1:b;
		b %= k;
		c = (b==c)?c+1:c;
		c %= k;
	} while(a);
	return res;
}

Point P[1000000];
Point H[2000000];

int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		int N;
		scanf("%d",&N);
		for(int i = 0; i < N; i++)
			scanf("%d %d",&P[i].x,&P[i].y);
		if(N <= 2)
		{
			printf("0\n");
			continue;
		}
		int k = convexHull(H,P,N);
		if(k <= 2)
		{
			printf("0\n");
			continue;
		}
		printf("%d\n",area(H,k-1));
	}
	return 0;
}
