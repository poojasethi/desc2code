#include <cstdio>
#include <algorithm>
using namespace std;
unsigned int hints[100000];
unsigned int writeOffset;
int initial_truths;
inline void O(int a)
{
 register char s[11];
 register int t = -1;
 do s[++t]=a%10+'0',a/=10; while(a>0);
 while(t>=0) putchar_unlocked(s[t--]);
 putchar_unlocked('\n');
}
class Input
{
private:
	char buffer[1048576];
	int bufferMax,nextToRead;
	void refill()
	{
		bufferMax = fread(buffer,1,1048576,stdin);
		nextToRead = 0;
	}
	int getNextChar()
	{
		if ( nextToRead == bufferMax )
			refill();
 
		return buffer[nextToRead++];
	}
public:
	Input(){bufferMax = nextToRead = 0;}
	void resetHints() {writeOffset = initial_truths = 0;}
	int getInt()
	{
		int ret = 0; int c;
		while((c = getNextChar()) < 48);
		do
		{
			ret = 10*ret + c - 48;
		}
		while((c = getNextChar()) > 47);
		return ret;
	}
	void saveHint()
	{
		short int op;
		unsigned int number;
		bool yesOrNo;
		while((op = getNextChar()) == 10);
		number = getInt();           
		yesOrNo = getNextChar() == 89;     
        if (op == '<')
        {
            number <<= 1;        
            number |= !(yesOrNo);    
            initial_truths += yesOrNo; 
            hints[writeOffset++] = number;   
        }
        else if (op == '>')
        {
            number++;
            number <<= 1;
            number |= yesOrNo;
            initial_truths += !(yesOrNo);
            hints[writeOffset++] = number;
        }
        else
        {
            if (yesOrNo)
            {
                number <<= 1;
                number++;
                hints[writeOffset++] = number;  
                number++;
                hints[writeOffset++] = number;  
            }
            else
            {
                number <<= 1;
                hints[writeOffset++] = number;
                initial_truths++;
                number += 3;
                hints[writeOffset++] = number;
            }
        }
        while((op = getNextChar()) > 64);
	}
};
int main()
{
    Input input;
    int hints_cnt, tests_cnt, loop_cnt, maximum_truths, temp_truths;
    unsigned int hint;
    tests_cnt = input.getInt();
    while (tests_cnt--)
    {
        input.resetHints();
        loop_cnt = hints_cnt = input.getInt();
        while (loop_cnt--)            input.saveHint();
        sort(hints, hints + writeOffset);
        while (hints[writeOffset-1] > 2000000001)            writeOffset--;
        temp_truths = initial_truths;        maximum_truths = 0;
        if (hints[0] > 3)            maximum_truths = initial_truths;
        for (loop_cnt = 0 ; loop_cnt < writeOffset ; loop_cnt++)
        {
            temp_truths += (hints[loop_cnt] & 1 ? 1 : -1 );
            maximum_truths = (maximum_truths > temp_truths ? maximum_truths : temp_truths);
        }
        O(hints_cnt - maximum_truths);
    }
}
 