#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <algorithm>
#include <map>
using namespace std;

int main(int argc, char* argv[])
{
	int t;
	scanf("%d", &t);
	for(int z=0;z<t;z++)
	{
		int k;
		scanf("%d", &k);
		map<int, int> les, mor, eq;
		int inl=0, inm=0, ine=0;
		for(int i=0;i<k;i++)
		{
			char op[2], res[4];
			int val;
			scanf("%s %d %s", op, &val, res);
			if(!strcmp(op,"<"))
			{
				if(!strcmp(res, "Yes"))
				{
					if(val>1)
						les[val-1]++, inl++;
				}
				else
					mor[val]++, inm++;
			}
			else if(!strcmp(op,">"))
			{
				if(!strcmp(res, "Yes"))
				{
					if(val<1000000000)
						mor[val+1]++, inm++;
				}
				else
					les[val]++, inl++;
			}
			else 
			{
				if(!strcmp(res, "Yes"))
					eq[val]++, ine++;
				else
				{
					if(val>1)
						les[val-1]++, inl++;
					if(val<1000000000)
						mor[val+1]++, inm++;
				}
			}
		}
		
		map<int, int>::iterator itl = les.begin();
		map<int, int>::iterator itm = mor.begin();
		map<int, int>::iterator ite = eq.begin();
		map<int, int>::iterator prev = mor.end();
		int tl = inl, tm = 0, tte = 0;
		int ret = 0;
		for(;itl!=les.end();)
		{
			int te = 0;
			if(ite != eq.end() && (itm == mor.end() || itm->first > ite->first))
			{
				int limit = 0;
				if(itm != mor.end() && itm->first<(itl->first+1))
					limit = itm->first;
				else
					limit = itl->first+1;
				for(;ite != eq.end() && ite->first < limit;)
				{
					te = max(te,ite->second);
					ite++;
				}
				ret = max(te + tl, ret);
			}

			for(;itm != mor.end() && itm->first <= itl->first;)
			{
				int te = 0;
				tm += itm->second;

				map<int, int>::iterator next = itm;
				next++;
				int limit=0;
				if(next != mor.end() && next->first<(itl->first+1))
					limit = next->first;
				else 
					limit = itl->first+1;

				for(;ite != eq.end() && ite->first < limit; )
				{
					te = max(te,ite->second);
					ite++;
				}
				ret = max(ret, te + tm + tl);
				itm++;
			}
			ret = max(ret, tl);
			tl -= itl->second;
			itl++;
		}

		for(;ite != eq.end() && (itm == mor.end() || (itm != mor.end() && ite->first < itm->first));)
		{
			ret = max(ret, tm+ite->second);
			ite++;
		}

		for(;itm != mor.end(); )
		{
			int limit=0;
			map<int, int>::iterator next = itm;
			next++;
			if(next != mor.end())
				limit = next->first;
			else 
				limit = 1000000001;
			int te = 0;
			for(;ite != eq.end() && ite->first < limit; )
			{
				te = max(te,ite->second);
				ite++;
			}
			tm += itm->second;
			ret = max(ret, tm + te);
			itm++;
		}
		printf("%d\n", k-ret);
	}
	return 0;
}