#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int test, n;
vector<int> low, high, equ, diff;
vector<int> query;

int main(){
    int i, x, res, l, r, mid, cost, s1, s2;
    char str[2][5];
    scanf("%d", &test);
    while(test--){
        low.clear(); high.clear(); equ.clear(); diff.clear(); query.clear();
        scanf("%d", &n);
        for(i=1;i<=n;i++){
            scanf("%s%d%s", str[0], &x, str[1]);
            if(str[0][0]=='=' && str[1][0]=='Y') equ.push_back(x);
            if(str[0][0]=='=' && str[1][0]=='N') diff.push_back(x);
            if(str[0][0]=='>' && str[1][0]=='Y') high.push_back(x);
            if(str[0][0]=='>' && str[1][0]=='N') low.push_back(x+1);
            if(str[0][0]=='<' && str[1][0]=='Y') low.push_back(x);
            if(str[0][0]=='<' && str[1][0]=='N') high.push_back(x-1);
            query.push_back(x-2); query.push_back(x+2);
            query.push_back(x-1); query.push_back(x); query.push_back(x+1);
        }

        sort(query.begin(),query.end());
        sort(equ.begin(),equ.end());
        sort(diff.begin(),diff.end());
        sort(low.begin(),low.end());
        sort(high.begin(),high.end());

        res= 1000000000;
        for(i=0;i<query.size();i++){
            x= query[i]; if(x<1 || x>1000000000) continue;
            cost= 0;
            //
            if(!equ.empty()){
                if(x<equ[0] || x>equ[equ.size()-1]) cost+= equ.size();
                else{
                    l= 0; r= equ.size()-1;
                    while(l<r){
                        mid= (l+r)/2;
                        if(equ[mid]<x) l= mid+1;
                        else r= mid;
                    }
                    s1= l;

                    l= 0; r= equ.size()-1;
                    while(l<r){
                        mid= (l+r)/2;
                        if(equ[mid]<=x) l= mid+1;
                        else r= mid;
                    }
                    s2= l; if(equ[s2]==x) s2++;

                    cost+= (equ.size()- (s2-s1));
                }
            }

            if(!diff.empty()){
                if(x>=diff[0] && x<=diff[diff.size()-1]){
                    l= 0; r= diff.size()-1;
                    while(l<r){
                        mid= (l+r)/2;
                        if(diff[mid]<x) l= mid+1;
                        else r= mid;
                    }
                    s1= l;

                    l= 0; r= diff.size()-1;
                    while(l<r){
                        mid= (l+r)/2;
                        if(diff[mid]<=x) l= mid+1;
                        else r= mid;
                    }
                    s2= l; if(diff[s2]==x) s2++;

                    cost+= (s2-s1);
                }
            }

            if(!low.empty()){
                if(x>=low[low.size()-1]) cost+= low.size();
                else{
                    l= 0; r= low.size()-1;
                    while(l<r){
                        mid= (l+r)/2;
                        if(low[mid]<=x) l= mid+1;
                        else r= mid;
                    }
                    cost+= l;
                }
            }

            if(!high.empty()){
                if(x<=high[high.size()-1]){
                    l= 0; r= high.size()-1;
                    while(l<r){
                        mid= (l+r)/2;
                        if(high[mid]<x) l= mid+1;
                        else r= mid;
                    }
                    cost+= (high.size()-l);
                }
            }
            //printf("%d: %d\n", x, cost);
            res= min(res, cost);
        }
        printf("%d\n", res);
    }
    return 0;
}
