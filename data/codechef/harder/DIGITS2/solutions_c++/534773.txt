#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <utility>
#include <numeric>
#include <algorithm>
using namespace std;
#ifdef DEBUGRUN
#define LOG(a) (cerr<<__LINE__<<": "#a" = "<<(a)<<endl)
#define DBG(...) (__VA_ARGS__)
#else
#define LOG(...) ((void)0)
#define DBG(...) ((void)0)
#endif
#define rep(i, n) for(int i=0; i<(int)(n); i++)
#define mp make_pair
#define foreach(it, c) for(__typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
typedef long long Int;
#define INF MY_INFINITY

Int decode(const string& s, int b) {
    Int r = 0;
    rep(i, s.size()) {
        int x;
        if('0'<=s[i] && s[i]<='9') x = s[i]-'0';
        else x = s[i]-'A'+10;
        if(x>=b) return -1;
        r = r*b + x;
    }
    return r;
}

int main() {
    int T;
    cin >> T;
    while(T--) {
        string s;
        cin >> s;
        Int ans = -1;
        for(int b=2; ; b++) {
            Int a = decode(s, b);
            if(a==-1) continue;
            if(ans!=-1 && a>ans) break;
            if(s.size()==1 && b>40) break;
            if(a==1) {
                ans = 1;
                break;
            }
            Int p = a;
            for(int i=2; i<b; i++) {
                while(p%i==0) p/=i;
            }
            if(p!=1) continue;
            priority_queue<pair<Int, Int> > q;
            set<Int> vis;
            q.push(mp(0, 1));
            vis.insert(1);
            while(!q.empty()) {
                pair<Int, Int> v(q.top());
                q.pop();
                for(int i=2; i<b; i++) if(a/v.second%i==0) {
                    Int nval = -v.first*b + i;
                    Int nkey = v.second * i;
                    if(vis.find(nkey)!=vis.end()) continue;
                    vis.insert(nkey);
                    if(nkey==a) {
                        if(ans==-1 || ans>nval) ans = nval;
                        break;
                    }
                    if(ans==-1 || nval<ans) q.push(mp(-nval, nkey));
                }
            }
        }
        cout << ans << endl;
    }
    return 0;
}


