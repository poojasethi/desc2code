#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <algorithm>
#include <string.h>
using namespace std;

int n,m,i,j,k;
int I[100005],Icnt;
int opt[100005],l1[100005],l2[100005],r1[100005],r2[100005];
int suml[400005],sumr[400005];
int a[400005],tot;
int ans[100005];
char ch;

map <int,int> Hash;

struct node
{
	int l1,l2,r1,r2,val;
}t[100005],q[100005];
int nt,nq,ti,qi;

inline bool cmp1(const node &a,const node &b){return a.l1<b.l1;}
inline bool cmp2(const node &a,const node &b){return a.r1<b.r1;}
inline bool cmp3(const node &a,const node &b){return a.l1>b.l1;}
inline bool cmp4(const node &a,const node &b){return a.r1>b.r1;}

void CDQ(int l,int r)
{
	if(l==r)return;
	int mid=l+r>>1;
	
	nt=nq=0;
	for(i=l;i<=mid;++i)if(opt[i])++nt,t[nt].l1=l1[i],t[nt].l2=l2[i],t[nt].r1=r1[i],t[nt].r2=r2[i],t[nt].val=opt[i];
	for(i=mid+1;i<=r;++i)if(!opt[i])++nq,q[nq].l1=l1[i],q[nq].l2=l2[i],q[nq].r1=r1[i],q[nq].r2=r2[i],q[nq].val=i;
	
	for(ti=1;ti<=nt;++ti)
	{
		for(i=t[ti].r1;i<=n;i+=i&-i)suml[i]+=t[ti].val;
		for(i=n-t[ti].l1+1;i<=n;i+=i&-i)sumr[i]+=t[ti].val;
	}
	for(qi=1;qi<=nq;++qi)
	{
		for(i=q[qi].l1-1;i;i-=i&-i)ans[q[qi].val]-=suml[i];
		for(i=n-q[qi].r1;i;i-=i&-i)ans[q[qi].val]-=sumr[i];
	}
	for(ti=1;ti<=nt;++ti)
	{
		for(i=t[ti].r1;i<=n;i+=i&-i)suml[i]=0;
		for(i=n-t[ti].l1+1;i<=n;i+=i&-i)sumr[i]=0;
	}
	
	for(ti=1;ti<=nt;++ti)
	{
		for(i=t[ti].r2;i<=n;i+=i&-i)suml[i]+=t[ti].val;
		for(i=n-t[ti].l2+1;i<=n;i+=i&-i)sumr[i]+=t[ti].val;
	}
	for(qi=1;qi<=nq;++qi)
	{
		for(i=q[qi].l2-1;i;i-=i&-i)ans[q[qi].val]-=suml[i];
		for(i=n-q[qi].r2;i;i-=i&-i)ans[q[qi].val]-=sumr[i];
	}
	for(ti=1;ti<=nt;++ti)
	{
		for(i=t[ti].r2;i<=n;i+=i&-i)suml[i]=0;
		for(i=n-t[ti].l2+1;i<=n;i+=i&-i)sumr[i]=0;
	}
	
	ti=qi=1;
	sort(t+1,t+nt+1,cmp2);
	sort(q+1,q+nq+1,cmp1);
	for(;qi<=nq;)
	{
		if(ti>nt||q[qi].l1<t[ti].r1)k=q[qi].l1;else k=t[ti].r1;
		for(;qi<=nq&&q[qi].l1==k;++qi)
		{
			for(i=q[qi].l2-1;i;i-=i&-i)ans[q[qi].val]+=suml[i];
			for(i=n-q[qi].r2;i;i-=i&-i)ans[q[qi].val]+=sumr[i];
		}
		for(;ti<=nt&&t[ti].r1==k;++ti)
		{
			for(i=t[ti].r2;i<=n;i+=i&-i)suml[i]+=t[ti].val;
			for(i=n-t[ti].l2+1;i<=n;i+=i&-i)sumr[i]+=t[ti].val;
		}
	}
	for(--ti;ti;--ti)
	{
		for(i=t[ti].r2;i<=n;i+=i&-i)suml[i]=0;
		for(i=n-t[ti].l2+1;i<=n;i+=i&-i)sumr[i]=0;
	}
	
	ti=qi=1;
	sort(t+1,t+nt+1,cmp3);
	sort(q+1,q+nq+1,cmp4);
	for(;qi<=nq;)
	{
		if(ti>nt||q[qi].r1>t[ti].l1)k=q[qi].r1;else k=t[ti].l1;
		for(;qi<=nq&&q[qi].r1==k;++qi)
		{
			for(i=q[qi].l2-1;i;i-=i&-i)ans[q[qi].val]+=suml[i];
			for(i=n-q[qi].r2;i;i-=i&-i)ans[q[qi].val]+=sumr[i];
		}
		for(;ti<=nt&&t[ti].l1==k;++ti)
		{
			for(i=t[ti].r2;i<=n;i+=i&-i)suml[i]+=t[ti].val;
			for(i=n-t[ti].l2+1;i<=n;i+=i&-i)sumr[i]+=t[ti].val;
		}
	}
	for(--ti;ti;--ti)
	{
		for(i=t[ti].r2;i<=n;i+=i&-i)suml[i]=0;
		for(i=n-t[ti].l2+1;i<=n;i+=i&-i)sumr[i]=0;
	}
	
	CDQ(l,mid);CDQ(mid+1,r);
}

int main()
{
	scanf("%d",&m);
	for(i=1;i<=m;++i)
	{
		for(ch=getchar();ch!='I'&&ch!='D'&&ch!='Q';ch=getchar());
		if(ch=='I')opt[i]=1,I[++Icnt]=i,scanf("%d%d%d%d",&l1[i],&l2[i],&r1[i],&r2[i]);
		if(ch=='D')opt[i]=-1,scanf("%d",&k),k=I[k],l1[i]=l1[k],l2[i]=l2[k],r1[i]=r1[k],r2[i]=r2[k];
		if(ch=='Q')opt[i]=0,scanf("%d%d%d%d",&l1[i],&l2[i],&r1[i],&r2[i]);
		ans[i]=ans[i-1]+opt[i];
	}
	for(i=1;i<=m;++i)if(opt[i]!=-1)a[++tot]=l1[i],a[++tot]=l2[i],a[++tot]=r1[i],a[++tot]=r2[i];
	sort(a+1,a+tot+1);
	for(i=1;i<=tot;++i)if(i==1||a[i]!=a[i-1])Hash[a[i]]=++n;
	for(i=1;i<=m;++i)l1[i]=Hash[l1[i]],l2[i]=Hash[l2[i]],r1[i]=Hash[r1[i]],r2[i]=Hash[r2[i]];
	CDQ(1,m);
	for(i=1;i<=m;++i)if(opt[i]==0)printf("%d\n",ans[i]);
}