#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iostream>

using namespace std;

#define MX 100005

struct Query {
	int type, x1, y1, x2, y2, id;
	void init() {
		scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
	}
}q[MX];

struct fenwick {
	int a[2*MX], n;
	inline void update(int x, int v) {
		for (; x <= n; x += x&(-x)) a[x] += v;
	}
	inline int sum(int x) {
		int rlt = 0;
		for (; x; x -= x&(-x)) rlt += a[x];
		return rlt;
	}
}s1, s2;

struct Line {
	int x, y1, y2, t, num;
	bool operator<(const Line &l) const{
		if (l.x != x) return x < l.x;
		return t < l.t;	
	}
}L[3*MX];

int rlt[MX], y[2*MX], yn, id[MX];

void calc(int st, int en) {
	if (st == en) return;
	int mid = (st + en) / 2, i, j, k, cnt, tot;
	
	cnt = tot = 0;
	for (i = st; i <= mid; i++) {
		if (q[i].type == 1) {
			L[cnt++] = (Line){q[i].x2, q[i].y1, q[i].y2, 2, i}, tot++;	
		} else if (q[i].type == 2) {
			L[cnt++] = (Line){q[i].x2, q[i].y1, q[i].y2, 3, i}, tot--;			
		}
	}
	for (i = mid + 1; i <= en; i++) {
		if (q[i].type == 3) {
			L[cnt++] = (Line){q[i].x1, q[i].y1, q[i].y2, 1, i};
			rlt[i] += tot;
		}
	}
	sort(L, L + cnt);
	for (i = 0; i < cnt; i++) {
		if (L[i].t == 2) {
			s1.update(L[i].y1, -1); s2.update(L[i].y2, -1);	
		} else if (L[i].t == 3) {
			s1.update(L[i].y1, 1); s2.update(L[i].y2, 1);
		} else {
			rlt[L[i].num] += s1.sum(L[i].y2) - s2.sum(L[i].y1-1);
		}
	}
	for (i = 0; i < cnt; i++) {
		if (L[i].t == 2) s1.update(L[i].y1, 1), s2.update(L[i].y2, 1);	
		if (L[i].t == 3) s1.update(L[i].y1, -1), s2.update(L[i].y2, -1);
	}

//right
	cnt = tot = 0;
	for (i = st; i <= mid; i++) {
		if (q[i].type == 1) {
			L[cnt++] = (Line){-q[i].x1, q[i].y1, q[i].y2, 2, i};	
		} else if (q[i].type == 2) {
			L[cnt++] = (Line){-q[i].x1, q[i].y1, q[i].y2, 3, i};			
		}
	}
	for (i = mid + 1; i <= en; i++) {
		if (q[i].type == 3) {
			L[cnt++] = (Line){-q[i].x2, q[i].y1, q[i].y2, 1, i};
		}
	}
	sort(L, L + cnt);
	for (i = 0; i < cnt; i++) {
		if (L[i].t == 2) {
			s1.update(L[i].y1, -1); s2.update(L[i].y2, -1);	
		} else if (L[i].t == 3) {
			s1.update(L[i].y1, 1); s2.update(L[i].y2, 1);
		} else {
			rlt[L[i].num] += s1.sum(L[i].y2) - s2.sum(L[i].y1-1);
		}
	}
	for (i = 0; i < cnt; i++) {
		if (L[i].t == 2) s1.update(L[i].y1, 1), s2.update(L[i].y2, 1);	
		if (L[i].t == 3) s1.update(L[i].y1, -1), s2.update(L[i].y2, -1);
	}
//Top
	cnt = tot = 0;
	for (i = st; i <= mid; i++) {
		if (q[i].type == 1) {
			L[cnt++] = (Line){q[i].y2, q[i].x1, q[i].x2, 2, i};	
		} else if (q[i].type == 2) {
			L[cnt++] = (Line){q[i].y2, q[i].x1, q[i].x2, 3, i};			
		}
	}
	for (i = mid + 1; i <= en; i++) {
		if (q[i].type == 3) {
			L[cnt++] = (Line){q[i].y1, q[i].x1, q[i].x2, 1, i};
		}
	}
	sort(L, L + cnt);
	for (i = 0; i < cnt; i++) {
		if (L[i].t == 2) tot--;	
		if (L[i].t == 3) tot++;
		if (L[i].t == 1) {
			rlt[L[i].num] += tot;
		}
	}

//Bottom
	cnt = tot = 0;
	for (i = st; i <= mid; i++) {
		if (q[i].type == 1) {
			L[cnt++] = (Line){-q[i].y1, q[i].x1, q[i].x2, 2, i};	
		} else if (q[i].type == 2) {
			L[cnt++] = (Line){-q[i].y1, q[i].x1, q[i].x2, 3, i};			
		}
	}
	for (i = mid + 1; i <= en; i++) {
		if (q[i].type == 3)
			L[cnt++] = (Line){-q[i].y2, q[i].x1, q[i].x2, 1, i};
	}
	sort(L, L + cnt);
	for (i = 0; i < cnt; i++) {
		if (L[i].t == 2) tot--;
		if (L[i].t == 3) tot++;
		if (L[i].t == 1) rlt[L[i].num] += tot;
	}

	calc(st, mid);
	calc(mid + 1, en);
}

main() {
	
//	freopen("in1.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);

	char str[10];
	int i, j, k, cnt(0), yn(0), Q;

	scanf("%d", &Q);
	for (i = 0; i < Q; i++) {
		scanf("%s", str);
		if (str[0] == 'I') {
			q[i].type = 1;
			q[i].init(); y[yn++] = q[i].y1, y[yn++] = q[i].y2;
			id[cnt++] = i;
		} else if (str[0] == 'D') {
			q[i].type = 2;
			scanf("%d", &q[i].id);
			q[i].id = id[q[i].id - 1];
			q[i].x1 = q[q[i].id].x1;
			q[i].y1 = q[q[i].id].y1;
			q[i].x2 = q[q[i].id].x2;
			q[i].y2 = q[q[i].id].y2;
		} else {
			q[i].type = 3;
			q[i].init(); y[yn++] = q[i].y1, y[yn++] = q[i].y2;
		}
	}
	sort(y, y + yn);
	yn = unique(y, y + yn) - y;
	s1.n = s2.n = yn;

	for (i = 0; i < Q; i++) {
		q[i].y1 = lower_bound(y, y + yn, q[i].y1) - y + 1;
		q[i].y2 = lower_bound(y, y + yn, q[i].y2) - y + 1;
	}
	
	calc(0, Q-1);
	for (i = 0; i < Q; i++) {
		if (q[i].type == 3) printf("%d\n", rlt[i]);
	}
}