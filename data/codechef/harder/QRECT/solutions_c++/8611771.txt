#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	100005
#define For(i,a,b)	for(int i=a;i<=b;i++)

#define CH	(ch=getchar())
int		IN(){
		int x=0,ch;
		for	(;CH<'0'||ch>'9';);
		for	(;ch>='0'&&ch<='9';CH)	(x*=10)+=ch-'0';
		return	x;
}

int		N,M,S,G[n],T[n],Ans[n];
char	s[5];

struct	Nod{int k,x,y,ID;}Q[n],F[n];
struct	Rec{int k,x1,y1,x2,y2;}A[n],B[n];

void	Add(int x,int t){
		for (;x<=M;x+=x&-x)	T[x]+=t;
}
int		Ask(int x){
		int ret=0;
		for (;x;x-=x&-x)	ret+=T[x];
		return	ret;
}

void	Work1(int N,Nod*Q,int t){
		For(i,1,N)	G[i]=Q[i].x;	sort(G+1,G+N+1);
		M=unique(G+1,G+N+1)-G-1;	For(i,0,M)	T[i]=0;

		For(i,1,N)	{
			int x=lower_bound(G+1,G+M+1,Q[i].x)-G;
			if	(Q[i].k)Add(x,Q[i].k);
				else	Ans[Q[i].ID]+=t*Ask(x-1);
		}
}

bool	Cmp(const Nod&a,const Nod&b)	{
		return	a.y<b.y||a.y==b.y&&abs(a.k)<abs(b.k);
}
void	Work2(int l,int r){
		if	(l>=r)	return;	int Mid=l+r>>1;
		Work2(l,Mid);	Work2(Mid+1,r);	S=0;

		For(i,l,Mid)	if	(Q[i].k)	F[++S]=Q[i];
		For(i,Mid+1,r)	if	(!Q[i].k)	F[++S]=Q[i];
		sort(F+1,F+S+1,Cmp);	Work1(S,F,1);
}

int		main(){
		N=IN();
		For(i,1,N)	Ans[i]=-1;
		For(i,1,N)	{
			scanf("%s",s);
			if	(s[0]=='I')	B[++M]=A[i]=(Rec){1,IN(),IN(),IN(),IN()},S++;
			if	(s[0]=='D')	A[i]=B[IN()],A[i].k=-1,S--;
			if	(s[0]=='Q') A[i]=(Rec){0,IN(),IN(),IN(),IN()},Ans[i]=S;
		}
		For(i,1,N)	if	(A[i].k)	A[i].x1*=-1,A[i].y1*=-1;
			else	A[i].x2*=-1,A[i].y2*=-1;

		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].x2,0,i}:(Nod){0,A[i].x1,0,i};	Work1(N,Q,-1);
		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].x1,0,i}:(Nod){0,A[i].x2,0,i};	Work1(N,Q,-1);
		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].y2,0,i}:(Nod){0,A[i].y1,0,i};	Work1(N,Q,-1);
		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].y1,0,i}:(Nod){0,A[i].y2,0,i};	Work1(N,Q,-1);

		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].x1,A[i].y1,i}:(Nod){0,A[i].x2,A[i].y2,i};	Work2(1,N);
		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].x1,A[i].y2,i}:(Nod){0,A[i].x2,A[i].y1,i};	Work2(1,N);
		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].x2,A[i].y1,i}:(Nod){0,A[i].x1,A[i].y2,i};	Work2(1,N);
		For(i,1,N)	Q[i]=A[i].k?(Nod){A[i].k,A[i].x2,A[i].y2,i}:(Nod){0,A[i].x1,A[i].y1,i};	Work2(1,N);

		For(i,1,N)	if	(Ans[i]!=-1)	printf("%d\n",Ans[i]);
}