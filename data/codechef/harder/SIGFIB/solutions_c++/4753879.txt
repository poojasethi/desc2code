#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <map>

using namespace std;

#define USE_BRUTE_FORCE 0
#define MMAX 1048576

map<pair<int, int>, int> m;
map<pair<int, int>, int>::const_iterator it;
int fibo[MMAX], xfibo[MMAX], sfibo[MMAX], sxfibo[MMAX], sxxfibo[MMAX], sxyfibo[MMAX];
int clen, i, j, k, ans, z, M, cntmax;
long long N, Cold, C, v, C1, C2, C3, C4, CS1, CS2, CS3;

long long Sum1(long long x) {
	long long a = x, b = x + 1;
	if ((a & 1) == 0) a >>= 1;
	else b >>= 1;
	a %= M; b %= M;
	return (a * b) % M;
}

long long Sum2(long long x) {
	long long a = x, b = x + 1, c = 2 * x + 1;
	if ((a & 1) == 0) a >>= 1;
	else b >>= 1;
	if ((a % 3) == 0) a /= 3;
	else if ((b % 3) == 0) b /= 3;
	else c /= 3;
	a %= M; b %= M; c %= M;
	return (((a * b) % M) * c) % M;
}

long long Sum3(long long x) {
	long long s1 = Sum1(x);
	return (s1 * s1) % M;
}

long long Sum4(long long x) {
// x * (x+1) * (2x+1) * (3*x^2 + 3*x - 1) / 30
	long long a = x, b = x + 1, c = 2 * x + 1, d = (3 * x - 1 + 3 * (x % 5) * (x % 5));
	if ((a & 1) == 0) a >>= 1;
	else b >>= 1;
	if ((a % 3) == 0) a /= 3;
	else if ((b % 3) == 0) b /= 3;
	else c /= 3;
	int ddiv5 = 0;
	if ((a % 5) == 0) a /= 5;
	else if ((b % 5) == 0) b /= 5;
	else if ((c % 5) == 0) c /= 5;
	else {
		d /= 5;
		ddiv5 = 1;
	}

	if (ddiv5) {
		// dnew = d + (3 * (5 * x/5 + x%5) * (5 * x/5 + x%5) - 3 * (x%5) * (x%5)) / 5
		long long xdiv5 = (x / 5) % M;
		long long e = (15 * xdiv5) % M;
		e = (e * xdiv5) % M;
		long long f = (6 * xdiv5) % M;
		f = (f * (x % 5)) % M;
		d = (d + e + f) % M;
	} else {
		long long xmodm = x % M;
		d = (3 * xmodm * xmodm) % M;
		d = (d + 3 * xmodm - 1 + M) % M;
	}

	a %= M; b %= M; c %= M;
	return (((((a * b) % M) * c) % M) * d) % M;
}

long long S1() {
	long long w = (((C + 1) % M) * C1) % M;
	w = (w + M - C2) % M;
	return w;
}

long long S2() {
	long long v1 = ((C % M) * ((C + 1) % M)) % M;
	v1 = (v1 * C1) % M;
	long long v2 = (2 * C + 1) % M;
	v2 = (v2 * C2) % M;
	v1 -= v2;
	if (v1 < 0) v1 += M;
	v1 += C3;
	if (v1 >= M) v1 -= M;
	return v1;
}

long long S3() {
	long long v0 = ((C % M) * S2()) % M;
	long long v1 = ((C % M) * ((C + 1) % M)) % M;
	v1 = (v1 * C2) % M;
	long long v2 = (2 * C + 1) % M;
	v2 = (v2 * C3) % M;
	v1 -= v2;
	if (v1 < 0) v1 += M;
	v1 += C4;
	if (v1 >= M) v1 -= M;
	v0 -= 2 * v1;
	while (v0 < 0) v0 += M;
	return v0;
}

int bfibo[MMAX], bsum[MMAX];

void BruteForce1() {
	int i, j, k;
	bfibo[0] = 0;
	bfibo[1] = 1;
	for (i = 2; i <= N; i++) {
		bfibo[i] = bfibo[i - 1] + bfibo[i - 2];
		if (bfibo[i] >= M) bfibo[i] -= M;
	}
	
	long long bfans = 0, tmp;
	for (i = 1; i <= N; i++)
		for (j = 1; i + j <= N; j++) {
			k = N - i - j;
			tmp = ((6 * i) % M);
			tmp = (tmp * j) % M;
			tmp = (tmp * k) % M;
			tmp = (tmp * bfibo[i]) % M;
			tmp = (tmp * bfibo[j]) % M;
			tmp = (tmp * bfibo[k]) % M;
			bfans = (bfans + tmp) % M;
		}
	fprintf(stderr, "bfans1=%lld\n", bfans);
}

void BruteForce2() {
	int x, y, z, p, q, r;
	bfibo[0] = 0;
	bfibo[1] = 1;
	for (i = 2; i <= N; i++) {
		bfibo[i] = bfibo[i - 1] + bfibo[i - 2];
		if (bfibo[i] >= M) bfibo[i] -= M;
	}

	for (i = 0; i < MMAX; i++)
		bsum[i] = 0;

	long long bfans = 0, tmp;
	for (x = 0; x < clen; x++)
		for (y = 0; y < clen && x + y <= N; y++) {
			k = x + y;
			z = (N - k) % clen;
			C = (N - k) / clen;
			for (p = 0; p <= C; p++)
				for (q = 0; p + q <= C; q++) {
					r = C - p - q;
					tmp = ((6 * (x + p * clen)) % M);
					tmp = (tmp * (y + q * clen)) % M;
					tmp = (tmp * (z + r * clen)) % M;
					tmp = (tmp * fibo[x]) % M;
					tmp = (tmp * fibo[y]) % M;
					tmp = (tmp * fibo[z]) % M;
					bfans = (bfans + tmp) % M;
					bsum[k] = (bsum[k] + tmp) % M;
				}
		}
	fprintf(stderr, "bfans2=%lld\n", bfans);
}

int tcnt[MMAX][2], scnt[MMAX][2];

int main() {
	if (USE_BRUTE_FORCE)
		freopen("x.txt", "r", stdin);
	int T, large_test = 0;
	scanf("%d", &T);

	while (T--) {
		scanf("%d %lld", &M, &N);
		if (M == 1 || N <= 2) {
			printf("0\n");
			continue;
		}

		//if (USE_BRUTE_FORCE && N <= 10000) BruteForce1();		
		fibo[0] = xfibo[0] = 0;
		fibo[1] = xfibo[1] = 1;
		m.clear();
		m[make_pair(fibo[0], fibo[1])] = 0;
	
		for (i = 2; i <= N; i++, clen++) {
			fibo[i] = (fibo[i - 2] + fibo[i - 1]) % M;
			xfibo[i] = ((long long) i * fibo[i]) % M;
			it = m.find(make_pair(fibo[i - 1], fibo[i])); 
			if (it != m.end()) {
				if (it->second != 0) return 3;
				break;
			}
			m[make_pair(fibo[i - 1], fibo[i])] = i - 1;
		}

		clen = i - 1;
		//if (clen >= 290000) large_test = 1;
		
		if (USE_BRUTE_FORCE) fprintf(stderr, "M=%d clen=%d\n", M, clen);
		if (USE_BRUTE_FORCE && N <= 10000) BruteForce2();

		cntmax = 2 * clen;
		if (cntmax >= MMAX) return 1;
	
		for (i = clen; i < cntmax; i++) {
			fibo[i] = (fibo[i - 2] + fibo[i - 1]) % M;
			xfibo[i] = ((long long) i * fibo[i]) % M;
		}

		for (i = 0; i < cntmax; i++)
			sfibo[i] = sxfibo[i] = sxxfibo[i] = sxyfibo[i] = 0;

		for (i = 2; i < cntmax; i++) {
			sfibo[i] = (sfibo[i - 1] + sfibo[i - 2] + fibo[i - 1]) % M;
			if (i == 2) {
				tcnt[i][0] = tcnt[i][1] = 1;
				scnt[i][0] = 1; scnt[i][1] = 0;
			} else {
				tcnt[i][0] = tcnt[i - 1][1];
				scnt[i][0] = ((long long) scnt[i - 1][1] + (long long) tcnt[i][0] * (long long) (i - 1)) % M;
				tcnt[i][1] = (tcnt[i - 1][0] + tcnt[i - 1][1]) % M;
				scnt[i][1] = (scnt[i - 1][0] + scnt[i - 1][1]) % M;
			}
			sxfibo[i] = (scnt[i][0] + scnt[i][1]) % M;
			sxxfibo[i] = ((long long) (i - 1) * (long long) fibo[i - 1]) % M;
			sxxfibo[i] = ((long long) (i - 1) * (long long) sxxfibo[i]) % M;
			sxxfibo[i] = (sxxfibo[i] + sxxfibo[i - 2] + sxxfibo[i - 1]) % M;
			sxyfibo[i] = ((long long) i * (long long) sxfibo[i] - sxxfibo[i] + M) % M;
		}

		// Compute the sum (x + p * clen) * (y + q * clen) + (z + r * clen) * fibo[x] * fibo[y] * fibo[z], where:
		// - 0 <= x, y, z < clen
		// - x + y = k (k - fixed, between 0 and 2 * clen - 2)
		// - z = (N - k) % clen (z - fixed)
		// - p + q + r = C
		// - C = (N - k) / clen (C - fixed)
		Cold = -1;

		long long clen2 = ((long long) clen * (long long) clen) % M;
		long long clen3 = (clen2 * (long long) clen) % M;
		long long Cdif1, Cdif2, Cdif3;
		
		for (ans = 0, k = 0; k <= 2 * (clen - 1) && k <= N; k++) {
			z = (N - k) % clen;
			C = (N - k) / clen;
			if (C != Cold) {
				C1 = Sum1(C);
				C2 = Sum2(C);
				C3 = Sum3(C);
				C4 = Sum4(C);
				CS1 = S1();
				CS2 = S2();
				CS3 = S3();
				Cdif1 = (Sum1(C + 1) - ((2 * C + 1) % M) + M) % M;
				Cdif2 = (CS1 - ((C + 2 * Sum1(C - 1)) % M) + M) % M;
				Cdif3 = (CS1 - C1 + M) % M;
				Cold = C;
			}

			long long zfiboz = ((long long) z * (long long) fibo[z]) % M;

			if (k <= clen - 2 && k + clen <= N) {
				// (x * y * fibo[x] * fibo[y]) * z * fibo[z]
				v = ((long long) ((N - k) % M) * (long long) fibo[z]) % M;
				v = (v * 6 * (long long) sxyfibo[k]) % M;
				ans += v;
				if (ans >= M) ans -= M;
				
				if (C >= 2) {
					// (x * y * fibo[x] * fibo[y]) * z * fibo[z]
					v = (zfiboz * 6 * (long long) sxyfibo[k]) % M;
					v = (v * Cdif1) % M;
					ans -= v;
					if (ans < 0) ans += M;
		
					// (x * y * fibo[x] * fibo[y]) * r * clen * fibo[z]
					v = ((long long) sxyfibo[k] * (long long) clen) % M;
					v = (v * (long long) fibo[z]) % M;
					v = (v * 6 * Cdif2) % M;
					ans -= v;
					if (ans < 0) ans += M;
		
					// (x * fibo[x] * fibo[y]) * q * clen * z * fibo[z]
					v = ((long long) sxfibo[k] * (long long) clen) % M;
					v = (v * zfiboz) % M;
					v = (v * 12 * Cdif3) % M;
					ans -= v;
					if (ans < 0) ans += M;
		
					// (x * fibo[x] * fibo[y]) * q * r * clen^2 * fibo[z]
					v = ((long long) sxfibo[k] * clen2) % M;
					v = (v * (long long) fibo[z]) % M;
					v = (v * (6 * CS2 - 12 * (((C % M) * C1 - C2 + M) % M) + 12 * M)) % M;
					ans -= v;
					if (ans < 0) ans += M;
					
					// (fibo[x] * fibo[y]) * p * q * clen^2 * z * fibo[z]
					v = ((long long) sfibo[k] * clen2) % M;
					v = (v * zfiboz) % M;
					v = (v * 3 * CS2) % M;
					ans -= v;
					if (ans < 0) ans += M;
					
					// (fibo[x] * fibo[y]) * p * q * r * clen^3 * fibo[z]
					v = ((long long) sfibo[k] * clen3) % M;
					v = (v * (long long) fibo[z]) % M;
					v = (v * 3 * CS3) % M;
					ans -= v;
					if (ans < 0) ans += M;
					//fprintf(stderr, "B6 k=%d: v=%lld\n", k, v);
				}

				continue;
			}

			// (x * y * fibo[x] * fibo[y]) * z * fibo[z]
			v = (zfiboz * 6 * (long long) sxyfibo[k]) % M;
			v = (v * Sum1(C + 1)) % M;
			ans += v;
			if (ans >= M) ans -= M;

			// (x * y * fibo[x] * fibo[y]) * r * clen * fibo[z]
			v = ((long long) sxyfibo[k] * (long long) clen) % M;
			v = (v * (long long) fibo[z]) % M;
			v = (v * 6 * CS1) % M;
			ans += v;
			if (ans >= M) ans -= M;

			// (x * fibo[x] * fibo[y]) * q * clen * z * fibo[z]
			v = ((long long) sxfibo[k] * (long long) clen) % M;
			v = (v * zfiboz) % M;
			v = (v * 12 * CS1) % M;
			ans += v;
			if (ans >= M) ans -= M;

			// (x * fibo[x] * fibo[y]) * q * r * clen^2 * fibo[z]
			v = ((long long) sxfibo[k] * clen2) % M;
			v = (v * (long long) fibo[z]) % M;
			v = (v * 6 * CS2) % M;
			ans += v;
			if (ans >= M) ans -= M;
			
			// (fibo[x] * fibo[y]) * p * q * clen^2 * z * fibo[z]
			v = ((long long) sfibo[k] * clen2) % M;
			v = (v * zfiboz) % M;
			v = (v * 3 * CS2) % M;
			ans += v;
			if (ans >= M) ans -= M;
			
			// (fibo[x] * fibo[y]) * p * q * r * clen^3 * fibo[z]
			v = ((long long) sfibo[k] * clen3) % M;
			v = (v * (long long) fibo[z]) % M;
			v = (v * 3 * CS3) % M;
			ans += v;
			if (ans >= M) ans -= M;
		}

		printf("%d\n", ans);
	}

	return large_test;
}
