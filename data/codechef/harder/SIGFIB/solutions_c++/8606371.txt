#include <stdio.h>
#include <stdlib.h>
using namespace std;

int T,p,i,j,k,ans;
int fib[55],f[55],c[55],f_[55],c_[55];
int g[205][100005],l[205];
long long n;

struct Linear_recursion
{
	#define lim 1000000000000000000ll
	#define p_size 70
	#define d_size 40
	
	int d,f[d_size],c[d_size],a[d_size],tmp[d_size],n_[p_size];
	
	void init(int d_,int *f_,int *c_){int i,j;d=d_;for(i=0;i<=d;++i)f[i]=f_[i],c[i]=c_[i];}
	void mult(int *a,int *b)
	{
		for(j=1;j<=d+d;++j)tmp[j]=0;
		for(j=1;j<=d;++j)
		for(k=1;k<=d;++k)
		tmp[j+k]=(tmp[j+k]+(long long)a[j]*b[k])%p;
		for(j=1;j<=d;++j)
		for(k=1;k<=d;++k)
		tmp[j+k]=(tmp[j+k]+(long long)tmp[j]*c[k])%p;
		for(j=1;j<=d;++j)a[j]=tmp[j+d];
	}
	
	int calc(long long n)
	{
		int i,j,k,p_=0;long long m;
		if(n<=d)return f[n];
		for(m=(n-1)/d;m;m>>=1)n_[++p_]=m&1;
		for(i=1;i<=d;++i)a[i]=c[i];
		for(i=1;i<=d;++i)a[i+d]=0;
		for(i=p_-1;i;--i)
		{
			mult(a,a);
			if(n_[i])mult(a,c);
		}
		for(i=1,k=(n-1)%d;i<=k;++i)
		for(j=1;j<=d;++j)
		a[i+j]=(a[i+j]+(long long)a[i]*c[j])%p;
		for(i=1;i<=d;++i)a[i]=a[i+k];
		for(i=1,k=0;i<=d;++i)k=(k+(long long)a[i]*f[d-i+1])%p;
		return k;
	}
	
	#undef lim
	#undef p_size
	#undef d_size
}a;

int main()
{
	fib[1]=1;
	for(i=2;i<=12;++i)fib[i]=fib[i-1]+fib[i-2];
	for(i=3;i<=12;++i)
	for(j=1;j<i;++j)
	for(k=1;j+k<i;++k)
	f[i]+=6*j*k*(i-j-k)*fib[j]*fib[k]*fib[i-j-k];
	c[0]=1;
	for(i=1;i<=6;++i)
	for(j=12;j>=0;--j)
	c[j+1]=(c[j+1]-c[j]),
	c[j+2]=(c[j+2]-c[j]);
	for(i=1;i<=12;++i)c[i]=-c[i];
	
	for(p=1;p<=200;++p)
	{
		for(i=1;i<=12;++i)g[p][i]=(f[i]%p+p)%p;
		for(i=13;;++i)
		{
			for(j=1;j<=12;++j)g[p][i]=(g[p][i]+p+c[j]*g[p][i-j]%p)%p;
			for(j=1;j<=12;++j)if(g[p][j]!=g[p][i-12+j])break;
			if(j>12)break;
		}
		l[p]=i-12;
	}
	
	scanf("%d",&T);
	for(;T;--T)
	{
		scanf("%d%lld",&p,&n);
		if(p<=200)
		{
			printf("%d\n",g[p][n%l[p]]);
			continue;
		}
		for(i=1;i<=12;++i)f_[i]=(f[i]%p+p)%p,c_[i]=(c[i]%p+p)%p;
		a.init(12,f_,c_);
		printf("%d\n",a.calc(n));
	}
}