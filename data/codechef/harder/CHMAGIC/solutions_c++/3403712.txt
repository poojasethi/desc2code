    #pragma comment(linker,"/STACK:100000000000,100000000000")
     
    #include <iostream>
    #include <cstdio>
    #include <cstdlib>
    #include <algorithm>
    #include <string>
    #include <cstring>
    #include <vector>
    #include <cmath>
    #include <map>
    #include <stack>
    #include <set>
    #include <iomanip>
    #include <queue>
    #include <map>
    #include <functional>
    #include <memory.h>
    #include <list>
    #include <sstream>
    #include <ctime>
    #include <climits>
    #include <bitset>
    #include <list>
    #include <cassert>
    #include <complex>
     
    using namespace std;
     
    /* Constants begin */
    const long long inf = 1e18+7;
    const long long mod = 1e9+7;
    const double eps = 1e-12;
    const double PI = 2*acos(0.0);
    const double E = 2.71828;
    /* Constants end */
     
    /* Defines begin */
    #define pb push_back
    #define mp make_pair
    #define ll long long
    #define double long double
    #define F first
    #define S second
    #define all(a) (a).begin(),(a).end()
    #define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
    #define random (rand()<<16|rand())
    #define sqr(x) (x)*(x)
    #define base complex<double>
    /* Defines end */
     
    int q;
    int n, a[300005];
    int Q[300005], sum[300005], h, t;
    int m;
     
    void pre(){
    for(int i=1;i<=9;i++){
    if(i*i <= q){
    Q[t] = i;
    sum[t] = i*i;
    t++;
    }
    }
    while(t < 300000){
    ll now = Q[h];
    int nsum = sum[h++];
    for(int i=0;i<=9;i++){
    if(nsum + i * i <= q){
    Q[t] = (now * 10 + i) % mod;
    sum[t] = nsum + i * i;
    t++;
    }
    }
    }
    }
     
    int main(void) {
    #ifndef ONLINE_JUDGE
    freopen("input.txt","rt",stdin);
    freopen("output.txt","wt",stdout);
    #endif
    scanf("%d",&q);
    scanf("%d",&n);
    forn(i,n) scanf("%d",a+i);
    pre();
    forn(i,n) a[i] = Q[a[i]-1];
    for(int i=1;i<n;i++) a[i] = (a[i] + a[i-1]) % mod;
    scanf("%d",&m);
    forn(i,m){
    int l, r; scanf("%d%d",&l,&r); l--; r--;
    int ans = a[r];
    if(l) ans -= a[l-1];
    if(ans < 0) ans += mod;
    printf("%d\n",ans);
    }
    return 0;
    }
