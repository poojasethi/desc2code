/*	Template by
	Ashwin Kumar
	IIT Delhi */
#include<algorithm>		//min(), max(), reverse(), sort(), next_permutation(), prev_permutation(), swap()
						//make_heap(), pop_heap(), push_heap(), sort_heap()
#include<iostream>
#include<cassert>		//assert()
#include<cmath>			//cos(in radians), sin(), tan(), acos(), asin(), atan(), modf(break into frac and inte parts)
						//log(), log10(), log2(), pow(), sqrt(), cbrt(), ceil(), floor(), fmod(), abs()  
#include<cstdio>		//fclose(), fopen(), fprintf(), fscanf(), printf(), scanf(), gets(), puts()
#include<cstdlib>		//srand(time(NULL)), rand(), itoa(), malloc(), free()
#include<cstring>		//memcpy(), strcpy(), strcat(), strcmp(), memset(), strlen(), strtok(), strrchr()
#include<sstream>
#include<string>		//to_string(any numerical value), stoi(), stoll()
#include<ctime>   
#include<deque>			//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back() 
						//modifiers: push_back(), push_front(), pop_back(), pop_front(), erase(), clear()
#include<list>			//begin(), end(), push_back(), pop_back()
#include<map>			//begin(), end(), rbegin(), rend(), operator[], at(), clear(), find()
						//priority_queue:  top(), push(), pop()
#include<queue>			//front(), back(), push(), pop()
#include<set>			//begin(), end(), rbegin(), rend(), insert(), erase(), clear(), find()
#include<stack>			//top(), push(), pop()
#include<vector>		//iterators: begin(), end(), rbegin(), rend()
						//access:	 operator[], at(), front(), back()
						//modifiers: push_back(), pop_back(), erase(), clear() 
using namespace std;
 
typedef long long LL;
typedef pair<int, int> pii;
#define MAX 300000
#define INF 1000000000000LL
#define MOD 1000000007

//magic[i-1] gives ith magic number.
LL magic[MAX];
LL C[MAX];
LL powers[MAX+5];
int q;
int cnt = 0;

void recurse(int i, int sum, LL num, int L)
{
	if (i == L)
	{
		magic[cnt] = num;
		cnt++;
		return;
	}
	int start = ((i == 0) ? 1 : 0);
	for (int j = start; (j < 10 && cnt < MAX); j++)
	{
		if (sum+j*j > q)
			break;
		recurse(i+1, sum+j*j, (num+j*powers[L-i-1])%MOD, L);
	}
}

void generate(void)
{
	powers[0] = 1LL;
	for (int i = 1; i < MAX+5; i++)
		powers[i] = (powers[i-1]*10LL)%MOD;
	if (q == 1)
	{
		for (int i = 0; i < MAX; i++)
			magic[i] = powers[i];
		return;
	}
	int L = 1;
	while (cnt < MAX)
	{
		recurse(0, 0, 0LL, L);
		L++;
	}
}

int main()
{
	scanf("%d", &q);
	generate();
	int N, A;
	scanf("%d", &N);
	LL sum = 0;
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &A);
		sum = (sum+magic[A-1])%MOD;
		C[i] = sum;
	}
	int M;
	scanf("%d", &M);
	for (int i = 0; i < M; i++)
	{
		int L, R;
		scanf("%d %d", &L, &R);
		L--; R--;
		LL ans = ((L-1 >= 0) ? C[L-1] : 0);
		printf("%d\n", (int)((C[R]+(MOD-ans))%MOD));
	}
	return 0;
}
