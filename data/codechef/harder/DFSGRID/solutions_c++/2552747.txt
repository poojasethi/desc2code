#include <set>
#include <bitset>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <climits>
#include <cstring>
#include <ctime>
#include <string>
#include <algorithm>
#include <vector>
#include <stack>
#include <sstream>
#define MID(x,y) ( ( x + y ) >> 1 )
#define L(x) ( x << 1 )
#define R(x) ( x << 1 | 1 )
#define REP(i,t) for(int i=0; i<(t); i++)
#define FOR(i,s,t) for(int i=(s); i<(t); i++)
#define FORD(i,a,b) for (int i = (a); i >= (b); i--)
#define FORL(i,s,t) for(L i=(s); i<(t); i++)
#define BUG puts("here!!!")
#define STOP system("pause")
#define file_r(x) freopen(x, "r", stdin)
#define file_w(x) freopen(x, "w", stdout)
#define EPS 1e-11
#define EQ(a, b) (fabs((a) - (b)) <= EPS)
#define POS(a) ((a) >= EPS)
#define NEG(a) ((a) <= -EPS)
#define BG(a, b) ((a) - (b) >= EPS)
#define LS(a, b) ((b) - (a) >= EPS)
#define CLR(a, x) memset( a, x, sizeof( a ) )
#define PI (atan(1.0) * 4)
#define SQ(x) ((x) * (x))
#define DIST(x1, y1, x2, y2) (sqrt(SQ((x1) - (x2)) + SQ((y1) - (y2))))
#define mp(x, y) make_pair(x, y)
#define pb(x) push_back(x)
#define setmin(a, b) (a = min(a, b))
#define setmax(a, b) (a = max(a, b))
#define LOG2(x) (log(x) / log(2))
#define XX first.first
#define XY first.second
#define YX second.first
#define YY second.second

using namespace std;
typedef unsigned long long ULL;
typedef long long LL;
typedef pair<double, double> Pd;
typedef pair<int, int> Pi;
typedef pair<LL, LL> Pl;

bool v[11][11];
const int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
LL ans1, cnt;

void dfs(int i, int j, int r, int c, int tr, int tc) {
  cnt++;
  v[i][j] = 1;
  if (i == tr && j == tc)
    ans1 = cnt;
  REP(k, 4) {
    int nexti = i + dir[k][0];
    int nextj = j + dir[k][1];
    if (nexti >= 1 && nextj >= 1 && nexti <= r && nextj <= c && !v[nexti][nextj])
      dfs(nexti, nextj, r, c, tr, tc);
  }
}

void solve_correct(int r, int c, int sr, int sc, int tr, int tc) {
  CLR(v, 0);
  cnt = 0;
  dfs(sr, sc, r, c, tr, tc);
}

LL solve(LL r, LL c, LL sr, LL sc, LL tr, LL tc) {
  bool rb = (tr - sr) % 2 == 0;
  bool rb1 = (r - tr) % 2 == 0;
  bool rb2 = (r - sr) % 2 == 0;
  if (tr == sr && tc >= sc)
    return tc - sc + 1;
  if (tr > sr && tc == c)
    return c - sc + tr - sr + 1;
  if (r == 1) {
    return c - tc + 1;
  }
  if (c == 1) {
    return r - tr + 1;
  }
  if (sc == 1) {
    if (tr > sr) {
      return c - sc + r - sr + 1 + (r - tr) * (c - 1) + (rb1?(c - tc):tc);
    } else {
      return (r - tr) * c + (rb?tc:(c - tc + 1));
    }
  }
  if (sr == r) {
    if (sc == c)
      return (r - tr) * c + (rb?(c - tc + 1):tc);
    LL p = sc - 1 - (sr - tr);
    if (p >= 0) {
      LL rem;
      if (rb == (tc <= p)) {
        if (tr == 1 && tc <= p)
          rem = p - tc + 1;
        else
          rem = c - tc + 1 + (tc <= p);
      } else
        rem = tc + (tc > p);
      return c - sc + 1 + (r - tr - (tc > p)) * (c + 1) + rem;
    } else {
      return (r - tr) * c + (rb?tc:(c - tc + 1));
    }
  }
  if (tr > sr) {
    return c - sc + r - sr + 1 + (r - tr) * (c - 1) + (rb1?(c - tc):tc);
  }
  if (rb2) {
    if (tr == sr)
      return (r - tr + 1) * c - tc + 1;
    return (r - tr) * c + (rb?(c - tc + 1):tc);
  }
  LL base = c - sc + 1 + (r - sr) * c;
  LL p = sc - 1 - (sr - tr);
  if (p >= 0) {
    LL rem;
    if (rb == (tc <= p))
      rem = tc + (tc > p);
    else if (tr == 1 && tc <= p)
      rem = p - tc + 1;
    else
     rem = c - tc + 1 + (tc <= p);
    return base + (sr - tr - (tc > p)) * (c + 1) + rem;
  } else {
    return (r - tr) * c + (rb?(c - tc + 1):tc);
  }
}

int main() {
/*
  int n = 10;
  FOR(i, 1, n + 1)
    FOR(j, 1, n + 1)
      FOR(p, 1, n + 1)
        FOR(q, 1, n + 1) {
          solve_correct(n, n, i, j, p, q);
          LL ans = solve(n, n, i, j, p, q);
          if (ans != ans1) {
            printf("sr=%d sc=%d tr=%d tc=%d ans=%lld ans1=%lld\n", i, j, p, q, ans, ans1);
            exit(0);
          }
        }*/
  int t;
  cin >> t;
  while (t--) {
    LL r, c, sr, sc, tr, tc;
    cin >> r >> c >> sr >> sc >> tr >> tc;
    cout << solve(r, c, sr, sc, tr, tc) << endl;
  }
  return 0;
}
