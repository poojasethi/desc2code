#include <queue>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <stack>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define FOREACH(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

long long get(long m, long long x, long long y)
{
    return m * (x - 1) + (x % 2? y : m - y + 1);
}

long long get(long long n, long long m, long long x1, long long y1, long long x2, long long y2)
{
    if (x1 == n && y1 == m)
    {
        if (x2 == n)
            return y1 - y2 + 1;
        return m + get(m, n - x2, y2);
    }

    if (x1 == x2 && y1 <= y2)
        return y2 - y1 + 1;
        
    long long ans = m - y1 + 1;
    
    if (x2 > x1 && y2 == m)
        return ans + x2 - x1;

    ans += n - x1;
    if (x2 > x1)
        return get(m - 1, n - x2 + 1, m - y2) + ans;

    ans += (n - x1) * (m - 1);

    if (y1 == 1)
        return get(m, x1 - x2, m - y2 + 1) + ans;
    
    if ((n - x1) % 2 == 0 && n - x1 > 0)
    {
        if (x1 == x2)
            return ans + y1 - y2;
        ans += y1 - 1;
        return ans + get(m, x1 - x2, y2);
    }
    
    long long t = y1 - (x1 - x2);
    long long l = (x1 - x2) - (int)(t <= y2);
    ans += l * (m + 1);
    
    int r = x1 == n;

    if (t > 0)
    {
        if (t <= y2)
        {
            if (l % 2 == r)
                return ans + y2 + 1;
            else
                return ans + m - y2 + 1;
        }
        else
        {
            if (l % 2 == r)
                return ans + y2;
            else
                return ans + (x2 == 1? t - 1 : m + 1) - y2 + 1;
        }
    }

    ans = (n - x1 + y1) * m;
    return ans + get(m, x1 - y1 + 1 - x2, ((y1 % 2) ^ r)? y2 : m - y2 + 1);
}


int a[111][111];

void rec(int n, int m, int x, int y, int &d)
{
    if (x < 1 || y < 1 || n < x || m < y || a[x][y])
        return;
    d += 1;
    a[x][y] = d;
    rec(n, m, x, y + 1, d);
    rec(n, m, x + 1, y, d);
    rec(n, m, x, y - 1, d);
    rec(n, m, x - 1, y, d);
}

int main(int argc, char **argv)
{
//	ios_base::sync_with_stdio(false);
	#ifdef MJUDGE
		freopen("in", "r", stdin);
		freopen("out", "w", stdout);
	#endif
/*    
    for (int n = 1; n <= 10; n++)
        for (int m = 1; m <= 10; m++)
        {
            for (int x = 1; x <= n; x++)
                for (int y = 1; y <= m; y++)
                {
                    int d = 0;
                    memset(a, 0, sizeof(a));
                    rec(n, m, x, y, d);
                    for (int i = 1; i <= n; i++)
                        for (int j = 1; j <= m; j++)
                        {
                            if (a[i][j] != get(n, m, x, y, i, j))
                            {
                                cout << n << " " << m << " " << x << " " << y << " " << i << " " << j << endl;
                                cout << "\t" << get(n, m, x, y, i, j) << " " << a[i][j] << endl;
                            }
                            assert(a[i][j] == get(n, m, x, y, i, j));
                        }
                }
        }
    return 0;
//*/
    
    int t;
    scanf("%d", &t);
    while (t--)
    {
        int n, m, x1, y1, x2, y2;
        scanf("%d %d %d %d %d %d", &n, &m, &x1, &y1, &x2, &y2);
        printf("%I64lld\n", get(n, m, x1, y1, x2, y2));
    }

	return 0;
}
