#include"stdio.h"
#include"cassert"
typedef long long ll;
inline ll snaky(ll cols, ll top, ll right) { // no of cols, how much in secondary motion direction, how much in primary motion direction
	assert(cols < 1100000000u and top < 1100000000u and right < cols);
	ll res = cols * (top >> 1) << 1;
	if (top & 1)
		return res + (cols << 1) - right;
	return res + right + 1;
}
ll R, C, r1, c1, r2, c2;
inline ll flaky(ll Or, ll Oc) {
	assert(r2 < Or or (r2 == Or and c2 < Oc));
	if (c2 - r2 < Oc - Or) { // 1 - Oc + Or > r2
		ll inc = (C + 1) * ((Or - r2 + 1) / 2) * 2;
		if ((Or - r2) & 1)
			return (r2 == 1 ? inc - C - 1 + Oc - Or + r2 - c2 : inc - (c2 - 1));
		return inc + c2;
	}
	ll thresh = Or - Oc + 1;
	if (((Or - thresh) & 1) == 1)
		thresh++;
	if (r2 < thresh)
		return snaky(C, thresh - r2 - 1, c2 - 1) + C * (Or - thresh) + Oc - 1;
	ll inc = (((Or - r2 - 1) / 2) * 2 + 1) * (C + 1);
	if ((Or - r2) & 1)
		return inc - (C - c2);
	return inc + C + 1 - c2;
}
ll solve() {
	if (r1 == r2 and c2 >= c1)
		return c2 - c1 + 1;
	if (R == 1)
		return C - c1 + 1 + c1 - c2;
	if (r1 < r2) {
		if (c2 == C)
			return C - c1 + 1 + r2 - r1;
		return C - c1 + 1 + R - r1 + snaky(C - 1, R - r2, C - 1 - c2);
	}
	ll inc = C - c1 + 1 + C * (R - r1); // from DFS of part below source
	if (c1 == 1)
		return snaky(C, r1 - r2 - 1, C - c2) + inc;
	if (r1 != R) {
		if (((R - r1) & 1) == 0) {
			if (r1 == r2)
				return inc + c1 - c2;
			return inc + c1 - 1 + snaky(C, r1 - r2 - 1, c2 - 1);
		}
		//easy part over
		return inc + flaky(r1, c1);
	}
	if (c1 == C)
		return snaky(C, r1 - r2, C - c2);
	if (r2 == r1 - 1 and c2 >= c1 - 1)
		return inc + C - c2 + 1;
	inc += C - c1 + 2;
	if (r1 == r2)
		return inc + c1 - c2;
	inc += c1 - 1;
	if (c1 == 2)
		return snaky(C, r1 - r2 - 2, c2 - 1) + inc;
	return flaky(r1 - 1, c1 - 1) + inc;
}
int main() {
	unsigned int T;
	scanf("%u", &T);
	while (T--) {
		scanf("%Ld%Ld%Ld%Ld%Ld%Ld", &R, &C, &r1, &c1, &r2, &c2);
		printf("%Ld\n", solve());
	}
}