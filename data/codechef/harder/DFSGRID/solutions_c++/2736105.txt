#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
using namespace std;
const int N = 1000;
long long r, c, sr, sc, tr, tc;
long long mark[N][N];
long long cr;
long long qa, res2;
long long dx[10]={ 0, 1, 0,-1};
long long dy[10]={ 1, 0,-1, 0};
void V(long long sr, long long sc, long long tr, long long tc)
{
    ++ qa;
    mark[sr][sc] = cr;
    if(sc==tc && sr==tr)
    {
        res2 = qa;
    }
    for(long long k = 0; k < 4; ++ k)
    {
        long long nx = sr+dx[k], ny = sc+dy[k];
        if(nx >= 1 && nx <= r && ny >= 1 && ny <= c && mark[nx][ny]!=cr)
        {
            V(nx, ny, tr, tc);
        }
    }
}
long long solve(long long c, long long sr, long long sc, long long tr, long long tc)
{
    long long val = sc/2, res = 0;
    val*=2;
    if(sc==c)
    {
        res = (sr-tr)*c;
        if((sr-tr)%2==0)
            res+=(c-tc+1);
        else
            res+=tc;
        return res;
    }
    if(tr <= sr-val)
    {
        res = val*c;
        sr-=val;
        res = res+(sr-tr)*c;
        if((sr-tr)%2==0)
        res+=tc;
        else
        res+=(c-tc+1);
    }
    else
    {
        val = (sr-tr)/2;
        res+=2*val*c;
        sc-=2*val;
        sr-=2*val;


        if(tc>=sc)
        {

            if(tr==sr)
            res+=(tc-sc+1);
            else
            res+=((c-tc+1)+c-sc+1);
        }
        else
        {
            if(sr!=1)
            {
                res+=2*(c-sc+1);
                if(tc==sc-1)
                    res+=(2-(sr-tr));
                else
                {
                    res+=2;
                    if(sr==tr)
                        res+=((sc-1)-tc);
                    else
                     res+=(sc-2)+(tc);
                }
            }
            else
            {
                res+=sc-tc+(c-sc+1);
            }
        }
    }
    return res;
}
long long visit(long long r, long long c, long long sr, long long sc, long long tr, long long tc)
{
    if(sr==tr && sc==tc)
    return 1;
    if(sr==r)
    return solve(c, sr, sc, tr, tc);
    long long res = 0;
    if(tr >= sr)
    {
        if(tc==c || (tr==sr && tc >= sc))
            return (tr-sr+tc-sc+1);
        res+=(r-sr+c-sc+1);
        res+=(r-tr)*(c-1);
        if((r-tr)%2==0)
        {
            if(tr!=sr)
            {
                res+=((c-1)-tc+1);
            }
            else
            {
                res+=(sc-tc);
            }
        }
        else
        res+=tc;

        return res;
    }
    else
    {
        res = (r-sr+1)*c;
        if(sc==1)
            sc = c;
        else
        {
            if((r-sr)%2==1)
            --sc;
            else
            sc = 1;
        }
        --sr;
        return res+solve(c, sr, sc, tr, tc);
    }
    return 0;
}
int main()
{
    int tst = 0;
    long long T;
    srand(time(NULL));
    //freopen("input.txt", "r", stdin);
   // freopen("output.txt", "w", stdout);
    scanf("%lld", &T);
    for(long long te = 1; te <= T; ++ te)
    {
        ++ cr;
        if(tst)
        {
            r = rand()%10+1;
            c = rand()%10+1;
            sr = rand()%r+1;
            tr = rand()%r+1;

            sc = rand()%c+1;
            tc = rand()%c+1;
        }
        else
        {
        scanf("%lld%lld%lld%lld%lld%lld", &r, &c, &sr, &sc, &tr, &tc);
        }
        long long res;
        qa = 0;
        res = visit(r, c, sr, sc, tr, tc);
        printf("%lld\n", res);
       /* V(sr, sc, tr, tc);

        if(res2!=res)
        {
            cerr<<"WA\n"<<res2<<" "<<res<<endl;
            cout<<r<<" "<<c<<" "<<sr<<" "<<sc<<" "<<tr<<" "<<tc<<endl;
        }*/
        //cout<<tr<<" "<<tc<<endl;
    }
    return 0;
}
