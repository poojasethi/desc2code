#include<stdio.h>
#include<algorithm>
#define N 100005
using namespace std;double ans;
int Go[N<<1],Next[N<<1],End[N],cnt;
int son[N][2],num[N],pre[N],f[N],L[N],R[N];
int tot,T,x,y,i,sign,n,Q,ql,qr;char opt[5];
struct Tree{
	long long sum,lazy;int size;
	void get(long long value){
		sum+=1ll*value*size;
		lazy+=value;
	}
}a[N<<2];
void add(int u,int v){Go[++cnt]=v;Next[cnt]=End[u];End[u]=cnt;}
void DFS(int x){
	pre[L[x]=++tot]=x;
	for (int i=End[x],y;i;i=Next[i])
		if ((y=Go[i])!=f[x])
			num[y]=num[x]+1,f[y]=x,DFS(y);
	R[x]=tot;
}
inline void down(int x){
	if (!a[x].lazy) return;
	a[x<<1].get(a[x].lazy);
	a[x<<1|1].get(a[x].lazy);
	a[x].lazy=0;
}
#define up(x) a[x].sum=a[x<<1].sum+a[x<<1|1].sum;
void build(int x,int l,int r){
	a[x].size=r-l+1;a[x].lazy=a[x].sum=0;
	if (l==r) {a[x].get(num[pre[l]]);return;}
	int mid=(l+r)>>1;
	build(x<<1,l,mid);build(x<<1|1,mid+1,r);up(x);
}
void Insert(int x,int l,int r){
	if (ql<=l&&r<=qr){
		a[x].get(sign);return;
  }int mid=(l+r)>>1;down(x);
  if (ql<=mid) Insert(x<<1,l,mid);
  if (qr>mid)  Insert(x<<1|1,mid+1,r);up(x);
}
void Query(int x,int l,int r){
	if (ql<=l&&r<=qr){
		ans+=a[x].sum; return;
  }int mid=(l+r)>>1;down(x);
	if (ql<=mid) Query(x<<1,l,mid);
	if (qr>mid)  Query(x<<1|1,mid+1,r);
}
int Top(int x){return son[f[x]][0]!=x&&son[f[x]][1]!=x;}
int Rotate(int x){
	int y=f[x],z=f[y],w=son[y][0]==x;
	if (son[y][w^1]=son[x][w]) f[son[x][w]]=y;
	if (!Top(y)) son[z][son[z][1]==y]=x;
	son[x][w]=y;f[y]=x;f[x]=z;//up(y);
}
void Splay(int x){
	while (!Top(x)){
		int y=f[x],z=f[y];
		if (!Top(y)) 
			Rotate(((son[y][0]==x)^(son[z][0]==y))?x:y);
		Rotate(x);
  }
}
void Access(int x){
	int y=0,k;
	for (;x;y=x,x=f[x]){
		Splay(x);
		if (k=son[x][1]){
			for (;son[k][0];k=son[k][0]);
			sign=1,ql=L[k],qr=R[k],Insert(1,1,n);
	  }
		if (son[x][1]=y){
			for (k=y;son[k][0];k=son[k][0]);
			sign=-1,ql=L[k],qr=R[k],Insert(1,1,n);
	  }
  }
}
int main(){
	scanf("%d",&T);
	while (T--){
		scanf("%d",&n);tot=0;
		for (i=1;i<n;i++)
			scanf("%d%d",&x,&y),
			++x,++y,add(x,y),add(y,x);
		num[1]=1;DFS(1);
		build(1,1,n);
		scanf("%d",&Q);
		while (Q--){
			scanf("%s%d",opt,&x);++x;
			if (opt[0]=='q'){
				ql=L[x],qr=R[x],ans=0;
				Query(1,1,n);
				printf("%.10f\n",ans*1./(R[x]-L[x]+1)-1.);
		  }else Access(x);
		}
		for (i=1;i<=n;i++)
			son[i][0]=son[i][1]=f[i]=0;
		for (i=1;i<=n;i++) End[i]=0;cnt=0;
  }
}