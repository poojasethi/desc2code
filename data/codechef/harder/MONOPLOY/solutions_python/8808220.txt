#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<iostream>
using namespace std;
const int N = 100500;
const int M = 270000;
int point[N],to[M],next[M],cc;
int fa[N],tot[N],depth[N],num[N],numx[N];
struct Sec
{
	Sec *lson,*rson;
	int l,r,mid,tot;
	long long val,lan;
}tree[M];
struct Node
{
	Node *lson,*rson,*fa,*pre;
}xu[N];
int n,m;
char getopt()
{
	char ch=getchar();
	while(ch!='q' && ch!='O')
		ch=getchar();
	return ch;
}
int getint()
{
	int res=0;
	char ch=getchar();
	while((ch<'0' || ch>'9') && ch!='-')
		ch=getchar();
	bool fan=0;
	if(ch=='-')
	{
		fan=1;
		ch=getchar();
	}
	while('0'<=ch && ch<='9')
	{
		res=res*10+ch-'0';
		ch=getchar();
	}
	if(fan)
		res=-res;
	return res;
}
void AddEdge(int x,int y)
{
	cc++;
	next[cc]=point[x];
	point[x]=cc;
	to[cc]=y;
}
void GetData()
{
	int i;
	n=getint();
	cc=0;
	for(i=0;i<n;i++)
		point[i]=0;
	for(i=0;i<n;i++)
		xu[i].lson=xu[i].rson=xu[i].fa=0;
	for(i=1;i<n;i++)
	{
		int a=getint();
		int b=getint();
		AddEdge(a,b);
		AddEdge(b,a);
	}
}
void GetFa(int x)
{
	tot[x]=1;
	int now=point[x];
	while(now)
	{
		int tox=to[now];
		if(tox!=fa[x])
		{
			fa[tox]=x;
			depth[tox]=depth[x]+1;
			GetFa(tox);
			tot[x]+=tot[tox];
		}
		now=next[now];
	}
}
void GetNum(int x,int y)
{
	num[x]=y;
	numx[y]=x;
	y++;
	int now=point[x];
	while(now)
	{
		int tox=to[now];
		if(tox!=fa[x])
		{
			GetNum(tox,y);
			y+=tot[tox];
		}
		now=next[now];
	}
}
void Replace(Sec *x)
{
	x->val=x->lson->val+x->rson->val;
}
void AddX(Sec *x,long long y)
{
	x->val+=y*x->tot;
	x->lan+=y;
}
void Clear(Sec *x)
{
	if(x->lan)
	{
		AddX(x->lson,x->lan);
		AddX(x->rson,x->lan);
		x->lan=0;
	}
}
void Add(Sec *x,int l,int r,int t)
{
	if(x->l==l && x->r==r)
	{
		AddX(x,t);
		return;
	}
	Clear(x);
	if(r<=x->mid)
		Add(x->lson,l,r,t);
	else if(l>x->mid)
		Add(x->rson,l,r,t);
	else
	{
		Add(x->lson,l,x->mid,t);
		Add(x->rson,x->mid+1,r,t);
	}
	Replace(x);
}
long long Find(Sec *x,int l,int r)
{
	if(x->l==l && x->r==r)
		return x->val;
	Clear(x);
	if(r<=x->mid)
		return Find(x->lson,l,r);
	else if(l>x->mid)
		return Find(x->rson,l,r);
	else
		return Find(x->lson,l,x->mid)+Find(x->rson,x->mid+1,r);
}
void MakeTree(int x,int l,int r)
{
	tree[x].l=l;
	tree[x].r=r;
	tree[x].tot=r-l+1;
	tree[x].lan=0;
	if(l<r)
	{
		int mid=(l+r)/2;
		tree[x].mid=mid;
		tree[x].lson=tree+(x*2);
		tree[x].rson=tree+(x*2+1);
		MakeTree(x*2,l,mid);
		MakeTree(x*2+1,mid+1,r);
		Replace(tree+x);
	}
	else
		tree[x].val=depth[numx[l]]-1;
}
void Init()
{
	fa[0]=0;
	depth[0]=1;
	GetFa(0);
	GetNum(0,1);
	int i;
	xu[0].pre=0;
	for(i=1;i<n;i++)
		xu[i].pre=xu+fa[i];
	MakeTree(1,1,n);
}
void AddVal(Node *x)
{
	int a=x-xu;
	Add(tree+1,num[a],num[a]+tot[a]-1,1);
}
void DelVal(Node *x)
{
	int a=x-xu;
	Add(tree+1,num[a],num[a]+tot[a]-1,-1);
}
void zig(Node *x)
{
	Node *y=x->fa;
	Node *z=y->fa;
	Node *t=x->rson;
	if(z)
	{
		if(y==z->lson)
			z->lson=x;
		else
			z->rson=x;
	}
	if(t)
		t->fa=y;
	x->rson=y;
	y->lson=t;
	y->fa=x;
	x->fa=z;
}
void zag(Node *x)
{
	Node *y=x->fa;
	Node *z=y->fa;
	Node *t=x->lson;
	if(z)
	{
		if(y==z->lson)
			z->lson=x;
		else
			z->rson=x;
	}
	if(t)
		t->fa=y;
	x->lson=y;
	y->rson=t;
	y->fa=x;
	x->fa=z;
}
void Splay(Node *x)
{
	while(x->fa)
	{
		Node *y=x->fa;
		Node *z=y->fa;
		if(!z)
		{
			if(x==y->lson)
				zig(x);
			else
				zag(x);
		}
		else
		{
			if(y==z->lson)
			{
				if(x==y->lson)
					zig(y),zig(x);
				else
					zag(x),zig(x);
			}
			else
			{
				if(x==y->lson)
					zig(x),zag(x);
				else
					zag(y),zag(x);
			}
		}
	}
}
void Access(Node *x)
{
	Splay(x);
	if(x->rson)
	{
		Node *s=x->rson;
		x->rson=0;
		s->fa=0;
		while(s->lson)
			s=s->lson;
		Splay(s);
		AddVal(s);
	}
	while(x->lson)
		x=x->lson;
	Splay(x);
	while(x->pre)
	{
		Node *t=x->pre;
		Splay(t);
		if(t->rson)
		{
			Node *s=t->rson;
			t->rson=0;
			s->fa=0;
			while(s->lson)
				s=s->lson;
			Splay(s);
			AddVal(s);
		}
		t->rson=x;
		x->fa=t;
		DelVal(x);
		x=t;
		while(x->lson)
			x=x->lson;
		Splay(x);
	}
}
void DoIt()
{
	m=getint();
	while(m--)
	{
		char opt=getopt();
		if(opt=='O')
		{
			int a=getint();
			Access(xu+a);
		}
		else
		{
			int a=getint();
			double res=Find(tree+1,num[a],num[a]+tot[a]-1);
			res/=tot[a];
			printf("%.10f\n",res);
		}
	}
}
int main()
{
	int Case=getint();
	while(Case--)
	{
		GetData();
		Init();
		DoIt();
	}
	return 0;
}
