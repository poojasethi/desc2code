#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>

using namespace std;
typedef long long LL;

const int maxn=200100,inf=INT_MAX/2;
inline void minrep(int &a,int b){if(b<a)a=b;}

int fir[maxn],nxt[maxn],to[maxn],cnt,n;
int siz[maxn],fa[maxn],dfn[maxn],ed[maxn],dfc;
int nx[maxn],tp[maxn];
LL C[maxn],D[maxn];
void cadd(LL C[],int x,LL v){ for(;x<=n;x+=x&-x) C[x]+=v; }
LL cget(LL C[],int x){ LL ans=0; for(;x;x-=x&-x)ans+=C[x];return ans; }

struct node *q[maxn],*nil;
struct node{
    int id;
    node *ch[2],*fa,*p;
    void init(int id1){ id=id1; ch[0]=ch[1]=fa=p=nil; }
    void sch(node *a,int x){
        if(this!=nil)ch[x]=a;
        if(a!=nil)a->fa=this;
    }
    void rot(int x){
        node *b=ch[x];fa->sch(b,fa->ch[1]==this); swap(p,b->p);
        sch(b->ch[!x],x); b->sch(this,!x);
    }
    node *splay(){
        while(fa!=nil){
            node *f=fa;int fp=f->ch[1]==this;
            if(f->fa==nil){f->rot(fp);break;}
            node *g=f->fa;int gp=g->ch[1]==f;
            if(fp==gp)g->rot(gp),f->rot(fp);
            else      f->rot(fp),g->rot(gp);
        }return this;
    }
    void addDashed(node *a){
        if(a==nil)return;
        //printf("DASHING %d (%d)\n",a->id,dfn[a->id]);
        node *p=a; while(p->ch[0]!=nil)p=p->ch[0];
        a->p=this; cadd(D,dfn[p->id],1); cadd(C,dfn[p->id],siz[p->id]);
    }
    void rmDashed(node *a){
        if(a==nil)return; if(a->p==nil)return;
        //printf("SOLIDING %d (%d) %d\n",a->id,dfn[a->id],a->p->id);
        node *p=a; while(p->ch[0]!=nil)p=p->ch[0];
        a->p=nil; cadd(D,dfn[p->id],-1); cadd(C,dfn[p->id],-siz[p->id]);
    }
    void switchPrefer(node *a){
        splay(); node *b=ch[1];b->fa=nil;
        addDashed(b); rmDashed(a);
        sch(a,1);
    }
    void access(){
        switchPrefer(nil); node *a=this;
        for(node *pa=a->p;pa!=nil;a=pa,pa=a->p)pa->switchPrefer(a);
        splay();
    }
}nd[maxn];

void ae(int a,int b){ ++cnt; to[cnt]=b; nxt[cnt]=fir[a]; fir[a]=cnt; }
void dfs(int x,int ff){
    int mx=-1; siz[x]=1;
    for(int i=fir[x];i;i=nxt[i]){
        int id=to[i]; if(id==ff)continue;
        fa[id]=x; dfs(id,x);
        siz[x]+=siz[id];
        if(siz[id]>mx)mx=siz[id],nx[x]=id;
    }
}

void pou(int x,int t){
    dfn[x]=++dfc; tp[x]=t;
    if(nx[x])pou(nx[x],t);
    for(int i=fir[x];i;i=nxt[i]){
        int id=to[i]; if(id==fa[x] || id==nx[x])continue;
        pou(id,id);
    } ed[x]=dfc;
    if(x>1)nd[fa[x]].addDashed(nd+x);
}

void init(){
    cnt=dfc=0;
    for(int i=1;i<=n;++i) D[i]=C[i]=fir[i]=nx[i]=0,nd[i].init(i);
}


void dit(){
     scanf("%d",&n); init();
     for(int i=1;i<n;++i){ int a,b;scanf("%d%d",&a,&b);++a;++b; ae(a,b);ae(b,a); }
     dfs(1,0); pou(1,1); int Q;scanf("%d",&Q);
     while(Q--){
         char cmd[10]; int x;
         scanf("%s%d",cmd,&x); ++x;
         if(cmd[0]=='q'){
             LL sum1=cget(C,ed[x])-cget(C,dfn[x]-1);
             LL sum2=0; int y=fa[x];
             while(y){
                 sum2+=cget(D,dfn[y])-cget(D,dfn[tp[y]]-1);
                 //printf("s[%d]=%lld s[%d]=%lld\n",dfn[4],cget(D,dfn[4]),dfn[tp[y]],cget(D,dfn[tp[y]]));
                 y=fa[tp[y]];
             }
             printf("%.11f\n",double(sum2)+sum1/double(siz[x]));
         }else{
             nd[x].access();
         }
     }
}

int main() {
    nil=new node; nil->init(0);
    int T;scanf("%d",&T);
    while(T--)dit();
    return 0;
}
