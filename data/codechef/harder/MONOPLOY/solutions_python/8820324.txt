#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;

struct Node
{
	Node *fa;
	Node *son[2];
	int bh;
	Node () : fa(0),son(),bh(0) {}
	Node (int a) : fa(0),son(),bh(a) {}
} *node[222222];

int siz,n,t;
int q[222222];
int fa[222222];
int fir[222222];
int next[222222];
int tar[222222];
long long tree[333333];
long long tree1[333333];
int le[222222];
int ri[222222];

void ins1(int xx,int del)
{
	for (int x=xx;x<=n;x+=x&-x)
	{
		tree[x]+=del;
		tree1[x]+=del*(xx-1);
	}
}

void ins(int ll,int rr,int del)
{
	ins1(rr+1,-del);
	ins1(ll,del);
}

long long quer1(int xx)
{
	long long ret=0;
	for (int x=xx;x>0;x-=x&-x)
		ret+=tree[x]*xx-tree1[x];
	return ret;
}

long long quer(int ll,int rr)
{
	return quer1(rr)-quer1(ll-1);
}

void rot(Node *x,int fx)
{
	Node *y=x->fa,*z=y->fa;
	if (y->son[fx]=x->son[fx^1])
		y->son[fx]->fa=y;
	y->fa=x; x->son[fx^1]=y;
	x->fa=z;
	if (z)
	{
		if (z->son[0]==y) z->son[0]=x;
		if (z->son[1]==y) z->son[1]=x;
	}
}

void splay(Node *x)
{
	Node *y,*z; int fx,fy;
	for (y=x->fa;y&&(y->son[0]==x||y->son[1]==x);y=x->fa)
	{
		fx=y->son[0]!=x; z=y->fa;
		if (!z||(z->son[0]!=y&&z->son[1]!=y))
		{ rot(x,fx); break; }
		fy=z->son[0]!=y;
		if (fx==fy) { rot(y,fy); rot(x,fx); }
		else { rot(x,fx); rot(x,fy); }
	}
}

void splay(Node *x,Node *f)
{
	Node *y,*z; int fx,fy;
	for (y=x->fa;y!=f;y=x->fa)
	{
		fx=y->son[0]!=x; z=y->fa;
		if (z==f) { rot(x,fx); break; }
		fy=z->son[0]!=y;
		if (fx==fy) { rot(y,fy); rot(x,fx); }
		else { rot(x,fx); rot(x,fy); }
	}
}

void gang(Node *&x,int del)
{
	Node *x1;
	
	for (x1=x->son[1];x1->son[0];x1=x1->son[0]);
	splay(x1,x);
	
	ins(le[x1->bh],ri[x1->bh],del);
}

void expose(Node *x)
{
	Node *y=0;
	for (;x!=0;y=x,x=x->fa)
	{
		splay(x);
		if (x->son[1])
			gang(x,1);
		x->son[1]=y;
		if (x->son[1])
			gang(x,-1);
	}
}
 
void dfs(int nd)
{
	t++;
	le[nd]=t;
	q[t]=nd;
	for (int pt=fir[nd];pt!=0;pt=next[pt])
		if (tar[pt]!=fa[nd])
		{
			fa[tar[pt]]=nd;
			dfs(tar[pt]);
		}
	ri[nd]=t;
}

void work()
{
	int m,i,u,v;
	scanf("%d",&n);
	
	for (i=1;i<=n;i++)
		fir[i]=0;
	for (i=1;i<n;i++)
	{
		scanf("%d%d",&u,&v);
		u++; v++;
		next[i]=fir[u];
		fir[u]=i;
		tar[i]=v;
		next[i+n]=fir[v];
		fir[v]=i+n;
		tar[i+n]=u;
	}
	
	int root=1;
	t=0;
	fa[root]=0;
	dfs(root);
	
	for (i=1;i<=n;i++)
		node[i]=new Node(i);
	
	for (i=1;i<=n;i++)
		if (i!=root) node[i]->fa=node[fa[i]];
	
	memset(tree,0,sizeof(tree));
	memset(tree1,0,sizeof(tree1));
	
	for (i=1;i<=n;i++)
		if (i!=root)
			ins(le[i],ri[i],1);
	
	scanf("%d",&m);
	for (i=1;i<=m;i++)
	{
		for (u=getchar();u!='O'&&u!='q';u=getchar());
		scanf("%d",&v);
		v++;
		if (u=='O') expose(node[v]);
		else printf("%.10f\n",quer(le[v],ri[v])*1.0/(ri[v]-le[v]+1));
	//	else printf("%.10f\n",quer(le[v],ri[v])*1.0/(ri[v]-le[v]+1)-quer(le[v],le[v]));
	//	else printf("%lld\n",quer(le[v],ri[v])-quer(le[v],le[v])*(ri[v]-le[v]+1));
	}
}

int main()
{
	int T;
	scanf("%d",&T);
	
	while (T--)
		work();
	
	return 0;
}
