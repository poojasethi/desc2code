#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long LL;
#define int LL
int tt;
int n;
int H[100005],X[200005],P[200005],tot;
inline void add(int x,int y){
	P[++tot]=y;X[tot]=H[x];H[x]=tot;
}
int dfn[100005],lim[100005],siz[100005];
int son[100005];
int dep[100005];
int fa[100005];
int top[100005];
int what[100005];
int tim;
void dfs1(int x){
	top[x]=0;
	son[x]=0;
	siz[x]=1;
	dep[x]=dep[fa[x]]+1;
	for(int i=H[x];i;i=X[i]){
		if(P[i]!=fa[x]){
			fa[P[i]]=x;
			dfs1(P[i]);
			siz[x]+=siz[P[i]];
			if(siz[P[i]]>siz[son[x]]){
				son[x]=P[i];
			}
		}
	}
}
void dfs2(int x){
	dfn[x]=++tim;
	if(!top[x]) top[x]=x;
	if(son[x]) top[son[x]]=top[x],dfs2(son[x]);
	for(int i=H[x];i;i=X[i]){
		if(P[i]!=fa[x]&&P[i]!=son[x]) dfs2(P[i]);
	}
	lim[x]=tim;
}
LL sum1[400005],sum2[400005];
void push_up(int o){
	sum1[o]=sum1[o<<1]+sum1[o<<1|1];
	sum2[o]=sum2[o<<1]+sum2[o<<1|1];
}
void mk(int o,int l,int r){
	if(l==r){
		int x=what[l];
		if(x!=1){
			sum1[o]=1;
			sum2[o]=siz[x];
		}else{
			sum1[o]=sum2[o]=0;
		}
	}else{
		int mid=(l+r)/2;
		mk(o<<1,l,mid);mk(o<<1|1,mid+1,r);
		push_up(o);
	}
}
void add(int o,int l,int r,int pos,int d){
	if(l==r){
		sum1[o]+=d;
		sum2[o]+=d*siz[what[pos]];
	}else{
		int mid=(l+r)/2;
		if(pos<=mid) add(o<<1,l,mid,pos,d);
		else add(o<<1|1,mid+1,r,pos,d);
		push_up(o);
	}
}
void _add(int x,int d){
//	printf("#%lld %lld\n",x,dfn[x]);
	add(1,1,n,dfn[x],d);
}
struct LCT{
	int ls[100005],rs[100005],fa[100005];
	bool notroot(int x){
		return ls[fa[x]]==x||rs[fa[x]]==x;
	}
	void zig(int x){
		int y=fa[x];
		if(rs[x]) ls[y]=rs[x],fa[rs[x]]=y;else ls[y]=0;
		if(ls[fa[y]]==y) ls[fa[y]]=x;else if(rs[fa[y]]==y) rs[fa[y]]=x;
		fa[x]=fa[y];
		rs[x]=y;fa[y]=x;
	}
	void zag(int x){
		int y=fa[x];
		if(ls[x]) rs[y]=ls[x],fa[ls[x]]=y;else rs[y]=0;
		if(ls[fa[y]]==y) ls[fa[y]]=x;else if(rs[fa[y]]==y) rs[fa[y]]=x;
		fa[x]=fa[y];
		ls[x]=y;fa[y]=x;
	}
	void splay(int x){
		while(notroot(x)){
			int y=fa[x];
			if(!notroot(y)){
				if(ls[y]==x) zig(x);else zag(x);
			}else{
				if(ls[fa[y]]==y){
					if(ls[y]==x) zig(y),zig(x);
					else zag(x),zig(x);
				}else{
					if(ls[y]==x) zig(x),zag(x);
					else zag(y),zag(x);
				}
				
			}
		}
	}
	void access(int x){//
	//	printf("# ACCESS %lld\n",x-1);
		int y=0;
		while(x){
	//		printf("NOW %lld LAST %lld\n",x-1,y-1);
			splay(x);
			int p=rs[x];
			while(ls[p]) p=ls[p];
			if(p) _add(p,1);
			rs[x]=y;
			p=y;
			while(ls[p]) p=ls[p];
			if(p) _add(p,-1);
			y=x;
			x=fa[x];
		}
	}
	void clear(int n){
		fa[1]=0;
		for(int i=1;i<=n;i++) ls[i]=rs[i]=0;
		for(int i=2;i<=n;i++) fa[i]=::fa[i];
	}
}T; 

void change(int x){
	T.access(x);
}
LL ask2(int o,int l,int r,int L,int R){
	if(l==L&&r==R){
		return sum2[o];
	}else{
		int mid=(l+r)/2;
		if(R<=mid) return ask2(o<<1,l,mid,L,R);
		else if(L>mid) return ask2(o<<1|1,mid+1,r,L,R);
		else return ask2(o<<1,l,mid,L,mid)+ask2(o<<1|1,mid+1,r,mid+1,R);
	}
}
LL ask2(int l,int r){
	if(l>r) return 0;
	return ask2(1,1,n,l,r);
}
LL ask1(int o,int l,int r,int L,int R){
	if(l==L&&r==R){
		return sum1[o];
	}else{
		int mid=(l+r)/2;
		if(R<=mid) return ask1(o<<1,l,mid,L,R);
		else if(L>mid) return ask1(o<<1|1,mid+1,r,L,R);
		else return ask1(o<<1,l,mid,L,mid)+ask1(o<<1|1,mid+1,r,mid+1,R);
	}
}
LL ask1(int x){
	LL sum=0;
	while(x){
	//	printf("## %lld %lld\n",dfn[top[x]],dfn[x]);
		sum+=ask1(1,1,n,dfn[top[x]],dfn[x]);
		x=fa[top[x]];
	}
	return sum;
}
void ask(int x){
	LL sum=ask2(dfn[x]+1,lim[x]);
	sum+=siz[x]*1LL*ask1(x);
//	printf("%lld: %lld\n",x-1,ask1(x));
	printf("%.10f\n",sum/(double)(siz[x]));
}
#undef int
int main(){
	#define int LL
	scanf("%lld",&tt);
	while(tt--){
		tot=0;
		scanf("%lld",&n);
		for(int i=1;i<=n;i++) H[i]=0;
		for(int i=1,a,b;i<n;i++){
			scanf("%lld%lld",&a,&b);
			a++;b++;
			add(a,b);
			add(b,a);
		}
		tim=0;
		dfs1(1);
		dfs2(1);
		T.clear(n);
		for(int i=1;i<=n;i++) what[dfn[i]]=i;
		mk(1,1,n);
		int q;
		scanf("%lld",&q);
		char s[10];
		while(q--){
			int x;
			scanf("%s%lld",s,&x);
			x++;
			if(s[0]=='O'){
				change(x);
			}else{
				ask(x);
			}
		}
	}
	return 0;
}

/*

1
10
1 0
2 0
3 0
4 1
5 3
6 5
7 0
8 6
9 3
4
O 6
O 4
O 8
q 3
*/