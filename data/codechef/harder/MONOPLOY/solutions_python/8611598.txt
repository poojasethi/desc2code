#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
const int mo=1000000007;
int qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}
struct node{int up,ch[2],pre;}t[111111];
void rot(int x){
	int y=t[x].pre;
	int f=t[y].ch[0]==x;
	t[x].up=t[y].up;
	t[x].pre=t[y].pre;t[t[y].pre].ch[t[t[y].pre].ch[1]==y]=x;
	t[y].ch[!f]=t[x].ch[f];t[t[x].ch[f]].pre=y;
	t[x].ch[f]=y;t[y].pre=x;
}

int n;
struct edge{int v,next;}e[222222];int g[111111];int etot;
void ae(int u,int v){e[etot].v=v;e[etot].next=g[u];g[u]=etot++;}
int stk[111111],cur[111111],top,lef[111111],rig[111111],sz[111111],pre[111111],ind;
void dfs(int rt){
	top=ind=0;
	stk[++top]=rt;
	cur[top]=g[rt];
	pre[rt]=0;
	while(top){
		int u=stk[top];
		if(cur[top]==g[u]){
			lef[u]=++ind;
			sz[u]=1;
		}
		if(cur[top]==-1){
			rig[u]=ind;
			sz[pre[u]]+=sz[u];
			top--;
		}else{
			int v=e[cur[top]].v;cur[top]=e[cur[top]].next;
			if(v==pre[u])continue;
			stk[++top]=v;
			cur[top]=g[v];
			pre[v]=u;
		}
	}
}
ll bit[111111],biti[111111];
void bitupd(ll *a,int x,ll del){for(;x<=n+1;x+=x&-x)a[x]+=del;}
ll bitque(ll*a,int x){ll ans=0;for(;x;x-=x&-x)ans+=a[x];return ans;}
void upd(int u,int del){
	if(!u || u==1)return;
	//printf("upd %d %d\n",u,del);
	int l=lef[u],r=rig[u];
	bitupd(bit,l,del);
	bitupd(bit,r+1,-del);
	bitupd(biti,l,1ll*del*l);
	bitupd(biti,r+1,-1ll*del*(r+1));
}
ll que(int u){
	int l=lef[u],r=rig[u];
	ll a=1ll*(r+1)*bitque(bit,r)-bitque(biti,r);
	ll b=1ll*(l)*bitque(bit,l-1)-bitque(biti,l-1);
	return a-b;
}
int le(int x){
	if(x==0)return 0;
	while(t[x].ch[0])x=t[x].ch[0];
	return x;
}
void splay(int x){
		while(t[x].pre){
			int y=t[x].pre;
			if(!t[y].pre)rot(x);
			else{
				int z=t[y].pre,f=t[z].ch[1]==y;
				if(t[y].ch[f]==x){
					rot(y);rot(x);
				}else rot(x),rot(x);
			}
		}
}
void acc(int x){	
	for (int y=0;x;y=x,x=t[x].up){
		splay(x);
		t[t[x].ch[1]].pre=0;
		t[t[x].ch[1]].up=x;
		upd(le(t[x].ch[1]),1);
		t[x].ch[1]=y;t[y].pre=x;
		upd(le(y),-1);
	}
}
int main()
{
	int tes;gn(tes);
	while(tes--){
		scanf("%d",&n);
		memset(t,0,sizeof(node)*(n+5));
		memset(g,-1,sizeof(int)*(n+5));
		memset(bit,0,sizeof(ll)*(n+5));
		memset(biti,0,sizeof(ll)*(n+5));
		etot=0;
		for (int i=1;i<n;i++){
			int x,y;gn(x);gn(y);
			x++,y++;
			ae(x,y);ae(y,x);
		}
		dfs(1);
		for (int i=2;i<=n;i++)t[i].up=pre[i],upd(i,1);
		int q;gn(q);
		while(q--){
			char c;while((c=getchar())!='O' && c!='q');
			int u;gn(u);u++;
			if(c=='q'){
				printf("%.10lf\n",1.0*que(u)/sz[u]);
			}else{
				acc(u);
			}
		}
	}
	return 0;
}
