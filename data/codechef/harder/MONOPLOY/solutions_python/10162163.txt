#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>

const int maxn = 100005;

int n, Q;
int fa[maxn];
int c[maxn][2];

struct Edge
{
	int v, next;

} edge[maxn << 1];
int el;
int head[maxn];

int add[maxn << 2];
long long sum[maxn << 2];
int dfn[maxn], st[maxn], ed[maxn];
int dl;
int dep[maxn];

void newedge(int u,int v)
{
	edge[++el] = (Edge){v, head[u]}, head[u] = el;
}
void clear()
{
	el = dl = 0;
	for(int i = 1; i <= n; i++)
	{
		head[i] = 0;
		c[i][0] = c[i][1] = 0;
		fa[i] = 0;
	}
}
bool isroot(int x)
{
	return c[fa[x]][0] != x && c[fa[x]][1] != x; 
}
void setc(int x,int i,int y)
{
	fa[y] = y ? x : 0;
	c[x][i] = x ? y : 0;
}
void rotate(int x)
{
	int y = fa[x];
	int l = c[y][1] == x;

	if(isroot(y))
	{
		fa[x] = fa[y];
	}
	else
	{
		setc(fa[y], c[fa[y]][1] == y, x);
	}

	setc(y, l, c[x][l ^ 1]);
	setc(x, l ^ 1, y);
}
void splay(int x)
{
	while(!isroot(x))
	{
		int y = fa[x];

		if(!isroot(y))
		{
			if((c[y][1] == x) ^ (c[fa[y]][1] == y))
				rotate(x);
			else
				rotate(y);
		}

		rotate(x);
	}
}
void vadd(long long v,int l,int r,int s)
{
	add[s] += v;
	sum[s] += v * (r - l + 1);
}
void pushdown(int l,int r,int s)
{
	if(add[s])
	{
		int mid = (l + r) >> 1;

		vadd(add[s], l, mid, s << 1);
		vadd(add[s], mid + 1, r, s << 1 | 1);

		add[s] = 0;
	}
}
void segadd(int v,int l,int r,int ll,int rr,int s)
{
	if(l <= ll && rr <= r)
	{
		vadd(v, ll, rr, s);
	}
	else
	{
		int mid = (ll + rr) >> 1;
		
		pushdown(ll, rr, s);

		if(l <= mid) segadd(v, l, r, ll, mid, s << 1);
		if(r > mid) segadd(v, l, r, mid + 1, rr, s << 1 | 1);

		sum[s] = sum[s << 1] + sum[s << 1 | 1];
	}
}
long long query(int l,int r,int ll,int rr,int s)
{
	if(l <= ll && rr <= r) return sum[s];
	
	int mid = (ll + rr) >> 1;
	long long res = 0;
	
	pushdown(ll, rr, s);
	
	if(l <= mid) res += query(l, r, ll, mid, s << 1);
	if(r > mid) res += query(l, r, mid + 1, rr, s << 1 | 1);

	return res;
}
int findleft(int x)
{
	while(c[x][0]) x = c[x][0];

	return x;
}
void sub_add(int x,int v)
{
	segadd(v, st[x], ed[x], 1, n, 1);
}
void access(int u)
{
	int v = 0;

	while(u)
	{
		splay(u);

		if(c[u][1]) sub_add(findleft(c[u][1]), 1);
		if(v) sub_add(findleft(v), -1);

		c[u][1] = v;
		v = u;
		u = fa[u];
	}
}
void dfs(int a,int fr)
{
	fa[a] = fr;
	st[a] = ++dl;
	dfn[dl] = a;
	dep[a] = dep[fr] + 1;

	for(int i = head[a]; i ; i = edge[i].next)
	{
		if(edge[i].v != fr) dfs(edge[i].v, a);	
	}

	ed[a] = dl;
}
void build(int l,int r,int s)
{
	add[s] = 0;

	if(l == r)
	{
		sum[s] = dep[dfn[l]];
	}
	else
	{
		int mid = (l + r) >> 1;

		build(l, mid, s << 1);
		build(mid + 1, r, s << 1 | 1);

		sum[s] = sum[s << 1] + sum[s << 1 | 1];
	}
}
int main()
{
	int T;

#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif

	scanf("%d", &T);

	while(T--)
	{
		scanf("%d", &n);

		clear();
		
		for(int i = 1, u, v; i < n; i++)
		{
			scanf("%d%d", &u, &v), u++, v++;
			newedge(u, v), newedge(v, u);
		}
		
		dep[0] = -1;
		dfs(1, 0);

		scanf("%d", &Q);
		
		build(1, n, 1);
			
		while(Q--)
		{
			char ch[10];
			int u;

			scanf("%s%d", ch, &u);
			u++;

			if(ch[0] == 'O')
			{
				access(u);	
			}
			else
			{
				printf("%.6lf\n", ((double) query(st[u], ed[u], 1, n, 1)) / (ed[u] - st[u] + 1));
			}
		}
	}

#ifndef ONLINE_JUDGE
	fclose(stdin);
	fclose(stdout);
#endif
	return 0;
}
