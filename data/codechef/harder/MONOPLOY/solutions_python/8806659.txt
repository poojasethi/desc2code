#include<bits/stdc++.h>
using namespace std;

#define pb push_back

typedef long long ll;
typedef vector<int> vi;
const int N=100010;

struct splaynode
{
	int fa,ch[2];
}tree[N];

int n,times,size[N],dfn[N][2],d[N];
vi e[N];
ll c[N][2];


inline int read()
{
	char ch;
	for (ch=getchar();ch<'0'||ch>'9';) ch=getchar();
	int d=0;
	for (;ch>='0'&&ch<='9';ch=getchar()) d=d*10+ch-'0';
	return d;
}

void dfs(int k)
{
	dfn[k][0]=++times;size[k]=1;
	for (vi::iterator p=e[k].begin();p!=e[k].end();p++)
		if (!dfn[*p][0])
		{
			tree[*p].fa=k;
			dfs(*p);
			size[k]+=size[*p];
		}
	dfn[k][1]=times;
}

inline int whc(int x)
{
	if (!tree[x].fa) return 2;
	if (x==tree[tree[x].fa].ch[0]) return 0;
	if (x==tree[tree[x].fa].ch[1]) return 1;
	return 2;
}

void rotate(int x,int k)
{
	int y=tree[x].fa;
	tree[y].ch[k]=tree[x].ch[k^1];
	tree[tree[y].ch[k]].fa=y;
	tree[x].fa=tree[y].fa;
	int z=whc(y);
	if (z<2) tree[tree[x].fa].ch[z]=x;
	tree[y].fa=x;
	tree[x].ch[k^1]=y;
}

void splay(int x,int fa)
{
	while (whc(x)<2&&tree[x].fa!=fa)
	{
		int y=tree[x].fa;
		int k1=whc(x),k2=whc(y);
		if (k2==2||tree[y].fa==fa)
		{
			rotate(x,k1);break;
		}
		if (k1==k2) rotate(y,k1); else rotate(x,k1);
		rotate(x,k2);
	}
}

int minium(int x)
{
	while (tree[x].ch[0]) x=tree[x].ch[0];
	return x;
}

inline int lowbit(int x) {return x&(-x);}

void change(int x,int k,int s)
{
	while (x<=n)
	{
		c[x][k]+=s;x+=lowbit(x);
	}
}

ll query(int x,int k)
{
	ll s=0;
	while (x)
	{
		s+=c[x][k];x-=lowbit(x);
	}
	return s;
}

void update(int x,int z)
{
	change(dfn[x][0]+1,0,z);
	change(dfn[x][1]+1,0,-z);
	change(dfn[x][0],1,z*size[x]);
}

void access(int x)
{
	int y=0,z=x;
	while (x)
	{
		splay(x,0);
		if (tree[x].ch[1])
		{
			int t=minium(tree[x].ch[1]);
			update(t,1);
			splay(t,x);
		}
		if (y) update(y,-1);tree[x].ch[1]=y;
		y=minium(x);splay(y,0);x=tree[y].fa;
	}
	splay(z,0);
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	for (int T=read();T;T--)
	{
		n=read();
		for (int i=1;i<=n;i++) e[i].clear();
		for (int i=1;i<n;i++)
		{
			int x=read()+1,y=read()+1;
			e[x].pb(y);e[y].pb(x);
		}
		memset(dfn,0,sizeof(dfn));
		tree[1].fa=times=0;dfs(1);
		for (int i=1;i<=n;i++) tree[i].ch[0]=tree[i].ch[1]=0;
		memset(c,0,sizeof(c));
		for (int i=2;i<=n;i++) update(i,1);
		int m=read();for (int i=2;i<=n;i++) d[i]=1;
		for (int i=1;i<=m;i++)
		{
			char ch;
			for (ch=getchar();ch!='O'&&ch!='q';) ch=getchar();
			int x=read()+1;
			if (ch=='O')
				access(x);
			else
			{
				ll sum=query(dfn[x][0],0)*size[x]+query(dfn[x][1],1)-query(dfn[x][0]-1,1);
				printf("%.10lf\n",double(sum)/size[x]);
			}
		}
	}
	return 0;
}
