#include <cstdio>
#include <cstring>
#include <algorithm>
#define MAXN 200001
#define MAXM 400001
using namespace std;
struct edge{int node,next;}e[MAXM];
int T,n,m,cnt,tot,h[MAXN],c[MAXN][2],f[MAXN],p[MAXN],d[MAXN],l[MAXN],r[MAXN],s[MAXN],lson[MAXN],rson[MAXN];
long long t[MAXN<<3],g[MAXN<<3];
bool rev[MAXN];
void pushdown(int n,int l,int r) {
    if (g[n]) {
	  t[n<<1]+=g[n]*((l+r>>1)-l+1);
	  t[n<<1^1]+=g[n]*(r-(l+r>>1));
	  g[n<<1]+=g[n];g[n<<1^1]+=g[n];
	  g[n]=0;
	}
}
void modify(int n,int l,int r,int x,int y,int d) {
    if (r<x || l>y) return;
	if (x<=l && r<=y) {t[n]+=(r-l+1)*d;g[n]+=d;return;}
	pushdown(n,l,r);
	modify(n<<1,l,l+r>>1,x,y,d);
	modify(n<<1^1,(l+r>>1)+1,r,x,y,d);
	t[n]=t[n<<1]+t[n<<1^1];
}
long long query(int n,int l,int r,int x,int y) {
    if (r<x || l>y) return 0;
	if (x<=l && r<=y) return t[n];
	pushdown(n,l,r);
	long long left=query(n<<1,l,l+r>>1,x,y);
	long long right=query(n<<1^1,(l+r>>1)+1,r,x,y);
	return left+right;
}
void addedge(int x,int y) {
    cnt++;e[cnt]=(edge){y,h[x]};h[x]=cnt;
	cnt++;e[cnt]=(edge){x,h[y]};h[y]=cnt;
}
void dfs(int x) {
    l[x]=++tot;s[x]=1;
    for (int i=h[x];i;i=e[i].next)
	  if (e[i].node!=p[x]) {
	    p[e[i].node]=x;
		d[e[i].node]=d[x]+1;
		dfs(e[i].node);
		s[x]+=s[e[i].node];
	  }
	r[x]=tot;
}
void updata(int x) {
    if (c[x][0]) lson[x]=lson[c[x][0]];else lson[x]=x;
	if (c[x][1]) rson[x]=rson[c[x][1]];else rson[x]=x;
}
void pushdown(int x) {
    if (rev[x]) {
	  swap(c[x][0],c[x][1]);
	  rev[c[x][0]]^=1;rev[c[x][1]]^=1;
	  rev[x]=0;
	}
}
void rotate(int x,int k) {
    pushdown(x);pushdown(c[x][k]);
    int y=c[x][k];c[x][k]=c[y][k^1];c[y][k^1]=x;
	if (f[x]!=-1) c[f[x]][c[f[x]][1]==x]=y;
	f[y]=f[x];f[x]=y;f[c[x][k]]=x;swap(p[x],p[y]);
	updata(x);updata(y);
}
void splay(int x,int s=-1) {
    pushdown(x);
    while (f[x]!=s) {
	  if (f[f[x]]!=s) rotate(f[f[x]],(c[f[f[x]]][1]==f[x])^rev[f[f[x]]]);
	  rotate(f[x],(c[f[x]][1]==x)^rev[f[x]]);
	}
	updata(x);
}
void access(int x) {
    int y=0;
    while (x!=-1) {
	  splay(x);
	  if (c[x][1]) modify(1,1,n,l[lson[c[x][1]]],r[lson[c[x][1]]],1);
	  f[c[x][1]]=-1;p[c[x][1]]=x;
	  c[x][1]=y;f[y]=x;p[y]=-1;
	  if (c[x][1]) modify(1,1,n,l[lson[c[x][1]]],r[lson[c[x][1]]],-1);
	  updata(x);x=p[y=x];
	}
}
int main() {
	scanf("%d",&T);
	while (T--) {
	  cnt=tot=0;
	  memset(t,0,sizeof(t));
	  memset(g,0,sizeof(g));
	  memset(l,0,sizeof(l));
	  memset(r,0,sizeof(r));
	  memset(s,0,sizeof(s));
	  memset(d,0,sizeof(d));
	  memset(c,0,sizeof(c));
	  memset(h,0,sizeof(h));
	  memset(f,-1,sizeof(f));
	  memset(p,-1,sizeof(p));
	  memset(rev,0,sizeof(rev));
	  memset(lson,0,sizeof(lson));
	  memset(rson,0,sizeof(rson));
	  scanf("%d",&n);
	  for (int i=1;i<n;i++) {
	    int x,y;scanf("%d%d",&x,&y);
		addedge(++x,++y);
	  }
	  dfs(1);
	  for (int i=1;i<=n;i++) modify(1,1,n,l[i],l[i],d[i]);
	  scanf("%d",&m);
	  for (int i=1;i<=m;i++) {
	    char op[10];int x;
		scanf("%s%d",op,&x);x++;
		if (op[0]=='O') access(x);
		else if (op[0]=='q') printf("%.8lf\n",(double)query(1,1,n,l[x],r[x])/s[x]);
	  }
	}
	return 0;
}