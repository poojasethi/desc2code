#include <cstdio>
    #include <deque>
    #include <utility>
    #include <cassert>
    using namespace std;
    typedef pair<int, int> pii;
    long long trapezoid(pii a, pii b){
    return (long long)(b.first-a.first)*(b.second+a.second);
    }
    long long convexity(pii a, pii b, pii c){
    return trapezoid(a, b)+trapezoid(b, c)+trapezoid(c, a);
    }
    double energycost(pii a, pii b){
    return (double)(b.second-a.second)*(b.second-a.second)/(b.first-a.first);
    }
    int main(){
    int T, N, S;
    for(scanf("%d", &T); T--; ){
    scanf("%d %d", &N, &S);
    assert(1<=N && N<=30000);
    assert(0<=S && S<=30000);
    int total=0, C;
    double ans=0;
    deque<pii> lo, hi;
    lo.push_front(pii(0,0));
    hi.push_front(pii(0,0));
    for(int i=0; i<N; i++){
    scanf("%d", &C);
    assert(0<=C && C<=20000);
    total+=C;
    pii nextlo(i+1, total), nexthi(i+1, total+S);
    while(lo.size()>1 && convexity(nextlo, lo[lo.size()-1], lo[lo.size()-2])>=0)
    lo.pop_back();
    while(hi.size()>1 && convexity(nexthi, hi[hi.size()-1], hi[hi.size()-2])<=0)
    hi.pop_back();
    if(lo.size()==1){
    while(hi.size()>1 && convexity(nextlo, hi[0], hi[1])<=0){
    ans+=energycost(hi[0], hi[1]);
    hi.pop_front();
    lo[0]=hi[0];
    }
    }
    if(hi.size()==1){
    while(lo.size()>1 && convexity(nexthi, lo[0], lo[1])>=0){
    ans+=energycost(lo[0], lo[1]);
    lo.pop_front();
    hi[0]=lo[0];
    }
    }
    lo.push_back(nextlo);
    hi.push_back(nexthi);
    }
    while(lo.size()>1){
    ans+=energycost(lo[0], lo[1]);
    lo.pop_front();
    }
    assert(total>0);
    //printf(%0.
    printf("%.5lf\n", ans/total);
    }
    return 0;
    }  