#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;


#define ll long long
#define ff first
#define ss second
#define mpa make_pair
#define MOD 1000000007
#define pb push_back
#define lld I64d
#define MXN 1000000

int bitcnt(int mask){return __builtin_popcount(mask);}
int SET(int N,int pos){	return N=N | (1<<pos);}
int RESET(int N,int pos){	return N= N & ~(1<<pos);}
int check(int N,int pos){	return (N & (1<<pos));}
int toggle(int N,int pos){if(check(N,pos))return N=RESET(N,pos);return N=SET(N,pos);}
void PRINTBIT(int N){	printf("("); for(int i=6;i>=1;i--)	{bool x=check(N,i);cout<<x;}	puts(")");}
int mod(int a, int b) { return a - a/b * b;}

int N;
int Arr[MXN];

pair<int, ll> Dp[101][45001];
bool vis[101][45001];
int Sum;
int cnt;

void inp()
{
	Sum = 0;
	scanf("%d", &N);
	
	for(int i = 0; i < N; ++i) {
		scanf("%d", &Arr[i]);
		Sum += Arr[i];
	}
}

pair<int, ll> rec(int pos, int We, ll mask)
{
	//cnt++;
	
	if(pos == N) {
		return mpa(We == 0, mask);
	}

	if(vis[pos][We])
		return Dp[pos][We];
	vis[pos][We] = true;
	
	pair<int, ll> ans = rec(pos + 1, We, mask);
	if(We >= Arr[pos]) {
		pair<int, ll> ans1 = rec(pos + 1, We - Arr[pos], mask | (1 << pos));
		ans.ff |= ans1.ff;
		ans.ss |= ans1.ss;
	}
	
	return Dp[pos][We] = ans;
}


void it()
{
	int sum = (Sum + 1)/2;
	
	ll dp[sum + 2];
	memset(dp, 0, sizeof dp);
	
	dp[0] = 1;
	
	for(int i = 0; i < N; ++i) {
		for(int j = sum; j >= 0; --j) {
			if(j - Arr[i] >= 0 && dp[j - Arr[i]])
				dp[j] |= (dp[j - Arr[i]] << 1);
		}
	}
	
	ll n1 = (N)/2;
	ll n2 = (N + 1)/2;
	
	for(int j = sum; j >= 0; --j) {
		if((dp[j] & (1LL << n2)) || (N%2 != 0 && (dp[j] & (1LL << n1)))) {
			printf("%d %d\n", min(j, Sum - j), max(j, Sum - j));
			break;
		}
	}
	
}


void solve()
{
	//memset(vis, false, sizeof vis);
	
	if(N == 1) {
		printf("0 %d\n", Sum);
		return ;
	}
	
	//cnt = 0;
	//pair<int, ll> ans = rec(0, (Sum/2) + 1, 0);
	
	//cout<< "cnt => " << cnt <<"\n";
	
	/*
	puts("Dp Array");
	
	for(int i = 0; i < N; ++i) {
		for(int j = 0; j <= (Sum/2) + 1; ++j) {
			cout<< Dp[i][j] << " ";
		}
		puts("");
	}
	
	cnt = 0;
	printf("%d\n", rec(0, 19));
	
	cout<<"cnt => " << cnt <<"\n";
	*/
	
	it();
	
	/*
	for(int i = (Sum/2) + 1; i >= 0; --i) {
		cout<< Dp[0][i].ff << " " << bitcnt(Dp[0][i].ss) <<"\n";
	}
	//printf("%d %d\n", min(ans, Sum - ans), max(ans, Sum - ans));
	*/
	return ;
}

int main()
{
	int T;
	scanf("%d", &T);
	
	while(T--) {
		inp();
		solve();
		if(T)
			puts("");
	}
	
	return 0;
}
