#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<algorithm>
#include<utility>
#include<string>
#include<map>



using namespace std;

typedef pair<int, int> pii;
typedef unsigned long long ULL;
typedef long long int LL;


#define PI acos(-1)
#define MOD 1000000007
//functions come here
ULL fac[40001]={1};
ULL invfac[40001]={1};
ULL power(ULL a,ULL b)
{
	ULL c=1;
	while(b){
		if (b&1) c=(c*a)%MOD;
		a=(a*a)%MOD;
		b>>=1;
	}
	return c;
}
ULL inv(ULL x){
	return power(x,MOD-2);
}
ULL ncr(ULL n, ULL m)
{
	if (m>n) return 0;
	ULL res=fac[n];
	res=(res*invfac[m])%MOD;
	res=(res*invfac[n-m])%MOD;
	return res;
}
/*
ULL gcd(ULL a, ULL b)
{
    if(a<b)
        return gcd(b, a);
    if(b==0 || a==b)
        return a;
    return gcd(b, a-(a/b)*b);
}
void div_gcd(ULL &a, ULL &b)
{
    ULL g = gcd(a, b);
    a = a/g;
    b = b/g;
}
ULL ncr(ULL n, ULL r)
{
    if(r==0 || n==r)
        return 1;
    if(n<r)
        return 0;
    if(r>n-r)
        return ncr(n, n-r);
    ULL nr =1, dr=1, mul, div;
    for(int i=0; i<r; i++)
    {
        mul = n-i;
        div = r-i;
        div_gcd(nr, div);
        div_gcd(mul, dr);
        nr*=mul;
        dr*=div;
    }
    return (nr/dr)%MOD;
}*/
int main()
{
    int cases;
    scanf("%d", &cases);
    for(int i=1; i<40001; i++)
        fac[i] = (i*fac[i-1])%MOD;
    for(int i=1; i<40001; i++)
        invfac[i]=inv(fac[i]);
    while(cases--)
    {
        ULL n, m, r;
        scanf("%llu %llu %llu", &n, &m, &r);
        LL res = 0;
        if(r<max(n, m))
        {
            printf("0\n");
            continue;
        }
        for(int i=0; i<n; i++)
        {
            ULL a = ncr(n, i);
            for(int j=0; j<m; j++)
            {

                ULL term = ((a*ncr(m, j))%MOD*ncr((n-i)*(m-j), r))%MOD;
                if((i+j)&0x01)
                    res -= term;
                else
                    res += term;
                if(res<0)
                    res+=MOD;
                res = res%MOD;
            }
        }
        printf("%lld\n", res);
    }
    return 0;
}
