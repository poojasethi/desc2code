#pragma warning(disable:4786)
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<set>
#include<vector>
#include<cstdlib>
#include<cassert>

using namespace std;


#define SIZE 40009

typedef long long ll;

//typedef __int64 ll;

int MOD = 1000000007;

int N, M, R;
int fac[SIZE], facinv[SIZE];
ll dp[209][209];

int bigmod(int n, int pw){
	if( pw == 0) return 1;

	ll temp = bigmod(n, pw/2);
	temp = (temp *temp)%MOD;
	if( pw%2) temp = (temp*n)%MOD;

	return temp;
}

int ncr(int n, int r){
	if( n<r) return 0;

	return (((ll)fac[n]*facinv[r])%MOD*facinv[n-r])%MOD;
}

int main(){
	int T, ret, i, j;

	fac[0] = 1; facinv[0] = 1;
	for( i = 1; i<SIZE; ++i){
		fac[i] = ((ll)fac[i-1] * i)%MOD;
		facinv[i] = bigmod(fac[i], MOD-2);
	}

	scanf("%d", &T);
	while(T--){
		scanf("%d%d%d", &N, &M, &R);

		for( i = 0; i<=N; ++i){

			ll a = ncr(N, i);
			for( j = 0; j<=M; ++j){
				dp[i][j] = ( (a * ncr(M, j))%MOD * ncr( (N-i)*(M-j), R))%MOD;
			}
		}

		ret = 0;

		for( i = 0; i<=N; ++i){
			for( j = 0; j<=M; ++j){
				//printf("%d ", dp[i][j]);
				if( (i+j)%2){
					ret = ( ret - dp[i][j] + MOD);
					if( ret >= MOD) ret -= MOD;

				}
				else {
					ret = ret+dp[i][j];
					if( ret>=MOD) ret -= MOD;
				}
			}
			//puts("");
		}		

		printf("%d\n", ret);
	}

	return 0;
}