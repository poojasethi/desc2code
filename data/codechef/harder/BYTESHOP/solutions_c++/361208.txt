#include <iostream>
#include <iosfwd>
#include <iomanip>

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cassert>
#include <cctype>

#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <deque>
#include <string>
#include <list>
#include <iterator>
#include <sstream>
#include <complex>

#include <fstream>
#include <functional>
#include <numeric>
#include <utility>
#include <algorithm>

using namespace std;

#define BUG(x) if (DEBUG) cout << __LINE__ << ": " << #x << " = " << x << endl
#define LET(x, a) __typeof(a) x = a
#define FOR(i, a, b) for (LET(i, (a)); i < (b); ++i)
#define RFOR(i, a, b) for (LET(i, (a)); i >= (b); --i)
#define REP(i, N) FOR (i, 0, N)
#define RREP(i, N) RFOR (i, N, 0)
#define ALL(x) (x).begin(), (x).end()
#define RALL(x) (x).rbegin(), (x).rend()
#define CLEAR(x) memset( (x), 0, sizeof((x)))
#define FILL(x, v) memset((x), (v), sizeof((x)))
#define SORT(x) sort((x).begin(), (x).end())
#define UNIQUE(x) SORT(x), (x).resize(unique((x).begin(), (x).end()) - (x).begin())
#define REVERSE(x) reverse((x).begin(), (x).end())
#define FOREACH(it, v) for(LET(it, (v).begin()); it != (v).end(); ++it)
#define PRESENT(x, v) (find(ALL((x)), (v)) != (x).end())
#define CPRESENT(x, v) ((x).find((v)) != (x).end())
#define PB(x) push_back((x))
#define SIZE(x) ((int) (x).size())
#define MP(x, y) make_pair((x), (y))

typedef vector <int> VI; typedef vector <string> VS; typedef vector <double> VD;
typedef vector <VI> VVI; typedef vector <VS> VVS; typedef stringstream SS;
typedef pair <int, int> PII; typedef long long LL; typedef unsigned long long ULL;
typedef vector <PII> VPII; typedef vector <LL> VLL; typedef vector <bool> VB;
typedef vector <VLL> VVLL; typedef vector <VD> VVD; typedef vector <VB> VVB;

template <class T> inline int size(const T& c) { return (int) c.size(); }
VI tokenInt(string& s) {stringstream sin(s); VI v; int x; while (sin >> x) v.PB(x); return v;}
VS tokenStr(string& s) {stringstream sin(s); VS v; string x; while (sin >> x) v.PB(x); return v;}
int rInt() {int nT = -1; scanf("%d", &nT); return nT;}
string rStr() {char nStr[1 << 10] = ""; scanf("%s", nStr); return nStr;}
LL rLL() {LL nT = -1; scanf("%lld", &nT); return nT;}
char rChar() {char c = -1; scanf("%c", &c); return c;}
VI stov(string& s) {VI v; REP(i, size(s)) v.PB(s[i] - '0'); REVERSE(v); return v;}
LL stol(string& s) {LL r = 0; REP(i, size(s)) r = r * 10LL + (s[i] - '0'); return r;}
int stoi(string& s) {int r = 0; REP(i, size(s)) r = r * 10 + (s[i] - '0'); return r;}
string ltos(LL x) {string s; do {s.PB(x % 10 + '0'); x /= 10;} while (x); REVERSE(s); return s;}
VI ltov(LL x) {VI v; do {v.PB(x % 10); x /= 10;} while (x); return v;}
string itos(int x) {string s; do {s.PB(x % 10 + '0');x /= 10;} while (x); REVERSE(s); return s;}
VI itov(int x) {VI v; do {v.PB(x % 10);x /= 10;} while (x); return v;}
string vtos(VI& v) {string s; int l = size(v); REP(i, l) s.PB(v[l-i-1] + '0'); return s;}
LL vtol(VI& v) {LL r = 0; int l = size(v); REP(i, l) r = r * 10LL + v[l-i-1]; return r;}
int vtoi(VI& v) {int r = 0, l = size(v); REP(i, l) r = r * 10 + v[l-i-1]; return r;}
inline LL two(int x) {return (1LL << (x));}
template <class T> ostream& operator <<(ostream &O, vector <T> &v) {O << '{';
int x = size(v)-1; REP(i,x) O << v[i] << ", "; if (x >= 0) O << v[x]; return O << '}';}
VS split(string s,string del) {s += del[0]; string temp; VS ret; REP(i,size(s))
if(del.find(s[i]) == string::npos) temp.PB(s[i]); else{ret.PB(temp);temp = "";} return ret;}

const bool DEBUG = true;
const double EPS = 1e-8;
const int INF  = 100000000;
const LL INFLL = 1000000000000000000LL;
const LL MODULO = 1000000000 + 7;

class Solver
{
	vector < vector <LL> > c;
	vector <LL> fact;
	vector <LL> invFact;
	public: void preProcess(int csize, int fsize)
	{
		c.resize(csize, vector <LL> (csize, 0));
		c[0][0] = 1;
		for (int n = 1; n < size(c); ++n) {
			c[n][0] = c[n][n] = 1;
			for (int k = 1; k < n && k < size(c[n]); ++k)
				c[n][k] = (c[n - 1][k - 1] + c[n - 1][k]) % MODULO;
		}
		fact.resize(fsize, 0);
		invFact.resize(fsize, 0);
		fact[0] = 1;
		invFact[0] = 1;
		for (int i = 1; i < size(fact); ++i) {
			fact[i] = (fact[i - 1] * i) % MODULO;
			invFact[i] = power(fact[i], MODULO - 2);
		}
	}
	LL power(LL x, LL n)
	{
		LL result = 1;
		for (int i = 32; i >= 0; --i) {
			result = (result * result) % MODULO;
			if (two(i) & n)
				result = (result * x) % MODULO;
		}
		return result;
	}
	LL b(int n, int r)
	{
		if (n < r)
			return 0;
		LL temp = (fact[n] * invFact[r]) % MODULO;
		temp = (temp * invFact[n - r]) % MODULO;
		return temp;
	}
	inline LL mod(LL x)
	{
		x %= MODULO;
		x += MODULO;
		return x % MODULO;
	}
	LL solve(int n, int m, int r)
	{
		LL result = 0;
		for (int i = 0; i <= n; ++i) {
			for (int j = 0; j <= m; ++j) {
				LL temp = (b((n - i) * (m - j), r) * c[n][i]) % MODULO;
				temp = (temp * c[m][j]) % MODULO;
				if ((i + j) & 1)
					result = mod(result - temp);
				else
					result = mod(result + temp);
			}
		}
		return result;
	}
};

int main()
{
	const bool contest = false;
	if (contest == true) {
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
	}
	int nTest = rInt();
	Solver solver;
	solver.preProcess(200 + 1, 40000 + 1);
	for (int test = 1; test <= nTest; ++test) {
		int n = rInt(), m = rInt(), r = rInt();
		LL result = solver.solve(n, m, r);
		printf("%lld\n", result);
	}
	return 0;
}

// Powered by PhoenixAI
