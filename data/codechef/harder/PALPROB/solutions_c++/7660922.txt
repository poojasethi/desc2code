#include<cstring>
#include<iostream>
#include<string>
#include<cstdio>
#include<stdio.h>
#include<algorithm>
#include<cmath>
#include<set>
#include<map>
#include<queue>
#include<bitset>
using namespace std;


#pragma comment(linker, "/STACK:1024000000,1024000000")
#define inf 0x3f3f3f3f
#define eps 1e-9
#define FOR(i,s,t) for(int i = s; i < t; ++i )
#define REP(i,s,t) for( int i = s; i <= t; ++i )
#define pii pair<int,int>
#define MP make_pair
#define lson id << 1 , l , mid
#define rson id << 1 | 1 , mid + 1 , r
#define LL long long
#define N ( 100000 +10)
#define M ( 3000000 + 10)
#define mod 258280327

int len[N], cnt[N], fail[N], nxt[N][26], S[N];
int p, n, last;

int newnode(int l) {
	len[p] = l;
	memset(nxt[p], 0, sizeof nxt[p]);
	cnt[p] = 0;
	return p++;
}
void init() {
	p = 0;
	newnode(0);
	newnode(-1);
	fail[0] = 1;
	n = 0;
	S[n] = -1;
	last = 0;
}

int getfail( int x ) {
	while(S[n-len[x]-1] != S[n]) x = fail[x];
	return x;
}

void add(int c) {
	S[++n] = c;
	int cur = getfail(last);
	if(nxt[cur][c] == 0) {
		int now = newnode(len[cur] + 2);
		fail[now] = nxt[getfail(fail[cur])][c];
		nxt[cur][c] = now;
	}
	last = nxt[cur][c];
	cnt[last]++;
}

void count() {
	for(int i = p-1; i >= 0; --i) {
		cnt[fail[i]] += cnt[i];
	}
}

struct node{
	int ls, rs, sum;
}t[N*20];
int tot;
int build(int l, int r) {
	int k = ++tot;
	t[k].sum = 0;
	if( l == r ) return k;
	int mid = l + r >> 1;
	t[k].ls = build(l, mid);
	t[k].rs = build(mid+1, r);
	return k;
}

int update( int id, int l, int r, int x, int v) {
	int k = ++tot;
	t[k] = t[id];
	if( l == r ) {
		t[k].sum = v;
		return k;
	}
	int mid = l + r>> 1;
	if(x <= mid) t[k].ls = update(t[id].ls, l, mid, x, v);
	else t[k].rs = update(t[id].rs, mid+1, r, x, v);
	return k;
}

int query(int id, int l, int r, int x) {
	if( l == r ) return t[id].sum;
	int mid = l +r >> 1;
	if( x <= mid ) return query(t[id].ls, l, mid, x);
	else return query(t[id].rs, mid+1, r, x);
}

char s[N];
int root[N];
int val[N];
int main () {
	int T;
	scanf("%d", &T);
	while(T--) {
		scanf("%s", s);
		int ls = strlen(s);
		init();
		for(int i = 0; i < ls; ++i)
			add(s[i]-'a');
		count();

		tot = 0;
		root[1] = build(0, ls);
		root[0] = build(0, ls);
		for(int i = 2; i < p; ++i) {
			int tmp = query(root[fail[i]], 0, ls, len[i]/2);
			val[i] = tmp+1;
			root[i] = update(root[fail[i]], 0, ls, len[i], tmp+1);
		}
		LL ans = 0;
		for(int i = 2; i < p; ++i)
			ans += (LL)val[i] * cnt[i];
		printf("%lld\n", ans);
	}
}
