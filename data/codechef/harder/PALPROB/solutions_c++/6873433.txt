#include <bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long
#define si(a) scanf("%d", &a)
#define sl(a) scanf("%lld", &a)
#define sd(a) scanf("%lf", &a)
#define sii(a, b) scanf("%d%d", &a, &b)
#define sll(a, b) scanf("%lld%lld", &a, &b)
#define sdd(a, b) scanf("%lf%lf", &a, &b)

#define MAX 300005
char S[MAX];
int P[MAX];

#define charset 26
#define minchar 'a'
int cur;
struct node {
   int len, link, nxt[charset], cnt;
   vector <int> rev_link;

   void Set(int len, int link)
   {
      this->len = len;
      this->link = link;
      mem(nxt, -1);
      cnt = 0;
   }
} pal_tree[MAX+2];

void create(const char S[])
{
   int L = strlen(S);
   int lpal = -1, state[2] = {0, 0}, suffix = -1;
   cur = 1;
   REP(i, 2) pal_tree[i].Set(i-1, i-1);
   pal_tree[0].rev_link.PB(1);
   for(int i = 0; i < L; i++) {
      while(i-1-lpal < 0 || S[i] != S[i-1-lpal]) {
         state[0] = pal_tree[state[0]].link;
         lpal = pal_tree[state[0]].len;
      }
      while(suffix >= lpal || S[i] != S[i-1-suffix]) {
         if(suffix == -1) break;
         state[1] = pal_tree[state[1]].link;
         suffix = pal_tree[state[1]].len;
      }
      if(suffix == lpal) suffix = 0, state[1] = 1;
      else suffix += 2, state[1] = pal_tree[state[1]].nxt[S[i] - minchar];
      lpal += 2;
      if(pal_tree[state[0]].nxt[S[i] - minchar] == -1) {
         pal_tree[++cur].Set(lpal, state[1]);
         pal_tree[state[0]].nxt[S[i] - minchar] = cur;
         pal_tree[state[1]].rev_link.PB(cur);
      }
      state[0] = pal_tree[state[0]].nxt[S[i] - minchar];
      pal_tree[state[0]].cnt++;
   }

   for(int i = cur; i > 1; i--) {
      int u = pal_tree[i].link;
      if(u < 2) continue;
      pal_tree[u].cnt += pal_tree[i].cnt;
   }
}

void clear()
{
   REP(i, cur+1) pal_tree[i].rev_link.clear();
}

void print_tree(int state, string s)
{
   cout << s << ' ' << pal_tree[state].cnt << '\n';
   REP(i, charset) if(pal_tree[state].nxt[i] != -1) {
      string x = "";
      x = x + (char)(i+minchar);
      cout << "from " << s << " to " << x << " while state " << state << " to state " << pal_tree[state].nxt[i] << '\n';
      if(state) print_tree(pal_tree[state].nxt[i], x + s + x);
      else print_tree(pal_tree[state].nxt[i], s + x);
   }
}

Long dfs(int u)
{
   Long ret = 0;
   if(pal_tree[u].len >= 1) {
      P[ pal_tree[u].len ] = P[ pal_tree[u].len / 2 ] + 1;
      ret += ((Long)P[ pal_tree[u].len ] * pal_tree[u].cnt);
   }
   REP(i, pal_tree[u].rev_link.SZ)  ret += dfs(pal_tree[u].rev_link[i]);
   P[ pal_tree[u].len ] = 0;
   return ret;
}

void main_()
{
   //scanf("%s", S);
   cin >> S;
   create(S);
   //print_tree(0, "");
   //print_tree(1, "");
   //printf("%lld\n", x);
   mem(P, 0);
   cout << dfs(0) << '\n';
   clear();
}

int main()
{
   ios_base::sync_with_stdio(0); cin.tie(0);
   //READ("input.txt");
   //WRITE("file2.txt");
   int t = 1;
   cin >> t;
   while(t--) main_();

   return 0;
}
/*
1
tcukepzshkljugggekjdqzjen
*/
