#include <bits/stdc++.h>
using namespace std;
#define vi vector<int>
#define pii pair<int,int>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define ll long long 
#define ull unsigned long long
#define inf 1000000007
#define mod 1000000007
#define N 5005
#define DBG(x) cerr<<(#x)<<"="<<x<<endl;
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
 
template <class T> inline void Max(T &a,T b){if(a<b)a=b;}
template <class T> inline void Min(T &a,T b){if(a>b)a=b;}
 
inline void add(int &a,int b){a+=b;if(a>=mod)a-=mod;}
 
vi g[N],w[N];
int dfn[N],low[N],s[N],top,cnt,p,vis[N],be[N],v[N];
void tarjan(int u,int fa){
    dfn[u]=low[u]=++cnt;s[++top]=u;
    for(int i=0;i<g[u].size();i++){
        int j=g[u][i];
        if(j==fa)continue;
        if(!dfn[j]){
            tarjan(j,u);low[u]=min(low[u],low[j]);
        }
        else low[u]=min(low[u],dfn[j]);
    }
    if(dfn[u]==low[u]){
        int j;vi e;
        do{
            j=s[top--];
            e.pb(j);
        }while(j!=u);
        if(e.size()>2){
            p++;
            for(j=0;j<e.size();j++)vis[e[j]]=1,be[e[j]]=p,w[p].pb(e[j]);
        }
    }
}
int K;
int ans=0,dp[N][32],f[32],l[55][32],r[55][32],d[32];
void solve(int x,int y,int z);
void dfs(int u,int fa){
    //DBG(u)
    int x=be[u];
    for(int i=0;i<w[x].size();i++){
        int j=w[x][i];
        v[j]=1;
    }
    int st=0,len=w[x].size();
    for(int i=0;i<w[x].size();i++){
        int j=w[x][i];
        solve(j,j,1);
        if(j==u)st=i;
    }
    //DBG(ans)
    memset(f,0,sizeof(f));f[0]=1;
    for(int i=(st+1)%len;i!=st;i=(i+1)%len){
        int z=w[x][i];
        memset(d,0,sizeof(d));
        for(int j=1;j<=K;j++){
            for(int k=0;k+j<=K;k++){
                add(d[j+k],1LL*dp[z][j]*f[k]%mod);
            }
        }
        for(int j=2;j<=K;j++)add(ans,d[j]);
        for(int j=1;j<=K;j++)f[j]=d[j];
    }
    //DBG(ans)
    memset(d,0,sizeof(d));
    int sz=0;
    for(int i=0;i<=K;i++)l[sz][i]=dp[u][i];
    for(int i=(st-1+len)%len;i!=st;i=(i-1+len)%len){
        int z=w[x][i];sz++;
        memset(l[sz],0,sizeof(l[sz]));
        for(int j=1;j<K;j++)
            for(int k=1;k+j<=K;k++)add(l[sz][j+k],1LL*dp[z][k]*l[sz-1][j]%mod);
    }
    int sz1=0;
    int y=(st+1)%len;
    for(int i=0;i<=K;i++)r[sz1][i]=dp[w[x][y]][i];
    for(int i=(y+1)%len;i!=st;i=(i+1)%len){
        int z=w[x][i];sz1++;
        memset(r[sz1],0,sizeof(r[sz1]));
        for(int j=1;j<K;j++)
            for(int k=1;k+j<=K;k++)add(r[sz1][j+k],1LL*dp[z][k]*r[sz1-1][j]%mod);
    }
    for(int i=0;i<=sz;i++){
        for(int j=1;j<=K;j++)add(d[j],l[i][j]);
        for(int j=0;j<=sz1&&i+1+j+1<len;j++){
            for(int k=1;k<K;k++)
                for(int y=1;y+k<=K;y++)add(d[k+y],1LL*l[i][k]*r[j][y]%mod);
        }
    }
    //DBG(sz)DBG(sz1)DBG(dp[u][2])
    //puts("");
    for(int i=2;i<=K;i++){
        add(ans,d[i]);
        //cerr<<u<<" "<<i<<" "<<dp[u][i]<<",,\t";
    }
    for(int i=1;i<=K;i++)dp[u][i]=d[i];
    dp[u][1]=1;
    //DBG(ans)
}
 
void solve(int u,int fa,int flag){
    memset(dp[u],0,sizeof(dp[u]));
    dp[u][1]=1;
    v[u]=1;
    //DBG(u)
    for(int i=0;i<g[u].size();i++){
        int j=g[u][i];
        if(j==fa||v[j])continue;
        if(vis[j])dfs(j,u);
        else solve(j,u,0);
        memset(f,0,sizeof(f));
        for(int x=1;x<K;x++)
            for(int y=1;x+y<=K;y++){
                add(f[x+y],1LL*dp[u][x]*dp[j][y]%mod);
            }
        for(int x=2;x<=K;x++)add(dp[u][x],f[x]);
    }
    if(!flag)
    for(int i=2;i<=K;i++){
        add(ans,dp[u][i]);
        //cerr<<u<<" "<<i<<" "<<dp[u][i]<<"..\t";
    }
    //DBG(ans)
}
int main(){
    int T,i,j,k,m,n;
    scanf("%d",&T);
    while(T--){
        scanf("%d%d%d",&n,&m,&K);
        for(i=1;i<=n;i++)g[i].clear(),vis[i]=dfn[i]=v[i]=0,w[i].clear();
        cnt=0,p=0,top=0;ans=0;
        while(m--){
            scanf("%d%d",&i,&j);
            g[i].pb(j);g[j].pb(i);
        }
        for(i=1;i<=n;i++)if(!dfn[i]){
            tarjan(i,0);
        }
        for(i=1;i<=n;i++)if(!v[i]){
            if(!vis[i])solve(i,0,0);
            else dfs(i,0);
        }
        printf("%d\n",ans+n);
    }
    return 0;
}