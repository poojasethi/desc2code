
#include <cstdio>

#include <cstdlib>

#include <algorithm>

#include <unistd.h>

 

using namespace std;

 

char inputbuffer_raw[1024*1024*10];

char * inputbuffer = inputbuffer_raw;

 

 

 

int bikes;

int bike_speed[20000];

int bike_pos[20000];

 

struct curpos {

int index;

long long pos;

bool operator < (const curpos& other) const {

if (pos > other.pos)

return true;

else if (pos < other.pos)

return false;

return index < other.index;

}

};

 

curpos bike_curpos[20000];

 

void readinput() {

bikes = strtol(inputbuffer, &inputbuffer, 10);

for (int i = 0; i < bikes; ++i) {

bike_speed[i] = strtol(inputbuffer, &inputbuffer, 10);

bike_pos[i] = strtol(inputbuffer, &inputbuffer, 10);

}

}

 

void solve() {

int times = strtol(inputbuffer, &inputbuffer, 10);

for (int i = 0; i < times; ++i) {

long long cur_time = strtol(inputbuffer, &inputbuffer, 10);

for (int k = 0; k < bikes; ++k) {

bike_curpos[k].index = k;

bike_curpos[k].pos = bike_speed[k] * cur_time + bike_pos[k];

// printf("%dth bike at %d\n", k, bike_curpos[k].pos);

}

int cur_pos = strtol(inputbuffer, &inputbuffer, 10);

--cur_pos;

nth_element(bike_curpos, bike_curpos + cur_pos, bike_curpos + bikes);

printf("%d\n", bike_curpos[cur_pos].index + 1);

}

printf("\n");

}

 

 

int main() {

read(0, inputbuffer, sizeof inputbuffer_raw);

int cases = strtol(inputbuffer, &inputbuffer, 10);

for (int i = 0; i < cases; ++i) {

readinput();

solve();

}

return 0;

}
