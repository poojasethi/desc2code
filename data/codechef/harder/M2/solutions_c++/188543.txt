// Motorbike.cpp : Defines the entry point for the console application.
//

#include <iostream>
#include <vector>
#include <algorithm>


struct bike
{
	int index;
	int v;
	int x;
	long long currPos;

	bike() {}
	bike(int i, int vel, int pos) : index(i), v(vel), x(pos) {}
	void calcPos(long long t) { currPos = x + v * t; }

	inline bool operator < (const bike& b2) const
	{
		if (currPos == b2.currPos)
			return index < b2.index;
		return currPos > b2.currPos;
	}
};

struct query
{
	int i, t, k, result;

	query(int index, int time, int pos) : i(index), t(time), k(pos) {}
	inline bool operator < (const query& rhs) const
	{
		return t<rhs.t || (t==rhs.t && k<rhs.k);
	}
};

inline bool Qpred (const query& q1, const query& q2)
{
	return q1.i < q2.i;
}

void doTestCase()
{
	bike bikes[20000];
	std::vector<query> queries;

	int nBikes;
	std::cin >> nBikes;
	for (int j = 0; j < nBikes; ++j)
	{
		int v, x;
		std::cin >> v >> x;
		bikes[j].index = j;
		bikes[j].v = v;
		bikes[j].x = x;
	}

	int nQueries;
	std::cin >> nQueries;
	queries.reserve(nQueries);
	for (int i = 0; i < nQueries; ++i)
	{
		int t, pos;
		std::cin >> t >> pos;
		queries.push_back(query(i, t, pos));
	}

	sort(queries.begin(), queries.end());
	for (int i = 0; i < nQueries; ++i)
	{
		long long time = queries[i].t;
		for (int j = 0; j < nBikes; ++j)
		{
			bikes[j].calcPos(time);
		}

		int thisPos = queries[i].k - 1;
		std::nth_element(bikes, bikes + thisPos, bikes + nBikes);
		queries[i].result = bikes[thisPos].index + 1;
	}
		
	sort(queries.begin(), queries.end(), Qpred);
	for (int i = 0; i < nQueries; ++i)
	{
		std::cout << queries[i].result << std::endl;
	}
	std::cout << std::endl;
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif

	int nTests;
	std::cin >> nTests;
	for (int i = 0; i < nTests; ++i)
		doTestCase();

	return 0;
}

