import sys
sys.setrecursionlimit(100002)
g = [[]]
p = []

def solve(u, pa):
	res = (0,0,1)
	for node in g[u]:
		sign = 1
		if node[0] != pa:
			# import pdb;pdb.set_trace()
			val = solve(node[0], u)
			# print u,val
			v0 = val[0]; v1 = val[1]; v2 = val[2]
			while ((v0&1)== 0) and v1:
				v0 >>= 1
				v1 -= 1
			if node[1] == 1:
				v2 *= -1
				sign = -1

			if v0 > 0 and v2 == 1:
				v0 += p[v1]
			else:
				# tmp = val[0] / p[val[1]] + 1
				tmp = (v0>>v1)+1

				v0 &= (1<<(v1))-1
				# print v0,v1
				v0 = (p[v1]<<1) - v0
				if v1 == 0:
					v0 = 2
				# print v0,tmp
				v1 += tmp

			v2 = sign
			# print v0,v1,v2
			while ((v0&1)== 0) and v1:
				v0 >>= 1
				v1 -= 1
			# print v0,v1,v2

			d = max(v1,res[1])
			r0 = res[0]; r1 = res[1]; r2 = res[2]
			r0 <<= d - r1
			v0 <<= d - v1
			newval = r0*r2 + v0*v2
			r2 = 1
			if(newval < 0):
				r2 = -1
				r0 = -newval
			else:
				r0 = newval
			r1 = d
			res = (r0, r1, r2)

	return res


if __name__ == '__main__':
	t = int(sys.stdin.readline())
	p.append(1)
	for i in range(1,100005):
		p.append(p[i-1]<<1);

	while t:
		t -= 1
		n = int(sys.stdin.readline())
		g = [[]]
		for i in range(0,n+1):
			g.append([])
		for i in range(0,n-1):
			u,v,c = raw_input().split(' ')
			u = int(u)
			v = int(v)
			c = int(c)
			g[u].append((v,c))
			g[v].append((u,c))
		res = solve(1,-1)
		# print res
		if res[0] == 0:
			print "Ksen Chef"
		elif res[2] == 1:
			print "Chef Chef"
		else:
			print "Ksen Ksen"