#include <iostream>
#include <algorithm>
#include <cmath>
 
using namespace std;
 
const int co = 1001000;
const int co2 = 100010;
 
char b[co+10];
int p[co2];
int kp,i,j,tt,kd,kt;
int d[111],v[111],t[111],u[111],c[111];
int s[111][111];
long long n,ans;
 
long long mul(long long a, long long b, long long c) {
  long long d = 0;
  while (b > 0) {
    if (b & 1) {
      d += a;
      if (d >= c) d -= c;
    }
    a <<= 1;
    if (a >= c) a -= c;
    b >>= 1;
  }
  return d;
}
 
bool prime(long long a, long long n) {
  long long x = 1, step = 1LL << 60, rx;
  while (step > n-1) step >>= 1;
  while (step > 0) {
    rx = mul(x,x,n);
    if (rx == 1 && x != 1 && x != n-1) return 0;
    x = rx;
    if (step & (n-1)) x = mul(x,a,n);
    step >>= 1;
  }
  return x == 1;
}
 
bool prime(long long n) {
  return prime(2,n) && prime(7,n) && prime(61,n) && prime(13,n);
}
 
void rec(int z);
 
void doit(int z,int r,int h,int w,int p,int less) {
  if (ans == -1) return;
  if (w == kt) {
    if (r == 0) rec(z+1);
    return;
  }
  if (u[w] != h) p = 66;
  int i, e = u[w];
  for (i=0;i<=p && i<=r;i++) {
    s[z][w] = i;
    if (z > 0 && s[z][w] < s[z-1][w]) less = 1;
    if (z > 0 && s[z][w] > s[z-1][w] && less == 0) ;
    else doit(z,r-i,e,w+1,i,less);
    u[w] *= d[z];
    if (u[w] > 66) u[w] = 66;
  }
  u[w] = e;
}
 
void rec(int z) {
  if (ans == -1) return;
  if (z == kd) {
    int i;
    for (i=0;i<kt;i++) c[i] = u[i];
    sort(c,c+kt);
    reverse(c,c+kt);
    for (i=0;i<kt;i++)
      if (c[i] < t[i]) return;
    if (c[kt-1] > 1) {
      ans = -1;
      return;
    }
    int j = 0;
    long long cur = 1;
    for (i=0;i<kt;i++) {
      while (j < kt-1 && t[i] <= c[j+1]) j++;
      cur *= j-i+1;
    }
    ans += cur;
    return;
  }
  if (z == 0 || v[z] != v[z-1]) doit(z,v[z],0,0,0,1);
  else doit(z,v[z],0,0,0,0);
}
 
int main() {
  for (i=2;i<=co;i++) b[i] = 1;
  for (i=2;i*i<=co;i++)
    if (b[i])
      for (j=i*i;j<=co;j+=i) b[j] = 0;
  kp = 0;
  for (i=2;i<=co;i++)
    if (b[i]) p[kp++] = i;
  cin >> tt;
  while (tt--) {
    cin >> n;
    if (n == 1) {
      cout << 1 << endl;
      continue;
    }
    kd = 0;
    for (i=0;i<kp;i++)
      if (n % p[i] == 0) {
        d[kd] = p[i];
        v[kd] = 0;
        while (n % p[i] == 0) {
          v[kd]++;
          n /= p[i];
        }
        kd++;
      }
    if (n > 1)
      if (prime(n)) {
        d[kd] = co+3;
        v[kd++] = 1;
      } else {
        long double nn = 1.0*n;
        long long u = (long long)(sqrt(nn)+0.5);
        if (u*u == n) {
          d[kd] = co+3;
          v[kd++] = 2;
        } else {
          d[kd] = co+3;
          v[kd++] = 1;
          d[kd] = co+33;
          v[kd++] = 1;
        }
      }
    reverse(d,d+kd);
    reverse(v,v+kd);
    kt = kd+1;
    for (i=0;i<kt-1;i++) t[i] = v[i]+1;
    t[kt-1] = 1;
    sort(t,t+kt);
    reverse(t,t+kt);
    for (i=0;i<kt;i++) u[i] = 1;
    ans = 0;
    rec(0);
    cout << ans << endl;
  }
  return 0;
}