#include <cstdio>
#include <algorithm>
using namespace std;
typedef unsigned long long LL;
const int NMax=110000;
struct pii {
	int x,y;
};
pii mp(int x,int y) {
	pii ret;
	ret.x=x;ret.y=y;
	return ret;
}
pii seg[NMax],seg1[NMax],seg2[NMax];
int N,M,A[NMax];
int where[NMax],block[500],F[NMax][350];
LL ans[500],sum[NMax],ans1[500];
bool cmp1(pii a,pii b) {
	return a.x<b.x;
}
bool cmp2(pii a,pii b) {
	return a.y<b.y;
}
int main()
{
//	freopen("a.in","r",stdin);
//	freopen("a.out","w",stdout);
	scanf("%d",&N);
	int rt=300;
	int nn=0;
	for(int i=1;i<=N;i++) {
		if(i%rt==1) nn++,block[nn]=i;
		where[i]=nn;
	}
	block[nn+1]=N+1;
	for(int i=1;i<=N;i++) scanf("%d",A+i),sum[i]=sum[i-1]+A[i];
	for(int i=1;i<=N;i++) scanf("%d%d",&seg[i].x,&seg[i].y),seg2[i]=seg[i],seg1[i]=seg[i];
	for(int i=1;i<=nn;i++) {
		int end=block[i+1]-1;
		sort(seg+block[i],seg+end+1,cmp1);
		sort(seg1+block[i],seg1+end+1,cmp2);
		int p1=block[i],p2=block[i],cur=0;
		//if(i==2) {
		//for(int j=block[i];j<=end;j++) printf("%d %d\n",seg[j].x,seg[j].y);
		//for(int j=block[i];j<=end;j++) printf("%d %d\n",seg1[j].x,seg1[j].y);
		//}
		for(int j=1;j<=N;j++) {
			while(p1<=end&&seg[p1].x==j) {
				cur++;
				p1++;
			}
			F[j][i]=cur;
			while(p2<=end&&seg1[p2].y==j) {
				cur--;
				p2++;
			}
		}
		for(int j=block[i];j<=end;j++) ans[i]+=sum[seg[j].y]-sum[seg[j].x-1];
	}
	scanf("%d",&M);
	for(int i=1;i<=M;i++) {
		int t,x,y;
		scanf("%d%d%d",&t,&x,&y);
		if(t==1) {
			LL delta=y-A[x];
			A[x]=y;
			for(int j=1;j<=nn;j++) ans[j]+=(LL)delta*(LL)F[x][j];
			for(int j=where[x]+1;j<=nn;j++) ans1[j]+=delta;
			for(int j=x;j<block[where[x]+1];j++) sum[j]+=delta;
		}else {
			LL ret=0;
			if(where[x]!=where[y]) {
				for(int j=where[x]+1;j<where[y];j++) ret+=ans[j];
				for(int j=x;j<block[where[x]+1];j++) 
					ret+=ans1[where[seg2[j].y]]+sum[seg2[j].y]-ans1[where[seg2[j].x-1]]-sum[seg2[j].x-1];
				for(int j=block[where[y]];j<=y;j++) 
					ret+=ans1[where[seg2[j].y]]+sum[seg2[j].y]-ans1[where[seg2[j].x-1]]-sum[seg2[j].x-1];
			}else {
				for(int j=x;j<=y;j++) 
					ret+=ans1[where[seg2[j].y]]+sum[seg2[j].y]-ans1[where[seg2[j].x-1]]-sum[seg2[j].x-1];
			}
			printf("%llu\n",(long long)ret);
		}
	}
	//printf("%d %d %d\n",F[7][2],F[7][3],F[7][4]);
	//getchar();getchar();
	//while(1);
	return 0;
}
