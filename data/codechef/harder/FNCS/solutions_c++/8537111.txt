#include <bits/stdc++.h>
using namespace std;
const int maxn = 100010;
unsigned long long BIT[maxn];
int arr[maxn];
long long block_sum[700];
int contri[350][maxn];
int L[maxn],R[maxn],base;
 
void BIT_update(int x,int v)
{
    ++x;
    while(x<maxn)
        BIT[x]+=v,
        x+=(x&-x);
}
unsigned long long BIT_get(int x)
{
    ++x;
    long long ret=0;
    while(x>0)
        ret+=BIT[x],
        x-=(x&-x);
    return ret;
}
int main(){
    // freopen("input.txt","r",stdin) ;  
    // ios_base::sync_with_stdio(0) ;
    // cin.tie(0) ;
    int n;
    scanf("%d", &n); 
    base = ceil(sqrt(n));
    int block_num = (n+base-1)/base;
    for(int i = 0 ;i  < n; ++i){
        scanf("%d", &arr[i]);
        BIT_update(i,arr[i]); 
    }    
    for(int i = 0;i < n; ++i){
        scanf("%d %d", &L[i], &R[i]);
        L[i]--;
        R[i]--;
    }
    // cout<<base<<"\n";
    for (int i = 0; i < block_num; ++i)
    {
        vector <int> ls,rs;
        for (int j = i*base; j < min(n,(i+1)*base); ++j)
        {
            ls.push_back(L[j]);
            rs.push_back(R[j]);
        }
        sort(ls.begin(), ls.end());
        sort(rs.begin(), rs.end());
        int act = 0;
        for (int j = 0; j < n; ++j)
        {
            vector <int>::iterator sb = upper_bound(ls.begin(), ls.end(), j);
            vector <int>::iterator eb = lower_bound(rs.begin(), rs.end(), j);
            int v1 = sb-ls.begin();
            int v2 = eb-rs.begin();
            v1-=v2;
            // assert(v1 >= 0);
            contri[i][j] = v1;
            block_sum[i]+=((long long int)arr[j])*contri[i][j];
            // cout<<j<<" "<<i<<": "<<contri[j][i]<<endl;
        }
        // cout<<block_sum[i]<<endl;
    }
    int q; 
    scanf("%d", &q);
    while(q--){
        int type ;
        scanf("%d", &type); 
        if(type == 1){
            int x , y; 
            scanf("%d %d", &x, &y);
            --x; 
            BIT_update(x,-arr[x]);
            BIT_update(x,y) ; 
            for(int i = 0 ; i < block_num ; ++i){
                block_sum[i] -= ((long long int)contri[i][x])*arr[x];
                block_sum[i] += ((long long int)contri[i][x])*y; 
            }
            arr[x] = y;
        }
        else{
            int m , n; 
            scanf("%d %d", &m, &n);
            --m;
            --n;
            unsigned long long fans = 0 ;  
            for(int i = 0 ; i < block_num;  ++i){
                int l = base*i ;
                int r = l+base-1;
                if(m<=l && r<=n)
                    fans+=block_sum[i];
                else if(m>r || n<l)
                {
 
                }
                else
                {
                    for(int j=max(l,m);j<=min(n,r);++j)
                        fans+=BIT_get(R[j])-BIT_get(L[j]-1);
                }
            }
            printf("%llu\n", fans);
        }
    }
} 