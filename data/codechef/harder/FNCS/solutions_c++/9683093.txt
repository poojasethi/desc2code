#include <bits/stdc++.h>
using namespace std;
 
const int maxN = 100005;
const int G = 300;
struct Interval{
	int L, R;
}Fun[maxN];
 
struct Query{
	int t, fir, sec;
}q[maxN];
 
struct Tedge{
	int v, next;
}edge[2*maxN];
 
int n, m;
int s[maxN], ts[maxN];
unsigned long long sumS[maxN], sumF[maxN], Ans[maxN];
bool Cut[maxN];
int id[maxN];
int cntG[maxN], cnt[maxN];
int edges, dad[maxN];
 
void insertedge(int u, int v){
	edges++;
	edge[edges].v=v;
	edge[edges].next = dad[u];
	dad[u] = edges;
}
 
void Readln(){
	scanf( "%d\n", &n );
	for (int i=1; i<=n; i++){
		scanf( "%d", &s[i] );
	}
	for (int i=1; i<=n; i++){
		scanf( "%d%d", &Fun[i].L, &Fun[i].R );
	}
	scanf( "%d\n", &m );
	for (int i=1; i<=m; i++){
		scanf( "%d%d%d\n", &q[i].t, &q[i].fir, &q[i].sec );
	}
}
 
void Solve(){
	for (int i=1; i<=n; i++) ts[i] = s[i];
	for (int i=1; i<=m; i++)
	if (q[i].t == 1){
		q[i].sec -= s[q[i].fir];
		s[q[i].fir] += q[i].sec;
	}
	for (int i=1; i<=n; i++) s[i] = ts[i];
	for (int i=1; i<=m; i+=G){
		if (i > 1)
			for (int j=i-G; j<i; j++)
			if (q[j].t == 1) 
				s[q[j].fir] += q[j].sec;
		for (int j=1; j<=n; j++) sumS[j] = sumS[j-1] + s[j];
		for (int j=1; j<=n; j++) sumF[j] = sumF[j-1] + sumS[Fun[j].R] - sumS[Fun[j].L-1];
		for (int j=i; j<i+G && j<=m; j++)
		if (q[j].t == 2)
			Ans[j] = sumF[q[j].sec] - sumF[q[j].fir-1];
	}
	
	for (int i=1; i<=m; i++)
	if (q[i].t == 2){
		insertedge(q[i].sec, i);
		insertedge(q[i].fir-1, -i);
	}
	
	for (int i=1; i*G <= n || i*G <= m; i++) 
		Cut[i*G] = true;
	Cut[0] = true;
	for (int i=1; i <= n || i <= m; i++)
		if (i%G == 0) id[i] = i/G; else id[i] = i/G+1;
	for (int i=1; i<=n; i++){
		for (int j=1; j*G <= Fun[i].R; j++) cntG[j] ++;
		for (int j=Fun[i].R; !Cut[j]; j--) cnt[j] ++;
		for (int j=1; j*G < Fun[i].L; j++) cntG[j] --;
		for (int j=Fun[i].L-1; !Cut[j]; j--) cnt[j] --;
		for (int j=dad[i]; j!=0; j=edge[j].next){
			int k = 1;
			int now = edge[j].v;
			if (now < 0){
				now = -now; k = -k;
			}
			for (int L=now-1; !Cut[L]; L--)
			if (q[L].t == 1){
				Ans[now] += 1LL * k * (cntG[id[q[L].fir]] + cnt[q[L].fir]) * q[L].sec;
			}
		}
	}
	for (int i=1; i<=m; i++)
	if (q[i].t == 2) printf( "%llu\n", Ans[i] );
}
 
int main(){
	Readln();
	Solve();
	return 0;
} 