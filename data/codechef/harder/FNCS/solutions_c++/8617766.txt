#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d",&x)
#define sl(x) scanf("%llu",&x)
#define P(x) printf("%d\n",x)
#define Pl(x) printf("%lld\n",x)
#define FOR(i,x) for(int i=0;i<x;i++)
#define FORC(i,k,x) for(int i=k;i<x;i++)
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define Fill(a, b) memset(a, b, sizeof(a))

#define N 100010
#define SQRTN 1010
#define INF 1000000009
#define MOD 1000000007

#define DBG
#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

typedef unsigned long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;

int n, q, lim;
int l, r, type, change;
int k, cumm;
int low, high;
LL ar[N], bit[N], times[N];
LL pos[SQRTN][N];
LL sum[SQRTN];
LL ans;
PII func[N]; 

void update(int idx, LL val) {
	while (idx < N) {
		bit[idx] += val;
		idx += (idx & -idx);
	}
}

LL query(int idx) {
	LL sum = 0;
	while(idx) {
		sum += bit[idx];
		idx -= ((idx)&(-idx));
	}
	return sum;
}

void input() {	
	Fill(ar, 0);
	Fill(bit, 0);
	Fill(pos, 0);
	Fill(times, 0);
	Fill(sum, 0);

	sd(n);
	lim = sqrt(n);
	FORC(i, 1, n+1) {
		sl(ar[i]);
		update(i, ar[i]);
	}
	FORC(i, 1, n+1) {
		sd(l); sd(r);
		func[i] = MP(l, r);
	}
}

void solve() {
	input();

	k = 0;
	FORC(i, 1, n+1) {
		// printf("Well Well %d %d\n", func[i].F, func[i].S);
		times[func[i].F]++;
		times[func[i].S+1]--;

		if(i%lim == 0 || i == n) {
			k++;
			cumm = 0;
			FORC(j, 1, n+1) {
				cumm += times[j];
				pos[k][j] = cumm;
				sum[k] += cumm*ar[j];
				// printf("%lld %d %lld %d %lld\n", times[j], cumm, ar[j], k, sum[k]);
			}
			// printf("%d %lld\n", k, sum[k]);
			// printf("\n");
			Fill(times, 0);
		}
	}

	sd(q);
	while(q--) {
		sd(type); sd(l); sd(r);
		if (type == 1) {
			change = r-ar[l];
			update(l, change);
			ar[l] = r;
			FORC(i, 1, k+1) {
				sum[i] += pos[i][l]*change;
				// printf("%d %lld\n", i, sum[i]);
			}
		} else {
			ans = 0;
			low = ((l-1)/lim)+1;
			high = r/lim;
			FORC(i, low+1, high+1)
				ans += sum[i];

			low *= lim;
			high *= lim;
			high++;
			while (l <= min(low,r)) {
				ans += query(func[l].S) - query(func[l].F-1);
				l++;
			}
			// printf("max %d\n", );
			while (r >= max(high, l)) {
				// printf("r %d\n", r);
				ans += query(func[r].S) - query(func[r].F-1);
				r--;
			}
			printf("%llu\n", ans);
		}
	}
}

int main() {
    int t=1;
	// scanf("%d",&t);
	for(int i=1;i<=t;i++) {
		solve();
	}
}
