#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1e5 + 9;
const int SQRT = 330;

typedef long long LL;

int N,Q;
LL bit[MAXN + 5];
LL A[MAXN];
LL SQN = 0;
pair <LL,LL> functions[MAXN + 5];

struct Blocks{
	LL freq[MAXN];
	LL sum;
};

Blocks Decomposer[SQRT];

inline void update(int pos,LL val){
   for(int i = pos;i < MAXN;i += (i & (-i)))
   	 bit[i] += val;
}

inline LL query(int pos){
   LL ret = 0;
   for(int i = pos;i > 0;i -= (i & (-i)))
   	 ret += bit[i];
   return ret;
}

inline int getBlock(int idx){
	return (idx - 1)/SQN + 1;
}

inline int blockLeft(int blockNo){
	return ((blockNo - 1) * SQN) + 1;
}

inline int blockRight(int blockNo){
	return (blockNo * SQN);
}

int main (){
	memset(bit,0,sizeof(bit));
	scanf("%d",&N);
	for(int i = 1;i <= N;++i){
		scanf("%lld",&A[i]);
		update(i,A[i]);
	}
	while(SQN * SQN <= N) ++SQN;
	for(int i = 1;i <= N;++i){
	  scanf("%lld %lld",&functions[i].first,&functions[i].second);
	}
	
	int pos = 1, blockNum = 1;
	while(pos <= N){
		for(int i = 0;i < MAXN;++i)
			Decomposer[blockNum].freq[i] = 0;

		Decomposer[blockNum].sum = 0LL;
		int left = pos;
		int right = min(N * 1LL,left + SQN - 1);
		pos = right + 1;

		for(int i = left;i <= right;++i){
			Decomposer[blockNum].freq[functions[i].first]++;
			Decomposer[blockNum].freq[functions[i].second + 1]--;
			Decomposer[blockNum].sum += (query(functions[i].second) - query(functions[i].first - 1));
		}
		
		Decomposer[blockNum].freq[0] = 0;
		for(int i = 1;i < MAXN;++i){
			Decomposer[blockNum].freq[i] += Decomposer[blockNum].freq[i - 1];
		}
		
		++blockNum;
	}
	
	scanf("%d",&Q);
	while(Q--){
		LL type,x,y;
		scanf("%lld %lld %lld",&type,&x,&y);
		if(type == 1){
			LL diff = y - A[x];
			A[x] = y;
			update(x,diff); 
			for(int block = 1;block <= SQN;++block)
				Decomposer[block].sum += Decomposer[block].freq[x] * 1LL * diff; 
		} else {
			unsigned long long ans = 0;
			int left = getBlock(x), right = getBlock(y);
			if(left == right){
				for(int i = x;i <= y;++i){
				    ans += (query(functions[i].second) - query(functions[i].first - 1));
				}
			} else {
				int till = min(N,blockRight(left));
				for(int i = x;i <= till;++i){
					ans += (query(functions[i].second) - query(functions[i].first - 1));	
				}	
				int from = max(1,blockLeft(right));
				for(int i = from;i <= y;++i){
					ans += (query(functions[i].second) - query(functions[i].first - 1));
				}
				for(int i = left + 1;i < right;++i){
					ans += Decomposer[i].sum;
				}
			}
			printf("%llu\n",ans);
		}
	}
	return 0;
}
