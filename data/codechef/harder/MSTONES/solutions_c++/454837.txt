#include <cstdio>
#include <iostream>
#include <cassert>
#include <map>
#include <set>
#include <algorithm>
#include <cstring>
#include <cstdlib>
using namespace std;
typedef long long lint;
 
const int MAXN = 10000, MAXC = 30;
const int LB = -15000, UB = 15000;
 
int X[MAXN], Y[MAXN];
 
typedef struct Line{
  int A, B, C;
  Line(int x1,int y1, int x2,int y2){
    //(x-x1)*(y2-y1) == (y-y1)*(x2-x1)
    //x*(y2-y1) - y*(x2-x1) = x1*(y2-y1) - y1*(x2-x1)
    //A = (y2-y1), B = (x1-x2), C = x1*A + y1*B
    A = y2-y1, B = x1 - x2;
    C = A*x1 + B*y1;
  }
  bool on(int x,int y){
    return A*x + B*y == C;
  }
} Line;
 
const int LIMITN = 56;
int solveBruteForce(int n){
  assert(n <= LIMITN);
  int ret = n?1:0;
  for(int i=0;i<n;++i)
    for(int j=i+1;j<n;++j){
      Line L(X[i], Y[i], X[j], Y[j]);
      int cur = 2;
      for(int k=j+1;k<n;++k) if(L.on(X[k],Y[k])) ++cur;
      ret = max(ret, cur);
    }
  return ret;
}
 
int p[MAXN];
int tx[MAXN], ty[MAXN];
int solveSophisticated(int n){
  for(int i=0;i<n;++i) p[i] = i;
  random_shuffle(p,p+n);
  for(int i=0;i<n;++i) tx[i] = X[p[i]], ty[i] = Y[p[i]];
  for(int i=0;i<n;++i) X[i] = tx[i], Y[i] = ty[i];
 
  int ret = 2;
  int rounds = 400;
  while(rounds--){
    int a = rand()%n;
    int b = rand()%n;
    if(a == b) continue;
    Line L(X[a], Y[a], X[b], Y[b]);
    int cur = 0;
    for(int i=0;i<n;++i) if(L.on(X[i],Y[i])) ++cur;
    ret = max(ret, cur);
  }
  return ret;
}
 
 
int solve(int n){
  if(n <= LIMITN) return solveBruteForce(n);
  else return solveSophisticated(n);
}
 
 
main(){
  srand(time(NULL));
  int cases;cin>>cases;
  assert(0 <= cases && cases <= MAXC);
  while(cases--){
    int n;cin>>n;
    assert(1<= n && n<= MAXN);
    for(int i=0;i<n;++i){
      int x,y;
      scanf("%d %d",&x,&y);
//      assert(LB <= x && x <= UB);
//      assert(LB <= y && y <= UB);
      X[i] = x;
      Y[i] = y;
    }
    int ret = solve(n);
    cout<<ret<<endl;
  }
}