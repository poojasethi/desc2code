#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <algorithm>
#include <functional>
#include <iterator>
#include <locale>
#include <memory>
#include <stdexcept>
#include <utility>
#include <string>
#include <fstream>
#include <ios>
#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <istream>
#include <ostream>
#include <sstream>
#include <streambuf>
#include <complex>
#include <numeric>
#include <valarray>
#include <exception>
#include <limits>
#include <new>
#include <typeinfo>
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <climits>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdlib>
#include <cstddef>
#include <cstdarg>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <cwchar>
#include <cwctype>
using namespace std;
static const double EPS = 1e-8;
static const double PI = 4.0 * atan(1.0);
static const double PI2 = 8.0 * atan(1.0);
typedef long long ll;
typedef unsigned long long ull;

#define ALL(c) (c).begin(), (c).end()
#define CLEAR(v) memset(v,0,sizeof(v))
#define MP(a,b) make_pair((a),(b))
#define REP(i,n) for(int i=0;i<(int)n;++i)
#define ABS(a) ((a)>0?(a):-(a))

// xorshiftによる乱数生成
unsigned long xor128(){ 
	static unsigned long x=123456789,y=362436069,z=521288629,w=(unsigned long)time(NULL); 
	unsigned long t; 
	t=(x^(x<<11));x=y;y=z;z=w; return( w=(w^(w>>19))^(t^(t>>8)) ); 
}

int main() {
	int T;
	scanf("%d", &T);
	REP(t, T) {
		int N;
		scanf("%d", &N);

		static int x[16 * 1024];
		static int y[16 * 1024];
		REP(n, N) {
			scanf("%d%d", &x[n], &y[n]);
		}

		if (N <= 2) {
			printf("%d\n", N);
			continue;
		}

		const int maxLoop = min(500, N * 10);
		int bestAnswer = 0;
		REP(loop, maxLoop) {
			int i = xor128() % N;
			int j;
			do {
				j = xor128() % N;
			} while (i == j);

			const int x0 = x[i];
			const int y0 = y[i];
			const int x1 = x[j];
			const int y1 = y[j];

			int answer = 0;
			REP(n, N) {
				const int x2 = x[n];
				const int y2 = y[n];
				const int a = x1 - x0;
				const int b = y1 - y0;
				const int c = x2 - x0;
				const int d = y2 - y0;
				if (a * d == c * b) {
					++answer;
				}
			}

			bestAnswer = max(bestAnswer, answer);
		}

		printf("%d\n", bestAnswer);
	}
}
