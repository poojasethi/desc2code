#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

struct Number_Theory_Transform
{
	#define size 70005
	
	int N,p,g,*W,w[2][size],rev[size];
	
	int Power(int a,int b)
	{
		int ans=1;
		for(;b;a=(long long)a*a%p,b>>=1)if(b&1)ans=(long long)ans*a%p;
		return ans;
	}
	void prepare(int n)
	{
		if(N==n)return;
		int i,k,x,y;N=n;
		for(i=0;i<n;++i)
		{
			for(x=i,y=0,k=1;k<N;x>>=1,k<<=1)(y<<=1)|=x&1;
			rev[i]=y;
		}
		x=Power(g,(p-1)/n);y=Power(x,p-2);
		w[0][0]=w[1][0]=1;
		for(i=1;i<n;++i)
		w[0][i]=(long long)w[0][i-1]*x%p,
		w[1][i]=(long long)w[1][i-1]*y%p;
	}
	void work(int *A,int n)
	{
		if(n==1)return;
		int i,j,k,l,t,x,y;
		for(i=0;i<n;++i)if(i<rev[i])swap(A[i],A[rev[i]]);
		for(i=1;i<n;i<<=1)
		for(j=0,t=N/(i<<1);j<n;j+=i<<1)
		for(k=l=0;k<i;++k,l+=t)
		{
			x=(long long)W[l]*A[j+k+i]%p;
			y=A[j+k];
			A[j+k]=(y+x)%p;
			A[j+k+i]=(y-x+p)%p;
		}
	}
	
	void DFT(int *A,int n){prepare(n);W=w[0];work(A,n);}
	void IDFT(int *A,int n)
	{
		prepare(n);W=w[1];work(A,n);
		for(int i=0,x=Power(n,p-2);i<n;++i)A[i]=(long long)A[i]*x%p;
	}
	
	#undef size
}NTT;

int N,n,m,P,i,j,k,l,t,Ans;
int ans[55][40005],power[55][40005],tmp[55];

int main()
{
	scanf("%d%d%d",&n,&P,&m);
	for(N=1;N<=2*m;N<<=1);
	NTT.p=998244353;NTT.g=3;
	#define p 998244353
	ans[0][0]=1;l=0;
	for(i=0;i<=9&&i<=m;++i)++power[i%P][i];
	for(l=10%P;n;n>>=1,l=l*l%P)
	{
		if(n&1)
		{
			for(i=0;i<P;++i)NTT.DFT(ans[i],N);
			for(i=0;i<P;++i)NTT.DFT(power[i],N);
			for(i=0;i<N;++i)
			{
				for(j=0;j<P;++j)tmp[j]=0;
				for(j=0;j<P;++j)
				for(k=0;k<P;++k)
				{
					t=(j*l+k)%P;
					tmp[t]=(tmp[t]+(long long)ans[j][i]*power[k][i])%p;
				}
				for(j=0;j<P;++j)ans[j][i]=tmp[j];
			}
			for(i=0;i<P;++i)
			{
				NTT.IDFT(ans[i],N);
				for(j=m+1;j<N;++j)ans[i][j]=0;
			}
		}
		if((n&1)==0)for(i=0;i<P;++i)NTT.DFT(power[i],N);
		for(i=0;i<N;++i)
		{
			for(j=0;j<P;++j)tmp[j]=0;
			for(j=0;j<P;++j)
			for(k=0;k<P;++k)
			{
				t=(j*l+k)%P;
				tmp[t]=(tmp[t]+(long long)power[j][i]*power[k][i])%p;
			}
			for(j=0;j<P;++j)power[j][i]=tmp[j];
		}
		for(i=0;i<P;++i)
		{
			NTT.IDFT(power[i],N);
			for(j=m+1;j<N;++j)power[i][j]=0;
		}
	}
	for(i=0;i<=m;++i)
	{
		Ans+=ans[0][i];
		if(Ans>=p)Ans-=p;
		printf("%d",Ans);
		if(i==m)printf("\n");else printf(" ");
	}
}