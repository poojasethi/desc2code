#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<assert.h>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int P=998244353;
const int G=3;
const int MAXN=(1<<15)+2;
int rev[MAXN];
int w[2][MAXN];
int N,M;
inline int Pow(int a,int b){
	int c=1;
	for(;b;b>>=1,a=a*1ll*a%P)if(b&1)c=c*1ll*a%P;
	return c;
}
void init(){
	rep(i,0,N-1){
		int x=i;int y=0;
		for(int k=1;k<N;k<<=1,x>>=1)(y<<=1)|=(x&1);
		rev[i]=y;
	}
	
	w[0][0]=w[1][0]=1;
	int V=Pow(G,(P-1)/N);
	int WV=Pow(V,P-2);
	rep(i,1,N-1){
		w[0][i]=w[0][i-1]*1ll*V%P;
		w[1][i]=w[1][i-1]*1ll*WV%P;
	}
}
void FFT(int *A,int f){
	rep(i,0,N-1)if(i<rev[i]){
		int tmp=A[i];A[i]=A[rev[i]];A[rev[i]]=tmp;
	}
	for(int i=1;i<N;i<<=1)
	for(int j=0,t=N/(i<<1);j<N;j+=(i<<1))
	for(int k=0,l=0;k<i;k++,l+=t){
		int x=w[f][l]*1ll*A[i+j+k]%P;
		int y=A[j+k];
		A[j+k]=(x+y)%P;
		A[i+j+k]=(y+P-x)%P;
	}
	if(f){
		int gg=Pow(N,P-2);
		rep(i,0,N-1)A[i]=A[i]*1ll*gg%P;
	}
}
int tmp[MAXN];
void bei(int *A,int *B,int k){
	rep(i,0,N-1)A[i]=0;
	//rep(i,0,N-1)tmp[i]=B[i];
	A[0]=1;
	while(k){
		FFT(B,0);
		if(k&1){
			FFT(A,0);
			rep(i,0,N-1)A[i]=A[i]*1ll*B[i]%P;
			FFT(A,1);
			rep(i,M+1,N-1)A[i]=0;
		}
		rep(i,0,N-1)B[i]=B[i]*1ll*B[i]%P;
		FFT(B,1);
		rep(i,M+1,N-1)B[i]=0;
		k>>=1;
	}
}
int cnt[55];
int MD,C;
int pre[55];
int f[55][MAXN];
int g[55][MAXN];
int h[55][MAXN];
int t[MAXN];
int y[MAXN];
int main(){
	scanf("%d%d%d",&C,&MD,&M);
	N=1;while(N<=M)N<<=1;N<<=1;
	init();
	memset(pre,-1,sizeof pre);
	for(int now=1%MD,i=0;i<C;i++,now=now*10%MD){
		//if(i>100000)break;
		cnt[now]++;
		if(pre[now]>=0){
			int len=i-pre[now];
			int GG=(C-1-i)/len;
			int gt=now;
			rep(j,0,len-1){
				gt=gt*10%MD;
				cnt[gt]+=GG;
			}
			//if(gt!=now)printf("%d %d\n",now,gt);
			rep(j,1,(C-1-i)%len){
				now=now*10%MD;
				cnt[now]++;
			}
			break;
		}
		else{
			pre[now]=i;
		}
	}
	//rep(i,0,MD-1)printf("%d ",cnt[i]);printf("\n");
	
	f[0][0]=1;FFT(f[0],0);
	rep(i,0,MD-1){
		rep(j,0,N-1)t[j]=0;
		rep(j,0,min(9,M))t[j]=1;
		
		//rep(j,0,N-1)printf("%d ",t[j]);printf("\n");
		
		bei(y,t,cnt[i]);
		
		rep(j,0,MD-1)rep(k,0,N-1)g[j][k]=0;
		rep(j,0,M)g[j*i%MD][j]=(g[j*i%MD][j]+y[j])%P;
		
		//printf("__");rep(j,0,N-1)printf("%d ",y[j]);printf("\n");
		
		rep(j,0,MD-1)FFT(g[j],0);

		
		rep(k,0,N-1){
			int bb[55];
			rep(j,0,MD-1)bb[j]=0;
			
			rep(j,0,MD-1)rep(l,0,MD-1)
			bb[(j+l)%MD]=(bb[(j+l)%MD]+1ll*f[j][k]*g[l][k])%P;
			
			rep(j,0,MD-1)h[j][k]=bb[j];
		}
		rep(k,0,N-1)rep(j,0,MD-1)f[j][k]=h[j][k];
		
		rep(j,0,MD-1)FFT(f[j],1);
		rep(j,0,MD-1)rep(k,M+1,N-1)f[j][k]=0;
		rep(j,0,MD-1)FFT(f[j],0);
	}
	FFT(f[0],1);
	int ans=0;
	rep(i,0,M){
		ans+=f[0][i];
		if(ans>=P)ans-=P;
		printf("%d ",ans);
	}
	return 0;
}

