#include<bits/stdc++.h>

using namespace std;

#define ll long long int
#define ull unsigned long long int
#define maxN 1000006
#define maxW 1005
#define pb push_back
#define mp make_pair
#define INF (((ll)1000000000) * ((ll)1000000000))
#define e 2.7182818284590452353602874
#define maxT 1000000
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define rep(i,N) for(int i=0;i<N;i++)

const ll MOD=1000000007;
ll power(ll a,ll n) {
 ll result = 1;
 while(n) {
  if((n&1))
   result = (result*a)%MOD;
   a = (a*a)%MOD;
   n >>= 1;
 }
 return result%MOD;
}

//Trying inclusion exclusion principle
long long solve(int m,int n,int p,int q,int r,int s){
    long long s1,s2,s3,s4,s5;//4 cases
    s1 = power(m,n)-power(m-m/p,n)-power(m-m/q,n)-power(m-m/r,n)-power(m-m/s,n)+ 4*MOD;
    s1%=MOD;
    s2 = power(m-m/p-m/q+m/(p*q),n)+ power(m-m/p-m/r+m/(p*r),n)+power(m-m/r-m/q+m/(r*q),n)+power(m-m/p-m/s+m/(p*s),n)+power(m-m/s-m/r+m/(s*r),n)+power(m-m/s-m/q+m/(s*q),n);
    s2%=MOD;
    s3= power(m- m/p -m/q -m/r +m/(p*q)+ m/(q*r)+m/(p*r) - m/(p*q*r),n)+ power(m-m/p-m/q-m/s+m/(p*q)+m/(p*s)+m/(q*s)-m/(p*q*s),n);
    s3%=MOD;
    s4= power(m-m/s-m/q-m/r+m/(s*q)+m/(s*r)+m/(q*r)-m/(s*q*r),n)  +  power(m-m/p-m/r-m/s+m/(p*r)+m/(p*s)+m/(r*s)-m/(p*r*s),n);
    s4%=MOD;
    s5= power(m-m/p-m/q-m/r-m/s+m/(p*q)+m/(q*r)+m/(p*r)+m/(r*s)+m/(p*s)+m/(q*s) - m/(p*q*r)-m/(q*r*s) - m/(p*q*s) - m/(p*r*s) + m/(p*q*r*s),n);
    long long fina = s1 + s2 - s3 - s4 + s5 + MOD + MOD;
    fina %=MOD;
    return fina;
}

int prime[1003],F[1003];
int dp[1004][10];
int primes=0;
void sieve() {
for(int i=2;i<=1000;i++)
 if(F[i]==0) {
  prime[primes++]=i;
  for(int j=i+i;j<=1000;j+=i)
   F[j]=1;
 }

for(int i=1;i<=1000;i++)
 for(int j=0;j<=10;j++)
  dp[i][j]=1;

for(int i=2;i<=1000;i++)  {
int temp=i;
 while(temp>1) {
  int cnt=0;
  for(int j=0;j<primes;j++) {
   int p=1;
   while(temp%prime[j]==0) {
    temp/=prime[j];
    p*=prime[j];
   }
   if(p>1)
    dp[i][cnt++]=p;
   }
  }
 }

}


int main() {

cin.sync_with_stdio(0);
cin.tie(0);

sieve();


int T;
cin>>T;

while(T--) {
int N,M,L,R;
cin>>N>>M>>L>>R;
ll ans=0;
 for(int i=L;i<=R;i++)
  ans=(ans+solve(M,N,dp[i][0],dp[i][1],dp[i][2],dp[i][3]) )%MOD;
cout<<ans<<"\n";
}

    return 0;
}



