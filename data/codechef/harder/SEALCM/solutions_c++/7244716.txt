#include<bits/stdc++.h>

using namespace std;

#define ll long long int
#define ull unsigned long long int
#define maxN 1000006
#define maxW 1005
#define pb push_back
#define mp make_pair
#define INF (((ll)1000000000) * ((ll)1000000000))
#define e 2.7182818284590452353602874
#define maxT 1000000
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define rep(i,N) for(int i=0;i<N;i++)

int prime[1003],F[1003];
int dp[1004][10];
int primes=0;

const ll MOD=1000000007;
ll power(ll a,ll n) {
 ll result = 1;
 while(n) {
  if((n&1))
   result = (result*a)%MOD;
   a = (a*a)%MOD;
   n >>= 1;
 }
 return result%MOD;
}


void cancel(int a,int M) {
for(int j=a;j<=M;j+=a)
 F[j]=1;
}

int orM;
ll x;
//4 bit mask representing factors
void solve(int M,int N,int mask) {
int tempmask=mask;
int V[10],sz=0;

for(int i=0;i<4;i++)
 V[i]=0;

while(mask>0) {
 V[sz++]=mask%2;
 mask/=2;
 }

/*cout<<tempmask<<"\n";
for(int i=0;i<4;i++) 
 cout<<V[i]<<" ";
cout<<"\n";

for(int i=0;i<4;i++) 
 cout<<dp[M][i]<<" ";
cout<<"\n";*/

memset(F,0,sizeof(F));
for(int i=0;i<4;i++)
 if(V[i]) 
  cancel(dp[M][i],orM);

ll cnt=0;
for(int i=1;i<=orM;i++) 
 if(!F[i])
  cnt++;
//cout<<"cnt is "<<cnt<<"\n";
ll partial=power(cnt,N);

int setbits=__builtin_popcount(tempmask);
//cout<<"setbits are "<<setbits<<"\n";
if(setbits%2)
 x=(x+partial)%MOD;
else
 x=(MOD+x-partial)%MOD;
}


void sieve() {
for(int i=2;i<=1000;i++)
 if(F[i]==0) {
  prime[primes++]=i;
  for(int j=i+i;j<=1000;j+=i)
   F[j]=1;
 }

for(int i=1;i<=1000;i++)
 for(int j=0;j<=10;j++)
  dp[i][j]=1;

for(int i=2;i<=1000;i++)  {
int temp=i;
 while(temp>1) {
  int cnt=0;
  for(int j=0;j<primes;j++) {
   int p=1;
   while(temp%prime[j]==0) {
    temp/=prime[j];
    p*=prime[j];
   }
   if(p>1)
    dp[i][cnt++]=p;
   }
  }
 }

}


int main() {

cin.sync_with_stdio(0);
cin.tie(0);

sieve();


int T;
cin>>T;

while(T--) {
int N,M,L,R;
cin>>N>>M>>L>>R;
ll ans=0;
orM=M;
 for(int i=L;i<=R;i++) {
  x=0;
  for(int j=1;j<16;j++)
   solve(i,N,j);
  ans=(ans+power(M,N)-x+2*MOD)%MOD;
 } 
cout<<ans<<"\n";
}

    return 0;
}



