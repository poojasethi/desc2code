#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define sz(a) (int)a.size()

typedef pair <int, int> ii;
typedef long long ll;
typedef vector < vector<ll> > Matrix;

const int MOD = 1e9 + 7;

bool notPrime[1005];
vector <ii> b[1005];
int n, m, l, r;

ll add(ll a, ll b) { return (a + b) % MOD; }
ll mul(ll a, ll b) { return a * b % MOD; }

Matrix createMatrix(int n, int m) {
   return Matrix(n, vector <ll>(m, 0));
}

Matrix mul(const Matrix & a, const Matrix & b) {
   int n = sz(a), m = sz(b[0]);
   Matrix c = createMatrix(n, m);
   for (int i = 0; i < n; i++)
      for (int j = 0; j < m; j++)
         for (int k = 0; k < sz(a[0]); k++)
            c[i][j] = add(c[i][j], mul(a[i][k], b[k][j]));
   return c;
}

Matrix pow(const Matrix &a, int n) {
    if (n == 1) return a;
    Matrix t = pow(a, n / 2);
    t = mul(t, t);
    if (n & 1) t = mul(t, a);
    return t;
}

void ghi(vector < vector<ll> > & a) {
   cout << sz(a) << " " << sz(a[0]) << '\n';
   for (int i = 0; i < sz(a); i++) {
      for (int j = 0; j < sz(a[0]); j++) cout << a[i][j] << " ";
      cout << '\n';
   }
}

int proc(int d) {
   int k = sz(b[d]), maxState = (1 << k) - 1;
   Matrix trans = createMatrix(maxState+1, maxState+1);
   for (int state = 0; state <= maxState; state++)
   for (int val = 1; val <= m; val++) {
      int _state = state;
      for (int i = 0, j = 0; i < sz(b[val]) && j < k;)
         if (b[val][i].first < b[d][j].first) i++;
         else if (b[val][i].first > b[d][j].first) j++;
         else {
            if (b[val][i].second >= b[d][j].second)
               _state |= 1 << j;
            i++; j++;
         }
      trans[_state][state]++;
   }
//   ghi(trans);
   Matrix a = pow(trans, n);
//   ghi(a);
   Matrix x = createMatrix(maxState+1, 1);
   x[0][0] = 1;
   Matrix ans = mul(pow(trans, n), x);
//   ghi(ans);
   return ans[maxState][0];
}

void init() {
   for (int i = 2; i <= 1000; i++) {
      if (notPrime[i]) continue;
      b[i].pb(ii(i, 1));
      for (int j = i*2; j <= 1000; j += i) {
         notPrime[j] = true;
         int jj = j;
         int m = sz(b[jj]);
         b[j].pb(ii(i, 0));
         while (jj % i == 0) {
            jj /= i;
            b[j][m].second++;
         }
      }
   }
}

int solve() {
   int res = 0;
   for (int d = l; d <= r; d++) {
      res = (res + proc(d)) % MOD;
   }
   return res;
}

int main() {
//   freopen("input.txt", "r", stdin);

   ios::sync_with_stdio(false);
   int te; cin >> te;
   init();
   while (te--) {
      cin >> n >> m >> l >> r;
      cout << solve() << '\n';
   }

   return 0;
}
