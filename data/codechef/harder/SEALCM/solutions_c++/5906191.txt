#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define S(x) scanf("%d", &x)
#define SS(x) scanf("%s", &x)
#define MOD 1000000007

using namespace std;

void input() {
	#ifndef ONLINE_JUDGE
	freopen("C:\\Users\\ronish\\OneDrive\\Documents\\in.txt","r",stdin);
	#endif
}

#define gc getchar_unlocked
int read_int() {
	char c = gc();
	while(c<'0' || c>'9') c = gc();
	int ret = 0;
	while(c>='0' && c<='9') {
		ret = 10 * ret + c - 48;
		c = gc();
	}
	return ret;
}

int t, n, m, l, r, cnt;
int F[1002];
vector <int> prime;
vector <int> v;
vector <int> factor[1002];
void seive() {
	memset(F, 0, sizeof(F));
	cnt = 0;
	for (int i = 2; i < 34; ++i)
	{
		if (!F[i]) {
			for (int j = 2; i * j < 1002; ++j)
			{
				F[i * j] = 1;
			}
		}
	}
	for (int i = 2; i < 1001; ++i)
	{
		if (!F[i]) prime.push_back(i), cnt++;
	}
}

void factorise() {
	int temp, p, x, k = 0;
	bool flag;
	factor[1].push_back(1);
	for (int i = 1; i < 1001; ++i)
	{
		//cout << endl << i << endl;
		temp = i;
		x = 0;
		k = 0;
		while(temp != 1) {
			//cout << k << endl;
			flag = false;
            p = 1;
			while (!(temp % prime[k])) {
				//cout << k << " " << temp << " " << prime[k] << " " << endl;
				p *= prime[k];
				temp /= prime[k];
				//cout << temp << " ";
				flag = true;
			}
			if (flag) {
				factor[i].push_back(p);
				//cout << FACTORS[i][x] << " ";
				x++;
			}
			k++;
		}
	}
}

long long power(int aa,int b){
    if (aa == 0) {
        return 0;
    }
    long long a = aa,res = 1;
    while (b) {
        if (b & 1) {
            res *= a;
            if (res >= MOD) {
                res %= MOD;
            }
        }
        a *= a;
        if (a >= MOD) {
            a %= MOD;
        }
        b >>= 1;
    }
    return res;
}

long long int calculte() {
    //cout << "Calculate\n";
	long long ret = 0;
	long long temp = 1;
	//cout << v.size() << endl;
	for (int i = 1; i <= (1 << v.size()) - 1; ++i)
	{
		//cout << i << "\n";
		temp = 1;
		for (int j = 0; j < v.size(); ++j)
		{
			//cout << "in j";
			if (i & (1 << j)) temp *= v[j];
			//cout << temp << ' ' << endl;
		}
		if (__builtin_popcount(i) & 1) ret = ret + m / temp;
		else ret = ret - m / temp;
	}
	return ret;
}

long long int solve(int x) {
	//cout << "hello";
	long long ret = 0;

	for (int i = 1; i <= (1 << factor[x].size()) - 1; ++i)
	{
		v.clear();
		//cout << i << '\n';
		for (int j = 0; j < factor[x].size(); ++j)
		{
			if (i & (1 << j)) v.push_back(factor[x][j]);
		}
		long long cval = calculte();
		//cout << i << " " << cval << "\n";
		if (__builtin_popcount(i) & 1) ret = ret + power(m - cval, n);
		else ret = ret - power(m - cval, n);

		if (ret < MOD) ret += MOD;
		if (ret > MOD) ret -= MOD;
	}
	return ret;
}

int main(int argc, char const *argv[])
{
	input();
	//cin >> t;
	t = read_int();
	seive();
	//for(int i = 0; i < cnt; i++) cout << prime[i] << " ";
	factorise();
	while (t--) {
		//cin >> n >> m >> l >> r;
		n = read_int();
		m = read_int();
		l = read_int();
		r = read_int();
		long long ans = 0;
		for (int i = l; i <= r; ++i)
		{
			long long s = power(m, n);
			ans = ans + s - solve(i);
			//cout << solve(i) << " ";
			if (ans < MOD) ans = ans + MOD;
			if (ans > MOD) ans = ans - MOD;
		}
		cout << ans << endl;
	}
	return 0;
}
