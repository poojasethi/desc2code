#include<bits/stdc++.h>
using namespace std;
#define getcx getchar
#define maxn 1005
#define F(i,p,n) for(i=p;i<n;i++)
#define I(i,p,q) for(i=p;i>=q;i--)
#define S(x) scanf("%lld",&x)
#define P(x) printf("%lld\n",x)
#define Ps(x) printf("%d ",x)
#define LL long long int
#define pii pair<int,int>
vector<LL> v[maxn];
LL prm[maxn],n,m;
const LL mod=1e9+7;
void pre()
{
    LL i,j,k=0,p,q;
    prm[0]=prm[1]=1;
    for(i=4;i<maxn;i+=2)
    {
        prm[i]=1;
    }
    for(i=3;i*i<maxn;i+=2)
    {
        if(!prm[i])
            for(j=i*i;j<maxn;j+=2*i)
                prm[j]=1;
    }
    F(i,1,maxn)
    {
        if(!prm[i])
        {
            p=i;
            while(p<maxn)
            {
                for(j=p;j<maxn;j+=p)
                    if(p==i)
                        v[j].push_back(p);
                    else
                        v[j][v[j].size()-1]=p;
                p*=i;
            }
        }
    }
}

LL _pow(LL x,LL y)
{
    if(!y)
        return 1;
    if(y==1)
        return x;
    if(y==2)
        return (x*x)%mod;
    if(y&1)
        return (x*_pow(x,y-1))%mod;
    else
        return (_pow(_pow(x,y/2),2))%mod;
}
LL in_ex(LL sub,LL num,LL sz)
{
	LL i, j,k,p,q,mul,ans=0,cnt;	
	vector<LL> vec;
	p=sub;
	k=0;
	while(p){
		if(p&1)
		{
		vec.push_back(v[num][k]);
		
		}
		k++;
		p>>=1;
	}
    	q=1<<sz;
    	F(i,1,q)
    	{
    	k=cnt=0;
    	p=i;
    	mul=1;
		while(p){
		if(p&1)
		{
		mul*=vec[k];
		cnt++;
		}
		k++;
		p>>=1;
		}
	
	LL s;
	if(cnt%2)
	s=1;
	else
	s=-1;
	LL cal=m/mul;
	ans=(ans+s*cal)%mod;
	}
	//printf("ans=%lld q=%lld mul=%lld\n",ans,q,mul);
	return ans;


}
LL rev_inex(LL num)
{
    LL i,j,k,p,q,ans=0;
    if(num==1)
     return 0;
     p=v[num].size();
     q=1<<p;
    	F(i,1,q)
    	{
    	k=0;
    	p=i;
		while(p){
		if(p&1)
		k++;
		p>>=1;
		}
	LL s;
	if(k%2)
	s=1;
	else
	s=-1;
	LL cal=_pow(m-in_ex(i,num,k),n);
	ans=(ans+s*cal)%mod;
	}
	//printf("ans=%lld\n",ans);
	return ans;
}
int main()
{
    LL i,j,k,t,r,l;
    pre();
    /*printf("vector v is:\n");
    F(i,1,101)
    {
        F(j,0,v[i].size())
        Ps(v[i][j]);
        printf("\n");
    }*/
    S(t);
    while(t--)
    {
        LL ans=0;
        S(n);
        S(m);
        S(l);
        S(r);
        LL cal=_pow(m,n);
        
        F(i,l,r+1)
        {
		ans=(ans+cal-rev_inex(i))%mod;
        }
        ans=(ans+mod)%mod;
        P(ans);
    }
    return 0;
}

