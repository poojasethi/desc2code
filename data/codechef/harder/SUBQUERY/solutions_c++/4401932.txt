//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random S(rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, pos[200005], arr[200005], tmp[200005], gap;
int c[200005], New[200005];
char s[200005];
vector<int> len[200005];
vector<pair<int, int> > queries[500005];
int q;

int par[200005], cnt[200005], size[200005];

int res[500005];

int root(int x){
  return par[x] == x ? x : par[x] = root(par[x]);
}

bool cmp(int x, int y){
  if(pos[x] != pos[y]){
    return pos[x] < pos[y];
  }
  x += gap;
  y += gap;
  return (x < n && y < n) ? pos[x] < pos[y] : x > y;
}

void Sort(){
  int sz = 0;
  for(int i = n - 1; i >= n - gap; --i) New[sz++] = i;
  forn(i, n) if(arr[i] >= gap) New[sz++] = arr[i] - gap;
  forn(i, max(n, 26)) c[i] = 0;
  forn(i, n) ++c[pos[New[i]]];
  forn(i, max(n, 26)) c[i + 1] += c[i];
  for(int i = n - 1; i >= 0; --i){
    arr[--c[pos[New[i]]]] = New[i];
  }
}

void build(){
  forn(i, n){
    pos[i] = s[i] - 'a';
    arr[i] = i;
  }
  sort(arr, arr + n, cmp);
  for(gap = 1; ; gap *= 2){
    Sort();
    forn(i, n - 1) tmp[i + 1] = tmp[i] + cmp(arr[i], arr[i + 1]);
    forn(i, n) pos[arr[i]] = tmp[i];
    if(tmp[n - 1] == n - 1) break;
  }
}

void calc(){
  int j = 0;
  forn(i, n) if(pos[i] != n - 1){
    int id = arr[pos[i] + 1];
    while(s[id + j] == s[i + j]) ++j;
    len[j].pb(pos[i]);
    if(j) --j;
  }
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  gets(s);
  n = strlen(s);
  build();
  calc();
  scanf("%d", &q);
  forn(i, q){
    int l, p; scanf("%d %d", &l, &p);
    queries[l].pb(mp(p, i));
  }
  forn(i, n){
    par[i] = i;
    size[i] = 1;
  }
  for(int i = n; i >= 1; --i){
    ++cnt[1];
    forn(j, len[i].size()){
      int x = root(len[i][j]), y = root(len[i][j] + 1);
      par[y] = x;
      --cnt[size[x]];
      --cnt[size[y]];
      size[x] += size[y];
      ++cnt[size[x]];
    }
    forn(j, queries[i].size()){
      int id = queries[i][j].S;
      int p = queries[i][j].F;
      res[id] = cnt[p];
    }
  }
  forn(i, q) printf("%d\n", res[i]);
  return 0;
}
