//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

char s[200005];
int Link[400005], len[400005], nxt[400005][26], cnt[400005], sz, last;
pair<int, int> w[400005];
vector<pair<int, int> > coord[400005];
int m;
int res[500005];

void build(){
  gets(s);
  int n = strlen(s);
  sz = last = 1;
  forn(i, n){
    int cur = ++sz, p = last, t = s[i] - 'a';
    len[cur] = len[last] + 1;
    cnt[cur] = 1;
    last = cur;
    for(; p && !nxt[p][t]; p = Link[p]){
      nxt[p][t] = cur;
    }
    if(!p){
      Link[cur] = 1;
      continue;
    }
    if(len[p] + 1 == len[nxt[p][t]]){
      Link[cur] = nxt[p][t];
      continue;
    }
    int ver = nxt[p][t];
    int clone = ++sz;
    len[clone] = len[p] + 1;
    Link[clone] = Link[ver];
    forn(j, 26) nxt[clone][j] = nxt[ver][j];
    for(; p && nxt[p][t] == ver; p = Link[p]){
      nxt[p][t] = clone;
    }
    Link[cur] = Link[ver] = clone;
  }
  for(int i = 1; i <= sz; ++i){
    w[i] = mp(len[i], i);
  }
  sort(w + 1, w + sz + 1);
  for(int i = sz; i >= 1; --i){
    int v = w[i].S;
    coord[cnt[v]].pb(mp(len[Link[v]] + 1, -1));
    coord[cnt[v]].pb(mp(len[v], mod));
    cnt[Link[v]] += cnt[v];
  }
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  build();
  scanf("%d", &m);
  forn(i, m){
    int x, y; scanf("%d %d", &x, &y);
    coord[y].pb(mp(x, i));
  }
  forn(i, 400005){
    sort(all(coord[i]));
    int balance = 0;
    forn(j, coord[i].size()){
      pair<int, int> now = coord[i][j];
      if(now.S == -1) ++balance; else
      if(now.S == mod) --balance; else {
        res[now.S] = balance;
      }
    }
  }
  forn(i, m){
    printf("%d\n", res[i]);
  }
  return 0;
}
