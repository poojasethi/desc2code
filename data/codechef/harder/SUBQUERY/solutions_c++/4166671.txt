// alpha set for constructing sa can be O(n), and it must be updated
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;
 
char s[200000];
int ta[500000], r[500000], tb[500000], *x = ta, *y = tb, sa[500000], rk[500000], h[500000], c[500000], ans[500000], n, m = 30;
vector<pair<int, int> > query[200001];
vector<int> pos[200000]; 
 
int main() {
	#ifndef ONLINE_JUDGE
		freopen("in", "r", stdin);
	#endif
 
	scanf("%s", s);
	n = strlen(s);
 
	for (int i = 0; i < n; ++ i) r[i] = x[i] = s[i] - 96;
	r[n] = x[n] = 0, ++ n; 
	for (int i = 0; i < m; ++ i) c[i] = 0;
	for (int i = 0; i < n; ++ i) ++ c[x[i]]; 
	for (int i = 1; i < m; ++ i) c[i] += c[i - 1];
	for (int i = n - 1; i >= 0; -- i) sa[-- c[x[i]]] = i;
	for (int j = 1, p = 1; p < n; m = p, j <<= 1) {
		p = 0; 
		for (int i = n - j; i < n; ++ i) y[p ++] = i;
		for (int i = 0; i < n; ++ i) if (sa[i] >= j) y[p ++] = sa[i] - j; 
		for (int i = 0; i < m; ++ i) c[i] = 0;
		for (int i = 0; i < n; ++ i) ++ c[x[y[i]]];
		for (int i = 1; i < m; ++ i) c[i] += c[i - 1];
		for (int i = n - 1; i >= 0; -- i) sa[-- c[x[y[i]]]] = y[i]; 
		swap(x, y);
		x[sa[0]] = 0, p = 1;
		for (int i = 1; i < n; ++ i)
			x[sa[i]] = y[sa[i]] == y[sa[i - 1]] && y[sa[i] + j] == y[sa[i - 1] + j] ? p - 1 : p ++;
	}
	for (int i = 0; i < n; ++ i) rk[sa[i]] = i; 
	for (int i = 0, k = 0; i < n; ++ i) {
		if (! rk[i]) continue; 
		if (k) -- k;
		int j = sa[rk[i] - 1]; 
		while (r[j + k] == r[i + k]) ++ k;
		h[rk[i]] = k; 
	}
	for (int i = 1; i < n; ++ i) h[i] = h[i + 1]; 
	h[0] = h[-- n] = 0; 
	int q; scanf("%d", &q);
	for (int i = 0; i < q; ++ i) {
		int l, p; scanf("%d%d", &l, &p);
		query[l].push_back(make_pair(p, i)); 
	}
 	
 	set<int> now;
 	now.insert(0);
 	now.insert(n);

 	for (int i = 1; i < n; ++ i) 
 		pos[h[i]].push_back(i);

 	memset(c, 0, sizeof c);
 	c[n] = 1;

 	for (int i = 0; i < n; ++ i) {
 		for (int j = 0; j < pos[i].size(); ++ j) {
 			int x = pos[i][j]; 
 			set<int>::iterator it = now.upper_bound(x), _it = it;
 			-- _it;
 			-- c[* it - * _it];
 			++ c[* it - x];
 			++ c[x - * _it];
 			now.insert(x); 
 		}
 		for (int j = 0; j < query[i + 1].size(); ++ j)
			ans[query[i + 1][j].second] = query[i + 1][j].first == 1 ? c[1] - i : c[query[i + 1][j].first]; 
 	}
 
	for (int i = 0; i < q; ++ i)
		printf("%d\n", ans[i]); 
} 