#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;
const int maxN=710;
typedef long long int64;
 
int n,perm[maxN];
int64 upper;
 
int cnt[maxN];
int np,p[maxN],pexp[maxN];
int64 search(int64 n,int pos) {
    if(pos>np)
        return n;
    int64 ans=search(n,pos+1);
    if(n>=pexp[pos])
        ans-=search(n/pexp[pos],pos+1);
    return ans;
}
int main() {
    int T;
    for(scanf("%d",&T);T;T--){
        scanf("%d%lld",&n,&upper);
        for(int i=1;i<=n;i++)
            scanf("%d",perm+i);
        /*for(int i=1;i<=n;i++)
            perm[i]=i;
        random_shuffle(perm+1,perm+n+1);*/
 
        memset(cnt,0,sizeof(cnt));
        for(int i=1;i<=n;i++)
            if(perm[i]) {
                int len=0;
                for(int x=i,t;perm[x];t=perm[x],perm[x]=0,x=t)
                    len++;
                cnt[len]++;
            }
 
        np=0;
        for(int len=1;len<=n;len++)
            if(cnt[len])
                for(int x=len,y=cnt[len],d=2;d<=x;d++)
                    if(x%d==0) {
                        do x/=d;
                        while(x%d==0);
 
                        int cc=0;
                        for(;y%d==0;y/=d)
                            cc++;
 
                        int pos=find(p+1,p+np+1,d)-p;
                        if(pos<=np)
                            pexp[pos]=min(pexp[pos],cc);
                        else
                            np++,p[pos]=d,pexp[pos]=cc;
                        //printf("prime_exp[%d]<=%d\n",d,cc);
                    }
        for(int i=1;i<=np;i++) {
            int tmp=1;
            for(int j=0;j<=pexp[i];j++)
                tmp*=p[i];
            pexp[i]=tmp;
            //printf("prime_pow[%d] <| %d\n",p[i],pexp[i]);
        }
        printf("%lld\n",search(upper,1));
    }
    scanf("%*s");
}
 