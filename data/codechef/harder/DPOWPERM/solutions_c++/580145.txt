#include <iomanip>
#include <ctime>
#include <numeric>
#include <functional>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstring>
#include <climits>
#include <cmath>
#include <cctype>
#include <sstream>
#include <map>
#include <set>
#include <cstdio>
#include <queue>
#define f(i,x,y) for(int i=x;i<y;i++)
#define fd(i,y,x) for(int i=y;i>=x;i--)
#define FOR(it,A) for( typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define impr(A) for( typeof A.begin() chen = A.begin(); chen !=A.end(); chen++ ) cout<<*chen<<" "; cout<<endl
#define ll long long
#define vint vector<int>
#define clr(A,x) memset(A,x,sizeof(A))
#define CLR(v) f(i,0,n) v[i].clear()
#define oo (1<<30)
#define ones(x) __builtin_popcount(x)
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define poner push_back
#define eps (1e-9)
#define cua(x) (x)*(x)
using namespace std;

int T;
ll n,D;
int a[700];
vint v;
int vis[700];


int no[1000];
int p[1000]; int sz = 0;

vector<ll> num; int m;
ll solve(int pos,ll k){
	if( pos==m ) return D/k;
	ll res = solve(pos+1,k);
	if( k<=D/num[pos] ) res -= solve( pos+1,k*num[pos] );
	return res;
}

int main()
{
	f(i,2,1000)if( no[i]==0 ){
		for(int j = i*i; j<1000; j+=i ) no[j] = 1;
		p[sz++] = i;
	}

	
	int acu = 0; int idx = 0;
	while( acu+p[idx]<=700 ) acu += p[idx++];
	//cout <<idx<<endl;
//	cout << accumulate(p,p+21,0)<<endl;
	cin >> T;
	while( T-- ){
		cin >> n >> D;
		f(i,0,n) scanf("%d", a+i ), a[i]--;
		v.clear();
		clr(vis,0);
		f(i,0,n)if( vis[i]==0 ){
			int x = 0;
			int I = i;
			while( 1 ){
				x++;
				I = a[I];
				vis[I] = 1;
				if( I==i ){ v.poner(x); break; }
			}
		}
		int mask = 0; map<int,int> rep[sz];
		int pot[sz];
		f(i,0,sz) pot[i] = oo;
		f(i,0,v.size())f(j,0,sz)if( v[i]%p[j]==0 ) rep[j][v[i]]++;
		f(j,0,sz)FOR(it,rep[j]){
			int len = it->first;
			int _pot = 1;
			int z = it->second;
			while( z%p[j]==0 ) z/=p[j], _pot++;
			pot[j] = min( pot[j], _pot );
		}
		num.clear();
		f(j,0,sz)if( pot[j]!=oo ){
			ll x = 1;
			f(i,0,pot[j]) x*= p[j];
			num.poner(x);
		}
		m = num.size();
		cout << solve(0,1) << endl;
	}
}
