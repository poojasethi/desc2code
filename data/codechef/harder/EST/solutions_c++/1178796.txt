#include <cstdio>
#include <cstring>
#include <map>
#include <iostream>
#include <algorithm>
#define DEBUG_Z 0
using namespace std;
typedef unsigned long long ULL;

const int MAX_N = 200000 + 10;
const int DEP = 1007;
const int MOD = 42424242;

map<ULL, int> mapII;
int N, L, Q, ret;
char s[MAX_N], r[MAX_N];
int lcp[MAX_N], tmp[MAX_N];
int fb[26];
ULL h[MAX_N], p[MAX_N];

void doZ(int L, char *s, int *z)
{
	int l = 1, r;
	for(r = 1; r < L && s[r - 1] == s[r]; ++ r)
		;
	z[1] = r - 1;
	for(int i = 2; i < L; ++ i) {
		if (r > i && i + z[i - l] < r)
			z[i] = z[i - l];
		else {
			for(l = i, r = max(r, i); r < L && s[r] == s[r - i]; ++ r);
			z[i] = r - i;
		}
	}
}

void inputData()
{
	scanf("%s", s);
	N = strlen(s);
}

void calcL()
{
	for(int i = 0; i < N; ++ i)
		r[i] = s[N - 1 - i];
	L = 0;
	doZ(N, r, tmp);
	for(int i = 1; i < N; ++ i)
		L = max(L, tmp[i]);
}

void calcQ()
{
	int tot = 0;
	for(int i = N - 1 - L; i < N; ++ i)
		r[tot ++] = s[i];
	r[tot ++] = '$';
	for(int i = 0; i < N; ++ i)
		r[tot ++] = s[i];
	doZ(tot, r, tmp);
	Q = 0;
	for(int i = 0; i < N - 1 - L; ++ i) {
		lcp[i] = tmp[i + L + 2];
		Q = max(Q, lcp[i]);
	}
}

void calcLCP()
{
	int tot = 0;
	for(int i = N - L; i < N; ++ i)
		r[tot ++] = s[i];
	r[tot ++] = '$';
	for(int i = 0; i < N; ++ i)
		r[tot ++] = s[i];
	doZ(tot, r, tmp);
	for(int i = 0; i < N - L; ++ i)
		lcp[i] = tmp[i + L + 1];
}

void calcHash()
{
	p[0] = 1; h[0] = s[0];
	for(int i = 1; i <= N; ++ i) {
		p[i] = p[i - 1] * DEP;
		h[i] = h[i - 1] * DEP + s[i];
	}
}

ULL getVal(int st, int l)
{
	if (! l) return 0;
	ULL v1, v2;
	if (! st) v1 = 0;
	else v1 = h[st - 1] * p[l];
	v2 = h[st + l - 1];
	return v2 - v1;
}

ULL hash(int pos)
{
	if (pos + L - 1 < N - L)
		return getVal(pos, L);
	ULL x = getVal(pos, N - L - pos);
	int step = N - L - pos, tmp = L;
	ULL pp = p[step], ret = 0;
	for( ; tmp >= step; tmp -= step) 
		ret = ret * pp + x;
	pp = p[tmp];
	ret = ret * pp + getVal(pos, tmp);
	return ret;
}

void calcAns()
{
	calcL(); //calc the longest suffix which is some other suffix's perfix
	calcQ(); //calc LCP(i,N-1-L) (i for 0 to N-2-L)
	memset(fb, 0, sizeof fb);
	for(int i = 0; i < N - 1 - L; ++ i)
		if (lcp[i] == Q) 
			fb[s[i + Q] - 'a'] = 1;
	calcLCP();
	calcHash();
	ret = 0;
	
	mapII.clear();
	for(int i = 0; i < N - L; ++ i)
		if (! Q || (lcp[i] >= Q - 1 && ! fb[s[i + Q - 1] - 'a'])) {
			ULL x = hash(i);
			if (mapII.find(x) == mapII.end()) {
				++ ret;
				mapII[x] = 1;
			}
		}
	int k = 26;
	memset(fb, 0, sizeof fb);
	for(int i = 0; i < N - L; ++ i)
		if (! fb[s[i] - 'a']) {
			fb[s[i] - 'a'] = true;
			ret = ret * k % MOD;
			-- k;
		}
	cout << ret << endl;
}

void solve()
{
	inputData();
	calcAns();
}

int main()
{
	if (DEBUG_Z) {
		char str[] = "aabaaaabaaaa";
		doZ(12, str, tmp);
		for(int i = 1; i < 12; ++ i)
			printf("%d ", tmp[i]);
		printf("\n");
	}
	
	int T; for(scanf("%d", &T); T --; )
		solve();
	return 0;
}