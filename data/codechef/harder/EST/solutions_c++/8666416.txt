#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <bitset>
#include <ctime>
#include <map>
#include <queue>
#include <set>
using namespace std;

const int maxn=100000+15;
const int modd=42424242;
typedef unsigned long long int128;
char st[maxn];
int n;
int sa[maxn],rank[maxn*2],tsa[maxn],trank[maxn*2];
int height[maxn],sum[maxn];
int128 powe[maxn],hakey[maxn];
bool boo[maxn];
int sorting(int j)
{
	memset(sum,0,sizeof(sum));
	for (int i=1;i<=n;i++) sum[rank[i+j]]++;
	for (int i=1;i<=n;i++) sum[i]+=sum[i-1];
	for (int i=n;i>=1;i--) tsa[sum[rank[i+j]]--]=i;
	memset(sum,0,sizeof(sum));
	for (int i=1;i<=n;i++) sum[rank[i]]++;
	for (int i=1;i<=n;i++) sum[i]+=sum[i-1];
	for (int i=n;i>=1;i--) sa[sum[rank[tsa[i]]]--]=tsa[i];
	return 0;
}
int build()
{
	memset(sum,0,sizeof(sum));
	for (int i=0;i<n;i++) sum[st[i]]++;
	for (int i=1;i<=255;i++) sum[i]+=sum[i-1];
	for (int i=n;i>=1;i--) sa[sum[st[i-1]]--]=i;
	int p=1;
	rank[sa[1]]=1;
	for (int i=2;i<=n;i++)
	{
		if (st[sa[i]-1]!=st[sa[i-1]-1]) p++;
		rank[sa[i]]=p;
	}
	for (int j=1;p<n;j<<=1)
	{
		sorting(j);
		p=1;
		memset(trank,0,sizeof(trank));
		trank[sa[1]]=1;
		for (int i=2;i<=n;i++)
		{
			if (rank[sa[i]]!=rank[sa[i-1]] || rank[sa[i]+j]!=rank[sa[i-1]+j]) p++;
			trank[sa[i]]=p;
		}
		memcpy(rank,trank,sizeof(trank));
	}
	p=0;
	for (int i=1;i<=n;i++)
	{
		if (rank[i]==1) continue;
		while (st[i+p-1]==st[sa[rank[i]-1]+p-1]) p++;
		height[rank[i]]=p;
		p=max(p-1,0);
	}
	return 0;
}
int lcp[maxn];
bool forbid[maxn];
map <int128 ,bool > ls;
int foundlcp(int kk)
{
	int rd=rank[kk],qg=n,maxx=0;
	for (int i=rd-1;i>=1;i--)
	{
		qg=min(qg,height[i+1]);
		if (sa[i]<kk) lcp[sa[i]]=qg,maxx=max(maxx,qg);
	}
	qg=n;
	for (int i=rd+1;i<=n;i++)
	{
		qg=min(qg,height[i]);
		if (sa[i]<kk) lcp[sa[i]]=qg,maxx=max(maxx,qg);
	}
	return maxx;
}
int ll,len;
int128 gett(int i,int l)
{
	int128 k1=hakey[i-1]*powe[l];
	int128 k2=hakey[i+l-1];
	k2-=k1;
	return k2;
}
int128 getstr(int i)
{
	if (i+len-1<ll) return gett(i,len);
	int blo=ll-i,all=len;
	int128 st=gett(i,blo);
	int128 ans=0;
	for (;all>=blo;all-=blo)
		ans=ans*powe[blo]+st;
	ans=ans*powe[all]+gett(i,all);
	return ans;
}
int main()
{
	int G;
	scanf("%d",&G);
	while (G--)
	{
		scanf("%s",st);
		n=strlen(st);
		memset(sa,0,sizeof(sa));
		memset(rank,0,sizeof(rank));
		memset(height,0,sizeof(height));
		build();
		ll=0;
		memset(boo,false,sizeof(boo));
		for (int i=0;i<n;i++) boo[st[i]-'a']=true;
		int sum=0;
		for (int i=0;i<26;i++) sum+=boo[i];
		int ans=1;
		for (int i=1;i<=sum;i++) ans=ans*(26-i+1)%modd;
		int tj=ans;
		ans=0;
		for (int i=1;i<=n;i++)
			if (height[rank[i]+1]==n-i+1) ll=max(n-i+1,ll);
		len=n-ll+1;	
		if (ll==0) ans=tj;
		 else
		 {
		 	swap(ll,len);
		 	powe[0]=1;
		 	hakey[0]=0;
		 	for (int i=1;i<=n;i++)
		 	{
		 		powe[i]=powe[i-1]*27;
		 		hakey[i]=hakey[i-1]*27+st[i-1]-'a'+1;
		 	}
		 	memset(forbid,false,sizeof(forbid));
		 	int maxx=foundlcp(ll-1);
		 	for (int i=1;i<ll-1;i++)
		 		if (lcp[i]==maxx) 
		 		 forbid[st[i+maxx-1]]=true;
		 	foundlcp(ll);
			ls.clear();
		 	for (int i=1;i<ll;i++)
		 	 if (maxx==0 || (lcp[i]>=maxx-1 && !forbid[st[i+maxx-2]]))
		 	 {
		 	 	int128 stat=getstr(i);
		 	 	if (ls.find(stat)==ls.end())
		 	 	{
		 	 		ls[stat]=true;
		 	 		ans+=tj;
		 	 		if (ans>=modd) ans-=modd;
		 	 	}
		 	 }
		 }
		printf("%d\n",ans);
	}
	return 0;
}
