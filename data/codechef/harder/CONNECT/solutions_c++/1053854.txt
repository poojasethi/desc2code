#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

const int maxn 	=	20;
const int maxk	=	8;
const int inf	=	1000000000;

const int dx[]	=	{0,1,0,-1};
const int dy[]	=	{1,0,-1,0};

int n,m,need,num[maxn][maxn],weight[maxn][maxn];
int a[maxn][maxn],mapping[maxn*maxn],f[maxn][maxn][1<<maxk];
bool vis[maxn][maxn],sel[maxn*maxn];
queue< pair<int,int> > q;
vector<int> color;

inline int solve()
{
	if (color.size()<need) return inf;
	
	memset(sel,false,sizeof(sel));
	for (int i=0;i<need;++i){
		int j=rand()%color.size();
		while (sel[j]) j=rand()%color.size();
		sel[j]=true;
		mapping[color[j]]=i+1;
	}
	
	for (int i=0;i<color.size();++i)
        if (!sel[i]) mapping[color[i]]=rand()%need+1;
	
	for (int i=0;i<n;++i)
		for (int j=0;j<m;++j){
			if (num[i][j]>0) a[i][j]=mapping[num[i][j]];
			else a[i][j]=num[i][j];
			for (int stat=0;stat<1<<need;++stat)
				f[i][j][stat]=inf;
		}
	
	for (int i=0;i<n;++i)
		for (int j=0;j<m;++j)if (a[i][j]!=-1){
			if (a[i][j]==0) f[i][j][0]=0;
			else f[i][j][1<<a[i][j]-1]=0;
		}
	
	for (int stat=1;stat<1<<need;++stat){
		for (int i=0;i<n;++i)
			for (int j=0;j<m;++j)
                if (a[i][j]!=-1){
                    for (int s1=stat;s1>0;s1=(s1-1)&stat){
                        int s2=stat^s1;
                        f[i][j][stat]=min(f[i][j][stat],f[i][j][s1]+f[i][j][s2]);
                    }
                    if (f[i][j][stat]<inf){
                        q.push(make_pair(i,j));
                        vis[i][j]=true;
                    }
                }
		while (q.size()){
			int x=q.front().first,y=q.front().second;
			q.pop();
			vis[x][y]=false;
			for (int k=0;k<4;++k){
				int tx=x+dx[k],ty=y+dy[k];
				if (tx>=0 && ty>=0 && tx<n && ty<m && a[tx][ty]!=-1){
					if (f[tx][ty][stat]>f[x][y][stat]+weight[x][y]){
						f[tx][ty][stat]=f[x][y][stat]+weight[x][y];
						if (!vis[tx][ty]){
							q.push(make_pair(tx,ty));
							vis[tx][ty]=true;
						}
					}
				}
			}
		}
	}
	
	int res=inf;
	for (int i=0;i<n;++i)
		for (int j=0;j<m;++j)
			res=min(res,f[i][j][(1<<need)-1]+weight[i][j]);
	return res;
}

int main()
{
	srand(time(0)^3651361);
	
	scanf("%d%d%d",&n,&m,&need);
	color.clear();
	for (int i=0;i<n;++i)
		for (int j=0;j<m;++j){
			scanf("%d",&num[i][j]);
			if (num[i][j]>0){
				color.push_back(num[i][j]);
			}
		}
	sort(color.begin(),color.end());
	color.erase( unique(color.begin(),color.end()) , color.end() );
	
	for (int i=0;i<n;++i)
		for (int j=0;j<m;++j)
			scanf("%d",&weight[i][j]);
	
	int ans=inf;
	while (clock()/CLOCKS_PER_SEC<6){
		ans=min(ans,solve());
	}
	
	if (ans==inf) puts("-1");
	else printf("%d\n",ans);
	
	return 0;
}