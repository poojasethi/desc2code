#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
const db pi=acos(-1);
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
const int mo=1000000007;
const int inf=1061109567;
int qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};


int n,m,k;
int s[20*20];
int wei[20*20];
int ma[555];

int id[20*20];

struct edge{
	int v,next;
}e[11111];int g[255];int etot=0;
void ae(int u,int v){
	e[etot].v=v;e[etot].next=g[u];g[u]=etot++;
}
#define g(i,j) (((i)-1)*m+(j))

int d[1<<7][255];
int mk;

int *dis;
int qu[1111111];int p,q;
int inq[444];
inline void ad(int u){
	if(!inq[u]){
		qu[q++]=u;
		inq[u]=1;
	}
}
inline int po(){
	int u=qu[p++];
	inq[u]=0;
	return u;
}

int vv[1111]={0};
int tot=0;
int main()
{
	memset(g,-1,sizeof(g));
	scanf("%d%d%d",&n,&m,&k);
	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++){
			scanf("%d",&id[g(i,j)]);
			if(id[g(i,j)]<=0)continue;
			if(!vv[id[g(i,j)]])vv[id[g(i,j)]]=++tot;
			id[g(i,j)]=vv[id[g(i,j)]];
		}
	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++)scanf("%d",&wei[g(i,j)]);
	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++){
			for (int k=0;k<4;k++){
				int x=i+dx[k],y=j+dy[k];
				if(x>=1 && x<=n && y>=1 && y<=m && id[g(i,j)]!=-1 && id[g(x,y)]!=-1){
					ae(g(i,j),g(x,y));
				}
			}
		}
	int ans=inf;
	int tc=300;
	n*=m;
	while(tc--){
		for (int i=1;i<=tot;i++)ma[i]=1<<(rand()%k);
		ma[0]=0;
		for (int i=1;i<=n;i++){
			if(id[i]!=-1)s[i]=ma[id[i]];
			else s[i]=0;
		}

		memset(d,63,sizeof(d));
		for (int i=1;i<=n;i++)d[0][i]=wei[i];
		for (mk=0;mk<(1<<k);mk++){
			for (int u=1;u<=n;u++){
				if(id[u]==-1)continue;
				if(s[u]&mk)d[mk][u]=min(d[mk][u],d[mk^s[u]][u]);
				for (int j=mk;j>mk-j;j=(j-1)&mk){
					d[mk][u]=min(d[mk][u],d[j][u]+d[mk-j][u]-wei[u]);
				}
			}
			dis=d[mk];
			p=0,q=0;
			for (int u=1;u<=n;u++){
				if(id[u]==-1)continue;
				if(dis[u]<inf){
					ad(u);
				}
			}
			while(p!=q){
				int u=po();
				for (int i=g[u];~i;i=e[i].next){
					if(wei[e[i].v]+dis[u]<dis[e[i].v]){
						dis[e[i].v]=wei[e[i].v]+dis[u];
						ad(e[i].v);
					}
				}
			}
		}
		for (int u=1;u<=n;u++){
			if(id[u]==-1)continue;
			ans=min(ans,d[(1<<k)-1][u]);
		}
	}
	printf("%d\n",ans==inf?-1:ans);
	return 0;
}
