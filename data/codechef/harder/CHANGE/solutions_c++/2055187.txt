#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>

using namespace std;

typedef unsigned uint;
typedef long long Int;
typedef vector<int> vint;
typedef pair<int,int> pint;
#define mp make_pair

template<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template<class T> void chmin(T &t, T f) { if (t > f) t = f; }
template<class T> void chmax(T &t, T f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }

const uint MO = 1000000007;
const uint MO2 = MO << 1;
uint MOS[] = { MO * 0, MO * 1, MO * 2, MO * 3, };

int N;
char C[1010];
int D[60];

int cs[1010];
int bitsLen;
int bits[1010];

void parse() {
	int l = strlen(C);
	int i;
	for (i = 0; i < l; ++i) {
		cs[i] = C[l - 1 - i] - '0';
	}
	bitsLen = 0;
	for (; ; ) {
		bool zero = 1;
		for (i = 0; i < l; ++i) {
			zero &= !cs[i];
		}
		if (zero) {
			break;
		}
		bits[bitsLen++] = cs[0] % 2;
		for (i = l; i--; ) {
			if (i && cs[i] % 2 != 0) {
				cs[i - 1] += 10;
			}
			cs[i] /= 2;
		}
	}
// cout<<"bits : ";pv(bits,bits+bitsLen);
}

#define MAXM 50010

int DSum[60];
int M;
uint crt[MAXM], nxt[MAXM];

int main() {
	int i;
	int l, m;
	
	for (int TC = in(); TC--; ) {
		N = in();
		scanf("%s", C);
		for (i = 0; i < N; ++i) {
			D[i] = in();
		}
		
		parse();
		
		sort(D, D + N);
		for (i = 0; i < N; ++i) {
			DSum[i + 1] = DSum[i] + D[i];
		}
		M = DSum[N];
		
		memset(crt, 0, (M + 1) << 2);
		crt[0] = 1;
		for (l = 0; l < bitsLen; ++l) {
			memset(nxt, 0, (M * 2 + 2) << 2);
			for (m = 0; m <= M; ++m) {
				nxt[m] = crt[m];
			}
			for (i = 0; i < N; ++i) {
				for (m = M + DSum[i + 1]; m >= D[i]; --m) {
					nxt[m] += nxt[m - D[i]];
					// if (nxt[m] & 0x80000000u) nxt[m] -= MO2;
					// if (nxt[m] & 0x40000000u) nxt[m] -= MO;
					// nxt[m] -= MO * (nxt[m] >> 30 & 3);
					nxt[m] -= MOS[nxt[m] >> 30 & 3];
				}
			}
			for (m = 0; m <= M; ++m) {
				crt[m] = nxt[m * 2 + bits[l]] % MO;
			}
		}
		printf("%d\n", crt[0]);
	}
	
	return 0;
}
