#include <algorithm>
#include <cstring>
#include <cassert>
#include <vector>
#include <cstdio>
#include <map>

using namespace std;

const int MAXN = 50;
const int MAXV = 500;
const unsigned int mod = 1000000007;
const int base = 1000000000;

char s[200];
int x[200];
int m;

void read()
{
	m = 0;
	scanf("%s", s);
	for (int i = strlen(s); i>0; i-=9)
	{
	 	s[i] = 0;
	 	x[m++] = atoi(s + max(0, i-9));
	}
 	for (; m>1 && !x[m-1]; m--);
}
void div2()
{
	for (int i = m-1, t=0, v; i >= 0; i--)
	{
	 	v = t*base + x[i];
	 	x[i] = v>>1;
	 	t = v&1;
	}
	for (; m>1 && !x[m-1]; m--);
};

int n, tot;
int a[MAXN+2];
unsigned int d[MAXV*MAXN*2];

void main2()
{
	scanf("%d", &n); read();
	tot = 0;
	for (int i = 0; i < n; i++)
		scanf("%d", a+i),
		tot += a[i];
	sort(a, a+n);
//	reverse(a, a+n);

	if (n == 1)
	{
		int t=0;
		for (int i = m-1; i>=0; i--)
			t = (1LL*t*base+x[i])%a[0];
		printf("%d\n", t==0);
		return;
	}
	assert(tot<MAXN*MAXV);


	int up_val = 0;
	d[0] = 1;

	for (int i, j, v; m>1 || x[0];)
	{
		memset(d+up_val+1, 0, sizeof(unsigned int)*tot);

		for (i = 0; i < n; i++)
		{
			v = a[i];
			up_val += v;
			for (int j = up_val; j>=v; j--)
				d[j] += d[j-v],
				d[j] -= mod*(d[j]>>30);
		}

		j = 0;
		for (i = x[0]&1; i <= up_val; i+=2, j++)
			if ((d[j]=d[i]) >= mod) d[j]-=mod;
		for (up_val = j-1; up_val>0 && !d[up_val]; up_val--);

		if (!up_val && !d[0]) break;

		div2();
	}

	printf("%d\n", d[0]);
}

int main()
{
	int test;
	scanf("%d", &test);
	for (; test--;)
		main2();
	return 0;
}
