#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <cassert>

#define MOD	       	    1000000007
#define LU             	long long unsigned int
#define LL             	long long int

#define REP(i,n)        for(int i = 0; i < n; i++)
#define FOR(i,a,b,k)    for(int i = a; i < b; i+=k)

using namespace std;

int ni(){
    int v;
    scanf("%d", &v);
    return v;
}

int N, Len, minLen, L[30];
char Str[252], P[30][22];
int hash[250][26];
int dp[251];
int F[250][30][20];

bool G[250][250],H[250][250][30][20];
bool GM[250][250],HM[250][250][30][20];

int f(int, int, int);
bool g(int, int);

void pre(){
    REP(i,26) {
        hash[0][i] = -1;
        char c = 'a' + i;
        FOR(j,1,Len,1) {
            hash[j][i] = hash[j-1][i];
            if(Str[j-1] == c)
            hash[j][i] = j-1;
        }
    }
}

bool h(int i, int j, int k, int l){
    //printf("H: %d %d %d %d\n", i, j, k, l);
    if(i > j) return true;
    if(l == 0) return g(i,j-1);

    bool &mark = HM[i][j][k][l];
    bool &ret = H[i][j][k][l];
    if(mark) return ret;

    ret = false;
    char tmp = P[k][l-1] - 'a';
    int idx = hash[j][tmp];
    while(idx >= i){
        if(Str[idx] == P[k][l-1]){
            if(g(idx+1,j-1) && h(i,idx,k,l-1)){
                ret = true;
                break;
            }
        }
        idx = hash[idx][tmp];
    }
    mark = true;
    return ret;
}

bool g(int i, int j){
    //printf("G: %d %d\n", i, j);
    if(i > j) return true;
    if(GM[i][j]) return G[i][j];

    bool &mark = GM[i][j];
    bool &ret = G[i][j];
    ret = false;
    REP(k,N){
        if(j-i+1 < L[k]) continue;
        if(Str[j] == P[k][L[k]-1] && h(i,j,k,L[k]-1)){
            ret = true;
            break;
        }
    }
    mark = true;
    return ret;
}

int f(int i, int j, int l){
    //printf("F: %d %d %d\n", i, j, l);
    if(i < 0 && l < 0) return 0;
    if(l == 0) return dp[i];
    if(i+1 < l || i < 0) return Len;

    int &ret = F[i][j][l];
    if(ret != -1)
        return ret;

    ret = Len;
    char tmp = P[j][l-1]-'a';
    int idx = hash[i][tmp];
    while(idx >= 0){
        if(g(idx+1,i-1)){
            ret = min(ret, f(idx,j,l-1));
        }
        idx = hash[idx][tmp];
    }
    return ret;
}

int main(){
    //freopen("input.txt","r", stdin);
    scanf("%s", Str);
    Len = strlen(Str);
    pre();

    N = ni();
    REP(i,N){
        scanf("%s", P[i]);
        L[i] = strlen(P[i]);
    }

    memset(F, -1, sizeof(F));

    dp[0] = 0;
    REP(i,Len){
        dp[i+1] = dp[i] + 1;
        REP(j,N){
            if(Str[i] != P[j][L[j]-1]) continue;
            dp[i+1] = min(dp[i+1], f(i,j,L[j]-1));
        }
    }
    printf("%d\n", dp[Len]);

    return 0;
}
