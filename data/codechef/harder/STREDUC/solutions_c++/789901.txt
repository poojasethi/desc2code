#pragma  pack(1)
#include <time.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#define  MAXLEN  250
#define  MAXSCOUNT 30
#define  MAXSLEN 20

char Input[MAXLEN+1];
int n;
int LEN;
char S[MAXSCOUNT][MAXSLEN+1];
int Lens[31];
unsigned char F_Res[MAXLEN][MAXLEN];
unsigned char G_Res[MAXLEN][MAXLEN][MAXSCOUNT][MAXSLEN];
unsigned char gts_res[MAXLEN][MAXLEN][MAXSCOUNT];
int LenExists[31];
char current_search[301];
int current_search_len;
//-----------------------
int F_Count =0; //for debug
int F_Count2 =0;//for debug
int Exists_count =0;//for debug
bool testmode=false;//for debug
int  testnumber=1;//for debug
//-------------------------
int F(int a , int b);
int G(int a , int b , char *st,int len);


inline int max(int a , int b)
{
	
	if (a > b)
		return a;
	return b;
	
}

inline int min(int a , int b)
{
	
	if (a > b)
		return b;
	return a;
	
}

bool InternalExists(int start, int end)
{
	
	if (end < start)
		return false;
	if (end == start)
	{
		if (current_search_len!=Lens[start])
			return false;
		return (strcmp(current_search , S[start])==0);
	}
	int mid = (start+end)>>1 ;
	int res = strcmp(current_search , S[mid]);
	if (res == 0)
		return true;
	if (res > 0)
		return InternalExists(mid+1,end);
	else
		return InternalExists(start,mid-1);
}

inline bool Exists(int start1,int l1,int start2, int l2 )
{
    Exists_count++;
	//char tmp[300];
	current_search_len = l1+l2;
    if (current_search_len == 0 )
        return false;
	if (current_search_len > 20)
		return false;
	if (!LenExists[current_search_len])
		return false;
    if (l1)
		strncpy(current_search , Input+start1, l1);
    if (l2)
		strncpy(current_search+l1,Input+start2 , l2);
    current_search[l1+l2] = 0 ;
	return InternalExists(0,n-1);
}
int gts(int start , int end , int sIdx)
{
	
	char res[MAXLEN+1][MAXSLEN+1];
	int len = end - start +1;
	if (len < Lens[sIdx])
		return 0;
	if (Input[start] != S[sIdx][0] || Input[end] != S[sIdx][Lens[sIdx]-1])
		return 0;
	//strncpy(tmp , Input+start , len);
	//tmp[len]=0;
	char *s = S[sIdx];
	//memset(res,0,sizeof(res));
	for (int k =0 ; k <= len ; k++)
		for (int j = 0 ; j <= Lens[sIdx] ; j++)
		{
			if ((k==0)||(j==0)||(Lens[sIdx]-j>len-k))	
				res[k][j]=0;

			else
				if (Input[start+k-1]==s[j-1])			
				{
					res[k][j]= res[k-1][j-1]+1 ;
					if (res[k][j]==Lens[sIdx])
						return true;
				}
				else				
					res[k][j] = max(res[k-1][j],res[k][j-1]);
		}
		return res[len][Lens[sIdx]]==Lens[sIdx];
		
}

void Initialize()
{
	char tmp[300];
	int i , j , k , l;
	if ( testmode ) printf("Init1\n");
	for (k = n-2 ; k >= 0  ;k--)
		for (l = 0 ; l <= k ; l++)
			if (strcmp(S[l],S[l+1])>0)
			{
				strcpy(tmp,S[l]);
				strcpy(S[l],S[l+1]);
				strcpy(S[l+1],tmp);
			}
	if ( testmode ) printf("Init2\n");
	for (i = 0 ; i < n ; i++)
	{
		Lens[i] = strlen(S[i]);
		LenExists[strlen(S[i])] = 1;
	}
	if ( testmode ) printf("Init3\n");
	if ( testmode ) printf("Init4\n");
	for (i = 0 ; i < LEN ; i++)
		for (j = i ; j < LEN ; j++)
			for (k = 0 ; k < n ; k++)
			{
				if (gts_res[i][j][k]==0)
				{
					gts_res[i][j][k]=(gts(i,j,k)?2:1);
					if (gts_res[i][j][k]==2)
						for (int l = j+1 ; l < LEN ; l++)
							if (Input[l]==Input[j])
								gts_res[i][j][l]=2;
				}
			}

	//printf("gtsres(5,11,1):%d\n",gts(5,11,1));
	if ( testmode ) printf("Init end\n");

}

int G(int a , int b , int sidx,int from)
{
	int i , j , k ;
	int len = Lens[sidx]-from-1;
	if (len == 0)
	{
		return  (F(a,b)==0);
	}
	if (len > b-a+1)
	{
		return 0;
	}
	if (a > b)
	{
		return 0;
	}
	unsigned char * res = &G_Res[a][b][sidx][from];

	if (*res != 0)
		return *res-1;

	if (len == b-a+1)
	{
		*res = (strncmp(Input+a ,S[sidx]+from,len )==0)?2:1;
		return *res-1;
	}

	if (Input[a]==S[sidx][from])
		if (G(a+1,b,sidx,from+1))
		{
			*res = 2;
			return 1;
		}
	
	for (i = a ; i < b ; i++)
		if (F(a,i)==0)
			if (G(i+1,b,sidx,from))
			{
				*res = 2;
				return 1;
			}
	*res = 1;
	return 0;

}

int F(int a , int b)
{
	F_Count++;
	int i , j , k ;
	if (a > b)
		return 0;
	if (F_Res[a][b] != 0)
		return F_Res[a][b]-1;

	int l = b - a + 1;
	if (Exists(a,l,0,0))
	{
		F_Res[a][b]=1;
		return 0;
	}
	if (a == b)
	{
		F_Res[a][b] = 2 ;
		return 1;
	}
	F_Count2++;
	int min_res = F(a+1,b)+1;
	for (int t = a ; t < b ; t++)
		if (F(a,t)==0)
			min_res = min (min_res, F(t+1,b));
	if (min_res)
		for (i = 0 ; i < n ; i++)
			if ((Lens[i]>1)&&(Input[a]==S[i][0])&&(Input[b]==S[i][Lens[i]-1]))
			{
				if (gts_res[a][b][i]==2)
					if (G(a+1,b-1,i,1))
					{
						F_Res[a][b]=1;
						return 0;
					}

			}
	F_Res[a][b] = min_res+1 ;
	return min_res ;
}
int main()
{
	int k;
	
	if (!testmode)
	{
		scanf("%s",Input);
		scanf("%d",&n);
		for (k = 0 ; k < n ; k++)
			scanf("%s",S[k]);
	}
	else
	{
		if (testnumber==0)
		{

			//strcpy(Input , "sssdkk82349kkksksksksskcjkcjcjcjcjkkkkkksssssdkfjasskcjssssskddddddskcjdddddddddddsskkkkkcccckdddddddddddddddddcccccabbbbbkdddddddddddddddddaaaaaaaaabbbbbaaaaaaaaabbbaaaaaaaaabbbbbskcjaaadkfjajaaaaaabbbbbbcccccccccakaaaaaaaaak");
			strcpy(Input , "aabbbbbbbbaaakdddddkfjdkdkdkfjjjjjajjjjjfjajjjjjfjjjjjajajdddddddkfjajsssssssssssdkfjajssssdkfjajdddddddaaaaadabbbbbbbbaaaaabbbbbbbbaaakdddddkfjdkdkdkfjjjjjajjjjjfjajjjjjfjjjjjajajdddddddkfjajsssssssssssdkfjajssssdkfjajdddddddaaaaadabbbbbbbbaaa");
			n=0;	
			strcpy(S[n++],"aaaaaaaaa");
			strcpy(S[n++],"bbbbbbbb");
			strcpy(S[n++],"ccccccccca");
			strcpy(S[n++],"dddddddds");
			strcpy(S[n++],"k");
			strcpy(S[n++],"aaaaaaaaaaaa");
			strcpy(S[n++],"aaaaa");
			strcpy(S[n++],"kkkkkkk");
			strcpy(S[n++],"kddddddddddddddddd");
			strcpy(S[n++],"aaaaaaaaaa");
			strcpy(S[n++],"ddddddddddddddd");
			strcpy(S[n++],"kkkkkkkkkkkkk");
			strcpy(S[n++],"kkkkkkkasdjfk");
			strcpy(S[n++],"kkkkkkkkkkkkkk");
			strcpy(S[n++],"sssssssssssssss");
			strcpy(S[n++],"sk");
			strcpy(S[n++],"sc");
			strcpy(S[n++],"ks");
			strcpy(S[n++],"kkkkkkkkkkka");
			strcpy(S[n++],"dkkkkkkkkkkk");
			strcpy(S[n++],"kkkkkkkkkk");
			strcpy(S[n++],"82349");
			strcpy(S[n++],"dkfjaj");
			strcpy(S[n++],"jjjj");
			strcpy(S[n++],"aaaaaaaaa");
			strcpy(S[n++],"ssssss");
			strcpy(S[n++],"aaaaa");
			strcpy(S[n++],"sdf");
			strcpy(S[n++],"ssssssssssss");
			strcpy(S[n++],"aaaaaaaaa");
		}
		else
			if (testnumber == 1)
			{
				strcpy(Input , "hbaddbbbbabddddbddbbaddbbbbabddddbddbbbbabbbbabbaddbbabbbbabbbbbbabbbbbbabbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbbaddbbbbabddddbddbt");		
				n = 0;
				strcpy(S[n++],"a");
				strcpy(S[n++],"bbbb");
				strcpy(S[n++],"dd");
				strcpy(S[n++],"aaa");
				strcpy(S[n++],"bbabb");
				strcpy(S[n++],"daad");
				strcpy(S[n++],"aaa");
				strcpy(S[n++],"ddbddbbaddbbbbabdd");
				strcpy(S[n++],"dd");
				strcpy(S[n++],"aabbdd");
				strcpy(S[n++],"bbbbabc");
				strcpy(S[n++],"ddabc");
				strcpy(S[n++],"babddddbddbbaddbbb");
				strcpy(S[n++],"bbbbdb");
				strcpy(S[n++],"ddbd");
				strcpy(S[n++],"addbbbbabddd");
				strcpy(S[n++],"bbbbdb");
				strcpy(S[n++],"dddb");
				strcpy(S[n++],"aadac");
				strcpy(S[n++],"abbbbdb");
				strcpy(S[n++],"addbd");
				strcpy(S[n++],"aabd");
				strcpy(S[n++],"dbbaddbbbbabdddd");
				strcpy(S[n++],"abddddbddbbaddbbbb");
				strcpy(S[n++],"aabd");
				strcpy(S[n++],"dbbaddbbbbabdddd");
				strcpy(S[n++],"abddddbddbbaddbbbb");
				strcpy(S[n++],"abddddbddbbaddbbb");
				strcpy(S[n++],"dbbaddbbbbabdddd");
				strcpy(S[n++],"bbbabddddbddbbaddb");

			}
		printf("Input:%s\n",Input);
		printf("len :%d\n",strlen(Input));
		printf("n :%d\n",n);
	}
	time_t t0;
	time(&t0);
	LEN = strlen(Input);
	Initialize();
	time_t starttime;
	time(&starttime);
	if ( testmode ) printf("start...\n");
	printf("%d\r\n",F(0,strlen(Input)-1));
	if ( testmode ) printf("end...\n");
	time_t endtime;
	time(&endtime);
	if ( testmode ) printf("total time %d alg time:%d  F-Call:(%d,%d) Exists:%d",endtime-t0,endtime-starttime,F_Count,F_Count2,Exists_count);
	int maxi=0;
	int maxj=0;
	return 0;
}
