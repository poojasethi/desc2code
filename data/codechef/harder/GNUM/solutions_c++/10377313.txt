#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <set>
#include <queue>
using namespace std;
#define N 405
#define M 200050
#define INF 0x3f7f7f7f
#define PII pair <int,int>
#define fr first
#define sc second
#define mp make_pair
queue <int> __;
int fi[M],c[M*4][3],val[2][N],Prime[M],Cnt[2][N],li[2][N][10];
int _li[M][10],_C[M],Num[M],h[M];bool b[M];
int S=M-1,T=M-2,ss,n,m,t,st,ans;
set <PII> __li;set <PII> :: iterator it;
inline int Read()
 {
 	int x=0;char y;
 	do y=getchar(); while (y<'0'||y>'9');
 	do x=x*10+y-'0',y=getchar(); while (y>='0'&&y<='9');
 	return x;
 }
inline void Line(int x,int y,int z)
 {
 	c[++ss][0]=y;c[ss][1]=fi[x];fi[x]=ss;c[ss][2]=z;
 	c[++ss][0]=x;c[ss][1]=fi[y];fi[y]=ss;c[ss][2]=false;
 }
int gcd(int x,int y) {return !y?x:gcd(y,x%y);}
int Gcd(int x,int y)
 {
 	int z = true,le = true,ri = true;
 	while (le <= Cnt[0][x]&&ri <= Cnt[1][y])
 	 {
 	 	int k = Prime[li[0][x][le]], l = Prime[li[1][y][ri]];
 	 	if (k==l)
 	 	  z=z*k,le++,ri++; else
 	 	if (k<l) le++; else ri++;
 	 }
 	return z;
 }
void _Line(int x,int y,int z)
 {
 	int le = true,ri = true;
 	while (le <= Cnt[0][x]&&ri <= Cnt[1][y])
 	 {
 	 	int k = Prime[li[0][x][le]], l = Prime[li[1][y][ri]];
 	 	if (k==l)
 	 	  _li[z][++_C[z]] = li[0][x][le],le++,ri++; else
 	 	if (k<l) le++; else ri++;
 	 }
 	return;
 }
void Pretreat()
 {
 	st=false;
 	for (int j=0;j<2;j++)
 	 for (int i=1;i<=n;i++)
 	  {
 	  	 int e=val[j][i];
 	  	 for (int k=2;k*k<=e;k++)
 	  	  if (e%k==0)
 	  	   {
 	  	   	  Prime[++st] = k;
 	  	   	  while (e%k==0) e/=k;
 	  	   }
 	  	 if (e>1) Prime[++st] = e;
 	  }
 	sort(Prime+1,Prime+st+1);
 	int _Cnt=false,_st=false;
 	for (int i=1;i<=st;i++)
 	 {
 	 	_Cnt+=Prime[i]!=Prime[i-1];
 	 	Prime[_Cnt]=Prime[i];
 	 }
 	st = _Cnt;
 	for (int j=0;j<2;j++)
 	 for (int i=1;i<=n;i++)
 	  {
 	  	 Cnt[j][i] = false;
 	  	 for (int k=1;k<=st;k++)
 	  	  if (val[j][i]%Prime[k]==false)
 	  	  	li[j][i][++Cnt[j][i]] = k;
 	  }
 	__li.clear();
 	for (int i=1;i<=n;i++)
 	 for (int j=1;j<=n;j++)
 	  {
 	  	 int k = Gcd(i,j),l = val[0][i] < val[1][j] ? k : -k;
 	  	 if (k == 1 || val[0][i] == val[1][j]) continue;
 	  	 it = __li.lower_bound(mp(l,0));
 	  	 if (it != __li.end() && it->fr == l)
 	  	  {
 	  	  	 Num[it -> sc] ++;continue;
 	  	  } else
 	  	 _st ++;_C[_st] = false;Num[_st] = true;
 	  	 _Line (i,j,_st);b[_st] = l < 0;
 	  	 __li.insert(mp(l,_st));
 	  }
 	for (int i=1;i<=_st;i++)
 	 if (b[i])
 	  {
 	  	 Line(S,i+st,Num[i]);
 	  	 for (int j=1;j<=_C[i];j++)
 	  	   Line(i+st,_li[i][j],INF);
 	  } else
 	  {
 	  	 Line(i+st,T,Num[i]);
 	  	 for (int j=1;j<=_C[i];j++)
 	  	   Line(_li[i][j],i+st,INF);
 	  }
 	return;
 }
bool BFS()
 {
 	__.push(S);
 	memset(h,false,sizeof h);h[S] = true;
 	while (!__.empty())
 	 {
 	 	int k=__.front();__.pop();
 	 	for (int i=fi[k];i;i=c[i][1])
 	 	 if (c[i][2]&&!h[c[i][0]])
 	 	   h[c[i][0]]=h[k]+1,__.push(c[i][0]);
 	 }
 	return h[T] > 0;
 }
int DFS(int x,int y)
 {
 	if (x==T) return y;
 	int k,l = false;
 	for (int i=fi[x];i&&y;i=c[i][1])
 	 if (c[i][2]&&h[c[i][0]]==h[x]+1)
 	  {
 	  	 k = DFS(c[i][0],min(y,c[i][2]));
 	  	 if (k) l+=k,y-=k,c[i^1][2]+=k,c[i][2]-=k;
 	  }
 	return l;
 }
int main()
 {
 	//freopen("input.txt","r",stdin);
 	t=Read();
 	while (t--)
 	 {
 	 	memset(fi,false,sizeof fi);
 	 	ss=true;n=Read();ans=false;
 	 	for (int j=0;j<2;j++)
 	 	 for (int i=1;i<=n;i++) val[j][i]=Read();
 	 	Pretreat();
 	    while (BFS()) ans+=DFS(S,INF);
 	    cout <<ans<<endl;
 	 }
 	return 0;
 }