#include<bits/stdc++.h>
#define INF 2000000000

using namespace std;
/*
#define quer 3402
#define range 31623
#define sqt 177
#define ifc(x) (flag[x>>6]&(1<<((x>>1)&31)))
#define isc(x) (flag[x>>6]|=(1<<((x>>1)&31)))



int flag[range>>6], primes[quer];

void sieve()
{
	int i, j, k;
	for(i=3; i<sqt; i+=2)
		if(!ifc(i))
			for(j=i*i,k=i<<1; j<range; j+=k)
				isc(j);
				primes[1]=2;

	for(i=3,j=2; i<range&&j<quer; i+=2)
		if(!ifc(i))
			    primes[j++] = i;
}
*/
typedef long long LL;
struct Edge {
  int from, to, cap, flow, index;
  Edge(int from, int to, int cap, int flow, int index) :
    from(from), to(to), cap(cap), flow(flow), index(index) {}
};

struct PushRelabel {
  int N;
  vector<vector<Edge> > G;
  vector<LL> excess;
  vector<int> dist, active, count;
  queue<int> Q;

  PushRelabel(int N) : N(N), G(N), excess(N), dist(N), active(N), count(2*N) {}

  void AddEdge(int from, int to, int cap) {
    G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
    if (from == to) G[from].back().index++;
    G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
  }

  void Enqueue(int v) {
    if (!active[v] && excess[v] > 0) { active[v] = true; Q.push(v); }
  }

  void Push(Edge &e) {
    int amt = int(min(excess[e.from], LL(e.cap - e.flow)));
    if (dist[e.from] <= dist[e.to] || amt == 0) return;
    e.flow += amt;
    G[e.to][e.index].flow -= amt;
    excess[e.to] += amt;
    excess[e.from] -= amt;
    Enqueue(e.to);
  }

  void Gap(int k) {
    for (int v = 0; v < N; v++) {
      if (dist[v] < k) continue;
      count[dist[v]]--;
      dist[v] = max(dist[v], N+1);
      count[dist[v]]++;
      Enqueue(v);
    }
  }

  void Relabel(int v) {
    count[dist[v]]--;
    dist[v] = 2*N;
    for (int i = 0; i < G[v].size(); i++)
      if (G[v][i].cap - G[v][i].flow > 0)
	dist[v] = min(dist[v], dist[G[v][i].to] + 1);
    count[dist[v]]++;
    Enqueue(v);
  }

  void Discharge(int v) {
    for (int i = 0; excess[v] > 0 && i < G[v].size(); i++) Push(G[v][i]);
    if (excess[v] > 0) {
      if (count[dist[v]] == 1)
	Gap(dist[v]);
      else
	Relabel(v);
    }
  }

  LL GetMaxFlow(int s, int t) {
    count[0] = N-1;
    count[N] = 1;
    dist[s] = N;
    active[s] = active[t] = true;
    for (int i = 0; i < G[s].size(); i++) {
      excess[s] += G[s][i].cap;
      Push(G[s][i]);
    }

    while (!Q.empty()) {
      int v = Q.front();
      Q.pop();
      active[v] = false;
      Discharge(v);
    }

    LL totflow = 0;
    for (int i = 0; i < G[s].size(); i++) totflow += G[s][i].flow;
    return totflow;
  }
};
int A[401], B[401];
int factors[14401];
int countt;
vector<int> S1, S2;
map<int, int > mp1, mp2;
int gcd(int a, int b)
{
    while(a%b!=0)
    {
        int temp = b;
        b = a%b;
        a = temp;
    }
    return b;
}
/*void factorise()
{
    for(map<int, pair<int, int> >::iterator it = mp.begin(); it!=mp.end(); it++)
    {
        it->second.first = countt;
        int num = it->first;
        int rt = sqrt(num);
        for(int i = 1; (i<quer&&num!=1)&&rt>=primes[i]; i++)
        {
            if(num%primes[i]==0)
            {
                while(num%primes[i]==0)
                    num/=primes[i];
                factors[countt++] = primes[i];
            }
        }
        if(num!=1)
            factors[countt++] = num;
        it->second.second = countt;
    }
}*/
void print()
{
    cout<<"Check check here"<<endl;
}
int main()
{
    int t, n;
    //sieve();
    scanf("%d", &t);
    for(;t--;)
    {
        scanf("%d", &n);
        for(int i = 0; i<n; i++)
            scanf("%d", &A[i]);
        for(int i = 0; i<n; i++)
            scanf("%d", &B[i]);
        //Dumping previous values
        S1.clear();
        S2.clear();
        mp1.clear();
        mp2.clear();
        //mp.clear();

        //Making all possible sets of (A, B)
        for(int i = 0; i<n; i++)
        {
            for(int j = 0; j<n; j++)
            {
                if(A[i]<B[j])
                {
                    int temp = gcd(A[i], B[j]);
                    if(temp!=1)
                    {
                        if(mp1[temp]==0)
                            S1.push_back(temp);
                        mp1[temp]++;
                    }
                }
            }
        }
        for(int i = 0; i<n; i++)
        {
            for(int j = 0; j<n; j++)
            {
                if(A[i]>B[j])
                {
                    int temp = gcd(A[i], B[j]);
                    if(temp!=1)
                    {
                        if(mp2[temp]==0)
                            S2.push_back(temp);
                        mp2[temp]++;                    }
                }
            }
        }
        //Factorises all the GCDs
        //factorise();


        //Flow using Push Relabel
        int nodes = 2+S1.size()+S2.size();
        PushRelabel graph(nodes);

        int sz1 = S1.size();
        for(int i = 0; i<sz1; i++)
            graph.AddEdge(0, i+1, mp1[S1[i]]);

        int sz2 = S2.size();
        for(int j = 0; j<sz2; j++)
            graph.AddEdge(sz1+1+j, sz1+sz2+1, mp2[S2[j]]);

        for(int i = 0; i<sz1; i++)
        {
            for(int j = 0; j<sz2; j++)
            {
                if(gcd(S1[i], S2[j])!=1)
                    graph.AddEdge(1+i, 1+sz1+j, min(mp1[S1[i]], mp2[S2[j]]));
            }
        }

        cout<<graph.GetMaxFlow(0, nodes-1)<<endl;
    }
}
