#include<iostream>
#include<cstdio>
using namespace std;

typedef long long LL;


#define MOD 1000000007
#define NN 1000005

LL N,M;

LL fact[NN];


//modular logarithmic exponentiator 
LL pow(LL a, LL p)
{    
    if(p==0)return 1LL; 
    LL ans = 1LL, c = a;
    while(p)
    {
       if(p&1LL) ans = (ans*c)%MOD;
       c = (c*c)%MOD;
       p/=2;
       
    }
    return ans;    
}

//precompute factorials
void precompute()
{
    fact[0] = 1;
    for(int i=1; i<NN; i++)
    {
        fact[i] = (fact[i-1]*i)%MOD;        
    }    
}

void solve()
{
    LL A, B, C, res;
    
    B = ((M-N)*(M-N+1))%MOD;
    if(M&1LL)
    {
       A = M-N+1;
       C = N - ((M+1)/2);        
    }
    else
    {
       A = M-N;
       C = N - (M/2);     
    }
    res = (fact[A]*(pow(B, C)%MOD))%MOD;
    cout<<res<<endl;
    
}


int main()
{
    int t;
    precompute();
    scanf("%d", &t);
    while(t--)
    {
        scanf("%lld%lld", &N, &M);
        solve();    
        
    }
       
}