#include<iostream>
 
using namespace std;
#define mod 1000000007
long long int f[1000001];
int curr;
long long int fact(int n){
    if(curr==-1){
        f[0]=1;
        f[1]=1;
        int i=2;
        long long int j;
        while(i<=n){
            j=i;
            f[i]=(j*f[i-1])%mod;
            i++;
        }
        curr=n;
        return f[n];
    }
    else if(f[n]!=-1)return f[n];
    else{
        int i=curr+1;
        long long int j;
        while(i<=n){
            j=i;
            f[i]=(j*f[i-1])%mod;
            i++;
        }
        curr=n;
        return f[n];
    }
}
long long int power(int n,int m){
    if(m==0)return 1;
    if(m%2){
        long long int ans=power(n,m/2);
        ans=((ans*ans)%mod*n)%mod;
        return ans;
    }
    else{
        long long int ans=power(n,m/2);
        ans=(ans*ans)%mod;
        return ans;
    }
}
int main(){
    int t=0;
    long long int n,m,temp;
    cin>>t;
    for(int i=0;i<1000001;i++)f[i]=-1;
    curr=-1;
    while(t--){
        cin>>n>>m;
        if(n%2==0){// n is even
            if((m-n+1)%2){//odd case
                temp=((fact(m-n+1)%mod*power(m-n+1,n/2-(m-n+1)/2-1)%mod)%mod*power(m-n,n/2-(m-n+1)/2))%mod;
            }
            else{
                temp=((fact(m-n+1)%mod*power(m-n+1,n/2-(m-n+1)/2)%mod)%mod*power(m-n,n/2-(m-n+1)/2))%mod;
            }
            cout<<temp<<endl;
        }
        else{//n is odd
            if((m-n+1)%2){//odd
                temp=((fact(m-n+1)%mod*power(m-n+1,n/2-(m-n+1)/2)%mod)%mod*power(m-n,n/2-(m-n+1)/2)%mod)%mod;
            }
            else{
                temp=((fact(m-n+1)%mod*power(m-n+1,n/2-(m-n+1)/2)%mod)%mod*power(m-n,n/2-(m-n+1)/2+1)%mod)%mod;
            }
            cout<<temp<<endl;
        }
    }
    return 0;
}  