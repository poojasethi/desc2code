/*
Author : Rashedul Hasan Rijul ( Silent_coder ).
*/
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>
#include<ctype.h>
#include<algorithm>
#include<vector>
#include<string>
#include<queue>
#include<stack>
#include<map>
#include<set>
using namespace std;

#define maxm 502
#define inf (1<<29)
#define ii int
#define iid long long int
#define mod 1000000007

#define pi  acos(-1.0)
#define eps 1e-9
#define iseq(a,b) (fabs(a-b)<eps)

#define pii pair<int,int>
#define mp  make_pair
#define uu first
#define vv second

ii on(ii n,ii k){ return (n|(1<<k)); }
ii off(ii n,ii k){ return (n-(n&(1<<k))); }
bool chck(ii n,ii k){ return (n&(1<<k)); }

ii mini(ii a,ii b){ if(a<b) return a;  return b;  }
ii maxi(ii a,ii b){ if(a>b) return a;  return b;  }

ii dp[maxm][maxm*maxm],sum_dp[maxm][maxm*maxm],dp_ncr[maxm][maxm];
ii fact[maxm];
bool vis_ncr[maxm][maxm];

iid ncr(int n,int r);
void cal_dp(int n,int e);
void init_fact(int n);
int find_ans(int n,int e);

int main(){

    int i,j,test,t=1;

    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);

    cal_dp(500,500*500);
    init_fact(500);

    scanf("%d",&test);

    while(test--){

        int n,e;

        scanf("%d %d",&n,&e);

        printf("%d\n",find_ans(n,e));
    }

    return 0;
}

int find_ans(int n,int e){

    int i,len,rem;
    iid ret=0,ret1;

    for(len=1;len<=n;len++){
        rem=n-len;

		iid possible_pos=(n-len+1);
        int e_modified=mini(e,(len*(len-1))/2);

        ret1=sum_dp[len][e_modified];

		ret1*=possible_pos;
		if(ret1>=mod) ret1%=mod;

        ret1*=(iid)ncr(n,len);
        if(ret1>=mod) ret1%=mod;

        ret1*=(iid)ncr(n,len);
        if(ret1>=mod) ret1%=mod;

        ret1*=(iid)fact[rem];
        if(ret1>=mod) ret1%=mod;

        ret1*=(iid)fact[rem];
        if(ret1>=mod) ret1%=mod;

        ret+=ret1;
        if(ret>=mod) ret-=mod;

        //printf("%I64d\n",ret);
    }

    return ret;
}

iid ncr(int n,int r){

    if(n<0 || r<0 || r>n) return 0;
    if(n==r)  return 1;

    if(vis_ncr[n][r]) return dp_ncr[n][r];
    vis_ncr[n][r]=1;

    iid ret=ncr(n-1,r) + ncr(n-1,r-1);
    if(ret>=mod) ret%=mod;

    return dp_ncr[n][r]=ret;
}

void init_fact(int n){

	fact[0]=1;
    for(int i=1;i<=n;i++){
        iid tmp=(iid)fact[i-1]*(iid)i;
        if(tmp>=mod) tmp%=mod;
        fact[i]=tmp;
    }
}

ii get_sum(int ind,int b,int e){
    b=maxi(b,0); e=mini(e,(ind*(ind-1))/2);
    if(!b) return sum_dp[ind][e];
    return (sum_dp[ind][e]-sum_dp[ind][b-1]);
}

void cal_dp(int n,int e){

    int i,j;

    //puts("inside");

    for(i=1;i<=n;i++){
        dp[i][0]=sum_dp[i][0]=1;
    }

    for(i=1;i<=n;i++){
        //printf("%d\n",i);
        int max_inv=(i*(i-1))/2;
        int max_inv1=((i-1)*(i-2))/2;

        for(j=1;j<=max_inv;j++){

            int ind=i-1;
            int b=maxi(j-(i-1),0);
            int e=mini(j,max_inv1);
            //dp[i][j]=get_sum(i-1,j-(i-1),j);
            if(b) dp[i][j]=(sum_dp[ind][e]-sum_dp[ind][b-1]);
            else dp[i][j]=sum_dp[ind][e];
            dp[i][j]%=mod;
            if(dp[i][j]<0) dp[i][j]+=mod;

            sum_dp[i][j]=sum_dp[i][j-1]+dp[i][j];
            while(sum_dp[i][j]>=mod) sum_dp[i][j]-=mod;
        }
    }

    //puts("finish cal_dp");
}
