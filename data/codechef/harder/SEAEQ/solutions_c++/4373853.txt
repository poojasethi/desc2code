#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <algorithm>
#include <cmath>
using namespace std;
 
int setBit(int num, int idx, int value = 1){ return (value)? (num | (1<<idx)) : (num & ~(1<<idx)); }
int getBit(int num, int idx) { return ((num >> idx) & 1) == 1; }
int cntBits(int num) { int cnt = 0; while(num){ if(num%2) cnt++; num /= 2; } return cnt; }
 
typedef long long int ll;
#define si(n) scanf("%d",&n)
#define sl(n) scanf("%lld", &n)
#define rep(_var, _end) for(int _var=0; _var < _end; _var++)
#define lp(_var, _end) for(int _var=0; _var <= _end; _var++)
#define lpi(_var, _st, _end) for(int _var=_st; _var<= _end; _var++)
#define lm(_var, _end) for(int _var = _end; _var>=0; _var--)
#define lmi(_var, _st, _end) for(int _var=_st; _var>= _end; _var--)
#define sz(s) s.size()
#define clr(_c, v) memset(_c, v, sizeof _c)
#define ESP (1e-9)
#define INF (1e10)
#define ALL(c) (c).begin(),(c).end()
#define DREP(a)	sort(ALL(a)); a.erase(unique(ALL(a)),a.end())
#define DEBUG(args...)			{dbg,args; cerr<<endl;}
#define pdebug(a,b,c,d) cout << ":: " << a << " - " << b << " - " << c << " - " << d << endl;
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
int dp[501][124800];
int sum_dp[501][124800];
int C[501][501];
ll F[501];
const int MOD = 1000000007;
 
void add(int &var, int val){
  var += val;
  if(var >= MOD) var -= MOD;
}
 
void init(){
  rep(i,501){
    C[i][0] = 1;
    lpi(j,1,i)
      C[i][j] = (C[i-1][j] + C[i-1][j-1]) % MOD;
  }
 
  F[0] = 1;
  lpi(i,1,500)
    F[i] = (F[i-1]*i) % MOD;
 
  dp[0][0] = 1;
  lpi(i,1,500){
    int max_pairs = (i * (i-1))/2;
    dp[i][0] = 1;
    sum_dp[i][0] = 1;
    lpi(j,1,max_pairs){
      int v = dp[i][j-1] + dp[i-1][j];
      if(v >= MOD) v -= MOD;
      if(j >= i){
        v -= dp[i-1][j-i];
        if(v < 0) v += MOD;
      }
      dp[i][j] = v;
      sum_dp[i][j] = (sum_dp[i][j-1] + dp[i][j]) % MOD;
    }
  }
}
 
int main(){
  //freopen("input.txt", "r", stdin);
  init();
  int N, E;
  CASET{
    scanf("%d %d", &N, &E);
    E = min(E, (N*(N-1))/2);
    ll ans = 0;
    lpi(d,1,N){
      ll curr;
      int inv_cnt = min(E, (d*(d-1))/2);
      curr = sum_dp[d][inv_cnt];
      curr = (curr * F[N-d]) % MOD;
      curr = (curr * F[N-d]) % MOD;
      curr = (curr * (N-d+1)) % MOD;
      curr = (curr * C[N][d]) % MOD;
      curr = (curr * C[N][d]) % MOD;
      ans = (ans + curr) % MOD;
    }
    printf("%lld\n", ans);
  }
  return 0;
}
 