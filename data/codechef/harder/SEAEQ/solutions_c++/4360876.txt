#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

const int md = 1000000007, N = 501, E = N * (N - 1) / 2;
ll fac[511], ans;
int c[511][511], tmp, fac2[511];
int i, j, k, n, m, tests;
int f[511][130001];

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  ios_base::sync_with_stdio(false);

  for (i = 1, fac[0] = fac2[0] = 1; i <= N; i++) {
    fac[i] = fac[i - 1] * (ll)i % md;
    fac2[i] = fac[i] * fac[i] % md;
  }
  memset(c, 0, sizeof(c));
  memset(f, 0, sizeof(f));
  for (i = 1, c[0][0] = 1; i <= N; i++)
    for (j = 1, c[i][0] = c[i][i] = 1; j < i; j++)
      c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % md;
  for (i = 0; i <= E; i++) f[1][i] = 1;
  for (i = 2; i <= N; i++)
    for (j = 0; j <= E; j++) {
      f[i][j] =
          f[i][j - 1] + f[i - 1][j] - ((j - i >= 0) ? f[i - 1][j - i] : 0);
      if (f[i][j] < 0) f[i][j] += md;
      if (f[i][j] > md) f[i][j] -= md;
    }
  for (scanf("%d", &tests); tests--;) {
    scanf("%d%d", &n, &m);
    m = min(m, n * (n - 1) / 2);
    for (ans = 0, i = 1; i <= n; i++) {
      tmp = f[i][m] * (ll)(n - i + 1) % md * c[n][i] % md * c[n][i] % md *
            fac2[n - i] % md;
      ans = (ans + tmp) % md;
    }
    printf("%lld\n", ans);
  }

#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
