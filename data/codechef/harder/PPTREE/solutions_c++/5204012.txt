/*
 * Author:  Eyelids
 * Created Time:  2014/10/22 15:26:38
 * File Name: A.cpp
 */
#include<iostream>
#include<sstream>
#include<fstream>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cctype>
#include<cmath>
#include<ctime>
using namespace std;
const double eps(1e-8);
typedef long long lint;
#define clr(x) memset( x , 0 , sizeof(x) )
#define sz(v) ((int)(v).size())
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define repf(i, a, b) for (int i = (a); i <= (b); ++i)
#define repd(i, a, b) for (int i = (a); i >= (b); --i)
#define clrs( x , y ) memset( x , y , sizeof(x) )
const int N = 100000;
int n, ans, root, cnt;
vector <int> E[N + 10];
vector <int> G[N + 10];
int nxt[N * 32 + 10][2];
int NewTrie() {
    int u = ++cnt;
    nxt[u][0] = nxt[u][1] = -1;
    return u;
}
void Insert( int val ) {
    int u = root;
    for ( int i = 31; i >= 0; i --  ) {
        int x = ( val >> i ) & 1;
        if ( nxt[u][x] == -1 ) nxt[u][x] = NewTrie();
        u = nxt[u][x];
    }
}
int Query( int val ) {
    int u = root, ret = 0;
    for ( int i = 31; i >= 0; i -- ) {
        int x = ( val >> i ) & 1;
        //cout <<val<<" "<<i<<" "<<nxt[u][1 ^ x]<<" "<<nxt[u][x]<<endl;
        if ( nxt[u][1 ^ x] != -1 ) {
            ret += (1 << i);
            u = nxt[u][1 ^ x];
        } else {
            u = nxt[u][x];
        }
    }

    return ret;
}
void dfs( int u, int fa, int val ) {
    ans = max( Query( val ), ans );
    Insert( val );
    
    for ( int i = 0; i < (int)E[u].size(); i ++ ) {
        int v = E[u][i];
        if ( v == fa ) continue;
        
        dfs( v, u, val ^ G[u][i] );
    }
}
int main(){
    int T;
    scanf( "%d", &T );
    while ( T -- ) {
        scanf( "%d", &n );
        int u, v, w;
        ans = cnt = 0;
        root = NewTrie();
        Insert( 0 );
       
        for ( int i = 1; i <= n; i ++ ) {
            E[i].clear();
            G[i].clear();
        }
        for ( int i = 0; i < n - 1; i ++ ) {
            scanf( "%d%d%d", &u, &v, &w );
            E[u].push_back( v );
            E[v].push_back( u );
            G[u].push_back( w );
            G[v].push_back( w );
        }
        
        dfs( 1, -1, 0 );
        
        cout <<ans<<endl;
    } 
    
    return 0;
}









