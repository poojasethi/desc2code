#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<utility>
#include<map>
#include<bitset>
using namespace std;

typedef vector<int> VI;
typedef long long LL;
typedef unsigned long long uLL;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
#define pb push_back
#define fi first
#define se second
#define mp make_pair
#pragma comment(linker, "/STACK:266777216")

const int inf=1000000000;
const LL INF=LL(inf)*inf;
const double eps=1e-9;
const double PI=2*acos(0.0);

#define MAXN 100011

int N;
VPII adj[MAXN];
bool visited[MAXN];
int dist[MAXN];

int max(int a, int b)
{
    return a>b?a:b;
}

struct node
{
    int lvl;
    node* one;
    node* zero;
};

node* getnode(int k)
{
    node* newnode = NULL;
    newnode = new node;
    if(newnode)
    {
        newnode->lvl = k;
        newnode->one = NULL;
        newnode->zero = NULL;
    }
    return newnode;
}

node* add(node* a, int key, int lvl)
{
    if(lvl>=0)
    {
        if(key &(1<<lvl))
        {

            if(a->one == NULL)
            {
                a->one = getnode(lvl);
            }
            a->one = add(a->one, key, lvl-1 );
        }
        else
        {
            if(a->zero == NULL)
            {
                a->zero = getnode(lvl);
            }
            a->zero = add(a->zero, key, lvl-1 );

        }
    }
    return a;
}

int getmax(node* a, node* b)
{
    assert(a!=NULL && b!=NULL);
    assert(a->lvl == b->lvl);

    int x=0,y=0, z;
    //If we can get xor of this bit as 1
    if(a->one!=NULL && b->zero!=NULL)
    {
        x = (1<<(a->lvl-1)) + getmax(a->one, b->zero);
    }
    if(a->zero!=NULL && b->one!=NULL)
    {
        y = (1<<(a->lvl-1)) + getmax(a->zero, b->one);
    }
    z = max(x, y);
    if(z>0)return z; //means it is possible for this bit to be 1

    //Means we cant set bit to 1 and we must set this bit to 0
    x=0, y=0;
    if(a->one!=NULL && b->one!=NULL)
    {
        x = getmax(a->one, b->one);
    }
    if(a->zero!=NULL && b->zero!=NULL)
    {
        y = getmax(a->zero, b->zero);
    }
    z= max(x,y);
    return z;
}

void dfs(int x)
{
    int y,w;
    for(int i=0; i<adj[x].size(); i++)
    {
        y = adj[x][i].fi;
        w = adj[x][i].se;
        if(!visited[y])
        {
            visited[y] = 1;
            dist[y] = dist[x]^w;
            dfs(y);
        }
    }
}


void solve()
{
    //Take in input
    int x,y,w, ans;
    scanf("%d", &N);
    for(int i=1; i<=N; i++)
    {
        adj[i].clear();
    }
    memset(visited, 0, N+5);
    for(int i=0; i<N-1; i++)
    {
        scanf("%d%d%d", &x, &y, &w);
        adj[x].pb(mp(y,w));
        adj[y].pb(mp(x,w));
    }

    //To compute the sum of weights
    visited[1] = 1;
    dist[1] = 0;
    dfs(1);

    //To get the maximum sum
    node* a = getnode(31); //the root node
    for(int i=1; i<=N; i++)
    {
        add(a, dist[i], 30);
    }
    ans = getmax(a, a);
    printf("%d\n", ans);
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int t;
    scanf("%d", &t);
    while(t--)
    {
        solve();
    }
}
