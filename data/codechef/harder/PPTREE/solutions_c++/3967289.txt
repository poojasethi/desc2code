#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>

using namespace std;

vector < pair<int,int> > v[100005];
int xor_sum[100005];
int T[33*100005][2];
int total;

void dfs(int curr, int prev)
{
     for ( int i = 0; i < (int)v[curr].size(); i++ ) {
         if ( v[curr][i].first == prev ) continue;
         xor_sum[v[curr][i].first] = xor_sum[curr] ^ v[curr][i].second;
         dfs(v[curr][i].first, curr);
     }     
}

void insert_value(int pos, int idx, int n)
{
     if ( idx < 0 ) return;
     int val = min(1,(n&(1<<idx)));
     if ( T[pos][val] == -1 ) {
         total++;
         T[pos][val] = total;
     }
     insert_value(T[pos][val], idx-1, n);
}

int query(int pos, int idx, int n)
{
    if ( idx < 0 ) return 0;
    int val = min(1,(n&(1<<idx)));
    int ans;
    if ( T[pos][!val] != -1 ) ans = (1<<idx) | query(T[pos][!val], idx-1, n);
    else ans = query(T[pos][val], idx-1, n);
    return ans;
}

int main()
{
    int t,n,x,y,z;
    cin >> t;
    while ( t-- ) {
          cin >> n;
          for ( int i = 1; i <= n; i++ ) v[i].clear();
          for ( int i = 0; i < n-1; i++ ) {
              cin >> x >> y >> z;
              v[x].push_back(make_pair(y,z));
              v[y].push_back(make_pair(x,z));
          }   
          dfs(1,0);
          int ans = 0;
          total = 0;
          memset(T, -1, sizeof(T));
          for ( int i = 1; i <= n; i++ ) insert_value(0, 30, xor_sum[i]);    
          for ( int i = 1; i <= n; i++ ) ans = max(ans, query(0, 30, xor_sum[i]));
          cout << ans << endl;
    }
    return 0;
}
