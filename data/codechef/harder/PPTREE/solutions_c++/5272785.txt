// adijimmy
#include <bits/stdc++.h>
using namespace std;
vector < pair<int,int> > G[100005];
vector <int> vec;
class Trie{
public :
    Trie *lchild,*rchild;
    Trie(){
     lchild = rchild = NULL;
    }
};
void addbit(Trie *root,int n){
   for(int i=31;i>=0;i--){
     int x = (n>>i) & 1;
     if(x){
        if(root->rchild == NULL)
            root->rchild = new Trie();
        root = root->rchild;
     }
     else{
        if(root->lchild == NULL)
            root->lchild = new Trie();
        root = root->lchild;
     }
   }
}
int query(Trie *root,int n){
int res = 0;
  for(int i=31;i>=0;i--){
    int x = (n>>i) & 1;
    if(x){
       if(root->lchild){
         res = res|(1<<i);
         root = root->lchild;
       }
       else{
         root = root->rchild;
       }
    }
    else{
       if(root->rchild){
         res = res|(1<<i);
         root = root->rchild;
       }
       else{
         root = root->lchild;
       }
    }
  }
  return res;
}
void dfs(int u,int par,int xorval){
  vec.push_back(xorval);
  for(int i=0;i<G[u].size();i++)
    if(G[u][i].first != par)
        dfs(G[u][i].first,u,xorval xor G[u][i].second);
}
int main(){
int t,n,u,v,w;
scanf("%d",&t);
while(t--){
    scanf("%d",&n);
    for(int i=0;i<n-1;i++){
        scanf("%d %d %d",&u,&v,&w);
        u--,v--;
        G[u].push_back(make_pair(v,w));
        G[v].push_back(make_pair(u,w));
    }
    dfs(0,-1,0);
    Trie *root = new Trie();
    int ans = 0;
    addbit(root,0);
    for(int i=0;i<vec.size();i++){
        int x = vec[i];
        ans = max(ans,query(root,x));
        addbit(root,x);
    }
    printf("%d\n",ans);
    for(int i=0;i<=n;i++)
        G[i].clear();
    vec.clear();
}
return 0;
}
