#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
#include<string.h>
#include<iostream>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<sstream>
using namespace std;

#define READ(a) freopen(a,"r",stdin);
#define WRITE(a) freopen(a,"w",stdout);
#define FOR(i,a,b)  for(int i=(a);i<b;i++)
#define REV(i,a,b)  for(int i=a;i>=b;i--)
#define mem(a,b) memset(a,b,sizeof(a))
#define clr(a) a.clear()
#define mp make_pair
#define pb push_back
#define SZ(a) (int)a.size()
#define all(a) (a).begin(),(a).end()
#define reall(a) (a).rbegin(),(a).rend()
#define fs first
#define sc second
#define PI (2*acos(0.0))
#define ERR (1e-7)
#define EQ(a,b) (fabs(a-b)<ERR)
#define onlyCPP ios_base::sync_with_stdio(0);cin.tie(0)
//#define FOREACH(it,x) for(__typeof((x.begin())) it=x.begin();it!=x.end();it++)
////int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1};                      //4 Direction
////int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};  //8 direction
////int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction

typedef long long ll;
typedef unsigned long long ull; //scanf("%llu",&N);
typedef vector<int>     VI;
typedef vector<string>  VS;
typedef pair<int,int>   PII;
typedef pair<int,PII >  DPII;
typedef vector<pair<int,int> >VPII;
typedef vector<pair<int,pair<int,int> > > VDPII;

const int INF=(1<<29);
const int MAX=100009;

VI store;
int n;
VPII G[MAX];

string toString(int x)
{
    string str;
    for(int i=0;i<=30;i++)
    {
        if((x&(1<<i))) str.pb('1');
        else str.pb('0');
    }
    reverse(all(str));
    return str;
}

void dfs(int u,int p,ll x)
{
    //store.pb(toString(x));
    store.pb(x);
    for(int i=0;i<SZ(G[u]);i++)
    {
        int v=G[u][i].fs;
        int w=G[u][i].sc;
        if(v==p) continue;

        dfs(v,u,(x^w));
    }
    return;
}

const int ALPHABET = 3;
int next[MAX*31][ALPHABET];

struct Trie
{
    int n, root;
    void init()
    {
        root = 0, n = 1;
        memset(next[root], -1, sizeof(next[root]));
    }
    void insert(int x)
    {
        int curr = root, i, k;
        for(i = 30; i>=0; i--)
        {
            k=0;
            if((x&(1<<i))) k=1;

            if(next[curr][k] == -1)
            {
                next[curr][k] = n;
                memset(next[n], -1, sizeof(next[n]));
                n++;
            }
            curr = next[curr][k];
        }
    }

    ll find(int x)
    {
        ll ret=0;
        int curr = root, i, k;
        for(i = 30; i>=0; i--)
        {
            k=0;
            if((x&(1<<i))) k=1;

            if(next[curr][!k] == -1)
            {
                 curr = next[curr][k];
            }
            else
            {
                ret+=(1<<i);
                curr = next[curr][!k];
            }
        }
        return ret;
    }
};


int main()
{
    onlyCPP;
    int t;cin>>t;
    while(t--)
    {
        cin>>n;
        FOR(i,0,n+1) clr(G[i]);

        for(int i=1,x,y,c;i<n;i++)
        {
            cin>>x>>y>>c;
            G[x].pb(mp(y,c));
            G[y].pb(mp(x,c));
        }

        clr(store);
        dfs(1,1,0);
        Trie trie;
        trie.init();

        for(int i=0;i<SZ(store);i++)
        {
            trie.insert(store[i]);
        }


        ll ans=0;
        for(int i=0;i<SZ(store);i++) ans=max(ans,trie.find(store[i]));
        cout<<ans<<endl;
    }

    return 0;
}



/*
2
3
1 2 3
3 1 2
4
1 2 2
1 3 2
4 3 1

*/
