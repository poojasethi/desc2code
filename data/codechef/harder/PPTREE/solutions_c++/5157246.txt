#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 1e5 + 5;
int first[N], next[N * 2], end[N * 2], wi[N * 2];
int tot;

void addedge(int x, int y, int s) {
    next[++tot] = first[x];
    first[x] = tot;
    end[tot] = y;
    wi[tot] = s;
}

int a[N], queue[N];
int bo[N];

void bfs() {
    memset(bo, 0, sizeof(bo));
    int head = 1, tail = 1;
    queue[1] = 1; a[1] = 0;
    bo[1] = 1;
    while (head <= tail) {
	int x = queue[head++];
	for (int k = first[x]; k; k = next[k])
	    if (!bo[end[k]]) {
		a[end[k]] = a[x] ^ wi[k];
		bo[end[k]] = true;
		queue[++tail] = end[k];
	    }
    }
}

int ans;
int f[N * 33][2];

void insert(int x, int p, int a) {
    if (p < 0) return;
    int c = a >> p & 1;
    int y = f[x][c];
    if (y == 0) f[x][c] = y = ++tot;
    insert(y, p - 1, a);
}

int find(int x, int p, int a) {
    if (p < 0) return 0;
    int c = a >> p & 1;
    if (f[x][c ^ 1]) return find(f[x][c ^ 1], p - 1, a) + (1 << p);
    else return find(f[x][c], p - 1, a);
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
	memset(first, 0, sizeof(first));
	tot = 0;
	int n;
	scanf("%d", &n);
	for (int i = 1; i < n; ++i) {
	    int x, y, s;
	    scanf("%d%d%d", &x, &y, &s);
	    addedge(x, y, s);
	    addedge(y, x, s);
	}
	bfs();
	memset(f, 0, sizeof(f));
	tot = ans = 0;
	for (int i = 1; i <= n; ++i) {
	    insert(0, 30, a[i]);
	    ans = max(find(0, 30, a[i]), ans);
	}
	printf("%d\n", ans);
    }
    return 0;
}

