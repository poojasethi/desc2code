#include<list>
#include<algorithm>
#include<vector>
#include<iostream>
#include<cmath>
#include<cstdio>
#include<cstdlib>
using namespace std;
#define MAX 30
int xor_sum[1000007];
bool visited[1000007];
void dfs(vector<pair<int,int> >*adj,int i,int temp)
{
visited[i]=true;
xor_sum[i]=temp;
for(int j=0;j<adj[i].size();j++)
if(!visited[adj[i][j].second])
dfs(adj,adj[i][j].second,temp^adj[i][j].first);
}

struct node
{
struct node *child[2];
};

struct node*getnode()
{
struct node *p=(struct node *)malloc(sizeof(struct node));
p->child[0]=p->child[1]=NULL;
return p;
}

struct node *root;
void ins(int *temp)
{
struct node *p=root;
for(int i=1;i<=MAX;i++)
{
if(!p->child[temp[i]])
p->child[temp[i]]=getnode();
p=p->child[temp[i]];
}
}

int find_sum(int *temp)
{
if(!root->child[0]&&!root->child[1])
return 0;
vector<int>ans;
struct node *p=root;
for(int i=1;i<=MAX;i++)
{
int x=(temp[i]+1)%2;
if(p->child[x])
{
ans.push_back(1);
p=p->child[x];
}
else
{
ans.push_back(0);
p=p->child[temp[i]];
}
}
reverse(ans.begin(),ans.end());
int sum=0;
for(int i=0;i<ans.size();i++)
sum=sum+(1<<i)*ans[i];
//cout<<sum<<endl;
return sum;
}

int func(vector<pair<int,int> >*adj,int n)
{
root=getnode();
fill(visited,visited+n+2,false);
dfs(adj,0,0);
int ans=-1;
int temp[34]={0},k=0;
for(int i=0;i<n;i++)
{
k=0;
fill(temp,temp+35,0);
int x=xor_sum[i];
while(x)
{
temp[MAX-k]=x%2;
x=x/2;
k++;
}
ans=max(ans,find_sum(temp));
//out<<"*"<<ans<<endl;
ins(temp);
}
return ans;
}

int main()
{
ios_base::sync_with_stdio(false);
int t;
cin>>t;
while(t--)
{
int n;
cin>>n;
vector<pair<int,int> >adj[n+2];
for(int i=1;i<n;i++)
{
int u,v,w;
cin>>u>>v>>w;
u--;
v--;
adj[u].push_back(make_pair(w,v));
adj[v].push_back(make_pair(w,u));
}
cout<<func(adj,n)<<endl;
}
return 0;
}
