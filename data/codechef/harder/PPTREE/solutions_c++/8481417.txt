#include <bits/stdc++.h>
using namespace std;

#define mod           1000000007
#define INF           (int)1e9
#define EPS           1e-9
#define LINF          (long long)1e18
#define maxn          100005
#define pb            push_back
#define mp            make_pair
#define F             first
#define S             second
#define sz(a)         int((a).size())
#define all(c)        (c).begin(),(c).end()
#define tr(c,i)       for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define trr(c,i)      for(typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); i++)
#define loop(i,a,b)   for(int (i)=(a);(i)<(b);(i)++)
#define rloop(i,a,b)  for(int (i)=(a);(i)>=(b);(i)--)
#define lc(x)         2*(x)+1
#define rc(x)         2*(x)+2  

typedef long long ll;
typedef pair<int,int> pi;
typedef pair<ll,ll> pl;
typedef vector<int> vi;
typedef vector<pi> vpi;
typedef vector<long long> vl;
typedef vector<pl> vpl;

template <typename X> void swap( X &a, X &b) {
    X tp;tp = a;a = b;b = tp;
}

inline ll input(void)
{
	char t;
	ll x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
    while(t>=48 && t<=57)
    {
        x=(x<<3)+(x<<1)+t-48;
        t=getchar();
    }
	if(neg)
		x=-x;
	return x;
}

inline void output(ll x)
{
	char a[20];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}

vector<pl> v[maxn];

ll P(int i) {
	return 1<<i;
}

ll S[maxn],nodes[32*maxn],leftc[32*maxn],rightc[32*maxn],unused,pow2[32];

struct node
{
	ll cnt;
	node* lc;
	node* rc;
};

node* top;

int cnto;
void insert(ll x)
{
	ll str[30],i,curr;
	for(i=29;i>=0;i--)
	{
		str[i]=x%2;
		x/=2;
	}
	//cout<<"insert\n";
	// for(i=0;i<30;i++)
	// {
	// 	cout<<str[i]<<" ";
	// }
	//cout<<"\n";
	curr=0;
	for(i=0;i<30;i++)
	{
		if (str[i]==0)
		{
			if (leftc[curr]==-1)
			{
				leftc[curr]=unused;
				unused++;
			}
			curr=leftc[curr];
			nodes[curr]++;
		}
		else
		{
			if (rightc[curr]==-1)
			{
				rightc[curr]=unused;
				unused++;
			}
			curr=rightc[curr];
			nodes[curr]++;
		}
	}
}

ll query(ll x)
{
	ll str[30],i,curr=0,ans=0;
	for(i=29;i>=0;i--)
	{
		str[i]=x%2;
		x/=2;
	}
	// for(i=0;i<30;i++)
	// {
	// 	cout<<str[i]<<" ";
	// }
	// cout<<"\n";
	for(i=0;i<30;i++)
	{
		if ((str[i]==0&&rightc[curr]!=-1)||(str[i]==1&&leftc[curr]==-1))
		{
			curr=rightc[curr];
			if (str[i]==0) ans+=pow2[29-i];
			//cout<<"ans="<<ans<<"\n";
		}
		else 
		{
			if (str[i]==1) ans+=pow2[29-i];
			curr=leftc[curr];
			//cout<<"ansi="<<ans<<"\n";
		}
	}
	return ans;
}

bool vis[maxn];

void dfs(int root,ll curr)
{
	S[root]=curr;
	vis[root]=true;
	loop(i,0,v[root].size())
	{
		pl z=v[root][i];
		if(!vis[z.F])
			dfs(z.F,curr^z.S);
	}
	return;
}

int main()
{
	ll n;
	int t;
	ll x,y,w;
	t=input();
	//top=NULL;
	pow2[0]=1;
	loop(i,1,32) pow2[i]=2*pow2[i-1];
	while(t--)
	{
		//c//nto=0;
		n=input();
		unused=1;
		loop(i,0,n)
		{
			S[i]=0;
			v[i].clear();
			vis[i]=false;
			nodes[i]=0;
		}
		loop(i,0,32*n)
		{
			leftc[i]=-1;
			rightc[i]=-1;
		}
		loop(i,0,n-1)
		{
			x=input();
			y=input();
			w=input();
			x--;y--;
			v[x].pb(mp(y,w));
			v[y].pb(mp(x,w));
		}
		//cout<<"input ok\n";
		dfs(0,0);
		//cout<<"dfs ok\n";
		ll maxi=0;
		nodes[0]=1;
		//loop(i,0,n) cout<<S[i]<<" ";
		//cout<<"\n";

		//insert(S[0],32,&top);
		//cout<<"s[0]="<<S[0]<<"\n";
		//getchar();
		insert(S[0]);
		//cout<<"insert ok\n";
		loop(i,1,n)
		{
			//ll q1=query(S[i],32,top);
			ll q1=query(S[i]);
		//	cout<<q1<<" ";
			maxi=max(maxi,q1);
			insert(S[i]);
		}
		output(maxi);
	}
	return 0;
}