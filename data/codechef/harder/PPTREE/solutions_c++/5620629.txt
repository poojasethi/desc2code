#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;

typedef long long ll;

class Node {
public:
	Node *left, *right;
	Node() {
		left = right = NULL;
	}
};

class Trie {
public:
	Node *root;
	void init() {
		root = new Node();
	}
	void insert(ll x) {
		Node *cur = root;
		for (int i = 31; i >= 0; i--) {
			if (x >> i & 1) {
				if (cur->right == NULL) cur->right = new Node();
				cur = cur->right;
			}
			else {
				if (cur->left == NULL) cur->left = new Node();
				cur = cur->left;
			}
		}
	}
	ll get(ll x) {
		ll ans = 0;
		Node *cur = root;
		for (int i = 31; i >= 0; i--) {
			if (x >> i & 1) {
				if (cur->left != NULL) cur = cur->left;
				else {
					ans |= (1ll << i);
					cur = cur->right;
				}
			}
			else {
				if (cur->right != NULL) {
					ans |= (1ll << i);
					cur = cur->right;
				}
				else {
					cur = cur->left;
				}
			}
		}
		return x^ans;
	}
};

vector<ll>v;
vector<pair<int, ll> >e[111111];

void dfs(int x = 1, int y = 0, ll d = 0) {
	v.push_back(d);
	for (size_t i = 0; i < e[x].size(); i++) {
		if (e[x][i].first != y) {
			dfs(e[x][i].first, x, d^e[x][i].second);
		}
	}
}

int main() {
	int t; scanf("%d", &t);
	while (t--) {
		int n; scanf("%d", &n);
		for (int i = 0; i < n + 1; i++) e[i].clear();
		for (int i = 0; i < n - 1; i++) {
			int u, v; ll w; scanf("%d%d%lld", &u, &v, &w);
			e[u].push_back(make_pair( v, w ));
			e[v].push_back(make_pair( u, w ));
		}
		v.clear(); dfs(); Trie T; T.init(); sort(v.begin(), v.end());
		ll ans = 0;
		for (size_t i = 0; i < v.size(); i++) {
			T.insert(v[i]);
			ans = max(ans, v[i]);
			if(i) ans = max(ans, T.get(v[i]));
		}
		
		printf("%lld\n", ans);
	}
}