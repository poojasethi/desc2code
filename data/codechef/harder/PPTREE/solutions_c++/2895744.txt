#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<vector>
#include<list>
#include<map>
#define inp(n) scanf("%d",&n);
#define inpl(n) scanf("%lld",&n);
#define out(n) printf("%d\n",n);
#define outl(n) printf("%lld\n",n);
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORR(i,b,a) for(int i=b-1;i>=a;i--)
#define PB(a) push_back(a)
using namespace std;
typedef vector< int > vi;
typedef pair< int,int > pii;
typedef vector< pii > vpii;
typedef list< int > li;
typedef list< pii > lpii;
struct trie
{
	trie *one;
	trie *zero;
};
vi s;
lpii *adj;
int fin;
bool visited[1000003];
void dfs(int source,int x)
{
	if(visited[source] == true)
		return;
	visited[source]=true;
	s.PB(x);
	int v,w;
	lpii :: iterator it;
	for(it=adj[source].begin();it!=adj[source].end();it++)
	{
		v=it->second;
		w=it->first;
		dfs(v,x^w);
	}
}
void create(trie *root,int index,int insert[])
{
//	cout<<num<<endl;
	if(index == 30)
	{
//		(root->count)++;
//		printf("yes3");
		return;
	}
	if((insert[index] & 1) == 0)
	{
		if((root->zero) != NULL)
			root=root->zero;
		else 
		{
			trie *temp;
			temp=new trie;
			temp->zero=NULL;
			temp->one=NULL;
			root->zero=temp;
			root=temp;
		}
	}
	else
	{
		if((root->one) != NULL)
			root=root->one;
		else 
		{
			trie *temp;
			temp=new trie;
			temp->zero=NULL;
			temp->one=NULL;
			root->one=temp;
			root=temp;
		}

	}
	create(root,index+1,insert);
}
void get(int insert[],trie *root)
{
	int p=pow(2,29),temp=0,c=0,index=0;
	while(index<30)
	{
		c++;
		if((insert[index]&1) == 1)
		{
			if((root->zero) != NULL)
			{
				temp+=p;
		//		printf("\tyes1\n");
				root=root->zero;
			}
			else
			{
		//		printf("\tyes2\n");
				root=root->one;
			}
		}
		else
		{
			if((root->one) != NULL)
			{
				temp+=p;
		//		printf("\tyes3\n");
				root=root->one;
			}
			else
			{
		//		printf("\tyes4\n");
				root=root->zero;
			}
			
		}
		//printf("%d %d %d %d\n",temp,insert[index],p,insert[index]&p);
		p/=2;
		index++;

	}
//	printf("\tyes = %d\n",temp);
	if(temp>fin)
		fin=temp;
}
main()
{
	int t,n,x,y,w,temp;
	int insert[40];
	adj=new lpii[1000003];
	inp(t);
	while(t--)
	{
		inp(n);
		s.clear();
		fin=0;
		trie *root;
		FOR(i,0,n+1){
		adj[i].clear();}
		FOR(i,0,n+1)
			visited[i]=false;
		FOR(i,0,n-1)
		{
			inp(x);
			inp(y);
			inp(w);
			adj[x].push_back(pii(w,y));
			adj[y].push_back(pii(w,x));
		}
		dfs(1,0);
		root=new trie;
		root->one=NULL;
		root->zero=NULL;
		fin=0;
//		FOR(i,0,n)
//			insert[i]=0;
//		create(root,0,insert);
		FOR(i,0,n)
		{
			temp=s[i];
			FORR(j,30,0){
				if(temp&1)
					insert[j]=1;
				else
					insert[j]=0;
				//cout<<insert[j]<<endl;
				temp=temp>>1;	
			}
		//	cout<<endl;
			if(i == 0)
				create(root,0,insert);
			else
			{
		//		cout<<s[i]<<endl;
		//		FOR(j,0,30){
		//			cout<<insert[j];	
		//		}
				get(insert,root);
				create(root,0,insert);
			}
			
		}
//		printf("yes\n")	;
/*		FOR(i,0,n)
		{
			temp=s[i];
			FORR(j,30,0){
				if(temp&1)
					insert[j]=1;
				else
					insert[j]=0;
				//cout<<insert[j]<<endl;
				temp=temp>>1;	
			}
			get(insert,root);
		}*/
		printf("%d\n",fin);
	}
	return 0;
}