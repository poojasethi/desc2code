#include <bits/stdc++.h>

using namespace std;

vector < pair<int,int> > v[100005];
int val[100005];
int tot;

void dfs(int curr, int prev)
{
    for ( int i = 0; i < v[curr].size(); i++ ) {
        if ( v[curr][i].first == prev ) continue;
        val[v[curr][i].first] = val[curr]^v[curr][i].second;
        dfs(v[curr][i].first, curr);
    }
}

struct trie {
    int pos[2];
    trie() {
        pos[0] = pos[1] = -1;
    }
}tree[100005*31];

void insert(int idx, int x, int where)
{
    if ( idx == -1 ) return;
    int bit_set = ((x&(1<<idx)) > 0);
    if ( tree[where].pos[bit_set] == -1 ) {
        tot++;
        tree[where].pos[bit_set] = tot;
    }
    insert(idx-1, x, tree[where].pos[bit_set]);
}

void insert(int x)
{
    insert(29,x,0);
    return;
}

int query(int idx, int x, int where)
{
    if ( idx == -1 ) return 0;
    int set_bit = ((x&(1<<idx)) > 0);
    if ( tree[where].pos[set_bit^1] != -1 ) return (1<<idx) + query(idx-1, x, tree[where].pos[set_bit^1]);
    else return query(idx-1, x, tree[where].pos[set_bit]);
}

int query(int x)
{
    return query(29,x,0);
}

int main()
{
    int t,n,x,y,z;
    cin >> t;
    while ( t-- ) {
        cin >> n;
        for ( int i = 1; i <= n; i++ ) v[i].clear();
        for ( int i = 0; i < n*31; i++ ) tree[i] = trie();
        tot = 0;
        for ( int i = 0; i < n-1; i++ ) {
            cin >> x >> y >> z;
            v[x].push_back(make_pair(y,z));
            v[y].push_back(make_pair(x,z));
        }
        dfs(1,0);
        int ans = 0;
        for ( int i = 1; i <= n; i++ ) {
            insert(val[i]);
            ans = max(ans, query(val[i]));
        }
        cout << ans << endl;
    }
    return 0;
}
