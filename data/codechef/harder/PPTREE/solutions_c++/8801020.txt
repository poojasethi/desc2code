#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 500005
#define ln 1000000001
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define pii pair < pair <int, int>, int >
#define pi pair < int, pair <int, int> >
#define Pa pair < int , int >

using namespace std;

vector <Pa> a[N];
int D[N], n;

struct node
{
    node *son[2];
};

typedef node *Node;

Node root;

Node Make_node()
{
    Node p = new node();
    p -> son[0] = p -> son[1] = NULL;
    return p;
}

void Up(int x)
{
    Node p = root;
    for(int i=29; i>=0; i--)
    {
        int u = BIT(i, x);
        if(p -> son[u] == NULL) p -> son[u] = Make_node();
        p = p -> son[u];
    }
}

int Get(int x)
{
    int r = 0 ;
    Node p = root;
    for(int i=29; i>=0; i--)
    {
        int u = 1 - BIT(i, x);
        if(p -> son[u] != NULL)
        {
            p = p -> son[u];
            r |= (1 << i);
        }
        else
            p = p -> son[1-u];
    }
    return r;
}

void DFS(int u, int pre)
{
    for(int i=0; i<a[u].size(); i++)
    {
        int v = a[u][i].f;
        int w = a[u][i].s;
        if(v == pre)    continue;
        D[v] = D[u] ^ w;
        Up(D[v]);
        DFS(v, u);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    //filein("PPTREE.inp");   fileout("PPTREE.out");
    int T, u, v, w;
    cin >> T;
    while(T--)
    {
        int ans = 0;
        root = Make_node();
        cin >> n;
        for(int i=1; i<=n; i++) a[i].clear();
        for(int i=1; i<n; i++)
        {
            cin >> u >> v >> w;
            a[u].push_back(mp(v, w));
            a[v].push_back(mp(u, w));
        }
        DFS(1, 0);
        for(int i=1; i<=n; i++)
            ans = max(ans, Get(D[i]));
        cout << ans << endl;
    }
}
