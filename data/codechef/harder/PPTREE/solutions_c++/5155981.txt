#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<ctime>
#include<map>
#include<string>
#include<vector>
#include<set>

using namespace std;
#define For(i,l,r) for (int i = l; i <= r; ++i)
#define Cor(i,l,r) for (int i = l; i >= r; --i)
#define Fill(a,b) memset(a,b,sizeof(a))
#define FI first
#define SE second
#define MP make_pair
#define PII pair<int,int>
#define flt double
#define INF (0x3f3f3f3f)
#define MaxN 1020304
#define MaxNode 1020304
#define MD 1000000007

int getInt() {
	int t; scanf("%d", &t); 
	return t;
}

int v[MaxN], next[MaxN], h[MaxN], tot;
int w[MaxN];
void add(int b, int e, int wei) {
	v[++tot] = e; next[tot] = h[b]; h[b] = tot;
	v[++tot] = b; next[tot] = h[e]; h[e] = tot;
	w[tot] = w[tot - 1] = wei;
}

int ch[MaxN * 4][2];
int id = 0;
void ins(int t, int a, int d) {
	if (d < 0) return ;
	int c = (a >> d) & 1;
	if (ch[t][c] == 0) {
		++id; 
		ch[t][c] = id;
		ch[id][0] = ch[id][1] = 0;
	}
	ins(ch[t][c], a, d - 1);
}

int find(int t, int a, int d) {
	if (d < 0) return 0;
	int c = (a >> d) & 1;
	if (ch[t][!c]) return find(ch[t][!c], a, d - 1) + (1 << d);
	return find(ch[t][c], a, d - 1);
}

int vis[MaxN], q[MaxN], xsum[MaxN];
int main() {
	//freopen("input.txt","r",stdin); //freopen("output.txt","w",stdout);
	int T = getInt();
	For(TTT,1,T) {
		int n = getInt();
		memset(h, 0, sizeof(h[0]) * (n + 10));
		tot = 0;
		For(i,1,n - 1) {
			int b = getInt(), e = getInt(), wei = getInt();
			add(b,e,wei);
		}
		int hd = 0, tl = 1;
		memset(vis, 0, sizeof(vis[0]) * (n + 10));
		vis[q[1] = 1] = true; xsum[1] = 0;
		while (hd < tl) {
			int vex = q[++hd];
			for (int z = h[vex]; z; z = next[z]) if (!vis[v[z]]) {
				vis[q[++tl] = v[z]] = true;
				xsum[v[z]] = xsum[vex] ^ w[z];
			}
		}
		id = 1;
		ch[1][0] = ch[1][1] = 0;
		int ans = 0;
		int ans2 = 0;
		For(i,1,n) {
			if (i > 1) {
				ans = max(ans, find(1, xsum[i], 30));
			}
			ins(1, xsum[i], 30);
		}
		//cout << id << endl;
		cout << ans << endl;
		//For(i,1,n) For(j,i + 1, n) ans2 = max(ans2, xsum[i] ^ xsum[j]);
		//if (ans != ans2) {
		//	puts("WA"); while(1);
		//}
	}
	return 0;
}

