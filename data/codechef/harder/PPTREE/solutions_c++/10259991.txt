#include<iostream>
#include<vector>
using namespace std;

struct node{
	vector<pair<int,int> > adj_list;
};
node graph[100001];
int s[100001];

void dfs(int u,int p,int x){
	s[u]=x;
	for(int i=0;i<graph[u].adj_list.size();i++){
		int v=graph[u].adj_list[i].first;
		int w=graph[u].adj_list[i].second;
		if(v==p)
			continue;
		dfs(v,u,x^w);
	}
}

struct trie{
	trie *left;
	trie *right;
	trie():left(NULL),right(NULL){};
};

void insert(trie *root,int x,int level){
	trie *ptr=root;
	for(int i=level;i>=0;i--){
		int p=(x>>i)&1;
		if(p){
			if(ptr->right==NULL)
				ptr->right=new trie();
			ptr=ptr->right;
		}
		else{
			if(ptr->left==NULL)
				ptr->left=new trie();
			ptr=ptr->left;
		}
	}
}

int query(trie *root,int x,int level){
	trie *ptr=root;
	int ans=0;
	for(int i=level;i>=0;i--){
		int p=(x>>i)&1;
		if(p){
			if(ptr->left!=NULL){
				ans|=(1<<i);
				ptr=ptr->left;
			}
			else
				ptr=ptr->right;
		}
		else{
			if(ptr->right!=NULL){
				ans|=(1<<i);
				ptr=ptr->right;
			}	
			else
				ptr=ptr->left;
		}
	}

	return ans;
}




int main(){
	int t,n,u,v,w;
	cin>>t;
	while(t--){
		cin>>n;
		for(int i=0;i<=n;i++)
			graph[i].adj_list.clear();

		for(int i=0;i<n-1;i++){
			cin>>u>>v>>w;
			graph[u].adj_list.push_back(make_pair(v,w));
			graph[v].adj_list.push_back(make_pair(u,w));
		}

		dfs(1,0,0);
		trie * root =new trie();
		insert(root,0,31);
		int ans=0;
		for(int i=1;i<=n;i++){
			ans=max(ans,query(root,s[i],31));
			insert(root,s[i],31);
		}
		cout<<ans<<endl;
	}
	return 0;
}




	

	
