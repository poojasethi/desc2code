//#undef _GLIBCXX_DEBUG

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <valarray>
#include <vector>

using namespace std;

#define foreach(iter,cont) for(typeof((cont).begin()) iter = (cont).begin(); iter != (cont).end(); ++iter)
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define inf 1000000008
#define eps 1.0e-10L
#define divisible(a, b) (((a) / (b)) * (b) == (a))
//static const long long p = 1000000007;
__attribute__((unused)) static bool eq(long double a, long double b)  { return (a == b ? true : (a * b == 0 ? abs(a - b) < eps : abs(a - b) / (abs(a) + abs(b)) < eps));  }
__attribute__((unused)) static long long modp(long long n, long long m) { long long r = n % m; return r >= 0 ? r : r + m; }
__attribute__((unused)) static long long gcd(long long a, long long b) { return (a < 0 ? gcd(-a, b) : (b < 0 ? gcd(a, -b) : (!a && !b ? 1 : (b ? gcd(b, a % b) : a)))); }
template<class T> static int len(const T& cont) { return (int) cont.size(); }

// BEGIN CUT HERE
template<class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) { return os << "(" << p.first << ", " << p.second << ")"; }
template<class T> ostream &operator<<(ostream& os, const vector<T> &vec) { os << "[ "; for(size_t i = 0; i < vec.size(); i++) { os << vec[i]; if(i != vec.size() - 1) { os << ", "; } } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const list<T> &l) { os << "[ "; bool first = true; for(typename list<T>::const_iterator lstIt = l.begin(); lstIt != l.end(); ++lstIt) { if(!first) { os << ", "; } first = false; os << *lstIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const deque<T> &d) { os << "[ "; bool first = true; for(typename deque<T>::const_iterator dIt = d.begin(); dIt != d.end(); ++dIt) { if(!first) { os << ", "; } first = false; os << *dIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const vector<vector<T> > &mat) { for(size_t i = 0; i < mat.size(); i++) { if(i) os << endl; os << mat[i]; } return os; }
template<class T> ostream &operator<<(ostream &os, const set<T> &s) { os << "{ "; bool first = true; for(typename set<T>::const_iterator setIt = s.begin(); setIt != s.end(); ++setIt) { if(!first) { os << ", "; } first = false; os << *setIt; } return os << " }"; }
template<class T, class U> ostream &operator<<(ostream &os, const map<T, U> &m) { os << "{ "; bool first = true; for(typename map<T, U>::const_iterator mapIt = m.begin(); mapIt != m.end(); ++mapIt) { if(!first) { os << ", "; } first = false; os << mapIt->first << " = " << mapIt->second; } return os << " }"; }
enum CONSOLE_FG { FG_BLACK, FG_RED, FG_GREEN, FG_YELLOW, FG_BLUE, FG_MAGENTA, FG_CYAN, FG_WHITE };
enum CONSOLE_STYLE { STYLE_NONE, STYLE_BOLD };
ostream& operator<<(ostream &os, CONSOLE_FG color) { return os << "\x1b[" << ((int) color + 30) << "m"; }
ostream& operator<<(ostream &os, CONSOLE_STYLE style) { return os << "\x1b[" << (style == STYLE_NONE ? 0 : 1) << "m"; }
// END CUT HERE

int t, n, s[100000];
vector<vector<pair<int, int> > > edges;

void dfs(int u, int curXor = 0, int prev = -1) {
	s[u] = curXor;

	for(int i = 0; i < len(edges[u]); i++) {
		if(edges[u][i].first != prev) {
			dfs(edges[u][i].first, curXor ^ edges[u][i].second, u);
		}
	}
}

struct TreeNode {
	TreeNode() : l(NULL), r(NULL) { }

	TreeNode *l, *r;
};

void insert(int bitNum, int val, TreeNode *cur) {
	if(bitNum < 0) {
		return;
	}

	bool on = val & (1 << bitNum);

	if(on && !cur->l) {
		cur->l = new TreeNode();
	}
	if(!on && !cur->r) {
		cur->r = new TreeNode();
	}

	insert(bitNum - 1, val, on ? cur->l : cur->r);
}

void enumerate(TreeNode *cur, const string &str) {
	if(!cur->l && !cur->r) {
		cout << str << endl;
		return;
	}

	if(cur->l) {
		enumerate(cur->l, str + "1");
	}

	if(cur->r) {
		enumerate(cur->r, str + "0");
	}
}

int maximumXor(int v, TreeNode *cur, int curBit) {
	if(curBit < 0) {
		return 0;
	}

	bool curOn = v & (1 << curBit);
	if((curOn && cur->r) || (!curOn && cur->l)) {
		return (1 << curBit) | maximumXor(v, curOn ? cur->r : cur->l, curBit - 1);
	} else {
		return maximumXor(v, curOn ? cur->l : cur->r, curBit - 1);
	}
}


int main(__attribute__((unused)) int argc, __attribute__((unused)) char **argv) {
	scanf("%d", &t);
	while(t--) {
		scanf("%d", &n);

		edges.assign(n, vector<pair<int, int> >());
		for(int i = 0; i < n - 1; i++) {
			int u, v, w;
			scanf("%d %d %d", &u, &v, &w);
			edges[u - 1].push_back(make_pair(v - 1, w));
			edges[v - 1].push_back(make_pair(u - 1, w));
		}

		dfs(0);

		TreeNode *root = new TreeNode();
		for(int i = 0; i < n; i++) {
			insert(31, s[i], root);
		}

#ifdef DEBUG
		enumerate(root, "");
		cout << endl;
#endif

		int ans = 0;
		for(int i = 0; i < n; i++) {
			ans = max(ans, maximumXor(s[i], root, 31));
		}
		printf("%d\n", ans);
	}
	
	return 0;
}
