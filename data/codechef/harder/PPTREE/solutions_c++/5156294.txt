#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std ;

const int maxn = 1000001 ;
int c[2][maxn*3] ;
int ntot ;

int new_node () {
	c[0][ntot] = c[1][ntot] = 0 ;
	return ntot ++ ;
}

void insert ( int a ) {
	int now = 0 ;
	for ( int i = 30 ; i >= 0 ; i -- ) {
		int k = (a>>i)&1 ;
		if ( !c[k][now] ) c[k][now] = new_node () ;
		now = c[k][now] ;
	}
}


int find ( int a ) {
	int now = 0 ;
	int ans = 0 ;
	for ( int i = 30 ; i >= 0 ; i -- ) {
		 int k = (a>>i)&1 ;
		 if ( c[!k][now] ) {
			 ans += 1<<i ;
			 now = c[!k][now] ;
		 } else now = c[k][now] ;
	}
	return ans ;
}

struct Edge {
	int t , next , w ;
} edge[maxn] ;
int head[maxn] , tot ;

void new_edge ( int a , int b , int c ) {
	edge[tot].t = b ;
	edge[tot].w = c ;
	edge[tot].next = head[a] ;
	head[a] = tot ++ ;
}

void init () {
	tot = ntot = 0 ;
	memset ( head , -1 , sizeof ( head ) ) ;
	new_node () ;
}
int a[maxn] ;

void dfs ( int u , int fa ) {
	for ( int i = head[u] ; i != -1 ; i = edge[i].next ) {
		int v = edge[i].t ;
		if ( v == fa ) continue ;
		a[v] = a[u] ^ edge[i].w ;
		dfs ( v , u ) ;
	}
}

int main () {
	int T ;
	scanf ( "%d" , &T ) ;
	while ( T -- ) {
		init () ;
		int n ;
		scanf ( "%d" , &n ) ;
		for ( int i = 1 ; i < n ; i ++ ) {
			int a , b , c ;
			scanf ( "%d%d%d" , &a , &b , &c ) ;
			new_edge ( a , b , c ) ;
			new_edge ( b , a , c ) ;
		}
		a[1] = 0 ;
		dfs ( 1 , 0 ) ;
		int ans = 0 ;
		for ( int i = 1 ; i <= n ; i ++ )
			insert ( a[i] ) ;
		for ( int i = 1 ; i <= n ; i ++ )
			ans = max ( ans , find ( a[i] ) ) ;
		printf ( "%d\n" , ans ) ;
	}
	return 0 ;
}
