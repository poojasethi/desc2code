#define TRACE
#define DEBUG
 
#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
 
using namespace std;
 
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
typedef vector<string> vs;
 
// Basic macros
#define st          first
#define se          second
#define all(x)      (x).begin(), (x).end()
#define ini(a, v)   memset(a, v, sizeof(a))
#define re(i,s,n)  	for(int i=s;i<(n);++i)
#define rep(i,s,n)  for(int i=s;i<=(n);++i)
#define fr(i,n)     re(i,0,n)
#define tr(i,x)     for(typeof(x.begin()) i=x.begin();i!=x.end();++i)
#define pu          push_back
#define mp          make_pair
#define sz(x)       (int)(x.size())
 
const int oo = 2000000009;
const double eps = 1e-9;
 
#ifdef TRACE
    #define trace1(x)                cerr << #x << ": " << x << endl;
    #define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
    #define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
    #define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
    #define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
    #define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;
 
#else
 
    #define trace1(x)
    #define trace2(x, y)
    #define trace3(x, y, z)
    #define trace4(a, b, c, d)
    #define trace5(a, b, c, d, e)
    #define trace6(a, b, c, d, e, f)
 
#endif
 
const int mx = 100005;
int n;
vector<pi> edge[mx];
int start[mx], end[mx];
int a[2 * mx];
 
struct Trie {
    Trie *nxt[2];
    Trie() {
        nxt[0] = nxt[1] = NULL;
    }
 
    ~Trie() {
        fr(i, 2) if(nxt[i] != NULL) delete nxt[i];
    }
} *root;
 
int tim;
void dfs(int x, int w) {
    if(start[x] != 0) return;
    start[x] = tim++;
    a[start[x]] = w;
 
    fr(i, sz(edge[x])) {
        dfs(edge[x][i].st, edge[x][i].se);
    }
 
    end[x] = tim++;
    a[end[x]] = w;
}
 
void insert_num(int num) {
    Trie *cur = root;
    for(int i = 30; i >= 0; --i) {
        int b = ((num & (1 << i)) > 0);
        if(cur->nxt[b] == NULL) cur->nxt[b] = new Trie();
        cur = cur->nxt[b];
    }
}
 
int get(int with) {
    Trie *cur = root;
    int ans = 0;
 
    for(int i = 30; i >= 0; --i) {
        int b = ((with & (1 << i)) > 0);
        if(cur->nxt[1 - b] != NULL) {
            ans |= (1 << i);
            cur = cur->nxt[1 - b];
        } else {
            cur = cur->nxt[b];
        }
    }
 
    return ans;
}
 
 
int main() {
    int t;
    scanf("%d", &t);
    while(t--) {
        scanf("%d", &n);
        fr(i, n - 1) {
            int a, b, w;
            scanf("%d %d %d", &a, &b, &w);
            --a; --b;
            edge[a].pu(mp(b, w));
            edge[b].pu(mp(a, w));
        }
 
        ini(start, 0);
        tim = 1;
        dfs(0, 0);
 
        root = new Trie();
        int cur = 0, ans = 0;
        insert_num(0);
        fr(i, tim) {
            //trace2(i, a[i]);
            cur ^= a[i];
            ans = max(ans, get(cur));
            insert_num(cur);
        }
 
        printf("%d\n", ans);
        fr(i, n) edge[i].clear();
        delete root;
    }
    
	return 0;
}