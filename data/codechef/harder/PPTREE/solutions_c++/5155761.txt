#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXN = 100005;
const int M = 30;
const int N = 2;
struct Node {
    Node* ch[N];
    Node () {
        for (int i = 0; i < N; i++) ch[i] = NULL;
    }
};
struct Edge {
    int v, c;
    Edge() {}
    Edge(int a, int b):v(a), c(b) {}
};
int solve(int arr[], int n) {
    Node* root = new Node();
    int ret = 0;
    for (int i = 1; i <= n; i++) {
        int x = arr[i], tmp = 0;
        Node* p = root;
        for (int j = M; j >= 0; j--) {
            int d = x >> j & 1;
            if (p->ch[d] == NULL && p->ch[d^1] == NULL) break;
            if (p->ch[d^1]) {
                tmp += 1 << j;
            }else {
                d ^= 1;
            }
            p = p->ch[d^1];
        }
        ret = max(ret, tmp);
        p = root;
        for (int j = M; j >= 0; j--) {
            int d = x >> j & 1;
            if (!p->ch[d]) {
                p->ch[d] = new Node();
            }
            p = p->ch[d];
        }
    }
    printf("%d\n", ret);
}
vector<Edge> G[MAXN];
int n;
int val[MAXN];
void dfs(int u, int fa, int now) {
    val[u] = now;
    for (int i = 0; i < G[u].size(); i++) {
        int v = G[u][i].v;
        if (v == fa) continue;
        dfs(v, u, G[u][i].c ^ now);
    }
    return ;
}

int main() {
    int T;
    scanf("%d", &T);
    for (int cas = 1; cas <= T; cas++) {
        scanf("%d", &n);
        for (int i = 1; i <= n; i++) G[i].clear();
        for (int i = 1; i < n; i++) {
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            G[a].push_back(Edge(b, c));
            G[b].push_back(Edge(a, c));
        }
        dfs(1, 0, 0);
        solve(val, n);
    }
    return 0;
}

