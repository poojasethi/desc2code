#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <cctype>
using namespace std;
typedef long long LL;
const int N = 100005;
const int M = 3000005;
int n , pre[N] , mcnt;
struct edge {
    int x , w , next;
}e[N << 1];
int cnt , u[M][2] , ans;

void insert(int val) {
    int x = 1 , i , c;
    for (i = 29 ; i >= 0 ; -- i) {
        c = val >> i & 1;
        if (!u[x][c]) {
            u[x][c] = ++ cnt;
            u[cnt][0] = u[cnt][1] = 0;
        }
        x = u[x][c];
    }
}
int get(int val) {
    int x = 1 , i , res = 0 , c;
    for (i = 29 ; i >= 0 ; -- i) {
        c = val >> i & 1;
        if (u[x][!c])
            c = !c , res |= 1 << i;
        x = u[x][c];
    }
    return res;
}

void dfs(int x , int fa , int val) {
    ans = max(ans , get(val)); insert(val);
    for (int i = pre[x] ; ~i ; i = e[i].next) {
        int y = e[i].x;
        if (y != fa) {
            dfs(y , x , val ^ e[i].w);
        }
    }
}

void work() {
    int i , x , y , w;
    scanf("%d",&n);
    memset(pre , -1 , sizeof(pre)) , mcnt = 0;
    for (i = 1 ; i < n ; ++ i) {
        scanf("%d%d%d",&x,&y,&w);
        e[mcnt] = (edge) {y , w , pre[x]} , pre[x] = mcnt ++;
        e[mcnt] = (edge) {x , w , pre[y]} , pre[y] = mcnt ++;
    }
    ans = 0 , cnt = 1 , u[1][0] = u[1][1] = 0;
    dfs(1 , 0 , 0);
    cout << ans << endl;
}

int main() {
    int _; scanf("%d",&_); while (_ --)
        work();
    return 0;
}

