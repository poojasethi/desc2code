#include <bits/stdc++.h>
using namespace std;

const int MaxN = 222222;

typedef pair<int, int> pii;

vector<pii> edges[MaxN];
int fa[MaxN];
int xorsum[MaxN];

void dfs(int u) {
	for (vector<pii> :: iterator it = edges[u].begin(); it != edges[u].end(); ++it) {
		if (fa[u] == it->first) continue;
		xorsum[it->first] = xorsum[u] ^ it->second;
		fa[it->first] = u;
		dfs(it->first);
	}
}
/*
int gauss(int *a, int n) {
	for (int row = 0, k = 31; k >= 0; --k) {
	
		int find = -1;
		for (int x = row; x < n; ++x) if (a[x] >> k & 1) {
			find = x;
		}
		if (find == -1) continue;
		if (find != row) swap(a[find], a[row]);
		for (int x = row+1; x < n; ++x) {
			if (a[x] >> k & 1) a[x] ^= a[row];
		}
	}
	int ans = 0;
	
	for (int i = 0; i < n; ++i) {
		ans = max(ans, a[i] ^ ans);	
	}
	return ans;
}*/
int tot = 0;
struct Node {
	Node *next[2];
} arr[MaxN*33], *root;
Node *newNode() {
	Node *x = &arr[tot++];
	memset(x->next, 0, sizeof x->next);
	return x;
}
void insert(int x) {
	Node *now = root;
	for (int i = 31; i >= 0; --i) {
		int c = (x >> i & 1);
		if (!now->next[c]) now->next[c] = newNode();
		now = now->next[c];
	}
}
int ask(int x) {
	Node *now = root;
	int ans = 0;
	for (int i = 31; i >= 0; --i) {
		int c = (x >> i & 1);
		if (now->next[!c]) {
			ans ^= (1<<i);
			now = now->next[!c];
		} else {
			now = now->next[c];
		}
	}
	return ans;
}
int main() {

	//freopen("Ain","r",stdin);

	int cases; scanf("%d", &cases);
//	printf("%d\n", cases);
	while (cases--) {
		int n = 0;
		scanf("%d", &n);
		for (int i = 0; i < n; ++i) edges[i].clear();
		for (int i = 1; i < n; ++i) {
			int u, v, w; scanf("%d %d %d", &u, &v, &w);
			--u; --v;
			edges[u].push_back(pii(v, w));
			edges[v].push_back(pii(u, w));
		}
		fa[0] = -1; dfs(0);
		
		tot = 0;
		root = newNode();
		for (int i = 0; i < n; ++i) insert(xorsum[i]);
		
		int ans = 0;
		for (int i = 0; i < n; ++i) {
			ans = max(ans, ask(xorsum[i]));
		}
		printf("%d\n", ans);
	}

	return 0;
}
