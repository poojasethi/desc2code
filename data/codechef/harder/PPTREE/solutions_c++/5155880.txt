#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>

using namespace std;

struct TNODE
{
	TNODE* child[2];
};

TNODE TPool[3333333];
TNODE* TPTop = TPool;
TNODE* Root = NULL;

typedef pair<int,int> pii;
vector<pii> edges[111111];
unsigned int summie[111111];
bool vis[111111];

int trie_insert(unsigned int num)
{
	TNODE* cur = Root;
	for(int i = 30;i >= 0;i--)
	{
		int bit = (num >> i) & 1;
		if(!cur->child[bit])
		{
			cur->child[bit] = TPTop++;
			memset(cur->child[bit],0,sizeof(TNODE));
		}
		cur = cur->child[bit];
	}
	return 0;
}

unsigned int trie_lolz(unsigned int num)
{
	TNODE* cur = Root;
	unsigned int ans = 0;
	for(int i = 30;i >= 0;i--)
	{
		int bit = (num >> i) & 1;
		TNODE* gone = cur->child[bit^1];
		if(gone) ans ^= (1u << i);
		else gone = cur->child[bit];
		cur = gone;
	}
	return ans;
}

int main(void)
{
	int T = 0;
	scanf("%d",&T);
	while(T--)
	{
		int N = 0;
		scanf("%d",&N);
		for(int i = 0;i < N;i++) edges[i].clear();
		for(int i = 0;i < N-1;i++)
		{
			int x = 0;
			int y = 0;
			int w = 0;
			scanf("%d %d %d",&x,&y,&w); x--; y--;
			edges[x].push_back(pii(y,w));
			edges[y].push_back(pii(x,w));
		}
		memset(summie,0,sizeof(summie[0])*(N+10));
		memset(vis,0,sizeof(vis[0])*(N+10));
		{
			static int que[111111];
			int front = 0;
			int end = 0;
			que[end++] = 0; vis[0] = true;
			while(front < end)
			{
				int x = que[front++];
				for(vector<pii>::iterator it = edges[x].begin();it != edges[x].end();++it)
				{
					int y = it->first;
					int w = it->second;
					if(!vis[y])
					{
						summie[y] = summie[x] ^ w;
						que[end++] = y;
						vis[y] = true;
					}
				}
			}
		}

		TPTop = TPool;
		Root = TPTop++;
		memset(Root,0,sizeof(TNODE));
		trie_insert(summie[0]);
		unsigned int ans = 0;
		for(int i = 1;i < N;i++)
		{
			ans = max(ans,trie_lolz(summie[i]));;
			trie_insert(summie[i]);
		}
		printf("%u\n",ans);
	}
	while(getchar() != EOF);
	return 0;
}
