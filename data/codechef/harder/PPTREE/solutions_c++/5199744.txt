#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<cstring>

using namespace std;
#define maxn 100100
#define fr first
#define se second

typedef pair<int,long long> ii;
typedef long long ll;

vector<pair<int,int> > graph[maxn];
int visited[maxn],dis[maxn];
int trie[maxn*31][2],cnt;

void init(int n)
{
	int lim = n;
	for(int i=0;i<lim;i++)
	{
		graph[i].clear();
		visited[i]=0;
		dis[i]=0;
	}
  lim = maxn*31;
	cnt=0;
	for(int i=0;i<lim;i++)
	trie[i][0]=trie[i][1]=-1;
}

void dfs(int node)
{
	visited[node]=1;
	for(int i=0;i<graph[node].size();i++)
	{
		int child = graph[node][i].fr;
		if(visited[child]==0)
		{//cout<<"ut";
			dis[child] = graph[node][i].se ^ dis[node] ;
			dfs(child);
		}
	}
}

void add(int node , int d , int v)
{
	if(d==30)
	return ;
	int p = 29-d;
	int c = (v&(1<<p)) ? 1:0;
	if(trie[node][c]==-1) trie[node][c]=++cnt;
	add(trie[node][c] , d+1,v);
}

int query(int node ,int d ,int v)
{
	if(d==30)
	return 0;
	int p = 29-d;
	int c = (v&(1<<p)) ?	0:1;
	if(trie[node][c]!=-1)
	return (1<<p) + query(trie[node][c] , d+1,v);
	else
	return query(trie[node][!c] , d+1,v);
}

int main()
{
	int tc;
	scanf("%d",&tc);
	while(tc--)
	{
		int n,a,b,w;
		scanf("%d",&n);
		init(n);
		for(int i=1;i<n;i++)
		{
			scanf("%d %d %d",&a,&b,&w);
			graph[a-1].push_back(ii(b-1,w));
			graph[b-1].push_back(ii(a-1,w));
		}
		/*for(int i=0;i<n;i++)
		{
			for(int j=0;j<graph[i].size();j++)
			cout<<"("<<graph[i][j].fr<<" "<<graph[i][j].se<<")"<< " ";
			cout<<endl;
		}*/
	
		dfs(0);
		
		for(int i=0;i<n;i++)
		add(0,0,dis[i]);
	
		int ans=0;	
		for(int i=0;i<n;i++)
		ans = max(ans , query(0,0,dis[i]));
		
		printf("%d\n",ans);
	}
	return 0;
}