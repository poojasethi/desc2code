#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
using namespace std;
const int maxn = 100010;

struct edge
{
    int v,next,w;
}g[maxn<<1];
int head[maxn],e;
void add(int u,int v,int w)
{
    g[e].v=v;
    g[e].w=w;
    g[e].next=head[u];
    head[u]=e++;
}
int ans;
int ch[31*maxn][2];
int tot;
void init()
{
	e=0;
	memset(head,-1,sizeof(head));
	tot=1;
	for(int i=0;i<2;i++) ch[0][i]=0;
}
int new_node()
{
	for(int i=0;i<2;i++) ch[tot][i]=0;
	return tot++;
}
void insert(int v)
{
	int p=0;
	for(int i=29;i>=0;i--)
	{
		int c = v >> i & 1;
		if(!ch[p][c])
			ch[p][c]=new_node();
		p=ch[p][c];
	}
}
int query(int v)
{
	int p=0;
	int ret = 0;
	for(int i=29;i>=0;i--)
	{
		int c = v >> i & 1;
		if(ch[p][!c])
		{
			c=!c;
			ret |= 1<<i;
		}
		p=ch[p][c];
	}
	return ret;
}
void dfs(int u,int p,int val)
{
	ans = max(ans,query(val));
	insert(val);
	for(int i=head[u];i!=-1;i=g[i].next)
	{
		int v=g[i].v;
		int w=g[i].w;
		if(v==p) continue;
		dfs(v,u,val^w);
	}
}
int main()
{
	int T;
	//printf("%d\n",(1<<31)-1);
	scanf("%d",&T);
	while(T--)
	{
		int n;
		scanf("%d",&n);
		init();
		for(int i=1;i<n;i++)
		{
			int u,v,w;
			scanf("%d %d %d",&u,&v,&w);
			add(u,v,w);
			add(v,u,w);
		}
		ans = 0;
		dfs(1,-1,0);
		printf("%d\n",ans);
	}
	return 0;
}

