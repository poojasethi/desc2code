#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
#include<map>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
    int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
    if(c=='-')sg=-1,x=0;else x=c-'0';
    while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
    x*=sg;
}
void gn(ll &x){
    int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
    if(c=='-')sg=-1,x=0;else x=c-'0';
    while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
    x*=sg;
}
const int mo=1000000007;
int qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}

#define eps 1e-6
int n,x;
struct node{
	int c,m;
}a[11];
int cmp(const node&a,const node&b){
	return a.m>b.m;
}
db mi;

//map<int,bool>ma;

int ma[1001003];
int cnt[11];
void dfs(db C,db M){
	if(M>666-eps){
		mi=min(mi,C);
		return;
	}
	if(C>=mi)return;
	db su=M;
	int st=0;
	db rami=1e20;
	for (int i=1;i<=n;i++){
		st=st*10007+cnt[i];
		if(cnt[i]==-1){
			su+=a[i].m;
			rami=min(rami,1.0*a[i].c/a[i].m);
		}
	}
	st=((st%1001003)+1001003)%1001003;
	if(ma[st])return;
	ma[st]=1;
	if(su<666-eps)return;
	if(C+(666-M)*rami>mi)return;

	for (int i=1;i<=n;i++)if(cnt[i]==-1){
		int can=M/x;
		db mm=a[i].m,cc=a[i].c;
		for (int k=0;k<=can;k++,mm/=3.0,cc/=3.0){
			if(mm<k*x)break;
			cnt[i]=k;
			dfs(C+cc,M-k*x+mm);
			cnt[i]=-1;
		}
	}
}
int main()
{
	int tes;
	gn(tes);
	while(tes--){
		memset(cnt,-1,sizeof(cnt));
		//ma.clear();
		memset(ma,0,sizeof(ma));
		gn(n);gn(x);
		mi=0;
		ll su=0;
		for (int i=1;i<=n;i++){
			scanf("%d%d",&a[i].c,&a[i].m);
			if(a[i].m==0){
				i--;n--;
			}
			mi+=a[i].c;
			su+=a[i].m;
		}
		sort(a+1,a+1+n,cmp);
		if(su<666){
			printf("impossible\n");
			continue;
		}
		dfs(0,0);
		printf("%.0lf\n",mi);
	}
	return 0;
}
