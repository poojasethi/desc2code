#include <cmath>
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	100005
#define For(i,a,b)	for(int i=a,lim=b;i<=lim;i++)
#define Rep(i,a,b)	for(int i=a,lim=b;i>=lim;i--)

#define CH	(ch=getchar())
int		IN(){
		int x=0,ch;
		for	(;CH<'0'||ch>'9';);
		for	(;ch>='0'&&ch<='9';CH)	(x*=10)+=ch-'0';
		return	x;
}

int		N,Q,D,st[n],Dep[n],Dis[n],Ans[n],F[20][n],G[20][n],H[20][n];
struct	Lin{int v,c,next;}E[n<<1];
vector<int>X[n],Y[n],Z[n];

void	Link(int c,int v,int u){
		E[++D]=(Lin){v,c,st[u]};	st[u]=D;
		E[++D]=(Lin){u,c,st[v]};	st[v]=D;
}
void	DFS(int u,int f){
		Dep[u]=Dep[f]+1;
		for (int i=st[u],v;i;i=E[i].next)
		if	((v=E[i].v)!=f)	{
			G[0][v]=E[i].c;	F[0][v]=u;
			Dis[v]=Dis[u]+E[i].c,DFS(v,u);
		}
}

int		LCA(int u,int v){
		if	(Dep[u]>Dep[v])	swap(u,v);
		Rep(i,16,0)	if	(Dep[F[i][v]]>=Dep[u])	v=F[i][v];
		if	(u==v)	return	u;
		Rep(i,16,0)	if	(F[i][u]!=F[i][v])	u=F[i][u],v=F[i][v];
		return	F[0][u];
}

int		Find(int u,int d){
		Rep(i,16,0)	if	(G[i][u]<=d&&F[i][u])	d-=G[i][u],u=F[i][u];
		return	d&&!F[0][u]?0:u;
}
int		Work1(int u,int v,int d){
		if	(u==v)	return	0;	int w=LCA(u,v),ret=0;
		if	(v==w)	swap(u,v);
		for (;Dis[u]-Dis[w]>=d;)	ret++,u=Find(u,d);
		for	(;Dis[v]-Dis[w]>d;)		ret++,v=Find(v,d);
		return	ret+(Dis[u]+Dis[v]-2*Dis[w]>d)+1;
}
int		Work2(int u,int v,int d){
		if	(u==v)	return	0;	int w=LCA(u,v),ret=0;
		if	(v==w)	swap(u,v);
		Rep(i,16,0)	if	(Dep[H[i][u]]>Dep[w])	u=H[i][u],ret+=1<<i;
		Rep(i,16,0)	if	(Dep[H[i][v]]>Dep[w])	v=H[i][v],ret+=1<<i;
		return	ret+(Dis[u]+Dis[v]-2*Dis[w]>d)+1;
}

int		main(){
		N=IN();
		For(i,2,N)	Link(IN(),IN(),IN());
		DFS(1,0);

		int S=0;
		For(i,1,N)	S=max(S,Dis[i]);	S=max(2,(int)sqrt(S));
		For(i,1,16)	For(j,1,N)	F[i][j]=F[i-1][F[i-1][j]],G[i][j]=G[i-1][j]+G[i-1][F[i-1][j]];

		Q=IN();
		For(i,1,Q)	{
			int u=IN(),v=IN(),d=IN();
			if	(d>S)	Ans[i]=Work1(u,v,d);
				else	X[d].push_back(u),Y[d].push_back(v),Z[d].push_back(i);
		}

		For(d,2,S)	if	(X[d].size()){
			For(i,1,N)	H[0][i]=Find(i,d);
			For(i,1,16)	For(j,1,N)	H[i][j]=H[i-1][H[i-1][j]];
			For(i,0,X[d].size()-1)	Ans[Z[d][i]]=Work2(X[d][i],Y[d][i],d);
		}
		For(i,1,Q)	printf("%d\n",Ans[i]);
}