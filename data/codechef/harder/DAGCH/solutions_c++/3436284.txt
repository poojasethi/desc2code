#include <algorithm>
#include <iostream>
#include <sstream>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <cmath>
#include <deque>
#include <ctime>
#include <list>
#include <set>
#include <map>
//zlb//

using namespace std;

typedef long long     LL;
typedef pair<int,int> pii;

double PI  = acos(-1);
double EPS = 1e-7;
int INF    = 1000000000;
int MOD    = 1000000007;
int MAXINT = 2147483647;
LL INFLL   = 1000000000000000000LL;
LL MAXLL   = 9223372036854775807LL;

#define fi            first
#define se            second
#define mp            make_pair
#define pb            push_back
#define SIZE(a)       (int)a.size()
#define MIN(a, b)     (a) = min((a), (b))
#define MAX(a, b)     (a) = max((a), (b))
#define input(in)     freopen(in,"r",stdin)
#define output(out)   freopen(out,"w",stdout)
#define RESET(a, b)   memset(a,b,sizeof(a))
#define FOR(a, b, c)  for (int (a)=(b); (a)<=(c); (a)++)
#define FORD(a, b, c) for (int (a)=(b); (a)>=(c); (a)--)
#define FORIT(a, b)   for (__typeof((b).begin()) a=(b).begin(); a!=(b).end(); a++)

int mx[8] = {-1,1,0,0,-1,-1,1,1};
int my[8] = {0,0,-1,1,-1,1,-1,1};

// ------------ //

int n,m,q,co;
vector<int> adj[100005];
vector<int> nx[100005];
int mins[100005];
int ans[100005];
int fr[100005];


void dfs(int u)
{
	co++;
	FOR(a,0,SIZE(adj[u])-1)
	{
		int v = adj[u][a];
		MIN(mins[v],u);
		if (v < u) nx[v].pb(u);
		else if (v > co) dfs(v);
	}
	fr[u] = co;
}


/* This is just a Range Minimum Query using Segment Tree */

int lol[400005];

void upd(int fl,int fr,int v,int k=1,int l=1,int r=n)
{
	if (fl > r || fr < l) return;
	if (fl <= l && r <= fr)
	{
		MIN(lol[k],v);
		return;
	}
	MIN(lol[2*k],lol[k]);
	MIN(lol[2*k+1],lol[k]);
	lol[k] = INF;
	int m = (l+r)/2;
	upd(fl,fr,v,2*k,l,m);
	upd(fl,fr,v,2*k+1,m+1,r);
}

int query(int p,int k=1,int l=1,int r=n)
{
	if (l == r) return lol[k];
	MIN(lol[2*k],lol[k]);
	MIN(lol[2*k+1],lol[k]);
	lol[k] = INF;
	int m = (l+r)/2;
	if (p <= m) return query(p,2*k,l,m);
	else return query(p,2*k+1,m+1,r);
}

/* Preparing for new cases */

void reset()
{
	co = 0;
	FOR(a,1,n)
	{
		mins[a] = n+1;
		ans[a] = 0;
		adj[a].clear();
		nx[a].clear();
	}
	FOR(a,1,4*n) lol[a] = INF;
}

/* Main Program */

int main()
{
	int tc;
	scanf("%d",&tc);
	while(tc--)
	{
		scanf("%d%d%d",&n,&m,&q);

		reset();

		FOR(a,1,m)
		{
			int u,v;
			scanf("%d%d",&u,&v);
			adj[u].pb(v);
		}

		FOR(a,1,n)
		{
			sort(adj[a].begin(),adj[a].end());
		}

		dfs(1);

		FORD(u,n,2)
		{
			int x = mins[u];
			FOR(b,0,SIZE(nx[u])-1)
			{
				int v = nx[u][b];
				MIN(x,query(v));
			}
			upd(u,fr[u],x);
			ans[x]++;
		}

		FOR(a,1,q)
		{
			int k;
			scanf("%d",&k);
			printf("%d",ans[k]);

			if (a == q) printf("\n");
			else printf(" ");	
		}
	}
}
