#include <iostream>
#include <map>
#include <vector>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <cstdlib>
using namespace std;

const int N = 111111;
int n, m;
vector<int> g[N];
int dep[N];
long long value[N];
map<long long, long long> num;

long long dfs(int u) {
    long long res = 0;
    for (int i = 0; i < g[u].size(); i++) {
        int v = g[u][i];
        if (!dep[v]) {
            dep[v] = dep[u] + 1;
            long long ret = dfs(v);
            res ^= ret;
            num[ret]++;
        } else if (dep[v] < dep[u] - 1) {
            long long hash_value = 1LL * rand() * rand();
            num[hash_value]++;
            value[v] ^= hash_value;
            res ^= hash_value;
        }
    }
    res ^= value[u];
    return res;
}

long long solve() {
    memset(dep, 0, sizeof(dep));
    dep[1] = 1;
    num.clear();
    dfs(1);
    for (int i = 1; i <= n; i++) {
        if (!dep[i]) return (long long)m * (m - 1) / 2;
    }
    long long ans = 0;
    for (map<long long, long long>::iterator it = num.begin(); it != num.end(); it++) {
        if (it->first == 0) ans += it->second * (m - it->second);
        ans += it->second * (it->second - 1) / 2;
    }
    return ans;
}

int main() {
    srand(time(0));
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++) {
        int a, b;
        scanf("%d%d", &a, &b);
        g[a].push_back(b);
        g[b].push_back(a);
    }
    long long ans = solve();
    cout << ans << endl;
    return 0;
}
