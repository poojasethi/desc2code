#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>
typedef unsigned long long LL;
using namespace std;
int e = 1;
struct edge{
	int from,to,n;
}a[600600];
int head[100600];
LL d[300300];LL now = 0;
int pre[100600],low[100600];
int n,m,dfs_clock,len;
LL ans;
void addedge(int x,int y){
	a[++e] = (edge){x,y,head[x]};head[x] = e;
}
int cmp(LL a,LL b){
	return a < b;
}
void dfs(int p,int fa,LL &now1){
	LL now = 0;
	pre[p] = low[p] = ++dfs_clock;
	for (int i = head[p];i;i = a[i].n)
		if (a[i].to != fa){
			if (!pre[a[i].to]){
				LL now1 = 0;
				dfs(a[i].to,p,now1);
				now ^= now1;
			}else if (pre[a[i].to] < pre[p]){
				LL r = (LL)rand()*(LL)rand()*(LL)rand()*(LL)rand();
				d[p] ^= r,d[a[i].to] ^= r;
				d[++len] = r;
			}
		}
	now ^= d[p];d[p] = now;
	now1 = now;
}
int main(){
	srand(19961020);
	scanf("%d%d",&n,&m);
	for (int i = 1;i <= m;i++){
		int x,y;scanf("%d%d",&x,&y);
		addedge(x,y);addedge(y,x);
	}
	LL now = 0;
	len = n;
	dfs(1,-1,now);
	sort(d+2,d+len+1,cmp);
	for (int i = 2;i <= len;i++){
		int j = i;
		while (d[j+1] == d[i] && j+1 <= len) j++;
		if (d[i] == 0) ans += (LL)(j-i+1)*(LL)(j-i)+(LL)(j-i+1)*(LL)(m-(j-i+1))*2;
		else ans += (LL)(j-i+1)*(LL)(j-i);
		i = j;
	}
	printf("%lld\n",ans/2);
	return 0;
}
