#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!=13 and s[n]!=0; ++n);s[n]=0

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

const int max_n=100010;
const int max_m=300010;

// BIT struct

struct BIT
{
	int bn; //bn>0
	vector<LL> bA;
	
	BIT(){ bn=0; }
	BIT(int bn_){ bn=bn_; bA.resize(bn+1); fill(bA.begin(),bA.end(),0ll); }
	
	LL prefix(int bposn)
	{
		if(bposn<=0) return 0ll;
		if(bposn>bn) bposn=bn;
		
		LL ret=0;
		for(int i=bposn; i>0; i-=((i)&(-i)))
			ret^=bA[i];
		return ret;
	}
	
	void update(int bposn, LL bupd)
	{
		if(bposn<=0) return;
		if(bposn>bn) return;
		
		for(int i=bposn; i<=bn; i+=((i)&(-i)))
			bA[i]^=bupd;
	}
};
BIT bit[max_n];

// End of BIT struct

int n,m;
vector<int> adjl[max_n];
vector<int> chl[max_n];
bool visited[max_n]={0};

// Heavy Light Decompositions Codechunk

int par[max_n];
int st[max_n];
int beg[max_n];
int fin[max_n];
int tym=0;
 
int np=0;
vector<int> p[max_n];
int psz[max_n]={0};
int pno[max_n];
int pix[max_n];
 
void DFShl(int vt)
{
	++tym;
	beg[vt]=tym;
	visited[vt]=true;
	 
	st[vt]=1;
	int vtnbr;
	for(int i=0; i<adjl[vt].size(); ++i)
	{
		vtnbr=adjl[vt][i];
		if(not visited[vtnbr])
		{
			par[vtnbr]=vt;
			chl[vt].push_back(vtnbr);
			DFShl(vtnbr);
			st[vt]+=st[vtnbr];
		}
	}

	++tym;
	fin[vt]=tym;
}
 
bool heavy(int vt)
{
	return (2*st[vt] >= st[par[vt]]);
}
 
void buildpath(int bs)
{
	int vt=bs;
	
	while(true)
	{
		p[np].push_back(vt);
		pno[vt]=np;
		pix[vt]=psz[np];
		++psz[np];
		
		if(vt!=0 and heavy(vt))
			vt=par[vt];
		else
			break;
	}
}
 
void findpaths()
{
	for(int i=0; i<n; ++i)
	{
		bool base=true;
		for(int j=0; j<chl[i].size(); ++j)
			if(heavy(chl[i][j]))
				base=false;
		
		if(base)
		{
			buildpath(i);
			bit[np]=BIT(psz[np]);
			++np;
		}
	}	
}
 
bool ancof(int u, int v)
{
	return (beg[u]<=beg[v] and fin[v]<=fin[u]);
}
 
int dpno[max_n];
int dix1[max_n];
int dix2[max_n];
int dsz=0;
int lca;
 
int binsrc(int cpno, int l, int r, int ref)
{
	if(l+1==r)
	{
		lca=p[cpno][r];
		return l;
	}
	else
	{
		int mid=(l+r)/2;
		if(ancof(p[cpno][mid],ref))
			return binsrc(cpno,l,mid,ref);
		else
			return binsrc(cpno,mid,r,ref);
	}
}
 
void dcmp(int src, int ref)
{
	int vt=src;
	while(true)
	{
		if( ancof( p[pno[vt]][psz[pno[vt]]-1] , ref ) )
		{
			if(not ancof(vt,ref))
			{
				dpno[dsz]=pno[vt];
				dix1[dsz]=pix[vt];
				dix2[dsz]=binsrc(pno[vt],pix[vt],psz[pno[vt]]-1,ref);
				++dsz;
			}
			else
				lca=vt;
			break;
		}
		else
		{
			dpno[dsz]=pno[vt];
			dix1[dsz]=pix[vt];
			dix2[dsz]=psz[pno[vt]]-1;
			++dsz;
			vt=par[p[pno[vt]][psz[pno[vt]]-1]];
		}
	}
}
 
void finddcmp(int u, int v)
{
	dsz=0;
	dcmp(u,v);
}

// End of Codechunk

const LL largeprime=(LL(1063107780))*(LL(1e9))+(LL(316202539));
const LL modref=(1ll<<62);
LL seed=largeprime;

LL psrand()
{
	seed+=largeprime;
	seed%=modref;
	return seed;
}

//int par[max_n];
int lev[max_n];
map<LL,int> xct; map<LL,int>::iterator it;
int zct=0;

void DFS(int vt)
{
	visited[vt]=true;

	int nb;
	rep(i,(int)adjl[vt].size())
	{
		nb=adjl[vt][i];

		if(not visited[nb])
		{
			//par[nb]=vt;
			lev[nb]=lev[vt]+1;
			DFS(nb);
		}
		else if(lev[nb]<lev[vt]-1)
		{
			LL crand=psrand();
			++xct[crand];
			
			finddcmp(vt,nb);
			rep(j,dsz)
			{
				bit[dpno[j]].update(dix1[j]+1,crand);
				bit[dpno[j]].update(dix2[j]+2,crand);
			}
		}
	}
}

int main()
{
	gi(n); gi(m);

	int u,v;
	rep(i,m)
	{
		gi(u); gi(v);
		--u; --v;

		adjl[u].pb(v);
		adjl[v].pb(u);
	}

	//cerr<<

	par[0]=0;
	DFShl(0);
	findpaths();

	lev[0]=0;
	fill(visited,visited+n,false);
	DFS(0);

	//cout<<zct<<"\n";
	
	/*rep(i,np)
	{
		rep(j,psz[i])
			cout<<p[i][j]<<" ";
		cout<<"\n";
	}*/

	LL res=0ll;

	forup(i,1,n)
	{
		LL q=bit[pno[i]].prefix(pix[i]+1);

		if(q==0ll) ++zct;
		else ++xct[q];
	}
	for(it=xct.begin(); it!=xct.end(); ++it)
		res+=((LL(it->second))*((LL(it->second))-1ll)/2ll);
	res+=((LL(zct))*(LL(m-1)));
	res-=((LL(zct))*((LL(zct))-1ll)/2ll);

	pln(res);
	
	return 0;
}