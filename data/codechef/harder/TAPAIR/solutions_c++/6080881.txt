#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

#define MX 100005
#define ME 300005
using namespace std;
typedef long long LL;
template<class T>
inline void chkmin(T& x, T y) {
	if (x > y) x = y;
}

vector<int> adj[MX], C[MX], con[MX];
int N, M, bn, cn;
int d[MX], low[MX], num;
int s[MX], top;
int mark[MX];
LL ans;
int vis[MX], T;

void DFS(int u, int par) {
	int i, k, v, t;
	d[u] = low[u] = ++num;
	s[top++] = u;
	for (i = adj[u].size() - 1; i >= 0; i--) {
		v = adj[u][i];
		if (!d[v]) {
			DFS(v, u);
			if (low[v] > d[u]) {
				do C[cn].push_back(t = s[--top]);
				while (t != v);
				cn++;
			}
			chkmin(low[u], low[v]);
		} else if (v != par) chkmin(low[u], d[v]);
	}
}

int x;
void dfs(int u) {
	vis[u] = T;
	x++;
	int i, v;
	for (i = 0; i < con[u].size(); i++) {
		v = con[u][i];
		if (vis[v] != T && con[v].size() == 2) dfs(v);
	}
}

int main() {
	scanf("%d%d", &N, &M);
	int i, j, k, u, v;
	for (i = 0; i < M; i++) {
		scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	DFS(1, 0);
	ans = 1LL * cn * (M - cn) + 1LL * cn * (cn - 1) / 2;
	for (i = 0; i < top; i++) C[cn].push_back(s[i]);
	cn++;
	memset(mark, -1, sizeof mark);
	for (int c = 0; c < cn; c++) {
		for (i = 0; i < C[c].size(); i++) {
			u = C[c][i];
			mark[u] = c;
			con[u].clear();
		}
		
		for (i = 0; i < C[c].size(); i++) {
			u = C[c][i];
			for (j = 0; j < adj[u].size(); j++) {
				v = adj[u][j];
				if (mark[v] != c) continue;
				con[u].push_back(v);
			}
		}
		T++;
		for (i = 0; i < C[c].size(); i++) {
			u = C[c][i];
			if (con[u].size() == 2 && vis[u] != T) {
				x = 0;
				dfs(u);
				if (x == C[c].size()) x--;
				ans += 1LL * x * (x + 1) / 2;
			}
		}
	}
	printf("%lld\n", ans);
	return 0;
}