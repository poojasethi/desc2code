#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
//#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;

vector<int> g[100005];

int A[300005], B[300005];

ll Xor[300005];

bool tree[300005];

map<ll, ll> cnt;

ll res = 0;

bool was[100005];

void dfs(int v){
  was[v] = true;
  forn(i, g[v].size()){
    int id = g[v][i];
    int to = A[id];
    if(to == v){
      to = B[id];
    }
    if(was[to]){
      continue;
    }
    tree[id] = true;
    dfs(to);
  }
}

void tr(int v){
  was[v] = true;
  forn(i, g[v].size()){
    int id = g[v][i];
    int to = A[id];
    if(to == v){
      to = B[id];
    }
    if(was[to]){
      continue;
    }
    tr(to);
    Xor[v] ^= Xor[to];
  }
  if(v){
    ++cnt[Xor[v]];
  }
}

int main(void) {
  #ifndef ONLINE_JUDGE
      freopen("input.txt", "rt", stdin);
      freopen("output.txt", "wt", stdout);
  #endif
  srand(time(NULL));
  scanf("%d %d", &n, &m);
  forn(i, m){
    scanf("%d %d", A + i, B + i);
    --A[i]; --B[i];
    g[A[i]].pb(i);
    g[B[i]].pb(i);
  }
  dfs(0);
  ll val = 0;
  forn(i, m){
    if(!tree[i]){
      val = (random + 1LL) * (random + 1LL) + 1LL;
      Xor[A[i]] ^= val;
      Xor[B[i]] ^= val;
      ++cnt[val];
    }
  }
  memset(was, 0, sizeof was);
  tr(0);
  for(map<ll, ll> :: iterator it = cnt.begin(); it != cnt.end(); ++it){
    res += (it->S) * (it->S - 1) / 2;
  }
  res += cnt[0] * (m - cnt[0]);
  cout << res << "\n";
  return 0;
}
