#include <cstdio>
#include <cstdlib>
#include <map>
#include <iostream>
using namespace std;
typedef unsigned long long int ll;

#if RAND_MAX < 50000
ll RAN(){return (ll(rand()) << 48 | ll(rand()) << 32 | ll(rand()) << 16 | rand());}
#else
ll RAN(){return ll(rand()) << 32 | ll(rand());}
#endif

const int sz = 600200;
int n, m;
int node[sz], next[sz], to[sz], v[sz], e;
void ins(int x, int y){e++; next[e] = node[x]; node[x] = e; to[e] = y;}
void gi(int &x){char c = getchar(); x = 0; while (c < '0' || c > '9') c = getchar(); while (c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();}
ll w[sz];

ll dfs2(int x, int pj){
  v[x] = 1;
  for (int j = node[x]; j; j = next[j])
    if (!v[to[j]]) w[pj] ^= dfs2(to[j], j);
    else w[pj] ^= w[j];
  return w[pj & 1 ? pj + 1 : pj - 1] = w[pj];
}

map <ll, int> CNT;
int s = 0;
ll ANS = 0;
int main(){
  int x, y;
  gi(n); gi(m); ANS = (1ll * m * (m - 1));
  for (int i = 1; i <= m; i++){
    gi(x); gi(y);
    ins(x, y); w[e] = RAN(); ins(y, x); w[e] = w[e - 1];
  }
  dfs2(1, sz - 1);
  for (int i = 1; i <= e; i += 2)
    if (w[i] > 0) CNT[w[i]]++, s++;
  for (int i = 1; i <= e; i += 2)
    if (CNT[w[i]] > 0){
      ANS -= 1ll * (s - CNT[w[i]]) * CNT[w[i]];
      CNT[w[i]] = 0;
    }
  cout << (ANS >> 1) << endl;
  return 0;
}
