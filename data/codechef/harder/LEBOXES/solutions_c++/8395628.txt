#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
#define inf 1000000005
typedef long long ll;
typedef double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
const int mo=1000000007;
int qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}

int n,m;

int getdol[33];
db getp[33];
int paydol[33],paydia[33];
int f[33][33];
struct node{
	int dia,dol;db pr;
}a[66666],b[66666];
int atot,btot;

node fa[33][66666],fb[33][66666];
int fatot[33],fbtot[33];
void dfs(int l,int r,int dia,int dol,db pr,node *p,int &tot){
	if(l>r)p[++tot]=(node){dia,dol,pr};
	else{
		dfs(l+1,r,dia,dol+getdol[l],pr*getp[l],p,tot);
		dfs(l+1,r,dia+1,dol,pr*(1.0-getp[l]),p,tot);
	}
}
int cmp(const node&a,const node&b){
	return a.dol<b.dol;
}
int main()
{
	int tes;scanf("%d",&tes);
	while(tes--){
		scanf("%d%d",&n,&m);
		for (int i=1;i<=n;i++){
			scanf("%d%lf",&getdol[i],&getp[i]);
			getp[i]/=100.0;
		}
		db ans=0.0;
		for (int i=1;i<=m;i++){
			scanf("%d%d",&paydol[i],&paydia[i]);
			if(paydol[i]==0 && paydia[i]==0){
				ans+=1.0;
				m--;i--;
			}
		}
		for (int i=1;i<=30;i++)
			for (int j=0;j<=30;j++)f[i][j]=inf;
		for (int i=0;i<=30;i++)f[0][i]=0;
		for (int k=1;k<=m;k++)
			for (int i=30;i>=0;i--)
				for (int j=30;j>=0;j--)
					if(j+paydia[k]<=30)f[i+1][j+paydia[k]]=min(f[i][j]+paydol[k],f[i+1][j+paydia[k]]);
		int mid=(1+n)>>1;
		atot=btot=0;
		dfs(1,mid,0,0,1.0,a,atot);
		dfs(mid+1,n,0,0,1.0,b,btot);

		memset(fatot,0,sizeof(fatot));
		memset(fbtot,0,sizeof(fbtot));
		for (int i=1;i<=atot;i++){
			int d=a[i].dia;
			fa[d][++fatot[d]]=a[i];
		}
		for (int i=1;i<=btot;i++){
			int d=b[i].dia;
			fb[d][++fbtot[d]]=b[i];
		}
		for (int i=0;i<=n;i++)sort(fa[i]+1,fa[i]+1+fatot[i],cmp),sort(fb[i]+1,fb[i]+1+fbtot[i],cmp);
		for (int adia=0;adia<=n;adia++)if(fatot[adia])
			for (int bdia=0;bdia<=n;bdia++)if(fbtot[bdia]){
				int tdia=adia+bdia;
				for (int cnt=1;cnt<=m;cnt++){
					int tar=f[cnt][tdia];
					int cur=fbtot[bdia];db curp=0.0;
					for (int i=1;i<=fatot[adia];i++){
						while(cur>=1 && fa[adia][i].dol+fb[bdia][cur].dol>=tar)
							curp+=fb[bdia][cur--].pr;
						ans+=fa[adia][i].pr*curp;
					}
				}
			}
		printf("%.4lf\n",ans);
	}
	return 0;
}
