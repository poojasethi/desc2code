
#include<bits/stdc++.h>
using namespace std;
#define D(x)        cout<<#x " = "<<(x)<<endl
#define un(x)       x.erase(unique(x.begin(),x.end()), x.end())
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define pb          push_back
#define mp          make_pair
#define xx          first
#define yy          second
#define hp          (LL) 999983
#define MAX         2000
#define MOD         1000000007
typedef long long int LL;
typedef pair<int,int> pii;

int A[MAX+11], B[MAX+11];
int sml[MAX+11];
vector<int> v;
int rev[MAX+11], nA, mB;

const int mxval = MAX;
int BIT[MAX+11];

int add(int u, int _v)
{
    int ret = u + _v;
    if(ret >= MOD) ret %= MOD;
    return ret;
}

void update(int idx, int val)
{
    while(idx <= mxval)
        BIT[idx] = add(BIT[idx],val), idx += idx&-idx;
}

LL query(int idx)
{
    LL ret = 0;
    while(idx)
        ret = add(ret, BIT[idx]), idx -= idx&-idx;
    return ret;
}

int dp[MAX+11][MAX+11];
vector<pii> upd;

int main()
{
    //freopen("c:\\Users\\User\\Desktop\\in.txt", "r", stdin);
    //freopen("c:\\Users\\User\\Desktop\\out.txt", "w", stdout);

    int i, j, k;
    int lo, hi, mid, res = 0;
    LL C;

    sff(nA, mB);
    for(i = 1; i <= nA; i++)
    {
        sf(A[i]);
        v.pb(A[i]);
    }

    for(i = 1; i <= mB; i++)
        sf(B[i]);

    sort(v.begin(), v.end());
    un(v);
    for(i = 1; i <= nA; i++)
    {
        sml[i] = lower_bound(v.begin(), v.end(), A[i]) - v.begin() + 1;
        rev[sml[i]] = A[i];
    }

    for(i = 1; i <= nA; i++)
        dp[i][1] = 1;


    for(k = 2; k <= mB; k++)
    {
        memset(BIT, 0, sizeof(BIT));
        for(i = 1; i <= nA; i++)
        {
            C = (LL) A[i] + B[k] - B[k-1];

            lo = 0;
            hi = v.size();

            while(lo != hi)
            {
                mid = lo + (hi-lo+1)/2;
                if(rev[mid] <= C) lo = mid;
                else hi = mid-1;
            }


            dp[i][k] = query(lo);
            update(sml[i], dp[i][k-1]);
        }
    }

    for(i = 1; i <= nA; i++)
        res = add(res, dp[i][mB]);

    printf("%d\n", res);
    return 0;
}


