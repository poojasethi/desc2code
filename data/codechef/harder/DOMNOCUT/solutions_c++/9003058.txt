#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

int T,n,m,cuts,colors,i,j,k;
char s[505][505];
bool flag;

char get(char a,char b)
{
	if('a'!=a&&'a'!=b)return 'a';
	if('b'!=a&&'b'!=b)return 'b';
	return 'c';
}

int main()
{
	scanf("%d",&T);
	for(;T;--T)
	{
		scanf("%d%d",&n,&m);
		if(n&m&1)printf("IMPOSSIBLE\n");
		else
		{
			if(n>m)swap(n,m),flag=true;
			else flag=false;
			
			for(i=0;i<=n+1;++i)
			for(j=0;j<=m+1;++j)
			s[i][j]=0;
			
			if(n==1)
			{
				cuts=m/2-1;
				colors=1+(m>2);
				for(i=1,k=1;i<=m;++i)
				{
					if(i&1)k^=1;
					s[1][i]='a'+k;
				}
			}else
			if(n==2)
			{
				cuts=m/2;
				colors=2+(m&1);
				if(m&1)
				{
					s[1][1]=s[2][1]='c';
					for(i=2,k=0;i<=m;++i)
					{
						s[1][i]='a'+k;
						s[2][i]='a'+(k^1);
						if(i&1)k^=1;
					}
				}
				else
				{
					for(i=1,k=1;i<=m;++i)
					{
						if(i&1)k^=1;
						s[1][i]='a'+k;
						s[2][i]='a'+(k^1);
					}
				}
			}else
			if(n==3)
			{
				if(m==4)
				{
					cuts=1;
					colors=3;
					s[1][1]='a';s[1][2]='a';s[1][3]='b';s[1][4]='c';
					s[2][1]='b';s[2][2]='c';s[2][3]='b';s[2][4]='c';
					s[3][1]='b';s[3][2]='c';s[3][3]='a';s[3][4]='a';
				}
				else
				{
					cuts=1;
					colors=3;
					s[1][1]=s[1][2]='a';
					s[2][1]=s[3][1]='b';
					for(j=2;j<m;++j)
					{
						if(!s[1][j])s[1][j]=s[1][j+1]=get(s[1][j-1],s[2][j]);
						if(!s[2][j])s[2][j]=s[2][j+1]=get(s[1][j],s[2][j-1]);
						if(!s[3][j])s[3][j]=s[3][j+1]=get(s[2][j],s[3][j-1]);
					}
					s[2][m]=s[3][m]=get(s[2][m-1],s[3][m-1]);
					if(s[2][m]==s[1][m])
					{
						s[3][m-1]=s[3][m-2]=s[2][m];
						s[2][m]=s[3][m]=get(s[2][m-1],s[3][m-1]);
					}
				}
			}else
			if(n==4)
			{
				if(m&1)
				{
					cuts=1;
					colors=3;
					s[1][1]=s[2][1]='a';
					s[3][1]=s[3][2]='b';
					s[4][1]=s[4][2]='c';
					for(j=2;j<m;++j) 
					{
						if(!s[2][j])s[2][j]=s[2][j+1]=get(s[2][j-1],s[3][j]);
						if(!s[1][j])s[1][j]=s[1][j+1]=get(s[1][j-1],s[2][j]);
						if(!s[3][j])s[3][j]=s[3][j+1]=get(s[2][j],s[3][j-1]);
						if(!s[4][j])s[4][j]=s[4][j+1]=get(s[3][j],s[4][j-1]);
					}
					s[3][m]=s[4][m]=get(s[3][m-1],s[4][m-1]);
				}
				else
				{
					if(m==4)
					{
						cuts=2;
						colors=3;
						s[1][1]='a';s[1][2]='a';s[1][3]='b';s[1][4]='a';
						s[2][1]='c';s[2][2]='c';s[2][3]='b';s[2][4]='a';
						s[3][1]='a';s[3][2]='b';s[3][3]='c';s[3][4]='c';
						s[4][1]='a';s[4][2]='b';s[4][3]='a';s[4][4]='a';
					}
					else
					{
						cuts=2;
						colors=3;
						s[1][1]=s[1][2]='a';
						s[2][1]=s[2][2]='b';
						s[3][1]=s[4][1]='c';
						for(j=2;j<m;++j) 
						{
							if(!s[2][j])s[2][j]=s[2][j+1]=get(s[2][j-1],s[3][j]);
							if(!s[1][j])s[1][j]=s[1][j+1]=get(s[1][j-1],s[2][j]);
							if(!s[3][j])s[3][j]=s[3][j+1]=get(s[2][j],s[3][j-1]);
							if(!s[4][j])s[4][j]=s[4][j+1]=get(s[3][j],s[4][j-1]);
						}
						s[3][m]=s[4][m]=get(s[3][m-1],s[4][m-1]);
					}
				}
			}
			else
			{
				if(m&1)
				{
					swap(n,m);
					flag^=1;
					for(i=0;i<=n+1;++i)
					for(j=0;j<=m+1;++j)
					s[i][j]=0;
				}
				if(n&1)
				{
					cuts=0;
					colors=3;
					s[1][1]='a';s[1][2]='a';s[1][3]='b';s[1][4]='a';s[1][5]='a';
					s[2][1]='b';s[2][2]='c';s[2][3]='b';s[2][4]='c';s[2][5]='c';
					s[3][1]='b';s[3][2]='c';s[3][3]='a';s[3][4]='a';
					for(i=4;i<=n;i+=2)
					{
						if(i<=6)s[i][1]=s[i+1][1]=s[i][4]=s[i+1][4]=get(s[i-1][1],'a');
						else s[i][1]=s[i+1][1]=s[i][4]=s[i+1][4]=get(s[i-1][1],s[i-3][1]);
						s[i][2]=s[i][3]=get(s[i][1],s[i-1][3]);
						s[i+1][2]=s[i+1][3]=get(s[i][1],s[i][3]);
					}
					for(j=5;j<=m-2;++j)
					{
						for(i=3;i<=n;++i)
						if(!s[i][j])
						{
							if(s[i-1][j]==s[i][j-1]&&j==m-3)s[i][j]=s[i][j+1]=get(s[i-1][j],s[i-2][j]);
							else s[i][j]=s[i][j+1]=get(s[i-1][j],s[i][j-1]);
						}
						if(!s[2][j])s[2][j]=s[2][j+1]=get(s[2][j-1],s[3][j]);
						if(!s[1][j])s[1][j]=s[1][j+1]=get(s[1][j-1],s[2][j]);
					}
					s[1][m]=s[2][m]=get(s[1][m-1],s[2][m-1]);
					for(i=3;i<n;i+=2)
					{
						s[i][m-1]=s[i+1][m-1]=get(s[i][m-2],s[i+1][m-2]);
						s[i][m]=s[i+1][m]=get(s[i][m-1],s[i-1][m]);
					}
					s[n][m-1]=s[n][m]=get(s[n-1][m-1],s[n-1][m]);
					if(s[n][m-1]==s[n][m-2])
					{
						s[n][m-1]=s[n][m]=get(s[n][m-2],s[n-1][m-1]);
						for(i=n-1;i>=4;i-=2)
						if(s[i][m]==s[i+1][m])s[i][m]=s[i-1][m]=get(s[i][m-1],s[i+1][m]);
						else break;
					}
				}
				else
				{
					if(n==6&&m==6)
					{
						cuts=1;
						colors=3;
						s[1][1]='a';s[1][2]='a';s[1][3]='c';s[1][4]='a';s[1][5]='a';s[1][6]='c';
						s[2][1]='b';s[2][2]='b';s[2][3]='c';s[2][4]='b';s[2][5]='b';s[2][6]='c';
						s[3][1]='c';s[3][2]='a';s[3][3]='a';s[3][4]='c';s[3][5]='a';s[3][6]='a';
						s[4][1]='c';s[4][2]='b';s[4][3]='b';s[4][4]='c';s[4][5]='b';s[4][6]='c';
						s[5][1]='a';s[5][2]='c';s[5][3]='a';s[5][4]='a';s[5][5]='b';s[5][6]='c';
						s[6][1]='a';s[6][2]='c';s[6][3]='b';s[6][4]='b';s[6][5]='a';s[6][6]='a';
					}
					else
					{
						cuts=0;
						colors=3;
						s[1][1]='a';s[1][2]='a';s[1][3]='c';s[1][4]='c';
						s[2][1]='b';s[2][2]='c';s[2][3]='a';s[2][4]='a';
						s[3][1]='b';s[3][2]='c';s[3][3]='b';s[3][4]='c';s[3][5]='c';
						s[4][1]='a';s[4][2]='a';s[4][3]='b';s[4][4]='a';s[4][5]='a';
						for(i=5;i<=n;i+=2)
						{
							s[i][1]=s[i+1][1]=s[i][4]=s[i+1][4]=get(s[i-1][1],s[i-1][1]);
							s[i][2]=s[i][3]=get(s[i][1],s[i-1][2]);
							s[i+1][2]=s[i+1][3]=get(s[i][1],s[i][3]);
						}
						for(j=1;j<=m-3;++j)
						{
							for(i=5;i<=n;++i)
							if(!s[i][j])
							{
								if(s[i-1][j]==s[i][j-1]&&j==m-3)
								{
									if(i!=6)s[i][j]=s[i][j+1]=get(s[i-1][j],s[i-2][j]);
									else s[i][j]=s[i][j+1]=s[i-2][j];
								}
								else s[i][j]=s[i][j+1]=get(s[i-1][j],s[i][j-1]);
							}
							if(!s[4][j])s[4][j]=s[4][j+1]=get(s[4][j-1],s[5][j]);
							if(!s[3][j])s[3][j]=s[3][j+1]=get(s[3][j-1],s[4][j]);
							if(j!=m-3)
							{
								if(!s[2][j])s[2][j]=s[2][j+1]=get(s[2][j-1],s[3][j]);
								if(!s[1][j])s[1][j]=s[1][j+1]=get(s[1][j-1],s[2][j]);
							}
						}
						s[1][m-3]=s[2][m-3]=get(s[1][m-4],s[2][m-4]);
						s[3][m-2]=s[4][m-2]=get(s[3][m-3],s[4][m-3]);
						s[2][m-2]=s[2][m-1]=get(s[3][m-2],s[5][m-2]);
						s[1][m-2]=s[1][m-1]=get(s[1][m-3],s[2][m-2]);
						s[1][m]=s[2][m]=get(s[1][m-1],s[2][m-2]);
						s[3][m-1]=s[3][m]=get(s[2][m],s[2][m-1]);
						for(i=4;i<n;i+=2)
						{
							s[i][m-1]=s[i+1][m-1]=get(s[i][m-2],s[i+1][m-2]);
							s[i][m]=s[i+1][m]=get(s[i][m-1],s[i-1][m]);
						}
						s[n][m-1]=s[n][m]=get(s[n-1][m-1],s[n-1][m]);
					}
				}
			}
			
			printf("%d %d\n",cuts,colors);
			if(flag)
			{
				swap(n,m);
				for(i=1;i<=n;++i)
				{
					for(j=1;j<=m;++j)putchar(s[j][i]);
					printf("\n");
				}
				swap(n,m);
			}
			else
			{
				for(i=1;i<=n;++i)
				{
					for(j=1;j<=m;++j)putchar(s[i][j]);
					printf("\n");
				}
			}
		}
	}
}