#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;
#define rep(i,n) for (int i=0;i<n;i++)
struct node{
	node *go[26],*p;
	long long cnt;int val;
}pool[501000],*cur=pool,*root,*a[251000];
char S[501000];
int n,Q,u,v;long long len;
vector<int> e[501000];
node *expand(node *p,int w) {
	node *np=cur++;np->val=p->val+1;
	while (p&&!p->go[w]) p->go[w]=np,p=p->p;
	if (!p) np->p=root; else {
		node *q=p->go[w];
		if (q->val==p->val+1) np->p=q; else {
			node *nq=cur++;nq->val=p->val+1;memcpy(nq->go,q->go,sizeof q->go);
			nq->p=q->p;q->p=np->p=nq;
			while (p&&p->go[w]==q)
				p->go[w]=nq,p=p->p;
		}
	}
	return np;
}
void dfs(int u,int f,node *p) {
	node *q=expand(p,S[u]-'a');
	rep(i,e[u].size()) if (e[u][i]!=f) dfs(e[u][i],u,q);
}
void get(node *p) { if (p->cnt) return;p->cnt=1;
	rep(j,26) if (p->go[j]) get(p->go[j]),p->cnt+=p->go[j]->cnt;}
int main() {
	scanf("%d%d ",&n,&Q);
	gets(S);root=cur++;
	rep(i,n-1) {scanf("%d%d",&u,&v),--u,--v;e[u].push_back(v);e[v].push_back(u);}
	dfs(0,-1,root);get(root);
	printf("%lld\n",root->cnt);
	for (;Q;Q--) {
		scanf("%s%lld",S,&len);--len;
		if (len>=root->cnt) printf("-1");else 
		for (node *p=root;len;) {
			len--;
			rep(j,26) {
				int t=p->go[S[j]-'a']?p->go[S[j]-'a']->cnt:0;
				if (len>=t) len-=t; else {putchar(S[j]),p=p->go[S[j]-'a'];break;}
			}
		}
		puts("");
	}
}