#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	500005
#define u64	unsigned long long
#define For(i,a,b)	for(int i=a;i<=b;i++)

int		N,Q,D,st[n],Now[n];
char	s[n];
u64		K;

struct	Lin{int v,next;}E[n];
void	Link(int u,int v){
		E[++D]=(Lin){v,st[u]};	st[u]=D;
		E[++D]=(Lin){u,st[v]};	st[v]=D;
}

namespace	SAM{
		int 	T=1,F[n],G[n],Q[n],V[n],Max[n],A[n][26]; 
		u64		R[n];

		int		Extend(int p,int x){
			int np=++T,q,nq;	Max[np]=Max[p]+1;
			for (;p&&!A[p][x];p=F[p])	A[p][x]=np;
			if	(!p)	F[np]=1;	else
			if	(Max[q=A[p][x]]==Max[p]+1)	F[np]=q;
			else	{
				Max[nq=++T]=Max[p]+1;	F[nq]=F[q];
				For(i,0,25)	A[nq][i]=A[q][i];	F[np]=F[q]=nq;
				for (;p&&A[p][x]==q;p=F[p])	A[p][x]=nq;
			}	R[np]=1;
			return	np;
		}
		bool	Cmp(int a,int b)	{return	Max[a]>Max[b];}

		void	DFS(int u){
			if	(V[u])	return;	V[u]=1;
			For(i,0,25)	if	(A[u][i])	DFS(A[u][i]);
		}
		void	Work(){
			DFS(1);
			For(i,1,T)	if	(V[i])	Q[++*Q]=i;
			sort(Q+1,Q+*Q+1,Cmp);
			For(i,1,*Q)	{
				int u=Q[i];	R[F[u]]+=R[u];	R[u]=G[u]=!!R[u];
				For(i,0,25)	if	(A[u][i])	R[u]+=R[A[u][i]];
			}
		}

		void	Find(int u){
			if	(!(K-=G[u]))	return;
			For(i,0,25)	if	(A[u][s[i]-'a']){
				int v=A[u][s[i]-'a'];
				if	(K>R[v])	K-=R[v];
				else	{
					putchar(s[i]),Find(v);	break;
				}
			}
		}
};

void	DFS(int u,int f){
		Now[u]=SAM::Extend(Now[f],s[u]-'a');
		for (int i=st[u],v;i;i=E[i].next)
			if	((v=E[i].v)!=f)	DFS(v,u);
}

#define CH	(ch=getchar())
int		IN(){
		int x=0,ch;
		for	(;CH<'0'||ch>'9';);
		for	(;ch>='0'&&ch<='9';CH)	(x*=10)+=ch-'0';
		return	x;
}

int		main(){
		scanf("%d%d%s",&N,&Q,s+1);
		For(i,2,N)	Link(IN(),IN());
		Now[0]=1;	DFS(1,0);	SAM::Work();

		printf("%llu\n",SAM::R[1]);
		for (;Q--;)	{
			scanf("%s%llu",s,&K);
			if	(SAM::R[1]<K)	puts("-1");
				else	SAM::Find(1),puts("");
		}
}