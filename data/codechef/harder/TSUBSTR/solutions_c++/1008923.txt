#include <stdio.h>
#include <string.h>
#include <algorithm>
#define maxn 250010

using namespace std;

typedef long long ll;

struct node{
	node *fail;
	node *nxt[26];
	int len;
	ll tot;
	node(){
		fail=NULL;
		len=0;
		for (int i=0;i<26;i++) nxt[i]=NULL;
	}
} T[maxn<<1];
int tn;
node *head,*tail;

int st[maxn],aim[maxn<<1],nxt[maxn<<1],ln;

char s[maxn];
int n,qn;

void in_edge(int x,int y){
	aim[ln]=y;
	nxt[ln]=st[x];
	st[x]=ln++;
}
int dep[maxn];
node *ep[maxn];
node *add(node *p,int c,int len){
	node *x=&T[tn++];
	x->len=len;
	for (;p && p->nxt[c]==NULL;p=p->fail) p->nxt[c]=x;
	if (p!=NULL){
		node *q=p->nxt[c];
		if (p->len+1<q->len){
			node *np=&T[tn++];
			*np=*q;
			np->len=p->len+1;
			x->fail=q->fail=np;
			for (;p && p->nxt[c]==q;p=p->fail) p->nxt[c]=np;
		}else x->fail=q;
	}else x->fail=head;
	return x;
}
void dfs(int x,int fx){
	node *lp=(fx==-1?head:ep[fx]);
	ep[x]=add(lp,s[x]-'a',dep[x]);
	for (int i=st[x];i!=-1;i=nxt[i])
		if (aim[i]!=fx){
			dep[aim[i]]=dep[x]+1;
			dfs(aim[i],x);
		}
}
char pt[30];
int idx[maxn<<1];
int c[maxn];
char ans[maxn];
int Find(ll k){
	node *x=head;
	int len=0;
	while (1){
		int flag=0;
		if (k==1){
			ans[len]=0;
			return 1;
		}
		--k;
		for (int i=0;i<26;i++)
			if (x->nxt[pt[i]-'a']!=NULL){
				int c=pt[i]-'a';
				if (k>x->nxt[c]->tot){
					k-=x->nxt[c]->tot;
				}else{
					flag=1;
					ans[len++]='a'+c;
					x=x->nxt[c];
					break;
				}
			}
		if (!flag) return 0;
	}
}
int main(){
	scanf("%d%d",&n,&qn);
	scanf("%s",s);
	memset(st,-1,sizeof(st));
	ln=0;
	for (int i=1;i<n;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		--u,--v;
		in_edge(u,v);
		in_edge(v,u);
	}
	tn=1;
	head=&T[0];
	dep[0]=1;
	dfs(0,-1);

	for (int i=0;i<tn;i++) c[T[i].len]++;
	for (int i=1;i<=n;i++) c[i]+=c[i-1];
	for (int i=0;i<tn;i++) idx[--c[T[i].len]]=i;
	for (int i=tn-1;i>=0;i--){
		node *x=&T[idx[i]];
		x->tot=1;
		for (int j=0;j<26;j++)
			if (x->nxt[j]!=NULL) x->tot+=x->nxt[j]->tot;
	}

	printf("%lld\n",head->tot);
	for (;qn;qn--){
		scanf("%s",pt);
		ll k;
		scanf("%lld",&k);
		if (Find(k)){
			printf("%s\n",ans);
		}else puts("-1");
	}
	return 0;
}
