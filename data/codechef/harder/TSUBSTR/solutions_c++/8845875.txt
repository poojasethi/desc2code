#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=510000;
inline void read(int &x){
	x=0;char p=getchar();
	while(!(p<='9'&&p>='0'))p=getchar();
	while(p<='9'&&p>='0')x*=10,x+=p-48,p=getchar();
}
int step[N],fail[N],p[N][26];int M;int n,Q;
int expended(int tail,int x,int d){
	step[x]=step[tail]+1;
	int q;
	for(q=tail;q&&(!p[q][d]);q=fail[q])p[q][d]=x;
	if(!q){
		fail[x]=n+1;
		return x;
	}
	int gt=p[q][d];
	if(step[gt]==step[q]+1){
		fail[x]=gt;
	}
	else{
		++M;int nq=M;
		step[nq]=step[q]+1;
		fail[nq]=fail[gt];
		fail[gt]=fail[x]=nq;
		rep(i,0,25)p[nq][i]=p[gt][i];
		for(;q&&(p[q][d]==gt);q=fail[q])p[q][d]=nq;
	}
	return x;
}
int head[N],np[N],pp[N],tot;char val[N];
void dfs(int node,int pre,int x){
	int gc=expended(node,x,val[x]-'a');
	for(int u=head[x];u;u=np[u])if(pp[u]^pre){
		dfs(gc,x,pp[u]);
	}
}
LL sz[N];bool vis[N];
LL dd(int x){
	if(vis[x])return sz[x];
	sz[x]=1;vis[x]=1;
	rep(i,0,25)if(p[x][i]){
		sz[x]+=dd(p[x][i]);
	}
	return sz[x];
}
char xu[28];
LL k;
int main(){
	scanf("%d%d",&n,&Q);
	M=n+1;
	scanf("%s",val+1);
	rep(i,1,n-1){
		int u,v;read(u);read(v);
		++tot;pp[tot]=v;np[tot]=head[u];head[u]=tot;
		++tot;pp[tot]=u;np[tot]=head[v];head[v]=tot;
	}
	dfs(n+1,n+1,1);
	dd(n+1);
	printf("%lld\n",sz[n+1]);
	while(Q--){
		scanf("%s",xu);
		scanf("%lld",&k);
		if(k>sz[n+1]){
			printf("-1\n");
			continue;
		}
		int x=n+1;
		while(k){
			k--;if(!k)break;
			rep(i,0,25)if(p[x][xu[i]-'a']){
				if(sz[p[x][xu[i]-'a']]>=k){
					x=p[x][xu[i]-'a'];
					printf("%c",xu[i]);
					break;
				}
				else{
					k-=sz[p[x][xu[i]-'a']];
				}
			}	
		}
		printf("\n");
	}
	return 0;
}





