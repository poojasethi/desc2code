/*
    Problem:
    Algorithm:
    Note:
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<vector>
#include<map>
#include<string>
#include<iomanip>
#include<iostream>
#include<cmath>
#include<queue>
using namespace std;
 
#define rep(i,x,y) for(i=x;i<=y;i++)
#define _rep(i,x,y) for(i=x;i>=y;i--)
#define CL(S,x) memset(S,x,sizeof(S))
#define CP(S1,S2) memcpy(S1,S2,sizeof(S2))
#define ALL(x,S) for(x=S.begin();x!=S.end();x++)
#define sqr(x) ((x)*(x))
#define mp make_pair
#define fi first
#define se second
#define upmin(x,y) x=min(x,y)
#define upmax(x,y) x=max(x,y)
 
typedef long long ll;
typedef long double ld;
void read(int&x){bool fu=0;char c;for(c=getchar();c<=32;c=getchar());if(c=='-')fu=1,c=getchar();for(x=0;c>32;c=getchar())x=x*10+c-'0';if(fu)x=-x;};
void read(ll&x){bool fu=0;char c;for(c=getchar();c<=32;c=getchar());if(c=='-')fu=1,c=getchar();for(x=0;c>32;c=getchar())x=x*10+c-'0';if(fu)x=-x;};
char getc(){char c;for(c=getchar();c<=32;c=getchar());return c;}
 
const int N=500010;
const int D=N*2;
int n,ask,i,j,k,p,q,np,r,x,y,t,tot,c;ll K;
int edge,e[N*2],b[N*2],fir[N],last[N],num[N],F[N],Q[D];char a[N],o[26];
void clear(){edge=0;CL(fir,-1);CL(b,-1);}
void add(int x,int y){e[edge]=y;if(fir[x]==-1)fir[x]=edge;else b[last[x]]=edge;last[x]=edge++;}
void bfs()
{
    int i,j,k,p;
    Q[1]=1;
    for(i=j=1;i<=j;i++)
    for(k=fir[Q[i]];k>=0;k=b[k])if(e[k]!=F[Q[i]])
    Q[++j]=e[k],F[e[k]]=Q[i];
}
 
int l[D],fa[D],sum[D],ch[D][26];ll size[D];
 
void addSA(int i,int c)
{
    np=++tot;p=(F[i]==0)?1:num[F[i]];num[i]=np;l[np]=l[p]+1;
    for(;p&&(!ch[p][c]);p=fa[p])ch[p][c]=np;
    q=ch[p][c];
    if(p==0)fa[np]=1;
    else if(l[p]+1==l[q])fa[np]=q;
    else
    {
        r=++tot;CP(ch[r],ch[q]);l[r]=l[p]+1;fa[r]=fa[q];
        fa[np]=fa[q]=r;
        for(;p&&ch[p][c]==q;p=fa[p])ch[p][c]=r;
    }
}
 
int main()
{
    //freopen("1.in","r",stdin);
    //freopen("1.out","w",stdout);
 
    read(n);read(ask);
    rep(i,1,n)a[i]=getc();
    clear();rep(i,1,n-1)read(x),read(y),add(x,y),add(y,x);
    bfs();
     
    tot=1;
    rep(i,1,n)addSA(Q[i],a[Q[i]]-'a');
    rep(i,1,tot)sum[l[i]]++;
    rep(i,1,tot)sum[i]+=sum[i-1];
    rep(i,1,tot)Q[sum[l[i]]--]=i;
    _rep(i,tot,1){size[Q[i]]++;rep(t,0,25)size[Q[i]]+=size[ch[Q[i]][t]];}
    
    printf("%lld\n",size[1]);
    for(;ask;ask--)
    {
		rep(i,0,25)o[i]=getc();
        read(K);if(K>size[1]||K<=0){printf("-1\n");continue;}
        p=1;
        while((--K))
        {
            rep(t,0,25)
            {
				q=ch[p][o[t]-'a'];
            	if(K<=size[q]){putchar(o[t]);p=q;break;}
            	else K-=size[q];
			}
        }
        putchar('\n');
    }
     
    scanf("\n");
    return 0;
}
