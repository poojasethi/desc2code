#include <cstdio>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#define Rep(i,j,k) for (int i=(j); i<=(k); i++)
#define Repd(i,j,k) for (int i=(j); i>=(k); i--)
using namespace std;
typedef long long LL;

int n,Q;
char st[300000];
struct Tnode{
	int val;
	LL num;
	Tnode *par, *go[26];
} *root, *cur, node_pool[600000], *end[300000];
int g[300000],enext[600000],ey[600000],cnt[600000];
int head,tail,q[600000];

Tnode* newnode(int val){
	cur->val=val;
	cur->num=0;
	cur->par=0;
	memset(cur->go, 0, sizeof cur->go);
	return cur++;
}

Tnode* extend(Tnode *last, int w){
	Tnode *p=last, *np=newnode(p->val+1);
	while (p && !p->go[w])
		p->go[w]=np, p=p->par;
	if (!p)
		np->par=root;
	else{
		Tnode *q=p->go[w];
		if (q->val==p->val+1)
			np->par=q;
		else{
			Tnode *nq=newnode(p->val+1);
			memcpy(nq->go, q->go, sizeof q->go);
			nq->par=q->par;
			q->par=np->par=nq;
			while(p && p->go[w]==q)
				p->go[w]=nq, p=p->par;
		}
	}
	return np;
}

void builde(int x, int y, int e){
	ey[e]=y, enext[e]=g[x], g[x]=e;
}

int main(){

	
	scanf("%d%d",&n,&Q);
	scanf("%s",st+1);
	
	memset(g,0xff,sizeof g);
	Rep(i,1,n-1){
		int x,y; scanf("%d%d",&x,&y);
		builde(x,y,2*i-1);
		builde(y,x,2*i);
	}
	
	memset(end, 0, sizeof end);
	cur=node_pool;
	end[0]=root=newnode(0);
	
	q[head=tail=1]=0;
	builde(0,1,2*n);
	
	while (head<=tail){
		int x=q[head++];
		for(int y,k=g[x]; k!=-1; k=enext[k])	
			if (!end[y=ey[k]]){
				q[++tail]=y;
				end[y]=extend(end[x], st[y]-'a');
			}
	}

	int nn=cur-node_pool;
	memset(cnt,0,sizeof(cnt));
	Rep(i,0,nn-1) cnt[node_pool[i].val]++;
	Rep(i,1,n+10) cnt[i]+=cnt[i-1];
	Rep(i,0,nn-1) q[--cnt[node_pool[i].val]]=i;
	Repd(i,nn-1,0){
		Tnode *p=node_pool+q[i];
		p->num=1;
		Rep(w,0,25)
			if (p->go[w])
				p->num+=p->go[w]->num;
	}
			
	//cout<<root->num<<endl;
	printf("%lld\n",root->num);
	
	while(Q--){
		scanf("%s",st);
		LL kth; //cin>>kth;
		scanf("%lld\n",&kth);
		if (kth>root->num){
			puts("-1");
			continue;
		}
		//printf("%d\n",Q);
		Tnode *p=root;
		while(--kth)
			Rep(w1,0,25){
				int w=st[w1]-'a';
				if (p->go[w]){
					if (kth <= p->go[w]->num){
						printf("%c",'a'+w);
						p=p->go[w];
						break;
					}else
						kth-=p->go[w]->num;
				}
			}
		printf("\n");
	}
	
    return 0;
}
