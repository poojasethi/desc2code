#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
 
using namespace std;
 
#define MOD 1000000007
#define MAXN 20
    
// The transform:
void tf(int X[], int p, int q)
{
    if (p+1 == q) {
        //base case, do nothing for a single element
    } else {
        // Split in two parts.
        int mid = (p + q) / 2;
        // run the transform in each part.
        tf(X, p, mid);
        tf(X, mid, q);
        // Add the second half to the corresponding position in the first half:
        for (int i=0; i<mid-p; i++) {
            X[mid + i] += X[p + i];
            if(X[mid + i] >= MOD) X[mid + i] -= MOD;
        }
    }
}
void utf(int X[], int p, int q)
{
    if (p+1 == q) {
        //Single element, do nothing.
    } else {
        int mid = (p + q) / 2;
        // Subtrack the second half from the corresponding position in the first half
        for (int i=0; i<mid-p; i++) {
            X[mid + i] -= X[p + i];
            if(X[mid + i] < 0) X[mid + i] += MOD;
        }
        // undo the transform in lower levels:
        utf(X, p, mid);
        utf(X, mid, q);
    }
}
 
int f[1 << MAXN],g[1 << MAXN],h[1 << MAXN];
int test[1 << MAXN];
 
int main(){
    ios::sync_with_stdio(0);
    
    int N;
    
    scanf("%d",&N);
    
    for(int i = 0;i < (1 << N);++i)
        scanf("%d",&f[i]);
    
    for(int i = 0;i < (1 << N);++i)
        scanf("%d",&g[i]);
    
    for(int i = 0;i < (1 << N);++i)
        scanf("%d",&h[i]);
    
    /*for(int i = 0;i < (1 << N);++i)
        for(int j = 0;j < (1 << N);++j)
            for(int k = 0;k < (1 << N);++k)
                test[i | j | k] = (test[i | j | k] + (long long)f[i] * g[j] % MOD * h[k]) % MOD;
    
    for(int i = 0;i < (1 << N);++i)
        printf("%d ",test[i]);
    printf("\n");*/
    
    tf(f,0,(1 << N));
    tf(g,0,(1 << N));
    tf(h,0,(1 << N));
    
    for(int i = 0;i < (1 << N);++i)
        f[i] = (long long)f[i] * g[i] % MOD * h[i] % MOD;
    
    utf(f,0,(1 << N));
    
    /*for(int i = 0;i < (1 << N);++i)
        printf("%d ",f[i]);
    printf("\n");*/
    
    long long ans = 0;
    
    for(int i = 0;i < (1 << N);++i)
        ans = (ans + (long long)f[i] * (1 << __builtin_popcount(i))) % MOD;
    
    printf("%lld\n",ans);
    
    return 0;
} 