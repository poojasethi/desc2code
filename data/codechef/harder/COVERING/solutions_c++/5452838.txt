#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <ctime>
#include <numeric>
#include <vector>
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <complex>
#include <deque>
#include <functional>
#include <list>
#include <map>
#include <string>
#include <sstream>
#include <set>
#include <stack>
#include <queue>
using namespace std;
typedef long long lng;
typedef unsigned long long ulng;
typedef unsigned int uint;
typedef unsigned char uchar;
typedef double ld;
typedef pair<int, int> PII;
typedef pair<short, short> PSS;
typedef pair<PII, int> PIII;
typedef pair<lng, lng> PLL;
typedef pair<ulng, ulng> PUU;
typedef pair<lng, int> PLI;
typedef pair<int, lng> PIL;
typedef pair<ld, ld> PDD;
template<class T> inline T sqr(T x) { return x * x; }
template<class T> inline string tostr(const T & x) { stringstream ss; ss << x; return ss.str(); }
inline lng parse(const string & s) { stringstream ss(s); lng x; ss >> x; return x; }
#define left asdleft
#define right asdright
#define link asdlink
#define unlink asdunlink
#define next asdnext
#define prev asdprev
#define y0 asdy0
#define y1 asdy1
#define mp make_pair
#define pb push_back
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define clr(ar,val) memset(ar, val, sizeof(ar))
#define istr stringstream
#define forn(i,n) for(int i=0;i<(n);++i)
#define forv(i,v) forn(i,sz(v))
#define X first
#define Y second
#define hash asdhash
#define move asdmove
const ld EPS = 1e-9;
const int INF = 1000*1000*1000;
const char CINF = 102;
const lng LINF = INF * 1ll * INF;
const ld DINF = 1e200;
const ld PI = 3.1415926535897932384626433832795l;
int gcd(int a,int b){return a?gcd(b%a,a):b;}
lng gcd(lng a,lng b){return a?gcd(b%a,a):b;}
lng powmod(lng a,lng p,lng m){lng r=1;while(p){if(p&1)r=r*a%m;p>>=1;a=a*a%m;}return r;}
#define FAIL { cerr<<"assertion failed on line "<<__LINE__<<endl; exit(123);}
 
int n;
const lng mod=INF+7;
struct func{
  vector<lng> A;
 
  void read(){
    A.resize(1<<n);
    forn(i,1<<n){
      cin>>A[i];
    }
  }
 
  void sum(){
    for(int i=n-1;i>=0;--i){
      forn(m,1<<n){
        if(m&(1<<i))
          A[m]+=A[m^(1<<i)];
      }
    }
    forn(m,1<<n){
      A[m]%=mod;
    }
  }
 
  void diff(){
    forn(i,n){
      forn(m,1<<n){
        if(m&(1<<i))
          (A[m]+=mod-A[m^(1<<i)])%=mod;
      }
    }
  }
 
  func& operator*=(const func &b){
    forn(i,1<<n){
      (A[i]*=b.A[i])%=mod;
    }
    return *this;
  }
 
  static int bitcnt(int a){
    int r=0;
    while(a){
      r+=a&1;
      a>>=1;
    }
    return r;
  }
 
  lng ans()const{
    lng r=0;
    forn(m,1<<n){
      (r+=A[m]*(1<<bitcnt(m)))%=mod;
    }
    return r;
  }
 
  void print(){
    forv(i,A){
      cout<<A[i]<<' ';
    }
    cout<<endl;
  }
 
  func brutesum(){
    func r;
    r.A.resize(1<<n);
    forn(m,1<<n){
      for(int s=m;;s=(s-1)&m){
        (r.A[m]+=A[s])%=mod;
        if(!s)
          break;
      }
    }
    return r;
  }
};
 
void stress_sum(){
  n=15;
  func a;
  a.A.resize(1<<n);
  forn(i,1<<n){
    a.A[i]=rand()%mod;
  }
  func b=a.brutesum();
  func a0=a;
  a.sum();
  if(a.A!=b.A){
    cerr<<"failed"<<endl;
    return;
  }
  a.diff();
  if(a.A!=a0.A){
    cerr<<"failed inv"<<endl;
    return;
  }
  cerr<<"passed"<<endl;
}
 
int main(){
	ios_base::sync_with_stdio(false);cin.tie(0);
 
  //stress_sum();return 0;
 
  cin>>n;
  func A,B,C;
  A.read();
  B.read();
  C.read();
  A.sum();
  B.sum();
  C.sum();
  A*=B;
  A*=C;
  A.diff();
  cout<<A.ans();
 
	return 0;
}
 