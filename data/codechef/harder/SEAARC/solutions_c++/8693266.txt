#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#include <vector>
using namespace std;
typedef long long LL;
const int Maxn=100005,mod=1000000007,Maxl=329;
int n,N=0,ans=0,L;
int a[Maxn],cnt[Maxn];
vector <int> pos[Maxn];

namespace Type1{
	int sum[Maxn];
	
	void work(bool del) {
		for (int x=1;x<=N;x++) {
			if (cnt[x]<=L) continue;
			for (int i=1;i<=n;i++)
				sum[i]=sum[i-1]+(a[i]==x);
			for (int y=1;y<=N;y++) {
				if ((y==x)||(del&&cnt[y]>L)) continue;
				int tmp0=0,tmp1=0;
				for (int j=0;j<pos[y].size();j++) {
					ans=(ans+LL(sum[pos[y][j]])*tmp0-tmp1)%mod;
					tmp0=(tmp0+sum[pos[y][j]])%mod;
					tmp1=(tmp1+LL(sum[pos[y][j]])*sum[pos[y][j]])%mod;
				}
			}
		}
	}
}

namespace Type2{
	class Bit{
		int v[Maxn];
		public:
			void add(int x,int c) {
				for (;x<=n;x+=x&-x)
					v[x]=(v[x]+c)%mod;
			}
			int query(int x) {
				int ret=0;
				for (;x;x-=x&-x)
					ret=(ret+v[x])%mod;
				return ret;
			}
	}T;
	
	int C4(int n) {
		return LL(n)*(n-1)*(n-2)*(n-3)/24%mod;
	}
	
	void work() {
		for (int i=1;i<=n;i++) {
			if (cnt[a[i]]>L) continue;
			int j=0;
			while (pos[a[i]][j]!=i) {
				ans=(ans+T.query(pos[a[i]][j]))%mod;
				j++;
			}
			for (int k=0;k<j;k++)
				T.add(pos[a[i]][k]+1,1);
			T.add(i,-j);
		}
		for (int i=1;i<=N;i++)
			if (cnt[i]<=L)
				ans=(ans-C4(cnt[i]))%mod;
	}
}

int main() {
	scanf("%d",&n);
	L=int(sqrt(n))+1;
	for (int i=1;i<=n;i++) {
		scanf("%d",a+i);
		N=max(N,a[i]);
		++cnt[a[i]];
		pos[a[i]].push_back(i);
	}
	Type1::work(false);
	reverse(a+1,a+n+1);
	for (int i=1;i<=N;i++) pos[i].clear();
	for (int i=1;i<=n;i++) pos[a[i]].push_back(i);
	Type1::work(true);
	Type2::work();
	cout<<(ans+mod)%mod<<endl;
	return 0;
}