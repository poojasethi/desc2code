#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
int qp(int a,ll b,int mo){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}
const int mo=1000000007;

ll c[111111][5];
int n;
int a[111111];

int cnt[111111];ll tot=0;
ll precal(){
	static int cnt[111111],cnt2[111111];
	static ll pr[111111],su[111111];
	ll an=0;
	for (int i=1;i<=n;i++){
		pr[i]=cnt[a[i]];
		cnt[a[i]]++;
	}
	for (int i=n;i>=1;i--){
		su[i]=cnt2[a[i]];
		cnt2[a[i]]++;
	}
	for (int i=n-1;i>=1;i--)su[i]+=su[i+1];
	for (int i=2;i<=n-1;i++)an+=pr[i]*su[i+1];
	//an=c[n][4]-an;
	ll totm=0;
	for (int i=1;i<=100000;i++){
		ll x=1ll*cnt[i]*(cnt[i-1])/2;
		tot+=x*totm;
		totm+=x;
	}
	return an-tot;
}

struct edge{
	int v,next;
}e[111111];int g[111111];int etot=0;
void ae(int u,int v){
	e[etot].v=v;e[etot].next=g[u];g[u]=etot++;
}
#define SZ 500

ll bit[111111];
void bitupd(int x,ll d){for (;x<=n;x+=x&-x)bit[x]+=d;}
ll bitque(int x){ll ans=0;for(;x;x-=x&-x)ans+=bit[x];return ans;}



void work(int *a,int n,ll &an1,ll &an2,ll &an3){
	static int cnt[111111],cnt2[111111];
	static ll pr[111111],su[111111];
	memset(cnt,0,sizeof(cnt));
	memset(cnt2,0,sizeof(cnt2));
	ll an=0;
	for (int i=1;i<=n;i++){
		pr[i]=cnt[a[i]];
		cnt[a[i]]++;
	}
	for (int i=n;i>=1;i--){
		su[i]=cnt2[a[i]];
		cnt2[a[i]]++;
	}
	for (int i=n-1;i>=1;i--)su[i]+=su[i+1];
	for (int i=2;i<=n-1;i++)an+=pr[i]*su[i+1];
	an3=0;
	for (int i=1;i<=100000;i++)an3+=c[cnt[i]][4];
	an-=an3;
	ll totm=0;
	for (int i=1;i<=100000;i++){
		ll x=1ll*cnt[i]*(cnt[i]-1)/2;
		tot+=x*totm;
		totm+=x;
	}
	an1=an;
	an2=tot;
}
int smal[111111],stot=0;



ll work2(int x){
	static int lef[111111];
	static ll pre[111111];
	for (int i=1;i<=n;i++){
		lef[i]=lef[i-1]+(a[i]==x);
	}
	memset(pre,0,sizeof(pre));
	ll an=0;
	for (int i=1;i<=n;i++){
		if(a[i]!=x)an+=lef[i]*pre[a[i]];
		pre[a[i]]+=lef[i];
	}
	static int cnt[111111];
	memset(cnt,0,sizeof(cnt));
	ll tmp=0;
	for (int i=n;i>=1;i--){
		if(a[i]!=x){
			tmp+=cnt[a[i]];
			cnt[a[i]]++;
		}else{
			an-=tmp*(2*lef[i]-1);
		}
	}
	return an;
}
ll work3(int x){
	static int rig[111111];
	static ll suf[111111];
	for (int i=n;i>=1;i--){
		rig[i]=rig[i+1]+(a[i]==x);
	}
	memset(suf,0,sizeof(suf));
	ll an=0;
	for (int i=n;i>=1;i--){
		if(::cnt[a[i]]>=SZ)continue;
		if(a[i]!=x)an+=rig[i]*suf[a[i]];
		suf[a[i]]+=rig[i];
	}
	static int cnt[111111];
	memset(cnt,0,sizeof(cnt));
	ll tmp=0;
	for (int i=1;i<=n;i++){
		if(a[i]!=x){
			if(::cnt[a[i]]>=SZ)continue;
			tmp+=cnt[a[i]];
			cnt[a[i]]++;
		}else{
			an-=tmp*(2*rig[i]-1);
		}
	}
	return an;
}

int main()
{
	c[0][0]=1;
	for (int i=1;i<=100000;i++){
		c[i][0]=1;
		for (int j=1;j<=4;j++)c[i][j]=c[i-1][j-1]+c[i-1][j];
	}
	scanf("%d",&n);
	for (int i=1;i<=n;i++)scanf("%d",&a[i]);
	for (int i=1;i<=n;i++)cnt[a[i]]++;
	//ll su1=precal();

	memset(g,-1,sizeof(g));
	for (int i=n;i>=1;i--)if(cnt[a[i]]<SZ){
		ae(a[i],i);
	}

	ll su2=0;
	for (int i=1;i<=n;i++)if(cnt[a[i]]<SZ){
		smal[++stot]=a[i];
		ll ri=bitque(i);
		for (int j=g[a[i]];~j;j=e[j].next){
			if(e[j].v>=i)break;
			su2+=ri-bitque(e[j].v);
		}
		for (int j=g[a[i]];~j;j=e[j].next){
			if(e[j].v>=i)break;
			bitupd(e[j].v,1);
		}
	}
	ll an1,an2,an3;work(smal,stot,an1,an2,an3);

	ll ans=an2-(su2-an3)-an1;


	for (int i=1;i<=100000;i++)if(cnt[i]>=SZ){
		ans+=work2(i);
		ans+=work3(i);
	}
	printf("%d\n",int(ans%mo));
	return 0;
}
