#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<ctime>
#include<cstring>
using namespace std;

const int maxn=2000007+10;
const int Mhash=1000007;
int hash[Mhash];
int lnk[maxn];
int state[maxn][3];
int M[3][3],IM[3][3],IMP[3][3];
int T;
int Test;
int A,B,X,Y,Z,P,C,Q;
long long L,R;
vector<int> D;
int step;

void mul(int a[][3],int b[][3],int c[][3])
{
    int d[3][3]={0};
    for (int k=0;k<3;k++)
        for (int i=0;i<3;i++)
            for (int j=0;j<3;j++)
                d[i][j]=(d[i][j]+a[i][k]*b[k][j])%P;
    for (int i=0;i<3;i++)
        for (int j=0;j<3;j++)
            c[i][j]=d[i][j];
}

void putHash(int f[],int k)
{
    int s=f[0]*f[1]%Mhash;
    state[k][0]=f[0];
    state[k][1]=f[1];
    lnk[k]=hash[s];
    hash[s]=k;
}

int getHash(int f[])
{
    int res=P*P+10;
    int s=f[0]*f[1]%Mhash;
    for (int i=hash[s];i;i=lnk[i])
        if (state[i][0]==f[0] && state[i][1]==f[1]) res=min(res,i);
    if (res==P*P+10) return -1;
    return res;
}

int power(int a,int b)
{
    int res=1;
    for (;b;b/=2)
    {
        if (b&1) res=res*a%P;
        a=a*a%P;
    }
    return res;
}

int findLength(int f[3],int _g[3])
{
    int g[3]={_g[0],_g[1],_g[2]};
    for (int i=0;i<=P*P;i+=step)
    {
        if (i)
            if (g[0]==f[0] && g[1]==f[1]) return i;
        int w=getHash(g);
        if (w!=-1) return i+w;

        int h[3]={g[0],g[1],g[2]};
        g[0]=g[1]=g[2]=0;
        for (int u=0;u<3;u++)
            for (int v=0;v<3;v++)
                g[u]=(g[u]+IMP[u][v]*h[v])%P;
    }
    return -1;
}

long long calc(long long n)
{
    long long res=n/T*D.size();
    n%=T;
    int l=-1,r=D.size();
    while (l+1<r)
    if (D[(l+r)/2]<=n%T) l=(l+r)/2;
    else r=(l+r)/2;
    return res+l+1;
}

long long calc2(long long n,long long _d[])
{
    long long d[3]={_d[0],_d[1],_d[2]};
    if (d[0]>n) return 0;
    if (d[0]<d[2]) return 1;
    n-=d[2];
    d[0]-=d[2];
    return n/d[1]+(n%d[1]>=d[0]);
}

int sign[maxn];

void work0()
{
    long long ODD[3],EVEN[3];
    ODD[0]=EVEN[0]=2000000000000000000LL;
    for (int i=0;i<P;i++) sign[i]=0;
    for (int i=1;;i+=2)
    {
        if (i!=1) A=(A*Y+Z)%P;
        if (sign[A]) {ODD[1]=i-sign[A];ODD[2]=sign[A];break;}
        if (A==C) ODD[0]=i;
        sign[A]=i;
    }
    for (int i=0;i<P;i++) sign[i]=0;
    for (int i=2;;i+=2)
    {
        if (i!=2) B=(B*Y+Z)%P;
        if (sign[B]) {EVEN[1]=i-sign[B];EVEN[2]=sign[B];break;}
        if (B==C) EVEN[0]=i;
        sign[B]=i;
    }

    for (;Q--;)
    {
        scanf("%lld%lld",&L,&R);
        printf("%lld\n",calc2(R,ODD)+calc2(R,EVEN)-calc2(L-1,ODD)-calc2(L-1,EVEN));
    }
}

void work1()
{
    long long D[3];
    D[0]=2000000000000000000LL;
    for (int i=0;i<P;i++) sign[i]=0;
    for (int i=2;;i++)
    {
        if (i!=2) B=(B*X+Z)%P;
        if (sign[B]) {D[1]=i-sign[B];D[2]=sign[B];break;}
        if (B==C) D[0]=i;
        sign[B]=i;
    }
    A=(A==C);

    for (;Q--;)
    {
        scanf("%lld%lld",&L,&R);
        printf("%lld\n",calc2(R,D)-calc2(L-1,D)+(L==1)*A);
    }
}

int main()
{
   // freopen("input.txt","r",stdin);

    for (scanf("%d",&Test);Test--;)
    {
        scanf("%d%d%d%d%d%d%d%d",&A,&B,&X,&Y,&Z,&P,&C,&Q);  
        if (X==0) {work0();continue;}
        if (Y==0) {work1();continue;}
        memset(hash,0,sizeof(hash));
        memset(M,0,sizeof(M));
        memset(IM,0,sizeof(IM));
        
        M[0][0]=X;M[0][1]=Y;M[0][2]=Z;
        M[1][0]=1;M[2][2]=1;
        IM[0][0]=IM[1][1]=IM[2][2]=1;
        for (int i=0;i<3;i++)
        {
            int inverse=power(M[i][i],P-2);
            for (int j=0;j<3;j++)
            {
                M[i][j]=M[i][j]*inverse%P;
                IM[i][j]=IM[i][j]*inverse%P;
            }
            for (int j=0;j<3;j++)
            if (M[j][i] && j!=i)
            {
                int tmp=M[j][i];
                for (int k=0;k<3;k++)
                {
                    M[j][k]-=M[i][k]*tmp%P;
                    if (M[j][k]<0) M[j][k]+=P;
                    IM[j][k]-=IM[i][k]*tmp%P;
                    if (IM[j][k]<0) IM[j][k]+=P;
                }
            }
        }
        memset(M,0,sizeof(M));
        M[0][0]=X;M[0][1]=Y;M[0][2]=Z;
        M[1][0]=1;M[2][2]=1;
        

        //printf("%lf\n",(double)clock()/CLOCKS_PER_SEC);


        int f[3]={B,A,1};
        int g[3]={0,C,1};
        int h[3]={B,A,1};
        step=(int)sqrt((long long)P*P*P)+1;
        int tmp[3][3]={1,0,0,0,1,0,0,0,1};
        for (int i=1;i<step;i++)
        {
            int _[3]={h[0],h[1],h[2]};
            h[0]=h[1]=h[2]=0;
            for (int u=0;u<3;u++)
               for (int v=0;v<3;v++)
                   h[u]=(h[u]+M[u][v]*_[v])%P;
            putHash(h,i);
        }

        //printf("%lf\n",(double)clock()/CLOCKS_PER_SEC);

        for (int i=0;i<3;i++)
            for (int j=0;j<3;j++)
                tmp[i][j]=IM[i][j],IMP[i][j]=(i==j);
        for (int k=step;k;k/=2)
        {
            if (k&1) mul(IMP,tmp,IMP);
            mul(tmp,tmp,tmp);
        }

        T=P*P+1;
        T=findLength(f,f);
        D.clear();
        for (int i=0;i<P;i++) 
        {
            g[0]=i;
            int k=findLength(f,g);
            if (k!=-1) D.push_back(k%T+1);
        }


        sort(D.begin(),D.end());

        for (;Q--;)
        {
            scanf("%lld%lld",&L,&R);
            printf("%lld\n",calc(R)-calc(L-1));
        }
    }
}

        
        

        
