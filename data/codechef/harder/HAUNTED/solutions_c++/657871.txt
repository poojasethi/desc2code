#include <cstdio>

int M, N, C;

int D[2][40];
int grid[40];

int paths[40][400][2];
int lpaths[40];
int pt[40][2];

void add_path(int k, int ai, int aj, int bi, int bj)
{
    int i, j;
    if (ai == bi) {
        if (aj <= bj) {
            for (j = aj; j < bj; j++) {
                paths[k][lpaths[k]][0] = ai;
                paths[k][lpaths[k]][1] = ~(1 << j);
                lpaths[k]++;
            }
        } else {
            for (j = aj; j > bj; j--) {
                paths[k][lpaths[k]][0] = ai;
                paths[k][lpaths[k]][1] = ~(1 << j);
                lpaths[k]++;
            }
        }
    } else {
        if (ai <= bi) {
            for (i = ai; i < bi; i++) {
                paths[k][lpaths[k]][0] = i;
                paths[k][lpaths[k]][1] = ~(1 << aj);
                lpaths[k]++;
            }
        } else {
            for (i = ai; i > bi; i--) {
                paths[k][lpaths[k]][0] = i;
                paths[k][lpaths[k]][1] = ~(1 << bj);
                lpaths[k]++;
            }
        }
    }
}

void print_D (int time)
{
    int t = time % 2;
    int i, j;
    for (i = 0; i < M; i++) {
        for (j = 0; j < N; j++) {
            if (D[t][i] & (1 << j)) {
                printf("1");
            } else {
                printf("0");
            }
        }
        printf("\n");
    }
}

void print_paths (void)
{
    int i, j;
    for (i = 0; i < C; i++) {
        for (j = 0; j < lpaths[i]; j++) {
            printf("(%d,%d) -> ", paths[i][j][0], paths[i][j][1]);
        }
        printf("\n");
    }
}

int main (void)
{
    int T, K;
    int i, j;
    int n_wayp, time;
    int si, sj, ei, ej;
    char input[50];
    scanf("%d", &T);
    while (T--) {
        scanf("%d %d %d %d", &M, &N, &C, &K);

        for (i = 0; i < M; i++) {
            D[0][i] = D[1][i] = 0;
            grid[i] = 0;
        }

        for (i = 0; i < C; i++) {
            lpaths[i] = 0;
            scanf("%d", &n_wayp);
            int first_i, first_j;
            int prev_i, prev_j;
            if (n_wayp > 0) {
                scanf("%d %d", &prev_j, &prev_i);
            }
            first_i = prev_i; first_j = prev_j;
            for (j = 1; j < n_wayp; j++) {
                int wayp_i, wayp_j;
                scanf("%d %d", &wayp_j, &wayp_i);
                add_path(i, prev_i, prev_j, wayp_i, wayp_j);
                prev_i = wayp_i;
                prev_j = wayp_j;
            }
            if (n_wayp > 1) {
                add_path(i, prev_i, prev_j, first_i, first_j);
                pt[i][0] = 0; pt[i][1] = 1;
            } else if (n_wayp == 1) {
                paths[i][lpaths[i]][0] = first_i;
                paths[i][lpaths[i]][1] = ~(1 << first_j);
                lpaths[i] = 1;
                pt[i][0] = 0; pt[i][1] = 0;
            }

        }

        for (i = 0; i < M; i++) {
            scanf("%s", input);
            for (j = 0; j < N; j++) {
                if (input[j] != '#') {
                    grid[i] |= (1 << j);
                }
                if (input[j] == '@') {
                    si = i;
                    sj = j;
                } else if (input[j] == '$') {
                    ei = i;
                    ej = j;
                }
            }
        }

        //print_paths();

        D[0][si] |= (1 << sj);

        time = 0;

        while ((time < K) && !(D[time%2][ei] & (1 << ej))) {
            //print_D(time);
            int t0 = time % 2, t1 = (time + 1) % 2;
            for (i = 0; i < M; i++) {
                D[t1][i] = D[t0][i];
                D[t1][i] |= (D[t0][i] >> 1);
                D[t1][i] |= (D[t0][i] << 1);
                if (i > 0) {
                    D[t1][i] |= D[t0][i-1];
                }
                if (i < M - 1) {
                    D[t1][i] |= D[t0][i+1];
                }
                D[t1][i] &= grid[i];
                for (j = 0; j < C; j++) {
                    //pt[j][0] = time % lpaths[j]; pt[j][1] = (time + 1) % lpaths[j];
                    //printf("%d %d\n", pt[j][t0], pt[j][t1]);

                }
            }
            for (j = 0; j < C; j++) {
                if (lpaths[j] > 0) {
                    D[t1][paths[j][pt[j][t0]][0]] &= paths[j][pt[j][t0]][1];
                    D[t1][paths[j][pt[j][t1]][0]] &= paths[j][pt[j][t1]][1];
                    pt[j][t0]++; pt[j][t1]++;
                    if (pt[j][t0] == lpaths[j]) {
                        pt[j][t0] = 0;
                    }
                    if (pt[j][t1] == lpaths[j]) {
                        pt[j][t1] = 0;
                    }
                }
            }
            time++;
        }
        //print_D(time);
        if ((D[time%2][ei] & (1 << ej))) {
            printf("%d\n", time);
        } else {
            printf("-1\n");
        }
    }
    return 0;
}

