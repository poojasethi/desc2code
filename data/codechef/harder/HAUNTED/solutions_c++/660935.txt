#include <cstdio>
#include <cstdlib>
#include <cassert>

int exitx, exity, startx, starty, M, N, C, K;
int map[32], period[30], loc[30][300][2];

int solve(int limit){
	int t=0;
	int pos[30]={0};
	int player[32]={0};
	player[starty]|=1<<startx;
	while(t<limit && !(player[exity]&(1<<exitx))){
		int nplayer[32]={0};
		for(int i=1; i<=M; i++){
			nplayer[i]=(player[i]|(player[i]<<1)|(player[i]>>1)|player[i-1]|player[i+1])&map[i];
		}
		for(int i=0; i<C; i++){
			int x=loc[i][pos[i]][0];
			int y=loc[i][pos[i]][1]+1;
			nplayer[y]&=~(1<<x);
			if(++pos[i]==period[i])
				pos[i]=0;
			x=loc[i][pos[i]][0];
			y=loc[i][pos[i]][1]+1;
			nplayer[y]&=~(1<<x);
		}
		for(int i=1; i<=M; i++)
			player[i]=nplayer[i];
		t++;
	}
	return (player[exity]&(1<<exitx)) ? t : -1;
}

inline int sign(int x){
	return x>0 ? 1 : x<0 ? -1 : 0;
}

int main(){
	int TC;
	scanf("%d", &TC);
	assert(1<=TC && TC<=10);
	while(TC--){
		scanf("%d %d %d %d", &M, &N, &C, &K);
		assert(1<=M && M<=30 && 1<=N && N<=30);
		assert(0<=C && C<=30);
		assert(0<=K && K<=100000);
		for(int c=0; c<C; c++){
			int L, wp[10][2];
			scanf("%d", &L);
			assert(2<=L && L<=10);
			for(int i=0; i<L; i++){
				scanf("%d %d", &wp[i][0], &wp[i][1]);
				assert(0<=wp[i][0] && wp[i][0]<N && 0<=wp[i][1] && wp[i][1]<M);
			}
			int len=0;
			for(int i=0; i<L; i++){
				int x1=wp[i][0], y1=wp[i][1];
				int x2=wp[(i+1)%L][0], y2=wp[(i+1)%L][1];
				assert((x1==x2) ^ (y1==y2));
				while(x1!=x2 || y1!=y2){
					loc[c][len][0]=x1;
					loc[c][len][1]=y1;
					len++;
					x1+=sign(x2-x1);
					y1+=sign(y2-y1);
				}
			}
			period[c]=len;
		}
		map[0]=map[M+1]=0;
		starty=exity=-1;
		for(int i=1; i<=M; i++){
			char buf[32];
			scanf("%s", buf);
			map[i]=0;
			for(int j=0; j<N; j++){
				if(buf[j]!='#')
					map[i]|=1<<j;
				if(buf[j]=='@'){
					assert(starty==-1);
					startx=j;
					starty=i;
				}
				if(buf[j]=='$'){
					assert(exity==-1);
					exitx=j;
					exity=i;
				}
			}
		}
		assert(starty!=-1 && exity!=-1);
		for(int c=0; c<C; c++)
			assert(loc[c][0][0]!=startx || loc[c][0][1]+1!=starty);
		printf("%d\n", solve(K));
	}
	return 0;
}
