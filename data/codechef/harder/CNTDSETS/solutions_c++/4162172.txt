// #includes {{{
#include <algorithm>
#include <numeric>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <list>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cmath>
using namespace std;
// }}}
// pre-written code {{{
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define RREP(i,a,b) for(int i=(int)(a);i<(int)(b);++i)
#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)
#define LET(x,a) __typeof(a) x(a)
//#define IFOR(i,it,c) for(__typeof((c).begin())it=(c).begin();it!=(c).end();++it,++i)
#define ALL(c) (c).begin(), (c).end()
#define MP make_pair

#define EXIST(e,s) ((s).find(e)!=(s).end())

#define RESET(a) memset((a),0,sizeof(a))
#define SET(a) memset((a),-1,sizeof(a))
#define PB push_back
#define DEC(it,command) __typeof(command) it=command

const int INF=0x3f3f3f3f;

typedef long long Int;
#ifdef __MINGW32__
typedef double rn;
#else
typedef long double rn;
#endif

typedef pair<int,int> pii;

/*
#ifdef MYDEBUG
#include"debug.h"
#include"print.h"
#endif
*/
// }}}

//{{{ io
FILE *file_in=stdin,*file_out=stdout;
#define fin normal_in
#define fout normal_out
//const char fname[]="";
//FILE *fin=fopen(fname,"r"),*fout=fopen(fname,"w");
#ifdef __MINGW32__
#define LLD "%I64d"
#define LLU "%I64u"
#else
#define LLD "%lld"
#define LLU "%llu"
#endif
struct NORMAL_IN{
	bool cnt;
	NORMAL_IN():cnt(true){}
	operator int() const {return cnt;}
#define endl "\n"
	NORMAL_IN& operator>>(int &n){cnt=fscanf(file_in,"%d",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(unsigned int &n){cnt=fscanf(file_in,"%u",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(long long &n){cnt=fscanf(file_in,LLD,&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(unsigned long long &n){cnt=fscanf(file_in,LLU,&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(double &n){cnt=fscanf(file_in,"%lf",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(long double &n){cnt=fscanf(file_in,"%Lf",&n)!=EOF;return *this;}
	NORMAL_IN& operator>>(char *c){cnt=fscanf(file_in,"%s",c)!=EOF;return *this;}
	NORMAL_IN& operator>>(string &s){
		s.clear();
		for(bool r=false;;){
			const char c=getchar();
			if(c==EOF){ cnt=false; break;}
			const int t=isspace(c);
			if(!r and !t)r=true;
			if(r){
				if(!t)s.push_back(c);
				else break;
			}
		}
		return *this;
	}
	template<class T>
		NORMAL_IN& operator>>(vector<T> &v){
			int n;fscanf(file_in,"%d",&n);
			REP(i,n){
				T t;*this>>t;
				v.push_back(t);
			}
		}
} normal_in;

struct NORMAL_OUT{
	NORMAL_OUT& operator<<(const int &n){fprintf(file_out,"%d",n);return *this;}
	NORMAL_OUT& operator<<(const unsigned int &n){fprintf(file_out,"%u",n);return *this;}
	NORMAL_OUT& operator<<(const long long &n){fprintf(file_out,LLD,n);return *this;}
	NORMAL_OUT& operator<<(const unsigned long long &n){fprintf(file_out,LLU,n);return *this;}
	NORMAL_OUT& operator<<(const double &n){fprintf(file_out,"%lf",n);return *this;}
	NORMAL_OUT& operator<<(const long double &n){fprintf(file_out,"%Lf",n);return *this;}
	NORMAL_OUT& operator<<(const char c[]){fprintf(file_out,"%s",c);return *this;}
	NORMAL_OUT& operator<<(const string &s){fprintf(file_out,"%s",s.c_str());return *this;}
} normal_out;
//}}}

const Int mod = 1000000007;

inline Int sum(Int a, Int b, Int m = mod){
	return (a+b)%m;
}
inline Int mul(Int a, Int b, Int m = mod){
	return a*b%m;
}

Int normalize(Int a, Int m = mod){
	return (a%m+m)%m;
}

//{{{ pow
/* (x^k)%m */
inline Int powMod(Int x, Int k, Int m = mod){
	Int res;
	if(k==0) return 1;
	res = powMod(x,k/2,m);
	res = mul(res,res,m);
	if(k%2) res = mul(res,x,m);
	return res;
}
//}}}

//{{{ combination using dp
typedef int T;
int comb(int n,int r){
	static vector<vector<bool> > vis;
	static vector<vector<T> > comb_t;
	if(vis.size()<n+1)vis.resize(n+1,vector<bool>()),comb_t.resize(n+1);
	if(vis[n].size()<r+1)vis[n].resize(r+1,false),comb_t[n].resize(r+1);
	if(vis[n][r])return comb_t[n][r];
	vis[n][r]=true;
	if(r==0 or n==r)return comb_t[n][r]=1;
	return comb_t[n][r]=sum(comb(n-1,r-1),comb(n-1,r));
}
//}}}

int N,D;

Int calc(Int D){
	Int s = 0;
	for(int k=0;k<=N;k++){
		Int T = 1;
		T*=powMod(D+1,N-k,mod-1);
		T%=mod-1;
		T*=powMod(D,k,mod-1);
		T%=mod-1;
		Int d = mul(comb(N,k),powMod(2,T),mod);
		if(k%2==0)s+=d;
		else s-=d;
		s=normalize(s,mod);
	}
	return(s);
}

void main2(){
	fin>>N>>D;
//	fout<<(calc(D)-calc(D-1))<<endl;
	fout<<normalize(calc(D)-calc(D-1))<<endl;
}

//{{{ main function
int main() {
	int T;fin>>T;
	REP(ct, T){
//		fout<<"Case "<<ct+1<<": ";
		main2();
	}
	return 0;
}
//}}}
