#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

#define REP0(i, n) for (int i = 0; i < n; i++)
#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define FORE(i, x) for (int i = fi[x]; i != -1; i = e[i].n)


//C(N, k) * 2^(D^k * (D + 1)^(N-k))

#define MAX_N 1100
#define MOD 1000000007

int fac[MAX_N], ifac[MAX_N];
int n, m, test;

inline int mpow(int x, int y, int z = MOD)
{
	   int t = 1;
	   while (y){ if (y & 1) t = t * 1LL * x % z; x = x * 1LL * x % z, y >>= 1;}
	   return t;
}
inline int rev(int x) { return mpow(x, MOD - 2); }
inline int C(int x, int y)
{ return fac[x] * 1LL * ifac[y] % MOD * 1LL * ifac[x - y] % MOD; }

int get(int m)
{
	int ans = 0;
	REP0(i, n + 1)
	{
		int t = mpow(m, i, MOD - 1) * 1LL * mpow(m + 1, n - i, MOD - 1) % (MOD - 1);
	//	printf ("%d => %d %d %d %d\n", n, i, C(n, i), t, mpow(-1, i) * C(n, i) * 1LL * mpow(2, t) % MOD);
		(ans += mpow(-1, i) * C(n, i) * 1LL * mpow(2, t) % MOD) %= MOD;
		if (ans < 0) ans += MOD;
	}
	return ans;
}

int main(void)
{
	scanf ("%d", &test), fac[0] = ifac[0] = 1;
	REP1(i, 1000) fac[i] = fac[i - 1] * 1LL * i % MOD, ifac[i] = rev(fac[i]);
//	REP1(i, 10) printf ("%d ", fac[i]); puts("");
	while (test-- > 0)
	{
		  scanf ("%d%d", &n, &m);
		  printf ("%d\n", (get(m) - get(m - 1) + MOD) % MOD);
	}
	return 0;
}
