#include <algorithm>
#include <bitset>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <list>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

#define MX 1000005
#define MOD 1000000007

using namespace std;

struct Node {
	int l, r, pardp, chdNum;
	Node *par, *sLink;
	Node *chd[26];
	
	Node() {
		l = r = pardp = chdNum = 0;
		par = sLink = NULL;
		for (int i = 0; i < 26; i++) chd[i] = NULL;
	}
	int len() {
		return r - l;
	}
	int depth() {
		return pardp + len();
	}
	bool inEdge(int pos) {
		return pardp <= pos && pos < depth();
	}
	void setEdge(Node *child, int l, int r, char *S) {
		child -> par = this;
		chdNum++;
		child -> pardp = depth();
		child -> l = l, child -> r = r;
		chd[S[l] - 'a'] = child;
	}
};

struct STree {
	char *S;
	int m, jj, tot;
	long long substr;
	Node *root, *needSLink, *cur;
	bool needWalk;
	vector<Node> V;
	queue<Node*> Q;
	
	STree(char *str) {
		S = str;
		m = strlen(S);
		jj = 1;
		tot = 0;
		V.reserve(m * 5);
		root = newNode();
		cur = newNode();
		root -> setEdge(cur, 0, m, S);
		Q.push(cur);
		needSLink = NULL;
		needWalk = true;
		substr = 1;
	}
	Node *newNode() {
		V.push_back(Node());
		return &V[tot++];
	}
	Node *walk_down(Node *c, int j, int i) {
		if (i - j + 1 > 0)
			for (int h = j + c -> depth(); !c -> inEdge(i - j); h += c -> len()) c = c -> chd[S[h] - 'a'];
		return c;
	}
	void addSLink(Node *c) {
		if (needSLink) {
			needSLink -> sLink = c;
			needSLink = NULL;
		}
	}
	void extend(int i) {
		char cc = S[i + 1];
		int k, pos;
		Node *leaf, *split;
		
		for (; jj <= i + 1; jj++) {
			if (needWalk) {
				if (!cur -> sLink && cur -> par) cur = cur -> par;
				cur = (cur -> sLink) ? cur -> sLink : root;
				cur = walk_down(cur, jj, i);
			}
			needWalk = true;
			k = i - jj + 1;
			if (k == cur -> depth()) {
				addSLink(cur);
				if (cur -> chd[cc - 'a']) {
					cur = cur -> chd[cc - 'a'];
					needWalk = false;
					break;
				} else {
					leaf = newNode();
					cur -> setEdge(leaf, i + 1, m, S);
					Q.push(leaf);
				}
			} else {
				pos = cur -> l + k - cur -> pardp;
				if (S[pos] == cc) {
					addSLink(cur);
					if (cur -> chdNum || jj != cur -> l - cur -> pardp) {
						needWalk = false;
						break;
					}
				} else {
					split = newNode();
					leaf = newNode();
					cur -> par -> setEdge(split, cur -> l, pos, S);
					cur -> par -> chdNum--;
					split -> setEdge(cur, pos, cur -> r, S);
					split -> setEdge(leaf, i + 1, m, S);
					Q.push(leaf);
					addSLink(split);
					if (split -> depth() == 1) split -> sLink = root;
					else needSLink = split;
					cur = split;
				}
			}
		}
		substr += Q.size();
	}
	void erase(int i) {
		Node *tmp = Q.front();
		Q.pop();
	
		while (!tmp -> chdNum)
			if (cur != tmp) {
				tmp -> par -> chd[S[tmp -> l] - 'a'] = NULL;
				tmp -> par -> chdNum--;
				substr -= min(tmp -> r, i + 1) - tmp -> l;
				tmp = tmp -> par;
			} else {
				int k = i - jj + 1 - tmp -> pardp;
				substr -= min(tmp -> r, i + 1) - tmp -> l - k;
				tmp -> l = i + 1 - k;
				tmp -> r = m;
				Q.push(tmp);
				break;
			}
		if (!tmp -> chdNum) {
			cur = cur -> par;
			cur = (cur == root) ? root : cur -> sLink;
			cur = walk_down(cur, ++jj, i);
			needWalk = false;
		}
	}
};

char str[MX];
bool op[MX];

main() {
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int Q, en, i, k;
	long long rlt = 1;
	char tmp[2];
	
	scanf("%d", &Q);
	for (en = i = 0; i < Q; i++) {
		scanf("%s", tmp);
		if (tmp[0] == '+') {
			op[i] = true;
			scanf("%s", str + en);
			en++;
		}
	}
	STree tree(str);
	for (i = 0, k = 1; k < Q; k++) {
		if (op[k]) tree.extend(i++);
		else tree.erase(i);
		rlt = (rlt + tree.substr) % MOD;
	}
	cout << rlt << endl;
}
