#include <iostream>
#include <cstring>
#include <cstdio>
#include <queue>
#include <map>

using namespace std;
const int Maxn = 1e6 + 10;
const int Mod =1000000007;
typedef long long ll;
struct Node
{
	map<char, int> mp;
	int fail, s, t, pa;
	int next(char c)
	{
		if (s == -2) return 1;
		map<char, int> :: iterator it = mp.find(c);
		if (it == mp.end()) return 0;
		return it -> second;
	}
	void clear(int _s, int _t, int _pa)
	{
		mp.clear();
		s = _s, t = _t, fail = 0, pa = _pa;
	}
	int len() {return t - s;}
}node[Maxn << 1];
int size, end, ini;
void init()
{
	node[0].clear(-2, -1, -1);
	node[1].clear(-1, 0, 0);
	size = 2, end = 1, ini = 0;
}
queue<int> leaves;
void go(char str[], int t)
{
	while (ini <= t)
	{
		int p = node[end].next(str[ini]);
		if (node[p].len() > t - ini) break;
		ini += node[p].len();
		end = p;
	}
}
void add(char str[], int i)
{
	char c = str[i];
	int last = 1, cur;
	for (; ini <= i; end = node[end].fail, go(str, i))
	{
		cur = end;
		if (ini < i)
		{
			char c1 = str[ini];
			int p = node[end].next(c1);
			int k = node[p].s + i - ini;
			if (str[k] == c) break;
			cur = size++;
			node[cur].clear(node[p].s, k, end);
			node[cur].mp[str[k]] = p;
			node[end].mp[c1] = cur;
			node[p].pa = cur;
			node[p].s = k;
		}
		else if (node[end].next(c)) break;
		int p = size++;
		node[p].clear(i, Maxn, cur);
		node[cur].mp[c] = p;
		leaves.push(p);
		if (last != 1) node[last].fail = cur;
		last = cur;
	}
	if (last != 1) node[last].fail = cur;
	go(str, i + 1);
}

void delNode(char str[], int cur)
{
	char c = node[cur].mp.begin()->first;
	int ch = node[cur].next(c);
	int pa = node[cur].pa;
	node[ch].s -= node[cur].len();
	node[ch].pa = pa;
	node[pa].mp[str[node[cur].s]] = ch;
	if (end == cur)
		end = pa, ini -= node[cur].len();
}
int del(char str[], int i)
{
	int lea = leaves.front();
	int ret = i + 1 - node[lea].s;
	leaves.pop();
	int pa = node[lea].pa;
	int active = end;
	if (ini <= i) active = node[end].next(str[ini]);
	if (lea != active)
	{
		node[pa].mp.erase(str[node[lea].s]);
		if (node[pa].mp.size() == 1 && pa != 1) delNode(str, pa);
	}
	else
	{
		node[lea].s = ini;
		end = node[end].fail;
		go(str, i + 1);
		leaves.push(lea);
		ret -= i + 1 - node[lea].s;
	}
	return ret;
}
char str[Maxn];
int n;
int main()
{
	ll ans = 0, sum = 0;
	scanf("%d", &n);
	init();
	int num = 0;
	for (int i = 0; i < n; ++i)
	{
		char op[4];
		scanf("%s", op);
		if (op[0] == '+')
		{
			scanf("%s", str + num);
			add(str, num++);
			ans += leaves.size();
		}
		else
		{
			ans -= del(str, num - 1);
		}
		sum += ans;
		sum %= Mod;
	}
	printf("%lld\n", sum);
}
