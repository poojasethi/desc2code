#include <algorithm>
#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>

#define MX 1000005
#define SIGMA 26
#define MOD 1000000007

using namespace std;

struct Node {
	int l, r, pardp, chdNum;
	Node *par, *sLink;
	Node *chd[SIGMA];
	
	Node() {
		l = r = pardp = chdNum = 0;
		par = sLink = NULL;
		for (int i = 0; i < 26; i++) chd[i] = NULL;
	}
	inline int len() {
		return r - l;
	}
	inline int depth() {
		return pardp + len();
	}
	inline bool inEdge(int pos) {
		return pardp <= pos && pos < depth();
	}
	void setEdge(Node *child, int l, int r, char *s) {
		chd[s[l] - 'a'] = child;
		chdNum++;
		child -> par = this;
		child -> pardp = depth();
		child -> l = l, child -> r = r;
	}
};

struct STree {
	char *S;
	int m, jj, tot;
	long long substr;
	bool needWalk;
	Node *root, *cur, *needSLink;
	vector<Node> V;
	queue<Node*> Q;
	
	STree(char *s) {
		S = s;
		m = strlen(S);
		tot = 0;
		V.reserve(m * 2 + 10);
		root = newNode();
		cur = newNode();
		Q.push(cur);
		root -> setEdge(cur, 0, m, S);
		jj = 1;
		needSLink = NULL;
		substr = 1;
		needWalk = true;
	}
	Node *newNode() {
		V.push_back(Node());
		return &V[tot++];
	}
	void addSLink(Node *c) {
		if (needSLink) {
			needSLink -> sLink = c;
			needSLink = NULL;
		}
	}
	Node *walk_down(Node *c, int j, int i) {
		if (i - j + 1 > 0)
			for (int h = j + c -> depth(); !c -> inEdge(i - j); h += c -> len()) c = c -> chd[S[h] - 'a'];
		return c;
	}
	void extend(int i) {
		int k, pos;
		char c = S[i + 1];
		Node *leaf, *split;
		
		for (; jj <= i + 1; jj++) {
			if (needWalk) {
				if (!cur -> sLink && cur -> par) cur = cur -> par;
				cur = (cur -> sLink) ? cur -> sLink : root;
				cur = walk_down(cur, jj, i);
			}
			needWalk = true;
			k = i - jj + 1;
			if (k == cur -> depth()) {
				addSLink(cur);
				if (cur -> chd[c - 'a']) {
					cur = cur -> chd[c - 'a'];
					needWalk = false;
					break;
				} else {
					leaf = newNode();
					cur -> setEdge(leaf, i + 1, m, S);
					Q.push(leaf);
				}
			} else {
				pos = cur -> l + k - cur -> pardp;
				if (S[pos] == c) {
					addSLink(cur);
					if (cur -> chdNum || pos != i + 1) {
						addSLink(cur);
						needWalk = false;
						break;
					}
				} else {
					split = newNode();
					leaf = newNode();
					Q.push(leaf);
					cur -> par -> setEdge(split, cur -> l, pos, S);
					cur -> par -> chdNum--;
					split -> setEdge(cur, pos, cur -> r, S);
					split -> setEdge(leaf, i + 1, m, S);
					addSLink(split);
					if (split -> depth() == 1) split -> sLink = root;
					else needSLink = split;
					cur = split;
				}
			}
		}
		substr += Q.size();
	}
	void erase(int i) {
		int k;
		Node *tmp = Q.front();
		
		Q.pop();
		while (!tmp -> chdNum)
			if (cur != tmp) {
				tmp -> par -> chd[S[tmp -> l] - 'a'] = NULL;
				tmp -> par -> chdNum--;
				substr -= min(tmp -> r, i + 1) - tmp -> l;
				tmp = tmp -> par;
			} else {
				k = (i - jj + 1) - cur -> pardp;
				substr -= min(tmp -> r, i + 1) - tmp -> l - k;
				tmp -> l = i + 1 - k;
				tmp -> r = m;
				Q.push(tmp);
				break;
			}
		
		if (!tmp -> chdNum) {
			cur = cur -> par;
			if (cur != root) cur = cur -> sLink;
			cur = walk_down(cur, ++jj, i);
		}
	}
};

char s[MX];
bool op[MX];

main() {
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int Q, i, k;
	char t[2];
	long long rlt(1);
	
	scanf("%d", &Q);
	for (i = k = 0; k < Q; k++) {
		scanf("%s", t);
		if (t[0] == '+') {
			op[k] = true;
			scanf("%s", &s[i++]);
		}
	}

	STree tree(s);
	for (i = 0, k = 1; k < Q; k++) {
		if (op[k]) tree.extend(i++);
		else tree.erase(i);
		rlt = (rlt + tree.substr) % MOD;
	}
	printf("%lld\n", rlt);
}
