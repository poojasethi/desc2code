#include <set>
#include <cstdio>
#include <cstring>
using namespace std;

const int maxn = 1000005;
const int Mod = 1e9+7;

void sub(int &a,const int &b){
    a-=b;
    if(a<0) a+=Mod;
}

void add(int &a,const int &b){
    a+=b;
    if(a>=Mod) a-=Mod;
}

int wa[maxn],wb[maxn],wv[maxn],Ws[maxn];
int cmp(int *r,int a,int b,int l)
{return r[a]==r[b]&&r[a+l]==r[b+l];}
void da(int *r,int *sa,int n,int m)
{
     int i,j,p,*x=wa,*y=wb,*t;
     for(i=0;i<m;i++) Ws[i]=0;
     for(i=0;i<n;i++) Ws[x[i]=r[i]]++;
     for(i=1;i<m;i++) Ws[i]+=Ws[i-1];
     for(i=n-1;i>=0;i--) sa[--Ws[x[i]]]=i;
     for(j=1,p=1;p<n;j*=2,m=p)
     {
       for(p=0,i=n-j;i<n;i++) y[p++]=i;
       for(i=0;i<n;i++) if(sa[i]>=j) y[p++]=sa[i]-j;
       for(i=0;i<n;i++) wv[i]=x[y[i]];
       for(i=0;i<m;i++) Ws[i]=0;
       for(i=0;i<n;i++) Ws[wv[i]]++;
       for(i=1;i<m;i++) Ws[i]+=Ws[i-1];
       for(i=n-1;i>=0;i--) sa[--Ws[wv[i]]]=y[i];
       for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i<n;i++)
       x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
     }
     return;
}
int rank[maxn],height[maxn];
void calheight(int *r,int *sa,int n)
{
     int i,j,k=0;
     for(i=1;i<=n;i++) rank[sa[i]]=i;
     for(i=0;i<n;height[rank[i++]]=k)
     for(k?k--:0,j=sa[rank[i]-1];r[i+k]==r[j+k];k++);
     return;
}
int RMQ[maxn];
int mm[maxn];
int best[20][maxn];
void initRMQ(int n)
{
     int i,j,a,b;
     for(mm[0]=-1,i=1;i<=n;i++)
     mm[i]=((i&(i-1))==0)?mm[i-1]+1:mm[i-1];
     for(i=1;i<=n;i++) best[0][i]=i;
     for(i=1;i<=mm[n];i++)
     for(j=1;j<=n+1-(1<<i);j++)
     {
       a=best[i-1][j];
       b=best[i-1][j+(1<<(i-1))];
       if(RMQ[a]<RMQ[b]) best[i][j]=a;
       else best[i][j]=b;
     }
     return;
}
int askRMQ(int a,int b)
{
    int t;
    t=mm[b-a+1];b-=(1<<t)-1;
    a=best[t][a];b=best[t][b];
    return RMQ[a]<RMQ[b]?a:b;
}
int lcp(int a,int b)
{
    int t;
    a=rank[a];b=rank[b];
    if(a>b) {t=a;a=b;b=t;}
    return(height[askRMQ(a+1,b)]);
}

char q[maxn];
int r[maxn], prev[maxn], next[maxn], sa[maxn];
set<int> S;
int main(){
    //freopen("1.txt","r",stdin);
	int Q, i, n = 0;
	scanf("%d",&Q);
	for(i=1;i<=Q;++i){
		char s[10];
		scanf("%s",s);
		q[i] = s[0];
		if(s[0] == '+'){
			scanf("%s", s);
			r[n++] = s[0];
		}
	}
	r[n] = 0;
	da(r, sa, n+1, 128);
	calheight(r, sa, n);
	for(i=1;i<=n;++i) RMQ[i] = height[i];
	initRMQ(n);
	int t = -1, s = 0, g = 0, over = 0, ans = 0;
	next[n] = n;
	for(int i = 1; i <= Q; ++i){
		if(q[i] == '+'){
			++t;
		}
		else{
			sub(over, lcp(prev[s], s));
			sub(over, lcp(s, next[s]));
			if(prev[s]<n && next[s]<n)
                add(over, lcp(prev[s], next[s]));
			prev[next[s]] = prev[s];
			next[prev[s]] = next[s];
			S.erase(rank[s]);
			++s;
		}

		for(;g<=t;++g){
			set<int>::iterator e = S.lower_bound(rank[g]);
			int pre;
			if(e == S.begin()){
				pre = n;
			}
			else pre = sa[*(--e)];
			prev[g] = pre;
			next[g] = next[pre];
			int L1=0,L2=0;
			if (prev[g]<n && (L1=lcp(prev[g],g))>=t-g+1) break;
			if (next[g]<n && (L2=lcp(next[g],g))>=t-g+1) break;
			add(over, L1+L2);
			if(prev[g]<n && next[g]<n) sub(over, lcp(prev[g], next[g]));
			prev[next[g]]=next[prev[g]]=g;
			S.insert(rank[g]);
		}
		int cur = (long long)(2*t-g-s+3)*(g-s)/2%Mod;
		sub(cur, over);
		add(ans, cur);
	}
	printf("%d\n", ans);
	return 0;
}
