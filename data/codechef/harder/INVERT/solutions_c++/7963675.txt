#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;
 
typedef long long LL;
typedef vector<int> VI;
 
#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)
 
template<class T> inline void amin(T &a, const T &b) { if (b<a) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }
template<class T>
struct TreapSeq {
    struct Node {
	T val;
	int s, p;
	bool rev;
	Node *l, *r;
	Node(const T &val=T()): val(val), s(1), p(rand()-1), rev(false) { l = r = NULL; }
	Node*& ch(bool R) { return R? r: l; }
	void push() {
	    if (rev) {
		swap(l, r);
		if (l) l->rev = !l->rev;
		if (r) r->rev = !r->rev;
		rev = false;
	    }
	}
    };
    Node *root;
    TreapSeq(Node *t=NULL): root(t) {}
    int size() { return size(root); }
    static inline int size(Node *x) { return x ? x->s : 0; }
    static inline void resize(Node *x) { if (x) x->s = 1 + size(x->l) + size(x->r); }
    Node* rot(Node *x, bool R) { // R = raise r? rotl?
	x->push(); x->ch(R)->push();
	Node *y = x->ch(R);
	x->ch(R) = y->ch(!R); resize(x);
	y->ch(!R) = x; resize(y);
	return y;
    }
    void insert(int n, const T &v) { root = insert(n, new Node(v), root); }
    Node* insert(int n, Node *t, Node *x) {
	if (!x) return t;
	x->push();
	bool R = size(x->l) < n;
	int m = R? n-size(x->l)-1: n;
	x->ch(R) = insert(m, t, x->ch(R)); resize(x);
	if (x->p < x->ch(R)->p) x = rot(x, R);
	return x;
    }
    Node* erase_first(Node *x, T &v) {
	x->push();
	if (!x->l) { v = x->val; Node *r = x->r; delete x; return r; }
	x->l = erase_first(x->l, v); resize(x);
	return x;
    }
    void erase(int n) { root = erase(n, root); }
    Node* erase(int n, Node *x) {
	if (!x) return NULL;
	x->push();
	if (size(x->l) == n) {
	    if (!x->r) return x->l;
	    x->r = erase_first(x->r, x->val); resize(x);
	    return x;
	}
	bool R = size(x->l) < n;
	x->ch(R) = erase(R? n-size(x->l)-1: n, x->ch(R)); resize(x);
	return x;
    }
    const T* at(int n) {
	Node *x = root;
	while (x) {
	    x->push();
	    if (size(x->l) == n) return &x->val;
	    if (size(x->l) > n) x = x->l;
	    else { n -= size(x->l)+1; x = x->r; }
	}
	return NULL;
    }
    void reverse() { root->rev = !root->rev; }
};
 
template<class T>
struct TreapSet {
    struct Node {
	T val;
	int s, p;
	Node *l, *r;
	Node(const T &val=T()): val(val), s(1), p(rand()) { l = r = NULL; }
	Node*& ch(bool R) { return R? r: l; }
    };
    Node *root;
    Node *node; int nodei, NODE_MAX;
    Node* new_node(const T &v) {
	node[nodei] = Node(v);
	return &node[nodei++];
    }
    TreapSet(int MAX=10000000): root(NULL), NODE_MAX(MAX) { // MAX = #insert
	nodei = 0;
	node = new Node[MAX];
    }
    int size() { return size(root); }
    static inline int size(Node *x) { return x ? x->s : 0; }
    static inline void resize(Node *x) { if (x) x->s = 1 + size(x->l) + size(x->r); }
    Node* rot(Node *x, bool R) { // R = raise r? rotl?
	Node *y = x->ch(R);
	x->ch(R) = y->ch(!R); resize(x);
	y->ch(!R) = x; resize(y);
	return y;
    }
    void insert(const T &v) { root = insert(v, root); }
    Node* insert(const T &v, Node *x) {
	if (!x) return new_node(v);
	// if (v == x->val) return x;
	bool R = x->val < v;
	x->ch(R) = insert(v, x->ch(R)); resize(x);
	if (x->p < x->ch(R)->p) x = rot(x, R);
	return x;
    }
    Node* erase_first(Node *x, T &v) { 
	if (!x->l) { v = x->val; return x->r; }
	x->l = erase_first(x->l, v); resize(x);
	return x;
    }
    void erase(const T &v) { root = erase(v, root); }
    Node* erase(const T &v, Node *x) {
	if (!x) return NULL;
	if (v == x->val) {
	    if (!x->r) return x->l;
	    x->r = erase_first(x->r, x->val); resize(x);
	    return x;
	}
	bool R = x->val < v;
	x->ch(R) = erase(v, x->ch(R)); resize(x);
	return x;
    }
    const T* find(const T &v) {
	Node *x = root;
	while (x) {
	    if (x->val == v) return &x->val;
	    x = x->ch(x->val < v);
	}
	return NULL;
    }
    const T* at(int n) {
	Node *x = root;
	while (x) {
	    if (size(x->l) == n) return &x->val;
	    if (size(x->l) > n) x = x->l;
	    else { n -= size(x->l)+1; x = x->r; }
	}
	return NULL;
    }
    const T* lower(const T &v) {
	Node *x = root, *ret = NULL;
	while (x) {
	    if (x->val < v && (!ret || ret->val < x->val)) ret = x;
	    x = x->ch(x->val < v);
	}
	return &ret->val;
    }
    const T* higher(const T &v) {
	Node *x = root, *ret = NULL;
	while (x) {
	    if (v < x->val && (!ret || x->val < ret->val)) ret = x;
	    x = x->ch(x->val <= v);
	}
	return &ret->val;
    }
    int count_lower(const T &v) {
	Node *x = root;
	int ret = 0;
	while (x){
	    if (x->val < v) ret++;
	    if (v <= x->val) x = x->l;
	    else { ret += size(x->l); x = x->r; }
	}
	return ret;
    }
};
 
struct RangeTree {
    vector<TreapSet<int> > d;
    int m;
    RangeTree(int n) {
	m=1;
	for (; m<n; ) m*=2;
	REP (i, 2) d.push_back(TreapSet<int>(0));
	REP (i, 2) d.push_back(TreapSet<int>(m/2));
	for (int i=4; i<2*m; i++) {
	    d.push_back(d[i/2].NODE_MAX/2);
	}
    }
    LL add(int p, int v) {
	LL ret = 0;
	p += m;
	for (; p > 1; p/=2) {
	    d[p].insert(v);
	    if (p % 2) ret += d[p-1].size() - d[p-1].count_lower(v+1);
	    else ret += d[p+1].count_lower(v);
	}
	return ret;
    }
};
 
int N, Q;
int A[200011], L[100011], R[100011], K[100011];
int B[100011], M;
int main() {
    scanf("%d%d", &N, &Q);
    REP (i, N) scanf("%d", A+i);
    REP (i, Q) scanf("%d%d%d", L+i, R+i, K+i), L[i]--, K[i]--;
 
    TreapSeq<int> AS, BS;
    VI a_ord, b_pos(N);
    REP (i, N) AS.insert(i, i);
    REP (i, Q) {
	for (int j=L[i]; j<R[i]; j++) {
	    int x = *AS.at(j);
	    a_ord.push_back(x);
	    BS.insert(K[i]+j-L[i], x);
	}
	for (int j=L[i]; j<R[i]; j++) AS.erase(L[i]);
	// REP (i, AS.size()) eprintf("%d ", A[*AS.at(i)]); eprintf("\n");
	// REP (i, BS.size()) eprintf("%d ", A[*BS.at(i)]); eprintf("\n");
    }
    REP (i, BS.size()) b_pos[*BS.at(i)] = i;
 
    
    RangeTree X(N);
    LL ans = 0;
    int cur = 0;
    REP (i, Q) {
	for (int j=L[i]; j<R[i]; j++) {
	    int id = a_ord[cur++];
	    int val = A[id], pos = b_pos[id];
	    ans += X.add(pos, val);
	}
	printf("%lld\n", ans);
    }
    return 0;
}