#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <numeric>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <complex>
#include <cassert>
 
using namespace std;
 
//
typedef long long LL;
typedef pair<int,int> PII;
#define MP make_pair
#define VI vector<int>
#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define PB push_back
#define ST first
#define ND second
#define SIZE(x) (int)x.size()
#define ALL(c) c.begin(),c.end()
//
#define rep(i,b) for(int i=(0);i<(b);++i)
#define fo(i,a,b) for(int i=(a);i<=(b);++i)
#define ford(i,a,b) for(int i=(a);i>=(b);--i)
#define fore(a,b) for(__typeof((b).begin()) a = (b).begin();a!=(b).end();++a)
#define vv vector
#define pb push_back
#define ll long long
#define ld long double
#define ss(a) (int)(a).size()
#define all(x) (x).begin(),(x).end()
#define clr(x,a) memset(x,a,sizeof(x))
#define vi vv<int>
#define vs vv<string>
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
 
int cond = (ll)0;
#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << " " << #x << " " << x << endl; cerr.flush(); } }
 
const int sz = 66 * 66;
set <int> ed[sz];
int vis[sz];
int n, m;
 
void go(int i, int j, int ids, int id[66][66], int cnt[66][66]) {
    if (!(i >= 1 && i <= n && j >= 1 && j <= m)) return;
    if (id[i][j] == -1) id[i][j] = ids;
    else {
        int next = id[i][j];
        if (next != ids) {
            ed[next].insert(ids);
            ed[ids].insert(next);
        }
        return;
    }
    if (cnt[i][j] != 0) return;
 
    fo (ni, i-1,i+1) fo(nj,j-1,j+1)
        if (ni != i || nj != j) go(ni, nj, ids, id, cnt);
}
 
int skoj[sz];
int prev[sz];
 
int go10(int first, int ids) {
    rep (j, ids) vis[j] = 0;
    rep (i, ids) prev[i] = -1;
    vector<int> q;
    q.push_back(first);
    prev[first] = -2;
    for (int i = 0; i < (int)q.size(); i++) {
        int p = q[i];
        fore (it, ed[p]) if (*it != first && *it != skoj[p]) {
            if (skoj[*it] == -1) {
                int a = p;
                int b = *it;
                do {
                    int prev_b = skoj[a];
                    int prev_a = prev[a];
                    skoj[a] = b;
                    skoj[b] = a;
 
                    if (a == first) break;
                    a = prev_a;
                    b = prev_b;
                }
                while (true);
 
                return 1;
            }
            else {
                int sk = skoj[*it];
                if (prev[sk] == -1) {
                    prev[sk] = p;
                    q.push_back(sk);
                }
            }
        }
    }
 
    return 0;
}
 
void _main() {
    int ary[66][66] = {};
    int cnt[66][66] = {};
    int id[66][66] = {};
    int wynik = 0;
    int ids = 0;
    int sum = 0;
 
 
    scanf("%d%d", &n, &m);
    rep (i, sz) ed[i].clear();
    rep (i, sz) vis[i] = 0;
 
    wynik = 0;
    ids = 0;
    clr(ary, 0);
    clr(cnt, 0);
    clr(id, -1);
    rep (i, sz) skoj[i] = -1;
    fo (i, 1, n) {
        char buf[66];
        scanf("%s", buf+1);
        fo (j, 1, m) {
            ary[i][j] = buf[j] == '*';  
        }
    }
 
    fo (i, 1, n) fo (j, 1, m) { 
        fo (ni, i-1,i+1) fo(nj,j-1,j+1) 
            if (ni >= 1 && ni <= n && nj >= 1 && nj <= m) {
                cnt[i][j] += ary[ni][nj];
            }
    }
 
    fo (i, 1, n) fo (j, 1, m) { 
        if (cnt[i][j] == 0 && id[i][j] == -1) {
            go(i, j, ids, id, cnt); ids++; wynik++;
        }
    }
    fo (i, 1, n) fo (j, 1, m) { 
        if (id[i][j] == -1) wynik++;
    }
    rep (i, 10)
    rep (i, ids) if (skoj[i] == -1) {
        sum += go10(i, ids);
    }
    printf("%d\n", wynik - sum);
}
 
int main(int argc, char ** argv) {
    string p = "../gcj/source/" + string("") + argv[0][strlen(argv[0])-1];
    //    if (argc >= 2 && strcmp(argv[1], "q") != 0) { freopen(argv[1],"r",stdin);}
 
    rep (i, argc) if (strcmp(argv[i], "1n") == 0) { freopen("1.in","r",stdin);}
    rep (i, argc) if (strcmp(argv[i], "2n") == 0) { freopen("2.in","r",stdin);}
    rep (i, argc) if (strcmp(argv[i], "3n") == 0) { freopen("3.in","r",stdin);}
    rep (i, argc) if (strcmp(argv[i], "4n") == 0) { freopen("4.in","r",stdin);}
    rep (i, argc) if (strcmp(argv[i], "5n") == 0) { freopen("5.in","r",stdin);}
 
    rep (i, argc) if (strcmp(argv[i], "s0") == 0) { freopen((p + "-small-0.in").c_str(),"r",stdin);freopen((p + "-small-0.out").c_str(),"w",stdout); }
    rep (i, argc) if (strcmp(argv[i], "s1") == 0) { freopen((p + "-small-1.in").c_str(),"r",stdin);freopen((p + "-small-1.out").c_str(),"w",stdout); }
    rep (i, argc) if (strcmp(argv[i], "s2") == 0) { freopen((p + "-small-2.in").c_str(),"r",stdin);freopen((p + "-small-2.out").c_str(),"w",stdout); }
    rep (i, argc) if (strcmp(argv[i], "l0") == 0) { freopen((p + "-large-0.in").c_str(),"r",stdin);freopen((p + "-large-0.out").c_str(),"w",stdout); }
    rep (i, argc) if (strcmp(argv[i], "q") == 0) cond = 1 << 30;
    db(argc);
    int t;
    scanf("%d", &t);
    fo (i, 1, t) {
        db(i);
        _main();
    }
    return 0;
}
 