#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

int T,n,R,C,i,j,k,dx,dy,u,v,lu,lv,ans;
int d[105][105],id[105][105],st[105],top;
char s[105][105];
int son[10005],next[2000005],ed[2000005],tot;
int mate[10005],link[10005],col[10005],fa[10005];
int vis[10005],q[10005],visT,l,r;

int get(int x){return fa[x]==x?x:fa[x]=get(fa[x]);}

int lca(int u,int v)
{
	for(++visT;;)
	{
		if(u)
		{
			if(vis[u=get(u)]==visT)return u;
			vis[u]=visT;u=link[mate[u]];
		}
		swap(u,v);
	}
}

void Union(int u,int v)
{
	int x,y;
	for(;u!=v;u=y)
	{
		x=mate[u];y=link[x];
		if(get(y)!=v)link[y]=x;
		if(col[x]==2)col[q[++r]=x]=1;
		if(col[y]==2)col[q[++r]=y]=1;
		fa[get(u)]=get(x);
		fa[get(x)]=get(y);
	}
}

void find(int S)
{
	int i,u,v,c;
	for(i=1;i<=n;++i)link[i]=col[i]=0,fa[i]=i;
	for(col[q[l=r=1]=S]=1;l<=r;++l)
	{
		u=q[l];
		for(i=son[u];i;i=next[i])
		{
			v=ed[i];
			if(v==mate[u]||col[v]==2||get(u)==get(v))continue;
			if(col[v]==1)
			{
				c=lca(u,v);
				if(get(u)!=c)link[u]=v;
				if(get(v)!=c)link[v]=u;
				Union(u,c);Union(v,c);
			}
			else
			{
				if(!mate[v])
				{
					for(;u;v=c,u=link[c])
					{
						c=mate[u];
						mate[u]=v;mate[v]=u;
					}
					return;
				}
				else
				{
					q[++r]=mate[v];
					col[mate[v]]=1;
					col[v]=2;
					link[v]=u;
				}
			}
		}
	}
}

void dfs(int x,int y)
{
	if(!x||!y||x>R||y>C)return;
	if(d[x][y]||id[x][y])return;
	id[x][y]=n;
	for(int i=-1;i<=1;++i)
	for(int j=-1;j<=1;++j)
	dfs(x+i,y+j);
}

int main()
{
	scanf("%d",&T);
	for(;T;--T)
	{
		scanf("%d%d",&R,&C);
		for(i=1;i<=R;++i)scanf("%s",s[i]+1);
		for(i=0;i<=R+1;++i)
		for(j=0;j<=C+1;++j)
		d[i][j]=id[i][j]=0;
		for(i=1;i<=R;++i)
		for(j=1;j<=C;++j)
		if(s[i][j]=='*')
		for(dx=-1;dx<=1;++dx)
		for(dy=-1;dy<=1;++dy)
		++d[i+dx][j+dy];
		n=0;
		for(i=1;i<=R;++i)
		for(j=1;j<=C;++j)
		if(!d[i][j]&&!id[i][j])
		++n,dfs(i,j);
		++tot;
		for(i=1;i<=n;++i)son[i]=mate[i]=0;
		for(i=1;i<=R;++i)
		for(j=1;j<=C;++j)
		if(d[i][j])
		{
			top=0;
			for(dx=-1;dx<=1;++dx)
			for(dy=-1;dy<=1;++dy)
			{
				k=id[i+dx][j+dy];
				if(k)st[++top]=k;
			}
			for(lu=1;lu<=top;++lu)
			for(lv=lu+1;lv<=top;++lv)
			{
				u=st[lu];v=st[lv];
				if(u!=v)
				{
					++tot;next[tot]=son[u];son[u]=tot;ed[tot]=v;
					++tot;next[tot]=son[v];son[v]=tot;ed[tot]=u;
				}
			}
		}
		for(i=1;i<=n;++i)if(!mate[i])find(i);
		ans=0;
		for(i=1;i<=n;++i)if(mate[i])++ans;
		ans=n-ans/2;
		for(i=1;i<=R;++i)
		for(j=1;j<=C;++j)
		{
			k=0;
			for(dx=-1;dx<=1;++dx)
			for(dy=-1;dy<=1;++dy)
			if(id[i+dx][j+dy])++k;
			if(!k)++ans;
		}
		printf("%d\n",ans);
	}
}