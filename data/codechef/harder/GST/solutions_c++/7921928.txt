#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long int64;
const int64 lcm30=2329089562800LL;
const int oo=1000000000;
const int64 oooo=1000000000000000000LL;
const int maxN=59;
struct Edge {
	int v;
	int64 r;
	Edge *next,*opp;
};
 
const int maxV=maxN,maxE=maxV+110;
Edge po[maxE*2],*ve[maxV];
int pon;
void addEdge(int a,int b,int64 c) {
	Edge *e1=po+pon++,*e2=po+pon++;
	(e1->opp=e2)->opp=e1;
	e1->v=b,e1->next=ve[a],ve[a]=e1;
	e2->v=a,e2->next=ve[b],ve[b]=e2;
	e1->r=c,e2->r=0;
}
int vn,vs,vt,d[maxV],l[maxV];
Edge *ve2[maxV];
void init() {
	pon=0;
	fill(ve+1,ve+vn+1,(Edge*)0);
}
bool relabel() {
	fill(d+1,d+vn+1,oo);
	d[vt]=0,l[1]=vt;
	for(int lh=1,lt=1;lh<=lt;lh++) {
		int x=l[lh];
		for(Edge *e=ve[x];e;e=e->next)
		    if(e->opp->r&&d[e->v]>=oo) {
				d[e->v]=d[x]+1;
				l[++lt]=e->v;
			}
	}
	copy(ve+1,ve+vn+1,ve2+1);
	return d[vs]<oo;
}
int64 aug(int x,int64 limit) {
	if(x==vt)
	    return limit;
	int64 ans=0;
	for(Edge *&e=ve2[x];e;e=e->next)
	    if(e->r&&d[x]==d[e->v]+1) {
			int64 ret=aug(e->v,min(limit,e->r));
			e->r-=ret,e->opp->r+=ret;
			limit-=ret,ans+=ret;
			if(limit==0)
			    break;
		}
	return ans;
}
bool v[maxV];
void dfs(int x) {
	v[x]=true;
    for(Edge *e=ve[x];e;e=e->next)
        if(e->r&&!v[e->v])
            dfs(e->v);
}
 
int64 f[maxN][maxN];
int main() {
	int T;
	for(scanf("%d",&T);T;T--){
		int n,m;
		scanf("%d%d",&n,&m);
 
		int64 tot=0;
		memset(f,0,sizeof(f));
		for(int i=1;i<=m;i++) {
			int u,v,a,b;
			scanf("%d%d%d/%d",&u,&v,&a,&b);
			f[u][v]+=lcm30*a/b;
			tot+=lcm30*a/b;
			//printf("%d %d : %I64d\n",u,v,f[u][v]);
		}
 
		if(tot!=(n-1)*lcm30) {
			puts("1");
			goto ok;
		}
 
		for(int one=1;one<=n;one++){
			vn=n+2,vs=vn-1,vt=vn;
			init();
			int64 base=0;
			for(int i=1;i<=n;i++) {
				int64 w=lcm30;
				for(int j=1;j<=n;j++) {
				    w-=f[i][j];
				    if(f[i][j])
						addEdge(i,j,f[i][j]);//,printf("w[%d][%d]=%I64d\n",i,j,f[i][j]);
				}
				//printf("w[%d]=%I64d\n",i,w);
				if(i==one)
				    addEdge(vs,i,oooo);
				if(w>0)
				    addEdge(i,vt,w);
				else if(w<0) {
				    addEdge(vs,i,-w);
				    base+=w;
				}
			}
 
			int64 flow=0;
			while(relabel())
			    flow+=aug(vs,oooo);
			//printf("%I64d\n",-(flow+base));
			//printf("%.10f\n",-(flow+base)*1.0/lcm30);
			if(-(flow+base)>-lcm30) {
				fill(v+1,v+vn+1,false);
				dfs(vs);
				
				int cnt=0;
				for(int i=1;i<=n;i++)
				    if(v[i])
				        cnt++;
 
				printf("2\n%d\n",cnt);
				for(int i=1;i<=n;i++)
				    if(v[i]) {
						printf("%d",i);
						if(--cnt)
						    putchar(' ');
					}
				puts("");
				goto ok;
			}
		}
		puts("GST");
		ok:
		puts("");
	}
	scanf("%*s");
}
 