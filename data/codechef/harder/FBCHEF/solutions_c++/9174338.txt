#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	200005
#define For(i,a,b)	for(register int i=a,lim=b;i<=lim;i++)
#define Rep(i,a,b)	for(register int i=a;i>=b;i--)

int		N,Q,D,st[n],W[n],Dep[n],GTW[n],ZYB[n],F[20][n];
int		ID[n],T[n],Dfn[n],Dfn_[n],WEI[n];
int		H[n],L[n],G[n],S[n],V[n],fa[n];
int		B[n][20],C[n][20],Go[20][n],P[20][n];

struct  Lin{int v,next;}E[n];
struct  Opt{int k,x,v;}O[n];

void	Link(int u,int v){
		E[++D]=(Lin){v,st[u]};	st[u]=D;
		E[++D]=(Lin){u,st[v]};	st[v]=D;
}
void	DFS(int u,int f){
		F[0][u]=f;	Dep[u]=Dep[f]+1;

		Dfn[u]=++*Dfn;
		for (int i=st[u],v;i;i=E[i].next)
			if  ((v=E[i].v)!=f)	DFS(v,u);
		Dfn_[u]=*Dfn;
}
int		LCA(int u,int v){
		if  (Dep[u]>Dep[v])	swap(u,v);
		for (int d=Dep[v]-Dep[u];d;){
			int t=d&-d;	v=F[GTW[t]][v];	d-=t;
		}
		if  (u==v)	return	u;
		Rep(i,ZYB[Dep[u]],0)	if  (F[i][u]^F[i][v])	u=F[i][u],v=F[i][v];
		return	F[0][u];
}
inline	bool	Cmp(const int&a,const int&b)	{return	Dfn[a]<Dfn[b];}

void	Work(int d,int l,int r){
		if  (*P[d]==0)	return;
		if  (l==r)	{
			For(i,1,*P[d])	WEI[P[d][i]]=l;
			return;
		}
		int Mid=l+r>>1,Top=0;	*H=*G=0;
/*
		fprintf(stderr,"----------------------");
		fprintf(stderr,"%d\n",Mid);
		For(i,1,*P[d])	fprintf(stderr,"%d\n",P[d][i]);
*/
		For(i,l,Mid)	if  (O[i].k==1)
			H[++*H]=G[++*G]=O[i].x,V[*G]=O[i].v;
		For(i,1,*P[d])	H[++*H]=P[d][i];

		sort(H+1,H+*H+1,Cmp);	*H=unique(H+1,H+*H+1)-H-1;
		For(i,1,*H)	{
			int u=H[i];
			if  (!Top)	S[++Top]=u,fa[u]=0;
			else	{
				int f=LCA(u,S[Top]);
				for (;Top&&Dep[S[Top]]>Dep[f];Top--)
					if  (Dep[S[Top-1]]<=Dep[f])	fa[S[Top]]=f;
				if  (f!=S[Top])	fa[f]=S[Top],S[++Top]=f,H[++*H]=f;
				fa[u]=f;S[++Top]=u;
			}
		}
		sort(H+1,H+*H+1,Cmp);	*H=unique(H+1,H+*H+1)-H-1;
/*
		sort(H+1,H+*H+1,Cmp);	*H=unique(H+1,H+*H+1)-H-1;
		For(i,2,*H)	H[++*H]=LCA(H[i-1],H[i]);	H[++*H]=1;
		sort(H+1,H+*H+1,Cmp);	*H=unique(H+1,H+*H+1)-H-1;
*/
		For(i,2,*H)	L[H[i]]=Dep[H[i]]-Dep[fa[H[i]]];
		For(i,1,*H)	For(j,0,16)	B[H[i]][j]=C[H[i]][j]=0;
/*
		For(i,1,*H)	fprintf(stderr,"%d ",H[i]);
		fprintf(stderr,"\n");
		
		For(i,1,*H)	fprintf(stderr,"%d ",fa[H[i]]);
		fprintf(stderr,"\n");
		
		For(i,1,*H)	fprintf(stderr,"%d ",L[H[i]]);
		fprintf(stderr,"\n");
*/
		For(i,1,*G)	{
			C[G[i]][0]+=V[i];
			For(j,1,16)	{
				V[i]/=2;
				if  (!V[i])	break;	C[G[i]][j]+=V[i];
			}
		}

		Rep(i,*H,2)	{
			int u=H[i],f=fa[u];
	//		For(j,0,16)	C[u][j]+=A[u][j];
			For(j,L[u],16)	{
				if  (!C[u][j])	break;
				B[u][j-L[u]]=C[u][j];
			}
			For(j,0,16)	{
				if  (!B[u][j])	break;
				C[f][j]+=C[u][j+L[u]];
			}
		}
/*
		fprintf(stderr,"\n");
		For(i,1,N)	{
			For(j,0,16)	fprintf(stderr,"%d ",C[i][j]);
			fprintf(stderr,"\n");
		}
		fprintf(stderr,"\n");
*/
		For(i,2,*H)	{
			int u=H[i],f=fa[u];
			For(j,L[u],16)	{
				if (!(C[f][j]-B[u][j]))	break;
				C[u][j-L[u]]+=C[f][j]-B[u][j];
			}
		}
		For(i,1,*P[d])	W[P[d][i]]-=C[P[d][i]][0],Go[d][P[d][i]]=0;

		*P[d+1]=0;
		For(i,1,*P[d])	if  (W[P[d][i]]>0)	P[d+1][++*P[d+1]]=P[d][i],Go[d][P[d][i]]=1;
			else	W[P[d][i]]+=C[P[d][i]][0];
		Work(d+1,Mid+1,r);

		*P[d+1]=0;
		For(i,1,*P[d])	if  (!Go[d][P[d][i]])	P[d+1][++*P[d+1]]=P[d][i];
		Work(d+1,l,Mid);
}

bool	Cmp1(int a,int b)	{return	WEI[a]<WEI[b];}
void	Add(int x)	{
		for (;x<=N;x+=x&-x)	T[x]++;
}
int		Ask(int x)	{
		int ret=0;
		for (;x;x-=x&-x)	ret+=T[x];
		return	ret;
}

#define CH	(ch=getchar())
int		IN(){
		int x=0,ch;
		for (;CH<'0'||ch>'9';);
		for (;ch>='0'&&ch<='9';CH)	(x*=10)+=ch-'0';
		return	x;
}

int		main(){
	//	freopen("fbchef.in","r",stdin);
	//	freopen("fbchef.out","w",stdout);

		N=IN();
		For(i,1,N)	W[i]=IN();
		For(i,2,N)	Link(IN(),IN());

		For(i,0,16)	GTW[1<<i]=i;
		For(i,2,N)	ZYB[i]=ZYB[i/2]+1;

		DFS(1,0);
		For(i,1,16)	For(j,1,N)	F[i][j]=F[i-1][F[i-1][j]];

		Q=IN();
		For(i,1,Q)	{
			O[i].k=IN(),O[i].x=IN();
			if  (O[i].k==1)	O[i].v=IN();
		}

		For(i,1,N)	P[0][++*P[0]]=i;

		Work(0,1,Q);

		For(i,1,N)	ID[i]=i;
		sort(ID+1,ID+N+1,Cmp1);

		for (int i=1,j=1;i<=Q;i++)	if  (O[i].k==2){
			for (;j<=N&&WEI[ID[j]]<i;j++)	Add(Dfn[ID[j]]);
			printf("%d\n",Ask(Dfn_[O[i].x])-Ask(Dfn[O[i].x]-1));
		}
	/*	
		puts("-------------------");
		For(i,1,N)	printf("%d\n",WEI[i]);
	*/
}