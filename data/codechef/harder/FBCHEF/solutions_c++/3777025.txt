#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long LL;

const int maxn = 200010;

struct query {
       int id,A,X;
};

query Q[maxn];

int N,Qi,tot;
int Wi[maxn],dea[maxn];


int dt,pos[maxn],ed[maxn],fa[maxn],num[maxn];
int qd[maxn],q1[maxn],q2[maxn];
int t1,t2;

bool vis[maxn];

LL val[maxn][20],sum[maxn];

vector<int> E[maxn];
vector<int> G[maxn];

void dfs(int x,int f) {
    dt++; pos[x] = dt; fa[x] = f;// cout<<x<<endl;
    for (int i = 0;i < E[x].size(); i++)
        if (E[x][i] != f) dfs(E[x][i],x);
    ed[x] = dt;
}

void solve(int qL,int qR,int l,int r) {
   // tot++;
    for (int i = l;i <= r; i++) {
        int x = qd[i],cnt = 0;
        for (int j = x;j && cnt < 18; j = fa[j],cnt++) {
            vis[j] = true;
        }
    }
    int qmid = (qL+qR)>>1;
    for (int i = qL;i <= qmid; i++) {
        if (Q[i].id == 1) {
            int x = Q[i].A,y = Q[i].X;
            for (int j = x;j && y;j = fa[j]) {
                if (vis[j]) {
                    int cnt = 0,w1 = y;
                    for (;w1;) {
                        val[j][cnt] += w1;
                        w1 >>= 1; ++cnt;
                    }
                }
                y >>= 1;
            }
        }
    }
    int t1 = 0,t2 = 0;
    for (int i = l;i <= r; i++) {
        int x = qd[i],f,last = 0;LL w = 0,cnt = 1;
        for (int j = 0;x && j < 18; j++) {
            //cout<<x<<"::::"<<val[x]/cnt<<endl;
            w += val[x][j];
            if (last) w -= val[last][j+1];
            //cout<<w<<endl;
            last = x; vis[x] = false; x = fa[x];
        }
        //cout<<"-----"<<endl;
        //cout<<qd[i]<<" "<<w<<endl;
        if (sum[qd[i]]+w < Wi[qd[i]]) {
            t2++; q2[t2] = qd[i]; sum[qd[i]] += w;
        }else { t1++; q1[t1] = qd[i]; }
    }
    for (int i = qL;i <= qmid; i++) {
        if (Q[i].id == 1) {
            int x = Q[i].A,y = Q[i].X;
            for (int j = 0;y && j < 18; j++,x = fa[x]) {
                memset(val[x],0,sizeof(val[x])); y >>= 1;
            }
        }
    }
    if (qL == qR) {
        for (int i = 1;i <= t1; i++) dea[q1[i]] = qL;
        for (int i = 1;i <= t2; i++) dea[q2[i]] = qL+1;
        return;
    }
    for (int i = 1;i <= t1; i++) qd[i+l-1] = q1[i];
    for (int i = 1;i <= t2; i++) qd[l+t1+i-1] = q2[i];
  //  cout<<l<<"---"<<r<<endl;
   // for (int i = l;i <= r; i++) cout<<qd[i]<<" "<<sum[qd[i]]<<endl;
    if (t1 > 0)
    solve(qL,qmid,l,l+t1-1);
    if (l+t1 <= r)
    solve(qmid+1,qR,l+t1,r);
}

int qsum[maxn],ans;

void Add(int x) {
   // cout<<":"<<x<<endl;
    while (x <= N) {
        qsum[x]++;
     //   cout<<x<<"::::"<<qsum[x]<<endl;
        x += x&(-x);
    }
}

int Sum(int x){
    if (x <= 0) return 0;
    int res = 0;
    while (x) {
        res += qsum[x];
      //  cout<<x<<" "<<qsum[x]<<endl;
        x -= x&(-x);
    }
    return res;
}

int main() {
    #ifndef ONLINE_JUDGE
    freopen("1.in","r",stdin);
    freopen("1.out","w",stdout);
    #endif // ONLINE_JUDGE
    scanf("%d",&N);
    memset(qsum,0,sizeof(qsum));
    for (int i = 1;i <= N; i++) scanf("%d",&Wi[i]);
    for (int i = 1;i <= N-1; i++) {
        int u,v; scanf("%d%d",&u,&v);
        E[u].push_back(v); E[v].push_back(u);
    }
    scanf("%d",&Qi);
    for (int i = 1;i <= Qi; i++) {
         scanf("%d",&Q[i].id);
         if (Q[i].id == 1) {
            scanf("%d%d",&Q[i].A,&Q[i].X);
         }else scanf("%d",&Q[i].A);
    }
    dfs(1,0);
    for (int i = 1;i <= N; i++) qd[i] = i;
    solve(1,Qi,1,N);
  /*  for (int i = 1;i <= N; i++)
        cout<<dea[i]<<endl; */
    for (int i = 1;i <= N; i++)
        G[dea[i]].push_back(i);
    for (int i = 1;i <= Qi; i++) {
        for (int j = 0;j < G[i].size(); j++) {
            Add(pos[G[i][j]]);
        }
        if (Q[i].id == 2) {
           // cout<<Sum(ed[Q[i].A])<<" "<<Sum(pos[Q[i].A]-1)<<endl;
            ans = Sum(ed[Q[i].A])-Sum(pos[Q[i].A]-1);
            printf("%d\n",ans);
        }
    }
    return 0;
}
