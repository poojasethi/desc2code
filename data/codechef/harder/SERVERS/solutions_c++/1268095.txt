#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <map>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <cstring>
#define REP(i,x,v)for(int i=x;i<=v;i++)
#define REPD(i,x,v)for(int i=x;i>=v;i--)
#define FOR(i,v)for(int i=0;i<v;i++)
#define FORE(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REMIN(x,y) (x)=min((x),(y))
#define REMAX(x,y) (x)=max((x),(y))
#define pb push_back
#define sz size()
#define mp make_pair
#define fi first
#define se second
#define ll long long
#define IN(x,y) ((y).find((x))!=(y).end())
#define un(v) v.erase(unique(ALL(v)),v.end())
#define LOLDBG1
#ifdef LOLDBG
#define DBG(vari) cerr<<#vari<<" = "<<vari<<endl;
#define DBG2(v1,v2) cerr<<(v1)<<" - "<<(v2)<<endl;
#else
#define DBG(vari)
#define DBG2(v1,v2)
#endif
#define CZ(x) scanf("%d",&(x));
#define CZ2(x,y) scanf("%d%d",&(x),&(y));
#define CZ3(x,y,z) scanf("%d%d%d",&(x),&(y),&(z));
#define ALL(x) (x).begin(),(x).end()
#define tests int dsdsf;cin>>dsdsf;while(dsdsf--)
#define testss int dsdsf;CZ(dsdsf);while(dsdsf--)
using namespace std;
typedef pair<int,int> pii;
typedef vector<int> vi;
template<typename T,typename TT> ostream &operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream &operator<<(ostream &s,vector<T> t){s<<"{";FOR(i,t.size())s<<t[i]<<(i==t.size()-1?"":",");return s<<"}"; }

int p[100000];
int szuk(int x){if (x==p[x]) return x;return p[x]=szuk(p[x]);}
inline void unia(int x,int y){p[szuk(x)]=szuk(y);}


int a[300],b[300],f[300];
int m,n,K;
short nr[50][50];
vi kr[1202];
vi KR[602];
bool inI[602];
bool X1[602];
bool X2[602];
int prev[1602];


vi get_path(int x,int y)
{
    FOR(i,n) prev[i]=-1;
    prev[x]=x;
    queue<int> Q;
    Q.push(x);
    while(Q.sz)
    {
        int u=Q.front();Q.pop();
        if (u==y) break;
        FORE(j,kr[u])
        {
            if (prev[*j]==-1)
            {
                prev[*j]=u;
                Q.push(*j);
            }
        }
    }
    vi path;
    while(y!=x)
    {

        path.pb(nr[y][prev[y]]);
        y=prev[y];
    }
    return path;
}

bool seek_path()
{
    DBG("seek");
    queue<int> Q;
    FOR(i,m) prev[i]=-1;
    FOR(i,m) if (X1[i]) {prev[i]=i;Q.push(i);}
    int good=-1;
    while(Q.sz)
    {
        int u=Q.front();Q.pop();
        //DBG(u);
        if (X2[u])
        {
            good=u;
            break;
        }
        FORE(j,KR[u])
        {
            if (prev[*j]==-1)
            {
                prev[*j]=u;
                Q.push(*j);
            }
        }
    }
    
    if (good==-1) return 0;
    vi path;
    path.pb(good);
    while(!X1[good])
    {
        good=prev[good];
        path.pb(good);
    }
    FORE(e,path) inI[*e]^=1;
    return 1;
}

int max_freq[500];
int used[400];

int main()
{
    testss
    {
        CZ3(n,m,K);
        DBG(m);
        FOR(i,K) CZ(max_freq[i]);
        FOR(i,m)
        {
            CZ3(a[i],b[i],f[i]);
            a[i]--;
            b[i]--;
            f[i]--;
        }
        FOR(j,m) inI[j]=0;
        
        while(1)
        {
            DBG(vi(inI,inI+m));
            FOR(k,K) used[k]=0;
            FOR(j,m)
            {
                if (inI[j])
                {
                    nr[a[j]][b[j]]=j;
                    nr[b[j]][a[j]]=j;
                    used[f[j]]++;
                }
            }
            DBG("doned");
            FOR(i,n) kr[i].clear();
            FOR(i,n) p[i]=i;
            FOR(j,m) KR[j].clear();
            FOR(j,m)
            {
                if (!inI[j]) continue;
                unia(a[j],b[j]);
                kr[a[j]].pb(b[j]);
                kr[b[j]].pb(a[j]);
            }
            
            bool doned=0;
            FOR(j,m)
            {
                if (inI[j]) continue;
                if (used[f[j]]!=max_freq[f[j]] && szuk(a[j])!=szuk(b[j]))
                {
                    doned=1;
                    inI[j]=1;
                    break;
                }
            }
            if (doned) continue;
            
            FOR(j,m)
            {
                X1[j]=X2[j]=0;
                if (inI[j])
                {
                    int kol=f[j];
                    if (used[kol]==max_freq[kol])
                    {
                        FOR(j1,m) if (!inI[j1] && f[j1]==kol) KR[j].pb(j1);
                    }
                }
                else
                {
                    int x=a[j];
                    int y=b[j];
                    if (szuk(x)==szuk(y))
                    {
                        vi pa=get_path(x,y);
                        FORE(e,pa) KR[j].pb(*e);
                    }
                    else
                    {
                        X2[j]=1;
                    }
                    if (used[f[j]]!=max_freq[f[j]]) X1[j]=1;
                }
            }
            
            if (!seek_path()) break;
        }
        int wyn=0;
        FOR(j,m) wyn+=inI[j];
        printf("%d\n",wyn);
    }

    return 0;
}
