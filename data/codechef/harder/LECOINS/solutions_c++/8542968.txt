#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
int qp(int a,ll b,int mo){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}
//const int mo=1000000007;
struct node{int v,c;}a[33];
int cmp(const node&a,const node&b){
	return a.c<b.c;
}
int mo;
#define inf 4444444444444444444ll
ll f[33][222222];
ll g[222222];

inline void upd(ll &a,ll x){
	a=min(a,x);
}
int main()
{
	int n;scanf("%d",&n);
	for (int i=1;i<=n;i++)scanf("%d%d",&a[i].v,&a[i].c);
	sort(a+1,a+1+n,cmp);
	mo=a[n].v;
	for (int i=0;i<=n;i++)for (int j=0;j<mo;j++)f[i][j]=inf;
	f[0][0]=0;
	int tot=0;
	for (int l=1;l<=n;l++)if(l==1 || a[l].c!=a[l-1].c){
		int r;
		for (r=l;r<=n && a[l].c==a[r].c;r++);
		
		for (int i=tot;i>=0;i--){
			for (int j=0;j<mo;j++)g[j]=inf;

			for (int j=0;j<mo;j++)if(f[i][j]!=inf){
				for (int k=l;k<r;k++)upd(g[(j+a[k].v)%mo],f[i][j]+a[k].v);
			}
			for (int k=l;k<r;k++){
				int gg=gcd(mo,a[k].v);
				for (int st=0;st<gg;st++){
					upd(g[(st+a[k].v)%mo],g[st]+a[k].v);
					for (int u=(st+a[k].v)%mo;u!=st;u=(u+a[k].v)%mo){
						upd(g[(u+a[k].v)%mo],g[u]+a[k].v);
					}
					upd(g[(st+a[k].v)%mo],g[st]+a[k].v);
					for (int u=(st+a[k].v)%mo;u!=st;u=(u+a[k].v)%mo){
						upd(g[(u+a[k].v)%mo],g[u]+a[k].v);
					}
				}
			}
			for (int j=0;j<mo;j++)upd(f[i+1][j],g[j]);
		}
		tot++;
	}
	int q;gn(q);
	while(q--){
		ll s;gn(s);
		int t=s%mo;
		int ma=-1;
		for (int i=0;i<=n;i++)if(f[i][t]<=s)ma=max(ma,i);
		printf("%d\n",ma);
	}
	return 0;
}
