#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
using namespace std;
typedef long long LL;
const LL Inf=999999999999999999LL+208;
const int Maxn=33,MaxN=200005,inf=999999999+208;
int n,N=inf,Nc=0,C=0;
pair<int,int> co[Maxn];
LL f[Maxn][MaxN],f2[Maxn][MaxN];

inline LL get() {
	char ch;
	while (!isdigit(ch=getchar()));
	LL v=ch-48;
	while (isdigit(ch=getchar())) v=v*10+ch-48;
	return v;
}

int gcd(int x,int y) {
	return y?gcd(y,x%y):x;
}

inline void gmin(LL &x,LL y) {
	if (x>y) x=y;
}

int main() {
	n=get();
	for (int i=1;i<=n;i++) {
		co[i].second=get();
		co[i].first=get();
		if (N>co[i].second) {
			N=co[i].second;
			Nc=co[i].first;
		}
	}
	for (int i=1;i<=n;i++)
		if (co[i].first==Nc)
			co[i].first=inf;
	sort(co+1,co+n+1);
	memset(f,63,sizeof f);
	f[0][0]=0;
	for (int L=1,R;L<=n;L=R+1) {
		++C;
		for (R=L;R<n&&co[R+1].first==co[L].first;R++);
		if (R==n) memcpy(f2,f,sizeof f2);
		for (int k=C;k>=1;k--) {
			LL *F=f[k],*G=f[k-1];
			for (int i=0;i<N;i++)
				if (G[i]<Inf)
					for (int u=L;u<=R;u++)
						gmin(F[(i+co[u].second)%N],G[i]+co[u].second);
			for (int u=L;u<=R;u++) {
				int d=co[u].second,cirN=gcd(N,d);
				for (int i=0;i<cirN;i++) {
					int p=i;
					for (int j=(i+d)%N;j!=i;j=(j+d)%N)
						if (F[j]<F[p]) p=j;
					if (F[p]>Inf) continue;
					for (int j=p,k=(p+d)%N;k!=p;j=k,k=(k+d)%N)
						gmin(F[k],F[j]+d);
				}
			}
		}
	}
	for (int q=get();q;q--) {
		LL S=get();
		int ans=-1;
		for (int i=C;i>=0&&i+1>=ans;i--) {
			if (f[i][S%N]<=S) ans=max(ans,i);
			if (f2[i][S%N]<S) ans=max(ans,i+1);
		}
		printf("%d\n",ans);
	}
	return 0;
}