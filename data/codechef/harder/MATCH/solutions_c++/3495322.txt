#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
typedef unsigned long long ULL;
inline int bit(int x){return 1 << x;}
inline ULL xbit(int x){return ((ULL)1 << x);}
int len,n,m;
ULL order[10000],st[10000];
int rank[10000];
ULL fixed[10];
const int sizes[7] = {0,5,11,37,137,821,7529};
int hasize;
ULL hallp[10];
int next[50][10000],match[10000];
int getord(ULL state){
	int pos = state % hasize;
	while (true){
		if (st[pos] == state) break;
		if (st[pos] == 0){
			st[pos] = state;
			order[len] = state;
			rank[pos] = len;
			return len++;
		}
		(pos += 1)%= hasize;
	}
	return rank[pos];
}
void prepare(){
	int N = bit(n);
	for (int bi = 0;bi < N;bi++){
		int tt = 0;
		for (int i = 0;i < n;i++)
			if (bi & bit(i)) tt++;
		fixed[tt] |= xbit(bi);
	}
	hasize = sizes[n];
	for (int k = 0;k < hasize;k++)
		st[k] = 0;
	len = 0;
	getord(1);
	for (int k = 0;k < len;k++){
		ULL state = order[k];
		memset(hallp,0,sizeof(hallp));
		for (int bi = 0;bi < N;bi++)
			if (state & xbit(bi))
				for (int i = 0;i < n;i++)
					hallp[i] |= xbit(bi | bit(i));
		for (int bi = 0;bi < N;bi++){
			ULL ne = state;
			for (int i = 0;i < n;i++)
				if (bi & bit(i))
					ne |= hallp[i];
			next[bi][k] = getord(ne);
		}
		for (int i = n;i >= 0;i--)
			if (state & fixed[i]){
				match[k] = i;break;
			}
	}
}
double p[10][110];
double prev[5000],cur[5000];
double calc(){
	prev[0] = 1;
	int N = bit(n);
	for (int j = 1;j <= m;j++){
		for (int k = 0;k < len;k++)
			cur[k] = 0;
		for (int bi = 0;bi < N;bi++){
			double prob = 1.0;
			for (int i =1;i <= n;i++)
				prob *= bi & bit(i-1) ? p[i][j] : 1.0 - p[i][j];
			for (int k = 0;k < len;k++)
				cur[next[bi][k]] += prob*prev[k];
		}
		for (int k = 0;k < len;k++){
			if (prev[k] < 1e-100) prev[k] = 0;
			prev[k] = cur[k];
		}
	}
	double ans = 0;
	for (int k = 0;k < len;k++)
		ans += prev[k]*match[k];
	return ans;
}
int main(){
	scanf("%d%d",&n,&m);
	prepare();
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= m;j++)
			scanf("%lf",&p[i][j]);
	double ans = calc();
	printf("%.8lf",ans);
}
