#include <bitset>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	65
#define m	8005
#define Bit	bitset<n>
#define unt	unsigned int
#define For(i,a,b)	for(int i=a;i<=b;i++)

int		Test,N,M;
char	s[10];

Bit		A[m][n],Q[m];

#define CH	(ch=getchar())
int		IN(){
		int x=0,ch;
		for	(;CH<'0'||ch>'9';);
		for	(;ch>='0'&&ch<='9';CH)	(x*=10)+=ch-'0';
		return	x;
}

void	Pre(Bit*A){
		scanf("%s",s);
		if	(s[2]=='w')	{
			For(i,1,N)	For(j,1,N)	A[i][j]=IN()&1;
		}	else	{
			unt	S=IN(),P=IN(),K=IN();
			For(i,1,N)	For(j,1,N)	A[i][j]=((S>>12)%100+1)&1,S=S*P+K;
		}
		For(i,1,N)	A[i][N+1]=1;
}

void	Work(Bit*A,Bit&Q){
		int now=1,ext=0;
		For(i,1,N+1)	{
			int j=now;
			for	(;j<=N&&!A[j][i];j++);
			if	(j>N)	{
				if	(ext)	return;	ext=i;
			}	else	{
				if	(j^now)	swap(A[now],A[j]);
				For(k,1,N)	if	(k!=now&&A[k][i])	A[k]^=A[now];
				++now;
			}
		}
		For(i,1,N+1){
			if	(i==ext) Q[i]=1;
			if	(i>ext)  Q[i]=0;
			if	(i<ext)  Q[i]=A[i][ext];
		}
}

int		main(){
		Test=IN();
		for	(;Test--;)	{
			N=IN();	M=IN();
			For(i,1,M)	{
				Q[i].reset();
				For(j,1,N)	A[i][j].reset();
			}
			For(i,1,M)	Pre(A[i]),Work(A[i],Q[i]);

			if	(N==1)	{
				int Ans=0,cnt=0;
				For(i,1,M)	if	(A[i][1][1])	Ans+=cnt,cnt++;
				printf("%d\n",Ans);	continue;
			}

			int Ans=0;
			For(i,1,M)	For(j,i+1,M)
				if	((Q[i]&Q[j]).count()&1)	Ans++;
			printf("%d\n",Ans);
		}
}