#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include<assert.h>
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define ll long long

/* return 1 if a==b as strings, otherwise return 0. */
int is_same(char a[], char b[]){
  int i;
  for(i=0;;i++){
    if(a[i]!=b[i]) return 0;
    if(a[i]=='\0') break;
  }
  return 1;
}

int T, N, B, Bsum = 0;

/* return k, which i-th bit is 1 iff determinant of Q = 1 after deleting i-th column */
ll det(ll Q[]){
  int i, j, l, d, r;
  ll res, bit;

  res = 0;
  d = 0; r = N;
  rep(i,N+1){ /* elementary row operations for i-th column */
    if(d==N) break;
    REP(j,d,N) if(Q[j]&1LL<<i) break;
    if(j==N){ r = i; continue; }
    if(j!=d) bit=Q[j], Q[j]=Q[d], Q[d]=bit;

    rep(l,d)     if(Q[l]&1LL<<i) Q[l] ^= Q[d];
    REP(l,j+1,N) if(Q[l]&1LL<<i) Q[l] ^= Q[d];
    d++;
  }
  if(Q[N-1]==0) return 0; /* rank Q < N, so all determinants are 0 */

  rep(i,r) if(Q[i]&1LL<<r) res |= (1LL<<i);
  res |= (1LL<<r);

  return res;
}

int main(){

#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
#endif

  int i, j, k, l, b, d, r;
  unsigned S, P, A, D = 4096;
  unsigned X;
  ll val[10001];
  ll Q[62], bit;
  int res, cnt;
  char buf[100];

  assert( scanf("%d",&T)==1 );
  assert( 1<=T && T<=5000 );
  while(T--){
    assert( scanf("%d%d",&N,&B)==2 );
    assert( 1<=N && N<=60 );
    assert( 1<=B && B<=8000 );
    Bsum += B;
    assert( 1<=Bsum && Bsum<=8000 );

    cnt = 0;
    rep(b,B){
      rep(j,N) Q[j] = (1LL<<N);

      scanf("%s",buf);
      if(is_same(buf,"raw")){
        rep(j,N) rep(k,N){
          assert( scanf("%d",&d)==1 );
          assert( 1<=d && d<=100 );
          if(d%2) Q[j] |= (1LL<<k);
        }
      } else if(is_same(buf,"random")){
        assert( scanf("%d%d%d",&S,&P,&A)==3 );
        assert( 0<=S && S<=40000 );
        assert( 0<=P && P<=40000 );
        assert( 0<=A && A<=40000 );
        X = S;
        rep(j,N) rep(k,N){
          if(!(X&1<<12)) Q[j] |= (1LL<<k);
          X = X * P + A; /* overflow = mod 2^32 */
        }
      } else {
        assert(0);
      }

      if(N==1){if(Q[0]&1) cnt++; continue;}
      val[b] = det(Q);
    }

    if(N==1) res = cnt*(cnt-1)/2;
    else {
      res = 0;
      rep(i,B) REP(j,i+1,B) if(__builtin_parityll(val[i]&val[j])) res++;
      /* __builtin_parityll returns the number of bit mod 2 for long long (only available on GCC) */
    }

    printf("%d\n", res);
  }

  return 0;
}
