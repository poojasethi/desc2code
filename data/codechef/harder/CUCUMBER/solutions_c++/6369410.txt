#include <cstdio>
 
unsigned long long values[8000];
unsigned long long rows[60];
int building[60][61];
char type[10];
 
void
getNewBuilding(int n)
{
    scanf(" %s", type);
    if (type[2] == 'w') { // type == "raw"
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                scanf("%d", &building[i][j]);
                building[i][j] &= 1;
            }
            building[i][n] = 1;
        }
    } else { // type == "random"
        unsigned int s, p, a;
        scanf("%u%u%u", &s, &p, &a);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                building[i][j] = ((s >> 12) % 100 + 1) & 1;
                s = p * s + a;
            }
            building[i][n] = 1;
        }
    }
}
 
inline unsigned long long
getBit(unsigned long long x, int pos)
{
    return (x >> pos) & 1;
}
 
unsigned long long
getValue(int n)
{
    if (n == 1) {
        return building[0][0];
    }
    unsigned long long res = 0ULL;
    for (int i = 0; i < n; ++i) {
        rows[i] = 0ULL;
        for (int j = n; j >= 0; --j) {
            rows[i] = (rows[i] << 1) + building[i][j];
        }
    }
    int row = 0, col = 0;
    for (; row < n && col <= n; ++col) {
        int cur_row = row;
        for (; cur_row < n; ++cur_row) {
            if (getBit(rows[cur_row], col)) {
                break;
            }
        }
        if (cur_row == n) {
            continue;
        }
        unsigned long long tmp = rows[cur_row];
        rows[cur_row] = rows[row];
        rows[row] = tmp;
        for (int i = row + 1; i < n; ++i) {
            if (getBit(rows[i], col)) {
                rows[i] ^= rows[row];
            }
        }
        ++row;
    }
    if (row != n) {
        return res;
    }
    for (int row = n - 1; row >= 0; --row) {
        int col = 0;
        while (col <= n && !getBit(rows[row], col)) {
            ++col;
        }
        if (col > n) {
            continue;
        }
        for (int i = row - 1; i >= 0; --i) {
            if (getBit(rows[i], col)) {
                rows[i] ^= rows[row];
            }
        }
    }
    int insertRow = 0;
    while (insertRow < n && getBit(rows[insertRow], insertRow)) {
        ++insertRow;
    }
    for (int i = 0; i < insertRow; ++i) {
        res += getBit(rows[i], insertRow) << i; 
    }
    res += 1ULL << insertRow;
    return res;
}
 
int
processTestCase(const int testId)
{
    int ExitCode = -1;
    int n, b;
    int res = 0;
    scanf("%d%d", &n, &b);
    for (int i = 0; i < b; ++i) {
        getNewBuilding(n);
        values[i] = getValue(n);
    }
    for (int i = 0; i < b - 1; ++i) {
        for (int j = i + 1; j < b; ++j) {
            res += __builtin_parityll(values[i] & values[j]);
        }
    }
    printf("%d\n", res);
    ExitCode = 0;
    return ExitCode;
}
 
int
main(int argc, char **argv)
{
    int t;
    scanf("%d", &t);
    for (int i = 0; i < t; ++i) {
        processTestCase(i);
    }
    return 0;
}
 