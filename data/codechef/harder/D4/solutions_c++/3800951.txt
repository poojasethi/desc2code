#include <iostream>
#include <cassert>
using namespace std;
 
#define Max 10000001
int factors[Max],omega[Max],bigomega[Max],C[Max],sum[Max];
 
inline int bSearch(int& m,int& n,int& u,int& v,int& t) {
	
	int l = t  , h = m , ans, mid , t1, t2;
	while ( l <= h ) {
		
		mid = ((l+h)>>1);
		
		t1 = m/mid ; t2 = n / mid;
		if ( t1 != u || t2 != v ) {
			h = mid - 1;
		}
		else if ( t1 == u && t2 == v ) {
			ans = mid;
			l = mid + 1;
		}	
	}
	assert ( ans >= t );
	return ans;
}
int main() {
 
	int i,j,N,e,kases,n,m,d,base,u,v;
	for ( i = 2 ; i*i < Max ; ++i ) {
		if ( ! factors[i] ) {
			for ( j = (i<<1) ; j < Max ; j += i) {
				factors[j] = i;
			}
		}
	}
	omega[1] = bigomega[1] = 0;
	omega[2] = bigomega[2] = 1;
	for ( i = 2 ; i < Max ; ++i ) {
		if ( !factors[i] ) {
			omega[i] = bigomega[i] = 1;
			C[i] = 1;
		}
		else {
			N = i;e = 0;
			while (!(N%factors[i]) )++e,N/=factors[i];
			   omega[i] = 1 +    omega[N];
			bigomega[i] = e + bigomega[N];
 
			if ( bigomega[i] > (omega[i] + 1) ) C[i] = 0;
			else {
				if ( omega[i] + 1 == bigomega[i] ) {
					if ( omega[i] & 1 ) C[i] = -1;
					else                C[i] = 1;
				}
				else if (omega[i] & 1) C[i] = omega[i];
				else C[i] = -omega[i];
			}
		}
		sum[i] = sum[i-1]+C[i];
	}
	
	scanf("%d",&kases);
	long long ans = 0;
	while ( kases-- ) {
 
		scanf("%d%d",&n,&m);
		d = min(n,m);ans = 0;
 
		for ( i = 1 ; i <= d ; ++i ) {
			u = m / i;v = n / i;
			if ( u > 50 )ans += C[i]*(long long )u*v;
			else {
				j = bSearch(m,n,u,v,i);
				ans += u*v*(sum[j]-sum[i-1]);
				i = j;
			}
		}
		printf("%lld\n",ans);	
	}
	
}
 
