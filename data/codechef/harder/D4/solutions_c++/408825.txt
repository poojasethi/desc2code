/*
* Author : Nikhil Garg
* Date   : 2010-12-29
* Team Proof's C++ template
*/

#include<iostream>
#include<sstream>
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<bitset>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<cctype>
using namespace std;

#define pb								push_back
#define s(n)								scanf("%d",&n)
#define sl(n) 								scanf("%lld",&n)
#define sf(n) 								scanf("%lf",&n)
#define fill(a,v) 							memset(a, v, sizeof a)
#define INF								(int)1e9
#define EPS								1e-9

typedef long long LL;
typedef pair<int, int > PII;

int testCases, testNum;

const int maxn = (int)1e7 + 100;

char one [maxn], two[maxn] ;
int mu[maxn];
int primes[664585];
int P;
int A,B;

void precompute()
{
	P = 0;
	mu[0] = 0;
	mu[1] = 1;
	
	for(int i = 2; i < maxn; i++)
	{
		if(one[i] == 0)				// i is a prime
		{
			primes[P++] = i;
			
			int diff = i <= 3120 ? i * i : maxn;
			
			for(int j = i,k = 1,l = 1; j < maxn; j += i, k++,l++)
			{
				one[j] ++;
				if( k == i)
				{
					two[j] ++, k = 0;
					if( l == diff)
						two[j] = -100, l = 0;
				}
			}
		}
		
		int itsMu = 0;
		if( two[i] == 0 || two[i] == 1)
		{
			if ( two[i] == 1)
				itsMu = one[i] & 1 ? -1 : 1;
		
			else 
				itsMu = one[i] & 1 ? one[i] : - one[i];
		}
		mu[i] = mu[i-1] + itsMu;
	}
	primes[P++] = INF;
}

LL get(int a, int b)
{
	LL ans = 0LL;
	int nd;
	for(int d = 1; d < a; d = nd)
	{
		int ad = a/(d + 1), bd = b/(d + 1);
		int na = a/ad, nb = b/bd;
		nd = na < nb ? na : nb;
		
		ans += 1LL * ad * bd * (mu[nd] - mu[d]);
	}
	return ans;
}

void solve()
{
	if( A > B)		swap(A,B);
	LL ans = get(A,B);
	printf("%lld\n", ans);
}

bool input()
{
	s(A); s(B);
	return true;
}

int main()
{
	precompute();
	s(testCases);
	for(testNum = 1; testNum <= testCases; testNum ++)
	{
		if(!input()) break;
		solve();
	}
}
