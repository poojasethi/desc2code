//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;


#define FOR(i,a,b)					for(int i=a;i<b;i++)
#define REP(i,n)					FOR(i,0,n)
#define pb						 	push_back
#define s(n)						scanf("%d",&n)
#define sl(n) 						scanf("%lld",&n)
#define sf(n) 						scanf("%lf",&n)
#define fill(a,v) 					memset(a, v, sizeof a)
#define sz							size()
#define INF							(int)1e9
#define EPS							1e-9
#define bitcount					__builtin_popcount
#define all(x)						x.begin(), x.end()
#define gcd							__gcd
#define maX(a,b)					(a>b?a:b)
#define miN(a,b)					(a<b?a:b)


typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef pair<int, int > PII;

/*Main code begins now */
#define MAXN 10000001
int testnum;
int factor[MAXN];
bool sqr[MAXN];
bool cube[MAXN];
int pref[10000002];
LL a,b;

void preprocess()
{
	fill(factor,0);
	fill(sqr,false);
	fill(cube,false);
	
	int i,j,z,i2;
	
	// .....2.....
	for(int j=4;j<MAXN;j+=2)
		factor[j]=-2;
	for(int j=4;j<MAXN;j+=4)
		sqr[j]=true;
	

	// .....3.....
	for(int j=9;j<MAXN;j+=6)
		factor[j]=-3;
	for(int j=9;j<MAXN;j+=9)
		if(sqr[j])	cube[j]=true;
		else		sqr[j]=true;

	
	//....general.......
	for(int ii=6;ii<3160;ii+=6)
	{
		i=ii-1;
		if(!factor[i])
		{
			z=i*i;
			i2=6*i;
			for(j=z;j<MAXN;j+=i2)
				factor[j]=-i;
			for(j=z+i+i;j<MAXN;j+=i2)
				factor[j]=-i;
			
			for(j=z;j<MAXN;j+=z)
				if(sqr[j])	cube[j]=true;
				else		sqr[j]=true;
		}

		i=ii+1;
		if(!factor[i])
		{
			z=i*i;
			i2=6*i;
			for(j=z;j<MAXN;j+=i2)
				factor[j]=-i;
			for(j=z+i+i+i+i;j<MAXN;j+=i2)
				factor[j]=-i;
			
			for(j=z;j<MAXN;j+=z)
				if(sqr[j])	cube[j]=true;
				else		sqr[j]=true;
		}
	}
		
	//....cubes........
	for(i=2;i<220;i++)
		if(!factor[i])
		{
			z=i*i*i;
			for(int j=z;j<MAXN;j+=z)
				cube[j]=true;
		}
	
	pref[0]=0;
	pref[1]=0;
	pref[2]=0;
	for(i=2;i<MAXN;i++)
	{
		if(!factor[i])
		{
			factor[i]=1;
			z=1;
		}
		else
		{		
			if(factor[i]<0)
				factor[i]=1+factor[-i/factor[i]];
			
			if(cube[i])
				z=0;
			else if(sqr[i])
				if(factor[i]&1)	z=1;
				else			z=-1;
			else 
				if(factor[i]&1)	z=factor[i];
				else			z=-factor[i];
		}
		pref[i+1]=pref[i]+z;
	}
}

void solve()
{
	//return;
	
	LL ans=0;
	if(a>b)
	{
		LL t=a;
		a=b;
		b=t;
	}
	
	int next,aa,bb;
	for(int i=1;i<=a;i=next)
	{
		aa=a/i; bb=b/i;
		next=min(a/aa,b/bb)+1;
		ans+=(LL)(pref[next]-pref[i])*aa*bb;
	}
	
	printf("%lld\n",ans);
}

bool input()
{
	sl(a); sl(b);
	return true;
}


int main()
{
	preprocess();
	int T; s(T);
	for(testnum=1;testnum<=T;testnum++)
	{
		if(!input()) break;
		solve();
	}
}

