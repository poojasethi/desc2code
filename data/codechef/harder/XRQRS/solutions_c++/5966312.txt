#include <cstdio>
#include <map>
#include <vector>
#include <cstring>
#include<iostream>
#define sz size()
#define maxi 524289
#define LN 19
 
using namespace std;
 
int pow2[25];
 
struct node
{
	int count;
	node *left, *right;
	node(int count, node *left, node *right):count(count), left(left), right(right) {}
	node* insert(int l, int r, int w);
	node* insert1(int i,int x);
};
 
node *null = new node(0, NULL, NULL);
node *root[maxi];
node *root1[maxi];
 
node * node::insert(int l, int r, int w)
{
	if(l <= w && w < r)
	{
		if(l+1 == r)return new node(this->count+1, null, null);
		int m = (l+r)>>1;
		return new node(this->count+1, this->left->insert(l, m, w), this->right->insert(m, r, w));
	}
	return this;
}
node * node::insert1(int i, int x)
{
    if(i == -1)return new node(this->count+1, null, null);
    if((pow2[i] & x) != 0)return new node(this->count+1, this->left, this->right->insert1(i-1, x));
    else return new node(this->count+1, this->left->insert1(i-1, x), this->right);
}
int qy3(node *cur, int l, int r, int a, int b)
{
    if(b <= l || a >= r)return 0;
    if(l >= a && r <= b)return cur->count;
    int m = (l+r)>>1;
    return qy3(cur->left, l, m, a, b) + qy3(cur->right, m, r, a, b);
 
}
int qy4(node *a, node *b, int l, int r, int k)
{
    if(l+1 == r)return l;
    int count = b->left->count - a->left->count;
    int m = (l+r)>>1;
    if(count >= k)return qy4(a->left, b->left, l, m, k);
    return qy4(a->right, b->right, m, r, k-count);
}
 
int main()
{
    pow2[0] = 1;
    for(int i = 1; i <= 20; i++)pow2[i] = 2*pow2[i-1];
	int m;
	scanf("%d", &m);
	int cur = 0;
	null->left = null->right = null;
	while(m--)
	{
	    int type;
	    scanf("%d", &type);
	    if(type == 0)
        {
            int x;
            scanf("%d", &x);
            cur++;
            root[cur] = (cur == 1 ? null : root[cur-1])->insert(1, maxi, x);
            root1[cur] = (cur == 1 ? null : root1[cur-1])->insert1(19, x);
        }
        else if(type == 2)
        {
            int k;
            scanf("%d", &k);
            cur = cur - k;
        }
        else if(type == 3)
        {
            int l, r, x;
            scanf("%d%d%d", &l, &r, &x);
            int temp1 = qy3( (l == 1 ? null : root[l-1]), 1, maxi, 1, x+1);
            int temp2 = qy3(root[r], 1, maxi, 1, x+1);
            printf("%d\n", temp2 - temp1);
        }
        else if(type == 4)
        {
            int l, r, k;
            scanf("%d%d%d", &l, &r, &k);
            printf("%d\n", qy4((l == 1 ? null : root[l-1]), root[r], 1, maxi, k));
        }
        else if(type == 1)
        {
            int l1, r1, x;
            scanf("%d%d%d", &l1, &r1, &x);
            node* a1 = (l1 == 1 ? null : root1[l1-1]);
            node* a2 = root1[r1];
            int bit, l, r, ans = 0, t1, t2, count1;
            for(int i = 19; i >= 0; i--)
            {
                if((pow2[i] & x) != 0)
                {
                    t1 = a1->left->count;
                    t2 = a2->left->count;
                    bit = 1;
                    l = ans;
                    r = ans + pow2[i]-1;
                }
                else
                {
                    bit = 0;
                    l = ans + pow2[i];
                    r = ans + pow2[i] + pow2[i] - 1;
                    t1 = a1->right->count;
                    t2 = a2->right->count;
                }
                count1 = t2-t1;
                if(count1 > 0)
                {
                    if(bit == 0)
                    {
                        ans = ans+pow2[i];
                        a1 = a1->right;
                        a2 = a2->right;
                    }
                    else
                    {
                        a1 = a1->left;
                        a2 = a2->left;
                    }
                }
                else
                {
                    if(bit == 1)
                    {
                        ans = ans+pow2[i];
                        a1 = a1->right;
                        a2 = a2->right;
                    }
                    else
                    {
                        a1 = a1->left;
                        a2 = a2->left;
                    }
                }
            }
            printf("%d\n", ans);
        }
	}
}