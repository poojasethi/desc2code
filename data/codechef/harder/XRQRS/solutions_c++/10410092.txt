#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <algorithm>
using namespace std;
#define N 500050
#define M 10000050
#define Limit (1 << 19)
struct Node
 {
 	Node *c[2];int Cnt;
 } statePool[M],*cur,*emp,*rt[N],Emp;
int Now,n,m;
inline int Read()
 {
 	int x=0;char y;
 	do y=getchar(); while (y<'0'||y>'9');
 	do x=x*10+y-'0',y=getchar(); while (y>='0'&&y<='9');
 	return x;
 }
inline Node* GetNew()
 {return cur->c[0]=cur->c[1]=emp,cur++;}
Node* Insert(int x,int y,Node* z,int o)
 {
 	int mid = x + y >> true;Node* j=GetNew();
 	j->Cnt=z->Cnt+1;
 	if (x!=y) if (o<=mid)
 	  j->c[0]=Insert(x,mid,z->c[0],o),j->c[1]=z->c[1]; else
 	  j->c[1]=Insert(mid+1,y,z->c[1],o),j->c[0]=z->c[0];
 	return j;
 }
int Query(int x,int y,Node* z,Node* o,int p)
 {
 	if (x==y) return x;
 	int mid = x + y >> true;bool flag = (p^x)<(p^y);
 	int k = z->c[0]->Cnt - o->c[0]->Cnt;
 	int l = z->c[1]->Cnt - o->c[1]->Cnt;
 	if (!k||(l&&flag))
 	  return Query(mid+1,y,z->c[1],o->c[1],p); else
 	  return Query(x,mid,z->c[0],o->c[0],p);
 }
int _Query(int x,int y,Node* z,Node* o,int p,int u)
 {
 	int mid = x + y >> true;
 	if (x==p&&y==u) return z->Cnt-o->Cnt;
 	if (u<=mid) return _Query(x,mid,z->c[0],o->c[0],p,u); else
 	 if (p>mid) return _Query(mid+1,y,z->c[1],o->c[1],p,u); else
 	   return _Query(x,mid,z->c[0],o->c[0],p,mid)+
 	     _Query(mid+1,y,z->c[1],o->c[1],mid+1,u);
 }
int __Query(int x,int y,Node* z,Node* o,int p)
 {
 	if (x==y) return x;
 	int mid = x + y >> true,k = z->c[0]->Cnt - o->c[0]->Cnt;
 	if (p>k) return __Query(mid+1,y,z->c[1],o->c[1],p-k); else
 	  return __Query(x,mid,z->c[0],o->c[0],p);
 }
int main()
 {
 	//freopen("input.txt","r",stdin);
 	n=Read();emp=&Emp;emp->c[0]=emp->c[1]=emp;
 	cur=statePool;rt[0]=emp;
 	for (int i=1;i<=n;i++)
 	 {
 	 	int e=Read();
 	 	if (!e) rt[Now+1]=Insert(0,Limit-1,rt[Now],Read()),Now++; else
 	 	 if (e==1)
 	 	  {
 	 	  	 int q=Read(),w=Read();e=Read();
 	 	  	 printf("%d\n",Query(0,Limit-1,rt[w],rt[q-1],e));
 	 	  } else
 	 	 if (e==2) Now-=Read(); else
 	 	 if (e==3)
 	 	  {
 	 	  	 int q=Read(),w=Read();e=Read();
 	 	  	 printf("%d\n",_Query(0,Limit-1,rt[w],rt[q-1],0,e));
 	 	  } else
 	 	  {
 	 	  	 int q=Read(),w=Read();e=Read();
 	 	  	 printf("%d\n",__Query(0,Limit-1,rt[w],rt[q-1],e));
 	 	  }
 	 }
 	return 0;
 }
