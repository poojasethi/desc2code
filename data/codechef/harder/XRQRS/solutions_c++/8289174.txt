#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
const db pi=acos(-1);
void gn(int &x){
    int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
    if(c=='-')sg=-1,x=0;else x=c-'0';
    while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
    x*=sg;
}
void gn(ll &x){
    int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
    if(c=='-')sg=-1,x=0;else x=c-'0';
    while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
    x*=sg;
}
int gcd(int a,int b){return b?gcd(b,a%b):a;}

int L=20;
struct node{
	int ch[2],v;
}t[22222222];int ndtot;
int he[555555];int las=0;

int ins(int x,int dep,int v){
	int y=++ndtot;
	t[y]=t[x];t[y].v++;
	if(dep>=0){
		t[y].ch[v>>dep&1]=ins(t[x].ch[v>>dep&1],dep-1,v);
	}
	return y;
}
int maxor(int h1,int h2,int v){
	int ans=0;
	for (int dep=L-1;dep>=0;dep--){
		int b=v>>dep&1;
		if(t[t[h2].ch[!b]].v-t[t[h1].ch[!b]].v){
			ans|=1<<dep;
			h1=t[h1].ch[!b];
			h2=t[h2].ch[!b];
		}else{
			h1=t[h1].ch[b];
			h2=t[h2].ch[b];
		}
	}
	return ans;
}
int rk(int h1,int h2,int v){
	int su=0;
	v++;
	for (int dep=L-1;dep>=0;dep--){
		int b=v>>dep&1;
		if(b){
			su+=t[t[h2].ch[0]].v-t[t[h1].ch[0]].v;
			h1=t[h1].ch[1];
			h2=t[h2].ch[1];
		}else{
			h1=t[h1].ch[0];
			h2=t[h2].ch[0];
		}
	}
	return su;
}
int kth(int h1,int h2,int k){
	int an=0;
	for (int dep=L-1;dep>=0;dep--){
		int s=t[t[h2].ch[0]].v-t[t[h1].ch[0]].v;
		if(k<=s){
			h1=t[h1].ch[0];
			h2=t[h2].ch[0];
		}else{
			k-=s;
			h1=t[h1].ch[1];
			h2=t[h2].ch[1];
			an|=1<<dep;
		}
	}
	return an;
}
int main()
{
	int m;scanf("%d",&m);
	while(m--){
		int opt;
		gn(opt);
		int x;
		if(opt==0){
			gn(x);
			las++;
			he[las]=ins(he[las-1],L-1,x);
		}else if(opt==2){
			gn(x);
			las-=x;
		}else{
			int l,r;
			gn(l);
			gn(r);
			gn(x);
			if(opt==1)printf("%d\n",maxor(he[l-1],he[r],x)^x);
			else if(opt==3)printf("%d\n",rk(he[l-1],he[r],x));
			else printf("%d\n",kth(he[l-1],he[r],x));
		}
	}
	return 0;
}
