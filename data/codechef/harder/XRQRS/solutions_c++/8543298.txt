#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=510000;
int go[N*20][2];int tot;
int sum[N*20];
int root[N];int rttot;
int nowdep;
int nowlast;
int rank[N];
int Q;
void build(int y,int &x,int dep,int val){
	x=++tot;
	if(dep==-1){
		sum[x]=sum[y]+1;
		return;
	}
	if((val>>dep)&1){
		go[x][0]=go[y][0];
		build(go[y][1],go[x][1],dep-1,val);
	}
	else{
		go[x][1]=go[y][1];
		build(go[y][0],go[x][0],dep-1,val);
	}
	sum[x]=sum[go[x][0]]+sum[go[x][1]];
}
int QUERY_1(int L,int R,int x){
	int rr=root[rank[R]];
	int ll=root[rank[L-1]];
	int ans=0;
	per(i,19,0){
		int d=1-((x>>i)&1);
		if(sum[go[rr][d]]>sum[go[ll][d]]){
			ans+=(1<<i);
			rr=go[rr][d];
			ll=go[ll][d];
		}
		else{
			rr=go[rr][1-d];
			ll=go[ll][1-d];
		}
	}
	return ans;
}
int QUERY_2(int L,int R,int x){
	int rr=root[rank[R]];
	int ll=root[rank[L-1]];
	int ans=0;
	per(i,19,0){
		int d=((x>>i)&1);
		if(d){
			ans+=sum[go[rr][0]]-sum[go[ll][0]];
			rr=go[rr][1];ll=go[ll][1];
		}
		else{
			rr=go[rr][0];ll=go[ll][0];
		}
	}
	ans+=sum[rr]-sum[ll];
	return ans;
}
int QUERY_3(int L,int R,int x){
	int rr=root[rank[R]];
	int ll=root[rank[L-1]];
	int ans=0;
	per(i,19,0){
		if(sum[go[rr][0]]-sum[go[ll][0]]>=x){
			rr=go[rr][0];
			ll=go[ll][0];
		}
		else{
			x-=sum[go[rr][0]]-sum[go[ll][0]];
			rr=go[rr][1];
			ll=go[ll][1];
			ans+=(1<<i);
		}
	}
	return ans;
}
int main(){
	scanf("%d",&Q);
	while(Q--){
		int ty;scanf("%d",&ty);
		if(ty==0){
			int x;scanf("%d",&x);
			++rttot;
			rank[++nowdep]=rttot;
			build(root[nowlast],root[rttot],19,x);
			nowlast=rttot;
		}
		if(ty==1){
			int L,R,x;scanf("%d%d%d",&L,&R,&x);
			printf("%d\n",QUERY_1(L,R,x)^x);
		}
		if(ty==2){
			int k;scanf("%d",&k);
			nowlast=rank[nowdep-k];
			nowdep-=k;
		}
		if(ty==3){
			int L,R,x;scanf("%d%d%d",&L,&R,&x);
			printf("%d\n",QUERY_2(L,R,x));
		}
		if(ty==4){
			int L,R,k;scanf("%d%d%d",&L,&R,&k);
			printf("%d\n",QUERY_3(L,R,k));
		}
	}
	return 0;
}
