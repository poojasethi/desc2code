#include<cstdio>
#include<algorithm>
using namespace std;
int p2[30];
struct nod
{
    int nr;
    nod * po[2];
    nod()
    {
        nr=0;
        po[0]=po[1]=NULL;
    }
};
nod * roots[500005];
nod * insert(nod * root,int val,int bi)
{
    int i,t;
    nod * ans,* tm;
    ans=new nod();
    if(root!=NULL)
    {
    ans->nr=root->nr+1;
        if(bi==-1)
    {
        return ans;
    }
        t=(val & p2[bi])>0;
    ans->po[0]=root->po[0];
    ans->po[1]=root->po[1];
        ans->po[t]=insert(root->po[t],val,bi-1);
    }
    else
    {
        nod * tm;
        ans->nr=1;
        tm=ans;
        for(i=bi;i>=0;i--)
        {
            t=((p2[i] & val)>0);
            tm->po[t]=new nod();
            tm->po[t]->nr=1;
            tm=tm->po[t];
        }
    }
    return ans;
}
int type1(nod * r1,nod * r2,int x)
{
    int t,i,l,ans=0;
    for(i=20; i>=0; i--)
    {
        t=1-((x & p2[i])>0);
        if(r2->po[t]==NULL)
        {
            if(r1!=NULL)
                r1=r1->po[1-t];
            r2=r2->po[1-t];
            ans=ans*2+(1-t);
        }
        else
        {
            int nr;
            if(r1==NULL)
                nr=0;
            else if(r1->po[t]==NULL)
                nr=0;
            else
                nr=r1->po[t]->nr;
            if(nr<r2->po[t]->nr)
            {
                if(r1!=NULL)
                    r1=r1->po[t];
                r2=r2->po[t];
                ans=ans*2+t;
            }
            else
            {
                if(r1!=NULL)
                    r1=r1->po[1-t];
                r2=r2->po[1-t];
                ans=ans*2+(1-t);
            }
        }
    }
    return ans;
}
int type3(nod * r1,nod * r2,int x)
{
    int t,i,l,ans=0,n1,n2;
    for(i=20; i>=0; i--)
    {
        t=((x & p2[i])>0);
        if(r1==NULL)
            n1=0;
        else if(r1->po[0]==NULL)
            n1=0;
        else
            n1=r1->po[0]->nr;
        if(r2==NULL)
            n2=0;
        else
        if(r2->po[0]==NULL)
            n2=0;
        else
            n2=r2->po[0]->nr;
        if(t==1)
            ans=ans+n2-n1;
        if(r1!=NULL)
            r1=r1->po[t];
            if(r2!=NULL)
        r2=r2->po[t];
    }
    if(r2!=NULL)
    {
        ans=ans+r2->nr;
    if(r1!=NULL)
        ans=ans-r1->nr;
    }
    return ans;
}
int type4(nod * r1,nod * r2,int k)
{
    int t,i,l,ans=0,n1,n2;
    for(i=20; i>=0; i--)
    {
        if(r1==NULL)
            n1=0;
        else if(r1->po[0]==NULL)
            n1=0;
        else
            n1=r1->po[0]->nr;
        if(r2==NULL)
            n2=0;
        else
        if(r2->po[0]==NULL)
            n2=0;
        else
            n2=r2->po[0]->nr;
        if(n2-n1<k)
        {
            if(r1!=NULL)
            r1=r1->po[1];
            if(r2!=NULL)
            r2=r2->po[1];
            ans=ans*2+1;
            k=k-(n2-n1);
        }
        else
        {
             if(r1!=NULL)
            r1=r1->po[0];
            if(r2!=NULL)
            r2=r2->po[0];
            ans=ans*2;
        }
    }
    return ans;
}
int main()
{
  //  freopen("x.in","r",stdin);
    int m,i,j,tp,r,x,k,lu=0,l;
    p2[0]=1;
    for(i=1; i<=20; i++)
        p2[i]=p2[i-1]*2;
        roots[0]=NULL;
    scanf("%d",&m);
    for(i=1; i<=m; i++)
    {
        scanf("%d",&tp);
        if(tp==0)
        {
            scanf("%d",&x);
            lu++;
            roots[lu]=new nod();
            roots[lu]=insert(roots[lu-1],x,20);
        }
        if(tp==1)
        {
            scanf("%d%d%d",&l,&r,&x);
            printf("%d\n",type1(roots[l-1],roots[r],x));
        }
        if(tp==2)
        {
            scanf("%d",&k);
            lu=lu-k;
        }
        if(tp==3)
        {
            scanf("%d%d%d",&l,&r,&x);
            printf("%d\n",type3(roots[l-1],roots[r],x));
        }
        if(tp==4)
        {
            scanf("%d%d%d",&l,&r,&x);
            printf("%d\n",type4(roots[l-1],roots[r],x));
        }
    }
    return 0;
}
