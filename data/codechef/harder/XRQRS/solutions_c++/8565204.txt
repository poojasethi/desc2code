#include <stdio.h>
#include <stdlib.h>
using namespace std;

int n,m,i,j,k,opt,ll,rr,aim,ans;

struct node
{
	int l,r,sum;
}t[10000005];
int root[500005],tot;

void C(int &x,int l,int r)
{
	t[++tot]=t[x];x=tot;
	++t[x].sum;
	if(l==r)return;
	int mid=l+r>>1;
	if(aim<=mid)C(t[x].l,l,mid);
	else C(t[x].r,mid+1,r);
}

void Qxor(int L,int R,int x)
{
	if(!x)return;
	if(aim&x)
	{
		if(t[t[R].l].sum-t[t[L].l].sum)ans+=x,Qxor(t[L].l,t[R].l,x>>1);
		else Qxor(t[L].r,t[R].r,x>>1);
	}
	else
	{
		if(t[t[R].r].sum-t[t[L].r].sum)ans+=x,Qxor(t[L].r,t[R].r,x>>1);
		else Qxor(t[L].l,t[R].l,x>>1);
	}
}

void Qsum(int L,int R,int l,int r)
{
	if(r<=aim)
	{
		ans+=t[R].sum-t[L].sum;
		return;
	}
	int mid=l+r>>1;
	Qsum(t[L].l,t[R].l,l,mid);
	if(aim>mid)Qsum(t[L].r,t[R].r,mid+1,r);
}

void Qk(int L,int R,int l,int r)
{
	if(l==r){ans=l;return;}
	int mid=l+r>>1,x=t[t[R].l].sum-t[t[L].l].sum;
	if(x>=aim)Qk(t[L].l,t[R].l,l,mid);
	else aim-=x,Qk(t[L].r,t[R].r,mid+1,r);
}

int main()
{
	scanf("%d",&m);
	for(;m;--m)
	{
		scanf("%d",&opt);
		if(opt==0)
		{
			scanf("%d",&aim);
			++n;root[n]=root[n-1];
			C(root[n],0,524287);
		}
		if(opt==1)
		{
			scanf("%d%d%d",&ll,&rr,&aim);ans=0;
			Qxor(root[ll-1],root[rr],262144);
			printf("%d\n",ans^aim);
		}
		if(opt==2)scanf("%d",&k),n-=k;
		if(opt==3)
		{
			scanf("%d%d%d",&ll,&rr,&aim);ans=0;
			Qsum(root[ll-1],root[rr],0,524287);
			printf("%d\n",ans);
		}
		if(opt==4)
		{
			scanf("%d%d%d",&ll,&rr,&aim);
			Qk(root[ll-1],root[rr],0,524287);
			printf("%d\n",ans);
		}
	}
}