#include<bits/stdc++.h>
using namespace std;
#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define N 52345
#define ll long long
vector<int>adj[N];

///Decomposition Part
int vis[N],subsz[N];
vector<int>gr[N];
void dfs1(int u,int p)
{
    subsz[u]=1;
    for(int i=0;i<adj[u].size();i++)
    {
        int k=adj[u][i];
        if(vis[k]||k==p)
            continue;
        dfs1(k,u);
        subsz[u]+=subsz[k];
    }
}
int find_centroid(int u,int p,int l)
{
    for(int i=0;i<adj[u].size();i++)
    {
        int k=adj[u][i];
        if(vis[k]||k==p)
            continue;
        if(subsz[k]>(subsz[l]/2))
            return find_centroid(k,u,l);
    }
    return u;
}
int decompose(int i)
{
    dfs1(i,-1);
    int prev=find_centroid(i,-1,i);
    vis[prev]=1;
    for(int i=0;i<adj[prev].size();i++)
    {
        int k=adj[prev][i];
        if(vis[k])
            continue;
        gr[prev].pb(decompose(k));
    }
    return prev;
}
void check_decomposition(int n)
{
    for(int i=1;i<=n;i++)
    {
        printf("i=%d\n",i);
        for(int j=0;j<gr[i].size();j++)
            printf("%d ",gr[i][j]);
        printf("\n");
    }
}
///Decomposition Part Ends

///particular question demands!
vector<int>pr;
int dep[N],p[N],dist[N];
int ans=0;
void dfs4(int u,int h)
{
    dep[u]=h;
    for(int i=0;i<gr[u].size();i++)
        dfs4(gr[u][i],h+1);
}
void dfs2(int u,int h,int x,int v,int p)
{
    dist[h]+=v;
    for(int i=0;i<adj[u].size();i++)
        if(dep[adj[u][i]]>dep[x]&&adj[u][i]!=p)
            dfs2(adj[u][i],h+1,x,v,u);
}
void dfs3(int u,int d,int x,int p)
{
    int i;
    i=lower_bound(pr.begin(),pr.end(),d)-pr.begin();
    for(;i<pr.size();i++)
        if(dist[pr[i]-d]==0)
            break;
        else
            ans+=dist[pr[i]-d];
    for(int i=0;i<adj[u].size();i++)
        if(dep[adj[u][i]]>dep[x]&&adj[u][i]!=p)
            dfs3(adj[u][i],d+1,x,u);
}

void rec(int u)
{
    dfs2(u,0,u,1,u);
    for(int i=0;i<adj[u].size();i++)
    {
        if(dep[adj[u][i]]<=dep[u])
            continue;
        dfs2(adj[u][i],1,u,-1,u);
        dfs3(adj[u][i],1,u,u);
    }
    dist[0]--;
}
void dfs5(int u)
{
    for(int i=0;i<gr[u].size();i++)
        dfs5(gr[u][i]);
    rec(u);
}
///demands end!

int main()
{
    int n,i,j;
    scanf("%d",&n);
    p[1]=1;
    for(i=2;i*i<=n;i++)
        if(p[i]==0)
            for(j=i+i;j<=n;j+=i)
                p[j]=1;
    for(i=2;i<=n;i++)
        if(p[i]==0)
            pr.pb(i);
    for(i=0;i<n-1;i++)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        adj[u].pb(v);
        adj[v].pb(u);
    }
    int root=decompose(1);
    dfs4(root,1);
    //check_decomposition(n);
    dfs5(root);
    double p1=ans;
    p1/=n;
    p1/=(n-1);
    p1*=2.0;
    printf("%.8lf\n",p1);
    return 0;
}
