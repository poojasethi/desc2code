#include "cstdio"
#include "iostream"
#include "time.h"
#include "algorithm"
#include "cmath"
#include "cstring"
#include "cstdlib"
#include "vector"
#include "queue"
#include "set"
#include "map"
#include "climits"
#include "cassert"
#define runtime() ((double)clock() / CLOCKS_PER_SEC)
#define rep(i, n) for(int i=0; i<n; i++)
#define repp(i, a, b) for(int i=a; i<a+b; i++)
using namespace std;
#define SZ size()
#define PB push_back
#define MK make_pair
#define X first
#define Y second
#define ll long long
#define ITR iterator
#define LB lower_bound
#define UB upper_bound
#define PII pair<int, int>
#define CLR(a) memset(a, 0, sizeof(a))


int getint(){
    int s = 0, o = 1;
    char c;
    for(c = getchar(); c<'0'||c>'9';c = getchar()) if(c=='-') o = -1;
    for(;c>='0'&&c<='9'; c = getchar()) s *=10, s+=c-'0';
    return s*o;
}

const int maxn = 50010;
int n, x, y;
int fa[maxn], s[maxn], bal[maxn], d[maxn], top[maxn], vis[maxn];
std::vector<int> V[maxn], e[maxn];
int prime[maxn];
ll res;

void divide(int root){
    static int q[maxn], l, r;
    q[0] = root, l = 0, r = 1;
    fa[root] = -1, s[root] = bal[root] = 0;
    while(l<r){
        int u = q[l++];
        rep(i,e[u].SZ) {
            int v = e[u][i];
            if(v!=fa[u] && !vis[v]){
                fa[v] = u;
                s[v] = bal[v] = 0;
                q[r++] = v;
            }   
        }
    }
    for(int i=r-1; i; --i){
        int u = q[i];
        s[u]++, s[fa[u]] += s[u], bal[fa[u]] = max(bal[fa[u]], s[u]);
    }
    rep(i,r){ 
        int u = q[i];
        bal[u] = max(bal[u], s[root] - s[u]);
    }
    rep(i,r){
        int u = q[i]; if(bal[u] < bal[root]) root = u;
    }

    d[root] = 0, fa[root] = -1, q[0] = root, l = 0, r = 1;
    while(l<r){
        int u = q[l++];
        rep(i,e[u].SZ){
            int v = e[u][i];
            if(v!=fa[u] && !vis[v]){
                fa[v] = u, d[v] = d[u] + 1;
                if(u!=root) top[v] = top[u]; else top[v] = v, V[v].clear();
                q[r++] = v;
            }
        }
    }

    int u, v;
    vector<int> &pre = V[root]; pre.clear(); top[root] = root;
    for(int i = r-1; i>=0; --i){
        if(V[u = top[q[i]]].empty()) V[u].resize(d[q[i]]+1);
        ++V[u][d[q[i]]];
    }

    rep(i,e[root].SZ) if(!vis[v = e[root][i]]){
        vector<int> &now = V[v];
        rep(j,pre.SZ) rep(k,now.SZ) if(prime[j + k]) res += 1ll*pre[j]*now[k];
        if(pre.SZ < now.SZ) pre.resize(now.SZ);
        rep(j,now.SZ) pre[j] += now[j];     
    }

    vis[root] = 1;
    rep(i,e[root].SZ) if(!vis[v = e[root][i]]) divide(v);
}
int main(int argc, char const *argv[])
{
    rep(i,maxn) prime[i] = 1;
    prime[0] = prime[1] = 0;
    for(int i=2; i*i<maxn; ++i)if(prime[i]){
        for(int j=i*i; j<maxn; j += i){
            prime[j] = 0;
        }
    }

    n = getint();
    rep(i,n-1){
        x = getint(), y = getint();
        e[x].PB(y), e[y].PB(x);
    }
    divide(1);
    printf("%.10lf\n", res*1./(1ll*n*(n-1)/2));
    return 0;
}