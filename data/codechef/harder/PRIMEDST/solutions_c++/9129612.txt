#include<algorithm>
#include<iostream>
#include<cstring>
#include<cstdio>
#include<cmath>
#define N 131072
#define ld double
#define LL long long
using namespace std;
struct cp{
	ld r,i;
	inline void init(ld x,ld y){r=x,i=y;}
	inline cp operator + (const cp &A){
	  return (cp){r+A.r,i+A.i};}
	inline cp operator - (const cp &A){
	  return (cp){r-A.r,i-A.i};}
	inline cp operator * (const cp &A){
	  return (cp){r*A.r-i*A.i,r*A.i+i*A.r};}
}A[N],B[N],C[N],T[N];
int point[N],next[N<<1],v[N<<1],size[N];
int prime[N],rev[N],g,gsum,sz,L,c[N];
LL ans;
bool f[N],use[N];
inline int in(){
	int x=0; char ch=getchar();
	while (ch<'0'||ch>'9') ch=getchar();
	while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();
	return x;
}
inline void add(int x,int y,int i){
	v[i]=y; next[i]=point[x]; point[x]=i;}
inline void prework(int n){
	f[0]=f[1]=1;
	for (int i=2; i<=n; i++){
	  if (!f[i]) prime[++prime[0]]=i;
	  for (int j=1; j<=prime[0]&&i*prime[j]<=n; j++){
	  	f[i*prime[j]]=1;
	  	if (i%prime[j]==0) break;
	  }
	}
}
inline void FFT(cp a[],int flag){
	for (int i=0; i<sz; i++) T[rev[i]]=a[i];
	for (int i=0; i<sz; i++) a[i]=T[i];
	for (int i=2; i<=sz; i<<=1){
	  cp wn; wn.init(cos(2.*M_PI/i),flag*sin(2.*M_PI/i));
	  for (int j=0; j<sz; j+=i){
	  	cp w; w.init(1.,0);
	  	for (int k=j; k<j+i/2; k++){
	  	  cp t=a[k+i/2]*w;
	  	  a[k+i/2]=a[k]-t,a[k]=a[k]+t;
	  	  w=w*wn;
	  	}
	  }
	}
	if (flag==-1) for (int i=0; i<sz; i++) a[i].r/=(ld)sz;
}
inline void get_g(int x,int fa,int sum){
	int k=0,vt,t; size[x]=1;
	for (int i=point[x]; i; i=next[i])
	  if (!use[vt=v[i]]&&vt!=fa){
	  	get_g(vt,x,sum);
	  	size[x]+=size[vt];
	  	if (size[vt]>k) k=size[vt];
	  }
	if ((t=max(k,sum-size[x]))<gsum) gsum=t,g=x;
}
inline void pre_fft(int n){
	L=0,sz=1;
	while (sz<=n) L++,sz<<=1;
	for (int i=0; i<sz; i++){
	  int t=0,now=i;
	  for (int j=1; j<=L; j++)
	    t=t<<1|(now&1),now>>=1;
	  rev[i]=t;
	}
}
inline void dfs(int x,int fa,int d){
	c[d]++; int vt;
	for (int i=point[x]; i; i=next[i])
	  if (!use[vt=v[i]]&&vt!=fa) dfs(vt,x,d+1);
}
inline LL cal(int x,int d,int sum){
	pre_fft(sum*2);
	for (int i=0; i<sz; i++) c[i]=0;
	dfs(x,0,d);
	for (int i=0; i<sz; i++) A[i]=B[i]=(cp){(ld)c[i],0};
	FFT(A,1); FFT(B,1);
	for (int i=0; i<sz; i++) C[i]=A[i]*B[i];
	FFT(C,-1); LL ans0=0;
	for (int i=0; i<sz; i++)
	  if (!f[i]) ans0+=(LL)(C[i].r+0.5);
	return ans0;
}
inline void work(int x,int sum){
	gsum=sum; get_g(x,0,sum);
	if (size[x]==1) return;
	use[g]=1; ans+=cal(g,0,size[x]); int vt;
	for (int i=point[g]; i; i=next[i])
	  if (!use[vt=v[i]]) ans-=cal(vt,1,size[vt]);
	for (int i=point[g]; i; i=next[i])
	  if (!use[vt=v[i]]) work(vt,size[vt]);
}
int main(){
	//freopen("data.in","r",stdin);
	//freopen("f.out","w",stdout);
	int n=in(); prework(n);
	for (int i=1; i<n; i++){
	  int x=in(),y=in();
	  add(x,y,i<<1),add(y,x,i<<1|1);
	}
	work(1,n); ans/=2;
	ld Ans=(ld)ans/(ld)n/(ld)(n-1)*2.;
	printf("%.9f\n",Ans);
}