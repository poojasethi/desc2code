#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#include<cmath>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=51000;
const double pi=acos(-1.0);
//FFT
const int MAXN=(1<<17)+5;
struct com{
	double re,im;
	inline com(double _a=0.0,double _b=0.0){
		re=_a;im=_b;
	}
};
inline com operator +(const com &a,const com &b){
	return com(a.re+b.re,a.im+b.im);
}
inline com operator -(const com &a,const com &b){
	return com(a.re-b.re,a.im-b.im);
}
inline com operator *(const com &a,const com &b){
	return com(a.re*b.re-a.im*b.im,a.re*b.im+a.im*b.re);
}
inline void FFT(com *A,int M,bool f){
	rep(i,0,M-1){
		int x=i;int y=0;
		for(int k=1;k<M;k<<=1,x>>=1)(y<<=1)|=(x&1);
		if(i<y){
			com tmp=A[i];A[i]=A[y];A[y]=tmp;
		}
	}
	for(int i=1;i<M;i<<=1){
		com V=com(cos(2.*pi/(i<<1)),sin(2.*pi/(i<<1)));
		if(f)V.im*=-1;
		for(int j=0;j<M;j+=(i<<1)){
			com W=com(1,0);
			rep(k,0,i-1){
				com x,y;y=A[j+k];x=A[j+k+i]*W;
				A[j+k]=x+y;
				A[j+k+i]=y-x;
				W=W*V;
			}
		}
	}
	if(f){
		rep(i,0,M-1)A[i].re/=M;
	}
}
//FFT
int n;int head[N],np[N*2],p[N*2],tot;
LL allans[MAXN];
bool pr[N];
//dian fen
bool vis[N];int dep[N],fa[N],sz[N],q[N],inq[N];
int size[N];
int zx(int y){
	q[q[0]=1]=y;inq[y]=1;
	rep(i,1,q[0]){
		int x=q[i];
		for(int u=head[x];u;u=np[u])if((!inq[p[u]])&&(!vis[p[u]])){
			q[++q[0]]=p[u];inq[p[u]]=1;fa[p[u]]=x;
		}
	}
	int ma1=-1;int ma2=1e9;
	per(i,q[0],1){
		int x=q[i];
		size[x]=1;
		int m2=0;
		for(int u=head[x];u;u=np[u])if(fa[p[u]]==x){
			size[x]+=size[p[u]];
			if(size[p[u]]>m2)m2=size[p[u]];
		}
		if(q[0]-size[x]>m2)m2=q[0]-size[x];
		if(m2<ma2){
			ma1=x;ma2=m2;
		}
	}
	
	rep(i,1,q[0]){
		inq[q[i]]=fa[q[i]]=size[q[i]]=0;
	}
	
	return ma1;
}
void bfs(int y){
	dep[y]=0;
	q[q[0]=1]=y;inq[y]=1;
	rep(i,1,q[0]){
		int x=q[i];
		for(int u=head[x];u;u=np[u])
		if((!vis[p[u]])&&(!inq[p[u]])){
			inq[p[u]]=1;dep[p[u]]=dep[x]+1;q[++q[0]]=p[u];
		}
	}
	rep(i,1,q[0])inq[q[i]]=0;
}
com A[MAXN];
void calc(int y,int v){
	q[q[0]=1]=y;inq[y]=1;
	rep(i,1,q[0]){
		int x=q[i];
		for(int u=head[x];u;u=np[u])
		if((!vis[p[u]])&&(!inq[p[u]])){
			inq[p[u]]=1;q[++q[0]]=p[u];
			//printf("__%d %d\n",y,p[u]);
		}
	}
	int M=1;
	while(M<=q[0])M<<=1;
	M<<=1;
	rep(i,0,M-1)A[i]=com(0,0);
	rep(i,1,q[0])A[dep[q[i]]].re++;
	//rep(i,0,M-1)printf("%.2lf ",A[i].re);printf("\n");
	
	FFT(A,M,0);
	rep(i,0,M-1)A[i]=A[i]*A[i];
	FFT(A,M,1);
	rep(i,0,M-1)allans[i]+=1ll*((LL)(A[i].re+0.3))*v;
	
	rep(i,1,q[0])inq[q[i]]=0;
}
void dfs(int y){
	int x=zx(y);
	vis[x]=1;
	bfs(x);
	calc(x,1);
	//printf("__%d\n",x);
	//rep(i,1,n)printf("%lld ",allans[i]);printf("\n");
	for(int u=head[x];u;u=np[u])if(!vis[p[u]]){
		calc(p[u],-1);
	}
	for(int u=head[x];u;u=np[u])if(!vis[p[u]])dfs(p[u]);
}
//dian fen
int main(){
	scanf("%d",&n);
	rep(i,1,n-1){
		int u,v;scanf("%d%d",&u,&v);
		++tot;p[tot]=v;np[tot]=head[u];head[u]=tot;
		++tot;p[tot]=u;np[tot]=head[v];head[v]=tot;
	}
	dfs(1);
	rep(i,2,n)if(!pr[i]){
		rep(j,2,n/i)pr[i*j]=1;
	}
	LL ans=0;
	rep(i,2,n)if(!pr[i])ans+=allans[i];
	printf("%.10lf\n",ans*1./(n*1.*(n-1)));
	return 0;
}

