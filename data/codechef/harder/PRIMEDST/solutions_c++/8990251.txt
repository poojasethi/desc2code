#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <algorithm> 
#include <cstring> 
#include <cmath> 
#include <string> 
using namespace std;
typedef double LD;
typedef long long LL;
const LD Pi=atan2(0,-1); 
const int Maxn=50005,MaxN=(1<<17)+5,inf=999999999+208; 
int n,dis[Maxn],Q[Maxn],visi[Maxn],fa[Maxn],Time=0,all; 
int rev[MaxN]; 
LL c[Maxn];
bool flag[Maxn],fp[Maxn]; 
  
inline int get(){ 
   char ch; 
   while (!isdigit(ch=getchar())); 
   int v=ch-48; 
   while (isdigit(ch=getchar())) v=v*10+ch-48; 
   return v; 
} 
  
struct edge{ 
   int t; 
   edge *nex; 
}e[Maxn*2],*E=e,*fst[Maxn]; 
  
struct Comp{ 
   LD r,i; 
   Comp(){} 
   inline Comp(LD _r,LD _i){ r=_r; i=_i;} 
   inline Comp operator +(const Comp &rhs)const{return Comp(r+rhs.r,i+rhs.i);} 
   inline Comp operator -(const Comp &rhs)const{return Comp(r-rhs.r,i-rhs.i);} 
   inline Comp operator *(const Comp &rhs)const{return Comp(r*rhs.r-i*rhs.i,r*rhs.i+i*rhs.r);} 
}a[MaxN],b[MaxN],_w0[2][18];

inline void DFT(Comp a[],Comp b[],int limi,int inv){ 
   int N=1<<limi; 
   for (int i=0;i<N;i++) b[i]=a[rev[i]]; 
   for (int i=1,d=2;i<=limi;i++,d<<=1){ 
      Comp w0=_w0[inv==1][i],w,t;
      for (int j=0,k;j<N;j+=d) 
         for (k=j,w=Comp(1,0);k<j+(d>>1);k++,w=w*w0) 
            t=b[k+(d>>1)]*w,b[k+(d>>1)]=b[k]-t,b[k]=b[k]+t; 
   } 
   if (inv==-1) for (int i=0;i<N;i++) b[i].r/=N;
} 
  
inline int FFT(int len){
   int limi=0,N=1; 
   for (;N<(len<<1);N<<=1,limi++);
   for (int i=0,t=1<<(limi-1);i<N;rev[++i]=0) rev[i]=(rev[i>>1]>>1)|((i&1)?t:0);
   DFT(a,b,limi,1); 
   for (int i=0;i<N;i++) b[i]=b[i]*b[i]; 
   DFT(b,a,limi,-1);
   return N;
} 
  
inline int find(int p,bool f){ 
   static int size[Maxn],func[Maxn]; 
   int l=1,r=2; 
   Q[1]=p; visi[p]=++Time; 
   dis[p]=fa[p]=0; 
   while (l<r){ 
      int x=Q[l++]; size[x]=1; func[x]=0; 
      for (edge *e=fst[x];e;e=e->nex) 
         if (!flag[e->t]&&visi[e->t]!=Time) 
            dis[Q[r++]=e->t]=dis[fa[e->t]=x]+1,visi[e->t]=Time; 
   } 
   if (!f) return 0; 
   all=r-1; p=0; func[0]=inf; 
   for (int i=all,x=Q[all];i;x=Q[--i]){ 
      size[fa[x]]+=size[x]; 
      func[fa[x]]=max(func[fa[x]],size[x]); 
      func[x]=max(func[x],all-size[x]); 
      if (func[p]>func[x]) p=x; 
   } 
   return p; 
} 
  
void work(int s){ 
   int l=1,r=2,N=0;
   Q[1]=s;
   while (l<r){ 
      int x=Q[l++]; 
      a[dis[x]].r++; N=max(N,dis[x]); 
      for (edge *e=fst[x];e;e=e->nex) 
         if (!flag[e->t]&&fa[e->t]==x) Q[r++]=e->t; 
   }
   N=FFT(N+1);
   for (int i=0;i<N;i++) c[i]-=LL(a[i].r+0.5),a[i].r=a[i].i=0; 
} 
  
void solve(int x){ 
   find(x=find(x,1),0); flag[x]=1; 
   int N=0; 
   for (int i=all,p=Q[i];i;p=Q[--i]) a[dis[p]].r++,N=max(N,dis[p]); 
   N=FFT(N+1); 
   for (int i=0;i<N;i++) c[i]+=LL(a[i].r+0.5),a[i].r=a[i].i=0; 
   for (edge *e=fst[x];e;e=e->nex) if (!flag[e->t]) work(e->t); 
   for (edge *e=fst[x];e;e=e->nex) if (!flag[e->t]) solve(e->t); 
} 
  
int main(){
   n=get();
   for (int i=1,d=2;i<=17;i++,d<<=1)
      _w0[0][i]=Comp(cos(-2*Pi/d),sin(-2*Pi/d)),
      _w0[1][i]=Comp(cos(2*Pi/d),sin(2*Pi/d));
   for (int i=1;i<n;i++){ 
      int u=get(),v=get(); 
      (++E)->nex=fst[u]; fst[u]=E; E->t=v; 
      (++E)->nex=fst[v]; fst[v]=E; E->t=u; 
   } 
   solve(1);
   LD ans=0; 
   for (int i=2;i<n;i++)
      if (!fp[i]) {
	     ans+=c[i];
         for (int j=i*2;j<=n;j+=i) fp[j]=true;
      }
   ans/=n*LD(n-1);
   printf("%.10lf\n",double(ans));
   return 0; 
}