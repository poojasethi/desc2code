#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<cmath>
using namespace std;
typedef long double db;
typedef long long ll;
db pi=3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862;
ll ans=0;
struct edge{int v,next;}e[100005];int etot=0;int g[50005];
int off[50005]={0};
void ae(int u,int v){e[etot].v=v;e[etot].next=g[u];g[u]=etot++;}
int qu[50005],p,q,sz[50005],pre[50005],bo[50005];
int getc(int u){
	p=q=0;
	qu[q++]=u;pre[u]=0;
	while(p!=q){
		int u=qu[p++];sz[u]=1;bo[u]=1;
		for (int i=g[u];~i;i=e[i].next)if(!off[e[i].v]&&pre[u]!=e[i].v){
			pre[e[i].v]=u;
			qu[q++]=e[i].v;
		}
	}
	for (int i=q-1;i>=0;i--){
		if(bo[qu[i]] && sz[qu[i]]*2>=q)return qu[i];
		if(sz[qu[i]]*2>q)bo[pre[qu[i]]]=0;
		sz[pre[qu[i]]]+=sz[qu[i]];
	}
}
int geth(int u,int pre=-1){
	int ma=0;
	for (int i=g[u];~i;i=e[i].next)if(pre!=e[i].v && !off[e[i].v])ma=max(ma,geth(e[i].v,u));
	return ma+1;
}
int H[50005];
int cmph(int i,int j){return H[i]<H[j];}
int ch[50005],tot;
int cnt[500005];int maxh;
int cur[500005];
void dfsh(int u,int now,int pre=-1){
	cur[now]++;
	for (int i=g[u];~i;i=e[i].next)if(pre!=e[i].v && !off[e[i].v])dfsh(e[i].v,now+1,u);
}
int res[500005];
struct cp{
	db a,b;//a+bi;
	cp operator+(const cp&x)const{return (cp){a+x.a,b+x.b};}
	cp operator-(const cp&x)const{return (cp){a-x.a,b-x.b};}
	cp operator*(const cp&x)const{return (cp){a*x.a-b*x.b,a*x.b+b*x.a};}
}a[500005],b[500005];
int n;

int rev(int x){
	int res=0;
	for (int i=1;i<n;i<<=1){
		res<<=1;
		if(x&i)res|=1;
	}
	return res;
}
void dft(cp*a,int fl=1){
	for (int i=0;i<n;i++){
		int j=rev(i);
		if(i<j)swap(a[i],a[j]);
	}
	for (int m=2;m<=n;m<<=1){
		cp wm;
		wm=(cp){cos(fl*2*pi/m),sin(fl*2*pi/m)};
		for (int j=0;j<n;j+=m){
			cp w;w=(cp){1,0};
			for (int k=j;k<j+m/2;k++){
				cp u=a[k],v=w*a[k+m/2];
				a[k]=u+v;
				a[k+m/2]=u-v;
				w=w*wm;
			}
		}
	}
	if(fl==-1)for (int i=0;i<n;i++)a[i].a/=n;
}
void fft(){
	dft(a);dft(b);
	for (int i=0;i<n;i++)a[i]=a[i]*b[i];
	dft(a,-1);
}

int npr[50005];
void merge(int l){
	n=1;
	while(n<(2*l))n<<=1;
	for (int i=0;i<l;i++)a[i]=(cp){cnt[i],0},b[i]=(cp){cur[i],0};
	for (int i=l;i<n;i++)a[i]=b[i]=(cp){0,0};
	fft();
	for (int i=2;i<2*l;i++){
		int cnt=int(a[i].a+0.5);
		if(!npr[i])ans+=cnt;
	}
}
void work(int asd){
	int u=getc(asd);
	off[u]=1;
	tot=0;
	for (int i=g[u];~i;i=e[i].next)if(!off[e[i].v]){
		ch[++tot]=e[i].v;
		H[e[i].v]=geth(e[i].v);
	}
	sort(ch+1,ch+1+tot,cmph);
	maxh=0;cnt[0]=1;
	ch[0]=H[0]=0;
	for (int i=1;i<=tot;i++){
		for (int j=0;j<=H[ch[i]];j++)cur[j]=0;
		dfsh(ch[i],1);
		for (int j=H[ch[i-1]]+1;j<=H[ch[i]];j++)cnt[j]=0;
		merge(H[ch[i]]+1);
		for (int j=0;j<=H[ch[i]];j++)cnt[j]+=cur[j];
	}
	for (int i=g[u];~i;i=e[i].next)if(!off[e[i].v])work(e[i].v);
}
		

int main()
{
	npr[1]=1;
	for (int i=2;i<=50001;i++)if(!npr[i])
		for (int j=i+i;j<=50001;j+=i)npr[j]=1;
	int n;
	scanf("%d",&n);
	memset(g,-1,sizeof(g));
	for (int i=1;i<n;i++){
		int x,y;
		scanf("%d%d",&x,&y);
		ae(x,y);ae(y,x);
	}
	work(1);
	printf("%.10lf\n",(double)(1.0*ans/(1ll*n*(n-1)/2)));
	return 0;
}
