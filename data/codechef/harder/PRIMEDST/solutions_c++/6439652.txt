#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
#define rep(i,x,y) for(int i=x;i<=y;++i)
using namespace std;
#define N 50005
#define LL long long
#define inf 0x7f7f7f7f
const double pi=acos(-1.0);

struct complex{
	double re,im;
	complex(double re=0,double im=0):re(re),im(im){}
}a[N<<2],b[N<<2];

complex operator +(const complex &a,const complex &b){return complex(a.re+b.re,a.im+b.im);}
complex operator -(const complex &a,const complex &b){return complex(a.re-b.re,a.im-b.im);}
complex operator *(const complex &a,const complex &b){return complex(a.re*b.re-a.im*b.im,a.re*b.im+a.im*b.re);}

void DFT(complex *a,int n,int f){
	rep(i,0,n-1){
		int y=i,x=0;
		for(int k=1;k<n;k<<=1,y>>=1) (x<<=1)|=(y&1);
		if(x>i) swap(a[x],a[i]);
	}
	complex x,y;
	for(int i=2;i<=n;i<<=1){
		complex wn(cos(2*pi/i),f*sin(2*pi/i));
		for(int j=0;j<n;j+=i){
			complex w(1);
			for(int k=0;k<i>>1;k++){
				x=a[j+k];
				y=w*a[j+k+(i>>1)];
				a[j+k]=x+y;
				a[j+k+(i>>1)]=x-y;
				w=w*wn;
			}
		}
	}
	if(f==-1) rep(i,0,n-1) a[i].re/=n;
}

int n,sn[N],nx[N<<1],ed[N<<1],x,y,p[N],prime[N],len,sz[N],root,mn,totsz,tn;
LL ans;
bool vis[N];

void dfs_sz(int x,int fa){
	sz[x]=1;
	for(int j=sn[x];j;j=nx[j])
		if(!vis[ed[j]] && ed[j]!=fa){
			dfs_sz(ed[j],x);
			sz[x]+=sz[ed[j]];
		}
}

void dfs_rt(int x,int fa){
	int mx=0;
	for(int j=sn[x];j;j=nx[j])
		if(!vis[ed[j]] && sz[ed[j]]>mx)
			mx=sz[ed[j]];
	if(mx<mn) mn=mx,root=x;
	for(int j=sn[x];j;j=nx[j])
		if(!vis[ed[j]] && ed[j]!=fa){
			sz[x]=totsz-sz[ed[j]];
			dfs_rt(ed[j],x);
		}
}

void dfs_inq(int x,int fa,int d){
	if(d+1>tn) tn=d+1;
	b[d].re+=1;
	for(int j=sn[x];j;j=nx[j])
		if(!vis[ed[j]] && ed[j]!=fa)
			dfs_inq(ed[j],x,d+1);
}

void work(int x){
	dfs_sz(x,0);
	totsz=sz[x];
	root=0,mn=inf;
	dfs_rt(x,0);
	
	tn=1;
	a[0].re=1;
	for(int j=sn[root];j;j=nx[j])
		if(!vis[ed[j]]){
			dfs_inq(ed[j],root,1);
			rep(i,1,tn) a[i].re+=b[i].re;
			int tm=1;
			for(;tm<tn;tm<<=1);
			DFT(b,tm<<1,1);
			rep(i,0,tm<<1) b[i]=b[i]*b[i];
			DFT(b,tm<<1,-1);
			rep(i,2,tm<<1) if(p[i]==i) ans-=(LL)(b[i].re+0.5);
			rep(i,0,tm<<1) b[i]=complex(0,0);
		}
	int tm=1;
	for(;tm<tn;tm<<=1);
	DFT(a,tm<<1,1);
	rep(i,0,tm<<1) a[i]=a[i]*a[i];
	DFT(a,tm<<1,-1);
	rep(i,2,tm<<1) if(p[i]==i) ans+=(LL)(a[i].re+0.5);
	rep(i,0,tm<<1) a[i]=complex(0,0);
	
	vis[root]=1;
	for(int j=sn[root];j;j=nx[j])
		if(!vis[ed[j]])
			work(ed[j]);
}

int main(){
	scanf("%d",&n);
	rep(i,2,n){
		scanf("%d%d",&x,&y);
		nx[i]=sn[x],sn[x]=i,ed[i]=y;
		nx[i+n]=sn[y],sn[y]=i+n,ed[i+n]=x;
	}
	rep(i,2,n){
		if(!p[i]) p[i]=prime[++len]=i;
		for(int j=1;j<=len && prime[j]<=p[i] && i*prime[j]<=n;++j)
			p[i*prime[j]]=prime[j];
	}
	work(1);
	printf("%.9lf\n",(double)ans/((LL)n*(n-1)));
}
