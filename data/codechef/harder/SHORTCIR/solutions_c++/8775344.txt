#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
    int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
    if(c=='-')sg=-1,x=0;else x=c-'0';
    while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
    x*=sg;
}
void gn(ll &x){
    int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
    if(c=='-')sg=-1,x=0;else x=c-'0';
    while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
    x*=sg;
}
int qp(int a,ll b,int mo){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}
const int mo=1000000007;
char str[333333];
int len;
int cur;
map<ll,int>ma;int tot;
int get(){
    while(str[cur]==' ')cur++;
    cur++;
    if(str[cur-1]==0)return 0;
    if(str[cur-1]=='(')return -1;
    if(str[cur-1]==')')return -2;
    cur--;
    ll nu=0;
    while(str[cur]>='a' && str[cur]<='z')nu=nu*30+str[cur++]-'a'+1;
    if(nu==13070)return -3;//not
    if(nu==1324)return -4;//and
    if(nu==468)return -5;//or
    if(!ma[nu]){
        ma[nu]=++tot;
    }
    return ma[nu];
}
char tmp[111111];
db p[555555];
db ex[555555];
int li[333333];
int n;
int stkop[333333],topop;
int lv[333333];
int stknu[333333],topnu;
int cmpor(int i,int j){
    return ex[j]*p[i]>ex[i]*p[j];
}
int cmpand(int i,int j){
    return ex[j]*(1-p[i])>ex[i]*(1-p[j]);
}
int need(char c){
    return c==' '|| (c>='a' && c<='z') || c=='(' || c==')';
}
int main()
{
    int tes;
    gn(tes);
    while(tes--){
        len=0;
        char c;
        while(!need(c=getchar()));
        str[len++]=c;
        while(need(c=getchar()))str[len++]=c;
        str[len]=0;
        cur=0;
        ma.clear();
        tot=0;
        n=0;
        int xxx;
        while(xxx=get())li[++n]=xxx;
        for (int i=1;i<=tot;i++){
            scanf("%s",tmp);
            ll nu=0;
            for (int i=0;tmp[i];i++)nu=nu*30+tmp[i]-'a'+1;
            scanf("%lf",&p[ma[nu]]);
            ex[ma[nu]]=1.0;
        }
        topop=topnu=0;
        int curdep=0;
        li[++n]=-1000;
        for (int i=1;i<=n;i++){
            if(li[i]==-1)curdep+=3;
            else if(li[i]==-2)curdep-=3;
            else if(li[i]>=1)stknu[++topnu]=li[i];
            else{
                int de=curdep+li[i];
                while(topop && de<lv[topop]){
                    int l=topop;
                    while(l && lv[l]==lv[topop])l--;
                    l++;
                    if(stkop[topop]==-3){
                        ++tot;
                        p[tot]=1-p[stknu[topnu]];
                        ex[tot]=ex[stknu[topnu]];
                        stknu[topnu]=tot;
                    }else{
                        if(stkop[topop]==-5)
                            sort(stknu+topnu-(topop-l+1),stknu+topnu+1,cmpor);
                        else
                            sort(stknu+topnu-(topop-l+1),stknu+topnu+1,cmpand);
                        ++tot;
                        if(stkop[topop]==-5){
                            p[tot]=1.0;
                            ex[tot]=0.0;
                            for (int i=topnu;i>=topnu-(topop-l+1);i--){
                                p[tot]*=(1-p[stknu[i]]);
                                ex[tot]=ex[tot]*(1-p[stknu[i]])+ex[stknu[i]];
                            }
                            p[tot]=1-p[tot];
                        }else{
                            p[tot]=1.0;
                            ex[tot]=0.0;
                            for (int i=topnu;i>=topnu-(topop-l+1);i--){
                                p[tot]*=(p[stknu[i]]);
                                ex[tot]=ex[tot]*(p[stknu[i]])+ex[stknu[i]];
                            }
                        }
                        topnu-=(topop-l+1);
                        stknu[topnu]=tot;
                    }
                    topop=l-1;
                }
                stkop[++topop]=li[i];
                lv[topop]=de;
            }
        }
        printf("%.6lf\n",ex[stknu[1]]);
    }
    return 0;
}
