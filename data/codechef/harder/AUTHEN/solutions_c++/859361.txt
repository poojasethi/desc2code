#pragma warning( disable : 4786 )
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <queue>
#include <cstring>
#include <ctime>
using namespace std;

#define MOD 1009419529

int dp[10201][101];
int last[256];
char s[10201];

int charAt(int i) {
    return s[i - 1] - 'a';
}
int main (void){
    int T; scanf("%d", &T);
    for (int t = 1; t <= T; ++t) {
        int n, k;
        scanf("%d%d", &n, &k);
        scanf("%s", s);
        for (int i = 0; i < 26; ++i) {
            last[i] = -1000000;
        }
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        for (int i = 1; i <= n + k; ++i) {
            int c = charAt(i);
            for (int j = 0; j <= k; ++j) {
                if (i == j) { // have to delete all
                    dp[i][j] = 1;
                    continue;
                }
                if (j > i) { // have to delete more characters than we have.
                    break;
                }
                if (j == 0) { // have to delete nothing
                    dp[i][j] = 1;
                    continue;
                }
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                if (dp[i][j] >= MOD) dp[i][j] -= MOD;
                int last_pos = last[c];
                int dist = i - last_pos;
                if (dist <= j) {
                    dp[i][j] -= dp[last_pos - 1][j - dist];
                    if (dp[i][j] < 0) {
                        dp[i][j] += MOD;
                    }
                }
            }
            last[c] = i;
        }
        int res = dp[n + k][k] - 1;
        if (res < 0) res += MOD;
        printf("%d\n", res);
    }
}
