#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

#define MOD 1009419529

int dp[10102][102];
char str[10109];
int seen[130];
int prev_itr[10102];
/*
int rec(int have,int toDel)
{
	if(toDel<0) return 0;
	if(toDel==0) return 1;
	if(have<toDel) return 0;
	if(have==toDel) return 1;
	
	int &ret=dp[have][toDel];
	if(ret>=0) return ret;
	
	ret=rec(have-1,toDel-1)+rec(have-1,toDel);
	
	if(prev_itr[have]>0)
	{
		int deleted=have-prev_itr[have];
		ret-=rec(prev_itr[have]-1,toDel-deleted);
	}
	
	if(ret<0) ret+=MOD;
	if(ret>=MOD) ret-=MOD;
	return ret;
}
*/
int main()
{
	int kase,n,k,i;
	int have,toDel,deleted;
	
	scanf("%d",&kase);
	while(kase--)
	{
		memset(seen,0,sizeof seen);
		
		scanf(" %d %d",&n,&k);
		n+=k;
		scanf(" %s",str+1);
		
		for(i=1;i<=n;i++)
		{
			prev_itr[i]=seen[str[i]];
			seen[str[i]]=i;
		}
		
		for(have=0;have<=n;have++)
		{
			for(toDel=0;toDel<=k;toDel++)
			{
				int &val=dp[have][toDel];
				
				if(toDel==0)
				{
					val=1;
				}
				else if(have<toDel)
				{
					val=0;
				}
				else if(have==toDel)
				{
					val=1;
				}
				else
				{
					val=dp[have-1][toDel]+dp[have-1][toDel-1];
					
					if(prev_itr[have]>0)
					{
						deleted=have-prev_itr[have];
						
						if(toDel-deleted>=0) val-=dp[prev_itr[have]-1][toDel-deleted];
					}
				}
				
				if(val<0) val+=MOD;
				else if(val>=MOD) val-=MOD;
			}
		}
		
		int res=dp[n][k]-1;
		if(res<0) res+=MOD;
		printf("%d\n",res);
	}
	return 0;
}
