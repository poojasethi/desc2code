#include<stdio.h>
#include<string.h>
#include<math.h>
#include<ctype.h>
#include<assert.h>
#include<stdlib.h>
#include<time.h>

#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<iostream>
#include<algorithm>
#include<string>

using namespace std;

#define FOR(i,n) for(int i=0;i<(n);++i)
#define REP(i,a,b) for(int i=(a);i<=(b);++i)
#define CLR(a,x) memset(a,(x),sizeof(a))

typedef long long LL;
typedef pair<int,int> pii;

#define MAX 10105

const int mod = 1009419529;

int n, k;
char str[MAX];

int dp[MAX][101], total[MAX];

int main()
{
	int T; scanf("%d",&T);

	while(T--){
        scanf("%d%d",&n,&k);
        scanf("%s",str);

        int prev[26]; CLR(prev,-1);

        CLR(total,0);
        total[0] = 1;
        CLR(dp,0);

        FOR(i,n+k){
            int c=str[i]-'a';

            REP(j,0,k){
                int len=i+1-j;
                if(len>0)
                    dp[i][j] = total[len-1];
                else
                    break;
            }

            REP(j,0,k){
                int len=i+1-j;
                if(len>0){
                    int x=prev[c];
                    if(x==-1){
                        total[len] = (total[len] + dp[i][j])%mod;
                        continue;
                    }
                    if(x+1-len>=0){
                        int delta = (dp[i][j] - dp[x][x+1-len] + mod) % mod;
                        total[len] = (total[len] + delta)%mod;
                    } else
                        total[len] = (total[len] + dp[i][j])%mod;
                }

                if(len<0)
                    break;
            }

            prev[c] = i;
        }

        printf("%d\n",(total[n]-1+mod)%mod);
	}

    return 0;
}
