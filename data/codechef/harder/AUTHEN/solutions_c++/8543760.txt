# include <cstdio>
# include <cstring>
# include <algorithm>

using namespace std;

# define REP(i, n) for (int i = 1; i <= n; ++ i)
# define REP_0N(i, n) for (int i = 0; i <= n; ++ i)
# define RST(a) memset (a, 0, sizeof (a))
# define P 1009419529
# define NR 11000
int n, K, q0;
char s[NR];
int f[NR][120], sum[NR][120];

int main ()
{
	for (scanf ("%d", &q0); q0; -- q0)
	{
		scanf ("%d%d%s", &n, &K, s + 1);
		if (!K) {puts ("0"); continue;}
		RST (f), RST (sum);

		f[0][0] = sum[0][0] = 1;
		REP (i, n + K)
		{
			int k = 1;
			for (; i - k > 0 && s[i - k] != s[i]; ++ k) ;
			
			f[i][0] = sum[i][0] = 1;
			int jr = min (i - 1, K);
			REP (j, jr)
			{
				int tl = min (j + 1, k);	
				f[i][j] = sum[i - 1][j];
				if (j - tl >= 0) f[i][j] -= sum[i - tl - 1][j - tl];
				if (f[i][j] >= P) f[i][j] -= P;
				if (f[i][j] < 0) f[i][j] += P;
				
			}
			REP (j, K)
			{
				sum[i][j] = f[i][j] + sum[i - 1][j - 1];
				if (sum[i][j] >= P) sum[i][j] -= P;
			}
		}
		int ans = 0;
		REP_0N (i, K)
		{
			ans += f[n + K - i][K - i];
			if (ans >= P) ans -= P;
		}
		printf ("%d\n", (ans + P - 1) % P);
	}
	return 0;
}
