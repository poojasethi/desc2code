#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <string>
#include <set>
#include <cassert>
using namespace std;
#define p(x) cout<<#x<<":"<<x<<"\n"
#define mod 1009419529
#define lim 10101
#define lim2 101

int cs,n,k,i,s,j;
char str[lim];
int F[lim][lim2],G[lim][lim2],P[lim],A[257];

/*int f(int i,int j);
int g(int i,int j)
{
  if(i<0 || j<0)
    return 0;
  int &res=G[i][j];
  
  if(res==-1)
  {
    res=f(i,j);
    if(i && j)
	{
	  res=res+g(i-1,j-1);
	  if(res>=mod)
	    res-=mod;
	}
  }
  return res;
}
int f(int i,int j)
{
  int &res=F[i][j];
  
  if(res==-1)
  {
    if(!i)
	  if(j)
	    res=0;
	  else
	    res=1;
	else
	{
	  res=g(i-1,j)-g(P[i]-1,j-(i-P[i]));
	  if(res<0)
	    res+=mod;
	}
    //printf("%d %d %d\n",i,j,res);
  }
  return res;
}*/
int main()
{
  scanf("%d",&cs);
  assert(cs<=10);
  int mx=10;
  while(cs--)
  {
    scanf("%d%d%s",&n,&k,str);
	//assert(n<=10000 && k<=100);
	memset(A,0,sizeof A);
	for(i=0;i<n+k;i++)
	{
	  P[i+1]=A[str[i]];
	  A[str[i]]=i+1;
	}
	for(i=0;i<=n+k;i++)
	  for(j=0;j<=k;j++)
	  {
	    if(!i)
	      F[i][j]=j==0;
	    else
	    {
	      F[i][j]=G[i-1][j];
		  if(P[i]-1>=0 && j-(i-P[i])>=0)
		  {
		    F[i][j]-=G[P[i]-1][j-(i-P[i])];
	        if(F[i][j]<0)
	          F[i][j]+=mod;
		  }
		}
        G[i][j]=F[i][j];
        if(i && j)
	    {
	      G[i][j]=G[i][j]+G[i-1][j-1];
	      if(G[i][j]>=mod)
	        G[i][j]-=mod;
	    }
	  }
	for(i=n,s=0;i<=n+k;i++)
	{
	  s=s+F[i][i-n];
	  if(s>=mod)
		 s-=mod;
	}
    printf("%d\n",(s+mod-1)%mod);
	/*string x;
	set <string> S;
	for(i=0;i<(1<<(n+k));i++)
	  if(__builtin_popcount(i)==n)
	  {
	    x="";
	    for(j=0;j<n+k;j++)
		  if(i&1<<j)
		    x+=str[j];
		S.insert(x);
	  }
	assert(S.size()==s);*/
	if(!(--mx))
	  break;
  }  
  return 0;
}
