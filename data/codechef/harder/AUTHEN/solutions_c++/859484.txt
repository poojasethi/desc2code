/*
 * 2012-02-20  Martin  <Martin@Martin-desktop>

 * 
 */
#include <cstdio>
#include <cstring>
#include <cctype>
#include <climits>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstdarg>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <exception>
#include <stdexcept>
#include <memory>
#include <locale>
#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#include <iterator>
#include <functional>
#include <string>
#include <complex>
#include <valarray>

using namespace std;

template <class T> inline T checkmin(T &a, T b)
{
	return (a < b) ? a : a = b;
}

template <class T> inline T checkmax(T &a, T b)
{
	return (a > b) ? a : a = b;
}

template <class T> T GCD(T a, T b)
{
	if (a < 0)
		return GCD(- a, b);
	if (b < 0)
		return GCD(a, - b);
	return (a == 0) ? b : GCD(b % a, a);
}

template <class T> T LCM(T a, T b)
{
	if (a < 0)
		return LCM(- a, b);
	if (b < 0)
		return LCM(a, - b);
	return (a == 0 || b == 0) ? 0 : a / GCD(a, b) * b;
}

template <class T> T ExtGCD(T a, T b, T &x, T &y)
{
	if (a < 0)
	{
		T c = ExtGCD(- a, b, x, y);
		x = - x;
		return c;
	}
	if (b < 0)
	{
		T c = ExtGCD(a, - b, x, y);
		y = - y;
		return c;
	}
	if (a == 0)
	{
		x = 0, y = 1;
		return b;
	}
	else
	{
		T c = ExtGCD(b % a, a, y, x);
		x -= b / a * y;
		return c;
	}
}

template <class T> inline T sqr(T X)
{
	return X * X;
}

#define tr(i, x) for (typeof(x.begin()) i = x.begin(); i != x.end(); ++ i)
#define rep(i, n) for (int i = 0; i < n; ++ i)
#define pii pair <int, int>
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define ll long long
#define cmplxd complex <long double>
#define pi 3.14159265358979323846264338327950288

namespace Poor
{
	const ll ModNum = 1009419529LL;
	const int MaxiN = 10105;
	const int MaxiK = 105;
	
	int N, K;
	int Next[MaxiN];
	ll Opt[MaxiN][MaxiK];
	char St[MaxiN];
	
	void Solve()
	{
		scanf("%d%d", &N, &K);
		scanf("%s", St);
		N += K;
		map <char, int> Map;
		for (int i = N - 1; i >= 0; -- i)
		{
			Next[i] = (Map.count(St[i])) ? Map[St[i]] : - 1;
			Map[St[i]] = i;
		}
		Map.clear();
		rep (j, K + 1)
			Opt[N][j] = 0;
		Opt[N][0] = 1;
		for (int i = N - 1; i >= 0; -- i)
			rep (j, K + 1)
			{
				Opt[i][j] = 0;
				if (j > 0)
					Opt[i][j] += Opt[i + 1][j - 1];
				Opt[i][j] += Opt[i + 1][j];
				if (Next[i] != - 1 && j - (Next[i] - i) >= 0)
					Opt[i][j] -= Opt[Next[i] + 1][j - (Next[i] - i)];
				Opt[i][j] %= ModNum;
				if (Opt[i][j] < 0)
					Opt[i][j] += ModNum;
			}
		cout << (Opt[0][K] - 1LL + ModNum) % ModNum << endl;
	}
	
	void Run()
	{
		int TestCase;
		scanf("%d", &TestCase);
		for (int i = 1; i <= TestCase; ++ i)
			Solve();
	}
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("AUTHEN.in", "r", stdin);
	freopen("AUTHEN.out", "w", stdout);
	#endif
	Poor::Run();
	return 0;
}
