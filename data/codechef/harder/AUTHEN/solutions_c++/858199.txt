#include<iostream>
#include<stack>
#include<queue>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<string>
#include<cstring>
#include<map>
#include<numeric>
#include<sstream>
#include<cmath>
using namespace std;
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb push_back
#define f(i,x,y) for(int i = x; i<y; i++ )
#define FORV(it,A) for(vector<int>::iterator it = A.begin(); it!= A.end(); it++)
#define FORS(it,A) for(set<int>::iterator it = A.begin(); it!= A.end(); it++)
#define quad(x) (x) * (x)
#define mp make_pair
#define clr(x, y) memset(x, y, sizeof x)
#define fst first
#define snd second
typedef pair<int, int> pii;
typedef long long ll;
typedef long double ld;
#define mod 1009419529
#define K 102
#define N 10210
#define C 26

int pd[N][K];
short tam;
short precisa;
short prox[N][30];
char s[N];

/*inline int solve (short n, short k){ //printf("%d %d\n", n, k);
    if (k > precisa) return 0; 
    if (k+tam-n==precisa) return 1;
    if (n == tam-1){
    	if (k == precisa) return 1;
    	return 0;
    }
    //fazer base de recursao com n = tam-1
    int& ret = pd[n][k];
    if (ret != -1) return ret;
    ret = 0;
    ret = solve (n+1, k+1) + solve (n+1, k);
    if (ret >= mod) ret -= mod;
    short y = prox[n+1][s[n]-'a'];
    if (y != -1)
    	ret -= solve (y+1, k+y-n);
    if (ret < 0) ret += mod;
    return ret;
}*/

int solve (){
	for (short n = tam; n >= 0; n--){
		for (short k = 0; k <= precisa; k++) { if (k > n) break;
			if (k+tam-n==precisa) {pd[n][k] = 1; continue;}
    		if (n == tam-1){
    			if (k == precisa) pd[n][k] = 1;
                else pd[n][k] = 0;
                continue;
    		}
            if (k == precisa){
                pd[n][k] = 1; continue;
            }
    		int ret = 0;
			ret = pd[n+1][k+1] + pd[n+1][k];
			if (ret >= mod) ret -= mod;
            int y = prox[n+1][s[n]-'a'];
			if (y != -1 && y+k-n <= precisa && k-n <= 1){
				ret -= pd[y+1][k+y-n];
            }
			if (ret < 0) ret += mod;
			pd[n][k] = ret;
		}
	}
	return pd[0][0];
}


int main (){
    int t; scanf("%d", &t);
    while (t--){
        int n, k; scanf("%d %d", &n, &k);
        scanf(" %s", s);
        f (i, 0, C){
            int ult = -1;
            for (int j = n+k-1; j >= 0; j--){
                if (s[j] == i+'a') ult = j;
                prox[j][i] = ult;
            }
        }
        tam = n+k;
        precisa = k;
        memset (pd, -1, sizeof (pd));
        printf("%d\n", (solve ()+mod-1)%mod);
    }
    return 0;
}

