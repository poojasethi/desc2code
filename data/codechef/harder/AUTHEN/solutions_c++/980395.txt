#include <cstdio>
#include <cstring>

#define KONJ 42 - 42
#define MAXN 10005
#define MAXK 105

const long long MOD = 1009419529;

using namespace std;

int T, N, K;

long long dp[ MAXN + MAXK ][ MAXK ];
int last[27];

char s[ MAXN + MAXK ];

void init(){
     memset( dp, 0, sizeof dp );
     memset( last, 0, sizeof last );
}

void solve(){

     init();

     scanf( "%d%d", &N, &K );
     scanf( "%s", s );
     
     dp[0][0] = 1;
     for ( int i = 1; i <= N + K; ++i ){
           for ( int j = 0; j <= K; ++j ){
               
               dp[i][j] += dp[i - 1][j] + dp[i - 1][j - 1];
               while ( dp[i][j] > MOD ) dp[i][j] -= MOD;
            
               if ( last[ s[i - 1] - 'a' ] == 0 || j < i - last[ s[i - 1] - 'a' ] ) continue;
               
               dp[i][j] -= dp[ last[ s[i - 1] - 'a' ] - 1 ][ j - ( i - last[ s[i - 1] - 'a' ] ) ];
               while ( dp[i][j] < 0 ) dp[i][j] += MOD;
               
           }
           
           last[ s[i - 1] - 'a' ] = i;
           
     }
     
     /*
     for ( int i = 0; i <= N + K; ++i ){
         for ( int j = 0; j <= K; ++j ) printf( "%d ", dp[i][j] );
         printf( "\n" );
     }
     */
     
     printf( "%lld\n", ( dp[N + K][K] - 1 + MOD ) % MOD );

}

int main( void ){

    scanf( "%d", &T );
    for ( int i = 0; i < T; ++i ) solve();

    return KONJ;

}
