#define _CRT_SECURE_NO_DEPRECATE
#include <ctime>
#include <float.h>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <cstring>
#include <cstdio>
#include <iomanip>
using namespace std;
#define pb push_back
#define inf 1000000000
#define L(s) (int)(s).size()
#define rp(i,n) for(int (i)=0;(i)<(n);++(i))
#define C(a) memset((a),0,sizeof(a))
#define ll long long
#define all(c) (c).begin(), (c).end()
#define VI vector<int>
#define mp make_pair
#define pii pair<int,int>
#define x first
#define y second
#define uint unsigned int
#define ull unsigned ll
#define eps 1e-12
#define pdd pair<double, double>
#define b(x) (1<<(x))
const int mod = 1009419529;
int f[11111][111];
int ps[11111][111];
int n, k,t ;
char ch[11111];
int main() {
  scanf("%d", &t);
  while(t--) {
    scanf("%d%d", &n, &k); n += k;
    scanf("%s", ch);
    memset(f, 0, sizeof(f));
    memset(ps, 0, sizeof(ps));
    f[0][0] = 1; ps[0][0] = 1;
    int ans = 0; if (n - 1 == k) ans = 1;
    for(int i = 1; i < n; ++i) {
      int last = i - 1; while(last > -1 && ch[last] != ch[i]) {--last;}
      bool wd = 1; if (last != -1) --last; else wd = 0;
      for(int j = 0; j <= k; ++j) {
        f[i][j] += ps[i - 1][j];
        int lim = max(last, i - j - 2);
        if (lim >= 0) f[i][j] -= ps[lim][j - (i - 1 - lim)];
        if (f[i][j] >= mod) f[i][j] -= mod;
        if (f[i][j] < 0) f[i][j] += mod;
      }
      if (!wd && i <= k) { f[i][i]++; if (f[i][i] >= mod) f[i][i] -= mod;}
      if (n - 1 - i <= k) {
//        cerr << "add" << f[i][k - (n - 1 - i)] << endl;
        ans += f[i][k - (n - 1 - i)]; if (ans >= mod) ans -= mod;}
      for(int j = 0; j <= k; ++j) {
        ps[i][j] = f[i][j] + ((i && j)?(ps[i -1][j - 1]):(0));
        if (ps[i][j] >= mod) ps[i][j] -= mod;
//        cerr << i << " " << j << " " << f[i][j] << " " << ps[i][j] << endl;
      }
    }
//    cerr << f[1][1] << endl;
//    cerr << ps[1][1] << endl;
//    cerr << ps[0][0] << endl;
    --ans; if (ans < 0) ans += mod;
    cout << ans << endl;
  }
  return 0;
}