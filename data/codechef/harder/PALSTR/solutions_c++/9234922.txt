#include<bits/stdc++.h>
using namespace std;
#define getcx getchar
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
string A,B,C;
int Al,Bl,Cl;
int IsPalinA[1005][1005];
int IsPalinB[1005][1005];
int IsPalinC[1005][1005];
void pre()
{
    //for A
    for(int i=0; i<=Al; i++)
        for(int j=0; j<=Al; j++)
            IsPalinA[i][j] = 0;
    for(int i=0; i<=Al; i++)
        IsPalinA[i][i] = 1;
    for(int i=0; i<=Al-1; i++)
    {
        if(A[i]==A[i+1])
            IsPalinA[i][i+1] = 1;
        else
            IsPalinA[i][i+1] = 0;
    }
    for(int len=2; len<=Al; len++)
    {
        for(int j=0; j<=Al-len; j++)
        {
            if(A[j]==A[j+len] && IsPalinA[j+1][j+len-1]==1)
            {
                IsPalinA[j][j+len] = 1;
            }
            else
            {
                IsPalinA[j][j+len] = 0;
            }
        }
    }
    //for B
    for(int i=0; i<=Bl; i++)
        for(int j=0; j<=Bl; j++)
            IsPalinB[i][j] = 0;
    for(int i=0; i<=Bl; i++)
        IsPalinB[i][i] = 1;
    for(int i=0; i<=Bl-1; i++)
    {
        if(B[i]==B[i+1])
            IsPalinB[i][i+1] = 1;
        else
            IsPalinB[i][i+1] = 0;
    }
    for(int len=2; len<=Bl; len++)
    {
        for(int j=0; j<=Bl-len; j++)
        {
            if(B[j]==B[j+len] && IsPalinB[j+1][j+len-1]==1)
            {
                IsPalinB[j][j+len] = 1;
            }
            else
            {
                IsPalinB[j][j+len] = 0;
            }
        }
    }
    //for C
    for(int i=0; i<=Cl; i++)
        for(int j=0; j<=Cl; j++)
            IsPalinC[i][j] = 0;
    for(int i=0; i<=Cl; i++)
        IsPalinC[i][i] = 1;
    for(int i=0; i<=Cl-1; i++)
    {
        if(C[i]==C[i+1])
            IsPalinC[i][i+1] = 1;
        else
            IsPalinC[i][i+1] = 0;
    }
    for(int len=2; len<=Cl; len++)
    {
        for(int j=0; j<=Cl-len; j++)
        {
            if(C[j]==C[j+len] && IsPalinC[j+1][j+len-1]==1)
            {
                IsPalinC[j][j+len] = 1;
            }
            else
            {
                IsPalinC[j][j+len] = 0;
            }
        }
    }
}
long long int memoAA[1005][1005];
long long int AA(int x,int y)
{
    if(y>Al)
    {
        return 0;
    }
    if(memoAA[x][y]!=-1)
    {
        return memoAA[x][y];
    }
    long long int ans = 0;
    if(IsPalinA[x][y]==1)
    {
        ans += 1+AA(x,y+1);
    }
    else
    {
        ans += AA(x,y+1);
    }
    memoAA[x][y] = ans;
    return ans;
}
long long int memoCC[1005][1005];
long long int CC(int x,int y)
{
    if(x<0)
    {
        return 0;
    }
    if(memoCC[x][y]!=-1)
    {
        return memoCC[x][y];
    }
    long long int ans = 0;
    if(IsPalinC[x][y]==1)
    {
        ans += 1+CC(x-1,y);
    }
    else
    {
        ans += CC(x-1,y);
    }
    memoCC[x][y] = ans;
    return ans;
}
long long int memoBB1[1005][1005];
long long int BB1(int x,int y)
{
    if(y>Bl)
    {
        return 0;
    }
    if(memoBB1[x][y]!=-1)
    {
        return memoBB1[x][y];
    }
    long long int ans = 0;
    if(IsPalinB[x][y]==1)
    {
        ans += 1+BB1(x,y+1);
    }
    else
    {
        ans += BB1(x,y+1);
    }
    memoBB1[x][y] = ans;
    return ans;
}
long long int memoBB2[1005][1005];
long long int BB2(int x,int y)
{
    if(x<0)
    {
        return 0;
    }
    if(memoBB2[x][y]!=-1)
    {
        return memoBB2[x][y];
    }
    long long int ans = 0;
    if(IsPalinB[x][y]==1)
    {
        ans += 1+BB2(x-1,y);
    }
    else
    {
        ans += BB2(x-1,y);
    }
    memoBB2[x][y] = ans;
    return ans;
}
int CNT;
long long int memoBC[1005][1005][2][2];
long long int BC(int x,int y,int sb,int state)
{
    if(memoBC[x][y][sb][state]!=-1)
    {
        return memoBC[x][y][sb][state];
    }
    long long int ans = 0;
    if(x<=Bl && y>=0 && B[x]==C[y])
    {
        ans += 1+BC(x+1,y-1,1,1);
    }
    //three options
    if(state==0 && x<Bl)
    {
        ans += BC(x+1,y,0,0);
    }
    if(sb==1)
    {
        ans += CC(y,y);
    }
    ans += BB1(x,x);
    memoBC[x][y][sb][state] = ans;
    return ans;
}
long long int memoAB[1005][1005][2][2];
long long int AB(int x,int y,int state,int sb)
{
    if(memoAB[x][y][state][sb]!=-1)
    {
        return memoAB[x][y][state][sb];
    }
    long long int ans = 0;
    if(x<=Al && y>=0 && A[x]==B[y])
    {
        ans += 1+AB(x+1,y-1,1,1);
    }
    //three options
    if(state==0 && y>0)
    {
        ans += AB(x,y-1,0,0);
    }
    if(sb==1)
    {
        ans += AA(x,x);
    }
    ans += BB2(y,y);
    memoAB[x][y][state][sb] = ans;
    return ans;
}
long long int memoAC[1005][1005][2][2];
long long int AC(int x,int y,int sa,int sc)
{
    if(memoAC[x][y][sa][sc]!=-1)
    {
        return memoAC[x][y][sa][sc];
    }
    long long int ans = 0;
    if(x<=Al && y>=0 && A[x]==C[y])
    {
        ans += AC(x+1,y-1,1,1);
    }
    //two options
    if(sc==1)
    {
        ans += AB(x,Bl,0,0);
    }
    if(sa==1)
    {
        ans += BC(0,y,0,0);
    }
    if(sa==1 && sc==1)
    {
        ans -= CNT;
    }
    memoAC[x][y][sa][sc] = ans;
    return ans;
}
int main()
{
    int t;
    in(t);
    while(t--)
    {
        cin>>A>>B>>C;

        Al = A.size();
        Bl = B.size();
        Cl = C.size();

        Al--;
        Bl--;
        Cl--;

        pre();

        CNT = 0;
        for(int i=0; i<=Bl; i++)
        {
            for(int j=i; j<=Bl; j++)
            {
                if(IsPalinB[i][j]==1)
                {
                    CNT++;
                }
            }
        }
        memset(memoAC,-1,sizeof(memoAC));
        memset(memoAB,-1,sizeof(memoAB));
        memset(memoBC,-1,sizeof(memoBC));
        memset(memoAA,-1,sizeof(memoAA));
        memset(memoCC,-1,sizeof(memoCC));
        memset(memoBB1,-1,sizeof(memoBB1));
        memset(memoBB2,-1,sizeof(memoBB2));
        long long int ans = 0;
        for(int i=0; i<=Al; i++)
        {
            for(int j=0; j<=Cl; j++)
            {
                ans += AC(i,j,0,0);
            }
        }
        printf("%lld\n",ans);
    }
}
