#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

int n;
int x0[100],y0[100],x1[100],y1[100];
int overlap[100][100];

bool overlapping (int i, int j)
{
	int X1 = max(x0[i],x0[j]);
	int Y1 = max(y0[i],y0[j]);
	int X2 = min(x1[i],x1[j]);
	int Y2 = min(y1[i],y1[j]);
	if (X1 < X2 && Y1 < Y2) return true;
	return false;
}

bool matchFound (vector <int> &vis, vector <int> &found, int x)
{
	for (int i = 0; i < n; i++)
	{
		if (!vis[i])
		{
			if (overlap[x][i])
			{
				vis[i] = 1;
				if (found[i] == -1)
				{
					// found a match
					found[i] = x;
					return true;
				}
				// check more
				if (matchFound(vis,found,found[i]))
				{
					found[i] = x;
					return true;
				}
			}
		}
	}
	return false;
}

int bipartiteMatchingAlgorithm()
{
	int ret = 0;
	
	vector <int> found(n,-1);
	for (int i = 0; i < n; i++)
	{
		vector <int> vis(n,0);
		if (!matchFound(vis,found,i)) ret++;
	}
	return ret;
}

int main ()
{
	int t;
	cin >> t;

	while (t--)
	{
		cin >> n;
		
		for (int i = 0; i < n; i++) cin >> x0[i] >> x1[i] >> y0[i] >> y1[i];	

		// sort in increasing order of rectangle lengths
		for(int i = 0; i < n; i++)
		{
			for(int j = i + 1; j < n; j++)
			{
				if(x1[i] - x0[i] > x1[j] - x0[j])
				{
					swap(x0[i],x0[j]);
					swap(x1[i],x1[j]);
					swap(y0[i],y0[j]);
					swap(y1[i],y1[j]);
				}
			}
		}
		
		// find the overlapping matrix
		memset(overlap,0,sizeof(overlap));
		for (int i = 0; i < n; i++)
		{
			for (int j = i+1; j < n; j++)
			{
				if (overlapping(i,j))
				{
					overlap[i][j] = 1;
				}
			}
		}

		// finding the best bipartitie match
		cout << bipartiteMatchingAlgorithm() << "\n";
	}
	return 0;
}

