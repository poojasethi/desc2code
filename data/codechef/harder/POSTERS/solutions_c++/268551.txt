// #includes {{{
#include <algorithm>
#include <numeric>

#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>

#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cassert>
#include <cstring>

#include <cmath>
#include <complex>
using namespace std;
// }}}
// pre-written code {{{
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define RREP(i,a,b) for(int i=(int)(a);i<=(int)(b);++i)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define ALL(c) (c).begin(), (c).end()
// }}}

typedef pair<int, int> P;
typedef pair<P, P> P2;

vector<P2> in;

typedef int Weight;
struct Edge {
	int src, dst;
	Weight weight;
	Edge(int src, int dst, Weight weight=0) :
		src(src), dst(dst), weight(weight) { }
};
bool operator < (const Edge &e, const Edge &f) {
	return e.weight != f.weight ? e.weight > f.weight : // !!INVERSE!!
		e.src != f.src ? e.src < f.src : e.dst < f.dst;
}
typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

typedef vector<Weight> Array;
typedef vector<Array> Matrix;

bool augment(const Graph& g, int u,
		vector<int>& matchTo, vector<bool>& visited) {
	if (u < 0) return true;
	FOR(e, g[u]) if (!visited[e->dst]) {
		visited[e->dst] = true;
		if (augment(g, matchTo[e->dst], matchTo, visited)) {
			matchTo[e->src] = e->dst;
			matchTo[e->dst] = e->src;
			return true;
		}
	}
	return false;
}
int bipartiteMatching(const Graph& g, int L, Edges& matching) {
	const int n = g.size();
//	cout<<"size: "<<n<<endl;
	vector<int> matchTo(n, -1);
	int match = 0;
	REP(u, L) {
		vector<bool> visited(n);
		if (augment(g, u, matchTo, visited)) ++match;
	}
	REP(u, L) if (matchTo[u] >= 0) // make explicit matching
		matching.push_back( Edge(u, matchTo[u]) );
	return match;
}

bool operator<(const P2 &l, const P2 &r){
	return (
		r.first.first<l.first.first and l.first.second<r.first.second
		and l.second.first<r.second.first and r.second.second<l.second.second);
}

void main2(){
	int m;
	Graph G;
	in.clear();
	cin>>m;
	G.assign(m*2, Edges());
//	cout<<m<<endl;
	REP(i, m){
		int a, b, c, d;
		cin>>a>>b>>c>>d;
		in.push_back(P2(P(a, b), P(c, d)));
	}
	REP(i, m)REP(j, m){
		if(in[j]<in[i]){
			G[i].push_back(Edge(i, j+m));
//			G[j+m].push_back(Edge(j+m, i));
//			cout<<i<<" "<<j+m<<endl;
		}
	}
	Edges matching;
	cout<<m-bipartiteMatching(G, m, matching)<<endl;
}

int main() {
	int T;
	cin>>T;
	REP(ct, T){
		main2();
	}
	return 0;
}
// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

