#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

#include <cstring>
#include <cstdlib>
#include <cstdio>

using namespace std;
typedef vector<int> VI;

const int MAXN = 101;

int X1[MAXN],Y1[MAXN],X2[MAXN],Y2[MAXN];
VI adj[MAXN];
int leftM[MAXN],rightM[MAXN],visited[MAXN];

int augment(int u)
{
    if(visited[u]) return 0;
    visited[u] = 1;

    for(int i=0;i<adj[u].size();i++) {
        int v = adj[u][i];
        if(rightM[v]==-1||augment(rightM[v])) {
            rightM[v] = u;
            leftM[u] = v;
            return 1;
        }
    }
    return 0;
}

int isIntersect(int i, int j)
{
    if(X1[i]>X1[j]&&X2[i]<X2[j]&&Y1[j]>Y1[i]) return 1;
    return 0;
}

int main()
{
    //freopen("test.in","r",stdin);
    int T;
    cin>>T;
    while(T--) {
        int n;
        cin>>n;
        for(int i=0;i<n;i++)adj[i].clear();

        for(int i=0;i<n;i++) {
            cin>>X1[i]>>X2[i]>>Y1[i]>>Y2[i];
        }

        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(Y2[i]>Y2[j]&& isIntersect(i,j)) {
                    adj[i].push_back(j);
                }
            }
        }

        memset(leftM,-1,sizeof(leftM));
        memset(rightM,-1,sizeof(rightM));
        int ret = 0;
        for(int i=0;i<n;i++) {
            memset(visited,0,sizeof(visited));
            ret+=!augment(i);
        }
        cout<<ret<<endl;
    }
    return 0;
}
