#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
 
class BipartiteMaxMatch
{
  public:
    /** Max Left or Right Nodes */
    static const int MaxN = 250;
 
    int leftNodes;
    int rightNodes;
 
    /** These is an edge between left node i and right node j */
    bool connect[MaxN][MaxN];
 
    /** Left i's current partener */
    int leftPart[MaxN];
 
    /** Right i's current partener */
    int rightPart[MaxN];
 
    /** Right Node Visited or not */
    bool visited[MaxN];
 
    BipartiteMaxMatch(int left, int right)
    {
      if (left > MaxN || right > MaxN) {
        cout << "Too much nodes" << endl;
        return;
      }
      leftNodes = left;
      rightNodes = right;
      memset(connect, false, sizeof(connect));
    }
 
    /** Start Match */
    int match()
    {
      int ans = 0;
      for (int i = 0; i < leftNodes; ++i) leftPart[i] = -1;
      for (int j = 0; j < rightNodes; ++j) rightPart[j] = -1;
      memset(visited, false, sizeof(visited));
 
      for (int i = 0; i < leftNodes; ++i) 
        if (leftPart[i] == -1) {
          memset(visited, false, sizeof(visited));
          ans += find(i);
        }
      return ans;
    }
 
    /** Find the augument path */
    int find(int start)
    {
      for (int i = 0; i < rightNodes; ++i) {
        if (!visited[i] && connect[start][i]) {
          visited[i] = true;
          if (rightPart[i] == -1 || find(rightPart[i])) {
            leftPart[start] = i;
            rightPart[i] = start;
            return 1;
          }    
        }
      }        
      return 0;
    }
};
 
class Rectangle
{
public:
	int x1, x2, y1, y2;
	bool operator < (const Rectangle & other) const
	{ return (x2 - x1) < (other.x2 - other.x1); }
};
 
Rectangle Rectangles[200];
int N;
 
bool intersect(Rectangle & r1, Rectangle & r2)
{
	return max(r1.x1, r2.x1) <= min(r1.x2, r2.x2) &&
		max(r1.y1, r2.y1) <= min(r1.y2, r2.y2);
}
 
void deal()
{
	scanf("%d", &N);
	for (int i = 0; i < N; ++i)
		scanf("%d%d%d%d", &Rectangles[i].x1, &Rectangles[i].x2, &Rectangles[i].y1, &Rectangles[i].y2);
 
	sort(Rectangles, Rectangles + N);
	BipartiteMaxMatch graph(N, N);
 
	for (int i = 0; i < N; ++i)
		for (int j = i + 1; j < N; ++j)
			if (intersect(Rectangles[i], Rectangles[j]))
				graph.connect[i][j] = true;
 
	printf("%d\n", N - graph.match());
}
 
int main()
{
	int T;
	scanf("%d", &T);
	while (T--)
	{
		deal();
	}
	return 0;
} 