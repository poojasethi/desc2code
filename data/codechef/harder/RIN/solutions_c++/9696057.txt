#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define f first
#define s second
#define cs 137
#define ll long long
#define mp make_pair
#define BIT(i, j) ((j >> i) & 1)
#define N 20105
#define ln 1e9+1
#define oo 1000000007
#define Pa pair < int, int >
#define PD pair < double, double >
#define Line pair < Pa, ll >
#define PP pair < ll, Pa >
#define Pii pair < Pa, Pa >

using namespace std;

int n, m, cnt = -1, S, T, k, Num = 0;;
int Cap[10*N], F[10*N], H[N], Que[N], pre[N];
vector < Pa > a[N];

int Get(int i, int j)
{
    return i * m + j;
}

void AddEdge(int u, int v, int w)
{
    a[u].push_back(mp(v, ++cnt));
    Cap[cnt] = w;
    a[v].push_back(mp(u, ++cnt));
    Cap[cnt] = 0;
}

bool BFS()
{
    memset(H, -1, sizeof(H));
    int top = 0, bot = 1;
    Que[++top] = S;
    H[S] = 0;
    while(bot <= top)
    {
        int u = Que[bot];   bot++;
        for(int i=0; i<a[u].size(); i++)
        {
            int v = a[u][i].f;
            int id = a[u][i].s;
            if(Cap[id] > F[id] && H[v] == -1)
            {
                H[v] = H[u] + 1;
                Que[++top] = v;
            }
        }
    }
    return H[T] != -1;
}

int Get_Flow(int u, int Flow)
{
    ++Num;
    if(u == T || Flow == 0)  return Flow;
    int res = 0;
    for(int &i=pre[u]; i<a[u].size(); i++)
    {
        int v = a[u][i].f;
        int id = a[u][i].s;
        if(H[v] != H[u] + 1)    continue;
        int Push = Get_Flow(v, min(Flow, Cap[id] - F[id]));
        if(Push)
        {
            F[id] += Push;
            F[id^1] -= Push;
            res += Push;
            Flow -= Push;
            if(Flow == 0)
                break;
        }
    }
    return res;
}

int MaxFlow()
{
    int Ans = 0;
    while(BFS())
    {
        memset(pre, 0, sizeof(pre));
        int Push = Get_Flow(S, ln);
        Ans += Push;
    }
    return Ans;
}

int main()
{
   // ios_base::sync_with_stdio(0);
   // filein("RIN.inp");  fileout("RIN.out");
    int x, u, v, A, B;
    cin >> n >> m >> k;
    S = n * m;  T = S + 1;
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            cin >> x;
            if(x == -1)
                x = ln;
            else
                x = 100 - x;
            if(j)
                AddEdge(Get(i, j-1), Get(i, j), x);
            else
                AddEdge(S, Get(i, 0), x);
        }
        AddEdge(Get(i, m-1), T, ln);
    }
    for(int i=1; i<=k; i++)
    {
        cin >> A >> B;  A--, B--;
        for(int j=0; j<m-1; j++)
            AddEdge(Get(A, j), Get(B, j+1), ln);
        AddEdge(S, Get(B, 0), ln);
    }
    int res = 100 * n - MaxFlow();
    printf("%0.2f", 1.0 * res / n);
}
