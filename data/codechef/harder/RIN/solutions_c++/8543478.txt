#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=115;
namespace __{
	int head[N*N*5],p[N*N*N],np[N*N*N],flow[N*N*N],tot;
	int S,T;int node;
	void init(){
		node=2;S=1;T=2;tot=1;	
	}
	inline void link(int &u,int &v,int w){
		if(!u)u=++node;
		if(!v)v=++node;
		++tot;p[tot]=v;np[tot]=head[u];head[u]=tot;flow[tot]=w;
		++tot;p[tot]=u;np[tot]=head[v];head[v]=tot;flow[tot]=0;
	}
	int q[N*N*5],inq[N*N*5],dis[N*N*5];
	int bfs(){
		rep(i,1,node)inq[i]=0,dis[i]=-1;
		q[q[0]=1]=S;inq[S]=1;dis[S]=0;
		rep(i,1,q[0]){
			int x=q[i];
			for(int u=head[x];u;u=np[u])
			if(flow[u])if(dis[p[u]]==-1){
				dis[p[u]]=dis[x]+1;
				inq[p[u]]=1;q[++q[0]]=p[u];
			}
		}
		return dis[T];
	}
	int dinic(int x,int fl){
		if(x==T)return fl;
		int ret=0;
		for(int u=head[x];u;u=np[u])if(flow[u])if(dis[p[u]]==dis[x]+1){
			int tmp=dinic(p[u],flow[u]<fl?flow[u]:fl);
			fl-=tmp;ret+=tmp;
			flow[u]-=tmp;flow[u^1]+=tmp;
			if(!fl)break;
		}
		if(!ret)dis[x]=-1;
		return ret;
	}
	int getans(){
		int ans=0;
		while(bfs()!=-1){
			ans+=dinic(S,1e9);
		}
		return ans;
	}
};
int node[N][N];
int n,m,k;
int main(){
	__::init();
	scanf("%d%d%d",&n,&m,&k);
	int ans=0;
	rep(i,1,n){
		rep(j,1,m){
			int x;scanf("%d",&x);
			__::link(node[i][j-1],node[i][j],x==-1?1e9:100-x);
		}
		__::link(__::S,node[i][0],1e9);
		__::link(node[i][m],__::T,1e9);
		ans+=100;
	}
	rep(i,1,k){
		int a,b;scanf("%d%d",&a,&b);
		rep(j,0,m-1)__::link(node[a][j],node[b][j+1],1e9);
	}
	printf("%.2lf\n",(ans-__::getans())*1./n);
	return 0;
}
