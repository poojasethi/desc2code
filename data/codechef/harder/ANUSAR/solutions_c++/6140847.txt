#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <deque>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <string>
#include <stack>
#include <sstream>
#include <vector>
#include <numeric>

#define FOR(i, a, b) for(int i = a; i <= b; ++i)
#define FRD(i, a, b) for(int i = a; i >= b; --i)
#define FR(i, a) for(int i = 0; i < a; ++i)
#define REP(i, a) for(int i = 0; i <= a; ++i)
#define pb push_back
#define sz(x) (int)x.size()
#define reset(a, b) memset(a, b, sizeof a)
#define bug(x) cout << #x << " = " << x << endl
#define bg(a, m, n) FOR(i, m, n) cout << a[i] << " "; cout << endl
using namespace std;

typedef long long ll;
typedef unsigned long long qword;

const int maxN = 4e5 + 5;

int n;
char ch[maxN];
int SA[maxN], RA[maxN], tempSA[maxN], tempRA[maxN];
int c[maxN], lcp[maxN];
int l[maxN], r[maxN], st[maxN], top;
ll d[maxN];
vector <int> head[maxN];

inline void Sort(int k) {
    int i, sum, maxi = max(300, n);
    for(i = 0; i < maxi; ++i) c[i] = 0;
    for(i = 0; i < n; ++i)
        ++c[i + k < n ? RA[i + k] : 0];
    for(i = sum = 0; i < maxi; ++i) {
        int tmp = c[i]; c[i] = sum; sum += tmp;
    }
    for(i = 0; i < n; ++i)
        tempSA[c[SA[i] + k < n ? RA[SA[i] + k] : 0]++] = SA[i];
    for(i = 0; i < n; ++i)
        SA[i] = tempSA[i];
}

void Build() {
    int i, k, cnt;
    for(i = 0; i <= 2 * n; ++i)
        SA[i] = RA[i] = tempSA[i] = tempRA[i] = 0;
    for(i = 0; i < n; ++i) SA[i] = i;
    for(i = 0; i < n; ++i) RA[i] = ch[i];
    for(k = 1; k < n; k <<= 1) {
        Sort(k); Sort(0);
        tempRA[SA[0]] = cnt = 0;
        for(i = 1; i < n; ++i)
            tempRA[SA[i]] = (RA[SA[i]] == RA[SA[i-1]] && RA[SA[i] + k] == RA[SA[i-1] + k] ? cnt : ++cnt);
        for(i = 0; i < n; ++i)
            RA[i] = tempRA[i];
        if (RA[SA[n-1]] == n - 1) break;
    }

    for(i = 0; i < n; ++i) lcp[i] = 0;
    int q = 0;
    for(i = 0; i < n - 1; ++i) {
        int j = SA[RA[i] - 1];
        while (ch[i + q] == ch[j + q]) ++q;
        lcp[RA[i]] = q;
        q = max(0, q - 1);
    }

    top = 1; st[1] = 0; l[0] = 0;
    for(i = 1; i < n; ++i) {
        while (top && lcp[st[top]] >= lcp[i]) --top;
        if (top) l[i] = st[top] + 1; else l[i] = 0;
        st[++top] = i;
    }

    top = 1; st[1] = n - 1; r[n - 1] = n - 1;
    for(i = n - 2; i >= 0; --i) {
        while (top && lcp[st[top]] >= lcp[i]) --top;
        if (top) r[i] = st[top] - 1; else r[i] = n - 1;
        st[++top] = i;
    }

    for(i = 0; i <= n; ++i) head[i].clear(), d[i] = 0;
    for(i = 0; i < n; ++i)
        if (lcp[i]) head[lcp[i]].pb(i);
    for(i = 0; i < n; ++i) {
        int far = -1;
        for(int j = 0; j < sz(head[i]); ++j) {
            int u = head[i][j];
            if (u <= far) continue;
            d[r[u] - l[u] + 2] += (ll)min(lcp[u], min(lcp[u] - lcp[l[u] - 1], lcp[u] - lcp[r[u] + 1])) * (r[u] - l[u] + 2);
            far = r[u];
        }
    }
    for(i = n - 1; i >= 1; --i)
        d[i] += d[i+1];
    d[1] = ll(n - 1) * n / 2;
}

int main() {
    int nTests = 0;
    scanf("%d\n", &nTests);
    while (nTests--) {
        n = (int)strlen(gets(ch));
        ch[n++] = '$';
        Build();
        int q = 0; scanf("%d\n", &q);
        while (q--) {
            int x; scanf("%d\n", &x);
            if (x > n) printf("0\n"); else printf("%lld\n", d[x]);
        }
    }
    return 0;
}

