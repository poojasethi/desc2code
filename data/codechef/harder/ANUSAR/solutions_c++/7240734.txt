#include <iostream>
#include <cstdlib>
#include <climits>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <iterator>
#include <string>
#include <cstdio>
#include <numeric>

using namespace std;

typedef long long int64;

#define mp make_pair
#define pb push_back
#define ms0(x) memset(x,0,sizeof(x));
#define ms1(x) memset(x,-1,sizeof(x));

#define mod 1
#define EPS 1e-8

//------------------------------------------------------------------------//

char str[200003];

class Anusar{
public:
    string gvstr;
    int len,stp;
    vector<pair<pair<int,int>,int> > look;
    vector<vector<int> >sufar;
    vector<int> lcp;
    vector<pair<int,int> >arng;

    Anusar(){
        len= strlen(str);
        gvstr="";
        for(int i=0;i<len;i++) gvstr+=str[i];
        stp=0;
        look.resize(len);
        int tmp= ceil(log2((double)len));
        sufar.resize(tmp+1);
        for(int i=0;i<=tmp;i++) sufar[i].resize(len);
    }

    void build(){
        for(int i=0;i<len;i++){
            sufar[0][i]=(int)(gvstr[i]-'a');
        }
        stp=1;
        for(int cnt=1;cnt<len;cnt*=2,stp++){
            for(int j=0;j<len;j++){
                look[j].first.first= sufar[stp-1][j];
                look[j].first.second= j+cnt<len?sufar[stp-1][j+cnt]:-1;
                look[j].second= j;
            }

            sort(look.begin(),look.end());

            for(int j=0;j<len;j++){
                sufar[stp][look[j].second]= (j>0 && look[j].first.first==look[j-1].first.first && look[j].first.second==look[j-1].first.second)?sufar[stp][look[j-1].second]:j;
            }
        }
        return;
    }

    void do_sort(){
        for(int i=0;i<len;i++){
            arng.pb(mp(sufar[stp-1][i],i));
        }
        sort(arng.begin(),arng.end());
    }

    void do_lcp(){
        for(int i=0;i<len-1;i++){
            int x=arng[i].second,y=arng[i+1].second;
            if(x==y){
                lcp.pb(len-x);
                continue;
            }
            int ret=0;
            for(int k=stp-1;k>=0 && x<len && y<len;k--){
                if(sufar[k][x]==sufar[k][y]){
                    x+= (1<<k);
                    y+= (1<<k);
                    ret+= (1<<k);
                }
            }
            lcp.pb(ret);
        }
    }
};

class seg_min{
public:
    vector<int> tree;
    int sz;
    seg_min(int n){
        sz=n;
        tree.resize(4*n);
    }

    void build(int v,int tl,int tr){
        if(tl==tr){
            tree[v]=sz-1;
            return;
        }
        int tm=tl+(tr-tl)/2;
        build(v*2,tl,tm);
        build(v*2+1,tm+1,tr);
        tree[v]= min(tree[v*2],tree[v*2+1]);
        return;
    }

    void update(int v,int tl,int tr,int pos,int vl){
        if(tl==tr){
            tree[v]=min(tree[v],vl);
            return;
        }

        int tm= tl+(tr-tl)/2;
        if(pos<=tm) update(v*2,tl,tm,pos,vl);
        else update(v*2+1,tm+1,tr,pos,vl);

        tree[v]= min(tree[v*2],tree[v*2+1]);
        return;
    }

    int query(int v,int tl,int tr,int l,int r){
        if(l>r) return sz-1;
        if(tl==l && tr==r) return tree[v];
        int tm= tl+(tr-tl)/2;

        return min(query(v*2,tl,tm,l,min(tm,r)),query(v*2+1,tm+1,tr,max(l,tm+1),r));
    }
};

class seg_max{
public:
    vector<int> tree;
    seg_max(int n){
        tree.resize(4*n);
    }

    void build(int v,int tl,int tr){
        if(tl==tr){
            tree[v]=-1;
            return;
        }
        int tm=tl+(tr-tl)/2;
        build(v*2,tl,tm);
        build(v*2+1,tm+1,tr);
        tree[v]=max(tree[v*2],tree[v*2+1]);
        return;
    }

    void update(int v,int tl,int tr,int pos,int vl){
        if(tl==tr){
            tree[v]=max(tree[v],vl);
            return;
        }

        int tm= tl+(tr-tl)/2;
        if(pos<=tm) update(v*2,tl,tm,pos,vl);
        else update(v*2+1,tm+1,tr,pos,vl);

        tree[v]= max(tree[v*2],tree[v*2+1]);
        return;
    }

    int query(int v,int tl,int tr,int l,int r){
        if(l>r) return -1;
        if(tl==l && tr==r) return tree[v];
        int tm= tl+(tr-tl)/2;

        return max(query(v*2,tl,tm,l,min(tm,r)),query(v*2+1,tm+1,tr,max(l,tm+1),r));
    }
};

int main(){
    int t;
    cin >> t;
    while(t--){
        scanf("%s",str);
        Anusar T;
        T.build();
        T.do_sort();
        T.do_lcp();

        /*
        for(int i=0;i<T.len-1;i++) cout << T.lcp[i] << " ";
        cout << endl;
        */

        vector<int> lo,hi;

        seg_max mx(T.len);
        seg_min mn(T.len);

        mx.build(1,0,T.len-1);

        for(int i=0;i<T.lcp.size();i++){
            int ret=mx.query(1,0,T.len-1,0,T.lcp[i]-1);
            lo.pb(ret);
            mx.update(1,0,T.len-1,T.lcp[i],i);
        }

        mn.build(1,0,T.len-1);

        for(int i=T.lcp.size()-1;i>=0;i--){
            int ret=mn.query(1,0,T.len-1,0,T.lcp[i]-1);
            hi.pb(ret);
            mn.update(1,0,T.len-1,T.lcp[i],i);
        }

        reverse(hi.begin(),hi.end());

        vector<vector<int> >isat(T.len);
        for(int i=0;i<T.lcp.size();i++){
            isat[T.lcp[i]].pb(i);
        }

        vector<int64> ans(T.len+1,0LL);

        for(int i=1;i<T.len;i++){
            int cons=0;
            for(int j=0;j<isat[i].size();j++){
                int k= isat[i][j];
                if(k>=cons){
                    int l= lo[k],r=hi[k];
                    int tk= r-l;
                    int v= i;
                    if(0<=r && r<T.lcp.size()){
                        if(i>= T.lcp[r]) v=min(v,i-T.lcp[r]);
                    }
                    if(0<=l && l<T.lcp.size()){
                        if(i>= T.lcp[l]) v=min(v,i-T.lcp[l]);
                    }
                    ans[tk]+= (int64)v*tk;
                    //cout << v << " " << tk << endl;
                    cons= r;
                }
            }
        }

        int64 sm= accumulate(ans.begin()+2,ans.end(),0LL);
        //cout << sm << endl;
        ans[1]= (int64)T.len*((int64)T.len+1)/2- sm;
        sm=0;

        vector<int64> sum(T.len+1,0LL);
        for(int i=1;i<=T.len;i++){
                sm+=ans[i];
                sum[i]= sum[i-1]+ans[i];
        }

        int q;
        scanf("%d",&q);

        for(int i=0;i<q;i++){
            int x;
            scanf("%d",&x);
            if(x>T.len) printf("0\n");
            else{
                printf("%lld\n",sm-sum[x-1]);
            }
        }
    }
    return 0;
}
