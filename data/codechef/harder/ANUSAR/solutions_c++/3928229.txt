// AUTHOR: subscriber

#include <bits/stdc++.h>

#define mp make_pair
#define pb push_back
#define F first
#define S second
#define SS stringstream
#define sqr(x) ((x)*(x))
#define m0(x) memset(x,0,sizeof(x))
#define m1(x) memset(x,63,sizeof(x))
#define CC(x) cout << (x) << endl
#define pw(x) (1ll<<(x))
#define M 1000000007
#define N 511111
using namespace std;
typedef pair<int,int> pt;
 
int n;
char s[N];

int rank[20][N];
int order[N];
int it, T;

vector<pt> z[N];
long long ans[N], pr[N], sz[N];

int cnt[N], relpos[N], neworder[N]; // for radix sort
 
int lcp(int x, int y) {
    int r = 0;
    for (int i = it - 1; i >= 0; i--) if (x + pw(i) <= n && y + pw(i) <= n && rank[i][x] == rank[i][y]) {
        x += pw(i);
        y += pw(i);
        r += pw(i);
    }
    return r;
}

void go(int sz, int t, int v) {
    ans[sz] += sz * 1ll * t * v;
}

int get(int x) {
    if (pr[x] == x) return x;
    return pr[x] = get(pr[x]);
}

void unite(int x, int y) {
    x = get(x);
    y = get(y);
    go(sz[x], T, -1);
    go(sz[y], T, -1);
    sz[x] += sz[y];
    pr[y] = x;
    go(sz[x], T, 1);
}

int cmp(int i, int j)
{
    return s[i] < s[j];
}

int main(){
    int t;
    scanf("%d\n", &t);
    while (t--) {
        gets(s);
        n = strlen(s);
        
        for (int i = 0; i < n; i++) order[i] = i;
        sort(order, order + n, cmp);
        int newrank = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0 && s[order[i-1]] != s[order[i]]) newrank++;
            rank[0][order[i]] = newrank;
        }
        
        it = 1;
        while (pw(it-1) <= n) {
            for (int i = 0; i < n; i++) cnt[i] = relpos[i] = 0;
            for (int i = 0; i < n; i++) cnt[rank[it - 1][i] + 1]++;
            for (int i = 1; i < n; i++) cnt[i] += cnt[i - 1];
            for (int i = 0; i < n; i++) if (i + pw(it - 1) >= n) {
                int x = rank[it - 1][i];
                neworder[cnt[x] + relpos[x]] = i;
                relpos[x]++;
            }
            for (int i = 0; i < n; i++) if (order[i] - pw(it - 1) >= 0) {
                int x = rank[it - 1][order[i] - pw(it - 1)];
                neworder[cnt[x] + relpos[x]] = order[i] - pw(it - 1);
                relpos[x]++;
            }
            for (int i = 0; i < n; i++) order[i] = neworder[i];
            newrank = 0;
            for (int i = 0; i < n; i++) {
                if (i > 0) {
                    //if (rank[it - 1][order[i]] != rank[it - 1][order[i-1]]) newrank++; else {
                    //    if (order[i] + pw(it - 1) >= n || order[i-1] + pw(it - 1) >= n || 
                    //        rank[it - 1][order[i] + pw(it - 1)] != rank[it - 1][order[i-1] + pw(it - 1)]) newrank++;
                    //}
                    bool ok1 = rank[it - 1][order[i]] != rank[it - 1][order[i-1]];
                    bool ok2 = order[i-1] + pw(it-1) >= n and order[i] + pw(it-1) < n;
                    bool ok3 = order[i-1] + pw(it-1) < n and order[i] + pw(it-1) < n
                                and rank[it - 1][order[i] + pw(it - 1)] != rank[it - 1][order[i-1] + pw(it - 1)];
                    if(ok1 or ok2 or ok3) newrank++;
                }
                rank[it][order[i]] = newrank;
            }
            it++;
        }
        
        //for(int i = 0; i < n; i++) cout << rank[it-1][i] << ' ' ; cout << endl;
        //for(int i = 0; i < n; i++) cout << order[i] << ' ' ;cout << endl;
        
        
        for (int i = 1; i <= n; i++) z[i].clear();
        for (int i = 0; i < n; i++) {
            z[n - order[i]].pb(mp(1, i));
        }
        for (int i = 0; i < n - 1; i++) {
            int l = lcp(order[i], order[i+1]);
            z[l].pb(mp(2, i));
        }
        for (int i = 0; i < n; i++) pr[i] = -1;
        for (int i = 0; i <= n; i++) ans[i] = 0;
        T = n;
        
        
        for (int i = n; i >= 1; i--, T--) {
            for (int j = 0; j < z[i].size(); j++) {
                int x = z[i][j].S;
                if (z[i][j].F == 1) {
                    pr[x] = x;
                    sz[x] = 1;
                    go(1, T, 1);
                } else {
                    unite(x, x + 1);
                }
            }
        }
        
        for (int i = n - 1; i >= 1; i--) ans[i] += ans[i + 1];
        int tt;
        scanf("%d\n", &tt);
        while (tt--) {
            int x;
            scanf("%d\n", &x);
            printf("%lld\n", ans[x]);
        }
    }
    return 0;
}