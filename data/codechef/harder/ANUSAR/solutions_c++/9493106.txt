#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

const int maxn = 2e5 + 10;
typedef pair<int, int> ii;

int n, sa[maxn], ra[maxn], rb[maxn], pos[maxn], lcp[maxn], gap;
long long f[maxn];
char s[maxn];

bool cmpSuf(int i, int j) {
    if (ra[i] != ra[j]) return ra[i] < ra[j];
    i += gap; j += gap;
    return (i <= n && j <= n) ?  ra[i] < ra[j] : i > j;
}

void sarray() {
    for(int i = 1; i <= n; ++i) sa[i] = i, ra[i] = s[i];
    for(gap = 1; gap <= n; gap *= 2) {
        sort(sa+1, sa+n+1, cmpSuf);
        rb[sa[1]] = 1;
        for(int i = 2; i <= n; ++i) rb[sa[i]] = rb[sa[i-1]] + cmpSuf(sa[i-1], sa[i]);
        for(int i = 1; i <= n; ++i) ra[i] = rb[i];
        if (ra[sa[n]] == n) break;
    }
}

void blcp() {
    for(int i = 1; i <= n; ++i) pos[sa[i]] = i;
    for(int i = 1, k = 0; i <= n; ++i, k ? --k: 0) if (pos[i] != 1) {
        int j = sa[pos[i]-1];
        while (s[i+k] == s[j+k]) ++k;
        lcp[pos[i]] = k;
    }
}

int t[maxn], l[maxn], r[maxn];
void update(int i, int v) {
    for(; i <= n; i += i & (-i) ) t[i] += v;
}
int get(int i, int res = 0) {
    for(; i > 0; i -= i & (-i) ) res += t[i];
    return res;
}

bool cmp(int i, int j) {
    return r[i] - l[i] > r[j] - l[j];
}

void solve() {
    vector<int> v;
    vector<int> s;
    for(int i = 1; i <= n; ++i) f[i] = t[i] = 0;
    for(int i = 2; i <= n; ++i) {
        while (! s.empty() && lcp[i] <= lcp[s.back()]) s.pop_back();
        l[i] = s.empty() ? 2: s.back() + 1;
        s.push_back(i);
    }
    s.clear();
    for(int i = n; i >= 2; --i) {
        while (! s.empty() && lcp[i] <= lcp[s.back()] ) s.pop_back();
        r[i] = s.empty() ? n: s.back() - 1;
        s.push_back(i);
    }

    for(int i = 2; i <= n; ++i) v.push_back(i);
    sort(v.begin(), v.end(), cmp);

    //for(int i = 1; i <= n; ++i) puts(::s+sa[i]);

    for(int it = 0; it < v.size(); ++it) {
        int i = v[it];
        int len = lcp[i] - get(i);
        f[r[i]-l[i]+2] += 1LL * len * (r[i]-l[i]+2);
        update(l[i], len); update(r[i]+1,-len);
    }

    for(int i = n-1; i >= 2; --i) f[i] += f[i+1];

    f[1] = 1LL*n*(n+1)/2;
}

int main() {
    //freopen("input.txt", "r", stdin);

    int test;
    scanf("%d\n", &test);
    for(; test; --test) {
        gets(s+1); n = strlen(s+1);
        sarray(); blcp();
        solve();
        int m;
        scanf("%d\n", &m);
        for(; m; --m) {
            int x; scanf("%d\n", &x);
            printf("%lld\n", f[x]);
        }
    }
}
