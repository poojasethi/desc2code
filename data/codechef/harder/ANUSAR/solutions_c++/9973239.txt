#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 200005
#define NN 1025
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 123456789
#define ln 1e9+1
#define cs 1331
#define Line pair < pair <int, int>, int >
#define Pi pair < Pa , Pa >
#define Pa pair < double , double >

using namespace std;

int Pos[N], Sa[N], n, Len = 1, tmp[N], Lcp[N], top, Que[N], L[N], R[N];
vector < int > Id[N];
ll ans[N];
string S;

bool cmp(int p, int q)
{
    if(Pos[p] != Pos[q]) return Pos[p] < Pos[q];
    p += Len;
    q += Len;
    if(p <= n && q <= n)    return Pos[p] < Pos[q];
    return p < q;
}

void BUILD_SA()
{
    for(int i=1; i<=n; i++)
    {
        Sa[i] = i;
        Pos[i] = S[i] - 'a' + 1;
    }
    for(Len=1; Len<=n; Len*=2)
    {
        sort(Sa+1, Sa+n+1, cmp);
        for(int i=1; i<=n; i++)
            tmp[i] = tmp[i-1] + cmp(Sa[i-1], Sa[i]);
        for(int i=1; i<=n; i++)
            Pos[Sa[i]] = tmp[i];
    }
}

void BUILD_LCP()
{
    int k = 0;
    for(int i=1; i<=n; i++)
    {
        int j = Sa[Pos[i]-1];
        if(j == 0)
        {
            Lcp[Pos[i]] = 0;
            continue;
        }
        while(S[i+k] == S[j+k]) k++;
        Lcp[Pos[i]] = k;
        if(k)   k--;
    }
}

int main()
{
    //filein("ANUSAR.inp");   fileout("ANUSAR.out");
    int T, q, j;
    cin >> T;
    while(T--)
    {
        cin >> S;
        n = S.size(); S = ' ' + S;
        BUILD_SA();
        BUILD_LCP();
        Lcp[0] = Lcp[n+1] = 0;
        top = 0;    Que[top] = 0;
        for(int i=1; i<=n; i++)
        {
            Id[i].clear();
            ans[i] = 0;
        }
        for(int i=1; i<=n; i++)
        {
            Id[Lcp[i]].push_back(i);
            while(Lcp[Que[top]] >= Lcp[i] && top > 0)    top--;
            L[i] = Que[top];
            Que[++top] = i;
        }
        top = 0;    Que[top] = n + 1;
        for(int i=n; i>=1; i--)
        {
            while(Lcp[Que[top]] >= Lcp[i] && top > 0)    top--;
            R[i] = Que[top];
            Que[++top] = i;
        }
        for(int i=n; i>=1; i--)
        {
            int j = 0;
            while(j < Id[i].size())
            {
                int pos = Id[i][j];
                ans[R[pos]-L[pos]] += (ll)(R[pos] - L[pos]) * (Lcp[pos] - max(Lcp[L[pos]], Lcp[R[pos]]));
                while(R[pos] >= Id[i][j] && j < Id[i].size())    j++;
            }
        }
        for(int i=n; i>=1; i--)
            ans[i] += ans[i+1];
        ans[1] = (ll)n * (n+1) / 2;
        cin >> q;
        for(int i=1; i<=q; i++)
        {
            cin >> j;
            cout << ans[j] << endl;
        }
    }
}
