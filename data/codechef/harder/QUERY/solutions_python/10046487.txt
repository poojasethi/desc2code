#include<iostream>
#include<algorithm>
#include<cstdio>
#define N 100001
using namespace std;
struct node{
	long long K,B;
	long long sum;
	int son[2];
	int belong;
	long long calc(long long x){
		return x*B+K*(x-1)*x/2;
	}
}f[N*17*17];
int L;
int n,m,now,last,top;
int dfn[N],b[N][2],deep[N],g[N],h[N],fa[N][17],a[N*2][2],q[N];
void ins(int x,int y){
	static int sum=1;
	a[++sum][0]=y,a[sum][1]=g[x],g[x]=sum;
}
void dfs(int x){
	for (int i=0;fa[fa[x][i]][i];i++)fa[x][i+1]=fa[fa[x][i]][i];
	deep[x]++;
	for (int i=g[x];i;i=a[i][1])
		if (a[i][0]!=fa[x][0]){
			deep[a[i][0]]=deep[x];
			fa[a[i][0]][0]=x;
			dfs(a[i][0]);
			if (b[a[i][0]][1]+1>b[x][1])
				b[x][1]=b[a[i][0]][1]+1,b[x][0]=a[i][0];
		}
}
void dfs1(int x){
	static int sum=0;
	dfn[x]=++sum;
	if (b[x][0])
		h[b[x][0]]=h[x],dfs1(b[x][0]);
	for (int i=g[x];i;i=a[i][1])
		if (a[i][0]!=b[x][0]&&a[i][0]!=fa[x][0])
			h[a[i][0]]=a[i][0],dfs1(a[i][0]);
}
int getlca(int x,int y){
	static int i;
	i=16;
	if (deep[x]<deep[y])swap(x,y);
	while (deep[x]!=deep[y]){
		for (;deep[fa[x][i]]<deep[y];i--);
		x=fa[x][i];
	}
	i=16;
	while (x!=y){
		for (;i&&fa[x][i]==fa[y][i];i--);
		x=fa[x][i],y=fa[y][i];
	}
	return x;
}
int getlca1(int x,int y){
	static int i;
	i=16;
	while (deep[x]>y){
		for (;deep[fa[x][i]]<y;)i--;
		x=fa[x][i];
	}
	return x;
}
long long get(int s,int l,int r,int ll,int rr){
	ll=max(ll,l);
	rr=min(rr,r);
	if (ll>rr||!s)return 0;
	if (ll==l&&r==rr)return f[s].sum;
	return get(f[s].son[0],l,(l+r)>>1,ll,rr)+get(f[s].son[1],((l+r)>>1)+1,r,ll,rr)-f[s].calc(ll-l)+f[s].calc(rr-l+1);
}
long long up(int x,int y){
	static long long s;
	s=0;
	while (deep[x]>=deep[y]){
		if (deep[h[x]]<=deep[y]){
			s+=get(now,1,n,dfn[y],dfn[x]);
			break;
		}
		s+=get(now,1,n,dfn[h[x]],dfn[x]);
		x=fa[h[x]][0];
	}
	return s;
}
long long getans(int x,int y){
	static long long s;
	s=0;
	while (deep[x]>=deep[y]){
		if (deep[h[x]]<=deep[y]){
			s+=get(now,1,n,dfn[y],dfn[x]);
			break;
		}
		s+=get(now,1,n,dfn[h[x]],dfn[x]);
		x=fa[h[x]][0];
	}
	return s;
}
int ins(int s,int l,int r,int ll,int rr,long long K,long long B){
	ll=max(ll,l),rr=min(rr,r);
	if (ll>rr)return s;
	if (!s)
		f[s=++L].belong=now;
	else
	if (f[s].belong!=now){
		f[++L]=f[s];
		f[L].belong=now;
		s=L;
	}
	if (ll<=l&&r<=rr){
		f[s].K+=K,f[s].B+=B;
		f[s].sum+=K*(r-l)*(r-l+1)/2+B*(r-l+1);
		return s;
	}
	int mid=(l+r)>>1;
	if (mid>=ll){
		f[s].son[0]=ins(f[s].son[0],l,(l+r)>>1,ll,rr,K,B);
		f[s].son[1]=ins(f[s].son[1],((l+r)>>1)+1,r,ll,rr,K,B+K*(mid-ll+1));
	}else
		f[s].son[1]=ins(f[s].son[1],((l+r)>>1)+1,r,ll,rr,K,B);
	f[s].sum=f[f[s].son[0]].sum+f[f[s].son[1]].sum+f[s].calc(r-l+1);
	return s;
}
void up(int x,int y,long long K,long long B){
	static int sum;
	while (deep[x]>=deep[y]){
		if (deep[h[x]]<=deep[y]){
			sum=deep[x]-deep[y]+1;
			ins(now,1,n,dfn[y],dfn[x],-K,B+(sum-1)*K);
			break;
		}
		sum=deep[x]-deep[h[x]]+1;
		ins(now,1,n,dfn[h[x]],dfn[x],-K,B+(sum-1)*K);
		B+=sum*K;
		x=fa[h[x]][0];
	}
}
int main(){
	scanf("%d %d",&n,&m);
	for (int i=1;i<n;i++){
		int x,y;
		scanf("%d %d",&x,&y);
		ins(x,y),ins(y,x);
	}
	dfs(1);
	h[1]=1;
	dfs1(1);
	now=1;
	q[0]=1;
	L=1;
	f[1].belong=1;
	long long ans=0;
	while (m--){
		char c;
		int x,y,K,B;
		scanf(" %c",&c);
		if (c=='c'){
			scanf("%d %d %d %d",&x,&y,&B,&K);
			x=(x+ans)%n+1,y=(y+ans)%n+1;
			int lca=getlca(x,y);
			last=now,now=++L,f[now]=f[last];
			q[++top]=now;
			f[now].belong=now;
			up(x,lca,K,B);
			if (y==lca)continue;
			int lca1=getlca1(y,deep[lca]+1);
			up(y,lca1,-K,B+K*(deep[x]+deep[y]-deep[lca]*2));
		}else
		if (c=='q'){
			scanf("%d %d",&x,&y);
			x=(x+ans)%n+1,y=(y+ans)%n+1;
			if (deep[x]<deep[y])swap(x,y);
			int lca=getlca(x,y);
			if (lca==y){
				printf("%lld\n",ans=getans(x,lca));
				continue;
			}
			int lca1=getlca1(y,deep[lca]+1);
			printf("%lld\n",ans=getans(x,lca)+getans(y,lca1));
		}else{
			scanf("%d",&x);
			x=(x+ans)%(top+1);
			now=q[x];
		}
	}
	return 0;
}