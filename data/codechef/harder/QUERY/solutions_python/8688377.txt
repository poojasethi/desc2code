#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
struct Ttree{
	static const int maxn=100010;
	struct Tedge{
		int son; Tedge *pre;
		void add(int s_,Tedge *p_){ son=s_,pre=p_; }
	}edge[maxn<<1],*pos[maxn];
	int tot;
	void add(int a,int b){ edge[++tot].add(b,pos[a]),pos[a]=edge+tot; }
	void clear(){ tot=0; memset(pos,0,sizeof(pos)); }
}t;
struct Tsegment_tree{
	static const int maxn=100010,maxm=100010,maxnode=30000010;
	struct Tseg{
		Tseg *lc,*rc;
		int64 v,d,sum;//v+di
		inline void add_tag(int64 newv,int64 newd,int n){
			sum+=newv*n+newd*n*(n-1)/2,v+=newv,d+=newd;
		}
		inline void update(int n){
			sum=(lc->sum)+(rc->sum)+v*n+d*n*(n-1)/2;
		}
	}t[maxnode],*root[maxm];
	int tot,n;
	Tseg *newnode(){
		++tot,t[tot].lc=t[tot].rc=0;
		t[tot].v=t[tot].d=t[tot].sum=0; return t+tot;
	}
	void build(Tseg *&x,int l,int r){
		x=newnode(); if(l==r) return;
		int mid=(l+r)/2;
		build(x->lc,l,mid),build(x->rc,mid+1,r);
	}
	void clear(int newn){
		tot=0,memset(root,0,sizeof(root));
		n=newn,build(root[0],1,n);
	}
	
	void modify(Tseg *ever,Tseg *&x,int l,int r,int a,int b,int64 v,int64 d){
		if(x==ever) x=newnode(),*x=*ever;
		if(l>=a && r<=b){ x->add_tag(v,d,r-l+1); return; }
		int mid=(l+r)>>1,m=min(b,mid)-max(a,l)+1;
		if(a<=mid) modify(ever->lc,x->lc,l,mid,a,b,v,d);
		if(b>mid) modify(ever->rc,x->rc,mid+1,r,a,b,v+max(m,0)*d,d);
		x->update(r-l+1);
	}
	int64 query(Tseg *x,int l,int r,int a,int b){
		if(l>=a && r<=b) return x->sum;
		int ll=max(a,l),rr=min(b,r),mid=(l+r)>>1;
		int64 v=(x->v)+(ll-l)*(x->d),d=x->d,n=rr-ll+1;
		int64 ans=v*n+d*n*(n-1)/2;
		if(a<=mid) ans+=query(x->lc,l,mid,a,b);
		if(b>mid) ans+=query(x->rc,mid+1,r,a,b);
		return ans;
	}
	void modify(int old,int now,int a,int b,int v,int d){
		modify(root[old],root[now],1,n,a,b,v,d);
	}
	int64 query(int time,int a,int b){
		return query(root[time],1,n,a,b);
	}
}seg;
const int maxn=100010;
int o[maxn],top[maxn],pos[maxn],sign;
int fa[maxn],sz[maxn],dep[maxn];
int p[maxn],n,m,sum; int64 lastans;

void init(){
	scanf("%d%d",&n,&m),t.clear(),lastans=0,sum=0;
	for(int i=1,a,b;i<=n-1;++i)
		scanf("%d%d",&a,&b),t.add(a,b),t.add(b,a);
}

void tree_dp(int x){
	sz[x]=1;
	for(Ttree::Tedge *i=t.pos[x];i;i=i->pre)if(i->son!=fa[x]){
		fa[i->son]=x,dep[i->son]=dep[x]+1;
		tree_dp(i->son),sz[x]+=sz[i->son];
	}
}
void decompose(int x){
	++sign,o[sign]=x,pos[x]=sign; int y=-1;
	for(Ttree::Tedge *i=t.pos[x];i;i=i->pre)
		if(i->son!=fa[x] && ((y==-1) || sz[i->son]>sz[y])) y=i->son;
	if(y!=-1) top[y]=top[x],decompose(y);
	for(Ttree::Tedge *i=t.pos[x];i;i=i->pre)
		if(i->son!=fa[x] && i->son!=y)
			top[i->son]=i->son,decompose(i->son);
}
void decompose(){
	fa[1]=0,dep[1]=1,tree_dp(1);
	sign=0,top[1]=1,decompose(1);
	seg.clear(n);
}

int dist(int x,int y){
	int ans=0;
	for(;top[x]!=top[y];y=fa[top[y]]){
		if(dep[top[x]]>dep[top[y]]) swap(x,y);
		ans+=pos[y]-pos[top[y]]+1;
	}
	if(dep[x]>dep[y]) swap(x,y);
	ans+=pos[y]-pos[x]+1; return ans;
}
void modify(int time,int x,int y,int v,int d){
	int64 xv=v,xd=d,yv=v+(dist(x,y)-1)*d,yd=-d;
	for(;top[x]!=top[y];y=fa[top[y]]){
		if(dep[top[x]]>dep[top[y]])
			swap(x,y),swap(xv,yv),swap(xd,yd);
		int n=pos[y]-pos[top[y]]+1;
		seg.modify(time-1,time,pos[top[y]],pos[y],yv+(n-1)*yd,-yd);
		yv+=n*yd;
	}
	if(dep[x]>dep[y])
		swap(x,y),swap(xv,yv),swap(xd,yd);
	int n=pos[y]-pos[x]+1;
	seg.modify(time-1,time,pos[x],pos[y],yv+(n-1)*yd,-yd);
}
int64 query(int time,int x,int y){
	int64 ans=0;
	for(;top[x]!=top[y];y=fa[top[y]]){
		if(dep[top[x]]>dep[top[y]]) swap(x,y);
		ans+=seg.query(time,pos[top[y]],pos[y]);
	}
	if(dep[x]>dep[y]) swap(x,y);
	ans+=seg.query(time,pos[x],pos[y]);
	return ans;
}

int main(){
	init();
	decompose();
	for(int i=1;i<=m;++i){
		char s[2]; int x,y,v,d;
		scanf("%s%d",s,&x);
		switch(s[0]){
			case 'l':
				x=(x+lastans)%(sum+1);
				seg.root[i]=seg.root[p[x]]; break;
			case 'q':
				seg.root[i]=seg.root[i-1],scanf("%d",&y);
				x=(x+lastans)%n+1,y=(y+lastans)%n+1;
				lastans=query(i,x,y);
				printf("%lld\n",lastans); break;
			case 'c':
				seg.root[i]=seg.root[i-1],scanf("%d%d%d",&y,&v,&d);
				x=(x+lastans)%n+1,y=(y+lastans)%n+1;
				p[++sum]=i,modify(i,x,y,v,d);break;
		}
	}
	return 0;
}
