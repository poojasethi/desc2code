#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int,int> pr;
const double pi=acos(-1);
#define rep(i,a,n) for(int i=a;i<=n;i++)
#define per(i,n,a) for(int i=n;i>=a;i--)
#define Rep(i,u) for(int i=head[u];i;i=Next[i])
#define clr(a) memset(a,0,sizeof a)
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
ld eps=1e-9;
ll pp=1000000009;
ll sqrt5=383008016;
ll mo(ll a,ll pp){if(a>=0 && a<pp)return a;a%=pp;if(a<0)a+=pp;return a;}
ll powmod(ll a,ll b,ll pp){ll ans=1;for(;b;b>>=1,a=mo(a*a,pp))if(b&1)ans=mo(ans*a,pp);return ans;}
ll read(){
	ll ans=0;
	char last=' ',ch=getchar();
	while(ch<'0' || ch>'9')last=ch,ch=getchar();
	while(ch>='0' && ch<='9')ans=ans*10+ch-'0',ch=getchar();
	if(last=='-')ans=-ans;
	return ans;
}
//head
#define N 210000
#define M 30000000
int head[N],v[N*2],Next[N*2],son[M][2],siz[N],dep[N],path[N],fa[N],id[N],l[N],r[N],num=0,Son[N],nn;
ll sum[M];
ll rec1[M],rec2[M];
int n,T,root[N];
char str[100];
void add(int x,int y){
	v[++num]=y;Next[num]=head[x];head[x]=num;
}
void dfs1(int u){
	siz[u]=1;
	for(int i=head[u];i;i=Next[i])
		if(v[i]!=fa[u]){
			dep[v[i]]=dep[u]+1;
			fa[v[i]]=u;
			dfs1(v[i]);
			siz[u]+=siz[v[i]];
			if(siz[v[i]]>siz[Son[u]])Son[u]=v[i];
		}
}
void dfs2(int u){
	l[u]=++nn;id[nn]=u;
	if(Son[u])path[Son[u]]=path[u],dfs2(Son[u]);
	for(int i=head[u];i;i=Next[i])
		if(v[i]!=fa[u] && v[i]!=Son[u])path[v[i]]=v[i],dfs2(v[i]);
	r[u]=nn;
}
int lca(int x,int y){
	while(path[x]!=path[y]){
		if(dep[fa[path[x]]]<dep[fa[path[y]]])swap(x,y);
		x=fa[path[x]];
	}
	if(dep[x]<dep[y])return x;
	else return y;
}
void updata(int u,ll len){
	sum[u]=sum[son[u][0]]+sum[son[u][1]]+(rec1[u]+rec1[u]+rec2[u]*(len-1))*len/2;
}
void change(int &u,int v,int l,int r,int x,int y,ll A,ll B){
	if(x>r || y<l)return;
	u=++num;
	sum[u]=sum[v];
	son[u][0]=son[v][0];
	son[u][1]=son[v][1];
	rec1[u]=rec1[v];
	rec2[u]=rec2[v];
	if(x<=l && y>=r){
		rec1[u]+=A+(ll)(l-x)*B;
		rec2[u]+=B;
		updata(u,r-l+1);
		return ;
	}
	int mid=(l+r)/2;
	change(son[u][0],son[v][0],l,mid,x,y,A,B);
	change(son[u][1],son[v][1],mid+1,r,x,y,A,B);
	updata(u,r-l+1);
}
void change(int &u,int v,int l,int r,ll A,ll B){
	if(l>r){
		swap(l,r);
		A=A+(r-l)*B;
		B=-B;
	}
	change(u,v,1,n,l,r,A,B);
}
ll calc(ll A,ll B,ll x,ll y){
	return A*(y-x+1)+(y-x+1)*(y-1+x-1)/2*B;
}
ll find(int u,int l,int r,int x,int y){
	if(u==0 || y<l || x>r)return 0;
	if(x<=l && y>=r)return sum[u];
	int xx=max(l,x),yy=min(r,y);
	ll tot=calc(rec1[u],rec2[u],xx-l+1,yy-l+1);
	int mid=(l+r)/2;
	return find(son[u][0],l,mid,x,y)+find(son[u][1],mid+1,r,x,y)+tot;
}
ll find(int rt,int l,int r){
	if(l>r)swap(l,r);
	return find(rt,1,n,l,r);
}
int main(){
	n=read(),T=read();
	rep(i,1,n-1){
		int x=read(),y=read();
		add(x,y);
		add(y,x);
	}
	dep[1]=1;
	dfs1(1);
	path[1]=1;
	dfs2(1);
	ll lastans=0;
	num=0;
	int rt=0;
	int top=0;
	rep(i,1,T){
		scanf("%s",str);
		if(str[0]=='c'){
			int x=read(),y=read();
			ll A=read(),B=read();
			x=(x+lastans)%n+1;
			y=(y+lastans)%n+1;
			int z=lca(x,y);
			while(path[x]!=path[y]){
				if(dep[fa[path[x]]]>dep[fa[path[y]]]){
					change(rt,rt,l[x],l[path[x]],A,B);
					A=A+B*(dep[x]-dep[fa[path[x]]]);
					x=fa[path[x]];
				}
				else{
					int t=path[y];ll len=dep[x]-dep[z]+dep[t]-dep[z];
					change(rt,rt,l[t],l[y],A+B*len,B);
					y=fa[t];
				}
		
			}
			change(rt,rt,l[x],l[y],A,B);
			root[++top]=rt;
		}
		else
		if(str[0]=='l')rt=root[(read()+lastans)%(top+1)];
		else{
			int x=read(),y=read();
			x=(x+lastans)%n+1;
			y=(y+lastans)%n+1;
			ll ans=0;
			while(path[x]!=path[y]){
				if(dep[fa[path[x]]]>dep[fa[path[y]]]){
					ans=ans+find(rt,l[path[x]],l[x]);
					x=fa[path[x]];
				}
				else{
					ans=ans+find(rt,l[path[y]],l[y]);
					y=fa[path[y]];
				}
			}
			ans=ans+find(rt,l[x],l[y]);
			printf("%lld\n",ans);
			lastans=ans;
		}
	}
	return 0;
}