#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
using namespace std;
typedef long long LL;
inline void readc(char &c);
inline void readi(int &x);
void writell(const LL &x);
#define all 1,n
const int maxn=100005;
int n,m,pos,Q;
int head[maxn],adj[maxn*2],next[maxn*2],tot;
int fa[maxn],dfn[maxn],dep[maxn],siz[maxn],son[maxn],top[maxn],idx;

LL ans;

struct node
{
	LL c,d,sum;
	node *lc,*rc;
}null[33333333],*ns=null,*root[maxn];

node* New(){return ++ns;}

void Insert(node* &x,int l,int r,int a,int b,const LL &c,const LL &d)
{
	node *temp=New();*temp=*x;x=temp;
	if(l>=a&&r<=b)
		x->c+=c,x->d+=d;
	else
	{
		a=max(a,l),b=min(b,r);
		x->sum+=c*(a+b)*(b-a+1)/2+d*(b-a+1);
		int mid=l+r>>1;
		if(a<=mid)Insert(x->lc,l,mid,a,b,c,d);
		if(b>mid)Insert(x->rc,mid+1,r,a,b,c,d);
	}
}

LL Query(node *x,int l,int r,int a,int b,LL c=0,LL d=0)
{
	c+=x->c,d+=x->d;
	if(l>=a&&r<=b)
		return x->sum+c*(l+r)*(r-l+1)/2+d*(r-l+1);
	int mid=l+r>>1;LL res=0;
	if(a<=mid)res+=Query(x->lc,l,mid,a,b,c,d);
	if(b>mid)res+=Query(x->rc,mid+1,r,a,b,c,d);
	return res;
}

void addedge(int u,int v)
{tot++;adj[tot]=v;next[tot]=head[u];head[u]=tot;
tot++;adj[tot]=u;next[tot]=head[v];head[v]=tot;}

int tdfs(const int &x)
{
	dep[x]=dep[fa[x]]+1;
	for(int i=head[x];i;i=next[i])
		if(adj[i]!=fa[x])
		{
			fa[adj[i]]=x;
			siz[x]+=tdfs(adj[i]);
			if(siz[adj[i]]>siz[son[x]])son[x]=adj[i];
		}
	return ++siz[x];
}

void divide(int x,int tp)
{
	dfn[x]=++idx;
	top[x]=tp;
	if(son[x])
	{
		divide(son[x],tp);
		for(int i=head[x];i;i=next[i])
			if(adj[i]!=fa[x]&&adj[i]!=son[x])
				divide(adj[i],adj[i]);
	}
}

void init()
{
	null->lc=null->rc=null;root[0]=null;
	readi(n);readi(Q);
	for(int u,v,i=1;i<n;i++)
		readi(u),readi(v),addedge(u,v);
	tdfs(1);
	divide(1,1);
}

LL modify(node* &rt,int a,int b,LL c,LL d)
{
	if(a>b)
		swap(a,b),d+=c*(b-a+2),c=-c;
	d-=c*(a-1);
	Insert(rt,all,a,b,c,d);
}

int LCA(int u,int v)
{
	for(;top[u]!=top[v];)
		if(dep[top[u]]>dep[top[v]])u=fa[top[u]];
		else v=fa[top[v]];
	if(dep[u]>dep[v])return v;
	return u;
}

LL addseq(node* &rt,int u,int v,LL c,LL d)
{
	int lp=0,rp=dep[u]+dep[v]-(dep[LCA(u,v)]<<1);
	for(;top[u]!=top[v];)
	{
		if(dep[top[u]]>dep[top[v]])
		{
			modify(rt,dfn[u],dfn[top[u]],c,d+c*lp);
			lp+=dep[u]-dep[top[u]]+1;
			u=fa[top[u]];
		}
		else
		{
			rp-=dep[v]-dep[top[v]];
			modify(rt,dfn[top[v]],dfn[v],c,d+c*rp);
			rp--;
			v=fa[top[v]];
		}
	}
	modify(rt,dfn[u],dfn[v],c,d+c*lp);
}

LL getsum(node *rt,int u,int v)
{
	LL res=0;
	for(;top[u]!=top[v];)
	{
		if(dep[top[u]]<dep[top[v]])swap(u,v);
		res+=Query(rt,all,dfn[top[u]],dfn[u]);
		u=fa[top[u]];
	}
	if(dep[u]>dep[v])swap(u,v);
	res+=Query(rt,all,dfn[u],dfn[v]);
	return res;
}

void work()
{
	char op;
	int u,v,a,b;
	for(int qi=1;qi<=Q;qi++)
	{
		readc(op);
		if(op=='c')
		{
			root[++m]=root[pos];pos=m;
			readi(u),readi(v),readi(a),readi(b);
			u=(ans+u)%n+1,v=(ans+v)%n+1;
			addseq(root[pos],u,v,b,a-b);
		}
		if(op=='q')
		{
			readi(u),readi(v);
			u=(ans+u)%n+1,v=(ans+v)%n+1;
			writell(ans=getsum(root[pos],u,v)),putchar('\n');
		}
		if(op=='l')
		{
			readi(a);a=(ans+a)%(m+1);
			pos=a;
		}
	}
}

int main()
{
	init();
	work();
	return 0;
}

inline void readc(char &c)
{for(c=getchar();c<'a'||c>'z';c=getchar());}
inline void readi(int &x)
{char c;while(c=getchar(),c<'0'||c>'9');
x=c^'0';while(c=getchar(),c>='0'&&c<='9')x=x*10+(c^'0');}
void writell(const LL &x)
{if(x<10)putchar(x+'0');
else writell(x/10),putchar(x%10+'0');}
