#include <cstdio>
#include <vector>
using namespace std;
#define MAXN 110000
#define MAXL 30000000
typedef long long int64;
int n,m,i,a,b,x,y,len,Len,lroot,ll,now_time,sum_change,zhan[MAXN],to[MAXN],root[MAXL],last[MAXN],fa[MAXN],n1[MAXN],ss[MAXN],F[MAXN],h[MAXN],till[MAXN*2],next[MAXN*2],go[MAXN*2],l[MAXL],r[MAXL];
char k;
int64 sum[MAXL],covera[MAXL],coverb[MAXL],lastans;

void add(int x,int y)
{
	next[++ll]=till[x];
	till[x]=ll;
	go[ll]=y;
}

void Bfs()
{
	int q,hh,i,j,ma,p;
	for (n1[q=hh=1]=1,h[1]=1;q<=hh;q++)
		for (i=till[n1[q]];i;i=next[i])
			if (!h[go[i]])	fa[go[i]]=n1[q],h[go[i]]=h[n1[q]]+1,n1[++hh]=go[i];
	for (i=n;i;i--)	for (ss[n1[i]]=1,j=till[n1[i]];j;j=next[j])	ss[n1[i]]+=ss[go[j]];
	for (i=1;i<=n;i++)
	{
		if (!F[n1[i]])	F[n1[i]]=n1[i];
		for (ma=0,j=till[n1[i]];j;j=next[j])	if (go[j]!=fa[n1[i]]&&ss[ma]<ss[go[j]])	ma=go[j];
		if (ma)	F[ma]=F[n1[i]];
	}
	for (i=n;i;i--)	if (ss[i]==1)
	{
		for (ll=0,p=i;F[i]==F[p];p=fa[p])	zhan[++ll]=p;
		for (j=ll;j;j--)	to[zhan[j]]=++Len;
	}
}

int getl(int x,int y)
{
	int l=0;
	while (F[x]!=F[y])
	{
		if (h[F[x]]>h[F[y]])	l+=h[x]-h[F[x]]+1,x=fa[F[x]];
		else	l+=h[y]-h[F[y]]+1,y=fa[F[y]];
	}
	l+=max(h[x],h[y])-min(h[x],h[y])+1;
	return l;
}

int64 Z(int64 a,int64 b,int64 l)
{
	return a*l+b*l*(l+1)/2;
}

void modify(int &k,int k1,int q,int h,int L,int R,int64 a,int64 b)
{
	k=++len;
	covera[k]=covera[k1];
	coverb[k]=coverb[k1];
	if (q==L&&h==R)
	{
		covera[k]+=a;
		coverb[k]+=b;
		sum[k]=sum[k1];
		l[k]=l[k1];
		r[k]=r[k1];
	}
	else
	{
		int mid=(q+h)/2;
		if (R<=mid)
		{
			r[k]=r[k1];
			modify(l[k],l[k1],q,mid,L,R,a,b);
			sum[k]=sum[l[k]]+Z(covera[l[k]],coverb[l[k]],mid-q+1)+sum[r[k]]+Z(covera[r[k]],coverb[r[k]],h-mid);
		}
		else	if (mid<L)
		{
			l[k]=l[k1];
			modify(r[k],r[k1],mid+1,h,L,R,a,b);
			sum[k]=sum[l[k]]+Z(covera[l[k]],coverb[l[k]],mid-q+1)+sum[r[k]]+Z(covera[r[k]],coverb[r[k]],h-mid);
		}
		else
		{
			modify(l[k],l[k1],q,mid,L,mid,a,b);
			modify(r[k],r[k1],mid+1,h,mid+1,R,a+(mid-L+1)*b,b);
			sum[k]=sum[l[k]]+Z(covera[l[k]],coverb[l[k]],mid-q+1)+sum[r[k]]+Z(covera[r[k]],coverb[r[k]],h-mid);
		}
	}
}

void Change(int x,int y,int64 a,int64 b)
{
	int l=getl(x,y);
	while (F[x]!=F[y])
	{
		if (h[F[x]]>h[F[y]])
		{
			modify(root[++lroot],root[now_time],1,n,to[F[x]],to[x],a+1LL*(h[x]-h[F[x]]+2)*b,-b);
			now_time=lroot;
			a+=(h[x]-h[F[x]]+1)*b;
			l-=h[x]-h[F[x]]+1;
			x=fa[F[x]];
		}
		else
		{
			modify(root[++lroot],root[now_time],1,n,to[F[y]],to[y],a+1LL*(l-h[y]+h[F[y]]-1)*b,b);
			now_time=lroot;
			l-=h[y]-h[F[y]]+1;
			y=fa[F[y]];
		}
	}
	if (h[x]<h[y])	modify(root[++lroot],root[now_time],1,n,to[x],to[y],a,b);
	else	modify(root[++lroot],root[now_time],1,n,to[y],to[x],a+b*l+b,-b);
	now_time=lroot;
}

int64 gt(int k,int q,int h,int L,int R,int64 a,int64 b)
{
	if (q==L&&h==R)	return sum[k]+Z(covera[k]+a,coverb[k]+b,R-L+1);
	int mid=(q+h)/2;
	if (R<=mid)	return gt(l[k],q,mid,L,R,a+covera[k],b+coverb[k]);
	if (mid<L)	return gt(r[k],mid+1,h,L,R,a+covera[k]+1LL*(mid-q+1)*(b+coverb[k]),b+coverb[k]);
	return gt(l[k],q,mid,L,mid,a+covera[k],b+coverb[k])+gt(r[k],mid+1,h,mid+1,R,a+covera[k]+1LL*(mid-q+1)*(b+coverb[k]),b+coverb[k]);
}

int64 get_sum(int x,int y)
{
	int64 sum=0;
	while (F[x]!=F[y])
	{
		if (h[F[x]]>h[F[y]])	sum+=gt(root[now_time],1,n,to[F[x]],to[x],0,0),x=fa[F[x]];
		else	sum+=gt(root[now_time],1,n,to[F[y]],to[y],0,0),y=fa[F[y]];
	}
	sum+=gt(root[now_time],1,n,min(to[x],to[y]),max(to[x],to[y]),0,0);
	return sum;
}

int main()
{
	// freopen("b.in","r",stdin);
	// freopen("b.out","w",stdout);
	scanf("%d%d",&n,&m);
	for (i=1;i<n;i++)
	{
		scanf("%d%d",&a,&b);
		add(a,b);
		add(b,a);
	}
	Bfs();
	while (m--)
	{
		for (k=getchar();k<=32;k=getchar());
		if (k=='c')
		{
			scanf("%d%d%d%d",&x,&y,&a,&b);
			a-=b;
			x=(x+lastans)%n+1;
			y=(y+lastans)%n+1;
			Change(x,y,a,b);
			last[++sum_change]=lroot;
		}
		else
		if (k=='q')
		{
			scanf("%d%d",&x,&y);
			x=(x+lastans)%n+1;
			y=(y+lastans)%n+1;
			printf("%lld\n",lastans=get_sum(x,y));
		}
		else
		{
			scanf("%d",&x);
			now_time=last[(x+lastans)%(sum_change+1)];
		}
	}
}