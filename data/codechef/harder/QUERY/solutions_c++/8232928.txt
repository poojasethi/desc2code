#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<cstdio>
#include<iostream>
using namespace std;
typedef long long ll;
int n;
struct edge{int v,next;}e[2000005];int etot=0;int g[1000005];
void ae(int u,int v){e[etot].v=v;e[etot].next=g[u];g[u]=etot++;}
int qu[1000005],p,q,son[1000005],up[1000005],pre[1000005],sz[1000005],id[1000005],h[1000005],idtot=0;
void bfs(int rt){
	p=q=0;qu[q++]=rt;
	while(p!=q){
		int u=qu[p++];sz[u]=1;
		for (int i=g[u];~i;i=e[i].next)if(e[i].v!=pre[u]){
			qu[q++]=e[i].v;
			h[e[i].v]=h[u]+1;
			pre[e[i].v]=u;
		}
	}
	for (int i=q-1;i>=0;i--){
		sz[pre[qu[i]]]+=sz[qu[i]];
		if(sz[qu[i]]>sz[son[pre[qu[i]]]])son[pre[qu[i]]]=qu[i];
	}
	for (int i=q-1;i>=0;i--)if(!son[qu[i]]){
		int u=qu[i];while(pre[u] && son[pre[u]]==u)u=pre[u];
		int v=u;while(v){up[v]=u;id[v]=++idtot;v=son[v];}
	}
}
struct node{int lch,rch;ll s,a,d;}t[30000000];int ndtot;
inline ll sum(ll a,ll d,int sz){return a*sz+d*sz*(sz-1)/2;}
int l1,r1;ll a,d;
int upd(int x,int l,int r){
	int y=++ndtot;
	t[y]=t[x];
	if(l1<=l && r<=r1){
		t[y].a+=a+(l-l1)*d;
		t[y].d+=d;
	}else{
		int l2=max(l,l1),r2=min(r,r1);
		t[y].s+=sum(a+(l2-l1)*d,d,r2-l2+1);
		int mid=l+r>>1;
		if(r1>mid)t[y].rch=upd(t[x].rch,mid+1,r);
		if(l1<=mid)t[y].lch=upd(t[x].lch,l,mid);
	}
	return y;
}
ll que(int x,int l,int r){
	if(!x)return 0;
	if(l1<=l && r<=r1)return t[x].s+sum(t[x].a,t[x].d,r-l+1);
	else{
		int l2=max(l,l1),r2=min(r,r1);
		ll ret=sum(t[x].a+(l2-l)*t[x].d,t[x].d,r2-l2+1);
		int mid=l+r>>1;
		if(r1>mid)ret+=que(t[x].rch,mid+1,r);
		if(l1<=mid)ret+=que(t[x].lch,l,mid);
		return ret;
	}
}
int head[1000005]={0};int totsave=0,nowstate=0;
ll query(int x,int y){
	ll ans=0;
	while(up[x]!=up[y]){
		if(h[up[x]]>h[up[y]])swap(x,y);
		l1=id[up[y]],r1=id[y];
		ans+=que(head[nowstate],1,n);
		y=pre[up[y]];
	}
	if(h[x]>h[y])swap(x,y);
	l1=id[x],r1=id[y];
	return ans+que(head[nowstate],1,n);
}
int lca(int x,int y){
	while(up[x]!=up[y]){
		if(h[up[x]]>h[up[y]])swap(x,y);
		y=pre[up[y]];
	}if(h[x]>h[y])return y;
	else return x;
}
void modi(int x,int y,ll a,ll d){
	int l=lca(x,y),len=h[x]+h[y]-2*h[l]+1;
	int hd=head[nowstate];
	while(up[x]!=up[y]){
		if(h[up[x]]>h[up[y]]){
			swap(x,y);
			a+=(len-1)*d;
			d*=-1;
		}
		l1=id[up[y]],r1=id[y];
		::a=a+d*(len-h[y]+h[up[y]]-1);
		::d=d;
		hd=upd(hd,1,n);
		len-=(h[y]-h[up[y]]+1);
		y=pre[up[y]];
	}
	if(h[x]>h[y]){
		swap(x,y);
		a+=(len-1)*d;
		d*=-1;
	}
	::a=a;::d=d;
	l1=id[x],r1=id[y];
	hd=upd(hd,1,n);
	head[nowstate=++totsave]=hd;
}
void getn(ll &x){
	char c;while((c=getchar())<'0'||c>'9');x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
}
int main()
{
	int q;scanf("%d%d",&n,&q);
	memset(g,-1,sizeof(g));
	for (int i=1;i<n;++i){
		ll x,y;getn(x);getn(y);
		ae(x,y);ae(y,x);
	}
	bfs(1);
	ll lastans=0;
	while(q--){
		char c;while((c=getchar())!='c'&&c!='q'&&c!='l');
		if(c=='c'){
			ll x,y,a,d;getn(x);getn(y);getn(a);getn(d);
			x=(x+lastans)%n+1;
			y=(y+lastans)%n+1;
			modi(x,y,a,d);
		}else if(c=='q'){
			ll x,y;getn(x);getn(y);
			x=(x+lastans)%n+1;
			y=(y+lastans)%n+1;
			printf("%lld\n",lastans=query(x,y));
		}else{
			ll tmp;
			getn(tmp);
			tmp=(tmp+lastans)%(totsave+1);
			nowstate=tmp;
		}
	}
	return 0;
}
