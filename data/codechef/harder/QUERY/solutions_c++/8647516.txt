#include <stdio.h>
#include <stdlib.h>
using namespace std;

int n,m,i,j,k,u,v,lca,A,B,T,now,ll,rr;
int son[100005],next[200005],ed[200005],tot;
int size[100005],heavy[100005],fa[100005],head[100005],deep[100005],id[100005];
bool vis[100005];
long long ans;
char ch;

struct node
{
	int l,r;
	long long sum,A,B;
}t[40000005];
int root[100005];

void dfs(int x)
{
	vis[x]=true;
	size[x]=1;
	for(int i=son[x];i;i=next[i])
	if(!vis[ed[i]])
	{
		deep[ed[i]]=deep[x]+1;
		dfs(ed[i]);
		fa[ed[i]]=x;
		size[x]+=size[ed[i]];
		if(size[ed[i]]>size[heavy[x]])heavy[x]=ed[i];
	}
	vis[x]=false;
}

void dfs2(int x)
{
	vis[x]=true;
	id[x]=++tot;
	if(!head[x])head[x]=x;
	if(heavy[x])head[heavy[x]]=head[x],dfs2(heavy[x]);
	for(int i=son[x];i;i=next[i])if(!vis[ed[i]])dfs2(ed[i]);
}

int LCA(int u,int v)
{
	for(;head[u]!=head[v];)
	if(deep[head[u]]>deep[head[v]])u=fa[head[u]];
	else v=fa[head[v]];
	if(deep[u]<deep[v])return u;else return v;
}

void C(int &x,int l,int r)
{
	t[++tot]=t[x];x=tot;
	if(l>=ll&&r<=rr)
	{
		t[x].sum+=(A+A+(long long)(r-l)*B)*(r-l+1)/2;
		t[x].A+=A;t[x].B+=B;
		A+=(r-l+1)*B;
		return;
	}
	int mid=l+r>>1;
	if(rr<=mid)C(t[x].l,l,mid);
	else if(ll>mid)C(t[x].r,mid+1,r);
		else C(t[x].r,mid+1,r),C(t[x].l,l,mid);
	t[x].sum=t[t[x].l].sum+t[t[x].r].sum+(t[x].A+t[x].A+(r-l)*t[x].B)*(r-l+1)/2;
}

void Q(int &x,int l,int r,long long A,long long B)
{
	if(l>=ll&&r<=rr)
	{
		ans+=t[x].sum+(A+A+(r-l)*B)*(r-l+1)/2;
		return;
	}
	A+=t[x].A;B+=t[x].B;
	int mid=l+r>>1;
	if(rr<=mid)Q(t[x].l,l,mid,A+(r-mid)*B,B);
	else if(ll>mid)Q(t[x].r,mid+1,r,A,B);
		else Q(t[x].l,l,mid,A+(r-mid)*B,B),Q(t[x].r,mid+1,r,A,B);
}

int main()
{
	scanf("%d%d",&n,&m);
	for(i=1;i<n;++i)
	{
		scanf("%d%d",&u,&v);
		++tot;next[tot]=son[u];son[u]=tot;ed[tot]=v;
		++tot;next[tot]=son[v];son[v]=tot;ed[tot]=u;
	}
	dfs(1);tot=0;dfs2(1);
	for(tot=0;m;--m)
	{
		for(ch=getchar();ch!='c'&&ch!='q'&&ch!='l';ch=getchar());
		if(ch=='c')
		{
			scanf("%d%d%d%d",&u,&v,&A,&B);
			u=(u+ans)%n+1;v=(v+ans)%n+1;
			lca=LCA(u,v);
			root[++T]=root[now];now=T;
			for(;head[u]!=head[lca];u=fa[head[u]])
			{
				ll=id[head[u]];rr=id[u];
				C(root[now],1,n);
			}
			ll=id[lca];rr=id[u];
			C(root[now],1,n);
			A+=(long long)(deep[v]-deep[lca]-1)*B;B=-B;
			for(;head[v]!=head[lca];v=fa[head[v]])
			{
				ll=id[head[v]];rr=id[v];
				C(root[now],1,n);
			}
			ll=id[lca]+1;rr=id[v];
			if(ll<=rr)C(root[now],1,n);
		}
		if(ch=='q')
		{
			scanf("%d%d",&u,&v);
			u=(u+ans)%n+1;v=(v+ans)%n+1;ans=0;
			lca=LCA(u,v);
			for(;head[u]!=head[lca];u=fa[head[u]])
			{
				ll=id[head[u]];rr=id[u];
				Q(root[now],1,n,0,0);
			}
			ll=id[lca];rr=id[u];
			Q(root[now],1,n,0,0);
			for(;head[v]!=head[lca];v=fa[head[v]])
			{
				ll=id[head[v]];rr=id[v];
				Q(root[now],1,n,0,0);
			}
			ll=id[lca]+1;rr=id[v];
			if(ll<=rr)Q(root[now],1,n,0,0);
			printf("%lld\n",ans);
		}
		if(ch=='l')
		{
			scanf("%d",&k);
			now=(k+ans)%(T+1);
		}
	}
}