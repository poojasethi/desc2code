#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
//#include <iterator>
using namespace std;

#define REP0(i, n) for (int i = 0; i < n; i++)
#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define FORE(i, x) for (int i = fi[x]; i != -1; i = e[i].n)

#define MAX_N 100000
#define MAX_M 10000000
#define A first
#define B second
#define MP make_pair
#define MID int mid = (l + r) >> 1;
#define Left l, mid
#define Right mid + 1, r
#define oo 100000000000000LL

typedef long long m64;
typedef struct node* ntp;
ntp ta, rt;
struct node { ntp lc, rc; m64 k, b, sk, sb; } ua[MAX_M];
int n, m;

void add(ntp &v, int x, int y, m64 a, m64 b, int l = 1, int r = n)
{
	//puts("WRONF!");
	 if (!v) v = ++ta, v->k = 0, v->b = -1LL << 60;
	 if (x <= l && r <= y) { v->sk += a, v->sb += b; return ; } MID
 	 if (x <= mid) add(v->lc, x, y, a, b, Left);
	 if (y > mid) add(v->rc, x, y, a, b, Right);
}

void modify(ntp &v, int x, int y, m64 a, m64 b, int l = 1, int r = n)
{
	//  printf ("%d %d %d %d %I64d %I64d\n", l, r, x, y, a, b);
	 if (!v) v = ++ta, v->k = 0, v->b = -1LL << 60;
	 if (x <= l && r <= y)
	 {
		bool fl = v->k * l + v->b >= a * l + b, fr = v->k * r + v->b >= a * r + b;
	//	cout << v->k << ' ' << v->b << ' ' << a << ' ' << b << endl;
	//	printf ("-> %d %d\n", fl, fr);
		if (fl && fr) return ;
		if (!fl && !fr) { v->k = a, v->b = b; return ; }
		MID bool fm = v->k * mid + v->b >= a * mid + b;
		if (fl)
		{
		   if (fm) modify(v->rc, Right, a, b, Right);
		   else modify(v->lc, Left, v->k, v->b, Left), v->k = a, v->b = b;
		}
		else
		{
			if (fm) modify(v->lc, Left, a, b, Left);
			else modify(v->rc, Right, v->k, v->b, Right), v->k = a, v->b = b;
		}
		return ;
	 } MID
	 if (x <= mid) modify(v->lc, x, y, a, b, Left);
	 if (y > mid) modify(v->rc, x, y, a, b, Right);
	 
}

//void print(void)
int ids;
pair < m64, m64 > ans;
void query(ntp v, int x, int l = 1, int r = n)
{
	 if (!v) return ;
//	 cout << v- ua << ' '<<ids << ' ' << x << ' ' << v->k << ' ' << v->b << endl;
	//printf ("%d %d %d %I64d %I64d\n", l, r, x, v->k, v->b);
	 ans.A += v->sk * x + v->sb, ans.B = max(ans.B, v->k * x + v->b);
	 if (l == r) return ; MID
	 if (x <= mid) query(v->lc, x, Left); else query(v->rc, x, Right);
}

int main(void)
{
    ta = ua, scanf ("%d%d", &n, &m);
    REP1(i, m)
    {
		int k, a, b, c, d; scanf ("%d%d", &k, &a);
		if (k != 3) scanf ("%d%d%d", &b, &c, &d);
		if (k == 3)
		{ids++;
			ans = MP(0LL, -1LL << 60), query(rt, a);
		//cout << ans.A << ' ' << ans.B <<  endl;
			if (ans.B > (-1LL << 60)) printf ("%lld\n", ans.A + ans.B);
			else puts("NA");
		}
		else
		{
			//a--, b--;
			m64 dd = d - c * 1LL * a;
		//	cout << c << ' ' << dd << endl;
			if (k == 1) modify(rt, a, b, c, dd);
			else if (k == 2) add(rt, a, b, c, dd);
		}
	}
    return 0;
}
