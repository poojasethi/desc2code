#include <stdio.h>
#include <stdlib.h>
using namespace std;

int n,m,opt,ll,rr,aim,i,j,k;
long long a,b;
bool e;

struct node
{
	long long a,b,da,db;
	int l,r;bool e;
}t[20000005];
int root,tot;

void D(int &x,int l,int r,long long a,long long b)
{
	if(!x)x=++tot;
	if(!t[x].e)
	{
		t[x].a=a;t[x].b=b;
		t[x].e=true;
		return;
	}
	bool L=a>=t[x].a;
	bool R=a+(r-l)*b>=t[x].a+(r-l)*t[x].b;
	if(L&&R)
	{
		t[x].a=a;t[x].b=b;
		return;
	}
	if(!L&&!R)return;
	int mid=l+r>>1;
	if(L)
	{
		if((a+(mid-l)*b)>=(t[x].a+(mid-l)*t[x].b))
		{
			D(t[x].r,mid+1,r,t[x].a+(mid-l+1)*t[x].b,t[x].b);
			t[x].a=a;t[x].b=b;
		}else D(t[x].l,l,mid,a,b);
	}
	else
	{
		if((a+(mid-l)*b)>=(t[x].a+(mid-l)*t[x].b))
		{
			D(t[x].l,l,mid,t[x].a,t[x].b);
			t[x].a=a;t[x].b=b;
		}else D(t[x].r,mid+1,r,a+(mid-l+1)*b,b);
	}
}

void C(int &x,int l,int r)
{
	if(!x)x=++tot;
	if(l>=ll&&r<=rr)
	{
		D(x,l,r,a,b);
		a+=(r-l+1)*b;
		return;
	}
	int mid=l+r>>1;
	if(rr<=mid)C(t[x].l,l,mid);
	else if(ll>mid)C(t[x].r,mid+1,r);
		else C(t[x].l,l,mid),C(t[x].r,mid+1,r);
}

void A(int &x,int l,int r)
{
	if(!x)x=++tot;
	if(l>=ll&&r<=rr)
	{
		t[x].da+=a;t[x].db+=b;
		a+=(r-l+1)*b;
		return;
	}
	int mid=l+r>>1;
	if(rr<=mid)A(t[x].l,l,mid);
	else if(ll>mid)A(t[x].r,mid+1,r);
		else A(t[x].l,l,mid),A(t[x].r,mid+1,r);
}

void Q(int x,int l,int r)
{
	if(!x)return;
	if(t[x].e)
	{
		if(!e)e=true,a=t[x].a+(aim-l)*t[x].b;
		else
		{
			if(t[x].a+(aim-l)*t[x].b>a)
			a=t[x].a+(aim-l)*t[x].b;
		}
	}
	b+=t[x].da+(aim-l)*t[x].db;
	if(l==r)return;
	int mid=l+r>>1;
	if(aim<=mid)Q(t[x].l,l,mid);
	else Q(t[x].r,mid+1,r);
}

int main()
{
	scanf("%d%d",&n,&m);
	for(;m;--m)
	{
		scanf("%d",&opt);
		if(opt==1)
		{
			scanf("%d%d%lld%lld",&ll,&rr,&b,&a);
			C(root,1,n);
		}
		if(opt==2)
		{
			scanf("%d%d%lld%lld",&ll,&rr,&b,&a);
			A(root,1,n);
		}
		if(opt==3)
		{
			scanf("%d",&aim);
			e=false;a=b=0;
			Q(root,1,n);
			if(!e)printf("NA\n");
			else printf("%lld\n",a+b);
		}
	}
}