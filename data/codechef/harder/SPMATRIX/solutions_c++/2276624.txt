#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <queue>
#include <fstream>
#include <sstream>
#include <set>
#include <cmath>
#include <map>
#include <algorithm>
#include <iomanip>

using namespace std;

typedef long long int64 ;
typedef pair<int64, int> pint ;
typedef vector<int> vint ;
typedef pair<int64, pint> pedge ;

char printer [100000] ;
int64 TEMP ;

#define INF (1 << 30)
#define INF64 (1LL << 60)
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(x) ((x) > 0 ? (x) : -(x))
#define REP(i, n) for (int i = 0 ; i < (n) ; i ++)
#define FOR(i, s, n) for (int i = (s) ; i < (n) ; i ++)
#define MOD(val) ((val) == 0 ? 0 : ((val) % 9 == 0) ? 9 : (val) % 9)
#define ADD(reg, val) { reg += val ; if (reg >= modul) reg -= modul ; }
#define MUL64(val1, val2) (((int64) (val1)) * ((int64) (val2)))
#define MUL(val1, val2) ((TEMP = MUL64(val1, val2)) >= modul ? TEMP % modul : TEMP)
#define MIN4(x1, x2, x3, x4) MIN(MIN(x1, x2), MIN(x3, x4))
#define SET(v, val) memset(v, val, sizeof(v))

__inline int read_int() { char ch ; int ret = 0, sgn = 1 ; while (true) { ch = getchar_unlocked() ; if (ch == '-') sgn = -1 ; if ((ch >= '0' && ch <= '9')) break ; } while (ch >= '0' && ch <= '9') { ret = 10 * ret + (int) (ch - '0') ; ch = getchar_unlocked() ; } return ret * sgn ; }
__inline void read_string(char *buffer) { int id = 0 ; char ch ; while (true) { ch = getchar_unlocked() ; if (ch >= 33 && ch <= 125) break ; }  while (ch >= 33 && ch <= 125) { buffer [id ++] = ch ; ch = getchar_unlocked() ; } buffer [id] = 0 ; }
void print_int(int val) { int pos = 0 ; if (val == 0) printer [pos ++] = '0' ; else { while (val) { printer [pos ++] = '0' + val % 10 ; val /= 10 ; } } reverse(printer, printer + pos) ; printer [pos] = 0 ; puts(printer) ; }

#define MAXV 10000001
#define MAXT 100888

pint q [MAXT] ;
int n, modul = 1000000007, ans [MAXT] ;
int cs1, cs2, ns1, ns2, cS, nS, pF, cF, nF, tmp ;

int main() {
  srand(time(NULL)) ;

  int numTests = read_int() ;
  REP(test, numTests) {
    q [test].first = read_int() ; q [test].second = test ;
  }
  sort(q, q + numTests) ;
  pF = 0 ; cF = 1 ; cS = 0 ;
  cs1 = 0 ; cs2 = 0 ;
  int iq = 0 ;
  FOR(n, 2, 10000001) {
    ns1 = n - 1 ; ADD(ns1, cs1) ;
    ns2 = ((int64) (n - 2) * cs1 + cs2) % modul ;

    cS = ((int64) pF * ns2 + (int64) cS * ns1) % modul ;

    pF = cF ; cF = MUL(ns1, cF) ;
    cs1 = ns1 ; cs2 = ns2 ;
    while (iq < numTests && q [iq].first == n) ans [q [iq ++].second] = cS ;
    if (iq == numTests) break ;
  }

  REP(iq, numTests) print_int(ans [iq]) ;

  return 0;
}
