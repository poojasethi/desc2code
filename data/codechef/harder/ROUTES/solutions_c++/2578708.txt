#include<cmath>
#include<ctime>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
#include<algorithm>

#define MaxN 1000010

using namespace std;

struct Edge{
	int u,v;
}edg[MaxN];

int N,M,f[MaxN],ff[MaxN],head[MaxN],prep[MaxN],v[MaxN],m0,dep[MaxN],fa[MaxN][20],Que[MaxN],Qhead,Qtail;
long long cnt[MaxN],Ans,cnt1[MaxN];
bool vis[MaxN];

int find(int x){
	return f[x]==x?f[x]:f[x]=find(f[x]);
}

int find_f(int x){
	return ff[x]==x?ff[x]:ff[x]=find_f(ff[x]);
}

void AddEdge(int a,int b){
	++m0;v[m0]=b;prep[m0]=head[a];head[a]=m0;
}

void Init(){
	int i,j,x,y;
	scanf("%d%d",&N,&M);
	for(i=1;i<=N;++i) f[i]=i;
	for(i=1;i<=M;++i){
		scanf("%d%d",&edg[i].u,&edg[i].v);
		if((x=find(edg[i].u))!=(y=find(edg[i].v))){
			f[x]=y;
			AddEdge(edg[i].u,edg[i].v);
			AddEdge(edg[i].v,edg[i].u);
		}
	}
	for(i=1;i<=N;++i)
		if(find(i)==i){
			AddEdge(0,i);
			AddEdge(i,0);
		}
}

void PreWork(){
	int i,j;
	vis[0]=1;
	for(Que[Qhead=Qtail=1]=0;Qhead<=Qtail;++Qhead)
		for(i=head[Que[Qhead]];i;i=prep[i])
			if(!vis[v[i]]){
				vis[Que[++Qtail]=v[i]]=1;
				fa[v[i]][0]=Que[Qhead];
				dep[v[i]]=dep[Que[Qhead]]+1;
			}
	for(i=1;i<=19;++i)
		for(j=1;j<=N;++j)
			fa[j][i]=fa[fa[j][i-1]][i-1];
}

void Delete(int l){
	f[l]=fa[l][0];
}

int LCA(int l,int r){
	if(dep[l]<dep[r]) swap(l,r);
	int d=dep[l]-dep[r],i;
	for(i=0;d;d>>=1,++i)
		if(d&1)
			l=fa[l][i];
	if(l==r)
		return l;
	for(i=19;i>=0;--i)
		if(fa[l][i]!=fa[r][i]){
			l=fa[l][i];r=fa[r][i];
		}
	return fa[l][0];
}

void Solve(){
	int x,y,i,j;
	for(i=1;i<=N;++i){
		f[i]=ff[i]=i;
		cnt[i]=cnt1[i]=1;
	}
	for(i=1;i<=M;++i){
		if((x=find_f(edg[i].u))!=(y=find_f(edg[i].v))){
			Ans+=cnt[x]*cnt[y];
			cnt[y]+=cnt[x];
			ff[x]=y;
		}
		else{
			long long nowtot=0;
			int l=find(edg[i].u),r=find(edg[i].v),dd;
			if(dep[l]<dep[r]) swap(l,r);
			int L=find(LCA(l,r));
			for(;l!=L;){
				Ans-=cnt1[l]*nowtot;
				nowtot+=cnt1[l];
				Delete(l);l=find(l);
			}
			for(;r!=L;){
				Ans-=cnt1[r]*nowtot;
				nowtot+=cnt1[r];
				Delete(r);r=find(r);
			}
			Ans-=cnt1[l]*nowtot;
			cnt1[l]+=nowtot;
		}
		printf("%lld\n",Ans);
	}
}

int main(){
	Init();
	PreWork();
	Solve();
	return 0;
}
