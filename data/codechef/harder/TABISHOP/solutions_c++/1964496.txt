#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<Int,Int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define MAX 20

Int X[1 << 18];
Int Y[1 << 18];
int Z[1 << 18];
int RMQ[2 << MAX];
int I[MAX + 1];

void Add(int a, int b)
{
	int i;
	FOR(i, 0, MAX)
		RMQ[ I[i] + (a >> i) ] += b;
}

int Sum(int a, int b)
{
	int res = 0;
	int i;
	FOR(i, 0, MAX)
		if(a != b)
		{
			if((a & 1) != 0)
			{
				res += RMQ[ I[i] + a ];
				++a;
			}

			if((b & 1) != 0)
			{
				--b;
				res += RMQ[ I[i] + b ];
			}

			a >>= 1;
			b >>= 1;
		}

	return res;
}

Int F(int n, int m)
{
	int i;
	vector< pair<PII, int> > vp, vn, v;
	FOR(i, 0, n)
	{
		Int p = X[i] + Y[i];
		Int n = X[i] - Y[i];

		vp.PB(MP(PII(p, n), Z[i]));
		vn.PB(MP(PII(n, p), Z[i]));
	}

	sort(ALL(vp));
	sort(ALL(vn));

	Int res = 0;
	FOR(i, 0, n)
	{
		Int p = vp[i].first.first;
		int z = vp[i].second;
		if(i == 0 || p != vp[i - 1].first.first)
		{
			Int n = max(-p, p - m - m + 2);
			Int nn = vp[i].first.second;
			if(z == 0 && n < nn)
			{
				v.PB(MP(PII(n, p), 1));
				v.PB(MP(PII(nn, p), -1));
				res += (nn - n)/2; 
			}
		}
		else if(z == 0 || vp[i - 1].second == 0)
		{
			Int n = vp[i - 1].first.second;
			Int nn = vp[i].first.second;
			if(vp[i - 1].second != 0)
				n += 2;

			if(n < nn)
			{
				v.PB(MP(PII(n, p), 1));
				v.PB(MP(PII(nn, p), -1));
				res += (nn - n)/2; 
			}
		}

		if(i == n - 1 || p != vp[i + 1].first.first)
		{
			Int n = vp[i].first.second;
			Int nn = min(m + m - p, p + 2);
			if(z == 0 && n < nn)
			{
				v.PB(MP(PII(n, p), 1));
				v.PB(MP(PII(nn, p), -1));
				res += (nn - n)/2; 
			}
		}
	}

	vector<Int> w;
	FOR(i, 0, SIZE(v))
		w.PB(v[i].first.second);

	sort(ALL(w));
	w.resize(unique(ALL(w)) - w.begin());

	CLEAR(RMQ, 0);
	I[0] = 0;
	FOR(i, 0, MAX)
		I[i + 1] = I[i] + (1 << (MAX - i));

	sort(ALL(v));
	int pos = 0;
	FOR(i, 0, n)
	{
		Int p = vn[i].first.first;
		int z = vn[i].second;

		while(pos < SIZE(v) && v[pos].first.first <= p)
		{
			int a = lower_bound(ALL(w), v[pos].first.second) - w.begin();
			Add(a, v[pos].second);
			++pos;
		}

		if(i == 0 || p != vn[i - 1].first.first)
		{
			Int n = max(-p, p);
			Int nn = vn[i].first.second;
			if(z == 0)
			{
				res += (nn - n)/2;
				int a = lower_bound(ALL(w), n) - w.begin();
				int b = lower_bound(ALL(w), nn) - w.begin();
				res -= Sum(a, b);
			}
		}
		else if(z == 0 || vn[i - 1].second == 0)
		{
			Int n = vn[i - 1].first.second;
			Int nn = vn[i].first.second;
			if(vn[i - 1].second != 0)
				n += 2;

			res += (nn - n)/2;
			int a = lower_bound(ALL(w), n) - w.begin();
			int b = lower_bound(ALL(w), nn) - w.begin();
			res -= Sum(a, b);
		}

		if(i == n - 1 || p != vn[i + 1].first.first)
		{
			Int n = vn[i].first.second;
			Int nn = min(m + m - p, m + m + p);
			if(z == 0)
			{
				res += (nn - n)/2;
				int a = lower_bound(ALL(w), n) - w.begin();
				int b = lower_bound(ALL(w), nn) - w.begin();
				res -= Sum(a, b);
			}
		}
 	}

	return res;
}

int SolveTest(int test)
{
	int n, k, m;
	scanf("%d%d%d", &n, &k, &m);
	int i, j;
	vector< pair<PII, int> > v[2];
	FOR(i, 0, k + m)
	{
		int x, y;
		scanf("%d%d", &x, &y);
		--x;
		--y;
		int z = i < k ? 0 : 1;
		v[(x + y) & 1].PB(MP(PII(x, y), z));
	}

	Int res = 0;
	FOR(i, 0, 2)
	{
		int cnt = SIZE(v[i]);
		FOR(j, 0, cnt)
		{
			X[j] = v[i][j].first.first;
			Y[j] = v[i][j].first.second;
			Z[j] = v[i][j].second;
		}

		res += F(cnt, n);
	}

	printf("%lld\n", res);
	return 0;
}

int main()
{
//	freopen("", "r", stdin);
//	freopen("", "w", stdout);

	int T, t;
	char buf[1 << 7];
//	gets(buf);
	buf[0] = '1';
	buf[1] = 0;
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};
