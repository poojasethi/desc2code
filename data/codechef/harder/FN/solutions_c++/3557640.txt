#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<ctime>
#define maxn 50000
using namespace std;
typedef long long LL;
LL power(LL p,LL n,LL mod)
{
	LL ans=1;
	for(;n;n>>=1,p=p*p%mod)
		if(n&1)
			ans=ans*p%mod;
	return ans;
}
struct Digit
{
	LL a,b,w;
};
Digit mul(const Digit &a,const Digit &b,LL mod)
{
	Digit c;
	c.a=(a.a*b.a+a.b*b.b%mod*b.w)%mod;
	c.b=(a.b*b.a+a.a*b.b)%mod;
	c.w=a.w;
	return c;
}
LL power(LL a,LL w,LL n,LL mod)
{
	Digit ans,p;
	ans.a=1,ans.b=0,ans.w=w;
	p.a=a,p.b=1,p.w=w;
	for(;n;n>>=1,p=mul(p,p,mod))
		if(n&1)
			ans=mul(ans,p,mod);
	return ans.a;
}
LL Anti(LL p,LL mod)
{
	return power(p,mod-2,mod);
}
LL sqrt(LL n,LL p)
{
	if(n==0)
		return 0;
	LL a,w;
	for(a=1;;++a)
	{
		w=(a*a-n+p)%p;
		if(power(w,(p-1)/2,p)==p-1)
			break;
	}
	return power(a,w,(p+1)/2,p);
}
LL Log(LL x,LL a,LL p)
{
	static pair<int,int> sol[maxn];
	int limit=sqrt(p);
	LL now=1;
	for(int i=0;i<=limit;++i)
	{
		sol[i]=make_pair(now,i);
		now=now*x%p;
	}
	LL anti=Anti(sol[limit].first,p);
	sort(sol,sol+limit+1);
	for(int i=0;i<=limit+5;++i)
	{
		pair<int,int> q=make_pair(a,-1);
		int id=lower_bound(sol,sol+limit+1,q)-sol;
		if(sol[id].first==a)
			return i*limit+sol[id].second;
		a=a*anti%p;
	}
	return 2000000000;
}
LL solve(LL p,LL c)
{
	if(c==0)
		return 0;
	LL x=sqrt(5,p),y=(1+x)*Anti(2,p)%p;
	c=c*x%p;
	LL ans1,ans2,delta;
	// n is odd
	delta=(c*c-4+p)%p;
	if(power(delta,(p-1)/2,p)==p-1)
		ans1=4000000000;
	else
	{
		delta=sqrt(delta,p);
		LL x1=(c+delta)*Anti(2,p)%p,x2=(c-delta+p)*Anti(2,p)%p;
		x1=x1*Anti(y,p)%p,x2=x2*Anti(y,p)%p;
		ans1=min(Log(y*y%p,x1,p)*2+1,Log(y*y%p,x2,p)*2+1);
	}
	//n is even
	delta=(c*c+4)%p;
	if(power(delta,(p-1)/2,p)==p-1)
		ans2=4000000000;
	else
	{
		delta=sqrt(delta,p);
		LL x1=(c+delta)*Anti(2,p)%p,x2=(c-delta+p)*Anti(2,p)%p;
		ans2=min(Log(y*y%p,x1,p)*2,Log(y*y%p,x2,p)*2);
	}
	LL ans=min(ans1,ans2);
	return ans>2000000000?-1:ans;
}
int main()
{
	LL p,c;
	int i,t;
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
		scanf("%lld%lld",&c,&p);
		printf("%lld\n",solve(p,c));
	}
	return 0;
}
