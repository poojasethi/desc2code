#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#include <tr1/unordered_map>
using namespace std;
typedef unsigned long long u64;
const int inf=999999999+208,L=44722;
int T,c,p,g,e,e2,inv2,ans;
tr1::unordered_map <int,int> mp[2];

int Pow(int a,int x,int mod) {
	int ret=1;
	for (;x;x>>=1,a=u64(a)*a%mod)
		if (x&1) ret=u64(ret)*a%mod;
	return ret;
}

int GetSquareRoot(int a,int p) {//Tonelli-Shanks algorithm
	if (!a) return 0;
	if (Pow(a,(p-1)/2,p)!=1) return -1;
	int Q=p-1,S=0,z;
	while ((Q&1)==0) Q>>=1,S++;
	for (z=1;Pow(z,(p-1)/2,p)!=p-1;z++);
	int c=Pow(z,Q,p),R=Pow(a,(Q+1)/2,p),t=Pow(a,Q,p),M=S;
	while (t!=1) {
		int i=1;
		while (Pow(t,1<<i,p)!=1) i++;
		int b=Pow(c,1<<(M-i-1),p);
		R=u64(R)*b%p;
		c=u64(b)*b%p;
		t=u64(t)*c%p;
		M=i;
	}
	return R;
}

bool check(int p) {
	for (int i=2;i*i<=p;i++)
		if (p%i==0)
			return false;
	return true;
}

void update(int x,int typ) {
	for (int i=0;i<=2000000000;i+=L,x=u64(x)*e2%p) {
		if (mp[typ].find(x)!=mp[typ].end()) {
			int tmp=i+mp[typ][x];
			if (ans==-1||ans>tmp) ans=tmp;
		}
	}
}

int main() {
	for (cin>>T;T;T--) {
		cin>>c>>p;
		ans=-1;
		g=GetSquareRoot(5,p);
		c=u64(c)*g%p;
		inv2=(p+1)/2;
		e=u64(g+1)*inv2%p;
		e2=Pow(Pow(e,p-2,p),L,p);
		mp[0].clear();
		mp[1].clear();
		for (int i=0,t=1;i<L;i++,t=u64(t)*e%p)
			if (mp[i&1].find(t)==mp[i&1].end())
				mp[i&1][t]=i;
		int tmp;
		tmp=GetSquareRoot((u64(c)*c+p-4)%p,p);
		if (tmp!=-1) {
			update((u64(c)+tmp)*inv2%p,1);
			update((u64(c)+p-tmp)*inv2%p,1);
		}
		tmp=GetSquareRoot((u64(c)*c+4)%p,p);
		if (tmp!=-1) {
			update((u64(c)+tmp)*inv2%p,0);
			update((u64(c)+p-tmp)*inv2%p,0);
		}
		cout<<ans<<endl;
	}
	return 0;
}
