#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	50005
#define I64	long long
#define For(i,a,b)	for(int i=a;i<=b;i++)

I64		T,C,P,G;

I64		Pow(I64 a,I64 b){
		I64 ret=1;
		for	(;b;b>>=1,a=1ll*a*a%P)
			if	(b&1)	ret=1ll*ret*a%P;
		return	ret;
}

namespace	Root{
		I64		A[n];

		void	Main(I64 P){
			for	(I64 i=2;i*i<=P-1;i++)
				if	((P-1)%i==0)	A[++*A]=i,A[++*A]=(P-1)/i;
			for	(G=2;;G++){
				int flag=1;
				For(i,1,*A)	if	(Pow(G,A[i])==1)	{flag=0;break;}
				if	(flag)	break;
			}	*A=0;
		}
};

namespace	Hash{
		#define mo	10007
		I64		D,A[n],B[n],st[mo],Next[n];

		void	Main()	{
			For(i,1,D)	st[A[i]%mo]=0,A[i]=B[i]=Next[i]=0;	D=0;
		}
		void	INS(I64 x,I64 y){
			A[++D]=x;	B[D]=y;	Next[D]=st[x%mo];	st[x%mo]=D;
		}
		I64		Find(I64 x,int f)	{
			I64	Ans=-1;
			for	(I64 i=st[x%mo];i;i=Next[i])
				if	(A[i]==x&&B[i]%2==f)	Ans=B[i];
			return	Ans;
		}
};

namespace	BSGS{
		I64		G,S,V;

		void	Main(I64 T)	{
			for	(S=1;S*S<=P;S++);	G=T;V=Pow(Pow(G,S),P-2);
			for	(I64 i=0,x=1;i<S;i++,x=1ll*x*G%P)	Hash::INS(x,i);
		}
		I64		Find(I64 x,int f){
			for	(I64 i=0,t;i<P;i+=S,x=1ll*x*V%P)
				if	((t=Hash::Find(x,i&1^f))!=-1)	return	i+t;
			return	-1;
		}
};

int		main(){
//		freopen("FN.in","r",stdin);
//		freopen("FN.out","w",stdout);

		scanf("%lld",&T);
		for	(;T--;)	{
			scanf("%lld%lld",&C,&P);
			if	(C==0)	{puts("0");continue;}
			Root::Main(P);	Hash::Main();	BSGS::Main(G);

			I64	sqrt5=Pow(G,BSGS::Find(5,0)/2);	C=1ll*C*sqrt5%P;
			I64	d1=BSGS::Find((1ll*C*C+4)%P,0),d2=BSGS::Find((1ll*C*C+P-4)%P,0);

			if	((d1==-1&&(1ll*C*C+4)%P)&&(d2==-1&&(1ll*C*C-4)%P))	{puts("-1");continue;}
			I64	A=1ll*(1+sqrt5)*Pow(2,P-2)%P,Ans=1ll<<60;
			Hash::Main();	BSGS::Main(A);

			if	(d1!=-1||(1ll*C*C+4)%P==0)	{
				d1=(d1!=-1?Pow(G,d1/2):0);
				I64	x=BSGS::Find(1ll*(C+d1)*Pow(2,P-2)%P,0);
				I64	y=BSGS::Find(1ll*(C+P-d1)*Pow(2,P-2)%P,0);
				if	(x!=-1)	Ans=min(Ans,x);
				if	(y!=-1)	Ans=min(Ans,y);
			}
			if	(d2!=-1||(1ll*C*C-4)%P==0)	{
				d2=(d2!=-1?Pow(G,d2/2):0);
				I64	x=BSGS::Find(1ll*(C+d2)*Pow(2,P-2)%P,1);
				I64	y=BSGS::Find(1ll*(C+P-d2)*Pow(2,P-2)%P,1);
				if	(x!=-1)	Ans=min(Ans,x);
				if	(y!=-1)	Ans=min(Ans,y);
			}

			printf("%lld\n",(Ans==1ll<<60)?-1:Ans);
		}
}