#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <algorithm>
using namespace std;

long long last_y;

long long Power(long long a,int b,long long p)
{
	long long ans=1;
	while(b)
	{
		if(b%2)ans=(ans*a)%p;
		a=(a*a)%p;
        b/=2;
	}
	return ans;
}

#define Hash 100007
int hash[Hash+1],hash_clear[Hash+1],hash_next[Hash+1],hash_tot,hash_num[Hash+1];

pair<long long,long long> BSGS(long long y,long long z,long long p)
{
	//y^x==z(mod p)
	if(y%p==0)return make_pair(-1,-1);
	long long res,sa,now,tmp,sq=(long long)(sqrt(p));
	int i,ha;
	if(last_y!=y)
	{
		for(i=1;i<=hash_tot;++i)hash[hash_clear[i]]=0;
		hash_tot=0;tmp=1;
		for(i=0;i<=sq;++i)
		{
			++hash_tot;
			hash_next[hash_tot]=hash[tmp%Hash];
			hash[tmp%Hash]=hash_tot;
			hash_num[hash_tot]=tmp;
			hash_clear[hash_tot]=tmp%Hash;
			tmp=tmp*y%p;
		}
		last_y=y;
	}
	tmp=p/sq;now=1;sa=Power(Power(y,sq,p),p-2,p);
	long long ans1=-1,ans2=-1;
	for(i=0;i<=tmp;++i)
	{
		res=now*z%p;
		now=now*sa%p;
		for(ha=hash[res%Hash];ha;ha=hash_next[ha])
		if(hash_num[ha]==res)
		{
			int k=i*sq+ha-1;
			if(k&1)
			{
				if(ans1==-1||k<ans1)ans1=k;
			}
			else
			{
				if(ans2==-1||k<ans2)ans2=k;
			}
		}
		if(ans1!=-1&&ans2!=-1)break;
	}
	return make_pair(ans1,ans2);
}

struct Primitive_root
{
	#define size 100
	
	int pri[size],tot;
	
	int Power(int a,int b,int p)
	{
		int ans=1;
		for(;b;a=(long long)a*a%p,b>>=1)if(b&1)ans=(long long)ans*a%p;
		return ans;
	}
	int calc(int p)
	{
		int i,j=p-1,g;tot=0;
		for(i=2;i*i<=j;++i)
		if(j%i==0)
		{
			pri[++tot]=i;
			for(;j%i==0;j/=i);
		}
		if(j!=1)pri[++tot]=j;
		for(g=2;;++g)
		{
			for(i=1;i<=tot;++i)
			if(Power(g,(p-1)/pri[i],p)==1)
			break;
			if(i>tot)return g;
		}
	}
	
	#undef size
}Prime_root;

int T,g,i,j,k;
long long C,p,sq5,a,b,c,ans1,ans2;
pair<long long,long long> ind;
int fib[1000005];

int main()
{
	scanf("%d",&T);
	for(;T;--T)
	{
		scanf("%lld%lld",&C,&p);
		if(C==0){printf("0\n");continue;}
		last_y=-1;
		g=Prime_root.calc(p);
		ind=BSGS(g,5,p);
		sq5=Power(g,ind.second/2,p);
		a=(sq5+1)*Power(2,p-2,p)%p;
		C=C*sq5%p;
		
		ans1=ans2=-1;
		//odd a^n+a^-n=C
		b=(C*C%p+p-4)%p;
		ind=BSGS(g,b,p);
		if(ind.first==-1)
		{
			if(ind.second!=-1)c=Power(g,ind.second/2,p);else c=0;
			b=(C+c)*Power(2,p-2,p)%p;
			ind=BSGS(a,b,p);
			ans1=ind.first;
			b=(C+p-c)*Power(2,p-2,p)%p;
			ind=BSGS(a,b,p);
			if(ind.first!=-1)
			{
				if(ans1==-1||ind.first<ans1)
				ans1=ind.first;
			}
		}
		//even a^n-a^-n=C
		b=(C*C%p+4)%p;
		ind=BSGS(g,b,p);
		if(ind.first==-1)
		{
			if(ind.second!=-1)c=Power(g,ind.second/2,p);else c=0;
			b=(C+c)*Power(2,p-2,p)%p;
			ind=BSGS(a,b,p);
			ans2=ind.second;
			b=(C+p-c)*Power(2,p-2,p)%p;
			ind=BSGS(a,b,p);
			if(ind.second!=-1)
			{
				if(ans2==-1||ind.second<ans2)
				ans2=ind.second;
			}
		}
		if(ans1==-1)printf("%lld\n",ans2);
		else if(ans2==-1)printf("%lld\n",ans1);
			else printf("%lld\n",min(ans1,ans2));
	}
}