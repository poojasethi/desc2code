#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
 
using namespace std;
 
#define a HELLO_VECTOR
 
#define FILENAME ""
#define INPUT_FILE FILENAME "in"
#define OUTPUT_FILE FILENAME "out"
 
const int md = 1000000007;
 
inline void add(int &a, int b) {
  a += b;
  if (a >= md) {
    a -= md;
  }
}
 
inline int mul(int a, int b) {
  return (long long)a * b % md;
}
 
int f[123][13][13][13];
char s[123];
 
int main() {
  scanf("%s", s);
  int n = strlen(s);
  for (int i = 0; i < n; i++) {
    s[i] -= '0';
  }
  int ans = 0;
  for (int dig = 0; dig <= 9; dig++) {
    memset(f, 0, sizeof(f));
    f[0][0][0][1] = 1;
    for (int i = 0; i < n; i++) {
      for (int zero = 0; zero <= 2; zero++) {
        for (int diff = 0; diff < 10; diff++) {
          for (int eq = 0; eq <= 1; eq++) {
            int ft = f[i][zero][diff][eq];
            if (ft == 0) {
              continue;
            }
            for (int dL = 0; dL <= 9; dL++) {
              for (int dR = 0; dR <= 9; dR++) {
                if (eq == 1 && dR > s[i]) {
                  continue;
                }
                int neq = eq;
                if (dR != s[i]) {
                  neq = 0;
                }
                int ndiff = diff * 10 + dR - dL;
                if (ndiff < 0 || ndiff >= 10) {
                  continue;
                }
                int nzero = zero;
                if (dL > 0) {
                  nzero = 2;
                } else {
                  if (dR > 0 && nzero == 0) {
                    nzero = 1;
                  }
                }
                if (nzero >= 1 && dR == dig) {
                  continue;
                }
                if (nzero >= 2 && dL == dig) {
                  continue;
                }
                if (dL < dig && dig < dR) {
                  continue;
                }
                if (dL > dR) {
                  if (dig > dL || dig < dR) {
                    continue;
                  }
                }
                if (i == n - 1) {
                  if (nzero == 2) {
                    add(ans, ft);
                  }
                } else {
                  add(f[i + 1][nzero][ndiff][neq], ft);
                }
              }
            }
          }
        }
      }
    }
  }
  int result = 0;
  for (int i = 0; i < n; i++) {
    result = mul(result, 10);
    add(result, s[i]);
  }
  result = mul(result, result + 1);
  result = mul(result, 5);
  add(result, md - ans);
  printf("%d\n", result);
  return 0;
}
