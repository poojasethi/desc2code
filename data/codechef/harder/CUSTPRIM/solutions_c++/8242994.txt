#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef long long ll;
typedef double db;
inline LL Pow(LL a,LL b,LL P){
	a%=P;if(a<0)a+=P;LL c=1;
	for(;b;b>>=1,a=a*1ll*a%P)if(b&1)c=c*1ll*a%P;
	return c;
}
inline ll qprod(ll a,ll b,ll c){
    ll ans=0;
    for (a%=c;b;b>>=1){
        if (b&1) if ((ans+=a)>=c) ans-=c;
        if ((a+=a)>=c) a-=c;
    }
    return ans;
}
const int pr[]={2,3,5,7,11,13,17,19,23,29};
inline ll qpow(ll a,ll b,ll c){
    ll ans=1;
    for (a%=c;b;b>>=1,a=qprod(a,a,c))
        if (b&1) ans=qprod(ans,a,c);
    return ans;
}
inline bool witness(LL a,LL n){
    LL t=n-1;
    while (!(t&1)) t>>=1;
    LL x0,x1=qpow(a,t,n);
    while (t!=n-1){
        x0=x1;
        x1=qprod(x0,x0,n);
        if (x1==1 && x0!=1 && x0!=n-1) return true;
        t<<=1;
    }
    return x1!=1;
}
 
inline bool miller_rabin(LL n){
    if (n==2) return true;
    if (n<2 || n>2 && !(n&1)) return false;
    rep(i,0,9){
        if (n<=pr[i]) return true;
        if (witness(pr[i],n)) return false;
    }
    return true;
}
bool ck(int A,int B){
	if(B==0){
		return (abs(A)==2)||(miller_rabin(abs(A))&&Pow(-11,(abs(A)-1)/2,abs(A))==abs(A)-1);
	}
	else{
		return miller_rabin(A*1ll*A+A*1ll*B+3*1ll*B*B);
	}
}
int main(){
	int T;scanf("%d",&T);
	while(T--){
		int a,b,c;scanf("%d%d%d",&a,&b,&c);
		int A=33-2*a-c;
		int B=b-a;
		if(ck(A,B))printf("PRIME\n");
		else printf("NOT PRIME\n");
	}
	return 0;
}

