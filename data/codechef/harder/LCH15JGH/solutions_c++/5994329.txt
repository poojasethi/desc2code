#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>

using namespace std;

typedef long long lli;

int ct[100010];

int N;

lli tree[100010];

int mxn = 100000;

void upd(int x, lli val){
	while(x <= mxn){
		tree[x] += val;
		x += (x&-x);
	}
}

lli read(int x){
	if(x <= 0) return 0;
	lli sol = 0;
	while(x){
		sol +=tree[x];
		x -= (x&-x);
	}

	return sol;
}

lli query(int i, int j){
	if(i > j) return 0;
	return  read(j)-read(i-1);
}

int M;

int main(){

	lli tot = 0;
	int i;

	scanf("%d",&N);

	char c;
	int x,y;

	for(i =0; i < N; ++i){
		scanf("%d",&x);
		scanf("%d",&ct[x]);

		tot += ct[x];
		upd(x,1LL*ct[x]*x);

	}


	int y2;
	scanf("%d",&M);
	lli sol = 0;
	while(M--){

		scanf(" %c %d",&c,&x);

		if(c^'?'){
			if(c == '+'){
				tot += 1;
				ct[x]++;
				upd(x,x);
			}else{
				tot -= 1;
				ct[x]--;
				upd(x,-x);
			}
			continue;
		}

		y=x;
		sol = 0;
		for(i = 1; i*i <= y; ++i){
			sol += 1LL*ct[i]*i*(y/i);
		}

		x =i;
		for(y2 = y/i; y2 > 0; --y2){
			i = y/y2;
			sol += query(x,i)*1LL*y2;

			x=i+1;

		}

		sol = (1LL*tot*y)-sol;
		printf("%lld\n",sol);
	}

	return 0;
}
