#include <bits/stdc++.h>
 
#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)
 
#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif
 
using namespace std;
 
template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
 
typedef long long ll;
typedef pair<int, int> ii;
 
const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;
 
inline int read(){int x;scanf(" %d",&x);return x;}
 
const int N = int(1e5) + 100;
const int BLOCK = 800;
 
int c[N];
ll f[N + 10];
ll sx[N + 10], s[N + 10];
 
void rebuild(){
    memset(sx, 0, sizeof sx);
    memset(s, 0, sizeof s);
    for(int d = 2; d < N; d++){
        if(!c[d]) continue;
        for(int l = 0; l < N; l += d){
            int r = min(N - 1, l + d - 1);
            s[l] += (ll)l * c[d];
            s[r + 1] -= (ll)l * c[d];
            sx[l] += c[d];
            sx[r + 1] -= c[d];
        }
    }
    for(int i = 1; i < N; i++){
        sx[i] += sx[i - 1];
        s[i] += s[i - 1];
        f[i] = sx[i] * i - s[i];
    }
}
 
int main(){
 
#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif
 
    int n = read();
 
    for(int i = 0; i < n; i++){
        int x = read();
        int cnt = read();
        c[x] += cnt;
    }
 
    int m = read();
 
    rebuild();
 
    vector<int> qs;
    for(int i = 0; i < m; i++){
        char op;
        scanf(" %c", &op);
        int x = read();
        if(op == '+'){
            qs.push_back(x);
        }else if(op == '-'){
            qs.push_back(-x);
        }else{
            ll ans = f[x];
            foreach(it, qs){
                int v = *it;
                if(v < 0){
                    ans -= x % (-v);
                }else{
                    ans += x % v;
                }
            }
            printf("%lld\n", ans);
        }
        if(qs.size() > BLOCK){
            foreach(it, qs){
                int x = *it;
                if(x > 0)
                    c[x]++;
                else
                    c[-x]--;
            }
            rebuild();
            qs.clear();
        }
    }
 
    return 0;
}
 