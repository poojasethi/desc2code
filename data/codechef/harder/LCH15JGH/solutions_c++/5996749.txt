#include <bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long
#define si(a) scanf("%d", &a)
#define sl(a) scanf("%lld", &a)
#define sd(a) scanf("%lf", &a)
#define sii(a, b) scanf("%d%d", &a, &b)
#define sll(a, b) scanf("%lld%lld", &a, &b)
#define sdd(a, b) scanf("%lf%lf", &a, &b)
#define siii(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define slll(a, b, c) scanf("%lld%lld%lld", &a, &b, &c)
#define sddd(a, b, c) scanf("%lf%lf%lf", &a, &b, &c)

#define MAX 100005
Long tree[2][MAX+5];

Long read(int idx, int id)
{
   Long ret = 0;
   while(id > 0) {
      ret += tree[idx][id];
      id -= (id & -id);
   }
   return ret;
}

void update(int idx, int id, Long val)
{
   while(id <= MAX) {
      tree[idx][id] += val;
      id += (id & -id);
   }
}

Long Query(int val)
{
   Long ret = (read(0, MAX)-read(0, val)) * val;
   int hi = val;
   while(hi > 0) {
      int give = val / hi;
      int lo = val/(give+1);
      Long fam = read(0, hi)-read(0, lo);
      Long people = read(1, hi)-read(1, lo);
      ret += (fam*val-people*give);
      hi = lo;
   }
   return ret;
}

int main_()
{
   int N, M;
   cin >> N;
   REP(i, N) {
      int u, v;
      cin >> u >> v;
      update(0, u, v);
      update(1, u, (Long)u*v);
   }
   cin >> M;
   while(M--) {
      char op;
      int v;
      cin >> op >> v;
      if(op == '+') update(0, v , 1), update(1, v, v);
      else if(op == '-') update(0, v , -1), update(1, v, -v);
      else cout << Query(v) << endl;
   }
}

int main()
{
   ios_base::sync_with_stdio(0); cin.tie(0);
   int t = 1;
   //cin >> t;

   while(t--) main_();

   return 0;
}
/*
10
0 8
4 1 1 1
0 2
1 2 2 7
1 2 2 7
0 1
3 2 2 2
1 1 2 3
3 1 3 5
0 6
*/
