#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<ctime>
using namespace std;
#include<vector>
typedef long long ll;
#define inf 8000000000000000000ll
ll mul(ll a,ll n,ll b,ll c) {
	if (!n||(inf-b)/a/n) return (a*n+b)/c;
	ll d=(((long double)a*n+b)/c);
	ll r=a*n+b-d*c;
	if (r>=c) ++d;
	if (r<0) --d;
	return d;
}
#define mo 900000011
int qp(int a,int b){
	int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;
}
int c[35][35];
int fac[35];
int ifac[35];
int ber[35];
#define upd(a,b) (a=(a+(b))%mo)
int a[35][35];
void mul(int *a,int *b){
	int ans[35]={0};
	for (int i=0;i<15;i++)
		for (int j=0;j<2;j++)upd(ans[i+j],1ll*a[i]*b[j]);
	for (int i=0;i<20;i++)a[i]=ans[i];
}
int cl=0;
void f(ll R,int up,ll A,ll B,ll C,int ans[22][22]){
	if(R==0){
		for (int i=0;i<=up;i++)
			for (int j=0;i+j<=up;j++)ans[i][j]=0;
		return;
	}
	int tt[22];
	int tr=R%mo;
	for (int i=0;i<=up;i++){
		int su=0;
		for (int j=i+1;j>=0;j--)su=(1ll*su*tr+a[i][j])%mo;
		tt[i]=su;
	}
	if(A==0){
		int ss[22]={0};
		ss[0]=1;int w=(B/C)%mo;
		for (int i=1;i<=up;i++)ss[i]=1ll*ss[i-1]*w%mo;
		for (int i=0;i<=up;i++)
			for (int j=0;i+j<=up;j++)ans[i][j]=1ll*tt[i]*ss[j]%mo;
		return;
	}
	if(A<C && A>=0 && B<C && B>=0){
		for (int p=0;p<=up;p++)ans[p][0]=tt[p];
		ll yma=mul(A,R-1,B,C);//((R-1)*Bignum(A)+Bignum(B))/Bignum(C);
		int tmp[22][22];
		f(yma,up,C,C-B-1+A,A,tmp);
		int yr=yma%mo;
		int yy[22]={0};
		for (int i=0;i<=up;i++){
			int su=0;
			for (int j=i+1;j>=0;j--)su=(1ll*su*yr+a[i][j])%mo;
			yy[i]=su;
		}
		int zz[22][22]={0};
		for (int p=0;p<=up;p++)
			for (int j=0;p+j+1<=up;j++){
				int su=0;
				for (int l=0;l<=p+1;l++)upd(su,1ll*a[p][l]*tmp[j][l]);
				zz[p][j]=su;
			}
		for (int p=0;p<=up;p++)
			for (int q=1;q+p<=up;q++){
				int su=0;
				for (int j=0;j<=q-1;j++)
					upd(su,1ll*c[q][j]*(1ll*yy[j]*tt[p]%mo-zz[p][j]));
				ans[p][q]=su;
			}
	}else{
		ll D=(A%C+C)%C,S=((A-D)/C)%mo,E=(B%C+C)%C,T=((B-E)/C)%mo;
		int tmp[22][22];
		f(R,up,D,E,C,tmp);
		int xx[22][22];
		int Si[22],Ti[22];
		Si[0]=Ti[0]=1;
		for (int i=1;i<=up;i++)Si[i]=1ll*Si[i-1]*S%mo,Ti[i]=1ll*Ti[i-1]*T%mo;
		int uuu[22][22];
		for (int m=0;m<=up;m++)
			for (int s=0;s<=m;s++)
				uuu[m][s]=1ll*ifac[s]*ifac[m-s]%mo*Si[m-s]%mo;
		for (int p=0;p<=up;p++)
			for (int m=0;m+p<=up;m++){
				int su=0;
				for (int s=0;s<=m;s++)
					upd(su,1ll*uuu[m][s]*tmp[p+m-s][s]);
				xx[p][m]=su;
			}
		for (int q=0;q<=up;q++)
			for (int u=0;u<=q;u++)
				uuu[q][u]=1ll*fac[q]*ifac[u]%mo*Ti[u]%mo;
		for (int p=0;p<=up;p++)
			for (int q=0;p+q<=up;q++){
				int su=0;
				for (int u=0;u<=q;u++)
					upd(su,1ll*uuu[q][u]*xx[p][q-u]);
				ans[p][q]=su;
			}
	}
}
int work(ll n,ll A,ll B,int k,int l){
	int pox[35]={0},poy[35]={0};
	pox[0]=poy[0]=1;
	for (int i=1;i<=l;i++){
		int p2[35]={0};
		p2[1]=mo-1;
		p2[0]=(n-i+1)%mo;
		mul(pox,p2);
	}
	int tmp=1;
	for (int i=1;i<=l;i++)tmp=1ll*tmp*i%mo;
	tmp=qp(tmp,mo-2);
	for (int i=0;i<=l;i++)pox[i]=1ll*pox[i]*tmp%mo;
	for (int i=1;i<=k;i++){
		int p2[35]={0};
		p2[1]=1;
		p2[0]=(mo-i+1);
		mul(poy,p2);
	}
	tmp=1;
	for (int i=1;i<=k;i++)tmp=1ll*tmp*i%mo;
	tmp=qp(tmp,mo-2);
	for (int i=0;i<=k;i++)poy[i]=1ll*poy[i]*tmp%mo;
	int wyn[22][22];
	f(n+1,l+k+1,A,B,B,wyn);
	int ans=0;
	for (int i=0;i<=l;i++)
		for (int j=0;j<=k;j++){
			int su=0;
			for (int s=1;s<=j+1;s++)upd(su,1ll*a[j][s]*wyn[i][s]);
			upd(ans,1ll*pox[i]*poy[j]%mo*su);
		}
	return (ans+mo)%mo;
}
int main()
{
	//freopen("me.in","r",stdin);
	c[0][0]=1;
	for (int i=1;i<=30;i++){
		c[i][0]=1;
		for (int j=1;j<=i;j++)c[i][j]=(c[i-1][j]+c[i-1][j-1])%mo;
	}
	fac[0]=1;
	for (int i=1;i<=30;i++)fac[i]=1ll*fac[i-1]*i%mo;
	for (int i=0;i<=30;i++)ifac[i]=qp(fac[i],mo-2);
	ber[0]=1;
	for (int k=1;k<=25;k++){
		int su=0;
		for (int i=0;i<k;i++)upd(su,1ll*c[k+1][i]*ber[i]);
		ber[k]=((1ll*qp(k+1,mo-2)*(-su))%mo+mo)%mo;
	}
	for (int k=0;k<=25;k++)
		for (int i=1;i<=k+1;i++)a[k][i]=1ll*qp(k+1,mo-2)*ber[k-i+1]%mo*c[k+1][i]%mo;
	ll n,a,b;
	int k,l;
	int tes;scanf("%d",&tes);
	while(tes--){
		scanf("%lld%lld%lld%d%d",&n,&a,&b,&k,&l);
		printf("%d\n",work(n,a,b,k,l));
	}
	return 0;
}
