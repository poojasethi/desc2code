#include<cstdio>
#include<cstring>
#include<ctime>
#include<algorithm>
using namespace std;

const int mod=900000011;
const int maxn=25;

int C[maxn+5][maxn+5];
int B[maxn+5][maxn+5];
int ccoef[maxn+5][maxn+5];
int CNT;

inline int MOD(int a,int b)
{
    //return (long long)a*b%mod;
	int div, res;
    asm("mul %3; div %4": "=a" (div), "=&d" (res): "a" (a), "r" (b), "r" (mod));
    return res;
}


int power(int a,int b)
{
    //int a=_a%mod;
    if (a<0) a+=mod;
    int res=1;
    for (;b;b>>=1)
    {
        if (b&1) res=MOD(res,a);
        a=MOD(a,a);
    }
    return res;
}

int inverse(long long a)
{
    return power(a,mod-2);
}

int getsum(long long N,int U)
{
    N%=mod;
    int res=0,tmp=1;
    for (int i=0;i<=U+1;++i)
    {
        res+=MOD(B[U][i],tmp);
        if (res>=mod) res-=mod;
        tmp=MOD(tmp,N);
    }
    return res;
}

void init()
{
    for (int i=0;i<=maxn;i++)
    {
        C[i][0]=1;
        for (int j=1;j<=i;j++) 
            C[i][j]=(C[i-1][j]+C[i-1][j-1])%mod;
    }

    B[0][1]=1;
    for (int i=1;i<=maxn;i++)
    {
        for (int j=0;j<=i+1;j++) B[i][j]=C[i+1][j];
        B[i][0]=(B[i][0]+mod-1)%mod;
        for (int j=0;j<=i-1;j++)
        for (int k=0;k<=j+1;k++)
            B[i][k]=(B[i][k]-(long long)C[i+1][j]*B[j][k]%mod+mod)%mod;
        for (int j=0;j<=i+1;j++) B[i][j]=(long long)B[i][j]*inverse(i+1)%mod;
    }          
}

long long mycalc(unsigned long long A,unsigned long long B,unsigned long long C,unsigned long long D)
{
    unsigned long long A1=(A>>31),A2=(A&2147483647LL);
    unsigned long long B1=(B>>31),B2=(B&2147483647LL);
    unsigned long long C1=0,C2=0,C3=0;
    C1=A2*B2;C2=A1*B2+A2*B1;C3=A1*B1;
    long long R1,R2;
    R1=C1,R2=C3;
    R2+=(C2>>31);
    R1+=((C2&2147483647LL)<<31);
    R1+=C;
    if (R1<0) {R2--;R1+=(1LL<<62);}

    R2+=(R1>>62);
    R1&=4611686018427387903LL;
    long long res=((R2/D)<<62);
    R2%=D;
    for (int i=61;i>=0;i--)
    {
        R2=R2*2+((R1&(1LL<<i))>0);
        res=res*2+R2/D;
        R2%=D;
    }
    return res;
}

int c1[maxn+5][maxn+5],c2[maxn+5][maxn+5],cc[maxn+5][maxn+5];
int coefX[maxn+5][maxn+5];
int coefY[maxn+5][maxn+5];

inline void renew(int &a,int b)
{
    if (b<0) b+=mod;
    a+=b;
    if (a>=mod) a-=mod;
}

int calc(long long A,long long R,long long D,long long N,int U,int V)
{
    int TOT=U+V+1;
    memset(c1,0,sizeof(c1));
    memset(c2,0,sizeof(c2));
    memset(cc,0,sizeof(cc));

    for (int i=0;i<=U;i++)
        for (int j=0;j<=V+1;j++)
        if (coefX[U][i] && coefY[V+1][j])
            renew(c1[i][j],(long long)coefX[U][i]*coefY[V+1][j]%mod);
        
    int res=0;
    int tmp1,tmp2,COEF;
    bool flag=1;
    int apower[maxn+5];
    int MMpower[maxn+5],MM1power[maxn+5],M_M[maxn+5];
    int Mpower[maxn+5];
    
    int CNT=0;

    while (flag)
    {
        flag=0;
        if (!N) break;
        int SN[maxn+5];
        for (int i=0;i<=TOT;i++) SN[i]=getsum(N,i);

        long long a=A/D%mod;
        for (int i=0;i<=TOT;i++) apower[i]=power(a,i);
        long long MM=(A%D+R)/D;
        for (int i=0;i<=TOT;i++) 
        {
            MMpower[i]=power(MM%mod,i);
            MM1power[i]=power((MM+1)%mod,i);
            M_M[i]=(MMpower[i]-MM1power[i]+mod)%mod;
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////
        for (U=0;U<=TOT;U++)
        for (V=0;U+V<=TOT;V++)
        if (c1[U][V])
        {
            COEF=c1[U][V];c1[U][V]=0;
            if (!A) {renew(res,(long long)SN[U]*MMpower[V]%mod*COEF%mod);continue;}
            if (!V) {renew(res,(long long)SN[U]*COEF%mod);continue;}
            if (D>R && (double)(D-R)/A>N) continue;
            int VV=!a?0:V;
            for (int j=0;j<=VV;j++)
                renew(c2[U+j][V-j],(long long)apower[j]*COEF%mod*C[V][j]%mod);
        }
        
        A%=D;
        
        long long M=mycalc(A,N,R,D);
        for (int i=0;i<=TOT;i++) Mpower[i]=power(M%mod,i);

        for (U=0;U<=TOT;U++)
        for (V=0;U+V<=TOT;V++)
        if (c2[U][V])
        {
            COEF=c2[U][V];c2[U][V]=0;
            
            if (!V) {renew(res,(long long)SN[U]*COEF%mod);continue;}
            if (MM==M) {renew(res,(long long)SN[U]*COEF%mod*Mpower[V]%mod);continue;}
            if (MM+1==M)
            {
                long long mid=mycalc(M,D,-R+A-1,A)-1;
                renew(res,(long long)getsum(mid,U)*COEF%mod*MMpower[V]%mod);
                renew(res,(long long)(SN[U]-getsum(mid,U))*COEF%mod*Mpower[V]%mod);
                continue;
            }

            renew(res,(long long)SN[U]*Mpower[V]%mod*COEF%mod);
            renew(res,(long long)M_M[V]*getsum((D*MM+D-1-R)/A,U)%mod*COEF%mod);

            for (int i=0;i<=V;i++)
            {
                int cy=MOD(C[V][i],M_M[V-i]);
                if (cy) renew(cc[i][U],MOD(COEF,cy));
            }   
        }

        for (U=0;U<=TOT;U++)
        for (V=0;U+V<=TOT;V++)
        if (cc[U][V])
        {
            COEF=cc[U][V];cc[U][V]=0;
            for (int j=0;j<=V+1;j++)
            if (B[V][j]) renew(c1[U][j],MOD(COEF,B[V][j])),flag=1;
        }

        long long _A=D,_R=D+MM*D-1-R,_D=A,_N=M-1-MM;
        A=_A;R=_R;D=_D;N=_N;
        
    }

    return res;
}

int work(long long N,long long A,long long B,int K,int L)
{
    memset(coefX,0,sizeof(coefX));
    memset(coefY,0,sizeof(coefY));
    coefX[0][0]=1;
    for (int i=0;i<L;i++)
    {
        for (int j=0;j<=L;j++) coefX[i+1][j]=((long long)coefX[i][j]*(N%mod-i)%mod+mod)%mod;
        for (int j=0;j<=L;j++) coefX[i+1][j+1]=(coefX[i+1][j+1]-coefX[i][j]+mod)%mod;
    }
    for (int i=0;i<=L;i++)
        for (int j=1;j<=L;j++) coefX[L][i]=(long long)coefX[L][i]*inverse(j)%mod;
    
    coefY[0][0]=1;
    for (int i=0;i<K+1;i++)
    {
        for (int j=0;j<=K+1;j++) coefY[i+1][j]=((long long)coefY[i][j]*(1-i)%mod+mod)%mod;
        for (int j=0;j<=K+1;j++) coefY[i+1][j+1]=(coefY[i+1][j+1]+coefY[i][j])%mod;
    }
    for (int i=0;i<=K+1;i++)
        for (int j=1;j<=K+1;j++) coefY[K+1][i]=(long long)coefY[K+1][i]*inverse(j)%mod;

    return calc(A,0,B,N,L,K);
}

int main()
{
    //freopen("input.txt","r",stdin);
    init();
    int Test;
    long long N,A,B,K,L;
    for (scanf("%d",&Test);Test--;)
    {
        scanf("%lld%lld%lld%lld%lld",&N,&A,&B,&K,&L);
        printf("%d\n",work(N,A,B,K,L));
        //printf("%d\n",CNT);
    }

   //printf("%lf\n",(double)clock()/CLOCKS_PER_SEC);
}

