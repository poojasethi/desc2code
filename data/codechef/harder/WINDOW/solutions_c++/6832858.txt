#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
ll power(ll x,ll y,ll mod){if (y<0)return power(power(x,mod-2,mod),-y,mod);ll res=1;while(y){if (y&1) res=res*x%mod;y>>=1;x=x*x%mod;}return res;}


const int mod = 900000011;
const int MAXS = 30;


void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
	if (x < 0) x += mod;
}

int C[MAXS][MAXS], bo[MAXS][MAXS+1], facv[MAXS], inv[MAXS];

void prepare() {
	C[0][0] = 1;
	for (int i = 1; i < MAXS; ++i) {
		C[i][0] = 1;
		for (int j = 1; j <= i; ++j) {
			C[i][j] = C[i-1][j-1];
			add(C[i][j], C[i-1][j]);
		}
	}
	
	facv[0] = 1;
	for (int i = 1; i < MAXS; ++i) {
		inv[i] = power(i, -1, mod);
		facv[i] = (ll)facv[i-1] * inv[i] % mod;
	}
	
	
	bo[0][1] = 1;
	for (int k = 1; k < 25; ++k) {
		for (int j = 1; j <= k + 1; ++j) {
			bo[k][j] = C[k + 1][j];
		}
		for (int j = 0; j < k; ++j) {
			for (int t = 0; t <= j+1; ++t) {
				add(bo[k][t], -(ll)C[k+1][j] * bo[j][t] % mod);
			}
		}
		for (int j = 0; j <= k+1; ++j)
			bo[k][j] = (ll)bo[k][j] * inv[k + 1] % mod;
	}
}

int Sum(int k, ll n) {
	int res = 0;
	n %= mod;
	for (int i = 0, t = 1; i <= k+1; ++i, t = (ll)t * n % mod)
		add(res, (ll)bo[k][i] * t % mod);
	return res;
}

int f[256][MAXS][MAXS], c[MAXS], d[MAXS], w[MAXS][MAXS];

void calc(int dep, ll n, ll a, ll b, ll c, int S) {
	for (int k = 0; k <= S; ++k) {
		for (int j = 0; j <= S - k; ++j) {
			f[dep][k][j] = 0;
		}
	}
	if (!n) return;
	if (!a) {
		int o = 1;
		ll t = c / b;
		if (c < 0 && c % b) t--;
		t %= mod; 
		for (int j = 0; j <= S; ++j) {
			for (int k = 0; k <= S - j; ++k) {
				f[dep][k][j] = (ll)o * Sum(k, n) % mod;
			}
			o = (ll)o * t % mod;
		}
	} else if (a >= b) {
		ll q = (a / b) % mod, r = a % b;
		calc(dep + 1, n, r, b, c, S);	
		for (int k = 0; k <= S; ++k) {
			for (int j = 0; j <= S - k; ++j) {
				int qi = 1;
				for (int i = 0; i <= j; ++i) {
					add(f[dep][k][j], (ll)C[j][i] * qi % mod * f[dep+1][k+i][j-i] % mod);
					qi = (ll)qi * q % mod;					
				}
			}				
		}
	} else if (a < b) {
		ll m = ((long double)n * a + c) / b, c1 = - c - 1;
		calc(dep+1, m, b, a, c1, S);
		m %= mod;
		for (int i = 0; i <= S; ++i) {
			for (int k = 0; k <= S - i; ++k) {
				w[i][k] = 0;
				for (int h = 1; h <= k + 1; ++h) {
					add(w[i][k], (ll)f[dep+1][i][h] * bo[k][h] % mod);
				}
			}
		}
		for (int k = 0; k <= S; ++k) {
			int mj = 1;
			int sum = Sum(k, n);
			for (int j = 0; j <= S - k; ++j) {
				f[dep][k][j] = (ll)sum * mj % mod;
				for (int i = 0; i < j; ++i) {
					/*
					for (int h = 1; h <= k + 1; ++h) {
						int o = ((j - i) & 1) ? -1 : 1;
						add(f[dep][k][j], (ll)C[j][i] * o * bo[k][h] % mod * f[dep+1][i][h] % mod);
					}
					*/
					int o = ((j - i) & 1) ? -1 : 1;
					add(f[dep][k][j], (ll)C[j][i] * o * w[i][k] % mod);
				}
				mj = (ll)mj * m % mod; 	
			}
		}
	}
}

int tmp[MAXS];

void func(int k, int l, int n) {
	memset(c, 0, sizeof(c));
	memset(d, 0, sizeof(d));
	
	c[0] = 1;
	for (int o = 1, i = 1; i <= k+1; ++i, o--) {
		for (int j = 0; j < i; ++j) tmp[j] = c[j], c[j] = 0;
		for (int j = 0; j < i; ++j) {
			add(c[j+1], tmp[j]);
			add(c[j], (ll)tmp[j] * o % mod);
		}
	}
	for (int i = 0; i <= k+1; ++i) c[i] = (ll)c[i] * facv[k+1] % mod;
	
	d[0] = 1;
	for (int o = n, i = 1; i <= l; ++i, --o) {
		for (int j = 0; j < i; ++j) tmp[j] = d[j], d[j] = 0;
		for (int j = 0; j < i; ++j) {
			add(d[j+1], -tmp[j]);
			add(d[j], (ll)tmp[j] * o % mod);
		}
	}
	for (int i = 0; i <= l; ++i) d[i] = (ll)d[i] * facv[l] % mod;
}

int main () {
	
	prepare();
	int te; scanf("%d", &te);
	while (te--) {
		ll N, A, B;
		int K, L;
		cin >> N >> A >> B >> K >> L;
		
		func(K, L, N % mod);
		calc(0, N, A, B, 0, L + K + 1);
		
		
		int res = 0;
		for (int i = 0; i <= L; ++i) {
			for (int j = 0; j <= K+1; ++j) {
				add(res, (ll)c[j] * d[i] % mod * f[0][i][j] % mod);
			}
		}
		cout << res << endl;
	}
	return 0;
}