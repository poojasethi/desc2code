#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define rep(i,a,n) for (int i=a;i<n;i++)
typedef long long ll;
const ll mod=900000011,inf=8000000000000000000ll;
ll powmod(ll a,ll b) {ll res=1;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
const int S=30;
ll fac[S],fnv[S],binom[S][S],polym[S][S],tmp[S],p2b[S][S],b2p[S][S];
ll dp[1000][S][S],cofr[S],ans,coff[S][S],pw[S],bm[S];
ll n,a,b,u,v;
int s,_;
inline void upd(ll &a,ll b) { a+=b;if (a>=inf) a%=mod;}
ll mul(ll a,ll n,ll b,ll c) {
	if (!n||(inf-b)/a/n) return (a*n+b)/c;
	ll d=(((long double)a*n+b)/c);
	ll r=a*n+b-d*c;
	if (r>=c) ++d;
	if (r<0) --d;
	return d;
}
ll vdeg(ll *a,int deg) {
	ll res=0;
	rep(i,0,deg+1) {
		if (i&1) res=(res-binom[deg][i]*a[deg-i])%mod;
		else res=(res+binom[deg][i]*a[deg-i])%mod;
	}
	if (res<0) res+=mod;
	return res;
}
void topolym(ll *a,ll *r,int deg) {
	for (int i=deg;i>=0;i--) {
		r[i]=vdeg(a,i)*fnv[i]%mod;
		rep(j,0,i) a[j]=(a[j]-r[i]*polym[j][i])%mod;
	}
}
void tobinom(ll *a,ll *r,int deg) {
	for (int i=deg;i>=0;i--) r[i]=vdeg(a,i);
}
ll cbinom(ll a,int b) {
	ll res=1; a%=mod;
	rep(i,0,b) res=res*(a-i)%mod;
	if (res<0) res+=mod;
	return res*fnv[b]%mod;
}
void precalc() {
	fac[0]=fnv[0]=1;
	rep(i,1,23) fac[i]=fac[i-1]*i%mod,fnv[i]=powmod(fac[i],mod-2);
	rep(i,0,23) {
		binom[i][0]=binom[i][i]=1;
		rep(j,1,i) binom[i][j]=binom[i-1][j-1]+binom[i-1][j];
		polym[i][0]=1;
		rep(j,1,23) polym[i][j]=polym[i][j-1]*i%mod;
	}
	rep(i,0,23) {
		rep(j,0,i+1) tmp[j]=polym[j][i];
		tobinom(tmp,p2b[i],i);
		rep(j,0,i+1) tmp[j]=binom[j][i];
		topolym(tmp,b2p[i],i);
	}
}
void solve(ll a,ll b,ll c,ll n,ll dep) {
	rep(u,0,s+1) rep(v,0,s+1-u) dp[dep][u][v]=0;
	if (n==0) return;
	if (a>=c||b>=c) {
		solve(a%c,b%c,c,n,dep+1);
		ll pa=a/c%mod,pb=b/c%mod;
		pw[0]=1;rep(i,1,s+1) pw[i]=pw[i-1]*pb%mod;
		rep(u,0,s+1) rep(v,0,s+1-u) {
			coff[u][v]=0;
			rep(k,0,v+1) upd(coff[u][v],pw[k]*binom[v][k]%mod*dp[dep+1][u][v-k]);
			coff[u][v]%=mod;
		}
		pw[0]=1;rep(i,1,s+1) pw[i]=pw[i-1]*pa%mod;
		rep(u,0,s+1) rep(v,0,s+1-u) {
			rep(k,0,v+1) upd(dp[dep][u][v],pw[k]*binom[v][k]%mod*coff[u+k][v-k]);
			dp[dep][u][v]%=mod;
		}
	} else if (a==0) {
		ll pn=n%mod+mod;
		bm[0]=1;rep(i,1,s+2) bm[i]=bm[i-1]*(pn+1-i)%mod;
		rep(i,0,s+2) bm[i]=bm[i]*fnv[i]%mod;
		rep(u,0,s+1) {
			rep(v,0,u+1) upd(dp[dep][u][0],p2b[u][v]*bm[v+1]);
			dp[dep][u][0]%=mod;
		}
	} else {
		ll p=mul(a,n-1,b,c);
		solve(c,c+a-b-1,a,p,dep+1);
		rep(u,0,s+1) rep(v,0,s+1-u) {
			rep(k,0,v+1) upd(dp[dep][u][v],dp[dep+1][u][k]*b2p[v][k]);
			dp[dep][u][v]%=mod;
		}
		ll pp=p%mod,pn=n%mod+mod;
		pw[0]=1;rep(i,1,s+1) pw[i]=pw[i-1]*pp%mod;
		bm[0]=1;rep(i,1,s+2) bm[i]=bm[i-1]*(pn+1-i)%mod;
		rep(i,0,s+2) bm[i]=bm[i]*fnv[i]%mod;
		rep(u,0,s+1) rep(v,0,s+1-u) {
			coff[u][v]=pw[v]*bm[u+1];
			rep(k,0,v) upd(coff[u][v],dp[dep][k][u+1]*(mod-binom[v][k]));
			coff[u][v]%=mod;
		}
		rep(u,0,s+1) rep(v,0,s+1-u) {
			dp[dep][u][v]=0;
			rep(k,0,u+1) upd(dp[dep][u][v],coff[k][v]*p2b[u][k]);
			dp[dep][u][v]%=mod;
		}
	}
}
int main() {
	precalc();
	for (scanf("%d",&_);_;_--) {
		scanf("%lld%lld%lld%lld%lld",&n,&a,&b,&u,&v);
		++u;s=u+v;
		rep(i,0,v+1) tmp[i]=cbinom(n-i,v);
		topolym(tmp,cofr,v);
		solve(a,b,b,n+1,0);
		ans=0;
		rep(i,0,v+1) rep(j,0,u+1) upd(ans,cofr[i]*b2p[u][j]%mod*dp[0][i][j]);
		ans%=mod;
		printf("%lld\n",ans);
	}
}