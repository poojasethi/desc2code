#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
using namespace std;
 
typedef long long LL;
 
const int ALP = 26;
const int pmod = 1000000007;
const int sqmod = 1<<15;
 
int powALP_baby[sqmod];
int powALP_giant[sqmod];
 
void powALP_precalc()
{
	int p=1,i;
	for(i=0;i<sqmod;i++)
	{
		powALP_baby[i]=p;
		p=LL(p)*ALP%pmod;
	}
	int q=1;
	for(i=0;i<sqmod;i++)
	{
		powALP_giant[i]=q;
		q=LL(q)*p%pmod;
	}
}
 
inline int powmodALP(int n)
{
	return LL(powALP_giant[n>>15])*powALP_baby[n & ((1<<15)-1)]%pmod;
}
 
const int maxD = 50000; // max(R-L)
const LL maxR_ = 10000000000LL;
LL maxR;
const int sqrt_maxR_ = 100000;
int sqrt_maxR;
 
const int prime_pi = 10000; // PrimePi[sqrt_maxR_]
const int log3_maxR = 22;
 
int maxp[sqrt_maxR_+5];
int ind[sqrt_maxR_+5];
int prime[prime_pi];
int plen;
LL order2[prime_pi][log3_maxR];
 
bool powmod2int(int n,int m)
{
	int j;
	for(j=0;(1<<j)<=n;j++);
	int pw=1;
	for(;j--;)
	{
		pw=LL(pw)*pw%m;
		if(n & (1<<j))
		{
			pw+=pw;
			if(pw>=m) pw-=m;
		}
	}
	return pw!=1;
}
 
bool powmod2LL(LL n,LL m)
{
	int j;
	for(j=0;(1LL<<j)<=n;j++);
	LL pw=1;
	for(;j--;)
	{
		pw = ((((pw>>20)*pw%m)<<20)+(pw & 1048575)*pw)%m; // pw=pw*pw%m;
		if(n & (1LL<<j))
		{
			pw+=pw;
			if(pw>=m) pw-=m;
		}
	}
	return pw!=1;
}
 
void precalc()
{
	sqrt_maxR=int(sqrt(double(maxR))+2);
	memset(maxp,0,4*(sqrt_maxR+1));
	plen=0;
	int i,j;
	for(i=2;i<=sqrt_maxR;i++) if(!maxp[i])
	{
		ind[i]=plen;
		prime[plen++]=i;
		for(j=i;j<=sqrt_maxR;j+=i) maxp[j]=i;
	}
	for(i=1;i<plen;i++)
	{
		int m=prime[i];
		int d=m-1;
		for(int x=d;x>1;)
		{
			int p=maxp[x];
			for(;x%p==0;x/=p);
			for(;;)
			{
				if(d%p) break;
				d/=p;
				if(powmod2int(d,m))
				{
					d*=p;
					break;
				}
			}
		}
		order2[i][0]=d;
		LL D=d;
		LL pm=m;
		for(j=1;;j++)
		{
			if(pm>maxR/m) break;
			pm*=m;
			if(pm<(1<<30)?powmod2int(int(D),int(pm)):powmod2LL(D,pm))
				D*=m;
			order2[i][j]=D;
		}
	}
}
 
const int max_sieve = maxD + sqrt_maxR_ + 5;
const int max_nu = 10; // maximal number of different prime factors of numbers upto maxR
 
LL pr[max_sieve][max_nu];
int prlen[max_sieve];
LL rem[max_sieve];
 
void sieve(LL L,LL R)
{
	memset(prlen,0,unsigned(4*(R-L+1)));
	int i;
	for(i=0;i<=R-L;i++)
		rem[i]=L+i;
	int sqR=int(sqrt(double(R))+2);
	for(i=0;i<plen;i++)
	{
		int p=prime[i];
		if(p>sqR) break;
		int x=L%p;
		x=x?p-x:x;
		for(;x<=R-L;x+=p)
		{
			for(;rem[x]%p==0;rem[x]/=p);
			pr[x][prlen[x]++]=p;
		}
	}
	for(i=0;i<=R-L;i++)
		if(rem[i]>1)
			pr[i][prlen[i]++]=rem[i];
}
 
LL ans;
int len;
LL px[max_nu];
int ax[max_nu];
LL ord2[max_nu][log3_maxR+1];
 
inline LL gcd(LL a,LL b)
{
	LL c;
	while(b) c=a%b,a=b,b=c;
	return a;
}
 
void rec(int i,LL x,LL phi,LL ord)
{
	if(i==len)
	{
		ans+=phi/ord;
		return;
	}
	rec(i+1,x,phi,ord);
	LL p=px[i];
	LL q=1;
	for(int j=0;j<ax[i];j++)
	{
		q*=p;
		rec(i+1,x*q,phi*(q-q/p),ord*ord2[i][j]/gcd(ord,ord2[i][j]));
	}
}
 
int count_words(LL L,LL R_)
{
	LL R=R_;
	if(R%2==0) R++;
	int sqR=int(sqrt(1.*R)+2);
	LL lo=max(1LL,L-sqR);
	sieve(lo,R);
	int res=0;
	LL x=L;
	if(x%2==0) x++;
	for(;x<=R;x+=2)
	{
		LL *prx=pr[x-lo];
		len=prlen[x-lo];
		int i,j;
		for(i=0;i<len;i++)
		{
			LL m=prx[i];
			px[i]=m;
			ax[i]=0;
			for(LL y=x;y%m==0;y/=m)
				ax[i]++;
			if(m>=sqrt_maxR)
			{
				LL *pp=pr[x-x/m-lo];
				LL d=m-1;
				for(j=prlen[x-x/m-lo];j--;)
				{
					LL p=pp[j];
					for(;;)
					{
						if(d%p) break;
						d/=p;
						if(m<(1<<30)?powmod2int(int(d),int(m)):powmod2LL(d,m))
						{
							d*=p;
							break;
						}
					}
				}
				ord2[i][0]=d;
			}
			else
			{
				for(j=0;j<ax[i];j++)
					ord2[i][j]=order2[ind[m]][j];
			}
		}
		ans=0;
		rec(0,1,1,1);
		int pwALP=powmodALP((ans-1)%(pmod-1));
		if(x<=R_)
			res=(res+LL(ALP)*pwALP)%pmod;
		if(L<=x-1)
			res=(res+pwALP)%pmod;
	}
	return res;
}
 
const int maxTST = 5;
 
int main()
{
	powALP_precalc();
	int TST,tst;
	scanf("%d",&TST);
	LL L[maxTST],R[maxTST];
	maxR=0;
	for(tst=0;tst<TST;tst++)
	{
		scanf("%lld%lld",L+tst,R+tst);
		maxR=max(maxR,R[tst]);
	}
	precalc();
	for(tst=0;tst<TST;tst++)
	{
		int res=count_words(L[tst],R[tst]);
		printf("%d\n",res);
	}
} 