#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
#include <map>
#include <vector>

#define REP(a,b) for (int a = 0; a < b; a++)
#define FOR(a,b,c) for (int a = b; a <= c; a++)
#define RESET(a,b) memset(a,b,sizeof a)

#define PII pair<int,int>
#define MP make_pair
#define PB push_back
#define F first
#define S second

#define EPS 1e-8
#define MAXN 1000005
#define MAXS 200005
#define LL long long
#define MOD 1000000007
using namespace std;

bool ada;
int T;
int N,M;
int lucks[MAXN], tossed[MAXN];
int faf[MAXN];
char s[MAXS];
int val[256];

void build(int &n, int ar[]){
   scanf("%d%s", &n, s);
   
   int le = strlen(s);
   int p = 0;
   REP(i,le){
      int v = val[s[i]];
      for (int j = 4; j >= 0; j--){
         ar[p++] = (v & (1<<j)) ? 1 : 0;

         if (p > n) return;
      }
   }
}

void build_f(int n, int ar[]){
   int i,j;
   i = 0;
   j = -1;
   faf[0] = -1;
   while (i < n){
      while ((j >= 0) && (ar[j] != ar[i])){
         j = faf[j];
      }
      
      i++;
      j++;      
      faf[i] = j;
   }
}

int match(int n, int ar[], int m, int T[]){
   if (m == 0) return -1;
   
   int i,j;
   i = 0;
   j = 0;
   while (i < m){
      while ((j >= 0) && (ar[j] != T[i])){
         j = faf[j];
      }
      if (i == m-1) break;
      
      i++;
      j++;
      if (j == n){
         j = faf[j];
         ada = 1;
         break;
      }
   }
   
   return j;
}

inline LL mod(LL a, LL b){
   if (a >= MOD) a %= b;
   if (a < 0) a += b;
   return a;
}

LL pouw(LL a, LL b){
   if (b == 0) return 1;
   if (b & 1) return (a * pouw(a, b-1)) % MOD;
   LL t = pouw(a, b/2);
   return (t*t) % MOD;
}

LL P[MAXN],Q[MAXN], E[MAXN];
LL compute(int last){
   last++;
/*
   REP(i,N){
      printf("%d", lucks[i]);
   }
   printf("\n");
   
   REP(i,M){
      printf("%d", tossed[i]);
   }
   printf("\n");
   
   printf(":%d\n", last);
*/  
   P[0] = 0;
   Q[0] = 1;
   
   P[1] = -2;
   Q[1] = 1;
   FOR(i,1,N-1){
      int t = i;
      while ((t >= 0) && (lucks[t] != 1-lucks[i])){
         t = faf[t];
      }
      t++;
   
      P[i+1] = mod(2*P[i] - P[t] - 2, MOD);
      Q[i+1] = mod(2*Q[i] - Q[t], MOD);
   }
   
   E[0] = mod(-P[N] * pouw(Q[N], MOD-2), MOD);
   if (last > 0){
      FOR(i,1,N){
         E[i] = mod(P[i] + Q[i]*E[0], MOD);
         
         // huh?
         if (i == last) break;
      }
   }
   
   return E[last];
}

int main(){
   REP(i,26){
      val['a' + i] = i;
      val['A' + i] = i + 26;
   }

   scanf("%d", &T);
   REP(jt,T){
      build(N, lucks);
      build(M, tossed);
   
      build_f(N, lucks);
      
      ada = 0;
      LL ans = 0;
      int x = match(N, lucks, M, tossed);
      
      if (!ada){
         ans = compute(x);
      }
         
      printf("%lld\n", ans);
   }	
	return 0;
}