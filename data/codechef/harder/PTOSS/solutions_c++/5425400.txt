
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
#include <list>
#include <set>
#include <cmath>
#include <cstring>
 
#include <stdio.h>
#include <string.h>
#include <sstream>
#include <stdlib.h>
#include <vector>
#include <iomanip>
#include <ctime>
#include <assert.h>
 
using namespace std;
 
//Type Definition
typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi>vvi;
typedef vector<string> vs;
typedef map<string,int> msi;
typedef map<int,int>mii;
 
#define ERR 1e-9
#define PI 3.141592653589793
 
#define REP(i,n) for (i=0;i<n;i++)
#define FOR(i,p,k) for (i=p; i<k;i++)
#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)
 
#define Sort(x) sort(x.begin(),x.end())
#define Reverse(x) reverse(x.begin(),x.end())
#define MP(a,b) make_pair(a,b)
#define Clear(x,with) memset(x,with,sizeof(x))
#define SZ(x) (int)x.size()
#define pb push_back
#define popcount(i) __builtin_popcountll(i)
#define gcd(a,b)    __gcd(a,b)
#define lcm(a,b) ((a)*((b)/gcd(a,b)))
#define two(X) (1<<(X))
#define twoL(X) (((ll)(1))<<(X))
#define setBit(mask,i) (mask|two(i))
#define contain(S,X) (((S)&two(X))!=0)
#define fs first
#define sc second
#define CS c_str()
#define EQ(a,b) (fabs(a-b)<ERR)
#define Unique(store) store.resize(unique(store.begin(),store.end())-store.begin());
#define Find(x,y) ((int)x.find(y))
 
//For debugging
#define debug_array(a,n) for(ll i=0;i<n;i++) cerr<<a[i]<<" "; cerr<<endl;
#define debug_matrix(mat,row,col) for(ll i=0;i<row;i++) {for(ll j=0;j<col;j++) cerr<<mat[i][j]<<" ";cerr<<endl;}
#define deb(a)  cout<<#a<<" #-> "<<a<<endl
#define debug(args...) {dbg,args; cerr<<endl;}
struct debugger{template<typename T> debugger& operator , (const T& v){cerr<<v<<"\t"; return *this; }}dbg;
 
//Important Functions
template<class T> void setmax(T &a, T b) { if(a < b) a = b; }
template<class T> void setmin(T &a, T b) { if(b < a) a = b; }
template<class T> T Abs(T x) {return x > 0 ? x : -x;}
template<class T> inline T sqr(T x){return x*x;}
//template<class T> inline T Mod(T n,T m) {return (n%m+m)%m;} //For Positive Negative No.
template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
ll toInt(string s){ll r=0;istringstream sin(s);sin>>r;return r;}
bool isVowel(char ch){ch=tolower(ch);if(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u')return true;return false;}
bool isUpper(char c){return c>='A' && c<='Z';}
bool isLower(char c){return c>='a' && c<='z';}
ll Pow(ll B,ll P){	ll R=1;	while(P>0)	{if(P%2==1)	R=(R*B);P/=2;B=(B*B);}return R;}
//ll BigMod(ll B,ll P,ll M){	ll R=1;	while(P>0)	{if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;}	return R;}
void binprint(ll mask,ll n){ll i;string s="";do{s+=(mask%2+'0');mask/=2;}while(mask);Reverse(s);s=string(max(n-SZ(s),0LL),'0')+s;for(i=SZ(s)-n;i<SZ(s);i++) printf("%c",s[i]);printf("\n");}
void ASCII_Chart(){ll i,j,k;printf("ASCII Chart:(30-129)\n");FOR(i,30,50){REP(j,5){k=i+j*20;printf("%3d---> '%c'   ",k,k);}printf("\n");}}
 
 
//int month[]={-1,31,28,31,30,31,30,31,31,30,31,30,31};  //Not Leap Year
 
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={-1,-1,+0,+1,+1,+0};int dy[]={-1,+1,+2,+1,-1,-2}; //Hexagonal Direction
 
//#include<conio.h> //for using getch();
 
//struct edge{ int cost,node; edge(int _cost=0,int _node=0){cost=_cost;node=_node;}bool operator<(const edge &b)const {return cost>b.cost;}}; // Min Priority Queue
//bool comp(edge a,edge b){ return a.cost < b.cost;} //Asc Sort by cost
 
 
const ll Mod = 1000000007;
const int SIZE = 200010;
 
char text[10*SIZE],pat[5*SIZE];
int N,M;
int par[10*SIZE],fail[10*SIZE];
ll p[5*SIZE],q[5*SIZE];
 
ll bigMod(ll b,ll pow)
{
    if(!pow)  return 1;
 
    ll x = bigMod(b,pow/2);
    x = (x*x)%Mod;
 
    if(pow&1) x = (x*b)%Mod;
    return x;
}
 
void doIt(int t,int cnt,char cur[])
{
    for(int i=0;i<5;i++)
    {
        if(t&1)    cur[cnt+5-1-i]='1';
        else cur[cnt+5-1-i] = '0';
        t>>=1;
    }
}
 
 
void preProcess(char str[],int l,char ar[])
{
    int i;
    REP(i,l)  doIt(str[i]<='Z'?str[i]-'A'+26:str[i]-'a',i*5,ar);
}
 
char s1[SIZE],s2[SIZE];
 
bool kmp(char *str,int l)
{
    int i,j,k,ok;
    par[0] = 0;
    k = 0;
    for(i=1;i<=l;i++)
    {
        while(k>0 && str[k]!=str[i])  k = par[k-1];
        if(str[k]==str[i])    k++;
        par[i] = k;
        if(k==N)    return true;
    }
 
    fail[1] = 0;
 
 
    for(i=1;i<N;i++)
    {
        k = par[i-1];
        ok = str[i];
 
        while(k>0 && str[k]==ok)   k = par[k-1];
        if(str[k]!=ok) k++;
//        debug(i+1,k)
        fail[i+1] = k;
    }
//    for(i=1;i<=N;i++)   printf("%3d ",i);   puts("");
//    for(i=0;i<N;i++)   printf("%3d ",par[i]);   puts("");
//    for(i=1;i<=N;i++)   printf("%3d ",fail[i]);   puts("");
    return false;
}
 
 
int calculateAns()
{
    p[0] = 0;
    q[0] = 1;
//    p[1] = Mod-2;
//    q[1] = 1;
 
    int k;
    ll x;
 
    for(int i=1;i<=N;i++)
    {
        k = fail[i];
//        deb(k);
//        debug(p[i-1],p[k]);
//        debug(q[i-1],q[k]);
 
        p[i] = (4*Mod+2*p[i-1]-p[k]-2)%Mod;
        q[i] = (2*Mod+2*q[i-1]-q[k])%Mod;
//        cout<<i<<"  "<<p[i]<<"  "<<q[i]<<"  k: "<<k<<endl;
    }
 
//    debug(p[N],q[N]);
    x = (Mod-(p[N]*bigMod(q[N],Mod-2) )%Mod) %Mod;
    k = par[N+M];
//    deb(x);
//    deb(k);
    if(k)   return (p[k]+(q[k]*x)%Mod) % Mod;
    return x;
}
 
 
 
int main()
{
//    freopen("in.in","r",stdin);
    //freopen("out.out","w",stdout);
 
    int i,j,test,Case=1,la,lb;
 
    scanf("%d",&test);
 
    while(test--)
    {
        scanf("%d%s%d%s",&N,&s1,&M,&s2);
        la = strlen(s1);
        lb = strlen(s2);
        preProcess(s1,la,text);
        preProcess(s2,lb,pat);
        text[N]='#';
 
        for(i=N+1,j=0;j<M;j++,i++)  text[i] = pat[j];
//        puts("text:--------------");
//        for(i=0;i<N;i++)    printf("%c",text[i]);   puts("");
//        puts("pat:--------------");
//        for(i=0;i<M;i++)    printf("%c",pat[i]);    puts("");
//        puts("conCate:--------------");
//        for(i=0;i<=N+M;i++)    printf("%c",text[i]);    puts("");
 
        if(kmp(text,N+M))
        {
            printf("0\n");  continue;
        }
//        deb("ans");
//        deb(calculateAns());
        printf("%d\n",calculateAns());
 
    }
 
    return 0;
}