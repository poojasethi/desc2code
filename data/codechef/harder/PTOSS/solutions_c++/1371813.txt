#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
using namespace std; 

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define forit(it,S) for(__typeof(S.begin()) it = S.begin(); it != S.end(); ++it)
#ifdef WIN32
	#define I64d "%I64d"
#else
	#define I64d "%lld"
#endif

const int mod = int(1e9 + 7);
typedef pair <int, int> pi;
char a[2222222], b[2222222], s[222222];
int an, bn, p[2222222], to[2222222], x[2222222], y[2222222];
int inv2;

void get(char a[], int &an) {
	scanf("%d %s\n", &an, s);
	int len = strlen(s);
	int n = 0;
	for (int i = 0; i < len; ++i) {
		int x = (islower(s[i])) ? s[i] - 'a' : 26 + s[i] - 'A';
		for (int j = 4; j >= 0; --j) if (x & (1 << j))
			a[n++] = '1';
		else
			a[n++] = '0';
		if (n >= an) break;
	}
	/*for (int i = 0; i < an; ++i)
		putchar(a[i]);
	putchar('\n');*/
}

int modPow(int a, int b) {
	int res = 1;
	while (b > 0) {
		if (b & 1) res = (1LL * res * a) % mod;
		b >>= 1;
		a = (1LL * a * a) % mod;
	}
	return res;
}

int main() {
	int tests;
	scanf("%d\n", &tests);
	while (tests--) {
		get(a, an);
		get(b, bn);
		int n = an;
		a[n++] = '2';
		for (int i = 0; i < bn; ++i) 
			a[n++] = b[i];
		p[0] = 0;
		for (int i = 1; i < n; ++i) {
			int j = p[i - 1];
			while (j != 0 && a[i] != a[j])
				j = p[j - 1];
			if (a[j] == a[i]) ++j;
			p[i] = j;
		}		
		/*for (int i = 0; i < n; ++i)		
			printf("%d ", p[i]);
		puts("");*/
		
		bool found = false;
		for (int i = an + 1; i < n; ++i) if (p[i] == an) {
			found = true;
			break;
		}
		if (found) {
			puts("0");
			continue;
		}
		
		int k = p[an + bn];
		for (int i = an; i >= 1; --i)
			p[i] = p[i - 1];
		to[0] = 0;
		for (int i = 1; i < an; ++i) {
			char ch = (a[i] == '1') ? '0' : '1';
			int k = p[i];
			if (ch == a[k]) to[i] = k + 1;
			else to[i] = to[k];
		}
		/*for (int i = 0; i < an; ++i)
			printf("%d ", to[i]);
		puts("");           
		printf("k=%d\n", k);*/
		x[0] = 1, y[0] = 0;
		for (int i = 1; i <= an; ++i) {
			x[i] = (2LL * x[i - 1] - x[to[i - 1]]) % mod;
			y[i] = (2LL * y[i - 1] - y[to[i - 1]] - 2 + mod) % mod;
			//printf("x=%d y=%d\n", x[i], y[i]);
		}
		int f = (1LL * y[an] * modPow(x[an], mod - 2)) % mod;
		f = mod - f;

		printf("%d\n", (1LL * x[k] * f + y[k]) % mod);
	}
	return 0;		
}
