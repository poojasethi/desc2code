#pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <ctime>
#include <cmath>
#include <stdio.h>
#include <set>
#include <map>
#include <stack>
#include <fstream>
#include <deque>
#include <list>
#include <ctime>
#include <bitset>

#define SZ(a) (int(a.size()))
#define MEM(a, val) memset(a, val, sizeof(a))
#define MP(a, b) make_pair(a, b)
#define PB(a) push_back(a)
#define ALL(a) a.begin(), a.end()
#define REP(i, n) for(int (i) = 0; (i) < (n); ++(i))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define SQR(a) ((a) * (a))

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double dbl;
typedef pair<int, int> pii ;
typedef vector<int> vint;
typedef vector<LL> vLL;

const int mod = 1000000007;

const int nmax = 1000009;

char ts[nmax];

void read(int &n, int s[]) {
  scanf("%d", &n);
  scanf("%s", &ts);
  int len = strlen(ts);
  int p = 0;
  for (int i = 0; i < len; ++i) {
    int ch = ('a' <= ts[i] && ts[i] <= 'z') ? ts[i] - 'a' : ts[i] - 'A' + 26;
    for (int j = 4; j >= 0; --j) {
      s[p] = (ch >> j) & 1;
      ++p;
    }
  }
}

void fprefix(int n, int s[], int p[]) {
  p[0] = 0;
  for (int i = 1; i < n; ++i) {
    int q = p[i - 1];
    while (q > 0 && s[q] != s[i])
      q = p[q - 1];
    if (s[q] == s[i])
      ++q;
    p[i] = q;
  }
}

int cs[nmax * 2];
int s[nmax * 2];
int p[nmax * 2];
int cp[nmax * 2];
int dp[nmax];
int k[nmax];



int main() {
//--------------------------------------------------------------------------
  #ifdef _DEBUG
	freopen("input.txt", "r", stdin);	freopen("output.txt", "w", stdout);
#else
//	freopen("decipher.in", "r", stdin);	freopen("decipher.out", "w", stdout);
#endif
//------------------------------------------------------------------------
  int T;
  scanf("%d", &T);
  for (; T > 0; --T) {
    int n, m;
    read(n, s);
    s[n] = 2;
    read(m, s + n + 1);
    
    fprefix(n + m + 1, s, p);

    bool found = false;
    for (int i = n + 1; found == false && i < n + m + 1; ++i) {
      if (p[i] == n) {
        found = true;
      }
    }

    if (found) {
      cout << 0 << endl;
      continue;
    }

    k[0] = 0;
    k[1] = -2 + mod;
    dp[0] = 0;

    for (int i = 1; i < n; ++i) {
      if (s[p[i - 1]] != s[i])
        dp[i] = p[i - 1] + 1;
      else 
        dp[i] = dp[p[i - 1]];

      k[i + 1] = ((k[i] << 1) - k[dp[i]] - 2);
      while (k[i + 1] < 0)
        k[i + 1] += mod;
      while (k[i + 1] >= mod)
        k[i + 1] -= mod;
    }
    //LL ans = (-k[n] + k[p[n + m + 1 - 1]] + mod) % mod;
    int ans = (-k[n] + k[p[n + m + 1 - 1]] + mod) % mod;
    cout << ans << endl;
  }
  return 0;
}

/*

#define _CRT_SECURE_NO_DEPRECATE
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cstring>
#include <functional>
#pragma comment(linker, "/STACK:66777216")
using namespace std;
#define pb push_back
#define ppb pop_back
#define pi 3.1415926535897932384626433832795028841971
#define mp make_pair
#define x first
#define y second
#define pii pair<int,int>
#define pdd pair<double,double>
#define INF 1000000000
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define rep(i,n) FOR(i,1,(n))
#define rept(i,n) FOR(i,0,(n)-1)
#define L(s) (int)((s).size())
#define C(a) memset((a),0,sizeof(a))
#define VI vector <int>
#define ll long long
#define MOD 1000000007

int a,b,c,d,i,j,n,m,k,kolt;
char SS1[200015], SS2[200015], *S1, *S2;
char s1[1000002], s2[1000002];
char str[2000005];
int p[2000005];
int jump[1000005], dp[1000005];

inline int num(char ch) {
	if (ch >= 'a' && ch <= 'z') return ch - 'a'; else
	return ch - 'A' + 26;
}
inline void encode(char *ans, char *s, int want) {
	int n = (int)strlen(s);
	int k = 0;
	rept(i, n) {
		int a = num(s[i]);
		FORD(j, 4, 0) {
			if (a & 1 << j) ans[k++] = '1'; else
			ans[k++] = '0';
		}
	}
	ans[want] = 0;
}

inline int fpow(int a, int st) {
	int ans = 1;
	while (st) {
		if (st % 2) ans = (ll)ans * a % MOD;
		a = (ll)a * a % MOD;
		st /= 2;
	}
	return ans;
}
int main() {
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);


	gets(str);
	sscanf(str, "%d", &kolt);
	rep(hod, kolt) {
		gets(SS1); S1 = SS1;
		n = 0;
		while (*S1 >= '0' && *S1 <= '9') {
			n = n * 10 + *(S1++) - '0';
		}
		while (*S1 == ' ') ++S1;

		gets(SS2); S2 = SS2;
		m = 0;
		while (*S2 >= '0' && *S2 <= '9') {
			m = m * 10 + *(S2++) - '0';
		}
		while (*S2 == ' ') ++S2;

		encode(s1, S1, n);
		encode(s2, S2, m);

		k = 0;
		rept(i, n) str[k++] = s1[i];
		str[k++] = '$';
		rept(i, m) str[k++] = s2[i];

		p[0] = -1;
		bool found = 0;
		rep(i, k - 1) {
			int j = i - 1;
			while (j >= 0 && str[p[j] + 1] != str[i]) j = p[j];
			if (j == -1) p[i] = -1; else
			p[i] = p[j] + 1;

			if (i >= n && p[i] == n - 1) {
				printf("0\n");
				found = 1;
				break;
			}
		}
		if (found) continue;

		rept(i, k) ++p[i];

		rep(i, n) {
			int t = p[i - 1];
			char ch = '0';
			if (str[i] == '0') ch = '1';
			if (str[t] == ch) jump[i] = t + 1; else
			jump[i] = jump[t];
		}
		
		int q = p[k - 1];

		dp[0] = 0;
		rep(i, n) {
			dp[i] = dp[i - 1] * 2 - 2 - dp[jump[i - 1]];
			if (dp[i] >= MOD) dp[i] -= MOD;
			if (dp[i] >= MOD) dp[i] -= MOD;
			if (dp[i] < 0) dp[i] += MOD;
		}
		
		b = dp[n];

		int b1 = dp[q];

		


		//a1 = 1;
		b = MOD - b;
		a = 1;
		if (a != 1) {
			b = (ll)b * fpow(a, MOD - 2) % MOD;
		} else {
			if (b >= MOD) b -= MOD;
		}

		//int ans = ((ll)1 * b + b1) % MOD;
		printf("%d\n", (b + b1) % MOD);
	}
}*/