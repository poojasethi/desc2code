#include<iostream>
#include<cmath>
#include<cstring>
using namespace std;

#define SIZE 100000
#define dist(i,j) sqrt(((x[i]-x[j])*(x[i]-x[j]))+((y[i]-y[j])*(y[i]-y[j])))

int cap,nmen,n;
int x[SIZE],y[SIZE];
bool visit[SIZE];

int reach()
{
    double food[SIZE],temp,f,d,min;
    memset(visit,0,n);    
    register int j;
    for(j=0;j<n-1;j++)
        food[j]=-1;
    int v=n-1,minv;
    food[v]=0;
    
    while(1)
    {
        if(v==0)
            return ceil(food[0]);

        visit[v]=true;
        min=-1;
        minv=0;
        
        for(j=0;j<n-1;j++)
        {
            if(!visit[j])
            {
                d=dist(j,v);
                f=d*nmen;
                if(f+d<=(cap-food[v]))
                {
                    temp=food[v]+f;
                    if(food[j]==-1 || food[j]>temp)
                    {
                        food[j]=temp;
                    }
                }
                else if(2*f+d<cap)
                {
                    temp=((food[v]-(cap-f-d))/(cap-(2*f)-d));
                    temp=ceil(temp);
                    temp*=2;
                    temp+=1;
                    temp=temp*f+food[v];
                    if(food[j]==-1 || food[j]>temp)
                    {
                        food[j]=temp;
                    }
                }
                if(food[j]!=-1 && (min>food[j] || min==-1))
                {
                    min=food[j];
                    minv=j;
                }
            }
        }
        v=minv;
    }
}

int main()
{
    int t;
    scanf("%d",&t);
    
    while(t--)
    {
        scanf("%d",&cap);
        scanf("%d",&n);
        nmen=0;
        while(n!=-1)
        {
            cap-=n;
            nmen++;
            scanf("%d",&n);
        }
        
        n=0;
        scanf("%d%d",&x[n],&y[n]);
        while(x[n]!=0 || y[n]!=0)
        {
            n++;
            scanf("%d%d",&x[n],&y[n]);
        }
        printf("%d\n",reach());
    }
    return 0;
}
