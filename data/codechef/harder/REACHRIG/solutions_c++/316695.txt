#include<cstdio>
#include<iostream>
#include<vector>
#include<cmath>
using namespace std;

double **adjmat;
double **ssurp;
double **rsurp;
double maxpos;
double maxrd;
double remcap;
int men=0;
int *vert;
double *dist;

void creategraph(vector<int> x,vector<int> y)
{
	ssurp=new double *[x.size()];
	rsurp=new double *[x.size()];
	for(int i=0;i<x.size();i++)
	{
		ssurp[i]=new double [x.size()];
		rsurp[i]=new double [x.size()];
	}
	for(int i=0;i<x.size();i++)
		for(int j=0;j<x.size();j++)
			adjmat[i][j]=0;
	for(int i=0;i<x.size();i++)
	{
		for(int j=i+1;j<x.size();j++)
		{
			int w=x.size()-1;
			double d=pow(double(x[j]-x[i]),2);
		    d+=pow(double(y[j]-y[i]),2);
		    d=pow(double(d),double(0.5));
			if(d<=maxpos)
			{
				adjmat[w-i][w-j]=d*men;
				adjmat[w-j][w-i]=d*men;
				ssurp[w-i][w-j]=remcap-adjmat[w-i][w-j]-d;
				ssurp[w-j][w-i]=ssurp[w-i][w-j];
				
                if(d<=maxrd)
                {
                    rsurp[w-i][w-j]=remcap-adjmat[w-i][w-j]*2-d;
                    rsurp[w-j][w-i]=rsurp[w-i][w-j];
				}
                else
                   rsurp[w-i][w-j]=rsurp[w-j][w-i]=-1;
								
			}
			else
			{
				adjmat[w-i][w-j]=adjmat[w-j][w-i]=-1;
                ssurp[w-i][w-j]=ssurp[w-j][w-i]=-1;
			}
		}
	}
}
void djik(int size)
{
	vert=new int[size];
	for(int z=1;z<size;z++)
	{
		vert[z]=-1;
		dist[z]=999999;
	}
	vert[0]=0;
	dist[0]=0;
	int i=0;  
	while(vert[size-1]==-1)
	{
		if(vert[i]>=0)
        for(int j=0;j<size;j++)
		{
			if(j!=i && vert[j]==-1 &&  adjmat[i][j]>0)
			{
				if(ssurp[i][j]>=0 && dist[i]+adjmat[i][j]<dist[j] )
				{
					int numtrip=0;
                    if(dist[i]-ssurp[i][j]>0)
                    {
                        if(rsurp[i][j]>0)
                             numtrip=(int)ceil((dist[i]-ssurp[i][j])/rsurp[i][j]);
                        else numtrip=-1;
                    }    
                    else if(ssurp[i][j]-dist[i]>=0)
                       numtrip=0;
                    else
                        numtrip=-1;
					if(numtrip>=0)
					{
                       double temp=dist[i]+adjmat[i][j]+(numtrip*2*adjmat[i][j]);
					   if(temp>0 && temp<dist[j])
		    		     	dist[j]=temp;
                        //else
                           //printf("i: %d j:%d adjmat: %lf dist[i]: %lf ssurp[][]: %lf rsurp[i][j]: %lf numtrip: %d\n",i,j,adjmat[i][j],dist[i],ssurp[i][j],rsurp[i][j],numtrip);
                    }    
                 }
    		}	
		}
		int minv=-1;
		double m=9999;
		for(int p=1;p<size;p++)
		{
			if(vert[p]==-1 && dist[p]<m)
				{
					m=dist[p];
					minv=p;
				}
		}
		if(minv==-1)
			break;
		else
			vert[minv]=1;
		i=minv;
	}
}
int main()
{
	int numt;
	scanf("%d",&numt);
	while(numt-->0)
	{
		vector<int> xcoord;
		vector<int> ycoord;
		int weight=0;
		men=0;
		int temp;
		int size=0;	
		double cap=0;
		scanf("%lf",&cap);
		scanf("%d",&temp);		
		while(temp!=-1)
		{
			weight+=temp;
			men++;
			scanf("%d",&temp);		
		}
		int x,y;
		scanf("%d %d",&x,&y);
		while(x!=0 || y!=0)
		{
			xcoord.push_back(x);
			ycoord.push_back(y);
			scanf("%d %d",&x,&y);
		}
		remcap=cap-weight;
		maxpos=remcap/(men+1);
		maxrd=remcap/(2*men+1);
	//cout<<"\nmax:  "<<maxpos;
        dist=new double[xcoord.size()];
		
		vert=new int[xcoord.size()];
		
        adjmat=new double*[xcoord.size()];
		for(int i=0;i<xcoord.size();i++)
			adjmat[i]=new double[xcoord.size()];
		
		creategraph(xcoord,ycoord);
		
		djik(xcoord.size());
		
		long ans=(long)ceil(dist[xcoord.size()-1]);
		
		if(vert[xcoord.size()-1]<0)
		{
			printf("%d",-1);
		}
		else
			printf("%ld",ans);
		//if(numt!=0)
		  printf("\n");
  			//delete []adjmat;
		//delete []dist;
		//delete []vert;
	}
}