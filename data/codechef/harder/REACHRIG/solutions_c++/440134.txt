#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define MAX 10000
#define MAX_INT 100000000
using namespace std;


double dist(double x1,double y1,double x2,double y2){

    double distance,dx,dy;
    dx=(x1-x2);
    dy=(y1-y2);
    distance=sqrt(dx*dx + dy*dy);

    return distance;

}


int main(){
    int cases;
    double rigx[MAX],rigy[MAX],reqf[MAX];
    int black[MAX],white[MAX];

    scanf("%d",&cases);
    while(cases--){
        int np,nr,rign=0,dest,flag=0;
        double ship,temp,summen;
        int recent,brig=0,wrig=0;
        double x,y;
        scanf("%lf",&ship);
        np=0;
        scanf("%lf",&temp);
        summen=0;
        while(temp!=-1){
            summen+=temp;
            np++;
            scanf("%lf",&temp);
        }

        scanf("%lf%lf",&x,&y);
        while(x!=0 || y!=0){
            rigx[rign]=x;
            rigy[rign]=y;
            //initialising the reqf array
            reqf[rign]=MAX_INT;

            rign++;
            scanf("%lf %lf",&x,&y);

        }
        ship=ship-summen;
        if(ship< 0){
            printf("-1\n");
            continue;
        }
        // destination rig , whiterig = uncovered rig , blackrig=covered rig
        //reqf=required food ,np number of persons,rign=rig number dest destination rig
        //recently added rig
        nr=rign;

        dest=rign-1;
        black[0]=dest;
        brig=1;
        wrig=rign-1;
        for(int i=0;i<wrig;i++){
            white[i]=1;
        }
        white[dest]=0;


        reqf[dest]=0;
        recent=dest;
        int flag0=0;
        while(recent!=0){

                 int count=0,select=-1;
                 double d1,temp,temp2,min=0;

                 while(count < nr){
                     if(white[count]!=1){
                         // for those in the white which are already selected
                       // printf("black %d\n",count);
                         count++;
                         continue;
                     }


                     d1=dist(rigx[recent],rigy[recent],rigx[count],rigy[count]);
                     //printf("distnace %d-- %d--> %lf\n",recent,count,d1);
                     temp=(ship -(((double)np+1)*d1));
                     //printf("temp ship %lf\n",temp);

                     if(temp < 0 ){

                         //for those which are unreachable to the recent rig
                         //printf("unreachable %d -->%d\n",recent,count);
                         count++;
                         continue;
                     }
                     temp=ship -(double)(np+1)*d1;
                     if((temp)>=reqf[recent]){
                         //for those who can reach in single trip
                         //printf("reachable signle trup %d -->%d\n",recent,count);
                         temp2=reqf[recent]+np*d1;
                         //printf("prev reqf[%d]=%lf temp2 =%lf\n\n",count,reqf[count],temp2);
                         if(reqf[count]>temp2){
                             //updating the min food required
                             reqf[count]=temp2;
                            // printf("reqf[%d] =%lf\n",count,reqf[count]);
                         }



                         count++;
                         continue;
                     }

                     temp2=ship-(2*(double)np+1)*d1;
                     if(temp2 <0){
                         count++;
                         continue;
                     }
                     if(temp2>0){

                         double m;
                         double h,tt;
                         h=(reqf[recent]-temp)/temp2;
                         m=(double)ceil(h);
                         //printf("\nm =%lf m=%lf\t",h,m);
                         h=(double)np* m*2*d1 +(double)np*d1 + reqf[recent];
                         //tt=m*(ship-((double)np*2+1)*d1);
                         //h=m*((double)(4*np+1)*d1-ship)+reqf[recent];
                         //printf("h=%lf\n\n",h);

                         if(reqf[count]>h){
                             reqf[count]=h;
                         }
                         //printf("reachable in multiple trips %d--- %d\n",recent,count);
                         //printf("reqf[count]=%lf\n",reqf[count]);
                     }
                     count++;
                 }

                 min=MAX_INT;
                 for(int i=0;i<nr;i++){
                     if(white[i]==1){
                         if(min > reqf[i]){
                             min=reqf[i];
                             select=i;
                         }
                     }
                 }

                 if(select==-1){
                     printf("-1\n");
                     flag=1;
                     break;

                 }
                 else{
                     white[select]=0;

                 }
                 recent=select;
                 //printf("select %d\n",select);



        }
        if(flag!=1){
            printf("%d\n",(int)ceil(reqf[0]));



        }


    }
    return 0;
}


