#include <cmath>
#include <iostream>
#include <vector>
#include <cstdio>
#include <complex>
#include <cstring>

using namespace std;


const long double PI = 2.0 * acos(0.0);

long double dp[1000][40];

void dpr(int N, int M, long double X) {
	for (int i = 0; i <= N; i++) dp[i][1] = sin(X * i);
	for (int i = 0; i <= M; i++) dp[0][i] = 0;

	for (int n = 1; n <= N; ++n) {
		for (int m = 2; m <= M; ++m) {
			dp[n][m] = 0;
			for (int i = 0; i <= n; i++) {
				dp[n][m] += sin(X * i) * dp[n - i][m - 1];
			}
		}
	}
}

const int SIZE = 64;

double a[SIZE][SIZE];
double b[SIZE][SIZE];
double c[SIZE][SIZE];

long double run(int N, int M, long double X) {
	memset(a, 0, sizeof(a));
	memset(b, 0, sizeof(b));
	for (int m = 1; m <= M; m++) {
		b[m - 1][m - 1] = b[M + m - 1][M + m - 1] = 1.0;
		
		a[m - 1][M + m - 1] = 1.0;
		a[M + m - 1][m - 1] = -1.0;
		
		a[M + m - 1][M + m - 1] = 2.0 * cos(X);
		if (m > 1) a[M + m - 1][M + m - 2] = sin(X);
	}
	int power = N - 2;
	while (power) {
		memset(c, 0, sizeof(c));
		if (power & 1) {
			for (int i = 0; i < 2 * M; i++) {
				for (int j = 0; j < 2 * M; j++) {
					for (int k = 0; k < 2 * M; k++) {
						c[i][j] += b[i][k] * a[k][j]; 
					}
				}
			}
			memcpy(b, c, sizeof(c));
			power--;
		} else {
			for (int i = 0; i < 2 * M; i++) {
				for (int j = 0; j < 2 * M; j++) {
					for (int k = 0; k < 2 * M; k++) {
						c[i][j] += a[i][k] * a[k][j]; 
					}
				}
			}
			memcpy(a, c, sizeof(c));
			power >>= 1;
		}
	}
	long double res = 0;
	dpr(2, M, X);
	for (int i = 0; i < M; i++) {
		res += b[2 * M - 1][i] * dp[1][i + 1];
		res += b[2 * M - 1][M + i] * dp[2][i + 1];
	}
	return res;
}

long double f(int n, int m, long double x) {
	if (n <= 10) {
		dpr(n, m, x);
		return dp[n][m];
	}
	return run(n, m, x);
}

int main() {
	int t;
	for (cin >> t; t; t--) {
		int n, m;
		long double x;
		cin >> m >> n >> x;
		cout << f(n, m, x) << endl;
	}
}
