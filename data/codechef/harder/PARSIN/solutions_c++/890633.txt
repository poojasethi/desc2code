#include <memory.h>
#include <stdio.h>
#include <assert.h>

#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <string>
#include <queue>
#include <cmath>

using namespace std;


const int MAN = 60;
double B[MAN][MAN], R[MAN][MAN];
int M, N;
double CosX, SinX;

void Init() {
	for (int i = 0; i < M * 2; ++i) {
		for (int j = 0; j < M * 2; ++j) {
			B[i][j] = 0;
		}
	}
	for (int i = 0; i < M; ++i) {
		B[i][i + M] = 1;
		B[i + M][i] = -1;
		B[i + M][i + M] = 2 * CosX;
		if (i) B[i + M][i + M - 1] = SinX;
	}
}

void MulMatrix(double M1[MAN][MAN], double M2[MAN][MAN], double RE[MAN][MAN]) {
	double tmp[MAN][MAN];
	for (int i = 0; i < M * 2; ++i) {
		for (int j = 0; j < M * 2; ++j) {
			tmp[i][j] = 0;
			for (int k = 0; k < M * 2; ++k) {
				tmp[i][j] += M1[i][k] * M2[k][j];
			}
		}
	}
	for (int i = 0; i < M * 2; ++i) {
		for (int j = 0; j < M * 2; ++j) {
			RE[i][j] = tmp[i][j];
		}
	}
}

void Solve() {
	int e = N;
	--e;
	for (int i = 0; i < M * 2; ++i) {
		for (int j = 0; j < M * 2; ++j) {
			R[i][j] = 0;
		}
		R[i][i] = 1;
	}
	while (e) {
		if (e & 1) {
			MulMatrix(B, R, R);
		}
		MulMatrix(B, B, B);
		e = e >> 1;
	}
	printf("%lf\n", SinX * R[2 * M - 1][M]);
	// printf("%lf\n", CosX *(R[2 * M - 1][2 * M - 1] * M + R[2 * M - 1][2 * M - 2] * (M - 1)));
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
#endif
	int ncase;
	cin >> ncase;
    while (ncase--) {
		double x;
		cin >> M >> N >> x;
		CosX = cos(x);
		SinX = sin(x);
		Init();
		Solve();
	} 
    return 0;
}