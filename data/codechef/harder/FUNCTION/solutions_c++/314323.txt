#include <iostream>
#include <queue>
#include <cstdio>
#include <cstring>
#include <map>
#include <vector>
#include <list>
#include <sstream>
#include <cmath>
#include <ctime>
#include <algorithm>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FOD(i, a, b) for (int i = (a); i >= (b); i--)
#define REP(i, a) for (int i = 0; i < (a); i++)
#define sz(a) ((int)a.size())
#define cl clear()
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define all(a) a.begin(), a.end()
#define sqr(a) ((a) * (a))
#define PI 3.1415926535897932384626433832795

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <double, double> pdd;

vector <pair <int, pii> > a;
int b[20000];
bool c[20000];
int tmp[20000];

int getp(int x)
{
    int k = 0;
    while (b[x] != x)
    {
        tmp[k++] = x;
        x = b[x];
    }
    REP(i, k)
        b[tmp[i]] = x;
    return x;
}

bool join(int x, int y)
{
    x = getp(x), y = getp(y);
    if (x != y && c[x] && c[y])
        return 0;
    if (x == y)
    {
        if (c[x])
            return 0;
        c[x] = 1;
        return 1;
    }
    b[x] = y;
    c[y] = (c[x] || c[y]);
    return 1;
}

bool sol(int n, int m, int &cost)
{
    int k = 0;
    cost = 0;
    REP(i, m)
        if (join(a[i].Y.X, a[i].Y.Y))
            k++, cost += a[i].X;
    if (k < n)
        return 0;
    return 1;
}

int main()
{
    int t;
    scanf("%d", &t);
    a = vector <pair <int, pii> > (50001);
    REP(tt, t)
    {
        int n, m;
        scanf("%d%d", &n, &m);
        memset(c, 0, sizeof(c));
        REP(i, m)
            scanf("%d%d%d", &a[i].Y.X, &a[i].Y.Y, &a[i].X), a[i].Y.Y--, a[i].Y.X--;
        sort(a.begin(), a.begin() + m, greater <pair <int, pii> >());
        REP(i, n)
            b[i] = i, c[i] = 0;
        int s;
        if (!sol(n, m, s))
            printf("impossible\n");
        else
            printf("%d\n", s);
    }
    return 0;
}
