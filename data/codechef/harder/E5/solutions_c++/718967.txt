#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdio>
#include <cstdlib>
using namespace std;
long long ans[31][31][31];
int start[31];
bool used[31];
int lastcircle, lastnon;
int N;
long long getans(int upto, int right, int left) {
    if (ans[upto][right][left]!=-1) return ans[upto][right][left];
    if (upto==N) return ans[upto][right][left]=1;
    if (used[upto]) return ans[upto][right][left] = getans(upto+1,right,left);
    
    ans[upto][right][left]=0;
    if (upto>lastcircle) {
        for (int newright = right-1; newright>=0; newright--) {
            ans[upto][right][left] += getans(upto+1,newright,left+right-newright-1);
        }
    }
    if (left>0 && upto>lastnon) {
        ans[upto][right][left] += getans(upto+1,right,left-1);
    }
    return ans[upto][right][left];
}
int main() {
    int T; scanf("%d",&T); while (T--) {
        int M; scanf("%d %d",&N,&M);
        lastcircle = -1;
        lastnon = -1;
        for (int i=0; i<N; i++) used[i]=false;
        bool noanswers = false;
        for (int i=0; i<M; i++) {
            scanf("%d",&start[i]);
            start[i]--;
            used[start[i]]=true;
            if (start[i]<i) {
                if (start[i]<lastcircle) noanswers=true;
                lastcircle = start[i];
            } else {
                if (start[i]<lastnon) noanswers=true;
                lastnon = start[i];
            }
        }
        for (int i=0; i<lastcircle && i<lastnon; i++) {
            if (!used[i]) noanswers=true;
        }
        if (noanswers) {
            printf("0\n");
            continue;
        } 
        for (int i=0; i<=N; i++)
        for (int j=0; j<=N; j++)
        for (int k=0; k<=N; k++) ans[i][j][k]=-1;
        printf("%lld\n",getans(0,N-M,0));
    }
}
 