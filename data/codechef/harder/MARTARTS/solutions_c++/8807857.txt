#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	105
#define I64	long long
#define INF	(1ll<<50)
#define For(i,a,b)	for(int i=a;i<=b;i++)

int		N,M;
struct	Lin{int u,v;}E[n*n];

struct	Nod{
		I64	x,y;

		Nod	operator +	(const Nod&a)	{return	(Nod){x+a.x,y+a.y};}
		Nod	operator -	(const Nod&a)	{return	(Nod){x-a.x,y-a.y};}

		bool	operator <	(const Nod&a)	const {
			return	x<a.x||(x==a.x&&y<a.y);
		}
		bool	operator >	(const Nod&a)	const {
			return	x>a.x||(x==a.x&&y>a.y);
		}
		bool	operator ==	(const Nod&a)	const {
			return	x==a.x&&y==a.y;
		}
};

namespace	KM{
		int		Tim,VA[n],VB[n],QA[n],QB[n],Mat[n];
		Nod		LA[n],LB[n],w[n][n];

		bool	Cmp(const Lin&a,const Lin&b)	{
			Nod	p=w[a.u][a.v],q=w[b.u][b.v];
			return	p.x>q.x||(p.x==q.x&&p.y<q.y);
		}

		bool	DFS(int u){
			VA[u]=Tim;
			For(v,1,N)	if	(VB[v]!=Tim&&LA[u]+LB[v]==w[u][v]){
				VB[v]=Tim;
				if	(!Mat[v]||DFS(Mat[v])){
					Mat[v]=u;	return	1;
				}
			}	return	0;
		}
		void	Change(){
			Nod	Min=(Nod){INF,INF};	*QA=*QB=0;
			For(i,1,N)	if	(VA[i]==Tim)	QA[++*QA]=i;
			For(i,1,N)	if	(VB[i]!=Tim)	QB[++*QB]=i;
			For(i,1,*QA)	For(j,1,*QB)
				Min=min(Min,LA[QA[i]]+LB[QB[j]]-w[QA[i]][QB[j]]);
			For(i,1,N)	if	(VA[i]==Tim)	LA[i]=LA[i]-Min;
			For(i,1,N)	if	(VB[i]==Tim)	LB[i]=LB[i]+Min;
		}

		void	Find(int s){
			for	(;;){
				Tim++;
				if	(DFS(s))	break;	Change();
			}
		}
		void	Modify(int u,int v,Nod c){
			w[u][v]=c;	LA[u]=(Nod){-INF,-INF};
			For(i,1,N)	{
				LA[u]=max(LA[u],w[u][i]-LB[i]);
				if	(Mat[i]==u)	Mat[i]=0;
			}	Find(u);
		}

		Nod		Res(int u,int v){
			Nod	ret=(Nod){0,0};
			For(i,1,N)	if	(i!=u)	ret=ret+LA[i];
			For(i,1,N)	if	(i!=v)	ret=ret+LB[i];
			return	ret;
		}
		void	Main(){
			scanf("%d",&N);
			For(i,1,N)	For(j,1,N){
				I64 x,y;	scanf("%lld:%lld",&x,&y);
				E[++M]=(Lin){i,j};	w[i][j]=(Nod){x-y,x};				
			}
			sort(E+1,E+M+1,Cmp);

			For(i,1,N)	LA[i]=(Nod){-INF,-INF};
			For(i,1,N)	For(j,1,N)	LA[i]=max(LA[i],w[i][j]);
			For(i,1,N)	Find(i);
		}
};

int		main(){
		KM::Main();	Nod	Ans=(Nod){-INF,-INF};
		For(i,1,M)	{
			if	(KM::w[E[i].u][E[i].v].x<=0){
				Ans=max(Ans,KM::Res(0,0));	break;
			}

			if	(KM::Res(0,0)<Ans)	break;
			KM::Modify(E[i].u,E[i].v,(Nod){INF,0});
			Ans=max(Ans,KM::Res(E[i].u,E[i].v));
			KM::Modify(E[i].u,E[i].v,(Nod){-INF,0});
		}
		printf("%lld %lld\n",Ans.y,Ans.y-Ans.x);
}