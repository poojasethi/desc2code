#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
const db pi=acos(-1);
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
const int mo=1000000007;
const int inf=1061109567;
//const ll inf=1000000000000000000ll;
int qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};
#define x1 x192837465
#define x2 x123456789
#define y1 y192837465
#define y2 y123456789


struct nc{
	ll v,a;
	void rd(){
		gn(a);
		gn(v);
		v=a-v;
	}
}infc,lar;
nc operator+(const nc&a,const nc&b){return (nc){a.v+b.v,a.a+b.a};}
nc operator-(const nc&a,const nc&b){return (nc){a.v-b.v,a.a-b.a};}
nc operator-(const nc&a){return (nc){-a.v,-a.a};}
int operator<(const nc&a,const nc&b){
	if(a.v==b.v)return a.a<b.a;
	else return a.v<b.v;
}
int operator>(const nc&a,const nc&b){
	if(a.v==b.v)return a.a>b.a;
	else return a.v>b.v;
}
int cmp2(const nc&a,const nc&b){
	if(a.v==b.v)return a.a>b.a;
	else return a.v<b.v;
}
nc min(const nc&a,const nc&b){
	return a<b?a:b;
}
nc max(const nc&a,const nc&b){
	return a>b?a:b;
}
////////////////////////////////////
const int MAXV=400+5;
////////////////////////////////////
int n;
nc g[MAXV][MAXV],sl[MAXV],A[MAXV],B[MAXV];
int x[MAXV],y[MAXV],chd[MAXV],fa[MAXV],pre[MAXV];
int qu[MAXV],p,q;
void aug(int v){
	for(int tmp;v;v=tmp){
		tmp=fa[pre[v]];
		fa[pre[v]]=v;
		chd[v]=pre[v];
	}
}
void bfs(int rt){
	for (int i=1;i<=n;i++)x[i]=y[i]=0,sl[i]=infc;
	p=q=0;qu[q++]=rt;
	while(1){
		while(p!=q){
			int u=qu[p++];x[u]=1;nc t;
			for (int v=1;v<=n;v++)if(!y[v]){
				t=A[u]+B[v]-g[u][v];
				if(t.v==0 && t.a==0){//?
					y[v]=1;
					pre[v]=u;
					if(!chd[v]){
						aug(v);
						return;
					}else qu[q++]=chd[v];
				}else if(t<sl[v]){
					sl[v]=t;
					pre[v]=u;
				}
			}
		}
		nc d=infc;
		for (int i=1;i<=n;i++)if(!y[i])d=min(d,sl[i]);
		for (int i=1;i<=n;i++){
			if(x[i])A[i]=A[i]-d;
			if(y[i])B[i]=B[i]+d;
			else sl[i]=sl[i]-d;
		}
		for (int i=1;i<=n;i++)
			if(!y[i] && sl[i].a==0 &&sl[i].v==0){
				if(!chd[i]){
					aug(i);
					return;
				}else{
					y[i]=1;
					qu[q++]=chd[i];
				}
			}
	}
}
nc km(){
	for (int i=1;i<=n;i++){
		A[i]=-infc,B[i]=(nc){0,0};
		for (int j=1;j<=n;j++)A[i]=max(A[i],g[i][j]);
	}
	for (int i=1;i<=n;i++)bfs(i);
	nc su=(nc){0,0};
	for (int i=1;i<=n;i++)su=su+A[i]+B[i];
	return su;
}


struct edge{
	int u,v;
	nc x;
}e[11111];int etot=0;
int cmp(const edge&a,const edge&b){
	return cmp2(a.x,b.x);
}
void upd(int u,int v,nc x){
	chd[fa[u]]=0;
	fa[u]=0;
	g[u][v]=x;
	nc ma=-infc;
	for (int j=1;j<=n;j++)ma=max(ma,g[u][j]-B[j]);
	A[u]=ma;
	bfs(u);	
}
nc ans;
int main(){
	infc.v=infc.a=(ll)1e18;
	lar.v=lar.a=(ll)1e15;
	ans=-infc;
	gn(n);
	for (int i=1;i<=n;i++)
		for (int j=1;j<=n;j++){
			etot++;
			e[etot].u=i;
			e[etot].v=j;
			e[etot].x.rd();
		}
	for (int i=1;i<=n;i++)
		for (int j=1;j<=n;j++)g[i][j]=-lar;
	km();
	sort(e+1,e+1+etot,cmp);
	for (int i=1;i<=etot;i++){
		int u=e[i].u,v=e[i].v;
		upd(u,v,lar);
		nc su;su.a=su.v=0;
		for (int j=1;j<=n;j++)su=su+A[j]+B[j];
		su=su-lar;
		if(e[i].x.v<0 || e[i].x.v==0 && e[i].x.a>0)su=su+e[i].x;
		ans=max(ans,su);
		upd(u,v,e[i].x);
	}
	cout<<ans.a<<" "<<ans.a-ans.v<<endl;
	return 0;
}
