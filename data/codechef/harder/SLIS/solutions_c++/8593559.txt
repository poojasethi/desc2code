#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstdlib>
#define ll long long
using namespace std;
ll mod=1000000007;
struct augment
{
	ll c1,c2;
};
augment na={0,0};	
struct node
{
	int val;
	ll c1,c2;
	pair<int,int> prior;
	node *l,*r;
	augment ex;
};
typedef node* pnode;
augment parent(pnode x,augment a1,augment a2)
{
	augment ans;
	ans.c1=a1.c1+a2.c1+x->c1;
	ans.c2=a1.c2+a2.c2+x->c2;
	ans.c1%=mod;
	ans.c2%=mod;
	return ans;
}
void upd(pnode x)
{
	if(x)
	{
		pnode l=x->l,r=x->r;
		x->ex=parent(x,l?l->ex:na,r?r->ex:na);
	}
}
void split(pnode x,int k,pnode &l, pnode &r)
{
	if(x==NULL)
	{
		l=NULL;
		r=NULL;
	}
	else if(x->val<=k)
	{
		split(x->r,k,x->r,r);
		l=x;
	}
	else
	{
		split(x->l,k,l,x->l);
		r=x;
	}
	upd(x);
}
void merge(pnode &x,pnode l,pnode r)
{
	if(!l)
	{
		x=r;
	}
	else if(!r)
	{
		x=l;
	}
	else if(l->prior > r->prior)
	{
		merge(l->r,l->r,r);
		x=l;
	}
	else
	{
		merge(r->l,l,r->l);
		x=r;
	}
	upd(x);
}
int gcount=0;
pnode nnode(int val,ll c1,ll c2)
{
	pnode ans=new node;
	ans->val=val;
	ans->l=ans->r=NULL;
	ans->c1=c1;
	ans->c2=c2;
	upd(ans);
	ans->prior=make_pair(rand(),gcount++);
	return ans;
}
void insert(pnode &x,pnode n)
{
	if(!x)
	{
		x=n;
	}
	else if(n->prior > x->prior)
	{
		split(x,n->val,n->l,n->r);
		x=n;
	}
	else
	{
		insert(x->val<n->val?x->r:x->l,n);
	}
	upd(x);
}
augment ltm(pnode &x,int k)
{
	if(!x)return na;
	if(x->val >= k)return ltm(x->l,k);
	else
	{
		augment ans=x->l?x->l->ex:na;
		ans.c1+=x->c1;
		ans.c2+=x->c2;
		augment ot=ltm(x->r,k);
		ans.c1+=ot.c1;
		ans.c2+=ot.c2;
		ans.c1%=mod;
		ans.c2%=mod;
		return ans;
	}
}
int arr[1000001];
int a[1000003];
int lis[1000002];
ll n1[1000003];
ll n2[1000003];
pnode tree[1000003];
void doit()
{
	int n;
	ll ans=0;
	scanf("%d",&n);
	for(int i=0;i<n;++i)scanf("%d",&arr[i]);
	int l=0;
	for(int i=0;i<=n;++i){a[i]=1000000003;tree[i]=NULL;}
	for(int i=0;i<n;++i)
	{
		int x=(lower_bound(a,a+n,arr[i]))-a;
		a[x]=arr[i];
		l=max(l,x+1);
		lis[i]=x+1;
		if(x==0)
		{
			n1[i]=1;
			n2[i]=0;
		}
		else if(x==1)
		{
			n1[i]=ltm(tree[x-1],arr[i]).c1;
			n2[i]=1;
		}
		else
		{
			n1[i]=ltm(tree[x-1],arr[i]).c1;
			n2[i]=ltm(tree[x-1],arr[i]).c2 + ltm(tree[x-2],arr[i]).c1;
			n2[i]%=mod;
		}
		insert(tree[x],nnode(arr[i],n1[i],n2[i]));
	}
	for(int i=0;i<n;++i)
	{
		if(lis[i]==l)ans+=n2[i];
		else if(lis[i]==l-1)ans+=n1[i];
		ans%=mod;
	}
	printf("%lld\n",ans);
}
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		doit();
	}
	return 0;
}
