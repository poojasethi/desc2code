#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cassert>
using namespace std;

#define sq 300
#define maxn 1000010
#define mod 1000000007

struct Solution
{
	int maxv1, maxv2;
	int nr1, nr2;

	void update(Solution &other)
	{
		if (other.maxv1 >= maxv1)
		{
			if (maxv1 != other.maxv1)
			{
				maxv2 = maxv1;
				nr2 = nr1;
			}

			if (maxv1 == other.maxv1)
				nr1 = (nr1 + other.nr1)%mod;
			else nr1 = other.nr1;

			maxv1 = other.maxv1;

			if (other.maxv2 == maxv2)
				nr2 = (nr2 + other.nr2)%mod;
			else if (other.maxv2 > maxv2)
			{
				maxv2 = other.maxv2;
				nr2 = other.nr2;
			}
		}
		else if (other.maxv1 > maxv2)
		{
			nr2 = other.nr1;
			maxv2 = other.maxv1;
		}
		else if (other.maxv1 == maxv2)
		{
			nr2 = (nr2 + other.nr1)%mod;
		}
	}

	Solution()
	{
		nr1 = nr2 = 0;
		maxv1 = 0;
		maxv2 = -1;
	}
}aib[maxn];
int a[maxn], maxv;

int LSB(int i)
{
	return i&(-i);
}

void update (int i, Solution &sol)
{
	for (; i <= maxv; i += LSB(i))
	{
		aib[i].update(sol);
	}
}

Solution query (int i)
{
	Solution s;
	for (; i > 0; i -= LSB(i))
	{
		s.update(aib[i]);
	}
	return s;
}

int main()
{
	//freopen("test.in","r",stdin);
	int test;
	cin >> test;

	for (;test; --test)
	{
		int n;
		cin >> n;

		vector<pair<int,int> >sorter;
		for (int i = 1; i <= n; ++i)
		{
			cin >> a[i];
			sorter.push_back(make_pair(a[i],i));
		}
		sort(sorter.begin(), sorter.end());

		maxv = 0;
		for (int i = 0; i < sorter.size(); ++i)
		{
			if (i == 0 || sorter[i].first != sorter[i-1].first)
				++maxv;
			a[sorter[i].second] = maxv;
		}

		for (int i = 1; i <= maxv; ++i)
		{
			Solution s;
			aib[i] = s;
		}

		Solution ans;
		for (int i = 1; i <= n; ++i)
		{
			Solution sol = query(a[i]-1);
			sol.maxv1++;
			sol.maxv2++;
			if (sol.maxv1 == 1)
				++sol.nr1;
			if (sol.maxv2 == 1)
				++sol.nr2;
			ans.update(sol);
			update(a[i], sol);
		}

		cout << ans.nr2 << "\n";
	}
}
