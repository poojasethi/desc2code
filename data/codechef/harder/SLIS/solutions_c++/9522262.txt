#include<bits/stdc++.h>
using namespace std;
int rank[100010],lis[100010],b[100010];
long long mod=1e9+7;
struct l{
	int maxi,nmaxi;
	long long smaxi,snmaxi;
}tree[400040];
struct node{
	int n,idx;
}arr[100010];
bool operator<(node a,node b)
{
	if(a.n!=b.n)return a.n<b.n;
	return a.idx<b.idx;
}
l merge(l a,l b)
{
	l temp;
	if(a.maxi==b.maxi)
	{
		temp.maxi=a.maxi;
		temp.nmaxi=(a.nmaxi+b.nmaxi)%mod;
		if(a.smaxi>b.smaxi)
		{
			temp.smaxi=a.smaxi;temp.snmaxi=a.snmaxi;
		}
		else if(a.smaxi<b.smaxi)
		{
			temp.smaxi=b.smaxi;temp.snmaxi=b.snmaxi;
		}
		else
		{
			temp.smaxi=a.smaxi;temp.snmaxi=(a.snmaxi+b.snmaxi)%mod;
		}
	}
	else if(a.maxi>b.maxi)
	{
		temp.maxi=a.maxi;temp.nmaxi=a.nmaxi;
		if(a.smaxi>b.maxi)
		{
			temp.smaxi=a.smaxi;temp.snmaxi=a.snmaxi;
		}
		else if(a.smaxi<b.maxi)
		{
			temp.smaxi=b.maxi;temp.snmaxi=b.nmaxi;
		}
		else
		{
			temp.smaxi=a.smaxi;temp.snmaxi=(a.snmaxi+b.nmaxi)%mod;
		}
	}
	else
	{
		temp.maxi=b.maxi;temp.nmaxi=b.nmaxi;
		if(b.smaxi>a.maxi)
		{
			temp.smaxi=b.smaxi;temp.snmaxi=b.snmaxi;
		}
		else if(b.smaxi<a.maxi)
		{
			temp.smaxi=a.maxi;temp.snmaxi=a.nmaxi;
		}
		else
		{
			temp.smaxi=b.smaxi;temp.snmaxi=(a.nmaxi+b.snmaxi)%mod;
		}
	}
	return temp;
}
void update(int nodeno,int tl,int tr,int pos,l temp)
{
	if(tl==pos && tr==tl)
	{
		tree[nodeno]=merge(tree[nodeno],temp);return;
	}
	int mid=(tl+tr)/2;
	if(pos<=mid)update(2*nodeno,tl,mid,pos,temp);
	else update(2*nodeno+1,mid+1,tr,pos,temp);
	tree[nodeno]=merge(tree[2*nodeno],tree[2*nodeno+1]);
}
l query(int nodeno,int tl,int tr,int l,int r)
{
	if(tl==l && tr==r)
	return tree[nodeno];
	int mid=(tl+tr)/2;
	if(r<=mid)return query(2*nodeno,tl,mid,l,r);
	else if(l>mid)return query(2*nodeno+1,mid+1,tr,l,r);
	else
	{
		return merge(query(2*nodeno,tl,mid,l,mid),query(2*nodeno+1,mid+1,tr,mid+1,r));
	}
}
main()
{
	int tc,i;
	scanf("%d",&tc);
	while(tc--)
	{
		int n;
		scanf("%d",&n);
		for(i=0;i<n;i++)
		{
			scanf("%d",&arr[i].n);
			b[i]=arr[i].n;arr[i].idx=i;
		}
		sort(arr,arr+n);int cnt=1;
		for(i=0;i<n;i++)
		{
			rank[arr[i].idx]=(i==0 || arr[i].n==arr[i-1].n)?cnt:++cnt;
		}
		for(i=0;i<=4*cnt;i++){tree[i].maxi=tree[i].nmaxi=tree[i].snmaxi=0;tree[i].smaxi=-1;}
		//printf("compression done\n");
		//printf("cnt=%d\n",cnt);
		for(i=0;i<n;i++)
		{//printf("i=%d rank=%d\n",i,rank[i]);
			l temp1,temp;
			if(i==0 || rank[i]==1)
			{
				temp1=(l){1,1,0,0};
			}
			else
			{
				temp=query(1,1,cnt,1,rank[i]-1);
				//printf("after query\n");
				temp1.maxi=temp.maxi+1;
				temp1.smaxi=temp.smaxi+1;
				if(temp1.maxi>1)
				temp1.nmaxi=temp.nmaxi;
				else
				temp1.nmaxi=1;
				if(temp1.smaxi>1)
				temp1.snmaxi=temp.snmaxi;
				else
				temp1.snmaxi=1;
			}
			update(1,1,cnt,rank[i],temp1);
			//l temp2=query(1,1,cnt,1,rank[i]);
			//printf("no of lis at i=%d is %lld slis=%lld smax=%d max=%d\n",i,temp2.nmaxi,temp2.snmaxi,temp2.smaxi,temp2.maxi);
		}
		printf("%lld\n",query(1,1,cnt,1,cnt).snmaxi);
	}
}