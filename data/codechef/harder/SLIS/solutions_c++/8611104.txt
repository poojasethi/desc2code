/* 

   SHUBHAM RAI-IIIT Hyderabad

 */
#include<bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(i=a;i<b;i++)
#define REP(i,a) for(i=0;i<a;i++)
#define LLD long long int
#define MOD 1000000007
#define si(n) scanf("%d",&n);
#define si2(n,m) scanf("%d%d",&n,&m);
#define sl(n) scanf("%lld",&n);
#define TR(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define F first
#define S second
#define pb push_back
#define mp make_pair
typedef pair<int,int> PII;
#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

int a[100002];
map<int,int> m;
map<int,int>::iterator it;
struct Node
{
	int mxlen,mxno,smxno;
	Node()
	{
		mxlen=0;
		mxno=0;
		smxno=0;
	}
};
Node segTree[300002];
Node merge(Node a,Node b)
{
	Node ret;
	ret.mxlen=max(a.mxlen,b.mxlen);
	if(ret.mxlen==a.mxlen)
	{
		ret.mxno+=a.mxno;
		ret.smxno+=a.smxno;
	}
	else if(ret.mxlen==a.mxlen+1)
		ret.smxno+=a.mxno;
	if(ret.mxlen==b.mxlen)
	{
		ret.mxno+=b.mxno;
		ret.smxno+=b.smxno;
	}
	else if(ret.mxlen==b.mxlen+1)
		ret.smxno+=b.mxno;
	ret.mxno%=MOD;
	ret.smxno%=MOD;
	return ret;
}
Node query(int s,int e,int l,int r,int index)
{
	if(e<l || s>r)
		return Node();
	if(s>=l && e<=r)
		return segTree[index];
	int mid=(s+e)/2;
	return merge(query(s,mid,l,r,2*index),query(mid+1,e,l,r,2*index+1));
}
void update(int s,int e,int pos,Node val,int index)
{
	if(pos<s || pos>e)
		return;
	segTree[index]=merge(val,segTree[index]);
	if(s==e)
		return;
	int mid=(s+e)/2;
	update(s,mid,pos,val,2*index);
	update(mid+1,e,pos,val,2*index+1);
}
int main()
{
	int t;
	si(t);
	while(t--)
	{
		m.clear();
		int n,i,j;
		REP(i,300001)
			segTree[i].mxlen=segTree[i].mxno=segTree[i].smxno=0;
		si(n);
		REP(i,n)
		{
			si(a[i]);
			m[a[i]];
		}
		int cnt=1;
		for(it=m.begin();it!=m.end();it++)
			it->S=cnt++;
		Node zero;
		zero.mxno=1;
		update(0,cnt,0,zero,1);
		REP(i,n)
		{
			Node t=query(0,cnt,0,m[a[i]]-1,1);
			t.mxlen+=1;
			update(0,cnt,m[a[i]],t,1);
		}
		printf("%d\n",segTree[1].smxno);
	}
	return 0;
}
