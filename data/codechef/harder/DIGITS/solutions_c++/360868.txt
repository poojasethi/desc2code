#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
#include <set>
#include <map>

using namespace std;

#define REP(i,a,b) for(i = (int)(a); i < (int)(b); i++)
#define rep(i,n) REP(i,0,n)

typedef long long ll;

const ll mod = 1000000007LL;

typedef pair<int,pair<int,int> > T;
typedef vector<T> V;

V v(700*3*700*2);

inline void init() {
  int i, j;
  ll m = 1, n = 1;
  rep(i,700*3) {
    n = m;
    rep(j,700*2-i*2/3) {
      v.push_back(make_pair((int)n,make_pair(i,j)));
      n = 3LL * n % mod;
    }
    m = 2LL * m % mod;
  }
  sort(v.begin(), v.end());
}

void extgcd(ll a, ll b, ll &x, ll &y) {
  if(b == 0) {
    x = 1;
    y = 0;
    return;
  }
  ll q = a / b, r = a % b, x1, y1;
  extgcd(b, r, x1, y1);
  x = y1;
  y = x1 - y1 * q;
}

inline ll inverse(ll a, ll p) {
  ll x, y;
  extgcd(a, p, x, y);
  return x;
}

inline int set_num(int count[10], int n2, int n3, int n5, int n7) {
  count[2] = n2;
  count[3] = n3;
  count[5] = n5;
  count[7] = n7;

  count[9] = count[3] / 2; count[3] %= 2;
  count[8] = count[2] / 3; count[2] %= 3;
  const int n6 = min(count[2], count[3]);
  count[6] = n6; count[2] -= n6; count[3] -= n6;
  count[4] = count[2] / 2; count[2] %= 2;

  int ret = 0, i;
  rep(i,10) ret += count[i];
  return ret;
}

inline void copy(int src[10], int dst[10]) {
  int i;
  REP(i,2,10) dst[i] = src[i];
}

int main() {
  init();
  int i,j,t; cin >> t;
  const ll inv5 = inverse(5, mod), inv7 = inverse(7, mod);
  const pair<int,int> dummy = make_pair(0,0);
  while(t-- > 0) {
    ll n; cin >> n;
    if(n == 0LL) { cout << 10 << endl; continue; }
    if(n == 1LL) { cout << 1  << endl; continue; }
    ll x, y = n;
    int minsum = 1000;
    int count[10] = {}, temp[10] = {};
    rep(i,700) {
      x = y;
      rep(j,700-i) {
	T u = make_pair(x,dummy);
	V::iterator iter = lower_bound(v.begin(), v.end(), u);
	if(iter->first == x) {
	  int cnt2 = iter->second.first, cnt3 = iter->second.second;
	  const int sum = set_num(temp, cnt2, cnt3, i, j);
	  if(sum < minsum) {
	    copy(temp, count);
	    minsum = sum;
	  }
	}
	x = x*inv7%mod;
      }
      y = y*inv5%mod;
    }
    string res;
    rep(i,10) while(count[i]-- > 0) res += (char)(i+'0');
    cout << res << endl;
  }
  return 0;
}
