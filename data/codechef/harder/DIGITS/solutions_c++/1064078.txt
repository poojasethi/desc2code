#include <stdio.h>
#include <map>
#include <algorithm>

using std::map;
using std::pair;

const int P =    1000000007;
const int REV_5 = 400000003;
const int REV_7 = 142857144;

//map<int, pair<int, int> > h;

struct Item {
	int value;
	int a;
	int b;
} w[1500000];

int cntW = 0;

int cmp(const void* aa, const void* bb) {
	Item* a = (Item*) aa;
	Item* b = (Item*) bb;
	if (a->value != b->value)
		return a->value < b->value ? -1 : 1;
	return 0;
}

void init() {
	long long powA = 1;
	for (int a=0; a / 3 < 700; a++) {
		long long powB = powA;
		for (int b=0; a / 3 + b / 2 < 700; b++) {
			w[cntW].value = (int)powB;
			w[cntW].a = a;
			w[cntW].b = b;
			cntW++;
			powB = (powB * 3) % P;
		}
		powA = (powA * 2) % P;
	}
//	printf("cnt = %d\n", cntW);
	qsort(w, cntW, sizeof(w[0]), cmp);
}

int find(int value) {
	int l = 0, r = cntW - 1;
	while (l <= r) {
		int m = (l + r) / 2;
		if (w[m].value == value)
			return m;
		if (w[m].value < value)
			l = m + 1;
		else
			r = m - 1;
	}
	return -1;
}

const int MAXL = 910;

int res[MAXL];
int tmp[MAXL];
int minLen;

bool less(int len) {
	for (int i=len - 1; i >= 0; i--) 
		if (res[i] != tmp[i])
			return tmp[i] < res[i];
	return false;
}

void check(int a, int b, int c, int d) {
	if (a/3+b/2+c+d > 900)
		return;
//	memset(tmp, 0, sizeof(tmp));
	int i = 0;
	while (b >= 2) { // 9
		tmp[i++] = 9;
		b -= 2;
	}
	while (a >= 3) { // 8
		tmp[i++] = 8;
		a -= 3;
	}
	while (d >= 1) { // 7
		tmp[i++] = 7;
		d--;
	}
	while (a >= 1 && b >= 1) { // 6
		tmp[i++] = 6;
		a--;
		b--;
	}
	while (c >= 1) { // 5
		tmp[i++] = 5;
		c--;
	}
	while (a >= 2) { // 4
		tmp[i++] = 4;
		a -= 2;
	}
	while (b >= 1) { // 3
		tmp[i++] = 3;
		b--;
	}
	while (a >= 1) { // 2
		tmp[i++] = 2;
		a--;
	}
	int len = i;
	if (minLen > len || minLen == len && less(len)) {
//		printf("cnahge\n");
		for (int i=0; i < len; i++)
			res[i] = tmp[i];
		minLen = len;
	}
}

void solve(int n) {
	if (n == 0) {
		printf("10\n");
		return;
	}
	if (n == 1) {
		printf("1\n");
		return;
	}
	minLen = 1000;
	long long rpowC = n;
	for (int c = 0; c < 700; ++c) {
		long long rpowD = rpowC;
		for (int d = 0; c + d < 700; ++d) {
			int ind = find(rpowD);
		    if (ind != -1) {
//   		    	printf("(%d, %d, %d, %d) %d\n", w[ind].a, w[ind].b, c, d, (int)rpowD);
//   		    	fflush(stdout);
		        check(w[ind].a, w[ind].b, c, d);
		    }
			rpowD = (rpowD * REV_7)	% P;
		}
		rpowC = (rpowC * REV_5) % P;
	}
	for (int i=minLen - 1; i >= 0; i--)
		printf("%d", res[i]);
	printf("\n");
}

int main() {
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	init();
	int cnt;
	scanf("%d", &cnt);
	for (int tst = 1; tst <= cnt; ++tst) {
		int n;
		scanf("%d", &n);		
		solve(n);
	}
}
