//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;


#define FOR(i,a,b)						for(int i=a;i<b;i++)
#define REP(i,n)						FOR(i,0,n)
#define pb								push_back
#define s(n)							scanf("%d",&n)
#define sl(n) 							scanf("%lld",&n)
#define sf(n) 							scanf("%lf",&n)
#define fill(a,v) 						memset(a, v, sizeof a)
#define sz								size()
#define INF								(int)1e9
#define EPS								1e-9
#define bitcount						__builtin_popcount
#define all(x)							x.begin(), x.end()
#define gcd								__gcd
#define maX(a,b)						(a>b)?a:b
#define miN(a,b)						(a<b)?a:b							


typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef pair<int, int > PII;


/*Main code begins now */
int testnum;
LL M=1000000007;
LL P;

LL cfa,cfb;

struct prod
{
	int p;
	int n2,n3;
};

bool operator<(prod p1,prod p2)
{
	return (p1.p < p2.p);
}

vector <prod> ss;


void extgcd(LL a,LL b)
{
	if(b==0)
	{
		cfa=1;
		cfb=0;
	}
	else
	{
		extgcd(b,a%b);
		LL t=cfb;
		cfb=cfa-(a/b)*cfb;
		cfa=t;
	}
}



void preprocess()
{
	ss.clear();
	LL p1,p2;
	p1=1;
	for(int i=0;i/3<700;i++)
	{
		p2=p1;
		for(int j=0;j/2 + i/3 < 700 ;j++)
		{
			prod z;
			z.p=p2;
			z.n2=i;
			z.n3=j;
			
			ss.pb(z);
			
			p2=(p2*3)%M;
		}
		p1=(p1*2)%M;
	}
	
	sort(ss.begin(), ss.end());
}

struct bignum
{
	int len;
	int num[10];
};

bool operator <(bignum a,bignum b)
{
	if(a.len<b.len)
		return true;
	if(a.len>b.len)
		return false;
	for(int i=2;i<=9;i++)
	{
		if(a.num[2]>b.num[2])
			return true;
		if(a.num[2]<b.num[2])
			return false;
	}
	return false;
}

bignum getBignum(int n2,int n3,int n5,int n7)
{
	bignum ans;
	fill(ans.num,0);
	ans.len=0;
	
	while(n3>=2)
	{
		ans.num[9]++;
		ans.len++;
		n3-=2;
	}
	while(n2>=3)
	{
		ans.num[8]++;
		ans.len++;
		n2-=3;
	}
	while(n7>=1)
	{
		ans.num[7]++;
		ans.len++;
		n7--;
	}
	while(n2>=1 && n3>=1)
	{
		ans.num[6]++;
		ans.len++;
		n2--; n3--;
	}
	while(n5>=1)
	{
		ans.num[5]++;
		ans.len++;
		n5--;
	}
	while(n2>=2)
	{
		ans.num[4]++;
		ans.len++;
		n2-=2;
	}
	while(n3>=1)
	{
		ans.num[3]++;
		ans.len++;
		n3--;
	}
	while(n2>=1)
	{
		ans.num[2]++;
		ans.len++;
		n2--;
	}
	return ans;
}

void print(bignum ans)
{
	
	for(int i=2;i<=9;i++)
	{
		for(int j=0;j<ans.num[i];j++)
			printf("%d",i);
	}
	printf("\n");
}

void solve()
{
	if(P==0)
	{
		cout<<10<<endl;
		return;
	}
	if(P<10)
	{
		cout<<P<<endl;
		return;
	}
	
	prod sol;
	bignum curr,min;
	min.len=699;
	fill(min.num, 0);
	min.num[9]=699;
	vector<prod>::iterator lo,hi;
	
	LL p1,p2,z;
	p1=1;
	
	for(int i=0;i<=min.len;i++)
	{
		p2=p1;
		for(int j=0;i+j<=min.len;j++)
		{
			extgcd(M,p2);
			while(cfb<0)
				cfb+=M;
			if(cfb>=M)
				cfb-=M;
			z=(cfb*P)%M;
			prod zz;
			zz.p=z;
			
			lo=lower_bound(ss.begin(), ss.end(), zz);
			hi=upper_bound(ss.begin(), ss.end(), zz);

			for(;lo<hi;lo++)
			{
				sol=ss[lo-ss.begin()];;
				if(sol.n2/3 + sol.n3/2 + i + j > 700 || sol.n2/3 + sol.n3/2 + i + j > min.len)	continue;
				curr=getBignum(sol.n2,sol.n3,i,j);
				
				if(curr<min)
					min=curr;					
			}
			
			p2 = (p2*7)%M;
		}
		p1 = (p1*5)%M;
	}
	
	print(min);
			

}

void input()
{
	sl(P);
}


int main()
{
	preprocess();
	int T; s(T);
	for(testnum=1;testnum<=T;testnum++)
	{
		input();
		solve();
	}
}
