#include <cstdio>
#include <cassert>
#include <algorithm>
using namespace std;
 
#define MOD 1000000007
 
pair<int, pair<int, int> > six[1500000];
int cnt=0;
const int inv5=400000003, inv7=142857144;
 
void init(){
	cnt=0;
	int t=1;
	for(int two=0; two<2100; two++, t=2*t%MOD){
		int tt=t;
		for(int three=0; three<1400; three++, tt=3ll*tt%MOD){
			int digits= (three)/2 + (three&1 ? ((two+4)/3) : (two+2)/3);
			if(digits>=700)
				break;
			six[cnt]=make_pair(tt, make_pair(digits, (two<<16)+three));
			cnt++;
		}
	}
	sort(six, six+cnt);
}
 
int smaller(int *a, int *b){
	for(int i=0; i<10; i++){
		if(a[i]>b[i])
			return 1;
		if(a[i]<b[i])
			return 0;
	}
	return 0;
}
 
void solve(int P){
	int bestlen=700, best[10]={0};
	int t=1, invt=1;
	for(int fiveseven=0; fiveseven<=bestlen; fiveseven++){
		int tt=t, invtt=invt;
		for(int five=0; five<=fiveseven; five++){
			int seven=fiveseven-five;
			int twothree=(long long)invtt*P%MOD;
			int pos=lower_bound(six, six+cnt, make_pair(twothree, make_pair(0,0)))-six;
			if(six[pos].first==twothree){
				int digits=six[pos].second.first+fiveseven;
				if(digits<=bestlen){
					int tmp[10]={0};
					int two=six[pos].second.second>>16;
					int three=six[pos].second.second&0xffff;
					tmp[9]=three/2;
					three%=2;
					tmp[8]=two/3;
					two%=3;
					tmp[7]=seven;
					if(two && three){
						tmp[6]=1;
						two--;
						three--;
					}
					tmp[5]=five;
					tmp[4]=two/2;
					two%=2;
					tmp[3]=three;
					tmp[2]=two;
					if(digits<bestlen || smaller(tmp, best)){
						bestlen=digits;
						for(int i=0; i<10; i++)
							best[i]=tmp[i];
					}
				}
			}
			tt=5ll*inv7*tt%MOD;
			invtt=7ll*inv5*invtt%MOD;
		}
		t=7ll*t%MOD;
		invt=(long long)inv7*invt%MOD;
	}
	assert(bestlen<=613);
	for(int i=0; i<10; i++)
		for(int j=0; j<best[i]; j++)
			putchar(i+'0');
	putchar('\n');
}
 
int main(){
	init();
	int T;
	scanf("%d", &T);
	while(T--){
		int P;
		scanf("%d", &P);
		if(P==0)
			puts("10");
		else if(P<10)
			printf("%d\n", P);
		else
			solve(P);
	}
	return 0;
} 