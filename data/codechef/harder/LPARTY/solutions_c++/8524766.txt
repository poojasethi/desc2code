#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#define unt unsigned int
#define For(i,x,y) for(int i=x;i<=y;i++)
#define Forn(i,x,y) for(int i=x;i>=y;i--)
using namespace std;
 
unt suf[10005];
int n,m,T;
char st[15];
struct state{
    unt gai;
    int cost;
}A[10005],F[2][5000005],tmp;
int a[10005],tot,cov[10005],t[5],Ans;
int u[10005];
 
void dfs(int x,int c,int y=0){
    if(x>n){
        int cnt=0;
        unt fu=0;
        For(i,1,m) if((c&a[i])==c) ++cnt,fu|=(1ll<<(i-1));
        if((1<<(n-y))==cnt) A[++tot]=(state){fu,y};
        return;
    }
    dfs(x+1,c*4,y);
    dfs(x+1,c*4+1,y+1);
    dfs(x+1,c*4+2,y+1);
}
 
inline int cmp1(const state &A,const state &B){
    return (A.gai!=B.gai)?(A.gai<B.gai):(A.cost<B.cost);
}
 
inline int cmp(const state &A,const state &B){
    return A.gai>B.gai;
}
 
int main(){
//    freopen("allegro.in","r",stdin);
//    freopen("allegro.out","w",stdout);
    scanf("%d",&T);
    while(T--){
        scanf("%d%d",&n,&m);
        For(i,1,m) a[i]=0;
        For(i,1,m){
            scanf("%s",st+1);
            For(j,1,n){
                a[i]<<=2;
                if(st[j]>='a' && st[j]<='z') a[i]+=2;else a[i]++;
            }
        }
        tot=0;
        sort(a+1,a+m+1);
        m=unique(a+1,a+m+1)-(a+1);
        if(m==1){printf("%d\n",n);continue;}
        if(m==(1<<n)){printf("0\n");continue;}
        dfs(1,0); *u=0; 
        sort(A+1,A+tot+1,cmp);
        For(i,1,tot) cov[i]=0;
        For(i,1,tot) For(j,1,tot) if((i!=j) && (A[i].gai&A[j].gai)==A[j].gai) cov[j]=1;
        For(i,1,tot) if(!cov[i]) u[++*u]=i;
        suf[*u+1]=0;
        Forn(i,*u,1) suf[i]=suf[i+1]|A[u[i]].gai;
        F[0][t[0]=1]=(state){0,0};
        unt U=1ll<<m; --U; Ans=n*m;
        For(k,1,*u){
            int i=u[k];
            tmp=A[i];
            int p=k&1,q=p^1,cnt=t[q],&now=t[p]; now=0;
            For(j,1,cnt) if((F[q][j].gai|suf[k])==U){
                if(F[q][j].cost<Ans) F[p][++now]=F[q][j];
                if(F[q][j].cost+tmp.cost>=Ans) continue;
                if((tmp.gai|F[q][j].gai)==F[q][j].gai)continue;
                if((F[q][j].gai|tmp.gai)==U){
                    Ans=min(Ans,F[q][j].cost+tmp.cost);
                    continue;
                }
                F[p][++now]=(state){F[q][j].gai|tmp.gai,F[q][j].cost+tmp.cost};
            }
            sort(F[p]+1,F[p]+now+1,cmp1);
            int nowtmp=0;
            For(i,1,now){
                int j;
                for(j=i;F[p][j].gai==F[p][i].gai;j++);
                F[p][++nowtmp]=F[p][i];
                i=j-1;
            }
            now=nowtmp;
        } printf("%d\n",Ans);
    }
    return 0;
}