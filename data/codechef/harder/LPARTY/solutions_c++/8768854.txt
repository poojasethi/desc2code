#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
int qp(int a,ll b,int mo){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}
const int mo=1000000007;
int n,m;
int bo[32];
char s[11];

int bb[1111];

int lis[1111];int ltot=0;

int f[1111];
int cnt[1111];
int ne;

int mi;
int cmp(int i,int j){
	return f[i]<f[j];
}
int suf[1111];

void dfs(int i,int cur,int cost){
	if(cost>=mi)return;
	if(cur==ne){
		mi=min(mi,cost);
		return;
	}
	if((suf[i]|cur)!=ne)return;
	dfs(i+1,cur,cost);
	dfs(i+1,cur|f[lis[i]],cost+cnt[lis[i]]);
}
int main()
{
	int tes;
	gn(tes);
	while(tes--){
		gn(n);gn(m);
		memset(bo,0,sizeof(bo));
		memset(bb,0,sizeof(bb));
		memset(f,0,sizeof(f));
		ltot=0;
		for (int i=1;i<=m;i++){
			int u=0;
			scanf("%s",s);
			for (int j=0;j<n;j++)if(s[j]>='A' && s[j]<='Z')u|=1<<j;
			//scanf("%d",&u);
			bo[u]=1;
		}
		for (int i=0;i<1<<(2*n);i++){
			int x=i;
			int bo=0;
			int cn=0;
			for (int j=0;j<n;j++){
				if(((x>>(2*j))&3)==3){
					bo=1;
					break;
				}else if(((x>>(2*j))&3)!=0){
					cn++;
				}
			}
			if(bo)continue;
			bb[x]=1;
			cnt[x]=cn;
		}
		for (int i=0;i<1<<n;i++){
			for (int j=0;j<1<<n;j++){
				int su=0;
				for (int k=0;k<n;k++)if(1<<k&j){
					if(1<<k&i)su|=2<<(k*2);
					else su|=1<<(k*2);
				}
				if(bo[i]==0)bb[su]=0;
				f[su]|=1<<i;
			}
		}
		while(1){
			int bo=0;
			for (int i=0;i<1<<(2*n);i++)if(bb[i]){
				for (int j=0;j<n;j++)if((i>>2*j)&3){
					int x=i^(3<<2*j);
					if(bb[x]){
						bb[x]=bb[i]=0;
						bo=1;
					}
				}
				for (int j=(i-1)&i;j;j=(j-1)&i){
					if(bb[j]){
						bo=1;
						bb[i]=0;
						break;
					}
				}
			}
			if(!bo)break;
		}

		ne=0;
		for (int i=0;i<1<<n;i++)if(bo[i])ne|=1<<i;
		mi=1000000000;	
		for (int i=0;i<1<<2*n;i++)if(bb[i]){
			lis[++ltot]=i;
		}
		sort(lis+1,lis+1+ltot,cmp);
		suf[ltot+1]=0;
		for (int i=ltot;i>=1;i--)suf[i]=suf[i+1]|f[lis[i]];
		dfs(1,0,0);
		printf("%d\n",mi);
	}
	return 0;
}
