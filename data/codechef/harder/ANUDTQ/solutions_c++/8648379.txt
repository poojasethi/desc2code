#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	400005
#define INF	(1<<30)
#define I64	long long
#define For(i,a,b)	for(int i=a;i<=b;i++)

int		N,Q,C,D,Rt,V[n],L[n],R[n],st[n],fa[n],ch[n][2];
struct	Lin{int v,next;}E[n];

struct	Nod{
		int	tag,val,add,siz;I64	sum;
		void	Up(int v){
			if	(tag)	val+=v;	add+=v;	sum+=1ll*v*siz;
		}
}T[n];

void	Link(int u,int v){
		E[++D]=(Lin){v,st[u]};	st[u]=D;
		E[++D]=(Lin){u,st[v]};	st[v]=D;
}
void	DFS(int u,int f){
		L[u]=++C;	T[C]=(Nod){1,V[u],0,0,0};
		for (int i=st[u],v;i;i=E[i].next)
			if	((v=E[i].v)!=f)	DFS(v,u);	R[u]=++C;
}

void	Up(int u){
		T[u].siz=T[ch[u][0]].siz+T[ch[u][1]].siz+T[u].tag;
		T[u].sum=T[ch[u][0]].sum+T[ch[u][1]].sum+T[u].val;
}
void	Dn(int u){
		if	(T[u].add){
			if	(ch[u][0])	T[ch[u][0]].Up(T[u].add);
			if	(ch[u][1])	T[ch[u][1]].Up(T[u].add);
			T[u].add=0;
		}
}

void	Rot(int x){
		int y=fa[x],z=fa[y],k=ch[y][0]==x,t;
		if	(t=ch[y][!k]=ch[x][k])	fa[t]=y;
		if	(fa[x]=z)	ch[z][ch[z][1]==y]=x;
		ch[fa[y]=x][k]=y;	Up(y);
}
void	Splay(int x,int Aim=0){
		for (;fa[x]!=Aim;Rot(x)){
			int y=fa[x],z=fa[y];	Dn(z);Dn(y);Dn(x);
			if	(z!=Aim)	(ch[y][0]==x^ch[z][0]==y)?Rot(x):Rot(y);
		}	if	(!Aim)	Rt=x;	Up(x);
}

void	Build(int&u,int l,int r,int f){
		fa[u=l+r>>1]=f;
		if	(l<u)	Build(ch[u][0],l,u-1,u);
		if	(u<r)	Build(ch[u][1],u+1,r,u);	Up(u);
}
int		Pre(int x)	{
		Splay(x);	for (x=ch[x][0];ch[x][1];)	x=ch[x][1];
		return	x;
}
int		Suf(int x)	{
		Splay(x);	for (x=ch[x][1];ch[x][0];)	x=ch[x][0];
		return	x;
}

int		main(){
		scanf("%d",&N);
		For(i,1,N)	scanf("%d",&V[i]);
		for (int i=1,u,v;i<N;i++)
			scanf("%d%d",&u,&v),Link(u+1,v+1);
		C++;DFS(1,0);C++;	Build(Rt,1,C,0);

		scanf("%d",&Q);	I64 Ans=0;
		for (int k,v;Q--;)	{
			I64	x;	scanf("%d%lld",&k,&x);x+=Ans+1;
			if	(k==1)	{
				scanf("%d",&V[++N]);
				T[L[N]=++C]=(Nod){1,V[N],0,0,0};	R[N]=++C;
				ch[L[N]][1]=R[N];	fa[R[N]]=L[N];

				int	l=L[x],r=Suf(l);
				Splay(l);	Splay(r,l);	ch[r][0]=L[N];	fa[L[N]]=r;	Splay(R[N]);
			}	else
			if	(k==2)	{
				scanf("%d",&v);
				int l=Pre(L[x]),r=Suf(R[x]);
				Splay(l);	Splay(r,l);	T[ch[r][0]].Up(v);	Splay(ch[r][0]);
			}	else
			if	(k==3)	{
				int l=Pre(L[x]),r=Suf(R[x]);
				Splay(l);	Splay(r,l);	ch[r][0]=0;	Splay(r);
			}	else	{
				int l=Pre(L[x]),r=Suf(R[x]);
				Splay(l);	Splay(r,l);	printf("%lld\n",Ans=T[ch[r][0]].sum);
			}
		}
}