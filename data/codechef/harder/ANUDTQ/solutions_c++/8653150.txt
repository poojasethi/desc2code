#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=410000;
int l[N],r[N],fa[N],tot,root;
LL sum[N],val[N];int sz[N],tag[N];
int st[N],ed[N];int dfn;
inline void updata(int x){
	sum[x]=val[x]+sum[l[x]]+sum[r[x]];
	sz[x]=1+sz[l[x]]+sz[r[x]];
}
inline void down(int x){
	sum[l[x]]+=tag[x]*1ll*sz[l[x]];
	sum[r[x]]+=tag[x]*1ll*sz[r[x]];
	val[l[x]]+=tag[x];
	val[r[x]]+=tag[x];
	tag[l[x]]+=tag[x];
	tag[r[x]]+=tag[x];
	tag[x]=0;
}
inline void left(int x){
	int y=fa[x];int z=fa[y];
	r[y]=l[x];if(l[x])fa[l[x]]=y;
	fa[x]=z;if(l[z]==y)l[z]=x;else if(r[z]==y)r[z]=x;
	l[x]=y;fa[y]=x;
	updata(y);updata(x);
}
inline void right(int x){
	int y=fa[x];int z=fa[y];
	l[y]=r[x];if(r[x])fa[r[x]]=y;
	fa[x]=z;if(l[z]==y)l[z]=x;else if(r[z]==y)r[z]=x;
	r[x]=y;fa[y]=x;
	updata(y);updata(x);
}
int q[N];
inline void splay(int x,int f){
	q[q[0]=1]=x;
	for(int k=x;fa[k];k=fa[k]){
		//printf("%d %d\n",k,fa[k]);
		q[++q[0]]=fa[k];
	}
	while(q[0]){down(q[q[0]]);q[0]--;}
	while(fa[x]^f){
		int y=fa[x];int z=fa[y];
		if(z==f){
			if(l[y]==x)right(x);else left(x);
		}
		else{
			if(l[z]==y){
				if(l[y]==x)right(y),right(x);
				else left(x),right(x);
			}
			else{
				if(r[y]==x)left(y),left(x);
				else right(x),left(x);
			}
		}
	}
	if(!f)root=x;
}
void ins(int x,int y){
	splay(x,0);
	q[q[0]=1]=x;
	x=r[x];q[++q[0]]=x;
	down(x);
	while(l[x]){
		x=l[x];q[++q[0]]=x;
		down(x);
	}
	l[x]=y;sz[y]=1;fa[y]=x;
	while(q[0]){updata(q[q[0]]);q[0]--;}
}
int n,m;
int head[N],np[N],p[N],at;
int vv[N];
int faf[N];
int node;
int build(int cl,int cr){
	if(cl>cr)return 0;
	if(cl==cr){
		sz[cl]=1;return cl;
	}
	int mid=(cl+cr)>>1;
	l[mid]=build(cl,mid-1);
	r[mid]=build(mid+1,cr);
	fa[l[mid]]=fa[r[mid]]=mid;
	updata(mid);
	return mid;
}
int bef(int x){
	splay(x,0);
	int y=l[x];
	while(r[y])y=r[y];
	return y;
}
int aft(int x){
	splay(x,0);
	int y=r[x];
	while(l[y])y=l[y];
	return y;
}
void dfs(int x){
	st[x]=++dfn;
	for(int u=head[x];u;u=np[u])if(p[u]^faf[x]){
		faf[p[u]]=x;dfs(p[u]);
	}
	ed[x]=++dfn;
}
int main(){
	scanf("%d",&n);
	rep(i,1,n)scanf("%d",&vv[i]);
	rep(i,1,n-1){
		int u,v;scanf("%d%d",&u,&v);
		++u;++v;
		++at;p[at]=v;np[at]=head[u];head[u]=at;
		++at;p[at]=u;np[at]=head[v];head[v]=at;
	}
	node=n;
	dfs(1);
	rep(i,1,n)val[st[i]]=val[ed[i]]=sum[st[i]]=sum[ed[i]]=vv[i];
	root=build(1,2*n);
	tot=2*n;
	++tot;
	r[tot]=root;
	fa[root]=tot;
	updata(tot);
	root=tot;
	
	++tot;
	l[tot]=root;
	fa[root]=tot;
	updata(tot);
	root=tot;
	
	LL lastans=0;
	scanf("%d",&m);
	while(m--){
		int ty;scanf("%d",&ty);
		if(ty==1){
			LL ky;int va;
			scanf("%lld%d",&ky,&va);
			ky++;
			ky=(ky+lastans);
			
			++node;
			st[node]=++tot;
			ed[node]=++tot;
			val[st[node]]=sum[st[node]]=val[ed[node]]=sum[ed[node]]=va;
			ins(st[ky],st[node]);
			ins(st[node],ed[node]);
		}
		if(ty==2){
			LL ky;int va;
			scanf("%lld%d",&ky,&va);
			++ky;ky=(ky+lastans);
			int xx=bef(st[ky]);
			int yy=aft(ed[ky]);
			splay(xx,0);
			splay(yy,xx);
			down(xx);
			yy=l[yy];
			tag[yy]+=va;
			val[yy]+=va;
			sum[yy]+=va*1ll*sz[yy];
		}
		if(ty==3){
			LL ky;scanf("%lld",&ky);
			ky=(ky+1+lastans);
			int xx=bef(st[ky]);
			int yy=aft(ed[ky]);
			splay(xx,0);
			splay(yy,xx);
			down(xx);
			l[yy]=0;updata(yy);updata(xx);
		}
		if(ty==4){
			LL ky;scanf("%lld",&ky);
			ky=(ky+1+lastans);
			int xx=bef(st[ky]);
			int yy=aft(ed[ky]);
			splay(xx,0);
			splay(yy,xx);
			down(xx);
			down(yy);
			lastans=sum[l[yy]]/2;
			printf("%lld\n",lastans);
		}
	}
	return 0;
}






