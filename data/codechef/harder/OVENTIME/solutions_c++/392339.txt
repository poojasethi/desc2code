#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <string>
#include <ctime>
#include <cassert>
#include<climits>

using namespace std;

#define SZ(a) int((a).size())
#define PB push_back
#define MP make_pair
#define ALL(c) (c).begin(),(c).end()
#define REP(i,n) for( int i = 0 ; i < (int) (n) ; i++ )
#define TR(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define FOR(i,a,b) for(int i=(int)a;i<=(int)b;i++)
#define REV(i,a,b) for(int i=(int)a;i>=(int)b;i--)
#define FILL(arr,val) memset(arr,val,sizeof(arr))
#define INF 1000000000
#define EPS 1e-9
////////////////////////////////////////////////


/******************************************* MIN COST MAX FLOW ****************************************
*******************************************************************************************************/

typedef int FLOW_TYPE;
typedef int COST_TYPE;
#define FLOW_INF (1<<29)
#define COST_INF (1<<29)
#define MAXV 110
#define MAXE 6000  // > 2*V !!
struct MinCostFlow{
  int Vertices,Edges; FLOW_TYPE Capacity[MAXE],Flow[MAXE]; bool used[MAXV];
  COST_TYPE Cost[MAXE],Distance[MAXV],Potential[MAXV];
  int ToVertex[MAXE],PreviousEdge[MAXE],LastEdge[MAXV],PreviousOnPath[MAXV];
  void reset(int n){//Resets the graph, n=number of vertices, NOTE:0 indexed
    Vertices = n; Edges = 0; REP(i,Vertices) LastEdge[i] = -1;
  }
  // adds an edge from 'x' to 'y' with weight 'w' and Cost 'c'
  void add_edge(int x, int y, FLOW_TYPE w, COST_TYPE c){
    Capacity[Edges] = w; Flow[Edges] = 0; Cost[Edges] =  c; ToVertex[Edges] = y;
    PreviousEdge[Edges] = LastEdge[x]; LastEdge[x] = Edges; Edges++;
    Capacity[Edges] = 0; Flow[Edges] = 0; Cost[Edges] = -c; ToVertex[Edges] = x;
    PreviousEdge[Edges] = LastEdge[y]; LastEdge[y] = Edges; Edges++;
  }
  // finds the shortest path from the s to t, updates the flow along the path, updates the node potentials
  pair <FLOW_TYPE, COST_TYPE> search(int s, int t){
    FLOW_TYPE ansf=0; COST_TYPE ansc=0; int x; REP(i,Vertices) used[i] = false;
    REP(i,Vertices) Distance[i] = COST_INF; Distance[s] = 0;PreviousOnPath[s] = -1;
    while(1){
      x = -1; // find a node to burn
      REP(i,Vertices) if(Distance[i] < COST_INF && !used[i] && (x == -1 || Distance[i] < Distance[x])) x = i;
      if(x == -1) break; used[x] = true;
      // relax all the edges which originate from the current node
      for(int e=LastEdge[x];e>=0;e=PreviousEdge[e]){
	if(Capacity[e] > 0 && Distance[x] + Cost[e] + Potential[x] - Potential[ToVertex[e]] < Distance[ToVertex[e]]){
	  Distance[ToVertex[e]] = Distance[x] + Cost[e] + Potential[x] - Potential[ToVertex[e]];
	  PreviousOnPath[ToVertex[e]] = e;
	}
      }
    }
    REP(i,Vertices) Potential[i] += Distance[i]; // update the node potentials
    if(used[t]){ ansf = FLOW_INF;
      for(int e=PreviousOnPath[t];e>=0;e=PreviousOnPath[ToVertex[e^1]]) ansf = min(ansf,Capacity[e]);
      for(int e=PreviousOnPath[t];e>=0;e=PreviousOnPath[ToVertex[e^1]]){
	ansc += Cost[e] * ansf; Capacity[e] -= ansf; Flow[e]+= ansf; Capacity[e^1] += ansf;
      }
    } return make_pair(ansf,ansc);
  }
  pair <FLOW_TYPE, COST_TYPE> mincostflow(int s, int t){
    FLOW_TYPE ansf=0; COST_TYPE ansc=0; REP(i,Vertices) Potential[i] = 0;
    while(1){
      pair <FLOW_TYPE, COST_TYPE> p = search(s,t);  if(!used[t]) break;
      ansf += p.first; ansc += p.second;
    } return make_pair(ansf,ansc);
  }
}graph;

int main(){
    int testcases , n , m , a , b , c ;
    for(scanf("%d",&testcases);testcases;testcases--){
        scanf("%d %d",&n,&m);
        graph.reset(m+3);
        int demand[55];
        memset( demand , 0 , sizeof( demand ) ) ;
        int source = m + 1 ; 
        int sink = source + 1 ; 
        int ans = 0 ; 
        REP(i,n){
            scanf("%d %d %d\n",&a,&b,&c);
            ans += c ;
            graph.add_edge(a,b,1,c); 
            demand[a]++;
            demand[b]--;
        }
        REP(i,m){
            scanf("%d",&a);
            graph.add_edge( i , i + 1 , a , 0 ) ;
        }
        REP(i,m+1){
            if( demand[i] > 0 ) graph.add_edge( source , i , demand[i] , 0 ) ;
            else graph.add_edge( i , sink , -demand[i] , 0 ) ;
        }
        //cout<<ans<<endl;
        printf("%d\n",ans-graph.mincostflow(source,sink).second);
        
    }
    return 0;
}
