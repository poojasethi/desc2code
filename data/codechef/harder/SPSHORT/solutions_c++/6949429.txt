#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>

using namespace std;

#define MAXN 100000
#define MAXM 500000

int u[MAXM],v[MAXM],w[MAXM];
vector<int> L[MAXN],W[MAXN],id[MAXN];

struct node{
	int edge,parity,pos;
	long long distance;

	node(){}
	node(int _edge, int _parity, int _pos, long long _distance):
		edge(_edge),parity(_parity),pos(_pos),distance(_distance){}

	bool operator < (node X) const{
		return distance > X.distance;
	}
};

long long dist[MAXM][2][2];

long long dijkstra(int source, int sink){
	priority_queue<node> Q;
	memset(dist,-1,sizeof dist);

	for(int i = (int)L[source].size() - 1;i >= 0;--i){
		int to = L[source][i];
		int pos = (to == u[ id[source][i] ]? 0 : 1);
		Q.push(node(id[source][i],0,pos,W[source][i]));
		dist[ id[source][i] ][0][pos] = W[source][i];
	}

	while(!Q.empty()){
		node cur = Q.top();
		Q.pop();

		int pos = (cur.pos == 0? u[cur.edge] : v[cur.edge]);

		if(pos == sink) return cur.distance;
		if(dist[cur.edge][cur.parity][cur.pos] != cur.distance) continue;

		for(int i = (int)L[pos].size() - 1;i >= 0;--i){
			if((cur.parity == 0 && W[pos][i] < w[cur.edge]) || (cur.parity == 1 && W[pos][i] > w[cur.edge])){
				int to = L[pos][i];
				int pos2 = (to == u[ id[pos][i] ]? 0 : 1);

				long long &d = dist[ id[pos][i] ][cur.parity ^ 1][pos2];

				if(d == -1 || cur.distance + W[pos][i] < d){
					Q.push(node(id[pos][i],(cur.parity ^ 1),pos2,cur.distance + W[pos][i]));
					d = cur.distance + W[pos][i];
				}
			}
		}
	}

	return -1;
}

int main(){
	int T,N,M,source,sink;

	scanf("%d",&T);

	while(T--){
		scanf("%d %d",&N,&M);

		for(int i = 0;i < N;++i){
			L[i].clear();
			W[i].clear();
			id[i].clear();
		}

		for(int i = 0;i < M;++i){
			scanf("%d %d %d",&u[i],&v[i],&w[i]);
			--u[i]; --v[i];
			L[ u[i] ].push_back(v[i]);
			L[ v[i] ].push_back(u[i]);
			W[ u[i] ].push_back(w[i]);
			W[ v[i] ].push_back(w[i]);
			id[ u[i] ].push_back(i);
			id[ v[i] ].push_back(i);
		}

		scanf("%d %d",&source,&sink);
		--source; --sink;

		long long ret = dijkstra(source,sink);

		if(ret == -1) printf("No Solution\n");
		else printf("%lld\n",ret);
	}

	return 0;
}