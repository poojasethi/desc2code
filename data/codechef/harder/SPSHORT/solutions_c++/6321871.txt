#pragma comment(linker, "/STACK:1024000000,1024000000")
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <map>
#include <vector>
#include <queue>
using namespace std;
#define x first
#define y second
#define pii pair<int,int>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define FOREACH(it,x) for(typeof(x.begin())it=x.begin();it!=x.end();it++)
#define DBG(x) cerr<<#x<<"="<<x<<"\n";
#define ull unsigned long long
#define ll long long
#define inf 1000000007
#define mod 1000000007
#define N 100010
const ll INF=1e16;
typedef pair<pair<ll,int>,pair<int,int> > Pii;
ll dp[N];
vector<pii>a[N],b[N];
int ac[N],bc[N];
int main()
{
    int i,j,k,ca=0,T,n,m;
    scanf("%d",&T);
    while(T--){
        scanf("%d%d",&n,&m);
        for(i=0;i<n;i++){
            a[i].clear(),b[i].clear();
            ac[i]=0,bc[i]=0;dp[i]=INF;
        }
        while(m--){
            scanf("%d%d%d",&i,&j,&k);i--,j--;
            a[i].pb(mp(-k,j));a[j].pb(mp(-k,i));
            b[i].pb(mp(k,j)),b[j].pb(mp(k,i));
        }
        for(i=0;i<n;i++)sort(all(a[i])),sort(all(b[i]));
        int s,t;
        scanf("%d%d",&s,&t);s--,t--;
        priority_queue<Pii>q;
        q.push(mp(mp(0LL,0),mp(0,s)));
        while(!q.empty()){
            ll key=q.top().x.x;
            int step=q.top().x.y;
            int u=q.top().y.y;
            dp[u]=min(dp[u],-key);
            int w=q.top().y.x;
            q.pop();
            if(step&1){
                for(j=bc[u];j<b[u].size();j++){
                    if(b[u][j].x<w){
                        q.push(mp(mp(key-b[u][j].x,0),mp(b[u][j].x,b[u][j].y)));
                    }
                    else break;
                }
                bc[u]=j;
            }
            else{
                for(j=ac[u];j<a[u].size();j++){
                    if(-a[u][j].x>w){
                        q.push(mp(mp(key+a[u][j].x,1),mp(-a[u][j].x,a[u][j].y)));
                    }
                    else break;
                }
                ac[u]=j;
            }
            if(dp[t]!=INF)break;
        }
        if(dp[t]==INF)puts("No Solution");
        else cout<<dp[t]<<"\n";
    }
    return 0;    
}