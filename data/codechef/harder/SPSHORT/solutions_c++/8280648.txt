#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
 
using namespace std;
 
#define MAXN 100000
#define MAXM 500000
 
vector< pair<int, int> > L[MAXN],L2[MAXN];
 
struct node{
	int pos,parity,last;
	long long distance;
 
	node(){}
	node(int _pos, int _parity, int _last, long long _distance):
		pos(_pos),parity(_parity),last(_last),distance(_distance){}
 
	bool operator < (node X) const{
		return distance > X.distance;
	}
};
 
long long dijkstra(int source, int sink){
	priority_queue<node> Q;
	Q.push(node(source,0,0,0));
 
	while(!Q.empty()){
		node cur = Q.top();
		Q.pop();
 
		if(cur.pos == sink) return cur.distance;
 
		if(cur.parity == 1){
			while(!L2[cur.pos].empty()){
				int w = L2[cur.pos].back().first;
 
				if(w < cur.last){
					Q.push(node(L2[cur.pos].back().second,0,w,cur.distance + w));
					L2[cur.pos].pop_back();
				}else break;
			}
		}else{
			while(!L[cur.pos].empty()){
				int w = L[cur.pos].back().first;
 
				if(w > cur.last){
					Q.push(node(L[cur.pos].back().second,1,w,cur.distance + w));
					L[cur.pos].pop_back();
				}else break;
			}
		}
	}
 
	return -1;
}
 
int main(){
	int T,N,M,source,sink;
 
	scanf("%d",&T);
 
	while(T--){
		scanf("%d %d",&N,&M);
 
		for(int i = 0;i < N;++i){
			L[i].clear();
			L2[i].clear();
		}
 
		for(int i = 0,u,v,w;i < M;++i){
			scanf("%d %d %d",&u,&v,&w);
			--u; --v;
 
			L[u].push_back(make_pair(w,v));
			L[v].push_back(make_pair(w,u));
 
			L2[u].push_back(make_pair(w,v));
			L2[v].push_back(make_pair(w,u));
		}
 
		for(int i = 0;i < N;++i){
			sort(L[i].begin(),L[i].end());
			sort(L2[i].rbegin(),L2[i].rend());
		}
 
		scanf("%d %d",&source,&sink);
		--source; --sink;
 
		long long ret = dijkstra(source,sink);
 
		if(ret == -1) printf("No Solution\n");
		else printf("%lld\n",ret);
	}
 
	return 0;
} 