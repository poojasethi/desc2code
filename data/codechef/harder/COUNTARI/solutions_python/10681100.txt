#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;
typedef long long LL;
const double PI=acos(-1.0);
struct Complex
{
    double x,y;
    Complex(double _x=0.0,double _y=0.0)
    {
        x=_x;y=_y;
    }
    Complex operator -(const Complex &b)const
    {
        return Complex(x-b.x,y-b.y);
    }
    Complex operator +(const Complex &b)const
    {
        return Complex(x+b.x,y+b.y);
    }
    Complex operator *(const Complex &b)const
    {
        return Complex(x*b.x-y*b.y,x*b.y+y*b.x);
    }
};

void change(Complex y[],int len)
{
    int i,j,k;
    for(i=1,j=len/2;i<len-1;i++)
    {
        if(i<j)swap(y[i],y[j]);
        k=len/2;
        while(j>=k)
        {
            j-=k;
            k/=2;
        }
        if(j<k)j+=k;
    }
}
void fft(Complex y[],int len,int on)
{
    change(y,len);
    for(int h=2;h<=len;h<<=1)
    {
        Complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h));
        for(int j=0;j<len;j+=h)
        {
            Complex w(1,0);
            for(int k=j;k<j+h/2;k++)
            {
                Complex u=y[k];
                Complex t=w*y[k+h/2];
                y[k]=u+t;
                y[k+h/2]=u-t;
                w=w*wn;
            }
        }
    }
    if(on==-1)
       for(int i=0;i<len;i++)y[i].x/=len;
}


const int MAXN=1e5+5;
const int K=2500;
Complex x1[MAXN],x2[MAXN];
LL sum[MAXN];
int cnt[MAXN],cnt1[MAXN],cnt2[MAXN];
int a[MAXN];

int main()
{
    //freopen("a.txt","r",stdin);
    int n;
    while(~scanf("%d",&n))
    {
        LL ans=0;int MAX=0;
        for(int i=0;i<n;i++)
            scanf("%d",&a[i]),MAX=max(MAX,a[i]);
        MAX++;
        int pre_i=0;
        memset(cnt,0,sizeof(cnt));
        for(int pre_i=0;pre_i<n;)//dan kuai
        {
            int next_i=min(pre_i+K-1,n-1);
            memset(cnt,0,sizeof(cnt));
            for(int k=pre_i;k<next_i;k++)cnt[a[k]]++;

            for(int p2=next_i-1;p2>=pre_i+1;p2--)
            {
                cnt[a[p2]]--;
                for(int p3=p2+1;p3<=next_i;p3++)
                {
                    int tp=2*a[p2]-a[p3];
                    if(tp>0)ans+=cnt[tp];
                }
            }
            pre_i=next_i+1;

        }
        memset(cnt,0,sizeof(cnt));
        pre_i=0;int next_i;
        int key;
        for(pre_i=0;pre_i<n;)//liangkuai zuo
        {
            next_i=min(pre_i+K-1,n-1);
            if(next_i==n-1)key=pre_i;
            for(int p2=pre_i;p2<=next_i;p2++)
               for(int p3=p2+1;p3<=next_i;p3++)
               {
                   int tp=2*a[p2]-a[p3];
                   if(tp>0)ans+=cnt[tp];
               }
            for(int k=pre_i;k<=next_i;k++)cnt[a[k]]++;
            pre_i=next_i+1;
        }
        memset(cnt,0,sizeof(cnt));
        for(int i=n-1;i>=key;i--)cnt[a[i]]++;
        for(next_i=key-1;next_i>=0;)
        {
            pre_i=max(0,next_i-K+1);
            for(int p2=pre_i;p2<=next_i;p2++)
               for(int p3=p2+1;p3<=next_i;p3++)
               {
                   int tp=2*a[p3]-a[p2];
                   if(tp>0)ans+=cnt[tp];
               }
            for(int k=pre_i;k<=next_i;k++)cnt[a[k]]++;
            next_i=pre_i-1;
        }
        memset(cnt1,0,sizeof(cnt1));
        memset(cnt2,0,sizeof(cnt2));
        //printf("%I64d****\n",ans);
        for(int i=0;i<n;i++)cnt2[a[i]]++;
        pre_i=0;
        int len=1;
        while(len<2*MAX)len<<=1;
//        printf("len=%d***\n",len);
        for(;pre_i<n;)
        {
            next_i=min(pre_i+K-1,n-1);
            for(int k=pre_i;k<=next_i;k++)cnt2[a[k]]--;
//            if(pre_i==K)
//            {
//                printf("****\n");
//                for(int k=0;k<MAX;k++)printf("%d ",cnt1[k]);printf("***\n");
//                for(int k=0;k<MAX;k++)printf("%d ",cnt2[k]);printf("***\n");
//            }
            for(int i=0;i<MAX;i++)x1[i]=Complex(cnt1[i],0),x2[i]=Complex(cnt2[i],0);
            for(int i=MAX;i<len;i++)x1[i]=x2[i]=Complex(0,0);
            fft(x1,len,1);
            fft(x2,len,1);
            for(int i=0;i<len;i++)x1[i]=x1[i]*x2[i];
            fft(x1,len,-1);
            for(int i=0;i<len;i++)sum[i]=(LL)(x1[i].x+0.5);
//            if(pre_i==K){for(int i=0;i<len;i++)printf("%I64d ",sum[i]);printf("****\n");}
            for(int k=pre_i;k<=next_i;k++)ans+=sum[2*a[k]];
            for(int k=pre_i;k<=next_i;k++)cnt1[a[k]]++;
            pre_i=next_i+1;
        }
        printf("%lld\n",ans);
    }
    return 0;
}
