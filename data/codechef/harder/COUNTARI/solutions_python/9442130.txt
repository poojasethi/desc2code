#define maxn 500010ul

#define ll long long

#include <math.h>
#include <stdio.h>
#include <string.h>
#include <algorithm>

struct cpx{double r,i;}A[maxn],B[maxn],gen;
cpx operator + (cpx a,cpx b){return (cpx){a.r+b.r,a.i+b.i};}
cpx operator - (cpx a,cpx b){return (cpx){a.r-b.r,a.i-b.i};}
cpx operator * (cpx a,cpx b){return (cpx){a.r*b.r-a.i*b.i,a.r*b.i+a.i*b.r};}

const double pi=acos(-1);

inline void fft(cpx *a,int n,int flag){
	for(int i=0,j=0;i<n;i++){
		if(i>j) std::swap(a[i],a[j]);
		for(int t=n>>1;(j^=t)<t;t>>=1);
	}
	cpx wn,w,u,t;
	for(int m=2;m<=n;m<<=1){
		wn=(cpx){cos(2.0*pi/m),flag*sin(2.0*pi/m)},w=gen;
		for(int i=0;i<n;i+=m,w=gen) for(int k=0,p=m>>1;k<p;k++,w=w*wn)
		    t=w*a[i+k+p],u=a[i+k],a[i+k]=u+t,a[i+k+p]=u-t;
	}
	if(flag==-1) for(int i=0;i<n;i++) a[i].r/=n;
	return;
}

int n,seq[maxn],block_size,hm[maxn],bf[maxn],len,max_;

inline int Min(int a,int b){return a<b?a:b;}
inline int Max(int a,int b){return a>b?a:b;}
inline int Abs(int a,int b){return a-b<0?b-a:a-b;}

inline ll fast_work(int l,int r){
	ll ans=0;r=Min(n,r);
	if(r==n||l==1) return 0;
	for(int i=0;i<len;i++) A[i]=B[i]=(cpx){0,0};
	for(int i=1;i<l;i++) A[seq[i]].r+=1.0;
	for(int i=r+1;i<=n;i++) B[seq[i]].r+=1.0;
	fft(A,len,1),fft(B,len,1);
	for(int i=0;i<len;i++) A[i]=A[i]*B[i];
	fft(A,len,-1);
	for(int i=l;i<=r;i++) ans+=(ll)(A[seq[i]<<1].r+0.1);
	return ans;
}

inline ll slow_work(){
	ll ans=0;
	for(int i=1;i<=n;i++) hm[seq[i]]++;
	for(int i=1,l,r,x;i<=n;i+=block_size){
		l=i,r=Min(n,i+block_size-1);
		for(int j=l;j<=r;j++) hm[seq[j]]--;
		for(int j=l;j<=r;j++){
			for(int k=j+1;k<=r;k++){
				x=(seq[j]<<1)-seq[k];
				if(x>=0) ans+=bf[x];
				x=(seq[k]<<1)-seq[j];
				if(x>=0) ans+=hm[x];
			}
			bf[seq[j]]++;
		}
	}
	return ans;
}

int main(){
	gen=(cpx){1,0},scanf("%d",&n);
	for(int i=1;i<=n;i++) scanf("%d",&seq[i]),max_=Max(max_,seq[i]);
	for(len=1,max_<<=1;len<=max_;len<<=1);
	block_size=Min(8*(int)sqrt(n),n);ll ans=slow_work();
	for(int i=1;i<=n;i+=block_size) ans+=fast_work(i,i+block_size-1);
	printf("%lld",ans);
	return 0;
}
