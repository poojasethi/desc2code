#include<stdio.h>
#include<math.h>
#include<string.h>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;
const int maxn=1E5+3;
const int sqrtmaxn=320;
const int maxm=6E4+3;
const int mlen=16;
const int mn=65536;

#include<complex>
typedef complex<double> cmplx;
const double Pi=3.1415926535897932384626433832795028841971693993751582097494459230781640628620899;
cmplx arr1[mn+3],arr2[mn+3];
inline void rev_inc(int &v,int n){
	n>>=1;
	while(v&n) v^=n,n>>=1;
	v^=n;
}
void DFT(cmplx *data,int len,int dir){
	int n=1<<len;
	for(int i=1,j=n>>1;i<n;++i,rev_inc(j,n)) if(i<j) swap(data[i],data[j]);
	for(int i=0;i<len;++i){
		int m=1<<i;
		cmplx wm(cos(Pi/m),sin(dir*Pi/m));
		for(int j=0;j<n;j+=(m<<1)){
			cmplx w(1);
			for(int k=0;k<m;++k){
				cmplx u=data[j+k],t=w*data[j+k+m];
				data[j+k]=u+t;
				data[j+k+m]=u-t;
				w*=wm;
			}
		}
	}
	if(dir==-1) for(int i=0;i<n;++i) data[i]/=n;
}

/*
struct CNT{
	int clk,c[maxm];
	int vis[maxm];
	CNT():clk(0){}
	inline void clear(){++clk;}
	inline int &operator [](int x){
		if(__builtin_expect(vis[x]!=clk,0)){
			vis[x]=clk;
			c[x]=0;
		}
		return c[x];
	}
}cnt3;
*/
int cnt1[maxm],cnt2[maxm];

int N,sqrtN,A[maxn],csq=0,L[maxn],R[maxn];
LL ans=0;
int main(){
	//freopen("data.txt","r",stdin);
	scanf("%d",&N);sqrtN=sqrt(N);
	sqrtN=2000;
	for(int i=1;i<=N;++i) scanf("%d",A+i),++cnt2[A[i]];
	for(int i=1;i<=N;i+=sqrtN){
		L[++csq]=i;
		R[csq]=min(i+sqrtN-1,N);
	}
	//cerr<<"csq:"<<csq<<endl;
	for(int i=1;i<=csq;++i){
		//cnt1.clear();cnt2.clear();
		/*
		for(int j=1;j<L[i];++j) ++cnt1[A[j]];
		for(int j=R[i]+1;j<=N;++j) ++cnt2[A[j]];
		*/
		if(i-1){
			for(int j=L[i-1];j<=R[i-1];++j) ++cnt1[A[j]];
		}
		//for(int j=L[i];j<=R[i];++j) --cnt2[A[j]];
		//cnt3.clear();

		for(int j=L[i];j<=R[i];++j){
			int target=A[j]<<1;
			--cnt2[A[j]];
			for(int k=L[i];k<j;++k) if(target>=A[k]) ans+=cnt2[target-A[k]];
			for(int k=j+1;k<=R[i];++k){
				//if(target>=A[k]) ans+=cnt3[target-A[k]];
				if(target>=A[k]) ans+=cnt1[target-A[k]];
			}
			//++cnt3[A[j]];
			//cerr<<"cmplx ans:"<<arr1[target]<<endl;
			//ans+=(LL)(arr1[target].real()+0.1);
		}

		for(int j=0;j<maxm;++j) arr1[j]=cnt1[j],arr2[j]=cnt2[j];
		for(int j=maxm;j<mn;++j) arr1[j]=arr2[j]=0;
		DFT(arr1,mlen,1);DFT(arr2,mlen,1);
		for(int j=0;j<mn;++j) arr1[j]*=arr2[j];
		DFT(arr1,mlen,-1);

		for(int j=L[i];j<=R[i];++j){
			int target=A[j]<<1;
			ans+=(LL)(arr1[target].real()+0.1);
		}

	}
	cout<<ans<<endl;
}
