#include<cstring>
#include<cstdio>
#include<algorithm>
#include<cmath>
using namespace std;

const int N = 70000;

const double Pi = acos(-1);

typedef long long LL;

int mxt,mtx,n,size,Sum[N],Suf[N],in[N],t[N],a[N * 10];
LL ans;

struct Z{
	double re,i;
	Z(double _re = 0, double _i = 0){re = _re;  i = _i;}
};

Z operator + (Z a , Z b) {return Z(a.re + b.re , a.i + b.i);}
Z operator - (Z a , Z b) {return Z(a.re - b.re , a.i - b.i);}
Z operator * (Z a , Z b) {return Z(a.re * b.re - a.i * b.i , a.i * b.re + b.i * a.re);}

Z b[N],c[N],d[N],y[N];

void Pre()
{
	for (int i = 0 ; i < mxt ; i ++)
	{
		int now = 0;
		for (int tmp = i , j = 1 ; j < mxt ; j <<= 1 , tmp >>= 1)
			(now <<= 1) += (tmp & 1);
		t[i] = now;
	}
}

void Dft(Z *a , int flag , int n)
{
	for (int i = 0 ; i < n ; i ++) y[t[i]] = a[i];
	
	for (int m = 2 ; m <= n ; m <<= 1)
	{
		int half = m >> 1;
		for (int i = 0 ; i < half ; i ++)
		{
			Z w = Z(cos(i * flag * Pi / half) , sin(i * flag * Pi / half));
			
			for (int j = i ; j < n ; j += m)
			{
				Z u = y[j] , v = y[j + half] * w;
				y[j] = u + v;
				y[j + half] = u - v;
			}
		}
	}
	
	if (flag == -1)
		for (int i = 0 ; i < n ; i ++) y[i].re /= n;
	
	for (int i = 0 ; i < n ; i ++) a[i] = y[i];
}

void Work()
{
	for (int i = 0 ; i < mxt ; i ++)
		b[i] = Z(Sum[i] , 0) , c[i] = Z(Suf[i] , 0);
	Dft(b , 1 , mxt) , Dft(c , 1 , mxt);
	for (int i = 0 ; i < mxt ; i ++) d[i] = b[i] * c[i];
	Dft(d , -1 , mxt);
}

void Solve()
{
	Pre();
	for (int cur = 1 ; cur <= n ; cur += size)
	{
		int st = cur , ed = min(cur + size - 1 , n);
		for (int i = st ; i <= ed ; i ++) Suf[a[i]] --;
		for (int i = st ; i <= ed ; ++ in[a[i ++]])
			for (int j = i + 1 ; j <= ed ; j ++)
			{
				int tmp = 2 * a[j] - a[i]; // a[i] , a[j] , a[k] --> look for k in Suf;
				if (tmp >= 1 && tmp <= mtx) ans += Suf[tmp];
				
				tmp = 2 * a[i] - a[j]; //a[k] a[i] a[j] --> look for k in Sum and current block;
				if (tmp >= 1 && tmp <= mtx) ans += Sum[tmp] , ans += in[tmp];
			}
		
		Work();
		
		for (int i = st ; i <= ed ; i ++) ans = ans + LL(d[a[i] * 2].re + 0.5);
		for (int i = st ; i <= ed ; i ++) Sum[a[i]] ++ , in[a[i]] --;
	}
}

int main()
{
	scanf("%d" , &n);
	
	mtx = 0;
	for (int i = 1 ; i <= n ; i ++) scanf("%d" , &a[i]) , mtx = max(mtx , a[i]) , Suf[a[i]] ++;
	
	mxt = 1;
	while ((mxt >> 1) <= mtx) mxt <<= 1;
	
	int block = min(44 , n);
	size = n / block;  
      if (n % block != 0) size++;
		
	Solve();
	
	printf("%lld\n" , ans);
	
	return 0;
}