#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;
  
const double pi = acos(-1);

struct Complex {
    double x,y;
    Complex() {}
    Complex(double tx,double ty) {
        x = tx;
        y = ty;
    }
    Complex operator + (Complex b) {
        return Complex(x + b.x,y + b.y);
    }
    Complex operator - (Complex b) {
        return Complex(x - b.x,y - b.y);
    }
    Complex operator * (Complex b) {
        return Complex(x * b.x - y * b.y,x * b.y + y * b.x);
    }
    Complex operator *= (Complex b) {
        *this = Complex(x * b.x - y * b.y,x * b.y + y * b.x);
        return *this;
    }
};

Complex a[700010],b[700010];
int R[700010];
int num[700010],l[700010],r[700010],st[700010],ed[700010];
int n;
  
void fft(Complex *a,int f) {
    for (int i = 0; i < n; i++)
        if (i < R[i])
            swap(a[i],a[R[i]]);
    for (int i = 1; i < n; i <<= 1) {
        Complex wn(cos(pi / i),f * sin(pi / i));
        for (int j = 0; j < n; j += (i << 1)) {
            Complex w(1,0);
            for (int k = 0; k < i; k++) {
                Complex x = a[j + k],y = w * a[j + k + i];
                a[j + k] = x + y;
                a[j + k + i] = x - y;
                w *= wn;
            }
        }
    }
    if (f == -1)
        for (int i = 0; i < n; i++)
            a[i].x /= n;
}

int main() {
    int nn;
    scanf("%d",&nn);
    int mx = 0;
    for (int i = 1; i <= nn; i++) {
        scanf("%d",&num[i]);
        mx = max(mx,num[i]);
        r[num[i]]++;
    }
    mx++;
    mx = mx * 2 - 1;
    int L = 0;
    for (n = 1; n <= mx; n <<= 1)
        L++;
    for (int i = 0; i < n; i++)
        R[i] = (R[i >> 1] >> 1) | ((i & 1) << (L - 1));
    int sz = 2000;
    int m = (nn - 1) / sz + 1;
    for (int i = 1; i <= m; i++) {
        st[i] = ed[i - 1] + 1;
        ed[i] = i * sz;
    }
    ed[m] = nn;
    long long ans = 0;
    for (int i = 1; i <= m; i++) {
        for (int j = st[i]; j <= ed[i]; j++)
            r[num[j]]--;
        for (int j = 0; j < n; j++)
            a[j] = Complex(l[j],0);
        for (int j = 0; j < n; j++)
            b[j] = Complex(r[j],0);
        fft(a,1);
        fft(b,1);
        for (int j = 0; j < n; j++)
            a[j] *= b[j];
        fft(a,-1);
        for (int j = st[i]; j <= ed[i]; j++)
            ans += ((long long)(a[2 * num[j]].x + 0.5));
        for (int j = st[i]; j <= ed[i]; j++) {
            for (int k = st[i]; k < j; k++)
                if (2 * num[j] - num[k] >= 0)
                    ans += r[2 * num[j] - num[k]];
            for (int k = j + 1; k <= ed[i]; k++)
                if (2 * num[j] - num[k] >= 0)
                    ans += l[2 * num[j] - num[k]];
            l[num[j]]++;
        }
    }
    printf("%lld\n",ans);
    return 0;
}