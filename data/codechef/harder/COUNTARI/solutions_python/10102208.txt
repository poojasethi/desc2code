#include <bits/stdc++.h>
using namespace std;
#define LEN 1<<15
#define ll long long
#define P 1004535809
#define G 3
#define block 2500
#define N 65536
int n,x[N<<1],sum[N],pos[N<<1];
const long double pi=acos(-1.0);
struct Complex
{
    long double x,y;
    Complex(long double a,long double b):x(a),y(b){}
    Complex(){}
    Complex operator +(const Complex &a)const{
        return Complex(x+a.x,y+a.y);
    }
    Complex operator -(const Complex &a) const{
        return Complex(x-a.x,y-a.y);
    }
    Complex operator *(const Complex &a)const{
        return Complex(x*a.x-y*a.y,x*a.y+y*a.x);
    }
    ll real()
    {
        return (ll)(x+0.5);
    }
}a[N],b[N];
void dft(Complex *a,int len,int type)
{
    int i,j,h,t=0;
    for(i=0;i<len;i++)
    {
        if(i>t) swap(a[i],a[t]); 
        for(j=(len>>1);(t^=j)<j;j>>=1);
    }
    for(h=2;h<=len;h<<=1)
    {
        Complex wn(cos(2*pi*type/h),sin(2*pi*type/h));
        for(i=0;i<len;i+=h)
        {
            Complex t,w(1,0);
            for(j=0;j<(h>>1);j++,w=w*wn)
            {
                t=w*a[i+j+(h>>1)];
                a[i+j+(h>>1)]=a[i+j]-t;
                a[i+j]=a[i+j]+t;
            }
        }
    }
    if(type==-1) for(int i=0;i<len;i++) a[i].x/=len;
}
ll ans;
void work1(int p)
{
    for(int i=p+1;i<=min(n,pos[p]*block);i++) 
    if(2*x[p]-x[i]>0) ans+=sum[2*x[p]-x[i]];
    sum[x[p]]++;
}
void work2(int p)
{
    for(int i=p-1;i>(pos[p]-1)*block;i--) 
    if(2*x[p]-x[i]>0) ans+=sum[2*x[p]-x[i]];
}
void build(Complex *a,int l,int r)
{
    for(int i=(l-1)*block+1;i<=min(n,r*block);i++) a[x[i]].x+=1;
}
int main()
{
    //freopen("tt.in", "r", stdin);
    cin>>n;
    for(int i=1;i<=n;i++) 
    {
        scanf("%d",&x[i]);
        pos[i]=(i-1)/block+1;
    }
    for(int i=1;i<=n;i++) work1(i);
    memset(sum,0,sizeof(sum));
    for(int i=n;i;i--) 
    {
        work2(i);
        if(pos[i-1]==pos[i]) continue;
        for(int j=i;j<=pos[i]*block;j++) sum[x[j]]++;
    }
    for(int i=2;i<pos[n];i++) 
    {
        memset(a,0,sizeof(a));memset(b,0,sizeof(b));
        build(a,1,i-1);build(b,i+1,pos[n]);
        dft(a,N,1);dft(b,N,1);
        for(int j=0;j<N;j++) a[j]=a[j]*b[j];
        dft(a,N,-1);
        for(int j=(i-1)*block+1;j<=i*block;j++) ans+=a[x[j]<<1].real();
    }
    cout<<ans<<endl;
}
