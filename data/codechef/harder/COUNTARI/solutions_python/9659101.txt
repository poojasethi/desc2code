#include <bits/stdc++.h>
using namespace std;

template<class T>inline void Read(T &x)
{
    int f = 1;
    char t = getchar();
    while (t < '0' || t > '9') {
        if (t == '-') f = -1;
        t = getchar();
    }
    x = 0;
    while (t >= '0' && t <= '9') {
        x = x * 10 + t - '0';
        t = getchar();
    }
    x *= f;
}

template<class T>inline void chkmin(T &x, T y) { if (x > y) x = y; }
template<class T>inline void chkmax(T &x, T y) { if (x < y) x = y; }

const int maxn = 100005;
const int maxv = 30005;
const int maxs = 131077;
const int sqrn = 330;
const double pi = acos(-1.0);

// 2 * (N / S) * S * S + (N / S) * maxval * logMaxval

struct Complex
{
    double x, y;

    Complex() {}
    Complex(double x, double y) : x(x), y(y) {}
    
    inline Complex operator + (const Complex &rhs)
    { return Complex(x + rhs.x, y + rhs.y); }
    
    inline Complex operator - (const Complex &rhs)
    { return Complex(x - rhs.x, y - rhs.y); }
    
    inline Complex operator * (const Complex &rhs)
    { return Complex(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x); }
};

int n;
int a[maxn];
int maxval;

int block_n;
int block_size;
int g[sqrn][maxv];

void input()
{
    Read(n);
    for (int i = 1; i <= n; i++) {
        Read(a[i]);
        chkmax(maxval, a[i]);
    }
}

void prepare()
{
    block_size = max((int)(1.0 * n / 310), min(n, max(1, (int)sqrt(maxval * log(maxval * 2) * 5.70))));
    block_n = (n - 1) / block_size + 1;    
    for (int i = 1; i <= block_n; i++) {
        int l = block_size * (i - 1) + 1;
        int r = min(n, block_size * i);
        for (int j = l; j <= r; j++) g[i][a[j]] ++;
        for (int j = 0; j <= maxval; j++) g[i][j] = g[i - 1][j] + g[i][j];
    }
}

long long calc1()
{
    static int sum[maxv];
    long long res = 0;
    int l, r, to;
    for (int i = 1; i <= block_n; i++) {
        fill(sum, sum + maxval + 1, 0);
        l = block_size * (i - 1) + 1;
        r = min(n, block_size * i);
        sum[a[r]] ++;
        for (int mid = r - 1; mid > l; mid--) {
            for (int s = l; s < mid; s++) {
                to = 2 * a[mid] - a[s];
                if (to >= 0 && to <= maxval) res += sum[to];
            }
            sum[a[mid]] ++;
        }
    }
    return res;
}

long long calc2()
{
    long long res = 0;
    int l, r, to;
    for (int i = 1; i <= block_n; i++) {
        l = block_size * (i - 1) + 1;
        r = min(n, block_size * i);
        for (int s = l; s < r; s++) {
            for (int mid = s + 1; mid <= r; mid++) {
                to = 2 * a[mid] - a[s];
                if (to >= 0 && to <= maxval) res += g[block_n][to] - g[i][to];
                to = 2 * a[s] - a[mid];
                if (to >= 0 && to <= maxval) res += g[i - 1][to];
            }
        }
    }
    return res;
}

int N;
int L;
int rev[maxs];
Complex unit;
Complex bit[maxs];

void init_fft()
{
    N = 1, L = 0;
    while (N < (2 * maxval + 1)) N <<= 1, L ++;
    unit = Complex(cos(2 * pi / N), sin(2 * pi / N));
    bit[0] = Complex(1, 0);
    for (int i = 1; i <= N; i++) bit[i] = bit[i - 1] * unit;
    for (int i = 0; i <= N; i++) rev[i] = rev[i >> 1] >> 1 | ((i & 1) << (L - 1));
}

void dft(Complex *res, int flag)
{
    Complex x, y;
    for (int i = 0; i < N; i++) if (rev[i] > i) swap(res[i], res[rev[i]]);
    for (int k = 1; k < N; k <<= 1) {
        for (int s = 0; s < N; s += (k << 1)) {
            for (int i = 0; i < k; i++) {
                x = res[s + i], y = res[s + k + i];
                if (flag == 1) y = y * bit[N / (k << 1) * i];
                else y = y * bit[N - N / (k << 1) * i];
                res[s + i] = x + y;
                res[s + k + i] = x - y;
            }
        }
    }
    if (flag == -1) {
        for (int i = 0; i < N; i++) res[i].x /= N;
    }
}

long long calc3()
{
    static Complex A[maxs];
    static Complex B[maxs];
    static Complex C[maxs];
    long long res = 0;
    int l, r, to;
    init_fft();
    for (int i = 2; i < block_n; i++) {
        l = (i - 1) * block_size + 1;
        r = i * block_size;
        for (int j = maxval + 1; j <= N; j++) {
            A[j].x = B[j].x = 0;
            A[j].y = B[j].y = 0;
        }
        for (int j = 0; j <= maxval; j++) {
            A[j].x = g[i - 1][j];
            B[j].x = g[block_n][j] - g[i][j];
            A[j].y = B[j].y = 0;
        }
        dft(A, 1);
        dft(B, 1);
        for (int j = 0; j < N; j++) C[j] = A[j] * B[j];
        dft(C, -1);
        for (int j = l; j <= r; j++) {
            to = 2 * a[j];
            if (C[to].x < -0.5) {
                j ++;
                j --;
            }
            if (to < maxs) res += (long long)(C[to].x + 0.5);
        }
    }
    return res;
}

void solve()
{
    long long ans = 0;
    ans = calc1() + calc2() + calc3();
    cout << ans << endl;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    
    input();
    prepare();
    solve();
    
#ifndef ONLINE_JUDGE
    fclose(stdin);
    fclose(stdout);
#endif
    return 0;
}
