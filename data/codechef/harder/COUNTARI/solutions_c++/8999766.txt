#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
#include<vector>
#include<map>
#include<set>
#include<stack>
#include<string>
#include<cmath>
#include<cctype>
#include<ctime>
#include<bitset>
using namespace std;
const int maxlongint=2147483647;
const int inf=1000000000;
int num[100010],l[30010],r[30010],now[30010];
struct co
{
	double re,im;
	co(double a=0.0,double b=0.0)
	{
		re=a;
		im=b;
	}
};
co operator +(co a,co b)
{
	return co(a.re+b.re,a.im+b.im);
}
co operator -(co a,co b)
{
	return co(a.re-b.re,a.im-b.im);
}
co operator *(co a,co b)
{
	return co(a.re*b.re-a.im*b.im,a.im*b.re+b.im*a.re);
}
const double pi=acos(-1.0);
void rev(co* a,int z)
{
	int j=z/2;
	for(int i=1;i<z-1;i++)
	{
		if(i<j)
			swap(a[i],a[j]);
		for(int k=z/2;;k=k/2)
			if(j&k)
				j^=k;
			else
			{
				j^=k;
				break;
			}
	}
}
void fft(co* a,int z,int t)
{
	rev(a,z);
	for(int i=2;i<=z;i*=2)
	{
		co wn(cos(pi*2.0*t/i),sin(pi*2.0*t/i));
		for(int j=0;j<z;j+=i)
		{
			co w(1,0);
			for(int k=j;k<j+i/2;k++)
			{
				co u=a[k],v=a[k+i/2]*w;
				a[k]=u+v;
				a[k+i/2]=u-v;
				w=w*wn;
			}
		}
	}
	if(t==-1)
	{
		for(int i=0;i<z;i++)
			a[i].re/=z;
	}
}
co li[100010],ri[100010];
int bh[100010];
int main()
{
	int n,n1,n2,n3;
	cin>>n;
	if(n<=2)
	{
		cout<<0;
		return 0;
	}
	for(n1=1;n1<=n;n1++)
		scanf("%d",&num[n1]);
	const int fk=2500;
	long long ans=0;
	for(n1=1;n1<=n;n1++)
		bh[n1]=n1/fk+1;
	for(n1=1;n1<=bh[n];n1++)
	{
	//	cout<<n1<<endl;
		memset(l,0,sizeof(l));
		memset(r,0,sizeof(r));
		memset(now,0,sizeof(now));
		int a=0,b;
		for(n2=1;n2<=n;n2++)
			if(bh[n2]<n1)
				l[num[n2]]++;
			else
				if(bh[n2]>n1)
					r[num[n2]]++;
				else
				{
					if(a==0)
						a=n2;
					b=n2;
				}
		for(n2=a;n2<=b;n2++)
		{
			for(n3=n2+1;n3<=b;n3++)
				if(num[n2]*2-num[n3]>=0&&num[n2]*2-num[n3]<=30000)
					ans+=now[num[n2]*2-num[n3]]+l[num[n2]*2-num[n3]];
			now[num[n2]]++;
		}
		for(n2=b;n2>=a;n2--)
			for(n3=a;n3<n2;n3++)
				if(num[n2]*2-num[n3]>=0&&num[n2]*2-num[n3]<=30000)
					ans+=r[num[n2]*2-num[n3]];
		memset(li,0,sizeof(li));
		memset(ri,0,sizeof(ri));
		for(n2=1;n2<=30000;n2++)
		{
			li[n2].re=l[n2];
			ri[n2].re=r[n2];
		}
	//	for(n2=1;n2<=10;n2++)
	//		cout<<a<<' '<<b<<' '<<l[n2]<<' '<<r[n2]<<endl;
		fft(li,65536,1);
		//fft(li,65536,-1);
		fft(ri,65536,1);
	//	for(n2=1;n2<=10;n2++)
	//		cout<<li[n2].re<<' '<<li[n2].im<<endl;
		for(n2=0;n2<65536;n2++)
			li[n2]=li[n2]*ri[n2];
		fft(li,65536,-1);
	//	for(n2=1;n2<=20;n2++)
	//	{
	//		cout<<(long long)(li[num[n2]*2].re+0.5)<<endl;
	//	}
		for(n2=a;n2<=b;n2++)
			ans+=(long long)(li[num[n2]*2].re+0.5);
	}
	cout<<ans;	
}
