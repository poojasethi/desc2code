#include<algorithm>
#include <iostream>
#include <string.h>
#include <stdlib.h>
#include  <stdio.h>
#include   <math.h>
#include   <time.h>
#include   <vector>
#include    <queue>
#include      <map>
#include      <set>
using namespace std;

typedef double DB;
typedef long long LL;

const DB Pi=acos(-1.0);
const int N=200005;

struct Complex
{
	DB r,i;
	inline Complex(DB _=0,DB __=0):r(_),i(__){}
};

inline Complex operator+(const Complex& A,const Complex& B)
{
	return Complex(A.r+B.r,A.i+B.i);
}

inline Complex operator-(const Complex& A,const Complex& B)
{
	return Complex(A.r-B.r,A.i-B.i);
}

inline Complex operator*(const Complex& A,const Complex& B)
{
	return Complex(A.r*B.r-A.i*B.i,A.i*B.r+B.i*A.r);
}

Complex X[N],Y[N];

LL Ans;

int n,m,L[N],R[N],T[N],Rev[N];

void Prepare()
{
	int Len=0;
	while((1<<++Len)<=60000);
	n=1<<Len;
	for(int i=1;i<n;i++)
		Rev[i]=(Rev[i>>1]>>1)|((i&1)<<(Len-1));
}

void FFT(Complex F[],int flag)
{
	for(int i=0;i<n;i++)
		if(i<Rev[i])
			swap(F[i],F[Rev[i]]);
	for(int i=1;i<n;i<<=1)
	{
		Complex Wn(cos(Pi/i),flag*sin(Pi/i));
		for(int j=0;j<n;j+=i<<1)
 		{
			Complex W(1,0),x,y;
			for(int k=0;k<i;k++)
				x=F[j+k],y=F[j+k+i]*W,F[j+k]=x+y,F[j+k+i]=x-y,W=W*Wn;
		}
 	}
 	if(flag==-1)
 		for(int i=0;i<n;i++)
 			F[i].r/=n;
}

void Mult()
{
	for(int i=0;i<n;i++)
		X[i]=Complex(L[i],0),Y[i]=Complex(R[i],0);
	FFT(X,1);FFT(Y,1);
	for(int i=0;i<n;i++)
		X[i]=X[i]*Y[i];
	FFT(X,-1);
}

int main()
{
	Prepare();
	scanf("%d",&m);
	for(int i=1;i<=m;i++)
		scanf("%d",T+i),R[T[i]]++;
	int S=2000,b=0,e=0;
	while(e!=m)
	{
		b=e+1;e=min(m,b+S-1);
		for(int i=b;i<=e;i++)
			R[T[i]]--;
		Mult();
		for(int i=b;i<=e;i++)
			Ans+=(LL)(X[T[i]*2].r+0.5);
		for(int i=b;i<=e;i++)
		{
			for(int j=b;j<i;j++)
				if(2*T[i]-T[j]>=1&&2*T[i]-T[j]<=n)
					Ans+=R[2*T[i]-T[j]];
			for(int j=i+1;j<=e;j++)
				if(2*T[i]-T[j]>=1&&2*T[i]-T[j]<=n)
					Ans+=L[2*T[i]-T[j]];
			L[T[i]]++;
		}
	}
	cout<<Ans<<endl;
	return 0;
}
