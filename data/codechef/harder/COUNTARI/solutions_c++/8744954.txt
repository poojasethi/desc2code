#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <bitset>
#include <ctime>
#include <map>
#include <queue>
#include <set>
#define pi acos(-1.0)
using namespace std;

const int maxn=100000+15;
const int maxb=40+15;
const int maxc=30000+15;
struct Complex
{
	double a,b;
	Complex(double a=0.0,double b=0.0):a(a),b(b) {}
	int clear()
	{
		a=b=0.0;
		return 0;
	}
}ls1[65536+15],ls2[65536+15],ls[65536+15];
const Complex operator + (const Complex &a,const Complex &b)
{
	return Complex(a.a+b.a,a.b+b.b);
}
const Complex operator - (const Complex &a,const Complex &b)
{
	return Complex(a.a-b.a,a.b-b.b);
}
const Complex operator * (const Complex &a,const Complex &b)
{
	return Complex(a.a*b.a-a.b*b.b,a.a*b.b+a.b*b.a);
}
int n,lenblock,sumblock;
int a[maxn];
int pree[maxb][maxc];
int succ[maxb][maxc];
int lpre[maxc];
int sz1[maxc],sz2[maxc],len,pp;
int maxx;
long long ans;
long long anss[65536+15];
int rev(int x)
{
	int y=0;
	for (int i=1;i<len;i<<=1)
		if (x&i) y+=len/i/2;
	return y;
}
int fft(int od)
{
	for (int i=0;i<len;i++)
		if (rev(i)>i)
		 swap(ls[i],ls[rev(i)]);
	for (int i=1;i<=pp;i++)
	{
		int m=1 << i;
		Complex wm=Complex(cos(2*pi*od/m),sin(2*pi*od/m));
		for (int j=0;j<len;j+=m)
		{
			Complex w=Complex(1,0);
			for (int k=0;k<m/2;k++)
			{
				Complex u=ls[j+k],v=ls[j+k+m/2]*w;
				ls[j+k]=u+v;
				ls[j+k+m/2]=u-v;
				w=w*wm;
			}
		}
	}
	return 0;
}
int cross()
{
	int s1=0,s2=0;
	for (int i=1;i<=maxx;i++)
		if (sz1[i]!=0) s1=i;
	for (int i=1;i<=maxx;i++)
		if (sz2[i]!=0) s2=i;
	int ss=s1+s2;
	pp=0;
	while ((1 << pp)<=ss) pp++;
	len=1 << pp;
	for (int i=0;i<len;i++) ls1[i].clear(),ls2[i].clear();
	for (int i=1;i<=s1;i++) ls1[i].a=sz1[i];
	for (int i=1;i<=s2;i++) ls2[i].a=sz2[i];
	memcpy(ls,ls1,sizeof(ls1));
	fft(1);
	memcpy(ls1,ls,sizeof(ls));
	memcpy(ls,ls2,sizeof(ls2));
	fft(1);
	for (int i=0;i<len;i++) ls[i]=ls[i]*ls1[i];
	fft(-1);
	for (int i=0;i<len;i++) ls[i].a/=len;
	for (int i=0;i<len;i++) anss[i]=(long long)(ls[i].a+0.5);
	return 0;
}
int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++) scanf("%d",&a[i]),maxx=max(maxx,a[i]);
	sumblock=min(n/2,40);
	lenblock=n/sumblock;
	for (int i=1;i<=sumblock;i++)
	{
		int ll=(i-1)*lenblock+1,rr=i*lenblock;
		if (i==sumblock) rr=n;
		memcpy(pree[i],pree[i-1],sizeof(pree[i-1]));
		for (int j=ll;j<=rr;j++) pree[i][a[j]]++;
	}
	for (int i=sumblock;i>=1;i--)
	{
		int ll=(i-1)*lenblock+1,rr=i*lenblock;
		if (i==sumblock) rr=n;
		memcpy(succ[i],succ[i+1],sizeof(succ[i+1]));
		for (int j=ll;j<=rr;j++) succ[i][a[j]]++;
	}
	ans=0;
	for (int i=1;i<=sumblock;i++)
	{
		int ll=(i-1)*lenblock+1,rr=i*lenblock;
		if (i==sumblock) rr=n;
		memset(lpre,0,sizeof(lpre));
		for (int j=ll;j<=rr;j++)
		 for (int k=j+1;k<=rr;k++)
		  if (2*a[j]>a[k] && 2*a[j]-a[k]<=maxx)
		  	ans+=pree[i-1][2*a[j]-a[k]];
		for (int j=ll;j<=rr;j++)
		 for (int k=j-1;k>=ll;k--)
		  if (2*a[j]>a[k] && 2*a[j]-a[k]<=maxx)
		  	ans+=succ[i+1][2*a[j]-a[k]];
		for (int j=ll;j<=rr;j++)
		 {
		 	for (int k=j+1;k<=rr;k++)
		 	 if (2*a[j]>a[k] && 2*a[j]-a[k]<=maxx)
		 	  ans+=lpre[2*a[j]-a[k]];
		 	lpre[a[j]]++;
		 }
		memcpy(sz1,pree[i-1],sizeof(pree[i-1]));
		memcpy(sz2,succ[i+1],sizeof(succ[i+1]));
		cross();
		for (int j=ll;j<=rr;j++) 
			if (2*a[j]<len) ans+=anss[2*a[j]];
	}
	cout << ans << endl;
	return 0;
}
