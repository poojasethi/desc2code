#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<cmath>
#include<vector>
#define bel(x) (((x)-1)/S)
#define st(x) ((x)*S+1)
#define ed(x) (((x)+1)*S<=n?((x)+1)*S:n)
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=110000;
const int S=2500;
const int M=(1<<16);
const double pi=acos(-1.0);
struct com{
	double re,im;
	inline com(double _re=0.0,double _im=0.0){
		re=_re;im=_im;
	}
}w[2][M+5],A[M+5],B[M+5];
int rev[M+5];
inline com operator +(const com &a,const com &b){
	return com(a.re+b.re,a.im+b.im);
}
inline com operator -(const com &a,const com &b){
	return com(a.re-b.re,a.im-b.im);
}
inline com operator *(const com &a,const com &b){
	return com(a.re*b.re-a.im*b.im,a.re*b.im+a.im*b.re);
}
void init(){
	rep(i,0,M-1){
		int x=i;int y=0;
		for(int k=1;k<M;k<<=1,x>>=1)(y<<=1)|=(x&1);
		rev[i]=y;
	}
	com V1=com(cos(2.*pi/M),sin(2.*pi/M));
	com V2=V1;V2.im*=-1;
	w[0][0]=w[1][0]=com(1,0);
	rep(i,1,M-1){
		w[0][i]=w[0][i-1]*V1;
		w[1][i]=w[1][i-1]*V2;
	}
}
inline void FFT(com *A,int f){
	rep(i,0,M-1)if(i<rev[i]){
		com tmp=A[i];A[i]=A[rev[i]];A[rev[i]]=tmp;
	}
	for(int i=1;i<M;i<<=1)
	for(int j=0,t=(M/(i<<1));j<M;j+=(i<<1))
	for(int k=0,l=0;k<i;k++,l+=t){
		com x=A[i+j+k]*w[f][l];
		com y=A[j+k];
		A[j+k]=x+y;
		A[i+j+k]=y-x;
	}
	
	if(f)rep(i,0,M-1)A[i].re/=M;
}
int a[N];int n;
LL ans=0;
int pre[42][30005];
int cnt[60005];
int main(){
	init();
	scanf("%d",&n);
	rep(i,1,n)scanf("%d",&a[i]);
	rep(i,bel(1),bel(n)){
		if(i){
			rep(j,1,30000)pre[i][j]=pre[i-1][j];
		}
		rep(j,st(i),ed(i))pre[i][a[j]]++;
	}
	//task 1
	int G=bel(n);
	rep(i,bel(1)+1,bel(n)-1){
		rep(j,0,M-1)A[j]=B[j]=com(0,0);
		rep(j,1,30000)A[j].re=pre[i-1][j];
		rep(j,1,30000)B[j].re=pre[G][j]-pre[i][j];
			
		FFT(A,0);FFT(B,0);
		rep(j,0,M-1)A[j]=A[j]*B[j];
		FFT(A,1);
			
		rep(j,st(i),ed(i)){
			ans+=1ll*((LL)(A[a[j]*2].re+0.3));
		}
	}
	//task 2
	rep(i,1,n){
		int x=ed(bel(i));
		rep(j,i+1,x){
			if(2*a[i]-a[j]>=0)ans+=1ll*cnt[2*a[i]-a[j]];
			if(2*a[j]-a[i]>=0&&2*a[j]-a[i]<=30000)
			ans+=1ll*(pre[G][2*a[j]-a[i]]-pre[bel(i)][2*a[j]-a[i]]);
		}
		cnt[a[i]]++;
	}
	memset(cnt,0,sizeof cnt);
	
	printf("%lld\n",ans);
	return 0;
}

