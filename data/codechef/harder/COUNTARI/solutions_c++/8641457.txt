#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <algorithm>
#define pi 3.141592653589793238462643383
using namespace std;
 
struct complex
{
	double num,inum;
	complex(double A=0.0,double B=0.0){num=A,inum=B;}
}a[400005],b[400005],w[2][400005];
int n,na,nb,rev[400005],i,j,k;
 
complex operator +(const complex &A,const complex &B){return complex(A.num+B.num,A.inum+B.inum);}
complex operator -(const complex &A,const complex &B){return complex(A.num-B.num,A.inum-B.inum);}
complex operator *(const complex &A,const complex &B){return complex(A.num*B.num-A.inum*B.inum,A.num*B.inum+A.inum*B.num);}
 
void FFT(complex *a,int f)
{
	int i,j,k,t,l;
	complex x,y;
	for(i=0;i<n;++i)if(i<rev[i])swap(a[i],a[rev[i]]);
	for(i=1;i<n;i<<=1)
	for(j=0,t=n/(i<<1);j<n;j+=i<<1)
	for(k=l=0;k<i;++k,l+=t)
	{
		x=w[f][l]*a[j+k+i];
		y=a[j+k];
		a[j+k]=y+x;
		a[j+k+i]=y-x;
	}
	if(f)for(i=0;i<n;++i)a[i].num/=n;
}
 
void prepare()
{
	int i,j,x,y;
	for(i=0;i<n;++i)
	{
		x=i;y=0;
		for(j=1;j<n;x>>=1,j<<=1)(y<<=1)|=x&1;
		rev[i]=y;
	}
	for(i=0;i<n;++i)
	{
		w[0][i]=complex(cos(2*pi*i/n),sin(2*pi*i/n));
		w[1][i]=complex(cos(2*pi*i/n),-sin(2*pi*i/n));
	}
}
 
void mult()
{
	int i;
	FFT(a,0);
	FFT(b,0);
	for(i=0;i<n;++i)a[i]=a[i]*b[i];
	FFT(a,1);
}
 
long long ans;
int N,num[100005],S,Sn,L,R;
int l[100005],r[100005];
 
int main()
{
	n=65536;S=2500;
	prepare();
	scanf("%d",&N);
	for(i=1;i<=N;++i)scanf("%d",&num[i]);
	Sn=N/S+(N%S!=0);
	for(i=1;i<=N;++i)++r[num[i]];
	R=0;
	for(i=1;i<=Sn;++i)
	{
		L=R+1;R=L+S-1;if(N<R)R=N;
		for(j=L;j<=R;++j)--r[num[j]];
		for(j=0;j<n;++j)a[j]=complex(l[j],0),b[j]=complex(r[j],0);
		mult();
		for(j=L;j<=R;++j)ans+=(long long)(a[num[j]*2].num+0.00001);
		for(j=L;j<=R;++j)
		{
			for(k=L;k<j;++k)
			if(num[j]*2-num[k]>=0)
			ans+=r[num[j]*2-num[k]];
			for(k=j+1;k<=R;++k)
			if(num[j]*2-num[k]>=0)
			ans+=l[num[j]*2-num[k]];
			++l[num[j]];
		}
	}
	printf("%lld\n",ans);
}