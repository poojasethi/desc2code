#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
using namespace std;
typedef long long LL;
const int MAXN=100010;
const double PI=2*asin(1);
struct Complex
{
	double x,y;
	Complex(){}
	Complex(double _x,double _y):x(_x),y(_y){}
};
Complex operator+(const Complex &p,const Complex &q){return Complex(p.x+q.x,p.y+q.y);}
Complex operator-(const Complex &p,const Complex &q){return Complex(p.x-q.x,p.y-q.y);}
Complex operator*(const Complex &p,const Complex &q)
{
	double x=p.x*q.x,y=p.y*q.y,z=(p.x+p.y)*(q.x+q.y);
	return Complex(x-y,z-x-y);
}
Complex operator/(const Complex &p,int k){return Complex(p.x/k,p.y/k);}
Complex w[2][MAXN];
void initFFT(int k)
{
	for(int i=0;i<=k;i++)
		w[0][i]=w[1][k-i]=Complex(cos(2*i*PI/k),sin(2*i*PI/k));
}
void FFT(Complex x[],int k,int v)
{
	int i,j,l;Complex tmp;
	for(i=j=0;i<k;i++)
	{
		if(i>j) swap(x[i],x[j]);
		for(l=k>>1;(j^=l)<l;l>>=1);
	}
	for(i=2;i<=k;i<<=1)
		for(j=0;j<k;j+=i)
			for(l=0;l<(i>>1);l++)
			{
				tmp=x[j+l+(i>>1)]*w[v][k/i*l];
				x[j+l+(i>>1)]=x[j+l]-tmp;
				x[j+l]=x[j+l]+tmp;
			}
}
Complex t1[MAXN],t2[MAXN];
void Mul(Complex A[],Complex B[],Complex C[],int k)
{
	for(int i=0;i<k;i++) t1[i]=A[i],t2[i]=B[i];
	FFT(t1,k,0),FFT(t2,k,0);
	for(int i=0;i<k;i++) C[i]=t1[i]*t2[i];
	FFT(C,k,1);
	for(int i=0;i<k;i++) C[i]=C[i]/k;
}
int n,K=2500,k=65536,a[MAXN];
LL ans,pre[MAXN],nxt[MAXN],cnt[MAXN];
Complex A[MAXN],B[MAXN],C[MAXN];
int main()
{
	initFFT(k);
	scanf("%d",&n);
	for(int i=0;i<n;i++) scanf("%d",&a[i]),nxt[a[i]]++;
	for(int x=0;x<=(n-1)/K;x++)
	{
		int L=x*K,R=min(L+K-1,n-1);
		if(x!=0)
		{
			for(int i=L-K;i<L;i++)
				pre[a[i]]++;
		}
		for(int i=L;i<=R;i++) nxt[a[i]]--;
		for(int kk=L;kk<=R;kk++) cnt[a[kk]]++;
		for(int kk=L;kk<=R;kk++)
		{
			cnt[a[kk]]--;
			for(int i=L;i<kk;i++)
				ans+=cnt[a[kk]+a[kk]-a[i]];
		}
		for(int kk=L;kk<=R;kk++)
		{
			for(int i=L;i<kk;i++)
				if(a[kk]+a[kk]-a[i]>=0) ans+=nxt[a[kk]+a[kk]-a[i]];
			for(int i=kk+1;i<=R;i++)
				if(a[kk]+a[kk]-a[i]>=0) ans+=pre[a[kk]+a[kk]-a[i]];
		}
		for(int i=0;i<k;i++) A[i]=Complex(pre[i],0),B[i]=Complex(nxt[i],0);
		Mul(A,B,C,k);
		for(int i=L;i<=R;i++)
			ans+=(LL)floor(C[a[i]+a[i]].x+0.5);
	}
	printf("%lld\n",ans);
	return 0;
}
