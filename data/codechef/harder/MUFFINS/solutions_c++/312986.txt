#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <map>
#include <queue>
#include <sstream>
#include <numeric>
#include <functional>
#include <set>
#include <cmath>
#include <stack>
#include <fstream>
#ifdef HOME_PC
#include <ctime>
#endif
using namespace std;

#pragma comment(linker,"/stack:16000000")
#pragma warning (disable : 4996)

#define ALL(v) v.begin(),v.end()
#define SZ(v) (int)v.size()
#define mset(A,x) memset((A),(x),sizeof(A))
#define FOR(i,start,N) for(int i=(start);i<(N);++i)
#define FORSZ(i,start,v) FOR(i,start,SZ(v))
#define REPSZ(i,v) FORSZ(i,0,v)
#define FORE(i,start,N) FOR(i,start,N+1)
#define make_unique(v) v.resize(unique(ALL(v))-v.begin())
#define debug(x) cout<<#x<<" = "<<x<<endl;
#define adebug(A,N) FOR(i,0,N) cout<<#A<<"["<<i<<"] = "<<A[i]<<endl;
#define adebug2d(a,n,m) FOR(i,0,n) { FOR(j,0,m) { cout<<a[i][j]<<" ";} cout<<endl;}
#define vdebug(v) REPSZ(i,v) cout<<#v<<"["<<i<<"] = "<<v[i]<<endl;
#define selfx(x,f,a) x = f(x,a)
#define sqr(x) ((x)*(x))


typedef pair<int,int> pii;
typedef long long i64;
typedef vector<int> VI; typedef vector< vector<int> > VVI;
typedef vector<string> VS;

const int inf = 1<<25;
const double eps = 1e-9;

struct Edge
{
	int u,v;
	Edge(){}
	Edge(int uu,int vv):u(uu),v(vv){}
};

int n,m;
const int MAXN = 1<<10;
Edge edges[30000];
int sz;
int used[MAXN];
VI lst;



bool f(int done,int k)
{
	if(done == sz)
		return true;
	
	if(used[edges[done].u] || used[edges[done].v])
		return f(done+1,k);

	if(k == 0)
		return false;


	used[edges[done].u] = true;
	if(f(done+1,k-1))
		return true;
	used[edges[done].u] = false;

	used[edges[done].v] = true;
	if(f(done+1,k-1))
		return true;
	used[edges[done].v] = false;

	return false;
}

int main()
{
#ifdef HOME_PC
	//freopen ("input.txt","r",stdin);
	//freopen ("in.txt","r",stdin);
	//freopen ("output.txt","w",stdout);
#endif


	int tt;
	scanf("%d",&tt);
	for(int cas = 1;cas<=tt;++cas)
	{
		int g;
		scanf("%d %d %d",&n,&m,&g);

		sz = 0;
		


		FOR(i,0,m)
		{
			int u,v; scanf("%d %d",&u,&v);
			edges[sz++] = Edge(u,v);
		}

		mset(used,false);
		bool ans = f(0,n-g);
		if(!ans)
			printf("Impossible\n");
		else
			printf("Possible\n");
	}
#ifdef HOME_PC
	cerr<<endl<<"Execution time = "<<clock()<<" ms"<<endl;
#endif
	return 0;
}

