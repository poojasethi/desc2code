// Nipun Poddar , CSE, MNNIT Allahabad

#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<cstring>
#include<algorithm>

#define in(n) scanf("%d",&n)
#define in2(n,m) scanf("%d%d",&n,&m)
#define out(n) printf("%d\n",n)
#define out2(n,m) printf("%d %d\n",n,m)
#define inc(n) scanf("%c",&n)
#define inll(n) scanf("%lld",&n)
#define inll2(n,m) scanf("%lld%lld",&n,&m)
#define minm(a,b) (a<b?a:b)
#define maxm(a,b) (a<b?b:a)
#define loop(n) for(i=0;i<n;i++)
#define loop1(n) for(i=1;i<=n;i++)
#define fill0(x) memset(x,0,sizeof(x))
#define fill1(x) memset(x,-1,sizeof(x))
#define PB push_back
#define MP make_pair
#define F first
#define S second


#define MOD 1000000007
#define MAX 100009
#define INF 999999999

/*
long long gcd(long long a,long long b)
{
	while(b)
		b^=a^=b^=a%=b;
	return a;
}
long long int power(long long int b,long long int e)
{
	long long ans=1,temp;
	while(e>0)
	{
		if(e%2)
			ans=(ans*b)%MOD;
		b=(b*b)%MOD;
		e/=2;
	}
	return ans;
}*/

using namespace std;

int U[MAX],V[MAX],used[MAX];
int m;
bool VertexCoverRec(int u,int g)
{
	if(u==m) return true;
	if(used[U[u]] || used[V[u]]) return VertexCoverRec(u+1,g);
	if(g==0) return false;
	used[U[u]]++;
	if( VertexCoverRec(u+1,g-1) ) return true;
	used[U[u]]--;
	used[V[u]]++;
	if( VertexCoverRec(u+1,g-1) ) return true;
	used[V[u]]--;
	return false;
}

int main()
{
	int t,i,j,n,g;
	in(t);
	while(t--)
	{
		in2(n,m);
		in(g);
		loop(m)
			in2(U[i],V[i]);
		memset(used,0,sizeof(used));
		puts( VertexCoverRec(0,n-g) ? "Possible" : "Impossible" );
	}
	return 0;
}
