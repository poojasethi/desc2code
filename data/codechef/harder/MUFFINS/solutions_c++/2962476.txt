#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>

using namespace std; 

const int MAX_SIZE = 20000;
static char input[MAX_SIZE];
struct Scanner
{
	Scanner()
	{
		int sz = fread(input, 1, sizeof(input), stdin);
		curPos = input;
	}
	unsigned int nextInt()
	{
		int gap = input + MAX_SIZE - curPos;
		if (gap < 100)
		{
			memcpy(input, curPos, gap);
			fread(input + gap, 1, sizeof(input) - gap, stdin);
			curPos = input;

		}
		while (*curPos < '0') curPos++;

		unsigned int res = 0;
		while (*curPos >= '0') 
		{
			res = res * 10 + (*curPos) - '0';
			curPos++;
		}
		return res;
	}
	char* curPos;
};


#define rep(i,n) for(int i=0;i<(n);++i)
#define clr(a,b) memset(a,b,sizeof(a)); 
#define all(c) (c).begin(), (c).end() 
#define inf 1000000000 

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<int> vi;

int pu[20000];
int pv[20000];
bool marked[1000];

int choosed[20000];
int vis[1000];

int head[1000];
int next[40000];
int dest[40000];
int N;
int M ;
int G;

bool check(int c, int C, int cnt)
{
	if (cnt > N - G)
		return false;
	
	if (c == C)
		return true;

	int v = pv[choosed[c]];
	int u = pu[choosed[c]];


	int o = cnt;
	if (vis[v] == 0)
	{
		vis[v] = c + 1;
		cnt++;
	}
	if (vis[u] == 0)
	{
		vis[u] = c + 1;
		cnt++;
	}

	if (check(c + 1, C, cnt))
		return true;

	if (vis[v] == c + 1)
	{
		vis[v] = 0;
	}
	if (vis[u] == c + 1)
	{
		vis[u] = 0;
	}

	cnt = o;

	for (int x = 0; x < 2; x++)
	{
		int v = pv[choosed[c]];
		int u = pu[choosed[c]];

		if (x == 1)
			swap(u, v);

		int o = cnt;

		if (vis[v] == 0)
		{
			if (vis[u] == 0) 
			{
				cnt++;
				vis[u] = c + 1;
			}

			for (int m = head[v]; m != -1; m = next[m])
			{
				int t = dest[m];
				if (vis[t] == 0)
				{
					vis[t] = c + 1;
					cnt++;
					if (cnt > N - G)
						break;
				}
			}		

			if (check(c + 1, C, cnt))
				return true;

			if (vis[u] == c + 1) 
				vis[u] = 0;

			for (int m = head[v]; m != -1; m = next[m])
			{
				int t = dest[m];
				if (vis[t] == c + 1)
				{
					vis[t] = 0;
				}
			}		
		}
		cnt = o;
	}

	return false;
}

int main(int argc, char* argv[])
{
#ifndef ONLINE_JUDGE
	freopen("test.in", "r", stdin);
#endif

	Scanner sc;

	int T = sc.nextInt();

	for (int nTest = 1; nTest <= T; nTest++)
	{		
		N = sc.nextInt();
		M = sc.nextInt();
		G = sc.nextInt();

		fill(head, head + N, -1);
		fill(marked, marked + N, false);

		int edge = 0;

		for (int i = 0; i < M; i++)
		{
			int u = sc.nextInt();
			int v = sc.nextInt();
			
			next[edge] = head[u];
			dest[edge] = v;
			head[u] = edge++;

			next[edge] = head[v];
			dest[edge] = u;
			head[v] = edge++;


			pu[i] = u;
			pv[i] = v;
		}

		if (G == 0)
		{
			printf("Possible\n");
			continue;;
		}

		int C = 0;

		for (int i = 0; i < M; i++)
		{
			if (!marked[pu[i]] && !marked[pv[i]])
			{
				choosed[C] = i;
				C++;
				marked[pu[i]] = true;
				marked[pv[i]] = true;
			}
		}
		if (C > N - G)
		{
			printf("Impossible\n");
			continue;
		}

		fill(vis, vis + N, 0);

		bool ok = check(0, C, 0);
		

		printf("%s\n", ok ? "Possible" : "Impossible");		

	}  


	return 0;
}