
//{{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
using namespace std;
#define VAR(a,b) __typeof(b) a=(b)
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define ALL(c) (c).begin(),(c).end()
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;
template<class T>ostream& operator<<(ostream&o, const vector<T>&v) 
{
	o<<'{';
	FOREACH(it,v) o<<*it<<',';
	return o<<'}';
}
typedef long long LL;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
typedef vector<int> VI; typedef vector<string> VS; typedef vector<VI> VVI;
template<class T> inline int size(const T&c) 
{ 
	return c.size(); 
}
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
string rstring() { char buf[1000]; scanf("%s",buf); return buf; }
//}}}
int n;
vector<char> covered; // n
vector<pair<int,int> > edges;
int extras;
void readInput() 
{
	n = rint();
	int m = rint();
	int g = rint();
	extras = n - g;
	covered.assign(n,0);
	edges.resize(m);
	REP(i,m) 
	{
		int a = rint();
		int b = rint();
		edges[i] = make_pair(a,b);
	}
}
bool rek(int done, int ex) 
{
	if(done==size(edges)) 
		return true;
	int a = edges[done].first;
	int b = edges[done].second;
	if(covered[a] || covered[b])
		return rek(done+1, ex);
	else if(ex>0) 
	{
		covered[a] = 1;
		if(rek(done+1, ex-1)) 
			return true;
		covered[a] = 0;
		covered[b] = 1;
		if(rek(done+1, ex-1)) 
			return true;
		covered[b] = 0;
	}
	return false;
}
bool calc() 
{
	return rek(0, extras);
}

int main() 
{
	int ntc = rint();
	REP(tc,ntc) 
	{
		readInput();
		bool res = calc();
		if(res) 
			printf("Possible\n"); 
		else 
			printf("Impossible\n");
	}
}