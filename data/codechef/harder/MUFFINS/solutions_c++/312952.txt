// Baking Cupcakes
// Source: CodeChef August 2010 Cook-Off
// CodeChef ID: MUFFINS
// Status: WA
// Keywords: graph theory, NP-complete, maximum independent set, minimum vertex cover.
// Comments:

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

struct edge {
	int u,v;
	edge() {}
};
int del[50000];
edge E[50000];
int n,m,g;

bool can(int at, int am) {
	if (at == m) return 1;

	int u = E[at].u, v = E[at].v;
	if (del[u] || del[v]) return can(at+1,am);
	if (am > 0) {
		del[u] = 1;
		if (can(at+1,am-1)) return 1;
		del[u] = 0;

		del[v] = 1;
		if (can(at+1,am-1)) return 1;
		del[v] = 0;
	}
	return 0;
}

int main() {
	int ncases;
	scanf("%d", &ncases);
	while (ncases-- > 0) {
		scanf("%d %d %d", &n, &m, &g);

		for (int i=0;i<n;++i) del[i] = 0;

		for (int i=0;i<m;++i) {
			int u,v;
			scanf("%d %d", &u, &v);
			E[i].u = u;
			E[i].v = v;
		}

		if (can(0,n-g)) printf("Possible\n");
		else printf("Impossible\n");
	}
}
