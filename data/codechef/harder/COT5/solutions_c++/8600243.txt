#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
const int mo=1000000007;
int qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}

map<ll,int>maa;
struct que{
	int opt;
	ll a,b;
}qe[211111];int tot=0;
int q;
int ma[888888]={0};
bool le[888888];
int f[888888]={0};

int I;int v;


int getr(int v,int x){
	if(ma[x]<=v)return 0;
	if(le[x])return ma[x]>v;
	if(ma[x<<1]>ma[x<<1|1]){
		return getr(v,x<<1);
	}else if(v>ma[x<<1]){
		return getr(v,x<<1|1);
	}else{
		return getr(v,x<<1)+f[x<<1];
	}
}
int getl(int v,int x){
	if(ma[x]<=v)return 0;
	if(le[x])return ma[x]>v;
	if(ma[x<<1|1]>ma[x<<1]){
		return getl(v,x<<1|1);
	}else if(v>ma[x<<1|1]){
		return getl(v,x<<1);
	}else{
		return getl(v,x<<1|1)+f[x<<1|1];
	}
}
void upd(int l,int r,int x){
	if(l==r){
		ma[x]=v;
		le[x]=1;
	}else{
		int mid=l+r>>1;
		if(I<=mid)upd(l,mid,x<<1);
		else upd(mid+1,r,x<<1|1);
		ma[x]=max(ma[x<<1],ma[x<<1|1]);
		f[x<<1]=getr(ma[x<<1],x<<1|1);
		f[x<<1|1]=getl(ma[x<<1|1],x<<1);
	}
}
ll tmp[222222];
ll bac[222222];
int l1,r1;int an;

void quema(int l,int r,int x){
	if(l1<=l && r<=r1){
		an=max(an,ma[x]);
	}else{
		int mid=l+r>>1;
		if(l1<=mid)quema(l,mid,x<<1);
		if(r1>mid)quema(mid+1,r,x<<1|1);
	}
}
void quel(int l,int r,int x){
	if(l1<=l && r<=r1){
		an+=getl(v,x);
		v=max(v,ma[x]);
	}else{
		int mid=l+r>>1;
		if(r1>mid)quel(mid+1,r,x<<1|1);
		if(l1<=mid)quel(l,mid,x<<1);
	}
}
void quer(int l,int r,int x){
	if(l1<=l && r<=r1){
		an+=getr(v,x);
		v=max(v,ma[x]);
	}else{
		int mid=l+r>>1;
		if(l1<=mid)quer(l,mid,x<<1);
		if(r1>mid)quer(mid+1,r,x<<1|1);
	}
}
int geth(int a){
	int ret=0;
	an=0,l1=1,r1=a-1;v=tmp[a];
	if(l1<=r1){
		quel(1,tot,1);
		ret+=an;
	}
	an=0,l1=a+1,r1=tot;v=tmp[a];
	if(l1<=r1){
		quer(1,tot,1);
		ret+=an;
	}
	return ret;
}
int main()
{
	gn(q);
	for (int i=1;i<=q;i++){
		gn(qe[i].opt);
		if(qe[i].opt==1)gn(qe[i].a);
		else gn(qe[i].a),gn(qe[i].b);
	}
	for (int i=1;i<=q;i++)if(qe[i].opt==0){
		maa[qe[i].a];
	}
	for (map<ll,int>::iterator it=maa.begin();it!=maa.end();it++)
		it->second=++tot;
	for (int i=1;i<=q;i++){
		qe[i].a=maa[qe[i].a];
		if(qe[i].opt==2)qe[i].b=maa[qe[i].b];
	}
	for (int i=1;i<=q;i++)if(qe[i].opt==0){
		maa[qe[i].b];
	}
	int tt=0;
	for (map<ll,int>::iterator it=maa.begin();it!=maa.end();it++)
		it->second=++tt;
	for (int i=1;i<=q;i++)if(qe[i].opt==0){
		qe[i].b=maa[qe[i].b];
	}

	for (int i=1;i<=q;i++)
		if(qe[i].opt==0){
			I=qe[i].a,tmp[I]=v=qe[i].b,bac[qe[i].b]=I;
			upd(1,tot,1);
		}else if(qe[i].opt==1){
			I=qe[i].a,tmp[I]=v=0;
			upd(1,tot,1);
		}else{
			int a=qe[i].a,b=qe[i].b,d;
			if(a>b)swap(a,b);
			l1=a,r1=b;v=0;quema(1,tot,1);
			d=bac[an];
			printf("%d\n",geth(a)+geth(b)-geth(d)*2);
		}
	return 0;
}
