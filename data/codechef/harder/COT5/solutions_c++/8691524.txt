#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <map>
using namespace std;

int n,m,i,j,k,opt,sum,aim,ll,rr;
int Opt[200005],lenl[800005],lenr[800005],Maxu[800005];
unsigned Max[800005],a[200005],U[200005],V[200005],u,v;

map <unsigned,int> Hash;

int calcl(int x,int l,int r,unsigned y)
{
	if(!x)return 0;
	if(l==r)return (Max[x]>y);
	int mid=l+r>>1;
	if(Max[x<<1]<=y)return calcl(x<<1|1,mid+1,r,y);
	return calcl(x<<1,l,mid,y)+lenl[x]-lenl[x<<1];
}

int calcr(int x,int l,int r,unsigned y)
{
	if(!x)return 0;
	if(l==r)return (Max[x]>y);
	int mid=l+r>>1;
	if(Max[x<<1|1]<=y)return calcr(x<<1,l,mid,y);
	return calcr(x<<1|1,mid+1,r,y)+lenr[x]-lenr[x<<1|1];
}

void C(int x,int l,int r)
{
	if(l==r)
	{
		Max[x]=v;Maxu[x]=l;
		lenl[x]=lenr[x]=(v>0);
		return;
	}
	int mid=l+r>>1;
	if(u<=mid)C(x<<1,l,mid);
	else C(x<<1|1,mid+1,r);
	if(Max[x<<1]>Max[x<<1|1])Max[x]=Max[x<<1],Maxu[x]=Maxu[x<<1];
	else Max[x]=Max[x<<1|1],Maxu[x]=Maxu[x<<1|1];
	lenl[x]=lenl[x<<1]+calcl(x<<1|1,mid+1,r,Max[x<<1]);
	lenr[x]=lenr[x<<1|1]+calcr(x<<1,l,mid,Max[x<<1|1]);
}

void Q(int x,int l,int r)
{
	if(l>=ll&&r<=rr)
	{
		if(Max[x]>v)v=Max[x],u=Maxu[x];
		return;
	}
	int mid=l+r>>1;
	if(rr<=mid)Q(x<<1,l,mid);
	else if(ll>mid)Q(x<<1|1,mid+1,r);	
		else Q(x<<1,l,mid),Q(x<<1|1,mid+1,r);;
}

void Qr(int x,int l,int r)
{
	if(r<=aim)
	{
		sum+=calcr(x,l,r,v);
		if(Max[x]>v)v=Max[x];
		return;
	}
	int mid=l+r>>1;
	if(aim>mid)Qr(x<<1|1,mid+1,r);
	Qr(x<<1,l,mid);
}

void Ql(int x,int l,int r)
{
	if(l>=aim)
	{
		sum+=calcl(x,l,r,v);
		if(Max[x]>v)v=Max[x];
		return;
	}
	int mid=l+r>>1;
	if(aim<=mid)Ql(x<<1,l,mid);
	Ql(x<<1|1,mid+1,r);
}

int deep(int u)
{
	sum=0;aim=u;
	v=0;Qr(1,1,k);
	v=0;Ql(1,1,k);
	return sum-1;
}

int main()
{
	scanf("%d",&n);
	for(i=1;i<=n;++i)
	{
		scanf("%d",&Opt[i]);
		if(Opt[i]==0)scanf("%u%u",&U[i],&V[i]),a[++m]=U[i];
		if(Opt[i]==1)scanf("%u",&U[i]);
		if(Opt[i]==2)scanf("%u%u",&U[i],&V[i]);
	}
	sort(a+1,a+m+1);
	for(i=1;i<=m;++i)if(a[i]!=a[i-1])Hash[a[i]]=++k;
	for(i=1;i<=n;++i)
	{
		U[i]=Hash[U[i]];
		if(Opt[i]==2)V[i]=Hash[V[i]];
	}
	for(i=1;i<=n;++i)
	{
		opt=Opt[i];
		if(opt==0)
		{
			u=U[i];v=V[i];
			C(1,1,k);
		}
		if(opt==1)
		{
			u=U[i];v=0;
			C(1,1,k);
		}
		if(opt==2)
		{
			ll=U[i];rr=V[i];
			if(ll>rr)swap(ll,rr);
			u=v=0;
			Q(1,1,k);
			printf("%d\n",deep(ll)+deep(rr)-2*deep(u));
		}
	}
}