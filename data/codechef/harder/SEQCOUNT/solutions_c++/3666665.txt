#include <bits/stdc++.h>
using namespace std;

const int N = 100000;
const int mod = 1000000007;
const int lim = 455;
int dp[2][N + 10];
long long c[lim + 10][lim + 10];
int f[lim][N][2];

int add(int x,int y)
{
    x += y;
    if(x >= mod) x -= mod;
    return x;
}
    
int main()
{
    int n,m,r;
    scanf("%d%d%d",&n,&r,&m);
    if((long long)r * (r + 1) / 2 > n) {
        cout << 0 << endl;
        return 0;
    }    
    for(int i = 1; i <= N; i ++) dp[1][i] = 1;
    for(int i = 2; i <= r; i ++) {
        memset(dp[i & 1],0,sizeof(dp[i & 1]));
        for(int j = i * (i + 1) / 2; j <= N; j ++) {
            dp[i & 1][j] = add(dp[(i & 1) ^ 1][j - i],dp[i & 1][j - i]);
        }
    }
    int ut = r * (r + 1) / 2;
    f[0][0][0] = 1;
    for(int i = 0; i < r; i ++) {
        for(int j = 0; j <= ut; j ++) {
            for(int k = 0; k < 2; k ++) {
                f[i + 1][j][k] = add(f[i + 1][j][k],f[i][j][k]);
                if(r - i + j <= ut)
                    f[i + 1][j + r - i][k ^ 1] = add(f[i + 1][j + r - i][k ^ 1],f[i][j][k]);
            }
        }
    }
    long long ans = 0;
    for(long long i = 0; i <= ut; i ++) {
        if(n - i * m >= 0) {
            ans = (ans + 1LL * dp[r & 1][n - i * m] * f[r][i][0]) % mod;
            ans = (ans - 1LL * dp[r & 1][n - i * m] * f[r][i][1]) % mod;
        }
    }
    if(ans < 0) ans += mod;
    cout << ans << endl;
    return 0;
}

