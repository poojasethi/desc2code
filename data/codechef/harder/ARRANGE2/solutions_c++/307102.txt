#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

using namespace std;

typedef long long ull;

#define FOR(i,s,n)  for(i=s;i<(n);++i)
#define REP(i,s,n)  for(i=s;i<=(n);++i)
#define DISP(x)     cout << #x << ": " << x << endl;

#define TOT 24
#define MAX 5000000000llu
#define DIFF 1000
#define DIFFNO 3

#define gc getchar_unlocked

ull A,B;
ull nums[TOT]={125874,
1025874, 1245789,
10025874ll, 10245789ll, 12356784ll, 12457899ll,
100025874ll, 100245789ll, 102356784ll, 102457899ll,
123456789ll, 124578999ll,
1000025874ll, 1000245789ll, 1002356784ll, 1002457899ll, 1023456789ll,
1024578999ll, 1122556284ll,
1233566784ll, 1234567899ll, 1245789999ll, 1573788744ll},rep[TOT];
int dcount[TOT]={6,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10};
int from[11]={TOT,TOT,TOT,TOT,TOT,TOT,0,1,3,7,13};
int sep[TOT][10],dig[TOT][10],cnt;
int end[10]={0,2,6,12,23};
long p8[10];
ull num[1000000];

inline long getrep(ull x)
{
	register long ret=0,t;

	for(;x;x/=10)
	{
		ret+=(1l << (x%10*3));
	}
	return ret;
}

bool ispermut2(int in,ull n)
{
	//ull x=getrep(n);
	return getrep(n)==rep[in];
}


int pre()
{
	ull x,m;
	long r,ix;
	register int i,j,k,l,t,k1,l1,tk,sk;
	int ret=0,n,f,pcnt=0,lpcnt,gcnt=0,ncnt=0;
	int q[10]={0,2,4,6,8,0,2,4,6,8},rem[10]={0,0,0,0,0,1,1,1,1,1},c;
	int temp[11],e_cnt=0,l_cnt=0;
	bool flag;

	FOR(j,0,11) temp[j]=0;
	FOR(i,0,12)
	{
		n=dcount[i];
		FOR(j,0,n) temp[j]=sep[i][j];
		ix=r=0;
		FOR(j,0,n)
			r+=p8[(q[temp[j]]+rem[temp[j+1]])];

		do
		{

			if(r==rep[i])
			{
				ix=0;
				FOR(j,0,n)
					ix=ix*10+temp[j];
				num[cnt]=ix;
				++cnt;
			}

			k=n-2;
			r-=p8[q[temp[n-1]]];

			for(;k>=0;--k)
			{
				r-=p8[q[temp[k]]+rem[temp[k+1]]];
				if(temp[k+1]>temp[k])
					break;
			}
			if(k) {r-=p8[q[temp[k-1]]+rem[temp[k]]];} else x=r=0;

			for(l=n-1;l>k && temp[k]>=temp[l];--l);
			j=temp[k];temp[k]=temp[l];temp[l]=j;

			tk=k+1;

			for(l=n-1;l>=k;--l,++tk)
			{
				if(l>tk) {j=temp[l];temp[l]=temp[tk];temp[tk]=j;}
				r+=p8[q[temp[l]]+rem[temp[l+1]]];
			}

			if(k) {r+=p8[q[temp[k-1]]+rem[temp[k]]];}

		}while(temp[0]<5);

		if(i==end[e_cnt])
		{
			++e_cnt;
			sort(num+l_cnt,num+cnt);
			l_cnt=cnt;
		}
	}

	FOR(j,0,11) temp[j]=0;
	FOR(i,12,TOT)
	{
		n=dcount[i];
		FOR(j,0,n) temp[j]=sep[i][j];
		x=r=0;
		FOR(j,0,n)
			r+=p8[(q[temp[j]]+rem[temp[j+1]])];

		do
		{

			if(r==rep[i])
			{
				x=0;
				FOR(j,0,n)
					x=x*10+temp[j];
				num[cnt]=x;
				++cnt;
			}

			k=n-2;
			r-=p8[q[temp[n-1]]];

			for(;k>=0;--k)
			{
				r-=p8[q[temp[k]]+rem[temp[k+1]]];
				if(temp[k+1]>temp[k])
					break;
			}
			if(k) {r-=p8[q[temp[k-1]]+rem[temp[k]]];} else x=r=0;

			for(l=n-1;l>k && temp[k]>=temp[l];--l);

			j=temp[k];temp[k]=temp[l];temp[l]=j;

			tk=k+1;

			for(l=n-1;l>=k;--l,++tk)
			{
				if(l>tk) {j=temp[l];temp[l]=temp[tk];temp[tk]=j;}
				r+=p8[q[temp[l]]+rem[temp[l+1]]];
			}

			if(k) {r+=p8[q[temp[k-1]]+rem[temp[k]]];}

		}while(temp[0]<5);

		if(i==end[e_cnt])
		{
			++e_cnt;
			sort(num+l_cnt,num+cnt);
			l_cnt=cnt;
		}
	}
	return cnt;
}

void preproc()
{
	int i,j,t;
	ull n,x;
	int d[10];
	FOR(i,0,10) p8[i]=(1 << 3*i);

	FOR(i,0,TOT)
	{
		cnt=0;
		rep[i]=0;
		for(n=nums[i];n;n/=10)
		{
			t=n%10;
			sep[i][cnt]=t;
			dig[i][t]++;
			rep[i]+=p8[t];
			++cnt;
		}
		reverse(sep[i],sep[i]+cnt);
		dcount[i]=cnt;
	}
	cnt=0;
	pre();
}

inline ull fps()
{
	register int c = gc();
	ull x = 0;


	for(;(c<48 || c>57);c = gc());

	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}

	return x;
}

int main()
{
    int i,j,t,ans;

    preproc();

	scanf("%d",&t);


	while(t--)
	{
		A = fps(); B = fps();

		ans=upper_bound(num,num+cnt,B)-upper_bound(num,num+cnt,A - 1);
		printf("%d\n",ans);
	}
	return 0;
}
