#include<bits/stdc++.h>
#define scanf(arg...) scanf(arg)?:0
using namespace std;
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int naxn = 2e4 + 5;
const int naxk = 25;
const int mod = 1e9 + 7;
 
int n,k;
int a[naxk], gdzie[naxn];
ll dp[naxk][naxn];
ll sil[naxn], odwr[naxn];
 
ll pot(ll a, ll b) {
  ll res = 1;
  while (b) {
    if (b&1) res = res * a % mod;
    a = a * a % mod;
    b /= 2;
  }
  return res;
}
 
ll newton(int n, int k) {
  return sil[n] * odwr[k] % mod * odwr[n-k] % mod;
}
 
ll oblicz(int lewy_indeks, int prawy_koniec) {
  int prawy_indeks = gdzie[prawy_koniec];
  if (lewy_indeks == prawy_indeks || a[lewy_indeks] == prawy_koniec) return 1;
  if (dp[lewy_indeks][prawy_koniec]) return dp[lewy_indeks][prawy_koniec];
  
  int ile = prawy_koniec - a[lewy_indeks];
  for (int i = lewy_indeks + 1; i <= prawy_indeks; i += 2) {
    int ilel = a[i] - a[lewy_indeks] - 1;
    dp[lewy_indeks][prawy_koniec] += oblicz(lewy_indeks, a[i]-1) * oblicz(i, prawy_koniec) % mod * newton(ile-1, ilel);
  }
  
  if (lewy_indeks % 2 == prawy_indeks % 2) {
    dp[lewy_indeks][prawy_koniec] += oblicz(lewy_indeks, prawy_koniec-1);
  }
  
  dp[lewy_indeks][prawy_koniec] %= mod;
  //printf("dla %d %d mamy %lld\n",lewy_indeks, prawy_koniec, dp[lewy_indeks][prawy_koniec]);
  return dp[lewy_indeks][prawy_koniec];
}
 
void rob() {	
  scanf("%d%d",&n,&k);
    
  FOR(i,1,k) scanf("%d",&a[i]);
  int wsk = 1;
  FOR(i,1,n) {
    gdzie[i] = wsk;
    if (a[wsk+1] == i) ++wsk;
  }
  a[1] = 0;
  FOR(i,1,k) FOR(j,1,n) dp[i][j] = 0;
  printf("%lld\n",oblicz(1,n));
}
 
int main() {
  sil[0] = odwr[0] = 1;
  FOR(i,1,20000) {
    sil[i] = sil[i-1] * i % mod;
    odwr[i] = pot(sil[i], mod-2);
  }
  
  int test;
  scanf("%d",&test);
  while (test--) {
    rob();
  }
  return 0;
}
 