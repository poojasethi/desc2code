#include <cstdio>
#include <string>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <queue>
#include <set>
using namespace std;
#define pii pair<int,  int>
#define VI vector<int>
#define pb push_back
#define x first
#define y second
#define mp make_pair
#define ll long long
#define L(s) ((int)(s).size())
#define all(s) (s).begin(), (s).end()
int n, m;
int a[111111];
VI dvs[111111];
int b[555];
int lp[111111];
vector<int> pd[111111];
vector<pair<pii, pii> > q;
const int R = 300;
inline bool byroot(const pair<pii, pii> &a, const pair<pii,pii>&b) {
	if (a.x.x / R != b.x.x / R) return a.x.x / R < b.x.x / R;
	return a.x.y < b.x.y;
}
int sum[111111];
int s2;
const int mod = 1000000007;
inline void inc(int p) {
	s2 += 2 * sum[p] + 1;
	++sum[p];
	if (s2 >= mod) s2 -= mod;
}
inline void dec(int p) {
	s2 += 1 - 2 * sum[p];
	--sum[p];
	if (s2 < 0) s2 += mod;
}
int prod[555][555];
int main() {
	for(int i = 2; i < 111111; ++i) {
		lp[i] = i;
	}
	for(int i = 2; i * i < 111111; ++i) {
		if (lp[i] == i) {
			for(int j = i * i; j < 111111; j += i) {
				lp[j] = i;
			}
		}
	}
 
	scanf("%d%d", &n, &m);
	//n = 100000;
	//m = 500;
	for(int i = 0; i < n; ++i) {
		scanf("%d", &a[i]);
		//a[i] = 30030;
		int x = a[i];
		while(x > 1) {
			int l = lp[x];
			while(x % l == 0) x /= l;
			pd[i].pb(l);
		}
	}
 
	for(int i = 0; i < m; ++i) {
		scanf("%d", &b[i]);
		//b[i] = rand() % n;
	}
 
	for(int i = 0; i < m; ++i) {
		for(int j = 0; j < m; ++j) {
			int l = (b[i] + b[j]) % n;
			int r = (b[i] - b[j] + n) % n;
			if (l > r) swap(l, r);
			q.pb(mp(mp(l, r), mp(i, j)));
		}
	}
 
	sort(all(q), byroot);
 
	for(int ptr = 0; ptr < L(q); ) {
		int fin = ptr;
		s2 = 0;
		memset(sum, 0, sizeof(sum));
		int head = (q[ptr].x.x / R) / R;
		int tail = head;
		while(fin < L(q) && q[fin].x.x / R == q[ptr].x.x / R) {
 
 
			while(tail <= q[fin].x.y) {
				for(int i = 0; i < L(pd[tail]); ++i) {
					inc(pd[tail][i]);
				}
				++tail;
			}
 
 
			while(head < q[fin].x.x) {
				for(int i = 0; i < L(pd[head]); ++i) {
					dec(pd[head][i]);
				}
				++head;
			}
			while(head > q[fin].x.x) {
				--head;
				for(int i = 0; i < L(pd[head]); ++i) {
					inc(pd[head][i]);
				}
			}
 
			//cerr << q[fin].x << " " << q[fin].y << " " << s2 << endl;
			//cerr << s2 << endl;
			prod[q[fin].y.x][q[fin].y.y] += s2;
			if (prod[q[fin].y.x][q[fin].y.y] >= mod) {
				prod[q[fin].y.x][q[fin].y.y] -= mod;
			}
			++fin;
		}
		ptr = fin;
	}
 
	int ans = 0;
	for(int i = 0; i < m; ++i) {
		int mul = 1;
		for(int j = 0; j < m; ++j) {
		//	cerr << prod[i][j] << " ";
			mul = (ll)mul * prod[i][j] % mod;
		}
		ans = (ans + mul) % mod;
	}
 
	cout << ans << endl;
}
 