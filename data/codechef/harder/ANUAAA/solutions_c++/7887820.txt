#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>
#include<cstdio>
using namespace std;

#define mod 1000000007

long long int ans[1000007];
struct node
{
int l,r,i;
};
int blocks;
struct node query[1000000+10];
long long int val;
long long int mark[1000007];
int y;
vector<int>fact[100010];
bool cmp(struct node a,struct node b)
{
if(a.l/blocks!=b.l/blocks)
return a.l/blocks<b.l/blocks;
return a.r<b.r;
}

void update(int i,int temp)
{
val=val-mark[i]*mark[i];
mark[i]+=temp;
val+=mark[i]*mark[i];
if(val<0)
val=val+mod;
val=val%mod;
}

void add(int i,int *a)
{
for(int j=0;j<fact[a[i]].size();j++)
update(fact[a[i]][j],1);
}
void rem(int i,int *a)
{
for(int j=0;j<fact[a[i]].size();j++)
update(fact[a[i]][j],-1);
}

void func(int *a,int *b,int m,int n)
{
for(int i=0;i<m;i++)
for(int j=0;j<m;j++)
{
int l=(b[i]+b[j])%n;
int r=(b[i]-b[j]+n)%n;
query[y].l=min(l,r);
query[y].r=max(l,r);
query[y].i=y;
y++;
}
blocks=(int)sqrt(n);
sort(query,query+m*m,cmp);
for(int i=2;i<=100009;i++)
{
int temp=i;
for(int j=2;j*j<=i;j++)
if(temp%j==0)
{
fact[i].push_back(j);
while(temp%j==0)
temp=temp/j;
}
if(temp>1)
fact[i].push_back(temp);
}

int l=-1,r=-1;
for(int i=0;i<m*m;i++)
{
if(l>=query[i].l)
while(l>=query[i].l)
{
add(l,a);
l--;
}
else
while(l+1<query[i].l)
{
rem(l+1,a);
l++;
}
if(r>query[i].r)
while(r>query[i].r)
{
rem(r,a);
r--;
}
else
while(r+1<=query[i].r)
{
add(r+1,a);
r++;
}
ans[query[i].i]=val;
}

}

int main()
{
ios_base::sync_with_stdio(false);
int n,m;
cin>>n>>m;
int a[n],b[m];
for(int i=0;i<n;i++)
cin>>a[i];
for(int i=0;i<m;i++)
cin>>b[i];
func(a,b,m,n);
y=0;
val=0;
for(int i=0;i<m;i++)
{
long long int p=1;
for(int j=0;j<m;j++)
{
p=p*ans[y++];
p=p%mod;
}
val=val+p;
val=val%mod;
}
cout<<val<<endl;
return 0;
}
