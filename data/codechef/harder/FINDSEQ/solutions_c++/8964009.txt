#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n	1005
#define min(a,b)	((a)<(b)?(a):(b))
#define max(a,b)	((a)>(b)?(a):(b))
#define For(i,a,b)	for(int i=a;i<=b;i++)
#define Rep(i,a,b)	for(int i=a;i>=b;i--)

int		T,N,M,A[n],B[n];
int		Num[n][n],Ps[n][n],Pb[n][n],Ss[n][n],Sb[n][n];
char	s[6];

bool	Right(int i,int j,int x,int y){
		return	(i>j)==(s[x]>s[y])&&(i<j)==(s[x]<s[y]);
}
void	Ot(int N1,int N2,int L3,int R3,int N4,int N5){
		int k=1;
		for	(;A[k]!=N1;k++);	printf("%d ",k-1);
		for	(;A[k]!=N2;k++);	printf("%d ",k-1);
		for	(;!(L3<A[k]&&A[k]<R3);k++);	printf("%d ",k-1);
		for	(;A[k]!=N4;k++);	printf("%d ",k-1);
		for	(;A[k]!=N5;k++);	printf("%d\n",k-1);
}

void	Work(){
		scanf("%d%s",&N,s+1);
		For(i,1,N)	scanf("%d",&A[i]),B[i]=A[i];

		sort(B+1,B+N+1);
		M=unique(B+1,B+N+1)-B-1;
		For(i,1,N)	A[i]=lower_bound(B+1,B+M+1,A[i])-B;

		For(i,0,M+1)Num[0][i]=0,Ps[0][i]=Ss[N+1][i]=0,Pb[0][i]=Sb[N+1][i]=M+1;

		For(i,1,N)	{
			For(j,1,M)	Num[i][j]=Num[i-1][j]+(A[i]<=j);
			For(j,0,M+1)	Ps[i][j]=Ps[i-1][j],Pb[i][j]=Pb[i-1][j];
			For(j,A[i]+1,M+1)	Ps[i][j]=max(Ps[i][j],A[i]);
			Rep(j,A[i]-1,0)		Pb[i][j]=min(Pb[i][j],A[i]);
		}

		Rep(i,N,1)	{
			For(j,0,M+1)	Ss[i][j]=Ss[i+1][j],Sb[i][j]=Sb[i+1][j];
			For(j,A[i]+1,M+1)	Ss[i][j]=max(Ss[i][j],A[i]);
			Rep(j,A[i]-1,0)		Sb[i][j]=min(Sb[i][j],A[i]);
		}

		For(i2,2,N-3)	For(i4,i2+2,N-1)
		if	(Right(A[i2],A[i4],2,4)){
			int L1=0,R1=M+1,L5=0,R5=M+1,N2=A[i2],N4=A[i4];

			s[1]>s[2]?L1=max(L1,N2):R1=min(R1,N2);
			s[1]>s[4]?L1=max(L1,N4):R1=min(R1,N4);
			s[5]>s[2]?L5=max(L5,N2):R5=min(R5,N2);
			s[5]>s[4]?L5=max(L5,N4):R5=min(R5,N4);

			int	N1,N5;
			if	(s[1]<s[3]&&s[3]<s[5])	N1=Pb[i2-1][L1],N5=Ss[i4+1][R5];
			if	(s[1]>s[3]&&s[3]>s[5])	N1=Ps[i2-1][R1],N5=Sb[i4+1][L5];
			if	(s[1]<s[3]&&s[3]>s[5])	{
				if	(s[1]<s[5])	N1=Pb[i2-1][L1],N5=Sb[i4+1][max(L5,N1)];
					else	N5=Sb[i4+1][L5],N1=Pb[i2-1][max(L1,N5)];
			}
			if	(s[1]>s[3]&&s[3]<s[5])	{
				if	(s[1]>s[5])	N1=Ps[i2-1][R1],N5=Ss[i4+1][min(R5,N1)];
					else	N5=Ss[i4+1][R5],N1=Ps[i2-1][min(R1,N5)];
			}

			if	(!(L1<N1&&N1<R1))	continue;
			if	(!(L5<N5&&N5<R5))	continue;
			if	(!Right(N1,N5,1,5))	continue;

			int L3=0,R3=M+1;
			s[3]>s[1]?L3=max(L3,N1):R3=min(R3,N1);
			s[3]>s[2]?L3=max(L3,N2):R3=min(R3,N2);
			s[3]>s[4]?L3=max(L3,N4):R3=min(R3,N4);
			s[3]>s[5]?L3=max(L3,N5):R3=min(R3,N5);

			if	(L3>=R3)	continue;
			if	((Num[i4-1][R3-1]-Num[i4-1][L3])-(Num[i2][R3-1]-Num[i2][L3])>0)
				return	Ot(N1,N2,L3,R3,N4,N5);
		}
		puts("-1");
}

int		main(){
		for	(scanf("%d",&T);T--;)	Work();
}