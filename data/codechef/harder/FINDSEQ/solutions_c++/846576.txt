#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>

using namespace std;

#define eps 1e-10
#define SZ(X)   (int)(X).size()
#define FOR(i, n)   for(int (i) = 0; (i) < (n); (i)++)
#define inf (1LL<<30)
#define PI acos(-1.0)
#define SQR(v)  (1LL*(v)*(v))
#define MP(x, y)  make_pair((x), (y))
#define maxn 50+5
#define int64 long long

int x[1000+5], xx[1000+5][1000+5], yy[1000+5][1000+5];

int LL[1000+5][1000+5], RR[1000+5][1000+5];
int N;
char s[10+5];

int CountArray[1000+5];

void Add(int x, int N)
{
    for(int i = x; i <= N; i += (i&-i))   CountArray[i]++;
}

int caluate_sum(int x)
{
    int sum = 0;
    for(int i = x; i > 0; i -= (i&-i))  sum += CountArray[i];
    return sum;
}


vector< pair<int, int> > Arr;

int wh[10+5];
void done(int &Lx, int &Rx, int x, int y, int z)
{
    if(x > y)    Lx = max(z + 1, Lx);
    else         Rx = min(z - 1, Rx);
}
int T;
int main()
{

  //  freopen("A.in", "r", stdin);
    //freopen("A.out", "w", stdout);
    scanf("%d", &T);
    while(T--)
    {
        scanf("%d %s", &N, s);
        //cout << N << " " << s << endl;
        for(int i = 0; i < 5; i++)  wh[s[i] - '0'] = i+1;
        for(int i = 1; i <= N; i++)   scanf("%d", &x[i]);
       // for(int i = 1; i <= N; i++)  cout << x[i] << " ";
       // cout << endl;
        Arr.clear();
        for(int i = 1; i <= N; i++)   Arr.push_back(pair<int, int>(x[i], i));
        sort(Arr.begin(), Arr.end());
        for(int i = 1; i <= N; i++)
        {
            xx[i][0] = -1;
            for(int j = 1; j <= N; j++) {
                xx[i][j] = xx[i][j-1];
                if(x[j] < x[i])   xx[i][j] = j;
            }
            xx[i][N+1] = xx[i][N];
            yy[i][N+1] = -1;
            for(int j = N; j >= 1; j--)
            {
                if(x[j] < x[i])    yy[i][j] = j;
                else yy[i][j] = yy[i][j+1];
            }
            yy[i][0] = yy[i][1];
        }
        for(int i = 1; i <= N; i++)
        {
            LL[i][0] = -1;
            for(int j = 1; j <= N; j++)
            {
                if(x[j] > x[i])   LL[i][j] = j;
                else     LL[i][j] = LL[i][j-1];
            }
            LL[i][N+1] = LL[i][N];
            RR[i][N+1] = -1;
            for(int j = N; j >= 1; j--)
            {
                if(x[j] > x[i])   RR[i][j] = j;
                else   RR[i][j] = RR[i][j+1];
            }
            RR[i][0] = RR[i][1];
        }
        bool flag = (wh[2] > wh[4]), AnsFlag = false;
        for(int i = 1; i <= N; i++)
        {
            int Tx = Arr[i-1].second;
            for(int j = 1; j <= N; j++)   CountArray[j] = 0;
            // if(Arr[i-1].first != 5) continue;
            for(int j = i+1, k = i; j <= N; j++)
            {
                while(k < j-1&&Arr[k].first < Arr[j-1].first)
                {
                    if(Arr[k].first > Arr[i-1].first)
                        Add(Arr[k].second, N);
                    k++;
                }
                if(Arr[i-1].first >= Arr[j-1].first) continue;
                if(flag == false&&Arr[i-1].second > Arr[j-1].second) continue;
                if(flag == true&&Arr[i-1].second < Arr[j-1].second)  continue;
                int Ox = -1, Fx = -1, Rx = Arr[j-1].second;
                if(s[0] == '1')
                {
                   // cout << "^_______^" << endl;
                    Ox = yy[Tx][1];
                   // cout << Tx << endl;
                   // cout << Ox << endl;
                }
                else if(wh[1] + 1 == wh[2])
                {
                    Ox = xx[Tx][Tx-1];
                }
                else if(wh[1] - 1 == wh[2])
                {
                    Ox = yy[Tx][Tx+1];
                }
                else if(wh[1] - 1 == wh[4])
                {
                    Ox = yy[Tx][Rx+1];
                }
                else if(wh[1] + 1 == wh[4])
                {
                    Ox = xx[Tx][Rx-1];
                }
                else if(s[4] == '1')
                {
                    Ox = xx[Tx][N];
                }
      //            cout << "Ox =              " << Ox << endl;
                if(s[0] == '5')
                {
                    Fx = RR[Rx][1];
                }
                else if(s[4] == '5')
                {
                    Fx = LL[Rx][N];
                }
                else if(wh[5] + 1 == wh[2])
                {
                    Fx = LL[Rx][Tx-1];
                }
                else if(wh[5] - 1 == wh[2])
                {
                    Fx = RR[Rx][Tx+1];
                }
                else if(wh[5] - 1 == wh[4])
                {
                    Fx = RR[Rx][Rx+1];
                }
                else if(wh[5] + 1 == wh[4])
                {
                    Fx = LL[Rx][Rx-1];
                }
                if(Ox == -1&&Fx == -1)   continue;
               // cout << "Fx = " << Fx << endl;
                //      cout << "Fx = " <<  Fx << endl;
                if(wh[1] + 1 == wh[5])
                {
                    if(Ox == -1)   Ox = xx[Tx][Fx-1];
                    if(Fx == -1)   Fx = RR[Rx][Ox+1];
            //        cout << "Ox = " << endl;
                }
                else if(wh[1] - 1 == wh[5])
                {
                    if(Ox == -1)   Ox = yy[Tx][Fx+1];
                    else if(Fx == -1)   Fx = LL[Rx][Ox-1];
                }
                if(Ox == -1||Fx == -1) continue;
              //  cout << Ox << endl;
                int LLx = 1, RRx = N;
                done(LLx, RRx, wh[3], wh[1], Ox);
                done(LLx, RRx, wh[3], wh[2], Tx);
                done(LLx, RRx, wh[3], wh[4], Rx);
                done(LLx, RRx, wh[3], wh[5], Fx);
                int a[10] = {0, Ox-1, Tx-1, -1, Rx-1, Fx-1};
                bool badFlag = false;
                for(int k = 0; k < 4; k++) {
                    if(s[k] != '3'&&s[k+1] != '3')
                    {
                        if(a[s[k]-'0'] >= a[s[k+1]-'0'])  badFlag = true;
                    }
                    if(k < 3&&s[k] != '3'&&s[k+2] != '3')
                    {
                        if(a[s[k]-'0'] >= a[s[k+2]-'0'])  badFlag = true;
                    }
                }
                if(badFlag == true)  continue;
                if(LLx <= RRx)
                {
                    if(caluate_sum(RRx) - caluate_sum(LLx-1) > 0)
                    {
                        int Ex = -1;
                        for(int k = LLx; k <= RRx; k++)
                        {
                            if(x[k] > Arr[i-1].first&&x[k] < Arr[j-1].first)
                            {
                                Ex = k;
                            }
                        }
                        AnsFlag = true;
                        a[3] = Ex-1;
                       // int a[10] = {0, Ox-1, Tx-1, Ex-1, Rx-1, Fx-1};
                        printf("%d %d %d %d %d\n", a[s[0]-'0'], a[s[1]-'0'], a[s[2]-'0'], a[s[3]-'0'], a[s[4]-'0']);

                    }
                }
                if(AnsFlag) break;
            }
            if(AnsFlag)  break;
        }
        if(AnsFlag == false)  puts("-1");
    }
    return 0;
}
