#include<bits/stdc++.h>
using namespace std;
#define N 300000
int arr[N],tree[N],n,total[N];
void update(int i,int k){
	while(i<=n){
		tree[i]+=k;
		i += (i & -i);
	}
}
int read(int i){
	int sum=0;
	while(i>0){
		sum+=tree[i];
		i -= (i & -i);
	}
	return sum;
}
int BS(int pos){
	if(pos<1)
		return 1;
	int ll=1,rr=n;
	while(ll<=rr){
		int mid=(ll+rr)/2;
		int k=read(mid);
		//cout<<k<<" "<<mid<<"-";
		if(k==pos && total[mid]==1){
			total[mid]=0;
			return mid;
		}
		if(k<pos)
			ll=mid+1;
		else
			rr=mid-1;	
	}
	return 1;
}
int main(){
	int t;
	scanf("%d",&t);
	while(t--){
		scanf("%d",&n);
		memset(tree,0,sizeof(tree));
		for(int i=1;i<=n;i++){
			total[i]=1;
			scanf("%d",&arr[i]);
			update(i,1);
		}
		//memset(total,1,sizeof total);
		//for(int i=1;i<=n;i++)
		//cout<<total[i]<<" ";
		int k=0;
		for(int i=n;i>=1;i--){
			arr[i]=BS(n-arr[i]-k);
			update(arr[i],-1);
			k++;
		//	cout<<arr[i]<<" ";
		}	
		for(int i=1;i<=n;i++)
		printf("%d ",arr[i]);
		printf("\n");
	}
} 
/*int read(int pos){
	int i=1,flag,k;
	while(true){
		flag=0;
		while(tree[i]<=pos && i<=n)
		{
			
			if(tree[i]==pos && total[i]==1){
				total[i]=0;return i;
			}
			else
				if(tree[i]==pos && total[i]==0){
					flag=1;break;	
				}
			k=i;	
			i += (i & -i);
		}
		i=k;
		if(!flag)
		pos-=tree[i];
		i += 1;
		
	}
	
}*/