#include<iostream>
#include<cstdio>
#include<algorithm>
#include<map>
#include<set>
#include<vector>
#include<cstring>
#include<queue>
#include<stack>
#include<list>
#include<cstdlib>
#include<cmath>
#include<string>
#include<climits>
using namespace std;
#define ll long long
const ll mx=100001;
const ll mod=1000000007;
int ar[1000001];
int tree[1000001];
void build(int node,int l,int r)
{
	tree[node]=r-l+1;
	if(l==r) return;
	build(node<<1,l,(l+r)>>1);
	build((node<<1)+1,((l+r)>>1)+1,r);
}
int query(int node,int l,int r,int q)
{
	tree[node]--;
	if(l==r)
		return l;
	int q1=tree[(node<<1)+1];
	if(q1>=q)
		return query((node<<1)+1,((l+r)>>1)+1,r,q);
	else
		return query(node<<1,l,(l+r)>>1,q-q1);
}
int main()
{
	int test,n,i;
	scanf("%d",&test);
	while(test--)
	{
		scanf("%d",&n);
		for(i=0;i<n;i++)	
		scanf("%d",&ar[i]);
		build(1,0,n-1);
		for(i=n-1;i>=0;i--)
			ar[i]=query(1,0,n-1,ar[i]+1)+1;
		for(i=0;i<n;i++)
			printf("%d ",ar[i]);
		printf("\n");
	}
	return 0;
} 
