#include<bits/stdc++.h>
#define ll long long
#define S(n) scanf("%d",&(n))
#define P(n) printf("%d",(n))
#define SL(n) scanf("%lld",&(n))
#define PL(n) printf("%lld",(n))
#define NL printf("\n")
#define SP printf(" ")
#define REP(a,b,c) for(int i=(a);i<=(b);i+=(c))
#define Debug cout<<"Hello"
#define N 200005
#define M 1000000007
using namespace std;
int tree[3*N];
void build(int idx, int a, int b)
{
	if(b<a)return;
	if(a==b)
	{
		tree[idx] = 1;return;
	}
	build(2*idx, a, (a+b)/2);
	build(2*idx+1, (a+b)/2+1, b);
	tree[idx] = tree[2*idx] + tree[2*idx+1];
}
int query(int idx, int a, int b, int x)
{
	if(b<a)return -1;
	
	if(b==a)
	{
		return a;
	}
	
	int tmpl = tree[2*idx], tmpr = tree[2*idx+1];
	if(tmpl < x)
	{
		return query(2*idx+1, (a+b)/2+1, b, x - tmpl);
	}
	else
	{
		return query(2*idx, a, (a+b)/2, x);
	}
	
}
void update(int idx, int a, int b, int x)
{
	if(x<a || x>b || b<a)return ;
	
	if(a==b)
	{
		tree[idx] = 0;return;
	}
	update(2*idx, a, (a+b)/2, x);
	update(2*idx+1, (a+b)/2+1, b, x);
	tree[idx] = tree[2*idx] + tree[2*idx+1];
	
}
int main()
{
	
	//freopen("input.txt","r",stdin);
	
	int t;S(t);
	
	
	while(t--)
	{
		int n;
		S(n);
		int a[n+1];
		for(int i=1;i<=n;i++)
		{
			S(a[i]);
		}
		
		memset(tree, 0, sizeof(tree));
		build(1, 1, n);
		
		for(int i=n;i>=1;i--)
		{
			a[i] = query(1, 1, n, i-a[i]);
			update(1, 1, n, a[i]);
		}
		
		P(a[1]);
		for(int i=2; i<=n ;i++)
		{
			SP;P(a[i]);
		}
		NL;
	}
	
	
	
	
	
	
	
	return 0;
	
}