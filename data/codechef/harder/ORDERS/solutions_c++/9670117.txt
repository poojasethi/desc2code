#include <bits/stdc++.h>
using namespace std;
void build(int idx,int ss,int se,vector<int>& tree)
{
	if(ss==se)
	{
		tree[idx]=1;
		return;
	}
	int mid=ss+((se-ss)/2);
	build(idx*2,ss,mid,tree);
	build(idx*2+1,mid+1,se,tree);
	tree[idx]=tree[idx*2]+tree[idx*2+1];
}
int s_pos(int idx,int ss,int se,int pos,vector<int>& tree)
{
	if(ss==se)
	{
		tree[idx]=0;
		return ss;
	}
	tree[idx]=tree[idx]-1;
	int val=tree[idx*2];
	int mid=ss+((se-ss)/2);
	if(val>=pos)
	{
		return s_pos(idx*2,ss,mid,pos,tree);
	}
	else
		return s_pos(idx*2+1,mid+1,se,pos-val,tree);
}
int main() {
	int i,n,t;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		vector<int> v(n),tree(4*n),ans(n);
		build(1,0,n-1,tree);
		for(i=0;i<n;i++)
			scanf("%d",&(v[i]));
		for(i=n-1;i>=0;i--)
		{
			ans[i]=s_pos(1,0,n-1,i+1-v[i],tree)+1;
		}
		for(i=0;i<n;i++)
		{
			printf("%d ",ans[i]);
		}
		printf("\n");
	}
	return 0;
}