#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#define foru(i,a,b) for(int i=a;i<=b;i++)
#define ford(i,a,b) for(int i=a;i>=b;i--)
using namespace std;
const int maxn=2e5+100;
const int oo=1e9;
int a[maxn];
int it[maxn*4],vec[maxn*4];
int p[maxn];
void buildtree(int l, int r ,int k) {
    vec[k]=0;
    if (l==r) {
        it[k]=a[l];
        return;
    }
    int mid=(l+r)/2;
    buildtree(l,mid,k*2);
    buildtree(mid+1,r,k*2+1);
    it[k]=min(it[k*2],it[k*2+1]);
}
int get(int sum, int l, int r, int k) {
    sum+=vec[k];
    if (l==r) return l;
    int mid=(l+r)/2;
    if (it[k*2]+sum+vec[k*2]!=it[1]+vec[1]) return get(sum,mid+1,r,k*2+1);
    return get(sum,l,mid,k*2);
}
void update(int x, int l, int r, int k) {
    if (l>x) return;
    if (r<=x) {
        vec[k]--;
        return;
    }
    int mid=(l+r)/2;
    update(x,l,mid,k*2);
    update(x,mid+1,r,k*2+1);
    it[k]=min(it[k*2]+vec[k*2],it[k*2+1]+vec[k*2+1]);
}
void del(int x, int l, int r, int k) {
    if (r<x||l>x) return;
    if (l==r) {
        it[k]=oo;
        return;
    }
    int mid=(l+r)/2;
    del(x,l,mid,k*2);
    del(x,mid+1,r,k*2+1);
    it[k]=min(it[k*2]+vec[k*2],it[k*2+1]+vec[k*2+1]);
}
int main() {
//    freopen("test.inp","r",stdin);
    int T;
    cin >> T;
    while (T--) {
        int n;
        cin >> n;
        foru(i,1,n) cin >> a[i];
        reverse(a+1,a+n+1);
        buildtree(1,n,1);
        ford(i,n,1) {
            int x=get(0,1,n,1);
            del(x,1,n,1);
            if (x>1) update(x-1,1,n,1);
            p[x]=i;
        }
        reverse(p+1,p+n+1);
        foru(i,1,n) cout << p[i] << ' ';
        cout << endl;
    }
}
