#include<bits/stdc++.h>
#define vi vector<int>
#define pb push_back
#define fill(arr,v) memset( arr , v , sizeof(arr) )
#define fori(i,s,n) for(i=s ; i < n ; i++)
#define ll long long int
#define mod 1000000009
#define sc(n) cin >> n
#define pr(n) cout << n
#define gcd   __gcd
using namespace std;
int arr[200003] , ans[200003] , tree[4*(200003) ];
void build( int node , int l , int r )
{
  if( l == r )
  {
    tree[ node ] = 1;
    return ;
  }
  int mid = ( l + r ) / 2;
  build( 2*node , l , mid );
  build( 2*node + 1 , mid + 1 , r );
  tree[ node ] = r - l + 1 ;
}

int query( int node , int pos , int l , int r )
{
  if( l == r )
  {
    tree[ node ]--;
    return l;
  }
  --tree[ node ];
  int mid = (l + r )/ 2;
  if( pos <= tree[ 2*node ] )
    return query( 2*node , pos , l , mid );
  return query( 2*node + 1, pos - tree[ 2*node ] , mid + 1 , r );
} 

int main()
{
  int n ;
  int t;
  cin >> t;
  while(t--)
  {
    cin >> n;
    build( 1 , 1 , n );
    for( int i = 0 ; i < n ; ++i )
      cin >> arr[i];
    for( int i = n-1 ; i >=0 ; --i )
    {
      ans[i] = query(1 , i - arr[i]+1 , 1 , n );
    }
    for( int i = 0 ; i < n ; ++i )
      printf("%d " , ans[i] );
    puts("");
  }
  return 0;
}
