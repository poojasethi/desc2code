#include<bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
#define pb push_back
#define mp make_pair
#define author rajat1603
#define mod 1000000007
#define N 200001
#define ppi pair< int ,pair<int,int> > 
int arr[N];
int segtree[N<<2];
int ans[N];
int main(){
	int t=scan();
	while(t--){
	    int n=scan();
	    for(int i=1;i<=n;i++){
	        arr[i]=scan();
	    }
	    queue< ppi > q;
        q.push(mp(1,mp(1,n)));
        while(!q.empty()){
            ppi temp = q.front();
            q.pop();
            int node=temp.first;
            int l=temp.second.first;
            int r=temp.second.second;
            segtree[node]=r-l+1;
            if(l==r)continue;
            int lc = node<<1;
            int rc= lc|1;
            int mid = (l+r)>>1;
            q.push(mp(lc,mp(l,mid)));
            q.push(mp(rc,mp(mid+1,r)));
        }
	    for(int i=n;i>=1;i--){
	        int node = 1;
            int l = 1;
            int r = n;
            int val = i-arr[i];
            while(l!=r){
               segtree[node]--;
                int lc = node<<1;
                int rc = lc|1;
                int mid = (l+r)>>1;
                if(segtree[lc]>=val){
                    r=mid;
                    node = lc;
                }
                else{
                    l=mid+1;
                    val-=segtree[lc];
                    node = rc;
                }
            }
            segtree[node]--;
	        ans[i]=l;
	    }
	    for(int i=1;i<=n;i++){
	        printf("%d ",ans[i]);
	    }
	    putchar_unlocked('\n');
	}
}
