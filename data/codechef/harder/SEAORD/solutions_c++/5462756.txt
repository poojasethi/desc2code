#include<bits/stdc++.h>
using namespace std;
int pos[10002],pos1[10002],tme[10002],tme1[10002],order[10002],order1[10002],a[10002],b[10002];
pair<int,int> o1[100002],o2[100002];
int main(){
	int t;
	scanf("%d",&t);
	while(t--){
		int n,i,j,t1=0,t2=0;
		scanf("%d",&n);
		for(i=1;i<=n;i++){
			scanf("%d %d",&a[i],&b[i]);
			t1+=a[i];
			t2+=b[i];
			o1[i]=make_pair(0,0);
			o2[i]=make_pair(0,0);
		}
		if(n==1){
			printf("%d\n",t1+t2);
			printf("0 %d\n",a[1]);
			continue;
		}
		a[0]=0,b[0]=0;
		int l=0,r=0;
		deque<int> ans;
		for(i=1;i<=n;i++){
			if(a[i]>=b[i]){
				if(a[i]>=b[r]){
					ans.push_back(r);
					r=i;
				}
				else
					ans.push_back(i);
			}
			else{
				if(b[i]>=a[l]){
					ans.push_front(l);
					l=i;
				}
				else
					ans.push_front(i);
			}
		}
		int c=0,c1=0;
		if(t1-t2<a[l]-b[r]){
			if(l!=0){
				order1[c1++]=l;
				order[n-1]=l;
			}
			while(!ans.empty()){
				int t=ans.front();
	        	ans.pop_front();
				if(t!=0){
					order[c++]=t;
					order1[c1++]=t;
				}
			}
			if(r!=0){
				order[c++]=r;
				order1[c1++]=r;
			}
		}
		else{
			if(r!=0){
				order1[c1++]=r;
				order[n-1]=r;
			}
			if(l!=0){
				order[c++]=l;
				order1[c1++]=l;
			}
			while(!ans.empty()){
				int t=ans.front();
				ans.pop_front();
				if(t!=0)
				{
					order[c++]=t;
					order1[c1++]=t;
				}
			}
		}
		int s=0,s1=0;
		c=1;c1=0;
		int x=order[0];
		pos[x]=0;tme[x]=0;
		s+=a[x];
		o1[x]=make_pair(0,a[x]);
		while(c<n || c1<n){
			if(c1<n){
				x=order1[c1];
				if(s1>=o1[x].first && s1<o1[x].second) 
					s1=o1[x].second;
				if(s1+b[x]>o1[x].first && s1+b[x]<=o1[x].second)
					s1=o1[x].second;
				pos1[x]=c1;
				tme1[c1]=s1;
				o2[x]=make_pair(s1,s1+b[x]);
				s1+=b[x];
				c1++;
			}
			if(c<n){
				x=order[c];
				if(s>=o2[x].first && s<o2[x].second) 
					s=o2[x].second;
				if(s+a[x]>o2[x].first && s+a[x]<=o2[x].second)
					s=o2[x].second;
				pos[x]=c;
				tme[c]=s;
				o1[x]=make_pair(s,s+a[x]);
				s+=a[x];
				c++;
			}
		}
		printf("%d\n",max(s,s1));
		for(i=1;i<=n;i++)
			printf("%d %d\n",tme[pos[i]],tme1[pos1[i]]);
	}
	return 0;
} 