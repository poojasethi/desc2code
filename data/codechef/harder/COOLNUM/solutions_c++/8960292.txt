#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#include <ctime>
using namespace std;
typedef unsigned int u32;
const int Maxn=1005,Maxl=Maxn/6+3,L=1000000,MaxN=33000;
int T,pr[20],pi[20],pn,Ln=0;
int ci[20];
char st[Maxn];

struct Bignum{
	int v[Maxl],len;
	void operator *=(int k) {
		for (int i=1;i<=len;i++)
			v[i]*=k;
		for (int i=1;i<=len;i++)
			v[i+1]+=v[i]/L,
			v[i]%=L;
		while (v[len+1]!=0) {
			++len;
			v[len+1]+=v[len]/L;
			v[len]%=L;
		}
	}
	bool operator <(const Bignum &rhs)const{
		if (len!=rhs.len) return len<rhs.len;
		for (int i=len;i>=1;i--)
			if (v[i]!=rhs.v[i]) return v[i]<rhs.v[i];
		return false;
	}
	void ip(char *st) {
		memset(v,0,sizeof v);
		len=strlen(st+1);
		for (int i=1;i<=len;i++)
			v[(len-i)/6+1]=v[(len-i)/6+1]*10+st[i]-48;
		len=(len-1)/6+1;
	}
	void op()const{
		printf("%d",v[len]);
		for (int i=len-1;i>=1;i--)
			printf("%06d",v[i]);
	}
}one,cur[20],Lis[MaxN],n;

bool check(const Bignum &cur,int need) {
	u32 s1=0,s2=0,s3=0;
	int sum=0;
	for (int i=1;i<=cur.len;i++) {
		for (int tmp=cur.v[i],d;tmp;tmp/=10) {
			d=tmp%10;
			sum+=d;
			s3|=s2<<d;
			s2|=s1<<d;
			s1|=1<<d;
		}
	}
	s3|=s2|s1;
	if (need>sum||(sum-need>27)||((s3>>(sum-need)&1)==0)) return false;
	for (int i=1;i<=pn;i++)
		if (pi[i]*(sum-need)<ci[i]) return false;
	return true;
}

void dfs(int id,int sum) {
	if (id>pn) {
		if (check(cur[id-1],sum))
			Lis[++Ln]=cur[id-1];
		return;
	}
	cur[id]=cur[id-1];
	for (int i=0;i<=27*pi[id];i++) {
		ci[id]=i;
		dfs(id+1,sum);
		if (i!=27*pi[id]) cur[id]*=pr[id];
		if (cur[id].len>=13) return;
	}
}

void init() {
	one.len=1;
	one.v[1]=1;
	cur[0]=one;
	for (int sum=1;sum<=325;sum++) {
		int tmp=sum;
		pn=0;
		for (int i=2;i<=sum;i++)
			if (tmp%i==0) {
				pr[++pn]=i;
				pi[pn]=0;
				while (tmp%i==0) tmp/=i,++pi[pn];
			}
		dfs(1,sum);
	}
	sort(Lis+1,Lis+Ln+1);
	Lis[0].len=1;
}

Bignum Lc(const Bignum &n) {
	static char ret[Maxn];
	static Bignum res;
	memcpy(ret,st,sizeof ret);
	int len=strlen(ret+1),cnt=0;
	for (int i=1;i<=len;i++)
		if (ret[i]!='0') {
			if (cnt<3) ++cnt;
			else ret[i]='0';
		}
	res.ip(ret);
	return res;
}

Bignum Rc(const Bignum &n) {
	static char ret[Maxn];
	static Bignum res;
	memcpy(ret,st,sizeof ret);
	int len=strlen(ret+1),cnt=0,last=0;
	for (int i=1;i<=len;i++)
		if (ret[i]!='0'&&cnt<3) ++cnt,last=i;
	if (cnt<3) last=len;
	int p=last;
	while (ret[p]=='9') p--;
	if (p==0) ret[p]='1';
	else ret[p]++;
	for (int i=p+1;i<=len;i++) ret[i]='0';
	if (p==0) res.ip(ret-1);
	else res.ip(ret);
	return res;
}

int main() {
	init();
	scanf("%d",&T);
	while (T--) {
		scanf(" %s",st+1);
		n.ip(st);
		int li=upper_bound(Lis+1,Lis+Ln+1,n)-Lis-1;
		max(Lis[li],Lc(n)).op();
		putchar(' ');
		if (li!=Ln) min(Lis[li+1],Rc(n)).op();
		else Rc(n).op();
		putchar('\n');
	}
	return 0;
}