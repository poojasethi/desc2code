#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<ctime>
#include<cctype>
#include<cassert>
#include<climits>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<clocale>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<cwchar>
#include<cwctype>

//containers
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<complex>
#include<string>
#include<stack>
#include<bitset>
#include<istream>
#include<valarray>

//IOs
#include<iostream>
#include<sstream>
#include<iomanip>
#include<fstream>
#include<exception>
#include<ios>
#include<iosfwd>
#include<ostream>
#include<iterator>
#include<stdexcept>
#include<streambuf>


//algorithm & miscellaneous
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<limits>
#include<locale>
#include<memory>
#include<new>

#define ll long long
#define ull unsigned long long
#define ld long double
#define mp make_pair
#define pb push_back
#define inf (ll)1e18
#define iinf (int)1e9
#define triple(a,b,c) make_pair(a,make_pair(b,c))
#define two(a,b) make_pair(a,b)
#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define psi pair<string,int>
#define pis pair<int,string>
#define pss pair<string,string>
//#define vi vector<int>
#define vl vector<long long>
#define vs vector<string>
#define vc vector<char> 
#define vpii vector<pii>
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})
#define clear(c,v) memset(c,v,sizeof(c)) 


int dx[] = {-1,0,0,1,-1,-1,1,1};
int dy[] = {0,-1,1,0,-1,1,-1,1};
const double eps = 1e-9;

using namespace std;

const int mw = 501, mwl = 5001, mwp = 50001, mc = 66;

int actrie[mwl*mw][mc], nm[mwl*mw][mc], fail[mwl*mw], tail[mwl*mw], cnt[mwl*mw], indeg[mwl*mw], pos = 1, wd = 0;

vector<int> outp[mwl*mw];

char s[mwl], t[mwp];


inline int id(char c) {
    if (c >= 'a' && c <= 'z') return c - 'a';
    else if (c >= 'A' && c <= 'Z') return c - 'A' + 26;
    else if (c >= '0' && c <= '9') return c - '0' + 52;
    else return 62;
}


void search(char *s)
{
                 int tlen = strlen(s), state = 0;
                 
                 for(int i=0;i<tlen;i++)
                 {
                         //while(actrie[state][s[i]] == -1)
                                                   //state = fail[state];
                         //state = actrie[state][s[i]];
                 
                         state = nm[state][id(s[i])];
                         
                         if(outp[state].size())
                         {
                                             //printf("match %d\n",i);
                                             for(int j=0;j<(int)outp[state].size();j++)
                                             {
                                                     cnt[outp[state][j]] += 1;
                                               //      printf("%d ",outp[state][j]);                        
                                             }
                                             //printf("\n");
                         }
                 }    
                 
                 return ;
}

int insert(char *s)
{
                int wlen = strlen(s), cur = 0;    
                
                for(int i=0;i<wlen;i++)
                {
                        if(actrie[cur][id(s[i])] == -1)
                        {
                                             actrie[cur][id(s[i])] = pos;
                                             for(int j=0;j<mc;j++)
                                                     actrie[pos][j] =  -1;                     
                                             pos++;
                        }       
                        
                        cur = actrie[cur][id(s[i])];
                }
                
                outp[cur].pb(wd++);
                
                return cur;
}

void maketransitions()
{
                queue<int> q;
                
                fail[0] = 0;
                
                for(int i=0;i<mc;i++)
                {
                        if(actrie[0][i] != -1)
                        {
                                        q.push(actrie[0][i]);
                                        fail[actrie[0][i]] = 0;                
                        }     
                        else actrie[0][i] = 0;
                }       
                
                while(!q.empty())
                {
                                 int cur = q.front();q.pop();
                                 
                                 for(int i=0;i<mc;i++)
                                         if(actrie[cur][i] > 0)
                                         {

                                                              q.push(actrie[cur][i]);
                                                              
                                                              int tmp = fail[cur];
                                                              
                                                              while(actrie[tmp][i] == -1)
                                                                                   tmp = fail[tmp];
                                                              
                                                              fail[actrie[cur][i]] = actrie[tmp][i];
                                                              
                                                              for(int j=0;j<(int)outp[fail[actrie[cur][i]]].size();j++)
                                                                      outp[actrie[cur][i]].push_back(outp[fail[actrie[cur][i]]][j]);                              
                                         }                 
                }
}

void nextmove()
{
             queue<int> q;
             
             for(int i=0;i<mc;i++)
             {
                     nm[0][i] = actrie[0][i];
                     if(actrie[0][i] > 0)
                                     q.push(actrie[0][i]);          
             }
             
             while(!q.empty())
             {
                              int cur =  q.front();q.pop();
                              
                              for(int i=0;i<mc;i++)
                              {
                                      if(actrie[cur][i] != -1)
                                      {
                                                        q.push(actrie[cur][i]);
                                                        nm[cur][i] = actrie[cur][i];
                                      }
                                      else nm[cur][i] = nm[fail[cur]][i];                 
                              }
             }
}
int main()
{
          memset(actrie,-1,sizeof actrie);
          
          int n = GI;
          
          for(int i=0;i<n;i++)
          {
                  scanf("%s",s);
                  tail[i] = insert(s);        
          }
          
          maketransitions();
          
          nextmove();
          
          int m = GI;
          
          for(int i=0;i<m;i++)
          {
                              scanf("%s",t);
                              search(t);
          }
          
          for(int i=0;i<n;i++)
                  printf("%d\n",cnt[i]);
                  
          scanf("\n");
          return 0;    
}
