#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
const int MAXT = 2500005;
const int MAXC = 63;
vector<pair<int, int> > ver;
int adj[MAXT][MAXC], next[MAXT][MAXC], f[MAXT], q[MAXT], sz = 1;
long long cnt[MAXT];
int id[MAXT];
inline int get_val(char c)
{
	if (c == '-')
		return 62;
	if ('a' <= c && c <= 'z')
		return c - 'a';
	if ('A' <= c && c <= 'Z')
		return 26 + c - 'A';
	return 52 + c - '0';
}
inline int insert(string &t)
{
	int v = 0;
	for (int i = 0; i < t.size(); i++)
	{
		if (adj[v][get_val(t[i])] == -1)
			adj[v][get_val(t[i])] = sz++;
		v = adj[v][get_val(t[i])];
	}
	return v;
}
inline void bfs()
{
	int h = 0, t = 0;
	f[0] = 0;
	for (int i = 0; i < MAXC; i++)
		if (adj[0][i] != -1)
		{
			q[t++] = adj[0][i];
			next[0][i] = adj[0][i];
			f[adj[0][i]] = 0;
		}
	while (h < t)
	{
		int v = q[h++];
		for (int i = 0; i < MAXC; i++)
			if (adj[v][i] != -1)
			{
				next[v][i] = adj[v][i];
				f[adj[v][i]] = next[f[v]][i];
				q[t++] = adj[v][i];
			}
			else
				next[v][i] = next[f[v]][i];
	}
}
inline void dfs(int v, int d)
{
	ver.push_back(make_pair(-d, v));
	for (int i = 0; i < MAXC; i++)
		if (adj[v][i] != -1)
			dfs(adj[v][i], d + 1);
}
int main()
{
	memset(adj, -1, sizeof(adj));
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		string t;
		cin >> t;
		id[i] = insert(t);
	}
	bfs();
	int m;
	cin >> m;
	while (m--)
	{
		string t;
		cin >> t;
		int state = 0;
		for (int i = 0; i < t.size(); i++)
		{
			state = next[state][get_val(t[i])];
			cnt[state]++;
		}
	}
	dfs(0, 0);
	sort(ver.begin(), ver.end());
	for (int i = 0; i < ver.size(); i++)
		cnt[f[ver[i].second]] += cnt[ver[i].second];
	for (int i = 0; i < n; i++)
		cout << cnt[id[i]] << "\n";
	return 0;
}
