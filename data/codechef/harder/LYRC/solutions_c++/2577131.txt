#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <bitset>
#define SET(p)	 		memset(p,-1,sizeof(p))
#define CLR(p) 			memset(p,0,sizeof(p))
#define LL 				long long int
#define ULL		 		unsigned long long int
#define S(n)			scanf("%d",&n)
#define Sl(n)			scanf("%lld",&n)
#define Sf(n)			scanf("%lf",&n)
#define Ss(n)			scanf("%s",n)
#define INF				(int)1e9
#define LINF			(long long)1e18
#define EPS				1e-9
#define FOR(i,a,b)		for(int i=a;i<b;i++)
#define REP(i,n)		FOR(i,0,n)
using namespace std;
#define nmax 300
int ans[600];
struct node
{
	vector<int> x;
	int cnt;
	node *fail;
	node* next[nmax];
	node()
	{
		x.clear();
		cnt=0;
		for(int i=0;i<nmax;i++)
			next[i]=NULL;
	}
};
node* head;
node *add(node *curr,char* str,int i,int len,int id)
{
	if(curr==NULL)
	{
		curr=new node();
	}
	if(i==len)
	{
		curr->x.push_back(id);
		return curr;
	}
	curr->next[str[i]]=add(curr->next[str[i]],str,i+1,len,id);
	return curr;
}
void buildmachine()
{
	queue<node*> q;
	head->fail=head;
	for(int i=0;i<nmax;i++)
	{
		if(head->next[i]!=NULL)
		{
			head->next[i]->fail=head;
			q.push(head->next[i]);
		}
	}
	while(!q.empty())
	{
		node *temp = q.front();q.pop();
		for(int i=0;i<nmax;i++)
		{
			if(temp->next[i]!=NULL)
			{
				q.push(temp->next[i]);
				node *state = temp->fail;
				while(1)
				{
					if(state==head)
					{
						if(state->next[i]!=NULL)
							temp->next[i]->fail=state->next[i];
						else
							temp->next[i]->fail=head;
						break;
					}
					if(state->next[i]!=NULL)
					{
						temp->next[i]->fail=state->next[i];
						break;
					}
					state=state->fail;
				}
			}
		}
	}
}
void aho(string s)
{
	node *cur=head;
	for(int i=0;i<s.size();i++)
	{
		while(1)
		{
			if(cur==head)
			{
				if(cur->next[s[i]]!=NULL)
				{
					cur=cur->next[s[i]];
					cur->cnt++;
				}
				break;
			}
			if(cur->next[s[i]]!=NULL)
			{
				cur=cur->next[s[i]];
				cur->cnt++;
				break;
			}
			cur=cur->fail;
		}
	}
	queue<node*> q;
	q.push(head);
	while(!q.empty())
	{
		node *temp = q.front();q.pop();
		for(int i=0;i<nmax;i++)
		{
			if(temp->next[i]!=NULL)
			{
				q.push(temp->next[i]);
				if(temp->next[i]->cnt==0)
					continue;
				node *state= temp->next[i]->fail;
				while(state!=head)
				{
					state->cnt+=temp->next[i]->cnt;
					state=state->fail;
				}
			}
		}
	}
	q.push(head);
	while(!q.empty())
	{
		node *temp=q.front();q.pop();
		for(int i=0;i<nmax;i++)
		{
			if(temp->next[i]!=NULL)
			{
				q.push(temp->next[i]);
				if(temp->next[i]->x.size()!=0)
				{
					for(int j=0;j<temp->next[i]->x.size();j++)
						ans[temp->next[i]->x[j]]=temp->next[i]->cnt;
				}
			}
		}
	}
}
void print(node *curr,char str[],int i)
{
	if(curr==NULL)
		return;
	if(curr->x.size()!=0)
	{
		for(int j=0;j<i;j++)
			printf("%c",str[j]);
		printf("\n");
	}
	for(int j=0;j<nmax;j++)
	{
		str[i]=j;
		print(curr->next[j],str,i+1);
	}
}

int main()
{
	int t,i,j,k,n,m;
	#ifndef ONLINE_JUDGE
	freopen("example.txt","r",stdin);
	#endif
	char str[5009];
	head=new node();
	S(n);
	for(i=0;i<n;i++)
	{
		Ss(str);
		//cout<<str<<endl;
		add(head,str,0,strlen(str),i+1);
	}
	buildmachine();
	string s;
	S(m);
	for(i=0;i<m;i++)
	{
		string st;
		cin>>st;
		s+=st;
		s+=',';
	}
	aho(s);
	for(i=0;i<n;i++)
	{
		printf("%d\n",ans[i+1]);
	}
	return 0;
}
