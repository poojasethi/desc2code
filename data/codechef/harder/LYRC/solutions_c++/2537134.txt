//TC

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define foreach(a,b) for( typeof( (b).begin() ) a=(b).begin(); (a)!=(b).end() ; (a)++ )
#define foreachr(a,b) for( typeof( (b).rbegin() ) a=(b).rbegin(); (a)!=(b).rend() ; (a)++ )
#define dg(x)  cerr <<#x<<':'<<x<<" "
#define dbg(x)  cerr <<#x<<':'<<x<<endl
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define ALL(A) (A).begin(),(A).end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double dbl;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const Lint mod = 1e9;

const int MAXN = 510;
const int MAXS = 5010;
const int MAXM = 110;
const int MAXL = 50010;
const int maxnode=MAXN*MAXS;

int go[maxnode][72];
int F[maxnode];
int in[maxnode];
int Fr[maxnode];

inline int id(char a){

	if(a>='a' && a<='z')	return a-'a';
	if(a>='A' && a<='Z')	return 26+ a-'A';
	if(a>='0' && a<='9')	return 52+a-'0';
	return 62;
	
}

int cnt=0;

int insert(char* str){
	
	int sz=strlen(str);
	
	int cur=0,cid;
	
	forn(i,0,sz-1){
		
		cid=id( str[i] );
		
		//~ printf("-> %d\n",cnt);
		
		if( go[cur][cid]==-1 )
		{
			go[cur][cid]=++cnt;
			forn(j,0,62)
				go[cnt][j]=-1;
		}
		cur=go[cur][cid];
		
		//~ printf("%d\n",cur);
		
	}
	
	//~ puts("");
	
	return cur;
	
}

void build(){
	
	queue<int> Q;
	
	in[0]=1;
	
	forn( i,0,62 )
	{
		if(go[0][i]<=0)
			go[0][i]=0;
		else{
			Q.push(go[0][i]);
			F[go[0][i]]=0;
			in[0]++;
		}
	}
	
	int tmp;
	
	while(!Q.empty()){
		
		tmp=Q.front();
		Q.pop();
		
		forn(i,0,62)
			if(go[tmp][i]>0){
				
				F[ go[tmp][i] ]=go[ F[tmp] ][i];
				
				in[ F[ go[tmp][i] ] ]++;
				
				Q.push( go[tmp][i] );
				
			}
			else
				go[tmp][i]=go[F[tmp]][i];
		
	}
	
}

int L[MAXN];

int main(){
	
	int n;
	char str[MAXL];
	
	scanf(" %d",&n);
	
	forn(i,0,62)
		go[0][i]=-1;
	
	forn(i,1,n){
		
		scanf(" %s",str);
		
		L[i]=insert(str);
		
	}
	
	build();
	
	int m;
	
	scanf("%d",&m);
	
	forn(i,1,m){
		
		scanf("%s",str);
		
		int sz=strlen(str);
		
		int cur=0;
		
		forn(j,0,sz-1){
			
			cur=go[cur][ id(str[j]) ];
			Fr[cur]++;
			
		}
		
	}
	
	queue<int> Q;
	
	forn(i,0,cnt)
		if( !in[i] )
			Q.push(i);
	
	int tmp;
	
	while(!Q.empty()){
		
		tmp=Q.front();
		Q.pop();
		
		if(tmp==0)	break;
		
		Fr[ F[tmp] ]+=Fr[tmp];
		in[ F[tmp] ]--;
		if(in[ F[tmp] ] == 0)
			Q.push( F[tmp] );
		
	}
	
	forn(i,1,n)
		printf("%d\n",Fr[ L[i] ]);
	
	return 0;
	
}
