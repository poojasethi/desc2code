/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <bitset>
#include <iomanip>
#include <utility>

using namespace std;

typedef long long LL;
typedef complex<double> point;
typedef long double ldb;
typedef pair<int,int> pii;

#define SIGMA 63
#define MAXT 5000*500+10
#define MAXL 50000+10

char test[MAXL];
int n,have;
int Q[MAXT];
int next[MAXT][SIGMA],fail[MAXT],out[MAXT],func[MAXT];
vector <int> store[MAXT];

struct AhoCorasick{ 

	AhoCorasick(){
		n = 1;
		fail[1] = 1;
		out [1] = 1;
	}

	inline int code (const char &x){
		if (islower(x)) return x-'a';
		if (isupper(x)) return x-'A'+26;
		if (isdigit(x)) return x-'0'+52;
		return 62;
	}
	
	inline void add (const string &s, int index){
		have++;
		for (int i=0,cur=1; i<(int)s.size(); i++){
			if (next[cur][code(s[i])] == 0)
				next[cur][code(s[i])] = ++n;
			cur = next[cur][code(s[i])];
			if (i == (int)s.size()-1)
				store[cur].push_back(index);
		}
	}

	inline void buildAutomaton(){
		int head = 0, tail = 0;
		for (int i=0; i<SIGMA; i++) if (next[1][i] != 0){
			fail[next[1][i]] = 1;
			out [next[1][i]] = 1;
			Q[tail++] = next[1][i];
		}
		while (head != tail){
			int front = Q[head++];
			for (int i=0; i<SIGMA; i++) if (next[front][i] != 0){
				int temp = fail[front];
				while (temp != 1 && next[temp][i] == 0)
					temp = fail[temp];
				if (next[temp][i] != 0)
					temp = next[temp][i];
				fail[next[front][i]] = temp;
				out [next[front][i]] = temp;
				Q[tail++] = next[front][i];
			}
		}
	}

	inline void run(const string &s){
		int state = 1;
		for (int i=0; i<(int)s.size(); i++){
			while (state != 1 && next[state][code(s[i])] == 0)
				state = fail[state];
			if (next[state][code(s[i])] != 0)
				state = next[state][code(s[i])];
			func[state]++;
		}
	}
};

int main(){
	AhoCorasick pattern;
	int w; scanf("%d", &w);
	for (int i=0; i<w; i++){
		scanf(" %s", test);
		string s(test);
		pattern.add(s, i);
	}
	pattern.buildAutomaton();
	int n; scanf("%d", &n);
	for (int i=0; i<n; i++){
		scanf(" %s", test);
		string s(test);
		pattern.run(s);
	}
	vector <int> ret(w, 0);
	int head = 0, tail = 0;
	Q[tail++] = 1;
	while (head != tail){
		int front = Q[head++];
		for (int i=0; i<SIGMA; i++) if (next[front][i] != 0)
			Q[tail++] = next[front][i];
	}
	for (int i=tail-1; i>0; i--){
		for (int j=0; j<(int)store[Q[i]].size(); j++)
			ret[store[Q[i]][j]]+= func[Q[i]];
		func[out[Q[i]]]+= func[Q[i]];
	}
	for (int i=0; i<w; i++)
		printf("%d\n", ret[i]);
	return 0;
}
