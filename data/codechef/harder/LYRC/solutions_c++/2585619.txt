#include <stdio.h>
#include <string.h>
#include <queue>

using namespace std;

#define maxMots 501
#define maxTextes 101
#define maxLongMot 5001
#define maxLongTexte 50001
#define maxNoeuds maxMots * maxLongMot

int arbre[maxNoeuds][66];
int finMot[maxMots];
int position = 1;
int fail[maxNoeuds];
int compte[maxNoeuds];

char texte[maxLongTexte];
int degRac[maxNoeuds];

int carInd(char car)
{
	if(car>='a' && car<= 'z')
	{
		return car - 'a';
	}
	else if(car>='A' && car<='Z')
	{
		return car - 'A' + 26;
	}
	else if(car>='0' && car<='9')
	{
		return car - '0' + 52;
	}
	else
	{
		return 62;
	}
}

int nouvMot(char* mot)
{
	int noeudCour = 0;
	int longMot = strlen(mot);

	for(int i=0;i<longMot;i++)
	{
		int car = carInd(mot[i]);  //???
		if(arbre[noeudCour][car] == -1)
		{
			arbre[noeudCour][car] = position;
			position++;

			//???
		}
		noeudCour = arbre[noeudCour][car];
	}
	return noeudCour;
}

void initialisation()
{
	fail[0] = 0;
	degRac[0] = 1;
	for(int i=0; i<66; i++)
	{
		if(arbre[0][i] != -1)
		{
			fail[arbre[0][i]] = 0;
			degRac[0]++;
		}
		else
		{
			arbre[0][i] = 0;
		}
	}
}

void faireTransitions()
{
	queue<int> queu;
	initialisation();

	for(int i=0;i<66;i++)
	{
		if(arbre[0][i] > 0)
		{
			queu.push(arbre[0][i]);
		}
	}
	while(!queu.empty())
	{
		int courant = queu.front();
		queu.pop();

		for(int i=0;i<66;i++)
		{
			if(arbre[courant][i] > 0)
			{
				fail[arbre[courant][i]] = arbre[fail[courant]][i];

				degRac[arbre[fail[courant]][i]]++;

				queu.push(arbre[courant][i]);
			}
			else
			{
				arbre[courant][i] = arbre[fail[courant]][i];
			}
		}
	}
}

char P[maxLongMot];
char S[maxLongTexte];

int main()
{
	memset(arbre,-1,sizeof arbre);

	int W;
	scanf("%d",&W);

	//???

	for(int i=0;i<W;i++)
	{
		scanf("%s",P);
		finMot[i] = nouvMot(P);
	}
	faireTransitions();

	int N;
	scanf("%d",&N);
	for(int i=0;i<N;i++)
	{
		scanf("%s",S);

		int longText = strlen(S);
		int courant = 0;
		for(int j=0;j<longText;j++)
		{
			courant = arbre[courant][carInd(S[j])];
			compte[courant]++;
		}
	}
	queue<int> queu;
	for(int i=0;i<position+1;i++)
	{
		if(degRac[i]==0)
		{
			queu.push(i);
		}
	}

	while(!queu.empty())
	{
		int tampon = queu.front();
		queu.pop();

		if(tampon == 0)
		{
			break;
		}

		degRac[fail[tampon]]--;

		compte[fail[tampon]] += compte[tampon];

		if(degRac[fail[tampon]] == 0)
		{
			queu.push(fail[tampon]);
		}
	}

	for(int i=0;i<W;i++)
	{
		printf("%d\n",compte[finMot[i]]);
	}

	//scanf("%d",&W);

	return 0;
}