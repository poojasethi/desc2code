#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<cstring>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<assert.h>
#include<cmath>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define pp pair<int,int>
#define ll long long
#define INF 1000000000
#define P 1000000009
using namespace std;
const int N=2500005;
int vsz;

struct Tri{
    Tri *a[63],*link,*par;
    int cnt,x,h;
}*ST,*word[505],*v[N];



bool check(Tri *A,Tri *B){
    return ((A->h)<(B->h));
}


int index_char(char c){
    if(c=='-')return 52;
    if(c>='0' && c<='9')return 53+c-'0';
    if(c>='a' && c<='z')return c-'a';
    return 26+c-'A';
}
/*
char char_index(int x){
    if(x==52)return '-';
    if(x<26)return 'a'+x;
    if(x>=26 && x<52)return 'A'+x-26;
}*/


Tri *new_tri(Tri *B,int x){
    Tri *A=(Tri *)malloc(sizeof(Tri));
    for(int i=0;i<63;i++)A->a[i]=NULL;
    A->link=NULL;
    A->cnt=0;
    A->par=B;
    A->x=x;
    if(!B)A->h=0;else A->h=B->h+1;

    v[vsz++]=A;
    if(vsz>N)assert(0);
    //cout<<"add to vector "<<A->h<<endl;
    return A;
}

Tri *add(Tri *T,int x);
Tri *find_link(Tri *T);

Tri *find_link(Tri *T){
    //cout<<"find link "<<T->h<<' '<<char_index(T->x)<<endl;
    if(T->link)return T;
    if(T->par==ST)return ST;
    if(!T->par->link)T->par->link=find_link(T->par);
    Tri *E=add(T->par->link,T->x);
    //cout<<"found link "<<T->h<<' '<<char_index(T->x)<<' '<<E->h<<' '<<char_index(E->x)<<endl;

    return E;
}


Tri *add(Tri *T,int x){
    if(T->a[x])return (T->a[x]);
    if(!T->link)T->link=find_link(T);

    if(T->link==ST && !ST->link->a[x])return ST;

    return add(T->link,x);
}




int main()
{//freopen("inp.txt","r",stdin);
 //freopen("A.txt","w",stdout);
 int w;
 scanf("%d",&w);
 ST=new_tri(NULL,-1);
 ST->link=ST;

 for(int i=1;i<=w;i++){
    string s;
    cin>>s;
    Tri *T=ST;
    for(int j=0;j<s.size();j++){
        if(!T->a[index_char(s[j])])T->a[index_char(s[j])]=new_tri(T,index_char(s[j]));
        T=T->a[index_char(s[j])];
    }
    word[i]=T;
 }

 int n;
 scanf("%d",&n);
 for(int i=1;i<=n;i++){
    string s;
    cin>>s;
    Tri *T=ST;
    for(int j=0;j<s.size();j++){
        T=add(T,index_char(s[j]));
        T->cnt++;
    }
 }
 sort(v,v+vsz,check);

 for(int i=vsz-1;i>=0;i--){
    Tri *A=v[i];
    if(!A->link)A->link=find_link(A);
    A->link->cnt+=A->cnt;
 }

 for(int i=1;i<=w;i++){
    printf("%d\n",word[i]->cnt);
 }
 return 0;
}
