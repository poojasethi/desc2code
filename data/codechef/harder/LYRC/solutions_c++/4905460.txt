#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#define gcd(A,B) __gcd(A,B)
#define lcm(A,B) (A/gcd(A,B)*B)
#define clr(A) memset(A,0,sizeof(A))

#define mm 2500005

using namespace std;

typedef long long LL;
typedef pair<int,int> P;
typedef pair<P,int> pp;
const int mod = 1000000007;
const int root = 1;

int q[mm],tq;
int ans[mm];
struct ACMan{
    static const int Maxch = 80;
    static const int Minch = '-'-1;
    static const int ACrt = 0;

    vector<int> wod[mm];
    int up[mm],num[mm],E[mm];
    int T[mm][Maxch];
    int Sz;

    void init(int rt){clr(T[rt]);up[rt] = ACrt;num[rt] = 0;wod[rt].clear();}
    void reset(){Sz = 0;init(ACrt);}
    int newnode(){init(++Sz);return Sz;}

    void insert(char *s,int id){
        int rt = ACrt;
        while(*s){
            int c = (*s++) - Minch;
            if(T[rt][c]==0) T[rt][c] = newnode();
            rt = T[rt][c];
        }
        wod[rt].push_back(id);
//        E[rt] = id;
    }

    void CreateAC(){
        queue<int> que;
        while(!que.empty()) que.pop();
        int sn;
        tq = 0;
        for(int i = 0;i<Maxch;i++)
        if(sn = T[ACrt][i]){
            que.push(sn);up[sn] = ACrt;
            q[tq++] = sn;
        }

        while(!que.empty()){
            int u = que.front(),sn;que.pop();
            for(int i = 0;i<Maxch;i++)
            if(sn = T[u][i]){
                up[sn] = T[up[u]][i];
                que.push(sn);q[tq++] = sn;
            }else T[u][i] = T[up[u]][i];
        }
    }

    void search(char *s){
        int rt = ACrt;
        while(*s){
            int c = (*s++) - Minch;
            rt = T[rt][c];
            num[rt]++;
        }
    }

}ACT;

char word[5500],des[2000005];

int main()
{
 //   freopen("king.in","r",stdin);
    int T = 1;

    while(T--)
    {
        int n;
        scanf("%d",&n);
        ACT.reset();
        for(int i = 1;i<=n;i++)
        {
            scanf("%s",word);
            ACT.insert(word,i);
        }
        ACT.CreateAC();
        int M;
        scanf("%d",&M);
        for(int i = 0;i<M;i++){
            scanf("%s",des);
            ACT.search(des);
        }
        clr(ans);
        for(int i = tq-1;i>=0;i--){
            int u = q[i];
            for(int j = 0;j<(int)ACT.wod[u].size();j++)
            ans[ACT.wod[u][j]] += ACT.num[u];
            ACT.num[ACT.up[u]] += ACT.num[u];
        }

        for(int i = 1;i<=n;i++)
        cout<<ans[i]<<endl;
    }
    return 0;
}
