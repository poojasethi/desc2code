#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<ctime>
#include<cctype>
#include<cassert>
#include<climits>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<clocale>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<cwchar>
#include<cwctype>

//containers
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<complex>
#include<string>
#include<stack>
#include<bitset>
#include<istream>
#include<valarray>

//IOs
#include<iostream>
#include<sstream>
#include<iomanip>
#include<fstream>
#include<exception>
#include<ios>
#include<iosfwd>
#include<ostream>
#include<iterator>
#include<stdexcept>
#include<streambuf>


//algorithm & miscellaneous
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<limits>
#include<locale>
#include<memory>
#include<new>

#define ll long long
#define ull unsigned long long
#define ld long double
#define mp make_pair
#define pb push_back
#define inf (ll)1e18
#define iinf (int)1e9
#define triple(a,b,c) make_pair(a,make_pair(b,c))
#define two(a,b) make_pair(a,b)
#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define psi pair<string,int>
#define pis pair<int,string>
#define pss pair<string,string>
#define vi vector<int>
#define vl vector<long long>
#define vs vector<string>
#define vc vector<char>
#define vpii vector<pii>
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})
#define clear(c,v) memset(c,v,sizeof(c))


int dx[] = {-1,0,0,1,-1,-1,1,1};
int dy[] = {0,-1,1,0,-1,1,-1,1};
const double eps = 1e-9;

using namespace std;

const int mw = 501, ms = 101, mlw = 5001, mls = 50001, mc = 66;

int actrie[mw*mlw][mc], fail[mw*mlw], tail[mw], cnt[mw*mlw], indeg[mw*mlw], pos = 1;
//vector<int> outp[mn];
char s[mlw],text[mls];

inline int Id(char c) {
    if (c >= 'a' && c <= 'z') return c - 'a';
    else if (c >= 'A' && c <= 'Z') return c - 'A' + 26;
    else if (c >= '0' && c <= '9') return c - '0' + 52;
    else return 62;
}


int insert(char *s)
{
          int len = strlen(s);
          int acp = 0;

          for(int i=0;i<len;i++)
          {
                    if(actrie[acp][Id(s[i])] == -1)
                    {
                            int val = Id(s[i]);
                            actrie[acp][val] = pos;
                            for(int j=0;j<mc;j++)
                                    actrie[pos][j] = -1;
                            pos++;
                    }
                    acp = actrie[acp][Id(s[i])];
          }

          return acp;
}

void init()
{
        fail[0] = 0;
        indeg[0] = 1;
        for(int i=0;i<mc;i++)
        {
                if(actrie[0][i] != -1)
                {
                        fail[actrie[0][i]] = 0;
                        indeg[actrie[0][i]]++;
                }
                else actrie[0][i] = 0;
        }
}

void maketransitions()
{
        queue<int> q;

        init();

        for(int i=0;i<mc;i++)
                if(actrie[0][i] > 0)
                    q.push(actrie[0][i]);

        while(!q.empty())
        {
                    int cur = q.front();q.pop();

                    for(int i=0;i<mc;i++)
                    {
                            if(actrie[cur][i] > 0)
                            {
                                    fail[actrie[cur][i]] = actrie[fail[cur]][i];
                                    indeg[actrie[fail[cur]][i]]++;
                                    q.push(actrie[cur][i]);
                            }
                            else
                                actrie[cur][i] = actrie[fail[cur]][i];

                    }
        }

}

int main()
{
            memset(actrie,-1,sizeof actrie);

            for(int i=0;i<mc;i++)
                    actrie[0][i] = -1;

            int n = GI;

            for(int i=0;i<n;i++)
            {
                    scanf("%s",s);
                    tail[i] = insert(s);
            }

            maketransitions();

            int m = GI;

            for(int i=0;i<m;i++)
            {
                    scanf("%s",text);

                    int tlen = strlen(text), cur = 0;

                    for(int j=0;j<tlen;j++)
                    {
                            cur = actrie[cur][Id(text[j])];
                            cnt[cur]++;
                    }
            }

            queue<int> q;

            for(int i=0;i<pos;i++)
                    if(indeg[i] == 0)
                        q.push(i);

            while(!q.empty())
            {
                    int cur = q.front();q.pop();
                    if(cur == 0)break;

                    indeg[fail[cur]]--;
                    cnt[fail[cur]] += cnt[cur];

                    if(indeg[fail[cur]] == 0)
                            q.push(fail[cur]);
            }


            for(int i=0;i<n;i++)
                    printf("%d\n",cnt[tail[i]]);

            return 0;
}

