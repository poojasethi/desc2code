#include <bits/stdc++.h>

using namespace std;

#define NN 2500005

///////////////////////

int idx(char c) {
  if ('a' <= c && c <= 'z') return c - 'a';
  if ('A' <= c && c <= 'Z') return c - 'A' + 26;
  if ('0' <= c && c <= '9') return c - '0' + 52;
  return 62;
}

int sz, ch[NN][63];
int ps[NN], fail[NN];

int newnode() {
  fail[sz] = 0;
  memset(ch[sz], 0, sizeof ch[sz]);
  return sz ++;
}

void init() {
  sz = 0;
  newnode();
}

void insert(char *s, int id) {
  int p = 0;
  for (int i = 0; s[i]; i ++) {
    int id = idx(s[i]);
    if (!ch[p][id]) {
      ch[p][id] = newnode();
    }
    p = ch[p][id];
  }
  ps[id] = p;
}

int q[NN];

void build() {
  int h = 0, t = 0;
  for (int i = 0; i < 63; i ++) {
    if (ch[0][i]) q[t ++] = ch[0][i];
  }
  while (h < t) {
    int p = q[h ++];
    for (int i = 0; i < 63; i ++) {
      if (ch[p][i]) {
        int np = ch[p][i];
        q[t ++] = np;
        fail[np] = ch[fail[p]][i];
      } else ch[p][i] = ch[fail[p]][i];
    }
  }
}

int cnt[NN];

void find(char *s) {
  int p = 0;
  for (int i = 0; s[i]; i ++) {
    p = ch[p][idx(s[i])];
    cnt[p] ++;
  }
}

#define N 50005

char s[N];

main() {
  init();
  int n, m;
  scanf("%d", &n);
  for (int i = 0; i < n; i ++) {
    scanf("%s", s);
    insert(s, i);
  }
  build();
  for (scanf("%d", &m); m --; ) {
    scanf("%s", s);
    find(s);
  }
  for (int i = sz - 1; i >= 0; i --) {
    cnt[fail[q[i]]] += cnt[q[i]];
  }
  for (int i = 0; i < n; i ++) printf("%d\n", cnt[ps[i]]);
}
