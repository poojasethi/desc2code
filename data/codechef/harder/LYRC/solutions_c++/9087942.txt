#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>

const int N = 5e4 + 10;
const int T = 2500000 + 10;
const int Z = 26 + 26 + 10 + 1;
int n, m, id[N];
int sz, root, trans[T][Z], sum[T], fail[T];
int qN, que[T];
char s[N];

void init() {
  root = ++sz;
  for (int i = 0; i < Z; ++i)
    trans[0][i] = root;
}

inline int getid(const char &x) {
  if (x >= 'a' && x <= 'z') {
    return x - 'a';
  } else if (x >= 'A' && x <= 'Z') {
    return 26 + x - 'A';
  } else if (x >= '0' && x <= '9') {
    return 52 + x - '0';
  } else {
    return 62;
  }
}

void buildFail() {
  int u, v, w;
  que[qN = 1] = root;
  for (int ql = 1; ql <= qN; ++ql) {
    u = que[ql];
    for (int e = 0; e < Z; ++e) {
      v = fail[u];
      while (v && !trans[v][e])
        v = fail[v];
      v = trans[v][e];
      
      w = trans[u][e];
      if (w) fail[que[++qN] = w] = v;
      else trans[u][e] = v;
    }
  }
}

void solve() {
  for (int i = qN; i >= 2; --i) {
    int u = que[i], v = fail[u];
    sum[v] += sum[u];
  }
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("a.in", "r", stdin);
  freopen("a.out", "w", stdout);
#endif
  
  init();
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) {
    scanf("%s", s);
    int len = strlen(s);
    int now = root, go;
    for (int j = 0; j < len; ++j) {
      go = getid(s[j]);
      if (!trans[now][go])
        trans[now][go] = ++sz;
      now = trans[now][go];
    }
    id[i] = now;
  }
  buildFail();
  
  scanf("%d", &m);
  for (int i = 1; i <= m; ++i) {
    scanf("%s", s);
    int len = strlen(s);
    int now = root, go;
    for (int j = 0; j < len; ++j) {
      go = getid(s[j]);
      now = trans[now][go];
      ++sum[now];
    }
  }
  
  solve();
  for (int i = 1; i <= n; ++i)
    printf("%d\n", sum[id[i]]);
  return 0;
}