#include <iostream>
#include <memory.h>
#include <vector>
#include <queue>

using namespace std;

const int MAXN = 510;
const int MAXNLEN = 5010;
const int MAXSUM = MAXN * MAXNLEN;
const int ALPHA = 63;

vector<int> v;
int edg[MAXSUM][ALPHA];
int nex[MAXSUM][ALPHA];
int f[MAXSUM];
int cnt[MAXSUM];
queue<int> q;
int a[MAXN];
int vcnt = 1;

int get_val(char x)
{
	if (x >= 'A' && x <= 'Z')
		return x - 'A';
	else if (x >= 'a' && x <= 'z')
		return x - 'a' + 26;
	else if (x >= '0' && x <= '9')
		return x - '0' + 52;
	else
		return x - '-' + 62;
}

int addString(int v, string &s, int ind)
{
	if (ind == s.length())
		return v;
	int x = get_val(s[ind]);
	if (edg[v][x] == 0)
		edg[v][x] = vcnt++;
	return addString(edg[v][x], s, ind + 1);
}

void build()
{
	q.push(0);
	while (!q.empty())
	{	
		int v = q.front();
		q.pop();
		//cerr << v << " " << f[v] << endl;
		for (int i = 0; i < ALPHA; i++)
		{
			int u = edg[v][i];
			if (u == 0)
				nex[v][i] = nex[f[v]][i];
			else
			{
				nex[v][i] = u;
				if (v != 0)
					f[u] = nex[f[v]][i];
				q.push(u);
				//cerr << v << " ---> " << u << endl;
			}
			//cerr << v << " " << i << " " << nex[v][i] << endl;
		}
		::v.push_back(v);
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		string t;
		cin >> t;
		a[i] = addString(0, t, 0);
	}
	build();
	int m;
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		string s;
		cin >> s;
		int cur = 0;
		for (int i = 0; i < s.length(); i++)
		{
			cur = nex[cur][get_val(s[i])];
			cnt[cur]++;
			//cerr << cur << " " <<cnt[cur] << endl;
		}
	}
	for (int i = v.size() - 1; i >= 0; i--)
		cnt[f[v[i]]] += cnt[v[i]];
	for (int i = 0; i < n; i++)
		cout << cnt[a[i]] << "\n";
	
	
}
