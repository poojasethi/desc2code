// -*- C++ -*-
// File: a.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>
#include <iterator>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

const int K = 63;
const int maxn = 5000*500 + 10;

int char2id(char c) {
    if (c >= 'a' && c <= 'z') return c - 'a';
    else if (c >= 'A' && c <= 'Z') return c - 'A' + 26;
    else if (c >= '0' && c <= '9') return c - '0' + 52;
	else return 62;
}

struct vertex {
	int next[K];
	int go[K];
	int p, pch, link;
	int cnt;
	
	vertex() {
		p = pch = link = -1;
		CL(next, -1);
		CL(go, -1);
		cnt = 0;
	}
};

vertex Trie[maxn];
int sz;

int add_string(const string &s) {
	int v = 0;
	rep(i,(int)s.size()) {
		int id = char2id(s[i]);
		if(Trie[v].next[id]==-1) {
			Trie[sz].p = v;
			Trie[sz].pch = id;
			Trie[v].next[id] = sz++;
		}
		v = Trie[v].next[id];
	}
	return v;
}

int get_link(int v) {
	int go(int v, int id);
	if(Trie[v].link == -1) {
		if(v==0 || Trie[v].p == 0)
			Trie[v].link = 0;
		else 
			Trie[v].link = go(get_link(Trie[v].p), Trie[v].pch);
	}
	return Trie[v].link;
}

int go(int v, int id) {
	if(Trie[v].go[id] == -1) {		
		if(Trie[v].next[id] != -1) 
			Trie[v].go[id] = Trie[v].next[id];
		else 
			Trie[v].go[id] = v==0 ? 0 : go(get_link(v), id);
	}
	return Trie[v].go[id];
}

void process(const string &s) {
	int v = 0;
	rep(i,s.size()) {
		int id = char2id(s[i]);
		v = go(v, id);
		Trie[v].cnt ++;
	}	
}

int deg[maxn];

void propagate() {
	rep(i,sz) deg[get_link(i)] ++;
	queue<int> q;
	rep(i,sz) if(deg[i]==0) q.push(i);
	
	while(!q.empty()) {
		int v = q.front();
		q.pop();
		
		deg[get_link(v)]--;
		if(deg[get_link(v)]==0) {
			q.push(get_link(v));
		}
		Trie[get_link(v)].cnt += Trie[v].cnt;
	}
}

/*
bool was[maxn];

int dfs(int v) {
	if(!was[v]) return Trie[v].cnt;
	was[v] = true;
	int cnt = 0;
	rep(id,K) {
		int to = go(v,id);
		cnt += dfs(to);
	}
	Trie[v].cnt = cnt;
	return Trie[v].cnt;
}
*/

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
	
	sz = 1;
	rep(i,maxn) Trie[i] = vertex();
	
	int W;
	cin >> W; 
	
	VI ids(W);
	
	rep(i,W) {
		string s;
		cin >> s;
		ids[i] = add_string(s);
	}
	
	int N;
	cin >> N;
	
	rep(i,N) {
		string s;
		cin >> s;		
		process(s);
	}
	
	CL(deg,0);
	//dfs(0);
	propagate();
	
	rep(i,W) {
		cout << Trie[ids[i]].cnt << endl;
	}

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
