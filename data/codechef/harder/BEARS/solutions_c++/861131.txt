#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <memory.h>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <set>

using namespace std;

#define Forn(i, n) for (int i = 0; i < (n); i++)
#define Fornr(i, n) for (int i = (n) - 1; i > -1; i--)
#define For(i, a, b) for (int i = (a); i < (b); i++)
#define Forr(i, a, b) for (int i = (b) - 1; i >= (a); i--)
#define fill(a, b) memset((a), (b), sizeof((a)))
#define pb push_back
#define inf 2147483647
#define N 1010

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vii;

int n, m, te, x[N], y[N];
vector<vi> g, bg;

int main()
{
#ifdef LocalHost
    freopen("in", "r", stdin);
//    freopen("out", "w", stdout);
#endif
    scanf("%d", &te);
    while (te--)
    {
        scanf("%d%d", &n, &m);
        g.clear(); bg.clear();
        bg.resize(n);
        Forn(i, m)
        {
            scanf("%d%d", &x[i], &y[i]);
            bg[--x[i]].pb(i);
            bg[--y[i]].pb(i);
        }
        g.resize(m);
        ll nn, nm = 0;
        Forn(i, m)
        {
            Forn(j, bg[x[i]].size())
                if (bg[x[i]][j] != i)
                    g[i].pb(bg[x[i]][j]);
            Forn(j, bg[y[i]].size())
                if (bg[y[i]][j] != i)
                    g[i].pb(bg[y[i]][j]);
            nm += g[i].size();
        }
        n = m; m = nm / 2;
        vector<ll> d;
        d.reserve(m);
        nn = 0;
        Forn(i, n)
        {
            nn += g[i].size() * 1ll * (g[i].size() - 1) / 2;
            Forn(j, g[i].size())
                if (g[i][j] > i)
                    d.pb(g[i].size() + g[g[i][j]].size() - 2);
        }
        cout << nn << ' ';
        nm = 0;
        Forn(i, d.size())
            nm += d[i] * (d[i] - 1) / 2;
        cout << nm << endl;
    }
}
