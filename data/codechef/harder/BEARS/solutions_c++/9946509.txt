#include <vector>
#include <string>
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <iostream>
#include <fstream>
#include <sstream>
#include <queue>
#include <deque>
#include <stack>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#define S size()
#define B begin()
#define E end()
#define P push_back
#define fu(i,a,b) for(int i=a;i<b;++i)
#define fd(i,a,b) for(int i=b-1;i>=a;--i)
typedef long long int64;
using namespace std;
 
const int MaxN=1200,MaxM=1200;
 
vector <int> e[MaxN];
bool g[MaxM][MaxM];
int der[MaxM],der2[MaxM*MaxM];
 
void solve()
{
	int n,m;
 
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++) e[i].clear();
	for(int i=0;i<m;i++)
	{
		int u,v;
 
		scanf("%d%d",&u,&v);
		u--;v--;
		e[u].P(i);e[v].P(i);
	}
 
	int sumvecg2=0,last=0;
 
	for(int i=0;i<m;++i) for(int j=0;j<m;++j) g[i][j]=false;
	for(int i=0;i<n;++i) for(int j=0;j<e[i].S;++j)
		for(int k=0;k<j;++k)
		{
			g[e[i][j]][e[i][k]]=g[e[i][k]][e[i][j]]=true;
			sumvecg2++;
		}
	for(int i=0;i<m;++i) der[i]=0;
	for(int i=0;i<sumvecg2;++i) der2[i]=0;
	for(int i=0;i<m;++i) for(int j=0;j<m;++j) der[i]+=g[i][j];
	
	int64 edgeg2=0,edgeg3=0;
 
	for(int i=0;i<m;++i) edgeg2+=(int64)der[i]*(int64)(der[i]-1)/2LL;
	for(int i=0;i<m;++i) for(int j=0;j<i;++j) if(g[i][j])
		der2[last++]=der[i]+der[j]-2;
 
	for(int i=0;i<sumvecg2;++i) edgeg3+=(int64)der2[i]*(int64)(der2[i]-1)/2LL;
	cout<<edgeg2<<' '<<edgeg3<<endl;
}
 
int main()
{
	int test;
 
	for(cin>>test;test;test--) solve();
	return 0;
}
 