//105514SN
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define forn(i, a, b) for(int i=(a);i<int(b);i++)
#define PB push_back
#define MP(X,Y) make_pair(X,Y)
#define SZ(X) ((int)(X.size()))
#define ALL(x)   (x).begin(),(x).end()
#define foreach(it, c)  for(typeof((c).begin()) it = (c).begin();it!=(c).end();++it)
#define F first
#define S second
#define CLEAR(A, V) memset(A, V, sizeof(A))

typedef  long long   ll;
typedef vector<int> VI;
typedef vector<string> VS;
typedef pair<int,int> II;
typedef vector<II> VII;

template<class T> inline int countbit(T n){return (n==0)?0:(1+countbit(n&(n-1)));}
template<class T> inline T gcd(T a, T b){ return b?gcd(b, a%b):a;}
const double EPS = 1e-9;
const double PI = acos(-1.0);

int n, m, nn, mm;
vector<int> G[1001];
ll de[1001];
II ar[1001];


int main(void) {

	int casos;
	scanf("%d", &casos);
	forn(t, 0, casos) {

		memset(de, 0, sizeof(de));
		forn(i, 0, 1001) G[i].clear();

		scanf("%d %d", &n, &m);
		nn = m, mm = 0;
		
		forn(i, 0, m) scanf("%d %d", &ar[i].F, &ar[i].S);
		forn(i, 0, m) forn(j, i+1, m) {
			if(ar[i].F == ar[j].F || ar[i].F == ar[j].S) {
				G[i].PB(j); de[i]++;
				G[j].PB(i); de[j]++;
				mm++;
			}
			else if(ar[i].S == ar[j].F || ar[i].S == ar[j].S) {
				G[i].PB(j); de[i]++;
				G[j].PB(i); de[j]++;
				mm++;
			}
		}

//		cout << nn << " " << mm << endl;
//		forn(i, 0, nn) cout << de[i] << " ";
//		cout << endl;

		ll retn = 0, retm = 0;
		forn(i, 0, nn) retn += de[i]*(de[i]-1) / 2LL;

		forn(i, 0, nn) forn(j, 0, SZ(G[i])) {
			ll d = de[i] + de[G[i][j]] - 2;
			retm += d*(d-1)/2LL;
		}
		
		printf("%lld %lld\n", retn, retm/2LL);
	}

	return 0;
}