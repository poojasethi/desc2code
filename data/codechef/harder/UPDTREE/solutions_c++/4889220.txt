#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

int n;
VI v[111111];
int p[111111];
int d[111111];
int ca[111111][20];
ll sum[111111];
ll total[111111];

void dfs(int at, int from = -1) {
  p[at] = from;
  rep(i, (int)v[at].size()) {
    if (v[at][i] == from) continue;
    d[v[at][i]] = d[at] + 1;
    dfs(v[at][i], at);
  }
}
void dfs2(int at, int from = -1) {
  rep(i, (int)v[at].size()) {
    if (v[at][i] == from) continue;
    dfs2(v[at][i], at);
    sum[at] += sum[v[at][i]];
  }
}

void dfs3(int at, int from = -1, ll t = 0) {
  t += sum[at];
  total[at] = t;
  rep(i, (int)v[at].size()) {
    if (v[at][i] == from) continue;
    dfs3(v[at][i], at, t);
  }
}

int getLCA(int a, int b) {
  if (d[a] < d[b]) swap(a, b);
  for (int i = 19; i >= 0; i--)
    if (d[a] - (1 << i) >= d[b]) a = ca[a][i];
  if (a == b) return a;
  for (int i = 19; i >= 0; i--)
    if (ca[a][i] != ca[b][i]) {
      a = ca[a][i];
      b = ca[b][i];
    }
  a = ca[a][0];
  return a;
}

typedef pair<pii, int> p3;
vector<p3> add;

void go(int a, int b, int c, int dd) {
  int t1 = getLCA(a, c);
  int t2 = (d[b] > d[dd] ? b : dd);
  if (d[t1] > d[t2]) {
    add.pb(p3(pii(t1, t2), -1));
  }
}

void process(int a, int b, int c, int dd) {
  if (a == b) return;
  add.pb(p3(pii(a, b), 1));
  int lca = getLCA(c, dd);
  go(a, b, c, lca);
  go(a, b, dd, lca);
}

ll solve(int a, int b) { return total[a] - total[b]; }

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  int m1, m2;
  cin >> n >> m1 >> m2;
  rep(i, n - 1) {
    int x, y;
    scanf("%d %d", &x, &y);
    x--, y--;
    v[x].pb(y);
    v[y].pb(x);
  }
  dfs(0);

  rep(i, n) ca[i][0] = p[i];
  ca[0][0] = 0;

  FOR(j, 1, 20) rep(i, n) ca[i][j] = ca[ca[i][j - 1]][j - 1];

  int a, b, c, dd;
  rep(i, m1) {
    scanf("%d %d %d %d", &a, &b, &c, &dd);
    a--, b--, c--, dd--;
    int lca = getLCA(a, b);
    process(a, lca, c, dd);
    process(b, lca, c, dd);
  }
  rep(i, (int)add.size()) sum[add[i].first.first] += add[i].second;
  rep(i, (int)add.size()) sum[add[i].first.second] -= add[i].second;
  dfs2(0);
  dfs3(0);

  rep(i, m2) {
    scanf("%d %d", &a, &b);
    a--, b--;
    int t = getLCA(a, b);
    ll t1 = solve(a, t);
    ll t2 = solve(b, t);
    cout << t1 + t2 << "\n";
  }

#ifdef LocalHost
  printf("TIME: %.3lf\n", ld(clock()) / CLOCKS_PER_SEC);
#endif
  return 0;
}
