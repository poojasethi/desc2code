#include <bits/stdc++.h>

using namespace std;

#define  INF   4000000

typedef long long LL;

vector<int> List[100000];	// Adjacency List
int parent[18][100000];		// parent[i][j] :: '2^i'th parent of node 'j', to be used for calculating LCA
int level[100000];			// level[i] :: Level of node i, here level of the root node is 0 so on
LL dist[100001]; 			// 
int log2_[1000001];

void DFS(int root, bool visited[])
{
	visited[root] = true;
	for(int i=0; i<(int)List[root].size(); ++i)
	{
		int v = List[root][i];
		if(!visited[v])
		{
			parent[0][v] = root;
			for(int j=1;j<18;++j)
				parent[j][v] = parent[j-1][parent[j-1][v]];
			level[v] = level[root] + 1;
			DFS(v, visited);
		}
	}
	return ;
}

int LCA(int x, int y)
{
	if(level[x] > level[y]) swap(x,y);
	int diff = level[y] - level[x];
	while(diff)
	{
		int p = (diff&-diff);
		y = parent[log2_[p]][y];
		diff -= p;
	}
	if(x==y) return x;
	for(int i=17;i>=0;--i)
	{
		if(parent[i][x] != parent[i][y]){
			x = parent[i][x], 
			y = parent[i][y];
		}
	}
	return parent[0][x];
}

void initialize_LCA()
{
	bool vis[100000];
	memset(vis,0,sizeof vis);
	for(int i=0;i<18;++i) parent[i][0] = 0;
	level[0] = 0;
	DFS(0,vis);
}

int get_distance(int x, int y)
{
	int lca = LCA(x,y);
	return level[x] - level[lca] + level[y] - level[lca];
}

void update(int a, int b, int c, int d)
{
	int x = LCA(a, c);
	int y = b;
	if(level[b] < level[d]) y = d;
	dist[a] += 1;
	dist[b] -= 1;
	if(level[x] <= level[y]) return ;
	dist[x] -= 1;
	dist[y] += 1;
}

void update1(int a, int b, int c, int d)
{
	int x = LCA(a, c);
	int y = b;
	if(level[b] < level[d]) y = d;
	
	if(level[x] <= level[y]) return ;
	dist[x] -= 1;
	dist[y] += 1;
}

int dfs1(int root, bool vis[])
{
	vis[root] = 1;
	int ans = dist[root];
	for(int i = 0; i<List[root].size();++i)
	{
		int c = List[root][i];
		if(vis[c]) continue;
		ans += dfs1(c, vis);
	}
	return dist[root] = ans;
}

void dfs2(int root, LL add, bool vis[])
{
	dist[root] += add;
	add = dist[root];
	vis[root] = true;
	for(int i = 0; i<List[root].size();++i)
	{
		int c = List[root][i];
		if(vis[c]) continue;
		dfs2(c, add, vis);
	}
}

int main()
{
	log2_[1] = 0;
	for(int i=1;i<18;++i)
	{
		log2_[(1<<i)] = i;
	}
	int N, M1, M2;
	scanf("%d %d %d", &N, &M1, &M2);
	for(int i=0;i<N-1;++i)
	{
		int u, v;
		scanf("%d %d", &u, &v);
		--u, --v;
		List[u].push_back(v),
		List[v].push_back(u);
	}
	initialize_LCA();
	for(int i=0;i<=100000;++i)
		dist[i] = 0;
	for(int i=0;i<M1;++i)
	{
		int a, b, c, d;
		scanf("%d %d %d %d", &a, &b, &c, &d);
		--a, --b, --c, --d;
		int x = LCA(a, b),
		y = LCA(c,d);
		update(a, x, c, y);
		update1(a, x, d, y);
		
		update(b, x, c, y);
		update1(b, x, d, y);
		
	}
	bool vis[100001];
	memset(vis, 0, sizeof vis);
	dfs1(0,vis);
	memset(vis, 0, sizeof vis);
	dfs2(0,0,vis);

	/*for(int i=0;i<N;++i)
		cout << dist[i] << " ";
	cout << endl;
*/
	for(int i=0;i<M2;++i)
	{
		int a, b;
		scanf("%d %d",&a,&b);
		--a, --b;
		int x = LCA(a, b);
		LL ans = dist[a] - 2LL * dist[x] + dist[b];
		printf("%lld\n",ans);
	}
	return 0;
}