#include<bits/stdc++.h>
#define MP make_pair
using namespace std;
int pa[20][500010],tmr=0,tin[500010],tout[500010];
vector<int> g[500010];
int L[500010],n;
long long cost[500010],sum[500010];
inline void read(int &x)//mini fast input function
{
    x=0;
    int ch=getchar();int sign=1;
    while(ch<'0'||ch>'9'){if(ch=='-')sign=-1;ch=getchar();}
    while(ch>='0'&&ch<='9')
        x=(x<<3)+(x<<1)+ch-'0',ch=getchar();
    x=x*sign;
}
void dfs(int cur,int prev)
{
	L[cur]=(prev!=-1)?L[prev]+1:1;
	tin[cur]=++tmr;
	pa[0][cur]=prev;
	
	/*for(int i=1;i<20;i++)
	{
		if(pa[i-1][cur]<0)break;
		pa[i][cur]=pa[i-1][pa[i-1][cur]];
		//else
		//pa[i][j]=-1;
	}*/
	for(int i=0;i<g[cur].size();i++)
	{
		if(g[cur][i]!=prev)
		{
			dfs(g[cur][i],cur);
			//L[g[cur][i]]=L[cur]+1;
		}
	}
	tout[cur]=++tmr;
}
void pre()
{int i,j;
	for(i=1;i<20;i++)
	{
		for(j=1;j<=n;j++)
		if(pa[i-1][j]!=-1)
		pa[i][j]=pa[i-1][pa[i-1][j]];
		//else
		//pa[i][j]=-1;
	}
}
int lca(int u,int v)
{
	int i;
	if(L[u]<L[v])
	swap(u,v);
	//for(i=0)
	for(i=19;i>=0;i--)
	{
		if((L[u]-L[v])>=(1<<i))
		u=pa[i][u];
	}
	if(u==v)
	return v;
	for(i=19;i>=0;i--)
	{
		if(pa[i][u]==-1)continue;
		if(pa[i][u]!=pa[i][v])
		u=pa[i][u],v=pa[i][v];
	}
	return pa[0][v];
}
int dis(int u,int v)
{//printf("in dis\n");
	int lca12=lca(u,v);
	return L[u]+L[v]-2*L[lca12];
}
bool isAncestor(int u,int a)  // is node u an ancestor of node a
{
    if(u==a) return true;
    if(tin[u]<tin[a] && tout[u]>tout[a]) return true;
    return false;
}
pair<int,int> getcommon(int u,int a,int v,int b)
{//printf("in getcomm\n");
/*int x=lca(a,b);
if(isAncestor(v,u) && !isAncestor(x,u))return make_pair(u,x);
else if(!isAncestor(v,u) && isAncestor(v,a))return make_pair(v,x);
else return make_pair(0,0);*/
if(!isAncestor(v,a)) return MP(0,0); // v has to be an ancestor of a to have any common path
    int x=lca(a,b);

    if(L[v]<L[u]) // v is an ancestor of u, so the beginning of common path should be from u
    {
        if(isAncestor(u,x)) // if u is not an ancestor of x no common path exists
                return MP(u,x);// u->x is the common path
    }
    else // u is an ancestor of v, so the beginning of common path should be from v
    {
        if(isAncestor(v,x)) // if v is not an ancestor of x no common path exists
            return MP(v,x);// v->x is the common path
    }
    return MP(0,0);
}
void update(int a1,int a2,int a3,int a4)
{
	cost[a1]++;cost[a2]++;
	int lca12=lca(a1,a2);//printf("lac %d %d is %d\n",a1,a2,lca12);
	cost[lca12]-=2;
	int lca34=lca(a3,a4);//printf("lca %d %d is %d\n",a3,a4,lca34);
	pair<int,int> p1=getcommon(lca12,a1,lca34,a3);cost[p1.first]++;cost[p1.second]--;
	//printf("common paths are %d %d \n",p1.first,p1.second);
	p1=getcommon(lca12,a1,lca34,a4);cost[p1.first]++;cost[p1.second]--;
	//printf("common paths are %d %d \n",p1.first,p1.second);
	p1=getcommon(lca12,a2,lca34,a3);cost[p1.first]++;cost[p1.second]--;
	//printf("common paths are %d %d \n",p1.first,p1.second);
	p1=getcommon(lca12,a2,lca34,a4);cost[p1.first]++;cost[p1.second]--;
	//printf("common paths are %d %d \n",p1.first,p1.second);
}
void dfs1(int cur,int prev)
{
	int i;
	for(i=0;i<g[cur].size();i++)
	{
		if(g[cur][i]!=prev)
		{
		dfs1(g[cur][i],cur);
		cost[cur]+=cost[g[cur][i]];
		}
	}
}
void dfs2(int cur,int prev)
{
	int i;
	for(i=0;i<g[cur].size();i++)
	{
		if(g[cur][i]!=prev)
		{
			sum[g[cur][i]]=cost[g[cur][i]]+sum[cur];
			dfs2(g[cur][i],cur);
		}
	}
}
main()
{
	int m1,m2,i,u,v,a1,a2,a3,a4;
	read(n);read(m1);read(m2);
	for(i=0;i<n-1;i++)
	{
		read(u);read(v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	memset(pa,-1,sizeof(pa));
	memset(cost,0,sizeof(cost));
	memset(sum,0,sizeof(sum));
	memset(L,0,sizeof(L));
	//L[1]=1;
	dfs(1,-1);
	//for(i=0;i<=n;i++)
	//printf("%d  ",tin[i]);printf("\n");
	//for(i=0;i<=n;i++)
	//printf("%d  ",tout[i]);printf("\n");
	pre();
	while(m1--)
	{
		read(a1);read(a2);read(a3);read(a4);
		update(a1,a2,a3,a4);
	}
	dfs1(1,-1);
	dfs2(1,-1);
	//for(i=0;i<=n;i++)printf("%d  ",cost[i]);printf("\n");
	//for(i=0;i<=n;i++)printf("%d  ",sum[i]);printf("\n");
	while(m2--)
	{
		read(a1);read(a2);
		int lca12=lca(a1,a2);//printf("lca %d %d is %d\n",a1,a2,lca12);
		printf("%lld\n",sum[a1]-2*sum[lca12]+sum[a2]);
	}
}