#include <bits/stdc++.h>
using namespace std;
#define For(i,a,b) for(int i=a;i<=b;i++)
#define Ford(i,a,b) for(int i=a;i>=b;i--)
#define fi first
#define se second
#define sr(x) (int)x.size()
#define BUG(x) {cout << #x << " = " << x << endl;}
#define PR(x,a,b) {cout << #x << " = "; For(_,a,b) cout << x[_] << ' '; cout << endl;}
#define Bit(s,i) ((s&(1<<i))>0)
#define Two(x) (1<<x)
const int modul = 1000000007;
const int nmax = 500010;
const double e = 1e-8;
const double pi = acos(-1);
typedef long long ll;
typedef pair<int,int> pii;
int n,m,stest,dnum,dthoat,num[nmax],thoat[nmax];
vector<int> head[nmax],st;
int F[nmax][18],m1,m2;
int a,b,c,d;
int D[nmax],dd[nmax],dem;
int OPEN[2][nmax],CLOSE[2][nmax];
int cur[2][nmax];
int edge[nmax];
ll DIST[nmax];
bool cha(int i,int j) {
    return num[i]<=num[j] && thoat[i]>=thoat[j];
}

int lca(int u,int v) {
    if ( cha(u,v) ) return u;
    if ( cha(v,u) ) return v;
    int i;
    Ford(k,17,0) if ( cha(F[u][k],v) ) i = F[u][k];
    else u = F[u][k];
    return i;
}

void DFS(int u,int pa) {
    num[u] = ++dnum;
    if ( u!=1 ) {
        F[u][0] = pa;
        D[u] = D[pa] + 1;
        For(i,1,17) F[u][i] = F[ F[u][i-1] ][i-1];
    }
    For(i,0,sr(head[u])-1) {
        int v = head[u][i];
        if ( v==pa ) continue;
        DFS(v,u);
    }
    thoat[u] = ++dthoat;
}

void Visit(int u,int pa) {
    For(i,0,sr(head[u])-1) {
        int v = head[u][i];
        if ( v==pa ) continue;
        Visit(v,u);
      //  BUG(u);BUG(v);
        cur[0][u]+=cur[0][v];
        cur[1][u]+=cur[1][v];
    }
    cur[0][u]-=OPEN[0][u]; cur[0][u]+=CLOSE[0][u];
    cur[1][u]-=OPEN[1][u]; cur[1][u]+=CLOSE[1][u];
    edge[u] = cur[1][u] - cur[0][u];
}

void Done(int u,int pa) {
    For(i,0,sr(head[u])-1) {
        int v = head[u][i];
        if ( v==pa ) continue;
        DIST[v] = DIST[u] + edge[v];
        Done(v,u);
    }
}

void add(int u,int v,int x) {
    int c = lca(u,v);
   // cout << u << " " << v << " " << x << " " << c << endl;
    OPEN[x][c]+=2;
    CLOSE[x][u]++;
    CLOSE[x][v]++;
}

void Remove( int aa,int a,int bb,int b ) {
    if ( cha( a,bb ) || cha( b,aa ) ) return;
    if ( cha( aa,bb ) && cha( bb, a ) ) add( bb, lca( a,b ) , 0 );
    else if ( cha( bb,aa ) && cha( aa,b ) ) add( aa, lca(a,b), 0 );
}

void Cal() {
    dem++;
    int ab = lca(a,b);
    int cd = lca(c,d);
   // int ac = lca(a,c);
   // int ad = lca(a,d);
   // int bc = lca(b,c);
   // int bd = lca(b,d);
    add(a,b,1);
    Remove( ab,a,cd,c );
    Remove( ab,b,cd,c );
    Remove( ab,a,cd,d );
    Remove( ab,b,cd,d );
}

int main() {
   // freopen("input.txt","r",stdin);
    ios::sync_with_stdio(false);
    cin >> n >> m1 >> m2;
    For(i,1,n-1) {
        int u,v;cin >> u >> v;
        head[u].push_back(v);
        head[v].push_back(u);
    }
    For(i,0,17) F[1][i] = 1;
    DFS(1,0);

    For(i,1,m1) {
        cin >> a >> b >> c >> d;
        Cal();
    }

    Visit(1,0);

    Done(1,0);

    For(i,1,m2) {
        int u,v;
        cin >> u >> v;
        int cc = lca(u,v);
        cout << DIST[u] + DIST[v] - 2*DIST[cc] << endl;
    }
    return 0;
}



