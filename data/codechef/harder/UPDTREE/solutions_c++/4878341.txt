#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

#define MAXN 100005

int N,M1,M2;
vector<int> L[MAXN];
int p[17][MAXN],lvl[MAXN],val[MAXN];
long long val2[MAXN];

void dfs(int cur, int par){
    p[0][cur] = par;
    lvl[cur] = lvl[par] + 1;
    
    for(int i = L[cur].size() - 1,to;i >= 0;--i){
        to = L[cur][i];
        
        if(to != par)
            dfs(to,cur);
    }
}

int lca(int u, int v){
    if(lvl[u] < lvl[v]) swap(u,v);
    
    int diff = lvl[u] - lvl[v];
    
    for(int i = 0;i <= 16;++i)
        if(diff >> i & 1)
            u = p[i][u];
    
    if(u == v) return u;
    
    for(int i = 16;i >= 0;--i){
        if(p[i][u] != p[i][v]){
            u = p[i][u];
            v = p[i][v];
        }
    }
    
    return p[0][u];
}

int up(int u, int x){
    for(int i = 0;i <= 16;++i)
        if(x >> i & 1)
            u = p[i][u];
    
    return u;
}

void solve(int u, int r, int v, int w, int r2){
    if(lvl[r2] <= lvl[u] && lvl[r2] >= lvl[r] && up(u,lvl[u] - lvl[r2]) == r2){
        ++val[r2]; --val[r];
        
        int x = lca(u,v),y = lca(u,w);
        
        if(lvl[x] >= lvl[y]) ++val[u], --val[x];
        else ++val[u], --val[y];
    }else if(lvl[r2] <= lvl[r] && up(r,lvl[r] - lvl[r2]) == r2){
        int x = lca(u,v),y = lca(u,w);
        
        if(lvl[x] < lvl[y]) swap(x,y);
        
        if(lvl[x] <= lvl[u] && lvl[x] >= lvl[r]) ++val[u], --val[x];
        else if(lvl[x] < lvl[r]) ++val[u], --val[r];
    }else ++val[u], --val[r];
}

long long dfs2(int cur, int par){
    long long aux = val[cur];
    
    for(int i = L[cur].size() - 1,to;i >= 0;--i){
        to = L[cur][i];
        
        if(to != par)
            aux += dfs2(to,cur);
    }
    
    val2[cur] = aux;
    return aux;
}

void dfs3(int cur, int par){
    val2[cur] += val2[par];
    
    for(int i = L[cur].size() - 1,to;i >= 0;--i){
        to = L[cur][i];
        
        if(to != par)
            dfs3(to,cur);
    }
}

int main(){
    scanf("%d %d %d",&N,&M1,&M2);
    
    for(int i = 1,u,v;i < N;++i){
        scanf("%d %d",&u,&v);
        
        L[u].push_back(v);
        L[v].push_back(u);
    }
    
    dfs(1,0);
    
    for(int i = 1;i <= 16;++i)
        for(int j = 1;j <= N;++j)
            p[i][j] = p[i - 1][ p[i - 1][j] ];
    
    for(int i = 0,A,B,C,D;i < M1;++i){
        scanf("%d %d %d %d",&A,&B,&C,&D);
        int r = lca(A,B),r2 = lca(C,D);
        
        solve(A,r,C,D,r2);
        solve(B,r,C,D,r2);
    }
    
    dfs2(1,0);
    dfs3(1,0);
    
    for(int i = 0,A,B;i < M2;++i){
        scanf("%d %d",&A,&B);
        
        int r = lca(A,B);
        
        printf("%lld\n",val2[A] + val2[B] - 2 * val2[r]);
    }
    
    return 0;
}