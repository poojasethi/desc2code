#include <bits/stdc++.h>
using namespace std;
int Sum;
int N;
int Subtree[510];
std::vector<int> P[510];
int W[510];
int Ans[100010];
int ans[100010][2];
int MOD[2] = {1000000007,1000000009};
void dfs(int idx)
{	
	Subtree[idx]+=W[idx];
	for(int i = 0;i<P[idx].size();i++){
		dfs(P[idx][i]);
		Subtree[idx]+=Subtree[P[idx][i]];
	}
}
void addItem(int val)
{
	for(int i = Sum;i>=val;i--)
	{
		for(int j = 0;j<2;j++)
		{
			ans[i][j] += ans[i-val][j];
			if(ans[i][j]>=MOD[j])
				ans[i][j]-=MOD[j];
		}
	}
}
void Removeitem(int val)
{
	for(int i = val;i<=Sum;i++)
	{
		for(int j = 0;j<2;j++)
		{

			ans[i][j]-=ans[i-val][j];
			if(ans[i][j]<0)
				ans[i][j]+=MOD[j];
		}
	}
}
void Update(int val)
{
	for(int i = val;i<=Sum;i++)
	{
		for(int j = 0;j<2;j++)
		{
			Ans[i]|= ans[i-val][j]?1:0;
		}
	}
}
void dfs2(int idx,int w)
{
	w+=W[idx];
	Update(w);
	for(int i = 0;i<P[idx].size();i++)
	{
		addItem(Subtree[P[idx][i]]);
	}
	for(int i = 0;i<P[idx].size();i++)
	{
		Removeitem(Subtree[P[idx][i]]);
		dfs2(P[idx][i],w);
		addItem(Subtree[P[idx][i]]);
	}
	for(int i = 0;i<P[idx].size();i++)
		Removeitem(Subtree[P[idx][i]]);
}
int main()
{
	cin>>N;
	Ans[0] = 1;
	ans[0][0] = 1;
	ans[0][1] = 1;
	for(int i = 0;i<N;i++){
		cin>>W[i];
		Sum+=W[i];
	}
	int v;
	for(int i = 1;i<N;i++)
	{
		cin>>v;
		P[v-1].push_back(i);
	}		
	dfs(0);
	dfs2(0,0);
	for(int i = 1;i<=Sum;i++)
		cout<<Ans[i];
	cout<<endl;
	return 0;
}