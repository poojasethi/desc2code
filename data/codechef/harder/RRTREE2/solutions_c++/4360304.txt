//Template

// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

#define N 100100

vi adj[505];
int dp[505][N];
int su[505], v[505];

void dfs(int cur)
{

	su[cur] = v[cur];
	rep(i, adj[cur].sz)
	{
		dfs(adj[cur][i]);
		su[cur] += su[adj[cur][i]];
	}

	rep(i, adj[cur].sz)
	{
		int u = adj[cur][i];
		int *cdp = dp[u];

		int count = 0;
		rep(j, N) count += cdp[j];

		rep(j, adj[cur].sz)
		if(i != j)
		{
			int v = adj[cur][j];
			int x = su[v];

			for(int k = N-10; k>=x; k--)
				cdp[k] = cdp[k] | cdp[k-x];
		}
	}

	int *cdp = dp[cur];
	for(int k = v[cur], kk=0; k<N; k++, kk++)
	{
		rep(i, adj[cur].sz)
			cdp[k] = cdp[k] | dp[adj[cur][i]][kk];
	}
	cdp[v[cur]] = 1;

}

int main()
{
	memset(dp, 0, sizeof dp);
	rep(i, 505)
	{
		dp[i][0] = 1;
	}

	int n;
	scanf("%d", &n);

	int sum = 0;
	rep(i, n)
	{
		scanf("%d", &v[i]);
		sum += v[i];
	}

	rep(i, n-1)
	{
		int x;
		scanf("%d", &x);
		adj[x-1].pb(i+1);
	}

	dfs(0);

	rep(i, sum)
	{
		printf("%c", char('0'+dp[0][i+1]));
	}
	pn;
}