#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>
#include <set>

#define MOD1 1000000007
#define MOD2 1000000009

using namespace std;

typedef long long int lld;
typedef pair<int, int> pii;
typedef pair<pii, pii> line;

#define F first
#define S second

struct node
{
  int w, index;
  node *parent;
  vector<node *> childs;
} typedef node;

node* list[505];
int sums[100010];
lld kp1[100010];
lld kp2[100010];
int ls[505];
int tot = 0;

void add(int vl)
{
  int i;
  for (i = tot; i >= vl; i--)
  {
    kp1[i] += kp1[i - vl];
    kp2[i] += kp2[i - vl];
    if (kp1[i] >= MOD1)
      kp1[i] -= MOD1;
    if (kp2[i] >= MOD2)
      kp2[i] -= MOD2;
  }
}

void remove (int vl) {
  int i;
  for (i = vl; i <= tot; i++)
  {
    kp1[i] -= kp1[i - vl];
    kp2[i] -= kp2[i - vl];
    if (kp1[i] < 0)
      kp1[i] += MOD1;
    if (kp2[i] < 0)
      kp2[i] += MOD2;
  }
}

void dfs(node *cur , int cr)
{
  int j;
  cr += cur->w;
  
  for (j = 0; j <= tot; j++)
    if (j + cr <= tot)
      sums[j + cr] |= (kp1[j] != 0 || kp2[j] != 0);

  for (j = 0; j < (int)cur->childs.size(); j++)
    add(ls[cur->childs[j]->index]);

  for (j = 0; j < (int)cur->childs.size(); j++)
  {
    remove(ls[cur->childs[j]->index]);
    dfs(cur->childs[j], cr);
    add(ls[cur->childs[j]->index]);
  }
    
  for (j = 0; j < (int)cur->childs.size(); j++)
    remove(ls[cur->childs[j]->index]);
}

int calc(node *cur)
{
  int tt = cur->w;
  int j;
  
  for (j = 0; j < (int)cur->childs.size(); j++)
    tt += calc(cur->childs[j]);

  return ls[cur->index] = tt;
}

int main()
{
  memset(sums, 0, sizeof sums);
  memset(kp1, 0, sizeof kp1);
  memset(kp2, 0, sizeof kp2);
  int n, i;
  scanf("%d", &n);
  
  for (i = 0; i < n; i++)
  {
    int w;
    scanf("%d", &w);
    list[i] = new node();
    list[i]->w = w;
    list[i]->index = i;
    tot += w;
  }

  for (i = 1; i < n; i++)
  {
    int p;
    scanf("%d", &p);
    p--;

    list[i]->parent = list[p];
    list[p]->childs.push_back(list[i]);
  }

  kp1[0] = kp2[0] = 1;
  calc(list[0]);
  dfs(list[0], 0);

  for (i = 1; i <= tot; i++)
    printf("%d", sums[i]);
  printf("\n");
    
  return 0;
}
