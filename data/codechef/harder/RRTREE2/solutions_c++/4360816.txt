// asdasdasda as dasd 
#include <bits/stdc++.h>
using namespace std;
#define FREP(b) for(int i=0;i<b;i++)
#define REP(a,b,c) for(int a=b;a<c;a++)
#define asd(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define asdf(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
typedef pair<int,int> ii;
typedef long long LL;
// MAX1*MAX1*MAX2 // :
const int MAX1 = 503, MAX2 = 1e5 + 2;
vector<int> G[MAX1];
int ans[MAX2], kn[MAX1][MAX2], SUM[MAX1], inp[MAX1];

void dfs(int v){
    REP(i, 0, G[v].size()) dfs(G[v][i]);

    REP(i, 0, G[v].size()){
        int u = G[v][i];
        REP(j, 0, G[v].size()){
            if(i == j) continue;
            int w = G[v][j], wt = SUM[w];
            for(int d = SUM[0]; d >= wt; d--)
                kn[u][d] |= kn[u][d-wt];
        }
    }

    kn[v][inp[v]] = 1;
    for(int d = inp[v]; d <= SUM[0]; d++){
        REP(i, 0, G[v].size()){
            kn[v][d] |= kn[G[v][i]][d-inp[v]];
        }
    }
}

int dfs1(int v){
    REP(i, 0, G[v].size()){
        SUM[v] += dfs1(G[v][i]);
    }
    return SUM[v] = SUM[v] + inp[v];
}

int n;
int main(){
    scanf("%d", &n);
    REP(i, 0, n){
        scanf("%d", &inp[i]);
        kn[i][0] = 1;
    }
    int a;
    REP(i, 0, n-1){
        scanf("%d", &a);
        a--;
        G[a].push_back(i+1);
    }
    dfs1(0);
    dfs(0);
    REP(i,1,SUM[0]+1){
        printf("%d", kn[0][i]);
    }
    cout << endl;
    return 0;
}

