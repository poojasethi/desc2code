//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random S(rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, a[505], par[505], w[505];
vector<int> g[505];
int res[200005], size;
ll cnt[200005];

void add(int x){
  for(int i = size - x; i >= 0; --i){
    cnt[i + x] = (cnt[i + x] + cnt[i]);
    if(cnt[i + x] >= inf) cnt[i + x] -= inf;
  }
}

void del(int x){
  for(int i = 0; i <= size - x; ++i){
    cnt[i + x] = cnt[i + x] - cnt[i] + inf;
    if(cnt[i + x] >= inf) cnt[i + x] -= inf;
  }
}

void dfs(int v, int sum){
  sum += a[v];
  for(int i = 0; i + sum <= size; ++i){
    if(cnt[i]) res[i + sum] = true;
  }
  forn(i, g[v].size()){
    int to = g[v][i];
    add(w[to]);
  }
  forn(i, g[v].size()){
    int to = g[v][i];
    del(w[to]);
    dfs(to, sum);
    add(w[to]);
  }
  forn(i, g[v].size()){
    int to = g[v][i];
    del(w[to]);
  }
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d", &n);
  int sum = 0;
  forn(i, n){
    scanf("%d", a + i);
    sum += a[i];
    w[i] = a[i];
  }
  for(int i = 1; i < n; ++i){
    int x; scanf("%d", &x); --x;
    g[x].pb(i);
    par[i] = x;
  }
  for(int i = n - 1; i >= 1; --i){
    w[par[i]] += w[i];
  }
  size = sum;
  cnt[0] = 1;
  dfs(0, 0);
  for(int i = 1; i <= sum; ++i){
    printf("%d", res[i]);
  }
  printf("\n");
  return 0;
}
