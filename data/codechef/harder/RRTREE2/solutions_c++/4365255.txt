#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<ctime>
#include<assert.h>

#include<cmath>
#include<iostream>
#include<fstream>

#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>
#include<limits.h>

using namespace std;

#define MAX(a,b) ((a)>(b) ? (a) : (b))
#define MIN(a,b) ((a)<(b) ? (a) : (b))
#define EPS 1e-9
#define asdf exit(0);
#define AB(a) ((a)<(0) ? (-a) : (a))
#define EQ(a,b) ( (fabs(a-b)<EPS) ? (1) : (0))




typedef long long LL;
//typedef __int64 LL;






vector<LL> adj[2010];

int m,n;
LL mask;
int dp[2000];
int w[2000];
LL tp[100];


vector<int> child[1000];


ostream &operator<<(ostream &o,vector<LL> v)
{
    int i,cnt=0,j;
    for(i=0;i<v.size();i++)
    {
        for(j=0;j<62;j++)
        {
            if(v[i] & tp[j]) o<<cnt<<" ";
            cnt++;
        }
    }
    cout<<endl;
    return o;
}

void dfs(int u)
{
    int i,v;
    dp[u]=w[u];
    for(i=0;i<child[u].size();i++)
    {
        v=child[u][i];
        dfs(v);
        dp[u]+=dp[v];
    }
}


LL lower(int bit,LL val)
{
    if(val>mask || val<0) cout<<"error";
    return ((val>>(62-bit)) & mask);
}

LL upper(int bit,LL val)
{
    if(val>mask || val<0) cout<<"error";
    return ((val<<(62-bit))& mask);
}





void shft_add(vector<LL> &ret,vector<LL> &temp,int val)
{
    int k,l=0+(m-1)*62,r=61+(m-1)*62;

    int R=r,l1,r1;
	LL v1,v2;

	//printf("%I64d\n",temp[0]);
	//asdf



    for(k=m-1;k>=0;k--)
    {
        l1=l+val;
        r1=r+val;



        if( (l1/62)<m)
        {
            v1=upper(62-(l1%62),temp[l/62]);
            ret[(l1/62)]|=v1;
        }


        if( (r1/62)<m)
        {
            v2=lower((r1%62)+1,temp[l/62]);
            ret[(r1/62)]|=v2;
        }


        l-=62;
        r-=62;
    }

}



/*
ostream &operator<<(ostream &o,vector<LL> v)
{
    int i;
    for(i=0;i<v.size();i++)
    o<<i<<" "<<v[i]<<endl;
    return o;
}
*/







int is(int u,int v)
{
	if(adj[u][v/62]&tp[v%62]) return 1;
    else return 0;
}


void OR(vector<LL> &a,vector<LL> &b)
{
    int i;
    for(i=0;i<m;i++)
    {
        a[i]|=b[i];
    }
}


void dfs1(int u)
{
    int i,v,j;

    vector<LL> temp(m,0);


    shft_add(temp,adj[u],w[u]);
    adj[u]=temp;


    //cout<<u<<" "<<is(u,90)<<endl;
	//printf("%I64d\n",adj[u][1]);
	//asdf




    //cout<<u<<" "<<adj[u]<<endl<<endl;
    //asdf

    for(i=0;i<child[u].size();i++)
    {
        v=child[u][i];
        vector<LL> temp=adj[u];


        for(j=0;j<child[u].size();j++)
        {
            if(j==i) continue;
            vector<LL> temp2(m,0);
            shft_add( temp2,temp,  dp [ child[u][j] ]  );
            OR(temp,temp2);
        }
        adj[v]=temp;
        dfs1(v);
    }



}







int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out1.txt","w",stdout);

    int i,j,k,u,v;
    m=0;


    LL one=1;
    mask=(one<<62)-1;


    tp[0]=1;
    for(i=1;i<=70;i++) tp[i]=tp[i-1]+tp[i-1];


    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&w[i]);
        m+=w[i];
    }
    int sum=m;
    m=(m/62)+1;


    for(i=1;i<=(n-1);i++)
    {
        scanf("%d",&j);
        j--;
        child[j].push_back(i);
    }




    for(i=0;i<n;i++)
    {
        adj[i].resize(m,0);
        adj[i][0]=1;
    }





    dfs(0);
    dfs1(0);



  //  cout<<dp[1]<<" "<<dp[2]<<endl;
   // asdf

    for(i=0;i<n;i++)
    {
        OR(adj[0],adj[i]);
    }


    //cout<<adj[0]<<endl<<endl;
    //asdf


    for(i=1;i<=sum;i++)
    {
        //cout<<i<<" ";
        if(is(0,i)) printf("1");
        else printf("0");

        //cout<<endl;
    }
    printf("\n");






    return 0;
}
