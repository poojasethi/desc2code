#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
#include <map>
#include <set>

using namespace std;

typedef long long ll;

const int MAXM = 3141596;
const ll mod = (1LL<<32)-1;

int m;
int vv[10], w[10];

int next[MAXM], q[MAXM];

unsigned int val[MAXM];
int d[MAXM], len[MAXM];

int h[MAXM];
int to[MAXM*6], nxt[MAXM*6];

int main()
{
	int test;
	scanf("%d", &test);
	for (; test--;)
	{
		scanf("%d", &m);
	 	for (int i = 0; i < 10; i++)
	 		scanf("%d", w+i);

		for (int i = 0; i < m; i++)
			next[i] = (10*i)%m;
		for (int i = 0; i < 10; i++) vv[i] = i%m;

		memset(d, 127, sizeof(int)*m);
		memset(h, -1, sizeof(int)*2200);
		d[0] = 0;

		int last=0;
		to[0] = 0; nxt[0] = h[0]; h[0] = last++;
		 
		for (int it=0; it<2200; it++)
		{
			for (int j = h[it]; j!=-1; j = nxt[j])
			{
				int u = to[j];

				if (it!=d[u]) continue;

				for (int i = 0; i < 10; i++)
				{
					int x = d[u]+w[i];
					int v = next[u]+vv[i];
					while (v>=m) v-=m;

				 	if (x < d[v])
				 	{
				 		d[v] = x;
				 		if (x == it)
				 		{       	
					 		to[last] = v; nxt[last] = nxt[j]; nxt[j] = last++;
					 	}
					 	else
					 	{
					 		to[last] = v; nxt[last] = h[x]; h[x] = last++;
					 	}
				 	}
				}
			}
		}

		memset(len, 127, sizeof(int)*m);
		len[0] = 0;

		ll res = 0;
		q[0] = 0; val[0] = 0;
		for (int l=0, r=1; l<r; l++)
		{
			int u = q[l];

			res += val[l];

			for (int i = 0; i < 10; i++)
			{
				int x = d[u]+w[i];
				int v = next[u]+vv[i];
				while (v>=m) v-=m;

			 	if (len[u]+1 < len[v] && x==d[v])
			 	{
			 		len[v] = len[u]+1;
			 		val[r] = (val[l]*3141LL+i)&mod;
			 		q[r++] = v;
			 	}
			}
		}

		printf("%lld\n", res);
	}

	return 0;
}
