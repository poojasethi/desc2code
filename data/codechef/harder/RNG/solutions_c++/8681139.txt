#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

struct Linear_recursion
{
	#define p_size 70
	#define d_size 150005
	
	int D,d,f[d_size],c[d_size],c0[d_size],c_inv[d_size],a[d_size],tmp[d_size],n_[p_size],t[d_size];
	int N,p,g,*W,w[2][d_size],rev[d_size];
	
	int Power(int a,int b)
	{
		int ans=1;
		for(;b;a=(long long)a*a%p,b>>=1)if(b&1)ans=(long long)ans*a%p;
		return ans;
	}
	void prepare(int n)
	{
		if(N==n)return;
		int i,k,x,y;N=n;
		for(i=0;i<n;++i)
		{
			for(x=i,y=0,k=1;k<n;x>>=1,k<<=1)(y<<=1)|=x&1;
			rev[i]=y;
		}
		x=Power(g,(p-1)/n);y=Power(x,p-2);
		w[0][0]=w[1][0]=1;
		for(i=1;i<n;++i)
		w[0][i]=(long long)w[0][i-1]*x%p,
		w[1][i]=(long long)w[1][i-1]*y%p;
	}
	void work(int *A,int n)
	{
		if(n==1)return;
		int i,j,k,l,t,x,y;
		for(i=0;i<n;++i)if(i<rev[i])swap(A[i],A[rev[i]]);
		for(i=1;i<n;i<<=1)
		for(j=0,t=n/(i<<1);j<n;j+=i<<1)
		for(k=l=0;k<i;++k,l+=t)
		{
			x=(long long)W[l]*A[j+k+i]%p;
			y=A[j+k];
			A[j+k]=(y+x)%p;
			A[j+k+i]=(y-x+p)%p;
		}
	}
	
	void DFT(int *A,int n){prepare(n);W=w[0];work(A,n);}
	void IDFT(int *A,int n)
	{
		prepare(n);W=w[1];work(A,n);
		for(int i=0,x=Power(n,p-2);i<n;++i)A[i]=(long long)A[i]*x%p;
	}
	
	void Inv(int *A,int *invA,int n)
	{
		n<<=1;
		for(int i=0;i<n;++i)invA[i]=0;
	    invA[0]=Power(A[0],p-2);
	    for(int t=2;t<n;t<<=1)
		{
	        for(int i=0;i<t;i++)tmp[i]=A[i];
	        t<<=1;DFT(invA,t);DFT(tmp,t);
	        for(int i=0;i<t;++i)invA[i]=(p+2-(long long)invA[i]*tmp[i]%p)*invA[i]%p;
	        IDFT(invA,t);
	        for(int i=t/2;i<t;++i)invA[i]=0;
	        for(int i=0;i<t;++i)tmp[i]=0;
	        t>>=1;
	    }
	}
	
	void init(int d_,int *f_,int *c_)
	{
		int i;
		d=d_;for(D=1;D<=d;D<<=1);D<<=1;
		for(i=0;i<=d;++i)f[i]=f_[i],c[i]=c_[i],t[i]=(p-c[i])%p;
		for(i=d+1;i<D;++i)f[i]=c[i]=t[i]=0;
		t[0]=(t[0]+1)%p;
		Inv(t,c_inv,D>>1);
		DFT(c_inv,D);
		for(i=0;i<D;++i)c0[i]=c[i];
		DFT(c0,D);
	}
	
	void mul(int *tmp,int d)
	{
		if(!d)return;
		int i;
		for(i=0;i<=d;++i)t[i]=tmp[i];
		for(i=d+1;i<D;++i)t[i]=0;
		DFT(t,D);
		for(i=0;i<D;++i)t[i]=(long long)t[i]*c_inv[i]%p;
		IDFT(t,D);
		for(i=d+1;i<D;++i)t[i]=0;
		
		DFT(t,D);
		for(i=0;i<D;++i)t[i]=(long long)t[i]*c0[i]%p;
		IDFT(t,D);
		for(i=d+1;i<D;++i)tmp[i]=(tmp[i]+t[i])%p;
	}
	
	void mult(int *a,int *b)
	{
		int i,j,k;
		for(i=0;i<D;++i)t[i]=a[i];
		DFT(t,D);
		if(a==b)for(i=0;i<D;++i)tmp[i]=(long long)t[i]*t[i]%p;
		else
		{
			for(i=0;i<D;++i)tmp[i]=t[i];
			for(i=0;i<D;++i)t[i]=b[i];
			DFT(t,D);
			for(i=0;i<D;++i)tmp[i]=(long long)tmp[i]*t[i]%p;
		}
		IDFT(tmp,D);
		mul(tmp,d);
		for(i=1;i<=d;++i)a[i]=tmp[i+d];
	}
	
	int calc(long long n)
	{
		int i,j,k,p_=0;long long m;
		if(n<d)return f[n];
		for(m=n/d;m;m>>=1)n_[++p_]=m&1;
		for(i=1;i<=d;++i)a[i]=c[i];
		for(i=1;i<=d;++i)a[i+d]=0;
		for(i=p_-1;i;--i)
		{
			mult(a,a);
			if(n_[i])mult(a,c);
		}
		mul(a,k=n%d);
		for(i=1;i<=d;++i)a[i]=a[i+k];
		for(i=1,k=0;i<=d;++i)k=(k+(long long)a[i]*f[d-i])%p;
		return k;
	}
	
	#undef p_size
	#undef d_size
}L;

int d,i,j,k;
int A[300005],C[300005];
long long n;

int main()
{
	L.p=104857601;L.g=3;
	scanf("%d%lld",&d,&n);--n;
	for(i=0;i<d;++i)scanf("%d",&A[i]);
	for(i=1;i<=d;++i)scanf("%d",&C[i]);
	L.init(d,A,C);
	printf("%d\n",L.calc(n));
}