#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1000000000010000000LL
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define IN(x,y) ((y).find((x))!=(y).end())
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);

#define ull unsigned ll

// Dinic max-flow (ACRush)
// użycie: init(n, s, t), addEdge(u, v, capa tam, capa z powrotem), dinicFlow()

const int N = 100000 + 7; // max nodes
const int M = 100000 + 7; // max edges
typedef ll T; // w razie zmiany na long long, zmienić też INF na 10^18
int nodes, src, dest, nedge;
int point[M], next[M], flow[M], capa[M];
int head[N], dist[N], Q[N], work[N];
 
void init (int _nodes, int _src, int _dest) {
   nodes = _nodes + 2; // na wszelki wypadek
   src = _src;
   dest = _dest;
   FOR(i,nodes) head[i] = -1;
   nedge = 0;
}

void addEdge(int u, int v, int c1, int c2 = 0) {
   point[nedge]=v, capa[nedge]=c1, flow[nedge]=0, next[nedge]=head[u], head[u]=(nedge++);
   point[nedge]=u, capa[nedge]=c2, flow[nedge]=0, next[nedge]=head[v], head[v]=(nedge++);
}

bool dinicBfs() {
   FOR(i,nodes) dist[i] = -1;
   dist[src] = 0;
   int szQ = 1;
   Q[0] = src;
   FOR(cl,szQ) {
      for (int k = Q[cl], i = head[k]; i >= 0; i = next[i]) {
         if (flow[i] < capa[i] && dist[point[i]] < 0) {
            dist[point[i]] = dist[k] + 1;
            Q[szQ++] = point[i];
         }
      }
   }
   return dist[dest] >= 0;
}

T dinicDfs (int x, T exp) {
   if (x == dest) return exp;
   T res = 0;
   for (int& i = work[x]; i >= 0; i = next[i]) {
      int v = point[i]; T tmp;
      if (flow[i] < capa[i] && dist[x]+1 == dist[v]
          && (tmp = dinicDfs(v, min(exp, (T)capa[i] - flow[i]))) > 0) {
         flow[i] += tmp;
         flow[i^1] -= tmp;
         res += tmp;
         exp -= tmp;
         if (0 == exp) break;
      }
   }
   return res;
}

T dinicFlow () {
   T res = 0;
   while (dinicBfs()) {
      FOR(i,nodes) work[i] = head[i];
      res += dinicDfs(src,INF);
   }
   return res;
}

vi dwacol (int n, vi *adj) {
   vi ans(n+1,2);
   FORI(i,n) {
      if (ans[i] != 2) continue;
      deque<pii> q;
      q.pb(mp(i,0));
      while (!q.empty()) {
         int v = q.front().fi, kol = q.front().se;
         q.pop_front();
         if (ans[v] == 2) {
            ans[v] = kol;
            FOREACH(it,adj[v]) q.pb(mp(*it,1-kol));
         } else if (ans[v] != kol) return vi();
      }
   }
   return ans;
}

ull mult (ull a, ull b, ull m) { //mnozy (a*b)%m dla a,b<2^63
    if (!a || !b) return 0;
    if (b < (1LL<<31) && a < (1LL<<31)) return (a*b)%m;
    ull x = 0;
    while (b) {
        if (b&1) x = (x+a) % m;
        a = (a<<1) % m;
        b >>= 1;
    }
    return x;
}

ull pow (ull n, ull k, ull m) { //(n^k)%m
    ull w = 1;
    while (k) {
        if (k&1) w = mult(w,n,m);
        n = mult(n,n,m);
        k >>= 1;
    }
    return w;
}

bool TRM (ull x, int ile) {
    if (x==2 || x==3) return 1;
    if (!(x%2) || !(x%3) || x==1) return 0;
    ull z0 = x-1; int t = 0;
    while (!(z0&1)) { z0 >>= 1; t++; }
    while (ile--) {
        ull b = pow(2+rand()%(x-3),z0,x);
        if (b==1) continue;
        for(int j=0; j<t && b!=x-1 && b!=1; j++) b = mult(b,b,x);
        if (b != x-1) return 0;
    }
    return 1;
}

#define N 512
ll u[N];
int c[N];
vi col;
vi adj[N];
int conn[N][N];
bool visited[N];
int connector[N];
bool deficient[N];

void dfs (int i, bool def) {
   if (visited[i]++) return;
   if (def) {
      deficient[i] = 1;
      // we want unmatched edges
      FOREACH(x,adj[i]) {
         if (!( c[i] == 1 && c[*x] == 1 && flow[conn[i][*x]] == 1 )) {
            dfs(*x,0);
         }
      }
   } else {
      // we want matched edges
      FOREACH(x,adj[i]) {
         if (flow[conn[i][*x]] > 0) {
            dfs(*x,1);
         }
      }
   }
}

#define M 1000000
vector<bool> pr(M+1,1);
map<ll,int> ispr;

bool prime (ll x) {
   if (x <= M) return pr[x];
   int &ref = ispr[x];
   if (ref == 0) {
      ref = 2 + TRM(x,2);
   }
   return ref - 2;
}

int main () {
   wez(n)
   
   pr[0] = pr[1] = 0;
   for (int x = 2; x*x <= M; ++x) if (pr[x]) for (int y = x*x; y <= M; y += x) pr[y] = 0;
   
   FORI(i,n) scanf("%lld %d", u+i, c+i);
   FORI(i,n) FORI(j,i-1) {
      if ((u[i] % u[j] == 0 && prime(u[i]/u[j])) || (u[j] % u[i] == 0 && prime(u[j]/u[i]))) {
         adj[i].pb(j);
         adj[j].pb(i);
      }
   }
   
   col = dwacol(n,adj);
   if (col.empty()) {
      printf("jest lipa");
      return 0;
   }
   init(n+1,0,n+1);
   FORI(i,n) FOREACH(x,adj[i]) {
      if (col[i]) {
         addEdge(*x,i,1000000000,0);
         conn[i][*x] = conn[*x][i] = head[*x];
      }
   }
   FORI(i,n) {
      if (col[i]) {
         addEdge(i,n+1,c[i],0);
         connector[i] = head[i];
      } else {
         addEdge(0,i,c[i],0);
         connector[i] = head[0];
      }
   }
   
   dinicFlow();
   
   FORI(i,n) visited[i] = deficient[i] = 0;
   FORI(i,n) if (flow[connector[i]] < c[i]) {
      // unmatched vertex
      dfs(i,1);
   }
   
   ll best = INF;
   FORI(i,n) if (deficient[i]) REMIN(best, u[i]);
   if (best < INF) {
      printf("Bran %lld\n", best);
   } else printf("Tyrion\n");
}
