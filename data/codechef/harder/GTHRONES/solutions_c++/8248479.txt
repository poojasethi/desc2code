#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <map>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <cstring>
#define REP(i,x,v)for(int i=x;i<=v;i++)
#define REPD(i,x,v)for(int i=x;i>=v;i--)
#define FOR(i,v)for(int i=0;i<v;i++)
#define FORE(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REMIN(x,y) (x)=min((x),(y))
#define REMAX(x,y) (x)=max((x),(y))
#define pb push_back
#define sz size()
#define mp make_pair
#define fi first
#define se second
#define ll long long
#define IN(x,y) ((y).find((x))!=(y).end())
#define un(v) v.erase(unique(ALL(v)),v.end())
#define LOLDBG
#ifdef LOLDBG
#define DBG(vari) cerr<<#vari<<" = "<<vari<<endl;
#define DBG2(v1,v2) cerr<<(v1)<<" - "<<(v2)<<endl;
#else
#define DBG(vari)
#define DBG2(v1,v2)
#endif
#define CZ(x) scanf("%d",&(x));
#define CZ2(x,y) scanf("%d%d",&(x),&(y));
#define CZ3(x,y,z) scanf("%d%d%d",&(x),&(y),&(z));
#define ALL(x) (x).begin(),(x).end()
#define tests int dsdsf;cin>>dsdsf;while(dsdsf--)
#define testss int dsdsf;CZ(dsdsf);while(dsdsf--)
using namespace std;
typedef pair<int,int> pii;
typedef vector<int> vi;
template<typename T,typename TT> ostream &operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream &operator<<(ostream &s,vector<T> t){s<<"{";FOR(i,t.size())s<<t[i]<<(i==t.size()-1?"":",");return s<<"}"<<endl; }
 
#define MAXPR 100000
 
bool sito[MAXPR+10];
 
void situj()
{
    FOR(i,MAXPR+1) sito[i]=1;
    sito[1]=0;
    REP(i,2,MAXPR) if (sito[i]) {for(int j=2*i;j<=MAXPR;j+=i) sito[j]=0;}
}
 
 
#define fint ll
 
#define maxm 100000
#define maxn 2000
#define INF 1000000000000LL
 
int N,So,Ta,edges;
int head[maxn],curr[maxn],point[maxm],next[maxm];
int layer[maxn],Q[maxn];
fint flow[maxm],capa[maxm];
 
void init(int _N,int _S,int _T)
{
	N=_N;So=_S;Ta=_T;edges=0;
	FOR(i,N) head[i]=-1;
}
 
void dod_kr(int u,int v,fint cp)
{
	point[edges]=v;capa[edges]=cp;flow[edges]=0;next[edges]=head[u];head[u]=edges++;
	point[edges]=u,capa[edges]=0;flow[edges]=0;next[edges]=head[v];head[v]=edges++;
}
 
bool flow_bfs()
{
	FOR(i,N) layer[i]=-1;
	layer[So]=0;
	Q[0]=So;
	int qs=1;
	FOR(cl,qs) for(int k=Q[cl],i=head[k];i>=0;i=next[i])
	if (flow[i]<capa[i] && layer[point[i]]<0)
		{layer[point[i]]=layer[k]+1;Q[qs++]=point[i];}
	return layer[Ta]>=0;
}
 
fint flow_dfs(int x,fint fl)
{
	if (x==Ta) return fl;
	fint wyn=0;
	for (int &i=curr[x];i>=0;i=next[i])
	{
		int v=point[i];
		fint tmp;
		if (flow[i]<capa[i] && layer[v]==layer[x]+1 && (tmp=flow_dfs(v,min(fl,capa[i]-flow[i])))>0)
		{
			flow[i]+=tmp;flow[i^1]-=tmp;
			wyn+=tmp;fl-=tmp;
			if (!fl) break;
		}
	}
	return wyn;
}
 
fint max_flow()
{
	fint wyn=0;
	while (flow_bfs())
	{
		FOR(i,N)curr[i]=head[i];
		wyn+=flow_dfs(So,INF);
	}
	return wyn;
}
 
#define ull unsigned long long
 
ull GCD(ull a,ull b)
{
    if (b<a) return GCD(b,a);
    if (!a) return b;
    return GCD(b%a,a);
}
 
ull multbig(ull a, ull b, ull m) //mnozy (a*b)%m dla a,b<2^63
{
    if (b==0 || a==0) return 0;
    if (b<(1LL<<31) && a<(1LL<<31))
        return (a*b)%m;
    ull x=0;
    while (b)
    {
        if (b&1)
            x=(x+a)%m;
        a=(a<<1)%m;
        b=b>>1;
    }
    return x;
}
 
ull sqpow(ull n, ull k, ull m) //(n^k)%m
{
    if (k==0)
        return 1;
    ull k0=k, w=1, n0=n;
    while(k0)
    {
        if (k0&1)
            w=multbig(w,n0,m);
        n0=multbig(n0,n0,m);
        k0=k0>>1;
    }
    return w;
}
 
bool TRM(ull x, int ile)
{
    if (x==2 || x==3) return 1;
    if (!(x%2) || !(x%3) || x==1) return 0;
    int t=0,j;
    ull z0=x-1,b;
    while (!(z0%2)) {z0/=2;t++;}
    while(ile--)
    {
        b=sqpow(2+rand()%(x-3),z0,x);
        if (b==1)
            continue;
        for(j=0;j<t && b!=x-1 && b!=1;j++)
            b=multbig(b,b,x);
        if (b!=x-1) return 0;
    }
    return 1;
}
 
vector<pair<ll,int> > a;
ll A[501];
ll C[501];
int kolor[501];
int deg[501];
vi kr[501];
vi macz[501];
vi niemacz[501];
bool odw[501];
vi wygr;
int n;
int aktkolor;
 
void dfs(int u)
{
	odw[u]=1;
	if (kolor[u]==aktkolor)
	{
		FORE(e,niemacz[u])
		{
			if (!odw[*e])
			{
				dfs(*e);
			}
		}
	}
	else
	{
		FORE(e,macz[u])
		{
			if (!odw[*e])
			{
				dfs(*e);
			}
		}
	}
}
 
void dfskolor(int u,int kol)
{
	if (kolor[u]!=-1) return;
	kolor[u]=kol;
	FORE(i,kr[u]) dfskolor(*i,1-kol);
}
 
set<ll> primy;
set<ll> nieprimy;
 
int main()
{
	ios_base::sync_with_stdio(0);
	situj();
	int n;cin>>n;
	a.resize(n);
	FOR(i,n) cin>>a[i].fi>>a[i].se;
	sort(ALL(a));
	FOR(i,n) A[i]=a[i].fi;
	FOR(i,n) C[i]=a[i].se;
	//if (n<400){while(1){}}
	//if (n>=400) return 0;
	FOR(i,n) REP(j,i+1,n-1)
	{
		//if (n>400 && i>n/1) return 0;
		if (A[j]%A[i]==0)
		{
			ll P=A[j]/A[i];
			if (IN(P,nieprimy)) continue;
			if (IN(P,primy) || (P<MAXPR && sito[P]) || (P>=MAXPR && TRM(P,2)))
			{
				primy.insert(P);
				kr[i].pb(j);
				kr[j].pb(i);
			}
			else
			{
				nieprimy.insert(P);
			}
		}
	}
	
	FOR(i,n) kolor[i]=-1;
	FOR(i,n) if (kolor[i]==-1) dfskolor(i,0);
	int zr=n,uj=n+1;
	init(n+2,zr,uj);
	FOR(i,n)
	{
		if (kolor[i]==0)
		{
			FORE(e,kr[i]) 
			{
				dod_kr(i,*e,INF);
				//DBG(mp(i,*e));
			}
			deg[i]=edges;
			dod_kr(zr,i,C[i]);
		}
		else
		{
			deg[i]=edges;
			dod_kr(i,uj,C[i]);
		}
	}
	ll f=max_flow();
	//DBG(f);
	int nr=0;
	FOR(i,n)
	{
		deg[i]=flow[deg[i]];
		//DBG(deg[i]);
	}
	FOR(i,n)
	{
		if (kolor[i]==0)
		{
			FORE(e,kr[i])
			{
				if (flow[nr])
				{
					macz[i].pb(*e);
					macz[*e].pb(i);
				}
				if (flow[nr]<deg[i]) niemacz[i].pb(*e);
				if (flow[nr]<deg[*e]) niemacz[*e].pb(i);	
				nr+=2;
			}
			nr+=2;
		}
		else nr+=2;
	}
	FOR(kol,2)
	{
		aktkolor=kol;
		FOR(i,n) odw[i]=0;
		FOR(i,n) if (odw[i]==0 && kolor[i]==kol && deg[i]<C[i]) dfs(i);
		FOR(i,n) if (odw[i] && kolor[i]==kol) wygr.pb(i);
	}
	sort(ALL(wygr));
	if (wygr.sz) cout<<"Bran "<<A[wygr[0]];
	else cout<<"Tyrion";
    return 0;
}