import java.io.*;
import java.util.*;

public class Main {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	int ceilDiv(int a, int b) {
		return (a + b - 1) / b;
	}

	boolean test(int mask, int i) {
		return ((mask >> i) & 1) == 1;
	}

	ArrayList<Integer> go(ArrayList<Integer> c, int needPick, int needMod,
			int mod) {
		HashMap<Integer, int[]> memo = new HashMap<Integer, int[]>();
		int h1 = c.size() / 2;
		int h2 = c.size() - h1;

		for (int mask = 0; mask < (1 << h1); mask++) {

			int maskMod = 0;
			for (int i = 0; i < h1; i++)
				if (test(mask, i)) {
					maskMod += c.get(i);
					if (maskMod >= mod)
						maskMod -= mod;
				}

			int maskCnt = Integer.bitCount(mask);
			int[] a = memo.get(maskMod);
			if (a == null) {
				a = new int[h1 + 1];
				memo.put(maskMod, a);
				Arrays.fill(a, -1);
			}

			a[maskCnt] = mask;
		}

		for (int mask = 0; mask < (1 << h2); mask++) {

			int maskMod = 0;
			for (int i = 0; i < h2; i++)
				if (test(mask, i)) {
					maskMod += c.get(h1 + i);
					if (maskMod >= mod)
						maskMod -= mod;
				}

			int maskCnt = Integer.bitCount(mask);
			int needMaskCnt = needPick - maskCnt;
			if (needMaskCnt < 0 || needMaskCnt > h1)
				continue;
			int needMaskMod = needMod - maskMod;
			if (needMaskMod < 0)
				needMaskMod += mod;
			int[] a = memo.get(needMaskMod);
			if (a == null || a[needMaskCnt] == -1)
				continue;

			int mask1 = a[needMaskCnt];

			ArrayList<Integer> res = new ArrayList<Integer>();
			for (int i = 0; i < h1; i++)
				if (test(mask1, i))
					res.add(c.get(i));
			for (int i = 0; i < h2; i++)
				if (test(mask, i))
					res.add(c.get(h1 + i));
			return res;
		}
		return null;
	}

	void solve() throws IOException {
		int n = nextInt();
		int mod = nextInt();
		int k = nextInt();

		HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();
		for (int i = 0; i < n; i++) {
			int x = nextInt();
			int key = x % mod;
			ArrayList<Integer> al = map.get(key);
			if (al == null) {
				al = new ArrayList<Integer>();
				map.put(key, al);
			}
			al.add(x);
		}
		if (map.size() > k) {
			out.println(-1);
			return;
		}

		ArrayList<Integer> bucket = new ArrayList<Integer>();

		ArrayList<Integer> c = new ArrayList<Integer>();

		int p = n / k;
		int needMod = 0;
		for (Map.Entry<Integer, ArrayList<Integer>> e : map.entrySet()) {
			int low = ceilDiv(e.getValue().size(), p + 1);
			int high = e.getValue().size() / p;
			for (int i = 0; i < high; i++)
				(i < low ? bucket : c).add(e.getKey());
			needMod -= (int) ((long) e.getKey() * low % mod);
			if (needMod < 0)
				needMod += mod;
		}

		int needPick = k - bucket.size();
		ArrayList<Integer> add = go(c, needPick, needMod, mod);
		
		if (add == null) {
			out.println(-1);
			return;
		}
		bucket.addAll(add);
		
		//System.err.println(bucket);

		HashMap<Integer, Integer> cols = new HashMap<Integer, Integer>();
		for (int i = 0; i < bucket.size(); i++) {
			int val = bucket.get(i);
			Integer prev = cols.get(val);
			if (prev == null)
				prev = 0;
			cols.put(val, prev + 1);
		}

		HashMap<Integer, Integer> first = new HashMap<Integer, Integer>();
		HashMap<Integer, Integer> last = new HashMap<Integer, Integer>();

		for (Map.Entry<Integer, ArrayList<Integer>> e : map.entrySet()) {
			int total = e.getValue().size();
			Integer have = cols.get(e.getKey());
			if (have == null)
				have = 0;
			if (total - have * p > have) {
				out.println(-1);
				return;
			} else {
				int bigCols = total - have * p;
				first.put(e.getKey(), bigCols);
				last.put(e.getKey(), have - bigCols);
			}
		}

		int[] ans = new int[n];
		int curCol = 0;
		
//		System.err.println(first);
//		System.err.println(last);

		for (Map.Entry<Integer, Integer> e : first.entrySet()) {
			int rem = e.getKey();
			int cnt = e.getValue();
			ArrayList<Integer> nums = map.get(rem);
			for (int i = 0; i < cnt; i++, curCol++) {
				for (int j = curCol; j < n; j += k) {
					ans[j] = nums.remove(nums.size() - 1);
				}
			}
		}

		for (Map.Entry<Integer, Integer> e : last.entrySet()) {
			int rem = e.getKey();
			int cnt = e.getValue();
			ArrayList<Integer> nums = map.get(rem);
			for (int i = 0; i < cnt; i++, curCol++) {
				for (int j = curCol; j < n; j += k) {
					ans[j] = nums.remove(nums.size() - 1);
				}
			}
		}

		for (int i = 0; i < n; i++)
			out.print(ans[i] + " ");
		out.println();
	}

	void inp() throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter(System.out);
		int t = nextInt();
		while (t-- > 0)
			solve();
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new Main().inp();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
