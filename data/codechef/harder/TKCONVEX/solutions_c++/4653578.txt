#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cstdlib>
#include <map>

using namespace std;

typedef long long ll;
const ll INF = 1e15;

map<ll, ll> L[22];
void test(vector<pair<ll, ll> > V, pair<ll, ll> A, pair<ll, ll> B)
{
	ll N = V.size() / 2;
	//cout << "A=" << A.first << " B=" << B.first << endl;
	//cout << "L: "; for(ll i = 0; i < N; i++) cout << V[i].first << ' '; cout << endl;
	//cout << "R: "; for(ll i = 0; i < N; i++) cout << V[N + i].first << ' '; cout << endl;

	for(int i = 0; i < 22; i++) L[i].clear();
	ll total_l = 0, total_r = 0;
	for(ll i = 0; i < N; i++) total_l += V[i].first;
	for(ll i = N; i < 2 * N; i++) total_r += V[i].first;
	for(ll b = 0; b < (1 << N); b++)
	{
		ll sum_l = 0;
		int cnt = 0;
		for(ll i = 0; i < N; i++)
		{
			if(b & (1 << i))
			{
				sum_l += V[i].first;
				cnt++;
			}
		}
		L[cnt][sum_l] = b;
	}
	for(ll b_r = 0; b_r < (1 << N); b_r++)
	{
		ll A_r = 0;
		int cnt = 0;
		for(ll i = 0; i < N; i++)
			if(b_r & (1 << i))
			{
				A_r += V[N + i].first;
				cnt++;
			}
		map<ll, ll>::iterator best = L[N - cnt].upper_bound(A.first - A_r);
		if(best != L[N - cnt].end())
		{
			ll A_l = best->first;
			//cout << "A_l=" << A_l << " A_r=" << A_r << endl;
			ll B_l = total_l - A_l;
			ll B_r = total_r - A_r;
			if(B_l + B_r > B.first)
			{
				//cout << "B_l=" << B_l << " B_r=" << B_r << endl;
				cout << "Yes\n";
				ll b_l = best->second;
				for(ll i = 0; i < N; i++)
					if(b_l & (1 << i)) cout << V[i].second << ' ';
				for(ll i = 0; i < N; i++)
					if(b_r & (1 << i)) cout << V[N + i].second << ' ';
				cout << A.second << ' ';
				for(ll i = 0; i < N; i++)
					if(!(b_l & (1 << i))) cout << V[i].second << ' ';
				for(ll i = 0; i < N; i++)
					if(!(b_r & (1 << i))) cout << V[N + i].second << ' ';
				cout << B.second << endl;
				exit(0);
			}
		}
	}
}

ll N, K;
pair<ll, ll> A[1050];

int main()
{
	cin >> N >> K;
	for(ll i = 1; i <= N; i++)
	{
		cin >> A[i].first;
		A[i].second = i;
	}
	sort(A + 1, A + 1 + N);
	for(ll A_i = K; A_i <= N; A_i++)
	{
		for(ll B_i = max(A_i + 1, 2 * K); B_i <= N; B_i++)
		{
			if(B_i - A_i >= K)
			{
				ll sum_A = 0, sum_B = 0;
				for(ll i = 1; i < K; i++) sum_A += A[A_i - i].first;
				for(ll i = 1; i < K; i++) sum_B += A[B_i - i].first;
				if(sum_A > A[A_i].first && sum_B > A[B_i].first)
				{
					cout << "Yes\n";
					for(ll i = 0; i < K; i++) cout << A[A_i - i].second << ' ';
					for(ll i = 0; i < K; i++) cout << A[B_i - i].second << ' ';
					return 0;
				}
			}
			else
			{
				vector<pair<ll, ll> > V;
				pair<ll, ll> a = A[A_i];
				pair<ll, ll> b = A[B_i];
				a.first += (K - 1) * INF;
				b.first += (K - 1) * INF;
				for(ll i = 1; i < 2 * K; i++)
				{
					if(B_i - i > A_i)
					{
						V.push_back(make_pair(A[B_i - i].first, A[B_i - i].second));
						b.first -= INF;
					}
					else if(B_i - i < A_i)
					{
						V.push_back(make_pair(A[B_i - i].first + INF, A[B_i - i].second));
					}
				}
				test(V, a, b);
			}
		}
	}
	cout << "No\n";
}
