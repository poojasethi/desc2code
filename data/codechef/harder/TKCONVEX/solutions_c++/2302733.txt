#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;
#define int_max 200000000000

#define LL long long
#define mp make_pair
#define pb push_back
#define mod 1000000007

int n, k;
pair<int, int> a[1001];
LL sum[1001][1001];
int arr[1001];

// function to return all desired positions of arr, if ans is empty, then not exist.
vector<int> compute(int lim, int S, int num)
{
	vector<int> ans;
	if(sum[lim-num+1][lim]<=S)
		return ans;

	for(int pos=lim; pos>=0  ;pos--)
	{
		if(num==0)
			break;
		if(num==pos+1)
		{
			for(int i=0; i<=pos; i++)
				ans.pb(i);
			break;
		}

		if(sum[pos-num][pos-1]<=S)
		{
			S=S-arr[pos];
			ans.pb(pos);
			num--;
		}
	}
	return ans;
}

int main()
{
	cin>> n>> k;
	for(int i=0; i<n; i++)
	{
		cin>> a[i].first;
		a[i].second=i+1;
	}
	sort(a, a+n);
	for(int i=0; i<n; i++)
		arr[i]=a[i].first;

	for(int i=0; i<n; i++)
		sum[i][i]=arr[i];

	for(int i=1; i<n; i++)
	{
		for(int j=0; j<n-i; j++)
			sum[j][j+i]=sum[j][j+i-1]+arr[j+i];
	}
	//----------------------------------------------
	/*
	int q;
	cin>> q;
	while(q--)
	{
		int lim, s, num;
		cin>> lim>> s>> num;
		vector<int> v=compute(lim, s, num);
		for(int i=0; i<v.size(); i++)
			cout << v[i]<< " ";
		cout << endl;
	}
	*/
	int flag=0;
	vector<int> ans1;
	for(int pos=k-1; pos<n ; pos++)
	{
		//cout << pos<<endl;
		int S=arr[pos];
		ans1=compute(pos-1, S, k-1);
		if(ans1.size()==0)
			continue;
		else{
			ans1.pb(pos);
			break;
		}
	}
	if(ans1.size()==0)
	{
		cout << "No"<< endl;
		return 0;
	}
	vector<int> pos1, pos2;
	map<int, int> mm;
	for(int i=0; i<ans1.size(); i++)
	{
		mm[a[ans1[i] ].second]=1;
		pos1.pb( a[ans1[i] ].second );
	}
	vector<pair<int, int> > b;
	for(int i=0; i<n; i++)
	{
		if(mm[a[i].second]==1)
			continue;
		b.pb(a[i]);
	}
	n=b.size();
	for(int i=0; i<n; i++)
		arr[i]=b[i].first;

	memset(sum, 0, sizeof(sum));
	for(int i=0; i<n; i++)
		sum[i][i]=arr[i];
	for(int i=1; i<n; i++)
		for(int j=0; j<n-i; j++)
			sum[j][j+i]=sum[j][j+i-1]+arr[j+i];


	flag=0;
	vector<int> ans2;
	for(int pos=k-1; pos<n ; pos++)
	{
		//cout << pos<<endl;
		int S=arr[pos];
		ans2=compute(pos-1, S, k-1);
		if(ans2.size()==0)
			continue;
		else{
			ans2.pb(pos);
			break;
		}
	}
	if(ans2.size()==0)
	{
		cout << "No"<< endl;
		return 0;
	}
	for(int i=0; i<ans2.size(); i++)
	{
		pos2.pb( b[ans2[i] ].second );
	}


	sort(pos1.begin(), pos1.end());
	sort(pos2.begin(), pos2.end());

	cout << "Yes"<<endl;
	for(int i=0; i<pos1.size(); i++)
		cout << pos1[i]<< " ";
	for(int i=0; i<pos2.size(); i++)
		cout << pos2[i]<< " ";
	cout << endl;

	return 0;
}
