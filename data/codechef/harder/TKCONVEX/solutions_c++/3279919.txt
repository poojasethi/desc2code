//#undef _GLIBCXX_DEBUG

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <valarray>
#include <vector>

using namespace std;

#define foreach(iter,cont) for(typeof((cont).begin()) iter = (cont).begin(); iter != (cont).end(); ++iter)
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define inf 1000000008
#define eps 1.0e-10L
#define divisible(a, b) (((a) / (b)) * (b) == (a))
static const long long p = 1000000007;
__attribute__((unused)) static bool eq(long double a, long double b)  { return (a == b ? true : (a * b == 0 ? abs(a - b) < eps : abs(a - b) / (abs(a) + abs(b)) < eps));  }
__attribute__((unused)) static long long modp(long long n, long long m) { long long r = n % m; return r >= 0 ? r : r + m; }
__attribute__((unused)) static long long gcd(long long a, long long b) { return (a < 0 ? gcd(-a, b) : (b < 0 ? gcd(a, -b) : (!a && !b ? 1 : (b ? gcd(b, a % b) : a)))); }
template<class T> static int len(const T& cont) { return (int) cont.size(); }

// BEGIN CUT HERE
template<class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) { return os << "(" << p.first << ", " << p.second << ")"; }
template<class T> ostream &operator<<(ostream& os, const vector<T> &vec) { os << "[ "; for(size_t i = 0; i < vec.size(); i++) { os << vec[i]; if(i != vec.size() - 1) { os << ", "; } } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const list<T> &l) { os << "[ "; bool first = true; for(typename list<T>::const_iterator lstIt = l.begin(); lstIt != l.end(); ++lstIt) { if(!first) { os << ", "; } first = false; os << *lstIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const deque<T> &d) { os << "[ "; bool first = true; for(typename deque<T>::const_iterator dIt = d.begin(); dIt != d.end(); ++dIt) { if(!first) { os << ", "; } first = false; os << *dIt; } return os << " ]"; }
template<class T> ostream &operator<<(ostream& os, const vector<vector<T> > &mat) { for(size_t i = 0; i < mat.size(); i++) { if(i) os << endl; os << mat[i]; } return os; }
template<class T> ostream &operator<<(ostream &os, const set<T> &s) { os << "{ "; bool first = true; for(typename set<T>::const_iterator setIt = s.begin(); setIt != s.end(); ++setIt) { if(!first) { os << ", "; } first = false; os << *setIt; } return os << " }"; }
template<class T, class U> ostream &operator<<(ostream &os, const map<T, U> &m) { os << "{ "; bool first = true; for(typename map<T, U>::const_iterator mapIt = m.begin(); mapIt != m.end(); ++mapIt) { if(!first) { os << ", "; } first = false; os << mapIt->first << " = " << mapIt->second; } return os << " }"; }
// END CUT HERE

int countBits(int num) {
	int cnt = 0;
	while(num) {
		cnt++;
		num = num - (num & -num);
	}
	return cnt;
}

void printBm(int bm) {
	int curBit = 1;
	int curPos = 0;
	bool printed = false;
	while(curBit <= bm) {
		if(bm & curBit) {
			if(printed) {
				cout << ", ";
			}
			cout << curPos;
			printed = true;
		}
		curPos++;
		curBit *= 2;
	}
}

int n, k, choice[20];
vector<pair<long long, int> > lengths;
vector<bool> used;

int main(__attribute__((unused)) int argc, __attribute__((unused)) char **argv) {
	while(scanf("%d %d", &n, &k) == 2) {
		lengths.resize(n);
		for(int i = 0; i < n; i++) {
			long long length;
			scanf("%lld", &length);
			lengths[i] = make_pair(length, i + 1);
		}

		sort(lengths.begin(), lengths.end());

		vector<int> bms;
		for(int bm = 0; bm < (1 << 2 * k); bm++) {
			if(countBits(bm) == k) {
				bms.push_back(bm);
			}
		}

		bool done = false;
		for(int start = 0; !done && start < n; start++) {
			for(int curBm = 0; !done && curBm < len(bms); curBm++) {
				int pos = 0;
				long long sum1 = 0, max1 = 0;
				used.assign(1000, false);

				bool valid = true;
				for(int i = 0; i < 2 * k; i++) {
					if(bms[curBm] & (1 << i)) {
						int idx = start + i;
						if(idx >= n) {
							valid = false;
							break;
						}
						sum1 += lengths[idx].first;
						max1 = lengths[idx].first;
						used[idx] = true;
						choice[pos++] = lengths[idx].second;
					}
				}

				if(!valid) {
					continue;
				}

				if(sum1 - max1 > max1) {
					for(int start2 = 0; !done && start2 < n; start2++) {
						long long sum2 = 0, max2 = 0;
						pos = k;

						for(int i = start2; i < n && pos < 2 * k; i++) {
							if(!used[i]) {
								sum2 += lengths[i].first;
								max2 = lengths[i].first;
								choice[pos++] = lengths[i].second;
							}
						}

						if(pos == 2 * k && sum2 - max2 > max2) {
							done = true;
						}
					}
				}
			}
		}

		if(done) {
			printf("Yes\n");
			for(int i = 0; i < 2 * k; i++) {
				if(i) {
					printf(" ");
				}
				printf("%d", choice[i]);
			}
			printf("\n");
		} else {
			printf("No\n");
		}
	}

	return 0;
}
