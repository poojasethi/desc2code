#include<iostream>
#include<set>
#include<vector>
#include<algorithm>
using namespace std;

#define LL long long
#define pb push_back
#define ins insert


LL length [1005];
LL BIT [1005];
pair <LL, int> pp [1005];
int n, k;
vector <LL> solna;
vector <LL> solnb;

LL SUM(int i, int j){
    return (BIT[j+1] - BIT[i]);
}
bool bitFind (LL arr [], int sz, LL minVal, LL maxVal, int nums){
    int i;
    for (i=0;i<(1<<sz);++i){
        LL curSum = 0;
        int num = 0;
        for (int j=0;j<sz;++j){
            if ((i & (1<<j)) > 0 ){
                curSum += arr[j];
                num++;
            }
        }
        if ((curSum >= minVal) && (curSum <= maxVal) && (num == nums)){
            break;
        }
    }
    
    if (i==((1<<sz))){
        return 0;
    }
    else {
        for (int j=0;j<sz;++j){
            if ((i & (1<<j)) > 0 ){
                solna.pb (j);
            }
            else solnb.pb (j);
        }
        return 1;
    }
}


bool isPossible (int a, int b){
    LL arr [25];
    int backInd [25];
    int sz = 0;
    //if (SUM (b - (2*k - 1),b) > 2* (length[a] + length[b]))return 0;
    LL minVal = length[a] + 1;
    LL maxVal = SUM (b - (2*k - 1),b) - ((length[a] + length[b]) + (length[b] + 1));
    for (int i=b-(2*k - 1);i<b;++i){
        if (i==a)continue;
        backInd [sz] = pp[i].second;
        arr[sz++] = length[i] ;
    }
    if (bitFind (arr, sz, minVal, maxVal, k-1)){
        for (int i=0;i<(k-1);++i)solna[i] = backInd [solna[i]];
        for (int i=0;i<(k-1);++i)solnb[i] = backInd [solnb[i]];
        return 1;
    }
    return 0;
}


int main (){
    cin>>n>>k;
    BIT [0] = 0;
    for (int i=0;i<n;++i){
        cin>>pp[i].first;pp[i].second=i+1;
    }
    sort (pp, pp+n);
    for (int i=0;i<n;++i){
        length[i] = pp[i].first;
        BIT[i+1] = BIT[i] + length[i];
    }
    
    int minacc = -1;int maxacc = -1;
    for (int i=k-1;i<n-1;++i){
        if ((SUM (i - (k-1), i - 1)) > length[i]){minacc = i;break;}
    }
    for (int i=n-1;i>=(2*k)-1;--i){
        if ((SUM (i - (k-1), i - 1)) > length[i]){maxacc = i;break;}
    }
    
    if ((minacc == -1) || (maxacc == -1)){
        cout<<"No\n";
    }
    else if (minacc <= maxacc - k){
        cout<<"Yes\n";
        for (int i=minacc - (k-1);i<=minacc ; ++i){
            cout<<pp[i].second<<" ";
        }
        for (int i=maxacc - (k-1);i<=maxacc ; ++i){
            cout<<pp[i].second<<" ";
        }
    }
    else {
        for (int i=minacc;i<maxacc;++i){
            for (int j=max (i+1, (2*k)-1);j<=maxacc;++j){
                if (isPossible (i, j)){
                    cout<<"Yes\n";
                    for (int k=0;k<solna.size();++k){
                        cout<<solna[k]<<" ";
                    }
                    cout<<pp[i].second<<" ";
                    for (int k=0;k<solnb.size();++k){
                        cout<<solnb[k]<<" ";
                    }
                    cout<<pp[j].second<<" ";
                    return 0;
                }
            }
        }
        cout<<"No\n";
    }
    return 0;
}
