#include<iostream>
#include<set>
#include<vector>
#include<algorithm>
using namespace std;

#define LL long long
#define pb push_back
#define ins insert


LL length [1005];
LL BIT [1005];
pair <LL, int> pp [1005];
int n, k;
set <LL> soln;

LL SUM(int i, int j){
    return (BIT[j+1] - BIT[i]);
}

bool bitFind (int curSel, LL curVal, int sz, LL minVal, LL maxVal, int sel, int backInd [], int minInd) {
    if (sel == curSel){
        if ((curVal >= minVal) && (curVal <= maxVal))
            return 1;
        else return 0;
    }
    else {
        for (int ind = minInd ; ind < sz - ((sel - curSel)-1); ++ind ){
            curSel ++;
            curVal += length [backInd [ind]];
            if (bitFind (curSel, curVal, sz, minVal, maxVal, sel, backInd, ind + 1)){
                soln.ins (backInd [ind]);
                return 1;
            }
            else {
                curSel --;
                curVal -= length [backInd [ind]];
            }
        }
    }
    return 0;
}

bool isPossible (int a, int b){
    int backInd [25];
    int sz = 0;
    //if (SUM (b - (2*k - 1),b) > 2* (length[a] + length[b]))return 0;
    LL minVal = length[a] + 1;
    LL maxVal = SUM (b - (2*k - 1),b) - ((length[a] + length[b]) + (length[b] + 1));
    for (int i=b-(2*k - 1);i<b;++i){
        if (i==a)continue;
        backInd [sz++] = i;
    }
    if (bitFind (0, 0, sz, minVal, maxVal, k-1, backInd, 0)){
        return 1;
    }
    return 0;
}


int main (){
    cin>>n>>k;
    BIT [0] = 0;
    for (int i=0;i<n;++i){
        cin>>pp[i].first;pp[i].second=i+1;
    }
    sort (pp, pp+n);
    for (int i=0;i<n;++i){
        length[i] = pp[i].first;
        BIT[i+1] = BIT[i] + length[i];
    }
    
    int minacc = -1;int maxacc = -1;
    for (int i=k-1;i<n-1;++i){
        if ((SUM (i - (k-1), i - 1)) > length[i]){minacc = i;break;}
    }
    for (int i=n-1;i>=(2*k)-1;--i){
        if ((SUM (i - (k-1), i - 1)) > length[i]){maxacc = i;break;}
    }
    
    if ((minacc == -1) || (maxacc == -1)){
        cout<<"No\n";
    }
    else if (minacc <= maxacc - k){
        cout<<"Yes\n";
        for (int i=minacc - (k-1);i<=minacc ; ++i){
            cout<<pp[i].second<<" ";
        }
        for (int i=maxacc - (k-1);i<=maxacc ; ++i){
            cout<<pp[i].second<<" ";
        }
    }
    else {
        for (int i=minacc;i<maxacc;++i){
            for (int j=max (i+1, (2*k)-1);j<=maxacc;++j){
                if (isPossible (i, j)){
                    cout<<"Yes\n";
                    for (int it = j - (2*k - 1) ; it <= j ; ++it){
                        if (soln.find (it)!= soln.end())cout<<pp[it].second<<" ";
                    }
                    cout<<pp[i].second<<" ";
                    for (int it = j - (2*k - 1) ; it <= j ; ++it){
                        if (it == i) continue;
                        if (soln.find (it)== soln.end())cout<<pp[it].second<<" ";
                    }
                    return 0;
                }
            }
        }
        cout<<"No\n";
    }
    return 0;
}
