#include<iostream>
#include<algorithm>
#include<set>
#include<vector>
using namespace std;


#define LL long long
#define VI set <int>
#define VPII vector < pair <long long, long long> >
#define pb insert

int n(0), k(0);
LL length [1005] = {0};
LL preSum [1005] = {0};
VI soln;


int find_if_possible (int minInd, int maxInd, LL minVal, LL maxVal, int curSelection, LL curSum){
    if ((k-1)==curSelection){
        if ((curSum >=minVal) && (curSum <=maxVal))return 1;
        else return 0;
    }
    
    for (int ind = minInd; ind < ((maxInd+2) - (((k-1)-curSelection)));++ ind){
        curSelection ++;
        curSum += length[ind];
        if (find_if_possible (ind + 1, maxInd, minVal, maxVal, curSelection, curSum)){
            soln.pb (ind);
            return 1;
        }
        else {
            curSelection --;
            curSum -= length[ind];
        }
    }
    return 0;
}


bool check_if_possible (int i, int j){
    LL sum_ = preSum[j] - (preSum[j-(2*k - 1)] + length[i]);
    LL minVal = length[i]+1;LL maxVal = sum_ - (length[j]+1);
    return find_if_possible (j-(2*k - 1), i-1, minVal, maxVal, 0, 0);
}


int main (){
    cin>>n>>k;
    VPII pp;
    pp.resize (n);
    for (int i=0;i<n;++i){
        cin>>pp[i].first;pp[i].second = i;
    }
    sort (pp.begin(), pp.end());
    for (int i=0;i<n;++i){
        length[i] = pp[i].first;
    }
    
    preSum[0]= 0;
    for (int i=1;i<n;++i){
        preSum [i] = preSum[i-1] + length[i-1];
    }
    preSum[n] = preSum[n-1] + length[n-1];
    
    int i, j;
    
    int minacc = -1;
    int maxacc = -1;
    for (i=k-1;i<(n-1);++i){
        if ((preSum [i] - preSum[i-(k-1)]) > length[i]){minacc = i;break;}
    }
    for (i=n-1;i>=(2*k)-1;--i){
        if ((preSum [i] - preSum[i-(k-1)]) > length[i]){maxacc = i;break;}
    }
    if ((minacc == -1) || (maxacc == -1)){
        cout<<"No";
        return 0;
    }
    else if (minacc <= (maxacc-k)){
        cout<<"Yes\n";
        for (i=minacc - (k-1);i<=minacc;++i){
            cout<<pp[i].second + 1<<" ";
        }
        for (i=maxacc - (k-1);i<=maxacc;++i){
            cout<<pp[i].second + 1<<" ";
        }
    }
    else {
        for (int i=minacc;i<maxacc;++i){
            for (int j=max(i+1,(2*k) - 1); j<=maxacc ;++j){
                if (check_if_possible(i,j)){
                    cout<<"Yes\n";
                    for (int it = j - (2 * k - 1) ; it <= j ; ++ it){
                        if (soln.find (it) != soln.end())cout<<pp[it].second + 1<<" ";
                    }
                    cout<<pp[i].second + 1<<" ";
                    for (int it = j - (2 * k - 1) ; it <= j ; ++ it){
                        if (it == i)continue;
                        if (soln.find (it) == soln.end())cout<<pp[it].second + 1<<" ";
                    }
                    return 0;
                }
            }
        }
        cout<<"No\n";
        return 0;
    }
    
}
