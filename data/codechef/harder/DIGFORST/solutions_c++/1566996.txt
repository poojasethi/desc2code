#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;

#define INF ((int)(1e9))

int n, a[105], b[105][105];

int d[105][32][420];

bool v[105][32][420];

struct node {
    int i, j, k, d;
    bool operator < (const node &t) const {
        return d > t.d;
    }
}temp;

priority_queue<node> pq;

int f(int z) {
    switch (z) {
        case 1: return 0;
        case 2: return 1;
        case 3: return 2;
        case 4: return 4;
        case 5: return 8;
        case 6: return 3;
        case 7: return 16;
    }
}

bool check(int x, int y, int z) {
    if (x != n-1) return false;
    for (int i=0; i<5; ++i) 
        if ((y&(1<<i)) && (z%(i<4?i+2:7)!=0))
            return false;
    return true;
}

int dij() {
    while(! pq.empty()) pq.pop();
    for (int i=0; i<n; ++i) 
        for (int j=0; j<32; ++j) 
            for (int k=0; k<420; ++k)
                d[i][j][k] = INF;
    memset(v, true, sizeof(v));
    d[0][0|f(a[0])][a[0]%420] = a[0];
    temp.i = 0;
    temp.j = 0|f(a[0]);
    temp.k = a[0]%420;
    temp.d = a[0];
    pq.push(temp);
    while (! pq.empty()) {
        temp = pq.top();
        pq.pop();
        int x = temp.i, y = temp.j, z = temp.k;
        if (v[x][y][z]) {
            v[x][y][z] = false;
            if (check(x, y, z)) return d[x][y][z];
            for (int i=0; i<n; ++i) {
                if (b[x][i]) {
                    int X = i, Y = y|f(a[i]), Z = (z*10+a[i])%420;
                    if (d[x][y][z] + a[i] < d[X][Y][Z]) {
                        d[X][Y][Z] = d[x][y][z] + a[i];
                        temp.i = X;
                        temp.j = Y;
                        temp.k = Z;
                        temp.d = d[X][Y][Z];
                        pq.push(temp);
                    }
                }
            }
        }
    }
    return -1;
}

int main() {
    while (1) {
        scanf("%d", &n);
        if (n == 0) break;
        for (int i=0; i<n; ++i) {
            scanf("%d", &a[i]);
        }
        for (int i=0; i<n; ++i) {
            for (int j=0; j<n; ++j) {
                scanf("%d", &b[i][j]);
            }
        }
        printf("%d\n", dij());
    }
    return 0;
}
