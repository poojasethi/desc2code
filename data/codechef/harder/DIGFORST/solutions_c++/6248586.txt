/*
    name 	:- rajat sharrma
    college :- geca
    moto 	:- sometimes i feel like giving up then i remember
                i have a lot of motherfu*ckers to prove wrong!
*/
#include <bits/stdc++.h>
#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

using namespace std;

typedef long long LL;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<string> vs;

// Basic maarr2os
#define st          first
#define se          second
#define all(x)      (x).begin(), (x).end()
#define ini(a, v)   memset(a, v, sizeof(a))
#define re(i,s,n)  	for(int i=s;i<(n);++i)
#define rep(i,s,n)  for(int i=s;i<=(n);++i)
#define fr(i,n)     re(i,0,n)
#define repv(i,f,t) for(int i = f; i >= t; --i)
#define rev(i,f,t)  repv(i,f - 1,t)
#define frv(i,n)    rev(i,n,0)
#define pu          push_back
#define mp          make_pair
#define sz(x)       (int)(x.size())
#define s(x) scanf("%d",&x)
#define i64 long long
#define gc() getchar()
inline i64 readLLD()
{
    i64 ret=0;
    bool negg=false;
    char c;
    c=gc();
    while((c<'0' || c>'9') && c!='-')
    {
        //scanf("%c",&c);
        c=gc();
    }
    if(c=='-'){negg=true;c=gc();}
    while(c>='0' && c<='9')
    {
        ret=ret*10+(c-'0');
        c=gc();
    }
    if(negg){ret=-ret;}
    return ret;
}//=readLLD();
inline int readInt()
{
    int ret=0;
    bool negg=false;
    char c;
    c=gc();
    while((c<'0' || c>'9') && c!='-')
    {
        c=gc();
    }
    if(c=='-')
    {
        negg=true;
        c=gc();
    }
    while(c>='0' && c<='9')
    {
        ret=ret*10+(c-'0');
        c=gc();
    }
    if(negg)
    {
        ret=-ret;
    }
    return ret;
}//=readInt();
const int MAXn=100+10;
const int INF=1e9;
bool mark[1000000];
int dist[1000000];
int am[MAXn][MAXn];
int digit[MAXn];
int n;
 
bool ok[8];
int gcd(int a, int b) { return b==0?a:gcd(b,a%b); }
int lcm(int a, int b) { return a*b/gcd(a,b); }
 
int dijkstra()
{
	if(!ok[digit[0]]) return INF;
	int x=1;
	for(int i=1;i<=7;i++)
		if(ok[i])x=lcm(x,i);
	
	fr(i,n*x) mark[i]=false,dist[i]=INF;
	set<pii> st;
	st.insert(pii(0,n*(digit[0]%x)));
	dist[n*(digit[0]%x)]=digit[0];
	for(int _=0; _<60 && !st.empty(); _++)
	{
		pii p=*st.begin();
		st.erase(st.begin());
		int v=p.second%n,m=p.second/n;
		fr(i,n)
		{
			if(am[v][i]&&ok[digit[i]])
			{
				int nm=(m*10+digit[i])%x;
				int nn=nm*n+i;
				int nd=dist[p.second]+digit[i];
				if(dist[nn]>nd)
				{
					if(dist[nn]!=INF) st.erase(pii(dist[nn],nn));
					dist[nn]=nd;
					st.insert(pii(dist[nn],nn));
					if(i==n-1&&nm==0)
					{
						return dist[nn];
					}
				}
			}
		}
	}
	return INF;
}
int main()
{
	while(true)
	{
		n=readInt();
		if(n==0) break;
		fr(i,n)digit[i]=readInt();
		
		fr(i,n)
			fr(j,n)
				am[i][j]=readInt();
		if(n==1)
		{
			printf("%d\n",digit[0]);
			continue;
		}
		int mn=INF;
		fr(i,(1<<7))
		{
			fr(j,7)
				ok[j+1]=i&(1<<j);
			mn=min(mn,dijkstra());
		}
		if(mn==INF)
			printf("-1\n");
		else
			printf("%d\n",mn);
	}
}