#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#define x first
#define y second

using namespace std;

typedef pair<int,int> ii;
typedef pair<ii,ii> pi;

int n, cnt;
int c[105];
int d[105][65][425];
vector<int> a[105];
int sign[105][65][425];
priority_queue<pi, vector<pi>, greater<pi> > p;

int main(){
    int i, j, k;
    bool have;
    while(scanf("%d", &n)){
        if(n==0) break;
        cnt++; have= false;
        for(i=1;i<=n;i++) scanf("%d", &c[i]);
        for(i=1;i<=n;i++){
            for(j=1;j<=n;j++){
                int x;
                scanf("%d", &x);
                if(x==1) a[i].push_back(j);
            }
        }
        //
        if(c[1]>1) p.push(pi(ii(c[1],1),ii(1<<(c[1]-2),c[1])));
        else p.push(pi(ii(c[1],1),ii(0,c[1])));
        for(i=1;i<=n;i++){
            for(j=0;j<(1<<6);j++){
                for(k=0;k<420;k++){
                    d[i][j][k]= 1000000000;
                }
            }
        }
        if(c[1]>1) d[1][1<<(c[1]-2)][c[1]]= c[1];
        else d[1][0][c[1]]= c[1];

        while(!p.empty()){
            pi t= p.top(); p.pop();
            int x= t.x.y, y= t.y.x, z= t.y.y;
            if(sign[x][y][z]==cnt) continue;
            sign[x][y][z]= cnt;

            if(x==n){
                for(i=2;i<=7;i++){
                    if((y&(1<<(i-2)))!=0 && z%i!=0) break;
                }
                if(i==8){
                    printf("%d\n", d[x][y][z]);
                    have= true;
                    break;
                }
            }

            for(i=0;i<a[x].size();i++){
                int xx= a[x][i], yy, zz= (z*10+c[xx])%420;
                if(c[xx]>1) yy= (y|(1<<(c[xx]-2)));
                else yy= y;
                if(sign[xx][yy][zz]==cnt) continue;
                if(d[xx][yy][zz]>d[x][y][z]+c[xx]){
                    d[xx][yy][zz]= d[x][y][z]+c[xx];
                    p.push(pi(ii(d[xx][yy][zz],xx),ii(yy,zz)));
                }
            }
        }

        if(!have) printf("-1\n");
        //
        while(!p.empty()) p.pop();
        for(i=1;i<=n;i++) a[i].clear();
    }
    return 0;
}
