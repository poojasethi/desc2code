#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#define MAX 200

using namespace std;

typedef long long Int;

int n , d;
Int dis[ MAX ][ MAX ];
int InTree[ MAX ][ MAX ];
int seen[ MAX ];
Int mc[ MAX ];
Int mw[ MAX ][ MAX ];

vector< int > adj[ MAX ];
Int max_we( int , int );

void dfs( int root ){
	seen[ root ] = true;
	InTree[ root ][ root ] = 1;
	for( int i = 0 ; i < adj[ root ].size() ; i++ ){
		int v = adj[ root ][ i ];
		if( seen[ v ] ) continue ;
		InTree[ root ][ v ] = 1; 
		dfs( v );
	}
}

Int max_center( int root ){
	Int & ans = mc[ root ];
	if( ans != -1 ) return ans;
	ans = 0;
	for( int i = 0 ; i < n ; i++ ){
		if( not InTree[ root ][ i ] ) continue;
		if( dis[ root ][ i ] > d ) continue;
		ans = max( ans , max_we( root , i ) );
	}
	return ans;
}

Int max_we( int root , int center ){
	Int & ans = mw[ root ][ center ];
	if( ans != -1 ) return ans;
	ans = 0;
	for( int i = 0 ; i < adj[ root ].size() ; i++ ){
		int v = adj[ root ][ i ];
		if( not InTree[ root ][ v ] ) continue;
		if( dis[ center ][ v ] > d ) 
			ans += max_center( v );
		else	
			ans += max( max_center( v ) , max_we( v , center ) + dis[ root ][ v ] );
	}
	return ans;
}


int main(){
	int test , u , v , we;
	scanf( "%d" , &test );
	while( test-- ){
		scanf( "%d%d" , &n , &d );
		for( int i = 0 ; i < n ; i++ ){
			adj[ i ].clear();
			for( int j = 0 ; j < n ; j++ ) dis[ i ][ j ] = 1LL<<40;
			dis[ i ][ i ] = 0;
		}
		memset( InTree , 0 , sizeof InTree );
		memset( seen , 0 , sizeof seen );
		memset( mc , -1 , sizeof mc );
		memset( mw , -1 , sizeof mw );
		for( int i = 0 ; i < n - 1 ; i++ ){
			scanf( "%d%d%d" , &u , &v , &we );
			dis[ u ][ v ] = we;
			dis[ v ][ u ] = we;
			adj[ v ].push_back( u );
			adj[ u ].push_back( v );
		}
		dfs( 0 );
		for( int k = 0 ; k < n ; k++ ){
			for( int i = 0 ; i < n ; i++ ){
				for( int j = 0 ; j < n ; j++ ){
					if( i == j ) continue;
					dis[ i ][ j ] = min( dis[ i ][ j ] , dis[ i ][ k ] + dis[ k ][ j ] );
					InTree[ i ][ j ] |= InTree[ i ][ k ] and InTree[ k ][ j ];
				}
			}
		}
		Int ans = max_center( 0 );
		printf( "%lld\n" , ans );
	}
	return 0;
}
