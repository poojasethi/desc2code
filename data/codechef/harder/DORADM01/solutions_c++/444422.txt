#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <bitset>
using namespace std;
const int maxN=210;
typedef bitset<maxN> bits;
 
int n,m,mat[maxN][maxN];
bool invalid[maxN][maxN];
char buf[maxN];
 
bits map[maxN][maxN];
void toggle(int a,int b,const bits &bt) {
	if(!(1<=a&&a<=n&&1<=b&&b<=n))
	    return;
	map[a][b]^=bt;
}
void press(int a,int b,const bits &bt) {
	toggle(a-1,b,bt);
	toggle(a+1,b,bt);
	toggle(a,b-1,bt);
	toggle(a,b+1,bt);
	toggle(a,b,bt);
}
 
int nEqu;
bits equ[maxN*3];
int base[maxN];
bool solve() {
	int nBase=0;
    for(int ei=1;ei<=nEqu;ei++) {
		for(int bi=1;bi<=nBase;bi++)
		    if(equ[ei][base[bi]])
		        equ[ei]^=equ[bi];
 
		int pos=0;
		for(int i=1;i<=n;i++)
		    if(equ[ei][i]) {
				pos=i;break;
			}
 
		if(pos) {
            ++nBase;
			equ[nBase]=equ[ei];
			base[nBase]=pos;
		} else
		    if(equ[ei][0])
		        return false;
	}
	return true;
}
int main() {
	int T;
	for(scanf("%d",&T);T;T--){
		scanf("%d%d",&n,&m);
		for(int i=1;i<=n;i++) {
			scanf("%s",buf+1);
			for(int j=1;j<=n;j++)
		    	mat[i][j]=buf[j]=='1';
		}
		memset(invalid,0,sizeof(invalid));
		for(int i=1;i<=m;i++) {
			int x,y;
			scanf("%d%d",&x,&y);
			invalid[x][y]=true;
		}
 
	    for(int i=1;i<=n;i++)
	    for(int j=1;j<=n;j++) {
			map[i][j].reset();
			map[i][j][0]=mat[i][j];
		}
 
		nEqu=0;
	    for(int i=1;i<=n;i++) {
			static bits tmp;
			tmp.reset();
			tmp[i]=1;
 
			press(1,i,tmp);
			if(invalid[1][i])
	            equ[++nEqu]=tmp;
		}
	    for(int i=2;i<=n;i++) {
	        for(int j=1;j<=n;j++) {
	            static bits tmp;
	            tmp=map[i-1][j];
 
				press(i,j,tmp);
	            if(invalid[i][j])
	                equ[++nEqu]=tmp;
			}
			if(i==n)
	            for(int j=1;j<=n;j++)
	                equ[++nEqu]=map[i][j];
		}
		/*for(int i=1;i<=n;i++) {
		    for(int j=1;j<=n;j++) {
	            for(int k=0;k<=n;k++)
	                if(map[i][j][k])
						if(k)
			    	    	printf("+x%d",k);
			    	    else
			    	        printf("1");
 
				printf(";");
			}puts("");
		}*/
 
		puts(solve()?"YES":"NO");
	}
}