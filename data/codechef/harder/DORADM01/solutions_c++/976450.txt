/*
 * by purple
 * at 12-04-11 2:17:32 PM
 */

#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <bitset>
#include <iostream>

using namespace std;

#define sz(x) ((int)((x).size()))
#define out(x) printf(#x" %d\n", x)
#define rep(i,n) for(int i=0;i<(n);++i)
#define repf(i,a,b) for(int i=(a);i<=(b);++i)

typedef bitset<256> equation;

const int maxn = 256;

equation eqpre[maxn], eqnow[maxn], eqtmp[maxn];
vector<equation> pro;
char s[maxn][maxn];
bool v[maxn][maxn];
int n, m, k;

bool gao() {
    //rep (i, sz(pro)) {
        //cout << pro[i] << endl;
    //}
    rep (i, n) {
        repf (j, i + 1, sz(pro) - 1) {
            if (!pro[j].test(i)) {
                continue;
            }
            if (!pro[i].test(i)) {
                swap(pro[i], pro[j]);
            } else {
                pro[j] ^= pro[i];
            }
        }
    }
    rep (i, sz(pro)) {
        bool allzero = true;
        rep (j, n) {
            if (pro[i].test(j)) {
                allzero = false;
            }
        }
        if (allzero && pro[i].test(n)) {
            return false;
        }
    }
    return true;
}

int main() {
    //freopen ("F.in", "r", stdin);
    int t, Case = 1;
    for (scanf ("%d", &t); t; --t) {
        scanf ("%d%d", &n, &k); m = n;
        memset (v, 0, sizeof(v));
        rep (i, n) {
            scanf ("%s", s[i]);
        }
        rep (i, k) {
            int a, b;
            scanf ("%d%d", &a, &b);
            v[--a][--b] = true;
        }
        rep (i, m) {
            eqnow[i].reset();
            eqnow[i].set(i);
        }
        pro.clear();
        rep (i, n) {
            rep (j, m) {
                eqtmp[j] = eqnow[j];
                if (i) eqtmp[j] ^= eqpre[j];
                if (j) eqtmp[j] ^= eqnow[j - 1];
                if (j < m - 1) eqtmp[j] ^= eqnow[j + 1];
                if (s[i][j] == '1') {
                    eqtmp[j].flip(n);
                }
                if (v[i][j]) {
                    pro.push_back(eqnow[j]);
                }
            }
            rep (j, m) {
                eqpre[j] = eqnow[j];
                eqnow[j] = eqtmp[j];
            }
        }
        rep (j, m) {
            pro.push_back(eqnow[j]);
        }
        printf ("%s\n", gao()? "YES" : "NO");
    }
    return 0;
}
