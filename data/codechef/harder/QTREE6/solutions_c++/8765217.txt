#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=110000;
inline void read(int &x){
	x=0;char p=getchar();
	while(!(p<='9'&&p>='0'))p=getchar();
	while(p<='9'&&p>='0')x*=10,x+=p-48,p=getchar();
}
int head[N],np[N<<1],p[N<<1],tot;
inline void link(int a,int b){
	++tot;p[tot]=b;np[tot]=head[a];head[a]=tot;
	++tot;p[tot]=a;np[tot]=head[b];head[b]=tot;
}
int fa[N],size[N];int dep[N];
int ff[19][N];
int bel[N],rank[N],ltot;int bg[N];
int top[N];
int st[N],ed[N],dfn;
int n,Q;
int idx[N];
inline int getfa(int x,int y){
	per(i,18,0)if(y&(1<<i)){
		y-=(1<<i);x=ff[i][x];
	}
	return x;
}
void dfs(int x){
	size[x]=1;dep[x]=dep[fa[x]]+1;
	int da=0;
	for(int u=head[x];u;u=np[u])if(p[u]^fa[x]){
		fa[p[u]]=x;dfs(p[u]);size[x]+=size[p[u]];
		if((!da)||(size[p[u]]>size[da]))da=p[u];
	}
	bg[x]=da;
	if(size[x]==1){
		rank[x]=1;bel[x]=++ltot;
	}
	else{
		for(int u=head[x];u;u=np[u])if(p[u]^fa[x]){
			if(p[u]==da){
				bel[x]=bel[p[u]];
				rank[x]=rank[p[u]]+1;
			}
			else{
				top[bel[p[u]]]=p[u];
			}
		}
	}
}
void Getxu(int x){
	st[x]=++dfn;idx[dfn]=x;
	if(bg[x])Getxu(bg[x]);
	for(int u=head[x];u;u=np[u])if(fa[p[u]]==x)if(p[u]^bg[x])
	Getxu(p[u]);
	ed[x]=dfn;
}
//segment tree
int tag[N*4][2];
int sz[N*4][2];
void build(int me,int l,int r){
	if(l==r){
		tag[me][1]=size[idx[l]];
		tag[me][0]=1;
		sz[me][1]=1;
		return;
	}
	int mid=(l+r)>>1;
	build(me<<1,l,mid);
	build(me<<1|1,mid+1,r);
	rep(k,0,1)sz[me][k]=sz[me<<1][k]+sz[me<<1|1][k];
}
int vv[2];
bool col[N];
void Getans(int me,int l,int r,int x){
	rep(k,0,1)vv[k]+=tag[me][k];
	if(l==r)return;
	int mid=(l+r)>>1;
	if(x<=mid)Getans(me<<1,l,mid,x);
	else Getans(me<<1|1,mid+1,r,x);
}
int kd;
void segadd(int me,int l,int r,int x,int y,int v){
	if(x<=l&&r<=y){
		tag[me][kd]+=v;
		return;
	}
	int mid=(l+r)>>1;
	if(x<=mid)segadd(me<<1,l,mid,x,y,v);
	if(y>mid)segadd(me<<1|1,mid+1,r,x,y,v);
}
void add(int x,int y,int v){
	while(x){
		if(bel[x]==bel[y]){
			segadd(1,1,n,st[y],st[x],v);
			return;
		}
		segadd(1,1,n,st[top[bel[x]]],st[x],v);
		x=fa[top[bel[x]]];
	}
}
void revcol(int me,int l,int r,int x){
	if(l==r){
		rep(k,0,1)sz[me][k]=1-sz[me][k];
		return;
	}
	int mid=(l+r)>>1;
	if(x<=mid)revcol(me<<1,l,mid,x);
	else revcol(me<<1|1,mid+1,r,x);
	rep(k,0,1)sz[me][k]=sz[me<<1][k]+sz[me<<1|1][k];
}
int get(int me,int l,int r,int x,int y,int c){
	if(sz[me][c]==0)return 0;
	if(l==r)return l;
	int mid=(l+r)>>1;
	if(y>mid){
		int gg=get(me<<1|1,mid+1,r,x,y,c);
		if(gg)return gg;
	}
	if(x<=mid){
		return get(me<<1,l,mid,x,y,c);
	}
	return 0;
}
int Getsamefa(int x){
	int cc=col[x]^1;
	while(x){
		int gg=get(1,1,n,st[top[bel[x]]],st[x],cc);
		if(gg)return idx[gg];
		x=fa[top[bel[x]]];
	}
	return 1;
}
//
int main(){
	read(n);
	rep(i,1,n-1){
		int a,b;read(a);read(b);
		link(a,b);
	}
	dfs(1);
	top[bel[1]]=1;
	
	rep(i,1,n)ff[0][i]=fa[i];
	rep(j,1,18)rep(i,1,n)ff[j][i]=ff[j-1][ff[j-1][i]];
	
	Getxu(1);
	build(1,1,n);
	rep(i,1,n)col[i]=1;
	read(Q);
	while(Q--){
		int ty;read(ty);
		if(ty==0){
			int x;read(x);
			int y=Getsamefa(x);
			memset(vv,0,sizeof vv);
			if(col[y]==col[x]){
				Getans(1,1,n,st[y]);
				printf("%d\n",vv[col[x]]);
			}
			else{
				int cc=getfa(x,dep[x]-dep[y]-1);
				Getans(1,1,n,st[cc]);
				printf("%d\n",vv[col[x]]);
			}
		}
		else{
			int x;read(x);
			int y=Getsamefa(x);
			if(fa[x]){
				memset(vv,0,sizeof vv);
				Getans(1,1,n,st[x]);
				int yy=vv[col[x]];
				kd=col[x];
				add(fa[x],y,-yy);
			}
			col[x]^=1;
			revcol(1,1,n,st[x]);
			if(fa[x]){
				memset(vv,0,sizeof vv);
				Getans(1,1,n,st[x]);
				int yy=vv[col[x]];
				y=Getsamefa(x);
				kd=col[x];
				add(fa[x],y,yy);
			}
		}
	}
	return 0;
}

