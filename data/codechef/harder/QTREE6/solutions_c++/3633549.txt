#include <iostream>
#include <cstdio>
#include <memory.h>
#include <algorithm>
#include <cstring>
#include <vector>
#define MX 100005

using namespace std;

vector <int> con[MX];
int n, cnt;
int anc[MX][17];
int lg[MX];
int f[MX], g[MX], dp[MX], par[MX];
bool clr[MX];
int sum[3][MX];

void DFS(int id, int pr, int k) {
	f[id] = ++cnt, dp[id] = k, par[id] = pr;
	for (int i = 0; i < con[id].size(); i++)
		if (con[id][i] != pr) DFS(con[id][i], id, k + 1);
	g[id] = cnt;
}

void add(int id, int c, int pt) {
	for (int i = f[id]; i <= n; i += (i & (-i))) sum[c][i] += pt;
}

int get_sum(int id, int c) {
	int rlt = 0;
	for (int i = g[id]; i; i ^= (i & (-i))) rlt += sum[c][i];
	for (int i = f[id] - 1; i; i ^= (i & (-i))) rlt -= sum[c][i];
	return rlt;
}

void add_pt(int id) {
	int k = (clr[id]?1:-1);
	for (int i = f[id]; i <= n; i += (i & (-i))) sum[2][i] += k;
	for (int i = g[id] + 1; i <= n; i += (i & (-i))) sum[2][i] -= k;
}

int get_pt(int id) {
	int rlt = 0;
	for (int i = f[id]; i; i ^= (i & (-i))) rlt += sum[2][i];
	return rlt;
}

int up(int u) {
	int p = lg[dp[u]], x = get_pt(u), y;
	int pr, cnt;	
	
	while (p >= 0) {
		pr = anc[u][p];
		y = get_pt(pr);
		cnt = (clr[u])?(1 << p):0;
		if (pr && clr[pr] == clr[u] && (x - y) == cnt) {
			u = pr;
			x = y;
		}
		p--;
	}
	return u;
}

void change(int u) {
	int x, y, z;
	int pr, t1, t2;
	clr[u] = !clr[u];
	add_pt(u);
	y = par[u];
	if (!y) return;
	z = up(y);
	if (z > 1) z = par[z];
	t1 = get_sum(u, clr[u]) + 1;
	t2 = get_sum(u, !clr[u]) + 1;
	
	if (clr[u] == clr[y]) {
		add(y, clr[u], t1);
		if (par[z]) add(par[z], clr[u], -t1);
		add(y, !clr[u], -t2);
		if (par[y]) add(par[y], !clr[u], t2);
	} else {
		add(y, !clr[u], -t2);
		if (par[z]) add(par[z], !clr[u], t2);
		add(y, clr[u], t1);
		if (par[y]) add(par[y], clr[u], -t1);
	}
}

int query(int u) {
	u = up(u);
	return get_sum(u, clr[u]) + 1;
}

main() {
	
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int i, j;
	int type, u, v, m;
	
	scanf("%d", &n);
	for (i = 1; i < n; i++) {
		scanf("%d%d", &u, &v);
		con[u].push_back(v);
		con[v].push_back(u);
	}
	
	DFS(1, 0, 0);
	for (i = 1, j = -1; i <= n; i++) {
		if (i == (1 << (j + 1))) j++;
		lg[i] = j;
	}
	for (i = 1; i <= n; i++) anc[i][0] = par[i];
	for (i = 1; i < 17; i++)
		for (j = 1; j <= n; j++) 
			if (!anc[j][i - 1]) anc[j][i] = 0;
			else anc[j][i] = anc[anc[j][i - 1]][i - 1];
	for (i = 2; i <= n; i++) add(par[i], 0, 1);
	
	for (scanf("%d", &m); m--; ) {
		scanf("%d%d", &type, &u);
		if (type) change(u);
		else cout << query(u) << endl;
	}
}
