#include <iostream>
#include <cstdio>
#include <vector>
#include <set>

using namespace std;

#define N 100001

vector<int> adj[N];
int colr[N];
int id[N];
int idx=1;
int inv_id[N];
int prnt[N];
int wght[N];
int dpth[N];
int chn_num[N];
int chn_cnt=1;
int top[N];
int next[N];
set<int> pos[2][N];
int bit[2][N];

int assign_id(int v,int u) {
    id[v]=idx;
    inv_id[idx]=v;
    idx++;
    prnt[v]=u;
    wght[v]=1;
    dpth[v]=id[v];
    for(int i=0;i<adj[v].size();i++) {
        int w=adj[v][i];
        if(w==u) {
            continue;
        }
        else {
            wght[v] += assign_id(w,v);
            dpth[v]=dpth[w];
            
        }
    }
    return wght[v];
}

void apply_hld(int v,int u) {
    for(int i=0;i<adj[v].size();i++) {
        int w=adj[v][i];
        if(w==u) {
            continue;
        }
        else {
            if(wght[w]>(wght[v]/2)) {
                if(chn_num[v]==0) {
                    chn_num[v]=chn_cnt;
                    top[chn_cnt]=v;
                    chn_cnt++;
                }
                next[v]=w;
                chn_num[w]=chn_num[v];
            }
            apply_hld(w,v);
        }
    }
    if(chn_num[v]!=0) 
        pos[0][chn_num[v]].insert(-id[v]);
}

void update(int c,int indx,int val) {
    while(indx<=N) {
        bit[c][indx] += val;
        indx += indx & -indx;
    }
}

int query(int c,int indx) {
    int s=0;
    while(indx>0) {
        s += bit[c][indx];
        indx -= indx & -indx;
    }
    return s;
}

int range_query(int c,int i,int j) {
    return (query(c,j) - query(c,i-1));
}

int find_top(int c,int u,int v) {
    if(u==0)
        return v;
    if(colr[u]==!c)
        return v;
    if(chn_num[u]==0)
        return find_top(c,prnt[u],u);
    if(pos[!c][chn_num[u]].empty() || (-(*(pos[!c][chn_num[u]].rbegin())))>id[u])
        return find_top(c,prnt[top[chn_num[u]]],top[chn_num[u]]);
    set<int>::iterator itr;
    itr=pos[!c][chn_num[u]].lower_bound(-id[u]);
    return next[inv_id[-(*itr)]];
}

int main() {
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n-1;i++) {
        int a,b;
        scanf("%d %d",&a,&b);
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    assign_id(1,0);
    apply_hld(1,0);
    for(int i=1;i<idx;i++) {
        update(0,i,1);
    }
    int q;
    scanf("%d",&q);
    while(q--) {
        int a,b;
        scanf("%d %d",&a,&b);
        int c;
        if(a==0) {
            c=colr[b];
            int tp=find_top(c,b,b);
            int ans=range_query(c,id[tp],dpth[tp]);
            printf("%d\n",ans);
        }
        else {
            colr[b] ^= 1;
            c=colr[b];
            
            if(chn_num[b]!=0) {
                pos[!c][chn_num[b]].erase(-id[b]);
                pos[c][chn_num[b]].insert(-id[b]);
            }
            
            int tp=prnt[find_top(!c,prnt[b],b)];
            int val=range_query(!c,id[b],dpth[b]);
            if(tp!=0) {
                update(!c,id[tp],val);
            }
            update(!c,id[b],-val);
            
            update(c,id[b],-(range_query(c,id[b],id[b]))+1);
            tp=prnt[find_top(c,b,b)];
            if(tp!=0) {
                val=range_query(c,id[b]+1,dpth[b])+1;
                update(c,id[tp],-val);
            }
        }
    }
    return 0;
}
