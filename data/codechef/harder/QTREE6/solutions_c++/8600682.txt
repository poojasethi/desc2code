#include <stdio.h>
#include <stdlib.h>
using namespace std;

int n,m,i,j,k,lastl,l,opt,u,v,ans;
int son[100005],next[200005],fa[100005],ed[200005],tot;
bool vis[100005];
int q[100005],t1,t2,qid[100005];
int size[100005],heavy[100005],head[100005];
int L[100005],len[100005],w[100005];

struct Seg
{
	int add[2],Max[2];
}seg[5000005];
Seg *t;

void bfs()
{
	int i,now;
	q[1]=1;t1=0;t2=1;vis[1]=true;
	while(t1<t2)
	{
		now=q[++t1];
		for(i=son[now];i;i=next[i])
		if(!vis[ed[i]])
		{
			vis[ed[i]]=true;
			q[++t2]=ed[i];
			fa[ed[i]]=now;
		}
	}
	for(i=1;i<=n;++i)son[i]=0;
	for(i=2;i<=n;++i)
	{
		next[i]=son[fa[i]];
		son[fa[i]]=i;
	}
}

int col[100005],tmp[100005][2];
int color,addn,aim;

void A(int p,int l,int r)
{
	if(r<=aim)
	{
		t[p].add[color]+=addn;
		return;
	}
	int mid=(l+r)/2;
	A(p*2,l,mid);
	if(aim>mid)A(p*2+1,mid+1,r);
}

void add(int x,int c,int num)
{
	color=c;addn=num;
	for(;x;x=fa[head[x]])
	{
		t=seg+L[head[x]];
		aim=w[x];
		A(1,1,len[head[x]]);
	}
}

void change(int x,int c)
{
	t=seg+L[head[x]];
	l=len[head[x]];
	l=l+w[x]-1;
	t[l].Max[!c]=0;
	t[l].Max[c]=qid[x];
	for(l/=2;l;l/=2)
	{
		if(t[l*2+1].Max[0])t[l].Max[0]=t[l*2+1].Max[0];
		else t[l].Max[0]=t[l*2].Max[0];
		if(t[l*2+1].Max[1])t[l].Max[1]=t[l*2+1].Max[1];
		else t[l].Max[1]=t[l*2].Max[1];
	}
}

int MAX;
void M(int p,int l,int r)
{
	if(r<=aim)
	{
		if(t[p].Max[color]>MAX)
		MAX=t[p].Max[color];
		return;
	}
	int mid=(l+r)/2;
	M(p*2,l,mid);
	if(aim>mid)M(p*2+1,mid+1,r);
}

int Qcolor(int x)
{
	int c=!col[x],y;color=c;
	for(y=x;x;y=head[x],x=fa[head[x]])
	{
		MAX=0;
		t=seg+L[head[x]];
		aim=w[x];
		M(1,1,len[head[x]]);
		if(!MAX)continue;
		if(MAX==qid[x])return y;
		else return heavy[q[MAX]];
	}
	return 1;
}

int main()
{
	scanf("%d",&n);
	for(i=1;i<n;++i)
	{
		scanf("%d%d",&u,&v);
		++tot;next[tot]=son[u];son[u]=tot;ed[tot]=v;
		++tot;next[tot]=son[v];son[v]=tot;ed[tot]=u;
	}
	bfs();
	for(i=n;i>=1;--i)
	{
		++size[q[i]];
		size[fa[q[i]]]+=size[q[i]];
	}
	size[0]=0;
	for(i=1;i<=n;++i)
	{
		if(!head[q[i]])head[q[i]]=q[i];
		k=0;
		for(j=son[q[i]];j;j=next[j])
		if(size[j]>size[k])k=j;
		if(k)heavy[q[i]]=k,head[k]=head[q[i]];
	}
	lastl=0;
	for(i=1;i<=n;++i)
	if(head[q[i]]==q[i])
	{
		++ans;
		k=0;
		for(j=q[i];j;j=heavy[j])w[j]=++k;
		l=1;while(l<k)l*=2;
		L[q[i]]=lastl;
		len[q[i]]=l;
		lastl+=l*2+5;
	}
	for(i=1;i<=n;++i)tmp[i][1]=1;
	for(i=1;i<=n;++i)qid[q[i]]=i;
	for(i=1;i<=n;++i)add(i,0,1);
	for(i=1;i<=n;++i)change(i,0);
	scanf("%d",&m);
	for(;m;--m)
	{
		scanf("%d%d",&opt,&u);
		if(opt==0)
		{
			i=Qcolor(u);
			t=seg+L[head[i]];
			ans=0;color=col[u];
			for(j=len[head[i]]+w[i]-1;j>=1;j/=2)ans+=t[j].add[color];
			printf("%d\n",ans);
		}
		else
		{
			v=Qcolor(u);
			t=seg+L[head[u]];
			k=0;color=col[u];
			for(j=len[head[u]]+w[u]-1;j>=1;j/=2)k+=t[j].add[color];
			add(u,col[u],-k);
			if(fa[v])
			{
				add(fa[v],col[u],k);
				tmp[fa[v]][col[u]]-=k;
			}
			tmp[u][col[u]]=k;
			col[u]=!col[u];
			change(u,col[u]);
			v=Qcolor(u);
			add(u,col[u],tmp[u][col[u]]);
			if(fa[v])
			{
				add(fa[v],col[u],-tmp[u][col[u]]);
				tmp[fa[v]][col[u]]+=tmp[u][col[u]];
			}
		}
	}
}
