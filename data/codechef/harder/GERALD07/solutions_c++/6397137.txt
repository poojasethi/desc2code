#include <bits/stdc++.h>
#define FOR(i,a,b) for(int i=a; i<=b; i++)
#define FRO(i,a,b) for(int i=a; i>=b; i--)
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define ll long long
#define mp make_pair
#define f first
#define s second
#define maxn 300007
#define BIT(i, n) ( (n >> i) & 1 )
#define ln
#define oo 300003

using namespace std;

struct edge
{
    int l, r, tt;
};

edge que[maxn];

int lab[maxn];
int sv, n, m, q, sq;
vector < pair <int, int> > res;
pair <int, int> a[maxn];
int ans[maxn];

int getlab(int x)
{
    if(lab[x] < 0)    return x;
    return getlab(lab[x]);
}

void reset()
{
    res.clear();
    memset(lab, -1, sizeof(lab));
    sv = n;
}

void restore()
{
    sv += res.size() / 2;
    int x = res.size() - 1;
    FRO(i,x,0)
        lab[res[i].f] = res[i].s;
    res.clear();
}

void connect(int u, int v, int kt)
{
    u = getlab(u);
    v = getlab(v);
    if(u == v) return;
    sv--;
    if(kt == 1)
    {
        res.push_back(mp(u, lab[u]));
        res.push_back(mp(v, lab[v]));
    }
    if(lab[u] < lab[v])
    {
        lab[u] = lab[u] + lab[v];
        lab[v] = u;
    }
    else
    {
        lab[v] = lab[u] + lab[v];
        lab[u] = v;
    }
}

void xli()
{
    int last , cuoi;
    reset();
    FOR(i,1,q)
        if(que[i].l / sq == que[i].r / sq)
        {
            restore();
            FOR(j,que[i].l, que[i].r)
                connect(a[j].f, a[j].s, 1);
            ans[que[i].tt] = sv;
        }
    int tr = -1;
    FOR(i,1,q)
    {
        if(que[i].l / sq == que[i].r / sq) continue;
        if(que[i].l / sq == tr)
        {
            restore();
            while(last <= que[i].r)
            {
                connect(a[last].f, a[last].s, 0);
                last++;
            }
            FOR(j,que[i].l,cuoi-1)
                connect(a[j].f, a[j].s, 1);
        }
        else
        {
            tr = que[i].l / sq;
            reset();
            last = (que[i].l / sq + 1) * sq;
            cuoi = last;
            while(last <= que[i].r)
            {
                connect(a[last].f, a[last].s, 0);
                last++;
            }
            FOR(j,que[i].l,cuoi-1)
                connect(a[j].f, a[j].s, 1);
        }
        ans[que[i].tt] = sv;
    }
}

bool ss(edge p, edge q)
{
    if(p.l / sq != q.l / sq) return p.l / sq < q.l / sq;
    return p.r < q.r;
}

int main()
{
    ios_base::sync_with_stdio(0);
    //filein("inp.txt");
    //fileout("out.txt");
    int test;
    cin >> test;
    while(test--)
    {
        cin >> n >> m >> q;
        FOR(i,1,m)
            cin >> a[i].f >> a[i].s;
        FOR(i,1,q)
        {
            cin >> que[i].l >> que[i].r;
            que[i].tt = i;
        }
        sq = sqrt(q);
        sort(que+1,que+q+1,ss);
        xli();
        FOR(i,1,q)
            cout << ans[i] << endl;
    }
}
