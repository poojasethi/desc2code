#include <cstdio>
#include <cstring>
#include <algorithm>
#define MAXN 1000001
using namespace std;
const int INF=~0u>>2;
struct node{int l,r,d;}t[MAXN*20];
int T,n,m,k,type,lastans,size,tot,rt[MAXN],c[MAXN][2],f[MAXN],d[MAXN],p[MAXN],zmin[MAXN],w[MAXN],x[MAXN],y[MAXN],aux[MAXN];
bool r[MAXN];
void insert(int rt,int &newrt,int l,int r,int x) {
    t[newrt=++tot]=t[rt];t[newrt].d++;
	if (l==r) return;
	if (x<=(l+r>>1)) insert(t[rt].l,t[newrt].l,l,l+r>>1,x);
	else insert(t[rt].r,t[newrt].r,(l+r>>1)+1,r,x);
}
int query(int lrt,int rrt,int l,int r,int x,int y) {
    if (r<x || l>y) return 0;
	if (x<=l && r<=y) return t[rrt].d-t[lrt].d;
	int left=query(t[lrt].l,t[rrt].l,l,l+r>>1,x,y);
	int right=query(t[lrt].r,t[rrt].r,(l+r>>1)+1,r,x,y);
	return left+right;
}
void updata(int x) {
    zmin[x]=d[x];
	if (c[x][0] && zmin[x]>zmin[c[x][0]]) zmin[x]=zmin[c[x][0]];
	if (c[x][1] && zmin[x]>zmin[c[x][1]]) zmin[x]=zmin[c[x][1]];
}
void pushdown(int x) {
    if (!x) return;
    if (r[x]) {
	  swap(c[x][0],c[x][1]);
	  r[c[x][0]]^=1;r[c[x][1]]^=1;
	  r[x]=0;
	}
}
void rotate(int x,int k) {
    pushdown(x);pushdown(c[x][k]);
    int y=c[x][k];c[x][k]=c[y][k^1];c[y][k^1]=x;
	if (f[x]!=-1) c[f[x]][c[f[x]][1]==x]=y;
	f[y]=f[x];f[x]=y;f[c[x][k]]=x;swap(p[x],p[y]);
	updata(x);updata(y);
}
void splay(int x,int s=-1) {
    while (f[x]!=s) {
	  if (f[f[x]]!=s) rotate(f[f[x]],(c[f[f[x]]][1]==f[x])^r[f[f[x]]]);
	  rotate(f[x],(c[f[x]][1]==x)^r[f[x]]);
	}
	updata(x);
}
int access(int x) {
    int y=0;
	do{
	  splay(x);pushdown(x);
      f[c[x][1]]=-1;p[c[x][1]]=x;
      c[x][1]=y;f[y]=x;p[y]=-1;
	  updata(x);x=p[y=x];
	}
	while (x!=-1);
	return y;
}
void setroot(int x) {
    access(x);
	splay(x);
	r[x]^=1;
}
void link(int x,int y) {
    setroot(x);
	p[x]=y;
}
void cut(int x,int y) {
    access(x);splay(y);
	if (p[y]==x) p[y]=-1;
	else{access(y);splay(x);p[x]=-1;}
}
int getfa(int x) {
    access(x);splay(x);pushdown(x);
	while (c[x][0]) x=c[x][0];
	return x;
}
int main() {
	scanf("%d",&T);
	while (T--) {
	  size=0;lastans=0;
	  memset(rt,0,sizeof(rt));
	  memset(r,0,sizeof(r));
	  memset(p,-1,sizeof(p));
	  memset(f,-1,sizeof(f));
	  memset(d,0,sizeof(d));
	  memset(c,0,sizeof(c));
	  memset(w,0,sizeof(w));
	  memset(zmin,0,sizeof(zmin));
	  scanf("%d%d%d",&n,&m,&k);
	  size=n;
	  for (int i=1;i<=n;i++) zmin[i]=d[i]=INF;
	  for (int i=1;i<=m;i++) {
	    scanf("%d%d",x+i,y+i);
		if (x[i]==y[i]) {insert(rt[i-1],rt[i],0,m,w[i]=i);continue;}
	    if (getfa(x[i])!=getfa(y[i])) {
	      aux[i]=++size;d[size]=zmin[size]=i;
          link(x[i],size);link(y[i],size);
		  insert(rt[i-1],rt[i],0,m,w[i]=0);
	    }
	    else{
		  setroot(x[i]);access(y[i]);splay(y[i]);
		  int whe=zmin[y[i]];
		  if (whe) {
		    cut(x[whe],aux[whe]);
			cut(y[whe],aux[whe]);
			aux[i]=++size;d[size]=zmin[size]=i;
			link(x[i],aux[i]);
			link(y[i],aux[i]);
		  }
		  insert(rt[i-1],rt[i],0,m,w[i]=whe);
		}
	  }
	  for (int i=1;i<=k;i++) {
	    int l,r;scanf("%d%d",&l,&r);
	    lastans=n;
	    lastans-=query(rt[l-1],rt[r],0,m,0,l-1);
	    printf("%d\n",lastans);
	  }
	}
	return 0;
}