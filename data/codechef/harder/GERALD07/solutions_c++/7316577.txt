#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>
#define FIN "gerald07.inp"
#define FON "gerald07.out"
#define fi first
#define se second
using namespace std;
const int MAXN = 2e5;
typedef pair<int,int> ii;
struct query{ int l,r,id; } que[MAXN];
ii edge[MAXN];
int n,m,q,sq,ans[MAXN],endbl[500],par[MAXN+1],par2[MAXN+1],res,res2,stk[MAXN],top=-1;

void enter();
void init();
bool comp(const query&, const query&);
void format();
void anion(int,int);
void anion2(int,int);
void print();

int main()
{
    //freopen(FIN,"r",stdin);
    //freopen(FON,"w",stdout);
    ios_base::sync_with_stdio(0);
    int test;
    for(cin>>test; test; test--)
    {
        enter();
        init();
        sort(que,que+q,comp);
        format();

        int bl=0, cr=endbl[0];
        for(int i=0; i<q; i++)
        {
            int l=que[i].l, r=que[i].r;
            if (l/sq > bl) {
                format();
                cr = endbl[bl=l/sq];
            }
            for(; cr<r; cr++) anion2(edge[cr+1].fi, edge[cr+1].se);

            res = res2;
            for(int j=min(r,endbl[bl]); j>=l; j--)
                anion(edge[j].fi, edge[j].se);
            ans[que[i].id] = res;

            for(;top>=0; top--) par[stk[top]] = par2[stk[top]];
        }
        print();
    }
}

void print()
{
    for(int i=0; i<q; i++)
        cout << ans[i] << endl;
}
int getroot2(int x)
{
    if (par2[x]==x) return x;
    return par[x]=par2[x]=getroot2(par2[x]);
}
int getroot(int x)
{
    stk[++top] = x;
    if (par[x]==x) return x;
    return par[x]=getroot(par[x]);
}
void anion2(int x,int y)
{
    int rx = getroot2(x);
    int ry = getroot2(y);
    if (rx!=ry) {
        res2--;
        par[ry] = par2[ry] = rx;
    }
}
void anion(int x,int y)
{
    int rx = getroot(x);
    int ry = getroot(y);
    if (rx!=ry) {
        res--;
        par[ry] = rx;
    }
}
void format()
{
    res = res2 = n;
    for(int i=1; i<=n; i++)
        par[i] = par2[i] = i;
}
void init()
{
    sq = round(sqrt(m));
    endbl[0] = sq-1;
    int i;
    for(i=1; i< (m-1)/sq; i++)
        endbl[i] = endbl[i-1]+sq;
    endbl[i] = m-1;
}
bool comp(const query& x,const query& y)
{
    int blx = x.l / sq;
    int bly = y.l / sq;
    return blx<bly || (blx==bly && x.r<y.r);
}
void enter()
{
    cin >> n >> m >> q;
    for(int i=0; i<m; i++)
        cin >> edge[i].fi >> edge[i].se;
    for(int i=0; i<q; i++)
        cin >> que[i].l >> que[i].r,
        que[i].l--,
        que[i].r--,
        que[i].id = i;
}
