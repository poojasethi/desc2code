#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

int n,now;
int Min[400005],size[400005];
int l[400005],r[400005],fa[400005],st[400005];
bool rev[400005];

inline void Rev(int p){rev[p]^=1;swap(l[p],r[p]);}
inline bool top(int p){return (!fa[p])||(l[fa[p]]!=p&&r[fa[p]]!=p);}
inline void splay_updata(int x)
{
	size[x]=size[l[x]]+size[r[x]]+1;
	if(x<=n)Min[x]=10000000;else Min[x]=x;
	if(l[x]&&Min[l[x]]<Min[x])Min[x]=Min[l[x]];
	if(r[x]&&Min[r[x]]<Min[x])Min[x]=Min[r[x]];
}
inline void splay_down(int x)
{
	if(rev[x])
	{
		rev[x]=false;
		if(l[x])Rev(l[x]);
		if(r[x])Rev(r[x]);
	}
}
inline void zig(int x)
{
	int y=fa[x],z=fa[y];
	if(l[z]==y)l[z]=x;else if(r[z]==y)r[z]=x;
	fa[x]=z,fa[y]=x,fa[r[x]]=y;
	l[y]=r[x],r[x]=y;
	splay_updata(y);
}

inline void zag(int x)
{
	int y=fa[x],z=fa[y];
	if(l[z]==y)l[z]=x;else if(r[z]==y)r[z]=x;
	fa[x]=z,fa[y]=x,fa[l[x]]=y;
	r[y]=l[x];l[x]=y;
	splay_updata(y);
}
inline void splay(int x)
{
	int y,z;
	y=x;z=1;st[1]=x;
	while(!top(y))
	{
		++z;
		y=fa[y];
		st[z]=y;
	}
	for(y=z;y>=1;--y)splay_down(st[y]);
	while(!top(x))
	{
		y=fa[x],z=fa[y];
		if(!top(y))
		{
			if(l[z]==y){if(l[y]==x)zig(y),zig(x);else zag(x),zig(x);}
			else{if(l[y]==x)zig(x),zag(x);else zag(y),zag(x);}
		}
		else{if(l[y]==x)zig(x);else zag(x);}
	}
	splay_updata(x);
}
inline int access(int x)
{
	int y=0;
	for(;x;y=x,x=fa[x])
	{
		splay(x);
		r[x]=y;
		splay_updata(x);
	}
	return y;
}

int m,q,u,v,c,i,j,k,tot;

struct node
{
	int l,r,id;
}e[400005];

int ll,rr,aim,key,ans;

struct seg
{
	int l,r,sum;
}t[20000005];
int root[400005],cnt;

void C(int &x,int l,int r)
{
	t[++cnt]=t[x];x=cnt;
	t[x].sum+=key;
	if(l==r)return;
	int mid=l+r>>1;
	if(aim<=mid)C(t[x].l,l,mid);
	else C(t[x].r,mid+1,r);
}

void Q(int x,int l,int r)
{
	if(l>=ll&&r<=rr)
	{
		ans+=t[x].sum;
		return;
	}
	int mid=l+r>>1;
	if(rr<=mid)Q(t[x].l,l,mid);
	else if(ll>mid)Q(t[x].r,mid+1,r);
		else Q(t[x].l,l,mid),Q(t[x].r,mid+1,r);
}

bool connect(int u,int v)
{
	int lca;
	access(u);lca=access(v);
	if(access(u)!=lca)return false;
	return true;
}

void link(int u,int v,int c)
{
	int i;
	aim=c;key=1;
	C(root[now],1,m);
	access(u);splay(u);Rev(u);fa[u]=tot;
	access(v);splay(v);Rev(v);fa[v]=tot;
}

void cut(int x)
{
	int u=e[x-n].l,v=e[x-n].r,i;
	aim=x-n;key=-1;
	C(root[now],1,m);
	access(x);splay(x);Rev(x);
	access(u);splay(u);splay(x);
	fa[u]=0;l[x]=r[x]=0;splay_updata(u);splay_updata(x);
	access(v);splay(v);splay(x);
	fa[v]=0;l[x]=r[x]=0;splay_updata(v);splay_updata(x);
}

int T;

int main()
{
	scanf("%d",&T);
	for(;T;--T)
	{
		scanf("%d%d%d",&n,&m,&q);
		for(i=1;i<=m;++i)scanf("%d%d",&e[i].l,&e[i].r);
		for(i=0;i<=n+m;++i)
		{
			l[i]=r[i]=fa[i]=0;
			Min[i]=10000000;
			size[i]=1;rev[i]=false;
		}
		tot=n;
		for(i=1;i<=m;++i)
		{
			root[i]=root[i-1];now=i;
			u=e[i].l;v=e[i].r;++tot;
			if(u==v)continue;Min[tot]=tot;
			if(!connect(u,v))link(u,v,i);
			else
			{
				access(u);Rev(u);access(v);splay(v);
				cut(Min[v]),link(u,v,i);
			}
		}
		for(;q;--q)
		{
			scanf("%d%d",&ll,&rr);
			ans=0;
			Q(root[rr],1,m);
			ans=n-ans;
			printf("%d\n",ans);
		}
	}
}