#include<bits/stdc++.h>
#define ll long long
using namespace std;

ll n,m,t,po,q,par[200005],temp[200005],tempans,fin,ans[200005],siz;

ll find(ll d)
{
    if(par[d]==d)
        return d;
    return par[d]=find(par[d]);
}

ll find2(ll d)
{
    if(temp[d]==d)
        return d;
    return temp[d]=find2(temp[d]);
}

struct ebd
{
    ll a,b;
}edge[200005];

struct nod
{
    ll a,b,ind;
}obj[200005];

vector<ll> chng;

bool cmp(nod aa,nod bb)
{
    if(aa.a/siz!=bb.a/siz)
        return aa.a/siz<bb.a/siz;
    
    return aa.b<bb.b;                      
}

int main()
{
    cin>>t;
    while(t--)
    {
        cin>>n>>m>>q;
        siz=450;

        for (int i = 0; i < m; ++i)
            cin>>edge[i].a>>edge[i].b;

        for (int i = 0; i < q; ++i)
        {
            cin>>obj[i].a>>obj[i].b;
            obj[i].a--;
            obj[i].b--;
            obj[i].ind=i;
        }

        sort(obj,obj+q,cmp);
        ll x=0;

        for (int b = 0; b*siz <= m ; ++b)
        {
            for (int i = 0; i < n+2; ++i)
            {
                par[i]=i;
                temp[i]=i;
            }

            ll end=(b+1)*siz-1;
            ll curr=end+1;
            fin=0;

            while((x<q)&&(obj[x].a<=end))
            {
                while(curr<=obj[x].b)
                {
                    ll p1=find(edge[curr].a);
                    ll p2=find(edge[curr].b);

                    if(p1!=p2)
                    {
                        fin++;
                        par[p2]=p1;
                    }
                    curr++;
                }

                tempans=0;
                po=min(obj[x].b,end);
                chng.clear();

                while(po>=obj[x].a)
                {
                    ll p1=find(edge[po].a);
                    ll p2=find(edge[po].b);

                    if(p1!=p2)
                    {
                        p1=find2(p1);
                        p2=find2(p2);
                        if(p1!=p2)
                        {
                            temp[p1]=p2;
                            chng.push_back(p1);
                            tempans++;
                        }
                    }
                    po--;
                }

                ans[obj[x].ind]=fin+tempans;

                for (int i = 0; i < (int)chng.size(); ++i)
                    temp[chng[i]]=chng[i];

                x++;
            }
        }

        for (int i = 0; i < q; ++i)
            cout<<n-ans[i]<<endl;
    }
    return 0;
}