#include<bits/stdc++.h>
 
#define S(a) scanf("%d",&a)
#define P(a) printf("%d",a)
#define PS(a) printf("%s",a)
 
#define S2(a,b) scanf("%d%d",&a,&b)
#define S3(a,b,c) scanf("%d%d%d",&a,&b,&c)
 
#define SLL(a) scanf("%lld",&a)
#define PLL(a) printf("%lld",a)
#define SLL2(a,b) scanf("%lld%lld",&a,&b)
#define SLL3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
 
#define PCASE printf("Case %d: ",kk++)
#define PCASENL printf("Case %d:\n",kk++)
#define NL puts("")
 
#define sz(a) ((int)a.size())
#define repv(i,a) for(int i=0;i<sz(a);i++)
#define revv(i,a) for(int i=sz(a)-1;i>=0;i--)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define rev(i,a,b) for(int i=a;i>=b;i--)
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define all(a) a.begin(),a.end()
#define rall(a) a.rbegin(),a.rend()
#define countbit(x) __builtin_popcount(x)
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define pb(a) push_back(a)
#define mp(a,b) make_pair(a,b)
#define pi (2.0*acos(0.0))
#define PI (2.0*acos(0.0))
#define SET(a) memset(a,-1,sizeof a)
#define CLR(a) memset(a,0,sizeof a)
#define set0(ar)   memset(ar,0,sizeof ar)
#define setinf(ar) memset(ar,126,sizeof ar)
#define in(a,x,y) (a>=x && a<=y)
#define out(a,x,y) (!in(a,x,y))
#define eq(a,b) (fabs(a-b)<eps)
#define less(a,b) (a+eps<b)
#define great(a,b) (a>b+eps)
#define xx first
#define yy second
#define root 1
 
#define MAX(a) (*max_element(all(a)))
#define MIN(a) (*min_element(all(a)))
 
#define LB(a,x) (lower_bound(all(a),x)-a.begin())
#define UB(a,x) (upper_bound(all(a),x)-a.begin())
 
using namespace std;
int ts,kk=1;
 
typedef long long ll;
typedef long long LL;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<pii> vii;
 
template< class T > inline T _sq(T a) { return a * a; }
template< class T, class X > inline T _pow(T a,X y) {T z=1; rep(i,1,y){z*=a;} return z; }
template< class T > inline T _gcd(T a,T b) {a=abs(a);b=abs(b); if(!b) return a; return _gcd(b,a%b);}
template< class T > inline T _lcm(T a,T b) {a=abs(a);b=abs(b); return (a/_gcd(a,b))*b;}
 
template< class T > inline T _extended(T a,T b,T &x,T &y) {a=_abs(a);b=_abs(b); T g,x1,y1; if(!b) {x=1;y=0;g=a; return g;} g=_extended(b,a%b,x1,y1); x=y1; y=x1-(a/b)*y1; return g;}
 
template< class T, class X > inline bool getbit(T a, X i) { T t=1; return ((a&(t<<i))>0); }
template< class T, class X > inline T setbit(T a, X i) { T t=1;return (a|(t<<i)); }
template< class T, class X > inline T resetbit(T a, X i) { T t=1;return (a&(~(t<<i))); }
template< class T, class X > inline T togglebit(T a, X i) { T t=1;return (a^(t<<i)); }
 
template< class T,class X, class Y > inline T _bigmod(T n,X m,Y mod){ull ret=1, a = n%mod ; while(m){ if(m&1)ret=(ret*a)%mod; m>>=1; a=(a*a)%mod; }ret%=mod;return (T)ret;}
template< class T, class Y > inline T _modinv(T n,Y mod) {return _bigmod(n,mod-2,mod);}
 
///       //CONSTANT//        ///
///  power     0123456789     ///
#define MX  (  200000    + 3  )
#define MOD    1000000007
#define inf    2000000000
 
#define LOGMX  20
#define eps 1e-9
///===========================///
 
struct data ///ok
{
    int v,c,u;
 
    bool operator <(const data &x) const
    {
        if(v==x.v) return u>x.u; ///maximize
        return v>x.v;   ///maximize
    }
 
    data(int vv,int cc,int uu) {v=vv;c=cc;u=uu;}
};
 
struct node
{
    int l,r,ln,rn;
    node(int lll,int rrr,int lln,int rrn){l=lll;r=rrr;ln=lln;rn=rrn;}
};
 
int n,nchain,child[MX],chainid[MX],chainpos[MX],sz[MX],head[MX],par[MX],col[MX];
 
vi adj[MX];
vector<node>chain[MX];
 
//priority_queue<data>pq[MX];
 
set<data>sett[MX];
 
#define _max(v,x,tv,tx) if(tv>v || (tv==v && tx>x)) {v=tv;x=tx;}
 
void build_chain(int hd)    ///ok
{
    sz[nchain]=0;
 
    for(int k=0,v=hd;v!=-1;k++,v=child[v])
    {
        sz[nchain]++;
        chainid[v]=nchain;
        chainpos[v]=k;
        head[v]=hd;
    }
 
    chain[nchain].clear();
    chain[nchain].resize(4*sz[nchain],node(-inf,-inf,-inf,-inf));   ///
 
    nchain++;
 
    return;
}
 
int dfs(int u)  ///ok
{
    int tmp,ret=1,mx=0;
    repv(i,adj[u])
    {
        int v=adj[u][i];
        if(v!=par[u])
        {
            tmp=dfs(v);
            ret+=tmp;
            if(tmp>mx)
            {
                mx=tmp;
                child[u]=v;
            }
        }
    }
 
    repv(i,adj[u]) if(adj[u][i]!=par[u] && adj[u][i]!=child[u]) build_chain(adj[u][i]);
 
    return ret;
}
 
inline void HLD(int u) ///ok
{
    nchain=0;
    dfs(u);
    build_chain(u);
    return;
}
 
void update(int chid,int idx,int st,int ed,int p,int v) ///ok
{
    if(st>ed) return;
 
    if(st==ed)
    {
        pii mx=mp(-inf,-inf);
 
        if(!sett[v].empty())
        {
            data d=*sett[v].begin();
            mx=mp(d.v,d.u);
        }
 
        chain[chid][idx].l=chain[chid][idx].r=(!col[v]?0:mx.xx);
        chain[chid][idx].ln=chain[chid][idx].rn=(!col[v]?v:mx.yy);
 
        _max(chain[chid][idx].l,chain[chid][idx].ln,mx.xx,mx.yy);
        _max(chain[chid][idx].r,chain[chid][idx].rn,mx.xx,mx.yy);
 
        return;
    }
 
    int lft=2*idx,rgt=lft+1,mid=(st+ed)/2;
 
    if(p<=mid) update(chid,lft,st,mid,p,v);
    else update(chid,rgt,mid+1,ed,p,v);
 
    chain[chid][idx].l=chain[chid][idx].r=chain[chid][idx].ln=chain[chid][idx].rn=-inf;
 
    _max(chain[chid][idx].l,chain[chid][idx].ln,chain[chid][lft].l,chain[chid][lft].ln);
    _max(chain[chid][idx].l,chain[chid][idx].ln,chain[chid][rgt].l + mid-st+1,chain[chid][rgt].ln);
 
    _max(chain[chid][idx].r,chain[chid][idx].rn,chain[chid][rgt].r,chain[chid][rgt].rn);
    _max(chain[chid][idx].r,chain[chid][idx].rn,chain[chid][lft].r + ed-mid,chain[chid][lft].rn);
 
    return;
}
 
pii lquery(int chid,int idx,int st,int ed,int s,int e)  ///ok
{
    pii ret=mp(-inf,-inf),tmp;
 
    if(st>ed || s>e) return ret;
 
    if(st==s && ed==e) return mp(chain[chid][idx].l,chain[chid][idx].ln);
 
    int lft=2*idx,rgt=lft+1,mid=(st+ed)/2;
 
    if(e<=mid) ret=lquery(chid,lft,st,mid,s,e);
    else if(s>mid) ret=lquery(chid,rgt,mid+1,ed,s,e);
    else
    {
        tmp=lquery(chid,lft,st,mid,s,mid);
        _max(ret.xx,ret.yy,tmp.xx,tmp.yy);
        tmp=lquery(chid,rgt,mid+1,ed,mid+1,e);
        _max(ret.xx,ret.yy,tmp.xx +mid-s+1 ,tmp.yy);    ///
    }
 
    return ret;
}
 
pii rquery(int chid,int idx,int st,int ed,int s,int e)
{
    pii ret=mp(-inf,-inf),tmp;
 
    if(st>ed || s>e) return ret;
 
    if(st==s && ed==e) return mp(chain[chid][idx].r,chain[chid][idx].rn);
 
    int lft=2*idx,rgt=lft+1,mid=(st+ed)/2;
 
    if(e<=mid) ret=rquery(chid,lft,st,mid,s,e);
    else if(s>mid) ret=rquery(chid,rgt,mid+1,ed,s,e);
    else
    {
        tmp=rquery(chid,lft,st,mid,s,mid);
        _max(ret.xx,ret.yy,tmp.xx +e-mid,tmp.yy);   ///
        tmp=rquery(chid,rgt,mid+1,ed,mid+1,e);
        _max(ret.xx,ret.yy,tmp.xx ,tmp.yy);
    }
 
    return ret;
}
 
void change(int x)
{
    col[x]^=1;
    while(x!=-1)
    {
        if(par[head[x]]!=-1) sett[par[head[x]]].erase(data(chain[chainid[x]][root].l + 1,chainid[x],chain[chainid[x]][root].ln));
        update(chainid[x],root,0,sz[chainid[x]]-1,chainpos[x],x);
        if(par[head[x]]!=-1) sett[par[head[x]]].insert(data(chain[chainid[x]][root].l + 1,chainid[x],chain[chainid[x]][root].ln));  ///
        x=par[head[x]];
    }
    return;
}
 
pii query(int x)
{
    int tmp=0;
 
    data c=data(-inf,-inf,-inf);
 
    pii ret(-inf,-inf);
 
    while(x!=-1)
    {
        if(!col[x]) _max(ret.xx,ret.yy,tmp,x);
 
        pii tl=lquery(chainid[x],root,0,sz[chainid[x]]-1,chainpos[x] +1,sz[chainid[x]]-1);
        tl.xx++;
 
        pii tr=rquery(chainid[x],root,0,sz[chainid[x]]-1,0,chainpos[x] -1);
        tr.xx++;
 
        _max(ret.xx,ret.yy,tl.xx+tmp,tl.yy);
        _max(ret.xx,ret.yy,tr.xx+tmp,tr.yy);
 
        sett[x].erase(c);
 
        pii mx=mp(-inf,-inf);
 
        if(!sett[x].empty())
        {
            data d=*sett[x].begin();
            mx=mp(d.v,d.u);
        }
 
        _max(ret.xx,ret.yy,mx.xx+tmp,mx.yy);
 
        sett[x].insert(c);
 
        c=data(chain[chainid[x]][root].l + 1,chainid[x],chain[chainid[x]][root].ln);
 
        tmp+=chainpos[x]+1;
 
        x=par[head[x]];
    }
 
    return ret;
}
 
void init() ///ok
{
    nchain=0;
    rep(i,0,n)
    {
        chainid[i]=chainpos[i]=sz[i]=head[i]=col[i]=0;
        child[i]=par[i]=-1;
        adj[i].clear();
        sett[i].clear();
    }
}
 
int main()
{
    S(ts);
    while(ts--)
    {
        int q,x;
        S2(n,q);
 
        init(); /// remember to init carefully
 
        rep(i,2,n)
        {
            S(par[i]);
            adj[par[i]].pb(i);
        }
 
        HLD(1);
 
        rep(i,1,n)  ///initialize colors to white
        {
            col[i]=1;
            change(i);
        }
 
        while(q--)
        {
            S(x);
 
            bool wt=true;
 
            if(col[x])  ///if black
            {
                wt=false;
 
                change(x);
            }
 
//             /**
 
            pii ans=query(x);
 
//            cout<<"\t ";
 
            P(ans.yy),NL;
 
//            cout<<ans.xx<<" "<<ans.yy<<endl;
 
 
            if(wt)  ///if initially white
            {
                change(x);
            }
        }
 
    }
 
    return 0;
}
 