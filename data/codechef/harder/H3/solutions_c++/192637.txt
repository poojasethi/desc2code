#include <iostream>
#include <set>
#include <cstdlib>
#include <cstdio>
#include <cmath>

using namespace std;

#define eps 1e-7

class Point{public:
    int x,y;
    Point(){ x = y = 0;};
    Point(int a, int b) : x(a), y(b) {};
    int distSquare(Point that){
        return (that.x-x)*(that.x-x) + (that.y-y)*(that.y-y);
    };
    bool operator < (const Point &that) const{
        return make_pair(x,y) < make_pair(that.x,that.y);
    }
};

int M,K;
Point p1,p2,p3;
set<Point> v;//point here is used as vector
Point v1,v2;//vector 2
int res;

int main()
{
 //   int m;
//    cin>>m;
  //  freopen("input.txt","r",stdin);
    int t;
    cin>>t;
    for (int pp = 0; pp < t; pp++){
        cin>>M>>K;
        cout<<"Case #"<<pp+1<<":"<<endl;
        for (int k = 0; k < K; k++){
            cin>>p1.x>>p1.y;
            cin>>p2.x>>p2.y;
            cin>>p3.x>>p3.y;
            //cout<<p1.x<<" "<<p1.y<<" "<<p2.x<<" "<<p2.y<<" "<<p3.x<<" "<<p3.y<<endl;
            res = 0;
            int d1 = p1.distSquare(p2);
            int d2 = p1.distSquare(p3);
            int d3 = p2.distSquare(p3);
            v.clear();
            v2.x = (p3.x - p1.x);
            v2.y = (p3.y - p1.y);
            double cosv1 = (double)(p2.x - p1.x)/sqrt((double)d1);
            double sinv1 = (double)(p2.y - p1.y)/sqrt((double)d1);
            double cosv2 = (double)(p3.x - p1.x)/sqrt((double)d2);
            double sinv2 = (double)(p3.y - p1.y)/sqrt((double)d2);
        //    cout<<cosv1<<" "<<cosv2<<endl;
        //    cout<<sinv1<<" "<<sinv2<<endl;
            double cos12 = cosv1*cosv2 + sinv1*sinv2;
            double sin12 = sinv2*cosv1 - cosv2*sinv1;
            double angle12 =
            acos((d1+d2-d3)/(2.0*sqrt((double)d1)*sqrt((double)d2)));
            for (int i = 0; i*i <= d1; i++){
                int j = (int)sqrt((double)d1 - i*i + eps);
                if (i * i + j * j == d1){
                    v.insert(Point(i,j));
                    v.insert(Point(-i,j));
                    v.insert(Point(i,-j));
                    v.insert(Point(-i,-j));
                };
            }
            set<Point>::iterator it = v.begin();
            for (; it != v.end(); it++){
           /*     double angle = atan2((double)it->y,(double)it->x);
                for (int sign = -1; sign <= 1; sign +=2){
                    double newAngle = angle + sign*angle12;
                    //cout<<cos12<<endl;
                    double x = cos(newAngle) * sqrt((double)d2);
                    double y = sin(newAngle) * sqrt((double)d2);
                    int xx = int(cos(newAngle) * sqrt((double)d2) + 0.5 + 1000000) - 1000000;
                    int yy = int(sin(newAngle) * sqrt((double)d2) + 0.5 + 1000000) - 1000000;
          //          cout<<"vectors : "<<it->x<<","<<it->y<<"/";
          //          cout<<x<<","<<y<<endl;
                    if (fabs(x-xx) > eps) continue;
                    if (fabs(y-yy) > eps) continue;
          //          cout<<"vectors : "<<it->x<<","<<it->y<<"/";
          //          cout<<xx<<","<<yy<<endl;
                    if (xx*xx + yy*yy == d2 &&
                         (it->x-xx)*(it->x-xx) + (it->y-yy)*(it->y-yy) == d3)
                    {
                        int dx = max(0,max(it->x,xx)) - min(0,min(it->x,xx));
                        int dy = max(0,max(it->y,yy)) - min(0,min(it->y,yy));
                        if (dx <= M && dy <= M)
                            res += (M+1-dx)*(M+1-dy);
                    }
                }*/

              //rotate v2
                double x;
                double y;
                double cosa = (double)it->x/sqrt((double)d1);
                double sina = (double)it->y/sqrt((double)d1);
                //calc rotate angle: angle(v1) - angle(a)
                double cosRot = cosa*cosv1 + sina*sinv1;
                double sinRot = sina*cosv1 - sinv1*cosa;
                //cout<<cosa<<endl;
                //rotate matrix
                //cosR -sinR
                //sinR cosR
                x = cosRot*v2.x - sinRot*v2.y;
                y = sinRot*v2.x + cosRot*v2.y;
                //cout<<"vectors: ";
                //cout<<it->x<<" "<<it->y<<"/";
                //cout<<x<<" "<<y<<endl;
                int xx = int(x + 0.5 + 1000000) - 1000000;
                int yy = int(y + 0.5 + 1000000) - 1000000;
            //    cout<<"xx: "<<xx<<" "<<x<<endl;
            //    cout<<"yy: "<<yy<<" "<<y<<endl;
            //    cout<<"abs: "<<abs(x-xx)<<" "<<abs(y-yy)<<endl;
                //check if x, y are integers
                if (fabs(x-xx) <= eps && fabs(y-yy) <= eps ){
                  //  cout<<"vectors: ";
                  //  cout<<it->x<<" "<<it->y<<"/";
                  //  cout<<xx<<" "<<yy<<endl;
                    int dx = max(0,max(it->x,xx)) - min(0,min(it->x,xx));
                        int dy = max(0,max(it->y,yy)) - min(0,min(it->y,yy));
                        if (dx <= M && dy <= M)
                            res += (M+1-dx)*(M+1-dy);
                 //   cout<<"res: "<<res<<endl;
                }
                if (1==1){
                //d1 != d2 && (d2 != d3 && d1 != d3)){
                    //reflect along (*it)
                  //  x,y it->x, it->y
                    //angle between (x,y) and (it->x,it->y)
                    double cosv2 = x/sqrt((double)d2);
                    double sinv2 = y/sqrt((double)d2);
                    double cosb = cosa * cosv2 + sina * sinv2;
                    double sinb = sinv2 * cosa - cosv2*sina;
                    sinb = -sinb;
                    //new angle of x,y angle(it) + b
                    double cosnew = cosb*cosa - sina*sinb;
                    double sinnew = sina*cosb + sinb*cosa;
                    x = cosnew * sqrt((double)d2);
                    y = sinnew * sqrt((double)d2);
                    xx = int(x + 0.5 + 1000000) - 1000000;
                    yy = int(y + 0.5 + 1000000) - 1000000;
                //    cout<<"xx: "<<xx<<" "<<x<<endl;
                //    cout<<"yy: "<<yy<<" "<<y<<endl;
                //    cout<<"abs: "<<abs(x-xx)<<" "<<abs(y-yy)<<endl;
                    //check if x, y are integers
                    if (fabs(x-xx) <= eps && fabs(y-yy) <= eps ){
                      //  cout<<"vectors: ";
                       // cout<<it->x<<" "<<it->y<<"/";
                       // cout<<xx<<" "<<yy<<endl;
                       int dx = max(0,max(it->x,xx)) - min(0,min(it->x,xx));
                        int dy = max(0,max(it->y,yy)) - min(0,min(it->y,yy));
                        if (dx <= M && dy <= M)
                            res += (M+1-dx)*(M+1-dy);
                     //   cout<<"res: "<<res<<endl;
                    }
                }
            }
            if (d1 == d2 || d2 == d3 || d3 == d1)
                res/=2;
            cout<<res<<endl;
        }
        cout<<endl;
    }
    return 0;
}
