#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <math.h>
using namespace std;
long long alltriangles[1000][4];
long long int max(long long int a,long long int b){return a>b?a:b;}
long long int min(long long int a,long long int b){return a<b?a:b;}
long long isqrt(long long a)
{
if(a<0)
return 0;
return (long long)(sqrt((double)a+0.01));
}
int ct;
void addit(long long x1,long long y1,long long A,long long B,long long C,bool which)
{
//printf("%lld %lld %lld\n",A,B,C);
long long x3,y3;
long long z=(A+B-C);
long long x2;
if(which)
x2=(z*x1+isqrt(z*z*x1*x1-A*(z*z-4*B*y1*y1)))/(2*A);
else
x2=(z*x1-isqrt(z*z*x1*x1-A*(z*z-4*B*y1*y1)))/(2*A);
long long y2=isqrt(B-x2*x2);
if(x1*x1+y1*y1==A && x2*x2+y2*y2==B && (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)==C)
{
long long minX=min(x1,min(x2,0));
long long minY=min(y1,min(y2,0));
//printf("1--%lld %lld %lld %lld %lld %lld \n",x1,y1,x2,y2,x3,y3);
x1-=minX;
y1-=minY;
x2-=minX;
y2-=minY;
x3=-minX;
y3=-minY;
//printf("--%lld %lld %lld %lld %lld %lld \n",x1,y1,x2,y2,x3,y3);
long long val1=x1*2001+y1;
long long val2=x2*2001+y2;
long long val3=x3*2001+y3;
alltriangles[ct][0]=min(val1,min(val2,val3));
alltriangles[ct][1]=max(val1,max(val2,val3));
alltriangles[ct++][2]=val1+val2+val3-alltriangles[ct][0]-alltriangles[ct][1];
}
}
int main()
{
bool issquare[2000001];
for(int i=0;i<=1000;i++)
issquare[i*i]=1;
int tc;
scanf("%d",&tc);
long long xa,ya,xb,yb,xc,yc;
long long sqsaB[100];long long sqsaC[100];
for(int t=1;t<=tc;t++)
{
long long int M,K;
scanf("%lld %lld",&M,&K);
printf("Case #%d:\n",t);
for(int k=1;k<=K;k++)
{
ct=0;
long long count=0;
scanf("%lld %lld %lld %lld %lld %lld",&xa,&ya,&xb,&yb,&xc,&yc);
long long int A=(xa-xb)*(xa-xb)+(ya-yb)*(ya-yb);
long long int B=(xa-xc)*(xa-xc)+(ya-yc)*(ya-yc);
long long int C=(xc-xb)*(xc-xb)+(yc-yb)*(yc-yb);
int numsqsB=0;
int numsqsC=0;
long long up=(isqrt(C/2));
for(long long int i=0;i<=up;i++)
if(issquare[C-i*i])
sqsaC[numsqsC++]=i;
up=(isqrt(B/2));
for(long long int i=0;i<=up;i++)
if(issquare[B-i*i])
sqsaB[numsqsB++]=i;
for(int i=0;i<numsqsB;i++)
{
for(int b=0;b<2;b++)
{
long long x1,y1;
if(b)
{
x1=sqsaB[i];
y1=isqrt(B-x1*x1);
}
else
{
y1=sqsaB[i];
x1=isqrt(B-y1*y1);
}
addit(x1,y1,B,A,C,0);
addit(x1,y1,B,A,C,1);
addit(-x1,y1,B,A,C,0);
addit(-x1,y1,B,A,C,1);
}
}
for(int i=0;i<numsqsC;i++)
{
for(int b=0;b<2;b++)
{
long long x1,y1;
if(b)
{
x1=sqsaC[i];
y1=isqrt(C-x1*x1);
}
else
{
y1=sqsaC[i];
x1=isqrt(C-y1*y1);
}
addit(x1,y1,C,A,B,0);
addit(x1,y1,C,A,B,1);
addit(-x1,y1,C,A,B,0);
addit(-x1,y1,C,A,B,1);
}
}
for(int i=0;i<numsqsC;i++)
{
for(int b=0;b<2;b++)
{
long long x1,y1;
if(b)
{
x1=sqsaC[i];
y1=isqrt(C-x1*x1);
}
else
{
y1=sqsaC[i];
x1=isqrt(C-y1*y1);
}
addit(x1,y1,C,B,A,0);
addit(x1,y1,C,B,A,1);
addit(-x1,y1,C,B,A,0);
addit(-x1,y1,C,B,A,1);
}
}
for(int i=0;i<ct;i++)
{
bool there=0;
for(int j=0;j<i;j++)
{
if(alltriangles[j][0]==alltriangles[i][0] && alltriangles[j][1]==alltriangles[i][1] && alltriangles[j][2]==alltriangles[i][2])
{
there=1;
break;
}
}
if(!there)
{
long long x1=alltriangles[i][0]/2001;long long y1=alltriangles[i][0]%2001;
long long x2=alltriangles[i][1]/2001;long long y2=alltriangles[i][1]%2001;
long long x3=alltriangles[i][2]/2001;long long y3=alltriangles[i][2]%2001;
long long minX=min(x1,min(x2,x3));
long long maxX=max(x1,max(x2,x3));
long long minY=min(y1,min(y2,y3));
long long maxY=max(y1,max(y2,y3));
//printf("%lld %lld %lld %lld %lld %lld\n",x1,y1,x2,y2,x3,y3);
if(maxX-minX<=M && maxY-minY<=M)
count+=(M-(maxX-minX)+1)*(M-(maxY-minY)+1);
}
}
printf("%lld\n",count);
}
}
} 