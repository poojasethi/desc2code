#include <iostream>
#include <set>
#include <cstdlib>
#include <cstdio>
#include <cmath>

using namespace std;

#define eps 1e-7

class Point{public:
    int x,y;
    Point(){ x = y = 0;};
    Point(int a, int b) : x(a), y(b) {};
    int distSquare(Point that){
        return (that.x-x)*(that.x-x) + (that.y-y)*(that.y-y);
    };
    bool operator < (const Point &that) const{
        return make_pair(x,y) < make_pair(that.x,that.y);
    }
};

int M,K;
Point p1,p2,p3;
set<Point> v;//point here is used as vector
Point v1,v2;//vector 2
int res;

int main()
{
 //   int m;
//    cin>>m;
//    freopen("input.txt","r",stdin);
    int t;
    scanf("%d",&t);
    for (int pp = 0; pp < t; pp++){
        scanf("%d%d",&M,&K);
        printf("Case #%d:\n",pp+1);
        for (int k = 0; k < K; k++){
            scanf("%d%d%d%d%d%d",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y);
            //cout<<p1.x<<" "<<p1.y<<" "<<p2.x<<" "<<p2.y<<" "<<p3.x<<" "<<p3.y<<endl;
            res = 0;
            int d1 = p1.distSquare(p2);
            int d2 = p1.distSquare(p3);
            int d3 = p2.distSquare(p3);
            v.clear();
            v2.x = (p3.x - p1.x);
            v2.y = (p3.y - p1.y);
            double cosv1 = (double)(p2.x - p1.x)/sqrt((double)d1);
            double sinv1 = (double)(p2.y - p1.y)/sqrt((double)d1);
            double cosv2 = (double)v2.x/sqrt((double)d2);
            double sinv2 = (double)v2.y/sqrt((double)d2);
            double cosb = cosv1 * cosv2 + sinv1 * sinv2;
            double sinb = sinv2 * cosv1 - cosv2*sinv1;
            sinb = -sinb;
            for (int i = 0; i*i <= d1; i++){
                int j = (int)sqrt((double)d1 - i*i + eps);
                if (i * i + j * j == d1){
                    v.insert(Point(i,j));
                    v.insert(Point(-i,j));
                    v.insert(Point(i,-j));
                    v.insert(Point(-i,-j));
                };
            }
            set<Point>::iterator it = v.begin();
            for (; it != v.end(); it++){
                //rotate v2
                double x;
                double y;
                double cosa = (double)it->x/sqrt((double)d1);
                double sina = (double)it->y/sqrt((double)d1);
                //calc rotate angle: angle(v1) - angle(a)
                double cosRot = cosa*cosv1 + sina*sinv1;
                double sinRot = sina*cosv1 - sinv1*cosa;
                //cout<<cosa<<endl;
                //rotate matrix
                //cosR -sinR
                //sinR cosR
                x = cosRot*v2.x - sinRot*v2.y;
                y = sinRot*v2.x + cosRot*v2.y;
                //cout<<"vectors: ";
                //cout<<it->x<<" "<<it->y<<"/";
                //cout<<x<<" "<<y<<endl;
                int xx = rint(x);
                int yy = rint(y);
            //    cout<<"xx: "<<xx<<" "<<x<<endl;
            //    cout<<"yy: "<<yy<<" "<<y<<endl;
            //    cout<<"abs: "<<abs(x-xx)<<" "<<abs(y-yy)<<endl;
                //check if x, y are integers
                if (fabs(x-xx) <= eps && fabs(y-yy) <= eps ){
                  //  cout<<"vectors: ";
                  //  cout<<it->x<<" "<<it->y<<"/";
                  //  cout<<xx<<" "<<yy<<endl;
                    int dx = max(0,max(it->x,xx)) - min(0,min(it->x,xx));
                        int dy = max(0,max(it->y,yy)) - min(0,min(it->y,yy));
                        if (dx <= M && dy <= M)
                            res += (M+1-dx)*(M+1-dy);
                 //   cout<<"res: "<<res<<endl;
                }
                if (1==1){
                //d1 != d2 && (d2 != d3 && d1 != d3)){
                    //reflect along (*it)
                  //  x,y it->x, it->y
                    //angle between (x,y) and (it->x,it->y): -b

                    //new angle of x,y angle(it) + b
                    double cosnew = cosb*cosa - sina*sinb;
                    double sinnew = sina*cosb + sinb*cosa;
                    x = cosnew * sqrt((double)d2);
                    y = sinnew * sqrt((double)d2);
                    xx = rint(x);
                    yy = rint(y);
                //    cout<<"xx: "<<xx<<" "<<x<<endl;
                //    cout<<"yy: "<<yy<<" "<<y<<endl;
                //    cout<<"abs: "<<abs(x-xx)<<" "<<abs(y-yy)<<endl;
                    //check if x, y are integers
                    if (fabs(x-xx) <= eps && fabs(y-yy) <= eps ){
                      //  cout<<"vectors: ";
                       // cout<<it->x<<" "<<it->y<<"/";
                       // cout<<xx<<" "<<yy<<endl;
                       int dx = max(0,max(it->x,xx)) - min(0,min(it->x,xx));
                        int dy = max(0,max(it->y,yy)) - min(0,min(it->y,yy));
                        if (dx <= M && dy <= M)
                            res += (M+1-dx)*(M+1-dy);
                     //   cout<<"res: "<<res<<endl;
                    }
                }
            }
            if (d1 == d2 || d2 == d3 || d3 == d1)
                res/=2;
            printf("%d\n",res);
        }
        printf("\n");
    }
    return 0;
}
