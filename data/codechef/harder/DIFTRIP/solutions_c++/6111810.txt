#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <deque>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <string>
#include <stack>
#include <sstream>
#include <vector>
#include <numeric>

#define FOR(i, a, b) for(int i = a; i <= b; ++i)
#define FRD(i, a, b) for(int i = a; i >= b; --i)
#define FR(i, a) for(int i = 0; i < a; ++i)
#define REP(i, a) for(int i = 0; i <= a; ++i)
#define pb push_back
#define sz(x) (int)x.size()
#define reset(a, b) memset(a, b, sizeof a)
#define bug(x) cout << #x << " = " << x << endl
#define bg(a, m, n) FOR(i, m, n) cout << a[i] << " "; cout << endl
using namespace std;

typedef long long ll;
typedef unsigned long long qword;

const int maxN = 1e5 + 5;

int n;
int deg[maxN], h[maxN];
vector <int> head[maxN];
int parent[maxN][25], RA[maxN][25];
pair < pair <int, int> , int > a[maxN];

inline void DFS(int u, int pre) {
    FR(i, sz(head[u])) {
        int v = head[u][i];
        if (pre == v) continue;
        h[v] = h[u] + 1;
        parent[v][0] = u;
        DFS(v, u);
    }
}

void Build() {
    FOR(i, 1, n) RA[i][0] = deg[i];
    FOR(k, 1, 20) {
        FOR(i, 1, n) {
            a[i].first.first = RA[i][k-1];
            if (parent[i][k-1] != 0) a[i].first.second = RA[parent[i][k-1]][k-1];
            else
                a[i].first.second = -1;
            a[i].second = i;
        }
        sort(a + 1, a + n + 1);
        RA[a[1].second][k] = 1;
        FOR(i, 2, n) {
            RA[a[i].second][k] = RA[a[i-1].second][k];
            if (a[i].first.first != a[i-1].first.first || a[i].first.second != a[i-1].first.second)
                ++RA[a[i].second][k];
        }
    }
}

int Cal(int u, int v) {
    if (RA[u][20] == RA[v][20]) return min(h[u], h[v]);
    int res = 0;
    FRD(k, 20, 0)
        if (RA[u][k] == RA[v][k]) {
            res += (1 << k);
            u = parent[u][k];
            v = parent[v][k];
            if (u == 0 || v == 0) break;
        }
    return res;
}

int main() {
    scanf("%d\n", &n);
    FOR(i, 1, n - 1) {
        int u, v; scanf("%d%d", &u, &v);
        head[u].pb(v); head[v].pb(u);
        ++deg[u]; ++deg[v];
    }
    h[1] = 1;
    DFS(1, 0);
    FOR(j, 1, 20)
        FOR(i, 1, n)
            parent[i][j] = parent[parent[i][j-1]][j-1];
    Build();
    ll res = h[a[1].second];
    FOR(i, 2, n)
        res += h[a[i].second] - Cal(a[i-1].second, a[i].second);
    cout << res;
    return 0;
}

