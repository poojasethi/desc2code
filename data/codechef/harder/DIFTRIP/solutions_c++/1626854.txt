#include <cstdio>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

#define N 100000

vector <int> adj[N];
int anc[20][N], len[N], step;

struct entry {
	int nr[2], p;
} L[N];

int P[20][N];

void dfs(int u) {
	for(int i = 0; i < adj[u].size(); i ++) {
		if(adj[u][i] != anc[0][u]) {
			len[adj[u][i]] = len[u] + 1;
			anc[0][adj[u][i]] = u;
			dfs(adj[u][i]);
		}
	}
}

int cmp(struct entry a, struct entry b) { 
	return (a.nr[0] == b.nr[0]) ? (a.nr[1] < b.nr[1] ? 1 : 0) : (a.nr[0] < b.nr[0] ? 1 : 0);
}

int lcp(int x, int y) {
	int k, ret = 0;
	int maxlen = min(len[x], len[y]);
	for(k = step - 1; k >= 0 && x >= 0 && y >= 0; k --) {
		maxlen = min(len[x], len[y]);
		if((P[k][x] == P[k][y]) && ((1 << k) <= maxlen))
			x = anc[k][x], y = anc[k][y], ret += 1 << k;
	}
	//assert(ret <= min(len[x], len[y]));
	return ret;
}

int main() {
	int n;
	scanf(" %d", &n);
	for(int i = 0; i < n - 1; i ++) {
		int u, v;
		scanf(" %d %d", &u, &v);
		u --;
		v --;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	len[0] = 1;
	anc[0][0] = -1;
	dfs(0);

	for(int k = 1; k < 20; k ++) {
		for(int i = 0; i < n; i ++) {
			int curranc = anc[k - 1][i];
			if(curranc == -1) {
				anc[k][i] = -1;
			}
			else {
				anc[k][i] = anc[k - 1][curranc];
			}
		}
	}

	for(int i = 0; i < n; i ++) {
		P[0][i] = adj[i].size();
	}

	int k, cnt;
	for(k = 1, step = 1, cnt = 1; cnt >> 1 < n; k ++, step ++, cnt <<= 1) {
		for(int i = 0; i < n; i ++) {
			int hop = anc[k - 1][i];
			L[i].nr[0] = P[k - 1][i];
			if(hop == -1)
				L[i].nr[1] = -1;
			else
				L[i].nr[1] = P[k - 1][hop];
			L[i].p = i;
		}
		sort(L, L + n, cmp);
		for(int i = 0; i < n; i ++) {
			P[k][L[i].p] = ((i > 0) && (L[i].nr[0] == L[i - 1].nr[0]) && (L[i].nr[1] == L[i - 1].nr[1])) ? P[k][L[i - 1].p] : i;
		}
	}
	//printf("Step = %d\n", step);
	long long ans = len[L[0].p];
	//printf("%lld\n", ans);
	for(int i = 0; i < n - 1; i ++) {
		int comm = lcp(L[i].p, L[i + 1].p);
		//printf("common = %d\n", comm);
		ans += (long long) (len[L[i + 1].p] - comm);
		assert(len[L[i + 1].p] - comm >= 0);
	}

	printf("%lld\n", ans);

	/*for(int i = 0; i < n; i ++) {
		printf("%d ", L[i].p);
	}*/

	return 0;

}