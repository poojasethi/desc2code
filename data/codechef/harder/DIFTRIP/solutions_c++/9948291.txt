#include <cstdio>
#include <vector>
#include <cstring>
using namespace std;
typedef long long int LL;
const int MAXN = 100005;

int n, q[MAXN], dep[MAXN], qcnt, fa[MAXN], sa[MAXN], d[MAXN];
int g[MAXN], to[MAXN << 1], nxt[MAXN << 1], edgeSize, son[MAXN];
int auxA[MAXN], auxB[MAXN], auxSort[MAXN], auxVal[MAXN], up[MAXN];
int pre[MAXN][17], rank[17][MAXN], height[MAXN], id[MAXN], rk[MAXN];
vector <int> down[MAXN];

void bfsPrep(){
	int i, p, now;
	q[1] = dep[1] = qcnt = 1;
	for(i = 1; i <= n; ++ i){
		now = q[i]; down[up[now]].push_back(now);
		for(p = 1, pre[now][0] = fa[now]; (1 << p) < dep[now]; ++ p)
			pre[now][p] = pre[pre[now][p - 1]][p - 1];
		for(p = g[now]; p; p = nxt[p]){
			if(to[p] == fa[now]) continue;
			son[now] = to[p];
			up[to[p]] = fa[to[p]] = now;
			dep[to[p]] = dep[now] + 1;
			q[++ qcnt] = to[p];
		}
	}
}
void addEdge(int u, int v){
	nxt[++ edgeSize] = g[u];
	to[g[u] = edgeSize] = v;
	++ d[v];
}
int main(){
	int i, j, k, u, v, p, *x = auxA, *y = auxB, *t, sigma = 0, level = 0;
	LL ans = 0LL; scanf("%d", &n);
	for(i = 1; i < n; ++ i){
		scanf("%d%d", &u, &v);
		addEdge(u, v), addEdge(v, u);
	} bfsPrep();
	for(i = 1; i <= n; ++ i)
		if(d[i] > sigma) sigma = d[i];
	for(i = 1; i <= n; ++ i) ++ auxSort[x[i] = d[i]];
	for(i = 2; i <= sigma; ++ i) auxSort[i] += auxSort[i - 1];
	for(i = n; i; -- i) sa[auxSort[x[i]] --] = i;
	memcpy(rank[0], x, sizeof(int) * (n + 1));
	for(j = 1, p = 0; j < dep[q[n]]; j <<= 1, sigma = p){
		for(i = 1, p = 0; dep[q[i]] <= j; ++ i) y[++ p] = q[i];
		for(i = 1; i <= n; ++ i)
			for(k = 0; k < int(down[sa[i]].size()); ++ k)
				y[++ p] = down[sa[i]][k];
		for(i = 1; i <= sigma; ++ i) auxSort[i] = 0;
		for(i = 1; i <= n; ++ i) ++ auxSort[auxVal[i] = x[y[i]]];
		for(i = 2; i <= sigma; ++ i) auxSort[i] += auxSort[i - 1];
		for(i = n; i; -- i) sa[auxSort[auxVal[i]] --] = y[i];
		for(t = x, x = y, y = t, x[sa[1]] = p = 1, i = 2; i <= n; ++ i)
			if(y[sa[i]] == y[sa[i - 1]] && y[up[sa[i]]] == y[up[sa[i - 1]]]) x[sa[i]] = p;
			else x[sa[i]] = ++ p;
		memcpy(rank[++ level], x, sizeof(int) * (n + 1));
		for(i = n; i; -- i) up[i] = up[up[i]];
		for(i = 0; i <= n; ++ i) down[i].clear();
		for(i = 1; i <= n; ++ i) down[up[i]].push_back(i);
	}
	for(i = 1; i <= n; ++ i) rk[sa[i]] = i;
	for(i = 1; i <= n; ++ i){
		ans += dep[i];
		if(rk[i] == 1) continue;
		for(j = i, k = sa[rk[i] - 1], p = 16; p >= 0; -- p){
			if((1 << p) > min(dep[j], dep[k])) continue;
			if(rank[p][j] == rank[p][k]) j = pre[j][p], k = pre[k][p], ans -= (1 << p);
		}
	}
	printf("%lld\n", ans);
	return 0;
}