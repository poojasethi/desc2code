#include"stdio.h"
using namespace std;

int G[50][50];		int G1[50][50];
void inverse(int x,int p,int &a,int &b)
{
	if(x==1){a=1,b=0;return;}
	inverse(p%x,x,b,a);
	long long ap=a-(long long)(p/x)*b;
	if(ap>p||ap<0){ap=(p+(ap%p))%p;b=(1-ap*x)/p;}
	a=(int) ap;
}
int inverse (int x,int p)
{
	int l,m;
	inverse(x,p,l,m);
	return l;
}
long long multiply(long long a,long long b,long long p)
{
	long long res=0,tt=b;
	while(a)
	{
		if(a&1){res=res+tt;if(res>=p)res-=p;}
		tt=tt<<1;if(tt>=p)tt-=p;
		a>>=1;
	}
	return res;
}
void swap(int row1,int row2,int n)
{
	for(int x=0;x<n;x++)
		G[row1][x]^=G[row2][x],
		G[row2][x]^=G[row1][x],
		G[row1][x]^=G[row2][x];
}
int evaluate_determinant(int n,int p)
{
	if(n==0)return G[0][0];
	for(int x=n;x>=0;x--)
	{
		if(G[x][n]!=0)
		{
			if(x!=n)
			swap(x,n,n);
			break;
		}
	}
	if(G[n][n]==0)return 0;
	int mul=inverse(G[n][n],p);
	for(int x=0;x<n;x++)
	{
		for(int y=0;y<n;y++)
		{
			G[x][y]-=((((long long)G[x][n]*mul)%p)*G[n][y])%p-p;
			if(G[x][y]>=p)G[x][y]-=p;
		}
	}
	return (G[n][n]*(long long)evaluate_determinant(n-1,p))%p;
}
int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		int N,M;
		scanf("%d%d",&N,&M);
		for(int x=0;x<N;x++)
			for(int y=0;y<N;y++)
			{
				G[x][y]=G1[x][y]=0;
			}
		while(M--)
		{
			int a,b;
			scanf("%d%d",&a,&b);
			a--;b--;
			G[a][b]=G1[a][b]=G[b][a]=G1[b][a]=-1;
			G[a][a]++;G1[a][a]++;G[b][b]++;G1[b][b]++;
		}
		if(N==1){printf("1\n");continue;}
		long long b=evaluate_determinant(N-2,1000000007);
		for(int x=0;x<N;x++)for(int y=0;y<N;y++)G[x][y]=G1[x][y];
		long long a=evaluate_determinant(N-2,795028841);
		long long result = (multiply(a,331819659322737599ll,795028846565201887ll)+multiply(b,463209187242464289ll,795028846565201887ll))%795028846565201887ll;
		printf("%Ld\n",result,a,b);
	}
}