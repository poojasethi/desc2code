#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

#define SI ({int x;scanf("%d",&x);x;})
#define MX 100003
#define lc(x) ((x)<<1)
#define rc(x) (((x)<<1)+1)
#define INF 1123456789
#define PB(x)  push_back(x)
#define ALL(v) (v).begin(), (v).end()

pair<int,int> schools[MX];

vector<int> st[4*MX];
int n, x[MX], y[MX];
int ans, y_lim, mnf, mxf;

void specialLine(int l, int h, vector<int> &v)
{
	int ytop = y[l];
	v.PB(y[l]);
	for(int i=l+1;i<=h;i++)
		if(y[i]<ytop)
		{
			v.PB(y[i]);
			ytop = y[i];
		}
	reverse(ALL(v));
}


void init(int p,int l,int h)
{
	specialLine(l,h,st[p]);
	if(l<h)
	{
		int m = (l+h)>>1;
		init(lc(p),l,m);
		init(rc(p),m+1,h);
	}
}

void solve(int p,int l,int h)
{
	if(x[h]<mnf || x[l]>mxf) return;

	if(x[l]>=mnf && x[h]<=mxf)
	{
		vector<int>::iterator it = lower_bound(ALL(st[p]),y_lim);

		if(it>st[p].begin())
		{
			ans += it - st[p].begin();
			y_lim = st[p].front();
		}

		return;
	}

	if(l<h)
	{
		int m = (l+h)>>1;
		solve(lc(p),l,m);
		solve(rc(p),m+1,h);
	}
}


int main()
{
	for(int kases = 1; kases--; )
	{
		int N = SI;
		for(int i=0; i<N; i++)
		{
			int dis = SI, fee = SI;
			schools[i] = make_pair(fee,dis);
		}
		sort(schools, schools+N);
		n=0;
		for(int i=0;i<N;i++)
		{
			if(i>0 && schools[i].first == schools[i-1].first) continue;
			x[n] = schools[i].first;
			y[n] = schools[i].second;
			n++;
		}

		init(1,0,n-1);

		int Q = SI;
		while(Q--)
		{
			int mnd = SI;
			mnf = SI, mxf = SI;
			y_lim = mnd + 1;
			ans = 0;
			solve(1,0,n-1);
			printf("%d\n",ans);
		}

	}

	return 0;
}
