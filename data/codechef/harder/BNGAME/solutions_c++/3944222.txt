#include <algorithm>
#include <iostream>
#include <sstream>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <cmath>
#include <deque>
#include <ctime>
#include <list>
#include <set>
#include <map>
//zlb//

using namespace std;

typedef long long     LL;
typedef pair<int,int> pii;

double PI  = acos(-1);
double EPS = 1e-7;
int INF    = 1000000000;
int MOD    = 1000000007;
int MAXINT = 2147483647;
LL INFLL   = 1000000000000000000LL;
LL MAXLL   = 9223372036854775807LL;

#define fi            first
#define se            second
#define mp            make_pair
#define pb            push_back
#define SIZE(a)       (int)a.size()
#define MIN(a, b)     (a) = min((a), (b))
#define MAX(a, b)     (a) = max((a), (b))
#define input(in)     freopen(in,"r",stdin)
#define output(out)   freopen(out,"w",stdout)
#define RESET(a, b)   memset(a,b,sizeof(a))
#define FOR(a, b, c)  for (int (a)=(b); (a)<=(c); (a)++)
#define FORD(a, b, c) for (int (a)=(b); (a)>=(c); (a)--)
#define FORIT(a, b)   for (__typeof((b).begin()) a=(b).begin(); a!=(b).end(); a++)

int mx[8] = {-1,1,0,0,-1,-1,1,1};
int my[8] = {0,0,-1,1,-1,1,-1,1};

// ------------ //

int A[500005];
int B[500005];
vector<pii> byA;
vector<pii> byB;
set<int> in;
multiset<int> dif;

void ins(int k)
{
	in.insert(k);
	set<int>::iterator itlow,itup = in.lower_bound(k);
	itlow = itup;
	itlow--;
	itup++;
	dif.erase(dif.find(*itup-*itlow));
	dif.insert(k-*itlow);
	dif.insert(*itup-k);
}

void rem(int k)
{
	if (in.find(k)==in.end()) return;
	set<int>::iterator itlow,itup = in.lower_bound(k);
	itlow = itup;
	itlow--;
	itup++;
	dif.insert(*itup-*itlow);
	dif.erase(dif.find(k-*itlow));
	dif.erase(dif.find(*itup-k));
	in.erase(k);
}

int maks()
{
	return *dif.rbegin();
}

int main()
{
	int n,k;
	scanf("%d%d",&n,&k);
	FOR(a,1,n)
	{
		scanf("%d %d",&A[a],&B[a]);
		byA.pb(mp(A[a],a));
		byB.pb(mp(B[a],a));
	}
	
	in.insert(0);
	in.insert(n+1);
	dif.insert(n+1);

	sort(byA.begin(),byA.end());
	sort(byB.rbegin(),byB.rend());
	int valB = 0;
	int mins = MAXINT;
	FORD(valA,32000,1)
	{
		while(SIZE(byB) && maks() > k)
		{
			if (A[byB.back().se] <= valA)
			{
				ins(byB.back().se);
			}
			valB = byB.back().fi;
			byB.pop_back();
		}
		if (maks() <= k) MIN(mins,valA*valB);
		while(SIZE(byA) && byA.back().fi == valA)
		{
			rem(byA.back().se);
			byA.pop_back();
		}
	}
	printf("%d\n",mins);

}
