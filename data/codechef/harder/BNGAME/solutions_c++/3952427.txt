#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <deque>
#include <stack>
#include <cstring>
#include <string>
#include <sstream>
#include <set>
#include <queue>
#define DFS_WHITE -1
#define DFS_GRAY 0
#define DFS_BLACK 1
#define sf scanf
#define sfi1(a) scanf("%d", &a)
#define sfi2(a,b) scanf("%d %d", &a, &b)
#define sfi3(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define sfi4(a,b,c,d) scanf("%d %d %d %d", &a, &b, &c, &d)
#define sfll1(a) scanf("%lld", &a)
#define sfll2(a,b) scanf("%lld %lld", &a, &b)
#define sfll3(a,b,c) scanf("%lld %lld %lld", &a, &b, &c)
#define sfll4(a,b,c,d) scanf("%lld %lld %lld %lld", &a, &b, &c, &d)
#define sfc1(a) scanf("%c", &a)
#define sfc2(a,b) scanf("%c %c", &a, &b)
#define sfc3(a,b,c) scanf("%c %c %c", &a, &b, &c)
#define sfc4(a,b,c,d) scanf("%c %c %c %c", &a, &b, &c, &d)
#define sfd1(a) scanf("%lf", &a)
#define sfd2(a,b) scanf("%lf %lf", &a, &b)
#define sfd3(a,b,c) scanf("%lf %lf %lf", &a, &b, &c)
#define sfd4(a,b,c,d) scanf("%lf %lf %lf %lf", &a, &b, &c, &d)
#define pf printf
#define loop(i,n) for(int i=0; i<n; i++)
#define MAXN 600050
#define INF 100000000000ll
#define MINAB -1;
#define test(d) cout << "test " << d << endl;
#define start(a,b) cout <<"---------start-----" << a << " " << b << "-----------\n";
#define testReturn(i,v) cout <<"return frm " << i << " : " << v << endl;
#define testFound(i,v) cout <<"found value " << i << " : " << v << endl;
#define testBaseRet(i,v) cout <<"return frm base condition " << i << " : " << v << endl;



using namespace std;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;



//variable
int n, k, B[MAXN], bad_cnt;
VPII VA;
set<int> valid;
priority_queue<pair<int, int> > pq;
LL ans = 2000000000ll;
//method




void Init(){
    valid.insert(-1); valid.insert(n);
    bad_cnt = 1;
}

void Read(){
    sfll2(n,k);

    for(int i=0; i<n; i++){
        int a, b;
        sfi2(a,B[i]);
        VA.push_back(make_pair(a, i));
    }
    sort(VA.begin(), VA.end());
}

void AddPt(int pt){
   // cout << "add " << pt << endl;
    valid.insert(pt);
    set<int>::iterator it = valid.find(pt);
    set<int>::iterator lit = --it;
    set<int>::iterator rit = ++it; rit++;

    //cout << "right " << *rit << " middle " << *it << " left " << *lit << endl;
    bad_cnt -= *rit - *lit > k;
    bad_cnt += *it-*lit > k;
    bad_cnt += *rit-*it > k;
   // cout << "bad cnt " << bad_cnt << endl;
}

void erasePoint(int pt){
    //cout <<"erase " << pt << endl;
    set<int>::iterator it = valid.find(pt);
    set<int>::iterator lit = --it;
    set<int>::iterator rit = ++it; rit++;

    bad_cnt += *rit - *lit > k;
    bad_cnt -= *it-*lit > k;
    bad_cnt -= *rit-*it > k;
    valid.erase(pt);
    //cout << "bad cnt " << bad_cnt << endl;
}

int main(){
    //freopen("in.txt", "r", stdin);

    Read();
    Init();
    loop(i,n){
        AddPt(VA[i].second);
        pq.push( make_pair(B[VA[i].second], VA[i].second) );

        int candidate = pq.top().second;
        erasePoint(candidate);
        pq.pop();

        while(bad_cnt==0  && !pq.empty() ){
            candidate = pq.top().second;
            pq.pop();
            erasePoint(candidate);
        }

        AddPt(candidate);
        pq.push(make_pair(B[candidate], candidate));

        if(bad_cnt == 0){
            //cout << "bad cont o " << ans << endl;
            ans = min(ans, (LL)VA[i].first * pq.top().first);
        }
    }

    cout << ans << endl;
    //while(1);
    return 0;

}
