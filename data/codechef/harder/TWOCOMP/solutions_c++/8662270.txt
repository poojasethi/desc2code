#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
typedef long long LL;
typedef double db;
const int N=110000;
namespace __{
	const int N=1500;
	int head[N],np[N*N],p[N*N],flow[N*N],tot;
	int node;int S,T;
	void init(){
		S=1;T=2;node=2;tot=1;
	}
	inline void link(int &a,int &b,int c){
		if(!a)a=++node;
		if(!b)b=++node;
		++tot;p[tot]=b;np[tot]=head[a];head[a]=tot;flow[tot]=c;
		++tot;p[tot]=a;np[tot]=head[b];head[b]=tot;flow[tot]=0;
	}
	int q[N],inq[N],dis[N];
	int bfs(){
		q[q[0]=1]=S;
		rep(i,1,node)inq[i]=0,dis[i]=-1;
		dis[S]=0;inq[S]=1;
		rep(i,1,q[0]){
			int x=q[i];
			for(int u=head[x];u;u=np[u])if(flow[u])if(dis[p[u]]==-1){
				q[++q[0]]=p[u];dis[p[u]]=dis[x]+1;
			}
		}
		return dis[T];
	}
	int dinic(int x,int ff){
		int ret=0;
		if(x==T)return ff;
		for(int u=head[x];u;u=np[u])if(flow[u])if(dis[p[u]]==dis[x]+1){
			if(!ff)break;
			int tmp=dinic(p[u],min(ff,flow[u]));
			flow[u]-=tmp;flow[u^1]+=tmp;
			ff-=tmp;ret+=tmp;
		}
		if(!ret)dis[x]=-1;
		return ret;
	}
	int getans(){
		int ans=0;
		while(bfs()!=-1)ans+=dinic(S,1e9);
		return ans;
	}
};
int dep[N],fa[N];
int f[20][N];
int head[N],np[N*2],p[N*2],tot;
inline void link(int a,int b){
	++tot;p[tot]=b;np[tot]=head[a];head[a]=tot;
	++tot;p[tot]=a;np[tot]=head[b];head[b]=tot;
}
void dfs(int x){
	dep[x]=dep[fa[x]]+1;
	for(int u=head[x];u;u=np[u])if(p[u]^fa[x]){
		fa[p[u]]=x;dfs(p[u]);
	}
}
int n,m1,m2;
int u1[N],v1[N],w1[N];
int u2[N],v2[N],w2[N];
int num1[N],num2[N];
inline int lca(int x,int y){
	if(dep[x]<dep[y])swap(x,y);
	per(i,16,0)if((1<<i)&(dep[x]-dep[y]))x=f[i][x];
	if(x==y)return x;
	per(i,16,0)if(f[i][x]^f[i][y]){
		x=f[i][x];y=f[i][y];
	}
	return fa[x];
}
inline int dis(int x,int y){
	int lp=lca(x,y);
	return dep[x]+dep[y]-2*dep[lp];
}
inline bool across(int u,int v,int x,int y){
	int l1=lca(u,v);
	int l2=lca(x,y);
	if(dis(u,l2)+dis(l2,v)==dis(u,v))return 1;
	if(dis(x,l1)+dis(l1,y)==dis(x,y))return 1;
	return 0;
}
int main(){
	scanf("%d%d%d",&n,&m1,&m2);
	rep(i,1,n-1){
		int x,y;scanf("%d%d",&x,&y);
		link(x,y);
	}
	rep(i,1,m1)scanf("%d%d%d",&u1[i],&v1[i],&w1[i]);
	rep(i,1,m2)scanf("%d%d%d",&u2[i],&v2[i],&w2[i]);
	dfs(1);
	rep(i,1,n)f[0][i]=fa[i];
	rep(j,1,16)rep(i,1,n)f[j][i]=f[j-1][f[j-1][i]];
	
	__::init();
	rep(i,1,m1)__::link(__::S,num1[i],w1[i]);
	rep(i,1,m2)__::link(num2[i],__::T,w2[i]);
	int ans=0;
	rep(i,1,m1)ans+=w1[i];
	rep(i,1,m2)ans+=w2[i];
	rep(i,1,m1)rep(j,1,m2){
		if(across(u1[i],v1[i],u2[j],v2[j]))
		__::link(num1[i],num2[j],1e9);
	}
	printf("%d\n",ans-__::getans());
	return 0;
}



