#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
 
using namespace std;
 
int radix[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000 };
 
inline void print_number(int num, char*& p)
{	
	if ( num < 0 ) { *p++ = '-'; num = -num; }
	int count = 1; 	
	while ( radix[count] <= num ) count ++;		
	for ( int i = count - 1 ; i >= 0 ; i -- )	
	{		
		int digit = num / radix[i];		
		*p++ = digit + '0';		
		num -= radix[i] * digit;
	}
}
 
inline void read_number(int& num, char*&p)
{
	num = 0;
	while ( (unsigned char)(*p - '0') > 9 ) p ++;
	while ( (unsigned char)(*p - '0') <= 9 ) num = num * 10 + *p++ - '0';
}
 
#define MAX_N 100000
char line_s[MAX_N*9];
int P[MAX_N];
int Q[MAX_N];
int T[MAX_N];
 
void merge(int* P, int left, int middle, int right)
{
    T[middle] = P[middle];
    for ( int i = middle - 1; i >= left ; i -- ) T[i] = min(T[i+1], P[i]);
#if 0
	for ( int r = middle + 1 ; r <= right ; r ++ )
	{
		int m = r - 1;
		int tmp = P[r];
		while ( m >= left && P[m] > P[r] + 1 ) m --;
		if ( m == r - 1 ) break;
		for ( int i = r ; i > m+1 ; i -- ) P[i] = P[i-1];
		P[m+1] = tmp;
	}
#else
 
	if ( P[middle] <= P[middle+1] + 1 ) return;
	int m = left;
	int l = left, r = middle+1;
	while ( l <= middle && r <= right )
	{
        if ( T[l] > P[r] + 1 )
      		Q[m++] = P[r++];
        else
    		Q[m++] = P[l++];
	}
	while ( l <= middle ) Q[m++] = P[l++];
	while ( r <= right ) Q[m++] = P[r++];
	for ( int i = left; i <= right; i ++ ) P[i] = Q[i];
#endif
}
 
void merge_sort(int* P, int min, int max)
{
	if ( max - min <= 0 ) 
	{
		return;
	}
	if ( max - min == 1 )
	{
		if ( P[min] > P[max] + 1 )
			swap(P[min], P[max]);
		return;
	}
 
	int middle = ( min + max ) >> 1;
	merge_sort(P, min, middle);
	merge_sort(P, middle+1, max);
	merge(P, min, middle, max);
}
 
 
char* line;
void solve()
{
	int N;
	scanf("%d\n", &N);
	gets(line_s);
	line = line_s;
	for ( int i = 0; i < N; i ++ ) read_number(P[i], line);
	merge_sort(P, 0, N-1);
	line = line_s;
	for ( int i = 0; i < N; i ++ )
	{
		print_number(P[i], line);
		*line++ = ' ';
	}
	puts(line_s);
}
 
 
int main(int argc, char* argv[])
{
	line = line_s;
#ifdef TEST
	freopen("1.txt", "r", stdin);
#endif
 
	int t;
	scanf("%d\n", &t);
	//cin >> t;
	for ( int i = 0 ; i < t ; i ++ )
		solve();
 
	return 0;
}  