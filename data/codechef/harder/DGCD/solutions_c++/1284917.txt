#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 100010;

int mabs(int x)
{
	if(x < 0) return -x;
	return x;
}

int gcd(int a,int b)
{
	if(a < 0) a = mabs(a);
	if(b < 0) b = mabs(b);
	if(a < b) swap(a,b);
	int c;
	while(b) {
		c = b;
		b = a % b;
		a = c;
	}
	return a;	
}

struct tree
{
	int lt,rt,dif,lx,rx,flag;
}a[N * 4];

int val[N];

void init(int lt,int rt,int step)
{
	a[step].lt = lt;
	a[step].rt = rt;
	if(lt == rt) {
		a[step].dif = a[step].flag = 0;
		a[step].lx = a[step].rx = val[lt];
		return;
	}
	int mid = (lt + rt) / 2;
	init(lt,mid,2 * step);
	init(mid + 1,rt,2 * step + 1);
	int d = gcd(a[2 * step].dif,a[2 * step + 1].dif);
	a[step].dif = gcd(d,mabs(a[2 * step + 1].lx - a[2 * step].rx));
	a[step].lx = a[2 * step].lx;
	a[step].rx = a[2 * step + 1].rx;
//	a[step].gcd = gcd(a[step].lx,a[step].dif);
}

void down(int step)
{
	a[2 * step].flag += a[step].flag;
	a[2 * step + 1].flag += a[step].flag;
	a[2 * step].lx += a[step].flag;
	a[2 * step].rx += a[step].flag;
	a[2 * step + 1].lx += a[step].flag;
	a[2 * step + 1].rx += a[step].flag;
//	a[2 * step].gcd = gcd(a[2 * step].lx,mabs(a[2 * step].dif));
//	a[2 * step + 1].gcd = gcd(a[2 * step + 1].lx,mabs(a[2 * step + 1].dif));
	a[step].flag = 0;
}
void insert(int lt,int rt,int step,int x)
{
	if(a[step].lt == lt && a[step].rt == rt) {
		a[step].flag += x;
		a[step].lx += x;
		a[step].rx += x;
	//	a[step].gcd = gcd(a[step].lx,a[step].dif);
		return;
	}
	if(a[step].flag) down(step);
	if(rt <= a[2 * step].rt) insert(lt,rt,2 * step,x);
	else if(lt > a[2 * step].rt) insert(lt,rt,2 * step + 1,x);
	else {
		insert(lt,a[2 * step].rt,2 * step,x);
		insert(a[2 * step + 1].lt,rt,2 * step + 1,x);
	}
	int d = gcd(a[2 * step].dif,a[2 * step + 1].dif);
	a[step].dif = gcd(d,mabs(a[2 * step + 1].lx - a[2 * step].rx));
	a[step].lx = a[2 * step].lx;
	a[step].rx = a[2 * step + 1].rx;
//	a[step].gcd = gcd(a[step].lx,a[step].dif);
}

int query(int lt,int rt,int step)
{
	if(a[step].lt == lt && a[step].rt == rt) {
		return gcd(a[step].dif,a[step].lx);
	}
	if(a[step].flag) {
		down(step);
	}
	if(rt <= a[2 * step].rt) return query(lt,rt,2 * step);
	if(lt > a[2 * step].rt) return query(lt,rt,2 * step + 1);
	return gcd(query(lt,a[2 * step].rt,2 * step),query(a[2 * step + 1].lt,rt,2 * step + 1));
}

struct edge
{
	int v,next;
}e[N];

int head[N],cnt;

void addedge(int u,int v)
{
	e[cnt].v = v;
	e[cnt].next = head[u];
	head[u] = cnt ++;
}

int fa[N],son[N],size[N],dep[N],top[N],w[N],f[N],e_num;

void dfs(int u)
{
	size[u] = 1;
	son[u] = 0;
	for(int i = head[u]; i != -1; i = e[i].next)
		if(e[i].v != fa[u]) {
			fa[e[i].v] = u;
			dep[e[i].v] = dep[u] + 1;
			dfs(e[i].v);
			if(size[e[i].v] > size[son[u]]) son[u] = e[i].v;
			size[u] += size[e[i].v];
		}
}

void dfs(int u,int tp)
{
	w[u] = ++e_num;
	val[w[u]] = f[u];
	top[u] = tp;
	if(son[u] > 0) dfs(son[u],tp);
	for(int i = head[u]; i != -1; i = e[i].next)
		if(e[i].v != fa[u] && e[i].v != son[u])
			dfs(e[i].v,e[i].v);
}

int find(int x,int y)
{
	int ans = 0;
	int fx = top[x];
	int fy = top[y];
	while(fx != fy) {
		if(dep[fx] < dep[fy]) swap(x,y),swap(fx,fy);
		ans = gcd(ans,query(w[fx],w[x],1));
		x = fa[fx];
		fx = top[x];
	}
	if(dep[x] > dep[y]) swap(x,y);
	return gcd(ans,query(w[x],w[y],1));
}

void find(int x,int y,int z)
{
	int fx = top[x];
	int fy = top[y];
	while(fx != fy) {
		if(dep[fx] < dep[fy]) swap(x,y),swap(fx,fy);
		insert(w[fx],w[x],1,z);
		x = fa[fx];
		fx = top[x];
	}
	if(dep[x] > dep[y]) swap(x,y);
	return insert(w[x],w[y],1,z);
}

void myscanf(int &x)
{
	char c;
	while(1) {
		c = getchar();
		if(c >= '0' && c <= '9') break;
	}
	x = c - '0';
	while(1) {
		c = getchar();
		if(c >= '0' && c <= '9') x = 10 * x + (c - '0');
		else break;
	}
}

int main()
{
	int n,x,y,z;
	scanf("%d",&n);
	int root = rand() % n + 1;
	memset(head,-1,sizeof(head));
	cnt = 0;
	for(int i = 1; i < n; i ++) {
		myscanf(x);
		myscanf(y);
		x ++,y ++;
		addedge(x,y);
		addedge(y,x);
	}
	for(int i = 1; i <= n; i ++)
		myscanf(f[i]);
	fa[root] = dep[root] = e_num = son[0] = 0;
	dfs(root);
	dfs(root,root);
	init(1,e_num,1);
	scanf("%d",&n);
	char c;
	while(n --) {
		while(c = getchar()) {
			if(c == 'C' || c == 'F') break;
		}
		if(c == 'C') {
			myscanf(x);
			myscanf(y);
			myscanf(z);
			x ++,y ++;
			find(x,y,z);
		}
		else {
			myscanf(x);
			myscanf(y);
			x ++,y ++;
			printf("%d\n",find(x,y));
		}
	}
	return 0;
}
