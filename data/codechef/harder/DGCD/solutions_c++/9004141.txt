#include <stdio.h>
#include <stdlib.h>
using namespace std;

int n,m,i,j,k,u,v,c,lca,ll,rr,val,aim,ans;
int a[50005],add[400005],g[400005];
int son[50005],next[100005],ed[100005],tot;
int size[50005],heavy[50005],head[50005];
int deep[50005],fa[50005],dfn[50005],id[50005],cnt;
char opt;

int gcd(int a,int b)
{
	if(a<0)a=-a;if(b<0)b=-b;
	if(!b)return a;
	return gcd(b,a%b);
}

int LCA(int u,int v)
{
	for(;head[u]!=head[v];)
	if(deep[head[u]]>deep[head[v]])u=fa[head[u]];
	else v=fa[head[v]];
	if(deep[u]<deep[v])return u;
	else return v;
}

void dfs1(int x)
{
	size[x]=1;heavy[x]=-1;
	for(int i=son[x];i;i=next[i])
	if(!size[ed[i]])
	{
		fa[ed[i]]=x;
		deep[ed[i]]=deep[x]+1;
		dfs1(ed[i]);
		size[x]+=size[ed[i]];
		if(heavy[x]==-1||size[ed[i]]>size[heavy[x]])heavy[x]=ed[i];
	}
}

void dfs2(int x)
{
	dfn[x]=++cnt;id[cnt]=x;
	if(!head[x])head[x]=x;
	if(heavy[x]!=-1)head[heavy[x]]=head[x],dfs2(heavy[x]);
	for(int i=son[x];i;i=next[i])
	if(!head[ed[i]])dfs2(ed[i]);
}

void B(int x,int l,int r)
{
	if(l==r)
	{
		add[x]=a[id[l]];
		if(heavy[id[l]]!=-1)g[x]=a[id[l]]-a[heavy[id[l]]];
		return;
	}
	int mid=l+r>>1;
	B(x<<1,l,mid);
	B(x<<1|1,mid+1,r);
	g[x]=gcd(g[x<<1],g[x<<1|1]);
}

void C(int x,int l,int r)
{
	if(l>=ll&&r<=rr)
	{
		add[x]+=c;
		return;
	}
	int mid=l+r>>1;
	if(rr<=mid)C(x<<1,l,mid);
	else if(ll>mid)C(x<<1|1,mid+1,r);
		else C(x<<1,l,mid),C(x<<1|1,mid+1,r);
}

void M(int x,int l,int r)
{
	if(l==r)
	{
		g[x]+=val;
		return;
	}
	int mid=l+r>>1;
	if(aim<=mid)M(x<<1,l,mid);
	else M(x<<1|1,mid+1,r);
	g[x]=gcd(g[x<<1],g[x<<1|1]);
}

void Q(int x,int l,int r)
{
	if(l>=ll&&r<=rr)
	{
		ans=gcd(ans,g[x]);
		return;
	}
	int mid=l+r>>1;
	if(rr<=mid)Q(x<<1,l,mid);
	else if(ll>mid)Q(x<<1|1,mid+1,r);
		else Q(x<<1,l,mid),Q(x<<1|1,mid+1,r);
}

void Q2(int x,int l,int r)
{
	if(l==r)
	{
		ans=gcd(ans,add[x]);
		return;
	}
	int mid=l+r>>1;
	if(add[x])add[x<<1]+=add[x],add[x<<1|1]+=add[x],add[x]=0;
	if(aim<=mid)Q2(x<<1,l,mid);
	else Q2(x<<1|1,mid+1,r);
}

void work(int L,int R)
{
	ll=L;rr=R;C(1,1,n);
	aim=R;val=c;M(1,1,n);
	if(head[id[L]]!=id[L])aim=L-1,val=-c,M(1,1,n);
}

void calc(int L,int R)
{
	aim=L;Q2(1,1,n);
	if(L!=R)ll=L,rr=R-1,Q(1,1,n);
}

int main()
{
	scanf("%d",&n);
	for(i=1;i<n;++i)
	{
		scanf("%d%d",&u,&v);++u;++v;
		++tot;next[tot]=son[u];son[u]=tot;ed[tot]=v;
		++tot;next[tot]=son[v];son[v]=tot;ed[tot]=u;
	}
	for(i=1;i<=n;++i)scanf("%d",&a[i]);
	dfs1(1);dfs2(1);
	B(1,1,n);
	scanf("%d",&m);
	for(;m;--m)
	{
		for(opt=getchar();opt!='F'&&opt!='C';opt=getchar());
		if(opt=='F')
		{
			ans=0;
			scanf("%d%d",&u,&v);++u;++v;lca=LCA(u,v);
			for(;head[u]!=head[lca];u=fa[head[u]])calc(dfn[head[u]],dfn[u]);
			calc(dfn[lca],dfn[u]);
			for(;head[v]!=head[lca];v=fa[head[v]])calc(dfn[head[v]],dfn[v]);
			if(lca!=v)calc(dfn[lca]+1,dfn[v]);
			printf("%d\n",ans);
		}
		else
		{
			scanf("%d%d%d",&u,&v,&c);++u;++v;lca=LCA(u,v);
			for(;head[u]!=head[lca];u=fa[head[u]])work(dfn[head[u]],dfn[u]);
			work(dfn[lca],dfn[u]);
			for(;head[v]!=head[lca];v=fa[head[v]])work(dfn[head[v]],dfn[v]);
			if(lca!=v)work(dfn[lca]+1,dfn[v]);
		}
	}
}