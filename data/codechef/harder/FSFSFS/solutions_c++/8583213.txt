#include <bits/stdc++.h>

using namespace std;

const int MaxN = 3e3 + 10;
const int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53};
const int Size = 16;

int lp[MaxN], pr[MaxN], sz;
int dp[502][1 << Size];
int ord[MaxN];

int solve(int n, int m) {
  int arr[MaxN] = {};
  for (int i = 2; i <= n; ++i) {
    int x = i;
    while (x > 1) {
      int e = lp[x], c = 0;
      while (x % e == 0) {
        x /= e;
        c ^= 1;
      }
      arr[e] ^= c;
    }
  }
  vector < pair < int, int > > all;
  for (int i = 2; i <= n; ++i) {
    bool ok = true;
    int mx = 1, x = i;
    while (x > 1) {
      int c = 0, e = lp[x];
      while (x % e == 0) {
        x /= e;
        c++;
      }
      if (c > 1 || arr[e] == 0) {
        ok = false;
      }
      mx = max(mx, e);
    }
    if (ok == true) {
      all.push_back(make_pair(mx, i));
    }
  }
  sort(all.rbegin(), all.rend());
  memset(ord, -1, sizeof(ord));
  int cSize = 0;
  for (int i = 0; i < Size; ++i) {
    if (arr[primes[i]] == 1) {
      ord[primes[i]] = cSize++;
    }
  }
  memset(dp, 0, sizeof(dp));
  dp[0][(1 << cSize) - 1] = 1;
  int c = 0;
  for (int i = 0, j; i < (int)all.size(); i = j, ++c) {
    if (ord[all[i].first] == -1) {
      for (j = i; j < (int)all.size() && all[i].first == all[j].first; ++j);
      for (int k = i; k < j; ++k) {
        for (int mask = 0; mask < 1 << cSize; ++mask) {
          if (dp[c][mask] == 0) {
            continue;
          }
          int nmask = mask, x = all[k].second;
          bool ok = true;
          while (x > 1) {
            int e = lp[x];
            if (ord[e] != -1) {
              if (nmask & (1 << ord[e])) {
                nmask ^= 1 << ord[e];
              } else {
                ok = false;
              }
            }
            x /= e;
          }
          if (ok == true) {
            dp[c + 1][nmask] = (dp[c + 1][nmask] + dp[c][mask]) % m;
          }
        }
      }
    } else {
      j = i + 1;
      for (int mask = 0; mask < 1 << cSize; ++mask) {
        int nmask = mask, x = all[i].second;
        bool ok = true;
        while (x > 1) {
          int e = lp[x];
          if (ord[e] != -1) {
            if (nmask & (1 << ord[e])) {
              nmask ^= 1 << ord[e];
            } else {
              ok = false;
            }
          }
          x /= e;
        }
        dp[c + 1][mask] = (dp[c + 1][mask] + dp[c][mask]) % m;
        if (ok == true) {
          dp[c + 1][nmask] = (dp[c + 1][nmask] + dp[c][mask]) % m;
        }
      }
    }
  }
  return 2 * dp[c][0] % m;
}

int main() {
//  freopen("input.txt", "r", stdin);
  for (int i = 2; i < MaxN; ++i) {
    if (!lp[i]) {
      lp[i] = pr[sz++] = i;
    }
    for (int j = 0; j < sz && i * pr[j] < MaxN && pr[j] <= lp[i]; ++j) {
      lp[i * pr[j]] = pr[j];
    }
  }
  int t;
  scanf("%d", &t);
  while (t --> 0) {
    int n, m;
    scanf("%d%d", &n, &m);
    printf("%d\n", solve(n, m));
  }
  return 0;
}
