#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#define maxn 100005
using namespace std;

class node {
  public:
    node *l,*r,*p;
    int data,sz,inv;
    node(int data_,node* p_) { p = p_;  l = r = 0;  data = data_;  sz = 1;  inv = 1; }
};

void setSize(node* x) {
  x->sz = 1;
  if (x->l != 0) x->sz += x->l->sz;
  if (x->r != 0) x->sz += x->r->sz;
}

int getSize(node* x) {
  return (x == 0) ? 0 : x->sz;
}

void inverse(node* x) {
  if (x == 0 || x->inv == 1) return;
  x->inv = 1;
  if (x->l != 0) x->l->inv = -x->l->inv;
  if (x->r != 0) x->r->inv = -x->r->inv;
  swap(x->l,x->r);
}

void rotate(node* x) {
  node* p = x->p;
  node* g = p->p;
  inverse(g);
  inverse(p);
  inverse(x);

  if (g != 0) {
    if (g->l == p) g->l = x; else g->r = x;
    x->p = g;
  }
  else x->p = 0;

  if (p->l == x) {
    p->l = x->r;
    if (x->r != 0) x->r->p = p;
    x->r = p;
  }
  else {
    p->r = x->l;
    if (x->l != 0) x->l->p = p;
    x->l = p;
  }
  p->p = x;

  setSize(p);
  setSize(x);
}

void splay(node* x) {
  while (1) {
    node* p = x->p;
    if (p == 0) return;
    inverse(p);
    node* g = p->p;
    inverse(g);
    if (g == 0) rotate(x);
    else if ((g->l == p) == (p->l == x)) {
      rotate(p);
      rotate(x);
    }
    else {
      rotate(x);
      rotate(x);
    }
  }
}

node* split(node* &x,int k) {
  if (k == 0) return 0;
  if (k == x->sz) {
    node* ans = x;
    x = 0;
    return ans;
  }

  inverse(x);
  k++;
  int leftSize = getSize(x->l);
  while (leftSize + 1 != k) {
    if (leftSize >= k) x = x->l; else {
      k -= (leftSize + 1);
      x = x->r;
    }
    inverse(x);
    leftSize = getSize(x->l);
  }

  splay(x);
  node* ans = x->l;
  ans->p = 0;
  x->l = 0;
  setSize(x);
  return ans;
}

node* merge(node* n1,node* n2) {
  if (n1 == 0) return n2;
  if (n2 == 0) return n1;
  inverse(n2);
  while (1) {
    if (n2->l == 0) break;
    n2 = n2->l;
    inverse(n2);
  }

  splay(n2);
  n2->l = n1;
  n1->p = n2;
  setSize(n2);
  return n2;
}

node* build(int low,int high) {
  if (low > high) return 0;
  int mid = (low + high)/2;
  node* x = new node(mid,0);
  x->l = build(low,mid - 1);
  x->r = build(mid + 1,high);

  if (x->l != 0) x->l->p = x;
  if (x->r != 0) x->r->p = x;
  setSize(x);
  return x;
}

void go(node* x) {
  if (x == 0) return;
  inverse(x);
  go(x->l);
  printf("%d ", x->data);
  go(x->r);
}

int main() {
  int n,q;
  scanf("%d %d", &n, &q);
  node* root = build(1,n);
  
  while (q--) {
    int a,b,c;
    scanf("%d %d %d", &a, &b, &c);
    node* top = split(root,a);
    node* mid = split(root,b);
    root = merge(top,root);
    top = split(root,c);
    mid->inv = -mid->inv;
    mid = merge(top,mid);
    root = merge(mid,root);
  }

  go(root);
  printf("\n");
}
