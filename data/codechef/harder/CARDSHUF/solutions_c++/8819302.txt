#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstdlib>
#define rep(i,j,k) for(int i=(int)j;i<=(int)k;i++)
#define per(i,j,k) for(int i=(int)j;i>=(int)k;i--)
using namespace std;
const int N=110000;
int fa[N],l[N],r[N],sz[N];bool rev[N];
inline void down(int x){
	if(rev[x]){
		int tmp=l[x];l[x]=r[x];r[x]=tmp;
		rev[l[x]]^=1;
		rev[r[x]]^=1;
		rev[x]=0;
	}
}
inline void updata(int x){
	sz[x]=sz[l[x]]+sz[r[x]]+1;
}
inline void left(int x){
	int y=fa[x];int z=fa[y];
	r[y]=l[x];if(l[x])fa[l[x]]=y;
	fa[x]=z;if(l[z]==y)l[z]=x;else if(r[z]==y)r[z]=x;
	l[x]=y;fa[y]=x;
	updata(y);updata(x);
}
inline void right(int x){
	int y=fa[x];int z=fa[y];
	l[y]=r[x];if(r[x])fa[r[x]]=y;
	fa[x]=z;if(l[z]==y)l[z]=x;else if(r[z]==y)r[z]=x;
	r[x]=y;fa[y]=x;
	updata(y);updata(x);
}
int q[N];int root;
inline void splay(int x,int f){
	q[q[0]=1]=x;
	for(int k=x;fa[k];k=fa[k])q[++q[0]]=fa[k];
	while(q[0]){down(q[q[0]]);q[0]--;}
	while(fa[x]^f){
		int y=fa[x];int z=fa[y];
		if(z==f){
			if(l[y]==x)right(x);else left(x);
		}
		else{
			if(l[z]==y){
				if(l[y]==x)right(y),right(x);
				else left(x),right(x);
			}
			else{
				if(r[y]==x)left(y),left(x);
				else right(x),left(x);
			}
		}
	}
	if(!f)root=x;
}
int findkth(int x,int y){
	while(1){
		down(x);
		if(sz[l[x]]+1==y)return x;
		if(sz[l[x]]+1<y){
			y-=sz[l[x]]+1;
			x=r[x];
		}
		else x=l[x];
	}
}
int split(int k){
	if(!k)return 0;
	int y=findkth(root,k+1);
	splay(y,0);
	int cc=l[y];
	fa[l[y]]=0;l[y]=0;updata(y);
	return cc;
}
void merge(int y){
	if(!y)return;
	int rt=root;
	int xx=findkth(y,sz[y]);
	splay(xx,0);
	r[xx]=rt;fa[rt]=xx;updata(xx);
}
int build(int _l,int _r){
	if(_l>_r)return 0;
	if(_l==_r){sz[_l]=1;return _l;}
	int mid=(_l+_r)>>1;
	int lc=build(_l,mid-1);
	int rc=build(mid+1,_r);
	fa[lc]=fa[rc]=mid;
	l[mid]=lc;r[mid]=rc;
	updata(mid);
	return mid;
}
int n,m;
void dfs(int x){
	if(!x)return;
	down(x);
	dfs(l[x]);
	if(x<=n)printf("%d ",x);
	dfs(r[x]);
}
int main(){
	scanf("%d%d",&n,&m);
	root=build(1,n+1);
	while(m--){
		int A,B,C;scanf("%d%d%d",&A,&B,&C);
		
		int r1=split(A);
	
		int r2=split(B);
		merge(r1);
		int r3=split(C);
		rev[r2]^=1;
		down(r2);
		merge(r2);
		merge(r3);
	}
	dfs(root);
	return 0;
}

