#include<iostream>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<cstdio>
using namespace std;
struct node{int ch[2],pre,sz,fl;}t[100005];
int rt;
void flip(int x){swap(t[x].ch[0],t[x].ch[1]);t[x].fl^=1;}
void pu(int x){t[x].sz=t[t[x].ch[0]].sz+t[t[x].ch[1]].sz+1;}
void pd(int x){if(t[x].fl){flip(t[x].ch[0]);flip(t[x].ch[1]);t[x].fl=0;}}
void rot(int x){
	int y=t[x].pre;
	if(y==rt)rt=x;
	pd(y);pd(x);
	int f=t[y].ch[0]==x;
	t[y].ch[!f]=t[x].ch[f];if(t[x].ch[f])t[t[x].ch[f]].pre=y;
	t[x].pre=t[y].pre;if(t[y].pre)t[t[y].pre].ch[t[t[y].pre].ch[1]==y]=x;
	t[x].ch[f]=y;t[y].pre=x;
	pu(y);
}
/*void splay(int x,int g=0){
  if(t[x].pre==g)pd(x);
  else{
  while(t[x].pre!=g)rot(x);
  pu(x);
  }
  }*/
void pdd(int x){
	if(x){
		pdd(t[x].pre);
		pd(x);
	}
}
void splay(int x,int g=0){
	if(t[x].pre==g)pd(x);
	else{
		pdd(x);
		while(t[x].pre!=g){
			int y=t[x].pre;
			if(t[y].pre==g){
				rot(x);
			}else{
				int z=t[y].pre;int f=t[z].ch[1]==y;
				if(t[y].ch[f]==x)rot(y),rot(x);
				else rot(x),rot(x);
			}
		}
		pu(x);
	}
}
void rto(int k,int g=0){
	int x=rt;
	while(1){
		pd(x);
		if(t[t[x].ch[0]].sz+1==k)break;
		else if(k<=t[t[x].ch[0]].sz)x=t[x].ch[0];
		else{
			k-=t[t[x].ch[0]].sz+1;
			x=t[x].ch[1];
		}
	}
	splay(x,g);
}
int build(int l,int r,int pr){
	if(l>r)return 0;
	int x=(l+r)>>1;
	t[x].ch[0]=build(l,x-1,x);
	t[x].ch[1]=build(x+1,r,x);
	t[x].pre=pr;
	t[x].fl=0;
	pu(x);
	return x;
}
int n,q;
void walk(int x){
	if(!x)return ;
	pd(x);
	walk(t[x].ch[0]);
	if(x!=1 && x!=n+2){
		printf("%d",x-1);
	        printf(" ");
	}
	walk(t[x].ch[1]);
}
int main()
{

	scanf("%d%d",&n,&q);
	t[0].sz=0;
	rt=build(1,n+2,0);
	while(q--){
		int a,b,c;
		scanf("%d%d%d",&a,&b,&c);
		rto(1);
		rto(a+2,rt);
		int A=t[t[rt].ch[1]].ch[0];
		t[t[rt].ch[1]].ch[0]=0;
		pu(t[rt].ch[1]);
		pu(rt);
		rto(b+2,rt);
		int B=t[t[rt].ch[1]].ch[0];
		t[t[rt].ch[1]].ch[0]=A;
		t[A].pre=t[rt].ch[1];
		pu(t[rt].ch[1]);
		pu(rt);
		rto(c+2,rt);
		int C=t[t[rt].ch[1]].ch[0];
		t[t[rt].ch[1]].ch[0]=B;
		t[B].pre=t[rt].ch[1];
		flip(B);
		pu(t[rt].ch[1]);
		pu(rt);
		rto(2,rt);
		t[t[rt].ch[1]].ch[0]=C;t[C].pre=t[rt].ch[1];
		pu(t[rt].ch[1]);
		pu(rt);
	}
	walk(rt);
	putchar('\n');
	return 0;
}
