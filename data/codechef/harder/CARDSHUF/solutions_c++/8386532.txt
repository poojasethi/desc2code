using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (long long i=a;i<b;i++)
#define FORE(i,a,b) for (long long i=a;i<=b;i++)
#define FORD(i,a,b) for (long long i=a;i>=b; i--)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})


typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;
const double pi=3.141592653589;

struct node{
    node *l, *r, *p;
    int size, gt;
    bool rev;
    void update(){
        size=l->size+r->size+1;
    }
};

int n,q,x,y,z;
node *root, *nu, *a, *b, *c;

void lazy_down(node *x){
    if (x->rev){
        swap(x->l,x->r);
        x->l->rev^=1;
        x->r->rev^=1;
        x->rev=0;
    }
}

void Set(node *a, node *b, int k){
    b->p=a;
    if (k) a->r=b;
    else a->l=b;
}

node *nodeat(node *x, int k){
    while (1){
        lazy_down(x);
        int sz=x->l->size+1;
        if (sz==k) return x;
        else if (sz>k) x=x->l;
        else{
            x=x->r;
            k-=sz;
        }
    }
}

void uptree(node *x){
    node *y, *z;
    y=x->p;
    z=y->p;
    if (y->l==x){
        Set(y,x->r,0);
        Set(x,y,1);
    }
    else{
        Set(y,x->l,1);
        Set(x,y,0);
    }
    Set(z,x,z->r==y);
    x->update();
    y->update();
}

void splay(node *x){
    while (x->p!=nu) uptree(x);
}

void split(node *t, int i, node **t1, node **t2){
    if (i<=0){
        (*t1)=nu;
        (*t2)=t;
        return;
    }
    if (i>=t->size){
        (*t1)=t;
        (*t2)=nu;
        return;
    }
    (*t1)=nodeat(t,i);
    splay(*t1);

    (*t2)=(*t1)->r;
    (*t1)->r=nu;
    (*t2)->p=nu;

    (*t1)->update();
    (*t2)->update();
}

node *join(node *a, node *b){
    if (a==nu) return b;
    lazy_down(a);
    while (a->r!=nu){
        a=a->r;
        lazy_down(a);
    }
    splay(a);
    Set(a,b,1);
    a->update();
    return a;
}

void visit(node *x){
    if (x!=nu){
        lazy_down(x);
        visit(x->l);
        cout << x->gt << " ";
        visit(x->r);
    }
}

int main(){
 //   freopen("CARDSHUF.inp", "r", stdin);
 //   freopen("CARDSHUF.out", "w", stdout);
    ri(n); ri(q);
    nu=new node;
    nu->l=nu->r=nu->p=nu;
    nu->size=nu->rev=nu->gt=0;
    root=nu;
    FORE(i,1,n){
        c=new node;
        c->l=c->r=c->p=nu;
        c->size=1;
        c->rev=0;
        c->gt=i;
        root=join(root,c);
    }
    while (q--){
        ri(x); ri(y); ri(z);
        split(root,x, &a,&b);
        split(b,y,&b,&c);
        root=join(a,c);
        split(root,z,&a,&c);
        b->rev^=1;
        root=join(join(a,b),c);
    }

    visit(root);
}
