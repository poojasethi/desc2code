#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

int l[100005],r[100005],fa[100005],size[100005],st[100005],root;
bool rev[100005];

void splay_updata(int x){size[x]=size[l[x]]+size[r[x]]+1;}

void zig(int x)
{
	int y=fa[x],z=fa[y];
	if(l[z]==y)l[z]=x;else r[z]=x;
	fa[x]=z,fa[y]=x,fa[r[x]]=y;
	l[y]=r[x],r[x]=y;
	splay_updata(y);
}

void zag(int x)
{
	int y=fa[x],z=fa[y];
	if(l[z]==y)l[z]=x;else r[z]=x;
	fa[x]=z,fa[y]=x,fa[l[x]]=y;
	r[y]=l[x];l[x]=y;
	splay_updata(y);
}

void Rev(int x){rev[x]^=1;swap(l[x],r[x]);}

void splay_down(int x)
{
	if(rev[x])
	{
		if(l[x])Rev(l[x]);
		if(r[x])Rev(r[x]);
		rev[x]=false;
	}
}

void splay(int x)
{
	int y,z;
	y=x;z=1;st[1]=x;
	while(fa[y])
	{
		++z;
		y=fa[y];
		st[z]=y;
	}
	for(y=z;y>=1;--y)splay_down(st[y]);
	while(fa[x])
	{
		y=fa[x],z=fa[y];
		if((z)&&(y!=root))
		{
			if(l[z]==y){if(l[y]==x)zig(y),zig(x);else zag(x),zig(x);}
			else{if(l[y]==x)zig(x),zag(x);else zag(y),zag(x);}
		}
		else{if(l[y]==x)zig(x);else zag(x);}
	}
	root=x;
	splay_updata(root);
}

int BST_K(int K)
{
	int x=root;
	while(x)
	{
		splay_down(x);
		if(size[l[x]]+1==K)return x;
		if(size[l[x]]+1>K)
		x=l[x];
		else 
		{
			K=K-1-size[l[x]];
			x=r[x];
		}
	}
}

int splay_build(int p,int q,int f)
{
    int mid;
    mid=(p+q)>>1;
    fa[mid]=f;
    if(mid!=p)l[mid]=splay_build(p,mid-1,mid);
    if(mid!=q)r[mid]=splay_build(mid+1,q,mid);
    splay_updata(mid);
    return mid;
}

int n,m,i,j,k,A,B,C;
int a[100005];

void dfs(int x)
{
	splay_down(x);
	if(l[x])dfs(l[x]);
	a[++n]=x;
	if(r[x])dfs(r[x]);
}

int main()
{
	scanf("%d%d",&n,&m);
	root=splay_build(1,n,0);
	for(;m;--m)
	{
		scanf("%d%d%d",&A,&B,&C);
		if(A)
		{
			splay(BST_K(size[root]-A+1));
			A=root;root=l[A];
			l[A]=0;fa[root]=0;
			splay_updata(A);
		}
		if(B)
		{
			splay(BST_K(size[root]-B+1));
			B=root;root=l[B];
			l[B]=0;fa[root]=0;
			splay_updata(B);
			Rev(B);
		}
		if(root)
		{
			for(k=root;r[k];k=r[k])splay_down(k);
			splay(k);r[k]=A;fa[A]=k;
			splay_updata(k);
		}else root=A;
		if(C)
		{
			splay(BST_K(size[root]-C+1));
			C=root;root=l[C];
			l[C]=0;fa[root]=0;
			splay_updata(C);
		}
		if(root)
		{
			for(k=root;r[k];k=r[k])splay_down(k);
			splay(k);r[k]=B;fa[B]=k;
			splay_updata(k);
		}else root=B;
		if(root)
		{
			for(k=root;r[k];k=r[k])splay_down(k);
			splay(k);r[k]=C;fa[C]=k;
			splay_updata(k);
		}else root=C;
	}
	n=0;
	dfs(root);
	for(i=n;i>=1;--i)
	{
		printf("%d",n-a[i]+1);
		if(i==1)printf("\n");
		else printf(" ");
	}
}