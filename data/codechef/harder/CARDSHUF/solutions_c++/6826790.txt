#include <bits/stdc++.h>

using namespace std;

int n, m;

struct node {
  int s, a;
  node* p;
  node* l;
  node* r;

  node() {
    s = a = 0;
  }
};

node* r1;
node* r2;
node* null;

node* newnode() {
  node* f = new node;
  f->p = f->l = f->r = null;
  return f;
}

void setl(node* u, node* v) {
  u->l = v;
  v->p = u;
}

void setr(node* u, node* v) {
  u->r = v;
  v->p = u;
}

void update(node* u) {
  u->s = u->l->s + u->r->s + 1;
}

void up(node* u) {
  node* v = u->p;
  node* w = v->p;
  if (u == v->l) {
    setl(v, u->r);
    setr(u, v);
  } else {
    setr(v, u->l);
    setl(u, v);
  }
  u->p = w;
  if (w != null) {
    if (w->l == v) {
      w->l = u;
    } else {
      w->r = u;
    }
  }
  update(v);
  update(u);
}

void add(node* &u, int v) {
  node* f = newnode();
  f->a = v;
  if (u == null) {
    f->s = 1;
    u = f;
    return;
  }
  setl(f, u);
  update(f);
  u = f;
}

node* pos(node* u, int v) {
  while (1) {
    int cnt = u->l->s + 1;
    if (cnt == v) {
      return u;
    }
    if (cnt > v) {
      u = u->l;
    } else {
      v -= cnt;
      u = u->r;
    }
  }
}

void splay(node* u) {
  while (1) {
    node* v = u->p;
    if (v == null) {
      return;
    }
    node* w = v->p;
    if (w != null) {
      if ((u == v->l) == (v == w->l)) {
        up(v);
      } else {
        up(u);
      }
    }
    up(u);
  }
}

void split(node* u, node* &t1, node* &t2, int v) {
  if (!v) {
    t1 = null;
    t2 = u;
    return;
  }
  node* f = pos(u, v);
  splay(f);
  t1 = f;
  t2 = f->r;
  t2->p = null;
  t1->r = null;
  update(t1);
}

void join(node* t1, node* t2, node* &u) {
  if (t1 == null) {
    u = t2;
    return;
  }
  node* f = pos(t1, t1->s);
  splay(f);
  setr(f, t2);
  update(f);
  u = f;
}

void query(node* u, bool f = 1) {
  if (u == null) {
    return;
  }
  query(u->l, 0);
  cout << u->a << " ";
  query(u->r, 0);
  if (f) {
    cout << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  null = new node;
  r1 = r2 = null;
  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    add(r1, i);
  }
  for (int i = n; i >= 1; i--) {
    add(r2, i);
  }
  for (int i = 1; i <= m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    node* t11;
    node* t12;
    node* t13;
    node* t21;
    node* t22;
    node* t23;
    //r1
    split(r1, t11, t12, a);
    split(t12, t12, t13, b);
    join(t11, t13, t11);
    split(t11, t11, t13, c);
    //r2
    split(r2, t23, t22, n - a - b);
    split(t22, t22, t21, b);
    join(t23, t21, t21);
    split(t21, t23, t21, n - b - c);
    //rotate
    join(t11, t22, r1);
    join(r1, t13, r1);
    join(t23, t12, r2);
    join(r2, t21, r2);
  }
  query(r1);
  return 0;
}
