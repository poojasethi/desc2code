#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
struct node {
	int x;
	int y;
	int cnt;
	bool rev;
	node *l;
	node *r;
	node() : x(0), y(0), cnt(0), rev(false), l(NULL), r(NULL) {}
	node(int x) : x(x), y(rand()), cnt(1), rev(false), l(NULL), r(NULL) {}
};
typedef node *pnode;
void push(pnode &T) {
	if (T && T -> rev) {
		T -> rev = false;
		swap(T -> l,T -> r);
		if (T -> l) T -> l -> rev ^= true;
		if (T -> r) T -> r -> rev ^= true;
	}
}
int cnt(pnode T) {
	return T ? T -> cnt : 0;	
}
void upd_cnt(pnode &T) {
	if (T) T -> cnt = cnt(T -> l) + cnt(T -> r) + 1;
}
void split(pnode T, pnode &L, pnode &R, int key, int add = 0) {
	if (!T) {
		L = R = NULL;
	} else {
		push(T);
		int cur_key = cnt(T -> l) + add;
		if (cur_key >= key) {
			split(T -> l,L,T -> l,key,add);
			R = T;
		} else {
			split(T -> r,T -> r,R,key,add + cnt(T -> l) + 1);
			L = T;
		}
		upd_cnt(T);
	}
}
void merge(pnode &T, pnode L, pnode R) {
	if (!L || !R) {
		if (L) T = L; else T = R;
	} else {
		push(L);
		push(R);
		if (L -> y > R -> y) {
			merge(L -> r,L -> r,R);
			T = L;
		} else {
			merge(R -> l,L,R -> l);
			T = R;
		}
		upd_cnt(T);
	}
}
void out(pnode T) {
	if (!T) return;
	push(T);
	out(T -> l);
	printf("%d ",T -> x);
	out(T -> r);
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	srand(time(NULL));
	pnode T = NULL;
	int n,m; cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		merge(T,T,new node(i));
	}
	for (int i = 0; i < m; i++) {
		int a,b,c; scanf("%d%d%d",&a,&b,&c);
		pnode A,B,C;
		split(T,A,T,a);
		split(T,B,T,b);
		merge(T,A,T);
		split(T,C,T,c);
		if (B) B -> rev ^= true;
		merge(T,B,T);
		merge(T,C,T);
	}
	out(T);
	return 0;
}
