#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<map>
#include<vector>
#include<list>
#include<set>
#include<queue>
#include<numeric>
#include<sstream>
#include<string>
#include<cmath>
#include<algorithm>
#include<stack>
using namespace std;

//#define inf 1001001010010010100ll
#define pb		push_back
#define mp 		make_pair
#define EPS		1e-9
#define ll long long
#define vi vector<int>
#define pii pair<int,int>
#define fi first
#define se second
#define inf 1000000000
#define mod 1009419529
#define N 111111
#define M 420
struct node
{
 int cnt,f,v,w;
 node *l,*r;
 node():cnt(1),f(0),l(0),r(0){}
};
node nl[N];
void norm(node *a)
{
 if(a->f)
 {
  a->f=0;swap(a->l,a->r);
  if(a->l)a->l->f^=1;
  if(a->r)a->r->f^=1;
 }
}
void disp(node *a)
{
 if(!a)return;
 norm(a);
 disp(a->l);
 printf("%d ",a->v+1);
 disp(a->r);
}
int count(node *p)
{
 if(p)return p->cnt;else return 0;
}
void split(node *p,node *&a,node *&b,int cnt)
{
 if(!p){a=b=0;return;}
 norm(p);
 if(cnt<=count(p->l))
 {
  node *u;
  split(p->l,a,u,cnt);
  p->l=u;b=p;
  p->cnt-=count(a);
 }
 else
 {
  node *u;
  split(p->r,u,b,cnt-1-count(p->l));
  p->r=u;a=p;
  p->cnt-=count(b);
 }
}
node *merge(node *root,node *a)
{
 if(!root)return a;
 if(!a)return root;
 norm(root),norm(a);
 if(root->w>=a->w)
 {root->cnt+=count(a);
  root->l=merge(root->l,a);

  return root;
 }
 else
 {a->cnt+=count(root);
  a->r=merge(root,a->r);

  return a;
 }
}
int main()
{
	//freopen("in.txt","r",stdin);
	int T,i,j,k,m,n,num;
	//scanf("%d",&T);
	//while(T--)
	scanf("%d%d",&n,&m);
	{
	 node *root=nl;
	 root->v=0;root->w=0;
	 for(i=0;i<n-1;i++)
	 {
	  node *a=nl+i+1;
	  a->v=i+1;a->w=rand();
	  root=merge(a,root);
	 }
	 while(m--)
	 {
	  int a,b,c;
	  scanf("%d%d%d",&a,&b,&c);
	  node *an,*bn;an=bn=0;
	  split(root,an,root,a);
	  split(root,bn,root,b);
	  if(b)bn->f^=1;
	  root=merge(root,an);
	  an=0;
	  split(root,an,root,c);
	  root=merge(root,bn);
	  root=merge(root,an);
	 }
	 disp(root);
	 puts("");
	}
	return 0;
}
