// just testing shdut's solution

#define _CRT_SECURE_NO_DEPRECATE
#define _SCL_SECURE_NO_WARNINGS

#include <cstdio>
#include <cstdlib>
#include <algorithm>

using namespace std;

class randomized_tree {
public:
	struct node {
		node *left, *right;
		int weight; int size;
		int val; int flip;
		node() {
			left = 0; right = 0;
			weight = rand(); size = 1;
			val = 0; flip = 0;
		}
	};

	static int size(node *r) {
		return r ? r->size : 0;
	}

	static void norm(node *r) {
		if (r->flip) {
			r->flip = 0;
			swap(r->left, r->right);
			if (r->left) r->left->flip ^= 1;
			if (r->right) r->right->flip ^= 1;
		}
	}

	static void split(node *r, node *&x, node *&y, int pos) {
		if (!r) {
			x = y = 0;
			return;
		}
		norm(r);
		if (pos <= size(r->left)) {
			node *u;
			split(r->left, x, u, pos);
			r->left = u;
			y = r;
			r->size -= size(x);
		}
		else {
			node *u;
			split(r->right, u, y, pos - size(r->left) - 1);
			r->size -= size(y);
			r->right = u;
			x = r;
		}
	}
	
	static node *merge(node *x, node *y) {
		if (!y) return x;
		if (!x) return y;
		norm(y); norm(x);
		if (y->weight < x->weight) {
			x->size += size(y);
			x->right = merge(x->right, y);
			return x;
		}
		else {
			y->size += size(x);
			y->left = merge(x, y->left);
			return y;
		}
	}

	static void print(node *x) {
		if (!x) return;
		norm(x);
		print(x->left);
		printf("%d ", x->val);
		print(x->right);
	}
};

#define SZ 100000
randomized_tree::node nodes[SZ];

int main() {
	int n, m; scanf("%d %d", &n, &m);
	randomized_tree::node *root = 0;
	for (int i = 0; i < n; i++) {
		randomized_tree::node *a = &nodes[i];
		a->val = i+1;
		root=randomized_tree::merge(root, a);
	}

	for (int i = 0; i < m; i++) {
		int a, b, c;
		scanf("%d %d %d", &a, &b, &c);
		randomized_tree::node *an = 0, *bn = 0, *cn = 0;
		randomized_tree::split(root, an, root, a);
		randomized_tree::split(root, bn, root, b);
		root = randomized_tree::merge(an, root);
		randomized_tree::split(root, cn, root, c);
		if (bn) bn->flip ^= 1;
		root = randomized_tree::merge(bn, root);
		root = randomized_tree::merge(cn, root);
	}
	randomized_tree::print(root); printf("\n");
	return 0;
}
