/*
author :  R Anirudh 
*/
 
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;
 
typedef long long LL;
typedef unsigned long long ULL;
#define pb push_back
 
#define MAXN 302
int n,m,K,t[MAXN][MAXN],pre[MAXN][MAXN] ;
char s[MAXN][MAXN] ;
 
int main()
{
scanf("%d%d%d",&n,&m,&K) ;
for(int i = 0;i < n;i++) scanf("%s",s[i]) ;
for(int j = 0;j < m;j++)
for(int i = 0;i < n;i++)
t[i][j] = (i > 0 ? t[i - 1][j] : 0) + (s[i][j] == 'H') ;
for(int k = 1;k <= n;k++)
{
for(int i = 0;i + k <= n;i++)
{
int j = i + k - 1 ;
int cur[MAXN],start[MAXN] = {},end[MAXN] = {} ;
for(int ii = 0;ii < m;ii++) cur[ii] = t[j][ii] - (i > 0 ? t[i - 1][ii] : 0) ;
int ptr = 0,sum = cur[0] ;
for(int ii = 0;ii < m;ii++)
{
while(sum < K && ptr + 1 < m) sum += cur[++ptr] ;
if(sum < K) break ;
start[ptr - ii + 1]++ ;
end[m - ii]++ ;
sum -= cur[ii] ;
}
int active = 0 ;
for(j = 1;j <= m;j++)
{
active += start[j] ;
pre[k][j] += active ;
active -= end[j] ;
}
}
for(int i = 2;i <= m;i++) pre[k][i] += pre[k][i - 1] ;
}
int q,a,b ;
scanf("%d",&q) ;
while(q--)
{
scanf("%d%d",&a,&b) ;
int ret = 0 ;
for(int i = 1;i <= a;i++) ret += pre[i][b] ;
printf("%d\n",ret) ;
}
return 0 ;
}
 
