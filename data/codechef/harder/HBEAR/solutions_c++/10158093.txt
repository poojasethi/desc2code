//
//  HUNGRY_BEAR.cpp
//  
//
//  Created by Manh Le on 14/5/16.
//
//

#include <bits/stdc++.h>

using namespace std;

const int maxn = 301;

int n, m, k, res[maxn], a[maxn], number[maxn][maxn];
long long result[maxn][maxn];

void init() {
    
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= n - i + 1   ; j++) {
            
            a[0] = 0;
            for(int h = 1; h <= m; h++) {
                a[h] = number[h][i + j - 1] - number[h - 1][i + j - 1] - number[h][i - 1] + number[h - 1][i - 1];
            }
            int h = 0, sum = 0;
            memset(res, 0, sizeof(res));
            for(int row = 1; row <= m; row++) {
                sum -= a[row - 1];
                while (sum < k) {
                    if (h == m) {
                        break;
                    }
                    h++; sum += a[h];
                }
                
                if (sum < k) {
                    break;
                }
                res[h - row + 1]++;
                res[m - row + 2]--;
            }
            
            sum = 0;
            
            for(int h = 1; h <= m; h++) {
                sum += res[h];
                result[j][h] += sum;
            }
        }
    }
    
    for(int i = 1; i <= m; i++) {
        for(int j = 1; j <= n; j++) {
            result[j][i] += result[j][i - 1] + result[j - 1][i] - result[j - 1][i - 1];
        }
    }
}

void readInput() {
    
    scanf("%d %d %d\n", &m, &n, &k);
    for(int i = 1; i <= m ; i++) {
        string st;
        getline(cin, st);
        for(int j = 1; j <= n; j++) {
            number[i][j] = number[i - 1][j] + number[i][j - 1] - number[i - 1][j - 1];
            if (st[j - 1] == 'H') {
                number[i][j]++;
            }
        }
    }
}

void printResult() {
    
    int Q = 0;
    scanf("%d", &Q);
    while (Q--) {
        int A, B;
        scanf("%d %d", &A, &B);
        printf("%lld\n", result[B][A]);
    }
}

int main() {
    
    
    readInput();
    init();
    printResult();
    
    return 0;
}
