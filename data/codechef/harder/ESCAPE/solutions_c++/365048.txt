using namespace std;

#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>

typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PI;

#define SI ({int x;scanf("%d",&x);x;})
#define SET(v,x) memset(v,x,sizeof v)

#define FOR(i,a,b) for(int _n(b),i(a);i<_n;i++) 
#define REP(i,n) FOR(i,0,n)
#define TC REP(kase,SI)

#define SZ(v) int(v.size())
#define PB(x) push_back(x)
#define ALL(v) (v).begin(),(v).end()
#define SORT(v) sort(ALL(v))

#define MP(x,y) make_pair(x,y)
#define F first
#define S second

#define MXN 303
#define MXH 5003

int inf = 2000000000;
int dx[]={1,-1,0,0},dy[]={0,0,1,-1};
int R,C,h,sr,sc,er,ec;

int hx[MXH], hy[MXH];
bool hole[MXN][MXN];
bool vis[MXN][MXN];

bool possible(int d)
{
	queue<int> qh;
	queue<int> qm;

	SET(vis,false); SET(hole,false);

	qm.push(sr), qm.push(sc), vis[sr][sc]=true;
	REP(i,h) qh.push(hx[i]), qh.push(hy[i]), hole[hx[i]][hy[i]]=true;

	while(!qm.empty() && !qh.empty())
	{
		// harry
		REP(i,d)
		{
			for(int s=qm.size();s>0;s-=2)
			{
				int cx=qm.front(); qm.pop();
				int cy=qm.front(); qm.pop();

				if(hole[cx][cy]) continue;

				REP(k,4)
				{
					int nx=cx+dx[k], ny=cy+dy[k];
					if(nx<0||nx>=R||ny<0||ny>=C||vis[nx][ny]||hole[nx][ny]) continue;
					if(nx==er && ny==ec) return true;
					vis[nx][ny]=true; 
					qm.push(nx), qm.push(ny);
				}
			}
		}

		// hole
		for(int s=qh.size();s>0;s-=2)
		{
			int cx = qh.front(); qh.pop();
			int cy = qh.front(); qh.pop();
			REP(k,4)
			{
				int nx=cx+dx[k], ny=cy+dy[k];
				if(nx<0||nx>=R||ny<0||ny>=C||hole[nx][ny]) continue;
				hole[nx][ny]=true;
				qh.push(nx), qh.push(ny);
			}
		}
	}

	return false;
}


int main()
{
	TC
	{
		R=SI; C=SI; sr=SI; sc=SI; er=SI; ec=SI; h=SI;
		
		REP(i,h) hx[i]=SI, hy[i]=SI;

		int lo=0, hi=R*C;

		if(!possible(hi)) printf("Impossible!\n");
		else
		{
			while(hi-lo>1)
			{
				int mid = (lo+hi)>>1;
				if(possible(mid)) hi=mid;
				else lo=mid;
			}
			printf("%d\n",hi);
		}
	}

	return 0;
}









