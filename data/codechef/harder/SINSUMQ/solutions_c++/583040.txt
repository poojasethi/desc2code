#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;
const int maxQ=100100;
const double eps=1e-9;
struct Query {
    int L,R,add;
};
struct STNode {
    int add;
    double si,co;
    inline void init(int L,int R) {
        double tmp=2*sin(0.5);
        co=(sin(R+0.5)-sin(L-0.5))/tmp;
        si=(cos(L-0.5)-cos(R+0.5))/tmp;
        
        /*double co2=0,si2=0;
        for(int i=L;i<=R;i++)
            co2+=cos(i),si2+=sin(i);
        assert(fabs(co-co2)<eps && fabs(si-si2)<eps);*/
    }
    inline void apply(int add) {
        this->add+=add;
        
        double co2=cos(add),si2=sin(add);
        double co3=co*co2-si*si2;
        double si3=si*co2+co*si2;
        co=co3,si=si3;
    }
};

STNode st[65536*8];
inline void st_access(int i) {
    if(st[i].add) {
        st[i*2].apply(st[i].add);
        st[i*2+1].apply(st[i].add);
        st[i].add=0;
    }
}
inline void st_update(int i) {
    st[i].co=st[i*2].co+st[i*2+1].co;
    st[i].si=st[i*2].si+st[i*2+1].si;
}
void st_init(int i,int L,int R) {
    st[i].add=0;
    if(L==R) {
        extern int pos[];
        st[i].init(pos[L],pos[L+1]-1);
    } else {
        int M=(L+R)/2;
        st_init(i*2,L,M),st_init(i*2+1,M+1,R);
        st_update(i);
    }
}
int st_L,st_R;
double st_si;
void st_query(int i,int L,int R) {
    if(st_L<=L && R<=st_R) {
        st_si+=st[i].si;
        return;
    }
    st_access(i);

    int M=(L+R)/2;
    if(st_L<=M)
        st_query(i*2,L,M);
    if(st_R>M)
        st_query(i*2+1,M+1,R);
}
int st_add;
void st_apply(int i,int L,int R) {
    if(st_L<=L && R<=st_R) {
        st[i].apply(st_add);
        return;
    }
    st_access(i);

    int M=(L+R)/2;
    if(st_L<=M)
        st_apply(i*2,L,M);
    if(st_R>M)
        st_apply(i*2+1,M+1,R);
    st_update(i);
}

int n,qn;
Query q[maxQ];

int nPos,pos[maxQ*2];
int main() {
    scanf("%d%d",&n,&qn);
    for(int i=1;i<=qn;i++)
        scanf("%d%d%d",&q[i].L,&q[i].R,&q[i].add);

    nPos=2;
    pos[1]=0,pos[2]=n+1;
    for(int i=1;i<=qn;i++) {
        pos[++nPos]=q[i].L;
        pos[++nPos]=q[i].R+1;
    }
    sort(pos+1,pos+nPos+1);
    nPos=unique(pos+1,pos+nPos+1)-(pos+2);

    st_init(1,1,nPos);
    for(int i=1;i<=qn;i++) {
        st_L=lower_bound(pos+1,pos+nPos+1,q[i].L)-pos;
        st_R=lower_bound(pos+1,pos+nPos+1,q[i].R+1)-pos-1;
        st_add=q[i].add;
        //printf("%d~%d add %d\n",pos[st_L],pos[st_R+1]-1,st_add);
        if(st_add)
            st_apply(1,1,nPos);
        else {
            st_si=0,st_query(1,1,nPos);
            printf("%.10f\n",st_si);
        }
    }
    scanf("%*s");
}
