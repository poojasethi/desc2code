#include <stdio.h>
#include <string.h>
#include <math.h>
#include <algorithm>
using namespace std;

const int maxQ = 100000;
const int maxM = 524288;

int n,q,d[maxM],L[maxQ],R[maxQ],D[maxQ],x[2*maxQ];
double SIN[maxM],COS[maxM];
 
double query(int x,int L,int R,int l,int r,int v)
{
	if(R<l || r<L) return 0.;
	v+=d[x];
	if(l<=L && R<=r) return SIN[x]*cos(1.*v)+COS[x]*sin(1.*v);
	int M=(L+R)/2;
	double SIN1=query(2*x,L,M,l,r,v),SIN2=query(2*x+1,M+1,R,l,r,v);
	return SIN1+SIN2;
}

void add(int x,int L,int R,int l,int r,int v)
{
	if(R<l || r<L) return;
	if(l<=L && R<=r) {d[x]+=v; return;}
	int M=(L+R)/2;
	add(2*x,L,M,l,r,v);
	add(2*x+1,M+1,R,l,r,v);
	double cos2x=cos(1.*d[2*x]),   sin2x=sin(1.*d[2*x]);
	double cos2x1=cos(1.*d[2*x+1]),sin2x1=sin(1.*d[2*x+1]);
	SIN[x]=SIN[2*x]*cos2x+COS[2*x]*sin2x+SIN[2*x+1]*cos2x1+COS[2*x+1]*sin2x1;
	COS[x]=COS[2*x]*cos2x-SIN[2*x]*sin2x+COS[2*x+1]*cos2x1-SIN[2*x+1]*sin2x1;
}

int main()
{
	int i,len=0;
	for(scanf("%d%d",&n,&q),i=0;i<q;i++)scanf("%d%d%d",L+i,R+i,D+i);
	for(i=0;i<q;i++){x[len++]=L[i];x[len++]=R[i]+1;}
	sort(x,x+len);
	len=unique(x,x+len)-x;
	int m=1;
	for(len--;m<len;m*=2);
	memset(d,0,8*m);
	for(i=m;i<m+len;i++)
	{
		double Li=x[i-m],Ri=x[i-m+1];
		SIN[i]=sin((Ri+Li-1)/2) * sin((Ri-Li)/2)/sin(0.5);
		COS[i]=cos((Ri+Li-1)/2) * sin((Ri-Li)/2)/sin(0.5);
	}
	for(i=m-1;i>0;i--)
	{
		SIN[i]=SIN[2*i]+SIN[2*i+1];
		COS[i]=COS[2*i]+COS[2*i+1];
	}
	for(i=0;i<q;i++)
	{
		int Li=lower_bound(x,x+len+1,L[i])-x;
		int Ri=lower_bound(x,x+len+1,R[i]+1)-x-1;
		if(D[i])add(1,0,m-1,Li,Ri,D[i]);
	    else printf("%.7lf\n",query(1,0,m-1,Li,Ri,0));
	}
	return 0;
}
