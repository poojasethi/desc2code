#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>
 
using namespace std; 
 
#define rep(i,n) for(int i=0;i<(n);++i)
#define clr(a,b) memset(a,b,sizeof(a)); 
#define all(c) (c).begin(), (c).end() 
#define inf 1000000000 
 
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<int> vi;
 
int v[100][100];
int c[100];
int N, D;
 
int testCount;
 
int len(int* a)
{
	int l = 0;
	for (int i = 0; i < D; i++)
		l += a[i] * a[i];
	return l;
}
 
 
int T[100][100];
int t[100];
int b[100][100];
 
void Solve(int testIndex)
{
	long long bestLength = 1e18;
 
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			T[i][j] = j == i ? 1 : 0;
		}
		for (int j = 0; j < D; j++)
		{
			b[i][j] = v[i][j];
		}
		
		t[i] = len(v[i]);
	}
 
	int lim = int(7.55 * CLOCKS_PER_SEC * testIndex / testCount);
 
	int move;
	for (move = 0; clock() < lim; move++)
	//if (D <= 2)
	{ 
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < i; j++)
			{
				for (int sign = -1; sign <= 1; sign += 2)
				{
					int len = 0;
					for (int k = 0; k < D; k++)
					{
						int x = b[i][k] + sign * b[j][k];
						len += x * x;
					}
					if (len == 0)
						continue;
 
 
					if (len >= t[i] && len >= t[j])
						continue;
 
					bool valid = true;
					for (int k = 0; k < N; k++)
					{
						if (abs(T[i][k] + sign * T[j][k]) > 100)
						{
							valid = false;
							break;
						}
					}
					if (!valid)
						continue;
 
					if (len < t[i] && t[i] > t[j])
					{	
						t[i] = len;
						for (int k = 0; k < D; k++)
						{
							b[i][k] = b[i][k] + sign * b[j][k];
						}
						for (int k = 0; k < N; k++)
						{
							T[i][k] = T[i][k] + sign * T[j][k];
						}
					}
					else if (len < t[j])
					{
						t[j] = len;
						for (int k = 0; k < D; k++)
						{
							b[j][k] = b[i][k] + sign * b[j][k];
						}
						for (int k = 0; k < N; k++)
						{
							T[j][k] = T[i][k] + sign * T[j][k];
						}
					}
 
				}		
 
 
			}
		}
	}
	
	int j = min_element(t, t + N) - t;
 
	copy(T[j], T[j] + N, c);
}
 
 
void Generate()
{
	int T = 30;
	printf("%d\n\n", T);
 
	while (T--)
	{
		int N = rand() % 101;
		int D = rand() % 101;
 
		printf("%d %d\n", N, D);
 
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < D; j++)
				printf("%d ", (rand() % 201) - 100);
			printf("\n");
		}
		printf("\n");		
	}
}
 
int main(int argc, char* argv[])
{
#ifndef ONLINE_JUDGE
	freopen("test.in", "r", stdin);
#endif
 
#if 0
	Generate();
	return 0;
#endif
	
	scanf("%d", &testCount);
	
	double totalScore = 0;
 
	for (int testIndex = 1; testIndex <= testCount; testIndex++)
	{
		scanf("%d %d", &N, &D);
 
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < D; j++)
				scanf("%d", &v[i][j]);
		}
 
		Solve(testIndex);
 
#ifdef ONLINE_JUDGE
		for (int i = 0; i < N; i++)
		{
			printf("%d ", c[i]);
		}
		printf("\n");
 
#else
 
#if 1
		int shortest = 1000000000;
 
		for (int i = 0; i < N; i++)
		{
			int x = 0;
			for (int j = 0; j < D; j++)
			{
				x += v[i][j] * v[i][j];
			}
			shortest = min(shortest, x);
		}
 
		int length = 0;
		for (int j = 0; j < D; j++)
		{
			int x = 0;
			for (int i = 0; i < N; i++)
			{
				x += c[i] * v[i][j];
			}
			length += x * x;
		}
 
		double score = sqrt(1.0 * length / shortest);
#else
 
		long long shortest2 = 1000000000000LL;
		for (int i = 0; i < N; i++)
		{
			long long x = 0;
			for (int j = 0; j < D; j++)
			{
				x += (long long)v[i][j] * v[i][j];
			}
			shortest2 = min(shortest2, x);
		}
 
		double score = sqrt(1.0 * shortest2 / shortest);
#endif
 
 
		printf("Score = %lf\n", score);
 
		totalScore += score;
#endif
	}
 
#ifndef ONLINE_JUDGE
	printf("Total Score = %lf\n", totalScore);
#endif
 
	return 0;
} 