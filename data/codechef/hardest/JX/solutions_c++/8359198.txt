#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <sys/time.h>
#include <stdio.h>
#include <string.h>
 
using namespace std;
 
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
typedef unsigned long long ULL;
typedef unsigned char BYTE;
 
#define FOR(i, n) for (int i = 0; i < (n); ++i)
#define FORU(i, s, e) for (int i = (s); i <= (e); ++i)
#define FORD(i, s, e) for (int i = (s); i >= (e); --i)
#define ALL(x) (x).begin(),(x).end()
#define FOREACH(i, v) for(__typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)
#define SIZE(x) ((int)(x).size())
#define MP make_pair
#define BIT(x, b) (((x) >> (b)) & 1)
#define DEBUG(x) cerr << #x << " = " << x << " at line " << __LINE__ << endl;
#define INF 1000000000
#define MAX_TIME 5
#define TIME_LEFT_UNTIL(end) ((curTime=getTime()-startTime) < (end))
#define TIME_LEFT() TIME_LEFT_UNTIL(MAX_TIME)
#define INIT_TIME() startTime = getTime();
//#define cerr while (0) cerr
 
double startTime, curTime;
 
inline double getTime () {
  timeval tv;
  gettimeofday(&tv, 0);
  return tv.tv_sec + tv.tv_usec * 1e-6;
}
 
#define MAX 505
int bored[MAX];
bool like[MAX][MAX];
int likes[MAX], dislikes[MAX];
int D, S;
 
int main () {
//  INIT_TIME();
  srand(1);
 
  scanf("%d%d", &D, &S);
  FOR(i, D)
    scanf("%d", bored+i);
  FOR(i, D)
    FOR(j, S)
      scanf("%d", &like[i][j]);
 
  bool choose[S];
  memset(choose, 0, sizeof(choose));
  int val = 0;
  int itrs = 0;
  FOR(i, 1000000) {
    ++itrs;
    int s = rand() % S;
    int v = 0;
    FOR(d, D) {
      if (like[d][s]) {
        if (likes[d] == 0)
          ++v;
        else if (likes[d] == 1 && choose[s])
          --v;
      }
      else {
        if (dislikes[d] == bored[d] && choose[s])
          ++v;
        else if (dislikes[d] == bored[d]-1 && !choose[s])
          --v;
      }
    }
 
    if (v >= 0) {
      val += v;
      choose[s] ^= 1;
      FOR(d, D)
        if (like[d][s])
          likes[d] += (choose[s] << 1) - 1;
        else
          dislikes[d] += (choose[s] << 1) - 1;
    }
  }
//  printf("itrs = %d\nval = %d\n", itrs, val);
 
  int cnt = 0;
  FOR(i, S)
    if (choose[i])
      ++cnt;
  printf("%d\n", cnt);
  FOR(i, S)
    if (choose[i])
      printf("%d\n", i);
 
  return 0;
}
 