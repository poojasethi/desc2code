    #include<cstdio>			/*   ry_7   */
    #include<vector>
    #include<algorithm>
    #include<time.h>
     
    using namespace std;
    typedef long long ll;
    typedef pair<ll,int> p;
    bool flag[100008];
    vector<p> b[100008];
    ll x[100008],xsum,vsum[100008],ksum[100008],need[100008],dsum[100008];
    
    vector<ll> v[100008];
    vector<p> v1[100008];
    
    int ans[100008];
    #define pc putchar_unlocked
    void printlong(int n)
{
char op[41];
int size = 40;
while(n)
{
op[size--] = n%10+'0';
n/=10;

}
for(int i=size+1;i<41;i++)
pc(op[i]);

}
     
     
     
    inline long long inp()
    {
    int noRead=0;
    char p=getchar_unlocked();
    for(;p<33;){p=getchar_unlocked();};
    while(p>32)
    {
    noRead = (noRead << 3) + (noRead << 1) + (p - '0');
    p=getchar_unlocked();
    }
    return noRead;
    };
     
     
    void reduce(int i,int k)
    {
    for(int j=0;j<k;j++)
    dsum[j]-= v[i][j];
    }
    int add(int i,int k)
    {
    for(int j=0;j<k;j++)
    if(dsum[j]+v[i][j]>x[j]) return 0;
    for(int j=0;j<k;j++)
    dsum[j]+= v[i][j];
    return 1;
    }
    ll diff(int k)
    {
    ll df=0;
    for(int j=0;j<k;j++)
    df+= x[j]-dsum[j];
    return df;
    }
     
    clock_t begin, end;
    int main()
    {
    begin=clock();
    int t;
    t=inp();
    while(t--)
    {
    int n,k;
   
    n=inp(); k=inp();
     
    for(int j=0;j<k;j++){ dsum[j]=0; }
    for(int i=0;i<n;i++)
    {
    ll sum=0; flag[i]=1;
    v[i].clear();
    for(int j=0;j<k;j++)
    {
    ll t1;
   
    t1=inp();
     
    v[i].push_back(t1);
    }
    }
    for(int i=0;i<k;i++)
    {
    
    x[i]=inp();
    need[i]=x[i];
    }
    ll lt=100000000;
    while(lt)
    {
    int f1,f2;
    f2=0;
    for(int i=0;i<n;i++)
    {
    if(!flag[i]) continue;
    int f=1;
    for(int j=0;j<k;j++)
    {
    ll t = need[j]/lt;
    if(v[i][j]>t)
    { f=0; break;}
    }
    if(f)
    {
    f1=0;
    for(int j=0;j<k;j++)
    if((need[j]-v[i][j])<0 ) { f1=1; break;}
    if(f1) continue;
    for(int j=0;j<k;j++)
    if((need[j]-v[i][j])==0 ) f2=1;
    for(int j=0;j<k;j++)
    need[j]-=v[i][j];
    add(i,k);
    flag[i]=0;
    }
    if(f2) break;
    }
    lt/=100;
    if(f2) lt=0;
    }
    ll df=0;
    int c=0; int bf=0;
     
    for(int i=0;i<n;i++)
    {
    if(flag[i]) continue;
    reduce(i,k); df=diff(k);
    
    flag[i]=1;
    int nx=i;
    for(int j=0;j<n;j++)
    {
    if(!flag[j]) continue;
    if(!add(j,k)) continue;
    ll d=diff(k);
    if(d<df){ df=d; nx = j;}
    reduce(j,k);
    c++;
    if(c>281111) bf=1;
    }
    add(nx,k); flag[nx]=0;
    if(bf) break;
    }
    c=0;
    for(int i=0;i<n;i++)
    if(!flag[i]) ans[c++]=i;
    printf("%d\n",c);
    for(int i=0;i<c;i++)
    //printlong(ans[i]+1);
    printf("%d ",ans[i]+1);
    }
    return 0;
    } 