#include <stdio.h>
 
#define MAXN 805
#define UNREACHABLE '*'
#define UNEXPLORED  '.'
#define EXPLORED    'X'
 
char G     [MAXN*MAXN];
int  D     [MAXN*MAXN];
int  parent[MAXN*MAXN];
int  memB, memE, memL = -1;
 
void dfs(int N, int start)
{
    int s = start, s_fils, pos[4], d = 0, nn = 0, i, f;
 
    do
    {
         G[s] = EXPLORED;
         D[s] = d;
         f    = 0;
         /* ptet un autre ordre ? */
         pos[0] = s+1; pos[1] = s+(N+2); pos[2] = s-1; pos[3] = s-(N+2);
         for (i = 0; i < 4; i++)
         {
             s_fils = pos[i];
             if      (G[s_fils] == UNREACHABLE) continue;
             else if (G[s_fils] == UNEXPLORED)
             {
                 parent[s_fils] = s;
                 s = s_fils;
                 d++;
                 f = 1;
                 break;
             }
             else if (G[s_fils] == EXPLORED)
             {
                 nn = D[s] - D[s_fils];
                 if (memL < nn)
                 {
                     memB = s;
                     memE = s_fils;
                     memL = nn;
                 }
             }
         }
         if (f == 0) { s = parent[s]; d--; }
    }
    while (s != start);
}
 
int main()
{
    register int r, c; int N; int libre = 0, s;
 
    scanf("%d\n", &N);
    for (r = 1; r <= N; r++)
    {
        for (c = 1; c <= N; c++)
        {
        scanf("%c", &G[r*(N+2)+c]);
        if (!libre && G[r*(N+2)+c] == UNEXPLORED) libre = r*(N+2)+c;
        }
        getchar();
    }
 
    /* le libre est mal choisi. faut partir des coins. */
    /* il faut en lancer 4 au quatres coins pour avoir plus de chance ! imaginons un graphe oÃ�Â¹ le coin NW est isolÃ�Â© ! */
    /* en fait faudrait ptet surtout poursuivre le DFS s'il y'a des composantes non connexes non parcourues ! */
 
    dfs(N, libre);
 
#ifdef MYDEBUG
    for (r = 1; r <= N; r++)
    for (c = 1; c <= N; c++)
    if  (G[r*(N+2)+c] == EXPLORED)
    G[r*(N+2)+c] = UNEXPLORED;
#endif
 
    fprintf(stdout, "%d\n", memL + 1);
    fprintf(stdout, "%d %d\n", memE / (N+2) - 1, memE % (N+2) - 1);
#ifdef MYDEBUG
    G[memE] = EXPLORED;
#endif
    s = memB;
    do
    {
#ifdef MYDEBUG
        if  (G[s] == EXPLORED) { fprintf(stderr, "ERROR !\n"); exit(1); } else G[s] = EXPLORED;
#endif
        fprintf(stdout, "%d %d\n", s / (N+2) - 1, s % (N+2) - 1);
        s = parent[s];
    }
    while (s != memE);
 
#ifdef MYDEBUG
    for (r = 1; r <= N; r++)
    {
        for (c = 1; c <= N; c++)
        fprintf(stderr, "%c", G[r*(N+2)+c]);
        fprintf(stderr, "\n");
    }
#endif
 
    return 0;
}