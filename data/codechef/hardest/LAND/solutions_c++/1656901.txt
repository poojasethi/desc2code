
#include <string>
#include <stdlib.h>
#include <math.h>
#ifndef ONLINE_JUDGE
#include <windows.h>
#endif

class Spot {
public:
	int val;
	bool isSet;
};

long long pow2[50];

int width, height;
Spot map[100][100];

Spot bestMap[100][100];
double bestScore;

bool type1;

int absVal(int v) {
	return (v < 0 ? -v : v);
}

void calcPowers() {
	pow2[0] = 1;
	pow2[1] = 2;

	for (int i = 2; i < 50; i++)
		pow2[i] = pow2[i-1] * 2;
}

double getScore() {

	long long s = 0;

	for (int y = 0; y < height-1; y++) 
		for (int x = 0; x < width; x++) 
			s += pow2[absVal(map[y][x].val - map[y+1][x].val)];
	for (int y = 0; y < height; y++) 
		for (int x = 0; x < width-1; x++) 
			s += pow2[absVal(map[y][x].val - map[y][x+1].val)];

	return (log((double)s) / log((double)2));
}

void saveBestMap(double score) {
	bestScore = score;
	for (int y = 0; y < height; y++) 
		for (int x = 0; x < width; x++) 
			bestMap[y][x] = map[y][x];
}

int findAdjAvg(int x, int y) {

	int value = 0;
	int numValues = 0;

	if (x > 0 && map[y][x-1].val != 0) {
		value += map[y][x-1].val;
		numValues++;
	}
	if (y > 0 && map[y-1][x].val != 0) {
		value += map[y-1][x].val;
		numValues++;
	}
	if (x < width-1 && map[y][x+1].val != 0) {
		value += map[y][x+1].val;
		numValues++;
	}
	if (y < height-1 && map[y+1][x].val != 0) {
		value += map[y+1][x].val;
		numValues++;
	}

	if (numValues != 0)
		return (value / numValues);
	else
		return 0;
}

long long adjustSum(int sum) {

	if (!type1) {
		if (sum == 0)
			return 0;

		if (sum < 0)
			return -pow2[-sum];
		else
			return pow2[sum];
	}
	else
		return sum;
}

long long findDiffSum(int x, int y) {

	long long sum = 0;

	if (x > 0)
		sum += adjustSum(map[y][x-1].val - map[y][x].val);
	if (y > 0)
		sum += adjustSum(map[y-1][x].val - map[y][x].val);
	if (x < width-1)
		sum += adjustSum(map[y][x+1].val - map[y][x].val);
	if (y < height-1)
		sum += adjustSum(map[y+1][x].val - map[y][x].val);

	return sum;
}

void performIteration() {

	long long v;

	for (int y = height-1; y >= 0; y--) {
		for (int x = 0; x < width; x++) {
			if (!map[y][x].isSet) {

				v = findDiffSum(x,y);

				if (v < -1 || v > 1) {
					if (v < 0)
						map[y][x].val--;
					else
						map[y][x].val++;
				}

			}
		}
	}
}

void runAlgorithm() {

	bestScore = 999999999.0;
	bool hasEmpty = true;

	while (hasEmpty)  {

		hasEmpty = false;

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				if (map[y][x].val == 0) {
					map[y][x].val = findAdjAvg(x, y);
					if (map[y][x].val == 0)
						hasEmpty = true;
				}
			}
		}

	}	// end while has empty

	int times = 0;
	int MAX_TIMES = 50;
	double score;
	type1 = false;

	while (times++ < MAX_TIMES) {

		score = getScore();
		if (score < bestScore)
			saveBestMap(score);
		//else
			//break;		// if no score improvement, stop cycling
		//printf("\nscore = %.5f", score);

		performIteration();
	}

	type1 = true;
	times = 0;

	while (times++ < 10) {

		performIteration();
		score = getScore();
		if (score < bestScore)
			saveBestMap(score);
		//printf("\nscore = %.5f", score);
	}


	for (int y = 0; y < height; y++) 
		for (int x = 0; x < width; x++)
			map[y][x] = bestMap[y][x];

	while (times++ < 10) {

		performIteration();
		score = getScore();
		if (score < bestScore)
			saveBestMap(score);
		//printf("\nscore = %.5f", score);
	}


#ifndef ONLINE_JUDGE
	printf("\nbest score = %.5f\n", bestScore);
#endif
}


int main(int argc, char *argv[])
{	
#ifndef ONLINE_JUDGE
	freopen ("LAND.txt","r",stdin);
	DWORD startTime = GetTickCount();
#endif

	calcPowers();

	int numTestCases;
	scanf("%d", &numTestCases);

	for (int c = 0; c < numTestCases; c++) {

		scanf("%d %d", &height, &width);

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				scanf("%d", &map[y][x].val);
				map[y][x].isSet = (map[y][x].val != 0);
			}
		}

		runAlgorithm();

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				printf("%d ", bestMap[y][x].val);
			}
			printf("\n");
		}
		printf("\n");
		
	}

#ifndef ONLINE_JUDGE
	DWORD elapsed = GetTickCount() - startTime;
	printf("\ntime = %d", elapsed);
	fclose (stdin);	
#endif
}
