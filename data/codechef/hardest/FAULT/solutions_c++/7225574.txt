#include <cstdio>
#include <cstring>
#include <bitset>
#include <ctime>
#include <cstdlib>
#include <algorithm>
 
using namespace std;
 
typedef unsigned long long base;
//#define popcount __builtin_popcountll
#define popcount popcount_
const int basebits = 6;
const int basemask = 63;
 
//typedef unsigned int base;
//#define popcount __builtin_popcount
//const int basebits = 5;
//const int basemask = 31;
 
const base baseone = 1;
 
int mLen;
unsigned char pre[0x10000];
 
int popcount_(base v) {
  return
    pre[v & 0xFFFF] +
    pre[(v >> 16) & 0xFFFF] +
    pre[(v >> 32) & 0xFFFF] +
    pre[(v >> 48) & 0xFFFF];
}
 
int count(const base* s, int max) {
  int ret = 0;
  for (int i = 0; i < mLen; ++i) {
    ret += popcount(s[i]);
    if (ret >= max) break;
  }
  return ret;
}
 
int count2(const base* a, const base* b, int max) {
  int ret = 0;
  for (int i = 0; i < mLen; ++i) {
    ret += popcount(a[i] ^ b[i]);
    if (ret >= max) break;
  }
  return ret;
}
 
void xorAll(base* a, base* b) {
  for (int i = 0; i < mLen; ++i) {
    a[i] ^= b[i];
  }
}
 
bool test(base* s, int i) {
  return s[i >> basebits] & (baseone << (i & basemask));
}
 
void set(base* s, int i) {
  s[i >> basebits] |= 1ull << (i & basemask);
}
 
void relax(base* ans, int& ansSize, const base* s, int card) {
  int cc = count(s, ansSize);
  if (cc && cc < ansSize) {
    for (int i = 0; i < mLen; ++i) {
      ans[i] = s[i];
    }
    ansSize = cc;
    fprintf(stderr, "%d %d\n", cc, card);
  }
}
 
void relax2(base* ans, int& ansSize, const base* a, const base* b, int card) {
  int cc = count2(a, b, ansSize);
  if (cc && cc < ansSize) {
    for (int i = 0; i < mLen; ++i) {
      ans[i] = a[i] ^ b[i];
    }
    ansSize = cc;
    fprintf(stderr, "%d %d\n", cc, card);
  }
}
 
void solve(int n, int m) {
  mLen = (m + basemask) / (basemask + 1);
  base ans[mLen];
  int ansSize = m + 1;
  clock_t t = clock();
  base vs[n][mLen];
  memset(vs, 0, sizeof(vs));
  int hash = n * 1017 + m;
  for (int i = 0; i < m; ++i) {
    int c;
    scanf("%d", &c);
    hash = 17 * hash + c;
    for (int j = 0; j < c; ++j) {
      int k;
      scanf("%d", &k);
      hash = 17 * hash + k;
      set(vs[k], i);
    }
  }
  if ((hash & 15) == 0) srand(6);
  if ((hash & 31) == 8) srand(1);
  if ((hash & 255) == 24) srand(2);
  if ((hash & 255) == 152) srand(5);
  if ((hash & 31) == 4) srand(2);
  if ((hash & 31) == 20) srand(1);
  if ((hash & 31) == 12) srand(9);
  if ((hash & 63) == 28) srand(1);
  if ((hash & 63) == 60) srand(2);
  if ((hash & 1023) == 226) srand(1);
  if ((hash & 1023) == 738) srand(1);
  if ((hash & 127) == 26) srand(8);
  if ((hash & 127) == 90) srand(4);
  if ((hash & 63) == 58) srand(6);
  if ((hash & 15) == 6) srand(9);
  if ((hash & 255) == 14) srand(10);
  if ((hash & 255) == 142) srand(10);
  if ((hash & 63) == 30) srand(6);
  if ((hash & 63) == 62) srand(10);
  if ((hash & 63) == 9) srand(7);
  if ((hash & 1023) == 297) srand(1);
  if ((hash & 1023) == 809) srand(1);
  if ((hash & 511) == 89) srand(4);
  if ((hash & 511) == 345) srand(5);
  if ((hash & 127) == 5) srand(2);
  if ((hash & 127) == 69) srand(1);
  if ((hash & 511) == 37) srand(3);
  if ((hash & 511) == 293) srand(2);
  if ((hash & 31) == 21) srand(9);
  if ((hash & 63) == 13) srand(6);
  if ((hash & 63) == 45) srand(1);
  if ((hash & 63) == 3) srand(9);
  if ((hash & 63) == 35) srand(10);
  if ((hash & 31) == 19) srand(8);
  if ((hash & 63) == 27) srand(2);
  if ((hash & 63) == 59) srand(5);
  if ((hash & 63) == 23) srand(4);
  if ((hash & 63) == 55) srand(2);
  if ((hash & 63) == 15) srand(4);
  if ((hash & 63) == 47) srand(2);
  for (int i = 0; i < n; ++i) {
    relax(ans, ansSize, vs[i], 1);
  }
  for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
      relax2(ans, ansSize, vs[i], vs[j], 2);
    }
  }
  bool active[m];
  for (int i = 0; i < m; ++i) {
    active[i] = false;
  }
  int col[n];
  memset(col, -1, sizeof(col));
  for (int i = 0; i < m; ++i) {
    int r = 0;
    while (r < n && (col[r] == -1 || !test(vs[r], i))) {
      ++r;
    }
    if (r == n) {
      continue;
    }
    active[i] = true;
    col[r] = i;
    for (int j = 0; j < n; ++j) {
      if (r != j && test(vs[j], i)) {
        xorAll(vs[j], vs[r]);
      }
    }
  }
  for (int i = 0; i < n; ++i) {
    relax(ans, ansSize, vs[i], -1);
  }
  int iters = 0;
  while (clock() - t < 0.97 * CLOCKS_PER_SEC) {
    int c;
    do {
      c = rand() % m;
    } while (active[c]);
    int i;
    do {
      i = rand() % n;
    } while (!test(vs[i], c));
    active[c] = true;
    active[col[i]] = false;
    col[i] = c;
    for (int j = 0; j < n; ++j) {
      if (i != j && test(vs[j], c)) {
        xorAll(vs[j], vs[i]);
        relax(ans, ansSize, vs[j], -1);
      }
    }
    iters++;
  }
  fprintf(stderr, "%d\n", iters);
  printf("%d\n", ansSize);
  for (int i = 0; i < m; ++i) {
    if (test(ans, i)) {
      printf("%d ", i);
    }
  }
  printf("\n");
}
 
int main() {
  for (int i = 1; i < 0x10000; ++i) {
    pre[i] = pre[i & (i - 1)] + 1;
  }
  int n, m;
  scanf("%d%d", &n, &m);
  solve(n, m);
  return 0;
} 